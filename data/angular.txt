TITLE: Importing ReactiveFormsModule in Angular
DESCRIPTION: Imports the ReactiveFormsModule from @angular/forms and adds it to the NgModule imports array to enable reactive forms functionality.

LANGUAGE: TypeScript
CODE:
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [
    // other imports ...
    ReactiveFormsModule
  ],
})
export class AppModule { }

----------------------------------------

TITLE: Creating and Using Signals in Angular
DESCRIPTION: Demonstrates how to create a signal, read its value, and update it using the set and update methods. This snippet introduces the basic operations on signals.

LANGUAGE: typescript
CODE:
import {signal} from '@angular/core';

// Create a signal with the `signal` function.
const firstName = signal('Morgan');

// Read a signal value by calling it— signals are functions.
console.log(firstName());

// Change the value of this signal by calling its `set` method with a new value.
firstName.set('Jaime');

// You can also use the `update` method to change the value
// based on the previous value.
firstName.update(name => name.toUpperCase());

----------------------------------------

TITLE: Creating Injectable Calculator Service in Angular
DESCRIPTION: Demonstrates how to create a basic injectable service in Angular using the @Injectable decorator. The service provides a simple calculator functionality with an add method.

LANGUAGE: typescript
CODE:
import {Injectable} from '@angular/core';

@Injectable({providedIn: 'root'})
export class Calculator {
  add(x: number, y: number) {
    return x + y;
  }
}

----------------------------------------

TITLE: Implementing HeroService with Mock Data in Angular
DESCRIPTION: Extends the HeroService to include a getHeroes method that returns mock hero data, demonstrating a basic service implementation.

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core';
import { HEROES } from './mock-heroes';

@Injectable({
  // declares that this service should be created
  // by the root application injector.
  providedIn: 'root',
})
export class HeroService {
  getHeroes() {
    return HEROES;
  }
}

----------------------------------------

TITLE: Installing Angular CLI
DESCRIPTION: Commands to install Angular CLI globally using different package managers

LANGUAGE: shell
CODE:
npm install -g @angular/cli

LANGUAGE: shell
CODE:
pnpm install -g @angular/cli

LANGUAGE: shell
CODE:
yarn global add @angular/cli

LANGUAGE: shell
CODE:
bun install -g @angular/cli

----------------------------------------

TITLE: Importing and Using Angular Components
DESCRIPTION: Shows how to import and use child components within a parent component, demonstrating component composition.

LANGUAGE: typescript
CODE:
import {ProfilePhoto} from 'profile-photo.ts';

@Component({
  selector: 'user-profile',
  imports: [ProfilePhoto],
  template: `
    <h1>User profile</h1>
    <profile-photo />
    <p>This is the user profile page</p>
  `,
})
export class UserProfile {
  // Component behavior is defined in here
}

----------------------------------------

TITLE: Inject Method Usage in TypeScript
DESCRIPTION: Demonstrates how to use the inject method to request dependencies.

LANGUAGE: typescript
CODE:
@Component({ … })
class HeroListComponent {
  private service = inject(HeroService);
}

----------------------------------------

TITLE: Creating a New Angular Workspace and App
DESCRIPTION: Command to create a new Angular workspace and initial starter app named 'my-app'. This will prompt for additional feature selections.

LANGUAGE: shell
CODE:
ng new my-app

----------------------------------------

TITLE: Binding FormGroup to Template
DESCRIPTION: Shows how to connect the FormGroup and FormControls to the HTML template using formGroup and formControlName directives.

LANGUAGE: html
CODE:
<form [formGroup]="profileForm">
  <label>
    Name
    <input type="text" formControlName="name" />
  </label>
  <label>
    Email
    <input type="email" formControlName="email" />
  </label>
  <button type="submit">Submit</button>
</form>

----------------------------------------

TITLE: Angular Core API Type Definitions
DESCRIPTION: Defines the core Angular APIs including imports from rxjs, signal primitives, and core Angular components. Contains type definitions and interfaces that form the foundation of Angular's DI and component systems.

LANGUAGE: typescript
CODE:
import * as _angular_core from '@angular/core';
import { Observable } from 'rxjs';
import { SIGNAL } from '@angular/core/primitives/signals';
import { SignalNode } from '@angular/core/primitives/signals';
import { Subject } from 'rxjs';
import { Subscription } from 'rxjs';

----------------------------------------

TITLE: Component Import and Usage Example
DESCRIPTION: Shows how to import and use a component within another component using the imports array.

LANGUAGE: angular-ts
CODE:
import {ProfilePhoto} from './profile-photo';

@Component({
  imports: [ProfilePhoto],
  /* ... */
})
export class UserProfile { }

----------------------------------------

TITLE: Creating Basic Angular Component
DESCRIPTION: Demonstrates the basic structure of an Angular component with a simple user profile example using inline template.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'user-profile',
  template: `
    <h1>User profile</h1>
    <p>This is the user profile page</p>
  `,
})
export class UserProfile { /* Your component code goes here */ }

----------------------------------------

TITLE: Creating a FormControl in Angular Component
DESCRIPTION: Demonstrates how to create a FormControl instance in an Angular component class.

LANGUAGE: TypeScript
CODE:
import { FormControl } from '@angular/forms';

export class NameEditorComponent {
  name = new FormControl('');
}

----------------------------------------

TITLE: Implementing OnInit Interface in Angular TypeScript
DESCRIPTION: Shows how to implement the OnInit interface to ensure correct implementation of the ngOnInit lifecycle hook.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */
})
export class UserProfile implements OnInit {
  ngOnInit() {
    /* ... */
  }
}

----------------------------------------

TITLE: Template Variables with ViewChild Queries
DESCRIPTION: Example of using template reference variables with ViewChild decorator for querying elements in the component class.

LANGUAGE: angular-html
CODE:
<input #description value="Original description">

LANGUAGE: angular-ts
CODE:
@Component({
  /* ... */,
  template: `<input #description value="Original description">`,
})
export class AppComponent {
  // Query for the input element based on the template variable name.
  @ViewChild('description') input: ElementRef | undefined;
}

----------------------------------------

TITLE: Required Input Declaration
DESCRIPTION: Shows how to declare a required input using input.required with explicit type specification.

LANGUAGE: typescript
CODE:
@Component({/*...*/})
export class CustomSlider {
  // Declare a required input named value. Returns an `InputSignal<number>`.
  value = input.required<number>();
}

----------------------------------------

TITLE: Basic Angular Component Structure
DESCRIPTION: Demonstrates the fundamental structure of an Angular component with a decorator, selector, and template definition.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  template: `<img src="profile-photo.jpg" alt="Your profile photo">`,
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Implementing Two-way Binding with Form Controls in Angular
DESCRIPTION: This snippet demonstrates how to use two-way binding with form controls in Angular. It imports FormsModule, uses ngModel directive with two-way binding syntax, and updates the firstName attribute dynamically.

LANGUAGE: angular-ts
CODE:
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  imports: [FormsModule],
  template: `
    <main>
      <h2>Hello {{ firstName }}!</h2>
      <input type="text" [(ngModel)]="firstName" />
    </main>
  `
})
export class AppComponent {
  firstName = 'Ada';
}

----------------------------------------

TITLE: Conditional Rendering with @switch in Angular Templates
DESCRIPTION: Demonstrates how to use the @switch block for conditional rendering based on multiple cases. It includes @case and @default blocks for handling different conditions.

LANGUAGE: angular-html
CODE:
@switch (userPermissions) {
  @case ('admin') {
    <app-admin-dashboard />
  }
  @case ('reviewer') {
    <app-reviewer-dashboard />
  }
  @case ('editor') {
    <app-editor-dashboard />
  }
  @default {
    <app-viewer-dashboard />
  }
}

----------------------------------------

TITLE: Defining Angular DI Core Types and Functions
DESCRIPTION: Defines the core types and functions for Angular's dependency injection system, including InjectionToken interface, Injector interface, and utility functions for managing the current injector and handling not found cases.

LANGUAGE: typescript
CODE:
// @public (undocumented)
export function getCurrentInjector(): Injector | undefined | null;

// @public
export interface InjectionToken<T> {
    // (undocumented)
    ɵprov: ɵɵInjectableDeclaration<T>;
}

// @public (undocumented)
export interface Injector {
    // (undocumented)
    retrieve<T>(token: InjectionToken<T>, options?: unknown): T | NotFound;
}

// @public
export function isNotFound(e: unknown): e is NotFound;

// @public
export const NOT_FOUND: unique symbol;

// @public
export type NotFound = typeof NOT_FOUND | NotFoundError;

// @public
export class NotFoundError extends Error {
    constructor(message: string);
}

// @public (undocumented)
export function setCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;

----------------------------------------

TITLE: Angular Component with External Files
DESCRIPTION: Demonstrates using separate files for template and styles using templateUrl and styleUrl properties.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  templateUrl: 'profile-photo.html',
  styleUrl: 'profile-photo.css',
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Reactive Form Validation Configuration
DESCRIPTION: TypeScript code demonstrating how to set up form validation in a reactive form using built-in and custom validators.

LANGUAGE: typescript
CODE:
const actorForm = new FormGroup({
  'name': new FormControl('', [
    Validators.required,
    Validators.minLength(4),
    forbiddenNameValidator(/bob/i)
  ])
});

----------------------------------------

TITLE: Creating Writable Signals in TypeScript
DESCRIPTION: Demonstrates how to create and use writable signals in Angular, including reading values and using set/update operations.

LANGUAGE: typescript
CODE:
const count = signal(0);

// Signals are getter functions - calling them reads their value.
console.log('The count is: ' + count());

LANGUAGE: typescript
CODE:
count.set(3);

LANGUAGE: typescript
CODE:
// Increment the count by 1.
count.update(value => value + 1);

----------------------------------------

TITLE: Binding FormGroup to Template in Angular
DESCRIPTION: Demonstrates how to bind a FormGroup to a form element in the component template and use formControlName for individual controls.

LANGUAGE: HTML
CODE:
<form [formGroup]="profileForm" (ngSubmit)="onSubmit()">
  <label for="first-name">First Name: </label>
  <input id="first-name" type="text" formControlName="firstName">

  <label for="last-name">Last Name: </label>
  <input id="last-name" type="text" formControlName="lastName">
</form>

----------------------------------------

TITLE: Creating Actor Form Component in TypeScript
DESCRIPTION: Implements the ActorFormComponent class with form handling logic including model initialization and form submission.

LANGUAGE: typescript
CODE:
export class ActorFormComponent {
  model = new Actor('Marilyn Monroe', 'Universal', 'Method Acting');
  submitted = false;

  onSubmit() { this.submitted = true; }

  newActor() {
    this.model = new Actor('', '', '');
  }
}

----------------------------------------

TITLE: Reactive Forms Component Implementation
DESCRIPTION: Example showing how to implement a single form control using reactive forms approach. Creates a FormControl instance explicitly in the component class.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-reactive-favorite-color',
  template: `
    Favorite Color: <input type="text" [formControl]="favoriteColorControl">
  `
})
export class FavoriteColorComponent {
  favoriteColorControl = new FormControl('');
}

----------------------------------------

TITLE: Configuring Application Routes
DESCRIPTION: Defines the application routes configuration with Angular Router.

LANGUAGE: typescript
CODE:
export const appConfig: ApplicationConfig = {
  providers: [provideRouter(routes)]
};

----------------------------------------

TITLE: Creating New Angular Project
DESCRIPTION: Command to create a new Angular project using the Angular CLI

LANGUAGE: shell
CODE:
ng new <project-name>

----------------------------------------

TITLE: Implementing Dynamic Form Question Component Template
DESCRIPTION: Defines the template for rendering individual questions in the dynamic form. It uses ngSwitch to determine the question type and applies appropriate form controls and validation.

LANGUAGE: HTML
CODE:
<div [formGroup]="form">
  <label [attr.for]="question.key">{{question.label}}</label>

  <div [ngSwitch]="question.controlType">

    <input *ngSwitchCase="'textbox'" [formControlName]="question.key"
            [id]="question.key" [type]="question.type">

    <select [id]="question.key" *ngSwitchCase="'dropdown'" [formControlName]="question.key">
      <option *ngFor="let opt of question.options" [value]="opt.key">{{opt.value}}</option>
    </select>

  </div>

  <div class="errorMessage" *ngIf="!isValid">{{question.label}} is required</div>
</div>


----------------------------------------

TITLE: Input Transform Configuration
DESCRIPTION: Demonstrates how to use input transforms to modify input values before they're set.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'custom-slider',
  /*...*/
})
export class CustomSlider {
  label = input('', {transform: trimString});
}

function trimString(value: string | undefined): string {
  return value?.trim() ?? '';
}

----------------------------------------

TITLE: Sanitizing HTML Binding in Angular Template
DESCRIPTION: Demonstrates binding a potentially unsafe HTML snippet to the innerHTML property, which Angular automatically sanitizes to prevent XSS attacks.

LANGUAGE: html
CODE:
<h3>Binding innerHTML</h3>
<p>Bound Value:</p>
<p class="e2e-inner-html-interpolated">{{htmlSnippet}}</p>
<p>Result of binding to innerHTML:</p>
<p class="e2e-inner-html-bound" [innerHTML]="htmlSnippet"></p>

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: CLI commands for generating new Angular artifacts including components, directives, pipes, services, classes, guards, interfaces, enums, and modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Adding navigation links with routerLink in Angular
DESCRIPTION: Update the app.component.html file to include navigation links using the routerLink directive.

LANGUAGE: html
CODE:
<nav>
  <a routerLink="/crisis-list">Crisis Center</a>
  <a routerLink="/heroes-list">Heroes</a>
</nav>

----------------------------------------

TITLE: Installing Angular CLI Globally
DESCRIPTION: This command installs the latest version of the Angular CLI globally on the system. The Angular CLI provides tooling for effective Angular development.

LANGUAGE: bash
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Mutating Server State with HttpClient POST in Angular
DESCRIPTION: Illustrates how to use HttpClient.post() method to send data to the server and update server state. The example shows sending a new configuration object to an API endpoint.

LANGUAGE: typescript
CODE:
http.post<Config>('/api/config', newConfig).subscribe(config => {
  console.log('Updated config:', config);
});

----------------------------------------

TITLE: Implementing Basic Logging Interceptor in Angular
DESCRIPTION: Simple interceptor function that logs outgoing request URLs before forwarding the request through the interceptor chain.

LANGUAGE: typescript
CODE:
export function loggingInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {
  console.log(req.url);
  return next(req);
}

----------------------------------------

TITLE: Bootstrapping Application with Config in TypeScript
DESCRIPTION: Demonstrates how to bootstrap an Angular application with configuration.

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, appConfig)

----------------------------------------

TITLE: Advanced linkedSignal with Previous State Handling
DESCRIPTION: Shows how to implement linkedSignal with separate source and computation functions to preserve selections when options change.

LANGUAGE: typescript
CODE:
@Component({/* ... */})
export class ShippingMethodPicker {
  shippingOptions: Signal<ShippingMethod[]> = getShippingOptions();

  selectedOption = linkedSignal<ShippingMethod[], ShippingMethod>({
    source: this.shippingOptions,
    computation: (newOptions, previous) => {
      return newOptions.find(opt => opt.id === previous?.value?.id) ?? newOptions[0];
    }
  });

  changeShipping(newOptionIndex: number) {
    this.selectedOption.set(this.shippingOptions()[newOptionIndex]);
  }
}

----------------------------------------

TITLE: Implementing Basic Highlight Functionality
DESCRIPTION: Adds logic to the HighlightDirective to set the background color of the host element to yellow.

LANGUAGE: typescript
CODE:
import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
  constructor(el: ElementRef) {
    el.nativeElement.style.backgroundColor = 'yellow';
  }
}

----------------------------------------

TITLE: Injecting HeroService into HeroListComponent Using Constructor
DESCRIPTION: Shows how to inject a service into a component using the traditional constructor-based dependency injection method in Angular.

LANGUAGE: typescript
CODE:
  constructor(private heroService: HeroService)

----------------------------------------

TITLE: Form Validation CSS Classes
DESCRIPTION: CSS styling for form validation states using Angular's automatically applied CSS classes.

LANGUAGE: css
CODE:
.ng-valid[required], .ng-valid.required {
  border-left: 5px solid #42A948;
}
.ng-invalid:not(form) {
  border-left: 5px solid #a94442;
}

----------------------------------------

TITLE: Fetching JSON Data with HttpClient in Angular
DESCRIPTION: Demonstrates how to use HttpClient.get() method to fetch JSON data from an API endpoint. The example shows how to specify the expected return type using a generic type argument.

LANGUAGE: typescript
CODE:
http.get<Config>('/api/config').subscribe(config => {
  // process the configuration.
});

----------------------------------------

TITLE: Conditional Rendering with @if in Angular Templates
DESCRIPTION: Demonstrates how to use the @if block to conditionally display content based on a truthy expression. It also shows how to use @else if and @else for alternative content.

LANGUAGE: angular-html
CODE:
@if (a > b) {
  <p>{{a}} is greater than {{b}}</p>
}

LANGUAGE: angular-html
CODE:
@if (a > b) {
  {{a}} is greater than {{b}}
} @else if (b > a) {
  {{a}} is less than {{b}}
} @else {
  {{a}} is equal to {{b}}
}

----------------------------------------

TITLE: Using Control Flow with @if in Angular Templates
DESCRIPTION: Demonstrates the use of Angular's @if block for conditional rendering in templates. The example shows conditional rendering of admin settings based on a user's admin status.

LANGUAGE: html
CODE:
<h1>User profile</h1>

@if (isAdmin()) {
  <h2>Admin settings</h2>
  <!-- ... -->
} @else {
  <h2>User settings</h2>
  <!-- ... -->  
}

----------------------------------------

TITLE: Implementing ngOnChanges in Angular TypeScript
DESCRIPTION: Demonstrates how to implement the ngOnChanges lifecycle hook to inspect changes to component inputs. It uses SimpleChanges to access previous and current values of inputs.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */
})
export class UserProfile {
  @Input() name: string = '';

  ngOnChanges(changes: SimpleChanges) {
    for (const inputName in changes) {
      const inputValues = changes[inputName];
      console.log(`Previous ${inputName} == ${inputValues.previousValue}`);
      console.log(`Current ${inputName} == ${inputValues.currentValue}`);
      console.log(`Is first ${inputName} change == ${inputValues.firstChange}`);
    }
  }
}

----------------------------------------

TITLE: Configuring Hydration with bootstrapApplication in Angular
DESCRIPTION: Shows how to enable hydration in a standalone Angular application using provideClientHydration with bootstrapApplication.

LANGUAGE: typescript
CODE:
import {
  bootstrapApplication,
  provideClientHydration,
} from '@angular/platform-browser';
...

bootstrapApplication(AppComponent, {
  providers: [provideClientHydration()]
});

----------------------------------------

TITLE: Custom Validator Implementation
DESCRIPTION: Implementation of a custom validator function that checks for forbidden names using regular expressions.

LANGUAGE: typescript
CODE:
export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const forbidden = nameRe.test(control.value);
    return forbidden ? {'forbiddenName': {value: control.value}} : null;
  };
}

----------------------------------------

TITLE: Injecting HttpClient in Angular Service
DESCRIPTION: This snippet illustrates how to inject the HttpClient service as a dependency in an Angular service class.

LANGUAGE: typescript
CODE:
@Injectable({providedIn: 'root'})
export class ConfigService {
  constructor(private http: HttpClient) {
    // This service can now make HTTP requests via `this.http`.
  }
}

----------------------------------------

TITLE: Referencing Conditional Expression Results in Angular @if Blocks
DESCRIPTION: Shows how to save and reuse the result of a conditional expression within an @if block using the 'as' keyword.

LANGUAGE: angular-html
CODE:
@if (user.profile.settings.startDate; as startDate) {
  {{ startDate }}
}

----------------------------------------

TITLE: Providing a Service in Root with @Injectable
DESCRIPTION: Shows how to provide a service at the root level using the @Injectable decorator with providedIn: 'root'.

LANGUAGE: typescript
CODE:
@Injectable({
  providedIn: 'root'  // <--provides this service in the root EnvironmentInjector
})
export class ItemService {
  name = 'telephone';
}

----------------------------------------

TITLE: Adding RouterModule to Angular Component Imports
DESCRIPTION: This code snippet shows how to add the RouterModule to the imports array in the @Component decorator of an Angular component.

LANGUAGE: typescript
CODE:
imports: [RouterModule],

----------------------------------------

TITLE: Implementing HeroService with Logger Dependency in Angular
DESCRIPTION: Demonstrates how to inject and use the Logger service within the HeroService, showcasing service-to-service dependency injection.

LANGUAGE: typescript
CODE:
import { inject, Injectable } from '@angular/core';
import { HEROES } from './mock-heroes';
import { Logger } from '../logger.service';

@Injectable({
  providedIn: 'root',
})
export class HeroService {
  private logger = inject(Logger);

  getHeroes() {
    this.logger.log('Getting heroes.');
    return HEROES;
  }
}

----------------------------------------

TITLE: Setting Current Classes with NgClass in Angular Component
DESCRIPTION: Shows how to define a method in the component to set multiple CSS classes conditionally using NgClass.

LANGUAGE: TypeScript
CODE:
setCurrentClasses() {
  this.currentClasses = {
    'saveable': this.canSave,
    'modified': !this.isUnchanged,
    'special': this.isSpecial
  };
}

----------------------------------------

TITLE: Configuring HttpClient with provideHttpClient in Angular
DESCRIPTION: This snippet demonstrates how to set up HttpClient using the provideHttpClient function in the application configuration.

LANGUAGE: typescript
CODE:
export const appConfig: ApplicationConfig = {
  providers: [
    provideHttpClient(),
  ]
};

----------------------------------------

TITLE: Using Signals in Angular Components
DESCRIPTION: Demonstrates how to use signals and computed signals within an Angular component. This snippet shows practical application of signals in component state management.

LANGUAGE: typescript
CODE:
@Component({/* ... */})
export class UserProfile {
  isTrial = signal(false);
  isTrialExpired = signal(false);
  showTrialDuration = computed(() => this.isTrial() && !this.isTrialExpired());

  activateTrial() {
    this.isTrial.set(true);
  }
}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how components can be composed together in a parent-child relationship.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
})
export class ProfilePhoto { }

@Component({
  imports: [ProfilePhoto],
  template: `<profile-photo />`
})
export class UserProfile { }

----------------------------------------

TITLE: Inline Styles in Angular Component
DESCRIPTION: Demonstrates how to define inline CSS styles directly within the @Component decorator using the styles property. The example shows styling a profile photo with border-radius.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  template: `<img src="profile-photo.jpg" alt="Your profile photo">`,
  styles: ` img { border-radius: 50%; } `,
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Iterating Collections with @for in Angular Templates
DESCRIPTION: Demonstrates how to use the @for block to loop through a collection and render content repeatedly. It includes the 'track' expression for performance optimization.

LANGUAGE: angular-html
CODE:
@for (item of items; track item.id) {
  {{ item.name }}
}

----------------------------------------

TITLE: HttpClient Class Definition
DESCRIPTION: The main class for making HTTP requests in Angular applications. Provides methods for GET, POST, PUT, DELETE, HEAD, PATCH, JSONP and generic requests with full type support and configuration options.

LANGUAGE: typescript
CODE:
export class HttpClient {
    constructor(handler: HttpHandler);
    get<T>(url: string, options?: {
        headers?: HttpHeaders;
        observe?: 'body';
        params?: HttpParams;
        reportProgress?: boolean;
        responseType?: 'json';
        withCredentials?: boolean;
    }): Observable<T>;
    // Additional methods not shown for brevity
}

----------------------------------------

TITLE: Creating a Reusable UserService with HttpClient in Angular
DESCRIPTION: Demonstrates the creation of a reusable, injectable UserService that encapsulates data access logic using HttpClient. The service provides a method to fetch user data by ID.

LANGUAGE: typescript
CODE:
@Injectable({providedIn: 'root'})
export class UserService {
  constructor(private http: HttpClient) {}

  getUser(id: string): Observable<User> {
    return this.http.get<User>(`/api/user/${id}`);
  }
}

----------------------------------------

TITLE: Custom Kebab Case Pipe Implementation
DESCRIPTION: Shows how to create a custom pipe that transforms strings to kebab case format. Demonstrates pipe decorator usage and transform method implementation.

LANGUAGE: typescript
CODE:
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'kebabCase',
})
export class KebabCasePipe implements PipeTransform {
  transform(value: string): string {
    return value.toLowerCase().replace(/ /g, '-');
  }
}

----------------------------------------

TITLE: Running Angular Tests in Continuous Integration
DESCRIPTION: Demonstrates how to run Angular tests in a Continuous Integration environment. This command runs tests without watch mode, progress reporting, and uses a headless Chrome browser.

LANGUAGE: shell
CODE:
ng test --no-watch --no-progress --browsers=ChromeHeadless

----------------------------------------

TITLE: Creating Effects in Angular Signals
DESCRIPTION: Shows how to create effects that automatically run when dependent signals change, with examples in component context.

LANGUAGE: typescript
CODE:
effect(() => {
  console.log(`The current count is: ${count()}`);
});

----------------------------------------

TITLE: Importing Router Module in Angular
DESCRIPTION: Demonstrates how to import the Router module from @angular/router package.

LANGUAGE: typescript
CODE:
import { provideRouter } from '@angular/router';

----------------------------------------

TITLE: Dynamic Dependencies in Computed Signals
DESCRIPTION: Demonstrates conditional signal dependencies where signals are only tracked when actually read during computation.

LANGUAGE: typescript
CODE:
const showCount = signal(false);
const count = signal(0);
const conditionalCount = computed(() => {
  if (showCount()) {
    return `The count is ${count()}.`;
  } else {
    return 'Nothing to see here!';
  }
});

----------------------------------------

TITLE: Creating a Dynamic Form with FormArray in Angular
DESCRIPTION: Illustrates how to create a dynamic form using FormArray to manage an array of form controls.

LANGUAGE: TypeScript
CODE:
import { FormArray } from '@angular/forms';

export class ProfileEditorComponent {
  profileForm = this.fb.group({
    firstName: ['', Validators.required],
    lastName: [''],
    aliases: this.fb.array([this.fb.control('')]),
  });

  get aliases() {
    return this.profileForm.get('aliases') as FormArray;
  }

  addAlias() {
    this.aliases.push(this.fb.control(''));
  }
}

----------------------------------------

TITLE: Using FormBuilder in Angular
DESCRIPTION: Shows how to use the FormBuilder service to create form controls and groups more concisely.

LANGUAGE: TypeScript
CODE:
import { FormBuilder } from '@angular/forms';

export class ProfileEditorComponent {
  profileForm = this.fb.group({
    firstName: [''],
    lastName: [''],
    address: this.fb.group({
      street: [''],
      city: [''],
      state: [''],
      zip: [''],
    }),
  });

  constructor(private fb: FormBuilder) {}
}

----------------------------------------

TITLE: Implementing Dynamic Form Component
DESCRIPTION: Creates the main component class for the dynamic form. It receives an array of questions as input, generates a form group using QuestionControlService, and handles form submission.

LANGUAGE: TypeScript
CODE:
import { Component, Input, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';

import { QuestionBase } from './question-base';
import { QuestionControlService } from './question-control.service';

@Component({
  selector: 'app-dynamic-form',
  templateUrl: './dynamic-form.component.html',
  providers: [ QuestionControlService ]
})
export class DynamicFormComponent implements OnInit {

  @Input() questions: QuestionBase<string>[] | null = [];
  form!: FormGroup;
  payLoad = '';

  constructor(private qcs: QuestionControlService) {}

  ngOnInit() {
    this.form = this.qcs.toFormGroup(this.questions as QuestionBase<string>[]);
  }

  onSubmit() {
    this.payLoad = JSON.stringify(this.form.getRawValue());
  }
}


----------------------------------------

TITLE: Importing ReactiveFormsModule in Angular Components
DESCRIPTION: Example of importing ReactiveFormsModule in Angular components to enable reactive forms functionality.

LANGUAGE: TypeScript
CODE:
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [
    // other imports ...
    ReactiveFormsModule
  ],
})
export class AppModule { }


----------------------------------------

TITLE: Using NgClass with an Expression in Angular Template
DESCRIPTION: Demonstrates how to use NgClass directive with a boolean expression to conditionally apply a CSS class.

LANGUAGE: HTML
CODE:
<div [ngClass]="{ 'special': isSpecial }">This div is special</div>

----------------------------------------

TITLE: Testing Angular Component with Harness
DESCRIPTION: Demonstrates how to use a component harness to test a button component. The test loads the harness for MyButtonComponent and verifies the button text.

LANGUAGE: typescript
CODE:
// Example of test with a harness for a component called MyButtonComponent
it('should load button with exact text', async () => {
  const button = await loader.getHarness(MyButtonComponentHarness);
  expect(await button.getText()).toBe('Confirm');
});

----------------------------------------

TITLE: Property Binding for Native Elements
DESCRIPTION: Shows how to bind to native DOM element properties using square bracket syntax.

LANGUAGE: html
CODE:
<button [disabled]="isFormValid">Save</button>

----------------------------------------

TITLE: Creating Computed Signals in TypeScript
DESCRIPTION: Shows how to create computed signals that derive their value from other signals with automatic dependency tracking.

LANGUAGE: typescript
CODE:
const count: WritableSignal<number> = signal(0);
const doubleCount: Signal<number> = computed(() => count() * 2);

----------------------------------------

TITLE: Creating Computed Signals in TypeScript
DESCRIPTION: Shows how to create a computed signal that automatically updates when its dependencies change, using the 'computed' constructor.

LANGUAGE: typescript
CODE:
const counter = signal(0);

// Automatically updates when `counter` changes:
const isEven = computed(() => counter() % 2 === 0);

----------------------------------------

TITLE: Basic FormGroup Implementation in TypeScript
DESCRIPTION: Creates a basic login form using FormGroup with email and password controls

LANGUAGE: typescript
CODE:
const login = new FormGroup({
  email: new FormControl(''),
  password: new FormControl(''),
});

----------------------------------------

TITLE: Input Property Usage in Template
DESCRIPTION: Shows how to bind a value to an input property in an Angular template.

LANGUAGE: angular-html
CODE:
<custom-slider [value]="50" />

----------------------------------------

TITLE: Programmatic Output Subscription in Angular
DESCRIPTION: Shows how to programmatically subscribe to output events when working with dynamically created components.

LANGUAGE: typescript
CODE:
const someComponentRef: ComponentRef<SomeComponent> = viewContainerRef.createComponent(/*...*/)

someComponentRef.instance.someEventProperty.subscribe(eventData => {
  console.log(eventData);
});

----------------------------------------

TITLE: Template Reference Variables Declaration
DESCRIPTION: Examples of declaring template reference variables using the # syntax on different element types including input elements, components, and ng-template.

LANGUAGE: angular-html
CODE:
<input #taskInput placeholder="Enter task name">

<my-datepicker #startDate />

<ng-template #myFragment>
  <p>This is a template fragment</p>
</ng-template>

----------------------------------------

TITLE: Basic FormControl with Type Inference
DESCRIPTION: Demonstrates creating a FormControl with automatic type inference for string values

LANGUAGE: typescript
CODE:
const email = new FormControl('angularrox@gmail.com');

----------------------------------------

TITLE: Testing Synchronous and Asynchronous Services in Angular
DESCRIPTION: Demonstrates unit tests for the ValueService, including both synchronous and asynchronous test cases. These tests are written without Angular testing utilities.

LANGUAGE: typescript
CODE:
describe('ValueService', () => {
  let service: ValueService;
  beforeEach(() => { service = new ValueService(); });

  it('#getValue should return real value', () => {
    expect(service.getValue()).toBe('real value');
  });

  it('#getObservableValue should return value from observable', (done: DoneFn) => {
    service.getObservableValue().subscribe(value => {
      expect(value).toBe('observable value');
      done();
    });
  });

  it('#getPromiseValue should return value from a promise', (done: DoneFn) => {
    service.getPromiseValue().then(value => {
      expect(value).toBe('promise value');
      done();
    });
  });
});

----------------------------------------

TITLE: Component-Level Service Provider in TypeScript
DESCRIPTION: Demonstrates providing a service at the component level using the providers array in @Component decorator.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'hero-list',
  template: '...',
  providers: [HeroService]
})
class HeroListComponent {}

----------------------------------------

TITLE: Rendering Template Fragments with ng-container in Angular
DESCRIPTION: Illustrates how to use NgTemplateOutlet directive with <ng-container> to dynamically render template fragments based on a condition.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <h2>Your profile</h2>
    <ng-container [ngTemplateOutlet]="profileTemplate()" />

    <ng-template #admin>This is the admin profile</ng-template>
    <ng-template #basic>This is the basic profile</ng-template>
  `
})
export class UserProfile {
  isAdmin = input(false);
  adminTemplate = viewChild('admin', {read: TemplateRef});
  basicTemplate = viewChild('basic', {read: TemplateRef});
  profileTemplate = computed(() => this.isAdmin() ? this.adminTemplate() : this.basicTemplate());
}

----------------------------------------

TITLE: Creating Basic Resource with Signals in TypeScript
DESCRIPTION: Demonstrates how to create a basic resource that fetches user data based on a reactive userId signal. Shows the core structure with request and loader functions.

LANGUAGE: typescript
CODE:
import {resource, Signal} from '@angular/core';

const userId: Signal<string> = getUserId();

const userResource = resource({
  // Define a reactive request computation.
  // The request value recomputes whenever any read signals change.
  request: () => ({id: userId()}),

  // Define an async loader that retrieves data.
  // The resource calls this function every time the `request` value changes.
  loader: ({request}) => fetchUser(request),
});

// Create a computed signal based on the result of the resource's loader function.
const firstName = computed(() => userResource.value().firstName);

----------------------------------------

TITLE: Implementing EvenBetterLogger with UserService Dependency in Angular
DESCRIPTION: Demonstrates the implementation of EvenBetterLogger class that extends Logger and uses UserService as a dependency.

LANGUAGE: typescript
CODE:
@Injectable()
export class EvenBetterLogger extends Logger {
  constructor(private userService: UserService) {}

  override log(message: string) {
    const name = this.userService.user.name;
    super.log(`Message to ${name}: ${message}`);
  }
}

----------------------------------------

TITLE: Using NgIf for Conditional Rendering in Angular Template
DESCRIPTION: Demonstrates how to use NgIf directive to conditionally render an element based on a boolean expression.

LANGUAGE: HTML
CODE:
<p *ngIf="isActive">Show this message if isActive is true</p>

----------------------------------------

TITLE: Defining a Basic NgModule in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic NgModule class using the @NgModule decorator. The decorator accepts metadata that configures the module's behavior.

LANGUAGE: typescript
CODE:
import {NgModule} from '@angular/core';

@NgModule({
  // Metadata goes here
})
export class CustomMenuModule { }

----------------------------------------

TITLE: Configuring Injectable Service in TypeScript
DESCRIPTION: Demonstrates how to create a basic service class with the @Injectable decorator. The service is configured to be provided at the root level, making it available throughout the application using Angular's dependency injection system.

LANGUAGE: typescript
CODE:
@Injectable({
    providedIn: 'root'
})
class UserService {
    // methods to retrieve and return data
}

----------------------------------------

TITLE: Creating Proxy Configuration for Backend Server
DESCRIPTION: JSON configuration for setting up a proxy to redirect API calls from localhost:4200 to a backend server running on localhost:3000.

LANGUAGE: json
CODE:
{
  "/api": {
    "target": "http://localhost:3000",
    "secure": false
  }
}

----------------------------------------

TITLE: Dynamically Rendering Components with NgComponentOutlet in Angular
DESCRIPTION: This snippet demonstrates how to use NgComponentOutlet to dynamically render either an AdminBio or StandardBio component based on the user's admin status.

LANGUAGE: typescript
CODE:
@Component({ ... })
export class AdminBio { /* ... */ }

@Component({ ... })
export class StandardBio { /* ... */ }

@Component({
  ...,
  template: `
    <p>Profile for {{user.name}}</p>
    <ng-container *ngComponentOutlet="getBioComponent()" /> `
})
export class CustomDialog {
  @Input() user: User;

  getBioComponent() {
    return this.user.isAdmin ? AdminBio : StandardBio;
  }
}

----------------------------------------

TITLE: Running the Angular Development Server
DESCRIPTION: Command to launch the Angular development server, build the app, and open it in the default browser. The server watches for file changes and automatically rebuilds and reloads the app.

LANGUAGE: shell
CODE:
ng serve --open

----------------------------------------

TITLE: Setting Request Headers with HttpClient in Angular
DESCRIPTION: Shows how to set custom headers in HttpClient requests using both an object literal and HttpHeaders. The example adds an 'X-Debug-Level' header to a GET request.

LANGUAGE: typescript
CODE:
http.get('/api/config', {
  headers: {
    'X-Debug-Level': 'verbose',
  }
}).subscribe(config => {
  // ...
});

const baseHeaders = new HttpHeaders().set('X-Debug-Level', 'minimal');

http.get<Config>('/api/config', {
  headers: baseHeaders.set('X-Debug-Level', 'verbose'),
}).subscribe(config => {
  // ...
});

----------------------------------------

TITLE: Multiple Content Placeholders with Selectors
DESCRIPTION: Shows how to implement multiple content projection slots using CSS selectors to target specific content for different areas of the component.

LANGUAGE: angular-html
CODE:
<div class="card-shadow">
  <ng-content select="card-title"></ng-content>
  <div class="card-divider"></div>
  <ng-content select="card-body"></ng-content>
</div>

LANGUAGE: angular-html
CODE:
<custom-card>
  <card-title>Hello</card-title>
  <card-body>Welcome to the example</card-body>
</custom-card>

----------------------------------------

TITLE: Binding FormControl to Template in Angular
DESCRIPTION: Shows how to bind a FormControl to an input element in the component template using the formControl directive.

LANGUAGE: HTML
CODE:
<label for="name">Name: </label>
<input id="name" type="text" [formControl]="name">

----------------------------------------

TITLE: Customizing Output Names with Aliases
DESCRIPTION: Demonstrates how to use aliases to customize the event name exposed in templates while maintaining a different internal property name.

LANGUAGE: typescript
CODE:
@Component({/*...*/})
export class CustomSlider {
  changed = output({alias: 'valueChanged'});
}

----------------------------------------

TITLE: Creating a FormGroup in Angular
DESCRIPTION: Illustrates how to create a FormGroup instance with multiple form controls in an Angular component.

LANGUAGE: TypeScript
CODE:
import { FormGroup, FormControl } from '@angular/forms';

export class ProfileEditorComponent {
  profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastName: new FormControl(''),
  });
}

----------------------------------------

TITLE: Basic Input Property Declaration
DESCRIPTION: Demonstrates how to declare a basic input property using the signal-based input function with a default value.

LANGUAGE: typescript
CODE:
import {Component, input} from '@angular/core';

@Component({/*...*/})
export class CustomSlider {
  // Declare an input named 'value' with a default value of zero.
  value = input(0);
}

----------------------------------------

TITLE: Using ng-content Element in Angular Templates
DESCRIPTION: The ng-content element allows content projection in Angular components. It can use the select attribute with CSS selectors to filter which elements get projected into specific slots. Supports tag names, attributes, CSS classes, and :not pseudo-class selectors.

LANGUAGE: html
CODE:
<ng-content select="[selector]"></ng-content>

----------------------------------------

TITLE: Basic Event Listener Implementation in Angular
DESCRIPTION: Demonstrates how to implement a basic keyup event listener on an input element. The example shows how to bind a component method to the keyup event.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <input type="text" (keyup)="updateField()" />
  `,
  ...
})
export class AppComponent{
  updateField(): void {
    console.log('Field is updated!');
  }
}

----------------------------------------

TITLE: Defining Actor Data Model in TypeScript
DESCRIPTION: Creates an Actor class to define the data model used in the form with properties for name, studio and skill.

LANGUAGE: typescript
CODE:
export class Actor {
  constructor(
    public name: string,
    public studio: string,
    public skill: string
  ) {}
}

----------------------------------------

TITLE: Setting PowerShell Execution Policy
DESCRIPTION: Command to allow execution of PowerShell scripts, which is necessary for npm global binaries on Windows. This sets the execution policy to RemoteSigned for the current user.

LANGUAGE: powershell
CODE:
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned

----------------------------------------

TITLE: Loading State Implementation
DESCRIPTION: Implementation of loading state with timing parameters for after and minimum display duration.

LANGUAGE: angular-html
CODE:
@defer {
  <large-component />
} @loading (after 100ms; minimum 1s) {
  <img alt="loading..." src="loading.gif" />
}

----------------------------------------

TITLE: Implementing Lazy Loading
DESCRIPTION: Demonstrates how to implement lazy loading for a route.

LANGUAGE: typescript
CODE:
const routes: Routes = [
  {
    path: 'lazy',
    loadComponent: () => import('./lazy.component').then(c => c.LazyComponent)
  }
];

----------------------------------------

TITLE: Defining Animation States in Angular
DESCRIPTION: This code defines two animation states, 'open' and 'closed', using the state() function and specifying styles for each state.

LANGUAGE: typescript
CODE:
state('open', style({
  height: '200px',
  opacity: 1,
  backgroundColor: 'yellow'
})),
state('closed', style({
  height: '100px',
  opacity: 0.8,
  backgroundColor: 'blue'
}))

----------------------------------------

TITLE: CSS Class Bindings in Angular Component
DESCRIPTION: Shows different ways to bind CSS classes using string, array, and object syntax.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <ul [class]="listClasses"> ... </ul>
    <section [class]="sectionClasses"> ... </section>
    <button [class]="buttonClasses"> ... </button>
  `,
  ...
})
export class UserProfile {
  listClasses = 'full-width outlined';
  sectionClasses = ['expandable', 'elevated'];
  buttonClasses = {
    highlighted: true,
    embiggened: false,
  };
}

----------------------------------------

TITLE: Updating DetailsComponent Imports in Angular
DESCRIPTION: Updates file-level imports in the DetailsComponent to include necessary functions, classes, and services.

LANGUAGE: typescript
CODE:
import { Component, inject } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

----------------------------------------

TITLE: Content Projection Usage Example
DESCRIPTION: Demonstrates how content projection works with a complete example including component definition, usage, and resulting DOM structure.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-card',
  template: `
    <div class="card-shadow">
      <ng-content />
    </div>
  `,
})
export class CustomCard {/* ... */}

LANGUAGE: angular-html
CODE:
<custom-card>
  <p>This is the projected content</p>
</custom-card>

LANGUAGE: angular-html
CODE:
<custom-card>
  <div class="card-shadow">
    <p>This is the projected content</p>
  </div>
</custom-card>

----------------------------------------

TITLE: Optional Controls in FormGroup
DESCRIPTION: Demonstrates implementing a FormGroup with optional controls using TypeScript interfaces

LANGUAGE: typescript
CODE:
interface LoginForm {
  email: FormControl<string>;
  password?: FormControl<string>;
}

const login = new FormGroup<LoginForm>({
  email: new FormControl('', {nonNullable: true}),
  password: new FormControl('', {nonNullable: true}),
});

----------------------------------------

TITLE: Defining Question Base Class for Dynamic Forms
DESCRIPTION: Creates a base class 'QuestionBase' to represent a question in the dynamic form model. It includes properties for the question's key, text, required status, order, and control type.

LANGUAGE: TypeScript
CODE:
export class QuestionBase<T> {
  value: T|undefined;
  key: string;
  label: string;
  required: boolean;
  order: number;
  controlType: string;
  type: string;
  options: {key: string, value: string}[];

  constructor(options: {
    value?: T;
    key?: string;
    label?: string;
    required?: boolean;
    order?: number;
    controlType?: string;
    type?: string;
    options?: {key: string, value: string}[];
  } = {}) {
    this.value = options.value;
    this.key = options.key || '';
    this.label = options.label || '';
    this.required = !!options.required;
    this.order = options.order === undefined ? 1 : options.order;
    this.controlType = options.controlType || '';
    this.type = options.type || '';
    this.options = options.options || [];
  }
}


----------------------------------------

TITLE: Implementing a BaseButton Component with ng-content in Angular
DESCRIPTION: This snippet defines a BaseButton component that uses ng-content to accept and render any markup passed from its parent component. It demonstrates the basic usage of content projection in Angular.

LANGUAGE: angular-ts
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'button[baseButton]',
  template: `
      <ng-content />
  `,
})
export class BaseButton {}

----------------------------------------

TITLE: Using the read Option in Angular Queries
DESCRIPTION: Shows how to use the read option to retrieve a specific value from an element's injector.

LANGUAGE: ts
CODE:
@Component({/*...*/})
export class CustomExpando {
  toggle = contentChild(ExpandoContent, {read: TemplateRef});
}

----------------------------------------

TITLE: Basic Angular Pipe Usage with Component
DESCRIPTION: Demonstrates using built-in pipes (currency, date, titlecase) in an Angular component. Shows how to import and use pipes to transform data in templates.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, TitleCasePipe } from '@angular/common';

@Component({
  selector: 'app-root',
  imports: [CurrencyPipe, DatePipe, TitleCasePipe],
  template: `
    <main>
       <!-- Transform the company name to title-case and
       transform the purchasedOn date to a locale-formatted string -->
<h1>Purchases from {{ company | titlecase }} on {{ purchasedOn | date }}</h1>

	    <!-- Transform the amount to a currency-formatted string -->
      <p>Total: {{ amount | currency }}</p>
    </main>
  `,
})
export class ShoppingCartComponent {
  amount = 123.45;
  company = 'acme corporation';
  purchasedOn = '2024-07-08';
}

----------------------------------------

TITLE: Enabling Event Replay with Hydration in Angular
DESCRIPTION: Shows how to enable event replay functionality with hydration to capture and replay events that occur before hydration completes.

LANGUAGE: typescript
CODE:
import {provideClientHydration, withEventReplay} from '@angular/platform-browser';

bootstrapApplication(App, {
  providers: [
    provideClientHydration(withEventReplay())
  ]
});

----------------------------------------

TITLE: NonNullableFormBuilder Usage
DESCRIPTION: Demonstrates using NonNullableFormBuilder to create non-nullable controls with less boilerplate

LANGUAGE: typescript
CODE:
const fb = new FormBuilder();
const login = fb.nonNullable.group({
  email: '',
  password: '',
});

----------------------------------------

TITLE: Adding a wildcard route for 404 page in Angular
DESCRIPTION: Add a wildcard route to the routes array in app.routes.ts to handle undefined routes.

LANGUAGE: typescript
CODE:
{path: '**', component: PageNotFoundComponent}

----------------------------------------

TITLE: Basic Component Binding Test
DESCRIPTION: Tests a component's property binding and change detection using TestBed

LANGUAGE: TypeScript
CODE:
createComponent() {
  fixture = TestBed.createComponent(BannerComponent);
  component = fixture.componentInstance;
  element = fixture.nativeElement;

  fixture.detectChanges();
}

----------------------------------------

TITLE: Using Render Callbacks in Angular Components
DESCRIPTION: This example shows how to use the afterRender function to register a render callback. The callback runs after Angular has finished rendering the page, allowing safe DOM manipulation such as focusing an input element.

LANGUAGE: typescript
CODE:
@Component({...})
export class ProfilePhoto {
  constructor(elementRef: ElementRef) {
    afterRender(() => {
      // Focus the first input element in this component.
      elementRef.nativeElement.querySelector('input')?.focus();
    });
  }
}

----------------------------------------

TITLE: Component Property Binding
DESCRIPTION: Demonstrates binding to custom component input properties using square bracket syntax.

LANGUAGE: html
CODE:
<my-listbox [value]="mySelection" />

----------------------------------------

TITLE: Angular Value Literals Examples
DESCRIPTION: Demonstrates supported value literal types in Angular expressions including strings, booleans, numbers, objects, arrays, null, and template strings.

LANGUAGE: typescript
CODE:
'Hello', "World"
true, false
123, 3.14
{name: 'Alice'}
['Onion', 'Cheese', 'Garlic']
null
`Hello ${name}`
tag`Hello ${name}`

----------------------------------------

TITLE: Using NgFor to Iterate Over a List in Angular Template
DESCRIPTION: Demonstrates how to use NgFor directive to iterate over an array and render elements for each item.

LANGUAGE: HTML
CODE:
<ul>
  <li *ngFor="let item of items; let i = index">{{i + 1}} - {{item.name}}</li>
</ul>

----------------------------------------

TITLE: Implementing Logger Service in TypeScript for Angular
DESCRIPTION: Defines a basic Logger service class with methods for logging, error reporting, and warnings to the browser console.

LANGUAGE: typescript
CODE:
export class Logger {
  log(msg: unknown) { console.log(msg); }
  error(msg: unknown) { console.error(msg); }
  warn(msg: unknown) { console.warn(msg); }
}

----------------------------------------

TITLE: Testing Services with Dependencies in Angular
DESCRIPTION: Illustrates different approaches to testing MasterService, including creating a real ValueService, using a stub, and spying on the getValue method.

LANGUAGE: typescript
CODE:
describe('MasterService without Angular testing support', () => {
  let masterService: MasterService;

  it('#getValue should return real value from the real service', () => {
    masterService = new MasterService(new ValueService());
    expect(masterService.getValue()).toBe('real value');
  });

  it('#getValue should return faked value from a fakeService', () => {
    masterService = new MasterService({ getValue: () => 'fake value' } as ValueService);
    expect(masterService.getValue()).toBe('fake value');
  });

  it('#getValue should return stubbed value from a spy', () => {
    const valueServiceSpy =
      jasmine.createSpyObj('ValueService', ['getValue']);

    const stubValue = 'stub value';
    valueServiceSpy.getValue.and.returnValue(stubValue);

    masterService = new MasterService(valueServiceSpy);

    expect(masterService.getValue())
      .withContext('service returned stub value')
      .toBe(stubValue);
    expect(valueServiceSpy.getValue.calls.count())
      .withContext('spy method was called once')
      .toBe(1);
    expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)
      .toBe(stubValue);
  });
});

----------------------------------------

TITLE: Importing Dependencies in NgModule
DESCRIPTION: This example demonstrates how to import dependencies for components declared in an NgModule using the imports property.

LANGUAGE: typescript
CODE:
@NgModule({
  /* ... */
  // CustomMenu and CustomMenuItem depend on the PopupTrigger and SelectorIndicator components.
  imports: [PopupTrigger, SelectionIndicator],
  declarations: [CustomMenu, CustomMenuItem],
})
export class CustomMenuModule { }

----------------------------------------

TITLE: Defining Basic Output in Angular Component
DESCRIPTION: Shows how to define a basic custom event using the output() function in an Angular component. The example creates a panelClosed event that doesn't emit any data.

LANGUAGE: typescript
CODE:
@Component({/*...*/})
export class ExpandablePanel {
  panelClosed = output<void>();
}

----------------------------------------

TITLE: Configuring HTTP Interceptors in Angular
DESCRIPTION: Example showing how to configure multiple interceptors using the withInterceptors feature in the application bootstrap.

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, {providers: [
  provideHttpClient(
    withInterceptors([loggingInterceptor, cachingInterceptor]),
  )
]});

----------------------------------------

TITLE: Text Interpolation in Angular Component
DESCRIPTION: Demonstrates basic text interpolation using double curly braces to display dynamic content in a template.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <p>Your color preference is {{ theme }}.</p>
  `,
  ...
})
export class AppComponent {
  theme = 'dark';
}

----------------------------------------

TITLE: Emitting Events with Data in Angular
DESCRIPTION: Shows how to emit events with different types of data, including primitive values and custom objects.

LANGUAGE: typescript
CODE:
// You can emit primitive values.
this.valueChanged.emit(7);

// You can emit custom event objects
this.thumbDropped.emit({
  pointerX: 123,
  pointerY: 456,
})

----------------------------------------

TITLE: Creating Synthetic HTTP Responses
DESCRIPTION: Example of constructing a synthetic HTTP response within an interceptor.

LANGUAGE: typescript
CODE:
const resp = new HttpResponse({
  body: 'response body',
});

----------------------------------------

TITLE: Alternative Testing Approach Without beforeEach in Angular
DESCRIPTION: Demonstrates an alternative testing style that doesn't use beforeEach, instead using a setup function to prepare test variables.

LANGUAGE: typescript
CODE:
function setup() {
  const valueServiceSpy =
    jasmine.createSpyObj('ValueService', ['getValue']);
  const stubValue = 'stub value';
  const masterService = new MasterService(valueServiceSpy);

  valueServiceSpy.getValue.and.returnValue(stubValue);
  return { masterService, stubValue, valueServiceSpy };
}

----------------------------------------

TITLE: Declaring Local Template Variables with @let
DESCRIPTION: Examples of using @let syntax to declare local variables in Angular templates with different value types including strings, observables, numbers, and objects.

LANGUAGE: angular-html
CODE:
@let name = user.name;
@let greeting = 'Hello, ' + name;
@let data = data$ | async;
@let pi = 3.1459;
@let coordinates = {x: 50, y: 100};
@let longExpression = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit ' +
                      'sed do eiusmod tempor incididunt ut labore et dolore magna ' +
                      'Ut enim ad minim veniam...';

----------------------------------------

TITLE: Initial Component Test Setup
DESCRIPTION: Basic test configuration for a component using TestBed and ComponentFixture

LANGUAGE: typescript
CODE:
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { BannerComponent } from './banner.component';

describe('BannerComponent', () => {
  let component: BannerComponent;
  let fixture: ComponentFixture<BannerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ BannerComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(BannerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

TITLE: Adding Validation to Angular Reactive Form
DESCRIPTION: This code demonstrates how to add validation to form controls in an Angular reactive form. It shows how to make fields required and how to validate email format.

LANGUAGE: typescript
CODE:
profileForm = new FormGroup({
  name: new FormControl('', Validators.required),
  email: new FormControl('', [Validators.required, Validators.email]),
});

----------------------------------------

TITLE: Using Custom Pipe in Angular Component
DESCRIPTION: This example demonstrates how to use a custom pipe (exponentialStrength) within an Angular component. It shows the pipe being applied in the component's template with a base value and an exponent.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'app-power-booster',
  template: `
    <h2>Power Booster</h2>
    <p>Super power boost: {{2 | exponentialStrength: 10}}</p>
  `
})
export class PowerBoosterComponent { }

----------------------------------------

TITLE: Creating Injectable Service in TypeScript
DESCRIPTION: Demonstrates how to create a basic injectable service class using the @Injectable decorator.

LANGUAGE: typescript
CODE:
@Injectable()
class HeroService {}

----------------------------------------

TITLE: Using @let Variables in Templates
DESCRIPTION: Demonstration of how to use @let variables throughout an Angular template, including async pipe usage and conditional rendering.

LANGUAGE: angular-html
CODE:
@let user = user$ | async;

@if (user) {
  <h1>Hello, {{user.name}}</h1>
  <user-avatar [photo]="user.photo"/>

  <ul>
    @for (snack of user.favoriteSnacks; track snack.id) {
      <li>{{snack.name}}</li>
    }
  </ul>

  <button (click)="update(user)">Update profile</button>
}

----------------------------------------

TITLE: Angular Component with External Files
DESCRIPTION: Demonstrates how to create an Angular component using external template and style files with templateUrl and styleUrl.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'user-profile',
  templateUrl: 'user-profile.html',
  styleUrl: 'user-profile.css',
})
export class UserProfile {
  // Component behavior is defined in here
}

LANGUAGE: html
CODE:
<h1>Use profile</h1>
<p>This is the user profile page</p>

LANGUAGE: css
CODE:
h1 {
  font-size: 3em;
}

----------------------------------------

TITLE: Importing Animation Functions in Component
DESCRIPTION: This code demonstrates how to import specific animation functions from @angular/animations for use in a component file.

LANGUAGE: typescript
CODE:
import { trigger, state, style, animate, transition } from '@angular/animations';

----------------------------------------

TITLE: Specialized Service Implementation
DESCRIPTION: Demonstrates providing a more specialized implementation of a service in a child component.

LANGUAGE: typescript
CODE:
providers: [HeroTaxReturnService]

----------------------------------------

TITLE: Implementing TitleCasePipe in TypeScript
DESCRIPTION: This snippet shows the implementation of a TitleCasePipe class that capitalizes the first letter of each word using a regular expression. It uses the @Pipe decorator to define the pipe's name.

LANGUAGE: typescript
CODE:
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'titlecase', standalone: true})
export class TitleCasePipe implements PipeTransform {
  transform(input: string): string {
    return input.length === 0 ? '' :
      input.replace(/\w\S*/g, (txt => txt[0].toUpperCase() + txt.slice(1).toLowerCase() ));
  }
}

----------------------------------------

TITLE: Attaching Animation Trigger to HTML Element
DESCRIPTION: This HTML snippet shows how to attach an animation trigger to an element in the template and bind it to a component property.

LANGUAGE: html
CODE:
<div [@openClose]="isOpen ? 'open' : 'closed'">
  <p>The box is now {{ isOpen ? 'Open' : 'Closed' }}!</p>
</div>

----------------------------------------

TITLE: Basic @defer Block Implementation
DESCRIPTION: Simple implementation of a deferred loading block for a large component in Angular templates.

LANGUAGE: angular-html
CODE:
@defer {
  <large-component />
}

----------------------------------------

TITLE: Configuring TestBed for HTTP Testing in Angular
DESCRIPTION: Basic setup for HTTP testing environment using TestBed with provideHttpClient and provideHttpClientTesting.

LANGUAGE: typescript
CODE:
TestBed.configureTestingModule({
  providers: [
    // ... other test providers
    provideHttpClient(),
    provideHttpClientTesting(),
  ],
});

const httpTesting = TestBed.inject(HttpTestingController);

----------------------------------------

TITLE: Basic ng-content Implementation in Angular Component
DESCRIPTION: Basic implementation of a custom card component using ng-content for content projection. Shows the initial setup of a component with content projection placeholder.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-card',
  template: '<div class="card-shadow"> <ng-content></ng-content> </div>',
})
export class CustomCard {/* ... */}

----------------------------------------

TITLE: Defining InjectionToken for Non-Class Dependencies in Angular
DESCRIPTION: Demonstrates how to define and use an InjectionToken for non-class dependencies in Angular.

LANGUAGE: typescript
CODE:
import { InjectionToken } from '@angular/core';

export interface AppConfig {
  title: string;
}

export const APP_CONFIG = new InjectionToken<AppConfig>('app.config description');

LANGUAGE: typescript
CODE:
const MY_APP_CONFIG_VARIABLE: AppConfig = {
  title: 'Hello',
};

providers: [{ provide: APP_CONFIG, useValue: MY_APP_CONFIG_VARIABLE }]

LANGUAGE: typescript
CODE:
export class AppComponent {
  constructor(@Inject(APP_CONFIG) config: AppConfig) {
    this.title = config.title;
  }
}

----------------------------------------

TITLE: Implementing filterResults Function in HomeComponent
DESCRIPTION: Adds the filterResults function to the HomeComponent class. This function filters the housingLocationList based on the input text, matching against the city property of each housing location.

LANGUAGE: typescript
CODE:
filterResults(text: string) {
  if (!text) {
    this.filteredLocationList = this.housingLocationList;
  }

  this.filteredLocationList = this.housingLocationList.filter(
    housingLocation => housingLocation?.city.toLowerCase().includes(text.toLowerCase())
  );
}

----------------------------------------

TITLE: Using Component Selector in Template
DESCRIPTION: Shows how to use a component selector within another component's template.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <profile-photo />
    <button>Upload a new profile photo</button>`,
  ...,
})
export class UserProfile { }

----------------------------------------

TITLE: Exporting Animation Trigger in Angular TypeScript
DESCRIPTION: This code snippet shows how to export a part of an animation, specifically the animation trigger. The trigger is defined using the trigger() function and exported as a constant named openClose.

LANGUAGE: typescript
CODE:
export const openClose = trigger('openClose', [
  // ...
]);

----------------------------------------

TITLE: Configuring Angular Forms Module
DESCRIPTION: Sets up the Angular module with required imports for forms functionality including FormsModule.

LANGUAGE: typescript
CODE:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [
    BrowserModule,
    FormsModule
  ],
  declarations: [
    AppComponent,
    ActorFormComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

----------------------------------------

TITLE: Testing Class-based HTTP Interceptor
DESCRIPTION: Configuration and testing setup for class-based HTTP interceptor.

LANGUAGE: typescript
CODE:
TestBed.configureTestingModule({
  providers: [
    AuthService,
    provideHttpClient(withInterceptorsFromDi()),
    provideHttpClientTesting(), 
    // We rely on the HTTP_INTERCEPTORS token to register the AuthInterceptor as an HttpInterceptor
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
  ],
});

----------------------------------------

TITLE: Custom HTTP Request Matching in Tests
DESCRIPTION: Examples of custom request matching using predicate functions.

LANGUAGE: typescript
CODE:
// Look for one request that has a request body.
const requestsWithBody = httpTesting.expectOne(req => req.body !== null);

// Assert that no mutation requests have been issued.
httpTesting.expectNone(req => req.method !== 'GET');

----------------------------------------

TITLE: Default HeroService Generated by Angular CLI
DESCRIPTION: Shows the default structure of a service file generated by the Angular CLI, including the @Injectable decorator.

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class HeroService {}

----------------------------------------

TITLE: Setting Up Form Controls in Angular Component
DESCRIPTION: Creates a FormGroup with FormControls for handling form data in the component.

LANGUAGE: typescript
CODE:
applyForm = new FormGroup({
  firstName: new FormControl(''),
  lastName: new FormControl(''),
  email: new FormControl('')
});

----------------------------------------

TITLE: Parameterized Custom Pipe Implementation
DESCRIPTION: Example of creating a custom pipe that accepts parameters to modify its transformation behavior. Shows how to handle multiple parameters in the transform method.

LANGUAGE: typescript
CODE:
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'myCustomTransformation',
})
export class MyCustomTransformationPipe implements PipeTransform {
  transform(value: string, format: string): string {
    let msg = `My custom transformation of ${value}.`

    if (format === 'uppercase') {
      return msg.toUpperCase()
    } else {
      return msg
    }
  }
}

----------------------------------------

TITLE: Effect Cleanup in Angular Signals
DESCRIPTION: Shows how to properly clean up effects using the onCleanup function to handle timeouts and other cleanup operations.

LANGUAGE: typescript
CODE:
effect((onCleanup) => {
  const user = currentUser();

  const timer = setTimeout(() => {
    console.log(`1 second ago, the user became ${user}`);
  }, 1000);

  onCleanup(() => {
    clearTimeout(timer);
  });
});

----------------------------------------

TITLE: Implementing HeroService with Authorization Flag in Angular
DESCRIPTION: Demonstrates the implementation of HeroService with a boolean flag to control the display of secret heroes based on user authorization.

LANGUAGE: typescript
CODE:
class HeroService {
  constructor(
    private logger: Logger,
    private isAuthorized: boolean) { }

  getHeroes() {
    const auth = this.isAuthorized ? 'authorized' : 'unauthorized';
    this.logger.log(`Getting heroes for ${auth} user.`);
    return HEROES.filter(hero => this.isAuthorized || !hero.isSecret);
  }
}

----------------------------------------

TITLE: Setting Dynamic Properties in Angular Templates
DESCRIPTION: Shows how to use square brackets to bind dynamic values to DOM properties in Angular templates. The example demonstrates binding the 'disabled' property of a button to a signal.

LANGUAGE: typescript
CODE:
@Component({
  /*...*/
  // Set the `disabled` property of the button based on the value of `isValidUserId`.
  template: `<button [disabled]="isValidUserId()">Save changes</button>`,
})
export class UserProfile {
  isValidUserId = signal(false);
}

----------------------------------------

TITLE: Using Template Reference Variables in Queries in Angular
DESCRIPTION: Shows how to use template reference variables as query locators instead of component types.

LANGUAGE: angular-ts
CODE:
@Component({
  /*...*/
  template: `
    <button #save>Save</button>
    <button #cancel>Cancel</button>
  `
})
export class ActionBar {
  saveButton = viewChild<ElementRef<HTMLButtonElement>>('save');
}

----------------------------------------

TITLE: Importing ReactiveFormsModule in Angular
DESCRIPTION: Demonstrates how to import the ReactiveFormsModule from the @angular/forms library after adding it to an Angular project. This is an example of how libraries extend Angular's base features.

LANGUAGE: typescript
CODE:
import { ReactiveFormsModule } from '@angular/forms';

----------------------------------------

TITLE: Testing HighlightDirective in AboutComponent
DESCRIPTION: Demonstrates testing the HighlightDirective within the AboutComponent context using standard component testing techniques.

LANGUAGE: typescript
CODE:
it('should show title in the h1 tag', () => {
  const h1: HTMLElement = fixture.nativeElement.querySelector('h1');
  expect(h1.textContent).toEqual('Test AboutComponent');
});

it('should show highlighted text according to default color', () => {
  const h2: HTMLElement = fixture.nativeElement.querySelector('h2');
  const bgColor = h2.style.backgroundColor;
  expect(bgColor).toBe('rgb(211, 211, 211)');
});

----------------------------------------

TITLE: Authentication Interceptor with Dependency Injection
DESCRIPTION: Interceptor that injects an AuthService to add authentication tokens to outgoing requests.

LANGUAGE: typescript
CODE:
export function authInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn) {
  const authToken = inject(AuthService).getAuthToken();

  const newReq = req.clone({
    headers: req.headers.append('X-Authentication-Token', authToken),
  });
  return next(newReq);
}

----------------------------------------

TITLE: Applying Attribute Directive in Template
DESCRIPTION: Demonstrates how to apply the appHighlight directive to a paragraph element in the component template.

LANGUAGE: html
CODE:
<p appHighlight>Highlight me!</p>

----------------------------------------

TITLE: Minimal Component Test Setup
DESCRIPTION: Simplified test configuration showing essential TestBed setup and basic component creation test

LANGUAGE: typescript
CODE:
describe('BannerComponent', () => {
  it('should create', () => {
    TestBed.configureTestingModule({
      declarations: [ BannerComponent ]
    });
    const fixture = TestBed.createComponent(BannerComponent);
    const component = fixture.componentInstance;
    expect(component).toBeTruthy();
  });
});

----------------------------------------

TITLE: Applying NgStyle in Angular Template
DESCRIPTION: Shows how to apply the NgStyle directive in the template using the currentStyles object.

LANGUAGE: HTML
CODE:
<div [ngStyle]="currentStyles">
  This div is initially italic, normal weight, and extra large (24px).
</div>

----------------------------------------

TITLE: Defining a Typical Angular Component with Metadata
DESCRIPTION: This snippet demonstrates how to define a typical Angular component using the @Component decorator and class constructor. It shows how metadata and the class structure inform Angular about component creation and display.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-typical',
  template: '<div>A typical component for {{data.name}}</div>'
})
export class TypicalComponent {
  @Input() data: TypicalData;
  constructor(private someService: SomeService) { … }
}

----------------------------------------

TITLE: Configuring Bootstrap Scripts
DESCRIPTION: Angular.json configuration for including Bootstrap JavaScript dependencies

LANGUAGE: json
CODE:
"scripts": [
  "node_modules/jquery/dist/jquery.slim.js",
  "node_modules/popper.js/dist/umd/popper.js",
  "node_modules/bootstrap/dist/js/bootstrap.js"
],

----------------------------------------

TITLE: Complex Filter Animation in Angular TypeScript
DESCRIPTION: This TypeScript code defines a complex filter animation with multiple transitions for elements entering, leaving, and being filtered in a list of heroes.

LANGUAGE: typescript
CODE:
animations: [
  trigger('filterAnimation', [
    transition(':enter, * => 0, * => -1', []),
    transition(':increment', [
      query(':enter', [
        style({ opacity: 0, width: 0 }),
        stagger(50, [
          animate('300ms ease-out', style({ opacity: 1, width: '*' })),
        ]),
      ], { optional: true })
    ]),
    transition(':decrement', [
      query(':leave', [
        stagger(50, [
          animate('300ms ease-out', style({ opacity: 0, width: 0 })),
        ]),
      ], { optional: true })
    ]),
  ]),
]

----------------------------------------

TITLE: Constructor Dependency Injection in TypeScript
DESCRIPTION: Shows how to inject a dependency using constructor injection pattern.

LANGUAGE: typescript
CODE:
@Component({ … })
class HeroListComponent {
  constructor(private service: HeroService) {}
}

----------------------------------------

TITLE: Passing Values to Attribute Directive
DESCRIPTION: Modifies the HighlightDirective to accept an input for the highlight color and updates the component to use it.

LANGUAGE: typescript
CODE:
import { Directive, ElementRef, HostListener, Input } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
  @Input() appHighlight = '';

  constructor(private el: ElementRef) { }

  @HostListener('mouseenter') onMouseEnter() {
    this.highlight(this.appHighlight || 'red');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.highlight(null);
  }

  private highlight(color: string | null) {
    this.el.nativeElement.style.backgroundColor = color;
  }
}

----------------------------------------

TITLE: Event Argument Handling in Angular
DESCRIPTION: Shows how to access and use the $event object in event handlers. The example demonstrates typing the event object and accessing its properties.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <input type="text" (keyup)="updateField($event)" />
  `,
  ...
})
export class AppComponent {
  updateField(event: KeyboardEvent): void {
    console.log(`The user pressed: ${event.key}`);
  }
}

----------------------------------------

TITLE: FormArray Implementation
DESCRIPTION: Shows how to create and manipulate a FormArray with homogeneous control types

LANGUAGE: typescript
CODE:
const names = new FormArray([new FormControl('Alex')]);
names.push(new FormControl('Jess'));

----------------------------------------

TITLE: Handling Multiple HTTP Requests in Tests
DESCRIPTION: Using match() API to handle multiple HTTP requests in test scenarios.

LANGUAGE: typescript
CODE:
const allGetRequests = httpTesting.match({method: 'GET'});
for (const req of allGetRequests) {
  // Handle responding to each request.
}

----------------------------------------

TITLE: Adding Animation Metadata to Component Decorator
DESCRIPTION: This snippet shows how to add the animations metadata property to the @Component decorator, where animation triggers are defined.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-open-close',
  animations: [
    trigger('openClose', [
      // ... state and transition definitions ...
    ])
  ],
  templateUrl: 'open-close.component.html',
  styleUrls: ['open-close.component.css']
})
export class OpenCloseComponent {

----------------------------------------

TITLE: Simplified Parent Component for Two-way Binding in Angular
DESCRIPTION: This snippet demonstrates a simplified version of a parent component (AppComponent) set up for two-way binding with a child component in Angular. It uses the two-way binding syntax to bind the initialCount property to the child's count property.

LANGUAGE: angular-ts
CODE:
// ./app.component.ts
import { Component } from '@angular/core';
import { CounterComponent } from './counter/counter.component';

@Component({
  selector: 'app-root',
  imports: [CounterComponent],
  template: `
    <main>
      <app-counter [(count)]="initialCount"></app-counter>
    </main>
  `,
})
export class AppComponent {
  initialCount = 18;
}

----------------------------------------

TITLE: Using Structural Directives with ng-container in Angular HTML
DESCRIPTION: Demonstrates how to apply structural directives like *ngIf and *ngFor to <ng-container> elements.

LANGUAGE: angular-html
CODE:
<ng-container *ngIf="permissions == 'admin'">
  <h1>Admin Dashboard</h1>
  <admin-infographic></admin-infographic>
</ng-container>

<ng-container *ngFor="let item of items; index as i; trackBy: trackByFn">
  <h2>{{ item.title }}</h2>
  <p>{{ item.description }}</p>
</ng-container>

----------------------------------------

TITLE: Angular Package File Structure Example
DESCRIPTION: Example directory structure showing the layout of @angular/core package files and folders

LANGUAGE: markdown
CODE:
node_modules/@angular/core
├── README.md
├── package.json
├── index.d.ts
├── fesm2022
│   ├── core.mjs
│   ├── core.mjs.map
│   ├── testing.mjs
│   └── testing.mjs.map
└── testing
    └── index.d.ts

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Uses the Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Importing HousingService in TypeScript
DESCRIPTION: Import statement for the HousingService in the home component file.

LANGUAGE: typescript
CODE:
import { HousingService } from '../housing.service';

----------------------------------------

TITLE: Implementing Form Template with Validation
DESCRIPTION: Creates the HTML template for the actor form with input controls, validation, and error messages.

LANGUAGE: html
CODE:
<form #actorForm="ngForm" (ngSubmit)="onSubmit()">
  <div class="form-group">
    <label for="name">Name</label>
    <input type="text" class="form-control" id="name"
           required
           [(ngModel)]="model.name" name="name"
           #name="ngModel">
    <div [hidden]="name.valid || name.pristine"
         class="alert alert-danger">
      Name is required
    </div>
  </div>
</form>

----------------------------------------

TITLE: Trusted Video URL in Angular Template
DESCRIPTION: Demonstrates creating a trusted resource URL for a YouTube video iframe src attribute.

LANGUAGE: html
CODE:
<h4>Resource URL:</h4>
<iframe class="e2e-iframe-trusted-src" width="640" height="390" [src]="videoUrl"></iframe>

----------------------------------------

TITLE: Rendering Template Fragment with ViewContainerRef in Angular
DESCRIPTION: Demonstrates how to dynamically render a template fragment using ViewContainerRef in an Angular component.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */,
  selector: 'component-with-fragment',
  template: `
    <h2>Component with a fragment</h2>
    <ng-template #myFragment>
      <p>This is the fragment</p>
    </ng-template>
    <my-outlet [fragment]="myFragment" />
  `,
})
export class ComponentWithFragment { }

@Component({
  /* ... */,
  selector: 'my-outlet',
  template: `<button (click)="showFragment()">Show</button>`,
})
export class MyOutlet {
  private viewContainer = inject(ViewContainerRef);
  @Input() fragment: TemplateRef<unknown> | undefined;

  showFragment() {
    if (this.fragment) {
      this.viewContainer.createEmbeddedView(this.fragment);
    }
  }
}

----------------------------------------

TITLE: Accessing Full Response with HttpClient in Angular
DESCRIPTION: Demonstrates how to access the full response object, including status and headers, by setting the 'observe' option to 'response' in an HttpClient GET request.

LANGUAGE: typescript
CODE:
http.get<Config>('/api/config', {observe: 'response'}).subscribe(res => {
  console.log('Response status:', res.status);
  console.log('Body:', res.body);
});

----------------------------------------

TITLE: Installing Angular CLI using npm
DESCRIPTION: Command to install Angular CLI globally using npm package manager. This allows you to use the 'ng' command in your terminal.

LANGUAGE: shell
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Configuring Angular Serve Target in angular.json
DESCRIPTION: Example configuration showing the structure of angular.json file with serve target specification using @angular-devkit/build-angular:dev-server builder.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        // `ng serve` invokes the Architect target named `serve`.
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          // ...
        },
        "build": { /* ... */ }
        "test": { /* ... */ }
      }
    }
  }
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Executes unit tests for the Angular application using the Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Component-Level Service Provider
DESCRIPTION: Illustrates providing a service at the component level for service isolation.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-villains-list',
  templateUrl: './villains-list.component.html',
  providers: [VillainsService]
})
export class VillainsListComponent {}

----------------------------------------

TITLE: Using Hydrate on Timer Trigger in Angular Template
DESCRIPTION: This example shows how to use the 'hydrate on timer' trigger to load and hydrate content after a specified duration.

LANGUAGE: angular-html
CODE:
@defer (hydrate on timer(500ms)) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Using Static Queries in Angular
DESCRIPTION: Demonstrates how to use static queries to access results earlier in the component lifecycle.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-card',
  template: '<custom-card-header>Visit sunny California!</custom-card-header>',
})
export class CustomCard {
  @ViewChild(CustomCardHeader, {static: true}) header: CustomCardHeader;

  ngOnInit() {
    console.log(this.header.text);
  }
}

----------------------------------------

TITLE: Adding HousingLocation to Component Imports
DESCRIPTION: TypeScript code showing the inclusion of HousingLocationComponent in the imports array of the @Component decorator.

LANGUAGE: typescript
CODE:
imports: [HousingLocationComponent]

----------------------------------------

TITLE: Handling Progress Events with HttpClient in Angular
DESCRIPTION: Shows how to receive and handle progress events during file uploads using HttpClient. The example demonstrates setting 'reportProgress' and 'observe' options to track upload progress.

LANGUAGE: typescript
CODE:
http.post('/api/upload', myData, {
  reportProgress: true,
  observe: 'events',
}).subscribe(event => {
  switch (event.type) {
    case HttpEventType.UploadProgress:
      console.log('Uploaded ' + event.loaded + ' out of ' + event.total + ' bytes');
      break;
    case HttpEventType.Response:
      console.log('Finished uploading!');
      break;
  }
});

----------------------------------------

TITLE: Simplified Child Component for Two-way Binding in Angular
DESCRIPTION: This snippet shows a simplified version of a child component (CounterComponent) set up for two-way binding in Angular. It uses the model property to enable two-way binding of the count property.

LANGUAGE: angular-ts
CODE:
// './counter/counter.component.ts';
import { Component, model } from '@angular/core';

@Component({ // Omitted for brevity })
export class CounterComponent {
  count = model<number>(0);

  updateCount(amount: number): void {
    this.count.update(currentCount => currentCount + amount);
  }
}

----------------------------------------

TITLE: Angular Operator Examples
DESCRIPTION: Shows supported operators in Angular expressions including arithmetic, comparison, logical, and special Angular-specific operators.

LANGUAGE: typescript
CODE:
1 + 2
52 - 3
41 * 6
20 / 4
17 % 5
10 ** 3
9 * (8 + 4)
a > b ? true : false
possiblyNullValue ?? 'default'
someObj.someProp?.nestedProp
someObj!.someProp
{{ total | currency }}

----------------------------------------

TITLE: Implementing Two-way Binding Between Parent and Child Components in Angular
DESCRIPTION: This example shows how to implement two-way binding between a parent (AppComponent) and a child (CounterComponent) in Angular. It demonstrates the setup required in both components to enable two-way binding of the count property.

LANGUAGE: angular-ts
CODE:
// ./app.component.ts
import { Component } from '@angular/core';
import { CounterComponent } from './counter/counter.component';

@Component({
  selector: 'app-root',
  imports: [CounterComponent],
  template: `
    <main>
      <h1>Counter: {{ initialCount }}</h1>
      <app-counter [(count)]="initialCount"></app-counter>
    </main>
  `,
})
export class AppComponent {
  initialCount = 18;
}

LANGUAGE: angular-ts
CODE:
// './counter/counter.component.ts';
import { Component, model } from '@angular/core';

@Component({
  selector: 'app-counter',
  template: `
    <button (click)="updateCount(-1)">-</button>
    <span>{{ count() }}</span>
    <button (click)="updateCount(+1)">+</button>
  `,
})
export class CounterComponent {
  count = model<number>(0);

  updateCount(amount: number): void {
    this.count.update(currentCount => currentCount + amount);
  }
}

----------------------------------------

TITLE: Grouping Elements with ng-container in Angular HTML
DESCRIPTION: Demonstrates how to use <ng-container> to group elements without adding an extra DOM element.

LANGUAGE: angular-html
CODE:
<!-- Component template -->
<section>
  <ng-container>
    <h3>User bio</h3>
    <p>Here's some info about the user</p>
  </ng-container>
</section>

LANGUAGE: angular-html
CODE:
<!-- Rendered DOM -->
<section>
  <h3>User bio</h3>
  <p>Here's some info about the user</p>
</section>

----------------------------------------

TITLE: Testing HTTP Services with Spies in Angular
DESCRIPTION: Demonstrates how to test a service that makes HTTP calls using spies on HttpClient methods.

LANGUAGE: typescript
CODE:
let httpClientSpy: jasmine.SpyObj<HttpClient>;
let heroService: HeroService;

beforeEach(() => {
  httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);
  heroService = new HeroService(httpClientSpy);
});

it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {
  const expectedHeroes: Hero[] =
    [{ id: 1, name: 'A' }, { id: 2, name: 'B' }];

  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));

  heroService.getHeroes().subscribe(
    heroes => {
      expect(heroes).withContext('expected heroes').toEqual(expectedHeroes);
      done();
    },
    done.fail
  );
  expect(httpClientSpy.get.calls.count())
    .withContext('one call')
    .toBe(1);
});

it('should return an error when the server returns a 404', (done: DoneFn) => {
  const errorResponse = new HttpErrorResponse({
    error: 'test 404 error',
    status: 404, statusText: 'Not Found'
  });

  httpClientSpy.get.and.returnValue(asyncError(errorResponse));

  heroService.getHeroes().subscribe(
    heroes => done.fail('expected an error, not heroes'),
    error => {
      expect(error.message).toContain('test 404 error');
      done();
    }
  );
});

----------------------------------------

TITLE: Extending Components and Directives in Angular TypeScript
DESCRIPTION: Shows how a component can inherit metadata, inputs, outputs, and host bindings from a base component or directive.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'base-listbox',
  template: `
    ...
  `,
  host: {
    '(keydown)': 'handleKey($event)',
  },
})
export class ListboxBase {
  @Input() value: string;
  handleKey(event: KeyboardEvent) {
    /* ... */
  }
}

@Component({
  selector: 'custom-listbox',
  template: `
    ...
  `,
  host: {
    '(click)': 'focusActiveOption()',
  },
})
export class CustomListbox extends ListboxBase {
  @Input() disabled = false;
  focusActiveOption() {
    /* ... */
  }
}

----------------------------------------

TITLE: Installing Angular Language Service Package
DESCRIPTION: Command to install the Angular Language Service package as a dev dependency

LANGUAGE: shell
CODE:
npm install --save-dev @angular/language-service

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor testing framework

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Adding Housing Data Array in HomeComponent
DESCRIPTION: Defines a housingLocationList property in the HomeComponent class that contains an array of housing location objects with details like name, city, state, photo, availableUnits, wifi, laundry and id.

LANGUAGE: typescript
CODE:
housingLocationList = [
  {
    id: 0,
    name: 'Acme Fresh Start Housing',
    city: 'Chicago',
    state: 'IL',
    photo: '/assets/bernard-hermant-CLKGGwIBTaY-unsplash.jpg',
    availableUnits: 4,
    wifi: true,
    laundry: true
  },
  {
    id: 1,
    name: 'A113 Transitional Housing',
    city: 'Santa Monica',
    state: 'CA',
    photo: '/assets/brandon-griggs-wR11KBaB86U-unsplash.jpg',
    availableUnits: 0,
    wifi: false,
    laundry: true
  },
  {
    id: 2,
    name: 'Warm Beds Housing Support',
    city: 'Juneau',
    state: 'AK',
    photo: '/assets/i-do-nothing-but-love-lAyXdl1-Wmc-unsplash.jpg',
    availableUnits: 1,
    wifi: false,
    laundry: false
  }
]

----------------------------------------

TITLE: Implementing HousingLocation in HomeComponent
DESCRIPTION: Implementation of the HousingLocation interface in HomeComponent with sample data

LANGUAGE: typescript
CODE:
export class HomeComponent {
  housingLocation: HousingLocation = {
    id: 9999,
    name: 'Test Home',
    city: 'Test city',
    state: 'ST',
    photo: 'assets/example-house.jpg',
    availableUnits: 99,
    wifi: true,
    laundry: false,
  };
}

----------------------------------------

TITLE: Querying and Staggering Animations in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to use query() and stagger() functions to animate a list of heroes entering the page with a delayed sequence.

LANGUAGE: typescript
CODE:
animations: [
  trigger('pageAnimations', [
    transition(':enter', [
      query('.hero', [
        style({opacity: 0, transform: 'translateY(-100px)'}),
        stagger(30, [
          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)',
            style({ opacity: 1, transform: 'none' }))
        ])
      ])
    ])
  ])
]

----------------------------------------

TITLE: Importing FormsModule for NgModel in Angular Component
DESCRIPTION: Demonstrates how to import the FormsModule to use NgModel for two-way data binding.

LANGUAGE: TypeScript
CODE:
import { FormsModule } from '@angular/forms';

----------------------------------------

TITLE: Updating Angular Material Package
DESCRIPTION: Command to update Angular Material and its dependencies using ng update.

LANGUAGE: shell
CODE:
ng update @angular/material

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Executes end-to-end tests for the Angular project using the Protractor testing framework.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Creating Harness Loader for Unit Tests
DESCRIPTION: Example of creating a harness loader using TestbedHarnessEnvironment for unit tests with Angular's TestBed.

LANGUAGE: typescript
CODE:
const fixture = TestBed.createComponent(MyComponent);

// Create a harness loader from the fixture
const loader = TestbedHarnessEnvironment.loader(fixture);
...

// Use the loader to get harness instances
const myComponentHarness = await loader.getHarness(MyComponent);

----------------------------------------

TITLE: Application-Level Service Configuration in TypeScript
DESCRIPTION: Shows how to configure services at the application level using ApplicationConfig.

LANGUAGE: typescript
CODE:
export const appConfig: ApplicationConfig = {
    providers: [
      { provide: HeroService },
    ]
};

----------------------------------------

TITLE: Accessing Component's Host Element in Angular
DESCRIPTION: This snippet demonstrates how to inject ElementRef to get a reference to the component's host element. The nativeElement property provides access to the underlying DOM Element instance.

LANGUAGE: typescript
CODE:
@Component({...})
export class ProfilePhoto {
  constructor(elementRef: ElementRef) {
    console.log(elementRef.nativeElement);
  }
}

----------------------------------------

TITLE: Configuring Routes in Angular
DESCRIPTION: Shows how to define routes and configure the router using provideRouter method in the ApplicationConfig.

LANGUAGE: typescript
CODE:
const appRoutes: Routes = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];
export const appConfig: ApplicationConfig = {
    providers: [provideRouter(appRoutes, withDebugTracing())]
}

----------------------------------------

TITLE: Testing Network Errors in HTTP Requests
DESCRIPTION: Example of testing network error handling in HTTP requests.

LANGUAGE: typescript
CODE:
const req = httpTesting.expectOne('/api/config');
req.error(new ProgressEvent('network error!'));

// Assert that the application successfully handled the network error.

----------------------------------------

TITLE: Defining a Service with Dependencies in Angular
DESCRIPTION: Shows the implementation of MasterService, which depends on ValueService. This demonstrates how services often rely on other injected services.

LANGUAGE: typescript
CODE:
export class MasterService {
  constructor(private valueService: ValueService) { }
  getValue() { return this.valueService.getValue(); }
}

----------------------------------------

TITLE: Using useExisting Provider for Alias in Angular
DESCRIPTION: Shows how to use the useExisting provider to create an alias for an existing service in Angular dependency injection.

LANGUAGE: typescript
CODE:
[
  NewLogger,
  // Alias OldLogger w/ reference to NewLogger
  { provide: OldLogger, useExisting: NewLogger},
]

----------------------------------------

TITLE: Registering Angular Service Provider with Injectable Decorator
DESCRIPTION: This snippet demonstrates how to register an Angular service provider using the @Injectable decorator with the providedIn property. This is a common solution to the 'No Provider Found' error.

LANGUAGE: typescript
CODE:
@Injectable({ providedIn: 'app' })

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Starts a local development server for the Angular application that watches for file changes and enables hot reload.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Creating MouseOver Event Handler Function
DESCRIPTION: Implementation of a mouseover event handler function that updates a message property when triggered.

LANGUAGE: typescript
CODE:
onMouseOver() {
    this.message = 'Way to go 🚀';
}

----------------------------------------

TITLE: Using Hydrate When Trigger in Angular Template
DESCRIPTION: This snippet illustrates the use of the 'hydrate when' trigger to load and hydrate content when a custom conditional expression becomes truthy.

LANGUAGE: angular-html
CODE:
@defer (hydrate when condition) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Defining JSON Schema for Angular CLI Builder Input Validation
DESCRIPTION: This JSON schema defines the structure and types of input options for a custom Angular CLI builder. It specifies two required string properties: 'source' and 'destination'.

LANGUAGE: json
CODE:
{
  "$schema": "http://json-schema.org/schema",
  "type": "object",
  "properties": {
    "source": {
      "type": "string"
    },
    "destination": {
      "type": "string"
    }
  }
}

----------------------------------------

TITLE: Creating Basic Angular Component with Host Element
DESCRIPTION: Demonstrates creating a simple Angular component with a profile photo template and how it renders in the DOM.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'profile-photo',
  template: `
    <img src="profile-photo.jpg" alt="Your profile photo" />
  `,
})
export class ProfilePhoto {}

LANGUAGE: html
CODE:
<!-- Using the component -->
<h3>Your profile photo</h3>
<profile-photo />
<button>Upload a new profile photo</button>

LANGUAGE: html
CODE:
<!-- Rendered DOM -->
<h3>Your profile photo</h3>
<profile-photo>
  <img src="profile-photo.jpg" alt="Your profile photo" />
</profile-photo>
<button>Upload a new profile photo</button>

----------------------------------------

TITLE: Using contentChildren for Multiple Results Content Query in Angular
DESCRIPTION: Shows how to use the contentChildren function to query for multiple child components in the component's content.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-menu-item',
  /*...*/
})
export class CustomMenuItem {
  text: string;
}

@Component({
  selector: 'custom-menu',
  /*...*/
})
export class CustomMenu {
  items = contentChildren(CustomMenuItem);
  itemTexts = computed(() => this.items().map(item => item.text));
}

@Component({
  selector: 'user-profile',
  template: `
    <custom-menu>
      <custom-menu-item>Cheese</custom-menu-item>
      <custom-menu-item>Tomato</custom-menu-item>
    </custom-menu>
  `
})
export class UserProfile { }

----------------------------------------

TITLE: Using HostListener Decorator in Angular Component
DESCRIPTION: Shows how to use @HostListener decorator to bind event listeners to the host element.

LANGUAGE: typescript
CODE:
export class CustomSlider {
  @HostListener('keydown', ['$event'])
  updateValue(event: KeyboardEvent) {
    /* ... */
  }
}

----------------------------------------

TITLE: Valid inject() Usage in Angular Class Definition
DESCRIPTION: Demonstrates proper usage of inject() in field initializers and constructor body within an Angular Injectable class.

LANGUAGE: typescript
CODE:
@Injectable({providedIn: 'root'})
export class Car {
  radio: Radio|undefined;

  // OK: field initializer
  spareTyre = inject(Tyre);
  
  constructor() {
    // OK: constructor body
    this.radio = inject(Radio);
  }
}

----------------------------------------

TITLE: Using $localize in Component Code
DESCRIPTION: Demonstrates how to mark strings for translation in TypeScript component code using the $localize tagged template literal.

LANGUAGE: typescript
CODE:
$localize`string_to_translate`;
$localize`:{i18n_metadata}:string_to_translate`

----------------------------------------

TITLE: Initial Highlight Directive Structure
DESCRIPTION: Shows the basic structure of the generated highlight directive with the @Directive decorator.

LANGUAGE: typescript
CODE:
import { Directive } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
  constructor() { }
}

----------------------------------------

TITLE: Using Custom Event in Angular Template
DESCRIPTION: Demonstrates how to bind to a custom event in an Angular template using event binding syntax.

LANGUAGE: html
CODE:
<expandable-panel (panelClosed)="savePanelState()" />

----------------------------------------

TITLE: Testing Deferred Blocks
DESCRIPTION: Implementation of test cases for @defer blocks using Angular TestBed APIs.

LANGUAGE: angular-ts
CODE:
it('should render a defer block in different states', async () => {
  TestBed.configureTestingModule({deferBlockBehavior: DeferBlockBehavior.Manual});
  @Component({
    template: `
      @defer {
        <large-component />
      } @placeholder {
        Placeholder
      } @loading {
        Loading...
      }
    `
  })
  class ComponentA {}
  const componentFixture = TestBed.createComponent(ComponentA);
  const deferBlockFixture = (await componentFixture.getDeferBlocks())[0];
  expect(componentFixture.nativeElement.innerHTML).toContain('Placeholder');
  await deferBlockFixture.render(DeferBlockState.Loading);
  expect(componentFixture.nativeElement.innerHTML).toContain('Loading');
  await deferBlockFixture.render(DeferBlockState.Complete);
  expect(componentFixture.nativeElement.innerHTML).toContain('large works!');
});

----------------------------------------

TITLE: Accessing Form Input Value Programmatically in Angular Component
DESCRIPTION: Demonstrates how to access form input values programmatically within the component class using the this keyword. Shows implementation of a button click handler that displays the input value.

LANGUAGE: angular-ts
CODE:
...
@Component({
  selector: 'app-user',
  template: `
    ...
    <button (click)="showFramework()">Show Framework</button>
  `,
  ...
})
export class UserComponent {
  favoriteFramework = '';
  ...

  showFramework() {
    alert(this.favoriteFramework);
  }
}

----------------------------------------

TITLE: Passing Parameters to Template Fragment in Angular
DESCRIPTION: Shows how to declare parameters for a template fragment and pass context when rendering using NgTemplateOutlet in Angular.

LANGUAGE: html
CODE:
<ng-template #myFragment let-pizzaTopping="topping">
  <p>You selected: {{pizzaTopping}}</p>
</ng-template>

<ng-container
  [ngTemplateOutlet]="myFragment"
  [ngTemplateOutletContext]="{topping: 'onion'}"
/>

----------------------------------------

TITLE: Modifying Angular Component Template
DESCRIPTION: This code updates the template of the app component to display 'Hello world' in the application.

LANGUAGE: typescript
CODE:
template: `<h1>{{ title }}</h1>`,

----------------------------------------

TITLE: Enter/Leave Animation Implementation
DESCRIPTION: Shows how to create animations for elements entering and leaving the view using :enter and :leave aliases with opacity transitions.

LANGUAGE: typescript
CODE:
trigger('myInsertRemoveTrigger', [
  transition(':enter', [
    style({ opacity: 0 }),
    animate('100ms', style({ opacity: 1 }))
  ]),
  transition(':leave', [
    animate('100ms', style({ opacity: 0 }))
  ])
])

----------------------------------------

TITLE: Implementing DI-based Interceptor Class
DESCRIPTION: Example of creating an interceptor using the class-based approach with dependency injection.

LANGUAGE: typescript
CODE:
@Injectable()
export class LoggingInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, handler: HttpHandler): Observable<HttpEvent<any>> {
    console.log('Request URL: ' + req.url);
    return handler.handle(req);
  }
}

----------------------------------------

TITLE: Running Angular Tests with CLI
DESCRIPTION: Demonstrates how to use the Angular CLI to run tests for an Angular application. This command builds the application in watch mode and launches the Karma test runner.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Explicit Type FormControl
DESCRIPTION: Demonstrates explicit type specification for a FormControl allowing both string and null values

LANGUAGE: typescript
CODE:
const email = new FormControl<string|null>(null);

----------------------------------------

TITLE: Adding Event Handlers to Highlight Directive
DESCRIPTION: Extends the HighlightDirective to handle mouseenter and mouseleave events using @HostListener decorators.

LANGUAGE: typescript
CODE:
import { Directive, ElementRef, HostListener } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
  constructor(private el: ElementRef) { }

  @HostListener('mouseenter') onMouseEnter() {
    this.highlight('yellow');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.highlight(null);
  }

  private highlight(color: string | null) {
    this.el.nativeElement.style.backgroundColor = color;
  }
}

----------------------------------------

TITLE: Implementing Complete Deferrable View with All Blocks in Angular
DESCRIPTION: Shows a complete implementation of a deferrable view with @defer, @placeholder, @loading, and @error blocks. This structure handles all possible states of deferred content loading.

LANGUAGE: angular-html
CODE:
@defer {
  <article-comments />
} @placeholder (minimum 1s) {
  <p>Placeholder for comments</p>
} @loading (minimum 1s; after 500ms) {
  <p>Loading comments...</p>
} @error {
  <p>Failed to load comments</p>
}

----------------------------------------

TITLE: Adding @angular/localize Package with Angular CLI
DESCRIPTION: This command adds the @angular/localize package to an Angular project, updating package.json and TypeScript configuration files. It also adds a reference to the type definition in the main.ts file.

LANGUAGE: bash
CODE:
ng add @angular/localize

----------------------------------------

TITLE: Implementing ReversePipe Transform Logic
DESCRIPTION: Implements the transform method for ReversePipe that reverses the input string character by character using a loop.

LANGUAGE: typescript
CODE:
export class ReversePipe implements PipeTransform {
    transform(value: string): string {
        let reverse = '';

        for (let i = value.length - 1; i >= 0; i--) {
            reverse += value[i];
        }

        return reverse;
    }

}

----------------------------------------

TITLE: Configuring HttpClient with Fetch API in Angular
DESCRIPTION: This code demonstrates how to configure HttpClient to use the Fetch API instead of XMLHttpRequest for making HTTP requests.

LANGUAGE: typescript
CODE:
export const appConfig: ApplicationConfig = {
  providers: [
    provideHttpClient(
      withFetch(),
    ),
  ]
};

----------------------------------------

TITLE: Configuring Nginx for Multi-Locale Angular Deployment
DESCRIPTION: This Nginx configuration example demonstrates how to set up server blocks for different locales. It includes redirection based on the Accept-Language header and fallback to a default language.

LANGUAGE: nginx
CODE:
server {
    listen 80;
    server_name example.com;
    root /var/www/example.com;

    # Redirect user to their preferred language
    location / {
        if ($http_accept_language ~* ^fr) {
            rewrite ^/$ /fr$uri redirect;
        }
        if ($http_accept_language ~* ^es) {
            rewrite ^/$ /es$uri redirect;
        }
        # If no preferred language is set or available,
        # default to English
        rewrite ^/$ /en$uri redirect;
    }

    location ~ ^/(fr|es|en)/ {
        try_files $uri $uri/ /$1/index.html =404;
    }
}

----------------------------------------

TITLE: Marking a Class as a Pipe in Angular
DESCRIPTION: This snippet demonstrates how to mark a class as a pipe using the @Pipe decorator in Angular. It shows the basic structure of a pipe class with the appropriate naming conventions.

LANGUAGE: typescript
CODE:
import { Pipe } from '@angular/core';

@Pipe({
  name: 'greet',
})
export class GreetPipe {}

----------------------------------------

TITLE: Using Image Loader with NgOptimizedImage in Angular Template
DESCRIPTION: This code example shows how to use a configured image loader with NgOptimizedImage directive in an Angular template.

LANGUAGE: html
CODE:
<img ngSrc="image.png" height="600" width="800" />

----------------------------------------

TITLE: Adding @placeholder Block in Angular Deferrable Views
DESCRIPTION: Demonstrates how to add a @placeholder block to a @defer block in an Angular component. The placeholder content is shown before the deferred content loads.

LANGUAGE: angular-html
CODE:
@defer {
  <article-comments />
} @placeholder {
  <p>Placeholder for comments</p>
}

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Shell command to start the Angular development server with the new build system.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Importing NgOptimizedImage Directive
DESCRIPTION: Shows how to import and include the NgOptimizedImage directive in an Angular component or module

LANGUAGE: typescript
CODE:
import { NgOptimizedImage } from '@angular/common'

imports: [
  NgOptimizedImage,
  // ...
],

----------------------------------------

TITLE: Installing Angular CLI Globally
DESCRIPTION: Command to install the Angular Command Line Interface (CLI) globally on your system using npm. This is a prerequisite step for creating new Angular projects.

LANGUAGE: bash
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Attribute Selector for Custom Button
DESCRIPTION: Shows how to create a custom button component using an attribute selector to leverage native button functionality.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'button[yt-upload]',
   ...
})
export class YouTubeUploadButton { }

----------------------------------------

TITLE: Configuring TestBed for Service Testing in Angular
DESCRIPTION: Shows how to set up TestBed for testing services, including providing the service and injecting it in tests.

LANGUAGE: typescript
CODE:
let valueService: ValueService;

beforeEach(() => {
  TestBed.configureTestingModule({ providers: [ValueService] });
  valueService = TestBed.inject(ValueService);
});

----------------------------------------

TITLE: Using viewChild for Single Result Query in Angular
DESCRIPTION: Demonstrates how to use the viewChild function to query for a single child component in the component's view.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-card-header',
  /*...*/
})
export class CustomCardHeader {
  text: string;
}

@Component({
  selector: 'custom-card',
  template: '<custom-card-header>Visit sunny California!</custom-card-header>',
})
export class CustomCard {
  header = viewChild(CustomCardHeader);
  headerText = computed(() => this.header()?.text);
}

----------------------------------------

TITLE: Implementing PipeTransform Interface in Angular
DESCRIPTION: This code shows how to implement the PipeTransform interface in a custom pipe class. It includes the transform method with parameters for value and additional arguments, demonstrating the basic structure of a functional pipe.

LANGUAGE: typescript
CODE:
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'greet',
})
export class GreetPipe implements PipeTransform {
  transform(value: string, param1: boolean, param2: boolean): string {
    return `Hello ${value}`;
  }
}

----------------------------------------

TITLE: Displaying Current Date with Angular DatePipe
DESCRIPTION: Example showing how to use the DatePipe to display the current date formatted according to the current locale settings.

LANGUAGE: typescript
CODE:
{{ today | date }}

----------------------------------------

TITLE: Template-Driven Forms Component Implementation
DESCRIPTION: Example showing how to implement a single form control using template-driven forms approach with NgModel directive.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'app-template-favorite-color',
  template: `
    Favorite Color: <input type="text" [(ngModel)]="favoriteColor">
  `
})
export class FavoriteColorComponent {
  favoriteColor = '';
}

----------------------------------------

TITLE: Updating Angular Component Template Text
DESCRIPTION: Demonstrates how to set a component's template property to display a simple text message. Shows the basic syntax for defining an inline template string in TypeScript.

LANGUAGE: typescript
CODE:
template: `
  Hello Universe
`,

----------------------------------------

TITLE: Configuring Build-time Value Replacement
DESCRIPTION: Example of using the 'define' option in angular.json to replace identifiers at build time.

LANGUAGE: json
CODE:
"build": {
  "builder": "@angular/build:application",
  "options": {
    ...
    "define": {
        "SOME_NUMBER": "5",
        "ANOTHER": "'this is a string literal, note the extra single quotes'",
        "REFERENCE": "globalThis.someValue.noteTheAbsentSingleQuotes"
    }
  }
}

----------------------------------------

TITLE: Emitting String Event in Angular Child Component
DESCRIPTION: This snippet shows how to emit a string event from a child component. It's part of a step-by-step guide for implementing @Output communication.

LANGUAGE: typescript
CODE:
addItem() {
  this.addItemEvent.emit('🐢');
}

----------------------------------------

TITLE: Basic i18n Template Attribute Usage
DESCRIPTION: Demonstrates how to mark static text in component templates for translation using the i18n attribute.

LANGUAGE: html
CODE:
<element i18n="{i18n_metadata}">{string_to_translate}</element>

----------------------------------------

TITLE: Importing Input Decorator and HousingLocation in Angular TypeScript
DESCRIPTION: This snippet shows how to import the Input decorator and HousingLocation type into an Angular component file. These imports are necessary for creating input properties and defining their types.

LANGUAGE: typescript
CODE:
import { Component, Input } from '@angular/core';
import { HousingLocation } from '../housinglocation';

----------------------------------------

TITLE: Exponential Strength Pipe Implementation in Angular
DESCRIPTION: This snippet defines a custom pipe named 'exponentialStrength' that transforms a value by raising it to a specified power. It demonstrates a practical use case for custom pipes in Angular applications.

LANGUAGE: typescript
CODE:
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({name: 'exponentialStrength'})
export class ExponentialStrengthPipe implements PipeTransform {
  transform(value: number, exponent = 1): number {
    return Math.pow(value, exponent);
  }
}

----------------------------------------

TITLE: Implementing DropdownQuestion Class for Select Controls
DESCRIPTION: Creates a 'DropdownQuestion' class extending 'QuestionBase' to represent dropdown select controls in the dynamic form. It sets the control type to 'dropdown' and includes options for the select list.

LANGUAGE: TypeScript
CODE:
import { QuestionBase } from './question-base';

export class DropdownQuestion extends QuestionBase<string> {
  override controlType = 'dropdown';
}


----------------------------------------

TITLE: TypeScript Signal Primitives API Definitions
DESCRIPTION: Comprehensive type definitions and function declarations for Angular's reactive primitives implementation. Includes interfaces and types for signals, computed values, watches, and reactive nodes along with utility functions for managing reactive state.

LANGUAGE: typescript
CODE:
// @public (undocumented)
export type ComputationFn<S, D> = (source: S, previous?: {
    source: S;
    value: D;
}) => D;

// @public
export interface ComputedNode<T> extends ReactiveNode {
    computation: () => T;
    // (undocumented)
    equal: ValueEqualityFn<T>;
    error: unknown;
    value: T;
}

// @public
export function consumerAfterComputation(node: ReactiveNode | null, prevConsumer: ReactiveNode | null): void;

// @public
export function consumerBeforeComputation(node: ReactiveNode | null): ReactiveNode | null;

// @public
export function consumerDestroy(node: ReactiveNode): void;

// @public (undocumented)
export function consumerMarkDirty(node: ReactiveNode): void;

// @public
export function consumerPollProducersForChange(node: ReactiveNode): boolean;

// @public
export function createComputed<T>(computation: () => T, equal?: ValueEqualityFn<T>): ComputedGetter<T>;

// @public (undocumented)
export function createLinkedSignal<S, D>(sourceFn: () => S, computationFn: ComputationFn<S, D>, equalityFn?: ValueEqualityFn<D>): LinkedSignalGetter<S, D>;

// @public
export function createSignal<T>(initialValue: T, equal?: ValueEqualityFn<T>): SignalGetter<T>;

// @public (undocumented)
export function createWatch(fn: (onCleanup: WatchCleanupRegisterFn) => void, schedule: (watch: Watch) => void, allowSignalWrites: boolean): Watch;

// @public
export function defaultEquals<T>(a: T, b: T): boolean;

// @public (undocumented)
export function getActiveConsumer(): ReactiveNode | null;

// @public (undocumented)
export function isInNotificationPhase(): boolean;

// @public (undocumented)
export function isReactive(value: unknown): value is Reactive;

// @public (undocumented)
export type LinkedSignalGetter<S, D> = (() => D) & {
    [SIGNAL]: LinkedSignalNode<S, D>;
};

// @public (undocumented)
export interface LinkedSignalNode<S, D> extends ReactiveNode {
    computation: ComputationFn<S, D>;
    // (undocumented)
    equal: ValueEqualityFn<D>;
    error: unknown;
    source: () => S;
    sourceValue: S;
    value: D;
}

// @public (undocumented)
export function linkedSignalSetFn<S, D>(node: LinkedSignalNode<S, D>, newValue: D): void;

// @public (undocumented)
export function linkedSignalUpdateFn<S, D>(node: LinkedSignalNode<S, D>, updater: (value: D) => D): void;

// @public
export function producerAccessed(node: ReactiveNode): void;

// @public
export function producerIncrementEpoch(): void;

// @public (undocumented)
export function producerMarkClean(node: ReactiveNode): void;

// @public
export function producerNotifyConsumers(node: ReactiveNode): void;

// @public
export function producerUpdatesAllowed(): boolean;

// @public
export function producerUpdateValueVersion(node: ReactiveNode): void;

// @public (undocumented)
export interface Reactive {
    // (undocumented)
    [SIGNAL]: ReactiveNode;
}

// @public (undocumented)
export const REACTIVE_NODE: ReactiveNode;

// @public
export interface ReactiveNode {
    consumerAllowSignalWrites: boolean;
    // (undocumented)
    readonly consumerIsAlwaysLive: boolean;
    // (undocumented)
    consumerMarkedDirty(node: unknown): void;
    consumerOnSignalRead(node: unknown): void;
    debugName?: string;
    dirty: boolean;
    kind: string;
    lastCleanEpoch: Version;
    liveConsumerIndexOfThis: number[] | undefined;
    liveConsumerNode: ReactiveNode[] | undefined;
    nextProducerIndex: number;
    producerIndexOfThis: number[] | undefined;
    producerLastReadVersion: Version[] | undefined;
    producerMustRecompute(node: unknown): boolean;
    producerNode: ReactiveNode[] | undefined;
    // (undocumented)
    producerRecomputeValue(node: unknown): void;
    version: Version;
}

// @public (undocumented)
export function runPostSignalSetFn(): void;

// @public (undocumented)
export function setActiveConsumer(consumer: ReactiveNode | null): ReactiveNode | null;

// @public
export function setAlternateWeakRefImpl(impl: unknown): void;

// @public (undocumented)
export function setPostSignalSetFn(fn: (() => void) | null): (() => void) | null;

// @public (undocumented)
export function setThrowInvalidWriteToSignalError(fn: <T>(node: SignalNode<T>) => never): void;

// @public
export const SIGNAL: unique symbol;

// @public (undocumented)
export const SIGNAL_NODE: SignalNode<unknown>;

// @public (undocumented)
export interface SignalGetter<T> extends SignalBaseGetter<T> {
    // (undocumented)
    readonly [SIGNAL]: SignalNode<T>;
}

// @public (undocumented)
export interface SignalNode<T> extends ReactiveNode {
    // (undocumented)
    equal: ValueEqualityFn<T>;
    // (undocumented)
    value: T;
}

// @public (undocumented)
export function signalSetFn<T>(node: SignalNode<T>, newValue: T): void;

// @public (undocumented)
export function signalUpdateFn<T>(node: SignalNode<T>, updater: (value: T) => T): void;

// @public
export function untracked<T>(nonReactiveReadsFn: () => T): T;

// @public
export type ValueEqualityFn<T> = (a: T, b: T) => boolean;

// @public (undocumented)
export interface Watch {
    // (undocumented)
    [SIGNAL]: WatchNode;
    // (undocumented)
    cleanup(): void;
    destroy(): void;
    // (undocumented)
    notify(): void;
    run(): void;
}

// @public
export type WatchCleanupFn = () => void;

// @public
export type WatchCleanupRegisterFn = (cleanupFn: WatchCleanupFn) => void;

----------------------------------------

TITLE: Styling Angular Component with CSS
DESCRIPTION: Shows how to apply CSS styles to an Angular component using the styles property. Uses the :host selector to target the component element and changes its text color using a hexadecimal color value.

LANGUAGE: typescript
CODE:
styles: `
  :host {
    color: #a144eb;
  }
`,

----------------------------------------

TITLE: Running Angular Benchmark with Custom Options
DESCRIPTION: Example command demonstrating how to run an Angular benchmark test with a custom environment variable (PERF_DRYRUN) using Bazel.

LANGUAGE: bash
CODE:
yarn bazel test modules/benchmarks/src/tree/baseline:perf --test_env=PERF_DRYRUN=true

----------------------------------------

TITLE: Setting Page Title
DESCRIPTION: Shows how to set page titles for routes.

LANGUAGE: typescript
CODE:
const routes: Routes = [
  {
    path: 'first-component',
    title: 'First component',
    component: FirstComponent,
    children: [
      {
        path: 'child-a',
        title: resolvedChildATitle,
        component: ChildAComponent,
      },
      {
        path: 'child-b',
        title: 'child b',
        component: ChildBComponent,
      },
    ],
  },
];

const resolvedChildATitle: ResolveFn<string> = () => Promise.resolve('child a');

----------------------------------------

TITLE: Multi-project workspace file structure
DESCRIPTION: Illustrates the file structure of a multi-project workspace with an application and a library.

LANGUAGE: markdown
CODE:
my-workspace/
  ├── …                (workspace-wide configuration files)
  └── projects/        (applications and libraries)
      ├── my-app/      (an explicitly generated application)
      │   └── …        (application-specific code and configuration)
      └── my-lib/      (a generated library)
          └── …        (library-specific code and configuration)

----------------------------------------

TITLE: Updating Angular JSON for New Build System
DESCRIPTION: Example of updating the angular.json file to use the new 'application' builder instead of the 'browser' builder.

LANGUAGE: json
CODE:
"architect": {
  "build": {
    "builder": "@angular-devkit/build-angular:application",
...

----------------------------------------

TITLE: Configuring HttpClient Cache Options in Angular
DESCRIPTION: Example of configuring HTTP transfer cache options for SSR using withHttpTransferCacheOptions in the application bootstrap configuration.

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, {
  providers: [
    provideClientHydration(withHttpTransferCacheOptions({
      includePostRequests: true
    }))
  ]
});

----------------------------------------

TITLE: Configuring API URL in Housing Service
DESCRIPTION: Setting up the API endpoint URL in the Angular housing service

LANGUAGE: javascript
CODE:
url = 'http://localhost:3000/locations';

----------------------------------------

TITLE: Angular Key Modifier Syntax
DESCRIPTION: Shows how to use Angular's key modifier syntax to simplify keyboard event handling. The example demonstrates filtering for specific key combinations.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <input type="text" (keyup.enter)="updateField($event)" />
  `,
  ...
})
export class AppComponent{
  updateField(event: KeyboardEvent): void {
    console.log('The user pressed enter in the text field.');
  }
}

LANGUAGE: angular-html
CODE:
<!-- Matches shift and enter -->
<input type="text" (keyup.shift.enter)="updateField($event)" />

LANGUAGE: angular-html
CODE:
<!-- Matches alt and left shift -->
<input type="text" (keydown.code.alt.shiftleft)="updateField($event)" />

----------------------------------------

TITLE: Specifying Providers in NgModule
DESCRIPTION: This example demonstrates how to specify providers in an NgModule, making them available for injection in components, directives, pipes, and other NgModules that import this module.

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [PopupTrigger, SelectionIndicator],
  declarations: [CustomMenu, CustomMenuItem],

  // Provide the OverlayManager service
  providers: [OverlayManager],
  /* ... */
})
export class CustomMenuModule { }

@NgModule({
  imports: [CustomMenuModule],
  declarations: [UserProfile],
  providers: [UserDataClient],
})
export class UserProfileModule { }

----------------------------------------

TITLE: Configuring HttpClient in NgModule-based Angular Application
DESCRIPTION: This code shows how to include provideHttpClient in the providers array of an Angular module for NgModule-based applications.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    provideHttpClient(),
  ],
  // ... other application configuration
})
export class AppModule {}

----------------------------------------

TITLE: CSS Style Property Bindings
DESCRIPTION: Demonstrates binding to CSS style properties using object and string syntax.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <ul [style]="listStyles"> ... </ul>
    <section [style]="sectionStyles"> ... </section>
  `,
  ...
})
export class UserProfile {
  listStyles = 'display: flex; padding: 8px';
  sectionStyles = {
    border: '1px solid black',
    'font-weight': 'bold',
  };
}

----------------------------------------

TITLE: Keyframe Animation with Offsets
DESCRIPTION: Demonstrates how to create complex animations using keyframes with specific offset values to control timing of style changes.

LANGUAGE: typescript
CODE:
transition('* => active', [
  animate('2s', keyframes([
    style({
      backgroundColor: 'blue',
      offset: 0
    }),
    style({
      backgroundColor: 'red',
      offset: 0.8
    }),
    style({
      backgroundColor: 'orange',
      offset: 1
    })
  ]))
])

----------------------------------------

TITLE: Creating Users Data Structure
DESCRIPTION: Definition of a users array containing user objects with ID and name properties.

LANGUAGE: typescript
CODE:
[{id: 0, name: 'Sarah'}, {id: 1, name: 'Amy'}, {id: 2, name: 'Rachel'}, {id: 3, name: 'Jessica'}, {id: 4, name: 'Poornima'}]

----------------------------------------

TITLE: Running Angular SSR Benchmark in Browser
DESCRIPTION: Command to execute the SSR benchmark in a browser environment. This target builds the benchmark and starts an HTTP server with DOM emulation disabled.

LANGUAGE: shell
CODE:
yarn bazel run //modules/ssr-benchmarks:run_browser

----------------------------------------

TITLE: Environment Configuration with API URL
DESCRIPTION: Environment configuration including API URL for different environments

LANGUAGE: typescript
CODE:
export const environment = {
  production: true,
  apiUrl: 'http://my-prod-url'
};

LANGUAGE: typescript
CODE:
export const environment = {
  production: false,
  apiUrl: 'http://my-dev-url'
};

----------------------------------------

TITLE: Using Decorator-based View Queries in Angular
DESCRIPTION: Demonstrates how to use the @ViewChild and @ViewChildren decorators for view queries.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-card',
  template: '<custom-card-header>Visit sunny California!</custom-card-header>',
})
export class CustomCard {
  @ViewChild(CustomCardHeader) header: CustomCardHeader;

  ngAfterViewInit() {
    console.log(this.header.text);
  }
}

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the local development server on port 4200 with auto-reload capability

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Implementing Business Logic in Structural Directive in Angular TypeScript
DESCRIPTION: Adds the core functionality to the structural directive, fetching data from the source and creating an embedded view with the data in the template context.

LANGUAGE: typescript
CODE:
export class SelectDirective {
  // ...

  async ngOnInit() {
    const data = await this.selectFrom.load();
    this.viewContainerRef.createEmbeddedView(this.templateRef, {
      // Create the embedded view with a context object that contains
      // the data via the key `$implicit`.
      $implicit: data,
    });
  }
}

----------------------------------------

TITLE: Generating a New Angular Library
DESCRIPTION: Commands to create a new workspace and generate a library using the Angular CLI.

LANGUAGE: shell
CODE:
ng new my-workspace --no-create-application
cd my-workspace
ng generate library my-lib

----------------------------------------

TITLE: Implementing Click Event Handler in Angular Component
DESCRIPTION: Demonstrates how to create a basic click event handler in an Angular component using the parentheses syntax. The example shows a button click implementation that triggers a greeting console log.

LANGUAGE: angular-ts
CODE:
@Component({
    ...
    template: `<button (click)="greet()">`
})
class AppComponent {
    greet() {
        console.log('Hello, there 👋');
    }
}

----------------------------------------

TITLE: Running Angular Signals Migration Command
DESCRIPTION: Command to execute the combined signals migration which converts traditional Angular decorators to their signal-based equivalents. This single command handles conversion of @Input, @Output, ViewChild/Children, and ContentChild/Children.

LANGUAGE: bash
CODE:
ng generate @angular/core:signals

----------------------------------------

TITLE: Using Hydrate on Hover Trigger in Angular Template
DESCRIPTION: This example shows how to use the 'hydrate on hover' trigger to load and hydrate content when the mouse hovers over the triggered area.

LANGUAGE: angular-html
CODE:
@defer (hydrate on hover) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Default Environment Configuration
DESCRIPTION: Basic environment configuration with production flag

LANGUAGE: typescript
CODE:
export const environment = {
  production: true
};

----------------------------------------

TITLE: Configuring Custom XSRF Cookie and Header Names in Angular HttpClient
DESCRIPTION: This snippet demonstrates how to use withXsrfConfiguration to override default names for XSRF token cookie and header in Angular's HttpClient. It sets custom names for both the cookie and the header used in XSRF protection.

LANGUAGE: typescript
CODE:
export const appConfig: ApplicationConfig = {
  providers: [
    provideHttpClient(
      withXsrfConfiguration({
        cookieName: 'CUSTOM_XSRF_TOKEN',
        headerName: 'X-Custom-Xsrf-Header',
      }),
    ),
  ]
};

----------------------------------------

TITLE: Content Projection with ngProjectAs
DESCRIPTION: Shows how to use the ngProjectAs attribute to project content into specific slots regardless of the element type.

LANGUAGE: angular-html
CODE:
<custom-card>
  <h3 ngProjectAs="card-title">Hello</h3>
  <p>Welcome to the example</p>
</custom-card>

----------------------------------------

TITLE: Using HttpClient in Angular Component with Async Pipe
DESCRIPTION: Shows how to use the UserService in an Angular component, combining @if with the async pipe to render UI for the data only after it's finished loading.

LANGUAGE: typescript
CODE:
import { AsyncPipe } from '@angular/common';
@Component({
  imports: [AsyncPipe],
  template: `
    @if (user$ | async; as user) {
      <p>Name: {{ user.name }}</p>
      <p>Biography: {{ user.biography }}</p>
    }
  `,
})
export class UserProfileComponent {
  @Input() userId!: string;
  user$!: Observable<User>;

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.user$ = this.userService.getUser(this.userId);
  }
}

----------------------------------------

TITLE: Adding router-outlet to Angular template
DESCRIPTION: Update the app.component.html file to use the router-outlet directive for dynamic component loading.

LANGUAGE: html
CODE:
<router-outlet></router-outlet>

----------------------------------------

TITLE: Configuring Coverage Enforcement in Karma
DESCRIPTION: Karma configuration to enforce minimum code coverage thresholds of 80% across statements, branches, functions, and lines of code.

LANGUAGE: javascript
CODE:
coverageReporter: {
  dir: require('path').join(__dirname, './coverage/<project-name>'),
  subdir: '.',
  reporters: [
    { type: 'html' },
    { type: 'text-summary' }
  ],
  check: {
    global: {
      statements: 80,
      branches: 80,
      functions: 80,
      lines: 80
    }
  }
}

----------------------------------------

TITLE: Implementing Browser-Safe Component Logic in Angular
DESCRIPTION: Example of using afterNextRender to safely access browser-specific APIs in an Angular component while maintaining SSR compatibility.

LANGUAGE: typescript
CODE:
import { Component, ViewChild, afterNextRender } from '@angular/core';

@Component({
  selector: 'my-cmp',
  template: `<span #content>{{ ... }}</span>`,
})
export class MyComponent {
  @ViewChild('content') contentRef: ElementRef;

  constructor() {
    afterNextRender(() => {
      // Safe to check `scrollHeight` because this will only run in the browser, not the server.
      console.log('content height: ' + this.contentRef.nativeElement.scrollHeight);
    });
  }
}

----------------------------------------

TITLE: Passing Input Value in Angular Template
DESCRIPTION: This example shows how to pass a value to an Input property using attribute syntax in an Angular component template.

LANGUAGE: angular-ts
CODE:
@Component({
  ...
  template: `<app-user occupation="Angular Developer"></app-user>`
})
class AppComponent {}

----------------------------------------

TITLE: Importing RouterTestingModule in Angular Tests
DESCRIPTION: Shows how to import and use the RouterTestingModule in Angular unit tests. This module provides a simulated router environment for testing components that depend on routing functionality.

LANGUAGE: TypeScript
CODE:
import { RouterTestingModule } from '@angular/router/testing';

describe('MyComponent', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [RouterTestingModule],
      declarations: [MyComponent]
    });
  });

  // ... test cases
});

----------------------------------------

TITLE: Running Custom Angular CLI Builder from Command Line
DESCRIPTION: These shell commands demonstrate how to run a custom Angular CLI builder using the ng run command, with and without overriding default options.

LANGUAGE: shell
CODE:
ng run builder-test:copy-package

ng run builder-test:copy-package --destination=package-other.json

----------------------------------------

TITLE: Testing Function-based HTTP Interceptor
DESCRIPTION: Configuration and testing setup for function-based HTTP interceptor.

LANGUAGE: typescript
CODE:
TestBed.configureTestingModule({
  providers: [
    AuthService,
    // Testing one interceptor at a time is recommended.
    provideHttpClient(withInterceptors([authInterceptor])),
    provideHttpClientTesting(),
  ],
});

----------------------------------------

TITLE: Importing HousingLocation Type in TypeScript
DESCRIPTION: Import statement for the HousingLocation type in the housing service file.

LANGUAGE: typescript
CODE:
import { HousingLocation } from './housinglocation';

----------------------------------------

TITLE: Custom Element Type Casting
DESCRIPTION: Example of TypeScript type casting for custom elements using NgElement and WithProperties

LANGUAGE: typescript
CODE:
const aDialog = document.createElement('my-dialog') as NgElement & WithProperties<{content: string}>;
aDialog.content = 'Hello, world!';
aDialog.content = 123;  // <-- ERROR: TypeScript knows this should be a string.
aDialog.body = 'News';  // <-- ERROR: TypeScript knows there is no `body` property on `aDialog`.

----------------------------------------

TITLE: Configuring Server Providers in Angular
DESCRIPTION: Implementation of server configuration using provideServerRouting and optional app shell configuration.

LANGUAGE: typescript
CODE:
import { provideServerRouting } from '@angular/ssr';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes),
    // ... other providers ...
  ]
};

----------------------------------------

TITLE: Loading Harnesses for Multiple Components
DESCRIPTION: Example of loading harnesses for multiple components in a unit test, including components outside the fixture's root element.

LANGUAGE: typescript
CODE:
let fixture: ComponentFixture<MyDialogButton>;
let loader: HarnessLoader;
let rootLoader: HarnessLoader;

beforeEach(() => {
  fixture = TestBed.createComponent(MyDialogButton);
  loader = TestbedHarnessEnvironment.loader(fixture);
  rootLoader = TestbedHarnessEnvironment.documentRootLoader(fixture);
});

it('loads harnesses', async () => {
  // Load a harness for the bootstrapped component with `harnessForFixture`
  dialogButtonHarness =
      await TestbedHarnessEnvironment.harnessForFixture(fixture, MyDialogButtonHarness);
  // The button element is inside the fixture's root element, so we use `loader`.
  const buttonHarness = await loader.getHarness(MyButtonHarness);
  // Click the button to open the dialog
  await buttonHarness.click();
  // The dialog is appended to `document.body`, outside of the fixture's root element,
  // so we use `rootLoader` in this case.
  const dialogHarness = await rootLoader.getHarness(MyDialogHarness);
  // ... make some assertions
});

----------------------------------------

TITLE: Binding Input Property in Angular Component Template
DESCRIPTION: This snippet illustrates how to bind an Input property in the template of an Angular component using interpolation.

LANGUAGE: angular-ts
CODE:
@Component({
  ...
  template: `<p>The user's occupation is {{occupation}}</p>`
})

----------------------------------------

TITLE: Importing Zone.js in Angular polyfills (v0.11.1+)
DESCRIPTION: Demonstrates the new way to import Zone.js in the Angular polyfills.ts file starting from version 0.11.1. This imports the ES2015 bundle in ESM format.

LANGUAGE: javascript
CODE:
import 'zone.js';

----------------------------------------

TITLE: Testing HTTP GET Request with Mock Response
DESCRIPTION: Example of testing a GET request using HttpTestingController, including request expectation and response mocking.

LANGUAGE: typescript
CODE:
TestBed.configureTestingModule({
  providers: [
    ConfigService,
    provideHttpClient(),
    provideHttpClientTesting(),
  ],
});

const httpTesting = TestBed.inject(HttpTestingController);

// Load `ConfigService` and request the current configuration.
const service = TestBed.inject(ConfigService);
const config$ = this.configService.getConfig<Config>();

// `firstValueFrom` subscribes to the `Observable`, which makes the HTTP request,
// and creates a `Promise` of the response.
const configPromise = firstValueFrom(config$);

// At this point, the request is pending, and we can assert it was made
// via the `HttpTestingController`:
const req = httpTesting.expectOne('/api/config', 'Request to load the configuration');

// We can assert various properties of the request if desired.
expect(req.request.method).toBe('GET');

// Flushing the request causes it to complete, delivering the result.
req.flush(DEFAULT_CONFIG);

// We can then assert that the response was successfully delivered by the `ConfigService`:
expect(await configPromise).toEqual(DEFAULT_CONFIG);

// Finally, we can assert that no other requests were made.
httpTesting.verify();

----------------------------------------

TITLE: Deploying Angular Application to Firebase
DESCRIPTION: This snippet demonstrates how to use the Angular CLI to automatically deploy an Angular project to Firebase hosting. It requires adding the @angular/fire package and then running the deploy command.

LANGUAGE: shell
CODE:
ng add @angular/fire
ng deploy

----------------------------------------

TITLE: Incorrect Angular NgModule Configuration: Empty bootstrap Array
DESCRIPTION: This example shows an NgModule configuration that will cause the bootstrapping error because the 'bootstrap' property in the @NgModule decorator contains an empty array.

LANGUAGE: typescript
CODE:
@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, AppRoutingModule],
  providers: [],
  bootstrap: [],
})
export class AppModule {}

// The `AppModule` is used for bootstrapping, but the `@NgModule.bootstrap` field contains an empty array.
platformBrowser().bootstrapModule(AppModule);

----------------------------------------

TITLE: Creating TextboxQuestion Class for Input Controls
DESCRIPTION: Defines a 'TextboxQuestion' class that extends 'QuestionBase' to represent text input controls in the dynamic form. It sets the control type to 'textbox' and allows specifying the input type (e.g., text, email, url).

LANGUAGE: TypeScript
CODE:
import { QuestionBase } from './question-base';

export class TextboxQuestion extends QuestionBase<string> {
  override type: string;

  constructor(options: {} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}


----------------------------------------

TITLE: Importing Router Modules in Angular Component
DESCRIPTION: Imports RouterLink and RouterOutlet from @angular/router for use in the housing-location component.

LANGUAGE: typescript
CODE:
import { RouterLink, RouterOutlet } from '@angular/router';

----------------------------------------

TITLE: Initializing Data from Service in TypeScript
DESCRIPTION: Code added to the HomeComponent to inject the new service and initialize the data for the app, assigning the housingLocationList the value returned from getAllHousingLocations.

LANGUAGE: typescript
CODE:
housingLocationList: HousingLocation[] = [];

constructor() {
  const housingService = inject(HousingService);
  this.housingLocationList = housingService.getAllHousingLocations();
}

----------------------------------------

TITLE: Error State Implementation
DESCRIPTION: Implementation of error state handling for failed deferred loading.

LANGUAGE: angular-html
CODE:
@defer {
  <large-component />
} @error {
  <p>Failed to load large component.</p>
}

----------------------------------------

TITLE: Defining Angular Component Template with i18n Support
DESCRIPTION: This HTML template defines the structure of the main Angular component with internationalization attributes for text translation.

LANGUAGE: HTML
CODE:
<h1 i18n="site header|An introduction header for this sample@@introductionHeader">
  Hello i18n!
</h1>

<ng-container i18n>I don't output any element</ng-container>

<br>

<img [src]="logo" i18n-title title="Angular logo" alt="Angular logo">
<br>
<button (click)="inc(1)">+</button> <button (click)="inc(-1)">-</button>
<span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>
({{minutes}})
<br><br>
<button (click)="male()">&#9794;</button> <button (click)="female()">&#9792;</button>
<button (click)="other()">&#9895;</button>
<span i18n>The author is {gender, select, male {male} female {female} other {other}}</span>
<br><br>
<span i18n>Updated: {minutes, plural,
  =0 {just now}
  =1 {one minute ago}
  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}
</span>

----------------------------------------

TITLE: Injecting Services in Angular Tests
DESCRIPTION: Demonstrates how to inject a service in a test using TestBed.inject() and use it in assertions.

LANGUAGE: typescript
CODE:
it('should use ValueService', () => {
  service = TestBed.inject(ValueService);
  expect(service.getValue()).toBe('real value');
});

----------------------------------------

TITLE: Injecting Component's DOM Element in Angular TypeScript
DESCRIPTION: This example shows how to inject and access a component's DOM element using ElementRef in a custom directive.

LANGUAGE: typescript
CODE:
import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appHighlight]'
})
export class HighlightDirective {
  constructor(private element: ElementRef) {}

  update() {
    this.element.nativeElement.style.color = 'red';
  }
}

----------------------------------------

TITLE: Adding Title to Angular Route Definition
DESCRIPTION: This snippet shows how to add a title property to a route definition in Angular. The title will be used to set the page title when navigating to this route.

LANGUAGE: typescript
CODE:
import {Routes} from '@angular/router';

import {HomeComponent} from './home/home.component';

export const routes: Routes = [
  {
    path: '',
    title: 'App Home Page',
    component: HomeComponent,
  },
];

----------------------------------------

TITLE: Implementing Bluebird Promise with Zone.js in Browser
DESCRIPTION: Configuration for using Bluebird Promises with Zone.js in a browser environment.

LANGUAGE: html
CODE:
<script src="zone.js"></script>
<script src="bluebird.js"></script>
<script src="zone-bluebird.js"></script>
<script>
  Zone[Zone['__symbol__']('bluebird')](Promise);
</script>

----------------------------------------

TITLE: Invalid ngSkipHydration Usage in Template
DESCRIPTION: Example showing incorrect usage of ngSkipHydration attribute directly in a template on a non-component host node.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app',
  template: `
    <div ngSkipHydration></div>
  `,
})
class SimpleComponent {
}

----------------------------------------

TITLE: Testing Template-Driven Forms - View to Model
DESCRIPTION: Test case showing how to verify data flow from view to model in template-driven forms using change detection.

LANGUAGE: typescript
CODE:
it('should update the value of the input field', fakeAsync(() => {
  const input = fixture.nativeElement.querySelector('input');
  const event = createNewEvent('input');

  input.value = 'Red';
  input.dispatchEvent(event);
  fixture.detectChanges();

  expect(component.favoriteColor).toEqual('Red');
}));

----------------------------------------

TITLE: Updating HousingLocationComponent Template with Interpolation in Angular
DESCRIPTION: This code snippet shows how to update the HousingLocationComponent template to include interpolated values and property binding. It demonstrates the use of {{ expression }} syntax for interpolation and [attr] syntax for property binding.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-housing-location',
  template: `
  <section class="listing">
    <img class="listing-photo" [src]="housingLocation.photo" alt="Exterior photo of {{housingLocation.name}}">
    <h2 class="listing-heading">{{ housingLocation.name }}</h2>
    <p class="listing-location">{{ housingLocation.city}}, {{housingLocation.state }}</p>
  </section>
  `,
  styleUrls: ['./housing-location.component.css']
})

----------------------------------------

TITLE: Rendering Template Fragment with NgTemplateOutlet in Angular
DESCRIPTION: Shows how to render a template fragment using NgTemplateOutlet directive in an Angular template.

LANGUAGE: html
CODE:
<p>This is a normal element</p>

<ng-template #myFragment>
  <p>This is a fragment</p>
</ng-template>

<ng-container *ngTemplateOutlet="myFragment"></ng-container>

----------------------------------------

TITLE: Configuring Styles and Scripts in Angular JSON
DESCRIPTION: Example of configuring external styles and scripts in the angular.json file, including options for bundling and injection.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "styles": [
              {
                "input": "src/external-module/styles.scss",
                "inject": false,
                "bundleName": "external-module"
              }
            ],
            "scripts": [
              {
                "input": "src/external-module/main.js",
                "inject": false,
                "bundleName": "external-module"
              }
            ]
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing RouterLink in Angular Template
DESCRIPTION: Demonstrates how to replace href attributes with routerLink directive in component template for client-side navigation.

LANGUAGE: angular-ts
CODE:
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
  ...
  template: `
    ...
    <a routerLink="/">Home</a>
    <a routerLink="/user">User</a>
    ...
  `,
  imports: [RouterLink, RouterOutlet],
})

----------------------------------------

TITLE: Using Deprecated InjectFlags in Angular TypeScript
DESCRIPTION: This snippet demonstrates the usage of deprecated InjectFlags symbol in an Angular directive. It shows how to inject ElementRef with optional, host, and skipSelf flags.

LANGUAGE: typescript
CODE:
import { inject, InjectFlags, Directive, ElementRef } from '@angular/core';

@Directive()
export class Dir {
  element = inject(ElementRef, InjectFlags.Optional | InjectFlags.Host | InjectFlags.SkipSelf);
}

----------------------------------------

TITLE: Importing NgStyle in Angular Component
DESCRIPTION: Shows how to import the NgStyle directive into an Angular component for use in templates.

LANGUAGE: TypeScript
CODE:
import { NgStyle } from '@angular/common';

----------------------------------------

TITLE: Correcting Uninitialized Variable Reference in Angular Component (TypeScript)
DESCRIPTION: This snippet shows how to fix the 'Only initialized variables and constants' error by initializing the variable used for the component's template property.

LANGUAGE: typescript
CODE:
// CORRECTED
export let someTemplate = '<h1>Greetings from Angular</h1>';

@Component({
  selector: 'my-component',
  template: someTemplate
})
export class MyComponent {}

----------------------------------------

TITLE: Using Host Directives in Angular Template
DESCRIPTION: Demonstrates how to use the inputs and outputs of host directives in an Angular template after they have been explicitly included in the component's API.

LANGUAGE: angular-html
CODE:
<admin-menu id="top-menu" (closed)="logMenuClosed()">

----------------------------------------

TITLE: Creating Animation Transitions in Angular
DESCRIPTION: This snippet demonstrates how to define transitions between states using the transition() function and animate() to specify timing.

LANGUAGE: typescript
CODE:
transition('open => closed', [
  animate('1s')
]),
transition('closed => open', [
  animate('0.5s')
])

----------------------------------------

TITLE: Implementing StarPipe in Angular
DESCRIPTION: Creates a basic custom pipe that adds star emojis around input text. The pipe demonstrates the basic structure of Angular pipes including the @Pipe decorator and transform method implementation.

LANGUAGE: typescript
CODE:
import {Pipe, PipeTransform} from '@angular/core';

@Pipe({
  name: 'star',
})
export class StarPipe implements PipeTransform {
  transform(value: string): string {
    return `⭐️ ${value} ⭐️`;
  }
}

----------------------------------------

TITLE: Injecting Services in Component Constructor and Field Initializer
DESCRIPTION: Demonstrates how to use the inject() function both in a component's constructor and as a field initializer. Shows that both locations have valid injection contexts.

LANGUAGE: typescript
CODE:
class MyComponent  {
  private service1: Service1;
  private service2: Service2 = inject(Service2); // In context

  constructor() {
    this.service1 = inject(Service1) // In context
  }
}

----------------------------------------

TITLE: Configuring Build Target in Angular JSON
DESCRIPTION: Example of configuring the build target in angular.json file, specifying the builder to use for the build process.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        // `ng build` invokes the Architect target named `build`.
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          …
        },
        "serve": { … }
        "test": { … }
        …
      }
    }
  }
}

----------------------------------------

TITLE: Nested Host Directives Execution Order in Angular
DESCRIPTION: Demonstrates the execution order of nested host directives, showing how constructors, lifecycle hooks, and bindings are applied in a hierarchical manner.

LANGUAGE: typescript
CODE:
@Directive({...})
export class Tooltip { }

@Directive({
  hostDirectives: [Tooltip],
})
export class CustomTooltip { }

@Directive({
  hostDirectives: [CustomTooltip],
})
export class EvenMoreCustomTooltip { }

----------------------------------------

TITLE: Importing FormsModule in Angular Component
DESCRIPTION: Shows how to import and configure FormsModule in an Angular component to enable form functionality.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {FormsModule} from '@angular/forms';

@Component({
  ...
  imports: [FormsModule],
})
export class UserComponent {}

----------------------------------------

TITLE: Input Type Transformations
DESCRIPTION: Demonstrates input type transformations and compatibility checks

LANGUAGE: typescript
CODE:
class TransformFunctions {
  readonly withExplicitTypeWorks = input.required<{
    ok: true;
}, string | undefined>({ transform: ((v: string | undefined) => '') as any });
}

----------------------------------------

TITLE: Resolving Component ID Collision Using Pseudo-selector
DESCRIPTION: Solution for resolving component ID collision by adding a pseudo-selector to one of the components. This approach modifies the component selector without affecting its functionality.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component:not(p)',
  template: 'empty-template',
})
class SomeMockedComponent {}

----------------------------------------

TITLE: Declaring Components in NgModule
DESCRIPTION: This example shows how to declare components within an NgModule using the declarations property. It also demonstrates declaring arrays of components.

LANGUAGE: typescript
CODE:
@NgModule({
  /* ... */
  // CustomMenu and CustomMenuItem are components.
  declarations: [CustomMenu, CustomMenuItem],
})
export class CustomMenuModule { }

LANGUAGE: typescript
CODE:
const MENU_COMPONENTS = [CustomMenu, CustomMenuItem];
const WIDGETS = [MENU_COMPONENTS, CustomSlider];

@NgModule({
  /* ... */
  // This NgModule declares all of CustomMenu, CustomMenuItem,
  // CustomSlider, and CustomCheckbox.
  declarations: [WIDGETS, CustomCheckbox],
})
export class CustomMenuModule { }

----------------------------------------

TITLE: Defining Reusable Animation in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to create a reusable animation using the animation() function in a separate TypeScript file. The animation is defined as a constant export variable named transitionAnimation.

LANGUAGE: typescript
CODE:
export const transitionAnimation = animation([
  style({
    height: '{{ height }}',
    opacity: '{{ opacity }}',
    backgroundColor: '{{ backgroundColor }}'
  }),
  animate('{{ time }}')
]);

----------------------------------------

TITLE: Application Component Tree Structure
DESCRIPTION: Visualizes the hierarchical relationship between components in an Angular application.

LANGUAGE: mermaid
CODE:
flowchart TD
    A[AccountSettings]-->B
    A-->C
    B[UserProfile]-->D
    B-->E
    C[PaymentInfo]
    D[ProfilePic]
    E[UserBio]

----------------------------------------

TITLE: Enabling Incremental Hydration in Angular
DESCRIPTION: This snippet demonstrates how to enable incremental hydration in an Angular application by adding the withIncrementalHydration() function to the provideClientHydration provider.

LANGUAGE: typescript
CODE:
import {
  bootstrapApplication,
  provideClientHydration,
  withIncrementalHydration,
} from '@angular/platform-browser';
...

bootstrapApplication(AppComponent, {
  providers: [provideClientHydration(withIncrementalHydration())]
});

----------------------------------------

TITLE: Decorative Header Component in Angular HTML
DESCRIPTION: This snippet demonstrates the usage of a custom 'docs-decorative-header' component in Angular HTML. It sets a title and image source as attributes.

LANGUAGE: html
CODE:
<docs-decorative-header title="Template syntax" imgSrc="adev/src/assets/images/templates.svg"> <!-- markdownlint-disable-line -->
In Angular, a template is a chunk of HTML.
Use special syntax within a template to leverage many of Angular's features.
</docs-decorative-header>

----------------------------------------

TITLE: Using Injected CarService in Angular Component Constructor
DESCRIPTION: This snippet demonstrates how to use the injected CarService instance in the constructor of an Angular component. It calls the getCars() method and joins the results with a star emoji.

LANGUAGE: typescript
CODE:
constructor() {
    this.display = this.carService.getCars().join(' ⭐️ ');
}

----------------------------------------

TITLE: Managing Transient Dependencies in Angular DI
DESCRIPTION: Demonstrates two approaches for handling transient dependencies: creating child injectors and using factory functions.

LANGUAGE: typescript
CODE:
var child = inj.resolveAndCreateChild([MyClass]);
child.get(MyClass);

var inj = Injector.resolveAndCreate([
  bind('MyClassFactory').toFactory(dep => () => new MyClass(dep), [SomeDependency])
]);

var factory = inj.get('MyClassFactory');
var instance1 = factory(), instance2 = factory();
// Depends on the implementation of MyClass, but generally holds.
expect(instance1).not.toBe(instance2);

----------------------------------------

TITLE: Angular Component with Styles
DESCRIPTION: Shows how to add component-specific CSS styles using the styles property in the Component decorator.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  template: `<img src="profile-photo.jpg" alt="Your profile photo">`,
  styles: `img { border-radius: 50%; }`,
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Implementing ng-add Schematic in TypeScript
DESCRIPTION: This code defines the factory function for the ng-add schematic, which adds the MyLibModule to the root of the application using the addRootImport function.

LANGUAGE: typescript
CODE:
import { Rule } from '@angular-devkit/schematics';
import { addRootImport } from '@schematics/angular/utility';
import { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';

export function ngAdd(): Rule {
  return (tree, context) => {
    context.addTask(new NodePackageInstallTask());
    return addRootImport(tree, {
      module: 'MyLibModule',
      importPath: 'my-lib',
      index: 0,
    });
  };
}

----------------------------------------

TITLE: Converting RxJS Observable to Angular Signal using toSignal
DESCRIPTION: Demonstrates how to create a signal from an RxJS Observable using toSignal function. The example shows a counter implementation that converts an interval Observable to a signal with an initial value of 0.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { interval } from 'rxjs';
import { toSignal } from '@angular/core/rxjs-interop';

@Component({
  template: `{{ counter() }}`,
})
export class Ticker {
  counterObservable = interval(1000);

  // Get a `Signal` representing the `counterObservable`'s value.
  counter = toSignal(this.counterObservable, {initialValue: 0});
}

----------------------------------------

TITLE: Removing Nullish Coalescing for Non-Nullable Type in Angular
DESCRIPTION: This snippet demonstrates how to correct the usage by removing the nullish coalescing operator when the input is guaranteed to be non-nullable. The template simply displays the username without a fallback.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  // Template always displays `username`, which is guaranteed to never be `null`
  // or `undefined`.
  template: `<div>{{ username }}</div>`,
})
class MyComponent {
  username: string = 'Angelino';
}

----------------------------------------

TITLE: Implementing Function-based HTTP Interceptor
DESCRIPTION: Example of implementing and testing a function-based HTTP interceptor for authentication.

LANGUAGE: typescript
CODE:
export function authInterceptor(request: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {
  const authService = inject(AuthService);

  const clonedRequest = request.clone({
    headers: request.headers.append('X-Authentication-Token', authService.getAuthToken()),
  });
  return next(clonedRequest);
}

----------------------------------------

TITLE: Configuring Custom Elements Schema in Angular Component
DESCRIPTION: Demonstrates how to configure an Angular component to accept unknown HTML elements by including CUSTOM_ELEMENTS_SCHEMA in the component metadata. This allows the use of custom elements without throwing validation errors.

LANGUAGE: typescript
CODE:
import {Component, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';

@Component({
  ...,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  template: '<some-unknown-component></some-unknown-component>'
})
export class ComponentWithCustomElements { }

----------------------------------------

TITLE: Configuring Node.js Server for Angular SSR
DESCRIPTION: Implementation of server-side rendering setup specifically for Node.js environments using Express.

LANGUAGE: typescript
CODE:
import { AngularNodeAppEngine, createNodeRequestHandler, writeResponseToNodeResponse } from '@angular/ssr/node';
import express from 'express';

const app = express();
const angularApp = new AngularNodeAppEngine();

app.use('*', (req, res, next) => {
  angularApp
    .handle(req)
    .then(response => {
      if (response) {
        writeResponseToNodeResponse(response, res);
      } else {
        next();
      }
    })
    .catch(next);
});

export const reqHandler = createNodeRequestHandler(app);

----------------------------------------

TITLE: EXPANDO Section with Dependency Injection
DESCRIPTION: Shows how the EXPANDO section handles dependency injection, including providers and viewProviders. It demonstrates the layout for storing injection tokens and factories.

LANGUAGE: typescript
CODE:
@Component({
  template: `<child></child>`
})
class MyApp {

  static ɵcmp = ɵɵdefineComponent({
    ...,
    decls: 1,
    template: function(rf: RenderFlags, ctx: MyApp) {
      if (rf & RenderFlags.Create) {
        ɵɵelement(0, 'child');
      }
      ...
    },
    directives: [Child]
  });
}


@Component({
  selector: 'child',
  providers: [
    ServiceA,
    {provide: ServiceB, useValue: 'someServiceBValue'},
  ],
  viewProviders: [
    {provide: ServiceC, useFactory: () => new ServiceC)}
    {provide: ServiceD, useClass: ServiceE},
  ]
  ...
})
class Child {
  construction(injector: Injector) {}
  static ɵcmp = ɵɵdefineComponent({
    ...
    features: [
      ProvidesFeature(
        [
          ServiceA,
          {provide: ServiceB, useValue: 'someServiceBValue'},
        ],[
          {provide: ServiceC, useFactory: () => new ServiceC())}
          {provide: ServiceD, useClass: ServiceE},
        ]
      )
    ]
  });
  ...
}

----------------------------------------

TITLE: Combining Regular and Hydrate Triggers in Angular Template
DESCRIPTION: This snippet shows how to combine regular triggers with hydrate triggers in a @defer block, demonstrating different behavior for initial load and subsequent client-side renders.

LANGUAGE: angular-html
CODE:
@defer (on idle; hydrate on interaction) {
  <example-cmp />
} @placeholder{
  <div>Example Placeholder</div>
}

----------------------------------------

TITLE: Generating Angular Material Table Component
DESCRIPTION: Command to generate a pre-configured Angular Material table component with sorting and pagination functionality.

LANGUAGE: shell
CODE:
ng generate @angular/material:table <component-name>

----------------------------------------

TITLE: Using DestroyRef for Component Destruction in Angular TypeScript
DESCRIPTION: Shows how to use DestroyRef to register a callback that runs when a component is destroyed, as an alternative to ngOnDestroy.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */
})
export class UserProfile {
  constructor(private destroyRef: DestroyRef) {
    destroyRef.onDestroy(() => {
      console.log('UserProfile destruction');
    });
  }
}

----------------------------------------

TITLE: Incorrect NgFor Implementation - Missing let Keyword
DESCRIPTION: Example showing incorrect *ngFor syntax where the let keyword is missing, causing a template syntax error and scope resolution issues.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  // The `let` keyword is missing in the `*ngFor` expression.
  template: `<div *ngFor="item of items">{{ item }}</div>`,
})
class MyComponent {
  items = [1, 2, 3];
}

----------------------------------------

TITLE: Configuring Injector Visibility in Angular
DESCRIPTION: Demonstrates how to configure provider visibility (public, private, or both) in parent and child injectors.

LANGUAGE: typescript
CODE:
class Car {
  constructor(@Host() e: Engine) {}
}

var parentProto = new ProtoInjector([
  new BindingWithVisibility(Engine, Visibility.Public),
  new BindingWithVisibility(Car, Visibility.Public)
]);
var parent = new Injector(parentProto);

var hostChildProto = new ProtoInjector([new BindingWithVisibility(Car, Visibility.Public)]);
var hostChild = new Injector(hostChildProto, parent, true);

var regularChildProto = new ProtoInjector([new BindingWithVisibility(Car, Visibility.Public)]);
var regularChild = new Injector(regularChildProto, parent, false);

hostChild.get(Car); // will throw because public dependencies declared at the host cannot be seen by child injectors
parent.get(Car); // this works
regularChild.get(Car); // this works

----------------------------------------

TITLE: Correct Usage of Angular Attribute Bindings
DESCRIPTION: This snippet shows the correct way to use Angular's special attribute bindings for 'attr.', 'style.', and 'class.' prefixes using the template binding syntax with square brackets.

LANGUAGE: html
CODE:
<div [attr.id]="my-id"></div>
<div [style.color]="red"></div>
<div [class.large]="true"></div>

----------------------------------------

TITLE: Installing JSON Server via NPM
DESCRIPTION: Command to globally install json-server package using npm for creating mock REST APIs

LANGUAGE: bash
CODE:
npm install -g json-server

----------------------------------------

TITLE: Advanced Interpolation in Angular Templates
DESCRIPTION: This snippet shows how to use multiple interpolations in an Angular template, including a simple arithmetic expression, demonstrating that Angular evaluates the contents within {{ }}.

LANGUAGE: typescript
CODE:
template: `Hello {{ city }}, {{ 1 + 1 }}`,


----------------------------------------

TITLE: Rendering Dynamic Components with ng-container in Angular
DESCRIPTION: Shows how to use NgComponentOutlet directive with <ng-container> to dynamically render components based on a condition.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <h2>Your profile</h2>
    <ng-container [ngComponentOutlet]="profileComponent()" />
  `
})
export class UserProfile {
  isAdmin = input(false);
  profileComponent = computed(() => this.isAdmin() ? AdminProfile : BasicUserProfile);
}

----------------------------------------

TITLE: Built-in Input Transformations
DESCRIPTION: Shows usage of Angular's built-in transform functions for boolean and number attributes.

LANGUAGE: typescript
CODE:
import {Component, input, booleanAttribute, numberAttribute} from '@angular/core';

@Component({/*...*/})
export class CustomSlider {
  disabled = input(false, {transform: booleanAttribute}); 
  value = input(0, {transform: numberAttribute}); 
}

----------------------------------------

TITLE: Incorrect Optional Chain Usage in Angular Component
DESCRIPTION: Example showing incorrect usage of optional chain operator where the input type is non-nullable.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  // Print the user's name safely, even if `user` is `null` or `undefined`.
  template: `<div>User name: {{ user?.name }}</div>`,
})
class MyComponent {
  // `user` is declared as an object which *cannot* be `null` or `undefined`.
  user: { name: string } = { name: 'Angelino' };
}

----------------------------------------

TITLE: Referencing ts.Program in TypeScript
DESCRIPTION: This snippet demonstrates how ts.Program is referenced in TypeScript. It's the core object that represents the TypeScript program and is manipulated through the ProgramDriver interface.

LANGUAGE: typescript
CODE:
`ts.Program`

----------------------------------------

TITLE: Verifying No Outstanding Requests in afterEach
DESCRIPTION: Setup to verify no pending HTTP requests after each test using afterEach hook.

LANGUAGE: typescript
CODE:
afterEach(() => {
  // Verify that none of the tests make any extra HTTP requests.
  TestBed.inject(HttpTestingController).verify();
});

----------------------------------------

TITLE: Defining ComponentFixture Class in Angular Testing
DESCRIPTION: This snippet defines the ComponentFixture class used for component testing in Angular. It provides methods for change detection, accessing component instances, and handling deferred blocks.

LANGUAGE: typescript
CODE:
export class ComponentFixture<T> {
    constructor(componentRef: ComponentRef<T>);
    autoDetectChanges(autoDetect?: boolean): void;
    changeDetectorRef: ChangeDetectorRef;
    checkNoChanges(): void;
    componentInstance: T;
    componentRef: ComponentRef<T>;
    debugElement: DebugElement;
    destroy(): void;
    detectChanges(checkNoChanges?: boolean): void;
    elementRef: ElementRef;
    getDeferBlocks(): Promise<DeferBlockFixture[]>;
    isStable(): boolean;
    nativeElement: any;
    ngZone: NgZone | null;
    whenRenderingDone(): Promise<any>;
    whenStable(): Promise<any>;
}

----------------------------------------

TITLE: Throttling XHR Requests with Long Stack Trace in Angular
DESCRIPTION: This example demonstrates how to use long-stack-trace-zone to display the full flow of complex async operations, specifically throttling XHR requests. It includes a link to a StackBlitz demo for a detailed implementation.

LANGUAGE: javascript
CODE:
use `long-stack-trace-zone` to display full flow of complex async operations such as throttle XHR requests.

----------------------------------------

TITLE: Using Router Outlet in Angular Template
DESCRIPTION: Demonstrates how to use the RouterOutlet directive in an Angular template to mark where routed components should be displayed.

LANGUAGE: html
CODE:
<router-outlet></router-outlet>
<!-- Routed components go here -->

----------------------------------------

TITLE: Injector Implementation in Angular
DESCRIPTION: Shows how the Injector is implemented to be tree-shakable and recognized by the Ivy renderer.

LANGUAGE: typescript
CODE:
@Injectable({
  provideIn: '__node_injector__' as any // Special token not available to the developer
})
class Injector {
  ...
}

----------------------------------------

TITLE: Formatting Currency with Locale Override in Angular
DESCRIPTION: Demonstrates how to use CurrencyPipe with a specific locale override (en-US) to format currency values, overriding the global LOCALE_ID token.

LANGUAGE: typescript
CODE:
{{ amount | currency : 'en-US' }}

----------------------------------------

TITLE: Implementing Angular Component Logic for i18n Example
DESCRIPTION: This TypeScript file defines the component logic for the internationalization example, including methods for updating time and gender selection.

LANGUAGE: TypeScript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  minutes = 0;
  gender = 'female';
  fly = true;
  logo = 'https://angular.io/assets/images/logos/angular/angular.png';

  inc(i: number) {
    this.minutes = Math.min(5, Math.max(0, this.minutes + i));
  }

  male() { this.gender = 'male'; }
  female() { this.gender = 'female'; }
  other() { this.gender = 'other'; }
}

----------------------------------------

TITLE: Detecting Unused Imports in Angular Component Decorator
DESCRIPTION: This snippet demonstrates an Angular component decorator with unused imports in the 'imports' array. The 'UnusedPipe' is imported but not used in the component's template.

LANGUAGE: typescript
CODE:
@Component({
  imports: [UsedDirective, UnusedPipe]
})
class AwesomeCheckbox {}

----------------------------------------

TITLE: Configuring Performance Tracing in Angular's tsconfig.json
DESCRIPTION: Demonstrates how to enable performance tracing in an Angular project by adding the 'tracePerformance' option to the 'angularCompilerOptions' in tsconfig.json. The option value is a string path for the output trace file.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "tracePerformance": "path/to/trace/output.json"
  }
}

----------------------------------------

TITLE: Running Lazy Loading Migration Command
DESCRIPTION: Basic command to run the route lazy-loading migration schematic across the entire application.

LANGUAGE: shell
CODE:
ng generate @angular/core:route-lazy-loading

----------------------------------------

TITLE: Styling DetailsComponent in Angular
DESCRIPTION: Adds CSS styles to the DetailsComponent for improved presentation of housing location details.

LANGUAGE: css
CODE:
.listing-photo {
  height: 600px;
  width: 50%;
  object-fit: cover;
  border-radius: 30px;
  float: right;
}

.listing-heading {
  font-size: 48pt;
  font-weight: bold;
  margin-bottom: 15px;
}

.listing-location::before {
  content: url('/assets/location-pin.svg') / '';
}

.listing-location {
  font-size: 24pt;
  margin-bottom: 15px;
}

.listing-features > .section-heading {
  color: var(--secondary-color);
  font-size: 24pt;
  margin-bottom: 15px;
}

.listing-features {
  margin-bottom: 20px;
}

li {
  font-size: 14pt;
}

li::before {
  content: '\2022';
  color: var(--secondary-color);
  display: inline-block;
  width: 1em;
  margin-left: -1em;
}

@media (max-width: 1024px) {
  .listing-photo {
    width: 100%;
    height: 400px;
  }
}

----------------------------------------

TITLE: Using Decorator-based Content Queries in Angular
DESCRIPTION: Shows how to use the @ContentChild and @ContentChildren decorators for content queries.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'custom-expando',
  /*...*/
})
export class CustomExpando {
  @ContentChild(CustomToggle) toggle: CustomToggle;

  ngAfterContentInit() {
    console.log(this.toggle.text);
  }
}

----------------------------------------

TITLE: By Class Usage Example
DESCRIPTION: Shows how to use Angular's By class for creating element predicates in component testing, including CSS selector and directive matching.

LANGUAGE: typescript
CODE:
const heroEl = fixture.debugElement.query(By.css('.hero'));
const h2El = fixture.debugElement.query(By.css('h2'));
const allEls = fixture.debugElement.queryAll(By.all);

----------------------------------------

TITLE: Handling Host Element Binding Collisions in Angular
DESCRIPTION: Demonstrates how to handle binding collisions between component host bindings and instance bindings.

LANGUAGE: typescript
CODE:
@Component({
  ...,
  host: {
    'role': 'presentation',
    '[id]': 'id',
  }
})
export class ProfilePhoto { /* ... */ }

LANGUAGE: html
CODE:
<profile-photo role="group" [id]="otherId" />

----------------------------------------

TITLE: Equality Semantics Example in TypeScript
DESCRIPTION: Demonstrates how equality checks are applied to computed values to prevent unnecessary re-executions of dependent effects.

LANGUAGE: typescript
CODE:
const counter = signal(0);
const isEven = computed(() => counter() % 2 === 0);
effect(() => console.log(isEven() ? 'even!' : 'odd!'));

----------------------------------------

TITLE: JsDoc Documentation Examples in TypeScript
DESCRIPTION: Examples showing proper JsDoc documentation for properties, methods, and boolean values in Angular code.

LANGUAGE: typescript
CODE:
/** The label position relative to the checkbox. Defaults to 'after' */
@Input() labelPosition: 'before' | 'after' = 'after';

LANGUAGE: typescript
CODE:
/**
 * Opens a modal dialog containing the given component.
 * @param component Type of the component to load into the dialog.
 * @param config Dialog configuration options.
 * @returns Reference to the newly-opened dialog.
 */
open<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> { ... }

LANGUAGE: typescript
CODE:
/** Whether the button is disabled. */
disabled: boolean = false;

----------------------------------------

TITLE: Directive Type Check Example
DESCRIPTION: Shows how directives and their inputs are type checked using null assertion and type inference

LANGUAGE: typescript
CODE:
function tcb(this: SomeCmp): void {
  var _t1: OtherCmp = null!;
  _t1.foo = this.bar;
}

----------------------------------------

TITLE: Testing HTTP Error Responses
DESCRIPTION: Examples of testing backend errors and network errors in HTTP requests.

LANGUAGE: typescript
CODE:
const req = httpTesting.expectOne('/api/config');
req.flush('Failed!', {status: 500, statusText: 'Internal Server Error'});

// Assert that the application successfully handled the backend error.

----------------------------------------

TITLE: Defining Angular Animation Modules and Providers in TypeScript
DESCRIPTION: This code snippet defines the main exports for the @angular/platform-browser_animations package. It includes modules for browser animations and no-op animations, as well as provider functions and configuration interfaces.

LANGUAGE: typescript
CODE:
import { ANIMATION_MODULE_TYPE } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/platform-browser';
import { ModuleWithProviders } from '@angular/core';
import { Provider } from '@angular/core';

export { ANIMATION_MODULE_TYPE }

// @public
export class BrowserAnimationsModule {
    static withConfig(config: BrowserAnimationsModuleConfig): ModuleWithProviders<BrowserAnimationsModule>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<BrowserAnimationsModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<BrowserAnimationsModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserAnimationsModule, never, never, [typeof i1.BrowserModule]>;
}

// @public
export interface BrowserAnimationsModuleConfig {
    disableAnimations?: boolean;
}

// @public
export class NoopAnimationsModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<NoopAnimationsModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<NoopAnimationsModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<NoopAnimationsModule, never, never, [typeof i1.BrowserModule]>;
}

// @public
export function provideAnimations(): Provider[];

// @public
export function provideNoopAnimations(): Provider[];

----------------------------------------

TITLE: Implementing Bluebird with Zone.js in Node.js
DESCRIPTION: Example of using Bluebird Promises with Zone.js in a Node.js environment.

LANGUAGE: typescript
CODE:
require('zone.js');
const Bluebird = require('bluebird');
require('zone.js/plugins/zone-bluebird');

const bluebirdSymbol = Zone.__symbol__('bluebird');
const patchBluebirdFn = (Zone as any)[bluebirdSymbol];
patchBluebirdFn(Bluebird);

Zone.current
  .fork({
    name: 'bluebird',
  })
  .run(() => {
    Bluebird.resolve(1).then((result) => {
      console.log('result ', result, 'Zone', Zone.current.name);
    });
  });

----------------------------------------

TITLE: Basic Constructor Injection to Inject Function Migration
DESCRIPTION: Example showing the conversion from constructor-based dependency injection to using the inject function with decorators.

LANGUAGE: typescript
CODE:
import { Component, Inject, Optional } from '@angular/core';
import { MyService } from './service';
import { DI_TOKEN } from './token';

@Component()
export class MyComp {
  constructor(
    private service: MyService,
    @Inject(DI_TOKEN) @Optional() readonly token: string) {}
}

LANGUAGE: typescript
CODE:
import { Component, inject } from '@angular/core';
import { MyService } from './service';
import { DI_TOKEN } from './token';

@Component()
export class MyComp {
  private service = inject(MyService);
  readonly token = inject(DI_TOKEN, { optional: true });
}

----------------------------------------

TITLE: Housing Location Interface Definition
DESCRIPTION: TypeScript interface definition for housing location data structure with properties for id, name, location details, and other housing-related information

LANGUAGE: typescript
CODE:
export interface HousingLocation {
  id: number;
  name: string;
  city: string;
  state: string;
  photo: string;
  availableUnits: number;
  wifi: boolean;
  laundry: boolean;
}

----------------------------------------

TITLE: View Encapsulation Configuration in Angular
DESCRIPTION: Demonstrates how to configure view encapsulation mode for an Angular component using ViewEncapsulation enum in the @Component decorator.

LANGUAGE: angular-ts
CODE:
@Component({
  ...,
  encapsulation: ViewEncapsulation.None,
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Generating Angular Component
DESCRIPTION: Uses Angular CLI to generate a new component for routing.

LANGUAGE: shell
CODE:
ng generate component first

LANGUAGE: shell
CODE:
ng generate component second

----------------------------------------

TITLE: Implementing AsyncPipe with Observable in Angular Component
DESCRIPTION: Example showing how to use AsyncPipe to automatically subscribe to and display Observable data in an Angular component. The component demonstrates handling message streams with proper subscription management.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { Observable, interval } from 'rxjs';
import { map, take } from 'rxjs/operators';

@Component({
  selector: 'app-hero-message',
  template: `
    <h2>Async Hero Message and AsyncPipe</h2>
    <p>Message: {{ message$ | async }}</p>
    <button type="button" (click)="resend()">Resend</button>
  `,
})
export class HeroAsyncMessageComponent {
  message$: Observable<string>;

  private messages = [
    'You are my hero!',
    'You are the best hero!',
    'Will you be my hero?',
  ];

  constructor() {
    this.resend();
  }

  resend() {
    this.message$ = interval(500).pipe(
      map((i) => this.messages[i]),
      take(this.messages.length)
    );
  }
}

----------------------------------------

TITLE: Converting Angular Components to Standalone - Initial State
DESCRIPTION: Example showing the initial state of components, directives, and pipes before conversion to standalone. Includes an NgModule with declarations and component implementations.

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [CommonModule],
  declarations: [MyComp, MyDir, MyPipe]
})
export class AppModule {}

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-comp',
  template: '<div my-dir *ngIf="showGreeting">{{ "Hello" | myPipe }}</div>',
  standalone: false,
})
export class MyComp {
  public showGreeting = true;
}

LANGUAGE: typescript
CODE:
@Directive({selector: '[my-dir]', standalone: false})
export class MyDir {}

LANGUAGE: typescript
CODE:
@Pipe({name: 'myPipe', pure: true, standalone: false})
export class MyPipe {}

----------------------------------------

TITLE: Configuring Trusted Types Nonce in Angular Bootstrap
DESCRIPTION: Demonstrates how to provide a Content Security Policy nonce for Trusted Types when bootstrapping an Angular application.

LANGUAGE: typescript
CODE:
import {bootstrapApplication, CSP_NONCE} from '@angular/core';
import {AppComponent} from './app/app.component';

bootstrapApplication(AppComponent, {
  providers: [{
    provide: CSP_NONCE,
    useValue: globalThis.myRandomNonceValue
  }]
});

----------------------------------------

TITLE: Class and Function Naming Conventions in TypeScript
DESCRIPTION: Examples illustrating proper naming conventions for classes and functions in Angular code.

LANGUAGE: typescript
CODE:
/** NO: */
class DefaultRouteReuseStrategy { }

/** YES: */
class NonStoringRouteReuseStrategy { }

LANGUAGE: typescript
CODE:
/** AVOID: does not describe what the function does. */
handleClick() {
  // ...
}

/** PREFER: describes the action performed by the function. */
activateRipple() {
  // ...
}

----------------------------------------

TITLE: Defining Event Phase Constants in TypeScript
DESCRIPTION: Exports an object with a constant for the REPLAY event phase. This is likely used in event handling to identify replayed events.

LANGUAGE: typescript
CODE:
// @public
export const EventPhase: {
    REPLAY: number;
};

----------------------------------------

TITLE: Angular Component Before Cleanup
DESCRIPTION: Example of an Angular component with unused imports before running the cleanup schematic. Shows a component importing an unused directive.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { UnusedDirective } from './unused';

@Component({
  template: 'Hello',
  imports: [UnusedDirective],
})
export class MyComp {}

----------------------------------------

TITLE: Styling HomeComponent
DESCRIPTION: CSS styles for the HomeComponent including form layout and button styling

LANGUAGE: css
CODE:
.results {
  display: grid;
  column-gap: 14px;
  row-gap: 14px;
  grid-template-columns: repeat(auto-fill, minmax(400px, 400px));
  margin-top: 50px;
  justify-content: space-around;
}

input[type="text"] {
  border: solid 1px var(--primary-color);
  padding: 10px;
  border-radius: 8px;
  margin-right: 4px;
  display: inline-block;
  width: 30%;
}

button {
  padding: 10px;
  border: solid 1px var(--primary-color);
  background: var(--primary-color);
  color: white;
  border-radius: 8px;
}

@media (min-width: 500px) and (max-width: 768px) {
  .results {
      grid-template-columns: repeat(2, 1fr);
  }
  input[type="text"] {
      width: 70%;
  }
}

@media (max-width: 499px) {
  .results {
      grid-template-columns: 1fr;
  }
}

----------------------------------------

TITLE: Configuring Apache for Multi-Locale Angular Deployment
DESCRIPTION: This Apache configuration example shows how to set up URL rewriting for different locales. It includes redirection based on the Accept-Language header and fallback to a default language.

LANGUAGE: apache
CODE:
<VirtualHost *:80>
    ServerName example.com
    DocumentRoot /var/www/example.com

    RewriteEngine on

    # Redirect user to their preferred language
    RewriteCond %{HTTP:Accept-Language} ^fr [NC]
    RewriteRule ^/$ /fr/ [R]

    RewriteCond %{HTTP:Accept-Language} ^es [NC]
    RewriteRule ^/$ /es/ [R]

    # If no preferred language is set or available,
    # default to English
    RewriteRule ^/$ /en/ [R]

    RewriteRule ^/(fr|es|en)/(.*) /$1/$2 [L]
    RewriteRule ^/(fr|es|en)$ /$1/ [R]

    # Everything else falls through to index.html
    RewriteCond %{REQUEST_FILENAME} -f [OR]
    RewriteCond %{REQUEST_FILENAME} -d
    RewriteRule ^ - [L]

    RewriteRule ^ /en/index.html [L]
</VirtualHost>

----------------------------------------

TITLE: Input Coercion Breaking Change
DESCRIPTION: Input coercion has changed to handle primitives more strictly. For example, [email] input value will only be considered true if explicitly set to a value rather than false or 'false'.

LANGUAGE: typescript
CODE:
// Before
@Input() email: boolean; // Would evaluate empty string as true

// After
@Input() email: boolean; // Only explicit true value is true

----------------------------------------

TITLE: Creating and Serving a New Angular Project
DESCRIPTION: Sequence of commands to create a new Angular project, navigate to its directory, and serve it locally on a development server.

LANGUAGE: shell
CODE:
ng new my-first-project
cd my-first-project
ng serve

----------------------------------------

TITLE: Defining Commit Message Structure in Markdown
DESCRIPTION: This snippet demonstrates the basic structure of a commit message, including header, body, and footer. It uses a code block to clearly illustrate the format.

LANGUAGE: markdown
CODE:
```
<header>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
```

----------------------------------------

TITLE: Clearing App-Scoped Early Event Contract in TypeScript
DESCRIPTION: Exports a function to remove an early event contract for a specific app ID. It optionally takes a data container parameter.

LANGUAGE: typescript
CODE:
// @public
export function clearAppScopedEarlyEventContract(appId: string, dataContainer?: EarlyJsactionDataContainer): void;

----------------------------------------

TITLE: Cloning and Modifying HTTP Requests in Angular
DESCRIPTION: Example of immutably modifying an HTTP request by cloning it and adding a new header.

LANGUAGE: typescript
CODE:
const reqWithHeader = req.clone({
  headers: req.headers.set('X-New-Header', 'new header value'),
});

----------------------------------------

TITLE: Defining Public API for @angular/localize in TypeScript
DESCRIPTION: This code snippet defines the public API for the @angular/localize package. It includes functions for clearing and loading translations, type definitions for message IDs and target messages, and interfaces for localization and translation functions.

LANGUAGE: typescript
CODE:
// @public
export function clearTranslations(): void;

// @public
export function loadTranslations(translations: Record<MessageId, TargetMessage>): void;

// @public
export type MessageId = string;

// @public
export type TargetMessage = string;

// @public
export const ɵ$localize: ɵLocalizeFn;

// @public (undocumented)
export interface ɵLocalizeFn {
    // (undocumented)
    (messageParts: TemplateStringsArray, ...expressions: readonly any[]): string;
    locale?: string;
    translate?: ɵTranslateFn;
}

// @public (undocumented)
export interface ɵTranslateFn {
    // (undocumented)
    (messageParts: TemplateStringsArray, expressions: readonly any[]): [TemplateStringsArray, readonly any[]];
}

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Referencing NgCompiler in TypeScript
DESCRIPTION: This snippet demonstrates the reference to NgCompiler, which exposes the latest template type-checking program through its getCurrentProgram() method.

LANGUAGE: typescript
CODE:
`NgCompiler`

----------------------------------------

TITLE: Lazy-Loading Components with NgComponentOutlet in Angular
DESCRIPTION: This example demonstrates how to lazy-load and render an AdvancedSettings component using NgComponentOutlet and dynamic import.

LANGUAGE: typescript
CODE:
@Component({
  ...,
  template: `
    <section>
      <h2>Basic settings</h2>
      <basic-settings />
    </section>
    <section>
      <h2>Advanced settings</h2>
      <button (click)="loadAdvanced()" *ngIf="!advancedSettings">
        Load advanced settings
      </button>
      <ng-container *ngComponentOutlet="advancedSettings" />
    </section>
  `
})
export class AdminSettings {
  advancedSettings: {new(): AdvancedSettings} | undefined;

  async loadAdvanced() {
    const { AdvancedSettings } = await import('path/to/advanced_settings.js');
    this.advancedSettings = AdvancedSettings;
  }
}

----------------------------------------

TITLE: Running Angular CLI Build Commands
DESCRIPTION: Examples of using the Angular CLI to build applications with different configurations

LANGUAGE: shell
CODE:
ng build --configuration debug

LANGUAGE: shell
CODE:
ng build --configuration debug,production,customer-facing

LANGUAGE: shell
CODE:
ng generate environments

LANGUAGE: shell
CODE:
ng build --configuration staging

----------------------------------------

TITLE: Fetching Non-JSON Data with HttpClient in Angular
DESCRIPTION: Shows how to use HttpClient to download raw bytes of a JPEG image into an ArrayBuffer. This example demonstrates setting the responseType option to specify the expected response format.

LANGUAGE: typescript
CODE:
http.get('/images/dog.jpg', {responseType: 'arraybuffer'}).subscribe(buffer => {
  console.log('The image is ' + buffer.byteLength + ' bytes large');
});

----------------------------------------

TITLE: Using Setup Function in Angular Tests
DESCRIPTION: Shows how to use the setup function in a test case, demonstrating the alternative testing style without beforeEach.

LANGUAGE: typescript
CODE:
it('#getValue should return stubbed value from a spy', () => {
  const { masterService, stubValue, valueServiceSpy } = setup();
  expect(masterService.getValue())
    .withContext('service returned stub value')
    .toBe(stubValue);
  expect(valueServiceSpy.getValue.calls.count())
    .withContext('spy method was called once')
    .toBe(1);
  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)
    .toBe(stubValue);
});

----------------------------------------

TITLE: Bootstrapping an Angular Application with NgModule
DESCRIPTION: This example demonstrates how to bootstrap an Angular application using an NgModule and the platformBrowser's bootstrapModule method.

LANGUAGE: typescript
CODE:
import {platformBrowser} from '@angular/platform-browser';

@NgModule({
  bootstrap: [MyApplication],
})
export class MyApplicationModule { }

platformBrowser().bootstrapModule(MyApplicationModule);

----------------------------------------

TITLE: Example Code Reference Format
DESCRIPTION: Examples of correct and incorrect code reference formatting in documentation.

LANGUAGE: markdown
CODE:
❌ Bad: "List all of your `@Injectable`s in the constructor."
✅ Good: "List all your `@Injectable` dependencies in the constructor"

----------------------------------------

TITLE: Defining Service Worker Configuration Interfaces in TypeScript
DESCRIPTION: TypeScript interfaces and types that define the configuration schema for Angular's service worker. Includes definitions for asset groups, data groups, caching configurations, and filesystem operations.

LANGUAGE: typescript
CODE:
// @public
export interface AssetGroup {
    // (undocumented)
    cacheQueryOptions?: Pick<CacheQueryOptions, 'ignoreSearch'>;
    // (undocumented)
    installMode?: 'prefetch' | 'lazy';
    // (undocumented)
    name: string;
    // (undocumented)
    resources: {
        files?: Glob[];
        urls?: Glob[];
    };
    // (undocumented)
    updateMode?: 'prefetch' | 'lazy';
}

// @public
export interface Config {
    // (undocumented)
    appData?: {};
    // (undocumented)
    applicationMaxAge?: Duration;
    // (undocumented)
    assetGroups?: AssetGroup[];
    // (undocumented)
    dataGroups?: DataGroup[];
    // (undocumented)
    index: string;
    // (undocumented)
    navigationRequestStrategy?: 'freshness' | 'performance';
    // (undocumented)
    navigationUrls?: string[];
}

// @public
export interface DataGroup {
    // (undocumented)
    cacheConfig: {
        maxSize: number;
        maxAge: Duration;
        timeout?: Duration;
        refreshAhead?: Duration;
        strategy?: 'freshness' | 'performance';
        cacheOpaqueResponses?: boolean;
    };
    // (undocumented)
    cacheQueryOptions?: Pick<CacheQueryOptions, 'ignoreSearch'>;
    // (undocumented)
    name: string;
    // (undocumented)
    urls: Glob[];
    // (undocumented)
    version?: number;
}

// @public (undocumented)
export type Duration = string;

// @public
export interface Filesystem {
    // (undocumented)
    hash(file: string): Promise<string>;
    // (undocumented)
    list(dir: string): Promise<string[]>;
    // (undocumented)
    read(file: string): Promise<string>;
    // (undocumented)
    write(file: string, contents: string): Promise<void>;
}

// @public
class Generator_2 {
    constructor(fs: Filesystem, baseHref: string);
    // (undocumented)
    readonly fs: Filesystem;
    // (undocumented)
    process(config: Config): Promise<Object>;
}
export { Generator_2 as Generator }

// @public (undocumented)
export type Glob = string;

----------------------------------------

TITLE: Standalone Bootstrapping - After Migration
DESCRIPTION: Example showing application bootstrap code after conversion to standalone

LANGUAGE: typescript
CODE:
// ./app/app.component.ts
@Component({
  selector: 'app',
  template: 'hello'
})
export class AppComponent {}

LANGUAGE: typescript
CODE:
// ./main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent).catch(e => console.error(e));

----------------------------------------

TITLE: Importing HomeComponent in AppComponent
DESCRIPTION: Code showing the import statement for HomeComponent in the app.component.ts file

LANGUAGE: typescript
CODE:
import { HomeComponent } from './home/home.component';

----------------------------------------

TITLE: Using Required Queries in Angular
DESCRIPTION: Demonstrates how to use required queries for both viewChild and contentChild to ensure a child component is always present.

LANGUAGE: angular-ts
CODE:
@Component({/* ... */})
export class CustomCard {
  header = viewChild.required(CustomCardHeader);
  body = contentChild.required(CustomCardBody);
}

----------------------------------------

TITLE: Using Required Queries in Angular
DESCRIPTION: Demonstrates how to use required queries for both viewChild and contentChild to ensure a child component is always present.

LANGUAGE: angular-ts
CODE:
@Component({/* ... */})
export class CustomCard {
  header = viewChild.required(CustomCardHeader);
  body = contentChild.required(CustomCardBody);
}

----------------------------------------

TITLE: Standalone Component APIs
DESCRIPTION: New APIs to support standalone components including bootstrapApplication() and importProvidersFrom()

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, {
  providers: [
    importProvidersFrom(BrowserModule),
    // other providers
  ]
});

----------------------------------------

TITLE: Binding ARIA Attributes in Angular Templates
DESCRIPTION: Demonstrates how to properly bind to ARIA attributes in Angular templates using the attr. prefix, which is required because ARIA specifications depend on HTML attributes rather than DOM properties.

LANGUAGE: html
CODE:
<button [attr.aria-label]="myActionLabel">…</button>

----------------------------------------

TITLE: Displaying Feature Request Automation Diagram in Markdown
DESCRIPTION: This snippet shows how to embed an image in a Markdown file to display the feature request automation process diagram. It uses HTML within Markdown for centering and sizing the image.

LANGUAGE: markdown
CODE:
<p align="center" width="100%">
  <img src="./images/feature-request-automation.png" alt="Feature Request Automation">
</p>

----------------------------------------

TITLE: Exporting Angular Localize Core Functions in TypeScript
DESCRIPTION: Imports and re-exports core localization functions from @angular/localize. Includes the main $localize function, LocalizeFn type for localization functions, and TranslateFn type for translation functions.

LANGUAGE: typescript
CODE:
import { ɵ$localize as $localize } from '@angular/localize';
import { ɵLocalizeFn as LocalizeFn } from '@angular/localize';
import { ɵTranslateFn as TranslateFn } from '@angular/localize';

export { $localize }

export { LocalizeFn }

export { TranslateFn }

----------------------------------------

TITLE: Configuring DI-based Interceptors
DESCRIPTION: Configuration setup for using class-based interceptors with dependency injection.

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, {providers: [
  provideHttpClient(
    withInterceptorsFromDi(),
  ),

  {provide: HTTP_INTERCEPTORS, useClass: LoggingInterceptor, multi: true},
]});

----------------------------------------

TITLE: Generating Angular Components and Other Structures
DESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules for the project.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Defining Test Cases in JSON for Angular Compiler Compliance Tests
DESCRIPTION: This snippet shows the structure of a TEST_CASES.json file used to define test cases for Angular compiler compliance tests. It includes test case descriptions, input files, compiler options, and expectations.

LANGUAGE: json
CODE:
{
  "$schema": "../test_case_schema.json",
  "cases": [
    {
      "description": "description of the test - equivalent to an `it` clause message.",
      "inputFiles": ["abc.ts"],
      "expectations": [
        {
          "failureMessage": "message to display if this expectation fails",
          "files": [
            { "expected": "xyz.js", "generated": "abc.js" }
          ]
        }
      ],
      "compilerOptions": { },
      "angularCompilerOptions": { }
    }
  ]
}

----------------------------------------

TITLE: Zone.js Event Handling Example
DESCRIPTION: JavaScript example showing how unpatched events behave in Zone.js context, demonstrating execution in root zone.

LANGUAGE: javascript
CODE:
__zone_symbol__UNPATCHED_EVENTS = ['scroll'];

Zone.current.fork({ name: 'child' }).run(() => {
  window.addEventListener('scroll', () => {
    console.log(Zone.current); // <root>
  });
});

----------------------------------------

TITLE: Bundle Analysis Output for Deferred Loading
DESCRIPTION: Shows the chunk file breakdown when using deferred loading, demonstrating how the article-comments component is separated into a lazy-loaded chunk.

LANGUAGE: markdown
CODE:
Initial chunk files | Names                      |  Raw size
chunk-NNSQHFIE.js   | -                          | 769.00 kB | 
main.js             | main                       | 229.25 kB | 

Lazy chunk files    | Names                      |  Raw size
chunk-T5UYXUSI.js   | article-comments-component |   1.84 kB |

----------------------------------------

TITLE: Using ReversePipe in Angular Component
DESCRIPTION: Demonstrates how to use the custom ReversePipe in an Angular component template and include it in the component's imports.

LANGUAGE: angular-ts
CODE:
@Component({
    ...
    template: `Reverse Machine: {{ word | reverse }}`
    imports: [ReversePipe]
})

----------------------------------------

TITLE: Updated Housing Service Implementation
DESCRIPTION: Complete implementation of the housing service with HTTP communication using fetch API

LANGUAGE: typescript
CODE:
async getAllHousingLocations(): Promise<HousingLocation[]> {
  const data = await fetch(this.url);
  return await data.json() ?? [];
}

----------------------------------------

TITLE: Importing Zone.js plugins
DESCRIPTION: Demonstrates how to import additional Zone.js plugins after importing the main Zone.js bundle. This example imports the canvas patch plugin.

LANGUAGE: javascript
CODE:
import 'zone.js';
// For example, import canvas patch
import 'zone.js/plugins/zone-patch-canvas';

----------------------------------------

TITLE: Adding SSR Capabilities in Angular
DESCRIPTION: Command to add Server-Side Rendering capabilities to an existing Angular application, which is required for prerendering.

LANGUAGE: shell
CODE:
ng add @angular/ssr

----------------------------------------

TITLE: Using Mocked Services in Angular Tests
DESCRIPTION: Shows how to use a mocked service (spy) in a test case for asserting behavior.

LANGUAGE: typescript
CODE:
it('#getValue should return stubbed value from a spy', () => {
  const stubValue = 'stub value';
  valueServiceSpy.getValue.and.returnValue(stubValue);

  expect(masterService.getValue())
    .withContext('service returned stub value')
    .toBe(stubValue);
  expect(valueServiceSpy.getValue.calls.count())
    .withContext('spy method was called once')
    .toBe(1);
  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)
    .toBe(stubValue);
});

----------------------------------------

TITLE: Resolving Circular Dependencies with forwardRef in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to use forwardRef to resolve circular dependencies in Angular, specifically in a component's providers array.

LANGUAGE: typescript
CODE:
providers: [
  {
    provide: PARENT_MENU_ITEM,
    useExisting: forwardRef(() => MenuItem),
  },
],

----------------------------------------

TITLE: Updating Angular Package API with Bazel
DESCRIPTION: Command to run the Bazel target for updating the public API golden file after modifying a package's public API. This is required when changes are made to the public API surface.

LANGUAGE: shell
CODE:
yarn bazel run //packages/<modified_package>:<modified_package>_api.accept

----------------------------------------

TITLE: Jasmine Test Naming Conventions in TypeScript
DESCRIPTION: Examples demonstrating proper naming conventions for Jasmine test descriptions in Angular testing code.

LANGUAGE: typescript
CODE:
/** PREFER: describes the scenario under test. */
describe('Router', () => {
  describe('with the default route reuse strategy', () => {
    it('should not reuse routes upon location change', () => {
      // ...
    });
  })
});

/** AVOID: does not fully describe the scenario under test. */
describe('Router', () => {
  describe('default strategy', () => {
    it('should work', () => {
      // ...
    });
  })
});

----------------------------------------

TITLE: Configuring Bluebird with Zone.js in Angular
DESCRIPTION: Integration code for using Bluebird Promises in an Angular application with Zone.js.

LANGUAGE: typescript
CODE:
import 'zone.js'; // Included with Angular CLI.
import 'zone.js/plugins/zone-bluebird';

LANGUAGE: typescript
CODE:
/// <reference types="zone.js" />

bootstrapApplication(AppComponent, appConfig)
  .then(() => {
    import('bluebird').then((Bluebird) => {
      const bluebirdSymbol = Zone.__symbol__('bluebird');
      const patchBluebirdFn = (Zone as any)[bluebirdSymbol];
      patchBluebirdFn(Bluebird.default);
    });
  })
  .catch((err) => console.error(err));

----------------------------------------

TITLE: Importing Validators in Angular Component
DESCRIPTION: This snippet shows how to import Validators from @angular/forms to use Angular's built-in validation tools in a component.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule, Validators} from '@angular/forms';

@Component({...})
export class AppComponent {}

----------------------------------------

TITLE: Implementing Two-Way Data Binding with ngModel
DESCRIPTION: Demonstrates how to implement two-way data binding using ngModel directive in an Angular input field.

LANGUAGE: html
CODE:
<label for="framework">
  Favorite Framework:
  <input id="framework" type="text" [(ngModel)]="favoriteFramework" />
</label>

----------------------------------------

TITLE: Component with Unused Imports - Before Migration
DESCRIPTION: Example of a component with an unused standalone import before running the cleanup migration

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { UnusedDirective } from './unused';

@Component({
  template: 'Hello',
  imports: [UnusedDirective],
})
export class MyComp {}

----------------------------------------

TITLE: Basic NgOptimizedImage Usage
DESCRIPTION: Demonstrates basic usage of the NgOptimizedImage directive with required attributes

LANGUAGE: angular-html
CODE:
<img ngSrc="cat.jpg" width="400" height="200">

----------------------------------------

TITLE: Defining Angular Testing Location Services
DESCRIPTION: TypeScript declarations for mock location services and testing utilities in Angular. Includes MockLocationStrategy, MockPlatformLocation, SpyLocation classes and related interfaces and providers.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { Location as Location_2 } from '@angular/common';
import { LocationChangeListener } from '@angular/common';
import { LocationStrategy } from '@angular/common';
import { PlatformLocation } from '@angular/common';
import { Provider } from '@angular/core';
import { SubscriptionLike } from 'rxjs';

export const MOCK_PLATFORM_LOCATION_CONFIG: InjectionToken<MockPlatformLocationConfig>;

export class MockLocationStrategy extends LocationStrategy {
    constructor();
    back(): void;
    forward(): void;
    getBaseHref(): string;
    getState(): unknown;
    internalBaseHref: string;
    internalPath: string;
    internalTitle: string;
    onPopState(fn: (value: any) => void): void;
    path(includeHash?: boolean): string;
    prepareExternalUrl(internal: string): string;
    pushState(ctx: any, title: string, path: string, query: string): void;
    replaceState(ctx: any, title: string, path: string, query: string): void;
    simulatePopState(url: string): void;
    urlChanges: string[];
    static ɵfac: i0.ɵɵFactoryDeclaration<MockLocationStrategy, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MockLocationStrategy>;
}

export class MockPlatformLocation implements PlatformLocation {
    constructor(config?: MockPlatformLocationConfig);
    back(): void;
    forward(): void;
    getBaseHrefFromDOM(): string;
    getState(): unknown;
    get hash(): string;
    historyGo(relativePosition?: number): void;
    get hostname(): string;
    get href(): string;
    onHashChange(fn: LocationChangeListener): VoidFunction;
    onPopState(fn: LocationChangeListener): VoidFunction;
    get pathname(): string;
    get port(): string;
    get protocol(): string;
    pushState(state: any, title: string, newUrl: string): void;
    replaceState(state: any, title: string, newUrl: string): void;
    get search(): string;
    get state(): unknown;
    get url(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<MockPlatformLocation, [{ optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MockPlatformLocation>;
}

export interface MockPlatformLocationConfig {
    appBaseHref?: string;
    startUrl?: string;
}

export function provideLocationMocks(): Provider[];

export class SpyLocation implements Location_2 {
    back(): void;
    forward(): void;
    getState(): unknown;
    go(path: string, query?: string, state?: any): void;
    historyGo(relativePosition?: number): void;
    isCurrentPathEqualTo(path: string, query?: string): boolean;
    ngOnDestroy(): void;
    normalize(url: string): string;
    onUrlChange(fn: (url: string, state: unknown) => void): VoidFunction;
    path(): string;
    prepareExternalUrl(url: string): string;
    replaceState(path: string, query?: string, state?: any): void;
    setBaseHref(url: string): void;
    setInitialPath(url: string): void;
    simulateHashChange(pathname: string): void;
    simulateUrlPop(pathname: string): void;
    subscribe(onNext: (value: any) => void, onThrow?: ((error: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;
    urlChanges: string[];
    static ɵfac: i0.ɵɵFactoryDeclaration<SpyLocation, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SpyLocation>;
}

----------------------------------------

TITLE: Angular Issue Response: Don't Understand
DESCRIPTION: Template response for unclear issue reports

LANGUAGE: markdown
CODE:
I'm sorry but we don't understand the problem you are reporting.

If the problem still exists in your application, please [open a new issue](https://github.com/angular/angular/issues/new/choose) and follow the instructions in the issue template.

----------------------------------------

TITLE: Translating Select Expression in XLIFF
DESCRIPTION: Demonstrates how to translate a select expression in an XLIFF file.

LANGUAGE: html
CODE:
<trans-unit id="3067494f32817f3d7a8c6cc9d6a96d1d9d01c882" datatype="html">
  <source>The author is <x id="ICU" equiv-text="{gender, select, male {male} female {female} other {other}}"/></source>
  <target>L'auteur est <x id="ICU" equiv-text="{gender, select, male {un homme} female {une femme} other {autre}}"/></target>
</trans-unit>
<trans-unit id="7670372064920373295" datatype="html">
  <source>{VAR_SELECT, select, male {male} female {female} other {other} }</source>
  <target>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }</target>
</trans-unit>

----------------------------------------

TITLE: Testing Against Local Project
DESCRIPTION: Commands for building and linking Angular changes to test in local projects

LANGUAGE: sh
CODE:
yarn ng-dev misc build-and-link <path-to-local-project-root>

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Defining Parameterized Routes for Prerendering
DESCRIPTION: Example of a routes.txt file containing specific routes to be prerendered, particularly useful for parameterized URLs.

LANGUAGE: text
CODE:
/products/1
/products/555

----------------------------------------

TITLE: Creating New Angular Workspace
DESCRIPTION: Command to create a new Angular project workspace using the Angular CLI. Replace [PROJECT NAME] with your desired project name.

LANGUAGE: bash
CODE:
ng new [PROJECT NAME]

----------------------------------------

TITLE: Configuring Size Budgets in Angular JSON
DESCRIPTION: Example of setting size budgets for Angular applications in the angular.json file to ensure parts of the application stay within defined size boundaries.

LANGUAGE: json
CODE:
{
  …
  "configurations": {
    "production": {
      …
      "budgets": [
        {
          "type": "initial",
          "maximumWarning": "250kb",
          "maximumError": "500kb"
        },
      ]
    }
  }
}

----------------------------------------

TITLE: Configuring Custom Builder Target in angular.json
DESCRIPTION: This angular.json configuration snippet shows how to add a new target for a custom builder, specifying the builder to use and its default options.

LANGUAGE: json
CODE:
{
  "projects": {
    "builder-test": {
      "architect": {
        "copy-package": {
          "builder": "@example/copy-file:copy",
          "options": {
            "source": "package.json",
            "destination": "package-copy.json"
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Running Angular Application
DESCRIPTION: Commands to navigate to the project directory and start the development server using ng serve. This will launch the application in development mode.

LANGUAGE: bash
CODE:
cd [PROJECT NAME]
ng serve

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Executes end-to-end tests for the Angular application using Protractor.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Comparing Angular Benchmarks with Local Changes in Bash
DESCRIPTION: These commands run a comparison of Angular benchmarks between the current state and either the main branch or a specific commit. If no benchmark target is specified, a prompt will allow selection of an available benchmark.

LANGUAGE: bash
CODE:
yarn benchmarks run-compare main

LANGUAGE: bash
CODE:
yarn benchmarks run-compare <compare-sha> [bazel-target]

----------------------------------------

TITLE: i18n Template Attribute Usage
DESCRIPTION: Demonstrates how to mark text for translation in Angular templates using the i18n attribute.

LANGUAGE: html
CODE:
<h1 i18n>Hello, World!</h1>

----------------------------------------

TITLE: Prioritizing Important Images with NgOptimizedImage in Angular
DESCRIPTION: This code example shows how to add the priority attribute to important images that might be the LCP (Largest Contentful Paint) element.

LANGUAGE: typescript
CODE:
<img ngSrc="www.example.com/image.png" height="600" width="800" priority />

----------------------------------------

TITLE: Intercepting HTTP Response Events in Angular
DESCRIPTION: Interceptor implementation that monitors response events and logs the status of completed responses.

LANGUAGE: typescript
CODE:
export function loggingInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {
  return next(req).pipe(tap(event => {
    if (event.type === HttpEventType.Response) {
      console.log(req.url, 'returned a response with status', event.status);
    }
  }));
}

----------------------------------------

TITLE: Pushing a New Branch to GitHub for Angular Pull Requests
DESCRIPTION: This snippet demonstrates how to push a new branch to GitHub when preparing to submit a pull request for Angular. It pushes the 'my-fix-branch' to the origin remote.

LANGUAGE: shell
CODE:
git push origin my-fix-branch

----------------------------------------

TITLE: Importing from a Local Angular Library
DESCRIPTION: Example of how to import from a locally built Angular library in an application.

LANGUAGE: typescript
CODE:
import { myExport } from 'my-lib';

----------------------------------------

TITLE: Specifying Logger Provider in Angular Component
DESCRIPTION: Demonstrates how to specify a Logger provider in an Angular component using the shorthand syntax and the expanded Provider interface.

LANGUAGE: typescript
CODE:
providers: [Logger],

LANGUAGE: typescript
CODE:
[{ provide: Logger, useClass: Logger }]

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Command to generate new Angular components, directives, pipes, services, classes, guards, interfaces, enums, or modules using the Angular CLI.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Bazel Remote Cache Configuration
DESCRIPTION: Configuration for enabling remote caching in Bazel using Google Cloud credentials

LANGUAGE: sh
CODE:
build --config=angular-team --google_credentials=[ABSOLUTE_PATH_TO_SERVICE_KEY]

----------------------------------------

TITLE: Extracting Source Language File with Angular CLI
DESCRIPTION: Uses the Angular CLI 'extract-i18n' command to extract marked text into a source language file.

LANGUAGE: bash
CODE:
ng extract-i18n

----------------------------------------

TITLE: Installing Angular Dependencies
DESCRIPTION: Command to install required JavaScript modules using Yarn package manager

LANGUAGE: shell
CODE:
# Install Angular project dependencies (package.json)
yarn install

----------------------------------------

TITLE: Angular Router Core Import Declarations
DESCRIPTION: Core import statements for Angular Router module dependencies

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import * as _angular_router from '@angular/router';
import { ChangeDetectorRef } from '@angular/core';
import { Compiler } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EnvironmentInjector } from '@angular/core';
import { EnvironmentProviders } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';

----------------------------------------

TITLE: Dynamic String Interpolation with $localize
DESCRIPTION: Shows how to use $localize with string interpolation and how it can be transformed into translated text during build time.

LANGUAGE: typescript
CODE:
warning = $localize`${this.process} is not right`;

LANGUAGE: typescript
CODE:
warning = "" + this.process + ", n'est pas bon.";

----------------------------------------

TITLE: Creating a multi-project workspace
DESCRIPTION: Create a workspace without an initial application, suitable for multiple projects or a monorepo style.

LANGUAGE: shell
CODE:
ng new my-workspace --no-create-application

----------------------------------------

TITLE: Using Structural Directive on ng-template in Angular HTML
DESCRIPTION: Example of using a custom structural directive 'select' directly on an ng-template element. The directive fetches data from a source and renders it in the template.

LANGUAGE: html
CODE:
<ng-template select let-data [selectFrom]="source">
  <p>The data is: {{ data }}</p>
</ng-template>

----------------------------------------

TITLE: Creating Trusted Video URL in Angular Component
DESCRIPTION: Shows how to generate a trusted resource URL for a video embed in a component method.

LANGUAGE: typescript
CODE:
updateVideoUrl(id: string) {
  this.videoUrl = this.sanitizer.bypassSecurityTrustResourceUrl(
    `https://www.youtube.com/embed/${id}`);
}

----------------------------------------

TITLE: Correcting Destructured Variable Usage in Angular Providers (TypeScript)
DESCRIPTION: This snippet shows how to fix the 'Destructured variable or constant not supported' error by referring to non-destructured values in providers.

LANGUAGE: typescript
CODE:
// CORRECTED
import { configuration } from './configuration';
  …
  providers: [
    {provide: Foo, useValue: configuration.foo},
    {provide: Bar, useValue: configuration.bar},
  ]
  …

----------------------------------------

TITLE: Configuring Build Options in angular.json
DESCRIPTION: Example of setting up build configurations in angular.json to enable/disable source maps based on different environments.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "sourceMap": false
          },
          "configurations": {
            "debug": {
              "sourceMap": true
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Testing Services with Mocked Dependencies in Angular
DESCRIPTION: Illustrates how to provide a mock service as a dependency when testing a service that has dependencies.

LANGUAGE: typescript
CODE:
let masterService: MasterService;
let valueServiceSpy: jasmine.SpyObj<ValueService>;

beforeEach(() => {
  const spy = jasmine.createSpyObj('ValueService', ['getValue']);

  TestBed.configureTestingModule({
    providers: [
      MasterService,
      { provide: ValueService, useValue: spy }
    ]
  });
  masterService = TestBed.inject(MasterService);
  valueServiceSpy = TestBed.inject(ValueService) as jasmine.SpyObj<ValueService>;
});

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Implementing Abortable Resource Fetching in TypeScript
DESCRIPTION: Shows how to implement request cancellation using AbortSignal with the fetch API in a resource loader.

LANGUAGE: typescript
CODE:
const userId: Signal<string> = getUserId();

const userResource = resource({
  request: () => ({id: userId()}),
  loader: ({request, abortSignal}): Promise<User> => {
    // fetch cancels any outstanding HTTP requests when the given `AbortSignal`
    // indicates that the request has been aborted.
    return fetch(`users/${request.id}`, {signal: abortSignal});
  },
});

----------------------------------------

TITLE: Defining an Angular Component with I18N Support
DESCRIPTION: Example of an Angular component using i18n attributes and ICU expressions for internationalization.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <div i18n-title title="Hello {{name}}!" i18n>
      {{count}} is rendered as:
      <b *ngIf="exp">
        { count, plural,
            =0 {no <b title="none">emails</b>!}
            =1 {one <i>email</i>}
            other {{{count}} <span title="{{count}}">emails</span>}
        }
      </b>.
    </div>
  `
})
class MyComponent {
}

----------------------------------------

TITLE: Correct Usage of Nullish Coalescing with Nullable Type in Angular
DESCRIPTION: This snippet shows the correct use of the nullish coalescing operator by making the username property nullable. If username is null, 'root' will be displayed as a fallback.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  template: `<div>{{ username ?? 'root' }}</div>`,
})
class MyComponent {
  // `username` is now nullable. If it is ever set to `null`, 'root' will be
  // displayed.
  username: string | null = 'Angelino';
}

----------------------------------------

TITLE: Initializing a Structural Directive in Angular TypeScript
DESCRIPTION: Basic setup for a structural directive in Angular, importing necessary dependencies and injecting TemplateRef and ViewContainerRef in the constructor.

LANGUAGE: typescript
CODE:
import {Directive, TemplateRef, ViewContainerRef} from '@angular/core';

@Directive({
  selector: '[select]',
})
export class SelectDirective {
  constructor(private templateRef: TemplateRef, private ViewContainerRef: ViewContainerRef) {}
}

----------------------------------------

TITLE: Publishing Angular Library to npm
DESCRIPTION: Commands to build and publish an Angular library as an npm package.

LANGUAGE: shell
CODE:
ng build my-lib
cd dist/my-lib
npm publish

----------------------------------------

TITLE: Configuring Angular Language Service Options
DESCRIPTION: Configuration settings in tsconfig.json to enable strict templates for the Angular Language Service

LANGUAGE: json
CODE:
"angularCompilerOptions": {
  "strictTemplates": true
}

----------------------------------------

TITLE: Referencing ProgramDriver Interface in TypeScript
DESCRIPTION: This snippet shows how the ProgramDriver interface is referenced in TypeScript. It's a crucial interface for requesting changes to the current ts.Program and receiving a new ts.Program with those changes applied.

LANGUAGE: typescript
CODE:
`ProgramDriver`

----------------------------------------

TITLE: Multiple Component Selectors
DESCRIPTION: Demonstrates how to define multiple selectors for a single component using comma separation.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'drop-zone, [dropzone]',
  ...
})
export class DropZone { }

----------------------------------------

TITLE: Boolean Arguments Best Practices in TypeScript
DESCRIPTION: Examples demonstrating how to avoid boolean arguments in method signatures by splitting functionality into separate methods.

LANGUAGE: typescript
CODE:
// AVOID
function getTargetElement(createIfNotFound = false) {
  // ...
}

LANGUAGE: typescript
CODE:
// PREFER
function getExistingTargetElement() {
  // ...
}

function createTargetElement() {
  // ...
}

----------------------------------------

TITLE: Defining Angular Elements API in TypeScript
DESCRIPTION: This code snippet defines the API for Angular Elements, including functions for creating custom elements, interfaces for element configuration and strategy, and classes for element implementation. It also includes type definitions and imports from core Angular and RxJS libraries.

LANGUAGE: typescript
CODE:
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { Subscription } from 'rxjs';
import { Type } from '@angular/core';
import { Version } from '@angular/core';

// @public
export function createCustomElement<P>(component: Type<any>, config: NgElementConfig): NgElementConstructor<P>;

// @public
export abstract class NgElement extends HTMLElement {
    abstract attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string, namespace?: string): void;
    abstract connectedCallback(): void;
    abstract disconnectedCallback(): void;
    protected ngElementEventsSubscription: Subscription | null;
    protected abstract ngElementStrategy: NgElementStrategy;
}

// @public
export interface NgElementConfig {
    injector: Injector;
    strategyFactory?: NgElementStrategyFactory;
}

// @public
export interface NgElementConstructor<P> {
    new (injector?: Injector): NgElement & WithProperties<P>;
    readonly observedAttributes: string[];
}

// @public
export interface NgElementStrategy {
    // (undocumented)
    connect(element: HTMLElement): void;
    // (undocumented)
    disconnect(): void;
    // (undocumented)
    events: Observable<NgElementStrategyEvent>;
    // (undocumented)
    getInputValue(propName: string): any;
    // (undocumented)
    setInputValue(propName: string, value: string, transform?: (value: any) => any): void;
}

// @public
export interface NgElementStrategyEvent {
    // (undocumented)
    name: string;
    // (undocumented)
    value: any;
}

// @public
export interface NgElementStrategyFactory {
    create(injector: Injector): NgElementStrategy;
}

// @public (undocumented)
export const VERSION: Version;

// @public
export type WithProperties<P> = {
    [property in keyof P]: P[property];
};

----------------------------------------

TITLE: Adding Router Links to Template
DESCRIPTION: Adds router links and outlet to the application template.

LANGUAGE: html
CODE:
<h1>Angular Router App</h1>
<nav>
  <ul>
    <li><a routerLink="/first-component" routerLinkActive="active" ariaCurrentWhenActive="page">First Component</a></li>
    <li><a routerLink="/second-component" routerLinkActive="active" ariaCurrentWhenActive="page">Second Component</a></li>
  </ul>
</nav>
<!-- The routed views render in the <router-outlet>-->
<router-outlet />

----------------------------------------

TITLE: Implementing Logger Class in TypeScript for Angular
DESCRIPTION: This snippet defines a Logger class that provides methods for logging at different levels. It includes methods like verbose(), debug(), info(), warn(), and error(). The class also has a constructor that takes a minimum log level.

LANGUAGE: typescript
CODE:
export class Logger {
  constructor(private readonly minLevel: LogLevel) {}

  public verbose(...args: any[]): void {
    this.log(LogLevel.VERBOSE, args);
  }

  public debug(...args: any[]): void {
    this.log(LogLevel.DEBUG, args);
  }

  public info(...args: any[]): void {
    this.log(LogLevel.INFO, args);
  }

  public warn(...args: any[]): void {
    this.log(LogLevel.WARN, args);
  }

  public error(...args: any[]): void {
    this.log(LogLevel.ERROR, args);
  }

  private log(level: LogLevel, args: any[]): void {
    if (level >= this.minLevel) {
      console.log(...args);
    }
  }
}

----------------------------------------

TITLE: Testing Angular CLI Builder with Jest
DESCRIPTION: This TypeScript code demonstrates how to write an integration test for a custom Angular CLI builder using Jest. It sets up a test environment, runs the builder, and verifies the output.

LANGUAGE: typescript
CODE:
import { Architect } from '@angular-devkit/architect';
import { TestingArchitectHost } from '@angular-devkit/architect/testing';
import { schema } from '@angular-devkit/core';
import { promises as fs } from 'fs';

const { join } = require('path');

describe('Copy File Builder', () => {
  let architect: Architect;
  let architectHost: TestingArchitectHost;

  beforeEach(async () => {
    const registry = new schema.CoreSchemaRegistry();
    registry.addPostTransform(schema.transforms.addUndefinedDefaults);

    architectHost = new TestingArchitectHost('/root', '/root');
    architect = new Architect(architectHost, registry);

    await architectHost.addBuilder('@example/copy-file:copy', () => import('./my-builder'));
  });

  it('can copy files', async () => {
    const run = await architect.scheduleBuilder('@example/copy-file:copy', {
      source: 'package.json',
      destination: 'package-copy.json',
    });

    const output = await run.result;

    expect(output.success).toBe(true);

    const sourceContent = await fs.readFile('package.json', 'utf8');
    const destinationContent = await fs.readFile('package-copy.json', 'utf8');

    expect(destinationContent).toBe(sourceContent);
  });
});

----------------------------------------

TITLE: Using Harness Loader to Get Component Harnesses
DESCRIPTION: Examples of using a harness loader to get single or multiple component harness instances.

LANGUAGE: typescript
CODE:
// Get harness for first instance of the element
const myComponentHarness = await loader.getHarness(MyComponent);

// Get harnesses for all instances of the element
const myComponentHarnesses = await loader.getHarnesses(MyComponent);

----------------------------------------

TITLE: Referencing TsCreateProgramDriver in TypeScript
DESCRIPTION: This snippet shows the reference to TsCreateProgramDriver, which is responsible for creating template type-checking ts.Programs for the command-line compiler or CLI.

LANGUAGE: typescript
CODE:
`TsCreateProgramDriver`

----------------------------------------

TITLE: Manual Output Subscription Management
DESCRIPTION: Demonstrates how to manually manage output subscriptions using the unsubscribe method.

LANGUAGE: typescript
CODE:
const eventSubscription = someComponent.someEventProperty.subscribe(eventData => {
  console.log(eventData);
});

// ...

eventSubscription.unsubscribe();

----------------------------------------

TITLE: Defining Base Currency Information in TypeScript for Angular
DESCRIPTION: This snippet demonstrates how base currency information is stored in Angular's common package. It uses an object to map currency codes to arrays containing symbol, narrow symbol, and fraction digit information. The tool optimizes data storage by omitting redundant or default values.

LANGUAGE: typescript
CODE:
const baseCurrencies = {
  'CAD': ['CA$', '$', 2],
  'NZD': ['NZ$', '$'],
  'USD': ['$'],
}

----------------------------------------

TITLE: Conditional Rendering of iframe Elements with Different Sandbox Values in Angular HTML
DESCRIPTION: This snippet shows how to use *ngIf directives to conditionally render iframe elements with different sandbox attribute values based on various conditions.

LANGUAGE: angular-html
CODE:
<iframe *ngIf="someConditionA" sandbox="allow-scripts" src="..."></iframe>
<iframe *ngIf="someConditionB" sandbox="allow-forms" src="..."></iframe>
<iframe *ngIf="someConditionC" sandbox="allow-popups" src="..."></iframe>

----------------------------------------

TITLE: Applying NgClass in Angular Template
DESCRIPTION: Demonstrates how to apply the NgClass directive in the template using the currentClasses object.

LANGUAGE: HTML
CODE:
<div [ngClass]="currentClasses">This div is initially saveable, unchanged, and special</div>

----------------------------------------

TITLE: Defining Angular Component Selector
DESCRIPTION: Example showing how to define a component with a custom selector in Angular using the @Component decorator.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-app',
  ...
})
class AppComponent {}

----------------------------------------

TITLE: Angular Workspace Configuration for Library
DESCRIPTION: Example of how the angular.json file is updated with a new library project configuration.

LANGUAGE: json
CODE:
"projects": {
  …
  "my-lib": {
    "root": "projects/my-lib",
    "sourceRoot": "projects/my-lib/src",
    "projectType": "library",
    "prefix": "lib",
    "architect": {
      "build": {
        "builder": "@angular-devkit/build-angular:ng-packagr",
        …

----------------------------------------

TITLE: Configuring Angular Extended Diagnostics in JSON
DESCRIPTION: Example configuration for Angular compiler options to customize extended diagnostics behavior. Shows how to set specific checks and default diagnostic categories.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      // The categories to use for specific diagnostics.
      "checks": {
        // Maps check name to its category.
        "invalidBananaInBox": "suppress"
      },

      // The category to use for any diagnostics not listed in `checks` above.
      "defaultCategory": "error"
    }
  }
}

----------------------------------------

TITLE: Traditional Event Listener Implementation Example
DESCRIPTION: Demonstrates the traditional approach of adding event listeners that requires handler code to be loaded upfront, highlighting potential issues with server-rendered applications.

LANGUAGE: html
CODE:
<body>
  <button id="buy_btn" type="button">Buy now!</button>
  ...
  <script>
    const btn = document.querySelector('#buy_btn');
    btn.addEventListener('click', () => app.confirmPurchase());
  </script>

----------------------------------------

TITLE: Forwarding Injected Dependencies in Angular TypeScript
DESCRIPTION: Illustrates how to forward injected dependencies to the base class constructor when extending components.

LANGUAGE: typescript
CODE:
@Component({ ... })
export class ListboxBase {
  constructor(private element: ElementRef) { }
}

@Component({ ... })
export class CustomListbox extends ListboxBase {
  constructor(element: ElementRef) {
    super(element);
  }
}

----------------------------------------

TITLE: Enabling Angular Debug Tools in TypeScript
DESCRIPTION: Code to enable Angular debug tools in the browser's developer console. This snippet shows how to initialize debug tools after bootstrapping the Angular application.

LANGUAGE: typescript
CODE:
import {ApplicationRef} from '@angular/core';
import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';
import {enableDebugTools} from '@angular/platform-browser';


platformBrowserDynamic().bootstrapModule(AppModule)
  .then(moduleRef => {
    const applicationRef = moduleRef.injector.get(ApplicationRef);
    const appComponent = applicationRef.components[0];
    enableDebugTools(appComponent);
  })

----------------------------------------

TITLE: Importing Angular Core Testing Dependencies
DESCRIPTION: This snippet shows the import statements for various Angular core testing dependencies. It includes imports from '@angular/core' for components, directives, and other core functionality used in testing.

LANGUAGE: typescript
CODE:
import { ChangeDetectorRef } from '@angular/core';
import { Component } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { DebugElement } from '@angular/core';
import { ɵDeferBlockBehavior as DeferBlockBehavior } from '@angular/core';
import { ɵDeferBlockState as DeferBlockState } from '@angular/core';
import { Directive } from '@angular/core';
import { ElementRef } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { InjectOptions } from '@angular/core';
import { NgModule } from '@angular/core';
import { NgZone } from '@angular/core';
import { Pipe } from '@angular/core';
import { PlatformRef } from '@angular/core';
import { ProviderToken } from '@angular/core';
import { SchemaMetadata } from '@angular/core';
import { Type } from '@angular/core';
import { ɵDeferBlockDetails } from '@angular/core';

----------------------------------------

TITLE: Optimizing Locale Data Storage in TypeScript for Angular
DESCRIPTION: This snippet illustrates how the locale data generation tool optimizes storage by using undefined values when data is repeated. It shows an array structure where if 'labelsForDayPeriodsAbbreviated' is identical to 'labelsForDayPeriodsNarrow', it's set to undefined to reduce payload size.

LANGUAGE: typescript
CODE:
[
  // ...
  labelsForDayPeriodsNarrow,
  labelsForDayPeriodsAbbreviated
]

----------------------------------------

TITLE: Demonstrating Component ID Collision in Angular
DESCRIPTION: Example showing two Angular components with identical selectors that cause a component ID collision. This is a common issue when creating mock components for testing.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component',
  template: 'complex-template',
})
class SomeComponent {}

@Component({
  selector: 'my-component',
  template: 'empty-template',
})
class SomeMockedComponent {}

----------------------------------------

TITLE: Using Non-Exported Function in Angular Providers (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Reference to a non-exported function' error. It shows a provider using a locally defined function that is not exported, which the compiler cannot access when generating the class factory.

LANGUAGE: typescript
CODE:
// ERROR
function myStrategy() { … }

  …
  providers: [
    { provide: MyStrategy, useFactory: myStrategy }
  ]
  …

----------------------------------------

TITLE: Configuring Dependency Injection Bindings in Angular
DESCRIPTION: Illustrates various ways to configure bindings in Angular's DI system, including class, value, factory, and alias bindings.

LANGUAGE: typescript
CODE:
var inj = Injector.resolveAndCreate([
  bind(Car).toClass(Car),
  bind(Engine).toClass(Engine)
]);

var inj = Injector.resolveAndCreate([
  Car,  // syntax sugar for bind(Car).toClass(Car)
  Engine
]);

var inj = Injector.resolveAndCreate([
  bind(Car).toValue(new Car(new Engine()))
]);

var inj = Injector.resolveAndCreate([
  bind(Car).toFactory((e) => new Car(e), [Engine]),
  bind(Engine).toFactory(() => new Engine())
]);

var inj = Injector.resolveAndCreate([
  bind(Car).toFactory((e) => new Car(), ["engine!"]),
  bind("engine!").toClass(Engine)
]);

var inj = Injector.resolveAndCreate([
  bind(Engine).toClass(Engine),
  bind("engine!").toAlias(Engine)
]);

----------------------------------------

TITLE: Running Standalone Demo App for Angular DevTools
DESCRIPTION: Launches a standalone version of the demo application for Angular DevTools, accessible via localhost:4200 for testing purposes.

LANGUAGE: shell
CODE:
yarn devtools:devserver:demo-standalone

----------------------------------------

TITLE: Configuring CommonJS Dependencies in Angular JSON
DESCRIPTION: Example of configuring allowed CommonJS dependencies in the angular.json file to disable warnings for specific modules.

LANGUAGE: json
CODE:
"build": {
  "builder": "@angular-devkit/build-angular:browser",
  "options": {
     "allowedCommonJsDependencies": [
        "lodash"
     ]
     …
   }
   …
},

----------------------------------------

TITLE: Implementing Tree-Shakable Query Features in TypeScript
DESCRIPTION: This snippet shows a better approach to implement tree-shakable query features. Instead of using enums, it uses separate functions for each feature, allowing for better code optimization and tree-shaking.

LANGUAGE: typescript
CODE:
function queryElementRefFeature() {...}
function queryContainerRefFeature() {...}
function queryTemplateRefFeature() {...}

query(predicate, descend, queryElementRefFeature) {...}

----------------------------------------

TITLE: Using Host Property Bindings in Angular Component
DESCRIPTION: Shows how to bind properties, attributes, and events to a component's host element using the host property in the @Component decorator.

LANGUAGE: typescript
CODE:
@Component({
  ...,
  host: {
    'role': 'slider',
    '[attr.aria-valuenow]': 'value',
    '[class.active]': 'isActive()',
    '[tabIndex]': 'disabled ? -1 : 0',
    '(keydown)': 'updateValue($event)',
  },
})
export class CustomSlider {
  value: number = 0;
  disabled: boolean = false;
  isActive = signal(false);
  updateValue(event: KeyboardEvent) { /* ... */ }

  /* ... */
}

----------------------------------------

TITLE: Running Integration Test Suite
DESCRIPTION: Command to execute the complete integration test suite using the run_tests shell script.

LANGUAGE: bash
CODE:
$ ./integration/run_tests.sh

----------------------------------------

TITLE: Resolving Component ID Collision Using Host Binding
DESCRIPTION: Alternative solution for resolving component ID collision by adding a host binding to one of the components. This approach adds an extra attribute to differentiate the components.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component',
  template: 'complex-template',
  host: {'some-binding': 'some-value'},
})
class SomeComponent {}

----------------------------------------

TITLE: Exporting Components from NgModule
DESCRIPTION: This snippet shows how to export components from an NgModule, making them available to other components and NgModules that import this module.

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [PopupTrigger, SelectionIndicator],
  declarations: [CustomMenu, CustomMenuItem],

  // Make CustomMenu and CustomMenuItem available to
  // components and NgModules that import CustomMenuModule.
  exports: [CustomMenu, CustomMenuItem],
})
export class CustomMenuModule { }

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [PopupTrigger, SelectionIndicator],
  declarations: [CustomMenu, CustomMenuItem],

  // Also make PopupTrigger available to any component or NgModule that imports CustomMenuModule.
  exports: [CustomMenu, CustomMenuItem, PopupTrigger],
})
export class CustomMenuModule { }

----------------------------------------

TITLE: Configuring Angular Linker Babel Plugin
DESCRIPTION: Example of integrating the Angular linker Babel plugin into a custom webpack configuration.

LANGUAGE: javascript
CODE:
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export default {
  entry: './src/main.ts',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  resolve: {
    extensions: ['.ts', '.js']
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        loader: 'babel-loader',
        options: {
          plugins: [
            ['@angular/compiler-cli/linker/babel', {
              // ... linker plugin options ...
            }]
          ]
        }
      }
    ]
  }
};

----------------------------------------

TITLE: Building Angular Application with Custom Deploy URL
DESCRIPTION: This command shows how to build an Angular application using the ng build command with a custom deploy URL. This is useful for specifying the base path for resolving relative URLs for assets at compile time.

LANGUAGE: shell
CODE:
ng build --deploy-url /my/assets

----------------------------------------

TITLE: Installing D3 Library with TypeScript Types
DESCRIPTION: Commands to install both the D3 library and its corresponding TypeScript type definitions

LANGUAGE: shell
CODE:
npm install d3 --save
npm install @types/d3 --save-dev

----------------------------------------

TITLE: External Styles in Angular Component
DESCRIPTION: Shows how to reference external CSS files in an Angular component using the styleUrl property in the @Component decorator.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  templateUrl: 'profile-photo.html',
  styleUrl: 'profile-photo.css',
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Configuring Server Routes in Angular
DESCRIPTION: Example of server route configuration using ServerRoute objects to define different rendering modes for various paths.

LANGUAGE: typescript
CODE:
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '', // This renders the "/" route on the client (CSR)
    renderMode: RenderMode.Client,
  },
  {
    path: 'about', // This page is static, so we prerender it (SSG)
    renderMode: RenderMode.Prerender,
  },
  {
    path: 'profile', // This page requires user-specific data, so we use SSR
    renderMode: RenderMode.Server,
  },
  {
    path: '**', // All other routes will be rendered on the server (SSR)
    renderMode: RenderMode.Server,
  },
];

----------------------------------------

TITLE: Defining Angular License Header Comment Block
DESCRIPTION: JSDoc-style comment block containing Angular's standard license declaration with placeholder version number, Google LLC copyright notice for 2010-2025, and MIT license specification.

LANGUAGE: javascript
CODE:
/**
 * @license Angular v0.0.0-PLACEHOLDER
 * (c) 2010-2025 Google LLC. https://angular.io/
 * License: MIT
 */

----------------------------------------

TITLE: Demonstrating Deprecation Notice Format in Markdown
DESCRIPTION: This snippet illustrates the format for documenting deprecations in the commit message footer. It includes placeholders for the deprecation notice, description, and related pull request number.

LANGUAGE: markdown
CODE:
```
DEPRECATED: <what is deprecated>
<BLANK LINE>
<deprecation description + recommended update path>
<BLANK LINE>
<BLANK LINE>
Closes #<pr number>
```

----------------------------------------

TITLE: Router Testing Configuration
DESCRIPTION: Sets up testing environment for components with routing dependencies

LANGUAGE: TypeScript
CODE:
TestBed.configureTestingModule({
  imports: [
    RouterTestingModule.withRoutes([
      { path: 'heroes/:id', component: HeroDetailComponent }
    ])
  ],
  declarations: [ HeroDetailComponent ],
  providers: [
    { provide: HeroService, useClass: TestHeroService }
  ]
});

----------------------------------------

TITLE: Configuring Memo Decorator Interface
DESCRIPTION: TypeScript interface definition for memo decorator configuration, allowing custom resolver function and cache implementation

LANGUAGE: typescript
CODE:
export interface Config {
  resolver?: Resolver;
  cache?: MapLike;
}

----------------------------------------

TITLE: Tree-Shakable Node Injector Reader in TypeScript
DESCRIPTION: This function demonstrates a tree-shakable approach to reading from node injectors. It uses a function parameter instead of an enum, allowing for better code optimization and tree-shaking during compile-time.

LANGUAGE: typescript
CODE:
function readFromNodeInjector(
    nodeInjector: LInjector, node: LNode, readFn: (injector: Injector) => any) | Type<any>): any {
  if (isFeature(readFn)) {
    return readFn(nodeInjector);
  } 
  const matchingIdx = geIdxOfMatchingDirective(node, readFn);
  if (matchingIdx !== null) {
    return node.view.data[matchingIdx];
  }
  return null;
}

----------------------------------------

TITLE: Using Material Slider Component Harness
DESCRIPTION: Example of a test using the Angular Material slider component harness to get the value of a slider thumb.

LANGUAGE: typescript
CODE:
it('should get value of slider thumb', async () => {
    const slider = await loader.getHarness(MatSliderHarness);
    const thumb = await slider.getEndThumb();
    expect(await thumb.getValue()).toBe(50);
});

----------------------------------------

TITLE: Configuring Hydration with NgModule in Angular
DESCRIPTION: Demonstrates how to enable hydration in an Angular application using NgModule by adding provideClientHydration to the module's providers.

LANGUAGE: typescript
CODE:
import {provideClientHydration} from '@angular/platform-browser';
import {NgModule} from '@angular/core';

@NgModule({
  declarations: [AppComponent],
  exports: [AppComponent],
  bootstrap: [AppComponent],
  providers: [provideClientHydration()],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Bootstrap Styles
DESCRIPTION: Angular.json configuration for including Bootstrap CSS

LANGUAGE: css
CODE:
"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.css",
  "src/styles.css"
],

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Executes the end-to-end tests for the Angular project using Protractor testing framework.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Using inject() in Test Context
DESCRIPTION: Shows how to use inject() within test contexts using TestBed.runInInjectionContext.

LANGUAGE: typescript
CODE:
TestBed.runInInjectionContext(() => {
   // ...
});

----------------------------------------

TITLE: Custom View Transition CSS Animations
DESCRIPTION: Defines custom CSS animations for view transitions including rotate effects for elements with view-transition-name: count.

LANGUAGE: css
CODE:
/* Custom transition */
@keyframes rotate-out {
 to {
   transform: rotate(90deg);
 }
}
@keyframes rotate-in {
 from {
   transform: rotate(-90deg);
 }
}
::view-transition-old(count),
::view-transition-new(count) {
 animation-duration: 200ms;
 animation-name: -ua-view-transition-fade-in, rotate-in;
}
::view-transition-old(count) {
 animation-name: -ua-view-transition-fade-out, rotate-out;
}

----------------------------------------

TITLE: Custom View Transition CSS Animations
DESCRIPTION: Defines custom CSS animations for view transitions including rotate effects for elements with view-transition-name: count.

LANGUAGE: css
CODE:
/* Custom transition */
@keyframes rotate-out {
 to {
   transform: rotate(90deg);
 }
}
@keyframes rotate-in {
 from {
   transform: rotate(-90deg);
 }
}
::view-transition-old(count),
::view-transition-new(count) {
 animation-duration: 200ms;
 animation-name: -ua-view-transition-fade-in, rotate-in;
}
::view-transition-old(count) {
 animation-name: -ua-view-transition-fade-out, rotate-out;
}

----------------------------------------

TITLE: Enabling I18n Support with Hydration in Angular
DESCRIPTION: Demonstrates how to enable internationalization support with hydration using withI18nSupport function.

LANGUAGE: typescript
CODE:
import {
  bootstrapApplication,
  provideClientHydration,
  withI18nSupport,
} from '@angular/platform-browser';
...

bootstrapApplication(AppComponent, {
  providers: [provideClientHydration(withI18nSupport())]
});

----------------------------------------

TITLE: Using ngFor with User Object in Angular Template
DESCRIPTION: Demonstrates usage of *ngFor directive to iterate over users and display their city information.

LANGUAGE: html
CODE:
<div *ngFor="let user of users">
  <h2>{{config.title}}</h2>
  <span>City: {{user.address.city}}</span>
</div>

----------------------------------------

TITLE: Incremental Library Build with Watch Mode
DESCRIPTION: Command to run an incremental build of the library with watch mode for development.

LANGUAGE: shell
CODE:
ng build my-lib --watch

----------------------------------------

TITLE: Incorrect jQuery Import Example
DESCRIPTION: Example showing how not to import jQuery when using it as a global library

LANGUAGE: typescript
CODE:
import * as $ from 'jquery';

----------------------------------------

TITLE: Defining User Interface in TypeScript
DESCRIPTION: Defines a User interface with name and address properties for use in Angular components.

LANGUAGE: typescript
CODE:
interface User {
  name: string;
  address: {
    city: string;
    state: string;
  }
}

----------------------------------------

TITLE: Installing Dependencies for Angular Project
DESCRIPTION: This command installs the necessary dependencies for running the Angular application.

LANGUAGE: shell
CODE:
npm install

----------------------------------------

TITLE: Initializing a Basic Angular CLI Builder in TypeScript
DESCRIPTION: This snippet shows the skeleton structure for creating a custom Angular CLI builder using the createBuilder function. It demonstrates the basic setup and return type for a builder.

LANGUAGE: typescript
CODE:
import { BuilderOutput, createBuilder } from '@angular-devkit/architect';

export default createBuilder((options, context) => {
  return new Promise<BuilderOutput>(resolve => {
    // TODO: add builder logic

    resolve({ success: true });
  });
});

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Runs the Angular development server and provides the URL to access the application. The server will automatically reload if any source files are changed.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Defining Schematic Schema
DESCRIPTION: JSON schema definition for a Hello World schematic that specifies input parameters and their types.

LANGUAGE: json
CODE:
{
    "properties": {
        "name": {
            "type": "string",
            "minLength": 1,
            "default": "world"
        },
        "useColor": {
            "type": "boolean"
        }
    }
}

----------------------------------------

TITLE: Configuring Image Loader for NgOptimizedImage in Angular
DESCRIPTION: This snippet demonstrates how to configure an image loader for NgOptimizedImage directive to format URLs for images.

LANGUAGE: typescript
CODE:
providers: [
  provideImgixLoader('https://my.base.url/'),
]

----------------------------------------

TITLE: Component Event Testing
DESCRIPTION: Tests component event emitters and click handling

LANGUAGE: TypeScript
CODE:
it('should raise selected event when clicked', () => {
  const expectedHero = { id: 42, name: 'Test' };
  component.hero = expectedHero;

  component.selected.subscribe(hero => expect(hero).toBe(expectedHero));
  component.click();
});

----------------------------------------

TITLE: Defining LogLevel Enum in TypeScript for Angular Logging
DESCRIPTION: This snippet defines an enum called LogLevel which represents different logging levels. It includes levels such as VERBOSE, DEBUG, INFO, WARN, and ERROR.

LANGUAGE: typescript
CODE:
export enum LogLevel {
  VERBOSE,
  DEBUG,
  INFO,
  WARN,
  ERROR,
}

----------------------------------------

TITLE: Reading from Node Injector with Non-Tree-Shakable Enums in TypeScript
DESCRIPTION: This function demonstrates how the use of QueryReadType enum in the readFromNodeInjector function can lead to non-tree-shakable code. It shows specific behavior based on enum values, which can result in including unnecessary code in the final bundle.

LANGUAGE: typescript
CODE:
function readFromNodeInjector(
    nodeInjector: LInjector, node: LNode, read: QueryReadType | Type<any>): any {
  if (read === QueryReadType.ElementRef) {
    return getOrCreateElementRef(nodeInjector);
  } 
  if (read === QueryReadType.ViewContainerRef) {
    return getOrCreateContainerRef(nodeInjector);
  }
  if (read === QueryReadType.TemplateRef) {
    return getOrCreateTemplateRef(nodeInjector);
  } 
  const matchingIdx = geIdxOfMatchingDirective(node, read);
  if (matchingIdx !== null) {
    return node.view.data[matchingIdx];
  }
  return null;
}

----------------------------------------

TITLE: Profile Component Input Declaration - TypeScript
DESCRIPTION: TypeScript code to define an input property for binding the username route parameter in the profile component.

LANGUAGE: typescript
CODE:
@Input() username!: string;

----------------------------------------

TITLE: Referencing Template Fragment with ViewChild in Angular Component
DESCRIPTION: Demonstrates how to get a reference to a template fragment using ViewChild decorator in an Angular component.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */,
  template: `
    <p>This is a normal element</p>

    <ng-template>
      <p>This is a template fragment</p>
    </ng-template>
  `,
})
export class ComponentWithFragment {
  @ViewChild(TemplateRef) myFragment: TemplateRef<unknown> | undefined;
}

----------------------------------------

TITLE: Declaring Global Library Types
DESCRIPTION: Example of declaring types for global libraries without TypeScript definitions

LANGUAGE: typescript
CODE:
declare var libraryName: any;

----------------------------------------

TITLE: Using ngIf for Type Narrowing in Templates
DESCRIPTION: This snippet shows how to use *ngIf directive to narrow type unions in Angular templates, avoiding 'Object is possibly undefined' errors during template type checking.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component',
  template: '<span *ngIf="person"> {{person.address.street}} </span>'
})
class MyComponent {
  person?: Person;
}

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server which serves the application on localhost:4200 with auto-reload functionality.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Adding Interactive Prompts to Schema
DESCRIPTION: Enhanced schema definition that includes interactive prompts for user input during schematic execution.

LANGUAGE: json
CODE:
{
    "properties": {
        "name": {
            "type": "string",
            "minLength": 1,
            "default": "world",
            "x-prompt": "What is your name?"
        },
        "useColor": {
            "type": "boolean",
            "x-prompt": "Would you like the response in color?"
        }
    }
}

----------------------------------------

TITLE: Using Non-null Assertion Operator in Templates
DESCRIPTION: This snippet demonstrates the use of the non-null assertion operator (!) to suppress 'Object is possibly undefined' errors in template expressions when certain component constraints ensure non-null values.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component',
  template: '<span *ngIf="person"> {{person.name}} lives on {{address!.street}} </span>'
})
class MyComponent {
  person?: Person;
  address?: Address;

  setData(person: Person, address: Address) {
    this.person = person;
    this.address = address;
  }
}

----------------------------------------

TITLE: Using $any() to Disable Type Checking in Angular Template
DESCRIPTION: Demonstrates using $any() cast function to suppress type checking errors in Angular templates.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component',
  template: '{{$any(person).address.street}}'
})
class MyComponent {
  person?: Person;
}

----------------------------------------

TITLE: Implementing Step-by-Step Guide with Angular Custom Components
DESCRIPTION: This code snippet demonstrates the use of custom 'docs-step' components in Angular to create a structured, step-by-step guide. Each step is encapsulated in its own component with a title attribute.

LANGUAGE: html
CODE:
<docs-step title="Step 1">
  Do the first thing.
</docs-step>
<docs-step title="Step B">
  Do another thing after that.
</docs-step>

----------------------------------------

TITLE: Angular CLI Installation Command
DESCRIPTION: Shell command for installing the Angular CLI globally using npm.

LANGUAGE: shell
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Automatic Metadata Rewriting for Factory Functions
DESCRIPTION: These snippets demonstrate how the compiler automatically rewrites certain expressions in metadata to allow for more flexible usage. The first snippet shows the original code, while the second shows how the compiler rewrites it internally.

LANGUAGE: typescript
CODE:
class TypicalServer {

}

@NgModule({
  providers: [{provide: SERVER, useFactory: () => TypicalServer}]
})
export class TypicalModule {}

LANGUAGE: typescript
CODE:
class TypicalServer {

}

export const θ0 = () => new TypicalServer();

@NgModule({
  providers: [{provide: SERVER, useFactory: θ0}]
})
export class TypicalModule {}

----------------------------------------

TITLE: Adding isEditable Property in Angular Component
DESCRIPTION: This snippet shows how to add a property called 'isEditable' to the AppComponent class in the app.component.ts file. The property is initialized with a value of true.

LANGUAGE: ts
CODE:
export class AppComponent {
    isEditable = true;
}

----------------------------------------

TITLE: Disabling Specific 'on' Properties in Zone.js
DESCRIPTION: This snippet shows how to disable specific 'on' properties from being patched by Zone.js. It demonstrates disabling window.onmessage and HTMLElement.prototype.onclick by setting the __Zone_ignore_on_properties global variable before loading Zone.js.

LANGUAGE: html
CODE:
<script>
  __Zone_ignore_on_properties = [
    {
      target: window,
      ignoreProperties: ['message'],
    },
    {
      target: HTMLElement.prototype,
      ignoreProperties: ['click'],
    },
  ];
</script>
<script src="../bundles/zone.umd.js"></script>

----------------------------------------

TITLE: Using Tagged Template Expressions in Angular Component (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Tagged template expressions are not supported' error. It shows a component template using a tagged template expression, which is not supported in metadata.

LANGUAGE: typescript
CODE:
// ERROR
const expression = 'funky';
const raw = String.raw`A tagged template ${expression} string`;
 …
 template: '<div>' + raw + '</div>'
 …

----------------------------------------

TITLE: Managing Pending Tasks in Zoneless Angular
DESCRIPTION: Examples of using PendingTasks service to handle async operations in SSR scenarios without ZoneJS.

LANGUAGE: typescript
CODE:
const taskService = inject(PendingTasks);
taskService.run(async () => {
  const someResult = await doSomeWorkThatNeedsToBeRendered();
  this.someState.set(someResult);
});

LANGUAGE: typescript
CODE:
const taskService = inject(PendingTasks);
const taskCleanup = taskService.add();
try {
  await doSomeWorkThatNeedsToBeRendered();
} catch {
  // handle error
} finally {
  taskCleanup();
}

LANGUAGE: typescript
CODE:
readonly myObservableState = someObservable.pipe(pendingUntilEvent());

----------------------------------------

TITLE: Running Angular Control Flow Migration Schematic
DESCRIPTION: Command to execute the Angular schematic that automatically migrates existing code to use the new Control Flow syntax introduced in Angular v17.

LANGUAGE: shell
CODE:
ng generate @angular/core:control-flow

----------------------------------------

TITLE: Initializing Basic Dependency Injection in Angular
DESCRIPTION: Demonstrates how to create and use an injector with basic class bindings for Engine and Car classes.

LANGUAGE: typescript
CODE:
class Engine {
}

class Car {
  constructor(@Inject(Engine) engine) {
  }
}

var inj = Injector.resolveAndCreate([
  bind(Car).toClass(Car),
  bind(Engine).toClass(Engine)
]);
var car = inj.get(Car);

----------------------------------------

TITLE: Defining Parent Component in Angular TypeScript
DESCRIPTION: This code snippet shows the definition of a ParentComponent in Angular. It demonstrates a potential setup that could lead to a cyclic import issue.

LANGUAGE: typescript
CODE:
// parent.component.ts

----------------------------------------

TITLE: Testing Zoneless Angular Components
DESCRIPTION: Configuration for testing components in a zoneless environment using TestBed.

LANGUAGE: typescript
CODE:
TestBed.configureTestingModule({
  providers: [provideExperimentalZonelessChangeDetection()]
});

const fixture = TestBed.createComponent(MyComponent);
await fixture.whenStable();

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change directory to the newly created Angular project

LANGUAGE: shell
CODE:
cd my-first-angular-app

----------------------------------------

TITLE: Configuring Library Exports in package.json
DESCRIPTION: Example of configuring additional export subpaths for library assets in package.json.

LANGUAGE: json
CODE:
"exports": {
  ".": {
    "sass": "./_index.scss",
  },
  "./theming": {
    "sass": "./_theming.scss"
  },
  "./prebuilt-themes/indigo-pink.css": {
    "style": "./prebuilt-themes/indigo-pink.css"
  }
}

----------------------------------------

TITLE: Defining Angular Upgrade Module Types and Classes
DESCRIPTION: TypeScript declarations for the Angular upgrade module including UpgradeAdapter and UpgradeAdapterRef classes. These classes facilitate the migration from AngularJS to Angular by providing methods for component and provider upgrades/downgrades.

LANGUAGE: typescript
CODE:
import { CompilerOptions } from '@angular/core';
import { Injector } from '@angular/core';
import { NgModuleRef } from '@angular/core';
import { Type } from '@angular/core';
import { Version } from '@angular/core';

// @public @deprecated
export class UpgradeAdapter {
    constructor(ng2AppModule: Type<any>, compilerOptions?: CompilerOptions | undefined);
    bootstrap(element: Element, modules?: any[], config?: IAngularBootstrapConfig): UpgradeAdapterRef;
    downgradeNg2Component(component: Type<any>): Function;
    downgradeNg2Provider(token: any): Function;
    registerForNg1Tests(modules?: string[]): UpgradeAdapterRef;
    upgradeNg1Component(name: string): Type<any>;
    upgradeNg1Provider(name: string, options?: {
        asToken: any;
    }): void;
}

// @public @deprecated
export class UpgradeAdapterRef {
    dispose(): void;
    // (undocumented)
    ng1Injector: IInjectorService;
    // (undocumented)
    ng1RootScope: IRootScopeService;
    // (undocumented)
    ng2Injector: Injector;
    // (undocumented)
    ng2ModuleRef: NgModuleRef<any>;
    ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void): void;
}

// @public (undocumented)
export const VERSION: Version;

----------------------------------------

TITLE: Defining TypeScript Interface for Schematic Options
DESCRIPTION: This TypeScript interface defines the structure for the options that can be passed to the schematic, corresponding to the schema.json file.

LANGUAGE: typescript
CODE:
export interface Schema {
  // The name of the service.
  name: string;

  // The path to create the service.
  path?: string;

  // The name of the project.
  project?: string;
}

----------------------------------------

TITLE: Displaying Form Values in Template
DESCRIPTION: Demonstrates how to display form values in the template using interpolation.

LANGUAGE: html
CODE:
<h2>Profile Form</h2>
<p>Name: {{ profileForm.value.name }}</p>
<p>Email: {{ profileForm.value.email }}</p>

----------------------------------------

TITLE: Configuring Optimization in Angular JSON
DESCRIPTION: Example of configuring fine-grained optimization options in the angular.json file for scripts, styles, and fonts.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "optimization": {
              "scripts": true,
              "styles": {
                "minify": true,
                "inlineCritical": true
              },
              "fonts": true
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Using UserDetailComponent in AppComponent Template
DESCRIPTION: Demonstrates usage of UserDetailComponent in AppComponent, binding a potentially null User object.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-root',
  template: '<user-detail [user]="selectedUser"></user-detail>',
})
export class AppComponent {
  selectedUser: User | null = null;
}

----------------------------------------

TITLE: TypeScript Error Example
DESCRIPTION: Example of TypeScript error when plugin interface is not properly defined

LANGUAGE: text
CODE:
[TS][Error] Property 'myPlugin' does not exist on type 'JQuery'

----------------------------------------

TITLE: Importing Components for Routing
DESCRIPTION: Imports newly generated components into the routing configuration file.

LANGUAGE: typescript
CODE:
import {FirstComponent} from './first/first.component';
import {SecondComponent} from './second/second.component';

----------------------------------------

TITLE: ESM Declaration in package.json
DESCRIPTION: Configuration to declare a package as using EcmaScript Modules

LANGUAGE: javascript
CODE:
{
  "type": "module"
}

----------------------------------------

TITLE: Binding contentEditable Attribute in Angular Component Template
DESCRIPTION: This snippet demonstrates how to bind the 'contentEditable' attribute of a div element to the 'isEditable' property in the component's template using property binding syntax.

LANGUAGE: angular-ts
CODE:
@Component({
    ...
    template: `<div [contentEditable]="isEditable"></div>`,
})

----------------------------------------

TITLE: Running Angular API Example Tests with Bazel
DESCRIPTION: Command for running tests for all examples in the packages/examples directory using Bazel. This ensures that the example applications behave correctly.

LANGUAGE: bash
CODE:
yarn bazel test //packages/examples/...

----------------------------------------

TITLE: Referencing Non-Exported Class in Angular Providers (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Reference to a non-exported class' error. It shows a provider referencing a class that is not exported, which the compiler cannot access when generating the class factory.

LANGUAGE: typescript
CODE:
// ERROR
abstract class MyStrategy { }

  …
  providers: [
    { provide: MyStrategy, useValue: … }
  ]
  …

----------------------------------------

TITLE: Registering Dispatcher with Event Contract in TypeScript
DESCRIPTION: Exports a function to register an EventDispatcher with an UnrenamedEventContract. This is likely used to set up event handling for a specific contract.

LANGUAGE: typescript
CODE:
// @public
export function registerDispatcher(eventContract: UnrenamedEventContract, dispatcher: EventDispatcher): void;

----------------------------------------

TITLE: Executing Angular Build Command
DESCRIPTION: Shell command to execute an Angular build using the new build system.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Using Array Options in Angular CLI
DESCRIPTION: Shows how to specify multiple values for array-type options in Angular CLI commands. Values can be provided either as space-separated list or as repeated options.

LANGUAGE: bash
CODE:
--option value1 value2
--option value1 --option value2

----------------------------------------

TITLE: Creating Side Effects with Effect in TypeScript
DESCRIPTION: Illustrates how to use the 'effect()' function to create side effects that automatically re-run when their dependencies change.

LANGUAGE: typescript
CODE:
const counter = signal(0);
effect(() => console.log('The counter is:', counter()));
// The counter is: 0

counter.set(1);
// The counter is: 1

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Provides access to the Angular CLI help documentation for additional information and commands.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Building and Packaging Angular DevTools for Firefox
DESCRIPTION: These commands build the Firefox version of Angular DevTools and package it into a zip file for submission to Firefox Add-ons.

LANGUAGE: shell
CODE:
# Build the Firefox version.
yarn devtools:build:firefox

# Package the extension.
(cd dist/bin/devtools/projects/shell-browser/src/prodapp && zip -r ~/devtools-firefox.zip *)

----------------------------------------

TITLE: linkedSignal with Custom Equality Comparison
DESCRIPTION: Demonstrates how to configure linkedSignal with custom equality functions for comparing values.

LANGUAGE: typescript
CODE:
const activeUser = signal({id: 123, name: 'Morgan', isAdmin: true});

const activeUserEditCopy = linkedSignal(() => activeUser(), {
  equal: (a, b) => a.id === b.id,
});

// Or, if separating `source` and `computation`
const activeUserEditCopy = linkedSignal({
  source: activeUser,
  computation: user => user,
  equal: (a, b) => a.id === b.id,
});

----------------------------------------

TITLE: Nesting Routes
DESCRIPTION: Demonstrates how to set up nested routes in Angular.

LANGUAGE: typescript
CODE:
const routes: Routes = [
  {
    path: 'first-component',
    component: FirstComponent,
    children: [
      {
        path: 'child-a',
        component: ChildAComponent,
      },
      {
        path: 'child-b',
        component: ChildBComponent,
      },
    ],
  },
];

----------------------------------------

TITLE: Defining Basic Routes
DESCRIPTION: Sets up basic routes for an Angular application.

LANGUAGE: typescript
CODE:
const routes: Routes = [
  { path: 'first-component', component: FirstComponent },
  { path: 'second-component', component: SecondComponent },
];

----------------------------------------

TITLE: Partial Compilation TypeScript Configuration
DESCRIPTION: TypeScript configuration for partial compilation mode in Angular libraries

LANGUAGE: javascript
CODE:
{
  "angularCompilerOptions": {
    "compilationMode": "partial",
  }
}

----------------------------------------

TITLE: Creating Git Fixup Commits
DESCRIPTION: Examples of creating fixup commits using the git commit --fixup command. Shows how to create fixup commits for the last commit (HEAD) or a specific commit by SHA.

LANGUAGE: sh
CODE:
# Create a fixup commit to fix up the last commit on the branch:
git commit --fixup HEAD ...

# Create a fixup commit to fix up commit with SHA <COMMIT_SHA>:
git commit --fixup <COMMIT_SHA> ...

----------------------------------------

TITLE: Configuring AOT Compilation in TypeScript
DESCRIPTION: This JSON snippet shows how to configure the 'strictMetadataEmit' option in the TypeScript configuration file for AOT compilation. This option ensures that ngc reports syntax errors immediately rather than producing a .metadata.json file with errors.

LANGUAGE: json
CODE:
"angularCompilerOptions": {
  …
  "strictMetadataEmit" : true
}

----------------------------------------

TITLE: Styling active routes with routerLinkActive in Angular
DESCRIPTION: Update the anchor tags in app.component.html to use the routerLinkActive directive for styling active routes.

LANGUAGE: html
CODE:
<a routerLink="/crisis-list" routerLinkActive="activebutton" ariaCurrentWhenActive="page">Crisis Center</a>
<a routerLink="/heroes-list" routerLinkActive="activebutton" ariaCurrentWhenActive="page">Heroes</a>

----------------------------------------

TITLE: Component File Structure
DESCRIPTION: Example of proper file organization for an Angular component with separated template and styles.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-hero-list',
  templateUrl: './hero-list.component.html',
  styleUrls: ['./hero-list.component.css']
})
export class HeroListComponent {
  // Component logic here
}

----------------------------------------

TITLE: Configuring Automatic Code Coverage in angular.json
DESCRIPTION: Configuration settings in angular.json to enable automatic code coverage reporting for every test run.

LANGUAGE: json
CODE:
"test": {
  "options": {
    "codeCoverage": true
  }
}

----------------------------------------

TITLE: Adding a redirect route in Angular
DESCRIPTION: Update the routes in app.routes.ts to include a redirect from the empty path to the heroes-list.

LANGUAGE: typescript
CODE:
{path: '', redirectTo: '/heroes-list', pathMatch: 'full'},

----------------------------------------

TITLE: Configuring Angular Tutorial with JSON
DESCRIPTION: Defines the structure and options for the config.json file used to configure individual tutorial steps. This file specifies the tutorial title, navigation, source code locations, and presentation type.

LANGUAGE: json
CODE:
{
  "title": "defines the tutorial title used in the tutorial nav",
  "nextTutorial": "the path of the next tutorial (only in `intro/` step)",
  "src": "the relative path to an external directory, which defines the tutorial source code used in the embedded editor",
  "answerSrc": "the relative path to an external directory, which defines the tutorial answer used in the embedded editor",
  "openFiles": "an array of files to be open in the editor",
  "type": "the type denotes how the tutorial will be presented and which components are necessary for that tutorial"
}

----------------------------------------

TITLE: Router Route Configuration Interface
DESCRIPTION: Interface defining the structure and options for route configuration objects

LANGUAGE: typescript
CODE:
export interface Route {
    canActivate?: Array<CanActivateFn | DeprecatedGuard>;
    canActivateChild?: Array<CanActivateChildFn | DeprecatedGuard>;
    canDeactivate?: Array<CanDeactivateFn<any> | DeprecatedGuard>;
    canMatch?: Array<CanMatchFn | DeprecatedGuard>;
    children?: Routes;
    component?: Type<any>;
    data?: Data;
    loadChildren?: LoadChildren;
    loadComponent?: () => Type<unknown> | Observable<Type<unknown>>;
    path?: string;
}

----------------------------------------

TITLE: Serving Angular API Examples with Bazel
DESCRIPTION: Commands for serving individual examples and core examples using Bazel. These commands are used to run development servers for specific example applications.

LANGUAGE: bash
CODE:
# Serving individual examples (e.g. common)
yarn bazel run //packages/examples/common:devserver

# "core" examples
yarn bazel run //packages/examples/core:devserver

----------------------------------------

TITLE: Implementing Dynamic Form Question Component
DESCRIPTION: Creates the component class for rendering individual questions in the dynamic form. It receives the form group and question as inputs and provides a method to check form control validity.

LANGUAGE: TypeScript
CODE:
import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';

import { QuestionBase } from './question-base';

@Component({
  selector: 'app-question',
  templateUrl: './dynamic-form-question.component.html'
})
export class DynamicFormQuestionComponent {
  @Input() question!: QuestionBase<string>;
  @Input() form!: FormGroup;
  get isValid() { return this.form.controls[this.question.key].valid; }
}


----------------------------------------

TITLE: Unsafe Property Binding on iframe Element in Angular HTML
DESCRIPTION: This snippet demonstrates an incorrect usage of property binding for the 'sandbox' attribute on an iframe element, which triggers an Angular security error.

LANGUAGE: angular-html
CODE:
<iframe [sandbox]="'allow-scripts'" src="..."></iframe>

----------------------------------------

TITLE: Building Angular DevTools for Chrome Release
DESCRIPTION: Compiles and packages the Angular DevTools extension for release on the Chrome browser platform.

LANGUAGE: shell
CODE:
yarn devtools:build:chrome

----------------------------------------

TITLE: Using Custom ID with $localize in TypeScript
DESCRIPTION: Example of using a custom ID with the $localize tagged template literal in component code.

LANGUAGE: typescript
CODE:
variableText1 = $localize`:@@introductionHeader:Hello i18n!`;

----------------------------------------

TITLE: Example of Migration TODO Comment
DESCRIPTION: Example showing how TODO comments are inserted for skipped migrations when using --insert-todos flag

LANGUAGE: typescript
CODE:
// TODO: Skipped for migration because:
//  Your application code writes to the input. This prevents migration.
@Input() myInput = false;

----------------------------------------

TITLE: Unsupported Angular Declarations
DESCRIPTION: Examples of declarations that are not supported in Angular expressions including variable declarations, functions, and classes.

LANGUAGE: typescript
CODE:
let label = 'abc'
const item = 'apple'
function myCustomFunction() { }
() => { }
class Rectangle { }

----------------------------------------

TITLE: Creating ReversePipe Decorator
DESCRIPTION: Adds the @Pipe decorator configuration for the ReversePipe, defining the pipe name as 'reverse' for use in templates.

LANGUAGE: typescript
CODE:
@Pipe({
    name: 'reverse'
})

----------------------------------------

TITLE: Angular Issue Response: Support Request
DESCRIPTION: Template response for support requests that should be redirected to StackOverflow

LANGUAGE: markdown
CODE:
Hello, we reviewed this issue and determined that it doesn't fall into the bug report or feature request category. This issue tracker is not suitable for support requests, please repost your issue on [StackOverflow](https://stackoverflow.com/) using tag `angular`.

If you are wondering why we don't resolve support issues via the issue tracker, please [check out this explanation](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#question).

----------------------------------------

TITLE: Converting Eagerly Loaded Routes to Lazy Loaded in Angular
DESCRIPTION: Example of how the migration converts an eagerly loaded standalone component route to a lazy loaded route in an Angular application. It shows the changes made to the routing configuration in the app.module.ts file.

LANGUAGE: typescript
CODE:
// app.module.ts
import { HomeComponent } from './home/home.component';

@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'home',
        component: HomeComponent, // HomeComponent is standalone and eagerly loaded
      },
    ]),
  ],
})
export class AppModule {}

LANGUAGE: typescript
CODE:
// app.module.ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'home',
        // ↓ HomeComponent is now lazy loaded
        loadComponent: () => import('./home/home.component').then(m => m.HomeComponent),
      },
    ]),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Angular Component Type Definition with Ivy
DESCRIPTION: Example of the TypeScript type definition for an Angular component compiled with Ivy, including the static ɵcmp field.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
export class GreetComponent {
  static ɵcmp: i0.NgComponentDef<
    GreetComponent,
    'greet',
    {input: 'input'}
  >;
}

----------------------------------------

TITLE: Grouping Parallel Animations in Angular TypeScript
DESCRIPTION: This example uses group() to apply two independent animations to the same element in parallel, with different timing configurations for enter and leave transitions.

LANGUAGE: typescript
CODE:
animations: [
  trigger('flyInOut', [
    transition(':enter', [
      style({ transform: 'translateX(-100%)' }),
      group([
        animate('0.3s ease', style({ transform: 'translateX(0)' })),
        animate('0.3s 0.1s ease', style({ opacity: 1 }))
      ])
    ]),
    transition(':leave', [
      group([
        animate('0.3s ease', style({ transform: 'translateX(100%)' })),
        animate('0.3s 0.2s ease', style({ opacity: 0 }))
      ])
    ])
  ])
]

----------------------------------------

TITLE: Creating Computed Signals in Angular
DESCRIPTION: Shows how to create a computed signal that derives its value from another signal. This snippet illustrates the concept of reactivity in Angular signals.

LANGUAGE: typescript
CODE:
import {signal, computed} from '@angular/core';

const firstName = signal('Morgan');
const firstNameCapitalized = computed(() => firstName().toUpperCase());

console.log(firstNameCapitalized()); // MORGAN

----------------------------------------

TITLE: Default Import Transform Example
DESCRIPTION: Example showing how TypeScript transforms default imports differently from named imports, explaining why special handling is needed to preserve these imports.

LANGUAGE: typescript
CODE:
import Foo from './foo';

LANGUAGE: javascript
CODE:
let foo_1 = require('./foo');

inject(foo_1.default);

----------------------------------------

TITLE: Importing ReactiveFormsModule in Angular Component
DESCRIPTION: Shows how to import and configure ReactiveFormsModule in an Angular component with a basic form template.

LANGUAGE: typescript
CODE:
import { ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-root',
  template: `
    <form>
      <label>Name
        <input type="text" />
      </label>
      <label>Email
        <input type="email" />
      </label>
      <button type="submit">Submit</button>
    </form>
  `,
  imports: [ReactiveFormsModule],
})

----------------------------------------

TITLE: Implementing EventInfoWrapper Class in TypeScript
DESCRIPTION: Defines the EventInfoWrapper class for encapsulating and manipulating event information. It provides methods for getting and setting various event properties.

LANGUAGE: typescript
CODE:
// @public
export class EventInfoWrapper {
    constructor(eventInfo: EventInfo);
    // (undocumented)
    clone(): EventInfoWrapper;
    // (undocumented)
    readonly eventInfo: EventInfo;
    // (undocumented)
    getAction(): {
        name: string;
        element: Element;
    } | undefined;
    // (undocumented)
    getContainer(): Element;
    // (undocumented)
    getEvent(): Event;
    // (undocumented)
    getEventType(): string;
    // (undocumented)
    getIsReplay(): boolean | undefined;
    // (undocumented)
    getResolved(): boolean | undefined;
    // (undocumented)
    getTargetElement(): Element;
    // (undocumented)
    getTimestamp(): number;
    // (undocumented)
    setAction(action: ActionInfo | undefined): void;
    // (undocumented)
    setContainer(container: Element): void;
    // (undocumented)
    setEvent(event: Event): void;
    // (undocumented)
    setEventType(eventType: string): void;
    // (undocumented)
    setIsReplay(replay: boolean): void;
    // (undocumented)
    setResolved(resolved: boolean): void;
    // (undocumented)
    setTargetElement(targetElement: Element): void;
    // (undocumented)
    setTimestamp(timestamp: number): void;
}

----------------------------------------

TITLE: Creating Child Injectors in Angular DI
DESCRIPTION: Shows how to create a child injector that inherits bindings from its parent and can override or add new bindings.

LANGUAGE: typescript
CODE:
var parent = Injector.resolveAndCreate([
  bind(Engine).toClass(TurboEngine)
]);
var child = parent.resolveAndCreateChild([Car]);

var car = child.get(Car); // uses the Car binding from the child injector and Engine from the parent injector.

----------------------------------------

TITLE: Merging PRs using ng-dev CLI in Angular Project
DESCRIPTION: This command uses the ng-dev CLI tool to merge a pull request in the Angular project. It requires the PR number as an argument.

LANGUAGE: sh
CODE:
$ yarn ng-dev pr merge <pr number>

----------------------------------------

TITLE: Running Route Lazy Loading Migration in Angular CLI
DESCRIPTION: Commands to run the route lazy loading migration schematic using Angular CLI. It includes options for applying the migration to the entire application or a specific subset of files.

LANGUAGE: bash
CODE:
ng generate @angular/core:route-lazy-loading

LANGUAGE: bash
CODE:
ng generate @angular/core:route-lazy-loading --path src/app/sub-component

----------------------------------------

TITLE: Compiled Angular Component in JavaScript (Pre-Ivy)
DESCRIPTION: Example of how an Angular component is typically compiled to JavaScript before Ivy, using decorator metadata.

LANGUAGE: javascript
CODE:
const tslib_1 = require("tslib");
const core_1 = require("@angular/core");
let GreetComponent = class GreetComponent {
};
tslib_1.__decorate([
    core_1.Input(),
    tslib_1.__metadata("design:type", String)
], GreetComponent.prototype, "name", void 0);
GreetComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'greet',
        template: '<div> Hello, {{name}}! </div>'
    })
], GreetComponent);

----------------------------------------

TITLE: Using NgOptimizedImage Directive in Angular Template
DESCRIPTION: This code example shows how to use the NgOptimizedImage directive by replacing the src attribute with ngSrc for both static and dynamic image sources.

LANGUAGE: typescript
CODE:
import { NgOptimizedImage } from '@angular/common';

@Component({
  template: `
    ...
    <li>
      Static Image:
      <img ngSrc="/assets/logo.svg" alt="Angular logo" width="32" height="32" />
    </li>
    <li>
      Dynamic Image:
      <img [ngSrc]="logoUrl" [alt]="logoAlt" width="32" height="32" />
    </li>
    ...
  `,
  imports: [NgOptimizedImage],
})

----------------------------------------

TITLE: Displaying Angular Compiler Errors Table in Markdown
DESCRIPTION: A markdown table listing Angular compiler errors with their codes, names, and links to detailed error pages.

LANGUAGE: markdown
CODE:
| Code     | Name                                                       |
| :------- | :--------------------------------------------------------- |
| `NG1001` | [Argument Not Literal](errors/NG1001)                      |
| `NG2003` | [Missing Token](errors/NG2003)                             |
| `NG2009` | [Invalid Shadow DOM selector](errors/NG2009)               |
| `NG3003` | [Import Cycle Detected](errors/NG3003)                     |
| `NG6100` | [NgModule.id Set to module.id anti-pattern](errors/NG6100) |
| `NG8001` | [Invalid Element](errors/NG8001)                           |
| `NG8002` | [Invalid Attribute](errors/NG8002)                         |
| `NG8003` | [Missing Reference Target](errors/NG8003)                  |

----------------------------------------

TITLE: Building Angular DevTools for Firefox Release
DESCRIPTION: Compiles and packages the Angular DevTools extension for release on the Firefox browser platform.

LANGUAGE: shell
CODE:
yarn devtools:build:firefox

----------------------------------------

TITLE: Angular CLI E2E Package Selection Prompt
DESCRIPTION: This snippet shows the CLI prompt for selecting an E2E testing package when the 'e2e' target is not found in the project.

LANGUAGE: shell
CODE:
Cannot find "e2e" target for the specified project.
You can add a package that implements these capabilities.

For example:
Cypress: ng add @cypress/schematic
Nightwatch: ng add @nightwatch/schematics
WebdriverIO: ng add @wdio/schematics
Playwright: ng add playwright-ng-schematics
Puppeteer: ng add @puppeteer/ng-schematics

Would you like to add a package with "e2e" capabilities now?
No
❯ Cypress
Nightwatch
WebdriverIO
Playwright
Puppeteer

----------------------------------------

TITLE: Defining SubmitButton Component with Input Coercion
DESCRIPTION: Creates a SubmitButton component with a disabled input that coerces string values to boolean.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'submit-button',
  template: `
    <div class="wrapper">
      <button [disabled]="disabled">Submit</button>
    </div>
  `,
})
class SubmitButton {
  private _disabled: boolean;

  @Input()
  get disabled(): boolean {
    return this._disabled;
  }

  set disabled(value: boolean) {
    this._disabled = value;
  }

  static ngAcceptInputType_disabled: boolean|'';
}

----------------------------------------

TITLE: Component Input Type Definition
DESCRIPTION: TypeScript example showing how to define a component with an input property

LANGUAGE: typescript
CODE:
@Component(…)
class MyDialog {
  @Input() content: string;
}

----------------------------------------

TITLE: Importing RouterLink Directive in Angular Component
DESCRIPTION: Shows how to import RouterLink and RouterOutlet from @angular/router and add them to component imports array.

LANGUAGE: typescript
CODE:
...
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
  imports: [RouterLink, RouterOutlet],
  ...
})

----------------------------------------

TITLE: Publishing Build Artifacts
DESCRIPTION: Commands for publishing snapshot builds to GitHub repositories for testing

LANGUAGE: shell
CODE:
$ export TOKEN=[get one from https://github.com/settings/tokens]
$ CREATE_REPOS=1 ./scripts/ci/publish-build-artifacts.sh [GitHub username]

----------------------------------------

TITLE: Defining Angular Component with LView and TView.data Layout
DESCRIPTION: Example of an Angular component definition showing how the template is represented in LView and TView.data arrays. It demonstrates the DECLS section layout for DOM elements.

LANGUAGE: typescript
CODE:
@Component({
  template: `<div>Hello <b>World</b>!</div>`
})
class MyApp {

  static ɵcmp = ɵɵdefineComponent({
    ...,
    decls: 5,
    template: function(rf: RenderFlags, ctx: MyApp) {
      if (rf & RenderFlags.Create) {
        ɵɵelementStart(0, 'div');
        ɵɵtext(1, 'Hello ');
        ɵɵelementStart(2, 'b');
        ɵɵtext(3, 'World');
        ɵɵelementEnd();
        ɵɵtext(4, '!');
        ɵɵelementEnd();
      }
      ...
    }
  });
}

----------------------------------------

TITLE: Building Angular Project with Service Worker
DESCRIPTION: This command builds the Angular project, which now includes service worker support for production use.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Decorative Header Component Usage in HTML
DESCRIPTION: Example of using a custom docs-decorative-header component to display the essentials section header with an image.

LANGUAGE: HTML
CODE:
<docs-decorative-header title="Essentials" imgSrc="adev/src/assets/images/what_is_angular.svg">
A short introduction to some of Angular's main concepts.
</docs-decorative-header>

----------------------------------------

TITLE: Configuring View Transitions in Angular Router
DESCRIPTION: Shows how to enable view transitions in Angular using either standalone bootstrap or NgModule configuration.

LANGUAGE: typescript
CODE:
// Standalone bootstrap
bootstrapApplication(MyApp, {providers: [
  provideRouter(ROUTES, withViewTransitions()),
]});

// NgModule bootstrap
@NgModule({
  imports: [RouterModule.forRoot(routes, {enableViewTransitions: true})]
})
export class AppRouting {}

----------------------------------------

TITLE: Defining EarlyJsactionDataContainer Interface in TypeScript
DESCRIPTION: Declares an interface for a container holding early jsaction data. It includes optional properties for storing data by app ID.

LANGUAGE: typescript
CODE:
// @public (undocumented)
export interface EarlyJsactionDataContainer {
    // (undocumented)
    _ejsa?: EarlyJsactionData;
    // (undocumented)
    _ejsas?: {
        [appId: string]: EarlyJsactionData | undefined;
    };
}

----------------------------------------

TITLE: Implementing Custom Metrics Without console.time
DESCRIPTION: Shows how to measure custom metrics by setting a numeric value on the window object, specifically for measuring bootstrap time.

LANGUAGE: javascript
CODE:
bootstrap(App)
  .then(() => {
    window.timeToBootstrap = Date.now() - performance.timing.navigationStart;
  });

----------------------------------------

TITLE: Angular Component with @Output Before Migration
DESCRIPTION: Example of an Angular component using the @Output decorator before migration. It demonstrates the traditional way of defining and using an output event.

LANGUAGE: typescript
CODE:
import {Component, Output} from '@angular/core';

@Component({
  template: `<button (click)="someMethod('test')">emit</button>`
})
export class MyComponent {
  @Output() someChange = new EventEmitter<string>();

  someMethod(value: string): void {
    this.someChange.emit(value);
  }
}

----------------------------------------

TITLE: Correcting Function Calls in Angular Providers (TypeScript)
DESCRIPTION: This snippet shows how to fix the 'Function calls are not supported' error by using exported functions instead of anonymous functions or direct function calls in providers.

LANGUAGE: typescript
CODE:
// CORRECTED
import { calculateValue } from './utilities';

export function myStrategy() { … }
export function otherStrategy() { … }
export function someValueFactory() {
  return calculateValue();
}
  …
  providers: [
    { provide: MyStrategy, useFactory: myStrategy },
    { provide: OtherStrategy, useFactory: otherStrategy },
    { provide: SomeValue, useFactory: someValueFactory }
  ]
  …

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Command to access Angular CLI help documentation directly from the command line.

LANGUAGE: Shell
CODE:
ng help

----------------------------------------

TITLE: Defining Custom ID in HTML Template
DESCRIPTION: Example of using a custom ID (introductionHeader) in an HTML template with the i18n attribute.

LANGUAGE: html
CODE:
<h1 i18n="@@introductionHeader">Hello i18n!</h1>

----------------------------------------

TITLE: Conditional Usage with ngIf Template
DESCRIPTION: Example demonstrating how to conditionally apply ngSkipHydration using ngIf directive.

LANGUAGE: html
CODE:
import {Component} from '@angular/core';

@Component({
  template: `
    <div *ngIf="hasUser; else noUser">
      <user-viewer ngSkipHydration />
    </div>

    <ng-template #noUser>
      <user-viewer />
    </ng-template>
  `,
})
class MyComponent {}

----------------------------------------

TITLE: Creating Impure Flying Heroes Pipe in Angular
DESCRIPTION: Implementation of an impure pipe that detects changes within the array elements. Executes on every change detection cycle.

LANGUAGE: typescript
CODE:
@Pipe({
  name: 'flyingHeroesImpure',
  pure: false
})
export class FlyingHeroesImpurePipe extends FlyingHeroesPipe {}

----------------------------------------

TITLE: Sample Article Content for Testing Defer Loading
DESCRIPTION: Example article content to demonstrate scroll-triggered defer loading behavior.

LANGUAGE: html
CODE:
<article>
  <p>Angular is my favorite framework, and this is why. Angular has the coolest deferrable view feature that makes defer loading content the easiest and most ergonomic it could possibly be. The Angular community is also filled with amazing contributors and experts that create excellent content. The community is welcoming and friendly, and it really is the best community out there.</p>
  <p>I can't express enough how much I enjoy working with Angular. It offers the best developer experience I've ever had. I love that the Angular team puts their developers first and takes care to make us very happy. They genuinely want Angular to be the best framework it can be, and they're doing such an amazing job at it, too. This statement comes from my heart and is not at all copied and pasted. In fact, I'll say these exact same things again a few times.</p>
  <p>Angular is my favorite framework, and this is why. Angular has the coolest deferrable view feature that makes defer loading content the easiest and most ergonomic it could possibly be. The Angular community is also filled with amazing contributors and experts that create excellent content. The community is welcoming and friendly, and it really is the best community out there.</p>
  <p>I can't express enough how much I enjoy working with Angular. It offers the best developer experience I've ever had. I love that the Angular team puts their developers first and takes care to make us very happy. They genuinely want Angular to be the best framework it can be, and they're doing such an amazing job at it, too. This statement comes from my heart and is not at all copied and pasted. In fact, I'll say these exact same things again a few times.</p>
  <p>Angular is my favorite framework, and this is why. Angular has the coolest deferrable view feature that makes defer loading content the easiest and most ergonomic it could possibly be. The Angular community is also filled with amazing contributors and experts that create excellent content. The community is welcoming and friendly, and it really is the best community out there.</p>
  <p>I can't express enough how much I enjoy working with Angular. It offers the best developer experience I've ever had. I love that the Angular team puts their developers first and takes care to make us very happy. They genuinely want Angular to be the best framework it can be, and they're doing such an amazing job at it, too. This statement comes from my heart and is not at all copied and pasted.</p>
</article>

----------------------------------------

TITLE: Cloning Angular Repository
DESCRIPTION: Commands for forking, cloning and configuring the Angular repository with upstream remote

LANGUAGE: shell
CODE:
# Clone your GitHub repository:
git clone git@github.com:<github username>/angular.git

# Go to the Angular directory:
cd angular

# Add the main Angular repository as an upstream remote to your repository:
git remote add upstream https://github.com/angular/angular.git

----------------------------------------

TITLE: Factory Function for Dependency Injection
DESCRIPTION: Defines a Factory class and related functions used for efficient monomorphic detection of factories at runtime in the dependency injection system.

LANGUAGE: typescript
CODE:
class Factory {
  /// Marker set to true during factory invocation to see if we get into recursive loop.
  /// Recursive loop causes an error to be displayed.
  resolving = false;
  constructor(public factory: Function) { }
}
function factory(fn) {
  return new Factory(fn);
}
const FactoryPrototype = Factory.prototype;
function isFactory(obj: any): obj is Factory {
  // See: https://jsperf.com/instanceof-vs-getprototypeof
  return typeof obj === 'object' && Object.getPrototypeOf(obj) === FactoryPrototype;
}

----------------------------------------

TITLE: Version Updates Handling in Angular Service Worker
DESCRIPTION: Implementation of a service that subscribes to version updates from the SwUpdate service. It logs different types of version update events including detection, installation success, and failures.

LANGUAGE: typescript
CODE:
@Injectable()
export class LogUpdateService {
  constructor(updates: SwUpdate) {
    updates.versionUpdates.subscribe(evt => {
      switch (evt.type) {
        case 'VERSION_DETECTED':
          console.log(`Downloading new app version: ${evt.version.hash}`);
          break;
        case 'VERSION_READY':
          console.log(`Current app version: ${evt.currentVersion.hash}`);
          console.log(`New app version ready for use: ${evt.latestVersion.hash}`);
          break;
        case 'VERSION_INSTALLATION_FAILED':
          console.log(`Failed to install app version '${evt.version.hash}': ${evt.error}`);
          break;
      }
    });
  }
}

----------------------------------------

TITLE: Production Build with French Locale
DESCRIPTION: Command to create a production build specifically for the French locale.

LANGUAGE: bash
CODE:
ng build --configuration="production,fr"

----------------------------------------

TITLE: Defining AbstractControl Class in Angular Forms
DESCRIPTION: This code defines the AbstractControl class, which is the base class for form controls in Angular. It includes methods for validation, state management, and value access.

LANGUAGE: TypeScript
CODE:
export abstract class AbstractControl<TValue = any, TRawValue extends TValue = TValue> {
    constructor(validators: ValidatorFn | ValidatorFn[] | null, asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null);
    addAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void;
    addValidators(validators: ValidatorFn | ValidatorFn[]): void;
    get asyncValidator(): AsyncValidatorFn | null;
    set asyncValidator(asyncValidatorFn: AsyncValidatorFn | null);
    clearAsyncValidators(): void;
    clearValidators(): void;
    get dirty(): boolean;
    disable(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    get disabled(): boolean;
    enable(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    get enabled(): boolean;
    readonly errors: ValidationErrors | null;
    readonly events: Observable<ControlEvent<TValue>>;
    get<P extends string | readonly (string | number)[]>(path: P): AbstractControl<ɵGetProperty<TRawValue, P>> | null;
    get<P extends string | Array<string | number>>(path: P): AbstractControl<ɵGetProperty<TRawValue, P>> | null;
    getError(errorCode: string, path?: Array<string | number> | string): any;
    getRawValue(): any;
    hasAsyncValidator(validator: AsyncValidatorFn): boolean;
    hasError(errorCode: string, path?: Array<string | number> | string): boolean;
    hasValidator(validator: ValidatorFn): boolean;
    get invalid(): boolean;
    markAllAsTouched(opts?: {
        emitEvent?: boolean;
    }): void;
    markAsDirty(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    markAsPending(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    markAsPristine(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    markAsTouched(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    markAsUntouched(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    get parent(): FormGroup | FormArray | null;
    abstract patchValue(value: TValue, options?: Object): void;
    get pending(): boolean;
    get pristine(): boolean;
    removeAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void;
    removeValidators(validators: ValidatorFn | ValidatorFn[]): void;
    abstract reset(value?: TValue, options?: Object): void;
    get root(): AbstractControl;
    setAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[] | null): void;
    setErrors(errors: ValidationErrors | null, opts?: {
        emitEvent?: boolean;
    }): void;
    setParent(parent: FormGroup | FormArray | null): void;
    setValidators(validators: ValidatorFn | ValidatorFn[] | null): void;
    abstract setValue(value: TRawValue, options?: Object): void;
    get status(): FormControlStatus;
    readonly statusChanges: Observable<FormControlStatus>;
    get touched(): boolean;
    get untouched(): boolean;
    get updateOn(): FormHooks;
    updateValueAndValidity(opts?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    get valid(): boolean;
    get validator(): ValidatorFn | null;
    set validator(validatorFn: ValidatorFn | null);
    readonly value: TValue;
    readonly valueChanges: Observable<TValue>;
}

----------------------------------------

TITLE: Basic Angular Template Structure
DESCRIPTION: Example of a typical Angular template with natural formatting and indentation showing nested elements and labels.

LANGUAGE: angular-html
CODE:
<section>
  <h3>User profile</p>
  <label>
    User name
    <input>
  </label>
</section>

----------------------------------------

TITLE: Using DatePipe with Custom Format in Angular Template
DESCRIPTION: This example shows how to pass a custom format parameter to the DatePipe in an Angular template. It demonstrates using the colon (:) to specify the parameter.

LANGUAGE: angular-html
CODE:
<p>The hero's birthday is in {{ birthday | date:'yyyy' }}</p>

----------------------------------------

TITLE: Listening to Child Component Events in Angular Parent Template
DESCRIPTION: This HTML snippet demonstrates how to listen to events emitted by a child component in the parent component's template. It shows the syntax for binding to the output event.

LANGUAGE: html
CODE:
<app-child (addItemEvent)="addItem($event)" />

----------------------------------------

TITLE: Defining RuntimeErrorCode Enum in TypeScript for Angular Router
DESCRIPTION: Enumeration of error codes used by Angular's router to identify specific runtime errors. Includes codes for common routing issues like invalid configurations, redirect problems, and URL parsing errors. Each code represents a unique error scenario in the routing system.

LANGUAGE: typescript
CODE:
export const enum RuntimeErrorCode {
    EMPTY_PATH_WITH_PARAMS = 4009,
    FOR_ROOT_CALLED_TWICE = 4007,
    INFINITE_REDIRECT = 4016,
    INVALID_DOUBLE_DOTS = 4005,
    INVALID_ROOT_URL_SEGMENT = 4015,
    INVALID_ROUTE_CONFIG = 4014,
    INVALID_ROUTER_LINK_INPUTS = 4016,
    MISPLACED_OUTLETS_COMMAND = 4004,
    MISSING_REDIRECT = 4001,
    NAMED_OUTLET_REDIRECT = 4000,
    NO_MATCH = 4002,
    NULLISH_COMMAND = 4008,
    OUTLET_ALREADY_ACTIVATED = 4013,
    OUTLET_NOT_ACTIVATED = 4012,
    ROOT_SEGMENT_MATRIX_PARAMS = 4003,
    TWO_SEGMENTS_WITH_SAME_OUTLET = 4006,
    UNEXPECTED_VALUE_IN_URL = 4011,
    UNPARSABLE_URL = 4010
}

----------------------------------------

TITLE: Initializing HTML Structure for Performance Testing
DESCRIPTION: Sets up a basic HTML structure with buttons to reset and fill a container element, used for measuring script execution and render time.

LANGUAGE: html
CODE:
<button id="reset" onclick="reset()">Reset</button>
<button id="fill" onclick="fill()">fill innerHTML</button>
<div id="container"></div>
<script>
  var container = document.getElementById('container');
  var complexHtmlString = '...'; // TODO

  function reset() { container.innerHTML = ''; }

  function fill() {
    container.innerHTML = complexHtmlString;
  }
</script>

----------------------------------------

TITLE: Using KeyValue Pipe for Object Iteration in Angular Templates
DESCRIPTION: When dealing with objects that are not iterable, the KeyValue pipe can be used to iterate over key-value pairs in Angular templates. This approach is an alternative to using NgFor with non-iterable objects.

LANGUAGE: typescript
CODE:
{{ '{' }}% for (let item of object | keyvalue) %{{ '}' }}
  Key: {{ '{{' }}item.key{{ '}}' }}, Value: {{ '{{' }}item.value{{ '}}' }}
{{ '{' }}% endfor %{{ '}' }}

----------------------------------------

TITLE: Resolving Bazel Dependency Issues in Angular.dev Build
DESCRIPTION: Commands to clean Bazel cache and resolve dependency issues that may cause build failures. The first command attempts a simple clean, while the second uses the expunge flag for a more thorough clean.

LANGUAGE: bash
CODE:
# Try this first
yarn bazel clean

# If that doesn't work, try it with the expunge flag
yarn bazel clean --expunge

----------------------------------------

TITLE: Exporting Top-Level Variables in TypeScript
DESCRIPTION: Demonstrates the performance implications of exporting top-level variables in TypeScript and suggests a more efficient alternative using getter and setter functions.

LANGUAGE: typescript
CODE:
// Typescript
export let exported = 0;
let notExported = 0;

notExported = exported;

// Would be compiled to
exports.exported = 0;
var notExported = 0;

notExported = exports.exported;

LANGUAGE: typescript
CODE:
let exported = 0;

export function getExported() { return exported; }
export function setExported(v) { exported = v; }

----------------------------------------

TITLE: Adding Angular Service Worker Package with CLI
DESCRIPTION: This command adds the @angular/pwa package to your project, configuring it to use service workers and generating necessary support files. It's a crucial step in setting up a service worker for an Angular application.

LANGUAGE: bash
CODE:
ng add @angular/pwa

----------------------------------------

TITLE: Backwards Compatible Constructor Migration
DESCRIPTION: Example demonstrating migration with backwards compatible constructors enabled to handle class inheritance scenarios.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyService } from './service';

@Component()
export class MyComp {
  constructor(private service: MyService) {}
}

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyService } from './service';

@Component()
export class MyComp {
  private service = inject(MyService);

  /** Inserted by Angular inject() migration for backwards compatibility */
  constructor(...args: unknown[]);

  constructor() {}
}

----------------------------------------

TITLE: Importing and configuring Router in Angular
DESCRIPTION: Import provideRouter from @angular/router and configure it in the app.config.ts file.

LANGUAGE: typescript
CODE:
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';

providers: [provideRouter(routes)]

----------------------------------------

TITLE: Generating Angular Components and Other Structures
DESCRIPTION: Angular CLI command for generating new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: Shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Specifying Output Path for Extracted Language File
DESCRIPTION: Demonstrates how to set a custom output path when extracting the source language file.

LANGUAGE: bash
CODE:
ng extract-i18n --output-path src/locale

----------------------------------------

TITLE: Converting Arrow Functions for AOT Compatibility
DESCRIPTION: These snippets demonstrate how to convert an arrow function in a component's metadata to an exported function, making it compatible with AOT compilation. The first snippet shows the problematic arrow function, while the second shows the corrected version.

LANGUAGE: typescript
CODE:
@Component({
  …
  providers: [{provide: server, useFactory: () => new Server()}]
})

LANGUAGE: typescript
CODE:
export function serverFactory() {
  return new Server();
}

@Component({
  …
  providers: [{provide: server, useFactory: serverFactory}]
})

----------------------------------------

TITLE: Creating Output from Observable in Angular Directive
DESCRIPTION: Demonstrates how to create a component/directive output that emits based on an RxJS observable using outputFromObservable. This example shows implementation in a Draggable directive where pointer movements are converted to output events.

LANGUAGE: typescript
CODE:
import {Directive} from '@angular/core';
import {outputFromObservable} from '@angular/core/rxjs-interop';

@Directive({/*...*/})
class Draggable {
  pointerMoves$: Observable<PointerMovements> = listenToPointerMoves();
  
  // Whenever `pointerMoves$` emits, the `pointerMove` event fires.
  pointerMove = outputFromObservable(this.pointerMoves$);
}

----------------------------------------

TITLE: Binding to Element Attribute in Angular HTML
DESCRIPTION: This snippet demonstrates how to bind an element's attribute (in this case, the 'src' attribute of an img tag) to a class property using square bracket notation.

LANGUAGE: angular-html
CODE:
<img alt="photo" [src]="imageURL">

----------------------------------------

TITLE: Implementing Viewport Trigger for Defer Block
DESCRIPTION: Demonstrates how to trigger deferred content loading when it enters the viewport.

LANGUAGE: angular-html
CODE:
@defer (on viewport) {
  <comments />
}

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project and stores the output in the 'dist/' directory. This command compiles the application for production deployment.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Generating Backwards Compatible Constructors in Angular Inject Migration
DESCRIPTION: Illustrates the use of the backwardsCompatibleConstructors option in the inject migration. This option adds an additional constructor signature to maintain compatibility with inherited classes, at the cost of more verbose code.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyService } from './service';

@Component({})
export class MyComp {
  constructor(private service: MyService) {}
}

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyService } from './service';

@Component({})
export class MyComp {
  private service = inject(MyService);

  /** Inserted by Angular inject() migration for backwards compatibility */
  constructor(...args: unknown[]);

  constructor() {}
}

----------------------------------------

TITLE: Importing Core Angular Dependencies for Forms
DESCRIPTION: This section imports various dependencies from @angular/core and rxjs that are used throughout the forms module.

LANGUAGE: TypeScript
CODE:
import { AfterViewInit } from '@angular/core';
import { ChangeDetectorRef } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { Injector } from '@angular/core';
import { ModuleWithProviders } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Renderer2 } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Version } from '@angular/core';

----------------------------------------

TITLE: Building Angular App for Production
DESCRIPTION: Command for building the Angular application with the app shell for production deployment.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Angular Component with Content Child Query Before Migration
DESCRIPTION: Example of an Angular component using @ContentChild decorator for querying child elements before migration to signal queries.

LANGUAGE: typescript
CODE:
import {Component, ContentChild} from '@angular/core';

@Component({
  template: `Has ref: {{someRef ? 'Yes' : 'No'}}`
})
export class MyComponent {
  @ContentChild('someRef') ref: ElementRef|undefined = undefined;

  someMethod() {
    if (this.ref) {
      this.ref.nativeElement;
    }
  }
}

----------------------------------------

TITLE: Demonstrating Glitch-Free Execution in TypeScript
DESCRIPTION: Shows a setup that demonstrates the glitch-free execution property of Angular Signals, ensuring consistent state observations.

LANGUAGE: typescript
CODE:
const counter = signal(0);
const evenOrOdd = computed(() => counter() % 2 === 0 ? 'even' : 'odd');
effect(() => console.log(counter() + ' is ' + evenOrOdd()));

counter.set(1);

----------------------------------------

TITLE: Example Directory Structure Pattern for Angular Bazel Tests
DESCRIPTION: Performance test files should be placed in the current subdirectory (e.g., largetable) to be shared across sub-subdirectories. Files must use .spec.ts or .test.ts extensions for TypeScript Protractor specifications.

LANGUAGE: text
CODE:
largetable/
  ├── largetable_perf.spec.ts
  └── render3/

----------------------------------------

TITLE: Disabling Image Performance Warnings in Angular
DESCRIPTION: This code snippet demonstrates how to disable image performance warnings site-wide in an Angular application. It uses a provider at the root of the application to set configuration options that disable warnings for oversized images and lazy-loaded LCP elements.

LANGUAGE: typescript
CODE:
providers: [
  {
    provide: IMAGE_CONFIG,
    useValue: {
      disableImageSizeWarning: true, 
      disableImageLazyLoadWarning: true
    }
  },
],

----------------------------------------

TITLE: Using Hydrate on Immediate Trigger in Angular Template
DESCRIPTION: This snippet demonstrates the use of the 'hydrate on immediate' trigger to load and hydrate content immediately after non-deferred content has finished rendering.

LANGUAGE: angular-html
CODE:
@defer (hydrate on immediate) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Generating Details Component in Angular CLI
DESCRIPTION: This command uses Angular CLI to generate a new component called 'details' which will represent the details page for housing locations.

LANGUAGE: shell
CODE:
ng generate component details

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the local development server on port 4200 with auto-reload functionality

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Inefficient Component Injector Creation in Angular
DESCRIPTION: Demonstrates an inefficient way of creating component injectors by resolving providers for each instance.

LANGUAGE: typescript
CODE:
function createComponentInjector(parent, providers: Binding[]) {
  return parent.resolveAndCreateChild(providers);
}

----------------------------------------

TITLE: Using the BaseButton Component in an Angular AppComponent
DESCRIPTION: This snippet shows how to use the BaseButton component in an AppComponent. It demonstrates passing custom content to the BaseButton, which will be rendered through ng-content.

LANGUAGE: angular-ts
CODE:
import { Component } from '@angular/core';
import { BaseButton } from './base-button/base-button.component.ts';

@Component({
  selector: 'app-root',
  imports: [BaseButton],
  template: `
    <button baseButton>
      Next <span class="icon arrow-right" />
    </button>
  `,
})
export class AppComponent {}

----------------------------------------

TITLE: Generating Web Worker using Angular CLI
DESCRIPTION: Command to generate a web worker in an Angular project using the ng generate command

LANGUAGE: shell
CODE:
ng generate web-worker <location>

----------------------------------------

TITLE: Running Signal Queries Migration in Angular CLI
DESCRIPTION: Command to run the automated migration for converting existing decorator query fields to signal queries using Angular CLI.

LANGUAGE: bash
CODE:
ng generate @angular/core:signal-queries-migration

----------------------------------------

TITLE: Implementing Loading State in Defer Block
DESCRIPTION: Demonstrates adding a loading block to show while deferred content is being fetched.

LANGUAGE: angular-html
CODE:
@defer {
  <comments />
} @placeholder {
  <p>Future comments</p>
} @loading {
  <p>Loading comments...</p>
}

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the Angular application, with output files stored in the dist directory. Includes option for production builds.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Angular Component Causing Hydration Mismatch
DESCRIPTION: Example of an Angular component that triggers a hydration mismatch error by directly manipulating the DOM using native browser APIs instead of Angular's template system. The component injects ElementRef and attempts to insert a new paragraph element using native DOM methods.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-example',
  template: '<div><span>world</span></div>',
})
export class ExampleComponent {
  hostElement = inject(ElementRef).nativeElement;

  ngOnInit() {
    // Create a new <p> element with the `Hello` text inside
    const newNode = document.createElement('p');
    newNode.innerHTML = 'Hello';

    // Insert the <p> before the first element. Since Angular has no information
   // about the <p> element, it will be looking for the <div> element at the first
   // element position instead. As a result, a hydration mismatch error would be
   // thrown. Instead, update component's template to create the <p> element.
   this.hostElement.insertBefore(newNode, this.hostElement.firstChild);
 }
}

----------------------------------------

TITLE: Defining Runtime Error Class in TypeScript
DESCRIPTION: Custom Error class implementation for handling runtime errors in Angular. Extends the base Error class with additional code property.

LANGUAGE: typescript
CODE:
export class RuntimeError<T extends number = RuntimeErrorCode> extends Error {
    constructor(code: T, message: null | false | string);
    code: T;
}

----------------------------------------

TITLE: Defining CommonModule Class in TypeScript
DESCRIPTION: Exports all the basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on.

LANGUAGE: TypeScript
CODE:
export class CommonModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<CommonModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<CommonModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<CommonModule, never, [typeof NgClass, typeof NgComponentOutlet, typeof NgForOf, typeof NgIf, typeof NgTemplateOutlet, typeof NgStyle, typeof NgSwitch, typeof NgSwitchCase, typeof NgSwitchDefault, typeof NgPlural, typeof NgPluralCase, typeof AsyncPipe, typeof UpperCasePipe, typeof LowerCasePipe, typeof JsonPipe, typeof SlicePipe, typeof DecimalPipe, typeof PercentPipe, typeof TitleCasePipe, typeof CurrencyPipe, typeof DatePipe, typeof I18nPluralPipe, typeof I18nSelectPipe, typeof KeyValuePipe], [typeof NgClass, typeof NgComponentOutlet, typeof NgForOf, typeof NgIf, typeof NgTemplateOutlet, typeof NgStyle, typeof NgSwitch, typeof NgSwitchCase, typeof NgSwitchDefault, typeof NgPlural, typeof NgPluralCase, typeof AsyncPipe, typeof UpperCasePipe, typeof LowerCasePipe, typeof JsonPipe, typeof SlicePipe, typeof DecimalPipe, typeof PercentPipe, typeof TitleCasePipe, typeof CurrencyPipe, typeof DatePipe, typeof I18nPluralPipe, typeof I18nSelectPipe, typeof KeyValuePipe]>;
}

----------------------------------------

TITLE: Serve Configuration with Build Targets
DESCRIPTION: Configuration for ng serve command to use specific build configurations

LANGUAGE: json
CODE:
  "serve": {
    "builder": "@angular-devkit/build-angular:dev-server",
    "options": { … },
    "configurations": {
      "development": {
        "buildTarget": "my-app:build:development"
      },
      "production": {
        "buildTarget": "my-app:build:production"
      }
    },
    "defaultConfiguration": "development"
  },

----------------------------------------

TITLE: Manual Change Detection in Tests
DESCRIPTION: Example of using manualChangeDetection to disable automatic handling of change detection for a block of code in tests.

LANGUAGE: typescript
CODE:
it('checks state while async action is in progress', async () => {
  const buttonHarness = loader.getHarness(MyButtonHarness);
  await manualChangeDetection(async () => {
    await buttonHarness.click();
    fixture.detectChanges();
    // Check expectations while async click operation is in progress.
    expect(isProgressSpinnerVisible()).toBe(true);
    await fixture.whenStable();
    // Check expectations after async click operation complete.
    expect(isProgressSpinnerVisible()).toBe(false);
  });
});

----------------------------------------

TITLE: Removing Unnecessary NgModules Example
DESCRIPTION: Example of an NgModule that can be safely removed during migration

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [FooComponent, BarPipe],
  exports: [FooComponent, BarPipe]
})
export class ImporterModule {}

----------------------------------------

TITLE: Creating an Injector with Key Mapping in Angular
DESCRIPTION: Demonstrates how to create an Injector using bind() and get() methods with automatic key mapping for tokens.

LANGUAGE: typescript
CODE:
var inj = Injector.resolveAndCreate([
  bind(Engine).toFactory(() => new TurboEngine())  //the passed in token Engine gets mapped to a key
]);
var engine = inj.get(Engine); //the passed in token Engine gets mapped to a key

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server. The server will run at http://localhost:4200/ and automatically reload on file changes.

LANGUAGE: Shell
CODE:
ng serve

----------------------------------------

TITLE: Declaring NgModule with id in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to declare an NgModule with an id. However, the document explains that this practice is often unnecessary and can lead to performance issues.

LANGUAGE: typescript
CODE:
@NgModule({
  id: 'my_module'
})
export class MyModule {}

----------------------------------------

TITLE: Implementing Route Parameter Retrieval in Angular Component
DESCRIPTION: Updates the DetailsComponent class to retrieve and process the 'id' route parameter using ActivatedRoute.

LANGUAGE: javascript
CODE:
export class DetailsComponent {
    route: ActivatedRoute = inject(ActivatedRoute);
    housingLocationId = -1;
    constructor() {
        this.housingLocationId = Number(this.route.snapshot.params['id']);
    }
}

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules.

LANGUAGE: shell
CODE:
ng generate component component-name

----------------------------------------

TITLE: Incorrect Angular NgModule Configuration: Missing bootstrap Property
DESCRIPTION: This example demonstrates an NgModule configuration that will trigger the bootstrapping error due to a missing 'bootstrap' property in the @NgModule decorator.

LANGUAGE: typescript
CODE:
@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, AppRoutingModule],
  providers: [],
})
export class AppModule {}

// The `AppModule` is used for bootstrapping, but the `@NgModule.bootstrap` field is missing.
platformBrowser().bootstrapModule(AppModule);

----------------------------------------

TITLE: Creating Harness Loader for WebDriver E2E Tests
DESCRIPTION: Example of creating a harness loader using SeleniumWebDriverHarnessEnvironment for WebDriver-based end-to-end tests.

LANGUAGE: typescript
CODE:
let wd: webdriver.WebDriver = getMyWebDriverClient();
const loader = SeleniumWebDriverHarnessEnvironment.loader(wd);
...
const myComponentHarness = await loader.getHarness(MyComponent);

----------------------------------------

TITLE: Importing RouterModule in Angular Component
DESCRIPTION: This import statement adds the RouterModule to an Angular component file, enabling the use of routing features.

LANGUAGE: typescript
CODE:
import { RouterModule } from '@angular/router';

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: CLI command for scaffolding new Angular components and other artifacts like directives, pipes, services, etc.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Angular Core Interface and Type Definitions
DESCRIPTION: Defines core Angular interfaces like AbstractType, lifecycle hooks (AfterContentChecked, AfterContentInit), and related types used throughout the framework.

LANGUAGE: typescript
CODE:
export interface AbstractType<T> extends Function {
    prototype: T;
}

export interface AfterContentChecked {
    ngAfterContentChecked(): void;
}

export interface AfterContentInit {
    ngAfterContentInit(): void;
}

----------------------------------------

TITLE: Using Nested @defer Blocks with Hydrate Triggers in Angular Template
DESCRIPTION: This example illustrates how nested @defer blocks work with hydrate triggers, demonstrating the hierarchical nature of Angular's component and dependency system.

LANGUAGE: angular-html
CODE:
@defer (hydrate on interaction) {
  <parent-block-cmp />
  @defer (hydrate on hover) {
    <child-block-cmp />
  } @placeholder {
    <div>Child placeholder</div>
  }
} @placeholder{
  <div>Parent Placeholder</div>
}

----------------------------------------

TITLE: Angular Compiler Configuration for Suppressing Suffix Warning
DESCRIPTION: JSON configuration to disable the suffixNotSupported diagnostic in the project's tsconfig.json file.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "suffixNotSupported": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Importing HousingLocation Interface
DESCRIPTION: Import statement for the HousingLocation interface in HomeComponent

LANGUAGE: typescript
CODE:
import { HousingLocation } from '../housinglocation';

----------------------------------------

TITLE: Rendering WebTreeMap in HTML/JavaScript
DESCRIPTION: This snippet demonstrates how to use WebTreeMap in a web page. It includes loading the library, selecting a container element, and rendering the treemap with data and options.

LANGUAGE: html
CODE:
<script src='webtreemap.js'></script>
<script>
// Container must have its own width/height.
const container = document.getElementById('myContainer');
// See typings for full API definition.
webtreemap.render(container, data, options);
</script>

----------------------------------------

TITLE: Valid Shadow DOM Component Selector Example
DESCRIPTION: Corrected example showing a valid component selector that meets custom element naming requirements with a hyphenated, lowercase name starting with a letter.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-comp',
  encapsulation: ViewEncapsulation.ShadowDom
  …
})

----------------------------------------

TITLE: Defining BrowserPlatformLocation Class in TypeScript
DESCRIPTION: Provides browser-specific implementation of PlatformLocation for managing the browser's history and URL.

LANGUAGE: TypeScript
CODE:
export class BrowserPlatformLocation extends PlatformLocation {
    constructor();
    back(): void;
    forward(): void;
    getBaseHrefFromDOM(): string;
    getState(): unknown;
    get hash(): string;
    historyGo(relativePosition?: number): void;
    get hostname(): string;
    get href(): string;
    onHashChange(fn: LocationChangeListener): VoidFunction;
    onPopState(fn: LocationChangeListener): VoidFunction;
    get pathname(): string;
    set pathname(newPath: string);
    get port(): string;
    get protocol(): string;
    pushState(state: any, title: string, url: string): void;
    replaceState(state: any, title: string, url: string): void;
    get search(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrowserPlatformLocation, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BrowserPlatformLocation>;
}

----------------------------------------

TITLE: Running Macrotasks Outside Angular Zone (TypeScript)
DESCRIPTION: Demonstration of how to run macrotasks outside the Angular zone to prevent delaying application stability.

LANGUAGE: typescript
CODE:
class SimpleComponent {
  constructor() {
    const ngZone = inject(NgZone);

    ngZone.runOutsideAngular(() => {
      setInterval(() => {}, 1000);
    });
  }
}

----------------------------------------

TITLE: Configuring Non-Node.js Server for Angular SSR
DESCRIPTION: Implementation of server-side rendering setup for non-Node.js environments using Web API standards.

LANGUAGE: typescript
CODE:
import { AngularAppEngine, createRequestHandler } from '@angular/ssr';

const angularApp = new AngularAppEngine();

const reqHandler = createRequestHandler(async (req: Request) => {
  const res: Response|null = await angularApp.render(req);

  // ...
});

----------------------------------------

TITLE: Correct Attribute Binding in Angular Template
DESCRIPTION: Demonstrates the proper way to include units in an attribute binding by moving the suffix to the value assignment.

LANGUAGE: html
CODE:
<img [attr.width]="'5px'">

----------------------------------------

TITLE: Creating a Host Child Injector in Angular
DESCRIPTION: Demonstrates how to create a child injector with a host relationship to its parent.

LANGUAGE: typescript
CODE:
var child = new Injector(proto, parent, true /* host */);

----------------------------------------

TITLE: Defining downgradeInjectable Function in TypeScript
DESCRIPTION: This function is used to downgrade an Angular injectable for use in AngularJS. It takes a token and an optional downgraded module name.

LANGUAGE: typescript
CODE:
export function downgradeInjectable(token: any, downgradedModule?: string): Function;

----------------------------------------

TITLE: Importing Zone.js for backwards compatibility (v0.11.1+)
DESCRIPTION: Shows how to import Zone.js from the dist directory for backwards compatibility with legacy browsers like IE11, maintaining the old behavior of loading the ES5 bundle in UMD format.

LANGUAGE: javascript
CODE:
import 'zone.js/dist/zone';

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor testing framework.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Using @Host Decorator for Dependency Resolution in Angular
DESCRIPTION: Shows how to use the @Host decorator to limit dependency resolution to the host injector.

LANGUAGE: typescript
CODE:
class Car {
  constructor(@Host() e: Engine) {}
}

----------------------------------------

TITLE: Importing Zone.js in Angular polyfills (pre-v0.11.1)
DESCRIPTION: Shows how to import Zone.js in the Angular polyfills.ts file before version 0.11.1. This imports the ES5 bundle in UMD format from the dist directory.

LANGUAGE: javascript
CODE:
import 'zone.js/dist/zone';

----------------------------------------

TITLE: Example of Angular Compiler Error Message
DESCRIPTION: This code snippet shows an example of the NG3003 compiler error message in Angular. It demonstrates how the error indicates the specific components involved in the cyclic import.

LANGUAGE: text
CODE:
The component ChildComponent is used in the template but importing it would create a cycle:
/parent.component.ts -> /child.component.ts -> /parent.component.ts

----------------------------------------

TITLE: Configuring TypeScript Plugins
DESCRIPTION: TSConfig configuration to enable the Angular Language Service plugin

LANGUAGE: json
CODE:
"plugins": [
    {"name": "@angular/language-service"}
]

----------------------------------------

TITLE: Correct Root Element Usage
DESCRIPTION: Example showing correct usage where the DOM element matches the component's selector.

LANGUAGE: angular-html
CODE:
<html>
    <my-app></my-app> <!-- OK -->
</html>

----------------------------------------

TITLE: Correct Implementation with CommonModule Import
DESCRIPTION: Alternative implementation showing how to import and use the CommonModule which includes all control flow directives.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {CommonModule} from '@angular/common';

@Component({
  imports: [CommonModule],
  template: `<div *ngIf="visible">Hi</div>`,
})
class MyComponent {}

----------------------------------------

TITLE: Configuring HomeComponent Template
DESCRIPTION: HTML template implementation for the HomeComponent including search filter and button

LANGUAGE: typescript
CODE:
template: `
  <section>
    <form>
      <input type="text" placeholder="Filter by city">
      <button class="primary" type="button">Search</button>
    </form>
  </section>
`

----------------------------------------

TITLE: Demonstrating Memo Decorator Usage
DESCRIPTION: Comprehensive example demonstrating memo decorator behavior with different configurations and multiple class instances

LANGUAGE: typescript
CODE:
import memo from 'memo-decorator';

class Qux {
  @memo()
  foo(a: number) {
    console.log('foo: called');
    return 42;
  }

  @memo({
    resolver: (_) => 1,
  })
  bar(a: number) {
    console.log('bar: called');
    return 42;
  }
}

const a = new Qux();
// Create a new cache entry and associate `1` with the result `42`.
a.foo(1);
// Do not invoke the original method `foo` because there's already a cache
// entry for the key `1` associated with the result of the method.
a.foo(1);
// Invoke the original `foo` because the cache doesn't contain an entry
// for the key `2`.
a.foo(2);

// Invoke `bar` and return the result `42` gotten from the original `bar` implementation.
a.bar(1);
// Does not invoke the original `bar` implementation because of the specified `resolver`
// which is passed to `memo`. For any arguments of the function, the resolver will return
// result `1` which will be used as the key.
a.bar(2);

const b = new Qux();
// Does not invoke the method `foo` because there's already an entry
// in the cache which associates the key `1` to the result `42` from the
// invocation of the method `foo` by the instance `a`.
b.foo(1);

// Outputs:
// foo: called
// foo: called
// bar: called

----------------------------------------

TITLE: Generating Schematic Using Collection Parameter
DESCRIPTION: Alternative command syntax for generating a schematic by specifying the collection name as a parameter.

LANGUAGE: shell
CODE:
ng generate my-schematic-name --collection collection-name

----------------------------------------

TITLE: Defining API Exports for Angular Platform Server
DESCRIPTION: This code snippet defines the exported types, functions, and constants for the @angular/platform-server package. It includes platform configuration, rendering functions, and server-specific modules for Angular applications.

LANGUAGE: typescript
CODE:
import { ApplicationRef } from '@angular/core';
import { EnvironmentProviders } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/platform-browser';
import { InjectionToken } from '@angular/core';
import { PlatformRef } from '@angular/core';
import { Provider } from '@angular/core';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';
import { Version } from '@angular/core';

export const BEFORE_APP_SERIALIZED: InjectionToken<readonly (() => void | Promise<void>)[]>;

export const INITIAL_CONFIG: InjectionToken<PlatformConfig>;

export interface PlatformConfig {
    document?: string;
    url?: string;
}

export function platformServer(extraProviders?: StaticProvider[] | undefined): PlatformRef;

export class PlatformState {
    constructor(_doc: any);
    getDocument(): any;
    renderToString(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlatformState, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PlatformState>;
}

export function provideServerRendering(): EnvironmentProviders;

export function renderApplication<T>(bootstrap: () => Promise<ApplicationRef>, options: {
    document?: string | Document;
    url?: string;
    platformProviders?: Provider[];
}): Promise<string>;

export function renderModule<T>(moduleType: Type<T>, options: {
    document?: string | Document;
    url?: string;
    extraProviders?: StaticProvider[];
}): Promise<string>;

export class ServerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<ServerModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<ServerModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<ServerModule, never, never, [typeof i1.BrowserModule]>;
}

export const VERSION: Version;

----------------------------------------

TITLE: Importing FormsModule in Angular TypeScript
DESCRIPTION: This code snippet demonstrates how to import the FormsModule and declare it in the NgModule imports array to resolve export not found errors related to form directives.

LANGUAGE: typescript
CODE:
import { FormsModule } from '@angular/forms';

@NgModule({
  …
  imports: [
    FormsModule,
    …

----------------------------------------

TITLE: Demonstrating Unsupported DOM Node Projection in Angular Components
DESCRIPTION: This code snippet shows an example of creating DOM nodes outside of Angular's context and attempting to project them into a component. This unsupported pattern triggers a hydration error.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'dynamic',
  template: `
  <ng-content />
`,
})
class DynamicComponent {
}

@Component({
  selector: 'app',
  template: `<div #target></div>`,
})
class SimpleComponent {
  @ViewChild('target', {read: ViewContainerRef}) vcr!: ViewContainerRef;
  envInjector = inject(EnvironmentInjector);

  ngAfterViewInit() {
    const div = document.createElement('div');
    const p = document.createElement('p');
    // In this test we create DOM nodes outside of Angular context
    // (i.e. not using Angular APIs) and try to content-project them.
    // This is an unsupported pattern and an exception will be thrown.
    const compRef = createComponent(DynamicComponent, {
      environmentInjector: this.envInjector,
      projectableNodes: [[div, p]]
    });
  }
}

----------------------------------------

TITLE: Incorrect Usage of NgIf Without Import
DESCRIPTION: Example showing incorrect implementation where *ngIf is used without importing the directive, which will fail at runtime.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  // Template uses `*ngIf`, but no corresponding directive imported.
  imports: [],
  template: `<div *ngIf="visible">Hi</div>`,
})
class MyComponent {}

----------------------------------------

TITLE: JSAction Attribute Implementation Example
DESCRIPTION: Shows how JSAction implements event handling using a custom jsaction attribute to map event types to handler names.

LANGUAGE: html
CODE:
<button id="buy_btn" type="button" jsaction="click:confirmPurchase">
  Buy now!
</button>

----------------------------------------

TITLE: Defining LocationUpgradeModule Class in TypeScript for Angular Location Upgrade
DESCRIPTION: This class represents the LocationUpgradeModule, which is used for configuring location upgrade in Angular applications. It provides a static config method for setting up the module with custom configurations.

LANGUAGE: typescript
CODE:
export class LocationUpgradeModule {
    // (undocumented)
    static config(config?: LocationUpgradeConfig): ModuleWithProviders<LocationUpgradeModule>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<LocationUpgradeModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<LocationUpgradeModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<LocationUpgradeModule, never, [typeof i1.CommonModule], never>;
}

----------------------------------------

TITLE: Documenting Form Benchmark Requirements in Markdown
DESCRIPTION: Defines the purpose of a benchmark test for measuring Angular form performance, focusing on generated file sizes and timing metrics for form widget creation and destruction.

LANGUAGE: markdown
CODE:
# Large Form Benchmark

Purpose:

- Track generated file size for a big form
- Track time for creation / destruction of form widgets,
  as they are more complex (e.g. include event listeners, host bindings, ...)

----------------------------------------

TITLE: Adding @loading Block with Parameters in Angular Deferrable Views
DESCRIPTION: Demonstrates adding a @loading block with 'minimum' and 'after' parameters. This block shows content during the loading of deferred dependencies.

LANGUAGE: angular-html
CODE:
@defer {
  <article-comments />
} @placeholder (minimum 1s) {
  <p>Placeholder for comments</p>
} @loading (minimum 1s; after 500ms) {
  <p>Loading comments...</p>
}

----------------------------------------

TITLE: Running Angular DevTools in Development Mode
DESCRIPTION: Starts a development server for Angular DevTools, allowing for real-time testing and debugging of the extension.

LANGUAGE: shell
CODE:
yarn devtools:devserver

----------------------------------------

TITLE: Disabling the Angular Signal Interpolation Diagnostic
DESCRIPTION: This JSON configuration demonstrates how to disable the 'interpolatedSignalNotInvoked' diagnostic in the project's tsconfig.json file if the issue cannot be avoided.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "interpolatedSignalNotInvoked": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Command to build the application with optional production flag. Output is stored in the dist directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Implementing Async Validator in TypeScript for Angular
DESCRIPTION: This snippet demonstrates the correct implementation of an async validator function in Angular. It validates if a control's value is equal to 10, returning an Observable with either validation errors or null.

LANGUAGE: typescript
CODE:
export function isTenAsync(control: AbstractControl): 
  Observable<ValidationErrors | null> {
    const v: number = control.value;
    if (v !== 10) {
    // Emit an object with a validation error.
      return of({ 'notTen': true, 'requiredValue': 10 });
    }
    // Emit null, to indicate no error occurred.
    return of(null);
  }

----------------------------------------

TITLE: Retrieving App-Scoped Queued Event Infos in TypeScript
DESCRIPTION: Exports a function to get queued event information for a specific app ID. It optionally takes a data container parameter.

LANGUAGE: typescript
CODE:
// @public
export function getAppScopedQueuedEventInfos(appId: string, dataContainer?: EarlyJsactionDataContainer): EventInfo[];

----------------------------------------

TITLE: Measuring Performance in the Browser
DESCRIPTION: Demonstrates how to measure performance directly in the browser using console.time() and console.timeEnd() for creating 10000 elements.

LANGUAGE: html
CODE:
<button id="measure" onclick="measure()">Measure document.createElement</button>
<script>
  function measure() {
    console.time('createElement*10000');
    for (var i=0; i<10000; i++) {
      document.createElement('div');
    }
    console.timeEnd('createElement*10000');
  }
</script>

----------------------------------------

TITLE: Running Lazy Loading Migration with Path Parameter
DESCRIPTION: Command to run the route lazy-loading migration on a specific subset of files using the path parameter.

LANGUAGE: shell
CODE:
ng generate @angular/core:route-lazy-loading --path src/app/sub-component

----------------------------------------

TITLE: Importing FormsModule in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to import and declare the FormsModule in an Angular module file to resolve missing exports like 'ngForm'.

LANGUAGE: typescript
CODE:
import { FormsModule } from '@angular/forms';

@NgModule({
  …
  imports: [
    FormsModule,
    …

----------------------------------------

TITLE: Angular Issue Response: Non-reproducible
DESCRIPTION: Template response for issues that cannot be reproduced

LANGUAGE: markdown
CODE:
I'm sorry but we can't reproduce the problem following the instructions you provided.

If the problem still exists in your application please [open a new issue](https://github.com/angular/angular/issues/new/choose) and follow the instructions in the issue template.

----------------------------------------

TITLE: Installing Node.js using NVM for Angular DevTools
DESCRIPTION: Uses NVM (Node Version Manager) to install the correct version of Node.js specified in the .nvmrc file for Angular DevTools development.

LANGUAGE: shell
CODE:
nvm install

----------------------------------------

TITLE: Registering App-Scoped Dispatcher in TypeScript
DESCRIPTION: Exports a function to register a dispatcher for a specific app scope. It takes parameters for restriction, app ID, dispatcher function, and an optional data container.

LANGUAGE: typescript
CODE:
// @public
export function registerAppScopedDispatcher(restriction: Restriction, appId: string, dispatcher: (eventInfo: EventInfo) => void, dataContainer?: EarlyJsactionDataContainer): void;

----------------------------------------

TITLE: Demonstrating Selector Collision in Angular Components
DESCRIPTION: This code snippet shows an example of a selector collision between two button components (StrokedBtnComponent and RaisedBtnComponent) and how they are incorrectly applied in the AppComponent template.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: '[stroked-button]',
  templateUrl: './stroked-button.component.html',
})
export class StrokedBtnComponent {}

@Component({
  selector: '[raised-button]',
  templateUrl: './raised-button.component.html',
})
export class RaisedBtnComponent {}


@Component({
  selector: 'app-root',
  template: `
  <!-- This node has 2 selectors: stroked-button and raised-button, and both match a different component: StrokedBtnComponent, and RaisedBtnComponent , so NG0300 will be raised  -->
  <button stroked-button  raised-button></button>
  `,
})
export class AppComponent {}

----------------------------------------

TITLE: Angular Component Before Signal Input Migration
DESCRIPTION: Example of a component using traditional @Input decorator before migration

LANGUAGE: typescript
CODE:
import {Component, Input} from '@angular/core';

@Component({
  template: `Name: {{name ?? ''}}`
})
export class MyComponent {
  @Input() name: string|undefined = undefined;

  someMethod(): number {
    if (this.name) {
      return this.name.length;
    }
    return -1;
  }
}

----------------------------------------

TITLE: Correct Static Attribute Usage on iframe Element in Angular HTML
DESCRIPTION: This example demonstrates the recommended approach of using static attributes for security-sensitive properties on an iframe element in Angular templates.

LANGUAGE: angular-html
CODE:
<iframe sandbox="allow-scripts" src="..."></iframe>

----------------------------------------

TITLE: JSAction EBNF Syntax Definition
DESCRIPTION: Formal EBNF grammar definition for the jsaction attribute syntax.

LANGUAGE: ebnf
CODE:
jsaction-attr-value   = binding, { ";", jsaction-attr-value }

binding               = [ event-type, ":" ], event-handler

event-type            = { white space characters }, [valid-name], { white space characters }
event-handler         = { white space characters }, [valid-name], { white space characters }

valid-name            = { valid-char }

valid-char            = character - invalid-name-chars
invalid-name-chars    = ":" | ";" | "."

----------------------------------------

TITLE: Defining $locationShim Class in TypeScript for Angular Location Upgrade
DESCRIPTION: This class implements a shim for the $location service in AngularJS. It provides methods for URL manipulation and parsing, as well as state management. It depends on various Angular services and modules.

LANGUAGE: typescript
CODE:
export class $locationShim {
    $$parse(url: string): void;
    $$parseLinkUrl(url: string, relHref?: string | null): boolean;
    constructor($injector: any, location: Location_2, platformLocation: PlatformLocation, urlCodec: UrlCodec, locationStrategy: LocationStrategy);
    absUrl(): string;
    hash(): string;
    // (undocumented)
    hash(hash: string | number | null): this;
    host(): string;
    onChange(fn: (url: string, state: unknown, oldUrl: string, oldState: unknown) => void, err?: (e: Error) => void): void;
    path(): string;
    // (undocumented)
    path(path: string | number | null): this;
    port(): number | null;
    protocol(): string;
    replace(): this;
    search(): {
        [key: string]: unknown;
    };
    // (undocumented)
    search(search: string | number | {
        [key: string]: unknown;
    }): this;
    // (undocumented)
    search(search: string | number | {
        [key: string]: unknown;
    }, paramValue: null | undefined | string | number | boolean | string[]): this;
    state(): unknown;
    // (undocumented)
    state(state: unknown): this;
    url(): string;
    // (undocumented)
    url(url: string): this;
}

----------------------------------------

TITLE: Running Angular Tree Benchmark in Browser
DESCRIPTION: Command to run a specific Angular tree benchmark in the browser using Bazel. This example demonstrates how to run the 'ng2' tree benchmark.

LANGUAGE: bash
CODE:
yarn bazel run modules/benchmarks/src/tree/{name}:devserver

# e.g. "ng2" tree benchmark:
yarn bazel run modules/benchmarks/src/tree/ng2:devserver

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project. Build artifacts are stored in the 'dist/' directory. Use the '--prod' flag for production builds.

LANGUAGE: Shell
CODE:
ng build

----------------------------------------

TITLE: Configuring Zoneless Bootstrap in Angular
DESCRIPTION: Shows how to enable zoneless change detection in both standalone and NgModule-based Angular applications using the experimental provider.

LANGUAGE: typescript
CODE:
// standalone bootstrap
bootstrapApplication(MyApp, {providers: [
  provideExperimentalZonelessChangeDetection(),
]});

// NgModule bootstrap
platformBrowser().bootstrapModule(AppModule);
@NgModule({
  providers: [provideExperimentalZonelessChangeDetection()]
})
export class AppModule {}

----------------------------------------

TITLE: Implementing EventContract Class in TypeScript
DESCRIPTION: Defines the EventContract class which implements the UnrenamedEventContract interface. It provides methods for managing event handlers and dispatchers.

LANGUAGE: typescript
CODE:
// @public
export class EventContract implements UnrenamedEventContract {
    constructor(containerManager: EventContractContainerManager);
    addEvent(eventType: string, prefixedEventType?: string, passive?: boolean): void;
    cleanUp(): void;
    ecrd(dispatcher: Dispatcher, restriction: Restriction): void;
    handler(eventType: string): EventHandler | undefined;
    // (undocumented)
    static MOUSE_SPECIAL_SUPPORT: boolean;
    registerDispatcher(dispatcher: Dispatcher, restriction: Restriction): void;
    replayEarlyEventInfos(earlyEventInfos: EventInfo[]): void;
    replayEarlyEvents(earlyJsactionData?: EarlyJsactionData | undefined): void;
}

----------------------------------------

TITLE: Running E2E Test Setup Command in Angular CLI
DESCRIPTION: This command checks for the 'e2e' target in your project and prompts for E2E package selection if not found.

LANGUAGE: shell
CODE:
ng e2e

----------------------------------------

TITLE: Running Code in Injection Context with runInInjectionContext
DESCRIPTION: Demonstrates how to explicitly run code within an injection context using runInInjectionContext and EnvironmentInjector. Shows pattern for accessing DI when not automatically in an injection context.

LANGUAGE: typescript
CODE:
@Injectable({
  providedIn: 'root',
})
export class HeroService {
  private environmentInjector = inject(EnvironmentInjector);

  someMethod() {
    runInInjectionContext(this.environmentInjector, () => {
      inject(SomeService); // Do what you need with the injected service
    });
  }
}

----------------------------------------

TITLE: Angular Component with Content Child Query After Migration
DESCRIPTION: Example of an Angular component using the new signal-based contentChild function for querying child elements after migration.

LANGUAGE: typescript
CODE:
import {Component, contentChild} from '@angular/core';

@Component({
  template: `Has ref: {{someRef() ? 'Yes' : 'No'}}`
})
export class MyComponent {
  readonly ref = contentChild<ElementRef>('someRef');

  someMethod() {
    const ref = this.ref();
    if (ref) {
      ref.nativeElement;
    }
  }
}

----------------------------------------

TITLE: Invalid ngSkipHydration Usage with Directive Host Binding
DESCRIPTION: Example demonstrating incorrect usage of ngSkipHydration attribute in a directive's host bindings applied to a non-component host node.

LANGUAGE: typescript
CODE:
@Directive({
  selector: '[dir]',
  host: {ngSkipHydration: 'true'},
})
class Dir {
}

@Component({
  selector: 'app',
  imports: [Dir],
  template: `
    <div dir></div>
  `,
})
class SimpleComponent {
}

----------------------------------------

TITLE: Decorative Header Component Usage in HTML
DESCRIPTION: Example of using the docs-decorative-header component with a title and image source attribute.

LANGUAGE: html
CODE:
<docs-decorative-header title="Next Steps" imgSrc="adev/src/assets/images/roadmap.svg"> <!-- markdownlint-disable-line -->
</docs-decorative-header>

----------------------------------------

TITLE: Angular Issue Response: Duplicate
DESCRIPTION: Template response for duplicate issue reports

LANGUAGE: markdown
CODE:
Thanks for reporting this issue. However this issue is a duplicate of an existing issue #ISSUE_NUMBER. Please subscribe to that issue for future updates.

----------------------------------------

TITLE: RxJS Zone Integration Example
DESCRIPTION: Demonstration of RxJS integration with Zone.js showing zone awareness across Observable operations.

LANGUAGE: typescript
CODE:
const constructorZone = Zone.current.fork({name: 'constructor'});
const subscriptionZone = Zone.current.fork({name: 'subscription'});
const operatorZone = Zone.current.fork({name: 'operator'});

let observable;
let subscriber;

constructorZone.run(() => {
  observable = new Observable((_subscriber) => {
    subscriber = _subscriber;
    console.log('current zone when construct observable:', Zone.current.name);
    return () => {
      console.log('current zone when unsubscribe observable:', Zone.current.name);
    };
  });
});

subscriptionZone.run(() => {
  observable.subscribe({
    next: () => {
      console.log('current zone when subscription next', Zone.current.name);
    },
    error: () => {
      console.log('current zone when subscription error', Zone.current.name);
    },
    complete: () => {
      console.log('current zone when subscription complete', Zone.current.name);
    },
  });
});

operatorZone.run(() => {
  observable.map(() => {
    console.log('current zone when map operator', Zone.current.name);
  });
});

----------------------------------------

TITLE: Decorative Header Component Example in Angular
DESCRIPTION: Example showing the usage of a custom docs-decorative-header component to display the main title and description of the dependency injection documentation.

LANGUAGE: html
CODE:
<docs-decorative-header title="Dependency injection in Angular" imgSrc="adev/src/assets/images/dependency_injection.svg">
"DI" is a design pattern and mechanism for creating and delivering some parts of an app to other parts of an app that require them.
</docs-decorative-header>

----------------------------------------

TITLE: Implementing EventDispatcher Class in TypeScript
DESCRIPTION: Defines the EventDispatcher class for handling event dispatching. It includes a constructor for setting up the dispatch delegate and click modification support.

LANGUAGE: typescript
CODE:
// @public
export class EventDispatcher {
    constructor(dispatchDelegate: (event: Event, actionName: string) => void, clickModSupport?: boolean);
    dispatch(eventInfo: EventInfo): void;
}

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the local development server that automatically reloads on file changes

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Demonstrating Invalid Expression in Angular Metadata (TypeScript)
DESCRIPTION: This snippet shows an example of using invalid expressions in Angular metadata, which will produce an 'Expression form not supported' error. It demonstrates the use of 'typeof' and bracket notation, which are not allowed in metadata.

LANGUAGE: typescript
CODE:
// ERROR
export class Fooish { … }
…
const prop = typeof Fooish; // typeof is not valid in metadata
  …
  // bracket notation is not valid in metadata
  { provide: 'token', useValue: { [prop]: 'value' } };
  …

----------------------------------------

TITLE: EventContract Setup Implementation
DESCRIPTION: JavaScript code showing how to initialize and configure the EventContract for JSAction, including event type registration.

LANGUAGE: javascript
CODE:
import {EventContract} from '@angular/core/primitives/event-dispatch/src/eventcontract';
import {EventContractContainer} from '@angular/core/primitives/event-dispatch/src/event_contract_container';

const EVENTS_TO_LISTEN_TO = ['click', 'keydown', ...];

const eventContract = new EventContract(
    new EventContractContainer(document.body));

for (const eventType of EVENTS_TO_LISTEN_TO) {
  eventContract.addEvent(eventType);
}

window['__ec'] = eventContract;

----------------------------------------

TITLE: Cleaning Up After Merged Angular Pull Request
DESCRIPTION: This code snippet shows the steps to clean up after a pull request has been merged in Angular development. It includes deleting the remote branch, checking out the main branch, deleting the local branch, and updating the local main branch.

LANGUAGE: shell
CODE:
git push origin --delete my-fix-branch
git checkout main -f
git branch -D my-fix-branch
git pull --ff upstream main

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner.

LANGUAGE: Shell
CODE:
ng test

----------------------------------------

TITLE: Installing Angular SSR Using CLI Commands
DESCRIPTION: Commands to enable server-side rendering in new or existing Angular projects using the Angular CLI.

LANGUAGE: shell
CODE:
ng new --ssr

LANGUAGE: shell
CODE:
ng add @angular/ssr

----------------------------------------

TITLE: Critical Angular Callout Component
DESCRIPTION: Implementation of a critical-style docs-callout component with distinct styling for important warnings or alerts.

LANGUAGE: html
CODE:
<docs-callout critical title="Callout title for critical">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</docs-callout>

----------------------------------------

TITLE: Publishing Zone.js Release
DESCRIPTION: Commands for cutting and publishing the final release, including version tagging and npm publishing

LANGUAGE: bash
CODE:
git fetch upstream
git checkout upstream/main
rm -rf node_modules && yarn install
export VERSION=`(node -e "console.log(require('./packages/zone.js/package.json').version)")`
export TAG="zone.js-${VERSION}"
export SHA=`git log upstream/main --oneline -n 1000 | grep "release: cut the ${TAG} release" | cut -f 1 -d " "`
echo "Releasing '$VERSION' which will be tagged as '$TAG' from SHA '$SHA'."
git checkout ${SHA}
npm login --registry https://wombat-dressing-room.appspot.com
yarn bazel -- run --config=release -- //packages/zone.js:npm_package.publish --access public --tag latest
git tag ${TAG} ${SHA}
git push upstream ${TAG}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Executes unit tests for the Angular project using Karma test runner. This command helps in verifying the correctness of individual components and services.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project, with an option for production builds. The compiled files are stored in the 'dist/' directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Checking Capture and Early Event Types in TypeScript
DESCRIPTION: Exports two functions for determining if an event type is a capture event or an early event type. These are likely used in event handling logic.

LANGUAGE: typescript
CODE:
// @public
export const isCaptureEventType: (eventType: string) => boolean;

// @public
export const isEarlyEventType: (eventType: string) => boolean;

----------------------------------------

TITLE: Implementing Test Driver for Browser Measurements
DESCRIPTION: Creates a test driver to execute and measure the performance of creating elements in the browser using Benchpress.

LANGUAGE: javascript
CODE:
driver.get('.../index.html');

var measureBtn = driver.findElement(By.id('measure'));
runner.sample({
  id: 'createElement test',
  microMetrics: {
    'createElement': 'time to create an element (ms)'
  },
  execute: () {
    measureBtn.click();
  }
});

----------------------------------------

TITLE: Using Custom Element in HTML
DESCRIPTION: Example of using a custom element in HTML markup with an input attribute

LANGUAGE: html
CODE:
<my-popup message="Use Angular!"></my-popup>

----------------------------------------

TITLE: Correcting Non-Exported Symbol Reference in Angular Component (TypeScript)
DESCRIPTION: This snippet shows how to fix the 'Reference to a local (non-exported) symbol' error by exporting the variable used in the component's providers.

LANGUAGE: typescript
CODE:
// CORRECTED
export let foo: number; // exported

@Component({
  selector: 'my-component',
  template: … ,
  providers: [
    { provide: Foo, useValue: foo }
  ]
})
export class MyComponent {}

----------------------------------------

TITLE: Serving Angular App with HTTP Server for Service Worker Testing
DESCRIPTION: This command uses the http-server package to serve the built Angular application, allowing for service worker testing in a more production-like environment.

LANGUAGE: shell
CODE:
npx http-server -p 8080 -c-1 dist/<project-name>/browser

----------------------------------------

TITLE: Setting Up Wildcard Route
DESCRIPTION: Configures a wildcard route to handle undefined routes.

LANGUAGE: typescript
CODE:
{ path: '**', component: <component-name> }

----------------------------------------

TITLE: Defining Animation Rules in Angular TypeScript
DESCRIPTION: This snippet demonstrates how to define animation rules using the AnimationDefinition type. It includes an example of changing the background color of an element over a specified timeframe.

LANGUAGE: typescript
CODE:
const DEFINITION: AnimationDefinition = [
  // Changes the color of the circle from black to white.
  {
    selector: `layer-1 >> .circle`,
    timeframe: [3, 5], // Starts at the 3rd and ends at the 5th second.
    from: {
      'background-color': '#000',
    },
    to: {
      'background-color': '#fff',
    }
  }
];

----------------------------------------

TITLE: Monitoring Async Tasks with Zone.js in Angular
DESCRIPTION: This example shows how to use Zone.js to monitor asynchronous tasks and print count information. It includes a link to a StackBlitz demo for a hands-on example.

LANGUAGE: javascript
CODE:
use `zone.js` to monitor async tasks and print the count info.

----------------------------------------

TITLE: Bootstrapping App-Scoped Early Event Contract in TypeScript
DESCRIPTION: Defines a function to set up an early event contract for a specific app scope. It takes parameters for the container element, app ID, and event types to handle.

LANGUAGE: typescript
CODE:
// @public
export function bootstrapAppScopedEarlyEventContract(container: HTMLElement, appId: string, bubbleEventTypes: string[], captureEventTypes: string[], dataContainer?: EarlyJsactionDataContainer): void;

----------------------------------------

TITLE: Installing Bootstrap Dependencies
DESCRIPTION: Commands to install Bootstrap 4 and its required dependencies (jQuery and Popper.js)

LANGUAGE: shell
CODE:
npm install jquery --save
npm install popper.js --save
npm install bootstrap --save

----------------------------------------

TITLE: Referencing Uninitialized Variable in Angular Component Template (TypeScript)
DESCRIPTION: This snippet demonstrates an 'Only initialized variables and constants' error. It shows a component trying to use an exported but uninitialized variable for its template property, which the compiler cannot resolve at compile time.

LANGUAGE: typescript
CODE:
// ERROR
export let someTemplate: string; // exported but not initialized

@Component({
  selector: 'my-component',
  template: someTemplate
})
export class MyComponent {}

----------------------------------------

TITLE: Accessing Angular CLI Help Commands
DESCRIPTION: Commands to display help information for the Angular CLI and specific commands like 'new'.

LANGUAGE: shell
CODE:
ng --help
ng new --help

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor testing framework.

LANGUAGE: Shell
CODE:
ng e2e

----------------------------------------

TITLE: Defining Schema for Custom Schematic in JSON
DESCRIPTION: This schema.json file defines the available options for a custom schematic, including their types and descriptions.

LANGUAGE: json
CODE:
{
  "$schema": "http://json-schema.org/schema",
  "id": "SchematicsMyService",
  "title": "My Service Schema",
  "type": "object",
  "properties": {
    "name": {
      "description": "The name of the service.",
      "type": "string"
    },
    "path": {
      "type": "string",
      "format": "path",
      "description": "The path to create the service.",
      "visible": false
    },
    "project": {
      "type": "string",
      "description": "The name of the project.",
      "$default": {
        "$source": "projectName"
      }
    }
  },
  "required": [
    "name"
  ]
}

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project and stores the output in the 'dist/' directory. Use the '--prod' flag for a production build with optimizations.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Launches the Angular development server and provides the local URL for accessing the application. The server automatically reloads when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Running Angular CLI Updates in Integration Tests
DESCRIPTION: Commands for updating and testing Angular CLI applications in the integration test environment. This includes installing dependencies, running ng update, building and testing.

LANGUAGE: bash
CODE:
$ cd integration/cli-hello-world[-*]
$ yarn install
$ yarn ng update @angular/cli @angular-devkit/build-angular
$ yarn build
$ yarn test

----------------------------------------

TITLE: Implementing Error Formatting Function in TypeScript
DESCRIPTION: Function to format runtime errors with code and message. Accepts a numeric error code and message string, returning a formatted error string.

LANGUAGE: typescript
CODE:
export function formatRuntimeError<T extends number = RuntimeErrorCode>(code: T, message: null | false | string): string;

----------------------------------------

TITLE: Resetting Database with Clear Option
DESCRIPTION: Shows how to reset the in-memory database collections with a clear option using a command request.

LANGUAGE: TypeScript
CODE:
http
  // Reset the database collections with the `clear` option
  .post('commands/resetDb', { clear: true }))

  // when command finishes, get heroes
  .concatMap(
    ()=> http.get<Data>('api/heroes')
        .map(data => data.data as Hero[])
  )

  // execute the request sequence and
  // do something with the heroes
  .subscribe(...)

----------------------------------------

TITLE: Using NgSwitch for Conditional Rendering in Angular Template
DESCRIPTION: Demonstrates how to use NgSwitch directives to conditionally render different elements based on an expression.

LANGUAGE: HTML
CODE:
<div [ngSwitch]="feature">
  <app-stout-item    *ngSwitchCase="'stout'"    [item]="currentItem"></app-stout-item>
  <app-device-item   *ngSwitchCase="'slim'"     [item]="currentItem"></app-device-item>
  <app-lost-item     *ngSwitchCase="'vintage'"  [item]="currentItem"></app-lost-item>
  <app-best-item     *ngSwitchCase="'bright'"   [item]="currentItem"></app-best-item>
  <app-unknown-item  *ngSwitchDefault           [item]="currentItem"></app-unknown-item>
</div>

----------------------------------------

TITLE: Using Numeric Property Names in Angular Providers (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Name expected' error. It shows a provider using a numeric property name, which is not supported in metadata.

LANGUAGE: typescript
CODE:
// ERROR
provider: [{ provide: Foo, useValue: { 0: 'test' } }]

----------------------------------------

TITLE: Creating an Animation Instance in Angular TypeScript
DESCRIPTION: This code shows how to create a new Animation instance using the AnimationCreatorService in an Angular component. It uses dependency injection and the afterNextRender lifecycle hook.

LANGUAGE: typescript
CODE:
class AnimationHost implements AfterViewInit {
  private animationCreator = inject(AnimationCreatorService);
  layers = viewChildren(AnimationLayerDirective);

  constructor() {
    afterNextRender({ read: () => {
      // The layers must be provided
      const animation = this.animationCreator.createAnimation(this.layers());
      // ...
    }});
  }
}

----------------------------------------

TITLE: Web Worker Message Handler Implementation
DESCRIPTION: Scaffold code for the worker file that handles incoming messages and sends responses

LANGUAGE: typescript
CODE:
addEventListener('message', ({ data }) => {
  const response = `worker response to ${data}`;
  postMessage(response);
});

----------------------------------------

TITLE: Serving Angular Playground Examples with Bazel and Yarn
DESCRIPTION: These commands demonstrate how to build and serve specific Angular playground examples using Bazel. The first example shows how to serve the 'zippy_component' example, while the second shows how to serve the 'upgrade' example.

LANGUAGE: bash
CODE:
# e.g. src/zippy_component
yarn bazel run modules/playground/src/zippy_component:devserver

# e.g. src/upgrade
yarn bazel run modules/playground/src/upgrade:devserver

----------------------------------------

TITLE: Angular Compilation Flow Steps
DESCRIPTION: The sequence of steps involved in Angular compilation, including creation of CompilerHost, Program initialization, and emission of JavaScript code.

LANGUAGE: typescript
CODE:
1. const compilerHost: ts.CompilerHost = createCompilerHost();
2. const ngCompilerHost = new NgCompilerHost(compilerHost);
3. const program: ts.Program = createProgram(ngCompilerHost, rootFiles);
4. const ticket: CompilationTicket = createCompilationTicket(previousState);
5. const ngCompiler = createNgCompiler(ticket);
6. const diagnostics = [
    ...program.getSemanticDiagnostics(),
    ...ngCompiler.getDiagnostics()
];
7. const transformers = ngCompiler.prepareEmit();
8. program.emit(undefined, undefined, undefined, undefined, transformers);

----------------------------------------

TITLE: Enabling Animations in Angular Application
DESCRIPTION: This snippet shows how to enable animations in an Angular application by importing and providing the animation module in the bootstrap configuration.

LANGUAGE: typescript
CODE:
bootstrapApplication(AppComponent, {
  providers: [
    provideAnimationsAsync(),
  ]
});

----------------------------------------

TITLE: Defining downgradeComponent Function in TypeScript
DESCRIPTION: This function is used to downgrade an Angular component for use in AngularJS. It takes an object with component information and returns a downgraded version.

LANGUAGE: typescript
CODE:
export function downgradeComponent(info: {
    component: Type<any>;
    downgradedModule?: string;
    propagateDigest?: boolean;
    inputs?: string[];
    outputs?: string[];
    selectors?: string[];
}): any;

----------------------------------------

TITLE: Declaring Custom Module Types
DESCRIPTION: Example of creating custom TypeScript type definitions for a 'host' module with parsing functionality

LANGUAGE: typescript
CODE:
declare module 'host' {
  export interface Host {
    protocol?: string;
    hostname?: string;
    pathname?: string;
  }
  export function parse(url: string, queryString?: string): Host;
}

----------------------------------------

TITLE: Exports Configuration in package.json
DESCRIPTION: Definition of package exports mapping for module resolution

LANGUAGE: javascript
CODE:
"exports": {
  "./schematics/*": {
    "default": "./schematics/*.js"
  },
  "./package.json": {
    "default": "./package.json"
  },
  ".": {
    "types": "./core.d.ts",
    "default": "./fesm2022/core.mjs"
  },
  "./testing": {
    "types": "./testing/testing.d.ts",
    "default": "./fesm2022/testing.mjs"
  }
}

----------------------------------------

TITLE: Defining Animation Layers in HTML for Angular
DESCRIPTION: This snippet demonstrates how to create animation layers using the AnimationLayerDirective in Angular HTML templates. Each layer requires a unique layerId.

LANGUAGE: html
CODE:
<div adevAnimationLayer layerId="layer-1">
  <div class="circle"></div>
</div>
<div adevAnimationLayer layerId="layer-2">
  <div class="square"></div>
</div>

----------------------------------------

TITLE: Configuring Angular Package Side Effects Test in JSON
DESCRIPTION: This snippet refers to a JSON configuration file named 'side-effects.json' used to specify ES modules for side effect testing in Angular packages. The file lists modules to be checked by the test script.

LANGUAGE: json
CODE:
"side-effects.json"

----------------------------------------

TITLE: File Replacement Configuration
DESCRIPTION: Configuration for environment-specific file replacements in angular.json

LANGUAGE: json
CODE:
  "configurations": {
    "development": {
      "fileReplacements": [
          {
            "replace": "src/environments/environment.ts",
            "with": "src/environments/environment.development.ts"
          }
        ],
        …

LANGUAGE: json
CODE:
  "configurations": {
    "development": { … },
    "production": { … },
    "staging": {
      "fileReplacements": [
        {
          "replace": "src/environments/environment.ts",
          "with": "src/environments/environment.staging.ts"
        }
      ]
    }
  }

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Launches the Angular development server and provides the local URL for accessing the application. The server will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Serving Angular App with Service Worker for Development
DESCRIPTION: This command serves the Angular application with service worker support enabled for local development and testing.

LANGUAGE: shell
CODE:
ng serve --prod

----------------------------------------

TITLE: Running Angular Benchmark E2E Tests
DESCRIPTION: Commands to run e2e tests for Angular benchmarks using Bazel. Includes examples for running tests for individual applications and all e2e tests.

LANGUAGE: bash
CODE:
# Run e2e tests of individual applications:
yarn bazel test modules/benchmarks/src/tree/ng2/...

# Run all e2e tests:
yarn bazel test modules/benchmarks/...

----------------------------------------

TITLE: Directive Selector Import Example
DESCRIPTION: Demonstrates how a directive's selector can depend on an imported constant, showing how analysis dependencies can cross file boundaries.

LANGUAGE: typescript
CODE:
import {Directive} from '@angular/core';
import {DIR_SELECTOR} from './selectors';

@Directive({
  selector: DIR_SELECTOR,
})
export class Dir {}

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Angular CLI command for scaffolding new components and other Angular artifacts like directives, pipes, services, etc.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Retrieving Action Cache in TypeScript
DESCRIPTION: Exports a function to get the action cache for a given DOM element. The cache is represented as an object with string keys and optional string values.

LANGUAGE: typescript
CODE:
// @public
export function getActionCache(element: Element): {
    [key: string]: string | undefined;
};

----------------------------------------

TITLE: Defining Angular Router Testing API Types and Classes
DESCRIPTION: Defines the core testing utilities for Angular router including RouterTestingHarness for simulating navigation and RouterTestingModule for configuring routes in tests. Includes imports from @angular/core and @angular/router, with type definitions and class implementations.

LANGUAGE: typescript
CODE:
import * as _angular_router from '@angular/router';
import { ComponentFixture } from '@angular/core/testing';
import { DebugElement } from '@angular/core';
import { ExtraOptions } from '@angular/router';
import * as i0 from '@angular/core';
import { ModuleWithProviders } from '@angular/core';
import { Routes } from '@angular/router';
import { Type } from '@angular/core';
import { WritableSignal } from '@angular/core';

// @public
export class RouterTestingHarness {
    static create(initialUrl?: string): Promise<RouterTestingHarness>;
    detectChanges(): void;
    readonly fixture: ComponentFixture<{
        routerOutletData: WritableSignal<unknown>;
    }>;
    navigateByUrl(url: string): Promise<null | {}>;
    navigateByUrl<T>(url: string, requiredRoutedComponentType: Type<T>): Promise<T>;
    get routeDebugElement(): DebugElement | null;
    get routeNativeElement(): HTMLElement | null;
}

// @public @deprecated
export class RouterTestingModule {
    // (undocumented)
    static withRoutes(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterTestingModule>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<RouterTestingModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<RouterTestingModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<RouterTestingModule, never, never, [typeof _angular_router.RouterModule]>;
}

----------------------------------------

TITLE: Converting Chrome Extension to Safari Web Extension
DESCRIPTION: Command to convert the Chrome-based Angular DevTools build into a Safari-compatible web extension using safari-web-extension-converter

LANGUAGE: bash
CODE:
xcrun safari-web-extension-converter --macos-only dist/bin/devtools/projects/shell-browser/src/prodapp

----------------------------------------

TITLE: Integrating Proxy Configuration in angular.json
DESCRIPTION: Configuration showing how to add the proxy configuration file reference to the serve target in angular.json.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "proxyConfig": "src/proxy.conf.json"
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Angular Core Package README Example
DESCRIPTION: Example README.md content for the @angular/core package

LANGUAGE: html
CODE:
Angular
=======

The sources for this package are in the main [Angular](https://github.com/angular/angular) repo.Please file issues and pull requests against that repo.

License: MIT

----------------------------------------

TITLE: Defining Custom Workflow Structure in Angular HTML Template
DESCRIPTION: This snippet shows the structure of a custom workflow component in Angular. It uses custom elements 'docs-workflow' and 'docs-step' to define a two-step workflow.

LANGUAGE: HTML
CODE:
<docs-workflow>
  <docs-step title="Step 1">
    Do the first thing.
  </docs-step>
  <docs-step title="Step B">
    Do another thing after that.
  </docs-step>
</docs-workflow>

----------------------------------------

TITLE: Adding Angular Service Worker Support with CLI
DESCRIPTION: This command adds the necessary configurations and dependencies to enable service worker support in an Angular project.

LANGUAGE: shell
CODE:
ng add @angular/pwa

----------------------------------------

TITLE: Defining API for @angular/core_rxjs-interop in TypeScript
DESCRIPTION: This code snippet defines the public API for the @angular/core_rxjs-interop package. It includes import statements, function declarations, and interface definitions for integrating RxJS observables with Angular's signal-based reactivity system.

LANGUAGE: TypeScript
CODE:
import { BaseResourceOptions } from '@angular/core';
import { DestroyRef } from '@angular/core';
import { Injector } from '@angular/core';
import { MonoTypeOperatorFunction } from 'rxjs';
import { Observable } from 'rxjs';
import { OutputOptions } from '@angular/core';
import { OutputRef } from '@angular/core';
import { ResourceLoaderParams } from '@angular/core';
import { ResourceRef } from '@angular/core';
import { Signal } from '@angular/core';
import { Subscribable } from 'rxjs';
import { ValueEqualityFn } from '@angular/core/primitives/signals';

// @public
export function outputFromObservable<T>(observable: Observable<T>, opts?: OutputOptions): OutputRef<T>;

// @public
export function outputToObservable<T>(ref: OutputRef<T>): Observable<T>;

// @public
export function pendingUntilEvent<T>(injector?: Injector): MonoTypeOperatorFunction<T>;

// @public
export function rxResource<T, R>(opts: RxResourceOptions<T, R> & {
    defaultValue: NoInfer<T>;
}): ResourceRef<T>;

// @public
export function rxResource<T, R>(opts: RxResourceOptions<T, R>): ResourceRef<T | undefined>;

// @public
export interface RxResourceOptions<T, R> extends BaseResourceOptions<T, R> {
    // (undocumented)
    loader: (params: ResourceLoaderParams<R>) => Observable<T>;
}

// @public
export function takeUntilDestroyed<T>(destroyRef?: DestroyRef): MonoTypeOperatorFunction<T>;

// @public
export function toObservable<T>(source: Signal<T>, options?: ToObservableOptions): Observable<T>;

// @public
export interface ToObservableOptions {
    injector?: Injector;
}

// @public (undocumented)
export function toSignal<T>(source: Observable<T> | Subscribable<T>): Signal<T | undefined>;

// @public (undocumented)
export function toSignal<T>(source: Observable<T> | Subscribable<T>, options: NoInfer<ToSignalOptions<T | undefined>> & {
    initialValue?: undefined;
    requireSync?: false;
}): Signal<T | undefined>;

// @public (undocumented)
export function toSignal<T>(source: Observable<T> | Subscribable<T>, options: NoInfer<ToSignalOptions<T | null>> & {
    initialValue?: null;
    requireSync?: false;
}): Signal<T | null>;

// @public (undocumented)
export function toSignal<T>(source: Observable<T> | Subscribable<T>, options: NoInfer<ToSignalOptions<T>> & {
    initialValue?: undefined;
    requireSync: true;
}): Signal<T>;

// @public (undocumented)
export function toSignal<T, const U extends T>(source: Observable<T> | Subscribable<T>, options: NoInfer<ToSignalOptions<T | U>> & {
    initialValue: U;
    requireSync?: false;
}): Signal<T | U>;

// @public
export interface ToSignalOptions<T> {
    equal?: ValueEqualityFn<T>;
    initialValue?: unknown;
    injector?: Injector;
    manualCleanup?: boolean;
    rejectErrors?: boolean;
    requireSync?: boolean;
}

----------------------------------------

TITLE: Storing Directive Metadata in .d.ts Files for Angular Ivy
DESCRIPTION: This snippet shows how selector information for directives is stored in .d.ts files. This allows ngtsc to access necessary metadata without breaking locality completely, enabling better tree-shaking.

LANGUAGE: typescript
CODE:
class TooltipDirective {
  static ɵdir: DirectiveDeclaration<TooltipDirective, '[tooltip]', '', {}, {}, []>
}

----------------------------------------

TITLE: Defining UpgradeModule Class in TypeScript
DESCRIPTION: This class represents the main module for handling upgrades between AngularJS and Angular. It provides methods for bootstrapping and managing the upgrade process.

LANGUAGE: typescript
CODE:
export class UpgradeModule {
    $injector: any;
    constructor(
    injector: Injector,
    ngZone: NgZone,
    platformRef: PlatformRef);
    bootstrap(element: Element, modules?: string[], config?: any): any;
    injector: Injector;
    ngZone: NgZone;
    static ɵfac: i0.ɵɵFactoryDeclaration<UpgradeModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<UpgradeModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<UpgradeModule, never, never, never>;
}

----------------------------------------

TITLE: Using HostBinding Decorator in Angular Component
DESCRIPTION: Demonstrates using @HostBinding decorator to bind host properties and attributes to component properties and methods.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */
})
export class CustomSlider {
  @HostBinding('attr.aria-valuenow')
  value: number = 0;

  @HostBinding('tabIndex')
  getTabIndex() {
    return this.disabled ? -1 : 0;
  }

  /* ... */
}

----------------------------------------

TITLE: Configuring Robots.txt for Unrestricted Access in Angular Project
DESCRIPTION: This configuration allows all web crawlers to access all URLs on the site. It uses the wildcard User-agent (*) and leaves the Disallow directive empty, effectively permitting access to all paths.

LANGUAGE: plaintext
CODE:
# Allow all URLs (see https://www.robotstxt.org/robotstxt.html)
User-agent: *
Disallow:

----------------------------------------

TITLE: Basic Code Block
DESCRIPTION: A simple code block using the docs-code element without any additional attributes.

LANGUAGE: plaintext
CODE:
this is code

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Executes end-to-end tests using the configured testing platform.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Referencing Non-Exported Symbol in Angular Component (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Reference to a local (non-exported) symbol' error. It shows a component using a locally defined, non-exported variable in its providers, which is not accessible to the compiler when generating the component factory.

LANGUAGE: typescript
CODE:
// ERROR
let foo: number; // neither exported nor initialized

@Component({
  selector: 'my-component',
  template: … ,
  providers: [
    { provide: Foo, useValue: foo }
  ]
})
export class MyComponent {}

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Executes unit tests using the Karma test runner framework.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This helps in scaffolding the application structure.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Adding Template Variable for Search Input in HomeComponent
DESCRIPTION: Adds a template variable '#filter' to the input element in the HomeComponent template. This allows access to the input element's value for filtering.

LANGUAGE: html
CODE:
<input type="text" placeholder="Filter by city" #filter>

----------------------------------------

TITLE: HTTP Resource API
DESCRIPTION: API for creating HTTP resources that can be used with Angular's signals system, supporting different response types and configuration options.

LANGUAGE: typescript
CODE:
export const httpResource: HttpResourceFn;

export interface HttpResourceRef<T> extends WritableResource<T>, ResourceRef<T> {
    destroy(): void;
    hasValue(): this is HttpResourceRef<Exclude<T, undefined>>;
    readonly headers: Signal<HttpHeaders | undefined>;
    readonly progress: Signal<HttpProgressEvent | undefined>;
    readonly statusCode: Signal<number | undefined>;
}

----------------------------------------

TITLE: Syncing and Updating Angular DevTools Workspace
DESCRIPTION: This snippet shows the commands to sync the local workspace with the latest changes and dependencies for Angular DevTools.

LANGUAGE: shell
CODE:
git checkout main
git pull upstream main
nvm install
yarn --frozen-lockfile

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: CLI command for scaffolding new Angular components and other artifacts like directives, pipes, services, etc.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Region-based Code Example
DESCRIPTION: References a TypeScript file that uses region markers for code organization.

LANGUAGE: typescript
CODE:
// File reference: example-with-region.ts

----------------------------------------

TITLE: Issuing Command Requests to In-Memory Web API
DESCRIPTION: Examples of how to issue command requests to the in-memory web api service for configuration and database reset.

LANGUAGE: TypeScript
CODE:
http.post('commands/resetdb', undefined);
http.get('commands/config');
http.post('commands/config', '{"delay":1000}');

----------------------------------------

TITLE: Installing Angular CLI via NPM
DESCRIPTION: Command to install the Angular CLI globally using npm package manager.

LANGUAGE: shell
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Implementing EventContainerContainer Class in TypeScript
DESCRIPTION: Defines the EventContractContainer class which implements the EventContractContainerManager interface. It manages event listeners for a specific DOM element.

LANGUAGE: typescript
CODE:
// @public
export class EventContractContainer implements EventContractContainerManager {
    constructor(element: Element);
    addEventListener(eventType: string, getHandler: (element: Element) => (event: Event) => void, passive?: boolean): void;
    cleanUp(): void;
    // (undocumented)
    readonly element: Element;
}

----------------------------------------

TITLE: Angular Component with Bindings in VARS Section
DESCRIPTION: Illustrates how bindings are represented in the VARS section of LView and TView.data arrays. The example shows a component with interpolation and property binding.

LANGUAGE: typescript
CODE:
@Component({
  template: `<div title="{{name}}">Hello {{name}}!</div>`
})
class MyApp {
  name = 'World';

  static ɵcmp = ɵɵdefineComponent({
    ...,
    decls: 2, // Two DOM Elements.
    vars: 2,   // Two bindings.
    template: function(rf: RenderFlags, ctx: MyApp) {
      if (rf & RenderFlags.Create) {
        ɵɵelementStart(0, 'div');
        ɵɵtext(1);
        ɵɵelementEnd();
      }
      if (rf & RenderFlags.Update) {
        ɵɵproperty('title', ctx.name);
        ɵɵadvance();
        ɵɵtextInterpolate1('Hello ', ctx.name, '!');
      }
      ...
    }
  });
}

----------------------------------------

TITLE: Setting Source Locale in angular.json
DESCRIPTION: Shows how to set the source locale for an Angular project by modifying the angular.json configuration file. This snippet sets the sourceLocale to 'ca' as an example.

LANGUAGE: json
CODE:
{
  "projects": {
    "your-project": {
      "i18n": {
        "sourceLocale": "ca"  // Use your desired locale code
      }
    }
  }
}

----------------------------------------

TITLE: Declaring setUpLocationSync Function in TypeScript for Angular Router Upgrade
DESCRIPTION: Defines a function setUpLocationSync that takes an UpgradeModule instance and an optional urlType parameter ('path' or 'hash') to synchronize location in upgraded Angular applications.

LANGUAGE: typescript
CODE:
export function setUpLocationSync(ngUpgrade: UpgradeModule, urlType?: 'path' | 'hash'): void;

----------------------------------------

TITLE: Building Angular Application
DESCRIPTION: Commands to build the application for production or development environments

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Building Angular Locally
DESCRIPTION: Command to build Angular project with results output to dist/packages-dist folder

LANGUAGE: shell
CODE:
yarn build

----------------------------------------

TITLE: Initializing Angular Server Platform
DESCRIPTION: Imports the Angular platform-server initialization module as a side effect to set up server environment with DOM shims. This import must be placed before any other imports that depend on DOM functionality.

LANGUAGE: typescript
CODE:
import '@angular/platform-server/init';

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access Angular CLI help documentation.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Emitting Events in Angular Child Component
DESCRIPTION: This code shows how to emit events from a child component using the @Output property. It demonstrates triggering events by calling the emit method on the EventEmitter instance.

LANGUAGE: typescript
CODE:
class ChildComponent {
    ...

    onClick() {
        this.count++;
        this.incrementCountEvent.emit(this.count);
    }

}

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Launches a development server for the Angular application. The server will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Re-entering Angular Zone for Event Handling
DESCRIPTION: This example demonstrates how to re-enter the Angular zone when handling events from a third-party library initialized outside the zone, ensuring that change detection runs when necessary.

LANGUAGE: typescript
CODE:
import { Component, NgZone, OnInit, output } from '@angular/core';
import * as Plotly from 'plotly.js-dist-min';

@Component(...)
class AppComponent implements OnInit {
  plotlyClick = output<Plotly.PlotMouseEvent>();

  constructor(private ngZone: NgZone) {}

  ngOnInit() {
    this.ngZone.runOutsideAngular(() => {
      this.createPlotly();
    });
  }

  private async createPlotly() {
    const plotly = await Plotly.newPlot('chart', data);

    plotly.on('plotly_click', (event: Plotly.PlotMouseEvent) => {
      this.ngZone.run(() => {
        this.plotlyClick.emit(event);
      });
    });
  }
}

----------------------------------------

TITLE: Defining Attribute Constants in TypeScript
DESCRIPTION: Exports a constant object 'Attribute' with a JSACTION property. This is likely used for identifying specific attributes in DOM elements.

LANGUAGE: typescript
CODE:
// @public
export const Attribute: {
    JSACTION: "jsaction";
};

----------------------------------------

TITLE: Efficient Component Injector Creation with ProtoInjector in Angular
DESCRIPTION: Shows an efficient method of creating component injectors using ProtoInjector to resolve providers once per component type.

LANGUAGE: typescript
CODE:
var proto = new ProtoInjector(providers); // done once
function createComponentInjector(parent, proto) {
  return new Injector(proto, parent);
}

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Provides access to Angular CLI help documentation and directs users to the official Angular CLI README for more information.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Defining Routes in Angular Application
DESCRIPTION: This code defines the route configuration for an Angular application, specifying paths for the home and details components.

LANGUAGE: typescript
CODE:
const routeConfig: Routes = [
  {
    path: '',
    component: HomeComponent,
    title: 'Home page'
  },
  {
    path: 'details/:id',
    component: DetailsComponent,
    title: 'Home details'
  }
];

export default routeConfig;

----------------------------------------

TITLE: Initial Git Commit Example
DESCRIPTION: Shows the initial sequence of commits before adding a fixup commit.

LANGUAGE: plaintext
CODE:
feat: first commit
fix: second commit

----------------------------------------

TITLE: Packaging Angular Source Code for Firefox Review
DESCRIPTION: This command packages the entire Angular monorepo, excluding dependencies and generated files, for submission to Firefox Add-ons review process.

LANGUAGE: shell
CODE:
rm -rf dist/ && zip -r ~/angular-source.zip * -x ".git/*" -x "node_modules/*" -x "**/node_modules/*"

----------------------------------------

TITLE: Configuring Stackblitz for French Translation in Angular i18n
DESCRIPTION: This JSON snippet modifies the project.json file to set the start command for Stackblitz to run the Angular application with French translations. It demonstrates how to configure the internationalization example to use a specific language in the Stackblitz environment.

LANGUAGE: json
CODE:
  "stackblitz": {
    "startCommand": "npm run start:fr"
  }

----------------------------------------

TITLE: Implementing Housing Data Retrieval in Angular Component
DESCRIPTION: Updates the DetailsComponent class to retrieve specific housing location data using HousingService.

LANGUAGE: typescript
CODE:
export class DetailsComponent {
  route: ActivatedRoute = inject(ActivatedRoute);
  housingService = inject(HousingService);
  housingLocation: HousingLocation | undefined;

  constructor() {
    const housingLocationId = Number(this.route.snapshot.params['id']);
    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);
  }
}

----------------------------------------

TITLE: Defining an Angular Component in TypeScript
DESCRIPTION: Example of defining a simple Angular component class with @Component decorator in TypeScript.

LANGUAGE: typescript
CODE:
import {Component, Input} from '@angular/core';

@Component({
  selector: 'greet',
  template: '<div> Hello, {{name}}! </div>'
})
export class GreetComponent {
  @Input() name: string;
}

----------------------------------------

TITLE: Handling Events Outside Angular Zone with Zone Check
DESCRIPTION: This snippet illustrates how to handle events from a third-party library initialized outside the Angular zone, including a check to determine if the code is running within the Angular zone.

LANGUAGE: typescript
CODE:
import { Component, NgZone, OnInit, output } from '@angular/core';
import * as Plotly from 'plotly.js-dist-min';

@Component(...)
class AppComponent implements OnInit {
  plotlyClick = output<Plotly.PlotMouseEvent>();

  constructor(private ngZone: NgZone) {}

  ngOnInit() {
    this.ngZone.runOutsideAngular(() => {
      this.createPlotly();
    });
  }

  private async createPlotly() {
    const plotly = await Plotly.newPlot('chart', data);

    plotly.on('plotly_click', (event: Plotly.PlotMouseEvent) => {
      // This handler will be called outside of the Angular zone because
      // the initialization logic is also called outside of the zone. To check
      // whether we're in the Angular zone, we can call the following:
      console.log(NgZone.isInAngularZone());
      this.plotlyClick.emit(event);
    });
  }
}

----------------------------------------

TITLE: Defining Angular ErrorCode Enum in TypeScript
DESCRIPTION: A TypeScript enumeration defining all possible error codes in the Angular framework. Includes codes for component, configuration, decorator, host directive, import, module, and template-related errors. Each error code has a unique numeric identifier.

LANGUAGE: typescript
CODE:
export enum ErrorCode {
    COMPONENT_IMPORT_NOT_STANDALONE = 2011,
    COMPONENT_INVALID_SHADOW_DOM_SELECTOR = 2009,
    COMPONENT_INVALID_STYLE_URLS = 2021,
    COMPONENT_MISSING_TEMPLATE = 2001,
    COMPONENT_NOT_STANDALONE = 2010,
    COMPONENT_RESOURCE_NOT_FOUND = 2008,
    COMPONENT_UNKNOWN_DEFERRED_IMPORT = 2022,
    COMPONENT_UNKNOWN_IMPORT = 2012,
    CONFIG_EXTENDED_DIAGNOSTICS_IMPLIES_STRICT_TEMPLATES = 4003,
    CONFIG_EXTENDED_DIAGNOSTICS_UNKNOWN_CATEGORY_LABEL = 4004,
    CONFIG_EXTENDED_DIAGNOSTICS_UNKNOWN_CHECK = 4005,
    CONFIG_FLAT_MODULE_NO_INDEX = 4001,
    CONFIG_STRICT_TEMPLATES_IMPLIES_FULL_TEMPLATE_TYPECHECK = 4002,
    CONFLICTING_INPUT_TRANSFORM = 2020,
    CONFLICTING_LET_DECLARATION = 8017,
    CONTROL_FLOW_PREVENTING_CONTENT_PROJECTION = 8011,
    DECORATOR_ARG_NOT_LITERAL = 1001,
    DECORATOR_ARITY_WRONG = 1002,
    DECORATOR_COLLISION = 1006,
    DECORATOR_NOT_CALLED = 1003,
    DECORATOR_UNEXPECTED = 1005,
    DEFERRED_DEPENDENCY_IMPORTED_EAGERLY = 8014,
    DEFERRED_DIRECTIVE_USED_EAGERLY = 8013,
    DEFERRED_PIPE_USED_EAGERLY = 8012,
    DIRECTIVE_INHERITS_UNDECORATED_CTOR = 2006,
    DIRECTIVE_MISSING_SELECTOR = 2004,
    DUPLICATE_VARIABLE_DECLARATION = 8006,
    HOST_BINDING_PARSE_ERROR = 5001,
    HOST_DIRECTIVE_COMPONENT = 2015,
    HOST_DIRECTIVE_CONFLICTING_ALIAS = 2018,
    HOST_DIRECTIVE_INVALID = 2013,
    HOST_DIRECTIVE_MISSING_REQUIRED_BINDING = 2019,
    HOST_DIRECTIVE_NOT_STANDALONE = 2014,
    HOST_DIRECTIVE_UNDEFINED_BINDING = 2017,
    ILLEGAL_FOR_LOOP_TRACK_ACCESS = 8009,
    ILLEGAL_LET_WRITE = 8015,
    IMPORT_CYCLE_DETECTED = 3003,
    IMPORT_GENERATION_FAILURE = 3004,
    INACCESSIBLE_DEFERRED_TRIGGER_ELEMENT = 8010,
    INCORRECTLY_DECLARED_ON_STATIC_MEMBER = 1100,
    INITIALIZER_API_DECORATOR_METADATA_COLLISION = 1051,
    INITIALIZER_API_DISALLOWED_MEMBER_VISIBILITY = 1053,
    INITIALIZER_API_NO_REQUIRED_FUNCTION = 1052,
    INITIALIZER_API_WITH_DISALLOWED_DECORATOR = 1050,
    INJECTABLE_DUPLICATE_PROV = 9001,
    INJECTABLE_INHERITS_INVALID_CONSTRUCTOR = 2016,
    INLINE_TCB_REQUIRED = 8900,
    INLINE_TYPE_CTOR_REQUIRED = 8901,
    INTERPOLATED_SIGNAL_NOT_INVOKED = 8109,
    INVALID_BANANA_IN_BOX = 8101,
    LET_USED_BEFORE_DEFINITION = 8016,
    LOCAL_COMPILATION_UNRESOLVED_CONST = 11001,
    LOCAL_COMPILATION_UNSUPPORTED_EXPRESSION = 11003,
    MISSING_CONTROL_FLOW_DIRECTIVE = 8103,
    MISSING_NGFOROF_LET = 8105,
    MISSING_PIPE = 8004,
    MISSING_REFERENCE_TARGET = 8003,
    MISSING_REQUIRED_INPUTS = 8008,
    NGMODULE_BOOTSTRAP_IS_STANDALONE = 6009,
    NGMODULE_DECLARATION_IS_STANDALONE = 6008,
    NGMODULE_DECLARATION_NOT_UNIQUE = 6007,
    NGMODULE_INVALID_DECLARATION = 6001,
    NGMODULE_INVALID_EXPORT = 6003,
    NGMODULE_INVALID_IMPORT = 6002,
    NGMODULE_INVALID_REEXPORT = 6004,
    NGMODULE_MODULE_WITH_PROVIDERS_MISSING_GENERIC = 6005,
    NGMODULE_REEXPORT_NAME_COLLISION = 6006,
    NON_STANDALONE_NOT_ALLOWED = 2023,
    NULLISH_COALESCING_NOT_NULLABLE = 8102,
    OPTIONAL_CHAIN_NOT_NULLABLE = 8107,
    PARAM_MISSING_TOKEN = 2003,
    PIPE_MISSING_NAME = 2002,
    SCHEMA_INVALID_ATTRIBUTE = 8002,
    SCHEMA_INVALID_ELEMENT = 8001,
    SKIP_HYDRATION_NOT_STATIC = 8108,
    SPLIT_TWO_WAY_BINDING = 8007,
    SUFFIX_NOT_SUPPORTED = 8106,
    SUGGEST_STRICT_TEMPLATES = 10001,
    SUGGEST_SUBOPTIMAL_TYPE_INFERENCE = 10002,
    SYMBOL_NOT_EXPORTED = 3001,
    TEMPLATE_PARSE_ERROR = 5002,
    TEXT_ATTRIBUTE_NOT_BINDING = 8104,
    UNDECORATED_CLASS_USING_ANGULAR_FEATURES = 2007,
    UNDECORATED_PROVIDER = 2005,
    UNINVOKED_FUNCTION_IN_EVENT_BINDING = 8111,
    UNSUPPORTED_INITIALIZER_API_USAGE = 8110,
    UNUSED_LET_DECLARATION = 8112,
    UNUSED_STANDALONE_IMPORTS = 8113,
    VALUE_HAS_WRONG_TYPE = 1010,
    VALUE_NOT_LITERAL = 1011,
    WARN_NGMODULE_ID_UNNECESSARY = 6100,
    WRITE_TO_READ_ONLY_VARIABLE = 8005
}

----------------------------------------

TITLE: Running Self-closing Tag Migration on Specific Path in Angular
DESCRIPTION: This command runs the Angular schematic to convert component selectors to self-closing tags for a specific subset of files within the application.

LANGUAGE: bash
CODE:
ng generate @angular/core:self-closing-tag --path src/app/sub-component

----------------------------------------

TITLE: Implementing AngularJSUrlCodec Class in TypeScript for URL Encoding/Decoding
DESCRIPTION: This class implements the UrlCodec interface, providing methods for encoding and decoding URL components according to AngularJS conventions. It includes functionality for handling paths, search parameters, and hash fragments.

LANGUAGE: typescript
CODE:
export class AngularJSUrlCodec implements UrlCodec {
    // (undocumented)
    areEqual(valA: string, valB: string): boolean;
    // (undocumented)
    decodeHash(hash: string): string;
    // (undocumented)
    decodePath(path: string, html5Mode?: boolean): string;
    // (undocumented)
    decodeSearch(search: string): {
        [k: string]: unknown;
    };
    // (undocumented)
    encodeHash(hash: string): string;
    // (undocumented)
    encodePath(path: string): string;
    // (undocumented)
    encodeSearch(search: string | {
        [k: string]: unknown;
    }): string;
    // (undocumented)
    normalize(href: string): string;
    // (undocumented)
    normalize(path: string, search: {
        [k: string]: unknown;
    }, hash: string, baseUrl?: string): string;
    // (undocumented)
    parse(url: string, base?: string): {
        href: string;
        protocol: string;
        host: string;
        search: string;
        hash: string;
        hostname: string;
        port: string;
        pathname: string;
    };
}

----------------------------------------

TITLE: Not Pseudo-class Selector in Angular
DESCRIPTION: Demonstrates using the :not pseudo-class in a component selector to exclude specific elements.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: '[dropzone]:not(textarea)',
  ...
})
export class DropZone { }

----------------------------------------

TITLE: Defining @defer Block Structure in Angular HTML
DESCRIPTION: This snippet demonstrates the full syntax of an @defer block, including optional placeholder, loading, and error blocks. It shows how to specify triggers, conditions, and prefetch options for deferred loading of template fragments.

LANGUAGE: angular-html
CODE:
@defer ( on <trigger>; when <condition>; prefetch on <trigger>; prefetch when <condition> ) {
  <!-- deferred template fragment -->
  <calendar-cmp />
} @placeholder ( minimum? <duration> ) {
  <!-- placeholder template fragment -->
  <p>Placeholder</p>
} @loading ( minimum? <duration>; after? <duration> ) {
  <!-- loading template fragment -->
  <img alt="loading image" src="loading.gif" />
} @error {
  <!-- error template fragment -->
  <p>An loading error occurred</p>
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Basic @if Conditional Rendering in Angular Component
DESCRIPTION: Demonstrates how to implement basic conditional rendering using @if in an Angular component template. The example shows a login status message that displays based on a boolean condition.

LANGUAGE: angular-ts
CODE:
@Component({
  ...
  template: `
    @if (isLoggedIn) {
      <p>Welcome back, Friend!</p>
    }
  `,
})
class AppComponent {
  isLoggedIn = true;
}

----------------------------------------

TITLE: Angular Issue Response: Expected Behavior
DESCRIPTION: Template response for issues describing expected behavior

LANGUAGE: markdown
CODE:
It appears this behaves as expected. If you still feel there is an issue, please provide further details in a new issue.

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Provides access to Angular CLI help documentation directly from the command line.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: HTTP Feature Configuration
DESCRIPTION: Functions for configuring HTTP client features like interceptors, XSRF protection, and JSONP support using the new provider system.

LANGUAGE: typescript
CODE:
export function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]): EnvironmentProviders;

export function withInterceptors(interceptorFns: HttpInterceptorFn[]): HttpFeature<HttpFeatureKind.Interceptors>;

export function withXsrfConfiguration({
    cookieName,
    headerName,
}: {
    cookieName?: string;
    headerName?: string;
}): HttpFeature<HttpFeatureKind.CustomXsrfConfiguration>;

----------------------------------------

TITLE: Example Git Commit Sequence
DESCRIPTION: Demonstrates a sequence of commits including a fixup commit targeting the first commit in the sequence.

LANGUAGE: plaintext
CODE:
feat: first commit
fix: second commit
fixup! feat: first commit

----------------------------------------

TITLE: Displaying Angular Runtime Errors Table in Markdown
DESCRIPTION: A markdown table listing Angular runtime errors with their codes, names, and links to detailed error pages.

LANGUAGE: markdown
CODE:
| Code      | Name                                                                                 |
| :-------- | :----------------------------------------------------------------------------------- |
| `NG0100`  | [Expression Changed After Checked](errors/NG0100)                                    |
| `NG0200`  | [Circular Dependency in DI](errors/NG0200)                                           |
| `NG0201`  | [No Provider Found](errors/NG0201)                                                   |
| `NG0203`  | [`inject()` must be called from an injection context](errors/NG0203)                 |
| `NG0209`  | [Invalid multi provider](errors/NG0209)                                              |
| `NG0300`  | [Selector Collision](errors/NG0300)                                                  |
| `NG0301`  | [Export Not Found](errors/NG0301)                                                    |
| `NG0302`  | [Pipe Not Found](errors/NG0302)                                                      |
| `NG0403`  | [Bootstrapped NgModule doesn't specify which component to initialize](errors/NG0403) |
| `NG0500`  | [Hydration Node Mismatch](errors/NG0500)                                             |
| `NG0501`  | [Hydration Missing Siblings](errors/NG0501)                                          |
| `NG0502`  | [Hydration Missing Node](errors/NG0502)                                              |
| `NG0503`  | [Hydration Unsupported Projection of DOM Nodes](errors/NG0503)                       |
| `NG0504`  | [Skip hydration flag is applied to an invalid node](errors/NG0504)                   |
| `NG0505`  | [No hydration info in server response](errors/NG0505)                                |
| `NG0506`  | [NgZone remains unstable](errors/NG0506)                                             |
| `NG0507`  | [HTML content was altered after SSR](errors/NG0507)                                  |
| `NG0750`  | [@defer dependencies failed to load](errors/NG0750)                                  |
| `NG0910`  | [Unsafe bindings on an iframe element](errors/NG0910)                                |
| `NG0912`  | [Component ID generation collision](errors/NG0912)                                   |
| `NG0955`  | [Track expression resulted in duplicated keys for a given collection](errors/NG0955) |
| `NG0956`  | [Tracking expression caused re-creation of the DOM structure](errors/NG0956)         |
| `NG01101` | [Wrong Async Validator Return Type](errors/NG01101)                                  |
| `NG01203` | [Missing value accessor](errors/NG01203)                                             |
| `NG02200` | [Missing Iterable Differ](errors/NG02200)                                            |
| `NG02800` | [JSONP support in HttpClient configuration](errors/NG02800)                          |
| `NG05000` | [Hydration with unsupported Zone.js instance.](errors/NG05000)                       |
| `NG05104` | [Root element was not found.](errors/NG05104)                                        |

----------------------------------------

TITLE: Correct Pipe Usage with Ternary
DESCRIPTION: Shows the correct way to apply a pipe to the entire ternary expression by wrapping it in parentheses.

LANGUAGE: typescript
CODE:
(condition ? a : b) | pipe

----------------------------------------

TITLE: Accessible RouterLink Implementation
DESCRIPTION: Shows how to implement accessible router links using RouterLinkActive directive and aria-current attribute for proper accessibility support.

LANGUAGE: html
CODE:
<nav>
  <a routerLink="home"
      routerLinkActive="active-page"
      ariaCurrentWhenActive="page">
    Home
  </a>
  <a routerLink="about"
      routerLinkActive="active-page"
      ariaCurrentWhenActive="page">
    About
  </a>
  <a routerLink="shop"
      routerLinkActive="active-page"
      ariaCurrentWhenActive="page">
    Shop
  </a>
</nav>

----------------------------------------

TITLE: Defining Angular Configuration Interfaces in TypeScript
DESCRIPTION: A comprehensive set of TypeScript interfaces and enums that define various configuration options for Angular compilation and runtime behavior. Includes options for Bazel builds, diagnostics, i18n, template checking, and compilation targets.

LANGUAGE: typescript
CODE:
export interface BazelAndG3Options {
    annotateForClosureCompiler?: boolean;
    generateDeepReexports?: boolean;
    generateExtraImportsInLocalMode?: boolean;
    onlyExplicitDeferDependencyImports?: boolean;
    onlyPublishPublicTypingsForNgModules?: boolean;
}

export enum DiagnosticCategoryLabel {
    Error = "error",
    Suppress = "suppress",
    Warning = "warning"
}

export interface DiagnosticOptions {
    extendedDiagnostics?: {
        defaultCategory?: DiagnosticCategoryLabel;
        checks?: {
            [Name in ExtendedTemplateDiagnosticName]?: DiagnosticCategoryLabel;
        };
    };
    strictStandalone?: boolean;
}

export interface I18nOptions {
    enableI18nLegacyMessageIdFormat?: boolean;
    i18nInLocale?: string;
    i18nNormalizeLineEndingsInICUs?: boolean;
    i18nOutFile?: string;
    i18nOutFormat?: string;
    i18nOutLocale?: string;
    i18nPreserveWhitespaceForLegacyExtraction?: boolean;
    i18nUseExternalIds?: boolean;
}

export interface LegacyNgcOptions {
    allowEmptyCodegenFiles?: boolean;
    flatModuleId?: string;
    flatModuleOutFile?: string;
    fullTemplateTypeCheck?: boolean;
    preserveWhitespaces?: boolean;
    strictInjectionParameters?: boolean;
}

export interface MiscOptions {
    compileNonExportedClasses?: boolean;
    disableTypeScriptVersionCheck?: boolean;
    forbidOrphanComponents?: boolean;
}

export interface StrictTemplateOptions {
    strictAttributeTypes?: boolean;
    strictContextGenerics?: boolean;
    strictDomEventTypes?: boolean;
    strictDomLocalRefTypes?: boolean;
    strictInputAccessModifiers?: boolean;
    strictInputTypes?: boolean;
    strictLiteralTypes?: boolean;
    strictNullInputTypes?: boolean;
    strictOutputEventTypes?: boolean;
    strictSafeNavigationTypes?: boolean;
    strictTemplates?: boolean;
}

export interface TargetOptions {
    compilationMode?: 'full' | 'partial' | 'experimental-local';
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server which serves the application locally at http://localhost:4200 with hot reload capability.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Using Inject Decorator in Angular TypeScript
DESCRIPTION: Example showing how to properly inject dependencies using the @Injectable and @Inject decorators from @angular/core to resolve missing token errors. These decorators ensure proper runtime type representation for dependency injection.

LANGUAGE: typescript
CODE:
@Injectable({
  providedIn: 'root'
})
export class MyService {
  constructor(@Inject(CONFIG_TOKEN) config: Config) {}
}

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Command to access the Angular CLI help documentation.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Decimal Pipe Configuration in Angular
DESCRIPTION: Shows how to use the decimal pipe with the digitsInfo parameter format '3.2-2' to control integer and fraction digits display.

LANGUAGE: typescript
CODE:
template: `
    ...
    <li>Number with "decimal" {{ num | number:"3.2-2" }}</li>
`

----------------------------------------

TITLE: Running Angular Benchmarks in Bash
DESCRIPTION: This command runs the Angular benchmarks using the provided convenience script.

LANGUAGE: bash
CODE:
yarn benchmarks run

----------------------------------------

TITLE: Embedding YouTube Video in Angular Documentation
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in Angular documentation using a custom 'docs-video' component. The video is about the 'Expression Changed After Checked' error.

LANGUAGE: html
CODE:
<docs-video src="https://www.youtube.com/embed/O47uUnJjbJc" alt="Expression Changed After Checked Video"/>

----------------------------------------

TITLE: Implementing MockAnimationPlayer Class in TypeScript for Angular Animations Testing
DESCRIPTION: This class extends NoopAnimationPlayer and provides a mock implementation of an animation player. It includes properties for tracking animation details and methods for controlling the animation lifecycle.

LANGUAGE: typescript
CODE:
export class MockAnimationPlayer extends NoopAnimationPlayer {
    constructor(element: any, keyframes: Array<ɵStyleDataMap>, duration: number, delay: number, easing: string, previousPlayers: any[]);
    currentSnapshot: ɵStyleDataMap;
    delay: number;
    duration: number;
    easing: string;
    element: any;
    keyframes: Array<ɵStyleDataMap>;
    previousPlayers: any[];
    previousStyles: ɵStyleDataMap;
    beforeDestroy(): void;
    destroy(): void;
    finish(): void;
    hasStarted(): boolean;
    play(): void;
    reset(): void;
}

----------------------------------------

TITLE: Running Angular E2E Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access Angular CLI help documentation

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Using Macros in NgModule Metadata
DESCRIPTION: This snippet shows how to use a macro function 'wrapInArray' in NgModule metadata. The compiler treats this usage as if the array was written directly in the metadata.

LANGUAGE: typescript
CODE:
@NgModule({
  declarations: wrapInArray(TypicalComponent)
})
export class TypicalModule {}

----------------------------------------

TITLE: Angular Issue Response: Obsolete
DESCRIPTION: Template response for issues that are no longer relevant

LANGUAGE: markdown
CODE:
Thanks for reporting this issue. This issue is now obsolete due to changes in the recent releases. Please update to the most recent Angular version.

If the problem still exists in your application, please [open a new issue](https://github.com/angular/angular/issues/new/choose) and follow the instructions in the issue template.

----------------------------------------

TITLE: Building and Testing Angular Library
DESCRIPTION: CLI commands to build, test, and lint an Angular library project.

LANGUAGE: shell
CODE:
ng build my-lib --configuration development
ng test my-lib
ng lint my-lib

----------------------------------------

TITLE: Displaying Code Snippets in Angular Documentation
DESCRIPTION: This snippet demonstrates the structure for presenting multiple code examples in Angular documentation. It uses custom 'docs-code-multifile' and 'docs-code' elements to wrap and display code snippets.

LANGUAGE: html
CODE:
<docs-code-multifile>
<docs-code >this is code</docs-code>
<docs-code >this is also code</docs-code>
</docs-code-multifile>

----------------------------------------

TITLE: Defining Animation Driver Interface in TypeScript
DESCRIPTION: Contains the abstract AnimationDriver class that defines the core animation capabilities and NoopAnimationDriver implementation. The AnimationDriver provides methods for handling animations, style computation, element manipulation, and validation in Angular's animation system.

LANGUAGE: typescript
CODE:
import { AnimationPlayer } from '@angular/animations';
import * as i0 from '@angular/core';

// @public (undocumented)
export abstract class AnimationDriver {
    // (undocumented)
    abstract animate(element: any, keyframes: Array<Map<string, string | number>>, duration: number, delay: number, easing?: string | null, previousPlayers?: any[], scrubberAccessRequested?: boolean): any;
    // (undocumented)
    abstract computeStyle(element: any, prop: string, defaultValue?: string): string;
    // (undocumented)
    abstract containsElement(elm1: any, elm2: any): boolean;
    abstract getParentElement(element: unknown): unknown;
    // @deprecated (undocumented)
    static NOOP: AnimationDriver;
    // (undocumented)
    abstract query(element: any, selector: string, multi: boolean): any[];
    // (undocumented)
    abstract validateAnimatableStyleProperty?: (prop: string) => boolean;
    // (undocumented)
    abstract validateStyleProperty(prop: string): boolean;
}

// @public
export class NoopAnimationDriver implements AnimationDriver {
    // (undocumented)
    animate(element: any, keyframes: Array<Map<string, string | number>>, duration: number, delay: number, easing: string, previousPlayers?: any[], scrubberAccessRequested?: boolean): AnimationPlayer;
    // (undocumented)
    computeStyle(element: any, prop: string, defaultValue?: string): string;
    // (undocumented)
    containsElement(elm1: any, elm2: any): boolean;
    // (undocumented)
    getParentElement(element: unknown): unknown;
    // (undocumented)
    query(element: any, selector: string, multi: boolean): any[];
    // (undocumented)
    validateStyleProperty(prop: string): boolean;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<NoopAnimationDriver, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<NoopAnimationDriver>;
}

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project. Build artifacts will be stored in the 'dist/' directory. The '--prod' flag can be used for a production build.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Generating Angular Components and Other Artifacts
DESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, guards, interfaces, enums, or modules. This command helps in scaffolding Angular project structure.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Executes end-to-end tests for the Angular project. Note that a package implementing end-to-end testing capabilities must be added before using this command.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Executes the unit tests for the Angular project using Karma test runner.

LANGUAGE: shell
CODE:
ng test

----------------------------------------

TITLE: Importing LowerCase Pipe in Angular Component
DESCRIPTION: Shows how to import the LowerCase pipe from @angular/common at the file level in an Angular component.

LANGUAGE: typescript
CODE:
import { LowerCasePipe } from '@angular/common';

----------------------------------------

TITLE: Bazel Build Analysis Commands
DESCRIPTION: Shell commands for analyzing Bazel build performance and generating profile reports

LANGUAGE: sh
CODE:
yarn bazel build //packages/compiler --profile filename_name.profile
yarn bazel analyze-profile filename_name.profile
yarn bazel analyze-profile filename_name.profile --task_tree ".*"
yarn bazel analyze-profile filename_name.profile --task_tree ".*" --task_tree_threshold 5000
yarn bazel analyze-profile filename_name.profile --task_tree "Compiling TypeScript" --task_tree_threshold 5000
yarn bazel analyze-profile filename_name.profile --html --html_details --html_histograms

----------------------------------------

TITLE: Installing Memo Decorator Package
DESCRIPTION: NPM installation command for the memo-decorator package

LANGUAGE: shell
CODE:
npm i memo-decorator --save

----------------------------------------

TITLE: Running Angular Self-Closing Tag Migration Schematic
DESCRIPTION: Command to execute the Angular schematic for migrating templates to use self-closing tags. This schematic automates the process of updating template syntax.

LANGUAGE: shell
CODE:
ng generate @angular/core:self-closing-tag

----------------------------------------

TITLE: Running Webdriver Tests Locally
DESCRIPTION: Commands for executing webdriver e2e tests in a local environment

LANGUAGE: bash
CODE:
yarn webdriver-start
yarn webdriver-http
yarn webdriver-test

----------------------------------------

TITLE: Installing Yarn Package Manager for Angular DevTools
DESCRIPTION: Installs Yarn package manager globally using NPM for managing dependencies in Angular DevTools development.

LANGUAGE: shell
CODE:
npm install -g yarn@1

----------------------------------------

TITLE: Creating Pure Flying Heroes Pipe in Angular
DESCRIPTION: Implementation of a pure pipe that filters flying heroes from an array. Only executes when the reference to the input array changes.

LANGUAGE: typescript
CODE:
@Pipe({
  name: 'flyingHeroes'
})
export class FlyingHeroesPipe implements PipeTransform {
  transform(allHeroes: Hero[]) {
    return allHeroes.filter(hero => hero.canFly);
  }
}

----------------------------------------

TITLE: Configuring Prefetch in Angular @defer Block
DESCRIPTION: This snippet shows how to configure prefetching for a @defer block using the 'prefetch' keyword. It demonstrates setting triggers and conditions for prefetching, which is separate from the rendering logic controlled by standard 'on' and 'when' conditions.

LANGUAGE: angular-html
CODE:
@defer (prefetch on <trigger>; prefetch when <condition>) {
  <!-- deferred template fragment -->
}

----------------------------------------

TITLE: Defining Single Gulp Task Factory
DESCRIPTION: Example showing how to define a single task factory function in a task file. The factory accepts gulp as a parameter and returns a function that takes a done callback.

LANGUAGE: javascript
CODE:
module.exports = (gulp) => (done) => {
  ...
};

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server locally

LANGUAGE: shell
CODE:
npm start

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Executes the unit tests for the Angular project using Karma as the test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Using Destructured Variables in Angular Providers (TypeScript)
DESCRIPTION: This snippet demonstrates a 'Destructured variable or constant not supported' error. It shows providers referencing variables assigned by destructuring, which is not supported by the template compiler.

LANGUAGE: typescript
CODE:
// ERROR
import { configuration } from './configuration';

// destructured assignment to foo and bar
const {foo, bar} = configuration;
  …
  providers: [
    {provide: Foo, useValue: foo},
    {provide: Bar, useValue: bar},
  ]
  …

----------------------------------------

TITLE: Angular Issue Response: Can't Reproduce
DESCRIPTION: Template response for issues that lack reproducible examples

LANGUAGE: markdown
CODE:
I'm sorry but we can't reproduce the problem you are reporting. We require that reported issues have a minimal reproduction that showcases the problem.

If the problem still exists in your application, please [open a new issue](https://github.com/angular/angular/issues/new/choose) and follow the instructions in the issue template that include info on how to create a reproduction using our template.

----------------------------------------

TITLE: Implementing UpperCase Pipe in Angular Component
DESCRIPTION: Demonstrates how to import and use the UpperCase pipe in an Angular component. The pipe transforms the 'loudMessage' property to uppercase in the template.

LANGUAGE: angular-ts
CODE:
import {UpperCasePipe} from '@angular/common';

@Component({
    ...
    template: `{{ loudMessage | uppercase }}`,
    imports: [UpperCasePipe],
})
class AppComponent {
    loudMessage = 'we think you are doing great!'
}

----------------------------------------

TITLE: Updating Commit Message in Angular Development Workflow
DESCRIPTION: This snippet illustrates the process of updating the commit message of the last commit on a branch in Angular development. It includes checking out the branch, amending the commit, and force pushing the changes.

LANGUAGE: shell
CODE:
git checkout my-fix-branch
git commit --amend
git push --force-with-lease

----------------------------------------

TITLE: Running Angular SSR Benchmark for Deopt Explorer
DESCRIPTION: Command to generate V8 logs for analysis with the Deopt Explorer VSCode extension.

LANGUAGE: shell
CODE:
yarn bazel run //modules/ssr-benchmarks:run_deopt

----------------------------------------

TITLE: Running Basic Tests and Checks in Zone.js
DESCRIPTION: Commands for running various tests including browser tests via Karma, Node.js tests, linting, and formatting checks

LANGUAGE: bash
CODE:
yarn
yarn ws-server
yarn test
yarn test-node
yarn lint
yarn format
yarn ci

----------------------------------------

TITLE: Angular Issue Response: Insufficient Information
DESCRIPTION: Template response for issues lacking required information

LANGUAGE: markdown
CODE:
Thanks for reporting this issue. However, you didn't provide sufficient information for us to understand and reproduce the problem. Please check out [our submission guidelines](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#submit-issue) to understand why we can't act on issues that are lacking important information.

If the problem still exists in your application, please [open a new issue](https://github.com/angular/angular/issues/new/choose) and follow the instructions in the issue template.


----------------------------------------

TITLE: Mermaid Pie Chart
DESCRIPTION: Pie chart showing pet adoption statistics using Mermaid syntax.

LANGUAGE: mermaid
CODE:
pie title Pets adopted by volunteers
      "Dogs" : 386
      "Cats" : 85
      "Rats" : 15

----------------------------------------

TITLE: Static ARIA Attribute Usage in Angular
DESCRIPTION: Shows the correct syntax for using static ARIA attributes in Angular templates, which doesn't require special binding syntax.

LANGUAGE: html
CODE:
<button aria-label="Save document">…</button>

----------------------------------------

TITLE: Compiled Angular Component in JavaScript (Ivy)
DESCRIPTION: Example of how an Angular component is compiled to JavaScript with Ivy, using static fields instead of decorator metadata.

LANGUAGE: javascript
CODE:
const i0 = require("@angular/core");
class GreetComponent {}
GreetComponent.ɵcmp = i0.ɵɵdefineComponent({
    type: GreetComponent,
    tag: 'greet',
    factory: () => new GreetComponent(),
    template: function (rf, ctx) {
        if (rf & RenderFlags.Create) {
            i0.ɵɵelementStart(0, 'div');
            i0.ɵɵtext(1);
            i0.ɵɵelementEnd();
        }
        if (rf & RenderFlags.Update) {
            i0.ɵɵadvance();
            i0.ɵɵtextInterpolate1('Hello ', ctx.name, '!');
        }
    }
});

----------------------------------------

TITLE: Installing NPM Dependencies for Angular DevTools
DESCRIPTION: Uses Yarn to install all NPM dependencies specified in the package.json file for Angular DevTools, ensuring consistent versions with the --frozen-lockfile flag.

LANGUAGE: shell
CODE:
yarn --frozen-lockfile

----------------------------------------

TITLE: Documentation Cards Container in Angular
DESCRIPTION: Example showing the structure of a documentation navigation section using custom card components to link to different aspects of dependency injection.

LANGUAGE: html
CODE:
<docs-card-container>
  <docs-card title="Understanding dependency injection" href="/guide/di/dependency-injection">
    Learn basic principles of dependency injection in Angular.
  </docs-card>
  <docs-card title="Creating and injecting service" href="/guide/di/creating-injectable-service">
    Describes how to create a service and inject it in other services and components.
  </docs-card>
  <docs-card title="Configuring dependency providers" href="/guide/di/dependency-injection-providers">
    Describes how to configure dependencies using the providers field on the @Component and @NgModule decorators. Also describes how to use InjectionToken to provide and inject values in DI, which can be helpful when you want to use a value other than classes as dependencies.
  </docs-card>
    <docs-card title="Injection context" href="/guide/di/dependency-injection-context">
    Describes what an injection context is and how to use the DI system where you need it.
  </docs-card>
  <docs-card title="Hierarchical injectors" href="/guide/di/hierarchical-dependency-injection">
    Hierarchical DI enables you to share dependencies between different parts of the application only when and if you need to. This is an advanced topic.
  </docs-card>
</docs-card-container>

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Angular PR Response: Commit Header
DESCRIPTION: Template response for pull requests with incorrect commit headers

LANGUAGE: markdown
CODE:
It looks like you need to update your commit header to match our requirements. This is different from the PR title. To update the commit header, use the command `git commit --amend` and update the header there.

Once you've finished that update, you will need to force push using `git push [origin name] [branch name] --force`. That should address this.

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to access Angular CLI help documentation

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Implementing HeroService with Dependency Injection in Angular
DESCRIPTION: Creates a HeroService class that depends on Logger and BackendService, demonstrating service-to-service dependency injection in Angular.

LANGUAGE: typescript
CODE:
import { inject } from "@angular/core";

export class HeroService {
  private heroes: Hero[] = [];

  private backend = inject(BackendService);
  private logger = inject(Logger);

  async getHeroes() {
    // Fetch
    this.heroes = await this.backend.getAll(Hero);
    // Log
    this.logger.log(`Fetched ${this.heroes.length} heroes.`);
    return this.heroes;
  }
}

----------------------------------------

TITLE: Specifying Commit Message Header Format in Markdown
DESCRIPTION: This snippet defines the format for the commit message header, including type, scope, and summary. It uses a code block with explanatory comments to illustrate each component.

LANGUAGE: markdown
CODE:
```
<type>(<scope>): <short summary>
  │       │             │
  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.
  │       │
  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|
  │                          elements|forms|http|language-service|localize|platform-browser|
  │                          platform-browser-dynamic|platform-server|router|service-worker|
  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|
  │                          devtools
  │
  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test
```

----------------------------------------

TITLE: Adding ngSubmit Event Handler
DESCRIPTION: Shows how to bind the form submission event to the handleSubmit method using ngSubmit.

LANGUAGE: html
CODE:
<form
  [formGroup]="profileForm"
  (ngSubmit)="handleSubmit()">

----------------------------------------

TITLE: Defining @Input Property in Angular Component
DESCRIPTION: This snippet demonstrates how to create an Input property using the @Input decorator in an Angular component class.

LANGUAGE: typescript
CODE:
class UserComponent {
  @Input() occupation = '';
}

----------------------------------------

TITLE: Mermaid Sequence Diagram
DESCRIPTION: Sequence diagram showing interaction between Alice and John using Mermaid syntax.

LANGUAGE: mermaid
CODE:
sequenceDiagram
      Alice->>+John: Hello John, how are you?
      Alice->>+John: John, can you hear me?
      John-->>-Alice: Hi Alice, I can hear you!
      John-->>-Alice: I feel great!

----------------------------------------

TITLE: Angular Component with Unmigrated Output
DESCRIPTION: Example of a component that won't be migrated due to the use of the pipe() method on the event emitter, which is an exception case for the migration.

LANGUAGE: typescript
CODE:
export class MyDialogComponent {
  @Output() close = new EventEmitter<void>();
  doSome(): void {
    this.close.complete();
  }
  otherThing(): void {
    this.close.pipe();
  }
}

----------------------------------------

TITLE: Publishing Angular Benchpress Package via Bazel
DESCRIPTION: Command to publish the @angular/benchpress package using Bazel after updating the version in package.json. This package requires manual publishing as it's not released with the main framework.

LANGUAGE: bash
CODE:
yarn bazel run //packages/benchpress:npm_package.publish

----------------------------------------

TITLE: Running Webdriver Tests with Sauce Connect
DESCRIPTION: Commands for running webdriver tests using Sauce Labs, including environment setup and test execution

LANGUAGE: bash
CODE:
export SAUCE_USERNAME=XXXX
export SAUCE_ACCESS_KEY=XXX

sc -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY
yarn webdriver-http
yarn webdriver-sauce-test

----------------------------------------

TITLE: Testing Reactive Forms - View to Model
DESCRIPTION: Test case demonstrating how to verify data flow from view to model in reactive forms by simulating user input.

LANGUAGE: typescript
CODE:
it('should update the value of the input field', () => {
  const input = fixture.nativeElement.querySelector('input');
  const event = createNewEvent('input');

  input.value = 'Red';
  input.dispatchEvent(event);

  expect(component.favoriteColorControl.value).toEqual('Red');
});

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Creates new Angular components and other artifacts using the Angular CLI generate command.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Creating a New Git Branch for Angular Contributions in Shell
DESCRIPTION: This snippet demonstrates how to create a new Git branch for making changes to the Angular project. It checks out a new branch named 'my-fix-branch' based on the main branch.

LANGUAGE: shell
CODE:
git checkout -b my-fix-branch main

----------------------------------------

TITLE: Inefficient Tracking Expression in Angular @for Loop
DESCRIPTION: This snippet shows an Angular component with a @for loop using an inefficient tracking expression. The entire list is re-created when toggling the 'done' status of items, which is unnecessarily expensive.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <button (click)="toggleAllDone()">All done!</button>
    <ul>
    @for (todo of todos; track todo) {
      <li>{{todo.task}}</li>
    }
    </ul>
  `,
})
export class App {
  todos = [
    { id: 0, task: 'understand trackBy', done: false },
    { id: 1, task: 'use proper tracking expression', done: false },
  ];

  toggleAllDone() {
    this.todos = this.todos.map(todo => ({ ...todo, done: true }));
  }
}

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server. The server will run on http://localhost:4200/ and automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Demonstrating Comments in TypeScript
DESCRIPTION: Example showing the difference between non-useful and useful comments in Angular code. The useful comment explains the reasoning behind setting a default tabindex.

LANGUAGE: typescript
CODE:
// Set default tabindex.
if (!attributes['tabindex']) {
  element.setAttribute('tabindex', '-1');
}

LANGUAGE: typescript
CODE:
// Unless the user specifies otherwise, the calendar should not be a tab stop.
// This prevents ngAria from overzealously adding a tabindex to anything with an ng-model.
if (!attributes['tabindex']) {
  element.setAttribute('tabindex', '-1');
}

----------------------------------------

TITLE: Example of TESTED Comment for Angular PR Merge
DESCRIPTION: This snippet shows an example of a TESTED comment that can be used to bypass the global presubmit requirement for certain PRs, typically used for documentation updates or other low-risk changes.

LANGUAGE: plaintext
CODE:
TESTED=docs only update and does not need a TGP

----------------------------------------

TITLE: Form Submission Handler Method
DESCRIPTION: Implementation of the form submission handler method that displays form values in an alert.

LANGUAGE: typescript
CODE:
handleSubmit() {
  alert(
    this.profileForm.value.name + ' | ' + this.profileForm.value.email
  );
}

----------------------------------------

TITLE: Currency Pipe Usage in Angular
DESCRIPTION: Demonstrates how to use the currency pipe to format monetary values in Angular templates.

LANGUAGE: typescript
CODE:
template: `
    ...
    <li>Currency with "currency" {{ cost | currency }}</li>
`

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor testing framework.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Committing Changes in Angular Development using Git
DESCRIPTION: This code snippet shows how to commit changes in the Angular project using Git. It uses the '--all' option to automatically add and remove edited files.

LANGUAGE: shell
CODE:
git commit --all

----------------------------------------

TITLE: Angular Material Installation
DESCRIPTION: Shell command for installing Angular Material as a project dependency.

LANGUAGE: shell
CODE:
npm install @angular/material --save

----------------------------------------

TITLE: Optional Injection with Non-Nullable Types
DESCRIPTION: Example showing migration of optional dependencies with non-nullable type assertions to maintain type compatibility.

LANGUAGE: typescript
CODE:
import { Component, Inject, Optional } from '@angular/core';
import { TOKEN_ONE, TOKEN_TWO } from './token';

@Component()
export class MyComp {
  constructor(
    @Inject(TOKEN_ONE) @Optional() private tokenOne: number,
    @Inject(TOKEN_TWO) @Optional() private tokenTwo: string | null) {}
}

LANGUAGE: typescript
CODE:
import { Component, inject } from '@angular/core';
import { TOKEN_ONE, TOKEN_TWO } from './token';

@Component()
export class MyComp {
  private tokenOne = inject(TOKEN_ONE, { optional: true })!;
  private tokenTwo = inject(TOKEN_TWO, { optional: true });
}

----------------------------------------

TITLE: Creating Test Driver for Custom Metrics
DESCRIPTION: Demonstrates how to create a test driver to measure and validate custom metrics, such as bootstrap time, using Benchpress.

LANGUAGE: javascript
CODE:
describe('home page load', function() {
  it('should log load time for a 2G connection', done => {
    runner.sample({
      execute: () => {
        browser.get(`http://localhost:8080`);
      },
      userMetrics: {
        timeToBootstrap: 'The time in milliseconds to bootstrap'
      },
      providers: [
        {provide: RegressionSlopeValidator.METRIC, useValue: 'timeToBootstrap'}
      ]
    }).then(done);
  });
});

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project and stores the build artifacts in the 'dist/' directory. The '--prod' flag can be used for a production build.

LANGUAGE: shell
CODE:
ng build

----------------------------------------

TITLE: Trusting URL Values in Angular Component
DESCRIPTION: Shows how to mark a URL as trusted using DomSanitizer to bypass Angular's automatic sanitization when needed.

LANGUAGE: typescript
CODE:
constructor(private sanitizer: DomSanitizer) {
  this.dangerousUrl = 'javascript:alert("Hi there")';
  this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);
}

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Command to access the Angular CLI help documentation

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Implementing Hero Selection Handler in TypeScript
DESCRIPTION: A method that handles hero selection from a fieldset of radio buttons. It iterates through the choices and sets the favoriteHero property based on which radio button is checked.

LANGUAGE: typescript
CODE:
heroChooser(picker: HTMLFieldSetElement) {
    let choices = picker.children;
    this.favoriteHero = undefined;
    for (let i = 0; i < choices.length; i++) {
      let choice = choices[i].children[0] as HTMLInputElement;
      if (choice.checked) { this.favoriteHero = this.heroes[i]; }
    }
  }

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project and stores the output in the 'dist/' directory. The '--prod' flag can be used for production builds.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Advanced Push Notification Configuration with Multiple Actions
DESCRIPTION: Shows a comprehensive notification setup with multiple custom actions and their corresponding operations including opening windows, focusing tabs, and sending requests.

LANGUAGE: typescript
CODE:
{
  "notification": {
    "title": "New Notification!",
    "actions": [
      {"action": "foo", "title": "Open new tab"},
      {"action": "bar", "title": "Focus last"},
      {"action": "baz", "title": "Navigate last"},
      {"action": "qux", "title": "Send request in the background"},
      {"action": "other", "title": "Just notify existing clients"}
    ],
    "data": {
      "onActionClick": {
        "default": {"operation": "openWindow"},
        "foo": {"operation": "openWindow", "url": "/absolute/path"},
        "bar": {"operation": "focusLastFocusedOrOpen", "url": "relative/path"},
        "baz": {"operation": "navigateLastFocusedOrOpen", "url": "https://other.domain.com/"},
        "qux": {"operation": "sendRequest", "url": "https://yet.another.domain.com/"}
      }
    }
  }
}

----------------------------------------

TITLE: VSCode Debug Configuration for Node Tests
DESCRIPTION: JSON configuration for debugging Node.js tests in VSCode when running Bazel tests. Enables remote debugging attachment on port 9229.

LANGUAGE: json
CODE:
{
      "type": "node",
      "request": "attach",
      "name": "Attach to Remote",
      "port": 9229
    }

----------------------------------------

TITLE: Creating Basic Input Field in Angular Template
DESCRIPTION: Demonstrates how to create a basic form input field with proper label and input attributes in Angular template syntax.

LANGUAGE: html
CODE:
<label for="framework">
  Favorite Framework:
  <input id="framework" type="text" />
</label>

----------------------------------------

TITLE: Basic Date Pipe Usage in Angular Template
DESCRIPTION: Demonstrates how to use the date pipe with the 'medium' parameter to format dates in Angular templates.

LANGUAGE: typescript
CODE:
template: `{{ date | date:'medium' }}`

----------------------------------------

TITLE: Setting up Local Development Environment for Angular.dev
DESCRIPTION: Commands to clone the Angular repository, install dependencies, and run the local development server. This process uses yarn as the package manager and may take some time for the initial build.

LANGUAGE: bash
CODE:
# Clone Angular repo
git clone https://github.com/angular/angular.git

# Navigate to project directory
cd angular

# Install dependencies
yarn

# Build and run local dev server
# Note: Initial build will take some time
yarn docs

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Command to access Angular CLI help documentation directly from the command line.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Getting Help with Angular CLI
DESCRIPTION: Provides information on how to get additional help with Angular CLI, either through the CLI itself or by referring to the Angular CLI README.

LANGUAGE: shell
CODE:
ng help

----------------------------------------

TITLE: Importing NgSwitch Directives in Angular Component
DESCRIPTION: Shows how to import NgSwitch, NgSwitchCase, and NgSwitchDefault directives for conditional rendering.

LANGUAGE: TypeScript
CODE:
import { NgSwitch, NgSwitchCase, NgSwitchDefault } from '@angular/common';

----------------------------------------

TITLE: Running WebTreeMap Development Environment
DESCRIPTION: This snippet explains how to set up the development environment for WebTreeMap. It includes commands for running file watchers and generating the demo JS bundle.

LANGUAGE: sh
CODE:
$ npm run dev

----------------------------------------

TITLE: Empty TypeScript Package Documentation
DESCRIPTION: Empty TypeScript code block indicating no @packageDocumentation comment exists for this package. This is an auto-generated file from API Extractor tool.

LANGUAGE: typescript
CODE:
// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Importing NgClass in Angular Component
DESCRIPTION: Shows how to import the NgClass directive into an Angular component for use in templates.

LANGUAGE: TypeScript
CODE:
import { NgClass } from '@angular/common';

----------------------------------------

TITLE: Local Reference Type Check Example
DESCRIPTION: Demonstrates how local template references are handled in type check blocks using document.createElement

LANGUAGE: typescript
CODE:
function tcb(this: SomeCmp): void {
  var _t1 = document.createElement('input');
  '' + _t1.value;
}

----------------------------------------

TITLE: Update Checking Service in Angular
DESCRIPTION: Service implementation for checking updates in an Angular application. Waits for application stability before beginning update checks to ensure proper service worker registration.

LANGUAGE: typescript
CODE:
@Injectable()
export class CheckForUpdateService {
  constructor(appRef: ApplicationRef, updates: SwUpdate) {
    // Allow the app to stabilize first, before starting
    // polling for updates with `interval()`.
    const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable));
    const everySixHours$ = interval(6 * 60 * 60 * 1000);
    const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);

    everySixHoursOnceAppIsStable$.subscribe(async () => {
      try {
        const updateFound = await updates.checkForUpdate();
        console.log(updateFound ? 'A new version is available.' : 'Already on the latest version.');
      } catch (err) {
        console.error('Failed to check for updates:', err);
      }
    });
  }
}

----------------------------------------

TITLE: Demonstrating TypeScript in Angular
DESCRIPTION: This code snippet shows a basic TypeScript code block within an Angular project context. The specific functionality is not clear from the provided code.

LANGUAGE: typescript
CODE:
this is a code block

----------------------------------------

TITLE: Using LowerCase Pipe in Angular Template
DESCRIPTION: Shows how to apply the lowercase pipe to the 'username' property in an Angular component's template.

LANGUAGE: typescript
CODE:
template: `{{username | lowercase }}`

----------------------------------------

TITLE: Building and Packaging Angular DevTools for Chrome
DESCRIPTION: These commands build the Chrome version of Angular DevTools and package it into a zip file for submission to the Chrome Web Store.

LANGUAGE: shell
CODE:
# Build the Chrome version.
yarn devtools:build:chrome

# Package the extension.
(cd dist/bin/devtools/projects/shell-browser/src/prodapp && zip -r ~/devtools-chrome.zip *)

----------------------------------------

TITLE: Defining Angular Platform Browser Dynamic API Types and Exports
DESCRIPTION: Defines core types and exports for the Angular platform-browser-dynamic package including JitCompilerFactory class, platformBrowserDynamic function, and VERSION constant. The JitCompilerFactory implements CompilerFactory and provides runtime compilation capabilities.

LANGUAGE: typescript
CODE:
import { Compiler } from '@angular/core';
import { CompilerFactory } from '@angular/core';
import { CompilerOptions } from '@angular/core';
import * as i0 from '@angular/core';
import { Version } from '@angular/core';

// @public @deprecated (undocumented)
export class JitCompilerFactory implements CompilerFactory {
    // (undocumented)
    createCompiler(options?: CompilerOptions[]): Compiler;
}

// @public (undocumented)
export const platformBrowserDynamic: (extraProviders?: i0.StaticProvider[]) => i0.PlatformRef;

// @public (undocumented)
export const VERSION: Version;

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Angular Issue Response: Outside of Angular
DESCRIPTION: Template response for issues not related to Angular

LANGUAGE: markdown
CODE:
I'm sorry but this issue is not caused by Angular. Please contact the author(s) of project PROJECT_NAME or file issue on their issue tracker.

----------------------------------------

TITLE: Correct Combined Structural Directives with ng-container
DESCRIPTION: Demonstrates the proper way to combine *ngFor and *ngIf using ng-container to nest structural directives.

LANGUAGE: html
CODE:
<ul>
  <ng-container *ngFor="let item of items">
    <li *ngIf="item.isValid">
      {{ item.name }}
    </li>
  </ng-container>
</ul>

----------------------------------------

TITLE: Starting Saucelabs Daemon Service with Bazel
DESCRIPTION: Command to start the Saucelabs daemon process that connects to Saucelabs and provisions browsers for testing. Requires SAUCE_USERNAME, SAUCE_ACCESS_KEY, and SAUCE_TUNNEL_IDENTIFIER environment variables to be set.

LANGUAGE: bash
CODE:
yarn bazel run //tools/saucelabs-daemon/background-service -- <number_of_browsers>

----------------------------------------

TITLE: Running All Saucelabs Tests Script
DESCRIPTION: Command to execute all Saucelabs tests in the project using a provided script.

LANGUAGE: bash
CODE:
./scripts/test/run-saucelabs-tests.sh

----------------------------------------

TITLE: Creating a Fixup Commit for Angular Code Review Updates
DESCRIPTION: This code shows how to create a fixup commit and push changes after addressing code review feedback for an Angular pull request. It commits all changes and pushes to the GitHub repository.

LANGUAGE: shell
CODE:
git commit --all --fixup HEAD
git push

----------------------------------------

TITLE: Defining TestBed Interface in Angular Testing
DESCRIPTION: This snippet defines the TestBed interface, which is a key utility for setting up and configuring the testing module in Angular. It includes methods for compiling components, configuring the testing module, and overriding providers.

LANGUAGE: typescript
CODE:
export interface TestBed {
    compileComponents(): Promise<any>;
    configureCompiler(config: {
        providers?: any[];
        useJit?: boolean;
    }): void;
    configureTestingModule(moduleDef: TestModuleMetadata): TestBed;
    createComponent<T>(component: Type<T>): ComponentFixture<T>;
    execute(tokens: any[], fn: Function, context?: any): any;
    flushEffects(): void;
    get(token: any, notFoundValue?: any): any;
    initTestEnvironment(ngModule: Type<any> | Type<any>[], platform: PlatformRef, options?: TestEnvironmentOptions): void;
    inject<T>(token: ProviderToken<T>, notFoundValue: undefined, options: InjectOptions & {
        optional?: false;
    }): T;
    inject<T>(token: ProviderToken<T>, notFoundValue: null | undefined, options: InjectOptions): T | null;
    inject<T>(token: ProviderToken<T>, notFoundValue?: T, options?: InjectOptions): T;
    get ngModule(): Type<any> | Type<any>[];
    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): TestBed;
    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): TestBed;
    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBed;
    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBed;
    overrideProvider(token: any, provider: {
        useFactory: Function;
        deps: any[];
        multi?: boolean;
    }): TestBed;
    overrideProvider(token: any, provider: {
        useValue: any;
        multi?: boolean;
    }): TestBed;
    overrideProvider(token: any, provider: {
        useFactory?: Function;
        useValue?: any;
        deps?: any[];
        multi?: boolean;
    }): TestBed;
    overrideTemplate(component: Type<any>, template: string): TestBed;
    overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBed;
    get platform(): PlatformRef;
    resetTestEnvironment(): void;
    resetTestingModule(): TestBed;
    runInInjectionContext<T>(fn: () => T): T;
}

----------------------------------------

TITLE: Referencing TemplateTypeChecker in TypeScript
DESCRIPTION: This snippet shows the reference to TemplateTypeChecker, which is used when the compiler is used as a service to generate new ts.Programs in response to various queries.

LANGUAGE: typescript
CODE:
`TemplateTypeChecker`

----------------------------------------

TITLE: Service Worker Driver State Output
DESCRIPTION: Example of the service worker driver state output indicating normal operation.

LANGUAGE: shell
CODE:
Driver state: NORMAL ((nominal))

----------------------------------------

TITLE: Important Angular Callout Component
DESCRIPTION: Implementation of an important-style docs-callout component for highlighting significant information.

LANGUAGE: html
CODE:
<docs-callout important title="Callout title for important">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</docs-callout>

----------------------------------------

TITLE: Checking Form Validation in Angular Template
DESCRIPTION: This snippet illustrates how to use the form's valid property to disable a submit button when the form is invalid in an Angular template.

LANGUAGE: html
CODE:
<button type="submit" [disabled]="!profileForm.valid">Submit</button>

----------------------------------------

TITLE: Running NgOptimizedImage Dev Server
DESCRIPTION: Command to start the development server for testing the NgOptimizedImage directive using ibazel.

LANGUAGE: bash
CODE:
yarn ibazel run packages/core/test/bundling/image-directive:devserver

----------------------------------------

TITLE: Converting Angular Component Selectors to Self-closing Tags
DESCRIPTION: This HTML snippet demonstrates the before and after states of a component selector being converted to a self-closing tag by the migration schematic.

LANGUAGE: html
CODE:
<!-- Before -->
<app-home hello="world"></app-home>

<!-- After -->
<app-home hello="world" />

----------------------------------------

TITLE: Typescript Declarations for Angular Localize Tools
DESCRIPTION: TypeScript type definitions and class declarations for Angular's localization tools. Includes imports from Angular core packages and Babel, along with implementations for translation parsing, serialization, and message handling.

LANGUAGE: typescript
CODE:
import { AbsoluteFsPath } from '@angular/compiler-cli/private/localize';
import { Element as Element_2 } from '@angular/compiler';
import { Logger } from '@angular/compiler-cli/private/localize';
import { MessageId } from '@angular/localize';
import { NodePath } from '@babel/core';
import { ParseError } from '@angular/compiler';
import { PathManipulation } from '@angular/compiler-cli/private/localize';
import { PluginObj } from '@babel/core';
import { ReadonlyFileSystem } from '@angular/compiler-cli/private/localize';
import { types } from '@babel/core';
import { ɵParsedMessage } from '@angular/localize';
import { ɵParsedTranslation } from '@angular/localize';
import { ɵSourceLocation } from '@angular/localize';
import { ɵSourceMessage } from '@angular/localize';

// @public
export class ArbTranslationParser implements TranslationParser<ArbJsonObject> {
    // (undocumented)
    analyze(_filePath: string, contents: string): ParseAnalysis<ArbJsonObject>;
    // (undocumented)
    parse(_filePath: string, contents: string, arb?: ArbJsonObject): ParsedTranslationBundle;
}

// [Additional class and function declarations...]

----------------------------------------

TITLE: Basic Pipe with Ternary - Common Mistake
DESCRIPTION: Demonstrates how Angular parses a ternary expression with a pipe operator, showing that the pipe only applies to the second operand due to operator precedence.

LANGUAGE: typescript
CODE:
condition ? a : b | pipe

----------------------------------------

TITLE: Checking and Updating Angular Public API Goldens with Yarn
DESCRIPTION: These commands are used to check or update the public API goldens for Angular's npm packages. The 'check' command verifies the current state, while the 'update' command refreshes the goldens.

LANGUAGE: bash
CODE:
yarn public-api:check
yarn public-api:update

----------------------------------------

TITLE: Removing App-Scoped Event Listeners in TypeScript
DESCRIPTION: Exports a function to remove all event listeners for a specific app ID. It optionally takes a data container parameter.

LANGUAGE: typescript
CODE:
// @public
export function removeAllAppScopedEventListeners(appId: string, dataContainer?: EarlyJsactionDataContainer): void;

----------------------------------------

TITLE: Creating New Angular Project with SSR
DESCRIPTION: Commands to create a new Angular project with server-side routing enabled or add SSR to an existing project.

LANGUAGE: shell
CODE:
ng new --ssr --server-routing

LANGUAGE: shell
CODE:
ng add @angular/ssr --server-routing

----------------------------------------

TITLE: Dynamic Dependency Tracking in TypeScript
DESCRIPTION: Illustrates how Angular Signals handles dynamic dependencies in computed signals, where the set of dependencies can change between executions.

LANGUAGE: typescript
CODE:
const dynamic = computed(() => useA() ? dataA() : dataB());

----------------------------------------

TITLE: Checking Angular Service Worker Availability in JavaScript
DESCRIPTION: This code snippet demonstrates how to check if the Angular service worker is enabled before interacting with it. It's important to perform this check to avoid errors in browsers that don't support service workers.

LANGUAGE: javascript
CODE:
if (SwUpdate.isEnabled) {
  SwUpdate.checkForUpdate()
    .then(() => {
      // Handle update check
    })
    .catch(err => {
      // Handle error
    });
}

----------------------------------------

TITLE: Default Angular Callout Component
DESCRIPTION: Basic implementation of the docs-callout component with a default style and title. Includes a span element with an ID for default marking.

LANGUAGE: html
CODE:
<docs-callout title="Default callout title" id="test">
  <span id="default-marker"></span>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</docs-callout>

----------------------------------------

TITLE: Configuring Mock Data in db.json
DESCRIPTION: JSON configuration file containing mock housing location data for the JSON server

LANGUAGE: json
CODE:
{
    "locations": [
        {
            "id": 0,
            "name": "Acme Fresh Start Housing",
            "city": "Chicago",
            "state": "IL",
            "photo": "https://angular.dev/assets/images/tutorials/common/bernard-hermant-CLKGGwIBTaY-unsplash.jpg",
            "availableUnits": 4,
            "wifi": true,
            "laundry": true
        },
        ...

----------------------------------------

TITLE: Preparing Zone.js Release
DESCRIPTION: Commands for preparing a new zone.js release, including version updating and changelog generation

LANGUAGE: bash
CODE:
rm -rf node_modules && yarn install
export PREVIOUS_ZONE_TAG=`git tag -l 'zone.js-0.15.*' | tail -n1`
export VERSION=`(cd packages/zone.js; npm version patch --no-git-tag-version)`
export VERSION=${VERSION#v}
export TAG="zone.js-${VERSION}"
echo "Releasing zone.js version ${TAG}. Last release was ${PREVIOUS_ZONE_TAG}."
yarn gulp changelog:zonejs

----------------------------------------

TITLE: Defining Runtime Error Codes Enum in TypeScript
DESCRIPTION: Comprehensive enumeration of all possible runtime error codes in Angular, including application, component, dependency injection, and various other runtime-related error codes.

LANGUAGE: typescript
CODE:
export const enum RuntimeErrorCode {
    APPLICATION_REF_ALREADY_DESTROYED = 406,
    ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT = -602,
    ASYNC_INITIALIZERS_STILL_RUNNING = 405,
    BOOTSTRAP_COMPONENTS_NOT_FOUND = -403,
    COMPONENT_ID_COLLISION = -912,
    CYCLIC_DI_DEPENDENCY = -200,
    DEFER_LOADING_FAILED = -750,
    DUPLICATE_DIRECTIVE = 309,
    EXPORT_NOT_FOUND = -301,
    EXPRESSION_CHANGED_AFTER_CHECKED = -100,
    HOST_DIRECTIVE_COMPONENT = 310,
    HOST_DIRECTIVE_CONFLICTING_ALIAS = 312,
    HOST_DIRECTIVE_NOT_STANDALONE = 308,
    HOST_DIRECTIVE_UNDEFINED_BINDING = 311,
    HOST_DIRECTIVE_UNRESOLVABLE = 307,
    HYDRATION_MISSING_NODE = -502,
    HYDRATION_MISSING_SIBLINGS = -501,
    HYDRATION_NODE_MISMATCH = -500,
    HYDRATION_STABLE_TIMEDOUT = -506,
    IMAGE_PERFORMANCE_WARNING = -913,
    IMPORT_PROVIDERS_FROM_STANDALONE = 800,
    INFINITE_CHANGE_DETECTION = 103,
    INJECTOR_ALREADY_DESTROYED = 205,
    INVALID_BINDING_TARGET = 316,
    INVALID_DIFFER_INPUT = 900,
    INVALID_EVENT_BINDING = 306,
    INVALID_FACTORY_DEPENDENCY = 202,
    INVALID_I18N_STRUCTURE = 700,
    INVALID_INHERITANCE = 903,
    INVALID_INJECTION_TOKEN = 204,
    INVALID_MULTI_PROVIDER = -209,
    INVALID_SET_INPUT_CALL = 317,
    INVALID_SKIP_HYDRATION_HOST = -504,
    LOOP_TRACK_DUPLICATE_KEYS = -955,
    LOOP_TRACK_RECREATE = -956,
    MISCONFIGURED_INCREMENTAL_HYDRATION = 508,
    MISSING_DIRECTIVE_DEFINITION = 916,
    MISSING_DOCUMENT = 210,
    MISSING_GENERATED_DEF = 906,
    MISSING_HYDRATION_ANNOTATIONS = -505,
    MISSING_INJECTION_CONTEXT = -203,
    MISSING_INJECTION_TOKEN = 208,
    MISSING_LOCALE_DATA = 701,
    MISSING_NG_MODULE_DEFINITION = 915,
    MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP = 402,
    MISSING_SSR_CONTENT_INTEGRITY_MARKER = -507,
    MISSING_ZONEJS = 908,
    MULTIPLE_COMPONENTS_MATCH = -300,
    MULTIPLE_MATCHING_PIPES = 313,
    MULTIPLE_PLATFORMS = 400,
    NO_BINDING_TARGET = 315,
    NO_SUPPORTING_DIFFER_FACTORY = 901,
    OUTPUT_REF_DESTROYED = 953,
    PIPE_NOT_FOUND = -302,
    PLATFORM_ALREADY_DESTROYED = 404,
    PLATFORM_NOT_FOUND = 401,
    PROVIDED_BOTH_ZONE_AND_ZONELESS = 408,
    PROVIDER_IN_WRONG_CONTEXT = 207,
    PROVIDER_NOT_FOUND = -201,
    RECURSIVE_APPLICATION_REF_TICK = 101,
    RENDERER_NOT_FOUND = 407,
    REQUIRE_SYNC_WITHOUT_SYNC_EMIT = 601,
    REQUIRED_INPUT_NO_VALUE = -950,
    REQUIRED_MODEL_NO_VALUE = 952,
    REQUIRED_QUERY_NO_VALUE = -951,
    RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 980,
    RUNTIME_DEPS_ORPHAN_COMPONENT = 981,
    SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT = 600,
    TEMPLATE_STRUCTURE_ERROR = 305,
    TYPE_IS_NOT_STANDALONE = 907,
    UNEXPECTED_ZONE_STATE = 909,
    UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE = 914,
    UNINITIALIZED_LET_ACCESS = 314,
    UNKNOWN_BINDING = 303,
    UNKNOWN_ELEMENT = 304,
    UNSAFE_IFRAME_ATTRS = -910,
    UNSAFE_VALUE_IN_RESOURCE_URL = 904,
    UNSAFE_VALUE_IN_SCRIPT = 905,
    UNSUPPORTED_PROJECTION_DOM_NODES = -503,
    VIEW_ALREADY_ATTACHED = 902,
    VIEW_ALREADY_DESTROYED = 911
}

----------------------------------------

TITLE: Defining Basic Angular Inputs with input()
DESCRIPTION: Demonstrates how to define basic Angular inputs using the new input() syntax, including required and optional inputs.

LANGUAGE: TypeScript
CODE:
import { input } from '@angular/core';

class MyComponent {
  readonly simpleInput = input<string>('');
  readonly requiredInput = input.required<number>();
  readonly optionalInput = input<boolean | undefined>(false);
}

----------------------------------------

TITLE: Running Saucelabs Tests with Custom Browser Count
DESCRIPTION: Command to run Saucelabs tests with a specified number of parallel browsers.

LANGUAGE: bash
CODE:
./scripts/test/run-saucelabs-tests.sh 5

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Provides access to Angular CLI help documentation. This command is useful for getting additional information about Angular CLI usage and commands.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Using useClass Provider for Alternative Implementation in Angular
DESCRIPTION: Shows how to use the useClass provider to substitute an alternative implementation for a common class in Angular dependency injection.

LANGUAGE: typescript
CODE:
[{ provide: Logger, useClass: BetterLogger }]

LANGUAGE: typescript
CODE:
[
  UserService, // dependency needed in `EvenBetterLogger`.
  { provide: Logger, useClass: EvenBetterLogger },
]

----------------------------------------

TITLE: Profiling Sort Algorithms with Zone.js in Angular
DESCRIPTION: This snippet illustrates how to use Zone.js for profiling sort algorithms. It provides a link to a StackBlitz demo for practical implementation and testing.

LANGUAGE: javascript
CODE:
use `zone.js` to profiling sort algorithm.

----------------------------------------

TITLE: Defining AsyncPipe Class in TypeScript
DESCRIPTION: Implements a pipe that subscribes to an Observable or Promise and returns the latest value it has emitted.

LANGUAGE: TypeScript
CODE:
export class AsyncPipe implements OnDestroy, PipeTransform {
    constructor(ref: ChangeDetectorRef);
    ngOnDestroy(): void;
    transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T>): T | null;
    transform<T>(obj: null | undefined): null;
    transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T> | null | undefined): T | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AsyncPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<AsyncPipe, "async", true>;
}

----------------------------------------

TITLE: Implementing Benchmark Driver with Webdriver
DESCRIPTION: Creates a benchmark driver using Webdriver to interact with the application under test, setting up the test environment and executing the benchmark.

LANGUAGE: javascript
CODE:
// A runner contains the shared configuration
// and can be shared across multiple tests.
var runner = new Runner(...);

driver.get('http://myserver/index.html');

var resetBtn = driver.findElement(By.id('reset'));
var fillBtn = driver.findElement(By.id('fill'));

runner.sample({
  id: 'fillElement',
  // Prepare is optional...
  prepare: () {
    resetBtn.click();
  },
  execute: () {
    fillBtn.click();
    // Note: if fillBtn would use some asynchronous code,
    // we would need to wait here for its end.
  }
});

----------------------------------------

TITLE: Mermaid Flow Chart Example
DESCRIPTION: Simple directed graph showing relationships between nodes using Mermaid syntax.

LANGUAGE: mermaid
CODE:
graph TD;
      A-->B;
      A-->C;
      B-->D;
      C-->D;

----------------------------------------

TITLE: Importing Routing Configuration in Angular main.ts
DESCRIPTION: These import statements add the necessary routing modules and functions to the main.ts file of an Angular application.

LANGUAGE: typescript
CODE:
import { routes } from './app/routes';
import { provideRouter } from '@angular/router';

----------------------------------------

TITLE: Creating Routes File in TypeScript
DESCRIPTION: This snippet shows how to create an app.routes.ts file and define a routes constant of type Routes.

LANGUAGE: typescript
CODE:
import {Routes} from '@angular/router';

export const routes: Routes = [];

----------------------------------------

TITLE: Type-Only to Value Import Example
DESCRIPTION: Example showing how a type-only import gets transformed into a value import during compilation, demonstrating why special handling is needed for default imports.

LANGUAGE: typescript
CODE:
import Foo from 'foo';

@Injectable()
export class Svc {
  constructor(private foo: Foo) {}
}

----------------------------------------

TITLE: Building Angular DevTools for Chrome Configuration
DESCRIPTION: Command to build Angular DevTools with Chrome configuration, generating build files in the dist directory

LANGUAGE: bash
CODE:
yarn devtools:build:chrome

----------------------------------------

TITLE: Angular PR Response: Rebase and Squash
DESCRIPTION: Template response for pull requests that need to be rebased and squashed

LANGUAGE: markdown
CODE:
Please rebase and squash your commits. To do this, make sure to `git fetch upstream` to get the latest changes from the angular repository. Then in your branch run `git rebase upstream/main -i` to do an interactive rebase. This should allow you to fixup or drop any unnecessary commits. After you finish the rebase, force push using `git push [origin name] [branch name] --force`.

----------------------------------------

TITLE: Configuring Prerender Options in Angular
DESCRIPTION: JSON configuration for Angular application builder showing how to disable automatic route discovery for prerendering.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "prerender": {
              "discoverRoutes": false
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Unpatched Events in Zone.js
DESCRIPTION: HTML setup demonstrating how to configure Zone.js to ignore specific events and properties using __Zone_ignore_on_properties and __zone_symbol__UNPATCHED_EVENTS arrays.

LANGUAGE: html
CODE:
<head>
  <script>
    const targets = [
      window,
      Document.prototype,
      HTMLBodyElement.prototype,
      HTMLElement.prototype,
    ];

    __Zone_ignore_on_properties = [];

    targets.forEach((target) => {
      __Zone_ignore_on_properties.push({
        target: target,
        ignoreProperties: ['scroll'],
      });
    });

    __zone_symbol__UNPATCHED_EVENTS = ['scroll'];
  </script>
</head>

----------------------------------------

TITLE: Angular Animations API Definitions in TypeScript
DESCRIPTION: Comprehensive TypeScript definitions for Angular's animation system including core animation interfaces, metadata types, and utility functions. Contains class definitions, interfaces, and function signatures for creating and managing animations in Angular applications.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';

export function animate(timings: string | number, styles?: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata | null): AnimationAnimateMetadata;

export function animateChild(options?: AnimateChildOptions | null): AnimationAnimateChildMetadata;

export interface AnimateChildOptions extends AnimationOptions {
    duration?: number | string;
}

export type AnimateTimings = {
    duration: number;
    delay: number;
    easing: string | null;
};

export function animation(steps: AnimationMetadata | AnimationMetadata[], options?: AnimationOptions | null): AnimationReferenceMetadata;

// ... [Additional type definitions and interfaces]

export function trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata;

export function useAnimation(animation: AnimationReferenceMetadata, options?: AnimationOptions | null): AnimationAnimateRefMetadata;

----------------------------------------

TITLE: Interacting with Child Elements Using Harness Loader
DESCRIPTION: Examples of getting loaders for child elements using getChildLoader and getAllChildLoaders methods.

LANGUAGE: typescript
CODE:
const myComponentHarness = await loader.getHarness(MyComponent);

// Get loader for first instance of child element with '.child' selector
const childLoader = await myComponentHarness.getLoader('.child');

// Get loaders for all instances of child elements with '.child' selector
const allChildLoaders = await myComponentHarness.getAllChildLoaders('.child');

----------------------------------------

TITLE: TypeScript Source File Interface Reference
DESCRIPTION: Demonstrates the core TypeScript interfaces and properties used in the shim system, particularly the referencedFiles property of ts.SourceFile that's used for shim file inclusion.

LANGUAGE: typescript
CODE:
ts.SourceFile {
  referencedFiles: Array<FileReference>;
  // Other properties...
}

----------------------------------------

TITLE: Defining Angular Debug API Types and Functions in TypeScript
DESCRIPTION: Defines a comprehensive set of TypeScript interfaces and functions for Angular's debugging API, including component metadata inspection, DOM element querying, and event listener access. These definitions enable type-safe access to Angular's internal structures and debugging utilities.

LANGUAGE: typescript
CODE:
// @public
export function applyChanges(component: {}): void;

// @public
export interface ComponentDebugMetadata extends DirectiveDebugMetadata {
    // (undocumented)
    changeDetection: ChangeDetectionStrategy;
    // (undocumented)
    encapsulation: ViewEncapsulation;
}

// @public
export interface DirectiveDebugMetadata {
    // (undocumented)
    inputs: Record<string, string>;
    // (undocumented)
    outputs: Record<string, string>;
}

// @public
export function getComponent<T>(element: Element): T | null;

// @public
export function getContext<T extends {}>(element: Element): T | null;

// @public
export function getDirectiveMetadata(directiveOrComponentInstance: any): ComponentDebugMetadata | DirectiveDebugMetadata | null;

// @public
export function getDirectives(node: Node): {}[];

// @public
export function getHostElement(componentOrDirective: {}): Element;

// @public
export function getInjector(elementOrDir: Element | {}): Injector;

// @public
export function getListeners(element: Element): Listener[];

// @public
export function getOwningComponent<T>(elementOrDir: Element | {}): T | null;

// @public
export function getRootComponents(elementOrDir: Element | {}): {}[];

// @public
export interface Listener {
    callback: (value: any) => any;
    element: Element;
    name: string;
    type: 'dom' | 'output';
    useCapture: boolean;
}

----------------------------------------

TITLE: Setting Sublime Text TypeScript SDK Path
DESCRIPTION: Sublime Text user preferences configuration for TypeScript SDK path

LANGUAGE: json
CODE:
"typescript-tsdk": "<path to your folder>/node_modules/typescript/lib"

----------------------------------------

TITLE: Checking Node.js Version for Angular Compatibility
DESCRIPTION: This command checks the installed version of Node.js to ensure it meets Angular's requirements. Angular requires an active LTS or maintenance LTS version of Node.

LANGUAGE: bash
CODE:
node --version

----------------------------------------

TITLE: Starting JSON Server
DESCRIPTION: Command to start JSON server and watch db.json file for changes

LANGUAGE: bash
CODE:
json-server --watch db.json

----------------------------------------

TITLE: Handling Complex Types with input()
DESCRIPTION: Shows how to handle complex types and object expansions when using the new input() syntax.

LANGUAGE: TypeScript
CODE:
import { input } from '@angular/core';

interface Config {
  bla?: string;
}

class ComplexTypeExample {
  readonly config = input<Config>({});

  expansion() {
    const { config: configInput } = this;
    const config = configInput();
    config.bla?.charAt(0);
  }
}

----------------------------------------

TITLE: Defining RuntimeErrorCode Enum in TypeScript for Angular
DESCRIPTION: This code snippet defines a public enum 'RuntimeErrorCode' containing various error codes used in Angular runtime. The enum includes codes for animation failures, invalid CSS values, keyframe issues, and other runtime errors.

LANGUAGE: typescript
CODE:
// @public
export const enum RuntimeErrorCode {
    // (undocumented)
    ANIMATION_FAILED = 3502,
    // (undocumented)
    BROWSER_ANIMATION_BUILDER_INJECTED_WITHOUT_ANIMATIONS = 3600,
    // (undocumented)
    BUILDING_FAILED = 3501,
    // (undocumented)
    CREATE_ANIMATION_FAILED = 3504,
    // (undocumented)
    INVALID_CSS_UNIT_VALUE = 3005,
    // (undocumented)
    INVALID_DEFINITION = 3007,
    // (undocumented)
    INVALID_EXPRESSION = 3015,
    // (undocumented)
    INVALID_KEYFRAMES = 3011,
    // (undocumented)
    INVALID_NODE_TYPE = 3004,
    // (undocumented)
    INVALID_OFFSET = 3012,
    // (undocumented)
    INVALID_PARALLEL_ANIMATION = 3010,
    // (undocumented)
    INVALID_PARAM_VALUE = 3003,
    // (undocumented)
    INVALID_PROPERTY = 3009,
    // (undocumented)
    INVALID_QUERY = 3014,
    // (undocumented)
    INVALID_STAGGER = 3013,
    // (undocumented)
    INVALID_STATE = 3008,
    // (undocumented)
    INVALID_STYLE_PARAMS = 3001,
    // (undocumented)
    INVALID_STYLE_VALUE = 3002,
    // (undocumented)
    INVALID_TIMING_VALUE = 3000,
    // (undocumented)
    INVALID_TRANSITION_ALIAS = 3016,
    // (undocumented)
    INVALID_TRIGGER = 3006,
    // (undocumented)
    KEYFRAME_OFFSETS_OUT_OF_ORDER = 3200,
    // (undocumented)
    KEYFRAMES_MISSING_OFFSETS = 3202,
    // (undocumented)
    MISSING_EVENT = 3303,
    // (undocumented)
    MISSING_OR_DESTROYED_ANIMATION = 3300,
    // (undocumented)
    MISSING_PLAYER = 3301,
    // (undocumented)
    MISSING_TRIGGER = 3302,
    // (undocumented)
    NEGATIVE_DELAY_VALUE = 3101,
    // (undocumented)
    NEGATIVE_STEP_VALUE = 3100,
    // (undocumented)
    REGISTRATION_FAILED = 3503,
    // (undocumented)
    TRANSITION_FAILED = 3505,
    // (undocumented)
    TRIGGER_BUILD_FAILED = 3404,
    // (undocumented)
    TRIGGER_PARSING_FAILED = 3403,
    // (undocumented)
    TRIGGER_TRANSITIONS_FAILED = 3402,
    // (undocumented)
    UNREGISTERED_TRIGGER = 3401,
    // (undocumented)
    UNSUPPORTED_TRIGGER_EVENT = 3400,
    // (undocumented)
    VALIDATION_FAILED = 3500
}

----------------------------------------

TITLE: Querying with Non-Tree-Shakable Enums in TypeScript
DESCRIPTION: This snippet demonstrates a query function that uses non-tree-shakable enums, which can lead to inefficient code bundling. It shows how the use of QueryReadType enum can cause unnecessary inclusion of ElementRef, ContainerRef, and TemplateRef.

LANGUAGE: typescript
CODE:
export function query<T>(
    predicate: Type<any>| string[], descend?: boolean,
    read?: QueryReadType | Type<T>): QueryList<T> {
  ngDevMode && assertPreviousIsParent();
  const queryList = new QueryList<T>();
  const query = currentQuery || (currentQuery = new LQuery_());
  query.track(queryList, predicate, descend, read);
  return queryList;
}

----------------------------------------

TITLE: NgTemplateOutlet with ng-container
DESCRIPTION: Shows how to use ng-container with NgTemplateOutlet to reuse template content with different contexts.

LANGUAGE: html
CODE:
<!-- … -->

<ng-container *ngTemplateOutlet="tmpl; context: {$implicit: 'Hello'}"></ng-container>

<!-- … -->

<ng-container *ngTemplateOutlet="tmpl; context: {$implicit: 'World'}"></ng-container>

<!-- … -->

<ng-template #tmpl let-text>
  <h1>{{ text }}</h1>
</ng-template>

----------------------------------------

TITLE: Compiling TypeScript and Running WebTreeMap CLI
DESCRIPTION: This snippet demonstrates how to compile TypeScript files and run the WebTreeMap command-line interface for analyzing node_modules usage.

LANGUAGE: sh
CODE:
$ tsc -w

LANGUAGE: sh
CODE:
$ du -ab node_modules/ | node build/cli.js --title 'node_modules usage' -o demo.html

----------------------------------------

TITLE: HTML Element Type Mapping
DESCRIPTION: TypeScript interface augmentation for custom element type definitions

LANGUAGE: typescript
CODE:
declare global {
  interface HTMLElementTagNameMap {
    'my-dialog': NgElement & WithProperties<{content: string}>;
    'my-other-element': NgElement & WithProperties<{foo: 'bar'}>;
    …
  }
}

----------------------------------------

TITLE: Component Definition in TypeScript
DESCRIPTION: Example of a basic Angular component definition showing the transformation from TypeScript decorator syntax to compiled JavaScript output and metadata.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-comp',
  template: `<h1>Hello, {{name}}!</h1>`
})
export class MyComponent {
  @Input() name: string;
}

LANGUAGE: javascript
CODE:
export class MyComponent {
  name: string;
  static ɵcmp = ɵɵdefineComponent({...});
}

----------------------------------------

TITLE: Applying Apache License Boilerplate Notice
DESCRIPTION: Standard license notice template to be included in project files when applying the Apache License 2.0. Fields in brackets should be replaced with actual project information.

LANGUAGE: text
CODE:
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------

TITLE: Basic TypeScript Code Example
DESCRIPTION: Simple TypeScript code example showing a basic Angular component structure.

LANGUAGE: typescript
CODE:
example code

----------------------------------------

TITLE: Configuring Route File for Prerendering
DESCRIPTION: JSON configuration showing how to specify a routes file for prerendering parameterized routes in Angular.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "prerender": {
              "routesFile": "routes.txt"
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Defer Block in Angular Template
DESCRIPTION: Demonstrates how to wrap a component in a @defer block to enable lazy loading. The article-comments component will only load when the browser is idle, improving initial page load performance.

LANGUAGE: angular-html
CODE:
@defer {
  <article-comments />
}

----------------------------------------

TITLE: Defining Dynamic Route in Angular
DESCRIPTION: Defines a dynamic route in Angular using a route parameter for the housing location id.

LANGUAGE: javascript
CODE:
'details/:id'

----------------------------------------

TITLE: Incorrect Root Element Usage
DESCRIPTION: Example showing incorrect usage where the DOM element doesn't match the component's selector.

LANGUAGE: angular-html
CODE:
<html>
    <app-root></app-root> <!-- Doesn't match the selector -->
</html>

----------------------------------------

TITLE: Implementing afterNextRender with Phases in Angular TypeScript
DESCRIPTION: Demonstrates how to use afterNextRender with write and read phases to optimize DOM operations and minimize layout thrashing.

LANGUAGE: typescript
CODE:
import {Component, ElementRef, afterNextRender} from '@angular/core';

@Component({...})
export class UserProfile {
  private prevPadding = 0;
  private elementHeight = 0;

  constructor(elementRef: ElementRef) {
    const nativeElement = elementRef.nativeElement;

    afterNextRender({
      // Use the `Write` phase to write to a geometric property.
      write: () => {
        const padding = computePadding();
        const changed = padding !== this.prevPadding;
        if (changed) {
          nativeElement.style.padding = padding;
        }
        return changed; // Communicate whether anything changed to the read phase.
      },

      // Use the `Read` phase to read geometric properties after all writes have occurred.
      read: (didWrite) => {
        if (didWrite) {
          this.elementHeight = nativeElement.getBoundingClientRect().height;
        }
      }
    });
  }
}

----------------------------------------

TITLE: Installing Angular CDK using CLI
DESCRIPTION: Command to install the Angular Component Dev Kit (CDK) using the Angular CLI

LANGUAGE: shell
CODE:
ng add @angular/cdk

----------------------------------------

TITLE: Using docs-pill Component for Navigation in Angular Documentation
DESCRIPTION: This snippet demonstrates three different ways to use the docs-pill component for navigation in Angular documentation. It includes examples for linking to a section on the same page, an external website, and another page within the documentation.

LANGUAGE: html
CODE:
<docs-pill href="#pill-row" title="Same Page"/>
<docs-pill href="http://angular.dev" title="External Page"/>
<docs-pill href="./this-other-page" title="Another Page"/>

----------------------------------------

TITLE: Advanced Component Harness with Filtering
DESCRIPTION: Implementation of component harness with filtering capabilities using HarnessPredicate

LANGUAGE: typescript
CODE:
interface MyMenuHarnessFilters extends BaseHarnessFilters {
  triggerText?: string | RegExp;
}

class MyMenuHarness extends ComponentHarness {
  static hostSelector = 'my-menu';

  static with(options: MyMenuHarnessFilters): HarnessPredicate<MyMenuHarness> {
    return new HarnessPredicate(MyMenuHarness, options)
        .addOption('trigger text', options.triggerText,
            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));
  }

  protected getPopupHarness = this.locatorFor(MyPopupHarness);

  async getTriggerText(): Promise<string> {
    const popupHarness = await this.getPopupHarness();
    return popupHarness.getTriggerText();
  }
}

----------------------------------------

TITLE: Code Diff Comparison
DESCRIPTION: Demonstrates a code difference comparison between new and old versions of a TypeScript file.

LANGUAGE: typescript
CODE:
// Diff comparison between new-code.ts and old-code.ts

----------------------------------------

TITLE: Rendering Markdown Table of Angular CLI Commands
DESCRIPTION: This markdown snippet creates a table listing Angular CLI commands, their aliases, and descriptions. It provides a concise overview of available CLI commands for Angular developers.

LANGUAGE: markdown
CODE:
# CLI Reference

| Command                           | Alias  | Description                                                       |
|:---                               |:---    |:---                                                               |
| [`add`](cli/add)                  |        | Adds support for an external library to your project.             |
| [`analytics`](cli/analytics)      |        | Configures the gathering of Angular CLI usage metrics.            |
| [`build`](cli/build)              | `b`      | Compiles an Angular application or library into an output directory named dist/ at the given output path. |
| [`cache`](cli/cache)              |        | Configure persistent disk cache and retrieve cache statistics.    |
| [`completion`](cli/completion)    |        | Set up Angular CLI autocompletion for your terminal.              |
| [`config`](cli/config)            |        | Retrieves or sets Angular configuration values in the angular.json file for the workspace. |
| [`deploy`](cli/deploy)            |        | Invokes the deploy builder for a specified project or for the default project in the workspace. |
| [`e2e`](cli/e2e)                  | `e`      | Builds and serves an Angular application, then runs end-to-end tests. |
| [`extract-i18n`](cli/extract-i18n)|        | Extracts i18n messages from source code.                          |
| [`generate`](cli/generate)        | `g`      | Generates and/or modifies files based on a schematic.             |
| [`lint`](cli/lint)                |        | Runs linting tools on Angular application code in a given project folder. |
| [`new`](cli/new)                  | `n`      | Creates a new Angular workspace. |
| [`run`](cli/run)                  |        | Runs an Architect target with an optional custom builder configuration defined in your project. |
| [`serve`](cli/serve)              | `s`, `dev`      | Builds and serves your application, rebuilding on file changes. |
| [`test`](cli/test)                | `t`      | Runs unit tests in a project. |
| [`update`](cli/update)            |        | Updates your workspace and its dependencies. See https://angular.dev/update-guide/.             |
| [`version`](cli/version)          | `v`      | Outputs Angular CLI version. |

----------------------------------------

TITLE: Defining HTTP Context Tokens in Angular
DESCRIPTION: Creation of an HttpContextToken for controlling caching behavior in requests.

LANGUAGE: typescript
CODE:
export const CACHING_ENABLED = new HttpContextToken<boolean>(() => true);

----------------------------------------

TITLE: Angular Signal Queries Migration with TODO Comment
DESCRIPTION: Example of a skipped migration with a TODO comment explaining the reason, generated when using the --insert-todos option.

LANGUAGE: typescript
CODE:
// TODO: Skipped for migration because:
//  Your application code writes to the query. This prevents migration.
@ViewChild('ref') ref?: ElementRef;

----------------------------------------

TITLE: Implementing NgFor in HomeComponent Template
DESCRIPTION: Updates the template to use ngFor directive to iterate over the housingLocationList array and display each housing location using the app-housing-location component.

LANGUAGE: html
CODE:
<app-housing-location *ngFor="let housingLocation of housingLocationList" [housingLocation]="housingLocation"></app-housing-location>

----------------------------------------

TITLE: Basic Popup Component Implementation
DESCRIPTION: Example of a simple popup component with toggle functionality and content projection

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-popup',
  template: `
    <button (click)="toggle()">{{triggerText()}}</button>
    @if (isOpen()) {
      <div class="my-popup-content"><ng-content></ng-content></div>
    }
  `
})
class MyPopup {
  triggerText = input('');

  isOpen = signal(false);

  toggle() {
    this.isOpen.update((value) => !value);
  }
}

----------------------------------------

TITLE: Defining Child Component in Angular TypeScript
DESCRIPTION: This code snippet shows the definition of a ChildComponent in Angular. It illustrates how the child component might reference the parent, contributing to a cyclic import problem.

LANGUAGE: typescript
CODE:
// child.component.ts

----------------------------------------

TITLE: Implementing Template Guards for Custom Directives in Angular TypeScript
DESCRIPTION: Examples of implementing template guards to improve type checking for custom directives, including input guards and context guards.

LANGUAGE: typescript
CODE:
// Input guard example
@Directive(...)
class ActorIsUser {
  @Input() actor: User|Robot;

  static ngTemplateGuard_actor(dir: ActorIsUser, expr: User|Robot): expr is User {
    return true;
  }
}

// Context guard example
export interface SelectTemplateContext<T> {
  $implicit: T;
}

@Directive(...)
export class SelectDirective<T> {
  @Input({required: true}) selectFrom!: DataSource<T>;

  static ngTemplateContextGuard<T>(dir: SelectDirective<T>, ctx: any): ctx is SelectTemplateContext<T> {
    return true;
  }
}

----------------------------------------

TITLE: Using Contextual Variables in Angular @for Blocks
DESCRIPTION: Illustrates how to use and alias implicit variables available in @for blocks, such as $index, $even, etc.

LANGUAGE: angular-html
CODE:
@for (item of items; track item.id; let idx = $index, e = $even) {
  <p>Item #{{ idx }}: {{ item.name }}</p>
}

----------------------------------------

TITLE: TestModuleMetadata Type Definition
DESCRIPTION: Defines the structure of the module metadata used in TestBed configuration, including providers, declarations, imports, and schemas.

LANGUAGE: javascript
CODE:
type TestModuleMetadata = {
  providers?: any[];
  declarations?: any[];
  imports?: any[];
  schemas?: Array<SchemaMetadata | any[]>;
};

----------------------------------------

TITLE: Extended TypeScript Configuration for Angular
DESCRIPTION: Demonstrates how to use the extends property in a TypeScript configuration file to inherit and override compiler settings for an Angular application.

LANGUAGE: json
CODE:
{
  "extends": "./tsconfig.json",
  "compilerOptions": { },
  "angularCompilerOptions": { }
}

----------------------------------------

TITLE: Configuring TSConfig to Suppress Unused Standalone Imports Diagnostic
DESCRIPTION: This JSON configuration in tsconfig.json demonstrates how to disable the 'unusedStandaloneImports' diagnostic in Angular compiler options if the unused imports cannot be avoided.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "unusedStandaloneImports": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Generating Angular Component using CLI
DESCRIPTION: Command to generate a new HomeComponent using Angular CLI

LANGUAGE: shell
CODE:
ng generate component home

----------------------------------------

TITLE: Invalid Attribute Binding with Suffix in Angular Template
DESCRIPTION: Example showing incorrect usage of the .px suffix in an attribute binding, which is not supported.

LANGUAGE: html
CODE:
<img [attr.width.px]="5">

----------------------------------------

TITLE: Converting toSignal Usage in Computed Context
DESCRIPTION: Shows how to refactor problematic toSignal usage inside a computed expression by moving the signal creation outside the reactive context.

LANGUAGE: typescript
CODE:
result = computed(() => {
  const dataSignal = toSignal(dataObservable$);
  return doSomething(dataSignal());
});

LANGUAGE: typescript
CODE:
dataSignal = toSignal(dataObservable$);
result = computed(() => doSomething(dataSignal()));

----------------------------------------

TITLE: Parallel Harness Operations
DESCRIPTION: Example of using the parallel function to perform multiple harness operations simultaneously and optimize change detection checks.

LANGUAGE: typescript
CODE:
it('reads properties in parallel', async () => {
  const checkboxHarness = loader.getHarness(MyCheckboxHarness);
  // Read the checked and intermediate properties simultaneously.
  const [checked, indeterminate] = await parallel(() => [
    checkboxHarness.isChecked(),
    checkboxHarness.isIndeterminate()
  ]);
  expect(checked).toBe(false);
  expect(indeterminate).toBe(true);
});

----------------------------------------

TITLE: Testing TitleCasePipe with Jasmine in TypeScript
DESCRIPTION: This code snippet demonstrates how to test the TitleCasePipe using Jasmine. It includes various test cases to ensure the pipe correctly capitalizes words and handles edge cases.

LANGUAGE: typescript
CODE:
describe('TitleCasePipe', () => {
  // This pipe is a pure function so we don't need to call lifecycle hooks
  const pipe = new TitleCasePipe();

  it('transforms "abc" to "Abc"', () => {
    expect(pipe.transform('abc')).toBe('Abc');
  });

  it('transforms "abc def" to "Abc Def"', () => {
    expect(pipe.transform('abc def')).toBe('Abc Def');
  });

  // ... more test cases ...

  it('leaves "ABC DEF" alone', () => {
    expect(pipe.transform('ABC DEF')).toBe('Abc Def');
  });
});

----------------------------------------

TITLE: Implementing NgModules Card Component in Angular HTML
DESCRIPTION: HTML markup for displaying a documentation card component that explains the NgModules concept in Angular. Uses custom documentation components with title and link attributes.

LANGUAGE: html
CODE:
<docs-card-container>
  <docs-card title="NgModules" link="Learn more" href="guide/ngmodules">
    NgModules is a concept that commonly used in architecture v16 and earlier to help configure the injector and the compiler and help organize related things together.
  </docs-card>
</docs-card-container>

----------------------------------------

TITLE: Visualizing Cyclic Import in Angular
DESCRIPTION: This code snippet illustrates the cyclic import problem in Angular using a text-based diagram. It shows how imports between parent and child components can create a circular dependency.

LANGUAGE: text
CODE:
parent.component.ts -> child.component.ts -> parent.component.ts

----------------------------------------

TITLE: Adding Source Map Checks in Angular Compiler Compliance Tests
DESCRIPTION: This snippet demonstrates how to add source map checks in expectation files for Angular compiler compliance tests. It shows the format for specifying source mappings.

LANGUAGE: javascript
CODE:
<generated code> // SOURCE: "<source-url>" "<source code>"

----------------------------------------

TITLE: Non-Nullable Implementation Without Optional Chaining
DESCRIPTION: Example showing correct implementation for non-nullable types without optional chaining operator.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  // Template always displays `name` as `user` is guaranteed to never be `null`
  // or `undefined`.
  template: `<div>{{ foo.bar }}</div>`,
})
class MyComponent {
  user: { name: string } = { name: 'Angelino' };
}

----------------------------------------

TITLE: Updating Angular Component Title
DESCRIPTION: This code changes the title property of the AppComponent class to 'Hello world'.

LANGUAGE: typescript
CODE:
title = 'Hello world';

----------------------------------------

TITLE: Implementing Lightweight Injection Token Pattern in TypeScript
DESCRIPTION: Demonstrates the lightweight injection token pattern using an abstract class, improving tree-shaking for the LibHeaderComponent.

LANGUAGE: typescript
CODE:
abstract class LibHeaderToken {}

@Component({
  selector: 'lib-header',
  providers: [
    {provide: LibHeaderToken, useExisting: LibHeaderComponent}
  ]
  …,
})
class LibHeaderComponent extends LibHeaderToken {}

@Component({
  selector: 'lib-card',
  …,
})
class LibCardComponent {
  @ContentChild(LibHeaderToken) header: LibHeaderToken|null = null;
}

----------------------------------------

TITLE: Using Complex Enum Values in Angular Providers (TypeScript)
DESCRIPTION: This snippet demonstrates an 'Unsupported enum member name' error. It shows providers referencing enum values, including a computed value which is not supported in metadata.

LANGUAGE: typescript
CODE:
// ERROR
enum Colors {
  Red = 1,
  White,
  Blue = "Blue".length // computed
}

  …
  providers: [
    { provide: BaseColor,   useValue: Colors.White } // ok
    { provide: DangerColor, useValue: Colors.Red }   // ok
    { provide: StrongColor, useValue: Colors.Blue }  // bad
  ]
  …

----------------------------------------

TITLE: Creating an Injector with Explicit Keys in Angular
DESCRIPTION: Shows how to create an Injector using explicit Key objects instead of relying on automatic token-to-key mapping.

LANGUAGE: typescript
CODE:
var ENGINE_KEY = Key.get(Engine);

var inj = Injector.resolveAndCreate([
  bind(ENGINE_KEY).toFactory(() => new TurboEngine()) // no mapping
]);
var engine = inj.get(ENGINE_KEY);  // no mapping

----------------------------------------

TITLE: Including Inputs and Outputs in Host Directives
DESCRIPTION: Shows how to explicitly include inputs and outputs from host directives in the component's API, including the ability to alias them.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'admin-menu',
  template: 'admin-menu.html',
  hostDirectives: [{
    directive: MenuBehavior,
    inputs: ['menuId: id'],
    outputs: ['menuClosed: closed'],
  }],
})
export class AdminMenu { }

----------------------------------------

TITLE: Adding Input Property to Structural Directive in Angular TypeScript
DESCRIPTION: Adds a required input property 'selectFrom' to the structural directive to specify the data source.

LANGUAGE: typescript
CODE:
export class SelectDirective {
  // ...

  @Input({required: true}) selectFrom!: DataSource;
}

----------------------------------------

TITLE: Configuring Environment Initializer with Multi Provider in Angular
DESCRIPTION: Demonstrates the correct way to provide a multi token in Angular using ENVIRONMENT_INITIALIZER as an example. The provider must be configured with multi: true flag and appropriate value.

LANGUAGE: typescript
CODE:
{provide: ENVIRONMENT_INITIALIZER, multi: true, useValue: () => {...}}

----------------------------------------

TITLE: Generating a Directive Using Angular CLI
DESCRIPTION: Command to generate a new directive named 'select' using the Angular CLI. This creates the directive class and specifies the CSS selector.

LANGUAGE: shell
CODE:
ng generate directive select

----------------------------------------

TITLE: Configuring TSConfig to Suppress Nullish Coalescing Not Nullable Diagnostic
DESCRIPTION: This JSON snippet shows how to configure the tsconfig.json file to suppress the nullishCoalescingNotNullable diagnostic if it cannot be avoided in the project.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "nullishCoalescingNotNullable": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring TypeScript for Schematics in tsconfig.schematics.json
DESCRIPTION: This TypeScript configuration file specifies how to compile the schematics into the distributed library.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "lib": [
      "es2018",
      "dom"
    ],
    "declaration": true,
    "module": "commonjs",
    "moduleResolution": "node",
    "noEmitOnError": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedParameters": true,
    "noUnusedLocals": true,
    "rootDir": "schematics",
    "outDir": "../../dist/my-lib/schematics",
    "skipDefaultLibCheck": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strictNullChecks": true,
    "target": "es6",
    "types": [
      "jasmine",
      "node"
    ]
  },
  "include": [
    "schematics/**/*"
  ],
  "exclude": [
    "schematics/*/files/**/*"
  ]
}

----------------------------------------

TITLE: Text Whitespace Example - Template Version
DESCRIPTION: Example showing multiple spaces in template text content before processing.

LANGUAGE: angular-html
CODE:
<!-- What it looks like in the template -->
<p>Hello         world</p>

----------------------------------------

TITLE: Demonstrating Tree-Shaking Issues in Angular Ivy
DESCRIPTION: This snippet illustrates how the lack of global knowledge in ngtsc can lead to tree-shaking problems. It shows declarations for a directive, component, and module, highlighting why the compiler needs selector information.

LANGUAGE: typescript
CODE:
@Directive({
  selector: '[tooltip]'
})
export class TooltipDirective {
  // ngtsc generates this:
  static ɵdir = ɵɵdefineDirective(...);
}

@Component({
  selector: 'app-root',
  template: 'Hello World!'
})
class MyAppComponent {
  // ngtsc generates this:
  static ɵdir = ɵɵdefineComponent({
    ...
    directives: [
      // BREAKS TREE-SHAKING!!!
      // TooltipDirective included here because it was declared in the NgModule
      // ngtsc does not know it can be omitted.
      // Only way for ngtsc to know that it can omit TooltipDirective is if it knows
      // its selector and see if the selector matches the current component's template.
      TooltipDirective
    ]
  });
}

@NgModule({
  declarations: [MyAppComponent, TooltipDirective],
  bootstrap: [MyAppComponent],
})
class MyAppModule {
    // ngtsc generates this:
  static ɵmod = ɵɵdefineNgModule(...);
}

----------------------------------------

TITLE: Angular Component After Cleanup
DESCRIPTION: Example of the same Angular component after running the cleanup schematic, showing the removal of unused imports and empty imports array.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  template: 'Hello',
  imports: [],
})
export class MyComp {}

----------------------------------------

TITLE: Composing Multiple Directives in Angular
DESCRIPTION: Illustrates how to compose multiple directives using the hostDirectives property, enabling transitive aggregation of behaviors.

LANGUAGE: typescript
CODE:
@Directive({...})
export class Menu { }

@Directive({...})
export class Tooltip { }

// MenuWithTooltip can compose behaviors from multiple other directives
@Directive({
  hostDirectives: [Tooltip, Menu],
})
export class MenuWithTooltip { }

// CustomWidget can apply the already-composed behaviors from MenuWithTooltip
@Directive({
  hostDirectives: [MenuWithTooltip],
})
export class SpecializedMenuWithTooltip { }

----------------------------------------

TITLE: Using Boolean Options in Angular CLI
DESCRIPTION: Demonstrates the various syntax options for specifying boolean flags in Angular CLI commands. Options can be set using --flag format for true values and --no-flag format for false values, or explicitly using =true/=false.

LANGUAGE: bash
CODE:
--this-option       # sets flag to true
--no-this-option   # sets flag to false
--this-option=true  # explicit true
--this-option=false # explicit false

----------------------------------------

TITLE: Running Code After Angular Application Stability (TypeScript)
DESCRIPTION: Example of how to execute code once an Angular application becomes stable, using ApplicationRef.isStable observable.

LANGUAGE: typescript
CODE:
class SimpleComponent {
  constructor() {
    const applicationRef = inject(ApplicationRef);

    applicationRef.isStable.pipe( first((isStable) => isStable) ).subscribe(() => {
      // Note that we don't need to use `runOutsideAngular` because `isStable`
      // emits events outside of the Angular zone when it's truthy (falsy values
      // are emitted inside the Angular zone).
      setTimeout(() => { ... });
    });
  }
}

----------------------------------------

TITLE: Generating HeroService Using Angular CLI
DESCRIPTION: Demonstrates the Angular CLI command to generate a new service file with the @Injectable decorator.

LANGUAGE: sh
CODE:
ng generate service heroes/hero

----------------------------------------

TITLE: Fixing Duplicate Keys in Angular @for Loop
DESCRIPTION: This code snippet demonstrates the correct way to use a track expression in an Angular @for loop to avoid duplicate keys. It uses the unique 'key' property of each item instead of the non-unique 'value' property, ensuring that each item in the collection can be uniquely identified.

LANGUAGE: typescript
CODE:
@Component({
    template: `@for (item of items; track item.key) {{{item.value}}}`,
})
class TestComponent {
    items = [{key: 1, value: 'a'}, {key: 2, value: 'b'}, {key: 3, value: 'a'}];
}

----------------------------------------

TITLE: Decorative Header Component Usage in Angular
DESCRIPTION: Example of using the docs-decorative-header component to display the Angular Roadmap title and image

LANGUAGE: html
CODE:
<docs-decorative-header title="Angular Roadmap" imgSrc="adev/src/assets/images/roadmap.svg">
Learn how the Angular team is building momentum on the web.
</docs-decorative-header>

----------------------------------------

TITLE: Filter Animation Trigger in Angular HTML
DESCRIPTION: This HTML snippet shows how to apply a filter animation trigger to a list of heroes in an Angular template.

LANGUAGE: html
CODE:
<ul class="heroes" [@filterAnimation]="heroTotal">
  <li *ngFor="let hero of heroes" class="hero">
    <div class="inner">
      <span class="badge">{{ hero.id }}</span>
      <span>{{ hero.name }}</span>
    </div>
  </li>
</ul>

----------------------------------------

TITLE: Importing Components and Routes in Angular routes.ts
DESCRIPTION: These import statements bring in the necessary components and the Routes type for defining routes in an Angular application.

LANGUAGE: typescript
CODE:
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { DetailsComponent } from './details/details.component';

----------------------------------------

TITLE: Angular Platform Browser API Declarations
DESCRIPTION: TypeScript declarations for Angular's platform-browser module including imports, classes, interfaces, and functions for browser-specific functionality. Contains definitions for browser module, DOM sanitization, meta tags, title service, and hydration features.

LANGUAGE: typescript
CODE:
import { ApplicationConfig as ApplicationConfig_2 } from '@angular/core';
import { ApplicationRef } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { DebugElement } from '@angular/core';
import { DebugNode } from '@angular/core';
import { EnvironmentProviders } from '@angular/core';
import { HttpTransferCacheOptions } from '@angular/common/http';
import * as i0 from '@angular/core';
import * as i1 from '@angular/common';
import { InjectionToken } from '@angular/core';
import { ListenerOptions } from '@angular/core';
import { NgZone } from '@angular/core';
import { PlatformRef } from '@angular/core';
import { Predicate } from '@angular/core';
import { Provider } from '@angular/core';
import { Sanitizer } from '@angular/core';
import { SecurityContext } from '@angular/core';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';
import { Version } from '@angular/core';

export type ApplicationConfig = ApplicationConfig_2;

export function bootstrapApplication(rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef>;

export class BrowserModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<BrowserModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<BrowserModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserModule, never, never, [typeof i1.CommonModule, typeof i0.ApplicationModule]>;
}

// Additional declarations follow...

----------------------------------------

TITLE: Diagnostic Suppression Configuration
DESCRIPTION: TSConfig settings to suppress the missingControlFlowDirective diagnostic check if needed.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "missingControlFlowDirective": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Angular Compiler Options to Suppress Invalid Banana-in-Box Diagnostic
DESCRIPTION: This JSON configuration snippet demonstrates how to suppress the 'invalidBananaInBox' diagnostic in the project's tsconfig.json file. It allows developers to disable this specific check if needed.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "invalidBananaInBox": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Directive Definition Example
DESCRIPTION: Example showing how directives are transformed from TypeScript decorators to compiled JavaScript with metadata.

LANGUAGE: typescript
CODE:
@Directive({selector: '[my-dir]'})
export class MyDirective {
  @HostBinding('id') dirId = 'some id';
}

LANGUAGE: javascript
CODE:
export class MyDirective {
  constructor() {
    this.dirId = 'some id';
  }
  static ɵdir = ɵɵdefineDirective({...});
}

----------------------------------------

TITLE: Initializing Macrotasks in Angular Component (TypeScript)
DESCRIPTION: Example of setting up macrotasks (setInterval and setTimeout) in an Angular component constructor, which may delay application stability.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app',
  template: ``,
})
class SimpleComponent {
  constructor() {
    setInterval(() => { ... }, 1000)

    // or

    setTimeout(() => { ... }, 10_000)
  }
}

----------------------------------------

TITLE: Lazy Loaded Route Configuration Example
DESCRIPTION: Example of the route configuration after applying the lazy loading migration, demonstrating the conversion to a lazy loaded component.

LANGUAGE: typescript
CODE:
// app.module.ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'home',
        // ↓ HomeComponent is now lazy loaded
        loadComponent: () => import('./home/home.component').then(m => m.HomeComponent),
      },
    ]),
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing File Copy Functionality in Angular CLI Builder
DESCRIPTION: This code snippet shows a more complete implementation of an Angular CLI builder that copies a file from a source to a destination. It includes error handling and uses the NodeJS fs.promises API for file operations.

LANGUAGE: typescript
CODE:
import { BuilderOutput, createBuilder } from '@angular-devkit/architect';
import { promises as fs } from 'fs';

export default createBuilder(async (options, context): Promise<BuilderOutput> => {
  try {
    await fs.copyFile(options.source, options.destination);
    return { success: true };
  } catch (error) {
    return {
      success: false,
      error: `Error copying file: ${error.message}`
    };
  }
});

----------------------------------------

TITLE: Fill Mode Usage
DESCRIPTION: Example of using fill mode to have an image fill its container

LANGUAGE: angular-html
CODE:
<img ngSrc="cat.jpg" fill>

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Displays help information for Angular CLI commands and usage.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Creating QuestionControlService for Form Group Generation
DESCRIPTION: Implements a service to generate FormGroup instances based on the question model. It creates form controls with default values and validation rules for each question in the model.

LANGUAGE: TypeScript
CODE:
import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';

import { QuestionBase } from './question-base';

@Injectable({
  providedIn: 'root'
})
export class QuestionControlService {
  toFormGroup(questions: QuestionBase<string>[] ) {
    const group: any = {};

    questions.forEach(question => {
      group[question.key] = question.required ? new FormControl(question.value || '', Validators.required)
                                              : new FormControl(question.value || '');
    });
    return new FormGroup(group);
  }
}


----------------------------------------

TITLE: Angular Compiler Configuration for Diagnostic Suppression
DESCRIPTION: JSON configuration to suppress the optionalChainNotNullable diagnostic in tsconfig.json.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "extendedDiagnostics": {
      "checks": {
        "optionalChainNotNullable": "suppress"
      }
    }
  }
}

----------------------------------------

TITLE: Injecting HeroService into HeroListComponent Using inject Function
DESCRIPTION: Demonstrates how to inject a service into a component using Angular's inject function, allowing for dependency injection outside of the constructor.

LANGUAGE: typescript
CODE:
import { inject } from "@angular/core";

export class HeroListComponent {
  private heroService = inject(HeroService);
}

----------------------------------------

TITLE: Identifying Component Selector Declaration in Angular
DESCRIPTION: This snippet shows the typical structure of a component selector declaration in Angular. It's used to illustrate where developers should look when debugging selector collisions.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'YOUR_STRING',
  …
})

----------------------------------------

TITLE: Correct Implementation with Individual NgIf Import
DESCRIPTION: Proper implementation showing how to import and use the NgIf directive individually in a standalone component.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {NgIf} from '@angular/common';

@Component({
  imports: [NgIf],
  template: `<div *ngIf="visible">Hi</div>`,
})
class MyComponent {}

----------------------------------------

TITLE: Creating a Service Template for Schematic Generation
DESCRIPTION: This template file defines the structure of the service that will be generated by the schematic, including Angular imports and basic service structure.

LANGUAGE: typescript
CODE:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class <%= classify(name) %>Service {
  constructor(private http: HttpClient) { }
}

----------------------------------------

TITLE: Angular Module Component Integration Example
DESCRIPTION: Shows the relationship between components, directives, and NgModules, demonstrating how dependencies affect compilation without direct imports.

LANGUAGE: typescript
CODE:
// dir.ts
@Directive({selector: '[dir]'})
export class Dir {}

// cmp.ts
@Component({
  selector: 'cmp',
  template: '<div dir></div>', // Matches the `[dir]` selector
})
export class Cmp {}

// mod.ts
import {Dir} from './dir';
import {Cmp} from './cmp';

@NgModule({declarations: [Dir, Cmp]})
export class Mod {}

----------------------------------------

TITLE: Using CUSTOM_ELEMENTS_SCHEMA in Angular Module
DESCRIPTION: Example reference to importing CUSTOM_ELEMENTS_SCHEMA from Angular core for supporting custom elements and web components in an Angular application.

LANGUAGE: typescript
CODE:
CUSTOM_ELEMENTS_SCHEMA

----------------------------------------

TITLE: Correct Usage of Angular Signal in Template Interpolation
DESCRIPTION: This example shows the correct way to use an Angular Signal in a template interpolation. The signal is properly invoked with parentheses, ensuring that its current value is rendered.

LANGUAGE: typescript
CODE:
import {Component, signal, Signal} from '@angular/core';

@Component({
  template: `<div>{{ mySignal() }}/div>`,
})
class MyComponent {
  mySignal: Signal<number> = signal(0)
}

----------------------------------------

TITLE: Checking Available Package Updates
DESCRIPTION: Example output of ng update command showing available package updates for Angular dependencies.

LANGUAGE: shell
CODE:
ng update
We analyzed your package.json, there are some packages to update:

    Name                                      Version                     Command to update
    -------------------------------------------------------------------------------
    @angular/cdk                       7.2.2 -> 7.3.1           ng update @angular/cdk
    @angular/cli                       7.2.3 -> 7.3.0           ng update @angular/cli
    @angular/core                      7.2.2 -> 7.2.3           ng update @angular/core
    @angular/material                  7.2.2 -> 7.3.1           ng update @angular/material
    rxjs                                      6.3.3 -> 6.4.0           ng update rxjs

----------------------------------------

TITLE: Valid inject() Usage in Provider Factory
DESCRIPTION: Shows how to properly use inject() within a provider's factory function definition.

LANGUAGE: typescript
CODE:
providers: [
  {provide: Car, useFactory: () => {
    // OK: a class factory
    const engine = inject(Engine);
    return new Car(engine);
  }}
]

----------------------------------------

TITLE: Using Control Flow with @for in Angular Templates
DESCRIPTION: Shows how to use Angular's @for block to repeat parts of a template. The example demonstrates rendering a list of user badges using @for with the track keyword for performance optimization.

LANGUAGE: html
CODE:
<h1>User profile</h1>

<ul class="user-badge-list">
  @for (badge of badges(); track badge.id) {
    <li class="user-badge">{{badge.name}}</li>
  }
</ul>

----------------------------------------

TITLE: Adding Build Scripts for Schematics in package.json
DESCRIPTION: These scripts in the library's package.json file compile the schematic using the custom tsconfig.schematics.json file and copy the schematic files to the distribution folder.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "tsc -p tsconfig.schematics.json",
    "postbuild": "copyfiles schematics/*/schema.json schematics/*/files/** schematics/collection.json ../../dist/my-lib/"
  },
  "devDependencies": {
    "copyfiles": "file:../../node_modules/copyfiles",
    "typescript": "file:../../node_modules/typescript"
  }
}

----------------------------------------

TITLE: Creating FormGroup with FormControls
DESCRIPTION: Demonstrates how to create a FormGroup object with FormControl instances for name and email fields.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule, FormControl, FormGroup } from '@angular/forms';
...
export class AppComponent {
  profileForm = new FormGroup({
    name: new FormControl(''),
    email: new FormControl(''),
  });
}

----------------------------------------

TITLE: Optimized Tracking Expression in Angular @for Loop
DESCRIPTION: This snippet demonstrates the correct way to use a tracking expression in an Angular @for loop. By using the unique 'id' property as the tracking expression, unnecessary DOM re-creation is avoided when updating the 'done' status.

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <button (click)="toggleAllDone()">All done!</button>
    <ul>
    @for (todo of todos; track todo.id) {
      <li>{{todo.task}}</li>
    }
    </ul>
  `,
})
export class App {
  todos = [
    { id: 0, task: 'understand trackBy', done: false },
    { id: 1, task: 'use proper tracking expression', done: false },
  ];

  toggleAllDone() {
    this.todos = this.todos.map(todo => ({ ...todo, done: true }));
  }
}

----------------------------------------

TITLE: Rendering Tutorial Cards with Custom HTML Elements in Angular
DESCRIPTION: This snippet demonstrates the use of custom HTML elements to create a container of tutorial cards. Each card represents a different Angular learning path with a title, link, and image.

LANGUAGE: html
CODE:
<docs-card-container>
  <docs-card title="Learn Angular in your browser" link="Start coding" href="tutorials/learn-angular" imgSrc="adev/src/assets/images/learn-angular-browser.svg">
    via the Playground
  </docs-card>
  <docs-card title="Build your first Angular app locally" link="Start coding" href="tutorials/first-app" imgSrc="adev/src/assets/images/learn-angular-local.svg">
    via npm
  </docs-card>
  <docs-card title="Deferrable views" link="Start coding" href="tutorials/deferrable-views" imgSrc="adev/src/assets/images/ang_illustrations-04.svg">
    via the Playground
  </docs-card>
</docs-card-container>

----------------------------------------

TITLE: Enabling JSONP Support with provideHttpClient in Angular
DESCRIPTION: This snippet demonstrates how to enable JSONP support when using the provideHttpClient function in a standalone Angular application. It uses the withJsonpSupport() function as an argument to provideHttpClient.

LANGUAGE: typescript
CODE:
provideHttpClient(withJsonpSupport())

----------------------------------------

TITLE: Binding to HTML Attributes in Angular Templates
DESCRIPTION: Demonstrates how to bind to HTML attributes using the 'attr.' prefix in Angular templates. The example shows binding the 'role' attribute of a <ul> element.

LANGUAGE: html
CODE:
<!-- Bind the `role` attribute on the `<ul>` element to value of `listRole`. -->
<ul [attr.role]="listRole()">

----------------------------------------

TITLE: Binding Click Event for Search in HomeComponent
DESCRIPTION: Updates the button element to bind the click event to the filterResults function, passing the value of the filter input as an argument.

LANGUAGE: html
CODE:
<button class="primary" type="button" (click)="filterResults(filter.value)">Search</button>

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project with optional production flag for optimization

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Configuring Asset Groups in Angular Service Worker
DESCRIPTION: Demonstrates the JSON structure for defining asset groups in ngsw-config.json. Asset groups define resources that are part of the application version and update with it.

LANGUAGE: json
CODE:
{
  "assetGroups": [
    {
      …
    },
    {
      …
    }
  ]
}

----------------------------------------

TITLE: Defining BrowserDynamicTestingModule and Platform Configuration in TypeScript
DESCRIPTION: Declares the core testing module and platform initialization for Angular browser-based dynamic testing. Includes imports for core Angular dependencies, a module class with internal Angular decorators, and a platform initialization function that accepts optional static providers.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import * as i1 from '@angular/platform-browser/testing';
import { PlatformRef } from '@angular/core';
import { StaticProvider } from '@angular/core';

// @public
export class BrowserDynamicTestingModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<BrowserDynamicTestingModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<BrowserDynamicTestingModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserDynamicTestingModule, never, never, [typeof i1.BrowserTestingModule]>;
}

// @public (undocumented)
export const platformBrowserDynamicTesting: (extraProviders?: StaticProvider[]) => PlatformRef;

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Fixing Required Child Query Access in Angular Components
DESCRIPTION: Angular child queries (contentChild and viewChild) have specific lifecycle timing requirements. ContentChild results are available after host view creation and should be accessed in AfterContentChecked or later. ViewChild results are available after component template creation and should be accessed in AfterViewChecked or later. Neither should be accessed in the constructor.

LANGUAGE: typescript
CODE:
@Component({/*...*/})
class MyComponent {
  @ContentChild(ChildComponent, {required: true}) child!: ChildComponent;
  
  // CORRECT: Access in lifecycle hooks
  ngAfterContentChecked() {
    // Access contentChild here
    this.child.someMethod();
  }
  
  // INCORRECT: Will throw error
  constructor() {
    // Don't access contentChild here
    this.child.someMethod(); // Error!
  }
}

----------------------------------------

TITLE: Whitespace Character Visualization
DESCRIPTION: Demonstration of whitespace characters in an Angular template, with hash symbols (#) replacing actual whitespace to show their presence and quantity.

LANGUAGE: angular-html
CODE:
<!-- Total Whitespace: 20 -->
<section>###<h3>User profile</p>###<label>#####User name#####<input>###</label>#</section>

----------------------------------------

TITLE: Adding Filtered Results Property in HomeComponent
DESCRIPTION: Updates the HomeComponent class to include a new property 'filteredLocationList' for storing filtered housing locations. The constructor is modified to initialize this property with all housing locations by default.

LANGUAGE: typescript
CODE:
filteredLocationList: HousingLocation[] = [];

constructor() {
  this.filteredLocationList = this.housingLocationList;

----------------------------------------

TITLE: Basic NgIf with ng-container in Angular
DESCRIPTION: Demonstrates basic conditional rendering using ng-container with *ngIf directive without adding extra DOM elements.

LANGUAGE: html
CODE:
<ng-container *ngIf="condition">
  …
</ng-container>

----------------------------------------

TITLE: Displaying Service Worker Debug State Information
DESCRIPTION: Example output of the NGSW debug info showing driver state, manifest hash, client information, and task queue status.

LANGUAGE: shell
CODE:
NGSW Debug Info:\n\nDriver version: 13.3.7\nDriver state: NORMAL ((nominal))\nLatest manifest hash: eea7f5f464f90789b621170af5a569d6be077e5c\nLast update check: never\n\n=== Version eea7f5f464f90789b621170af5a569d6be077e5c ===\n\nClients: 7b79a015-69af-4d3d-9ae6-95ba90c79486, 5bc08295-aaf2-42f3-a4cc-9e4ef9100f65\n\n=== Idle Task Queue ===\nLast update tick: 1s496u\nLast update run: never\nTask queue:\n * init post-load (update, cleanup)\n\nDebug log:\n

----------------------------------------

TITLE: NgFor Type Guard Example
DESCRIPTION: Example of how NgFor uses template context type guards for type narrowing

LANGUAGE: typescript
CODE:
@Directive({selector: '[ngFor]'})
export class NgFor<T> {
  @Input() ngForOf!: Iterable<T>;

  static ngTemplateContextGuard<T>(dir: NgFor<T>, ctx: any): ctx is NgForContext<T> {
    return true;
  }
}

----------------------------------------

TITLE: Configuring Assets in Angular JSON
DESCRIPTION: Example of configuring asset copying in the angular.json file, including specifying globs and excluding certain files.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "assets": [
              {
                "glob": "**/*",
                "input": "src/assets/",
                "ignore": ["**/*.svg"],
                "output": "/assets/"
              }
            ]
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Directive Export and Template Reference
DESCRIPTION: Example of creating a directive with exportAs property and using it with template reference variables.

LANGUAGE: angular-ts
CODE:
@Directive({
  selector: '[dropZone]',
  exportAs: 'dropZone',
})
export class DropZone { /* ... */ }

LANGUAGE: angular-html
CODE:
<section dropZone #firstZone="dropZone"> ... </section>

----------------------------------------

TITLE: Updating HTML Title in Angular Application
DESCRIPTION: This code snippet updates the title of the Angular application in the index.html file.

LANGUAGE: html
CODE:
<title>Homes</title>

----------------------------------------

TITLE: Implementing Basic Rule Factory in TypeScript
DESCRIPTION: Example of a basic rule factory function that creates a schematic rule. Shows the minimal implementation that returns an unchanged tree.

LANGUAGE: typescript
CODE:
import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';

// You don't have to export the function as default.
// You can also have more than one rule factory per file.
export function helloWorld(_options: any): Rule {
 return (tree: Tree,_context: SchematicContext) => {
   return tree;
 };
}

----------------------------------------

TITLE: Generating Angular Component with CLI
DESCRIPTION: CLI command to generate a new BannerComponent with inline template and styles

LANGUAGE: shell
CODE:
ng generate component banner --inline-template --inline-style --module app

----------------------------------------

TITLE: Basic Template Type Check Block Example
DESCRIPTION: Example showing how a component's template expressions are converted into a TypeScript type check block function

LANGUAGE: typescript
CODE:
function tcb(this: SomeCmp): void {
  '' + this.foo.bar;
}

----------------------------------------

TITLE: Angular Component Example
DESCRIPTION: Demonstrates a basic Angular component with a Hello World template.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'example-code',
  template: '<h1>Hello World!</h1>',
})
export class ComponentOverviewComponent {}

----------------------------------------

TITLE: Defining routes in Angular
DESCRIPTION: Create and export a routes array in app.routes.ts file, defining paths and components for the application's routes.

LANGUAGE: typescript
CODE:
import {Routes} from '@angular/router';

export const routes = [];

{path: 'crisis-list', component: CrisisListComponent},
{path: 'heroes-list', component: HeroesListComponent},

----------------------------------------

TITLE: Serving Angular Application Locally
DESCRIPTION: This command builds and serves the Angular application locally for testing and development.

LANGUAGE: shell
CODE:
ng serve

----------------------------------------

TITLE: Generated Code for I18N Component
DESCRIPTION: Ivy rendering instructions generated by the Angular template compiler for the i18n component.

LANGUAGE: typescript
CODE:
const MSG_title = 'Hello �0�!';
const MSG_div_attr = ['title', MSG_title];
const MSG_div = `�0� is rendered as: �*3:1��#1:1�{�0:1�, plural,
  =0 {no <b title="none">emails</b>!}
  =1 {one <i>email</i>}
  other {�0:1� <span title="�0:1�">emails</span>}
}�/#1:1��/*3:1�.`;

function MyComponent_NgIf_Template_0(rf: RenderFlags, ctx: any) {
  if (rf & RenderFlags.Create) {
    i18nStart(0, MSG_div, 1);
      element(1, 'b');
    i18nEnd();
  }
  if (rf & RenderFlags.Update) {
    i18nExp(ctx.count);   // referenced by `�0:1�`
    i18nApply(0);
  }
}

class MyComponent {
  static ɵcmp = defineComponent({
    ...,
    template: function(rf: RenderFlags, ctx: MyComponent) {
      if (rf & RenderFlags.Create) {
        elementStart(0, 'div');
          i18nAttributes(1, MSG_div_attr);
          i18nStart(2, MSG_div);
            template(3, MyComponent_NgIf_Template_0, ...);
          i18nEnd();
        elementEnd();
      }
      if (rf & RenderFlags.Update) {
        i18nExp(ctx.name);  // referenced by `�0�` in `MSG_title`
        i18nApply(1);             // Updates the `i18n-title` binding
        i18nExp(ctx.count); // referenced by `�0�` in `MSG_div`
        i18nApply(2);             // Updates the `<div i18n>...</div>`
      }
    }
  });
}

----------------------------------------

TITLE: Building and Running Library Schematic using Angular CLI
DESCRIPTION: These shell commands demonstrate how to build the library and its schematics, link the library, and run the custom schematic using the ng generate command.

LANGUAGE: shell
CODE:
ng build my-lib
cd projects/my-lib
npm run build
cd ../..
npm link dist/my-lib
ng generate my-lib:my-service --name my-data

----------------------------------------

TITLE: Querying Multiple Template Fragments in Angular Component
DESCRIPTION: Shows how to query and reference multiple template fragments using ViewChild decorators in an Angular component.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */,
  template: `
    <p>This is a normal element</p>

    <ng-template #fragmentOne>
      <p>This is one template fragment</p>
    </ng-template>

    <ng-template #fragmentTwo>
      <p>This is another template fragment</p>
    </ng-template>
  `,
})
export class ComponentWithFragment {
  @ViewChild('fragmentOne', {read: TemplateRef}) fragmentOne: TemplateRef<unknown> | undefined;
  @ViewChild('fragmentTwo', {read: TemplateRef}) fragmentTwo: TemplateRef<unknown> | undefined;
}

----------------------------------------

TITLE: Querying Multiple Template Fragments in Angular Component
DESCRIPTION: Shows how to query and reference multiple template fragments using ViewChild decorators in an Angular component.

LANGUAGE: typescript
CODE:
@Component({
  /* ... */,
  template: `
    <p>This is a normal element</p>

    <ng-template #fragmentOne>
      <p>This is one template fragment</p>
    </ng-template>

    <ng-template #fragmentTwo>
      <p>This is another template fragment</p>
    </ng-template>
  `,
})
export class ComponentWithFragment {
  @ViewChild('fragmentOne', {read: TemplateRef}) fragmentOne: TemplateRef<unknown> | undefined;
  @ViewChild('fragmentTwo', {read: TemplateRef}) fragmentTwo: TemplateRef<unknown> | undefined;
}

----------------------------------------

TITLE: Configuring Route Redirect
DESCRIPTION: Sets up a redirect route in the application.

LANGUAGE: typescript
CODE:
const routes: Routes = [
  { path: 'first-component', component: FirstComponent },
  { path: 'second-component', component: SecondComponent },
  { path: '',   redirectTo: '/first-component', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent },
];

----------------------------------------

TITLE: Adding HTML Markup to AppComponent Template
DESCRIPTION: This example demonstrates how to include additional HTML markup in the AppComponent template, specifically wrapping the UserComponent reference in a section element.

LANGUAGE: typescript
CODE:
template: `<section><app-user /></section>`,

----------------------------------------

TITLE: Running Tasks Outside NgZone in Angular
DESCRIPTION: This snippet demonstrates how to use NgZone to run tasks outside of Angular's change detection zone, specifically for setInterval calls that don't require change detection.

LANGUAGE: typescript
CODE:
import { Component, NgZone, OnInit } from '@angular/core';

@Component(...)
class AppComponent implements OnInit {
  constructor(private ngZone: NgZone) {}
  ngOnInit() {
    this.ngZone.runOutsideAngular(() => setInterval(pollForUpdates), 500);
  }
}

----------------------------------------

TITLE: Using Custom Module Types
DESCRIPTION: Demonstration of importing and using a custom-typed module in TypeScript

LANGUAGE: typescript
CODE:
import * as host from 'host';
const parsedUrl = host.parse('https://angular.io');
console.log(parsedUrl.hostname);

----------------------------------------

TITLE: Navigating to the New Angular App Directory
DESCRIPTION: Command to change the current directory to the newly created Angular app directory, allowing subsequent commands to operate within this workspace.

LANGUAGE: shell
CODE:
cd my-app

----------------------------------------

TITLE: Using forRoot and forChild Patterns in NgModule
DESCRIPTION: This snippet shows the usage of forRoot and forChild static methods in NgModules for configuring providers at different levels of the application.

LANGUAGE: typescript
CODE:
boorstrapApplication(MyApplicationRoot, {
  providers: [
    CustomMenuModule.forRoot(/* some config */),
  ],
});

LANGUAGE: typescript
CODE:
@Component({
  /* ... */
  providers: [
    CustomMenuModule.forChild(/* some config */),
  ],
})
export class UserProfile { /* ... */ }

----------------------------------------

TITLE: Generating Angular Application with Routing
DESCRIPTION: Uses Angular CLI to generate a new Angular application with routing enabled.

LANGUAGE: shell
CODE:
ng new routing-app

----------------------------------------

TITLE: Referencing UserComponent in AppComponent Template and Imports
DESCRIPTION: This snippet shows how to reference the UserComponent in the AppComponent template using its selector and how to import it in the AppComponent.

LANGUAGE: typescript
CODE:
template: `<app-user />`,
imports: [UserComponent]

----------------------------------------

TITLE: Using Inject in Router Guard Function
DESCRIPTION: Shows how to use inject() within a CanActivateFn router guard to access services. Demonstrates that router guard functions automatically run within an injection context.

LANGUAGE: typescript
CODE:
const canActivateTeam: CanActivateFn =
    (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {
      return inject(PermissionsService).canActivate(inject(UserToken), route.params.id);
    };

----------------------------------------

TITLE: Extending jQuery Interface
DESCRIPTION: Example of extending jQuery's TypeScript interface for custom plugins

LANGUAGE: typescript
CODE:
interface JQuery {
  myPlugin(options?: any): any;
}

----------------------------------------

TITLE: Handling Optional Injections with Non-nullable Types in Angular
DESCRIPTION: Shows how the nonNullableOptional option affects the migration of optional injections. This option adds non-null assertions to maintain the original type, potentially hiding type errors but matching existing code behavior.

LANGUAGE: typescript
CODE:
import { Component, Inject, Optional } from '@angular/core';
import { TOKEN_ONE, TOKEN_TWO } from './token';

@Component({})
export class MyComp {
  constructor(
    @Inject(TOKEN_ONE) @Optional() private tokenOne: number,
    @Inject(TOKEN_TWO) @Optional() private tokenTwo: string | null) {}
}

LANGUAGE: typescript
CODE:
import { Component, inject } from '@angular/core';
import { TOKEN_ONE, TOKEN_TWO } from './token';

@Component({})
export class MyComp {
  // Note the `!` at the end.
  private tokenOne = inject(TOKEN_ONE, { optional: true })!;

  // Does not have `!` at the end, because the type was already nullable.
  private tokenTwo = inject(TOKEN_TWO, { optional: true });
}

----------------------------------------

TITLE: Translating Nested Expression in XLIFF
DESCRIPTION: Shows how to translate a nested expression in an XLIFF file.

LANGUAGE: html
CODE:
<trans-unit id="b851789ad42d66a44733d7dd5f82e928a79ea7aa" datatype="html">
  <source>Updated: <x id="ICU" equiv-text="{minutes, plural, =0 {...} =1 {...} other {...}}"/></source>
  <target>Mis à jour: <x id="ICU" equiv-text="{minutes, plural, =0 {...} =1 {...} other {...}}"/></target>
</trans-unit>
<trans-unit id="7951672580a2e23fedf26c9eb45f2cb3d44cebef" datatype="html">
  <source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {<x id="INTERPOLATION" equiv-text="{{minutes}}"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} } } }</source>
  <target>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y a une minute} other {il y a <x id="INTERPOLATION" equiv-text="{{minutes}}"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} } } }</target>
</trans-unit>

----------------------------------------

TITLE: ICU Expression for Pluralization
DESCRIPTION: Shows how to use ICU expressions to handle plural forms in translations with the plural clause.

LANGUAGE: html
CODE:
<span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>

----------------------------------------

TITLE: Implementing Multiple Triggers with Hover and Interaction
DESCRIPTION: Demonstrates how to combine multiple triggers (hover and interaction) in a defer block. Uses template variable reference for the interaction trigger.

LANGUAGE: angular-html
CODE:
<button type="button" #showComments>Show all comments</button>

@defer (on hover; on interaction(showComments)) {
  <article-comments />
} @placeholder (minimum 1s) {
  <p>Placeholder for comments</p>
} @loading (minimum 1s; after 500ms) {
  <p>Loading comments...</p>
} @error {
  <p>Failed to load comments</p>
}

----------------------------------------

TITLE: Generating Custom Schematic Collection in Angular CLI
DESCRIPTION: Command syntax for generating a specific schematic from a custom collection using the full collection name format.

LANGUAGE: shell
CODE:
ng generate my-schematic-collection:my-schematic-name

----------------------------------------

TITLE: Locale ID Structure in Angular
DESCRIPTION: Demonstrates the structure of a locale ID used in Angular, consisting of a language identifier and locale extension separated by a hyphen.

LANGUAGE: html
CODE:
{language_id}-{locale_extension}

----------------------------------------

TITLE: Providing Async Animations Support in Angular
DESCRIPTION: Exports a function to provide either standard or noop animations support asynchronously in Angular applications. Takes an optional type parameter to specify whether to use full animations or noop (no-operation) animations.

LANGUAGE: typescript
CODE:
import { EnvironmentProviders } from '@angular/core';

// @public
export function provideAnimationsAsync(type?: 'animations' | 'noop'): EnvironmentProviders;

----------------------------------------

TITLE: Renaming Translation File with Locale
DESCRIPTION: Shows the naming convention for translation files with locale information.

LANGUAGE: file
CODE:
messages.xlf --> messages.{locale}.xlf

----------------------------------------

TITLE: Configuring Locales in angular.json
DESCRIPTION: Example configuration showing how to set source locale to en-US and add French (fr) translations in angular.json build configuration.

LANGUAGE: json
CODE:
{
  "projects": {
    "angular.io-example": {
      "i18n": {
        "sourceLocale": "en-US",
        "locales": {
          "fr": "src/locale/messages.fr.xlf"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Inline Code Reference in Markdown
DESCRIPTION: A simple inline code block reference to 'SomeClass' within a markdown list context

LANGUAGE: markdown
CODE:
`SomeClass`

----------------------------------------

TITLE: Version Update Prompting Service in Angular
DESCRIPTION: Service that prompts users when a new version is available and handles the update process. It subscribes to version updates and shows a confirmation dialog before applying updates.

LANGUAGE: typescript
CODE:
@Injectable()
export class PromptUpdateService {
  constructor(updates: SwUpdate) {
    updates.versionUpdates
      .pipe(filter((evt): evt is VersionReadyEvent => evt.type === 'VERSION_READY'))
      .subscribe(evt => {
        if (promptUser(evt)) {
          // Reload the page to update to the latest version
          document.location.reload();
        }
      });
  }
}

----------------------------------------

TITLE: Custom ID with Description in TypeScript
DESCRIPTION: Example of using a custom ID with description in a $localize tagged template literal.

LANGUAGE: typescript
CODE:
variableText2 = $localize`:An introduction header for this sample@@introductionHeader:Hello i18n!`;

----------------------------------------

TITLE: Package.json Structure for Angular Workspace
DESCRIPTION: The package.json file created by 'ng new' command contains essential Angular dependencies including core packages, compiler, platform modules, and development tools. This file is used by all projects in the workspace and can be extended with additional packages as needed.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@angular/animations": "<version>",
    "@angular/common": "<version>",
    "@angular/compiler": "<version>",
    "@angular/compiler-cli": "<version>",
    "@angular/core": "<version>",
    "@angular/forms": "<version>",
    "@angular/platform-browser": "<version>",
    "@angular/platform-browser-dynamic": "<version>",
    "@angular/router": "<version>",
    "@angular/cli": "<version>",
    "@angular-devkit/build-angular": "<version>",
    "rxjs": "<version>",
    "zone.js": "<version>",
    "typescript": "<version>"
  }
}

----------------------------------------

TITLE: Configuring Localization in Angular JSON
DESCRIPTION: This snippet shows how to configure the 'subPath' for localization in the angular.json file. It sets the 'subPath' to an empty string, which allows the CLI to adjust the base href for each localized version of the application.

LANGUAGE: json
CODE:
"build": {
  "options": {
    "localize": true,
    "subPath": ""
  }
}

----------------------------------------

TITLE: Custom ID with Description in HTML
DESCRIPTION: Example showing how to combine a description with a custom ID in an HTML template.

LANGUAGE: html
CODE:
<h1 i18n="An introduction header for this sample@@introductionHeader">Hello i18n!</h1>

----------------------------------------

TITLE: Implementing Decorative Header in Angular Template
DESCRIPTION: Shows how to use the docs-decorative-header component with custom title and image source attributes. The component includes both the header attributes and content text.

LANGUAGE: html
CODE:
<docs-decorative-header title="Custom Title" imgSrc="adev/shared-docs/pipeline/guides/testing/docs-decorative-header/decoration.svg">
This is header text
</docs-decorative-header>

----------------------------------------

TITLE: HTML Video Embed Example
DESCRIPTION: Example showing a custom docs-video component embedding a YouTube video.

LANGUAGE: html
CODE:
<docs-video src="https://www.youtube.com/embed/wfLkB3RsSJM"/>

----------------------------------------

TITLE: Serving French Locale
DESCRIPTION: Command to serve the application specifically for the French locale during development.

LANGUAGE: bash
CODE:
ng serve --configuration=fr

----------------------------------------

TITLE: Customizing DetailsComponent Template in Angular
DESCRIPTION: Updates the DetailsComponent template to display specific housing location data using optional chaining.

LANGUAGE: typescript
CODE:
template: `
  <article>
    <img class="listing-photo" [src]="housingLocation?.photo"
      alt="Exterior photo of {{housingLocation?.name}}">
    <section class="listing-description">
      <h2 class="listing-heading">{{housingLocation?.name}}</h2>
      <p class="listing-location">{{housingLocation?.city}}, {{housingLocation?.state}}</p>
    </section>
    <section class="listing-features">
      <h2 class="section-heading">About this housing location</h2>
      <ul>
        <li>Units available: {{housingLocation?.availableUnits}}</li>
        <li>Does this location have wifi: {{housingLocation?.wifi}}</li>
        <li>Does this location have laundry: {{housingLocation?.laundry}}</li>
      </ul>
    </section>
  </article>
`,

----------------------------------------

TITLE: Implementing Class-based HTTP Interceptor
DESCRIPTION: Example of implementing a class-based HTTP interceptor for authentication.

LANGUAGE: typescript
CODE:
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private authService = inject(AuthService);

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    const clonedRequest = request.clone({
      headers: request.headers.append('X-Authentication-Token', this.authService.getAuthToken()),
    });
    return next.handle(clonedRequest);
  }
}

----------------------------------------

TITLE: Implementing Prerender Parameters in Angular
DESCRIPTION: Example of implementing getPrerenderParams for static site generation with dynamic route parameters.

LANGUAGE: typescript
CODE:
export const serverRoutes: ServerRoute[] = [
  {
    path: 'post/:id',
    renderMode: RenderMode.Prerender,
    async getPrerenderParams() {
      const dataService = inject(PostService);
      const ids = await dataService.getIds();
      return ids.map(id => ({ id }));
    },
  },
];

----------------------------------------

TITLE: Structuring Angular Card Container Template
DESCRIPTION: Basic HTML template structure showing a container component that wraps multiple card components. Uses custom Angular elements 'docs-card-container' and 'docs-card' to create a card-based layout.

LANGUAGE: html
CODE:
<docs-card-container>
  <docs-card ></docs-card>
  <docs-card ></docs-card>
</docs-card-container>

----------------------------------------

TITLE: Implementing Angular Pill Row with Links
DESCRIPTION: Demonstrates the structure of a pill row component containing two linked pill elements. Each pill has a title and href attribute for navigation.

LANGUAGE: html
CODE:
<docs-pill-row>
  <docs-pill href="#pill-row" title="Link"/>
  <docs-pill href="#pill-row" title="Link"/>
</docs-pill-row>

----------------------------------------

TITLE: Greeting Example with i18n
DESCRIPTION: Shows how to mark a simple greeting text for translation in an h1 tag.

LANGUAGE: html
CODE:
<h1 i18n="">Hello i18n!</h1>

----------------------------------------

TITLE: Test Class Naming Conventions in TypeScript
DESCRIPTION: Examples showing proper naming conventions for test classes in Angular testing code.

LANGUAGE: typescript
CODE:
/** PREFER: describes the scenario under test. */
class FormGroupWithCheckboxAndRadios { /* ... */ }
class InputWithNgModel { /* ... */ }


/** AVOID: does not fully describe the scenario under test. */
class Comp { /* ... */ }
class InputComp { /* ... */ }

----------------------------------------

TITLE: Importing NgIf in Angular Component
DESCRIPTION: Shows how to import the NgIf directive into an Angular component for conditional rendering.

LANGUAGE: TypeScript
CODE:
import { NgIf } from '@angular/common';

----------------------------------------

TITLE: Using Lightweight Injection Token for API Definition in TypeScript
DESCRIPTION: Shows how to use the lightweight injection token pattern to define an API, allowing type-safe communication between components while maintaining tree-shaking benefits.

LANGUAGE: typescript
CODE:
abstract class LibHeaderToken {
  abstract doSomething(): void;
}

@Component({
  selector: 'lib-header',
  providers: [
    {provide: LibHeaderToken, useExisting: LibHeaderComponent}
  ]
  …,
})
class LibHeaderComponent extends LibHeaderToken {
  doSomething(): void {
    // Concrete implementation of `doSomething`
  }
}

@Component({
  selector: 'lib-card',
  …,
})
class LibCardComponent implement AfterContentInit {
  @ContentChild(LibHeaderToken) header: LibHeaderToken|null = null;

  ngAfterContentInit(): void {
    if (this.header !== null) {
      this.header?.doSomething();
    }
  }
}

----------------------------------------

TITLE: Router Primary Service Class Definition
DESCRIPTION: Core Router service class with navigation and URL handling functionality

LANGUAGE: typescript
CODE:
export class Router {
    constructor();
    readonly componentInputBindingEnabled: boolean;
    config: Routes;
    createUrlTree(commands: any[], navigationExtras?: UrlCreationOptions): UrlTree;
    dispose(): void;
    get events(): Observable<Event_2>;
    getCurrentNavigation(): Navigation | null;
    initialNavigation(): void;
    isActive(url: string | UrlTree, matchOptions: IsActiveMatchOptions): boolean;
    get lastSuccessfulNavigation(): Navigation | null;
    navigate(commands: any[], extras?: NavigationExtras): Promise<boolean>;
}

----------------------------------------

TITLE: Creating Locale Directory
DESCRIPTION: Specifies the directory structure for storing locale-specific translation files.

LANGUAGE: file
CODE:
src/locale

----------------------------------------

TITLE: Extracting Language Files in Different Formats
DESCRIPTION: Shows how to extract language files in various formats including ARB, JSON, XLIFF 1.2, XLIFF 2, and XMB.

LANGUAGE: bash
CODE:
ng extract-i18n --format=arb
ng extract-i18n --format=json
ng extract-i18n --format=xlf
ng extract-i18n --format=xlf2
ng extract-i18n --format=xmb

----------------------------------------

TITLE: Angular Shim Extension Interface
DESCRIPTION: Shows the NgExtension symbol property used to track metadata for source files in the shim system.

LANGUAGE: typescript
CODE:
interface NgExtension {
  isShim: boolean;
  generator?: ShimGenerator;
  originalReferencedFiles?: FileReference[];
}

----------------------------------------

TITLE: Using NgModel for Two-Way Binding in Angular Template
DESCRIPTION: Shows how to use NgModel directive for two-way data binding on an input element.

LANGUAGE: HTML
CODE:
<input [(ngModel)]="name" #ctrl="ngModel" required>

----------------------------------------

TITLE: Implementing Library Card Component with Content Child in TypeScript
DESCRIPTION: Shows the implementation of LibCardComponent using @ContentChild to reference LibHeaderComponent, which can lead to tree-shaking issues.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'lib-header',
  …,
})
class LibHeaderComponent {}

@Component({
  selector: 'lib-card',
  …,
})
class LibCardComponent {
  @ContentChild(LibHeaderComponent) header: LibHeaderComponent|null = null;
}

----------------------------------------

TITLE: Defining RuntimeErrorCode Enum in TypeScript
DESCRIPTION: Defines an enumeration of runtime error codes used throughout the Angular framework. Each code represents a specific error condition or failure case that can occur during Angular application execution.

LANGUAGE: typescript
CODE:
export const enum RuntimeErrorCode {
    ANIMATION_RENDERER_ASYNC_LOADING_FAILURE = 5300,
    BROWSER_MODULE_ALREADY_LOADED = 5100,
    NO_PLUGIN_FOR_EVENT = 5101,
    ROOT_NODE_NOT_FOUND = -5104,
    SANITIZATION_UNEXPECTED_CTX = 5202,
    SANITIZATION_UNSAFE_RESOURCE_URL = 5201,
    SANITIZATION_UNSAFE_SCRIPT = 5200,
    TESTABILITY_NOT_FOUND = 5103,
    UNEXPECTED_SYNTHETIC_PROPERTY = 5105,
    UNSUPPORTED_EVENT_TARGET = 5102,
    UNSUPPORTED_ZONEJS_INSTANCE = -5000
}

----------------------------------------

TITLE: Configuring Schematics in Angular JSON
DESCRIPTION: Example of configuring schematics options in the angular.json file to set default values for component generation.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-app": {
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        }
      }
    }
  }
}

----------------------------------------

TITLE: Translating Simple Text Node in XLIFF
DESCRIPTION: Demonstrates how to translate a simple text node in an XLIFF file.

LANGUAGE: html
CODE:
<trans-unit id="introductionHeader" datatype="html">
  <source>Hello i18n!</source>
  <target>Bonjour i18n !</target>
</trans-unit>

----------------------------------------

TITLE: Converting *ngIf to New Control Flow Syntax in Angular v17
DESCRIPTION: Example showing the migration from the traditional *ngIf directive to the new @if block syntax in Angular component templates. The migration maintains the same functionality while adopting the more modern syntax pattern.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  template: `<div><span *ngIf="show">Content here</span></div>`
})
export class MyComp {
  show = false;
}

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  template: `<div>@if (show) {<span>Content here</span>}</div>`
})
export class MyComp {
  show = false
}

----------------------------------------

TITLE: Defining Basic Library Card Component Structure in HTML
DESCRIPTION: Demonstrates the basic structure of a library card component with an optional header in HTML.

LANGUAGE: html
CODE:
<lib-card>;
  <lib-header>…</lib-header>;
</lib-card>;

----------------------------------------

TITLE: Basic Component Selector Definition in Angular
DESCRIPTION: Demonstrates how to define a basic component selector using the @Component decorator.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'profile-photo',
  ...
})
export class ProfilePhoto { }

----------------------------------------

TITLE: Defining Angular Runtime Error Codes Enum in TypeScript
DESCRIPTION: This code snippet defines a TypeScript enum named RuntimeErrorCode. It contains a list of error codes used in Angular for various runtime errors, particularly related to forms and validation. Each error code is associated with a specific numeric value.

LANGUAGE: typescript
CODE:
export const enum RuntimeErrorCode {
    COMPAREWITH_NOT_A_FN = 1201,
    FORM_ARRAY_NAME_MISSING_PARENT = 1054,
    FORM_CONTROL_NAME_INSIDE_MODEL_GROUP = 1051,
    FORM_CONTROL_NAME_MISSING_PARENT = 1050,
    FORM_GROUP_MISSING_INSTANCE = 1052,
    FORM_GROUP_NAME_MISSING_PARENT = 1053,
    MISSING_CONTROL = 1001,
    MISSING_CONTROL_VALUE = 1002,
    NAME_AND_FORM_CONTROL_NAME_MUST_MATCH = 1202,
    NG_MISSING_VALUE_ACCESSOR = -1203,
    NG_VALUE_ACCESSOR_NOT_PROVIDED = 1200,
    NGMODEL_IN_FORM_GROUP = 1350,
    NGMODEL_IN_FORM_GROUP_NAME = 1351,
    NGMODEL_WITHOUT_NAME = 1352,
    NGMODELGROUP_IN_FORM_GROUP = 1353,
    NO_CONTROLS = 1000,
    WRONG_VALIDATOR_RETURN_TYPE = -1101
}

----------------------------------------

TITLE: Defining RuntimeErrorCode Enum in TypeScript for Angular
DESCRIPTION: This code snippet defines an enum called RuntimeErrorCode that contains various error codes used in Angular. These codes represent different types of runtime errors and warnings that can occur in an Angular application.

LANGUAGE: typescript
CODE:
export const enum RuntimeErrorCode {
    EQUALITY_NG_SWITCH_DIFFERENCE = 2001,
    INVALID_INPUT = 2952,
    INVALID_LOADER_ARGUMENTS = 2959,
    INVALID_PIPE_ARGUMENT = 2100,
    INVALID_TO_DATE_CONVERSION = 2302,
    LCP_IMG_MISSING_PRIORITY = 2955,
    LCP_IMG_NGSRC_MODIFIED = 2964,
    MISSING_BUILTIN_LOADER = 2962,
    MISSING_NECESSARY_LOADER = 2963,
    NG_FOR_MISSING_DIFFER = -2200,
    NG_IF_NOT_A_TEMPLATE_REF = 2020,
    OVERSIZED_IMAGE = 2960,
    OVERSIZED_PLACEHOLDER = 2965,
    PARENT_NG_SWITCH_NOT_FOUND = 2000,
    PLACEHOLDER_DIMENSION_LIMIT_EXCEEDED = 2967,
    PRIORITY_IMG_MISSING_PRECONNECT_TAG = 2956,
    REQUIRED_INPUT_MISSING = 2954,
    SUSPICIOUS_DATE_FORMAT = 2300,
    TOO_MANY_PRELOADED_IMAGES = 2961,
    TOO_MANY_PRIORITY_ATTRIBUTES = 2966,
    UNEXPECTED_DEV_MODE_CHECK_IN_PROD_MODE = 2958,
    UNEXPECTED_INPUT_CHANGE = 2953,
    UNEXPECTED_SRC_ATTR = 2950,
    UNEXPECTED_SRCSET_ATTR = 2951,
    UNEXPECTED_TRANSLATION_TYPE = 2302,
    UNKNOWN_DATE_TYPE_VALUE = 2301,
    UNKNOWN_ZONE_WIDTH = 2302
}

----------------------------------------

TITLE: Manual Key Event Filtering in Angular
DESCRIPTION: Demonstrates how to manually filter keyboard events for specific keys using conditional logic in the event handler.

LANGUAGE: angular-ts
CODE:
@Component({
  template: `
    <input type="text" (keyup)="updateField($event)" />
  `,
  ...
})
export class AppComponent {
  updateField(event: KeyboardEvent): void {
    if (event.key === 'Enter') {
      console.log('The user pressed enter in the text field.');
    }
  }
}

----------------------------------------

TITLE: French Locale Messages
DESCRIPTION: Shows translation units from a French locale file using XLF format.

LANGUAGE: markup
CODE:
<!-- French locale messages from messages.fr.xlf -->

----------------------------------------

TITLE: Combined Element and Attribute Selector
DESCRIPTION: Shows how to combine element and attribute selectors for more specific component targeting.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'button[type="reset"]',
  ...
})
export class ResetButton { }

----------------------------------------

TITLE: Rebuilding and Serving Updated Angular App
DESCRIPTION: These commands rebuild the Angular application after making changes and serve it again using http-server for testing updates with the service worker.

LANGUAGE: shell
CODE:
ng build
npx http-server -p 8080 -c-1 dist/<project-name>/browser

----------------------------------------

TITLE: Defining HTTP Testing API in TypeScript for Angular
DESCRIPTION: This code snippet defines the API for HTTP testing in Angular. It includes imports, class definitions for HttpClientTestingModule, HttpTestingController, and TestRequest, as well as interfaces and functions for HTTP testing utilities.

LANGUAGE: typescript
CODE:
import { HttpEvent } from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import * as i0 from '@angular/core';
import * as i1 from '@angular/common/http';
import { Observer } from 'rxjs';
import { Provider } from '@angular/core';

// @public @deprecated
export class HttpClientTestingModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<HttpClientTestingModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<HttpClientTestingModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<HttpClientTestingModule, never, [typeof i1.HttpClientModule], never>;
}

// @public
export abstract class HttpTestingController {
    abstract expectNone(url: string, description?: string): void;
    abstract expectNone(params: RequestMatch, description?: string): void;
    abstract expectNone(matchFn: (req: HttpRequest<any>) => boolean, description?: string): void;
    abstract expectNone(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): void;
    abstract expectOne(url: string, description?: string): TestRequest;
    abstract expectOne(params: RequestMatch, description?: string): TestRequest;
    abstract expectOne(matchFn: (req: HttpRequest<any>) => boolean, description?: string): TestRequest;
    abstract expectOne(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;
    abstract match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[];
    abstract verify(opts?: {
        ignoreCancelled?: boolean;
    }): void;
}

// @public (undocumented)
export function provideHttpClientTesting(): Provider[];

// @public
export interface RequestMatch {
    // (undocumented)
    method?: string;
    // (undocumented)
    url?: string;
}

// @public
export class TestRequest {
    constructor(request: HttpRequest<any>, observer: Observer<HttpEvent<any>>);
    get cancelled(): boolean;
    // @deprecated
    error(error: ErrorEvent, opts?: TestRequestErrorOptions): void;
    error(error: ProgressEvent, opts?: TestRequestErrorOptions): void;
    event(event: HttpEvent<any>): void;
    flush(body: ArrayBuffer | Blob | boolean | string | number | Object | (boolean | string | number | Object | null)[] | null, opts?: {
        headers?: HttpHeaders | {
            [name: string]: string | string[];
        };
        status?: number;
        statusText?: string;
    }): void;
    // (undocumented)
    request: HttpRequest<any>;
}

----------------------------------------

TITLE: Implementing Form Data Submission Service in Angular
DESCRIPTION: Adds a method to the housing service that handles form data submission by logging it to the console.

LANGUAGE: typescript
CODE:
submitApplication(firstName: string, lastName: string, email: string) {
    console.log(`Homes application received: firstName: ${firstName}, lastName: ${lastName}, email: ${email}.`);
}

----------------------------------------

TITLE: Text Whitespace Example - Browser Result
DESCRIPTION: Example showing how multiple spaces are collapsed to a single space in the browser.

LANGUAGE: angular-html
CODE:
<!-- What shows up in the browser -->
<p>Hello world</p>

----------------------------------------

TITLE: Component After Cleanup Migration
DESCRIPTION: The same component after the cleanup migration has removed unused imports

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  template: 'Hello',
  imports: [],
})
export class MyComp {}

----------------------------------------

TITLE: Overriding Lifecycle Methods in Angular TypeScript
DESCRIPTION: Demonstrates how to override lifecycle methods from a base class while preserving the base class's implementation using super.

LANGUAGE: typescript
CODE:
@Component({ ... })
export class ListboxBase {
  protected isInitialized = false;
  ngOnInit() {
    this.isInitialized = true;
  }
}

@Component({ ... })
export class CustomListbox extends ListboxBase {
  override ngOnInit() {
    super.ngOnInit();
    /* ... */
  }
}

----------------------------------------

TITLE: Creating New Angular Application with Routing
DESCRIPTION: Creates a new Angular application with routing configuration enabled using the Angular CLI.

LANGUAGE: shell
CODE:
ng new my-app --routing

----------------------------------------

TITLE: Defining UpgradeComponent Class in TypeScript
DESCRIPTION: This class represents an upgraded AngularJS component for use in Angular. It implements various lifecycle hooks.

LANGUAGE: typescript
CODE:
export class UpgradeComponent implements OnInit, OnChanges, DoCheck, OnDestroy {
    constructor(name: string, elementRef: ElementRef, injector: Injector);
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    static ɵdir: i0.ɵɵDirectiveDeclaration<UpgradeComponent, never, never, {}, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<UpgradeComponent, never>;
}

----------------------------------------

TITLE: Structural Directive Shorthand Syntax in Angular HTML
DESCRIPTION: Demonstrates the shorthand syntax for applying a structural directive directly to an element using the asterisk (*) prefix. This example uses the 'select' directive to fetch and display data.

LANGUAGE: html
CODE:
<p *select="let data from source">The data is: {{data}}</p>

----------------------------------------

TITLE: Angular Resource Cards Component Structure
DESCRIPTION: HTML component structure using custom docs-card elements to display various Angular learning resources and links. Includes cards for Angular overview, roadmap, playground, and YouTube course.

LANGUAGE: html
CODE:
<docs-card-container>
  <docs-card title="What is Angular?" href="overview">
  Angular is the web development framework for building modern apps!
  </docs-card>
  <docs-card title="Angular's Roadmap" href="roadmap">
  Read about Angular's open source roadmap including current, future and accomplished projects.
  </docs-card>
  <docs-card title="Playground" href="playground" link="Start playing">
  Play with Angular in your browser!
  </docs-card>
  <docs-card title="Angular YouTube Course" href="https://youtube.com/playlist?list=PL1w1q3fL4pmj9k1FrJ3Pe91EPub2_h4jF" link="Start learning">
  Check out the official Angular YouTube channel for videos, courses and more!
  </docs-card>
</docs-card-container>

----------------------------------------

TITLE: Defining RouterUpgradeInitializer in TypeScript for Angular Router Upgrade
DESCRIPTION: Declares a constant RouterUpgradeInitializer with an InjectionToken for component reference callbacks, a multi-provider flag, a factory function using UpgradeModule, and UpgradeModule as a dependency.

LANGUAGE: typescript
CODE:
export const RouterUpgradeInitializer: {
    provide: InjectionToken<readonly ((compRef: ComponentRef<any>) => void)[]>;
    multi: boolean;
    useFactory: (ngUpgrade: UpgradeModule) => () => void;
    deps: (typeof UpgradeModule)[];
};

----------------------------------------

TITLE: ESLint Comment Example
DESCRIPTION: References a TypeScript file containing ESLint-related comments.

LANGUAGE: typescript
CODE:
// File reference: example-with-eslint-comment.ts

----------------------------------------

TITLE: Template Compilation Output
DESCRIPTION: Shows how the Angular compiler transforms i18n-marked template text into $localize tagged strings.

LANGUAGE: typescript
CODE:
ɵɵelementStart(0, "h1"); //  <h1>
ɵɵi18n(1, $localize`Hello, World!`); //  Hello, World!
ɵɵelementEnd(); //  </h1>

----------------------------------------

TITLE: Injecting a Service in Angular Component
DESCRIPTION: This snippet shows how to inject a service into an Angular component using the inject() function. It demonstrates injecting the PetRosterService into a PetCareDashboardComponent.

LANGUAGE: typescript
CODE:
@Component({...})
class PetCareDashboardComponent {
    petRosterService = inject(PetRosterService);
}

----------------------------------------

TITLE: Committing and Pushing Angular DevTools Version Bump
DESCRIPTION: These commands create a new branch, commit the version bump changes, and push the branch for creating a pull request.

LANGUAGE: shell
CODE:
git checkout -b devtools-release
git add . && git commit -m "release: bump Angular DevTools version to 1.0.10"
git push -u origin devtools-release

----------------------------------------

TITLE: Implementing Wildcard State Transitions in Angular
DESCRIPTION: Demonstrates how to use wildcard (*) state transitions to handle multiple animation states efficiently. The code shows transitions between open and closed states with different timing configurations.

LANGUAGE: typescript
CODE:
trigger('openClose', [
  state('open', style({
    height: '200px',
    opacity: 1,
    backgroundColor: 'yellow'
  })),
  state('closed', style({
    height: '100px',
    opacity: 0.5,
    backgroundColor: 'green'
  })),
  transition('* => closed', [
    animate('1s')
  ]),
  transition('* => open', [
    animate('0.5s')
  ])
])

----------------------------------------

TITLE: Displaying Long Stack Trace with Zone.js in Angular
DESCRIPTION: This snippet demonstrates how to use zone.js and long-stack-trace-zone.js to display long stack trace information in HTML. It provides a link to a StackBlitz demo for practical implementation.

LANGUAGE: javascript
CODE:
use `zone.js` and `long-stack-trace-zone.js` to display longStackTrace information in html.

----------------------------------------

TITLE: Adding Minimum Duration to Loading State
DESCRIPTION: Shows how to set a minimum duration for the loading state to prevent flickering.

LANGUAGE: angular-html
CODE:
@defer {
  <comments />
} @placeholder {
  <p>Future comments</p>
} @loading (minimum 2s) {
  <p>Loading comments...</p>
}

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to execute end-to-end tests using Protractor testing framework.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Describing Angular CLI Help JSON Generation Process in Markdown
DESCRIPTION: This markdown snippet explains the purpose of the script, which is to update Angular CLI help JSON files. These files are used to generate the CLI documentation pages on angular.dev.

LANGUAGE: markdown
CODE:
# Generating data for `angular.dev/cli`

This script updates the Angular CLI help JSON files stored in `adev/src/content/cli/help`. This files are used to generate the [angular.dev CLI](https://angular.dev/cli) pages.

----------------------------------------

TITLE: Demonstrating Unpatched 'on' Property Behavior in TypeScript
DESCRIPTION: This TypeScript snippet illustrates the behavior of an unpatched 'on' property (onclick) when set within a child zone. The callback will be executed in the root zone regardless of where it was set.

LANGUAGE: typescript
CODE:
Zone.current.fork({ name: 'child' }).run(() => {
  document.body.onclick = () => {
    console.log(Zone.current); // <root>
  };
});

----------------------------------------

TITLE: Binding MouseOver Event in Angular Template
DESCRIPTION: Shows how to bind a mouseover event to a section element in an Angular template using parentheses syntax.

LANGUAGE: angular-html
CODE:
<section (mouseover)="onMouseOver()">

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Runs the Angular development server and provides the local URL for accessing the application. The server will automatically reload when source files are changed.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Helpful Angular Callout Component
DESCRIPTION: Implementation of a helpful-style docs-callout component for displaying informative or assistance-related content.

LANGUAGE: html
CODE:
<docs-callout helpful title="Callout title for helpful">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</docs-callout>

----------------------------------------

TITLE: Creating Release Build and PR
DESCRIPTION: Commands for creating a dry run build and preparing a pull request for the release

LANGUAGE: bash
CODE:
yarn bazel --output_base=$(mktemp -d) run //packages/zone.js:npm_package.pack --workspace_status_command="echo STABLE_PROJECT_VERSION $VERSION"

git checkout -b "release_${TAG}"
git add packages/zone.js/CHANGELOG.md packages/zone.js/package.json
git commit -m "release: cut the ${TAG} release"
git push origin "release_${TAG}"

----------------------------------------

TITLE: Implementing Form Submission Handler
DESCRIPTION: Adds a method to handle form submission events and process form data.

LANGUAGE: typescript
CODE:
submitApplication() {
  this.housingService.submitApplication(
    this.applyForm.value.firstName ?? '',
    this.applyForm.value.lastName ?? '',
    this.applyForm.value.email ?? ''
  );
}

----------------------------------------

TITLE: Configuring In-Memory TS Host Tracing in Angular's tsconfig.json
DESCRIPTION: Shows how to configure performance tracing for in-memory compilation scenarios by prefixing the 'tracePerformance' option value with 'ts:'. This instructs Angular to use the TypeScript compiler host's 'writeFile' method for trace output.

LANGUAGE: json
CODE:
{
  "angularCompilerOptions": {
    "tracePerformance": "ts:path/to/trace/output.json"
  }
}

----------------------------------------

TITLE: Implementing Angular Docs Card Components with Various Configurations
DESCRIPTION: Examples showing three different implementations of the docs-card component: a basic card with just title and content, a card with a link, and a card displaying an image. Each example demonstrates different properties of the docs-card component including title, link, href, and imgSrc attributes.

LANGUAGE: html
CODE:
<docs-card title="No Link Card">Card Content</docs-card>
<docs-card title="Link Card" link="Try It Now" href="in/app/link">
  Card Content
</docs-card>
<docs-card title="Image Card" imgSrc="adev/shared-docs/pipeline/guides/testing/docs-card/angular.svg"></docs-card>

----------------------------------------

TITLE: Importing HttpClientInMemoryWebApiModule in Angular AppModule
DESCRIPTION: Shows how to import and configure the HttpClientInMemoryWebApiModule in the root AppModule of an Angular application.

LANGUAGE: TypeScript
CODE:
import { HttpClientModule } from '@angular/common/http';
import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';

import { InMemHeroService } from '../app/hero.service';

@NgModule({
 imports: [
   HttpClientModule,
   HttpClientInMemoryWebApiModule.forRoot(InMemHeroService),
   ...
 ],
 ...
})
export class AppModule { ... }

----------------------------------------

TITLE: Adding RouterLink Directive in Angular Template
DESCRIPTION: Adds an anchor tag with a routerLink directive to enable dynamic navigation in the housing-location component.

LANGUAGE: typescript
CODE:
<a [routerLink]="['/details', housingLocation.id]">Learn More</a>

----------------------------------------

TITLE: Initiating Angular Benchmark Comparison in Pull Requests
DESCRIPTION: These commands can be used as comments in a pull request to start a benchmark comparison. The first compares against the main branch, while the second compares against a specific commit. An explicit benchmark target must be provided.

LANGUAGE: bash
CODE:
/benchmark-compare main //modules/benchmarks/src/expanding_rows:perf_chromium

LANGUAGE: bash
CODE:
/benchmark-compare <other-sha> //modules/benchmarks/src/expanding_rows:perf_chromium

----------------------------------------

TITLE: ZoneAwareError Basic Usage
DESCRIPTION: Demonstrates the basic usage of ZoneAwareError which handles 'this' context issues when creating errors.

LANGUAGE: javascript
CODE:
const error = Error();

----------------------------------------

TITLE: ZoneAwareError Basic Usage
DESCRIPTION: Demonstrates the basic usage of ZoneAwareError which handles 'this' context issues when creating errors.

LANGUAGE: javascript
CODE:
const error = Error();

----------------------------------------

TITLE: Running Angular Symbol Extraction Tests
DESCRIPTION: Commands for checking and updating the gold files containing expected symbols that should be retained after tree shaking.

LANGUAGE: bash
CODE:
yarn run symbol-extractor:check
yarn run symbol-extractor:update

----------------------------------------

TITLE: Implementing Router Outlet in Angular Component Template
DESCRIPTION: This template code demonstrates how to use the router-outlet directive and add a link back to the home page in an Angular component.

LANGUAGE: typescript
CODE:
template: `
  <main>
    <a [routerLink]="['/']">
      <header class="brand-name">
        <img class="brand-logo" src="/assets/logo.svg" alt="logo" aria-hidden="true">
      </header>
    </a>
    <section class="content">
      <router-outlet></router-outlet>
    </section>
  </main>
`,

----------------------------------------

TITLE: Defining BrowserTestingModule and platformBrowserTesting in Angular
DESCRIPTION: This snippet defines the BrowserTestingModule class and the platformBrowserTesting function. The BrowserTestingModule is an Angular module with internal Angular compiler metadata. The platformBrowserTesting function creates a PlatformRef for browser testing with optional extra providers.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import * as i1 from '@angular/platform-browser';
import { StaticProvider } from '@angular/core';

// @public
export class BrowserTestingModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<BrowserTestingModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<BrowserTestingModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserTestingModule, never, never, [typeof i1.BrowserModule]>;
}

// @public
export const platformBrowserTesting: (extraProviders?: StaticProvider[]) => i0.PlatformRef;

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Creating InMemoryDbService in TypeScript
DESCRIPTION: Demonstrates how to create a basic InMemoryDbService class that implements the createDb method to return a database object with a heroes collection.

LANGUAGE: TypeScript
CODE:
import { InMemoryDbService } from 'angular-in-memory-web-api';

export class InMemHeroService implements InMemoryDbService {
  createDb() {
    let heroes = [
      { id: 1, name: 'Windstorm' },
      { id: 2, name: 'Bombasto' },
      { id: 3, name: 'Magneta' },
      { id: 4, name: 'Tornado' }
    ];
    return {heroes};
  }
}

----------------------------------------

TITLE: Inject Function Implementation in Angular
DESCRIPTION: Pseudo-implementation of the inject function, showing how it handles special cases like injecting the Injector itself.

LANGUAGE: typescript
CODE:
function inject(token: any): any {
  let injectableDef;
  if (typeof token === 'function' && injectableDef = token.ɵprov) {
    const provideIn = injectableDef.provideIn;
   if (provideIn === '__node_injector__') {
      // if we are injecting `Injector` than create a wrapper object around the inject but which
      // is bound to the current node.
      return createInjector();
    }
  }
  return lookupTokenInExpando(token);
}

----------------------------------------

TITLE: Markdown Image Link Syntax
DESCRIPTION: Demonstrates how to embed images in markdown using both remote and local file paths. Shows examples of adding alt text and title attributes.

LANGUAGE: markdown
CODE:
![New Logo!](https://angular.dev/favicon.ico 'Our new icon')\n![New Logo!](./some-image.png 'Local Image')

----------------------------------------

TITLE: Defining Schematics Collection Schema in JSON
DESCRIPTION: This snippet shows how to define the initial schema for a schematics collection in a collection.json file. It includes the schema path and describes the ng-add schematic.

LANGUAGE: json
CODE:
{
  "$schema": "../../../node_modules/@angular-devkit/schematics/collection-schema.json",
  "schematics": {
    "ng-add": {
      "description": "Add my-lib to the project.",
      "factory": "./ng-add/index#ngAdd"
    }
  }
}

----------------------------------------

TITLE: Basic $localize Usage in TypeScript
DESCRIPTION: Demonstrates the basic usage of $localize template literal tag for marking text that needs translation.

LANGUAGE: typescript
CODE:
const message = $localize`Hello, World!`;

----------------------------------------

TITLE: Generating Closure-Compatible I18N Messages
DESCRIPTION: Example of generating i18n messages compatible with Closure Compiler's goog.getMsg() function.

LANGUAGE: typescript
CODE:
/**
 * @desc Some description.
 */
let MSG_div = goog.getMsg(`{$COUNT} is rendered as: {$START_BOLD_TEXT_1}{{$COUNT}, plural,
      =0 {no {$START_BOLD_TEXT}emails{$CLOSE_BOLD_TEXT}!}
      =1 {one {$START_ITALIC_TEXT}email{$CLOSE_ITALIC_TEXT}}
      other {{$COUNT} {$START_TAG_SPAN}emails{$CLOSE_TAG_SPAN}}
    }{$END_BOLD_TEXT_1}`, {
  COUNT: '�0�',
  START_BOLD_TEXT_1: '�*3:1��#1:1�',
  END_BOLD_TEXT_1: '�/#1:1��/*3:1�',
  START_BOLD_TEXT: '<b title="none">',
  CLOSE_BOLD_TEXT: '</b>',
  START_ITALIC_TEXT: '<i>',
  CLOSE_ITALIC_TEXT: '</i>',
  START_TAG_SPAN: '<span title="�0:1�">',
  CLOSE_TAG_SPAN: '</span>'
});

----------------------------------------

TITLE: Converting Angular Components to Standalone - Final State
DESCRIPTION: Example showing the converted standalone components, directives, and pipes with proper imports and standalone configuration.

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [CommonModule, MyComp, MyDir, MyPipe]
})
export class AppModule {}

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-comp',
  template: '<div my-dir *ngIf="showGreeting">{{ "Hello" | myPipe }}</div>',
  imports: [NgIf, MyDir, MyPipe]
})
export class MyComp {
  public showGreeting = true;
}

LANGUAGE: typescript
CODE:
@Directive({selector: '[my-dir]'})
export class MyDir {}

LANGUAGE: typescript
CODE:
@Pipe({name: 'myPipe', pure: true})
export class MyPipe {}

----------------------------------------

TITLE: Implementing Exponential Strength Pipe in Angular
DESCRIPTION: Example of a pure pipe that calculates exponential values. The pipe executes whenever the input value or exponent changes.

LANGUAGE: typescript
CODE:
export class ExponentialStrengthPipe implements PipeTransform {
  transform(value: number, exponent: number): number {
    return Math.pow(value, isNaN(exponent) ? 1 : exponent);
  }
}

----------------------------------------

TITLE: Generating ViewEngine-Compatible I18N Messages
DESCRIPTION: Example of generating i18n messages compatible with ViewEngine for backwards compatibility.

LANGUAGE: typescript
CODE:
/**
 * @desc [BACKUP_MESSAGE_ID:3639715378617754400] ICU extracted form: Some description.
 */
const MSG_div_icu = goog.getMsg(`{VAR_PLURAL, plural,
    =0 {no {$START_BOLD_TEXT}emails{$CLOSE_BOLD_TEXT}!}
    =1 {one {$START_ITALIC_TEXT}email{$CLOSE_ITALIC_TEXT}}
    other {{$count} {$START_TAG_SPAN}emails{$CLOSE_TAG_SPAN}}
  }`, {
    START_BOLD_TEXT: '<b title="none">',
    CLOSE_BOLD_TEXT: '</b>',
    START_ITALIC_TEXT: '<i>',
    CLOSE_ITALIC_TEXT: '</i>',
    COUNT: '�0:1�',
    START_TAG_SPAN: '<span title="�0:1�">',
    CLOSE_TAG_SPAN: '</span>'
  }
);

/**
 * @desc [BACKUP_MESSAGE_ID:2919330615509803611] Some description.
 */
const MSG_div_raw = goog.getMsg('{$COUNT_1} is rendered as: {$START_BOLD_TEXT_1}{$ICU}{$END_BOLD_TEXT_1}', {
  ICU: MSG_div_icu,
  COUNT: '�0:1�',
  START_BOLD_TEXT_1: '�*3:1��#1�',
  END_BOLD_TEXT_1: '�/#1:1��/*3:1�',
});
const MSG_div = i18nPostprocess(MSG_div_raw, {VAR_PLURAL: '�0:1�'});

----------------------------------------

TITLE: Running Angular Linker Tests with Bazel
DESCRIPTION: Command to execute the unit tests for the Angular Linker package using Bazel build system. The tests are located in the compiler-cli/linker/test directory.

LANGUAGE: bash
CODE:
yarn bazel test //packages/compiler-cli/linker/test

----------------------------------------

TITLE: Converting Constructor-based Injection to Inject Function in Angular
DESCRIPTION: Demonstrates the transformation of a component class from using constructor-based dependency injection to using the inject function. It shows how to handle services and tokens, including optional injections.

LANGUAGE: typescript
CODE:
import { Component, Inject, Optional } from '@angular/core';
import { MyService } from './service';
import { DI_TOKEN } from './token';

@Component({})
export class MyComp {
  constructor(private service: MyService, @Inject(TOKEN) @Optional() readonly token: string) {}
}

LANGUAGE: typescript
CODE:
import { Component, inject } from '@angular/core';
import { MyService } from './service';
import { DI_TOKEN } from './token';

@Component({})
export class MyComp {
  private service = inject(MyService);
  readonly token = inject(DI_TOKEN, { optional: true });
}

----------------------------------------

TITLE: Creating and Updating Writable Signals in TypeScript
DESCRIPTION: Demonstrates how to create a writable signal using the 'signal()' function and update its value using 'set' and 'update' methods.

LANGUAGE: typescript
CODE:
const counter = signal(0);

counter.set(2);
counter.update(count => count + 1);

----------------------------------------

TITLE: Using Non-Deprecated Injection Syntax in Angular TypeScript
DESCRIPTION: This snippet shows the updated syntax for injection in Angular, replacing the deprecated InjectFlags with an object literal. It demonstrates how to inject ElementRef with optional, host, and skipSelf options.

LANGUAGE: typescript
CODE:
import { inject, Directive, ElementRef } from '@angular/core';

@Directive()
export class Dir {
  element = inject(ElementRef, { optional: true, host: true, skipSelf: true });
}

----------------------------------------

TITLE: Defining Service Worker API in TypeScript
DESCRIPTION: This code snippet defines the entire API for Angular's service worker module. It includes interfaces for various events, classes for push notifications and updates, and functions for providing and registering service workers.

LANGUAGE: typescript
CODE:
import { EnvironmentProviders } from '@angular/core';
import * as i0 from '@angular/core';
import { ModuleWithProviders } from '@angular/core';
import { Observable } from 'rxjs';

export interface NoNewVersionDetectedEvent {
    type: 'NO_NEW_VERSION_DETECTED';
    version: {
        hash: string;
        appData?: Object;
    };
}

export function provideServiceWorker(script: string, options?: SwRegistrationOptions): EnvironmentProviders;

export class ServiceWorkerModule {
    static register(script: string, options?: SwRegistrationOptions): ModuleWithProviders<ServiceWorkerModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServiceWorkerModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<ServiceWorkerModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<ServiceWorkerModule, never, never, never>;
}

export class SwPush {
    constructor(sw: NgswCommChannel);
    get isEnabled(): boolean;
    readonly messages: Observable<object>;
    readonly notificationClicks: Observable<{
        action: string;
        notification: NotificationOptions & {
            title: string;
        };
    }>;
    requestSubscription(options: {
        serverPublicKey: string;
    }): Promise<PushSubscription>;
    readonly subscription: Observable<PushSubscription | null>;
    unsubscribe(): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SwPush, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SwPush>;
}

export abstract class SwRegistrationOptions {
    enabled?: boolean;
    registrationStrategy?: string | (() => Observable<unknown>);
    scope?: string;
}

export class SwUpdate {
    constructor(sw: NgswCommChannel);
    activateUpdate(): Promise<boolean>;
    checkForUpdate(): Promise<boolean>;
    get isEnabled(): boolean;
    readonly unrecoverable: Observable<UnrecoverableStateEvent>;
    readonly versionUpdates: Observable<VersionEvent>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SwUpdate, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SwUpdate>;
}

export interface UnrecoverableStateEvent {
    reason: string;
    type: 'UNRECOVERABLE_STATE';
}

export interface VersionDetectedEvent {
    type: 'VERSION_DETECTED';
    version: {
        hash: string;
        appData?: object;
    };
}

export type VersionEvent = VersionDetectedEvent | VersionInstallationFailedEvent | VersionReadyEvent | NoNewVersionDetectedEvent;

export interface VersionInstallationFailedEvent {
    error: string;
    type: 'VERSION_INSTALLATION_FAILED';
    version: {
        hash: string;
        appData?: object;
    };
}

export interface VersionReadyEvent {
    currentVersion: {
        hash: string;
        appData?: object;
    };
    latestVersion: {
        hash: string;
        appData?: object;
    };
    type: 'VERSION_READY';
}

----------------------------------------

TITLE: Defining Public API for @angular/upgrade_static_testing in TypeScript
DESCRIPTION: This code snippet defines the public API for the @angular/upgrade_static_testing package. It includes two functions: createAngularJSTestingModule for creating an AngularJS testing module, and createAngularTestingModule for creating an Angular testing module. Both functions are designed to facilitate testing in hybrid Angular/AngularJS applications.

LANGUAGE: typescript
CODE:
import { Type } from '@angular/core';

// @public
export function createAngularJSTestingModule(angularModules: any[]): string;

// @public
export function createAngularTestingModule(angularJSModules: string[], strictDi?: boolean): Type<any>;

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Loading Gulp Task Using Helper
DESCRIPTION: Example demonstrating how to load a task file using the loadTask helper function. Shows loading a single task from a file and registering it with gulp.

LANGUAGE: javascript
CODE:
gulp.task('build.sh', loadTask('build'));

----------------------------------------

TITLE: Defining MockAnimationDriver Class in TypeScript for Angular Animations Testing
DESCRIPTION: This class implements the AnimationDriver interface and provides mock implementations for animation-related methods. It includes a static log property to track AnimationPlayer instances.

LANGUAGE: typescript
CODE:
export class MockAnimationDriver implements AnimationDriver {
    static log: AnimationPlayer[];
    animate(element: any, keyframes: Array<ɵStyleDataMap>, duration: number, delay: number, easing: string, previousPlayers?: any[]): MockAnimationPlayer;
    computeStyle(element: any, prop: string, defaultValue?: string): string;
    containsElement(elm1: any, elm2: any): boolean;
    getParentElement(element: unknown): unknown;
    query(element: any, selector: string, multi: boolean): any[];
    validateAnimatableStyleProperty(prop: string): boolean;
    validateStyleProperty(prop: string): boolean;
}

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Executes unit tests for the Angular project using the Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Using Hydrate on Interaction Trigger in Angular Template
DESCRIPTION: This snippet illustrates how to use the 'hydrate on interaction' trigger to load and hydrate content when the user interacts with the specified element.

LANGUAGE: angular-html
CODE:
@defer (hydrate on interaction) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Running Angular Inject Migration Command
DESCRIPTION: Command to generate and run the inject migration in an Angular project.

LANGUAGE: bash
CODE:
ng generate @angular/core:inject-migration

----------------------------------------

TITLE: Using Hydrate on Idle Trigger in Angular Template
DESCRIPTION: This snippet shows how to use the 'hydrate on idle' trigger in an Angular template to defer the loading and hydration of a large component until the browser is idle.

LANGUAGE: angular-html
CODE:
@defer (hydrate on idle) {
  <large-cmp />
} @placeholder {
  <div>Large component placeholder</div>
}

----------------------------------------

TITLE: Using Untracked in Effects in TypeScript
DESCRIPTION: Demonstrates how to use 'untracked' to prevent certain signals from being tracked as dependencies within an effect.

LANGUAGE: typescript
CODE:
const counter = signal(0);
const untrackedCounter = signal(0);
effect(() => console.log(`counter: ${counter()}, untrackedCounter: ${untracked(untrackedCounter)}`));
// counter: 0, untrackedCounter: 0

untrackedCounter.set(1);
// effect does not rerun because untrackedCounter was untracked 

counter.set(1);
// counter: 1, untrackedCounter: 1

----------------------------------------

TITLE: Required Signal Inputs
DESCRIPTION: Shows how to define required Signal inputs with type constraints

LANGUAGE: typescript
CODE:
class Required {
  readonly simpleInput = input.required<string>();
}