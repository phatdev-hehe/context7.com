TITLE: Implementing Basic Command in Java
DESCRIPTION: Demonstrates how to create a simple command using the Command interface and lambda expression. The command returns a success value and sends feedback to the command executor.

LANGUAGE: java
CODE:
Command<ServerCommandSource> command = context -> {
    return 0;
};

----------------------------------------

TITLE: Initializing Fabric Mod Entrypoint in Java
DESCRIPTION: Example of a main entrypoint class implementing ModInitializer that logs a message when the game starts. This represents the core initialization point for common mod code.

LANGUAGE: java
CODE:
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.fabricmc.api.ModInitializer;

public class FabricDocsReference implements ModInitializer {
    public static final Logger LOGGER = LoggerFactory.getLogger("fabric-docs-reference");

    @Override
    public void onInitialize() {
        LOGGER.info("Hello from Fabric Docs Reference!");
    }
}

----------------------------------------

TITLE: Configuring Fabric Mod JSON
DESCRIPTION: Configuration file (fabric.mod.json) that defines essential mod metadata including ID, name, environment, entrypoints, dependencies, and mixins.

LANGUAGE: json
CODE:
{"id": "modid", "name": "Mod Name", "environment": "*", "entrypoints": {"main": ["package.MainClass"], "client": ["package.ClientClass"]}, "depends": {"fabricloader": ">=${loader_version}"}, "mixins": ["modid.mixins.json"]}

----------------------------------------

TITLE: Creating Counter Block Entity Class in Java
DESCRIPTION: Defines a custom BlockEntity class that extends BlockEntity to store click count data. Includes constructor and basic entity setup.

LANGUAGE: java
CODE:
public class CounterBlockEntity extends BlockEntity {
    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY =
            Registry.register(Registries.BLOCK_ENTITY_TYPE, new Identifier("fabric-docs-reference", "counter"),
                    FabricBlockEntityTypeBuilder.create(CounterBlockEntity::new, ModBlocks.COUNTER_BLOCK).build());

    public CounterBlockEntity(BlockPos pos, BlockState state) {
        super(COUNTER_BLOCK_ENTITY, pos, state);
    }
}

----------------------------------------

TITLE: Simple Fabric Mod Entrypoint Example (Java)
DESCRIPTION: Example of a basic main entrypoint class that implements ModInitializer and logs a message when the game starts.

LANGUAGE: java
CODE:
@[code lang=java transcludeWith=#entrypoint](@/reference/latest/src/main/java/com/example/docs/FabricDocsReference.java)

----------------------------------------

TITLE: Creating Data Generation Entrypoint Class (Java)
DESCRIPTION: This code defines the entrypoint class for data generation in a Fabric mod. It implements FabricDataGenerator.Service and provides a method to initialize the data generator.

LANGUAGE: java
CODE:
@[code lang=java transcludeWith=:::datagen-setup:generator](@/reference/latest/src/client/java/com/example/docs/datagen/FabricDocsReferenceDataGenerator.java)

----------------------------------------

TITLE: Creating a Custom Screen Class in Java for Fabric Mods
DESCRIPTION: This code snippet demonstrates how to create a custom screen class by extending the Screen class. It shows how to initialize widgets, handle rendering, and implement a close button functionality.

LANGUAGE: java
CODE:
public class CustomScreen extends Screen {
    public CustomScreen(Text title) {
        super(title);
    }

    @Override
    protected void init() {
        super.init();

        int x = width / 2 - 100; // Center of the screen
        int y = height / 2 - 20; // Slightly above center

        // Add a label
        addDrawableChild(new TextWidget(x, y - 20, 200, 20, Text.literal("This is a custom screen!"), textRenderer));

        // Add a button
        addDrawableChild(ButtonWidget.builder(Text.literal("Close"), button -> close())
                .dimensions(x, y, 200, 20)
                .build());
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        renderBackground(context, mouseX, mouseY, delta);
        super.render(context, mouseX, mouseY, delta);
    }
}

----------------------------------------

TITLE: Implementing Custom Enchantment Effect in Java
DESCRIPTION: This code snippet demonstrates how to create a custom enchantment effect called 'LightningEnchantmentEffect' that strikes the target with lightning based on the enchantment level.

LANGUAGE: java
CODE:
public record LightningEnchantmentEffect() implements EnchantmentEntityEffect {
    public static final Codec<LightningEnchantmentEffect> CODEC = Codec.unit(LightningEnchantmentEffect::new);

    @Override
    public void apply(ServerWorld world, Entity attacker, Entity target, int level, float amount) {
        if (!world.isClient()) {
            for (int i = 0; i < amount; i++) {
                EntityType.LIGHTNING_BOLT.spawn(world, target.getBlockPos(), SpawnReason.TRIGGERED);
            }
        }
    }

    @Override
    public Codec<? extends EnchantmentEffect> getCodec() {
        return CODEC;
    }
}

----------------------------------------

TITLE: Defining a Custom Payload for Client-to-Server Communication
DESCRIPTION: This code defines a custom payload 'GiveGlowingEffectC2SPayload' for sending entity glowing effect requests from client to server. It includes the payload identifier, ID, and codec for serialization.

LANGUAGE: java
CODE:
public record GiveGlowingEffectC2SPayload(int entityId) implements CustomPayload {
    public static final Identifier ID = new Identifier("fabric-docs-reference", "give_glowing_effect");
    public static final CustomPayload.Id<GiveGlowingEffectC2SPayload> TYPE = CustomPayload.id(ID);
    public static final PacketCodec<GiveGlowingEffectC2SPayload> CODEC = PacketCodec.ofRecord(TYPE, GiveGlowingEffectC2SPayload::entityId, GiveGlowingEffectC2SPayload::new, PacketByteBuf.VAR_INT);

    @Override
    public CustomPayload.Id<?> getId() {
        return TYPE;
    }
}

----------------------------------------

TITLE: Poisonous Apple Implementation in Fabric
DESCRIPTION: Creates a custom poisonous apple item that is always edible, acts as a snack, and applies Poison II effect for 6 seconds when consumed.

LANGUAGE: java
CODE:
public static final Item POISONOUS_APPLE = registerItem("poisonous_apple",
    new Item(new Item.Settings()
        .food(new FoodComponent.Builder()
            .alwaysEdible()
            .snack()
            .statusEffect(new StatusEffectInstance(
                StatusEffects.POISON, 120, 1), 1.0f)
            .build())));

----------------------------------------

TITLE: Item Language Translation
DESCRIPTION: Defines the display name translation for the item in English

LANGUAGE: json
CODE:
{
  "item.mod_id.suspicious_substance": "Suspicious Substance"
}

----------------------------------------

TITLE: Implementing a Custom Screen in Java for Fabric
DESCRIPTION: This code snippet demonstrates how to create a custom screen by extending the Screen class. It initializes a button and a label, and handles button clicks to close the screen.

LANGUAGE: java
CODE:
public class CustomScreen extends Screen {
    public CustomScreen(Text title) {
        super(title);
    }

    @Override
    protected void init() {
        super.init();

        int buttonWidth = 200;
        int buttonHeight = 20;

        // Add a button to the center of the screen
        addDrawableChild(ButtonWidget.builder(Text.literal("Close"), button -> {
            // Close the screen when the button is pressed
            this.close();
        }).dimensions(width / 2 - buttonWidth / 2, height / 2 - buttonHeight / 2, buttonWidth, buttonHeight).build());

        // Add a label above the button
        addDrawableChild(new TextWidget(width / 2, height / 2 - 20, buttonWidth, 10, Text.literal("This is a custom screen!"), textRenderer));
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        this.renderBackgroundTexture(context);
        super.render(context, mouseX, mouseY, delta);
    }
}

----------------------------------------

TITLE: Generating Block Drops
DESCRIPTION: Example of generating different types of block drops including self drops and random quantity drops.

LANGUAGE: java
CODE:
// Drop the block itself
addDrop(ModBlocks.TEST_BLOCK);

// Drop a different item
addDrop(ModBlocks.TEST_BLOCK_2, ModItems.TEST_ITEM);

// Drop with random amount
addDrop(ModBlocks.TEST_BLOCK_3, oreDrops(ModBlocks.TEST_BLOCK_3, ModItems.TEST_ITEM));

----------------------------------------

TITLE: Creating Custom Widget Class in Java
DESCRIPTION: Example of creating a custom widget class by extending ClickableWidget. The class implements rendering functionality and handles basic positioning and dimensions.

LANGUAGE: java
CODE:
public class CustomWidget extends ClickableWidget {
    public CustomWidget(int x, int y, int width, int height) {
        super(x, y, width, height);
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        // Draw a simple rectangle
        context.fill(getX(), getY(), getX() + width, getY() + height, 0xFFFFFFFF);
    }
}

----------------------------------------

TITLE: Creating Tool Items in Java
DESCRIPTION: Demonstrates how to create custom tool items using the previously defined tool material and register them with the mod.

LANGUAGE: java
CODE:
public static final Item GUIDITE_SWORD = registerItem("guidite_sword", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new Item.Settings()));
public static final Item GUIDITE_SHOVEL = registerItem("guidite_shovel", new ShovelItem(GuiditeMaterial.INSTANCE, 1.5F, -3.0F, new Item.Settings()));
public static final Item GUIDITE_PICKAXE = registerItem("guidite_pickaxe", new PickaxeItem(GuiditeMaterial.INSTANCE, 1, -2.8F, new Item.Settings()));
public static final Item GUIDITE_AXE = registerItem("guidite_axe", new AxeItem(GuiditeMaterial.INSTANCE, 6.0F, -3.1F, new Item.Settings()));
public static final Item GUIDITE_HOE = registerItem("guidite_hoe", new HoeItem(GuiditeMaterial.INSTANCE, -2, -1.0F, new Item.Settings()));

----------------------------------------

TITLE: Cloning Fabric Example Mod Repository
DESCRIPTION: Shell command to clone the Fabric example mod repository using Git. This creates a new project directory named 'my-mod-project' with the example mod template.

LANGUAGE: shell
CODE:
git clone https://github.com/FabricMC/fabric-example-mod/ my-mod-project

----------------------------------------

TITLE: Creating a Recursive Codec
DESCRIPTION: Shows how to create a recursive codec for a singly-linked list data structure.

LANGUAGE: java
CODE:
Codec<ListNode> codec = Codec.recursive(
  "ListNode", // a name for the codec
  selfCodec -> {
    // Here, `selfCodec` represents the `Codec<ListNode>`, as if it was already constructed
    // This lambda should return the codec we wanted to use from the start,
    // that refers to itself through `selfCodec`
    return RecordCodecBuilder.create(instance ->
      instance.group(
        Codec.INT.fieldOf("value").forGetter(ListNode::value),
         // the `next` field will be handled recursively with the self-codec
        Codecs.createStrictOptionalFieldCodec(selfCodec, "next", null).forGetter(ListNode::next)
      ).apply(instance, ListNode::new)
    );
  }
);

----------------------------------------

TITLE: Item Registration Implementation
DESCRIPTION: Example of registering a specific item using the ModItems registration method with Item.Settings

LANGUAGE: java
CODE:
public static final Item SUSPICIOUS_SUBSTANCE = register("suspicious_substance", new Item.Settings(), Item::new);

----------------------------------------

TITLE: Adding Item to Creative Tab
DESCRIPTION: Shows how to add an item to the ingredients creative tab using Fabric API

LANGUAGE: java
CODE:
ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(content -> {
    content.add(SUSPICIOUS_SUBSTANCE);
});

----------------------------------------

TITLE: BlockPos Deserialization Example
DESCRIPTION: Shows how to handle the DataResult from serialization and perform deserialization back to a BlockPos.

LANGUAGE: java
CODE:
JsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();

// Here we have our json value, which should correspond to `[1, 2, 3]`,
// as that's the format used by the BlockPos codec.
LOGGER.info("Serialized BlockPos: {}", json);

// Now we'll deserialize the JsonElement back into a BlockPos
DataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);

// Again, we'll just grab our value from the result
BlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();

// And we can see that we've successfully serialized and deserialized our BlockPos!
LOGGER.info("Deserialized BlockPos: {}", pos);

----------------------------------------

TITLE: Creating Poisonous Apple Item with Custom Food Component in Java using Fabric
DESCRIPTION: This code creates a 'Poisonous Apple' item with custom food properties. It uses both FoodComponent and ConsumableComponent to make the item always edible and apply a Poison II effect for 6 seconds when consumed.

LANGUAGE: java
CODE:
public static final Item POISONOUS_APPLE = registerItem("poisonous_apple",
    new Item(new Item.Settings()
        .food(new FoodComponent.Builder()
            .alwaysEdible()
            .build())
        .consumable(new ConsumableComponent.Builder()
            .statusEffect(new StatusEffectInstance(StatusEffects.POISON, 6 * 20, 1), 1.0f)
            .build())
    )
);

----------------------------------------

TITLE: Implementing Dynamic Light Level in Java
DESCRIPTION: This Java snippet demonstrates how to set a dynamic light level for a block based on its 'activated' property state.

LANGUAGE: java
CODE:
private static int getLightLevel(BlockState state) {
    return state.get(ACTIVATED) ? 15 : 0;
}

----------------------------------------

TITLE: Creating and Registering Block with Properties
DESCRIPTION: Demonstrates registering a new block with custom properties similar to dirt, including automatic BlockItem creation.

LANGUAGE: json
CODE:
{
  "block.mod_id.condensed_dirt": "Condensed Dirt"
}

----------------------------------------

TITLE: Custom Sheep Shear Event Implementation in Java
DESCRIPTION: Example of implementing a custom event listener that replaces wool drops with diamonds when shearing sheep.

LANGUAGE: java
CODE:
SheepShearCallback.EVENT.register((player, sheep) -> {
    if (!player.getWorld().isClient()) {
        ItemEntity item = new ItemEntity(player.getWorld(), sheep.getX(), sheep.getY(), sheep.getZ(),
                new ItemStack(Items.DIAMOND));
        player.getWorld().spawnEntity(item);
    }
    return ActionResult.SUCCESS;
});

----------------------------------------

TITLE: Fabric Mod Configuration Example (JSON)
DESCRIPTION: Example fabric.mod.json configuration file showing essential fields like mod ID, name, environment, entrypoints, dependencies, and mixins.

LANGUAGE: json
CODE:
@[code lang=json](@/reference/latest/src/main/resources/fabric.mod.json)

----------------------------------------

TITLE: Implementing Block Attack Event Handler in Java
DESCRIPTION: Example showing how to register an AttackBlockCallback that damages players when they hit blocks that don't drop items when hand-mined.

LANGUAGE: java
CODE:
AttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {
    BlockState state = world.getBlockState(pos);
    if (!state.getBlock().getDroppedStacks(state, (ServerWorld) world, pos, player).isEmpty()) {
        return ActionResult.PASS;
    }
    player.damage(world.getDamageSources().generic(), 1.0f);
    return ActionResult.PASS;
});

----------------------------------------

TITLE: Returning TypedActionResult for ItemStacks in Java
DESCRIPTION: Demonstrates how to return a TypedActionResult for an ItemStack, either passing the current stack or decrementing it.

LANGUAGE: java
CODE:
TypedActionResult.pass(user.getStackInHand(hand))

LANGUAGE: java
CODE:
ItemStack heldStack = user.getStackInHand(hand);
heldStack.decrement(1);
TypedActionResult.success(heldStack);

----------------------------------------

TITLE: Implementing Custom Lightning Enchantment Effect in Java
DESCRIPTION: Creates a custom enchantment effect that strikes lightning on entities when hit. Uses the enchantment level to determine the number of lightning strikes.

LANGUAGE: java
CODE:
public record LightningEnchantmentEffect() implements EnchantmentEntityEffect {
    public static final Codec<LightningEnchantmentEffect> CODEC = Codec.unit(LightningEnchantmentEffect::new);

    @Override
    public void apply(ItemStack stack, EnchantmentParams params, Entity target, Entity attacker, int amount) {
        if (target.getWorld() instanceof ServerWorld serverWorld) {
            for (int i = 0; i < amount; i++) {
                EntityType.LIGHTNING_BOLT.spawn(serverWorld, target.getBlockPos(), SpawnReason.TRIGGERED);
            }
        }
    }
}

----------------------------------------

TITLE: Registering an AttackBlockCallback in Fabric API
DESCRIPTION: This snippet demonstrates how to register an AttackBlockCallback to damage the player when they hit blocks that don't drop an item when hand-mined.

LANGUAGE: java
CODE:
AttackBlockCallback.EVENT.register((player, world, hand, pos, direction) -> {
    BlockState state = world.getBlockState(pos);
    if (!state.isToolRequired() && state.getHardness(world, pos) != 0.0F) {
        player.damage(world.getDamageSources().generic(), 0.5f);
    }
    return ActionResult.PASS;
});

----------------------------------------

TITLE: Creating a DynamicSoundManager
DESCRIPTION: Implements a singleton class for managing dynamic sound instances on the client side.

LANGUAGE: java
CODE:
public class DynamicSoundManager implements SoundInstanceCallback {
    private static DynamicSoundManager INSTANCE;
    private final MinecraftClient client;
    private final List<AbstractDynamicSoundInstance> playingSounds;

    private DynamicSoundManager(MinecraftClient client) {
        this.client = client;
        this.playingSounds = new ArrayList<>();
    }

    public static DynamicSoundManager getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new DynamicSoundManager(MinecraftClient.getInstance());
        }
        return INSTANCE;
    }

    public void playSound(DynamicSoundSource source) {
        AbstractDynamicSoundInstance sound = new EngineSoundInstance(source, this);
        this.client.getSoundManager().play(sound);
        this.playingSounds.add(sound);
    }

    public void stopSound(DynamicSoundSource source) {
        this.playingSounds.stream()
                .filter(sound -> sound.getSource().equals(source))
                .forEach(AbstractDynamicSoundInstance::stop);
    }

    public boolean isPlaying(DynamicSoundSource source) {
        return this.playingSounds.stream()
                .anyMatch(sound -> sound.getSource().equals(source) && !sound.isDone());
    }

    @Override
    public void onFinished(AbstractDynamicSoundInstance instance) {
        this.playingSounds.remove(instance);
    }
}

----------------------------------------

TITLE: Registering Custom Potion Brewing Recipe in Fabric
DESCRIPTION: Shows how to register a brewing recipe for the custom potion using FabricBrewingRecipeRegistryBuilder. The recipe specifies the input potion, ingredient item, and output potion.

LANGUAGE: java
CODE:
FabricBrewingRecipeRegistryBuilder.BUILD.register(context -> {
    BrewingRecipeRegistry.registerPotionRecipe(
        Potions.WATER,
        Items.POTATO,
        TATER_POTION.value()
    );

    BrewingRecipeRegistry.registerPotionRecipe(
        Potions.AWKWARD,
        Items.POTATO,
        TATER_POTION.value()
    );
});

----------------------------------------

TITLE: Creating Translatable Text in Java
DESCRIPTION: Shows how to create translatable text objects that reference translation keys from language files.

LANGUAGE: java
CODE:
Text translatable = Text.translatable("my_mod.text.hello");

// Similarly to literals, translatable text can be easily made mutable.
MutableText mutable = Text.translatable("my_mod.text.bye");

----------------------------------------

TITLE: Registering Custom Armor Material in Fabric
DESCRIPTION: Shows the implementation of a method to register a custom armor material with various properties such as defense points, enchantability, equip sound, repair ingredients, toughness, and knockback resistance.

LANGUAGE: java
CODE:
public static final ArmorMaterial GUIDITE = registerArmorMaterial(
    "guidite",
    new LinkedHashMap<>() {
        {
            put(ArmorItem.Type.BOOTS, 3);
            put(ArmorItem.Type.LEGGINGS, 6);
            put(ArmorItem.Type.CHESTPLATE, 8);
            put(ArmorItem.Type.HELMET, 3);
        }
    },
    15,
    SoundEvents.ITEM_ARMOR_EQUIP_IRON,
    () -> Ingredient.ofItems(ModItems.GUIDITE_INGOT),
    2.0f,
    0.0f,
    false
);

----------------------------------------

TITLE: Test Command Registration
DESCRIPTION: Demonstrates registering a basic test command with feedback message using the CommandRegistrationCallback.

LANGUAGE: java
CODE:
CommandManager.literal("test_command")
    .executes(context -> {
        context.getSource().sendFeedback(
            () -> Text.literal("Successfully executed test command"),
            false
        );
        return Command.SINGLE_SUCCESS;
    })

----------------------------------------

TITLE: Registering Basic Command in Fabric
DESCRIPTION: Demonstrates how to register a basic command using the CommandRegistrationCallback in Fabric. The command sends feedback to the executor when run.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("foo").executes(context -> {
    context.getSource().sendFeedback(() -> Text.literal("Called /foo with no arguments"), false);
    return Command.SINGLE_SUCCESS;
}));

----------------------------------------

TITLE: Defining an Advanced Composite Component in Java
DESCRIPTION: Shows how to create a record class for a composite component with multiple fields and a custom codec.

LANGUAGE: Java
CODE:
public record MyCustomComponent(float temperature, boolean burnt) {
    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance -> instance.group(
        Codec.FLOAT.fieldOf("temperature").forGetter(MyCustomComponent::temperature),
        Codec.BOOL.optionalFieldOf("burnt", false).forGetter(MyCustomComponent::burnt)
    ).apply(instance, MyCustomComponent::new));
}

----------------------------------------

TITLE: Implementing Color Animation with HudLayerRegistrationCallback in Java
DESCRIPTION: Demonstrates implementing a HUD layer that renders an animated colored square using HudLayerRegistrationCallback. Uses Util.getMeasuringTimeMs() for time-based color interpolation and includes handling for tick delta.

LANGUAGE: java
CODE:
package com.example.docs.rendering;

import com.mojang.blaze3d.systems.RenderSystem;
import net.fabricmc.fabric.api.client.rendering.v1.HudLayerRegistry;
import net.minecraft.client.MinecraftClient;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.ColorHelper;
import net.minecraft.util.math.MathHelper;

public class HudRenderingEntrypoint implements net.fabricmc.api.ClientModInitializer {
    @Override
    public void onInitializeClient() {
        HudLayerRegistry.register(
                new Identifier("docs", "example_layer"),
                (drawContext, tickCounter) -> {
                    int x = MinecraftClient.getInstance().getWindow().getScaledWidth() / 2;
                    int y = MinecraftClient.getInstance().getWindow().getScaledHeight() / 2;

                    float time = (System.currentTimeMillis() % 3000) / 3000f;
                    float r = MathHelper.lerp(time, 1f, 0f);
                    float g = MathHelper.lerp(time, 0f, 1f);
                    float b = 0f;

                    int color = ColorHelper.Argb.getArgb(255, (int) (r * 255), (int) (g * 255), (int) (b * 255));

                    drawContext.fill(x - 25, y - 25, x + 25, y + 25, color);
                }
        );
    }
}

----------------------------------------

TITLE: Implementing Color Animation with HudLayerRegistrationCallback in Java
DESCRIPTION: Demonstrates implementing a HUD layer that renders an animated colored square using HudLayerRegistrationCallback. Uses Util.getMeasuringTimeMs() for time-based color interpolation and includes handling for tick delta.

LANGUAGE: java
CODE:
package com.example.docs.rendering;

import com.mojang.blaze3d.systems.RenderSystem;
import net.fabricmc.fabric.api.client.rendering.v1.HudLayerRegistry;
import net.minecraft.client.MinecraftClient;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.ColorHelper;
import net.minecraft.util.math.MathHelper;

public class HudRenderingEntrypoint implements net.fabricmc.api.ClientModInitializer {
    @Override
    public void onInitializeClient() {
        HudLayerRegistry.register(
                new Identifier("docs", "example_layer"),
                (drawContext, tickCounter) -> {
                    int x = MinecraftClient.getInstance().getWindow().getScaledWidth() / 2;
                    int y = MinecraftClient.getInstance().getWindow().getScaledHeight() / 2;

                    float time = (System.currentTimeMillis() % 3000) / 3000f;
                    float r = MathHelper.lerp(time, 1f, 0f);
                    float g = MathHelper.lerp(time, 0f, 1f);
                    float b = 0f;

                    int color = ColorHelper.Argb.getArgb(255, (int) (r * 255), (int) (g * 255), (int) (b * 255));

                    drawContext.fill(x - 25, y - 25, x + 25, y + 25, color);
                }
        );
    }
}

----------------------------------------

TITLE: Implementing Color Animation with HudLayerRegistrationCallback in Java
DESCRIPTION: Demonstrates implementing a HUD layer that renders an animated colored square using HudLayerRegistrationCallback. Uses Util.getMeasuringTimeMs() for time-based color interpolation and includes handling for tick delta.

LANGUAGE: java
CODE:
package com.example.docs.rendering;

import com.mojang.blaze3d.systems.RenderSystem;
import net.fabricmc.fabric.api.client.rendering.v1.HudLayerRegistry;
import net.minecraft.client.MinecraftClient;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.ColorHelper;
import net.minecraft.util.math.MathHelper;

public class HudRenderingEntrypoint implements net.fabricmc.api.ClientModInitializer {
    @Override
    public void onInitializeClient() {
        HudLayerRegistry.register(
                new Identifier("docs", "example_layer"),
                (drawContext, tickCounter) -> {
                    int x = MinecraftClient.getInstance().getWindow().getScaledWidth() / 2;
                    int y = MinecraftClient.getInstance().getWindow().getScaledHeight() / 2;

                    float time = (System.currentTimeMillis() % 3000) / 3000f;
                    float r = MathHelper.lerp(time, 1f, 0f);
                    float g = MathHelper.lerp(time, 0f, 1f);
                    float b = 0f;

                    int color = ColorHelper.Argb.getArgb(255, (int) (r * 255), (int) (g * 255), (int) (b * 255));

                    drawContext.fill(x - 25, y - 25, x + 25, y + 25, color);
                }
        );
    }
}

----------------------------------------

TITLE: Implementing Data Persistence for Block Entity
DESCRIPTION: Shows how to save and load block entity data using NBT, ensuring data persists between game sessions.

LANGUAGE: java
CODE:
    @Override
    protected void writeNbt(NbtCompound nbt) {
        super.writeNbt(nbt);
        nbt.putInt("clicks", clicks);
        nbt.putInt("ticksSinceLast", ticksSinceLast);
    }

    @Override
    public void readNbt(NbtCompound nbt) {
        super.readNbt(nbt);
        clicks = nbt.getInt("clicks");
        ticksSinceLast = nbt.getInt("ticksSinceLast");
    }

----------------------------------------

TITLE: Adding Basic Food Component in Java using Fabric
DESCRIPTION: This snippet demonstrates how to add a basic food component to an item using the FoodComponent.Builder class. It creates an edible item without any additional properties.

LANGUAGE: java
CODE:
new Item.Settings().food(new FoodComponent.Builder().build())

----------------------------------------

TITLE: Saving and Loading Block Entity Data in Java
DESCRIPTION: Implements methods to serialize and deserialize block entity data for persistence between game sessions.

LANGUAGE: java
CODE:
public class CounterBlockEntity extends BlockEntity {
    // ... existing code ...

    @Override
    public void writeNbt(NbtCompound nbt) {
        nbt.putInt("clicks", clicks);
        super.writeNbt(nbt);
    }

    @Override
    public void readNbt(NbtCompound nbt) {
        super.readNbt(nbt);
        clicks = nbt.getInt("clicks");
    }
}

----------------------------------------

TITLE: Adding Basic Food Component in Java using Fabric
DESCRIPTION: This snippet demonstrates how to add a basic food component to an item using the FoodComponent.Builder class. It creates an edible item without any additional properties.

LANGUAGE: java
CODE:
new Item.Settings().food(new FoodComponent.Builder().build())

----------------------------------------

TITLE: Complete Custom Potion Implementation in Java
DESCRIPTION: Full example of creating and registering a custom potion in Fabric, including necessary imports and initialization.

LANGUAGE: java
CODE:
package com.example.docs.potion;

import com.example.docs.FabricDocsReference;
import com.example.docs.effect.FabricDocsReferenceStatusEffects;
import net.minecraft.entity.effect.StatusEffectInstance;
import net.minecraft.item.Items;
import net.minecraft.potion.Potion;
import net.minecraft.potion.Potions;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.util.Identifier;

public class FabricDocsReferencePotions {
    private FabricDocsReferencePotions() {
    }

    // Create a new Potion instance
    public static final Potion TATER_POTION = new Potion(
        new StatusEffectInstance(
            FabricDocsReferenceStatusEffects.TATER_EFFECT,
            200, // Duration (in ticks)
            0   // Amplifier
        )
    );

    public static void register() {
        Registry.register(Registries.POTION, new Identifier(FabricDocsReference.MOD_ID, "tater"), TATER_POTION);

        // Register the potion recipe
        BrewingRecipeRegistry.registerPotionRecipe(Potions.AWKWARD, Items.POTATO, TATER_POTION);
    }
}

----------------------------------------

TITLE: Playing Sounds on Entity and Block Interaction in Minecraft Mod
DESCRIPTION: This code snippet demonstrates how to play sounds when a custom item interacts with an entity or a block. It uses the useOnEntity() and useOnBlock() methods to trigger sound events.

LANGUAGE: java
CODE:
@Override
public ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {
    if (!entity.getWorld().isClient()) {
        entity.getWorld().playSound(null, entity.getX(), entity.getY(), entity.getZ(),
                SoundEvents.BLOCK_COPPER_PLACE, SoundCategory.NEUTRAL, 1.0F, 1.0F);
    }
    return ActionResult.SUCCESS;
}

@Override
public ActionResult useOnBlock(ItemUsageContext context) {
    if (!context.getWorld().isClient()) {
        context.getWorld().playSound(null, context.getBlockPos(),
                SoundEvents.ENTITY_PILLAGER_AMBIENT, SoundCategory.NEUTRAL, 1.0F, 1.0F);
    }
    return ActionResult.SUCCESS;
}

----------------------------------------

TITLE: Playing Sounds on Entity and Block Interaction in Minecraft Mod
DESCRIPTION: This code snippet demonstrates how to play sounds when a custom item interacts with an entity or a block. It uses the useOnEntity() and useOnBlock() methods to trigger sound events.

LANGUAGE: java
CODE:
@Override
public ActionResult useOnEntity(ItemStack stack, PlayerEntity user, LivingEntity entity, Hand hand) {
    if (!entity.getWorld().isClient()) {
        entity.getWorld().playSound(null, entity.getX(), entity.getY(), entity.getZ(),
                SoundEvents.BLOCK_COPPER_PLACE, SoundCategory.NEUTRAL, 1.0F, 1.0F);
    }
    return ActionResult.SUCCESS;
}

@Override
public ActionResult useOnBlock(ItemUsageContext context) {
    if (!context.getWorld().isClient()) {
        context.getWorld().playSound(null, context.getBlockPos(),
                SoundEvents.ENTITY_PILLAGER_AMBIENT, SoundCategory.NEUTRAL, 1.0F, 1.0F);
    }
    return ActionResult.SUCCESS;
}

----------------------------------------

TITLE: Registering Custom Argument Type in Java
DESCRIPTION: Shows how to register a custom argument type using the ArgumentTypeRegistry in the mod's initializer. This step is crucial for both server and client to recognize the custom argument type.

LANGUAGE: java
CODE:
ArgumentTypeRegistry.registerArgumentType(new Identifier("example", "blockpos"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::new));

----------------------------------------

TITLE: Initializing Armor Materials in Fabric Mod
DESCRIPTION: Demonstrates how to create an initialize method for armor materials and call it from the mod's initializer. This ensures materials are registered before items are created.

LANGUAGE: java
CODE:
// Within the ModArmorMaterials class
public static void initialize() {};

LANGUAGE: java
CODE:
@Override
public void onInitialize() {
  ModArmorMaterials.initialize();
}

----------------------------------------

TITLE: Executing Command with Custom Suggestions in Java
DESCRIPTION: This snippet shows how to execute a command that uses custom suggestions. It retrieves the player name from the command context and logs it.

LANGUAGE: java
CODE:
private static int executeCommandWithCustomSuggestions(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
    String playerName = StringArgumentType.getString(context, "player");
    LOGGER.info("Player name: {}", playerName);
    return 1;
}

----------------------------------------

TITLE: Creating Text Objects in Java
DESCRIPTION: Demonstrates how to create basic Text objects using Text.of() and Text.literal() methods. Shows the difference between immutable Text and MutableText objects.

LANGUAGE: java
CODE:
Text literal = Text.of("Hello, world!");
MutableText mutable = Text.literal("Hello, world!");
// Keep in mind that a MutableText can be used as a Text, making this valid:
Text mutableAsText = mutable;

----------------------------------------

TITLE: Initializing FabricRecipeProvider for DataGen
DESCRIPTION: Base setup for recipe generation by extending FabricRecipeProvider class. The generate method will contain all recipe generation logic.

LANGUAGE: java
CODE:
public class FabricDocsReferenceRecipeProvider extends FabricRecipeProvider {
    public FabricDocsReferenceRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(RecipeExporter exporter) {
        // Recipe generation happens here
    }
}

----------------------------------------

TITLE: Creating a Custom Codec for a Complex Class
DESCRIPTION: Shows how to create a custom codec for a class with multiple fields, including primitives, registered objects, and lists.

LANGUAGE: java
CODE:
public static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(
    Codec.INT.fieldOf("beans_amount").forGetter(CoolBeansClass::getBeansAmount),
    Registries.ITEM.getCodec().fieldOf("bean_type").forGetter(CoolBeansClass::getBeanType),
    BlockPos.CODEC.listOf().fieldOf("bean_positions").forGetter(CoolBeansClass::getBeanPositions)
    // Up to 16 fields can be declared here
).apply(instance, CoolBeansClass::new));

----------------------------------------

TITLE: Creating a Custom Codec for a Complex Class
DESCRIPTION: Shows how to create a custom codec for a class with multiple fields, including primitives, registered objects, and lists.

LANGUAGE: java
CODE:
public static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(
    Codec.INT.fieldOf("beans_amount").forGetter(CoolBeansClass::getBeansAmount),
    Registries.ITEM.getCodec().fieldOf("bean_type").forGetter(CoolBeansClass::getBeanType),
    BlockPos.CODEC.listOf().fieldOf("bean_positions").forGetter(CoolBeansClass::getBeanPositions)
    // Up to 16 fields can be declared here
).apply(instance, CoolBeansClass::new));

----------------------------------------

TITLE: Accessing Custom Damage Type Registry Key
DESCRIPTION: Java code to obtain the RegistryKey for a custom damage type

LANGUAGE: java
CODE:
:::1
public class FabricDocsReferenceDamageTypes {
    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier("fabric-docs-reference", "tater"));
}

----------------------------------------

TITLE: Configuring Data Generation in build.gradle
DESCRIPTION: Gradle configuration block required to enable data generation capabilities in a Fabric mod project.

LANGUAGE: groovy
CODE:
:::datagen-setup:configure

----------------------------------------

TITLE: Basic Food Component Creation in Java
DESCRIPTION: Shows the basic syntax for adding a food component to an item using Item.Settings and FoodComponent.Builder.

LANGUAGE: java
CODE:
new Item.Settings().food(new FoodComponent.Builder().build())

----------------------------------------

TITLE: Item Model Description JSON
DESCRIPTION: JSON configuration for describing the item model location

LANGUAGE: json
CODE:
{
  "model": {
    "type": "minecraft:model",
    "model": "mod_id:item/suspicious_substance"
  }
}

----------------------------------------

TITLE: Creating Custom Item Group in Fabric
DESCRIPTION: Demonstrates creating a static final field for an item group and registering it using the ItemGroupEvents. Shows the basic structure for defining a custom creative inventory tab.

LANGUAGE: java
CODE:
public static final RegistryKey<ItemGroup> FABRIC_DOCS_ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier("fabric_docs_reference", "test_group"));

LANGUAGE: java
CODE:
ItemGroupEvents.modifyEntriesEvent(FABRIC_DOCS_ITEM_GROUP).register(content -> {
    content.add(EXAMPLE_ITEM);
});

----------------------------------------

TITLE: Item Model Description JSON
DESCRIPTION: JSON configuration for describing the item model location

LANGUAGE: json
CODE:
{
  "model": {
    "type": "minecraft:model",
    "model": "mod_id:item/suspicious_substance"
  }
}

----------------------------------------

TITLE: Using Custom Suggestion Provider in Fabric Command
DESCRIPTION: Shows how to use the custom PlayerSuggestionProvider with a command argument. The execute method demonstrates handling the suggested player name.

LANGUAGE: java
CODE:
argument("player", StringArgumentType.word())
    .suggests(new PlayerSuggestionProvider())

LANGUAGE: java
CODE:
public int run(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
    String playerName = StringArgumentType.getString(context, "player");
    context.getSource().sendFeedback(() -> Text.literal("You selected player: " + playerName), false);
    return 1;
}

----------------------------------------

TITLE: Registering Custom Block
DESCRIPTION: Example of creating and registering a custom block with dirt-like properties using Fabric's registry system.

LANGUAGE: java
CODE:
public static final Block CONDENSED_DIRT = register("condensed_dirt",
    new Block(FabricBlockSettings.create()
        .mapColor(MapColor.DIRT)
        .strength(0.5f)
        .sounds(BlockSoundGroup.GRAVEL)
    ), true);

----------------------------------------

TITLE: Creating Basic Item Registration Method
DESCRIPTION: Demonstrates how to create a helper method for registering items in the game registry

LANGUAGE: java
CODE:
public static Item registerItem(String name, Item item) {
    return Registry.register(Registries.ITEM, new Identifier("mod_id", name), item);
}

----------------------------------------

TITLE: Creating Tool Items in Java
DESCRIPTION: Shows how to create custom tool items using the previously defined tool material and set their attack damage and speed.

LANGUAGE: java
CODE:
public static final Item GUIDITE_SWORD = registerItem("guidite_sword", new SwordItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));
public static final Item GUIDITE_SHOVEL = registerItem("guidite_shovel", new ShovelItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));
public static final Item GUIDITE_PICKAXE = registerItem("guidite_pickaxe", new PickaxeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));
public static final Item GUIDITE_AXE = registerItem("guidite_axe", new AxeItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));
public static final Item GUIDITE_HOE = registerItem("guidite_hoe", new HoeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));

----------------------------------------

TITLE: Creating Tool Items in Java
DESCRIPTION: Shows how to create custom tool items using the previously defined tool material and set their attack damage and speed.

LANGUAGE: java
CODE:
public static final Item GUIDITE_SWORD = registerItem("guidite_sword", new SwordItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));
public static final Item GUIDITE_SHOVEL = registerItem("guidite_shovel", new ShovelItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));
public static final Item GUIDITE_PICKAXE = registerItem("guidite_pickaxe", new PickaxeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));
public static final Item GUIDITE_AXE = registerItem("guidite_axe", new AxeItem(GUIDITE_TOOL_MATERIAL, 1f, 1f, new Item.Settings()));
public static final Item GUIDITE_HOE = registerItem("guidite_hoe", new HoeItem(GUIDITE_TOOL_MATERIAL, 1, 1f, new Item.Settings()));

----------------------------------------

TITLE: Damage Type Tag Configuration
DESCRIPTION: JSON configuration for adding the custom damage type to the bypasses_armor tag

LANGUAGE: json
CODE:
{
  "replace": false,
  "values": [
    "fabric-docs-reference:tater"
  ]
}

----------------------------------------

TITLE: Configuring Data Generation in build.gradle (Groovy)
DESCRIPTION: This snippet shows how to configure data generation in the build.gradle file for a Fabric mod project. It includes the necessary dependencies and configurations.

LANGUAGE: groovy
CODE:
@[code lang=groovy transcludeWith=:::datagen-setup:configure](@/reference/build.gradle)

----------------------------------------

TITLE: Defining Custom Tool Material in Java
DESCRIPTION: Creates a custom tool material class called 'GuiditeMaterial' that defines properties such as durability, mining speed, attack damage, and repair ingredients.

LANGUAGE: java
CODE:
public class GuiditeMaterial implements ToolMaterial {
    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();

    @Override
    public int getDurability() {
        return 500;
    }

    @Override
    public float getMiningSpeedMultiplier() {
        return 6.0F;
    }

    @Override
    public float getAttackDamage() {
        return 2.0F;
    }

    @Override
    public int getMiningLevel() {
        return BlockTags.NEEDS_IRON_TOOL;
    }

    @Override
    public int getEnchantability() {
        return 18;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return Ingredient.ofItems(ModItems.GUIDITE);
    }
}

----------------------------------------

TITLE: Parameterized Translations in Java
DESCRIPTION: Demonstrates how to use variables in translatable text, such as player names and items, with parameters that can be referenced in translations.

LANGUAGE: java
CODE:
Text translatable = Text.translatable("my_mod.text.whack.item", victim.getDisplayName(), attacker.getDisplayName(), itemStack.toHoverableText());

----------------------------------------

TITLE: Registering a Client-Side Packet Receiver
DESCRIPTION: This code registers a global receiver for the custom payload on the client side. It handles the received packet by spawning a lightning entity at the specified position.

LANGUAGE: java
CODE:
ClientPlayNetworking.registerGlobalReceiver(SummonLightningS2CPayload.TYPE, (client, handler, payload, responseSender) -> {
    BlockPos pos = payload.pos();
    client.execute(() -> {
        World world = client.world;
        if (world != null) {
            LightningEntity lightningEntity = EntityType.LIGHTNING_BOLT.create(world);
            if (lightningEntity != null) {
                lightningEntity.refreshPositionAfterTeleport(Vec3d.ofBottomCenter(pos));
                world.addEntity(lightningEntity);
            }
        }
    });
});

----------------------------------------

TITLE: Adding Status Effect Translation in JSON
DESCRIPTION: Adds a translation entry for the custom Tater effect in the language file.

LANGUAGE: json
CODE:
{
  "effect.fabric-docs-reference.tater": "Tater"
}

----------------------------------------

TITLE: Drawing Text with DrawContext in Java
DESCRIPTION: Demonstrates how to render text on screen using DrawContext's text drawing methods.

LANGUAGE: java
CODE:
context.drawText(textRenderer, "Hello World", 10, 10, 0xFFFFFF, true);

----------------------------------------

TITLE: Gradle Commands for Launching Minecraft
DESCRIPTION: Basic Gradle commands to start Minecraft in either client or server mode via command line

LANGUAGE: bash
CODE:
./gradlew runClient
./gradlew runServer

----------------------------------------

TITLE: Configuring Tags in Java for Fabric Tag Generation
DESCRIPTION: This snippet shows how to configure tags using the getOrCreateTagBuilder method. It demonstrates adding individual items, other tags, and handling optional tags.

LANGUAGE: java
CODE:
@Override
protected void configure(RegistryWrapper.WrapperLookup arg) {
    getOrCreateTagBuilder(EXAMPLE_TAG)
            .add(Items.DIAMOND)
            .add(Items.EMERALD)
            .addOptionalTag(new Identifier("c", "example_tag"))
            .addTag(TagKey.of(Registries.ITEM.getKey(), new Identifier("fabric", "gems")));
}

----------------------------------------

TITLE: Implementing Other Recipe Types with Fabric Datagen in Java
DESCRIPTION: Demonstrates how to create other recipe types, such as smelting recipes. This example creates a smelting recipe for turning raw iron into iron ingots.

LANGUAGE: java
CODE:
CookingRecipeJsonBuilder.create(Ingredient.ofItems(Items.RAW_IRON), RecipeCategory.MISC, Items.IRON_INGOT, 0.7f, 200, RecipeSerializer.SMELTING)
    .criterion(hasItem(Items.RAW_IRON), conditionsFromItem(Items.RAW_IRON))
    .offerTo(exporter);

----------------------------------------

TITLE: Implementing Other Recipe Types with Fabric Datagen in Java
DESCRIPTION: Demonstrates how to create other recipe types, such as smelting recipes. This example creates a smelting recipe for turning raw iron into iron ingots.

LANGUAGE: java
CODE:
CookingRecipeJsonBuilder.create(Ingredient.ofItems(Items.RAW_IRON), RecipeCategory.MISC, Items.IRON_INGOT, 0.7f, 200, RecipeSerializer.SMELTING)
    .criterion(hasItem(Items.RAW_IRON), conditionsFromItem(Items.RAW_IRON))
    .offerTo(exporter);

----------------------------------------

TITLE: Adding Items to Existing Loot Tables in Fabric API
DESCRIPTION: This example shows how to add eggs to the coal ore loot table using LootTableEvents.MODIFY event in Fabric API.

LANGUAGE: java
CODE:
LootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {
    if (source.isBuiltin() && COAL_ORE_ID.equals(id)) {
        LootPool.Builder poolBuilder = LootPool.builder()
                .with(ItemEntry.builder(Items.EGG));
        tableBuilder.pool(poolBuilder);
    }
});

----------------------------------------

TITLE: Adding Items to Existing Loot Tables in Fabric API
DESCRIPTION: This example shows how to add eggs to the coal ore loot table using LootTableEvents.MODIFY event in Fabric API.

LANGUAGE: java
CODE:
LootTableEvents.MODIFY.register((resourceManager, lootManager, id, tableBuilder, source) -> {
    if (source.isBuiltin() && COAL_ORE_ID.equals(id)) {
        LootPool.Builder poolBuilder = LootPool.builder()
                .with(ItemEntry.builder(Items.EGG));
        tableBuilder.pool(poolBuilder);
    }
});

----------------------------------------

TITLE: Configuring Fabric Loom Gradle Plugin
DESCRIPTION: Complete configuration example for the Fabric Loom Gradle plugin, including build settings, run configurations, mixin options, decompiler settings, and dependency management. Shows how to set up Minecraft development environment with various options for compilation, remapping, and runtime execution.

LANGUAGE: groovy
CODE:
loom {
 accessWidenerPath = file("src/main/resources/modid.accesswidener")

 log4jConfigs.from(file("log4j.xml"))

 remapArchives = true
 setupRemappedVariants = true
 enableTransitiveAccessWideners = true
 runtimeOnlyLog4j = false

 serverOnlyMinecraftJar()
 splitMinecraftJar()

 runs {
  client {
   vmArgs "-Dexample=true"
   property("example", "true")
   programArg "--example"
   environmentVariable("example", "true")
   environment = "client"
   configName = "Minecraft Client"
   defaultMainClass = ""
   runDir = "run"
   source = sourceSets.main
   ideConfigGenerated = true

   client()

   server()
  }

  testClient {
   inherit client

   configName = "Test Minecraft Client"
   source = sourceSets.test
  }

    remove server
 }

 runConfigs.configureEach {
  ideConfigGenerated = true
 }

 mixin {
  useLegacyMixinAp = true
  defaultRefmapName = "example.refmap.json"
 }

 decompilers {
  cfr {
   options += [
    key: "value"
   ]
   memory = 4096
   maxThreads = 8
  }
 }

 interfaceInjection {
  enableDependencyInterfaceInjection = true
 }

 splitEnvironmentSourceSets()

 mods {
  modid {
   sourceSet sourceSets.main
   sourceSet sourceSets.client
  }
 }

 createRemapConfigurations(sourceSets.example)
}

remapJar {
 inputFile = file("example.jar")
 sourceNamespace = "named"
 targetNamespace = "intermediary"
 classpath.from file("classpath.jar")

 nestedJars.from file("nested.jar")
 addNestedDependencies = true
}

dependencies {
 minecraft "com.mojang:minecraft:1.18.1"

 mappings "net.fabricmc:yarn:1.18.1+build.22:v2"

 mappings loom.officialMojangMappings()

 mappings loom.layered() {
  officialMojangMappings()
  parchment("org.parchmentmc.data:parchment-1.17.1:2021.09.05@zip")
 }

 modImplementation "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 modApi "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 modCompileOnly "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 modCompileOnlyApi "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 modLocalRuntime "net.fabricmc.fabric-api:fabric-api:0.46.2+1.18"

 include "example:example-mod:1.1.1"

 include "example:example-lib:1.1.1"

 modImplementation fabricApi.module("fabric-api-base", "0.46.2+1.18")

 implementation project(path: ":name", configuration: "namedElements")
}

----------------------------------------

TITLE: Using Custom Suggestion Provider in Java
DESCRIPTION: This code demonstrates how to use a custom suggestion provider in a command. It creates an instance of the PlayerSuggestionProvider and passes it to the suggests method.

LANGUAGE: java
CODE:
CommandManager.argument("player", StringArgumentType.string())
    .suggests(new PlayerSuggestionProvider())

----------------------------------------

TITLE: Registering Custom Enchantment Effect in Java
DESCRIPTION: This code snippet shows how to register the custom enchantment effect with Minecraft's registry using a helper method in a 'ModEnchantmentEffects' class.

LANGUAGE: java
CODE:
public class ModEnchantmentEffects {
    public static final RegistryKey<Codec<? extends EnchantmentEffect>> LIGHTNING = RegistryKey.of(RegistryKeys.ENCHANTMENT_EFFECT, new Identifier("fabric-docs-reference", "lightning"));

    public static void registerModEnchantmentEffects() {
        Registry.register(RegistryKeys.ENCHANTMENT_EFFECT, LIGHTNING, LightningEnchantmentEffect.CODEC);
    }
}

----------------------------------------

TITLE: Item Language Configuration
DESCRIPTION: JSON configuration for item display names and tooltip text in the English language file.

LANGUAGE: json
CODE:
{
  "item.fabric-docs-reference.counter": "Counter",
  "item.fabric-docs-reference.counter.info": "Used %1$s times"
}

----------------------------------------

TITLE: Item Language Configuration
DESCRIPTION: JSON configuration for item display names and tooltip text in the English language file.

LANGUAGE: json
CODE:
{
  "item.fabric-docs-reference.counter": "Counter",
  "item.fabric-docs-reference.counter.info": "Used %1$s times"
}

----------------------------------------

TITLE: Adding Custom Item Tooltip
DESCRIPTION: Demonstrates how to add custom tooltips to an item by overriding appendTooltip

LANGUAGE: java
CODE:
@Override
public void appendTooltip(ItemStack stack, @Nullable World world, List<Text> tooltip, TooltipContext context) {
    tooltip.add(Text.translatable("item.fabric_docs_reference.lightning_stick.tooltip"));
}

----------------------------------------

TITLE: Creating a TagKey in Java for Fabric Tag Generation
DESCRIPTION: This code demonstrates how to create a TagKey<T> for use in tag generation. It's the first step in defining a new tag.

LANGUAGE: java
CODE:
public static final TagKey<Item> EXAMPLE_TAG = TagKey.of(Registries.ITEM.getKey(), new Identifier("fabric-docs-reference", "example_tag"));

----------------------------------------

TITLE: Implementing Block Entity Tickers in Java
DESCRIPTION: Adds a ticker to the CounterBlock and CounterBlockEntity to limit click increments to once every 10 ticks.

LANGUAGE: java
CODE:
public class CounterBlock extends BlockWithEntity {
    // ... existing code ...

    @Nullable
    @Override
    public <T extends BlockEntity> BlockEntityTicker<T> getTicker(World world, BlockState state, BlockEntityType<T> type) {
        return checkType(type, ModBlockEntities.COUNTER_BLOCK_ENTITY, CounterBlockEntity::tick);
    }
}

LANGUAGE: java
CODE:
public class CounterBlockEntity extends BlockEntity {
    private int clicks = 0;
    private int ticksSinceLast = 0;

    // ... existing code ...

    public static void tick(World world, BlockPos pos, BlockState state, CounterBlockEntity be) {
        be.ticksSinceLast++;
    }

    public void incrementClicks() {
        if (ticksSinceLast >= 10) {
            clicks++;
            ticksSinceLast = 0;
            markDirty();
        }
    }

    @Override
    public void writeNbt(NbtCompound nbt) {
        nbt.putInt("clicks", clicks);
        nbt.putInt("ticksSinceLast", ticksSinceLast);
        super.writeNbt(nbt);
    }

    @Override
    public void readNbt(NbtCompound nbt) {
        super.readNbt(nbt);
        clicks = nbt.getInt("clicks");
        ticksSinceLast = nbt.getInt("ticksSinceLast");
    }
}

----------------------------------------

TITLE: Lightning Stick Item Implementation
DESCRIPTION: Example implementation of a custom item that spawns a lightning bolt 10 blocks in front of the player when used. Demonstrates the use of the 'use' event override.

LANGUAGE: java
CODE:
@Override
public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
    if(!world.isClient) {
        Vec3d look = user.getRotationVec(1.0f);
        Vec3d pos = user.getPos().add(look.multiply(10));
        EntityType.LIGHTNING_BOLT.spawn((ServerWorld) world, pos, SpawnReason.TRIGGERED);
    }
    return TypedActionResult.success(user.getStackInHand(hand));
}

----------------------------------------

TITLE: Scaling Animation with MatrixStack
DESCRIPTION: Shows how to use MatrixStack to create a scaling animation effect on a rendered shape using sine wave calculations.

LANGUAGE: java
CODE:
FabricClientEvents.HUD_RENDER.register((drawContext, tickDelta) -> {
    MatrixStack matrices = drawContext.getMatrices();
    matrices.push();
    float scale = (float) Math.sin(tickDelta / 20.0f) + 2.0f;
    matrices.scale(scale, scale, 1.0f);

    Tessellator tessellator = Tessellator.getInstance();
    BufferBuilder buffer = tessellator.getBuffer();

    buffer.begin(DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);
    buffer.vertex(matrices.peek().getPositionMatrix(), 20, 20, 0).color(255, 0, 0, 255).next();
    buffer.vertex(matrices.peek().getPositionMatrix(), 5, 40, 0).color(0, 255, 0, 255).next();
    buffer.vertex(matrices.peek().getPositionMatrix(), 35, 40, 0).color(0, 0, 255, 255).next();
    buffer.vertex(matrices.peek().getPositionMatrix(), 20, 60, 0).color(255, 255, 255, 255).next();
    tessellator.draw();

    matrices.pop();
});

----------------------------------------

TITLE: Registering Custom Argument Type - Java
DESCRIPTION: Shows how to register a custom argument type in Fabric mod's initialization. Must be registered on both client and server sides.

LANGUAGE: java
CODE:
ArgumentTypeRegistry.registerArgumentType(new Identifier("fabric_docs_reference", "blockpos"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::blockPos));

----------------------------------------

TITLE: Registering Custom Argument Type - Java
DESCRIPTION: Shows how to register a custom argument type in Fabric mod's initialization. Must be registered on both client and server sides.

LANGUAGE: java
CODE:
ArgumentTypeRegistry.registerArgumentType(new Identifier("fabric_docs_reference", "blockpos"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::blockPos));

----------------------------------------

TITLE: Registering Custom Argument Type - Java
DESCRIPTION: Shows how to register a custom argument type in Fabric mod's initialization. Must be registered on both client and server sides.

LANGUAGE: java
CODE:
ArgumentTypeRegistry.registerArgumentType(new Identifier("fabric_docs_reference", "blockpos"), BlockPosArgumentType.class, new ConstantArgumentSerializer<>(BlockPosArgumentType::blockPos));

----------------------------------------

TITLE: Creating Translations Using FabricLanguageProvider in Java
DESCRIPTION: This snippet shows various methods to create translations using the TranslationBuilder. It includes examples for translating items, blocks, and custom text keys.

LANGUAGE: java
CODE:
translationBuilder.add(FabricDocsReferenceItems.EXAMPLE_ITEM, "Example Item");
translationBuilder.add(FabricDocsReferenceBlocks.EXAMPLE_BLOCK, "Example Block");
translationBuilder.add("text.fabric_docs_reference.greeting", "Hello there!");

----------------------------------------

TITLE: Adding Tag Provider to DataGeneratorEntrypoint in Java for Fabric
DESCRIPTION: This snippet shows how to add the custom tag provider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceItemTagProvider::new);

----------------------------------------

TITLE: Creating Custom Player Suggestion Provider in Java
DESCRIPTION: This snippet shows how to create a custom suggestion provider that suggests player usernames on the server. It implements the SuggestionProvider interface and overrides the getSuggestions method.

LANGUAGE: java
CODE:
public class PlayerSuggestionProvider implements SuggestionProvider<ServerCommandSource> {
    @Override
    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) throws CommandSyntaxException {
        for (ServerPlayerEntity player : context.getSource().getServer().getPlayerManager().getPlayerList()) {
            builder.suggest(player.getGameProfile().getName());
        }
        return builder.buildFuture();
    }
}

----------------------------------------

TITLE: Creating Simple Cube Block Model in Java
DESCRIPTION: Generates a basic cube_all block model where all sides use the same texture. Creates both the model and blockstate JSON files.

LANGUAGE: java
CODE:
blockStateModelGenerator.registerSimpleCubeAll(ModBlocks.STEEL_BLOCK);

----------------------------------------

TITLE: Rendering a Triangle Strip on Minecraft HUD
DESCRIPTION: This snippet demonstrates how to render a diamond shape on the Minecraft HUD using the BufferBuilder system. It initializes the BufferBuilder, sets vertex positions and colors, and draws the shape using the TRIANGLE_STRIP draw mode.

LANGUAGE: java
CODE:
HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {
    Tessellator tessellator = Tessellator.getInstance();
    BufferBuilder bufferBuilder = tessellator.getBuffer();

    Matrix4f positionMatrix = drawContext.getMatrices().peek().getPositionMatrix();

    RenderSystem.enableBlend();
    RenderSystem.defaultBlendFunc();

    bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);
    bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next(); // Red
    bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next(); // Green
    bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next(); // Blue
    bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next(); // White
    tessellator.draw();

    RenderSystem.disableBlend();
});

----------------------------------------

TITLE: Defining Custom Damage Type JSON
DESCRIPTION: JSON configuration for creating a custom 'Tater' damage type that affects hunger exhaustion and scales with difficulty

LANGUAGE: json
CODE:
{
  "exhaustion": 0.1,
  "message_id": "tater",
  "scaling": "when_caused_by_living_non_player"
}

----------------------------------------

TITLE: Defining a DynamicSoundSource Interface
DESCRIPTION: Creates an interface for dynamic sound sources to provide necessary data for sound instances.

LANGUAGE: java
CODE:
public interface DynamicSoundSource {
    Vec3d getPos();
    boolean isRunning();
    float getStress();
    String getSoundSourceId();
}

----------------------------------------

TITLE: Defining a DynamicSoundSource Interface
DESCRIPTION: Creates an interface for dynamic sound sources to provide necessary data for sound instances.

LANGUAGE: java
CODE:
public interface DynamicSoundSource {
    Vec3d getPos();
    boolean isRunning();
    float getStress();
    String getSoundSourceId();
}

----------------------------------------

TITLE: Adding Translation Key for Custom Item Group (JSON)
DESCRIPTION: Adds a translation key to the language file for the custom item group. This JSON snippet defines the display name for the item group in the game's UI.

LANGUAGE: json
CODE:
{
    "itemGroup.fabric_docs_reference": "Fabric Docs Reference"
}

----------------------------------------

TITLE: Initializing ModBlocks Class for Custom Block Registration in Java
DESCRIPTION: This snippet shows how to set up a ModBlocks class to register custom blocks in Minecraft using Fabric. It includes a method to register blocks and their corresponding block items.

LANGUAGE: java
CODE:
public class ModBlocks {
    private static Block register(String name, Block block, boolean shouldRegisterItem) {
        Identifier id = new Identifier(FabricDocsReference.MOD_ID, name);
        Registry.register(Registries.BLOCK, id, block);
        if (shouldRegisterItem) {
            Registry.register(Registries.ITEM, id, new BlockItem(block, new FabricItemSettings()));
        }
        return block;
    }
}

----------------------------------------

TITLE: Using Custom Argument Type in Command in Java
DESCRIPTION: Demonstrates how to use a custom argument type (BlockPosArgumentType) in a Fabric command. The command is structured to accept the custom BlockPos argument and execute accordingly.

LANGUAGE: java
CODE:
CommandManager.literal("custom_arg_command")
    .then(CommandManager.argument("pos", new BlockPosArgumentType())
        .executes(CustomArgCommand::execute)
    );

LANGUAGE: java
CODE:
private static int execute(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
    BlockPos pos = context.getArgument("pos", BlockPos.class);
    context.getSource().sendFeedback(() -> Text.literal("Position: " + pos), false);
    return 1;
}

----------------------------------------

TITLE: Implementing a Custom Item for Sending Server-to-Client Packets
DESCRIPTION: This code implements a 'LightningTaterItem' that sends packets to clients when used on the server. It demonstrates how to create and send custom payloads to players.

LANGUAGE: java
CODE:
public class LightningTaterItem extends Item {
    public LightningTaterItem(Settings settings) {
        super(settings);
    }

    @Override
    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
        if (world.isClient()) {
            return TypedActionResult.pass(user.getStackInHand(hand));
        }

        var payload = new SummonLightningS2CPayload(user.getBlockPos());

        for (ServerPlayerEntity player : PlayerLookup.all((ServerWorld) world)) {
            ServerPlayNetworking.send(player, payload);
        }

        return TypedActionResult.success(user.getStackInHand(hand));
    }
}

----------------------------------------

TITLE: Custom Class Codec Definition
DESCRIPTION: Shows how to create a codec for a custom class using RecordCodecBuilder.

LANGUAGE: java
CODE:
public static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(
    Codec.INT.fieldOf("beans_amount").forGetter(CoolBeansClass::getBeansAmount),
    Registries.ITEM.getCodec().fieldOf("bean_type").forGetter(CoolBeansClass::getBeanType),
    BlockPos.CODEC.listOf().fieldOf("bean_positions").forGetter(CoolBeansClass::getBeanPositions)
    // Up to 16 fields can be declared here
).apply(instance, CoolBeansClass::new));

----------------------------------------

TITLE: Creating Armor Item Model in Fabric
DESCRIPTION: Provides an example of a JSON model file for an armor item (helmet). This defines how the item appears in the inventory and when held.

LANGUAGE: json
CODE:
{
  "parent": "item/generated",
  "textures": {
    "layer0": "fabric-docs-reference:item/guidite_helmet"
  }
}

----------------------------------------

TITLE: Item Group Integration
DESCRIPTION: Adding custom items to the ingredients ItemGroup using Fabric API's item group events

LANGUAGE: java
CODE:
public static void initialize() {
    ItemGroupEvents.modifyEntriesEvent(ItemGroups.INGREDIENTS).register(entries -> {
        entries.add(SUSPICIOUS_SUBSTANCE);
    });
}

----------------------------------------

TITLE: Implementing Custom SoundInstance in Fabric
DESCRIPTION: Example of creating a custom SoundInstance class that extends MovingSoundInstance to allow for more control over sound behavior.

LANGUAGE: java
CODE:
public class CustomSoundInstance extends MovingSoundInstance {

    private final LivingEntity entity;

    public CustomSoundInstance(SoundEvent sound, SoundCategory category, LivingEntity entity) {
        super(sound, category, SoundInstance.createRandom());
        this.entity = entity;
        this.repeat = true;
        this.repeatDelay = 0;
        this.volume = 1.0F;
        this.relative = false;
    }

    @Override
    public void tick() {
        if (this.entity.isRemoved()) {
            this.setDone();
            return;
        }
        this.x = (float)this.entity.getX();
        this.y = (float)this.entity.getY();
        this.z = (float)this.entity.getZ();
    }
}

----------------------------------------

TITLE: Adding Translation Key for Item Group in JSON
DESCRIPTION: This JSON snippet shows how to add a translation key for the custom item group in the language file.

LANGUAGE: json
CODE:
{
  "itemGroup.fabric_docs_reference": "Fabric Docs Reference"
}

----------------------------------------

TITLE: Drawing Lines with DrawContext in Java
DESCRIPTION: Demonstrates drawing horizontal and vertical lines using DrawContext's line drawing methods.

LANGUAGE: java
CODE:
context.drawHorizontalLine(10, 100, 10, 0xFFFFFFFF);
context.drawVerticalLine(10, 10, 100, 0xFFFFFFFF);

----------------------------------------

TITLE: Drawing Text with DrawContext
DESCRIPTION: Demonstrates basic text rendering using DrawContext's drawText method.

LANGUAGE: java
CODE:
context.drawText(textRenderer, "Hello World", 10, 10, 0xFFFFFFFF, true);

----------------------------------------

TITLE: Defining a Custom Payload for Server-to-Client Communication
DESCRIPTION: This code defines a custom payload 'SummonLightningS2CPayload' for sending lightning summoning data from server to client. It includes the payload identifier, ID, and codec for serialization.

LANGUAGE: java
CODE:
public record SummonLightningS2CPayload(BlockPos pos) implements CustomPayload {
    public static final Identifier ID = new Identifier("fabric-docs-reference", "summon_lightning");
    public static final CustomPayload.Id<SummonLightningS2CPayload> TYPE = CustomPayload.id(ID);
    public static final PacketCodec<SummonLightningS2CPayload> CODEC = PacketCodec.ofRecord(TYPE, SummonLightningS2CPayload::pos, SummonLightningS2CPayload::new, BlockPos.CODEC);

    @Override
    public CustomPayload.Id<?> getId() {
        return TYPE;
    }
}

----------------------------------------

TITLE: Implementing Screen Transition in Java for Fabric Mods
DESCRIPTION: This code snippet shows an advanced implementation of a custom screen that allows returning to the previous screen. It stores the previous screen and provides a method to close the current screen and return to the previous one.

LANGUAGE: java
CODE:
public class CustomScreen extends Screen {
    private final Screen parent;

    public CustomScreen(Text title, Screen parent) {
        super(title);
        this.parent = parent;
    }

    @Override
    public void close() {
        if (this.client != null) {
            this.client.setScreen(this.parent);
        }
    }

    // ... rest of the class implementation
}

----------------------------------------

TITLE: Cloning Forked Repository in Git
DESCRIPTION: Command to clone a forked repository of the Fabric Documentation project using Git.

LANGUAGE: sh
CODE:
# make sure to replace "your-username" with your actual username
git clone https://github.com/your-username/fabric-docs.git

----------------------------------------

TITLE: Demonstrating Incorrect Client-Only Code Usage in Server Environment
DESCRIPTION: This snippet shows an incorrect implementation of a highlighting wand item that uses client-only code, which would cause a server crash. It's used to demonstrate why proper networking is important.

LANGUAGE: java
CODE:
public class HighlightingWandItem extends Item {
    public HighlightingWandItem(Item.Settings settings) {
        super(settings);
    }

    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
        BlockPos target = ...

        // BAD CODE: DON'T EVER DO THIS!
        ClientBlockHighlighting.highlightBlock(MinecraftClient.getInstance(), target);
        return super.use(world, user, hand);
    }
}

----------------------------------------

TITLE: Embedding Code Snippets in Markdown
DESCRIPTION: Examples of embedding code snippets from the reference mod into Markdown files using VitePress syntax.

LANGUAGE: markdown
CODE:
<<< @/reference/latest/src/main/java/com/example/docs/FabricDocsReference.java{15-21}

LANGUAGE: markdown
CODE:
@[code transcludeWith=#entrypoint](@/reference/latest/src/main/java/com/example/docs/FabricDocsReference.java)

----------------------------------------

TITLE: Installing Java 21 on Fedora
DESCRIPTION: Command to install Java 21 OpenJDK on Fedora using dnf package manager.

LANGUAGE: sh
CODE:
sudo dnf install java-21-openjdk

----------------------------------------

TITLE: Defining and Registering Custom Item Group in Java
DESCRIPTION: This snippet demonstrates how to create a static final field for the item group, define a registry key, and register the item group using the FabricItemGroupEvents.

LANGUAGE: java
CODE:
public static final RegistryKey<ItemGroup> ITEM_GROUP = RegistryKey.of(RegistryKeys.ITEM_GROUP, new Identifier(FabricDocsReference.MOD_ID, "fabric_docs_reference"));

FabricItemGroupEvents.modifyEntriesEvent(ITEM_GROUP).register(content -> {
    content.add(EXAMPLE_ITEM);
    content.add(EXAMPLE_BLOCK);
});

----------------------------------------

TITLE: Playing and Stopping a Custom Sound Instance
DESCRIPTION: Demonstrates how to play and stop a custom SoundInstance using the Minecraft sound manager on the client side.

LANGUAGE: java
CODE:
// Playing the custom SoundInstance
MinecraftClient client = MinecraftClient.getInstance();
SoundInstance soundInstance = new CustomSoundInstance(FabricDocsDynamicSound.ENGINE_LOOP, SoundCategory.BLOCKS, client.player);
client.getSoundManager().play(soundInstance);

// Stopping the custom SoundInstance
client.getSoundManager().stop(soundInstance);

----------------------------------------

TITLE: Creating Custom Widget Class
DESCRIPTION: Demonstrates creating a custom widget by extending ClickableWidget class. Implements basic rendering functionality and position handling. Shows implementation of required interfaces for drawing, events, accessibility and selection.

LANGUAGE: java
CODE:
public class CustomWidget extends ClickableWidget {
    public CustomWidget(int x, int y, int width, int height, Text message) {
        super(x, y, width, height, message);
    }

    @Override
    public void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {
        // Draw a white box with a black border
        context.fill(getX(), getY(), getX() + width, getY() + height, 0xFFFFFFFF);
        context.drawBorder(getX(), getY(), width, height, 0xFF000000);
        
        // Draw the message text centered in the widget
        context.drawCenteredTextWithShadow(
            textRenderer,
            getMessage(),
            getX() + width / 2,
            getY() + (height - 8) / 2,
            0xFF000000
        );
    }
}

----------------------------------------

TITLE: Configuring Subproject Dependencies in Gradle
DESCRIPTION: Shows how to properly configure dependencies on other Loom projects in a multi-project build using the namedElements configuration and client source sets.

LANGUAGE: groovy
CODE:
dependencies {
 implementation project(path: ":name", configuration: "namedElements")
}

dependencies {
 clientImplementation project(":name").sourceSets.client.output
}

----------------------------------------

TITLE: Triggering Custom Event with Mixin in Java
DESCRIPTION: This mixin triggers the custom SheepShearCallback event when a player attempts to shear a sheep in the game.

LANGUAGE: java
CODE:
@Mixin(SheepEntity.class)
public class SheepEntityMixin {
    @Inject(method = "interactMob", at = @At(value = "INVOKE", target = "Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V"), cancellable = true)
    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {
        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);

        if (result != ActionResult.PASS) {
            cir.setReturnValue(result);
        }
    }
}

----------------------------------------

TITLE: Checking Java Version in Windows Command Prompt
DESCRIPTION: Command to verify the installed Java version on Windows. This command displays the version number of Java installed on the system.

LANGUAGE: batch
CODE:
java -version

----------------------------------------

TITLE: Creating Translatable Text in Java
DESCRIPTION: Shows how to create translatable Text objects that reference keys in language files for internationalization in Minecraft mods.

LANGUAGE: java
CODE:
Text translatable = Text.translatable("my_mod.text.hello");

// Similarly to literals, translatable text can be easily made mutable.
MutableText mutable = Text.translatable("my_mod.text.bye");

----------------------------------------

TITLE: Implementing Dynamic Light Emission in Java
DESCRIPTION: This Java snippet demonstrates how to implement dynamic light emission for a block based on its custom property state in Minecraft modding.

LANGUAGE: java
CODE:
private static ToIntFunction<BlockState> getLightLevelLit() {
    return (state) -> state.get(ACTIVATED) ? 15 : 0;
}

----------------------------------------

TITLE: Creating Parameterized Custom Criterion in Java
DESCRIPTION: Extends the custom criterion to include a parameter for the number of times a tool must be used. Updates the conditions, codec, and trigger method.

LANGUAGE: java
CODE:
public class ParameterizedUseToolCriterion extends AbstractCriterion<ParameterizedUseToolCriterion.Conditions> {
    // ... (similar to UseToolCriterion)

    public static class Conditions extends AbstractCriterionConditions {
        private final int requiredTimes;
        private static final Codec<Conditions> CODEC = RecordCodecBuilder.create(instance -> instance.group(
                EntityPredicate.contextPredicateCodec().fieldOf("player").forGetter(Conditions::playerPredicate),
                Codec.INT.fieldOf("required_times").forGetter(conditions -> conditions.requiredTimes)
        ).apply(instance, Conditions::new));

        public Conditions(ContextAwarePredicate playerPredicate, int requiredTimes) {
            super(ID, playerPredicate);
            this.requiredTimes = requiredTimes;
        }

        public boolean test(ServerPlayerEntity player, int times) {
            return this.playerPredicate.test(player.getServerWorld(), player.getPos(), player) && times >= requiredTimes;
        }

        @Override
        public Codec<? extends AbstractCriterionConditions> codec() {
            return CODEC;
        }
    }

    public void trigger(ServerPlayerEntity player, int times) {
        this.trigger(player, conditions -> conditions.test(player, times));
    }
}

----------------------------------------

TITLE: Implementing Widget Hover Effects in Java
DESCRIPTION: Demonstrates how to implement hover effects for a custom widget by changing colors based on the hover state.

LANGUAGE: java
CODE:
@Override
public void render(DrawContext context, int mouseX, int mouseY, float delta) {
    int color = isHovered() ? 0xFF00FF00 : 0xFFFFFFFF;
    context.fill(getX(), getY(), getX() + width, getY() + height, color);
}

----------------------------------------

TITLE: Implementing Custom Advancement Criterion in Java
DESCRIPTION: Demonstrates how to create a custom advancement criterion for tracking tool usage. Includes the criterion class, conditions, and trigger method.

LANGUAGE: java
CODE:
public class UseToolCriterion extends AbstractCriterion<UseToolCriterion.Conditions> {
    public static final Identifier ID = new Identifier("fabric-docs-reference", "use_tool");

    @Override
    public Identifier getId() {
        return ID;
    }

    @Override
    public Conditions conditionsFromJson(JsonObject obj, ContextAwarePredicate playerPredicate, PredicateDeserializer predicateDeserializer) {
        return new Conditions(playerPredicate);
    }

    public void trigger(ServerPlayerEntity player) {
        this.trigger(player, conditions -> conditions.test(player));
    }

    public static class Conditions extends AbstractCriterionConditions {
        private static final Codec<Conditions> CODEC = EntityPredicate.contextPredicateCodec()
                .xmap(Conditions::new, Conditions::playerPredicate);

        public Conditions(ContextAwarePredicate playerPredicate) {
            super(ID, playerPredicate);
        }

        public boolean test(ServerPlayerEntity player) {
            return this.playerPredicate.test(player.getServerWorld(), player.getPos(), player);
        }

        @Override
        public Codec<? extends AbstractCriterionConditions> codec() {
            return CODEC;
        }
    }
}

----------------------------------------

TITLE: Decrementing Item Stack with TypedActionResult
DESCRIPTION: Demonstrates how to decrease the quantity of an item stack by 1 and return a success result when handling item usage events.

LANGUAGE: java
CODE:
ItemStack heldStack = user.getStackInHand(hand);
heldStack.decrement(1);
TypedActionResult.success(heldStack);

----------------------------------------

TITLE: Registering a Basic Integer Component in Java
DESCRIPTION: Demonstrates how to register a basic integer component type for storing a click count on an item.

LANGUAGE: Java
CODE:
public static final ComponentType<Integer> CLICK_COUNT_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "click_count"),
    ComponentType.<Integer>builder().codec(Codec.INT).build()
);

----------------------------------------

TITLE: Creating a Custom Sound Instance
DESCRIPTION: Shows how to create a custom SoundInstance class extending MovingSoundInstance for more control over sound behavior.

LANGUAGE: java
CODE:
public class CustomSoundInstance extends MovingSoundInstance {

    private final LivingEntity entity;

    public CustomSoundInstance(SoundEvent sound, SoundCategory category, LivingEntity entity) {
        super(sound, category, SoundInstance.createRandom());
        this.entity = entity;
        this.repeat = true;
        this.repeatDelay = 0;
        this.volume = 1.0F;
        this.relative = false;
    }

    @Override
    public void tick() {
        if (this.entity.isRemoved()) {
            this.setDone();
            return;
        }
        this.x = (float)this.entity.getX();
        this.y = (float)this.entity.getY();
        this.z = (float)this.entity.getZ();
    }
}

----------------------------------------

TITLE: Using Custom Argument Type in Command in Java
DESCRIPTION: Demonstrates how to use a custom argument type (BlockPosArgumentType) in a Fabric command definition.

LANGUAGE: java
CODE:
public void register(CommandDispatcher<ServerCommandSource> dispatcher) {
    dispatcher.register(CommandManager.literal("tppos")
            .then(CommandManager.argument("pos", BlockPosArgumentType.blockPos())
                    .executes(context -> {
                        BlockPos pos = context.getArgument("pos", BlockPos.class);
                        context.getSource().getPlayer().requestTeleport(pos.getX() + 0.5, pos.getY(), pos.getZ() + 0.5);
                        context.getSource().sendFeedback(() -> Text.literal("Teleported to " + pos.toShortString()), false);
                        return 1;
                    })));
}

----------------------------------------

TITLE: Creating a Custom Sound Instance
DESCRIPTION: Shows how to create a custom SoundInstance class extending MovingSoundInstance for more control over sound behavior.

LANGUAGE: java
CODE:
public class CustomSoundInstance extends MovingSoundInstance {

    private final LivingEntity entity;

    public CustomSoundInstance(SoundEvent sound, SoundCategory category, LivingEntity entity) {
        super(sound, category, SoundInstance.createRandom());
        this.entity = entity;
        this.repeat = true;
        this.repeatDelay = 0;
        this.volume = 1.0F;
        this.relative = false;
    }

    @Override
    public void tick() {
        if (this.entity.isRemoved()) {
            this.setDone();
            return;
        }
        this.x = (float)this.entity.getX();
        this.y = (float)this.entity.getY();
        this.z = (float)this.entity.getZ();
    }
}

----------------------------------------

TITLE: Implementing FabricTagProvider for Item Tags in Java
DESCRIPTION: Creates a custom tag provider class that extends FabricTagProvider<Item> for generating item tags. It overrides the configure method to define tag generation logic.

LANGUAGE: java
CODE:
public class FabricDocsReferenceItemTagProvider extends FabricTagProvider<Item> {
    private static final Logger LOGGER = LoggerFactory.getLogger("fabric-docs-reference");

    public FabricDocsReferenceItemTagProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {
        super(output, RegistryKeys.ITEM, registriesFuture);
    }

    @Override
    protected void configure(RegistryWrapper.WrapperLookup arg) {
        // We'll be adding tags here later!
    }
}

----------------------------------------

TITLE: Implementing FabricTagProvider for Item Tags in Java
DESCRIPTION: Creates a custom tag provider class that extends FabricTagProvider<Item> for generating item tags. It overrides the configure method to define tag generation logic.

LANGUAGE: java
CODE:
public class FabricDocsReferenceItemTagProvider extends FabricTagProvider<Item> {
    private static final Logger LOGGER = LoggerFactory.getLogger("fabric-docs-reference");

    public FabricDocsReferenceItemTagProvider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {
        super(output, RegistryKeys.ITEM, registriesFuture);
    }

    @Override
    protected void configure(RegistryWrapper.WrapperLookup arg) {
        // We'll be adding tags here later!
    }
}

----------------------------------------

TITLE: Initializing Minecraft Registries for Testing
DESCRIPTION: This code snippet shows how to initialize Minecraft registries in a JUnit test setup to allow testing of registry-dependent classes.

LANGUAGE: java
CODE:
@BeforeAll
static void setup() {
    Bootstrap.initialize();
    Registry.register(Registries.ITEM, new Identifier("test", "test_item"), Items.DIAMOND);
}

----------------------------------------

TITLE: Advanced Test Configuration in Groovy
DESCRIPTION: Shows advanced testing configuration options including source set creation, mod ID specification, game test settings, EULA acceptance, run directory management, and username customization.

LANGUAGE: groovy
CODE:
fabricApi {
 configureTests {
  // Contains a boolean indicating whether a new source set should be created for the tests.
  // Defaults to `false`
  createSourceSet = true

  // Contains a string representing the mod ID associated with the tests. This must be set if `createSourceSet` is true.
  // This must be the mod id of the mod used for tests in the gametest source set and not your main mod id.
  modId = "example-tests"

  // Contains a boolean indicating whether a run configuration will be created for the server side game tests, using Vanilla Game Test framework.
  // Defaults to `true`
  enableGameTests = true

  // Contains a boolean indicating whether a run configuration will be created for the client side game tests, using the Fabric API Client Test framework.
  // Defaults to `true`
  enableClientGameTests = true

  // Contains a boolean indicating whether the eula has been accepted. By enabling this you agree to the Minecraft EULA located at https://aka.ms/MinecraftEULA.
  // Defaults to `false`
  eula = true

  // Contains a boolean indicating whether the run directories should be cleared before running the tests.
  // This only works when `enableClientGameTests` is `true`.
  // Defaults to `true`
  clearRunDirectory = true

  // Contains a string representing the username to use for the client side game tests.
  // Defaults to `Player0`
  username = "Username"
 }
}

----------------------------------------

TITLE: Creating a Pack for Data Generation (Java)
DESCRIPTION: This code snippet demonstrates how to create a Pack object within the onInitializeDataGenerator method. The Pack is used to store generated data from various providers.

LANGUAGE: java
CODE:
@[code lang=java transcludeWith=:::datagen-setup:pack](@/reference/latest/src/client/java/com/example/docs/datagen/FabricDocsReferenceDataGenerator.java)

----------------------------------------

TITLE: Registering Block Entity Type in ModBlockEntities
DESCRIPTION: Shows how to register a BlockEntityType in a dedicated registration class to make it available in the game.

LANGUAGE: java
CODE:
public class ModBlockEntities {
    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY =
            Registry.register(Registries.BLOCK_ENTITY_TYPE,
                    new Identifier("fabric-docs-reference", "counter"),
                    FabricBlockEntityTypeBuilder.create(CounterBlockEntity::new, ModBlocks.COUNTER_BLOCK).build());

    public static void registerBlockEntities() {
        FabricDocsReference.LOGGER.info("Registering Block Entities for " + FabricDocsReference.MOD_ID);
    }
}

----------------------------------------

TITLE: Registering a Pillar Block in Java
DESCRIPTION: This snippet demonstrates how to register a custom pillar block (Condensed Oak Log) using the PillarBlock class in Minecraft modding.

LANGUAGE: java
CODE:
public static final Block CONDENSED_OAK_LOG = registerBlock("condensed_oak_log",
    new PillarBlock(FabricBlockSettings.copyOf(Blocks.OAK_LOG)));

----------------------------------------

TITLE: Refactoring Command Execution with Shared Method in Java
DESCRIPTION: Demonstrates how to refactor command execution by creating a shared method for handling different argument combinations in Fabric.

LANGUAGE: java
CODE:
public void register(CommandDispatcher<ServerCommandSource> dispatcher) {
    dispatcher.register(CommandManager.literal("argtater")
            .then(CommandManager.argument("int1", IntegerArgumentType.integer())
                    .executes(context -> argtater(context, IntegerArgumentType.getInteger(context, "int1"), null))
                    .then(CommandManager.argument("int2", IntegerArgumentType.integer())
                            .executes(context -> argtater(context,
                                    IntegerArgumentType.getInteger(context, "int1"),
                                    IntegerArgumentType.getInteger(context, "int2"))))));
}

----------------------------------------

TITLE: Registering a Pillar Block in Java
DESCRIPTION: This snippet demonstrates how to register a custom pillar block (Condensed Oak Log) using the PillarBlock class in Minecraft modding.

LANGUAGE: java
CODE:
public static final Block CONDENSED_OAK_LOG = registerBlock("condensed_oak_log",
    new PillarBlock(FabricBlockSettings.copyOf(Blocks.OAK_LOG)));

----------------------------------------

TITLE: Registering a Custom Potion in Fabric
DESCRIPTION: Uses the FabricBrewingRecipeRegistryBuilder.BUILD event to register the custom potion with BrewingRecipeRegistry. Specifies the input potion, ingredient, and output potion for brewing.

LANGUAGE: java
CODE:
@Override
public void onInitialize() {
    Registry.register(Registries.STATUS_EFFECT, new Identifier(MOD_ID, "tater"), TATER_EFFECT);
    Registry.register(Registries.POTION, TATER_POTION_KEY, TATER_POTION);

    FabricBrewingRecipeRegistryBuilder.BUILD.register(event -> {
        event.getBrewingRegistry().registerPotionRecipe(
                Potions.AWKWARD,
                Items.POTATO,
                TATER_POTION);
    });
}

----------------------------------------

TITLE: Text Formatting Implementation
DESCRIPTION: Shows how to apply multiple formatting options to text using the Formatting enum, including colors and styles.

LANGUAGE: java
CODE:
MutableText result = Text.literal("Hello World!")
  .formatted(Formatting.AQUA, Formatting.BOLD, Formatting.UNDERLINE);

----------------------------------------

TITLE: Implementing Tool Material Class in Java
DESCRIPTION: Creates a custom tool material class called GuiditeMaterial that defines properties for a new set of tools. Shows implementation of various required methods for tool configuration.

LANGUAGE: java
CODE:
public class GuiditeMaterial implements ToolMaterial {
    public static final GuiditeMaterial INSTANCE = new GuiditeMaterial();

    @Override
    public int getDurability() {
        return 1000;
    }

    @Override
    public float getMiningSpeedMultiplier() {
        return 6.0F;
    }

    @Override
    public float getAttackDamage() {
        return 2.0F;
    }

    @Override
    public int getMiningLevel() {
        return 2;
    }

    @Override
    public int getEnchantability() {
        return 18;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return Ingredient.ofItems(ModItems.GUIDITE);
    }
}

----------------------------------------

TITLE: Creating a Registry Dispatch Codec
DESCRIPTION: Illustrates how to create a registry dispatch codec for handling different types of objects with a common interface.

LANGUAGE: java
CODE:
// Now we can create a codec for bean types
// based on the previously created registry
Codec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();

// And based on that, here's our registry dispatch codec for beans!
// The first argument is the field name for the bean type.
// When left out, it will default to "type".
Codec<Bean> beanCodec = beanTypeCodec.dispatch("type", Bean::getType, BeanType::codec);

----------------------------------------

TITLE: Creating a Registry Dispatch Codec
DESCRIPTION: Illustrates how to create a registry dispatch codec for handling different types of objects with a common interface.

LANGUAGE: java
CODE:
// Now we can create a codec for bean types
// based on the previously created registry
Codec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();

// And based on that, here's our registry dispatch codec for beans!
// The first argument is the field name for the bean type.
// When left out, it will default to "type".
Codec<Bean> beanCodec = beanTypeCodec.dispatch("type", Bean::getType, BeanType::codec);

----------------------------------------

TITLE: Scaling a Rendered Shape using MatrixStack in Minecraft
DESCRIPTION: This snippet shows how to use MatrixStack to apply scaling transformations to a rendered shape. It calculates a scale factor based on tick delta and applies it to the shape.

LANGUAGE: java
CODE:
ClientTickEvents.END_CLIENT_TICK.register(client -> {
    HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {
        BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
        MatrixStack matrixStack = drawContext.getMatrices();

        RenderSystem.enableBlend();
        RenderSystem.defaultBlendFunc();
        RenderSystem.setShader(GameRenderer::getPositionColorProgram);

        matrixStack.push();
        float scale = 1.0f + (float) Math.sin(tickDelta * 0.1) * 0.1f;
        matrixStack.translate(20, 40, 0);
        matrixStack.scale(scale, scale, 1.0f);
        matrixStack.translate(-20, -40, 0);

        Matrix4f positionMatrix = matrixStack.peek().getPositionMatrix();

        bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);

        bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next();
        bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next();
        bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next();
        bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next();

        BufferRenderer.drawWithGlobalProgram(bufferBuilder.end());

        matrixStack.pop();

        RenderSystem.disableBlend();
    });
});

----------------------------------------

TITLE: Custom Class Definition for Codec Example
DESCRIPTION: Example class definition showing the structure needed for creating a custom Codec implementation.

LANGUAGE: java
CODE:
public class CoolBeansClass {

    private final int beansAmount;
    private final Item beanType;
    private final List<BlockPos> beanPositions;

    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}

    public int getBeansAmount() { return this.beansAmount; }
    public Item getBeanType() { return this.beanType; }
    public List<BlockPos> getBeanPositions() { return this.beanPositions; }
}

----------------------------------------

TITLE: Registering Tool Items in Fabric
DESCRIPTION: Demonstrates how to register custom tool items using the ModItems class and add them to the creative inventory item group.

LANGUAGE: java
CODE:
public static final Item GUIDITE_SWORD = registerItem("guidite_sword", new SwordItem(GuiditeMaterial.INSTANCE, 3, -2.4F, new FabricItemSettings()));

public static final ItemGroup ITEM_GROUP = FabricItemGroup.builder()
    .icon(() -> new ItemStack(ModItems.GUIDITE))
    .displayName(Text.translatable("itemgroup.fabric-docs-reference"))
    .entries((context, entries) -> {
        entries.add(GUIDITE_SWORD);
    })
    .build();

----------------------------------------

TITLE: Adding Fabric Loader JUnit Dependency in Gradle
DESCRIPTION: This snippet shows how to add the Fabric Loader JUnit dependency to the build.gradle file for enabling unit testing in a Minecraft modding project.

LANGUAGE: groovy
CODE:
testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"

----------------------------------------

TITLE: Generating Enchantment JSON using Fabric Data Generation in Java
DESCRIPTION: This code snippet demonstrates how to create an 'EnchantmentGenerator' class to dynamically generate the JSON for the custom enchantment using Fabric's data generation tools.

LANGUAGE: java
CODE:
public class EnchantmentGenerator extends FabricEnchantmentProvider {
    public EnchantmentGenerator(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generateEnchantmentData(Consumer<EnchantmentJsonBuilder> consumer) {
        consumer.accept(EnchantmentJsonBuilder.create("thundering")
                .configure(builder -> builder
                        .display(EnchantmentJsonBuilder.DisplayBuilder.create()
                                .maxLevel(3)
                                .rarity(Rarity.VERY_RARE))
                        .target(EnchantmentTarget.WEAPON)
                        .effect(EnchantmentJsonBuilder.EffectBuilder.create()
                                .entityTarget(EntityTarget.HIT)
                                .effect(ModEnchantmentEffects.LIGHTNING, 1.0f))));
    }
}

----------------------------------------

TITLE: Configuring Server Production Run Task in Groovy
DESCRIPTION: This snippet shows how to configure the server production run task, including specifying Fabric Installer version, Fabric Loader version, and Minecraft version. It allows running the mod with a different Minecraft version for cross-version development.

LANGUAGE: groovy
CODE:
tasks.register("prodServer", net.fabricmc.loom.task.prod.ServerProductionRunTask) {
    // The version of the Fabric Installer to use. This must be specified.
    installerVersion = "1.0.1"

    // The version of Fabric Loader to use.
    // Defaults to the version of Fabric Loader that the project is using.
    loaderVersion = "0.16.10"

    // The version of Minecraft to use.
    // Defaults to the version of Minecraft that the project is using.
    minecraftVersion = "1.21.4"
}

----------------------------------------

TITLE: Registering a Block with Dynamic Light Level in Java
DESCRIPTION: This Java snippet shows how to register a custom block (Prismarine Lamp) with dynamic light level based on its state.

LANGUAGE: java
CODE:
public static final Block PRISMARINE_LAMP = registerBlock("prismarine_lamp",
    new PrismarineLampBlock(FabricBlockSettings.of(Material.REDSTONE_LAMP).luminance(PrismarineLampBlock::getLightLevel)));

----------------------------------------

TITLE: Defining a Loot Table for a Custom Block in JSON
DESCRIPTION: This JSON creates a loot table for a custom block (Condensed Dirt) in Minecraft. It specifies that the block should drop itself when broken or exploded.

LANGUAGE: json
CODE:
{
  "type": "minecraft:block",
  "pools": [
    {
      "bonus_rolls": 0.0,
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ],
      "entries": [
        {
          "type": "minecraft:item",
          "name": "fabric-docs-reference:condensed_dirt"
        }
      ],
      "rolls": 1.0
    }
  ]
}

----------------------------------------

TITLE: Creating a Blockstate Definition for a Custom Block in JSON
DESCRIPTION: This JSON defines the blockstate for a custom block (Condensed Dirt) in Minecraft. It specifies which model to use for the block's default state.

LANGUAGE: json
CODE:
{
  "variants": {
    "": {
      "model": "fabric-docs-reference:block/condensed_dirt"
    }
  }
}

----------------------------------------

TITLE: Initializing Block Registration Class in Java
DESCRIPTION: Creates a basic ModBlocks class with an initialize method to trigger static initialization of block instances.

LANGUAGE: java
CODE:
public class ModBlocks {
    // ...

    public static void initialize() {}
}

----------------------------------------

TITLE: Initializing Block Registration Class in Java
DESCRIPTION: Creates a basic ModBlocks class with an initialize method to trigger static initialization of block instances.

LANGUAGE: java
CODE:
public class ModBlocks {
    // ...

    public static void initialize() {}
}

----------------------------------------

TITLE: Registering Custom Textured Block Model
DESCRIPTION: Creates a block model with different textures for sides versus top/bottom faces using TexturedModel system.

LANGUAGE: java
CODE:
TexturedModel.CUBE_TOP.upload(ModBlocks.PIPE_BLOCK, blockStateModelGenerator);

----------------------------------------

TITLE: Creating Optional Subcommand in Fabric
DESCRIPTION: Illustrates how to create an optional subcommand, allowing both the main command and the subcommand to be valid.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("command_two")
        .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)
        .then(CommandManager.literal("sub_command_two")
                .executes(FabricDocsReferenceCommands::executeCommandSubCommandTwo)
        )
);

----------------------------------------

TITLE: JSON Structure Example
DESCRIPTION: Sample JSON structure showing how the serialized data would look for the CoolBeansClass.

LANGUAGE: json
CODE:
{
  "beans_amount": 5,
  "bean_type": "beanmod:mythical_beans",
  "bean_positions": [
    [1, 2, 3],
    [4, 5, 6]
  ]
}

----------------------------------------

TITLE: Custom Sounds Helper Class Implementation
DESCRIPTION: Helper class for managing multiple sound events with static references and registration logic.

LANGUAGE: java
CODE:
public class CustomSounds {
    public static final Identifier METAL_WHISTLE = new Identifier(FabricDocsReference.MOD_ID, "metal_whistle");
    public static final SoundEvent METAL_WHISTLE_EVENT = SoundEvent.of(METAL_WHISTLE);

    public static void register() {
        Registry.register(Registries.SOUND_EVENT, METAL_WHISTLE, METAL_WHISTLE_EVENT);
    }

    public static void init() {
        CustomSounds.register();
    }
}

----------------------------------------

TITLE: Custom Sounds Helper Class Implementation
DESCRIPTION: Helper class for managing multiple sound events with static references and registration logic.

LANGUAGE: java
CODE:
public class CustomSounds {
    public static final Identifier METAL_WHISTLE = new Identifier(FabricDocsReference.MOD_ID, "metal_whistle");
    public static final SoundEvent METAL_WHISTLE_EVENT = SoundEvent.of(METAL_WHISTLE);

    public static void register() {
        Registry.register(Registries.SOUND_EVENT, METAL_WHISTLE, METAL_WHISTLE_EVENT);
    }

    public static void init() {
        CustomSounds.register();
    }
}

----------------------------------------

TITLE: Custom Sounds Helper Class Implementation
DESCRIPTION: Helper class for managing multiple sound events with static references and registration logic.

LANGUAGE: java
CODE:
public class CustomSounds {
    public static final Identifier METAL_WHISTLE = new Identifier(FabricDocsReference.MOD_ID, "metal_whistle");
    public static final SoundEvent METAL_WHISTLE_EVENT = SoundEvent.of(METAL_WHISTLE);

    public static void register() {
        Registry.register(Registries.SOUND_EVENT, METAL_WHISTLE, METAL_WHISTLE_EVENT);
    }

    public static void init() {
        CustomSounds.register();
    }
}

----------------------------------------

TITLE: Language File Translation Keys
DESCRIPTION: Example of a language file (en_us.json) containing translation keys and their corresponding text values.

LANGUAGE: json
CODE:
{
  "my_mod.text.hello": "Hello!",
  "my_mod.text.bye": "Goodbye :("
}

----------------------------------------

TITLE: Defining a Block Model for a Custom Block in JSON
DESCRIPTION: This JSON snippet defines the block model for a custom block (Condensed Dirt) in Minecraft. It uses the 'block/cube_all' parent and specifies the texture to use.

LANGUAGE: json
CODE:
{
  "parent": "block/cube_all",
  "textures": {
    "all": "fabric-docs-reference:block/condensed_dirt"
  }
}

----------------------------------------

TITLE: Creating Basic Command with Required Argument - Java
DESCRIPTION: Demonstrates how to create a command that requires an integer argument in Fabric. The command will fail if the argument is not provided.

LANGUAGE: java
CODE:
public static void register() {
    CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {
        dispatcher.register(CommandManager.literal("command_with_arg").then(CommandManager.argument("value", IntegerArgumentType.integer()).executes(FabricDocsReferenceCommands::executeCommandWithArg)));
    });
}

----------------------------------------

TITLE: Initializing ModItems Class for Item Registration in Java
DESCRIPTION: This code snippet defines a ModItems class with methods for registering items and adding them to item groups. It includes a static initialize method to ensure proper class initialization.

LANGUAGE: java
CODE:
public class ModItems {
    public static final Item SUSPICIOUS_SUBSTANCE = registerItem("suspicious_substance", new Item(new FabricItemSettings()));

    private static Item registerItem(String name, Item item) {
        return Registry.register(Registries.ITEM, new Identifier(FabricDocsReference.MOD_ID, name), item);
    }

    public static void addItemsToItemGroup() {
        addToItemGroup(ItemGroups.INGREDIENTS, SUSPICIOUS_SUBSTANCE);
    }

    private static void addToItemGroup(ItemGroup group, Item item) {
        ItemGroupEvents.modifyEntriesEvent(group).register(entries -> entries.add(item));
    }

    public static void initialize() {
        FabricDocsReference.LOGGER.info("Registering items for " + FabricDocsReference.MOD_ID);
        addItemsToItemGroup();
    }
}

----------------------------------------

TITLE: Using the Advanced Sound System
DESCRIPTION: Demonstrates how to use the DynamicSoundManager to play and stop sounds based on network packets.

LANGUAGE: java
CODE:
public class ReceiveS2C {
    public static void receiveSoundStart(MinecraftClient client, DynamicSoundSource source) {
        client.execute(() -> {
            DynamicSoundManager soundManager = DynamicSoundManager.getInstance();
            if (!soundManager.isPlaying(source)) {
                soundManager.playSound(source);
            }
        });
    }

    public static void receiveSoundStop(MinecraftClient client, DynamicSoundSource source) {
        client.execute(() -> {
            DynamicSoundManager soundManager = DynamicSoundManager.getInstance();
            soundManager.stopSound(source);
        });
    }
}

----------------------------------------

TITLE: Registering Custom Item Group in Fabric Mod (Java)
DESCRIPTION: Registers the custom item group using the Registry class. This code sets up the display name and icon for the item group.

LANGUAGE: java
CODE:
Registry.register(Registries.ITEM_GROUP, ITEM_GROUP, FabricItemGroup.builder()
    .displayName(Text.translatable("itemGroup.fabric_docs_reference"))
    .icon(() -> new ItemStack(TEST_ITEM))
    .build()
);

----------------------------------------

TITLE: Defining Block Translations in JSON
DESCRIPTION: This JSON snippet shows how to define translations for a custom block (Condensed Dirt) in Minecraft. It's placed in the assets/mod-id/lang/en_us.json file.

LANGUAGE: json
CODE:
{
    "block.mod_id.condensed_dirt": "Condensed Dirt"
}

----------------------------------------

TITLE: Creating Optional Fields in Codecs
DESCRIPTION: Demonstrates how to create optional fields in codecs, with and without default values.

LANGUAGE: java
CODE:
// Without a default value
MapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos");

// With a default value
MapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos", BlockPos.ORIGIN);

----------------------------------------

TITLE: Creating Text Literals in Java
DESCRIPTION: Demonstrates how to create basic Text objects using Text.of() and Text.literal() methods. Shows the difference between immutable Text and MutableText objects.

LANGUAGE: java
CODE:
Text literal = Text.of("Hello, world!");
MutableText mutable = Text.literal("Hello, world!");
// Keep in mind that a MutableText can be used as a Text, making this valid:
Text mutableAsText = mutable;

----------------------------------------

TITLE: Creating Optional Fields in Codecs
DESCRIPTION: Demonstrates how to create optional fields in codecs, with and without default values.

LANGUAGE: java
CODE:
// Without a default value
MapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos");

// With a default value
MapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos", BlockPos.ORIGIN);

----------------------------------------

TITLE: Basic BlockPos Serialization with Codec
DESCRIPTION: Demonstrates how to serialize and deserialize a BlockPos object to/from JSON using Mojang's Codec system.

LANGUAGE: java
CODE:
BlockPos pos = new BlockPos(1, 2, 3);

// Serialize the BlockPos to a JsonElement
DataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);

----------------------------------------

TITLE: Adding a Custom Widget to a Screen in Java for Fabric
DESCRIPTION: This snippet shows how to add a custom widget to a screen in Fabric. It's typically done in the init method of a Screen class.

LANGUAGE: java
CODE:
@Override
protected void init() {
    super.init();
    this.addDrawableChild(new CustomWidget(10, 10, 100, 20, Text.literal("Custom Widget")));
}

----------------------------------------

TITLE: Registering a Basic Data Component in Java
DESCRIPTION: Demonstrates how to register a basic Integer data component for tracking click counts on an item.

LANGUAGE: Java
CODE:
public static final ComponentType<Integer> CLICK_COUNT_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "click_count"),
    ComponentType.<Integer>builder().codec(Codec.INT).build()
);

----------------------------------------

TITLE: Drawing an Entire Texture with DrawContext in Java
DESCRIPTION: This code shows how to draw an entire texture onto the screen using DrawContext.drawTexture(), specifying texture dimensions for accurate rendering.

LANGUAGE: java
CODE:
context.drawTexture(TEXTURE, 10, 10, 0, 0, 256, 256, 256, 256);

----------------------------------------

TITLE: Generating Chest Loot
DESCRIPTION: Example of generating chest loot table with multiple pools and conditions.

LANGUAGE: java
CODE:
LootTable.Builder builder = LootTable.builder()
    .pool(LootPool.builder()
        .rolls(UniformLootNumberProvider.create(2, 4))
        .with(ItemEntry.builder(Items.APPLE)
            .weight(4)
            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1, 3))))
        .with(ItemEntry.builder(Items.BREAD)
            .weight(3)
            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1, 2)))))
    .pool(LootPool.builder()
        .rolls(ConstantLootNumberProvider.create(1))
        .with(ItemEntry.builder(Items.GOLDEN_APPLE)));

exporter.accept(ModLootTables.TEST_CHEST.getValue(), builder);

----------------------------------------

TITLE: Generating Chest Loot
DESCRIPTION: Example of generating chest loot table with multiple pools and conditions.

LANGUAGE: java
CODE:
LootTable.Builder builder = LootTable.builder()
    .pool(LootPool.builder()
        .rolls(UniformLootNumberProvider.create(2, 4))
        .with(ItemEntry.builder(Items.APPLE)
            .weight(4)
            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1, 3))))
        .with(ItemEntry.builder(Items.BREAD)
            .weight(3)
            .apply(SetCountLootFunction.builder(UniformLootNumberProvider.create(1, 2)))))
    .pool(LootPool.builder()
        .rolls(ConstantLootNumberProvider.create(1))
        .with(ItemEntry.builder(Items.GOLDEN_APPLE)));

exporter.accept(ModLootTables.TEST_CHEST.getValue(), builder);

----------------------------------------

TITLE: Playing Custom Sounds with Block Interaction
DESCRIPTION: Implementation of useOnBlock() method showing how to play sounds when interacting with blocks. The method plays a copper block placement sound using the world instance for more control.

LANGUAGE: java
CODE:
public ActionResult useOnBlock(ItemUsageContext context) {
    context.getWorld().playSound(
        null,
        context.getBlockPos(),
        SoundEvents.BLOCK_COPPER_PLACE,
        SoundCategory.BLOCKS,
        1.0f,
        1.0f
    );
    return ActionResult.SUCCESS;
}

----------------------------------------

TITLE: Block Model JSON
DESCRIPTION: Model definition for how the block appears in the world.

LANGUAGE: json
CODE:
{
  "parent": "block/cube_all",
  "textures": {
    "all": "fabric-docs-reference:block/condensed_dirt"
  }
}

----------------------------------------

TITLE: Registering a Server-Side Packet Receiver
DESCRIPTION: This code registers a global receiver for the custom payload on the server side. It handles the received packet by applying the glowing effect to the specified entity after performing necessary validations.

LANGUAGE: java
CODE:
ServerPlayNetworking.registerGlobalReceiver(GiveGlowingEffectC2SPayload.TYPE, (server, player, handler, payload, responseSender) -> {
    Entity entity = player.getWorld().getEntityById(payload.entityId());
    if (entity instanceof LivingEntity livingEntity
            && player.squaredDistanceTo(entity) <= 5 * 5) {
        server.execute(() -> {
            livingEntity.addStatusEffect(new StatusEffectInstance(StatusEffects.GLOWING, 20 * 5));
        });
    }
});

----------------------------------------

TITLE: Creating Block State Definition
DESCRIPTION: Defines the blockstate JSON file that maps block states to models.

LANGUAGE: json
CODE:
{
  "variants": {
    "": {
      "model": "fabric-docs-reference:block/condensed_dirt"
    }
  }
}

----------------------------------------

TITLE: Adding Custom Damage Type to Minecraft Damage Type Tag
DESCRIPTION: Demonstrates how to add a custom damage type to an existing Minecraft damage type tag.

LANGUAGE: json
CODE:
{
  "replace": false,
  "values": [
    "fabric-docs-reference:tater"
  ]
}

----------------------------------------

TITLE: Installing OpenJDK 17 Development Kit on Fedora
DESCRIPTION: Command to install the OpenJDK 17 Development Kit on Fedora, necessary for mod development.

LANGUAGE: sh
CODE:
sudo dnf install java-17-openjdk-devel

----------------------------------------

TITLE: Creating Chest Loot Table Provider
DESCRIPTION: Implementation of a SimpleFabricLootTableProvider for generating chest loot tables.

LANGUAGE: java
CODE:
public class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {
    public FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {
        super(output, LootContextTypes.CHEST);
    }

    @Override
    public void accept(BiConsumer<Identifier, LootTable.Builder> exporter) {
        // Add loot table generation code here
    }
}

----------------------------------------

TITLE: Block Item Model JSON
DESCRIPTION: Model definition for how the block appears as an item in inventory.

LANGUAGE: json
CODE:
{
  "parent": "fabric-docs-reference:block/condensed_dirt"
}

----------------------------------------

TITLE: Implementing Client-Side Logic for Sending Packets to Server
DESCRIPTION: This code implements client-side logic using UseEntityCallback to send a packet to the server when a player uses a Poisonous Potato on a living entity.

LANGUAGE: java
CODE:
UseEntityCallback.EVENT.register((player, world, hand, entity, hitResult) -> {
    if (world.isClient() && player.getStackInHand(hand).isOf(Items.POISONOUS_POTATO) && entity instanceof LivingEntity) {
        ClientPlayNetworking.send(new GiveGlowingEffectC2SPayload(entity.getId()));
        return ActionResult.SUCCESS;
    }
    return ActionResult.PASS;
});

----------------------------------------

TITLE: Custom Component Record Definition
DESCRIPTION: Definition of a custom component record class with temperature and burnt properties, including codec implementation for data serialization.

LANGUAGE: java
CODE:
public record MyCustomComponent(float temperature, boolean burnt) {
    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance -> instance.group(
        Codec.FLOAT.fieldOf("temperature").forGetter(MyCustomComponent::temperature),
        Codec.BOOL.optionalFieldOf("burnt", false).forGetter(MyCustomComponent::burnt)
    ).apply(instance, MyCustomComponent::new));
}

----------------------------------------

TITLE: Advanced Data Generation Configuration in Groovy
DESCRIPTION: Demonstrates advanced data generation configuration options including output directory customization, source set creation, mod ID specification, validation settings, and resource handling options.

LANGUAGE: groovy
CODE:
fabricApi {
 configureDataGeneration {
  // Contains the output directory where generated data files will be stored.
  // Defaults to `src/main/generated`
  outputDirectory = file("src/generated/resources")

  // Contains a boolean indicating whether a run configuration should be created for the data generation process.
  // Defaults to `true`
  createRunConfiguration = true

  // Contains a boolean indicating whether a new source set should be created for the data generation process.
  // This is useful if you do not want your datagen code to be exported in your mod jar.
  // Defaults to `false`
  createSourceSet = true

  // Contains a string representing the mod ID associated with the data generation process. This must be set if `createSourceSet` is true.
  // This must be the mod id of the mod used for datagen in the datagen source set and not your main mod id.
  modId = "example-datagen"

  // Contains a boolean indicating whether strict validation is enabled.
  // Defaults to `false`
  strictValidation = true

  // Contains a boolean indicating whether the generated resources will be automatically added to the main source set.
  // Defaults to `true`
  addToResources = true

  // Contains a boolean indicating whether data generation will be compiled and run with the client.
  // Defaults to `false`
  client = true
 }
}

----------------------------------------

TITLE: Serializing and Deserializing BlockPos with Codecs in Java
DESCRIPTION: Demonstrates how to serialize a BlockPos to JSON and then deserialize it back using Mojang's codec system.

LANGUAGE: java
CODE:
BlockPos pos = new BlockPos(1, 2, 3);

// Serialisation de la BlockPos en JsonElement
DataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);

LANGUAGE: java
CODE:
// Si on écrivait un vrai mod, il faudrait évidemment prendre en charge les Optionals vides
JsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();

// Voici notre valeur JSON, qui devrait correspondre à `[1,2,3]`,
// puisque c'est le format que le codec de BlockPos utilise.
LOGGER::info("BlockPos sérialisée : {}", json);

// Maintenant on désérialise le JsonElement en BlockPos
DataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);

// Encore une fois, on extrait directement notre valeur du résultat
BlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();

// Et on peut voir qu'on a sérialisé et désérialisé notre BlockPos avec succès !
LOGGER::info("BlockPos désérialisée : {}", pos);

----------------------------------------

TITLE: Implementing Widget Events
DESCRIPTION: Shows how to implement hover effects and color changes based on widget state. Uses isHovered() method from ClickableWidget to modify rendering based on mouse interaction.

LANGUAGE: java
CODE:
@Override
public void renderButton(DrawContext context, int mouseX, int mouseY, float delta) {
    // Change the background color when hovered
    int backgroundColor = isHovered() ? 0xFFCCCCCC : 0xFFFFFFFF;
    
    context.fill(getX(), getY(), getX() + width, getY() + height, backgroundColor);
    context.drawBorder(getX(), getY(), width, height, 0xFF000000);
    
    context.drawCenteredTextWithShadow(
        textRenderer,
        getMessage(),
        getX() + width / 2,
        getY() + (height - 8) / 2,
        0xFF000000
    );
}

----------------------------------------

TITLE: Creating a Custom Potion in Fabric
DESCRIPTION: Declares a field to store a custom Potion instance using StatusEffectInstance. The potion is created with a custom effect, duration, and amplifier.

LANGUAGE: java
CODE:
public class FabricDocsReferencePotions implements ModInitializer {
    public static final String MOD_ID = "fabric-docs-reference";

    public static final StatusEffect TATER_EFFECT = new TaterEffect();

    public static final RegistryKey<Potion> TATER_POTION_KEY = RegistryKey.of(RegistryKeys.POTION,
            new Identifier(MOD_ID, "tater_potion"));

    public static final Potion TATER_POTION = new Potion(
            new StatusEffectInstance(TATER_EFFECT, 20 * 60, 0));
}

----------------------------------------

TITLE: Creating a Custom Potion in Fabric
DESCRIPTION: Declares a field to store a custom Potion instance using StatusEffectInstance. The potion is created with a custom effect, duration, and amplifier.

LANGUAGE: java
CODE:
public class FabricDocsReferencePotions implements ModInitializer {
    public static final String MOD_ID = "fabric-docs-reference";

    public static final StatusEffect TATER_EFFECT = new TaterEffect();

    public static final RegistryKey<Potion> TATER_POTION_KEY = RegistryKey.of(RegistryKeys.POTION,
            new Identifier(MOD_ID, "tater_potion"));

    public static final Potion TATER_POTION = new Potion(
            new StatusEffectInstance(TATER_EFFECT, 20 * 60, 0));
}

----------------------------------------

TITLE: Registering an Advanced Composite Component in Java
DESCRIPTION: Demonstrates how to register a composite component type using a custom record class and codec.

LANGUAGE: Java
CODE:
public static final ComponentType<MyCustomComponent> MY_CUSTOM_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "my_custom_component"),
    ComponentType.<MyCustomComponent>builder().codec(MyCustomComponent.CODEC).build()
);

----------------------------------------

TITLE: Registering an Advanced Composite Component in Java
DESCRIPTION: Demonstrates how to register a composite component type using a custom record class and codec.

LANGUAGE: Java
CODE:
public static final ComponentType<MyCustomComponent> MY_CUSTOM_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "my_custom_component"),
    ComponentType.<MyCustomComponent>builder().codec(MyCustomComponent.CODEC).build()
);

----------------------------------------

TITLE: Creating Item Model JSON for Custom Tool
DESCRIPTION: Shows the JSON structure for creating an item model for a custom tool, using the 'guidite_sword' as an example.

LANGUAGE: json
CODE:
{
  "parent": "item/handheld",
  "textures": {
    "layer0": "fabric-docs-reference:item/guidite_sword"
  }
}

----------------------------------------

TITLE: Closing Custom Screen in Java
DESCRIPTION: Demonstrates how to close a custom screen by setting it to null.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(null);

----------------------------------------

TITLE: Opening Custom Screen in Java
DESCRIPTION: Shows how to open a custom screen using MinecraftClient's setScreen method.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty())
);

----------------------------------------

TITLE: Implementing Shaped Recipes in Fabric
DESCRIPTION: Creation of shaped crafting recipes with specific item positions using pattern strings and character mappings.

LANGUAGE: java
CODE:
ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, EXAMPLE_BLOCK)
    .pattern("###")
    .pattern("#X#")
    .pattern("###")
    .input('#', Items.DIAMOND)
    .input('X', Items.APPLE)
    .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
    .offerTo(exporter);

----------------------------------------

TITLE: Defining Custom Death Message in JSON
DESCRIPTION: Adds a custom death message for the 'Tater' damage type in the language file.

LANGUAGE: json
CODE:
{
  "death.attack.tater": "%1$s died from Tater damage!"
}

----------------------------------------

TITLE: Configuring Block Entity Renderer Registration
DESCRIPTION: Shows how to register a BlockEntityRenderer using BlockEntityRendererFactories in a ClientModInitializer class.

LANGUAGE: java
CODE:
BlockEntityRendererFactories.register(FabricDocsBlockEntityTypes.COUNTER, CounterBlockEntityRenderer::new);

----------------------------------------

TITLE: Creating a Horizontal Block Model in JSON
DESCRIPTION: This JSON snippet defines the model for a horizontal condensed oak log block, extending the cube_column_horizontal model and specifying textures.

LANGUAGE: json
CODE:
{
  "parent": "block/cube_column_horizontal",
  "textures": {
    "end": "fabric-docs-reference:block/condensed_oak_log_top",
    "side": "fabric-docs-reference:block/condensed_oak_log"
  }
}

----------------------------------------

TITLE: Adding Tools to Item Group in Java
DESCRIPTION: Demonstrates how to add the custom tool items to an item group for access in the creative inventory.

LANGUAGE: java
CODE:
itemGroupBuilder.addItem(GUIDITE_SWORD);
itemGroupBuilder.addItem(GUIDITE_SHOVEL);
itemGroupBuilder.addItem(GUIDITE_PICKAXE);
itemGroupBuilder.addItem(GUIDITE_AXE);
itemGroupBuilder.addItem(GUIDITE_HOE);

----------------------------------------

TITLE: Implementing a SoundInstanceCallback Interface
DESCRIPTION: Creates a callback interface for handling sound instance events.

LANGUAGE: java
CODE:
public interface SoundInstanceCallback {
    void onFinished(AbstractDynamicSoundInstance instance);
}

----------------------------------------

TITLE: Defining Block Model JSON
DESCRIPTION: Creates a block model definition using the cube_all type for a simple block texture.

LANGUAGE: json
CODE:
{
  "parent": "block/cube_all",
  "textures": {
    "all": "fabric-docs-reference:block/condensed_dirt"
  }
}

----------------------------------------

TITLE: Configuring Common Production Run Task Options in Groovy
DESCRIPTION: This snippet demonstrates how to configure common options for both server and client production run tasks. It includes setting up mod files, JVM arguments, program arguments, run directory, and Java toolchain.

LANGUAGE: groovy
CODE:
tasks.register("prodServer", net.fabricmc.loom.task.prod.ServerProductionRunTask) {
    // A collection of mod jars that will be used when running the game. The mods must be remapped to run with intermediary names.
    // This uses a Gradle ConfigurableFileCollection allowing the files to come from a variety of sources.
    mods.from file("mod.jar")
    mods.from configurations.exampleConfiguration

    // A list of additional JVM arguments to pass to the game.
    jvmArgs.add("-Dfabric.client.gametest")

    // A list of additional program arguments to pass to the game.
    programArgs.add("--example")

    // The directory to run the game in.
    runDir = file("run")

    // Specify the Java toolchain to use when running the game.
    // Defaults to the Java version being used to run Gradle.
    // See https://docs.gradle.org/current/userguide/toolchains.html#sec:plugins_toolchains
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

----------------------------------------

TITLE: Creating Subcommand in Fabric
DESCRIPTION: Shows how to create a subcommand by appending a literal node to an existing command node.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("command_one")
        .then(CommandManager.literal("sub_command_one")
                .executes(FabricDocsReferenceCommands::executeSubCommandOne)
        )
);

----------------------------------------

TITLE: Registering Block Entity Types in Java
DESCRIPTION: Registers the CounterBlockEntity type in a ModBlockEntities class for Minecraft to recognize and load.

LANGUAGE: java
CODE:
public class ModBlockEntities {
    public static final BlockEntityType<CounterBlockEntity> COUNTER_BLOCK_ENTITY =
            Registry.register(Registries.BLOCK_ENTITY_TYPE,
                    new Identifier(FabricDocsReference.MOD_ID, "counter_block_entity"),
                    FabricBlockEntityTypeBuilder.create(CounterBlockEntity::new,
                            ModBlocks.COUNTER_BLOCK).build());

    public static void registerBlockEntities() {
        FabricDocsReference.LOGGER.info("Registering block entities for " + FabricDocsReference.MOD_ID);
    }
}

----------------------------------------

TITLE: Initializing FabricAdvancementProvider in Java
DESCRIPTION: Creates a base class extending FabricAdvancementProvider to generate advancements. It sets up the constructor and implements the generateAdvancement method.

LANGUAGE: java
CODE:
public class FabricDocsReferenceAdvancementProvider extends FabricAdvancementProvider {
    protected FabricDocsReferenceAdvancementProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generateAdvancement(Consumer<Advancement> consumer) {
        // We'll add our advancements here later
    }
}

----------------------------------------

TITLE: Sound Registration in Mod Initializer
DESCRIPTION: Implementation of sound registration in the mod's main initialization class using the helper class.

LANGUAGE: java
CODE:
public class FabricDocsReferenceSounds implements ModInitializer {
    @Override
    public void onInitialize() {
        CustomSounds.init();
    }
}

----------------------------------------

TITLE: Defining Blockstates for a Pillar Block in JSON
DESCRIPTION: This JSON snippet defines the blockstates for a condensed oak log, specifying different models and rotations based on the axis property.

LANGUAGE: json
CODE:
{
  "variants": {
    "axis=x": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90,
      "y": 90
    },
    "axis=y": {
      "model": "fabric-docs-reference:block/condensed_oak_log"
    },
    "axis=z": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90
    }
  }
}

----------------------------------------

TITLE: Configuring GitHub Actions for Test Reporting
DESCRIPTION: This YAML snippet configures a GitHub Actions workflow to store test reports as artifacts when a build fails, enabling easier debugging of CI/CD issues.

LANGUAGE: yaml
CODE:
- name: Store reports
  if: failure()
  uses: actions/upload-artifact@v4
  with:
    name: reports
    path: |
      **/build/reports/
      **/build/test-results/

----------------------------------------

TITLE: Adding Data Generation Entrypoint to fabric.mod.json (JSON)
DESCRIPTION: This JSON snippet shows how to add the data generation entrypoint to the fabric.mod.json file, which is necessary for Fabric to recognize and use the datagen class.

LANGUAGE: json
CODE:
{
  "entrypoints": {
    "client": [
    ],
    "fabric-datagen": [
      "com.example.docs.datagen.FabricDocsReferenceDataGenerator"
    ]
  }
}

----------------------------------------

TITLE: Adding Data Generation Entrypoint to fabric.mod.json (JSON)
DESCRIPTION: This JSON snippet shows how to add the data generation entrypoint to the fabric.mod.json file, which is necessary for Fabric to recognize and use the datagen class.

LANGUAGE: json
CODE:
{
  "entrypoints": {
    "client": [
    ],
    "fabric-datagen": [
      "com.example.docs.datagen.FabricDocsReferenceDataGenerator"
    ]
  }
}

----------------------------------------

TITLE: Creating a TagKey for Items in Java
DESCRIPTION: Shows how to create a TagKey<Item> for use in tag generation. This key represents a specific tag that can be applied to items.

LANGUAGE: java
CODE:
public static final TagKey<Item> DOCS_ITEMS = TagKey.of(RegistryKeys.ITEM, new Identifier("fabric-docs-reference", "docs_items"));

----------------------------------------

TITLE: Adding AdvancementProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: Registers the custom AdvancementProvider with the data generator in the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceAdvancementProvider::new);

----------------------------------------

TITLE: Defining Block Loot Table
DESCRIPTION: Creates a loot table for the block that determines what items drop when the block is broken.

LANGUAGE: json
CODE:
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "fabric-docs-reference:condensed_dirt"
        }
      ],
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Creating a Custom Boolean Property in Java
DESCRIPTION: This Java snippet demonstrates how to create a custom boolean property called 'activated' for a block state.

LANGUAGE: java
CODE:
public static final BooleanProperty ACTIVATED = BooleanProperty.of("activated");

----------------------------------------

TITLE: Implementing Command with Optional Second Argument in Java
DESCRIPTION: Shows how to create a command with two integer arguments, where the second one is optional. The command structure allows for handling both single and double argument inputs.

LANGUAGE: java
CODE:
CommandManager.literal("command_with_two_args")
    .then(CommandManager.argument("value1", IntegerArgumentType.integer())
        .executes(context -> executeCommandWithTwoArgs(context, IntegerArgumentType.getInteger(context, "value1"), null))
        .then(CommandManager.argument("value2", IntegerArgumentType.integer())
            .executes(context -> executeCommandWithTwoArgs(context, IntegerArgumentType.getInteger(context, "value1"), IntegerArgumentType.getInteger(context, "value2")))
        )
    );

----------------------------------------

TITLE: Creating Block Loot Table Provider
DESCRIPTION: Implementation of a FabricBlockLootTableProvider class that handles generation of block loot tables.

LANGUAGE: java
CODE:
public class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {
    public FabricDocsReferenceBlockLootTableProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate() {
        // Override with loot table generation code
    }
}

----------------------------------------

TITLE: Client-Side Command Registration
DESCRIPTION: Shows how to register a client-side command using ClientCommandManager.

LANGUAGE: java
CODE:
ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
    dispatcher.register(ClientCommandManager.literal("client_command")
        .executes(context -> {
            assert MinecraftClient.getInstance().player != null;
            MinecraftClient.getInstance().player.sendMessage(Text.literal("Executed client command"));
            return Command.SINGLE_SUCCESS;
        }));
});

----------------------------------------

TITLE: Implementing Basic Custom Screen in Java
DESCRIPTION: Creates a basic custom screen with a button and label by extending the Screen class. Demonstrates widget initialization, rendering, and basic screen setup.

LANGUAGE: java
CODE:
public class CustomScreen extends Screen {
    public CustomScreen(Text title) {
        super(title);
    }

    @Override
    protected void init() {
        super.init();

        // Create a button widget
        ButtonWidget button = ButtonWidget.builder(Text.literal("Click me!"), button -> {
            System.out.println("Button clicked!");
        })
        .dimensions(width / 2 - 100, height / 2 - 12, 200, 20)
        .build();

        // Add the button widget to the screen
        addDrawableChild(button);
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        super.render(context, mouseX, mouseY, delta);

        // Draw some text above the button
        context.drawTextWithShadow(
            textRenderer,
            Text.literal("This is a custom screen!"),
            width / 2 - 100,
            height / 2 - 30,
            0xFFFFFF
        );
    }
}

----------------------------------------

TITLE: Implementing Basic Custom Screen in Java
DESCRIPTION: Creates a basic custom screen with a button and label by extending the Screen class. Demonstrates widget initialization, rendering, and basic screen setup.

LANGUAGE: java
CODE:
public class CustomScreen extends Screen {
    public CustomScreen(Text title) {
        super(title);
    }

    @Override
    protected void init() {
        super.init();

        // Create a button widget
        ButtonWidget button = ButtonWidget.builder(Text.literal("Click me!"), button -> {
            System.out.println("Button clicked!");
        })
        .dimensions(width / 2 - 100, height / 2 - 12, 200, 20)
        .build();

        // Add the button widget to the screen
        addDrawableChild(button);
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        super.render(context, mouseX, mouseY, delta);

        // Draw some text above the button
        context.drawTextWithShadow(
            textRenderer,
            Text.literal("This is a custom screen!"),
            width / 2 - 100,
            height / 2 - 30,
            0xFFFFFF
        );
    }
}

----------------------------------------

TITLE: Basic Test Configuration in Groovy
DESCRIPTION: Sets up basic testing configuration for Fabric API by creating run configurations for both server-side and client-side game tests.

LANGUAGE: groovy
CODE:
fabricApi {
 configureTests()
}

----------------------------------------

TITLE: Implementing Block Interaction Logic in Java
DESCRIPTION: This Java snippet overrides the onUse method to flip the 'activated' property when a player interacts with the block.

LANGUAGE: java
CODE:
@Override
public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {
    if (!world.isClient && hand == Hand.MAIN_HAND) {
        boolean activated = state.get(ACTIVATED);
        world.setBlockState(pos, state.with(ACTIVATED, !activated), Block.NOTIFY_ALL);
    }
    return ActionResult.SUCCESS;
}

----------------------------------------

TITLE: Setting Default State for Custom Property in Java
DESCRIPTION: This Java snippet demonstrates how to set a default state for a custom property in a block's constructor in Minecraft modding.

LANGUAGE: java
CODE:
public PrismarineLampBlock(Settings settings) {
    super(settings);
    setDefaultState(getDefaultState().with(ACTIVATED, false));
}

----------------------------------------

TITLE: Item Model JSON
DESCRIPTION: JSON configuration for the item model using the item/generated parent model

LANGUAGE: json
CODE:
{
  "parent": "item/generated",
  "textures": {
    "layer0": "mod_id:item/suspicious_substance"
  }
}

----------------------------------------

TITLE: Testing Particle Command
DESCRIPTION: Minecraft command to test the newly created particle in-game.

LANGUAGE: mcfunction
CODE:
/particle fabric-docs-reference:sparkle_particle ~ ~1 ~

----------------------------------------

TITLE: Defining Sound Events in JSON
DESCRIPTION: JSON configuration for registering a custom sound event with subtitle support in Minecraft.

LANGUAGE: json
CODE:
{
  "metal_whistle": {
    "subtitle": "subtitle.fabric-docs-reference.metal_whistle",
    "sounds": [
      "fabric-docs-reference:metal_whistle"
    ]
  }
}

----------------------------------------

TITLE: Client-Side Particle Registration
DESCRIPTION: Shows how to register the particle on the client side and configure its movement behavior using the end rod particle factory.

LANGUAGE: java
CODE:
@Override
public void onInitializeClient() {
    ParticleFactoryRegistry.getInstance().register(FabricDocsReference.SPARKLE_PARTICLE, EndRodParticle.Factory::new);
}

----------------------------------------

TITLE: Sound Registration in Mod Initializer
DESCRIPTION: Implementation of sound registration in the mod's main initialization class.

LANGUAGE: java
CODE:
public class FabricDocsReferenceSounds implements ModInitializer {
    @Override
    public void onInitialize() {
        CustomSounds.init();
    }
}

----------------------------------------

TITLE: Implementing Block Interaction for Custom Property in Java
DESCRIPTION: This Java snippet shows how to implement block interaction to toggle a custom boolean property when a player right-clicks the block in Minecraft modding.

LANGUAGE: java
CODE:
@Override
public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {
    if (!world.isClient() && hand == Hand.MAIN_HAND) {
        boolean currentState = state.get(ACTIVATED);
        world.setBlockState(pos, state.with(ACTIVATED, !currentState), Block.NOTIFY_ALL);
        return ActionResult.SUCCESS;
    }

    return super.onUse(state, world, pos, player, hand, hit);
}

----------------------------------------

TITLE: Registering Items with ModItems Class
DESCRIPTION: Helper class for registering items with a custom registration method that takes an identifier, settings and factory function.

LANGUAGE: java
CODE:
public class ModItems {
    public static final Item SUSPICIOUS_SUBSTANCE = register("suspicious_substance", new Item.Settings(), Item::new);

    private static <T extends Item> T register(String id, Item.Settings settings, Function<Item.Settings, T> factory) {
        return Registry.register(Registries.ITEM, new Identifier("mod_id", id), factory.apply(settings));
    }
}

----------------------------------------

TITLE: Implementing Custom Damage in TaterBlock
DESCRIPTION: Shows how to create a DamageSource from a custom damage type and apply it to entities in a custom block.

LANGUAGE: java
CODE:
public class TaterBlock extends Block {
    public TaterBlock(Settings settings) {
        super(settings);
    }

    @Override
    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {
        if (!world.isClient && entity instanceof LivingEntity) {
            DamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER));
            entity.damage(damageSource, 5.0f);
        }
        super.onSteppedOn(world, pos, state, entity);
    }
}

----------------------------------------

TITLE: Particle JSON Configuration
DESCRIPTION: JSON configuration file that defines the textures used by the particle. Located in the particles folder of the mod resources.

LANGUAGE: json
CODE:
{
  "textures": [
    "fabric-docs-reference:particle/sparkle_particle_texture"
  ]
}

----------------------------------------

TITLE: Particle JSON Configuration
DESCRIPTION: JSON configuration file that defines the textures used by the particle. Located in the particles folder of the mod resources.

LANGUAGE: json
CODE:
{
  "textures": [
    "fabric-docs-reference:particle/sparkle_particle_texture"
  ]
}

----------------------------------------

TITLE: Identifying Mixin Crashes in Stack Traces
DESCRIPTION: This snippet demonstrates how to identify mixin crashes in stack traces. It shows the pattern used for method mixins, which includes the mod ID and handler name.

LANGUAGE: plaintext
CODE:
... net.minecraft.class_2248.method_3821$$$mod-id$handlerName() ...

----------------------------------------

TITLE: Creating Data Generator Entrypoint Class
DESCRIPTION: Java class that serves as the main entrypoint for data generation, implementing FabricDataGenerator.onInitializeDataGenerator.

LANGUAGE: java
CODE:
:::datagen-setup:generator

----------------------------------------

TITLE: Creating a Custom Event Callback Interface in Fabric API
DESCRIPTION: This snippet demonstrates how to create a custom event callback interface for a sheep shearing event in Fabric API.

LANGUAGE: java
CODE:
public interface SheepShearCallback {
    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,
            (listeners) -> (player, sheep) -> {
                for (SheepShearCallback listener : listeners) {
                    ActionResult result = listener.interact(player, sheep);

                    if (result != ActionResult.PASS) {
                        return result;
                    }
                }

                return ActionResult.PASS;
            });

    ActionResult interact(PlayerEntity player, SheepEntity sheep);
}

----------------------------------------

TITLE: Creating a Custom Event Callback Interface in Fabric API
DESCRIPTION: This snippet demonstrates how to create a custom event callback interface for a sheep shearing event in Fabric API.

LANGUAGE: java
CODE:
public interface SheepShearCallback {
    Event<SheepShearCallback> EVENT = EventFactory.createArrayBacked(SheepShearCallback.class,
            (listeners) -> (player, sheep) -> {
                for (SheepShearCallback listener : listeners) {
                    ActionResult result = listener.interact(player, sheep);

                    if (result != ActionResult.PASS) {
                        return result;
                    }
                }

                return ActionResult.PASS;
            });

    ActionResult interact(PlayerEntity player, SheepEntity sheep);
}

----------------------------------------

TITLE: Registering Custom Status Effect in Java
DESCRIPTION: Demonstrates how to register the custom TaterEffect into the STATUS_EFFECT registry using Registry.register in the mod initializer.

LANGUAGE: java
CODE:
public class FabricDocsReferenceEffects implements ModInitializer {
    public static final StatusEffect TATER = new TaterEffect();

    @Override
    public void onInitialize() {
        Registry.register(Registries.STATUS_EFFECT, new Identifier("fabric-docs-reference", "tater"), TATER);
    }
}

----------------------------------------

TITLE: Implementing a Custom Block with Block Entity in Java
DESCRIPTION: Creates a CounterBlock class that extends BlockWithEntity and implements the createBlockEntity method to use the custom block entity.

LANGUAGE: java
CODE:
public class CounterBlock extends BlockWithEntity {
    public CounterBlock(Settings settings) {
        super(settings);
    }

    @Override
    public BlockRenderType getRenderType(BlockState state) {
        return BlockRenderType.MODEL;
    }

    @Override
    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {
        if (!world.isClient) {
            BlockEntity blockEntity = world.getBlockEntity(pos);
            if (blockEntity instanceof CounterBlockEntity counterBlockEntity) {
                counterBlockEntity.incrementClicks();
                player.sendMessage(Text.literal("You've clicked the block for the " + counterBlockEntity.getClicks() + "th time"), false);
                return ActionResult.SUCCESS;
            }
        }
        return ActionResult.PASS;
    }

    @Nullable
    @Override
    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {
        return new CounterBlockEntity(pos, state);
    }

    @Override
    protected MapCodec<? extends BlockWithEntity> getCodec() {
        return null;
    }
}

----------------------------------------

TITLE: Defining Equipment Model JSON
DESCRIPTION: JSON configuration for armor model appearance when worn by entities.

LANGUAGE: json
CODE:
{\n  "type": "humanoid"\n}

----------------------------------------

TITLE: Basic Data Generation Configuration in Groovy
DESCRIPTION: Configures basic data generation setup for Fabric API by creating a new run configuration with data generation enabled.

LANGUAGE: groovy
CODE:
fabricApi {
 configureDataGeneration()
}

----------------------------------------

TITLE: Creating an AbstractDynamicSoundInstance Class
DESCRIPTION: Implements an abstract class for dynamic sound instances with transition states and sound modulation.

LANGUAGE: java
CODE:
public abstract class AbstractDynamicSoundInstance extends MovingSoundInstance implements SoundInstanceCallback {
    protected final DynamicSoundSource source;
    protected TransitionState state;
    protected int startDuration;
    protected int endDuration;
    protected float minVolume;
    protected float maxVolume;
    protected float minPitch;
    protected float maxPitch;
    protected boolean finished;
    protected int ticksExisted;
    protected int ticksInState;
    protected final SoundInstanceCallback callback;

    // Constructor and other methods omitted for brevity

    @Override
    public void tick() {
        if (this.source.isRemoved()) {
            this.setDone();
            return;
        }

        Vec3d pos = this.source.getPos();
        this.x = (float) pos.x;
        this.y = (float) pos.y;
        this.z = (float) pos.z;

        this.ticksExisted++;
        this.ticksInState++;

        switch (this.state) {
            case STARTING -> {
                if (this.ticksInState >= this.startDuration) {
                    this.state = TransitionState.RUNNING;
                    this.ticksInState = 0;
                }
            }
            case RUNNING -> {
                if (!this.source.isRunning()) {
                    this.state = TransitionState.ENDING;
                    this.ticksInState = 0;
                }
            }
            case ENDING -> {
                if (this.ticksInState >= this.endDuration) {
                    this.finished = true;
                    this.setDone();
                }
            }
        }

        this.volume = this.calculateVolume();
        this.pitch = this.calculatePitch();
    }

    // Other methods omitted for brevity
}

----------------------------------------

TITLE: Running Fabric Client/Server via Gradle Commands
DESCRIPTION: Basic Gradle commands to launch Fabric mod in client or server mode from the command line

LANGUAGE: shell
CODE:
./gradlew runClient
./gradlew runServer

----------------------------------------

TITLE: Defining a Custom Class for Codec Serialization in Java
DESCRIPTION: Shows the structure of a custom class 'CoolBeansClass' that will be used to demonstrate codec creation.

LANGUAGE: java
CODE:
public class CoolBeansClass {

    private final int beansAmount;
    private final Item beanType;
    private final List<BlockPos> beanPositions;

    public CoolBeansClass(int beansAmount, Item beanType, List<BlockPos> beanPositions) {...}

    public int getBeansAmount() { return this.beansAmount; }
    public Item getBeanType() { return this.beanType; }
    public List<BlockPos> getBeanPositions() { return this.beanPositions; }
}

----------------------------------------

TITLE: Implementing Block Entity Ticker System
DESCRIPTION: Demonstrates how to implement a ticker system for periodic updates of the block entity state.

LANGUAGE: java
CODE:
    public static void tick(World world, BlockPos pos, BlockState state, CounterBlockEntity blockEntity) {
        if (!world.isClient()) {
            blockEntity.ticksSinceLast++;
            blockEntity.markDirty();
        }
    }

    public void incrementClicks(PlayerEntity player) {
        if (ticksSinceLast >= 10) {
            clicks++;
            ticksSinceLast = 0;
            player.sendMessage(Text.literal("You've clicked the block for the " + clicks + "th time"));
            markDirty();
        }
    }

----------------------------------------

TITLE: Creating Armor Item Model JSON
DESCRIPTION: JSON model definition for armor item appearance in inventory.

LANGUAGE: json
CODE:
{\n  "parent": "minecraft:item/generated",\n  "textures": {\n    "layer0": "fabric-docs-reference:item/guidite_helmet"\n  }\n}

----------------------------------------

TITLE: Drawing Complete Texture with DrawContext
DESCRIPTION: Demonstrates drawing an entire texture using DrawContext with explicit texture dimensions.

LANGUAGE: java
CODE:
context.drawTexture(TEXTURE, 10, 10, 32, 32, 0, 0, 16, 16, 16, 16);

----------------------------------------

TITLE: Fabric Modpack Platforms
DESCRIPTION: Documentation section listing platforms where users can find pre-made Fabric modpacks, including major modpack repositories and launchers.

LANGUAGE: markdown
CODE:
- [Modrinth](https://modrinth.com/modpacks?g=categories:%27fabric%27)
- [CurseForge](https://www.curseforge.com/minecraft/search?class=modpacks&gameVersionTypeId=4)
- [Feed The Beast](https://www.feed-the-beast.com/ftb-app)
- [Technic](https://www.technicpack.net/modpacks)

----------------------------------------

TITLE: Configuring Split Environment Source Sets
DESCRIPTION: Demonstrates how to enable split client and common code source sets to prevent accidental client-only code usage on servers. Requires Minecraft 1.18+, Loader 0.14+ and Loom 1.0+.

LANGUAGE: groovy
CODE:
loom {
 splitEnvironmentSourceSets()

 mods {
   modid {
     sourceSet sourceSets.main
     sourceSet sourceSets.client
   }
 }
 }

----------------------------------------

TITLE: Playing Positioned Sound on Client
DESCRIPTION: Demonstrates how to play a positioned sound instance on the client side using the SoundManager.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().getSoundManager().play(PositionedSoundInstance.master(FabricDocsReferences.ENGINE_LOOP, 1.0F, 1.0F));

----------------------------------------

TITLE: Creating Optional Sub-Commands in Fabric
DESCRIPTION: Demonstrates how to create optional sub-commands by setting both the main command and sub-command as executable.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("subtater")
    .executes(context -> {
        context.getSource().sendFeedback(() -> Text.literal("You didn't specify a subcommand!"), false);
        return Command.SINGLE_SUCCESS;
    })
    .then(CommandManager.literal("subcommand").executes(context -> {
        context.getSource().sendFeedback(() -> Text.literal("You ran a subcommand!"), false);
        return Command.SINGLE_SUCCESS;
    })));

----------------------------------------

TITLE: Implementing Command with Requirements in Fabric
DESCRIPTION: Demonstrates how to add requirements to a command, ensuring it can only be executed by operators with a minimum permission level.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("required_command")
        .requires(source -> source.hasPermissionLevel(2))
        .executes(FabricDocsReferenceCommands::executeRequiredCommand)
);

----------------------------------------

TITLE: Using Scissor Manager in DrawContext
DESCRIPTION: Shows how to use scissor manager to clip rendering to a specific area, with example of gradient rendering.

LANGUAGE: java
CODE:
context.enableScissor(10, 10, 100, 100);
context.fill(0, 0, width, height, 0xFF0000FF, 0xFF00FF00);
context.disableScissor();

----------------------------------------

TITLE: Extending StatusEffect Class in Java
DESCRIPTION: Creates a custom 'Tater' effect that gives one experience point every game tick. It extends the StatusEffect base class and overrides the applyUpdateEffect method.

LANGUAGE: java
CODE:
public class TaterEffect extends StatusEffect {
    public TaterEffect() {
        super(
            StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entities
            0x98D982); // color in RGB
    }

    // This method is called every tick to check whether it should apply the status effect or not
    @Override
    public boolean canApplyUpdateEffect(int duration, int amplifier) {
        // In our case, we just make it return true so that it applies the status effect every tick.
        return true;
    }

    // This method is called when it applies the status effect. We implement our desired effect here.
    @Override
    public void applyUpdateEffect(LivingEntity entity, int amplifier) {
        if (entity instanceof PlayerEntity) {
            ((PlayerEntity) entity).addExperience(1); // Adds 1 experience to the player
        }
    }
}

----------------------------------------

TITLE: Extending StatusEffect Class in Java
DESCRIPTION: Creates a custom 'Tater' effect that gives one experience point every game tick. It extends the StatusEffect base class and overrides the applyUpdateEffect method.

LANGUAGE: java
CODE:
public class TaterEffect extends StatusEffect {
    public TaterEffect() {
        super(
            StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entities
            0x98D982); // color in RGB
    }

    // This method is called every tick to check whether it should apply the status effect or not
    @Override
    public boolean canApplyUpdateEffect(int duration, int amplifier) {
        // In our case, we just make it return true so that it applies the status effect every tick.
        return true;
    }

    // This method is called when it applies the status effect. We implement our desired effect here.
    @Override
    public void applyUpdateEffect(LivingEntity entity, int amplifier) {
        if (entity instanceof PlayerEntity) {
            ((PlayerEntity) entity).addExperience(1); // Adds 1 experience to the player
        }
    }
}

----------------------------------------

TITLE: Registering Block Entity Renderer Factory
DESCRIPTION: Registration of the BlockEntityRenderer using BlockEntityRendererFactories in the mod initialization.

LANGUAGE: java
CODE:
public class FabricDocsBlockEntityRenderer implements ClientModInitializer {
    @Override
    public void onInitializeClient() {
        BlockEntityRendererFactories.register(ExampleBlockEntities.COUNTER_BLOCK_ENTITY, CounterBlockEntityRenderer::new);
    }
}

----------------------------------------

TITLE: Registering Armor Items
DESCRIPTION: Registration of individual armor pieces using the custom armor material.

LANGUAGE: java
CODE:
public static final Item GUIDITE_HELMET = register("guidite_helmet", new ArmorItem(GuiditeArmorMaterial.INSTANCE, EquipmentType.HELMET, new Item.Settings().maxDamage(GuiditeArmorMaterial.BASE_DURABILITY)));

----------------------------------------

TITLE: Using Scissor Manager in DrawContext
DESCRIPTION: Shows how to use scissor manager to clip rendering to a specific area, with example of gradient rendering.

LANGUAGE: java
CODE:
context.enableScissor(10, 10, 100, 100);
context.fill(0, 0, width, height, 0xFF0000FF, 0xFF00FF00);
context.disableScissor();

----------------------------------------

TITLE: Pushing Changes to GitHub Repository
DESCRIPTION: Git commands to stage, commit, and push changes to the forked Fabric Documentation repository.

LANGUAGE: sh
CODE:
git add .
git commit -m "Description of your changes"
git push

----------------------------------------

TITLE: Rendering a Triangle Strip on HUD in Minecraft
DESCRIPTION: This snippet demonstrates how to use the BufferBuilder to render a diamond shape on the HUD using a triangle strip. It initializes the BufferBuilder, sets vertex positions and colors, and draws the shape.

LANGUAGE: java
CODE:
ClientTickEvents.END_CLIENT_TICK.register(client -> {
    HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {
        BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
        Matrix4f positionMatrix = drawContext.getMatrices().peek().getPositionMatrix();

        RenderSystem.enableBlend();
        RenderSystem.defaultBlendFunc();
        RenderSystem.setShader(GameRenderer::getPositionColorProgram);

        bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);

        bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next();
        bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next();
        bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next();
        bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next();

        BufferRenderer.drawWithGlobalProgram(bufferBuilder.end());

        RenderSystem.disableBlend();
    });
});

----------------------------------------

TITLE: Registering Basic Command in Fabric
DESCRIPTION: Illustrates how to register a simple command using the CommandRegistrationCallback in Fabric. The command sends feedback when executed.

LANGUAGE: java
CODE:
CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {
    dispatcher.register(CommandManager.literal("test_command")
            .executes(context -> {
                context.getSource().sendFeedback(() -> Text.literal("Test command executed!"), false);
                return Command.SINGLE_SUCCESS;
            })
    );
});

----------------------------------------

TITLE: Creating a Constant Codec in Java
DESCRIPTION: Demonstrates how to create a codec that always deserializes to a constant value.

LANGUAGE: java
CODE:
Codec<Integer> theMeaningOfCodec = Codec.unit(42);

----------------------------------------

TITLE: Configuring Gradle to Use Fabric Loader JUnit
DESCRIPTION: This code block configures Gradle to use Fabric Loader JUnit for testing by setting up the test task with specific JVM arguments and system properties.

LANGUAGE: groovy
CODE:
tasks.withType(Test).configureEach {
    systemProperty "fabric.side", "client"
    jvmArgs += ["-javaagent:${classpath.find { it.name.contains('fabric-loader-junit') }}",
               "-Dfabric.junit.mcRuntime=${classpath.find { it.name.contains('minecraft-') }}"]
}

----------------------------------------

TITLE: Defining Custom Damage Type JSON in Fabric
DESCRIPTION: Creates a custom 'Tater' damage type JSON file with specific properties such as exhaustion, scaling with difficulty, and message ID.

LANGUAGE: json
CODE:
{
  "exhaustion": 0.1,
  "message_id": "tater",
  "scaling": "when_caused_by_living_non_player"
}

----------------------------------------

TITLE: Drawing Lines with DrawContext in Java
DESCRIPTION: Demonstrates drawing horizontal and vertical lines using DrawContext's specialized line drawing methods.

LANGUAGE: java
CODE:
context.drawHorizontalLine(10, 110, 10, 0xFFFFFFFF);
context.drawVerticalLine(10, 10, 110, 0xFFFFFFFF);

----------------------------------------

TITLE: Installing Java on Debian/Ubuntu
DESCRIPTION: Commands for installing Java 21 JDK on Debian or Ubuntu-based systems using apt package manager.

LANGUAGE: sh
CODE:
sudo apt update
sudo apt install openjdk-21-jdk

----------------------------------------

TITLE: Accessing ServerCommandSource in Java
DESCRIPTION: Shows how to access the ServerCommandSource from the CommandContext, which provides additional context for command execution.

LANGUAGE: java
CODE:
Command<ServerCommandSource> command = context -> {
    ServerCommandSource source = context.getSource();
    return 0;
};

----------------------------------------

TITLE: Simple Dirt Block Advancement Implementation
DESCRIPTION: Creates a basic advancement that triggers when the player obtains a dirt block, demonstrating simple criterion usage.

LANGUAGE: java
CODE:
Advancement getDirt = Advancement.Builder.create()
    .display(Blocks.DIRT,
        Text.literal("Getting Started"),
        Text.literal("Get your first dirt block!"),
        null,
        AdvancementFrame.TASK,
        true,
        true,
        false
    )
    .criterion("get_dirt",
        InventoryChangedCriterion.Conditions.items(Blocks.DIRT)
    )
    .build(consumer, "fabric-docs-reference/get_dirt");

----------------------------------------

TITLE: Cloning Fabric Example Mod Repository
DESCRIPTION: This command clones the Fabric example mod repository into a new folder called 'my-mod-project'. It requires Git to be installed on the system.

LANGUAGE: sh
CODE:
git clone https://github.com/FabricMC/fabric-example-mod/ my-mod-project

----------------------------------------

TITLE: Registering Client-Side Command in Fabric
DESCRIPTION: Demonstrates how to register a client-side command using the ClientCommandManager from Fabric API.

LANGUAGE: java
CODE:
ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
    dispatcher.register(ClientCommandManager.literal("client_command")
            .executes(context -> {
                context.getSource().sendFeedback(Text.literal("Executed client-side command!"));
                return Command.SINGLE_SUCCESS;
            })
    );
});

----------------------------------------

TITLE: Writing a Basic JUnit Test Method
DESCRIPTION: This Java code snippet demonstrates how to write a simple JUnit test method for testing a BeanType class in a Minecraft mod.

LANGUAGE: java
CODE:
@Test
void testBeanTypeCodec() {
    Codec<BeanType> codec = BeanType.createCodec();
    BeanType beanType = new BeanType("test", 42);
    Dynamic<JsonElement> encoded = codec.encodeStart(JsonOps.INSTANCE, beanType).result().orElseThrow();
    BeanType decoded = codec.parse(JsonOps.INSTANCE, encoded).result().orElseThrow();
    assertEquals(beanType, decoded);
}

----------------------------------------

TITLE: Creating a FabricLanguageProvider for Translation Generation in Java
DESCRIPTION: This code snippet demonstrates how to create a FabricLanguageProvider subclass for generating translations. It includes methods for initializing the provider and generating translations.

LANGUAGE: java
CODE:
public class FabricDocsReferenceEnglishLangProvider extends FabricLanguageProvider {
    protected FabricDocsReferenceEnglishLangProvider(FabricDataOutput dataOutput) {
        super(dataOutput, "en_us");
    }

    @Override
    public void generateTranslations(TranslationBuilder translationBuilder) {
        // We'll fill this out later
    }
}

----------------------------------------

TITLE: Drawing Rectangle Border with DrawContext in Java
DESCRIPTION: Shows how to draw a border around a rectangle using DrawContext.drawBorder() method with position and color parameters.

LANGUAGE: java
CODE:
context.fill(10, 10, 100, 100, 0xFF0000FF);
context.drawBorder(10, 10, 100, 100, 0xFFFFFFFF);

----------------------------------------

TITLE: Mixin Crash Stack Trace Example
DESCRIPTION: Example of how a mixin crash appears in the stack trace, showing the modid and handler name pattern

LANGUAGE: log
CODE:
... net.minecraft.class_2248.method_3821$$$modid$handlerName() ...

----------------------------------------

TITLE: Serializing and Deserializing BlockPos with Codec
DESCRIPTION: Example of serializing a BlockPos object to JSON and then deserializing it back using BlockPos.CODEC.

LANGUAGE: java
CODE:
BlockPos pos = new BlockPos(1, 2, 3);

// Serialize the BlockPos to JsonElement
DataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);

// In actual mod development, you'd want to handle empty Optionals appropriately.
JsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();

// Here we have our json value, which should correspond to `[1, 2, 3]`,
// as that's the format the BlockPos codec uses.
LOGGER.info("Serialized BlockPos: {}", json);

// Now deserialize the JsonElement back to a BlockPos
DataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);

// We'll again just get our value from the result
BlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();

// And there we have it, we've successfully serialized and deserialized our BlockPos!
LOGGER.info("Deserialized BlockPos: {}", pos);

----------------------------------------

TITLE: Implementing Command with Common Execution Method in Java
DESCRIPTION: Demonstrates a more efficient approach to handle commands with optional arguments by using a common execution method. This reduces code duplication and improves maintainability.

LANGUAGE: java
CODE:
CommandManager.literal("command_with_common_exec")
    .then(CommandManager.argument("value1", IntegerArgumentType.integer())
        .executes(context -> executeCommon(context, "value1"))
        .then(CommandManager.argument("value2", IntegerArgumentType.integer())
            .executes(context -> executeCommon(context, "value1", "value2"))
        )
    );

LANGUAGE: java
CODE:
private static int executeCommon(CommandContext<ServerCommandSource> context, String... argumentNames) {
    StringBuilder builder = new StringBuilder("Called /command_with_common_exec with ");
    for (int i = 0; i < argumentNames.length; i++) {
        if (i > 0) {
            builder.append(" and ");
        }
        int value = IntegerArgumentType.getInteger(context, argumentNames[i]);
        builder.append(argumentNames[i]).append(" = ").append(value);
    }
    context.getSource().sendFeedback(() -> Text.literal(builder.toString()), false);
    return 1;
}

----------------------------------------

TITLE: Creating Tool Material in Java
DESCRIPTION: Demonstrates how to create a custom ToolMaterial object with specific properties for durability, mining speed, attack damage, and more.

LANGUAGE: java
CODE:
public static final ToolMaterial GUIDITE_TOOL_MATERIAL = new ToolMaterial(
    BlockTags.NEEDS_IRON_TOOL,
    750,
    3.0f,
    3,
    25,
    TagKey.create(Registries.ITEM, new Identifier("c", "guidite_repair_items"))
);

----------------------------------------

TITLE: Creating Tool Material in Java
DESCRIPTION: Demonstrates how to create a custom ToolMaterial object with specific properties for durability, mining speed, attack damage, and more.

LANGUAGE: java
CODE:
public static final ToolMaterial GUIDITE_TOOL_MATERIAL = new ToolMaterial(
    BlockTags.NEEDS_IRON_TOOL,
    750,
    3.0f,
    3,
    25,
    TagKey.create(Registries.ITEM, new Identifier("c", "guidite_repair_items"))
);

----------------------------------------

TITLE: Configuring Gradle to Use Fabric Loader JUnit
DESCRIPTION: This code block configures Gradle to use Fabric Loader JUnit for testing by setting up the test task with specific JVM arguments and system properties.

LANGUAGE: groovy
CODE:
tasks.withType(Test).configureEach {
    jvmArgs[
        "--add-opens", "java.base/java.nio=ALL-UNNAMED",
        "--add-opens", "java.base/java.io=ALL-UNNAMED",
    ]
    systemProperty "fabric.side", "client"
}

----------------------------------------

TITLE: Dedicated Server Command
DESCRIPTION: Example of registering a command that only runs on dedicated servers using environment checking.

LANGUAGE: java
CODE:
if (environment.equals(CommandManager.RegistrationEnvironment.DEDICATED)) {
    dispatcher.register(CommandManager.literal("dedicated_command")
        .executes(FabricDocsReferenceCommands::executeDedicatedCommand));
}

----------------------------------------

TITLE: Drawing Rectangle with DrawContext in Java
DESCRIPTION: Demonstrates how to draw a filled rectangle using DrawContext.fill() method with position and color parameters.

LANGUAGE: java
CODE:
context.fill(10, 10, 100, 100, 0xFF0000FF);

----------------------------------------

TITLE: Configuring Markdown Frontmatter for Fabric Documentation
DESCRIPTION: This code snippet defines the frontmatter for the Fabric documentation home page. It sets the title, description, and layout, as well as configures the hero section and feature blocks.

LANGUAGE: markdown
CODE:
---
title: Fabric Documentation
description: The official curated documentation for Fabric, a modding toolchain for Minecraft.
layout: home

hero:
  name: Fabric Documentation
  tagline: The official curated documentation for Fabric, a modding toolchain for Minecraft.

features:
  - title: Player Guides
    icon: 📚
    details: Are you a player looking to use mods powered by Fabric? Our player guides have you covered. These guides will help you in downloading, installing, and troubleshooting Fabric mods.
    link: /players/
    linkText: Read More
  - title: Developer Guides
    icon: 🛠️
    details: Our community-written developer guides cover everything from setting up your development environment to advanced topics like rendering and networking.
    link: /develop/
    linkText: Get Started
---

----------------------------------------

TITLE: Playing and Stopping Custom SoundInstance
DESCRIPTION: Demonstrates how to play and stop a custom SoundInstance using the SoundManager on the client side.

LANGUAGE: java
CODE:
CustomSoundInstance soundInstance = new CustomSoundInstance(MinecraftClient.getInstance().player, FabricDocsReferences.ENGINE_LOOP);
MinecraftClient.getInstance().getSoundManager().play(soundInstance);

// To stop the sound
MinecraftClient.getInstance().getSoundManager().stop(soundInstance);

----------------------------------------

TITLE: Closing a Custom Screen in Java for Fabric Mods
DESCRIPTION: This code snippet demonstrates how to close a custom screen by setting the current screen to null using the MinecraftClient's setScreen method.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(null);

----------------------------------------

TITLE: Accessing Custom Damage Type in Java for Minecraft Mod
DESCRIPTION: Demonstrates how to obtain the RegistryKey for a custom damage type in Java code.

LANGUAGE: java
CODE:
public class FabricDocsReferenceDamageTypes {
    public static final RegistryKey<DamageType> TATER = RegistryKey.of(RegistryKeys.DAMAGE_TYPE, new Identifier("fabric-docs-reference", "tater"));
}

----------------------------------------

TITLE: SoundInstanceCallback Interface
DESCRIPTION: Defines a callback interface for sound instances to handle completion events.

LANGUAGE: java
CODE:
public interface SoundInstanceCallback {
    void onFinished(AbstractDynamicSoundInstance instance);
}

----------------------------------------

TITLE: Implementing a Custom Widget in Java for Fabric
DESCRIPTION: This code snippet demonstrates how to create a custom widget by extending ClickableWidget. It implements rendering logic and handles mouse clicks.

LANGUAGE: java
CODE:
public class CustomWidget extends ClickableWidget {
    public CustomWidget(int x, int y, int width, int height, Text message) {
        super(x, y, width, height, message);
    }

    @Override
    public void renderButton(MatrixStack matrices, int mouseX, int mouseY, float delta) {
        fill(matrices, this.x, this.y, this.x + this.width, this.y + this.height, 0xFFFFFFFF);
        drawCenteredText(matrices, textRenderer, getMessage(), this.x + this.width / 2, this.y + (this.height - 8) / 2, 0);
    }

    @Override
    public void onClick(double mouseX, double mouseY) {
        // Handle click event
    }
}

----------------------------------------

TITLE: Writing a JUnit Test for Codec Functionality
DESCRIPTION: This Java code demonstrates how to write a JUnit test for a Codec class in a Minecraft mod, including assertions for expected behavior.

LANGUAGE: java
CODE:
@Test
void testStringCodec() {
    Codec<String> codec = BeanType.STRING.getCodec();
    DataResult<String> result = codec.parse(JsonOps.INSTANCE, "test");
    assertTrue(result.result().isPresent());
    assertEquals("test", result.result().get());
}

----------------------------------------

TITLE: Basic Command Lambda Definition
DESCRIPTION: Demonstrates the basic structure of a Command lambda with ServerCommandSource, showing the minimal implementation returning a success code.

LANGUAGE: java
CODE:
Command<ServerCommandSource> command = context -> {
    return 0;
};

----------------------------------------

TITLE: Defining Custom Loot Table Keys in Fabric
DESCRIPTION: This snippet shows how to create a RegistryKey for a custom loot table in a separate class called ModLootTables.

LANGUAGE: java
CODE:
public class ModLootTables {
    public static final RegistryKey<LootTable> EXAMPLE_CHEST = registerLootTable("chests/example_chest");

    private static RegistryKey<LootTable> registerLootTable(String id) {
        return RegistryKey.of(RegistryKeys.LOOT_TABLE, new Identifier(FabricDocsReference.MOD_ID, id));
    }
}

----------------------------------------

TITLE: Installing Headless JRE on Arch Linux
DESCRIPTION: Command to install the headless version of Java Runtime Environment (JRE) on Arch Linux, suitable for servers without graphical UI.

LANGUAGE: sh
CODE:
sudo pacman -S jre-openjdk-headless

----------------------------------------

TITLE: Defining Base Durability for Armor Material
DESCRIPTION: Constants defining the base durability values for different armor pieces that use this material.

LANGUAGE: java
CODE:
private static final int BASE_DURABILITY = 42;

----------------------------------------

TITLE: AbstractDynamicSoundInstance Class
DESCRIPTION: Implements an abstract class for dynamic sound instances with transition states and sound modulation.

LANGUAGE: java
CODE:
public abstract class AbstractDynamicSoundInstance extends MovingSoundInstance implements SoundInstanceCallback {
    protected final DynamicSoundSource source;
    protected TransitionState state;
    protected int startTicks;
    protected int endTicks;
    protected float minVolume;
    protected float maxVolume;
    protected float minPitch;
    protected float maxPitch;
    protected boolean finished;
    protected int currentTick;
    protected SoundInstanceCallback callback;

    // Constructor and other methods...

    @Override
    public void tick() {
        if (this.source == null || this.finished) {
            this.setDone();
            return;
        }

        this.x = (float) this.source.getPos().x;
        this.y = (float) this.source.getPos().y;
        this.z = (float) this.source.getPos().z;

        switch (this.state) {
            case STARTING -> {
                if (this.currentTick >= this.startTicks) {
                    this.state = TransitionState.RUNNING;
                    this.currentTick = 0;
                }
            }
            case RUNNING -> {
                // Running state logic
            }
            case ENDING -> {
                if (this.currentTick >= this.endTicks) {
                    this.setDone();
                    return;
                }
            }
        }

        this.currentTick++;
        this.applyModulations();
    }

    protected abstract void applyModulations();

    // Other methods...
}

----------------------------------------

TITLE: Implementing DynamicSoundSource Interface in Fabric
DESCRIPTION: Definition of a custom DynamicSoundSource interface to provide data for dynamic sound instances.

LANGUAGE: java
CODE:
public interface DynamicSoundSource {
    Vec3d getPos();
    World getWorld();
    float getStress();
    boolean isRunning();
}

----------------------------------------

TITLE: Implementing ArmorMaterial Class in Java
DESCRIPTION: Creates a custom ArmorMaterial class that defines properties for a new armor set, including durability, protection, enchantability, and other characteristics.

LANGUAGE: java
CODE:
public class GuiditeArmorMaterial implements ArmorMaterial {
    private static final int[] BASE_DURABILITY = {13, 15, 16, 11};
    private static final int[] PROTECTION_VALUES = {3, 6, 8, 3};

    @Override
    public int getDurability(ArmorItem.Type type) {
        return BASE_DURABILITY[type.ordinal()] * 40;
    }

    @Override
    public int getProtection(ArmorItem.Type type) {
        return PROTECTION_VALUES[type.ordinal()];
    }

    @Override
    public int getEnchantability() {
        return 15;
    }

    @Override
    public SoundEvent getEquipSound() {
        return SoundEvents.ITEM_ARMOR_EQUIP_NETHERITE;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return Ingredient.ofItems(ModItems.GUIDITE);
    }

    @Override
    public String getName() {
        return "guidite";
    }

    @Override
    public float getToughness() {
        return 3.0F;
    }

    @Override
    public float getKnockbackResistance() {
        return 0.1F;
    }
}

----------------------------------------

TITLE: Serializing and Deserializing BlockPos with Codecs
DESCRIPTION: Demonstrates how to use codecs to serialize a BlockPos object to JSON and then deserialize it back to a BlockPos.

LANGUAGE: java
CODE:
BlockPos pos = new BlockPos(1, 2, 3);

// Serialize the BlockPos to a JsonElement
DataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);

// When actually writing a mod, you'll want to properly handle empty Optionals of course
JsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();

// Here we have our json value, which should correspond to `[1, 2, 3]`,
// as that's the format used by the BlockPos codec.
LOGGER.info("Serialized BlockPos: {}", json);

// Now we'll deserialize the JsonElement back into a BlockPos
DataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);

// Again, we'll just grab our value from the result
BlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();

// And we can see that we've successfully serialized and deserialized our BlockPos!
LOGGER.info("Deserialized BlockPos: {}", pos);

----------------------------------------

TITLE: Serializing and Deserializing BlockPos with Codecs
DESCRIPTION: Demonstrates how to use codecs to serialize a BlockPos object to JSON and then deserialize it back to a BlockPos.

LANGUAGE: java
CODE:
BlockPos pos = new BlockPos(1, 2, 3);

// Serialize the BlockPos to a JsonElement
DataResult<JsonElement> result = BlockPos.CODEC.encodeStart(JsonOps.INSTANCE, pos);

// When actually writing a mod, you'll want to properly handle empty Optionals of course
JsonElement json = result.resultOrPartial(LOGGER::error).orElseThrow();

// Here we have our json value, which should correspond to `[1, 2, 3]`,
// as that's the format used by the BlockPos codec.
LOGGER.info("Serialized BlockPos: {}", json);

// Now we'll deserialize the JsonElement back into a BlockPos
DataResult<BlockPos> result = BlockPos.CODEC.parse(JsonOps.INSTANCE, json);

// Again, we'll just grab our value from the result
BlockPos pos = result.resultOrPartial(LOGGER::error).orElseThrow();

// And we can see that we've successfully serialized and deserialized our BlockPos!
LOGGER.info("Deserialized BlockPos: {}", pos);

----------------------------------------

TITLE: Creating a Chest Loot Table Provider in Fabric
DESCRIPTION: This code defines a class that extends SimpleFabricLootTableProvider to generate chest loot tables. It includes a constructor and an empty generate method.

LANGUAGE: java
CODE:
public class FabricDocsReferenceChestLootTableProvider extends SimpleFabricLootTableProvider {
    public FabricDocsReferenceChestLootTableProvider(FabricDataOutput output) {
        super(output, LootContextTypes.CHEST);
    }

    @Override
    public void accept(BiConsumer<Identifier, LootTable.Builder> exporter) {
        // We'll generate a loot table here
    }
}

----------------------------------------

TITLE: Building Static HTML for Fabric Documentation
DESCRIPTION: Command to build the static HTML files for the Fabric Documentation website using VitePress.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Block State Definition JSON
DESCRIPTION: Blockstate configuration that defines how the block should be rendered in different states.

LANGUAGE: json
CODE:
{
  "variants": {
    "": {
      "model": "fabric-docs-reference:block/condensed_dirt"
    }
  }
}

----------------------------------------

TITLE: Using Scissor Manager with DrawContext in Java
DESCRIPTION: Shows how to use the scissor manager to clip rendering to a specific area.

LANGUAGE: java
CODE:
context.enableScissor(10, 10, 100, 100);
// Render content here
context.disableScissor();

----------------------------------------

TITLE: Registering a New Item Instance
DESCRIPTION: Shows how to create and register a new item using FabricItemSettings

LANGUAGE: java
CODE:
public static final Item SUSPICIOUS_SUBSTANCE = registerItem("suspicious_substance",
    new Item(new FabricItemSettings()));

----------------------------------------

TITLE: Block Translation JSON
DESCRIPTION: Language file entry for localizing the block name in the game interface.

LANGUAGE: json
CODE:
{
  "block.mod_id.condensed_dirt": "Condensed Dirt"
}

----------------------------------------

TITLE: Implementing Block Entity Renderer Class
DESCRIPTION: Basic implementation of a BlockEntityRenderer for a Counter Block Entity that handles block rendering initialization.

LANGUAGE: java
CODE:
public class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {
    private final TextRenderer textRenderer;

    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {
        this.textRenderer = ctx.getTextRenderer();
    }
}

----------------------------------------

TITLE: Creating Equipment Asset Registry Key
DESCRIPTION: Registry key constant for the armor material used to locate armor textures.

LANGUAGE: java
CODE:
private static final RegistryKey<EquipmentAsset> GUIDITE_ARMOR_MATERIAL_KEY = Equipment.createEquipmentRegistryKey(new Identifier(FabricDocsReference.MOD_ID, "guidite"));

----------------------------------------

TITLE: Creating a Block Loot Table Provider in Fabric
DESCRIPTION: This code defines a class that extends FabricBlockLootTableProvider to generate block loot tables. It includes a constructor and an empty generate method.

LANGUAGE: java
CODE:
public class FabricDocsReferenceBlockLootTableProvider extends FabricBlockLootTableProvider {
    protected FabricDocsReferenceBlockLootTableProvider(FabricDataOutput dataOutput) {
        super(dataOutput);
    }

    @Override
    public void generate() {
        // We'll add drops here
    }
}

----------------------------------------

TITLE: Previewing Built Fabric Documentation Website
DESCRIPTION: Command to preview the built static HTML files for the Fabric Documentation website.

LANGUAGE: sh
CODE:
npm run preview

----------------------------------------

TITLE: Adding a Language Provider to DataGeneratorEntrypoint in Java
DESCRIPTION: This snippet shows how to add a language provider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceEnglishLangProvider::new);

----------------------------------------

TITLE: Block Tool Tag JSON
DESCRIPTION: Tag definition that specifies which tools can effectively mine the block.

LANGUAGE: json
CODE:
{
  "values": [
    "fabric-docs-reference:condensed_dirt"
  ]
}

----------------------------------------

TITLE: Using SuggestionProvider with Command Arguments
DESCRIPTION: Demonstrates how to attach a suggestion provider to a command argument builder using the suggests() method. This example shows basic suggestion provider implementation.

LANGUAGE: java
CODE:
CommandManager.argument("value", StringArgumentType.string())
    .suggests((context, builder) -> {
        return builder.buildFuture();
    })

----------------------------------------

TITLE: Adding Tool Items to Creative Inventory in Java
DESCRIPTION: Shows how to add the custom tool items to a specific item group in the creative inventory.

LANGUAGE: java
CODE:
itemGroup.addAll(Arrays.asList(
    GUIDITE_SWORD,
    GUIDITE_SHOVEL,
    GUIDITE_PICKAXE,
    GUIDITE_AXE,
    GUIDITE_HOE
));

----------------------------------------

TITLE: Defining a Custom Block Entity in Java
DESCRIPTION: Creates a CounterBlockEntity class that extends BlockEntity to store the number of times a block has been clicked.

LANGUAGE: java
CODE:
public class CounterBlockEntity extends BlockEntity {
    private int clicks = 0;

    public CounterBlockEntity(BlockPos pos, BlockState state) {
        super(ModBlockEntities.COUNTER_BLOCK_ENTITY, pos, state);
    }

    public void incrementClicks() {
        clicks++;
        markDirty();
    }

    public int getClicks() {
        return clicks;
    }
}

----------------------------------------

TITLE: Initializing DataGeneratorEntrypoint in Fabric
DESCRIPTION: This snippet shows how to add loot table providers to your data generator pack in the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);
pack.addProvider(FabricDocsReferenceChestLootTableProvider::new);

----------------------------------------

TITLE: Locating Crash Reports - macOS Path
DESCRIPTION: File path for accessing crash reports on macOS operating system

LANGUAGE: bash
CODE:
~/Library/Application Support/minecraft/crash-reports

----------------------------------------

TITLE: Opening a Custom Screen with Previous Screen Reference in Java for Fabric Mods
DESCRIPTION: This code snippet demonstrates how to open a custom screen while passing the current screen as a reference. This allows for returning to the previous screen when the custom screen is closed.

LANGUAGE: java
CODE:
Screen currentScreen = MinecraftClient.getInstance().currentScreen;
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty(), currentScreen)
);

----------------------------------------

TITLE: Defining Armor Material Durability in Fabric
DESCRIPTION: Demonstrates how to define a durability multiplier for custom armor material, which is used to calculate the durability of individual armor pieces.

LANGUAGE: java
CODE:
public static final int GUIDITE_DURABILITY_MULTIPLIER = 20;

----------------------------------------

TITLE: Example Mixin Crash Stack Trace
DESCRIPTION: Sample of how mixin crashes appear in stack traces, showing the modid and handler name pattern

LANGUAGE: no-line-numbers
CODE:
... net.minecraft.class_2248.method_3821$$$modid$handlerName() ...

----------------------------------------

TITLE: Adding Widget to Screen in Java
DESCRIPTION: Shows how to add a custom widget to a screen using the addDrawableChild method within the init method.

LANGUAGE: java
CODE:
@Override
protected void init() {
    super.init();
    addDrawableChild(new CustomWidget(width / 2 - 50, height / 2 - 50, 100, 100));
}

----------------------------------------

TITLE: Adding Status Effect Translations in JSON
DESCRIPTION: Shows how to add a translation for the custom 'Tater' effect in the language file.

LANGUAGE: json
CODE:
{
  "effect.fabric-docs-reference.tater": "Tater"
}

----------------------------------------

TITLE: Defining Item Model for Custom Tool in JSON
DESCRIPTION: Creates a JSON model file for a custom tool item, using the 'item/handheld' parent model and specifying the texture.

LANGUAGE: json
CODE:
{
  "parent": "item/handheld",
  "textures": {
    "layer0": "fabric-docs-reference:item/guidite_sword"
  }
}

----------------------------------------

TITLE: Running VitePress Development Server
DESCRIPTION: Command to start the VitePress development server for local preview of the Fabric Documentation.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Using Generated Translations in Minecraft Client Code in Java
DESCRIPTION: This code snippet demonstrates how to use the generated translations in place of hardcoded text. It shows replacing Text.literal with Text.translatable to allow for translation through resource packs.

LANGUAGE: java
CODE:
ChatHud chatHud = MinecraftClient.getInstance().inGameHud.getChatHud();
chatHud.addMessage(Text.literal("Hello there!")); // [!code --]
chatHud.addMessage(Text.translatable("text.fabric_docs_reference.greeting")); // [!code ++]

----------------------------------------

TITLE: Adding a Custom Block to an Item Group in Java
DESCRIPTION: This code demonstrates how to add a custom block (Condensed Dirt) to a custom item group in Minecraft using Fabric. It uses the Block.asItem() method to get the BlockItem instance.

LANGUAGE: java
CODE:
public class ModItemGroups {
    public static final ItemGroup EXAMPLE_GROUP = FabricItemGroup.builder()
            .icon(() -> new ItemStack(ModBlocks.CONDENSED_DIRT))
            .displayName(Text.translatable("itemgroup.example"))
            .entries((context, entries) -> {
                entries.add(ModBlocks.CONDENSED_DIRT);
            })
            .build();
}

----------------------------------------

TITLE: Applying Custom Status Effect in Java
DESCRIPTION: Demonstrates how to apply the custom 'Tater' effect to a player entity using LivingEntity#addStatusEffect method.

LANGUAGE: java
CODE:
player.addStatusEffect(new StatusEffectInstance(
    FabricDocsReferenceEffects.TATER, // The effect instance
    2 * 20, // Duration in ticks (2 seconds * 20 ticks/second)
    0, // Amplifier (level - 1)
    false, // Ambient (true for environmental effects like beacons)
    true, // Show particles
    true // Show icon in inventory
));

----------------------------------------

TITLE: Defining Fabric Documentation Homepage in Markdown
DESCRIPTION: This code snippet defines the structure and content of the Fabric documentation homepage using markdown and YAML frontmatter. It includes metadata, hero section, and feature highlights for player and developer guides.

LANGUAGE: markdown
CODE:
---
title: Fabric Documentation
description: The official curated documentation for Fabric, a modding toolchain for Minecraft.
layout: home

hero:
  name: Fabric Documentation
  tagline: The official curated documentation for Fabric, a modding toolchain for Minecraft.

features:
  - title: Player Guides
    icon: 📚
    details: Are you a player looking to use mods powered by Fabric? Our player guides have you covered. These guides will help you in downloading, installing, and troubleshooting Fabric mods.
    link: /players/
    linkText: Read More
  - title: Developer Guides
    icon: 🛠️
    details: Our community-written developer guides cover everything from setting up your development environment to advanced topics like rendering and networking.
    link: /develop/
    linkText: Get Started

search: false
---

If you want to contribute to the Fabric Documentation, you can find the source code on [GitHub](https://github.com/FabricMC/fabric-docs), and the relevant [contribution guidelines](./contributing).

----------------------------------------

TITLE: Implementing ArmorMaterial Instance
DESCRIPTION: Creation of an ArmorMaterial record instance with specific defense, enchantability, sound, toughness, and repair properties.

LANGUAGE: java
CODE:
public static final ArmorMaterial INSTANCE = new ArmorMaterial(\n    BASE_DURABILITY,\n    Map.of(\n        EquipmentType.HELMET, 3,\n        EquipmentType.CHESTPLATE, 8,\n        EquipmentType.LEGGINGS, 6,\n        EquipmentType.BOOTS, 3\n    ),\n    25,\n    SoundEvents.ITEM_ARMOR_EQUIP_IRON,\n    2.0f,\n    0.0f,\n    Tags.Items.INGOTS_IRON,\n    GUIDITE_ARMOR_MATERIAL_KEY\n);

----------------------------------------

TITLE: Making an Item Compostable in Java
DESCRIPTION: This code snippet demonstrates how to make an item compostable using Fabric API's CompostingChanceRegistry.

LANGUAGE: java
CODE:
CompostingChanceRegistry.INSTANCE.add(SUSPICIOUS_SUBSTANCE, 0.3f);

----------------------------------------

TITLE: Installing Node.js Dependencies
DESCRIPTION: Command to install the required Node.js dependencies for the Fabric Documentation project.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Implementing FabricLanguageProvider for Translation Generation in Java
DESCRIPTION: This snippet shows how to create a class that extends FabricLanguageProvider to generate translations. It demonstrates setting up the constructor and implementing the generateTranslations method.

LANGUAGE: java
CODE:
public class FabricDocsReferenceEnglishLangProvider extends FabricLanguageProvider {
    protected FabricDocsReferenceEnglishLangProvider(FabricDataOutput dataOutput) {
        super(dataOutput, "en_us");
    }

    @Override
    public void generateTranslations(TranslationBuilder translationBuilder) {
        // We'll add translations here later
    }
}

----------------------------------------

TITLE: Registering Custom Potion in Fabric Mod
DESCRIPTION: Registers the custom potion using the FabricBrewingRecipeRegistryBuilder.BUILD event. This snippet sets up the brewing recipe for the custom potion using a potato as the ingredient.

LANGUAGE: java
CODE:
@Override
public void onInitialize() {
    Registry.register(Registries.POTION, TATER_POTION_KEY, TATER_POTION);

    FabricBrewingRecipeRegistryBuilder.BUILD.register(event -> {
        event.registerPotionRecipe(
                Potions.WATER,
                Items.POTATO,
                TATER_POTION
        );
    });
}

----------------------------------------

TITLE: Displaying Fabric Version Support Info
DESCRIPTION: Documentation section showing Fabric's version compatibility, indicating support for Minecraft snapshots 18w43b and above, and releases 1.14 and above.

LANGUAGE: markdown
CODE:
## What Minecraft Versions Does Fabric Support? {#what-minecraft-versions-does-fabric-support}

Officially, Fabric supports all versions of Minecraft starting from snapshots `18w43b` and above, and releases `1.14` and above.

----------------------------------------

TITLE: Creating Optional Field Codecs in Java
DESCRIPTION: Demonstrates how to create optional field codecs with and without default values.

LANGUAGE: java
CODE:
// Sans valeur par défaut
MapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos");

// Avec valeur par défaut
MapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos", BlockPos.ORIGIN);

----------------------------------------

TITLE: Fabric Mod Download Sources
DESCRIPTION: Documentation section listing official platforms for downloading Fabric mods, including a warning about trustworthy sources and links to major mod repositories.

LANGUAGE: markdown
CODE:
::: info
You should always check if mods are from a trustworthy source. Check out the [Finding Trustworthy Mods](./finding-mods) guide for more information.
:::

The majority of authors publish their mods to [Modrinth](https://modrinth.com/mods?g=categories:%27fabric%27) and [CurseForge](https://www.curseforge.com/minecraft/search?class=mc-mods&gameVersionTypeId=4), however some may choose to upload them on their personal websites, or on other platforms, such as a GitHub repository.

----------------------------------------

TITLE: Creating Custom Potion Instance in Java
DESCRIPTION: Defines a custom potion instance using a StatusEffectInstance with a custom effect, duration, and amplifier.

LANGUAGE: java
CODE:
public static final Potion TATER_POTION = new Potion(
    new StatusEffectInstance(
        FabricDocsReferenceStatusEffects.TATER_EFFECT,
        200, // Duration (in ticks)
        0   // Amplifier
    )
);

----------------------------------------

TITLE: Using the Dynamic Sound System
DESCRIPTION: Shows how to use the DynamicSoundManager to play and stop sounds in response to network packets.

LANGUAGE: java
CODE:
public class ReceiveS2C {
    public static void receiveSoundPacket(MinecraftClient client, PacketByteBuf buf, PacketSender responseSender) {
        BlockPos pos = buf.readBlockPos();
        Identifier soundId = buf.readIdentifier();
        TransitionState state = TransitionState.byId(buf.readIdentifier());

        client.execute(() -> {
            World world = client.world;
            if (world == null) return;

            BlockEntity blockEntity = world.getBlockEntity(pos);
            if (blockEntity instanceof DynamicSoundSource source) {
                SoundEvent sound = Registry.SOUND_EVENT.get(soundId);
                if (sound == null) return;

                DynamicSoundManager soundManager = DynamicSoundManager.getInstance();
                if (state == TransitionState.STARTING && !soundManager.isPlaying(source)) {
                    soundManager.playSound(source, sound);
                } else if (state == TransitionState.ENDING) {
                    soundManager.stopSound(source);
                }
            }
        });
    }
}

----------------------------------------

TITLE: Creating Shaped Recipes with Fabric Datagen in Java
DESCRIPTION: Shows how to define shaped recipes using a string pattern and character mappings. This example creates a recipe for crafting an oak boat.

LANGUAGE: java
CODE:
ShapedRecipeJsonBuilder.create(RecipeCategory.TRANSPORTATION, Items.OAK_BOAT)
    .pattern("# #")
    .pattern("###")
    .input('#', Items.OAK_PLANKS)
    .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
    .offerTo(exporter);

----------------------------------------

TITLE: Checking Java Version on Windows Command Prompt
DESCRIPTION: Command to verify the installed Java version on Windows. This command displays the current Java version installed on the system and is used both before and after installation to confirm Java's presence.

LANGUAGE: batch
CODE:
java -version

----------------------------------------

TITLE: Registering Custom Potion Recipe in Java
DESCRIPTION: Registers a custom potion brewing recipe using BrewingRecipeRegistry.registerPotionRecipe, specifying input potion, ingredient item, and output potion.

LANGUAGE: java
CODE:
BrewingRecipeRegistry.registerPotionRecipe(Potions.AWKWARD, Items.POTATO, TATER_POTION);

----------------------------------------

TITLE: Installing Java 21 on Debian/Ubuntu
DESCRIPTION: Commands to update package lists and install OpenJDK 21 on Debian or Ubuntu-based systems using apt.

LANGUAGE: sh
CODE:
sudo apt update
sudo apt install openjdk-21-jdk

----------------------------------------

TITLE: DynamicSoundManager Implementation
DESCRIPTION: Implements a singleton manager class for handling dynamic sound instances.

LANGUAGE: java
CODE:
public class DynamicSoundManager implements SoundInstanceCallback {
    private static DynamicSoundManager INSTANCE;
    private final List<AbstractDynamicSoundInstance> activeSounds = new ArrayList<>();

    private DynamicSoundManager() {}

    public static DynamicSoundManager getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new DynamicSoundManager();
        }
        return INSTANCE;
    }

    public void playSound(DynamicSoundSource source, SoundEvent sound) {
        AbstractDynamicSoundInstance instance = new EngineSoundInstance(source, sound, this);
        MinecraftClient.getInstance().getSoundManager().play(instance);
        this.activeSounds.add(instance);
    }

    public void stopSound(DynamicSoundSource source) {
        this.activeSounds.removeIf(instance -> {
            if (instance.getSource() == source) {
                instance.setState(TransitionState.ENDING);
                return true;
            }
            return false;
        });
    }

    public boolean isPlaying(DynamicSoundSource source) {
        return this.activeSounds.stream().anyMatch(instance -> instance.getSource() == source);
    }

    @Override
    public void onFinished(AbstractDynamicSoundInstance instance) {
        this.activeSounds.remove(instance);
        MinecraftClient.getInstance().getSoundManager().stop(instance);
    }
}

----------------------------------------

TITLE: Cloning Fabric Example Mod Repository
DESCRIPTION: This command clones the Fabric example mod repository into a new folder named 'my-mod-project'. It requires Git to be installed on the system.

LANGUAGE: sh
CODE:
git clone https://github.com/FabricMC/fabric-example-mod/ my-mod-project

----------------------------------------

TITLE: Opening Windows Command Prompt
DESCRIPTION: Command to open the Windows command prompt through the Run dialog. This is used to access the command line interface for Java version verification.

LANGUAGE: batch
CODE:
cmd.exe

----------------------------------------

TITLE: Translation Format with Parameters
DESCRIPTION: Shows how to define translations that include parameter placeholders.

LANGUAGE: json
CODE:
{
  "my_mod.text.hello": "%1$s said hello!"
}

----------------------------------------

TITLE: Installing Java on Arch Linux
DESCRIPTION: Commands for installing different Java packages on Arch Linux, including JRE, headless JRE, and JDK options.

LANGUAGE: sh
CODE:
sudo pacman -S jre-openjdk

LANGUAGE: sh
CODE:
sudo pacman -S jre-openjdk-headless

LANGUAGE: sh
CODE:
sudo pacman -S jdk-openjdk

----------------------------------------

TITLE: Configuring Robots.txt Rules for Fabric Documentation Site
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the site content and provides a reference to the XML sitemap location. The configuration uses standard robots.txt directives to define access policies.

LANGUAGE: robotstxt
CODE:
User-agent: *
Allow: /

Sitemap: https://docs.fabricmc.net/sitemap.xml

----------------------------------------

TITLE: DynamicSoundSource Interface
DESCRIPTION: Defines an interface for dynamic sound sources, providing methods to get position, volume, and pitch information.

LANGUAGE: java
CODE:
public interface DynamicSoundSource {
    Vec3d getPos();
    float getVolume();
    float getPitch();
}

----------------------------------------

TITLE: Locating Minecraft Log Directory on Linux
DESCRIPTION: Command to navigate to the Minecraft log directory on Linux systems.

LANGUAGE: bash
CODE:
~/.minecraft

----------------------------------------

TITLE: Locating Crash Reports - Windows Path
DESCRIPTION: File path for accessing crash reports on Windows operating system

LANGUAGE: bash
CODE:
%appdata%\.minecraft\crash-reports

----------------------------------------

TITLE: Creating Custom Potion Instance in Java with Fabric
DESCRIPTION: Demonstrates how to create a custom potion by declaring a Potion field and initializing it with a StatusEffectInstance. The potion is configured with a specific effect type, duration, and amplifier.

LANGUAGE: java
CODE:
public static final RegistryEntry.Reference<Potion> TATER_POTION = Registries.POTION.createRegistryKey(
    new Identifier("fabricdocs", "tater_potion"));

public static void createPotion() {
    Registry.register(
        Registries.POTION,
        new Identifier("fabricdocs", "tater_potion"),
        new Potion(
            new StatusEffectInstance(
                FabricDocsReferenceEffects.TATER_EFFECT.value(),
                200,
                0
            )
        )
    );
}

----------------------------------------

TITLE: Examining Block Tessellation Error
DESCRIPTION: The error occurred while rendering a soul campfire block. This information can help identify if the issue is specific to certain block types or rendering conditions.

LANGUAGE: java
CODE:
Block being tessellated --
Details:
	Block: Block{minecraft:soul_campfire}[facing=north,lit=true,signal_fire=false,waterlogged=false]
	Block location: World: (1063,80,-481), Section: (at 7,0,15 in 66,5,-31; chunk contains blocks 1056,-64,-496 to 1071,319,-481), Region: (2,-1; contains chunks 64,-32 to 95,-1, blocks 1024,-64,-512 to 1535,319,-1)

----------------------------------------

TITLE: Sound Event Initialization in Mod
DESCRIPTION: Implementation of the sound initialization in the mod's main class using the helper class.

LANGUAGE: java
CODE:
public class FabricDocsReferenceSounds implements ModInitializer {
    @Override
    public void onInitialize() {
        CustomSounds.init();
    }
}

----------------------------------------

TITLE: Registering Client-Side Commands in Fabric
DESCRIPTION: Shows how to register client-side commands using the ClientCommandManager in Fabric API. This code should only exist in client-side code.

LANGUAGE: java
CODE:
ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
    dispatcher.register(ClientCommandManager.literal("clientcommand").executes(context -> {
        context.getSource().sendFeedback(Text.literal("Hello from client-side command!"));
        return Command.SINGLE_SUCCESS;
    }));
});

----------------------------------------

TITLE: Locating Crash Reports - Linux Path
DESCRIPTION: File path for accessing crash reports on Linux operating system

LANGUAGE: bash
CODE:
~/.minecraft/crash-reports

----------------------------------------

TITLE: Translatable Text with Parameters
DESCRIPTION: Demonstrates how to create translatable text with variable parameters for dynamic content.

LANGUAGE: java
CODE:
Text translatable = Text.translatable("my_mod.text.hello", player.getDisplayName());

----------------------------------------

TITLE: Registering a Custom Block with Properties in Java
DESCRIPTION: This snippet shows how to create and register a custom block (Condensed Dirt) with specific properties using the Blocks.Settings class in Minecraft with Fabric.

LANGUAGE: java
CODE:
public static final Block CONDENSED_DIRT = register("condensed_dirt",
        new Block(AbstractBlock.Settings.create()
                .mapColor(MapColor.DIRT_BROWN)
                .strength(0.5f)
                .sounds(BlockSoundGroup.GRAVEL)), true);

----------------------------------------

TITLE: Adding Command Requirements in Fabric
DESCRIPTION: Demonstrates how to add requirements to a command, ensuring it can only be executed by operators with a minimum permission level.

LANGUAGE: java
CODE:
dispatcher.register(CommandManager.literal("op_only")
    .requires(source -> source.hasPermissionLevel(2))
    .executes(context -> {
        context.getSource().sendFeedback(() -> Text.literal("You are an operator!"), false);
        return Command.SINGLE_SUCCESS;
    }));

----------------------------------------

TITLE: Basic Sound Event Registration
DESCRIPTION: Simple method to register a custom sound event in the game registry using SoundEvent.of() and a mod identifier.

LANGUAGE: java
CODE:
Registry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, "metal_whistle"),
        SoundEvent.of(Identifier.of(MOD_ID, "metal_whistle")));

----------------------------------------

TITLE: Block Loot Table JSON
DESCRIPTION: Loot table configuration that defines what items drop when the block is broken.

LANGUAGE: json
CODE:
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "fabric-docs-reference:condensed_dirt"
        }
      ],
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Creating an Item Model for a Custom Block in JSON
DESCRIPTION: This JSON defines the item model for a custom block (Condensed Dirt) in Minecraft. It uses the block model as a parent for rendering in the GUI.

LANGUAGE: json
CODE:
{
  "parent": "fabric-docs-reference:block/condensed_dirt"
}

----------------------------------------

TITLE: Creating a Registry Dispatch Codec
DESCRIPTION: Example of creating a registry dispatch codec for different bean types.

LANGUAGE: java
CODE:
// Create a codec for bean types based on the previously created registry
Codec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();

// Based on that, this is our registry dispatch codec for beans!
// The first argument is the field name for this bean type
// When omitted it defaults to "type".
Codec<Bean> beanCodec = beanTypeCodec.dispatch("type", Bean::getType, BeanType::codec);

----------------------------------------

TITLE: Mixin Invoker for BrewingRecipeRegistry in Java
DESCRIPTION: Defines a mixin invoker to access the private registerPotionRecipe method in BrewingRecipeRegistry when not using Fabric API.

LANGUAGE: java
CODE:
package com.example.docs.mixin.potion;

import net.minecraft.item.Item;
import net.minecraft.potion.Potion;
import net.minecraft.recipe.BrewingRecipeRegistry;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.gen.Invoker;

@Mixin(BrewingRecipeRegistry.class)
public interface BrewingRecipeRegistryInvoker {
    @Invoker("registerPotionRecipe")
    static void invokeRegisterPotionRecipe(Potion input, Item item, Potion output) {
        throw new AssertionError();
    }
}

----------------------------------------

TITLE: Implementing Command with Suggestions in Java
DESCRIPTION: This snippet demonstrates how to implement a command with suggestions using Fabric's command API. It uses a built-in suggestion provider for summonable entities.

LANGUAGE: java
CODE:
CommandManager.argument("entity", EntitySummonArgumentType.entitySummon())
    .suggests(SuggestionProviders.SUMMONABLE_ENTITIES)

----------------------------------------

TITLE: Creating a Registry Dispatch Codec
DESCRIPTION: Example of creating a registry dispatch codec for different bean types.

LANGUAGE: java
CODE:
// Create a codec for bean types based on the previously created registry
Codec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();

// Based on that, this is our registry dispatch codec for beans!
// The first argument is the field name for this bean type
// When omitted it defaults to "type".
Codec<Bean> beanCodec = beanTypeCodec.dispatch("type", Bean::getType, BeanType::codec);

----------------------------------------

TITLE: Registering Sound Events in Sounds.json
DESCRIPTION: JSON configuration for defining custom sound events in a Fabric mod. Specifies the sound file path and subtitle context.

LANGUAGE: json
CODE:
{"metal_whistle": {"subtitle": "sounds.fabric-docs-reference.metal_whistle","sounds": ["fabric-docs-reference/metal_whistle"]}}

----------------------------------------

TITLE: Mixin Invoker for BrewingRecipeRegistry in Java
DESCRIPTION: Defines a mixin invoker to access the private registerPotionRecipe method in BrewingRecipeRegistry when not using Fabric API.

LANGUAGE: java
CODE:
package com.example.docs.mixin.potion;

import net.minecraft.item.Item;
import net.minecraft.potion.Potion;
import net.minecraft.recipe.BrewingRecipeRegistry;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.gen.Invoker;

@Mixin(BrewingRecipeRegistry.class)
public interface BrewingRecipeRegistryInvoker {
    @Invoker("registerPotionRecipe")
    static void invokeRegisterPotionRecipe(Potion input, Item item, Potion output) {
        throw new AssertionError();
    }
}

----------------------------------------

TITLE: Specifying Harvesting Tool for a Custom Block in JSON
DESCRIPTION: This JSON adds a custom block (Condensed Dirt) to the 'shovel' tag in Minecraft, indicating that it's best harvested with a shovel.

LANGUAGE: json
CODE:
{
  "replace": false,
  "values": [
    "fabric-docs-reference:condensed_dirt"
  ]
}

----------------------------------------

TITLE: Creating Optional and Ranged Codecs in Java
DESCRIPTION: Demonstrates creating optional codecs and codecs with numeric ranges.

LANGUAGE: java
CODE:
// Sin valor por defecto
MapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos");

// Con valor por defecto
MapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos", BlockPos.ORIGIN);

// No puede ser mayor a 2
Codec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);

----------------------------------------

TITLE: Formatting Text in Java
DESCRIPTION: Shows how to apply formatting to MutableText objects using the Formatting enum in Minecraft modding.

LANGUAGE: java
CODE:
MutableText result = Text.literal("Hello World!")
  .formatted(Formatting.AQUA, Formatting.BOLD, Formatting.UNDERLINE);

----------------------------------------

TITLE: Creating Command with Multiple Arguments - Java
DESCRIPTION: Shows how to implement a command that accepts two integer arguments, with the second one being optional. Different execution paths handle single and double argument cases.

LANGUAGE: java
CODE:
public static void register() {
    CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {
        dispatcher.register(CommandManager.literal("command_with_two_args")
            .then(CommandManager.argument("value1", IntegerArgumentType.integer())
            .then(CommandManager.argument("value2", IntegerArgumentType.integer()).executes(FabricDocsReferenceCommands::executeCommandWithTwoArgs))
            .executes(FabricDocsReferenceCommands::executeCommandWithTwoArgsOne)));
    });
}

----------------------------------------

TITLE: Playing Sounds with Block Interaction
DESCRIPTION: Example showing how to play sounds when interacting with blocks using useOnBlock() method. Shows playing a copper block placement sound using the world instance's playSound() method.

LANGUAGE: java
CODE:
public ActionResult useOnBlock(ItemUsageContext context) {
    if (!context.getWorld().isClient()) {
        BlockPos pos = context.getBlockPos();
        PlayerEntity player = context.getPlayer();
        World world = context.getWorld();

        world.playSound(
            null,
            pos,
            SoundEvents.BLOCK_COPPER_PLACE,
            SoundCategory.BLOCKS,
            1.0f,
            1.0f
        );
    }
    return ActionResult.SUCCESS;
}

----------------------------------------

TITLE: Adding Widget to Screen
DESCRIPTION: Shows how to add a custom widget to a screen using the addDrawableChild method within the init method of a Screen class.

LANGUAGE: java
CODE:
@Override
protected void init() {
    super.init();
    
    addDrawableChild(new CustomWidget(
        width / 2 - 50, // x
        height / 2 - 10, // y
        100, // width
        20, // height
        Text.literal("Custom Widget") // message
    ));
}

----------------------------------------

TITLE: Checking Java Version in Windows Command Prompt
DESCRIPTION: Command to verify the installed version of Java on Windows system. This command displays the current Java version and implementation details.

LANGUAGE: bash
CODE:
java -version

----------------------------------------

TITLE: Creating Optional Fields in Codecs
DESCRIPTION: Examples of creating optional fields in codecs using optionalFieldOf.

LANGUAGE: java
CODE:
// Without default value
MapCodec<Optional<BlockPos>> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos");

// With default value
MapCodec<BlockPos> optionalCodec = BlockPos.CODEC.optionalFieldOf("pos", BlockPos.ORIGIN);

----------------------------------------

TITLE: Opening a Custom Screen in Java for Fabric Mods
DESCRIPTION: This code snippet shows how to open a custom screen using the MinecraftClient's setScreen method. This can be called from various places like key bindings, commands, or client packet handlers.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty())
);

----------------------------------------

TITLE: Defining Custom Loot Tables
DESCRIPTION: Creation of custom loot table registry keys for chest loot generation.

LANGUAGE: java
CODE:
public class ModLootTables {
    private static final Identifier TEST_CHEST_ID = new Identifier("docs", "chests/test_chest");
    public static final RegistryKey<LootTable> TEST_CHEST = RegistryKey.of(RegistryKeys.LOOT_TABLE, TEST_CHEST_ID);
}

----------------------------------------

TITLE: Installing OpenJDK 17 on Fedora
DESCRIPTION: Command to install OpenJDK 17 on Fedora using dnf package manager.

LANGUAGE: sh
CODE:
sudo dnf install java-17-openjdk

----------------------------------------

TITLE: Analyzing ClassCastException in Snow Mod
DESCRIPTION: The main error occurs in the Snow mod when attempting to cast a block entity. This suggests a compatibility issue between the Snow mod and another mod or the base game.

LANGUAGE: java
CODE:
java.lang.ClassCastException: class net.minecraft.class_3924 cannot be cast to class snownee.snow.block.entity.SnowCoveredBlockEntity (net.minecraft.class_3924 and snownee.snow.block.entity.SnowCoveredBlockEntity are in unnamed module of loader net.fabricmc.loader.impl.launch.knot.KnotClassLoader @57d5872c)

----------------------------------------

TITLE: Installing Headless OpenJDK 17 on Fedora
DESCRIPTION: Command to install the headless version of OpenJDK 17 on Fedora, suitable for servers without graphical interfaces.

LANGUAGE: sh
CODE:
sudo dnf install java-17-openjdk-headless

----------------------------------------

TITLE: Defining SoundInstanceCallback Interface in Fabric
DESCRIPTION: Definition of a SoundInstanceCallback interface to handle signals from sound instances.

LANGUAGE: java
CODE:
public interface SoundInstanceCallback {
    void onFinished(AbstractDynamicSoundInstance instance);
}

----------------------------------------

TITLE: Implementing Command Redirect in Fabric
DESCRIPTION: Shows how to create a command redirect (alias) that points to another command's functionality.

LANGUAGE: java
CODE:
LiteralCommandNode<ServerCommandSource> redirected = dispatcher.register(
        CommandManager.literal("redirected")
                .executes(FabricDocsReferenceCommands::executeRedirectedBy)
                .then(CommandManager.argument("value", IntegerArgumentType.integer())
                        .executes(FabricDocsReferenceCommands::executeRedirectedBy)
                )
);

dispatcher.register(CommandManager.literal("redirect_to")
        .redirect(redirected)
);

----------------------------------------

TITLE: Configuring Client Production Run Task in Groovy
DESCRIPTION: This snippet demonstrates how to configure the client production run task, including options for using XVFB for headless environments and configuring tracy-capture for profiling. It shows how to set up virtual framebuffer and tracy profiling options.

LANGUAGE: groovy
CODE:
tasks.register("prodClient", net.fabricmc.loom.task.prod.ClientProductionRunTask) {
    // Whether to use XVFB to run the game, using a virtual framebuffer. This is useful for headless CI environments.
    // Defaults to true only on Linux and when the "CI" environment variable is set.
    // XVFB must be installed, on Debian-based systems you can install it with: `apt install xvfb`
    useXVFB = true

    // Optionally configure the tracy-capture executable.
    tracy {
        // The path to the tracy-capture executable.
        tracyCapture = file("tracy-capture")

        // The output path of the captured tracy profile.
        output = file("profile.tracy")

        // The maximum number of seconds to wait for tracy-capture to stop on its own before killing it.
        // Defaults to 10 seconds.
        maxShutdownWaitSeconds = 10
    }
}

----------------------------------------

TITLE: Locating Minecraft Log Directory on Windows
DESCRIPTION: Command to navigate to the Minecraft log directory on Windows systems.

LANGUAGE: bash
CODE:
%appdata%\.minecraft

----------------------------------------

TITLE: Creating a Recursive Codec
DESCRIPTION: Example of creating a recursive codec for a linked list node structure.

LANGUAGE: java
CODE:
Codec<ListNode> codec = Codec.recursive(
  "ListNode", // name of the codec
  selfCodec -> {
    // Here, `selfCodec` represents `Codec<ListNode>` as if it was already constructed
    // This lambda should return the codec we want to use from the start,
    // referencing itself through `selfCodec`
    return RecordCodecBuilder.create(instance ->
      instance.group(
        Codec.INT.fieldOf("value").forGetter(ListNode::value),
         // The `next` field will be recursively handled using the codec itself
        Codecs.createStrictOptionalFieldCodec(selfCodec, "next", null).forGetter(ListNode::next)
      ).apply(instance, ListNode::new)
    );
  }
);

----------------------------------------

TITLE: Implementing Render Method for BlockEntityRenderer in Java
DESCRIPTION: Demonstrates how to implement the render method of a BlockEntityRenderer to draw text on the top face of a block. It includes matrix transformations for positioning and scaling.

LANGUAGE: java
CODE:
@Override
public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices,
                   VertexConsumerProvider vertexConsumers, int light, int overlay) {
    matrices.push();
    matrices.translate(0.5, 1, 0.5);
    matrices.multiply(RotationAxis.POSITIVE_X.rotationDegrees(90));
    matrices.scale(1/18f, 1/18f, 1/18f);

    String text = Integer.toString(entity.getCount());
    int width = this.textRenderer.getWidth(text);
    Matrix4f matrix = matrices.peek().getPositionMatrix();
    this.textRenderer.draw(text, -width / 2f, 0, 0xFFFFFF, false, matrix, vertexConsumers, TextRenderer.TextLayerType.NORMAL, 0, light);

    matrices.pop();
}

----------------------------------------

TITLE: Registering Command for Dedicated Environment in Fabric
DESCRIPTION: Shows how to register a command that only executes in a dedicated server environment using the RegistrationEnvironment parameter.

LANGUAGE: java
CODE:
if (environment == CommandManager.RegistrationEnvironment.DEDICATED) {
    dispatcher.register(CommandManager.literal("dedicated_command")
            .executes(FabricDocsReferenceCommands::executeDedicatedCommand)
    );
}

----------------------------------------

TITLE: Registering Custom Enchantment Effects in Minecraft Registry
DESCRIPTION: Registers the custom enchantment effect into Minecraft's registry system using Fabric's registration utilities.

LANGUAGE: java
CODE:
public class ModEnchantmentEffects {
    public static final RegistryKey<Codec<? extends EnchantmentEffect>> LIGHTNING = createKey("lightning");

    private static RegistryKey<Codec<? extends EnchantmentEffect>> createKey(String id) {
        return RegistryKey.of(FabricRegistries.ENCHANTMENT_EFFECT_TYPE, new Identifier("fabric-docs-reference", id));
    }

    public static void registerModEnchantmentEffects() {
        Registry.register(FabricRegistries.ENCHANTMENT_EFFECT_TYPE, LIGHTNING, LightningEnchantmentEffect.CODEC);
    }
}

----------------------------------------

TITLE: Creating a Recursive Codec
DESCRIPTION: Example of creating a recursive codec for a linked list node structure.

LANGUAGE: java
CODE:
Codec<ListNode> codec = Codec.recursive(
  "ListNode", // name of the codec
  selfCodec -> {
    // Here, `selfCodec` represents `Codec<ListNode>` as if it was already constructed
    // This lambda should return the codec we want to use from the start,
    // referencing itself through `selfCodec`
    return RecordCodecBuilder.create(instance ->
      instance.group(
        Codec.INT.fieldOf("value").forGetter(ListNode::value),
         // The `next` field will be recursively handled using the codec itself
        Codecs.createStrictOptionalFieldCodec(selfCodec, "next", null).forGetter(ListNode::next)
      ).apply(instance, ListNode::new)
    );
  }
);

----------------------------------------

TITLE: Accessing Mods Folder Paths Across Operating Systems
DESCRIPTION: File paths for accessing the Minecraft mods folder on Windows, macOS, and Linux operating systems.

LANGUAGE: plaintext
CODE:
%appdata%\.minecraft\mods

LANGUAGE: plaintext
CODE:
~/Library/Application Support/minecraft/mods

LANGUAGE: plaintext
CODE:
~/.minecraft/mods

----------------------------------------

TITLE: Creating Codecs for Mutually Convertible Types
DESCRIPTION: Example of creating a codec for BlockPos based on Vec3d using xmap.

LANGUAGE: java
CODE:
Codec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(
    // Convert Vec3d to BlockPos
    vec -> new BlockPos(vec.x, vec.y, vec.z),
    // Convert BlockPos to Vec3d
    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())
);

----------------------------------------

TITLE: Implementing a Custom Sound Instance
DESCRIPTION: Shows an example implementation of a custom sound instance extending AbstractDynamicSoundInstance.

LANGUAGE: java
CODE:
public class EngineSoundInstance extends AbstractDynamicSoundInstance {

    public EngineSoundInstance(DynamicSoundSource source, SoundInstanceCallback callback) {
        super(FabricDocsDynamicSound.ENGINE_LOOP, SoundCategory.BLOCKS, source, callback);
        this.startDuration = 20;
        this.endDuration = 40;
        this.minVolume = 0.1F;
        this.maxVolume = 1.0F;
        this.minPitch = 0.5F;
        this.maxPitch = 2.0F;
    }

    @Override
    protected float calculateVolume() {
        return this.getTransitionVolume() * this.maxVolume;
    }

    @Override
    protected float calculatePitch() {
        return this.lerp(this.minPitch, this.maxPitch, this.source.getStress());
    }
}

----------------------------------------

TITLE: Registering BlockEntityRenderer in Fabric ClientModInitializer
DESCRIPTION: Shows how to register a BlockEntityRenderer for a custom block entity type using BlockEntityRendererFactories in a ClientModInitializer class.

LANGUAGE: java
CODE:
public class FabricDocsBlockEntityRenderer implements ClientModInitializer {
    @Override
    public void onInitializeClient() {
        BlockEntityRendererFactories.register(FabricDocsBlockEntity.COUNTER_BLOCK_ENTITY, CounterBlockEntityRenderer::new);
    }
}

----------------------------------------

TITLE: Registering Custom Block with Dynamic Light Emission in Java
DESCRIPTION: This Java snippet shows how to register a custom block with dynamic light emission based on its state in Minecraft modding.

LANGUAGE: java
CODE:
public static final Block PRISMARINE_LAMP = registerBlock("prismarine_lamp",
    new PrismarineLampBlock(FabricBlockSettings.copyOf(Blocks.PRISMARINE)
        .luminance(PrismarineLampBlock::getLightLevelLit)));

----------------------------------------

TITLE: Reading Component Value in Java
DESCRIPTION: Shows how to read the value of a custom component from an ItemStack and use it in a tooltip.

LANGUAGE: Java
CODE:
public void appendTooltip(ItemStack stack, TooltipContext context, List<Text> tooltip, TooltipType type) {
    int count = stack.get(ModComponents.CLICK_COUNT_COMPONENT);
    tooltip.add(Text.translatable("item.fabric-docs-reference.counter.info", count).formatted(Formatting.GOLD));
}

----------------------------------------

TITLE: Registering a Basic Integer Component in Java
DESCRIPTION: Demonstrates how to register a basic integer component type for storing a click count on items.

LANGUAGE: Java
CODE:
public static final ComponentType<Integer> CLICK_COUNT_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "click_count"),
    ComponentType.<Integer>builder().codec(Codec.INT).build()
);

----------------------------------------

TITLE: Enhanced Custom Screen with Previous Screen Support
DESCRIPTION: Implements a custom screen that can return to the previous screen when closed.

LANGUAGE: java
CODE:
Screen currentScreen = MinecraftClient.getInstance().currentScreen;
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty(), currentScreen)
);

----------------------------------------

TITLE: Creating a BlockEntityRenderer Class in Java
DESCRIPTION: Defines a BlockEntityRenderer class for a custom CounterBlockEntity. The class constructor takes a BlockEntityRendererFactory.Context parameter and implements the render method.

LANGUAGE: java
CODE:
public class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {
    private final TextRenderer textRenderer;

    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {
        this.textRenderer = ctx.getTextRenderer();
    }

    @Override
    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices,
                       VertexConsumerProvider vertexConsumers, int light, int overlay) {
        // Rendering logic will be implemented here
    }
}

----------------------------------------

TITLE: Creating a Horizontal Block Model in JSON
DESCRIPTION: This JSON snippet defines the model for a horizontal condensed oak log block, specifying textures for the end and side faces.

LANGUAGE: json
CODE:
{
  "parent": "block/cube_column_horizontal",
  "textures": {
    "end": "fabric-docs-reference:block/condensed_oak_log_top",
    "side": "fabric-docs-reference:block/condensed_oak_log"
  }
}

----------------------------------------

TITLE: Generating Enchantment Data with Fabric
DESCRIPTION: Creates an enchantment generator class that programmatically generates JSON data for the custom enchantment using Fabric's data generation tools.

LANGUAGE: java
CODE:
public class EnchantmentGenerator extends FabricEnchantmentProvider {
    private static final RegistryKey<Enchantment> THUNDERING = RegistryKey.of(
            RegistryKeys.ENCHANTMENT,
            new Identifier("fabric-docs-reference", "thundering")
    );

    public EnchantmentGenerator(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generateEnchantmentData() {
        getOrCreateEnchantmentData(THUNDERING)
                .configure()
                .target(Targets.SWORD)
                .rarity(Rarity.VERY_RARE)
                .maxLevel(3)
                .entity(new EntityEffect(ModEnchantmentEffects.LIGHTNING))
                .done();
    }
}

----------------------------------------

TITLE: Reading Component Value with Default in Java
DESCRIPTION: Shows how to safely read a component value from an ItemStack, providing a default value if the component is missing.

LANGUAGE: Java
CODE:
int clickCount = stack.getOrDefault(ModComponents.CLICK_COUNT_COMPONENT, 0);

----------------------------------------

TITLE: Locating Mods Folder on Different Operating Systems
DESCRIPTION: This snippet provides file paths for the Minecraft mods folder on Windows, macOS, and Linux. Users can paste these paths into their file explorer to quickly navigate to the correct location for installing mods.

LANGUAGE: plaintext
CODE:
%appdata%\.minecraft\mods

LANGUAGE: plaintext
CODE:
~/Library/Application Support/minecraft/mods

LANGUAGE: plaintext
CODE:
~/.minecraft/mods

----------------------------------------

TITLE: Updating Component Value in Java
DESCRIPTION: Demonstrates how to update the value of a custom component on an ItemStack.

LANGUAGE: Java
CODE:
stack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);

----------------------------------------

TITLE: Updating Component Value in Java
DESCRIPTION: Demonstrates how to update the value of a custom component on an ItemStack.

LANGUAGE: Java
CODE:
stack.set(ModComponents.CLICK_COUNT_COMPONENT, newValue);

----------------------------------------

TITLE: Drawing Rectangles with DrawContext in Java
DESCRIPTION: Demonstrates how to draw a filled rectangle using the DrawContext.fill() method.

LANGUAGE: java
CODE:
context.fill(10, 10, 100, 100, 0xFF0000FF);

----------------------------------------

TITLE: Creating a Dispatch Registry Codec for Beans in Java
DESCRIPTION: Shows how to create a dispatch registry codec for different types of beans using a custom BeanType class and registry.

LANGUAGE: java
CODE:
// On peut créer un codec pour les types de bean
// grâce au registre précédemment créé
Codec<BeanType<?>> beanTypeCodec = BeanType.REGISTRY.getCodec();

// Et à partir de ça, un codec de répartition par registre pour beans !
// Le premier argument est le nom du champ correspondant au type.
// Si omis, il sera égal à "type".
Codec<Bean> beanCodec = beanTypeCodec.dispatch("type", Bean::getType, BeanType::getCodec);

----------------------------------------

TITLE: Registering a Pillar Block in Java
DESCRIPTION: This snippet demonstrates how to register a custom pillar block (Condensed Oak Log) using the PillarBlock class in Minecraft modding.

LANGUAGE: java
CODE:
public static final Block CONDENSED_OAK_LOG = registerBlock("condensed_oak_log",
    new PillarBlock(FabricBlockSettings.copyOf(Blocks.OAK_LOG)));

----------------------------------------

TITLE: Particle Spawn Command
DESCRIPTION: Minecraft command to test and spawn the custom particle in-game at the player's location.

LANGUAGE: mcfunction
CODE:
/particle fabric-docs-reference:sparkle_particle ~ ~1 ~

----------------------------------------

TITLE: Defining a Composite Component Record in Java
DESCRIPTION: Shows how to create a record class for a composite component with multiple fields.

LANGUAGE: Java
CODE:
public record MyCustomComponent(float temperature, boolean burnt) {
    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance -> instance.group(
        Codec.FLOAT.fieldOf("temperature").forGetter(MyCustomComponent::temperature),
        Codec.BOOL.fieldOf("burnt").forGetter(MyCustomComponent::burnt)
    ).apply(instance, MyCustomComponent::new));
}

----------------------------------------

TITLE: Defining a Composite Component Record in Java
DESCRIPTION: Shows how to create a record class for a composite component with multiple fields.

LANGUAGE: Java
CODE:
public record MyCustomComponent(float temperature, boolean burnt) {
    public static final Codec<MyCustomComponent> CODEC = RecordCodecBuilder.create(instance -> instance.group(
        Codec.FLOAT.fieldOf("temperature").forGetter(MyCustomComponent::temperature),
        Codec.BOOL.fieldOf("burnt").forGetter(MyCustomComponent::burnt)
    ).apply(instance, MyCustomComponent::new));
}

----------------------------------------

TITLE: Drawing a Portion of a Texture with DrawContext in Java
DESCRIPTION: This example demonstrates how to draw a specific region of a texture using DrawContext.drawTexture(), utilizing u, v, regionWidth, and regionHeight parameters.

LANGUAGE: java
CODE:
context.drawTexture(TEXTURE, 10, 10, 100, 100, 29, 18, 14, 14, 256, 256);

----------------------------------------

TITLE: Opening a Custom Screen with Previous Screen Handling in Java for Fabric
DESCRIPTION: This code snippet demonstrates how to open a custom screen while passing the current screen as an argument, allowing for returning to the previous screen when closing.

LANGUAGE: java
CODE:
Screen currentScreen = MinecraftClient.getInstance().currentScreen;
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty(), currentScreen)
);

----------------------------------------

TITLE: Defining Pillar Block States JSON
DESCRIPTION: Blockstate definition for a pillar block that handles different axis orientations using model variants and rotations.

LANGUAGE: json
CODE:
{
  "variants": {
    "axis=x": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90,
      "y": 90
    },
    "axis=y": {
      "model": "fabric-docs-reference:block/condensed_oak_log"
    },
    "axis=z": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90
    }
  }
}

----------------------------------------

TITLE: Registering a Composite Component in Java
DESCRIPTION: Demonstrates how to register a composite component type using a custom record and codec.

LANGUAGE: Java
CODE:
public static final ComponentType<MyCustomComponent> MY_CUSTOM_COMPONENT = Registry.register(
    Registries.DATA_COMPONENT_TYPE,
    Identifier.of(FabricDocsReference.MOD_ID, "my_custom_component"),
    ComponentType.<MyCustomComponent>builder().codec(MyCustomComponent.CODEC).build()
);

----------------------------------------

TITLE: Locating Minecraft Log Directories in Different Operating Systems
DESCRIPTION: These commands show the file paths where Minecraft logs are stored on Windows, macOS, and Linux systems. The logs are typically found in the '.minecraft' directory, with the exact path varying by operating system.

LANGUAGE: bash
CODE:
%appdata%\.minecraft

LANGUAGE: bash
CODE:
~/Library/Application Support/minecraft

LANGUAGE: bash
CODE:
~/.minecraft

----------------------------------------

TITLE: Defining Item Model in JSON
DESCRIPTION: This JSON snippet defines the model for the new item, specifying the parent model and the texture to be used for rendering the item in-game.

LANGUAGE: json
CODE:
{
  "parent": "item/generated",
  "textures": {
    "layer0": "fabric-docs-reference:item/suspicious_substance"
  }
}

----------------------------------------

TITLE: Registering Custom Argument Type in Java
DESCRIPTION: Shows how to register a custom argument type for both server and client in Fabric mod initialization.

LANGUAGE: java
CODE:
public class ExampleMod implements ModInitializer {
    @Override
    public void onInitialize() {
        ArgumentTypeRegistry.registerArgumentType(new Identifier("example", "blockpos"),
                BlockPosArgumentType.class,
                new ConstantArgumentSerializer<>(BlockPosArgumentType::blockPos));
    }
}

----------------------------------------

TITLE: Creating Text Objects in Java
DESCRIPTION: Demonstrates how to create literal and mutable Text objects in Java for Minecraft modding.

LANGUAGE: java
CODE:
Text literal = Text.of("Hello, world!");
MutableText mutable = Text.literal("Hello, world!");
// Keep in mind that a MutableText can be used as a Text, making this valid:
Text mutableAsText = mutable;

----------------------------------------

TITLE: Calling ModItems.initialize() in ModInitializer
DESCRIPTION: This snippet shows how to call the initialize method of the ModItems class in the mod's main initialization class to ensure proper item registration.

LANGUAGE: java
CODE:
public class FabricDocsReferenceItems implements ModInitializer {
    @Override
    public void onInitialize() {
        ModItems.initialize();
    }
}

----------------------------------------

TITLE: Fabric Mod Download Sources - Markdown
DESCRIPTION: Markdown section detailing the primary platforms where users can find and download Fabric mods, including a warning about verifying mod sources.

LANGUAGE: markdown
CODE:
::: info
You should always check if mods are from a trustworthy source. Check out the [Finding Trustworthy Mods](./finding-mods) guide for more information.
:::

The majority of authors publish their mods to [Modrinth](https://modrinth.com/mods?g=categories:%27fabric%27) and [CurseForge](https://www.curseforge.com/minecraft/search?class=mc-mods&gameVersionTypeId=4), however some may choose to upload them on their personal websites, or on other platforms, such as a GitHub repository.

----------------------------------------

TITLE: Deserializing JSON to Text in Java
DESCRIPTION: Demonstrates how to deserialize JSON text into Text objects using the Text.Serializer class in Minecraft modding.

LANGUAGE: java
CODE:
Text fromJson = Text.Serializer.fromJson(json);

----------------------------------------

TITLE: Creating a TransitionState Enum
DESCRIPTION: Defines an enum for managing sound transition states with associated identifiers.

LANGUAGE: java
CODE:
public enum TransitionState {
    STARTING(new Identifier("docs", "starting")),
    RUNNING(new Identifier("docs", "running")),
    ENDING(new Identifier("docs", "ending"));

    private final Identifier id;

    TransitionState(Identifier id) {
        this.id = id;
    }

    public Identifier getId() {
        return id;
    }

    public static TransitionState byId(Identifier id) {
        for (TransitionState state : values()) {
            if (state.getId().equals(id)) {
                return state;
            }
        }
        return null;
    }
}

----------------------------------------

TITLE: Creating Tool Item Model in JSON
DESCRIPTION: JSON configuration for the tool item model, using the handheld parent model type commonly used for tools.

LANGUAGE: json
CODE:
{
    "parent": "item/handheld",
    "textures": {
        "layer0": "fabric-docs-reference:item/guidite_sword"
    }
}

----------------------------------------

TITLE: Defining Custom Damage Type JSON in Minecraft Modding
DESCRIPTION: Creates a custom 'Tater' damage type with specific properties such as exhaustion and scaling with difficulty.

LANGUAGE: json
CODE:
{
  "exhaustion": 0.1,
  "message_id": "tater",
  "scaling": "when_caused_by_living_non_player"
}

----------------------------------------

TITLE: Implementing FabricRecipeProvider for Datagen in Java
DESCRIPTION: Creates a custom FabricRecipeProvider class for generating recipes. The generate method is where all recipe generation logic is implemented.

LANGUAGE: java
CODE:
public class FabricDocsReferenceRecipeProvider extends FabricRecipeProvider {
    public FabricDocsReferenceRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(RecipeExporter exporter) {
        // Recipe generation goes here
    }
}

----------------------------------------

TITLE: Implementing Widget Events in Java for Fabric
DESCRIPTION: This code demonstrates how to handle widget events, specifically changing the widget's color when hovered over.

LANGUAGE: java
CODE:
@Override
public void renderButton(MatrixStack matrices, int mouseX, int mouseY, float delta) {
    fill(matrices, this.x, this.y, this.x + this.width, this.y + this.height, isHovered() ? 0xFFAAAAAA : 0xFFFFFFFF);
    drawCenteredText(matrices, textRenderer, getMessage(), this.x + this.width / 2, this.y + (this.height - 8) / 2, 0);
}

----------------------------------------

TITLE: Defining Armor Item Model in JSON
DESCRIPTION: Creates a JSON model file for an armor item, specifying its parent model and texture.

LANGUAGE: json
CODE:
{
  "parent": "item/generated",
  "textures": {
    "layer0": "fabric-docs-reference:item/guidite_helmet"
  }
}

----------------------------------------

TITLE: Creating a Static Initialization Method for ModBlocks in Java
DESCRIPTION: This code demonstrates how to create a dummy initialize method in the ModBlocks class to trigger static initialization when called in the mod initializer.

LANGUAGE: java
CODE:
public class ModBlocks {
    // ...

    public static void initialize() {}
}

----------------------------------------

TITLE: Fabric Modpack Sources - Markdown
DESCRIPTION: Markdown list showing the main platforms where users can find pre-made Fabric modpacks, including popular modpack repositories.

LANGUAGE: markdown
CODE:
- [Modrinth](https://modrinth.com/modpacks?g=categories:%27fabric%27)
- [CurseForge](https://www.curseforge.com/minecraft/search?class=modpacks&gameVersionTypeId=4)
- [Feed The Beast](https://www.feed-the-beast.com/ftb-app)
- [Technic](https://www.technicpack.net/modpacks)

----------------------------------------

TITLE: Generating Shapeless Recipes with Fabric Datagen in Java
DESCRIPTION: Demonstrates how to create shapeless recipes using the FabricRecipeProvider. This example creates a recipe for crafting dirt from gravel.

LANGUAGE: java
CODE:
ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, Blocks.DIRT)
    .input(Blocks.GRAVEL)
    .criterion(hasItem(Blocks.GRAVEL), conditionsFromItem(Blocks.GRAVEL))
    .offerTo(exporter, new Identifier("dirt_from_gravel"));

----------------------------------------

TITLE: Drawing Texture Regions with DrawContext in Java
DESCRIPTION: Shows how to draw a specific portion of a texture using u,v coordinates and region dimensions.

LANGUAGE: java
CODE:
context.drawTexture(RECIPE_BOOK, x, y, u, v, regionWidth, regionHeight, textureWidth, textureHeight);

----------------------------------------

TITLE: Creating ArmorMaterial Instance in Java
DESCRIPTION: Instantiates the custom ArmorMaterial for use with armor items.

LANGUAGE: java
CODE:
public static final ArmorMaterial GUIDITE = new GuiditeArmorMaterial();

----------------------------------------

TITLE: Adding Fabric Loader JUnit Dependency in Gradle
DESCRIPTION: This snippet shows how to add the Fabric Loader JUnit dependency to the build.gradle file for enabling unit testing in Minecraft mods.

LANGUAGE: groovy
CODE:
testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"

----------------------------------------

TITLE: Creating Shapeless Recipes in Fabric
DESCRIPTION: Implementation of shapeless crafting recipes using the recipe generator. Shows how to define inputs and outputs without specific positions.

LANGUAGE: java
CODE:
ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, EXAMPLE_BLOCK)
    .input(Items.DIAMOND)
    .input(Items.APPLE)
    .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
    .offerTo(exporter);

----------------------------------------

TITLE: Drawing Complete Textures with DrawContext in Java
DESCRIPTION: Demonstrates rendering a complete texture using DrawContext with specified texture dimensions.

LANGUAGE: java
CODE:
context.drawGuiTexture(TEXTURE, x, y, width, height);

----------------------------------------

TITLE: Creating Command Redirects in Fabric
DESCRIPTION: Demonstrates how to create command redirects (aliases) to redirect the functionality of one command to another.

LANGUAGE: java
CODE:
ClientCommandRegistrationCallback.EVENT.register((dispatcher, registryAccess) -> {
    LiteralCommandNode<FabricClientCommandSource> fooNode = dispatcher.register(
        ClientCommandManager.literal("foo").executes(context -> {
            context.getSource().sendFeedback(Text.literal("Called /foo"));
            return Command.SINGLE_SUCCESS;
        })
    );

    dispatcher.register(ClientCommandManager.literal("bar").redirect(fooNode));
});

----------------------------------------

TITLE: Opening Windows Command Prompt
DESCRIPTION: Command to open the Windows command prompt through the Run dialog. This is a prerequisite step for checking Java installation.

LANGUAGE: batch
CODE:
cmd.exe

----------------------------------------

TITLE: Installing Java 21 JDK on Fedora
DESCRIPTION: Command to install the Java 21 Development Kit on Fedora, necessary for mod development.

LANGUAGE: sh
CODE:
sudo dnf install java-21-openjdk-devel

----------------------------------------

TITLE: Opening Windows Command Prompt
DESCRIPTION: Command to open the Windows command prompt through the Run dialog. This is a prerequisite step for checking Java installation.

LANGUAGE: batch
CODE:
cmd.exe

----------------------------------------

TITLE: Implementing AbstractDynamicSoundInstance Class in Fabric
DESCRIPTION: Implementation of an abstract class for dynamic sound instances with transition states and modulation.

LANGUAGE: java
CODE:
public abstract class AbstractDynamicSoundInstance extends MovingSoundInstance {
    protected final DynamicSoundSource source;
    protected TransitionState state;
    protected int startingDuration;
    protected int endingDuration;
    protected float minVolume;
    protected float maxVolume;
    protected float minPitch;
    protected float maxPitch;
    protected boolean isDone;
    protected int ticksExisted;
    protected int transitionTicks;
    protected final SoundInstanceCallback callback;

    // Constructor and other methods omitted for brevity

    @Override
    public void tick() {
        // Tick implementation omitted for brevity
    }

    // Other methods omitted for brevity
}

----------------------------------------

TITLE: Creating Translations Using TranslationBuilder in Java
DESCRIPTION: This code demonstrates various methods for adding translations using the TranslationBuilder, including raw translations, translations from Identifiers, and helper methods for specific game elements.

LANGUAGE: java
CODE:
@Override
public void generateTranslations(TranslationBuilder translationBuilder) {
    translationBuilder.add(FabricDocsReferenceItems.EXAMPLE_ITEM, "Example Item");
    translationBuilder.add(FabricDocsReferenceBlocks.EXAMPLE_BLOCK, "Example Block");
    translationBuilder.add("text.fabric_docs_reference.greeting", "Hello, Fabric!");
}

----------------------------------------

TITLE: Server Crash Log for Client-Only Code Execution
DESCRIPTION: This log snippet shows the error message when attempting to load a client-only class in a server environment, demonstrating the result of improper networking implementation.

LANGUAGE: log
CODE:
[Server thread/FATAL]: Error executing task on Server
java.lang.RuntimeException: Cannot load class net.minecraft.client.MinecraftClient in environment type SERVER

----------------------------------------

TITLE: Creating Item Translation in JSON
DESCRIPTION: This JSON snippet defines the translation for the newly created item, providing a human-readable name for the item in the game.

LANGUAGE: json
CODE:
{
    "item.mod_id.suspicious_substance": "Suspicious Substance"
}

----------------------------------------

TITLE: Using DynamicSoundManager in Network Handler in Fabric
DESCRIPTION: Example of using the DynamicSoundManager to start and stop sounds based on network packets.

LANGUAGE: java
CODE:
public class ReceiveS2C {
    public static void onEngineStartPacket(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {
        BlockPos pos = buf.readBlockPos();
        client.execute(() -> {
            BlockEntity blockEntity = client.world.getBlockEntity(pos);
            if (blockEntity instanceof DynamicSoundSource source) {
                DynamicSoundManager.getInstance().playSound(new EngineSoundInstance(source, DynamicSoundManager.getInstance()));
            }
        });
    }

    public static void onEngineStopPacket(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {
        BlockPos pos = buf.readBlockPos();
        client.execute(() -> {
            BlockEntity blockEntity = client.world.getBlockEntity(pos);
            if (blockEntity instanceof DynamicSoundSource source) {
                DynamicSoundManager.getInstance().stopSound(source);
            }
        });
    }
}

----------------------------------------

TITLE: Adding FabricLanguageProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: This code snippet demonstrates how to add the custom FabricLanguageProvider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceEnglishLangProvider::new);

----------------------------------------

TITLE: Configuring Tag Generation in FabricTagProvider in Java
DESCRIPTION: Demonstrates how to configure tag generation within the FabricTagProvider's configure method. It shows adding individual items, other tags, and handling optional tags.

LANGUAGE: java
CODE:
@Override
protected void configure(RegistryWrapper.WrapperLookup arg) {
    getOrCreateTagBuilder(DOCS_ITEMS)
            .add(Items.DIAMOND)
            .add(Items.EMERALD)
            .addOptionalTag(new Identifier("c", "items"))
            .forceAddTag(ItemTags.ARROWS);
}

----------------------------------------

TITLE: Creating a Codec for Mutually Convertible Types using xmap in Java
DESCRIPTION: Demonstrates how to create a codec for one type based on the codec of another type that can be mutually converted.

LANGUAGE: java
CODE:
Codec<BlockPos> blockPosCodec = Vec3d.CODEC.xmap(
    // Convert Vec3d to BlockPos
    vec -> new BlockPos(vec.x, vec.y, vec.z),
    // Convert BlockPos to Vec3d
    pos -> new Vec3d(pos.getX(), pos.getY(), pos.getZ())
);

----------------------------------------

TITLE: Opening a Custom Screen in Java for Fabric
DESCRIPTION: This code snippet shows how to open a custom screen using MinecraftClient's setScreen method. It can be used in various contexts such as key bindings, commands, or client packet handlers.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(
  new CustomScreen(Text.empty())
);

----------------------------------------

TITLE: Installing JRE on Arch Linux
DESCRIPTION: Command to install the latest Java Runtime Environment (JRE) from the official Arch Linux repositories using pacman.

LANGUAGE: sh
CODE:
sudo pacman -S jre-openjdk

----------------------------------------

TITLE: Initializing DataGenerator Provider
DESCRIPTION: Shows how to add loot table providers to the data generator pack in the DataGeneratorEntrypoint class.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceBlockLootTableProvider::new);
pack.addProvider(FabricDocsReferenceChestLootTableProvider::new);

----------------------------------------

TITLE: Adding TagProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: Demonstrates how to add the custom tag provider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceItemTagProvider::new);

----------------------------------------

TITLE: Adding AdvancementProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: Demonstrates how to add the custom AdvancementProvider to the DataGeneratorEntrypoint.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceAdvancementProvider::new);

----------------------------------------

TITLE: Implementing Door and Trapdoor Models
DESCRIPTION: Generates models for doors (with separate top/bottom textures) and trapdoors with various states and orientations.

LANGUAGE: java
CODE:
blockStateModelGenerator.registerDoor(ModBlocks.RUBY_DOOR);
blockStateModelGenerator.registerTrapdoor(ModBlocks.RUBY_TRAPDOOR);

----------------------------------------

TITLE: Installing Headless Java 21 on Fedora
DESCRIPTION: Command to install the headless version of Java 21 OpenJDK on Fedora, suitable for servers without graphical UI.

LANGUAGE: sh
CODE:
sudo dnf install java-21-openjdk-headless

----------------------------------------

TITLE: Creating a Complex Advancement with Rewards in Java
DESCRIPTION: Shows how to create a more complex advancement with multiple criteria, rewards, and a parent advancement.

LANGUAGE: java
CODE:
Advancement.Builder.create()
        .display(new AdvancementDisplay(
                Items.DIAMOND_PICKAXE,
                Text.literal("Upgrade!"),
                Text.literal("Craft a diamond pickaxe"),
                null,
                AdvancementFrame.TASK,
                true,
                true,
                false
        ))
        .criterion("got_diamond", InventoryChangedCriterion.Conditions.items(Items.DIAMOND))
        .criterion("got_stick", InventoryChangedCriterion.Conditions.items(Items.STICK))
        .criterion("crafted_diamond_pickaxe", InventoryChangedCriterion.Conditions.items(Items.DIAMOND_PICKAXE))
        .rewards(AdvancementRewards.Builder.experience(100))
        .parent(getDirt)
        .build(consumer, "fabric-docs-reference:craft_diamond_pickaxe");

----------------------------------------

TITLE: Implementing Custom EngineSoundInstance in Fabric
DESCRIPTION: Example implementation of a custom dynamic sound instance for an engine sound.

LANGUAGE: java
CODE:
public class EngineSoundInstance extends AbstractDynamicSoundInstance {
    public EngineSoundInstance(DynamicSoundSource source, SoundInstanceCallback callback) {
        super(FabricDocsReferences.ENGINE_LOOP, SoundCategory.BLOCKS, source, callback);
        this.startingDuration = 20;
        this.endingDuration = 20;
        this.minVolume = 0.1f;
        this.maxVolume = 1.0f;
        this.minPitch = 0.5f;
        this.maxPitch = 2.0f;
    }

    @Override
    protected void applyModulations() {
        float stress = source.getStress();
        this.pitch = MathHelper.lerp(stress, minPitch, maxPitch);
    }

    @Override
    protected boolean shouldLoop() {
        return source.isRunning();
    }
}

----------------------------------------

TITLE: Using Custom Criteria in Advancement Generation
DESCRIPTION: Demonstrates how to use the custom criteria in the advancement provider to create new advancements.

LANGUAGE: java
CODE:
Advancement.Builder.create()
    .display(new AdvancementDisplay(
            Items.IRON_PICKAXE,
            Text.literal("Tool User"),
            Text.literal("Use a tool 5 times"),
            null,
            AdvancementFrame.TASK,
            true,
            true,
            false
    ))
    .criterion("use_tool", new ParameterizedUseToolCriterion.Conditions(ContextAwarePredicate.ANY, 5))
    .build(consumer, "fabric-docs-reference:use_tool_5_times");

----------------------------------------

TITLE: Creating a Simple Advancement in Java
DESCRIPTION: Demonstrates how to create a basic advancement for obtaining a dirt block. It includes setting up the display, criteria, and requirements.

LANGUAGE: java
CODE:
Advancement getDirt = Advancement.Builder.create()
        .display(new AdvancementDisplay(
                Items.DIRT,
                Text.literal("Dirty Hands"),
                Text.literal("Get a dirt block"),
                new Identifier("textures/gui/advancements/backgrounds/stone.png"),
                AdvancementFrame.TASK,
                true,
                true,
                false
        ))
        .criterion("got_dirt", InventoryChangedCriterion.Conditions.items(Items.DIRT))
        .build(consumer, "fabric-docs-reference:get_dirt");

----------------------------------------

TITLE: Triggering a Custom Event from a Mixin in Fabric API
DESCRIPTION: This example shows how to trigger a custom sheep shearing event from a mixin in the SheepEntity class.

LANGUAGE: java
CODE:
@Mixin(SheepEntity.class)
public class SheepEntityMixin {
    @Inject(method = "interactMob", at = @At(value = "INVOKE", target = "Lnet/minecraft/entity/passive/SheepEntity;sheared(Lnet/minecraft/sound/SoundCategory;)V"), cancellable = true)
    private void onShear(PlayerEntity player, Hand hand, CallbackInfoReturnable<ActionResult> cir) {
        ActionResult result = SheepShearCallback.EVENT.invoker().interact(player, (SheepEntity) (Object) this);

        if (result != ActionResult.PASS) {
            cir.setReturnValue(result);
        }
    }
}

----------------------------------------

TITLE: Installing JDK on Arch Linux
DESCRIPTION: Command to install the Java Development Kit (JDK) on Arch Linux, necessary for mod development.

LANGUAGE: sh
CODE:
sudo pacman -S jdk-openjdk

----------------------------------------

TITLE: Implementing a Custom Event Listener in Fabric API
DESCRIPTION: This snippet demonstrates how to implement a custom event listener for the sheep shearing event, dropping a diamond instead of wool.

LANGUAGE: java
CODE:
SheepShearCallback.EVENT.register((player, sheep) -> {
    if (!sheep.getWorld().isClient()) {
        sheep.getWorld().spawnEntity(new ItemEntity(sheep.getWorld(), sheep.getX(), sheep.getY(), sheep.getZ(), new ItemStack(Items.DIAMOND)));
    }
    return ActionResult.SUCCESS;
});

----------------------------------------

TITLE: Custom BlockPos Argument Type Implementation - Java
DESCRIPTION: Implements a custom argument type for parsing BlockPos from a string in {x, y, z} format. Includes validation and parsing logic for the custom format.

LANGUAGE: java
CODE:
public class BlockPosArgumentType implements ArgumentType<BlockPos> {
    private static final Collection<String> EXAMPLES = Arrays.asList("{0, 0, 0}", "{~ ~ ~}");

    public static BlockPosArgumentType blockPos() {
        return new BlockPosArgumentType();
    }

    @Override
    public BlockPos parse(StringReader reader) throws CommandSyntaxException {
        if (!reader.canRead()) {
            throw ERROR_INCOMPLETE.create();
        }

        if (reader.peek() != '{') {
            throw ERROR_INVALID.create(reader.getString());
        }

        reader.skip();
        int x = reader.readInt();
        reader.skip();
        int y = reader.readInt();
        reader.skip();
        int z = reader.readInt();
        reader.skip();

        return new BlockPos(x, y, z);
    }

    @Override
    public Collection<String> getExamples() {
        return EXAMPLES;
    }
}

----------------------------------------

TITLE: Fabric Version Support Information - Markdown
DESCRIPTION: Markdown snippet showing the supported Minecraft versions for Fabric mod loader, including snapshots from 18w43b and releases from 1.14 onwards.

LANGUAGE: markdown
CODE:
## What Minecraft Versions Does Fabric Support? {#what-minecraft-versions-does-fabric-support}

Officially, Fabric supports all versions of Minecraft starting from snapshots `18w43b` and above, and releases `1.14` and above.

----------------------------------------

TITLE: Registering a Client-to-Server Payload
DESCRIPTION: This snippet shows how to register a client-to-server payload in the common initializer using PayloadTypeRegistry.

LANGUAGE: java
CODE:
PayloadTypeRegistry.playC2S().register(GiveGlowingEffectC2SPayload.TYPE, GiveGlowingEffectC2SPayload.CODEC);

----------------------------------------

TITLE: Generated Enchantment JSON for Custom Effect
DESCRIPTION: This JSON snippet shows the generated enchantment configuration for the custom 'Thundering' enchantment effect.

LANGUAGE: json
CODE:
{
  "display": {
    "max_level": 3,
    "rarity": "very_rare"
  },
  "targets": [
    "weapon"
  ],
  "effects": [
    {
      "entity_target": "hit",
      "type": "fabric-docs-reference:lightning",
      "power": 1.0
    }
  ]
}

----------------------------------------

TITLE: Complex Translation with Multiple Parameters
DESCRIPTION: Example of creating translatable text with multiple parameters and their corresponding translation format.

LANGUAGE: java
CODE:
Text translatable = Text.translatable("my_mod.text.whack.item", victim.getDisplayName(), attacker.getDisplayName(), itemStack.toHoverableText());

LANGUAGE: json
CODE:
{
  "my_mod.text.whack.item": "%1$s was whacked by %2$s using %3$s"
}

----------------------------------------

TITLE: Basic Sound Event Registration in Java
DESCRIPTION: Simple approach to register a single sound event in the game registry.

LANGUAGE: java
CODE:
Registry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, "metal_whistle"),
        SoundEvent.of(Identifier.of(MOD_ID, "metal_whistle")));

----------------------------------------

TITLE: Implementing Custom Item Use Event in Fabric
DESCRIPTION: Shows how to create a custom item class that overrides the 'use' event to summon a lightning bolt in front of the player.

LANGUAGE: java
CODE:
public class LightningStick extends Item {
    public LightningStick(Settings settings) {
        super(settings);
    }

    @Override
    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
        if (!world.isClient) {
            BlockPos blockPos = user.getBlockPos().offset(user.getHorizontalFacing(), 10);
            EntityType.LIGHTNING_BOLT.spawn((ServerWorld) world, blockPos, SpawnReason.TRIGGERED);
            user.getItemCooldownManager().set(this, 20);
        }

        return TypedActionResult.success(user.getStackInHand(hand));
    }
}

----------------------------------------

TITLE: Mixin Java Agent Configuration
DESCRIPTION: JVM argument configuration for enabling Mixin hotswapping functionality using the Java agent

LANGUAGE: java
CODE:
-javaagent:"path to mixin library jar here"

----------------------------------------

TITLE: Basic Sound Event Registration in Java
DESCRIPTION: Simple approach to register a single sound event in the game registry.

LANGUAGE: java
CODE:
Registry.register(Registries.SOUND_EVENT, Identifier.of(MOD_ID, "metal_whistle"),
        SoundEvent.of(Identifier.of(MOD_ID, "metal_whistle")));

----------------------------------------

TITLE: Extending StatusEffect Class in Java
DESCRIPTION: Creates a custom TaterEffect class that extends StatusEffect. This effect gives the entity one experience point every game tick.

LANGUAGE: java
CODE:
public class TaterEffect extends StatusEffect {
    public TaterEffect() {
        super(
            StatusEffectCategory.BENEFICIAL, // whether beneficial or harmful for entities
            0x98D982 // color in RGB
        );
    }

    // This method is called every tick to check whether it should apply the status effect or not
    @Override
    public boolean canApplyUpdateEffect(int duration, int amplifier) {
        // In our case, we just make it return true so that it applies the status effect every tick.
        return true;
    }

    // This method is called when it applies the status effect. We implement custom functionality here.
    @Override
    public void applyUpdateEffect(LivingEntity entity, int amplifier) {
        if (entity instanceof PlayerEntity) {
            ((PlayerEntity) entity).addExperience(1);
        }
    }
}

----------------------------------------

TITLE: Custom Death Message Definition
DESCRIPTION: JSON entry for defining a custom death message for the damage type

LANGUAGE: json
CODE:
{
  "death.attack.tater": "%1$s was tater'd to death"
}

----------------------------------------

TITLE: Registering a Server-to-Client Payload
DESCRIPTION: This snippet shows how to register a server-to-client payload in the common initializer using PayloadTypeRegistry.

LANGUAGE: java
CODE:
PayloadTypeRegistry.playS2C().register(SummonLightningS2CPayload.TYPE, SummonLightningS2CPayload.CODEC);

----------------------------------------

TITLE: Creating a Codec for a Custom Class
DESCRIPTION: Example of creating a codec for a custom class CoolBeansClass using RecordCodecBuilder.

LANGUAGE: java
CODE:
public static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(
    Codec.INT.fieldOf("beans_amount").forGetter(CoolBeansClass::getBeansAmount),
    Registries.ITEM.getCodec().fieldOf("bean_type").forGetter(CoolBeansClass::getBeanType),
    BlockPos.CODEC.listOf().fieldOf("bean_positions").forGetter(CoolBeansClass::getBeanPositions)
    // Up to 16 fields can be declared here
).apply(instance, CoolBeansClass::new));

----------------------------------------

TITLE: Implementing Custom Damage Block
DESCRIPTION: Complete implementation of a block that applies custom damage type when stepped on

LANGUAGE: java
CODE:
:::1
public class TaterBlock extends Block {
    public TaterBlock(Settings settings) {
        super(settings);
    }

    @Override
    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {
        if (!entity.bypassesSteppingEffects() && entity instanceof LivingEntity) {
            DamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER));
            entity.damage(damageSource, 5.0f);
        }
    }
}

----------------------------------------

TITLE: JSON Representation of CoolBeansClass
DESCRIPTION: Illustrates the expected JSON structure for serializing the CoolBeansClass.

LANGUAGE: json
CODE:
{
  "beans_amount": 5,
  "bean_type": "beanmod:mythical_beans",
  "bean_positions": [
    [1, 2, 3],
    [4, 5, 6]
  ]
}

----------------------------------------

TITLE: Creating Custom Boolean Property in Java
DESCRIPTION: This Java snippet demonstrates how to create a custom boolean property for a block state in Minecraft modding.

LANGUAGE: java
CODE:
public static final BooleanProperty ACTIVATED = BooleanProperty.of("activated");

----------------------------------------

TITLE: Enchantment JSON Configuration
DESCRIPTION: Example of the generated JSON configuration for the custom thundering enchantment.

LANGUAGE: json
CODE:
{
  "fabric:type": "fabric-docs-reference:thundering",
  "max_level": 3,
  "rarity": "VERY_RARE",
  "target": "minecraft:sword",
  "entity_effect": {
    "type": "fabric-docs-reference:lightning"
  }
}

----------------------------------------

TITLE: Creating a List Codec in Java
DESCRIPTION: Shows how to create a codec for a list of BlockPos objects.

LANGUAGE: java
CODE:
Codec<List<BlockPos>> listCodec = BlockPos.CODEC.listOf();

----------------------------------------

TITLE: Defining Blockstate for Pillar Block in JSON
DESCRIPTION: This JSON snippet defines the blockstate for a condensed oak log, specifying models and rotations for different axis orientations.

LANGUAGE: json
CODE:
{
  "variants": {
    "axis=x": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90,
      "y": 90
    },
    "axis=y": {
      "model": "fabric-docs-reference:block/condensed_oak_log"
    },
    "axis=z": {
      "model": "fabric-docs-reference:block/condensed_oak_log_horizontal",
      "x": 90
    }
  }
}

----------------------------------------

TITLE: Counter Item Implementation
DESCRIPTION: Custom item class that tracks number of uses through a data component. Implements tooltip display and usage counting functionality.

LANGUAGE: java
CODE:
public void appendTooltip(ItemStack stack, TooltipContext context, List<Text> tooltip, TooltipType type) {
    int count = stack.get(ModComponents.CLICK_COUNT_COMPONENT);
    tooltip.add(Text.translatable("item.fabric-docs-reference.counter.info", count).formatted(Formatting.GOLD));
}

----------------------------------------

TITLE: Creating a Range-Limited Number Codec in Java
DESCRIPTION: Shows how to create a codec that only accepts numbers within a specified inclusive range.

LANGUAGE: java
CODE:
// Cannot be greater than 2
Codec<Integer> amountOfFriendsYouHave = Codec.intRange(0, 2);

----------------------------------------

TITLE: Disabling Code Formatter in Java
DESCRIPTION: Using comments to disable and re-enable the code formatter for specific code blocks.

LANGUAGE: java
CODE:
//formatter:off (disable formatter)
    public static void disgustingMethod() { /* ew this code sucks */ }
//formatter:on (re-enable the formatter)

----------------------------------------

TITLE: Disabling Code Formatter in Java
DESCRIPTION: Using comments to disable and re-enable the code formatter for specific code blocks.

LANGUAGE: java
CODE:
//formatter:off (disable formatter)
    public static void disgustingMethod() { /* ew this code sucks */ }
//formatter:on (re-enable the formatter)

----------------------------------------

TITLE: Creating and Using a Pair Codec in Java
DESCRIPTION: Demonstrates how to create and use a codec that combines two separate codecs into a pair.

LANGUAGE: java
CODE:
// Create two separate boxed codecs
Codec<Integer> firstCodec = Codec.INT.fieldOf("i_am_number").codec();
Codec<Boolean> secondCodec = Codec.BOOL.fieldOf("this_statement_is_false").codec();

// Combine them into a pair codec
Codec<Pair<Integer, Boolean>> pairCodec = Codec.pair(firstCodec, secondCodec);

// Use it to serialize data
DataResult<JsonElement> result = pairCodec.encodeStart(JsonOps.INSTANCE, Pair.of(23, true));

----------------------------------------

TITLE: Building a Codec for CoolBeansClass using RecordCodecBuilder in Java
DESCRIPTION: Demonstrates how to construct a codec for the CoolBeansClass using RecordCodecBuilder, combining multiple field codecs.

LANGUAGE: java
CODE:
public static final Codec<CoolBeansClass> CODEC = RecordCodecBuilder.create(instance -> instance.group(
    Codec.INT.fieldOf("beans_amount").forGetter(CoolBeansClass::getBeansAmount),
    Registries.ITEM.getCodec().fieldOf("bean_type").forGetter(CoolBeansClass::getBeanType),
    BlockPos.CODEC.listOf().fieldOf("bean_positions").forGetter(CoolBeansClass::getBeanPositions)
    // Up to 16 fields can be declared here
).apply(instance, CoolBeansClass::new));

----------------------------------------

TITLE: Commenting Out Code in Java
DESCRIPTION: Examples of using line and block comments to temporarily disable code in Java.

LANGUAGE: java
CODE:
// private static final int PROTECTION_BOOTS = 2;
private static final int PROTECTION_LEGGINGS = 5;
// private static final int PROTECTION_CHESTPLATE = 6;
private static final int PROTECTION_HELMET = 1;

LANGUAGE: java
CODE:
/*
ModItems.initialize();
ModSounds.initializeSounds();
ModParticles.initialize();
*/

private static int secondsToTicks(float seconds) {
    return (int) (seconds * 20 /*+ 69*/);
}

----------------------------------------

TITLE: Creating and Using an Unbounded Map Codec in Java
DESCRIPTION: Shows how to create and use a codec for maps with arbitrary keys, such as HashMaps.

LANGUAGE: java
CODE:
// Create a codec for a map of Identifier to Integer
Codec<Map<Identifier, Integer>> mapCodec = Codec.unboundedMap(Identifier.CODEC, Codec.INT);

// Use it to serialize data
DataResult<JsonElement> result = mapCodec.encodeStart(JsonOps.INSTANCE, Map.of(
    new Identifier("example", "number"), 23,
    new Identifier("example", "the_cooler_number"), 42
));

----------------------------------------

TITLE: macOS Crash Report Location Path
DESCRIPTION: File system path for accessing Minecraft crash reports on macOS systems

LANGUAGE: no-line-numbers
CODE:
~/Library/Application Support/minecraft/crash-reports

----------------------------------------

TITLE: Installing OpenJDK 17 on Debian/Ubuntu
DESCRIPTION: Commands to update package lists and install OpenJDK 17 on Debian or Ubuntu-based systems using apt.

LANGUAGE: sh
CODE:
sudo apt update
sudo apt install openjdk-17-jdk

----------------------------------------

TITLE: Creating a Recursive Codec for a Linked List in Java
DESCRIPTION: Demonstrates how to create a recursive codec for a simple linked list implementation using Codec.recursive.

LANGUAGE: java
CODE:
public record ListNode(int value, ListNode next) {}

LANGUAGE: java
CODE:
Codec<ListNode> codec = Codec.recursive(
  "ListNode", // un nom pour le codec
  selfCodec -> {
    // Ici, `selfCodec` représente le `Codec<ListNode>`, comme s'il était déjà construit
    // Ce lambda doit renvoyer le codec qu'on aurait voulu utiliser depuis le départ,
    // qui se réfère à lui-même via `selfCodec`
    return RecordCodecBuilder.create(instance ->
      instance.group(
        Codec.INT.fieldOf("value").forGetter(ListNode::value),
         // le champ `next` sera récursivement traité grâce à l'auto-codec
        Codecs.createStrictOptionalFieldCodec(selfCodec, "next", null).forGetter(ListNode::next)
      ).apply(instance, ListNode::new)
    );
  }
);

----------------------------------------

TITLE: Adding RecipeProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: Adds the custom RecipeProvider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceRecipeProvider::new);

----------------------------------------

TITLE: Installing OpenJDK 17 on Debian/Ubuntu
DESCRIPTION: Commands to update package lists and install OpenJDK 17 on Debian or Ubuntu-based systems using apt.

LANGUAGE: sh
CODE:
sudo apt update
sudo apt install openjdk-17-jdk

----------------------------------------

TITLE: Adding RecipeProvider to DataGeneratorEntrypoint in Java
DESCRIPTION: Adds the custom RecipeProvider to the DataGeneratorEntrypoint within the onInitializeDataGenerator method.

LANGUAGE: java
CODE:
pack.addProvider(FabricDocsReferenceRecipeProvider::new);

----------------------------------------

TITLE: Creating Collapsible Code Regions in Java
DESCRIPTION: Using region and endregion comments to create collapsible code blocks in IntelliJ IDEA.

LANGUAGE: java
CODE:
// region collapse block name
    ModBlocks.initialize();
    ModBlockEntities.registerBlockEntityTypes();
    ModItems.initialize();
    ModSounds.initializeSounds();
    ModParticles.initialize();
// endregion

----------------------------------------

TITLE: Closing a Custom Screen in Java for Fabric
DESCRIPTION: This code snippet demonstrates how to close a custom screen by setting the current screen to null using MinecraftClient's setScreen method.

LANGUAGE: java
CODE:
MinecraftClient.getInstance().setScreen(null);

----------------------------------------

TITLE: Custom Vertical Slab Block Definition
DESCRIPTION: Defines custom block shapes and collision boxes for a vertical slab implementation.

LANGUAGE: json
CODE:
{
  "parent": "block/block",
  "textures": {
    "particle": "#side"
  },
  "elements": [
    {
      "from": [0, 0, 0],
      "to": [8, 16, 16],
      "faces": {
        "north": {"uv": [8, 0, 16, 16], "texture": "#side"},
        "east": {"uv": [0, 0, 16, 16], "texture": "#side"},
        "south": {"uv": [0, 0, 8, 16], "texture": "#side"},
        "west": {"uv": [0, 0, 16, 16], "texture": "#side"},
        "up": {"uv": [0, 0, 8, 16], "texture": "#top"},
        "down": {"uv": [0, 0, 8, 16], "texture": "#bottom"}
      }
    }
  ]
}

----------------------------------------

TITLE: Implementing Fabric Mod Main Entrypoint in Java
DESCRIPTION: Example of a basic Fabric mod main entrypoint class that demonstrates initialization logging. The entrypoint is called when the game starts and is specified in the fabric.mod.json configuration.

LANGUAGE: java
CODE:
public class FabricDocsReference implements ModInitializer {
    @Override
    public void onInitialize() {
        ExampleInitializer.LOGGER.info("Hello, Fabric!");
    }
}

----------------------------------------

TITLE: Creating Custom Suggestion Provider for Player Names
DESCRIPTION: Implements a custom SuggestionProvider that suggests all player usernames on the server. It demonstrates how to create and use a custom suggestion provider in Fabric commands.

LANGUAGE: java
CODE:
public class PlayerSuggestionProvider implements SuggestionProvider<ServerCommandSource> {
    @Override
    public CompletableFuture<Suggestions> getSuggestions(CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) throws CommandSyntaxException {
        for (ServerPlayerEntity player : context.getSource().getServer().getPlayerManager().getPlayerList()) {
            builder.suggest(player.getGameProfile().getName());
        }
        return builder.buildFuture();
    }
}

----------------------------------------

TITLE: Java Formatter Control Comments
DESCRIPTION: Shows how to use formatter control comments to disable automatic code formatting for specific sections.

LANGUAGE: java
CODE:
//formatter:off (disable formatter)
    public static void disgustingMethod() { /* ew this code sucks */ }
//formatter:on (re-enable the formatter)

----------------------------------------

TITLE: Configuring Mixin Java Agent for Hotswapping
DESCRIPTION: VM argument configuration for enabling Mixin hotswapping functionality during development

LANGUAGE: properties
CODE:
-javaagent:"path to mixin library jar here"

----------------------------------------

TITLE: Using Built-in Suggestion Provider in Fabric Command
DESCRIPTION: Demonstrates how to use a built-in suggestion provider (SUMMONABLE_ENTITIES) with a command argument in Fabric. The execute method shows how to handle the suggested entity type.

LANGUAGE: java
CODE:
argument("entity", EntitySummonArgumentType.entitySummon())
    .suggests(SuggestionProviders.SUMMONABLE_ENTITIES)

LANGUAGE: java
CODE:
public int run(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
    Identifier entityId = EntitySummonArgumentType.getEntitySummon(context, "entity");
    context.getSource().sendFeedback(() -> Text.literal("You selected: " + entityId), false);
    return 1;
}

----------------------------------------

TITLE: Java Inspection Suppression Examples
DESCRIPTION: Demonstrates various ways to suppress IDE inspections and warnings using comments and annotations.

LANGUAGE: java
CODE:
@SuppressWarnings("rawtypes") // annotations can be used here
List list = new ArrayList();

//noinspection unchecked (annotations cannot be here so we use the comment)
this.processList((List<String>)list);

//noinspection rawtypes,unchecked,WriteOnlyObject (you can even suppress multiple!)
new ArrayList().add("bananas");

----------------------------------------

TITLE: Running Fabric Mod with Gradle Commands
DESCRIPTION: Basic Gradle commands for launching Minecraft in client or server mode for Fabric mod development

LANGUAGE: gradle
CODE:
./gradlew runClient
./gradlew runServer

----------------------------------------

TITLE: Command Source Access Example
DESCRIPTION: Shows how to access the ServerCommandSource from a command context within a command implementation.

LANGUAGE: java
CODE:
Command<ServerCommandSource> command = context -> {
    ServerCommandSource source = context.getSource();
    return 0;
};

----------------------------------------

TITLE: Locating Crash Reports on Different Operating Systems
DESCRIPTION: This snippet shows the file paths for crash reports on Windows, macOS, and Linux systems. It helps users locate crash reports for troubleshooting.

LANGUAGE: plaintext
CODE:
%appdata%\.minecraft\crash-reports

LANGUAGE: plaintext
CODE:
~/Library/Application Support/minecraft/crash-reports

LANGUAGE: plaintext
CODE:
~/.minecraft/crash-reports

----------------------------------------

TITLE: Defining Blockstates for Custom Property in JSON
DESCRIPTION: This JSON snippet defines the blockstates for a prismarine lamp block, specifying different models based on the custom 'activated' property.

LANGUAGE: json
CODE:
{
  "variants": {
    "activated=false": {
      "model": "fabric-docs-reference:block/prismarine_lamp_off"
    },
    "activated=true": {
      "model": "fabric-docs-reference:block/prismarine_lamp_on"
    }
  }
}

----------------------------------------

TITLE: Windows Crash Report Location Path
DESCRIPTION: File system path for accessing Minecraft crash reports on Windows systems

LANGUAGE: no-line-numbers
CODE:
%appdata%\.minecraft\crash-reports

----------------------------------------

TITLE: Rendering Text on Block Entity
DESCRIPTION: Complete implementation of a BlockEntityRenderer that renders text showing a counter value on top of a block.

LANGUAGE: java
CODE:
public class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {
    private final TextRenderer textRenderer;

    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {
        this.textRenderer = ctx.getTextRenderer();
    }

    @Override
    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices,
            VertexConsumerProvider vertexConsumers, int light, int overlay) {
        matrices.push();
        matrices.translate(0.5, 1, 0.5);
        matrices.multiply(RotationAxis.POSITIVE_X.rotationDegrees(90));
        matrices.scale(1/18f, 1/18f, 1/18f);

        String text = String.valueOf(entity.getNumber());
        float x = -textRenderer.getWidth(text) / 2f;
        textRenderer.draw(text, x, 0, 0x000000, false, matrices.peek().getPositionMatrix(),
                vertexConsumers, TextRenderer.TextLayerType.NORMAL, 0x000000, light);
        matrices.pop();
    }
}

----------------------------------------

TITLE: Rendering Text on Block Entity
DESCRIPTION: Complete implementation of a BlockEntityRenderer that renders text showing a counter value on top of a block.

LANGUAGE: java
CODE:
public class CounterBlockEntityRenderer implements BlockEntityRenderer<CounterBlockEntity> {
    private final TextRenderer textRenderer;

    public CounterBlockEntityRenderer(BlockEntityRendererFactory.Context ctx) {
        this.textRenderer = ctx.getTextRenderer();
    }

    @Override
    public void render(CounterBlockEntity entity, float tickDelta, MatrixStack matrices,
            VertexConsumerProvider vertexConsumers, int light, int overlay) {
        matrices.push();
        matrices.translate(0.5, 1, 0.5);
        matrices.multiply(RotationAxis.POSITIVE_X.rotationDegrees(90));
        matrices.scale(1/18f, 1/18f, 1/18f);

        String text = String.valueOf(entity.getNumber());
        float x = -textRenderer.getWidth(text) / 2f;
        textRenderer.draw(text, x, 0, 0x000000, false, matrices.peek().getPositionMatrix(),
                vertexConsumers, TextRenderer.TextLayerType.NORMAL, 0x000000, light);
        matrices.pop();
    }
}

----------------------------------------

TITLE: Using Relative Links in Markdown
DESCRIPTION: Examples of correct and incorrect ways to use relative links in Markdown files for the Fabric Documentation.

LANGUAGE: markdown
CODE:
This is a relative link!
[Page](../players/index)

LANGUAGE: markdown
CODE:
This is an absolute link.
[Page](/players/index)

LANGUAGE: markdown
CODE:
This relative link has the file extension.
[Page](../players/index.md)

----------------------------------------

TITLE: Applying Custom Status Effect via Command
DESCRIPTION: Shows how to apply the custom 'Tater' effect using the /effect command in Minecraft.

LANGUAGE: mcfunction
CODE:
effect give @p fabric-docs-reference:tater

----------------------------------------

TITLE: Installing Headless Java Runtime Environment on Arch Linux
DESCRIPTION: Command to install the headless version of Java Runtime Environment (JRE) on Arch Linux, suitable for servers without graphical interfaces.

LANGUAGE: sh
CODE:
sudo pacman -S jre-openjdk-headless

----------------------------------------

TITLE: Installing Java Development Kit on Arch Linux
DESCRIPTION: Command to install the Java Development Kit (JDK) on Arch Linux, necessary for mod development.

LANGUAGE: sh
CODE:
sudo pacman -S jdk-openjdk

----------------------------------------

TITLE: Scaling a Rendered Shape using MatrixStack in Minecraft
DESCRIPTION: This code snippet shows how to use MatrixStack to apply scaling transformations to a rendered shape in Minecraft. It creates a pulsating effect by scaling the shape based on the tick delta.

LANGUAGE: java
CODE:
HudRenderCallback.EVENT.register((drawContext, tickDelta) -> {
    Tessellator tessellator = Tessellator.getInstance();
    BufferBuilder bufferBuilder = tessellator.getBuffer();

    MatrixStack matrixStack = drawContext.getMatrices();
    matrixStack.push();
    matrixStack.translate(20, 20, 0);
    float scale = 1 + (float) Math.sin(tickDelta * 0.5) * 0.5f;
    matrixStack.scale(scale, scale, 1);
    matrixStack.translate(-20, -20, 0);

    Matrix4f positionMatrix = matrixStack.peek().getPositionMatrix();

    RenderSystem.enableBlend();
    RenderSystem.defaultBlendFunc();

    bufferBuilder.begin(VertexFormat.DrawMode.TRIANGLE_STRIP, VertexFormats.POSITION_COLOR);
    bufferBuilder.vertex(positionMatrix, 20, 20, 0).color(255, 0, 0, 255).next();
    bufferBuilder.vertex(positionMatrix, 5, 40, 0).color(0, 255, 0, 255).next();
    bufferBuilder.vertex(positionMatrix, 35, 40, 0).color(0, 0, 255, 255).next();
    bufferBuilder.vertex(positionMatrix, 20, 60, 0).color(255, 255, 255, 255).next();
    tessellator.draw();

    RenderSystem.disableBlend();
    matrixStack.pop();
});

----------------------------------------

TITLE: Adding Translation for Custom Enchantment in JSON
DESCRIPTION: This JSON snippet demonstrates how to add a translation for the custom enchantment name in the 'en_us.json' file.

LANGUAGE: json
CODE:
{
  "enchantment.FabricDocsReference.thundering": "Thundering"
}

----------------------------------------

TITLE: Applying Custom Damage Type in Minecraft Block Class
DESCRIPTION: Shows how to create a DamageSource from a custom damage type and apply it to entities in a block's onSteppedOn method.

LANGUAGE: java
CODE:
public class TaterBlock extends Block {
    public TaterBlock(Settings settings) {
        super(settings);
    }

    @Override
    public void onSteppedOn(World world, BlockPos pos, BlockState state, Entity entity) {
        if (!world.isClient && entity instanceof LivingEntity) {
            DamageSource damageSource = new DamageSource(world.getRegistryManager().get(RegistryKeys.DAMAGE_TYPE).entryOf(FabricDocsReferenceDamageTypes.TATER));
            entity.damage(damageSource, 5.0f);
        }
        super.onSteppedOn(world, pos, state, entity);
    }
}

----------------------------------------

TITLE: Adding Translations for Custom Effect in JSON
DESCRIPTION: This JSON snippet shows how to add a translation for the custom Tater effect in the language file.

LANGUAGE: json
CODE:
{
  "effect.fabric-docs-reference.tater": "Tater"
}

----------------------------------------

TITLE: Component Management Commands
DESCRIPTION: Minecraft commands for giving items with custom components and managing component values.

LANGUAGE: mcfunction
CODE:
/give @p fabric-docs-reference:counter[fabric-docs-reference:click_count=5]
/give @p fabric-docs-reference:counter[!fabric-docs-reference:click_count]

----------------------------------------

TITLE: Component Management Commands
DESCRIPTION: Minecraft commands for giving items with custom components and managing component values.

LANGUAGE: mcfunction
CODE:
/give @p fabric-docs-reference:counter[fabric-docs-reference:click_count=5]
/give @p fabric-docs-reference:counter[!fabric-docs-reference:click_count]