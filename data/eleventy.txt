TITLE: Basic Eleventy Configuration Export
DESCRIPTION: Base configuration export with async function to configure Eleventy settings.

LANGUAGE: javascript
CODE:
export default async function(eleventyConfig) {
	// Configure Eleventy
};

----------------------------------------

TITLE: Configuring NPM Build Script for Eleventy
DESCRIPTION: Package.json configuration to set up a build script for Eleventy deployment. This allows hosts to run the build command through npm run build.

LANGUAGE: javascript
CODE:
{
  "scripts": {
    "build": "npx @11ty/eleventy"
  }
}

----------------------------------------

TITLE: Creating a Basic Plugin
DESCRIPTION: Shows the basic structure for creating a new Eleventy plugin with configuration function and options.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig, pluginOptions) {
	// Your plugin code goes here
};

----------------------------------------

TITLE: Using Universal Filters and Shortcodes in JavaScript Templates
DESCRIPTION: Shows how to use universal filters and shortcodes within an Eleventy JavaScript template.

LANGUAGE: javascript
CODE:
export default function (data) {
	return `
<h1>${this.myFilter(data.myVar)}</h1>
<p>${this.user(data.firstName, data.lastName)}</p>
<p>${this.pairedUser(
		`Here is some more content`,
		data.firstName,
		data.lastName
	)}</p>
`;
};

LANGUAGE: javascript
CODE:
module.exports = function (data) {
	return `
<h1>${this.myFilter(data.myVar)}</h1>
<p>${this.user(data.firstName, data.lastName)}</p>
<p>${this.pairedUser(
		`Here is some more content`,
		data.firstName,
		data.lastName
	)}</p>
`;
};

----------------------------------------

TITLE: Generating Optimized Images with Eleventy Image JavaScript API
DESCRIPTION: This snippet demonstrates how to use the Eleventy Image JavaScript API to generate optimized images. It processes a remote image, creates multiple formats and sizes, and returns metadata about the generated images.

LANGUAGE: javascript
CODE:
const Image = require("@11ty/eleventy-img");

(async () => {
  let url = "https://images.unsplash.com/photo-1608178398319-48f814d0750c";

  let stats = await Image(url, {
    widths: [300],
    formats: ["webp", "jpeg"]
  });

  console.log(stats);
})();

----------------------------------------

TITLE: Running Eleventy with Default Settings
DESCRIPTION: Basic command to run Eleventy, searching the current directory and outputting to ./_site. It also shows how to explicitly set input and output directories.

LANGUAGE: bash
CODE:
# Searches the current directory, outputs to ./_site
npx @11ty/eleventy

# `npx @11ty/eleventy` is the same as:
npx @11ty/eleventy --input=. --output=_site

----------------------------------------

TITLE: Basic Plugin Configuration in Eleventy
DESCRIPTION: Demonstrates the simplest form of plugin implementation where a function is passed to addPlugin method.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addPlugin(function(eleventyConfig) {
		// I am a plugin!
	});
};

----------------------------------------

TITLE: Configuring Basic Shortcodes in Eleventy
DESCRIPTION: This snippet demonstrates how to add basic shortcodes to Eleventy configuration. It shows both synchronous and asynchronous methods for adding shortcodes that will be available in Markdown, Liquid, Nunjucks, JavaScript, and Handlebars templates.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  // Shortcodes added in this way are available in:
  // * Markdown
  // * Liquid
  // * Nunjucks
  // * JavaScript
  // * Handlebars (not async)

  eleventyConfig.addShortcode("user", function(firstName, lastName) { /* … */ });

  // Async-friendly in {{ "2.0.0-canary.24" | coerceVersion }}
  eleventyConfig.addShortcode("user", async function(myName) { /* … */ });

  // Direct async method available
  eleventyConfig.addAsyncShortcode("user", async function(myName) { /* … */ });
};

----------------------------------------

TITLE: Setting Input Directory Configuration
DESCRIPTION: Example of setting the input directory using the configuration API method setInputDirectory().

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Order matters, put this at the top of your configuration file.
  eleventyConfig.setInputDirectory("views");
};

----------------------------------------

TITLE: Conditional CSS Minification in Eleventy Template
DESCRIPTION: Demonstrates how to conditionally minify CSS in an Eleventy template based on the environment variable.

LANGUAGE: html
CODE:
<style>
{% if myProject.environment == "production" %}
	{{ css | cssmin | safe }}
{% else %}
	{{ css | safe }}
{% endif %}
</style>

----------------------------------------

TITLE: Creating Function-based Templates in JavaScript for Eleventy
DESCRIPTION: Demonstrates how to create a function-based template that can access data in Eleventy.

LANGUAGE: javascript
CODE:
export default function (data) {
	return `<p>${data.name}</p>`;
};

LANGUAGE: javascript
CODE:
module.exports = function (data) {
	return `<p>${data.name}</p>`;
};

----------------------------------------

TITLE: Setting Output Directory Configuration
DESCRIPTION: Example of setting the output directory using the configuration API method setOutputDirectory().

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Order matters, put this at the top of your configuration file.
  eleventyConfig.setOutputDirectory("dist");
};

----------------------------------------

TITLE: Configuring JSX Templates with TSX in Eleventy
DESCRIPTION: Configuration setup for enabling JSX and TypeScript templates using tsx package. Includes server-side rendering with react-dom/server.

LANGUAGE: javascript
CODE:
import "tsx/esm";
import { renderToStaticMarkup } from "react-dom/server";

export default function (eleventyConfig) {
	// We can add support for TypeScript too, at the same time:
	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
		compile: function () {
			return async function (data) {
				let content = await this.defaultRenderer(data);
				return renderToStaticMarkup(content);
			};
		},
	});
}

----------------------------------------

TITLE: Defining the page Variable Structure in JavaScript
DESCRIPTION: Demonstrates the structure and properties of the page variable available in Eleventy templates. Includes URL, file paths, dates, and other metadata about the current page.

LANGUAGE: javascript
CODE:
const page = {
	url: "/current/page/myFile/",
	fileSlug: "myFile",
	filePathStem: "/current/page/myFile",
	date: new Date(),
	inputPath: "./current/page/myFile.md",
	outputPath: "./_site/current/page/myFile/index.html",
	outputFileExtension: "html",
	templateSyntax: "liquid,md",
	rawInput: "<!doctype html>…"
	lang: "",
};

----------------------------------------

TITLE: Filter Configuration in Eleventy
DESCRIPTION: Shows how to add synchronous and asynchronous filters using the Eleventy Configuration API.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addFilter("makeUppercase", function(value) { /* … */ });

  eleventyConfig.addAsyncFilter("makeUppercase", async function(value) { /* … */ });
};

----------------------------------------

TITLE: HTML Minification Transform
DESCRIPTION: Implements an HTML minification transform using html-minifier-terser package. Only processes files with .html extension and applies various minification options.

LANGUAGE: javascript
CODE:
import htmlmin from "html-minifier-terser";

export default function (eleventyConfig) {
	eleventyConfig.addTransform("htmlmin", function (content) {
		if ((this.page.outputPath || "").endsWith(".html")) {
			let minified = htmlmin.minify(content, {
				useShortDoctype: true,
				removeComments: true,
				collapseWhitespace: true,
			});

			return minified;
		}

		// If not an HTML output, return content as-is
		return content;
	});
};

----------------------------------------

TITLE: Exporting Data from JavaScript File in Eleventy
DESCRIPTION: Demonstrates how to export data from a JavaScript file in Eleventy. This can be used for both global data files and template/directory data files.

LANGUAGE: javascript
CODE:
export default ["user1", "user2"];

----------------------------------------

TITLE: Example MDX Template
DESCRIPTION: This snippet demonstrates a basic MDX template that exports a React component and uses it within Markdown syntax. It shows how MDX combines JSX and Markdown.

LANGUAGE: jsx
CODE:
export function Thing() {
  return <>World!</>
}

# Hello, <Thing />

----------------------------------------

TITLE: Template Data Structure in YAML
DESCRIPTION: Example of front matter data structure in a markdown template file showing title, tags and layout configuration.

LANGUAGE: yaml
CODE:
---
title: This is a Good Blog Post
tags:
  - CSS
  - HTML
layout: my-layout.njk
---

----------------------------------------

TITLE: Accessing Page Data in JavaScript Functions for Eleventy
DESCRIPTION: Demonstrates how to access Eleventy page data values within JavaScript functions in the configuration file.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addJavaScriptFunction("myFunction", function () {
		// Available in 0.11.0 and above
		console.log(this.page);

		// For example:
		console.log(this.page.url);
		console.log(this.page.inputPath);
		console.log(this.page.fileSlug);
	});
};

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	eleventyConfig.addJavaScriptFunction("myFunction", function () {
		// Available in 0.11.0 and above
		console.log(this.page);

		// For example:
		console.log(this.page.url);
		console.log(this.page.inputPath);
		console.log(this.page.fileSlug);
	});
};

----------------------------------------

TITLE: Configuring Asynchronous Image Shortcode in Eleventy
DESCRIPTION: This snippet shows how to configure an asynchronous image shortcode in Eleventy. It uses the @11ty/eleventy-img package to generate optimized images with specified widths and formats.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("image", async function (src, alt, widths = [300, 600], sizes = "") {
		return Image(src, {
			widths,
			formats: ["avif", "jpeg"],
			returnType: "html",    // new in v6.0
			htmlOptions: {         // new in v6.0
				imgAttributes: {
					alt,               // required, though "" works fine
					sizes,             // required with more than one width, optional if single width output
					loading: "lazy",   // optional
					decoding: "async", // optional
				}
			}
		});
	});
};

----------------------------------------

TITLE: Full Options Configuration for Eleventy Programmatic API
DESCRIPTION: This snippet provides an example of using the full options object with Eleventy's Programmatic API. It includes various configuration options such as input, output, formats, data files, and more.

LANGUAGE: javascript
CODE:
const Eleventy = require("@11ty/eleventy");

async function elev() {
  let elev = new Eleventy(".", "_site", {
    // --input="."
    dir: {
      // --input="."
      input: ".",
      // --output="_site"
      output: "_site",
      // --includes="_includes"
      includes: "_includes",
      // --layouts="_layouts"
      layouts: "_layouts",
      // --data="_data"
      data: "_data"
    },
    // Controls which template formats to look for
    templateFormats: ["njk","md"],
    // Configure the name of the file to look for data in the data directory
    // e.g. _data/mycustomdata.js
    dataFileSuffixes: ["mycustomdata"]
  });

  await elev.write();
}

elev();

----------------------------------------

TITLE: Async Data Fetching in Eleventy JavaScript Data File
DESCRIPTION: Demonstrates how to use async functions to fetch data asynchronously at build time in an Eleventy JavaScript data file.

LANGUAGE: javascript
CODE:
async function fetchUserData(username) {
	// do some async things
	return username;
}

export default async function () {
	let user1 = await fetchUserData("user1");
	let user2 = await fetchUserData("user2");

	return [user1, user2];
};

----------------------------------------

TITLE: Configuring Eleventy Using Async Callback Function
DESCRIPTION: Demonstrates the preferred method of configuring Eleventy using an async callback function that provides access to the full Configuration API. This approach was introduced in Eleventy v3.0.

LANGUAGE: javascript
CODE:
export default async function(eleventyConfig) {
  // Access to the full `eleventyConfig` Configuration API
};

----------------------------------------

TITLE: Using getFilteredByGlob() Method in Eleventy Collections API
DESCRIPTION: Shows how to use getFilteredByGlob() to create collections based on file glob patterns. This example demonstrates filtering for markdown files, posts in a specific directory, and using multiple glob patterns.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addCollection("onlyMarkdown", function (collectionApi) {
		return collectionApi.getFilteredByGlob("**/*.md");
	});

	eleventyConfig.addCollection("posts", function (collectionApi) {
		return collectionApi.getFilteredByGlob("_posts/*.md");
	});

	eleventyConfig.addCollection("posts", function (collectionApi) {
		// Also accepts an array of globs!
		return collectionApi.getFilteredByGlob(["posts/*.md", "notes/*.md"]);
	});
};

----------------------------------------

TITLE: Installing Eleventy Syntax Highlighting Plugin with npm
DESCRIPTION: Command to install the Eleventy syntax highlighting plugin using npm.

LANGUAGE: shell
CODE:
npm install @11ty/eleventy-plugin-syntaxhighlight

----------------------------------------

TITLE: Configuring Eleventy Image Transform Plugin
DESCRIPTION: Demonstrates how to add the Eleventy Image Transform plugin to the Eleventy configuration file.

LANGUAGE: javascript
CODE:
import { eleventyImageTransformPlugin } from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(eleventyImageTransformPlugin);
};

----------------------------------------

TITLE: Writing Eleventy Output to File System in Node.js
DESCRIPTION: This snippet demonstrates how to use Eleventy's Programmatic API to write output to the file system using a Node.js script. It includes error handling and console logging of the write operation result.

LANGUAGE: javascript
CODE:
const Eleventy = require("@11ty/eleventy");

async function elev() {
  let elev = new Eleventy();

  try {
    await elev.write();
    console.log( "Wrote to output folder" );
  } catch(e) {
    console.log( "Error writing", e );
  }
}

elev();

----------------------------------------

TITLE: Exporting String Content in JavaScript for Eleventy
DESCRIPTION: Demonstrates how to export a simple string as content for an Eleventy template using ESM and CJS syntax.

LANGUAGE: javascript
CODE:
export default "<p>Zach</p>";

LANGUAGE: javascript
CODE:
module.exports = "<p>Zach</p>";

----------------------------------------

TITLE: Adding Virtual Templates in Eleventy Configuration
DESCRIPTION: Demonstrates how to add virtual templates using the Eleventy configuration API. It shows examples of creating Markdown content with an HTML layout, and a JavaScript template.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Create content templates Files
	eleventyConfig.addTemplate("virtual.md", `# Hello`, {
        	layout: "virtual.html"
	});

	// Works great with Layouts too
	eleventyConfig.addTemplate("_includes/virtual.html", `<!-- Layout -->{% raw %}{{ content }}{% endraw %}`);
};

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Create content templates Files
	eleventyConfig.addTemplate("virtual.11ty.js", function(data) {
		return `<h1>Hello</h1>`;
	});
};

----------------------------------------

TITLE: Configuring TypeScript Support in Eleventy with TSX
DESCRIPTION: Configuration code to enable TypeScript and JSX support in Eleventy using tsx package. Includes extension configuration and static markup rendering.

LANGUAGE: javascript
CODE:
import "tsx/esm";
import { renderToStaticMarkup } from "react-dom/server";

export default function (eleventyConfig) {
	// We can add support for JSX too, at the same time:
	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
		compile: function () {
			return async function (data) {
				let content = await this.defaultRenderer(data);
				return renderToStaticMarkup(content);
			};
		},
	});
}

----------------------------------------

TITLE: Configuring Eleventy for MDX Support
DESCRIPTION: This snippet shows how to configure Eleventy to support MDX files. It includes importing necessary modules, registering the MDX loader, and adding the MDX extension to Eleventy's configuration.

LANGUAGE: javascript
CODE:
import {renderToStaticMarkup} from 'react-dom/server'
import {register} from 'node:module';

register('@mdx-js/node-loader', import.meta.url);

export default function(eleventyConfig) {
	eleventyConfig.addExtension("mdx", {
		key: "11ty.js",
		compile: () => {
			return async function(data) {
				let content = await this.defaultRenderer(data);
				return renderToStaticMarkup(content);
			};
		}
	});
};

----------------------------------------

TITLE: Adding Universal Filters and Shortcodes in Eleventy Configuration
DESCRIPTION: Demonstrates how to add universal filters and shortcodes that can be used as JavaScript template functions.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  // Universal filters (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addFilter("myFilter", function(myVariable) { /* … */ });

  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addShortcode("user", function(firstName, lastName) { /* … */ });

  // Universal Paired Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addPairedShortcode("pairedUser", function(content, firstName, lastName) { /* … */ });
};

LANGUAGE: javascript
CODE:
module.exports = function(eleventyConfig) {
  // Universal filters (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addFilter("myFilter", function(myVariable) { /* … */ });

  // Universal Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addShortcode("user", function(firstName, lastName) { /* … */ });

  // Universal Paired Shortcodes (Adds to Liquid, Nunjucks, 11ty.js)
  eleventyConfig.addPairedShortcode("pairedUser", function(content, firstName, lastName) { /* … */ });
};

----------------------------------------

TITLE: Using Markdown with JavaScript Templates in Eleventy
DESCRIPTION: Shows how to use JavaScript as a preprocessor for Markdown content in Eleventy templates.

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			myName: "Zach",
			templateEngineOverride: "11ty.js,md",
		};
	}

	render(data) {
		return `# This is ${data.myName}`;
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			myName: "Zach",
			templateEngineOverride: "11ty.js,md",
		};
	}

	render(data) {
		return `# This is ${data.myName}`;
	}
}

module.exports = Test;

----------------------------------------

TITLE: Caching JSON from API using Eleventy Fetch
DESCRIPTION: Example of using Eleventy Fetch to cache a JSON response from a GitHub API endpoint. The cache duration is set to 1 day, and the response is parsed as JSON.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

export default async function () {
	let url = "https://api.github.com/repos/11ty/eleventy";

	let json = await Fetch(url, {
		duration: "1d", // save for 1 day
		type: "json", // we'll parse JSON for you
	});

	return json;
};

----------------------------------------

TITLE: Adding a CSS Bundle in Eleventy Configuration
DESCRIPTION: This snippet demonstrates how to add a CSS bundle to Eleventy using the addBundle method in the configuration file. It creates a new 'css' universal shortcode for adding arbitrary code to the bundle.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addBundle("css");
};

----------------------------------------

TITLE: Configuring Basic Eleventy Dev Server Options
DESCRIPTION: Shows how to configure basic server options like live reload, DOM diffing, port number, and file watching using setServerOptions API method.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setServerOptions({
		// Default values are shown:

		// Whether the live reload snippet is used
		liveReload: true,

		// Whether DOM diffing updates are applied where possible instead of page reloads
		domDiff: true,

		// The starting port number
		// Will increment up to (configurable) 10 times if a port is already in use.
		port: 8080,

		// Additional files to watch that will trigger server updates
		// Accepts an Array of file paths or globs (passed to `chokidar.watch`).
		// Works great with a separate bundler writing files to your output folder.
		// e.g. `watch: ["_site/**/*.css"]"
		watch: [],

		// Show local network IP addresses for device testing
		showAllHosts: false,

		// Use a local key/certificate to opt-in to local HTTP/2 with https
		https: {
			// key: "./localhost.key",
			// cert: "./localhost.cert",
		},

		// Change the default file encoding for reading/serving files
		encoding: "utf-8",

		// Show the dev server version number on the command line
		showVersion: false,

		// Added in Dev Server 2.0+
		// The default file name to show when a directory is requested.
		indexFileName: "index.html",

		// Added in Dev Server 2.0+
		// An object mapping a URLPattern pathname to a callback function
		// for on-request processing (read more below).
		onRequest: {},
	});
};

----------------------------------------

TITLE: ESM Configuration File for Eleventy
DESCRIPTION: Illustrates the structure of an ESM configuration file for Eleventy. It shows how to import plugins and export the configuration function using ESM syntax.

LANGUAGE: javascript
CODE:
// Any combination of these
import { I18nPlugin, RenderPlugin, HtmlBasePlugin } from "@11ty/eleventy";

export default function (eleventyConfig) {
	// …
};

----------------------------------------

TITLE: Using JavaScript Template Functions in Eleventy Templates
DESCRIPTION: Shows how to use custom JavaScript template functions within an Eleventy JavaScript template.

LANGUAGE: javascript
CODE:
export default function (data) {
	return `<h1>${this.myFunction(data.a, data.b)}</h1>`;
};

LANGUAGE: javascript
CODE:
module.exports = function (data) {
	return `<h1>${this.myFunction(data.a, data.b)}</h1>`;
};

----------------------------------------

TITLE: Adding a Custom Collection in Eleventy Configuration
DESCRIPTION: Demonstrates how to use the addCollection method in the Eleventy configuration file to create a custom collection. This example shows an async-friendly approach to adding a collection.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// async-friendly
	eleventyConfig.addCollection("myCollectionName", async (collectionsApi) => {
		// get unsorted items
		return collectionsApi.getAll();
	});
};

----------------------------------------

TITLE: Installing Eleventy Fetch Plugin with npm
DESCRIPTION: Command to install the @11ty/eleventy-fetch plugin using npm.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-fetch

----------------------------------------

TITLE: Configuring Passthrough File Copy in Eleventy
DESCRIPTION: This snippet demonstrates how to use the configuration API to specify files or directories for Eleventy to copy. It includes examples of copying entire directories, specific file types, and using glob patterns.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Output directory: _site

	// Copy `img/` to `_site/img`
	eleventyConfig.addPassthroughCopy("img");

	// Copy `css/fonts/` to `_site/css/fonts`
	// Keeps the same directory structure.
	eleventyConfig.addPassthroughCopy("css/fonts");

	// Copy any .jpg file to `_site`, via Glob pattern
	// Keeps the same directory structure.
	eleventyConfig.addPassthroughCopy("**/*.jpg");
};

----------------------------------------

TITLE: Validating Boolean Draft Status with Zod in Eleventy
DESCRIPTION: Implementation of data validation for blog posts using Zod schema validation. This code ensures that the 'draft' property is either a boolean value or undefined in blog template data. The validation is applied through the eleventyDataSchema callback function in the blog directory data file.

LANGUAGE: javascript
CODE:
import { z } from "zod";
import { fromZodError } from 'zod-validation-error';

export default {
	eleventyDataSchema: function(data) {
		let result = z.object({
			draft: z.boolean().or(z.undefined()),
		}).safeParse(data);

		if(result.error) {
			throw fromZodError(result.error);
		}
	}
};

----------------------------------------

TITLE: Accessing Global Data in Eleventy JavaScript Data File
DESCRIPTION: Shows how to access global data and the Eleventy environment variable in a JavaScript data file callback function.

LANGUAGE: javascript
CODE:
export default function (configData) {
	if (configData.eleventy.env.source === "cli") {
		return "I am on the command line";
	}

	return "I am running programmatically via a script";
}

----------------------------------------

TITLE: Basic Transform Implementation in Eleventy
DESCRIPTION: Shows how to add a basic transform function to Eleventy configuration. The transform can be synchronous or asynchronous and has access to page variables.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Can be sync or async
	eleventyConfig.addTransform("transform-name", async function (content) {
		console.log(this.page.inputPath);
		console.log(this.page.outputPath);

		return content; // no changes made.
	});
};

----------------------------------------

TITLE: Generating HTML with Eleventy Image JavaScript API
DESCRIPTION: This snippet demonstrates how to use the Eleventy Image JavaScript API to generate HTML for optimized images. It uses the 'returnType: "html"' option to return an HTML string instead of a metadata object.

LANGUAGE: javascript
CODE:
const Image = require("@11ty/eleventy-img");

(async () => {
  let url = "https://images.unsplash.com/photo-1608178398319-48f814d0750c";

  let html = await Image(url, {
    widths: [300],
    formats: ["webp", "jpeg"],
    returnType: "html"
  });

  console.log(html);
})();

----------------------------------------

TITLE: JSON Feed Template for Eleventy
DESCRIPTION: JSON template for generating a JSON feed. Includes metadata configuration and iterates over blog posts to create feed items.

LANGUAGE: json
CODE:
---json
{
  "permalink": "feed.json",
  "eleventyExcludeFromCollections": true,
  "metadata": {
    "title": "My Blog about Boats",
    "description": "I am writing about my experiences as a naval navel-gazer.",
    "language": "en",
    "base": "https://example.com/",
    "author": {
      "name": "Boaty McBoatFace"
    }
  }
}
---
{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "{{ metadata.title }}",
  "language": "{{ metadata.language or page.lang }}",
  "home_page_url": "{{ metadata.base | addPathPrefixToFullUrl }}",
  "feed_url": "{{ permalink | htmlBaseUrl(metadata.base) }}",
  "description": "{{ metadata.description }}",
  "authors": [
    {
      "name": "{{ metadata.author.name }}"
    }
  ],
  "items": [
    {%- for post in collections.posts | reverse %}
    {%- set absolutePostUrl %}{{ post.url | htmlBaseUrl(metadata.base) }}{% endset %}
    {
      "id": "{{ absolutePostUrl }}",
      "url": "{{ absolutePostUrl }}",
      "title": "{{ post.data.title }}",
      "content_html": {% if post.content %}{{ post.content | renderTransforms(post.data.page, metadata.base) | dump | safe }}{% else %}""{% endif %},
      "date_published": "{{ post.date | dateToRfc3339 }}"
    }
    {% if not loop.last %},{% endif %}
    {%- endfor %}
  ]
}

----------------------------------------

TITLE: Advanced JavaScript Computed Examples
DESCRIPTION: Various examples of using JavaScript for computed properties, including template strings, async functions, and promises.

LANGUAGE: javascript
CODE:
export default {
	eleventyComputed: {
		myTemplateString: "This is assumed to be a template string!",
		myString: (data) => "This is a string!",
		myFunction: (data) => `This is a string using ${data.someValue}.`,
		myAsyncFunction: async (data) => await someAsyncThing(),
		myPromise: (data) => {
			return new Promise((resolve) => {
				setTimeout(() => resolve("100ms DELAYED HELLO"), 100);
			});
		},
	},
};

----------------------------------------

TITLE: Implementing Shortcodes in Nunjucks Templates
DESCRIPTION: Examples of implementing both single and paired shortcodes in Nunjucks templates, including synchronous and asynchronous versions.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  // Nunjucks Shortcode
  eleventyConfig.addNunjucksShortcode("user", function(name, twitterUsername) { /* … */ });

  // Universal Shortcodes
  eleventyConfig.addShortcode("user", function(name, twitterUsername) {
    return `<div class="user">
<div class="user_name">${name}</div>
<div class="user_twitter">@${twitterUsername}</div>
</div>`;
  });
};

----------------------------------------

TITLE: Using GraphQL in Eleventy JavaScript Data File
DESCRIPTION: Demonstrates a 'Hello World' GraphQL example in an Eleventy JavaScript data file, showing how to integrate GraphQL queries.

LANGUAGE: javascript
CODE:
import { graphql, buildSchema } from "graphql";

// this could also be `async function`
export default function () {
	// if you want to `await` for other things here, use `async function`
	var schema = buildSchema(`type Query {
    hello: String
  }`);

	var root = {
		hello: () => "Hello world async!",
	};

	return graphql(schema, "{ hello }", root);
};

----------------------------------------

TITLE: Advanced Nunjucks Environment Setup in Eleventy
DESCRIPTION: Shows how to create and configure a custom Nunjucks environment instance with a FileSystemLoader for advanced usage scenarios.

LANGUAGE: javascript
CODE:
import Nunjucks from "nunjucks";

export default function (eleventyConfig) {
	let nunjucksEnvironment = new Nunjucks.Environment(
		new Nunjucks.FileSystemLoader("_includes")
	);

	eleventyConfig.setLibrary("njk", nunjucksEnvironment);
};

----------------------------------------

TITLE: Configuring Multiple Custom Data Formats in Eleventy
DESCRIPTION: Demonstrates how to add support for multiple custom data formats (TOML and YAML) and explains their priority in Eleventy's data cascade.

LANGUAGE: javascript
CODE:
import toml from "@iarna/toml";
import yaml from "js-yaml";

export default function (eleventyConfig) {
	// Lower priority
	eleventyConfig.addDataExtension("toml", (contents) => toml.parse(contents));

	// Higher priority
	eleventyConfig.addDataExtension("yaml", (contents) => yaml.load(contents));
};

----------------------------------------

TITLE: Full addBundle Options Configuration
DESCRIPTION: This code snippet shows the complete set of options available when adding a bundle using addBundle. It includes options for output file extension, shortcode name, output directory, transforms, and more.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addBundle("css", {
		// File extension used for bundle file output, defaults to bundle name
		outputFileExtension: "css",

		// Name of shortcode for use in templates, defaults to bundle name
		shortcodeName: "css",
		// shortcodeName: false, // disable this feature.

		// Optional subfolder (relative to output directory) files will write to
		toFileDirectory: "",

		// Modify bundle content
		transforms: [],

		// If two identical code blocks exist in non-default buckets, they'll be hoisted to the first bucket in common.
		hoist: true,

		// In 11ty.js templates, having a named export of `bundle` will populate your bundles.
		bundleExportKey: "bundle",
		// bundleExportKey: false, // disable this feature.
	});
};

----------------------------------------

TITLE: Sorting Collections with getAll().sort() in Eleventy
DESCRIPTION: Shows how to use Array.sort() with getAll() to create a custom-sorted collection. This example provides options for sorting by date (ascending or descending) and by input path.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Sort with `Array.sort`
	eleventyConfig.addCollection("myCustomSort", function (collectionsApi) {
		return collectionsApi.getAll().sort(function (a, b) {
			//return a.date - b.date; // sort by date - ascending
			return b.date - a.date; // sort by date - descending
			//return a.inputPath.localeCompare(b.inputPath); // sort by path - ascending
			//return b.inputPath.localeCompare(a.inputPath); // sort by path - descending
		});
	});
};

----------------------------------------

TITLE: Configuring Eleventy Image Transform Plugin with Options
DESCRIPTION: Shows how to add the Eleventy Image Transform plugin with custom configuration options.

LANGUAGE: javascript
CODE:
import { eleventyImageTransformPlugin } from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(eleventyImageTransformPlugin, {
		// output image formats
		formats: ["avif", "webp", "jpeg"],

		// output image widths
		widths: ["auto"],

		// optional, attributes assigned on <img> nodes override these values
		htmlOptions: {
			imgAttributes: {
				loading: "lazy",
				decoding: "async",
			},
			pictureAttributes: {}
		},
	});
};

----------------------------------------

TITLE: Implementing Critical CSS with Asset Bucketing
DESCRIPTION: This snippet demonstrates how to use asset bucketing to implement Critical CSS. It divides CSS between a default bucket for critical styles and a defer bucket for non-critical styles loaded asynchronously.

LANGUAGE: html
CODE:
<!-- … -->
<head>
	<!-- Inlined critical styles -->
	<style>{% getBundle "css" %}</style>

	<!-- Non-critical styles -->
	<link rel="stylesheet" href="{% getBundleFileUrl 'css', 'defer' %}" fetchpriority="low">
</head>
<body>
	<!-- This goes into a `default` bucket -->
	{% css %}/* Inline in the head, great with @font-face! */{% endcss %}
	<!-- This goes into a `defer` bucket (the bucket can be any string value) -->
	{% css "defer" %}/* Load me later */{% endcss %}
</body>
<!-- … -->

----------------------------------------

TITLE: Configuring Default Layout in Eleventy Posts Directory
DESCRIPTION: JSON configuration file that sets a default Nunjucks layout template for all posts in the posts directory. This demonstrates how to apply a common layout across multiple templates using directory data files.

LANGUAGE: json
CODE:
{ "layout": "layouts/post.njk" }

----------------------------------------

TITLE: Custom Liquid Library Instance Configuration
DESCRIPTION: Advanced setup using a custom LiquidJS library instance with specific options for extension, partials, and root directory.

LANGUAGE: javascript
CODE:
import { Liquid } from "liquidjs";

export default function (eleventyConfig) {
	let options = {
		extname: ".liquid",
		dynamicPartials: false,
		strictFilters: false,
		root: ["_includes"],
	};

	eleventyConfig.setLibrary("liquid", new Liquid(options));
};

----------------------------------------

TITLE: Postprocessing CSS Bundle Output with PostCSS
DESCRIPTION: This example shows how to postprocess the CSS bundle output using PostCSS. It demonstrates adding a transform function to process nested CSS using the postcss-nested plugin.

LANGUAGE: javascript
CODE:
import postcss from "postcss";
import postcssNested from "postcss-nested";

export default function(eleventyConfig) {
	eleventyConfig.addBundle("css", {
		transforms: [
			async function(content) {
				// type contains the bundle name.
				let { type, page } = this;
				let result = await postcss([postcssNested]).process(content, { from: page.inputPath, to: null });
				return result.css;
			}
		]
	});
};

----------------------------------------

TITLE: WebC Asset Bucketing Example
DESCRIPTION: Demonstrates how to use WebC's asset bucketing feature to organize and load CSS and JavaScript in different bundles.

LANGUAGE: html
CODE:
<style>
	/* This CSS is put into the default bucket */
</style>
<script>
	/* This JS is put into the default bucket */
</script>
<style webc:bucket="defer">
	/* This CSS is put into the `defer` bucket */
</style>
<script webc:bucket="defer">
	/* This JS is put into the `defer` bucket */
</script>

----------------------------------------

TITLE: Implementing Liquid Shortcodes
DESCRIPTION: Shows how to create and use both simple and paired shortcodes in Liquid templates with support for async operations.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addLiquidShortcode("user2", async function(bioContent, name, twitterUsername) {
		return await fetchAThing();
	});

	eleventyConfig.addPairedShortcode("user2", async function(content, name, twitterUsername) {
		return await fetchAThing();
	});
};

----------------------------------------

TITLE: Creating Async Function Templates in JavaScript for Eleventy
DESCRIPTION: Shows how to use async functions in Eleventy templates to handle asynchronous operations.

LANGUAGE: javascript
CODE:
const getAnAsyncThing = require("./lib/asyncThing");

export default async function (data) {
	return `<p>${await getAnAsyncThing()}</p>`;
};

LANGUAGE: javascript
CODE:
const getAnAsyncThing = require("./lib/asyncThing");

module.exports = async function (data) {
	return `<p>${await getAnAsyncThing()}</p>`;
};

----------------------------------------

TITLE: Adding Custom Timeout to Eleventy Fetch Request
DESCRIPTION: Example of using AbortSignal to add a custom timeout to an Eleventy Fetch request. This sets a 5-second timeout for the fetch operation.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

await Fetch("https://…", {
	fetchOptions: {
		signal: AbortSignal.timeout(5000)
	},
});

----------------------------------------

TITLE: Configuring Virtual Template for RSS Feed in Eleventy
DESCRIPTION: JavaScript configuration for adding the RSS feed plugin to Eleventy using a virtual template. This method creates a feed without requiring additional template files.

LANGUAGE: javascript
CODE:
import { feedPlugin } from "@11ty/eleventy-plugin-rss";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(feedPlugin, {
		type: "atom", // or "rss", "json"
		outputPath: "/feed.xml",
		collection: {
			name: "posts", // iterate over `collections.posts`
			limit: 10,     // 0 means no limit
		},
		metadata: {
			language: "en",
			title: "Blog Title",
			subtitle: "This is a longer description about your blog.",
			base: "https://example.com/",
			author: {
				name: "Your Name",
				email: "", // Optional
			}
		}
	});
};

----------------------------------------

TITLE: Configuring TypeScript Support with esbuild-register
DESCRIPTION: Alternative configuration using esbuild-register for CommonJS compatibility in Eleventy 2.0.

LANGUAGE: javascript
CODE:
const { register } = require("esbuild-register/dist/node");

register();

module.exports = function(eleventyConfig) {
	// We can add support for JSX too, at the same time:
	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
	});
};

----------------------------------------

TITLE: Implementing Custom Liquid Tag in Eleventy
DESCRIPTION: Example of creating a custom 'uppercase' tag for Liquid templates in Eleventy. The tag accepts either a variable or string literal and converts it to uppercase. Implementation uses LiquidJS tag API with parse and render methods.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  // Usage: {% uppercase myVar %} where myVar has a value of "alice"
  // Usage: {% uppercase "alice" %}
  eleventyConfig.addLiquidTag("uppercase", function (liquidEngine) {
    return {
      parse: function (tagToken, remainingTokens) {
        this.str = tagToken.args; // myVar or "alice"
      },
      render: async function (scope, hash) {
        // Resolve variables
        var str = await this.liquid.evalValue(this.str, scope); // "alice"

        // Do the uppercasing
        return str.toUpperCase(); // "ALICE"
      },
    };
  });
};

----------------------------------------

TITLE: Accessing Scoped Data in Eleventy Shortcodes
DESCRIPTION: This snippet demonstrates how to access Eleventy-specific data properties within shortcode callbacks. It shows the available properties like page and eleventy, as well as Nunjucks-specific env and ctx properties.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  // Make sure you're not using an arrow function here: () => {}
  eleventyConfig.addShortcode("myShortcode", function () {
    // this.page
    // this.eleventy
  });
};

----------------------------------------

TITLE: Adding Nunjucks Filters in Eleventy
DESCRIPTION: Demonstrates different ways to add filters in Nunjucks, including synchronous, asynchronous, and universal filters with multiple arguments.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  // Nunjucks Filter
  eleventyConfig.addNunjucksFilter("myNjkFilter", function(value) { /* … */ });

  // Nunjucks Asynchronous Filter
  eleventyConfig.addNunjucksAsyncFilter("myAsyncNjkFilter", function(value, callback) { /* … */ });

  // Universal filters
  eleventyConfig.addFilter("myFilter", function(value) { /* … */ });
};

----------------------------------------

TITLE: Removing URL Query Params from Cache Identifier
DESCRIPTION: Example of using the removeUrlQueryParams option to exclude query parameters from the cache identifier in Eleventy Fetch.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

await Fetch(
	"https://www.zachleat.com/img/avatar-2017-big.png?Get=rid&of=these",
	{
		removeUrlQueryParams: true,
	}
);

----------------------------------------

TITLE: Advanced Configuration for Eleventy Syntax Highlighting Plugin
DESCRIPTION: Detailed configuration options for the syntax highlighting plugin, including custom language support and HTML attribute customization.

LANGUAGE: javascript
CODE:
import syntaxHighlight from "@11ty/eleventy-plugin-syntaxhighlight";

export default function(eleventyConfig) {
  eleventyConfig.addPlugin(syntaxHighlight, {

    // Line separator for line breaks
    lineSeparator: "\n",

    // Change which Eleventy template formats use syntax highlighters
    templateFormats: ["*"], // default

    // Use only a subset of template types (11ty.js added in v4.0.0)
    // templateFormats: ["liquid", "njk", "md", "11ty.js"],

    // init callback lets you customize Prism
    init: function({ Prism }) {
      Prism.languages.myCustomLanguage = { /* … */ };
    },

    // Added in 3.1.1, add HTML attributes to the <pre> or <code> tags
    preAttributes: {
      tabindex: 0,

      // Added in 4.1.0 you can use callback functions too
      "data-language": function({ language, content, options }) {
        return language;
      }
    },
    codeAttributes: {},

    // Added in 5.0.0, throw errors on invalid language names
    errorOnInvalidLanguage: false,
  });
};

----------------------------------------

TITLE: Basic YAML Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the Render plugin documentation page, defining navigation properties and excerpt.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  key: Render
  order: 0
  excerpt: A plugin to add shortcodes to render an Eleventy template string (or file) inside of another template.
communityLinksKey: syntaxrender

----------------------------------------

TITLE: Implementing Custom Nunjucks Tag in Eleventy
DESCRIPTION: Example of creating a custom 'uppercase' tag for Nunjucks templates in Eleventy. The implementation shows how to parse arguments and transform text to uppercase using Nunjucks custom tag API with parse and run methods.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  // Usage: {% uppercase myVar %} where myVar has a value of "alice"
  // Usage: {% uppercase "alice" %}
  eleventyConfig.addNunjucksTag("uppercase", function (nunjucksEngine) {
    return new (function () {
      this.tags = ["uppercase"];

      this.parse = function (parser, nodes, lexer) {
        var tok = parser.nextToken();

        var args = parser.parseSignature(null, true);
        parser.advanceAfterBlockEnd(tok.value);

        return new nodes.CallExtensionAsync(this, "run", args);
      };

      this.run = function (context, myStringArg, callback) {
        let ret = new nunjucksEngine.runtime.SafeString(
          myStringArg.toUpperCase()
        );
        callback(null, ret);
      };
    })();
  });
};

----------------------------------------

TITLE: Configuring Paired Shortcodes in Eleventy
DESCRIPTION: This snippet shows how to add paired shortcodes to Eleventy configuration. It includes both synchronous and asynchronous methods for adding paired shortcodes that can be used in various template languages.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  // Shortcodes added in this way are available in:
  // * Markdown
  // * Liquid
  // * Nunjucks
  // * JavaScript
  // * Handlebars (sync only)

  eleventyConfig.addPairedShortcode("user", function(content, firstName, lastName) { /* … */ });

  // Async support for `addPairedShortcode` is new in Eleventy {{ "2.0.0-canary.24" | coerceVersion }}
  eleventyConfig.addPairedShortcode("user", async function(content, myName) { /* … */ });

  // Async method available
  eleventyConfig.addPairedAsyncShortcode("user", async function(content, myName) { /* … */ });
};

----------------------------------------

TITLE: Manually Storing Data in Eleventy Fetch Cache
DESCRIPTION: Example of using a custom function to manually store data in the Eleventy Fetch cache. This demonstrates how to cache arbitrary data with a unique requestId.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

export default function() {
	return Fetch(async function() {
		// do some expensive operation here, this is simplified for brevity
		let fakeTwitterApiContents = { followerCount: 1000 };

		return fakeTwitterApiContents;
	}, {
		// must supply a unique id for the callback
		requestId: "zachleat_twitter_followers"
	});
}

----------------------------------------

TITLE: Alternate Language Meta Tags Example
DESCRIPTION: Demonstrates how to implement alternate language meta tags for SEO using locale_links.

LANGUAGE: njk
CODE:
{%- set absoluteUrl = "https://www.11ty.dev" + page.url %}
<link rel="alternate" hreflang="{{ lang }}" href="{{ absoluteUrl }}">
{%- for locale in absoluteUrl | locale_links %}
  <link rel="alternate" hreflang="{{ locale.lang }}" href="{{ locale.url }}">
{%- endfor %}

----------------------------------------

TITLE: Rendering Navigation to HTML
DESCRIPTION: Examples of rendering navigation structure as HTML using different template languages.

LANGUAGE: liquid
CODE:
{{ collections.all | eleventyNavigation | eleventyNavigationToHtml }}

LANGUAGE: jinja2
CODE:
{{ collections.all | eleventyNavigation | eleventyNavigationToHtml | safe }}

----------------------------------------

TITLE: Handling Failed Requests with Eleventy Fetch
DESCRIPTION: Example of using a try-catch block to handle potential failures when fetching data with Eleventy Fetch. If the request fails, it returns a fallback object.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

export default async function () {
	try {
		let url = "https://api.github.com/repos/11ty/eleventy";

		/* This returns a promise */
		return Fetch(url, {
			duration: "1d",
			type: "json",
		});
	} catch (e) {
		return {
			// my failure fallback data
		};
	}
};

----------------------------------------

TITLE: Configuring Basic Preprocessor in Eleventy
DESCRIPTION: Demonstrates how to add a preprocessor that handles draft content and modifies template content. The preprocessor can filter files based on draft status and append template metadata to content.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  eleventyConfig.addPreprocessor("drafts", "njk,md,liquid", (data, content) => {
		if(data.draft) {
			// Ignore this file.
			return false;
		}

		// You can also modify the raw input of the template here too, be careful!
		return `${content}<!-- Template file: {% raw %}{{ page.inputPath }}{% endraw %} -->`;

		// If you return nothing or `undefined`, no changes will be made to this template.
	});
};

----------------------------------------

TITLE: Implementing Draft Mode Preprocessor in Eleventy
DESCRIPTION: Shows how to implement a drafts workflow using preprocessors. This example excludes draft content from production builds while allowing drafts to be viewed during development.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
  eleventyConfig.addPreprocessor("drafts", "*", (data, content) => {
		if(data.draft && process.env.ELEVENTY_RUN_MODE === "build") {
			return false;
		}
	});
};

----------------------------------------

TITLE: Enabling DEBUG Mode for Eleventy Fetch
DESCRIPTION: Command to enable DEBUG mode for Eleventy Fetch, which provides more detailed logging information during execution.

LANGUAGE: bash
CODE:
DEBUG=Eleventy:Fetch npx @11ty/eleventy

----------------------------------------

TITLE: Svelte Component Integration
DESCRIPTION: Shows how to use Svelte components with is-land, including component structure and initialization.

LANGUAGE: svelte
CODE:
<script>
	export let name = "world";
	let count = 0;
	function handleClick() {
		count += 1;
	}
</script>

<style>
	h1 {
		color: red;
	}
</style>

<h1>Hello {name}</h1>

<button on:click="{handleClick}">
	Clicked {count} {count === 1 ? 'time' : 'times'}
</button>

----------------------------------------

TITLE: Customizing Cache Filename in Eleventy Fetch
DESCRIPTION: Example of using a custom function to generate cache filenames in Eleventy Fetch. This allows for more control over how cached files are named.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

await Fetch("https://…", {
	filenameFormat: function(cacheKey, hash) {
		// do not include the file extension
		return `custom-name-${cacheKey}-${hash}`
	}
});

----------------------------------------

TITLE: Configuring Image Shortcode with On-Request Optimization in Eleventy
DESCRIPTION: This snippet demonstrates how to configure an image shortcode with on-request optimization in Eleventy. It uses the transformOnRequest feature for improved performance during development.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";
import { eleventyImageOnRequestDuringServePlugin } from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("image", async function (src, alt) {
		let html = await Image(src, {
			transformOnRequest: process.env.ELEVENTY_RUN_MODE === "serve",
			returnType: "html",
			htmlOptions: {
				imgAttributes: {
					alt, // required
				},
			}
		});

		return html;
	});

	// Add the dev server middleware manually
	eleventyConfig.addPlugin(eleventyImageOnRequestDuringServePlugin);
};

----------------------------------------

TITLE: Configuring Layout Aliases in Eleventy
DESCRIPTION: Demonstrates how to use the Configuration API to add layout aliases, allowing for easier migration or organization of layouts.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addLayoutAlias("post", "layouts/post.njk");
};

----------------------------------------

TITLE: Implementing Async Global Data in Eleventy
DESCRIPTION: Shows how to use promises and async functions to create asynchronous global data values.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	// or a promise:
	eleventyConfig.addGlobalData("myFunctionPromise", () => {
		return new Promise((resolve) => {
			setTimeout(resolve, 100, "foo");
		});
	});

	// or async:
	eleventyConfig.addGlobalData("myAsyncFunction", async () => {
		return Promise.resolve("hi");
	});
};

----------------------------------------

TITLE: Custom JavaScript and CSS Implementation
DESCRIPTION: Shows how to include custom JavaScript and CSS within an is-land component using templates.

LANGUAGE: html
CODE:
<is-land on:visible>
	<template data-island>
		<style>
			/* My custom CSS */
		</style>
		<link rel="stylesheet" href="my-css-file.css">
		<script type="module">
			console.log("Hydrating!");
		</script>
		<script type="module" src="my-js-file.js"></script>
	</template>
</is-land>

----------------------------------------

TITLE: Fetching Google Fonts CSS with Custom User Agent
DESCRIPTION: Example of using Eleventy Fetch to cache Google Fonts CSS with a custom user agent header. This demonstrates how to use fetchOptions for custom request configurations.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

let url = "https://fonts.googleapis.com/css?family=Roboto+Mono:400&display=swap";
let fontCss = await Fetch(url, {
	duration: "1d",
	type: "text",
	fetchOptions: {
		headers: {
			// lol
			"user-agent":
				"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
		},
	},
});

----------------------------------------

TITLE: Low-Level Cache Access in Eleventy Fetch
DESCRIPTION: Example of using the AssetCache class for low-level cache access in Eleventy Fetch. This demonstrates manual cache checking and saving.

LANGUAGE: javascript
CODE:
import { AssetCache } from "@11ty/eleventy-fetch";

export default async function () {
	// Pass in your unique custom cache key
	// (normally this would be tied to your API URL)
	let asset = new AssetCache("zachleat_twitter_followers");

	// check if the cache is fresh within the last day
	if (asset.isCacheValid("1d")) {
		// return cached data.
		return asset.getCachedValue(); // a promise
	}

	// do some expensive operation here, this is simplified for brevity
	let fakeTwitterApiContents = { followerCount: 1000 };

	await asset.save(fakeTwitterApiContents, "json");

	return fakeTwitterApiContents;
};

----------------------------------------

TITLE: Implementing Custom Cloud Template Language in Eleventy
DESCRIPTION: Example showing how to add support for a simple .clowd template format that replaces 'cloud' with 'butt' in the content.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addTemplateFormats("clowd");

	eleventyConfig.addExtension("clowd", {
		compile: async (inputContent) => {
			let output = inputContent.replace(/cloud/gi, "butt");

			return async () => {
				return output;
			};
		},
	});
};

----------------------------------------

TITLE: Adding Custom Data Extension in Eleventy Configuration
DESCRIPTION: Demonstrates how to add support for custom data file extensions using the addDataExtension method in Eleventy's configuration file.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Receives file contents, return parsed data
	eleventyConfig.addDataExtension("yml,yaml", (contents, filePath) => {
		return {};
	});
};

----------------------------------------

TITLE: Transforming Global Data with eleventyComputed.js in Eleventy
DESCRIPTION: This code snippet demonstrates how to use eleventyComputed.js to extract and transform data from multiple JSON files in Eleventy's global data directory. It defines two computed properties, myCopyrights and myLinks, which extract the 'entry' element from the 'feed' object in copyrights.json and links.json respectively.

LANGUAGE: javascript
CODE:
export default {
	myCopyrights: (data) => {
		return data.copyrights.feed.entry;
	},
	myLinks: (data) => {
		return data.links.feed.entry;
	},
};

----------------------------------------

TITLE: Fetching GitHub Repository Data with Node.js in Eleventy
DESCRIPTION: This code snippet demonstrates how to fetch GitHub repository data using node-fetch in an Eleventy project. It retrieves the stargazers count from the GitHub API and returns it as a data object for use in templates.

LANGUAGE: javascript
CODE:
import fetch from "node-fetch";

export default async function () {
	console.log("Fetching new github stargazers count…");

	// GitHub API: https://developer.github.com/v3/repos/#get
	let res = await fetch("https://api.github.com/repos/11ty/eleventy");
	let json = await res.json();

	// prune the data to return only what we want
	return {
		stargazers: json.stargazers_count,
	};
};

----------------------------------------

TITLE: Locale Links Implementation Example
DESCRIPTION: Shows how to implement language switcher navigation using the locale_links filter.

LANGUAGE: njk
CODE:
{% set locales = "/blog/" | locale_links %}
{% if locales.length %}
  This page is also available in
  {%- for locale in locales %}
    <a href="{{ locale.url }}" lang="{{ locale.lang }}" hreflang="{{ locale.lang }}">{{ locale.label }}</a>
  {%- endfor %}
{% endif %}

----------------------------------------

TITLE: Using Previous and Next Collection Item Filters in Liquid
DESCRIPTION: Examples of using getPreviousCollectionItem and getNextCollectionItem filters in Liquid templates to navigate between collection items. The page argument becomes optional in version 2.0.0-beta.1.

LANGUAGE: liquid
CODE:
{% assign previousPost = collections.posts | getPreviousCollectionItem: page %}
{% assign nextPost = collections.posts | getNextCollectionItem: page %}

{% assign previousPost = collections.posts | getPreviousCollectionItem %}
{% assign nextPost = collections.posts | getNextCollectionItem %}

----------------------------------------

TITLE: Asynchronous Filter Implementation
DESCRIPTION: Shows implementation of asynchronous filters that work universally across Liquid, Nunjucks, and JavaScript templates.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addFilter("myFilter", async function (value) {
		// do some Async work
		return value;
	});

	eleventyConfig.addAsyncFilter("myFilter", async function (value) {
		// do some Async work
		return value;
	});
};

----------------------------------------

TITLE: Configuring Custom Image Markup Shortcode in Eleventy
DESCRIPTION: This snippet shows how to create a custom image shortcode with manual markup generation in Eleventy. It uses the entities package for attribute escaping and creates custom HTML for the image.

LANGUAGE: javascript
CODE:
import { escapeAttribute } from "entities";
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("image", async function (src, alt) {
		if (alt === undefined) {
			// You bet we throw an error on missing alt (alt="" works okay)
			throw new Error(`Missing \`alt\` on myImage from: ${src}`);
		}

		let metadata = await Image(src, {
			widths: [600],
			formats: ["jpeg"],
		});

		let data = metadata.jpeg[metadata.jpeg.length - 1];
		return `<img src="${data.url}" width="${data.width}" height="${data.height}" alt="${escapeAttribute(alt)}" loading="lazy" decoding="async">`;
	});
};

----------------------------------------

TITLE: Retrieving Eleventy Output as JSON in Node.js
DESCRIPTION: This code snippet shows how to use Eleventy's Programmatic API to retrieve the output as JSON without writing to the file system. It uses the toJSON() method and logs the result to the console.

LANGUAGE: javascript
CODE:
const Eleventy = require("@11ty/eleventy");

async function elev() {
  let elev = new Eleventy();

  try {
    let json = await elev.toJSON();
    console.log( json );
  } catch(e) {
    console.log( "Error writing", e );
  }
}

elev();

----------------------------------------

TITLE: Using locale_url Filter in Templates
DESCRIPTION: Demonstrates how to use the locale_url filter to transform URLs based on the current page's locale.

LANGUAGE: njk
CODE:
{{ "/blog/" | locale_url }}
{{ "/en/blog/" | locale_url }}
{{ "/es/blog/" | locale_url }}

----------------------------------------

TITLE: Configuring Navigation Structure
DESCRIPTION: Examples of setting up navigation structure using YAML front matter in template files.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Mammals
---

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Humans
  parent: Mammals
  order: 1
---

----------------------------------------

TITLE: Running Eleventy with TypeScript Config File
DESCRIPTION: Command for running Eleventy using a TypeScript configuration file with tsx.

LANGUAGE: bash
CODE:
npx tsx ./node_modules/.bin/eleventy --config=eleventy.config.ts --formats=11ty.tsx

----------------------------------------

TITLE: WebC Layout with Asset Bundling
DESCRIPTION: Shows how to use WebC in an Eleventy layout file, including bundling of CSS and JavaScript assets.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>WebC Example</title>

		<!-- inline bundles -->
		<style @raw="getBundle('css')" webc:keep></style>
		<script @raw="getBundle('js')" webc:keep></script>

		<!-- or write your bundle to a file -->
		<link rel="stylesheet" :href="getBundleFileUrl('css')" webc:keep />
		<script :src="getBundleFileUrl('js')" webc:keep></script>
	</head>
	<body @raw="content"></body>
</html>

----------------------------------------

TITLE: Writing CSS Bundle to File System
DESCRIPTION: This example shows how to write a CSS bundle to the file system and use the resulting URL in an HTML link tag. This approach may be slower for first-time visitors but better for caching on repeat views.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="{% getBundleFileUrl "css" %}">

----------------------------------------

TITLE: Changing Input and Output Directories in Eleventy Programmatic API
DESCRIPTION: This code snippet shows how to specify custom input and output directories when using Eleventy's Programmatic API. It demonstrates setting the input directory to 'src' and the output directory to 'output'.

LANGUAGE: javascript
CODE:
const Eleventy = require("@11ty/eleventy");

async function elev() {
  let elev = new Eleventy("src", "output");

  await elev.write();
}

elev();

----------------------------------------

TITLE: RSS Feed Template for Eleventy
DESCRIPTION: Nunjucks template for generating an RSS feed. Includes metadata configuration and iterates over blog posts to create feed items.

LANGUAGE: html
CODE:
---json
{
  "permalink": "feed.xml",
  "eleventyExcludeFromCollections": true,
  "metadata": {
    "title": "My Blog about Boats",
    "description": "I am writing about my experiences as a naval navel-gazer.",
    "language": "en",
    "base": "https://example.com/",
    "author": {
      "name": "Boaty McBoatFace"
    }
  }
}
---
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="{{ metadata.base | addPathPrefixToFullUrl }}" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{{ metadata.title }}</title>
    <link>{{ metadata.base | addPathPrefixToFullUrl }}</link>
    <atom:link href="{{ permalink | htmlBaseUrl(metadata.base) }}" rel="self" type="application/rss+xml" />
    <description>{{ metadata.description }}</description>
    <language>{{ metadata.language or page.lang }}</language>
    {%- for post in collections.posts | reverse %}
    {%- set absolutePostUrl = post.url | htmlBaseUrl(metadata.base) %}
    <item>
      <title>{{ post.data.title }}</title>
      <link>{{ absolutePostUrl }}</link>
      <description>{{ post.content | renderTransforms(post.data.page, metadata.base) }}</description>
      <pubDate>{{ post.date | dateToRfc822 }}</pubDate>
      <dc:creator>{{ metadata.author.name }}</dc:creator>
      <guid>{{ absolutePostUrl }}</guid>
    </item>
    {%- endfor %}
  </channel>
</rss>

----------------------------------------

TITLE: Implementing JavaScript Front Matter in Nunjucks Templates
DESCRIPTION: Shows how to use JavaScript front matter in a Nunjucks template, including a function definition and usage.

LANGUAGE: html
CODE:
---js
const title = "My page title";

function currentDate() {
	return (new Date()).toLocaleString();
}
---

<h1>{{ title }}</h1>
<p>Published on {{ currentDate() }}</p>

----------------------------------------

TITLE: Adding Liquid Filters and Shortcodes
DESCRIPTION: Demonstrates adding custom filters and shortcodes to Liquid templates, including async support and multiple argument handling.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addLiquidFilter("concatThreeStrings", function(arg1, arg2, arg3) {
		return arg1 + arg2 + arg3;
	});
};

----------------------------------------

TITLE: Template Rendering Example with Content
DESCRIPTION: Example showing both renderTemplate and renderContent usage in a Nunjucks template with YAML front matter.

LANGUAGE: yaml
CODE:
---
myContent: "{{ 'Second' }}"
---
{% renderTemplate %}{{ myContent }}{% endrenderTemplate %} from renderTemplate
{{ myContent | renderContent("njk") }} from renderContent

----------------------------------------

TITLE: Defining User List in JSON for Eleventy Global Data
DESCRIPTION: This snippet shows how to create a simple JSON file for global data in Eleventy. It defines an array of user names that will be available to all templates under the 'userList' key.

LANGUAGE: json
CODE:
["user1", "user2"]

----------------------------------------

TITLE: Atom Feed Template for Eleventy
DESCRIPTION: Nunjucks template for generating an Atom feed. Includes metadata configuration and iterates over blog posts to create feed entries.

LANGUAGE: html
CODE:
---json
{
  "permalink": "feed.xml",
  "eleventyExcludeFromCollections": true,
  "metadata": {
    "title": "My Blog about Boats",
    "description": "I am writing about my experiences as a naval navel-gazer.",
    "language": "en",
    "base": "https://example.com/",
    "author": {
      "name": "Boaty McBoatFace"
    }
  }
}
---
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="{{ metadata.language or page.lang }}">
  <title>{{ metadata.title }}</title>
  <subtitle>{{ metadata.description }}</subtitle>
  <link href="{{ permalink | htmlBaseUrl(metadata.base) }}" rel="self" />
  <link href="{{ metadata.base | addPathPrefixToFullUrl }}" />
  <updated>{{ collections.posts | getNewestCollectionItemDate | dateToRfc3339 }}</updated>
  <id>{{ metadata.base | addPathPrefixToFullUrl }}</id>
  <author>
    <name>{{ metadata.author.name }}</name>
  </author>
  {%- for post in collections.posts | reverse %}
  {%- set absolutePostUrl %}{{ post.url | htmlBaseUrl(metadata.base) }}{% endset %}
  <entry>
    <title>{{ post.data.title }}</title>
    <link href="{{ absolutePostUrl }}" />
    <updated>{{ post.date | dateToRfc3339 }}</updated>
    <id>{{ absolutePostUrl }}</id>
    <content type="html">{{ post.content | renderTransforms(post.data.page, metadata.base) }}</content>
  </entry>
  {%- endfor %}
</feed>

----------------------------------------

TITLE: Configuring JavaScript Minification Filter in Eleventy
DESCRIPTION: Sets up a custom jsmin filter using Terser to minify JavaScript code. The filter handles errors gracefully by returning the original code if minification fails.

LANGUAGE: javascript
CODE:
import { minify } from "terser";

export default function (eleventyConfig) {
	eleventyConfig.addFilter("jsmin", async function (code, callback) {
		try {
			const minified = await minify(code);
			callback(null, minified.code);
		} catch (err) {
			console.error("Terser error: ", err);
			// Fail gracefully.
			callback(null, code);
		}
	});
};

----------------------------------------

TITLE: Using Promises in JavaScript Templates for Eleventy
DESCRIPTION: Shows how to use a Promise to return content asynchronously in an Eleventy JavaScript template.

LANGUAGE: javascript
CODE:
export default new Promise((resolve, reject) => {
	setTimeout(function () {
		resolve("<p>Zach</p>");
	}, 1000);
});

LANGUAGE: javascript
CODE:
module.exports = new Promise((resolve, reject) => {
	setTimeout(function () {
		resolve("<p>Zach</p>");
	}, 1000);
});

----------------------------------------

TITLE: Complete Pagination Navigation Template in Eleventy
DESCRIPTION: This snippet provides a complete pagination navigation template in Eleventy, including first, previous, next, and last links.

LANGUAGE: html
CODE:
<nav aria-labelledby="my-pagination">
  <h2 id="my-pagination">This is my Pagination</h2>
  <ol>
    {% if pagination.href.first != page.url %}<li><a href="{{ pagination.href.first }}">First</a></li>{% else %}<li>First</li>{% endif %}
    {% if pagination.href.previous %}<li><a href="{{ pagination.href.previous }}">Previous</a></li>{% else %}<li>Previous</li>{% endif %}
    {%- for pageEntry in pagination.pages %}
    <li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>Page {{ loop.index }}</a></li>
    {%- endfor %}
    {% if pagination.href.next %}<li><a href="{{ pagination.href.next }}">Next</a></li>{% else %}<li>Next</li>{% endif %}
    {% if pagination.href.last != page.url %}<li><a href="{{ pagination.href.last }}">Last</a></li>{% else %}<li>Last</li>{% endif %}
  </ol>
</nav>

LANGUAGE: javascript
CODE:
module.exports = function({ pagination, page }) {
  return `<nav aria-labelledby="my-pagination">
    <h2 id="my-pagination">This is my Pagination</h2>
    <ol>
      ${pagination.href.first !== page.url ? `<li><a href="${pagination.href.first}">First</a></li>` : '<li>First</li>'}
      ${pagination.href.previous ? `<li><a href="${pagination.href.previous}">Previous</a></li>` : '<li>Previous</li>'}
      ${pagination.pages.map((pageEntry, i) => `<li><a href="${pagination.hrefs[i]}"${page.url === pagination.hrefs[i] ? ' aria-current="page"' : ''}>Page ${i + 1}</a></li>`).join('')}
      ${pagination.href.next ? `<li><a href="${pagination.href.next}">Next</a></li>` : '<li>Next</li>'}
      ${pagination.href.last !== page.url ? `<li><a href="${pagination.href.last}">Last</a></li>` : '<li>Last</li>'}
    </ol>
  </nav>`;
};

----------------------------------------

TITLE: YAML Front Matter Configuration for Edge Plugin Documentation
DESCRIPTION: YAML front matter configuration for the Edge plugin documentation page, defining navigation properties and page settings.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  key: Edge
  parent: Retired Plugins
  excerpt: A plugin to run Eleventy in an Edge Function to add dynamic content to your Eleventy sites.
# communityLinksKey: edge
overrideCommunityLinks: true
excludeFromSidebar: true

----------------------------------------

TITLE: Accessing Global Data in Eleventy Templates
DESCRIPTION: This example demonstrates how the global data from a JSON file is structured and accessible in Eleventy templates. It shows the object structure for a 'userList' array defined in a global data file.

LANGUAGE: javascript
CODE:
{
	userList: ["user1", "user2"]
}

----------------------------------------

TITLE: Installing RSS Plugin for Eleventy
DESCRIPTION: Command to install the RSS plugin using npm. Requires Eleventy v3.0 or newer for v2 of the plugin.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-plugin-rss

----------------------------------------

TITLE: Adding Markdown-it Plugins in Eleventy
DESCRIPTION: Example of adding markdown-it plugins using the amendLibrary configuration method.

LANGUAGE: javascript
CODE:
const markdownItEmoji = require("markdown-it-emoji");

module.exports = function (eleventyConfig) {
	eleventyConfig.amendLibrary("md", (mdLib) => mdLib.use(markdownItEmoji));
};

----------------------------------------

TITLE: Adding Custom Data Extension with Options in Eleventy
DESCRIPTION: Shows how to add a custom data extension with additional options like parser function, read flag, and encoding in Eleventy's configuration.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// or with options (new in 2.0)
	eleventyConfig.addDataExtension("fileExtension", {
		parser: (contents, filePath) => ({}),

		// defaults are shown:
		read: true,
		encoding: "utf8",
	});
};

----------------------------------------

TITLE: Using htmlBaseUrl Filter
DESCRIPTION: Examples of using the htmlBaseUrl filter to transform individual URLs with base path modifications.

LANGUAGE: nunjucks
CODE:
{{ "/my-path/" | htmlBaseUrl }}
{{ "/my-path/" | htmlBaseUrl("https://example.com/") }}

----------------------------------------

TITLE: Adding Function-Based Global Data in Eleventy
DESCRIPTION: Illustrates how to use functions to generate dynamic global data values, including date objects and nested functions.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	eleventyConfig.addGlobalData("myDate", () => new Date());

	// myDate's value will be a Date instance
};

----------------------------------------

TITLE: Rendering CSS Bundles in HTML
DESCRIPTION: This snippet demonstrates how to fetch and render CSS bundle content directly on a page using the getBundle shortcode. It also shows that additional code can be added to the bundle after calling getBundle.

LANGUAGE: html
CODE:
<!-- Use this *anywhere*: a layout file, content template, etc -->
<style>{% getBundle "css" %}</style>

<!--
You can add more code to the bundle after calling
getBundle and it *will* be included.
-->
{% css %}
* { color: orange; }
{% endcss %}

----------------------------------------

TITLE: Syntax Highlighting with Diff in JavaScript
DESCRIPTION: Example of using the syntax highlighting plugin to show code changes with diff syntax in JavaScript.

LANGUAGE: javascript
CODE:
+function myFunction() {
   // …
-  return true;
 }

----------------------------------------

TITLE: Using Globs in Eleventy Passthrough Copy
DESCRIPTION: This snippet demonstrates how to use glob patterns in passthrough file copy to find and copy specific file types while maintaining directory structure.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Find and copy any `jpg` files, maintaining directory structure.
	eleventyConfig.addPassthroughCopy("**/*.jpg");
};

----------------------------------------

TITLE: Creating Class-based Templates in JavaScript for Eleventy
DESCRIPTION: Demonstrates how to use classes with a render method to create templates in Eleventy.

LANGUAGE: javascript
CODE:
class Test {
	// or `async render({name}) {`
	render({ name }) {
		return `<p>${name}</p>`;
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	// or `async render({name}) {`
	render({ name }) {
		return `<p>${name}</p>`;
	}
}

module.exports = Test;

----------------------------------------

TITLE: Adding Custom Liquid Filters for RSS Feed Generation
DESCRIPTION: JavaScript configuration to add custom Liquid filters for date formatting in RSS feeds.

LANGUAGE: javascript
CODE:
import pluginRss from "@11ty/eleventy-plugin-rss";

export default function (eleventyConfig) {
	eleventyConfig.addLiquidFilter("dateToRfc3339", pluginRss.dateToRfc3339);

	// New in RSS 1.2.0
	eleventyConfig.addLiquidFilter("dateToRfc822", pluginRss.dateToRfc822);
};

----------------------------------------

TITLE: Setting Layouts Directory Configuration
DESCRIPTION: Example of setting the layouts directory using the configuration API method setLayoutsDirectory().

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Order matters, put this at the top of your configuration file.
	// This is relative to your input directory!
  eleventyConfig.setLayoutsDirectory("_layouts");
};

----------------------------------------

TITLE: Installing Navigation Plugin
DESCRIPTION: Instructions for installing and configuring the eleventy-navigation plugin in an Eleventy project.

LANGUAGE: javascript
CODE:
import eleventyNavigationPlugin from "@11ty/eleventy-navigation";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(eleventyNavigationPlugin);
};

----------------------------------------

TITLE: Adding Sass Support to Eleventy
DESCRIPTION: Example configuration for processing .scss files and compiling them to CSS using the sass npm package.

LANGUAGE: javascript
CODE:
import sass from "sass";

export default function (eleventyConfig) {
	eleventyConfig.addTemplateFormats("scss");

	eleventyConfig.addExtension("scss", {
		outputFileExtension: "css",

		compile: async function (inputContent) {
			let result = sass.compileString(inputContent);

			return async (data) => {
				return result.css;
			};
		},
	});
};

----------------------------------------

TITLE: Configuring Default Front Matter Format in Eleventy
DESCRIPTION: Shows how to change the default front matter format project-wide in Eleventy.

LANGUAGE: javascript
CODE:
module.exports = function(eleventyConfig) {
  eleventyConfig.setFrontMatterParsingOptions({
    language: "yaml",
    engines: {
      yaml: {}
    }
  });
};

----------------------------------------

TITLE: Using TOML Front Matter in Markdown
DESCRIPTION: Example of using TOML syntax in document front matter with Eleventy

LANGUAGE: markdown
CODE:
---toml
title = "My page title using TOML"
---

<!doctype html>
<html>
…

----------------------------------------

TITLE: Configuring eleventy.beforeWatch Event in JavaScript
DESCRIPTION: Demonstrates how to set up the eleventy.beforeWatch event handler, which runs before a build during --watch or --serve modes.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Async-friendly
	eleventyConfig.on("eleventy.beforeWatch", async (changedFiles) => {
		// Run me before --watch or --serve re-runs
		// changedFiles is an array of files that changed
		// to trigger the watch/serve build
	});
};

----------------------------------------

TITLE: Configuring eleventy.beforeConfig Event in JavaScript
DESCRIPTION: Shows how to set up the eleventy.beforeConfig event handler, which runs before the configuration is initialized. Useful for async operations in sync configuration callbacks.

LANGUAGE: javascript
CODE:
// sync configuration callback
module.exports = function (eleventyConfig) {
	// async-friendly event
  eleventyConfig.on("eleventy.beforeConfig", async function (eleventyConfig) {
    const { HtmlBasePlugin } = await import("@11ty/eleventy");
		eleventyConfig.addPlugin(HtmlBasePlugin);
  });
};

----------------------------------------

TITLE: Importing Eleventy Plugins in CommonJS Configuration
DESCRIPTION: Shows how to import Eleventy bundled plugins in a CommonJS configuration file using dynamic import() instead of require(). This approach is necessary in Eleventy v3 due to limitations in Node.js.

LANGUAGE: javascript
CODE:
module.exports = async function (eleventyConfig) {
	const { I18nPlugin, RenderPlugin, HtmlBasePlugin } = await import("@11ty/eleventy");
	// …
};

----------------------------------------

TITLE: Using Arrow Functions in JavaScript Templates for Eleventy
DESCRIPTION: Demonstrates how to use arrow functions to create concise templates in Eleventy.

LANGUAGE: javascript
CODE:
export default ({ name }) => `<p>${name}</p>`;

LANGUAGE: javascript
CODE:
module.exports = ({ name }) => `<p>${name}</p>`;

----------------------------------------

TITLE: Running Eleventy with Incremental Builds
DESCRIPTION: Commands to run Eleventy with incremental builds, which only operate on changed files in subsequent builds. It also includes options for skipping the initial full build.

LANGUAGE: bash
CODE:
# *Repeat* builds only operate on files that have changed
npx @11ty/eleventy --watch --incremental
npx @11ty/eleventy --serve --incremental

# Skip the initial full build with `--ignore-initial`
npx @11ty/eleventy --serve --incremental --ignore-initial

# Pass in a template path, watch/serve not required
# Added in 3.0.0-alpha.14
npx @11ty/eleventy --incremental=myfile.md

----------------------------------------

TITLE: Adding Literal Global Data in Eleventy Config
DESCRIPTION: Demonstrates how to add static string values as global data in Eleventy configuration.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	// Values can be static:
	eleventyConfig.addGlobalData("myString", "myValue");
};

----------------------------------------

TITLE: Configuring eleventy.contentMap Event in JavaScript
DESCRIPTION: Shows how to set up the eleventy.contentMap event handler, which facilitates the i18n plugin but is available independently.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Async-friendly
	eleventyConfig.on("eleventy.contentMap", async ({ inputPathToUrl, urlToInputPath }) => {
		// inputPathToUrl is an object mapping input file paths to output URLs
		// urlToInputPath is an object mapping output URLs to input file paths
	});
};

----------------------------------------

TITLE: Using Event Arguments in Eleventy Configuration Events
DESCRIPTION: Demonstrates how to access and use the event arguments provided in the eleventy.before and eleventy.after events.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.on("eleventy.before", async ({ dir, runMode, outputMode }) => {
		// Read more below
	});

	eleventyConfig.on(
		"eleventy.after",
		async ({ dir, results, runMode, outputMode }) => {
			// Read more below
		}
	);
};

----------------------------------------

TITLE: Adding YAML Support in Eleventy Configuration
DESCRIPTION: Demonstrates how to add support for YAML data files using the js-yaml package in Eleventy's configuration.

LANGUAGE: javascript
CODE:
import yaml from "js-yaml";

export default function (eleventyConfig) {
	eleventyConfig.addDataExtension("yaml", (contents) => yaml.load(contents));
};

----------------------------------------

TITLE: Setting Permalinks in Class-based Templates for Eleventy
DESCRIPTION: Demonstrates how to set permalinks using the data method in class-based templates.

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			// Writes to "/my-permalink/index.html"
			permalink: "/my-permalink/",
		};
	}

	render(data) {
		/* … */
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			// Writes to "/my-permalink/index.html"
			permalink: "/my-permalink/",
		};
	}

	render(data) {
		/* … */
	}
}

module.exports = Test;

----------------------------------------

TITLE: Configuring Nested Global Data Paths in Eleventy
DESCRIPTION: Shows how to use lodash-set compatible paths to create nested global data objects.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	eleventyConfig.addGlobalData("myNestedObject.myString", "myValue");
};

----------------------------------------

TITLE: Using log Filter in Liquid Templates
DESCRIPTION: Demonstrates how to use the log filter in Liquid templates to log a string to the console.

LANGUAGE: liquid
CODE:
{{ "My Title" | log }}

----------------------------------------

TITLE: Configuring eleventy.after Event in JavaScript
DESCRIPTION: Shows how to set up the eleventy.after event handler in the Eleventy configuration file. This event runs after each build finishes.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Async-friendly in 1.0+
	// Arguments added in 2.0+
	eleventyConfig.on(
		"eleventy.after",
		async ({ dir, results, runMode, outputMode }) => {
			// Run me after the build ends
		}
	);
};

----------------------------------------

TITLE: Basic Blog Post Tag Example in YAML
DESCRIPTION: Shows how to add a single 'post' tag to a blog post in front matter to create a collection

LANGUAGE: yaml
CODE:
---
tags: post
title: Hot Take—Social Media is Considered Harmful
---

----------------------------------------

TITLE: Using Filters in Permalink Functions for Eleventy
DESCRIPTION: Demonstrates how to use Eleventy filters within permalink functions in class-based templates.

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			title: "This is my blog post title",
			// Writes to "/this-is-my-blog-post-title/index.html"
			permalink: function (data) {
				return `/${this.slug(data.title)}/`;
			},
		};
	}

	render(data) {
		/* … */
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			title: "This is my blog post title",
			// Writes to "/this-is-my-blog-post-title/index.html"
			permalink: function (data) {
				return `/${this.slug(data.title)}/`;
			},
		};
	}

	render(data) {
		/* … */
	}
}

module.exports = Test;

----------------------------------------

TITLE: Using Asynchronous JavaScript Template Functions in Eleventy Templates
DESCRIPTION: Shows how to use asynchronous JavaScript template functions within an Eleventy JavaScript template.

LANGUAGE: javascript
CODE:
export default async function (data) {
	return `<h1>${await this.myAsyncFunction(data.a, data.b)}</h1>`;
};

LANGUAGE: javascript
CODE:
module.exports = async function (data) {
	return `<h1>${await this.myAsyncFunction(data.a, data.b)}</h1>`;
};

----------------------------------------

TITLE: Accessing Nested Global Data in Eleventy Templates
DESCRIPTION: This snippet illustrates how global data is structured when the data file is placed in a subfolder. It shows how the folder name becomes part of the object structure in templates.

LANGUAGE: javascript
CODE:
{
	users: {
		userList: ["user1", "user2"]
	}
}

----------------------------------------

TITLE: Configuring Image Shortcode with generateHTML in Eleventy
DESCRIPTION: This snippet demonstrates how to configure an image shortcode using Image.generateHTML in Eleventy. It generates image metadata and creates HTML markup separately.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("image", async function (src, alt) {
		let metadata = await Image(src, {
			widths: [600],
			formats: ["jpeg"],
		});

		return Image.generateHTML(metadata, {
			alt, // required
		});
	});
};

----------------------------------------

TITLE: Configuring eleventy.before Event in JavaScript
DESCRIPTION: Demonstrates how to set up the eleventy.before event handler in the Eleventy configuration file. This event runs before each build starts.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Async-friendly in 1.0+
	// Arguments added in 2.0+
	eleventyConfig.on("eleventy.before", async ({ dir, runMode, outputMode }) => {
		// Run me before the build starts
	});
}

----------------------------------------

TITLE: Advanced EJS Plugin Configuration with Custom Options
DESCRIPTION: Extended configuration for EJS plugin with custom delimiter and library override options. Demonstrates how to customize EJS behavior in Eleventy.

LANGUAGE: javascript
CODE:
import ejs from "ejs";
import ejsPlugin from "@11ty/eleventy-plugin-ejs";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(ejsPlugin, {
		async: false, // default

		// use <? ?> instead of <% %>
		delimiter: "?",

		// Override the `ejs` library instance
		eleventyLibraryOverride: ejs,
	});
}

----------------------------------------

TITLE: Using Destructuring in Function-based Templates for Eleventy
DESCRIPTION: Shows how to use destructuring syntax in function-based templates for easier access to data properties.

LANGUAGE: javascript
CODE:
export default function ({ name }) {
	return `<p>${name}</p>`;
};

LANGUAGE: javascript
CODE:
module.exports = function ({ name }) {
	return `<p>${name}</p>`;
};

----------------------------------------

TITLE: Setting Content Date in YAML Front Matter
DESCRIPTION: Examples of setting the 'date' key in YAML front matter to override the default date for content sorting.

LANGUAGE: markdown
CODE:
---
date: 2016-01-01
---

LANGUAGE: markdown
CODE:
---
date: Last Modified
---

----------------------------------------

TITLE: Using Function to Return Data in Eleventy JavaScript Data File
DESCRIPTION: Shows how to use a function to return data in an Eleventy JavaScript data file. This allows for more complex data generation.

LANGUAGE: javascript
CODE:
export default function () {
	return ["user1", "user2"];
}

----------------------------------------

TITLE: Setting Custom Liquid Options
DESCRIPTION: Configures Liquid template engine with custom options for dynamic partials and strict filters.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.setLiquidOptions({
		dynamicPartials: false,
		strictFilters: false,
	});
};

----------------------------------------

TITLE: Configuring Eleventy WebC and Image Plugins
DESCRIPTION: Configuration setup for enabling WebC components and Image plugin with global default settings for formats, URL paths, and image attributes.

LANGUAGE: javascript
CODE:
import eleventyWebcPlugin from "@11ty/eleventy-plugin-webc";
import { eleventyImagePlugin } from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(eleventyWebcPlugin, {
		components: [
			// …
			// Add as a global WebC component
			"npm:@11ty/eleventy-img/*.webc",
		],
	});

	// Image plugin
	eleventyConfig.addPlugin(eleventyImagePlugin, {
		// Set global default options
		formats: ["webp", "jpeg"],
		urlPath: "/img/",

		// Notably `outputDir` is resolved automatically
		// to the project output directory

		defaultAttributes: {
			loading: "lazy",
			decoding: "async",
		},
	});
};

----------------------------------------

TITLE: Using Template Literals in JavaScript for Eleventy
DESCRIPTION: Shows how to use template literals to create multi-line content in an Eleventy JavaScript template.

LANGUAGE: javascript
CODE:
export default `<p>These can
span
multiple
lines!</p>`;

LANGUAGE: javascript
CODE:
module.exports = `<p>These can
span
multiple
lines!</p>`;

----------------------------------------

TITLE: Adding JavaScript Template Functions in Eleventy Configuration
DESCRIPTION: Demonstrates how to add custom JavaScript template functions in the Eleventy configuration file.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  eleventyConfig.addJavaScriptFunction("myFunction", function(a, b) { /* … */ });
};

LANGUAGE: javascript
CODE:
module.exports = function(eleventyConfig) {
  eleventyConfig.addJavaScriptFunction("myFunction", function(a, b) { /* … */ });
};

----------------------------------------

TITLE: Configuring Advanced Eleventy Dev Server Options
DESCRIPTION: Demonstrates advanced server configuration options including script injection folder naming and port reassignment settings.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setServerOptions({
		// Change the name of the folder name used for injected scripts
		injectedScriptsFolder: ".11ty",

		// Number of times to increment a port is already in use
		portReassignmentRetryCount: 10,

		// Alias for backwards compatibility, renamed to `injectedScriptsFolder` in Dev Server 1.0+
		folder: ".11ty",

		// Alias for backwards compatibility, renamed to `liveReload` in Dev Server 1.0+
		enabled: true,

		// Alias for backwards compatibility, renamed to `domDiff` in Dev Server 1.0+
		domdiff: true,
	});
};

----------------------------------------

TITLE: Configuring Eleventy Pug Plugin
DESCRIPTION: JavaScript code to add the Pug plugin to Eleventy configuration. This is necessary to enable Pug template processing in Eleventy.

LANGUAGE: javascript
CODE:
import pugPlugin from "@11ty/eleventy-plugin-pug";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(pugPlugin);
}

----------------------------------------

TITLE: Advanced Plugin Configuration with Options
DESCRIPTION: Extended configuration showing customization options including column display and file size warning threshold settings.

LANGUAGE: javascript
CODE:
import dirOutputPlugin from "@11ty/eleventy-plugin-directory-output";

export default function (eleventyConfig) {
	eleventyConfig.setQuietMode(true);
	eleventyConfig.addPlugin(dirOutputPlugin, {
		// Customize columns
		columns: {
			filesize: true, // Use `false` to disable
			benchmark: true, // Use `false` to disable
		},

		// Will show in yellow if greater than this number of bytes
		warningFileSize: 400 * 1000,
	});
};

----------------------------------------

TITLE: Importing and Using Local Plugin in Eleventy Config
DESCRIPTION: Shows how to import and add a local plugin to the Eleventy configuration using the addPlugin method. This code goes in the main eleventy.config.js file.

LANGUAGE: javascript
CODE:
import localPlugin from "./config/local-plugin.js";

export default function(eleventyConfig) {
	eleventyConfig.addPlugin(localPlugin);
}

----------------------------------------

TITLE: Using log Filter in Nunjucks Templates
DESCRIPTION: Shows the usage of the log filter in Nunjucks templates to log a string to the console.

LANGUAGE: jinja2
CODE:
{{ "My Title" | log }}

----------------------------------------

TITLE: Generating Navigation HTML with Eleventy
DESCRIPTION: This Nunjucks template code generates an HTML navigation structure for Eleventy Projects. It uses the eleventyNavigation and eleventyNavigationToHtml filters to create a table of contents with excerpts.

LANGUAGE: nunjucks
CODE:
{{ collections.all | eleventyNavigation("Eleventy Projects") | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}

----------------------------------------

TITLE: Using Permalink Functions in Class-based Templates for Eleventy
DESCRIPTION: Shows how to use functions to dynamically generate permalinks in class-based templates.

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			key: "hello",
			// Writes to "/my-permalink/hello/index.html"
			permalink: (data) => `/my-permalink/${data.key}/`,
		};
	}

	render(data) {
		/* … */
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	data() {
		return {
			key: "hello",
			// Writes to "/my-permalink/hello/index.html"
			permalink: (data) => `/my-permalink/${data.key}/`,
		};
	}

	render(data) {
		/* … */
	}
}

module.exports = Test;

----------------------------------------

TITLE: Paginating an Array in Eleventy
DESCRIPTION: Demonstrates how to paginate an array in Eleventy using different template languages. The example creates two pages, each displaying two items from the 'testdata' array.

LANGUAGE: liquid
CODE:
---
pagination:
  data: testdata
  size: 2
testdata:
  - item1
  - item2
  - item3
  - item4
---

<ol>
{% for item in pagination.items %}
  <li>{{ item }}</li>
{% endfor %}
</ol>

<p>Current page: {{ pagination.pageNumber }}</p>

LANGUAGE: nunjucks
CODE:
---
pagination:
  data: testdata
  size: 2
testdata:
  - item1
  - item2
  - item3
  - item4
---

<ol>
{% for item in pagination.items %}
  <li>{{ item }}</li>
{% endfor %}
</ol>

<p>Current page: {{ pagination.pageNumber }}</p>

LANGUAGE: javascript
CODE:
module.exports = {
  pagination: {
    data: "testdata",
    size: 2
  },
  testdata: ["item1", "item2", "item3", "item4"],
  render(data) {
    return `<ol>
      ${data.pagination.items.map(item => `<li>${item}</li>`).join("\n      ")}
    </ol>
    
    <p>Current page: ${data.pagination.pageNumber}</p>`;
  }
};

----------------------------------------

TITLE: Creating Local Plugin in Eleventy
DESCRIPTION: Demonstrates how to create a local plugin file that can contain configuration code moved from the main eleventy.config.js file. The plugin exports a function that receives the eleventyConfig object as a parameter.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Move any code from `eleventy.config.js` here.
	// Use eleventyConfig as you would in your top-level config file
}

----------------------------------------

TITLE: Creating Template for Dynamic Page Generation
DESCRIPTION: Markdown template using Eleventy pagination to generate individual pages for each possum. Uses frontmatter configuration for pagination and dynamic permalinks.

LANGUAGE: markdown
CODE:
---
pagination:
  data: possums
  size: 1
  alias: possum
permalink: "possums/{{ possum.name | slugify }}/"
---

{{ possum.name }} is {{ possum.age }} years old

----------------------------------------

TITLE: Using log Filter in CommonJS Templates
DESCRIPTION: Demonstrates the use of the log filter in CommonJS templates, similar to the JavaScript example.

LANGUAGE: javascript
CODE:
module.exports = function (data) {
	// Caveat: you have access to `console.log` here, so probably use that.
	return this.log("My Title");
};

----------------------------------------

TITLE: Basic Front Matter Structure in Markdown
DESCRIPTION: Example of basic front matter structure in a markdown file that will be used with computed data.

LANGUAGE: markdown
CODE:
---
title: My Page Title
parent: My Parent Key
---

----------------------------------------

TITLE: Using Data Methods in Class-based Templates for Eleventy
DESCRIPTION: Shows how to use data methods in class-based templates to provide front matter-like data.

LANGUAGE: javascript
CODE:
class Test {
	// or `async data() {`
	// or `get data() {`
	data() {
		return {
			name: "Ted",
			layout: "teds-rad-layout",
			// … other front matter keys
		};
	}

	render({ name }) {
		// will always be "Ted"
		return `<p>${name}</p>`;
	}
}

export default Test;

LANGUAGE: javascript
CODE:
class Test {
	// or `async data() {`
	// or `get data() {`
	data() {
		return {
			name: "Ted",
			layout: "teds-rad-layout",
			// … other front matter keys
		};
	}

	render({ name }) {
		// will always be "Ted"
		return `<p>${name}</p>`;
	}
}

module.exports = Test;

----------------------------------------

TITLE: Advanced Vite Plugin Configuration with Options
DESCRIPTION: Shows the complete configuration options available for the Vite plugin, including server options, build settings, and path resolution aliases.

LANGUAGE: javascript
CODE:
import EleventyVitePlugin from "@11ty/eleventy-plugin-vite";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(EleventyVitePlugin, {
    tempFolderName: ".11ty-vite", // Default name of the temp folder

    // Options passed to the Eleventy Dev Server
    // e.g. domdiff, enabled, etc.

    // Added in Vite plugin v2.0.0
    serverOptions: {},

    // Defaults are shown:
    viteOptions: {
      clearScreen: false,
      appType: "mpa", // New in v2.0.0

      server: {
        mode: "development",
        middlewareMode: true,
      },

      build: {
        mode: "production",
      },

      // New in v2.0.0
      resolve: {
        alias: {
          // Allow references to `node_modules` folder directly
          "/node_modules": path.resolve(".", "node_modules"),
        },
      },
    },
  });
};

----------------------------------------

TITLE: Overriding Browsersync Server Options in Eleventy
DESCRIPTION: This snippet demonstrates how to change or override the default Browsersync configuration in Eleventy. It sets the 'notify' option to true, enabling Browsersync notifications.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setBrowserSyncConfig({
		notify: true,
	});
};

----------------------------------------

TITLE: WebC Image Component Usage Examples
DESCRIPTION: Examples of using the eleventy-image WebC component in templates, including basic usage, width specifications, format overrides, and custom path configurations.

LANGUAGE: html
CODE:
<img webc:is="eleventy-image" src="cat.jpg" alt="photo of my tabby cat">

LANGUAGE: html
CODE:
<eleventy-image src="cat.jpg" alt="photo of my tabby cat"></eleventy-image>

LANGUAGE: html
CODE:
<img webc:is="eleventy-image" width="100, 200" src="cat.jpg" alt="photo of my tabby cat">
<img webc:is="eleventy-image" :width="[100, 200]" src="cat.jpg" alt="photo of my tabby cat">

LANGUAGE: html
CODE:
<img webc:is="eleventy-image" formats="avif, png" src="cat.jpg" alt="photo of my tabby cat">
<img webc:is="eleventy-image" :formats="['avif', 'png']" src="cat.jpg" alt="photo of my tabby cat">

LANGUAGE: html
CODE:
<img webc:is="eleventy-image" url-path="/some-dir/" output-dir="_site/some-dir/" src="cat.jpg" alt="photo of my tabby cat">

----------------------------------------

TITLE: Configuring Eleventy Upgrade Helper Plugin
DESCRIPTION: JavaScript configuration code for adding the Upgrade Helper plugin to your Eleventy configuration file. The plugin should be added last in the configuration.

LANGUAGE: javascript
CODE:
import UpgradeHelper from "@11ty/eleventy-upgrade-help";

export default function (eleventyConfig) {
	// If you have other `addPlugin` calls, it's important that UpgradeHelper is added last.
	eleventyConfig.addPlugin(UpgradeHelper);
};

----------------------------------------

TITLE: Filtering Collections with getAll().filter() in Eleventy
DESCRIPTION: Demonstrates how to use Array.filter() with getAll() to create a filtered collection based on custom criteria. This example filters items based on the existence of a custom data key.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Filter using `Array.filter`
	eleventyConfig.addCollection("keyMustExistInData", function (collectionsApi) {
		return collectionsApi.getAll().filter(function (item) {
			// Side-step tags and do your own filtering
			return "myCustomDataKey" in item.data;
		});
	});
};

----------------------------------------

TITLE: Basic Vite Plugin Configuration for Eleventy
DESCRIPTION: Demonstrates the minimal setup required to add the Vite plugin to an Eleventy configuration file.

LANGUAGE: javascript
CODE:
import EleventyVitePlugin from "@11ty/eleventy-plugin-vite";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(EleventyVitePlugin);
};

----------------------------------------

TITLE: Opting Out of Browsersync JavaScript Snippet in Eleventy
DESCRIPTION: This code snippet shows how to opt-out of the JavaScript snippet normally injected by Browsersync in Eleventy. It disables Browsersync live-reloading by setting the 'snippet' option to false.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setBrowserSyncConfig({
		snippet: false,
	});
};

----------------------------------------

TITLE: Merged Data Output in JSON
DESCRIPTION: Resulting merged data structure after the Data Cascade combines template and layout data, demonstrating how conflicts are resolved and arrays are merged.

LANGUAGE: json
CODE:
{
	"title": "This is a Good Blog Post",
	"author": "Zach",
	"tags": ["CSS", "HTML", "JavaScript"],
	"layout": "my-layout.njk"
}

----------------------------------------

TITLE: Creating JSON File for Eleventy Community Plugin Submission
DESCRIPTION: This JSON structure is used to submit information about an Eleventy community plugin. It includes fields for the npm package name, author's Twitter username, and a description of the plugin.

LANGUAGE: json
CODE:
{
	"npm": "the npm package name of your plugin",
	"author": "Your Twitter username",
	"description": "A description of the plugin"
}

----------------------------------------

TITLE: Creating Previous/Next Navigation Links in Templates
DESCRIPTION: Example of creating navigation links to previous and next posts using the collection item filters, demonstrating how to access and display the URL and title of adjacent posts.

LANGUAGE: liquid
CODE:
{% if previousPost %}Previous Blog Post: <a href="{{ previousPost.url }}">{{ previousPost.data.title }}</a>{% endif %}
{% if nextPost %}Next Blog Post: <a href="{{ nextPost.url }}">{{ nextPost.data.title }}</a>{% endif %}

----------------------------------------

TITLE: Basic Handlebars Plugin Configuration
DESCRIPTION: Basic configuration to add Handlebars plugin to Eleventy using ESM syntax.

LANGUAGE: javascript
CODE:
import handlebarsPlugin from "@11ty/eleventy-plugin-handlebars";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(handlebarsPlugin);
}

----------------------------------------

TITLE: Layout Data Structure in YAML
DESCRIPTION: Example of front matter data structure in a layout template showing title, author and tags configuration.

LANGUAGE: yaml
CODE:
---
title: This is a Very Good Blog Post
author: Zach
tags:
  - JavaScript
---

----------------------------------------

TITLE: Generating Blog List with Nunjucks in Eleventy
DESCRIPTION: This snippet uses Nunjucks templating to generate a list of blog posts from the 'blog' collection. It formats dates and highlights certain posts.

LANGUAGE: nunjucks
CODE:
{% for news in collections.blog | reverse %}
- <small><code>{{ news.date | newsDate("LLL yyyy") }}</code></small> [{% if news.data.blogHighlight %}<strong class="blog-lrg">{% endif %}{{ news.data.newstitle }}{% if news.data.blogHighlight %}</strong>{% endif %}]({{ news.url }})
{%- endfor %}

----------------------------------------

TITLE: Using addPathPrefixToFullUrl Filter
DESCRIPTION: Example of using addPathPrefixToFullUrl filter to force addition of path prefix to URLs.

LANGUAGE: nunjucks
CODE:
{{ "https://example.com/" | addPathPrefixToFullUrl }}

----------------------------------------

TITLE: Configuring JSX with esbuild-register in Eleventy
DESCRIPTION: Alternative configuration using esbuild-register for CommonJS and Eleventy 2.0 compatibility.

LANGUAGE: javascript
CODE:
const { register } = require("esbuild-register/dist/node");

register();

module.exports = function(eleventyConfig) {
	// We can add support for TypeScript too, at the same time:
	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
	});
};

----------------------------------------

TITLE: Disabling Extensionless Layouts in Eleventy
DESCRIPTION: Shows how to use the Configuration API to disable extensionless layout resolution for improved performance and clarity.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setLayoutResolution(false);
};

----------------------------------------

TITLE: Configuring Data Deep Merge in Eleventy
DESCRIPTION: Configuration code showing how to enable or disable data deep merge functionality in Eleventy. Defaults to true in version 1.0 but can be opted out.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// defaults to true in 1.0, use false to opt-out
	eleventyConfig.setDataDeepMerge(false);

	// requires opt-in for 0.x
	eleventyConfig.setDataDeepMerge(true);
};

----------------------------------------

TITLE: Using getFilteredByTags() Method in Eleventy Collections API
DESCRIPTION: Demonstrates the use of getFilteredByTags() to create a collection filtered by multiple tags. This example creates a collection of items tagged with 'post', 'travel', and 'photo'.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Get only content that matches a tag
	eleventyConfig.addCollection(
		"myTravelPostsWithPhotos",
		function (collectionsApi) {
			return collectionsApi.getFilteredByTags("post", "travel", "photo");
		}
	);
};

----------------------------------------

TITLE: Using getCollectionItemIndex Filter
DESCRIPTION: Examples of using the getCollectionItemIndex filter to get the zero-based index of the current page in a collection. Shows both implicit and explicit page parameter usage.

LANGUAGE: liquid
CODE:
{% assign index = collections.posts | getCollectionItemIndex %}

Or pass it in:
{% assign index = collections.posts | getCollectionItemIndex: page %}

----------------------------------------

TITLE: Caching Remote Image with Eleventy Fetch
DESCRIPTION: Example of using Eleventy Fetch to cache a remote image as a buffer. This can be used as input for image processing plugins like sharp.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

let url = "https://www.zachleat.com/img/avatar-2017-big.png";
let imageBuffer = await Fetch(url, {
	duration: "1d",
	type: "buffer",
});
// Use imageBuffer as an input to the `sharp` plugin, for example

// (Example truncated)

----------------------------------------

TITLE: Configuring Eleventy Syntax Highlighting Plugin in JavaScript
DESCRIPTION: Basic configuration for adding the syntax highlighting plugin to Eleventy config file.

LANGUAGE: javascript
CODE:
import syntaxHighlight from "@11ty/eleventy-plugin-syntaxhighlight";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(syntaxHighlight);
};

----------------------------------------

TITLE: Advanced Passthrough Copy Options in Eleventy
DESCRIPTION: This snippet shows how to use advanced options with passthrough copy, such as expanding symbolic links and enabling debug logging.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addPassthroughCopy("img", {
		expand: true, // expand symbolic links
	});

	eleventyConfig.addPassthroughCopy({ img: "subfolder/img" }, {
		debug: true, // log debug information
	});
};

----------------------------------------

TITLE: Deep Merge Data Structure
DESCRIPTION: Example JSON showing the resulting data structure when deep merge is enabled, demonstrating merged arrays and nested objects.

LANGUAGE: json
CODE:
{
	"title": "This is a Good Blog Post",
	"author": "Zach",
	"tags": ["CSS", "HTML", "JavaScript"],
	"eleventyNavigation": {
		"key": "my-key",
		"parent": "test"
	}
}

----------------------------------------

TITLE: Adding Asynchronous JavaScript Template Functions in Eleventy
DESCRIPTION: Demonstrates how to add and use asynchronous JavaScript template functions in Eleventy.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  eleventyConfig.addJavaScriptFunction("myAsyncFunction", async function(a, b) { /* … */ });
};

LANGUAGE: javascript
CODE:
module.exports = function(eleventyConfig) {
  eleventyConfig.addJavaScriptFunction("myAsyncFunction", async function(a, b) { /* … */ });
};

----------------------------------------

TITLE: Sample Console Output
DESCRIPTION: Example of the formatted console output showing directory structure, file sizes, and build times.

LANGUAGE: bash
CODE:
> eleventy-base-blog@6.0.0 build
> eleventy

↘ _site/                               --                           --       --
  → about/index.html                   about/index.md            1.8kB    2.7ms
  ↘ feed/                              --                           --       --
    • .htaccess                        feed/htaccess.njk         0.1kB    0.2ms
    • feed.json                        feed/json.njk           106.8kB   17.3ms
    • feed.xml                         feed/feed.njk           109.8kB    9.8ms
  → page-list/index.html               page-list.njk             3.2kB    1.1ms
  ↘ posts/                             --                           --       --
    → firstpost/index.html             posts/firstpost.md        3.5kB    1.0ms
    → fourthpost/index.html            posts/fourthpost.md     101.0kB   27.2ms
    → secondpost/index.html            posts/secondpost.md       3.2kB    5.6ms
    → thirdpost/index.html             posts/thirdpost.md        4.5kB    7.5ms
    • index.html                       archive.njk               3.0kB   13.7ms
  ↘ tags/                              --                           --       --
    → another-tag/index.html           tags.njk                  2.1kB    0.9ms
    → number-2/index.html              tags.njk                  2.1kB    0.4ms
    → posts-with-two-tags/index.html   tags.njk                  2.3kB    0.2ms
    → second-tag/index.html            tags.njk                  2.5kB    0.5ms
    • index.html                       tags-list.njk             2.0kB    0.4ms
  • 404.html                           404.md                    1.9kB    0.4ms
  • index.html                         index.njk                 2.8kB    1.7ms
  • sitemap.xml                        sitemap.xml.njk           1.4kB    1.3ms
[11ty] Copied 3 files / Wrote 18 files in 0.16 seconds (8.9ms each, v1.0.1)

----------------------------------------

TITLE: Using inputPathToUrl Filter in Nunjucks Templates
DESCRIPTION: Shows the implementation of the inputPathToUrl filter in Nunjucks templates for converting file paths to URLs.

LANGUAGE: jinja2
CODE:
<a href="{{ "index.md" | inputPathToUrl }}">Home</a>

----------------------------------------

TITLE: Creating Basic Pagination Navigation in Eleventy
DESCRIPTION: This snippet demonstrates how to create a basic, accessible pagination navigation structure in Eleventy using different template languages.

LANGUAGE: liquid
CODE:
<nav aria-labelledby="my-pagination">
  <h2 id="my-pagination">This is my Pagination</h2>
  <ol>
    {% for pageEntry in pagination.pages %}
    <li><a href="{{ pagination.hrefs[forloop.index0] }}"{% if page.url == pagination.hrefs[forloop.index0] %} aria-current="page"{% endif %}>Page {{ forloop.index }}</a></li>
    {% endfor %}
  </ol>
</nav>

LANGUAGE: html
CODE:
<nav aria-labelledby="my-pagination">
  <h2 id="my-pagination">This is my Pagination</h2>
  <ol>
    {% for pageEntry in pagination.pages %}
    <li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>Page {{ loop.index }}</a></li>
    {% endfor %}
  </ol>
</nav>

LANGUAGE: javascript
CODE:
module.exports = function({ pagination, page }) {
  return `<nav aria-labelledby="my-pagination">
    <h2 id="my-pagination">This is my Pagination</h2>
    <ol>
      ${pagination.pages.map((pageEntry, i) => `<li><a href="${pagination.hrefs[i]}"${page.url === pagination.hrefs[i] ? ' aria-current="page"' : ''}>Page ${i + 1}</a></li>`).join('')}
    </ol>
  </nav>`;
};

----------------------------------------

TITLE: Override Tags Example
DESCRIPTION: Example of using the override prefix to opt-out of tag inheritance in a markdown file.

LANGUAGE: markdown
CODE:
---
override:tags: []
---

----------------------------------------

TITLE: Configuring Nunjucks Environment Options in Eleventy
DESCRIPTION: Example of setting custom Nunjucks environment options using Eleventy's configuration API, including options like throwOnUndefined and autoescape.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.setNunjucksEnvironmentOptions({
		throwOnUndefined: true,
		autoescape: false, // warning: don't do this!
	});
};

----------------------------------------

TITLE: Paginating a Collection in Eleventy
DESCRIPTION: Shows how to paginate a collection, such as blog posts, in Eleventy.

LANGUAGE: nunjucks
CODE:
---
pagination:
  data: collections.post
  size: 6
  alias: posts
---

<ol>
{% for post in posts %}
  <li><a href="{{ post.url }}">{{ post.data.title }}</a></li>
{% endfor %}
</ol>

----------------------------------------

TITLE: Sample CSS File
DESCRIPTION: Example CSS file to demonstrate minification process.

LANGUAGE: css
CODE:
body {
	font-family: fantasy;
}

----------------------------------------

TITLE: Using log Filter in Nunjucks Filter Chains
DESCRIPTION: Demonstrates the use of the log filter within a filter chain in Nunjucks templates, logging the intermediate value.

LANGUAGE: jinja2
CODE:
{{ "My Title" | log | upper }}

This is the same as:
{% set temp = "My Title" %}
{{ temp | log }}
{{ temp | upper }}

----------------------------------------

TITLE: Configuring Chokidar Options
DESCRIPTION: Shows how to configure advanced options for the Chokidar file watcher, including polling settings for WSL compatibility.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setChokidarConfig({
		usePolling: true,
		interval: 500,
	});
};

----------------------------------------

TITLE: Configuring URL Transforms for Trailing Slashes
DESCRIPTION: JavaScript configuration to remove trailing slashes from URLs globally in an Eleventy project.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Set global permalinks to resource.html style
	eleventyConfig.addGlobalData("permalink", () => {
		return (data) =>
			`${data.page.filePathStem}.${data.page.outputFileExtension}`;
	});

	// Remove .html from `page.url` entries
	eleventyConfig.addUrlTransform((page) => {
		if (page.url.endsWith(".html")) {
			return page.url.slice(0, -1 * ".html".length);
		}
	});
};

----------------------------------------

TITLE: Dynamic Permalink Generation in Directory Data File
DESCRIPTION: JavaScript code for a directory data file to dynamically generate permalinks based on content frontmatter.

LANGUAGE: javascript
CODE:
export default {
	permalink: function ({ title }) {
		return `/recipes/${this.slugify(title)}`;
	},
};

----------------------------------------

TITLE: Using getFilteredByTag() Method in Eleventy Collections API
DESCRIPTION: Shows how to use getFilteredByTag() to create a collection filtered by a specific tag. This example creates a collection of all items tagged as 'post'.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Get only content that matches a tag
	eleventyConfig.addCollection("myPosts", function (collectionsApi) {
		return collectionsApi.getFilteredByTag("post");
	});
};

----------------------------------------

TITLE: Using log Filter in Liquid Filter Chains
DESCRIPTION: Shows how to use the log filter within a filter chain in Liquid templates, logging the intermediate value.

LANGUAGE: liquid
CODE:
{{ "My Title" | log | upcase }}

This is the same as:
{% assign temp = "My Title" %}
{{ temp | log }}
{{ temp | upcase }}

----------------------------------------

TITLE: Setting Watch Throttle Wait Time
DESCRIPTION: Demonstrates how to add a delay before Eleventy triggers a rebuild after file changes are detected during watch mode.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// default is 0
	eleventyConfig.setWatchThrottleWaitTime(100); // in milliseconds
};

----------------------------------------

TITLE: URL Transform for Internationalization
DESCRIPTION: Configuration to modify page URLs for internationalized content, mapping multiple files to a single URL.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addUrlTransform(({ url }) => {
		// `url` is guaranteed to be a string here even if you're using `permalink: false`
		if (url.match(/\.[a-z]{2}\.html$/i)) {
			return url.slice(0, -1 * ".en.html".length) + "/";
		}

		// Returning undefined skips the url transform.
	});
};

----------------------------------------

TITLE: Using Eleventy Image with In-Memory Cache
DESCRIPTION: Demonstrates how the in-memory cache works with Eleventy Image for improved build performance.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";

let stats1 = Image("./test/bio-2017.jpg");
let stats2 = Image("./test/bio-2017.jpg");

console.assert(stats1 === stats2, "The same promise");

----------------------------------------

TITLE: Configuring CSS Minification Filter in Eleventy
DESCRIPTION: Sets up a cssmin filter in Eleventy configuration using clean-css package to minify CSS code.

LANGUAGE: javascript
CODE:
import CleanCSS from "clean-css";

export default function (eleventyConfig) {
	eleventyConfig.addFilter("cssmin", function (code) {
		return new CleanCSS({}).minify(code).styles;
	});
};

----------------------------------------

TITLE: Disabling Frozen Data in Eleventy Configuration
DESCRIPTION: Shows how to opt-out of the frozen data behavior in Eleventy 3.0 using the setFreezeReservedData configuration option.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setFreezeReservedData(false);
};

----------------------------------------

TITLE: Using log Filter in JavaScript Templates
DESCRIPTION: Illustrates how to use the log filter in JavaScript templates, noting that console.log is directly available in this context.

LANGUAGE: javascript
CODE:
module.exports = function (data) {
	// Caveat: you have access to `console.log` here, so probably use that.
	return this.log("My Title");
};

----------------------------------------

TITLE: Configuring Watch Target Reset Behavior
DESCRIPTION: Shows how to configure watch targets to reset Eleventy's configuration when changes are detected. This is useful for watching configuration files.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// You probably don't need this
	eleventyConfig.addWatchTarget("./_config/**", {
		resetConfig: true
	});
};

----------------------------------------

TITLE: Amending Markdown Library in Eleventy
DESCRIPTION: Shows how to modify the markdown library instance using the amendLibrary method to enable specific features.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	eleventyConfig.amendLibrary("md", (mdLib) => mdLib.enable("code"));
};

----------------------------------------

TITLE: Sample JavaScript File Content
DESCRIPTION: Example JavaScript file content to demonstrate minification

LANGUAGE: javascript
CODE:
// Hi
console.log("Hi");

----------------------------------------

TITLE: Installing Eleventy Inclusive Language Plugin via npm
DESCRIPTION: Command to install the Eleventy Inclusive Language Plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install @11ty/eleventy-plugin-inclusive-language

----------------------------------------

TITLE: Plugin Version Checking
DESCRIPTION: Demonstrates how to implement version checking in a plugin to ensure compatibility with Eleventy versions.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig, pluginOptions) {
	try {
		// Emit a warning message if the application is not using Eleventy 3.0 or newer (including prereleases).
		eleventyConfig.versionCheck(">=3.0");
	} catch(e) {
		console.log( `[my-test-plugin] WARN Eleventy plugin compatibility: ${e.message}` );
	}
};

----------------------------------------

TITLE: Adding Custom Watch Targets in Eleventy Config
DESCRIPTION: Demonstrates how to add custom file or directory paths for Eleventy to watch for changes. When files in these watched paths change, Eleventy will trigger a build.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.addWatchTarget("./src/scss/");
};

----------------------------------------

TITLE: Configuring Liquid JS Truthiness Options
DESCRIPTION: Sets Liquid options to use JavaScript-style truthiness evaluation where empty strings and zero are falsy.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.setLiquidOptions({
		jsTruthy: true,
	});
};

----------------------------------------

TITLE: Filtering Sorted Collections with getAllSorted().filter() in Eleventy
DESCRIPTION: Demonstrates how to filter a sorted collection using getAllSorted().filter(). This example filters the collection to include only markdown files based on their file extension.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Filter using `Array.filter`
	eleventyConfig.addCollection("onlyMarkdown", function (collectionsApi) {
		return collectionsApi.getAllSorted().filter(function (item) {
			// Only return content that was originally a markdown file
			let extension = item.inputPath.split(".").pop();
			return extension === "md";
		});
	});
};

----------------------------------------

TITLE: Installing eleventy-fetch Plugin
DESCRIPTION: This snippet shows the npm command to install the eleventy-fetch plugin.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-fetch

----------------------------------------

TITLE: Configuring Eleventy Inclusive Language Plugin in JavaScript
DESCRIPTION: Basic configuration for adding the Inclusive Language Plugin to an Eleventy project. This snippet imports the plugin and adds it to the Eleventy configuration.

LANGUAGE: javascript
CODE:
import inclusiveLangPlugin from "@11ty/eleventy-plugin-inclusive-language";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(inclusiveLangPlugin);
};

----------------------------------------

TITLE: Plugin Installation Using NPM
DESCRIPTION: Shows how to install an Eleventy plugin using NPM package manager.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-plugin-rss --save

----------------------------------------

TITLE: Customizing Filenames in Eleventy Image
DESCRIPTION: Shows how to customize output filenames when using Eleventy Image.

LANGUAGE: javascript
CODE:
{
	// …
	filenameFormat: function (id, src, width, format, options) {
		// Define custom filenames for generated images
		// id: hash of the original image
		// src: original image path
		// width: current width in px
		// format: current file format
		// options: set of options passed to the Image call

		return `${id}-${width}.${format}`;
	}
}

----------------------------------------

TITLE: Basic EJS Plugin Configuration in Eleventy
DESCRIPTION: Basic setup for adding EJS template support to Eleventy v3+ using the eleventy-plugin-template-languages plugin.

LANGUAGE: javascript
CODE:
import ejsPlugin from "@11ty/eleventy-plugin-ejs";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(ejsPlugin);
}

----------------------------------------

TITLE: Displaying Cumulative Metrics Table in HTML
DESCRIPTION: This HTML table shows cumulative metrics for Eleventy, comparing 2023 and 2024 data with percentage changes. It includes various metrics such as npm downloads, GitHub dependents, stars, and community growth across different platforms.

LANGUAGE: html
CODE:
<table>
	<thead>
		<tr>
			<th>Cumulative Metric</th>
			<th class="numeric">2023</th>
			<th class="numeric">2024</th>
			<th class="numeric">Change</th>
		</tr>
	</thead>
		<tr>
			<td>npm Downloads</td>
			<td class="numeric">7,585,613</td>
			<td class="numeric">10,711,017</td>
			<td class="numeric numeric-up">41.20%</td>
		</tr>
		<tr>
			<td><a href="https://github.com/11ty/eleventy/network/dependents">GitHub dependents</a></td>
			<td class="numeric numeric-note">69,632</td>
			<td class="numeric">79,563</td>
			<td class="numeric numeric-up">12.49%</td>
		</tr>
		<!-- ... additional rows omitted for brevity ... -->
</table>

----------------------------------------

TITLE: Remapping Permalinks with Pagination in Eleventy
DESCRIPTION: Shows how to use template syntax in permalinks to create custom URLs based on pagination data.

LANGUAGE: liquid
CODE:
---
permalink: "different/page-{{ pagination.pageNumber }}/index.html"
---

----------------------------------------

TITLE: Displaying GitHub Stargazers Count in Eleventy Templates
DESCRIPTION: This snippet shows how to display the fetched GitHub stargazers count in Eleventy templates using Liquid or Nunjucks syntax. It demonstrates the use of the 'github' data object to access the stargazers count.

LANGUAGE: html
CODE:
{{ github.stargazers }} GitHub Stars

----------------------------------------

TITLE: Emulating Passthrough Copy During Serve in Eleventy
DESCRIPTION: This snippet demonstrates how to enable emulated passthrough copy during the serve process, which can improve build performance by referencing files directly instead of copying them.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// the default is "copy"
	eleventyConfig.setServerPassthroughCopyBehavior("passthrough");
};

----------------------------------------

TITLE: Installing HAML Plugin via npm
DESCRIPTION: Command to install the Eleventy HAML plugin package using npm

LANGUAGE: sh
CODE:
npm install @11ty/eleventy-plugin-haml

----------------------------------------

TITLE: Exposing Environment Variables in Eleventy
DESCRIPTION: Shows how to expose environment variables to templates in Eleventy using a global data file.

LANGUAGE: javascript
CODE:
export default function () {
	return {
		environment: process.env.MY_ENVIRONMENT || "development",
	};
}

----------------------------------------

TITLE: Liquid Template for Download Count Display
DESCRIPTION: Conditional template code that displays current download count and date if npm data is available

LANGUAGE: liquid
CODE:
{%- if npm and npm.downloads %} _That download count is now {{ npm.downloads | humanReadableNum }} (as of {{ config.now | newsDate }})._
{%- endif %}

----------------------------------------

TITLE: Initial HTML Layout Structure for Eleventy Pages
DESCRIPTION: Basic HTML structure for an Eleventy layout file, including a footer.

LANGUAGE: html
CODE:
    …
    <footer>
      © 2019 Eleventy
    </footer>
  </body>
</html>

----------------------------------------

TITLE: Fetching GitHub Repository Data with eleventy-fetch
DESCRIPTION: This snippet demonstrates how to use eleventy-fetch to retrieve GitHub repository data and cache it for a day. It fetches the stargazers count from the Eleventy repository.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

export default async function () {
	// https://developer.github.com/v3/repos/#get
	let json = await Fetch("https://api.github.com/repos/11ty/eleventy", {
		duration: "1d", // 1 day
		type: "json", // also supports "text" or "buffer"
	});

	return {
		stargazers: json.stargazers_count,
	};
};

----------------------------------------

TITLE: Implementing Minified JavaScript in HTML Template
DESCRIPTION: Nunjucks template syntax showing how to capture JavaScript content and apply the minification filter before inline insertion into HTML

LANGUAGE: html
CODE:
<!-- capture the JS content as a Nunjucks variable -->
{% set js %} {% include "sample.js" %} {% endset %}
<!-- feed it through our jsmin filter to minify -->
<script>
{{ js | jsmin | safe }}
</script>

----------------------------------------

TITLE: Basic HAML Plugin Configuration
DESCRIPTION: Basic configuration to add HAML support to Eleventy by importing and registering the plugin

LANGUAGE: javascript
CODE:
import hamlPlugin from "@11ty/eleventy-plugin-haml";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(hamlPlugin);
}

----------------------------------------

TITLE: Initializing Horizontal Bar Chart for Paid Hosting Types (JavaScript)
DESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the types of paid hosting used by Eleventy developers. It imports the HorizontalBar class from a custom module and configures chart options.

LANGUAGE: javascript
CODE:
import "https://d3js.org/d3.v7.min.js";
import { HorizontalBar } from "/static/artificial-chart.js";
new HorizontalBar("result-paid", "result-paid-table", {
	showLegend: false,
	showInlineBarValues: "outside",
	valueType: ["float"],
	margin: {
		left: 170
	}
});

----------------------------------------

TITLE: Configuring Eleventy Pug Plugin with Options
DESCRIPTION: JavaScript code to add the Pug plugin to Eleventy configuration with custom options. This example enables debug mode for Pug compilation.

LANGUAGE: javascript
CODE:
import pugPlugin from "@11ty/eleventy-plugin-pug";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(pugPlugin, {
		debug: true
	});
}

----------------------------------------

TITLE: Adding GitHub Edit Link to Eleventy Page Layout
DESCRIPTION: Enhanced HTML layout including an 'Edit this page on GitHub' link using Eleventy's page.inputPath variable to dynamically generate the correct GitHub URL.

LANGUAGE: html
CODE:
    …
    <footer>
      © 2019 Eleventy
      <a href="https://github.com/11ty/11ty-website/blob/main/{{ page.inputPath }}">Edit this page on GitHub</a>
    </footer>
  </body>
</html>

----------------------------------------

TITLE: Transform Execution Order Example
DESCRIPTION: Demonstrates the order of execution for multiple transforms in Eleventy configuration.

LANGUAGE: javascript
CODE:
eleventyConfig.addTransform("first", () => {});
eleventyConfig.addTransform("second", () => {});
eleventyConfig.addTransform("third", () => {});

----------------------------------------

TITLE: Advanced HAML Plugin Configuration
DESCRIPTION: Extended configuration showing how to override the default HAML library instance with custom options

LANGUAGE: javascript
CODE:
import haml from "hamljs";
import hamlPlugin from "@11ty/eleventy-plugin-haml";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(hamlPlugin, {
		// Override the `haml` library instance
		eleventyLibraryOverride: haml,
	});
}

----------------------------------------

TITLE: Using WebC with is-land for Component Hydration
DESCRIPTION: Shows how to use WebC with Eleventy's is-land component for conditional loading and hydration of web components.

LANGUAGE: html
CODE:
<is-land on:visible webc:import="npm:@11ty/is-land">
	<template data-island>
		<!-- CSS -->
		<style webc:keep>
			/* This CSS applies on:visible */
		</style>
		<link rel="stylesheet" href="arbitrary.css" webc:keep />

		<!-- JS -->
		<script type="module" webc:keep>
			console.log("This JavaScript runs on:visible");
		</script>
		<script type="module" src="arbitrary.js" webc:keep></script>
	</template>
</is-land>

----------------------------------------

TITLE: Initializing Horizontal Bar Chart for Plugins (JavaScript)
DESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the plugins used by Eleventy developers. It imports the HorizontalBar class from a custom module and configures chart options.

LANGUAGE: javascript
CODE:
import "https://d3js.org/d3.v7.min.js";
import { HorizontalBar } from "/static/artificial-chart.js";
new HorizontalBar("result-plugins", "result-plugins-table", {
	showLegend: false,
	showInlineBarValues: "outside",
	valueType: ["float"],
	margin: {
		left: 170
	}
});

----------------------------------------

TITLE: Configuring Eleventy Using Export Default Object
DESCRIPTION: Demonstrates how to export static configuration options as a default object. This method is possible but not preferred as it doesn't provide access to the Configuration API.

LANGUAGE: javascript
CODE:
export default {
	dir: {
		input: "views"
	}
}

----------------------------------------

TITLE: JavaScript Template for Inline CSS
DESCRIPTION: Alternative approach using JavaScript template (11ty.js) to inline and minify CSS using async functions.

LANGUAGE: javascript
CODE:
import fs from "node:fs/promises";
import path from "node:path";
import CleanCSS from "clean-css";

export default async function (data) {
	return `<style>
	  ${await fs
			.readFile(path.resolve(__dirname, "./sample.css"))
			.then((data) => new CleanCSS().minify(data).styles)}
	</style>`;
};

----------------------------------------

TITLE: Directory Data File with Tags
DESCRIPTION: Example JSON showing a directory-level data file with default tags configuration.

LANGUAGE: json
CODE:
{
	"tags": ["posts"]
}

----------------------------------------

TITLE: Installing Handlebars Plugin in Eleventy
DESCRIPTION: Command to install the Handlebars plugin package for Eleventy v3.

LANGUAGE: sh
CODE:
npm install @11ty/eleventy-plugin-handlebars

----------------------------------------

TITLE: Implementing Eleventy Edge in Nunjucks or Liquid Templates
DESCRIPTION: This snippet demonstrates how to use the 'edge' shortcode to designate content that should be generated on the Edge server. It allows for dynamic content generation within a static template, enabling features like query param or cookie value usage without client-side JavaScript.

LANGUAGE: liquid
CODE:
The content outside of the `edge` shortcode is generated with the Build.

{% edge %}
The content inside of the `edge` shortcode is generated on the Edge.

* Use a query param value here.
* Use a cookie value here.
* All without clientside JS.
{% endedge %}

----------------------------------------

TITLE: Configuring Manual Template for RSS Feed in Eleventy
DESCRIPTION: JavaScript configuration for adding the RSS feed plugin to Eleventy using a manual template. This method requires additional template files but offers more control.

LANGUAGE: javascript
CODE:
import pluginRss from "@11ty/eleventy-plugin-rss";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(pluginRss);
};

----------------------------------------

TITLE: Implementing Inline CSS with Nunjucks
DESCRIPTION: Template code showing how to capture and minify CSS using Nunjucks syntax.

LANGUAGE: html
CODE:
<!-- capture the CSS content as a Nunjucks variable -->
{% set css %} {% include "sample.css" %} {% endset %}
<!-- feed it through our cssmin filter to minify -->
<style>
	{{ css | cssmin | safe }}
</style>

----------------------------------------

TITLE: Generating Table of Eleventy Sample Projects with Source Code Links
DESCRIPTION: This snippet creates an HTML table that displays a randomized list of Eleventy sample projects. It iterates through the 'builtwith' collection, filtering for enabled projects with source URLs, and displays the project name (with optional link) and a source code link.

LANGUAGE: liquid
CODE:
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th style="min-width: 9em">Source Code</th>
    </tr>
  </thead>
  <tbody>
{% for key, site in builtwith | shuffle -%}
{% if site.disabled != true and site.source_url -%}
    <tr>
      <td>{% if site.url %}<a href="{{ site.url }}">{% endif %}{% communityavatar site.opened_by %}{{ site.name | safe }}{% if site.url %}</a>{% endif %}</td>
      <td>{% if site.source_url %}<a href="{{ site.source_url }}" class="minilink">Source Code</a>{% endif %}</td>
    </tr>
{% endif -%}
{% endfor -%}
  </tbody>
</table>

----------------------------------------

TITLE: Advanced Handlebars Plugin Configuration
DESCRIPTION: Configuration with custom options including library override for Handlebars in Eleventy.

LANGUAGE: javascript
CODE:
import handlebars from "handlebars";
import handlebarsPlugin from "@11ty/eleventy-plugin-handlebars";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(handlebarsPlugin, {
		// Override the `ejs` library instance
		eleventyLibraryOverride: handlebars,
	});
}

----------------------------------------

TITLE: Creating Tag Pages with Pagination in Eleventy (Nunjucks)
DESCRIPTION: This Nunjucks template uses Eleventy's pagination feature to generate a separate page for each tag in the collections object. It creates a list of posts for each tag, sorted in reverse chronological order.

LANGUAGE: markdown
CODE:
---
pagination:
  data: collections
  size: 1
  alias: tag
permalink: /tags/{{ tag }}/
---

<h1>Tagged "{{ tag }}"</h1>

<ol>
{% set taglist = collections[ tag ] %}
{% for post in taglist | reverse %}
  <li><a href="{{ post.url }}">{{ post.data.title }}</a></li>
{% endfor %}
</ol>

----------------------------------------

TITLE: Accessing Original Paginated Content in Eleventy
DESCRIPTION: This snippet shows how to access the original content when paginating over arrays or object literals in Eleventy.

LANGUAGE: html
CODE:
{% for pageEntry in pagination.pages %}
<li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>{{ pageEntry[0] }}</a></li>
{% endfor %}

LANGUAGE: html
CODE:
{% for pageKey in pagination.pages %}
<li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>{{ testdata[ pageKey[0] ] }}</a></li>
{% endfor %}

----------------------------------------

TITLE: Collection Item Data Structure Example
DESCRIPTION: Shows the JavaScript object structure of a collection item including page data, content, and metadata

LANGUAGE: javascript
CODE:
{
  page: {
    inputPath: './test1.md',
    url: '/test1/',
    date: new Date(),
    // … and everything else in Eleventy's `page`
  },
  data: { title: 'Test Title', tags: ['tag1', 'tag2'], date: 'Last Modified', /* … */ },
  content: '<h1>Test Title</h1>\n\n<p>This is text content…',
  rawInput: '<h1>{{ title }}</h1>\n\n<p>This is text content…',
}

----------------------------------------

TITLE: Changing Default Time Zone in Eleventy Configuration
DESCRIPTION: Example of setting a default time zone for the project and handling different date formats in the configuration.

LANGUAGE: javascript
CODE:
import { DateTime } from "luxon";

// See https://moment.github.io/luxon/#/zones?id=specifying-a-zone
const TIME_ZONE = "America/Chicago";

export default function(eleventyConfig) {
	eleventyConfig.addDateParsing(function(dateValue) {
		let localDate;
		if(dateValue instanceof Date) { // and YAML
			localDate = DateTime.fromJSDate(dateValue, { zone: "utc" }).setZone(TIME_ZONE, { keepLocalTime: true });
		} else if(typeof dateValue === "string") {
			localDate = DateTime.fromISO(dateValue, { zone: TIME_ZONE });
		}
		if (localDate?.isValid === false) {
			throw new Error(`Invalid \`date\` value (${dateValue}) is invalid for ${this.page.inputPath}: ${localDate.invalidReason}`);
		}
		return localDate;
	});
};

----------------------------------------

TITLE: Generating Related Blog Post Links in Eleventy
DESCRIPTION: Creates navigation links to previous and next blog posts using Eleventy's collection API and Nunjucks templating.

LANGUAGE: nunjucks
CODE:
{% if not hideRelatedBlogPosts %}
---

### Read more blog posts:

{% set previousPost = collections.blog | getPreviousCollectionItem(page) %}
{% set nextPost = collections.blog | getNextCollectionItem(page) %}

{% if nextPost %}- Next: <a href="{{ nextPost.url }}">{{ nextPost.data.newstitle }}</a>{% endif %}
{% if previousPost %}- Previous: <a href="{{ previousPost.url }}">{{ previousPost.data.newstitle }}</a>{% endif %}

{%- endif %}

----------------------------------------

TITLE: Adding Basic Shortcode in Eleventy
DESCRIPTION: Example of adding a synchronous shortcode for user profile display in Eleventy configuration.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  eleventyConfig.addShortcode("user", function(name, twitterUsername) {
    return `<div class="user">
<div class="user_name">${name}</div>
<div class="user_twitter">@${twitterUsername}</div>
</div>`;
  });
};

----------------------------------------

TITLE: Eleventy Dashboard Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the dashboard template, setting various display options and layout parameters.

LANGUAGE: yaml
CODE:
---
headerTitle: Eleventy Not-So-Private Admin Dashboard
ignoreSupporters: true
ignoreFooterTestimonial: true
ignoreGitHubButtons: true
eleventyExcludeFromCollections: true
layout: layouts/docs.njk
---

----------------------------------------

TITLE: Configuring Eleventy Navigation for Official Plugins Page
DESCRIPTION: This snippet sets up the Eleventy navigation configuration for the Official Plugins page, specifying its key, order, and parent in the navigation hierarchy.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Official Plugins
  order: 1
  parent: Plugins
---

----------------------------------------

TITLE: Custom Date Parsing in Eleventy Configuration
DESCRIPTION: Example of using eleventyConfig.addDateParsing to add custom date parsing logic for IANA time zone codes.

LANGUAGE: javascript
CODE:
import { DateTime } from "luxon";

export default function(eleventyConfig) {
	eleventyConfig.addDateParsing(function(dateValue) {
		return DateTime.fromFormat(dateValue, "yyyy-MM-dd hh:mm:ss z");
	});
};

----------------------------------------

TITLE: Nunjucks Template for Release History List
DESCRIPTION: A Nunjucks template loop that generates a formatted list of Eleventy version releases, including tags, documentation links, and release notes links.

LANGUAGE: nunjucks
CODE:
{%- for version in versions %}
- `{{ version.tag }}`{% if version.channel %} on the `@{{ version.channel }}` channel{% endif %}—[Docs]({% if version.docs_url %}{{ version.docs_url }}{% else %}https://github.com/11ty/eleventy/blob/{{ version.tag }}/README.md{% endif %}){% if version.ignore_release_notes !== true %} and [Release Notes](https://github.com/11ty/eleventy/releases/tag/{{ version.tag }}){% endif %}
{%- endfor -%}

----------------------------------------

TITLE: Adding Paired Shortcode in Eleventy
DESCRIPTION: Example of adding a paired shortcode for enhanced user profile display with biography in Eleventy.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
  eleventyConfig.addPairedShortcode("user", function(bioContent, name, twitterUsername) {
    return `<div class="user">
<div class="user_name">${name}</div>
<div class="user_twitter">@${twitterUsername}</div>
<div class="user_bio">${bioContent}</div>
</div>`;
  });
};

----------------------------------------

TITLE: Running Eleventy with TypeScript Support
DESCRIPTION: Command line instructions for running Eleventy with TypeScript file support.

LANGUAGE: bash
CODE:
npx @11ty/eleventy --formats=11ty.ts,11ty.tsx

----------------------------------------

TITLE: Monthly Donation Statistics Template
DESCRIPTION: Nunjucks template code for displaying monthly donation statistics including contributor count and recurring amounts.

LANGUAGE: nunjucks
CODE:
{{ opencollectiveMonthly.contributorCount }}
{{ opencollectiveMonthly.recurringAmount | displayPrice }}

----------------------------------------

TITLE: Running Eleventy with Debug Output for Performance Benchmarks (Windows)
DESCRIPTION: This command sets the debug environment variable and runs Eleventy with performance benchmark output enabled on Windows systems.

LANGUAGE: bash
CODE:
set DEBUG=Eleventy:Benchmark* & npx @11ty/eleventy

----------------------------------------

TITLE: Using Computed Data with Global Data in Eleventy
DESCRIPTION: Demonstrates how to use the addGlobalData method with Eleventy's computed data feature.

LANGUAGE: javascript
CODE:
module.exports = function (eleventyConfig) {
	eleventyConfig.addGlobalData("eleventyComputed.myString", () => {
		return (data) => "This is a string!";
	});

	// myString's value will be "This is a string!"
};

----------------------------------------

TITLE: Adding YAML Front Matter to Markdown in Eleventy
DESCRIPTION: Demonstrates how to add YAML front matter to a Markdown file in Eleventy, including a basic HTML structure.

LANGUAGE: markdown
CODE:
---
title: My page title
---

<!doctype html>
<html>
…

----------------------------------------

TITLE: Running Eleventy with Same Input and Output Directories
DESCRIPTION: Example of running Eleventy commands with the same input and output directory, which can lead to duplicate template errors when processing HTML files.

LANGUAGE: bash
CODE:
$ eleventy --input=. --output=. --formats=md,html
Writing ./README/index.html from ./README.md

$ eleventy --input=. --output=. --formats=md,html

----------------------------------------

TITLE: Featured Sites Display Template
DESCRIPTION: Template for rendering a list of featured sites built with Eleventy, including site avatars and URLs.

LANGUAGE: nunjucks
CODE:
{% for key, site in builtwith -%}{% if site.url and site.featured -%}
{% generatoravatar site.url %} [`{{ site.url }}`]({{site.url}})
{% endif %}{%- endfor %}

----------------------------------------

TITLE: Cross-Platform Environment Variables Configuration
DESCRIPTION: NPM script configuration using cross-env package for cross-platform environment variable support

LANGUAGE: javascript
CODE:
{
  "scripts": {
    "build:prod": "cross-env MY_ENVIRONMENT=production npx @11ty/eleventy"
  }
}

----------------------------------------

TITLE: Setting Environment Variables in Windows Powershell
DESCRIPTION: Command to set environment variables when running Eleventy in Windows Powershell

LANGUAGE: bash
CODE:
$env:MY_ENVIRONMENT="production"; npx @11ty/eleventy

----------------------------------------

TITLE: Aliasing Pagination Data in Eleventy
DESCRIPTION: Demonstrates how to alias pagination data to a different variable for cleaner template code.

LANGUAGE: nunjucks
CODE:
---
pagination:
  data: testdata
  size: 1
  alias: wonder
testdata:
  - item1
  - item2
permalink: "different/{{ wonder | slugify }}/index.html"
---

{{ wonder }}

----------------------------------------

TITLE: Disabling Template Processing in Eleventy
DESCRIPTION: Demonstrates how to disable all template processing and transformations by setting the templateEngineOverride to false.

LANGUAGE: markdown
CODE:
---
templateEngineOverride: false
---

----------------------------------------

TITLE: Using getAll() Method in Eleventy Collections API
DESCRIPTION: Shows how to use the getAll() method to retrieve all unsorted items in a collection. This method returns an array of all content items.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Unsorted items (in whatever order they were added)
	eleventyConfig.addCollection("allMyContent", function (collectionsApi) {
		return collectionsApi.getAll();
	});
};

----------------------------------------

TITLE: Styling Author Profile Page Components in CSS
DESCRIPTION: This CSS snippet defines styles for the author's profile page, including speedlify scores and site layouts.

LANGUAGE: css
CODE:
.site-score speedlify-score {
flex-wrap: nowrap;
}
.site-score speedlify-score {
margin-top: .5em;
}
.site-score .speedlify-rank {
font-weight: 700;
}
.site-score .speedlify-rank:before {
font-weight: 400;
}
.site-score .speedlify-rank-change.down {
display: none;
}

----------------------------------------

TITLE: Running Eleventy with MDX Support
DESCRIPTION: This command shows how to run Eleventy with support for MDX files. It uses the --formats flag to specify MDX as a supported format.

LANGUAGE: shell
CODE:
npx @11ty/eleventy --formats=mdx

----------------------------------------

TITLE: Setting Environment Variables in Windows CMD
DESCRIPTION: Command to set environment variables when running Eleventy in Windows command prompt

LANGUAGE: bash
CODE:
set MY_ENVIRONMENT=production & npx @11ty/eleventy

----------------------------------------

TITLE: Applying a Layout in Eleventy Front Matter
DESCRIPTION: Demonstrates how to specify a layout for a content file using front matter in Eleventy.

LANGUAGE: markdown
CODE:
---
layout: mylayout.njk
---
# My Title

This is my content.

----------------------------------------

TITLE: Using transformWithHtmlBase Filter
DESCRIPTION: Example of using transformWithHtmlBase filter to modify URLs within HTML content blocks.

LANGUAGE: nunjucks
CODE:
{% set html %}<img src="/img/file.jpg">{% endset %}
{{ html | transformWithHtmlBase | safe }}

----------------------------------------

TITLE: Structuring Author Profile Content with Nunjucks Templating
DESCRIPTION: This Nunjucks template structures the author's profile page, including personal information, GitHub and Open Collective links, starter projects, plugins, and community contributions.

LANGUAGE: nunjucks
CODE:
{%- set githubUrl = "https://github.com/" + author.name %}
{%- set supporter = opencollective.supporters | isSupporter(author.name, author.opencollective) -%}
{%- set displayName = supporter.name or author.name %}

# {{ displayName }}

- <a href="{{ githubUrl }}">{% communityavatar author.name %}{{ author.name }}</a> on GitHub
{%- if supporter %}
- <a href="{{ supporter.profile }}" class="elv-externalexempt supporters-link"><strong>{% if supporter.tier and supporter.isActive %} {% emoji "📅" %} Monthly{% endif %} Eleventy Contributor</strong> on Open Collective</a> 🎈
{%- else %}
- <a href="https://opencollective.com/11ty">Not yet <strong>Supporting Eleventy</strong> on Open Collective.</a>
- <em>Already a supporter but it's not showing here? Make sure your GitHub account is listed the <em>social links</em> section of your Open Collective Profile.</em>
{%- endif %}

----------------------------------------

TITLE: Template Rendering Output Example
DESCRIPTION: Shows the expected output from the renderTemplate and renderContent examples.

LANGUAGE: text
CODE:
{{ 'Second' }} from renderTemplate
Second from renderContent

----------------------------------------

TITLE: Setting Environment Variables in MacOS/Linux
DESCRIPTION: Command to set environment variables when running Eleventy on Unix-like systems

LANGUAGE: bash
CODE:
MY_ENVIRONMENT=production npx @11ty/eleventy

----------------------------------------

TITLE: Outputting Eleventy Results as JSON
DESCRIPTION: Commands to output Eleventy results as JSON or Newline Delimited JSON instead of writing to the file system.

LANGUAGE: bash
CODE:
# Output a JSON structure (does not write to the file system)
npx @11ty/eleventy --to=json

# Output a Newline Deliminated JSON structure (does not write to the file system)
npx @11ty/eleventy --to=ndjson

# Default behavior (Output to file system)
npx @11ty/eleventy --to=fs

----------------------------------------

TITLE: Basic HTML Heading Transformation
DESCRIPTION: Demonstrates how a basic HTML heading is transformed by the Id Attribute plugin to include an automatically generated id attribute.

LANGUAGE: html
CODE:
<h1>Welcome to Eleventy</h1>

LANGUAGE: html
CODE:
<h1 id="welcome-to-eleventy">Welcome to Eleventy</h1>

----------------------------------------

TITLE: Installing HTML Base Plugin in Eleventy Configuration
DESCRIPTION: Basic setup code to enable the HTML Base plugin in Eleventy configuration file.

LANGUAGE: javascript
CODE:
const htmlBasePlugin = require("@11ty/eleventy");

module.exports = function(eleventyConfig) {
  eleventyConfig.addPlugin(htmlBasePlugin);
};

----------------------------------------

TITLE: YAML Front Matter Configuration for 11ty Blog Post
DESCRIPTION: YAML configuration block defining the news title and navigation hierarchy for an 11ty blog post about conference merchandise.

LANGUAGE: yaml
CODE:
---
newstitle: "Get your 11ty Conference 2024 Merch Bundle (Limited Edition)"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Netlify Cache Configuration
DESCRIPTION: TOML configuration for using netlify-plugin-cache to persist the Eleventy cache directory between builds.

LANGUAGE: toml
CODE:
[[plugins]]
package = "netlify-plugin-cache"

  [plugins.inputs]
  paths = [ ".cache" ]

----------------------------------------

TITLE: Configuring Template Formats for Passthrough in Eleventy
DESCRIPTION: This snippet shows how to modify the template formats recognized by Eleventy, allowing for passthrough of additional file types like CSS.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.setTemplateFormats([
		"md",
		"css", // css is not yet a recognized template extension in Eleventy
	]);
};

----------------------------------------

TITLE: Configuring Synchronous Image Shortcode in Eleventy (Deprecated)
DESCRIPTION: This snippet demonstrates how to configure a synchronous image shortcode in Eleventy, which is now deprecated. It uses Image.statsSync to get metadata and generate HTML synchronously.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("myImage", function imageShortcode(src, cls, alt, widths = ["auto"], sizes = "100vh") {
		let options = {
			widths,
			formats: ["jpeg"],
		};

		// generate images: this is async but we don't wait
		Image(src, options);

		let imageAttributes = {
			class: cls,
			alt,
			sizes,
			loading: "lazy",
			decoding: "async",
		};
		// get metadata even if the images are not fully generated yet
		let metadata = Image.statsSync(src, options);
		return Image.generateHTML(metadata, imageAttributes);
	});
};

----------------------------------------

TITLE: Ignoring Content in Id Generation
DESCRIPTION: Shows how to use the eleventy:id-ignore attribute to exclude certain content from being included in the generated id attribute.

LANGUAGE: html
CODE:
<h1>Welcome to Eleventy<span eleventy:id-ignore> ignore this</span></h1>

LANGUAGE: html
CODE:
<h1 id="welcome-to-eleventy">Welcome to Eleventy</h1>

----------------------------------------

TITLE: HTML Image Link with OpenGraph Preview
DESCRIPTION: HTML markup for a linked product image using OpenGraph preview and responsive image attributes.

LANGUAGE: html
CODE:
<a href="https://merch.11ty.dev/products/11ty-merch-bundle-2024-limited-edition" class="elv-externalexempt opengraph-card">
  <img src="https://v1.opengraph.11ty.dev/{{ "https://merch.11ty.dev/products/11ty-merch-bundle-2024-limited-edition" | urlencode }}/medium/" alt="11ty Conference 2024 Merch Bundle (Limited Edition)" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Handling Input Directories in Eleventy Passthrough Copy
DESCRIPTION: This snippet shows how input directories are handled in passthrough file copy. It demonstrates that when copying from within the input directory, the input directory name is stripped from the output path.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Input directory: src
	// Output directory: _site

	// The following copies to `_site/img`
	eleventyConfig.addPassthroughCopy("src/img");
};

----------------------------------------

TITLE: Using Globs with Output Directories in Eleventy Passthrough Copy
DESCRIPTION: This snippet demonstrates how to use glob patterns with specific output directories in passthrough file copy, allowing for more complex file organization.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Output directory: _site

	// Find and copy any `jpg` files in any folder to _site/img
	// Does not keep the same directory structure.
	eleventyConfig.addPassthroughCopy({ "**/*.jpg": "img" });
};

----------------------------------------

TITLE: Configuring Apache .htaccess for 404 Page
DESCRIPTION: Apache server configuration using .htaccess to set up custom 404 error document routing.

LANGUAGE: apache
CODE:
ErrorDocument 404 /404.html

----------------------------------------

TITLE: Installing Eleventy Image Plugin
DESCRIPTION: Shows how to install the @11ty/eleventy-img package using npm.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-img

----------------------------------------

TITLE: Setting Includes Directory Configuration
DESCRIPTION: Example of setting the includes directory using the configuration API method setIncludesDirectory().

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Order matters, put this at the top of your configuration file.
	// This is relative to your input directory!
  eleventyConfig.setIncludesDirectory("my_includes");
};

----------------------------------------

TITLE: Configuring Eleventy Navigation and Metadata in YAML
DESCRIPTION: Sets up front matter for an Eleventy blog post, including a news title and navigation parent.

LANGUAGE: yaml
CODE:
---
newstitle: "Register now for the 11ty Conference!"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Template Front Matter Example
DESCRIPTION: Example of front matter in a markdown template showing basic metadata configuration including title, tags, layout, and navigation settings.

LANGUAGE: yaml
CODE:
---
title: This is a Good Blog Post
tags:
  - CSS
  - HTML
layout: my-layout.njk
eleventyNavigation:
  key: my-key
---

----------------------------------------

TITLE: Setting Emitter Mode in Eleventy Configuration
DESCRIPTION: Demonstrates how to set the event emitter mode to 'sequential' for running event callbacks sequentially instead of in parallel.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig){
	eleventyConfig.setEventEmitterMode("sequential");
}

----------------------------------------

TITLE: Opting Out of node_modules Ignore in Eleventy Configuration
DESCRIPTION: Shows how to opt-out of the default node_modules ignore behavior in Eleventy, allowing templates to be searched within the node_modules folder.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// in Eleventy 2.0
	eleventyConfig.ignores.delete("**/node_modules/**");

	// in Eleventy 1.0
	eleventyConfig.ignores.delete("node_modules/**");
};

----------------------------------------

TITLE: Generated HTML Output from Eleventy Image JavaScript API
DESCRIPTION: This snippet shows the HTML output generated by the Eleventy Image JavaScript API when using the 'returnType: "html"' option. It includes a <picture> element with multiple sources for different image formats.

LANGUAGE: html
CODE:
<picture><source type="image/webp" srcset="/img/yL0QoCVMHj-300.webp 300w"><img alt="" src="/img/yL0QoCVMHj-300.jpeg" width="300" height="300"></picture>

----------------------------------------

TITLE: HTML OpenGraph Card Link
DESCRIPTION: HTML anchor tag with associated image for displaying a preview card of the conference website.

LANGUAGE: html
CODE:
<a href="https://conf.11ty.dev" class="elv-externalexempt opengraph-card">
  <img src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fconf.11ty.dev%2F/medium/" alt="The 11ty International Symposium on Making Web Sites Real Good" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Layout Front Matter Example
DESCRIPTION: Front matter configuration for a layout file showing how metadata can be defined at the layout level.

LANGUAGE: yaml
CODE:
---
title: This is a Very Good Blog Post
author: Zach
tags:
  - JavaScript
eleventyNavigation:
  parent: test
---

----------------------------------------

TITLE: Windows PowerShell Debug Mode
DESCRIPTION: Command to enable debug mode in Eleventy using Windows PowerShell.

LANGUAGE: sh
CODE:
$env:DEBUG="Eleventy*"; npx @11ty/eleventy

----------------------------------------

TITLE: Enabling Debug Mode on macOS/Linux
DESCRIPTION: Command to enable debug mode in Eleventy on Unix-based systems using the DEBUG environment variable.

LANGUAGE: sh
CODE:
DEBUG=Eleventy* npx @11ty/eleventy

----------------------------------------

TITLE: Basic Plugin Configuration in Eleventy
DESCRIPTION: Basic configuration setup for the directory output plugin in Eleventy config file. Requires quiet mode to be enabled.

LANGUAGE: javascript
CODE:
import dirOutputPlugin from "@11ty/eleventy-plugin-directory-output";

export default function (eleventyConfig) {
	eleventyConfig.setQuietMode(true);
	eleventyConfig.addPlugin(dirOutputPlugin);
};

----------------------------------------

TITLE: Shortcode Implementation Examples
DESCRIPTION: Demonstrates correct and incorrect ways to implement shortcodes that return content in markdown files.

LANGUAGE: javascript
CODE:
// 🛑 Bad, don't do this
eleventyConfig.addShortcode("badShortcode", function () {
	return `
    This is a code block in a markdown file!
`;
});

// ✅ This will return expected output
eleventyConfig.addShortcode("goodShortcode", function () {
	return `
This will not be a code block in a markdown file.
`;
});

// ✅ This is also acceptable
eleventyConfig.addShortcode("alsoGoodShortcode", function () {
	return outdent`
    This will not be a code block in a markdown file.
`;
});

----------------------------------------

TITLE: Configuring Blog Post Frontmatter in YAML
DESCRIPTION: YAML frontmatter configuration for a blog post that defines the news title, navigation parent, and external URL for the Wikipedia page.

LANGUAGE: yaml
CODE:
---
newstitle: "Eleventy (software) is now on Wikipedia"
eleventyNavigation:
  parent: Blog
external_url: https://en.wikipedia.org/wiki/Eleventy_(software)
---

----------------------------------------

TITLE: Non-Deep Merge Data Structure
DESCRIPTION: Example JSON showing the resulting data structure when deep merge is disabled.

LANGUAGE: json
CODE:
{
	"title": "This is a Good Blog Post",
	"author": "Zach",
	"tags": ["CSS", "HTML"],
	"eleventyNavigation": {
		"key": "my-key"
	}
}

----------------------------------------

TITLE: Multiple Tag Examples in YAML
DESCRIPTION: Shows different ways to specify multiple tags in front matter including single line and multi-line formats

LANGUAGE: yaml
CODE:
---
tags: ["cat", "dog"]
---

LANGUAGE: yaml
CODE:
---
tags:
  - cat
  - dog
---

----------------------------------------

TITLE: Checking Eleventy Version after Global Installation
DESCRIPTION: This command checks the version of Eleventy after global installation. It demonstrates how to use the 'eleventy' command that becomes available globally after installation.

LANGUAGE: bash
CODE:
eleventy --version

----------------------------------------

TITLE: Running Eleventy with Debug Output for Performance Benchmarks (macOS/Linux)
DESCRIPTION: This command runs Eleventy with debug output enabled for all performance benchmarks. It uses an environment variable to set the debug mode.

LANGUAGE: bash
CODE:
DEBUG=Eleventy:Benchmark* npx @11ty/eleventy

----------------------------------------

TITLE: Eleventy Post Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for an Eleventy blog post, setting the news title and navigation parent.

LANGUAGE: yaml
CODE:
---
newstitle: "Static Feedback #11: All about Eleventy"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Plugin Configuration with Options
DESCRIPTION: Example of configuring a plugin with custom options using the syntax highlighting plugin.

LANGUAGE: javascript
CODE:
import pluginSyntaxHighlight from "@11ty/eleventy-plugin-syntaxhighlight";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(pluginSyntaxHighlight, {
		// only install the markdown highlighter
		templateFormats: ["md"],

		init: function ({ Prism }) {
			// Add your own custom language to Prism!
		},
	});
};

----------------------------------------

TITLE: Configuring Eleventy Navigation for Retired Plugins Page
DESCRIPTION: Sets up the navigation structure for the Retired Plugins page using Eleventy's built-in navigation plugin. It defines the key, parent, and order for the page in the site's navigation hierarchy.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Retired Plugins
  parent: Plugins
  order: 3
---

----------------------------------------

TITLE: Installing Eleventy Globally via npm
DESCRIPTION: This command installs Eleventy globally using npm. However, it's not recommended due to potential versioning issues across projects and compatibility problems with deployment services.

LANGUAGE: bash
CODE:
npm install -g @11ty/eleventy

----------------------------------------

TITLE: Running Eleventy with Node.js CPU Profiling
DESCRIPTION: This command runs Eleventy using Node's built-in CPU profiling feature. It generates a CPU profile file for detailed performance analysis.

LANGUAGE: bash
CODE:
node --cpu-prof ./node_modules/.bin/eleventy --quiet

----------------------------------------

TITLE: Installing Mustache Plugin for Eleventy
DESCRIPTION: Command to install the Eleventy Mustache plugin via npm

LANGUAGE: sh
CODE:
npm install @11ty/eleventy-plugin-mustache

----------------------------------------

TITLE: Including a Nunjucks Template in Eleventy
DESCRIPTION: This snippet demonstrates how to include another Nunjucks template file within the current template. It's used here to include a template for displaying the Eleventy Mascot Series.

LANGUAGE: nunjucks
CODE:
{% include "mascots.njk" %}

----------------------------------------

TITLE: Eleventy Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the page defining navigation hierarchy and ordering within Eleventy's navigation system.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Getting Started
  key: Migrating to Eleventy
  order: 3
---

----------------------------------------

TITLE: Rendering Eleventy Navigation for Official Plugins
DESCRIPTION: This Nunjucks template snippet generates an HTML navigation structure for the Official Plugins section, including excerpts for each plugin.

LANGUAGE: nunjucks
CODE:
{{ collections.all | eleventyNavigation("Official Plugins") | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}

----------------------------------------

TITLE: Installing Eleventy Pug Plugin with npm
DESCRIPTION: Command to install the Eleventy Pug plugin using npm. This is required for using Pug templates in Eleventy v3 and above.

LANGUAGE: sh
CODE:
npm install @11ty/eleventy-plugin-pug

----------------------------------------

TITLE: URL Format for JSON Metadata Endpoint
DESCRIPTION: Endpoint URL format to retrieve hosting provider information in JSON format for a given website URL.

LANGUAGE: plaintext
CODE:
https://v1.builtwith.11ty.dev/:url/json/

----------------------------------------

TITLE: Nunjucks Template Conditional Download Count
DESCRIPTION: Conditional template logic to display current download count and date

LANGUAGE: nunjucks
CODE:
{%- if npm and npm.downloads %} _That download count is now {{ npm.downloads | humanReadableNum }} (as of {{ config.now | newsDate }})._
{%- endif %}

----------------------------------------

TITLE: Content Excerpts with Front Matter
DESCRIPTION: Example showing how to define and extract content excerpts using front matter and custom delimiters

LANGUAGE: markdown
CODE:
---
title: My page title
---

This is the start of my content and this will be shown as the excerpt.

<!-- excerpt -->

This is a continuation of my content…

----------------------------------------

TITLE: Output HTML Result
DESCRIPTION: Shows the transformed output HTML after plugin processing

LANGUAGE: html
CODE:
<a href="/my-template/">Home</a>

----------------------------------------

TITLE: Basic CSS Concatenation using Nunjucks Include
DESCRIPTION: Simple template for combining multiple CSS files into a single output file using Nunjucks include statements. Uses the permalink frontmatter to specify the output filename.

LANGUAGE: markdown
CODE:
---
permalink: theme.css
---

{% include "components/header.css" %}
{% include "components/footer.css" %}

----------------------------------------

TITLE: Querying Generator Image API for JSON Response
DESCRIPTION: Shows the URL format for requesting JSON data from the Generator Image API instead of an image.

LANGUAGE: plaintext
CODE:
https://v1.generator.11ty.dev/json/:url/

----------------------------------------

TITLE: Rendering Screenshot Component
DESCRIPTION: Liquid template syntax for rendering a screenshot component with a link to the survey.

LANGUAGE: liquid
CODE:
{% getScreenshotHtml "Eleventy Community Survey", "https://forms.gle/zFA4Jno1cfT8nt9J8" %}

----------------------------------------

TITLE: Defining Eleventy Navigation in Markdown Frontmatter
DESCRIPTION: This code snippet demonstrates how to set up Eleventy navigation metadata in the frontmatter of a Markdown file. It defines the parent page, key, order, and excerpt for the navigation.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Projects
  key: Common Pitfalls
  order: 8
  excerpt: Some common problems that people run into.
---

----------------------------------------

TITLE: Liquid Template Link
DESCRIPTION: Example of using the InputPath to URL plugin in a Liquid template

LANGUAGE: liquid
CODE:
<a href="my-template.md">Home</a>

----------------------------------------

TITLE: Defining Ignore Patterns in .eleventyignore
DESCRIPTION: Sample .eleventyignore file showing how to ignore specific files and directories in Eleventy projects.

LANGUAGE: plaintext
CODE:
README.md
_drafts/
secretNunjucksTemplates/anotherFolder/**/*.njk

----------------------------------------

TITLE: IndieWeb Avatar URL Format Example
DESCRIPTION: Demonstrates the basic URL format for accessing the IndieWeb Avatar service API endpoint. The URL parameter must be URI encoded.

LANGUAGE: plaintext
CODE:
https://v1.indieweb-avatar.11ty.dev/:url/

----------------------------------------

TITLE: Displaying Responsive Image with Eleventy Image Plugin
DESCRIPTION: Uses the Eleventy Image plugin to display a responsive image with multiple size options. The image shows Zach pointing to balloons celebrating 6 million downloads.

LANGUAGE: liquid
CODE:
{% image "./src/blog/six-million.jpg", "Zach pointing to the new balloons in his office that say 6 Million", [350, 700], "", "100vw" %}

----------------------------------------

TITLE: Configuring Eleventy Navigation in Markdown Frontmatter
DESCRIPTION: This snippet demonstrates how to set up Eleventy navigation metadata in the frontmatter of a Markdown file. It defines the navigation key, order, and parent for the 'Community Plugins' page.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Community Plugins
  order: 2
  parent: Plugins
---

----------------------------------------

TITLE: Basic HTML Link Usage
DESCRIPTION: Demonstrates basic usage of the InputPath to URL plugin with an HTML anchor tag

LANGUAGE: html
CODE:
<a href="my-template.md">Home</a>

----------------------------------------

TITLE: Project Filter Interface Template
DESCRIPTION: HTML/Nunjucks template for filtering starter projects, including radio buttons for showing all projects or only those with perfect Lighthouse scores.

LANGUAGE: html
CODE:
<filter-container oninit>
<form>
  <label>
    <input type="radio" name="projectfilter" value="" data-filter-key="tags" checked>
    Show all projects
  </label>
  <label>
    <input type="radio" name="projectfilter" value="perfectlh" data-filter-key="tags">
    Only show projects with a Four Hundos Lighthouse score
  </label>
</form>

----------------------------------------

TITLE: Embedding OpenGraph Image for netlify.com in HTML
DESCRIPTION: Shows how to embed an OpenGraph image for netlify.com using the API service, including responsive image attributes.

LANGUAGE: html
CODE:
<img
	src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.netlify.com%2F/small/"
	alt="OpenGraph image for netlify.com"
	loading="lazy"
	decoding="async"
	width="375"
	height="197"
/>

----------------------------------------

TITLE: Configuring JavaScript Dependency Watching
DESCRIPTION: Shows how to disable automatic JavaScript dependency watching, which is enabled by default for .11ty.js templates and data files.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Enabled by default
	eleventyConfig.setWatchJavaScriptDependencies(false);
};

----------------------------------------

TITLE: Creating Canonical Twitter URL with Eleventy Filter
DESCRIPTION: Utilizes an Eleventy filter to generate a canonical Twitter URL. This is used to link to a tweet about reaching one million npm downloads.

LANGUAGE: liquid
CODE:
{{ "https://twitter.com/eleven_ty/status/1338210611797389312" | canonicalTwitterUrl }}

----------------------------------------

TITLE: Adding Previous and Next Links to Pagination in Eleventy
DESCRIPTION: This snippet demonstrates how to add previous and next links to the pagination navigation in Eleventy.

LANGUAGE: html
CODE:
{% if pagination.href.previous %}
  <li><a href="{{ pagination.href.previous }}">Previous</a></li>
{% endif %}
{%- for pageEntry in pagination.pages %}
  <li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>Page {{ loop.index }}</a></li>
{%- endfor %}
{% if pagination.href.next %}
  <li><a href="{{ pagination.href.next }}">Next</a></li>
{% endif %}

LANGUAGE: javascript
CODE:
module.exports = function({ pagination, page }) {
  return `<ol>
    ${pagination.href.previous ? `<li><a href="${pagination.href.previous}">Previous</a></li>` : ''}
    ${pagination.pages.map((pageEntry, i) => `<li><a href="${pagination.hrefs[i]}"${page.url === pagination.hrefs[i] ? ' aria-current="page"' : ''}>Page ${i + 1}</a></li>`).join('')}
    ${pagination.href.next ? `<li><a href="${pagination.href.next}">Next</a></li>` : ''}
  </ol>`;
};

----------------------------------------

TITLE: Configuring Image Shortcode with HTML Transform Ignore in Eleventy
DESCRIPTION: This snippet shows how to configure an image shortcode that ignores HTML transform processing in Eleventy. It adds an eleventy:ignore attribute to prevent double processing of images.

LANGUAGE: javascript
CODE:
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addShortcode("image", async function (src, alt) {
		let html = await Image(src, {
			returnType: "html",
			htmlOptions: {
				imgAttributes: {
					alt, // required
					"eleventy:ignore": ""
				}
			}
		});

		return html;
	});
};

----------------------------------------

TITLE: Running WordPress Import with @11ty/import CLI Tool
DESCRIPTION: Command line example showing how to use @11ty/import to convert WordPress content to static files. The tool imports posts, downloads assets, and maintains URL structure while allowing for dry runs and incremental imports.

LANGUAGE: sh
CODE:
> npx @11ty/import wordpress https://example.com/
Wrote 141 documents and 810 assets (933 cleaned, unused) from WordPress (7 errors) in 2.14 seconds (v1.0.0)

----------------------------------------

TITLE: Converting Title to URL Slug in YAML Front Matter
DESCRIPTION: Demonstrates how to use the 'slug' filter in YAML front matter to convert a page title into a URL-friendly slug for use in the permalink.

LANGUAGE: yaml
CODE:
---
title: "My Title"
permalink: "/{{ title | slug }}/"
---
Outputs to `/my-title/`.

----------------------------------------

TITLE: YAML Front Matter Configuration for Blog Post
DESCRIPTION: YAML configuration block defining the news title and navigation hierarchy for an Eleventy blog post.

LANGUAGE: yaml
CODE:
---
newstitle: "The `v8` release of Eleventy's Base Blog starter project using Eleventy 2.0"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Adding First and Last Links to Pagination in Eleventy
DESCRIPTION: This snippet shows how to add first and last links to the pagination navigation in Eleventy.

LANGUAGE: html
CODE:
{% if pagination.href.first != page.url %}
  <li><a href="{{ pagination.href.first }}">First</a></li>
{% endif %}
{%- for pageEntry in pagination.pages %}
  <li><a href="{{ pagination.hrefs[loop.index0] }}"{% if page.url == pagination.hrefs[loop.index0] %} aria-current="page"{% endif %}>Page {{ loop.index }}</a></li>
{%- endfor %}
{% if pagination.href.last != page.url %}
  <li><a href="{{ pagination.href.last }}">Last</a></li>
{% endif %}

LANGUAGE: javascript
CODE:
module.exports = function({ pagination, page }) {
  return `<ol>
    ${pagination.href.first !== page.url ? `<li><a href="${pagination.href.first}">First</a></li>` : ''}
    ${pagination.pages.map((pageEntry, i) => `<li><a href="${pagination.hrefs[i]}"${page.url === pagination.hrefs[i] ? ' aria-current="page"' : ''}>Page ${i + 1}</a></li>`).join('')}
    ${pagination.href.last !== page.url ? `<li><a href="${pagination.href.last}">Last</a></li>` : ''}
  </ol>`;
};

----------------------------------------

TITLE: Sample Return Object from Eleventy Image JavaScript API
DESCRIPTION: This snippet shows the structure of the JavaScript object returned by the Eleventy Image API. It includes metadata for the generated images in different formats and sizes.

LANGUAGE: javascript
CODE:
{
	webp: [
		{
			format: 'webp',
			width: 300,
			height: 300,
			filename: '6dfd7ac6-300.webp',
			outputPath: 'img/6dfd7ac6-300.webp',
			url: '/img/6dfd7ac6-300.webp',
			sourceType: 'image/webp',
			srcset: '/img/6dfd7ac6-300.webp 300w',
			size: 10184
		}
	],
	jpeg: [
		{
			format: 'jpeg',
			width: 300,
			height: 300,
			filename: '6dfd7ac6-300.jpeg',
			outputPath: 'img/6dfd7ac6-300.jpeg',
			url: '/img/6dfd7ac6-300.jpeg',
			sourceType: 'image/jpeg',
			srcset: '/img/6dfd7ac6-300.jpeg 300w',
			size: 15616
		}
	]
}

----------------------------------------

TITLE: Using URL Filter in Liquid/Nunjucks Templates
DESCRIPTION: Demonstrates how to use the URL filter in Liquid or Nunjucks templates to create properly prefixed links. The filter can be applied to both string literals and variables containing URLs.

LANGUAGE: html
CODE:
<a href="{{ '/myDir/' | url }}">Liquid or Nunjucks Link (from string)</a>
<a href="{{ post.url | url }}">Liquid or Nunjucks Link (from variable)</a>

----------------------------------------

TITLE: Using Slugify Filter in Eleventy Front Matter
DESCRIPTION: Demonstrates how to use the slugify filter in front matter to generate URL-friendly permalinks from page titles. The example shows converting 'My Title' to '/my-title/' in the permalink.

LANGUAGE: yaml
CODE:
---
title: "My Title"
permalink: "/{{ title | slugify }}/"
---
Outputs to `/my-title/`.

----------------------------------------

TITLE: Embedding Generator Logos in HTML
DESCRIPTION: Provides HTML code for embedding generator logos using the Generator Image API. The example includes logos for 11ty.dev, gatsbyjs.com, and astro.build.

LANGUAGE: html
CODE:
<img
	src="https://v1.generator.11ty.dev/image/https%3A%2F%2Fwww.11ty.dev%2F/"
	alt="Site Generator logo for 11ty.dev/"
	loading="lazy"
	decoding="async"
	width="40"
	height="40"
/>
<img
	src="https://v1.generator.11ty.dev/image/https%3A%2F%2Fwww.gatsbyjs.com%2F/"
	alt="Site Generator logo for gatsbyjs.com/"
	loading="lazy"
	decoding="async"
	width="40"
	height="40"
/>
<img
	src="https://v1.generator.11ty.dev/image/https%3A%2F%2Fastro.build%2F/"
	alt="Site Generator logo for astro.build/"
	loading="lazy"
	decoding="async"
	width="40"
	height="40"
/>

----------------------------------------

TITLE: YAML Front Matter Configuration for Eleventy Blog Post
DESCRIPTION: YAML front matter that configures the blog post title and navigation hierarchy in Eleventy.

LANGUAGE: yaml
CODE:
---
newstitle: "The State of Eleventy (2022) in Two Minutes"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Creating Base HTML Layout Template
DESCRIPTION: Base HTML layout template (mylayout.njk) that provides the main HTML structure and incorporates dynamic content using Nunjucks templating.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{{title}}</title>
	</head>
	<body>
		{{ content | safe }}
	</body>
</html>

----------------------------------------

TITLE: Configuring Eleventy Navigation for getBundle Shortcode Documentation
DESCRIPTION: YAML front matter block defining navigation and metadata for the getBundle shortcode documentation in Eleventy. It sets the navigation key, title, parent category, order, and URL for the documentation page.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: getBundle
  title: "<code>getBundle</code>"
  parent: Shortcodes
  order: 0
  url: /docs/plugins/bundle.md
permalink: false
---

----------------------------------------

TITLE: Eleventy Navigation Configuration in YAML
DESCRIPTION: YAML front matter configuration for Eleventy navigation, setting the parent page, navigation key, and order.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  parent: Getting Started
  key: Starter Projects
  order: 2

----------------------------------------

TITLE: YAML Front Matter Configuration for Eleventy Blog Post
DESCRIPTION: YAML front matter configuration defining the news title and navigation parent for an Eleventy blog post

LANGUAGE: yaml
CODE:
---
newstitle: Represent Eleventy in the State of JavaScript Survey 2022
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Customizing Eleventy Inclusive Language Plugin Options in JavaScript
DESCRIPTION: Advanced configuration for the Inclusive Language Plugin, demonstrating how to customize options such as template formats and specific words to check for.

LANGUAGE: javascript
CODE:
import inclusiveLangPlugin from "@11ty/eleventy-plugin-inclusive-language";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(inclusiveLangPlugin, {
		templateFormats: ["md"], // default, add more file extensions here

		// accepts an array or a comma-delimited string
		words:
			"simply,obviously,basically,of course,clearly,just,everyone knows,however,easy",
	});
};

----------------------------------------

TITLE: Basic Eleventy Front Matter Configuration
DESCRIPTION: Front matter configuration example showing eleventyNavigation setup with parent, key, and order properties.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  parent: Using Data
  key: Configure your Templates
  order: 0

----------------------------------------

TITLE: Configuring Watch Ignore Patterns
DESCRIPTION: Shows how to add or remove files from Eleventy's watch ignore list using the watchIgnores API. By default, node_modules is ignored.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Do not rebuild when README.md changes (You can use a glob here too)
	eleventyConfig.watchIgnores.add("README.md");

	// Or delete entries too
	eleventyConfig.watchIgnores.delete("README.md");
};

----------------------------------------

TITLE: Using Same Input and Output Directories in Eleventy
DESCRIPTION: Command to use the same directory for input and output in Eleventy, specifically for parsing Markdown to HTML while respecting directory structure.

LANGUAGE: bash
CODE:
# Parse and write Markdown to HTML, respecting directory structure.
npx @11ty/eleventy --input=. --output=. --formats=md

----------------------------------------

TITLE: HTML Link with Screenshot Template
DESCRIPTION: HTML anchor tag with embedded screenshot template using Eleventy's getScreenshotHtml shortcode

LANGUAGE: html
CODE:
<a href="https://stateofjs.com/" style="display: block; max-width: 16em">{% getScreenshotHtml "State of JavaScript", "https://stateofjs.com/" %}</a>

----------------------------------------

TITLE: Changing Global Concurrency in Eleventy Fetch
DESCRIPTION: Example of changing the global concurrency limit for Eleventy Fetch requests. This affects how many simultaneous requests can be made.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";
Fetch.concurrency = 4; // default is 10

----------------------------------------

TITLE: Configuring Eleventy Documentation Navigation and Permalink in YAML
DESCRIPTION: This YAML configuration sets up the navigation key and URL for Eleventy documentation, and disables the permalink. It's typically used in the front matter of an Eleventy template file to define metadata for the page.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Eleventy Documentation
  url: /docs/
permalink: false
---

----------------------------------------

TITLE: Customizing Eleventy's Template Processing
DESCRIPTION: Commands to specify which template types Eleventy should process, including how to use only a subset of formats or disable format processing entirely.

LANGUAGE: bash
CODE:
# Use only a subset of template types
npx @11ty/eleventy --formats=md,html,ejs

# Don't process any formats
npx @11ty/eleventy --formats=

# Find out the most up-to-date list of commands (there are more)
npx @11ty/eleventy --help

----------------------------------------

TITLE: Embedding YouTube Video in Eleventy using Liquid Template
DESCRIPTION: Uses a custom Liquid template tag to embed a YouTube video in an Eleventy page.

LANGUAGE: liquid
CODE:
{% youtubeEmbed "pPkWxn0TF9w" %}

----------------------------------------

TITLE: Disabling Colors in Terminal Output
DESCRIPTION: Commands to disable colorized text in terminal output across different platforms

LANGUAGE: sh
CODE:
NODE_DISABLE_COLORS=1 npx @11ty/eleventy

LANGUAGE: sh
CODE:
$env:NODE_DISABLE_COLORS="1"; npx @11ty/eleventy

LANGUAGE: sh
CODE:
npx cross-env NODE_DISABLE_COLORS=1 npx @11ty/eleventy

----------------------------------------

TITLE: Installing Directory Output Plugin via NPM
DESCRIPTION: NPM installation command for the eleventy-plugin-directory-output package.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy-plugin-directory-output

----------------------------------------

TITLE: Configuring Eleventy Navigation YAML
DESCRIPTION: YAML front matter configuration for the API Services documentation page, setting up navigation hierarchy and page metadata.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Documentation
  key: API Services
  order: 8
pageTitle: API Services
communityLinksKey: api-services
---

----------------------------------------

TITLE: Running Eleventy with Auto-Refresh and Watch Mode
DESCRIPTION: Commands to run Eleventy with a web server for automatic refreshing, including options to change the server port and watch for file changes without a web server.

LANGUAGE: bash
CODE:
# Add a web server to apply changes and
# refresh automatically. We'll also --watch for you.
npx @11ty/eleventy --serve

# Change the web server's port—use localhost:8081
npx @11ty/eleventy --serve --port=8081

# Watch and re-run when files change, without the web server.
npx @11ty/eleventy --watch

----------------------------------------

TITLE: Rendering Testimonials with Eleventy Templates
DESCRIPTION: A template that loops through testimonials using Eleventy's templating syntax. It shuffles the testimonials array and creates a div container for each testimonial with a slugified name as the ID.

LANGUAGE: html
CODE:
---
headerTitle: Eleventy Community
---

# Testimonials

Don't just take my word for it. 🌈 Listen to what these happy developers are saying about Eleventy:

{% for testimonial in testimonials | shuffle %}

<div id="{{ testimonial.name | slugify }}">
	{%- testimonial testimonial -%}
</div>
{% endfor %}

----------------------------------------

TITLE: Nunjucks Image Template Include
DESCRIPTION: Template code for including an image of the new mascot with styling container

LANGUAGE: html
CODE:
<div style="display: inline-block; border-radius: 1em; background-color: hsl(229deg 40% 38%); border: .75em solid hsl(229deg 40% 28%); box-shadow: -10px 10px 80px rgb(0 0 0 / 10%);">
  {% image "./src/img/possum-geri.png", "3 possums suspended from a red balloon" %}
</div>

----------------------------------------

TITLE: Setting Single Template Engine Override in Eleventy
DESCRIPTION: Shows how to override the default template engine for a liquid file to use Nunjucks instead through front matter configuration.

LANGUAGE: markdown
CODE:
---
templateEngineOverride: njk
---

----------------------------------------

TITLE: Basic is-land Usage
DESCRIPTION: Demonstrates basic usage of the is-land component with various loading conditions.

LANGUAGE: html
CODE:
<is-land>
This is an island.
</is-land>

----------------------------------------

TITLE: Liquid Template Include Syntax Example
DESCRIPTION: Example of Liquid template include syntax referenced in the documentation for dependency mapping.

LANGUAGE: liquid
CODE:
{% include %}

----------------------------------------

TITLE: Running Eleventy in Dry Run Mode
DESCRIPTION: Command to run Eleventy without writing to the file system, useful for debugging and testing.

LANGUAGE: bash
CODE:
# Run Eleventy but don't write any files
npx @11ty/eleventy --dryrun

----------------------------------------

TITLE: Running Eleventy with JSX Support
DESCRIPTION: Command line instruction for running Eleventy with JSX and TSX file support.

LANGUAGE: bash
CODE:
npx @11ty/eleventy --formats=11ty.jsx,11ty.tsx

----------------------------------------

TITLE: Installing is-land Component
DESCRIPTION: Shows how to install the is-land package via npm and include it in your project.

LANGUAGE: bash
CODE:
npm install @11ty/is-land

----------------------------------------

TITLE: Using inputPathToUrl in JavaScript Template Functions (ESM)
DESCRIPTION: Example of using inputPathToUrl within an ES Module JavaScript template function to generate URL-based links.

LANGUAGE: javascript
CODE:
export default function (data) {
	return `<a href="${this.inputPathToUrl("index.md")}">Home</a>`;
}

----------------------------------------

TITLE: Importing Default Export Plugins in CommonJS Configuration
DESCRIPTION: Demonstrates how to import a plugin that uses default export as the plugin callback in a CommonJS configuration file. This uses the special 'default' property from dynamic import().

LANGUAGE: javascript
CODE:
module.exports = async function (eleventyConfig) {
	const { default: myPlugin } = await import("my-eleventy-plugin");
	// …
};

----------------------------------------

TITLE: Constructing Screenshot API URLs in Eleventy
DESCRIPTION: Demonstrates the URL format for the Eleventy Screenshot API, including options for size, aspect ratio, and zoom level.

LANGUAGE: plaintext
CODE:
https://v1.screenshot.11ty.dev/:url/
https://v1.screenshot.11ty.dev/:url/:size/
https://v1.screenshot.11ty.dev/:url/:size/:aspectratio/
https://v1.screenshot.11ty.dev/:url/:size/:aspectratio/:zoom/

----------------------------------------

TITLE: Configuring Eleventy Front Matter for Blog Post
DESCRIPTION: Sets up the front matter for an Eleventy blog post, including the title and navigation parent. This configuration helps organize the blog post within the site structure.

LANGUAGE: markdown
CODE:
---
newstitle: "The State of Eleventy (2021) in Two Minutes"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Including PrismJS Theme CSS in HTML
DESCRIPTION: Example of including a PrismJS theme CSS file in an HTML layout.

LANGUAGE: html
CODE:
<html lang="en">
	<head>
		<!-- Some html boilerplate omitted -->
		<link
			href="https://unpkg.com/prismjs@1.20.0/themes/prism-okaidia.css"
			rel="stylesheet"
		/>
	</head>
</html>

----------------------------------------

TITLE: Advanced Mustache Plugin Configuration
DESCRIPTION: Extended configuration showing how to override the Mustache library instance with custom options

LANGUAGE: javascript
CODE:
import mustache from "mustache";
import mustachePlugin from "@11ty/eleventy-plugin-mustache";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(mustachePlugin, {
		// Override the `mustache` library instance
		eleventyLibraryOverride: mustache,
	});
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Serverless Plugin Documentation
DESCRIPTION: YAML front matter for configuring the navigation structure of the Serverless plugin documentation page in Eleventy. It sets the navigation key, parent, excerpt, and exclusion from sidebar.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Serverless
  parent: Retired Plugins
  excerpt: A plugin to run Eleventy in a serverless function for server side rendering or to speed up builds for very large sites.
excludeFromSidebar: true
---

----------------------------------------

TITLE: Setting Data Directory Configuration
DESCRIPTION: Example of setting the data directory using the configuration API method setDataDirectory().

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	// Order matters, put this at the top of your configuration file.
  eleventyConfig.setDataDirectory("lore");
};

----------------------------------------

TITLE: Embedding YouTube Video with Liquid Template
DESCRIPTION: Uses a custom Liquid template tag to embed a YouTube video into the blog post. The video ID is passed as a parameter to the youtubeEmbed tag.

LANGUAGE: liquid
CODE:
{% youtubeEmbed "kcRtANKWCLQ" %}

----------------------------------------

TITLE: CSS Styles for Diff Syntax Highlighting
DESCRIPTION: Sample CSS styles to enhance the visual appearance of diff syntax highlighting.

LANGUAGE: css
CODE:
.token.deleted {
	background-color: hsl(350deg 100% 88% / 47%);
}
.token.inserted {
	background-color: hsl(120deg 73% 75% / 35%);
}

/* Make the + and - characters unselectable for copy/paste */
.token.prefix.unchanged,
.token.prefix.inserted,
.token.prefix.deleted {
	-webkit-user-select: none;
	user-select: none;
}

/* Optional: full-width background color */
.token.inserted:not(.prefix),
.token.deleted:not(.prefix) {
	display: block;
}

----------------------------------------

TITLE: Basic Mustache Plugin Configuration
DESCRIPTION: Basic configuration to add Mustache plugin to Eleventy configuration file

LANGUAGE: javascript
CODE:
import mustachePlugin from "@11ty/eleventy-plugin-mustache";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(mustachePlugin);
}

----------------------------------------

TITLE: Defining CMS Providers in YAML
DESCRIPTION: YAML structure for defining a list of CMS providers, including their names, URLs, screenshot sizes, and tags.

LANGUAGE: yaml
CODE:
cmses:
  - name: CloudCannon
    url: https://cloudcannon.com/eleventy-cms/?utm_campaign=11ty-partner&utm_source=official-sponsor
    tags: [Git-based]
  - name: WordPress REST API
    url: https://developer.wordpress.org/rest-api/
    screenshotSize: medium
    tags: [API]
  # ... more CMS entries ...

----------------------------------------

TITLE: Configuring Eleventy Using Return Object in Callback
DESCRIPTION: Shows how to return configuration options as an object within the callback function. While possible, this approach is not preferred due to order-of-operations considerations.

LANGUAGE: javascript
CODE:
export default async function(eleventyConfig) {
	return {
    dir: {
      input: "views",
      output: "dist"
    }
  };
};

----------------------------------------

TITLE: Adding and Deleting Ignores in Eleventy Configuration
DESCRIPTION: Demonstrates how to programmatically add and delete ignores using the Eleventy configuration API. The ignores are stored in a JavaScript Set.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.ignores.add("README.md");
	eleventyConfig.ignores.delete("README.md");
};

----------------------------------------

TITLE: YAML Frontmatter Configuration for Blog Post
DESCRIPTION: YAML frontmatter configuration that sets the news title and navigation parent for an Eleventy blog post about the Jamstack Community Survey 2021 results.

LANGUAGE: yaml
CODE:
---
newstitle: "Jamstack Community Survey 2021 Results"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Creating a Basic Nunjucks Layout in Eleventy
DESCRIPTION: Shows the structure of a simple Nunjucks layout file that can be used to wrap content in Eleventy.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
  </head>
  <body>
    {{ content | safe }}
  </body>
</html>

----------------------------------------

TITLE: Querying Generator Image API for Logo URL
DESCRIPTION: Demonstrates how to construct the URL for querying the Generator Image API. The API returns the logo of the site generator used for a given website.

LANGUAGE: plaintext
CODE:
https://v1.generator.11ty.dev/image/:url/

----------------------------------------

TITLE: Basic File Organization Structure for i18n
DESCRIPTION: Example directory structure showing how to organize files for different locales using folders for each language.

LANGUAGE: plaintext
CODE:
📁 en -> 📄 about.html
📁 es -> 📄 about.html
📁 de -> 📄 about.html
📁 ja -> 📄 about.html
📂 and so on…

----------------------------------------

TITLE: Configuring Eleventy Blog Post Frontmatter in YAML
DESCRIPTION: Sets up the frontmatter for an Eleventy blog post, including the title and navigation parent. This configuration is used to organize the post within the site structure.

LANGUAGE: yaml
CODE:
---
newstitle: "The State of Eleventy (2020) in Two Minutes"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Initializing YAML Front Matter for Eleventy Blog Post
DESCRIPTION: YAML front matter configuration for an Eleventy blog post, setting navigation properties, title, and external URL reference.

LANGUAGE: yaml
CODE:
---
newstitle: "Eleventy v3.0.0 is now available!"
eleventyNavigation:
  parent: Blog
blogHighlight: true
external_url: https://github.com/11ty/eleventy/releases/tag/v3.0.0
---

----------------------------------------

TITLE: Configuring Eleventy Navigation in YAML Front Matter
DESCRIPTION: This snippet demonstrates how to set up navigation properties for an Eleventy page using YAML front matter. It defines the parent page, navigation key, and order within the navigation structure.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Documentation
  key: Learn
  order: 2.1
---

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter defining the post's title and navigation structure for the 11ty static site generator.

LANGUAGE: yaml
CODE:
---
newstitle: "Help 11ty become sustainable in 2024"
eleventyNavigation:
  parent: Blog
external_url: https://www.zachleat.com/web/independent-sustainable-11ty/
---

----------------------------------------

TITLE: Alternative File Naming Structure for i18n
DESCRIPTION: Alternative approach showing language codes in filenames rather than folders.

LANGUAGE: plaintext
CODE:
📄 about.en.html
📄 about.es.html
📄 and so on…

----------------------------------------

TITLE: Generating OpenGraph Image URL in HTML
DESCRIPTION: Demonstrates how to construct the URL for the OpenGraph Image API service, including optional parameters for size and format.

LANGUAGE: html
CODE:
https://v1.opengraph.11ty.dev/:url/
https://v1.opengraph.11ty.dev/:url/:size/
https://v1.opengraph.11ty.dev/:url/:size/:format/

----------------------------------------

TITLE: Eleventy Front Matter Configuration for Blog Post
DESCRIPTION: YAML front matter configuration for an Eleventy blog post, setting the news title and navigation structure.

LANGUAGE: yaml
CODE:
---
newstitle: MIT's new Digital Humanities site launches using Eleventy!
eleventyNavigation:
  parent: Blog
  key: MIT Digital Humanities
---

----------------------------------------

TITLE: HTML Image Card with Dynamic URL
DESCRIPTION: HTML markup for creating an external link card with a dynamically generated screenshot image using template variables.

LANGUAGE: html
CODE:
<a href="{{ external_url }}" class="elv-externalexempt opengraph-card">
  <img src="https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/" alt="Eleventy v3.0.0: ESM like a Phoenix (the mythical bird, not Arizona)" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Configuring Eleventy Navigation for Projects Page
DESCRIPTION: This snippet sets up the navigation metadata for the Eleventy Projects page using the eleventyNavigation front matter. It specifies the key, title, parent, and order of the page in the navigation structure.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Eleventy Projects
  title: Projects
  parent: Eleventy Documentation
  order: 4
---

----------------------------------------

TITLE: Setting Front Matter for Eleventy Blog Post
DESCRIPTION: Defines the front matter for an Eleventy blog post, including the news title and navigation settings.

LANGUAGE: markdown
CODE:
---
newstitle: "Eleventy and CloudCannon!"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Netlify Content Negotiation Configuration
DESCRIPTION: Netlify redirect rules for implementing content negotiation without language codes in URLs.

LANGUAGE: toml
CODE:
[[redirects]]
  from = "/es/*"
  to = "/:splat"
  status = 301
  force = true

[[redirects]]
  from = "/en/*"
  to = "/:splat"
  status = 301
  force = true

[[redirects]]
  from = "/*"
  to = "/es/:splat"
  status = 200
  conditions = {Language = ["es"]}

[[redirects]]
  from = "/*"
  to = "/en/:splat"
  status = 200

----------------------------------------

TITLE: Configuring Eleventy Blog Post Front Matter in YAML
DESCRIPTION: This YAML snippet defines the front matter for an Eleventy blog post. It sets the news title and configures the navigation parent for the post.

LANGUAGE: yaml
CODE:
---
newstitle: Join our Discord Server!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration for the blog post defining the title and navigation hierarchy

LANGUAGE: yaml
CODE:
---
newstitle: Eight Million npm Downloads!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Configuring Eleventy Navigation for getBundleFileUrl Shortcode
DESCRIPTION: YAML front matter for configuring the Eleventy navigation plugin. It sets up the navigation structure for the getBundleFileUrl shortcode documentation.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: getBundle
  title: "<code>getBundleFileUrl</code>"
  parent: Shortcodes
  order: 1
  url: /docs/plugins/bundle.md
permalink: false
---

----------------------------------------

TITLE: Initializing Horizontal Bar Chart for Template Syntaxes (JavaScript)
DESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the template syntaxes used by Eleventy developers. It imports the HorizontalBar class from a custom module and configures chart options.

LANGUAGE: javascript
CODE:
import "https://d3js.org/d3.v7.min.js";
import { HorizontalBar } from "/static/artificial-chart.js";
new HorizontalBar("result-syntax", "result-syntax-table", {
	showLegend: false,
	showInlineBarValues: "outside",
	valueType: ["float"],
	margin: {
		left: 170
	}
});

----------------------------------------

TITLE: Creating Markdown Content with Layout
DESCRIPTION: Example markdown file showing how to specify a layout in front matter metadata.

LANGUAGE: markdown
CODE:
---
layout: mainlayout.njk
title: My Rad Blog
---

# My Rad Markdown Blog Post

----------------------------------------

TITLE: Final Rendered HTML Output
DESCRIPTION: The final HTML output after the layout chain has been processed, showing how the content flows through multiple layout templates.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Rad Blog</title>
  </head>
  <body>
    <main>
      <h1>My Rad Markdown Blog Post<h1>
    </main>
  </body>
</html>

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for a blog post, setting the news title and navigation parent.

LANGUAGE: yaml
CODE:
---
newstitle: "State of the Jamstack Survey 2020 Results"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Liquid Image Template
DESCRIPTION: Template code for displaying a celebratory image with responsive width configurations

LANGUAGE: liquid
CODE:
{% image "./src/blog/eight-million.jpg", "Zach pointing to the new balloons in his office that say 8 Million", [350, 700], "", "100vw" %}

----------------------------------------

TITLE: Paginating an Object in Eleventy
DESCRIPTION: Shows how to paginate an object in Eleventy. By default, pagination uses Object.keys, but can be configured to use Object.values.

LANGUAGE: nunjucks
CODE:
---
pagination:
  data: testdata
  size: 1
testdata:
  itemkey1: itemvalue1
  itemkey2: itemvalue2
  itemkey3: itemvalue3
---

{{ testdata[ pagination.items[0] ] }}

----------------------------------------

TITLE: Rendering Eleventy Callout Component
DESCRIPTION: Liquid template syntax for rendering an info callout component with Markdown content about the survey.

LANGUAGE: liquid
CODE:
{% callout "info", "md", "New Survey Alert" %}This is last year's survey. You can help Eleventy out again by completing [Survey Awesome (2024)](/blog/survey-awesome/)!{% endcallout %}

----------------------------------------

TITLE: Sample Markdown Post with Tech Tag
DESCRIPTION: An example of a markdown post using the 'tech' tag in its front matter.

LANGUAGE: markdown
CODE:
---
title: My First Post
tags:
  - tech
---

----------------------------------------

TITLE: Configuring Eleventy Blog Post Frontmatter
DESCRIPTION: Sets up the frontmatter for an Eleventy blog post, including title, layout, and computed social description.

LANGUAGE: yaml
CODE:
---
title: Eleventy Blog
layout: layouts/docs.njk
eleventyComputed:
  social:
    description: "An Eleventy blog post published on {{ page.date | newsDate('LLLL yyyy') }}."
---

----------------------------------------

TITLE: Initializing Horizontal Bar Chart for Hosting Services (JavaScript)
DESCRIPTION: This code snippet initializes a horizontal bar chart using D3.js to visualize the hosting services used by Eleventy developers. It imports the HorizontalBar class from a custom module and configures chart options.

LANGUAGE: javascript
CODE:
import "https://d3js.org/d3.v7.min.js";
import { HorizontalBar } from "/static/artificial-chart.js";
new HorizontalBar("result-host", "result-host-table", {
	showLegend: false,
	showInlineBarValues: "outside",
	valueType: ["float"],
	margin: {
		left: 170
	}
});

----------------------------------------

TITLE: Generating JSON Output with Custom Permalink
DESCRIPTION: Shows how to generate a JSON file output by setting a custom file extension in the permalink.

LANGUAGE: markdown
CODE:
---
permalink: "index.json"
---

<%- JSON.stringify(collections.all) -%>

----------------------------------------

TITLE: YAML Front Matter Configuration for Eleventy Blog Post
DESCRIPTION: YAML configuration block defining the news title and navigation structure for an Eleventy blog post about framework stability.

LANGUAGE: yaml
CODE:
---
newstitle: "The Stability of Eleventy"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Creating HTML Template for 404 Page in Eleventy
DESCRIPTION: Basic HTML template for a 404 error page using Eleventy templating. Includes front matter configuration for title and permalink, along with a responsive HTML structure and template variables.

LANGUAGE: html
CODE:
---
title: Oops! Not Found
permalink: 404.html
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{{ title }}</title>
	</head>
	<body>
		<h1>{{ title }}</h1>
		<p>
			This is where you should tell the user how to find their content. Maybe on
			the <a href="/">home page?</a>
		</p>
	</body>
</html>

----------------------------------------

TITLE: IndieWeb Avatar HTML Implementation
DESCRIPTION: Example HTML code showing how to implement the IndieWeb Avatar service with proper image attributes including lazy loading, async decoding, and accessibility features.

LANGUAGE: html
CODE:
<img
	src="https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2F/"
	alt="IndieWeb Avatar for 11ty.dev/"
	loading="lazy"
	decoding="async"
	width="50"
	height="50"
/>
<img
	src="https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.a11yproject.com%2F/"
	alt="IndieWeb Avatar for a11yproject.com/"
	loading="lazy"
	decoding="async"
	width="50"
	height="50"
/>
<img
	src="https://v1.indieweb-avatar.11ty.dev/https%3A%2F%2Fwww.netlify.com%2F/"
	alt="IndieWeb Avatar for netlify.com/"
	loading="lazy"
	decoding="async"
	width="50"
	height="50"
/>

----------------------------------------

TITLE: Rendering Eleventy Blog Post Header with Nunjucks
DESCRIPTION: Generates the blog post header including title, date, author information, and subscription link using Nunjucks templating.

LANGUAGE: nunjucks
CODE:
# {{ newstitle }}

<div class="fl fl-inline fl-separator-h fl-nowrap spc-b2" style="--fl-gap-h: 1.5em; --fl-gap-v: .5em">
  <div>
    <em>{{ page.date | newsDate }}</em>
  </div>
{%- if postAuthor and postAuthors[postAuthor] %}
	<div>
    <a href="{{ postAuthors[postAuthor] }}" class="elv-externalexempt">{% indieavatar postAuthors[postAuthor] %}{{ postAuthor }}</a>
  </div>
{%- endif %}
  <div>
    {% emoji "📢" %} <a href="/blog/feed.xml">Subscribe to the Eleventy News Feed</a>
  </div>
</div>

{{ content | safe }}

----------------------------------------

TITLE: Styling Result Charts (HTML/CSS)
DESCRIPTION: This code snippet defines CSS styles for the result charts, setting the height and color of the bars. It's used to ensure consistent styling across all chart visualizations on the page.

LANGUAGE: html
CODE:
<style>
.result-chart {
	height: 450px;
}
.result-chart .artfc-color-0 {
	fill: #00bbd5;
}
</style>

----------------------------------------

TITLE: Combining Nunjucks and Markdown Processing in Eleventy
DESCRIPTION: Shows how to configure a template to be processed first with Nunjucks and then with Markdown using a comma-separated syntax in the front matter.

LANGUAGE: markdown
CODE:
---
templateEngineOverride: njk,md
---

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining the news title and navigation hierarchy for the blog post.

LANGUAGE: yaml
CODE:
---
newstitle: We're on Product Hunt Today!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Reversing Sorted Collections with getAllSorted().reverse() in Eleventy
DESCRIPTION: Shows how to reverse the default sorting order using getAllSorted().reverse(). This creates a collection sorted in descending order by date and filename.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Use the default sorting algorithm in reverse (descending dir, date, filename)
	// Note that using a template engine's `reverse` filter might be easier here
	eleventyConfig.addCollection("myPostsReverse", function (collectionsApi) {
		return collectionsApi.getAllSorted().reverse();
	});
};

----------------------------------------

TITLE: Styling Blog Highlights with CSS in Eleventy
DESCRIPTION: This CSS snippet defines a class for larger, emphasized blog post titles.

LANGUAGE: css
CODE:
.blog-lrg {
	font-size: 1.25em;
	line-height: 1.1;
}

----------------------------------------

TITLE: Configuring Eleventy Blog Post Frontmatter
DESCRIPTION: YAML frontmatter configuration for an Eleventy blog post, setting the news title and navigation parent.

LANGUAGE: yaml
CODE:
---
newstitle: "The Eleventy Community Survey (2023)"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Configuring Browsersync in Eleventy
DESCRIPTION: Demonstrates how to switch back to using Browsersync instead of the default Eleventy Dev Server with custom configuration options.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setServerOptions({
		module: "@11ty/eleventy-server-browsersync",

		// Default Browsersync options shown:
		port: 8080,
		open: false,
		notify: false,
		ui: false,
		ghostMode: false,

		// Opt-out of the Browsersync snippet
		// snippet: false,
	});
};

----------------------------------------

TITLE: Installing Eleventy v2.0 Beta
DESCRIPTION: Command line instructions for installing the beta version of Eleventy v2.0 either locally in a project or globally on the system.

LANGUAGE: sh
CODE:
# Local project
npm install @11ty/eleventy@beta

# Global install
npm install @11ty/eleventy@beta -g

----------------------------------------

TITLE: Computed Data Configuration in JavaScript
DESCRIPTION: JavaScript configuration file showing how to set up eleventyNavigation using computed data from other properties.

LANGUAGE: javascript
CODE:
export default {
	eleventyComputed: {
		eleventyNavigation: {
			key: (data) => data.title,
			parent: (data) => data.parent,
		},
	},
};

----------------------------------------

TITLE: URL Format for Host Image Endpoint
DESCRIPTION: Endpoint URL format to retrieve the hosting provider's logo for a given website URL. The target URL must be URI encoded.

LANGUAGE: plaintext
CODE:
https://v1.builtwith.11ty.dev/:url/image/host/

----------------------------------------

TITLE: Eleventy Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the documentation page, setting up navigation properties and page metadata.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  key: Order of Operations
  parent: Advanced
  excerpt: How Eleventy works internally.
  order: 1
excludeFromSidebar: true

----------------------------------------

TITLE: Blog Post Frontmatter Configuration in YAML
DESCRIPTION: YAML frontmatter configuration for a blog post, defining the news title and navigation hierarchy within Eleventy.

LANGUAGE: yaml
CODE:
---
newstitle: "The Need for Speed: Why Eleventy Leaves Bundlers Behind"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Implementing Request-Time Processing in Eleventy Dev Server
DESCRIPTION: Shows how to use the onRequest configuration for request-time processing with URL pattern matching and custom response handling.

LANGUAGE: javascript
CODE:
export default function(eleventyConfig) {
	eleventyConfig.setServerOptions({
		onRequest: {
			"/": function({ url }) {
				// will fallback to serve static files if we return any falsy value other than ""
			},
			"/empty": function({ url }) {
				// render an empty page
				return "";
			},
			"/foo/:name": function({ url, pattern, patternGroups }) {
				// patternGroups will include URLPattern matches e.g. /foo/zach => { name: "zach" }
				return {
					status: 200,
					headers: {
						"Content-Type": "text/html",
					},
					body: "Hello."
				};
			}
		}
	});
};

----------------------------------------

TITLE: YouTube Video Embed HTML
DESCRIPTION: HTML iframe code to embed a YouTube video with privacy-enhanced mode and standard video player options.

LANGUAGE: html
CODE:
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/EZfNr-YblBE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

----------------------------------------

TITLE: Adding TOML Support in Eleventy Configuration
DESCRIPTION: Shows how to add support for TOML data files using the @iarna/toml package in Eleventy's configuration.

LANGUAGE: javascript
CODE:
import toml from "@iarna/toml";

export default function (eleventyConfig) {
	eleventyConfig.addDataExtension("toml", (contents) => toml.parse(contents));
};

----------------------------------------

TITLE: Markdown Table of Contents Include
DESCRIPTION: Templating syntax to include a table of contents in the markdown document.

LANGUAGE: markdown
CODE:
{% tableofcontents %}

----------------------------------------

TITLE: Embedding YouTube Video in Eleventy Markdown
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in an Eleventy markdown file using a custom shortcode.

LANGUAGE: markdown
CODE:
{% youtubeEmbed "qP3GDtn-0BQ" %}

----------------------------------------

TITLE: Installing Eleventy Upgrade Helper Plugin
DESCRIPTION: Commands for installing the appropriate version of the Upgrade Helper plugin that matches your target Eleventy version.

LANGUAGE: bash
CODE:
# Upgrading from Eleventy v0 to v1
npm install @11ty/eleventy-upgrade-help@1

# Or, upgrading from Eleventy v1 to v2
npm install @11ty/eleventy-upgrade-help@2

# Or, upgrading from Eleventy v2 to v3
npm install @11ty/eleventy-upgrade-help@3

----------------------------------------

TITLE: Configuring Eleventy Blog Post Metadata in YAML
DESCRIPTION: This YAML block sets up the metadata for an Eleventy blog post, including the news title and navigation parent.

LANGUAGE: yaml
CODE:
---
newstitle: Three Million npm Downloads!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Starter Projects Grid Template
DESCRIPTION: Nunjucks template for rendering a grid of starter projects, handling official, featured, and community projects with conditional logic and speed data integration.

LANGUAGE: nunjucks
CODE:
<div class="sites-vert sites-vert--lg">
  <div class="lo-grid" style="--fl-gap-v: 5em;">
{%- for site in starters | sortObjectByOrder %}
{%- if site.disabled != true and site.official %}
{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}
  {% include "site-card.njk" %}
{%- endif %}{%- endfor %}
{%- for site in starters | sortObjectByOrder %}
{%- if site.disabled != true and site.featured %}
{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}
  {% include "site-card.njk" %}
{%- endif %}{%- endfor %}
{%- for name, site in starters | shuffle %}
{%- if site.disabled != true and not site.official and not site.featured %}
{%- set siteData = speedlifyStarters.data[site.demo] or speedlifyStarters.data[site.url] %}
  {% include "site-card.njk" %}
{%- endif %}{%- endfor %}
  </div>
</div>

----------------------------------------

TITLE: Generating Sparkline Image URL in HTML
DESCRIPTION: This snippet demonstrates how to construct the URL for a sparkline image and embed it in an HTML img tag. It includes parameters for dimensions, values, and color.

LANGUAGE: html
CODE:
<img
	src="https://v1.sparkline.11ty.dev/120x30/41,25,9,12,10,6,12,14,19,17,23,30,36,21,40/%23123456/"
	width="120"
	height="30"
	alt="Sparkline representing frequency of posts written from 2007 to 2021"
	loading="lazy"
	decoding="async"
/>

----------------------------------------

TITLE: Using getAllSorted() Method in Eleventy Collections API
DESCRIPTION: Demonstrates the use of getAllSorted() method to retrieve all items sorted by the default sorting algorithm (ascending by date, filename tiebreaker).

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Use the default sorting algorithm (ascending by date, filename tiebreaker)
	eleventyConfig.addCollection("allMySortedContent", function (collectionsApi) {
		return collectionsApi.getAllSorted();
	});
};

----------------------------------------

TITLE: Generating Canonical Twitter URL in Eleventy using Liquid Filter
DESCRIPTION: Applies a custom Liquid filter to generate a canonical Twitter URL for use in a link.

LANGUAGE: liquid
CODE:
{{ "https://twitter.com/eleven_ty/status/1493284209925967872" | canonicalTwitterUrl }}

----------------------------------------

TITLE: Retrieving Eleventy Output as NDJSON in Node.js
DESCRIPTION: This snippet demonstrates how to use Eleventy's Programmatic API to retrieve the output as NDJSON (Newline Delimited JSON) without writing to the file system. It uses the toNDJSON() method and logs each result to the console.

LANGUAGE: javascript
CODE:
const Eleventy = require("@11ty/eleventy");

async function elev() {
  let elev = new Eleventy();

  try {
    for await (let result of elev.toNDJSON()) {
      console.log( result );
    }
  } catch(e) {
    console.log( "Error writing", e );
  }
}

elev();

----------------------------------------

TITLE: EJS Include Syntax Change
DESCRIPTION: Demonstrates the updated syntax for including files in EJS templates after the v3 upgrade.

LANGUAGE: ejs
CODE:
<%- include('/included') -%>

----------------------------------------

TITLE: Rendering Quick Tips Navigation List
DESCRIPTION: Nunjucks template that iterates over the quicktips collection to generate a list of links to individual tips

LANGUAGE: nunjucks
CODE:
{%- for tip in collections.quicktips %}
- <a href="{{ tip.url }}">{{ tip.data.title }}</a>
{%- endfor %}

----------------------------------------

TITLE: Counter Variable Implementation in Nunjucks
DESCRIPTION: Nunjucks template code for initializing and incrementing a counter variable used for numbering steps.

LANGUAGE: nunjucks
CODE:
{% set count = 0 %}

{% set count = count + 1 %}

----------------------------------------

TITLE: Installing Eleventy v1.0.0 with npm
DESCRIPTION: Commands to install or upgrade Eleventy v1.0.0 using npm. Also mentions a plugin to help with upgrading from 0.x versions.

LANGUAGE: bash
CODE:
npm install @11ty/eleventy
npm update @11ty/eleventy

----------------------------------------

TITLE: Creating External Link with OpenGraph Card in Markdown
DESCRIPTION: This snippet creates a link to an external survey with an OpenGraph card image. It uses Eleventy's templating syntax to insert the external URL and generate a screenshot.

LANGUAGE: markdown
CODE:
<a href="{{ external_url }}" class="elv-externalexempt opengraph-card">
  <img src="https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/" alt="A screenshot of Survey Awesome!" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Responsive Image Card with OpenGraph Preview
DESCRIPTION: HTML markup for a responsive image card that displays an OpenGraph preview of a Meetup event link, including picture element with multiple source formats and sizes.

LANGUAGE: html
CODE:
<a href="https://www.meetup.com/JAMstack-Toronto/events/281278073/" class="elv-externalexempt opengraph-card">
  <picture>
    <source type="image/webp" srcset="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/webp/ 375w, https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/medium/webp/ 650w" sizes="100vw">
    <source type="image/jpeg" srcset="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/jpeg/ 375w, https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/medium/jpeg/ 650w" sizes="100vw">
    <img alt="OpenGraph image for https://www.meetup.com/JAMstack-Toronto/events/281278073/" loading="lazy" decoding="async" src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.meetup.com%2FJAMstack-Toronto%2Fevents%2F281278073%2F/small/jpeg/" width="650" height="341">
  </picture>
  <span>The 11ties: 11 Minute Talks about 11ty on 11/11</span>
</a>

----------------------------------------

TITLE: Rendering Open Collective Supporters Wall in Liquid/HTML
DESCRIPTION: Creates a facepile display of financial contributors to Eleventy, including their avatars, names, donation amounts, and monthly status badges. Excludes Zach Leatherman (project creator) and includes a call-to-action for new contributors.

LANGUAGE: liquid
CODE:
{%- css %}{% include "components/page-supporters.css" %}{% endcss %}

<div class="facepile supporters-facepile fl">
{% for supporter in opencollective.supporters %}
{%- set nameToSlug = supporter.name | slug | lower -%}
{%- if nameToSlug != "zach-leatherman" %}
  <div>
    <a href="{{ supporter.website or supporter.profile }}" class="elv-externalexempt supporters-link" rel="sponsored">{% opencollectiveavatar supporter %}{{ supporter.name }}</a>
    <span class="fl fl-inline fl-nowrap">
        <span class="supporters-hearts">{% supporterAmount supporter.totalAmountDonated %}</span>
        {%- if supporter.isMonthly %}
        <span class="supporters-tier">{% emoji "📅" %} Monthly</span>
        {%- endif %}
    </span>
  </div>
{%- endif %}
{% endfor %}
  <div><a href="https://opencollective.com/11ty"><img src="/img/default-avatar.png" alt="Default Avatar Image" loading="lazy" class="avatar"><strong>and you?</strong> {% emoji "🎁" %}{% emoji "🎁" %}{% emoji "🎁" %}</a></div>
</div>

----------------------------------------

TITLE: Template String Syntax in Front Matter
DESCRIPTION: Example showing how to use template syntax strings in YAML front matter for computed data.

LANGUAGE: markdown
CODE:
---
title: My Page Title
parent: My Parent Key
eleventyComputed:
  eleventyNavigation:
    key: "{{ title }}"
    parent: "{{ parent }}"
---

----------------------------------------

TITLE: Configuring Eleventy Navigation Front Matter in YAML
DESCRIPTION: YAML front matter block that configures the navigation metadata for an Eleventy documentation page about using data.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Documentation
  key: Using Data
  order: 5
communityLinksKey: data
---

----------------------------------------

TITLE: Liquid Template Include Example
DESCRIPTION: Shows the syntax for including a Liquid template file, demonstrating the change in relative path resolution for includes.

LANGUAGE: liquid
CODE:
{% include "./include.liquid" %}

----------------------------------------

TITLE: Frontmatter Configuration for 11ty Blog Post
DESCRIPTION: YAML frontmatter configuration for the blog post, setting up navigation, external URL, and Open Graph image settings.

LANGUAGE: yaml
CODE:
---
newstitle: "11ty is joining Font Awesome"
eleventyNavigation:
  parent: Blog
blogHighlight: true
external_url: https://blog.fontawesome.com/
ogimageOverride: /blog/fa-2.png
---

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the blog post, setting the news title and eleventyNavigation parent property.

LANGUAGE: yaml
CODE:
---
newstitle: Shout out to Jamstack Conf 2021 Jammies Award Winners
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Rendering Eleventy Navigation with Nunjucks
DESCRIPTION: This code snippet shows how to render the Eleventy navigation structure using Nunjucks templating. It filters the collection, generates navigation HTML, and includes excerpts for each item.

LANGUAGE: nunjucks
CODE:
{{ collections.all | eleventyNavigation("Learn") | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}

----------------------------------------

TITLE: Adding Custom JSON File Extension in Eleventy
DESCRIPTION: Demonstrates how to add support for a custom JSON file extension (geojson) in Eleventy's configuration.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addDataExtension("geojson", (contents) =>
		JSON.parse(contents)
	);
};

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the blog post defining the news title and navigation properties

LANGUAGE: yaml
CODE:
---
newstitle: A new Eleventy mascot from Geri Coady
eleventyNavigation:
  parent: Blog
  key: New mascot
---

----------------------------------------

TITLE: Liquid URL Variable Usage
DESCRIPTION: Template syntax for using an external URL variable in a markdown link.

LANGUAGE: liquid
CODE:
{{ external_url }}

----------------------------------------

TITLE: Installing Eleventy 1.0 Beta via NPM
DESCRIPTION: Command line instructions for installing the Eleventy 1.0 Beta release either locally in a project or globally on the system using NPM.

LANGUAGE: bash
CODE:
# Local project
npm install @11ty/eleventy@beta

# Global install
npm install @11ty/eleventy@beta -g

----------------------------------------

TITLE: Adding CSS to a Bundle in Markdown/Liquid Template
DESCRIPTION: This example shows how to add CSS to a bundle within a markdown file using Liquid template syntax. The CSS is added using the css shortcode and will be removed from the rendered output.

LANGUAGE: liquid
CODE:
# My Blog Post

This is some content, I am writing markup.

{% css %}
em { font-style: italic; }
{% endcss %}

## More Markdown

{% css %}
strong { font-weight: bold; }
{% endcss %}

----------------------------------------

TITLE: Using JSON Front Matter in Eleventy HTML Templates
DESCRIPTION: Demonstrates how to use JSON syntax for front matter in an HTML template in Eleventy.

LANGUAGE: html
CODE:
---json
{
  "title": "My page title"
}
---

<!DOCTYPE html>
<html>
	…
</html>

----------------------------------------

TITLE: Adding EXIF Image Data Support in Eleventy
DESCRIPTION: Shows how to add support for reading EXIF data from image files using the exifr package and integrating it into Eleventy's data cascade.

LANGUAGE: javascript
CODE:
import exifr from "exifr";

export default function (eleventyConfig) {
	eleventyConfig.addDataExtension("png,jpeg", {
		parser: async (file) => {
			let exif = await exifr.parse(file);

			return {
				exif,
			};
		},

		// Using `read: false` changes the parser argument to
		// a file path instead of file contents.
		read: false,
	});
};

----------------------------------------

TITLE: Configuring YAML Front Matter for JSNation Blog Post
DESCRIPTION: YAML front matter configuration for a blog post about JSNation awards, including the post title and Eleventy navigation settings.

LANGUAGE: yaml
CODE:
---
newstitle: JSNation Open Source Awards 2020
eleventyNavigation:
  parent: Blog
  key: JSNation 2020
---

----------------------------------------

TITLE: Displaying Year-over-Year Metrics Table in HTML
DESCRIPTION: This HTML table presents year-over-year metrics for Eleventy, comparing 2023 and 2024 data with percentage changes. It includes metrics such as npm downloads and GitHub issue and pull request closures.

LANGUAGE: html
CODE:
<table>
	<thead>
		<tr>
			<th>Year over Year Metric</th>
			<th class="numeric">2023</th>
			<th class="numeric">2024</th>
			<th class="numeric">Change</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>npm Downloads</td>
			<td class="numeric">2,915,939</td>
			<td class="numeric">3,125,404</td>
			<td class="numeric numeric-up">7.18%</td>
		</tr>
		<tr>
			<td>GitHub Issues Closed</td>
			<td class="numeric">519</td>
			<td class="numeric">695</td>
			<td class="numeric numeric-up">33.91%</td>
		</tr>
		<tr>
			<td>GitHub Pull Requests Closed</td>
			<td class="numeric">197</td>
			<td class="numeric">326</td>
			<td class="numeric numeric-up">65.48%</td>
		</tr>
	</tbody>
</table>

----------------------------------------

TITLE: Extended Business Profile Configuration in JSON
DESCRIPTION: Complete JSON configuration example including optional business_name property for customizing the displayed business name separately from the site name.

LANGUAGE: json
CODE:
{
	"url": "https://www.zachleat.com/",
	"name": "Zach Leatherman",
	"twitter": "zachleat",
	"business_url": "https://www.zachleat.com/hire-me/",
	"business_name": "zachleat Web Design Company"
}

----------------------------------------

TITLE: YAML Front Matter Configuration for 11ty Blog Post
DESCRIPTION: YAML configuration block defining the news title and navigation parent for an 11ty blog post about the conference.

LANGUAGE: yaml
CODE:
---
newstitle: "11ty Conference is this week!"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Syntax Highlighting JavaScript Function Example
DESCRIPTION: Example of using the syntax highlighting plugin to highlight JavaScript code.

LANGUAGE: javascript
CODE:
function myFunction() {
	return true;
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Blog Post in Markdown
DESCRIPTION: This snippet sets up the front matter for an Eleventy blog post, including the title and navigation parent. It demonstrates how to structure metadata for an Eleventy page using YAML syntax within a Markdown file.

LANGUAGE: markdown
CODE:
---
newstitle: How do I get an Eleventy Sticker?
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Displaying an Image with Nunjucks in Eleventy
DESCRIPTION: This snippet shows how to use the Eleventy image plugin with Nunjucks templating to display an image. It specifies the image source, alt text, and desired image widths.

LANGUAGE: nunjucks
CODE:
{% image "./src/img/mascots/david.svg", "A possum in glasses suspended from a red balloon", [800] %}

----------------------------------------

TITLE: Embedding YouTube Video in Eleventy using Liquid
DESCRIPTION: Uses a custom Liquid tag to embed a YouTube video in the Eleventy blog post. The tag takes a YouTube video ID as a parameter.

LANGUAGE: liquid
CODE:
{% youtubeEmbed "ix5mPa6D7ZA" %}

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the blog post, setting the news title and navigation parent.

LANGUAGE: markdown
CODE:
---
newstitle: "We're running an 11ty Conference!"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Embedding OpenGraph Image for 11ty.dev in HTML
DESCRIPTION: Shows how to use the OpenGraph Image API to embed an image for 11ty.dev, including responsive image attributes.

LANGUAGE: html
CODE:
<img
	src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2F/small/"
	alt="OpenGraph image for 11ty.dev"
	loading="lazy"
	decoding="async"
	width="375"
	height="197"
/>

----------------------------------------

TITLE: Rendering Retired Plugins List with Eleventy Navigation
DESCRIPTION: Uses Eleventy's navigation plugin and Nunjucks templating to generate an HTML list of retired plugins. It filters the 'collections.all' array for items under 'Retired Plugins' and converts the navigation structure to HTML with excerpts shown.

LANGUAGE: nunjucks
CODE:
{{ collections.all | eleventyNavigation("Retired Plugins") | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}

----------------------------------------

TITLE: Configuring YAML Front Matter for Eleventy Blog Post
DESCRIPTION: This YAML front matter sets up metadata for an Eleventy blog post, including the news title, navigation parent, and an external URL for the survey.

LANGUAGE: yaml
CODE:
---
newstitle: Help Eleventy by filling out Survey Awesome!
eleventyNavigation:
  parent: Blog
external_url: https://survey.awesome.me/?from=11ty
---

----------------------------------------

TITLE: Configuring Eleventy Navigation in Markdown Frontmatter
DESCRIPTION: This snippet demonstrates how to set up Eleventy navigation in the frontmatter of a Markdown file. It specifies the parent page and the key for the current page in the navigation structure.

LANGUAGE: yaml
CODE:
---
newstitle: A new Eleventy mascot from David Neal!
eleventyNavigation:
  parent: Blog
  key: Newer mascot
---

----------------------------------------

TITLE: Defining Eleventy Front Matter Configuration
DESCRIPTION: YAML front matter configuration that excludes this page from search functionality.

LANGUAGE: yaml
CODE:
---
excludeFromSearch: true
---

----------------------------------------

TITLE: Nunjucks Image Template Tags
DESCRIPTION: Image template tags for displaying milestone celebration graphics with responsive sizing

LANGUAGE: nunjucks
CODE:
{% image "./src/blog/sevenmilgraph.png", "A line chart showing Eleventy's downloads per year", [350, 700], "", "100vw" %}

LANGUAGE: nunjucks
CODE:
{% image "./src/blog/sevenmil.jpg", "Zach pointing to the new balloons in his office that say 7 Million", [350, 700], "", "100vw" %}

----------------------------------------

TITLE: Configuring RSS Plugin with PostHTML Rendering Options
DESCRIPTION: Advanced configuration for the RSS plugin, including PostHTML rendering options to control output formatting.

LANGUAGE: javascript
CODE:
import pluginRss from "@11ty/eleventy-plugin-rss";

export default function (eleventyConfig) {
	eleventyConfig.addPlugin(pluginRss, {
		posthtmlRenderOptions: {
			closingSingleTag: "default", // opt-out of <img/>-style XHTML single tags
		},
	});
};

----------------------------------------

TITLE: Creating External Link Card with Screenshot in HTML
DESCRIPTION: HTML markup for creating a linked card that displays a screenshot of the Eleventy Wikipedia page using the 11ty screenshot service.

LANGUAGE: html
CODE:
<a href="{{ external_url }}" class="elv-externalexempt opengraph-card">
  <img src="https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/" alt="A screenshot of the Wikipedia page for Eleventy" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Configuring Eleventy Navigation and Post Metadata in Markdown
DESCRIPTION: This snippet demonstrates how to set up front matter for an Eleventy blog post, including the post title and navigation configuration.

LANGUAGE: markdown
CODE:
---
newstitle: "Jamstack Community Survey 2022 Results"
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Graceful Error Handling with eleventy-fetch
DESCRIPTION: This snippet shows how to implement graceful error handling when fetching GitHub repository data. It uses a try-catch block to return a default value if the request fails.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

export default async function () {
	try {
		// https://developer.github.com/v3/repos/#get
		let json = await EleventyFetch(
			"https://api.github.com/repos/11ty/eleventy",
			{
				duration: "1d", // 1 day
				type: "json", // also supports "text" or "buffer"
			}
		);

		return {
			stargazers: json.stargazers_count,
		};
	} catch (e) {
		console.log("Failed getting GitHub stargazers count, returning 0");
		return {
			stargazers: 0,
		};
	}
};

----------------------------------------

TITLE: Embedding YouTube Video in Eleventy
DESCRIPTION: Uses a custom Eleventy shortcode to embed a YouTube video into the page.

LANGUAGE: liquid
CODE:
{% youtubeEmbed "nypsmn70ipI" %}

----------------------------------------

TITLE: Plugin Transform Order Example
DESCRIPTION: Shows how transforms are added and ordered when used within Eleventy plugins.

LANGUAGE: javascript
CODE:
eleventyConfig.addPlugin(eleventyConfig => {
	eleventyConfig.addTransform("third", () => {});
});
eleventyConfig.addTransform("first", () => {});
eleventyConfig.addTransform("second", () => {});

----------------------------------------

TITLE: Markdown Link Implementation
DESCRIPTION: Shows how to use the InputPath to URL plugin with Markdown link syntax

LANGUAGE: markdown
CODE:
[Home](my-template.md)

----------------------------------------

TITLE: Liquid Template Callout Block
DESCRIPTION: A template block using Liquid syntax to create a callout section with an update notice and HTML content.

LANGUAGE: liquid
CODE:
{% callout %}<strong>Updated September 11, 2024</strong>: As <a href="/blog/eleventy-font-awesome/">11ty is now joining Font Awesome</a>, we're winding down our sustainability fundraising campaign. I sincerely appreciate everyone that donated!{% endcallout %}

----------------------------------------

TITLE: Configuring Eleventy Blog Post Metadata in YAML
DESCRIPTION: This YAML snippet defines metadata for an Eleventy blog post, including the news title and navigation settings.

LANGUAGE: yaml
CODE:
---
newstitle: New Eleventy YouTube Channel
eleventyNavigation:
  parent: Blog
  key: Eleventy YouTube Channel
---

----------------------------------------

TITLE: Using Image Data Shortcode in Templates
DESCRIPTION: Example of using the dataCascadeImage shortcode in a Markdown template to generate responsive image HTML with the processed image stats from the Data Cascade.

LANGUAGE: liquid
CODE:
{% dataCascadeImage image.stats, "My alt text" %}

----------------------------------------

TITLE: Installing Eleventy v2.0.0 via npm
DESCRIPTION: Commands to install Eleventy v2.0.0 locally or globally using npm.

LANGUAGE: sh
CODE:
# Local project
npm install @11ty/eleventy@latest

# Global install
npm install @11ty/eleventy@latest -g

----------------------------------------

TITLE: CommonJS Module Implementation
DESCRIPTION: Shows how to implement the plugin using CommonJS module syntax

LANGUAGE: javascript
CODE:
module.exports = function (data) {
  return `<a href="my-template.md">Home</a>`;
};

----------------------------------------

TITLE: Markdown Callout for Upgrade Helper
DESCRIPTION: A callout block in Markdown syntax recommending the use of the eleventy-upgrade-helper plugin.

LANGUAGE: markdown
CODE:
{% callout "info", "md" %}Rather than review this list, it'd be faster to use the `eleventy-upgrade-helper` plugin, which runs a suite of tests to see whether or not you need to worry about these breaking changes in your project: https://github.com/11ty/eleventy-upgrade-help{% endcallout %}

----------------------------------------

TITLE: Initializing Eleventy Blog Post Frontmatter in Markdown
DESCRIPTION: Sets up the frontmatter for an Eleventy blog post, including the news title and navigation settings.

LANGUAGE: markdown
CODE:
---
newstitle: Full Time Open Source Development for Eleventy, sponsored by Netlify
eleventyNavigation:
  parent: Blog
  key: Eleventy Open Source
---

----------------------------------------

TITLE: Rendering Navigation HTML with Eleventy Liquid Template
DESCRIPTION: Liquid template code that generates HTML navigation by filtering all collections and applying eleventyNavigation and eleventyNavigationToHtml filters with excerpt display enabled.

LANGUAGE: liquid
CODE:
{{ collections.all | eleventyNavigation("Advanced") | eleventyNavigationToHtml({ showExcerpt: true }) | safe }}

----------------------------------------

TITLE: YAML Front Matter Configuration for Eleventy Blog Post
DESCRIPTION: YAML configuration block defining the news title and navigation hierarchy for the blog post in the Eleventy static site generator.

LANGUAGE: yaml
CODE:
---
newstitle: Four Million npm Downloads!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Installing Eleventy i18n Plugin
DESCRIPTION: Shows how to add the internationalization plugin to an Eleventy configuration file with basic language settings.

LANGUAGE: javascript
CODE:
module.exports = function(eleventyConfig) {
  eleventyConfig.addPlugin(EleventyI18nPlugin, {
    defaultLanguage: "en", // Required
    errorMode: "strict" // throw errors for missing content
  });
};

----------------------------------------

TITLE: Changing Cache Directory for Eleventy Fetch
DESCRIPTION: Example of specifying a custom cache directory for Eleventy Fetch. It's recommended to add this directory to .gitignore for security reasons.

LANGUAGE: javascript
CODE:
import Fetch from "@11ty/eleventy-fetch";

await Fetch("https://…", {
	directory: ".cache",
});

----------------------------------------

TITLE: Donation Buckets Display Template
DESCRIPTION: Template loop for displaying donation amounts and associated contributors grouped by donation level.

LANGUAGE: nunjucks
CODE:
{%- for donation,count in opencollectiveMonthly.buckets %}
- `{{ donation | displayPrice }}` _(×{{ count }}) {{ opencollectiveMonthly.names[donation] | join(", ") }}_
{%- endfor %}

----------------------------------------

TITLE: YAML Front Matter Configuration for Blog Post
DESCRIPTION: YAML front matter configuration block defining the news title and navigation parent for an Eleventy blog post

LANGUAGE: yaml
CODE:
newstitle: Two Million npm Downloads!
eleventyNavigation:
  parent: Blog

----------------------------------------

TITLE: Generating a List of Eleventy Plugins using Nunjucks
DESCRIPTION: This Nunjucks template iterates over a collection of plugins, shuffling them and generating a markdown list. Each list item includes the plugin name, URL, description, and author information.

LANGUAGE: nunjucks
CODE:
{%- for name, plugin in plugins | shuffle %}
{%- set url = plugin.url or "https://www.npmjs.com/package/" + plugin.npm %}
- [{% if plugin.deprecated %}~~{% endif %}{{ plugin.npm }}{% if plugin.deprecated %}~~{% endif %}]({{ url }}){% if plugin.description %} {% if plugin.deprecated %}~~{% endif %}{{ plugin.description }}{% if plugin.deprecated %}~~{% endif %}{% endif %} {{ plugin.deprecated }} {% authorLink authors, plugin.author %}
{%- endfor %}

----------------------------------------

TITLE: Nunjucks Template Include
DESCRIPTION: Include statement for the mascots template partial

LANGUAGE: nunjucks
CODE:
{% include "mascots.njk" %}

----------------------------------------

TITLE: Installing Eleventy Major Version Updates
DESCRIPTION: Commands for upgrading Eleventy to different major versions (v1, v2, or v3) using npm.

LANGUAGE: bash
CODE:
# Upgrading from Eleventy v0 to v1
npm install @11ty/eleventy@1

# Or, upgrading from Eleventy v1 to v2
npm install @11ty/eleventy@2

# Or, upgrading from Eleventy v2 to v3
npm install @11ty/eleventy@3

----------------------------------------

TITLE: Configuring Eleventy Navigation and Metadata in Markdown
DESCRIPTION: This snippet sets up the front matter for an Eleventy blog post, including the title and navigation configuration.

LANGUAGE: markdown
CODE:
---
newstitle: An Homage to the James Williamson Possum Balloon
eleventyNavigation:
  parent: Blog
  key: Logo homage
---

----------------------------------------

TITLE: Basic Business Profile Configuration in JSON
DESCRIPTION: Minimal JSON configuration example showing required fields for listing a business profile, including the mandatory business_url property.

LANGUAGE: json
CODE:
{
	"url": "https://www.zachleat.com/",
	"name": "Zach Leatherman",
	"twitter": "zachleat",
	"business_url": "https://www.zachleat.com/hire-me/"
}

----------------------------------------

TITLE: Disabling .gitignore Usage in Eleventy Configuration
DESCRIPTION: Demonstrates how to disable the automatic use of .gitignore file in Eleventy, making .eleventyignore the single source of truth for ignored files.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.setUseGitIgnore(false);
};

----------------------------------------

TITLE: Eleventy Page Front Matter Configuration in Markdown
DESCRIPTION: YAML front matter configuration for an Eleventy page, setting the news title and navigation parent.

LANGUAGE: markdown
CODE:
---
newstitle: Eleventy Super Professional Linkedin Certification
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Embedding OpenGraph Card in HTML for 11ty Conference
DESCRIPTION: Creates an HTML link with an embedded OpenGraph image card for the 11ty Conference registration page.

LANGUAGE: html
CODE:
<a href="https://conf.11ty.dev/#register" class="elv-externalexempt opengraph-card">
  <img src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fconf.11ty.dev%2F/medium/" alt="The 11ty International Symposium on Making Web Sites Real Good" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Configuring Pagination and Page Settings in JavaScript for Eleventy
DESCRIPTION: This snippet sets up pagination for author data, defines the permalink structure, and configures layout settings for the author profile page.

LANGUAGE: javascript
CODE:
let pagination = {
	data: "authors",
	size: 1,
	alias: "author",
	resolve: "values",
	generatePageOnEmptyData: true,
};
let permalink = "/authors/{{ author.name | slugify }}/";
let excludeFromSearch = true;
let layout = "layouts/docs.njk";

----------------------------------------

TITLE: Certification Form Implementation in HTML
DESCRIPTION: A simple HTML form implementation with a checkbox input and submit button, styled with custom classes for Eleventy's design system.

LANGUAGE: html
CODE:
<form action="/blog/certification/success/" class="fl fl-nowrap fl-center">
	<label class="elv-type4">
		<input type="checkbox" required> I heard Eleventy was good
	</label>
	<button class="btn-primary btn-primary-sm benchnine rainbow-active rainbow-active-noanim elv-externalexempt">Certify Me</button>
</form>

----------------------------------------

TITLE: Liquid Template for Navigation Display
DESCRIPTION: A template that iterates through migration-related content and displays it as a list with optional icons. Uses Liquid templating syntax with Eleventy collections.

LANGUAGE: liquid
CODE:
<ul class="list-bare">
{%- for post in collections.migrations %}
	<li><a href="{{ post.url }}">{% if post.data.iconUrl %}{% indieavatar post.data.iconUrl %}{% endif %}{{ post.data.title }}</a></li>
{%- endfor %}
</ul>

----------------------------------------

TITLE: YAML Frontmatter Configuration for Code of Conduct Page
DESCRIPTION: YAML configuration block that sets up the page metadata and navigation properties for the Code of Conduct document in the Eleventy project.

LANGUAGE: yaml
CODE:
---
headerTitle: Eleventy Community
eleventyNavigation:
  key: Code of Conduct
  parent: Community
  order: -1
---

----------------------------------------

TITLE: Running Eleventy in Quiet Mode
DESCRIPTION: Command to run Eleventy with reduced console output for a quieter operation.

LANGUAGE: bash
CODE:
# Shhhhh—Don't log so much to the console
npx @11ty/eleventy --quiet

----------------------------------------

TITLE: YAML Front Matter Configuration for Eleventy Blog Post
DESCRIPTION: YAML front matter configuration for an Eleventy blog post, defining the news title, navigation parent, and external URL reference.

LANGUAGE: yaml
CODE:
---
newstitle: "Eleventy v3.0.0-beta.1 now available"
eleventyNavigation:
  parent: Blog
external_url: https://github.com/11ty/eleventy/releases/tag/v3.0.0-beta.1
---

----------------------------------------

TITLE: Using JavaScript Object Front Matter in Nunjucks Templates
DESCRIPTION: Demonstrates how to use a JavaScript object for front matter in a Nunjucks template, including a function property.

LANGUAGE: html
CODE:
---js
{
  title: "My page title",
  currentDate: function() {
    // You can have a JavaScript function here!
    return (new Date()).toLocaleString();
  }
}
---

<h1>{{ title }}</h1>
<p>Published on {{ currentDate() }}</p>

----------------------------------------

TITLE: Configuring Eleventy Navigation and Page Exclusion in YAML
DESCRIPTION: This YAML front matter configures the page's navigation key and excludes it from the sidebar in Eleventy.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: Credits
excludeFromSidebar: true
---

----------------------------------------

TITLE: Installing Eleventy v3.0 Alpha Release
DESCRIPTION: Command to install the alpha release of Eleventy v3.0 from the canary channel. The --save-exact flag is recommended to ensure consistent versioning.

LANGUAGE: sh
CODE:
npm install @11ty/eleventy@canary --save-exact

----------------------------------------

TITLE: Configuring Eleventy Navigation Front Matter in YAML
DESCRIPTION: Front matter configuration that sets up the navigation hierarchy for the Advanced documentation section. Specifies the parent page, navigation key, and ordering.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Documentation
  key: Advanced
  order: 10
---

----------------------------------------

TITLE: Frontmatter Configuration in Markdown
DESCRIPTION: YAML frontmatter configuration for the community page, setting up navigation properties and display flags.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Eleventy Documentation
  key: Community
  order: 2.5
ignoreSupporters: true
ignoreGitHubButtons: true
---

----------------------------------------

TITLE: Exporting Buffer Content in JavaScript for Eleventy
DESCRIPTION: Demonstrates how to export content as a Buffer, which is useful for some templating libraries like viperHTML.

LANGUAGE: javascript
CODE:
export default Buffer.from("<p>Zách</p>");

LANGUAGE: javascript
CODE:
module.exports = Buffer.from("<p>Zách</p>");

----------------------------------------

TITLE: Windows CMD Debug Mode
DESCRIPTION: Command to enable debug mode in Eleventy using Windows Command Prompt.

LANGUAGE: sh
CODE:
set DEBUG=Eleventy* & npx @11ty/eleventy

----------------------------------------

TITLE: Eleventy 404 Page Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the 404 error page template, setting the layout, permalink, and collection exclusion.

LANGUAGE: yaml
CODE:
---
layout: layouts/docs.njk
permalink: 404.html
eleventyExcludeFromCollections: true
---

----------------------------------------

TITLE: Configuring Eleventy Navigation in YAML
DESCRIPTION: YAML front matter for configuring Eleventy navigation settings, including parent and key properties.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  parent: Deployment
  key: Using a CMS
---

----------------------------------------

TITLE: Framework Integration with Petite Vue
DESCRIPTION: Example of integrating Petite Vue framework with is-land for partial hydration.

LANGUAGE: html
CODE:
<is-land on:visible autoinit="petite-vue" import="https://unpkg.com/petite-vue@0.4.1/dist/petite-vue.es.js" v-scope="{ name: 'post-JS' }">
	Hello from <span v-html="name">pre-JS</span>
</is-land>

----------------------------------------

TITLE: Testimonials Loop Template
DESCRIPTION: Nunjucks template code for displaying featured testimonials using a shuffle filter and conditional rendering.

LANGUAGE: nunjucks
CODE:
{%- for testimonial in testimonials | shuffle %}
{%- if testimonial.featured %}
		<div>{% testimonial testimonial %}</div>
{%- endif %}
{%- endfor %}

----------------------------------------

TITLE: Updating CommonJS Configuration for Eleventy v3.0
DESCRIPTION: Example of how to update CommonJS configuration files to use dynamic imports for Eleventy plugins in v3.0. This is necessary for projects continuing to use CommonJS.

LANGUAGE: js
CODE:
module.exports = async function (eleventyConfig) {
	// Any combination of these
	const { I18nPlugin, RenderPlugin, HtmlBasePlugin } = await import(
		"@11ty/eleventy"
	);

	// …
};

----------------------------------------

TITLE: Rendering External Link with OpenGraph Card in Markdown
DESCRIPTION: This Markdown snippet creates a linked OpenGraph card using an external URL and a screenshot service. It includes an image with alt text, lazy loading, and responsive dimensions.

LANGUAGE: markdown
CODE:
<a href="{{ external_url }}" class="elv-externalexempt opengraph-card">
  <img src="https://v1.screenshot.11ty.dev/{{ external_url | urlencode }}/opengraph/" alt="So you want to speak at the 11ty International Symposium on Making Web Sites Real Good" loading="lazy" decoding="async" width="650" height="341">
</a>

----------------------------------------

TITLE: Configuring Eleventy Frontmatter for Blog Post
DESCRIPTION: This YAML frontmatter configures metadata for an Eleventy blog post, including the news title, navigation parent, and an external URL for the speaker submission form.

LANGUAGE: yaml
CODE:
---
newstitle: "We want you to speak at the 11ty Conference!"
eleventyNavigation:
  parent: Blog
external_url: https://docs.google.com/forms/d/e/1FAIpQLScdwhO1zfEBvl8mVAJQLWbK0EylD4yPCBpe3Lanz8SvFPI9Xg/viewform
---

----------------------------------------

TITLE: YouTube Video Embed Shortcode
DESCRIPTION: Nunjucks template shortcode for embedding a YouTube video using a custom youtubeEmbed tag.

LANGUAGE: nunjucks
CODE:
{% youtubeEmbed "mZUTXX13X-I" %}

----------------------------------------

TITLE: Eleventy Blog Post Frontmatter
DESCRIPTION: YAML frontmatter configuration for the blog post, setting the title and navigation parent

LANGUAGE: yaml
CODE:
---
newstitle: Seven Million npm Downloads!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Configuring Eleventy Navigation and Page Metadata
DESCRIPTION: Sets up the page metadata and Eleventy navigation configuration using YAML front matter. It defines the news title and sets the parent navigation item to 'Blog'.

LANGUAGE: markdown
CODE:
---
newstitle: Six Million npm Downloads!
eleventyNavigation:
  parent: Blog
---

----------------------------------------

TITLE: Configuring Eleventy Page Front Matter in YAML
DESCRIPTION: YAML front matter block that sets various page properties for an Eleventy-based website, including the page title, navigation parent, permalink, and collection exclusion flags.

LANGUAGE: yaml
CODE:
---
newstitle: Eleventy Super Professional Linkedin Certification
eleventyNavigation:
  parent: Blog
permalink: /blog/certification/success/
eleventyExcludeFromCollections: true
hideRelatedBlogPosts: true
---

----------------------------------------

TITLE: Using Callout Component in Liquid Template
DESCRIPTION: Displays an info callout message with HTML link directing users to the new documentation location

LANGUAGE: liquid
CODE:
{% callout "info" %}This documentation has moved into the <a href="/docs/">Get Started</a> instructions.{% endcallout %}

----------------------------------------

TITLE: Eleventy Template Configuration (YAML)
DESCRIPTION: YAML frontmatter configuration for the documentation page, setting navigation properties and layout.

LANGUAGE: yaml
CODE:
eleventyNavigation:
  parent: JavaScript
  key: JavaScript Template Literals
layout: layouts/langs.njk
excludeFromSidebar: true

----------------------------------------

TITLE: Configuring Eleventy Navigation for 11ty Bundle Page
DESCRIPTION: Sets up navigation properties for the 11ty Bundle resource page, including its key, parent, URL, order, and excerpt. The permalink is set to false to prevent generating a separate output file.

LANGUAGE: yaml
CODE:
---
eleventyNavigation:
  key: 11ty Bundle
  parent: Learn
  url: https://11tybundle.dev/
  order: 4
  excerpt: All of the 11ty resources, curated by Bob Monsour!
permalink: false
---

----------------------------------------

TITLE: Specifying a Custom Config File for Eleventy
DESCRIPTION: Command to override the default Eleventy project config filename and use a custom configuration file.

LANGUAGE: bash
CODE:
# Override the default eleventy project config filename (.eleventy.js)
npx @11ty/eleventy --config=myeleventyconfig.js

----------------------------------------

TITLE: Configuring Eleventy Navigation Frontmatter
DESCRIPTION: YAML frontmatter configuration that sets up navigation properties and collections for the Quick Tips section

LANGUAGE: yaml
CODE:
eleventyNavigation:
  key: Quick Tips
  parent: Eleventy Projects
  order: 7
  excerpt: A selection of common use cases.
communityLinksKey: quicktips
eleventyImport:
  collections: ["quicktips"]

----------------------------------------

TITLE: Defining JSON Data Structure for Possum Pages
DESCRIPTION: JSON data structure containing an array of possum objects with name and age properties. This data will be used to generate individual pages.

LANGUAGE: js
CODE:
[
	{
		name: "Fluffy",
		age: 2,
	},
	{
		name: "Snugglepants",
		age: 5,
	},
	{
		name: "Lord Featherbottom",
		age: 4,
	},
	{
		name: "Pennywise",
		age: 9,
	},
];

----------------------------------------

TITLE: Excluding Content from Collections
DESCRIPTION: Demonstrates how to exclude content from all collections using eleventyExcludeFromCollections in front matter

LANGUAGE: markdown
CODE:
---
eleventyExcludeFromCollections: true
tags: post
---

This will not be available in `collections.all` or `collections.post`.

----------------------------------------

TITLE: Defining the eleventy Variable Structure in JavaScript
DESCRIPTION: Shows the structure and properties of the eleventy variable, which contains Eleventy-specific data like version, generator string, and environment information.

LANGUAGE: javascript
CODE:
const eleventy = {
	version: "1.0.1",
	generator: "Eleventy v1.0.1",
	env: {
		root: "/Users/zachleat/myProject/",
		config: "/Users/zachleat/myProject/.eleventy.js",
		source: "cli",
		runMode: "build",
	},
	directories: {
		"input": "./",
		"includes": "./_includes/",
		"data": "./_data/",
		"output": "./_site/"
	},
};

----------------------------------------

TITLE: Filtering Tags in Eleventy Pagination (Nunjucks)
DESCRIPTION: This Nunjucks template demonstrates how to exclude specific tags (in this case, 'tech') from the automatic tag page generation using Eleventy's pagination filtering feature.

LANGUAGE: markdown
CODE:
---
pagination:
  data: collections
  size: 1
  alias: tag
  filter:
    - tech
permalink: /tags/{{ tag }}/
---

----------------------------------------

TITLE: Sample Markdown Post with Personal Tag
DESCRIPTION: An example of a markdown post using the 'personal' tag in its front matter.

LANGUAGE: markdown
CODE:
---
title: My Second Post
tags:
  - personal
---

----------------------------------------

TITLE: Running Eleventy Without an Initial Build
DESCRIPTION: Commands to run Eleventy without performing an initial build, only building on file changes. This is useful for faster startup times but requires caution.

LANGUAGE: bash
CODE:
# Don't build when Eleventy starts, only build on file changes
npx @11ty/eleventy --watch --ignore-initial
npx @11ty/eleventy --serve --ignore-initial

# Works great with Incremental
npx @11ty/eleventy --serve --incremental --ignore-initial

----------------------------------------

TITLE: Excerpt Output Example
DESCRIPTION: Shows how the content is rendered after excerpt processing

LANGUAGE: text
CODE:
This is the start of my content and this will be shown as the excerpt.
This is a continuation of my content…

----------------------------------------

TITLE: Aliasing Template Language Extensions in Eleventy
DESCRIPTION: Shows how to create aliases for existing template languages using the key property in configuration.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addExtension("11ty.jsx", {
		key: "11ty.js",
	});

	eleventyConfig.addExtension(["11ty.jsx", "11ty.ts", "11ty.tsx"], {
		key: "11ty.js",
	});
};

----------------------------------------

TITLE: Paginating a Global Data File in Eleventy
DESCRIPTION: Demonstrates how to paginate data from a global data file in Eleventy.

LANGUAGE: nunjucks
CODE:
---
pagination:
  data: globalDataSet.myData
  size: 2
---

----------------------------------------

TITLE: Configuring Markdown-Only Processing in Eleventy
DESCRIPTION: Demonstrates how to set a template to be processed only with Markdown, bypassing any additional template preprocessing.

LANGUAGE: markdown
CODE:
---
templateEngineOverride: md
---

----------------------------------------

TITLE: Embedding OpenGraph Image for a11yproject.com in HTML
DESCRIPTION: Demonstrates embedding an OpenGraph image for a11yproject.com using the API service, with responsive image attributes.

LANGUAGE: html
CODE:
<img
	src="https://v1.opengraph.11ty.dev/https%3A%2F%2Fwww.a11yproject.com%2F/small/"
	alt="OpenGraph image for a11yproject.com"
	loading="lazy"
	decoding="async"
	width="375"
	height="197"
/>

----------------------------------------

TITLE: Embedding Screenshot Image in HTML
DESCRIPTION: Shows how to embed a screenshot generated by the Eleventy Screenshot API in an HTML img tag, including width, height, and loading attributes.

LANGUAGE: html
CODE:
<img
	src="https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/bigger/"
	class="screenshot screenshot-first-example"
	width="375"
	height="667"
	loading="lazy"
	decoding="async"
	alt="Screenshot of 11ty.dev"
/>

----------------------------------------

TITLE: Implementing Memoized Filter in Eleventy Configuration
DESCRIPTION: This code snippet demonstrates how to use the 'memoize' library to create a memoized Liquid filter in Eleventy. It imports the memoize function and applies it to a custom htmlEntities filter, which encodes a given string.

LANGUAGE: javascript
CODE:
import memoize from "memoize";

export default function(eleventyConfig) {
	eleventyConfig.addLiquidFilter("htmlEntities", memoize(str => {
		return encode(str);
	}));
};

----------------------------------------

TITLE: Configuring Image Data Extension in Eleventy
DESCRIPTION: Configuration code that sets up image processing for PNG and JPEG files, adding them to the Data Cascade. It creates a custom data extension parser that processes images using @11ty/eleventy-img and adds a shortcode for generating HTML.

LANGUAGE: javascript
CODE:
import path from "node:path";
import Image from "@11ty/eleventy-img";

export default function (eleventyConfig) {
	eleventyConfig.addDataExtension("png,jpeg", {
		read: false, // Don't read the input file, argument is now a file path
		parser: async (imagePath) => {
			let stats = await Image(imagePath, {
				widths: ["auto"],
				formats: ["avif", "webp", "jpeg"],
				outputDir: path.join(eleventyConfig.dir.output, "img", "built"),
			});

			return {
				image: {
					stats,
				},
			};
		},
	});

	// This works sync or async: images were processed ahead of time in the data cascade
	eleventyConfig.addShortcode("dataCascadeImage", (stats, alt, sizes) => {
		let imageAttributes = {
			alt,
			sizes,
			loading: "lazy",
			decoding: "async",
		};
		return Image.generateHTML(stats, imageAttributes);
	});
};

----------------------------------------

TITLE: Custom Filter Access in Configuration
DESCRIPTION: Demonstrates how to access existing filters within the configuration file using getFilter method.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	eleventyConfig.addShortcode("myCustomImage", function (url, alt) {
		return `<img src="${eleventyConfig.getFilter("url")(url)}" alt="${alt}">`;
	});
};

----------------------------------------

TITLE: Changing Output Directory in Eleventy Passthrough Copy
DESCRIPTION: This snippet shows how to change the output directory for passthrough file copy by passing an object instead of a string. It includes examples of copying to subdirectories and using different input sources.

LANGUAGE: javascript
CODE:
export default function (eleventyConfig) {
	// Input directory: src
	// Output directory: _site

	// Copy `img/` to `_site/subfolder/img`
	eleventyConfig.addPassthroughCopy({ img: "subfolder/img" });

	// Copy `src/img/` to `_site/subfolder/img`
	eleventyConfig.addPassthroughCopy({ "src/img": "subfolder/img" });

	// Copy `random-folder/img/` to `_site/subfolder/img`
	eleventyConfig.addPassthroughCopy({ "random-folder/img": "subfolder/img" });
};

----------------------------------------

TITLE: Using Template Syntax in Permalink
DESCRIPTION: Demonstrates using Liquid/Nunjucks template syntax and filters in the permalink definition.

LANGUAGE: yaml
CODE:
---
title: This is a New Path
permalink: "subdir/{{ title | slugify }}/index.html"
---

----------------------------------------

TITLE: Setting Custom Permalink in Frontmatter
DESCRIPTION: Example of setting a custom permalink in a template's YAML front matter to remap the output location.

LANGUAGE: yaml
CODE:
---
permalink: "this-is-a-new-path/subdirectory/testing/"
---

----------------------------------------

TITLE: Liquid Template Render Syntax Example
DESCRIPTION: Example of Liquid template render syntax referenced in the documentation for the render plugin.

LANGUAGE: liquid
CODE:
{% renderFile %}