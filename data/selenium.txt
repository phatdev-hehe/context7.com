TITLE: User Creation and Login Setup
DESCRIPTION: Creates a test user with read-only permissions and logs them into the application using the Page Object pattern. Demonstrates proper test setup using API calls rather than UI interactions.

LANGUAGE: Java
CODE:
User user = UserFactory.createCommonUser();
AccountPage accountPage = loginAs(user.getEmail(), user.getPassword());

LANGUAGE: Python
CODE:
user = user_factory.create_common_user()
account_page = login_as(user.get_email(), user.get_password())

LANGUAGE: C#
CODE:
User user = UserFactory.CreateCommonUser();
AccountPage accountPage = LoginAs(user.Email, user.Password);

----------------------------------------

TITLE: Relative Locators Implementation
DESCRIPTION: Examples of using Selenium 4's relative locators to find elements based on their spatial relationship to other elements

LANGUAGE: Java
CODE:
By emailLocator = RelativeLocator.with(By.tagName("input")).above(By.id("password"));

LANGUAGE: Python
CODE:
email_locator = locate_with(By.TAG_NAME, "input").above({By.ID: "password"})

----------------------------------------

TITLE: Implementing Basic Page Object for Selenium WebDriver in Java
DESCRIPTION: This code snippet demonstrates a basic Page Object implementation for a GitHub issue creation page using Selenium WebDriver. It includes methods for setting various fields on the page.

LANGUAGE: java
CODE:
package com.example.webdriver;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class EditIssue {

  private final WebDriver driver;

  public EditIssue(WebDriver driver) {
    this.driver = driver;
  }

  public void setTitle(String title) {
    WebElement field = driver.findElement(By.id("issue_title")));
    clearAndType(field, title);
  }

  public void setBody(String body) {
    WebElement field = driver.findElement(By.id("issue_body"));
    clearAndType(field, body);
  }

  public void setHowToReproduce(String howToReproduce) {
    WebElement field = driver.findElement(By.id("issue_form_repro-command"));
    clearAndType(field, howToReproduce);
  }

  public void setLogOutput(String logOutput) {
    WebElement field = driver.findElement(By.id("issue_form_logs"));
    clearAndType(field, logOutput);
  }

  public void setOperatingSystem(String operatingSystem) {
    WebElement field = driver.findElement(By.id("issue_form_operating-system"));
    clearAndType(field, operatingSystem);
  }

  public void setSeleniumVersion(String seleniumVersion) {
    WebElement field = driver.findElement(By.id("issue_form_selenium-version"));
    clearAndType(field, logOutput);
  }

  public void setBrowserVersion(String browserVersion) {
    WebElement field = driver.findElement(By.id("issue_form_browser-versions"));
    clearAndType(field, browserVersion);
  }

  public void setDriverVersion(String driverVersion) {
    WebElement field = driver.findElement(By.id("issue_form_browser-driver-versions"));
    clearAndType(field, driverVersion);
  }

  public void setUsingGrid(String usingGrid) {
    WebElement field = driver.findElement(By.id("issue_form_selenium-grid-version"));
    clearAndType(field, usingGrid);
  }

  public IssueList submit() {
    driver.findElement(By.cssSelector("button[type='submit']")).click();
    return new IssueList(driver);
  }

  private void clearAndType(WebElement field, String text) {
    field.clear();
    field.sendKeys(text);
  }
}

----------------------------------------

TITLE: Setting Implicit Wait for Element Location
DESCRIPTION: Establishes a waiting strategy by setting an implicit wait. This ensures that the WebDriver waits for a specified time before throwing a NoSuchElementException when trying to find an element.

LANGUAGE: Java
CODE:
driver.manage().timeouts().implicitlyWait(Duration.ofMillis(500));

LANGUAGE: Python
CODE:
driver.implicitly_wait(0.5)

LANGUAGE: C#
CODE:
driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromMilliseconds(500);

LANGUAGE: Ruby
CODE:
driver.manage.timeouts.implicit_wait = 500 # milliseconds

LANGUAGE: JavaScript
CODE:
await driver.manage().setTimeouts({ implicit: 500 });

LANGUAGE: Kotlin
CODE:
driver.manage().timeouts().implicitlyWait(Duration.ofMillis(500))

----------------------------------------

TITLE: Ending a Selenium Session
DESCRIPTION: Demonstrates how to properly end a Selenium session by quitting the WebDriver. This closes the browser and releases associated resources.

LANGUAGE: Java
CODE:
driver.quit();

LANGUAGE: Python
CODE:
driver.quit()

LANGUAGE: C#
CODE:
driver.Quit();

LANGUAGE: Ruby
CODE:
driver.quit

LANGUAGE: JavaScript
CODE:
await driver.quit();

LANGUAGE: Kotlin
CODE:
driver.quit()

----------------------------------------

TITLE: Interacting with Web Elements
DESCRIPTION: Shows how to interact with web elements by inputting text into a text box and clicking a button. These are common actions in web automation.

LANGUAGE: Java
CODE:
textBox.sendKeys("Selenium");
submitButton.click();

LANGUAGE: Python
CODE:
text_box.send_keys("Selenium")
submit_button.click()

LANGUAGE: C#
CODE:
textBox.SendKeys("Selenium");
submitButton.Click();

LANGUAGE: Ruby
CODE:
text_box.send_keys 'Selenium'
submit_button.click

LANGUAGE: JavaScript
CODE:
await textBox.sendKeys('Selenium');
await submitButton.click();

LANGUAGE: Kotlin
CODE:
textBox.sendKeys("Selenium")
submitButton.click()

----------------------------------------

TITLE: Navigating to a Web Page
DESCRIPTION: Uses the WebDriver to navigate to a specific URL. This demonstrates how to interact with the browser and load a web page.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/web-form.html");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/web-form.html")

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/web-form.html");

LANGUAGE: Ruby
CODE:
driver.get 'https://www.selenium.dev/selenium/web/web-form.html'

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/web-form.html');

LANGUAGE: Kotlin
CODE:
driver["https://www.selenium.dev/selenium/web/web-form.html"]

----------------------------------------

TITLE: Starting a Selenium Session
DESCRIPTION: Initializes a new WebDriver instance to begin a Selenium session. This is the first step in creating a Selenium script and allows interaction with the browser.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()

LANGUAGE: C#
CODE:
IWebDriver driver = new ChromeDriver();

LANGUAGE: Ruby
CODE:
driver = Selenium::WebDriver.for :chrome

LANGUAGE: JavaScript
CODE:
let driver = await new Builder().forBrowser('chrome').build();

LANGUAGE: Kotlin
CODE:
val driver = ChromeDriver()

----------------------------------------

TITLE: Clicking an Element with Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to click an element on a web page using Selenium WebDriver. It navigates to a specific URL and then clicks an element identified by its name attribute.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
driver.findElement(By.name("color_input")).click();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
color_input = driver.find_element(By.NAME, "color_input")
color_input.click()

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/inputs.html");
driver.FindElement(By.Name("color_input")).Click();

LANGUAGE: Ruby
CODE:
@driver.find_element(name: 'color_input').click

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html');
await driver.findElement(By.name('color_input')).click();

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

// Click the element
driver.findElement(By.name("color_input")).click();

----------------------------------------

TITLE: Comprehensive Login Page Object Implementation in Java
DESCRIPTION: A detailed example of a login page object showcasing best practices, including constructor checks, locator definitions, and service methods.

LANGUAGE: java
CODE:
public class LoginPage {
    private final WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;

        if (!"Login".equals(driver.getTitle())) {
            throw new IllegalStateException("This is not the login page");
        }
    }

    By usernameLocator = By.id("username");
    By passwordLocator = By.id("passwd");
    By loginButtonLocator = By.id("login");

    public LoginPage typeUsername(String username) {
        driver.findElement(usernameLocator).sendKeys(username);
        return this;	
    }

    public LoginPage typePassword(String password) {
        driver.findElement(passwordLocator).sendKeys(password);
        return this;	
    }

    public HomePage submitLogin() {
        driver.findElement(loginButtonLocator).submit();
        return new HomePage(driver);	
    }

    public LoginPage submitLoginExpectingFailure() {
        driver.findElement(loginButtonLocator).submit();
        return new LoginPage(driver);	
    }

    public HomePage loginAs(String username, String password) {
        typeUsername(username);
        typePassword(password);
        return submitLogin();
    }
}

----------------------------------------

TITLE: Bot Pattern Implementation for Selenium Actions
DESCRIPTION: Implementation of the Bot Pattern providing command-style abstractions over raw Selenium WebDriver APIs with enhanced error handling and input processing.

LANGUAGE: java
CODE:
public class ActionBot {
  private final WebDriver driver;

  public ActionBot(WebDriver driver) {
    this.driver = driver;
  }

  public void click(By locator) {
    driver.findElement(locator).click();
  }

  public void type(By locator, String text) {
    WebElement element = driver.findElement(locator);
    element.clear();
    element.sendKeys(text + "\n");
  }
}

----------------------------------------

TITLE: Navigating to a URL with Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to navigate to a specific URL using Selenium WebDriver. It shows both the convenient and longer methods of navigation.

LANGUAGE: Java
CODE:
driver.get("https://selenium.dev");

// Longer way
driver.navigate().to("https://selenium.dev");

LANGUAGE: Python
CODE:
driver.get("https://selenium.dev")

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://selenium.dev");

LANGUAGE: Ruby
CODE:
driver.get 'https://selenium.dev'

LANGUAGE: JavaScript
CODE:
await driver.get('https://selenium.dev');

LANGUAGE: Kotlin
CODE:
//Convenient
driver.get("https://selenium.dev")

//Longer way
driver.navigate().to("https://selenium.dev")

----------------------------------------

TITLE: Sign-In Page Object Implementation in Java
DESCRIPTION: A page object class representing the sign-in page, encapsulating locators and providing methods for interacting with the page.

LANGUAGE: java
CODE:
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class SignInPage {
  protected WebDriver driver;

  private By usernameBy = By.name("user_name");
  private By passwordBy = By.name("password");
  private By signinBy = By.name("sign_in");

  public SignInPage(WebDriver driver){
    this.driver = driver;
     if (!driver.getTitle().equals("Sign In Page")) {
      throw new IllegalStateException("This is not Sign In Page," +
            " current page is: " + driver.getCurrentUrl());
    }
  }

  public HomePage loginValidUser(String userName, String password) {
    driver.findElement(usernameBy).sendKeys(userName);
    driver.findElement(passwordBy).sendKeys(password);
    driver.findElement(signinBy).click();
    return new HomePage(driver);
  }
}

----------------------------------------

TITLE: Using CSS Selector in Selenium
DESCRIPTION: Shows how to locate an element using a CSS selector, specifically finding an element with the ID 'fname'.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();
driver.findElement(By.cssSelector("#fname"));

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()
driver.find_element(By.CSS_SELECTOR, "#fname")

LANGUAGE: C#
CODE:
var driver = new ChromeDriver();
driver.FindElement(By.CssSelector("#fname"));

LANGUAGE: Ruby
CODE:
driver.find_element(css: '#fname')

LANGUAGE: JavaScript
CODE:
let driver = await new Builder().forBrowser('chrome').build();
const loc = await driver.findElement(By.css('#fname'));

LANGUAGE: Kotlin
CODE:
val driver = ChromeDriver()
val loc: WebElement = driver.findElement(By.css("#fname"))

----------------------------------------

TITLE: Implementing Implicit Wait in Selenium
DESCRIPTION: Demonstrates setting up implicit wait functionality to automatically wait for elements. This is a global setting that applies to all element location attempts in the session.

LANGUAGE: Java
CODE:
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
driver.get("https://www.selenium.dev/selenium/web/dynamic.html");
driver.findElement(By.id("adder")).click();
String added = driver.findElement(By.className("added")).getText();

LANGUAGE: Python
CODE:
driver.implicitly_wait(2)
driver.get("https://www.selenium.dev/selenium/web/dynamic.html")
driver.find_element(By.ID, "adder").click()
added = driver.find_element(By.CLASS_NAME, "added").text

----------------------------------------

TITLE: Implementing Login DSL Method in Java with Selenium
DESCRIPTION: This Java method demonstrates a DSL approach for handling user login in Selenium tests. It encapsulates the process of finding elements, inputting credentials, and submitting the login form, returning an AccountPage object.

LANGUAGE: java
CODE:
/**
 * Takes a username and password, fills out the fields, and clicks "login".
 * @return An instance of the AccountPage
 */
public AccountPage loginAsUser(String username, String password) {
  WebElement loginField = driver.findElement(By.id("loginField"));
  loginField.clear();
  loginField.sendKeys(username);

  // Fill out the password field. The locator we're using is "By.id", and we should
  // have it defined elsewhere in the class.
  WebElement passwordField = driver.findElement(By.id("password"));
  passwordField.clear();
  passwordField.sendKeys(password);

  // Click the login button, which happens to have the id "submit".
  driver.findElement(By.id("submit")).click();

  // Create and return a new instance of the AccountPage (via the built-in Selenium
  // PageFactory).
  return PageFactory.newInstance(AccountPage.class);
}

----------------------------------------

TITLE: Installing Selenium with Python setup.py
DESCRIPTION: Alternative installation method using Python setup.py script.

LANGUAGE: shell
CODE:
python setup.py install

----------------------------------------

TITLE: Implementing Basic Page Object for GitHub Issue Creation
DESCRIPTION: Basic Page Object implementation for GitHub's new issue page. Demonstrates element locators and basic form interactions without using LoadableComponent pattern.

LANGUAGE: java
CODE:
public class EditIssue {
  private final WebDriver driver;

  public EditIssue(WebDriver driver) {
    this.driver = driver;
  }

  public void setTitle(String title) {
    WebElement field = driver.findElement(By.id("issue_title")));
    clearAndType(field, title);
  }

  // Additional methods omitted for brevity
}

----------------------------------------

TITLE: Configuring NuGet for Selenium (C#)
DESCRIPTION: Configuration settings for NuGet to enable Selenium package installation in Visual Studio Code.

LANGUAGE: xml
CODE:
<configuration>
  <packageSources>
    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
    <add key="nuget.org" value="https://www.nuget.org/api/v2/" />   
  </packageSources>
...

----------------------------------------

TITLE: Configuring HTTP Client in Java for Selenium
DESCRIPTION: This snippet demonstrates how to configure the HTTP client for Selenium in Java. It shows setting connection and read timeouts, as well as configuring proxy settings.

LANGUAGE: Java
CODE:
package dev.selenium.drivers;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.manager.SeleniumManagerOutput.Result;
import org.openqa.selenium.remote.http.ClientConfig;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

class HttpClientTest {

    @Test
    public void testConnectionTimeout() {
        ChromeOptions options = new ChromeOptions();
        options.setCapability("webdriver.http.factory", "jdk-http-client");
        ClientConfig clientConfig = ClientConfig.defaultConfig()
                .connectionTimeout(Duration.ofSeconds(10));
        options.setCapability("se:cdpEnabled", true);
        options.setCapability("webdriver.http.factory", "jdk-http-client");
        WebDriver driver = new ChromeDriver(options);

        try {
            ClientConfig clientConfig = ClientConfig.defaultConfig().connectionTimeout(Duration.ofSeconds(10));
            ChromeOptions options = new ChromeOptions();
            options.setCapability("webdriver.http.factory", "jdk-http-client");
            WebDriver driver = new ChromeDriver(options);
            driver.get("https://www.selenium.dev/");
        } finally {
            driver.quit();
        }
    }

    @Test
    public void testProxy() throws MalformedURLException {
        ClientConfig clientConfig = ClientConfig.defaultConfig()
                .proxy(new ClientConfig.ProxyConfig("proxy.com", 8080))
                .baseUrl(new URL("http://localhost:4444"));
        ChromeOptions options = new ChromeOptions();
        options.setCapability("webdriver.http.factory", "jdk-http-client");
        WebDriver driver = new ChromeDriver(options);

        try {
            driver.get("https://www.selenium.dev/");
        } finally {
            driver.quit();
        }
    }

    @Test
    public void testReadTimeout() {
        ClientConfig clientConfig = ClientConfig.defaultConfig()
                .readTimeout(Duration.ofMinutes(3));
        ChromeOptions options = new ChromeOptions();
        options.setCapability("webdriver.http.factory", "jdk-http-client");
        WebDriver driver = new ChromeDriver(options);

        try {
            driver.get("https://www.selenium.dev/");
        } finally {
            driver.quit();
        }
    }
}

----------------------------------------

TITLE: Clicking Elements with Selenium WebDriver
DESCRIPTION: Demonstrates how to click on web elements using Selenium's click() method. The click is executed at the center of the element after ensuring it is both visible and interactable.

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

// Click the element
driver.findElement(By.name("color_input")).click();

----------------------------------------

TITLE: Finding the First Matching Element in Java
DESCRIPTION: Demonstrates how to find the first element matching a class name using Selenium WebDriver in Java.

LANGUAGE: Java
CODE:
WebElement vegetable = driver.findElement(By.className("tomatoes"));

----------------------------------------

TITLE: Installing Selenium with NuGet Package Manager (C#)
DESCRIPTION: Installing Selenium for C# using the NuGet package manager.

LANGUAGE: shell
CODE:
Install-Package Selenium.WebDriver

----------------------------------------

TITLE: HTML Form Example
DESCRIPTION: Sample HTML code showing a contact form with various input elements used to demonstrate locator strategies

LANGUAGE: HTML
CODE:
<html>
<body>
<style>
.information {
  background-color: white;
  color: black;
  padding: 10px;
}
</style>
<h2>Contact Selenium</h2>

<form>
  <input type="radio" name="gender" value="m" />Male &nbsp;
  <input type="radio" name="gender" value="f" />Female <br>
  <br>
  <label for="fname">First name:</label><br>
  <input class="information" type="text" id="fname" name="fname" value="Jane"><br><br>
  <label for="lname">Last name:</label><br>
  <input class="information" type="text" id="lname" name="lname" value="Doe"><br><br>
  <label for="newsletter">Newsletter:</label>
  <input type="checkbox" name="newsletter" value="1" /><br><br>
  <input type="submit" value="Submit">
</form>

<p>To know more about Selenium, visit the official page 
<a href ="www.selenium.dev">Selenium Official Page</a>
</p>

</body>
</html>

----------------------------------------

TITLE: HTML Structure Example
DESCRIPTION: Sample HTML structure showing nested lists of vegetables and fruits used for demonstration purposes.

LANGUAGE: html
CODE:
<ol id="vegetables">
 <li class="potatoes">…
 <li class="onions">…
 <li class="tomatoes"><span>Tomato is a Vegetable</span>…
</ol>
<ul id="fruits">
  <li class="bananas">…
  <li class="apples">…
  <li class="tomatoes"><span>Tomato is a Fruit</span>…
</ul>

----------------------------------------

TITLE: Finding First Element in DOM
DESCRIPTION: Example of finding the first matching element in the entire DOM using different locator strategies across multiple programming languages.

LANGUAGE: java
CODE:
WebElement vegetable = driver.findElement(By.className("tomatoes"));

LANGUAGE: python
CODE:
vegetable = driver.find_element(By.CLASS_NAME, "tomatoes")

----------------------------------------

TITLE: Starting Selenium Grid Hub
DESCRIPTION: Command to start the Selenium Grid Hub, which includes Router, Distributor, Session Map, New Session Queue, and Event Bus components.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar hub

----------------------------------------

TITLE: Creating Local WebDriver Session
DESCRIPTION: Examples of initializing a local WebDriver session across different programming languages. These snippets demonstrate how to create a new browser session with local driver configurations.

LANGUAGE: Java
CODE:
driver = new ChromeDriver();

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()

LANGUAGE: C#
CODE:
IWebDriver driver = new ChromeDriver();

LANGUAGE: Ruby
CODE:
driver = Selenium::WebDriver.for :chrome

LANGUAGE: JavaScript
CODE:
driver = await new Builder().forBrowser('chrome').build();

----------------------------------------

TITLE: Installing Selenium with Maven (Java)
DESCRIPTION: Adding Selenium dependency to a Maven Java project by specifying it in the pom.xml file.

LANGUAGE: xml
CODE:
testImplementation 'org.seleniumhq.selenium:selenium-java'

----------------------------------------

TITLE: Getting Element Text in Selenium
DESCRIPTION: Demonstrates how to retrieve the visible text of an element using the getText() method. Returns the rendered text of the element as a string.

LANGUAGE: Java
CODE:
String text = driver.findElement(By.id("justanotherlink")).getText();

LANGUAGE: Python
CODE:
text = driver.find_element(By.ID, "justanotherlink").text

LANGUAGE: C#
CODE:
string text = driver.FindElement(By.Id("justanotherlink")).Text;

LANGUAGE: Ruby
CODE:
driver.find_element(id: 'justanotherlink').text

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/linked_image.html')
const element = await driver.findElement(By.id('justanotherlink'))
const text = await element.getText()

LANGUAGE: Kotlin
CODE:
val text = driver.findElement(By.id("justanotherlink")).getText()

----------------------------------------

TITLE: Using Relative Locators in Selenium 4
DESCRIPTION: Demonstrates the use of relative locators introduced in Selenium 4, such as 'above', 'below', 'toLeftOf', and 'toRightOf'.

LANGUAGE: Java
CODE:
By emailLocator = RelativeLocator.with(By.tagName("input")).above(By.id("password"));
By passwordLocator = RelativeLocator.with(By.tagName("input")).below(By.id("email"));
By cancelLocator = RelativeLocator.with(By.tagName("button")).toLeftOf(By.id("submit"));
By submitLocator = RelativeLocator.with(By.tagName("button")).toRightOf(By.id("cancel"));

LANGUAGE: Python
CODE:
email_locator = locate_with(By.TAG_NAME, "input").above({By.ID: "password"})
password_locator = locate_with(By.TAG_NAME, "input").below({By.ID: "email"})
cancel_locator = locate_with(By.TAG_NAME, "button").to_left_of({By.ID: "submit"})
submit_locator = locate_with(By.TAG_NAME, "button").to_right_of({By.ID: "cancel"})

LANGUAGE: C#
CODE:
var emailLocator = RelativeBy.WithLocator(By.TagName("input")).Above(By.Id("password"));
var passwordLocator = RelativeBy.WithLocator(By.TagName("input")).Below(By.Id("email"));
var cancelLocator = RelativeBy.WithLocator(By.tagName("button")).LeftOf(By.Id("submit"));
var submitLocator = RelativeBy.WithLocator(By.tagName("button")).RightOf(By.Id("cancel"));

LANGUAGE: Ruby
CODE:
email_locator = {locate_with: {tag_name: 'input'}, above: {id: 'password'}}
password_locator = {locate_with: {tag_name: 'input'}, below: {id: 'email'}}
cancel_locator = {locate_with: {tag_name: 'button'}, left: {id: 'submit'}}
submit_locator = {locate_with: {tag_name: 'button'}, right: {id: 'cancel'}}

LANGUAGE: JavaScript
CODE:
let emailLocator = locateWith(By.tagName('input')).above(By.id('password'));
let passwordLocator = locateWith(By.tagName('input')).below(By.id('email'));
let cancelLocator = locateWith(By.tagName('button')).toLeftOf(By.id('submit'));
let submitLocator = locateWith(By.tagName('button')).toRightOf(By.id('cancel'));

LANGUAGE: Kotlin
CODE:
val emailLocator = RelativeLocator.with(By.tagName("input")).above(By.id("password"))
val passwordLocator = RelativeLocator.with(By.tagName("input")).below(By.id("email"))
val cancelLocator = RelativeLocator.with(By.tagName("button")).toLeftOf(By.id("submit"))
val submitLocator = RelativeLocator.with(By.tagName("button")).toRightOf(By.id("cancel"))

----------------------------------------

TITLE: Sending Keys to an Element with Selenium WebDriver
DESCRIPTION: This snippet shows how to send keys (type text) into an input element using Selenium WebDriver. It navigates to a specific URL, clears any existing text in the input field, and then types a new value.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
WebElement input = driver.findElement(By.name("email_input"));
input.clear();
input.sendKeys("admin@localhost.dev");
assert input.getAttribute("value").equals("admin@localhost.dev");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
email_input = driver.find_element(By.NAME, "email_input")
email_input.clear()
email_input.send_keys("admin@localhost.dev")
assert email_input.get_attribute("value") == "admin@localhost.dev"

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/inputs.html");
var emailInput = driver.FindElement(By.Name("email_input"));
emailInput.Clear();
emailInput.SendKeys("admin@localhost.dev");
Assert.That(emailInput.GetAttribute("value"), Is.EqualTo("admin@localhost.dev"));

LANGUAGE: Ruby
CODE:
@driver.find_element(name: 'email_input').send_keys('admin@localhost.dev')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html');
const emailInput = await driver.findElement(By.name('email_input'));
await emailInput.clear();
await emailInput.sendKeys('admin@localhost.dev');
const value = await emailInput.getAttribute('value');
assert.strictEqual(value, 'admin@localhost.dev');

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

//Clear field to empty it from any previous data
driver.findElement(By.name("email_input")).clear()

// Enter text 
driver.findElement(By.name("email_input")).sendKeys("admin@localhost.dev")

----------------------------------------

TITLE: Implementing Explicit Wait in Selenium
DESCRIPTION: Shows how to use explicit waits to poll for specific conditions before proceeding. Includes examples with lambda expressions and various wait conditions.

LANGUAGE: Java
CODE:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(2));
WebElement element = wait.until(d -> d.findElement(By.className("added")));

LANGUAGE: Python
CODE:
wait = WebDriverWait(driver, 2)
element = wait.until(lambda d: d.find_element(By.CLASS_NAME, "added"))

----------------------------------------

TITLE: Finding Elements on a Web Page
DESCRIPTION: Demonstrates how to locate elements on a web page using different locator strategies. This example finds a text input element and a submit button.

LANGUAGE: Java
CODE:
WebElement textBox = driver.findElement(By.name("my-text"));
WebElement submitButton = driver.findElement(By.cssSelector("button"));

LANGUAGE: Python
CODE:
text_box = driver.find_element(By.NAME, "my-text")
submit_button = driver.find_element(By.CSS_SELECTOR, "button")

LANGUAGE: C#
CODE:
IWebElement textBox = driver.FindElement(By.Name("my-text"));
IWebElement submitButton = driver.FindElement(By.CssSelector("button"));

LANGUAGE: Ruby
CODE:
text_box = driver.find_element(name: 'my-text')
submit_button = driver.find_element(css: 'button')

LANGUAGE: JavaScript
CODE:
let textBox = await driver.findElement(By.name('my-text'));
let submitButton = await driver.findElement(By.css('button'));

LANGUAGE: Kotlin
CODE:
val textBox = driver.findElement(By.name("my-text"))
val submitButton = driver.findElement(By.cssSelector("button"))

----------------------------------------

TITLE: Checking Element Selection State in Selenium
DESCRIPTION: This snippet demonstrates how to use the isSelected() method to check if an element (typically checkboxes, radio buttons, or option elements) is selected. It returns a boolean value indicating the selection state.

LANGUAGE: Java
CODE:
boolean isSelected = driver.findElement(By.name("checkbox_input")).isSelected();

LANGUAGE: Python
CODE:
is_selected = driver.find_element(By.NAME, "checkbox_input").is_selected()

LANGUAGE: C#
CODE:
bool isSelected = driver.FindElement(By.Name("checkbox_input")).Selected;

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(name: 'checkbox_input').selected?).to be false

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.name('checkbox_input'))
const isSelected = await element.isSelected()

LANGUAGE: Kotlin
CODE:
val attr =  driver.findElement(By.name("checkbox_input")).isSelected()

----------------------------------------

TITLE: Sending Keys to Active Element in Selenium WebDriver
DESCRIPTION: Demonstrates how to send keys to the currently active element using the Actions API in Selenium WebDriver.

LANGUAGE: Java
CODE:
new Actions(driver)
    .sendKeys("Selenium!")
    .perform();

LANGUAGE: Python
CODE:
Actions(driver)\
    .send_keys("Selenium!")\
    .perform()

LANGUAGE: C#
CODE:
new Actions(driver)
    .SendKeys("Selenium!")
    .Perform();

LANGUAGE: Ruby
CODE:
Actions.new(driver)
  .send_keys('Selenium!')
  .perform

LANGUAGE: JavaScript
CODE:
await driver.actions()
    .sendKeys("Selenium!")
    .perform();

LANGUAGE: Kotlin
CODE:
Actions(driver)
    .sendKeys("Selenium!")
    .perform()

----------------------------------------

TITLE: Installing Selenium with pip (Python)
DESCRIPTION: Installing Selenium Python bindings using pip package manager.

LANGUAGE: shell
CODE:
pip install selenium

----------------------------------------

TITLE: Invoking Selenium Manager to Manage Chromedriver
DESCRIPTION: Example of using Selenium Manager to automatically manage chromedriver, detecting the local Chrome installation and downloading the appropriate driver version.

LANGUAGE: shell
CODE:
$ ./selenium-manager --browser chrome --debug
DEBUG   chromedriver not found in PATH
DEBUG   chrome detected at C:\Program Files\Google\Chrome\Application\chrome.exe
DEBUG   Running command: wmic datafile where name='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' get Version /value
DEBUG   Output: "\r\r\n\r\r\nVersion=116.0.5845.111\r\r\n\r\r\n\r\r\n\r"
DEBUG   Detected browser: chrome 116.0.5845.111
DEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG   Required driver: chromedriver 116.0.5845.96
DEBUG   Downloading chromedriver 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/win64/chromedriver-win64.zip
INFO    Driver path: C:\Users\boni\.cache\selenium\chromedriver\win64\116.0.5845.96\chromedriver.exe
INFO    Browser path: C:\Program Files\Google\Chrome\Application\chrome.exe

----------------------------------------

TITLE: Sending Keys to an Element with Selenium WebDriver
DESCRIPTION: Shows how to use the sendKeys method to input text into a web element. The example navigates to a specific URL, clears any existing text, and then enters an email address into an input field.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
WebElement input = driver.findElement(By.name("email_input"));
input.clear();
input.sendKeys("admin@localhost.dev");
assertThat(input.getAttribute("value")).isEqualTo("admin@localhost.dev");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

email_input = driver.find_element(By.NAME, "email_input")
email_input.clear()
email_input.send_keys("admin@localhost.dev")
assert email_input.get_attribute("value") == "admin@localhost.dev"

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/inputs.html");
var emailInput = driver.FindElement(By.Name("email_input"));
emailInput.Clear();
emailInput.SendKeys("admin@localhost.dev");
Assert.That(emailInput.GetAttribute("value"), Is.EqualTo("admin@localhost.dev"));

LANGUAGE: Ruby
CODE:
@driver.find_element(name: 'email_input').send_keys('admin@localhost.dev')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html');
let emailInput = await driver.findElement(By.name('email_input'));
await emailInput.clear();
await emailInput.sendKeys('admin@localhost.dev');

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

//Clear field to empty it from any previous data
driver.findElement(By.name("email_input")).clear()

// Enter text 
driver.findElement(By.name("email_input")).sendKeys("admin@localhost.dev")

----------------------------------------

TITLE: Class Name Locator Example
DESCRIPTION: Examples of using class name locator across different programming languages to find elements with specific class names

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();
driver.findElement(By.className("information"));

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()
driver.find_element(By.CLASS_NAME, "information")

----------------------------------------

TITLE: Clearing Form Elements
DESCRIPTION: Demonstrates how to clear the content of editable elements using the clear() method. This is applicable to text input fields and content-editable elements.

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

//Clear field to empty it from any previous data
driver.findElement(By.name("email_input")).clear()

----------------------------------------

TITLE: Drag and Drop Operations in Selenium
DESCRIPTION: Demonstrates how to perform drag and drop operations using Selenium Actions API, both between elements and by offset coordinates.



----------------------------------------

TITLE: Adding Network Intercept in Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to add a network intercept using Selenium WebDriver's bidirectional API. It allows intercepting network requests matching a specific pattern.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addIntercept("*", builder -> builder
        .addHeader("intercepted-header", "intercepted-value"));

----------------------------------------

TITLE: Retrieving Element Text Content in Selenium
DESCRIPTION: This snippet demonstrates how to use the getText() method to retrieve the rendered text of an element. It returns the visible text content as a string.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/linked_image.html");
String text = driver.findElement(By.id("justanotherlink")).getText();

LANGUAGE: Python
CODE:
text = driver.find_element(By.ID, "justanotherlink").text

LANGUAGE: C#
CODE:
driver.Url = "https://www.selenium.dev/selenium/web/linked_image.html";
string text = driver.FindElement(By.Id("justanotherlink")).Text;

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(id: 'justanotherlink').text).to eq('Open the new link')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/linked_image.html')
const element = await driver.findElement(By.id('justanotherlink'))
const text = await element.getText()

LANGUAGE: Kotlin
CODE:
val text = driver.findElement(By.id("justanotherlink")).getText()

----------------------------------------

TITLE: Implementing Bot Pattern for Selenium WebDriver in Java
DESCRIPTION: This code snippet demonstrates the Bot Pattern approach for Selenium WebDriver. It provides a set of reusable actions that abstract common WebDriver operations, allowing for easier maintenance and customization of test actions.

LANGUAGE: java
CODE:
public class ActionBot {
  private final WebDriver driver;

  public ActionBot(WebDriver driver) {
    this.driver = driver;
  }

  public void click(By locator) {
    driver.findElement(locator).click();
  }

  public void submit(By locator) {
    driver.findElement(locator).submit();
  }

  /** 
   * Type something into an input field. WebDriver doesn't normally clear these
   * before typing, so this method does that first. It also sends a return key
   * to move the focus out of the element.
   */
  public void type(By locator, String text) { 
    WebElement element = driver.findElement(locator);
    element.clear();
    element.sendKeys(text + "\n");
  }
}

----------------------------------------

TITLE: Creating Select Object in Selenium
DESCRIPTION: Demonstrates how to create a Select object from a <select> element in different programming languages using Selenium WebDriver.

LANGUAGE: Java
CODE:
WebElement selectElement = driver.findElement(By.name("selectomatic"));
Select selectObject = new Select(selectElement);

LANGUAGE: Python
CODE:
select_element = driver.find_element(By.NAME, "selectomatic")
select_object = Select(select_element)

LANGUAGE: C#
CODE:
var selectElement = driver.FindElement(By.Name("selectomatic"));
var selectObject = new SelectElement(selectElement);

LANGUAGE: Ruby
CODE:
select_element = @driver.find_element(name: 'selectomatic')
select_object = Selenium::WebDriver::Support::Select.new(select_element)

LANGUAGE: JavaScript
CODE:
const selectElement = await driver.findElement(By.name('selectomatic'));
const select = await new Select(selectElement);

LANGUAGE: Kotlin
CODE:
val selectElement = driver.findElement(By.name("selectomatic"))
val selectObject = Select(selectElement)

----------------------------------------

TITLE: Switching Windows in Python
DESCRIPTION: Demonstrates how to switch to a new window or tab in Selenium WebDriver using Python.

LANGUAGE: Python
CODE:
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

with webdriver.Firefox() as driver:
    # Open URL
    driver.get("https://seleniumhq.github.io")

    # Setup wait for later
    wait = WebDriverWait(driver, 10)

    # Store the ID of the original window
    original_window = driver.current_window_handle

    # Check we don't have other windows open already
    assert len(driver.window_handles) == 1

    # Click the link which opens in a new window
    driver.find_element(By.LINK_TEXT, "new window").click()

    # Wait for the new window or tab
    wait.until(EC.number_of_windows_to_be(2))

    # Loop through until we find a new window handle
    for window_handle in driver.window_handles:
        if window_handle != original_window:
            driver.switch_to.window(window_handle)
            break

    # Wait for the new tab to finish loading content
    wait.until(EC.title_is("SeleniumHQ Browser Automation"))

----------------------------------------

TITLE: Clicking an Element with Selenium WebDriver
DESCRIPTION: Demonstrates how to click a web element using Selenium WebDriver. The example navigates to a specific URL and clicks an element identified by its name attribute.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
driver.findElement(By.name("click_input")).click();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

click_input = driver.find_element(By.NAME, "click_input")
click_input.click()

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/inputs.html");
driver.FindElement(By.Name("click_input")).Click();

LANGUAGE: Ruby
CODE:
@driver.find_element(name: 'click_input').click

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html');
await driver.findElement(By.name('click_input')).click();

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

// Click the element
driver.findElement(By.name("color_input")).click();

----------------------------------------

TITLE: Quitting WebDriver Session
DESCRIPTION: Examples showing how to properly terminate a WebDriver session using the quit() method. This is the recommended way to end sessions rather than using close().

LANGUAGE: Java
CODE:
driver.quit();

LANGUAGE: Python
CODE:
driver.quit()

LANGUAGE: C#
CODE:
driver.Quit();

LANGUAGE: Ruby
CODE:
driver.quit

LANGUAGE: JavaScript
CODE:
await driver.quit();

LANGUAGE: Kotlin
CODE:
driver.quit()

----------------------------------------

TITLE: Getting Window Handle in Java
DESCRIPTION: Retrieves the handle of the current window in Selenium WebDriver using Java.

LANGUAGE: Java
CODE:
String currentWindowHandle = driver.getWindowHandle();

----------------------------------------

TITLE: Retrieving Element Attribute or Property in Selenium
DESCRIPTION: This snippet shows how to use the getAttribute() method to fetch the runtime value of a DOM attribute or property of an element. It returns the value as a string.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
String value = driver.findElement(By.name("email_input")).getAttribute("value");
String ariaLabel = driver.findElement(By.name("email_input")).getAttribute("aria-label");
String type = driver.findElement(By.name("email_input")).getDomAttribute("type");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
value = driver.find_element(By.NAME, "email_input").get_attribute("value")
aria_label = driver.find_element(By.NAME, "email_input").get_attribute("aria-label")

LANGUAGE: C#
CODE:
driver.Url = "https://www.selenium.dev/selenium/web/inputs.html";
string value = driver.FindElement(By.Name("email_input")).GetAttribute("value");
string ariaLabel = driver.FindElement(By.Name("email_input")).GetAttribute("aria-label");
string type = driver.FindElement(By.Name("email_input")).GetDomAttribute("type");

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(name: 'email_input').attribute('type')).to eq('email')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html')
const element = await driver.findElement(By.name('email_input'))
const value = await element.getAttribute('value')
const ariaLabel = await element.getAttribute('aria-label')
const type = await element.getDomAttribute('type')

LANGUAGE: Kotlin
CODE:
val attr = driver.findElement(By.name("email_input")).getAttribute("value")

----------------------------------------

TITLE: Network Response Transformation with CDP in Selenium
DESCRIPTION: Demonstrates how to intercept and modify network responses using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), responseReceived -> {
    String url = responseReceived.getResponse().getUrl();
    if (url.contains("blank.html")) {
        String requestId = responseReceived.getRequestId();
        String body = devTools.send(Network.getResponseBody(requestId)).getBody();
        body = body.replace("Blank Page", "Foo");
        devTools.send(Network.setResponseBody(requestId, body, null));
    }
});

LANGUAGE: C#
CODE:
driver.ExecuteCdpCommand("Network.enable", new Dictionary<string, object>());

EventHandler<CDPEventData> responseReceivedHandler = (sender, e) =>
{
    var response = e.MessageData["params"]["response"] as JObject;
    var url = response["url"].Value<string>();
    if (url.Contains("blank.html"))
    {
        var requestId = e.MessageData["params"]["requestId"].Value<string>();
        var result = driver.ExecuteCdpCommand("Network.getResponseBody", new Dictionary<string, object> { { "requestId", requestId } });
        var body = result["body"].ToString().Replace("Blank Page", "Foo");
        driver.ExecuteCdpCommand("Network.setResponseBody", new Dictionary<string, object> { { "requestId", requestId }, { "body", body } });
    }
};

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Network.responseReceived') do |event|
  url = event.dig('response', 'url')
  if url.include?('blank.html')
    request_id = event['requestId']
    body = driver.execute_cdp('Network.getResponseBody', requestId: request_id).dig('body')
    body.gsub!('Blank Page', 'Foo')
    driver.execute_cdp('Network.setResponseBody', requestId: request_id, body: body)
  end
end

----------------------------------------

TITLE: Finding Elements in the Shadow DOM using Java
DESCRIPTION: Demonstrates how to access and find elements within a Shadow DOM using Selenium WebDriver in Java.

LANGUAGE: Java
CODE:
WebElement shadowHost = driver.findElement(By.cssSelector("#shadow_host"));
SearchContext shadowRoot = shadowHost.getShadowRoot();
WebElement shadowContent = shadowRoot.findElement(By.cssSelector("#shadow_content"));

----------------------------------------

TITLE: Basic Authentication with CDP in Selenium
DESCRIPTION: Demonstrates how to insert credentials into the header for basic authentication using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
devTools.send(Network.setExtraHTTPHeaders(Map.of("Authorization", "Basic " + credentials)));

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Network.setExtraHTTPHeaders', {
    'headers': {'Authorization': 'Basic ' + credentials}
})

LANGUAGE: C#
CODE:
var parameters = new Dictionary<string, object>
{
    ["headers"] = new Dictionary<string, string>
    {
        ["Authorization"] = "Basic " + credentials
    }
};
driver.ExecuteCdpCommand("Network.setExtraHTTPHeaders", parameters);

LANGUAGE: Ruby
CODE:
driver.execute_cdp("Network.setExtraHTTPHeaders", {
  headers: { Authorization: "Basic #{credentials}" }
})

----------------------------------------

TITLE: Handling JavaScript Alerts in Java with Selenium WebDriver
DESCRIPTION: This code snippet demonstrates how to interact with a JavaScript alert using Selenium WebDriver in Java. It clicks a link to trigger the alert, waits for the alert to appear, retrieves the alert text, and then accepts the alert.

LANGUAGE: Java
CODE:
//Click the link to activate the alert
driver.findElement(By.linkText("See an example alert")).click();

//Wait for the alert to be displayed and store it in a variable
Alert alert = wait.until(ExpectedConditions.alertIsPresent());

//Store the alert text in a variable
String text = alert.getText();

//Press the OK button
alert.accept();

----------------------------------------

TITLE: Selecting Option by Visible Text in Selenium
DESCRIPTION: Demonstrates how to select an option in a <select> element based on its visible text using Selenium WebDriver in various programming languages.

LANGUAGE: Java
CODE:
selectObject.selectByVisibleText("Four");

LANGUAGE: Python
CODE:
select_object.select_by_visible_text("Four")

LANGUAGE: C#
CODE:
selectObject.SelectByText("Four");

LANGUAGE: Ruby
CODE:
select_object.select_by(:text, 'Four')

LANGUAGE: JavaScript
CODE:
await select.selectByVisibleText('Four');

LANGUAGE: Kotlin
CODE:
selectObject.selectByVisibleText("Four")

----------------------------------------

TITLE: Customizing Wait Behavior in Selenium
DESCRIPTION: Demonstrates how to customize wait behavior by modifying polling intervals, timeout durations, and exception handling.

LANGUAGE: Java
CODE:
Wait<WebDriver> wait = new FluentWait<>(driver)
    .withTimeout(Duration.ofSeconds(2))
    .pollingEvery(Duration.ofMillis(300))
    .ignoring(NoSuchElementException.class);

wait.until(d -> {
    d.findElement(By.id("adder")).click();
    return d.findElement(By.className("added")).getText().equals("Dynamically");
});

LANGUAGE: Python
CODE:
wait = WebDriverWait(driver, timeout=2, poll_frequency=0.3)
wait.until(lambda d: d.find_element(By.ID, "adder").click() or True)
wait.until(lambda d: d.find_element(By.CLASS_NAME, "added").text == "Dynamically")

----------------------------------------

TITLE: Initializing Remote WebDriver Connection
DESCRIPTION: Basic example of connecting to a remote Selenium Grid instance. Requires a grid URL and browser options configuration.

LANGUAGE: Java
CODE:
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444"), options);

----------------------------------------

TITLE: Querying Google Search Page Using Fluent API in Java
DESCRIPTION: Demonstrates how to use a Fluent API approach to interact with a Google search page. This snippet shows the client-side usage of a fluent page object.

LANGUAGE: java
CODE:
driver.get( "http://www.google.com/webhp?hl=en&amp;tab=ww" );
GoogleSearchPage gsp = new GoogleSearchPage(driver);
gsp.setSearchString().clickSearchButton();

----------------------------------------

TITLE: Starting Chrome Session with Basic Options
DESCRIPTION: Demonstrates how to create a Chrome WebDriver instance with basic options set.

LANGUAGE: Java
CODE:
ChromeOptions options = new ChromeOptions();
WebDriver driver = new ChromeDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.ChromeOptions()
driver = webdriver.Chrome(options=options)

LANGUAGE: C#
CODE:
var options = new ChromeOptions();
IWebDriver driver = new ChromeDriver(options);

LANGUAGE: Ruby
CODE:
options = Selenium::WebDriver::Chrome::Options.new
driver = Selenium::WebDriver.for :chrome, options: options

LANGUAGE: JavaScript
CODE:
let options = new chrome.Options();

let driver = await new Builder()
    .forBrowser('chrome')
    .setChromeOptions(options)
    .build();

----------------------------------------

TITLE: Home Page Object Implementation in Java
DESCRIPTION: A page object class representing the home page after successful login, providing methods to interact with page elements.

LANGUAGE: java
CODE:
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class HomePage {
  protected WebDriver driver;

  private By messageBy = By.tagName("h1");

  public HomePage(WebDriver driver){
    this.driver = driver;
    if (!driver.getTitle().equals("Home Page of logged in user")) {
      throw new IllegalStateException("This is not Home Page of logged in user," +
            " current page is: " + driver.getCurrentUrl());
    }
  }

  public String getMessageText() {
    return driver.findElement(messageBy).getText();
  }

  public HomePage manageProfile() {
    // Page encapsulation to manage profile functionality
    return new HomePage(driver);
  }
}

----------------------------------------

TITLE: Checking Element Visibility in Selenium
DESCRIPTION: This snippet demonstrates how to use the isDisplayed() method to check if an element is visible on the webpage. It returns a boolean value indicating visibility.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/displayed.html");
WebElement element = driver.findElement(By.id("displayed"));
boolean isDisplayed = element.isDisplayed();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/displayed.html")
element = driver.find_element(By.ID, "displayed")
is_displayed = element.is_displayed()

LANGUAGE: C#
CODE:
driver.Url = "https://www.selenium.dev/selenium/web/displayed.html";
IWebElement element = driver.FindElement(By.Id("displayed"));
bool isDisplayed = element.Displayed;

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(id: 'displayed').displayed?).to be true

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/displayed.html')
const element = await driver.findElement(By.id('displayed'))
const isDisplayed = await element.isDisplayed()

LANGUAGE: Kotlin
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

val flag = driver.findElement(By.name("email_input")).isDisplayed()

----------------------------------------

TITLE: Pausing Between Actions in Selenium WebDriver
DESCRIPTION: Demonstrates how to add a pause between actions using the Actions API in different programming languages. This is useful when you need to wait briefly between actions for them to work correctly.

LANGUAGE: Java
CODE:
WebElement searchBox = driver.findElement(By.name("q"));
new Actions(driver)
        .sendKeys(searchBox, "cheese")
        .pause(Duration.ofSeconds(1))
        .sendKeys(Keys.ENTER)
        .perform();

LANGUAGE: Python
CODE:
search_box = driver.find_element(By.NAME, "q")
Actions(driver)\
    .send_keys_to_element(search_box, "cheese")\
    .pause(1)\
    .send_keys(Keys.ENTER)\
    .perform()

LANGUAGE: C#
CODE:
IWebElement searchBox = driver.FindElement(By.Name("q"));
new Actions(driver)
    .SendKeys(searchBox, "cheese")
    .Pause(TimeSpan.FromSeconds(1))
    .SendKeys(Keys.Enter)
    .Perform();

LANGUAGE: Ruby
CODE:
search_box = driver.find_element(name: 'q')
Actions.new(driver)
     .send_keys_to(search_box, 'cheese')
     .pause(duration: 1)
     .send_keys(:enter)
     .perform

LANGUAGE: JavaScript
CODE:
const searchBox = await driver.findElement(By.name('q'));
await driver.actions()
      .sendKeys(searchBox, 'cheese')
      .pause(1000)
      .sendKeys(Key.ENTER)
      .perform();

LANGUAGE: Kotlin
CODE:
val searchBox = driver.findElement(By.name("q"))
Actions(driver)
    .sendKeys(searchBox, "cheese")
    .pause(Duration.ofSeconds(1))
    .sendKeys(Keys.ENTER)
    .perform()

----------------------------------------

TITLE: Finding Elements from Another Element in C#
DESCRIPTION: Demonstrates how to find child elements within a parent element using Selenium WebDriver in C#.

LANGUAGE: C#
CODE:
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System.Collections.Generic;

namespace FindElementsFromElement {
 class FindElementsFromElement {
  public static void Main(string[] args) {
   IWebDriver driver = new ChromeDriver();
   try {
    driver.Navigate().GoToUrl("https://example.com");

    // Get element with tag name 'div'
    IWebElement element = driver.FindElement(By.TagName("div"));

    // Get all the elements available with tag name 'p'
    IList < IWebElement > elements = element.FindElements(By.TagName("p"));
    foreach(IWebElement e in elements) {
     System.Console.WriteLine(e.Text);
    }
   } finally {
    driver.Quit();
   }
  }
 }
}

----------------------------------------

TITLE: Sending Keys to Form Elements
DESCRIPTION: Shows how to input text into editable elements using sendKeys() method. This applies to text input fields and content-editable elements.

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

//Clear field to empty it from any previous data
driver.findElement(By.name("email_input")).clear()

// Enter text 
driver.findElement(By.name("email_input")).sendKeys("admin@localhost.dev")

----------------------------------------

TITLE: Deleting All Cookies in Selenium WebDriver
DESCRIPTION: Demonstrates how to delete all cookies from the current browsing context.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  driver.manage.add_cookie(name: "test1", value: "cookie1")
  driver.manage.add_cookie(name: "test2", value: "cookie2")

  # deletes all cookies
  driver.manage.delete_all_cookies
ensure
  driver.quit
end

----------------------------------------

TITLE: Quitting WebDriver Session in C#
DESCRIPTION: This code illustrates how to quit a WebDriver session in C#.

LANGUAGE: C#
CODE:
driver.Quit();

----------------------------------------

TITLE: Performing Copy and Paste in Selenium WebDriver
DESCRIPTION: Demonstrates a complex keyboard action sequence to perform copy and paste operations using the Actions API in Selenium WebDriver. The example handles different key combinations for Mac and non-Mac operating systems.

LANGUAGE: Java
CODE:
WebElement element = driver.findElement(By.cssSelector("input[type='text']"));
element.sendKeys("Selenium!");

String ctrlKey = Keys.CONTROL;
if (System.getProperty("os.name").toLowerCase().contains("mac")) {
    ctrlKey = Keys.COMMAND;
}

new Actions(driver)
    .keyDown(ctrlKey)
    .sendKeys("a")
    .sendKeys("c")
    .keyUp(ctrlKey)
    .sendKeys(Keys.ARROW_RIGHT)
    .keyDown(ctrlKey)
    .sendKeys("v")
    .keyUp(ctrlKey)
    .perform();

LANGUAGE: Python
CODE:
element = driver.find_element(By.CSS_SELECTOR, "input[type='text']")
element.send_keys("Selenium!")

if platform.system() == "Darwin":
    modifier = Keys.COMMAND
else:
    modifier = Keys.CONTROL

Actions(driver)\
    .key_down(modifier)\
    .send_keys("a")\
    .send_keys("c")\
    .key_up(modifier)\
    .send_keys(Keys.ARROW_RIGHT)\
    .key_down(modifier)\
    .send_keys("v")\
    .key_up(modifier)\
    .perform()

LANGUAGE: C#
CODE:
var element = driver.FindElement(By.CssSelector("input[type='text']"));
element.SendKeys("Selenium!");

string ctrlKey = Keys.Control;
if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
{
    ctrlKey = Keys.Command;
}

new Actions(driver)
    .KeyDown(ctrlKey)
    .SendKeys("a")
    .SendKeys("c")
    .KeyUp(ctrlKey)
    .SendKeys(Keys.ArrowRight)
    .KeyDown(ctrlKey)
    .SendKeys("v")
    .KeyUp(ctrlKey)
    .Perform();

LANGUAGE: Ruby
CODE:
element = driver.find_element(css: "input[type='text']")
element.send_keys('Selenium!')

modifier = Selenium::WebDriver::Platform.mac? ? :command : :control

Actions.new(driver)
  .key_down(modifier)
  .send_keys('a')
  .send_keys('c')
  .key_up(modifier)
  .send_keys(:arrow_right)
  .key_down(modifier)
  .send_keys('v')
  .key_up(modifier)
  .perform

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.css("input[type='text']"));
await element.sendKeys("Selenium!");

const modifier = os.platform() === 'darwin' ? Key.COMMAND : Key.CONTROL;

await driver.actions()
    .keyDown(modifier)
    .sendKeys("a")
    .sendKeys("c")
    .keyUp(modifier)
    .sendKeys(Key.ARROW_RIGHT)
    .keyDown(modifier)
    .sendKeys("v")
    .keyUp(modifier)
    .perform();

LANGUAGE: Kotlin
CODE:
val element = driver.findElement(By.cssSelector("input[type='text']"))
element.sendKeys("Selenium!")

val ctrlKey = if (System.getProperty("os.name").toLowerCase().contains("mac")) {
    Keys.COMMAND
} else {
    Keys.CONTROL
}

Actions(driver)
    .keyDown(ctrlKey)
    .sendKeys("a")
    .sendKeys("c")
    .keyUp(ctrlKey)
    .sendKeys(Keys.ARROW_RIGHT)
    .keyDown(ctrlKey)
    .sendKeys("v")
    .keyUp(ctrlKey)
    .perform()

----------------------------------------

TITLE: Enabling BiDi in Selenium WebDriver
DESCRIPTION: Code snippets demonstrating how to enable BiDi functionality by setting the 'webSocketUrl' capability to true in various programming languages. This enables WebSocket connection for bidirectional communication in Selenium WebDriver.

LANGUAGE: Java
CODE:
options.setCapability("webSocketUrl", true);

LANGUAGE: Python
CODE:
options.enable_bidi = True

LANGUAGE: C#
CODE:
UseWebSocketUrl = true,

LANGUAGE: Ruby
CODE:
options.web_socket_url = true

LANGUAGE: JavaScript
CODE:
Options().enableBidi();

LANGUAGE: Kotlin
CODE:
options.setCapability("webSocketUrl", true);

----------------------------------------

TITLE: Retrieving Browser Information
DESCRIPTION: Demonstrates how to request information about the browser, such as the title of the current page. This is useful for verifying that the correct page has loaded.

LANGUAGE: Java
CODE:
String title = driver.getTitle();

LANGUAGE: Python
CODE:
title = driver.title

LANGUAGE: C#
CODE:
string title = driver.Title;

LANGUAGE: Ruby
CODE:
title = driver.title

LANGUAGE: JavaScript
CODE:
let title = await driver.getTitle();

LANGUAGE: Kotlin
CODE:
val title = driver.title

----------------------------------------

TITLE: Performing Context Click (Right-Click) in Selenium
DESCRIPTION: This method combines moving to the center of an element with pressing and releasing the right mouse button. It's equivalent to right-clicking on an element.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .contextClick(clickable)
        .perform();

----------------------------------------

TITLE: Returning to Default Content
DESCRIPTION: Examples showing how to switch back to the default content from an iframe

LANGUAGE: python
CODE:
# switch back to default content
driver.switch_to.default_content()

LANGUAGE: javascript
CODE:
// Return to the top level
await driver.switchTo().defaultContent();

----------------------------------------

TITLE: Checking Element Enabled State in Selenium
DESCRIPTION: This snippet shows how to use the isEnabled() method to check if an element is enabled on the webpage. It returns a boolean value indicating the enabled state.

LANGUAGE: Java
CODE:
boolean isEnabled = driver.findElement(By.name("button_input")).isEnabled();

LANGUAGE: Python
CODE:
is_enabled = driver.find_element(By.NAME, "button_input").is_enabled()

LANGUAGE: C#
CODE:
bool isEnabled = driver.FindElement(By.Name("button_input")).Enabled;

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(name: 'button_input').enabled?).to be true

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.name('button_input'))
const isEnabled = await element.isEnabled()

LANGUAGE: Kotlin
CODE:
val attr = driver.findElement(By.name("button_input")).isEnabled()

----------------------------------------

TITLE: Scrolling to Element using Selenium Actions API
DESCRIPTION: This snippet demonstrates how to scroll the viewport so that a specific web element is at the bottom of the screen. It uses the Actions class to perform the scroll wheel action.

LANGUAGE: Java
CODE:
WebElement footer = driver.findElement(By.tagName("footer"));
new Actions(driver)
        .scrollToElement(footer)
        .perform();

LANGUAGE: Python
CODE:
footer = driver.find_element(By.TAG_NAME, "footer")
Actions(driver)\
    .scroll_to_element(footer)\
    .perform()

LANGUAGE: C#
CODE:
var footer = driver.FindElement(By.TagName("footer"));
new Actions(driver)
    .ScrollToElement(footer)
    .Perform();

LANGUAGE: Ruby
CODE:
footer = driver.find_element(tag_name: 'footer')
driver.action
  .scroll_to(footer)
  .perform

LANGUAGE: JavaScript
CODE:
const footer = await driver.findElement(By.css('footer'));
await driver.actions()
    .scroll(0, 0, 0, 0, footer)
    .perform();

LANGUAGE: Kotlin
CODE:
val footer = driver.findElement(By.tagName("footer"))
Actions(driver)
    .scrollToElement(footer)
    .perform()

----------------------------------------

TITLE: Context Click (Right Click) in Selenium
DESCRIPTION: Demonstrates how to perform a right-click action on a web element using Selenium Actions API. This moves the mouse to the element's center before clicking the right mouse button.



----------------------------------------

TITLE: Login Test Using Page Objects in Java
DESCRIPTION: A test class demonstrating the usage of page objects for a login test, showing improved maintainability and readability.

LANGUAGE: java
CODE:
public class TestLogin {

  @Test
  public void testLogin() {
    SignInPage signInPage = new SignInPage(driver);
    HomePage homePage = signInPage.loginValidUser("userName", "password");
    assertThat(homePage.getMessageText(), is("Hello userName"));
  }

}

----------------------------------------

TITLE: Listing All Options in Select Element
DESCRIPTION: Shows how to retrieve a list of all options in a <select> element using Selenium WebDriver in different programming languages.

LANGUAGE: Java
CODE:
List<WebElement> allOptions = selectObject.getOptions();

LANGUAGE: Python
CODE:
all_options = select_object.options

LANGUAGE: C#
CODE:
var allOptions = selectObject.Options;

LANGUAGE: Ruby
CODE:
all_options = select_object.options

LANGUAGE: JavaScript
CODE:
const allOptions = await select.getOptions();

LANGUAGE: Kotlin
CODE:
val allOptions = selectObject.options

----------------------------------------

TITLE: Running Selenium Manager for Chrome Beta Version
DESCRIPTION: This shell command shows how to use Selenium Manager to manage Chrome beta version and its corresponding chromedriver.

LANGUAGE: shell
CODE:
> selenium-manager --browser chrome --debug --browser-version beta

----------------------------------------

TITLE: Implementing Key Down Operation in Selenium
DESCRIPTION: Demonstrates how to press and hold a keyboard key using Selenium's Actions API. This example shows pressing the Shift key, which is commonly used in combination with other keys.

LANGUAGE: Java
CODE:
new Actions(driver).keyDown(Keys.SHIFT).perform();

LANGUAGE: Python
CODE:
Actions(driver).key_down(Keys.SHIFT).perform()

----------------------------------------

TITLE: Adding Cookies in Selenium WebDriver
DESCRIPTION: Demonstrates how to add a cookie to the current browsing context. Requires being on the domain where the cookie will be valid. Shows implementation across multiple programming languages.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  
  # Adds the cookie into current browser context
  driver.manage.add_cookie(name: "key", value: "value")
ensure
  driver.quit
end

----------------------------------------

TITLE: Sending Keys to Active Element in Selenium
DESCRIPTION: Demonstrates sending keystrokes to the currently focused element using Selenium's Actions API. This method combines keyDown and keyUp operations into a single command.

LANGUAGE: Java
CODE:
new Actions(driver)
    .sendKeys("selenium")
    .perform();

LANGUAGE: Python
CODE:
Actions(driver)
    .send_keys("selenium")
    .perform()

----------------------------------------

TITLE: Scrolling by Given Amount using Selenium Actions API
DESCRIPTION: This snippet shows how to scroll the page by a specified amount in the horizontal and vertical directions. Positive values scroll right and down, while negative values scroll left and up.

LANGUAGE: Java
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
        .scrollByAmount(deltaX, deltaY)
        .perform();

LANGUAGE: Python
CODE:
delta_x = 0
delta_y = 200
Actions(driver)\
    .scroll_by_amount(delta_x, delta_y)\
    .perform()

LANGUAGE: C#
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
    .ScrollByAmount(deltaX, deltaY)
    .Perform();

LANGUAGE: Ruby
CODE:
delta_x = 0
delta_y = 200
driver.action
  .scroll_by(delta_x, delta_y)
  .perform

LANGUAGE: JavaScript
CODE:
const deltaX = 0;
const deltaY = 200;
await driver.actions()
    .scroll(0, 0, deltaX, deltaY)
    .perform();

LANGUAGE: Kotlin
CODE:
val deltaX = 0
val deltaY = 200
Actions(driver)
    .scrollByAmount(deltaX, deltaY)
    .perform()

----------------------------------------

TITLE: Initializing Remote WebDriver in Java
DESCRIPTION: Creates a Remote WebDriver instance with specified options and remote server URL.

LANGUAGE: Java
CODE:
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444"), options);

----------------------------------------

TITLE: Moving by Offset from Element in Selenium
DESCRIPTION: This method moves the mouse to the in-view center point of the element, then moves by the provided offset.

LANGUAGE: Java
CODE:
WebElement tracker = driver.findElement(By.id("mouse-tracker"));
new Actions(driver)
        .moveToElement(tracker, 5, 5)
        .perform();

----------------------------------------

TITLE: Setting Up WebDriver in JavaScript
DESCRIPTION: Example of setting up WebDriver before a test in JavaScript using Mocha.

LANGUAGE: JavaScript
CODE:
before(async function() {
  driver = await new Builder().forBrowser('chrome').build()
})

----------------------------------------

TITLE: Asserting with JUnit in Java
DESCRIPTION: Example of making an assertion using JUnit in a Java Selenium test.

LANGUAGE: Java
CODE:
String title = driver.getTitle();
assertEquals("Web form", title);

----------------------------------------

TITLE: Releasing All Actions in Selenium WebDriver
DESCRIPTION: Shows how to release all currently depressed keys and pointer buttons using the Actions API. This is important as the driver remembers the state of all input items throughout a session.

LANGUAGE: Java
CODE:
((RemoteWebDriver) driver).resetInputState();

LANGUAGE: Python
CODE:
driver.reset_input_state()

LANGUAGE: C#
CODE:
driver.ResetInputState();

LANGUAGE: Ruby
CODE:
driver.reset_input_state

LANGUAGE: JavaScript
CODE:
await driver.actions().clear();

LANGUAGE: Kotlin
CODE:
(driver as RemoteWebDriver).resetInputState()

----------------------------------------

TITLE: Double Click Action in Selenium
DESCRIPTION: Demonstrates how to perform a double-click action on a web element using Selenium Actions API. This combines two quick left button clicks at the element's center.



----------------------------------------

TITLE: Products Page Object with Component Objects in Java
DESCRIPTION: An example of a page object for a products page that uses component objects to represent individual products, demonstrating composition.

LANGUAGE: java
CODE:
public class ProductsPage extends BasePage {
    public ProductsPage(WebDriver driver) {
        super(driver);
        new WebDriverWait(driver, Duration.ofSeconds(3))
            .until(d -> d.findElement(By.className​("header_container")));
    }

    public List<Product> getProducts() {
        return driver.findElements(By.className​("inventory_item"))
            .stream()
            .map(e -> new Product(e))
            .toList();
    }

    public Product getProduct(Predicate<Product> condition) {
        return getProducts()
            .stream()
            .filter(condition)
            .findFirst()
            .orElseThrow();
    }
}

----------------------------------------

TITLE: Performing Drag and Drop by Offset in Selenium
DESCRIPTION: This method performs a click-and-hold on the source element, moves to the given offset, and then releases the mouse.

LANGUAGE: Java
CODE:
WebElement draggable = driver.findElement(By.id("draggable"));
int xOffset = 100;
int yOffset = 100;
new Actions(driver)
        .dragAndDropBy(draggable, xOffset, yOffset)
        .perform();

----------------------------------------

TITLE: Handling JavaScript Alerts in Python with Selenium WebDriver
DESCRIPTION: This code snippet shows how to handle a JavaScript alert using Selenium WebDriver in Python. It clicks a link to trigger the alert, waits for the alert to appear, retrieves the alert text, and then accepts the alert.

LANGUAGE: Python
CODE:
# Click the link to activate the alert
driver.find_element(By.LINK_TEXT, "See an example alert").click()

# Wait for the alert to be displayed and store it in a variable
alert = wait.until(expected_conditions.alert_is_present())

# Store the alert text in a variable
text = alert.text

# Press the OK button
alert.accept()

----------------------------------------

TITLE: Basic Pen Actions in Selenium WebDriver
DESCRIPTION: Demonstrates how to perform basic pen actions using Selenium WebDriver. Shows how to create a pen pointer input and move it to interact with web elements. Requires Selenium WebDriver 4.2 or higher for most languages.

LANGUAGE: Java
CODE:
Pen pen = new Pen("default pen");
Actions actions = new Actions(driver);

actions.setActivePointer(PointerInput.Kind.PEN, "default pen")
    .moveToElement(element)
    .click()
    .perform();

LANGUAGE: Python
CODE:
pen = Pen("default pen")
actions = ActionChains(driver)

actions.set_active_pointer(PointerInput.Kind.PEN, "default pen")\
    .move_to_element(element)\
    .click()\
    .perform()

----------------------------------------

TITLE: Clearing an Input Element with Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to clear the content of an input element using Selenium WebDriver. It navigates to a specific URL and then clears the text from an input field identified by its name attribute.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
WebElement input = driver.findElement(By.name("email_input"));
input.clear();

LANGUAGE: Python
CODE:
driver.find_element(By.NAME, "email_input").clear()

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/inputs.html");
var emailInput = driver.FindElement(By.Name("email_input"));
emailInput.Clear();

LANGUAGE: Ruby
CODE:
@driver.find_element(name: 'email_input').clear

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html');
const emailInput = await driver.findElement(By.name('email_input'));
await emailInput.clear();

LANGUAGE: Kotlin
CODE:
// Navigate to Url
driver.get("https://www.selenium.dev/selenium/web/inputs.html")

//Clear field to empty it from any previous data
driver.findElement(By.name("email_input")).clear()

----------------------------------------

TITLE: Initializing Local WebDriver in Java
DESCRIPTION: This snippet demonstrates how to create a local WebDriver session in Java. It uses the Options class to configure the session.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver(options);

----------------------------------------

TITLE: Setting Up WebDriver in Python
DESCRIPTION: Example of setting up WebDriver before a test in Python using pytest.

LANGUAGE: Python
CODE:
@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()

----------------------------------------

TITLE: Updating Maven Dependencies for Selenium 4
DESCRIPTION: Shows how to update the Maven pom.xml file to use Selenium 4 dependencies.

LANGUAGE: XML
CODE:
<dependencies>
    <!-- more dependencies ... -->
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.4.0</version>
    </dependency>
    <!-- more dependencies ... -->
</dependencies>

----------------------------------------

TITLE: Retrieving Named Cookies in Selenium WebDriver
DESCRIPTION: Shows how to retrieve a specific cookie by name from the browser context. Returns serialized cookie data matching the specified cookie name.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  driver.manage.add_cookie(name: "foo", value: "bar")

  # Get cookie details with named cookie 'foo'
  puts driver.manage.cookie_named('foo')
ensure
  driver.quit
end

----------------------------------------

TITLE: Setting Accept Insecure Certificates in JavaScript
DESCRIPTION: Demonstrates how to set the acceptInsecureCerts capability using Chrome options in JavaScript.

LANGUAGE: JavaScript
CODE:
const options = new chrome.Options();
options.set('acceptInsecureCerts', true);
const driver = chrome.Driver.createSession(options);

----------------------------------------

TITLE: Copy and Paste Implementation in Selenium
DESCRIPTION: Comprehensive example showing how to perform copy and paste operations using keyboard shortcuts. The code handles different operating systems (Mac vs others) and combines multiple keyboard actions.

LANGUAGE: Java
CODE:
String controlKey = Platform.getCurrent().is(Platform.MAC) ? Keys.COMMAND : Keys.CONTROL;
new Actions(driver)
    .sendKeys("Selenium")
    .keyDown(controlKey)
    .sendKeys("a")
    .sendKeys("c")
    .keyUp(controlKey)
    .sendKeys(Keys.ARROW_RIGHT)
    .keyDown(controlKey)
    .sendKeys("v")
    .keyUp(controlKey)
    .sendKeys("!")
    .perform();

LANGUAGE: Python
CODE:
import platform
key = Keys.COMMAND if platform.system() == "Darwin" else Keys.CONTROL
Actions(driver)\
    .send_keys("Selenium")\
    .key_down(key)\
    .send_keys("a")\
    .send_keys("c")\
    .key_up(key)\
    .send_keys(Keys.ARROW_RIGHT)\
    .key_down(key)\
    .send_keys("v")\
    .key_up(key)\
    .send_keys("!")\
    .perform()

----------------------------------------

TITLE: Initializing Firefox with Basic Options
DESCRIPTION: Sets up a basic Firefox WebDriver instance with default options.

LANGUAGE: Java
CODE:
FirefoxOptions options = new FirefoxOptions();
FirefoxDriver driver = new FirefoxDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.FirefoxOptions()
driver = webdriver.Firefox(options=options)

----------------------------------------

TITLE: Scrolling by Given Amount using Selenium Actions API
DESCRIPTION: This snippet shows how to scroll the page by a specified amount using delta x and delta y values. Positive values scroll right and down, while negative values scroll left and up.

LANGUAGE: Java
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
        .scrollByAmount(deltaX, deltaY)
        .perform();

----------------------------------------

TITLE: Scrolling from Element by Amount in Selenium
DESCRIPTION: Demonstrates scrolling from a specific element's position by a given amount. If the element is not in view, it will first be scrolled into view before applying the delta values.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/scrolling_tests/frame_with_nested_scrolling_frame_out_of_view.html");
WebElement iframe = driver.findElement(By.tagName("iframe"));
new Actions(driver)
    .scrollFromElement(iframe, 0, 200).perform();

----------------------------------------

TITLE: Network Request Interception with CDP in Selenium
DESCRIPTION: Shows how to intercept and modify network requests using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

devTools.addListener(Network.requestWillBeSent(), requestWillBeSent -> {
    Request request = requestWillBeSent.getRequest();
    if (request.getUrl().contains("1.jpg")) {
        String newUrl = request.getUrl().replace("1.jpg", "2.jpg");
        String requestId = requestWillBeSent.getRequestId().toString();
        devTools.send(Network.setRequestInterception(ImmutableList.of(
                new RequestPattern(Optional.of("*"), Optional.empty(), Optional.of(ResourceType.IMAGE))
        )));
        devTools.send(Network.continueInterceptedRequest(requestId,
                Optional.of(newUrl),
                Optional.empty(),
                Optional.empty(),
                Optional.empty(),
                Optional.empty(),
                Optional.empty(),
                Optional.empty()));
    }
});

LANGUAGE: C#
CODE:
driver.ExecuteCdpCommand("Network.enable", new Dictionary<string, object>());

EventHandler<CDPEventData> requestWillBeSentHandler = (sender, e) =>
{
    var request = e.MessageData["params"]["request"] as JObject;
    var url = request["url"].Value<string>();
    if (url.Contains("1.jpg"))
    {
        var newUrl = url.Replace("1.jpg", "2.jpg");
        var requestId = e.MessageData["params"]["requestId"].Value<string>();
        driver.ExecuteCdpCommand("Network.setRequestInterception", new Dictionary<string, object> { { "patterns", new[] { new { urlPattern = "*", resourceType = "Image" } } } });
        driver.ExecuteCdpCommand("Network.continueInterceptedRequest", new Dictionary<string, object> { { "interceptionId", requestId }, { "url", newUrl } });
    }
};

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Network.enable')

driver.on_cdp_event('Network.requestWillBeSent') do |request|
  url = request.dig('request', 'url')
  if url.include?('1.jpg')
    new_url = url.gsub('1.jpg', '2.jpg')
    request_id = request['requestId']
    driver.execute_cdp('Network.setRequestInterception', patterns: [{ urlPattern: '*', resourceType: 'Image' }])
    driver.execute_cdp('Network.continueInterceptedRequest', interceptionId: request_id, url: new_url)
  end
end

----------------------------------------

TITLE: Creating New Window in JavaScript
DESCRIPTION: Demonstrates creating a new window or tab and switching to it in Selenium WebDriver using JavaScript.

LANGUAGE: JavaScript
CODE:
// Opens a new tab and switches to new tab
await driver.switchTo().newWindow('tab');

// Opens a new window and switches to new window
await driver.switchTo().newWindow('window');

----------------------------------------

TITLE: Initializing New Firefox WebDriver Instance in Java
DESCRIPTION: Creates a new Firefox WebDriver instance with default clean profile settings. This ensures tests start from a known state with no lingering data or cached content from previous test runs.

LANGUAGE: java
CODE:
WebDriver driver = new FirefoxDriver();

----------------------------------------

TITLE: Java Selenium Manager Usage Example
DESCRIPTION: Demonstrates how to use Selenium Manager in Java compared to previous manual driver management

LANGUAGE: java
CODE:
System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
WebDriver driver = new ChromeDriver();

LANGUAGE: java
CODE:
WebDriver driver = new ChromeDriver();
// Selenium Manager handles driver management automatically

----------------------------------------

TITLE: Scrolling from Viewport Offset using Selenium Actions API
DESCRIPTION: This snippet demonstrates scrolling from a specific offset in the viewport. The offset is specified from the upper left corner of the current viewport. This is used when scrolling a portion of the screen already in view.

LANGUAGE: Java
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
        .scrollFromOrigin(WheelInput.ScrollOrigin.fromViewport(10, 10), deltaX, deltaY)
        .perform();

LANGUAGE: Python
CODE:
delta_x = 0
delta_y = 200
Actions(driver)\
    .scroll_from_origin(ScrollOrigin.viewport(10, 10), delta_x, delta_y)\
    .perform()

LANGUAGE: C#
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
    .ScrollFromOrigin(WheelInput.ScrollOrigin.Viewport(10, 10), deltaX, deltaY)
    .Perform();

LANGUAGE: Ruby
CODE:
delta_x = 0
delta_y = 200
driver.action
  .scroll_from(10, 10, delta_x, delta_y)
  .perform

LANGUAGE: JavaScript
CODE:
await driver.actions()
    .scroll(10, 10, 0, 200)
    .perform();

LANGUAGE: Kotlin
CODE:
val deltaX = 0
val deltaY = 200
Actions(driver)
    .scrollFromOrigin(WheelInput.ScrollOrigin.fromViewport(10, 10), deltaX, deltaY)
    .perform()

----------------------------------------

TITLE: Getting All Cookies in Selenium WebDriver
DESCRIPTION: Demonstrates how to retrieve all cookies from the current browsing context. Returns all successful serialized cookie data.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  driver.manage.add_cookie(name: "test1", value: "cookie1")
  driver.manage.add_cookie(name: "test2", value: "cookie2")

  # Get all available cookies
  puts driver.manage.all_cookies
ensure
  driver.quit
end

----------------------------------------

TITLE: Uploading Files with Selenium WebDriver
DESCRIPTION: This code demonstrates how to upload a file using Selenium WebDriver by sending the file path to an input element of type 'file'. It uses the sendKeys() method to provide the file path directly, bypassing the file upload dialog.

LANGUAGE: Java
CODE:
String filePath = "C:\\Users\\IEUser\\Desktop\\file.jpg";
driver.findElement(By.id("file-upload")).sendKeys(filePath);
driver.findElement(By.id("file-submit")).submit();

LANGUAGE: Python
CODE:
file_path = "C:\\Users\\IEUser\\Desktop\\file.jpg"
driver.find_element(By.ID, "file-upload").send_keys(file_path)
driver.find_element(By.ID, "file-submit").submit()

LANGUAGE: C#
CODE:
string filePath = @"C:\Users\IEUser\Desktop\file.jpg";
driver.FindElement(By.Id("file-upload")).SendKeys(filePath);
driver.FindElement(By.Id("file-submit")).Submit();

LANGUAGE: Ruby
CODE:
file_path = "C:\\Users\\IEUser\\Desktop\\file.jpg"
driver.find_element(id: "file-upload").send_keys file_path
driver.find_element(id: "file-submit").submit

LANGUAGE: JavaScript
CODE:
const filePath = 'C:\\Users\\IEUser\\Desktop\\file.jpg';
await driver.findElement(By.id('file-upload')).sendKeys(filePath);

LANGUAGE: Kotlin
CODE:
import org.openqa.selenium.By
import org.openqa.selenium.chrome.ChromeDriver

fun main() {
    val driver = ChromeDriver()
    driver.get("https://the-internet.herokuapp.com/upload")
    driver.findElement(By.id("file-upload")).sendKeys("selenium-snapshot.jpg")
    driver.findElement(By.id("file-submit")).submit()
    if(driver.pageSource.contains("File Uploaded!")) {
        println("file uploaded")
    }
    else{
        println("file not uploaded")
    }
}

----------------------------------------

TITLE: Mouse Movement Actions in Selenium
DESCRIPTION: Shows various ways to move the mouse cursor using Selenium Actions API, including moving to elements, moving by offset from elements or viewport, and relative movements.



----------------------------------------

TITLE: Adding Chrome Extensions
DESCRIPTION: Shows how to add Chrome extensions to the browser session.

LANGUAGE: Java
CODE:
options.addExtensions(new File("/path/to/extension.crx"));

LANGUAGE: Python
CODE:
options.add_extension('/path/to/extension.crx')

LANGUAGE: C#
CODE:
options.AddExtension("/path/to/extension.crx");

LANGUAGE: Ruby
CODE:
options.add_extension('/path/to/extension.crx')

LANGUAGE: JavaScript
CODE:
let options = new chrome.Options();
options.addExtensions(["/path/to/extension.crx"]);

let driver = await new Builder()
    .forBrowser('chrome')
    .setChromeOptions(options)
    .build();

----------------------------------------

TITLE: Setting Proxy in Python
DESCRIPTION: Demonstrates how to set a proxy using Selenium WebDriver options in Python.

LANGUAGE: Python
CODE:
from selenium import webdriver
from selenium.webdriver.common.proxy import Proxy, ProxyType

proxy = Proxy()
proxy.proxy_type = ProxyType.MANUAL
proxy.http_proxy = "ip_addr:port"

capabilities = webdriver.DesiredCapabilities.CHROME
proxy.add_to_capabilities(capabilities)

driver = webdriver.Chrome(desired_capabilities=capabilities)

----------------------------------------

TITLE: Configuring HTTP Client in Ruby for Selenium
DESCRIPTION: This snippet demonstrates how to configure the HTTP client for Selenium in Ruby. It shows setting connection and read timeouts.

LANGUAGE: Ruby
CODE:
options = Selenium::WebDriver::Chrome::Options.new
options.add_option('se:cdpEnabled', true)
options.add_option('webdriver.http.factory', 'jdk-http-client')

----------------------------------------

TITLE: Capturing Console Logs with CDP
DESCRIPTION: Implementation examples for capturing browser console logs across different programming languages using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
{{< gh-codeblock path="/examples/java/src/test/java/dev/selenium/bidi/cdp/LoggingTest.java#L31" >}}

LANGUAGE: Python
CODE:
{{< gh-codeblock path="/examples/python/tests/bidi/cdp/test_logs.py#L11-12" >}}

LANGUAGE: C#
CODE:
{{< gh-codeblock path="/examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L19-L25" >}}

LANGUAGE: Ruby
CODE:
{{< gh-codeblock path="/examples/ruby/spec/bidi/cdp/logging_spec.rb#L12" >}}

----------------------------------------

TITLE: Setting Same-Site Cookie Attributes in Selenium WebDriver
DESCRIPTION: Shows how to set Same-Site cookie attributes for CSRF prevention. Supports 'Strict' and 'Lax' modes for controlling third-party cookie behavior.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  # Adds the cookie into current browser context with sameSite 'Strict' (or) 'Lax'
  driver.manage.add_cookie(name: "foo", value: "bar", same_site: "Strict")
  driver.manage.add_cookie(name: "foo1", value: "bar", same_site: "Lax")
  puts driver.manage.cookie_named('foo')
  puts driver.manage.cookie_named('foo1')
ensure
  driver.quit
end

----------------------------------------

TITLE: Listening to Console Logs in Selenium WebDriver BiDi
DESCRIPTION: Demonstrates how to listen to console.log events and register callbacks for processing them. Uses the LogInspector class to monitor console output.

LANGUAGE: Java
CODE:
log.addConsoleListener(consoleEvent -> {
    System.out.println("Text is: " + consoleEvent.getMessages());
    System.out.println("Level: " + consoleEvent.getLevel());
    System.out.println("Location: " + consoleEvent.getLocation());
    System.out.println("Type: " + consoleEvent.getType());
});

LANGUAGE: JavaScript
CODE:
const inspector = await driver.log.getInspector();

const events = [];
inspector.onConsoleEntry(function (event) {
  events.push(event);
});

await driver.get(Pages.logTest);

let result = await Promise.race([
  new Promise((resolve) => {
    inspector.onConsoleEntry((data) => {
      resolve(data);
    });
  }),
  sleep(1000).then(() => 'success'),
]);

----------------------------------------

TITLE: Initializing Local WebDriver in Ruby
DESCRIPTION: This code demonstrates how to create a local WebDriver session in Ruby using Selenium::WebDriver.

LANGUAGE: Ruby
CODE:
driver = Selenium::WebDriver.for :chrome, options: options

----------------------------------------

TITLE: Retrieving Element Tag Name in Selenium
DESCRIPTION: This snippet shows how to use the getTagName() method to fetch the tag name of an element. It returns the tag name as a string.

LANGUAGE: Java
CODE:
String tagName = driver.findElement(By.name("email_input")).getTagName();

LANGUAGE: Python
CODE:
tag_name = driver.find_element(By.NAME, "email_input").tag_name

LANGUAGE: C#
CODE:
string tagName = driver.FindElement(By.Name("email_input")).TagName;

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(name: 'email_input').tag_name).to eq('input')

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.name('email_input'))
const tagName = await element.getTagName()

LANGUAGE: Kotlin
CODE:
val attr =  driver.findElement(By.name("email_input")).getTagName()

----------------------------------------

TITLE: Using Selenium Manager with Custom Mirror URL for Chrome Driver (Shell)
DESCRIPTION: This example demonstrates how to use Selenium Manager from the command line with a custom mirror URL for downloading Chrome driver. It specifies the browser version, avoids browser download, and uses a custom driver mirror URL.

LANGUAGE: shell
CODE:
./selenium-manager --debug --browser chrome --browser-version 100 --avoid-browser-download --driver-mirror-url=https://registry.npmmirror.com/-/binary/chromedriver/

----------------------------------------

TITLE: Network Request Interception in Selenium with CDP
DESCRIPTION: Shows how to intercept and modify network requests using Chrome DevTools Protocol in Selenium. This can be used to test different scenarios or modify outgoing requests.

LANGUAGE: Java
CODE:
devTools.addListener(Fetch.requestPaused(), request -> {
    String newUrl = "https://www.selenium.dev/";
    if (request.getRequest().getUrl().contains("selenium.dev")) {
        devTools.send(Fetch.continueRequest(request.getRequestId(),
                Optional.of(newUrl),
                Optional.of(request.getRequest().getMethod()),
                request.getRequest().getPostData(),
                request.getResponseHeaders(),
                Optional.empty()));
    } else {
        devTools.send(Fetch.continueRequest(request.getRequestId(),
                Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()));
    }
});

devTools.send(Fetch.enable(Optional.empty(), Optional.empty()));

LANGUAGE: C#
CODE:
var newUrl = "https://www.selenium.dev/";

driver.ExecuteCdpCommand("Fetch.enable", new Dictionary<string, object>());

driver.ExecuteCdpCommand("Fetch.requestPaused", new Dictionary<string, object>());

driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");

var element = driver.FindElement(By.Id("requestButton"));
element.Click();

Wait.Until(d => d.Url.Contains(newUrl));

LANGUAGE: Ruby
CODE:
new_url = 'https://www.selenium.dev/'
driver.execute_cdp('Fetch.enable')

driver.on_cdp_event('Fetch.requestPaused') do |params|
  if params.dig('request', 'url').include? 'selenium.dev'
    driver.execute_cdp('Fetch.continueRequest',
                      requestId: params['requestId'],
                      url: new_url)
  else
    driver.execute_cdp('Fetch.continueRequest', requestId: params['requestId'])
  end
end

----------------------------------------

TITLE: Working with Firefox Profiles
DESCRIPTION: Demonstrates how to create and use Firefox profiles, which allow customization of browser settings and add-ons.

LANGUAGE: Java
CODE:
FirefoxProfile profile = new FirefoxProfile();
profile.setPreference("browser.download.dir", "/temp/downloads");
options.setProfile(profile);
WebDriver driver = new FirefoxDriver(options);

LANGUAGE: Python
CODE:
profile = webdriver.FirefoxProfile()
profile.set_preference("browser.download.dir", "/temp/downloads")
options.profile = profile
driver = webdriver.Firefox(options=options)

LANGUAGE: Ruby
CODE:
profile = Selenium::WebDriver::Firefox::Profile.new
profile['browser.download.dir'] = '/temp/downloads'
options.profile = profile

----------------------------------------

TITLE: Configuring Downloads in Remote WebDriver
DESCRIPTION: Setup for enabling and managing file downloads in remote sessions.

LANGUAGE: Java
CODE:
ChromeOptions options = new ChromeOptions();
options.setCapability("se:downloadsEnabled", true);

----------------------------------------

TITLE: Setting Up Remote WebDriver Tracing
DESCRIPTION: Maven dependencies and configuration for implementing request tracing in Remote WebDriver.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-jaeger</artifactId>
    <version>1.0.0</version>
</dependency>
<dependency>
    <groupId>io.grpc</groupId>
    <artifactId>grpc-netty</artifactId>
    <version>1.35.0</version>
</dependency>

----------------------------------------

TITLE: Evaluating Script in Sandbox with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to evaluate a script in a sandbox environment using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
Sandbox sandbox = new Sandbox();
Object result = ((HasBiDi) driver).getBiDi().evaluateScript(
        "1 + 2",
        new ScriptEvaluationOptions().sandbox(sandbox));
assertEquals(3L, result);

----------------------------------------

TITLE: Adding Network Intercept in JavaScript
DESCRIPTION: Demonstrates how to add a network intercept using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.setNetworkConditions({ offline: false, latency: 10, download_throughput: 200 * 1024, upload_throughput: 200 * 1024 });

----------------------------------------

TITLE: Sending CDP Commands in Python
DESCRIPTION: Shows how to send a basic CDP command to change the browser's geolocation using Selenium in Python.

LANGUAGE: python
CODE:
coordinates = {"latitude": 30.2866, "longitude": -97.7390}
driver.execute_cdp_cmd("Emulation.setGeolocationOverride", coordinates)

----------------------------------------

TITLE: Quitting WebDriver Session in Ruby
DESCRIPTION: This snippet demonstrates how to quit a WebDriver session in Ruby.

LANGUAGE: Ruby
CODE:
driver.quit

----------------------------------------

TITLE: Opening New Windows in Selenium
DESCRIPTION: Methods for creating new browsing contexts in windows and tabs using Selenium BiDi commands. Includes options for specifying reference contexts.

LANGUAGE: Java
CODE:
BrowserContext context = new BrowsingContext(driver, null);
String window = context.createWindow();
BrowsingContext.Type type = context.getContextInfo(window).get("type");
assertEquals(BrowsingContext.Type.WINDOW, type);

----------------------------------------

TITLE: Retrieving Element CSS Value in Selenium
DESCRIPTION: This snippet shows how to use the getCssValue() method to retrieve the computed style property of an element. It returns the value of the specified CSS property as a string.

LANGUAGE: Java
CODE:
String cssValue = driver.findElement(By.id("namedColor")).getCssValue("background-color");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/colorPage.html")
css_value = driver.find_element(By.ID, "namedColor").value_of_css_property("background-color")

LANGUAGE: C#
CODE:
string cssValue = driver.FindElement(By.Id("namedColor")).GetCssValue("background-color");

LANGUAGE: Ruby
CODE:
expect(@driver.find_element(id: 'yellow').css_value('background-color')).to eq('rgba(255, 255, 0, 1)')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/colorPage.html')
const element = await driver.findElement(By.id('namedColor'))
const cssValue = await element.getCssValue('background-color')

LANGUAGE: Kotlin
CODE:
val cssValue = driver.findElement(By.id("namedColor")).getCssValue("background-color")

----------------------------------------

TITLE: Implementing Basic Authentication with CDP
DESCRIPTION: Code examples for handling browser authentication by inserting credentials into request headers using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.send(Network.setExtraHTTPHeaders(Map.of("Authorization", "Basic " + auth)))

LANGUAGE: Python
CODE:
devtools.send_cmd('Network.setExtraHTTPHeaders',\n    {'headers': {'Authorization': 'Basic ' + auth}})

LANGUAGE: C#
CODE:
var parameters = new Dictionary<string, object>\n{\n    ["headers"] = new Dictionary<string, string>\n    {\n        ["Authorization"] = "Basic " + auth\n    }\n};\ndevTools.ExecuteCdpCommand("Network.setExtraHTTPHeaders", parameters);

LANGUAGE: Ruby
CODE:
devtools.send_cmd('Network.setExtraHTTPHeaders',\n                  headers: { 'Authorization': "Basic #{auth}" })

----------------------------------------

TITLE: Registering Node to Hub on Different Machine
DESCRIPTION: Command to register a Selenium Grid Node to a Hub running on a different machine.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node --hub http://<hub-ip>:4444

----------------------------------------

TITLE: Initializing Safari WebDriver with Basic Options
DESCRIPTION: Examples of starting a Safari session with basic defined options in various programming languages.

LANGUAGE: java
CODE:
SafariOptions options = new SafariOptions();
WebDriver driver = new SafariDriver(options);

LANGUAGE: python
CODE:
options = webdriver.SafariOptions()
driver = webdriver.Safari(options=options)

LANGUAGE: csharp
CODE:
var options = new SafariOptions();
var driver = new SafariDriver(options);

LANGUAGE: ruby
CODE:
options = Selenium::WebDriver::Safari::Options.new
driver = Selenium::WebDriver.for :safari, options: options

LANGUAGE: javascript
CODE:
const options = new safari.Options();
const driver = await new Builder()
  .forBrowser('safari')
  .setSafariOptions(options)
  .build();

LANGUAGE: kotlin
CODE:
val options = SafariOptions()
val driver = SafariDriver(options)

----------------------------------------

TITLE: Adding Network Intercept in Selenium WebDriver
DESCRIPTION: Demonstrates how to add a network intercept to monitor and potentially modify network requests. Requires Selenium WebDriver 4.18 or higher.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.intercept();
interceptor.addIntercept("*")
    .whenAuthRequired(Optional.empty());

----------------------------------------

TITLE: Performing Actions in JavaScript with Selenium WebDriver BiDi
DESCRIPTION: This snippet shows how to perform actions using the Selenium WebDriver BiDi API in JavaScript. It creates an Actions object and performs a click action on a specific element.

LANGUAGE: javascript
CODE:
await driver.actions().click(await driver.findElement(By.id('clickable'))).perform();

----------------------------------------

TITLE: Adding JavaScript Exception Handler in Python
DESCRIPTION: This code demonstrates how to add a JavaScript exception handler using WebDriver BiDi in Python. It uses the driver's add_log_listener method to register a handler for JavaScript exception events.

LANGUAGE: Python
CODE:
driver.add_log_listener(LogType.JAVASCRIPT, lambda log: print(f"JS exception: {log['text']}"))

----------------------------------------

TITLE: Getting Browser Page Title in Selenium WebDriver
DESCRIPTION: Demonstrates how to retrieve the current page title from the browser using Selenium WebDriver. This is a basic browser interaction that returns the text content of the page's title element.

LANGUAGE: Java
CODE:
driver.getTitle()

LANGUAGE: Python
CODE:
driver.title

LANGUAGE: C#
CODE:
driver.Title

LANGUAGE: Ruby
CODE:
driver.title

LANGUAGE: JavaScript
CODE:
await driver.getTitle()

LANGUAGE: Kotlin
CODE:
driver.title

----------------------------------------

TITLE: Calling Function in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to call a function in a browsing context using Selenium WebDriver BiDi. It includes examples of handling different return types and error scenarios.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();
driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

ScriptManager scriptManager = new ScriptManager(driver);

Object result = scriptManager.callFunctionInBrowsingContext(
    driver.getWindowHandle(),
    "const message = 'Hello from ' + arguments[0];"
        + "console.log(message);"
        + "return message;",
    Arrays.asList("Selenium")
);

assertThat(result).isEqualTo("Hello from Selenium");

result = scriptManager.callFunctionInBrowsingContext(
    driver.getWindowHandle(),
    "1n + 2n",
    List.of()
);

assertThat(result).isEqualTo(3L);

try {
    scriptManager.callFunctionInBrowsingContext(
        driver.getWindowHandle(),
        "invalid.function()",
        List.of()
    );
} catch (JavascriptException e) {
    assertThat(e.getMessage()).contains("invalid is not defined");
}

----------------------------------------

TITLE: Getting Root Logger in Java
DESCRIPTION: Demonstrates how to obtain the root logger in Java for Selenium logging.

LANGUAGE: Java
CODE:
Logger logger = Logger.getLogger("");

----------------------------------------

TITLE: Specifying Alternate Chrome Binary Location
DESCRIPTION: Demonstrates how to set an alternate location for the Chrome browser binary.

LANGUAGE: Java
CODE:
options.setBinary("/path/to/chrome");

LANGUAGE: Python
CODE:
options.binary_location = "/path/to/chrome"

LANGUAGE: C#
CODE:
options.BinaryLocation = "/path/to/chrome";

LANGUAGE: Ruby
CODE:
options.binary = '/path/to/chrome'

LANGUAGE: JavaScript
CODE:
let options = new chrome.Options();
options.setChromeBinaryPath('/path/to/chrome');

let driver = await new Builder()
    .forBrowser('chrome')
    .setChromeOptions(options)
    .build();

----------------------------------------

TITLE: Distributed Grid Startup Script
DESCRIPTION: Shell script for launching Selenium Grid components with external session storage

LANGUAGE: bash
CODE:
SE_VERSION=<current_selenium_version>
JAR_NAME=selenium-server-${SE_VERSION}.jar
PUBLISH="--publish-events tcp://localhost:4442"
SUBSCRIBE="--subscribe-events tcp://localhost:4443"
SESSIONS="--sessions http://localhost:5556"
SESSIONS_QUEUE="--sessionqueue http://localhost:5559"
echo 'Starting Event Bus'
java -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &
echo 'Starting New Session Queue'
java -jar $JAR_NAME sessionqueue --port 5559 &
echo 'Starting Sessions Map'
java -jar $JAR_NAME \
--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \
sessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &
echo 'Starting Distributor'
java -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &
echo 'Starting Router'
java -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &
echo 'Starting Node'
java -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &

----------------------------------------

TITLE: Taking Full Page Screenshots in Firefox
DESCRIPTION: Shows how to capture full page screenshots using Firefox-specific WebDriver commands.

LANGUAGE: Java
CODE:
byte[] fullPageScreenshot = ((FirefoxDriver) driver).getFullPageScreenshotAs(OutputType.BYTES);

LANGUAGE: Python
CODE:
full_page_screenshot = driver.find_element(By.TAG_NAME, 'body').screenshot_as_png

LANGUAGE: Ruby
CODE:
full_page_screenshot = driver.find_element(tag_name: 'body').screenshot_as(:png)

----------------------------------------

TITLE: Removing Network Intercept in Selenium WebDriver
DESCRIPTION: Shows how to remove a previously added network intercept. Requires Selenium WebDriver 4.18 or higher.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.intercept();
interceptor.addIntercept("*");
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
driver.get("https://example.com");
interceptor.removeIntercept("*");

----------------------------------------

TITLE: Unicorn Configuration Verification
DESCRIPTION: Verifies that the unicorn was configured correctly by comparing the expected attributes with the actual values displayed on the confirmation page.

LANGUAGE: Java
CODE:
Assert.assertTrue("Sparkles should have been created, with all attributes intact", unicornConfirmationPage.exists(sparkles));

LANGUAGE: Python
CODE:
assert unicorn_confirmation_page.exists(sparkles), "Sparkles should have been created, with all attributes intact"

----------------------------------------

TITLE: Handling JavaScript Exceptions in Selenium WebDriver BiDi
DESCRIPTION: Shows how to listen for and handle JavaScript exceptions using the LogInspector. Allows capturing and processing exception details when they occur.

LANGUAGE: Java
CODE:
log.addJavaScriptExceptionListener(exceptionEvent -> {
    System.out.println("Exception text is: " + exceptionEvent.getText());
    System.out.println("Exception stacktrace: " + exceptionEvent.getStackTrace());
});

LANGUAGE: JavaScript
CODE:
const inspector = await driver.log.getInspector();

const errors = [];
inspector.onException(function (event) {
  errors.push(event);
});

await driver.get(Pages.logEntryAdded);

let result = await Promise.race([
  new Promise((resolve) => {
    inspector.onException((data) => resolve(data));
  }),
]);

----------------------------------------

TITLE: Configuring Ruby File Logger
DESCRIPTION: Demonstrates how to set up file logging in Ruby for Selenium.

LANGUAGE: Ruby
CODE:
Selenium::WebDriver.logger.output = 'selenium.log'

----------------------------------------

TITLE: Calling Function in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to call a function in a browsing context using Selenium WebDriver BiDi in Java. It shows setting up the driver, creating arguments, and executing the function call.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();
try {
    driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");
    List<Object> args = new ArrayList<>();
    Map<String, Object> person = new HashMap<>();
    person.put("name", "John Doe");
    person.put("age", 30);
    args.add(person);

    Object result = ((HasBiDi) driver).getBiDi().callFunction(
            "handlePerson",
            args,
            ScriptFunctionOptions.defaultOptions());

    System.out.println(result);
    assertEquals("John Doe", ((Map<String, Object>) result).get("name"));
    assertEquals(30, ((Map<String, Object>) result).get("age"));
} finally {
    driver.quit();
}

----------------------------------------

TITLE: Setting Logger Level in Python
DESCRIPTION: Shows how to set the logger level in Python for Selenium logging.

LANGUAGE: Python
CODE:
logger.setLevel(logging.DEBUG)

----------------------------------------

TITLE: Continue Request with Authentication Credentials
DESCRIPTION: Demonstrates handling authentication requests by providing credentials. Requires Selenium WebDriver 4.18 or higher.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.intercept();
Authentication auth = new Authentication("admin", "admin");
interceptor.addIntercept("*")
    .whenAuthRequired(Optional.of(auth));
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
driver.get("https://the-internet.herokuapp.com/basic_auth");
wait.until(d -> d.findElement(By.tagName("h3")));

----------------------------------------

TITLE: Initializing Firefox WebDriver with Basic Options
DESCRIPTION: Sets up a Firefox WebDriver session with basic defined options. This is the starting point for working with Firefox in Selenium.

LANGUAGE: Java
CODE:
FirefoxOptions options = new FirefoxOptions();
WebDriver driver = new FirefoxDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.FirefoxOptions()
driver = webdriver.Firefox(options=options)

LANGUAGE: C#
CODE:
var options = new FirefoxOptions();
var driver = new FirefoxDriver(options);

LANGUAGE: Ruby
CODE:
options = Selenium::WebDriver::Firefox::Options.new
driver = Selenium::WebDriver.for :firefox, options: options

LANGUAGE: JavaScript
CODE:
const options = new firefox.Options();
const driver = await new Builder()
    .forBrowser('firefox')
    .setFirefoxOptions(options)
    .build();

----------------------------------------

TITLE: Initializing Local WebDriver in Python
DESCRIPTION: This code shows how to create a local WebDriver session in Python using the Options class.

LANGUAGE: Python
CODE:
driver = webdriver.Chrome(options=options)

----------------------------------------

TITLE: PostgreSQL Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up PostgreSQL database with initial schema

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  db:
    image: postgres:9.6-bullseye
    restart: always
    environment:
      - POSTGRES_USER=seluser
      - POSTGRES_PASSWORD=seluser
      - POSTGRES_DB=selenium_sessions
    ports:
      - "5432:5432"
    volumes:
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql

----------------------------------------

TITLE: Frame Switching Using WebElement
DESCRIPTION: Examples showing how to switch to an iframe using a WebElement locator across different programming languages

LANGUAGE: python
CODE:
# Store iframe web element
iframe = driver.find_element(By.CSS_SELECTOR, "#modal > iframe")

# switch to selected iframe
driver.switch_to.frame(iframe)

# Now click on button
driver.find_element(By.TAG_NAME, 'button').click()

LANGUAGE: javascript
CODE:
// Store the web element
const iframe = driver.findElement(By.css('#modal > iframe'));

// Switch to the frame
await driver.switchTo().frame(iframe);

// Now we can click the button
await driver.findElement(By.css('button')).click();

----------------------------------------

TITLE: Continue Request without Authentication
DESCRIPTION: Shows how to handle authentication requests without providing credentials. Requires Selenium WebDriver 4.18 or higher.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.intercept();
interceptor.addIntercept("*")
    .whenAuthRequired(Optional.empty());
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
driver.get("https://the-internet.herokuapp.com/basic_auth");
wait.until(ExpectedConditions.not(ExpectedConditions.titleIs("")));

----------------------------------------

TITLE: Scrolling to Element in Selenium
DESCRIPTION: Demonstrates how to scroll a webpage until a specific element is in view. The viewport will be adjusted so the bottom of the target element aligns with the bottom of the screen.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/scrolling_tests/frame_with_nested_scrolling_frame_out_of_view.html");
WebElement iframe = driver.findElement(By.tagName("iframe"));
new Actions(driver)
    .scrollToElement(iframe).perform();

----------------------------------------

TITLE: Querying Grid Status in Selenium Grid
DESCRIPTION: This command retrieves the current status of the Selenium Grid, including details about registered nodes, their availability, sessions, and slots.

LANGUAGE: shell
CODE:
cURL GET 'http://localhost:4444/status'

----------------------------------------

TITLE: Draining Grid Node
DESCRIPTION: Initiates graceful node shutdown by completing ongoing sessions while rejecting new requests.

LANGUAGE: shell
CODE:
cURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '

LANGUAGE: shell
CODE:
cURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Listening to All JavaScript Logs in Java with Selenium BiDi API
DESCRIPTION: This code snippet shows how to listen to all JavaScript logs at all levels and register callbacks to process the logs using Selenium's BiDirectional API in Java. It requires Selenium version 4.8 or higher.

LANGUAGE: Java
CODE:
devTools.getDomains().events().addJavascriptLogListener(e -> {
    System.out.println("JS Log Text: " + e.getText());
    System.out.println("JS Log Level: " + e.getLevel());
    System.out.println("JS Log Time: " + e.getTimestamp());
});

----------------------------------------

TITLE: Setting C# Logger Level
DESCRIPTION: Shows how to set the logger level in C# for Selenium.

LANGUAGE: C#
CODE:
Log.Level = LogLevel.Debug;

----------------------------------------

TITLE: Configuring Edge Browser Location
DESCRIPTION: Sets a specific binary location for the Edge browser executable

LANGUAGE: Java
CODE:
options.setBinary("/path/to/edge");

LANGUAGE: Python
CODE:
options.binary_location = "/path/to/edge"

----------------------------------------

TITLE: Installing Selenium with .NET CLI
DESCRIPTION: Installing Selenium using the .NET Command Line Interface.

LANGUAGE: shell
CODE:
dotnet add package Selenium.WebDriver

----------------------------------------

TITLE: Creating PostgreSQL Sessions Table Schema
DESCRIPTION: SQL schema for creating the sessions_map table to store Selenium Grid session information in PostgreSQL

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS sessions_map(
    session_ids varchar(256),
    session_caps text,
    session_uri varchar(256),
    session_stereotype text,
    session_start varchar(256)
 );

----------------------------------------

TITLE: Frame Switching Using Name or ID
DESCRIPTION: Examples demonstrating how to switch to an iframe using its name or ID attribute

LANGUAGE: python
CODE:
# Switch frame by id
driver.switch_to.frame('buttonframe')

# Now, Click on the button
driver.find_element(By.TAG_NAME, 'button').click()

LANGUAGE: javascript
CODE:
// Using the ID
await driver.switchTo().frame('buttonframe');

// Or using the name instead
await driver.switchTo().frame('myframe');

// Now we can click the button
await driver.findElement(By.css('button')).click();

----------------------------------------

TITLE: Calling Function in Sandbox with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to call a function in a sandbox environment using Selenium WebDriver BiDi. This allows for isolated script execution.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();
driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

ScriptManager scriptManager = new ScriptManager(driver);

Object result = scriptManager.callFunctionInSandbox(
    "const message = 'Hello from ' + arguments[0]; return message;",
    Arrays.asList("Selenium")
);

assertThat(result).isEqualTo("Hello from Selenium");

----------------------------------------

TITLE: Setting DOM Mutation Handler with Chrome DevTools Protocol in Python
DESCRIPTION: This snippet shows how to set a DOM mutation handler using the Chrome DevTools Protocol in Python. It utilizes the driver.execute_cdp_cmd method to send the DOMSnapshot.enable command.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('DOMSnapshot.enable', {})
driver.execute_cdp_cmd('DOMSnapshot.captureSnapshot', {'computedStyles': []})

----------------------------------------

TITLE: Using ThreadGuard to Protect WebDriver in Java
DESCRIPTION: This code snippet demonstrates how to use ThreadGuard to protect a WebDriver instance from being accessed by multiple threads. It simulates a thread clash by creating a WebDriver in the main thread and attempting to access it from a different thread.

LANGUAGE: java
CODE:
public class DriverClash {
  //thread main (id 1) created this driver
  private WebDriver protectedDriver = ThreadGuard.protect(new ChromeDriver()); 

  static {
    System.setProperty("webdriver.chrome.driver", "<Set path to your Chromedriver>");
  }
  
  //Thread-1 (id 24) is calling the same driver causing the clash to happen
  Runnable r1 = () -> {protectedDriver.get("https://selenium.dev");};
  Thread thr1 = new Thread(r1);
   
  void runThreads(){
    thr1.start();
  }

  public static void main(String[] args) {
    new DriverClash().runThreads();
  }
}

----------------------------------------

TITLE: Handling Script Message Event with Selenium WebDriver BiDi (Java)
DESCRIPTION: Illustrates how to handle script message events using Selenium WebDriver BiDi in Java. It shows setting up an event listener and processing received messages.

LANGUAGE: Java
CODE:
CountDownLatch latch = new CountDownLatch(1);
AtomicReference<ScriptMessage> message = new AtomicReference<>();
((HasBiDi) driver).getBiDi().addListener(Script.message(), event -> {
    message.set((ScriptMessage) event);
    latch.countDown();
});
((HasBiDi) driver).getBiDi().subscribe(new SubscribeOptions(Script.MessageEvent));

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");
driver.findElement(By.id("consoleLog")).click();

assertTrue(latch.await(5, TimeUnit.SECONDS));
assertNotNull(message.get());
assertEquals("Hello, world!", message.get().getData());

----------------------------------------

TITLE: Evaluating Script in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to evaluate a script in a browsing context using Selenium WebDriver BiDi. This is useful for executing arbitrary JavaScript code.

LANGUAGE: Java
CODE:
Object result = scriptManager.evaluateInBrowsingContext(
    driver.getWindowHandle(),
    "1 + 2"
);
assertThat(result).isEqualTo(3L);

----------------------------------------

TITLE: Sending Keys to Designated Element in Selenium WebDriver
DESCRIPTION: Shows how to send keys to a specific web element using the Actions API in Selenium WebDriver.

LANGUAGE: Java
CODE:
WebElement element = driver.findElement(By.id("text-input"));
new Actions(driver)
    .sendKeys(element, "Selenium!")
    .perform();

LANGUAGE: Python
CODE:
element = driver.find_element(By.ID, "text-input")
Actions(driver)\
    .send_keys_to_element(element, "Selenium!")\
    .perform()

LANGUAGE: C#
CODE:
var element = driver.FindElement(By.Id("text-input"));
new Actions(driver)
    .SendKeys(element, "Selenium!")
    .Perform();

LANGUAGE: Ruby
CODE:
element = driver.find_element(id: 'text-input')
Actions.new(driver)
  .send_keys_to_element(element, 'Selenium!')
  .perform

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.id("text-input"));
await driver.actions()
    .sendKeys(element, "Selenium!")
    .perform();

LANGUAGE: Kotlin
CODE:
val element = driver.findElement(By.id("text-input"))
Actions(driver)
    .sendKeys(element, "Selenium!")
    .perform()

----------------------------------------

TITLE: Getting All Realms with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to retrieve all available realms using Selenium WebDriver BiDi. This is useful for managing different JavaScript execution contexts.

LANGUAGE: Java
CODE:
List<String> realms = scriptManager.getAllRealms();
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Basic IE Options Configuration
DESCRIPTION: Demonstrates setting up basic Internet Explorer options for Edge compatibility mode.

LANGUAGE: Java
CODE:
InternetExplorerOptions options = new InternetExplorerOptions();
WebDriver driver = new InternetExplorerDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.IeOptions()
driver = webdriver.Ie(options=options)

----------------------------------------

TITLE: Starting Multiple Nodes on Same Machine
DESCRIPTION: Commands to start multiple Selenium Grid Nodes on the same machine using different ports.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node --port 5555

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node --port 6666

----------------------------------------

TITLE: Redis Sessions TOML Configuration
DESCRIPTION: TOML configuration file for Redis-backed session storage in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
scheme = "redis"
implementation = "org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap"
hostname = "localhost"
port = 6379

----------------------------------------

TITLE: Pressing a Key Down in Selenium WebDriver
DESCRIPTION: Demonstrates how to press a key down using the Actions API in Selenium WebDriver. The example shows pressing the Shift key.

LANGUAGE: Java
CODE:
new Actions(driver)
    .keyDown(Keys.SHIFT)
    .sendKeys("a")
    .perform();

LANGUAGE: Python
CODE:
Actions(driver)\
    .key_down(Keys.SHIFT)\
    .send_keys("a")\
    .perform()

LANGUAGE: C#
CODE:
new Actions(driver)
    .KeyDown(Keys.Shift)
    .SendKeys("a")
    .Perform();

LANGUAGE: Ruby
CODE:
Actions.new(driver)
  .key_down(:shift)
  .send_keys('a')
  .perform

LANGUAGE: JavaScript
CODE:
await driver.actions()
    .keyDown(Key.SHIFT)
    .sendKeys("a")
    .perform();

LANGUAGE: Kotlin
CODE:
Actions(driver)
    .keyDown(Keys.SHIFT)
    .sendKeys("a")
    .perform()

----------------------------------------

TITLE: Getting Realm by Type with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to retrieve realms of a specific type using Selenium WebDriver BiDi. This allows for filtering realms based on their characteristics.

LANGUAGE: Java
CODE:
List<String> realms = scriptManager.getRealms(RealmType.WINDOW);
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Updating Service Object Usage in Python
DESCRIPTION: Shows how to use a Service object to set the driver's executable path in Python to prevent deprecation warnings.

LANGUAGE: Python
CODE:
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
options = webdriver.ChromeOptions()
service = ChromeService(executable_path=CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

----------------------------------------

TITLE: File Upload Implementation in Kotlin
DESCRIPTION: Demonstrates uploading a file using Selenium WebDriver in Kotlin. The code opens a test page, locates the file upload input element, sends the file path, submits the form, and verifies the upload success.

LANGUAGE: kotlin
CODE:
import org.openqa.selenium.By
import org.openqa.selenium.chrome.ChromeDriver

fun main() {
    val driver = ChromeDriver()
    driver.get("https://the-internet.herokuapp.com/upload")
    driver.findElement(By.id("file-upload")).sendKeys("selenium-snapshot.jpg")
    driver.findElement(By.id("file-submit")).submit()
    if(driver.pageSource.contains("File Uploaded!")) {
        println("file uploaded")
    }
    else{
        println("file not uploaded")
    }
}

----------------------------------------

TITLE: Starting a Custom Node with Regular Jar in Selenium Grid
DESCRIPTION: Command to start a custom Selenium Grid Node using a regular jar. The command includes the Selenium server jar, the custom Node jar, and specifies the custom Node implementation class.

LANGUAGE: bash
CODE:
java -jar selenium-server-4.6.0.jar \
--ext custom_node-1.0-SNAPSHOT.jar node \
--node-implementation org.seleniumhq.samples.DecoratedLoggingNode

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in Ruby
DESCRIPTION: This snippet demonstrates how to upload a file using Selenium WebDriver in Ruby. It uses the send_keys method to provide the file path to an input element of type 'file'.

LANGUAGE: Ruby
CODE:
@driver.find_element(id: 'file-upload').send_keys('test-files/selenium-snapshot.jpg')
@driver.find_element(id: 'file-submit').submit

----------------------------------------

TITLE: Performing Double Click in Selenium
DESCRIPTION: This method combines moving to the center of an element with pressing and releasing the left mouse button twice in quick succession.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .doubleClick(clickable)
        .perform();

----------------------------------------

TITLE: Setting Page Size in Python
DESCRIPTION: This snippet illustrates how to set the page size for printing using Selenium's PrintOptions in Python. It uses the page_size property to specify the desired paper size.

LANGUAGE: Python
CODE:
print_options = PrintOptions()
print_options.page_size = "A4"
assert print_options.page_size == "A4"

----------------------------------------

TITLE: Handling JavaScript Exceptions in Selenium BiDi API
DESCRIPTION: Shows how to capture and process JavaScript exceptions using the BiDi API's exception handling capabilities.

LANGUAGE: Java
CODE:
LogInspector logInspector = new LogInspector(devTools);
logInspector.onJavaScriptException(jsException -> {
    System.out.println("JS Exception Text: " + jsException.getText());
    System.out.println("JS Exception Timestamp: " + jsException.getTimestamp());
});

LANGUAGE: JavaScript
CODE:
const logInspector = await driver.log.getLog();
let exceptionPromise = new Promise(resolve => {
  logInspector.onException(exception => {
    resolve(exception);
  });
});

await driver.executeScript('throw new Error("Test error")');
let exception = await exceptionPromise;

assert(exception.text.includes('Test error'));
assert(exception.timestamp > 0);
assert.strictEqual(exception.type, 'javascript');

----------------------------------------

TITLE: Disowning Handles in Realm with JavaScript
DESCRIPTION: Shows how to disown handles in a specific realm using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.disownScriptHandles(realm)

----------------------------------------

TITLE: Navigating Back with Selenium WebDriver
DESCRIPTION: This snippet shows how to simulate pressing the browser's back button using Selenium WebDriver.

LANGUAGE: Java
CODE:
driver.navigate().back();

LANGUAGE: Python
CODE:
driver.back()

LANGUAGE: C#
CODE:
driver.Navigate().Back();

LANGUAGE: Ruby
CODE:
driver.navigate.back

LANGUAGE: JavaScript
CODE:
await driver.navigate().back();

LANGUAGE: Kotlin
CODE:
driver.navigate().back()

----------------------------------------

TITLE: Removing a Preloaded Script with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to remove a previously preloaded script using Selenium WebDriver BiDi. This is useful for managing script resources.

LANGUAGE: Java
CODE:
scriptManager.removePreloadScript(scriptId);

----------------------------------------

TITLE: Sending CDP Commands in Java
DESCRIPTION: Demonstrates how to send a basic CDP command to change the browser's geolocation using Selenium in Java.

LANGUAGE: java
CODE:
Map<String, Object> coordinates = Map.of("latitude", 30.2866, "longitude", -97.7390);
devTools.executeCdpCommand("Emulation.setGeolocationOverride", coordinates);

----------------------------------------

TITLE: Implementing Explicit Wait in WebDriver Java
DESCRIPTION: Shows how to use WebDriverWait to wait for a specific condition before proceeding with the test.

LANGUAGE: java
CODE:
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(30));
WebElement element= wait.until(visibilityOfElementLocated(By.id("some_id")));

----------------------------------------

TITLE: Capturing a Screenshot in JavaScript
DESCRIPTION: Captures a screenshot of the current browsing context using Selenium WebDriver BiDi.

LANGUAGE: JavaScript
CODE:
const { browsingContext } = driver.getBidi();
const screenshot = await browsingContext.captureScreenshot();
assert.isNotNull(screenshot);

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in Python
DESCRIPTION: This snippet shows how to upload a file using Selenium WebDriver in Python. It uses the send_keys method to provide the file path to an input element of type 'file'.

LANGUAGE: Python
CODE:
driver.find_element(By.ID, "file-upload").send_keys("test-files/selenium-snapshot.jpg")
driver.find_element(By.ID, "file-submit").submit()

----------------------------------------

TITLE: Performing Forward Click in Selenium
DESCRIPTION: This method presses and releases mouse button 4, which is typically associated with the 'Forward' function in browsers.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .moveToElement(clickable)
        .click(new MouseButton(4, "forward"))
        .build()
        .perform();

----------------------------------------

TITLE: Handling Realm Created Event with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to listen for and handle realm creation events using Selenium WebDriver BiDi. This is useful for tracking the creation of new JavaScript execution contexts.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();

BiDiEventManager biDiEventManager = new BiDiEventManager(driver);

CountDownLatch latch = new CountDownLatch(1);
biDiEventManager.addScriptEventListener(event -> {
    if (event instanceof RealmCreated) {
        RealmCreated realmCreated = (RealmCreated) event;
        assertThat(realmCreated.getRealm()).isNotEmpty();
        latch.countDown();
    }
});

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();

----------------------------------------

TITLE: Configuring Page Margins in Java
DESCRIPTION: This code demonstrates how to set custom page margins for printing using Selenium's PrintOptions in Java. It uses the setPageMargin() method to specify margins for all sides of the page.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
Margin margin = new Margin(0.5, 1.0, 1.5, 2.0);
printOptions.setPageMargin(margin);
assertThat(printOptions.getPageMargin().getTop()).isEqualTo(0.5);
assertThat(printOptions.getPageMargin().getBottom()).isEqualTo(1.0);
assertThat(printOptions.getPageMargin().getLeft()).isEqualTo(1.5);
assertThat(printOptions.getPageMargin().getRight()).isEqualTo(2.0);

----------------------------------------

TITLE: Removing Network Intercept in Java
DESCRIPTION: Shows how to remove a previously added network intercept in Selenium WebDriver BiDi using Java.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("balloon")).to(() -> req -> new HttpResponse().setBody("Intercepted"))
);
interceptor.close();

----------------------------------------

TITLE: Getting All Realms with JavaScript
DESCRIPTION: Shows how to retrieve all realms using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms()
assert.ok(realms.length > 0)

----------------------------------------

TITLE: Navigating Forward with Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to simulate pressing the browser's forward button using Selenium WebDriver.

LANGUAGE: Java
CODE:
driver.navigate().forward();

LANGUAGE: Python
CODE:
driver.forward()

LANGUAGE: C#
CODE:
driver.Navigate().Forward();

LANGUAGE: Ruby
CODE:
driver.navigate.forward

LANGUAGE: JavaScript
CODE:
await driver.navigate().forward();

LANGUAGE: Kotlin
CODE:
driver.navigate().forward()

----------------------------------------

TITLE: Calling Function in Browsing Context with JavaScript
DESCRIPTION: Shows how to call a function in a browsing context using Selenium WebDriver BiDi in JavaScript. This example demonstrates navigating to a page, executing scripts, and asserting the results.

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')

let result = await driver.executeScript('return \'HI\'')
assert.strictEqual(result, 'HI')

result = await driver.executeScript('return document.body.getAttribute(\'bgcolor\')')
assert.strictEqual(result, '#FFFFFF')

result = await driver.executeScript('return document')
assert.strictEqual(typeof result, 'object')
assert.strictEqual(result.nodeType, 9)
assert.strictEqual(result.nodeName, '#document')

result = await driver.executeScript('return [1, 2, 3]')
assert.deepStrictEqual(result, [1, 2, 3])

result = await driver.executeScript('return {"selenium":"webdriver"}')
assert.deepStrictEqual(result, { selenium: 'webdriver' })

result = await driver.executeScript('return document.querySelector(\'#noSuchElement\')')
assert.strictEqual(result, null)

----------------------------------------

TITLE: Adding JavaScript Exception Handler in WebDriver BiDi (Python)
DESCRIPTION: This snippet demonstrates how to add a JavaScript exception handler in WebDriver BiDi using Python. It captures and prints JavaScript exceptions that occur during execution.

LANGUAGE: Python
CODE:
from selenium.webdriver.common.bidi.console import Console

driver.add_listener(Console.EXCEPTION, lambda log: print(log.text))

----------------------------------------

TITLE: Adding JavaScript Exception Handler in WebDriver BiDi (Python)
DESCRIPTION: This snippet demonstrates how to add a JavaScript exception handler in WebDriver BiDi using Python. It captures and prints JavaScript exceptions that occur during execution.

LANGUAGE: Python
CODE:
from selenium.webdriver.common.bidi.console import Console

driver.add_listener(Console.EXCEPTION, lambda log: print(log.text))

----------------------------------------

TITLE: Redis Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up a Redis instance for Selenium Grid session storage

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  redis:
    image: redis:bullseye
    restart: always
    ports:
      - "6379:6379"

----------------------------------------

TITLE: Setting Specific Port for Driver Service in Selenium
DESCRIPTION: Examples of how to specify a custom port for the driver service to run on across different programming languages.

LANGUAGE: Java
CODE:
ChromeDriverService service = new ChromeDriverService.Builder().usingPort(9515).build();

LANGUAGE: Python
CODE:
service = Service(port=9515)

LANGUAGE: C#
CODE:
var service = ChromeDriverService.CreateDefaultService();
service.Port = 9515;

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new(port: 9515)

----------------------------------------

TITLE: Basic Edge Driver Setup
DESCRIPTION: Creates a new Edge driver instance with basic options configuration

LANGUAGE: Java
CODE:
EdgeOptions options = new EdgeOptions();
WebDriver driver = new EdgeDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.EdgeOptions()
driver = webdriver.Edge(options=options)

----------------------------------------

TITLE: Scrolling by Fixed Amount in Selenium
DESCRIPTION: Shows how to scroll the page by specific x and y delta values. Positive values scroll right and down, negative values scroll left and up.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/scrolling_tests/frame_with_nested_scrolling_frame_out_of_view.html");
WebElement iframe = driver.findElement(By.tagName("iframe"));
new Actions(driver)
    .scroll(0, 200).perform();

----------------------------------------

TITLE: Setting Shrink-to-Fit Option in Python
DESCRIPTION: This snippet illustrates how to enable or disable the shrink-to-fit option for printing using Selenium's PrintOptions in Python. It uses the shrink_to_fit property to control whether the page content is adjusted to fit the printed page.

LANGUAGE: Python
CODE:
print_options = PrintOptions()
print_options.shrink_to_fit = True
assert print_options.shrink_to_fit is True

----------------------------------------

TITLE: Retrieving New Session Queue Requests in Selenium Grid
DESCRIPTION: This command retrieves the current requests in the new session queue, returning the total number of requests and their payloads.

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'

----------------------------------------

TITLE: Removing a Preloaded Script with JavaScript
DESCRIPTION: Shows how to remove a preloaded script using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.removePreloadScript(handle)

----------------------------------------

TITLE: Using Java 11 HTTP Client with Selenium Grid
DESCRIPTION: Command to start Selenium Grid using the Java 11 HTTP Client instead of the default AsyncHttpClient.

LANGUAGE: shell
CODE:
java -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-<version>.jar --ext selenium-http-jdk-client-<version>.jar standalone

----------------------------------------

TITLE: Calling Function in Sandbox with Java
DESCRIPTION: Demonstrates calling a function in a sandbox environment using Selenium WebDriver BiDi in Java. This example shows creating a sandbox and executing a script within it.

LANGUAGE: Java
CODE:
Sandbox sandbox = new Sandbox();
ScriptResult result = driver.executeScript(
    "const num1 = arguments[0]; const num2 = arguments[1]; return num1 + num2;",
    sandbox,
    List.of(31, 11)
);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("type").getAsString()).isEqualTo("number");
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsInt()).isEqualTo(42);

----------------------------------------

TITLE: Capturing Console Logs with CDP in Python
DESCRIPTION: This snippet shows how to capture console logs using Chrome DevTools Protocol in Python. It uses the driver.execute_cdp_cmd() method to enable logging.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Log.enable', {})
driver.execute_cdp_cmd('Runtime.enable', {})

----------------------------------------

TITLE: Performance Metrics Capture with CDP in Selenium
DESCRIPTION: Demonstrates how to capture performance metrics using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
Object metrics = devTools.send(Performance.getMetrics());
LOG.info(String.valueOf(metrics));

LANGUAGE: Python
CODE:
metrics = driver.execute_cdp_cmd('Performance.getMetrics', {})
print(metrics)

LANGUAGE: C#
CODE:
var metrics = driver.ExecuteCdpCommand("Performance.getMetrics", new Dictionary<string, object>());
Console.WriteLine(metrics);
Driver.ExecuteCdpCommand("Performance.disable", new Dictionary<string, object>());

LANGUAGE: Ruby
CODE:
metrics = driver.execute_cdp('Performance.getMetrics')
puts metrics

----------------------------------------

TITLE: Accessing Selenium Grid Session Map Setup Information
DESCRIPTION: This command provides setup steps for different session storage options in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar info sessionmap

----------------------------------------

TITLE: Configuring HTTP Client in Ruby for Selenium
DESCRIPTION: This Ruby code snippet shows how to configure HTTP client parameters for Selenium WebDriver. It demonstrates setting connection and read timeouts for the client.

LANGUAGE: Ruby
CODE:
options = Selenium::WebDriver::Chrome::Options.new
options.add_option('se:clientConfig', {timeouts: {connect: 60_000, read: 60_000}})

----------------------------------------

TITLE: Scrolling from Element with Offset using Selenium Actions API
DESCRIPTION: This snippet shows how to scroll from a specific element with an offset. The offset is calculated from the center of the provided element. If the element is out of view, it's first scrolled to the bottom of the screen.

LANGUAGE: Java
CODE:
WebElement footer = driver.findElement(By.tagName("footer"));
int deltaX = 0;
int deltaY = -150;
new Actions(driver)
        .scrollFromElement(footer, 0, -50, deltaX, deltaY)
        .perform();

LANGUAGE: Python
CODE:
footer = driver.find_element(By.TAG_NAME, "footer")
delta_x = 0
delta_y = -150
Actions(driver)\
    .scroll_from_element(footer, 0, -50, delta_x, delta_y)\
    .perform()

LANGUAGE: C#
CODE:
var footer = driver.FindElement(By.TagName("footer"));
int deltaX = 0;
int deltaY = -150;
new Actions(driver)
    .ScrollFromElement(footer, 0, -50, deltaX, deltaY)
    .Perform();

LANGUAGE: Ruby
CODE:
footer = driver.find_element(tag_name: 'footer')
delta_x = 0
delta_y = -150
driver.action
  .scroll_from(footer, 0, -50, delta_x, delta_y)
  .perform

LANGUAGE: JavaScript
CODE:
const footer = await driver.findElement(By.css('footer'));
const deltaX = 0;
const deltaY = -150;
await driver.actions()
    .scroll(0, -50, deltaX, deltaY, footer)
    .perform();

LANGUAGE: Kotlin
CODE:
val footer = driver.findElement(By.tagName("footer"))
val deltaX = 0
val deltaY = -150
Actions(driver)
    .scrollFromElement(footer, 0, -50, deltaX, deltaY)
    .perform()

----------------------------------------

TITLE: Evaluating Script in Browsing Context with Java
DESCRIPTION: Demonstrates how to evaluate a script in a browsing context using Selenium WebDriver BiDi in Java. This example shows executing a script and asserting the result.

LANGUAGE: Java
CODE:
ScriptResult result = driver.executeScript("return document.readyState");

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("complete");

----------------------------------------

TITLE: Executing Print Operation in C#
DESCRIPTION: This code demonstrates how to execute a print operation using Selenium's IPrintOptions interface in C#. It configures print options and generates a PDF of the web page.

LANGUAGE: C#
CODE:
var printOptions = new PrintOptions();
printOptions.Orientation = PrintOrientation.Landscape;
var printOutput = ((IPrintOptions)driver).Print(printOptions);
File.WriteAllBytes("test.pdf", printOutput);

----------------------------------------

TITLE: Calling Function in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Illustrates calling a function in a specific realm using Selenium WebDriver BiDi in Java. It includes getting realms and executing a function in a selected realm.

LANGUAGE: Java
CODE:
List<Realm> realms = ((HasBiDi) driver).getBiDi().getRealms();
Realm windowRealm = realms.stream().filter(r -> r.getType().equals("window")).findFirst().get();

Object result = ((HasBiDi) driver).getBiDi().callFunction(
        "() => document.readyState",
        List.of(),
        new ScriptFunctionOptions().realm(windowRealm));

assertEquals("complete", result);

----------------------------------------

TITLE: Preloading a Script with Java
DESCRIPTION: Demonstrates preloading a script using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.preloadScript("return document.querySelector('h1').innerText");

----------------------------------------

TITLE: Adding Metadata to Selenium Tests
DESCRIPTION: Java code example demonstrating how to add metadata to Selenium tests using capabilities prefixed with 'se:'.

LANGUAGE: java
CODE:
ChromeOptions chromeOptions = new ChromeOptions();
chromeOptions.setCapability("browserVersion", "100");
chromeOptions.setCapability("platformName", "Windows");
// Showing a test name instead of the session id in the Grid UI
chromeOptions.setCapability("se:name", "My simple test"); 
// Other type of metadata can be seen in the Grid UI by clicking on the 
// session info or via GraphQL
chromeOptions.setCapability("se:sampleMetadata", "Sample metadata value"); 
WebDriver driver = new RemoteWebDriver(new URL("http://gridUrl:4444"), chromeOptions);
driver.get("http://www.google.com");
driver.quit();

----------------------------------------

TITLE: Getting All Realms with Java
DESCRIPTION: Demonstrates retrieving all realms using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms();
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Enabling Downloads in Remote WebDriver for Java
DESCRIPTION: Configures Chrome options to enable managed downloads in a Remote WebDriver session.

LANGUAGE: Java
CODE:
ChromeOptions options = new ChromeOptions();
options.setCapability("se:downloadsEnabled", true);
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444"), options);

----------------------------------------

TITLE: Using Browser-Specific Features with Augmenter in Java
DESCRIPTION: Demonstrates how to use browser-specific features in a Remote WebDriver session using the Augmenter class.

LANGUAGE: Java
CODE:
WebDriver augmentedDriver = new Augmenter().augment(driver);
Chrome chrome = (Chrome) augmentedDriver;

----------------------------------------

TITLE: Navigating to a URL in Java
DESCRIPTION: Navigates to a specified URL using a browsing context in Selenium WebDriver BiDi.

LANGUAGE: Java
CODE:
BiDi bidi = ((HasBiDi) driver).getBiDi();
BrowsingContext browsingContext = new BrowsingContext(bidi, ((HasBiDi) driver).getWindowHandle());

Info info = browsingContext.navigate(TEST_PAGE_URL);
assertNotNull(info);
assertNotNull(info.navigation());
assertNotNull(info.url());

----------------------------------------

TITLE: Handling JavaScript Exceptions in Selenium BiDi API
DESCRIPTION: Shows how to capture and process JavaScript exceptions using Selenium's BiDirectional API. Includes exception listener setup and error handling.

LANGUAGE: Java
CODE:
LogInspector logInspector = new LogInspector(driver);
logInspector.onJavaScriptException(logEntry -> {
    assertThat(logEntry.getText()).contains("ReferenceError: foo is not defined");
    assertThat(logEntry.getLevel()).isEqualTo("error");
});

LANGUAGE: JavaScript
CODE:
test('should listen to JavaScript exceptions', async () => {
  let jsException;
  const inspector = await driver.getLogInspector();
  
  inspector.onJavaScriptException(exception => {
    jsException = exception;
  });
  
  await driver.get(Pages.logTest);
  await driver.executeScript('return foo.bar();');
  
  await expect(jsException.text).toContain('ReferenceError: foo is not defined');
  await expect(jsException.type).toBe('javascript');
});

----------------------------------------

TITLE: Advanced Pen Actions with Pointer Event Attributes
DESCRIPTION: Shows how to configure advanced pen pointer attributes like pressure, tilt, and twist. Demonstrates creating a pen input device with custom parameters and performing actions with these attributes.

LANGUAGE: Java
CODE:
Pen pen = new Pen();
Actions actions = new Actions(driver);

WebElement element = driver.findElement(By.id("draw"));

PenPointer pointer = pen.createPointer("default pen")
    .withPressure(0.25)
    .withTiltX(-27)
    .withTiltY(10)
    .withTwist(36);

actions.tick(pointer.createPointerMove(Duration.ofMillis(0), Origin.pointer(), 0, 0))
    .tick(pointer.createPointerDown(0))
    .tick(pointer.createPointerUp(0))
    .perform();

LANGUAGE: Python
CODE:
pen = Pen()
actions = ActionChains(driver)

element = driver.find_element(By.ID, "draw")

actions.w3c_actions.pointer_action.set_pressure(0.25)\
    .set_tilt_x(-27)\
    .set_tilt_y(10)\
    .set_twist(36)\
    .perform()

----------------------------------------

TITLE: Configuring Virtual Authenticator Options
DESCRIPTION: Sets up the basic configuration options for a virtual authenticator including protocol, transport method, and resident key requirements.

LANGUAGE: Java
CODE:
VirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()
    .setProtocol(Protocol.U2F)
    .setTransport(Transport.USB)
    .setHasResidentKey(false)
    .setHasUserVerification(true)
    .setIsUserConsenting(true)
    .setIsUserVerified(true);

LANGUAGE: Python
CODE:
options = VirtualAuthenticatorOptions()
options.protocol = Protocol.U2F
options.transport = Transport.USB
options.has_resident_key = False
options.has_user_verification = True
options.is_user_consenting = True
options.is_user_verified = True

----------------------------------------

TITLE: Handling Realm Destroyed Event with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to listen for and handle realm destruction events using Selenium WebDriver BiDi. This is useful for tracking the removal of JavaScript execution contexts.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();

BiDiEventManager biDiEventManager = new BiDiEventManager(driver);

CountDownLatch latch = new CountDownLatch(1);
biDiEventManager.addScriptEventListener(event -> {
    if (event instanceof RealmDestroyed) {
        RealmDestroyed realmDestroyed = (RealmDestroyed) event;
        assertThat(realmDestroyed.getRealm()).isNotEmpty();
        latch.countDown();
    }
});

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");
driver.quit();

assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();

----------------------------------------

TITLE: Listening to 'Response Completed' Network Event in Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to listen for the 'Response Completed' network event using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
AtomicReference<String> body = new AtomicReference<>();
interceptor.addResponseCompletedHandler(response -> {
    body.set(response.getBody().orElse(""));
    return null;
});
driver.get(baseUrl);
assertThat(body.get()).contains("<title>The Internet</title>");

----------------------------------------

TITLE: Querying Node Status in Selenium Grid
DESCRIPTION: Demonstrates how to query the status of each node in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query": "{ nodesInfo { nodes { status } } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Removing a Preloaded Script with Java
DESCRIPTION: Demonstrates removing a preloaded script using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.removePreloadScript(scriptId);

----------------------------------------

TITLE: Scrolling from Viewport Offset using Selenium Actions API
DESCRIPTION: This snippet demonstrates scrolling from a specified offset within the current viewport. The offset is calculated from the upper left corner of the viewport. This is useful for scrolling a portion of the screen that's already visible.

LANGUAGE: Java
CODE:
int deltaX = 0;
int deltaY = 200;
new Actions(driver)
        .scrollFromOrigin(WheelInput.ScrollOrigin.fromViewport(10, 10), deltaX, deltaY)
        .perform();

----------------------------------------

TITLE: Querying New Session Queue Size in Selenium Grid
DESCRIPTION: Shows how to query the size of the New Session Queue in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ grid { sessionQueueSize } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Getting Browsing Context Realms by Type with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to retrieve realms of a specific type within a browsing context using Selenium WebDriver BiDi. This allows for fine-grained control over JavaScript execution environments.

LANGUAGE: Java
CODE:
List<String> realms = scriptManager.getBrowsingContextRealms(driver.getWindowHandle(), RealmType.WINDOW);

----------------------------------------

TITLE: Python PyTest Logging Configuration
DESCRIPTION: Command line configuration for enabling logging output in PyTest

LANGUAGE: bash
CODE:
pytest -s -p no:logging

----------------------------------------

TITLE: Releasing Actions in Selenium WebDriver
DESCRIPTION: Shows how to release previously performed actions using Selenium WebDriver's bidirectional API. This functionality requires Selenium version 4.17 or higher.

LANGUAGE: Java
CODE:
List<InputSource> expected = Arrays.asList(
    new KeyInputSource("key"),
    new PointerInputSource(PointerInput.Kind.MOUSE, "mouse"),
    new WheelInputSource("wheel")
);
assertThat(driver.releaseActions()).isEqualTo(expected);

LANGUAGE: JavaScript
CODE:
await driver.releaseActions();

----------------------------------------

TITLE: Handling Realm Created Event with JavaScript
DESCRIPTION: Shows how to handle a realm created event using Selenium WebDriver BiDi in JavaScript. This example demonstrates subscribing to the event, triggering a realm creation, and asserting the event details.

LANGUAGE: JavaScript
CODE:
const realmPromise = new Promise((resolve) => {
  driver.onRealmCreated((event) => {
    resolve(event)
  })
})

await driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')

const event = await realmPromise

assert.strictEqual(event.realm.type, 'window')
assert.ok(event.realm.origin.includes('selenium.dev'))
assert.ok(event.browsingContext)
assert.ok(event.browsingContext.id)

----------------------------------------

TITLE: Creating Virtual Authenticator Options in Java
DESCRIPTION: This snippet demonstrates how to create VirtualAuthenticatorOptions with specific properties for a virtual authenticator.

LANGUAGE: Java
CODE:
VirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()
    .setProtocol(Protocol.U2F)
    .setTransport(Transport.USB)
    .setHasResidentKey(false)
    .setHasUserVerification(false)
    .setIsUserConsenting(true)
    .setIsUserVerified(false);

----------------------------------------

TITLE: Pinning Scripts with Chrome DevTools Protocol in Ruby
DESCRIPTION: This snippet illustrates how to pin a script using the Chrome DevTools Protocol in Ruby. It uses the execute_cdp method to add a script that will be evaluated on new document loads.

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Page.addScriptToEvaluateOnNewDocument',
                source: 'window.elementAdded = e => console.log(e);')

----------------------------------------

TITLE: Removing Network Intercept in Selenium WebDriver
DESCRIPTION: This code shows how to remove a previously added network intercept using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
InterceptionId id = interceptor.addIntercept("*", builder -> builder
        .addHeader("intercepted-header", "intercepted-value"));
interceptor.removeIntercept(id);

----------------------------------------

TITLE: Querying Selenium Grid Max Session Count
DESCRIPTION: Shows how to query the maximum session count from the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ grid { maxSession } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Releasing Actions in Selenium WebDriver BiDi (Java)
DESCRIPTION: This snippet demonstrates how to release actions using Selenium WebDriver BiDi in Java. It creates an Actions object, performs a sequence of actions, and then releases all actions.

LANGUAGE: Java
CODE:
Actions actions = new Actions(driver);
actions.moveByOffset(100, 100).click().perform();

// Release actions
actions.release().perform();

----------------------------------------

TITLE: Example Selenium Manager Configuration File
DESCRIPTION: Sample TOML configuration file for Selenium Manager with various settings.

LANGUAGE: toml
CODE:
# Selenium Manager configuration file

# Browser settings
browser = "chrome"
browser-version = "116"
chrome-version = "116"
firefox-version = "115"
edge-version = "115"

# Driver settings
driver = "chromedriver"
driver-version = "116.0.5845.96"
chromedriver-version = "116.0.5845.96"
geckodriver-version = "0.33.0"
msedgedriver-version = "115.0.1901.203"

# General settings
cache-path = "/custom/cache/path"
proxy = "http://myproxy.com:8080"
timeout = 600
offline = false
debug = true

----------------------------------------

TITLE: Removing Node from Grid
DESCRIPTION: Removes a node from the Grid without stopping ongoing sessions. The node continues running but won't receive new session requests.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Listening to Response Started Event in Java
DESCRIPTION: Shows how to listen for the 'Response Started' network event using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.responseStarted(resp -> {
    System.out.println("Response URL: " + resp.getResponse().getUrl());
    System.out.println("Response Status: " + resp.getResponse().getStatus());
    System.out.println("Response Headers: " + resp.getResponse().getHeaders());
    System.out.println("Response MIME Type: " + resp.getResponse().getMimeType());
}));

----------------------------------------

TITLE: Opening Browser Windows and Tabs
DESCRIPTION: Methods for creating new browser windows and tabs using BiDi API. Includes opening windows/tabs with and without reference contexts.

LANGUAGE: Java
CODE:
BrowsingContext tab = driver.createBrowsingContext(BrowsingContext.Type.TAB);
BrowsingContext window = driver.createBrowsingContext(BrowsingContext.Type.WINDOW);
BrowsingContext existing = driver.getBrowsingContext(driver.getWindowHandle());

----------------------------------------

TITLE: Performing Actions in Selenium WebDriver
DESCRIPTION: Demonstrates how to perform mouse actions using Selenium WebDriver's bidirectional API. This functionality requires Selenium version 4.17 or higher.

LANGUAGE: Java
CODE:
driver.perform(Arrays.asList(
    new KeyDownAction(Keys.SHIFT),
    new PointerMoveAction(Duration.ofMillis(100), Origin.pointer(), 0, 0)
));

LANGUAGE: JavaScript
CODE:
await driver.performActions([
  { type: 'pointer', id: 'mouse', parameters: { pointerType: 'mouse' }, actions: [actions] }
]);

----------------------------------------

TITLE: Taking Screenshot in Kotlin
DESCRIPTION: Shows how to capture a screenshot of the current page in Selenium WebDriver using Kotlin.

LANGUAGE: Kotlin
CODE:
import com.oracle.tools.packager.IOUtils.copyFile
import org.openqa.selenium.*
import org.openqa.selenium.chrome.ChromeDriver
import java.io.File

fun main(){
    val driver =  ChromeDriver()
    driver.get("https://www.example.com")
    val scrFile = (driver as TakesScreenshot).getScreenshotAs<File>(OutputType.FILE)
    copyFile(scrFile, File("./image.png"))
    driver.quit()
}

----------------------------------------

TITLE: Getting Browsing Context Realms with Java
DESCRIPTION: Demonstrates retrieving realms for a specific browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms(driver.getWindowHandle());
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Handling DOM Mutations with Chrome DevTools Protocol in Java
DESCRIPTION: This snippet shows how to handle DOM mutations using the Chrome DevTools Protocol in Java. It uses the executeCdpCommand method to enable DOM mutation observation.

LANGUAGE: Java
CODE:
driver.executeCdpCommand("DOMSnapshot.enable", Map.of());

----------------------------------------

TITLE: Querying All Session Details for Selenium Grid Nodes
DESCRIPTION: Demonstrates how to query details for all sessions across all nodes in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ sessionsInfo { sessions { id, capabilities, startTime, uri, nodeId, nodeId, sessionDurationMillis } } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Releasing Actions with Selenium WebDriver BiDi in Java
DESCRIPTION: This snippet demonstrates how to release actions using the Selenium WebDriver BiDi API in Java. It creates a new Actions object, performs a key press action, and then releases all actions.

LANGUAGE: Java
CODE:
Actions actions = new Actions(driver);
actions.sendKeys(Keys.ARROW_DOWN).perform();

// Release all keys
actions = new Actions(driver);
actions.tick(Actions.release());
actions.perform();

----------------------------------------

TITLE: Running Selenium Grid Hub in Debug Mode
DESCRIPTION: Command to start the Selenium Grid Hub with debug logging enabled, printing debug information to the console.

LANGUAGE: shell
CODE:
java -jar selenium-server-standalone.jar -role hub -debug

----------------------------------------

TITLE: Getting Element Attribute or Property in Selenium
DESCRIPTION: Shows how to retrieve the value of an element's attribute or property using the getAttribute() method. Returns the value associated with the specified attribute or property as a string.

LANGUAGE: Java
CODE:
String value = driver.findElement(By.name("email_input")).getAttribute("value");
String ariaLabel = driver.findElement(By.name("email_input")).getAttribute("aria-label");
String checked = driver.findElement(By.name("checkbox_input")).getAttribute("checked");

LANGUAGE: Python
CODE:
value = driver.find_element(By.NAME, "email_input").get_attribute("value")
aria_label = driver.find_element(By.NAME, "email_input").get_attribute("aria-label")

LANGUAGE: C#
CODE:
string value = driver.FindElement(By.Name("email_input")).GetAttribute("value");
string ariaLabel = driver.FindElement(By.Name("email_input")).GetAttribute("aria-label");
string checked = driver.FindElement(By.Name("checkbox_input")).GetAttribute("checked");

LANGUAGE: Ruby
CODE:
driver.find_element(name: 'email_input').attribute('value')

LANGUAGE: JavaScript
CODE:
const input = await driver.findElement(By.name('email_input'))
const value = await input.getAttribute('value')
const ariaLabel = await input.getAttribute('aria-label')
const checked = await (await driver.findElement(By.name('checkbox_input'))).getAttribute('checked')

LANGUAGE: Kotlin
CODE:
val attr = driver.findElement(By.name("email_input")).getAttribute("value")

----------------------------------------

TITLE: Handling Realm Destroyed Event with JavaScript
DESCRIPTION: Shows how to handle a realm destroyed event using Selenium WebDriver BiDi in JavaScript. This example demonstrates subscribing to the event, triggering a realm destruction, and asserting the event details.

LANGUAGE: JavaScript
CODE:
const realmPromise = new Promise((resolve) => {
  driver.onRealmDestroyed((event) => {
    resolve(event)
  })
})

await driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')
await driver.get('about:blank')

const event = await realmPromise

assert.strictEqual(event.realm.type, 'window')
assert.ok(event.realm.origin.includes('selenium.dev'))

----------------------------------------

TITLE: Creating Transparent Color Object in Selenium
DESCRIPTION: Demonstrates how to create a Color object representing a transparent color.

LANGUAGE: Java
CODE:
private final Color TRANSPARENT = Color.fromString("transparent");

LANGUAGE: Python
CODE:
TRANSPARENT = Color.from_string('transparent')

LANGUAGE: Ruby
CODE:
TRANSPARENT = Color.from_string('transparent')

LANGUAGE: Kotlin
CODE:
private val TRANSPARENT = Color.fromString("transparent")

----------------------------------------

TITLE: Performing Actions with Selenium WebDriver BiDi in Java
DESCRIPTION: This snippet demonstrates how to perform actions using the Selenium WebDriver BiDi API in Java. It creates a new Actions object and performs a key press action.

LANGUAGE: Java
CODE:
Actions actions = new Actions(driver);
actions.sendKeys(Keys.ARROW_DOWN).perform();

----------------------------------------

TITLE: Cancelling Authentication Request in Java
DESCRIPTION: Demonstrates how to cancel a request blocked at the authRequired phase using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.authRequired((a, b) -> {
    Network.AuthRequiredResponse response = new Network.AuthRequiredResponse();
    response.respondWith(Network.AuthChallengeResponse.CANCELAUTH);
    return response;
}));

----------------------------------------

TITLE: Displaying Python Logs in Console
DESCRIPTION: Shows how to display Python logs in the console using a StreamHandler.

LANGUAGE: Python
CODE:
handler = logging.StreamHandler()
logger.addHandler(handler)

----------------------------------------

TITLE: Creating Logger for Selenium Module in Python
DESCRIPTION: Shows how to create a logger for the Selenium module in Python.

LANGUAGE: Python
CODE:
logger = logging.getLogger('selenium')

----------------------------------------

TITLE: Capturing Performance Metrics with CDP in Selenium
DESCRIPTION: This snippet demonstrates how to capture performance metrics using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
List<Metric> metrics = devTools.send(Performance.getMetrics());
metrics.forEach(metric -> System.out.println(metric.getName() + " : " + metric.getValue()));

LANGUAGE: Python
CODE:
metrics = driver.execute_cdp_cmd('Performance.getMetrics', {})
for metric in metrics['metrics']:
    print(f"{metric['name']} : {metric['value']}")

LANGUAGE: C#
CODE:
var metrics = await _devTools.SendAsync(Performance.GetMetrics());
foreach (var metric in metrics)
{
    Console.WriteLine($"{metric.Name} : {metric.Value}");
}

LANGUAGE: Ruby
CODE:
metrics = driver.execute_cdp('Performance.getMetrics')
metrics['metrics'].each { |metric| puts "#{metric['name']} : #{metric['value']}" }

----------------------------------------

TITLE: Calling Function in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates calling a function in a specific realm using Selenium WebDriver BiDi. This allows for execution in different JavaScript contexts.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();
driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

ScriptManager scriptManager = new ScriptManager(driver);

List<String> realms = scriptManager.getAllRealms();
String realm = realms.get(0);

Object result = scriptManager.callFunctionInRealm(
    realm,
    "const message = 'Hello from ' + arguments[0]; return message;",
    Arrays.asList("Selenium")
);

assertThat(result).isEqualTo("Hello from Selenium");

----------------------------------------

TITLE: Handling Authentication in Network Requests in Java and JavaScript
DESCRIPTION: Demonstrates how to continue a request blocked at the authRequired phase with credentials in Java and JavaScript. This is useful for automated handling of authentication in tests.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("auth"))
        .to(() -> req -> {
            HttpCredentials credentials = new HttpCredentials("admin", "admin");
            return req.continueWithAuth(credentials);
        }));

LANGUAGE: JavaScript
CODE:
await driver.register('Network.authRequired', async (params) => {
  await driver.continueWithAuth(params.requestId, {
    username: 'admin',
    password: 'admin'
  });
});

----------------------------------------

TITLE: Handling Realm Destroyed Event with Java
DESCRIPTION: Demonstrates handling a realm destroyed event using Selenium WebDriver BiDi in Java. This example shows subscribing to the event, triggering a realm destruction, and asserting the event details.

LANGUAGE: Java
CODE:
CompletableFuture<RealmInfo> future = new CompletableFuture<>();
driver.onRealmDestroyed(event -> future.complete(event));

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");
driver.get("about:blank");

RealmInfo event = future.get(5, TimeUnit.SECONDS);

assertThat(event.getRealm().getType()).isEqualTo(RealmType.WINDOW);
assertThat(event.getRealm().getOrigin()).contains("selenium.dev");

----------------------------------------

TITLE: Initializing Default Service Instance in Selenium WebDriver
DESCRIPTION: Demonstrates how to start a driver with a default service instance across different programming languages.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();
driver.get("https://selenium.dev");

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()
driver.get("https://selenium.dev")

LANGUAGE: C#
CODE:
var driver = new ChromeDriver();
driver.Navigate().GoToUrl("https://selenium.dev");

LANGUAGE: Ruby
CODE:
driver = Selenium::WebDriver.for :chrome
driver.get 'https://selenium.dev'

----------------------------------------

TITLE: Getting Realm by Type with JavaScript
DESCRIPTION: Shows how to retrieve realms of a specific type using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms('window')
assert.ok(realms.length > 0)

----------------------------------------

TITLE: Printing Page Using BrowsingContext in Java
DESCRIPTION: This snippet shows an alternative method to print a page using Selenium's BrowsingContext interface in Java. It uses the BiDi implementation to generate a PDF of the web page.

LANGUAGE: Java
CODE:
BrowsingContext browsingContext = new BrowsingContext(driver);
PrintOptions printOptions = new PrintOptions();
printOptions.setPageRanges(List.of("1-2"));
String pdf = browsingContext.print(printOptions);

----------------------------------------

TITLE: Releasing Actions in Java with Selenium WebDriver BiDi
DESCRIPTION: This snippet demonstrates how to release actions using the Selenium WebDriver BiDi API in Java. It creates an Actions object, performs a click and hold action, and then releases all actions.

LANGUAGE: java
CODE:
Actions actions = new Actions(driver);
actions.moveToElement(driver.findElement(By.id("clickable")));
actions.clickAndHold();
actions.perform();

driver.executeScript("arguments[0].dispatchEvent(new Event('pointerup'))", driver.findElement(By.id("clickable")));
actions.release();
actions.perform();

----------------------------------------

TITLE: Obtaining Ruby Selenium Logger
DESCRIPTION: Demonstrates how to obtain the Selenium logger in Ruby.

LANGUAGE: Ruby
CODE:
logger = Selenium::WebDriver.logger

----------------------------------------

TITLE: Setting Logger Level in Java
DESCRIPTION: Demonstrates how to set the logger level and handler level in Java for Selenium logging.

LANGUAGE: Java
CODE:
logger.setLevel(Level.ALL);
for (Handler handler : logger.getHandlers()) {
  handler.setLevel(Level.ALL);
}

----------------------------------------

TITLE: Capturing Response Information with CDP in Selenium
DESCRIPTION: This snippet shows how to capture and log response information using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), responseReceived -> {
    RequestId requestId = responseReceived.getRequestId();
    Response response = responseReceived.getResponse();
    String url = response.getUrl();
    Integer status = response.getStatus();
    String mimeType = response.getMimeType();

    System.out.println(String.format("Response from %s with status %d and mime type %s", url, status, mimeType));
});

LANGUAGE: C#
CODE:
await _devTools.SendAsync(Network.Enable(new NetworkEnableCommandSettings()));

_devTools.AddEventHandler(Network.ResponseReceived, (_, e) =>
{
    Console.WriteLine($"Response from {e.Response.Url} with status {e.Response.Status} and mime type {e.Response.MimeType}");
});

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Network.responseReceived') do |params|
  url = params.dig('response', 'url')
  status = params.dig('response', 'status')
  mime_type = params.dig('response', 'mimeType')
  puts "Response from #{url} with status #{status} and mime type #{mime_type}"
end

----------------------------------------

TITLE: Disowning Handles in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to disown handles in a specific realm using Selenium WebDriver BiDi. This is used for memory management of remote references in different contexts.

LANGUAGE: Java
CODE:
scriptManager.disownRealmHandles(realm, Arrays.asList("handle1", "handle2"));

----------------------------------------

TITLE: Continuing Network Request Without Credentials in Selenium WebDriver
DESCRIPTION: This code shows how to continue a request blocked at the authRequired phase without providing credentials using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addAuthHandler("*", request -> {
    return interceptor.continueWithoutAuth(request);
});
driver.get("https://the-internet.herokuapp.com/basic_auth");
assertThat(driver.getTitle()).isEqualTo("The Internet");

----------------------------------------

TITLE: Executing JavaScript in Selenium RC Java
DESCRIPTION: Demonstrates how to execute JavaScript and access Selenium Core functions in Selenium RC.

LANGUAGE: java
CODE:
String name = selenium.getEval(
    "selenium.browserbot.findElement('id=foo', browserbot.getCurrentWindow()).tagName");

----------------------------------------

TITLE: Evaluating Script in Sandbox with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates evaluating a script in a sandbox environment using Selenium WebDriver BiDi. This provides an isolated execution context.

LANGUAGE: Java
CODE:
Object result = scriptManager.evaluateInSandbox(
    "1 + 2"
);
assertThat(result).isEqualTo(3L);

----------------------------------------

TITLE: Removing Network Intercept in JavaScript
DESCRIPTION: Shows how to remove a previously added network intercept in Selenium WebDriver BiDi using JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.setNetworkConditions({});
await driver.deleteNetworkConditions();

----------------------------------------

TITLE: Updating Capabilities for W3C WebDriver Standard in Java
DESCRIPTION: Demonstrates how to update Selenium capabilities to be W3C compliant in Java, including wrapping vendor-specific capabilities in a cloud:options block.

LANGUAGE: Java
CODE:
FirefoxOptions browserOptions = new FirefoxOptions();
browserOptions.setPlatformName("Windows 10");
browserOptions.setBrowserVersion("92");
Map<String, Object> cloudOptions = new HashMap<>();
cloudOptions.put("build", myTestBuild);
cloudOptions.put("name", myTestName);
browserOptions.setCapability("cloud:options", cloudOptions);
WebDriver driver = new RemoteWebDriver(new URL(cloudUrl), browserOptions);

----------------------------------------

TITLE: Releasing Actions in JavaScript with Selenium WebDriver BiDi
DESCRIPTION: This snippet shows how to release actions using the Selenium WebDriver BiDi API in JavaScript. It releases all actions that have been performed.

LANGUAGE: javascript
CODE:
await driver.actions().clear();

----------------------------------------

TITLE: Listening to 'Before Request Sent' Network Event in Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to listen for the 'Before Request Sent' network event using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
AtomicReference<String> url = new AtomicReference<>();
interceptor.addRequestHandler(request -> {
    url.set(request.getUrl());
    return null;
});
driver.get(baseUrl);
assertThat(url.get()).isEqualTo(baseUrl);

----------------------------------------

TITLE: Filtering Logs by Class in Java
DESCRIPTION: Demonstrates how to filter logs by setting the level for a specific class in Java.

LANGUAGE: Java
CODE:
Logger classLogger = Logger.getLogger(RemoteWebDriver.class.getName());
classLogger.setLevel(Level.FINE);

----------------------------------------

TITLE: Setting User Verification for a Virtual Authenticator in Java
DESCRIPTION: This code shows how to set whether the virtual authenticator will simulate success or failure on user verification.

LANGUAGE: Java
CODE:
authenticator.setUserVerified(true);

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP in Python
DESCRIPTION: This snippet shows how to capture JavaScript exceptions using Chrome DevTools Protocol in Python with Selenium 4. It requires enabling exception logging through CDP commands.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Runtime.enable', {})
driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')

----------------------------------------

TITLE: Evaluating Script in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to evaluate a script in a specific realm using Selenium WebDriver BiDi. This allows for execution in different JavaScript contexts.

LANGUAGE: Java
CODE:
List<String> realms = scriptManager.getAllRealms();
String realm = realms.get(0);

Object result = scriptManager.evaluateInRealm(
    realm,
    "1 + 2"
);

assertThat(result).isEqualTo(3L);

----------------------------------------

TITLE: Basic Authentication with Chrome DevTools Protocol in Selenium
DESCRIPTION: Demonstrates how to insert credentials into the header for basic authentication using Chrome DevTools Protocol in Selenium. This is useful for applications that use browser authentication to secure pages.

LANGUAGE: Java
CODE:
devTools.send(Network.setExtraHTTPHeaders(Collections.singletonMap("Authorization",
        "Basic " + Base64.getEncoder().encodeToString("admin:admin".getBytes()))));

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Network.setExtraHTTPHeaders', {
    'headers': {'Authorization': 'Basic ' + b64encode(b'admin:admin').decode('ascii')}
})

LANGUAGE: C#
CODE:
var authCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes("admin:admin"));

var headers = new Dictionary<string, object>
{
    { "Authorization", $"Basic {authCredentials}" }
};

driver.ExecuteCdpCommand("Network.setExtraHTTPHeaders", new Dictionary<string, object>
{
    { "headers", headers }
});

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Network.setExtraHTTPHeaders',
                  headers: { 'Authorization': "Basic #{Base64.strict_encode64('admin:admin')}" })

----------------------------------------

TITLE: Handling Script Message Event with JavaScript
DESCRIPTION: Shows how to handle a script message event using Selenium WebDriver BiDi in JavaScript. This example demonstrates subscribing to the event, triggering a message, and asserting the received message.

LANGUAGE: JavaScript
CODE:
const scriptPromise = new Promise((resolve) => {
  driver.onScriptMessage((event) => {
    resolve(event)
  })
})

await driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')

await driver.executeScript("console.log('Hello, World!')")

const event = await scriptPromise

assert.strictEqual(event.channel, 'log')
assert.strictEqual(event.source.context.type, 'browsingContext')
assert.strictEqual(event.source.realm.type, 'window')
assert.strictEqual(event.text, 'Hello, World!')
assert.strictEqual(event.level, 'info')
assert.strictEqual(event.type, 'consoleApi')

----------------------------------------

TITLE: Network Response Information Capture with CDP in Selenium
DESCRIPTION: Shows how to capture and log response information using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), responseReceived -> {
    assertThat(responseReceived.getResponse().getStatus()).isEqualTo(200);
    assertThat(responseReceived.getResponse().getStatusText()).isEqualTo("OK");
    assertThat(responseReceived.getResponse().getHeaders().toString()).contains("content-type");
    assertThat(responseReceived.getResponse().getHeaders().toString()).contains("text/html");
    assertThat(responseReceived.getResponse().getHeaders().toString()).contains("charset=utf-8");
});

LANGUAGE: C#
CODE:
driver.ExecuteCdpCommand("Network.enable", new Dictionary<string, object>());
driver.ExecuteCdpCommand("Network.responseReceived", new Dictionary<string, object>());

driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/blank.html");

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Network.responseReceived') do |event|
  response = event['response']
  expect(response['status']).to eq(200)
  expect(response['headers']['content-type']).to include('text/html')
end

----------------------------------------

TITLE: Disowning Handles in Browsing Context with JavaScript
DESCRIPTION: Shows how to disown handles in a browsing context using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.disownScriptHandles()

----------------------------------------

TITLE: Updating Element Finding Methods in Java
DESCRIPTION: Shows how to update deprecated element finding methods in Java to use the new By locator syntax.

LANGUAGE: Java
CODE:
driver.findElement(By.className("className"));
driver.findElement(By.cssSelector(".className"));
driver.findElement(By.id("elementId"));
driver.findElement(By.linkText("linkText"));
driver.findElement(By.name("elementName"));
driver.findElement(By.partialLinkText("partialText"));
driver.findElement(By.tagName("elementTagName"));
driver.findElement(By.xpath("xPath"));

----------------------------------------

TITLE: Navigation Commands
DESCRIPTION: Methods for navigating to URLs, reloading pages, and traversing browser history using BiDi API.

LANGUAGE: Java
CODE:
context.navigate("https://www.selenium.dev/");
context.navigate("https://www.selenium.dev/", NavigateParameters.Readiness.COMPLETE);
context.back();
context.forward();
context.traverseHistory(-1);

----------------------------------------

TITLE: JavaScript Logger Setup
DESCRIPTION: Basic configuration for JavaScript Selenium logger initialization

LANGUAGE: javascript
CODE:
const logging = require('selenium-webdriver/lib/logging')
logger = logging.getLogger('webdriver')

----------------------------------------

TITLE: Setting Desired Capabilities for Internet Explorer on Windows XP in Java
DESCRIPTION: This snippet demonstrates how to create DesiredCapabilities for Internet Explorer version 8 on Windows XP platform and initialize a RemoteWebDriver with these capabilities.

LANGUAGE: java
CODE:
[[DesiredCapabilities]] capability = DesiredCapabilities.internetExplorer();
capability.setVersion("8");
capability.setPlatform(Platform.XP);
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), capability);

----------------------------------------

TITLE: Capturing Console Logs with CDP in Ruby
DESCRIPTION: This snippet demonstrates how to capture console logs using Chrome DevTools Protocol in Ruby with Selenium 4. It involves enabling console logging through CDP commands.

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Log.enable')

----------------------------------------

TITLE: Creating a Resident Credential in Java
DESCRIPTION: This code shows how to create a resident (stateful) credential with specific parameters for a virtual authenticator.

LANGUAGE: Java
CODE:
byte[] credentialId = {1, 2, 3, 4};
Credential residentCredential = authenticator.createResidentCredential(
    credentialId, "example.com", "user_name", null);

----------------------------------------

TITLE: Setting Cookies with Chrome DevTools Protocol in Selenium
DESCRIPTION: Shows how to set cookies using Chrome DevTools Protocol in Selenium. This can be useful for testing scenarios that require specific cookie values or simulating user sessions.

LANGUAGE: Java
CODE:
ChromeOptions chromeOptions = new ChromeOptions();
chromeOptions.addArguments("--remote-allow-origins=*");
WebDriver driver = new ChromeDriver(chromeOptions);
devTools = ((HasDevTools) driver).getDevTools();
devTools.createSession();

devTools.send(Network.clearBrowserCookies());

Map<String, Object> cookieParams = new HashMap<>();
cookieParams.put("name", "test_cookie");
cookieParams.put("value", "test_value");
cookieParams.put("domain", "www.selenium.dev");
cookieParams.put("path", "/");
devTools.send(Network.setCookie(cookieParams));

driver.get("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
wait.until(d -> d.getTitle().equals("Selenium WebDriver Test Pages"));

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Network.clearBrowserCookies', {})

cookie = {
    'name': 'test_cookie',
    'value': 'test_value',
    'domain': 'www.selenium.dev',
    'path': '/',
}
driver.execute_cdp_cmd('Network.setCookie', cookie)

driver.get('https://www.selenium.dev/selenium/web/bidi/diagnostics.html')
assert driver.title == 'Selenium WebDriver Test Pages'

LANGUAGE: C#
CODE:
driver.ExecuteCdpCommand("Network.clearBrowserCookies", new Dictionary<string, object>());

var cookieParams = new Dictionary<string, object>
{
    { "name", "test_cookie" },
    { "value", "test_value" },
    { "domain", "www.selenium.dev" },
    { "path", "/" }
};
driver.ExecuteCdpCommand("Network.setCookie", cookieParams);

driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Network.clearBrowserCookies')

driver.execute_cdp('Network.setCookie',
                  name: 'test_cookie',
                  value: 'test_value',
                  domain: 'www.selenium.dev',
                  path: '/')

driver.get 'https://www.selenium.dev/selenium/web/bidi/diagnostics.html'

----------------------------------------

TITLE: Implementing AttachmentHandler for File Downloads in HtmlUnit Driver
DESCRIPTION: This snippet demonstrates how to use the AttachmentHandler interface in the HtmlUnit driver to download attachments as input streams. The AttachmentHandler can be added to the HtmlUnit WebClient for handling file downloads.

LANGUAGE: java
CODE:
AttachmentHandler attachmentHandler = new AttachmentHandler() {
    @Override
    public void handleAttachment(Page page) {
        // Implementation for handling attachments
    }
};

WebClient webClient = new WebClient();
webClient.setAttachmentHandler(attachmentHandler);

----------------------------------------

TITLE: Removing JavaScript Exception Handler in Python
DESCRIPTION: This snippet illustrates how to remove a previously added JavaScript exception handler in Python. It uses the stored handler ID to remove the specific listener.

LANGUAGE: Python
CODE:
handler_id = driver.add_log_listener(LogType.JAVASCRIPT, lambda log: print(f"JS exception: {log['text']}"))
driver.remove_log_listener(LogType.JAVASCRIPT, handler_id)

----------------------------------------

TITLE: Generic Find Element Method in Python Selenium
DESCRIPTION: Demonstrates the preferred generic method for finding elements using the By object. This approach will be required in future versions of Selenium 4 Python bindings.

LANGUAGE: python
CODE:
driver.find_element(By_object, "some_locator")

----------------------------------------

TITLE: Failing Network Request in Java
DESCRIPTION: Shows how to fail a network request using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("balloon")).to(() -> new HttpResponse().setStatus(500))
);

----------------------------------------

TITLE: Opening Browser Windows with Selenium BiDi
DESCRIPTION: Methods for creating and managing new browser windows and tabs using Selenium's BiDi protocol. Includes creation of windows with reference contexts and handling existing window handles.



----------------------------------------

TITLE: Setting DOM Mutation Handler with Chrome DevTools Protocol in Java
DESCRIPTION: This snippet demonstrates how to set a DOM mutation handler using the Chrome DevTools Protocol in Java. It uses the devTools object to execute the DOMSnapshot.enable command.

LANGUAGE: Java
CODE:
devTools.send(DOMSnapshot.enable());

----------------------------------------

TITLE: Updating AddAdditionalCapability in C#
DESCRIPTION: Demonstrates how to replace the deprecated AddAdditionalCapability with AddAdditionalOption in C#.

LANGUAGE: C#
CODE:
var browserOptions = new ChromeOptions();
browserOptions.PlatformName = "Windows 10";
browserOptions.BrowserVersion = "latest";
var cloudOptions = new Dictionary<string, object>();
browserOptions.AddAdditionalOption("cloud:options", cloudOptions);

----------------------------------------

TITLE: Browser Context Events in Selenium
DESCRIPTION: Event handling for browser context lifecycle events like creation, navigation, DOM content loading, and destruction.

LANGUAGE: Java
CODE:
BrowsingContextInspector inspector = new BrowsingContextInspector(driver);
inspector.onBrowsingContextCreated(event -> {
  assertEquals("window", event.getType());
  context.set(event.getContext());
});

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP
DESCRIPTION: Implementation examples for capturing JavaScript exceptions across different programming languages using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Python
CODE:
{{< gh-codeblock path="/examples/python/tests/bidi/cdp/test_logs.py#L22-L23" >}}

LANGUAGE: C#
CODE:
{{< gh-codeblock path="/examples/dotnet/SeleniumDocs/BiDi/CDP/LoggingTest.cs#L41-L47" >}}

LANGUAGE: Ruby
CODE:
{{< gh-codeblock path="/examples/ruby/spec/bidi/cdp/logging_spec.rb#L26" >}}

----------------------------------------

TITLE: Creating a Non-Resident Credential in Java
DESCRIPTION: This snippet demonstrates how to create a non-resident (stateless) credential for a virtual authenticator.

LANGUAGE: Java
CODE:
byte[] credentialId = {1, 2, 3, 4};
Credential nonResidentCredential = authenticator.createNonResidentCredential(
    credentialId, "example.com", null);

----------------------------------------

TITLE: Setting DOM Mutation Handler with Chrome DevTools Protocol in Ruby
DESCRIPTION: This snippet demonstrates how to set a DOM mutation handler using the Chrome DevTools Protocol in Ruby. It employs the DevTools#execute_cdp method to send the DOMSnapshot.enable command.

LANGUAGE: Ruby
CODE:
driver.devtools.execute_cdp('DOMSnapshot.enable')

----------------------------------------

TITLE: Internet Explorer Security Domain Configuration
DESCRIPTION: Configuration to handle IE security domain restrictions using DesiredCapabilities

LANGUAGE: java
CODE:
DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
WebDriver driver = new InternetExplorerDriver(capabilities);

----------------------------------------

TITLE: Specifying Driver Location in Selenium WebDriver
DESCRIPTION: Shows how to set a custom driver location when using Selenium 4.6 or earlier, or for advanced use cases.

LANGUAGE: Java
CODE:
ChromeDriverService service = new ChromeDriverService.Builder()
        .usingDriverExecutable(new File("/path/to/chromedriver"))
        .build();

LANGUAGE: Python
CODE:
service = ChromeService(executable_path='/path/to/chromedriver')

LANGUAGE: C#
CODE:
var service = ChromeDriverService.CreateDefaultService("/path/to/chromedriver");

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new(path: '/path/to/chromedriver')

----------------------------------------

TITLE: Disabling Chrome Search Engine Selection Screen
DESCRIPTION: This browser argument disables the search engine selection screen that appears in Chrome version 127 and later. It prevents the screen from appearing during automated testing, which would otherwise interrupt the automation flow.

LANGUAGE: plaintext
CODE:
--disable-search-engine-choice-screen

----------------------------------------

TITLE: Listening to Before Request Sent Event in Java
DESCRIPTION: Demonstrates how to listen for the 'Before Request Sent' network event using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.beforeRequestSent(req -> {
    System.out.println("Request URL: " + req.getRequest().getUrl());
    System.out.println("Request Method: " + req.getRequest().getMethod());
    System.out.println("Request Headers: " + req.getRequest().getHeaders());
}));

----------------------------------------

TITLE: Listening to 'Before Request Sent' Event in Java and JavaScript
DESCRIPTION: Demonstrates how to listen for the 'Before Request Sent' network event in Java and JavaScript. This event is triggered before a request is sent to the server.

LANGUAGE: Java
CODE:
driver.addListener(Network.beforeRequestSent(), event -> {
    System.out.println("Request URL: " + event.getRequest().getUrl());
    System.out.println("Request Method: " + event.getRequest().getMethod());
    System.out.println("Request Headers: " + event.getRequest().getHeaders());
});

LANGUAGE: JavaScript
CODE:
await driver.on('Network.beforeRequestSent', (params) => {
  console.log('Request URL:', params.request.url);
  console.log('Request Method:', params.request.method);
  console.log('Request Headers:', params.request.headers);
});

----------------------------------------

TITLE: Transforming Responses with CDP in Selenium
DESCRIPTION: This snippet demonstrates how to intercept and transform responses using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), responseReceived -> {
    String mimeType = responseReceived.getResponse().getMimeType();
    if (mimeType.equals("application/json")) {
        RequestId requestId = responseReceived.getRequestId();
        String body = devTools.send(Network.getResponseBody(requestId)).getBody();
        String newBody = body.replace("test", "beta");
        String encoded = Base64.getEncoder().encodeToString(newBody.getBytes());
        devTools.send(Network.getResponseBody(requestId)).setBody(encoded);
    }
});

LANGUAGE: C#
CODE:
_devTools.AddEventHandler(Network.ResponseReceived, async (_, e) =>
{
    if (e.Response.MimeType == "application/json")
    {
        var body = (await _devTools.SendAsync(Network.GetResponseBody(new NetworkGetResponseBodyCommandSettings
        {
            RequestId = e.RequestId
        }))).Body;

        var newBody = body.Replace("test", "beta");
        var encoded = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(newBody));

        await _devTools.SendAsync(Network.GetResponseBody(new NetworkGetResponseBodyCommandSettings
        {
            RequestId = e.RequestId
        }));
    }
});

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Network.responseReceived') do |params|
  if params.dig('response', 'mimeType') == 'application/json'
    body = driver.execute_cdp('Network.getResponseBody', requestId: params['requestId'])['body']
    new_body = body.gsub('test', 'beta')
    driver.execute_cdp('Network.getResponseBody', requestId: params['requestId'], body: Base64.encode64(new_body))
  end
end

----------------------------------------

TITLE: Opening New Terminal Tab with Current Directory in macOS using AppleScript
DESCRIPTION: This AppleScript snippet opens a new terminal tab in macOS while maintaining the current directory path of the active terminal window. It demonstrates how to interact with the Terminal application using AppleScript commands.

LANGUAGE: AppleScript
CODE:
tell application "Terminal"
    tell application "System Events" to keystroke "t" using command down
    do script with command "cd \"$(pwd)\"" in selected tab of the front window
end tell

----------------------------------------

TITLE: Installing Firefox Add-ons
DESCRIPTION: Demonstrates how to install Firefox add-ons using WebDriver commands after the browser session has started.

LANGUAGE: Java
CODE:
driver.installAddOn(new File("/path/to/addon.xpi"));

LANGUAGE: Python
CODE:
driver.install_addon('/path/to/addon.xpi')

LANGUAGE: Ruby
CODE:
driver.install_addon('/path/to/addon.xpi')

LANGUAGE: JavaScript
CODE:
await driver.installAddon('/path/to/addon.xpi');

----------------------------------------

TITLE: Adding a Virtual Authenticator in Java
DESCRIPTION: This code shows how to add a new virtual authenticator to the WebDriver session using the specified options.

LANGUAGE: Java
CODE:
VirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions()
    .setProtocol(Protocol.U2F)
    .setTransport(Transport.USB);

VirtualAuthenticator authenticator = ((HasVirtualAuthenticator) driver).addVirtualAuthenticator(options);

----------------------------------------

TITLE: Capturing Console Logs with CDP in Selenium
DESCRIPTION: Demonstrates how to capture and handle console logs from the browser using Chrome DevTools Protocol. This functionality allows monitoring of console output during test execution.

LANGUAGE: Python
CODE:
driver.get("log.html")
print(driver.get_log("browser"))

LANGUAGE: CSharp
CODE:
driver.Url = "log.html";
ILogs logs = driver.Manage().Logs;
var logEntries = logs.GetLog(LogType.Browser);
foreach (var logEntry in logEntries)
{
    Console.WriteLine(logEntry);
}

LANGUAGE: Ruby
CODE:
driver.get('log.html')
driver.logs.get(:browser)

----------------------------------------

TITLE: Setting Print Scale in Selenium PrintOptions
DESCRIPTION: This snippet shows how to set the print scale using Selenium's PrintOptions class. It uses the setScale() method to adjust the scaling of the printed output, with 1.0 representing 100% or default scale.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setScale(0.5);
assertThat(printOptions.getScale()).isEqualTo(0.5);
printOptions.setScale(2);
assertThat(printOptions.getScale()).isEqualTo(2.0);

----------------------------------------

TITLE: Getting Element Rectangle in Selenium
DESCRIPTION: Demonstrates how to retrieve the dimensions and coordinates of an element using the getRect() method. Returns an object containing x, y, width, and height properties.

LANGUAGE: Java
CODE:
WebElement element = driver.findElement(By.name("range_input"));
Rectangle rect = element.getRect();

LANGUAGE: Python
CODE:
rect = driver.find_element(By.NAME, "range_input").rect

LANGUAGE: C#
CODE:
var element = driver.FindElement(By.Name("range_input"));
var rect = element.Rect;
int x = rect.X; int y = rect.Y; int width = rect.Width; int height = rect.Height;

LANGUAGE: Ruby
CODE:
driver.find_element(name: 'range_input').rect

LANGUAGE: JavaScript
CODE:
const rect = await driver.findElement(By.name('range_input')).getRect()

LANGUAGE: Kotlin
CODE:
val res = driver.findElement(By.name("range_input")).rect
println(res.getX())

----------------------------------------

TITLE: Implementing Specific WebDriver and WebElement Event Listeners in Java
DESCRIPTION: This snippet demonstrates how to implement specific event listeners for WebDriver and WebElement calls using the new WebDriverEventListener interface, allowing for more targeted event handling.

LANGUAGE: java
CODE:
public class Listener implements WebDriverEventListener {
    private static final Logger LOGGER = Logger.getLogger(Listener.class.getName());

    @Override
    public void beforeAnyWebDriverCall(WebDriver driver, Method method, Object[] args) {
        logger.debug("Thread: " + Thread.currentThread().getName() +
                " | Method Name: " + method.getName() +
                " | Method Args: " + Arrays.toString(args));
    }

    @Override
    public void beforeAnyWebElementCall(WebElement element, Method method, Object[] args) {
        logger.debug("Thread: " + Thread.currentThread().getName() +
                " | Method Name: " + method.getName() +
                " | Method Args: " + Arrays.toString(args));
    }
}

----------------------------------------

TITLE: Handling Authentication in Network Requests with JavaScript
DESCRIPTION: Demonstrates how to continue a request blocked at the authRequired phase with credentials using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
driver.on('Network.authRequired', (params) => {
  return {
    response: 'ProvideCredentials',
    username: 'admin',
    password: 'password'
  };
});

----------------------------------------

TITLE: Listening to 'Response Completed' Event in Java and JavaScript
DESCRIPTION: Demonstrates how to listen for the 'Response Completed' network event in Java and JavaScript. This event is triggered when the entire response has been received.

LANGUAGE: Java
CODE:
driver.addListener(Network.responseCompleted(), event -> {
    System.out.println("Response URL: " + event.getResponse().getUrl());
    System.out.println("Response Status: " + event.getResponse().getStatus());
    System.out.println("Response Headers: " + event.getResponse().getHeaders());
});

LANGUAGE: JavaScript
CODE:
await driver.on('Network.responseCompleted', (params) => {
  console.log('Response URL:', params.response.url);
  console.log('Response Status:', params.response.status);
  console.log('Response Headers:', params.response.headers);
});

----------------------------------------

TITLE: Capturing Console Logs with CDP in Java
DESCRIPTION: This snippet demonstrates how to capture console logs using Chrome DevTools Protocol in Java. It uses the DevTools class to enable console logging.

LANGUAGE: Java
CODE:
DevTools devTools = ((HasDevTools) driver).getDevTools();
devTools.createSession();
devTools.send(Log.enable());

devTools.addListener(Log.entryAdded(),
        logEntry -> {System.out.println("log: " + logEntry.getText());});

----------------------------------------

TITLE: Setting Cookies with CDP in Selenium
DESCRIPTION: This snippet shows how to set cookies using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
Map<String, Object> cookieParameters = new HashMap<>();
cookieParameters.put("name", "sample_name");
cookieParameters.put("value", "sample_value");
cookieParameters.put("domain", "www.example.com");
cookieParameters.put("path", "/");
cookieParameters.put("secure", true);
cookieParameters.put("httpOnly", true);
cookieParameters.put("sameSite", "Lax");
Long expiry = System.currentTimeMillis() / 1000 + 3600;
cookieParameters.put("expires", expiry);

devTools.send(Network.setCookie(cookieParameters));

LANGUAGE: Python
CODE:
cookie_params = {
    'name': 'sample_name',
    'value': 'sample_value',
    'domain': 'www.example.com',
    'path': '/',
    'secure': True,
    'httpOnly': True,
    'sameSite': 'Lax',
    'expires': int(time.time()) + 3600
}
driver.execute_cdp_cmd('Network.setCookie', cookie_params)

LANGUAGE: C#
CODE:
var cookieParameters = new Dictionary<string, object>
{
    { "name", "sample_name" },
    { "value", "sample_value" },
    { "domain", "www.example.com" },
    { "path", "/" },
    { "secure", true },
    { "httpOnly", true },
    { "sameSite", "Lax" },
    { "expires", DateTimeOffset.UtcNow.ToUnixTimeSeconds() + 3600 }
};

await _devTools.SendAsync(Network.SetCookie(cookieParameters));

LANGUAGE: Ruby
CODE:
cookie_params = {
  name: 'sample_name',
  value: 'sample_value',
  domain: 'www.example.com',
  path: '/',
  secure: true,
  httpOnly: true,
  sameSite: 'Lax',
  expires: Time.now.to_i + 3600
}
driver.execute_cdp('Network.setCookie', cookie_params)

----------------------------------------

TITLE: Implementing Key Up Operation in Selenium
DESCRIPTION: Shows how to release a previously pressed key using Selenium's Actions API. The example demonstrates pressing and releasing the Shift key.

LANGUAGE: Java
CODE:
new Actions(driver)
    .keyDown(Keys.SHIFT)
    .keyUp(Keys.SHIFT)
    .perform();

LANGUAGE: Python
CODE:
Actions(driver)
    .key_down(Keys.SHIFT)
    .key_up(Keys.SHIFT)
    .perform()

----------------------------------------

TITLE: Specifying Alternate Firefox Binary Location
DESCRIPTION: Shows how to set an alternate location for the Firefox browser binary, useful for testing with different Firefox versions.

LANGUAGE: Java
CODE:
options.setBinary("/path/to/firefox");

LANGUAGE: Python
CODE:
options.binary_location = '/path/to/firefox'

LANGUAGE: C#
CODE:
options.BrowserExecutableLocation = "/path/to/firefox";

LANGUAGE: Ruby
CODE:
options.binary = '/path/to/firefox'

----------------------------------------

TITLE: Getting Credentials from a Virtual Authenticator in Java
DESCRIPTION: This snippet demonstrates how to retrieve the list of credentials owned by a virtual authenticator.

LANGUAGE: Java
CODE:
List<Credential> credentialList = authenticator.getCredentials();

for (Credential credential : credentialList) {
    System.out.println("Credential ID: " + Arrays.toString(credential.getId()));
    System.out.println("Credential RP ID: " + credential.getRpId());
    System.out.println("Credential User Handle: " + Arrays.toString(credential.getUserHandle()));
    System.out.println("Credential Private Key: " + credential.getPrivateKey());
    System.out.println("Credential Sign Count: " + credential.getSignCount());
}

----------------------------------------

TITLE: Capturing Console Logs with CDP in C#
DESCRIPTION: This snippet illustrates how to capture console logs using Chrome DevTools Protocol in C#. It uses the DevToolsSession class to enable console logging.

LANGUAGE: C#
CODE:
var devToolsSession = driver.GetDevToolsSession();
await devToolsSession.SendCommand<EnableCommandSettings>("Log.enable");

devToolsSession.Subscribe("Log.entryAdded", (sender, e) =>
{
    var logEntry = e as LogEntryAddedEventArgs;
    Console.WriteLine($"Log: {logEntry.Entry.Text}");
});

----------------------------------------

TITLE: Setting Browser Version in Python
DESCRIPTION: Shows how to set the browser version using ChromeOptions in Python.

LANGUAGE: Python
CODE:
from selenium.webdriver.chrome.options import Options
options = Options()
options.browser_version = '114'

----------------------------------------

TITLE: Getting Element Tag Name in Selenium
DESCRIPTION: Shows how to retrieve the tag name of an element using the getTagName() method. Returns the tag name as a string.

LANGUAGE: Java
CODE:
WebElement element = driver.findElement(By.name("email_input"));
String tagName = element.getTagName();

LANGUAGE: Python
CODE:
tag_name = driver.find_element(By.NAME, "email_input").tag_name

LANGUAGE: C#
CODE:
var element = driver.FindElement(By.Name("email_input"));
string tagName = element.TagName;

LANGUAGE: Ruby
CODE:
driver.find_element(name: 'email_input').tag_name

LANGUAGE: JavaScript
CODE:
const element = await driver.findElement(By.name('email_input'))
const tagName = await element.getTagName()

LANGUAGE: Kotlin
CODE:
val attr =  driver.findElement(By.name("email_input")).getTagName()

----------------------------------------

TITLE: Initializing Remote WebDriver with Platform Capability in Python
DESCRIPTION: This Python code snippet demonstrates how to initialize a Remote WebDriver for Chrome with a specific platform capability, which is used to match the KEDA scaling configuration.

LANGUAGE: python
CODE:
options = ChromeOptions()
options.set_capability('platformName', 'Linux')
driver = webdriver.Remote(options=options, command_executor='http://selenium-grid-url-or-ip:4444/wd/hub')

----------------------------------------

TITLE: Listening to Response Started Event in JavaScript
DESCRIPTION: Shows how to listen for the 'Response Started' network event using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
driver.on('Network.responseStarted', (params) => {
  console.log('Response URL:', params.response.url);
  console.log('Response Status:', params.response.status);
  console.log('Response Headers:', params.response.headers);
  console.log('Response MIME Type:', params.response.mimeType);
});

----------------------------------------

TITLE: Listening to Auth Required Event in Java
DESCRIPTION: Shows how to listen for the 'Auth Required' network event using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.authRequired((authRequiredEvent, handler) -> {
    System.out.println("Auth Required Request URL: " + authRequiredEvent.getRequest().getUrl());
    System.out.println("Auth Required Scheme: " + authRequiredEvent.getAuthChallenge().getScheme());
}));

----------------------------------------

TITLE: Network Response Information Handling
DESCRIPTION: Examples showing how to capture and process network response information using CDP.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), response -> {\n    String url = response.getResponse().getUrl();\n    RequestId requestId = response.getRequestId();\n    if (url.contains("getEmployee")) {\n        String responseBody = devTools.send(Network.getResponseBody(requestId)).getBody();\n        assertThat(responseBody).contains("employees");\n    }\n});

----------------------------------------

TITLE: Monitoring All JavaScript Logs in Selenium BiDi API
DESCRIPTION: Demonstrates how to monitor all JavaScript logs across different log levels using Selenium's BiDirectional API. Shows setup for comprehensive log monitoring.

LANGUAGE: Java
CODE:
LogInspector logInspector = new LogInspector(driver);
logInspector.onJavaScriptLog(logEntry -> {
    assertThat(logEntry.getText()).contains("ReferenceError: foo is not defined");
    assertThat(logEntry.getLevel()).isEqualTo("error");
});

----------------------------------------

TITLE: File Upload Dialog Timeout Configuration
DESCRIPTION: Sets the timeout duration for file upload dialogs in Internet Explorer.

LANGUAGE: Java
CODE:
InternetExplorerOptions options = new InternetExplorerOptions();
options.waitForUploadDialogUpTo(Duration.ofSeconds(2));
WebDriver driver = new RemoteWebDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.IeOptions()
options.file_upload_dialog_timeout = 2000

----------------------------------------

TITLE: Tearing Down WebDriver in Python
DESCRIPTION: Example of tearing down WebDriver after a test in Python using pytest.

LANGUAGE: Python
CODE:
driver.quit()

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP in Python
DESCRIPTION: This snippet shows how to capture JavaScript exceptions using Chrome DevTools Protocol in Python. It uses the driver.execute_cdp_cmd() method to enable exception logging.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Runtime.enable', {})
driver.execute_cdp_cmd('Runtime.consoleAPICalled', {})

----------------------------------------

TITLE: Waiting for Downloads with CDP in Selenium
DESCRIPTION: Demonstrates how to wait for downloads to complete using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
devTools.send(Browser.setDownloadBehavior(
        DownloadBehavior.ALLOW,
        Optional.of(System.getProperty("java.io.tmpdir")),
        Optional.empty(),
        Optional.empty()
));

devTools.addListener(Browser.downloadWillBegin(), download -> {
    System.out.println("Download is beginning");
});

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Browser.setDownloadBehavior',
                 behavior: 'allow',
                 downloadPath: Dir.tmpdir)

driver.on_cdp_event('Browser.downloadWillBegin') do |params|
  puts "Download beginning"
  puts "URL: #{params['url']}"
  puts "Filename: #{params['suggestedFilename']}"
end

----------------------------------------

TITLE: Continuing Authentication without Credentials in Java
DESCRIPTION: Shows how to continue a request blocked at the authRequired phase without providing credentials using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.authRequired((a, b) -> {
    Network.AuthRequiredResponse response = new Network.AuthRequiredResponse();
    response.respondWith(Network.AuthChallengeResponse.DEFAULT);
    return response;
}));

----------------------------------------

TITLE: Registering Authentication Credentials in Selenium 4 (Ruby)
DESCRIPTION: This Ruby code snippet shows how to register authentication credentials in Selenium 4 using a simple method call on the driver object.

LANGUAGE: ruby
CODE:
driver.register(username: 'admin', password: 'admin')

----------------------------------------

TITLE: Setting Cookies with CDP in Selenium
DESCRIPTION: Shows how to set cookies using Chrome DevTools Protocol in Selenium 4.

LANGUAGE: Java
CODE:
Map<String, Object> cookie = new HashMap<>();
cookie.put("name", "test_cookie");
cookie.put("value", "test_value");
cookie.put("url", "https://www.selenium.dev");

devTools.send(Network.setCookie(
        (String) cookie.get("name"),
        (String) cookie.get("value"),
        Optional.empty(),
        Optional.of((String) cookie.get("url")),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty(),
        Optional.empty()
));

LANGUAGE: Python
CODE:
cookie = {
    'name': 'test_cookie',
    'value': 'test_value',
    'domain': 'www.selenium.dev',
    'path': '/',
    'secure': True,
    'httpOnly': True
}

driver.execute_cdp_cmd('Network.setCookie', cookie)

LANGUAGE: C#
CODE:
var cookie = new Dictionary<string, object>
{
    { "name", "test_cookie" },
    { "value", "test_value" },
    { "domain", ".selenium.dev" },
    { "path", "/" }
};

driver.ExecuteCdpCommand("Network.setCookie", cookie);

LANGUAGE: Ruby
CODE:
cookie = {
  name: 'test_cookie',
  value: 'test_value',
  domain: '.selenium.dev'
}

driver.execute_cdp('Network.setCookie', **cookie)

----------------------------------------

TITLE: Listening to Before Request Sent Event in JavaScript
DESCRIPTION: Demonstrates how to listen for the 'Before Request Sent' network event using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
driver.on('Network.beforeRequestSent', (params) => {
  console.log('Request URL:', params.request.url);
  console.log('Request Method:', params.request.method);
  console.log('Request Headers:', params.request.headers);
});

----------------------------------------

TITLE: Adding JavaScript Exception Handler - Ruby
DESCRIPTION: Shows how to add a handler for JavaScript exception events in Ruby using WebDriver BiDi.

LANGUAGE: ruby
CODE:
driver.add_js_error_listener

----------------------------------------

TITLE: Network Response Information Capture in Selenium with CDP
DESCRIPTION: Shows how to capture and log response information using Chrome DevTools Protocol in Selenium. This is useful for debugging and testing network interactions.

LANGUAGE: Java
CODE:
devTools.addListener(Network.responseReceived(), response -> {
    String url = response.getResponse().getUrl();
    int status = response.getResponse().getStatus();
    System.out.printf("URL: %s - Status: %s%n", url, status);
});
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

driver.get("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
wait.until(d -> d.getTitle().equals("Selenium WebDriver Test Pages"));

LANGUAGE: C#
CODE:
driver.ExecuteCdpCommand("Network.enable", new Dictionary<string, object>());

driver.ExecuteCdpCommand("Network.responseReceived", new Dictionary<string, object>());

driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");

Wait.Until(d => d.Title == "Selenium WebDriver Test Pages");

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Network.enable')

driver.on_cdp_event('Network.responseReceived') do |params|
  puts "URL: #{params.dig('response', 'url')} - Status: #{params.dig('response', 'status')}"
end

----------------------------------------

TITLE: Basic Java Test Example
DESCRIPTION: Sample Java test class showing browser initialization and basic test using JUnit

LANGUAGE: java
CODE:
public class NewTest extends SeleneseTestCase {
    public void setUp() throws Exception {
        setUp("http://www.google.com/", "*firefox");
    }
    public void testNew() throws Exception {
        selenium.open("/");
        selenium.type("q", "selenium rc");
        selenium.click("btnG");
        selenium.waitForPageToLoad("30000");
        assertTrue(selenium.isTextPresent("Results * for selenium rc"));
    }
}

----------------------------------------

TITLE: Tearing Down WebDriver in Java
DESCRIPTION: Example of tearing down WebDriver after a test in Java using JUnit.

LANGUAGE: Java
CODE:
@AfterEach
public void tearDown() {
    driver.quit();
}

----------------------------------------

TITLE: Listening to Console Logs in Java with Selenium BiDi API
DESCRIPTION: This snippet demonstrates how to listen to console.log events and register callbacks to process the events using Selenium's BiDirectional API in Java. It requires Selenium version 4.8 or higher.

LANGUAGE: Java
CODE:
DevTools devTools = ((HasDevTools) driver).getDevTools();
devTools.createSession();
devTools.send(new Command<>("Log.enable", Map.of()));

devTools.addListener(Log.entryAdded(), logEntry -> {
    System.out.println("log: " + logEntry.getText());
    System.out.println("level: " + logEntry.getLevel());
});

----------------------------------------

TITLE: Defining Custom Expected Condition in WebDriver Java
DESCRIPTION: Implements a custom ExpectedCondition for use with WebDriverWait to check for element visibility.

LANGUAGE: java
CODE:
public ExpectedCondition<WebElement> visibilityOfElementLocated(final By locator) {
  return new ExpectedCondition<WebElement>() {
    public WebElement apply(WebDriver driver) {
      WebElement toReturn = driver.findElement(locator);
      if (toReturn.isDisplayed()) {
        return toReturn;
      }
      return null;
    }
  };
}

----------------------------------------

TITLE: Handling Authentication in Network Requests with Java
DESCRIPTION: Demonstrates how to continue a request blocked at the authRequired phase with credentials using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.authRequired((a, b) -> {
    Network.AuthRequiredResponse response = new Network.AuthRequiredResponse();
    response.setUsername("admin");
    response.setPassword("password");
    response.respondWith(Network.AuthChallengeResponse.PROVIDECREDENTIALS);
    return response;
}));

----------------------------------------

TITLE: Setting System Property for Java 11+ HTTP Client in Selenium
DESCRIPTION: This Java code snippet demonstrates how to set the system property to indicate that the Java 11+ HTTP client should be used instead of the default AsyncHttpClient in Selenium.

LANGUAGE: java
CODE:
System.setProperty("webdriver.http.factory", "jdk-http-client");

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP in C#
DESCRIPTION: This snippet illustrates how to capture JavaScript exceptions using Chrome DevTools Protocol in C#. It uses the DevToolsSession class to enable exception logging.

LANGUAGE: C#
CODE:
var devToolsSession = driver.GetDevToolsSession();
await devToolsSession.SendCommand<EnableCommandSettings>("Runtime.enable");

devToolsSession.Subscribe("Runtime.exceptionThrown", (sender, e) =>
{
    var exceptionDetails = e as ExceptionThrownEventArgs;
    Console.WriteLine($"Exception: {exceptionDetails.ExceptionDetails.Text}");
});

----------------------------------------

TITLE: Getting Realm by Type with Java
DESCRIPTION: Demonstrates retrieving realms of a specific type using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms(RealmType.WINDOW);
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Capturing Performance Metrics with Chrome DevTools Protocol in Selenium
DESCRIPTION: Demonstrates how to capture performance metrics using Chrome DevTools Protocol in Selenium. This is useful for monitoring and analyzing web application performance.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");
Object metrics = devTools.send(Performance.getMetrics());

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/bidi/diagnostics.html")
response = driver.execute_cdp_cmd('Performance.getMetrics', {})
print(response)

LANGUAGE: C#
CODE:
driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");

var metrics = driver.ExecuteCdpCommand("Performance.getMetrics", new Dictionary<string, object>());

Console.WriteLine(metrics);

LANGUAGE: Ruby
CODE:
driver.get 'https://www.selenium.dev/selenium/web/bidi/diagnostics.html'
driver.execute_cdp('Performance.getMetrics')

----------------------------------------

TITLE: Website Repository Reference
DESCRIPTION: Link to the Selenium website repository with WIP documentation theme changes

LANGUAGE: markdown
CODE:
https://github.com/SeleniumHQ/seleniumhq.github.io#wip-moving-to-hugo-docsy-theme

----------------------------------------

TITLE: Executing Specific Selenium Python Test
DESCRIPTION: This command runs a specific Selenium Python test script using pytest. Replace 'path/to/test_script.py' with the actual path and filename of the desired test script.

LANGUAGE: bash
CODE:
pytest path/to/test_script.py

----------------------------------------

TITLE: Tearing Down WebDriver in JavaScript
DESCRIPTION: Example of tearing down WebDriver after a test in JavaScript using Mocha.

LANGUAGE: JavaScript
CODE:
await driver.quit()

----------------------------------------

TITLE: Saving Python Logs to File
DESCRIPTION: Demonstrates how to save Python logs to a file using a FileHandler.

LANGUAGE: Python
CODE:
log_path = '/path/to/log'
handler = logging.FileHandler(log_path)
logger.addHandler(handler)

----------------------------------------

TITLE: Configuring C# File Logger
DESCRIPTION: Shows how to set up file logging in C# for Selenium.

LANGUAGE: C#
CODE:
Log.AddFileLog("selenium.log");

----------------------------------------

TITLE: Redis Sessions TOML Configuration
DESCRIPTION: TOML configuration file for setting up Redis-based session management in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
scheme = "redis"
implementation = "org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap"
hostname = "localhost"
port = 6379

----------------------------------------

TITLE: Python Wheel Actions Implementation
DESCRIPTION: Bare minimum implementation of scroll wheel actions in Python Selenium binding

LANGUAGE: python
CODE:
def scroll(self, x: int = 0, y: int = 0, delta_x: int = 0, delta_y: int = 0,
        duration: int = 0, origin: str = "viewport") -> "ScrollActions":
    self.w3c_actions.scroll(x, y, delta_x, delta_y, duration, origin)
    return self

----------------------------------------

TITLE: Capturing Console Logs with CDP in Python
DESCRIPTION: This snippet shows how to capture console logs using Chrome DevTools Protocol in Python with Selenium 4. It involves setting up a DevTools session and enabling console logging.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Log.enable', {})
driver.get('https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html')

----------------------------------------

TITLE: Getting Browsing Context Realms by Type with Java
DESCRIPTION: Demonstrates retrieving realms of a specific type for a browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms(driver.getWindowHandle(), RealmType.WINDOW);
assertThat(realms).isNotEmpty();

----------------------------------------

TITLE: Filtering Logs in Ruby
DESCRIPTION: Demonstrates how to filter logs by allowing or ignoring specific log message IDs in Ruby.

LANGUAGE: Ruby
CODE:
Selenium::WebDriver.logger.ignore(:browser_options)

Selenium::WebDriver.logger.ignore([:browser_options, :capabilities])

----------------------------------------

TITLE: Implementing Script Pinning in Chrome DevTools Protocol
DESCRIPTION: Demonstrates how to implement script pinning functionality using CDP across different programming languages. This feature is part of the Chrome DevTools Protocol integration in Selenium 4.

LANGUAGE: Java
CODE:
driver.executeCdpCommand("Page.addScriptToEvaluateOnNewDocument",
    Map.of("source", "Object.defineProperty(navigator, 'webdriver', { get: () => undefined });"));

LANGUAGE: CSharp
CODE:
driver.ExecuteCdpCommand("Page.addScriptToEvaluateOnNewDocument", new Dictionary<string, object> { {"source", "Object.defineProperty(navigator, 'webdriver', { get: () => undefined });" } });

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Page.addScriptToEvaluateOnNewDocument', source: "Object.defineProperty(navigator, 'webdriver', { get: () => undefined });")

----------------------------------------

TITLE: Continuing Blocked Request Without Credentials in Java and JavaScript
DESCRIPTION: Shows how to continue a request blocked at the authRequired phase without providing credentials in Java and JavaScript. This can be used to test unauthorized access scenarios.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("auth"))
        .to(() -> req -> {
            return req.continueWithoutAuth();
        }));

LANGUAGE: JavaScript
CODE:
await driver.register('Network.authRequired', async (params) => {
  await driver.continueWithAuth(params.requestId, {
    username: '',
    password: ''
  });
});

----------------------------------------

TITLE: Executing Ruby Script
DESCRIPTION: Command to run a specific Ruby script example

LANGUAGE: bash
CODE:
ruby example_script.rb

----------------------------------------

TITLE: Installing Selenium with Ruby gem
DESCRIPTION: Installing Selenium Ruby bindings using gem package manager.

LANGUAGE: shell
CODE:
gem install selenium-webdriver

----------------------------------------

TITLE: Initializing Python Selenium Logger
DESCRIPTION: Basic setup for Python Selenium logger with module-level logging configuration

LANGUAGE: python
CODE:
log_path = '/path/to/log'
handler = logging.FileHandler(log_path)
logger.addHandler(handler)

----------------------------------------

TITLE: Scrolling from Element by Given Amount using Selenium Actions API
DESCRIPTION: This snippet demonstrates scrolling from a specific element by a given amount. If the element is out of view, it's first scrolled to the bottom of the screen before applying the delta values.

LANGUAGE: Java
CODE:
WebElement footer = driver.findElement(By.tagName("footer"));
int deltaX = 0;
int deltaY = -150;
new Actions(driver)
        .scrollFromElement(footer, deltaX, deltaY)
        .perform();

LANGUAGE: Python
CODE:
footer = driver.find_element(By.TAG_NAME, "footer")
delta_x = 0
delta_y = -150
Actions(driver)\
    .scroll_from_element(footer, delta_x, delta_y)\
    .perform()

LANGUAGE: C#
CODE:
var footer = driver.FindElement(By.TagName("footer"));
int deltaX = 0;
int deltaY = -150;
new Actions(driver)
    .ScrollFromElement(footer, deltaX, deltaY)
    .Perform();

LANGUAGE: Ruby
CODE:
footer = driver.find_element(tag_name: 'footer')
delta_x = 0
delta_y = -150
driver.action
  .scroll_from(footer, delta_x, delta_y)
  .perform

LANGUAGE: JavaScript
CODE:
const footer = await driver.findElement(By.css('footer'));
const deltaX = 0;
const deltaY = -150;
await driver.actions()
    .scroll(0, 0, deltaX, deltaY, footer)
    .perform();

LANGUAGE: Kotlin
CODE:
val footer = driver.findElement(By.tagName("footer"))
val deltaX = 0
val deltaY = -150
Actions(driver)
    .scrollFromElement(footer, deltaX, deltaY)
    .perform()

----------------------------------------

TITLE: Browser Context Management in Selenium BiDi
DESCRIPTION: APIs for managing browser contexts including getting context trees, activating contexts, capturing screenshots, and handling viewports.



----------------------------------------

TITLE: Selenium Grid Configuration for Redis Sessions
DESCRIPTION: TOML configuration file for Selenium Grid to use Redis as the session map backend.

LANGUAGE: toml
CODE:
[sessions]
scheme = "redis"
implementation = "org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap"
hostname = "localhost"
port = 6379

----------------------------------------

TITLE: Capturing Console Logs with CDP in C#
DESCRIPTION: This snippet illustrates how to capture console logs using Chrome DevTools Protocol in C# with Selenium 4. It requires setting up a DevTools session, enabling console logging, and adding an event listener.

LANGUAGE: C#
CODE:
IDevTools devTools = driver as IDevTools;
IDevToolsSession session = devTools.GetDevToolsSession();
await session.SendCommand(new LogEnableCommandSettings());

session.DomainEvent += (sender, e) =>
{
    Console.WriteLine($"Log entry added: {e.EventName}");
};

----------------------------------------

TITLE: Calling Function in Browsing Context with Java
DESCRIPTION: Demonstrates how to call a function in a browsing context using Selenium WebDriver BiDi in Java. This example shows setting up a driver, creating a script result, and executing a script function.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

ScriptResult result = driver.executeScript(
    "return 'HI'"
);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("type").getAsString()).isEqualTo("string");
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("HI");

result = driver.executeScript(
    "return document.body.getAttribute('bgcolor')"
);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("type").getAsString()).isEqualTo("string");
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("#FFFFFF");

result = driver.executeScript(
    "return document"
);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("type").getAsString()).isEqualTo("document");

----------------------------------------

TITLE: Implementing Script Pinning with CDP
DESCRIPTION: Demonstrates how to implement script pinning functionality using Chrome DevTools Protocol across different programming languages. This feature allows scripts to be pinned in memory.

LANGUAGE: Java
CODE:
driver.executeCdpCommand("Page.enable", new HashMap<>());
driver.executeCdpCommand("Page.setWebLifecycleState", Map.of("state", "active"));

LANGUAGE: CSharp
CODE:
((IDevTools)driver).ExecuteCdpCommand("Page.enable", new {});

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Page.enable', {})

----------------------------------------

TITLE: Creating Remote WebDriver Instance
DESCRIPTION: Java code to create a RemoteWebDriver instance with desired capabilities

LANGUAGE: java
CODE:
DesiredCapabilities capability = DesiredCapabilities.firefox();
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), capability);

----------------------------------------

TITLE: Running All Selenium Java Tests with Maven in Bash
DESCRIPTION: This command executes all available Selenium Java tests using Maven. It may take some time on the first run due to downloading and verifying browser drivers.

LANGUAGE: bash
CODE:
mvn test

----------------------------------------

TITLE: Installing Selenium with npm (JavaScript)
DESCRIPTION: Installing Selenium JavaScript bindings using npm package manager.

LANGUAGE: shell
CODE:
npm install selenium-webdriver

----------------------------------------

TITLE: Using Actions to Move to Element in Selenium
DESCRIPTION: This snippet shows how to use the Actions class to move to an element, which can be useful when dealing with ElementClickInterceptedException.

LANGUAGE: python
CODE:
Actions.moveToElement(element)

----------------------------------------

TITLE: HTMLサンプルページの構造
DESCRIPTION: JavaScript関数を含むHTMLページの構造を示します。このページには、確認ダイアログ、アラート、プロンプト、新しいウィンドウを開くためのボタンが含まれています。

LANGUAGE: html
CODE:
<!DOCTYPE HTML>
<html>
<head>
  <script type="text/javascript">
    function output(resultText){
      document.getElementById('output').childNodes[0].nodeValue=resultText;
    }

    function show_confirm(){
      var confirmation=confirm("Chose an option.");
      if (confirmation==true){
        output("Confirmed.");
      }
      else{
        output("Rejected!");
      }
    }
    
    function show_alert(){
      alert("I'm blocking!");
      output("Alert is gone.");
    }
    function show_prompt(){
      var response = prompt("What's the best web QA tool?","Selenium");
      output(response);
    }
    function open_window(windowName){
      window.open("newWindow.html",windowName);
    }
    </script>
</head>
<body>

  <input type="button" id="btnConfirm" onclick="show_confirm()" value="Show confirm box" />
  <input type="button" id="btnAlert" onclick="show_alert()" value="Show alert" />
  <input type="button" id="btnPrompt" onclick="show_prompt()" value="Show prompt" />
  <a href="newWindow.html" id="lnkNewWindow" target="_blank">New Window Link</a>
  <input type="button" id="btnNewNamelessWindow" onclick="open_window()" value="Open Nameless Window" />
  <input type="button" id="btnNewNamedWindow" onclick="open_window('Mike')" value="Open Named Window" />

  <br />
  <span id="output">
  </span>
</body>
</html>

----------------------------------------

TITLE: Waiting for Downloads with CDP in Selenium
DESCRIPTION: This snippet demonstrates how to wait for downloads to complete using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.addListener(Browser.downloadWillBegin(), d -> {
    System.out.println("Download is beginning");
});

devTools.addListener(Browser.downloadProgress(), d -> {
    if (d.getState().equals("completed")) {
        System.out.println("Download is completed");
    }
});

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Browser.downloadWillBegin') do |params|
  puts 'Download is beginning'
end

driver.on_cdp_event('Browser.downloadProgress') do |params|
  if params['state'] == 'completed'
    puts 'Download is completed'
  end
end

----------------------------------------

TITLE: Starting Distributed Grid Components
DESCRIPTION: Commands to start individual components of a Distributed Selenium Grid setup.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar event-bus --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5557

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar sessionqueue --port 5559

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar sessions --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --port 5556

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar distributor --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443 --sessions http://<sessions-ip>:5556 --sessionqueue http://<new-session-queue-ip>:5559 --port 5553 --bind-bus false

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar router --sessions http://<sessions-ip>:5556 --distributor http://<distributor-ip>:5553 --sessionqueue http://<new-session-queue-ip>:5559 --port 4444

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node --publish-events tcp://<event-bus-ip>:4442 --subscribe-events tcp://<event-bus-ip>:4443

----------------------------------------

TITLE: Sending CDP Commands in Ruby
DESCRIPTION: Demonstrates how to send a basic CDP command to change the browser's geolocation using Selenium in Ruby.

LANGUAGE: ruby
CODE:
coordinates = { latitude: 30.2866, longitude: -97.7390 }
driver.execute_cdp('Emulation.setGeolocationOverride', coordinates)

----------------------------------------

TITLE: Calling Function in Sandbox with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to call a function in a sandbox environment using Selenium WebDriver BiDi in Java. It demonstrates creating a sandbox and executing a function within it.

LANGUAGE: Java
CODE:
Sandbox sandbox = new Sandbox();
Object result = ((HasBiDi) driver).getBiDi().callFunction(
        "() => { return 'Hello from sandbox'; }",
        List.of(),
        new ScriptFunctionOptions().sandbox(sandbox));

assertEquals("Hello from sandbox", result);

----------------------------------------

TITLE: Setting PATH Environment Variable in Windows
DESCRIPTION: Command to add a directory containing the WebDriver executable to the PATH environment variable in Windows Command Prompt.

LANGUAGE: shell
CODE:
setx PATH "%PATH%;C:\WebDriver\bin"

----------------------------------------

TITLE: Handling DOM Mutations with Chrome DevTools Protocol in Ruby
DESCRIPTION: This snippet shows how to handle DOM mutations using the Chrome DevTools Protocol in Ruby. It uses the execute_cdp method to enable DOM mutation observation.

LANGUAGE: Ruby
CODE:
driver.execute_cdp('DOMSnapshot.enable')

----------------------------------------

TITLE: Pinning Scripts with Chrome DevTools Protocol in Java
DESCRIPTION: This snippet demonstrates how to pin a script using the Chrome DevTools Protocol in Java. It utilizes the devTools object to execute the Page.addScriptToEvaluateOnNewDocument command.

LANGUAGE: Java
CODE:
devTools.send(Page.addScriptToEvaluateOnNewDocument("window.scrollTo(0, document.body.scrollHeight);", null));

----------------------------------------

TITLE: Python Dependencies List
DESCRIPTION: Specifies the exact versions of Python packages required for the project. Includes Selenium 4.29.0 for browser automation, pytest 8.3.5 for testing, trio 0.29.0 for async support, and additional testing and utility packages.

LANGUAGE: plaintext
CODE:
selenium==4.29.0
pytest==8.3.5
trio==0.29.0
pytest-trio==0.8.0
pytest-rerunfailures==14.0
flake8==7.1.2
requests==2.32.3

----------------------------------------

TITLE: Pytest WebDriver Fixture Implementation
DESCRIPTION: Example showing how to create an isolated WebDriver instance per test using pytest fixtures. This approach ensures proper test isolation and automatic cleanup of driver resources after each test completes.

LANGUAGE: python
CODE:
@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()

----------------------------------------

TITLE: Checking PATH Environment Variable in Bash
DESCRIPTION: Commands to view and modify PATH environment variable in Bash shell to include WebDriver location

LANGUAGE: shell
CODE:
echo $PATH
echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
source ~/.bash_profile
chromedriver --version

----------------------------------------

TITLE: Focus Stealing Prevention in X-Windows Events for Firefox (C)
DESCRIPTION: Implements focus control by intercepting X-Windows events through a preloaded shared library that overrides XNextEvent. Maintains Firefox window focus by filtering FocusOut events and managing window state transitions.

LANGUAGE: c
CODE:
// Location: firefox/src/cpp/linux-specific/x_ignore_nofocus.c

XNextEvent(Display* display, XEvent* event) {
    // Load real XNextEvent from libX11
    // Get real event
    // Inspect and potentially modify event based on:
    // - Window creation (ReparentNotify)
    // - Focus changes (FocusIn/FocusOut)
    // - Window switching
    // - Window closing (DestroyNotify)
    // Return modified or original event
}

----------------------------------------

TITLE: Docker Integration Configuration
DESCRIPTION: Configuration for running sessions in Docker containers with image mapping and device configurations.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false
max-sessions = 2

[docker]
configs = [
    "selenium/standalone-chrome:93.0", "{\"browserName\": \"chrome\", \"browserVersion\": \"91\"}", 
    "selenium/standalone-firefox:92.0", "{\"browserName\": \"firefox\", \"browserVersion\": \"92\"}"
]
url = "http://localhost:2375"
video-image = "selenium/video:latest"

----------------------------------------

TITLE: Opening a New Tab in JavaScript
DESCRIPTION: Creates a new browsing context in a new tab using Selenium WebDriver BiDi.

LANGUAGE: JavaScript
CODE:
const { browsingContext } = driver.getBidi();
const newTab = await browsingContext.create({ type: "tab" });
assert.isNotNull(newTab);

----------------------------------------

TITLE: Performing Click and Hold Action in Selenium
DESCRIPTION: This method combines moving the mouse to the center of an element with pressing the left mouse button. It's useful for focusing on a specific element.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .clickAndHold(clickable)
        .perform();

----------------------------------------

TITLE: Monitoring All JavaScript Logs in Selenium WebDriver BiDi
DESCRIPTION: Demonstrates how to listen to all JavaScript logs across all logging levels. Provides a way to capture and process any log entries generated by the application.

LANGUAGE: Java
CODE:
log.addJavaScriptLogListener(logEvent -> {
    System.out.println("Log text is: " + logEvent.getText());
    System.out.println("Log type: " + logEvent.getType());
});

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP in C#
DESCRIPTION: This snippet illustrates how to capture JavaScript exceptions using Chrome DevTools Protocol in C# with Selenium 4. It involves enabling runtime logging and adding an event listener for exceptions.

LANGUAGE: C#
CODE:
IDevTools devTools = driver as IDevTools;
IDevToolsSession session = devTools.GetDevToolsSession();
await session.SendCommand(new RuntimeEnableCommandSettings());

session.DomainEvent += (sender, e) =>
{
    Console.WriteLine($"JavaScript exception: {e.EventName}");
};

----------------------------------------

TITLE: Calling Function in Realm with Java
DESCRIPTION: Demonstrates calling a function in a specific realm using Selenium WebDriver BiDi in Java. This example shows getting realms, selecting a specific realm, and executing a script within it.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms();
Realm realm = realms.stream().filter(r -> r.getOrigin().contains("selenium.dev")).findFirst().orElseThrow();

ScriptResult result = driver.executeScript(
    "return document.body.getAttribute('bgcolor')",
    realm
);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("type").getAsString()).isEqualTo("string");
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("#FFFFFF");

----------------------------------------

TITLE: Updating BrowserType to Browser in Java
DESCRIPTION: Shows how to update from the deprecated BrowserType to the new Browser interface in Java.

LANGUAGE: Java
CODE:
MutableCapabilities capabilities = new MutableCapabilities();
capabilities.setCapability("browserVersion", "92");
capabilities.setCapability("browserName", Browser.FIREFOX);

----------------------------------------

TITLE: Extending Selenium 2.0 / WebDriver to Support Ajax
DESCRIPTION: This snippet demonstrates a method to extend Selenium 2.0 / WebDriver to better support Ajax interactions in web applications. While the author suggests there might be better ways, this provides a working solution.

LANGUAGE: java
CODE:
// Code not provided in the original text, but referenced as being available via a link

----------------------------------------

TITLE: Configuring Page Range in Selenium PrintOptions
DESCRIPTION: This code shows how to set the range of pages to be printed using Selenium's PrintOptions class. It uses the setPageRanges() method to specify which pages should be included in the print job.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setPageRanges("2-4");
assertThat(printOptions.getPageRanges()).isEqualTo("2-4");

----------------------------------------

TITLE: Scrolling from Viewport Origin in Selenium
DESCRIPTION: Demonstrates scrolling from a specific offset relative to the viewport's upper left corner. The offset point must remain within the visible viewport area.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/scrolling_tests/frame_with_nested_scrolling_frame.html");
new Actions(driver)
    .scrollFromOrigin(WheelInput.ScrollOrigin.fromViewport(10, 10), 0, 200)
    .perform();

----------------------------------------

TITLE: Checking Element Selection State in Selenium
DESCRIPTION: Demonstrates how to use the isSelected() method to determine if an element (such as a checkbox or radio button) is selected. Returns a boolean value indicating the selection state.

LANGUAGE: Java
CODE:
WebElement checkbox = driver.findElement(By.name("checkbox_input"));
boolean isSelected = checkbox.isSelected();

LANGUAGE: Python
CODE:
is_selected = driver.find_element(By.NAME, "checkbox_input").is_selected()

LANGUAGE: C#
CODE:
var checkbox = driver.FindElement(By.Name("checkbox_input"));
bool isSelected = checkbox.Selected;

LANGUAGE: Ruby
CODE:
driver.find_element(name: 'checkbox_input').selected?

LANGUAGE: JavaScript
CODE:
const checkbox = await driver.findElement(By.name('checkbox_input'))
const isSelected = await checkbox.isSelected()

LANGUAGE: Kotlin
CODE:
val attr =  driver.findElement(By.name("checkbox_input")).isSelected()

----------------------------------------

TITLE: Removing Network Intercept in Java and JavaScript
DESCRIPTION: Shows how to remove a previously added network intercept in Java and JavaScript. This is useful for cleaning up after interception is no longer needed.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("hello.html")).to(() -> req -> new HttpResponse().setBody("Goodbye!")));

interceptor.close();

LANGUAGE: JavaScript
CODE:
await driver.deleteNetworkConditions();
await driver.setNetworkConditions({ offline: false });

----------------------------------------

TITLE: Moving by Offset from Viewport in Selenium
DESCRIPTION: This method moves the mouse from the upper left corner of the current viewport by the provided offset.

LANGUAGE: Java
CODE:
new Actions(driver)
        .moveByOffset(50, 50)
        .clickAndHold()
        .moveByOffset(100, 100)
        .release()
        .perform();

----------------------------------------

TITLE: Monitoring All JavaScript Logs in Selenium BiDi API
DESCRIPTION: Demonstrates how to listen to all JavaScript logs across different logging levels using the BiDi API.

LANGUAGE: Java
CODE:
LogInspector logInspector = new LogInspector(devTools);
logInspector.onJavaScriptLog(jsLog -> {
    System.out.println("JS Log Text: " + jsLog.getText());
    System.out.println("JS Log Timestamp: " + jsLog.getTimestamp());
});

----------------------------------------

TITLE: Setting Page Orientation in Java
DESCRIPTION: This snippet demonstrates how to set the page orientation to landscape using Selenium's PrintOptions in Java. It uses the setOrientation() method to configure the print layout.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);
assertThat(printOptions.getOrientation()).isEqualTo(PrintOptions.Orientation.LANDSCAPE);

----------------------------------------

TITLE: Capturing JavaScript Exceptions with CDP in Ruby
DESCRIPTION: This snippet demonstrates how to capture JavaScript exceptions using Chrome DevTools Protocol in Ruby with Selenium 4. It requires enabling runtime logging through CDP commands.

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Runtime.enable')

----------------------------------------

TITLE: Evaluating Script in Realm with JavaScript
DESCRIPTION: Shows how to evaluate a script in a specific realm using Selenium WebDriver BiDi in JavaScript. This example demonstrates getting realms, selecting a specific realm, and executing a script within it.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms()
const realm = realms.find((r) => r.origin.includes('selenium.dev'))

const result = await driver.executeScript('return document.body.getAttribute(\'bgcolor\')', realm)
assert.strictEqual(result, '#FFFFFF')

const result2 = await driver.executeScript('return this', realm)
assert.strictEqual(typeof result2, 'object')
assert.strictEqual(result2.constructor.name, 'Window')

----------------------------------------

TITLE: Updating Capability Merging in Java
DESCRIPTION: Demonstrates how to properly merge capabilities in Java for Selenium 4.

LANGUAGE: Java
CODE:
MutableCapabilities capabilities = new MutableCapabilities();
capabilities.setCapability("platformVersion", "Windows 10");
FirefoxOptions options = new FirefoxOptions();
options.setHeadless(true);
options = options.merge(capabilities);

----------------------------------------

TITLE: Displaying Selenium Grid Security Information
DESCRIPTION: This command runs the Selenium server JAR file to display security-related information for Selenium Grid configuration. It helps users understand available security options and best practices.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar info security

----------------------------------------

TITLE: Comparing Color Objects in Selenium
DESCRIPTION: Demonstrates how to compare Color objects directly.

LANGUAGE: Java
CODE:
assert loginButtonBackgroundColour.equals(HOTPINK);

LANGUAGE: Python
CODE:
assert login_button_background_colour == HOTPINK

LANGUAGE: Ruby
CODE:
assert(login_button_background_colour == HOTPINK)

LANGUAGE: Kotlin
CODE:
assert(loginButtonBackgroundColour.equals(HOTPINK))

----------------------------------------

TITLE: Enabling Managed Downloads by the Node
DESCRIPTION: Configuration to enable managed downloads on the Node, which automatically saves downloaded files for each session.

LANGUAGE: toml
CODE:
[node]
enable-managed-downloads = true

----------------------------------------

TITLE: Releasing Actions in Selenium WebDriver BiDi (JavaScript)
DESCRIPTION: This snippet shows how to release actions using Selenium WebDriver BiDi in JavaScript. It uses the actions API to release all previously performed actions.

LANGUAGE: JavaScript
CODE:
await driver.actions().clear();

----------------------------------------

TITLE: Calling Function in Realm with JavaScript
DESCRIPTION: Shows how to call a function in a specific realm using Selenium WebDriver BiDi in JavaScript. This example demonstrates getting realms, selecting a specific realm, and executing a script within it.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms()
const realm = realms.find((r) => r.origin.includes('selenium.dev'))

const result = await driver.executeScript('return document.body.getAttribute(\'bgcolor\')', realm)
assert.strictEqual(result, '#FFFFFF')

----------------------------------------

TITLE: Performing Drag and Drop on Element in Selenium
DESCRIPTION: This method performs a click-and-hold on the source element, moves to the location of the target element, and then releases the mouse.

LANGUAGE: Java
CODE:
WebElement draggable = driver.findElement(By.id("draggable"));
WebElement droppable = driver.findElement(By.id("droppable"));
new Actions(driver)
        .dragAndDrop(draggable, droppable)
        .perform();

----------------------------------------

TITLE: Removing JavaScript Exception Handler - Ruby
DESCRIPTION: Demonstrates how to remove a previously added JavaScript exception handler in Ruby using the stored handler ID.

LANGUAGE: ruby
CODE:
listener_id = driver.add_js_error_listener
driver.remove_js_error_listener(listener_id)

----------------------------------------

TITLE: Removing Console Message Handler in Ruby
DESCRIPTION: This snippet demonstrates how to remove a previously added console message handler in Ruby. It uses the stored handler ID to remove the specific listener.

LANGUAGE: Ruby
CODE:
handler_id = driver.on_log(LogType::CONSOLE) do |log|
  puts "Console log: #{log.text}"
end
driver.delete_log_listener(LogType::CONSOLE, handler_id)

----------------------------------------

TITLE: Defining YAML Frontmatter for 2013 Blog Posts Page in Selenium Project
DESCRIPTION: This YAML frontmatter defines metadata for a page containing Selenium project blog posts from 2013. It sets the page title, link title, and weight for ordering within the site structure.

LANGUAGE: yaml
CODE:
---
title: "Blog Posts - 2013"
linkTitle: "2013"
weight: 97
---

----------------------------------------

TITLE: Updating Gradle Dependencies for Selenium 4
DESCRIPTION: Demonstrates how to update the Gradle build.gradle file to use Selenium 4 dependencies.

LANGUAGE: Groovy
CODE:
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.4.0'
}

----------------------------------------

TITLE: Implementing Certificate Override Service in Firefox
DESCRIPTION: This snippet shows the core function of the certificate override service in Firefox. It determines whether a certificate should be trusted based on various error conditions.

LANGUAGE: javascript
CODE:
WdCertOverrideService.prototype.hasMatchingOverride = function(
    aHostName, aPort, aCert, aOverrideBits, aIsTemporary)

----------------------------------------

TITLE: Simulating Thread Collision with ThreadGuard in Java
DESCRIPTION: This example demonstrates how ThreadGuard prevents thread collisions by throwing an exception when a WebDriver instance is accessed from a different thread than the one that created it. It creates a protected ChromeDriver instance and attempts to access it from a separate thread.

LANGUAGE: java
CODE:
public class DriverClash {
  //thread main (id 1) created this driver
  private WebDriver protectedDriver = ThreadGuard.protect(new ChromeDriver());

  static {
    System.setProperty("webdriver.chrome.driver", "<Set path to your Chromedriver>");
  }

  //Thread-1 (id 24) is calling the same driver causing the clash to happen
  Runnable r1 = () -> {protectedDriver.get("https://selenium.dev");};
  Thread thr1 = new Thread(r1);

  void runThreads(){
    thr1.start();
  }

  public static void main(String[] args) {
    new DriverClash().runThreads();
  }
}

----------------------------------------

TITLE: Intercepting Requests with CDP in Selenium
DESCRIPTION: This snippet shows how to intercept and modify requests using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.addListener(Network.requestIntercepted(),
        requestIntercepted -> {
            Request request = requestIntercepted.getRequest();
            if (request.getUrl().contains("amazon")) {
                Map<String, Object> headers = request.getHeaders();
                headers.put("customHeader", "customHeaderValue");

                byte[] bytes = devTools.send(Network.getResponseBodyForInterception(requestIntercepted.getInterceptionId())).getBody().getBytes();
                String encodedBody = Base64.getEncoder().encodeToString(bytes);

                devTools.send(Network.continueInterceptedRequest(requestIntercepted.getInterceptionId(),
                        Optional.empty(),
                        Optional.empty(),
                        Optional.of(request.getUrl()),
                        Optional.of(request.getMethod()),
                        Optional.of(encodedBody),
                        Optional.of(headers)));
            }
        });

LANGUAGE: C#
CODE:
_devTools.AddEventHandler(Network.RequestIntercepted, async (_, e) =>
{
    if (e.Request.Url.Contains("amazon"))
    {
        var headers = e.Request.Headers;
        headers["customHeader"] = "customHeaderValue";

        var body = (await _devTools.SendAsync(Network.GetResponseBodyForInterception(new NetworkGetResponseBodyForInterceptionCommandSettings
        {
            InterceptionId = e.InterceptionId
        }))).Body;

        var encodedBody = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(body));

        await _devTools.SendAsync(Network.ContinueInterceptedRequest(new NetworkContinueInterceptedRequestCommandSettings
        {
            InterceptionId = e.InterceptionId,
            Url = e.Request.Url,
            Method = e.Request.Method,
            PostData = encodedBody,
            Headers = headers
        }));
    }
});

LANGUAGE: Ruby
CODE:
driver.on_cdp_event('Network.requestIntercepted') do |params|
  if params.dig('request', 'url').include?('amazon')
    headers = params.dig('request', 'headers')
    headers['customHeader'] = 'customHeaderValue'
    body = driver.execute_cdp('Network.getResponseBodyForInterception', interceptionId: params['interceptionId'])['body']
    driver.execute_cdp('Network.continueInterceptedRequest',
                       interceptionId: params['interceptionId'],
                       url: params.dig('request', 'url'),
                       method: params.dig('request', 'method'),
                       postData: Base64.encode64(body),
                       headers: headers)
  end
end

----------------------------------------

TITLE: Listening to 'Auth Required' Network Event in Selenium WebDriver
DESCRIPTION: This code shows how to listen for the 'Auth Required' network event using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addAuthHandler("*", request -> {
    AuthCredentials credentials = new AuthCredentials("admin", "admin");
    return interceptor.continueWithAuth(request, credentials);
});
driver.get("https://the-internet.herokuapp.com/basic_auth");

----------------------------------------

TITLE: Node Configuration with Custom Capabilities
DESCRIPTION: Example showing how to start a Node with custom capabilities

LANGUAGE: java
CODE:
ChromeOptions options = new ChromeOptions();
options.setCapability("gsg:customcap", true);
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444"), options);
driver.get("https://selenium.dev");
driver.quit();

----------------------------------------

TITLE: Deleting Specific Cookies in Selenium WebDriver
DESCRIPTION: Shows how to delete a specific cookie by name from the browser context.

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
driver = Selenium::WebDriver.for :chrome

begin
  driver.get 'https://www.example.com'
  driver.manage.add_cookie(name: "test1", value: "cookie1")
  driver.manage.add_cookie(name: "test2", value: "cookie2")

  # delete a cookie with name 'test1'
  driver.manage.delete_cookie('test1')
ensure
  driver.quit
end

----------------------------------------

TITLE: Removing Console Message Handler - Ruby
DESCRIPTION: Demonstrates how to remove a previously added console message handler in Ruby using the stored handler ID.

LANGUAGE: ruby
CODE:
listener_id = driver.add_console_listener
driver.remove_console_listener(listener_id)

----------------------------------------

TITLE: Products Test Using Page and Component Objects in Java
DESCRIPTION: A test class demonstrating the usage of page objects and component objects for testing product-related functionality.

LANGUAGE: java
CODE:
public class ProductsTest {
    @Test
    public void testProductInventory() {
        var productsPage = new ProductsPage(driver);
        var products = productsPage.getProducts();
        assertEquals(6, products.size());
    }
    
    @Test
    public void testProductPrices() {
        var productsPage = new ProductsPage(driver);

        var backpack = productsPage.getProduct(p -> p.getName().equals("Backpack"));
        var bikeLight = productsPage.getProduct(p -> p.getName().equals("Bike Light"));

        assertEquals(new BigDecimal("29.99"), backpack.getPrice());
        assertEquals(new BigDecimal("9.99"), bikeLight.getPrice());
    }
}

----------------------------------------

TITLE: Removing JavaScript Exception Handler in Ruby
DESCRIPTION: This snippet shows how to remove a previously added JavaScript exception handler in Ruby. It uses the stored handler ID to remove the specific listener.

LANGUAGE: Ruby
CODE:
handler_id = driver.on_log(LogType::JAVASCRIPT) do |log|
  puts "JS exception: #{log.text}"
end
driver.delete_log_listener(LogType::JAVASCRIPT, handler_id)

----------------------------------------

TITLE: Setting PATH Environment Variable in Zsh
DESCRIPTION: Commands to add a directory containing the WebDriver executable to the PATH environment variable in Zsh.

LANGUAGE: shell
CODE:
echo 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv
source ~/.zshenv

----------------------------------------

TITLE: Setting Java Logger Level
DESCRIPTION: Shows how to set the logger level for both the logger and its handlers in Java.

LANGUAGE: Java
CODE:
logger.setLevel(Level.FINE);
for (Handler handler : logger.getHandlers()) {
    handler.setLevel(Level.FINE);
}

----------------------------------------

TITLE: Referencing HTML5 API Package in Selenium WebDriver
DESCRIPTION: Package reference for HTML5 elements API in Selenium WebDriver, used for interacting with HTML5 elements, primarily implemented in mobile WebDrivers.

LANGUAGE: java
CODE:
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/package-summary.html

----------------------------------------

TITLE: Java Selenium Manager Implementation
DESCRIPTION: Shows how to use Selenium Manager in Java compared to previous manual driver management approach

LANGUAGE: Java
CODE:
// Previously
System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");
WebDriver driver = new ChromeDriver();

// With Selenium Manager
WebDriver driver = new ChromeDriver();

----------------------------------------

TITLE: PostgreSQL Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up a PostgreSQL instance for Selenium Grid session storage

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  db:
    image: postgres:9.6-bullseye
    restart: always
    environment:
      - POSTGRES_USER=seluser
      - POSTGRES_PASSWORD=seluser
      - POSTGRES_DB=selenium_sessions
    ports:
      - "5432:5432"
    volumes:
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql

----------------------------------------

TITLE: Disowning Handles in Browsing Context with Java
DESCRIPTION: Demonstrates disowning handles in a browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.disownScriptHandles();

----------------------------------------

TITLE: Listening to 'Response Started' Network Event in Selenium WebDriver
DESCRIPTION: This code shows how to listen for the 'Response Started' network event using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
AtomicReference<Integer> status = new AtomicReference<>();
interceptor.addResponseStartedHandler(response -> {
    status.set(response.getStatus());
    return null;
});
driver.get(baseUrl);
assertThat(status.get()).isEqualTo(200);

----------------------------------------

TITLE: Switching Between Windows
DESCRIPTION: Switches focus between different browser windows or tabs by storing original window handle and iterating through available handles.

LANGUAGE: Java
CODE:
String originalWindow = driver.getWindowHandle();
assert driver.getWindowHandles().size() == 1;
for (String windowHandle : driver.getWindowHandles()) {
    if(!originalWindow.contentEquals(windowHandle)) {
        driver.switchTo().window(windowHandle);
        break;
    }
}

----------------------------------------

TITLE: Adding Console Message Handler - Python
DESCRIPTION: Demonstrates how to add a handler for console.log events in Python using WebDriver BiDi. The handler allows recording or taking actions on console.log messages.

LANGUAGE: python
CODE:
driver.add_console_listener()

----------------------------------------

TITLE: Removing Console Message Handler - Python
DESCRIPTION: Shows how to remove a previously added console message handler in Python using the stored handler ID.

LANGUAGE: python
CODE:
listener_id = driver.add_console_listener()
driver.remove_console_listener(listener_id)

----------------------------------------

TITLE: Querying Comprehensive Selenium Grid Details
DESCRIPTION: Shows how to query detailed information about the grid, nodes, and sessions using a single GraphQL query.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ grid { uri, maxSession, sessionCount }, nodesInfo { nodes { id, uri, status, sessions { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } }, slotCount, sessionCount }} }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Setting Python Logger Level
DESCRIPTION: Demonstrates how to set the logger level in Python.

LANGUAGE: Python
CODE:
logger.setLevel(logging.DEBUG)

----------------------------------------

TITLE: Starting Selenium Grid with Java 11+ HTTP Client Using Coursier
DESCRIPTION: This bash command demonstrates an alternative method to start Selenium Grid with Java 11+ HTTP client using Coursier to fetch the required jar file.

LANGUAGE: bash
CODE:
java -Dwebdriver.http.factory=jdk-http-client -jar selenium-server-4.5.0.jar —-ext $(coursier fetch -p org.seleniumhq.selenium:selenium-http-jdk-client:4.5.0) standalone

----------------------------------------

TITLE: Example Selenium Manager Configuration
DESCRIPTION: Sample TOML configuration file for customizing Selenium Manager behavior

LANGUAGE: TOML
CODE:
# Example configuration file (se-config.toml)
proxy = "myproxy:8080"
timeout = 120
debug = true
cache-path = "/custom/cache/path"
ttl = 7200
chromedriver-version = "106.0.5249"
chrome-version = "106"
chrome-path = "/usr/bin/google-chrome"
chromedriver-mirror-url = "https://my-mirror/chromedriver"
chrome-mirror-url = "https://my-mirror/chrome"
avoid-stats = true
os = "linux"
arch = "x64"
output = "JSON"

----------------------------------------

TITLE: PostgreSQL Sessions TOML Configuration
DESCRIPTION: TOML configuration file for setting up JDBC-based session management in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
implementation = "org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap"
jdbc-url = "jdbc:postgresql://localhost:5432/selenium_sessions"
jdbc-user = "seluser"
jdbc-password = "seluser"

----------------------------------------

TITLE: Initializing Local WebDriver in C#
DESCRIPTION: This snippet illustrates the creation of a local WebDriver session in C# using ChromeOptions.

LANGUAGE: C#
CODE:
IWebDriver driver = new ChromeDriver(Path.GetFullPath("."), options);

----------------------------------------

TITLE: Initializing Local WebDriver in JavaScript
DESCRIPTION: This snippet shows how to create a local WebDriver session in JavaScript using the Builder class.

LANGUAGE: JavaScript
CODE:
driver = await new Builder()
    .forBrowser('chrome')
    .setChromeService(service)
    .setChromeOptions(options)
    .build()

----------------------------------------

TITLE: Removing Console Message Handler in WebDriver BiDi (Python)
DESCRIPTION: This snippet shows how to remove a previously added console message handler in WebDriver BiDi using Python. It requires storing the ID returned when adding the handler.

LANGUAGE: Python
CODE:
listener = driver.add_listener(Console.ALL, lambda log: print(log.text))
driver.remove_listener(listener)

----------------------------------------

TITLE: Setting DOM Mutation Handler with Chrome DevTools Protocol in C#
DESCRIPTION: This snippet illustrates how to set a DOM mutation handler using the Chrome DevTools Protocol in C#. It uses the DevToolsSession to send the DOMSnapshot.Enable and DOMSnapshot.CaptureSnapshot commands.

LANGUAGE: C#
CODE:
await session.SendAsync(new DOMSnapshotEnableCommand());

var result = await session.SendAsync(new DOMSnapshotCaptureSnapshotCommand
{
    ComputedStyles = new string[] { },
    IncludePaintOrder = true,
    IncludeDOMRects = true
});

----------------------------------------

TITLE: Accessing Selenium Grid Security Information
DESCRIPTION: This command provides details on setting up Grid servers for secure communication and node registration.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar info security

----------------------------------------

TITLE: Removing Console Message Handler in Ruby
DESCRIPTION: Shows how to remove a previously added console message handler in Ruby using the stored handler ID.

LANGUAGE: Ruby
CODE:
driver.remove_console_listener()
driver.remove_all_listeners()

----------------------------------------

TITLE: Handling Disabled Options in Select Element
DESCRIPTION: Shows how to handle disabled options in a <select> element, demonstrating that they cannot be selected using Selenium WebDriver.

LANGUAGE: Java
CODE:
WebElement select = driver.findElement(By.name("single_disabled"));
Select selectObject = new Select(select);
assertThrows(UnsupportedOperationException.class, () -> selectObject.selectByValue("disabled"));

LANGUAGE: Python
CODE:
select = Select(driver.find_element(By.NAME, "single_disabled"))
with pytest.raises(NotSelectableError): select.select_by_value("disabled")

LANGUAGE: C#
CODE:
Assert.Throws<NoSuchElementException>(() => selectObject.SelectByValue("disabled"));

LANGUAGE: Ruby
CODE:
select = Selenium::WebDriver::Support::Select.new(@driver.find_element(name: 'single_disabled'))
expect { select.select_by(:value, 'disabled') }.to raise_error(Selenium::WebDriver::Error::UnsupportedOperationError)

LANGUAGE: JavaScript
CODE:
const select = await new Select(await driver.findElement(By.name('single_disabled')));
await expect(select.selectByValue('disabled')).rejects.toThrow('Element is not selectable');

LANGUAGE: Kotlin
CODE:
val select = driver.findElement(By.name("single_disabled"))
val selectObject = Select(select)
assertThrows<UnsupportedOperationException> { selectObject.selectByValue("disabled") }

----------------------------------------

TITLE: Filtering Python Logs by Module
DESCRIPTION: Demonstrates how to filter logs for specific modules in Python.

LANGUAGE: Python
CODE:
logging.getLogger('selenium.webdriver.remote.remote_connection').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)

----------------------------------------

TITLE: Importing Selenium WebDriver BiDi APIs (Pre-4.19)
DESCRIPTION: This snippet shows the import statements for Selenium WebDriver BiDi APIs before version 4.19. It includes imports for LogInspector, BrowsingContextInspector, Input, Script, and Network from the org.openqa.selenium.bidi package.

LANGUAGE: Java
CODE:
import org.openqa.selenium.bidi.LogInspector;
import org.openqa.selenium.bidi.BrowsingContextInspector;
import org.openqa.selenium.bidi.Input;
import org.openqa.selenium.bidi.Script;
import org.openqa.selenium.bidi.Network;

----------------------------------------

TITLE: Configuring Relay for External WebDriver Services
DESCRIPTION: Configuration to connect an external service (like Appium) that supports WebDriver to Selenium Grid.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false

[relay]
url = "http://localhost:4723/wd/hub"
status-endpoint = "/status"
protocol-version = "HTTP/1.1"
configs = [
  "5", "{\"browserName\": \"chrome\", \"platformName\": \"android\", \"appium:platformVersion\": \"11\"}"
]

----------------------------------------

TITLE: Distributed Selenium Grid Startup Script with Redis
DESCRIPTION: Bash script to start a distributed Selenium Grid using Redis for session storage.

LANGUAGE: bash
CODE:
SE_VERSION=<current_selenium_version>
JAR_NAME=selenium-server-${SE_VERSION}.jar
PUBLISH="--publish-events tcp://localhost:4442"
SUBSCRIBE="--subscribe-events tcp://localhost:4443"
SESSIONS="--sessions http://localhost:5556"
SESSIONS_QUEUE="--sessionqueue http://localhost:5559"
echo 'Starting Event Bus'
java -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &
echo 'Starting New Session Queue'
java -jar $JAR_NAME sessionqueue --port 5559 &
echo 'Starting Session Map'
java -jar $JAR_NAME \
--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-redis:${SE_VERSION}) \
sessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &
echo 'Starting Distributor'
java -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &
echo 'Starting Router'
java -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &
echo 'Starting Node'
java -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &

----------------------------------------

TITLE: Draining a Node in Selenium Grid
DESCRIPTION: This command gracefully shuts down a node by stopping it after all ongoing sessions are completed and preventing new session requests.

LANGUAGE: shell
CODE:
cURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret> '

LANGUAGE: shell
CODE:
cURL --request POST 'http://localhost:4444/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request POST 'http://<Router-URL>/se/grid/distributor/node/<node-id>/drain' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Listening for Browsing Context Created Event in Java
DESCRIPTION: Sets up a listener for the browsing context created event in Selenium WebDriver BiDi.

LANGUAGE: Java
CODE:
BiDi bidi = ((HasBiDi) driver).getBiDi();
BrowsingContextInspector contextInspector = new BrowsingContextInspector(bidi);
ContextListener listener = new ContextListener();
contextInspector.onBrowsingContextCreated(listener);

BrowsingContext context = new BrowsingContext(bidi, null, WINDOW);
String id = context.id();
assertNotNull(id);
assertEquals(listener.getId(), id);

----------------------------------------

TITLE: Adding JavaScript Exception Handler in WebDriver BiDi (Ruby)
DESCRIPTION: This snippet demonstrates how to add a JavaScript exception handler in WebDriver BiDi using Ruby. It captures and prints JavaScript exceptions that occur during execution.

LANGUAGE: Ruby
CODE:
driver.add_log_listener(ConsoleLogOptions::EXCEPTION) do |log|
  puts log.text
end

----------------------------------------

TITLE: Handling DOM Mutations with Chrome DevTools Protocol in C#
DESCRIPTION: This snippet illustrates how to handle DOM mutations using the Chrome DevTools Protocol in C#. It uses the ExecuteCdpCommand method to enable DOM mutation observation and capture a snapshot.

LANGUAGE: C#
CODE:
((ChromeDriver)_driver).ExecuteCdpCommand("DOMSnapshot.enable", new Dictionary<string, object>());
((ChromeDriver)_driver).ExecuteCdpCommand("DOMSnapshot.captureSnapshot", new Dictionary<string, object>
{
    { "computedStyles", new List<object>() }
});

----------------------------------------

TITLE: Adding JavaScript Exception Handler in Python
DESCRIPTION: Shows how to add a handler for JavaScript exception events in WebDriver BiDi using Python. The handler can be used to record or take actions when JavaScript exceptions occur.

LANGUAGE: Python
CODE:
driver.add_js_error_listener()

----------------------------------------

TITLE: Browser Navigation Commands in Selenium BiDi
DESCRIPTION: Commands for navigating browser windows including URL navigation, handling readiness states, back/forward navigation, and page reloading.



----------------------------------------

TITLE: Selecting Platform Families in Selenium Grid using Java
DESCRIPTION: This code demonstrates how to set platform capabilities to select specific Windows versions or any Windows operating system using platform families.

LANGUAGE: java
CODE:
capability.setPlatform(Platform.VISTA); //Will return a node with Windows Vista or 2008 Server or Windows 7 Operating System.
capability.setPlatform(Platform.XP);   //Will return a node with Windows XP or 2003 Server or Windows 2000 Professional Operating System.   
capability.setPlatform(Platform.WINDOWS); //Will return a node with ANY Windows Operating System

----------------------------------------

TITLE: Clearing New Session Queue in Selenium Grid
DESCRIPTION: This command clears the new session request queue, rejecting all requests in the queue and returning the total number of deleted requests.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://<Router-URL>/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Enabling Basic Authentication for Grid
DESCRIPTION: Configuration to protect a Grid with basic authentication using a username and password.

LANGUAGE: toml
CODE:
[router]
username = "admin"
password = "myStrongPassword"

----------------------------------------

TITLE: Evaluating Script in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Illustrates evaluating a script in a specific realm using Selenium WebDriver BiDi in Java. It includes getting realms and executing a script in a selected realm.

LANGUAGE: Java
CODE:
List<Realm> realms = ((HasBiDi) driver).getBiDi().getRealms();
Realm windowRealm = realms.stream().filter(r -> r.getType().equals("window")).findFirst().get();

Object result = ((HasBiDi) driver).getBiDi().evaluateScript(
        "document.readyState",
        new ScriptEvaluationOptions().realm(windowRealm));

assertEquals("complete", result);

----------------------------------------

TITLE: Evaluating Script in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Illustrates evaluating a script in a specific realm using Selenium WebDriver BiDi in Java. It includes getting realms and executing a script in a selected realm.

LANGUAGE: Java
CODE:
List<Realm> realms = ((HasBiDi) driver).getBiDi().getRealms();
Realm windowRealm = realms.stream().filter(r -> r.getType().equals("window")).findFirst().get();

Object result = ((HasBiDi) driver).getBiDi().evaluateScript(
        "document.readyState",
        new ScriptEvaluationOptions().realm(windowRealm));

assertEquals("complete", result);

----------------------------------------

TITLE: Specifying Driver Location in Selenium Service
DESCRIPTION: Examples of how to specify the driver location when creating a service instance. This is useful for Selenium versions before 4.6 or for advanced use cases.

LANGUAGE: Java
CODE:
ChromeDriverService service = new ChromeDriverService.Builder()
        .usingDriverExecutable(new File("/path/to/chromedriver"))
        .build();

LANGUAGE: Python
CODE:
service = Service(executable_path='/path/to/chromedriver')

LANGUAGE: C#
CODE:
var service = ChromeDriverService.CreateDefaultService("/path/to/chromedriver");

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new(path: '/path/to/chromedriver')

----------------------------------------

TITLE: Performing Actions in Selenium WebDriver BiDi (JavaScript)
DESCRIPTION: This snippet shows how to perform actions using Selenium WebDriver BiDi in JavaScript. It uses the actions API to move the mouse cursor and perform a click action.

LANGUAGE: JavaScript
CODE:
await driver.actions().move({ x: 100, y: 100 }).click().perform();

----------------------------------------

TITLE: Removing JavaScript Exception Handler in WebDriver BiDi (Ruby)
DESCRIPTION: This snippet shows how to remove a previously added JavaScript exception handler in WebDriver BiDi using Ruby. It requires storing the ID returned when adding the handler.

LANGUAGE: Ruby
CODE:
listener = driver.add_log_listener(ConsoleLogOptions::EXCEPTION) { |log| puts log.text }
driver.remove_log_listener(listener)

----------------------------------------

TITLE: Pinning Scripts with Chrome DevTools Protocol in C#
DESCRIPTION: This snippet shows how to pin a script using the Chrome DevTools Protocol in C#. It uses the ExecuteCdpCommand method to add a script that will be evaluated on new document loads.

LANGUAGE: C#
CODE:
((ChromeDriver)_driver).ExecuteCdpCommand("Page.addScriptToEvaluateOnNewDocument", new Dictionary<string, object>
{
    { "source", "window.elementAdded = e => console.log(e);" }
});

----------------------------------------

TITLE: Connecting to Grid with Basic Auth in Java
DESCRIPTION: Java example demonstrating how to start a session using the configured user and password for basic authentication.

LANGUAGE: java
CODE:
ClientConfig clientConfig = ClientConfig.defaultConfig()
  .baseUrl(new URL("http://localhost:4444"))
  .authenticateAs(new UsernameAndPassword("admin", "myStrongPassword"));
HttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);
RemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());

----------------------------------------

TITLE: Removing JavaScript Exception Handler in Python
DESCRIPTION: Demonstrates how to remove a previously added JavaScript exception handler in Python using the stored handler ID.

LANGUAGE: Python
CODE:
driver.remove_js_error_listener()
driver.remove_all_listeners()

----------------------------------------

TITLE: Configuring Page Margins in Selenium PrintOptions
DESCRIPTION: This code demonstrates how to set custom page margins for printing using Selenium's PrintOptions class. It uses the setPageMargin() method to specify top, bottom, left, and right margins.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
Map<String, Object> margins = new HashMap<>();
margins.put("top", 1);
margins.put("bottom", 0.5);
margins.put("left", 0.5);
margins.put("right", 0.5);
printOptions.setPageMargin(margins);
assertThat(printOptions.getPageMargin()).isEqualTo(margins);

----------------------------------------

TITLE: JavaScript Execution in Java
DESCRIPTION: Example of executing JavaScript code through WebDriver using JavascriptExecutor interface

LANGUAGE: java
CODE:
WebDriver driver; // Assigned elsewhere
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("return document.title");

----------------------------------------

TITLE: Querying New Session Queue Requests in Selenium Grid
DESCRIPTION: Demonstrates how to query the current requests in the New Session Queue of the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ sessionsInfo { sessionQueueRequests } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Customized Logging Node Implementation
DESCRIPTION: Java implementation of a custom Node that extends the base Selenium Grid Node class and adds logging functionality to track session lifecycle events.

LANGUAGE: java
CODE:
package org.seleniumhq.samples;

import java.net.URI;
import java.util.UUID;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.NoSuchSessionException;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.grid.config.Config;
import org.openqa.selenium.grid.data.CreateSessionRequest;
import org.openqa.selenium.grid.data.CreateSessionResponse;
import org.openqa.selenium.grid.data.NodeId;
import org.openqa.selenium.grid.data.NodeStatus;
import org.openqa.selenium.grid.data.Session;
import org.openqa.selenium.grid.log.LoggingOptions;
import org.openqa.selenium.grid.node.HealthCheck;
import org.openqa.selenium.grid.node.Node;
import org.openqa.selenium.grid.node.local.LocalNodeFactory;
import org.openqa.selenium.grid.security.Secret;
import org.openqa.selenium.grid.security.SecretOptions;
import org.openqa.selenium.grid.server.BaseServerOptions;
import org.openqa.selenium.internal.Either;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.remote.http.HttpRequest;
import org.openqa.selenium.remote.http.HttpResponse;
import org.openqa.selenium.remote.tracing.Tracer;

public class DecoratedLoggingNode extends Node {

  private Node node;

  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {
    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);
  }

  public static Node create(Config config) {
    LoggingOptions loggingOptions = new LoggingOptions(config);
    BaseServerOptions serverOptions = new BaseServerOptions(config);
    URI uri = serverOptions.getExternalUri();
    SecretOptions secretOptions = new SecretOptions(config);
    NodeOptions nodeOptions = new NodeOptions(config);
    Duration sessionTimeout = nodeOptions.getSessionTimeout();

    Node node = LocalNodeFactory.create(config);

    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),
        node.getId(),
        uri,
        secretOptions.getRegistrationSecret(),
        sessionTimeout);
    wrapper.node = node;
    return wrapper;
  }

  @Override
  public Either<WebDriverException, CreateSessionResponse> newSession(
      CreateSessionRequest sessionRequest) {
    System.out.println("Before newSession()");
    try {
      return this.node.newSession(sessionRequest);
    } finally {
      System.out.println("After newSession()");
    }
  }

  @Override
  public HttpResponse executeWebDriverCommand(HttpRequest req) {
    try {
      System.out.println("Before executeWebDriverCommand(): " + req.getUri());
      return node.executeWebDriverCommand(req);
    } finally {
      System.out.println("After executeWebDriverCommand()");
    }
  }

  @Override
  public Session getSession(SessionId id) throws NoSuchSessionException {
    try {
      System.out.println("Before getSession()");
      return node.getSession(id);
    } finally {
      System.out.println("After getSession()");
    }
  }

  @Override
  public HttpResponse uploadFile(HttpRequest req, SessionId id) {
    try {
      System.out.println("Before uploadFile()");
      return node.uploadFile(req, id);
    } finally {
      System.out.println("After uploadFile()");
    }
  }

  @Override
  public void stop(SessionId id) throws NoSuchSessionException {
    try {
      System.out.println("Before stop()");
      node.stop(id);
    } finally {
      System.out.println("After stop()");
    }
  }

  @Override
  public boolean isSessionOwner(SessionId id) {
    try {
      System.out.println("Before isSessionOwner()");
      return node.isSessionOwner(id);
    } finally {
      System.out.println("After isSessionOwner()");
    }
  }

  @Override
  public boolean isSupporting(Capabilities capabilities) {
    try {
      System.out.println("Before isSupporting");
      return node.isSupporting(capabilities);
    } finally {
      System.out.println("After isSupporting()");
    }
  }

  @Override
  public NodeStatus getStatus() {
    try {
      System.out.println("Before getStatus()");
      return node.getStatus();
    } finally {
      System.out.println("After getStatus()");
    }
  }

  @Override
  public HealthCheck getHealthCheck() {
    try {
      System.out.println("Before getHealthCheck()");
      return node.getHealthCheck();
    } finally {
      System.out.println("After getHealthCheck()");
    }
  }

  @Override
  public void drain() {
    try {
      System.out.println("Before drain()");
      node.drain();
    } finally {
      System.out.println("After drain()");
    }

  }

  @Override
  public boolean isReady() {
    try {
      System.out.println("Before isReady()");
      return node.isReady();
    } finally {
      System.out.println("After isReady()");
    }
  }
}

----------------------------------------

TITLE: Getting Element CSS Value in Selenium
DESCRIPTION: Shows how to retrieve the computed CSS property value of an element using the getCssValue() method. Returns the value of the specified CSS property as a string.

LANGUAGE: Java
CODE:
String cssValue = driver.findElement(By.id("namedColor")).getCssValue("background-color");

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/colorPage.html")
css_value = driver.find_element(By.ID, "namedColor").value_of_css_property("background-color")

LANGUAGE: C#
CODE:
string cssValue = driver.FindElement(By.Id("namedColor")).GetCssValue("background-color");

LANGUAGE: Ruby
CODE:
driver.find_element(id: 'namedColor').css_value('background-color')

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/colorPage.html')
const element = await driver.findElement(By.id('namedColor'))
const cssValue = await element.getCssValue('background-color')

LANGUAGE: Kotlin
CODE:
val cssValue = driver.findElement(By.id("namedColor")).getCssValue("background-color")

----------------------------------------

TITLE: Network Response Transformation
DESCRIPTION: Code examples demonstrating how to intercept and modify network responses using CDP.

LANGUAGE: Java
CODE:
devTools.addListener(Network.dataReceived(), dataReceived -> {\n    RequestId requestId = dataReceived.getRequestId();\n    Integer dataLength = dataReceived.getDataLength();\n    Integer encodedDataLength = dataReceived.getEncodedDataLength();\n\n    System.out.println("Data Received!" + requestId);\n    System.out.println("Data Length: " + dataLength);\n    System.out.println("Encoded Data Length: " + encodedDataLength);\n});

----------------------------------------

TITLE: Adding Console Message Handler in Python
DESCRIPTION: Demonstrates how to add a handler for console.log events in WebDriver BiDi using Python. The handler can be used to record or take actions on console.log events.

LANGUAGE: Python
CODE:
driver.add_console_listener()

----------------------------------------

TITLE: Waiting for Downloads with Chrome DevTools Protocol in Selenium
DESCRIPTION: Demonstrates how to wait for downloads to complete using Chrome DevTools Protocol in Selenium. This is useful for ensuring that files are fully downloaded before proceeding with further actions.

LANGUAGE: Java
CODE:
devTools.send(Browser.setDownloadBehavior(DownloadBehavior.ALLOW,
        Optional.empty(), Optional.of("/desired/download/path/"), Optional.empty()));
devTools.send(Page.enable());
devTools.addListener(Page.downloadWillBegin(), download -> System.out.println("Download begins"));
devTools.addListener(Page.downloadProgress(), download -> {
    if (download.getState().equals("completed")) {
        System.out.println("Download complete");
    }
});

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Page.setDownloadBehavior',
                  behavior: 'allow',
                  downloadPath: '/path/to/download')

driver.execute_cdp('Page.enable')

driver.on_cdp_event('Page.downloadWillBegin') do |params|
  puts "Download is about to begin"
end

driver.on_cdp_event('Page.downloadProgress') do |params|
  puts "Download complete" if params['state'] == 'completed'
end

----------------------------------------

TITLE: Performing Actions with Selenium WebDriver BiDi in JavaScript
DESCRIPTION: This snippet shows how to perform actions using the Selenium WebDriver BiDi API in JavaScript. It creates a new Actions object and performs a key press action.

LANGUAGE: JavaScript
CODE:
await driver.performActions([
  { type: 'key', id: 'keyboard', actions: [{ type: 'keyDown', value: '\uE015' }] }
]);

----------------------------------------

TITLE: Disowning Handles in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to disown handles in the current browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
((HasBiDi) driver).getBiDi().disownScriptHandles(DisownScriptHandlesOptions.defaultOptions());

----------------------------------------

TITLE: Setting Timeouts for Selenium Server
DESCRIPTION: Shows how to set browser and client timeouts when starting the Selenium server. The browserTimeout controls how long the browser can hang, while the timeout controls how long the client can be disconnected.

LANGUAGE: shell
CODE:
java -jar selenium-server-standalone-{VERSION}.jar -timeout=20 -browserTimeout=60

----------------------------------------

TITLE: Adding Browser Arguments
DESCRIPTION: Demonstrates how to add command line arguments to Edge browser startup

LANGUAGE: Java
CODE:
options.addArguments("--start-maximized");

LANGUAGE: Python
CODE:
options.add_argument("--start-maximized")

----------------------------------------

TITLE: Starting Custom Node with Regular Jar
DESCRIPTION: Command to start a custom Selenium Grid node using a regular jar implementation with external dependencies.

LANGUAGE: bash
CODE:
java -jar selenium-server-4.6.0.jar \
--ext custom_node-1.0-SNAPSHOT.jar node \
--node-implementation org.seleniumhq.samples.DecoratedLoggingNode

----------------------------------------

TITLE: Basic TOML Configuration Structure
DESCRIPTION: Shows the general pattern for TOML configuration files with sections and options.

LANGUAGE: toml
CODE:
[section1]
option1="value"

[section2]
option2=["value1","value2"]
option3=true

----------------------------------------

TITLE: Printing Page in Python
DESCRIPTION: This snippet illustrates how to execute a print operation using Selenium's print_page() method in Python. It generates a PDF representation of the web page.

LANGUAGE: Python
CODE:
print_options = PrintOptions()
base64code = driver.print_page(print_options)
with open("page.pdf", "wb") as file:
    file.write(base64.b64decode(base64code))

----------------------------------------

TITLE: Quitting WebDriver Session in Java
DESCRIPTION: This code demonstrates how to properly quit a WebDriver session in Java.

LANGUAGE: Java
CODE:
driver.quit();

----------------------------------------

TITLE: Adding Console Message Handler in Ruby
DESCRIPTION: Demonstrates how to add a handler for console.log events in WebDriver BiDi using Ruby. The handler can be used to record or take actions on console.log events.

LANGUAGE: Ruby
CODE:
driver.add_console_listener()

----------------------------------------

TITLE: Enabling Safari Automation
DESCRIPTION: Command to enable automation on Safari using the terminal.

LANGUAGE: shell
CODE:
safaridriver --enable

----------------------------------------

TITLE: Querying Node Status in Selenium Grid
DESCRIPTION: This command retrieves the status of a specific node, including availability, session, and slot information. It serves as a health check for the node.

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:5555/status'

----------------------------------------

TITLE: Releasing Actions with Selenium WebDriver BiDi in JavaScript
DESCRIPTION: This snippet shows how to release actions using the Selenium WebDriver BiDi API in JavaScript. It releases all actions that have been performed.

LANGUAGE: JavaScript
CODE:
await driver.releaseActions();

----------------------------------------

TITLE: Installing Selenium WebDriver with Ruby Gem
DESCRIPTION: Command to install Selenium WebDriver using Ruby's gem package manager

LANGUAGE: bash
CODE:
gem install selenium-webdriver

----------------------------------------

TITLE: Clean Session Configuration
DESCRIPTION: Configures IE to clear cache, history and cookies before starting a new session.

LANGUAGE: Java
CODE:
InternetExplorerOptions options = new InternetExplorerOptions();
options.destructivelyEnsureCleanSession();
WebDriver driver = new RemoteWebDriver(options);

LANGUAGE: Python
CODE:
options = webdriver.IeOptions()
options.ensure_clean_session = True

----------------------------------------

TITLE: Distributed Grid Startup Script with PostgreSQL
DESCRIPTION: Shell script for starting a distributed Selenium Grid with PostgreSQL session storage

LANGUAGE: bash
CODE:
SE_VERSION=<current_selenium_version>
JAR_NAME=selenium-server-${SE_VERSION}.jar
PUBLISH="--publish-events tcp://localhost:4442"
SUBSCRIBE="--subscribe-events tcp://localhost:4443"
SESSIONS="--sessions http://localhost:5556"
SESSIONS_QUEUE="--sessionqueue http://localhost:5559"
echo 'Starting Event Bus'
java -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &
echo 'Starting New Session Queue'
java -jar $JAR_NAME sessionqueue --port 5559 &
echo 'Starting Sessions Map'
java -jar $JAR_NAME \
--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \
sessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &
echo 'Starting Distributor'
java -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &
echo 'Starting Router'
java -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &
echo 'Starting Node'
java -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &

----------------------------------------

TITLE: Removing JavaScript Exception Handler in WebDriver BiDi (Python)
DESCRIPTION: This snippet shows how to remove a previously added JavaScript exception handler in WebDriver BiDi using Python. It requires storing the ID returned when adding the handler.

LANGUAGE: Python
CODE:
listener = driver.add_listener(Console.EXCEPTION, lambda log: print(log.text))
driver.remove_listener(listener)

----------------------------------------

TITLE: Creating PostgreSQL Sessions Table Schema
DESCRIPTION: SQL schema definition for creating the sessions_map table to store Selenium Grid session data in PostgreSQL

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS sessions_map(
    session_ids varchar(256),
    session_caps text,
    session_uri varchar(256),
    session_stereotype text,
    session_start varchar(256)
 );

----------------------------------------

TITLE: Capturing Console Logs with CDP in Java
DESCRIPTION: This snippet demonstrates how to capture console logs using Chrome DevTools Protocol in Java with Selenium 4. It requires setting up a DevTools session and enabling console logging.

LANGUAGE: Java
CODE:
devTools.send(Log.enable());

devTools.addListener(Log.entryAdded(),
        logEntry -> {log.info("log: {}", logEntry.getText());}
);

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

----------------------------------------

TITLE: Cancel Authentication Request
DESCRIPTION: Demonstrates how to cancel a request when authentication is required. Requires Selenium WebDriver 4.18 or higher.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.intercept();
interceptor.addIntercept("*")
    .whenAuthRequired(Optional.empty())
    .cancel();
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
driver.get("https://the-internet.herokuapp.com/basic_auth");
wait.until(ExpectedConditions.not(ExpectedConditions.titleIs("")));

----------------------------------------

TITLE: Querying Element Colors in Selenium
DESCRIPTION: Shows how to query an element's color and background color properties and convert them to Color objects.

LANGUAGE: Java
CODE:
Color loginButtonColour = Color.fromString(driver.findElement(By.id("login")).getCssValue("color"));

Color loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id("login")).getCssValue("background-color"));

LANGUAGE: Python
CODE:
login_button_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('color'))

login_button_background_colour = Color.from_string(driver.find_element(By.ID,'login').value_of_css_property('background-color'))

LANGUAGE: Ruby
CODE:
login_button_colour = Color.from_string(driver.find_element(id: 'login').css_value('color'))

login_button_background_colour = Color.from_string(driver.find_element(id: 'login').css_value('background-color'))

LANGUAGE: Kotlin
CODE:
val loginButtonColour = Color.fromString(driver.findElement(By.id("login")).getCssValue("color"))

val loginButtonBackgroundColour = Color.fromString(driver.findElement(By.id("login")).getCssValue("background-color"))

----------------------------------------

TITLE: Adding Network Intercept in Java
DESCRIPTION: Demonstrates how to add a network intercept using Selenium WebDriver BiDi in Java. This allows intercepting and modifying network requests.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("balloon")).to(() -> req -> new HttpResponse().setBody("Intercepted"))
);

----------------------------------------

TITLE: Checking Session Ownership in Selenium Grid
DESCRIPTION: This command checks if a specific session belongs to a particular node, returning true if it does and false otherwise.

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Configuring Firefox Driver Logging
DESCRIPTION: Shows how to configure logging for the Firefox WebDriver, including setting log levels and output locations.

LANGUAGE: Java
CODE:
System.setProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE, "/path/to/logfile");
FirefoxOptions options = new FirefoxOptions();
options.setLogLevel(FirefoxDriverLogLevel.TRACE);

LANGUAGE: Python
CODE:
options = webdriver.FirefoxOptions()
options.log.level = 'trace'
service = webdriver.firefox.service.Service(log_output='/path/to/logfile')

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Firefox::Service.new(log: '/path/to/logfile')
options = Selenium::WebDriver::Firefox::Options.new(log_level: :trace)

----------------------------------------

TITLE: Selenium Grid Configuration for PostgreSQL Sessions
DESCRIPTION: TOML configuration file for Selenium Grid to use PostgreSQL as the session map backend.

LANGUAGE: toml
CODE:
[sessions]
implementation = "org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap"
jdbc-url = "jdbc:postgresql://localhost:5432/selenium_sessions"
jdbc-user = "seluser"
jdbc-password = "seluser"

----------------------------------------

TITLE: Node Status JSON Object Structure
DESCRIPTION: Defines the structure and fields of the Node Status JSON object used in Selenium Grid for node registration and status reporting.

LANGUAGE: json
CODE:
{
  "availability": "string",
  "externalUrl": "string",
  "lastSessionCreated": "integer",
  "maxSessionCount": "integer",
  "nodeId": "string",
  "osInfo": {
    "arch": "string",
    "name": "string",
    "version": "string"
  },
  "slots": [],
  "version": "string"
}

----------------------------------------

TITLE: Handling DOM Mutations with Chrome DevTools Protocol in Python
DESCRIPTION: This snippet demonstrates how to handle DOM mutations using the Chrome DevTools Protocol in Python. It uses the execute_cdp_cmd method to enable DOM mutation observation.

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd("DOMSnapshot.enable", {})
driver.execute_cdp_cmd("DOMSnapshot.captureSnapshot", {"computedStyles": []})

----------------------------------------

TITLE: Configuring Print Page Range in Selenium
DESCRIPTION: Shows how to specify page ranges for printing using PrintOptions

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
Assert.assertNull(printOptions.getPageRanges());
printOptions.setPageRanges(new String[] {\"1-2\"});
Assert.assertArrayEquals(new String[] {\"1-2\"}, printOptions.getPageRanges());

----------------------------------------

TITLE: Handling Realm Created Event with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to handle realm created events using Selenium WebDriver BiDi in Java. It demonstrates setting up an event listener for realm creation.

LANGUAGE: Java
CODE:
CountDownLatch latch = new CountDownLatch(1);
AtomicReference<RealmCreated> realmCreated = new AtomicReference<>();
((HasBiDi) driver).getBiDi().addListener(Script.realmCreated(), event -> {
    realmCreated.set((RealmCreated) event);
    latch.countDown();
});
((HasBiDi) driver).getBiDi().subscribe(new SubscribeOptions(Script.RealmCreatedEvent));

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

assertTrue(latch.await(5, TimeUnit.SECONDS));
assertNotNull(realmCreated.get());

----------------------------------------

TITLE: Setting Page Orientation in Selenium PrintOptions
DESCRIPTION: This snippet demonstrates how to set the page orientation (portrait or landscape) using Selenium's PrintOptions class. It uses the setOrientation() method to configure the print layout.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);
assertThat(printOptions.getOrientation()).isEqualTo(PrintOptions.Orientation.LANDSCAPE);

----------------------------------------

TITLE: Setting Platform Capabilities for Mac OSX and Linux in Java
DESCRIPTION: This code shows how to set platform capabilities for Mac OSX and Linux-based systems using the setPlatform method.

LANGUAGE: java
CODE:
capability.setPlatform(Platform.MAC);   //Set platform to OSX
capability.setPlatform(Platform.LINUX); // Set platform to Linux based systems

----------------------------------------

TITLE: Listening to Response Completed Event in Java
DESCRIPTION: Demonstrates how to listen for the 'Response Completed' network event using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.register(Network.responseCompleted(resp -> {
    System.out.println("Response URL: " + resp.getResponse().getUrl());
    System.out.println("Response Status: " + resp.getResponse().getStatus());
    System.out.println("Response Headers: " + resp.getResponse().getHeaders());
    System.out.println("Response MIME Type: " + resp.getResponse().getMimeType());
}));

----------------------------------------

TITLE: Continuing Authentication without Credentials in JavaScript
DESCRIPTION: Shows how to continue a request blocked at the authRequired phase without providing credentials using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
driver.on('Network.authRequired', (params) => {
  return {
    response: 'Default'
  };
});

----------------------------------------

TITLE: Configuring Firefox Driver Logging
DESCRIPTION: Java command to configure Firefox driver to output logs to a file

LANGUAGE: java
CODE:
java -Dwebdriver.firefox.logfile=/dev/stdout -cp selenium-2.jar <sometest>

----------------------------------------

TITLE: Configuring HTTP Client in Python for Selenium
DESCRIPTION: This snippet shows how to configure the HTTP client for Selenium in Python. It demonstrates setting connection and read timeouts, as well as configuring proxy settings.

LANGUAGE: Python
CODE:
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.proxy import Proxy, ProxyType
from webdriver_manager.chrome import ChromeDriverManager


def test_connection_timeout():
    options = webdriver.ChromeOptions()
    options.set_capability("se:cdpEnabled", True)
    options.set_capability("webdriver.http.factory", "jdk-http-client")
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    try:
        driver.get("https://www.selenium.dev/")
    finally:
        driver.quit()


def test_proxy():
    proxy = Proxy()
    proxy.proxy_type = ProxyType.MANUAL
    proxy.http_proxy = "proxy.com:8080"

    options = webdriver.ChromeOptions()
    options.set_capability("se:cdpEnabled", True)
    options.set_capability("webdriver.http.factory", "jdk-http-client")
    options.set_capability("proxy", proxy)

    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    try:
        driver.get("https://www.selenium.dev/")
    finally:
        driver.quit()


def test_read_timeout():
    options = webdriver.ChromeOptions()
    options.set_capability("se:cdpEnabled", True)
    options.set_capability("webdriver.http.factory", "jdk-http-client")
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    try:
        driver.get("https://www.selenium.dev/")
    finally:
        driver.quit()

----------------------------------------

TITLE: Configuring Selenium Grid Node with JSON
DESCRIPTION: Example JSON configuration file for a Selenium Grid Node, specifying browser capabilities and node configuration options.

LANGUAGE: json
CODE:
{
  "capabilities": [
    {
      "browserName": "firefox",
      "acceptSslCerts": true,
      "javascriptEnabled": true,
      "takesScreenshot": false,
      "firefox_profile": "",
      "browser-version": "27",
      "platform": "WINDOWS",
      "maxInstances": 5,
      "firefox_binary": "",
      "cleanSession": true
    },
    {
      "browserName": "chrome",
      "maxInstances": 5,
      "platform": "WINDOWS",
      "webdriver.chrome.driver": "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
    },
    {
      "browserName": "internet explorer",
      "maxInstances": 1,
      "platform": "WINDOWS",
      "webdriver.ie.driver": "C:/Program Files (x86)/Internet Explorer/iexplore.exe"
    }
  ],
  "configuration": {
    "_comment" : "Configuration for Node",
    "cleanUpCycle": 2000,
    "timeout": 30000,
    "proxy": "org.openqa.grid.selenium.proxy.WebDriverRemoteProxy",
    "port": 5555,
    "host": ip,
    "register": true,
    "hubPort": 4444,
    "maxSession": 5
  }
}

----------------------------------------

TITLE: Retrieving Page Title with JavaScript in Selenium RC Java
DESCRIPTION: Executes JavaScript to get the page title using Selenium RC's getEval method.

LANGUAGE: java
CODE:
String title = selenium.getEval("browserbot.getCurrentWindow().document.title");

----------------------------------------

TITLE: PostgreSQL Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up a PostgreSQL container with initialization script

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  db:
    image: postgres:9.6-bullseye
    restart: always
    environment:
      - POSTGRES_USER=seluser
      - POSTGRES_PASSWORD=seluser
      - POSTGRES_DB=selenium_sessions
    ports:
      - "5432:5432"
    volumes:
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql

----------------------------------------

TITLE: Adding Console Message Handler in WebDriver BiDi (Python)
DESCRIPTION: This snippet demonstrates how to add a console message handler in WebDriver BiDi using Python. It requires the WebDriver BiDi feature to be enabled in Options.

LANGUAGE: Python
CODE:
from selenium.webdriver.common.bidi.console import Console

driver.add_listener(Console.ALL, lambda log: print(log.text))

----------------------------------------

TITLE: Preloading a Script with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to preload a script using Selenium WebDriver BiDi. This allows for script preparation before execution.

LANGUAGE: Java
CODE:
String scriptId = scriptManager.preloadScript("function add(a, b) { return a + b; }");

----------------------------------------

TITLE: Setting Print Scale in Java
DESCRIPTION: This snippet shows how to set the print scale using Selenium's PrintOptions in Java. It uses the setScale() method to adjust the scaling of the printed page.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
Double scale = 0.5;
printOptions.setScale(scale);
assertThat(printOptions.getScale()).isEqualTo(scale);

----------------------------------------

TITLE: Cancelling Authentication Request in JavaScript
DESCRIPTION: Demonstrates how to cancel a request blocked at the authRequired phase using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
driver.on('Network.authRequired', (params) => {
  return {
    response: 'CancelAuth'
  };
});

----------------------------------------

TITLE: Implementing Basic Authentication with CDP in Selenium
DESCRIPTION: This snippet demonstrates how to handle basic authentication by inserting credentials into the header using Chrome DevTools Protocol.

LANGUAGE: Java
CODE:
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));
devTools.send(Network.setExtraHTTPHeaders(Collections.singletonMap("Authorization", "Basic ")));

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Network.enable', {})
driver.execute_cdp_cmd('Network.setExtraHTTPHeaders', {'headers': {'Authorization': 'Basic '}})

LANGUAGE: C#
CODE:
await _devTools.SendAsync(Network.Enable(new NetworkEnableCommandSettings()));

var headers = new Dictionary<string, string>
{
    { "Authorization", "Basic " }
};
await _devTools.SendAsync(Network.SetExtraHTTPHeaders(new NetworkSetExtraHTTPHeadersCommandSettings
{
    Headers = headers
}));

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Network.enable')
driver.execute_cdp('Network.setExtraHTTPHeaders', headers: { 'Authorization': 'Basic ' })

----------------------------------------

TITLE: Setting Up Firefox Profile with Logging
DESCRIPTION: Java code to configure Firefox profile with console logging to file

LANGUAGE: java
CODE:
FirefoxProfile p = new FirefoxProfile();
p.setPreference("webdriver.log.file", "/tmp/firefox_console");
WebDriver driver = new FirefoxDriver(p);
...

----------------------------------------

TITLE: Configuring HTTP Client in Python for Selenium
DESCRIPTION: This Python code snippet demonstrates how to configure HTTP client parameters for Selenium WebDriver. It shows setting connection and read timeouts, as well as configuring a proxy server.

LANGUAGE: Python
CODE:
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions


def test_configure_http_client():
    options = ChromeOptions()
    client_config = {
        "timeouts": {
            "connect": 60000,
            "read": 60000
        }
    }
    options.set_capability("se:clientConfig", client_config)

    driver = webdriver.Chrome(options=options)

    assert driver is not None

    driver.quit()


def test_configure_proxy():
    options = ChromeOptions()
    client_config = {
        "proxy": {
            "proxyType": "manual",
            "httpProxy": "localhost:8080",
            "sslProxy": "localhost:8080"
        }
    }
    options.set_capability("se:clientConfig", client_config)

    driver = webdriver.Chrome(options=options)

    assert driver is not None

    driver.quit()

----------------------------------------

TITLE: Sample HTML Test Suite File
DESCRIPTION: An example HTML file defining a Selenium IDE test suite containing links to 4 test cases.

LANGUAGE: html
CODE:
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Sample Selenium Test Suite</title>
    </head>
    <body>
        <table cellpadding="1" cellspacing="1" border="1">
            <thead>
                <tr><td>Test Cases for De Anza A-Z Directory Links</td></tr>
            </thead>
        <tbody>
            <tr><td><a href="./a.html">A Links</a></td></tr>
            <tr><td><a href="./b.html">B Links</a></td></tr>
            <tr><td><a href="./c.html">C Links</a></td></tr>
            <tr><td><a href="./d.html">D Links</a></td></tr>
        </tbody>
        </table>
    </body>
</html>

----------------------------------------

TITLE: Quitting WebDriver Session in Python
DESCRIPTION: This snippet shows how to quit a WebDriver session in Python.

LANGUAGE: Python
CODE:
driver.quit()

----------------------------------------

TITLE: Deleting a Session from a Node in Selenium Grid
DESCRIPTION: This command terminates a WebDriver session, quits the driver, and removes it from the active session collection on a specific node.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:5555/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://<node-URL>/se/grid/node/session/<session-id>' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Adding Network Intercept in Java and JavaScript
DESCRIPTION: Demonstrates how to add a network intercept using Selenium WebDriver BiDi in Java and JavaScript. This allows intercepting and modifying network requests.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = new NetworkInterceptor(
    driver,
    Route.matching(req -> req.getUri().contains("hello.html")).to(() -> req -> new HttpResponse().setBody("Goodbye!")));

LANGUAGE: JavaScript
CODE:
await driver.setNetworkConditions({ offline: false, latency: 10, download_throughput: 100, upload_throughput: 100 });

----------------------------------------

TITLE: Getting Browsing Context Realms by Type with JavaScript
DESCRIPTION: Shows how to retrieve realms of a specific type for a browsing context using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms(await driver.getWindowHandle(), 'window')

----------------------------------------

TITLE: Getting the Active Element in Kotlin
DESCRIPTION: Shows how to get the currently active (focused) element and retrieve its attributes using Selenium WebDriver in Kotlin.

LANGUAGE: Kotlin
CODE:
import org.openqa.selenium.By
import org.openqa.selenium.chrome.ChromeDriver

fun main() {
    val driver = ChromeDriver()
    try {
        driver.get("https://www.google.com")
        driver.findElement(By.cssSelector("[name='q']")).sendKeys("webElement")

        // Get attribute of current active element
        val attr = driver.switchTo().activeElement().getAttribute("title")
        print(attr)
    } finally {
        driver.quit()
    }
}

----------------------------------------

TITLE: Sample Selenium Test Suite HTML
DESCRIPTION: HTML structure for defining a Selenium test suite with multiple test cases.

LANGUAGE: html
CODE:
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Sample Selenium Test Suite</title>
    </head>
    <body>
        <table cellpadding="1" cellspacing="1" border="1">
            <thead>
                <tr><td>Test Cases for De Anza A-Z Directory Links</td></tr>
            </thead>
        <tbody>
            <tr><td><a href="./a.html">A Links</a></td></tr>
            <tr><td><a href="./b.html">B Links</a></td></tr>
            <tr><td><a href="./c.html">C Links</a></td></tr>
            <tr><td><a href="./d.html">D Links</a></td></tr>
        </tbody>
        </table>
    </body>
</html>

----------------------------------------

TITLE: Listening to 'Response Started' Event in Java and JavaScript
DESCRIPTION: Shows how to listen for the 'Response Started' network event in Java and JavaScript. This event is triggered when the response headers have been received.

LANGUAGE: Java
CODE:
driver.addListener(Network.responseStarted(), event -> {
    System.out.println("Response URL: " + event.getResponse().getUrl());
    System.out.println("Response Status: " + event.getResponse().getStatus());
    System.out.println("Response Headers: " + event.getResponse().getHeaders());
});

LANGUAGE: JavaScript
CODE:
await driver.on('Network.responseStarted', (params) => {
  console.log('Response URL:', params.response.url);
  console.log('Response Status:', params.response.status);
  console.log('Response Headers:', params.response.headers);
});

----------------------------------------

TITLE: Adding Console Message Handler in Ruby
DESCRIPTION: This code shows how to add a console message handler using WebDriver BiDi in Ruby. It uses the driver's on_log method to register a handler for console.log events.

LANGUAGE: Ruby
CODE:
driver.on_log(LogType::CONSOLE) do |log|
  puts "Console log: #{log.text}"
end

----------------------------------------

TITLE: Selenium HTML Runner Execution Output
DESCRIPTION: Example output from running Selenium HTML-runner showing initialization logs, Gecko driver startup, and test execution results.

LANGUAGE: shell
CODE:
[user@localhost ~]$ xvfb-run java -Dwebdriver.gecko.driver=/home/mmasek/geckodriver.0.18.0 -jar selenium-html-runner-3.7.1.jar -htmlSuite "*firefox" "https://YOUR-BASE-URL" "$(pwd)/testsuite.html" "results.html" ; grep result: -A1 results.html/firefox.results.html
Multi-window mode is longer used as an option and will be ignored.
1510061109691   geckodriver     INFO    geckodriver 0.18.0
1510061109708   geckodriver     INFO    Listening on 127.0.0.1:2885
1510061110162   geckodriver::marionette INFO    Starting browser /usr/bin/firefox with args ["-marionette"]
1510061111084   Marionette      INFO    Listening on port 43229
1510061111187   Marionette      WARN    TLS certificate errors will be ignored for this session
Nov 07, 2017 1:25:12 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
2017-11-07 13:25:12.714:INFO::main: Logging initialized @3915ms to org.seleniumhq.jetty9.util.log.StdErrLog
2017-11-07 13:25:12.804:INFO:osjs.Server:main: jetty-9.4.z-SNAPSHOT
2017-11-07 13:25:12.822:INFO:osjsh.ContextHandler:main: Started o.s.j.s.h.ContextHandler@87a85e1{/tests,null,AVAILABLE}
2017-11-07 13:25:12.843:INFO:osjs.AbstractConnector:main: Started ServerConnector@52102734{HTTP/1.1,[http/1.1]}{0.0.0.0:31892}
2017-11-07 13:25:12.843:INFO:osjs.Server:main: Started @4045ms
Nov 07, 2017 1:25:13 PM org.openqa.selenium.server.htmlrunner.CoreTestCase run
INFO: |open | /auth_mellon.php |  |
Nov 07, 2017 1:25:14 PM org.openqa.selenium.server.htmlrunner.CoreTestCase run
INFO: |waitForPageToLoad | 3000 |  |
.
.
.etc

<td>result:</td>
<td>PASS</td>

----------------------------------------

TITLE: Handling JavaScript Confirms in Java with Selenium WebDriver
DESCRIPTION: This code snippet demonstrates how to interact with a JavaScript confirm dialog using Selenium WebDriver in Java. It clicks a link to trigger the confirm, waits for it to appear, retrieves the confirm text, and then dismisses the confirm.

LANGUAGE: Java
CODE:
//Click the link to activate the alert
driver.findElement(By.linkText("See a sample confirm")).click();

//Wait for the alert to be displayed
Alert alert = wait.until(ExpectedConditions.alertIsPresent());

//Store the alert in a variable for reuse
String text = alert.getText();

//Press the Cancel button
alert.dismiss();

----------------------------------------

TITLE: JavaScript Functions for Selenium IDE Test Page
DESCRIPTION: JavaScript functions used in a sample HTML page for testing Selenium IDE features like alerts, confirms, and prompts

LANGUAGE: JavaScript
CODE:
function output(resultText){
  document.getElementById('output').childNodes[0].nodeValue=resultText;
}

function show_confirm(){
  var confirmation=confirm("Chose an option.");
  if (confirmation==true){
    output("Confirmed.");
  }
  else{
    output("Rejected!");
  }
}

function show_alert(){
  alert("I'm blocking!");
  output("Alert is gone.");
}
function show_prompt(){
  var response = prompt("What's the best web QA tool?","Selenium");
  output(response);
}
function open_window(windowName){
  window.open("newWindow.html",windowName);
}

----------------------------------------

TITLE: Invoking Selenium Manager to Use Chrome Beta
DESCRIPTION: Example of using Selenium Manager to download and manage Chrome beta version, including the appropriate chromedriver.

LANGUAGE: shell
CODE:
$ ./selenium-manager --browser chrome --browser-version beta --debug
DEBUG   chromedriver not found in PATH
DEBUG   chrome not found in PATH
DEBUG   chrome beta not found in the system
DEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
DEBUG   Required browser: chrome 117.0.5938.22
DEBUG   Downloading chrome 117.0.5938.22 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/117.0.5938.22/win64/chrome-win64.zip
DEBUG   chrome 117.0.5938.22 has been downloaded at C:\Users\boni\.cache\selenium\chrome\win64\117.0.5938.22\chrome.exe
DEBUG   Discovering versions from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG   Required driver: chromedriver 117.0.5938.22
DEBUG   Downloading chromedriver 117.0.5938.22 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/117.0.5938.22/win64/chromedriver-win64.zip
INFO    Driver path: C:\Users\boni\.cache\selenium\chromedriver\win64\117.0.5938.22\chromedriver.exe
INFO    Browser path: C:\Users\boni\.cache\selenium\chrome\win64\117.0.5938.22\chrome.exe

----------------------------------------

TITLE: Pinning Scripts with Chrome DevTools Protocol in Java
DESCRIPTION: This snippet demonstrates how to pin a script using the Chrome DevTools Protocol in Java. It uses the addScriptToEvaluateOnNewDocument method to add a script that will be evaluated on new document loads.

LANGUAGE: Java
CODE:
((ChromeDriver) driver).executeCdpCommand("Page.addScriptToEvaluateOnNewDocument",
        Map.of("source", "window.elementAdded = e => console.log(e);"));

----------------------------------------

TITLE: Window Management Operations
DESCRIPTION: Methods for managing window size, position and state including maximize, minimize and fullscreen.

LANGUAGE: Java
CODE:
driver.manage().window().maximize();
driver.manage().window().minimize();
driver.manage().window().fullscreen();

----------------------------------------

TITLE: Handling Realm Created Event with Java
DESCRIPTION: Demonstrates handling a realm created event using Selenium WebDriver BiDi in Java. This example shows subscribing to the event, triggering a realm creation, and asserting the event details.

LANGUAGE: Java
CODE:
CompletableFuture<RealmInfo> future = new CompletableFuture<>();
driver.onRealmCreated(event -> future.complete(event));

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

RealmInfo event = future.get(5, TimeUnit.SECONDS);

assertThat(event.getRealm().getType()).isEqualTo(RealmType.WINDOW);
assertThat(event.getRealm().getOrigin()).contains("selenium.dev");
assertThat(event.getBrowsingContext()).isNotNull();
assertThat(event.getBrowsingContext().getId()).isNotEmpty();

----------------------------------------

TITLE: Executing JavaScript to Scroll Element into View in Selenium
DESCRIPTION: This snippet demonstrates how to use WebDriver's executeScript method to scroll an element into view when it's obscured by other elements like navbars.

LANGUAGE: python
CODE:
WebDriver.executeScript('window.scrollBy(0,-250)')

----------------------------------------

TITLE: Failing Network Request in Selenium WebDriver
DESCRIPTION: This code shows how to fail a network request using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addIntercept("*", builder -> builder.failRequest());
driver.get(baseUrl);
assertThat(driver.getTitle()).isEqualTo("The Internet");

----------------------------------------

TITLE: Querying Node and Grid URIs in Selenium Grid
DESCRIPTION: Shows how to query the URIs of each node and the grid in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query": "{ nodesInfo { nodes { uri } } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Initializing BiDi in .NET
DESCRIPTION: Example of initializing Bidirectional WebDriver Protocol (BiDi) in .NET for inspecting browser contexts and receiving real-time events.

LANGUAGE: C#
CODE:
var bidi = await driver.AsBiDiAsync();

----------------------------------------

TITLE: Handling JavaScript Confirms in Python with Selenium WebDriver
DESCRIPTION: This code snippet shows how to handle a JavaScript confirm dialog using Selenium WebDriver in Python. It clicks a link to trigger the confirm, waits for it to appear, retrieves the confirm text, and then dismisses the confirm.

LANGUAGE: Python
CODE:
# Click the link to activate the alert
driver.find_element(By.LINK_TEXT, "See a sample confirm").click()

# Wait for the alert to be displayed
alert = wait.until(expected_conditions.alert_is_present())

# Store the alert in a variable for reuse
text = alert.text

# Press the Cancel button
alert.dismiss()

----------------------------------------

TITLE: Checking Linux Environment Dependencies
DESCRIPTION: Shell commands to verify the required package installations including Xvfb, Java 1.8, and Firefox on CentOS Linux.

LANGUAGE: shell
CODE:
[user@localhost ~]$ cat /etc/redhat-release
CentOS Linux release 7.4.1708 (Core)

[user@localhost ~]$ rpm -qa | egrep -i "xvfb|java-1.8|firefox"
xorg-x11-server-Xvfb-1.19.3-11.el7.x86_64
firefox-52.4.0-1.el7.centos.x86_64
java-1.8.0-openjdk-1.8.0.151-1.b12.el7_4.x86_64
java-1.8.0-openjdk-headless-1.8.0.151-1.b12.el7_4.x86_64

----------------------------------------

TITLE: Accessing Selenium Grid Router Component Help
DESCRIPTION: This command provides component-specific configuration information for the Router role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar router --help

----------------------------------------

TITLE: Quitting WebDriver Session in Kotlin
DESCRIPTION: This snippet illustrates how to quit a WebDriver session in Kotlin.

LANGUAGE: Kotlin
CODE:
driver.quit()

----------------------------------------

TITLE: Taking Screenshots
DESCRIPTION: Captures screenshots of the current browser window or specific elements.

LANGUAGE: Java
CODE:
File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(scrFile, new File("./image.png"));

----------------------------------------

TITLE: Accessing WebElement Value in Selenium Java
DESCRIPTION: Demonstrates the change from deprecated getValue() method to the new getAttribute() method for retrieving form element values.

LANGUAGE: java
CODE:
WebElement.getAttribute("value")

----------------------------------------

TITLE: Starting Selenium Grid in Standalone Mode
DESCRIPTION: Command to start Selenium Grid in Standalone mode, which combines all Grid components into a single process.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar standalone

----------------------------------------

TITLE: Installing Required Linux Packages
DESCRIPTION: Shell commands showing how to verify installed packages including Xvfb, Java 1.8, and Firefox on CentOS Linux.

LANGUAGE: shell
CODE:
[user@localhost ~]$ cat /etc/redhat-release
CentOS Linux release 7.4.1708 (Core)

[user@localhost ~]$ rpm -qa | egrep -i "xvfb|java-1.8|firefox"
xorg-x11-server-Xvfb-1.19.3-11.el7.x86_64
firefox-52.4.0-1.el7.centos.x86_64
java-1.8.0-openjdk-1.8.0.151-1.b12.el7_4.x86_64
java-1.8.0-openjdk-headless-1.8.0.151-1.b12.el7_4.x86_64

----------------------------------------

TITLE: Evaluating Script in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to evaluate a script in the current browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
Object result = ((HasBiDi) driver).getBiDi().evaluateScript(
        "1 + 2",
        ScriptEvaluationOptions.defaultOptions());
assertEquals(3L, result);

----------------------------------------

TITLE: Basic CDP Command Execution in Java
DESCRIPTION: Demonstrates how to execute a basic CDP command in Java using Selenium's DevTools interface. The example shows enabling network conditions and setting offline mode.

LANGUAGE: java
CODE:
DevTools devTools = ((HasDevTools) driver).getDevTools();
devTools.createSession();
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));
devTools.send(Network.setOfflineState(true));
driver.get("https://www.selenium.dev/");
assertThat(driver.getTitle()).isEqualTo("Chrome Offline");

----------------------------------------

TITLE: Basic CDP Command Execution in Java
DESCRIPTION: Demonstrates how to execute a basic CDP command in Java using Selenium's DevTools interface. The example shows enabling network conditions and setting offline mode.

LANGUAGE: java
CODE:
DevTools devTools = ((HasDevTools) driver).getDevTools();
devTools.createSession();
devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));
devTools.send(Network.setOfflineState(true));
driver.get("https://www.selenium.dev/");
assertThat(driver.getTitle()).isEqualTo("Chrome Offline");

----------------------------------------

TITLE: Importing Selenium WebDriver BiDi APIs (4.19 and above)
DESCRIPTION: This snippet demonstrates the updated import statements for Selenium WebDriver BiDi APIs in version 4.19 and above. The imports now include the 'module' package in the path, reflecting the structural changes made to address circular dependencies and follow Bazel best practices.

LANGUAGE: Java
CODE:
import org.openqa.selenium.bidi.module.LogInspector;
import org.openqa.selenium.bidi.module.BrowsingContextInspector;
import org.openqa.selenium.bidi.module.Input;
import org.openqa.selenium.bidi.module.Script;
import org.openqa.selenium.bidi.module.Network;

----------------------------------------

TITLE: Handling JavaScript Prompts in Java with Selenium WebDriver
DESCRIPTION: This code snippet demonstrates how to interact with a JavaScript prompt using Selenium WebDriver in Java. It clicks a link to trigger the prompt, waits for it to appear, sends keys to the prompt, and then accepts the prompt.

LANGUAGE: Java
CODE:
//Click the link to activate the alert
driver.findElement(By.linkText("See a sample prompt")).click();

//Wait for the alert to be displayed and store it in a variable
Alert alert = wait.until(ExpectedConditions.alertIsPresent());

//Type your message
alert.sendKeys("Selenium");

//Press the OK button
alert.accept();

//Run the prompt twice
driver.findElement(By.linkText("See a sample prompt")).click();
alert = wait.until(ExpectedConditions.alertIsPresent());

----------------------------------------

TITLE: Creating a new WebDriver session
DESCRIPTION: Send a POST request to create a new WebDriver session. The server should attempt to create a session that most closely matches the desired and required capabilities.

LANGUAGE: HTTP
CODE:
POST /session

Request Body:
{
  "desiredCapabilities": {
    // Capabilities JSON object
  },
  "requiredCapabilities": {
    // Capabilities JSON object (optional)
  }
}

----------------------------------------

TITLE: Removing Console Message Handler in WebDriver BiDi (Ruby)
DESCRIPTION: This snippet shows how to remove a previously added console message handler in WebDriver BiDi using Ruby. It requires storing the ID returned when adding the handler.

LANGUAGE: Ruby
CODE:
listener = driver.add_log_listener(ConsoleLogOptions::ALL) { |log| puts log.text }
driver.remove_log_listener(listener)

----------------------------------------

TITLE: Adding Console Message Handler - Ruby
DESCRIPTION: Shows how to add a handler for console.log events in Ruby using WebDriver BiDi.

LANGUAGE: ruby
CODE:
driver.add_console_listener

----------------------------------------

TITLE: Getting Current URL in Selenium WebDriver
DESCRIPTION: Shows how to get the current URL from the browser's address bar using Selenium WebDriver. This method returns the complete URL of the currently loaded page.

LANGUAGE: Java
CODE:
driver.getCurrentUrl()

LANGUAGE: Python
CODE:
driver.current_url

LANGUAGE: C#
CODE:
driver.Url

LANGUAGE: Ruby
CODE:
driver.current_url

LANGUAGE: JavaScript
CODE:
await driver.getCurrentUrl()

LANGUAGE: Kotlin
CODE:
driver.currentUrl

----------------------------------------

TITLE: Displaying Java WebDriver Error for Missing ChromeDriver
DESCRIPTION: This snippet shows a common error message users encounter when trying to run Selenium without properly configuring the ChromeDriver.

LANGUAGE: java
CODE:
java.lang.IllegalStateException: The path to the driver executable must be set by the webdriver.chrome.driver \nsystem property; for more information, see https://chromedriver.chromium.org/. The latest version can be \ndownloaded from https://chromedriver.chromium.org/downloads

----------------------------------------

TITLE: Customized Driver Configuration
DESCRIPTION: Detailed configuration for custom browser installations including Firefox Nightly and Chrome Beta/Dev versions.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false
[[node.driver-configuration]]
max-sessions = 100
display-name = "Firefox Nightly"
stereotype = "{\"browserName\": \"firefox\", \"browserVersion\": \"93\", \"platformName\": \"MAC\", \"moz:firefoxOptions\": {\"binary\": \"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\"}}"
[[node.driver-configuration]]
display-name = "Chrome Beta"
stereotype = "{\"browserName\": \"chrome\", \"browserVersion\": \"94\", \"platformName\": \"MAC\", \"goog:chromeOptions\": {\"binary\": \"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\"}}"
[[node.driver-configuration]]
display-name = "Chrome Dev"
stereotype = "{\"browserName\": \"chrome\", \"browserVersion\": \"95\", \"platformName\": \"MAC\", \"goog:chromeOptions\": {\"binary\": \"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\"}}"
webdriver-executable = '/path/to/chromedriver/95/chromedriver'

----------------------------------------

TITLE: Preloading a Script with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to preload a script using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
PreloadScript preloadScript = ((HasBiDi) driver).getBiDi().preloadScript("() => 'preloaded script'");

----------------------------------------

TITLE: Removing a Virtual Authenticator in Java
DESCRIPTION: This snippet demonstrates how to remove a previously added virtual authenticator from the WebDriver session.

LANGUAGE: Java
CODE:
((HasVirtualAuthenticator) driver).removeVirtualAuthenticator(authenticator);

----------------------------------------

TITLE: Running Selenium Manager for Chrome Driver Management
DESCRIPTION: This shell command demonstrates how to use Selenium Manager to manage Chrome and chromedriver, with debug output for detailed information.

LANGUAGE: shell
CODE:
> selenium-manager --browser chrome --debug

----------------------------------------

TITLE: ThreadGuard Exception Output in Selenium Java
DESCRIPTION: This code snippet shows the exception output when ThreadGuard detects a thread safety violation. It occurs when a WebDriver instance protected by ThreadGuard is accessed from a different thread than the one that created it.

LANGUAGE: text
CODE:
Exception in thread "Thread-1" org.openqa.selenium.WebDriverException:
Thread safety error; this instance of WebDriver was constructed
on thread main (id 1)and is being accessed by thread Thread-1 (id 24)
This is not permitted and *will* cause undefined behaviour

----------------------------------------

TITLE: Cloning Selenium Documentation Repository
DESCRIPTION: Commands to fork and clone the Selenium documentation repository locally.

LANGUAGE: shell
CODE:
% git clone git@github.com:seleniumhq/seleniumhq.github.io.git
% cd seleniumhq.github.io

----------------------------------------

TITLE: Implementing WebDriver-backed Selenium in Java
DESCRIPTION: Demonstrates how to create a WebDriver implementation using Firefox driver and perform Selenium actions. Shows creation of WebDriverBackedSelenium instance and basic web interactions.

LANGUAGE: java
CODE:
// You may use any WebDriver implementation. Firefox is used here as an example
WebDriver driver = new FirefoxDriver();

// A "base url", used by selenium to resolve relative URLs
String baseUrl = "http://www.google.com";

// Create the Selenium implementation
Selenium selenium = new WebDriverBackedSelenium(driver, baseUrl);

// Perform actions with selenium
selenium.open("http://www.google.com");
selenium.type("name=q", "cheese");
selenium.click("name=btnG");

// And get the underlying WebDriver implementation back. This will refer to the
// same WebDriver instance as the "driver" variable above.
WebDriver driverInstance = ((WebDriverBackedSelenium) selenium).getUnderlyingWebDriver();

----------------------------------------

TITLE: Implementing DOM Mutation Handlers with CDP
DESCRIPTION: Shows implementation of DOM Mutation Handlers using Chrome DevTools Protocol across different programming languages. This functionality allows monitoring and handling DOM changes.

LANGUAGE: Java
CODE:
driver.executeCdpCommand("Runtime.addBinding", Map.of("name", "notifyMutation"));

LANGUAGE: Python
CODE:
driver.execute_cdp_cmd('Runtime.addBinding', {
    'name': 'notifyMutation'
})

LANGUAGE: CSharp
CODE:
driver.ExecuteCdpCommand("Runtime.addBinding", new Dictionary<string, object>
{
    { "name", "notifyMutation" }
});

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Runtime.addBinding', name: 'notifyMutation')

----------------------------------------

TITLE: Removing All Credentials from a Virtual Authenticator in Java
DESCRIPTION: This snippet demonstrates how to remove all credentials from a virtual authenticator.

LANGUAGE: Java
CODE:
byte[] credentialId = {1, 2, 3, 4};
authenticator.addCredential(new Credential(credentialId, "example.com", null, null, null));

List<Credential> credentialList = authenticator.getCredentials();
assertThat(credentialList.size()).isEqualTo(1);

authenticator.removeAllCredentials();
credentialList = authenticator.getCredentials();
assertThat(credentialList.size()).isEqualTo(0);

----------------------------------------

TITLE: Running Selenium Manager for Edge Beta on Windows (Admin)
DESCRIPTION: This example demonstrates executing Selenium Manager for Edge Beta on Windows with administrator privileges. It shows the successful download, installation, and setup of Edge Beta and its driver.

LANGUAGE: bash
CODE:
./selenium-manager --debug --browser edge --browser-version beta

----------------------------------------

TITLE: Starting Custom Node with Uber JAR
DESCRIPTION: Command to start a custom Selenium Grid Node using an uber jar implementation.

LANGUAGE: bash
CODE:
java -jar custom_node-server.jar node \
--node-implementation org.seleniumhq.samples.DecoratedLoggingNode

----------------------------------------

TITLE: Starting Local Documentation Server
DESCRIPTION: Commands to navigate to the documentation directory and start the Hugo server for local preview.

LANGUAGE: shell
CODE:
% cd website_and_docs
% hugo server

----------------------------------------

TITLE: Calling Function in Sandbox with JavaScript
DESCRIPTION: Shows how to call a function in a sandbox environment using Selenium WebDriver BiDi in JavaScript. This example demonstrates creating a sandbox and executing a script within it.

LANGUAGE: JavaScript
CODE:
const sandbox = new Sandbox()
const result = await driver.executeScript('const num1 = arguments[0]; const num2 = arguments[1]; return num1 + num2;', sandbox, [31, 11])
assert.strictEqual(result, 42)

----------------------------------------

TITLE: Executing Single JavaScript Test
DESCRIPTION: Command to run a specific JavaScript test script example

LANGUAGE: bash
CODE:
node example_script.spec.js

----------------------------------------

TITLE: Executing Selenium Manager for Chrome on Linux with Chromium
DESCRIPTION: This snippet shows running Selenium Manager for Chrome on a Linux system where Chromium is installed via snap. It demonstrates how Selenium Manager detects and uses the Chromium installation when Chrome is not available.

LANGUAGE: bash
CODE:
./selenium-manager --browser chrome --debug

----------------------------------------

TITLE: Python Selenium Manager Usage Example
DESCRIPTION: Shows how to use Selenium Manager in Python compared to previous manual driver management

LANGUAGE: python
CODE:
from webdriver_manager.chrome import ChromeDriverManager
driver = webdriver.Chrome(ChromeDriverManager().install())

LANGUAGE: python
CODE:
driver = webdriver.Chrome()
# Selenium Manager handles driver management automatically

----------------------------------------

TITLE: Configuring Git User Information
DESCRIPTION: Commands to configure Git with user name and email for commit attribution.

LANGUAGE: shell
CODE:
% git config --global user.name 'Santa Claus'
% git config --global user.email 'santa@example.com'

----------------------------------------

TITLE: Browser-Specific Node Configuration
DESCRIPTION: Configures a node with specific browsers enabled and session limits.

LANGUAGE: toml
CODE:
[node]
drivers = ["chrome", "firefox"]
max-sessions = 3

----------------------------------------

TITLE: Adding Pointer Event Attributes to Pen Actions
DESCRIPTION: Shows how to configure advanced pen properties like pressure, tilt, and twist for pen actions. These attributes allow for more detailed stylus input simulation. Requires Selenium WebDriver 4.2 or higher.

LANGUAGE: Java
CODE:
Pen pen = new Pen("default pen");
Actions actions = new Actions(driver);

actions.setActivePointer(PointerInput.Kind.PEN, "default pen")
    .moveToElement(element)
    .clickAndHold()
    .setProperties(PenProperties.builder()
        .pressure(0.25)
        .tiltX(-27)
        .tiltY(10)
        .twist(12)
        .build())
    .release()
    .perform();

LANGUAGE: Python
CODE:
pen = Pen("default pen")
actions = ActionChains(driver)

actions.set_active_pointer(PointerInput.Kind.PEN, "default pen")\
    .move_to_element(element)\
    .click_and_hold()\
    .pointer_down(pressure=0.25, tilt_x=-27, tilt_y=10, twist=12)\
    .release()\
    .perform()

----------------------------------------

TITLE: Running Docker Selenium Standalone with Beta/Dev Channel Browsers
DESCRIPTION: Commands to run Docker Selenium standalone containers with Chrome, Firefox, and Edge browsers on Beta and Dev channels. Each command maps ports 4444 and 7900, and sets shared memory size to 2GB.

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:beta

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-chrome:dev

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:beta

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-firefox:dev

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:beta

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 7900:7900 --shm-size 2g selenium/standalone-edge:dev

----------------------------------------

TITLE: Starting Custom Node with Regular JAR
DESCRIPTION: Command to start a custom Selenium Grid Node using a regular jar with external dependencies.

LANGUAGE: bash
CODE:
java -jar selenium-server-4.6.0.jar \
--ext custom_node-1.0-SNAPSHOT.jar node \
--node-implementation org.seleniumhq.samples.DecoratedLoggingNode

----------------------------------------

TITLE: Handling Script Message Event with Java
DESCRIPTION: Demonstrates handling a script message event using Selenium WebDriver BiDi in Java. This example shows subscribing to the event, triggering a message, and asserting the received message.

LANGUAGE: Java
CODE:
CompletableFuture<ScriptMessage> future = new CompletableFuture<>();
driver.onScriptMessage(event -> future.complete(event));

driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

driver.executeScript("console.log('Hello, World!')");

ScriptMessage event = future.get(5, TimeUnit.SECONDS);

assertThat(event.getChannel()).isEqualTo("log");
assertThat(event.getSource().getContext().getType()).isEqualTo(ContextType.BROWSING_CONTEXT);
assertThat(event.getSource().getRealm().getType()).isEqualTo(RealmType.WINDOW);
assertThat(event.getText()).isEqualTo("Hello, World!");
assertThat(event.getLevel()).isEqualTo(LogLevel.INFO);
assertThat(event.getType()).isEqualTo(MessageType.CONSOLE_API);

----------------------------------------

TITLE: Getting Browsing Context Realms with JavaScript
DESCRIPTION: Shows how to retrieve realms for a specific browsing context using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
const realms = await driver.getRealms(await driver.getWindowHandle())
assert.ok(realms.length > 0)

----------------------------------------

TITLE: Implementing Generic Event Listener in Java
DESCRIPTION: This example shows how to implement a generic event listener using the new WebDriverEventListener interface, which allows for listening to all method calls with a single override.

LANGUAGE: java
CODE:
public class Listener implements WebDriverEventListener {
    private static final Logger LOGGER = Logger.getLogger(Listener.class.getName());

    @Override
    public void beforeAnyCall(Object target, Method method, Object[] args) {
        logger.debug("Thread: " + Thread.currentThread().getName() +
                " | Method Name: " + method.getName() +
                " | Method Args: " + Arrays.toString(args));
    }
}

----------------------------------------

TITLE: Selenium Test Suite HTML Structure
DESCRIPTION: Example HTML structure for a Selenium test suite file that can be executed by HTML-runner. Shows the basic required XML and HTML markup.

LANGUAGE: html
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
  <title>Test Suite</title>
</head>
<body>
<table id="suiteTable" cellpadding="1" cellspacing="1" border="1" class="selenium"><tbody>
<tr><td><b>Test Suite</b></td></tr>
<tr><td><a href="YOUR-TEST-SCENARIO.html">YOUR-TEST-SCENARIO</a></td></tr>
</tbody></table>
</body>
</html>

----------------------------------------

TITLE: Referencing GitHub Examples in Code Tabs
DESCRIPTION: Demonstrates how to use the gh-codeblock shortcode to reference code examples stored in the Selenium GitHub repository within code tabs.

LANGUAGE: HTML
CODE:
{{</* tabpane text=true */>}}
{{</* tab header="Java" */>}}
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27" */>}}
{{</* /tab */>}}
{{</* tab header="Python" */>}}
{{</* gh-codeblock path="examples/python/tests/getting_started/first_script.py#L18-L19" */>}}
{{</* /tab */>}}
{{</* tab header="CSharp" */>}}
{{</* gh-codeblock path="examples/dotnet/SeleniumDocs/GettingStarted/FirstScript.cs#L25-L26" */>}}
{{</* /tab */>}}
{{</* tab header="Ruby" */>}}
{{</* gh-codeblock path="examples/ruby/spec/getting_started/first_script.rb#L17-L18" */>}}
{{</* /tab */>}}
{{</* tab header="JavaScript" */>}}
{{</* gh-codeblock path="examples/javascript/test/getting_started/firstScript.spec.js#L22-L23" */>}}
{{</* /tab */>}}
{{</* tab header="Kotlin" */>}}
{{</* gh-codeblock path="examples/kotlin/src/test/kotlin/dev/selenium/getting_started/FirstScriptTest.kt#L31-L32" */>}}
{{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Evaluating Script in Browsing Context with JavaScript
DESCRIPTION: Shows how to evaluate a script in a browsing context using Selenium WebDriver BiDi in JavaScript. This example demonstrates executing a script and asserting the result.

LANGUAGE: JavaScript
CODE:
const result = await driver.executeScript('return document.readyState')
assert.strictEqual(result, 'complete')

----------------------------------------

TITLE: Managing Firefox Add-ons
DESCRIPTION: Shows how to install and uninstall Firefox add-ons using WebDriver.

LANGUAGE: Java
CODE:
String id = driver.installAddOn(new File("/path/to/extension.xpi"));
driver.uninstallAddOn(id);

LANGUAGE: Python
CODE:
addon_id = driver.install_addon('path/to/extension.xpi')
driver.uninstall_addon(addon_id)

----------------------------------------

TITLE: Filtering Ruby Logs by ID
DESCRIPTION: Demonstrates how to filter logs by ID or deprecation notices in Ruby.

LANGUAGE: Ruby
CODE:
Selenium::WebDriver.logger.ignore(:browser_options)

Selenium::WebDriver.logger.ignore(:deprecations)

----------------------------------------

TITLE: Python List-like Wrapper for WebDriver Select Class
DESCRIPTION: A custom implementation that wraps WebDriver's support.select.Select class with a list-like interface in Python. This allows for more intuitive interaction with select elements in web automation scripts.

LANGUAGE: python
CODE:
# Code not provided in the original text, but referenced as a gist

----------------------------------------

TITLE: Creating PostgreSQL Table for Selenium Sessions
DESCRIPTION: SQL script to create a 'sessions_map' table in PostgreSQL for storing Selenium Grid session information.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS sessions_map(
    session_ids varchar(256),
    session_caps text,
    session_uri varchar(256),
    session_stereotype text,
    session_start varchar(256)
 );

----------------------------------------

TITLE: Inserting Alert Content in HTML
DESCRIPTION: Demonstrates how to add alert content to direct potential contributors to where specific content is missing in the documentation.

LANGUAGE: HTML
CODE:
{{</* alert-content /*/>}}

LANGUAGE: HTML
CODE:
{{</* alert-content */>}}
Additional information about what specific content is needed
{{</* /alert-content */>}}

----------------------------------------

TITLE: Listening to Console Logs in Selenium BiDi API
DESCRIPTION: Demonstrates how to listen and process console.log events using Selenium's BiDirectional API. The code shows event listener registration and callback handling for console logs.

LANGUAGE: Java
CODE:
LogInspector logInspector = new LogInspector(driver);
logInspector.onConsoleEntry(logEntry -> {
    System.out.println("Text is: " + logEntry.getText());
    System.out.println("Level is: " + logEntry.getLevel());
    assertThat(logEntry.getText()).isEqualTo("I am console text");
    assertThat(logEntry.getLevel()).isEqualTo("info");
});

LANGUAGE: JavaScript
CODE:
test('should listen to console log', async () => {
  let logEntry;
  const inspector = await driver.getLogInspector();
  
  inspector.onConsoleEntry(entry => {
    logEntry = entry;
  });
  
  await driver.get(Pages.logTest);
  await driver.executeScript('console.log(\'I am console text\')');
  
  await expect(logEntry.text).toBe('I am console text');
  await expect(logEntry.realm.realmType).toBe('window');
  await expect(logEntry.type).toBe('console');
  await expect(logEntry.method).toBe('log');
  await expect(logEntry.args.length).toBe(1);
});

----------------------------------------

TITLE: Executing Print Commands in Selenium
DESCRIPTION: Demonstrates how to execute print commands using PrintsPage and BrowsingContext interfaces

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
String base64EncodedPdf = driver.print(printOptions);
Byte[] decoded = Base64.getDecoder().decode(base64EncodedPdf);
Files.write(Paths.get(\"testing.pdf\"), decoded);

LANGUAGE: Python
CODE:
print_options = PrintOptions()
base64_pdf = driver.print_page(print_options)

----------------------------------------

TITLE: Decorating WebDriver with EventFiringDecorator in Java
DESCRIPTION: This snippet demonstrates how to decorate a WebDriver instance using the new EventFiringDecorator approach, replacing the old EventFiringWebDriver method.

LANGUAGE: java
CODE:
new EventFiringWebDriver(driver); // Old approach
new EventFiringDecorator().decorate(driver); // New approach

----------------------------------------

TITLE: Adding Firefox WebDriver Maven Dependency
DESCRIPTION: Maven dependency configuration for including only the Firefox WebDriver implementation, suitable when Firefox is the only browser being used for testing.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-firefox-driver</artifactId>
    <version>2.0a5</version>
</dependency>

----------------------------------------

TITLE: Referencing GitHub Examples in HTML
DESCRIPTION: Demonstrates how to use the gh-codeblock shortcode to automatically display and link to code examples stored in the Selenium GitHub repository.

LANGUAGE: HTML
CODE:
{{</* tabpane text=true */>}}
{{</* tab header="Java" */>}}
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27" */>}}
{{</* /tab */>}}
{{</* tab header="Python" */>}}
{{</* gh-codeblock path="examples/python/tests/getting_started/first_script.py#L18-L19" */>}}
{{</* /tab */>}}
{{</* tab header="CSharp" */>}}
{{</* gh-codeblock path="examples/dotnet/SeleniumDocs/GettingStarted/FirstScript.cs#L25-L26" */>}}
{{</* /tab */>}}
{{</* tab header="Ruby" */>}}
{{</* gh-codeblock path="examples/ruby/spec/getting_started/first_script.rb#L17-L18" */>}}
{{</* /tab */>}}
{{</* tab header="JavaScript" */>}}
{{</* gh-codeblock path="examples/javascript/test/getting_started/firstScript.spec.js#L22-L23" */>}}
{{</* /tab */>}}
{{</* tab header="Kotlin" */>}}
{{</* gh-codeblock path="examples/kotlin/src/test/kotlin/dev/selenium/getting_started/FirstScriptTest.kt#L31-L32" */>}}
{{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Browser Event Handling in Selenium BiDi
DESCRIPTION: Event listeners for browser context events like context creation, page load states, navigation events, and user prompts.



----------------------------------------

TITLE: Basic Python Selenium Manager Usage
DESCRIPTION: Shows how to use Selenium Manager in Python compared to previous manual driver management

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()

----------------------------------------

TITLE: Setting Ruby Logger Level
DESCRIPTION: Demonstrates how to set the logger level in Ruby for Selenium.

LANGUAGE: Ruby
CODE:
Selenium::WebDriver.logger.level = :debug

----------------------------------------

TITLE: Setting File Detector in Java RemoteWebDriver
DESCRIPTION: API reference for the new file upload capability in Selenium 2.8's RemoteWebDriver, allowing file uploads to a remote server through the setFileDetector method.

LANGUAGE: java
CODE:
RemoteWebDriver.setFileDetector(org.openqa.selenium.remote.FileDetector)

----------------------------------------

TITLE: Docker Compose Configuration for PostgreSQL
DESCRIPTION: Docker Compose file to set up a PostgreSQL container for Selenium Grid session storage.

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  db:
    image: postgres:9.6-bullseye
    restart: always
    environment:
      - POSTGRES_USER=seluser
      - POSTGRES_PASSWORD=seluser
      - POSTGRES_DB=selenium_sessions
    ports:
      - "5432:5432"
    volumes:
    - ./init.sql:/docker-entrypoint-initdb.d/init.sql

----------------------------------------

TITLE: Decorated Logging Node Implementation
DESCRIPTION: Custom Node implementation that extends the base Node class and adds logging functionality for session lifecycle events and WebDriver commands.

LANGUAGE: java
CODE:
package org.seleniumhq.samples;

import java.net.URI;
import java.util.UUID;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.NoSuchSessionException;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.grid.config.Config;
import org.openqa.selenium.grid.data.CreateSessionRequest;
import org.openqa.selenium.grid.data.CreateSessionResponse;
import org.openqa.selenium.grid.data.NodeId;
import org.openqa.selenium.grid.data.NodeStatus;
import org.openqa.selenium.grid.data.Session;
import org.openqa.selenium.grid.log.LoggingOptions;
import org.openqa.selenium.grid.node.HealthCheck;
import org.openqa.selenium.grid.node.Node;
import org.openqa.selenium.grid.node.local.LocalNodeFactory;
import org.openqa.selenium.grid.security.Secret;
import org.openqa.selenium.grid.security.SecretOptions;
import org.openqa.selenium.grid.server.BaseServerOptions;
import org.openqa.selenium.internal.Either;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.remote.http.HttpRequest;
import org.openqa.selenium.remote.http.HttpResponse;
import org.openqa.selenium.remote.tracing.Tracer;

public class DecoratedLoggingNode extends Node {

  private Node node;

  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {
    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);
  }

  public static Node create(Config config) {
    LoggingOptions loggingOptions = new LoggingOptions(config);
    BaseServerOptions serverOptions = new BaseServerOptions(config);
    URI uri = serverOptions.getExternalUri();
    SecretOptions secretOptions = new SecretOptions(config);
    NodeOptions nodeOptions = new NodeOptions(config);
    Duration sessionTimeout = nodeOptions.getSessionTimeout();

    Node node = LocalNodeFactory.create(config);

    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),
        node.getId(),
        uri,
        secretOptions.getRegistrationSecret(),
        sessionTimeout);
    wrapper.node = node;
    return wrapper;
  }

  @Override
  public Either<WebDriverException, CreateSessionResponse> newSession(
      CreateSessionRequest sessionRequest) {
    System.out.println("Before newSession()");
    try {
      return this.node.newSession(sessionRequest);
    } finally {
      System.out.println("After newSession()");
    }
  }

  @Override
  public HttpResponse executeWebDriverCommand(HttpRequest req) {
    try {
      System.out.println("Before executeWebDriverCommand(): " + req.getUri());
      return node.executeWebDriverCommand(req);
    } finally {
      System.out.println("After executeWebDriverCommand()");
    }
  }

  @Override
  public Session getSession(SessionId id) throws NoSuchSessionException {
    try {
      System.out.println("Before getSession()");
      return node.getSession(id);
    } finally {
      System.out.println("After getSession()");
    }
  }

  @Override
  public HttpResponse uploadFile(HttpRequest req, SessionId id) {
    try {
      System.out.println("Before uploadFile()");
      return node.uploadFile(req, id);
    } finally {
      System.out.println("After uploadFile()");
    }
  }

  @Override
  public void stop(SessionId id) throws NoSuchSessionException {
    try {
      System.out.println("Before stop()");
      node.stop(id);
    } finally {
      System.out.println("After stop()");
    }
  }

  @Override
  public boolean isSessionOwner(SessionId id) {
    try {
      System.out.println("Before isSessionOwner()");
      return node.isSessionOwner(id);
    } finally {
      System.out.println("After isSessionOwner()");
    }
  }

  @Override
  public boolean isSupporting(Capabilities capabilities) {
    try {
      System.out.println("Before isSupporting");
      return node.isSupporting(capabilities);
    } finally {
      System.out.println("After isSupporting()");
    }
  }

  @Override
  public NodeStatus getStatus() {
    try {
      System.out.println("Before getStatus()");
      return node.getStatus();
    } finally {
      System.out.println("After getStatus()");
    }
  }

  @Override
  public HealthCheck getHealthCheck() {
    try {
      System.out.println("Before getHealthCheck()");
      return node.getHealthCheck();
    } finally {
      System.out.println("After getHealthCheck()");
    }
  }

  @Override
  public void drain() {
    try {
      System.out.println("Before drain()");
      node.drain();
    } finally {
      System.out.println("After drain()");
    }

  }

  @Override
  public boolean isReady() {
    try {
      System.out.println("Before isReady()");
      return node.isReady();
    } finally {
      System.out.println("After isReady()");
    }
  }
}

----------------------------------------

TITLE: Performing Back Click in Selenium
DESCRIPTION: This method presses and releases mouse button 3, which is typically associated with the 'Back' function in browsers.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .moveToElement(clickable)
        .click(new MouseButton(3, "back"))
        .build()
        .perform();

----------------------------------------

TITLE: Demonstrating InvalidSelectorException Behavior in Java with FluentWait
DESCRIPTION: This code snippet demonstrates the previous behavior of InvalidSelectorException using FluentWait in Java. It sets up expected exceptions and attempts to find an element with an invalid XPath selector.

LANGUAGE: java
CODE:
ArrayList<Class<? extends Exception>> expectedExceptions = new ArrayList<>();
        expectedExceptions.add(org.openqa.selenium.NoSuchElementException.class);
        expectedExceptions.add(org.openqa.selenium.StaleElementReferenceException.class);
        expectedExceptions.add(org.openqa.selenium.ElementNotInteractableException.class);
        expectedExceptions.add(org.openqa.selenium.InvalidElementStateException.class);
        
return new FluentWait<>(driver)
      .withTimeout(Duration.ofMillis(ELEMENT_IDENTIFICATION_TIMEOUT))
      .pollingEvery(Duration.ofMillis(ELEMENT_IDENTIFICATION_POLLING_DELAY))
      .ignoreAll(expectedExceptions)
      .until(nestedDriver -> {
         nestedDriver.findElement(By.xpath("invalid-xpath")).click;
      });

----------------------------------------

TITLE: Listening to JavaScript Exceptions in JavaScript with Selenium BiDi API
DESCRIPTION: This snippet illustrates how to listen to JavaScript exceptions and process them using Selenium's BiDirectional API in JavaScript. It sets up a listener for JavaScript exceptions and logs their details.

LANGUAGE: JavaScript
CODE:
await logInspector.onJavascriptException((jsException) => {
  console.log(`Exception Text: ${jsException.text}`)
  console.log(`Exception: ${jsException.message}`)
  console.log(`Exception StackTrace: ${jsException.stacktrace}`)
})

await driver.get(Pages.logTest)

const result = await driver.executeScript('throw new Error("An exception")')

----------------------------------------

TITLE: Launching Selenium Grid with HtmlUnit Extension
DESCRIPTION: Command line instruction for starting Selenium Grid standalone server with HtmlUnit Remote extension and configuration.

LANGUAGE: bash
CODE:
java -jar selenium-server-<version>.jar --ext htmlunit-remote-<version>-grid-extension.jar standalone --config htmlunit.toml

----------------------------------------

TITLE: Querying Selenium Grid maxSession and sessionCount
DESCRIPTION: Demonstrates how to query the maximum session count and current session count from the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query": "{ grid { maxSession, sessionCount } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Executing JavaScript in WebDriver Java
DESCRIPTION: Shows how to execute JavaScript and interact with elements using WebDriver's JavascriptExecutor.

LANGUAGE: java
CODE:
WebElement element = driver.findElement(By.id("foo"));
String name = (String) ((JavascriptExecutor) driver).executeScript(
    "return arguments[0].tagName", element);

----------------------------------------

TITLE: Adding File Handler in Python
DESCRIPTION: Shows how to add a file handler to direct log output to a file in Python.

LANGUAGE: Python
CODE:
file_handler = logging.FileHandler('selenium.log')
logger.addHandler(file_handler)

----------------------------------------

TITLE: Installing Selenium with Python pip
DESCRIPTION: Command to install or upgrade Selenium using Python's pip package manager

LANGUAGE: bash
CODE:
pip install -U selenium

----------------------------------------

TITLE: PostgreSQL Sessions TOML Configuration
DESCRIPTION: TOML configuration file for setting up PostgreSQL-backed session storage in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
implementation = "org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap"
jdbc-url = "jdbc:postgresql://localhost:5432/selenium_sessions"
jdbc-user = "seluser"
jdbc-password = "seluser"

----------------------------------------

TITLE: Defining KEDA ScaledObject for Selenium Chrome Nodes in YAML
DESCRIPTION: This YAML configuration defines a KEDA ScaledObject for Selenium Chrome nodes. It specifies scaling parameters, target deployment, and trigger details for autoscaling.

LANGUAGE: yaml
CODE:
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: selenium-chrome-scaledobject
  namespace: <namespace of your browser pods>
  labels:
    deploymentName: selenium-chrome-node-deployment
spec:
  minReplicaCount: 0
  maxReplicaCount: 80
  scaleTargetRef:
    name: selenium-chrome-node-deployment
  triggers:
    - type: selenium-grid
      metadata:
        url: 'http://selenium-grid-url-or-ip:4444/graphql'
        browserName: 'chrome'
        platformName: 'Linux'

----------------------------------------

TITLE: Deleting Grid Session
DESCRIPTION: Terminates a WebDriver session, quits the driver and removes it from active sessions. Any subsequent use of the session ID will result in an error.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/session/<session-id>'

----------------------------------------

TITLE: Creating Language-Specific Code Tabs
DESCRIPTION: Shows how to implement multi-language code tabs using Docsy's tabpane shortcode. Includes examples in Java, Python, C#, Ruby, JavaScript, and Kotlin for initializing a WebDriver instance.

LANGUAGE: java
CODE:
WebDriver driver = new ChromeDriver();

LANGUAGE: python
CODE:
driver = webdriver.Chrome()

LANGUAGE: csharp
CODE:
var driver = new ChromeDriver();

LANGUAGE: ruby
CODE:
driver = Selenium::WebDriver.for :chrome

LANGUAGE: javascript
CODE:
let driver = await new Builder().forBrowser('chrome').build();

LANGUAGE: kotlin
CODE:
val driver = ChromeDriver()

----------------------------------------

TITLE: Adding Selenium Dependencies to Maven POM for Java 11+ HTTP Client
DESCRIPTION: This XML snippet shows how to add the necessary dependencies to a Maven POM file for using Selenium with Java 11+ HTTP Client. It includes both the selenium-java and selenium-http-jdk-client artifacts.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.seleniumhq.selenium</groupId>
  <artifactId>selenium-java</artifactId>
  <version>4.5.0</version>
</dependency>
<dependency>
  <groupId>org.seleniumhq.selenium</groupId>
  <artifactId>selenium-http-jdk-client</artifactId>
  <version>4.5.0</version>
</dependency>

----------------------------------------

TITLE: Handling Authentication in Network Requests with Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to continue a request blocked at the authRequired phase by providing credentials using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addAuthHandler("*", request -> {
    AuthCredentials credentials = new AuthCredentials("username", "password");
    return interceptor.continueWithAuth(request, credentials);
});
driver.get("https://the-internet.herokuapp.com/basic_auth");
assertThat(driver.findElement(By.tagName("h3")).getText()).isEqualTo("Basic Auth");

----------------------------------------

TITLE: Displaying Selenium Info Command Output
DESCRIPTION: Example output of the new 'selenium info' command that provides documentation on common Selenium Grid tasks and topics

LANGUAGE: shell
CODE:
Info
====

You can find out more about topics concerning Selenium Grid by running the
"info" command followed by: 

* config - Help on how to configure Selenium
* tracing - Help on how distributed tracing works with selenium
* security - Help on how how to secure communications to and within selenium
* sessionmap - Help on different types of sessionmap and how to start them.


Each topic will give you enough information to help you get started, and contains
some pointers on our site to provide more complete information.

----------------------------------------

TITLE: Viewing PATH Environment Variable in Zsh
DESCRIPTION: Shows how to view the current PATH environment variable and add a new directory to it in Zsh.

LANGUAGE: shell
CODE:
echo $PATH

echo 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv
source ~/.zshenv

chromedriver --version

----------------------------------------

TITLE: Initializing WebDriver-backed Selenium in Java
DESCRIPTION: Creates a new WebDriver instance and wraps it with WebDriverBackedSelenium for compatibility.

LANGUAGE: java
CODE:
WebDriver driver = new FirefoxDriver();
Selenium selenium = new WebDriverBackedSelenium(driver, "http://www.yoursite.com");

----------------------------------------

TITLE: Viewing PATH Environment Variable in Bash
DESCRIPTION: Shows how to view the current PATH environment variable and add a new directory to it in Bash.

LANGUAGE: shell
CODE:
echo $PATH

echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
source ~/.bash_profile

chromedriver --version

----------------------------------------

TITLE: Checking Absence of Boolean Attribute
DESCRIPTION: Example of verifying that a boolean attribute 'multiple' is not present on a select element using JavaScript evaluation.

LANGUAGE: selenese
CODE:
assertEval | this.browserbot.findElement("css=select[name=elephants]").getAttribute("multiple"); | null

----------------------------------------

TITLE: Removing a Node from Selenium Grid
DESCRIPTION: This command removes a node from the Grid without stopping ongoing sessions. It prevents new session requests from being forwarded to the removed node.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret> '

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://<Router-URL>/se/grid/distributor/node/<node-id>' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Creating PostgreSQL Sessions Table Schema
DESCRIPTION: SQL schema definition for creating the sessions_map table in PostgreSQL to store Selenium Grid session data

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS sessions_map(
    session_ids varchar(256),
    session_caps text,
    session_uri varchar(256),
    session_stereotype text,
    session_start varchar(256)
 );

----------------------------------------

TITLE: Navigating to a URL
DESCRIPTION: Send a POST request to navigate the browser to a new URL.

LANGUAGE: HTTP
CODE:
POST /session/:sessionId/url

Request Body:
{
  "url": "http://www.example.com"
}

----------------------------------------

TITLE: Configuring PreStop Hook and Drain for Selenium Nodes in YAML
DESCRIPTION: This YAML snippet shows how to configure a PreStop hook for Selenium browser pods. It includes a command to drain the node and wait for completion before termination.

LANGUAGE: yaml
CODE:
spec:
  template:
    spec:
      terminationGracePeriodSeconds: 3600
      ...
      ...
      containers:
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "curl --request POST 'localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'; tail --pid=$(pgrep -f '[n]ode --bind-host false --config /opt/selenium/config.toml') -f /dev/null; sleep 30s"]

----------------------------------------

TITLE: Retrieving Element Information
DESCRIPTION: Demonstrates how to retrieve information from web elements, such as the text content of a message element. This is useful for verifying the results of interactions.

LANGUAGE: Java
CODE:
WebElement message = driver.findElement(By.id("message"));
String value = message.getText();

LANGUAGE: Python
CODE:
message = driver.find_element(By.ID, "message")
value = message.text

LANGUAGE: C#
CODE:
IWebElement message = driver.FindElement(By.Id("message"));
string value = message.Text;

LANGUAGE: Ruby
CODE:
message = driver.find_element(id: 'message')
value = message.text

LANGUAGE: JavaScript
CODE:
let message = await driver.findElement(By.id('message'));
let value = await message.getText();

LANGUAGE: Kotlin
CODE:
val message = driver.findElement(By.id("message"))
val value = message.text

----------------------------------------

TITLE: Changing Desktop Background Periodically on Mac using Ruby
DESCRIPTION: This code snippet is referenced in the article as an example of using the right tool for a task, rather than unnecessarily using a browser. It demonstrates a Ruby script that changes the desktop background periodically on a Mac.

LANGUAGE: Ruby
CODE:
Ruby script to change the desktop background periodically on Mac

----------------------------------------

TITLE: Distributed Grid Setup Script
DESCRIPTION: Shell script for launching a distributed Selenium Grid with external session storage

LANGUAGE: bash
CODE:
SE_VERSION=<current_selenium_version>
JAR_NAME=selenium-server-${SE_VERSION}.jar
PUBLISH="--publish-events tcp://localhost:4442"
SUBSCRIBE="--subscribe-events tcp://localhost:4443"
SESSIONS="--sessions http://localhost:5556"
SESSIONS_QUEUE="--sessionqueue http://localhost:5559"
echo 'Starting Event Bus'
java -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &
echo 'Starting New Session Queue'
java -jar $JAR_NAME sessionqueue --port 5559 &
echo 'Starting Sessions Map'
java -jar $JAR_NAME \
--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \
sessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &
echo 'Starting Distributor'
java -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &
echo 'Starting Router'
java -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &
echo 'Starting Node'
java -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &

----------------------------------------

TITLE: Configuring Tracing for Remote WebDriver in Java
DESCRIPTION: Sets up system properties for tracing client requests in a Remote WebDriver session using OpenTelemetry and Jaeger.

LANGUAGE: Java
CODE:
System.setProperty("otel.traces.exporter", "jaeger");
System.setProperty("otel.exporter.jaeger.endpoint", "http://localhost:14250");
System.setProperty("otel.resource.attributes", "service.name=selenium-java-client");

ImmutableCapabilities capabilities = new ImmutableCapabilities("browserName", "chrome");

WebDriver driver = new RemoteWebDriver(new URL("http://www.example.com"), capabilities);

driver.get("http://www.google.com");

driver.quit();

----------------------------------------

TITLE: Downloading a File in Remote WebDriver for Java
DESCRIPTION: Downloads a specific file from the Remote WebDriver session to the client machine.

LANGUAGE: Java
CODE:
Path path = ((HasDownloads) driver).downloadFile("file.jpg", Path.of("C:", "downloads"));

----------------------------------------

TITLE: Custom Boolean Attribute Extension
DESCRIPTION: Suggested implementation for a custom user extension to handle boolean attribute checking in a more readable way.

LANGUAGE: selenese
CODE:
assertBooleanAttribute | css=select[name=elephants]@multiple | false
assertBooleanAttribute | css=select[name=elephants]@multiple | true

----------------------------------------

TITLE: Deleting a Session in Selenium Grid
DESCRIPTION: This command deletes a specific session from the Selenium Grid, identified by the session ID.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/session/<session-id>'

----------------------------------------

TITLE: Setting Legacy IE Server Mode in Java
DESCRIPTION: This code snippet demonstrates how to set the DesiredCapability to use the legacy internal server for Internet Explorer in Selenium WebDriver.

LANGUAGE: Java
CODE:
DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
capabilities.setCapability("useLegacyInternalServer", true);
WebDriver driver = new InternetExplorerDriver(capabilities);

----------------------------------------

TITLE: Docker Compose Configuration for Redis
DESCRIPTION: Docker Compose file to set up a Redis container for Selenium Grid session storage.

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  redis:
    image: redis:bullseye
    restart: always
    ports:
      - "6379:6379"

----------------------------------------

TITLE: Node Browser Configuration
DESCRIPTION: Command line parameter example for configuring browser instances on a node

LANGUAGE: bash
CODE:
-browser browserName=firefox,version=3.6,maxInstances=5,platform=LINUX

----------------------------------------

TITLE: Using String Locator Types in Python Selenium
DESCRIPTION: Demonstrates an alternative method of using string identifiers instead of the By object for locator types. This is not the recommended approach but can be used if necessary.

LANGUAGE: python
CODE:
driver.find_element('id', "submit_button").click()
driver.find_element('css selector', '.myelement child').text

----------------------------------------

TITLE: Asserting with pytest in Python
DESCRIPTION: Example of making an assertion using pytest in a Python Selenium test.

LANGUAGE: Python
CODE:
title = driver.title
assert title == "Web form"

----------------------------------------

TITLE: Sizzle Selector Performance Tip
DESCRIPTION: A tip about jQuery/Sizzle selector performance, warning against using expensive selectors like 'form *' since Sizzle processes selectors from right to left.

LANGUAGE: javascript
CODE:
$('form *')

----------------------------------------

TITLE: Querying GraphQL Schema Structure for Selenium Grid
DESCRIPTION: Demonstrates the overall structure of the Selenium Grid GraphQL schema, including session, grid, sessionsInfo, and nodesInfo objects with their respective fields.

LANGUAGE: shell
CODE:
{
    session(id: "<session-id>") : {
        id,
        capabilities,
        startTime,
        uri,
        nodeId,
        nodeUri,
        sessionDurationMillis
        slot : {
            id,
            stereotype,
            lastStarted
        }
    }
    grid: {
        uri,
        totalSlots,
        nodeCount,
        maxSession,
        sessionCount,
        version,
        sessionQueueSize
    }
    sessionsInfo: {
        sessionQueueRequests,
        sessions: [
            {
                id,
                capabilities,
                startTime,
                uri,
                nodeId,
                nodeUri,
                sessionDurationMillis
                slot : {
                    id,
                    stereotype,
                    lastStarted
                }
            }
        ]
    }
    nodesInfo: {
        nodes : [
            {
                id,
                uri,
                status,
                maxSession,
                slotCount,
                sessions: [
                    {
                        id,
                        capabilities,
                        startTime,
                        uri,
                        nodeId,
                        nodeUri,
                        sessionDurationMillis
                        slot : {
                            id,
                            stereotype,
                            lastStarted
                        }
                    }
                ],
                sessionCount,
                stereotypes,
                version,
                osInfo: {
                    arch,
                    name,
                    version
                }
            }
        ]
    }
}

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in JavaScript
DESCRIPTION: This snippet shows how to upload a file using Selenium WebDriver in JavaScript. It uses the sendKeys method to provide the file path to an input element of type 'file'.

LANGUAGE: JavaScript
CODE:
await driver.findElement(By.id('file-upload')).sendKeys('test-files/selenium-snapshot.jpg');
await driver.findElement(By.id('file-submit')).submit();

----------------------------------------

TITLE: Initializing Safari Technology Preview WebDriver
DESCRIPTION: Examples of starting a Safari Technology Preview session in various programming languages.

LANGUAGE: java
CODE:
SafariOptions options = new SafariOptions();
options.setUseTechnologyPreview(true);

LANGUAGE: python
CODE:
options = webdriver.SafariOptions()
options.use_technology_preview = True

driver = webdriver.Safari(
    options=options,
    service=Service(executable_path='/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver')
)

LANGUAGE: ruby
CODE:
options = Selenium::WebDriver::Safari::Options.new(automatic_inspection: true)
options.technology_preview!

----------------------------------------

TITLE: YAML Front Matter Configuration for 2018 Blog Posts
DESCRIPTION: YAML front matter block that configures the metadata for a blog posts listing page from 2018. Defines the page title, URL-friendly link title, and navigation weight for ordering.

LANGUAGE: yaml
CODE:
---
title: "Blog Posts - 2018"
linkTitle: "2018"
weight: 92
---

----------------------------------------

TITLE: Querying Slot Information for All Selenium Grid Sessions
DESCRIPTION: Shows how to query slot information for all sessions across all nodes in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ sessionsInfo { sessions { id, slot { id, stereotype, lastStarted } } } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Querying Node Capabilities in Selenium Grid
DESCRIPTION: Shows how to query the capabilities of each node in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query": "{ nodesInfo { nodes { stereotypes } } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Highlighting Selenium WebDriver Element in Python
DESCRIPTION: A code snippet that demonstrates how to highlight a Selenium WebDriver element. This can be useful for debugging or visualizing element interactions during test execution.

LANGUAGE: python
CODE:
# Code not provided in the original text, but referenced as a gist

----------------------------------------

TITLE: Creating a Basic Web Login Test with BELLATRIX in C#
DESCRIPTION: This code snippet demonstrates how to create a simple login test using BELLATRIX framework. It navigates to a website, interacts with login form elements, and performs assertions on the logged-in state. The example showcases BELLATRIX's fluent API for element creation and validation.

LANGUAGE: csharp
CODE:
[TestClass]
public class LoginTestsMSTest : MSTest.WebTest
{
    public override void TestInit()
    {
       App.Navigation.Navigate("http://demos.bellatrix.solutions/my-account/");
    }

    [TestMethod]
    public void SuccessfullyLoginToMyAccount()
    {
        var userNameField = App.Components.CreateById<TextField>("username");
        var passwordField = App.Components.CreateById<Password>("password");
        var loginButton = App.Components.CreateByXpath<Button>("//button[@name='login']");

        userNameField.SetText("info@yourverybusywebsite.com");
        passwordField.SetPassword("yourverysecretp4ssw0rd$");
        loginButton.Click();

        var myAccountContentDiv = App.Components.CreateByClass<Div>("woocommerce-MyAccount-content");
        myAccountContentDiv.ValidateInnerTextContains("Hello John");

        var logoutLink = App.Components.CreateByInnerTextContaining<Anchor>("Log out");

        logoutLink.ValidateIsVisible();
        logoutLink.Click();
    }
}

----------------------------------------

TITLE: Installing Ruby Dependencies
DESCRIPTION: Command to install required Ruby dependencies using Bundler

LANGUAGE: bash
CODE:
bundler install

----------------------------------------

TITLE: Load Testing GWT Applications with Selenium 2 and Gradle
DESCRIPTION: This snippet shows how to perform load testing on a GWT (Google Web Toolkit) application running in production mode using Selenium 2 and Gradle build tool.

LANGUAGE: java
CODE:
// Code not provided in the original text, but referenced as being available via a link

----------------------------------------

TITLE: Checking Element Visibility in Selenium
DESCRIPTION: Demonstrates how to use the isDisplayed() method to check if an element is visible on the webpage. Returns a boolean value indicating visibility.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
WebElement input = driver.findElement(By.name("email_input"));
boolean isDisplayed = input.isDisplayed();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
input_element = driver.find_element(By.NAME, "email_input")
is_displayed = input_element.is_displayed()

LANGUAGE: C#
CODE:
driver.Url = "https://www.selenium.dev/selenium/web/inputs.html";
var input = driver.FindElement(By.Name("email_input"));
bool isDisplayed = input.Displayed;

LANGUAGE: Ruby
CODE:
driver.get('https://www.selenium.dev/selenium/web/inputs.html')
input = driver.find_element(name: 'email_input')
input.displayed?

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html')
const input = await driver.findElement(By.name('email_input'))
const isDisplayed = await input.isDisplayed()

LANGUAGE: Kotlin
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
val flag = driver.findElement(By.name("email_input")).isDisplayed()

----------------------------------------

TITLE: Checking Element Visibility in Selenium
DESCRIPTION: Demonstrates how to use the isDisplayed() method to check if an element is visible on the webpage. Returns a boolean value indicating visibility.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html");
WebElement input = driver.findElement(By.name("email_input"));
boolean isDisplayed = input.isDisplayed();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
input_element = driver.find_element(By.NAME, "email_input")
is_displayed = input_element.is_displayed()

LANGUAGE: C#
CODE:
driver.Url = "https://www.selenium.dev/selenium/web/inputs.html";
var input = driver.FindElement(By.Name("email_input"));
bool isDisplayed = input.Displayed;

LANGUAGE: Ruby
CODE:
driver.get('https://www.selenium.dev/selenium/web/inputs.html')
input = driver.find_element(name: 'email_input')
input.displayed?

LANGUAGE: JavaScript
CODE:
await driver.get('https://www.selenium.dev/selenium/web/inputs.html')
const input = await driver.findElement(By.name('email_input'))
const isDisplayed = await input.isDisplayed()

LANGUAGE: Kotlin
CODE:
driver.get("https://www.selenium.dev/selenium/web/inputs.html")
val flag = driver.findElement(By.name("email_input")).isDisplayed()

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in Kotlin
DESCRIPTION: This snippet illustrates how to upload a file using Selenium WebDriver in Kotlin. It demonstrates finding the file upload element, sending the file path, submitting the form, and checking if the upload was successful.

LANGUAGE: Kotlin
CODE:
import org.openqa.selenium.By
import org.openqa.selenium.chrome.ChromeDriver

fun main() {
    val driver = ChromeDriver()
    driver.get("https://the-internet.herokuapp.com/upload")
    driver.findElement(By.id("file-upload")).sendKeys("selenium-snapshot.jpg")
    driver.findElement(By.id("file-submit")).submit()
    if(driver.pageSource.contains("File Uploaded!")) {
        println("file uploaded")
    }
    else{
        println("file not uploaded")
    }
}

----------------------------------------

TITLE: Basic Java Selenium Manager Usage
DESCRIPTION: Shows how to use Selenium Manager in Java compared to previous manual driver management

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();

----------------------------------------

TITLE: Using GitHub Code Blocks
DESCRIPTION: Shows how to reference and display code examples directly from the GitHub repository using the gh-codeblock shortcode.

LANGUAGE: HTML
CODE:
{{</* tabpane text=true */>}}
{{</* tab header="Java" */>}}
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L26-L27" */>}}
{{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Initializing Selenium RC in Java
DESCRIPTION: 使用Java初始化Selenium RC服务器和客户端

LANGUAGE: java
CODE:
public void setUp() throws Exception {
    setUp("http://www.google.com/", "*firefox");
}

----------------------------------------

TITLE: Referencing IllegalLocatorException in Java for Selenium WebDriver
DESCRIPTION: This snippet shows the URL for the JavaDoc of the IllegalLocatorException class in Selenium WebDriver. This exception is thrown when XPath searches return something other than a web element.

LANGUAGE: java
CODE:
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/IllegalLocatorException.html

----------------------------------------

TITLE: Accessing Selenium Grid Node Component Help
DESCRIPTION: This command provides component-specific configuration information for the Node role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node --help

----------------------------------------

TITLE: Code Snippet Implementation Example
DESCRIPTION: Reference to a Gist showing how code snippets would be implemented in the documentation

LANGUAGE: markdown
CODE:
https://gist.github.com/harsha509/e690dd2c72f1f5c5785be4c8a47c87fd

----------------------------------------

TITLE: Translation Statistics Table in Markdown
DESCRIPTION: Markdown table showing visitor statistics and translation completion percentages for different language versions of Selenium documentation

LANGUAGE: markdown
CODE:
| Language | Visitors | Translated |
| --------- | ------- | ------- |
| ja | 1,700 | 86% |
| zh-cn | 1,500 | 86% |
| es| 409 |  42% |
| fr | 203 | 31% |
| pt-br | 189 | 87% |
| de | 88 | 65% |
| ko | 79 | 68% |
| nl | 22 | 6% |

----------------------------------------

TITLE: Basic Pen Actions Implementation
DESCRIPTION: Demonstrates how to create and perform basic pen actions using Selenium WebDriver. Shows initialization of pen actions and movement to target elements.

LANGUAGE: Java
CODE:
driver.get("https://www.selenium.dev/selenium/web/pointerActionsTest.html");
WebElement target = driver.findElement(By.id("target"));

new Actions(driver)
    .setActivePointer(PointerInput.Kind.PEN, "default pen")
    .moveToElement(target)
    .click()
    .perform();

LANGUAGE: Python
CODE:
driver.get("https://www.selenium.dev/selenium/web/pointerActionsTest.html")
target = driver.find_element(By.ID, "target")

actions = ActionChains(driver)
actions.set_active_pointer("pen", "default pen")
actions.move_to_element(target)
actions.click()

actions.perform()

LANGUAGE: Kotlin
CODE:
driver.get("https://www.selenium.dev/selenium/web/pointerActionsTest.html")
val target = driver.findElement(By.id("target"))

Actions(driver)
    .setActivePointer(PointerInput.Kind.PEN, "default pen")
    .moveToElement(target)
    .click()
    .perform()

----------------------------------------

TITLE: Adding Selenium Core Maven Dependency
DESCRIPTION: Maven dependency configuration for including the complete Selenium 2 framework with all WebDriver implementations and support classes.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium</artifactId>
    <version>2.0a5</version>
</dependency>

----------------------------------------

TITLE: Matching Node with Custom Capabilities in Java
DESCRIPTION: Java example showing how to match a Node with custom capabilities set in the configuration.

LANGUAGE: java
CODE:
FirefoxOptions options = new FirefoxOptions();
options.setCapability("networkname:applicationName", "node_1");
options.setCapability("nodename:applicationName", "app_1");
options.setBrowserVersion("96");
options.setPlatformName("macOS");
WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444"), options);
driver.get("https://selenium.dev");
driver.quit();

----------------------------------------

TITLE: Mapping SSL Status to Error Flags in Firefox
DESCRIPTION: This JavaScript code from Firefox's exception dialog shows how SSL status is mapped to specific error flags, which are used in the certificate override process.

LANGUAGE: javascript
CODE:
  var flags = 0;
  if(gSSLStatus.isUntrusted)
    flags |= overrideService.ERROR_UNTRUSTED;
  if(gSSLStatus.isDomainMismatch)
    flags |= overrideService.ERROR_MISMATCH;
  if(gSSLStatus.isNotValidAtThisTime)
    flags |= overrideService.ERROR_TIME;

----------------------------------------

TITLE: TOML Configuration Example
DESCRIPTION: Example configuration file (se-config.toml) showing various Selenium Manager settings

LANGUAGE: toml
CODE:
browser = "chrome"
proxy = "mycompany:8080"
timeout = 120
debug = true
offline = true

# Custom mirror URLs
chromedriver-mirror-url = "https://my-chromedriver-mirror.com"
chrome-mirror-url = "https://my-chrome-mirror.com"
firefox-mirror-url = "https://my-firefox-mirror.com"
firefox-path = "/usr/bin/firefox"

# Custom versions
chrome-version = "115"
firefox-version = "116"
edge-version = "beta"

# Misc
cache-path = "/custom/selenium/cache"
ttl = 7200
avoid-stats = true

----------------------------------------

TITLE: Implementing a Custom Selenium Grid Node with Logging
DESCRIPTION: Java class that extends the Selenium Grid Node to add custom logging functionality. It wraps the standard Node operations with logging statements.

LANGUAGE: java
CODE:
package org.seleniumhq.samples;

import java.io.IOException;
import java.net.URI;
import java.util.UUID;
import java.util.function.Supplier;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.NoSuchSessionException;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.grid.config.Config;
import org.openqa.selenium.grid.data.CreateSessionRequest;
import org.openqa.selenium.grid.data.CreateSessionResponse;
import org.openqa.selenium.grid.data.NodeId;
import org.openqa.selenium.grid.data.NodeStatus;
import org.openqa.selenium.grid.data.Session;
import org.openqa.selenium.grid.log.LoggingOptions;
import org.openqa.selenium.grid.node.HealthCheck;
import org.openqa.selenium.grid.node.Node;
import org.openqa.selenium.grid.node.local.LocalNodeFactory;
import org.openqa.selenium.grid.security.Secret;
import org.openqa.selenium.grid.security.SecretOptions;
import org.openqa.selenium.grid.server.BaseServerOptions;
import org.openqa.selenium.internal.Either;
import org.openqa.selenium.io.TemporaryFilesystem;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.remote.http.HttpRequest;
import org.openqa.selenium.remote.http.HttpResponse;
import org.openqa.selenium.remote.tracing.Tracer;

public class DecoratedLoggingNode extends Node {

  private Node node;

  protected DecoratedLoggingNode(Tracer tracer, NodeId nodeId, URI uri, Secret registrationSecret, Duration sessionTimeout) {
    super(tracer, nodeId, uri, registrationSecret, sessionTimeout);
  }

  public static Node create(Config config) {
    LoggingOptions loggingOptions = new LoggingOptions(config);
    BaseServerOptions serverOptions = new BaseServerOptions(config);
    URI uri = serverOptions.getExternalUri();
    SecretOptions secretOptions = new SecretOptions(config);
    NodeOptions nodeOptions = new NodeOptions(config);
    Duration sessionTimeout = nodeOptions.getSessionTimeout();

    Node node = LocalNodeFactory.create(config);

    DecoratedLoggingNode wrapper = new DecoratedLoggingNode(loggingOptions.getTracer(),
        node.getId(),
        uri,
        secretOptions.getRegistrationSecret(),
        sessionTimeout);
    wrapper.node = node;
    return wrapper;
  }

  @Override
  public Either<WebDriverException, CreateSessionResponse> newSession(
      CreateSessionRequest sessionRequest) {
    return perform(() -> node.newSession(sessionRequest), "newSession");
  }

  @Override
  public HttpResponse executeWebDriverCommand(HttpRequest req) {
    return perform(() -> node.executeWebDriverCommand(req), "executeWebDriverCommand");
  }

  @Override
  public Session getSession(SessionId id) throws NoSuchSessionException {
    return perform(() -> node.getSession(id), "getSession");
  }

  @Override
  public HttpResponse uploadFile(HttpRequest req, SessionId id) {
    return perform(() -> node.uploadFile(req, id), "uploadFile");
  }

  @Override
  public HttpResponse downloadFile(HttpRequest req, SessionId id) {
    return perform(() -> node.downloadFile(req, id), "downloadFile");
  }

  @Override
  public TemporaryFilesystem getDownloadsFilesystem(UUID uuid) {
    return perform(() -> {
      try {
        return node.getDownloadsFilesystem(uuid);
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
    }, "downloadsFilesystem");
  }

  @Override
  public TemporaryFilesystem getUploadsFilesystem(SessionId id) throws IOException {
    return perform(() -> {
      try {
        return node.getUploadsFilesystem(id);
      } catch (IOException e) {
        throw new RuntimeException(e);
      }
    }, "uploadsFilesystem");

  }

  @Override
  public void stop(SessionId id) throws NoSuchSessionException {
    perform(() -> node.stop(id), "stop");
  }

  @Override
  public boolean isSessionOwner(SessionId id) {
    return perform(() -> node.isSessionOwner(id), "isSessionOwner");
  }

  @Override
  public boolean isSupporting(Capabilities capabilities) {
    return perform(() -> node.isSupporting(capabilities), "isSupporting");
  }

  @Override
  public NodeStatus getStatus() {
    return perform(() -> node.getStatus(), "getStatus");
  }

  @Override
  public HealthCheck getHealthCheck() {
    return perform(() -> node.getHealthCheck(), "getHealthCheck");
  }

  @Override
  public void drain() {
    perform(() -> node.drain(), "drain");
  }

  @Override
  public boolean isReady() {
    return perform(() -> node.isReady(), "isReady");
  }

  private void perform(Runnable function, String operation) {
    try {
      System.err.printf("[COMMENTATOR] Before %s()%n", operation);
      function.run();
    } finally {
      System.err.printf("[COMMENTATOR] After %s()%n", operation);
    }
  }

  private <T> T perform(Supplier<T> function, String operation) {
    try {
      System.err.printf("[COMMENTATOR] Before %s()%n", operation);
      return function.get();
    } finally {
      System.err.printf("[COMMENTATOR] After %s()%n", operation);
    }
  }
}

----------------------------------------

TITLE: C# Test Example
DESCRIPTION: Sample C# test class using NUnit for browser automation with Selenium RC

LANGUAGE: csharp
CODE:
using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using NUnit.Framework;
using Selenium;

namespace SeleniumTests {
    [TestFixture]
    public class NewTest {
        private ISelenium selenium;
        private StringBuilder verificationErrors;
        
        [SetUp]
        public void SetupTest() {
            selenium = new DefaultSelenium("localhost", 4444, "*firefox", "http://www.google.com/");
            selenium.Start();
            verificationErrors = new StringBuilder();
        }
        
        [TearDown]
        public void TeardownTest() {
            try {
                selenium.Stop();
            }
            catch (Exception) {
                // Ignore errors if unable to close the browser
            }
            Assert.AreEqual("", verificationErrors.ToString());
        }
        
        [Test]
        public void TheNewTest() {
            selenium.Open("/");
            selenium.Type("q", "selenium rc");
            selenium.Click("btnG");
            selenium.WaitForPageToLoad("30000");
            Assert.AreEqual("selenium rc - Google Search", selenium.GetTitle());
        }
    }
}

----------------------------------------

TITLE: Running a Selenium RC Test in C#
DESCRIPTION: 使用C#编写和运行一个Selenium RC测试

LANGUAGE: csharp
CODE:
public void TheNewTest()
{
    selenium.Open("/");
    selenium.Type("q", "selenium rc");
    selenium.Click("btnG");
    selenium.WaitForPageToLoad("30000");
    Assert.AreEqual("selenium rc - Google Search", selenium.GetTitle());
}

----------------------------------------

TITLE: Capturing Console Logs with CDP in Ruby
DESCRIPTION: This snippet demonstrates how to capture console logs using Chrome DevTools Protocol in Ruby. It uses the driver.execute_cdp method to enable logging.

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Log.enable')

----------------------------------------

TITLE: Initializing AsyncHttpClient Instance - Java
DESCRIPTION: Code reference showing static initialization of AsyncHttpClient from an earlier version of Selenium, demonstrating the single instance pattern that was previously used.

LANGUAGE: java
CODE:
private static final AsyncHttpClient httpClient =

----------------------------------------

TITLE: Basic Pen Actions Implementation in Multiple Languages
DESCRIPTION: Demonstrates how to create and execute basic pen pointer actions using Selenium WebDriver. Shows how to move the pen to an element and click using the pen pointer.

LANGUAGE: Java
CODE:
Pen pen = new Pen();
Actions actions = new Actions(driver);

WebElement element = driver.findElement(By.id("draw"));

actions.setActivePointer(PointerInput.Kind.PEN, "default pen")
    .moveToElement(element)
    .click()
    .perform();

LANGUAGE: Python
CODE:
pen = Pen()
actions = ActionChains(driver)

element = driver.find_element(By.ID, "draw")

actions.set_active_pointer(PointerInput.Kind.PEN, "default pen")\
    .move_to_element(element)\
    .click()\
    .perform()

----------------------------------------

TITLE: Meeting Channel Reference - Markdown
DESCRIPTION: Reference to the Selenium Slack channel where meetings are held.

LANGUAGE: markdown
CODE:
#selenium-tlc

----------------------------------------

TITLE: Setting Implicit Wait in WebDriver Java
DESCRIPTION: Configures an implicit wait timeout for all element location operations in WebDriver.

LANGUAGE: java
CODE:
driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

----------------------------------------

TITLE: Adding Console Message Handler in WebDriver BiDi (Ruby)
DESCRIPTION: This snippet demonstrates how to add a console message handler in WebDriver BiDi using Ruby. It requires the WebDriver BiDi feature to be enabled in Options.

LANGUAGE: Ruby
CODE:
driver.add_log_listener(ConsoleLogOptions::ALL) do |log|
  puts log.text
end

----------------------------------------

TITLE: Implementing Selenium-backed WebDriver in Java
DESCRIPTION: Shows how to use Selenium to back WebDriver implementation using SeleneseCommandExecutor. Enables support for browsers not directly supported by WebDriver.

LANGUAGE: java
CODE:
Capabilities capabilities = new DesiredCapabilities()
capabilities.setBrowserName("safari");
CommandExecutor executor = new SeleneseCommandExecutor("http:localhost:4444/", "http://www.google.com/", capabilities);
WebDriver driver = new RemoteWebDriver(executor, capabilities);

----------------------------------------

TITLE: Querying Grid Status via REST
DESCRIPTION: Gets the current state of the Grid including details about registered nodes, their availability, sessions and slots.

LANGUAGE: shell
CODE:
cURL GET 'http://localhost:4444/status'

----------------------------------------

TITLE: Initializing Selenium RC in Java
DESCRIPTION: Creates a new Selenium RC instance using the DefaultSelenium class.

LANGUAGE: java
CODE:
Selenium selenium = new DefaultSelenium("localhost", 4444, "*firefox", "http://www.yoursite.com");
selenium.start();

----------------------------------------

TITLE: No code snippets present
DESCRIPTION: This document contains meeting minutes and discussions without any actual code snippets.



----------------------------------------

TITLE: Implementing RemoteWebDriver-backed Selenium in Python
DESCRIPTION: Shows how to use RemoteWebDriver with Selenium in Python. Demonstrates creating a remote Firefox driver instance and connecting it to a Selenium object.

LANGUAGE: python
CODE:
driver = RemoteWebDriver(desired_capabilities = DesiredCapabilities.FIREFOX)
selenium = DefaultSelenium('localhost', '4444', '*webdriver', 'http://www.google.com')
selenium.start(driver = driver)

----------------------------------------

TITLE: Getting Root Logger in Java
DESCRIPTION: Demonstrates how to obtain the root logger in Java for Selenium logging.

LANGUAGE: Java
CODE:
Logger logger = Logger.getLogger("");

----------------------------------------

TITLE: BDD User Story Format Example
DESCRIPTION: A satirical example of BDD (Behavior Driven Development) user story format showing a humorous take on user frustration.

LANGUAGE: markdown
CODE:
AS an angry user\nI WANT TO punch the developer in the face\nSO THAT I CAN punch the developer in the face.

----------------------------------------

TITLE: Executing Print Operation in Java
DESCRIPTION: This code demonstrates how to execute a print operation using Selenium's PrintsPage interface in Java. It configures print options and generates a PDF representation of the web page.

LANGUAGE: Java
CODE:
PrintsPage printer = (PrintsPage) driver;
PrintOptions printOptions = new PrintOptions();
printOptions.setPageRanges(List.of("1-2"));
Byte[] pdf = printer.print(printOptions);

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Requirements file specifying the 'requests' package as a project dependency. This file is used by pip to install the required Python packages.

LANGUAGE: text
CODE:
requests

----------------------------------------

TITLE: Configuring Node with Specific Browsers
DESCRIPTION: Configuration for a Standalone server or Node with only Firefox and Chrome enabled, and a maximum of 3 sessions.

LANGUAGE: toml
CODE:
[node]
drivers = ["chrome", "firefox"]
max-sessions = 3

----------------------------------------

TITLE: Removing JavaScript Exception Handler in Ruby
DESCRIPTION: Demonstrates how to remove a previously added JavaScript exception handler in Ruby using the stored handler ID.

LANGUAGE: Ruby
CODE:
driver.remove_js_error_listener()
driver.remove_all_listeners()

----------------------------------------

TITLE: Sample HTML page with JavaScript functions
DESCRIPTION: HTML page with JavaScript functions for demonstrating Selenium IDE test cases, including alerts, confirms, prompts and new windows.

LANGUAGE: html
CODE:
<!DOCTYPE HTML>
<html>
<head>
  <script type="text/javascript">
    function output(resultText){
      document.getElementById('output').childNodes[0].nodeValue=resultText;
    }

    function show_confirm(){
      var confirmation=confirm("Chose an option.");
      if (confirmation==true){
        output("Confirmed.");
      }
      else{
        output("Rejected!");
      }
    }
    
    function show_alert(){
      alert("I'm blocking!");
      output("Alert is gone.");
    }
    function show_prompt(){
      var response = prompt("What's the best web QA tool?","Selenium");
      output(response);
    }
    function open_window(windowName){
      window.open("newWindow.html",windowName);
    }
    </script>
</head>
<body>

  <input type="button" id="btnConfirm" onclick="show_confirm()" value="Show confirm box" />
  <input type="button" id="btnAlert" onclick="show_alert()" value="Show alert" />
  <input type="button" id="btnPrompt" onclick="show_prompt()" value="Show prompt" />
  <a href="newWindow.html" id="lnkNewWindow" target="_blank">New Window Link</a>
  <input type="button" id="btnNewNamelessWindow" onclick="open_window()" value="Open Nameless Window" />
  <input type="button" id="btnNewNamedWindow" onclick="open_window('Mike')" value="Open Named Window" />

  <br />
  <span id="output">
  </span>
</body>
</html>

----------------------------------------

TITLE: Managing New Session Queue
DESCRIPTION: Endpoints for clearing and viewing the new session request queue. Clearing rejects all pending requests.

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request DELETE 'http://localhost:4444/se/grid/newsessionqueue/queue' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:4444/se/grid/newsessionqueue/queue'

----------------------------------------

TITLE: Starting Selenium Grid Hub
DESCRIPTION: Command to start the Selenium Grid hub on the default port 4444

LANGUAGE: bash
CODE:
java -jar selenium-server-standalone-<version>.jar -role hub

----------------------------------------

TITLE: Starting Selenium Grid Node
DESCRIPTION: Command to register a node with the Selenium Grid hub

LANGUAGE: bash
CODE:
java -jar selenium-server-standalone-<version>.jar -role node  -hub http://localhost:4444/grid/register

----------------------------------------

TITLE: Setting PATH Environment Variable in Bash
DESCRIPTION: Commands to add a directory containing the WebDriver executable to the PATH environment variable in Bash.

LANGUAGE: shell
CODE:
echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
source ~/.bash_profile

----------------------------------------

TITLE: Bash Script for Quickstart CI Setup
DESCRIPTION: A bash script implementation for setting up Quickstart as a continuous integration appliance, though the author recommends using Puppet or Chef instead.



----------------------------------------

TITLE: Executing Print Command with Selenium BrowsingContext
DESCRIPTION: This snippet shows how to use Selenium's BrowsingContext interface to execute the print command. It's part of Selenium's BiDi implementation and returns a String representation of the printed page.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);
String pdf = browsingContext.print(printOptions);
assertThat(pdf).isNotEmpty();

----------------------------------------

TITLE: Getting Browsing Context Realms with Selenium WebDriver BiDi (Java)
DESCRIPTION: Shows how to retrieve realms for a specific browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = ((HasBiDi) driver).getBiDi().getBrowsingContextRealms(driver.getWindowHandle());
assertFalse(realms.isEmpty());

----------------------------------------

TITLE: Implementing Selenium Manager in Java
DESCRIPTION: Comparison of previous driver setup method and new Selenium Manager usage in Java.

LANGUAGE: java
CODE:
// Previously
System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");
WebDriver driver = new ChromeDriver();

// Selenium Manager
WebDriver driver = new ChromeDriver();

----------------------------------------

TITLE: Starting Selenium RC Server
DESCRIPTION: 启动Selenium RC服务器的命令行

LANGUAGE: bash
CODE:
java -jar selenium-server-standalone-<version-number>.jar

----------------------------------------

TITLE: Redis Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up Redis cache server

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  redis:
    image: redis:bullseye
    restart: always
    ports:
      - "6379:6379"

----------------------------------------

TITLE: Running Selenium Grid Hub with Logging
DESCRIPTION: Command to start the Selenium Grid Hub with logging enabled, outputting to a specified log file for troubleshooting.

LANGUAGE: shell
CODE:
java -jar selenium-server-standalone.jar -role hub -log log.txt

----------------------------------------

TITLE: Creating Remote Selenium RC Instance
DESCRIPTION: Java code to create a Selenium RC instance connected to the grid

LANGUAGE: java
CODE:
Selenium selenium = new DefaultSelenium("localhost", 4444, "*firefox", "http://www.google.com");

----------------------------------------

TITLE: Setting Browser Capabilities
DESCRIPTION: Java code demonstrating how to set specific browser capabilities

LANGUAGE: java
CODE:
capability.setBrowserName();
capability.setPlatform();
capability.setVersion()
capability.setCapability(,);

----------------------------------------

TITLE: Python Package Data Configuration
DESCRIPTION: Reference to Python packaging system configuration for sharing testing frameworks, specifically dealing with package_data configuration to avoid common implementation issues.



----------------------------------------

TITLE: Removing a Preloaded Script with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to remove a previously preloaded script using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
((HasBiDi) driver).getBiDi().removePreloadScript(preloadScript);

----------------------------------------

TITLE: Configuring Page Range in C#
DESCRIPTION: This code shows how to set the page range for printing using Selenium's PrintOptions in C#. It uses the PageRanges property to specify which pages should be printed.

LANGUAGE: C#
CODE:
var printOptions = new PrintOptions();
printOptions.PageRanges = new[] { "1-2" };
Assert.That(printOptions.PageRanges, Is.EqualTo(new[] { "1-2" }));

----------------------------------------

TITLE: Java RemoteWebDriver with Basic Auth
DESCRIPTION: Example of using RemoteWebDriver with basic authentication in Java.

LANGUAGE: java
CODE:
ClientConfig clientConfig = ClientConfig.defaultConfig()
  .baseUrl(new URL("http://localhost:4444"))
  .authenticateAs(new UsernameAndPassword("admin", "myStrongPassword"));
HttpCommandExecutor executor = new HttpCommandExecutor(clientConfig);
RemoteWebDriver driver = new RemoteWebDriver(executor, new ChromeOptions());

----------------------------------------

TITLE: Remote WebDriver Server Interaction Examples
DESCRIPTION: Various command-line examples for interacting with RemoteWebDriver server

LANGUAGE: http
CODE:
http://localhost:8080/wd/hub/status/

LANGUAGE: telnet
CODE:
telnet localhost 8080

GET /wd/hub/status/ HTTP/1.0

LANGUAGE: bash
CODE:
curl  http://localhost:8080/wd/hub/status

LANGUAGE: bash
CODE:
wget http://localhost:8080/wd/hub/status

----------------------------------------

TITLE: Redis Docker Compose Configuration
DESCRIPTION: Docker compose configuration for setting up a Redis container

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  redis:
    image: redis:bullseye
    restart: always
    ports:
      - "6379:6379"

----------------------------------------

TITLE: HTML Structure for Selenium IDE Test Suite
DESCRIPTION: Example HTML structure for a Selenium IDE test suite containing multiple test cases

LANGUAGE: HTML
CODE:
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Sample Selenium Test Suite</title>
    </head>
    <body>
        <table cellpadding="1" cellspacing="1" border="1">
            <thead>
                <tr><td>Test Cases for De Anza A-Z Directory Links</td></tr>
            </thead>
        <tbody>
            <tr><td><a href="./a.html">A Links</a></td></tr>
            <tr><td><a href="./b.html">B Links</a></td></tr>
            <tr><td><a href="./c.html">C Links</a></td></tr>
            <tr><td><a href="./d.html">D Links</a></td></tr>
        </tbody>
        </table>
    </body>
</html>

----------------------------------------

TITLE: Defining SSL Certificate Error Codes in Firefox
DESCRIPTION: This code defines the possible error codes for SSL certificate validation in Firefox. These codes are used to determine which specific issues are present with a certificate.

LANGUAGE: javascript
CODE:
  ERROR_UNTRUSTED: 1,
  ERROR_MISMATCH: 2,
  ERROR_TIME: 4

----------------------------------------

TITLE: Preloading a Script with JavaScript
DESCRIPTION: Shows how to preload a script using Selenium WebDriver BiDi in JavaScript.

LANGUAGE: JavaScript
CODE:
const handle = await driver.preloadScript("return document.querySelector('h1').innerText")
assert.ok(handle)

----------------------------------------

TITLE: Installing HAR gem in Ruby
DESCRIPTION: This snippet shows how to install the HTTP Archive (HAR) gem in Ruby, which allows for working with HAR files in Ruby scripts.

LANGUAGE: ruby
CODE:
gem install har

----------------------------------------

TITLE: Handling Script Message Event with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to listen for and handle script message events using Selenium WebDriver BiDi. This is useful for capturing console messages and other script-generated events.

LANGUAGE: Java
CODE:
ChromeDriver driver = new ChromeDriver();
driver.get("https://www.selenium.dev/selenium/web/bidi/logEntryAdded.html");

ScriptManager scriptManager = new ScriptManager(driver);
BiDiEventManager biDiEventManager = new BiDiEventManager(driver);

CountDownLatch latch = new CountDownLatch(1);
biDiEventManager.addScriptEventListener(event -> {
    if (event instanceof Message) {
        Message message = (Message) event;
        assertThat(message.getText()).isEqualTo("console.log message");
        latch.countDown();
    }
});

scriptManager.evaluateInBrowsingContext(driver.getWindowHandle(), "console.log('console.log message')");

assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();

----------------------------------------

TITLE: Calculating Test Execution Time Formula
DESCRIPTION: A formula demonstrating how test execution time is calculated with and without Grid, showing examples of how parallel execution reduces overall test runtime. The formula accounts for number of tests, average test time, and number of nodes.

LANGUAGE: plain
CODE:
Number of Tests * Average Test Time / Number of Nodes = Total Execution Time
       15      *       45s        /        1        =      11m 15s   // Without Grid
       15      *       45s        /        5        =      2m 15s    // Grid with 5 Nodes
       15      *       45s        /        15       =      45s       // Grid with 15 Nodes
      100      *       120s       /        15       =      13m 20s   // Would take over 3 hours without Grid

----------------------------------------

TITLE: Adding JavaScript Exception Handler in Ruby
DESCRIPTION: Shows how to add a handler for JavaScript exception events in WebDriver BiDi using Ruby. The handler can be used to record or take actions when JavaScript exceptions occur.

LANGUAGE: Ruby
CODE:
driver.add_js_error_listener()

----------------------------------------

TITLE: Setting Up Test Suite Directory Structure
DESCRIPTION: Instructions for creating the required directory structure for a new WebDriver implementation, including source and test directories parallel to existing implementations.

LANGUAGE: plaintext
CODE:
browser_name/
  ├── src/java
  └── test/java

----------------------------------------

TITLE: Redis Sessions TOML Configuration
DESCRIPTION: TOML configuration file for setting up Redis-backed session storage in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
scheme = "redis"
implementation = "org.openqa.selenium.grid.sessionmap.redis.RedisBackedSessionMap"
hostname = "localhost"
port = 6379

----------------------------------------

TITLE: Running Selenium HTML Runner Headless
DESCRIPTION: Command for executing Selenium HTML-runner in headless mode using Xvfb. Includes Java command with necessary parameters for geckodriver, Firefox, and test suite execution.

LANGUAGE: shell
CODE:
xvfb-run java -Dwebdriver.gecko.driver=/home/mmasek/geckodriver.0.18.0 -jar selenium-html-runner-3.7.1.jar -htmlSuite "firefox" "https://YOUR-BASE-URL" "$(pwd)/testsuite.html" "results.html" ; grep result: -A1 results.html/firefox.results.html

----------------------------------------

TITLE: Creating WebDriverBackedSelenium from WebDriver in Java
DESCRIPTION: Instantiates a WebDriverBackedSelenium object from an existing WebDriver instance.

LANGUAGE: java
CODE:
Selenium selenium = new WebDriverBackedSelenium(driver, baseUrl);

----------------------------------------

TITLE: Setting Logger Level in C#
DESCRIPTION: Demonstrates how to set the logger level in C# for Selenium logging.

LANGUAGE: C#
CODE:
Log.Level = LogLevel.Info;

----------------------------------------

TITLE: Excluding TestNG from Selenium Maven Dependency
DESCRIPTION: Maven dependency configuration that excludes TestNG from Selenium 2.0b1 to prevent test discovery conflicts. This configuration should be added to the project's pom.xml file to resolve issues with Maven test pickup.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.seleniumhq.selenium</groupId>
  <artifactId>selenium</artifactId>
  <version>2.0b1</version>
  <exclusions>
    <exclusion>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
    </exclusion>
  </exclusions>
</dependency>

----------------------------------------

TITLE: Disowning Handles in Realm with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to disown handles in a specific realm using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
((HasBiDi) driver).getBiDi().disownScriptHandles(new DisownScriptHandlesOptions().realm(windowRealm));

----------------------------------------

TITLE: Finding Elements in Shadow DOM
DESCRIPTION: Demonstrates how to access elements within Shadow DOM using Selenium 4.0+ features.

LANGUAGE: java
CODE:
WebElement shadowHost = driver.findElement(By.cssSelector("#shadow_host"));
SearchContext shadowRoot = shadowHost.getShadowRoot();
WebElement shadowContent = shadowRoot.findElement(By.cssSelector("#shadow_content"));

LANGUAGE: python
CODE:
shadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')
shadow_root = shadow_host.shadow_root
shadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')

----------------------------------------

TITLE: Finding Elements in Shadow DOM
DESCRIPTION: Demonstrates how to access elements within Shadow DOM using Selenium 4.0+ features.

LANGUAGE: java
CODE:
WebElement shadowHost = driver.findElement(By.cssSelector("#shadow_host"));
SearchContext shadowRoot = shadowHost.getShadowRoot();
WebElement shadowContent = shadowRoot.findElement(By.cssSelector("#shadow_content"));

LANGUAGE: python
CODE:
shadow_host = driver.find_element(By.CSS_SELECTOR, '#shadow_host')
shadow_root = shadow_host.shadow_root
shadow_content = shadow_root.find_element(By.CSS_SELECTOR, '#shadow_content')

----------------------------------------

TITLE: Converting and Validating Colors in Selenium
DESCRIPTION: Shows how to convert Color objects to different formats (HEX, RGBA, RGB) and perform static validation.

LANGUAGE: Java
CODE:
assert loginButtonBackgroundColour.asHex().equals("#ff69b4");
assert loginButtonBackgroundColour.asRgba().equals("rgba(255, 105, 180, 1)");
assert loginButtonBackgroundColour.asRgb().equals("rgb(255, 105, 180)");

LANGUAGE: Python
CODE:
assert login_button_background_colour.hex == '#ff69b4'
assert login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)'
assert login_button_background_colour.rgb == 'rgb(255, 105, 180)'

LANGUAGE: Ruby
CODE:
assert(login_button_background_colour.hex == '#ff69b4')
assert(login_button_background_colour.rgba == 'rgba(255, 105, 180, 1)')
assert(login_button_background_colour.rgb == 'rgb(255, 105, 180)')

LANGUAGE: Kotlin
CODE:
assert(loginButtonBackgroundColour.asHex().equals("#ff69b4"))
assert(loginButtonBackgroundColour.asRgba().equals("rgba(255, 105, 180, 1)"))
assert(loginButtonBackgroundColour.asRgb().equals("rgb(255, 105, 180)"))

----------------------------------------

TITLE: Draining a Node Directly in Selenium Grid
DESCRIPTION: This command directly drains a node, waiting for ongoing sessions to complete before stopping the node.

LANGUAGE: shell
CODE:
cURL --request POST 'http://localhost:5555/se/grid/node/drain' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request POST 'http://<node-URL>/se/grid/node/drain' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Querying Selenium Grid Current Session Count
DESCRIPTION: Demonstrates how to query the current session count from the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ grid { sessionCount } }"}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: HTML Test Suite Structure Example
DESCRIPTION: Example HTML structure for a Selenium test suite file that contains test scenario references.

LANGUAGE: html
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
  <title>Test Suite</title>
</head>
<body>
<table id="suiteTable" cellpadding="1" cellspacing="1" border="1" class="selenium"><tbody>
<tr><td><b>Test Suite</b></td></tr>
<tr><td><a href="YOUR-TEST-SCENARIO.html">YOUR-TEST-SCENARIO</a></td></tr>
</tbody></table>
</body>
</html>

----------------------------------------

TITLE: Starting Selenium Grid Hub
DESCRIPTION: Command to start the Selenium Grid Hub using the standalone JAR file. The hub will listen on port 4444 by default.

LANGUAGE: shell
CODE:
java -jar selenium-server-standalone.jar -role hub

----------------------------------------

TITLE: Legacy Headless Browser Configuration in Selenium
DESCRIPTION: Examples of the deprecated convenience method for enabling headless mode across different programming languages. This approach will be removed in Selenium 4.10.0.

LANGUAGE: Java
CODE:
ChromeOptions options = new ChromeOptions();
options.setHeadless(true);
WebDriver driver = new ChromeDriver(options);
driver.get("https://selenium.dev");
driver.quit();

LANGUAGE: JavaScript
CODE:
let driver = await env
  .builder()
  .setChromeOptions(new chrome.Options().headless())
  .build();
await driver.get('https://selenium.dev');
await driver.quit();

LANGUAGE: Ruby
CODE:
options = Selenium::WebDriver::Chrome::Options.new
options.headless!
driver = Selenium::WebDriver.for :chrome, options: options
driver.get('https://selenium.dev')
driver.quit

LANGUAGE: Python
CODE:
options = ChromeOptions()
options.headless = True
driver = webdriver.Chrome(options=options)
driver.get('http://selenium.dev')
driver.quit()

----------------------------------------

TITLE: Adding Selenium Server Maven Dependency
DESCRIPTION: Maven dependency configuration for embedding Selenium server within the project, necessary when using DefaultSelenium or RemoteWebDriver implementations.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-server</artifactId>
    <version>2.0a5</version>
</dependency>

----------------------------------------

TITLE: Disowning Handles in Realm with Java
DESCRIPTION: Demonstrates disowning handles in a specific realm using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
driver.disownScriptHandles(realm);

----------------------------------------

TITLE: Accessing Selenium Grid Distributor Component Help
DESCRIPTION: This command provides component-specific configuration information for the Distributor role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar distributor --help

----------------------------------------

TITLE: Finding Multiple Elements and Iterating in JavaScript
DESCRIPTION: Shows how to find multiple elements matching a tag name and iterate through them using Selenium WebDriver in JavaScript.

LANGUAGE: JavaScript
CODE:
const {Builder, By} = require('selenium-webdriver');
(async function example() {
    let driver = await new Builder().forBrowser('firefox').build();
    try {
        // Navigate to Url
        await driver.get('https://www.example.com');

        // Get all the elements available with tag 'p'
        let elements = await driver.findElements(By.css('p'));
        for(let e of elements) {
            console.log(await e.getText());
        }
    }
    finally {
        await driver.quit();
    }
})();

----------------------------------------

TITLE: Checking Node Status
DESCRIPTION: Performs health-check of a node, returning information about availability, sessions and slots.

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:5555/status'

----------------------------------------

TITLE: Querying Specific Session Information in Selenium Grid
DESCRIPTION: Demonstrates how to query information for a specific session in the Selenium Grid using GraphQL.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" --data '{"query":"{ session (id: \"<session-id>\") { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis, slot { id, stereotype, lastStarted } } } "}' -s <LINK_TO_GRAPHQL_ENDPOINT>

----------------------------------------

TITLE: Running Selenium HTML-runner Headless
DESCRIPTION: Shell commands demonstrating how to execute selenium-html-runner in headless mode using Xvfb, including command syntax and example output.

LANGUAGE: shell
CODE:
xvfb-run java -Dwebdriver.gecko.driver=/home/mmasek/geckodriver.0.18.0 -jar selenium-html-runner-3.7.1.jar -htmlSuite "firefox" "https://YOUR-BASE-URL" "$(pwd)/testsuite.html" "results.html" ; grep result: -A1 results.html/firefox.results.html

LANGUAGE: shell
CODE:
[user@localhost ~]$ xvfb-run java -Dwebdriver.gecko.driver=/home/mmasek/geckodriver.0.18.0 -jar selenium-html-runner-3.7.1.jar -htmlSuite "*firefox" "https://YOUR-BASE-URL" "$(pwd)/testsuite.html" "results.html" ; grep result: -A1 results.html/firefox.results.html
Multi-window mode is longer used as an option and will be ignored.
1510061109691   geckodriver     INFO    geckodriver 0.18.0
1510061109708   geckodriver     INFO    Listening on 127.0.0.1:2885
1510061110162   geckodriver::marionette INFO    Starting browser /usr/bin/firefox with args ["-marionette"]
1510061111084   Marionette      INFO    Listening on port 43229
1510061111187   Marionette      WARN    TLS certificate errors will be ignored for this session
Nov 07, 2017 1:25:12 PM org.openqa.selenium.remote.ProtocolHandshake createSession
INFO: Detected dialect: W3C
2017-11-07 13:25:12.714:INFO::main: Logging initialized @3915ms to org.seleniumhq.jetty9.util.log.StdErrLog
2017-11-07 13:25:12.804:INFO:osjs.Server:main: jetty-9.4.z-SNAPSHOT
2017-11-07 13:25:12.822:INFO:osjsh.ContextHandler:main: Started o.s.j.s.h.ContextHandler@87a85e1{/tests,null,AVAILABLE}
2017-11-07 13:25:12.843:INFO:osjs.AbstractConnector:main: Started ServerConnector@52102734{HTTP/1.1,[http/1.1]}{0.0.0.0:31892}
2017-11-07 13:25:12.843:INFO:osjs.Server:main: Started @4045ms
Nov 07, 2017 1:25:13 PM org.openqa.selenium.server.htmlrunner.CoreTestCase run
INFO: |open | /auth_mellon.php |  |
Nov 07, 2017 1:25:14 PM org.openqa.selenium.server.htmlrunner.CoreTestCase run
INFO: |waitForPageToLoad | 3000 |  |
.
.
.etc

<td>result:</td>
<td>PASS</td>

----------------------------------------

TITLE: Sample HTML Page with JavaScript Functions
DESCRIPTION: An example HTML page with JavaScript functions for showing alerts, confirms, prompts and opening new windows. Used to demonstrate Selenium IDE commands.

LANGUAGE: html
CODE:
<!DOCTYPE HTML>
<html>
<head>
  <script type="text/javascript">
    function output(resultText){
      document.getElementById('output').childNodes[0].nodeValue=resultText;
    }

    function show_confirm(){
      var confirmation=confirm("Chose an option.");
      if (confirmation==true){
        output("Confirmed.");
      }
      else{
        output("Rejected!");
      }
    }
    
    function show_alert(){
      alert("I'm blocking!");
      output("Alert is gone.");
    }
    function show_prompt(){
      var response = prompt("What's the best web QA tool?","Selenium");
      output(response);
    }
    function open_window(windowName){
      window.open("newWindow.html",windowName);
    }
    </script>
</head>
<body>

  <input type="button" id="btnConfirm" onclick="show_confirm()" value="Show confirm box" />
  <input type="button" id="btnAlert" onclick="show_alert()" value="Show alert" />
  <input type="button" id="btnPrompt" onclick="show_prompt()" value="Show prompt" />
  <a href="newWindow.html" id="lnkNewWindow" target="_blank">New Window Link</a>
  <input type="button" id="btnNewNamelessWindow" onclick="open_window()" value="Open Nameless Window" />
  <input type="button" id="btnNewNamedWindow" onclick="open_window('Mike')" value="Open Named Window" />

  <br />
  <span id="output">
  </span>
</body>
</html>

----------------------------------------

TITLE: Getting page title
DESCRIPTION: Send a GET request to retrieve the current page title.

LANGUAGE: HTTP
CODE:
GET /session/:sessionId/title

----------------------------------------

TITLE: Creating Code Tabs with Docsy in HTML
DESCRIPTION: Shows how to create language-specific code tabs using Docsy shortcodes in Hugo. This example includes tabs for Java, Python, C#, Ruby, JavaScript, and Kotlin.

LANGUAGE: HTML
CODE:
{{</* tabpane langEqualsHeader=true */>}}
  {{</* tab header="Java" */>}}
    WebDriver driver = new ChromeDriver();
  {{</* /tab */>}}
  {{</* tab header="Python" */>}}
    driver = webdriver.Chrome()
  {{</* /tab */>}}
  {{</* tab header="CSharp" */>}}
    var driver = new ChromeDriver();
  {{</* /tab */>}}
  {{</* tab header="Ruby" */>}}
    driver = Selenium::WebDriver.for :chrome
  {{</* /tab */>}}
  {{</* tab header="JavaScript" */>}}
    let driver = await new Builder().forBrowser('chrome').build();
  {{</* /tab */>}}
  {{</* tab header="Kotlin" */>}}
    val driver = ChromeDriver()
  {{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Evaluating Script in Sandbox with Java
DESCRIPTION: Demonstrates evaluating a script in a sandbox environment using Selenium WebDriver BiDi in Java. This example shows creating a sandbox and executing a script within it.

LANGUAGE: Java
CODE:
Sandbox sandbox = new Sandbox();
ScriptResult result = driver.executeScript("return 'Hello from sandbox'", sandbox);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("Hello from sandbox");

----------------------------------------

TITLE: Customizing Driver Configurations
DESCRIPTION: Standalone or Node server configuration with customized drivers, including different browser versions and binaries.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false
[[node.driver-configuration]]
max-sessions = 100
display-name = "Firefox Nightly"
stereotype = "{\"browserName\": \"firefox\", \"browserVersion\": \"93\", \"platformName\": \"MAC\", \"moz:firefoxOptions\": {\"binary\": \"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\"}}"
[[node.driver-configuration]]
display-name = "Chrome Beta"
stereotype = "{\"browserName\": \"chrome\", \"browserVersion\": \"94\", \"platformName\": \"MAC\", \"goog:chromeOptions\": {\"binary\": \"/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta\"}}"
[[node.driver-configuration]]
display-name = "Chrome Dev"
stereotype = "{\"browserName\": \"chrome\", \"browserVersion\": \"95\", \"platformName\": \"MAC\", \"goog:chromeOptions\": {\"binary\": \"/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev\"}}"
webdriver-executable = '/path/to/chromedriver/95/chromedriver'

----------------------------------------

TITLE: Opening a New Window in Java
DESCRIPTION: Creates a new browsing context in a new window using Selenium WebDriver BiDi.

LANGUAGE: Java
CODE:
BiDi bidi = ((HasBiDi) driver).getBiDi();
BrowsingContext browsingContext = new BrowsingContext(bidi, null, WINDOW);
String windowHandle = browsingContext.id();
assertNotNull(windowHandle);

----------------------------------------

TITLE: Running Selenium Server with Fine Logging Level
DESCRIPTION: This command runs the Selenium server in standalone mode with the log level set to FINE, which enables more detailed logging including trace information.

LANGUAGE: shell
CODE:
java -jar selenium-server-4.0.0-<selenium-version>.jar standalone --log-level FINE

----------------------------------------

TITLE: Slot Object JSON Structure
DESCRIPTION: Defines the structure and fields of the Slot object that represents a single session slot within a Selenium Grid Node.

LANGUAGE: json
CODE:
{
  "id": "string",
  "lastStarted": "string",
  "stereotype": {
    "browserName": "string"
  },
  "session": {}
}

----------------------------------------

TITLE: Finding an element
DESCRIPTION: Send a POST request to find an element on the page using a locator strategy. Returns a WebElement JSON object.

LANGUAGE: HTTP
CODE:
POST /session/:sessionId/element

Request Body:
{
  "using": "css selector", 
  "value": "#login-button"
}

----------------------------------------

TITLE: テストスイートHTMLの構造
DESCRIPTION: 4つのテストケースを含むテストスイートのHTMLファイル構造を示します。

LANGUAGE: html
CODE:
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Sample Selenium Test Suite</title>
    </head>
    <body>
        <table cellpadding="1" cellspacing="1" border="1">
            <thead>
                <tr><td>Test Cases for De Anza A-Z Directory Links</td></tr>
            </thead>
        <tbody>
            <tr><td><a href="./a.html">A Links</a></td></tr>
            <tr><td><a href="./b.html">B Links</a></td></tr>
            <tr><td><a href="./c.html">C Links</a></td></tr>
            <tr><td><a href="./d.html">D Links</a></td></tr>
        </tbody>
        </table>
    </body>
</html>

----------------------------------------

TITLE: Starting Selenium Grid Node
DESCRIPTION: Command to start a Selenium Grid Node, which will detect available drivers from the system PATH.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar node

----------------------------------------

TITLE: Evaluating Script in Sandbox with JavaScript
DESCRIPTION: Shows how to evaluate a script in a sandbox environment using Selenium WebDriver BiDi in JavaScript. This example demonstrates creating a sandbox and executing a script within it.

LANGUAGE: JavaScript
CODE:
const sandbox = new Sandbox()
const result = await driver.executeScript('return \'Hello from sandbox\'', sandbox)
assert.strictEqual(result, 'Hello from sandbox')

const result2 = await driver.executeScript('return this', sandbox)
assert.strictEqual(result2, null)

----------------------------------------

TITLE: Configuring Chrome Logging
DESCRIPTION: Demonstrates how to configure logging for Chrome, including setting log levels and output destinations.

LANGUAGE: Java
CODE:
ChromeDriverService service = new ChromeDriverService.Builder()
    .withLogFile(new File("/path/to/chromedriver.log"))
    .withLogLevel(ChromiumDriverLogLevel.DEBUG)
    .build();

LANGUAGE: Python
CODE:
service = Service(log_path='/path/to/chromedriver.log', log_level='DEBUG')

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new(
  log_path: '/path/to/chromedriver.log',
  log_level: :debug
)

----------------------------------------

TITLE: PostgreSQL Sessions TOML Configuration
DESCRIPTION: TOML configuration file for PostgreSQL-backed session storage in Selenium Grid

LANGUAGE: toml
CODE:
[sessions]
implementation = "org.openqa.selenium.grid.sessionmap.jdbc.JdbcBackedSessionMap"
jdbc-url = "jdbc:postgresql://localhost:5432/selenium_sessions"
jdbc-user = "seluser"
jdbc-password = "seluser"

----------------------------------------

TITLE: Starting Custom Node with Uber Jar
DESCRIPTION: Command to start a custom Selenium Grid node using an uber jar implementation.

LANGUAGE: bash
CODE:
java -jar custom_node-server.jar node \
--node-implementation org.seleniumhq.samples.DecoratedLoggingNode

----------------------------------------

TITLE: Session Object JSON Structure
DESCRIPTION: Defines the structure and fields of the Session object that represents a running session within a slot in Selenium Grid.

LANGUAGE: json
CODE:
{
  "capabilities": {},
  "startTime": "string",
  "stereotype": {
    "browserName": "string"
  },
  "uri": "string"
}

----------------------------------------

TITLE: Clicking an element
DESCRIPTION: Send a POST request to click on an element.

LANGUAGE: HTTP
CODE:
POST /session/:sessionId/element/:id/click

----------------------------------------

TITLE: Selenium Test Suite HTML Structure
DESCRIPTION: Example HTML structure for a Selenium test suite file that can be executed by the HTML runner.

LANGUAGE: html
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
  <title>Test Suite</title>
</head>
<body>
<table id="suiteTable" cellpadding="1" cellspacing="1" border="1" class="selenium"><tbody>
<tr><td><b>Test Suite</b></td></tr>
<tr><td><a href="YOUR-TEST-SCENARIO.html">YOUR-TEST-SCENARIO</a></td></tr>
</tbody></table>
</body>
</html>

----------------------------------------

TITLE: Writing JMeter Test Plans in Ruby
DESCRIPTION: This snippet refers to writing JMeter test plans using Ruby. It allows for creating performance test scenarios using Ruby syntax instead of JMeter's XML format, potentially simplifying the process of writing and maintaining performance tests.

LANGUAGE: Ruby
CODE:
# Writing JMeter test plans in Ruby
# Specific code not provided in the original text

----------------------------------------

TITLE: Evaluating Script in Realm with Java
DESCRIPTION: Demonstrates evaluating a script in a specific realm using Selenium WebDriver BiDi in Java. This example shows getting realms, selecting a specific realm, and executing a script within it.

LANGUAGE: Java
CODE:
List<Realm> realms = driver.getRealms();
Realm realm = realms.stream().filter(r -> r.getOrigin().contains("selenium.dev")).findFirst().orElseThrow();

ScriptResult result = driver.executeScript("return document.body.getAttribute('bgcolor')", realm);

assertThat(result.getResultType()).isEqualTo(EvaluateResultType.SUCCESS);
assertThat(result.getResponse().get("result").getAsJsonObject().get("value").getAsString()).isEqualTo("#FFFFFF");

----------------------------------------

TITLE: Finding an Element Within Another Element in Python
DESCRIPTION: Shows how to locate an element within a specific container element using Selenium WebDriver in Python.

LANGUAGE: Python
CODE:
fruits = driver.find_element(By.ID, "fruits")
fruit = fruits.find_element(By.CLASS_NAME,"tomatoes")

----------------------------------------

TITLE: Finding an Element Within Another Element in Python
DESCRIPTION: Shows how to locate an element within a specific container element using Selenium WebDriver in Python.

LANGUAGE: Python
CODE:
fruits = driver.find_element(By.ID, "fruits")
fruit = fruits.find_element(By.CLASS_NAME,"tomatoes")

----------------------------------------

TITLE: Performing Click and Release Action in Selenium
DESCRIPTION: This method combines moving to the center of an element with pressing and releasing the left mouse button. It's equivalent to clicking on an element.

LANGUAGE: Java
CODE:
WebElement clickable = driver.findElement(By.id("clickable"));
new Actions(driver)
        .click(clickable)
        .perform();

----------------------------------------

TITLE: Running Standalone Chromium Docker Container for Selenium
DESCRIPTION: This command runs a Selenium standalone Chromium container with port mappings for VNC and noVNC access, and sets the shared memory size.

LANGUAGE: bash
CODE:
$ docker run --rm -it -p 4444:4444 -p 5900:5900 -p 7900:7900 --shm-size 2g selenium/standalone-chromium:latest

----------------------------------------

TITLE: Listing Selenium Grid Commands
DESCRIPTION: This command displays all available Selenium Grid commands and their descriptions.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar --config-help

----------------------------------------

TITLE: Inserting Alert Content in HTML
DESCRIPTION: Demonstrates how to add alert content to direct potential contributors to missing content using Hugo shortcodes.

LANGUAGE: HTML
CODE:
{{</* alert-content /*/>}}

LANGUAGE: HTML
CODE:
{{</* alert-content */>}}
Additional information about what specific content is needed
{{</* /alert-content */>}}

----------------------------------------

TITLE: Python Selenium Manager Implementation
DESCRIPTION: Demonstrates Selenium Manager usage in Python versus the previous method

LANGUAGE: Python
CODE:
# Previously
service = Service(executable_path='/path/to/chromedriver')
driver = webdriver.Chrome(service=service)

# With Selenium Manager
driver = webdriver.Chrome()

----------------------------------------

TITLE: Implementing File Upload for Remote WebDriver
DESCRIPTION: Configuration for handling file uploads in remote sessions using LocalFileDetector.

LANGUAGE: Java
CODE:
((RemoteWebDriver) driver).setFileDetector(new LocalFileDetector());
WebElement upload = driver.findElement(By.cssSelector("[type=file]"));
upload.sendKeys("my/file/path.txt");

----------------------------------------

TITLE: Pushing Changes to Fork
DESCRIPTION: Command to push local changes to the forked repository.

LANGUAGE: shell
CODE:
% git push origin my-feature-branch

----------------------------------------

TITLE: Standalone Server Configuration
DESCRIPTION: Configures a standalone Selenium server with custom port and session timeout settings.

LANGUAGE: toml
CODE:
[server]
port = 4449

[sessionqueue]
session-request-timeout = 500

----------------------------------------

TITLE: Executing Print Command with Selenium PrintsPage
DESCRIPTION: This code demonstrates how to execute the print command using Selenium's PrintsPage interface. It generates a PDF representation of the web page and returns the data in base64-encoded format.

LANGUAGE: Java
CODE:
PrintOptions printOptions = new PrintOptions();
printOptions.setOrientation(PrintOptions.Orientation.LANDSCAPE);
String pdf = ((PrintsPage) driver).print(printOptions);
assertThat(pdf).isNotEmpty();

----------------------------------------

TITLE: Example URLs for Selenium API Documentation
DESCRIPTION: URLs referencing Selenium API documentation for Actions class, RenderedWebElement, and WebElement getValue method

LANGUAGE: text
CODE:
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/Actions.html
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getValue()

----------------------------------------

TITLE: Accessing Selenium Grid Standalone Component Help
DESCRIPTION: This command provides component-specific configuration information for the Standalone role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar standalone --help

----------------------------------------

TITLE: Implementing Alert Content in HTML
DESCRIPTION: Demonstrates how to add alert boxes to highlight missing content in the documentation using HTML shortcodes.

LANGUAGE: html
CODE:
{{</* alert-content /*/>}}

LANGUAGE: html
CODE:
{{</* alert-content */>}}
Additional information about what specific content is needed
{{</* /alert-content */>}}

----------------------------------------

TITLE: Selenium Manager Configuration Example
DESCRIPTION: Sample TOML configuration file showing various Selenium Manager settings

LANGUAGE: TOML
CODE:
# Location of browser binaries
chrome-path = "/usr/bin/google-chrome"
firefox-path = "/usr/bin/firefox"

# Browser version specified by user
chrome-version = "113"
firefox-version = "esr"

# Timeout in seconds
timeout = 120

# Show debug messages
debug = true

# Custom browser locations
proxy = "http://myproxy:8080"
cache-path = "/path/to/cache"
ttl = 7200

----------------------------------------

TITLE: Configuring Background Printing in C#
DESCRIPTION: This code demonstrates how to enable or disable background printing using Selenium's PrintOptions in C#. It uses the Background property to control whether background colors and images are included in the print output.

LANGUAGE: C#
CODE:
var printOptions = new PrintOptions();
printOptions.Background = true;
Assert.That(printOptions.Background, Is.True);

----------------------------------------

TITLE: Implementing Alert Listener with WebDriverListener in Java
DESCRIPTION: This snippet demonstrates how to implement an AlertListener using the new WebDriverListener interface, which allows for implementing only the necessary methods using the 'default' keyword.

LANGUAGE: java
CODE:
// Old approach
public class AlertListener implements WebDriverEventListener {
    @Override
    public void beforeAlertAccept(final WebDriver driver) {
        // custom implementation goes here
    }
// implement every method in interface
}

// New approach
public class AlertListener implements WebDriverListener {
    @Override
    public void beforeAccept(Alert alert) {
        // custom implementation goes here
    }
// does not need to implement every method in interface
}

----------------------------------------

TITLE: Listing Downloadable Files in Remote WebDriver for Java
DESCRIPTION: Retrieves a list of downloadable files available in the current Remote WebDriver session.

LANGUAGE: Java
CODE:
List<String> files = ((HasDownloads) driver).getDownloadableFiles();

----------------------------------------

TITLE: Creating Feature Branch
DESCRIPTION: Command to create and checkout a new feature branch for development.

LANGUAGE: shell
CODE:
% git checkout -b my-feature-branch

----------------------------------------

TITLE: Python ActionChains Usage for Mouse Hover in Selenium
DESCRIPTION: Demonstrates how to perform mouse hover actions using Selenium's ActionChains in Python bindings, which is a lesser-known feature for handling complex mouse interactions.



----------------------------------------

TITLE: Accessing Selenium Grid New Session Queue Component Help
DESCRIPTION: This command provides component-specific configuration information for the New Session Queue role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar sessionqueue --help

----------------------------------------

TITLE: Using Markdown in Docsy Tabs with HTML
DESCRIPTION: Illustrates how to include Markdown content within Docsy tabs by modifying the Hugo syntax and using the text=true parameter.

LANGUAGE: HTML
CODE:
{{</* tabpane text=true */>}}
{{%/* tab header="Java" */%}}
1. Start the driver
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L12" */>}}
2. Navigate to a page
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L14" */>}}
3. Quit the driver
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L29" */>}}
{{%/* /tab */%}}
< ... >
{{</* /tabpane */>}}

----------------------------------------

TITLE: Network Response Transformation in Selenium with CDP
DESCRIPTION: Demonstrates how to intercept and transform network responses using Chrome DevTools Protocol in Selenium. This can be used for testing different scenarios or modifying content before it reaches the browser.

LANGUAGE: Java
CODE:
devTools.addListener(Fetch.requestPaused(), request -> {
    String mockedResponse = "{\"name\": \"Selenium\"}";
    devTools.send(Fetch.fulfillRequest(request.getRequestId(), 200,
            List.of(), Optional.of(mockedResponse), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()));
});

devTools.send(Fetch.enable(Optional.empty(), Optional.empty()));

driver.get("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");
WebElement element = driver.findElement(By.id("requestButton"));
element.click();
Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(10));
wait.until(d -> d.findElement(By.id("requestResponse")).getText().equals("{\"name\": \"Selenium\"}"));

LANGUAGE: C#
CODE:
var mockResponse = "{\"name\": \"Selenium\"}";

driver.ExecuteCdpCommand("Fetch.enable", new Dictionary<string, object>());

driver.ExecuteCdpCommand("Fetch.requestPaused", new Dictionary<string, object>());

driver.Navigate().GoToUrl("https://www.selenium.dev/selenium/web/bidi/diagnostics.html");

var element = driver.FindElement(By.Id("requestButton"));
element.Click();

Wait.Until(d => d.FindElement(By.Id("requestResponse")).Text == mockResponse);

LANGUAGE: Ruby
CODE:
driver.execute_cdp('Fetch.enable')

driver.on_cdp_event('Fetch.requestPaused') do |params|
  driver.execute_cdp('Fetch.fulfillRequest',
                    requestId: params['requestId'],
                    responseCode: 200,
                    responseHeaders: [],
                    body: Base64.strict_encode64('{"name": "Selenium"}'))
end

----------------------------------------

TITLE: Logging in FirefoxDriver JavaScript Extension
DESCRIPTION: These JavaScript snippets show how to log information and dump object details in the FirefoxDriver extension code. They use utility methods provided by the extension framework.

LANGUAGE: javascript
CODE:
Utils.dumpn(); // Log information to the console
Utils.dump(); // Examine an object in detail

----------------------------------------

TITLE: Performing Actions in Selenium WebDriver BiDi (Java)
DESCRIPTION: This snippet demonstrates how to perform actions using Selenium WebDriver BiDi in Java. It creates an Actions object and performs a sequence of actions including moving the mouse and clicking.

LANGUAGE: Java
CODE:
Actions actions = new Actions(driver);
actions.moveByOffset(100, 100).click().perform();

----------------------------------------

TITLE: Verifying Session Ownership
DESCRIPTION: Checks if a given session belongs to a specific node, returns true if the session belongs to the node, false otherwise.

LANGUAGE: shell
CODE:
cURL --request GET 'http://localhost:5555/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET: <secret>'

LANGUAGE: shell
CODE:
cURL --request GET 'http://<node-URL>/se/grid/node/owner/<session-id>' --header 'X-REGISTRATION-SECRET;'

----------------------------------------

TITLE: Accessing Function Arguments in Python
DESCRIPTION: Reference to a gist showing how to get function arguments in Python, mentioned as a useful but potentially code smell technique.

LANGUAGE: python
CODE:
# Note: Original code is referenced via gist link but not shown in the text

----------------------------------------

TITLE: Simulating Keyboard and Mouse Input in IE Driver (C++)
DESCRIPTION: This code snippet demonstrates how keyboard and mouse input is simulated in the IE Driver using PostMessages to push window events onto the message queue of the IE instance. It highlights the complexities of handling key press events and ensuring correct event order.

LANGUAGE: cpp
CODE:
// Key files: interactions.cpp

// Code for simulating keyboard and mouse input
// Note: This is a reference to the file, not the actual code snippet
// The actual implementation can be found in the mentioned file

----------------------------------------

TITLE: Creating Multi-Language Code Tabs
DESCRIPTION: Demonstrates how to implement language-specific code tabs using Docsy's tabpane shortcode with auto-formatting based on language headers.

LANGUAGE: HTML
CODE:
{{</* tabpane langEqualsHeader=true */>}}
{{</* tab header="Java" */>}}
WebDriver driver = new ChromeDriver();
{{</* /tab */>}}
{{</* tab header="Python" */>}}
driver = webdriver.Chrome()
{{</* /tab */>}}
{{</* tab header="CSharp" */>}}
var driver = new ChromeDriver();
{{</* /tab */>}}
{{</* tab header="Ruby" */>}}
driver = Selenium::WebDriver.for :chrome
{{</* /tab */>}}
{{</* tab header="JavaScript" */>}}
let driver = await new Builder().forBrowser('chrome').build();
{{</* /tab */>}}
{{</* tab header="Kotlin" */>}}
val driver = ChromeDriver()
{{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Asserting Boolean Attributes (Post-1.0.10)
DESCRIPTION: Updated syntax for checking boolean attributes in Selenium IDE 1.0.10, which now returns true/false instead of the attribute value.

LANGUAGE: selenese
CODE:
assertAttribute | checkbox@checked | true

----------------------------------------

TITLE: Cancelling Network Request at Authentication Phase in Selenium WebDriver
DESCRIPTION: This snippet demonstrates how to cancel a request blocked at the authRequired phase using Selenium WebDriver's bidirectional API.

LANGUAGE: Java
CODE:
NetworkInterceptor interceptor = driver.getNetworkInterceptor();
interceptor.addAuthHandler("*", request -> {
    return interceptor.cancelAuth(request);
});
driver.get("https://the-internet.herokuapp.com/basic_auth");
assertThat(driver.getTitle()).isEqualTo("The Internet");

----------------------------------------

TITLE: Basic Grid Component CLI Usage
DESCRIPTION: Template for using command-line flags to configure Grid components

LANGUAGE: bash
CODE:
java -jar selenium-server-<version>.jar <component> --<option> value

----------------------------------------

TITLE: Performing Actions in Java with Selenium WebDriver BiDi
DESCRIPTION: This snippet demonstrates how to perform actions using the Selenium WebDriver BiDi API in Java. It creates an Actions object and performs a click action on a specific element.

LANGUAGE: java
CODE:
Actions actions = new Actions(driver);
actions.moveToElement(driver.findElement(By.id("clickable")));
actions.click();
actions.perform();

----------------------------------------

TITLE: Importing Color Class in Selenium
DESCRIPTION: Shows how to import the Color class for different programming languages supported by Selenium.

LANGUAGE: Java
CODE:
import org.openqa.selenium.support.Color;

LANGUAGE: Python
CODE:
from selenium.webdriver.support.color import Color

LANGUAGE: Ruby
CODE:
include Selenium::WebDriver::Support

LANGUAGE: Kotlin
CODE:
import org.openqa.selenium.support.Color

----------------------------------------

TITLE: Regression Testing Reddit with Selenium WebDriver in Ruby
DESCRIPTION: This snippet demonstrates how to perform regression testing on the Reddit website using Selenium WebDriver with Ruby bindings and RSpec. It goes beyond basic Google search examples to illustrate more complex automation scenarios.

LANGUAGE: ruby
CODE:
# Code not provided in the original text, but referenced as being available via a link

----------------------------------------

TITLE: Simulating Keyboard and Mouse Input in IE Driver (C++)
DESCRIPTION: This code snippet is responsible for simulating keyboard and mouse input at the OS level for the Internet Explorer Driver. It uses PostMessages to push window events onto the message queue of the IE instance, with special handling for key press events.

LANGUAGE: cpp
CODE:
// Key files: interactions.cpp

// Code not provided in the original text, but it would be located in:
// https://github.com/SeleniumHQ/selenium/blob/master/cpp/webdriver-interactions/interactions.cpp

----------------------------------------

TITLE: Executing Specific Selenium Java Example with Maven in Bash
DESCRIPTION: This command runs a specific Selenium Java example using Maven. The example class name should be replaced with the desired test to run.

LANGUAGE: bash
CODE:
mvn exec:java -D"exec.mainClass"="dev.selenium.getting_started.FirstScript" -D"exec.classpathScope"=test

----------------------------------------

TITLE: Code Reference: WebDriver getAttribute Method
DESCRIPTION: Reference to WebDriver's getAttribute method signature showing its dual property/attribute return behavior.

LANGUAGE: java
CODE:
org.openqa.selenium.WebElement.getAttribute(java.lang.String)

----------------------------------------

TITLE: Configuring Selenium Grid Hub with JSON
DESCRIPTION: Example JSON configuration file for the Selenium Grid Hub, specifying various options such as host, port, and session limits.

LANGUAGE: json
CODE:
{
  "_comment" : "Configuration for Hub - hubConfig.json",
  "host": ip,
  "maxSession": 5,
  "port": 4444,
  "cleanupCycle": 5000,
  "timeout": 300000,
  "newSessionWaitTimeout": -1,
  "servlets": [],
  "prioritizer": null,
  "capabilityMatcher": "org.openqa.grid.internal.utils.DefaultCapabilityMatcher",
  "throwOnCapabilityNotPresent": true,
  "nodePolling": 180000,
  "platform": "WINDOWS"
}

----------------------------------------

TITLE: Configuring Docker for Selenium Grid
DESCRIPTION: Configuration for a Standalone or Node server to run sessions in Docker containers, with custom image mappings and device configurations.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false
max-sessions = 2

[docker]
configs = [
    "selenium/standalone-chrome:93.0", "{\"browserName\": \"chrome\", \"browserVersion\": \"91\"}", 
    "selenium/standalone-firefox:92.0", "{\"browserName\": \"firefox\", \"browserVersion\": \"92\"}"
]
#devices = [
#    "/dev/kvm:/dev/kvm"
#]
url = "http://localhost:2375"
video-image = "selenium/video:latest"

----------------------------------------

TITLE: JavaScript Window Event Handling in Selenium
DESCRIPTION: Code for handling window.onbeforeunload prompts in Selenium WebDriver tests

LANGUAGE: javascript
CODE:
window.onbeforeunload

----------------------------------------

TITLE: Illustrating Maven POM configuration for Selenium tests in XML
DESCRIPTION: This code snippet shows a portion of a Maven POM (Project Object Model) configuration for running Selenium tests. It includes dependencies and plugin configurations, though the exact details are not fully visible in the given context.

LANGUAGE: xml
CODE:
<pom.xml>

----------------------------------------

TITLE: Running Remote Debug Session for Firefox Tests
DESCRIPTION: Command to start Firefox tests in debug mode with remote debugging enabled

LANGUAGE: bash
CODE:
./go debug=true suspend=true test_firefox

----------------------------------------

TITLE: Cloning Selenium Repository
DESCRIPTION: This command clones the Selenium repository from GitHub to the local machine.

LANGUAGE: bash
CODE:
git clone https://github.com/SeleniumHQ/seleniumhq.github.io.git

----------------------------------------

TITLE: Finding an Available Port in Shell
DESCRIPTION: A shell script that finds a valid and unused port to listen on. This can be useful for setting up Selenium Grid nodes.

LANGUAGE: shell
CODE:
find a valid and unused port to listen on

----------------------------------------

TITLE: Running Selenium Server Tracing Info Command
DESCRIPTION: Command to display detailed instructions for setting up Jaeger with Selenium server for trace visualization

LANGUAGE: java
CODE:
java -jar selenium-server-<selenium-version>.jar info tracing

----------------------------------------

TITLE: Firefox Extension Installation
DESCRIPTION: Code example showing how to start Firefox with an extension installed

LANGUAGE: java
CODE:
FirefoxProfile profile = new FirefoxProfile()
profile.addExtension(....);

WebDriver driver = new FirefoxDriver(profile);

----------------------------------------

TITLE: Installing Node Dependencies
DESCRIPTION: Command to install required Node.js dependencies for running Selenium tests

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Code Reference: Selenium getAttribute Method
DESCRIPTION: Reference to Selenium 1's getAttribute method signature showing its focused attribute value return behavior.

LANGUAGE: java
CODE:
com.thoughtworks.selenium.Selenium.getAttribute(java.lang.String)

----------------------------------------

TITLE: Certificate Verification in Firefox's SSL Server Cert Verification
DESCRIPTION: This C++ code snippet from Firefox's SSL server certificate verification process shows how override bits are used to determine if a certificate should be accepted despite errors.

LANGUAGE: cpp
CODE:
  if (overrideService)
  {
    PRBool haveOverride;
    PRBool isTemporaryOverride; // we don't care
  
    nsrv = overrideService->HasMatchingOverride(hostString, port,
                                                ix509, 
                                                &overrideBits,
                                                &isTemporaryOverride, 
                                                &haveOverride);
    if (NS_SUCCEEDED(nsrv) && haveOverride) 
    {
      // remove the errors that are already overriden
      remaining_display_errors -= overrideBits;
    }
  }

  if (!remaining_display_errors) {
    // all errors are covered by override rules, so let's accept the cert
    return SECSuccess;
  }

----------------------------------------

TITLE: Running All Selenium Python Tests
DESCRIPTION: This command executes all Selenium Python tests using pytest.

LANGUAGE: bash
CODE:
pytest

----------------------------------------

TITLE: GitHub Action Deploy Configuration
DESCRIPTION: GitHub workflow configuration showing deployment using peaceiris/actions-gh-pages action for deploying to GitHub Pages

LANGUAGE: yaml
CODE:
uses: peaceiris/actions-gh-pages@v3

----------------------------------------

TITLE: HTML IFrame Structure Example
DESCRIPTION: Example HTML structure showing a button within an iframe element

LANGUAGE: html
CODE:
<div id="modal">
  <iframe id="buttonframe" name="myframe"  src="https://seleniumhq.github.io">
   <button>Click here</button>
 </iframe>
</div>

----------------------------------------

TITLE: Initializing Default Service Instance in Selenium
DESCRIPTION: Examples of starting a driver with a default service instance across different programming languages. Each language has specific ways of setting values for the service.

LANGUAGE: Java
CODE:
ChromeDriverService service = new ChromeDriverService.Builder().build();
WebDriver driver = new ChromeDriver(service);

LANGUAGE: Python
CODE:
service = Service()
driver = webdriver.Chrome(service=service)

LANGUAGE: C#
CODE:
var service = ChromeDriverService.CreateDefaultService();
var driver = new ChromeDriver(service);

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new
driver = Selenium::WebDriver.for :chrome, service: service

----------------------------------------

TITLE: HTML5 Attribute Value Quoting
DESCRIPTION: Example demonstrating proper HTML attribute value quoting practices for both HTML4 and HTML5

LANGUAGE: html
CODE:
attribute="value"

----------------------------------------

TITLE: Extracting WebDriver from WebDriverBackedSelenium in Java
DESCRIPTION: Retrieves the underlying WebDriver instance from a WebDriverBackedSelenium object.

LANGUAGE: java
CODE:
WebDriver driver = ((WrapsDriver) selenium).getWrappedDriver();

----------------------------------------

TITLE: Running All Selenium Tests
DESCRIPTION: Command to execute all Selenium JavaScript tests in the project

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Configuring Selenium Grid with Beta Channel Browsers using Docker Compose
DESCRIPTION: Docker Compose configuration for setting up a Selenium Grid with Chrome, Firefox, and Edge browsers on the Beta channel. It defines services for each browser node and a Selenium Hub, with appropriate environment variables and port mappings.

LANGUAGE: yaml
CODE:
# To execute this docker-compose yml file use `docker-compose -f docker-compose-v3-beta-channel.yml up`
# Add the `-d` flag at the end for detached execution
# To stop the execution, hit Ctrl+C, and then `docker-compose -f docker-compose-v3-beta-channel.yml down`
version: "3"
services:
  chrome:
    image: selenium/node-chrome:beta
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  edge:
    image: selenium/node-edge:beta
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  firefox:
    image: selenium/node-firefox:beta
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  selenium-hub:
    image: selenium/hub:latest
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"

----------------------------------------

TITLE: Locating Element by Class Name in Selenium
DESCRIPTION: Demonstrates how to use the class name locator to find an element with the 'information' class.

LANGUAGE: Java
CODE:
WebDriver driver = new ChromeDriver();
driver.findElement(By.className("information"));

LANGUAGE: Python
CODE:
driver = webdriver.Chrome()
driver.find_element(By.CLASS_NAME, "information")

LANGUAGE: C#
CODE:
var driver = new ChromeDriver();
driver.FindElement(By.ClassName("information"));

LANGUAGE: Ruby
CODE:
driver.find_element(class: 'information')

LANGUAGE: JavaScript
CODE:
let driver = await new Builder().forBrowser('chrome').build();
const loc = await driver.findElement(By.className('information'));

LANGUAGE: Kotlin
CODE:
val driver = ChromeDriver()
val loc: WebElement = driver.findElement(By.className("information"))

----------------------------------------

TITLE: Accessing Selenium Grid Tracing Setup Information
DESCRIPTION: This command provides instructions for exporting and visualizing traces via Jaeger in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar info tracing

----------------------------------------

TITLE: Accessing Selenium Grid Sessions Component Help
DESCRIPTION: This command provides component-specific configuration information for the Sessions role in Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar sessions --help

----------------------------------------

TITLE: Navigating to Python Directory
DESCRIPTION: This command changes the current directory to the Python examples folder in the cloned repository.

LANGUAGE: bash
CODE:
cd seleniumhq.github.io/examples/python

----------------------------------------

TITLE: Simulating Key Events in Selenium RC Java
DESCRIPTION: Demonstrates how Selenium RC handled typing and key events, which differs from WebDriver's behavior.

LANGUAGE: java
CODE:
selenium.type("name", "exciting tex");
selenium.keyDown("name", "t");
selenium.keyPress("name", "t");
selenium.keyUp("name", "t");

----------------------------------------

TITLE: Cloning Selenium Repository
DESCRIPTION: Command to clone the Selenium examples repository from GitHub

LANGUAGE: bash
CODE:
git clone https://github.com/SeleniumHQ/seleniumhq.github.io.git

----------------------------------------

TITLE: Configuring ChromeDriver with Selenium Manager
DESCRIPTION: This example shows how to use Selenium Manager to automatically configure ChromeDriver, returning the path to the installed driver executable.

LANGUAGE: bash
CODE:
$ ./selenium-manager --browser chrome\nINFO	/home/boni/.cache/selenium/chromedriver/linux64/106.0.5249.61/chromedriver

----------------------------------------

TITLE: JavascriptExecutor Interface Reference
DESCRIPTION: Reference to the JavascriptExecutor interface in Selenium WebDriver's Java API, used for executing JavaScript code in browsers.

LANGUAGE: java
CODE:
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/JavascriptExecutor.html

----------------------------------------

TITLE: Linux Environment Package Verification
DESCRIPTION: Shell commands to verify the installation of required packages including Xvfb, Java 1.8, and Firefox on CentOS Linux.

LANGUAGE: shell
CODE:
[user@localhost ~]$ cat /etc/redhat-release
CentOS Linux release 7.4.1708 (Core)

[user@localhost ~]$ rpm -qa | egrep -i "xvfb|java-1.8|firefox"
xorg-x11-server-Xvfb-1.19.3-11.el7.x86_64
firefox-52.4.0-1.el7.centos.x86_64
java-1.8.0-openjdk-1.8.0.151-1.b12.el7_4.x86_64
java-1.8.0-openjdk-headless-1.8.0.151-1.b12.el7_4.x86_64

----------------------------------------

TITLE: Implementing RemoteWebDriver-backed Selenium in C#
DESCRIPTION: Demonstrates connecting RemoteWebDriver with Selenium in C# by manually linking the session IDs. Uses Firefox driver as an example.

LANGUAGE: csharp
CODE:
RemoteWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
string sessionId = (string) driver.Capabilities.GetCapability("webdriver.remote.sessionid");
DefaultSelenium selenium = new DefaultSelenium("localhost", 4444, "*webdriver", "http://www.google.com");
selenium.Start("webdriver.remote.sessionid=" + sessionId);

----------------------------------------

TITLE: Installing Dependencies with Maven in Bash
DESCRIPTION: This command uses Maven to compile the test classes and download necessary dependencies for running Selenium Java tests.

LANGUAGE: bash
CODE:
mvn test-compile

----------------------------------------

TITLE: Retrieving Page Title with JavaScript in WebDriver Java
DESCRIPTION: Executes JavaScript to get the page title using WebDriver's JavascriptExecutor, demonstrating the need for an explicit return statement.

LANGUAGE: java
CODE:
((JavascriptExecutor) driver).executeScript("return document.title;");

----------------------------------------

TITLE: Configuring HtmlUnit Node in Selenium 4 Grid
DESCRIPTION: TOML configuration file for setting up a Selenium 4 Grid node to provide HtmlUnitDriver sessions. Specifies driver configuration and custom slot matcher.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false
[[node.driver-configuration]]
display-name = "HtmlUnit"
stereotype = "{\"browserName\": \"htmlunit\"}"

[distributor]
slot-matcher = "org.openqa.selenium.htmlunit.remote.HtmlUnitSlotMatcher"

----------------------------------------

TITLE: Configuring KEDA Trigger for Selenium Grid in YAML
DESCRIPTION: This YAML snippet shows how to configure a KEDA trigger for scaling Selenium Grid based on browser demand. It specifies the Selenium Grid URL, browser name, and platform.

LANGUAGE: yaml
CODE:
triggers:
  - type: selenium-grid
    metadata:
      url: 'http://selenium-grid-url-or-ip:4444/graphql'
      browserName: 'chrome'
      platformName: 'Linux'

----------------------------------------

TITLE: Adding Chrome Arguments
DESCRIPTION: Shows how to add command-line arguments to Chrome options, such as starting in maximized mode.

LANGUAGE: Java
CODE:
options.addArguments("--start-maximized");

LANGUAGE: Python
CODE:
options.add_argument("--start-maximized")

LANGUAGE: C#
CODE:
options.AddArgument("--start-maximized");

LANGUAGE: Ruby
CODE:
options.add_argument('--start-maximized')

LANGUAGE: JavaScript
CODE:
options = new chrome.Options();
options.addArguments('--start-maximized');

let driver = await new Builder()
    .forBrowser('chrome')
    .setChromeOptions(options)
    .build();

----------------------------------------

TITLE: Distributed Selenium Grid Startup Script with PostgreSQL
DESCRIPTION: Bash script to start a distributed Selenium Grid using PostgreSQL for session storage.

LANGUAGE: bash
CODE:
SE_VERSION=<current_selenium_version>
JAR_NAME=selenium-server-${SE_VERSION}.jar
PUBLISH="--publish-events tcp://localhost:4442"
SUBSCRIBE="--subscribe-events tcp://localhost:4443"
SESSIONS="--sessions http://localhost:5556"
SESSIONS_QUEUE="--sessionqueue http://localhost:5559"
echo 'Starting Event Bus'
java -jar $JAR_NAME event-bus $PUBLISH $SUBSCRIBE --port 5557 &
echo 'Starting New Session Queue'
java -jar $JAR_NAME sessionqueue --port 5559 &
echo 'Starting Sessions Map'
java -jar $JAR_NAME \
--ext $(coursier fetch -p org.seleniumhq.selenium:selenium-session-map-jdbc:${SE_VERSION} org.postgresql:postgresql:42.3.1) \
sessions $PUBLISH $SUBSCRIBE --port 5556 --config sessions.toml &
echo 'Starting Distributor'
java -jar $JAR_NAME  distributor $PUBLISH $SUBSCRIBE $SESSIONS $SESSIONS_QUEUE --port 5553 --bind-bus false &
echo 'Starting Router'
java -jar $JAR_NAME router $SESSIONS --distributor http://localhost:5553 $SESSIONS_QUEUE --port 4444 &
echo 'Starting Node'
java -jar $JAR_NAME node $PUBLISH $SUBSCRIBE &

----------------------------------------

TITLE: HtmlUnit Authentication Configuration
DESCRIPTION: Implementation of authentication handling for HtmlUnitDriver

LANGUAGE: java
CODE:
WebDriver driver = new HtmlUnitDriver() {
  protected WebClient modifyWebClient(WebClient client) {
    // This class ships with HtmlUnit itself
    DefaultCredentialsProvider creds = new DefaultCredentialsProvider();

    // Set some example credentials
    creds.addCredentials("username", "password");

    // And now add the provider to the webClient instance
    client.setCredentialsProvider(creds);

    return client;
  }
};

----------------------------------------

TITLE: Running Selenium HTML Runner Command
DESCRIPTION: Shell command for executing selenium-html-runner in headless mode using Xvfb, with example output showing successful test execution.

LANGUAGE: shell
CODE:
xvfb-run java -Dwebdriver.gecko.driver=/home/mmasek/geckodriver.0.18.0 -jar selenium-html-runner-3.7.1.jar -htmlSuite "firefox" "https://YOUR-BASE-URL" "$(pwd)/testsuite.html" "results.html" ; grep result: -A1 results.html/firefox.results.html

----------------------------------------

TITLE: Running Selenium Manager for Edge Beta on Linux
DESCRIPTION: This code example shows the execution of Selenium Manager to set up the Edge Beta browser and driver on a Linux system. It includes debug information about version checking, downloading, and the resulting file paths.

LANGUAGE: bash
CODE:
./selenium-manager --browser edge --debug --browser-version beta

----------------------------------------

TITLE: Implementing Custom WebDriver Wrapper and Decorator in Java
DESCRIPTION: This example shows how to create a custom WebDriverWrapper and testDecorator to implement custom behavior for specific WebDriver methods, such as findElement.

LANGUAGE: java
CODE:
public class WebDriverWrapper implements WebDriver {
    private final WebDriver driver;
    WebDriverWrapper(WebDriver driver) {
        this.driver = driver;
    }
    // custom implementation goes here
    @Override
    public WebElement findElement(final By by) {
        // custom implementation goes here
        return driver.findElement(by);
    }
}

public class testDecorator extends EventFiringDecorator<WebDriver> {

    @Override
    public Object call(Decorated<?> target, Method method, Object[] args) throws Throwable {
        String methodName = method.getName();
        if ("findElement".equals(methodName)) {
            WebDriverWrapper newDriver = new WebDriverWrapper((WebDriver) target.getOriginal());
            return newDriver.findElement((By) args[0]);
        }
        return super.call(target, method, args);
    }
}

----------------------------------------

TITLE: Adding Virtual Authenticator
DESCRIPTION: Creates and adds a new virtual authenticator to the WebDriver session with specified options.

LANGUAGE: Java
CODE:
VirtualAuthenticator authenticator = driver.addVirtualAuthenticator(options);

LANGUAGE: Python
CODE:
authenticator = driver.add_virtual_authenticator(options)

----------------------------------------

TITLE: Setting Custom Capabilities for Node Matching
DESCRIPTION: Configuration example for setting custom capabilities to match specific Nodes.

LANGUAGE: toml
CODE:
[node]
detect-drivers = false

[[node.driver-configuration]]
display-name = "firefox"
stereotype = '{"browserName": "firefox", "platformName": "macOS", "browserVersion":"96", "networkname:applicationName":"node_1", "nodename:applicationName":"app_1" }'
max-sessions = 5

----------------------------------------

TITLE: Implementing Alert Content in HTML
DESCRIPTION: Shows how to add alert blocks to highlight missing content in the documentation using Hugo shortcodes.

LANGUAGE: HTML
CODE:
{{</* alert-content /*/>}}

or

{{</* alert-content */>}}
Additional information about what specific content is needed
{{</* /alert-content */>}}

----------------------------------------

TITLE: Markdown Redirect Notice
DESCRIPTION: A markdown heading and redirect link pointing to the new location of the Selenium governance documentation.

LANGUAGE: markdown
CODE:
# Governance

Content moved to <https://www.selenium.dev/governance/>

----------------------------------------

TITLE: HTML Structure for Selenium IDE Test Case
DESCRIPTION: Example HTML structure for a Selenium IDE test case with commands and parameters

LANGUAGE: HTML
CODE:
<table>
    <tr><td>open</td><td>/download/</td><td></td></tr>
    <tr><td>assertTitle</td><td></td><td>Downloads</td></tr>
    <tr><td>verifyText</td><td>//h2</td><td>Downloads</td></tr>
</table>

----------------------------------------

TITLE: Registering Listeners with EventFiringDecorator in Java
DESCRIPTION: This example shows how to register multiple listeners using the new EventFiringDecorator approach, replacing the old EventFiringWebDriver method.

LANGUAGE: java
CODE:
new EventFiringWebDriver(driver).register(listener1).register(listener2); // Old approach
new EventFiringDecorator(listener1, listener2); // New approach

----------------------------------------

TITLE: Displaying Warning for Incompatible Chromedriver in PATH
DESCRIPTION: This snippet shows a warning message displayed by Selenium Manager when an incompatible chromedriver version is detected in the system PATH.

LANGUAGE: plaintext
CODE:
WARN    The chromedriver version (113.0.5672.63) detected in PATH at C:\my-drivers\chromedriver.exe might not be compatible with the detected chrome version (115.0.5790.110); currently, chromedriver 115.0.5790.102 is recommended for chrome 115.*, so it is advised to delete the driver in PATH and retry

----------------------------------------

TITLE: Implementing Fluent API in Google Search Page Object Using Java
DESCRIPTION: Shows the implementation of a Fluent API in a Google search page object. It includes a base page class and a specific Google search page class with methods that return the page object instance for method chaining.

LANGUAGE: java
CODE:
public abstract class BasePage {
    protected WebDriver driver;

    public BasePage(WebDriver driver) {
        this.driver = driver;
    }
}

public class GoogleSearchPage extends BasePage {
    public GoogleSearchPage(WebDriver driver) {
        super(driver);
        // Generally do not assert within pages or components.
        // Effectively throws an exception if the lambda condition is not met.
        new WebDriverWait(driver, Duration.ofSeconds(3)).until(d -> d.findElement(By.id("logo")));
    }

    public GoogleSearchPage setSearchString(String sstr) {
        driver.findElement(By.id("gbqfq")).sendKeys(sstr);
        return this;
    }

    public void clickSearchButton() {
        driver.findElement(By.id("gbqfb")).click();
    }
}

----------------------------------------

TITLE: Checking PATH Environment Variable in Zsh
DESCRIPTION: Commands to view and modify PATH environment variable in Zsh shell to include WebDriver location

LANGUAGE: shell
CODE:
echo $PATH
echo 'export PATH=$PATH:/path/to/driver' >> ~/.zshenv
source ~/.zshenv
chromedriver --version

----------------------------------------

TITLE: Implementing Selenium Manager in Python
DESCRIPTION: Comparison of previous driver setup method and new Selenium Manager usage in Python.

LANGUAGE: python
CODE:
# Previously
from selenium import webdriver
from selenium.webdriver.chrome.service import Service

driver = webdriver.Chrome(service=Service(r'path/to/chromedriver'))

# Selenium Manager
from selenium import webdriver

driver = webdriver.Chrome()

----------------------------------------

TITLE: Updating Locator Usage with By Object in Python Selenium
DESCRIPTION: Shows how to update existing locator methods to use the By object for specific locator strategies. This is the recommended approach for future-proofing Selenium Python tests.

LANGUAGE: python
CODE:
driver.find_element(By.ID, "submit_button").click()
driver.find_element(By.CSS_SELECTOR, '.myelement child').text

----------------------------------------

TITLE: Languages and Frameworks
DESCRIPTION: No actual code snippets are present in this release announcement. The content focuses on documenting changes and updates across different language bindings and frameworks.



----------------------------------------

TITLE: Quitting WebDriver Session in JavaScript
DESCRIPTION: This code shows how to quit a WebDriver session in JavaScript.

LANGUAGE: JavaScript
CODE:
await driver.quit();

----------------------------------------

TITLE: Enabling BiDi in Selenium WebDriver
DESCRIPTION: Code snippets demonstrating how to enable BiDirectional communication in Selenium WebDriver across different programming languages. This is done by setting the 'webSocketUrl' capability to true in the browser options.

LANGUAGE: Java
CODE:
options.setCapability("webSocketUrl", true);

LANGUAGE: Python
CODE:
options.enable_bidi = True

LANGUAGE: C#
CODE:
UseWebSocketUrl = true,

LANGUAGE: Ruby
CODE:
options.web_socket_url = true

LANGUAGE: JavaScript
CODE:
Options().enableBidi();

LANGUAGE: Kotlin
CODE:
options.setCapability("webSocketUrl", true);

----------------------------------------

TITLE: Enabling BiDi in Selenium WebDriver
DESCRIPTION: Code snippets demonstrating how to enable BiDirectional communication in Selenium WebDriver across different programming languages. This is done by setting the 'webSocketUrl' capability to true in the browser options.

LANGUAGE: Java
CODE:
options.setCapability("webSocketUrl", true);

LANGUAGE: Python
CODE:
options.enable_bidi = True

LANGUAGE: C#
CODE:
UseWebSocketUrl = true,

LANGUAGE: Ruby
CODE:
options.web_socket_url = true

LANGUAGE: JavaScript
CODE:
Options().enableBidi();

LANGUAGE: Kotlin
CODE:
options.setCapability("webSocketUrl", true);

----------------------------------------

TITLE: Unicorn Configuration Test
DESCRIPTION: Implements a test case for configuring a custom unicorn product using the Page Object pattern and domain-specific objects to abstract away UI implementation details.

LANGUAGE: Java
CODE:
Unicorn sparkles = new Unicorn("Sparkles", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS);
AddUnicornPage addUnicornPage = accountPage.addUnicorn();
UnicornConfirmationPage unicornConfirmationPage = addUnicornPage.createUnicorn(sparkles);

LANGUAGE: Python
CODE:
sparkles = Unicorn("Sparkles", UnicornColors.PURPLE, UnicornAccessories.SUNGLASSES, UnicornAdornments.STAR_TATTOOS)
add_unicorn_page = account_page.add_unicorn()
unicorn_confirmation_page = add_unicorn_page.create_unicorn(sparkles)

----------------------------------------

TITLE: Running Selenium Manager CLI Help Command
DESCRIPTION: This command demonstrates how to access the help documentation for the Selenium Manager CLI tool, which provides information on its parameters and options.

LANGUAGE: bash
CODE:
$ ./selenium-manager --help

----------------------------------------

TITLE: Initializing WebDriver and Navigating to a Website in Multiple Languages
DESCRIPTION: These code snippets demonstrate how to set up a WebDriver instance, navigate to a website, and perform a basic assertion across different programming languages supported by Selenium.

LANGUAGE: Java
CODE:
import org.junit.jupiter.api.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class HelloSelenium {
    @Test
    public void helloSelenium() {
        WebDriver driver = new ChromeDriver();
        driver.get("https://selenium.dev");
        assertEquals("Selenium", driver.getTitle());
        driver.quit();
    }
}

LANGUAGE: Python
CODE:
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait

def test_eight_components():
    driver = webdriver.Chrome()

    driver.get("https://www.selenium.dev/selenium/web/web-form.html")

    title = driver.title
    assert title == "Web form"

    driver.implicitly_wait(0.5)

    text_box = driver.find_element(by=By.NAME, value="my-text")
    submit_button = driver.find_element(by=By.CSS_SELECTOR, value="button")

    text_box.send_keys("Selenium")
    submit_button.click()

    message = driver.find_element(by=By.ID, value="message")
    value = message.text
    assert value == "Received!"

    driver.quit()

LANGUAGE: C#
CODE:
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace SeleniumDocs.Hello
{
    [TestClass]
    public class HelloSelenium
    {
        [TestMethod]
        public void OpenSeleniumDev()
        {
            using (IWebDriver driver = new ChromeDriver())
            {
                driver.Navigate().GoToUrl("https://selenium.dev");
                Assert.AreEqual("Selenium", driver.Title);
            }
        }
    }
}

LANGUAGE: Ruby
CODE:
require 'selenium-webdriver'
require 'rspec'

describe 'Hello Selenium' do
  it 'Opens Selenium.dev' do
    driver = Selenium::WebDriver.for :chrome
    driver.navigate.to 'https://selenium.dev'
    expect(driver.title).to eql('Selenium')
    driver.quit
  end
end

LANGUAGE: JavaScript
CODE:
const {Builder} = require('selenium-webdriver');
const {suite} = require('selenium-webdriver/testing');
const assert = require('assert');

suite(function (env) {
  describe('Hello Selenium', function () {
    let driver;

    before(async function () {
      driver = await new Builder().forBrowser('chrome').build();
    });

    after(async function () {
      await driver.quit();
    });

    it('opens selenium.dev', async function () {
      await driver.get('https://selenium.dev');
      assert.equal(await driver.getTitle(), 'Selenium');
    });
  });
});

LANGUAGE: Kotlin
CODE:
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.openqa.selenium.chrome.ChromeDriver

class HelloSelenium {
    @Test
    fun helloSelenium() {
        val driver = ChromeDriver()
        driver.get("https://selenium.dev")
        assertEquals("Selenium", driver.title)
        driver.quit()
    }
}

----------------------------------------

TITLE: Listing IME Support Routes in Appium
DESCRIPTION: This code snippet shows the IME (Input Method Editor) support routes used in Appium. These routes are related to available IME engines, deactivating IME engines, and activating IME engines.

LANGUAGE: javascript
CODE:
'/session/:sessionId/ime/available_engines': {
    GET: {command: 'availableIMEEngines'},
  },
  '/session/:sessionId/ime/deactivate': {
    POST: {command: 'deactivateIMEEngine'},
  },
  '/session/:sessionId/ime/activate': {
    POST: {command: 'activateIMEEngine', payloadParams: {required: ['engine']}},
  },

----------------------------------------

TITLE: Managing Credentials
DESCRIPTION: Creates and manages both resident (stateful) and non-resident (stateless) credentials for the virtual authenticator.

LANGUAGE: Java
CODE:
byte[] credentialId = Base64.getDecoder().decode("mRss5Q==");
Creatable credential = Credential.createNonResidentCredential(
    credentialId, "localhost", rpId, userHandle,
    publicKey, signCount, isSignatureCounterEnabled);

LANGUAGE: JavaScript
CODE:
const credential = {
  credentialId: Buffer.from('mRss5Q==', 'base64'),
  isResidentCredential: false,
  rpId: 'localhost',
  userHandle: Buffer.from('user_handle'),
  privateKey: Buffer.from('private_key'),
  signCount: 0
};

----------------------------------------

TITLE: Setting Custom Port for Driver Service in Selenium WebDriver
DESCRIPTION: Demonstrates how to specify a custom port for the driver service to run on across different programming languages.

LANGUAGE: Java
CODE:
new ChromeDriverService.Builder().usingPort(1234).build();

LANGUAGE: Python
CODE:
service = ChromeService(port=1234)

LANGUAGE: C#
CODE:
var service = ChromeDriverService.CreateDefaultService();
service.Port = 1234;

LANGUAGE: Ruby
CODE:
service = Selenium::WebDriver::Chrome::Service.new(port: 1234)

----------------------------------------

TITLE: Python SSL Certificate Management Scripts
DESCRIPTION: A collection of Python helper scripts for manipulating SSL certificates, shared as a GitHub gist by wolever.

LANGUAGE: python
CODE:
from https://gist.github.com/wolever/5762823

----------------------------------------

TITLE: Using Markdown in Code Tabs
DESCRIPTION: Shows how to include markdown content within code tabs, combining text explanations with code snippets referenced from GitHub.

LANGUAGE: HTML
CODE:
{{</* tabpane text=true */>}}
{{%/* tab header="Java" */%}}
1. Start the driver
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L12" */>}}
2. Navigate to a page
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L14" */>}}
3. Quit the driver
{{</* gh-codeblock path="examples/java/src/test/java/dev/selenium/getting_started/FirstScript.java#L29" */>}}
{{%/* /tab */%}}
< ... >
{{</* /tabpane */>}}

----------------------------------------

TITLE: Running Single Test with Firefox Driver
DESCRIPTION: Commands to execute individual test classes or methods using the go script with Firefox driver

LANGUAGE: bash
CODE:
./go test_firefox onlyRun=CombinedInputActionsTest

LANGUAGE: bash
CODE:
./go test_firefox method=foo

----------------------------------------

TITLE: Moving by Offset from Current Pointer Location in Selenium
DESCRIPTION: This method moves the mouse from its current position by the offset provided. If the mouse hasn't been moved before, it starts from the upper left corner of the viewport.

LANGUAGE: Java
CODE:
new Actions(driver)
        .moveByOffset(30, -10)
        .perform();

----------------------------------------

TITLE: Selenium Blackhole Proxy Implementation
DESCRIPTION: A proxy implementation to block all external calls during Selenium testing, shared as a GitHub gist by dimacus from SeConf.

LANGUAGE: python
CODE:
from https://gist.github.com/dimacus/5757573

----------------------------------------

TITLE: Removing a Credential from a Virtual Authenticator in Java
DESCRIPTION: This code shows how to remove a specific credential from a virtual authenticator based on its ID.

LANGUAGE: Java
CODE:
byte[] credentialId = {1, 2, 3, 4};
authenticator.addCredential(new Credential(credentialId, "example.com", null, null, null));

List<Credential> credentialList = authenticator.getCredentials();
assertThat(credentialList.size()).isEqualTo(1);

authenticator.removeCredential(credentialId);
credentialList = authenticator.getCredentials();
assertThat(credentialList.size()).isEqualTo(0);

----------------------------------------

TITLE: Experimenting with Py.Test Fixtures in Python
DESCRIPTION: This code snippet demonstrates an experiment with Py.Test fixtures in Python. It includes a fixture setup and a test function, showcasing basic usage of Py.Test for testing purposes.

LANGUAGE: python
CODE:
import pytest

@pytest.fixture(scope='class')
def setup(request):
    print '\nsetup'
    def fin():
        print '\nteardown'
    request.addfinalizer(fin)

class TestClass:
    def test_1(self, setup):
        print 'test_1'
        assert True

    def test_2(self, setup):
        print 'test_2'
        assert True

----------------------------------------

TITLE: Creating Code Tabs with Docsy in HTML
DESCRIPTION: Shows how to create language-specific code tabs using Docsy's tabpane feature. This allows for displaying code examples in multiple programming languages side by side.

LANGUAGE: HTML
CODE:
{{</* tabpane langEqualsHeader=true */>}}
  {{</* tab header="Java" */>}}
    WebDriver driver = new ChromeDriver();
  {{</* /tab */>}}
  {{</* tab header="Python" */>}}
    driver = webdriver.Chrome()
  {{</* /tab */>}}
  {{</* tab header="CSharp" */>}}
    var driver = new ChromeDriver();
  {{</* /tab */>}}
  {{</* tab header="Ruby" */>}}
    driver = Selenium::WebDriver.for :chrome
  {{</* /tab */>}}
  {{</* tab header="JavaScript" */>}}
    let driver = await new Builder().forBrowser('chrome').build();
  {{</* /tab */>}}
  {{</* tab header="Kotlin" */>}}
    val driver = ChromeDriver()
  {{</* /tab */>}}
{{</* /tabpane */>}}

----------------------------------------

TITLE: Getting Window Handle
DESCRIPTION: Gets the unique identifier for the current browser window or tab in the current session.

LANGUAGE: Java
CODE:
String originalWindow = driver.getWindowHandle();

LANGUAGE: Python
CODE:
driver.current_window_handle

----------------------------------------

TITLE: Retrieving Element Size and Position in Selenium
DESCRIPTION: This snippet demonstrates how to use the getRect() method to fetch the dimensions and coordinates of an element. It returns an object containing the x and y coordinates, height, and width.

LANGUAGE: Java
CODE:
Rectangle rect = driver.findElement(By.name("range_input")).getRect();

LANGUAGE: Python
CODE:
rect = driver.find_element(By.NAME, "range_input").rect

LANGUAGE: C#
CODE:
Rectangle rect = driver.FindElement(By.Name("range_input")).Rect;
int x = rect.X;
int y = rect.Y;

LANGUAGE: Ruby
CODE:
rect = @driver.find_element(name: 'range_input').rect

LANGUAGE: JavaScript
CODE:
const {x, y, width, height} = await driver.findElement(By.name('range_input')).getRect()

LANGUAGE: Kotlin
CODE:
val res = driver.findElement(By.name("range_input")).rect

println(res.getX())

----------------------------------------

TITLE: Shell Command for Coffee Download
DESCRIPTION: A humorous shell command suggesting downloading coffee, used as a header description in the blog post.

LANGUAGE: bash
CODE:
# sudo wget coffee > adam

----------------------------------------

TITLE: Exception Handling in Selenium
DESCRIPTION: No actual code snippets are present in the text. The content consists of documentation explaining various Selenium exceptions, their causes, and solutions. The guide covers selector validation, element location strategies, stale element handling, click interception handling, session management, and element interaction issues.



----------------------------------------

TITLE: Ruby Time Manipulation with Delorean
DESCRIPTION: Reference to a Ruby gem called Delorean that allows manipulation of time in Ruby test scripts, useful for testing time-dependent functionality.



----------------------------------------

TITLE: Cloning SeleniumHQ GitHub Repository in Bash
DESCRIPTION: This command clones the SeleniumHQ/seleniumhq.github.io Git repository to the local machine, providing access to Selenium Java examples.

LANGUAGE: bash
CODE:
git clone https://github.com/SeleniumHQ/seleniumhq.github.io.git

----------------------------------------

TITLE: Disowning Handles in Browsing Context with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to disown handles in a browsing context using Selenium WebDriver BiDi. This is used for memory management of remote references.

LANGUAGE: Java
CODE:
scriptManager.disownBrowsingContextHandles(driver.getWindowHandle(), Arrays.asList("handle1", "handle2"));

----------------------------------------

TITLE: Getting Browsing Context Realms by Type with Selenium WebDriver BiDi (Java)
DESCRIPTION: Demonstrates how to get realms of a specific type for a browsing context using Selenium WebDriver BiDi in Java.

LANGUAGE: Java
CODE:
List<Realm> realms = ((HasBiDi) driver).getBiDi().getBrowsingContextRealms(driver.getWindowHandle(), new RealmTypes("window"));
assertFalse(realms.isEmpty());

----------------------------------------

TITLE: Asserting Boolean Attributes (Pre-1.0.10)
DESCRIPTION: Example of checking a checkbox's checked state using the old assertion syntax before Selenium IDE 1.0.10.

LANGUAGE: selenese
CODE:
assertAttribute | checkbox@checked | checked

----------------------------------------

TITLE: Checking PATH Environment Variable in Windows
DESCRIPTION: Commands to view and modify PATH environment variable in Windows Command Prompt to include WebDriver location

LANGUAGE: shell
CODE:
echo %PATH%
setx PATH "%PATH%;C:\WebDriver\bin"
chromedriver.exe --version

----------------------------------------

TITLE: Capturing JavaScript Errors with WebDriver in JavaScript
DESCRIPTION: This snippet demonstrates a JavaScript method for capturing JavaScript errors on a page while running WebDriver tests. It's referenced from a blog post discussing error capture techniques.

LANGUAGE: JavaScript
CODE:
// No specific code provided, but the technique likely involves adding a JavaScript error listener to the page and retrieving the errors through WebDriver

----------------------------------------

TITLE: Navigating to Java Examples Directory in Bash
DESCRIPTION: This command changes the current directory to the location of Selenium Java examples within the cloned repository.

LANGUAGE: bash
CODE:
cd seleniumhq.github.io/examples/java

----------------------------------------

TITLE: Click and Release Mouse Action in Selenium
DESCRIPTION: Shows how to perform a standard mouse click (press and release) on a web element using Selenium Actions API. This moves the mouse to the element's center before clicking.



----------------------------------------

TITLE: Configuring Implicit Wait Timeout in Selenium WebDriver
DESCRIPTION: Sets an implicit wait timeout of 15 seconds for WebDriver operations. This means WebDriver will wait up to 15 seconds for elements to be present before throwing an exception.

LANGUAGE: java
CODE:
driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS)

----------------------------------------

TITLE: Viewing PATH Environment Variable in Windows
DESCRIPTION: Shows how to view the current PATH environment variable and add a new directory to it in Windows Command Prompt.

LANGUAGE: shell
CODE:
echo %PATH%

setx PATH "%PATH%;C:\WebDriver\bin"

chromedriver.exe --version

----------------------------------------

TITLE: Processing IMAP Email with Python
DESCRIPTION: This snippet demonstrates a MailBox class for processing IMAP email, specifically for Gmail using Python. It provides functionality for connecting to an IMAP server and handling email operations.

LANGUAGE: Python
CODE:
# MailBox class for processing IMAP email (Gmail from Python example)
# Full code available at: https://gist.github.com/4149804

----------------------------------------

TITLE: Cloning Selenium Documentation Repository
DESCRIPTION: Command to clone the Selenium documentation repository containing JavaScript examples

LANGUAGE: bash
CODE:
git clone https://github.com/SeleniumHQ/seleniumhq.github.io.git

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in C#
DESCRIPTION: This snippet illustrates how to upload a file using Selenium WebDriver in C#. It uses the SendKeys method to provide the file path to an input element of type 'file'.

LANGUAGE: C#
CODE:
driver.FindElement(By.Id("file-upload")).SendKeys("test-files/selenium-snapshot.jpg");
driver.FindElement(By.Id("file-submit")).Submit();

----------------------------------------

TITLE: Executing Selenium Manager for Edge Beta on Windows (Non-Admin)
DESCRIPTION: This snippet illustrates running Selenium Manager for Edge Beta on Windows without administrator privileges. It shows the warning message when Edge installation is not possible due to lack of admin rights.

LANGUAGE: bash
CODE:
./selenium-manager --debug --browser edge --browser-version beta

----------------------------------------

TITLE: Filtering Java Logs by Class
DESCRIPTION: Shows how to filter logs for specific classes in Java.

LANGUAGE: Java
CODE:
Logger httpClientLogger = Logger.getLogger("org.apache.http");
httpClientLogger.setLevel(Level.WARNING);

----------------------------------------

TITLE: Initializing WebDriver-backed Selenium in Python
DESCRIPTION: Demonstrates how to create a WebDriver-backed Selenium instance using Firefox driver. This setup allows using both Selenium RC and WebDriver APIs interchangeably by specifying '*webdriver' as the browser name and passing the WebDriver instance during initialization.

LANGUAGE: python
CODE:
driver = RemoteWebDriver(desired_capabilities = DesiredCapabilities.FIREFOX)
selenium = DefaultSelenium('localhost', 4444', '*webdriver', 'http://www.google.com')
selenium.start(driver = driver)

----------------------------------------

TITLE: Navigating to JavaScript Examples Directory
DESCRIPTION: Command to change directory to the JavaScript examples folder

LANGUAGE: bash
CODE:
cd seleniumhq.github.io/examples/javascript

----------------------------------------

TITLE: Setting Logger Level in Ruby
DESCRIPTION: Shows how to set the logger level in Ruby for Selenium logging.

LANGUAGE: Ruby
CODE:
Selenium::WebDriver.logger.level = :debug

----------------------------------------

TITLE: Running RSpec Tests
DESCRIPTION: Command to execute all RSpec tests in the project using Bundler

LANGUAGE: bash
CODE:
bundle exec rspec

----------------------------------------

TITLE: Initializing AsyncHttpClient in Selenium NettyClient (Java)
DESCRIPTION: This code snippet shows how a single static instance of AsyncHttpClient was previously initialized in the Selenium NettyClient class. This was referenced in a discussion about investigating memory leaks related to AsyncHttpClient usage.

LANGUAGE: java
CODE:
private static final AsyncHttpClient httpClient =

----------------------------------------

TITLE: Deprecated WebElement Selection Methods in Selenium Java
DESCRIPTION: Shows the deprecated setSelected() and toggle() methods that will be removed in the final release.

LANGUAGE: java
CODE:
WebElement.setSelected()
WebElement.toggle()

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: This command installs the required Python dependencies listed in the requirements.txt file using pip.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Creating Color Objects from Named Colors in Selenium
DESCRIPTION: Shows how to create Color objects from named colors defined in the CSS3 specification.

LANGUAGE: Java
CODE:
private final Color BLACK = Color.fromString("black");
private final Color CHOCOLATE = Color.fromString("chocolate");
private final Color HOTPINK = Color.fromString("hotpink");

LANGUAGE: Python
CODE:
BLACK = Color.from_string('black')
CHOCOLATE = Color.from_string('chocolate')
HOTPINK = Color.from_string('hotpink')

LANGUAGE: Ruby
CODE:
BLACK = Color.from_string('black')
CHOCOLATE = Color.from_string('chocolate')
HOTPINK = Color.from_string('hotpink')

LANGUAGE: Kotlin
CODE:
private val BLACK = Color.fromString("black")
private val CHOCOLATE = Color.fromString("chocolate")
private val HOTPINK = Color.fromString("hotpink")

----------------------------------------

TITLE: Ruby Wheel Actions Implementation
DESCRIPTION: Implementation of wheel actions in Ruby Selenium binding with user-friendly methods

LANGUAGE: ruby
CODE:
def scroll(x: nil, y: nil, delta_x: nil, delta_y: nil, duration: nil, origin: nil)
  @wheel.scroll(x: x, y: y, delta_x: delta_x, delta_y: delta_y, duration: duration, origin: origin)
  self
end

----------------------------------------

TITLE: Facebook Test Users API Implementation
DESCRIPTION: Reference to Facebook's Test Users API for creating temporary test users during test execution. This API allows creation of test user accounts for Facebook application testing purposes.



----------------------------------------

TITLE: Executing JavaScript in Ruby
DESCRIPTION: Demonstrates executing JavaScript code in the browser context using Selenium WebDriver with Ruby.

LANGUAGE: Ruby
CODE:
# Stores the header element
header = driver.find_element(css: 'h1')

# Get return value from script
result = driver.execute_script("return arguments[0].innerText", header)

# Executing JavaScript directly
driver.execute_script("alert('hello world')")

----------------------------------------

TITLE: Navigating to Ruby Examples Directory
DESCRIPTION: Command to change directory to the Ruby examples folder

LANGUAGE: bash
CODE:
cd seleniumhq.github.io/examples/ruby

----------------------------------------

TITLE: Firefox Profile Configuration in Selenium WebDriver
DESCRIPTION: API reference for Firefox Profile configuration in Selenium WebDriver, allowing reuse of Firefox profile instances for browser automation.

LANGUAGE: java
CODE:
http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/firefox/FirefoxProfile.html

----------------------------------------

TITLE: Capturing Screenshots
DESCRIPTION: Methods for capturing full page, viewport and element screenshots using BiDi API.

LANGUAGE: Java
CODE:
byte[] screenshot = context.captureScreenshot();
byte[] viewportScreenshot = context.captureScreenshot(ScreenshotParameters.Type.VIEWPORT);
byte[] elementScreenshot = context.captureScreenshot(ScreenshotParameters.Type.ELEMENT, element);

----------------------------------------

TITLE: JavaScript Console Output Configuration
DESCRIPTION: Configuring JavaScript logger to output to console

LANGUAGE: javascript
CODE:
logging.installConsoleHandler()

----------------------------------------

TITLE: Adding Console Message Handler in Python
DESCRIPTION: This snippet demonstrates how to add a console message handler using WebDriver BiDi in Python. It uses the driver's add_log_listener method to register a handler for console.log events.

LANGUAGE: Python
CODE:
driver.add_log_listener(LogType.CONSOLE, lambda log: print(f"Console log: {log['text']}"))

----------------------------------------

TITLE: Accessing Selenium Grid Configuration Help
DESCRIPTION: This command provides quick config help and overview for Selenium Grid.

LANGUAGE: shell
CODE:
java -jar selenium-server-<version>.jar info config

----------------------------------------

TITLE: Uploading Files Using Selenium WebDriver in Java
DESCRIPTION: This snippet demonstrates how to upload a file using Selenium WebDriver in Java. It uses the sendKeys method to provide the file path to an input element of type 'file'.

LANGUAGE: Java
CODE:
driver.findElement(By.id("file-upload")).sendKeys("test-files/selenium-snapshot.jpg");
driver.findElement(By.id("file-submit")).submit();

----------------------------------------

TITLE: Setting Browser Name in Java
DESCRIPTION: Demonstrates how to set the browser name using ChromeOptions in Java.

LANGUAGE: Java
CODE:
ChromeOptions options = new ChromeOptions();
String browserName = options.getBrowserName();

----------------------------------------

TITLE: Configuring Python Logger for Selenium
DESCRIPTION: Shows how to set up logging for the Selenium module in Python.

LANGUAGE: Python
CODE:
import logging
logger = logging.getLogger('selenium')