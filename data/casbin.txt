TITLE: Initializing Casbin Enforcer
DESCRIPTION: Creates a new Casbin Enforcer instance using a model file and policy file.

LANGUAGE: go
CODE:
e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")

LANGUAGE: typescript
CODE:
const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')

LANGUAGE: php
CODE:
$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');

LANGUAGE: python
CODE:
e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")

LANGUAGE: csharp
CODE:
var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");

LANGUAGE: rust
CODE:
let mut e = Enforce::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;

LANGUAGE: java
CODE:
Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");

----------------------------------------

TITLE: Checking Permissions with Casbin Enforcer
DESCRIPTION: Demonstrates how to use the Casbin enforcer to check permissions for a user performing an action on a resource.

LANGUAGE: go
CODE:
sub := "alice" // the user that wants to access a resource.
obj := "data1" // the resource that is going to be accessed.
act := "read" // the operation that the user performs on the resource.

ok, err := e.Enforce(sub, obj, act)

if err != nil {
    // handle err
}

if ok == true {
    // permit alice to read data1
} else {
    // deny the request, show an error
}

// You could use BatchEnforce() to enforce some requests in batches.
// This method returns a bool slice, and this slice's index corresponds to the row index of the two-dimensional array.
// e.g. results[0] is the result of {"alice", "data1", "read"}
results, err := e.BatchEnforce([][]interface{}{{"alice", "data1", "read"}, {"bob", "data2", "write"}, {"jack", "data3", "read"}})

LANGUAGE: java
CODE:
String sub = "alice"; // the user that wants to access a resource.
String obj = "data1"; // the resource that is going to be accessed.
String act = "read"; // the operation that the user performs on the resource.

if (e.enforce(sub, obj, act) == true) {
    // permit alice to read data1
} else {
    // deny the request, show an error
}

LANGUAGE: javascript
CODE:
const sub = 'alice'; // the user that wants to access a resource.
const obj = 'data1'; // the resource that is going to be accessed.
const act = 'read'; // the operation that the user performs on the resource.

if ((await e.enforce(sub, obj, act)) === true) {
    // permit alice to read data1
} else {
    // deny the request, show an error
}

LANGUAGE: php
CODE:
$sub = "alice"; // the user that wants to access a resource.
$obj = "data1"; // the resource that is going to be accessed.
$act = "read"; // the operation that the user performs on the resource.

if ($e->enforce($sub, $obj, $act) === true) {
    // permit alice to read data1
} else {
    // deny the request, show an error
}

LANGUAGE: python
CODE:
sub = "alice"  # the user that wants to access a resource.
obj = "data1"  # the resource that is going to be accessed.
act = "read"  # the operation that the user performs on the resource.

if e.enforce(sub, obj, act):
    # permit alice to read data1
    pass
else:
    # deny the request, show an error
    pass

LANGUAGE: csharp
CODE:
var sub = "alice";  # the user that wants to access a resource.
var obj = "data1";  # the resource that is going to be accessed.
var act = "read";  # the operation that the user performs on the resource.

if (await e.EnforceAsync(sub, obj, act)) 
{
    // permit alice to read data1
}
else
{
    // deny the request, show an error
}

LANGUAGE: delphi
CODE:
if casbin.enforce(['alice,data1,read']) then
  // Alice is super happy as she can read data1
else
  // Alice is sad

LANGUAGE: rust
CODE:
  let sub = "alice"; // the user that wants to access a resource.
  let obj = "data1"; // the resource that is going to be accessed.
  let act = "read"; // the operation that the user performs on the resource.

  if e.enforce((sub, obj, act)).await? {
      // permit alice to read data1
  } else {
      // error occurs
  }

LANGUAGE: lua
CODE:
if e:enforce("alice", "data1", "read") then
   -- permit alice to read data1
else
   -- deny the request, show an error
end

----------------------------------------

TITLE: Retrieving User Roles with Casbin API
DESCRIPTION: Shows how to use the Casbin API to get all roles assigned to a user across different programming languages.

LANGUAGE: go
CODE:
roles, err := e.GetRolesForUser("alice")

LANGUAGE: java
CODE:
Roles roles = e.getRolesForUser("alice");

LANGUAGE: javascript
CODE:
const roles = await e.getRolesForUser('alice');

LANGUAGE: php
CODE:
$roles = $e->getRolesForUser("alice");

LANGUAGE: python
CODE:
roles = e.get_roles_for_user("alice")

LANGUAGE: csharp
CODE:
var roles = e.GetRolesForUser("alice");

LANGUAGE: delphi
CODE:
roles = e.rolesForEntity("alice")

LANGUAGE: rust
CODE:
let roles = e.get_roles_for_user("alice");

LANGUAGE: lua
CODE:
local roles = e:GetRolesForUser("alice")

----------------------------------------

TITLE: Creating a Casbin Enforcer with File Adapter
DESCRIPTION: Initializes a Casbin enforcer using model and policy files across different languages.

LANGUAGE: go
CODE:
import "github.com/casbin/casbin/v2"

e, err := casbin.NewEnforcer("path/to/model.conf", "path/to/policy.csv")

LANGUAGE: java
CODE:
import org.casbin.jcasbin.main.Enforcer;

Enforcer e = new Enforcer("path/to/model.conf", "path/to/policy.csv");

LANGUAGE: javascript
CODE:
import { newEnforcer } from 'casbin';

const e = await newEnforcer('path/to/model.conf', 'path/to/policy.csv');

LANGUAGE: php
CODE:
require_once './vendor/autoload.php';

use Casbin\Enforcer;

$e = new Enforcer("path/to/model.conf", "path/to/policy.csv");

LANGUAGE: python
CODE:
import casbin

e = casbin.Enforcer("path/to/model.conf", "path/to/policy.csv")

LANGUAGE: csharp
CODE:
using NetCasbin; 

var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");

LANGUAGE: delphi
CODE:
var
  casbin: ICasbin;
begin
  casbin := TCasbin.Create('path/to/model.conf', 'path/to/policy.csv');
  ...
end

LANGUAGE: rust
CODE:
use casbin::prelude::*;

// If you use async_td as async executor
#[cfg(feature = "runtime-async-std")]
#[async_std::main]
async fn main() -> Result<()> {
    let mut e = Enforcer::new("path/to/model.conf", "path/to/policy.csv").await?;
    Ok(())
}

// If you use tokio as async executor
#[cfg(feature = "runtime-tokio")]
#[tokio::main]
async fn main() -> Result<()> {
    let mut e = Enforcer::new("path/to/model.conf", "path/to/policy.csv").await?;
    Ok(())
}

LANGUAGE: lua
CODE:
local Enforcer = require("casbin")
local e = Enforcer:new("path/to/model.conf", "path/to/policy.csv") -- The Casbin Enforcer

----------------------------------------

TITLE: Enforcing Policies with Casbin
DESCRIPTION: Determines whether a subject can access an object with a given action using the Enforce method.

LANGUAGE: go
CODE:
ok, err := e.Enforce(request)

LANGUAGE: typescript
CODE:
const ok = await e.enforce(request);

LANGUAGE: php
CODE:
$ok = $e->enforcer($request);

LANGUAGE: python
CODE:
ok = e.enforcer(request)

LANGUAGE: java
CODE:
boolean ok = e.enforce(request);

----------------------------------------

TITLE: Installing Casbin Dependencies
DESCRIPTION: Commands for installing Casbin libraries in different languages using package managers.

LANGUAGE: go
CODE:
go get github.com/casbin/casbin/v2

LANGUAGE: javascript
CODE:
# NPM
npm install casbin --save

# Yarn
yarn add casbin

LANGUAGE: php
CODE:
composer require casbin/casbin

LANGUAGE: python
CODE:
pip install casbin

LANGUAGE: csharp
CODE:
dotnet add package Casbin.NET

LANGUAGE: rust
CODE:
cargo install cargo-edit
cargo add casbin

// If you use async-std as async executor
cargo add async-std

// If you use tokio as async executor
cargo add tokio // make sure you activate its `macros` feature

LANGUAGE: lua
CODE:
luarocks install casbin  

# Or with --local flag if needed:
luarocks install casbin  --local

----------------------------------------

TITLE: Initializing Casbin Enforcer
DESCRIPTION: Creates a new Enforcer instance using a model file and policy file. This is a prerequisite for using the RBAC API.

LANGUAGE: Go
CODE:
e, err := NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")

LANGUAGE: TypeScript
CODE:
const e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')

LANGUAGE: PHP
CODE:
$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');

LANGUAGE: Python
CODE:
e = casbin.Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")

LANGUAGE: C#
CODE:
var e = new Enforcer("path/to/model.conf", "path/to/policy.csv");

LANGUAGE: Rust
CODE:
let mut e = Enforcer::new("examples/rbac_model.conf", "examples/rbac_policy.csv").await?;

LANGUAGE: Java
CODE:
Enforcer e = new Enforcer("examples/rbac_model.conf", "examples/rbac_policy.csv");

----------------------------------------

TITLE: Example RBAC Policy Rules
DESCRIPTION: Demonstrates how to define policy rules and role assignments in Casbin. Shows permission assignment to roles and user-role mapping.

LANGUAGE: text
CODE:
p, data2_admin, data2, read
g, alice, data2_admin

----------------------------------------

TITLE: Loading RBAC Model Configuration
DESCRIPTION: Basic RBAC model configuration defining request, policy, role definitions, policy effects and matchers in INI format.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[role_definition]
g = _, _

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Loading Casbin Enforcer from Files in Go
DESCRIPTION: Demonstrates how to load a Casbin enforcer from model and policy files, then use it to check permissions.

LANGUAGE: go
CODE:
enforcer, err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")
if err != nil {
	log.Fatalf("error, detail: %s", err)
}
ok, err := enforcer.Enforce("alice", "data1", "read")

----------------------------------------

TITLE: Casbin Enforcer Types Overview
DESCRIPTION: A table showing the different types of Casbin enforcers, their authors, and descriptions. Includes basic Enforcer, CachedEnforcer for result caching, DistributedEnforcer for cluster support, and SyncedEnforcer for thread-safe operations.

LANGUAGE: markdown
CODE:
Enforcer | Author | Description
----|------|------
[Enforcer](https://github.com/casbin/casbin/blob/master/enforcer.go)  | Casbin | `Enforcer` is the basic structure for users to interact with Casbin policies and models. You can find more details of `Enforcer`'s API at [here](/docs/en/management-api).
[CachedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_cached.go) | Casbin | `CachedEnforcer` is based on `Enforcer`. It supports to cache the evaluation result of a request in memory by a map and clear caches in a specified expire time. Moreover, it is guaranted to be thread-safe by a Read-Write lock. You can use `EnableCache` to enable to cache evaluation results (default is enabled). `CachedEnforcer`'s other API is the same as `Enforcer`'s.
[DistributedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_distributed.go) | Casbin | `DistributedEnforcer` supports multiple instances in distributed clusters. It wraps `SyncedEnforcer` for dispatcher. You can find more details about dispather at [here](/docs/en/dispatchers#distributedenforcer).
[SyncedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_synced.go) | Casbin | `SyncedEnforer` is based on `Enforcer` and provides synchronized access. It is thread-safe.

----------------------------------------

TITLE: Using EnforceEx API in Casbin Go
DESCRIPTION: Shows how to use the EnforceEx function to get the specific policy that allowed a request.

LANGUAGE: go
CODE:
ok, reason, err := enforcer.EnforceEx("amber", "data1", "read")
fmt.Println(ok, reason) // true [admin data1 read]

----------------------------------------

TITLE: Adding Policies in Casbin
DESCRIPTION: Adds an authorization rule to the current policy using the AddPolicy method.

LANGUAGE: go
CODE:
added := e.AddPolicy('eve', 'data3', 'read')

LANGUAGE: typescript
CODE:
const p = ['eve', 'data3', 'read']
const added = await e.addPolicy(...p)

LANGUAGE: php
CODE:
$added = $e->addPolicy('eve', 'data3', 'read');

LANGUAGE: python
CODE:
added = e.add_policy("eve", "data3", "read")

LANGUAGE: csharp
CODE:
var added = e.AddPolicy("eve", "data3", "read");
or
var added = await e.AddPolicyAsync("eve", "data3", "read");

LANGUAGE: rust
CODE:
let added = e.add_policy(vec!["eve".to_owned(), "data3".to_owned(), "read".to_owned()]).await?;

LANGUAGE: java
CODE:
boolean added = e.addPolicy("eve", "data3", "read");

----------------------------------------

TITLE: Defining Matchers in Casbin Model
DESCRIPTION: Example of a matcher definition in Casbin. Matchers are expressions that define how policy rules are evaluated against requests.

LANGUAGE: ini
CODE:
[matchers]
m = r.sub == p.sub && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Defining RBAC Role Systems in Casbin
DESCRIPTION: Configuration for defining multiple RBAC role inheritance systems using g and g2 notation. This allows for separate role hierarchies for users and resources.

LANGUAGE: ini
CODE:
[role_definition]
g = _, _
g2 = _, _

----------------------------------------

TITLE: Configuring Super Admin in Casbin Model
DESCRIPTION: Casbin model configuration that implements Super Admin functionality. The matcher includes a special condition that grants full access if the subject is 'root'. This configuration allows for regular policy matching while maintaining a Super Admin override.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = r.sub == p.sub && r.obj == p.obj && r.act == p.act || r.sub == "root"

----------------------------------------

TITLE: Defining Basic ABAC Model in Casbin
DESCRIPTION: This snippet shows how to define a basic ABAC model in Casbin using the INI format. It includes request definition, policy definition, policy effect, and matchers sections.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = r.sub == r.obj.Owner

----------------------------------------

TITLE: Configuring RBAC Matcher with Domains in Casbin
DESCRIPTION: Sets up the matcher to check roles within specific domains. Ensures that permissions are correctly evaluated based on the user's role in the given domain.

LANGUAGE: ini
CODE:
[matchers]
m = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Loading RBAC Policy from CSV File in Casbin
DESCRIPTION: Example of a CSV file containing RBAC policy rules for Casbin. It demonstrates how to define permissions and role assignments.

LANGUAGE: csv
CODE:
p, alice, data1, read
p, bob, data2, write
p, data2_admin, data2, read
p, data2_admin, data2, write
g, alice, data2_admin

----------------------------------------

TITLE: Loading Casbin Model from Code
DESCRIPTION: Demonstrates how to programmatically initialize and configure a Casbin RBAC model using Go code, including importing required dependencies and setting up model definitions.

LANGUAGE: go
CODE:
import (
	"github.com/casbin/casbin/v2"
	"github.com/casbin/casbin/v2/model"
	"github.com/casbin/casbin/v2/persist/file-adapter"
)

// Initialize the model from Go code.
m := model.NewModel()
m.AddDef("r", "r", "sub, obj, act")
m.AddDef("p", "p", "sub, obj, act")
m.AddDef("g", "g", "_, _")
m.AddDef("e", "e", "some(where (p.eft == allow))")
m.AddDef("m", "m", "g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act")

// Load the policy rules from the .CSV file adapter.
// Replace it with your adapter to avoid files.
a := fileadapter.NewAdapter("examples/rbac_policy.csv")

// Create the enforcer.
e := casbin.NewEnforcer(m, a)

----------------------------------------

TITLE: Modifying Casbin Policies Dynamically in Go
DESCRIPTION: Shows how to add, remove, update, and check for policies using Casbin's Management APIs at runtime.

LANGUAGE: go
CODE:
enforcer.AddPolicy("added_user", "data1", "read")
hasPolicy := enforcer.HasPolicy("added_user", "data1", "read")
fmt.Println(hasPolicy) // true, we added that policy successfully

enforcer.RemovePolicy("alice", "data1", "read")
hasPolicy = enforcer.HasPolicy("alice", "data1", "read")
fmt.Println(hasPolicy) // false, we deleted that policy successfully

enforcer.UpdatePolicy([]string{"added_user", "data1", "read"}, []string{"added_user", "data1", "write"})
hasPolicy = enforcer.HasPolicy("added_user", "data1", "read")
fmt.Println(hasPolicy) // false, the origin policy has lapsed
hasPolicy = enforcer.HasPolicy("added_user", "data1", "write")
fmt.Println(hasPolicy) // true, the new policy is in use

----------------------------------------

TITLE: Enforcing Batch Requests with BatchEnforce in Go
DESCRIPTION: This snippet demonstrates how to use the BatchEnforce() method in Go to enforce multiple requests at once and receive a boolean array of results.

LANGUAGE: go
CODE:
boolArray, err := e.BatchEnforce(requests)

----------------------------------------

TITLE: Getting Implicit Permissions for a User
DESCRIPTION: Retrieves all implicit permissions for a user, including permissions from inherited roles, using the GetImplicitPermissionsForUser method.

LANGUAGE: Go
CODE:
e.GetImplicitPermissionsForUser("alice")

LANGUAGE: TypeScript
CODE:
await e.getImplicitPermissionsForUser("alice")

LANGUAGE: PHP
CODE:
$e->getImplicitPermissionsForUser("alice");

LANGUAGE: Python
CODE:
e.get_implicit_permissions_for_user("alice")

LANGUAGE: C#
CODE:
var implicitPermissions = e.GetImplicitPermissionsForUser("alice");

LANGUAGE: Rust
CODE:
e.get_implicit_permissions_for_user("alice", None); // No domain

LANGUAGE: Java
CODE:
List<List<String>> implicitPermissions = e.getImplicitPermissionsForUser("alice");

----------------------------------------

TITLE: Enforcing Batch Requests with batchEnforce in Node.js
DESCRIPTION: This snippet shows how to use the batchEnforce() method in Node.js (TypeScript) to enforce multiple requests asynchronously and receive a boolean array of results.

LANGUAGE: typescript
CODE:
const boolArray = await e.batchEnforce(requests);

----------------------------------------

TITLE: Defining Basic ACL Model in Casbin
DESCRIPTION: This snippet shows the configuration for a basic ACL (Access Control List) model in Casbin. It defines the request structure, policy format, policy effect, and matching rules.

LANGUAGE: ini
CODE:
# Request definition
[request_definition]
r = sub, obj, act

# Policy definition
[policy_definition]
p = sub, obj, act

# Policy effect
[policy_effect]
e = some(where (p.eft == allow))

# Matchers
[matchers]
m = r.sub == p.sub && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Initializing Casbin Enforcer
DESCRIPTION: Creates a new Casbin enforcer instance using RBAC with domains model and policy files. This is the basic setup required for using the RBAC with domains API.

LANGUAGE: go
CODE:
e, err := NewEnforcer("examples/rbac_with_domains_model.conf", "examples/rbac_with_domains_policy.csv")

LANGUAGE: typescript
CODE:
const e = await newEnforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv')

LANGUAGE: php
CODE:
$e = new Enforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv');

LANGUAGE: python
CODE:
e = casbin.Enforcer("examples/rbac_with_domains_model.conf", "examples/rbac_with_domains_policy.csv")

LANGUAGE: csharp
CODE:
var e = new Enforcer("examples/rbac_with_domains_model.conf", "examples/rbac_with_domains_policy.csv");

LANGUAGE: rust
CODE:
let mut e = Enforcer::new("examples/rbac_with_domains_model.conf", "examples/rbac_with_domains_policy.csv").await?;

LANGUAGE: java
CODE:
Enforcer e = new Enforcer("examples/rbac_with_domains_model.conf", "examples/rbac_with_domains_policy.csv");

----------------------------------------

TITLE: Wrapping Custom Function for Casbin in Go
DESCRIPTION: Shows how to wrap a custom function with interface{} types to make it compatible with Casbin's function registration system.

LANGUAGE: go
CODE:
func KeyMatchFunc(args ...interface{}) (interface{}, error) {
	name1 := args[0].(string)
	name2 := args[1].(string)

	return (bool)(KeyMatch(name1, name2)), nil
}

----------------------------------------

TITLE: Managing User Roles in Domain
DESCRIPTION: Functions for adding, deleting, and managing roles for users within specific domains.

LANGUAGE: go
CODE:
ok, err := e.AddRoleForUserInDomain("alice", "admin", "domain1")
ok, err := e.DeleteRoleForUserInDomain("alice", "admin", "domain1")
ok, err := e.DeleteRolesForUserInDomain("alice", "domain1")

LANGUAGE: java
CODE:
boolean ok = e.addRoleForUserInDomain("alice", "admin", "domain1");
boolean ok = e.deleteRoleForUserInDomain("alice", "admin", "domain1");

----------------------------------------

TITLE: Using File Adapter in Go
DESCRIPTION: Example of initializing a Casbin enforcer with the built-in file adapter in Go

LANGUAGE: Go
CODE:
import "github.com/casbin/casbin"

e := casbin.NewEnforcer("examples/basic_model.conf", "examples/basic_policy.csv")

----------------------------------------

TITLE: Domain Management Operations
DESCRIPTION: Functions for managing domains, including getting all domains, deleting domains, and managing users within domains.

LANGUAGE: go
CODE:
res := e.GetAllUsersByDomain("domain1")
ok, err := e.DeleteAllUsersByDomain("domain1")
ok, err := e.DeleteDomains("domain1", "domain2")
res, _ := e.GetAllDomains()

----------------------------------------

TITLE: Defining Role with Domains in Casbin
DESCRIPTION: Configures the role definition to include domain/tenant support. The third underscore represents the domain/tenant name.

LANGUAGE: ini
CODE:
[role_definition]
g = _, _, _

----------------------------------------

TITLE: Using EnforceContext in Go for Multiple Section Types
DESCRIPTION: Demonstrates how to use EnforceContext in Go to specify different types of request, policy, effect, and matcher when using multiple section types in Casbin.

LANGUAGE: go
CODE:
enforceContext := NewEnforceContext("2")
enforceContext.EType = "e"
e.Enforce("alice", "data2", "read")
e.Enforce(enforceContext, struct{ Age int }{Age: 70}, "/data1", "read")
e.Enforce(enforceContext, struct{ Age int }{Age: 30}, "/data1", "read")

----------------------------------------

TITLE: Defining WatcherEx Interface in Go
DESCRIPTION: This code snippet outlines the WatcherEx interface in Go, which extends the basic Watcher interface to support incremental synchronization between multiple Casbin enforcer instances. It includes methods for updating policies, handling different types of policy changes, and managing the watcher lifecycle.

LANGUAGE: Go
CODE:
type WatcherEx interface {
    SetUpdateCallback(func(string)) error
    Update() error
    Close()
    UpdateForAddPolicy(sec, ptype string, params ...string) error
    UpdateForRemovePolicy(sec, ptype string, params ...string) error
    UpdateForRemoveFilteredPolicy(sec, ptype string, fieldIndex int, fieldValues ...string) error
    UpdateForSavePolicy(model model.Model) error
    UpdateForAddPolicies(sec string, ptype string, rules ...[]string) error
    UpdateForRemovePolicies(sec string, ptype string, rules ...[]string) error
}

----------------------------------------

TITLE: Using EnforceContext in Node.js for Multiple Section Types
DESCRIPTION: Shows how to use EnforceContext in Node.js to specify different types of request, policy, effect, and matcher when using multiple section types in Casbin.

LANGUAGE: javascript
CODE:
const enforceContext = new NewEnforceContext('2');
enforceContext.eType = "e"
e.Enforce("alice", "data2", "read")
e.Enforce(enforceContext, {Age: 70}, "/data1", "read")
e.Enforce(enforceContext, {Age: 30}, "/data1", "read")

----------------------------------------

TITLE: Configuring Explicit Priority Model in Casbin
DESCRIPTION: This snippet demonstrates how to set up the model.conf file for explicit priority loading in Casbin. It defines request, policy, role, policy effect, and matchers. The 'priority' token in the policy definition determines the priority order.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = priority, sub, obj, act, eft

[role_definition]
g = _, _

[policy_effect]
e = priority(p.eft) || deny

[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Using EnforceContext in Java for Multiple Section Types
DESCRIPTION: Illustrates how to use EnforceContext in Java to specify different types of request, policy, effect, and matcher when using multiple section types in Casbin.

LANGUAGE: java
CODE:
EnforceContext enforceContext = new EnforceContext("2");
enforceContext.seteType("e");
e.enforce("alice", "data2", "read");
e.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 70), "/data1", "read");
e.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule("alice", 30), "/data1", "read");

----------------------------------------

TITLE: Getting Roles for a User
DESCRIPTION: Retrieves all roles assigned to a specific user using the GetRolesForUser method.

LANGUAGE: Go
CODE:
res := e.GetRolesForUser("alice")

LANGUAGE: TypeScript
CODE:
const res = await e.getRolesForUser('alice')

LANGUAGE: PHP
CODE:
$res = $e->getRolesForUser("alice");

LANGUAGE: Python
CODE:
roles = e.get_roles_for_user("alice")

LANGUAGE: C#
CODE:
var res = e.GetRolesForUser("alice");

LANGUAGE: Rust
CODE:
let roles = e.get_roles_for_user("alice", None); // No domain

LANGUAGE: Java
CODE:
List<String> res = e.getRolesForUser("alice");

----------------------------------------

TITLE: Implementing Role Manager Interface in Go
DESCRIPTION: All role managers in Go must implement the RoleManager interface. The Session Role Manager can be used as a reference implementation.

LANGUAGE: Go
CODE:
// All role managers must implement the RoleManager interface
// Session Role Manager can be used as a reference implementation

----------------------------------------

TITLE: Initializing Distributed Enforcer in Go
DESCRIPTION: Creates a new DistributedEnforcer instance that wraps SyncedEnforcer for policy synchronization across multiple instances. The enforcer is initialized with a basic model configuration file and policy file.

LANGUAGE: go
CODE:
    e, _ := casbin.NewDistributedEnforcer("examples/basic_model.conf", "examples/basic_policy.csv")

----------------------------------------

TITLE: Implementing Role Manager Interface in Node.js
DESCRIPTION: All role managers in Node.js must implement the RoleManager interface. The Default Role Manager can be used as a reference implementation.

LANGUAGE: JavaScript
CODE:
// All role managers must implement the RoleManager interface
// Default Role Manager can be used as a reference implementation

----------------------------------------

TITLE: Implementing Custom KeyMatch Function in Go
DESCRIPTION: Demonstrates how to create a custom KeyMatch function in Go for use in Casbin matchers. This function compares two keys, supporting wildcard matching.

LANGUAGE: go
CODE:
func KeyMatch(key1 string, key2 string) bool {
	i := strings.Index(key2, "*")
	if i == -1 {
		return key1 == key2
	}

	if len(key1) > i {
		return key1[:i] == key2[:i]
	}
	return key1 == key2[:i]
}

----------------------------------------

TITLE: Defining Casbin Model for RBAC in APISIX
DESCRIPTION: This code snippet defines a Casbin model for implementing Role-Based Access Control (RBAC) in APISIX. It specifies request definitions, policy definitions, role definitions, policy effect, and matchers for authorization.

LANGUAGE: conf
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[role_definition]
g = _, _

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)

----------------------------------------

TITLE: Defining Resource Struct for ABAC in Go
DESCRIPTION: This snippet defines a Go struct 'testResource' with Name and Owner fields, which can be used as an object in ABAC rules.

LANGUAGE: go
CODE:
type testResource struct {
	Name  string
	Owner string
}

----------------------------------------

TITLE: Defining Casbin Policy for RBAC in APISIX
DESCRIPTION: This code snippet defines a Casbin policy for implementing Role-Based Access Control (RBAC) in APISIX. It specifies access rules and role assignments for different users and resources.

LANGUAGE: conf
CODE:
p, *, /, GET
p, admin, *, *
g, alice, admin
g, bob, admin

----------------------------------------

TITLE: Registering Custom Function with Casbin Enforcer in Go
DESCRIPTION: Illustrates how to register a custom function with the Casbin enforcer, making it available for use in model configurations.

LANGUAGE: go
CODE:
e.AddFunction("my_func", KeyMatchFunc)

----------------------------------------

TITLE: Enabling authz-casbin Plugin on APISIX Route with File Paths
DESCRIPTION: This cURL command enables the authz-casbin plugin on an APISIX route using model and policy file paths. It configures the plugin with the specified model and policy files, and sets the username header for subject identification.

LANGUAGE: sh
CODE:
curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "plugins": {
        "authz-casbin": {
            "model_path": "/path/to/model.conf",
            "policy_path": "/path/to/policy.csv",
            "username": "username"
        }
    },
    "upstream": {
        "nodes": {
            "127.0.0.1:1980": 1
        },
        "type": "roundrobin"
    },
    "uri": "/*"
}'

----------------------------------------

TITLE: Starting AutoLoad Policy in Casbin
DESCRIPTION: Demonstrates how to start automatically loading policy periodically in Casbin. This feature ensures that the enforcer always has the latest policy rules from the database.

LANGUAGE: Generic
CODE:
StartAutoLoadPolicy()

----------------------------------------

TITLE: Enabling authz-casbin Plugin on APISIX Route with Inline Model and Policy
DESCRIPTION: This cURL command enables the authz-casbin plugin on an APISIX route using inline model and policy text. It configures the plugin with the specified model and policy directly in the request body, along with the username header for subject identification.

LANGUAGE: sh
CODE:
curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "plugins": {
        "authz-casbin": {
            "model": "[request_definition]\n            r = sub, obj, act\n\n            [policy_definition]\n            p = sub, obj, act\n\n            [role_definition]\n            g = _, _\n\n            [policy_effect]\n            e = some(where (p.eft == allow))\n\n            [matchers]\n            m = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)",

            "policy": "p, *, /, GET\n            p, admin, *, *\n            g, alice, admin\n            g, bob, admin",

            "username": "username"
        }
    },
    "upstream": {
        "nodes": {
            "127.0.0.1:1980": 1
        },
        "type": "roundrobin"
    },
    "uri": "/*"
}'

----------------------------------------

TITLE: Initializing Pattern Matching in Casbin (Go)
DESCRIPTION: This snippet demonstrates how to initialize pattern matching in Casbin using Go. It shows how to create an enforcer and add a named matching function for pattern matching.

LANGUAGE: go
CODE:
e, _ := NewEnforcer("./example.conf", "./example.csv")
e.AddNamedMatchingFunc("g","KeyMatch2",util.KeyMatch2)

----------------------------------------

TITLE: Adding Global Model and Policy Configuration to authz-casbin Plugin Metadata
DESCRIPTION: This cURL command adds a global model and policy configuration to the authz-casbin plugin's metadata in APISIX. It allows using a single model and policy configuration across multiple routes.

LANGUAGE: sh
CODE:
curl http://127.0.0.1:9080/apisix/admin/plugin_metadata/authz-casbin -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -i -X PUT -d '
{
"model": "[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)",

"policy": "p, *, /, GET\np, admin, *, *\ng, alice, admin\ng, bob, admin"
}'

----------------------------------------

TITLE: Using Custom Function in Casbin Model Configuration
DESCRIPTION: Demonstrates how to use a custom function (my_func) in a Casbin model configuration file for matching objects in access control rules.

LANGUAGE: ini
CODE:
[matchers]
m = r.sub == p.sub && my_func(r.obj, p.obj) && r.act == p.act

----------------------------------------

TITLE: Enabling authz-casbin Plugin on APISIX Route with Global Configuration
DESCRIPTION: This cURL command enables the authz-casbin plugin on an APISIX route using the global model and policy configuration. It configures the plugin to use the metadata configuration and sets the username header for subject identification.

LANGUAGE: sh
CODE:
curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "plugins": {
        "authz-casbin": {
            "username": "username"
        }
    },
    "upstream": {
        "nodes": {
            "127.0.0.1:1980": 1
        },
        "type": "roundrobin"
    },
    "uri": "/route1/*"
}'

----------------------------------------

TITLE: Defining Complex ABAC Model with eval() in Casbin
DESCRIPTION: This snippet demonstrates how to define a more complex ABAC model using the eval() function in Casbin. It allows for scaling with a large number of ABAC rules.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub_rule, obj, act

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = eval(p.sub_rule) && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: MySQL Database Structure for Casbin Policy Storage
DESCRIPTION: SQL representation of how Casbin policy rules are stored in a database table. It shows the column structure and example data corresponding to the policy file.

LANGUAGE: sql
CODE:
| id   | ptype | v0          | v1    | v2    | v3   | v4   | v5   |
| ---- | ----- | ----------- | ----- | ----- | ---- | ---- | ---- |
| 1    | p     | data2_admin | data2 | read  |      |      |      |
| 2    | p     | data2_admin | data2 | write |      |      |      |
| 3    | g     | alice       | admin |       |      |      |      |

----------------------------------------

TITLE: Go-based Admin Portal Implementations
DESCRIPTION: Collection of Go-based admin portal projects using Casbin for authorization, featuring various frameworks like Gin, Beego, and Echo with different frontend technologies.

LANGUAGE: markdown
CODE:
Project | Author | Frontend | Backend | Description
----|----|----|----|----
[Casdoor](https://casdoor.org) | Casbin | React + Ant Design | Beego | Based on Beego + XORM + React
[go-admin-team/go-admin](https://github.com/go-admin-team/go-admin) | [@go-admin-team](https://github.com/go-admi-team) | Vue + Element UI | Gin | go-admin Based on Gin + Casbin + GORM

----------------------------------------

TITLE: Implementing Casbin Authorization in GraphQL Resolver
DESCRIPTION: Example showing how to implement Casbin authorization within a GraphQL resolver function for a Post type. The authorization logic is handled by the postRepository.

LANGUAGE: javascript
CODE:
// Casbin authorization logic lives inside postRepository
var postRepository = require('postRepository');
 
var postType = new GraphQLObjectType({
  name: 'Post',
  fields: {
    body: {
      type: GraphQLString,
      resolve: (post, args, context, { rootValue }) => {
        return postRepository.getBody(context.user, post);
      }
    }
  }
});

----------------------------------------

TITLE: Loading Filtered Policy with Casbin in Go
DESCRIPTION: This snippet demonstrates how to use the LoadFilteredPolicy method with a filtered file adapter in Casbin. It loads a subset of the policy based on a specified domain filter, which is useful for large-scale, multi-tenant environments.

LANGUAGE: go
CODE:
import "github.com/casbin/casbin"

enforcer := casbin.NewEnforcer()

adapter := fileadapter.NewFilteredAdapter("examples/rbac_with_domains_policy.csv")
enforcer.InitWithAdapter("examples/rbac_with_domains_model.conf", adapter)

filter := &fileadapter.Filter{
    P: []string{"", "domain1"},
    G: []string{"", "", "domain1"},
}
enforcer.LoadFilteredPolicy(filter)

// The loaded policy now only contains the entries pertaining to "domain1".

----------------------------------------

TITLE: Listing Cloud Native Middleware Projects for Go
DESCRIPTION: A table listing Casbin-related cloud native middleware projects for Go, including k8s-authz for Kubernetes, envoy-authz for Istio and Envoy, and kubesphere-authz for kubeSphere.

LANGUAGE: markdown
CODE:
Project | Author | Description
---- | ---- | ----
[k8s-authz](https://github.com/casbin/k8s-authz) | Casbin | Authorization middleware For [Kubernetes](https://kubernetes.io/)
[envoy-authz](https://github.com/casbin/envoy-authz) | Casbin | Authorization middleware For [Istio](https://istio.io/) and [Envoy](https://envoyproxy.io/)
[kubesphere-authz](https://github.com/casbin/kubesphere-authz) | Casbin | Authorization middleware For [kubeSphere](https://kubesphere.io/)

----------------------------------------

TITLE: Implementing Role Manager Interface in Java
DESCRIPTION: All role managers in Java must implement the RoleManager interface. The Default Role Manager can be used as a reference implementation.

LANGUAGE: Java
CODE:
// All role managers must implement the RoleManager interface
// Default Role Manager can be used as a reference implementation

----------------------------------------

TITLE: Listing Cloud Native Middleware Projects for Node.js
DESCRIPTION: A table listing a Casbin-related cloud native middleware project for Node.js, specifically ODPF Shield, which is a cloud native role-based authorization aware reverse-proxy service.

LANGUAGE: markdown
CODE:
Project | Author | Description
---- | ---- | ----
[ODPF Shield](https://github.com/odpf/shield) | [Open Data Platform](https://github.com/odpf) | ODPF Shield is cloud native role-based authorization aware reverse-proxy service.

----------------------------------------

TITLE: Starting Authorization Server
DESCRIPTION: Commands to build and start the Casbin authorization server that will handle authorization requests from Envoy

LANGUAGE: bash
CODE:
$ go build .
$ ./authz

----------------------------------------

TITLE: Getting Users for Role in Domain
DESCRIPTION: Retrieves all users that have a specific role within a given domain.

LANGUAGE: go
CODE:
res := e.GetUsersForRoleInDomain("admin", "domain1")

LANGUAGE: typescript
CODE:
const res = e.getUsersForRoleInDomain("admin", "domain1")

LANGUAGE: python
CODE:
res = e.get_users_for_role_in_domain("admin", "domain1")

----------------------------------------

TITLE: Configuring Default Logging in Casbin (Go)
DESCRIPTION: Example of default Casbin logging output and how to enable/disable logging.

LANGUAGE: log
CODE:
2017/07/15 19:43:56 [Request: alice, data1, read ---> true]

----------------------------------------

TITLE: Adding Named Matching Function in Casbin RoleManager
DESCRIPTION: Demonstrates how to add a named matching function to RoleManager and test role matching with wildcards. The example shows adding a matching function and testing role links.

LANGUAGE: go
CODE:
    e.AddNamedMatchingFunc("g", "", util.KeyMatch)
	_, _ = e.AddGroupingPolicies([][]string{{"*", "admin", "domain1"}})
	_, _ = e.GetRoleManager().HasLink("bob", "admin", "domain1") // -> true, nil

LANGUAGE: typescript
CODE:
    await e.addNamedMatchingFunc('g', Util.keyMatchFunc);
    await e.addGroupingPolicies([['*', 'admin', 'domain1']]);
    await e.getRoleManager().hasLink('bob', 'admin', 'domain1');

----------------------------------------

TITLE: Basic RBAC Policy Definition in Casbin
DESCRIPTION: Example showing how to define basic RBAC policies in Casbin using policy rules and role assignments.

LANGUAGE: text
CODE:
p, admin, book, read
p, alice, book, read
g, amber, admin

----------------------------------------

TITLE: Initializing Enforcer with Named Matching Function
DESCRIPTION: Shows how to create a new enforcer instance and add a named matching function. The example includes paths to model and policy files.

LANGUAGE: go
CODE:
    e, _ := casbin.NewEnforcer("path/to/model", "path/to/policy")
    e.AddNamedMatchingFunc("g", "", util.MatchKey)

LANGUAGE: typescript
CODE:
    const e = await newEnforcer('path/to/model', 'path/to/policy');
    await e.addNamedMatchingFunc('g', Util.keyMatchFunc);

----------------------------------------

TITLE: Adding Domain Matching Function in Casbin (Go)
DESCRIPTION: This code shows how to add a domain matching function in Casbin using Go. It uses the AddNamedDomainMatchingFunc method to add a KeyMatch2 function for domain pattern matching.

LANGUAGE: go
CODE:
e.AddNamedDomainMatchingFunc("g","KeyMatch2",util.KeyMatch2)

----------------------------------------

TITLE: Managing Role Links in Casbin
DESCRIPTION: Examples of adding, deleting, and checking role inheritance links between users and roles with domain support.

LANGUAGE: go
CODE:
    rm.AddLink("u1", "g1", "domain1")
    rm.DeleteLink("u1", "g1", "domain1")
    rm.HasLink("u1", "g1", "domain1")

LANGUAGE: typescript
CODE:
    await rm.addLink('u1', 'g1', 'domain1');
    await rm.deleteLink('u1', 'g1', 'domain1');
    await rm.hasLink('u1', 'g1', 'domain1');

LANGUAGE: python
CODE:
    rm.add_link("u1", "g1", "domain1")
    rm.delete_link("u1", "g1", "domain1")
    rm.has_link("u1", "g1", "domain1")

----------------------------------------

TITLE: Installing Casbin.js Dependencies
DESCRIPTION: Installation commands for adding Casbin.js and its dependencies using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install casbin.js
npm install casbin

LANGUAGE: bash
CODE:
yarn add casbin.js

----------------------------------------

TITLE: Role Information Retrieval in Casbin
DESCRIPTION: Methods for retrieving role information including getting roles for a user, users for a role, and printing all roles.

LANGUAGE: go
CODE:
    rm.GetRoles("u1", "domain1")
    rm.GetUsers("g1")
    rm.PrintRoles()

LANGUAGE: typescript
CODE:
    await rm.getRoles('u1', 'domain1');
    await rm.getUsers('g1');
    await rm.printRoles();

LANGUAGE: python
CODE:
    rm.get_roles("u1", "domain")
    rm.get_users("g1")
    rm.print_roles()

----------------------------------------

TITLE: Checking if a User Has a Role
DESCRIPTION: Determines whether a user has a specific role using the HasRoleForUser method.

LANGUAGE: Go
CODE:
res := e.HasRoleForUser("alice", "data1_admin")

LANGUAGE: TypeScript
CODE:
const res = await e.hasRoleForUser('alice', 'data1_admin')

LANGUAGE: PHP
CODE:
$res = $e->hasRoleForUser("alice", "data1_admin");

LANGUAGE: Python
CODE:
has = e.has_role_for_user("alice", "data1_admin")

LANGUAGE: C#
CODE:
var res = e.HasRoleForUser("alice", "data1_admin");

LANGUAGE: Rust
CODE:
let has = e.has_role_for_user("alice", "data1_admin", None); // No domain

LANGUAGE: Java
CODE:
boolean res = e.hasRoleForUser("alice", "data1_admin");

----------------------------------------

TITLE: Defining Envoy Authorization Service Protocol
DESCRIPTION: Protocol buffer definition for the authorization service interface that performs authorization checks on incoming network requests. Implements Check() method that returns OK or not OK status based on request attributes.

LANGUAGE: protobuf
CODE:
// A generic interface for performing authorization check on incoming
// requests to a networked service.
service Authorization {
  // Performs authorization check based on the attributes associated with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc Check(v2.CheckRequest) returns (v2.CheckResponse);
}

----------------------------------------

TITLE: Adding a Role for a User
DESCRIPTION: Assigns a new role to a user using the AddRoleForUser method. Returns false if the user already has the role.

LANGUAGE: Go
CODE:
e.AddRoleForUser("alice", "data2_admin")

LANGUAGE: TypeScript
CODE:
await e.addRoleForUser('alice', 'data2_admin')

LANGUAGE: PHP
CODE:
$e->addRoleForUser("alice", "data2_admin");

LANGUAGE: Python
CODE:
e.add_role_for_user("alice", "data2_admin")

LANGUAGE: C#
CODE:
var added = e.AddRoleForUser("alice", "data2_admin");
or
var added = await e.AddRoleForUserAsync("alice", "data2_admin");

LANGUAGE: Rust
CODE:
let added = e.add_role_for_user("alice", "data2_admin", None).await?; // No domain

LANGUAGE: Java
CODE:
boolean added = e.addRoleForUser("alice", "data2_admin");

----------------------------------------

TITLE: Basic Casbin.js Authorization Setup
DESCRIPTION: Initialize Casbin.js in manual mode and set up basic permission rules for reading and writing access to data objects.

LANGUAGE: javascript
CODE:
const casbinjs = require("casbin.js");
const permission = {
    "read": ["data1", "data2"],
    "write": ["data1"]
}
const authorizer = new casbinjs.Authorizer("manual");

----------------------------------------

TITLE: Deleting a Role for a User
DESCRIPTION: Removes a role from a user using the DeleteRoleForUser method. Returns false if the user does not have the role.

LANGUAGE: Go
CODE:
e.DeleteRoleForUser("alice", "data1_admin")

LANGUAGE: TypeScript
CODE:
await e.deleteRoleForUser('alice', 'data1_admin')

LANGUAGE: PHP
CODE:
$e->deleteRoleForUser("alice", "data1_admin");

LANGUAGE: Python
CODE:
e.delete_role_for_user("alice", "data1_admin")

LANGUAGE: C#
CODE:
var deleted = e.DeleteRoleForUser("alice", "data1_admin");
or
var deleted = await e.DeleteRoleForUser("alice", "data1_admin");

LANGUAGE: Rust
CODE:
let deleted = e.delete_role_for_user("alice", "data1_admin", None).await?; // No domain

LANGUAGE: Java
CODE:
boolean deleted = e.deleteRoleForUser("alice", "data1_admin");

----------------------------------------

TITLE: Backend API Implementation in Go
DESCRIPTION: Example of implementing the backend API endpoint for Casbin.js permission synchronization using Beego framework.

LANGUAGE: go
CODE:
beego.Router("api/casbin", &controllers.APIController{}, "GET:GetFrontendPermission")

func (c *APIController) GetFrontendPermission() {
    visitor := c.Input().Get("casbin_subject")
    c.Data["perm"] = casbin.CasbinJsGetPermissionForUser(e, visitor)
    c.ServeJSON()
}

----------------------------------------

TITLE: Getting Implicit Roles for a User
DESCRIPTION: Retrieves all implicit roles for a user, including indirect roles, using the GetImplicitRolesForUser method.

LANGUAGE: Go
CODE:
e.GetImplicitRolesForUser("alice")

LANGUAGE: TypeScript
CODE:
await e.getImplicitRolesForUser("alice")

LANGUAGE: PHP
CODE:
$e->getImplicitRolesForUser("alice");

LANGUAGE: Python
CODE:
e.get_implicit_roles_for_user("alice")

LANGUAGE: C#
CODE:
var implicitRoles = e.GetImplicitRolesForUser("alice");

LANGUAGE: Rust
CODE:
e.get_implicit_roles_for_user("alice", None); // No domain

LANGUAGE: Java
CODE:
List<String> implicitRoles = e.getImplicitRolesForUser("alice");

----------------------------------------

TITLE: Using File Adapter in Rust
DESCRIPTION: Example of initializing a Casbin enforcer with the built-in file adapter in Rust

LANGUAGE: Rust
CODE:
use casbin::prelude::*;

let mut e = Enforcer::new("examples/basic_model.conf", "examples/basic_policy.csv").await?;

----------------------------------------

TITLE: Using File Adapter in PHP
DESCRIPTION: Example of initializing a Casbin enforcer with the built-in file adapter in PHP

LANGUAGE: PHP
CODE:
use Casbin\Enforcer;

$e = new Enforcer('examples/basic_model.conf', 'examples/basic_policy.csv');

----------------------------------------

TITLE: Getting Users for a Role
DESCRIPTION: Retrieves all users assigned to a specific role using the GetUsersForRole method.

LANGUAGE: Go
CODE:
res := e.GetUsersForRole("data1_admin")

LANGUAGE: TypeScript
CODE:
const res = await e.getUsersForRole('data1_admin')

LANGUAGE: PHP
CODE:
$res = $e->getUsersForRole("data1_admin");

LANGUAGE: Python
CODE:
users = e.get_users_for_role("data1_admin")

LANGUAGE: C#
CODE:
var res = e.GetUsersForRole("data1_admin");

LANGUAGE: Rust
CODE:
let users = e.get_users_for_role("data1_admin", None); // No domain

LANGUAGE: Java
CODE:
List<String> res = e.getUsersForRole("data1_admin");

----------------------------------------

TITLE: Using MySQL Adapter in Multiple Languages
DESCRIPTION: Examples of initializing a Casbin enforcer with MySQL adapter in different languages

LANGUAGE: Go
CODE:
import (
    "github.com/casbin/casbin"
    "github.com/casbin/mysql-adapter"
)

a := mysqladapter.NewAdapter("mysql", "root:@tcp(127.0.0.1:3306)/")
e := casbin.NewEnforcer("examples/basic_model.conf", a)

LANGUAGE: Rust
CODE:
use casbin::prelude::*;
use diesel_adapter::{ConnOptions, DieselAdapter};

let mut conn_opts = ConnOptions::default();
conn_opts
	.set_hostname("127.0.0.1")
	.set_port(3306)
	.set_host("127.0.0.1:3306")
	.set_database("casbin")
	.set_auth("casbin_rs", "casbin_rs");

let a = DieselAdapter::new(conn_opts)?;
let mut e = Enforcer::new("examples/basic_model.conf", a).await?;

LANGUAGE: PHP
CODE:
use Casbin\Enforcer;
use CasbinAdapter\DBAL\Adapter as DatabaseAdapter;

$config = [
    'driver'     => 'pdo_mysql',
    'host' => '127.0.0.1',
    'dbname' => 'test',
    'user' => 'root',
    'password' => '',
    'port' => '3306',
];

$a = DatabaseAdapter::newAdapter($config);
$e = new Enforcer('examples/basic_model.conf', $a);

----------------------------------------

TITLE: Generating Kubernetes Certificates
DESCRIPTION: Script to generate certificates and keys for user authentication

LANGUAGE: bash
CODE:
./gen_cert.sh

----------------------------------------

TITLE: Java-based Admin Portal Implementations
DESCRIPTION: Java-based admin portal projects using Casbin for authorization, primarily using Spring Boot framework.

LANGUAGE: markdown
CODE:
Project | Author | Frontend | Backend | Description
----|----|----|----|----
[spring-boot-web](https://github.com/BazookaW/spring-boot-web) | [@BazookaW](https://github.com/BazookaW) | None | SpringBoot | Admin portal based on SpringBoot 2.0 + MyBatisPlus + Casbin

----------------------------------------

TITLE: Citing Casbin in Academic Papers
DESCRIPTION: BibTeX citation for referencing the PML paper about Casbin in academic work.

LANGUAGE: bibtex
CODE:
@article{luo2019pml,
  title={PML: An Interpreter-Based Access Control Policy Language for Web Services},
  author={Luo, Yang and Shen, Qingni and Wu, Zhonghai},
  journal={arXiv preprint arXiv:1903.09756},
  year={2019}
}

----------------------------------------

TITLE: Node.js-based Admin Portal Implementations
DESCRIPTION: Node.js-based admin portal projects using Casbin for authorization, primarily using Express framework with various frontend technologies.

LANGUAGE: markdown
CODE:
Project | Author | Frontend | Backend | Description
----|----|----|----|----
[node-mysql-rest-api](https://github.com/JoemaNequinto/node-mysql-rest-api) | [@JoemaNequinto](https://github.com/JoemaNequinto) | None | Express | A boilerplate application for building RESTful APIs Microservice in Node.js using Express, Sequelize, JWT and Casbin.

----------------------------------------

TITLE: Benchmarking Environment for Lua Casbin
DESCRIPTION: Specifies the hardware configuration used for benchmarking the Lua implementation of Casbin.

LANGUAGE: text
CODE:
AMD Ryzen(TM) 5 4600H CPU @ 3.0GHz, 6 Cores, 12 Threads

----------------------------------------

TITLE: Python-based Admin Portal Implementations
DESCRIPTION: Python-based admin portal projects using Casbin for authorization, featuring FastAPI and Django frameworks.

LANGUAGE: markdown
CODE:
Project | Author | Frontend | Backend | Description
----|----|----|----|----
[fastapi-mysql-generator](https://github.com/CoderCharm/fastapi-mysql-generator) | [@CoderCharm](https://github.com/CoderCharm) | None | FastAPI | FastAPI + MySQL + JWT + Casbin

----------------------------------------

TITLE: Listing Casbin Adopters in Node.js
DESCRIPTION: A table listing Node.js projects that have directly integrated Casbin, including links to their model and policy implementations.

LANGUAGE: markdown
CODE:
Name | Description | Model | Policy
----|----|----|----
[Notadd](https://github.com/notadd/notadd) | A micro-service development architecture based on Nest.js. | [.conf](https://github.com/notadd/notadd/blob/e58d0a0cf5d691c3fe20170e94cdd8e2c627abd4/apps/nest-upms/src/casbin/rbac_model.conf) | [DB adapter](https://github.com/notadd/notadd/blob/e58d0a0cf5d691c3fe20170e94cdd8e2c627abd4/apps/nest-upms/src/casbin/adapter.ts)

----------------------------------------

TITLE: PHP-based Admin Portal Implementations
DESCRIPTION: PHP-based admin portal projects using Casbin for authorization, including implementations in Laravel, ThinkPHP, and Hyperf frameworks.

LANGUAGE: markdown
CODE:
Project | Author | Frontend | Backend | Description
----|----|----|----|----
[Tadmin](https://github.com/techoner/tadmin) | [@techoner](https://github.com/techoner) | AmazeUI | ThinkPHP | Non-intrusive backend framework based on ThinkPHP 5.1+

----------------------------------------

TITLE: Implementing Role Manager Interface in PHP
DESCRIPTION: All role managers in PHP must implement the RoleManager interface. The Default Role Manager can be used as a reference implementation.

LANGUAGE: PHP
CODE:
// All role managers must implement the RoleManager interface
// Default Role Manager can be used as a reference implementation

----------------------------------------

TITLE: Implementing Role Manager Interface in Python
DESCRIPTION: All role managers in Python must implement the RoleManager interface. The Default Role Manager can be used as a reference implementation.

LANGUAGE: Python
CODE:
# All role managers must implement the RoleManager interface
# Default Role Manager can be used as a reference implementation

----------------------------------------

TITLE: Defining Policies with Explicit Priority in Casbin
DESCRIPTION: This CSV snippet shows how to define policies with explicit priorities in Casbin. The first value in each policy line represents the priority, with lower numbers indicating higher priority. It also includes role assignments using the 'g' prefix.

LANGUAGE: csv
CODE:
p, 10, data1_deny_group, data1, read, deny
p, 10, data1_deny_group, data1, write, deny
p, 10, data2_allow_group, data2, read, allow
p, 10, data2_allow_group, data2, write, allow


p, 1, alice, data1, write, allow
p, 1, alice, data1, read, allow
p, 1, bob, data2, read, deny

g, bob, data2_allow_group
g, alice, data1_deny_group

----------------------------------------

TITLE: Configuring Role and User Hierarchy Priority Model in Casbin
DESCRIPTION: This snippet illustrates how to configure the model.conf file for priority based on role and user hierarchy in Casbin. It uses 'subjectPriority' in the policy effect to determine the priority based on the hierarchical structure.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act, eft

[role_definition]
g = _, _

[policy_effect]
e = subjectPriority(p.eft) || deny

[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Defining Policies with Role and User Hierarchy in Casbin
DESCRIPTION: This CSV snippet demonstrates how to define policies and role assignments for a priority model based on role and user hierarchy in Casbin. The order of policy definitions and role assignments affects the priority of the rules.

LANGUAGE: csv
CODE:
p, root, data1, read, deny
p, admin, data1, read, deny

p, editor, data1, read, deny
p, subscriber, data1, read, deny

p, jane, data1, read, allow
p, alice, data1, read, allow

g, admin, root

g, editor, admin
g, subscriber, admin

g, jane, editor
g, alice, subscriber

----------------------------------------

TITLE: Loading Casbin Model from File
DESCRIPTION: Simple example of loading a Casbin model from a .CONF file along with a policy file.

LANGUAGE: go
CODE:
e := casbin.NewEnforcer("examples/rbac_model.conf", "examples/rbac_policy.csv")

----------------------------------------

TITLE: Loading Casbin Model from String
DESCRIPTION: Shows how to load a Casbin model from a multi-line string, eliminating the need for a separate model file while maintaining the same functionality.

LANGUAGE: go
CODE:
import (
	"github.com/casbin/casbin/v2"
	"github.com/casbin/casbin/v2/model"
)

// Initialize the model from a string.
text :=
`
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act

[role_definition]
g = _, _

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act
`
m, _ := model.NewModelFromString(text)

// Load the policy rules from the .CSV file adapter.
// Replace it with your adapter to avoid files.
a := fileadapter.NewAdapter("examples/rbac_policy.csv")

// Create the enforcer.
e := casbin.NewEnforcer(m, a)

----------------------------------------

TITLE: Setting Custom Loggers for Casbin Enforcers (Go)
DESCRIPTION: Demonstrates how to set different loggers for multiple Casbin enforcers at runtime or during initialization.

LANGUAGE: go
CODE:
// Set a default logger as enforcer e1's logger.
// This operation could also be seen as changing the logger of e1 at run-time.
e1.SetLogger(&Log.DefaultLogger{})

// Set another logger as enforcer e2's logger.
e2.SetLogger(&YouOwnLogger)

// Set your logger when initialize enforcer e3.
e3, _ := casbin.NewEnforcer("examples/rbac_model.conf", a, logger)

----------------------------------------

TITLE: Implementing a Custom Logger for Casbin (Go)
DESCRIPTION: Example of implementing a custom logger for Casbin in Go, including methods for logging models, enforcements, roles, and policies.

LANGUAGE: go
CODE:
import (
	"fmt"
	"log"
	"strings"
)

// DefaultLogger is the implementation for a Logger using golang log.
type DefaultLogger struct {
	enabled bool
}

func (l *DefaultLogger) EnableLog(enable bool) {
	l.enabled = enable
}

func (l *DefaultLogger) IsEnabled() bool {
	return l.enabled
}

func (l *DefaultLogger) LogModel(model [][]string) {
	if !l.enabled {
		return
	}
	var str strings.Builder
	str.WriteString("Model: ")
	for _, v := range model {
		str.WriteString(fmt.Sprintf("%v\n", v))
	}

	log.Println(str.String())
}

func (l *DefaultLogger) LogEnforce(matcher string, request []interface{}, result bool, explains [][]string) {
	if !l.enabled {
		return
	}

	var reqStr strings.Builder
	reqStr.WriteString("Request: ")
	for i, rval := range request {
		if i != len(request)-1 {
			reqStr.WriteString(fmt.Sprintf("%v, ", rval))
		} else {
			reqStr.WriteString(fmt.Sprintf("%v", rval))
		}
	}
	reqStr.WriteString(fmt.Sprintf(" ---> %t\n", result))

	reqStr.WriteString("Hit Policy: ")
	for i, pval := range explains {
		if i != len(explains)-1 {
			reqStr.WriteString(fmt.Sprintf("%v, ", pval))
		} else {
			reqStr.WriteString(fmt.Sprintf("%v \n", pval))
		}
	}

	log.Println(reqStr.String())
}

func (l *DefaultLogger) LogPolicy(policy map[string][][]string) {
	if !l.enabled {
		return
	}

	var str strings.Builder
	str.WriteString("Policy: ")
	for k, v := range policy {
		str.WriteString(fmt.Sprintf("%s : %v\n", k, v))
	}

	log.Println(str.String())
}

func (l *DefaultLogger) LogRole(roles []string) {
	if !l.enabled {
		return
	}

	log.Println("Roles: ", roles)
}

----------------------------------------

TITLE: Enabling and Disabling Casbin Enforcer (Go)
DESCRIPTION: Demonstrates how to enable and disable the Casbin enforcer at runtime, affecting the behavior of the Enforce() function.

LANGUAGE: go
CODE:
e := casbin.NewEnforcer("examples/basic_model.conf", "examples/basic_policy.csv")

// Will return false.
// By default, the enforcer is enabled.
e.Enforce("non-authorized-user", "data1", "read")

// Disable the enforcer at run-time.
e.EnableEnforce(false)

// Will return true for any request.
e.Enforce("non-authorized-user", "data1", "read")

// Enable the enforcer again.
e.EnableEnforce(true)

// Will return false.
e.Enforce("non-authorized-user", "data1", "read")

----------------------------------------

TITLE: Merging Effects in Casbin Effector (Go)
DESCRIPTION: Demonstrates how to use the MergeEffects function in Casbin's Effector interface. This function merges all matching results collected by the enforcer into a single decision, considering policy effects, matches, and indices.

LANGUAGE: go
CODE:
Effect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)

----------------------------------------

TITLE: Deploying Casbin Effector (Go)
DESCRIPTION: Shows how to deploy an Effector in Casbin and use the MergeEffects function. This snippet initializes an Effector and calls MergeEffects with the required parameters.

LANGUAGE: go
CODE:
var e Effector
Effect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)

----------------------------------------

TITLE: Loading Envoy Configuration
DESCRIPTION: Command to start Envoy with the authorization configuration file and info-level logging

LANGUAGE: bash
CODE:
$  envoy -c authz.yaml -l info

----------------------------------------

TITLE: Checking Write Permissions with Casbin.js
DESCRIPTION: Example of using the can() method to check write permissions for a specific data object.

LANGUAGE: javascript
CODE:
result = authorizer.can("write", "data1");
result.then((success, failed) => {
    if (success) {
        console.log("you can write data1");
    } else {
        console.log("you cannot write data1");
    }
});

----------------------------------------

TITLE: Advanced Casbin.js Integration
DESCRIPTION: Setting up automatic permission synchronization with backend Casbin service using the auto mode.

LANGUAGE: javascript
CODE:
const casbinjs = require('casbin.js');
const authorizer = new casbinjs.Authorizer(
    'auto',
    {endpoint: 'http://your_endpoint/api/casbin'}
);
authorizer.setUser("Tom");
result = authorizer.can("read", "data1");
result.then((success, failed) => {
    if (success) {
        // Some frontend procedure ...
    }
});

----------------------------------------

TITLE: Building Docker Image for k8s-authz
DESCRIPTION: Command to build the Docker image for the authorization middleware with version tag

LANGUAGE: bash
CODE:
docker build -t casbin/k8s_authz:0.1 .

----------------------------------------

TITLE: Deploying Kubernetes Validation Controller
DESCRIPTION: Command to deploy the validation controller and webhook configuration to the Kubernetes cluster

LANGUAGE: bash
CODE:
kubectl apply -f deployment.yaml

----------------------------------------

TITLE: Creating Kubernetes Secret for Certificates
DESCRIPTION: Commands to create a Kubernetes secret containing SSL certificates for secure communication

LANGUAGE: bash
CODE:
kubectl create secret generic casbin -n default \
  --from-file=key.pem=certs/casbin-key.pem \
  --from-file=cert.pem=certs/casbin-crt.pem

----------------------------------------

TITLE: Stopping AutoLoad Policy in Casbin
DESCRIPTION: Shows how to stop the automatic loading of policy in Casbin. This can be used when you no longer need real-time policy updates or want to conserve resources.

LANGUAGE: Generic
CODE:
StopAutoLoadPolicy()

----------------------------------------

TITLE: Demonstrating Inline Code in Markdown
DESCRIPTION: Shows how to use inline code formatting in Markdown to highlight specific terms related to the Casbin online editor's features.

LANGUAGE: markdown
CODE:
``syntax highlighting`` and ``code completion``

----------------------------------------

TITLE: Referencing RBAC Patterns in Markdown
DESCRIPTION: Illustrates the use of inline code to reference specific RBAC patterns supported by the Casbin online editor.

LANGUAGE: markdown
CODE:
``RBAC with pattern`` or ``RBAC with all pattern``

----------------------------------------

TITLE: Referring to the Casbin Editor in Markdown
DESCRIPTION: Shows how to use inline code formatting to specifically reference the Casbin online editor within the documentation.

LANGUAGE: markdown
CODE:
``editor``

----------------------------------------

TITLE: Handling Commas in CSV Policy Files for Casbin
DESCRIPTION: Examples of correctly formatting CSV policy rules when they contain commas. It shows how to use double quotes to wrap fields containing commas.

LANGUAGE: csv
CODE:
p, alice, "data1,data2", read	--correct
p, alice, data1,data2, read		--incorrect ("data1,data2" should be a whole)

----------------------------------------

TITLE: Escaping Quotes in CSV Policy Files for Casbin
DESCRIPTION: Examples of correctly formatting CSV policy rules when they contain both commas and quotes. It demonstrates how to escape embedded double quotes.

LANGUAGE: csv
CODE:
p, alice, data, "r.act in (""get"", ""post"")"		--correct
p, alice, data, "r.act in ("get", "post")"			--incorrect (should use "" to escape "")

----------------------------------------

TITLE: Example Casbin Policy File
DESCRIPTION: A sample Casbin policy file showing how to define permissions and role assignments using the 'p' and 'g' keywords.

LANGUAGE: csv
CODE:
p, data2_admin, data2, read
p, data2_admin, data2, write
g, alice, admin

----------------------------------------

TITLE: RBAC Matcher Configuration
DESCRIPTION: Defines the matching logic for RBAC rules, checking if a subject has the required role for accessing an object with specific permissions.

LANGUAGE: ini
CODE:
[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act

----------------------------------------

TITLE: Role Manager Constructor in Go
DESCRIPTION: Implementation of the role manager constructor in Go, allowing configuration of maximum hierarchy levels for role inheritance.

LANGUAGE: go
CODE:
func NewRoleManager(maxHierarchyLevel int) rbac.RoleManager {
	rm := RoleManager{}
	rm.allRoles = &sync.Map{}
	rm.maxHierarchyLevel = maxHierarchyLevel
	rm.hasPattern = false

	return &rm
}

----------------------------------------

TITLE: Setting RBAC Policies with Domains in Casbin
DESCRIPTION: Defines policies for different roles across multiple domains/tenants. Specifies permissions and role assignments for users in different contexts.

LANGUAGE: ini
CODE:
p, admin, tenant1, data1, read
p, admin, tenant2, data2, read

g, alice, admin, tenant1
g, alice, user, tenant2

----------------------------------------

TITLE: Adding Named Domain Matching Function in Casbin (Node.js)
DESCRIPTION: This TypeScript code shows how to add a named domain matching function in Casbin using Node.js. It uses the addNamedDomainMatchingFunc method to add a keyMatch2Func for domain pattern matching.

LANGUAGE: typescript
CODE:
await e.addNamedDomainMatchingFunc('g', Util.keyMatch2Func);

----------------------------------------

TITLE: Defining Request and Policy in Casbin Model
DESCRIPTION: Example of defining request and policy sections in a Casbin model configuration file. The request definition specifies arguments for the Enforce function, while the policy definition determines the structure of policy rules.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj, act

[policy_definition]
p = sub, obj, act
p2 = sub, act

----------------------------------------

TITLE: Using 'in' Operator in Casbin Matcher
DESCRIPTION: Demonstrates the use of the 'in' operator in a Casbin matcher to check if a value is present in an array.

LANGUAGE: ini
CODE:
[request_definition]
r = sub, obj
...
[matchers]
m = r.sub.Name in (r.obj.Admins)

----------------------------------------

TITLE: Retrieving All Subjects from Casbin Policy in Go
DESCRIPTION: Demonstrates how to get all subjects defined in the Casbin policy using the GetAllSubjects function.

LANGUAGE: go
CODE:
enforcer,err := casbin.NewEnforcer("./example/model.conf", "./example/policy.csv")
if err != nil {
	fmt.Printf("Error, details: %s\n", err)
}
allSubjects := enforcer.GetAllSubjects()
fmt.Println(allSubjects)

----------------------------------------

TITLE: Using Casbin RBAC APIs in Go
DESCRIPTION: Demonstrates how to use Casbin's RBAC APIs to get roles for users, users for roles, and check role assignments.

LANGUAGE: go
CODE:
roles, err := enforcer.GetRolesForUser("amber")
fmt.Println(roles) // [admin]
users, err := enforcer.GetUsersForRole("admin")
fmt.Println(users) // [amber abc]

enforcer.HasRoleForUser("amber", "admin") // true

fmt.Println(enforcer.Enforce("bob", "data2", "write")) // true
enforcer.DeletePermission("data2", "write")
fmt.Println(enforcer.Enforce("bob", "data2", "write")) // false

fmt.Println(enforcer.Enforce("alice", "data1", "read")) // true
enforcer.DeletePermissionForUser("alice", "data1", "read")
fmt.Println(enforcer.Enforce("alice", "data1", "read")) // false

----------------------------------------

TITLE: Benchmarking Environment for Go Casbin
DESCRIPTION: Specifies the hardware configuration used for benchmarking the Go implementation of Casbin.

LANGUAGE: text
CODE:
Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, 2601 Mhz, 4 Core(s), 8 Logical Processor(s)

----------------------------------------

TITLE: Benchmarking Environment for C++ Casbin
DESCRIPTION: Specifies the hardware configuration used for benchmarking the C++ implementation of Casbin.

LANGUAGE: text
CODE:
Intel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz, 4 cores, 4 threads

----------------------------------------

TITLE: Retrieving All Subjects in Casbin RBAC
DESCRIPTION: Demonstrates how to retrieve all subjects (users and roles) from the Casbin enforcer, showing how Casbin treats both users and roles as subjects.

LANGUAGE: go
CODE:
e.GetAllSubjects()

----------------------------------------

TITLE: Subject List Return Value in Casbin
DESCRIPTION: Shows the return value format when retrieving all subjects, containing both users and roles as a single list.

LANGUAGE: go
CODE:
[admin alice]

----------------------------------------

TITLE: Retrieving Roles in Casbin RBAC
DESCRIPTION: Demonstrates how to get all roles specifically from the Casbin enforcer, showing the distinction between roles and users.

LANGUAGE: go
CODE:
e.GetAllRoles()

----------------------------------------

TITLE: Role List Return Value in Casbin
DESCRIPTION: Shows the return value format when retrieving only roles, demonstrating how Casbin distinguishes roles from users internally.

LANGUAGE: go
CODE:
[admin]

----------------------------------------

TITLE: Adding Casbin License to New Files
DESCRIPTION: This snippet shows the Casbin license text that should be included at the top of any newly added files when contributing to Casbin projects. It ensures proper attribution and licensing for all contributions.

LANGUAGE: plaintext
CODE:
// Copyright 2021 The casbin Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

----------------------------------------

TITLE: Enforcing Batch Requests with batchEnforce in Java
DESCRIPTION: This snippet illustrates how to use the batchEnforce() method in Java to enforce multiple requests and receive a List of Boolean results.

LANGUAGE: java
CODE:
List<Boolean> boolArray = e.batchEnforce(requests);

----------------------------------------

TITLE: Defining Function Signature for Casbin Matchers in C
DESCRIPTION: Specifies the standard function signature for built-in matcher functions in Casbin, taking two string arguments and returning a boolean.

LANGUAGE: C
CODE:
bool function_name(string arg1, string arg2)

----------------------------------------

TITLE: Example ACL Policy in Casbin
DESCRIPTION: This snippet demonstrates a simple ACL policy definition in Casbin. It grants read access to 'data1' for 'alice' and write access to 'data2' for 'bob'.

LANGUAGE: ini
CODE:
p, alice, data1, read
p, bob, data2, write

----------------------------------------

TITLE: Multi-line Matcher Definition in Casbin
DESCRIPTION: This snippet shows how to define a multi-line matcher in Casbin using the backslash character for line continuation.

LANGUAGE: ini
CODE:
# Matchers
[matchers]
m = r.sub == p.sub && r.obj == p.obj \ 
  && r.act == p.act

----------------------------------------

TITLE: ABAC Matcher with 'in' Operator in Casbin (Golang)
DESCRIPTION: This snippet demonstrates the use of the 'in' operator for ABAC (Attribute-Based Access Control) in Casbin's Golang edition. It checks if the object is either equal to the policy object or within a specified set of values.

LANGUAGE: ini
CODE:
# Matchers
[matchers]
m = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')

----------------------------------------

TITLE: Removing Policies in Casbin
DESCRIPTION: Removes an authorization rule from the current policy using the RemovePolicy method.

LANGUAGE: go
CODE:
removed := e.RemovePolicy("alice", "data1", "read")

LANGUAGE: typescript
CODE:
const p = ['alice', 'data1', 'read']
const removed = await e.removePolicy(...p)

LANGUAGE: php
CODE:
$removed = $e->removePolicy("alice", "data1", "read");

LANGUAGE: python
CODE:
removed = e.remove_policy("alice", "data1", "read")

LANGUAGE: csharp
CODE:
var removed = e.RemovePolicy("alice", "data1", "read");
or
var removed = await e.RemovePolicyAsync("alice", "data1", "read");

LANGUAGE: rust
CODE:
let removed = e.remove_policy(vec!["alice".to_owned(), "data1".to_owned(), "read".to_owned()]).await?;

LANGUAGE: java
CODE:
boolean removed = e.removePolicy("alice", "data1", "read");

----------------------------------------

TITLE: Getting All Subjects in Casbin
DESCRIPTION: Retrieves a list of all subjects that appear in the current policy using the GetAllSubjects method.

LANGUAGE: go
CODE:
allSubjects := e.GetAllSubjects()

LANGUAGE: typescript
CODE:
const allSubjects = await e.getAllSubjects()

LANGUAGE: php
CODE:
$allSubjects = $e->getAllSubjects();

LANGUAGE: python
CODE:
all_subjects = e.get_all_subjects()

LANGUAGE: csharp
CODE:
var allSubjects = e.GetAllSubjects();

LANGUAGE: rust
CODE:
let all_subjects = e.get_all_subjects();

LANGUAGE: java
CODE:
List<String> allSubjects = e.getAllSubjects();

----------------------------------------

TITLE: Listing Casbin Adopters in Go
DESCRIPTION: A table listing various Go projects that have directly integrated Casbin, including links to their model and policy implementations.

LANGUAGE: markdown
CODE:
Name | Description | Model | Policy
----|----|----|----
[VMware Harbor](https://github.com/goharbor/harbor) | VMware's open source trusted cloud native registry project that stores, signs, and scans content. | [Code](https://github.com/goharbor/harbor/blob/master/src/pkg/permission/evaluator/rbac/casbin.go#L24-L44) | [Beego ORM](https://github.com/goharbor/harbor/blob/master/src/replication/dao/policy.go#L24-L26)
[Intel RMD](https://github.com/intel/rmd) | Intel's resource management daemon. | [.conf](https://github.com/intel/rmd/blob/master/etc/rmd/acl/url/model.conf) | [.csv](https://github.com/intel/rmd/blob/master/etc/rmd/acl/url/policy.csv)
[VMware Dispatch](https://github.com/vmware/dispatch) | A framework for deploying and managing serverless style applications. | [Code](https://github.com/vmware/dispatch/blob/master/pkg/identity-manager/handlers.go#L46-L55) | [Code](https://github.com/vmware/dispatch/blob/master/pkg/identity-manager/handlers_test.go#L35-L45)
[Skydive](https://github.com/skydive-project/skydive) | An open source real-time network topology and protocols analyzer. | [Code](https://github.com/skydive-project/skydive/blob/master/config/config.go#L136-L140) | [.csv](https://github.com/skydive-project/skydive/blob/master/rbac/policy.csv)
[Zenpress](https://github.com/insionng/zenpress) | A CMS system written in Golang. | [.conf](https://github.com/insionng/zenpress/blob/master/content/config/rbac_model.conf) | [Gorm](https://github.com/insionng/zenpress/blob/master/model/user.go#L53-L77)
[Argo CD](https://github.com/argoproj/argo-cd) | GitOps continuous delivery for Kubernetes. | [.conf](https://github.com/argoproj/argo-cd/blob/master/util/rbac/model.conf) | [.csv](https://github.com/argoproj/argo-cd/blob/master/util/rbac/builtin-policy.csv)
[Muxi Cloud](https://github.com/muxiyun/Mae) | PaaS of Muxi Cloud, an easier way to manage Kubernetes cluster. | [.conf](https://github.com/muxiyun/Mae/blob/master/conf/casbinmodel.conf) | [Code](https://github.com/muxiyun/Mae/blob/master/pkg/casbin/initPolicy.go#L21-L95)
[EngineerCMS](https://github.com/3xxx/EngineerCMS) | A CMS to manage knowledge for engineers. | [.conf](https://github.com/3xxx/EngineerCMS/blob/master/conf/rbac_model.conf) | [SQLite](https://github.com/3xxx/EngineerCMS/blob/master/database/engineer.db)
[Cyber Auth API](https://github.com/CyberlifeCN/cyber-auth-api) | A Golang authentication API project. | [.conf](https://github.com/CyberlifeCN/cyber-auth-api/blob/master/conf/authz_model.conf) | [.csv](https://github.com/CyberlifeCN/cyber-auth-api/blob/master/conf/authz_policy.csv)
[IRIS Community](https://github.com/irisnet/iris-community) | Website for IRIS Community Activities. | [.conf](https://github.com/irisnet/iris-community/blob/master/authz/authz_model.conf) | [.csv](https://github.com/irisnet/iris-community/blob/master/authz/authz_policy.csv)
[Metadata DB](https://github.com/Bnei-Baruch/mdb) | BB archive metadata database. | [.conf](https://github.com/Bnei-Baruch/mdb/blob/master/data/permissions_model.conf) | [.csv](https://github.com/Bnei-Baruch/mdb/blob/master/data/permissions_policy.csv)
[Qilin API](https://github.com/ProtocolONE/qilin.api) | ProtocolONE's licenses managemen tool for game content. | [Code](https://github.com/ProtocolONE/rbac/blob/master/model.go) | [.csv](https://github.com/ProtocolONE/rbac/tree/master/conf)
[Devtron Labs](https://github.com/devtron-labs/devtron) | Software Delivery Workflow For Kubernetes. | [.conf](https://github.com/devtron-labs/devtron/blob/main/auth_model.conf) | [Xorm](https://github.com/devtron-labs/devtron/blob/main/internal/casbin/Adapter.go)

----------------------------------------

TITLE: Listing Casbin Adopters in Java
DESCRIPTION: A table listing Java projects that have directly integrated Casbin, including links to their model and policy implementations.

LANGUAGE: markdown
CODE:
Name | Description | Model | Policy
----|----|----|----
[lighty.io](https://github.com/PantheonTechnologies/lighty-core) | OpenDaylight's solution for SDN controller. | [README](https://github.com/PantheonTechnologies/lighty-core/blob/6f2ceaae6a68e08c96d14d2fa8ee060ad9f61606/lighty-examples/lighty-controller-springboot-netconf/README.md#security) | N/A

----------------------------------------

TITLE: Listing Casbin Adopters in Python
DESCRIPTION: A table listing Python projects that have directly integrated Casbin, including links to their model and policy implementations.

LANGUAGE: markdown
CODE:
Name | Description | Model | Policy
----|----|----|----
[dtrace](https://github.com/EduScaled/dtrace) | EduScaled's tracing system. | [Commit](https://github.com/EduScaled/dtrace/commit/6e8d6b52ec2fa120e8ad63f84a4aecc3eae14c02) | N/A

----------------------------------------

TITLE: Listing Casbin Adopters via Plugin Integration
DESCRIPTION: A table listing projects that have integrated Casbin via plugins, including details on the plugin, model, and policy implementations.

LANGUAGE: markdown
CODE:
Name | Description | Plugin | Model | Policy
----|----|----|----|----
[Docker](https://github.com/docker/docker) | The world's leading software container platform | [casbin-authz-plugin](https://github.com/casbin/casbin-authz-plugin) ([recommended by Docker](https://docs.docker.com/engine/extend/legacy_plugins/#authorization-plugins)) | [.conf](https://github.com/casbin/casbin-authz-plugin/blob/master/examples/basic_model.conf) | [.csv](https://github.com/casbin/casbin-authz-plugin/blob/master/examples/basic_policy.csv)
[Gobis](https://github.com/orange-cloudfoundry/gobis) | [Orange](https://github.com/orange-cloudfoundry)'s lightweight API Gateway written in go | [casbin](https://github.com/orange-cloudfoundry/gobis-middlewares/tree/master/casbin) | [Code](https://github.com/orange-cloudfoundry/gobis-middlewares/blob/master/casbin/model.go#L52-L65) | [Request](https://github.com/orange-cloudfoundry/gobis-middlewares/blob/master/casbin/adapter.go#L46-L64)