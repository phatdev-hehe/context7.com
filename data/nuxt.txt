TITLE: Creating a New Nuxt Project using Package Managers
DESCRIPTION: Commands for creating a new Nuxt project using npm, yarn, pnpm, or bun. Replace <project-name> with your desired project name.

LANGUAGE: bash
CODE:
npm create nuxt <project-name>

LANGUAGE: bash
CODE:
yarn create nuxt <project-name>

LANGUAGE: bash
CODE:
pnpm create nuxt <project-name>

LANGUAGE: bash
CODE:
bun create nuxt <project-name>

----------------------------------------

TITLE: Basic Usage of useAsyncData in Vue Component
DESCRIPTION: Demonstrates basic usage of useAsyncData to fetch data from an API endpoint. Returns reactive data, status, error, and utility functions for data management.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { data, status, error, refresh, clear } = await useAsyncData(
  'mountains',
  () => $fetch('https://api.nuxtjs.dev/mountains')
)
</script>

----------------------------------------

TITLE: Basic useFetch Example in Vue Component
DESCRIPTION: Shows basic usage of useFetch composable for data fetching with server-side rendering support

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { data: count } = await useFetch('/api/count')
</script>

<template>
  <p>Page visits: {{ count }}</p>
</template>

----------------------------------------

TITLE: Basic Nuxt Configuration Setup
DESCRIPTION: Demonstrates the minimal setup for a Nuxt configuration file using defineNuxtConfig function.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  // My Nuxt config
})

----------------------------------------

TITLE: Implementing Global Error Handler for Vue Errors in Nuxt Plugin
DESCRIPTION: This snippet demonstrates how to set up a global error handler for Vue errors using a Nuxt plugin. It shows two methods: using vueApp.config.errorHandler and the vue:error hook.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.vueApp.config.errorHandler = (error, instance, info) => {
    // handle error, e.g. report to a service
  }

  // Also possible
  nuxtApp.hook('vue:error', (error, instance, info) => {
    // handle error, e.g. report to a service
  })
})

----------------------------------------

TITLE: Configuring Vue Error Hook in Nuxt Plugin
DESCRIPTION: This snippet demonstrates how to set up a vue:error hook in a Nuxt plugin to handle Vue errors globally.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(nuxtApp => {
  nuxtApp.hook('vue:error', (err) => {
    //
  })
})

----------------------------------------

TITLE: Migrating asyncData to useAsyncData in Nuxt 3
DESCRIPTION: Demonstrates how to replace the Nuxt 2 asyncData hook with the useAsyncData composable in Nuxt 3. This example fetches a post from an API and makes it available in the component.

LANGUAGE: typescript
CODE:
export default {
  async asyncData({ params, $http }) {
    const post = await $http.$get(`https://api.nuxtjs.dev/posts/${params.id}`)
    return { post }
  }
}

LANGUAGE: vue
CODE:
<script setup lang="ts">
// Define params wherever, through `defineProps()`, `useRoute()`, etc.
const { data: post, refresh } = await useAsyncData('post', () => $fetch(`https://api.nuxtjs.dev/posts/${params.id}`) )
// Or instead - useFetch is a convenience wrapper around useAsyncData when you're just performing a simple fetch
const { data: post, refresh } = await useFetch(`https://api.nuxtjs.dev/posts/${params.id}`)
</script>

----------------------------------------

TITLE: Basic Nuxt Configuration Setup in TypeScript
DESCRIPTION: This snippet shows the basic structure of a Nuxt configuration file using TypeScript. It uses the defineNuxtConfig helper to define the configuration object.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  // My Nuxt config
})

----------------------------------------

TITLE: Composition API Example in Vue 3/Nuxt 3
DESCRIPTION: Shows the modern Composition API approach using <script setup> with TypeScript support and auto-imported reactivity functions.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const count = ref(0)
const increment = () => count.value++
</script>

----------------------------------------

TITLE: Basic Nuxt Module Definition
DESCRIPTION: Simple example of defining a Nuxt module using the low-level function approach.

LANGUAGE: typescript
CODE:
export default function (inlineOptions, nuxt) {
  console.log(inlineOptions.token) // `123`
  console.log(nuxt.options.dev) // `true` or `false`
  nuxt.hook('ready', async nuxt => {
    console.log('Nuxt is ready')
  })
}

----------------------------------------

TITLE: Basic useFetch Usage in Vue Component
DESCRIPTION: Demonstrates basic usage of useFetch to fetch data from an API endpoint within a Vue component setup function.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { data, status, error, refresh, clear } = await useFetch('/api/modules', {
  pick: ['title']
})
</script>

----------------------------------------

TITLE: Creating New Nuxt Project
DESCRIPTION: Command to initialize a new Nuxt project with all necessary starter files and dependencies

LANGUAGE: bash
CODE:
npm create nuxt <my-project>

----------------------------------------

TITLE: Using Auto-imported Vue Reactivity APIs
DESCRIPTION: Demonstrates the usage of auto-imported Vue 3 Reactivity APIs like 'ref' and 'computed' in a Nuxt component. These functions are used to create reactive state and computed properties without explicit imports.

LANGUAGE: vue
CODE:
<script setup lang="ts">
/* ref() and computed() are auto-imported */
const count = ref(1)
const double = computed(() => count.value * 2)
</script>

----------------------------------------

TITLE: Initializing Basic Nuxt Entry Point
DESCRIPTION: Basic example of app.vue file that serves as the application entry point, rendering content for all routes.

LANGUAGE: vue
CODE:
<template>
  <div>
   <h1>Welcome to the homepage</h1>
  </div>
</template>

----------------------------------------

TITLE: Implementing Server Runtime Hooks
DESCRIPTION: Example of using Nitro server runtime hooks for HTML rendering and response manipulation.

LANGUAGE: javascript
CODE:
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('render:html', (html, { event }) => {
    console.log('render:html', html)
    html.bodyAppend.push('<hr>Appended by custom plugin')
  })

  nitroApp.hooks.hook('render:response', (response, { event }) => {
    console.log('render:response', response)
  })
})

----------------------------------------

TITLE: Environment-Specific Nuxt Configuration
DESCRIPTION: Shows how to configure environment-specific settings using $production, $development, and $env overrides in nuxt.config.ts.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  $production: {
    routeRules: {
      '/**': { isr: true }
    }
  },
  $development: {
    //
  },
  $env: {
    staging: {
      // 
    }
  },
})

----------------------------------------

TITLE: Using useHead Composable for Dynamic Head Management
DESCRIPTION: This example shows how to use the useHead composable to manage head tags programmatically with reactive data. It sets the title, meta description, body attributes, and inline script.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useHead({
  title: 'My App',
  meta: [
    { name: 'description', content: 'My amazing site.' }
  ],
  bodyAttrs: {
    class: 'test'
  },
  script: [ { innerHTML: 'console.log(\'Hello world\')' } ]
})
</script>

----------------------------------------

TITLE: Starting Nuxt Development Server
DESCRIPTION: Commands to start the Nuxt development server using npm, yarn, pnpm, or bun. The -o flag opens the app in the default browser.

LANGUAGE: bash
CODE:
npm run dev -- -o

LANGUAGE: bash
CODE:
yarn dev --open

LANGUAGE: bash
CODE:
pnpm dev -o

LANGUAGE: bash
CODE:
bun run dev -o

----------------------------------------

TITLE: Dynamic Route Parameter Access
DESCRIPTION: Example showing how to access dynamic route parameters in a page component using Vue template syntax.

LANGUAGE: vue
CODE:
<template>
  <p>{{ $route.params.group }} - {{ $route.params.id }}</p>
</template>

----------------------------------------

TITLE: Watch Parameters with useAsyncData
DESCRIPTION: Shows how to implement automatic data refetching when watched parameters change using the watch option.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const page = ref(1)
const { data: posts } = await useAsyncData(
  'posts',
  () => $fetch('https://fakeApi.com/posts', {
    params: {
      page: page.value
    }
  }), {
    watch: [page]
  }
)
</script>

----------------------------------------

TITLE: Basic Vue Page Implementation
DESCRIPTION: Example of a basic index page implementation in pages/index.vue using Vue template syntax.

LANGUAGE: vue
CODE:
<template>
  <h1>Index page</h1>
</template>

----------------------------------------

TITLE: Setting Up Nuxt Layouts
DESCRIPTION: Complete layout structure example showing app.vue with layout integration, default layout template, and page components.

LANGUAGE: vue
CODE:
<template>
  <div>
    <NuxtLayout>
      <NuxtPage />
    </NuxtLayout>
  </div>
</template>

LANGUAGE: vue
CODE:
<template>
  <div>
    <AppHeader />
    <slot />
    <AppFooter />
  </div>
</template>

LANGUAGE: vue
CODE:
<template>
  <div>
    <h1>Welcome to the homepage</h1>
    <AppAlert>
      This is an auto-imported component
    </AppAlert>
  </div>
</template>

LANGUAGE: vue
CODE:
<template>
  <section>
    <p>This page will be displayed at the /about route.</p>
  </section>
</template>

----------------------------------------

TITLE: Comparing Data Fetching Methods in Nuxt
DESCRIPTION: This snippet demonstrates different methods of fetching data in Nuxt, including $fetch, useAsyncData, and useFetch. It highlights the differences in behavior during server-side rendering.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// During SSR data is fetched twice, once on the server and once on the client.
const dataTwice = await $fetch('/api/item')

// During SSR data is fetched only on the server side and transferred to the client.
const { data } = await useAsyncData('item', () => $fetch('/api/item'))

// You can also useFetch as shortcut of useAsyncData + $fetch
const { data } = await useFetch('/api/item')
</script>

----------------------------------------

TITLE: Nuxt File-System Routing Structure
DESCRIPTION: Demonstrates the file structure for Nuxt pages and corresponding generated router configuration. Shows how Nuxt automatically creates routes based on file paths in the pages directory.

LANGUAGE: bash
CODE:
-| pages/
---| about.vue
---| index.vue
---| posts/
-----| [id].vue

LANGUAGE: json
CODE:
{
  "routes": [
    {
      "path": "/about",
      "component": "pages/about.vue"
    },
    {
      "path": "/",
      "component": "pages/index.vue"
    },
    {
      "path": "/posts/:id",
      "component": "pages/posts/[id].vue"
    }
  ]
}

----------------------------------------

TITLE: Creating Custom $fetch Instance with Nuxt Plugin
DESCRIPTION: This snippet shows how to create a custom $fetch instance using a Nuxt plugin. It sets up a base URL, handles JWT token authentication, and manages 401 responses by redirecting to the login page.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  const { session } = useUserSession()

  const api = $fetch.create({
    baseURL: 'https://api.nuxt.com',
    onRequest({ request, options, error }) {
      if (session.value?.token) {
        // note that this relies on ofetch >= 1.4.0 - you may need to refresh your lockfile
        options.headers.set('Authorization', `Bearer ${session.value?.token}`)
      }
    },
    async onResponseError({ response }) {
      if (response.status === 401) {
        await nuxtApp.runWithContext(() => navigateTo('/login'))
      }
    }
  })

  // Expose to useNuxtApp().$api
  return {
    provide: {
      api
    }
  }
})

----------------------------------------

TITLE: Creating a Default Layout in Nuxt
DESCRIPTION: This snippet demonstrates how to create a default layout file in Nuxt. The layout includes a shared content element and a slot for page-specific content.

LANGUAGE: vue
CODE:
<template>
  <div>
    <p>Some default layout content shared across all pages</p>
    <slot />
  </div>
</template>

----------------------------------------

TITLE: TypeScript Page Implementation
DESCRIPTION: Example of implementing a page using TypeScript with Vue's render function.

LANGUAGE: ts
CODE:
export default defineComponent({
  render () {
    return h('h1', 'Index page')
  }
})

----------------------------------------

TITLE: Basic App Component Layout in Nuxt
DESCRIPTION: Demonstrates the basic layout structure using auto-imported components in app.vue.

LANGUAGE: html
CODE:
<template>
  <div>
    <AppHeader />
    <NuxtPage />
    <AppFooter />
  </div>
</template>

----------------------------------------

TITLE: Implementing Lazy Data Fetching with useLazyFetch in Vue Component
DESCRIPTION: Demonstrates how to use useLazyFetch to fetch posts data without blocking navigation. Shows proper handling of pending states and watching for data changes. The component includes loading state management and iterating over fetched posts.

LANGUAGE: vue
CODE:
<script setup lang="ts">
/* Navigation will occur before fetching is complete.
 * Handle 'pending' and 'error' states directly within your component's template
 */
const { status, data: posts } = await useLazyFetch('/api/posts')
watch(posts, (newPosts) => {
  // Because posts might start out null, you won't have access
  // to its contents immediately, but you can watch it.
})
</script>

<template>
  <div v-if="status === 'pending'">
    Loading ...
  </div>
  <div v-else>
    <div v-for="post in posts">
      <!-- do something -->
    </div>
  </div>
</template>

----------------------------------------

TITLE: TypeScript Type Definition for useState
DESCRIPTION: Type definitions for the useState composable showing supported function signatures. Includes options for generic typing and initialization with both direct values and Refs.

LANGUAGE: typescript
CODE:
useState<T>(init?: () => T | Ref<T>): Ref<T>
useState<T>(key: string, init?: () => T | Ref<T>): Ref<T>

----------------------------------------

TITLE: Configuring Minimal package.json for Nuxt Applications
DESCRIPTION: This snippet demonstrates the minimal required configuration for a package.json file in a Nuxt application. It includes essential scripts for building, development, and deployment, as well as core dependencies like Nuxt, Vue, and Vue Router.

LANGUAGE: json
CODE:
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "nuxt": "latest",
    "vue": "latest",
    "vue-router": "latest"
  }
}

----------------------------------------

TITLE: Implementing Lazy Data Fetching with useLazyAsyncData in Vue/Nuxt
DESCRIPTION: Demonstrates how to use useLazyAsyncData composable to fetch data without blocking navigation. The example shows handling pending and error states, watching for data changes, and proper template rendering based on the fetch status.

LANGUAGE: vue
CODE:
<script setup lang="ts">
/* Navigation will occur before fetching is complete.
  Handle 'pending' and 'error' states directly within your component's template
*/
const { status, data: count } = await useLazyAsyncData('count', () => $fetch('/api/count'))

watch(count, (newCount) => {
  // Because count might start out null, you won't have access
  // to its contents immediately, but you can watch it.
})
</script>

<template>
  <div>
    {{ status === 'pending' ? 'Loading' : count }}
  </div>
</template>

----------------------------------------

TITLE: Nested Route Configuration
DESCRIPTION: Example of a parent component with nested routing using NuxtPage component.

LANGUAGE: vue
CODE:
<template>
  <div>
    <h1>I am the parent view</h1>
    <NuxtPage :foobar="123" />
  </div>
</template>

----------------------------------------

TITLE: Using asyncData with defineNuxtComponent in Vue
DESCRIPTION: This snippet demonstrates how to use the asyncData() method within a component definition using defineNuxtComponent(). It fetches data asynchronously and returns an object with a greetings property.

LANGUAGE: vue
CODE:
<script lang="ts">
export default defineNuxtComponent({
  async asyncData() {
    return {
      data: {
        greetings: 'hello world!'
      }
    }
  },
})
</script>

----------------------------------------

TITLE: Explicit Import of defineNuxtConfig in TypeScript
DESCRIPTION: This snippet demonstrates how to explicitly import the defineNuxtConfig helper from 'nuxt/config' when setting up the Nuxt configuration. This approach may be preferred for clarity or when working with certain development environments.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  // My Nuxt config
})

----------------------------------------

TITLE: Defining Named Route Middleware in TypeScript
DESCRIPTION: Example of creating a named route middleware that handles navigation based on route parameters and paths.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  if (to.params.id === '1') {
    return abortNavigation()
  }
  if (to.path !== '/') {
    return navigateTo('/')
  }
})

----------------------------------------

TITLE: Using Custom $api in Vue Component
DESCRIPTION: This snippet demonstrates how to use the custom $api instance in a Vue component. It uses useAsyncData to fetch modules data, avoiding double data fetching during server-side rendering.

LANGUAGE: vue
CODE:
<script setup>
const { $api } = useNuxtApp()
const { data: modules } = await useAsyncData('modules', () => $api('/modules'))
</script>

----------------------------------------

TITLE: Basic Usage of definePageMeta in Vue
DESCRIPTION: Demonstrates how to use definePageMeta to set the layout for a page component in Nuxt.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  layout: 'default'
})
</script>

----------------------------------------

TITLE: Configuring Route Rules in Nuxt
DESCRIPTION: Configuration example showing how to define route rules in nuxt.config.ts for different rendering strategies. Demonstrates prerendering, caching, and redirect configurations for different routes.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  routeRules: {
    // Generated at build time for SEO purpose
    '/': { prerender: true },
    // Cached for 1 hour
    '/api/*': { cache: { maxAge: 60 * 60 } },
    // Redirection to avoid 404
    '/old-page': {
      redirect: { to: '/new-page', statusCode: 302 }
    }
    // ...
  }
})

----------------------------------------

TITLE: Creating Error in Nuxt API Route
DESCRIPTION: Example of throwing a createError with a 404 status code in a server API route. Shows how to properly set statusMessage for client-side access.

LANGUAGE: typescript
CODE:
export default eventHandler(() => {
  throw createError({
    statusCode: 404,
    statusMessage: 'Page Not Found'
  })
})

----------------------------------------

TITLE: Using useError Composable in Nuxt (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the useError composable in Nuxt. It returns the global Nuxt error that is being handled and is available on both client and server.

LANGUAGE: typescript
CODE:
const error = useError()

----------------------------------------

TITLE: Creating Advanced Object-Syntax Nuxt Plugin
DESCRIPTION: Shows how to create a plugin using object syntax with advanced features like naming, hooks, and enforcement timing.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin({
  name: 'my-plugin',
  enforce: 'pre', // or 'post'
  async setup (nuxtApp) {
    // this is the equivalent of a normal functional plugin
  },
  hooks: {
    // You can directly register Nuxt app runtime hooks here
    'app:created'() {
      const nuxtApp = useNuxtApp()
      // do something in the hook
    }
  },
  env: {
    // Set this value to `false` if you don't want the plugin to run when rendering server-only or island components.
    islands: true
  }
})

----------------------------------------

TITLE: TypeScript Interface Definition for useAsyncData
DESCRIPTION: Complete TypeScript type definitions for useAsyncData composable including options, return types and execution options.

LANGUAGE: typescript
CODE:
function useAsyncData<DataT, DataE>(
  handler: (nuxtApp?: NuxtApp) => Promise<DataT>,
  options?: AsyncDataOptions<DataT>
): AsyncData<DataT, DataE>
function useAsyncData<DataT, DataE>(
  key: string,
  handler: (nuxtApp?: NuxtApp) => Promise<DataT>,
  options?: AsyncDataOptions<DataT>
): Promise<AsyncData<DataT, DataE>>

type AsyncDataOptions<DataT> = {
  server?: boolean
  lazy?: boolean
  immediate?: boolean
  deep?: boolean
  dedupe?: 'cancel' | 'defer'
  default?: () => DataT | Ref<DataT> | null
  transform?: (input: DataT) => DataT | Promise<DataT>
  pick?: string[]
  watch?: WatchSource[]
  getCachedData?: (key: string, nuxtApp: NuxtApp) => DataT | undefined
}

type AsyncData<DataT, ErrorT> = {
  data: Ref<DataT | null>
  refresh: (opts?: AsyncDataExecuteOptions) => Promise<void>
  execute: (opts?: AsyncDataExecuteOptions) => Promise<void>
  clear: () => void
  error: Ref<ErrorT | null>
  status: Ref<AsyncDataRequestStatus>
};

interface AsyncDataExecuteOptions {
  dedupe?: 'cancel' | 'defer'
}

type AsyncDataRequestStatus = 'idle' | 'pending' | 'success' | 'error'

----------------------------------------

TITLE: Using Runtime Hooks in Nuxt Plugin
DESCRIPTION: Demonstrates how to use the hook method of useNuxtApp within a Nuxt plugin to add custom logic at specific points in the rendering lifecycle.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.hook('page:start', () => {
    /* your code goes here */
  })
  nuxtApp.hook('vue:error', (..._args) => {
    console.log('vue:error')
    // if (import.meta.client) {
    //   console.log(..._args)
    // }
  })
})

----------------------------------------

TITLE: Implementing App Runtime Hooks in Plugins
DESCRIPTION: Shows how to use runtime hooks within a Nuxt plugin using defineNuxtPlugin.

LANGUAGE: javascript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.hook('page:start', () => {
    /* your code goes here */
  })
})

----------------------------------------

TITLE: Using showError Function in Nuxt TypeScript
DESCRIPTION: Demonstrates how to use the showError function to display errors in a Nuxt application. The function accepts either a string message or an error object with properties like statusCode and statusMessage. It integrates with useError() composable for state management and triggers the app:error hook.

LANGUAGE: typescript
CODE:
showError("😱 Oh no, an error has been thrown.")
showError({
  statusCode: 404,
  statusMessage: "Page Not Found"
})

----------------------------------------

TITLE: Creating 404 Error in Vue Page Component
DESCRIPTION: Example of throwing a createError with a 404 status code in a Vue page component when data is not found. This will trigger a full-screen error page on server-side or throw a non-fatal error on client-side.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()
const { data } = await useFetch(`/api/movies/${route.params.slug}`)
if (!data.value) {
  throw createError({ statusCode: 404, statusMessage: 'Page Not Found' })
}
</script>

----------------------------------------

TITLE: Using navigateTo in Vue Components
DESCRIPTION: Demonstrates how to use navigateTo within a Vue component to navigate to different routes, including passing query parameters.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// passing 'to' as a string
await navigateTo('/search')

// ... or as a route object
await navigateTo({ path: '/search' })

// ... or as a route object with query parameters
await navigateTo({
  path: '/search',
  query: {
    page: 1,
    sort: 'asc'
  }
})
</script>

----------------------------------------

TITLE: Basic Counter State Management with Nuxt useState
DESCRIPTION: Demonstrates basic usage of useState composable to create a component-local counter with shared reactive state across components.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const counter = useState('counter', () => Math.round(Math.random() * 1000))
</script>

<template>
  <div>
    Counter: {{ counter }}
    <button @click="counter++">
      +
    </button>
    <button @click="counter--">
      -
    </button>
  </div>
</template>

----------------------------------------

TITLE: Using NuxtErrorBoundary Component for Local Error Handling
DESCRIPTION: This snippet demonstrates how to use the NuxtErrorBoundary component to handle errors locally within a component, including displaying the error and providing a way to clear it.

LANGUAGE: vue
CODE:
<template>
  <!-- some content -->
  <NuxtErrorBoundary @error="someErrorLogger">
    <!-- You use the default slot to render your content -->
    <template #error="{ error, clearError }">
      You can display the error locally here: {{ error }}
      <button @click="clearError">
        This will clear the error.
      </button>
    </template>
  </NuxtErrorBoundary>
</template>

----------------------------------------

TITLE: Using Custom useAPI Composable in Vue Component
DESCRIPTION: This snippet demonstrates how to use the custom useAPI composable in a Vue component, providing a clean and simple way to fetch data from the API.

LANGUAGE: vue
CODE:
<script setup>
const { data: modules } = await useAPI('/modules')
</script>

----------------------------------------

TITLE: Creating Custom useAPI Composable
DESCRIPTION: This snippet shows how to create a custom useAPI composable that wraps useFetch with the custom $api instance. It simplifies API calls in components and allows for custom error typing.

LANGUAGE: typescript
CODE:
import type { UseFetchOptions } from 'nuxt/app'

export function useAPI<T>(
  url: string | (() => string),
  options?: UseFetchOptions<T>,
) {
  return useFetch(url, {
    ...options,
    $fetch: useNuxtApp().$api as typeof $fetch
  })
}

----------------------------------------

TITLE: Defining Nuxt Module with defineNuxtModule
DESCRIPTION: Example of defining a Nuxt module using the recommended defineNuxtModule helper with full configuration.

LANGUAGE: typescript
CODE:
import { defineNuxtModule } from '@nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: '@nuxtjs/example',
    configKey: 'sample',
    compatibility: {
      nuxt: '>=3.0.0'
    }
  },
  defaults: {},
  hooks: {},
  setup(moduleOptions, nuxt) {
    // ...
  }
})

----------------------------------------

TITLE: Configuring Runtime Settings in Nuxt Config
DESCRIPTION: Demonstrates how to define runtime configuration in nuxt.config.ts, including both private server-side keys and public client-accessible values.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  runtimeConfig: {
    // The private keys which are only available within server-side
    apiSecret: '123',
    // Keys within public, will be also exposed to the client-side
    public: {
      apiBase: '/api'
    }
  }
})

----------------------------------------

TITLE: Changing Nuxt Layout Dynamically
DESCRIPTION: This snippet demonstrates how to change the Nuxt layout dynamically using the setPageLayout helper function.

LANGUAGE: vue
CODE:
<script setup lang="ts">
function enableCustomLayout () {
  setPageLayout('custom')
}
definePageMeta({
  layout: false,
});
</script>

<template>
  <div>
    <button @click="enableCustomLayout">Update layout</button>
  </div>
</template>

----------------------------------------

TITLE: Initializing Server Directory Structure in Nuxt
DESCRIPTION: Shows the basic directory structure for server-side code in a Nuxt project, including API routes, server routes, and middleware.

LANGUAGE: bash
CODE:
-| server/
---| api/
-----| hello.ts      # /api/hello
---| routes/
-----| bonjour.ts    # /bonjour
---| middleware/
-----| log.ts        # log all requests

----------------------------------------

TITLE: Using API Data in a Vue Component
DESCRIPTION: Shows how to fetch and display data from an API endpoint in a Vue component using the useFetch composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { data } = await useFetch('/api/hello')
</script>

<template>
  <pre>{{ data }}</pre>
</template>

----------------------------------------

TITLE: Handling Query Parameters in Nuxt API
DESCRIPTION: Demonstrates how to access and use query parameters in a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  const query = getQuery(event)

  return { a: query.foo, b: query.baz }
})

----------------------------------------

TITLE: Configuring Hybrid Rendering with Route Rules in Nuxt
DESCRIPTION: Demonstrates how to set up hybrid rendering in Nuxt using route rules. Different rendering strategies are applied to various routes, including prerendering, stale-while-revalidate caching, and client-side rendering.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  routeRules: {
    // Homepage pre-rendered at build time
    '/': { prerender: true },
    // Products page generated on demand, revalidates in background, cached until API response changes
    '/products': { swr: true },
    // Product pages generated on demand, revalidates in background, cached for 1 hour (3600 seconds)
    '/products/**': { swr: 3600 },
    // Blog posts page generated on demand, revalidates in background, cached on CDN for 1 hour (3600 seconds)
    '/blog': { isr: 3600 },
    // Blog post page generated on demand once until next deployment, cached on CDN
    '/blog/**': { isr: true },
    // Admin dashboard renders only on client-side
    '/admin/**': { ssr: false },
    // Add cors headers on API routes
    '/api/**': { cors: true },
    // Redirects legacy urls
    '/old-page': { redirect: '/new-page' }
  }
})

----------------------------------------

TITLE: Creating Login Page Component
DESCRIPTION: Vue component implementation for the login page with form handling and session management

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { loggedIn, user, fetch: refreshSession } = useUserSession()
const credentials = reactive({
  email: '',
  password: '',
})
async function login() {
  $fetch('/api/login', {
    method: 'POST',
    body: credentials
  })
  .then(async () => {
    await refreshSession()
    await navigateTo('/')
  })
  .catch(() => alert('Bad credentials'))
}
</script>

<template>
  <form @submit.prevent="login">
    <input v-model="credentials.email" type="email" placeholder="Email" />
    <input v-model="credentials.password" type="password" placeholder="Password" />
    <button type="submit">Login</button>
  </form>
</template>

----------------------------------------

TITLE: History-based Navigation in TypeScript
DESCRIPTION: Demonstrates history-based navigation methods including back, forward, go, push, and replace. These methods allow programmatic navigation and manipulation of browser history.

LANGUAGE: typescript
CODE:
const router = useRouter()

router.back()
router.forward()
router.go(3)
router.push({ path: "/home" })
router.replace({ hash: "#bio" })

----------------------------------------

TITLE: Overriding Default Layout in Nuxt app.vue
DESCRIPTION: This snippet shows how to override the default layout for all pages using the name property of NuxtLayout component in app.vue.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// You might choose this based on an API call or logged-in status
const layout = "custom";
</script>

<template>
  <NuxtLayout :name="layout">
    <NuxtPage />
  </NuxtLayout>
</template>

----------------------------------------

TITLE: Rendering Client-Side Components with Fallback in Vue
DESCRIPTION: Demonstrates how to use the <ClientOnly> component to render a component only on the client-side, with a fallback for server-side rendering.

LANGUAGE: vue
CODE:
<template>
  <div>
    <Sidebar />
    <!-- The <Comment> component will only be rendered on client-side -->
    <ClientOnly fallback-tag="span" fallback="Loading comments...">
      <Comment />
    </ClientOnly>
  </div>
</template>

----------------------------------------

TITLE: Defining a Nuxt Module with TypeScript
DESCRIPTION: This example demonstrates how to use defineNuxtModule to create a Nuxt module with metadata, default options, and a setup function.

LANGUAGE: typescript
CODE:
import { defineNuxtModule } from '@nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: 'my-module',
    configKey: 'myModule'
  },
  defaults: {
    test: 123
  },
  setup (options, nuxt) {
    nuxt.hook('modules:done', () => {
      console.log('My module is ready with current test option: ', options.test)
    })    
  }
})

----------------------------------------

TITLE: Defining Minimal Nuxt Layer Configuration in TypeScript
DESCRIPTION: Creates a minimal Nuxt layer configuration file. This empty configuration indicates that the directory is a Nuxt layer.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({})

----------------------------------------

TITLE: Creating an API Handler in Nuxt
DESCRIPTION: Demonstrates how to create a simple API handler using defineEventHandler() that returns JSON data.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  return {
    hello: 'world'
  }
})

----------------------------------------

TITLE: Using Query Parameters with useFetch
DESCRIPTION: Shows how to add query parameters to a useFetch request using the query option, with support for reactive parameters.

LANGUAGE: typescript
CODE:
const param1 = ref('value1')
const { data, status, error, refresh } = await useFetch('/api/modules', {
  query: { param1, param2: 'value2' }
})

----------------------------------------

TITLE: Creating Server Middleware in Nuxt
DESCRIPTION: Shows how to create server middleware that runs on every request, logging the request URL.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  console.log('New request: ' + getRequestURL(event))
})

----------------------------------------

TITLE: Implementing Fetch Interceptors
DESCRIPTION: Example of using request and response interceptors with useFetch for handling headers, errors, and responses.

LANGUAGE: typescript
CODE:
const { data, status, error, refresh, clear } = await useFetch('/api/auth/login', {
  onRequest({ request, options }) {
    options.headers.set('Authorization', '...')
  },
  onRequestError({ request, options, error }) {
    // Handle the request errors
  },
  onResponse({ request, response, options }) {
    localStorage.setItem('token', response._data.token)
  },
  onResponseError({ request, response, options }) {
    // Handle the response errors
  }
})

----------------------------------------

TITLE: Creating Custom Vue Directive in Nuxt
DESCRIPTION: Shows how to register a custom Vue directive within a Nuxt plugin with SSR support.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.vueApp.directive('focus', {
    mounted (el) {
      el.focus()
    },
    getSSRProps (binding, vnode) {
      // you can provide SSR-specific props here
      return {}
    }
  })
})

----------------------------------------

TITLE: Using Dynamic Page Key with NuxtPage in Vue
DESCRIPTION: This snippet shows how to use a dynamic page key based on the current route with the <NuxtPage> component.

LANGUAGE: html
CODE:
<NuxtPage :page-key="route => route.fullPath" />

----------------------------------------

TITLE: Authentication Route Middleware in Nuxt
DESCRIPTION: Route middleware implementation for handling authentication state and route redirections. Uses useState for auth state management and navigateTo for redirection.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  const auth = useState('auth')

  if (!auth.value.isAuthenticated) {
    return navigateTo('/login')
  }

  if (to.path !== '/dashboard') {
    return navigateTo('/dashboard')
  }
})

----------------------------------------

TITLE: Enabling Type Checking in Nuxt Config
DESCRIPTION: Configuration to enable TypeScript type checking at build or development time using the typescript.typeCheck option.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  typescript: {
    typeCheck: true
  }
})

----------------------------------------

TITLE: Forwarding Context and Headers in Nuxt API
DESCRIPTION: Shows how to forward request context and headers when making fetch requests within a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  return event.$fetch('/api/forwarded')
})

----------------------------------------

TITLE: Basic CallOnce Usage in Vue Component
DESCRIPTION: Example showing how to use callOnce to fetch website configuration once during initial render. The code will only execute once regardless of whether it runs on server or client.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const websiteConfig = useState('config')

await callOnce(async () => {
  console.log('This will only be logged once')
  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')
})
</script>

----------------------------------------

TITLE: Defining Runtime Config in Nuxt Configuration
DESCRIPTION: Demonstrates how to define runtime configuration in the Nuxt configuration file, including private and public variables.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  runtimeConfig: {
    // Private keys are only available on the server
    apiSecret: '123',

    // Public keys that are exposed to the client
    public: {
      apiBase: process.env.NUXT_PUBLIC_API_BASE || '/api'
    }
  }
})

----------------------------------------

TITLE: Handling Cookies in Nuxt API Routes
DESCRIPTION: This snippet shows how to handle cookies in Nuxt API routes using getCookie and setCookie functions from the h3 package. It reads a 'counter' cookie, increments its value, and sends it back in the response.

LANGUAGE: typescript
CODE:
export default defineEventHandler(event => {
  // Read counter cookie
  let counter = getCookie(event, 'counter') || 0

  // Increase counter cookie by 1
  setCookie(event, 'counter', ++counter)

  // Send JSON response
  return { counter }
})

----------------------------------------

TITLE: Creating Local Nuxt Module with API Route
DESCRIPTION: Demonstrates how to create a local Nuxt module that adds a custom API route using nuxt/kit helpers. The module creates a '/api/hello' endpoint that returns a simple JSON response.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addServerHandler } from 'nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: 'hello'
  },
  setup () {
    const { resolve } = createResolver(import.meta.url)

    // Add an API route
    addServerHandler({
      route: '/api/hello',
      handler: resolve('./runtime/api-route')
    })
  }
})

----------------------------------------

TITLE: DevOnly Component with Fallback Slot Example
DESCRIPTION: Additional example showing the implementation of DevOnly component with fallback slot usage. Demonstrates the same pattern with emphasis on the fallback slot functionality for production environments.

LANGUAGE: vue
CODE:
<template>
  <div>
    <Sidebar />
    <DevOnly>
      <!-- this component will only be rendered during development -->
      <LazyDebugBar />
      <!-- be sure to test these using `nuxt preview` -->
      <template #fallback>
        <div><!-- empty div for flex.justify-between --></div>
      </template>
    </DevOnly>
  </div>
</template>

----------------------------------------

TITLE: Nuxt 3 App Component with Pages Support
DESCRIPTION: Implementation of app.vue with routing support using NuxtPage component. Includes NuxtLayout wrapper for consistent layout application. Note that NuxtPage cannot be used as root element due to Vue Suspense integration.

LANGUAGE: vue
CODE:
<template>
  <div>
    <NuxtLayout>
      <NuxtPage/>
    </NuxtLayout>
  </div>
</template>

----------------------------------------

TITLE: Accessing CDN URL in Server API
DESCRIPTION: Shows how to access the CDN URL from the app namespace in the runtime configuration within a server-side API route.

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  const config = useRuntimeConfig(event)

  // Access cdnURL universally
  const cdnURL = config.app.cdnURL
})

----------------------------------------

TITLE: Header Forwarding with useRequestHeaders
DESCRIPTION: Shows how to forward client headers like cookies to API requests during server-side rendering

LANGUAGE: vue
CODE:
<script setup lang="ts">
const headers = useRequestHeaders(['cookie'])

async function getCurrentUser() {
  return await $fetch('/api/me', { headers })
}
</script>

----------------------------------------

TITLE: Defining Middleware with definePageMeta in Vue
DESCRIPTION: Demonstrates how to define middleware using definePageMeta, both as inline functions and string references.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  // define middleware as a function
  middleware: [
    function (to, from) {
      const auth = useState('auth')

      if (!auth.value.authenticated) {
          return navigateTo('/login')
      }

      if (to.path !== '/checkout') {
        return navigateTo('/checkout')
      }
    }
  ],

  // ... or a string
  middleware: 'auth'

  // ... or multiple strings
  middleware: ['auth', 'another-named-middleware']
})
</script>

----------------------------------------

TITLE: Implementing Parallel Plugin Loading
DESCRIPTION: Example of creating a parallel-loading plugin that doesn't block subsequent plugin execution.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin({
  name: 'my-plugin',
  parallel: true,
  async setup (nuxtApp) {
    // the next plugin will be executed immediately
  }
})

----------------------------------------

TITLE: Using Extended Components in Vue Template
DESCRIPTION: Shows how to use a component (BaseComponent) that has been extended from a Nuxt layer in a Vue template.

LANGUAGE: vue
CODE:
<template>
  <BaseComponent/>
</template>

----------------------------------------

TITLE: Specifying Global .nuxtrc File Location on Windows
DESCRIPTION: This snippet shows the file path for the global .nuxtrc file on Windows systems. The global file applies configurations to all Nuxt projects on the system.

LANGUAGE: md
CODE:
C:\Users\{username}\.nuxtrc

----------------------------------------

TITLE: Pinia Store Implementation in Nuxt
DESCRIPTION: Example of using Pinia for global state management, showing store definition and usage in a Vue component.

LANGUAGE: typescript
CODE:
export const useWebsiteStore = defineStore('websiteStore', {
  state: () => ({
    name: '',
    description: ''
  }),
  actions: {
    async fetch() {
      const infos = await $fetch('https://api.nuxt.com/modules/pinia')

      this.name = infos.name
      this.description = infos.description
    }
  }
})

LANGUAGE: vue
CODE:
<script setup lang="ts">
const website = useWebsiteStore()

await callOnce(website.fetch)
</script>

<template>
  <main>
    <h1>{{ website.name }}</h1>
    <p>{{ website.description }}</p>
  </main>
</template>

----------------------------------------

TITLE: Using $fetch in Client-Side Methods in Nuxt
DESCRIPTION: This example shows how to use $fetch in a client-side method to make a POST request to an API endpoint. It demonstrates the usage of $fetch for handling form submissions.

LANGUAGE: vue
CODE:
<script setup lang="ts">
function contactForm() {
  $fetch('/api/contact', {
    method: 'POST',
    body: { hello: 'world '}
  })
}
</script>

<template>
  <button @click="contactForm">Contact</button>
</template>

----------------------------------------

TITLE: Providing Custom Method with useNuxtApp
DESCRIPTION: Shows how to use the provide method of useNuxtApp to add a custom method to the Nuxt runtime context, making it available across the application.

LANGUAGE: javascript
CODE:
const nuxtApp = useNuxtApp()
nuxtApp.provide('hello', (name) => `Hello ${name}!`)

// Prints "Hello name!"
console.log(nuxtApp.$hello('name'))

----------------------------------------

TITLE: Error Object Handling in Navigation Abort
DESCRIPTION: Shows how to use abortNavigation with caught Error objects in a try-catch block within route middleware.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  try {
    /* code that might throw an error */
  } catch (err) {
    return abortNavigation(err)
  }
})

----------------------------------------

TITLE: Integrating Google Analytics with Vue-gtag
DESCRIPTION: Example of integrating a Vue plugin (vue-gtag) for Google Analytics tracking in a Nuxt application.

LANGUAGE: typescript
CODE:
import VueGtag, { trackRouter } from 'vue-gtag-next'

export default defineNuxtPlugin((nuxtApp) => {
  nuxtApp.vueApp.use(VueGtag, {
    property: {
      id: 'GA_MEASUREMENT_ID'
    }
  })
  trackRouter(useRouter())
})

----------------------------------------

TITLE: Implementing useServerSeoMeta in Vue Component
DESCRIPTION: This snippet demonstrates how to use the useServerSeoMeta composable within a Vue component's setup script. It sets the robots meta tag to 'index, follow'.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useServerSeoMeta({
  robots: 'index, follow'
})
</script>

----------------------------------------

TITLE: Defining Payload Reducer and Reviver
DESCRIPTION: Demonstrates how to define custom payload reducers and revivers for serializing and deserializing complex data types, such as DateTime objects from the Luxon library.

LANGUAGE: typescript
CODE:
export default definePayloadPlugin((nuxtApp) => {
  definePayloadReducer('DateTime', (value) => {
    return value instanceof DateTime && value.toJSON()
  })
  definePayloadReviver('DateTime', (value) => {
    return DateTime.fromISO(value)
  })
})

----------------------------------------

TITLE: Using shallowRef with useState in TypeScript
DESCRIPTION: Shows how to create a shallow reactive state using useState combined with shallowRef for better performance when dealing with large objects or arrays.

LANGUAGE: typescript
CODE:
const state = useState('my-shallow-state', () => shallowRef({ deep: 'not reactive' }))
// isShallow(state) === true

----------------------------------------

TITLE: Implementing Custom Error Page in Vue
DESCRIPTION: Basic implementation of error.vue component that handles application errors. It receives an error prop containing status code and other error details, and provides a navigation link back to home.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import type { NuxtError } from '#app'

const props = defineProps({
  error: Object as () => NuxtError
})
</script>

<template>
  <div>
    <h1>{{ error.statusCode }}</h1>
    <NuxtLink to="/">Go back home</NuxtLink>
  </div>
</template>

----------------------------------------

TITLE: Using runWithContext in Nuxt Middleware
DESCRIPTION: Shows how to use the runWithContext method of useNuxtApp to ensure proper Nuxt context is applied when calling functions within complex async scenarios in middleware.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware(async (to, from) => {
  const nuxtApp = useNuxtApp()
  let user
  try {
    user = await fetchUser()
    // the Vue/Nuxt compiler loses context here because of the try/catch block.
  } catch (e) {
    user = null
  }
  if (!user) {
    // apply the correct Nuxt context to our `navigateTo` call.
    return nuxtApp.runWithContext(() => navigateTo('/auth'))
  }
})

----------------------------------------

TITLE: Using useHead Composable in Vue Component
DESCRIPTION: This snippet shows how to use the new useHead composable in a Vue component to set meta tags. It demonstrates setting the title of the page.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useHead({
  title: 'My Nuxt App',
})
</script>

----------------------------------------

TITLE: Using Meta Components for Template-Based Head Management
DESCRIPTION: This example shows how to use Nuxt-provided components like <Head>, <Title>, <Meta>, and <Style> to define head tags in the template. It includes reactive title and meta description.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const title = ref('Hello World')
</script>

<template>
  <div>
    <Head>
      <Title>{{ title }}</Title>
      <Meta name="description" :content="title" />
      <Style type="text/css">
      body { background-color: green; }
      </Style>
    </Head>

    <h1>{{ title }}</h1>
  </div>
</template>

----------------------------------------

TITLE: Using Auto-imported Composable in Vue Component
DESCRIPTION: Demonstration of using an auto-imported composable within a Vue component with TypeScript setup.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const foo = useFoo()
</script>

<template>
  <div>
    {{ foo }}
  </div>
</template>

----------------------------------------

TITLE: Named Global Route Middleware
DESCRIPTION: Example of creating a named global route middleware by setting the global option to true, which will execute on every route change.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  addRouteMiddleware('global-middleware', (to, from) => {
      console.log('global middleware that runs on every route change')
    },
    { global: true }
  )
})

----------------------------------------

TITLE: Implementing Body Teleport in Vue with Nuxt
DESCRIPTION: Demonstrates how to create a modal dialog using Vue's Teleport component that renders to #teleports selector. The example shows a button that toggles a modal containing text and a close button.

LANGUAGE: vue
CODE:
<template>
  <button @click="open = true">
    Open Modal
  </button>
  <Teleport to="#teleports">
    <div v-if="open" class="modal">
      <p>Hello from the modal!</p>
      <button @click="open = false">
        Close
      </button>
    </div>
  </Teleport>
</template>

----------------------------------------

TITLE: Basic NuxtLayout Usage in Vue
DESCRIPTION: Demonstrates basic usage of NuxtLayout component in app.vue to activate the default layout

LANGUAGE: vue
CODE:
<template>
  <NuxtLayout>
    some page content
  </NuxtLayout>
</template>

----------------------------------------

TITLE: Enabling Typed Pages in Nuxt
DESCRIPTION: Enables the new experimental typed router using unplugin-vue-router, providing type-safe usage of navigation utilities and route parameters.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    typedPages: true
  }
})

----------------------------------------

TITLE: Asserting Nuxt Compatibility Type Definition
DESCRIPTION: Type definition for assertNuxtCompatibility function that throws an error if specified Nuxt version constraints are not met.

LANGUAGE: typescript
CODE:
async function assertNuxtCompatibility(
  constraints: NuxtCompatibility,
  nuxt?: Nuxt
): Promise<true>;

interface NuxtCompatibility {
  nuxt?: string;
  bridge?: boolean;
}

----------------------------------------

TITLE: Defining Static SEO Meta Tags with useSeoMeta in Vue
DESCRIPTION: This snippet demonstrates how to use the useSeoMeta composable to define static SEO meta tags for a Vue application. It sets various meta tags including title, description, and Open Graph properties.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useSeoMeta({
  title: 'My Amazing Site',
  ogTitle: 'My Amazing Site',
  description: 'This is my amazing site, let me tell you all about it.',
  ogDescription: 'This is my amazing site, let me tell you all about it.',
  ogImage: 'https://example.com/image.png',
  twitterCard: 'summary_large_image',
})
</script>

----------------------------------------

TITLE: Providing Custom Helpers in Nuxt Plugins
DESCRIPTION: Shows how to provide custom helper functions that can be used across composables and the application through the Nuxt plugin system.

LANGUAGE: typescript
CODE:
const nuxtApp = useNuxtApp()
nuxtApp.provide('hello', (name) => `Hello ${name}!`)

console.log(nuxtApp.$hello('name')) // Prints "Hello name!"

----------------------------------------

TITLE: Calling Hooks with useNuxtApp
DESCRIPTION: Shows how to use the callHook method of useNuxtApp to execute a custom hook and handle its asynchronous result.

LANGUAGE: typescript
CODE:
await nuxtApp.callHook('my-plugin:init')

----------------------------------------

TITLE: Enabling TypeScript Bundler Resolution in Nuxt
DESCRIPTION: This snippet demonstrates how to enable 'Bundler' module resolution mode for TypeScript in Nuxt. This setting improves type support when using modern libraries with 'exports' and is recommended for frameworks like Nuxt and Vite.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  future: {
    typescriptBundlerResolution: true
  }
})

----------------------------------------

TITLE: Overriding Nuxt Layout on a Per-page Basis
DESCRIPTION: This snippet shows how to override the layout on a per-page basis by setting layout to false and using the NuxtLayout component within the page.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  layout: false,
})
</script>

<template>
  <div>
    <NuxtLayout name="custom">
      <template #header> Some header template content. </template>

      The rest of the page
    </NuxtLayout>
  </div>
</template>

----------------------------------------

TITLE: Nuxt Navigation Implementation
DESCRIPTION: Shows how to implement navigation between pages using NuxtLink component. The component enables client-side navigation with automatic component prefetching.

LANGUAGE: vue
CODE:
<template>
  <header>
    <nav>
      <ul>
        <li><NuxtLink to="/about">About</NuxtLink></li>
        <li><NuxtLink to="/posts/1">Post 1</NuxtLink></li>
        <li><NuxtLink to="/posts/2">Post 2</NuxtLink></li>
      </ul>
    </nav>
  </header>
</template>

----------------------------------------

TITLE: Configuring Nuxt Hooks in Configuration File
DESCRIPTION: Example of defining hooks within the Nuxt configuration file using defineNuxtConfig.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  hooks: {
    close: () => { }
  }
})

----------------------------------------

TITLE: Custom Layout with Slots in Nuxt
DESCRIPTION: This snippet demonstrates a custom layout with named slots for header content and a default slot for main content.

LANGUAGE: vue
CODE:
<template>
  <div>
    <header>
      <slot name="header">
        Default header content
      </slot>
    </header>
    <main>
      <slot />
    </main>
  </div>
</template>

----------------------------------------

TITLE: Using Static Page Key with NuxtPage in Vue
DESCRIPTION: This example demonstrates how to use a static page key with the <NuxtPage> component, which will cause it to render only once when first mounted.

LANGUAGE: vue
CODE:
<template>
  <NuxtPage page-key="static" />
</template>

----------------------------------------

TITLE: Defining addRouteMiddleware Function Type in TypeScript
DESCRIPTION: This code snippet defines the type signature for the addRouteMiddleware function, which allows registration of route middlewares in Nuxt applications. It includes types for NuxtMiddleware and AddRouteMiddlewareOptions.

LANGUAGE: typescript
CODE:
function addRouteMiddleware (input: NuxtMiddleware | NuxtMiddleware[], options: AddRouteMiddlewareOptions): void

type NuxtMiddleware = {
  name: string
  path: string
  global?: boolean
}

interface AddRouteMiddlewareOptions {
  override?: boolean
  prepend?: boolean
}

----------------------------------------

TITLE: Card Group Component Structure
DESCRIPTION: Markdown structure defining a group of cards that link to various Nuxt component release pages on GitHub. Each card includes an icon, title, and link configuration.

LANGUAGE: markdown
CODE:
::card-group
  ::card
  ---
  icon: i-simple-icons-github
  title: nuxt/nuxt
  to: https://github.com/nuxt/nuxt/releases
  target: _blank
  ui.icon.base: text-black dark:text-white
  ---
  Nuxt framework releases.
  ::

----------------------------------------

TITLE: Basic Internal Routing with NuxtLink
DESCRIPTION: Demonstrates basic usage of NuxtLink component for internal page navigation

LANGUAGE: vue
CODE:
<template>
  <NuxtLink to="/about">About page</NuxtLink>
</template>

----------------------------------------

TITLE: Nuxt Route Validation Implementation
DESCRIPTION: Shows how to implement route validation using definePageMeta to validate route parameters before rendering a page.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  validate: async (route) => {
    // Check if the id is made up of digits
    return typeof route.params.id === 'string' && /^\d+$/.test(route.params.id)
  }
})
</script>

----------------------------------------

TITLE: Displaying Nuxt App Runtime Hooks in Markdown Table
DESCRIPTION: A markdown table listing various Nuxt app runtime hooks, including their names, arguments, environments, and descriptions. This table covers hooks like app:created, app:error, vue:setup, and others that are called during different stages of the application lifecycle.

LANGUAGE: markdown
CODE:
Hook                   | Arguments           | Environment     | Description
-----------------------|---------------------|-----------------|-------------
`app:created`          | `vueApp`            | Server & Client | Called when initial `vueApp` instance is created.
`app:error`            | `err`               | Server & Client | Called when a fatal error occurs.
`app:error:cleared`    | `{ redirect? }`     | Server & Client | Called when a fatal error occurs.
`vue:setup`            | -                   | Server & Client | Called when the setup of Nuxt root is initialized. This callback must be synchronous.
`vue:error`            | `err, target, info` | Server & Client | Called when a vue error propagates to the root component. [Learn More](https://vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured).
`app:rendered`         | `renderContext`     | Server          | Called when SSR rendering is done.
`app:redirected`       | -                   | Server          | Called before SSR redirection.
`app:beforeMount`      | `vueApp`            | Client          | Called before mounting the app, called only on client side.
`app:mounted`          | `vueApp`            | Client          | Called when Vue app is initialized and mounted in browser.
`app:suspense:resolve` | `appComponent`      | Client          | On [Suspense](https://vuejs.org/guide/built-ins/suspense.html#suspense) resolved event.
`app:manifest:update`  | `{ id, timestamp }` | Client          | Called when there is a newer version of your app detected.
`app:data:refresh`     | `keys?`             | Client          | Called when `refreshNuxtData` is called.
`link:prefetch`        | `to`                | Client          | Called when a `<NuxtLink>` is observed to be prefetched.
`page:start`           | `pageComponent?`    | Client          | Called on [Suspense](https://vuejs.org/guide/built-ins/suspense.html#suspense) pending event.
`page:finish`          | `pageComponent?`    | Client          | Called on [Suspense](https://vuejs.org/guide/built-ins/suspense.html#suspense) resolved event.
`page:loading:start`   | -                   | Client          | Called when the `setup()` of the new page is running.
`page:loading:end`     | -                   | Client          | Called after `page:finish`
`page:transition:finish`| `pageComponent?`    | Client          | After page transition [onAfterLeave](https://vuejs.org/guide/built-ins/transition.html#javascript-hooks) event.
`dev:ssr-logs`         | `logs`              | Client          | Called with an array of server-side logs that have been passed to the client (if `features.devLogs` is enabled).
`page:view-transition:start` | `transition`        | Client          | Called after `document.startViewTransition` is called when [experimental viewTransition support is enabled](/docs/getting-started/transitions#view-transitions-api-experimental).

----------------------------------------

TITLE: Enabling Payload Extraction in Nuxt
DESCRIPTION: Enables extraction of payloads for pages generated with nuxt generate.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    payloadExtraction: true
  }
})

----------------------------------------

TITLE: Importing and Exporting with CommonJS in JavaScript
DESCRIPTION: Demonstrates the syntax for importing and exporting modules using CommonJS (CJS) format, which is supported by Node.js and bundlers like webpack and Rollup.

LANGUAGE: javascript
CODE:
const a = require('./a')

module.exports.a = a

----------------------------------------

TITLE: Using extendRouteRules in a Nuxt Module
DESCRIPTION: This example demonstrates how to use extendRouteRules within a Nuxt module to configure redirects and caching for specific routes. It shows setting up a redirect from '/preview' to '/preview-new' and configuring cache settings for the '/preview-new' route.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, extendRouteRules, extendPages } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options) {
    const resolver = createResolver(import.meta.url)

    extendPages((pages) => {
      pages.unshift({
        name: 'preview-new',
        path: '/preview-new',
        file: resolver.resolve('runtime/preview.vue')
       })
    })

    extendRouteRules('/preview', {
      redirect: {
        to: '/preview-new',
        statusCode: 302
      }
    })

    extendRouteRules('/preview-new', {
      cache: {
        maxAge: 60 * 60 * 24 * 7
      }
    })
  }
})

----------------------------------------

TITLE: Configuring Sourcemaps in Nuxt 3
DESCRIPTION: Configuration snippet for enabling sourcemaps in Nuxt 3 for both server and client builds. This allows for better debugging capabilities in development.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  // or sourcemap: true
  sourcemap: {
    server: true,
    client: true
  }
})

----------------------------------------

TITLE: Customizing Error Type in useAPI Composable
DESCRIPTION: This snippet shows how to customize the error type returned by the useAPI composable, allowing for more specific error handling in the application.

LANGUAGE: typescript
CODE:
import type { FetchError } from 'ofetch'
import type { UseFetchOptions } from 'nuxt/app'

interface CustomError {
  message: string
  statusCode: number
}

export function useAPI<T>(
  url: string | (() => string),
  options?: UseFetchOptions<T>,
) {
  return useFetch<T, FetchError<CustomError>>(url, {
    ...options,
    $fetch: useNuxtApp().$api
  })
}

----------------------------------------

TITLE: Creating Reactive State with useState in TypeScript
DESCRIPTION: Demonstrates creating a reactive state with a random initial value using useState composable. The state is identified by a 'counter' key and initialized with a random number between 0-100.

LANGUAGE: typescript
CODE:
const count = useState('counter', () => Math.round(Math.random() * 100))

----------------------------------------

TITLE: Handling Background Tasks in Nuxt API
DESCRIPTION: Demonstrates how to perform background tasks without blocking the response in a Nuxt API endpoint using event.waitUntil.

LANGUAGE: ts
CODE:
const timeConsumingBackgroundTask = async () => {
  await new Promise((resolve) => setTimeout(resolve, 1000))
};

export default eventHandler((event) => {
  // schedule a background task without blocking the response
  event.waitUntil(timeConsumingBackgroundTask())

  // immediately send the response to the client
  return 'done'
});

----------------------------------------

TITLE: Extending Auto-generated TypeScript Configuration in Nuxt
DESCRIPTION: Basic tsconfig.json setup that extends Nuxt's auto-generated TypeScript configuration. This allows you to inherit sensible defaults and resolved aliases while maintaining the ability to add custom configuration as needed.

LANGUAGE: json
CODE:
{
  "extends": "./.nuxt/tsconfig.json"
}

----------------------------------------

TITLE: Using Explicit Imports in Nuxt Bridge
DESCRIPTION: Demonstrates how to use explicit imports from the #imports alias in Nuxt Bridge when auto-imports are not desired.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { ref, computed } from '#imports'

const count = ref(1)
const double = computed(() => count.value * 2)
</script>

----------------------------------------

TITLE: Creating Default Export Composable in Nuxt
DESCRIPTION: Example of creating a composable using default export syntax. The function will be available as useFoo() based on the camelCase file name.

LANGUAGE: javascript
CODE:
export default function () {
  return useState('foo', () => 'bar')
}

----------------------------------------

TITLE: Defining extendRouteRules Function Type in TypeScript
DESCRIPTION: This code snippet defines the type signature for the extendRouteRules function, which allows configuration of route rules in Nuxt applications. It includes interfaces for NitroRouteConfig, ExtendRouteRulesOptions, CacheOptions, and ProxyOptions.

LANGUAGE: typescript
CODE:
function extendRouteRules (route: string, rule: NitroRouteConfig, options: ExtendRouteRulesOptions): void

interface NitroRouteConfig {
  cache?: CacheOptions | false;
  headers?: Record<string, string>;
  redirect?: string | { to: string; statusCode?: HTTPStatusCode };
  prerender?: boolean;
  proxy?: string | ({ to: string } & ProxyOptions);
  isr?: number | boolean;
  cors?: boolean;
  swr?: boolean | number;
  static?: boolean | number;
}

interface ExtendRouteRulesOptions {
  override?: boolean
}

interface CacheOptions {
  swr?: boolean
  name?: string
  group?: string
  integrity?: any
  maxAge?: number
  staleMaxAge?: number
  base?: string
  headersOnly?: boolean
}

interface ProxyOptions {
  headers?: RequestHeaders | HeadersInit;
  fetchOptions?: RequestInit & { duplex?: Duplex } & {
    ignoreResponseError?: boolean;
  };
  fetch?: typeof fetch;
  sendStream?: boolean;
  streamRequest?: boolean;
  cookieDomainRewrite?: string | Record<string, string>;
  cookiePathRewrite?: string | Record<string, string>;
  onResponse?: (event: H3Event, response: Response) => void;
}

----------------------------------------

TITLE: Type Definition for navigateTo Function
DESCRIPTION: Provides the TypeScript type definition for the navigateTo function and its options, including the RouteLocationRaw type and NavigateToOptions interface.

LANGUAGE: typescript
CODE:
function navigateTo(
  to: RouteLocationRaw | undefined | null,
  options?: NavigateToOptions
) => Promise<void | NavigationFailure | false> | false | void | RouteLocationRaw 

interface NavigateToOptions {
  replace?: boolean
  redirectCode?: number
  external?: boolean
  open?: OpenOptions
}

type OpenOptions = {
  target: string
  windowFeatures?: OpenWindowFeatures
}

type OpenWindowFeatures = {
  popup?: boolean
  noopener?: boolean
  noreferrer?: boolean
} & XOR<{ width?: number }, { innerWidth?: number }>
  & XOR<{ height?: number }, { innerHeight?: number }>
  & XOR<{ left?: number }, { screenX?: number }>
  & XOR<{ top?: number }, { screenY?: number }>

----------------------------------------

TITLE: Defining Page Middleware in Vue Component
DESCRIPTION: Demonstrates how to define middleware for a specific page using definePageMeta in a Vue component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  middleware: [
    function (to, from) {
      // Custom inline middleware
    },
    'auth',
  ],
});
</script>

----------------------------------------

TITLE: Type Definition for useHead Composable in TypeScript
DESCRIPTION: Basic type signature for the useHead composable function that accepts a MaybeComputedRef of MetaObject type.

LANGUAGE: typescript
CODE:
useHead(meta: MaybeComputedRef<MetaObject>): void

----------------------------------------

TITLE: Configuring selective prerendering in Nuxt
DESCRIPTION: Demonstrates how to manually specify routes for prerendering and ignore certain routes in the Nuxt configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  nitro: {
    prerender: {
      routes: ["/user/1", "/user/2"],
      ignore: ["/dynamic"],
    },
  },
});

----------------------------------------

TITLE: Defining refreshNuxtData Function Type in TypeScript
DESCRIPTION: This snippet shows the TypeScript type definition for the refreshNuxtData function. It accepts an optional parameter 'keys' which can be a string or an array of strings.

LANGUAGE: typescript
CODE:
refreshNuxtData(keys?: string | string[])

----------------------------------------

TITLE: Defining App Configuration in TypeScript
DESCRIPTION: This snippet demonstrates how to define app configuration using the defineAppConfig function in a TypeScript file. It sets a custom theme property with a primary color.

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  foo: 'bar'
})

----------------------------------------

TITLE: Installing Nuxt Content Module
DESCRIPTION: Command to install the @nuxt/content module and add it to the nuxt.config.ts file.

LANGUAGE: bash
CODE:
npx nuxi module add content

----------------------------------------

TITLE: Form Submission with $fetch
DESCRIPTION: Demonstrates using $fetch for client-side form submissions with POST requests

LANGUAGE: vue
CODE:
<script setup lang="ts">
async function addTodo() {
  const todo = await $fetch('/api/todos', {
    method: 'POST',
    body: {
      // My todo data
    }
  })
}
</script>

----------------------------------------

TITLE: Exporting with CommonJS in JavaScript
DESCRIPTION: Demonstrates two ways to provide a default export using CommonJS syntax, which is commonly used in Node.js modules.

LANGUAGE: javascript
CODE:
module.exports = { test: 123 }
// or
exports.test = 123

----------------------------------------

TITLE: Setting Response Status with Nuxt SSR
DESCRIPTION: Demonstrates how to use setResponseStatus to set HTTP status codes and messages in a Nuxt server context. The function can only be called within a Nuxt context and has no effect in the browser. It accepts the event object, status code, and optional status message as parameters.

LANGUAGE: javascript
CODE:
const event = useRequestEvent()

// event will be undefined in the browser
if (event) {
  // Set the status code to 404 for a custom 404 page
  setResponseStatus(event, 404)

  // Set the status message as well
  setResponseStatus(event, 404, 'Page Not Found')
}

----------------------------------------

TITLE: Module Directory Structure Example
DESCRIPTION: Shows the recommended directory structure for organizing multiple local modules with numerical prefixes to control execution order.

LANGUAGE: bash
CODE:
modules/
  1.first-module/
    index.ts
  2.second-module.ts

----------------------------------------

TITLE: Running Nuxi Generate Command
DESCRIPTION: Command syntax for pre-rendering Nuxt.js application routes into static HTML files. Supports various options including working directory specification, log level control, and environment configuration.

LANGUAGE: bash
CODE:
npx nuxi generate [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--preset] [--dotenv] [--envName]

----------------------------------------

TITLE: Defining Nuxt Plugin in TypeScript
DESCRIPTION: Demonstrates how to create a Nuxt plugin using the new format in Nuxt Bridge. The plugin injects a custom function into the Nuxt application.

LANGUAGE: javascript
CODE:
export default defineNuxtPlugin(nuxtApp => {
  nuxtApp.provide('injected', () => 'my injected function')
  // now available on `nuxtApp.$injected`
})

----------------------------------------

TITLE: Creating Default Export Utility Function in TypeScript
DESCRIPTION: Shows how to create a default export utility function for selecting a random entry from an array. The function will be auto-imported and available as randomEntry() throughout the Nuxt application.

LANGUAGE: typescript
CODE:
// It will be available as randomEntry() (camelCase of file name without extension)
export default function (arr: Array<any>) {
  return arr[Math.floor(Math.random() * arr.length)]
}

----------------------------------------

TITLE: Creating Markdown Content in Nuxt
DESCRIPTION: Example of creating a simple markdown file in the content/ directory of a Nuxt project.

LANGUAGE: markdown
CODE:
# Hello Content

----------------------------------------

TITLE: Runtime Configuration Setup
DESCRIPTION: Illustrates how to set up runtime configuration with public and private keys, including environment variable integration.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  runtimeConfig: {
    // The private keys which are only available server-side
    apiSecret: '123',
    // Keys within public are also exposed client-side
    public: {
      apiBase: '/api'
    }
  }
})

LANGUAGE: bash
CODE:
# This will override the value of apiSecret
NUXT_API_SECRET=api_secret_token

----------------------------------------

TITLE: Implementing onNuxtReady in a Nuxt Plugin (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the onNuxtReady composable within a Nuxt plugin. It shows how to define a client-side plugin that imports and initializes an analytics library after the app has finished loading, without blocking the initial render.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  onNuxtReady(async () => {
    const myAnalyticsLibrary = await import('my-big-analytics-library')
    // do something with myAnalyticsLibrary
  })
})

----------------------------------------

TITLE: Server Route Runtime Config Usage
DESCRIPTION: Shows how to use runtime configuration within server-side API routes.

LANGUAGE: typescript
CODE:
export default defineEventHandler(async (event) => {
  const { apiSecret } = useRuntimeConfig(event)
  const result = await $fetch('https://my.api.com/test', {
    headers: {
      Authorization: `Bearer ${apiSecret}`
    }
  })
  return result
})

----------------------------------------

TITLE: Using Shared Utility in Nitro Server Handler
DESCRIPTION: Example of using a shared utility function within a Nitro server API endpoint handler.

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  return {
    hello: capitalize('hello')
  }
})

----------------------------------------

TITLE: Implementing Layout Transitions in Vue Component
DESCRIPTION: Add CSS transitions to the app.vue file to apply transitions between layouts. This example applies a grayscale filter during layout transitions.

LANGUAGE: vue
CODE:
<template>
  <NuxtLayout>
    <NuxtPage />
  </NuxtLayout>
</template>

<style>
.layout-enter-active,
.layout-leave-active {
  transition: all 0.4s;
}
.layout-enter-from,
.layout-leave-to {
  filter: grayscale(1);
}
</style>

----------------------------------------

TITLE: Nuxt Error Interface Definition (TypeScript)
DESCRIPTION: This snippet defines the interface for Nuxt errors. It includes properties for the HTTP response status code, status message, and error message.

LANGUAGE: typescript
CODE:
interface {
  //  HTTP response status code
  statusCode: number
  // HTTP response status message
  statusMessage: string
  // Error message
  message: string
}

----------------------------------------

TITLE: Type Definition for addImportsDir Function
DESCRIPTION: TypeScript type definition for the addImportsDir function that enables importing all files from a specified directory automatically.

LANGUAGE: typescript
CODE:
function addImportsDir (dirs: string | string[], options?: { prepend?: boolean }): void

----------------------------------------

TITLE: Handling Request Body in Nuxt API
DESCRIPTION: Shows how to read and process the request body in a POST handler for a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler(async (event) => {
  const body = await readBody(event)
  return { body }
})

----------------------------------------

TITLE: Enabling Vite with Nuxt Bridge Configuration
DESCRIPTION: Configuration to enable Vite and Nitro in a Nuxt 2 application using Nuxt Bridge. Requires removing nuxt-vite module as Bridge provides the same functionality.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: {
    vite: true,
    nitro: true
  }
})

----------------------------------------

TITLE: Protecting API Routes
DESCRIPTION: Implementation of a protected API route using requireUserSession utility

LANGUAGE: typescript
CODE:
export default defineEventHandler(async (event) => {
  const { user } = await requireUserSession(event)
  return {}
});

----------------------------------------

TITLE: Rendering Pages with NuxtPage in Vue
DESCRIPTION: This snippet shows the internal structure of the <NuxtPage> component, including optional Transition and KeepAlive wrappers.

LANGUAGE: vue
CODE:
<template>
  <RouterView #default="{ Component }">
    <!-- Optional, when using transitions -->
    <Transition>
      <!-- Optional, when using keep-alive -->
      <KeepAlive>
        <Suspense>
          <component :is="Component" />
        </Suspense>
      </KeepAlive>
    </Transition>
  </RouterView>
</template>

----------------------------------------

TITLE: Defining useNuxt Function Type in TypeScript
DESCRIPTION: This snippet defines the type signature for the useNuxt function and the Nuxt interface. It shows the structure and available properties of the Nuxt instance.

LANGUAGE: typescript
CODE:
function useNuxt(): Nuxt

interface Nuxt {
  options: NuxtOptions
  hooks: Hookable<NuxtHooks>
  hook: Nuxt['hooks']['hook']
  callHook: Nuxt['hooks']['callHook']
  addHooks: Nuxt['hooks']['addHooks']
  ready: () => Promise<void>
  close: () => Promise<void>
  server?: any
  vfs: Record<string, string>
  apps: Record<string, NuxtApp>
}

----------------------------------------

TITLE: Using head with defineNuxtComponent in Vue
DESCRIPTION: This example shows how to use the head() method within a component definition using defineNuxtComponent(). It sets the page title for the component.

LANGUAGE: vue
CODE:
<script lang="ts">
export default defineNuxtComponent({
  head(nuxtApp) {
    return {
      title: 'My site'
    }
  },
})
</script>

----------------------------------------

TITLE: Error Slot Implementation in Vue
DESCRIPTION: Shows how to implement the error slot in NuxtErrorBoundary to display custom error messages when an error occurs in the default slot.

LANGUAGE: vue
CODE:
<template>
  <NuxtErrorBoundary>
    <!-- ... -->
    <template #error="{ error }">
      <p>An error occurred: {{ error }}</p>
    </template>
  </NuxtErrorBoundary>
</template>

----------------------------------------

TITLE: Defining Module Types in TypeScript
DESCRIPTION: This snippet defines TypeScript types and interfaces for Nuxt modules, including ModuleOptions, ModuleDefinition, NuxtModule, and related structures.

LANGUAGE: typescript
CODE:
function defineNuxtModule<OptionsT extends ModuleOptions> (definition: ModuleDefinition<OptionsT> | NuxtModule<OptionsT>): NuxtModule<OptionsT>

type ModuleOptions = Record<string, any>

interface ModuleDefinition<T extends ModuleOptions = ModuleOptions> {
  meta?: ModuleMeta
  defaults?: T | ((nuxt: Nuxt) => T)
  schema?: T
  hooks?: Partial<NuxtHooks>
  setup?: (this: void, resolvedOptions: T, nuxt: Nuxt) => Awaitable<void | false | ModuleSetupReturn>
}

interface NuxtModule<T extends ModuleOptions = ModuleOptions> {
  (this: void, inlineOptions: T, nuxt: Nuxt): Awaitable<void | false | ModuleSetupReturn>
  getOptions?: (inlineOptions?: T, nuxt?: Nuxt) => Promise<T>
  getMeta?: () => Promise<ModuleMeta>
}

interface ModuleSetupReturn {
  timings?: {
    setup?: number
    [key: string]: number | undefined
  }
}

interface ModuleMeta {
  name?: string
  version?: string
  configKey?: string
  compatibility?: NuxtCompatibility
  [key: string]: unknown
}

----------------------------------------

TITLE: Configuring File Exclusions with .nuxtignore in Nuxt
DESCRIPTION: Example showing how to ignore specific layouts, pages, and middleware files during Nuxt's build phase using glob patterns. The configuration allows for both excluding files/patterns and making exceptions using the ! operator.

LANGUAGE: bash
CODE:
# ignore layout foo.vue
layouts/foo.vue
# ignore layout files whose name ends with -ignore.vue
layouts/*-ignore.vue

# ignore page bar.vue
pages/bar.vue
# ignore page inside ignore folder
pages/ignore/*.vue

# ignore route middleware files under foo folder except foo/bar.js
middleware/foo/*.js
!middleware/foo/bar.js

----------------------------------------

TITLE: Accessing Plugin Injections in Composables
DESCRIPTION: Example demonstrating how to access plugin injections from within a composable.

LANGUAGE: typescript
CODE:
export const useHello = () => {
  const nuxtApp = useNuxtApp()
  return nuxtApp.$hello
}

----------------------------------------

TITLE: Using useCookie Composable in Nuxt
DESCRIPTION: This snippet demonstrates the basic usage of the useCookie composable in Nuxt. It creates a cookie called 'counter' with a random initial value if it doesn't exist, and provides buttons to manipulate the counter value.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const counter = useCookie('counter')

counter.value = counter.value || Math.round(Math.random() * 1000)
</script>

<template>
  <div>
    <h1>Counter: {{ counter || '-' }}</h1>
    <button @click="counter = null">reset</button>
    <button @click="counter--">-</button>
    <button @click="counter++">+</button>
  </div>
</template>

----------------------------------------

TITLE: Defining addTemplate Function Type in TypeScript
DESCRIPTION: Type definition for the addTemplate function, which renders a given template during build into the project buildDir. It includes interfaces for NuxtTemplate and ResolvedNuxtTemplate.

LANGUAGE: typescript
CODE:
function addTemplate (template: NuxtTemplate | string): ResolvedNuxtTemplate

interface NuxtTemplate {
  src?: string
  filename?: string
  dst?: string
  options?: Record<string, any>
  getContents?: (data: Record<string, any>) => string | Promise<string>
  write?: boolean
}

interface ResolvedNuxtTemplate {
  src: string
  filename: string
  dst: string
  options: Record<string, any>
  getContents: (data: Record<string, any>) => string | Promise<string>
  write: boolean
  filename: string
  dst: string
}

----------------------------------------

TITLE: Building Nuxt Programmatically TypeScript Interface
DESCRIPTION: TypeScript interface definition for buildNuxt function that builds Nuxt applications programmatically using either Vite or Webpack builder.

LANGUAGE: typescript
CODE:
async function buildNuxt (nuxt: Nuxt): Promise<any>

----------------------------------------

TITLE: Demonstrating Public Directory Structure in Nuxt
DESCRIPTION: Shows the typical structure of a public/ directory in a Nuxt project, containing common static assets like favicon.ico, og-image.png, and robots.txt that are served at the root level without build modifications.

LANGUAGE: bash
CODE:
-| public/
---| favicon.ico
---| og-image.png
---| robots.txt

----------------------------------------

TITLE: Setting Environment Variables in .env File
DESCRIPTION: Shows how to set environment variables in a .env file for development and build/generate stages.

LANGUAGE: plaintext
CODE:
NUXT_PUBLIC_API_BASE = "https://api.localhost:5555"
NUXT_API_SECRET = "123"

----------------------------------------

TITLE: Handling Route Parameters in Nuxt API
DESCRIPTION: Demonstrates how to handle dynamic route parameters in a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  const name = getRouterParam(event, 'name')

  return `Hello, ${name}!`
})

----------------------------------------

TITLE: Defining NuxtApp Interface Properties in JavaScript
DESCRIPTION: Demonstrates the core properties and structure of the NuxtApp interface, including the Vue application instance, version information, hooks system, SSR context, and payload management.

LANGUAGE: javascript
CODE:
const nuxtApp = {
  vueApp, // the global Vue application: https://vuejs.org/api/application.html#application-api

  versions, // an object containing Nuxt and Vue versions

  // These let you call and add runtime NuxtApp hooks
  // https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts#L18
  hooks,
  hook,
  callHook,

  // Only accessible on server-side
  ssrContext: {
    url,
    req,
    res,
    runtimeConfig,
    noSSR,
  },

  // This will be stringified and passed from server to client
  payload: {
    serverRendered: true,
    data: {},
    state: {}
  }

  provide: (name: string, value: any) => void
}

----------------------------------------

TITLE: Forwarding Headers and Cookies in Server-Side Requests in Nuxt
DESCRIPTION: This example shows how to use useRequestFetch to forward user headers and cookies when making server-side requests. It ensures that authentication and other important data are properly passed to internal API routes.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// This will forward the user's headers and cookies to `/api/cookies`
const requestFetch = useRequestFetch()
const { data } = await useAsyncData(() => requestFetch('/api/cookies'))
</script>

----------------------------------------

TITLE: NuxtIsland Component with Props and Fallback
DESCRIPTION: Example showing NuxtIsland usage with props and a fallback slot for loading or error states.

LANGUAGE: vue
CODE:
<NuxtIsland
  name="MyIsland"
  :props="{ someProps: value }"
  lazy
>
  <template #fallback>
    Loading...
  </template>
</NuxtIsland>

----------------------------------------

TITLE: Using addTypeTemplate in a Nuxt Module
DESCRIPTION: Example of using addTypeTemplate in a Nuxt module to generate type definitions for Markdown files. The template content is defined inline as a TypeScript declaration.

LANGUAGE: typescript
CODE:
// https://github.com/Hebilicious/nuxtpress
import { addTypeTemplate, defineNuxtModule } from "@nuxt/kit"

export default defineNuxtModule({
  setup() {
    addTypeTemplate({
      filename: "types/markdown.d.ts",
      getContents: () => /* ts */`
      declare module '*.md' {
        import type { ComponentOptions } from 'vue'
        const Component: ComponentOptions
        export default Component
      }`
    })
  }
}

----------------------------------------

TITLE: Lazy Data Fetching with Error Handling
DESCRIPTION: Example of lazy data fetching with loading state handling using useLazyFetch

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { status, data: posts } = useLazyFetch('/api/posts')
</script>

<template>
  <div v-if="status === 'pending'">
    Loading ...
  </div>
  <div v-else>
    <div v-for="post in posts">
      <!-- do something -->
    </div>
  </div>
</template>

----------------------------------------

TITLE: Using useNuxtApp in Vue Component
DESCRIPTION: Demonstrates how to use the useNuxtApp composable within a Vue component's setup function to access the Nuxt runtime context.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const nuxtApp = useNuxtApp()
</script>

----------------------------------------

TITLE: Accessing Runtime Config in Server API
DESCRIPTION: Illustrates how to access both public and private runtime configuration variables in a server-side API route, including making an HTTP request.

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  const config = useRuntimeConfig(event)

  // Access public variables
  const result = await $fetch(`/test`, {
    baseURL: config.public.apiBase,
    headers: {
      // Access a private variable (only available on the server)
      Authorization: `Bearer ${config.apiSecret}`
    }
  })
  return result
}

----------------------------------------

TITLE: Development Server Handler Type Definition
DESCRIPTION: Type definition for addDevServerHandler function and NitroDevEventHandler interface used for development-only server handlers.

LANGUAGE: typescript
CODE:
function addDevServerHandler (handler: NitroDevEventHandler): void

export interface NitroDevEventHandler {
  handler: EventHandler;
  route?: string;
}

----------------------------------------

TITLE: Disabling Strict Mode in Nuxt Config
DESCRIPTION: Configuration to disable TypeScript strict checks when converting a codebase to TypeScript.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  typescript: {
    strict: false
  }
})

----------------------------------------

TITLE: Typing App Config Input in TypeScript
DESCRIPTION: This TypeScript declaration file shows how to type the input options for app config. It defines a theme object with a primaryColor property.

LANGUAGE: typescript
CODE:
declare module 'nuxt/schema' {
  interface AppConfigInput {
    /** Theme configuration */
    theme?: {
      /** Primary app color */
      primaryColor?: string
    }
  }
}

// It is always important to ensure you import/export something when augmenting a type
export {}

----------------------------------------

TITLE: Implementing Robots.txt Server Handler
DESCRIPTION: Example showing how to add a server handler for robots.txt using addServerHandler in a Nuxt module.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addServerHandler } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options) {
    const resolver = createResolver(import.meta.url)

    addServerHandler({
      route: '/robots.txt'
      handler: resolver.resolve('./runtime/robots.get.ts')
    })
  }
})

LANGUAGE: typescript
CODE:
export default defineEventHandler(() => {
  return {
    body: `User-agent: *\nDisallow: /`
  }
})

----------------------------------------

TITLE: Basic Navigation Abort Example
DESCRIPTION: Example showing how to use abortNavigation in a route middleware to prevent unauthorized access and redirect users.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  const user = useState('user')

  if (!user.value.isAuthorized) {
    return abortNavigation()
  }

  if (to.path !== '/edit-post') {
    return navigateTo('/edit-post')
  }
})

----------------------------------------

TITLE: Handling HTTP Methods in Nuxt API
DESCRIPTION: Shows how to create separate handlers for different HTTP methods (GET and POST) for the same API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler(() => 'Test get handler')

LANGUAGE: ts
CODE:
export default defineEventHandler(() => 'Test post handler')

----------------------------------------

TITLE: MetaObject Interface Definition for useHead
DESCRIPTION: Detailed type interface for the MetaObject parameter used in useHead, defining all possible head metadata properties including title, meta tags, scripts, and HTML attributes.

LANGUAGE: typescript
CODE:
interface MetaObject {
  title?: string
  titleTemplate?: string | ((title?: string) => string)
  base?: Base
  link?: Link[]
  meta?: Meta[]
  style?: Style[]
  script?: Script[]
  noscript?: Noscript[]
  htmlAttrs?: HtmlAttributes
  bodyAttrs?: BodyAttributes
}

----------------------------------------

TITLE: Creating a Nitro Plugin in Nuxt
DESCRIPTION: Demonstrates how to create a Nitro plugin to extend Nitro's runtime behavior.

LANGUAGE: ts
CODE:
export default defineNitroPlugin((nitroApp) => {
  console.log('Nitro plugin', nitroApp)
})

----------------------------------------

TITLE: Using mlly for Safe Module Interoperability
DESCRIPTION: Shows how to use the mlly library to safely handle interoperability between CommonJS and ES Modules, preserving named exports and handling default exports.

LANGUAGE: javascript
CODE:
import { interopDefault } from 'mlly'

// Assuming the shape is { default: { foo: 'bar' }, baz: 'qux' }
import myModule from 'my-module'

console.log(interopDefault(myModule)) // { foo: 'bar', baz: 'qux' }

----------------------------------------

TITLE: Adding a plugin in Nuxt
DESCRIPTION: This example shows how to add a new plugin named 'analytics' to a Nuxt project. The plugin will be generated in the 'plugins' directory.

LANGUAGE: bash
CODE:
npx nuxi add plugin analytics

----------------------------------------

TITLE: Enabling Build Cache in Nuxt
DESCRIPTION: Caches Nuxt build artifacts based on a hash of the configuration and source files.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    buildCache: true
  }
})

----------------------------------------

TITLE: Basic Nuxt Module Logger Implementation
DESCRIPTION: Basic example of implementing logging in a Nuxt module using useLogger. Shows how to create a logger instance with a custom tag and log an info message.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, useLogger } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options, nuxt) {
    const logger = useLogger('my-module')

    logger.info('Hello from my module!')
  }
})

----------------------------------------

TITLE: Installing Nuxt Auth Utils Module
DESCRIPTION: Command to install the nuxt-auth-utils module using the nuxi CLI tool

LANGUAGE: bash
CODE:
npx nuxi@latest module add auth-utils

----------------------------------------

TITLE: Dynamic Route Parameters with NuxtLink
DESCRIPTION: Shows how to pass parameters to dynamic routes using NuxtLink

LANGUAGE: vue
CODE:
<template>
  <NuxtLink :to="{ name: 'posts-id', params: { id: 123 } }">
    Post 123
  </NuxtLink>
</template>

----------------------------------------

TITLE: TypeScript Runtime Config Type Definition
DESCRIPTION: Shows how to manually type runtime configuration using TypeScript declaration merging.

LANGUAGE: typescript
CODE:
declare module 'nuxt/schema' {
  interface RuntimeConfig {
    apiSecret: string
  }
  interface PublicRuntimeConfig {
    apiBase: string
  }
}
// It is always important to ensure you import/export something when augmenting a type
export {}

----------------------------------------

TITLE: Accessing App Configuration in Vue Component
DESCRIPTION: This Vue component shows how to access the app configuration using the useAppConfig composable. It logs the theme object to the console.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const appConfig = useAppConfig()

console.log(appConfig.theme)
</script>

----------------------------------------

TITLE: Adding a layout in Nuxt
DESCRIPTION: This snippet demonstrates how to add a new layout named 'custom' to a Nuxt project. The layout will be generated in the 'layouts' directory.

LANGUAGE: bash
CODE:
npx nuxi add layout custom

----------------------------------------

TITLE: Basic Router Manipulation in TypeScript
DESCRIPTION: Illustrates basic router manipulation methods such as adding routes, removing routes, getting routes, checking route existence, and resolving routes.

LANGUAGE: typescript
CODE:
const router = useRouter()

router.addRoute({ name: 'home', path: '/home', component: Home })
router.removeRoute('home')
router.getRoutes()
router.hasRoute('home')
router.resolve({ name: 'home' })

----------------------------------------

TITLE: Extending Webpack Configuration in Nuxt
DESCRIPTION: Example of using extendWebpackConfig to add a new rule for processing .txt files with raw-loader in a Nuxt module.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, extendWebpackConfig } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    extendWebpackConfig((config) => {
      config.module?.rules.push({
        test: /\.txt$/,
        use: 'raw-loader'
      })
    })
  }
})

----------------------------------------

TITLE: Error Handling in Nuxt API
DESCRIPTION: Shows how to handle errors and return custom error responses in a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  const id = parseInt(event.context.params.id) as number

  if (!Number.isInteger(id)) {
    throw createError({
      statusCode: 400,
      statusMessage: 'ID should be an integer',
    })
  }
  return 'All good'
})

----------------------------------------

TITLE: Creating Protected Home Page
DESCRIPTION: Vue component implementation for a protected home page with authentication check and logout functionality

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  middleware: ['authenticated'],
})
  
const { user, clear: clearSession } = useUserSession()

async function logout() {
  await clearSession()
  await navigateTo('/login')
}
</script>

<template>
  <div>
    <h1>Welcome {{ user.name }}</h1>
    <button @click="logout">Logout</button>
  </div>
</template>

----------------------------------------

TITLE: Nitro Instance Type Definition
DESCRIPTION: Type definition for the useNitro function and Nitro interface that provides access to the Nitro instance.

LANGUAGE: typescript
CODE:
function useNitro (): Nitro

export interface Nitro {
  options: NitroOptions;
  scannedHandlers: NitroEventHandler[];
  vfs: Record<string, string>;
  hooks: Hookable<NitroHooks>;
  unimport?: Unimport;
  logger: ConsolaInstance;
  storage: Storage;
  close: () => Promise<void>;
  updateConfig: (config: NitroDynamicConfig) => void | Promise<void>;
}

----------------------------------------

TITLE: Implementing useRequestFetch in Vue Component
DESCRIPTION: This snippet demonstrates how to use useRequestFetch in a Vue component to forward user headers to an API endpoint. It compares the results of using useRequestFetch with regular $fetch.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// This will forward the user's headers to the `/api/cookies` event handler
// Result: { cookies: { foo: 'bar' } }
const requestFetch = useRequestFetch()
const { data: forwarded } = await useAsyncData(() => requestFetch('/api/cookies'))

// This will NOT forward anything
// Result: { cookies: {} }
const { data: notForwarded } = await useAsyncData(() => $fetch('/api/cookies')) 
</script>

----------------------------------------

TITLE: Creating Basic Nuxt Plugin
DESCRIPTION: Demonstrates the basic structure of a Nuxt plugin using the functional syntax.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(nuxtApp => {
  // Doing something with nuxtApp
})

----------------------------------------

TITLE: Executing Nuxi Init Command in Bash
DESCRIPTION: This command initializes a new Nuxt project. It supports various options for customization, including specifying the project directory, template, package manager, and other installation preferences.

LANGUAGE: bash
CODE:
npx nuxi init [DIR] [--cwd=<directory>] [-t, --template] [-f, --force] [--offline] [--preferOffline] [--no-install] [--gitInit] [--shell] [--packageManager]

----------------------------------------

TITLE: Importing and Exporting with ES Modules in JavaScript
DESCRIPTION: Shows the syntax for importing and exporting modules using ECMAScript Modules (ESM) format, which is the standard module system for modern JavaScript.

LANGUAGE: javascript
CODE:
import a from './a'

export { a }

----------------------------------------

TITLE: Type Definition for addComponentsDir Function in TypeScript
DESCRIPTION: Defines the type signature and interfaces for the addComponentsDir function, which registers a directory to be scanned for components in Nuxt applications.

LANGUAGE: typescript
CODE:
async function addComponentsDir (dir: ComponentsDir, opts: { prepend?: boolean } = {}): void

interface ComponentsDir {
  path: string
  pattern?: string | string[]
  ignore?: string[]
  prefix?: string
  pathPrefix?: boolean
  enabled?: boolean
  prefetch?: boolean
  preload?: boolean
  isAsync?: boolean
  extendComponent?: (component: Component) => Promise<Component | void> | (Component | void)
  global?: boolean
  island?: boolean
  watch?: boolean
  extensions?: string[]
  transpile?: 'auto' | boolean
}

// You can augment this interface (exported from `@nuxt/schema`) if needed
interface ComponentMeta {
  [key: string]: unknown
}

interface Component {
  pascalName: string
  kebabName: string
  export: string
  filePath: string
  shortPath: string
  chunkName: string
  prefetch: boolean
  preload: boolean
  global?: boolean
  island?: boolean
  mode?: 'client' | 'server' | 'all'
  priority?: number
  meta?: ComponentMeta
}

----------------------------------------

TITLE: Executing Nuxi Info Command in Bash
DESCRIPTION: Command to display information about a Nuxt project. Can be run with an optional ROOTDIR parameter to specify the project directory, or --cwd option to set the working directory. Default directory is the current directory ('.').

LANGUAGE: bash
CODE:
npx nuxi info [ROOTDIR] [--cwd=<directory>]

----------------------------------------

TITLE: Disabling Auto-imported Components in Nuxt
DESCRIPTION: Shows how to disable auto-importing of components from the components directory in Nuxt configuration. This setting prevents automatic import of components, requiring manual imports.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  components: {
    dirs: []
  }
})

----------------------------------------

TITLE: Implementing Development Server Handler
DESCRIPTION: Example showing how to add a development-only server handler in a Nuxt module.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addDevServerHandler } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    const resolver = createResolver(import.meta.url)

    addDevServerHandler({
      handler: () => {
        return {
          body: `Response generated at ${new Date().toISOString()}`
        }
      },
      route: '/_handler'
    })
  }
})

----------------------------------------

TITLE: Vue Component Runtime Config Usage
DESCRIPTION: Example of using runtime configuration within a Vue component with TypeScript support.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const config = useRuntimeConfig()

console.log('Runtime config:', config)
if (import.meta.server) {
  console.log('API secret:', config.apiSecret)
}
</script>

<template>
  <div>
    <div>Check developer console!</div>
  </div>
</template>

----------------------------------------

TITLE: Running Nuxt Preview Command
DESCRIPTION: Command syntax for starting a preview server for a built Nuxt application. Supports various options including working directory specification, log level control, environment selection, and port configuration.

LANGUAGE: bash
CODE:
npx nuxi preview [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--envName] [--dotenv] [-p, --port]

----------------------------------------

TITLE: Configuring Page Metadata Scanning in Nuxt
DESCRIPTION: Controls the scanning and exposure of route metadata defined in definePageMeta at build-time.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    scanPageMeta: false
  }
})

----------------------------------------

TITLE: Adding a composable in Nuxt
DESCRIPTION: This example shows how to add a new composable named 'foo' to a Nuxt project. The composable will be generated in the 'composables' directory.

LANGUAGE: bash
CODE:
npx nuxi add composable foo

----------------------------------------

TITLE: Adding Nuxt Modules with Nuxi CLI
DESCRIPTION: Command to add a Nuxt module to your project. It installs the module, updates package.json, and modifies nuxt.config. Options allow customizing the installation process.

LANGUAGE: bash
CODE:
npx nuxi module add <MODULENAME> [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--skipInstall] [--skipConfig] [--dev]

----------------------------------------

TITLE: Disabling Directory Scanning for Auto-imports
DESCRIPTION: Demonstrates how to disable directory scanning for auto-imports in the Nuxt configuration. This setting keeps framework-specific auto-imports while requiring manual imports for custom code.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  imports: {
    scan: false
  }
})

----------------------------------------

TITLE: TypeScript Type Definition for useHeadSafe
DESCRIPTION: Provides the type definition for the useHeadSafe composable. It takes a MaybeComputedRef of HeadSafe as input and returns void.

LANGUAGE: typescript
CODE:
useHeadSafe(input: MaybeComputedRef<HeadSafe>): void

----------------------------------------

TITLE: Using useRequestURL in Nuxt Vue Component
DESCRIPTION: Demonstrates how to use the useRequestURL composable in a Vue component to access and display the current request URL and pathname. The composable returns a standard URL object that works consistently across server-side and client-side rendering.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const url = useRequestURL()
</script>

<template>
  <p>URL is: {{ url }}</p>
  <p>Path is: {{ url.pathname }}</p>
</template>

----------------------------------------

TITLE: Importing Nuxt Kit Utilities in ES Modules
DESCRIPTION: This example demonstrates how to import Nuxt Kit utilities in an ES module file. It specifically imports the useNuxt function from @nuxt/kit.

LANGUAGE: js
CODE:
import { useNuxt } from '@nuxt/kit'

----------------------------------------

TITLE: Installing Pinia Module Example
DESCRIPTION: Example command demonstrating how to install the Pinia module using the Nuxi module add command.

LANGUAGE: bash
CODE:
npx nuxi module add pinia

----------------------------------------

TITLE: Basic Usage of useRequestHeaders in JavaScript
DESCRIPTION: Examples showing how to retrieve all request headers or specific headers using the useRequestHeaders composable. Note that this will return an empty object when executed in the browser.

LANGUAGE: javascript
CODE:
// Get all request headers
const headers = useRequestHeaders()

// Get only cookie request header
const headers = useRequestHeaders(['cookie'])

----------------------------------------

TITLE: Adding middleware in Nuxt
DESCRIPTION: This snippet shows how to add new middleware named 'auth' to a Nuxt project. The middleware will be generated in the 'middleware' directory.

LANGUAGE: bash
CODE:
npx nuxi add middleware auth

----------------------------------------

TITLE: Executing nuxi build Command in Bash
DESCRIPTION: This command builds a Nuxt application for production. It creates a .output directory containing the application, server, and dependencies. The command accepts various arguments and options to customize the build process.

LANGUAGE: bash
CODE:
npx nuxi build [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--prerender] [--preset] [--dotenv] [--envName]

----------------------------------------

TITLE: Executing nuxi build Command in Bash
DESCRIPTION: This command builds a Nuxt application for production. It creates a .output directory containing the application, server, and dependencies. The command accepts various arguments and options to customize the build process.

LANGUAGE: bash
CODE:
npx nuxi build [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--prerender] [--preset] [--dotenv] [--envName]

----------------------------------------

TITLE: Accessing Request Event and URL in Nuxt using useRequestEvent
DESCRIPTION: This snippet demonstrates how to use the useRequestEvent composable to access the incoming request event and retrieve the URL path. It's important to note that useRequestEvent returns undefined in browser environments.

LANGUAGE: typescript
CODE:
// Get underlying request event
const event = useRequestEvent()

// Get the URL
const url = event?.path

----------------------------------------

TITLE: Using useHeadSafe Composable in TypeScript
DESCRIPTION: Demonstrates how to use the useHeadSafe composable to safely set head data, including scripts and meta tags. The composable prevents potential XSS attacks by sanitizing user input.

LANGUAGE: typescript
CODE:
useHeadSafe({
  script: [
    { id: 'xss-script', innerHTML: 'alert("xss")' }
  ],
  meta: [
    { 'http-equiv': 'refresh', content: '0;javascript:alert(1)' }
  ]
})
// Will safely generate
// <script id="xss-script"></script>
// <meta content="0;javascript:alert(1)">

----------------------------------------

TITLE: Configuring Nuxt Modules in TypeScript
DESCRIPTION: Demonstrates different ways to add and configure Nuxt modules in the nuxt.config.ts file. Shows how to use package names, local modules, modules with options, and inline module definitions.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: [
    // Using package name (recommended usage)
    '@nuxtjs/example',

    // Load a local module
    './modules/example',

    // Add module with inline-options
    ['./modules/example', { token: '123' }],

    // Inline module definition
    async (inlineOptions, nuxt) => { }
  ]
})

----------------------------------------

TITLE: Configuring Nuxt Modules in TypeScript
DESCRIPTION: Demonstrates different ways to add and configure Nuxt modules in the nuxt.config.ts file. Shows how to use package names, local modules, modules with options, and inline module definitions.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: [
    // Using package name (recommended usage)
    '@nuxtjs/example',

    // Load a local module
    './modules/example',

    // Add module with inline-options
    ['./modules/example', { token: '123' }],

    // Inline module definition
    async (inlineOptions, nuxt) => { }
  ]
})

----------------------------------------

TITLE: Adding an API route in Nuxt
DESCRIPTION: This example demonstrates how to add a new API route named 'hello' to a Nuxt project. The API route will be generated in the 'server/api' directory.

LANGUAGE: bash
CODE:
npx nuxi add api hello

----------------------------------------

TITLE: Configuring .gitignore for Nuxt Projects
DESCRIPTION: Standard .gitignore configuration that excludes Nuxt.js build outputs, Node.js dependencies, log files, system files, and environment configuration files. This configuration helps maintain a clean repository by preventing unnecessary files from being tracked by Git.

LANGUAGE: bash
CODE:
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store

# Local env files
.env
.env.*
!.env.example

----------------------------------------

TITLE: Executing Nuxt Module Builder Command in Bash
DESCRIPTION: This command runs the Nuxt module builder to generate a 'dist' directory containing the full build for a Nuxt module. It accepts various arguments and options for customizing the build process.

LANGUAGE: bash
CODE:
npx nuxi build-module [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--build] [--stub] [--sourcemap] [--prepare]

----------------------------------------

TITLE: Prefetching Components in Nuxt with TypeScript
DESCRIPTION: Demonstrates how to use the prefetchComponents utility to manually prefetch one or multiple globally registered components in a Nuxt application. This function accepts either a single component name or an array of component names as strings, using PascalCase naming convention.

LANGUAGE: typescript
CODE:
await prefetchComponents('MyGlobalComponent')

await prefetchComponents(['MyGlobalComponent1', 'MyGlobalComponent2'])

----------------------------------------

TITLE: Example Output of useRequestURL
DESCRIPTION: Shows the rendered HTML output when using useRequestURL in a development environment, displaying both the full URL and the pathname.

LANGUAGE: html
CODE:
<p>URL is: http://localhost:3000/about</p>
<p>Path is: /about</p>

----------------------------------------

TITLE: Migrating Plugins from Nuxt 2 to Nuxt 3
DESCRIPTION: This snippet demonstrates how to migrate a Nuxt 2 plugin to the Nuxt 3 format. It shows the change from using ctx and inject to using defineNuxtPlugin with nuxtApp.provide or a return object for automatic type support.

LANGUAGE: javascript
CODE:
export default (ctx, inject) => {
  inject('injected', () => 'my injected function')
})

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(nuxtApp => {
  // now available on `nuxtApp.$injected`
  nuxtApp.provide('injected', () => 'my injected function')

  // You can alternatively use this format, which comes with automatic type support
  return {
    provide: {
      injected: () => 'my injected function'
    }
  }
})

----------------------------------------

TITLE: Handling Cookies in Server-Side API Routes in Nuxt
DESCRIPTION: This snippet demonstrates how to access cookies in a server-side API route using the getCookie function. It shows the structure of a basic API handler in Nuxt.

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  const foo = getCookie(event, 'foo')
  // ... Do something with the cookie
})

----------------------------------------

TITLE: Adding Plugin Template Example
DESCRIPTION: Example demonstrating how to add a plugin template for VueFire integration using addPluginTemplate.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addPluginTemplate } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    const resolver = createResolver(import.meta.url)

    addPluginTemplate({
      src: resolve(templatesDir, 'plugin.ejs'),
      filename: 'plugin.mjs',
      options: {
        ...options,
        ssr: nuxt.options.ssr,
      },
    })
  }
})

LANGUAGE: typescript
CODE:
import { VueFire, useSSRInitialState } from 'vuefire'
import { defineNuxtPlugin } from '#imports'

export default defineNuxtPlugin((nuxtApp) => {
  const firebaseApp = nuxtApp.$firebaseApp

  nuxtApp.vueApp.use(VueFire, { firebaseApp })

  <% if(options.ssr) { %>
  if (import.meta.server) {
    nuxtApp.payload.vuefire = useSSRInitialState(undefined, firebaseApp)
  } else if (nuxtApp.payload?.vuefire) {
    useSSRInitialState(nuxtApp.payload.vuefire, firebaseApp)
  }
  <% } %>
})

----------------------------------------

TITLE: Adding a layer in Nuxt
DESCRIPTION: This snippet shows how to add a new layer named 'subscribe' to a Nuxt project. The layer will be generated in the 'layers' directory with a 'nuxt.config.ts' file.

LANGUAGE: bash
CODE:
npx nuxi add layer subscribe

----------------------------------------

TITLE: Checking Nuxt Compatibility Boolean Type Definition
DESCRIPTION: Type definition for hasNuxtCompatibility function that returns a boolean indicating whether current Nuxt version meets specified constraints.

LANGUAGE: typescript
CODE:
async function hasNuxtCompatibility(
  constraints: NuxtCompatibility,
  nuxt?: Nuxt
): Promise<boolean>;

interface NuxtCompatibility {
  nuxt?: string;
  bridge?: boolean;
}

----------------------------------------

TITLE: Executing nuxi prepare command in Bash
DESCRIPTION: This command creates a .nuxt directory in your application and generates types. It can be used in CI environments or as a postinstall command. The command accepts various arguments and options for customization.

LANGUAGE: bash
CODE:
npx nuxi prepare [ROOTDIR] [--dotenv] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--envName]

----------------------------------------

TITLE: Creating Named Export Utility Function in TypeScript
DESCRIPTION: Demonstrates how to create a named export utility function for number formatting using Intl.NumberFormat. This function will be auto-imported and available throughout the Nuxt application.

LANGUAGE: typescript
CODE:
export const { format: formatNumber } = Intl.NumberFormat('en-GB', {
  notation: 'compact',
  maximumFractionDigits: 1
})

----------------------------------------

TITLE: Creating Named Export Utility Function in TypeScript
DESCRIPTION: Demonstrates how to create a named export utility function for number formatting using Intl.NumberFormat. This function will be auto-imported and available throughout the Nuxt application.

LANGUAGE: typescript
CODE:
export const { format: formatNumber } = Intl.NumberFormat('en-GB', {
  notation: 'compact',
  maximumFractionDigits: 1
})

----------------------------------------

TITLE: Fetching Todos with useAsyncData in Vue
DESCRIPTION: Demonstrates how to fetch todos using useAsyncData with a specific key for later access.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// We can access same data later using 'todos' key
const { data } = await useAsyncData('todos', () => $fetch('/api/todos'))
</script>

----------------------------------------

TITLE: Page Layout Definition Migration
DESCRIPTION: Demonstrates migrating page layout definition from Nuxt 2 export syntax to Nuxt 3's definePageMeta compiler macro.

LANGUAGE: diff
CODE:
[pages/index.vue]
  <script>
+ definePageMeta({
+   layout: 'custom'
+ })
- export default {
-   layout: 'custom'
- }
  </script>

----------------------------------------

TITLE: Using Auto-imported useFetch in Vue Component
DESCRIPTION: Shows how to use the auto-imported 'useFetch' composable in a Nuxt component for data fetching. The function is used without explicit import to fetch data from an API endpoint.

LANGUAGE: vue
CODE:
<script setup lang="ts">
/* useFetch() is auto-imported */
const { data, refresh, status } = await useFetch('/api/hello')
</script>

----------------------------------------

TITLE: Using Auto-imported useFetch in Vue Component
DESCRIPTION: Shows how to use the auto-imported 'useFetch' composable in a Nuxt component for data fetching. The function is used without explicit import to fetch data from an API endpoint.

LANGUAGE: vue
CODE:
<script setup lang="ts">
/* useFetch() is auto-imported */
const { data, refresh, status } = await useFetch('/api/hello')
</script>

----------------------------------------

TITLE: Running TypeCheck Command in Nuxt
DESCRIPTION: Command syntax for running type checking in a Nuxt application using vue-tsc. Supports specifying the root directory, working directory, and log level options.

LANGUAGE: bash
CODE:
npx nuxi typecheck [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>]

----------------------------------------

TITLE: Nuxt Version Check Function Types
DESCRIPTION: Type definitions for utility functions that check Nuxt version (isNuxt2, isNuxt3) and retrieve current Nuxt version (getNuxtVersion).

LANGUAGE: typescript
CODE:
function isNuxt2(nuxt?: Nuxt): boolean;

function isNuxt3(nuxt?: Nuxt): boolean;

function getNuxtVersion(nuxt?: Nuxt): string;

----------------------------------------

TITLE: Updating TSConfig for Nuxt Auto-generated Types
DESCRIPTION: Differential changes required in tsconfig.json to utilize Nuxt's auto-generated TypeScript types. Shows how to extend the base configuration from the .nuxt directory.

LANGUAGE: diff
CODE:
{
+ "extends": "./.nuxt/tsconfig.json",
  "compilerOptions": {
    ...
  }
}

----------------------------------------

TITLE: Rendering Content with Vue in Nuxt
DESCRIPTION: Vue component setup for rendering content pages using the ContentRenderer component and useAsyncData for data fetching.

LANGUAGE: vue
CODE:
<script lang="ts" setup>
const route = useRoute()
const { data: page } = await useAsyncData(route.path, () => {
  return queryCollection('content').path(route.path).first()
})
</script>

<template>
  <div>
    <header><!-- ... --></header>

    <ContentRenderer v-if="page" :value="page" />

    <footer><!-- ... --></footer>
  </div>
</template>

----------------------------------------

TITLE: Accessing Router in Vue Template
DESCRIPTION: Shows how to use the $router global property to access the router instance directly within a Vue template.

LANGUAGE: vue
CODE:
<template>
  <button @click="$router.back()">Back</button>
</template>

----------------------------------------

TITLE: Installing Nuxi CLI (Bash)
DESCRIPTION: Commands for installing the Nuxi CLI as a development dependency using npm or yarn. Nuxi is required for the updated build and development scripts.

LANGUAGE: bash
CODE:
npm install -D nuxi

LANGUAGE: bash
CODE:
yarn add --dev nuxi

----------------------------------------

TITLE: Accessing App Config in Nuxt using TypeScript
DESCRIPTION: This snippet demonstrates how to use the useAppConfig composable to access the reactive app configuration in a Nuxt project. It shows the basic usage of retrieving the app config and logging it to the console.

LANGUAGE: typescript
CODE:
const appConfig = useAppConfig()

console.log(appConfig)

----------------------------------------

TITLE: Using nuxi add command in Nuxt projects
DESCRIPTION: This snippet demonstrates the basic syntax for using the 'nuxi add' command. It allows users to scaffold an entity into their Nuxt application by specifying a template and name, with optional parameters for working directory, log level, and force override.

LANGUAGE: bash
CODE:
npx nuxi add <TEMPLATE> <NAME> [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--force]

----------------------------------------

TITLE: Navigating to External URLs with navigateTo
DESCRIPTION: Demonstrates how to use navigateTo to navigate to external URLs by setting the 'external' parameter to true.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// will throw an error;
// navigating to an external URL is not allowed by default
await navigateTo('https://nuxt.com')

// will redirect successfully with the 'external' parameter set to 'true'
await navigateTo('https://nuxt.com', {
  external: true
})
</script>

----------------------------------------

TITLE: Preprocessor Configuration in Nuxt
DESCRIPTION: Example of configuring SCSS/SASS preprocessor options in Nuxt config.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  vite: {
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: '@use "~/assets/_colors.scss" as *;'
        }
      }
    }
  }
})

----------------------------------------

TITLE: Updating useFetch in JavaScript
DESCRIPTION: Update the useFetch composable to use the new fetch and fetchState properties instead of $fetch and $fetchState.

LANGUAGE: diff
CODE:
const {
- $fetch,
- $fetchState,
+ fetch,
+ fetchState,
} = useFetch(() => { posts.value = await $fetch('/api/posts') })

----------------------------------------

TITLE: Typing App Config Output in TypeScript
DESCRIPTION: This TypeScript declaration file demonstrates how to type the output of useAppConfig(). It specifies the theme property with a more specific type for primaryColor.

LANGUAGE: typescript
CODE:
declare module 'nuxt/schema' {
  interface AppConfig {
    // This will entirely replace the existing inferred `theme` property
    theme: {
      // You might want to type this value to add more specific types than Nuxt can infer,
      // such as string literal types
      primaryColor?: 'red' | 'blue'
    }
  }
}

// It is always important to ensure you import/export something when augmenting a type
export {}

----------------------------------------

TITLE: Accessing DOM Elements in ClientOnly Components with Vue
DESCRIPTION: Illustrates how to access DOM elements of components rendered inside <ClientOnly> using template refs and watchers.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const nuxtWelcomeRef = ref()

// The watch will be triggered when the component is available
watch(nuxtWelcomeRef, () => {
 console.log('<NuxtWelcome /> mounted')
}, { once: true })
</script>

<template>
  <ClientOnly>
    <NuxtWelcome ref="nuxtWelcomeRef" />
  </ClientOnly>
</template>

----------------------------------------

TITLE: Migrating Runtime Config Structure in Nuxt Config
DESCRIPTION: Shows how to convert separate privateRuntimeConfig and publicRuntimeConfig to the new unified runtimeConfig format in Nuxt 3. Public config must be nested under a 'public' key while private config remains at the root level.

LANGUAGE: javascript
CODE:
// nuxt.config.js
- privateRuntimeConfig: {
-   apiKey: process.env.NUXT_API_KEY || 'super-secret-key'
- },
- publicRuntimeConfig: {
-   websiteURL: 'https://public-data.com'
- }
+ runtimeConfig: {
+   apiKey: process.env.NUXT_API_KEY || 'super-secret-key',
+   public: {
+     websiteURL: 'https://public-data.com'
+   }
+ }

----------------------------------------

TITLE: Plugin Type Definitions in TypeScript
DESCRIPTION: Type definitions for the addPlugin function and related interfaces including NuxtPlugin and AddPluginOptions.

LANGUAGE: typescript
CODE:
function addPlugin (plugin: NuxtPlugin | string, options: AddPluginOptions): NuxtPlugin

interface NuxtPlugin {
  src: string
  mode?: 'all' | 'server' | 'client'
  order?: number
}

interface AddPluginOptions { append?: boolean }

----------------------------------------

TITLE: Using navigateTo in Route Middleware
DESCRIPTION: Shows how to use navigateTo within Nuxt route middleware, including setting a redirect code. It also highlights the importance of returning the navigateTo result.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  if (to.path !== '/search') {
    // setting the redirect code to '301 Moved Permanently'
    return navigateTo('/search', { redirectCode: 301 })
  }
})

----------------------------------------

TITLE: Defining extendPages Function Type in TypeScript
DESCRIPTION: This code snippet defines the type signature for the extendPages function, which allows customization of Nuxt pages configuration. It includes the NuxtPage type definition with properties for configuring individual pages.

LANGUAGE: typescript
CODE:
function extendPages (callback: (pages: NuxtPage[]) => void): void

type NuxtPage = {
  name?: string
  path: string
  file?: string
  meta?: Record<string, any>
  alias?: string[] | string
  redirect?: RouteLocationRaw
  children?: NuxtPage[]
}

----------------------------------------

TITLE: Using useNuxt2Meta for vue-meta in Nuxt Bridge
DESCRIPTION: Shows how to use useNuxt2Meta to interact with vue-meta in Nuxt Bridge, replacing useMeta from @nuxtjs/composition-api.

LANGUAGE: diff
CODE:
<script setup>
- import { useMeta } from '@nuxtjs/composition-api'
  useNuxt2Meta({
    title: 'My Nuxt App',
  })
</script>

----------------------------------------

TITLE: Executing nuxi analyze Command in Bash
DESCRIPTION: This command builds Nuxt and analyzes the production bundle. It accepts various options for customizing the analysis process, such as specifying the root directory, log level, and whether to serve the analysis results.

LANGUAGE: bash
CODE:
npx nuxi analyze [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--dotenv] [--name=<name>] [--no-serve]

----------------------------------------

TITLE: Adding Client-Side Plugin Example
DESCRIPTION: Example showing how to add a client-side plugin using the addPlugin utility within a Nuxt module.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addPlugin } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    const resolver = createResolver(import.meta.url)

    addPlugin({
      src: resolver.resolve('runtime/plugin.js'),
      mode: 'client'
    })
  }
})

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  const colorMode = useColorMode()

  nuxtApp.hook('app:mounted', () => {
    if (colorMode.preference !== 'dark') {
      colorMode.preference = 'dark'
    }
  })
})

----------------------------------------

TITLE: Updating Head Properties in Nuxt Configuration
DESCRIPTION: These snippets demonstrate the difference between setting head properties in Nuxt 2 and Nuxt 3 configurations. In Nuxt 3, the head property is moved under the app object, and the hid key for deduplication is no longer used.

LANGUAGE: typescript
CODE:
export default {
  head: {
    titleTemplate: '%s - Nuxt',
    meta: [
      { charset: 'utf-8' },
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
      { hid: 'description', name: 'description', content: 'Meta description' }
    ]
  }
}

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    head: {
      titleTemplate: '%s - Nuxt',
      meta: [
        { charset: 'utf-8' },
        { name: 'viewport', content: 'width=device-width, initial-scale=1' },
        { name: 'description', content: 'Meta description' }
      ]
    }
  }
})

----------------------------------------

TITLE: Creating Named Export Composable in Nuxt
DESCRIPTION: Example of creating a composable using named export syntax in TypeScript. Creates a composable that returns a useState hook with 'foo' as key and 'bar' as default value.

LANGUAGE: typescript
CODE:
export const useFoo = () => {
  return useState('foo', () => 'bar')
}

----------------------------------------

TITLE: Preloading Route Components with navigateTo in Nuxt (TypeScript)
DESCRIPTION: This snippet demonstrates how to use preloadRouteComponents to preload a route before navigation. It's used in conjunction with an async submit function that navigates to the dashboard upon successful authentication.

LANGUAGE: typescript
CODE:
// we don't await this async function, to avoid blocking rendering
// this component's setup function
preloadRouteComponents('/dashboard')

const submit = async () => {
  const results = await $fetch('/api/authentication')

  if (results.token) {
    await navigateTo('/dashboard')
  }
}

----------------------------------------

TITLE: Opening a Page in a New Tab with navigateTo
DESCRIPTION: Shows how to use navigateTo to open a page in a new tab by specifying the 'open' option with target and window features.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// will open 'https://nuxt.com' in a new tab
await navigateTo('https://nuxt.com', {
  open: {
    target: '_blank',
    windowFeatures: {
      width: 500,
      height: 500
    }
  }
})
</script>

----------------------------------------

TITLE: Migrating useAsync to useLazyAsyncData in Nuxt Bridge
DESCRIPTION: Shows how to replace useAsync with useLazyAsyncData or useLazyFetch in Nuxt Bridge for data fetching.

LANGUAGE: diff
CODE:
<script setup>
- import { useAsync } from '@nuxtjs/composition-api'
- const posts = useAsync(() => $fetch('/api/posts'))
+ const { data: posts } = useLazyAsyncData('posts', () => $fetch('/api/posts'))
+ // or, more simply!
+ const { data: posts } = useLazyFetch('/api/posts')
</script>

----------------------------------------

TITLE: Configuring Nuxt Bridge for Meta Tags in JavaScript
DESCRIPTION: This snippet shows how to enable meta tag handling in Nuxt Bridge by setting the bridge.meta option to true in the Nuxt configuration.

LANGUAGE: javascript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'
export default defineNuxtConfig({
  bridge: {
    meta: true,
    nitro: false // If migration to Nitro is complete, set to true
  }
})

----------------------------------------

TITLE: Adding a client-side plugin in Nuxt
DESCRIPTION: This example shows how to use the 'nuxi add' command to generate a client-side plugin named 'sockets' in a Nuxt project. The '--client' flag is used to specify that it's a client-side plugin.

LANGUAGE: bash
CODE:
npx nuxi add plugin sockets --client

----------------------------------------

TITLE: Using extendPages in a Nuxt Module
DESCRIPTION: This example demonstrates how to use extendPages within a Nuxt module to add a new page for a Prismic preview. It shows how to unshift a new page configuration to the pages array.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, extendPages } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options) {
    const resolver = createResolver(import.meta.url)

    extendPages((pages) => {
      pages.unshift({
        name: 'prismic-preview',
        path: '/preview',
        file: resolver.resolve('runtime/preview.vue')
       })
    })
  }
})

----------------------------------------

TITLE: Migrating useFetch to useLazyAsyncData in Nuxt Bridge
DESCRIPTION: Demonstrates how to replace useFetch with useLazyAsyncData or useLazyFetch in Nuxt Bridge, including handling of the refresh function.

LANGUAGE: diff
CODE:
<script setup>
- import { useFetch } from '@nuxtjs/composition-api'
- const posts = ref([])
- const { fetch } = useFetch(() => { posts.value = await $fetch('/api/posts') })
+ const { data: posts, refresh } = useLazyAsyncData('posts', () => $fetch('/api/posts'))
+ // or, more simply!
+ const { data: posts, refresh } = useLazyFetch('/api/posts')
  function updatePosts() {
-   return fetch()
+   return refresh()
  }
</script>

----------------------------------------

TITLE: Searching for Pinia Module Example
DESCRIPTION: Example command showing how to search for the Pinia module using the Nuxi module search command.

LANGUAGE: bash
CODE:
npx nuxi module search pinia

----------------------------------------

TITLE: Aborting Navigation with String Error
DESCRIPTION: Demonstrates using abortNavigation with a string error message to provide more context about why navigation was prevented.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  const user = useState('user')

  if (!user.value.isAuthorized) {
    return abortNavigation('Insufficient permissions.')
  }
})

----------------------------------------

TITLE: Custom Route Matching with definePageMeta in Vue
DESCRIPTION: Shows how to use a custom regular expression with definePageMeta to resolve route conflicts.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  path: '/:postId(\\d+)-:postSlug' 
})
</script>

----------------------------------------

TITLE: Opening Project Folder in Visual Studio Code
DESCRIPTION: Command to open the newly created Nuxt project folder in Visual Studio Code.

LANGUAGE: bash
CODE:
code <project-name>

----------------------------------------

TITLE: Nuxt Directory Structure for Layouts
DESCRIPTION: This snippet shows the directory structure for Nuxt layouts, including the default and custom layout files.

LANGUAGE: bash
CODE:
-| layouts/
---| default.vue
---| custom.vue

----------------------------------------

TITLE: Using addRouteMiddleware in a Nuxt Module
DESCRIPTION: This example demonstrates how to use addRouteMiddleware within a Nuxt module to register a global authentication middleware. It shows how to specify the middleware name, path, and set it as global.

LANGUAGE: typescript
CODE:
import { createResolver, defineNuxtModule, addRouteMiddleware } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    const resolver = createResolver(import.meta.url)

    addRouteMiddleware({
      name: 'auth',
      path: resolver.resolve('runtime/auth.ts'),
      global: true
    }, { prepend: true })
  }
})

----------------------------------------

TITLE: Accessing Vuex Store in Nuxt Bridge
DESCRIPTION: Shows how to access the Vuex store instance using useNuxtApp().$store instead of useStore from @nuxtjs/composition-api.

LANGUAGE: diff
CODE:
- import { useStore } from '@nuxtjs/composition-api`
+ const { $store } = useNuxtApp()

----------------------------------------

TITLE: Using a Named Layout in Nuxt Page
DESCRIPTION: This snippet demonstrates how to use a custom named layout in a Nuxt page by defining the layout in the page metadata.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  layout: 'custom'
})
</script>

----------------------------------------

TITLE: Refreshing All Data with refreshNuxtData in Vue
DESCRIPTION: This example demonstrates how to use refreshNuxtData to refresh all data on a page. It includes a button that triggers the refresh and manages a loading state.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const refreshing = ref(false)
const refreshAll = async () => {
  refreshing.value = true
  try {
    await refreshNuxtData()
  } finally {
    refreshing.value = false
  }
}
</script>

<template>
  <div>
    <button :disabled="refreshing" @click="refreshAll">
      Refetch All Data
    </button>
  </div>
</template>

----------------------------------------

TITLE: Using refreshCookie with Vue Authentication Example
DESCRIPTION: Demonstrates how to use refreshCookie in a login scenario where a token cookie is set and needs to be refreshed in the component state. Shows integration with useCookie and async login handling.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const tokenCookie = useCookie('token')

const login = async (username, password) => {
  const token = await $fetch('/api/token', { ... }) // Sets `token` cookie on response
  refreshCookie('token')
}

const loggedIn = computed(() => !!tokenCookie.value)
</script>

----------------------------------------

TITLE: Migrating key option to definePageMeta in Nuxt 3
DESCRIPTION: Shows how to migrate the key option from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. This is used to define a unique key for the page component.

LANGUAGE: vue
CODE:
<script>
export default {
  key: 'index'
  // or a method
  // key: route => route.fullPath
}
</script>

LANGUAGE: vue
CODE:
<script setup>
definePageMeta({
  key: 'index'
  // or a method
  // key: route => route.fullPath
})
</script>

----------------------------------------

TITLE: Aliasing Libraries in Nuxt Configuration
DESCRIPTION: Shows how to manually alias a library to its CommonJS version in Nuxt configuration, which can be necessary when dealing with ESM compatibility issues.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  alias: {
    'sample-library': 'sample-library/dist/sample-library.cjs.js'
  }
})

----------------------------------------

TITLE: Configuring prerendering using routeRules in Nuxt
DESCRIPTION: Demonstrates how to use routeRules in the Nuxt configuration to specify prerendering behavior for different routes.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  routeRules: {
    "/rss.xml": { prerender: true },
    "/this-DOES-NOT-get-prerendered": { prerender: false },
    "/blog/**": { prerender: true },
  },
});

----------------------------------------

TITLE: Example Usage of addImportsSources in Elk Module
DESCRIPTION: Example showing how to use addImportsSources to auto-import multiple functions from the h3 package in a Nuxt module.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, addImportsSources } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    addImportsSources({
      from: 'h3',
      imports: ['defineEventHandler', 'getQuery', 'getRouterParams', 'readBody', 'sendRedirect'] as Array<keyof typeof import('h3')>,
    })
  }
})

----------------------------------------

TITLE: Removing Manual Composition API Registration in JavaScript
DESCRIPTION: Remove the plugin where you manually register the Composition API, as Nuxt Bridge will handle this automatically.

LANGUAGE: diff
CODE:
- import Vue from 'vue'
- import VueCompositionApi from '@vue/composition-api'
-
- Vue.use(VueCompositionApi)

----------------------------------------

TITLE: Running Nuxt Test Suite
DESCRIPTION: Command to execute the full test suite for the Nuxt project to ensure all tests pass before submitting a pull request.

LANGUAGE: bash
CODE:
pnpm test

----------------------------------------

TITLE: Preloading Components with Nuxt.js
DESCRIPTION: Demonstrates how to preload individual or multiple globally registered components using the preloadComponents utility. The function accepts either a single component name or an array of component names in PascalCase format. Note that this functionality only works on the client side and has no effect on the server.

LANGUAGE: javascript
CODE:
await preloadComponents('MyGlobalComponent')

await preloadComponents(['MyGlobalComponent1', 'MyGlobalComponent2'])

----------------------------------------

TITLE: Anonymous Global Route Middleware
DESCRIPTION: Implementation of a global route middleware using the direct function approach, which automatically applies to every route change.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  addRouteMiddleware((to, from) => {
    console.log('anonymous global middleware that runs on every route change')
  })
})

----------------------------------------

TITLE: Enabling Component Name Normalization in Nuxt
DESCRIPTION: Ensures that auto-generated Vue component names match the full component name used for auto-importing.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    normalizeComponentNames: true
  }
})

----------------------------------------

TITLE: Updating Package Scripts for Static Target (JSON)
DESCRIPTION: Updates the package.json scripts for projects using a static target. The build script is changed to use 'nuxi generate' for static site generation.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "nuxi generate"
  }
}

----------------------------------------

TITLE: Adding Webpack Plugin in Nuxt-ESLint Module
DESCRIPTION: Example of using addWebpackPlugin to add EslintWebpackPlugin to the Webpack configuration in a Nuxt-ESLint module, with custom options.

LANGUAGE: typescript
CODE:
import EslintWebpackPlugin from 'eslint-webpack-plugin'
import { defineNuxtModule, addWebpackPlugin } from '@nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: 'nuxt-eslint',
    configKey: 'eslint',
  },
  defaults: nuxt => ({
    include: [`${nuxt.options.srcDir}/**/*.{js,jsx,ts,tsx,vue}`],
    lintOnStart: true,
  }),
  setup(options, nuxt) {
    const webpackOptions = {
      ...options,
      context: nuxt.options.srcDir,
      files: options.include,
      lintDirtyModulesOnly: !options.lintOnStart
    }
    addWebpackPlugin(new EslintWebpackPlugin(webpackOptions), { server: false })
  }
})

----------------------------------------

TITLE: Configuring Nuxt Bridge with TypeScript
DESCRIPTION: Configuration setup for enabling TypeScript support in Nuxt Bridge. This snippet shows how to define the Nuxt configuration with TypeScript and Nitro bridge settings.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: {
    typescript: true,
    nitro: false // If migration to Nitro is complete, set to true
  }
})

----------------------------------------

TITLE: Enabling Layouts in Nuxt app.vue
DESCRIPTION: This snippet shows how to enable layouts by adding the NuxtLayout component to the app.vue file. It wraps the NuxtPage component to apply layouts to all pages.

LANGUAGE: vue
CODE:
<template>
  <NuxtLayout>
    <NuxtPage />
  </NuxtLayout>
</template>

----------------------------------------

TITLE: Enabling View Transition API in Nuxt
DESCRIPTION: Enables View Transition API integration with the client-side router.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    viewTransition: true
  }
})

----------------------------------------

TITLE: Checking Nuxt Version Compatibility Type Definition
DESCRIPTION: Type definition for checkNuxtCompatibility function that verifies if current Nuxt version meets specified constraints. Returns an array of compatibility issues if constraints aren't met.

LANGUAGE: typescript
CODE:
async function checkNuxtCompatibility(
  constraints: NuxtCompatibility,
  nuxt?: Nuxt
): Promise<NuxtCompatibilityIssues>;

interface NuxtCompatibility {
  nuxt?: string;
  bridge?: boolean;
  builder?: {
    // Set `false` if your module is not compatible with a builder
    // or a semver-compatible string version constraint
    vite?: false | string;
    webpack?: false | string;
  };
}

interface NuxtCompatibilityIssue {
  name: string;
  message: string;
}

interface NuxtCompatibilityIssues extends Array<NuxtCompatibilityIssue> {
  toString(): string;
}

----------------------------------------

TITLE: Setting Compatibility Version for Nuxt 4
DESCRIPTION: This snippet shows how to set the compatibilityVersion to 4 in Nuxt configuration. It enables early access to Nuxt 4 features and flags, while allowing granular re-enabling of Nuxt v3 behavior for testing purposes.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  future: {
    compatibilityVersion: 4,
  },
  // To re-enable _all_ Nuxt v3 behaviour, set the following options:
  srcDir: '.',
  dir: {
    app: 'app'
  },
  experimental: {
    scanPageMeta: 'after-resolve',
    sharedPrerenderData: false,
    compileTemplate: true,
    resetAsyncDataToUndefined: true,
    templateUtils: true,
    relativeWatchPaths: true,
    normalizeComponentNames: false
    defaults: {
      useAsyncData: {
        deep: true
      }
    }
  },
  features: {
    inlineStyles: true
  },
  unhead: {
    renderSSRHeadOptions: {
      omitLineBreaks: false
    }
  }
})

----------------------------------------

TITLE: Configuring inlineStyles in Nuxt
DESCRIPTION: This snippet shows how to configure the inlineStyles feature in Nuxt. It allows inlining of styles when rendering HTML, currently available only when using Vite. A function can be passed to determine inlining based on component paths.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  features: {
    inlineStyles: false // or a function to determine inlining
  }
})

----------------------------------------

TITLE: Providing Helpers through Plugins
DESCRIPTION: Demonstrates how to provide helper functions through plugins that can be accessed globally in the application.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  return {
    provide: {
      hello: (msg: string) => `Hello ${msg}!`
    }
  }
})

----------------------------------------

TITLE: Extending Vite Configuration in Nuxt-Appwrite Module
DESCRIPTION: Example of using extendViteConfig to add 'cross-fetch' to the optimizeDeps.include array in the Vite configuration for a Nuxt-Appwrite module.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, extendViteConfig } from '@nuxt/kit'

export default defineNuxtModule({
  setup() {
    extendViteConfig((config) => {
      config.optimizeDeps = config.optimizeDeps || {}
      config.optimizeDeps.include = config.optimizeDeps.include || []
      config.optimizeDeps.include.push('cross-fetch')
    })
  }
})

----------------------------------------

TITLE: Configuring Nuxt Bridge in nuxt.config
DESCRIPTION: TypeScript configuration file showing how to set up Nuxt Bridge with the defineNuxtConfig helper

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: false
})

----------------------------------------

TITLE: Defining Nuxt Route Middleware in TypeScript
DESCRIPTION: Shows how to create a Nuxt route middleware using the new format in Nuxt Bridge. This middleware redirects all paths to the root path.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to) => {
  if (to.path !== '/') {
    return navigateTo('/')
  }
})

----------------------------------------

TITLE: Migrating Nuxt Configuration to defineNuxtConfig
DESCRIPTION: Update the Nuxt configuration file to use the new defineNuxtConfig function, which provides a typed configuration schema.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  // ...
})

----------------------------------------

TITLE: RefreshCookie TypeScript Function Signature
DESCRIPTION: TypeScript type definition for the refreshCookie function, showing it accepts a string parameter for the cookie name and returns void.

LANGUAGE: typescript
CODE:
refreshCookie(name: string): void

----------------------------------------

TITLE: Opting Out of Nuxt Nightly Release Channel in package.json
DESCRIPTION: Revert the nuxt dependency in package.json back to the stable release. This is used when you want to switch back to the official release version after testing the nightly builds.

LANGUAGE: diff
CODE:
{
  "devDependencies": {
--    "nuxt": "npm:nuxt-nightly@3x"
++    "nuxt": "^3.0.0"
  }
}

----------------------------------------

TITLE: Executing Nuxi Cleanup Command in Bash
DESCRIPTION: This command runs the 'nuxi cleanup' operation to remove common generated Nuxt files and caches. It can specify a root directory and has an option to set the working directory.

LANGUAGE: bash
CODE:
npx nuxi cleanup [ROOTDIR] [--cwd=<directory>]

----------------------------------------

TITLE: TypeScript Function Signature for useLogger
DESCRIPTION: Type definition for the useLogger function that returns a consola logger instance. The function accepts an optional tag parameter for message prefixing and optional consola configuration options.

LANGUAGE: typescript
CODE:
function useLogger (tag?: string, options?: Partial<ConsolaOptions>): ConsolaInstance

----------------------------------------

TITLE: Creating a New Branch for Nuxt Development
DESCRIPTION: Git command to create and checkout a new branch for working on Nuxt contributions.

LANGUAGE: bash
CODE:
git checkout -b my-new-branch

----------------------------------------

TITLE: Configuring useLoadingIndicator with Custom Parameters in Vue
DESCRIPTION: Example showing how to initialize the useLoadingIndicator composable with custom duration, throttle, and progress calculation function. The estimatedProgress parameter demonstrates the default calculation method for progress visualization.

LANGUAGE: vue
CODE:
<script setup lang="ts">
  const { progress, isLoading, start, finish, clear } = useLoadingIndicator({
    duration: 2000,
    throttle: 200,
    // This is how progress is calculated by default
    estimatedProgress: (duration, elapsed) => (2 / Math.PI * 100) * Math.atan(elapsed / duration * 100 / 50)
  })
</script>

----------------------------------------

TITLE: Changing Directory to Project Folder
DESCRIPTION: Command to navigate into the newly created Nuxt project directory.

LANGUAGE: bash
CODE:
cd <project-name>

----------------------------------------

TITLE: Migrating RouteNameSplitter to Pages:Extend Hook
DESCRIPTION: Implement custom route name generation logic using the pages:extend hook to replace the router.routeNameSplitter configuration.

LANGUAGE: typescript
CODE:
import { createResolver } from '@nuxt/kit'

export default defineNuxtConfig({
  hooks: {
    'pages:extend' (routes) {
      const routeNameSplitter = '/'
      const root = createResolver(import.meta.url).resolve('./pages')

      function updateName(routes) {
        if (!routes) return

        for (const route of routes) {
          const relativePath = route.file.substring(root.length + 1)
          route.name = relativePath.slice(0, -4).replace(/\/index$/, '').replace(/\//g, routeNameSplitter)

          updateName(route.children)
        }
      }
      updateName(routes)
    },
  },
})

----------------------------------------

TITLE: Migrating defineNuxtPlugin in JavaScript/TypeScript
DESCRIPTION: Remove the defineNuxtPlugin wrapper and update the plugin function for TypeScript support using @nuxt/types.

LANGUAGE: diff
CODE:
- import { defineNuxtPlugin } from '@nuxtjs/composition-api'
- export default defineNuxtPlugin((ctx, inject) => {})
+ export default (ctx, inject) => {}

LANGUAGE: typescript
CODE:
import type { Plugin } from '@nuxt/types'

export default <Plugin> function (ctx, inject) {}

----------------------------------------

TITLE: Importing Nuxt Kit in CommonJS Environment
DESCRIPTION: This snippet shows a workaround for importing Nuxt Kit in a CommonJS environment using dynamic import. It's necessary because Nuxt Kit is an ESM-only package and cannot be required directly.

LANGUAGE: js
CODE:
async function main() {
  const kit = await import('@nuxt/kit')
}
main()

----------------------------------------

TITLE: Adding a page in Nuxt
DESCRIPTION: These snippets demonstrate how to add new pages to a Nuxt project. The first example adds a simple 'about' page, while the second example adds a dynamic page with a route parameter.

LANGUAGE: bash
CODE:
npx nuxi add page about

LANGUAGE: bash
CODE:
npx nuxi add page "category/[id]"

----------------------------------------

TITLE: Defining resolveAlias Function Type in TypeScript
DESCRIPTION: Type definition for the resolveAlias function that resolves path aliases respecting Nuxt alias options.

LANGUAGE: typescript
CODE:
function resolveAlias (path: string, alias?: Record<string, string>): string

----------------------------------------

TITLE: Activating Passive Development System for Nuxt
DESCRIPTION: Command to activate the passive development system in the Nuxt project environment.

LANGUAGE: bash
CODE:
pnpm dev:prepare

----------------------------------------

TITLE: Starting Nuxt Development Server - Bash Command
DESCRIPTION: Command to start a Nuxt.js development server with hot module replacement. Supports various configuration options including port, host, HTTPS, environment settings, and logging levels. The server starts by default at http://localhost:3000.

LANGUAGE: bash
CODE:
npx nuxi dev [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--dotenv] [--envName] [--no-clear] [--no-fork] [-p, --port] [-h, --host] [--clipboard] [-o, --open] [--https] [--publicURL] [--qr] [--public] [--tunnel] [--sslCert] [--sslKey]

----------------------------------------

TITLE: Installing Pinia for State Management in Nuxt 3
DESCRIPTION: Install the @pinia/nuxt module to use Pinia for state management in Nuxt 3 applications.

LANGUAGE: bash
CODE:
yarn add pinia @pinia/nuxt

----------------------------------------

TITLE: Installing a Nuxt Module Programmatically
DESCRIPTION: This snippet shows the type definition and an example of using the installModule function to programmatically install a Nuxt module with custom options.

LANGUAGE: typescript
CODE:
async function installModule (moduleToInstall: string | NuxtModule, inlineOptions?: any, nuxt?: Nuxt)

LANGUAGE: typescript
CODE:
import { defineNuxtModule, installModule } from '@nuxt/kit'

export default defineNuxtModule({  
  async setup (options, nuxt) {
    // will install @nuxtjs/fontaine with Roboto font and Impact fallback
    await installModule('@nuxtjs/fontaine', {
      // module configuration
      fonts: [
        {
          family: 'Roboto',
          fallbacks: ['Impact'],
          fallbackName: 'fallback-a',
        }
      ]
    })
  }
})

----------------------------------------

TITLE: Replacing useContext with useNuxtApp in Nuxt Bridge
DESCRIPTION: Demonstrates how to access injected helpers using useNuxtApp instead of useContext from @nuxtjs/composition-api.

LANGUAGE: diff
CODE:
- import { useContext } from '@nuxtjs/composition-api`
+ const { $axios } = useNuxtApp()

----------------------------------------

TITLE: Defining resolvePath Function Type in TypeScript
DESCRIPTION: Type definition for the resolvePath function that resolves full paths to files/directories respecting Nuxt aliases and extensions.

LANGUAGE: typescript
CODE:
async function resolvePath (path: string, options?: ResolvePathOptions): Promise<string>

----------------------------------------

TITLE: VSCode ESLint Configuration
DESCRIPTION: VS Code settings.json configuration for enabling ESLint auto-fix functionality on save

LANGUAGE: json
CODE:
{
  "editor.codeActionsOnSave": {
    "source.fixAll": "never",
    "source.fixAll.eslint": "explicit"
  }
}

----------------------------------------

TITLE: Allowed Attributes for useHeadSafe in TypeScript
DESCRIPTION: Defines the whitelist of allowed attributes for various HTML elements when using useHeadSafe. This ensures that only safe attributes are set in the head.

LANGUAGE: typescript
CODE:
const WhitelistAttributes = {
  htmlAttrs: ['class', 'style', 'lang', 'dir'],
  bodyAttrs: ['class', 'style'],
  meta: ['name', 'property', 'charset', 'content', 'media'],
  noscript: ['textContent'],
  style: ['media', 'textContent', 'nonce', 'title', 'blocking'],
  script: ['type', 'textContent', 'nonce', 'blocking'],
  link: ['color', 'crossorigin', 'fetchpriority', 'href', 'hreflang', 'imagesrcset', 'imagesizes', 'integrity', 'media', 'referrerpolicy', 'rel', 'sizes', 'type'],
}

----------------------------------------

TITLE: Migrating from CommonJS to ES Modules Export Syntax
DESCRIPTION: Demonstrates how to migrate from CommonJS export syntax to ES Modules export syntax, which is necessary when converting a library to use native ES Modules.

LANGUAGE: javascript
CODE:
// Before
module.exports = ...

exports.hello = ...

// After
export default ...

export const hello = ...

----------------------------------------

TITLE: Using Meta Components - Nuxt 2 vs Nuxt 3
DESCRIPTION: Shows how to use Nuxt's meta components approach instead of the programmatic head method. Demonstrates the transition from Nuxt 2's head() method to Nuxt 3's component-based meta tags.

LANGUAGE: vue
CODE:
<script>
export default {
  head () {
    return {
      title: 'My App',
      meta: [{
        hid: 'description',
        name: 'description',
        content: 'My App Description'
      }]
    }
  }
}
</script>

LANGUAGE: vue
CODE:
<template>
  <div>
    <Head>
      <Title>My App</Title>
      <Meta name="description" content="My app description"/>
    </Head>
    <!-- -->
  </div>
</template>

----------------------------------------

TITLE: Creating a Pinia Plugin for Global Store Access
DESCRIPTION: Create a Nuxt 3 plugin to provide global access to a Pinia store.

LANGUAGE: typescript
CODE:
import { useMainStore } from '~/store'

export default defineNuxtPlugin(({ $pinia }) => {
  return {
    provide: {
      store: useMainStore($pinia)
    }
  }
})

----------------------------------------

TITLE: Configuring Nuxt Module for Testing
DESCRIPTION: Configuration to add @nuxt/test-utils/module to Nuxt config for enabling Vitest integration.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  modules: [
    '@nuxt/test-utils/module'
  ]
})

----------------------------------------

TITLE: Using updateTemplates in a Nuxt Module
DESCRIPTION: Example of using updateTemplates in a Nuxt module to regenerate route templates when pages change. The function is called within a builder:watch hook to handle file changes.

LANGUAGE: typescript
CODE:
// https://github.com/nuxt/nuxt
import { defineNuxtModule, updateTemplates } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options, nuxt) {
    // watch and rebuild routes template list when one of the pages changes
    nuxt.hook('builder:watch', async (event, relativePath) => {
      if (event === 'change') { return }

      const path = resolve(nuxt.options.srcDir, relativePath)
      if (updateTemplatePaths.some(dir => path.startsWith(dir))) {
        await updateTemplates({
          filter: template => template.filename === 'routes.mjs'
        })
      }
    })
  }
})

----------------------------------------

TITLE: Executing Nuxt Upgrade Command
DESCRIPTION: Command syntax for upgrading Nuxt to the latest version using nuxi CLI. Supports specifying root directory, working directory, log level, force upgrade, and release channel options.

LANGUAGE: bash
CODE:
npx nuxi upgrade [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [-f, --force] [-ch, --channel=<stable|nightly>]

----------------------------------------

TITLE: Implementing SEO Meta Tags with useSeoMeta Composable
DESCRIPTION: This snippet demonstrates the use of useSeoMeta composable for defining SEO meta tags with type safety. It includes setting various Open Graph and Twitter Card meta tags.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useSeoMeta({
  title: 'My Amazing Site',
  ogTitle: 'My Amazing Site',
  description: 'This is my amazing site, let me tell you all about it.',
  ogDescription: 'This is my amazing site, let me tell you all about it.',
  ogImage: 'https://example.com/image.png',
  twitterCard: 'summary_large_image',
})
</script>

----------------------------------------

TITLE: Options API Meta Tags in Nuxt 3
DESCRIPTION: Demonstrates how to manage meta tags using the Options API in Nuxt 3 with defineNuxtComponent. This approach is specifically for developers who prefer using the Options API over the Composition API.

LANGUAGE: vue
CODE:
<script>
// if using options API `head` method you must use `defineNuxtComponent`
export default defineNuxtComponent({
  head (nuxtApp) {
    // `head` receives the nuxt app but cannot access the component instance
    return {
      meta: [{
        name: 'description',
        content: 'This is my page description.'
      }]
    }
  }
})
</script>

----------------------------------------

TITLE: Migrating scrollToTop option to definePageMeta in Nuxt 3
DESCRIPTION: Demonstrates how to migrate the scrollToTop option from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. This option controls the scroll behavior when navigating to the page.

LANGUAGE: vue
CODE:
<script>
export default {
  scrollToTop: false
}
</script>

LANGUAGE: vue
CODE:
<script setup>
definePageMeta({
  scrollToTop: false
})
</script>

----------------------------------------

TITLE: Launching Nuxt Production Server in Node.js
DESCRIPTION: Command to start the Nuxt production server after building the application. It uses the generated entry point to launch a Node.js server listening on port 3000 by default.

LANGUAGE: bash
CODE:
node .output/server/index.mjs

----------------------------------------

TITLE: Updating Runtime Config in TypeScript with updateRuntimeConfig
DESCRIPTION: A function that merges new configuration with existing runtime configuration. When Nitro is initialized, it triggers an HMR event to reload the runtime config. Takes a configuration object and returns void or a Promise.

LANGUAGE: typescript
CODE:
function updateRuntimeConfig (config: Record<string, unknown>): void | Promise<void>

----------------------------------------

TITLE: Authorization Middleware Implementation with useRequestHeader in Nuxt
DESCRIPTION: Route middleware implementation that checks for an authorization header and redirects unauthorized users. Uses useRequestHeader to access the authorization header and navigateTo for redirection.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  if (!useRequestHeader('authorization')) {
    return navigateTo('/not-authorized')
  }
})

----------------------------------------

TITLE: Complete Preview Mode Vue Component Example
DESCRIPTION: Full example of a Vue component implementing preview mode with conditional rendering and state management.

LANGUAGE: vue
CODE:
<script setup>
const { enabled, state } = usePreviewMode()

const { data } = await useFetch('/api/preview', {
  query: {
    apiKey: state.token
  }
})
</script>

<template>
  <div>
    Some base content
    <p v-if="enabled">
      Only preview content: {{ state.token }}
      <br>
      <button @click="enabled = false">
        disable preview mode
      </button>
    </p>
  </div>
</template>

----------------------------------------

TITLE: Updating NPM Scripts for Nuxt Bridge
DESCRIPTION: Diff showing the required changes to package.json scripts to use nuxt2 command instead of nuxt

LANGUAGE: diff
CODE:
{
  "scripts": {
-   "dev": "nuxt",
+   "dev": "nuxt2",
-   "build": "nuxt build",
+   "build": "nuxt2 build",
-   "start": "nuxt start",
+   "start": "nuxt2 start"
  }
}

----------------------------------------

TITLE: Nested Routes and Page Meta Migration
DESCRIPTION: Demonstrates migration of nested routes and page metadata from Nuxt 2 to Nuxt 3 syntax including transitions and keep-alive props.

LANGUAGE: vue
CODE:
// Nuxt 2
<template>
  <div>
    <NuxtChild keep-alive :keep-alive-props="{ exclude: ['modal'] }" :nuxt-child-key="$route.slug" />
  </div>
</template>

<script>
export default {
  transition: 'page' // or { name: 'page' }
}
</script>

LANGUAGE: vue
CODE:
// Nuxt 3
<template>
  <div>
    <NuxtPage />
  </div>
</template>

<script setup lang="ts">
definePageMeta({
  key: route => route.slug,
  transition: {
    name: 'page',
  },
  keepalive: {
    exclude: ['modal']
  },
})
</script>

----------------------------------------

TITLE: Configuring Nuxt with .nuxtrc File in Bash
DESCRIPTION: This snippet demonstrates how to use the .nuxtrc file to configure various Nuxt settings including SSR, devtools, and modules. It uses a flat syntax for easy configuration.

LANGUAGE: bash
CODE:
# Disable SSR
ssr=false

# Configuration for `@nuxt/devtools`
devtools.enabled=true

# Add Nuxt modules
modules[]=@nuxt/image
modules[]=nuxt-security

----------------------------------------

TITLE: Type Definition for addImports Function
DESCRIPTION: TypeScript interface definition for the addImports function and its parameters. This function adds specific imports to make them available throughout a Nuxt application without manual importing.

LANGUAGE: typescript
CODE:
function addImports (imports: Import | Import[]): void

interface Import {
  from: string
  priority?: number
  disabled?: boolean
  meta?: {
    description?: string
    docsUrl?: string
    [key: string]: any
  }
  type?: boolean
  typeFrom?: string
  name: string
  as?: string
}

----------------------------------------

TITLE: Using tryUseNuxt to Safely Access Nuxt Configuration
DESCRIPTION: This example shows how to use tryUseNuxt to safely access the Nuxt instance and retrieve site configuration, handling cases where Nuxt might not be available.

LANGUAGE: typescript
CODE:
import { tryUseNuxt } from '@nuxt/kit'

interface SiteConfig {
  title: string
}

export const requireSiteConfig = (): SiteConfig => {
  const nuxt = tryUseNuxt()
  if (!nuxt) {
    return { title: null }
  }
  return nuxt.options.siteConfig
}

----------------------------------------

TITLE: Retrieving Authorization Header with useRequestHeader in TypeScript
DESCRIPTION: Basic example of using useRequestHeader to access the authorization header from an incoming request. Note that this will return undefined when running in the browser.

LANGUAGE: typescript
CODE:
const authorization = useRequestHeader('authorization')

----------------------------------------

TITLE: Async State Initialization in Nuxt
DESCRIPTION: Shows how to initialize state with asynchronous data using callOnce util in the app.vue component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const websiteConfig = useState('config')

await callOnce(async () => {
  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')
})
</script>

----------------------------------------

TITLE: Programmatic Navigation Migration
DESCRIPTION: Shows how to update programmatic navigation from Nuxt 2's router push to Nuxt 3's navigateTo utility.

LANGUAGE: vue
CODE:
// Nuxt 2
<script>
export default {
  methods: {
    navigate(){
      this.$router.push({
        path: '/search',
        query: {
          name: 'first name',
          type: '1'
        }
      })
    }
  }
}
</script>

LANGUAGE: vue
CODE:
// Nuxt 3
<script setup lang="ts">
function navigate(){
  return navigateTo({
    path: '/search',
    query: {
      name: 'first name',
      type: '1'
    }
  })
}
</script>

----------------------------------------

TITLE: Using Auto-imported ref in Vue Component
DESCRIPTION: Demonstrates usage of the auto-imported 'ref' function from Vue in a Nuxt component. The 'ref' function is used to create a reactive reference without explicit import.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const count = ref(1) // ref is auto-imported
</script>

----------------------------------------

TITLE: Implementing API Route Handler
DESCRIPTION: Defines the handler function for the '/api/hello' API endpoint that returns a simple JSON object with {hello: 'world'}.

LANGUAGE: typescript
CODE:
export default defineEventHandler(() => {
  return { hello: 'world' }
})

----------------------------------------

TITLE: Example Usage of addImports in Storyblok Module
DESCRIPTION: Practical example showing how to use addImports in a Nuxt module to auto-import Storyblok-related functions.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, addImports, createResolver } from '@nuxt/kit'

export default defineNuxtModule({
  setup(options, nuxt) {
    const names = [
      "useStoryblok",
      "useStoryblokApi",
      "useStoryblokBridge",
      "renderRichText",
      "RichTextSchema"
    ];

    names.forEach((name) =>
      addImports({ name, as: name, from: "@storyblok/vue" })
    );
  }
})

----------------------------------------

TITLE: Basic Usage of usePreviewMode in Nuxt
DESCRIPTION: Basic implementation of the usePreviewMode composable that returns enabled status and state object.

LANGUAGE: javascript
CODE:
const { enabled, state } = usePreviewMode()

----------------------------------------

TITLE: Custom Callback Implementation in Preview Mode
DESCRIPTION: Example of implementing custom enable and disable callbacks for preview mode functionality.

LANGUAGE: javascript
CODE:
const { enabled, state } = usePreviewMode({
  onEnable: () => {
    console.log('preview mode has been enabled')
  },
  onDisable: () => {
    console.log('preview mode has been disabled')
  }
})

----------------------------------------

TITLE: Read More Component Configuration
DESCRIPTION: Markdown component configuration for a read more link that directs to the Nuxt GitHub organization page.

LANGUAGE: markdown
CODE:
::read-more{icon="i-simple-icons-github" color="gray" to="https://github.com/nuxt" target="_blank"}
Discover the `nuxt` organization on GitHub
::

----------------------------------------

TITLE: Accessing Runtime Config in Vue Component (Vue 3 + TypeScript)
DESCRIPTION: Demonstrates how to use the useRuntimeConfig composable in a Vue component to access public runtime configuration values. This replaces the previous use of process.env in Nuxt 2.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const config = useRuntimeConfig()

// instead of process.env you will now access config.public.apiBase
console.log(config.public.apiBase)
</script>

----------------------------------------

TITLE: Replacing onGlobalSetup with defineNuxtPlugin in Nuxt Bridge
DESCRIPTION: Demonstrates how to replace onGlobalSetup with defineNuxtPlugin and the vue:setup hook in Nuxt Bridge.

LANGUAGE: diff
CODE:
- import { onGlobalSetup } from '@nuxtjs/composition-api'

- export default () => {
-   onGlobalSetup(() => {
+ export default defineNuxtPlugin((nuxtApp) => {
+   nuxtApp.hook('vue:setup', () => {
      // ...
    })
- }
+ })

----------------------------------------

TITLE: Using Fallback Slot with ClientOnly in Vue
DESCRIPTION: Shows how to use the fallback slot of the <ClientOnly> component to provide content for server-side rendering and initial client display.

LANGUAGE: vue
CODE:
<template>
  <div>
    <Sidebar />
    <!-- This renders the "span" element on the server side -->
    <ClientOnly fallbackTag="span">
      <!-- this component will only be rendered on client side -->
      <Comments />
      <template #fallback>
        <!-- this will be rendered on server side -->
        <p>Loading comments...</p>
      </template>
    </ClientOnly>
  </div>
</template>

----------------------------------------

TITLE: Loading Nuxt Programmatically TypeScript Interface
DESCRIPTION: TypeScript interface definition for loadNuxt function that loads Nuxt programmatically. Includes LoadNuxtOptions interface with dev and ready parameters.

LANGUAGE: typescript
CODE:
async function loadNuxt (loadOptions?: LoadNuxtOptions): Promise<Nuxt>

interface LoadNuxtOptions extends LoadNuxtConfigOptions {
  dev?: boolean
  ready?: boolean
}

----------------------------------------

TITLE: Implementing Optimistic Updates for Todos in Vue
DESCRIPTION: Shows how to implement optimistic updates for adding a new todo, including handling success and failure scenarios.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const newTodo = ref('')
let previousTodos = []

// Access to the cached value of useAsyncData in todos.vue
const { data: todos } = useNuxtData('todos')

async function addTodo () {
  return $fetch('/api/addTodo', {
    method: 'post',
    body: {
      todo: newTodo.value
    },
    onRequest () {
      // Store the previously cached value to restore if fetch fails.
      previousTodos = todos.value

      // Optimistically update the todos.
      todos.value = [...todos.value, newTodo.value]
    },
    onResponseError () {
      // Rollback the data if the request failed.
      todos.value = previousTodos
    },
    async onResponse () {
      // Invalidate todos in the background if the request succeeded.
      await refreshNuxtData('todos')
    }
  })
}
</script>

----------------------------------------

TITLE: Implementing Page Transitions in Vue Component
DESCRIPTION: Add CSS transitions to the app.vue file to apply transitions between pages. This example fades and blurs pages during transitions.

LANGUAGE: vue
CODE:
<template>
  <NuxtPage />
</template>

<style>
.page-enter-active,
.page-leave-active {
  transition: all 0.4s;
}
.page-enter-from,
.page-leave-to {
  opacity: 0;
  filter: blur(1rem);
}
</style>

----------------------------------------

TITLE: Updating Runtime Config Access in Vue Components
DESCRIPTION: Demonstrates how to update Vue component code to access public runtime config values through the new 'public' property namespace in Nuxt 3.

LANGUAGE: vue
CODE:
// MyWidget.vue
- <div>Website: {{ $config.websiteURL }}</div>
+ <div>Website: {{ $config.public.websiteURL }}</div>

----------------------------------------

TITLE: Layout Migration in Vue Template
DESCRIPTION: Shows how to update layout templates by replacing the Nuxt component with a slot for Nuxt 3 compatibility.

LANGUAGE: diff
CODE:
[layouts/custom.vue]
  <template>
    <div id="app-layout">
      <main>
-       <Nuxt />
+       <slot />
      </main>
    </div>
  </template>

----------------------------------------

TITLE: Resulting HTML Output from NuxtImg Component
DESCRIPTION: This shows the HTML output generated by the <NuxtImg> component, which is a native <img> tag with the specified attributes.

LANGUAGE: html
CODE:
<img src="/nuxt-icon.png" />

----------------------------------------

TITLE: Force Starting Loading Indicator in Vue
DESCRIPTION: Demonstrates how to force start the loading indicator by setting progress to 0 and immediately showing the loading state using the force option.

LANGUAGE: vue
CODE:
<script setup lang="ts">
  const { start, set } = useLoadingIndicator()
  // same as set(0, { force: true })
  // set the progress to 0, and show loading immediately
  start({ force: true })
</script>

----------------------------------------

TITLE: TypeScript Definition for useNuxtData
DESCRIPTION: Provides the TypeScript type definition for the useNuxtData composable, showing its generic type parameter and return value structure.

LANGUAGE: typescript
CODE:
useNuxtData<DataT = any> (key: string): { data: Ref<DataT | null> }

----------------------------------------

TITLE: Configuring Nitro in Nuxt Bridge (TypeScript)
DESCRIPTION: Updates the Nuxt configuration to enable Nitro through Nuxt Bridge. This snippet defines the Nuxt config using the bridge-provided function and sets the nitro option to true.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: {
    nitro: true
  }
})

----------------------------------------

TITLE: Disabling Vue Server Renderer in Nuxt
DESCRIPTION: Disables the Vue server renderer endpoint within Nitro.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    noVueServer: true
  }
})

----------------------------------------

TITLE: Installing Nuxt Image Module with Terminal Command
DESCRIPTION: This command installs and enables the Nuxt Image module, which is required to use the <NuxtImg> component.

LANGUAGE: bash
CODE:
npx nuxi@latest module add image

----------------------------------------

TITLE: Type Signature for useHydration Composable in TypeScript
DESCRIPTION: Type definition showing the signature of the useHydration composable. It accepts a generic type T, requires a string key for identification, a getter function for initial data, and a setter function to receive data on the client side.

LANGUAGE: typescript
CODE:
useHydration <T> (key: string, get: () => T, set: (value: T) => void) => {}

----------------------------------------

TITLE: Updating Package Scripts for Server Target (JSON)
DESCRIPTION: Updates the package.json scripts for projects using a server target. The build script uses 'nuxi build' and the start script uses 'nuxi preview' for server-side rendering.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "nuxi build",
    "start": "nuxi preview"
  }
}

----------------------------------------

TITLE: Accessing Runtime Config in Server-side API (TypeScript)
DESCRIPTION: Shows how to use useRuntimeConfig in a server-side API route to access both private and public configuration values. This approach ensures secure handling of sensitive information on the server.

LANGUAGE: typescript
CODE:
export default defineEventhandler((event) => {
  const config = useRuntimeConfig(event)
  // In server, you can now access config.apiSecret, in addition to config.public
  console.log(config.apiSecret)
  console.log(config.public.apiBase)
})

----------------------------------------

TITLE: Implementing NuxtLoadingIndicator in app.vue
DESCRIPTION: Example showing how to add the NuxtLoadingIndicator component to the app.vue file or layouts directory. The component should be placed alongside NuxtLayout and NuxtPage components.

LANGUAGE: vue
CODE:
<template>
  <NuxtLoadingIndicator />
  <NuxtLayout>
    <NuxtPage />
  </NuxtLayout>
</template>

----------------------------------------

TITLE: Remote NuxtIsland Component
DESCRIPTION: Example of loading a remote island component with the required configuration and safety warnings.

LANGUAGE: vue
CODE:
<NuxtIsland
  name="RemoteComponent"
  source="https://remote-source.com"
  :dangerouslyLoadClientComponents="true"
/>

----------------------------------------

TITLE: Fetching Posts with useFetch in Vue
DESCRIPTION: Demonstrates how to fetch posts using useFetch with a specific key for later access.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// We can access same data later using 'posts' key
const { data } = await useFetch('/api/posts', { key: 'posts' })
</script>

----------------------------------------

TITLE: Migrating Router Base Configuration in Nuxt
DESCRIPTION: Shows how to migrate the router.base configuration to the new app.baseURL format in Nuxt Bridge.

LANGUAGE: diff
CODE:
export default defineNuxtConfig({
- router: {
-   base: '/my-app/'
- }
+ app: {
+   baseURL: '/my-app/'
+ }
})

----------------------------------------

TITLE: Configuring Global Transition Settings in Nuxt
DESCRIPTION: Customize default transition names and properties globally in the Nuxt configuration file. This example sets custom names and modes for both page and layout transitions.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    pageTransition: {
      name: 'fade',
      mode: 'out-in' // default
    },
    layoutTransition: {
      name: 'slide',
      mode: 'out-in' // default
    }
  }
})

----------------------------------------

TITLE: Accessing Custom Props in Page Component
DESCRIPTION: This example shows how to access custom props passed to <NuxtPage> in a page component using defineProps.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const props = defineProps<{ foobar: number }>()

console.log(props.foobar) // Outputs: 123
</script>

----------------------------------------

TITLE: Implementing NuxtWelcome Component in Vue
DESCRIPTION: Demonstrates how to use the NuxtWelcome component in a Nuxt.js application's app.vue file. This component provides a default welcome page with links to documentation, source code, and social media.

LANGUAGE: vue
CODE:
<template>
  <NuxtWelcome />
</template>

----------------------------------------

TITLE: Configuring Package Manager with Corepack
DESCRIPTION: Example package.json configuration to specify the required package manager version using Corepack

LANGUAGE: json
CODE:
{
  "packageManager": "pnpm@7.5.0"
}

----------------------------------------

TITLE: Implementing Meta Tags with useHead - Nuxt 2 vs Nuxt 3
DESCRIPTION: Demonstrates the migration from Nuxt 2's head() method to Nuxt 3's useHead composable for managing meta tags. Shows how to handle reactive title and description meta tags in both versions.

LANGUAGE: vue
CODE:
<script>
export default {
  data: () => ({
    title: 'My App',
    description: 'My App Description'
  })
  head () {
    return {
      title: this.title,
      meta: [{
        hid: 'description',
        name: 'description',
        content: this.description
      }]
    }
  }
}
</script>

LANGUAGE: vue
CODE:
<script setup lang="ts">
const title = ref('My App')
const description = ref('My App Description')

// This will be reactive when you change title/description above
useHead({
  title,
  meta: [{
    name: 'description',
    content: description
  }]
})
</script>

----------------------------------------

TITLE: Exposing Methods in Vue Component
DESCRIPTION: This example shows how to expose methods in a Vue component that can be accessed by the parent component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const foo = () => {
  console.log('foo method called')
}

defineExpose({
  foo,
})
</script>

----------------------------------------

TITLE: Prefetch Configuration in Nuxt Config
DESCRIPTION: Configuration options for link prefetching behavior in nuxt.config.ts

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    crossOriginPrefetch: true,
  },
})

----------------------------------------

TITLE: Defining useRuntimeHook Function Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript function signature for the useRuntimeHook composable. It takes a hook name and a callback function as parameters, with types ensuring the correct hook and callback are matched.

LANGUAGE: typescript
CODE:
function useRuntimeHook<THookName extends keyof RuntimeNuxtHooks>(
  name: THookName,
  fn: RuntimeNuxtHooks[THookName] extends HookCallback ? RuntimeNuxtHooks[THookName] : never
): void

----------------------------------------

TITLE: Linting Nuxt Project Code
DESCRIPTION: Command to run ESLint on the Nuxt project to enforce coding standards and identify style issues.

LANGUAGE: bash
CODE:
pnpm lint

----------------------------------------

TITLE: Implementing Authentication Middleware
DESCRIPTION: Client-side middleware implementation to protect routes and handle authentication state

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware(() => {
  const { loggedIn } = useUserSession()

  if (!loggedIn.value) {
    return navigateTo('/login')
  }
})

----------------------------------------

TITLE: Configuring Fallback Content for NuxtClientFallback
DESCRIPTION: Example of setting fallback content and tag for NuxtClientFallback when server-side rendering fails.

LANGUAGE: vue
CODE:
<template>
  <!-- render <span>Hello world</span> server-side if the default slot fails to render -->
  <NuxtClientFallback fallback-tag="span" fallback="Hello world">
    <BrokeInSsr />
  </NuxtClientFallback>
</template>

----------------------------------------

TITLE: Error Layout Implementation
DESCRIPTION: Example of using NuxtLayout with an error layout configuration

LANGUAGE: vue
CODE:
<template>
  <NuxtLayout name="error-layout">
    <NuxtPage />
  </NuxtLayout>
</template>

----------------------------------------

TITLE: Using addTemplate in a Nuxt Module
DESCRIPTION: Example of using addTemplate in a Nuxt module to generate a meta configuration file during build time. The template content is generated dynamically based on module options and Nuxt configuration.

LANGUAGE: typescript
CODE:
// https://github.com/nuxt/bridge
import { addTemplate, defineNuxtModule } from '@nuxt/kit'
import { defu } from 'defu'

export default defineNuxtModule({
  setup(options, nuxt) {
    const globalMeta = defu(nuxt.options.app.head, {
      charset: options.charset,
      viewport: options.viewport
    })

    addTemplate({
      filename: 'meta.config.mjs',
      getContents: () => 'export default ' + JSON.stringify({ globalMeta, mixinKey: 'setup' })
    })
  }
})

----------------------------------------

TITLE: Plugin Runtime Config Implementation
DESCRIPTION: Demonstrates how to access runtime configuration within a Nuxt plugin.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((nuxtApp) => {
  const config = useRuntimeConfig()

  console.log('API base URL:', config.public.apiBase)
});

----------------------------------------

TITLE: Hash Mode Configuration for SPA
DESCRIPTION: Configuration example for enabling hash mode routing in Single Page Applications (SPA) mode.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  ssr: false,
  router: {
    options: {
      hashMode: true
    }
  }
})

----------------------------------------

TITLE: Accessing Custom Props via useAttrs in Vue
DESCRIPTION: This snippet demonstrates how to access custom props passed to <NuxtPage> using useAttrs when props are not defined with defineProps.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const attrs = useAttrs()
console.log(attrs.foobar) // Outputs: 123
</script>

----------------------------------------

TITLE: Using onPrehydrate Hook in Vue Component
DESCRIPTION: Demonstrates different ways to use the onPrehydrate hook in a Vue component. Shows how to access window object, manipulate DOM elements, and handle prehydration IDs before Nuxt hydrates the page.

LANGUAGE: vue
CODE:
<script setup lang="ts">
declare const window: Window
// onPrehydrate is guaranteed to run before Nuxt hydrates
onPrehydrate(() => {
  console.log(window)
})

// As long as it only has one root node, you can access the element
onPrehydrate((el) => {
  console.log(el.outerHTML)
  // <div data-v-inspector="app.vue:15:3" data-prehydrate-id=":b3qlvSiBeH:"> Hi there </div>
})

// For _very_ advanced use cases (such as not having a single root node) you
// can access/set `data-prehydrate-id` yourself
const prehydrateId = onPrehydrate((el) => {})
</script>

<template>
  <div>
    Hi there
  </div>
</template>

----------------------------------------

TITLE: Defining addTypeTemplate Function Type in TypeScript
DESCRIPTION: Type definition for the addTypeTemplate function, which renders a given template during build into the project buildDir and registers it as types. It includes interfaces for NuxtTypeTemplate and ResolvedNuxtTemplate.

LANGUAGE: typescript
CODE:
function addTypeTemplate (template: NuxtTypeTemplate | string): ResolvedNuxtTemplate

interface NuxtTemplate {
  src?: string
  filename?: string
  dst?: string
  options?: Record<string, any>
  getContents?: (data: Record<string, any>) => string | Promise<string>
}

interface ResolvedNuxtTemplate {
  src: string
  filename: string
  dst: string
  options: Record<string, any>
  getContents: (data: Record<string, any>) => string | Promise<string>
  write: boolean
  filename: string
  dst: string
}

----------------------------------------

TITLE: Setting Meta Tags with Options API in Vue Component
DESCRIPTION: This snippet demonstrates how to set meta tags using the Options API in a Vue component. It uses the defineNuxtComponent function and the head method to set a description meta tag.

LANGUAGE: vue
CODE:
<script>
// if using options API `head` method you must use `defineNuxtComponent`
export default defineNuxtComponent({
  head (nuxtApp) {
    // `head` receives the nuxt app but cannot access the component instance
    return {
      meta: [{
        name: 'description',
        content: 'This is my page description.'
      }]
    }
  }
})
</script>

----------------------------------------

TITLE: Router Options in Nuxt Config
DESCRIPTION: Shows how to configure router options directly in nuxt.config file for JSON serializable options.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  router: {
    options: {}
  }
})

----------------------------------------

TITLE: Using DevOnly Component with Fallback in Vue Template
DESCRIPTION: Demonstrates how to use the DevOnly component to render development-only content with an optional fallback for production. The example shows integration with LazyDebugBar component and a fallback empty div for maintaining layout structure.

LANGUAGE: vue
CODE:
<template>
  <div>
    <Sidebar />
    <DevOnly>
      <!-- this component will only be rendered during development -->
      <LazyDebugBar />

      <!-- if you ever require to have a replacement during production -->
      <!-- be sure to test these using `nuxt preview` -->
      <template #fallback>
        <div><!-- empty div for flex.justify-between --></div>
      </template>
    </DevOnly>
  </div>
</template>

----------------------------------------

TITLE: Defining createResolver Function Type in TypeScript
DESCRIPTION: Type definition for the createResolver function that creates a resolver relative to a base path.

LANGUAGE: typescript
CODE:
function createResolver (basePath: string | URL): Resolver

interface Resolver {
  resolve (...path: string[]): string
  resolvePath (path: string, options?: ResolvePathOptions): Promise<string>
}

interface ResolvePathOptions {
  cwd?: string
  alias?: Record<string, string>
  extensions?: string[]
}

----------------------------------------

TITLE: Example of Nuxt Pull Request Title
DESCRIPTION: Example of a properly formatted pull request title following conventional commits guidelines for documentation changes.

LANGUAGE: bash
CODE:
docs: update the section about the nuxt.config.ts file

----------------------------------------

TITLE: JetBrains IDEs Debug Configuration for Nuxt
DESCRIPTION: XML configuration for setting up debugging in JetBrains IDEs (IntelliJ IDEA, WebStorm, PhpStorm) for both client and server-side Nuxt code.

LANGUAGE: html
CODE:
<component name="ProjectRunConfigurationManager">
  <configuration default="false" name="client: chrome" type="JavascriptDebugType" uri="http://localhost:3000" useFirstLineBreakpoints="true">
    <method v="2" />
  </configuration>

  <configuration default="false" name="server: nuxt" type="NodeJSConfigurationType" application-parameters="dev" path-to-js-file="$PROJECT_DIR$/node_modules/nuxt/bin/nuxt.mjs" working-dir="$PROJECT_DIR$">
    <method v="2" />
  </configuration>

  <configuration default="false" name="fullstack: nuxt" type="CompoundRunConfigurationType">
    <toRun name="client: chrome" type="JavascriptDebugType" />
    <toRun name="server: nuxt" type="NodeJSConfigurationType" />
    <method v="2" />
  </configuration>
</component>

----------------------------------------

TITLE: Installing @rollup/plugin-yaml Package
DESCRIPTION: Commands to install the @rollup/plugin-yaml package using different package managers.

LANGUAGE: bash
CODE:
npm install @rollup/plugin-yaml

LANGUAGE: bash
CODE:
yarn add @rollup/plugin-yaml

LANGUAGE: bash
CODE:
pnpm add @rollup/plugin-yaml

LANGUAGE: bash
CODE:
bun add @rollup/plugin-yaml

----------------------------------------

TITLE: External Website Linking
DESCRIPTION: Shows how to create links to external websites with automatic rel attributes

LANGUAGE: vue
CODE:
<template>
  <NuxtLink to="https://nuxtjs.org">
    Nuxt website
  </NuxtLink>
</template>

----------------------------------------

TITLE: Resolving Module Files with import.meta.url in Nuxt
DESCRIPTION: Demonstrates how to use import.meta.url with createResolver to handle file paths in Nuxt modules. The example shows setting up a module that registers a component using resolved file paths.

LANGUAGE: typescript
CODE:
import { createResolver } from 'nuxt/kit'

// Resolve relative from the current file
const resolver = createResolver(import.meta.url)

export default defineNuxtModule({
  meta: { name: 'myModule' },
  setup() {
    addComponent({
      name: 'MyModuleComponent',
      // Resolves to '/modules/my-module/components/MyModuleComponent.vue'
      filePath: resolver.resolve('./components/MyModuleComponent.vue')
    })
  }
})

----------------------------------------

TITLE: Basic NuxtIsland Component Usage
DESCRIPTION: Example of using the NuxtIsland component to render a static island component from the components/islands directory.

LANGUAGE: vue
CODE:
<NuxtIsland name="MyIsland" />

----------------------------------------

TITLE: Creating Nuxt Module with Package Managers
DESCRIPTION: Commands to scaffold a new Nuxt module project using different package managers.

LANGUAGE: bash
CODE:
npm create nuxt -t module my-module

LANGUAGE: bash
CODE:
yarn create nuxt -t module my-module

LANGUAGE: bash
CODE:
pnpm create nuxt -t module my-module

LANGUAGE: bash
CODE:
bun create nuxt -t module my-module

----------------------------------------

TITLE: Basic Router Options Configuration
DESCRIPTION: Example of basic router options configuration file setup in Nuxt 3.

LANGUAGE: typescript
CODE:
import type { RouterConfig } from '@nuxt/schema'

export default {
} satisfies RouterConfig

----------------------------------------

TITLE: Initializing Nuxt Layer Project with npm
DESCRIPTION: Command to create a new Nuxt layer project using the nuxt/starter/layer template via npm.

LANGUAGE: bash
CODE:
npm create nuxt --template layer nuxt-layer

----------------------------------------

TITLE: Dynamic Route Parameter Example in Nuxt Vue Component
DESCRIPTION: Demonstrates how to use useRoute composable to access dynamic route parameters and fetch data based on the route slug parameter. The example shows integration with useFetch to make API calls using route parameters.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()
const { data: mountain } = await useFetch(`/api/mountains/${route.params.slug}`)
</script>

<template>
  <div>
    <h1>{{ mountain.title }}</h1>
    <p>{{ mountain.description }}</p>
  </div>
</template>

----------------------------------------

TITLE: Dynamic Route Parameter Example in Nuxt Vue Component
DESCRIPTION: Demonstrates how to use useRoute composable to access dynamic route parameters and fetch data based on the route slug parameter. The example shows integration with useFetch to make API calls using route parameters.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()
const { data: mountain } = await useFetch(`/api/mountains/${route.params.slug}`)
</script>

<template>
  <div>
    <h1>{{ mountain.title }}</h1>
    <p>{{ mountain.description }}</p>
  </div>
</template>

----------------------------------------

TITLE: Type Augmentation for Custom Hooks
DESCRIPTION: TypeScript type declarations for adding custom hooks to Nuxt and Nitro runtime systems.

LANGUAGE: typescript
CODE:
import { HookResult } from "@nuxt/schema";

declare module '#app' {
  interface RuntimeNuxtHooks {
    'your-nuxt-runtime-hook': () => HookResult
  }
  interface NuxtHooks {
    'your-nuxt-hook': () => HookResult
  }
}

declare module 'nitro/types' {
  interface NitroRuntimeHooks {
    'your-nitro-hook': () => void;
  }
}

----------------------------------------

TITLE: Resolving Relative Paths in Nuxt Layer Configuration
DESCRIPTION: Demonstrates how to properly resolve relative paths in a Nuxt layer configuration file using Node.js path utilities.

LANGUAGE: typescript
CODE:
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const currentDir = dirname(fileURLToPath(import.meta.url))

export default defineNuxtConfig({
  css: [
    join(currentDir, './assets/main.css')
  ]
})

----------------------------------------

TITLE: Layout Reference Implementation
DESCRIPTION: Examples showing how to access and use layout references in Nuxt components

LANGUAGE: vue
CODE:
<script setup lang="ts">
const layout = ref()

function logFoo () {
  layout.value.layoutRef.foo()
}
</script>

<template>
  <NuxtLayout ref="layout">
    default layout
  </NuxtLayout>
</template>

LANGUAGE: vue
CODE:
<script setup lang="ts">
const foo = () => console.log('foo')
defineExpose({
  foo
})
</script>

<template>
  <div>
    default layout
    <slot />
  </div>
</template>

----------------------------------------

TITLE: Extending Nuxt Configuration with Remote Sources in TypeScript
DESCRIPTION: Demonstrates various ways to extend Nuxt configuration using remote git repositories as layers, including GitHub, GitLab, and Bitbucket sources.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  extends: [
    'github:username/repoName',        // GitHub Remote Source
    'github:username/repoName/base',   // GitHub Remote Source within /base directory
    'github:username/repoName#dev',    // GitHub Remote Source from dev branch
    'github:username/repoName#v1.0.0', // GitHub Remote Source from v1.0.0 tag
    'gitlab:username/repoName',        // GitLab Remote Source example
    'bitbucket:username/repoName',     // Bitbucket Remote Source example
  ]
})

----------------------------------------

TITLE: Adding Dynamic Middleware in Nuxt Plugin
DESCRIPTION: Demonstrates how to dynamically add global and named route middleware using a Nuxt plugin.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  addRouteMiddleware('global-test', () => {
    console.log('this global middleware was added in a plugin and will be run on every route change')
  }, { global: true })

  addRouteMiddleware('named-test', () => {
    console.log('this named middleware was added in a plugin and would override any existing middleware of the same name')
  })
})

----------------------------------------

TITLE: Adding Dynamic Middleware in Nuxt Plugin
DESCRIPTION: Demonstrates how to dynamically add global and named route middleware using a Nuxt plugin.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  addRouteMiddleware('global-test', () => {
    console.log('this global middleware was added in a plugin and will be run on every route change')
  }, { global: true })

  addRouteMiddleware('named-test', () => {
    console.log('this named middleware was added in a plugin and would override any existing middleware of the same name')
  })
})

----------------------------------------

TITLE: Configuring Watcher in Nuxt
DESCRIPTION: Sets an alternative watcher for Nuxt, with options for 'chokidar-granular' (default), 'parcel', or 'chokidar'.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    watcher: 'chokidar-granular' // 'chokidar' or 'parcel' are also options
  }
})

----------------------------------------

TITLE: Extending Nuxt Configuration with Custom Head in TypeScript
DESCRIPTION: Extends the base Nuxt configuration by adding custom head metadata, including a title and description meta tag.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  // Extending from base nuxt.config.ts!
  app: {
    head: {
      title: 'Extending Configs is Fun!',
      meta: [
        { name: 'description', content: 'I am using the extends feature in nuxt 3!' }
      ],
    }
  }
})

----------------------------------------

TITLE: Configuring package.json for Nuxt Layer npm Package
DESCRIPTION: Defines the necessary properties in package.json for publishing a Nuxt layer as an npm package, including name, version, and dependencies.

LANGUAGE: json
CODE:
{
  "name": "my-theme",
  "version": "1.0.0",
  "type": "module",
  "main": "./nuxt.config.ts",
  "dependencies": {},
  "devDependencies": {
    "nuxt": "^3.0.0"
  }
}

----------------------------------------

TITLE: Using Runtime Config in Nuxt API
DESCRIPTION: Shows how to access and use runtime configuration in a Nuxt API endpoint, including environment variables.

LANGUAGE: ts
CODE:
export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig(event)

  const repo = await $fetch('https://api.github.com/repos/nuxt/nuxt', {
    headers: {
      Authorization: `token ${config.githubToken}`
    }
  })

  return repo
})

----------------------------------------

TITLE: Using Runtime Config in Nuxt API
DESCRIPTION: Shows how to access and use runtime configuration in a Nuxt API endpoint, including environment variables.

LANGUAGE: ts
CODE:
export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig(event)

  const repo = await $fetch('https://api.github.com/repos/nuxt/nuxt', {
    headers: {
      Authorization: `token ${config.githubToken}`
    }
  })

  return repo
})

----------------------------------------

TITLE: Enabling Cross-Origin Prefetch in Nuxt
DESCRIPTION: Enables cross-origin prefetch using the Speculation Rules API.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    crossOriginPrefetch: true
  }
})

----------------------------------------

TITLE: Extending Nuxt Configuration with Layers in TypeScript
DESCRIPTION: Demonstrates how to extend the Nuxt configuration using a local layer directory. This allows for modular and reusable configuration.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  extends: [
    './base'
  ]
})

----------------------------------------

TITLE: Custom Layout Implementation in Vue
DESCRIPTION: Shows how to use a custom layout with NuxtLayout component using the name prop

LANGUAGE: vue
CODE:
<script setup lang="ts">
// layouts/custom.vue
const layout = 'custom'
</script>

<template>
  <NuxtLayout :name="layout">
    <NuxtPage />
  </NuxtLayout>
</template>

----------------------------------------

TITLE: VS Code Debug Configuration for Nuxt
DESCRIPTION: Comprehensive debug configuration for VS Code that enables both client-side (Chrome) and server-side debugging of Nuxt applications.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "client: chrome",
      "url": "http://localhost:3000",
      "webRoot": "${workspaceFolder}"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "server: nuxt",
      "outputCapture": "std",
      "program": "${workspaceFolder}/node_modules/nuxt/bin/nuxt.mjs",
      "args": [
        "dev"
      ],
    }
  ],
  "compounds": [
    {
      "name": "fullstack: nuxt",
      "configurations": [
        "server: nuxt",
        "client: chrome"
      ]
    }
  ]
}

----------------------------------------

TITLE: Implementing Default Export Utility in TypeScript
DESCRIPTION: Example of creating a default export utility function for string capitalization that can be shared between client and server.

LANGUAGE: typescript
CODE:
export default function (input: string) {
  return input[0] ? input[0].toUpperCase() + input.slice(1) : ''
}

----------------------------------------

TITLE: Configuring JSON Payload Rendering in Nuxt
DESCRIPTION: Enables rendering of JSON payloads with support for revivifying complex types. This feature is enabled by default.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    renderJsonPayloads: true
  }
})

----------------------------------------

TITLE: Installing Nuxt Kit Dependency in package.json
DESCRIPTION: This snippet shows how to add @nuxt/kit as a dependency in the package.json file. It recommends using the nightly version for the latest features.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@nuxt/kit": "npm:@nuxt/kit-nightly@latest"
  }
}

----------------------------------------

TITLE: Accessing Runtime Config in Nuxt
DESCRIPTION: Shows how to access runtime configuration values using the useRuntimeConfig composable in both server and client contexts.

LANGUAGE: typescript
CODE:
const runtimeConfig = useRuntimeConfig()

console.log(runtimeConfig.apiSecret)
console.log(runtimeConfig.public.apiBase)

----------------------------------------

TITLE: Setting a Custom Response Header with useResponseHeader in Nuxt 3
DESCRIPTION: This snippet demonstrates how to use the useResponseHeader composable to set a custom response header in Nuxt 3. It sets an 'X-My-Header' with a value of 'my-value'.

LANGUAGE: typescript
CODE:
// Set the a custom response header
const header = useResponseHeader('X-My-Header');
header.value = 'my-value';

----------------------------------------

TITLE: Configuring Route Chunk Error Handling in Nuxt
DESCRIPTION: Sets the behavior for handling chunk loading errors during route navigation. Options include 'automatic', 'automatic-immediate', 'manual', or false.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    emitRouteChunkError: 'automatic' // or 'automatic-immediate', 'manual' or false
  }
})

----------------------------------------

TITLE: Enabling Client Fallback in Nuxt
DESCRIPTION: Enables the experimental <NuxtClientFallback> component for rendering content on the client if there's an error in SSR.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    clientFallback: true
  }
})

----------------------------------------

TITLE: Passing Custom Props to NuxtPage
DESCRIPTION: This snippet demonstrates how to pass custom props to the <NuxtPage> component in a Nuxt application.

LANGUAGE: vue
CODE:
<template>
  <NuxtPage :foobar="123" />
</template>

----------------------------------------

TITLE: Using Nightly Version of Nuxt CLI (nuxi)
DESCRIPTION: Command to use the latest nightly version of the Nuxt CLI (nuxi). This allows access to the most recent CLI improvements and updates.

LANGUAGE: bash
CODE:
npx nuxi-nightly@latest [command]

----------------------------------------

TITLE: State Modification in Nuxt Preview Mode
DESCRIPTION: Demonstrates how to modify the default state of preview mode by adding custom data properties.

LANGUAGE: javascript
CODE:
const data1 = ref('data1')

const { enabled, state } = usePreviewMode({
  getState: (currentState) => {
    return { data1, data2: 'data2' }
  }
})

----------------------------------------

TITLE: Configuring External Vue in Nuxt
DESCRIPTION: Externalizes 'vue', '@vue/*', and 'vue-router' when building. This feature is enabled by default.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    externalVue: true
  }
})

----------------------------------------

TITLE: Enabling State Restoration in Nuxt
DESCRIPTION: Allows Nuxt app state to be restored from sessionStorage after a chunk error or manual reloadNuxtApp() call.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    restoreState: true
  }
})

----------------------------------------

TITLE: Updating App Configuration at Runtime
DESCRIPTION: This Vue component demonstrates how to update the app configuration at runtime using the updateAppConfig utility. It changes the 'foo' property from 'bar' to 'baz'.

LANGUAGE: vue
CODE:
<script setup>
const appConfig = useAppConfig() // { foo: 'bar' }

const newAppConfig = { foo: 'baz' }

updateAppConfig(newAppConfig)

console.log(appConfig) // { foo: 'baz' }
</script>

----------------------------------------

TITLE: Configuring Global CSS in Nuxt
DESCRIPTION: Shows how to configure global CSS files in the Nuxt configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  css: ['~/assets/css/main.css']
})

----------------------------------------

TITLE: Enabling Async Context in Nuxt Configuration
DESCRIPTION: Enables native async context for nested composables in Nuxt and Nitro, reducing 'Nuxt instance is unavailable' errors.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    asyncContext: true
  }
})

----------------------------------------

TITLE: Enabling CookieStore Support in Nuxt
DESCRIPTION: Enables CookieStore support to listen for cookie updates and refresh useCookie ref values.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    cookieStore: true
  }
})

----------------------------------------

TITLE: Handling SSR Errors with NuxtClientFallback in Vue
DESCRIPTION: Demonstration of using the @ssr-error event with NuxtClientFallback to handle and log SSR errors on the server side.

LANGUAGE: vue
CODE:
<template>
  <NuxtClientFallback @ssr-error="logSomeError">
    <!-- ... -->
  </NuxtClientFallback>
</template>

----------------------------------------

TITLE: Using Function Merger in App Config Layer
DESCRIPTION: These snippets show how to use a function merger to define a custom merging strategy for array values in app.config across different layers of a Nuxt application.

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  // Default array value
  array: ['hello'],
})

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  // Overwrite default array value by using a merger function
  array: () => ['bonjour'],
})

----------------------------------------

TITLE: Installing Nuxt Image Module
DESCRIPTION: Command to install and enable the Nuxt Image module, which is required to use the <NuxtPicture> component.

LANGUAGE: bash
CODE:
npx nuxi@latest module add image

----------------------------------------

TITLE: Setting Environment Variables in Production
DESCRIPTION: Example of setting environment variables directly when starting the Node.js server in production.

LANGUAGE: bash
CODE:
DATABASE_HOST=mydatabaseconnectionstring node .output/server/index.mjs

----------------------------------------

TITLE: Configuring Local Layer Aliases in Nuxt
DESCRIPTION: Resolves '~', '~~', '@', and '@@' aliases within layers with respect to their layer source and root directories. This feature is enabled by default.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    localLayerAliases: true
  }
})

----------------------------------------

TITLE: Using Auto-Imported Utility Function in Vue Component
DESCRIPTION: Demonstrates how to use an auto-imported utility function (formatNumber) within a Vue component template. This showcases the seamless integration of utility functions in Nuxt applications.

LANGUAGE: vue
CODE:
<template>
  <p>{{ formatNumber(1234) }}</p>
</template>

----------------------------------------

TITLE: App Configuration Setup
DESCRIPTION: Shows how to define build-time application configuration using app.config.ts.

LANGUAGE: typescript
CODE:
export default defineAppConfig({
  title: 'Hello Nuxt',
  theme: {
    dark: true,
    colors: {
      primary: '#ff0000'
    }
  }
})

----------------------------------------

TITLE: Implementing Named Export Utility in TypeScript
DESCRIPTION: Example of creating a named export utility function for string capitalization that can be shared between client and server.

LANGUAGE: typescript
CODE:
export const capitalize = (input: string) => {
  return input[0] ? input[0].toUpperCase() + input.slice(1) : ''
}

----------------------------------------

TITLE: Nuxt Error Object Type Definition
DESCRIPTION: TypeScript interface showing the structure of the error object passed to error.vue. Includes status code, fatal flag, unhandled flag, and optional fields for status message, data, and cause.

LANGUAGE: typescript
CODE:
{
  statusCode: number
  fatal: boolean
  unhandled: boolean
  statusMessage?: string
  data?: unknown
  cause?: unknown
}

----------------------------------------

TITLE: Using NuxtClientFallback in Vue Template
DESCRIPTION: Example of using the <NuxtClientFallback> component in a Vue template to handle client-side rendering for components that may fail during SSR.

LANGUAGE: vue
CODE:
<template>
  <div>
    <Sidebar />
    <!-- this component will be rendered on client-side -->
    <NuxtClientFallback fallback-tag="span">
      <Comments />
      <BrokeInSSR />
    </NuxtClientFallback>
  </div>
</template>

----------------------------------------

TITLE: Basic Directory Structure for Nuxt Components
DESCRIPTION: Shows the standard directory structure for organizing Vue components in a Nuxt project.

LANGUAGE: bash
CODE:
-| components/
---| AppHeader.vue
---| AppFooter.vue

----------------------------------------

TITLE: Enabling Async Entry in Nuxt Configuration
DESCRIPTION: Enables generation of an async entry point for the Vue bundle, aiding module federation support.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    asyncEntry: true
  }
})

----------------------------------------

TITLE: Creating a Server Route in Nuxt
DESCRIPTION: Demonstrates how to create a server route without the /api prefix using the server/routes directory.

LANGUAGE: ts
CODE:
export default defineEventHandler(() => 'Hello World!')

----------------------------------------

TITLE: Creating a Catch-all Route in Nuxt API
DESCRIPTION: Demonstrates how to create a catch-all route handler for fallback handling in a Nuxt API.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  // event.context.path to get the route path: '/api/foo/bar/baz'
  // event.context.params._ to get the route segment: 'bar/baz'
  return `Default foo handler`
})

----------------------------------------

TITLE: Configuring Nested Composables Scanner
DESCRIPTION: Nuxt configuration example for scanning nested directories inside the composables folder.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  imports: {
    dirs: [
      'composables',
      'composables/*/index.{ts,js,mjs,mts}',
      'composables/**'
    ]
  }
})

----------------------------------------

TITLE: Configuring Extra Page Metadata Extraction in Nuxt
DESCRIPTION: Allows specifying additional keys to extract from page metadata when using scanPageMeta.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    extraPageMetaExtractionKeys: ['foo'],
  },
  hooks: {
    'pages:resolved' (ctx) {
      // ✅ foo is available
    },
  },
})

----------------------------------------

TITLE: Creating Plugin with Dependencies
DESCRIPTION: Shows how to create a plugin that depends on another plugin's completion before execution.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin({
  name: 'depends-on-my-plugin',
  dependsOn: ['my-plugin'],
  async setup (nuxtApp) {
    // this plugin will wait for the end of `my-plugin`'s execution before it runs
  }
})

----------------------------------------

TITLE: Using Static Assets in Vue Components
DESCRIPTION: Demonstrates how to reference static assets from the public directory in a Vue component, specifically showing how to set Open Graph image meta tags using the useSeoMeta composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useSeoMeta({
  ogImage: '/og-image.png'
})
</script>

----------------------------------------

TITLE: Type Definition for addComponent Function in TypeScript
DESCRIPTION: Defines the type signature and interface for the addComponent function, which registers an individual component to be automatically imported in Nuxt applications.

LANGUAGE: typescript
CODE:
async function addComponent (options: AddComponentOptions): void

interface AddComponentOptions {
  name: string,
  filePath: string,
  pascalName?: string,
  kebabName?: string,
  export?: string,
  shortPath?: string,
  chunkName?: string,
  prefetch?: boolean,
  preload?: boolean,
  global?: boolean,
  island?: boolean,
  mode?: 'client' | 'server' | 'all',
  priority?: number,
}

----------------------------------------

TITLE: Disabling Auto-imports in Nuxt Configuration
DESCRIPTION: Shows how to disable auto-importing of composables and utilities in the Nuxt configuration file. This setting turns off the auto-import feature, requiring explicit imports for all functions.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  imports: {
    autoImport: false
  }
})

----------------------------------------

TITLE: Implementing Authentication Middleware in Nuxt
DESCRIPTION: This example shows how to implement an authentication middleware in a Nuxt application. It checks if the user is authenticated and redirects to the login page if not, except for the login page itself.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  // isAuthenticated() is an example method verifying if a user is authenticated
  if (to.path !== '/login' && isAuthenticated() === false) {
    return navigateTo('/login')
  }
})

----------------------------------------

TITLE: Replacing require.resolve in ES Modules
DESCRIPTION: Shows how to replace the CommonJS require.resolve function with ES Modules-compatible code using the mlly library's resolvePath function.

LANGUAGE: javascript
CODE:
// Before
const someFile = require.resolve('./lib/foo.js')

// After
import { resolvePath } from 'mlly'

const someFile = await resolvePath('my-lib', { url: import.meta.url })

----------------------------------------

TITLE: Conditional Middleware Execution in TypeScript
DESCRIPTION: Shows how to conditionally skip middleware execution based on server/client context and hydration state.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware(to => {
  // skip middleware on server
  if (import.meta.server) return
  // skip middleware on client side entirely
  if (import.meta.client) return
  // or only skip middleware on initial client load
  const nuxtApp = useNuxtApp()
  if (import.meta.client && nuxtApp.isHydrating && nuxtApp.payload.serverRendered) return
})

----------------------------------------

TITLE: Configuring Client-Side Rendering in Nuxt
DESCRIPTION: Shows how to enable client-side only rendering in Nuxt by setting the 'ssr' option to false in the Nuxt configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  ssr: false
})

----------------------------------------

TITLE: Accessing Route Parameters in Nuxt
DESCRIPTION: Demonstrates how to access route parameters using the useRoute composable in a Vue component setup block.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()

// When accessing /posts/1, route.params.id will be 1
console.log(route.params.id)
</script>

----------------------------------------

TITLE: Replacing __dirname in ES Modules
DESCRIPTION: Demonstrates how to replace the CommonJS __dirname global with ES Modules-compatible code using import.meta.url and the fileURLToPath function.

LANGUAGE: javascript
CODE:
// Before
import { join } from 'path'

const newDir = join(__dirname, 'new-dir')

// After
import { fileURLToPath } from 'node:url'

const newDir = fileURLToPath(new URL('./new-dir', import.meta.url))

----------------------------------------

TITLE: Nested Composable Example
DESCRIPTION: Example showing how to use one composable within another using Nuxt's auto-import feature.

LANGUAGE: typescript
CODE:
export const useFoo = () => {
  const nuxtApp = useNuxtApp()
  const bar = useBar()
}

----------------------------------------

TITLE: Setting Up Transpilation in Nuxt Module Using useNuxt
DESCRIPTION: This example demonstrates how to use the useNuxt function to access the Nuxt instance and modify build options for transpilation in a Nuxt module.

LANGUAGE: typescript
CODE:
import { useNuxt } from '@nuxt/kit'

export const setupTranspilation = () => {
  const nuxt = useNuxt()

  nuxt.options.build.transpile = nuxt.options.build.transpile || []

  if (nuxt.options.builder === '@nuxt/webpack-builder') {
    nuxt.options.build.transpile.push(
      'xstate',
    )
  }
}

----------------------------------------

TITLE: Handling Default Exports in ES Module Context
DESCRIPTION: Demonstrates how to handle default exports from CommonJS modules when importing them in an ES Module context, including static and dynamic import scenarios.

LANGUAGE: javascript
CODE:
// Static import
import { default as pkg } from 'cjs-pkg'

// Dynamic import
import('cjs-pkg').then(m => m.default || m).then(console.log)

----------------------------------------

TITLE: Using Reactive SEO Meta Tags with useSeoMeta in Vue
DESCRIPTION: This example shows how to use reactive values with useSeoMeta. It uses a ref for the title and a computed getter for the description to ensure reactivity.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const title = ref('My title')

useSeoMeta({
  title,
  description: () => `This is a description for the ${title.value} page`
})
</script>

----------------------------------------

TITLE: Importing CommonJS Module in CommonJS Context
DESCRIPTION: Shows how to import a CommonJS module in a CommonJS context using the require function, which is the standard way to import modules in Node.js.

LANGUAGE: javascript
CODE:
const pkg = require('cjs-pkg')

console.log(pkg) // { test: 123 }

----------------------------------------

TITLE: Transpiling Libraries in Nuxt Configuration
DESCRIPTION: Demonstrates how to configure Nuxt to transpile specific libraries that may have ESM compatibility issues, using the build.transpile option in the Nuxt configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  build: {
    transpile: ['sample-library']
  }
})

----------------------------------------

TITLE: Migrating from CommonJS to ES Modules Import Syntax
DESCRIPTION: Shows how to migrate from CommonJS require syntax to ES Modules import syntax, including both static and dynamic import scenarios.

LANGUAGE: javascript
CODE:
// Before
const myLib = require('my-lib')

// After
import myLib from 'my-lib'
// or
const myLib = await import('my-lib').then(lib => lib.default || lib)

----------------------------------------

TITLE: Migrating Router ExtendRoutes to Pages:Extend Hook
DESCRIPTION: Replace the router.extendRoutes configuration with the new pages:extend hook in Nuxt 3.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  hooks: {
    'pages:extend' (routes) {
      //
    }
  }
})

----------------------------------------

TITLE: Configuring Package for Both CJS and ESM in JSON
DESCRIPTION: Illustrates how to configure a package.json file to expose both CommonJS and ES Module versions of a library, allowing consumers to choose the appropriate format.

LANGUAGE: json
CODE:
{
  "name": "sample-library",
  "main": "dist/sample-library.cjs.js",
  "module": "dist/sample-library.esm.js"
}

----------------------------------------

TITLE: Skipping Client Fallback Generation in Nuxt
DESCRIPTION: Shows how to prevent generation of specific fallback HTML files when prerendering a client-rendered Nuxt app using the 'prerender:generate' Nitro hook.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  ssr: false,
  nitro: {
    hooks: {
      'prerender:generate'(route) {
        const routesToSkip = ['/index.html', '/200.html', '/404.html']
        if (routesToSkip.includes(route.route)) {
          route.skip = true
        }
      }
    }
  }
})

----------------------------------------

TITLE: Defining addLayout Function Type in TypeScript
DESCRIPTION: Type definition for the addLayout utility function and NuxtTemplate interface. The function allows registering templates as layouts, with support for both string paths and template objects containing configuration options.

LANGUAGE: typescript
CODE:
function addLayout (layout: NuxtTemplate | string, name: string): void

interface NuxtTemplate {
  src?: string
  filename?: string
  dst?: string
  options?: Record<string, any>
  getContents?: (data: Record<string, any>) => string | Promise<string>
  write?: boolean
}

----------------------------------------

TITLE: Installing @nuxt/eslint Module in Nuxt Project
DESCRIPTION: This command adds the @nuxt/eslint module to a Nuxt project, which sets up project-aware ESLint configuration automatically. It generates an eslint.config.mjs file in the project root that can be customized as needed.

LANGUAGE: bash
CODE:
npx nuxi module add eslint

----------------------------------------

TITLE: Enabling Component Islands in Nuxt
DESCRIPTION: Enables experimental component islands support with <NuxtIsland> and .island.vue files.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    componentIslands: true // false or 'local+remote'
  }
})

----------------------------------------

TITLE: Options API Example in Vue 2
DESCRIPTION: Demonstrates using the Options API pattern in Vue 2 for managing component state and methods.

LANGUAGE: vue
CODE:
<script>
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment(){
      this.count++
    }
  }
}
</script>

----------------------------------------

TITLE: Initializing Counter with Universal Rendering in Vue
DESCRIPTION: Demonstrates how a counter component is rendered both server-side and client-side in universal rendering mode. The counter state is initialized on the server and hydrated on the client, while the click handler only executes in the browser.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const counter = ref(0); // executes in server and client environments

const handleClick = () => {
  counter.value++; // executes only in a client environment
};
</script>

<template>
  <div>
    <p>Count: {{ counter }}</p>
    <button @click="handleClick">Increment</button>
  </div>
</template>

----------------------------------------

TITLE: Installing Latest Nuxt Version with Package Managers
DESCRIPTION: Commands to upgrade Nuxt to the latest version using different package managers (npm, yarn, pnpm, bun)

LANGUAGE: bash
CODE:
npx nuxi upgrade

LANGUAGE: bash
CODE:
yarn dlx nuxi upgrade

LANGUAGE: bash
CODE:
pnpm dlx nuxi upgrade

LANGUAGE: bash
CODE:
bun x nuxi upgrade

----------------------------------------

TITLE: Custom History Mode Configuration
DESCRIPTION: Advanced example showing how to override the default history mode with custom implementation.

LANGUAGE: typescript
CODE:
import type { RouterConfig } from '@nuxt/schema'
import { createMemoryHistory } from 'vue-router'

export default {
  // https://router.vuejs.org/api/interfaces/routeroptions.html
  history: base => import.meta.client ? createMemoryHistory(base) : null /* default */
} satisfies RouterConfig

----------------------------------------

TITLE: Configuring Auto-imports from Third-Party Packages
DESCRIPTION: Demonstrates how to configure auto-imports from third-party packages in Nuxt. This example shows how to auto-import the 'useI18n' composable from the 'vue-i18n' package.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  imports: {
    presets: [
      {
        from: 'vue-i18n',
        imports: ['useI18n']
      }
    ]
  }
})

----------------------------------------

TITLE: Implementing prerender:routes Nuxt hook
DESCRIPTION: Shows how to use the prerender:routes Nuxt hook to dynamically add routes for prerendering based on external data.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  hooks: {
    async "prerender:routes"(ctx) {
      const { pages } = await fetch("https://api.some-cms.com/pages").then(
        (res) => res.json(),
      );
      for (const page of pages) {
        ctx.routes.add(`/${page.name}`);
      }
    },
  },
});

----------------------------------------

TITLE: Defining updateTemplates Function Type in TypeScript
DESCRIPTION: Type definition for the updateTemplates function, which regenerates templates that match a given filter. It includes interfaces for UpdateTemplatesOptions and ResolvedNuxtTemplate.

LANGUAGE: typescript
CODE:
async function updateTemplates (options: UpdateTemplatesOptions): void

interface UpdateTemplatesOptions {
  filter?: (template: ResolvedNuxtTemplate) => boolean
}

interface ResolvedNuxtTemplate {
  src: string
  filename: string
  dst: string
  options: Record<string, any>
  getContents: (data: Record<string, any>) => string | Promise<string>
  write: boolean
  filename: string
  dst: string
}

----------------------------------------

TITLE: Implementing Nuxt Page Routing
DESCRIPTION: Examples of page components that demonstrate Nuxt's file-based routing system with index and about pages.

LANGUAGE: vue
CODE:
<template>
  <div>
    <h1>Welcome to the homepage</h1>
    <AppAlert>
      This is an auto-imported component
    </AppAlert>
  </div>
</template>

LANGUAGE: vue
CODE:
<template>
  <section>
    <p>This page will be displayed at the /about route.</p>
  </section>
</template>

----------------------------------------

TITLE: Refreshing Specific Data with refreshNuxtData in Vue
DESCRIPTION: This example shows how to use refreshNuxtData to refresh specific data on a page. It uses useLazyAsyncData to fetch data and refreshNuxtData to refresh only the data with the key 'count'.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { status, data: count } = await useLazyAsyncData('count', () => $fetch('/api/count'))
const refresh = () => refreshNuxtData('count')
</script>

<template>
  <div>
    {{ status === 'pending' ? 'Loading' : count }}
  </div>
  <button @click="refresh">Refresh</button>
</template>

----------------------------------------

TITLE: Configuring prerendering at page level in Nuxt
DESCRIPTION: Shows how to use defineRouteRules in a Vue component to configure prerendering for a specific page.

LANGUAGE: vue
CODE:
<script setup>
defineRouteRules({
  prerender: true,
});
</script>

<template>
  <div>
    <h1>Homepage</h1>
    <p>Pre-rendered at build time</p>
  </div>
</template>

----------------------------------------

TITLE: Running nuxi generate command for Nuxt prerendering
DESCRIPTION: Shows how to use the nuxi generate command with different package managers to build and pre-render a Nuxt application.

LANGUAGE: bash
CODE:
npx nuxi generate

LANGUAGE: bash
CODE:
yarn dlx nuxi generate

LANGUAGE: bash
CODE:
pnpm dlx nuxi generate

LANGUAGE: bash
CODE:
bun x nuxi generate

----------------------------------------

TITLE: Extending Nuxt HTML Template with Nitro Plugin
DESCRIPTION: TypeScript implementation of a Nitro plugin to modify the HTML template before client delivery using render hooks.

LANGUAGE: typescript
CODE:
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('render:html', (html, { event }) => {
    // This will be an object representation of the html template.
    console.log(html)
    html.head.push(`<meta name="description" content="My custom description" />`)
  })
  // You can also intercept the response here.
  nitroApp.hooks.hook('render:response', (response, { event }) => { console.log(response) })
})

----------------------------------------

TITLE: Using prerenderRoutes in Nuxt
DESCRIPTION: Demonstrates how to use prerenderRoutes to specify additional routes for prerendering in Nuxt applications. The function accepts either a single route string or an array of routes. Must be called within Nuxt context and during prerendering phase.

LANGUAGE: javascript
CODE:
const route = useRoute()

prerenderRoutes('/')
prerenderRoutes(['/', '/about'])

----------------------------------------

TITLE: Configuring Nuxt for Client-side Only Rendering
DESCRIPTION: Nuxt configuration to disable server-side rendering and enable client-side only rendering. This is useful for static hosting scenarios where server-side rendering is not required.

LANGUAGE: ts
CODE:
export default defineNuxtConfig({
  ssr: false
})

----------------------------------------

TITLE: Extending Nuxt from Private GitHub Repository
DESCRIPTION: This code snippet shows how to extend a Nuxt application from a private GitHub repository by passing an authentication token in the nuxt.config.ts file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  extends: [
    // per layer configuration
    ['github:my-themes/private-awesome', { auth: process.env.GITHUB_TOKEN }]
  ]
})

----------------------------------------

TITLE: Adding Nitro Server Handler Type Definition
DESCRIPTION: Type definition for the addServerHandler function and NitroEventHandler interface used to add server handlers to Nitro.

LANGUAGE: typescript
CODE:
function addServerHandler (handler: NitroEventHandler): void

export interface NitroEventHandler {
  handler: string;
  route?: string;
  middleware?: boolean;
  lazy?: boolean;
  method?: string;
}

----------------------------------------

TITLE: Vue Configuration with Webpack
DESCRIPTION: Shows how to configure Vue-specific options when using Webpack as the build tool.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  webpack: {
    loaders: {
      vue: {
        hotReload: true,
      }
    }
  }
})

----------------------------------------

TITLE: Configuring Server TypeScript in Nuxt
DESCRIPTION: Shows how to configure TypeScript for server-side code in Nuxt by extending the auto-generated tsconfig.

LANGUAGE: json
CODE:
{
  "extends": "../.nuxt/tsconfig.server.json"
}

----------------------------------------

TITLE: Importing CSS in Vue Components
DESCRIPTION: Demonstrates different ways to import CSS files in Nuxt components, including static imports and CSS @import statements.

LANGUAGE: vue
CODE:
<script>
// Use a static import for server-side compatibility
import '~/assets/css/first.css'

// Caution: Dynamic imports are not server-side compatible
import('~/assets/css/first.css')
</script>

<style>
@import url("~/assets/css/second.css");
</style>

----------------------------------------

TITLE: Advanced Locale Management with Nuxt State
DESCRIPTION: Demonstrates advanced state management with multiple composables for handling localization and date formatting.

LANGUAGE: typescript
CODE:
export const useLocale = () => {
  return useState<string>('locale', () => useDefaultLocale().value)
}

export const useDefaultLocale = (fallback = 'en-US') => {
  const locale = ref(fallback)
  if (import.meta.server) {
    const reqLocale = useRequestHeaders()['accept-language']?.split(',')[0]
    if (reqLocale) {
      locale.value = reqLocale
    }
  } else if (import.meta.client) {
    const navLang = navigator.language
    if (navLang) {
      locale.value = navLang
    }
  }
  return locale
}

LANGUAGE: vue
CODE:
<script setup lang="ts">
const locales = useLocales()
const locale = useLocale()
const date = useLocaleDate(new Date('2016-10-26'))
</script>

<template>
  <div>
    <h1>Nuxt birthday</h1>
    <p>{{ date }}</p>
    <label for="locale-chooser">Preview a different locale</label>
    <select id="locale-chooser" v-model="locale">
      <option v-for="locale of locales" :key="locale" :value="locale">
        {{ locale }}
      </option>
    </select>
  </div>
</template>

----------------------------------------

TITLE: Experimental Vue Features Configuration
DESCRIPTION: Demonstrates how to enable experimental Vue features in Nuxt configuration.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  vue: {
    propsDestructure: true
  }
})

----------------------------------------

TITLE: External Static File Linking
DESCRIPTION: Example of linking to static files in the public directory using the external prop

LANGUAGE: vue
CODE:
<template>
  <NuxtLink to="/example-report.pdf" external>
    Download Report
  </NuxtLink>
</template>

----------------------------------------

TITLE: Vue Configuration with Vite
DESCRIPTION: Demonstrates how to configure Vue-specific options when using Vite as the build tool.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  vite: {
    vue: {
      customElement: true
    },
    vueJsx: {
      mergeProps: true
    }
  }
})

----------------------------------------

TITLE: Implementing Dynamic Transitions in Vue Component
DESCRIPTION: Use inline middleware to apply dynamic transitions based on conditional logic. This example changes the transition direction based on the page ID.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  pageTransition: {
    name: 'slide-right',
    mode: 'out-in'
  },
  middleware (to, from) {
    if (to.meta.pageTransition && typeof to.meta.pageTransition !== 'boolean')
      to.meta.pageTransition.name = +to.params.id! > +from.params.id! ? 'slide-left' : 'slide-right'
  }
})
</script>

<template>
  <h1>#{{ $route.params.id }}</h1>
</template>

<style>
.slide-left-enter-active,
.slide-left-leave-active,
.slide-right-enter-active,
.slide-right-leave-active {
  transition: all 0.2s;
}
.slide-left-enter-from {
  opacity: 0;
  transform: translate(50px, 0);
}
.slide-left-leave-to {
  opacity: 0;
  transform: translate(-50px, 0);
}
.slide-right-enter-from {
  opacity: 0;
  transform: translate(-50px, 0);
}
.slide-right-leave-to {
  opacity: 0;
  transform: translate(50px, 0);
}
</style>

----------------------------------------

TITLE: Adding Vite Plugin in Nuxt-SVG-Icons Module
DESCRIPTION: Example of using addVitePlugin to add the svg4VuePlugin to the Vite configuration in a Nuxt-SVG-Icons module.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, addVitePlugin } from '@nuxt/kit'
import { svg4VuePlugin } from 'vite-plugin-svg4vue'

export default defineNuxtModule({
  meta: {
    name: 'nuxt-svg-icons',
    configKey: 'nuxtSvgIcons',
  },
  defaults: {
    svg4vue: {
      assetsDirName: 'assets/icons',
    },
  },
  setup(options) {
    addVitePlugin(svg4VuePlugin(options.svg4vue))
  },
})

----------------------------------------

TITLE: Adding External Stylesheets via Nuxt Config
DESCRIPTION: Configuration example showing how to add external CSS files through Nuxt config.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    head: {
      link: [{ rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css' }]
    }
  }
})

----------------------------------------

TITLE: Implementing Dynamic Layout Change with setPageLayout in Nuxt Middleware
DESCRIPTION: This snippet demonstrates how to use setPageLayout within a Nuxt route middleware to dynamically change the layout of a page. It sets the layout to 'other' for the route being navigated to.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to) => {
  // Set the layout on the route you are navigating _to_
  setPageLayout('other')
})

----------------------------------------

TITLE: Configuring Pinia Module in Nuxt 3
DESCRIPTION: Enable the Pinia module in the Nuxt 3 configuration file.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from 'nuxt/config';

export default defineNuxtConfig({
  modules: ['@pinia/nuxt']
})

----------------------------------------

TITLE: Configuring Global Layout Transitions in Nuxt
DESCRIPTION: Define global layout transitions in the Nuxt configuration file. This sets up a default transition named 'layout' with 'out-in' mode for all layouts.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    layoutTransition: { name: 'layout', mode: 'out-in' }
  },
})

----------------------------------------

TITLE: Creating Custom Error Page in Nuxt
DESCRIPTION: This snippet shows how to create a custom error page in Nuxt by adding an error.vue file. It includes handling of the error prop and a method to clear errors and redirect.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import type { NuxtError } from '#app'

const props = defineProps({
  error: Object as () => NuxtError
})

const handleError = () => clearError({ redirect: '/' })
</script>

<template>
  <div>
    <h2>{{ error.statusCode }}</h2>
    <button @click="handleError">Clear errors</button>
  </div>
</template>

----------------------------------------

TITLE: Setting a Global Response Header in Nuxt 3 Middleware
DESCRIPTION: This snippet demonstrates how to use useResponseHeader in Nuxt 3 middleware to set a response header for all pages. It sets an 'X-My-Always-Header' with a constant value.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  const header = useResponseHeader('X-My-Always-Header');
  header.value = `I'm Always here!`;
});

----------------------------------------

TITLE: Migrating ssrRef to useState in Nuxt Bridge
DESCRIPTION: Shows how to replace ssrRef and shallowSsrRef with useState, which requires a key and can only be called within a Nuxt 3 plugin or component instance.

LANGUAGE: diff
CODE:
- import { ssrRef } from '@nuxtjs/composition-api'

- const ref1 = ssrRef('initialData')
- const ref2 = ssrRef(() => 'factory function')
+ const ref1 = useState('ref1-key', () => 'initialData')
+ const ref2 = useState('ref2-key', () => 'factory function')
  // accessing the state
  console.log(ref1.value)

----------------------------------------

TITLE: Defining Custom Page Transition in Vue Component
DESCRIPTION: Set a custom page transition for a specific page using definePageMeta. This example applies a 'rotate' transition to the about page.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  pageTransition: {
    name: 'rotate'
  }
})
</script>

----------------------------------------

TITLE: Accessing Nuxt Vite Config with JavaScript
DESCRIPTION: This snippet demonstrates how to extract the Vite configuration from a Nuxt project using Nuxt Kit utilities. It loads a Nuxt instance, hooks into the 'vite:extendConfig' event, and resolves with the client-side Vite config.

LANGUAGE: javascript
CODE:
import { loadNuxt, buildNuxt } from '@nuxt/kit'

// https://github.com/nuxt/nuxt/issues/14534
async function getViteConfig() {
  const nuxt = await loadNuxt({ cwd: process.cwd(), dev: false, overrides: { ssr: false } })
  return new Promise((resolve, reject) => {
    nuxt.hook('vite:extendConfig', (config, { isClient }) => {
      if (isClient) {
        resolve(config)
        throw new Error('_stop_')
      }
    })
    buildNuxt(nuxt).catch((err) => {
      if (!err.toString().includes('_stop_')) {
        reject(err)
      }
    })
  }).finally(() => nuxt.close())
}

const viteConfig = await getViteConfig()
console.log(viteConfig)

----------------------------------------

TITLE: Enabling Shared Prerender Data in Nuxt
DESCRIPTION: Enables sharing of payload data between prerendered pages, potentially improving performance for sites with common data across pages.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    sharedPrerenderData: true
  }
})

----------------------------------------

TITLE: Defining tryUseNuxt Function Type in TypeScript
DESCRIPTION: This snippet defines the type signature for the tryUseNuxt function, which returns either a Nuxt instance or null if Nuxt is not available.

LANGUAGE: typescript
CODE:
function tryUseNuxt(): Nuxt | null

interface Nuxt {
  options: NuxtOptions
  hooks: Hookable<NuxtHooks>
  hook: Nuxt['hooks']['hook']
  callHook: Nuxt['hooks']['callHook']
  addHooks: Nuxt['hooks']['addHooks']
  ready: () => Promise<void>
  close: () => Promise<void>
  server?: any
  vfs: Record<string, string>
  apps: Record<string, NuxtApp>
}

----------------------------------------

TITLE: Updating Package Dependencies for Nuxt Bridge
DESCRIPTION: Diff showing the required version update for the nuxt package in package.json

LANGUAGE: diff
CODE:
- "nuxt": "^2.16.3"
+ "nuxt": "^2.17.3"

----------------------------------------

TITLE: Configuring Global Page Transitions in Nuxt
DESCRIPTION: Define global page transitions in the Nuxt configuration file. This sets up a default transition named 'page' with 'out-in' mode for all pages.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    pageTransition: { name: 'page', mode: 'out-in' }
  },
})

----------------------------------------

TITLE: Enabling Decorator Support in Nuxt
DESCRIPTION: Enables support for the TC39 decorator proposal across the entire Nuxt/Nitro app, powered by esbuild.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    decorators: true,
  },
})

----------------------------------------

TITLE: Parsing Request Cookies in Nuxt API
DESCRIPTION: Demonstrates how to parse and access cookies from the request in a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  const cookies = parseCookies(event)

  return { cookies }
})

----------------------------------------

TITLE: Running Nuxt Development Server
DESCRIPTION: Command to start the Nuxt development server for testing changes in the playground environment.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Configuring Nuxt 4 Compatibility
DESCRIPTION: Configuration to opt-in to Nuxt 4 behavior and features in nuxt.config.ts

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  future: {
    compatibilityVersion: 4,
  }
})

----------------------------------------

TITLE: Type Definition for abortNavigation Function
DESCRIPTION: TypeScript type definition showing the function signature and return type for the abortNavigation helper.

LANGUAGE: typescript
CODE:
abortNavigation(err?: Error | string): false

----------------------------------------

TITLE: Configuring Nuxt.js Page Navigation and Redirection in YAML
DESCRIPTION: This YAML configuration disables navigation for the current page and sets up a redirect to the tooling guide in the Nuxt.js documentation.

LANGUAGE: yaml
CODE:
---
navigation: false
redirect: /guide/going-further/tooling
---

----------------------------------------

TITLE: Overriding Nuxt Layer Alias
DESCRIPTION: This snippet demonstrates how to override a Nuxt layer's alias by specifying it in the options next to the layer source in the nuxt.config.ts file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  extends: [
    [
      'github:my-themes/awesome',
      { 
        meta: {
          name: 'my-awesome-theme',
        },
      },
    ],
  ]
})

----------------------------------------

TITLE: Enabling Corepack for Nuxt Development
DESCRIPTION: Command to enable Corepack, which provides access to pnpm and yarn package managers for Nuxt development.

LANGUAGE: bash
CODE:
corepack enable

----------------------------------------

TITLE: Component Testing Example
DESCRIPTION: Example of testing a Nuxt component using mountSuspended helper from @nuxt/test-utils.

LANGUAGE: typescript
CODE:
import { mountSuspended } from '@nuxt/test-utils/runtime'
import { SomeComponent } from '#components'

it('can mount some component', async () => {
    const component = await mountSuspended(SomeComponent)
    expect(component.text()).toMatchInlineSnapshot(
        '"This is an auto-imported component"'
    )
})

----------------------------------------

TITLE: Basic Environment Variable Definition in .env
DESCRIPTION: Shows how to define a basic environment variable in a .env file that will be accessible during development and build time.

LANGUAGE: bash
CODE:
MY_ENV_VARIABLE=hello

----------------------------------------

TITLE: Error Page Layout Implementation
DESCRIPTION: Shows how to implement error page with layout in Nuxt 3 using NuxtLayout component.

LANGUAGE: vue
CODE:
[error.vue]
<template>
  <div>
    <NuxtLayout name="default">
      <!-- -->
    </NuxtLayout>
  </div>
</template>

----------------------------------------

TITLE: Displaying Nitro App Server-Side Hooks in Markdown Table
DESCRIPTION: A markdown table listing various Nitro app server-side hooks, including their names, arguments, descriptions, and types. This table covers hooks like dev:ssr-logs, render:response, render:html, and others that are called during different stages of server-side operations.

LANGUAGE: markdown
CODE:
Hook                   | Arguments             | Description                          | Types
-----------------------|-----------------------|--------------------------------------|------------------
`dev:ssr-logs`         | `{ path, logs }`      | Server                               | Called at the end of a request cycle with an array of server-side logs.
`render:response`      | `response, { event }` | Called before sending the response.  | [response](https://github.com/nuxt/nuxt/blob/71ef8bd3ff207fd51c2ca18d5a8c7140476780c7/packages/nuxt/src/core/runtime/nitro/renderer.ts#L24), [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38)
`render:html`          | `html, { event }`     | Called before constructing the HTML. | [html](https://github.com/nuxt/nuxt/blob/71ef8bd3ff207fd51c2ca18d5a8c7140476780c7/packages/nuxt/src/core/runtime/nitro/renderer.ts#L15), [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38)
`render:island`        | `islandResponse, { event, islandContext }` | Called before constructing the island HTML. | [islandResponse](https://github.com/nuxt/nuxt/blob/e50cabfed1984c341af0d0c056a325a8aec26980/packages/nuxt/src/core/runtime/nitro/renderer.ts#L28), [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38), [islandContext](https://github.com/nuxt/nuxt/blob/e50cabfed1984c341af0d0c056a325a8aec26980/packages/nuxt/src/core/runtime/nitro/renderer.ts#L38)
`close`               | -                | Called when Nitro is closed. | -
`error`               | `error, { event? }`          | Called when an error occurs. | [error](https://github.com/nitrojs/nitro/blob/d20ffcbd16fc4003b774445e1a01e698c2bb078a/src/types/runtime/nitro.ts#L48), [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38)
`request`             | `event`        | Called when a request is received. | [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38)
`beforeResponse`      | `event, { body }`        | Called before sending the response. | [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38), unknown
`afterResponse`       | `event, { body }`        | Called after sending the response. | [event](https://github.com/unjs/h3/blob/f6ceb5581043dc4d8b6eab91e9be4531e0c30f8e/src/types.ts#L38), unknown

----------------------------------------

TITLE: Setting Up Vitest Configuration
DESCRIPTION: Basic Vitest configuration setup for Nuxt testing environment using @nuxt/test-utils.

LANGUAGE: typescript
CODE:
import { defineVitestConfig } from '@nuxt/test-utils/config'

export default defineVitestConfig({
  // any custom Vitest config you require
})

----------------------------------------

TITLE: Named Route Middleware Implementation
DESCRIPTION: Example of implementing a named route middleware in a Nuxt plugin. This middleware can override existing middleware of the same name in the middleware/ directory.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin(() => {
  addRouteMiddleware('named-middleware', () => {
    console.log('named middleware added in Nuxt plugin')
  })
})

----------------------------------------

TITLE: Setting Response Status in Nuxt API
DESCRIPTION: Demonstrates how to set a custom response status code in a Nuxt API endpoint.

LANGUAGE: ts
CODE:
export default defineEventHandler((event) => {
  setResponseStatus(event, 202)
})

----------------------------------------

TITLE: Executing Nuxt DevTools CLI Command
DESCRIPTION: Command to enable or disable Nuxt DevTools for a project. The command accepts either 'enable' or 'disable' as the primary command, an optional root directory path, and a working directory option.

LANGUAGE: bash
CODE:
npx nuxi devtools <COMMAND> [ROOTDIR] [--cwd=<directory>]

----------------------------------------

TITLE: Accessing App Namespace in Nuxt Plugin
DESCRIPTION: Demonstrates how to access the app namespace from the runtime configuration in a Nuxt plugin, specifically the baseURL.

LANGUAGE: typescript
CODE:
export default defineNuxtPlugin((NuxtApp) => {
  const config = useRuntimeConfig()

  // Access baseURL universally
  const baseURL = config.app.baseURL
})

----------------------------------------

TITLE: Setting Nitro Preset in Nuxt Configuration
DESCRIPTION: Nuxt configuration to explicitly set the Nitro preset for deployment. This example uses the 'node-server' preset, but it can be changed to other supported presets based on the deployment target.

LANGUAGE: js
CODE:
export default defineNuxtConfig({
  nitro: {
    preset: 'node-server'
  }
})

----------------------------------------

TITLE: Configuring Plugin Registration in Nuxt
DESCRIPTION: Shows how to manually register plugins from subdirectories using the nuxt.config.ts configuration file.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  plugins: [
    '~/plugins/bar/baz',
    '~/plugins/bar/foz'
  ]
})

----------------------------------------

TITLE: Custom Props with NuxtLayout
DESCRIPTION: Demonstrates passing and accessing custom props in layouts using NuxtLayout

LANGUAGE: vue
CODE:
<template>
  <div>
    <NuxtLayout name="custom" title="I am a custom layout">
      <-- ... -->
    </NuxtLayout>
  </div>
</template>

LANGUAGE: vue
CODE:
<script setup lang="ts">
const layoutCustomProps = useAttrs()

console.log(layoutCustomProps.title) // I am a custom layout
</script>

----------------------------------------

TITLE: Using useRuntimeConfig in Server API
DESCRIPTION: Shows how to access runtime configuration in a server-side API route using the useRuntimeConfig function with the event parameter.

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  const config = useRuntimeConfig(event)
})

----------------------------------------

TITLE: Configuring PM2 for Nuxt Deployment
DESCRIPTION: PM2 configuration file for hosting a Nuxt application. It sets up a cluster mode with maximum instances and specifies the entry point script.

LANGUAGE: ts
CODE:
module.exports = {
  apps: [
    {
      name: 'NuxtAppName',
      port: '3000',
      exec_mode: 'cluster',
      instances: 'max',
      script: './.output/server/index.mjs'
    }
  ]
}

----------------------------------------

TITLE: CallOnce TypeScript Type Definitions
DESCRIPTION: Type definitions for the callOnce function showing its parameters, return type, and available options for execution mode.

LANGUAGE: typescript
CODE:
callOnce (key?: string, fn?: (() => any | Promise<any>), options?: CallOnceOptions): Promise<void>
callOnce(fn?: (() => any | Promise<any>), options?: CallOnceOptions): Promise<void>

type CallOnceOptions = {
  /**
   * Execution mode for the callOnce function
   * @default 'render'
   */
  mode?: 'navigation' | 'render'
}

----------------------------------------

TITLE: Configuring Session Encryption Key
DESCRIPTION: Environment variable setup for the session encryption password required by nuxt-auth-utils

LANGUAGE: dotenv
CODE:
NUXT_SESSION_PASSWORD=a-random-password-with-at-least-32-characters

----------------------------------------

TITLE: Using useRuntimeConfig in Vue Component
DESCRIPTION: Demonstrates how to access runtime configuration in a Vue component using the useRuntimeConfig composable.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const config = useRuntimeConfig()
</script>

----------------------------------------

TITLE: Using useRouter Composable in Vue Component
DESCRIPTION: Demonstrates how to use the useRouter composable within a Vue component's setup script to access the router instance.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const router = useRouter()
</script>

----------------------------------------

TITLE: Implementing Login API Endpoint
DESCRIPTION: Server-side API route implementation for user authentication with email and password validation using Zod

LANGUAGE: typescript
CODE:
import { z } from 'zod'

const bodySchema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

export default defineEventHandler(async (event) => {
  const { email, password } = await readValidatedBody(event, bodySchema.parse)

  if (email === 'admin@admin.com' && password === 'iamtheadmin') {
    await setUserSession(event, {
      user: {
        name: 'John Doe'
      }
    })
    return {}
  }
  throw createError({
    statusCode: 401,
    message: 'Bad credentials'
  })
})

----------------------------------------

TITLE: Using NuxtImg Component in HTML
DESCRIPTION: This snippet demonstrates the basic usage of the <NuxtImg> component, which is used similarly to the native <img> tag.

LANGUAGE: html
CODE:
<NuxtImg src="/nuxt-icon.png" />

----------------------------------------

TITLE: Using useRouteAnnouncer Composable in Vue 3 with TypeScript
DESCRIPTION: This snippet demonstrates how to use the useRouteAnnouncer composable in a Vue 3 component with TypeScript. It initializes the composable with assertive politeness and destructures its properties and methods.

LANGUAGE: vue
CODE:
<script setup lang="ts">
  const { message, politeness, set, polite, assertive } = useRouteAnnouncer({
    politeness: 'assertive'
  })
</script>

----------------------------------------

TITLE: Using useRuntimeHook in a Vue Component
DESCRIPTION: This example demonstrates how to use the useRuntimeHook composable within a Vue component's setup script. It registers a hook that logs a message whenever a link is prefetched, and automatically cleans up when the component is unmounted.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// Register a hook that runs every time a link is prefetched, but which will be
// automatically cleaned up (and not called again) when the component is unmounted
useRuntimeHook('link:prefetch', (link) => {
  console.log('Prefetching', link)
})
</script>

----------------------------------------

TITLE: CallOnce with Navigation Mode in Vue Component
DESCRIPTION: Demonstrates using callOnce with navigation mode to execute code on initial render and subsequent client-side navigations while avoiding server/client double loading.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const websiteConfig = useState('config')

await callOnce(async () => {
  console.log('This will only be logged once and then on every client side navigation')
  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')
}, { mode: 'navigation' })
</script>

----------------------------------------

TITLE: Defining Page Key in Vue Component
DESCRIPTION: This example demonstrates how to define a page key using definePageMeta in a Vue component within the /pages directory.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  key: route => route.fullPath
})
</script>

----------------------------------------

TITLE: Implementing Client-side Only Teleport in Vue
DESCRIPTION: Shows how to implement a client-side only teleport using the ClientOnly wrapper component. This approach is necessary when targeting DOM selectors other than #teleports.

LANGUAGE: vue
CODE:
<template>
  <ClientOnly>
    <Teleport to="#some-selector">
      <!-- content -->
    </Teleport>
  </ClientOnly>
</template>

----------------------------------------

TITLE: Setting a Custom Response Header in a Nuxt 3 Page Component
DESCRIPTION: This example shows how to use useResponseHeader within a Nuxt 3 page component. It sets an 'X-My-Header' and includes explanatory text in the template.

LANGUAGE: vue
CODE:
<script setup>
// pages/test.vue
const header = useResponseHeader('X-My-Header');
header.value = 'my-value';
</script>

<template>
  <h1>Test page with custom header</h1>
  <p>The response from the server for this "/test" page will have a custom "X-My-Header" header.</p>
</template>

----------------------------------------

TITLE: Authorization Header Proxy Example in Vue
DESCRIPTION: Example demonstrating how to proxy the authorization header from the initial request to subsequent API calls during SSR using useRequestHeaders with useFetch.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const { data } = await useFetch('/api/confidential', {
  headers: useRequestHeaders(['authorization'])
})
</script>

----------------------------------------

TITLE: Layout Transitions with Named Slots
DESCRIPTION: Shows how to implement layout transitions and use named slots with NuxtLayout

LANGUAGE: vue
CODE:
<template>
  <div>
    <NuxtLayout name="custom">
      <template #header> Some header template content. </template>
    </NuxtLayout>
  </div>
</template>

LANGUAGE: vue
CODE:
<template>
  <div>
    <!-- named slot -->
    <slot name="header" />
    <slot />
  </div>
</template>

----------------------------------------

TITLE: Enabling Corepack Command
DESCRIPTION: Terminal command to enable Corepack for package manager version management

LANGUAGE: bash
CODE:
corepack enable

----------------------------------------

TITLE: Nuxt Preview Mode Build Commands
DESCRIPTION: Terminal commands for generating and previewing a Nuxt site with preview mode functionality.

LANGUAGE: bash
CODE:
npx nuxi generate
npx nuxi preview

----------------------------------------

TITLE: Using createResolver in Pinia Nuxt Module
DESCRIPTION: Example implementation showing how to use createResolver to handle different Vue versions in a Pinia Nuxt module.

LANGUAGE: typescript
CODE:
import {
  defineNuxtModule,
  isNuxt2,
  createResolver,
} from '@nuxt/kit'

export default defineNuxtModule({
  setup(options, nuxt) {
    const resolver = createResolver(import.meta.url)

    nuxt.hook('modules:done', () => {
      if (isNuxt2()) {
        addPlugin(resolver.resolve('./runtime/plugin.vue2'))
      } else {
        addPlugin(resolver.resolve('./runtime/plugin.vue3'))
      }
    })
  }
})

----------------------------------------

TITLE: Using clearError Composable in JavaScript
DESCRIPTION: Demonstrates two ways to use the clearError composable: basic error clearing without redirect and clearing with redirect to a specified path. The composable accepts an optional options object with a redirect property.

LANGUAGE: javascript
CODE:
// Without redirect
clearError()

// With redirect
clearError({ redirect: '/homepage' })

----------------------------------------

TITLE: Advanced Usage of definePageMeta in Vue
DESCRIPTION: Shows advanced usage of definePageMeta, including dynamic key generation, keepalive configuration, and custom metadata.

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  key: (route) => route.fullPath,

  keepalive: {
    exclude: ['modal']
  },

  pageType: 'Checkout'
})
</script>

----------------------------------------

TITLE: Using useHead for Nuxt 3-compatible meta in Nuxt Bridge
DESCRIPTION: Demonstrates how to use the Nuxt 3-compatible useHead composable for managing meta tags in Nuxt Bridge.

LANGUAGE: diff
CODE:
<script setup>
- import { useMeta } from '@nuxtjs/composition-api'
  useHead({
    title: 'My Nuxt App',
  })
</script>

----------------------------------------

TITLE: Custom Preview Mode Implementation in Nuxt
DESCRIPTION: Example of creating a custom preview mode composable with custom enable logic based on URL parameters.

LANGUAGE: javascript
CODE:
export function useMyPreviewMode () {
  return usePreviewMode({
    shouldEnable: () => {
      return !!route.query.customPreview
    }
  });
}

----------------------------------------

TITLE: Defining findPath Function Type in TypeScript
DESCRIPTION: Type definition for the findPath function that resolves the first existing file in given paths with support for custom options.

LANGUAGE: typescript
CODE:
async function findPath (paths: string | string[], options?: ResolvePathOptions, pathType: 'file' | 'dir'): Promise<string | null>

interface ResolvePathOptions {
  cwd?: string
  alias?: Record<string, string>
  extensions?: string[]
}

----------------------------------------

TITLE: Type Definition for addRouteMiddleware in TypeScript
DESCRIPTION: TypeScript interface and function signatures for the addRouteMiddleware helper, defining its parameters and options.

LANGUAGE: typescript
CODE:
function addRouteMiddleware (name: string, middleware: RouteMiddleware, options?: AddRouteMiddlewareOptions): void
function addRouteMiddleware (middleware: RouteMiddleware): void

interface AddRouteMiddlewareOptions {
  global?: boolean
}

----------------------------------------

TITLE: Enabling Nuxt 3-compatible meta in nuxt.config
DESCRIPTION: Shows how to enable the Nuxt 3-compatible meta implementation in the nuxt.config file for Nuxt Bridge.

LANGUAGE: javascript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'
export default defineNuxtConfig({
  bridge: {
    meta: true
  }
})

----------------------------------------

TITLE: Accessing Cached Posts Data in Vue
DESCRIPTION: Shows how to access cached posts data and use it as a default value when fetching individual post details.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// Access to the cached value of useFetch in posts.vue (parent route)
const { data: posts } = useNuxtData('posts')

const route = useRoute()

const { data } = useLazyFetch(`/api/posts/${route.params.id}`, {
  key: `post-${route.params.id}`,
  default() {
    // Find the individual post from the cache and set it as the default value.
    return posts.value.find(post => post.id === route.params.id)
  }
})
</script>

----------------------------------------

TITLE: Plugin Template Type Definitions
DESCRIPTION: Type definitions for the addPluginTemplate function and related interfaces including NuxtPluginTemplate.

LANGUAGE: typescript
CODE:
function addPluginTemplate (pluginOptions: NuxtPluginTemplate, options: AddPluginOptions): NuxtPlugin

interface NuxtPluginTemplate<Options = Record<string, any>> {
  src?: string,
  filename?: string,
  dst?: string,
  mode?: 'all' | 'server' | 'client',
  options?: Options,
  getContents?: (data: Options) => string | Promise<string>,
  write?: boolean,
  order?: number
}

interface AddPluginOptions { append?: boolean }

interface NuxtPlugin {
  src: string
  mode?: 'all' | 'server' | 'client'
  order?: number
}

----------------------------------------

TITLE: Defining clearNuxtData Function Signature in TypeScript
DESCRIPTION: This code snippet defines the type signature of the clearNuxtData function. It takes an optional parameter 'keys' which can be a string, array of strings, or a function that returns a boolean. The function returns void.

LANGUAGE: typescript
CODE:
clearNuxtData (keys?: string | string[] | ((key: string) => boolean)): void

----------------------------------------

TITLE: Defining reloadNuxtApp Function Type in TypeScript
DESCRIPTION: This code snippet defines the type signature for the reloadNuxtApp function and its options interface. It specifies the function parameters and the structure of the ReloadNuxtAppOptions object.

LANGUAGE: typescript
CODE:
reloadNuxtApp(options?: ReloadNuxtAppOptions)

interface ReloadNuxtAppOptions {
  ttl?: number
  force?: boolean
  path?: string
  persistState?: boolean
}

----------------------------------------

TITLE: Custom Slot Usage in NuxtRouteAnnouncer
DESCRIPTION: Demonstrates how to customize the route announcement message using the default slot with a scoped message variable. This allows for custom formatting of the announcement text.

LANGUAGE: vue
CODE:
<template>
  <NuxtRouteAnnouncer>
    <template #default="{ message }">
      <p>{{ message }} was loaded.</p>
    </template>
  </NuxtRouteAnnouncer>
</template>

----------------------------------------

TITLE: Error Event Handler Implementation in Vue
DESCRIPTION: Demonstrates how to use the @error event handler with NuxtErrorBoundary component to capture and handle errors from the default slot.

LANGUAGE: vue
CODE:
<template>
  <NuxtErrorBoundary @error="logSomeError">
    <!-- ... -->
  </NuxtErrorBoundary>
</template>

----------------------------------------

TITLE: Setting Environment Variables for Runtime Config (INI)
DESCRIPTION: Defines environment variables that correspond to the runtime configuration. These values will automatically replace the placeholders in the nuxt.config.ts file at runtime, allowing for flexible configuration across different environments.

LANGUAGE: ini
CODE:
# Runtime config values are automatically replaced by matching environment variables at runtime
NUXT_API_SECRET=api_secret_token
NUXT_PUBLIC_API_BASE=https://nuxtjs.org

----------------------------------------

TITLE: Writing Nuxt TypeScript Definitions Interface
DESCRIPTION: TypeScript interface for writeTypes function and Nuxt interface definition. Used for generating and writing tsconfig.json to the project buildDir.

LANGUAGE: typescript
CODE:
function writeTypes (nuxt?: Nuxt): void

interface Nuxt {
  options: NuxtOptions
  hooks: Hookable<NuxtHooks>
  hook: Nuxt['hooks']['hook']
  callHook: Nuxt['hooks']['callHook']
  addHooks: Nuxt['hooks']['addHooks']
  ready: () => Promise<void>
  close: () => Promise<void>
  server?: any
  vfs: Record<string, string>
  apps: Record<string, NuxtApp>
}

----------------------------------------

TITLE: Configuring Nuxt Layers in TypeScript
DESCRIPTION: This snippet demonstrates how to extend a Nuxt application using layers in the nuxt.config.ts file. It shows extending from local directories, npm packages, and git repositories.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  extends: [
    '../base',                     // Extend from a local layer
    '@my-themes/awesome',          // Extend from an installed npm package
    'github:my-themes/awesome#v1', // Extend from a git repository
  ]
})

----------------------------------------

TITLE: Optimizing SEO Meta Tag Performance in Vue
DESCRIPTION: This snippet demonstrates how to optimize performance by conditionally applying static meta tags on the server-side and using reactive meta tags only when necessary. It uses the import.meta.server check for server-side rendering.

LANGUAGE: vue
CODE:
<script setup lang="ts">
if (import.meta.server) {
  // These meta tags will only be added during server-side rendering
  useSeoMeta({
    robots: 'index, follow',
    description: 'Static description that does not need reactivity',
    ogImage: 'https://example.com/image.png',
    // other static meta tags...
  })
}

const dynamicTitle = ref('My title')
// Only use reactive meta tags outside the condition when necessary
useSeoMeta({
  title: () => dynamicTitle.value,
  ogTitle: () => dynamicTitle.value,
})
</script>

----------------------------------------

TITLE: Replacing watchQuery with a watcher in Nuxt 3
DESCRIPTION: Demonstrates how to replace the watchQuery option from Nuxt 2 with a watcher in Nuxt 3. This is used to trigger data refetching when query parameters change.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()
const { data, refresh } = await useFetch('/api/user')
watch(() => route.query, () => refresh())
</script>

----------------------------------------

TITLE: Defining clearNuxtState Function Signature in TypeScript
DESCRIPTION: This code snippet defines the type signature of the clearNuxtState function in TypeScript. It takes an optional parameter 'keys' which can be a string, array of strings, or a function, and returns void.

LANGUAGE: typescript
CODE:
clearNuxtState (keys?: string | string[] | ((key: string) => boolean)): void

----------------------------------------

TITLE: Defining Nuxt API Documentation Structure in Markdown
DESCRIPTION: Markdown structure defining the main navigation page for Nuxt API documentation. Uses custom card components to organize different sections of the documentation with icons and navigation links.

LANGUAGE: markdown
CODE:
---
title: 'Nuxt API Reference'
titleTemplate: '%s'
description: 'Explore all Nuxt Internals: Components, Composables, Utils, Commands and more.'
navigation: false
surround: false
---

::card-group
  ::card{icon="i-ph-cube" title="Components" to="/docs/api/components/client-only"}
  Explore Nuxt built-in components for pages, layouts, head, and more.
  ::
  ::card{icon="i-ph-arrows-left-right" title="Composables" to="/docs/api/composables/use-app-config"}
  Discover Nuxt composable functions for data-fetching, head management and more.
  ::
  ::card{icon="i-ph-function" title="Utils" to="/docs/api/utils/dollarfetch"}
  Learn about Nuxt utility functions for navigation, error handling and more.
  ::
  ::card{icon="i-ph-terminal-window" title="Commands" to="/docs/api/commands/add"}
  List of Nuxt CLI commands to init, analyze, build, and preview your application.
  ::
  ::card{icon="i-ph-toolbox" title="Nuxt Kit" to="/docs/api/kit/modules"}
  Understand Nuxt Kit utilities to create modules and control Nuxt.
  ::
  ::card{icon="i-ph-brain" title="Advanced" to="/docs/api/advanced/hooks"}
  Go deep in Nuxt internals with Nuxt lifecycle hooks.
  ::
  ::card{icon="i-ph-gear" title="Nuxt Configuration" to="/docs/api/nuxt-config"}
  Explore all Nuxt configuration options to customize your application.
  ::
::

----------------------------------------

TITLE: Specifying Global .nuxtrc File Location on macOS/Linux
DESCRIPTION: This snippet shows the file path for the global .nuxtrc file on macOS and Linux systems. The global file applies configurations to all Nuxt projects on the system.

LANGUAGE: md
CODE:
~/.nuxtrc

----------------------------------------

TITLE: Basic Nuxt Vue Application Example
DESCRIPTION: Example of a basic Nuxt application component showing SEO meta configuration, template structure, and styling. Demonstrates the integration of TypeScript, component composition, and scoped styling.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useSeoMeta({
  title: 'Meet Nuxt',
  description: 'The Intuitive Vue Framework.'
})
</script>

<template>
  <div id="app">
    <AppHeader />
    <NuxtPage />
    <AppFooter />
  </div>
</template>

<style scoped>
#app {
  background-color: #020420;
  color: #00DC82;
}
</style>

----------------------------------------

TITLE: Using Fallback Slot in NuxtClientFallback
DESCRIPTION: Demonstration of using the #fallback slot to provide custom fallback content for server-side rendering failures in NuxtClientFallback.

LANGUAGE: vue
CODE:
<template>
  <NuxtClientFallback>
    <!-- ... -->
    <template #fallback>
      <!-- this will be rendered on server side if the default slot fails to render in ssr -->
      <p>Hello world</p>
    </template>
  </NuxtClientFallback>
</template>

----------------------------------------

TITLE: Implementing Hooks in Nuxt Modules
DESCRIPTION: Demonstrates how to set up hooks within a Nuxt module using defineNuxtModule and the setup function.

LANGUAGE: javascript
CODE:
import { defineNuxtModule } from '@nuxt/kit'

export default defineNuxtModule({
  setup (options, nuxt) {
    nuxt.hook('close', async () => { })
  }
})

----------------------------------------

TITLE: Implementing Error Handling Middleware in Nuxt
DESCRIPTION: Example of route middleware that throws a 404 error when accessing a specific route parameter. Demonstrates error handling and custom error page integration.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to) => {
  if (to.params.id === '1') {
    throw createError({ statusCode: 404, statusMessage: 'Page Not Found' })
  }
})

----------------------------------------

TITLE: Defining Route Middleware Types in TypeScript
DESCRIPTION: Type definitions for the defineNuxtRouteMiddleware function and RouteMiddleware interface. The middleware function accepts two route location parameters and returns a NavigationGuard type.

LANGUAGE: typescript
CODE:
defineNuxtRouteMiddleware(middleware: RouteMiddleware) => RouteMiddleware

interface RouteMiddleware {
  (to: RouteLocationNormalized, from: RouteLocationNormalized): ReturnType<NavigationGuard>
}

----------------------------------------

TITLE: Type Definition of definePageMeta in TypeScript
DESCRIPTION: Provides the TypeScript type definition for definePageMeta and the PageMeta interface, showing all possible metadata options.

LANGUAGE: typescript
CODE:
definePageMeta(meta: PageMeta) => void

interface PageMeta {
  validate?: (route: RouteLocationNormalized) => boolean | Promise<boolean> | Partial<NuxtError> | Promise<Partial<NuxtError>>
  redirect?: RouteRecordRedirectOption
  name?: string
  path?: string
  props?: RouteRecordRaw['props']
  alias?: string | string[]
  pageTransition?: boolean | TransitionProps
  layoutTransition?: boolean | TransitionProps
  viewTransition?: boolean | 'always'
  key?: false | string | ((route: RouteLocationNormalizedLoaded) => string)
  keepalive?: boolean | KeepAliveProps
  layout?: false | LayoutKey | Ref<LayoutKey> | ComputedRef<LayoutKey>
  middleware?: MiddlewareKey | NavigationGuard | Array<MiddlewareKey | NavigationGuard>
  scrollToTop?: boolean | ((to: RouteLocationNormalizedLoaded, from: RouteLocationNormalizedLoaded) => boolean)
  [key: string]: unknown
}

----------------------------------------

TITLE: Implementing Page-Level Route Rules in Vue Component
DESCRIPTION: Example of using defineRouteRules within a Vue component to set prerendering for the page. This demonstrates how to configure rendering behavior at the page level.

LANGUAGE: vue
CODE:
<script setup lang="ts">
defineRouteRules({
  prerender: true
})
</script>

<template>
  <h1>Hello world!</h1>
</template>

----------------------------------------

TITLE: Implementing Multi-Layer Support in Nuxt Module
DESCRIPTION: Shows how to access and iterate over all layers in a Nuxt application within a custom module, allowing for layer-specific handling.

LANGUAGE: typescript
CODE:
export default defineNuxtModule({
  setup(_options, nuxt) {
    for (const layer of nuxt.options._layers) {
      // You can check for a custom directory existence to extend for each layer
      console.log('Custom extension for', layer.cwd, layer.config)
    }
  }
})

----------------------------------------

TITLE: Defining Named Layer Alias in Nuxt Configuration
DESCRIPTION: Sets up a named alias for a Nuxt layer, allowing it to be referenced using a specific name in imports.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  $meta: {
    name: 'example',
  },
})

----------------------------------------

TITLE: Creating a Base Component in Vue
DESCRIPTION: Defines a simple Vue component (BaseComponent) that can be extended and used in Nuxt layers.

LANGUAGE: vue
CODE:
<template>
  <h1>Extending Components is Fun!</h1>
</template>

----------------------------------------

TITLE: Configuring SPA Loading Template Location in Nuxt
DESCRIPTION: Sets the location for rendering the SPA loading template when using client-only pages.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    spaLoadingTemplateLocation: 'within' // or 'body'
  }
})

----------------------------------------

TITLE: Enabling Early Hints in Nuxt
DESCRIPTION: Enables writing of early hints when using the Node.js server.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    writeEarlyHints: true
  }
})

----------------------------------------

TITLE: Enabling Inline Route Rules in Nuxt
DESCRIPTION: Allows defining route rules at the page level using defineRouteRules.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  experimental: {
    inlineRouteRules: true
  }
})

----------------------------------------

TITLE: Disabling Scripts in Nuxt
DESCRIPTION: This snippet demonstrates how to disable rendering of Nuxt scripts and JS resource hints using the noScripts feature. This can also be configured granularly within routeRules.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  features: {
    noScripts: true
  }
})

----------------------------------------

TITLE: Configuring Custom Routes with Router Options in Nuxt 3
DESCRIPTION: Demonstrates how to override default routes using the router.options.ts configuration file. The routes function accepts scanned routes and returns customized routes array.

LANGUAGE: typescript
CODE:
import type { RouterConfig } from '@nuxt/schema'

export default {
  // https://router.vuejs.org/api/interfaces/routeroptions.html#routes
  routes: (_routes) => [
    {
      name: 'home',
      path: '/',
      component: () => import('~/pages/home.vue')
    }
  ],
} satisfies RouterConfig

----------------------------------------

TITLE: Installing Test Dependencies in Nuxt
DESCRIPTION: Commands to install required testing dependencies for Nuxt applications using different package managers.

LANGUAGE: bash
CODE:
npm i --save-dev @nuxt/test-utils vitest @vue/test-utils happy-dom playwright-core

----------------------------------------

TITLE: Implementing prerender:generate Nitro hook
DESCRIPTION: Demonstrates how to use the prerender:generate Nitro hook for fine-grained control over each route during prerendering.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  nitro: {
    hooks: {
      "prerender:generate"(route) {
        if (route.route?.includes("private")) {
          route.skip = true;
        }
      },
    },
  },
});

----------------------------------------

TITLE: Configuring crawl-based prerendering with additional routes in Nuxt
DESCRIPTION: Shows how to combine crawl-based prerendering with manually specified routes for comprehensive prerendering in Nuxt.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  nitro: {
    prerender: {
      crawlLinks: true,
      routes: ["/sitemap.xml", "/robots.txt"],
    },
  },
});

----------------------------------------

TITLE: Throwing Custom Error in Nuxt Page Component
DESCRIPTION: This snippet shows how to use createError to throw a custom error with specific status code and message in a Nuxt page component.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const route = useRoute()
const { data } = await useFetch(`/api/movies/${route.params.slug}`)

if (!data.value) {
  throw createError({
    statusCode: 404,
    statusMessage: 'Page Not Found'
  })
}
</script>

----------------------------------------

TITLE: Configuring Default Head Tags in Nuxt Config
DESCRIPTION: This snippet demonstrates how to set default head tags in the Nuxt configuration file. It includes setting the default title, HTML language attribute, and favicon link.

LANGUAGE: typescript
CODE:
export default defineNuxtConfig({
  app: {
    head: {
      title: 'Nuxt', // default fallback title
      htmlAttrs: {
        lang: 'en',
      },
      link: [
        { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' },
      ]
    }
  }
})

----------------------------------------

TITLE: Nuxt Route Middleware Implementation
DESCRIPTION: Example of implementing authentication middleware in Nuxt to protect routes. Shows both middleware definition and usage in a page component.

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  // isAuthenticated() is an example method verifying if a user is authenticated
  if (isAuthenticated() === false) {
    return navigateTo('/login')
  }
})

LANGUAGE: vue
CODE:
<script setup lang="ts">
definePageMeta({
  middleware: 'auth'
})
</script>

<template>
  <h1>Welcome to your dashboard</h1>
</template>

----------------------------------------

TITLE: Custom Font Face Declaration
DESCRIPTION: Example of declaring custom fonts in CSS using @font-face rule.

LANGUAGE: css
CODE:
@font-face {
  font-family: 'FarAwayGalaxy';
  src: url('/fonts/FarAwayGalaxy.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

----------------------------------------

TITLE: Using Asset Directory Image in Vue Component
DESCRIPTION: Example showing how to reference and display an image from the assets directory using the ~/ alias. The image will be processed by the build tool (Vite or webpack) during compilation.

LANGUAGE: vue
CODE:
<template>
  <img src="~/assets/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

----------------------------------------

TITLE: Displaying Public Image in Vue Component
DESCRIPTION: Example of referencing and displaying an image from the public directory that is served at a static URL. The image is accessed directly from the root URL path.

LANGUAGE: vue
CODE:
<template>
  <img src="/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

----------------------------------------

TITLE: Custom .env File Loading with Nuxi
DESCRIPTION: Demonstrates how to use a custom environment file (like .env.local) using the --dotenv flag with the Nuxi CLI command.

LANGUAGE: bash
CODE:
npx nuxi dev --dotenv .env.local

----------------------------------------

TITLE: Using Shared Utility in Vue Component
DESCRIPTION: Demonstration of using an auto-imported shared utility function within a Vue component setup script.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const hello = capitalize('hello')
</script>

<template>
  <div>
    {{ hello }}
  </div>
</template>

----------------------------------------

TITLE: Re-exporting Nested Composables
DESCRIPTION: Example showing how to re-export nested composables from index.ts file to enable auto-importing.

LANGUAGE: typescript
CODE:
export { utils } from './nested/utils.ts'

----------------------------------------

TITLE: Importing CommonJS Module in ES Module Context
DESCRIPTION: Illustrates how to import a CommonJS module in an ES Module context, which may require additional interoperability handling.

LANGUAGE: javascript
CODE:
import pkg from 'cjs-pkg'

console.log(pkg) // { test: 123 }

----------------------------------------

TITLE: Migrating Public Path Configuration in Nuxt
DESCRIPTION: Shows how to migrate the build.publicPath configuration to the new app.cdnURL format in Nuxt Bridge.

LANGUAGE: diff
CODE:
export default defineNuxtConfig({
- build: {
-   publicPath: 'https://my-cdn.net'
- }
+ app: {
+   cdnURL: 'https://my-cdn.net'
+ }
})

----------------------------------------

TITLE: Configuring Nuxt Bridge Feature Flags in TypeScript
DESCRIPTION: Example configuration showing various feature flags available in Nuxt Bridge, including opt-in features and default features that can be disabled. Demonstrates configuration options for Vite bundling, TypeScript support, composition API, and other core features.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'
export default defineNuxtConfig({
  bridge: {

    // -- Opt-in features --

    // Use Vite as the bundler instead of webpack 4
    // vite: true,

    // Enable Nuxt 3 compatible useHead
    // meta: true,

    // Enable definePageMeta macro
    // macros: {
    //   pageMeta: true
    // },

    // Enable transpiling TypeScript with esbuild
    // typescript: {
    //   esbuild: true
    // },

    // -- Default features --

    // Use legacy server instead of Nitro
    // nitro: false,

    // Disable Nuxt 3 compatible `nuxtApp` interface
    // app: false,

    // Disable Composition API support
    // capi: false,

    // ... or just disable legacy Composition API support
    // capi: {
    //   legacy: false
    // },

    // Do not transpile modules
    // transpile: false,

    // Disable <script setup> support
    // scriptSetup: false,

    // Disable composables auto importing
    // imports: false,

    // Do not warn about module incompatibilities
    // constraints: false
  },

  vite: {
    // Config for Vite
  }
})

----------------------------------------

TITLE: Configuring Vite Options in Nuxt Bridge
DESCRIPTION: Example of how to provide custom Vite configuration options within a Nuxt Bridge setup. Allows for detailed customization of Vite behavior.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  vite: {
    // Config for Vite
  }
})

----------------------------------------

TITLE: Setting Title Template in Vue Layout Component
DESCRIPTION: This snippet shows how to set a dynamic title template using the useHead composable in a Vue layout component. It demonstrates using a function to generate the title based on a provided title chunk.

LANGUAGE: vue
CODE:
<script setup lang="ts">
useHead({
  titleTemplate: (titleChunk) => {
    return titleChunk ? `${titleChunk} - Site Title` : 'Site Title';
  }
})
</script>

----------------------------------------

TITLE: Disabling Auto-imports in Nuxt Bridge
DESCRIPTION: Shows how to disable auto-importing of composables and utilities in the nuxt.config file for Nuxt Bridge.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  imports: {
    autoImport: false
  }
})

----------------------------------------

TITLE: Implementing wrapProperty in Nuxt Bridge
DESCRIPTION: Provides a custom implementation of the wrapProperty helper function, which is no longer provided in Nuxt Bridge.

LANGUAGE: javascript
CODE:
const wrapProperty = (property, makeComputed = true) => () => {
  const vm = getCurrentInstance().proxy
  return makeComputed ? computed(() => vm[property]) : vm[property]
}

----------------------------------------

TITLE: Configuring Nuxt Bridge for Page Meta Macros
DESCRIPTION: Illustrates how to enable the definePageMeta macro in Nuxt Bridge configuration. This allows the use of definePageMeta for middleware and layout in pages.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: {
    macros: {
      pageMeta: true
    }
  }
})

----------------------------------------

TITLE: Migrating defineNuxtMiddleware in JavaScript/TypeScript
DESCRIPTION: Remove the defineNuxtMiddleware wrapper and update the middleware function for TypeScript support using @nuxt/types.

LANGUAGE: diff
CODE:
- import { defineNuxtMiddleware } from '@nuxtjs/composition-api`
- export default defineNuxtMiddleware((ctx) => {})
+ export default (ctx) => {}

LANGUAGE: typescript
CODE:
import type { Middleware } from '@nuxt/types'

export default <Middleware> function (ctx) { }

----------------------------------------

TITLE: Configuring Nuxt Bridge for Composition API in TypeScript
DESCRIPTION: Update the Nuxt configuration to enable Composition API support in Nuxt Bridge.

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from '@nuxt/bridge'

export default defineNuxtConfig({
  bridge: {
    capi: true,
    nitro: false // If migration to Nitro is complete, set to true
  }
})

----------------------------------------

TITLE: Installing Nuxt Bridge Dependencies
DESCRIPTION: Commands for installing @nuxt/bridge and nuxi as development dependencies using npm or yarn

LANGUAGE: bash
CODE:
npm install -D @nuxt/bridge nuxi

LANGUAGE: bash
CODE:
yarn add --dev @nuxt/bridge nuxi

----------------------------------------

TITLE: Migrating validate hook to definePageMeta in Nuxt 3
DESCRIPTION: Shows how to migrate the validate hook from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. This hook is used to validate dynamic route parameters.

LANGUAGE: vue
CODE:
<script>
export default {
  async validate({ params }) {
    return /^\d+$/.test(params.id)
  }
}
</script>

LANGUAGE: vue
CODE:
<script setup>
definePageMeta({
  validate: async (route) => {
    const nuxtApp = useNuxtApp()
    return /^\d+$/.test(route.params.id)
  }
})
</script>

----------------------------------------

TITLE: Migrating Route Middleware from Nuxt 2 to Nuxt 3
DESCRIPTION: This snippet shows how to migrate route middleware from Nuxt 2 to Nuxt 3. It demonstrates the change from using a function with destructured arguments to using defineNuxtRouteMiddleware with to and from parameters, and the use of useState and navigateTo helpers.

LANGUAGE: javascript
CODE:
export default function ({ store, redirect }) {
  // If the user is not authenticated
  if (!store.state.authenticated) {
    return redirect('/login')
  }
}

LANGUAGE: typescript
CODE:
export default defineNuxtRouteMiddleware((to, from) => {
  const auth = useState('auth')
  if (!auth.value.authenticated) {
    return navigateTo('/login')
  }
})

----------------------------------------

TITLE: Creating a Pinia Store in Nuxt 3
DESCRIPTION: Define a Pinia store for state management in a Nuxt 3 application.

LANGUAGE: typescript
CODE:
import { defineStore } from 'pinia'

export const useMainStore = defineStore('main', {
  state: () => ({
    counter: 0,
  }),
  actions: {
    increment() {
      // `this` is the store instance
      this.counter++
    },
  },
})

----------------------------------------

TITLE: Creating TypeScript Configuration for Nuxt 3
DESCRIPTION: Set up a tsconfig.json file to enable TypeScript support in Nuxt 3 projects.

LANGUAGE: json
CODE:
{
  "extends": "./.nuxt/tsconfig.json"
}

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the releases page, setting the title, description, and navigation icon.

LANGUAGE: markdown
CODE:
---
title: 'Releases'
description: Discover the latest releases of Nuxt & Nuxt official modules.
navigation.icon: i-ph-notification
---

----------------------------------------

TITLE: Installing Dependencies for Nuxt Development
DESCRIPTION: Command to install project dependencies using pnpm with a frozen lockfile to ensure consistent installations.

LANGUAGE: bash
CODE:
pnpm install --frozen-lockfile

----------------------------------------

TITLE: Displaying Nuxt Build Time Hooks in Markdown Table
DESCRIPTION: A markdown table listing various Nuxt build time hooks, including their names, arguments, and descriptions. This table covers hooks like kit:compatibility, ready, close, and others that are called during different stages of the build process.

LANGUAGE: markdown
CODE:
Hook                     | Arguments                  | Description
-------------------------|----------------------------|-------------
`kit:compatibility`      | `compatibility, issues`    | Allows extending compatibility checks.
`ready`                  | `nuxt`                     | Called after Nuxt initialization, when the Nuxt instance is ready to work.
`close`                  | `nuxt`                     | Called when Nuxt instance is gracefully closing.
`restart`                | `{ hard?: boolean }`       | To be called to restart the current Nuxt instance.
`modules:before`         | -                          | Called during Nuxt initialization, before installing user modules.
`modules:done`           | -                          | Called during Nuxt initialization, after installing user modules.
`app:resolve`            | `app`                      | Called after resolving the `app` instance.
`app:templates`          | `app`                      | Called during `NuxtApp` generation, to allow customizing, modifying or adding new files to the build directory (either virtually or to written to `.nuxt`).
`app:templatesGenerated` | `app`                      | Called after templates are compiled into the [virtual file system](/docs/guide/directory-structure/nuxt#virtual-file-system) (vfs).
`build:before`           | -                          | Called before Nuxt bundle builder.
`build:done`             | -                          | Called after Nuxt bundle builder is complete.
`build:manifest`         | `manifest`                 | Called during the manifest build by Vite and webpack. This allows customizing the manifest that Nitro will use to render `<script>` and `<link>` tags in the final HTML.
`builder:generateApp`    | `options`                  | Called before generating the app.
`builder:watch`          | `event, path`              | Called at build time in development when the watcher spots a change to a file or directory in the project.
`pages:extend`           | `pages`                    | Called after page routes are scanned from the file system.
`pages:resolved`         | `pages`                    | Called after page routes have been augmented with scanned metadata.
`pages:routerOptions`   | `{ files: Array<{ path: string, optional?: boolean }> }` | Called when resolving `router.options` files. Later items in the array override earlier ones.
`server:devHandler`      | `handler`                  | Called when the dev middleware is being registered on the Nitro dev server.
`imports:sources`        | `presets`                  | Called at setup allowing modules to extend sources.
`imports:extend`         | `imports`                  | Called at setup allowing modules to extend imports.
`imports:context`        | `context`                  | Called when the [unimport](https://github.com/unjs/unimport) context is created.
`imports:dirs`           | `dirs`                     | Allows extending import directories.
`components:dirs`        | `dirs`                     | Called within `app:resolve` allowing to extend the directories that are scanned for auto-importable components.
`components:extend`      | `components`               | Allows extending new components.
`nitro:config`           | `nitroConfig`              | Called before initializing Nitro, allowing customization of Nitro's configuration.
`nitro:init`             | `nitro`                    | Called after Nitro is initialized, which allows registering Nitro hooks and interacting directly with Nitro.
`nitro:build:before`     | `nitro`                    | Called before building the Nitro instance.
`nitro:build:public-assets`     | `nitro`                    | Called after copying public assets. Allows modifying public assets before Nitro server is built.
`prerender:routes`       | `ctx`                      | Allows extending the routes to be pre-rendered.
`build:error`            | `error`                    | Called when an error occurs at build time.
`prepare:types`          | `options`                  | Called before Nuxi writes `.nuxt/tsconfig.json` and `.nuxt/nuxt.d.ts`, allowing addition of custom references and declarations in `nuxt.d.ts`, or directly modifying the options in `tsconfig.json`
`listen`                 | `listenerServer, listener` | Called when the dev server is loading.
`schema:extend`          | `schemas`                  | Allows extending default schemas.
`schema:resolved`        | `schema`                   | Allows extending resolved schema.
`schema:beforeWrite`     | `schema`                   | Called before writing the given schema.
`schema:written`         | -                          | Called after the schema is written.
`vite:extend`            | `viteBuildContext`         | Allows to extend Vite default context.
`vite:extendConfig`      | `viteInlineConfig, env`    | Allows to extend Vite default config.
`vite:configResolved`    | `viteInlineConfig, env`    | Allows to read the resolved Vite config.
`vite:serverCreated`     | `viteServer, env`          | Called when the Vite server is created.
`vite:compiled`          | -                          | Called after Vite server is compiled.
`webpack:config`         | `webpackConfigs`           | Called before configuring the webpack compiler.
`webpack:configResolved` | `webpackConfigs`           | Allows to read the resolved webpack config.
`webpack:compile`        | `options`                  | Called right before compilation.
`webpack:compiled`       | `options`                  | Called after resources are loaded.
`webpack:change`         | `shortPath`                | Called on `change` on WebpackBar.
`webpack:error`          | -                          | Called on `done` if has errors on WebpackBar.
`webpack:done`           | -                          | Called on `allDone` on WebpackBar.
`webpack:progress`       | `statesArray`              | Called on `progress` on WebpackBar.

----------------------------------------

TITLE: Type Definition for addImportsSources Function
DESCRIPTION: TypeScript interface definition for addImportsSources function and its related types, used for adding multiple imports from third-party packages.

LANGUAGE: typescript
CODE:
function addImportsSources (importSources: ImportSource | ImportSource[]): void

interface ImportSource extends Import {
  imports: (PresetImport | ImportSource)[]
}

type PresetImport = Omit<Import, 'from'> | string | [name: string, as?: string, from?: string]

----------------------------------------

TITLE: Example Usage of addImportsDir in VueUse Motion Module
DESCRIPTION: Example demonstrating how to use addImportsDir to automatically import all composables from a directory in a Nuxt module.

LANGUAGE: typescript
CODE:
import { defineNuxtModule, addImportsDir, createResolver } from '@nuxt/kit'

export default defineNuxtModule({
  meta: {
    name: '@vueuse/motion',
    configKey: 'motion',
  },
  setup(options, nuxt) {
    const resolver = createResolver(import.meta.url)
    addImportsDir(resolver.resolve('./runtime/composables'))
  },
})

----------------------------------------

TITLE: Loading Nuxt Config TypeScript Interface
DESCRIPTION: TypeScript interface definition for loadNuxtConfig function that loads Nuxt configuration using c12 under the hood.

LANGUAGE: typescript
CODE:
async function loadNuxtConfig (options: LoadNuxtConfigOptions): Promise<NuxtOptions>

----------------------------------------

TITLE: Opting In to Nuxt Nightly Release Channel in package.json
DESCRIPTION: Update the nuxt dependency in package.json to use the nightly release channel. This allows testing of the latest features and improvements before they are officially released.

LANGUAGE: diff
CODE:
{
  "devDependencies": {
--    "nuxt": "^3.0.0"
++    "nuxt": "npm:nuxt-nightly@3x"
  }
}