TITLE: Demonstrating Thread Deadlock in Java
DESCRIPTION: This code snippet shows how to create a deadlock situation between two threads in Java using synchronized blocks.

LANGUAGE: java
CODE:
public class DeadLockDemo {
    private static Object resource1 = new Object();//resource 1
    private static Object resource2 = new Object();//resource 2

    public static void main(String[] args) {
        new Thread(() -> {
            synchronized (resource1) {
                System.out.println(Thread.currentThread() + "get resource1");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource2");
                synchronized (resource2) {
                    System.out.println(Thread.currentThread() + "get resource2");
                }
            }
        }, "thread 1").start();

        new Thread(() -> {
            synchronized (resource2) {
                System.out.println(Thread.currentThread() + "get resource2");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource1");
                synchronized (resource1) {
                    System.out.println(Thread.currentThread() + "get resource1");
                }
            }
        }, "thread 2").start();
    }
}

----------------------------------------

TITLE: Creating Virtual Threads in Java
DESCRIPTION: Demonstrates four different methods to create virtual threads in Java: using Thread.startVirtualThread(), Thread.ofVirtual(), ThreadFactory, and Executors.newVirtualThreadPerTaskExecutor().

LANGUAGE: Java
CODE:
public class VirtualThreadTest {
  public static void main(String[] args) {
    CustomThread customThread = new CustomThread();
    Thread.startVirtualThread(customThread);
  }
}

static class CustomThread implements Runnable {
  @Override
  public void run() {
    System.out.println("CustomThread run");
  }
}

LANGUAGE: Java
CODE:
public class VirtualThreadTest {
  public static void main(String[] args) {
    CustomThread customThread = new CustomThread();
    // 创建不启动
    Thread unStarted = Thread.ofVirtual().unstarted(customThread);
    unStarted.start();
    // 创建直接启动
    Thread.ofVirtual().start(customThread);
  }
}
static class CustomThread implements Runnable {
  @Override
  public void run() {
    System.out.println("CustomThread run");
  }
}

LANGUAGE: Java
CODE:
public class VirtualThreadTest {
  public static void main(String[] args) {
    CustomThread customThread = new CustomThread();
    ThreadFactory factory = Thread.ofVirtual().factory();
    Thread thread = factory.newThread(customThread);
    thread.start();
  }
}

static class CustomThread implements Runnable {
  @Override
  public void run() {
    System.out.println("CustomThread run");
  }
}

LANGUAGE: Java
CODE:
public class VirtualThreadTest {
  public static void main(String[] args) {
    CustomThread customThread = new CustomThread();
    ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
    executor.submit(customThread);
  }
}
static class CustomThread implements Runnable {
  @Override
  public void run() {
    System.out.println("CustomThread run");
  }
}

----------------------------------------

TITLE: Basic Spring Bean Configuration with @Component
DESCRIPTION: Example of autowiring services using @Autowired and component scanning with @Component annotations

LANGUAGE: java
CODE:
@Service
public class UserService {
  ......
}

@RestController
@RequestMapping("/users")
public class UserController {
   @Autowired
   private UserService userService;
   ......
}

----------------------------------------

TITLE: Implementing double-checked locking for singleton pattern in Java
DESCRIPTION: This code demonstrates how to implement the double-checked locking pattern for a thread-safe singleton class using volatile keyword and synchronized block.

LANGUAGE: Java
CODE:
public class Singleton {

    private volatile static Singleton uniqueInstance;

    private Singleton() {
    }

    public  static Singleton getUniqueInstance() {
       if (uniqueInstance == null) {
            synchronized (Singleton.class) {
                if (uniqueInstance == null) {
                    uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }
}

----------------------------------------

TITLE: Using Sequenced Collections in Java 21
DESCRIPTION: Demonstrates the usage of Sequenced Collections, a new collection type in Java 21 that provides simple methods for handling the first and last elements of a collection and reverse views.

LANGUAGE: java
CODE:
ArrayList<Integer> arrayList = new ArrayList<>();

arrayList.add(1);   // List contains: [1]

arrayList.addFirst(0);  // List contains: [0, 1]
arrayList.addLast(2);   // List contains: [0, 1, 2]

Integer firstElement = arrayList.getFirst();  // 0
Integer lastElement = arrayList.getLast();  // 2

List<Integer> reversed = arrayList.reversed();
System.out.println(reversed); // Prints [2, 1, 0]

----------------------------------------

TITLE: Working with Streams
DESCRIPTION: Demonstrates various operations on streams including filtering, sorting, and mapping.

LANGUAGE: Java
CODE:
stringList
    .stream()
    .filter((s) -> s.startsWith("a"))
    .forEach(System.out::println);

----------------------------------------

TITLE: BigDecimal Basic Operations
DESCRIPTION: Shows basic arithmetic operations using BigDecimal to avoid precision loss.

LANGUAGE: java
CODE:
BigDecimal a = new BigDecimal("1.0");
BigDecimal b = new BigDecimal("0.9");
System.out.println(a.add(b));// 1.9
System.out.println(a.subtract(b));// 0.1
System.out.println(a.multiply(b));// 0.90
System.out.println(a.divide(b, 2, RoundingMode.HALF_UP));// 1.11

----------------------------------------

TITLE: Creating Immutable Collections in Java 9
DESCRIPTION: Demonstrates the new factory methods for creating immutable collections in Java 9, including List.of(), Set.of(), and Map.of().

LANGUAGE: java
CODE:
List.of("Java", "C++");
Set.of("Java", "C++");
Map.of("Java", 1, "C++", 2);

----------------------------------------

TITLE: Implementing Fair Lock in ReentrantLock using AQS
DESCRIPTION: This snippet demonstrates the implementation of the lock() method in the FairSync inner class of ReentrantLock, showing how it differs from the non-fair lock implementation.

LANGUAGE: Java
CODE:
// java.util.concurrent.locks.ReentrantLock#FairSync

static final class FairSync extends Sync {
  ...
  final void lock() {
    acquire(1);
  }
  ...
}

----------------------------------------

TITLE: Declarative Transaction Management with @Transactional
DESCRIPTION: Example demonstrating declarative transaction management using @Transactional annotation with propagation settings

LANGUAGE: java
CODE:
@Transactional(propagation = Propagation.REQUIRED)
public void aMethod {
  //do something
  B b = new B();
  C c = new C();
  b.bMethod();
  c.cMethod();
}

----------------------------------------

TITLE: Demonstrating String Templates in Java 21
DESCRIPTION: Examples of using String Templates, a new feature in Java 21 that provides a more concise and intuitive way to construct strings dynamically. It shows usage of STR, FMT, and RAW template processors.

LANGUAGE: java
CODE:
String name = "Lokesh";

//STR
String message = STR."Greetings \{name}.";

//FMT
String message = STR."Greetings %-12s\{name}.";

//RAW
StringTemplate st = RAW."Greetings \{name}.";
String message = STR.process(st);

----------------------------------------

TITLE: 实现归并排序算法 (Java)
DESCRIPTION: 这段代码实现了归并排序算法。它使用分治法将待排序数组递归地分成两半，分别排序后再合并。merge方法负责合并两个已排序的子数组。这是一个稳定的排序算法，总是O(nlogn)的时间复杂度。

LANGUAGE: Java
CODE:
public static int[] mergeSort(int[] arr) {
    if (arr.length <= 1) {
        return arr;
    }
    int middle = arr.length / 2;
    int[] arr_1 = Arrays.copyOfRange(arr, 0, middle);
    int[] arr_2 = Arrays.copyOfRange(arr, middle, arr.length);
    return merge(mergeSort(arr_1), mergeSort(arr_2));
}

public static int[] merge(int[] arr_1, int[] arr_2) {
    int[] sorted_arr = new int[arr_1.length + arr_2.length];
    int idx = 0, idx_1 = 0, idx_2 = 0;
    while (idx_1 < arr_1.length && idx_2 < arr_2.length) {
        if (arr_1[idx_1] < arr_2[idx_2]) {
            sorted_arr[idx] = arr_1[idx_1];
            idx_1 += 1;
        } else {
            sorted_arr[idx] = arr_2[idx_2];
            idx_2 += 1;
        }
        idx += 1;
    }
    if (idx_1 < arr_1.length) {
        while (idx_1 < arr_1.length) {
            sorted_arr[idx] = arr_1[idx_1];
            idx_1 += 1;
            idx += 1;
        }
    } else {
        while (idx_2 < arr_2.length) {
            sorted_arr[idx] = arr_2[idx_2];
            idx_2 += 1;
            idx += 1;
        }
    }
    return sorted_arr;
}

----------------------------------------

TITLE: Demonstrating volatile variable visibility in Java
DESCRIPTION: This code snippet shows how to use the volatile keyword to ensure variable visibility across threads. It declares a volatile integer variable 'inc' and defines a method to increment it.

LANGUAGE: Java
CODE:
public class VolatileAtomicityDemo {
    public volatile static int inc = 0;

    public void increase() {
        inc++;
    }

    public static void main(String[] args) throws InterruptedException {
        ExecutorService threadPool = Executors.newFixedThreadPool(5);
        VolatileAtomicityDemo volatileAtomicityDemo = new VolatileAtomicityDemo();
        for (int i = 0; i < 5; i++) {
            threadPool.execute(() -> {
                for (int j = 0; j < 500; j++) {
                    volatileAtomicityDemo.increase();
                }
            });
        }
        Thread.sleep(1500);
        System.out.println(inc);
        threadPool.shutdown();
    }
}

----------------------------------------

TITLE: Defining a Record Class in Java 14
DESCRIPTION: Shows how to use the new record keyword to define immutable data classes with automatically generated constructors, accessors, toString, equals, and hashCode methods.

LANGUAGE: java
CODE:
record Rectangle(float length, float width) { }

----------------------------------------

TITLE: AQS Class Definition
DESCRIPTION: Core class definition inheriting from AbstractOwnableSynchronizer with serialization support

LANGUAGE: java
CODE:
public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable {
}

----------------------------------------

TITLE: Comparing Synchronized and ReentrantLock Usage in Java
DESCRIPTION: This snippet demonstrates the different usage patterns of Synchronized keyword and ReentrantLock class in Java, highlighting features like reentrant locking and flexible lock acquisition methods.

LANGUAGE: Java
CODE:
// **************************Synchronized的使用方式**************************
// 1.用于代码块
synchronized (this) {}
// 2.用于对象
synchronized (object) {}
// 3.用于方法
public synchronized void test () {}
// 4.可重入
for (int i = 0; i < 100; i++) {
  synchronized (this) {}
}
// **************************ReentrantLock的使用方式**************************
public void test () throw Exception {
  // 1.初始化选择公平锁、非公平锁
  ReentrantLock lock = new ReentrantLock(true);
  // 2.可用于代码块
  lock.lock();
  try {
    try {
      // 3.支持多种加锁方式，比较灵活; 具有可重入特性
      if(lock.tryLock(100, TimeUnit.MILLISECONDS)){ }
    } finally {
      // 4.手动释放锁
      lock.unlock()
    }
  } finally {
    lock.unlock();
  }
}

----------------------------------------

TITLE: Producer-Consumer Example with ArrayBlockingQueue
DESCRIPTION: Example demonstrating producer-consumer pattern using ArrayBlockingQueue with put() and take() operations

LANGUAGE: java
CODE:
public class ProducerConsumerExample {

    public static void main(String[] args) throws InterruptedException {

        // 创建一个大小为 5 的 ArrayBlockingQueue
        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5);

        // 创建生产者线程
        Thread producer = new Thread(() -> {
            try {
                for (int i = 1; i <= 10; i++) {
                    // 向队列中添加元素，如果队列已满则阻塞等待
                    queue.put(i);
                    System.out.println("生产者添加元素：" + i);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        });

        CountDownLatch countDownLatch = new CountDownLatch(1);

        // 创建消费者线程
        Thread consumer = new Thread(() -> {
            try {
                int count = 0;
                while (true) {

                    // 从队列中取出元素，如果队列为空则阻塞等待
                    int element = queue.take();
                    System.out.println("消费者取出元素：" + element);
                    ++count;
                    if (count == 10) {
                        break;
                    }
                }

                countDownLatch.countDown();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        });

        // 启动线程
        producer.start();
        consumer.start();

        // 等待线程结束
        producer.join();
        consumer.join();

        countDownLatch.await();

        producer.interrupt();
        consumer.interrupt();
    }

}

----------------------------------------

TITLE: Put Operation in ConcurrentHashMap Java 8
DESCRIPTION: Implementation of put operation in ConcurrentHashMap for Java 8, using synchronized blocks and CAS operations.

LANGUAGE: Java
CODE:
final V putVal(K key, V value, boolean onlyIfAbsent) {
    if (key == null || value == null) throw new NullPointerException();
    int hash = spread(key.hashCode());
    int binCount = 0;
    for (Node<K,V>[] tab = table;;) {
        Node<K,V> f; int n, i, fh;
        if (tab == null || (n = tab.length) == 0)
            tab = initTable();
        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
            if (casTabAt(tab, i, null,new Node<K,V>(hash, key, value, null)))
                break;
        }
        else if ((fh = f.hash) == MOVED)
            tab = helpTransfer(tab, f);
        else {
            V oldVal = null;
            synchronized (f) {
                if (tabAt(tab, i) == f) {
                    if (fh >= 0) {
                        binCount = 1;
                        for (Node<K,V> e = f;; ++binCount) {
                            K ek;
                            if (e.hash == hash &&
                                ((ek = e.key) == key ||
                                 (ek != null && key.equals(ek)))) {
                                oldVal = e.val;
                                if (!onlyIfAbsent)
                                    e.val = value;
                                break;
                            }
                            Node<K,V> pred = e;
                            if ((e = e.next) == null) {
                                pred.next = new Node<K,V>(hash, key,
                                                          value, null);
                                break;
                            }
                        }
                    }
                    else if (f instanceof TreeBin) {
                        Node<K,V> p;
                        binCount = 2;
                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                       value)) != null) {
                            oldVal = p.val;
                            if (!onlyIfAbsent)
                                p.val = value;
                        }
                    }
                }
            }
            if (binCount != 0) {
                if (binCount >= TREEIFY_THRESHOLD)
                    treeifyBin(tab, i);
                if (oldVal != null)
                    return oldVal;
                break;
            }
        }
    }
    addCount(1L, binCount);
    return null;
}

----------------------------------------

TITLE: Using Structured Concurrency in Java
DESCRIPTION: Illustrates the basic usage of StructuredTaskScope, a key API for structured concurrency in Java. The example shows how to fork tasks, join them, and process results or exceptions.

LANGUAGE: java
CODE:
try (var scope = new StructuredTaskScope<Object>()) {
    // 使用fork方法派生线程来执行子任务
    Future<Integer> future1 = scope.fork(task1);
    Future<String> future2 = scope.fork(task2);
    // 等待线程完成
    scope.join();
    // 结果的处理可能包括处理或重新抛出异常
    ... process results/exceptions ...
} // close

----------------------------------------

TITLE: CAS Operations in Unsafe Class
DESCRIPTION: Core CAS operation methods provided by the Unsafe class for atomic operations on Object, int, and long types.

LANGUAGE: java
CODE:
/**
 * 以原子方式更新对象字段的值。
 *
 * @param o        要操作的对象
 * @param offset   对象字段的内存偏移量
 * @param expected 期望的旧值
 * @param x        要设置的新值
 * @return 如果值被成功更新，则返回 true；否则返回 false
 */
boolean compareAndSwapObject(Object o, long offset, Object expected, Object x);

/**
 * 以原子方式更新 int 类型的对象字段的值。
 */
boolean compareAndSwapInt(Object o, long offset, int expected, int x);

/**
 * 以原子方式更新 long 类型的对象字段的值。
 */
boolean compareAndSwapLong(Object o, long offset, long expected, long x);

----------------------------------------

TITLE: Creating Functional Interfaces
DESCRIPTION: Demonstrates how to create and use functional interfaces that can be implemented with lambda expressions.

LANGUAGE: Java
CODE:
@FunctionalInterface
public interface Converter<F, T> {
    T convert(F from);
}

Converter<String, Integer> converter = (from) -> Integer.valueOf(from);
Integer converted = converter.convert("123");

----------------------------------------

TITLE: Implementing acquireQueued Method in AQS
DESCRIPTION: This code snippet shows the implementation of the acquireQueued method in AbstractQueuedSynchronizer, which handles the queuing mechanism for threads waiting to acquire the lock.

LANGUAGE: Java
CODE:
// java.util.concurrent.locks.AbstractQueuedSynchronizer

final boolean acquireQueued(final Node node, int arg) {
  boolean failed = true;
  try {
    boolean interrupted = false;
    for (;;) {
      final Node p = node.predecessor();
      if (p == head && tryAcquire(arg)) {
        setHead(node);
        p.next = null; // help GC
        failed = false;
        return interrupted;
      }
      if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt())
        interrupted = true;
      }
  } finally {
    if (failed)
      cancelAcquire(node);
  }
}

----------------------------------------

TITLE: Performance Comparison of Virtual Threads and Platform Threads in Java
DESCRIPTION: A Java program that compares the performance of virtual threads and platform threads by executing a large number of tasks with simulated I/O operations. It measures the maximum number of platform threads created and the total execution time.

LANGUAGE: Java
CODE:
public class VirtualThreadTest {
    static List<Integer> list = new ArrayList<>();
    public static void main(String[] args) {
        // 开启线程 统计平台线程数
        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
        scheduledExecutorService.scheduleAtFixedRate(() -> {
            ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
            ThreadInfo[] threadInfo = threadBean.dumpAllThreads(false, false);
            updateMaxThreadNum(threadInfo.length);
        }, 10, 10, TimeUnit.MILLISECONDS);

        long start = System.currentTimeMillis();
        // 虚拟线程
        ExecutorService executor =  Executors.newVirtualThreadPerTaskExecutor();
        // 使用平台线程
        // ExecutorService executor =  Executors.newFixedThreadPool(200);
        for (int i = 0; i < 10000; i++) {
            executor.submit(() -> {
                try {
                    // 线程睡眠 0.5 s，模拟业务处理
                    TimeUnit.MILLISECONDS.sleep(500);
                } catch (InterruptedException ignored) {
                }
            });
        }
        executor.close();
        System.out.println("max：" + list.get(0) + " platform thread/os thread");
        System.out.printf("totalMillis：%dms\n", System.currentTimeMillis() - start);


    }
    // 更新创建的平台最大线程数
    private static void updateMaxThreadNum(int num) {
        if (list.isEmpty()) {
            list.add(num);
        } else {
            Integer integer = list.get(0);
            if (num > integer) {
                list.add(0, num);
            }
        }
    }
}

----------------------------------------

TITLE: ThreadLocal Basic Usage Example in Java
DESCRIPTION: Demonstrates basic usage of ThreadLocal to provide thread-local variables.

LANGUAGE: java
CODE:
public class ThreadLocalExample {
    private static ThreadLocal<Integer> threadLocal = ThreadLocal.withInitial(() -> 0);

    public static void main(String[] args) {
        Runnable task = () -> {
            int value = threadLocal.get();
            value += 1;
            threadLocal.set(value);
            System.out.println(Thread.currentThread().getName() + " Value: " + threadLocal.get());
        };

        Thread thread1 = new Thread(task, "Thread-1");
        Thread thread2 = new Thread(task, "Thread-2");

        thread1.start(); // Output: Thread-1 Value: 1
        thread2.start(); // Output: Thread-2 Value: 1
    }
}

----------------------------------------

TITLE: Simplified Main Method Declaration in Java 21
DESCRIPTION: Demonstrates the new feature in Java 21 that simplifies the declaration of the main method, making it easier for beginners to start with Java programming.

LANGUAGE: java
CODE:
void main() {
   System.out.println("Hello, World!");
}

----------------------------------------

TITLE: 创建FixedThreadPool线程池
DESCRIPTION: 使用Executors类创建一个固定线程数的线程池FixedThreadPool

LANGUAGE: java
CODE:
public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {
    return new ThreadPoolExecutor(nThreads, nThreads,
                                  0L, TimeUnit.MILLISECONDS,
                                  new LinkedBlockingQueue<Runnable>(),
                                  threadFactory);
}

----------------------------------------

TITLE: Pattern Matching for switch in Java 17 (Preview)
DESCRIPTION: Demonstrates the new pattern matching capabilities for switch statements, allowing for more concise and readable code when handling multiple types.

LANGUAGE: Java
CODE:
// Old code
static String formatter(Object o) {
    String formatted = "unknown";
    if (o instanceof Integer i) {
        formatted = String.format("int %d", i);
    } else if (o instanceof Long l) {
        formatted = String.format("long %d", l);
    } else if (o instanceof Double d) {
        formatted = String.format("double %f", d);
    } else if (o instanceof String s) {
        formatted = String.format("String %s", s);
    }
    return formatted;
}

// New code
static String formatterPatternSwitch(Object o) {
    return switch (o) {
        case Integer i -> String.format("int %d", i);
        case Long l    -> String.format("long %d", l);
        case Double d  -> String.format("double %f", d);
        case String s  -> String.format("String %s", s);
        default        -> o.toString();
    };
}

----------------------------------------

TITLE: Defining SPI Interface in Java
DESCRIPTION: Example of defining a Logger interface as a Service Provider Interface.

LANGUAGE: Java
CODE:
package edu.jiangxuan.up.spi;

public interface Logger {
    void info(String msg);
    void debug(String msg);
}

----------------------------------------

TITLE: Using try-with-resources in Java
DESCRIPTION: This code snippet demonstrates how to use the try-with-resources statement in Java to automatically close resources that implement AutoCloseable or Closeable interfaces.

LANGUAGE: Java
CODE:
try (Scanner scanner = new Scanner(new File("test.txt"))) {
    while (scanner.hasNext()) {
        System.out.println(scanner.nextLine());
    }
} catch (FileNotFoundException fnfe) {
    fnfe.printStackTrace();
}

----------------------------------------

TITLE: Using Enhanced Pseudo-Random Number Generators in Java 17
DESCRIPTION: Demonstrates how to use the new RandomGeneratorFactory to create and use enhanced pseudo-random number generators. This example uses the L128X256MixRandom algorithm with a timestamp seed.

LANGUAGE: Java
CODE:
RandomGeneratorFactory<RandomGenerator> l128X256MixRandom = RandomGeneratorFactory.of("L128X256MixRandom");
// 使用时间戳作为随机数种子
RandomGenerator randomGenerator = l128X256MixRandom.create(System.currentTimeMillis());
// 生成随机数
randomGenerator.nextInt(10);

----------------------------------------

TITLE: 使用INNER JOIN进行延迟关联优化
DESCRIPTION: 这个SQL查询展示了如何使用INNER JOIN进行延迟关联，将LIMIT操作转移到主键索引树上，减少回表次数。这种方法通常比直接使用子查询更高效。

LANGUAGE: sql
CODE:
SELECT t1.*
FROM t_order t1
INNER JOIN (SELECT id FROM t_order where id > 1000000 LIMIT 10) t2 ON t1.id = t2.id;

----------------------------------------

TITLE: Implementing Feign RequestInterceptor for Distributed Tracing
DESCRIPTION: Shows how to implement a Feign RequestInterceptor to propagate a traceId across service calls using ThreadLocal and MDC.

LANGUAGE: Java
CODE:
@Component
@Slf4j
public class FeignInvokeInterceptor implements RequestInterceptor {

    @Override
    public void apply(RequestTemplate template) {
        String requestId = MDC.get("requestId");
        if (StringUtils.isNotBlank(requestId)) {
            template.header("requestId", requestId);
        }
    }
}

----------------------------------------

TITLE: Improved null Handling in switch Statements in Java 17
DESCRIPTION: Shows how null values can be handled more elegantly in switch statements, reducing the need for separate null checks before the switch.

LANGUAGE: Java
CODE:
// Old code
static void testFooBar(String s) {
    if (s == null) {
        System.out.println("oops!");
        return;
    }
    switch (s) {
        case "Foo", "Bar" -> System.out.println("Great");
        default           -> System.out.println("Ok");
    }
}

// New code
static void testFooBar(String s) {
    switch (s) {
        case null         -> System.out.println("Oops");
        case "Foo", "Bar" -> System.out.println("Great");
        default           -> System.out.println("Ok");
    }
}

----------------------------------------

TITLE: Using Redisson for Distributed Locks in Java
DESCRIPTION: Demonstrates how to use Redisson to implement a distributed lock with automatic expiration renewal in Java.

LANGUAGE: java
CODE:
// 1.获取指定的分布式锁对象
RLock lock = redisson.getLock("lock");
// 2.拿锁且不设置锁超时时间，具备 Watch Dog 自动续期机制
lock.lock();
// 3.执行业务
...
// 4.释放锁
lock.unlock();

----------------------------------------

TITLE: Creating Unsafe Instance in Java
DESCRIPTION: Demonstrates how to obtain an instance of the Unsafe class using reflection, bypassing access restrictions.

LANGUAGE: java
CODE:
private static Unsafe reflectGetUnsafe() {
    try {
      Field field = Unsafe.class.getDeclaredField("theUnsafe");
      field.setAccessible(true);
      return (Unsafe) field.get(null);
    } catch (Exception e) {
      log.error(e.getMessage(), e);
      return null;
    }
}

----------------------------------------

TITLE: Using Stream Operations in Java 8
DESCRIPTION: Examples of common Stream operations like filtering, mapping, sorting, and collecting.

LANGUAGE: java
CODE:
List<String> strings = Arrays.asList("abc", "def", "gkh", "abc");
//返回符合条件的stream
Stream<String> stringStream = strings.stream().filter(s -> "abc".equals(s));
//计算流符合条件的流的数量
long count = stringStream.count();

//forEach遍历->打印元素
strings.stream().forEach(System.out::println);

//limit 获取到1个元素的stream
Stream<String> limit = strings.stream().limit(1);
//toArray 比如我们想看这个limitStream里面是什么，比如转换成String[],比如循环
String[] array = limit.toArray(String[]::new);

//map 对每个元素进行操作返回新流
Stream<String> map = strings.stream().map(s -> s + "22");

//sorted 排序并打印
strings.stream().sorted().forEach(System.out::println);

//Collectors collect 把abc放入容器中
List<String> collect = strings.stream().filter(string -> "abc".equals(string)).collect(Collectors.toList());
//把list转为string，各元素用，号隔开
String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(","));

----------------------------------------

TITLE: Private Interface Methods in Java 9
DESCRIPTION: Shows how to define private methods in interfaces, a new feature in Java 9 that allows for more flexible interface design.

LANGUAGE: java
CODE:
public interface MyInterface {
    private void methodPrivate(){
    }
}

----------------------------------------

TITLE: Implementing Pattern Matching for switch in Java 21
DESCRIPTION: Shows how to use pattern matching in switch expressions and statements, allowing case labels to use patterns. When a pattern matches, the code associated with the case label is executed.

LANGUAGE: java
CODE:
static String formatterPatternSwitch(Object obj) {
    return switch (obj) {
        case Integer i -> String.format("int %d", i);
        case Long l    -> String.format("long %d", l);
        case Double d  -> String.format("double %f", d);
        case String s  -> String.format("String %s", s);
        default        -> obj.toString();
    };
}

----------------------------------------

TITLE: ArrayList Class Declaration and Fields
DESCRIPTION: Basic class declaration and field definitions for ArrayList implementation

LANGUAGE: java
CODE:
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable{
  private static final long serialVersionUID = 8683452581122892189L;
  private static final int DEFAULT_CAPACITY = 10;
  private static final Object[] EMPTY_ELEMENTDATA = {};
  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
  transient Object[] elementData;
  private int size;
}

----------------------------------------

TITLE: Initializing ConcurrentHashMap in Java 7
DESCRIPTION: Constructor for ConcurrentHashMap in Java 7, setting up initial capacity, load factor, and concurrency level.

LANGUAGE: Java
CODE:
@SuppressWarnings("unchecked")
public ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel) {
    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)
        throw new IllegalArgumentException();
    if (concurrencyLevel > MAX_SEGMENTS)
        concurrencyLevel = MAX_SEGMENTS;
    int sshift = 0;
    int ssize = 1;
    while (ssize < concurrencyLevel) {
        ++sshift;
        ssize <<= 1;
    }
    this.segmentShift = 32 - sshift;
    this.segmentMask = ssize - 1;
    if (initialCapacity > MAXIMUM_CAPACITY)
        initialCapacity = MAXIMUM_CAPACITY;
    int c = initialCapacity / ssize;
    if (c * ssize < initialCapacity)
        ++c;
    int cap = MIN_SEGMENT_TABLE_CAPACITY;
    while (cap < c)
        cap <<= 1;
    Segment<K,V> s0 = new Segment<K,V>(loadFactor, (int)(cap * loadFactor),
                         (HashEntry<K,V>[])new HashEntry[cap]);
    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize];
    UNSAFE.putOrderedObject(ss, SBASE, s0);
    this.segments = ss;
}

----------------------------------------

TITLE: Demonstrating ReentrantLock usage in Java
DESCRIPTION: This code snippet illustrates how to use ReentrantLock for thread synchronization, showing both fair and non-fair lock implementations.

LANGUAGE: Java
CODE:
public void performSynchronisedTask() {
    synchronized (this) {
        // 需要同步的操作
    }
}

private Lock lock = new ReentrantLock();
lock.lock();
try {
   // 需要同步的操作
} finally {
    lock.unlock();
}

----------------------------------------

TITLE: Get Operation in ConcurrentHashMap Java 8
DESCRIPTION: Implementation of get operation in ConcurrentHashMap for Java 8.

LANGUAGE: Java
CODE:
public V get(Object key) {
    Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;
    int h = spread(key.hashCode());
    if ((tab = table) != null && (n = tab.length) > 0 &&
        (e = tabAt(tab, (n - 1) & h)) != null) {
        if ((eh = e.hash) == h) {
            if ((ek = e.key) == key || (ek != null && key.equals(ek)))
                return e.val;
        }
        else if (eh < 0)
            return (p = e.find(h, key)) != null ? p.val : null;
        while ((e = e.next) != null) {
            if (e.hash == h &&
                ((ek = e.key) == key || (ek != null && key.equals(ek))))
                return e.val;
        }
    }
    return null;
}

----------------------------------------

TITLE: Implementing Data Masking with Hutool in Java
DESCRIPTION: Demonstrates how to use Hutool's DesensitizedUtil to mask sensitive data like phone numbers, bank card numbers, ID card numbers, and passwords.

LANGUAGE: java
CODE:
import cn.hutool.core.util.DesensitizedUtil;
import org.junit.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class HuToolDesensitizationTest {

    @Test
    public void testPhoneDesensitization(){
        String phone="13723231234";
        System.out.println(DesensitizedUtil.mobilePhone(phone)); //Output: 137****1234
    }
    @Test
    public void testBankCardDesensitization(){
        String bankCard="6217000130008255666";
        System.out.println(DesensitizedUtil.bankCard(bankCard)); //Output: 6217 **** **** *** 5666
    }

    @Test
    public void testIdCardNumDesensitization(){
        String idCardNum="411021199901102321";
        System.out.println(DesensitizedUtil.idCardNum(idCardNum,4,2)); //Output: 4110************21
    }
    @Test
    public void testPasswordDesensitization(){
        String password="www.jd.com_35711";
        System.out.println(DesensitizedUtil.password(password)); //Output: ****************
    }
}

----------------------------------------

TITLE: LinkedList Node Class Implementation
DESCRIPTION: Definition of the Node class used internally by LinkedList to represent elements in the double-linked list structure

LANGUAGE: java
CODE:
private static class Node<E> {
    E item;
    Node<E> next;
    Node<E> prev;
    Node(Node<E> prev, E element, Node<E> next) {
        this.item = element;
        this.next = next;
        this.prev = prev;
    }
}

----------------------------------------

TITLE: Implementing Serializable Interface in Java
DESCRIPTION: Demonstrates how to make a Java class serializable by implementing the Serializable interface. The example includes annotations for constructors, getters, and builders.

LANGUAGE: Java
CODE:
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Builder
@ToString
public class RpcRequest implements Serializable {
    private static final long serialVersionUID = 1905122041950251207L;
    private String requestId;
    private String interfaceName;
    private String methodName;
    private Object[] parameters;
    private Class<?>[] paramTypes;
    private RpcMessageTypeEnum rpcMessageTypeEnum;
}

----------------------------------------

TITLE: Defining Sealed Classes in Java 15
DESCRIPTION: Shows how to use the new sealed keyword to restrict which classes can inherit from a sealed class, providing more control over class hierarchies.

LANGUAGE: java
CODE:
public abstract sealed class Person
    permits Employee, Manager {

    //...
}

public final class Employee extends Person {
}

public non-sealed class Manager extends Person {
}

----------------------------------------

TITLE: Synchronous Kafka Message Sending in Java
DESCRIPTION: Example of sending a Kafka message synchronously and checking the result using Spring Kafka KafkaTemplate

LANGUAGE: Java
CODE:
SendResult<String, Object> sendResult = kafkaTemplate.send(topic, o).get();
if (sendResult.getRecordMetadata() != null) {
  logger.info("生产者成功发送消息到" + sendResult.getProducerRecord().topic() + "-> " + sendResult.getProducerRecord().value().toString());
}

----------------------------------------

TITLE: Using Lambda Expressions for Sorting
DESCRIPTION: Shows how to use lambda expressions to simplify sorting operations compared to anonymous inner classes.

LANGUAGE: Java
CODE:
Collections.sort(names, (String a, String b) -> {
    return b.compareTo(a);
});

----------------------------------------

TITLE: Basic Transaction Example with DAO Pattern
DESCRIPTION: Example showing a simple transaction involving two DAO operations that need to be executed atomically

LANGUAGE: java
CODE:
public void savePerson() {
    personDao.save(person);
    personDetailDao.save(personDetail);
}

----------------------------------------

TITLE: Implementing Dynamic Proxy using Reflection in Java
DESCRIPTION: This code snippet demonstrates how to implement a dynamic proxy in Java using the Reflection API. It shows a DebugInvocationHandler class that implements the InvocationHandler interface.

LANGUAGE: Java
CODE:
public class DebugInvocationHandler implements InvocationHandler {
    private final Object target;

    public DebugInvocationHandler(Object target) {
        this.target = target;
    }

    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {
        System.out.println("before method " + method.getName());
        Object result = method.invoke(target, args);
        System.out.println("after method " + method.getName());
        return result;
    }
}

----------------------------------------

TITLE: Implementing tryAcquire Method for Fair and Non-Fair Locks in ReentrantLock
DESCRIPTION: These code snippets show the implementation of the tryAcquire method for both fair and non-fair locks in ReentrantLock, demonstrating how reentrant locking is achieved.

LANGUAGE: Java
CODE:
// Fair Lock
// java.util.concurrent.locks.ReentrantLock.FairSync#tryAcquire

if (c == 0) {
  if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {
    setExclusiveOwnerThread(current);
    return true;
  }
}
else if (current == getExclusiveOwnerThread()) {
  int nextc = c + acquires;
  if (nextc < 0)
    throw new Error("Maximum lock count exceeded");
  setState(nextc);
  return true;
}

// Non-Fair Lock
// java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire

if (c == 0) {
  if (compareAndSetState(0, acquires)){
    setExclusiveOwnerThread(current);
    return true;
  }
}
else if (current == getExclusiveOwnerThread()) {
  int nextc = c + acquires;
  if (nextc < 0) // overflow
    throw new Error("Maximum lock count exceeded");
  setState(nextc);
  return true;
}

----------------------------------------

TITLE: BigDecimal Utility Class Implementation
DESCRIPTION: A comprehensive utility class providing simplified BigDecimal operations with proper precision handling.

LANGUAGE: java
CODE:
import java.math.BigDecimal;
import java.math.RoundingMode;

public class BigDecimalUtil {
    private static final int DEF_DIV_SCALE = 10;

    private BigDecimalUtil() {}

    public static double add(double v1, double v2) {
        BigDecimal b1 = BigDecimal.valueOf(v1);
        BigDecimal b2 = BigDecimal.valueOf(v2);
        return b1.add(b2).doubleValue();
    }

    public static double subtract(double v1, double v2) {
        BigDecimal b1 = BigDecimal.valueOf(v1);
        BigDecimal b2 = BigDecimal.valueOf(v2);
        return b1.subtract(b2).doubleValue();
    }

    public static double multiply(double v1, double v2) {
        BigDecimal b1 = BigDecimal.valueOf(v1);
        BigDecimal b2 = BigDecimal.valueOf(v2);
        return b1.multiply(b2).doubleValue();
    }

    public static double divide(double v1, double v2) {
        return divide(v1, v2, DEF_DIV_SCALE);
    }

    public static double divide(double v1, double v2, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException(
                    "The scale must be a positive integer or zero");
        }
        BigDecimal b1 = BigDecimal.valueOf(v1);
        BigDecimal b2 = BigDecimal.valueOf(v2);
        return b1.divide(b2, scale, RoundingMode.HALF_EVEN).doubleValue();
    }

    public static double round(double v, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException(
                    "The scale must be a positive integer or zero");
        }
        BigDecimal b = BigDecimal.valueOf(v);
        BigDecimal one = new BigDecimal("1");
        return b.divide(one, scale, RoundingMode.HALF_UP).doubleValue();
    }
}

----------------------------------------

TITLE: JPA Entity Configuration
DESCRIPTION: Example of configuring a JPA entity with validation and auditing using various JPA annotations

LANGUAGE: java
CODE:
@Entity
@Table(name = "role")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    @Enumerated(EnumType.STRING)
    private Gender gender;
}

----------------------------------------

TITLE: Using Curator for ZooKeeper-based Distributed Locks
DESCRIPTION: Shows how to use Curator to implement various types of distributed locks using ZooKeeper.

LANGUAGE: java
CODE:
CuratorFramework client = ZKUtils.getClient();
client.start();
// 分布式可重入排它锁
InterProcessLock lock1 = new InterProcessMutex(client, lockPath1);
// 分布式不可重入排它锁
InterProcessLock lock2 = new InterProcessSemaphoreMutex(client, lockPath2);
// 将多个锁作为一个整体
InterProcessMultiLock lock = new InterProcessMultiLock(Arrays.asList(lock1, lock2));

if (!lock.acquire(10, TimeUnit.SECONDS)) {
   throw new IllegalStateException("不能获取多锁");
}
System.out.println("已获取多锁");
System.out.println("是否有第一个锁: " + lock1.isAcquiredInThisProcess());
System.out.println("是否有第二个锁: " + lock2.isAcquiredInThisProcess());
try {
    // 资源操作
    resource.use();
} finally {
    System.out.println("释放多个锁");
    lock.release();
}
System.out.println("是否有第一个锁: " + lock1.isAcquiredInThisProcess());
System.out.println("是否有第二个锁: " + lock2.isAcquiredInThisProcess());
client.close();

----------------------------------------

TITLE: Implementing a Generic Class in Java
DESCRIPTION: This code snippet shows how to define and use a generic class in Java. It demonstrates a simple Generic class that can hold any type of object.

LANGUAGE: Java
CODE:
public class Generic<T>{
    private T key;

    public Generic(T key) {
        this.key = key;
    }

    public T getKey(){
        return key;
    }
}

----------------------------------------

TITLE: ThreadPool Parameters Test Example in Java
DESCRIPTION: Tests thread pool parameters and demonstrates CallerRunsPolicy behavior

LANGUAGE: java
CODE:
public class ThreadPoolTest {
    private static final Logger log = LoggerFactory.getLogger(ThreadPoolTest.class);

    public static void main(String[] args) {
        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1,
                2,
                60,
                TimeUnit.SECONDS,
                new ArrayBlockingQueue<>(1),
                new ThreadPoolExecutor.CallerRunsPolicy());

        threadPoolExecutor.execute(() -> {
            log.info("核心线程执行第一个任务");
            ThreadUtil.sleep(1, TimeUnit.MINUTES);
        });

        threadPoolExecutor.execute(() -> {
            log.info("非核心线程处理入队的第二个任务");
            ThreadUtil.sleep(1, TimeUnit.MINUTES);
        });

        threadPoolExecutor.execute(() -> {
            log.info("非核心线程处理第三个任务");
            ThreadUtil.sleep(1, TimeUnit.MINUTES);
        });

        threadPoolExecutor.execute(() -> {
            log.info("主线程处理第四个任务");
            ThreadUtil.sleep(2, TimeUnit.MINUTES);
        });

        threadPoolExecutor.execute(() -> {
            log.info("核心线程执行第五个任务");
        });

        threadPoolExecutor.shutdown();
    }
}

----------------------------------------

TITLE: Aggregate Window Functions with OVER Clause
DESCRIPTION: Examples of using aggregate functions SUM(), AVG(), COUNT(), MIN(), MAX() with window functions for running totals and moving aggregates.

LANGUAGE: sql
CODE:
SELECT col1, col2, SUM(col1) OVER () AS sum_col
FROM table;

LANGUAGE: sql
CODE:
SELECT col1, col2, LEAD(col1, 1) OVER (ORDER BY col1) AS next_col1,
                 LAG(col1, 1) OVER (ORDER BY col1) AS prev_col1
FROM table;

LANGUAGE: sql
CODE:
SELECT col1, col2, FIRST_VALUE(col2) OVER (PARTITION BY col1 ORDER BY col2) AS first_val,
                 LAST_VALUE(col2) OVER (PARTITION BY col1 ORDER BY col2) AS last_val
FROM table;

----------------------------------------

TITLE: Decoding JWT Example in JSON
DESCRIPTION: An example of a decoded JWT showing the Header and Payload components in JSON format. This demonstrates the structure of a typical JWT.

LANGUAGE: json
CODE:
{
  "alg": "HS256",
  "typ": "JWT"
}

LANGUAGE: json
CODE:
{
  "uid": "ff1212f5-d8d1-4496-bf41-d2dda73de19a",
  "sub": "1234567890",
  "name": "John Doe",
  "exp": 15323232,
  "iat": 1516239022,
  "scope": ["admin", "user"]
}

----------------------------------------

TITLE: Dumping Thread Information in Java
DESCRIPTION: This code snippet demonstrates how to dump information about all threads in a Java program using the ThreadMXBean.

LANGUAGE: java
CODE:
public class MultiThread {
	public static void main(String[] args) {
		// Get Java thread management MXBean
	ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
		// Only get thread and thread stack information, no need to get synchronized monitor and synchronizer info
		ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(false, false);
		// Iterate through thread info, only print thread ID and thread name 
		for (ThreadInfo threadInfo : threadInfos) {
			System.out.println("[" + threadInfo.getThreadId() + "] " + threadInfo.getThreadName());
		}
	}
}

----------------------------------------

TITLE: Semaphore Try Acquire Implementation
DESCRIPTION: Non-fair tryAcquire implementation for Semaphore, showing shared state management

LANGUAGE: java
CODE:
final int nonfairTryAcquireShared(int acquires) {
    for (;;) {
        int available = getState();
        int remaining = available - acquires;
        if (remaining < 0 ||
            compareAndSetState(available, remaining))
            return remaining;
    }
}

----------------------------------------

TITLE: Demonstrating Unnamed Patterns and Variables in Java 21
DESCRIPTION: Illustrates the use of unnamed patterns and variables using the underscore '_' to represent unnamed variables and unused components in pattern matching, improving code readability and maintainability.

LANGUAGE: java
CODE:
try (var _ = ScopedContext.acquire()) {
  // No use of acquired resource
}
try { ... }
catch (Exception _) { ... }
catch (Throwable _) { ... }

for (int i = 0, _ = runOnce(); i < arr.length; i++) {
  ...
}

if (r instanceof ColoredPoint(_, Color c)) { ... c ... }

switch (b) {
    case Box(RedBall _), Box(BlueBall _) -> processBox(b);
    case Box(GreenBall _)                -> stopProcessing();
    case Box(_)                          -> pickAnotherBox();
}

----------------------------------------

TITLE: Money Transfer Transaction Example
DESCRIPTION: Example demonstrating a typical money transfer transaction with proper transaction management using @Transactional annotation

LANGUAGE: java
CODE:
public class OrdersService {
  private AccountDao accountDao;

  public void setOrdersDao(AccountDao accountDao) {
    this.accountDao = accountDao;
  }

  @Transactional(propagation = Propagation.REQUIRED,
                isolation = Isolation.DEFAULT, readOnly = false, timeout = -1)
  public void accountMoney() {
    //小红账户多1000
    accountDao.addMoney(1000,xiaohong);
    //模拟突然出现的异常，比如银行中可能为突然停电等等
    //如果没有配置事务管理的话会造成，小红账户多了1000而小明账户没有少钱
    int i = 10 / 0;
    //小王账户少1000
    accountDao.reduceMoney(1000,xiaoming);
  }
}

----------------------------------------

TITLE: Setting Redis Lock with Expiration
DESCRIPTION: Shows how to set a Redis lock with an expiration time to prevent indefinite locking.

LANGUAGE: bash
CODE:
127.0.0.1:6379> SET lockKey uniqueValue EX 3 NX
OK

----------------------------------------

TITLE: Using BigDecimal for precise decimal arithmetic in Java
DESCRIPTION: This code snippet shows how to use BigDecimal for precise decimal arithmetic in Java, avoiding the precision loss issues associated with floating-point types.

LANGUAGE: Java
CODE:
BigDecimal a = new BigDecimal("1.0");
BigDecimal b = new BigDecimal("1.00");
BigDecimal c = new BigDecimal("0.8");

BigDecimal x = a.subtract(c);
BigDecimal y = b.subtract(c);

System.out.println(x); /* 0.2 */
System.out.println(y); /* 0.20 */
// 比较内容，不是比较值
System.out.println(Objects.equals(x, y)); /* false */
// 比较值相等用相等compareTo，相等返回0
System.out.println(0 == x.compareTo(y)); /* true */

----------------------------------------

TITLE: ArrayList Growth Mechanism Implementation
DESCRIPTION: Core methods handling ArrayList's dynamic resizing capabilities

LANGUAGE: java
CODE:
private void grow(int minCapacity) {
    int oldCapacity = elementData.length;
    int newCapacity = oldCapacity + (oldCapacity >> 1);
    if (newCapacity - minCapacity < 0)
        newCapacity = minCapacity;
    if (newCapacity - MAX_ARRAY_SIZE > 0)
        newCapacity = hugeCapacity(minCapacity);
    elementData = Arrays.copyOf(elementData, newCapacity);
}

----------------------------------------

TITLE: Pattern Matching with instanceof in Java 17
DESCRIPTION: Shows the improved pattern matching with instanceof, which allows for automatic type conversion. This simplifies type checking and casting in conditional statements.

LANGUAGE: Java
CODE:
// Old code
if (o instanceof String) {
    String s = (String)o;
    ... use s ...
}

// New code
if (o instanceof String s) {
    ... use s ...
}

----------------------------------------

TITLE: 实现插入排序算法 (Java)
DESCRIPTION: 这段代码实现了插入排序算法。它通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。代码中使用了while循环来寻找插入位置，并在过程中移动元素。

LANGUAGE: Java
CODE:
public static int[] insertionSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        int preIndex = i - 1;
        int current = arr[i];
        while (preIndex >= 0 && current < arr[preIndex]) {
            arr[preIndex + 1] = arr[preIndex];
            preIndex -= 1;
        }
        arr[preIndex + 1] = current;
    }
    return arr;
}

----------------------------------------

TITLE: 使用EXPLAIN分析SQL执行计划
DESCRIPTION: 使用EXPLAIN命令分析SELECT查询的执行计划

LANGUAGE: sql
CODE:
EXPLAIN SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;

----------------------------------------

TITLE: 查看MySQL默认存储引擎
DESCRIPTION: 使用SHOW VARIABLES LIKE命令查看MySQL当前默认的存储引擎

LANGUAGE: sql
CODE:
SHOW VARIABLES LIKE '%storage_engine%';

----------------------------------------

TITLE: Implementing LoggerService with Java SPI
DESCRIPTION: Implementation of LoggerService class that uses ServiceLoader to load and manage Logger implementations.

LANGUAGE: Java
CODE:
package edu.jiangxuan.up.spi;

import java.util.ArrayList;
import java.util.List;
import java.util.ServiceLoader;

public class LoggerService {
    private static final LoggerService SERVICE = new LoggerService();

    private final Logger logger;
    private final List<Logger> loggerList;

    private LoggerService() {
        ServiceLoader<Logger> loader = ServiceLoader.load(Logger.class);
        List<Logger> list = new ArrayList<>();
        for (Logger log : loader) {
            list.add(log);
        }
        loggerList = list;
        logger = list.isEmpty() ? null : list.get(0);
    }

    public static LoggerService getService() {
        return SERVICE;
    }

    public void info(String msg) {
        if (logger == null) {
            System.out.println("info 中没有发现 Logger 服务提供者");
        } else {
            logger.info(msg);
        }
    }

    public void debug(String msg) {
        if (loggerList.isEmpty()) {
            System.out.println("debug 中没有发现 Logger 服务提供者");
        }
        loggerList.forEach(log -> log.debug(msg));
    }
}

----------------------------------------

TITLE: Protobuf Message Definition
DESCRIPTION: Illustrates a simple Protobuf message definition for a Person object with name and age fields. This .proto file can be compiled into language-specific classes for serialization.

LANGUAGE: Protobuf
CODE:
syntax = "proto3";

message Person {
  string name = 1;
  int32 age = 2;
}

----------------------------------------

TITLE: 实现堆排序算法 (Java)
DESCRIPTION: 这段代码实现了堆排序算法。它首先构建一个最大堆，然后重复地将堆顶元素（最大值）与堆的最后一个元素交换，并调整堆，直到堆的大小减少为1。heapify方法用于调整堆，使其满足最大堆的性质。

LANGUAGE: Java
CODE:
static int heapLen;

private static void swap(int[] arr, int i, int j) {
    int tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

private static void buildMaxHeap(int[] arr) {
    for (int i = arr.length / 2 - 1; i >= 0; i--) {
        heapify(arr, i);
    }
}

private static void heapify(int[] arr, int i) {
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    int largest = i;
    if (right < heapLen && arr[right] > arr[largest]) {
        largest = right;
    }
    if (left < heapLen && arr[left] > arr[largest]) {
        largest = left;
    }
    if (largest != i) {
        swap(arr, largest, i);
        heapify(arr, largest);
    }
}

public static int[] heapSort(int[] arr) {
    heapLen = arr.length;
    buildMaxHeap(arr);
    for (int i = arr.length - 1; i > 0; i--) {
        swap(arr, 0, i);
        heapLen -= 1;
        heapify(arr, 0);
    }
    return arr;
}

----------------------------------------

TITLE: Basic Window Functions in MySQL
DESCRIPTION: Examples of common window functions in MySQL including ROW_NUMBER(), RANK(), DENSE_RANK(), and NTILE() for result set calculations.

LANGUAGE: sql
CODE:
SELECT col1, col2, ROW_NUMBER() OVER (ORDER BY col1) AS row_num
FROM table;

LANGUAGE: sql
CODE:
SELECT col1, col2, RANK() OVER (ORDER BY col1 DESC) AS ranking
FROM table;

LANGUAGE: sql
CODE:
SELECT col1, col2, DENSE_RANK() OVER (ORDER BY col1 DESC) AS ranking
FROM table;

LANGUAGE: sql
CODE:
SELECT col1, col2, NTILE(4) OVER (ORDER BY col1) AS bucket
FROM table;

----------------------------------------

TITLE: Custom Kafka Error Handler Configuration in Java
DESCRIPTION: Example of configuring a custom error handler for Kafka consumers with retry settings using Spring Kafka

LANGUAGE: Java
CODE:
@Bean
public KafkaListenerContainerFactory kafkaListenerContainerFactory(ConsumerFactory<String, String> consumerFactory) {
    ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory();
    // 自定义重试时间间隔以及次数
    FixedBackOff fixedBackOff = new FixedBackOff(1000, 5);
    factory.setCommonErrorHandler(new DefaultErrorHandler(fixedBackOff));
    factory.setConsumerFactory(consumerFactory);
    return factory;
}

----------------------------------------

TITLE: String Enhancements in Java 11
DESCRIPTION: Showcases the new String processing methods introduced in Java 11, including isBlank(), strip(), repeat(), and lines().

LANGUAGE: java
CODE:
//判断字符串是否为空
" ".isBlank();//true
//去除字符串首尾空格
" Java ".strip();// "Java"
//去除字符串首部空格
" Java ".stripLeading();   // "Java "
//去除字符串尾部空格
" Java ".stripTrailing();  // " Java"
//重复字符串多少次
"Java".repeat(3);             // "JavaJavaJava"
//返回由行终止符分隔的字符串集合。
"A\nB\nC".lines().count();    // 3
"A\nB\nC".lines().collect(Collectors.toList());

----------------------------------------

TITLE: Kryo Serialization Implementation in Java
DESCRIPTION: Shows the implementation of a Kryo serializer class in Java. This class provides methods for serializing objects to byte arrays and deserializing byte arrays back to objects using Kryo.

LANGUAGE: Java
CODE:
@Slf4j
public class KryoSerializer implements Serializer {

    private final ThreadLocal<Kryo> kryoThreadLocal = ThreadLocal.withInitial(() -> {
        Kryo kryo = new Kryo();
        kryo.register(RpcResponse.class);
        kryo.register(RpcRequest.class);
        return kryo;
    });

    @Override
    public byte[] serialize(Object obj) {
        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
             Output output = new Output(byteArrayOutputStream)) {
            Kryo kryo = kryoThreadLocal.get();
            kryo.writeObject(output, obj);
            kryoThreadLocal.remove();
            return output.toBytes();
        } catch (Exception e) {
            throw new SerializeException("Serialization failed");
        }
    }

    @Override
    public <T> T deserialize(byte[] bytes, Class<T> clazz) {
        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
             Input input = new Input(byteArrayInputStream)) {
            Kryo kryo = kryoThreadLocal.get();
            Object o = kryo.readObject(input, clazz);
            kryoThreadLocal.remove();
            return clazz.cast(o);
        } catch (Exception e) {
            throw new SerializeException("Deserialization failed");
        }
    }
}

----------------------------------------

TITLE: Getting Top 3 Early Registrants in SQL
DESCRIPTION: Simple query to get the 3 users who registered earliest based on register_time

LANGUAGE: sql
CODE:
SELECT uid, nick_name, register_time
    FROM user_info
    ORDER BY register_time
    LIMIT 3

----------------------------------------

TITLE: ArrayList Element Manipulation Methods
DESCRIPTION: Methods for adding and removing elements from ArrayList

LANGUAGE: java
CODE:
public boolean add(E e) {
    ensureCapacityInternal(size + 1);
    elementData[size++] = e;
    return true;
}

public E remove(int index) {
    rangeCheck(index);
    modCount++;
    E oldValue = elementData(index);
    int numMoved = size - index - 1;
    if (numMoved > 0)
        System.arraycopy(elementData, index+1, elementData, index, numMoved);
    elementData[--size] = null;
    return oldValue;
}

----------------------------------------

TITLE: 使用逗号连接进行延迟关联优化
DESCRIPTION: 这个SQL查询展示了如何使用逗号连接子查询来实现延迟关联。虽然效果类似于INNER JOIN，但为了代码可读性和可维护性，建议使用INNER JOIN语法。

LANGUAGE: sql
CODE:
SELECT t1.* FROM t_order t1,
(SELECT id FROM t_order where id > 1000000 LIMIT 10) t2
WHERE t1.id = t2.id;

----------------------------------------

TITLE: AtomicInteger Basic Operations Example
DESCRIPTION: Demonstrates common operations using AtomicInteger including get, set, increment, decrement, and compare-and-set operations.

LANGUAGE: java
CODE:
AtomicInteger atomicInt = new AtomicInteger(0);

int tempValue = atomicInt.getAndSet(3);
System.out.println("tempValue: " + tempValue + "; atomicInt: " + atomicInt);

tempValue = atomicInt.getAndIncrement();
System.out.println("tempValue: " + tempValue + "; atomicInt: " + atomicInt);

tempValue = atomicInt.getAndAdd(5);
System.out.println("tempValue: " + tempValue + "; atomicInt: " + atomicInt);

boolean updateSuccess = atomicInt.compareAndSet(9, 10);
System.out.println("Update Success: " + updateSuccess + "; atomicInt: " + atomicInt);

int currentValue = atomicInt.get();
System.out.println("Current value: " + currentValue);

atomicInt.lazySet(15);
System.out.println("After lazySet, atomicInt: " + atomicInt);

----------------------------------------

TITLE: LRU Cache Implementation with LinkedHashMap
DESCRIPTION: Shows how to implement an LRU cache by extending LinkedHashMap

LANGUAGE: java
CODE:
public class LRUCache<K, V> extends LinkedHashMap<K, V> {
    private final int capacity;

    public LRUCache(int capacity) {
        super(capacity, 0.75f, true);
        this.capacity = capacity;
    }

    /**
     * 判断size超过容量时返回true，告知LinkedHashMap移除最老的缓存项(即链表的第一个元素)
     */
    @Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size() > capacity;
    }
}

----------------------------------------

TITLE: ClassLoader loadClass Implementation
DESCRIPTION: Implementation of the loadClass method in ClassLoader showing the parents delegation model logic

LANGUAGE: java
CODE:
protected Class<?> loadClass(String name, boolean resolve)
    throws ClassNotFoundException
{
    synchronized (getClassLoadingLock(name)) {
        Class c = findLoadedClass(name);
        if (c == null) {
            long t0 = System.nanoTime();
            try {
                if (parent != null) {
                    c = parent.loadClass(name, false);
                } else {
                    c = findBootstrapClassOrNull(name);
                }
            } catch (ClassNotFoundException e) {
            }
            if (c == null) {
                long t1 = System.nanoTime();
                c = findClass(name);
                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                sun.misc.PerfCounter.getFindClasses().increment();
            }
        }
        if (resolve) {
            resolveClass(c);
        }
        return c;
    }
}

----------------------------------------

TITLE: String Reference Comparison Example
DESCRIPTION: Demonstrates comparing String references and values using == and equals() methods.

LANGUAGE: java
CODE:
String str1 = "hello";
String str2 = new String("hello");
String str3 = "hello";
System.out.println(str1 == str2);
System.out.println(str1 == str3);
System.out.println(str1.equals(str2));
System.out.println(str1.equals(str3));

----------------------------------------

TITLE: Implementing Multiple Interfaces with Default Methods in Java
DESCRIPTION: Example showing how to implement multiple interfaces with conflicting default methods.

LANGUAGE: java
CODE:
public class InterfaceNewImpl implements InterfaceNew , InterfaceNew1{
    public static void main(String[] args) {
        InterfaceNewImpl interfaceNew = new InterfaceNewImpl();
        interfaceNew.def();
    }

    @Override
    public void def() {
        InterfaceNew1.super.def();
    }

    @Override
    public void f() {
    }
}

----------------------------------------

TITLE: HashMap Constructor with Initial Capacity
DESCRIPTION: Implementation of HashMap constructor that takes initial capacity and load factor parameters, ensuring the size is a power of 2.

LANGUAGE: java
CODE:
    public HashMap(int initialCapacity, float loadFactor) {
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal initial capacity: " +
                                               initialCapacity);
        if (initialCapacity > MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        if (loadFactor <= 0 || Float.isNaN(loadFactor))
            throw new IllegalArgumentException("Illegal load factor: " +
                                               loadFactor);
        this.loadFactor = loadFactor;
        this.threshold = tableSizeFor(initialCapacity);
    }
     public HashMap(int initialCapacity) {
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
    }

----------------------------------------

TITLE: Initializing ConcurrentHashMap in Java 8
DESCRIPTION: Initialization of ConcurrentHashMap table in Java 8 using CAS operations.

LANGUAGE: Java
CODE:
private final Node<K,V>[] initTable() {
    Node<K,V>[] tab; int sc;
    while ((tab = table) == null || tab.length == 0) {
        if ((sc = sizeCtl) < 0)
            Thread.yield();
        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {
            try {
                if ((tab = table) == null || tab.length == 0) {
                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;
                    @SuppressWarnings("unchecked")
                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];
                    table = tab = nt;
                    sc = n - (n >>> 2);
                }
            } finally {
                sizeCtl = sc;
            }
            break;
        }
    }
    return tab;
}

----------------------------------------

TITLE: Calculating Bracket Matching Depth (Java)
DESCRIPTION: Algorithm to calculate the depth of a valid parentheses sequence. It keeps track of the current depth while iterating through the string and returns the maximum depth encountered.

LANGUAGE: java
CODE:
import java.util.Scanner;

public class Main {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String s = sc.nextLine();
    int cnt = 0, max = 0, i;
    for (i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == '(')
        cnt++;
      else
        cnt--;
      max = Math.max(max, cnt);
    }
    sc.close();
    System.out.println(max);
  }
}

----------------------------------------

TITLE: Complex DAO Interface Method Overloading Example
DESCRIPTION: Demonstrates more complex method overloading scenarios in MyBatis with multiple parameters.

LANGUAGE: java
CODE:
Person queryById();

Person queryById(@Param("id") Long id);

Person queryById(@Param("id") Long id, @Param("name") String name);

LANGUAGE: xml
CODE:
<select id="queryById" resultMap="PersonMap">
    select
      id, name, age, address
    from person
    <where>
        <if test="id != null">
            id = #{id}
        </if>
        <if test="name != null and name != ''">
            name = #{name}
        </if>
    </where>
    limit 1
</select>

----------------------------------------

TITLE: Demonstrating 'this' Keyword Usage in Java
DESCRIPTION: Example showing how the 'this' keyword is used to reference the current instance of a class, accessing its variables and methods.

LANGUAGE: java
CODE:
class Manager {
    Employees[] employees;
    void manageEmployees() {
        int totalEmp = this.employees.length;
        System.out.println("Total employees: " + totalEmp);
        this.report();
    }
    void report() { }
}

----------------------------------------

TITLE: Unsafe getAndAddInt Implementation
DESCRIPTION: Implementation of getAndAddInt method in Unsafe class showing the spin-lock mechanism used in CAS operations.

LANGUAGE: java
CODE:
public final int getAndAddInt(Object o, long offset, int delta) {
    int v;
    do {
        v = getIntVolatile(o, offset);
    } while (!compareAndSwapInt(o, offset, v, v + delta));
    return v;
}

----------------------------------------

TITLE: Non-blocking Operations Example with ArrayBlockingQueue
DESCRIPTION: Example showing non-blocking offer() and poll() operations with ArrayBlockingQueue

LANGUAGE: java
CODE:
public class OfferPollExample {

    public static void main(String[] args) {
        // 创建一个大小为 3 的 ArrayBlockingQueue
        ArrayBlockingQueue<String> queue = new ArrayBlockingQueue<>(3);

        // 向队列中添加元素
        System.out.println(queue.offer("A"));
        System.out.println(queue.offer("B"));
        System.out.println(queue.offer("C"));

        // 尝试向队列中添加元素，但队列已满，返回 false
        System.out.println(queue.offer("D"));

        // 从队列中取出元素
        System.out.println(queue.poll());
        System.out.println(queue.poll());
        System.out.println(queue.poll());

        // 尝试从队列中取出元素，但队列已空，返回 null
        System.out.println(queue.poll());
    }

}

----------------------------------------

TITLE: JPA Entity Field Persistence Control
DESCRIPTION: Different ways to mark fields as non-persistent in JPA entities

LANGUAGE: java
CODE:
static String transient1; // not persistent because of static
final String transient2 = "Satish"; // not persistent because of final
transient String transient3; // not persistent because of transient
@Transient
String transient4; // not persistent because of @Transient

----------------------------------------

TITLE: Implementing SHA-256 Hash Algorithm in Java
DESCRIPTION: This code snippet shows how to use the SHA-256 hash algorithm in Java to generate a hash value for a given string.

LANGUAGE: java
CODE:
String originalString = "Java学习 + 面试指南：javaguide.cn";
// 创建SHA-256摘要对象
MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
messageDigest.update(originalString.getBytes());
// 计算哈希值
byte[] result = messageDigest.digest();
// 将哈希值转换为十六进制字符串
String hexString = new HexBinaryAdapter().marshal(result);
System.out.println("Original String: " + originalString);
System.out.println("SHA-256 Hash: " + hexString.toLowerCase());

----------------------------------------

TITLE: Basic MySQL Operations
DESCRIPTION: Basic MySQL service and connection operations including starting service, connecting to server, and viewing system information.

LANGUAGE: sql
CODE:
/* Windows服务 */
-- 启动 MySQL
			net start mysql
-- 创建Windows服务
				sc create mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)
/* 连接与断开服务器 */
-- 连接 MySQL
				mysql -h 地址 -P 端口 -u 用户名 -p 密码
-- 显示哪些线程正在运行
				SHOW PROCESSLIST
-- 显示系统变量信息
				SHOW VARIABLES

----------------------------------------

TITLE: Using synchronized keyword to implement thread-safe methods in Java
DESCRIPTION: This code shows how to use the synchronized keyword to make methods thread-safe by acquiring the object's intrinsic lock.

LANGUAGE: Java
CODE:
public class SynchronizedDemo {
    public synchronized void method1() {
        System.out.println("方法1");
        method2();
    }

    public synchronized void method2() {
        System.out.println("方法2");
    }
}

----------------------------------------

TITLE: Initializing ThreadPoolExecutor with BlockingQueue
DESCRIPTION: Constructor signature showing how BlockingQueue is used in ThreadPoolExecutor initialization

LANGUAGE: java
CODE:
public ThreadPoolExecutor(int corePoolSize,
                            int maximumPoolSize,
                            long keepAliveTime,
                            TimeUnit unit,
                            BlockingQueue<Runnable> workQueue,
                            ThreadFactory threadFactory,
                            RejectedExecutionHandler handler) {// ...}

----------------------------------------

TITLE: Student Class Encapsulation Example
DESCRIPTION: Shows encapsulation by creating a Student class with private fields and public getter/setter methods.

LANGUAGE: java
CODE:
public class Student {
    private int id;
    private String name;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}

----------------------------------------

TITLE: Circular Dependency Example with @Autowired
DESCRIPTION: Shows a circular dependency scenario between two Spring beans using @Autowired annotation

LANGUAGE: java
CODE:
@Component
public class CircularDependencyA {
    @Autowired
    private CircularDependencyB circB;
}

@Component
public class CircularDependencyB {
    @Autowired
    private CircularDependencyA circA;
}

----------------------------------------

TITLE: File Permissions Example
DESCRIPTION: Example demonstrating the output of ls -l command showing file permissions

LANGUAGE: bash
CODE:
# 普通文件（-）
-rw-r--r--  1 user  group  1024 Apr 14 10:00 file.txt

# 目录文件（d，directory file）*
drwxr-xr-x  2 user  group  4096 Apr 14 10:00 directory/

# 套接字文件(s，socket) 
srwxrwxrwx  1 user  group    0 Apr 14 10:00 socket

----------------------------------------

TITLE: Avoiding Deadlock in Java
DESCRIPTION: This code snippet demonstrates how to modify the previous example to avoid deadlock by changing the order of resource acquisition.

LANGUAGE: java
CODE:
new Thread(() -> {
            synchronized (resource1) {
                System.out.println(Thread.currentThread() + "get resource1");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource2");
                synchronized (resource2) {
                    System.out.println(Thread.currentThread() + "get resource2");
                }
            }
        }, "thread 2").start();

----------------------------------------

TITLE: Programmatic Transaction Management with TransactionTemplate
DESCRIPTION: Example showing how to manage transactions programmatically using TransactionTemplate

LANGUAGE: java
CODE:
@Autowired
private TransactionTemplate transactionTemplate;
public void testTransaction() {

        transactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {

                try {

                    // ....  业务代码
                } catch (Exception e){
                    //回滚
                    transactionStatus.setRollbackOnly();
                }

            }
        });
}

----------------------------------------

TITLE: Checking Collection Emptiness in Java
DESCRIPTION: Demonstrates the proper way to check if a collection is empty using the isEmpty() method instead of size() == 0. Explains the performance implications for different collection types.

LANGUAGE: Java
CODE:
public boolean isEmpty() { return first() == null; }

Node<E> first() {
    restartFromHead:
    for (;;) {
        for (Node<E> h = head, p = h, q;;) {
            boolean hasItem = (p.item != null);
            if (hasItem || (q = p.next) == null) {  // 当前节点值不为空 或 到达队尾
                updateHead(h, p);  // 将head设置为p
                return hasItem ? p : null;
            }
            else if (p == q) continue restartFromHead;
            else p = q;  // p = p.next
        }
    }
}

----------------------------------------

TITLE: Redis Transaction Example with WATCH
DESCRIPTION: Example demonstrating optimistic locking with WATCH command in Redis transactions.

LANGUAGE: bash
CODE:
# Client 1
> SET PROJECT "RustGuide"
OK
> WATCH PROJECT
OK
> MULTI
OK
> SET PROJECT "JavaGuide"
QUEUED

# Client 2
> SET PROJECT "GoGuide"

# Client 1
> EXEC
(nil)
> GET PROJECT
"GoGuide"

----------------------------------------

TITLE: Lua Script for Safe Lock Release in Redis
DESCRIPTION: A Lua script to safely release a Redis lock by comparing the lock's value before deletion.

LANGUAGE: lua
CODE:
if redis.call("get",KEYS[1]) == ARGV[1] then
    return redis.call("del",KEYS[1])
else
    return 0
end

----------------------------------------

TITLE: CountDownLatch Usage Example in Java
DESCRIPTION: Shows how to use CountDownLatch to coordinate multiple threads

LANGUAGE: java
CODE:
public class CountDownLatchExample1 {
    private static final int threadCount = 6;

    public static void main(String[] args) throws InterruptedException {
        ExecutorService threadPool = Executors.newFixedThreadPool(10);
        final CountDownLatch countDownLatch = new CountDownLatch(threadCount);
        for (int i = 0; i < threadCount; i++) {
            final int threadnum = i;
            threadPool.execute(() -> {
                try {
                    //处理文件的业务操作
                    //......
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    countDownLatch.countDown();
                }

            });
        }
        countDownLatch.await();
        threadPool.shutdown();
        System.out.println("finish");
    }
}

----------------------------------------

TITLE: Implementing AES Encryption and Decryption in Java
DESCRIPTION: This code snippet demonstrates how to implement AES encryption and decryption in Java using the GCM mode and NoPadding.

LANGUAGE: java
CODE:
private static final String AES_ALGORITHM = "AES";
private static final String AES_SECRET_KEY = "4128D9CDAC7E2F82951CBAF7FDFE675B";
private static final String AES_TRANSFORMATION = "AES/GCM/NoPadding";
private static Cipher encryptionCipher;
private static Cipher decryptionCipher;

public static void init() throws Exception {
    SecretKeySpec secretKeySpec = new SecretKeySpec(AES_SECRET_KEY.getBytes(), AES_ALGORITHM);
    encryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);
    encryptionCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
    decryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);
    decryptionCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new GCMParameterSpec(128, encryptionCipher.getIV()));
}

public static String encrypt(String data) throws Exception {
    byte[] dataInBytes = data.getBytes();
    byte[] encryptedBytes = encryptionCipher.doFinal(dataInBytes);
    return Base64.getEncoder().encodeToString(encryptedBytes);
}

public static String decrypt(String encryptedData) throws Exception {
    byte[] dataInBytes = Base64.getDecoder().decode(encryptedData);
    byte[] decryptedBytes = decryptionCipher.doFinal(dataInBytes);
    return new String(decryptedBytes, StandardCharsets.UTF_8);
}

public static void main(String[] args) throws Exception {
    String originalString = "Java学习 + 面试指南：javaguide.cn";
    init();
    String encryptedData = encrypt(originalString);
    String decryptedData = decrypt(encryptedData);
    System.out.println("Original String: " + originalString);
    System.out.println("AES Encrypted Data : " + encryptedData);
    System.out.println("AES Decrypted Data : " + decryptedData);
}

----------------------------------------

TITLE: Thread Scheduling with Unsafe in Java
DESCRIPTION: Demonstrates how to use Unsafe for low-level thread operations like parking and unparking threads.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    Thread mainThread = Thread.currentThread();
    new Thread(()->{
        try {
            TimeUnit.SECONDS.sleep(5);
            System.out.println("subThread try to unpark mainThread");
            unsafe.unpark(mainThread);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }).start();

    System.out.println("park main mainThread");
    unsafe.park(false,0L);
    System.out.println("unpark mainThread success");
}

----------------------------------------

TITLE: Using Foreign Function & Memory API in Java
DESCRIPTION: Demonstrates how to use the Foreign Function & Memory API to call the C library function 'radixsort' to sort an array of strings. The example shows allocation of off-heap memory, copying strings between heap and off-heap, and invoking the external function.

LANGUAGE: java
CODE:
// 1. 在C库路径上查找外部函数
Linker linker = Linker.nativeLinker();
SymbolLookup stdlib = linker.defaultLookup();
MethodHandle radixSort = linker.downcallHandle(
                             stdlib.lookup("radixsort"), ...);
// 2. 分配堆上内存以存储四个字符串
String[] javaStrings   = { "mouse", "cat", "dog", "car" };
// 3. 分配堆外内存以存储四个指针
SegmentAllocator allocator = implicitAllocator();
MemorySegment offHeap  = allocator.allocateArray(ValueLayout.ADDRESS, javaStrings.length);
// 4. 将字符串从堆上复制到堆外
for (int i = 0; i < javaStrings.length; i++) {
    // 在堆外分配一个字符串，然后存储指向它的指针
    MemorySegment cString = allocator.allocateUtf8String(javaStrings[i]);
    offHeap.setAtIndex(ValueLayout.ADDRESS, i, cString);
}
// 5. 通过调用外部函数对堆外数据进行排序
radixSort.invoke(offHeap, javaStrings.length, MemoryAddress.NULL, '\0');
// 6. 将(重新排序的)字符串从堆外复制到堆上
for (int i = 0; i < javaStrings.length; i++) {
    MemoryAddress cStringPtr = offHeap.getAtIndex(ValueLayout.ADDRESS, i);
    javaStrings[i] = cStringPtr.getUtf8String(0);
}
assert Arrays.equals(javaStrings, new String[] {"car", "cat", "dog", "mouse"});  // true

----------------------------------------

TITLE: Object Manipulation with Unsafe in Java
DESCRIPTION: Demonstrates how to manipulate object fields directly using Unsafe, bypassing normal access controls.

LANGUAGE: java
CODE:
public static void main(String[] args) throws Exception{
    Unsafe unsafe = reflectGetUnsafe();
    assert unsafe != null;
    long offset = unsafe.objectFieldOffset(Main.class.getDeclaredField("value"));
    Main main = new Main();
    System.out.println("value before putInt: " + main.value);
    unsafe.putInt(main, offset, 42);
    System.out.println("value after putInt: " + main.value);
    System.out.println("value after putInt: " + unsafe.getInt(main, offset));
}

----------------------------------------

TITLE: Printing ClassLoader Hierarchy Example
DESCRIPTION: A Java program that prints the ClassLoader hierarchy showing the relationship between AppClassLoader, ExtClassLoader and BootstrapClassLoader

LANGUAGE: java
CODE:
public class PrintClassLoaderTree {
    public static void main(String[] args) {
        ClassLoader classLoader = PrintClassLoaderTree.class.getClassLoader();
        StringBuilder split = new StringBuilder("|--");
        boolean needContinue = true;
        while (needContinue){
            System.out.println(split.toString() + classLoader);
            if(classLoader == null){
                needContinue = false;
            }else{
                classLoader = classLoader.getParent();
                split.insert(0, "\t");
            }
        }
    }
}

----------------------------------------

TITLE: Implementing MD5 Hash Algorithm in Java
DESCRIPTION: This code snippet demonstrates how to use the MD5 hash algorithm in Java to generate a hash value for a given string.

LANGUAGE: java
CODE:
String originalString = "Java学习 + 面试指南：javaguide.cn";
// 创建MD5摘要对象
MessageDigest messageDigest = MessageDigest.getInstance("MD5");
messageDigest.update(originalString.getBytes(StandardCharsets.UTF_8));
// 计算哈希值
byte[] result = messageDigest.digest();
// 将哈希值转换为十六进制字符串
String hexString = new HexBinaryAdapter().marshal(result);
System.out.println("Original String: " + originalString);
System.out.println("MD5 Hash: " + hexString.toLowerCase());

----------------------------------------

TITLE: Implementing DAO Method Overloading in MyBatis
DESCRIPTION: Shows how to implement method overloading in MyBatis Mapper interfaces with corresponding XML configuration.

LANGUAGE: java
CODE:
/**
 * Mapper接口里面方法重载
 */
public interface StuMapper {
 List<Student> getAllStu();
 List<Student> getAllStu(@Param("id") Integer id);
}

LANGUAGE: xml
CODE:
<select id="getAllStu" resultType="com.pojo.Student">
  select * from student
  <where>
    <if test="id != null">
      id = #{id}
    </if>
  </where>
</select>

----------------------------------------

TITLE: Memory Operations with Unsafe in Java
DESCRIPTION: Shows how to perform low-level memory operations using Unsafe, including allocation, reallocation, and copying of memory.

LANGUAGE: java
CODE:
private void memoryTest() {
    int size = 4;
    long addr = unsafe.allocateMemory(size);
    long addr3 = unsafe.reallocateMemory(addr, size * 2);
    System.out.println("addr: "+addr);
    System.out.println("addr3: "+addr3);
    try {
        unsafe.setMemory(null,addr ,size,(byte)1);
        for (int i = 0; i < 2; i++) {
            unsafe.copyMemory(null,addr,null,addr3+size*i,4);
        }
        System.out.println(unsafe.getInt(addr));
        System.out.println(unsafe.getLong(addr3));
    }finally {
        unsafe.freeMemory(addr);
        unsafe.freeMemory(addr3);
    }
}

----------------------------------------

TITLE: Implementing SPI Provider in Java
DESCRIPTION: Example of implementing the Logger interface as a service provider (Logback).

LANGUAGE: Java
CODE:
package edu.jiangxuan.up.spi.service;

import edu.jiangxuan.up.spi.Logger;

public class Logback implements Logger {
    @Override
    public void info(String s) {
        System.out.println("Logback info 打印日志：" + s);
    }

    @Override
    public void debug(String s) {
        System.out.println("Logback debug 打印日志：" + s);
    }
}

----------------------------------------

TITLE: Demonstrating GC Test with Eden Space Allocation
DESCRIPTION: Code example showing how objects are allocated in Eden space and triggers Minor GC when space is insufficient

LANGUAGE: java
CODE:
public class GCTest {
  public static void main(String[] args) {
    byte[] allocation1, allocation2;
    allocation1 = new byte[30900*1024];
  }
}

----------------------------------------

TITLE: JWT Signature Generation in Pseudocode
DESCRIPTION: Pseudocode showing how the JWT signature is generated using HMAC-SHA256 algorithm. This illustrates the process of creating the third part of a JWT.

LANGUAGE: plaintext
CODE:
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

----------------------------------------

TITLE: Implementing Order By Using Dynamic Parameters in SQL
DESCRIPTION: Demonstrates how to use ${} placeholder for dynamic ORDER BY clause in SQL queries.

LANGUAGE: sql
CODE:
select * from users order by ${orderCols}

----------------------------------------

TITLE: Starting Simple Web Server in Java 18
DESCRIPTION: Demonstrates how to start a simple static web server using the 'jwebserver' command introduced in Java 18. This server is limited to serving static files and doesn't support CGI or Servlets.

LANGUAGE: bash
CODE:
$ jwebserver
Binding to loopback by default. For all interfaces use "-b 0.0.0.0" or "-b ::".
Serving /cwd and subdirectories on 127.0.0.1 port 8000
URL: http://127.0.0.1:8000/

----------------------------------------

TITLE: Configuring Filters in Spring Cloud Gateway YAML
DESCRIPTION: Shows how to set up filters in Spring Cloud Gateway using YAML configuration. The example demonstrates a RewritePath filter that removes 'api' from the URL path.

LANGUAGE: yaml
CODE:
filters: #过滤器
  - RewritePath=/api/(?<segment>.*),/$\{segment} # 将跳转路径中包含的 "api" 替换成空

----------------------------------------

TITLE: Finding Longest Common Prefix in String Array (Java)
DESCRIPTION: Algorithm to find the longest common prefix among an array of strings. It sorts the array first, then compares characters of the first and last strings to find the common prefix. Includes input validation and edge case handling.

LANGUAGE: java
CODE:
public class Main {
 public static String replaceSpace(String[] strs) {

  if (!checkStrs(strs)) {
   return "";
  }
  int len = strs.length;
  StringBuilder res = new StringBuilder();
  Arrays.sort(strs);
  int m = strs[0].length();
  int n = strs[len - 1].length();
  int num = Math.min(m, n);
  for (int i = 0; i < num; i++) {
   if (strs[0].charAt(i) == strs[len - 1].charAt(i)) {
    res.append(strs[0].charAt(i));
   } else
    break;

  }
  return res.toString();

 }

 private static boolean checkStrs(String[] strs) {
  boolean flag = false;
  if (strs != null) {
   for (int i = 0; i < strs.length; i++) {
    if (strs[i] != null && strs[i].length() != 0) {
     flag = true;
    } else {
     flag = false;
     break;
    }
   }
  }
  return flag;
 }

 public static void main(String[] args) {
  String[] strs = { "customer", "car", "cat" };
  System.out.println(Main.replaceSpace(strs));
 }
}

----------------------------------------

TITLE: Creating Custom Desensitization Annotation in Java
DESCRIPTION: Defines a custom annotation @Desensitization for specifying data masking rules on fields.

LANGUAGE: java
CODE:
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@JacksonAnnotationsInside
@JsonSerialize(using = DesensitizationSerialize.class)
public @interface Desensitization {
    DesensitizationTypeEnum type() default DesensitizationTypeEnum.MY_RULE;
    int startInclude() default 0;
    int endExclude() default 0;
}

----------------------------------------

TITLE: MongoDB插入带点号字段名的文档
DESCRIPTION: 这个示例展示了在MongoDB中插入一个包含点号字段名的文档。这种操作在MongoDB中是允许的，但在Amazon DocumentDB中不支持。

LANGUAGE: shell
CODE:
db.foo.insert({'x.1':1})

----------------------------------------

TITLE: Demonstrating Pass-by-Value for Reference Types in Java (Array Example)
DESCRIPTION: This code snippet demonstrates that while modifying the contents of a reference type (array) affects the original object, the reference itself is passed by value in Java.

LANGUAGE: Java
CODE:
public static void main(String[] args) {
    int[] arr = { 1, 2, 3, 4, 5 };
    System.out.println(arr[0]);
    change(arr);
    System.out.println(arr[0]);
}

public static void change(int[] array) {
    // 将数组的第一个元素变为0
    array[0] = 0;
}

----------------------------------------

TITLE: 降低系统使用 swap 优先级
DESCRIPTION: 通过修改系统参数来降低使用 swap 的优先级，以预防 Redis 发生内存交换。这个命令将 swappiness 值设置为 10。

LANGUAGE: bash
CODE:
echo 10 > /proc/sys/vm/swappiness

----------------------------------------

TITLE: Implementing Custom ThreadPoolTaskExecutor for MDC Propagation
DESCRIPTION: Shows how to implement a custom ThreadPoolTaskExecutor to propagate MDC context to child threads in asynchronous operations.

LANGUAGE: Java
CODE:
public class MyThreadPoolTaskExecutor extends ThreadPoolTaskExecutor {

    @Override
    public void execute(Runnable runnable) {
        Map<String, String> context = MDC.getCopyOfContextMap();
        super.execute(() -> run(runnable, context));
    }

    @Override
    private void run(Runnable runnable, Map<String, String> context) {
        if (context != null) {
            MDC.setContextMap(context);
        }
        try {
            runnable.run();
        } finally {
            MDC.remove();
        }
    }
}

----------------------------------------

TITLE: Using @snippet Tag for Code Examples in Javadoc
DESCRIPTION: Shows how to use the new @snippet tag in Java 18 for including code examples in Javadoc. This new method provides better formatting and is more convenient than the previous <pre>{@code ...}</pre> approach.

LANGUAGE: java
CODE:
/**
 * The following code shows how to use {@code Optional.isPresent}:
 * {@snippet :
 * if (v.isPresent()) {
 *     System.out.println("v: " + v.get());
 * }
 * }
 */

----------------------------------------

TITLE: Querying Incomplete Exam Stats in SQL
DESCRIPTION: Query to get count and rate of incomplete exams from exam_record table, handling NULL values and calculating percentages

LANGUAGE: sql
CODE:
SELECT exam_id,
       count(submit_time IS NULL OR NULL) incomplete_cnt,
       ROUND(count(submit_time IS NULL OR NULL) / count(*), 3) complete_rate
FROM exam_record
GROUP BY exam_id
HAVING incomplete_cnt <> 0

----------------------------------------

TITLE: Implementing HandlerInterceptor for Distributed Tracing
DESCRIPTION: Demonstrates how to implement a Spring HandlerInterceptor to handle the traceId in incoming HTTP requests using ThreadLocal and MDC.

LANGUAGE: Java
CODE:
@Slf4j
@Component
public class LogInterceptor extends HandlerInterceptorAdapter {

    @Override
    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) {
        MDC.remove("requestId");
    }

    @Override
    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) {
    }

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        String requestId = request.getHeader(BaseConstant.REQUEST_ID_KEY);
        if (StringUtils.isBlank(requestId)) {
            requestId = UUID.randomUUID().toString().replace("-", "");
        }
        MDC.put("requestId", requestId);
        return true;
    }
}

----------------------------------------

TITLE: Pattern Matching for instanceof in Java 16
DESCRIPTION: This code snippet compares the old and new ways of using instanceof in Java, showcasing the pattern matching feature introduced in Java 16.

LANGUAGE: java
CODE:
// Old code
if (o instanceof String) {
    String s = (String)o;
    ... use s ...
}

// New code
if (o instanceof String s) {
    ... use s ...
}

----------------------------------------

TITLE: Request Body Validation with @Valid
DESCRIPTION: Example of validating request body data using Bean Validation annotations

LANGUAGE: java
CODE:
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Person {
    @NotNull(message = "classId 不能为空")
    private String classId;

    @Size(max = 33)
    @NotNull(message = "name 不能为空")
    private String name;

    @Pattern(regexp = "((^Man$|^Woman$|^UGM$))", message = "sex 值不在可选范围")
    @NotNull(message = "sex 不能为空")
    private String sex;

    @Email(message = "email 格式不正确")
    @NotNull(message = "email 不能为空")
    private String email;
}

----------------------------------------

TITLE: Calculating Level 0 User Exam Stats in SQL
DESCRIPTION: Query to calculate average completion time and scores for level 0 users on hard difficulty exams

LANGUAGE: sql
CODE:
SELECT uid,
       round(avg(new_socre)) AS avg_score,
       round(avg(time_diff), 1) AS avg_time_took
FROM
  (SELECT er.uid,
          IF (er.submit_time IS NOT NULL, TIMESTAMPDIFF(MINUTE, start_time, submit_time), ef.duration) AS time_diff,
          IF (er.submit_time IS NOT NULL,er.score,0) AS new_socre
   FROM exam_record er
   LEFT JOIN user_info uf ON er.uid = uf.uid
   LEFT JOIN examination_info ef ON er.exam_id = ef.exam_id
   WHERE uf.LEVEL = 0 AND ef.difficulty = 'hard' ) t
GROUP BY uid
ORDER BY uid

----------------------------------------

TITLE: 使用FileOutputStream写入文件
DESCRIPTION: 展示了如何使用FileOutputStream将字节数组写入文件。

LANGUAGE: Java
CODE:
try (FileOutputStream output = new FileOutputStream("output.txt")) {
    byte[] array = "JavaGuide".getBytes();
    output.write(array);
} catch (IOException e) {
    e.printStackTrace();
}

----------------------------------------

TITLE: CountDownLatch State Management
DESCRIPTION: Core CountDownLatch implementation showing shared state handling and initialization

LANGUAGE: java
CODE:
protected boolean tryReleaseShared(int releases) {
    for (;;) {
        int c = getState();
        if (c == 0)
            return false;
        int nextc = c-1;
        if (compareAndSetState(c, nextc))
            return nextc == 0;
    }
}

----------------------------------------

TITLE: HTTP GET Request Handler with @GetMapping
DESCRIPTION: Example of handling HTTP GET requests using @GetMapping annotation in a REST controller

LANGUAGE: java
CODE:
@GetMapping("/users")
public ResponseEntity<List<User>> getAllUsers() {
 return userRepository.findAll();
}

----------------------------------------

TITLE: Redis Transaction Example with MULTI/EXEC
DESCRIPTION: Example showing basic Redis transaction using MULTI to start transaction and EXEC to execute queued commands.

LANGUAGE: bash
CODE:
> MULTI
OK
> SET PROJECT "JavaGuide"
QUEUED
> GET PROJECT
QUEUED
> EXEC
1) OK
2) "JavaGuide"

----------------------------------------

TITLE: Implementing Custom Serializer for Data Masking in Java
DESCRIPTION: Creates a custom serializer class DesensitizationSerialize to handle data masking during JSON serialization.

LANGUAGE: java
CODE:
@AllArgsConstructor
@NoArgsConstructor
public class DesensitizationSerialize extends JsonSerializer<String> implements ContextualSerializer {
    private DesensitizationTypeEnum type;
    private Integer startInclude;
    private Integer endExclude;

    @Override
    public void serialize(String str, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        // Implementation omitted for brevity
    }

    @Override
    public JsonSerializer<?> createContextual(SerializerProvider serializerProvider, BeanProperty beanProperty) throws JsonMappingException {
        // Implementation omitted for brevity
    }
}

----------------------------------------

TITLE: Stream and Optional Enhancements in Java 9
DESCRIPTION: Shows new methods added to Stream and Optional classes in Java 9, including ofNullable(), takeWhile(), dropWhile(), and iterate().

LANGUAGE: java
CODE:
Stream<String> stringStream = Stream.ofNullable("Java");
System.out.println(stringStream.count());// 1
Stream<String> nullStream = Stream.ofNullable(null);
System.out.println(nullStream.count());//0

List<Integer> integerList = List.of(11, 33, 66, 8, 9, 13);
integerList.stream().takeWhile(x -> x < 50).forEach(System.out::println);// 11 33

List<Integer> integerList2 = List.of(11, 33, 66, 8, 9, 13);
integerList2.stream().dropWhile(x -> x < 50).forEach(System.out::println);// 66 8 9 13

Stream.iterate(1, i -> i <= 10, i -> i + 1).forEach(System.out::println);

----------------------------------------

TITLE: Using the EdDSA Digital Signature Algorithm in Java 15
DESCRIPTION: Demonstrates how to use the new EdDSA (Edwards-Curve Digital Signature Algorithm) implementation for digital signatures, which offers improved security and performance.

LANGUAGE: java
CODE:
KeyPairGenerator kpg = KeyPairGenerator.getInstance("Ed25519");
KeyPair kp = kpg.generateKeyPair();

byte[] msg = "test_string".getBytes(StandardCharsets.UTF_8);

Signature sig = Signature.getInstance("Ed25519");
sig.initSign(kp.getPrivate());
sig.update(msg);
byte[] s = sig.sign();

String encodedString = Base64.getEncoder().encodeToString(s);
System.out.println(encodedString);

----------------------------------------

TITLE: Implementing RSA Encryption and Decryption in Java
DESCRIPTION: This code snippet shows how to implement RSA encryption and decryption in Java, including key pair generation, encryption with public key, and decryption with private key.

LANGUAGE: java
CODE:
private static final String RSA_ALGORITHM = "RSA";

public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(RSA_ALGORITHM);
    keyPairGenerator.initialize(2048);
    return keyPairGenerator.generateKeyPair();
}

public static String encrypt(String data, PublicKey publicKey) throws Exception {
    Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
    return Base64.getEncoder().encodeToString(encryptedData);
}

public static String decrypt(String encryptedData, PrivateKey privateKey) throws Exception {
    byte[] decodedData = Base64.getDecoder().decode(encryptedData);
    Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);
    cipher.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] decryptedData = cipher.doFinal(decodedData);
    return new String(decryptedData, StandardCharsets.UTF_8);
}

public static void main(String[] args) throws Exception {
    KeyPair keyPair = generateKeyPair();
    PublicKey publicKey = keyPair.getPublic();
    PrivateKey privateKey = keyPair.getPrivate();
    String originalString = "Java学习 + 面试指南：javaguide.cn";
    String encryptedData = encrypt(originalString, publicKey);
    String decryptedData = decrypt(encryptedData, privateKey);
    System.out.println("Original String: " + originalString);
    System.out.println("RSA Encrypted Data : " + encryptedData);
    System.out.println("RSA Decrypted Data : " + decryptedData);
}

----------------------------------------

TITLE: Testing Data Masking in Spring Controller
DESCRIPTION: Creates a test controller to demonstrate the application of data masking on a POJO.

LANGUAGE: java
CODE:
@RestController
public class TestController {

    @RequestMapping("/test")
    public TestPojo testDesensitization(){
        TestPojo testPojo = new TestPojo();
        testPojo.setUserName("我是用户名");
        testPojo.setAddress("地球中国-北京市通州区京东总部2号楼");
        testPojo.setPhone("13782946666");
        testPojo.setPassword("sunyangwei123123123.");
        System.out.println(testPojo);
        return testPojo;
    }
}

----------------------------------------

TITLE: Implementing InheritableThreadLocal in Java
DESCRIPTION: Demonstrates the usage of InheritableThreadLocal to pass thread-local variables from parent to child threads.

LANGUAGE: Java
CODE:
public class InheritableThreadLocalDemo {
    public static void main(String[] args) {
        ThreadLocal<String> ThreadLocal = new ThreadLocal<>();
        ThreadLocal<String> inheritableThreadLocal = new InheritableThreadLocal<>();
        ThreadLocal.set("父类数据:threadLocal");
        inheritableThreadLocal.set("父类数据:inheritableThreadLocal");

        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("子线程获取父类ThreadLocal数据：" + ThreadLocal.get());
                System.out.println("子线程获取父类inheritableThreadLocal数据：" + inheritableThreadLocal.get());
            }
        }).start();
    }
}

----------------------------------------

TITLE: Demonstrating floating-point precision loss in Java
DESCRIPTION: This code snippet demonstrates how floating-point arithmetic in Java can lead to precision loss, resulting in unexpected results when comparing float values.

LANGUAGE: Java
CODE:
float a = 2.0f - 1.9f;
float b = 1.8f - 1.7f;
System.out.printf("%.9f",a);// 0.100000024
System.out.println(b);// 0.099999905
System.out.println(a == b);// false

----------------------------------------

TITLE: Procedural Circle Calculation
DESCRIPTION: Shows procedural programming approach to calculate circle area and perimeter without using objects.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {
        double radius = 3.0;
        double area = Math.PI * radius * radius;
        double perimeter = 2 * Math.PI * radius;
        System.out.println("圆的面积为：" + area);
        System.out.println("圆的周长为：" + perimeter);
    }
}

----------------------------------------

TITLE: Creating Test Table and Generating Sample Data in MySQL
DESCRIPTION: This SQL script creates a test table 'test1' with various column types and generates 10 million rows of sample data using a stored procedure. It demonstrates setting up a table structure with different data types and populating it with test data.

LANGUAGE: sql
CODE:
-- Creating test data table
DROP TABLE IF EXISTS test1;
CREATE TABLE `test1` (
    `id` int(11) NOT NULL,
    `num1` int(11) NOT NULL DEFAULT '0',
    `num2` varchar(11) NOT NULL DEFAULT '',
    `type1` int(4) NOT NULL DEFAULT '0',
    `type2` int(4) NOT NULL DEFAULT '0',
    `str1` varchar(100) NOT NULL DEFAULT '',
    `str2` varchar(100) DEFAULT NULL,
    PRIMARY KEY (`id`),
    KEY `num1` (`num1`),
    KEY `num2` (`num2`),
    KEY `type1` (`type1`),
    KEY `str1` (`str1`),
    KEY `str2` (`str2`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Creating stored procedure
DROP PROCEDURE IF EXISTS pre_test1;
DELIMITER //
CREATE PROCEDURE `pre_test1`()
BEGIN
    DECLARE i INT DEFAULT 0;
    SET autocommit = 0;
    WHILE i < 10000000 DO
        SET i = i + 1;
        SET @str1 = SUBSTRING(MD5(RAND()),1,20);
        -- Generate null for str2 every 100 rows
        IF i % 100 = 0 THEN
            SET @str2 = NULL;
        ELSE
            SET @str2 = @str1;
        END IF;
        INSERT INTO test1 (`id`, `num1`, `num2`,
        `type1`, `type2`, `str1`, `str2`)
        VALUES (CONCAT('', i), CONCAT('', i),
        CONCAT('', i), i%5, i%5, @str1, @str2);
        -- Commit transaction every 10000 rows
        IF i % 10000 = 0 THEN
            COMMIT;
        END IF;
    END WHILE;
END;
// DELIMITER ;

-- Execute stored procedure
CALL pre_test1();

----------------------------------------

TITLE: Using HTTP Client in Java 11
DESCRIPTION: Demonstrates how to use the standardized HTTP Client API in Java 11 for both synchronous and asynchronous requests.

LANGUAGE: java
CODE:
var request = HttpRequest.newBuilder()
    .uri(URI.create("https://javastack.cn"))
    .GET()
    .build();
var client = HttpClient.newHttpClient();

// 同步
HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
System.out.println(response.body());

// 异步
client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
    .thenApply(HttpResponse::body)
    .thenAccept(System.out::println);

----------------------------------------

TITLE: Using HTTP Client in Java 11
DESCRIPTION: Demonstrates how to use the standardized HTTP Client API in Java 11 for both synchronous and asynchronous requests.

LANGUAGE: java
CODE:
var request = HttpRequest.newBuilder()
    .uri(URI.create("https://javastack.cn"))
    .GET()
    .build();
var client = HttpClient.newHttpClient();

// 同步
HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
System.out.println(response.body());

// 异步
client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
    .thenApply(HttpResponse::body)
    .thenAccept(System.out::println);

----------------------------------------

TITLE: Basic LinkedHashMap Iteration Example
DESCRIPTION: Demonstrates basic usage of LinkedHashMap with insertion order iteration

LANGUAGE: java
CODE:
HashMap < String, String > map = new LinkedHashMap < > ();
map.put("a", "2");
map.put("g", "3");
map.put("r", "1");
map.put("e", "23");

for (Map.Entry < String, String > entry: map.entrySet()) {
    System.out.println(entry.getKey() + ":" + entry.getValue());
}

----------------------------------------

TITLE: 字符串常量池示例
DESCRIPTION: 演示了字符串常量池中创建和复用字符串对象的过程

LANGUAGE: Java
CODE:
// 在字符串常量池中创建字符串对象 "ab"
// 将字符串对象 "ab" 的引用赋值给给 aa
String aa = "ab";
// 直接返回字符串常量池中字符串对象 "ab"，赋值给引用 bb
String bb = "ab";
System.out.println(aa==bb); // true

----------------------------------------

TITLE: Dynamic Class Definition with Unsafe in Java
DESCRIPTION: Shows how to dynamically define a class at runtime using Unsafe, bypassing normal class loading mechanisms.

LANGUAGE: java
CODE:
private static void defineTest() {
    String fileName="F:\\workspace\\unsafe-test\\target\\classes\\com\\cn\\model\\User.class";
    File file = new File(fileName);
    try(FileInputStream fis = new FileInputStream(file)) {
        byte[] content=new byte[(int)file.length()];
        fis.read(content);
        Class clazz = unsafe.defineClass(null, content, 0, content.length, null, null);
        Object o = clazz.newInstance();
        Object age = clazz.getMethod("getAge").invoke(o, null);
        System.out.println(age);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

----------------------------------------

TITLE: Creating and Setting Cookie in Java Servlet
DESCRIPTION: Illustrates how to create a new Cookie object, set its maximum age, and add it to the HTTP response in a Java Servlet.

LANGUAGE: Java
CODE:
Cookie c = new Cookie("name","value"); //创建Cookie
c.setMaxAge(60*60*24); //设置最大时效，此处设置的最大时效为一天
response.addCookie(c); //把Cookie放入到HTTP响应中

----------------------------------------

TITLE: Process API Enhancements in Java 9
DESCRIPTION: Demonstrates the new Process API in Java 9, which allows for better management of native processes.

LANGUAGE: java
CODE:
ProcessHandle currentProcess = ProcessHandle.current();
System.out.println(currentProcess.pid());
System.out.println(currentProcess.info());

----------------------------------------

TITLE: 查看MySQL支持的存储引擎
DESCRIPTION: 使用SHOW ENGINES命令查看MySQL支持的所有存储引擎

LANGUAGE: sql
CODE:
SHOW ENGINES;

----------------------------------------

TITLE: Demonstrating Object Circular Reference
DESCRIPTION: Example showing how objects can circularly reference each other, which causes issues for reference counting garbage collection

LANGUAGE: java
CODE:
public class ReferenceCountingGc {
    Object instance = null;
    public static void main(String[] args) {
        ReferenceCountingGc objA = new ReferenceCountingGc();
        ReferenceCountingGc objB = new ReferenceCountingGc();
        objA.instance = objB;
        objB.instance = objA;
        objA = null;
        objB = null;
    }
}

----------------------------------------

TITLE: Using Enhanced Switch Expressions in Java 14
DESCRIPTION: Demonstrates the use of switch expressions with lambda-like syntax and the yield keyword to return values from switch blocks.

LANGUAGE: java
CODE:
String result = switch (day) {
            case "M", "W", "F" -> "MWF";
            case "T", "TH", "S" -> "TTS";
            default -> {
                if(day.isEmpty())
                    yield "Please insert a valid day.";
                else
                    yield "Looks like a Sunday.";
            }

        };
System.out.println(result);

----------------------------------------

TITLE: Reading Cookies in Java Servlet
DESCRIPTION: Demonstrates how to read Cookie values from an HTTP request in a Java Servlet.

LANGUAGE: Java
CODE:
String name ="name";
Cookie[]cookies =request.getCookies();
if(cookies !=null){
   for(int i= 0;i<cookies.length;i++){
    Cookie cookie =cookies[i];
    if(name.equals(cookis.getName()))
    //something is here.
    //you can get the value
    cookie.getValue();

   }
 }


----------------------------------------

TITLE: Testing Multiple Object Allocations in Eden Space
DESCRIPTION: Extended example demonstrating multiple object allocations and GC behavior

LANGUAGE: java
CODE:
public class GCTest {
  public static void main(String[] args) {
    byte[] allocation1, allocation2,allocation3,allocation4,allocation5;
    allocation1 = new byte[32000*1024];
    allocation2 = new byte[1000*1024];
    allocation3 = new byte[1000*1024];
    allocation4 = new byte[1000*1024];
    allocation5 = new byte[1000*1024];
  }
}

----------------------------------------

TITLE: 查看MySQL版本
DESCRIPTION: 使用SELECT VERSION()命令查看MySQL版本

LANGUAGE: sql
CODE:
SELECT VERSION();

----------------------------------------

TITLE: preDefineClass Security Check Implementation
DESCRIPTION: Implementation of preDefineClass method showing security checks to prevent core Java package tampering

LANGUAGE: java
CODE:
private ProtectionDomain preDefineClass(String name,
                                            ProtectionDomain pd)
    {
        if (!checkName(name)) {
            throw new NoClassDefFoundError("IllegalName: " + name);
        }
        if ((name != null) && name.startsWith("java.")) {
            throw new SecurityException
                ("禁止的包名: " +
                 name.substring(0, name.lastIndexOf('.')));
        }
        if (pd == null) {
            pd = defaultDomain;
        }
        if (name != null) {
            checkCerts(name, pd.getCodeSource());
        }
        return pd;
    }

----------------------------------------

TITLE: Demonstrating Local Variable Type Inference in Java 10
DESCRIPTION: Illustrates the usage of the 'var' keyword for local variable type inference in Java 10. Shows various examples of valid and invalid uses of 'var' for variable declarations.

LANGUAGE: java
CODE:
var id = 0;
var codefx = new URL("https://mp.weixin.qq.com/");
var list = new ArrayList<>();
var list = List.of(1, 2, 3);
var map = new HashMap<String, String>();
var p = Paths.of("src/test/java/Java9FeaturesTest.java");
var numbers = List.of("a", "b", "c");
for (var n : list)
    System.out.print(n+ " ");

var count=null; //❌编译不通过，不能声明为 null
var r = () -> Math.random();//❌编译不通过,不能声明为 Lambda表达式
var array = {1,2,3};//❌编译不通过,不能声明数组

----------------------------------------

TITLE: Demonstrating Local Variable Type Inference in Java 10
DESCRIPTION: Illustrates the usage of the 'var' keyword for local variable type inference in Java 10. Shows various examples of valid and invalid uses of 'var' for variable declarations.

LANGUAGE: java
CODE:
var id = 0;
var codefx = new URL("https://mp.weixin.qq.com/");
var list = new ArrayList<>();
var list = List.of(1, 2, 3);
var map = new HashMap<String, String>();
var p = Paths.of("src/test/java/Java9FeaturesTest.java");
var numbers = List.of("a", "b", "c");
for (var n : list)
    System.out.print(n+ " ");

var count=null; //❌编译不通过，不能声明为 null
var r = () -> Math.random();//❌编译不通过,不能声明为 Lambda表达式
var array = {1,2,3};//❌编译不通过,不能声明数组

----------------------------------------

TITLE: Defining and Using Variables in Shell
DESCRIPTION: Shows how to define and use custom variables in a Shell script. It also demonstrates how to use predefined environment variables.

LANGUAGE: shell
CODE:
#!/bin/bash
#自定义变量hello
hello="hello world"
echo $hello
echo  "helloworld!"

----------------------------------------

TITLE: Applying Data Masking Annotations to POJO in Java
DESCRIPTION: Demonstrates how to apply the custom @Desensitization annotation to fields in a POJO class.

LANGUAGE: java
CODE:
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TestPojo {
    private String userName;

    @Desensitization(type = DesensitizationTypeEnum.MOBILE_PHONE)
    private String phone;

    @Desensitization(type = DesensitizationTypeEnum.PASSWORD)
    private String password;

    @Desensitization(type = DesensitizationTypeEnum.MY_RULE, startInclude = 0, endExclude = 2)
    private String address;
}

----------------------------------------

TITLE: Array Operations in Shell
DESCRIPTION: Shows how to create, access, modify, and iterate over arrays in Shell scripting.

LANGUAGE: shell
CODE:
#!/bin/bash
array=(1 2 3 4 5);
# 获取数组长度
length=${#array[@]}
# 或者
length2=${#array[*]}
#输出数组长度
echo $length #输出：5
echo $length2 #输出：5
# 输出数组第三个元素
echo ${array[2]} #输出：3
unset array[1]# 删除下标为1的元素也就是删除第二个元素
for i in ${array[@]};do echo $i ;done # 遍历数组，输出：1 3 4 5
unset array; # 删除数组中的所有元素
for i in ${array[@]};do echo $i ;done # 遍历数组，数组元素为空，没有任何输出内容

----------------------------------------

TITLE: Deadlock Detection Example in Java
DESCRIPTION: Java code example demonstrating how to create a deadlock situation between two threads by acquiring locks on shared resources in opposite order. Used to showcase jstack's deadlock detection capabilities.

LANGUAGE: java
CODE:
public class DeadLockDemo {
    private static Object resource1 = new Object();//资源 1
    private static Object resource2 = new Object();//资源 2

    public static void main(String[] args) {
        new Thread(() -> {
            synchronized (resource1) {
                System.out.println(Thread.currentThread() + "get resource1");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource2");
                synchronized (resource2) {
                    System.out.println(Thread.currentThread() + "get resource2");
                }
            }
        }, "线程 1").start();

        new Thread(() -> {
            synchronized (resource2) {
                System.out.println(Thread.currentThread() + "get resource2");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "waiting get resource1");
                synchronized (resource1) {
                    System.out.println(Thread.currentThread() + "get resource1");
                }
            }
        }, "线程 2").start();
    }
}

----------------------------------------

TITLE: Demonstrating synchronized block issue with Integer
DESCRIPTION: This code snippet demonstrates a common mistake when using Integer objects in synchronized blocks, which can lead to unexpected results in concurrent environments.

LANGUAGE: java
CODE:
public void inc(Integer count) {
    for (int i = 0; i < 10; i++) {
        new Thread(() -> {
            synchronized (count) {
                count++;
            }
        }).start();
    }
}

----------------------------------------

TITLE: 安装Docker (CentOS)
DESCRIPTION: 在CentOS系统上使用官方脚本安装Docker的命令。

LANGUAGE: bash
CODE:
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh --mirror Aliyun

----------------------------------------

TITLE: 使用Scapy进行网络嗅探
DESCRIPTION: 使用Python的Scapy库嗅探本地网络接口上的TCP连接数据包。

LANGUAGE: python
CODE:
sniff(iface="lo0",
     lfilter=lambda x: x.haslayer(TCP) and x[IP].src == "127.0.0.1" and x[IP].dst == "127.0.0.1" and (x[TCP].sport == 8000 or x[TCP].dport == 8000),
     prn=lambda x: x.sprintf("{IP:%IP.src% -> %IP.dst%:%TCP.dport%} %2s,Raw.load%"))

----------------------------------------

TITLE: Looping Constructs in Shell
DESCRIPTION: Demonstrates the use of for and while loops in Shell scripting for iteration.

LANGUAGE: shell
CODE:
#!/bin/bash
for i in {0..9};
do
   echo $RANDOM;
done

LANGUAGE: shell
CODE:
#!/bin/bash
int=1
while(( $int<=5 ))
do
    echo $int
    let "int++"
done

----------------------------------------

TITLE: Demonstrating Pass-by-Value for Reference Types in Java (Object Example)
DESCRIPTION: This code snippet further proves that Java uses pass-by-value for reference types by showing that swapping object references inside a method does not affect the original references outside the method.

LANGUAGE: Java
CODE:
public class Person {
    private String name;
   // 省略构造函数、Getter&Setter方法
}

public static void main(String[] args) {
    Person xiaoZhang = new Person("小张");
    Person xiaoLi = new Person("小李");
    swap(xiaoZhang, xiaoLi);
    System.out.println("xiaoZhang:" + xiaoZhang.getName());
    System.out.println("xiaoLi:" + xiaoLi.getName());
}

public static void swap(Person person1, Person person2) {
    Person temp = person1;
    person1 = person2;
    person2 = temp;
    System.out.println("person1:" + person1.getName());
    System.out.println("person2:" + person2.getName());
}

----------------------------------------

TITLE: Rehash Operation in ConcurrentHashMap Java 7
DESCRIPTION: Implementation of rehash operation for resizing the ConcurrentHashMap in Java 7.

LANGUAGE: Java
CODE:
private void rehash(HashEntry<K,V> node) {
    HashEntry<K,V>[] oldTable = table;
    int oldCapacity = oldTable.length;
    int newCapacity = oldCapacity << 1;
    threshold = (int)(newCapacity * loadFactor);
    HashEntry<K,V>[] newTable = (HashEntry<K,V>[]) new HashEntry[newCapacity];
    int sizeMask = newCapacity - 1;
    for (int i = 0; i < oldCapacity ; i++) {
        HashEntry<K,V> e = oldTable[i];
        if (e != null) {
            HashEntry<K,V> next = e.next;
            int idx = e.hash & sizeMask;
            if (next == null)
                newTable[idx] = e;
            else {
                HashEntry<K,V> lastRun = e;
                int lastIdx = idx;
                for (HashEntry<K,V> last = next; last != null; last = last.next) {
                    int k = last.hash & sizeMask;
                    if (k != lastIdx) {
                        lastIdx = k;
                        lastRun = last;
                    }
                }
                newTable[lastIdx] = lastRun;
                for (HashEntry<K,V> p = e; p != lastRun; p = p.next) {
                    V v = p.value;
                    int h = p.hash;
                    int k = h & sizeMask;
                    HashEntry<K,V> n = newTable[k];
                    newTable[k] = new HashEntry<K,V>(h, p.key, v, n);
                }
            }
        }
    }
    int nodeIndex = node.hash & sizeMask;
    node.setNext(newTable[nodeIndex]);
    newTable[nodeIndex] = node;
    table = newTable;
}

----------------------------------------

TITLE: 启动Docker服务
DESCRIPTION: 启动Docker服务并设置开机自启的命令。

LANGUAGE: bash
CODE:
systemctl start docker
systemctl enable docker

----------------------------------------

TITLE: Using Collection copyOf() Method in Java 10
DESCRIPTION: Demonstrates the usage of the new copyOf() static method introduced in Java 10 for List, Set, and Map interfaces. This method creates an unmodifiable copy of the input collection.

LANGUAGE: java
CODE:
static <E> List<E> copyOf(Collection<? extends E> coll) {
    return ImmutableCollections.listCopy(coll);
}

----------------------------------------

TITLE: Defining and Using Functions in Shell
DESCRIPTION: Shows how to define and call functions in Shell scripts, including functions with parameters and return values.

LANGUAGE: shell
CODE:
#!/bin/bash
hello(){
    echo "这是我的第一个 shell 函数!"
}
echo "-----函数开始执行-----"
hello
echo "-----函数执行完毕-----"

LANGUAGE: shell
CODE:
#!/bin/bash
funWithReturn(){
    echo "输入第一个数字: "
    read aNum
    echo "输入第二个数字: "
    read anotherNum
    echo "两个数字分别为 $aNum 和 $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "输入的两个数字之和为 $?"

----------------------------------------

TITLE: CAS Operations with Unsafe in Java
DESCRIPTION: Shows how to perform Compare-And-Swap (CAS) operations using Unsafe for thread-safe updates.

LANGUAGE: java
CODE:
private void increment(int x){
    while (true){
        try {
            long fieldOffset = unsafe.objectFieldOffset(CasTest.class.getDeclaredField("a"));
            if (unsafe.compareAndSwapInt(this,fieldOffset,x-1,x))
                break;
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
    }
}

----------------------------------------

TITLE: Creating Time Zone Test Table in MySQL
DESCRIPTION: SQL code to create a test table that demonstrates the difference between DateTime and Timestamp columns.

LANGUAGE: sql
CODE:
CREATE TABLE `time_zone_test` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `date_time` datetime DEFAULT NULL,
  `time_stamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Initializing CopyOnWriteArrayList in Java
DESCRIPTION: Shows the three constructors available for CopyOnWriteArrayList: empty, from a Collection, and from an array.

LANGUAGE: Java
CODE:
public CopyOnWriteArrayList() {
    setArray(new Object[0]);
}

public CopyOnWriteArrayList(Collection<? extends E> c) {
    Object[] elements;
    if (c.getClass() == CopyOnWriteArrayList.class)
        elements = ((CopyOnWriteArrayList<?>)c).getArray();
    else {
        elements = c.toArray();
        if (elements.getClass() != Object[].class)
            elements = Arrays.copyOf(elements, elements.length, Object[].class);
    }
    setArray(elements);
}

public CopyOnWriteArrayList(E[] toCopyIn) {
    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));
}

----------------------------------------

TITLE: LinkedHashMap Access Order Example
DESCRIPTION: Shows how to use LinkedHashMap with access order enabled

LANGUAGE: java
CODE:
LinkedHashMap<Integer, String> map = new LinkedHashMap<>(16, 0.75f, true);
map.put(1, "one");
map.put(2, "two");
map.put(3, "three");
map.put(4, "four");
map.put(5, "five");
//访问元素2,该元素会被移动至链表末端
map.get(2);
//访问元素3,该元素会被移动至链表末端
map.get(3);
for (Map.Entry<Integer, String> entry : map.entrySet()) {
    System.out.println(entry.getKey() + " : " + entry.getValue());
}

----------------------------------------

TITLE: Working with Strings in Shell
DESCRIPTION: Demonstrates string operations in Shell, including string concatenation and length calculation using different methods.

LANGUAGE: shell
CODE:
#!/bin/bash
name="SnailClimb"
# 使用双引号拼接
greeting="hello, "$name" !"
greeting_1="hello, ${name} !"
echo $greeting  $greeting_1
# 使用单引号拼接
greeting_2='hello, '$name' !'
greeting_3='hello, ${name} !'
echo $greeting_2  $greeting_3

LANGUAGE: shell
CODE:
#!/bin/bash
#获取字符串长度
name="SnailClimb"
# 第一种方式
echo ${#name} #输出 10
# 第二种方式
expr length "$name";

----------------------------------------

TITLE: Implementing Custom ServiceLoader in Java
DESCRIPTION: A simplified implementation of ServiceLoader to demonstrate the core principles of SPI.

LANGUAGE: Java
CODE:
package edu.jiangxuan.up.service;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

public class MyServiceLoader<S> {
    private final Class<S> service;
    private final List<S> providers = new ArrayList<>();
    private final ClassLoader classLoader;

    public static <S> MyServiceLoader<S> load(Class<S> service) {
        return new MyServiceLoader<>(service);
    }

    private MyServiceLoader(Class<S> service) {
        this.service = service;
        this.classLoader = Thread.currentThread().getContextClassLoader();
        doLoad();
    }

    private void doLoad() {
        try {
            Enumeration<URL> urls = classLoader.getResources("META-INF/services/" + service.getName());
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                URLConnection urlConnection = url.openConnection();
                urlConnection.setUseCaches(false);
                InputStream inputStream = urlConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                String className = bufferedReader.readLine();

                while (className != null) {
                    Class<?> clazz = Class.forName(className, false, classLoader);
                    if (service.isAssignableFrom(clazz)) {
                        Constructor<? extends S> constructor = (Constructor<? extends S>) clazz.getConstructor();
                        S instance = constructor.newInstance();
                        providers.add(instance);
                    }
                    className = bufferedReader.readLine();
                }
            }
        } catch (Exception e) {
            System.out.println("读取文件异常。。。");
        }
    }

    public List<S> getProviders() {
        return providers;
    }
}

----------------------------------------

TITLE: Converting String to Integer (Java)
DESCRIPTION: Function to convert a string to an integer without using built-in parsing functions. It handles positive/negative signs and invalid input. Returns 0 for invalid strings or when the input is 0.

LANGUAGE: java
CODE:
public class Main {

  public static int StrToInt(String str) {
    if (str.length() == 0)
      return 0;
    char[] chars = str.toCharArray();
    int flag = 0;
    if (chars[0] == '+')
      flag = 1;
    else if (chars[0] == '-')
      flag = 2;
    int start = flag > 0 ? 1 : 0;
    int res = 0;
    for (int i = start; i < chars.length; i++) {
      if (Character.isDigit(chars[i])) {
        int temp = chars[i] - '0';
        res = res * 10 + temp;
      } else {
        return 0;
      }
    }
   return flag != 2 ? res : -res;

  }

  public static void main(String[] args) {
    String s = "-12312312";
    System.out.println("使用库函数转换：" + Integer.valueOf(s));
    int res = Main.StrToInt(s);
    System.out.println("使用自己写的方法转换：" + res);

  }

}

----------------------------------------

TITLE: Using Java SPI in Main Method
DESCRIPTION: Example of using the LoggerService in a main method to demonstrate SPI functionality.

LANGUAGE: Java
CODE:
package edu.jiangxuan.up.service;

import edu.jiangxuan.up.spi.LoggerService;

public class TestJavaSPI {
    public static void main(String[] args) {
        LoggerService loggerService = LoggerService.getService();
        loggerService.info("你好");
        loggerService.debug("测试Java SPI 机制");
    }
}

----------------------------------------

TITLE: Redis Transaction Example with DISCARD
DESCRIPTION: Example showing how to discard/cancel a Redis transaction using the DISCARD command.

LANGUAGE: bash
CODE:
> MULTI
OK
> SET PROJECT "JavaGuide"
QUEUED
> GET PROJECT
QUEUED
> DISCARD
OK

----------------------------------------

TITLE: Static and Non-Static Code Block Execution in Java
DESCRIPTION: Example showing the execution order of static code blocks, non-static code blocks, and constructors in a Java class.

LANGUAGE: java
CODE:
public class Test {
    public Test() {
        System.out.print("默认构造方法！--");
    }
    //非静态代码块
    {
        System.out.print("非静态代码块！--");
    }
    //静态代码块
    static {
        System.out.print("静态代码块！--");
    }
    private static void test() {
        System.out.print("静态方法中的内容! --");
        {
            System.out.print("静态方法中的代码块！--");
        }
    }
    public static void main(String[] args) {
        Test test = new Test();
        Test.test();
    }
}

----------------------------------------

TITLE: Kafka Retryable Topic Configuration in Java
DESCRIPTION: Example of configuring a retryable Kafka topic using the @RetryableTopic annotation in Spring Kafka

LANGUAGE: Java
CODE:
@RetryableTopic(
        attempts = "5",
        backoff = @Backoff(delay = 100, maxDelay = 1000)
)
@KafkaListener(topics = {KafkaConst.TEST_TOPIC}, groupId = "apple")
private void customer(String message) {
    log.info("kafka customer:{}", message);
    Integer n = Integer.parseInt(message);
    if (n % 5 == 0) {
        throw new RuntimeException();
    }
    System.out.println(n);
}

----------------------------------------

TITLE: Using Method References
DESCRIPTION: Shows how to use method references as an alternative to lambda expressions for referring to methods.

LANGUAGE: Java
CODE:
PersonFactory<Person> personFactory = Person::new;
Person person = personFactory.create("Peter", "Parker");

----------------------------------------

TITLE: 使用RandomAccessFile随机访问文件
DESCRIPTION: 展示了如何使用RandomAccessFile在文件的任意位置进行读写操作。

LANGUAGE: Java
CODE:
RandomAccessFile randomAccessFile = new RandomAccessFile(new File("input.txt"), "rw");
System.out.println("读取之前的偏移量：" + randomAccessFile.getFilePointer() + ",当前读取到的字符" + (char) randomAccessFile.read() + "，读取之后的偏移量：" + randomAccessFile.getFilePointer());
randomAccessFile.seek(6);
System.out.println("读取之前的偏移量：" + randomAccessFile.getFilePointer() + ",当前读取到的字符" + (char) randomAccessFile.read() + "，读取之后的偏移量：" + randomAccessFile.getFilePointer());
randomAccessFile.write(new byte[]{'H', 'I', 'J', 'K'});
randomAccessFile.seek(0);
System.out.println("读取之前的偏移量：" + randomAccessFile.getFilePointer() + ",当前读取到的字符" + (char) randomAccessFile.read() + "，读取之后的偏移量：" + randomAccessFile.getFilePointer());

----------------------------------------

TITLE: Static Import Usage in Java
DESCRIPTION: Example of using static import to directly access static members of a class without class name qualification.

LANGUAGE: java
CODE:
import static java.lang.Math.*;
public class Demo {
  public static void main(String[] args) {
    int max = max(1,2);
    System.out.println(max);
  }
}

----------------------------------------

TITLE: Put Operation in ConcurrentHashMap Java 7
DESCRIPTION: Implementation of put operation in ConcurrentHashMap for Java 7, handling locking and insertion of new entries.

LANGUAGE: Java
CODE:
final V put(K key, int hash, V value, boolean onlyIfAbsent) {
    HashEntry<K,V> node = tryLock() ? null : scanAndLockForPut(key, hash, value);
    V oldValue;
    try {
        HashEntry<K,V>[] tab = table;
        int index = (tab.length - 1) & hash;
        HashEntry<K,V> first = entryAt(tab, index);
        for (HashEntry<K,V> e = first;;) {
            if (e != null) {
                K k;
                if ((k = e.key) == key ||
                    (e.hash == hash && key.equals(k))) {
                    oldValue = e.value;
                    if (!onlyIfAbsent) {
                        e.value = value;
                        ++modCount;
                    }
                    break;
                }
                e = e.next;
            }
            else {
                if (node != null)
                    node.setNext(first);
                else
                    node = new HashEntry<K,V>(hash, key, value, first);
                int c = count + 1;
                if (c > threshold && tab.length < MAXIMUM_CAPACITY)
                    rehash(node);
                else
                    setEntryAt(tab, index, node);
                ++modCount;
                count = c;
                oldValue = null;
                break;
            }
        }
    } finally {
        unlock();
    }
    return oldValue;
}

----------------------------------------

TITLE: Using Lambda Expressions with Collections in Java
DESCRIPTION: Examples of using lambda expressions with Java collections for iteration and sorting.

LANGUAGE: java
CODE:
List<Integer> strings = Arrays.asList(1, 2, 3);

Collections.sort(strings, (Integer o1, Integer o2) -> o1 - o2);
//分解开
Comparator<Integer> comparator = (Integer o1, Integer o2) -> o1 - o2;
Collections.sort(strings, comparator);

----------------------------------------

TITLE: 使用BufferedInputStream和BufferedOutputStream复制PDF文件
DESCRIPTION: 展示了如何使用字节缓冲流复制大文件并计算耗时。

LANGUAGE: Java
CODE:
long start = System.currentTimeMillis();
try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream("深入理解计算机操作系统.pdf"));
     BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("深入理解计算机操作系统-副本.pdf"))) {
    int content;
    while ((content = bis.read()) != -1) {
        bos.write(content);
    }
} catch (IOException e) {
    e.printStackTrace();
}
long end = System.currentTimeMillis();
System.out.println("使用缓冲流复制PDF文件总耗时:" + (end - start) + " 毫秒");

----------------------------------------

TITLE: Static Variable and Method Usage in Java
DESCRIPTION: Demonstration of static variables and methods in a Java class, including their initialization and access.

LANGUAGE: java
CODE:
public class StaticBean {
    String name;
    //静态变量
    static int age;
    public StaticBean(String name) {
        this.name = name;
    }
    //静态方法
    static void sayHello() {
        System.out.println("Hello i am java");
    }
    @Override
    public String toString() {
        return "StaticBean{" +
                "name=" + name + ",age=" + age +
                "}";
    }
}

----------------------------------------

TITLE: Replacing Spaces in a String (Java)
DESCRIPTION: Two methods to replace spaces in a string with '%20': 1) Using charAt() and StringBuilder, 2) Using replaceAll() API method. The first method iterates through the string and replaces spaces manually, while the second uses a built-in Java method.

LANGUAGE: java
CODE:
public class Solution {

  public static String replaceSpace(StringBuffer str) {

    int length = str.length();
    StringBuffer result = new StringBuffer();
    for (int i = 0; i < length; i++) {
      char b = str.charAt(i);
      if (String.valueOf(b).equals(" ")) {
        result.append("%20");
      } else {
        result.append(b);
      }
    }
    return result.toString();

  }

  public static String replaceSpace2(StringBuffer str) {

    return str.toString().replaceAll("\\s", "%20");
  }
}

----------------------------------------

TITLE: Demonstrating ThreadLocal Garbage Collection Behavior
DESCRIPTION: Shows how to use reflection to examine the ThreadLocal's internal data structure after garbage collection.

LANGUAGE: Java
CODE:
public class ThreadLocalDemo {

    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InterruptedException {
        Thread t = new Thread(()->test("abc",false));
        t.start();
        t.join();
        System.out.println("--gc后--");
        Thread t2 = new Thread(() -> test("def", true));
        t2.start();
        t2.join();
    }

    private static void test(String s,boolean isGC)  {
        try {
            new ThreadLocal<>().set(s);
            if (isGC) {
                System.gc();
            }
            Thread t = Thread.currentThread();
            Class<? extends Thread> clz = t.getClass();
            Field field = clz.getDeclaredField("threadLocals");
            field.setAccessible(true);
            Object ThreadLocalMap = field.get(t);
            Class<?> tlmClass = ThreadLocalMap.getClass();
            Field tableField = tlmClass.getDeclaredField("table");
            tableField.setAccessible(true);
            Object[] arr = (Object[]) tableField.get(ThreadLocalMap);
            for (Object o : arr) {
                if (o != null) {
                    Class<?> entryClass = o.getClass();
                    Field valueField = entryClass.getDeclaredField("value");
                    Field referenceField = entryClass.getSuperclass().getSuperclass().getDeclaredField("referent");
                    valueField.setAccessible(true);
                    referenceField.setAccessible(true);
                    System.out.println(String.format("弱引用key:%s,值:%s", referenceField.get(o), valueField.get(o)));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

----------------------------------------

TITLE: 使用BufferedInputStream读取文件
DESCRIPTION: 展示了如何使用BufferedInputStream配合FileInputStream读取文件内容并转换为字符串。

LANGUAGE: Java
CODE:
BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream("input.txt"));
String result = new String(bufferedInputStream.readAllBytes());
System.out.println(result);

----------------------------------------

TITLE: 实现桶排序算法 (Java)
DESCRIPTION: 这段代码实现了桶排序算法。它通过将元素分配到不同的桶中，然后对每个桶中的元素进行排序，最后合并所有桶中的元素。这里使用了递归的方式对每个桶进行排序，当桶的大小减小到一定程度时，会切换到其他排序算法。

LANGUAGE: Java
CODE:
private static int[] getMinAndMax(List<Integer> arr) {
    int maxValue = arr.get(0);
    int minValue = arr.get(0);
    for (int i : arr) {
        if (i > maxValue) {
            maxValue = i;
        } else if (i < minValue) {
            minValue = i;
        }
    }
    return new int[] { minValue, maxValue };
}

public static List<Integer> bucketSort(List<Integer> arr, int bucket_size) {
    if (arr.size() < 2 || bucket_size == 0) {
        return arr;
    }
    int[] extremum = getMinAndMax(arr);
    int minValue = extremum[0];
    int maxValue = extremum[1];
    int bucket_cnt = (maxValue - minValue) / bucket_size + 1;
    List<List<Integer>> buckets = new ArrayList<>();
    for (int i = 0; i < bucket_cnt; i++) {
        buckets.add(new ArrayList<Integer>());
    }
    for (int element : arr) {
        int idx = (element - minValue) / bucket_size;
        buckets.get(idx).add(element);
    }
    for (int i = 0; i < buckets.size(); i++) {
        if (buckets.get(i).size() > 1) {
            buckets.set(i, sort(buckets.get(i), bucket_size / 2));
        }
    }
    ArrayList<Integer> result = new ArrayList<>();
    for (List<Integer> bucket : buckets) {
        for (int element : bucket) {
            result.add(element);
        }
    }
    return result;
}

----------------------------------------

TITLE: 运行Docker容器
DESCRIPTION: 运行Tomcat容器并映射端口的命令。

LANGUAGE: bash
CODE:
docker run -d -p 8080:8080 tomcat:8.0-jre8

----------------------------------------

TITLE: 创建数据卷
DESCRIPTION: 创建数据卷并挂载到Tomcat容器的命令。

LANGUAGE: bash
CODE:
docker run -d -p 8080:8080 --name tomcat01 -v /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8

----------------------------------------

TITLE: 实现基数排序算法 (Java)
DESCRIPTION: 这段代码实现了基数排序算法。它通过从最低位开始，对每一位数字进行排序，直到最高位。这里使用了10个桶（对应0-9十个数字）来存储每一位的排序结果。算法首先确定最大数的位数，然后进行相应次数的排序。

LANGUAGE: Java
CODE:
public static int[] radixSort(int[] arr) {
    if (arr.length < 2) {
        return arr;
    }
    int N = 1;
    int maxValue = arr[0];
    for (int element : arr) {
        if (element > maxValue) {
            maxValue = element;
        }
    }
    while (maxValue / 10 != 0) {
        maxValue = maxValue / 10;
        N += 1;
    }
    for (int i = 0; i < N; i++) {
        List<List<Integer>> radix = new ArrayList<>();
        for (int k = 0; k < 10; k++) {
            radix.add(new ArrayList<Integer>());
        }
        for (int element : arr) {
            int idx = (element / (int) Math.pow(10, i)) % 10;
            radix.get(idx).add(element);
        }
        int idx = 0;
        for (List<Integer> l : radix) {
            for (int n : l) {
                arr[idx++] = n;
            }
        }
    }
    return arr;
}

----------------------------------------

TITLE: 实现计数排序算法 (Java)
DESCRIPTION: 这段代码实现了计数排序算法。它通过计算每个元素应该出现的位置来进行排序，适用于已知范围的整数排序。getMinAndMax方法用于找出数组中的最大值和最小值，以确定计数数组的大小。

LANGUAGE: Java
CODE:
private static int[] getMinAndMax(int[] arr) {
    int maxValue = arr[0];
    int minValue = arr[0];
    for (int i = 0; i < arr.length; i++) {
        if (arr[i] > maxValue) {
            maxValue = arr[i];
        } else if (arr[i] < minValue) {
            minValue = arr[i];
        }
    }
    return new int[] { minValue, maxValue };
}

public static int[] countingSort(int[] arr) {
    if (arr.length < 2) {
        return arr;
    }
    int[] extremum = getMinAndMax(arr);
    int minValue = extremum[0];
    int maxValue = extremum[1];
    int[] countArr = new int[maxValue - minValue + 1];
    int[] result = new int[arr.length];

    for (int i = 0; i < arr.length; i++) {
        countArr[arr[i] - minValue] += 1;
    }
    for (int i = 1; i < countArr.length; i++) {
        countArr[i] += countArr[i - 1];
    }
    for (int i = arr.length - 1; i >= 0; i--) {
        int idx = countArr[arr[i] - minValue] - 1;
        result[idx] = arr[i];
        countArr[arr[i] - minValue] -= 1;
    }
    return result;
}

----------------------------------------

TITLE: Using the New Date/Time API
DESCRIPTION: Shows how to use the new java.time package for date and time operations.

LANGUAGE: Java
CODE:
LocalDate today = LocalDate.now();
LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);
DayOfWeek dayOfWeek = today.getDayOfWeek();

----------------------------------------

TITLE: Implementing Custom Synchronizer using AQS
DESCRIPTION: This code snippet demonstrates how to implement a custom synchronization tool (LeeLock) using AQS, including methods for lock acquisition and release.

LANGUAGE: Java
CODE:
public class LeeLock  {

    private static class Sync extends AbstractQueuedSynchronizer {
        @Override
        protected boolean tryAcquire (int arg) {
            return compareAndSetState(0, 1);
        }

        @Override
        protected boolean tryRelease (int arg) {
            setState(0);
            return true;
        }

        @Override
        protected boolean isHeldExclusively () {
            return getState() == 1;
        }
    }

    private Sync sync = new Sync();

    public void lock () {
        sync.acquire(1);
    }

    public void unlock () {
        sync.release(1);
    }
}

----------------------------------------

TITLE: Implementing Custom Synchronizer using AQS
DESCRIPTION: This code snippet demonstrates how to implement a custom synchronization tool (LeeLock) using AQS, including methods for lock acquisition and release.

LANGUAGE: Java
CODE:
public class LeeLock  {

    private static class Sync extends AbstractQueuedSynchronizer {
        @Override
        protected boolean tryAcquire (int arg) {
            return compareAndSetState(0, 1);
        }

        @Override
        protected boolean tryRelease (int arg) {
            setState(0);
            return true;
        }

        @Override
        protected boolean isHeldExclusively () {
            return getState() == 1;
        }
    }

    private Sync sync = new Sync();

    public void lock () {
        sync.acquire(1);
    }

    public void unlock () {
        sync.release(1);
    }
}

----------------------------------------

TITLE: 实现快速排序算法 (Java)
DESCRIPTION: 这段代码实现了快速排序算法。它通过选择一个 '基准' 元素，将数组分成两个子数组，小于基准的元素在左边，大于基准的元素在右边，然后递归地对子数组进行排序。partition方法负责数组的分区操作。

LANGUAGE: Java
CODE:
public static int partition(int[] array, int low, int high) {
    int pivot = array[high];
    int pointer = low;
    for (int i = low; i < high; i++) {
        if (array[i] <= pivot) {
            int temp = array[i];
            array[i] = array[pointer];
            array[pointer] = temp;
            pointer++;
        }
        System.out.println(Arrays.toString(array));
    }
    int temp = array[pointer];
    array[pointer] = array[high];
    array[high] = temp;
    return pointer;
}
public static void quickSort(int[] array, int low, int high) {
    if (low < high) {
        int position = partition(array, low, high);
        quickSort(array, low, position - 1);
        quickSort(array, position + 1, high);
    }
}

----------------------------------------

TITLE: 实现希尔排序算法 (Java)
DESCRIPTION: 这段代码实现了希尔排序算法。它是插入排序的改进版，通过将整个待排序的记录序列分割成若干子序列分别进行直接插入排序，来提高排序的速度。代码使用了递减的间隔序列来实现这一过程。

LANGUAGE: Java
CODE:
public static int[] shellSort(int[] arr) {
    int n = arr.length;
    int gap = n / 2;
    while (gap > 0) {
        for (int i = gap; i < n; i++) {
            int current = arr[i];
            int preIndex = i - gap;
            while (preIndex >= 0 && arr[preIndex] > current) {
                arr[preIndex + gap] = arr[preIndex];
                preIndex -= gap;
            }
            arr[preIndex + gap] = current;
        }
        gap /= 2;
    }
    return arr;
}

----------------------------------------

TITLE: Custom Kafka Error Handler Implementation in Java
DESCRIPTION: Example of implementing a custom error handler for Kafka consumers by extending DefaultErrorHandler

LANGUAGE: Java
CODE:
@Slf4j
public class DelErrorHandler extends DefaultErrorHandler {

    public DelErrorHandler(FixedBackOff backOff) {
        super(null,backOff);
    }

    @Override
    public void handleRemaining(Exception thrownException, List<ConsumerRecord<?, ?>> records, Consumer<?, ?> consumer, MessageListenerContainer container) {
        super.handleRemaining(thrownException, records, consumer, container);
        log.info("重试多次失败");
        // 自定义操作
    }
}

----------------------------------------

TITLE: Initializing SpringBoot Application with @SpringBootApplication
DESCRIPTION: Basic Spring Boot application configuration using @SpringBootApplication annotation which combines @Configuration, @EnableAutoConfiguration and @ComponentScan

LANGUAGE: java
CODE:
@SpringBootApplication
public class SpringSecurityJwtGuideApplication {
    public static void main(java.lang.String[] args) {
        SpringApplication.run(SpringSecurityJwtGuideApplication.class, args);
    }
}

----------------------------------------

TITLE: 实现选择排序算法 (Java)
DESCRIPTION: 这段代码实现了选择排序算法。它通过不断从未排序部分选择最小元素，放到已排序部分的末尾。每次遍历未排序部分找到最小元素的索引，然后与未排序部分的第一个元素交换位置。

LANGUAGE: Java
CODE:
public static int[] selectionSort(int[] arr) {
    for (int i = 0; i < arr.length - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < arr.length; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        if (minIndex != i) {
            int tmp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = tmp;
        }
    }
    return arr;
}

----------------------------------------

TITLE: Arithmetic Operations in Shell
DESCRIPTION: Demonstrates how to perform basic arithmetic operations in Shell using the expr command.

LANGUAGE: shell
CODE:
#!/bin/bash
a=3;b=3;
val=`expr $a + $b`
#输出：Total value : 6
echo "Total value : $val"

----------------------------------------

TITLE: Static Inner Class for Singleton Pattern in Java
DESCRIPTION: Implementation of the Singleton pattern using a static inner class in Java, demonstrating lazy initialization and thread safety.

LANGUAGE: java
CODE:
public class Singleton {
    //声明为 private 避免调用默认构造方法创建对象
    private Singleton() {
    }
   // 声明为 private 表明静态内部该类只能在该 Singleton 类中被访问
    private static class SingletonHolder {
        private static final Singleton INSTANCE = new Singleton();
    }
    public static Singleton getUniqueInstance() {
        return SingletonHolder.INSTANCE;
    }
}

----------------------------------------

TITLE: Defining Delayed Interface in Java
DESCRIPTION: Core interface definition that elements in DelayQueue must implement to specify delay behavior.

LANGUAGE: java
CODE:
public interface Delayed extends Comparable<Delayed> {
    long getDelay(TimeUnit unit);
}

----------------------------------------

TITLE: 实现冒泡排序算法 (Java)
DESCRIPTION: 这段代码实现了冒泡排序算法。它通过重复遍历要排序的数列，依次比较相邻元素，如果顺序错误则交换，使较大的元素 "冒泡" 到数列末端。代码中加入了flag优化，可以在数列已经有序时提前结束排序过程。

LANGUAGE: Java
CODE:
public static int[] bubbleSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        boolean flag = true;
        for (int j = 0; j < arr.length - i; j++) {
            if (arr[j] > arr[j + 1]) {
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
                flag = false;
            }
        }
        if (flag) {
            break;
        }
    }
    return arr;
}

----------------------------------------

TITLE: Modifying File Permissions
DESCRIPTION: Example showing how to modify file permissions using chmod command

LANGUAGE: bash
CODE:
chmod u=rwx,g=rw,o=r aaa.txt
chmod 764 aaa.txt

----------------------------------------

TITLE: 下载Docker镜像
DESCRIPTION: 从Docker Hub下载指定版本MySQL镜像的命令。

LANGUAGE: bash
CODE:
docker pull MySQL:5.7.32

----------------------------------------

TITLE: Using DelayQueue for Task Scheduling in Java
DESCRIPTION: Example demonstrating how to use DelayQueue to schedule and execute delayed tasks in order of their delay times.

LANGUAGE: java
CODE:
DelayQueue<DelayedTask> delayQueue = new DelayQueue<>();

delayQueue.add(new DelayedTask(2000, () -> System.out.println("Task 2")));
delayQueue.add(new DelayedTask(1000, () -> System.out.println("Task 1")));
delayQueue.add(new DelayedTask(3000, () -> System.out.println("Task 3")));

while (!delayQueue.isEmpty()) {
  DelayedTask task = delayQueue.take();
  if (task != null) {
    task.execute();
  }
}

----------------------------------------

TITLE: 使用ArrayList和Vector的示例
DESCRIPTION: 演示了ArrayList和Vector的基本用法，包括添加、修改和删除元素。

LANGUAGE: Java
CODE:
// ArrayList的使用
ArrayList<String> stringList = new ArrayList<>(Arrays.asList("hello", "world", "!"));
stringList.add("goodbye");
System.out.println(stringList);// [hello, world, !, goodbye]
stringList.set(0, "hi");
System.out.println(stringList);// [hi, world, !, goodbye]
stringList.remove(0);
System.out.println(stringList); // [world, !, goodbye]

----------------------------------------

TITLE: Handling Malformed Data Records in SQL
DESCRIPTION: Query to fix records where tag field contains multiple comma-separated values that should be in separate columns

LANGUAGE: sql
CODE:
SELECT
	exam_id,
	substring_index( tag, ',', 1 ) tag,
	substring_index( substring_index( tag, ',', 2 ), ',',- 1 ) difficulty,
	substring_index( tag, ',',- 1 ) duration
FROM
	examination_info
WHERE
	difficulty = ''

----------------------------------------

TITLE: 使用FileInputStream读取文件
DESCRIPTION: 展示了如何使用FileInputStream读取文件内容,包括跳过字节、获取剩余字节数等操作。

LANGUAGE: Java
CODE:
try (InputStream fis = new FileInputStream("input.txt")) {
    System.out.println("Number of remaining bytes:"
            + fis.available());
    int content;
    long skip = fis.skip(2);
    System.out.println("The actual number of bytes skipped:" + skip);
    System.out.print("The content read from file:");
    while ((content = fis.read()) != -1) {
        System.out.print((char) content);
    }
} catch (IOException e) {
    e.printStackTrace();
}

----------------------------------------

TITLE: Finding Longest Palindromic Subsequence (Java)
DESCRIPTION: Dynamic programming solution to find the length of the longest palindromic subsequence in a string. It uses a 2D DP table to store lengths of palindromic subsequences.

LANGUAGE: java
CODE:
class Solution {
    public int longestPalindromeSubseq(String s) {
        int len = s.length();
        int [][] dp = new int[len][len];
        for(int i = len - 1; i>=0; i--){
            dp[i][i] = 1;
            for(int j = i+1; j < len; j++){
                if(s.charAt(i) == s.charAt(j))
                    dp[i][j] = dp[i+1][j-1] + 2;
                else
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);
            }
        }
        return dp[0][len-1];
    }
}

----------------------------------------

TITLE: User Activity Analysis with Case Statements
DESCRIPTION: Complex query using CASE statements to analyze user activity across different time periods and activity types

LANGUAGE: SQL
CODE:
SELECT user_info.uid,
       count(DISTINCT act_month) AS act_month_total,
       count(DISTINCT CASE
                          WHEN YEAR (act_time)= '2021' THEN act_day
                      END) AS act_days_2021,
       count(DISTINCT CASE
                          WHEN YEAR (act_time)= '2021'
                               AND tag = 'exam' THEN act_day
                      END) AS act_days_2021_exam,
       count(DISTINCT CASE
                          WHEN YEAR (act_time)= '2021'
                               AND tag = 'question' THEN act_day
                      END) AS act_days_2021_question
FROM
  (SELECT UID,
          exam_id AS ans_id,
          start_time AS act_time,
          date_format(start_time, '%Y%m') AS act_month,
          date_format(start_time, '%Y%m%d') AS act_day,
          'exam' AS tag
   FROM exam_record
   UNION ALL SELECT UID,
                    question_id AS ans_id,
                    submit_time AS act_time,
                    date_format(submit_time, '%Y%m') AS act_month,
                    date_format(submit_time, '%Y%m%d') AS act_day,
                    'question' AS tag
   FROM practice_record) total
RIGHT JOIN user_info ON total.uid = user_info.uid
WHERE user_info.LEVEL IN (6,
                          7)
GROUP BY user_info.uid
ORDER BY act_month_total DESC,
         act_days_2021 DESC

----------------------------------------

TITLE: Finding Longest Palindromic Substring (Java)
DESCRIPTION: Algorithm to find the longest palindromic substring in a given string. It expands around center for both odd and even length palindromes to find the longest one.

LANGUAGE: java
CODE:
class Solution {
  private int index, len;

  public String longestPalindrome(String s) {
    if (s.length() < 2)
      return s;
    for (int i = 0; i < s.length() - 1; i++) {
      PalindromeHelper(s, i, i);
      PalindromeHelper(s, i, i + 1);
    }
    return s.substring(index, index + len);
  }

  public void PalindromeHelper(String s, int l, int r) {
    while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
      l--;
      r++;
    }
    if (len < r - l - 1) {
      index = l + 1;
      len = r - l - 1;
    }
  }
}

----------------------------------------

TITLE: Calculating Exam and Practice Statistics with UNION
DESCRIPTION: Query to calculate number of attempts and unique users for both exams and practice questions

LANGUAGE: SQL
CODE:
SELECT *
FROM
  (SELECT exam_id AS tid,
          COUNT(DISTINCT exam_record.uid) uv,
          COUNT(*) pv
   FROM exam_record
   GROUP BY exam_id
   ORDER BY uv DESC, pv DESC) t1
UNION
SELECT *
FROM
  (SELECT question_id AS tid,
          COUNT(DISTINCT practice_record.uid) uv,
          COUNT(*) pv
   FROM practice_record
   GROUP BY question_id
   ORDER BY uv DESC, pv DESC) t2;

----------------------------------------

TITLE: Validating Palindrome String (Java)
DESCRIPTION: Function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. It uses two pointers moving from both ends towards the center to compare characters.

LANGUAGE: java
CODE:
class Solution {
  public  boolean isPalindrome(String s) {
    if (s.length() == 0)
      return true;
    int l = 0, r = s.length() - 1;
    while (l < r) {
      if (!Character.isLetterOrDigit(s.charAt(l))) {
        l++;
      } else if (!Character.isLetterOrDigit(s.charAt(r))) {
        r--;
      } else {
        if (Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r)))
          return false;
        l++;
        r--;
      }
    }
    return true;
  }
}

----------------------------------------

TITLE: Combining Queries with UNION
DESCRIPTION: Uses UNION to combine two SELECT statements, retrieving product IDs and quantities from the OrderItems table based on different conditions.

LANGUAGE: SQL
CODE:
SELECT prod_id, quantity
FROM OrderItems
WHERE quantity = 100
UNION
SELECT prod_id, quantity
FROM OrderItems
WHERE prod_id LIKE 'BNBG%'

----------------------------------------

TITLE: Finding Longest Palindrome in a String (Java)
DESCRIPTION: Algorithm to find the length of the longest palindrome that can be built with letters from a given string. It uses a HashSet to count character occurrences and determine the maximum palindrome length.

LANGUAGE: java
CODE:
class Solution {
  public  int longestPalindrome(String s) {
    if (s.length() == 0)
      return 0;
    HashSet<Character> hashset = new HashSet<Character>();
    char[] chars = s.toCharArray();
    int count = 0;
    for (int i = 0; i < chars.length; i++) {
      if (!hashset.contains(chars[i])) {
        hashset.add(chars[i]);
      } else {
        hashset.remove(chars[i]);
        count++;
      }
    }
    return hashset.isEmpty() ? count * 2 : count * 2 + 1;
  }
}

----------------------------------------

TITLE: Joining Tables to Retrieve Order Information
DESCRIPTION: Joins the Customers and Orders tables to retrieve customer names and their order numbers, sorted by customer name.

LANGUAGE: SQL
CODE:
SELECT c.cust_name, o.order_num
FROM Customers c
INNER JOIN Orders o
USING(cust_id)
ORDER BY c.cust_name

----------------------------------------

TITLE: Unix Timestamp Conversion Examples in MySQL
DESCRIPTION: SQL queries demonstrating conversion between Unix timestamps and human-readable datetime formats.

LANGUAGE: sql
CODE:
select UNIX_TIMESTAMP('2020-01-11 09:53:32');
select FROM_UNIXTIME(1578707612);

----------------------------------------

TITLE: Using Wildcards to Search Product Descriptions
DESCRIPTION: Retrieves product names and descriptions from the Products table where the description contains 'toy'.

LANGUAGE: SQL
CODE:
SELECT prod_name, prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%'

----------------------------------------

TITLE: Testing SQL Queries with Implicit Type Conversion in MySQL
DESCRIPTION: This set of SQL queries demonstrates the impact of implicit type conversion on query performance and index usage. It includes queries on both integer and varchar columns with different value formats to show how MySQL handles type conversion.

LANGUAGE: sql
CODE:
1: SELECT * FROM `test1` WHERE num1 = 10000;
2: SELECT * FROM `test1` WHERE num1 = '10000';
3: SELECT * FROM `test1` WHERE num2 = 10000;
4: SELECT * FROM `test1` WHERE num2 = '10000';

----------------------------------------

TITLE: Sorting Customer Names in Descending Order
DESCRIPTION: Retrieves customer names from the Customers table and sorts them in descending order.

LANGUAGE: SQL
CODE:
SELECT cust_name
FROM Customers
ORDER BY cust_name DESC

----------------------------------------

TITLE: Conditional Statements in Shell
DESCRIPTION: Shows the usage of if-else conditional statements in Shell scripting for decision making.

LANGUAGE: shell
CODE:
#!/bin/bash
a=3;
b=9;
if [ $a -eq $b ]
then
   echo "a 等于 b"
elif [ $a -gt $b ]
then
   echo "a 大于 b"
else
   echo "a 小于 b"
fi

----------------------------------------

TITLE: Retrieving Distinct Ordered Products
DESCRIPTION: Selects distinct product IDs from the OrderItems table.

LANGUAGE: SQL
CODE:
SELECT DISTINCT prod_id
FROM OrderItems

----------------------------------------

TITLE: Creating a Hello World Shell Script
DESCRIPTION: Demonstrates how to create and run a simple Hello World script in Shell. It shows the basic structure of a Shell script including the shebang line and comments.

LANGUAGE: shell
CODE:
#!/bin/bash
#第一个shell小程序,echo 是linux中的输出命令。
echo  "helloworld!"

----------------------------------------

TITLE: Retrieving All Customer IDs
DESCRIPTION: Selects all customer IDs from the Customers table.

LANGUAGE: SQL
CODE:
SELECT cust_id
FROM Customers

----------------------------------------

TITLE: Checking File inode Information
DESCRIPTION: Example showing how to use stat command to view file inode details

LANGUAGE: bash
CODE:
stat [文件名称]

----------------------------------------

TITLE: Handling Null Objects in Redis Cache
DESCRIPTION: Example Java code showing how to handle null objects when caching to prevent cache penetration.

LANGUAGE: java
CODE:
public Object getObjectInclNullById(Integer id) {
    // Get from cache
    Object cacheValue = cache.get(id);
    // Cache is empty
    if (cacheValue == null) {
        // Get from storage
        Object storageValue = storage.get(key);
        // Cache the object
        cache.set(key, storageValue);
        // Set expiration if storage value is null
        if (storageValue == null) {
            cache.expire(key, 60 * 5);
        }
        return storageValue;
    }
    return cacheValue;
}

----------------------------------------

TITLE: Implementing Global Error Handling in Spring Cloud Gateway Java
DESCRIPTION: Demonstrates how to implement global error handling in Spring Cloud Gateway by creating a custom ErrorWebExceptionHandler. This class overrides the handle method to provide custom error handling logic.

LANGUAGE: java
CODE:
@Order(-1)
@Component
@RequiredArgsConstructor
public class GlobalErrorWebExceptionHandler implements ErrorWebExceptionHandler {
    private final ObjectMapper objectMapper;

    @Override
    public Mono<Void> handle(ServerWebExchange exchange, Throwable ex) {
    // ...
    }
}

----------------------------------------

TITLE: Redis Memory Policy Configuration
DESCRIPTION: Redis memory eviction policy enum definitions

LANGUAGE: C
CODE:
configEnum maxmemory_policy_enum[] = {
    {"volatile-lru", MAXMEMORY_VOLATILE_LRU},
    {"volatile-lfu", MAXMEMORY_VOLATILE_LFU},
    {"volatile-random",MAXMEMORY_VOLATILE_RANDOM},
    {"volatile-ttl",MAXMEMORY_VOLATILE_TTL},
    {"allkeys-lru",MAXMEMORY_ALLKEYS_LRU},
    {"allkeys-lfu",MAXMEMORY_ALLKEYS_LFU},
    {"allkeys-random",MAXMEMORY_ALLKEYS_RANDOM},
    {"noeviction",MAXMEMORY_NO_EVICTION},
    {NULL, 0}
};

----------------------------------------

TITLE: RPC Status Management Code
DESCRIPTION: Code showing how Dubbo manages RPC call status using ConcurrentMap

LANGUAGE: java
CODE:
public class RpcStatus {

    private static final ConcurrentMap<String, ConcurrentMap<String, RpcStatus>> METHOD_STATISTICS =
            new ConcurrentHashMap<String, ConcurrentMap<String, RpcStatus>>();

   public static RpcStatus getStatus(URL url, String methodName) {
        String uri = url.toIdentityString();
        ConcurrentMap<String, RpcStatus> map = METHOD_STATISTICS.computeIfAbsent(uri, k -> new ConcurrentHashMap<>());
        return map.computeIfAbsent(methodName, k -> new RpcStatus());
    }
    public int getActive() {
        return active.get();
    }
}

----------------------------------------

TITLE: Redis Background Thread Definitions
DESCRIPTION: Redis background thread type definitions in bio.h

LANGUAGE: C
CODE:
#ifndef __BIO_H
#define __BIO_H

/* Exported API */
void bioInit(void);
void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3);
unsigned long long bioPendingJobsOfType(int type);
unsigned long long bioWaitStepOfType(int type);
time_t bioOlderJobOfType(int type);
void bioKillThreads(void);

/* Background job opcodes */
#define BIO_CLOSE_FILE    0 /* Deferred close(2) syscall. */
#define BIO_AOF_FSYNC     1 /* Deferred AOF fsync. */
#define BIO_LAZY_FREE     2 /* Deferred objects freeing. */
#define BIO_NUM_OPS       3

#endif

----------------------------------------

TITLE: Asynchronous Kafka Message Sending with Callback in Java
DESCRIPTION: Example of sending a Kafka message asynchronously with a callback function using Spring Kafka KafkaTemplate

LANGUAGE: Java
CODE:
ListenableFuture<SendResult<String, Object>> future = kafkaTemplate.send(topic, o);
future.addCallback(result -> logger.info("生产者成功发送消息到topic:{} partition:{}的消息", result.getRecordMetadata().topic(), result.getRecordMetadata().partition()),
        ex -> logger.error("生产者发送消失败，原因：{}", ex.getMessage()));

----------------------------------------

TITLE: 查询 Redis 进程内存交换信息
DESCRIPTION: 使用 cat 命令查看 Redis 进程的内存映射信息，特别是 Swap 行，以检查是否发生了内存交换。正常情况下，Swap 值应该是 0KB 或个别 4KB。

LANGUAGE: bash
CODE:
cat /proc/4476/smaps | grep Swap
Swap: 0kB
Swap: 0kB
Swap: 4kB
Swap: 0kB
Swap: 0kB
.....

----------------------------------------

TITLE: 使用FileChannel和MappedByteBuffer实现内存映射文件
DESCRIPTION: 这段代码展示了如何使用FileChannel和MappedByteBuffer来实现内存映射文件,这是RocketMQ实现零拷贝的基础。

LANGUAGE: Java
CODE:
FileChannel fileChannel = new RandomAccessFile("test.txt", "rw").getChannel();
MappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, fileChannel.size());

----------------------------------------

TITLE: 查询 Redis 进程号
DESCRIPTION: 使用 redis-cli 命令查询 Redis 服务器的进程 ID。这是检查 Redis 是否发生内存交换的第一步。

LANGUAGE: bash
CODE:
redis-cli -p 6383 info server | grep process_id
process_id: 4476

----------------------------------------

TITLE: 使用子查询优化深度分页
DESCRIPTION: 这个SQL查询使用子查询来获取起始ID值，将LIMIT操作转移到子查询中，从而提高查询效率。这种方法适用于ID正序的情况。

LANGUAGE: sql
CODE:
SELECT * FROM t_order WHERE id >= (SELECT id FROM t_order where id > 1000000 limit 1) LIMIT 10;

----------------------------------------

TITLE: 简单Servlet示例
DESCRIPTION: 一个基本的Hello World Servlet示例代码。

LANGUAGE: java
CODE:
public class HelloServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.getWriter().println("Hello World!");
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req,resp);
    }
}

----------------------------------------

TITLE: 使用范围查询优化深度分页
DESCRIPTION: 这两个SQL查询展示了如何使用ID范围来优化深度分页。第一个查询指定了ID范围，第二个查询通过记录上次查询结果的最后一条记录的ID来进行下一页的查询。这种方法要求ID具有连续性。

LANGUAGE: sql
CODE:
SELECT * FROM t_order WHERE id > 100000 AND id <= 100010 ORDER BY id

LANGUAGE: sql
CODE:
SELECT * FROM t_order WHERE id > 100000 LIMIT 10

----------------------------------------

TITLE: 查看Docker镜像
DESCRIPTION: 列出本地Docker镜像的命令。

LANGUAGE: bash
CODE:
docker images

----------------------------------------

TITLE: 演示深度分页问题的SQL查询
DESCRIPTION: 这个SQL查询展示了一个典型的深度分页场景，其中MySQL需要在无法利用索引的情况下跳过1000000条记录后再获取10条记录。这种查询方式会导致性能问题。

LANGUAGE: sql
CODE:
SELECT * FROM t_order ORDER BY id LIMIT 1000000, 10

----------------------------------------

TITLE: Random Load Balance Implementation
DESCRIPTION: Implementation of Dubbo's default random load balancing strategy

LANGUAGE: java
CODE:
public class RandomLoadBalance extends AbstractLoadBalance {

    public static final String NAME = "random";

    @Override
    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {

        int length = invokers.size();
        boolean sameWeight = true;
        int[] weights = new int[length];
        int totalWeight = 0;
        for (int i = 0; i < length; i++) {
            int weight = getWeight(invokers.get(i), invocation);
            totalWeight += weight;
            weights[i] = totalWeight;
            if (sameWeight && totalWeight != weight * (i + 1)) {
                sameWeight = false;
            }
        }
        if (totalWeight > 0 && !sameWeight) {
            int offset = ThreadLocalRandom.current().nextInt(totalWeight);
            for (int i = 0; i < length; i++) {
                if (offset < weights[i]) {
                    return invokers.get(i);
                }
            }
        }
        return invokers.get(ThreadLocalRandom.current().nextInt(length));
    }
}

----------------------------------------

TITLE: Vector Computation Using Vector API in Java 18
DESCRIPTION: Illustrates how to use the Vector API, introduced in Java 16 and further improved in Java 18, to perform vector computations. This API aims to provide a platform-independent way of expressing a wide range of vector computations.

LANGUAGE: java
CODE:
static final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;

void vectorComputation(float[] a, float[] b, float[] c) {
    int i = 0;
    int upperBound = SPECIES.loopBound(a.length);
    for (; i < upperBound; i += SPECIES.length()) {
        // FloatVector va, vb, vc;
        var va = FloatVector.fromArray(SPECIES, a, i);
        var vb = FloatVector.fromArray(SPECIES, b, i);
        var vc = va.mul(va)
                   .add(vb.mul(vb))
                   .neg();
        vc.intoArray(c, i);
    }
    for (; i < a.length; i++) {
        c[i] = (a[i] * a[i] + b[i] * b[i]) * -1.0f;
    }
}

----------------------------------------

TITLE: Custom LoadBalance Implementation Example
DESCRIPTION: Example showing how to implement a custom load balancing strategy by extending LoadBalance interface

LANGUAGE: java
CODE:
package com.xxx;

import org.apache.dubbo.rpc.cluster.LoadBalance;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.RpcException;

public class XxxLoadBalance implements LoadBalance {
    public <T> Invoker<T> select(List<Invoker<T>> invokers, Invocation invocation) throws RpcException {
        // ...
    }
}

----------------------------------------

TITLE: Static members in non-static inner classes in Java 16
DESCRIPTION: This code snippet demonstrates the ability to define non-constant static members in non-static inner classes, which was introduced in Java 16.

LANGUAGE: java
CODE:
public class Outer {
  class Inner {
    static int age;
  }
}

----------------------------------------

TITLE: 建立TCP连接
DESCRIPTION: 使用netcat工具连接到本地8000端口，建立TCP连接。

LANGUAGE: bash
CODE:
nc 127.0.0.1 8000

----------------------------------------

TITLE: Using Text Blocks with Escape Sequences in Java 14
DESCRIPTION: Demonstrates the use of text blocks with new escape sequences \ for line continuation and \s for single space.

LANGUAGE: java
CODE:
String str2 = """
        凡心所向，素履所往， \
        生如逆旅，一苇以航。""";
System.out.println(str2);// 凡心所向，素履所往， 生如逆旅，一苇以航。
String text = """
        java
        c++\sphp
        """;
System.out.println(text);
//输出：
java
c++ php

----------------------------------------

TITLE: Kafka Consumer with Exception Throwing in Java
DESCRIPTION: Example of a Kafka consumer that throws an exception for certain messages to demonstrate retry behavior

LANGUAGE: Java
CODE:
@KafkaListener(topics = {KafkaConst.TEST_TOPIC},groupId = "apple")
private void customer(String message) throws InterruptedException {
    log.info("kafka customer:{}",message);
    Integer n = Integer.parseInt(message);
    if (n%5==0){
        throw new  RuntimeException();
    }
}

----------------------------------------

TITLE: Lambda Parameter Local Variable Syntax in Java 11
DESCRIPTION: Shows how to use the var keyword for parameter declaration in Lambda expressions, which was introduced in Java 11.

LANGUAGE: java
CODE:
// 下面两者是等价的
Consumer<String> consumer = (var i) -> System.out.println(i);
Consumer<String> consumer = (String i) -> System.out.println(i);

----------------------------------------

TITLE: 使用覆盖索引优化深度分页
DESCRIPTION: 这个SQL查询展示了如何使用覆盖索引来优化深度分页。通过只查询索引中包含的字段，可以避免回表操作，提高查询效率。这种方法适用于查询特定字段的场景。

LANGUAGE: sql
CODE:
SELECT id, code, type FROM t_order
ORDER BY code
LIMIT 1000000, 10;

----------------------------------------

TITLE: Using Optional.orElseThrow() in Java 10
DESCRIPTION: Demonstrates the usage of the new orElseThrow() method added to Optional in Java 10. This method allows throwing a specified exception when the Optional is empty.

LANGUAGE: java
CODE:
Optional.ofNullable(cache.getIfPresent(key))
        .orElseThrow(() -> new PrestoException(NOT_FOUND, "Missing entry found for key: " + key));

----------------------------------------

TITLE: MongoDB插入带$前缀字段名的文档
DESCRIPTION: 这个示例展示了在MongoDB和Amazon DocumentDB中插入一个包含$前缀字段名的文档时的不同行为。MongoDB允许这种操作，而Amazon DocumentDB会返回错误。

LANGUAGE: shell
CODE:
rs0:PRIMARY< db.foo.insert({"a":{"$a":1}})

----------------------------------------

TITLE: Enhanced try-with-resources in Java 9
DESCRIPTION: Demonstrates the enhanced try-with-resources statement in Java 9, which allows the use of effectively final variables.

LANGUAGE: java
CODE:
final Scanner scanner = new Scanner(new File("testRead.txt"));
PrintWriter writer = new PrintWriter(new File("testWrite.txt"))
try (scanner;writer) {
    // omitted
}

----------------------------------------

TITLE: Inserting Test Data for Implicit Conversion Analysis in MySQL
DESCRIPTION: This SQL insert statement adds specific test cases to the 'test1' table to demonstrate how MySQL handles implicit conversion of different string formats to numbers during comparisons.

LANGUAGE: sql
CODE:
INSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000001', '10000', '10000a', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');
INSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000002', '10000', '010000', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');
INSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000003', '10000', ' 10000', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');

----------------------------------------

TITLE: Implementing Default Methods in Interfaces
DESCRIPTION: Demonstrates how to add non-abstract method implementations to interfaces using the default keyword.

LANGUAGE: Java
CODE:
interface Formula {
    double calculate(int a);
    
    default double sqrt(int a) {
        return Math.sqrt(a);
    }
}

----------------------------------------

TITLE: Demonstrating Enhanced Null Pointer Exception in Java 14
DESCRIPTION: Shows how Java 14 provides more detailed null pointer exception messages to help with debugging. Requires the JVM argument -XX:+ShowCodeDetailsInExceptionMessages.

LANGUAGE: java
CODE:
a.b.c.i = 99; // Assuming this code will cause a null pointer exception

----------------------------------------

TITLE: Using Optional in Java 8
DESCRIPTION: Example of using Optional to handle potentially null values and avoid NullPointerExceptions.

LANGUAGE: java
CODE:
Optional.ofNullable(zoo).map(o -> o.getDog()).map(d -> d.getAge()).filter(v->v==1).orElse(3);

----------------------------------------

TITLE: Using Repeatable Annotations
DESCRIPTION: Demonstrates how to use and retrieve multiple annotations of the same type on a single element.

LANGUAGE: Java
CODE:
@Repeatable(Hints.class)
@interface Hint {
    String value();
}

@Hint("hint1")
@Hint("hint2")
class Person {}

----------------------------------------

TITLE: Defining a Functional Interface in Java
DESCRIPTION: Example of defining a functional interface with a single abstract method and default/static methods.

LANGUAGE: java
CODE:
public interface InterfaceNew {
    static void sm() {
        System.out.println("interface提供的方式实现");
    }
    static void sm2() {
        System.out.println("interface提供的方式实现");
    }

    default void def() {
        System.out.println("interface default方法");
    }
    default void def2() {
        System.out.println("interface default2方法");
    }
    //须要实现类重写
    void f();
}

----------------------------------------

TITLE: Using the New Date-Time API in Java 8
DESCRIPTION: Examples of using the new Date-Time API classes like LocalDate, LocalTime, and LocalDateTime for date/time operations.

LANGUAGE: java
CODE:
public void newFormat(){
    //format yyyy-MM-dd
    LocalDate date = LocalDate.now();
    System.out.println(String.format("date format : %s", date));

    //format HH:mm:ss
    LocalTime time = LocalTime.now().withNano(0);
    System.out.println(String.format("time format : %s", time));

    //format yyyy-MM-dd HH:mm:ss
    LocalDateTime dateTime = LocalDateTime.now();
    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    String dateTimeStr = dateTime.format(dateTimeFormatter);
    System.out.println(String.format("dateTime format : %s", dateTimeStr));
}

----------------------------------------

TITLE: Converting Arrays to Collections in Java
DESCRIPTION: Demonstrates various methods to convert arrays to collections, including Arrays.asList(), manual conversion, Java 8 streams, and third-party libraries.

LANGUAGE: Java
CODE:
String[] myArray = {"Apple", "Banana", "Orange"};
List<String> myList = Arrays.asList(myArray);
//上面两个语句等价于下面一条语句
List<String> myList = Arrays.asList("Apple","Banana", "Orange");

LANGUAGE: Java
CODE:
List list = new ArrayList<>(Arrays.asList("a", "b", "c"))

LANGUAGE: Java
CODE:
Integer [] myArray = { 1, 2, 3 };
List myList = Arrays.stream(myArray).collect(Collectors.toList());
//基本类型也可以实现转换（依赖boxed的装箱操作）
int [] myArray2 = { 1, 2, 3 };
List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());

----------------------------------------

TITLE: Converting Collections to Arrays in Java
DESCRIPTION: Explains the correct way to convert collections to arrays using the toArray(T[] array) method with an empty array of the correct type.

LANGUAGE: Java
CODE:
String [] s= new String[]{
    "dog", "lazy", "a", "over", "jumps", "fox", "brown", "quick", "A"
};
List<String> list = Arrays.asList(s);
Collections.reverse(list);
//没有指定类型的话会报错
s=list.toArray(new String[0]);

----------------------------------------

TITLE: Iterating and Modifying Collections in Java
DESCRIPTION: Explains the dangers of modifying collections while iterating and demonstrates safe ways to remove elements using Iterator or Java 8's removeIf() method.

LANGUAGE: Java
CODE:
List<Integer> list = new ArrayList<>();
for (int i = 1; i <= 10; ++i) {
    list.add(i);
}
list.removeIf(filter -> filter % 2 == 0); /* 删除list中的所有偶数 */
System.out.println(list); /* [1, 3, 5, 7, 9] */

----------------------------------------

TITLE: Removing Duplicates from Collections in Java
DESCRIPTION: Demonstrates efficient ways to remove duplicates from collections using Set and List implementations, comparing their time complexities.

LANGUAGE: Java
CODE:
// Set 去重代码示例
public static <T> Set<T> removeDuplicateBySet(List<T> data) {

    if (CollectionUtils.isEmpty(data)) {
        return new HashSet<>();
    }
    return new HashSet<>(data);
}

// List 去重代码示例
public static <T> List<T> removeDuplicateByList(List<T> data) {

    if (CollectionUtils.isEmpty(data)) {
        return new ArrayList<>();

    }
    List<T> result = new ArrayList<>(data.size());
    for (T current : data) {
        if (!result.contains(current)) {
            result.add(current);
        }
    }
    return result;
}

----------------------------------------

TITLE: Converting Collections to Maps in Java
DESCRIPTION: Shows how to convert a collection to a map using Collectors.toMap() and highlights the potential for NullPointerException when values are null.

LANGUAGE: Java
CODE:
class Person {
    private String name;
    private String phoneNumber;
     // getters and setters
}

List<Person> bookList = new ArrayList<>();
bookList.add(new Person("jack","18163138123"));
bookList.add(new Person("martin",null));
// 空指针异常
bookList.stream().collect(Collectors.toMap(Person::getName, Person::getPhoneNumber));

----------------------------------------

TITLE: Testing CopyOnWriteArrayList Methods in Java
DESCRIPTION: Demonstrates usage of various CopyOnWriteArrayList methods including add, get, remove, set, size, removeAll, and clear.

LANGUAGE: Java
CODE:
CopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();

list.add("Java");
list.add("Python");
list.add("C++");
System.out.println("初始列表：" + list);

System.out.println("列表第二个元素为：" + list.get(1));

boolean result = list.remove("C++");
System.out.println("删除结果：" + result);
System.out.println("列表删除元素后为：" + list);

list.set(1, "Golang");
System.out.println("列表更新后为：" + list);

list.add(0, "PHP");
System.out.println("列表插入元素后为：" + list);

System.out.println("列表大小为：" + list.size());

result = list.removeAll(List.of("Java", "Golang"));
System.out.println("批量删除结果：" + result);
System.out.println("列表批量删除元素后为：" + list);

list.clear();
System.out.println("列表清空后为：" + list);

----------------------------------------

TITLE: Checking Element Existence in CopyOnWriteArrayList in Java
DESCRIPTION: Shows the implementation of contains and containsAll methods for checking element existence in the list.

LANGUAGE: Java
CODE:
public boolean contains(Object o) {
    Object[] elements = getArray();
    return indexOf(o, elements, 0, elements.length) >= 0;
}

public boolean containsAll(Collection<?> c) {
    Object[] elements = getArray();
    int len = elements.length;
    for (Object e : c) {
        if (indexOf(e, elements, 0, len) < 0)
            return false;
    }
    return true;
}

----------------------------------------

TITLE: Removing Elements from CopyOnWriteArrayList in Java
DESCRIPTION: Illustrates the remove method for deleting elements at a specific index, using the Copy-On-Write approach.

LANGUAGE: Java
CODE:
public E remove(int index) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        Object[] elements = getArray();
        int len = elements.length;
        E oldValue = get(elements, index);
        int numMoved = len - index - 1;
        if (numMoved == 0)
            setArray(Arrays.copyOf(elements, len - 1));
        else {
            Object[] newElements = new Object[len - 1];
            System.arraycopy(elements, 0, newElements, 0, index);
            System.arraycopy(elements, index + 1, newElements, index,
                             numMoved);
            setArray(newElements);
        }
        return oldValue;
    } finally {
        lock.unlock();
    }
}

----------------------------------------

TITLE: Getting Size of CopyOnWriteArrayList in Java
DESCRIPTION: Demonstrates the size method which returns the length of the internal array.

LANGUAGE: Java
CODE:
public int size() {
    return getArray().length;
}

----------------------------------------

TITLE: Retrieving Elements from CopyOnWriteArrayList in Java
DESCRIPTION: Shows the implementation of the get method, which provides non-blocking read access to list elements.

LANGUAGE: Java
CODE:
private transient volatile Object[] array;

public E get(int index) {
    return get(getArray(), index);
}

final Object[] getArray() {
    return array;
}

private E get(Object[] a, int index) {
    return (E) a[index];
}

----------------------------------------

TITLE: Get Operation in ConcurrentHashMap Java 7
DESCRIPTION: Implementation of get operation in ConcurrentHashMap for Java 7.

LANGUAGE: Java
CODE:
public V get(Object key) {
    Segment<K,V> s;
    HashEntry<K,V>[] tab;
    int h = hash(key);
    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;
    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&
        (tab = s.table) != null) {
        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile
                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);
             e != null; e = e.next) {
            K k;
            if ((k = e.key) == key || (e.hash == h && key.equals(k)))
                return e.value;
        }
    }
    return null;
}

----------------------------------------

TITLE: Adding Elements to CopyOnWriteArrayList in Java
DESCRIPTION: Demonstrates the add method for inserting elements at the end of the list, showcasing the Copy-On-Write strategy.

LANGUAGE: Java
CODE:
public boolean add(E e) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        Object[] elements = getArray();
        int len = elements.length;
        Object[] newElements = Arrays.copyOf(elements, len + 1);
        newElements[len] = e;
        setArray(newElements);
        return true;
    } finally {
        lock.unlock();
    }
}

----------------------------------------

TITLE: TableSizeFor Method Implementation
DESCRIPTION: Method that ensures HashMap size is always a power of 2 by calculating the next power of 2 for a given number.

LANGUAGE: java
CODE:
static final int tableSizeFor(int cap) {
    int n = cap - 1;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
}

----------------------------------------

TITLE: LinkedList Usage Example
DESCRIPTION: Example code demonstrating common LinkedList operations including adding, removing and accessing elements

LANGUAGE: java
CODE:
LinkedList<String> list = new LinkedList<>();
list.add("apple");
list.add("banana");
list.add("pear");
System.out.println(list);
list.add(1, "orange");
String fruit = list.get(2);
list.remove(0);
int size = list.size();
list.clear();

----------------------------------------

TITLE: Static and Non-Static Method Comparison in Java
DESCRIPTION: Demonstration of the differences between static and non-static methods in a Java class, including their access and usage.

LANGUAGE: java
CODE:
class Foo {
    int i;
    public Foo(int i) {
       this.i = i;
    }
    public static String method1() {
       return "An example string that doesn't depend on i (an instance variable)";
    }
    public int method2() {
       return this.i + 1;  //Depends on i
    }
}

----------------------------------------

TITLE: LinkedList Iterator Implementation
DESCRIPTION: Implementation of ListItr class that provides bidirectional iteration over LinkedList elements

LANGUAGE: java
CODE:
private class ListItr implements ListIterator<E> {
    private Node<E> lastReturned;
    private Node<E> next;
    private int nextIndex;
    private int expectedModCount = modCount;
}

----------------------------------------

TITLE: Demonstrating 'super' Keyword Usage in Java
DESCRIPTION: Example illustrating how the 'super' keyword is used to access parent class variables and methods from a subclass.

LANGUAGE: java
CODE:
public class Super {
    protected int number;
    protected showNumber() {
        System.out.println("number = " + number);
    }
}
public class Sub extends Super {
    void bar() {
        super.number = 10;
        super.showNumber();
    }
}

----------------------------------------

TITLE: Implementing DelayedTask Class in Java
DESCRIPTION: Custom implementation of a delayed task that implements the Delayed interface with execution time and task management.

LANGUAGE: java
CODE:
public class DelayedTask implements Delayed {
    private long executeTime;
    private Runnable task;

    public DelayedTask(long delay, Runnable task) {
        this.executeTime = System.currentTimeMillis() + delay;
        this.task = task;
    }

    @Override
    public long getDelay(TimeUnit unit) {
        return unit.convert(executeTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
    }

    @Override
    public int compareTo(Delayed o) {
        return Long.compare(this.executeTime, ((DelayedTask) o).executeTime);
    }

    public void execute() {
        task.run();
    }
}

----------------------------------------

TITLE: Floating Point Precision Loss Example
DESCRIPTION: Demonstrates precision loss issues when using float arithmetic operations.

LANGUAGE: java
CODE:
float a = 2.0f - 1.9f;
float b = 1.8f - 1.7f;
System.out.println(a);// 0.100000024
System.out.println(b);// 0.099999905
System.out.println(a == b);// false

----------------------------------------

TITLE: AtomicStampedReference CompareAndSet Implementation
DESCRIPTION: Implementation of compareAndSet in AtomicStampedReference showing how it handles the ABA problem using version stamps.

LANGUAGE: java
CODE:
public boolean compareAndSet(V   expectedReference,
                             V   newReference,
                             int expectedStamp,
                             int newStamp) {
    Pair<V> current = pair;
    return
        expectedReference == current.reference &&
        expectedStamp == current.stamp &&
        ((newReference == current.reference &&
          newStamp == current.stamp) ||
         casPair(current, Pair.of(newReference, newStamp)));
}

----------------------------------------

TITLE: Implementing Circle Class Using OOP
DESCRIPTION: Demonstrates object-oriented programming by implementing a Circle class with radius and methods to calculate area and perimeter.

LANGUAGE: java
CODE:
public class Circle {
    private double radius;
    public Circle(double radius) {
        this.radius = radius;
    }
    public double getArea() {
        return Math.PI * radius * radius;
    }
    public double getPerimeter() {
        return 2 * Math.PI * radius;
    }
    public static void main(String[] args) {
        Circle circle = new Circle(3.0);
        System.out.println("圆的面积为：" + circle.getArea());
        System.out.println("圆的周长为：" + circle.getPerimeter());
    }
}

----------------------------------------

TITLE: Demonstrating autoboxing and unboxing in Java
DESCRIPTION: This code snippet shows examples of autoboxing (converting a primitive to its wrapper class) and unboxing (converting a wrapper class to its primitive) in Java.

LANGUAGE: Java
CODE:
Integer i = 10;  //装箱
int n = i;   //拆箱

----------------------------------------

TITLE: Calculating Truncated Average Score Using NOT IN
DESCRIPTION: Query to calculate truncated average score (excluding min and max) for SQL category high difficulty exams

LANGUAGE: SQL
CODE:
SELECT tag, difficulty, ROUND(AVG(score), 1) clip_avg_score
	FROM examination_info info  INNER JOIN exam_record record
		WHERE info.exam_id = record.exam_id
			AND  record.exam_id = 9001
				AND record.score NOT IN(
					SELECT MAX(score)
						FROM exam_record
							WHERE exam_id = 9001
							UNION ALL
					SELECT MIN(score)
						FROM exam_record
							WHERE exam_id = 9001
				)

----------------------------------------

TITLE: Comparing Integer objects created with new keyword and autoboxing
DESCRIPTION: This code snippet compares two Integer objects, one created using the new keyword and another through autoboxing, to demonstrate that they are not the same instance even though they have the same value.

LANGUAGE: Java
CODE:
Integer i1 = 40;
Integer i2 = new Integer(40);
System.out.println(i1==i2);

----------------------------------------

TITLE: Calculating Discounted Prices
DESCRIPTION: Selects product IDs, original prices, and calculates a 10% discounted price from the Products table.

LANGUAGE: SQL
CODE:
SELECT prod_id, prod_price, prod_price * 0.9 AS sale_price
FROM Products

----------------------------------------

TITLE: Demonstrating Integer caching in Java
DESCRIPTION: This code snippet demonstrates the Integer caching mechanism in Java, showing how Integer objects within the cache range (-128 to 127) are the same instance, while those outside this range are different instances.

LANGUAGE: Java
CODE:
Integer i1 = 33;
Integer i2 = 33;
System.out.println(i1 == i2);// 输出 true

Float i11 = 333f;
Float i22 = 333f;
System.out.println(i11 == i22);// 输出 false

Double i3 = 1.2;
Double i4 = 1.2;
System.out.println(i3 == i4);// 输出 false

----------------------------------------

TITLE: Filtering Products by Price Range
DESCRIPTION: Selects product names and prices from the Products table where price is between 3 and 6 dollars, sorted by price.

LANGUAGE: SQL
CODE:
SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 3 AND 6
ORDER BY prod_price

----------------------------------------

TITLE: TreeMap Person Example
DESCRIPTION: Example showing how to use TreeMap with custom Comparator to sort Person objects by age.

LANGUAGE: java
CODE:
public class Person {
    private Integer age;

    public Person(Integer age) {
        this.age = age;
    }

    public Integer getAge() {
        return age;
    }


    public static void main(String[] args) {
        TreeMap<Person, String> treeMap = new TreeMap<>(new Comparator<Person>() {
            @Override
            public int compare(Person person1, Person person2) {
                int num = person1.getAge() - person2.getAge();
                return Integer.compare(num, 0);
            }
        });
        treeMap.put(new Person(3), "person1");
        treeMap.put(new Person(18), "person2");
        treeMap.put(new Person(35), "person3");
        treeMap.put(new Person(16), "person4");
        treeMap.entrySet().stream().forEach(personStringEntry -> {
            System.out.println(personStringEntry.getValue());
        });
    }

----------------------------------------

TITLE: Redis Set Operations
DESCRIPTION: Example of using Redis SET commands for managing members

LANGUAGE: bash
CODE:
> SADD myList msg1 msg2
(integer) 2
> RPUSH myList msg3
(integer) 3
> LPOP myList
"msg1"

----------------------------------------

TITLE: 实现Comparable接口的Person类
DESCRIPTION: 展示了如何通过实现Comparable接口来定义对象的自然排序规则。

LANGUAGE: Java
CODE:
public class Person implements Comparable<Person> {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int compareTo(Person o) {
        if (this.age > o.getAge()) {
            return 1;
        }
        if (this.age < o.getAge()) {
            return -1;
        }
        return 0;
    }

    // getter and setter methods
}

----------------------------------------

TITLE: Database Operations
DESCRIPTION: Common database operations including creating, viewing, modifying and deleting databases.

LANGUAGE: sql
CODE:
/* 数据库操作 */
-- 查看当前数据库
    SELECT DATABASE();
-- 显示当前时间、用户名、数据库版本
    SELECT now(), user(), version();
-- 创建库
    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项
    数据库选项：
        CHARACTER SET charset_name
        COLLATE collation_name
-- 查看已有库
    SHOW DATABASES[ LIKE 'PATTERN']
-- 查看当前库信息
    SHOW CREATE DATABASE 数据库名
-- 修改库的选项信息
    ALTER DATABASE 库名 选项信息
-- 删除库
    DROP DATABASE[ IF EXISTS] 数据库名

----------------------------------------

TITLE: Demonstrating try-catch-finally in Java
DESCRIPTION: This code snippet shows how to use try-catch-finally blocks in Java for exception handling. It includes an example of throwing and catching a RuntimeException.

LANGUAGE: Java
CODE:
try {
    System.out.println("Try to do something");
    throw new RuntimeException("RuntimeException");
} catch (Exception e) {
    System.out.println("Catch Exception -> " + e.getMessage());
} finally {
    System.out.println("Finally");
}

----------------------------------------

TITLE: MongoDB聚合操作示例
DESCRIPTION: 这个示例展示了如何使用MongoDB的聚合管道来过滤和分组文档。首先使用$match阶段过滤状态为'A'的文档，然后使用$group阶段按客户ID分组并计算金额总和。

LANGUAGE: shell
CODE:
db.orders.aggregate([
   { $match: { status: "A" } },
   { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }
])

----------------------------------------

TITLE: Using Custom Synchronizer in Multi-threaded Environment
DESCRIPTION: This code snippet demonstrates the usage of the custom LeeLock synchronizer in a multi-threaded environment to ensure thread-safe incrementation of a shared counter.

LANGUAGE: Java
CODE:
public class LeeMain {

    static int count = 0;
    static LeeLock leeLock = new LeeLock();

    public static void main (String[] args) throws InterruptedException {

        Runnable runnable = new Runnable() {
            @Override
            public void run () {
                try {
                    leeLock.lock();
                    for (int i = 0; i < 10000; i++) {
                        count++;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    leeLock.unlock();
                }

            }
        };
        Thread thread1 = new Thread(runnable);
        Thread thread2 = new Thread(runnable);
        thread1.start();
        thread2.start();
        thread1.join();
        thread2.join();
        System.out.println(count);
    }
}

----------------------------------------

TITLE: Implementing Non-Fair Lock in ReentrantLock using AQS
DESCRIPTION: This code snippet shows the implementation of the lock() method in the NonfairSync inner class of ReentrantLock, demonstrating how it uses AQS for lock acquisition.

LANGUAGE: Java
CODE:
// java.util.concurrent.locks.ReentrantLock#NonfairSync

// 非公平锁
static final class NonfairSync extends Sync {
  ...
  final void lock() {
    if (compareAndSetState(0, 1))
      setExclusiveOwnerThread(Thread.currentThread());
    else
      acquire(1);
    }
  ...
}

----------------------------------------

TITLE: 使用FileWriter写入文件
DESCRIPTION: 展示了如何使用FileWriter将字符串写入文件。

LANGUAGE: Java
CODE:
try (Writer output = new FileWriter("output.txt")) {
    output.write("你好，我是Guide。");
} catch (IOException e) {
    e.printStackTrace();
}

----------------------------------------

TITLE: 创建SingleThreadExecutor线程池
DESCRIPTION: 使用Executors类创建只有一个线程的线程池SingleThreadExecutor

LANGUAGE: java
CODE:
public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {
    return new FinalizableDelegatedExecutorService
        (new ThreadPoolExecutor(1, 1,
                                0L, TimeUnit.MILLISECONDS,
                                new LinkedBlockingQueue<Runnable>(),
                                threadFactory));
}

----------------------------------------

TITLE: 使用FileReader读取文件
DESCRIPTION: 展示了如何使用FileReader读取字符文件内容,包括跳过字符等操作。

LANGUAGE: Java
CODE:
try (FileReader fileReader = new FileReader("input.txt");) {
    int content;
    long skip = fileReader.skip(3);
    System.out.println("The actual number of bytes skipped:" + skip);
    System.out.print("The content read from file:");
    while ((content = fileReader.read()) != -1) {
        System.out.print((char) content);
    }
} catch (IOException e) {
    e.printStackTrace();
}

----------------------------------------

TITLE: AtomicReference Example with Custom Object
DESCRIPTION: Demonstrates using AtomicReference to atomically update references to custom objects.

LANGUAGE: java
CODE:
AtomicReference<Person> ar = new AtomicReference<>(new Person("SnailClimb", 22));

System.out.println("Initial Person: " + ar.get().toString());

Person updatePerson = new Person("Daisy", 20);
ar.compareAndSet(ar.get(), updatePerson);

System.out.println("Updated Person: " + ar.get().toString());

Person anotherUpdatePerson = new Person("John", 30);
boolean isUpdated = ar.compareAndSet(updatePerson, anotherUpdatePerson);

System.out.println("Second Update Success: " + isUpdated);
System.out.println("Final Person: " + ar.get().toString());

----------------------------------------

TITLE: Hidden Form Field for Session Tracking in HTML
DESCRIPTION: Shows how to use a hidden form field to maintain session information in HTML forms.

LANGUAGE: HTML
CODE:
<input type="hidden" name="session" value="..." />

----------------------------------------

TITLE: AtomicIntegerArray Operations Example
DESCRIPTION: Shows how to use AtomicIntegerArray to perform atomic operations on array elements including get, set, increment and add operations.

LANGUAGE: java
CODE:
int[] nums = {1, 2, 3, 4, 5, 6};
AtomicIntegerArray atomicArray = new AtomicIntegerArray(nums);

System.out.println("Initial values in AtomicIntegerArray:");
for (int j = 0; j < nums.length; j++) {
    System.out.print("Index " + j + ": " + atomicArray.get(j) + " ");
}

int tempValue = atomicArray.getAndSet(0, 2);
System.out.println("\nAfter getAndSet(0, 2):");
System.out.println("Returned value: " + tempValue);
for (int j = 0; j < atomicArray.length(); j++) {
    System.out.print("Index " + j + ": " + atomicArray.get(j) + " ");
}

----------------------------------------

TITLE: Setting Auto-Refresh Header in Java Servlet
DESCRIPTION: Shows how to set an auto-refresh header in a Java Servlet response to automatically redirect after a specified time interval.

LANGUAGE: Java
CODE:
Response.setHeader("Refresh","5;URL=http://localhost:8080/servlet/example.htm");

----------------------------------------

TITLE: LinkedList Core Data Manipulation Methods
DESCRIPTION: Implementation of core methods for adding, removing and accessing elements in the LinkedList

LANGUAGE: java
CODE:
public boolean add(E e) {
    linkLast(e);
    return true;
}

public void add(int index, E element) {
    checkPositionIndex(index);
    if (index == size)
        linkLast(element);
    else
        linkBefore(element, node(index));
}

----------------------------------------

TITLE: Forwarding to a JSP Page in Java Servlet
DESCRIPTION: Demonstrates how to forward a request to a JSP page using the RequestDispatcher object in a Java Servlet.

LANGUAGE: Java
CODE:
request.getRequestDispatcher("login_success.jsp").forward(request, response);

----------------------------------------

TITLE: Markdown Image Link to JavaGuide Platform
DESCRIPTION: A Markdown formatted image link that displays the JavaGuide official knowledge platform logo and links to author information.

LANGUAGE: markdown
CODE:
[![JavaGuide官方知识星球](https://oss.javaguide.cn/xingqiu/xingqiu.png)](../about-the-author/zhishixingqiu-two-years.md)