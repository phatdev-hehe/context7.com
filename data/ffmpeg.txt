TITLE: Implementing Filter Frame Processing in C
DESCRIPTION: Shows how to process video frames in a libavfilter filter, including handling frame writability and in-place processing.

LANGUAGE: C
CODE:
static int filter_frame(AVFilterLink *inlink, AVFrame *in) {
    AVFilterContext *ctx = inlink->dst;
    FoobarContext *foobar = ctx->priv;
    AVFilterLink *outlink = ctx->outputs[0];
    int direct = 0;
    AVFrame *out;

    if (av_frame_is_writable(in)) {
        direct = 1;
        out = in;
    } else {
        out = ff_get_video_buffer(outlink, outlink->w, outlink->h);
        if (!out) {
            av_frame_free(&in);
            return AVERROR(ENOMEM);
        }
        av_frame_copy_props(out, in);
    }

    // Process frame data here
    // out->data[...] = foobar(in->data[...])

    if (!direct)
        av_frame_free(&in);
    return ff_filter_frame(outlink, out);
}

----------------------------------------

TITLE: Initializing Filter Context in C
DESCRIPTION: Defines the filter context structure and initializes options for a video filter in libavfilter.

LANGUAGE: C
CODE:
typedef struct FoobarContext {
    const AVClass *class;
    // Add filter-specific fields here
} FoobarContext;

static const AVOption foobar_options[] = {
    { "option_name", "description", OFFSET(field_name), AV_OPT_TYPE_DOUBLE, {.dbl=0.5}, 0, 1, FLAGS },
    { NULL }
};

AVFILTER_DEFINE_CLASS(foobar);

----------------------------------------

TITLE: Implementing activate Callback for Frame Processing in C
DESCRIPTION: Example code for the activate callback in a filter, demonstrating how to handle input/output status, process frames, and manage flow control.

LANGUAGE: c
CODE:
ret = ff_outlink_get_status(outlink);
if (ret) {
    ff_inlink_set_status(inlink, ret);
    return 0;
}
if (priv->next_frame) {
    /* use it */
    return 0;
}
ret = ff_inlink_consume_frame(inlink, &frame);
if (ret < 0)
    return ret;
if (ret) {
    /* use it */
    return 0;
}
ret = ff_inlink_acknowledge_status(inlink, &status, &pts);
if (ret) {
    /* flush */
    ff_outlink_set_status(outlink, status, pts);
    return 0;
}
if (ff_outlink_frame_wanted(outlink)) {
    ff_inlink_request_frame(inlink);
    return 0;
}
return FFERROR_NOT_READY;

----------------------------------------

TITLE: Implementing request_frame Callback for Multi-input Filters in C
DESCRIPTION: Example implementation of the request_frame callback for filters with multiple inputs, showing how to handle queued frames and request new frames from inputs.

LANGUAGE: c
CODE:
if (frames_queued) {
    push_one_frame();
    return 0;
}
input = input_where_a_frame_is_most_needed();
ret = ff_request_frame(input);
if (ret == AVERROR_EOF) {
    process_eof_on_input();
} else if (ret < 0) {
    return ret;
}
return 0;

----------------------------------------

TITLE: Adding Slice Threading Support in C
DESCRIPTION: Demonstrates how to implement slice threading in a libavfilter video filter for improved performance.

LANGUAGE: C
CODE:
typedef struct ThreadData {
    AVFrame *in, *out;
} ThreadData;

static int filter_slice(AVFilterContext *ctx, void *arg, int jobnr, int nb_jobs) {
    const ThreadData *td = arg;
    AVFrame *in = td->in;
    AVFrame *out = td->out;
    const int slice_start = (in->height *  jobnr   ) / nb_jobs;
    const int slice_end   = (in->height * (jobnr+1)) / nb_jobs;
    uint8_t       *dst = out->data[0] + slice_start * out->linesize[0];
    const uint8_t *src =  in->data[0] + slice_start *  in->linesize[0];

    for (int y = slice_start; y < slice_end; y++) {
        for (int x = 0; x < in->width; x++)
            dst[x] = foobar(src[x]);
        dst += out->linesize[0];
        src += in->linesize[0];
    }
    return 0;
}

// In filter_frame():
ThreadData td;
td.in  = in;
td.out = out;
ctx->internal->execute(ctx, filter_slice, &td, NULL, FFMIN(outlink->h, ff_filter_get_nb_threads(ctx)));

----------------------------------------

TITLE: Configuring FFmpeg Build in Bash
DESCRIPTION: Run the configure script to set up the FFmpeg build environment. This step allows customization of build options and can be executed from a different directory for out-of-tree builds.

LANGUAGE: bash
CODE:
./configure

LANGUAGE: bash
CODE:
configure --help

LANGUAGE: bash
CODE:
/ffmpegdir/ffmpeg/configure

----------------------------------------

TITLE: FFmpeg Makefile Variables Configuration
DESCRIPTION: Key Makefile variables that control build behavior including verbosity (V), assembly debugging (DBG), installation directory (DESTDIR), and reference generation (GEN).

LANGUAGE: makefile
CODE:
V=1         # Enable verbose output
DBG=1       # Enable assembly preprocessing
DESTDIR=/path # Set installation directory
GEN=1       # Generate missing references

----------------------------------------

TITLE: FFmpeg Makefile Primary Build Targets
DESCRIPTION: Core make targets for building, testing, and installing FFmpeg, including all libraries, executables, and test suites.

LANGUAGE: makefile
CODE:
make all              # Build everything
make fate             # Run test suite
make fate-list         # List all tests
make fate-list-failing # List failed tests
make install          # Install components
make examples         # Build examples
make checkheaders     # Check dependencies
make alltools         # Build all tools

----------------------------------------

TITLE: FFmpeg Stream Architecture ASCII Diagram
DESCRIPTION: ASCII art diagram depicting the relationships between InputFile, InputStream, OutputFile, and OutputStream arrays in FFmpeg's architecture. Shows how input/output files map to their respective streams and the connections to AVStream objects.

LANGUAGE: ascii-art
CODE:
                    InputFile input_files[]                         +==========================+   /   ^                               :
                 ^  +------+-----------+-----+          /           +--------------------------+       :                               :
                 :  |      :ist_index--:-----:---------/          1 |      : st    :           |       :                               :
                 :  +------+-----------+-----+                      +==========================+       :                               :
 nb_input_files  :  |      :ist_index--:-----:------------------> 2 |      : st    :           |       :  nb_input_streams             :
                 :  +------+-----------+-----+                      +--------------------------+       :                               :
                 :  |      :ist_index  :     |                    3 |            ...           |       :                               :
                 v  +------+-----------+-----+                      +--------------------------+       :                               :
                                                              --> 4 |                          |       :                               :
                                                             |      +--------------------------+       :                               :
                                                             |    5 |                          |       :                               :
                                                             |      +==========================+       v                               :

----------------------------------------

TITLE: Building FFmpeg in Bash
DESCRIPTION: Compile FFmpeg using the make command. This step requires GNU Make 3.81 or later.

LANGUAGE: bash
CODE:
make

----------------------------------------

TITLE: Installing FFmpeg in Bash
DESCRIPTION: Install all compiled binaries and libraries using the make install command.

LANGUAGE: bash
CODE:
make install

----------------------------------------

TITLE: Assembly Loop Structure Example
DESCRIPTION: Demonstrates the recommended way to structure assembly loops versus the discouraged C-loop approach.

LANGUAGE: asm
CODE:
__asm__(
    "1: ....
    ...
    "jump_instruction ....

----------------------------------------

TITLE: X86 Assembly Register Clobber Example
DESCRIPTION: Example showing proper way to mark clobbered registers in x86 assembly, particularly important for XMM registers on Win64 where xmm6-15 are callee-save.

LANGUAGE: asm
CODE:
__asm__("..") ::: XMM_CLOBBERS("xmm0",) "eax");
__asm__("..") :: XMM_CLOBBERS_ONLY("xmm0");

----------------------------------------

TITLE: FFmpeg Standard Make Commands
DESCRIPTION: Common make commands for optimizing build process, including touch command for reducing rebuilds and parallel build options.

LANGUAGE: makefile
CODE:
make -t <target>  # Touch files instead of building
make -j<num>     # Enable parallel builds
make -k          # Continue on error

----------------------------------------

TITLE: Using Git Commands for FFmpeg Patch Submission
DESCRIPTION: Commands used to prepare and submit patches to the FFmpeg project via the mailing list.

LANGUAGE: shell
CODE:
git format-patch

LANGUAGE: shell
CODE:
git send-email

----------------------------------------

TITLE: Rate Distortion Formula - Basic Expression
DESCRIPTION: The fundamental mathematical formula for rate distortion optimization, expressing the relationship between distortion (quality) and rate (filesize) using a lambda factor.

LANGUAGE: mathematical
CODE:
distortion + lambda*rate

----------------------------------------

TITLE: Rate Distortion Formula - Problem Splitting
DESCRIPTION: Mathematical demonstration of how the rate distortion optimization problem can be split into independent subproblems, using two components as an example.

LANGUAGE: mathematical
CODE:
(distortion0 + distortion1) + lambda*(rate0 + rate1)

----------------------------------------

TITLE: Rate Distortion Formula - Subproblem Components
DESCRIPTION: The individual components of the split rate distortion problem, showing how each subproblem can be solved independently.

LANGUAGE: mathematical
CODE:
distortion0 + lambda*rate0

LANGUAGE: mathematical
CODE:
distortion1 + lambda*rate1

----------------------------------------

TITLE: Printing Table Arrays in C
DESCRIPTION: Demonstrates two methods for printing table arrays - a generic form and a shorter form using the WRITE_ARRAY macro. Shows how to format and output uint8_t arrays.

LANGUAGE: c
CODE:
write_fileheader();
printf("static const uint8_t my_array[100] = {\n");
write_uint8_t_array(my_array, 100);
printf("};");

LANGUAGE: c
CODE:
write_fileheader();
WRITE_ARRAY("static const", uint8_t, my_array);

----------------------------------------

TITLE: Makefile Table Generation Configuration
DESCRIPTION: Shows how to add table generation dependency in the Makefile under the CONFIG_HARDCODED_TABLES section.

LANGUAGE: makefile
CODE:
$(SUBDIR)example.o: $(SUBDIR)example_tables.h

----------------------------------------

TITLE: Demonstrating SUINT usage in C for signed integer operations
DESCRIPTION: This snippet compares the use of unsigned integers and SUINT type for operations involving semantically signed integers. It shows how SUINT improves code readability and maintains the intention of using signed integers while avoiding undefined behavior.

LANGUAGE: C
CODE:
unsigned a,b,c;
...
a+b*c;

LANGUAGE: C
CODE:
SUINT a,b,c;
...
a+b*c;

----------------------------------------

TITLE: Snow Video Codec State Transition Table Definition
DESCRIPTION: Defines the state transition table used by the binary range coder for probability updates based on previously seen symbols.

LANGUAGE: C
CODE:
state_transition_table = {
  0,   0,   0,   0,   0,   0,   0,   0,  20,  21,  22,  23,  24,  25,  26,  27,
 28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  37,  38,  39,  40,  41,  42,
 43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  56,  57,
 58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,
 74,  75,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,
 89,  90,  91,  92,  93,  94,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 114, 115, 116, 117, 118,
119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 133};

----------------------------------------

TITLE: Snow Video Codec LL Band Prediction Algorithm
DESCRIPTION: Algorithm for predicting samples in the LL0 subband using median prediction from surrounding samples during wavelet transform decoding.

LANGUAGE: C
CODE:
for(y=0; y<height; y++){
    for(x=0; x<width; x++){
        sample[y][x] += median(sample[y-1][x],
                               sample[y][x-1],
                               sample[y-1][x]+sample[y][x-1]-sample[y-1][x-1]);
    }
}
sample[-1][*]=sample[*][-1]= 0;

----------------------------------------

TITLE: Configuring Git Merge Conflict Style
DESCRIPTION: Git configuration command to set a different merge conflict style to reduce the risk of errors during Libav merges.

LANGUAGE: git
CODE:
git config --global merge.conflictstyle diff3

----------------------------------------

TITLE: MIPS Technologies Copyright Notice Template
DESCRIPTION: Standard copyright notice template used in MIPS-optimized source files within FFmpeg, specifying redistribution terms and liability disclaimers.

LANGUAGE: c
CODE:
/*
 * Copyright (c) 2012
 *      MIPS Technologies, Inc., California.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the MIPS Technologies, Inc., nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE MIPS TECHNOLOGIES, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE MIPS TECHNOLOGIES, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Author:  Author Name (author_name@@mips.com)
 */