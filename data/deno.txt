TITLE: Creating a Simple Deno Web Server in TypeScript
DESCRIPTION: This TypeScript code creates a basic Deno web server that responds with 'Hello, world!' to all requests. It demonstrates the simplicity of creating a server using Deno's built-in functionality.

LANGUAGE: typescript
CODE:
Deno.serve((_req: Request) => {
  return new Response("Hello, world!");
});

----------------------------------------

TITLE: Loading CommonJS Modules with createRequire in Deno
DESCRIPTION: Demonstrates how to use createRequire to load CommonJS modules in Deno, including native module polyfills, extensionless modules, and node_modules packages.

LANGUAGE: typescript
CODE:
import { createRequire } from "node:module";

const require = createRequire(import.meta.url);
// Loads native module polyfill.
const path = require("path");
// Loads extensionless module.
const cjsModule = require("./my_mod");
// Visits node_modules.
const leftPad = require("left-pad");

----------------------------------------

TITLE: Installing Deno on macOS and Linux using Shell
DESCRIPTION: This command installs the Deno runtime on macOS and Linux systems using a shell script.

LANGUAGE: sh
CODE:
curl -fsSL https://deno.land/install.sh | sh

----------------------------------------

TITLE: Importing Deno Web Extension Modules in JavaScript
DESCRIPTION: This snippet demonstrates how to import various modules from the deno_web extension in JavaScript. It includes imports for infrastructure, DOM exceptions, MIME sniffing, events, timers, and other web-related functionalities.

LANGUAGE: javascript
CODE:
import * as infra from "ext:deno_web/00_infra.js";
import * as DOMException from "ext:deno_web/01_dom_exception.js";
import * as mimesniff from "ext:deno_web/01_mimesniff.js";
import * as event from "ext:deno_web/02_event.js";
import * as structuredClone from "ext:deno_web/02_structured_clone.js";
import * as timers from "ext:deno_web/02_timers.js";
import * as abortSignal from "ext:deno_web/03_abort_signal.js";
import * as globalInterfaces from "ext:deno_web/04_global_interfaces.js";
import * as base64 from "ext:deno_web/05_base64.js";
import * as streams from "ext:deno_web/06_streams.js";
import * as encoding from "ext:deno_web/08_text_encoding.js";
import * as file from "ext:deno_web/09_file.js";
import * as fileReader from "ext:deno_web/10_filereader.js";
import * as location from "ext:deno_web/12_location.js";
import * as messagePort from "ext:deno_web/13_message_port.js";
import * as compression from "ext:deno_web/14_compression.js";
import * as performance from "ext:deno_web/15_performance.js";
import * as imageData from "ext:deno_web/16_image_data.js";

----------------------------------------

TITLE: Initializing URL APIs in JavaScript Global Scope
DESCRIPTION: Sets up URL, URLPattern, and URLSearchParams in the global scope by importing from Deno URL extensions and configuring them as non-enumerable but mutable global properties.

LANGUAGE: javascript
CODE:
import * as url from "ext:deno_url/00_url.js";
import * as urlPattern from "ext:deno_url/01_urlpattern.js";

Object.defineProperty(globalThis, "URL", {
  value: url.URL,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "URLPattern", {
  value: url.URLPattern,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "URLSearchParams", {
  value: url.URLSearchParams,
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Creating Simple and Complex Tests in Deno TypeScript
DESCRIPTION: This snippet shows how to create both simple and complex test functions using Deno.test(). It demonstrates setting up test configurations including ignore conditions and permissions.

LANGUAGE: typescript
CODE:
import {} from "./test_util.ts";

Deno.test(function simpleTestFn(): void {
  // test code here
});

Deno.test(
  {
    ignore: Deno.build.os === "windows",
    permissions: { read: true, write: true },
  },
  function complexTestFn(): void {
    // test code here
  },
);

----------------------------------------

TITLE: Upgrading TypeScript in Deno Project
DESCRIPTION: This code snippet demonstrates the command-line steps to upgrade the TypeScript compiler in the Deno project. It includes cloning the TypeScript repository, setting up remotes, checking out specific versions, and copying compiled files to the Deno project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/denoland/TypeScript.git
cd typescript
git remote add upstream https://github.com/Microsoft/TypeScript
git fetch upstream
git checkout v3.9.7
git checkout -b branch_v3.9.7
git cherry pick <previous-release-branch-commit-we-did>
npm install
npx hereby
rsync built/local/typescript.js ~/src/deno/cli/tsc/00_typescript.js
rsync --exclude=protocol.d.ts --exclude=tsserverlibrary.d.ts --exclude=typescriptServices.d.ts built/local/*.d.ts ~/src/deno/cli/tsc/dts/

----------------------------------------

TITLE: Initializing Crypto Globals in JavaScript for Deno
DESCRIPTION: This snippet demonstrates how to import the crypto module and assign CryptoKey, crypto, Crypto, and SubtleCrypto to the global scope in a Deno JavaScript environment. It uses Object.defineProperty to set these properties on globalThis.

LANGUAGE: javascript
CODE:
import * as crypto from "ext:deno_crypto/00_crypto.js";

Object.defineProperty(globalThis, "CryptoKey", {
  value: crypto.CryptoKey,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "crypto", {
  value: crypto.crypto,
  enumerable: false,
  configurable: true,
  writable: false,
});

Object.defineProperty(globalThis, "Crypto", {
  value: crypto.Crypto,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "SubtleCrypto", {
  value: crypto.SubtleCrypto,
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Running a Deno Server with Network Permissions
DESCRIPTION: This command runs a Deno server script named 'server.ts', granting it network access permissions using the --allow-net flag.

LANGUAGE: sh
CODE:
deno run --allow-net server.ts

----------------------------------------

TITLE: Initializing Deno Net Operations in Rust
DESCRIPTION: This snippet demonstrates how to initialize the Deno net operations and ESM in Rust. It requires a root certificate store provider and an option to ignore certificate errors. The function also needs a struct implementing NetPermissions.

LANGUAGE: rust
CODE:
deno_net::deno_net::init_ops_and_esm::<Permissions>(root_cert_store_provider, unsafely_ignore_certificate_errors)

----------------------------------------

TITLE: Initializing Console API in JavaScript for Deno
DESCRIPTION: This snippet shows how to import the Console API from the deno_console extension and assign it to the global scope in a Deno JavaScript environment. It creates a new Console instance with a custom logging function that uses Deno.core.print for output.

LANGUAGE: javascript
CODE:
import * as console from "ext:deno_console/01_console.js";
Object.defineProperty(globalThis, "console", {
  value: new console.Console((msg, level) =>
    globalThis.Deno.core.print(msg, level > 1)
  ),
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Benchmarking Custom Deno Core Operations in Rust
DESCRIPTION: This code snippet shows how to set up and run benchmarks for custom Deno core operations using the deno_bench_util crate. It defines a simple 'nop' operation, creates an extension with this op, and sets up a benchmark to measure its performance when called from JavaScript.

LANGUAGE: rust
CODE:
use deno_bench_util::bench_js_sync;
use deno_bench_util::bench_or_profile;
use deno_bench_util::bencher::benchmark_group;
use deno_bench_util::bencher::Bencher;
use deno_core::Extension;

#[op2]
#[number]
fn op_nop() -> usize {
  9
}

fn setup() -> Vec<Extension> {
  vec![Extension {
    name: "my_ext"
    ops: std::borrow::Cow::Borrowed(&[op_nop::DECL])
  }]
}

fn bench_op_nop(b: &mut Bencher) {
  bench_js_sync(b, r#"Deno.core.ops.op_nop();"#, setup);
}

benchmark_group!(benches, bench_op_nop);
bench_or_profile!(benches);

----------------------------------------

TITLE: Running Deno Tests via Command Line
DESCRIPTION: This snippet provides shell commands for running Deno tests. It shows how to run all tests in a directory and how to run a specific test module, using cargo to execute the Deno binary with appropriate permissions and settings.

LANGUAGE: shell
CODE:
# Run all tests.
cargo run --bin deno -- test --allow-all --location=http://js-unit-tests/foo/bar cli/tests/unit/

# Run a specific test module
cargo run --bin deno -- test --allow-all --location=http://js-unit-tests/foo/bar cli/tests/unit/files_test.ts

----------------------------------------

TITLE: Importing Deno Net Extension in JavaScript
DESCRIPTION: This snippet shows how to import the necessary modules from the Deno net extension in JavaScript. It includes imports for WebIDL, net, and TLS functionality.

LANGUAGE: javascript
CODE:
import * as webidl from "ext:deno_webidl/00_webidl.js";
import * as net from "ext:deno_net/01_net.js";
import * as tls from "ext:deno_net/02_tls.js";

----------------------------------------

TITLE: Initializing Fetch API Components in JavaScript
DESCRIPTION: Sets up the Fetch API by importing required modules and configuring global scope properties. Includes setup for Headers, FormData, Request, Response, and the main fetch function. Also configures WebAssembly streaming callback.

LANGUAGE: javascript
CODE:
import * as headers from "ext:deno_fetch/20_headers.js";
import * as formData from "ext:deno_fetch/21_formdata.js";
import * as request from "ext:deno_fetch/23_request.js";
import * as response from "ext:deno_fetch/23_response.js";
import * as fetch from "ext:deno_fetch/26_fetch.js";
import * as eventSource from "ext:deno_fetch/27_eventsource.js";

// Set up the callback for Wasm streaming ops
Deno.core.setWasmStreamingCallback(fetch.handleWasmStreaming);

Object.defineProperty(globalThis, "fetch", {
  value: fetch.fetch,
  enumerable: true,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "Request", {
  value: request.Request,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "Response", {
  value: response.Response,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "Headers", {
  value: headers.Headers,
  enumerable: false,
  configurable: true,
  writable: true,
});

Object.defineProperty(globalThis, "FormData", {
  value: formData.FormData,
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Assigning Global Properties in JavaScript
DESCRIPTION: This snippet shows how to assign properties from the deno_web extension to the global scope in JavaScript. It uses Object.defineProperty to set the AbortController as a non-enumerable, configurable, and writable property of the global object.

LANGUAGE: javascript
CODE:
Object.defineProperty(globalThis, "AbortController", {
  value: abortSignal.AbortController,
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Initializing Deno Web Extension in Rust
DESCRIPTION: This snippet demonstrates how to initialize the deno_web extension in Rust. It shows the function call to init_ops_and_esm, which takes generic Permissions, an Arc<BlobStore>, and an optional Url as parameters. This function should be provided in the extensions field of RuntimeOptions.

LANGUAGE: rust
CODE:
deno_web::deno_web::init_ops_and_esm::<Permissions>(Arc<BlobStore>, Option<Url>)

----------------------------------------

TITLE: Adding File System Benchmarks in JavaScript
DESCRIPTION: Demonstrates how to add filesystem benchmarks using copyFileSync and includes cleanup with removeSync. Shows proper handling of side-effects in benchmarks.

LANGUAGE: javascript
CODE:
const copyFileSync = getFunction("copyFileSync");
bench(() => copyFileSync("test", "test2"));

// For functions with side-effects, clean up after `bench` like so:
const removeSync = getFunction("removeSync");
removeSync("test2");

----------------------------------------

TITLE: Compiling and Running Stdio Benchmarks in C and Deno
DESCRIPTION: Commands to compile the C program with O3 optimization and run performance benchmarks using dd command to pipe zero-filled data through both C and Deno implementations. Uses a block size of 65536 and processes 500000 blocks.

LANGUAGE: bash
CODE:
cc stdio.c -o stdio -O3
time dd if=/dev/zero bs=65536 count=500000 | ./stdio
time dd if=/dev/zero bs=65536 count=500000 | deno run stdio.js

----------------------------------------

TITLE: Implementing TypeScript Compiler Host Interface
DESCRIPTION: Provides the CompilerHost implementation that integrates TypeScript with Deno's runtime environment. Handles file operations, module resolution, and source file management.

LANGUAGE: JavaScript
CODE:
const host = {
  fileExists(fileName) {
    debug(`host.fileExists("${fileName}")`); 
    return false;
  },
  readFile(specifier) {
    debug(`host.readFile("${specifier}")`); 
    return core.jsonOpSync("op_load", { specifier }).data;
  },
  getSourceFile(specifier, languageVersion, _onError, _shouldCreateNewSourceFile) {
    debug(`host.getSourceFile("${specifier}", ${ts.ScriptTarget[languageVersion]})`);
    let sourceFile = sourceFileCache.get(specifier);
    if (sourceFile) {
      return sourceFile;
    }
    const { data, hash, scriptKind } = core.jsonOpSync("op_load", { specifier });
    sourceFile = ts.createSourceFile(specifier, data, languageVersion, false, scriptKind);
    sourceFile.moduleName = specifier;
    sourceFile.version = hash;
    sourceFileCache.set(specifier, sourceFile);
    return sourceFile;
  }
}

----------------------------------------

TITLE: Promise to Callback Conversion - Correct Implementation
DESCRIPTION: Demonstrates the correct way to convert promise-based APIs to callback-based APIs, properly handling errors to prevent double callback execution.

LANGUAGE: typescript
CODE:
promise.then((value) => callback(null, value), callback);

----------------------------------------

TITLE: Defining TypeScript Library Entries in JavaScript
DESCRIPTION: This code snippet shows how to define the map of TypeScript library names to their corresponding files in the TypeScript compiler. It's part of the process of updating TypeScript in the Deno CLI.

LANGUAGE: javascript
CODE:
var libEntries = [
  // JavaScript only
  ["es5", "lib.es5.d.ts"],
  ["es6", "lib.es2015.d.ts"],
  ["es2015", "lib.es2015.d.ts"],
  ["es7", "lib.es2016.d.ts"],
  // ...
];

----------------------------------------

TITLE: Implementing TypeScript Language Service Request Handler
DESCRIPTION: Handles language service requests for features like code completion, quick info, and diagnostics. Processes requests and returns appropriate responses through the language service API.

LANGUAGE: JavaScript
CODE:
function serverRequest({ id, ...request }) {
  debug(`serverRequest()`, { id, ...request });
  switch (request.method) {
    case "configure": {
      const { options, errors } = ts.convertCompilerOptionsFromJson(request.compilerOptions, "");
      Object.assign(options, { allowNonTsExtensions: true });
      compilationSettings = options;
      return respond(id, true);
    }
    case "getDiagnostics": {
      try {
        const diagnosticMap = {};
        for (const specifier of request.specifiers) {
          diagnosticMap[specifier] = fromTypeScriptDiagnostic([
            ...languageService.getSemanticDiagnostics(specifier),
            ...languageService.getSuggestionDiagnostics(specifier),
            ...languageService.getSyntacticDiagnostics(specifier)
          ]);
        }
        return respond(id, diagnosticMap);
      } catch (e) {
        error(e);
        return respond(id, {});
      }
    }
  }
}

----------------------------------------

TITLE: Initializing deno_io Operations in Rust
DESCRIPTION: This code snippet shows how to initialize the deno_io operations in Rust. It involves calling the init_ops_and_esm function with an optional Stdio parameter in the RuntimeOptions.

LANGUAGE: rust
CODE:
deno_io::deno_io::init_ops_and_esm(Option<deno_io::Stdio>)

----------------------------------------

TITLE: Initializing WebIDL in Rust for Deno Runtime
DESCRIPTION: This snippet provides instructions for initializing WebIDL operations and ESM in Rust when configuring Deno's RuntimeOptions. It suggests including the init_webidl function in the extensions field of RuntimeOptions.

LANGUAGE: rust
CODE:
init_webidl::init_webidl::init_ops_and_esm()

----------------------------------------

TITLE: Importing deno_io Extension in JavaScript
DESCRIPTION: This snippet demonstrates how to import the deno_io extension from JavaScript in a Deno project. It uses the 'ext:' protocol to import the extension's source file.

LANGUAGE: javascript
CODE:
import * as io from "ext:deno_io/12_io.js";

----------------------------------------

TITLE: Logging to Console in JavaScript
DESCRIPTION: This snippet demonstrates how to log a simple string to the console using JavaScript in Deno.

LANGUAGE: javascript
CODE:
console.log("js");

----------------------------------------

TITLE: Multiple Deno Tests Configuration in JSON
DESCRIPTION: Demonstrates how to configure multiple tests within a single JSON file, allowing for concurrent test execution.

LANGUAGE: json
CODE:
{
  "tests": {
    "ignore_dir": {
      "args": "run script.ts",
      "output": "script.out"
    },
    "some_other_test": {
      "args": "run other.ts",
      "output": "other.out"
    }
  }
}

----------------------------------------

TITLE: Synchronous Error Handling - Correct Implementation
DESCRIPTION: Demonstrates the correct way to handle synchronous errors when converting to callback-based APIs, ensuring the callback is only called once.

LANGUAGE: typescript
CODE:
let err, value;
try {
  value = process();
} catch (e) {
  err = e;
}
if (err) {
  callback(err); // Make sure arguments.length === 1
} else {
  callback(null, value);
}

----------------------------------------

TITLE: Importing and Configuring WebIDL in JavaScript for Deno
DESCRIPTION: This snippet demonstrates how to import the WebIDL extension and configure it in the global scope for use in Deno. It imports the webidl module and sets up a brand property on the global object.

LANGUAGE: javascript
CODE:
import * as webidl from "ext:deno_webidl/00_webidl.js";
Object.defineProperty(globalThis, webidl.brand, {
  value: webidl.brand,
  enumerable: false,
  configurable: true,
  writable: true,
});

----------------------------------------

TITLE: Running Linter in Deno
DESCRIPTION: Command to run the linting script that uses dlint and clippy. This must be run before code check-in.

LANGUAGE: sh
CODE:
deno run --allow-read --allow-write --allow-run ./tools/lint.js

----------------------------------------

TITLE: Running Code Formatter in Deno
DESCRIPTION: Command to run the code formatting script that uses dprint and rustfmt. This must be run before code check-in.

LANGUAGE: sh
CODE:
deno run --allow-read --allow-write --allow-run ./tools/format.js

----------------------------------------

TITLE: Logging Output in TypeScript
DESCRIPTION: A basic TypeScript example showing console logging functionality.

LANGUAGE: typescript
CODE:
console.log("ts");

----------------------------------------

TITLE: Multi-step Deno Test Configuration in JSON
DESCRIPTION: Illustrates a more complex test configuration with multiple steps, including caching and running a TypeScript file with expected error output.

LANGUAGE: json
CODE:
{
  "tempDir": true,
  "steps": [{
    "args": "cache main.ts",
    "output": "cache.out"
  }, {
    "args": "run main.ts",
    "output": "error.out",
    "exitCode": 1
  }]
}

----------------------------------------

TITLE: Initializing TypeScript Debug Logging and Core Functions
DESCRIPTION: Sets up debug logging functionality and core utility functions for the TypeScript compiler implementation. Includes error handling and assertion capabilities.

LANGUAGE: JavaScript
CODE:
function setLogDebug(debug, source) {
  logDebug = debug;
  if (source) {
    logSource = source;
  }
}

function debug(...args) {
  if (logDebug) {
    const stringifiedArgs = args.map((arg) =>
      typeof arg === "string" ? arg : JSON.stringify(arg)
    ).join(" ");
    core.print(`DEBUG ${logSource} - ${stringifiedArgs}\n`, 1);
  }
}

----------------------------------------

TITLE: Implementing Node-API Function in Rust
DESCRIPTION: Demonstrates the implementation of a new Node-API function using the napi_sym macro in Rust

LANGUAGE: rust
CODE:
#[napi_sym::napi_sym]
fn napi_get_boolean(
  env: *mut Env,
  value: bool,
  result: *mut napi_value,
) -> Result {
  // ...
  Ok(())
}

----------------------------------------

TITLE: Running Tools via Cargo
DESCRIPTION: Alternative method to run Deno tools using cargo for current or pending builds of the Deno executable.

LANGUAGE: sh
CODE:
cargo run -- run --allow-read --allow-write --allow-run ./tools/<script>

----------------------------------------

TITLE: TypeScript Function Implementations
DESCRIPTION: Examples of TypeScript functions showing type annotations and return types.

LANGUAGE: typescript
CODE:
function hello(name: string) {
  console.log(name);
}

hello("alice");

LANGUAGE: typescript
CODE:
function foo(): number {
  return 2;
}

----------------------------------------

TITLE: Implementing Node-API Function with napi_sym Macro in Rust
DESCRIPTION: This snippet demonstrates the use of the napi_sym macro to implement a Node-API function. It shows how to handle environment and result pointers, and map Deno's Result type to raw napi_result.

LANGUAGE: rust
CODE:
use deno_napi::napi_value;
use deno_napi::Env;
use deno_napi::Error;
use deno_napi::Result;

#[napi_sym::napi_sym]
fn napi_get_boolean(
  env: *mut Env,
  value: bool,
  result: *mut napi_value,
) -> Result {
  let _env: &mut Env = env.as_mut().ok_or(Error::InvalidArg)?;
  // *result = ...
  Ok(())
}

----------------------------------------

TITLE: Defining Node.js Compatibility Module
DESCRIPTION: Markdown header and description defining a Deno module that provides Node.js compatibility features including the require function.

LANGUAGE: markdown
CODE:
# deno_node\n\n`require` and other node related functionality for Deno.

----------------------------------------

TITLE: Adding Node-API Symbol Export
DESCRIPTION: Shows how to add a new Node-API symbol to the exports list in symbol_exports.json

LANGUAGE: diff
CODE:
{
  "symbols": [
    ...
    "napi_get_undefined",
-   "napi_get_null"
+   "napi_get_null",
+   "napi_get_boolean"
  ]
}

----------------------------------------

TITLE: Basic Deno Test Configuration in JSON
DESCRIPTION: Shows a simple test configuration in JSON format, specifying the command to run and the expected output file.

LANGUAGE: json
CODE:
{
  "args": "run main.js",
  "output": "main.out"
}

----------------------------------------

TITLE: Running Filesystem Benchmarks
DESCRIPTION: Commands to execute benchmarks in both Deno and Node.js environments.

LANGUAGE: bash
CODE:
deno run -A --unstable run.mjs
node run.js

----------------------------------------

TITLE: Viewing Benchmark Reports
DESCRIPTION: Instructions for serving and viewing the benchmark results through a local web server on port 9000.

LANGUAGE: bash
CODE:
deno run --allow-net=127.0.0.1:9000 serve.jsx
# View rendered report at http://127.0.0.1:9000/

----------------------------------------

TITLE: Updating Rust Library Exports
DESCRIPTION: Shows how to register the new test module in the main library file

LANGUAGE: diff
CODE:
// tests/napi/src/lib.rs

+ mod boolean;

...

#[no_mangle]
unsafe extern "C" fn napi_register_module_v1(
  env: napi_env,
  exports: napi_value,
) -> napi_value {
  ...
+ boolean::init(env, exports);

  exports
}

----------------------------------------

TITLE: Running Filtered Deno Benchmarks with Cargo
DESCRIPTION: Command to run specific Deno benchmarks using Cargo's bench command. This example filters to only run bundle-related benchmarks using the deno_bench benchmark suite.

LANGUAGE: shell
CODE:
cargo bench --bench deno_bench -- bundle

----------------------------------------

TITLE: Promise to Callback Conversion - Incorrect Implementation
DESCRIPTION: Shows an incorrect way of converting promise-based APIs to callback-based APIs, where error handling can cause double callback execution.

LANGUAGE: typescript
CODE:
promise.then((value) => callback(null, value)).catch(callback);

----------------------------------------

TITLE: Synchronous Error Handling - Incorrect Implementation
DESCRIPTION: Shows an incorrect implementation of synchronous error handling that can result in double callback execution when the callback throws an error.

LANGUAGE: typescript
CODE:
try {
  const value = process();
  callback(null, value);
} catch (err) {
  callback(err);
}

----------------------------------------

TITLE: Retrieving Memory Information on macOS
DESCRIPTION: This code snippet shows the syscalls used to retrieve memory information on macOS systems. It uses sysctl for memory size and swap usage, and host_statistics64 for VM info.

LANGUAGE: markdown
CODE:
sysctl([CTL_HW, HW_MEMSIZE]);
sysctl([CTL_VM, VM_SWAPUSAGE]);
host_statistics64(mach_host_self(), HOST_VM_INFO64)

----------------------------------------

TITLE: Running FFI Benchmarks in Deno
DESCRIPTION: This command runs benchmarks for the Deno FFI implementation. It uses the release build of Deno and requires FFI, read permissions, and unstable FFI features.

LANGUAGE: bash
CODE:
target/release/deno bench --allow-ffi --allow-read --unstable-ffi ./tests/ffi/tests/bench.js

----------------------------------------

TITLE: JavaScript Test Implementation
DESCRIPTION: Shows how to write JavaScript tests for the new Node-API functionality

LANGUAGE: javascript
CODE:
// tests/napi/boolean_test.js
import { assertEquals, loadTestLibrary } from "./common.js";
const lib = loadTestLibrary();
Deno.test("napi get boolean", function () {
  assertEquals(lib.test_get_boolean(true), true);
  assertEquals(lib.test_get_boolean(false), false);
});

----------------------------------------

TITLE: Running Specific Deno Integration Tests
DESCRIPTION: Demonstrates how to run specific tests or categories of tests using cargo test commands. Includes options for filtering and displaying test output.

LANGUAGE: bash
CODE:
cargo test specs::category_name::test_name

LANGUAGE: bash
CODE:
cargo test test_name

LANGUAGE: bash
CODE:
cargo test test_name -- --nocapture

----------------------------------------

TITLE: Running Node.js Compatibility Tests in Deno
DESCRIPTION: Example command showing how to run specific Node.js compatibility tests in Deno. This command demonstrates running tests with 'buffer' in the filename from the node_compat/runner directory.

LANGUAGE: shellsession
CODE:
/path/to/deno/tests/node_compat/runner
$ deno task test buffer

----------------------------------------

TITLE: Running Copyright Checker in Deno
DESCRIPTION: Command to run the copyright header checking script that verifies proper licensing across the codebase.

LANGUAGE: sh
CODE:
deno run --allow-read --allow-run  ./tools/copyright_checker.js

----------------------------------------

TITLE: Defining Test Directory Structure for Deno Specs
DESCRIPTION: Specifies the required directory structure for organizing Deno integration tests within the specs framework.

LANGUAGE: bash
CODE:
tests/specs/<category_name>/<test_name>/__test__.json

----------------------------------------

TITLE: JavaScript Console Output Examples
DESCRIPTION: Basic console.log demonstrations in JavaScript showing different string outputs.

LANGUAGE: javascript
CODE:
console.log("Hello World");

LANGUAGE: javascript
CODE:
console.log("Hello World2");

----------------------------------------

TITLE: Visualizing Image Processing Architecture in Rust with Mermaid
DESCRIPTION: This diagram illustrates the flow of image processing in Rust using the image crate. It shows the transformation from input binary to output binary, including intermediate stages of DynamicImage and pixel processing.

LANGUAGE: mermaid
CODE:
flowchart LR
  Input["input binary<br/>( &[u8] )"]
  II["intermediate image<br/>( DynamicImage )"]
  Ops["processing pixel<br/>( ImageBuffer< P, S > )"]
  Output["output binary<br/>( Box<[u8]> )"]
  Input --> II
  II --> Ops --> II
  II --> Output

----------------------------------------

TITLE: Installing Deno on Windows using Chocolatey
DESCRIPTION: This command installs the Deno runtime on Windows systems using the Chocolatey package manager.

LANGUAGE: powershell
CODE:
choco install deno

----------------------------------------

TITLE: Installing Deno on macOS using Homebrew
DESCRIPTION: This command installs the Deno runtime on macOS systems using the Homebrew package manager.

LANGUAGE: sh
CODE:
brew install deno

----------------------------------------

TITLE: Installing Deno on Windows using WinGet
DESCRIPTION: This command installs the Deno runtime on Windows systems using the WinGet package manager.

LANGUAGE: powershell
CODE:
winget install --id=DenoLand.Deno

----------------------------------------

TITLE: Installing Deno on Windows using PowerShell
DESCRIPTION: This command installs the Deno runtime on Windows systems using PowerShell.

LANGUAGE: powershell
CODE:
irm https://deno.land/install.ps1 | iex

----------------------------------------

TITLE: Copying Certificate Files
DESCRIPTION: Bash commands to copy generated certificate files from the WPT suite directory to the runner certificates directory

LANGUAGE: bash
CODE:
cp tests/wpt/suite/tools/certs/cacert.key tests/wpt/runner/certs/cacert.key
cp tests/wpt/suite/tools/certs/cacert.pem tests/wpt/runner/certs/cacert.pem
cp tests/wpt/suite/tools/certs/web-platform.test.key tests/wpt/runner/certs/web-platform.test.key
cp tests/wpt/suite/tools/certs/web-platform.test.pem tests/wpt/runner/certs/web-platform.test.pem

----------------------------------------

TITLE: Modifying OpenSSL Certificate Configuration
DESCRIPTION: Diff showing changes to the OpenSSL configuration file to comment out constraints line in certificate generation

LANGUAGE: diff
CODE:
diff --git a/tools/wptserve/wptserve/sslutils/openssl.py b/tools/wptserve/wptserve/sslutils/openssl.py
index 87a8cc9cc7..bbf500d8ca 100644
--- a/tools/wptserve/wptserve/sslutils/openssl.py
+++ b/tools/wptserve/wptserve/sslutils/openssl.py
@@ -216,7 +216,7 @@ basicConstraints = CA:true
 subjectKeyIdentifier=hash
 authorityKeyIdentifier=keyid:always,issuer:always
 keyUsage = keyCertSign
-%(constraints_line)s
+#%(constraints_line)s
" % {"root_dir": root_dir,
        "san_line": san_line,
        "duration": duration,

----------------------------------------

TITLE: Running cargo-plonk for hot-swapping Deno WebGPU module
DESCRIPTION: Command to start watching for changes in the deno_webgpu crate and hot-swap the init_ops_and_esm function into the previously built deno binary.

LANGUAGE: bash
CODE:
cargo plonk run \
  --package deno_webgpu \
  --symbol init_ops_and_esm \
  --bin deno \
  --watch

----------------------------------------

TITLE: Building Deno normally with Cargo
DESCRIPTION: Command to compile Deno normally using Cargo before using plonk. This step is necessary to have an initial build to work with.

LANGUAGE: bash
CODE:
cargo build -p deno [--release]

----------------------------------------

TITLE: Debugging cargo-plonk with verbose output
DESCRIPTION: Command to run cargo-plonk with verbose output for debugging purposes. This provides detailed information about the hot-swapping process.

LANGUAGE: bash
CODE:
DYLD_INSERT_LIBRARIES="/Users/divy/gh/plonk/target/release/build/cargo-plonk-dd0f08c90ca82109/out/inject.dylib" DYLD_LIBRARY_PATH="/Users/divy/.rustup/toolchains/1.75.0-aarch64-apple-darwin/lib" NEW_SYMBOL="_ZN11deno_webgpu11deno_webgpu16init_ops_and_esm17h683ed96f45027bc1E" PLONK_BINARY="/Users/divy/gh/deno/target/debug/deno" PLONK_LIBRARY="/Users/divy/gh/deno/target/debug/libdeno_webgpu.dylib" SYMBOL="_ZN11deno_webgpu11deno_webgpu16init_ops_and_esm17h6907fcd8be7e215eE" VERBOSE="y" "/Users/divy/gh/deno/target/debug/deno" "eval" "await navigator.gpu.requestAdapter()" "--unstable"

----------------------------------------

TITLE: Installing cargo-plonk using Cargo
DESCRIPTION: Command to install cargo-plonk using Cargo package manager. This is a prerequisite for using plonk to speed up Deno rebuilds.

LANGUAGE: bash
CODE:
cargo install cargo-plonk

----------------------------------------

TITLE: Release Completion Announcement Message
DESCRIPTION: Slack/Discord message template to announce the completion of a release and unlock the repository

LANGUAGE: plaintext
CODE:
:unlock:

@here 

`denoland/deno` is now unlocked.

*You can land PRs now*

Deno v$VERSION has been released.

----------------------------------------

TITLE: Using cargo-plonk to re-run commands on changes
DESCRIPTION: Advanced usage of cargo-plonk to re-run specific commands when changes are detected. This example evaluates a WebGPU-related JavaScript expression.

LANGUAGE: bash
CODE:
cargo plonk run -v \
  -p deno_webgpu \
  -s init_ops_and_esm \
  -b deno \
  --watch \
  -- eval "await navigator.gpu.requestAdapter()" --unstable

----------------------------------------

TITLE: Domain Configuration File
DESCRIPTION: Configuration file (domains.txt) that specifies SSL certificate settings and allowed domain names for the local certificate.

LANGUAGE: shell
CODE:
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost

----------------------------------------

TITLE: Generating ECC Domain Certificate
DESCRIPTION: Commands to generate ECC-based certificate files for localhost using prime256v1 curve. Creates localhost_ecc.key, localhost_ecc.csr, and localhost_ecc.crt signed by the root CA.

LANGUAGE: shell
CODE:
openssl ecparam -genkey -name prime256v1 -noout --out localhost_ecc.key
openssl req -new -key localhost_ecc.key -out localhost_ecc.csr -subj "/C=US/ST=YourState/L=YourCity/O=Example-Certificates/CN=localhost.local"
openssl x509 -req -sha256 -days 36135 -in localhost_ecc.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.txt -out localhost_ecc.crt

----------------------------------------

TITLE: Generating RSA Domain Certificate
DESCRIPTION: Commands to generate RSA-based certificate files for localhost including localhost.key, localhost.csr, and localhost.crt. Creates a certificate signed by the root CA with a 36135-day validity period.

LANGUAGE: shell
CODE:
openssl req -new -nodes -newkey rsa:2048 -keyout localhost.key -out localhost.csr -subj "/C=US/ST=YourState/L=YourCity/O=Example-Certificates/CN=localhost.local"
openssl x509 -req -sha256 -days 36135 -in localhost.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.txt -out localhost.crt

----------------------------------------

TITLE: Generating Root CA Certificate Files
DESCRIPTION: Commands to generate root Certificate Authority files including RootCA.pem, RootCA.key, and RootCA.crt. Creates a self-signed certificate valid for 36135 days using RSA-2048.

LANGUAGE: shell
CODE:
openssl req -x509 -nodes -new -sha256 -days 36135 -newkey rsa:2048 -keyout RootCA.key -out RootCA.pem -subj "/C=US/CN=Example-Root-CA"
openssl x509 -outform pem -in RootCA.pem -out RootCA.crt

----------------------------------------

TITLE: Configuring SSL Certificate Properties for Localhost
DESCRIPTION: OpenSSL configuration file that defines certificate properties for a localhost development certificate. Specifies key usage permissions, constraints, and DNS alternative names.

LANGUAGE: config
CODE:
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost

----------------------------------------

TITLE: Testing @ts-expect-error Comment in TypeScript
DESCRIPTION: Demonstrates the usage of @ts-expect-error directive by intentionally assigning a number to a string variable. This test verifies that TypeScript correctly handles the expected type error annotation.

LANGUAGE: typescript
CODE:
// @ts-expect-error
const a: string = 42;

----------------------------------------

TITLE: Type Error Example in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript type error. It attempts to assign a number to a variable declared as a string, which will cause the type-checker to fail.

LANGUAGE: ts
CODE:
const a: string = 42;

----------------------------------------

TITLE: Logging to Console in TypeScript
DESCRIPTION: This snippet shows a basic console log statement in TypeScript. It illustrates the syntax for printing a string to the console in a TypeScript environment.

LANGUAGE: ts
CODE:
console.log("ts");

----------------------------------------

TITLE: Logging to Console in JavaScript
DESCRIPTION: This snippet demonstrates a simple console log statement in JavaScript. It shows the basic syntax for outputting a string to the console.

LANGUAGE: js
CODE:
console.log("js");

----------------------------------------

TITLE: Active TypeScript Type Error Example
DESCRIPTION: Example of TypeScript code that will trigger the type-checker to fail due to invalid type assignment outside of HTML comments.

LANGUAGE: typescript
CODE:
const a: string = 42;

----------------------------------------

TITLE: HTML Comment TypeScript Examples
DESCRIPTION: Multiple TypeScript code examples within HTML comments showing invalid type assignments. These examples are not type-checked due to being within comments.

LANGUAGE: typescript
CODE:
const a: string = 42;

LANGUAGE: typescript
CODE:
const a: boolean = "true";

----------------------------------------

TITLE: Ignored TypeScript Type Error Example
DESCRIPTION: Example of TypeScript code within an HTML comment using the ignore directive, demonstrating how to prevent type-checking of invalid type assignments.

LANGUAGE: typescript
CODE:
const value: Invalid = "ignored";

----------------------------------------

TITLE: Type-Checking Failure Example in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates a type mismatch that will cause the type-checker to fail. It assigns a number to a variable declared as a string type.

LANGUAGE: typescript
CODE:
const a: string = 42;

----------------------------------------

TITLE: Invalid TypeScript Code with Ignore Attribute
DESCRIPTION: This TypeScript snippet is marked with the 'ignore' attribute, indicating that it should be excluded from type-checking or processing. It contains intentionally invalid TypeScript code.

LANGUAGE: typescript
CODE:
const value: Invalid = "ignored";

----------------------------------------

TITLE: Logging to Console in JavaScript
DESCRIPTION: This snippet demonstrates a simple console.log statement in JavaScript. It's intended to be extracted with a .js extension.

LANGUAGE: javascript
CODE:
console.log("js");

----------------------------------------

TITLE: Invalid Type Assignment in TypeScript
DESCRIPTION: An example demonstrating TypeScript type checking with an intentionally incorrect type assignment that would cause a compilation error.

LANGUAGE: typescript
CODE:
const a: string = 42;

----------------------------------------

TITLE: Logging Output in JavaScript
DESCRIPTION: A simple JavaScript example demonstrating console logging functionality.

LANGUAGE: javascript
CODE:
console.log("js");

----------------------------------------

TITLE: Invalid Type Assignment in TypeScript
DESCRIPTION: This snippet demonstrates an invalid type assignment in TypeScript that will cause the type-checker to fail. It assigns a number to a variable declared as a string.

LANGUAGE: typescript
CODE:
const a: string = 42;

----------------------------------------

TITLE: Logging to Console in TypeScript
DESCRIPTION: This snippet shows how to log a simple string to the console using TypeScript in Deno.

LANGUAGE: typescript
CODE:
console.log("ts");

----------------------------------------

TITLE: VSCode Settings for Deno Test JSON Schema
DESCRIPTION: Provides VSCode settings to enable auto-completion for Deno test configuration files using a custom JSON schema.

LANGUAGE: json
CODE:
{
  "json.schemas": [{
    "fileMatch": [
      "__test__.jsonc"
    ],
    "url": "./tests/specs/schema.json"
  }]
}

----------------------------------------

TITLE: SQL Select Queries
DESCRIPTION: SQL SELECT statements with different formatting styles, including a formatted and an ignored format version.

LANGUAGE: sql
CODE:
SELECT
  *,
  biz,
  buz
FROM
  baz;

LANGUAGE: sql
CODE:
-- deno-fmt-ignore-file
  seLect * , biz, buz
from baz;

----------------------------------------

TITLE: Svelte TypeScript Component
DESCRIPTION: Svelte component with TypeScript variable declaration in script section.

LANGUAGE: svelte
CODE:
<script lang="ts">
  let a: number;
</script>

----------------------------------------

TITLE: HTML Container Element
DESCRIPTION: Basic HTML div element with class attribution.

LANGUAGE: html
CODE:
<div class="container">content</div>

----------------------------------------

TITLE: CSS Styling Example
DESCRIPTION: CSS selector and styling demonstration using nested elements and color properties.

LANGUAGE: css
CODE:
#app > .btn {
  color: #000;
}

----------------------------------------

TITLE: YAML List Definition
DESCRIPTION: Simple YAML example showing list syntax.

LANGUAGE: yaml
CODE:
- item1
- item2

----------------------------------------

TITLE: JSON Configuration Examples
DESCRIPTION: JSON and JSONC examples showing different data structures and commenting.

LANGUAGE: jsonc
CODE:
{
  // Comment in JSON
  "key": "value",
  "key2": "value2"
}

LANGUAGE: json
CODE:
{
  "numbers": ["1", "2"]
}

----------------------------------------

TITLE: SQL Select Queries
DESCRIPTION: SQL select statements with formatting variations, including a deno-fmt-ignore example.

LANGUAGE: sql
CODE:
  seLect * , biz, buz
from baz;

LANGUAGE: sql
CODE:
-- deno-fmt-ignore-file
  seLect * , biz, buz
from baz;

----------------------------------------

TITLE: Svelte TypeScript Component
DESCRIPTION: Svelte component with TypeScript variable declaration.

LANGUAGE: svelte
CODE:
<script lang=ts>
let a:number
</script>

----------------------------------------

TITLE: HTML Container Element
DESCRIPTION: Basic HTML div element with class definition.

LANGUAGE: html
CODE:
<div class=container > content </div>

----------------------------------------

TITLE: CSS Selector Styling
DESCRIPTION: CSS example showing nested selector and color definition.

LANGUAGE: css
CODE:
#app>.btn{ color : #000 }

----------------------------------------

TITLE: YAML List Definition
DESCRIPTION: Simple YAML list with basic items.

LANGUAGE: yaml
CODE:
-  item1
-  item2

----------------------------------------

TITLE: JSON Configuration Examples
DESCRIPTION: JSON configuration examples with comments and array formatting.

LANGUAGE: jsonc
CODE:
{
  // Comment in JSON
  "key":          "value",
                "key2":
                "value2",
}

LANGUAGE: json
CODE:
{
  "numbers":
  ["1",      "2"]
}

----------------------------------------

TITLE: TypeScript Function Definitions
DESCRIPTION: TypeScript function examples demonstrating type annotations and function returns.

LANGUAGE: typescript
CODE:

function hello(name: string    ) {
                  console.log(name);
};

hello(        "alice");

LANGUAGE: typescript
CODE:
function foo(): number {
  return       2;
}

----------------------------------------

TITLE: JavaScript Console Output
DESCRIPTION: Basic console.log examples in JavaScript showing different formatting styles.

LANGUAGE: javascript
CODE:
console.log("Hello World"

)

LANGUAGE: javascript
CODE:
console.log("Hello World2"

)

----------------------------------------

TITLE: URL Encoded Form Data Example
DESCRIPTION: Demonstrates URL-encoded form data with two fields - a plain text field and an HTML-encoded field containing angle brackets. The second field contains the text '<Deno>' encoded as HTML entities.

LANGUAGE: plaintext
CODE:
field_1=Hi&field_2=%3CDeno%3E

----------------------------------------

TITLE: Git Commands for Creating Minor Version Branch
DESCRIPTION: Git commands to create and push a new minor version branch for patch releases

LANGUAGE: bash
CODE:
# checkout latest minor release
$ git checkout v$PAST_VERSION

# create a branch
$ git checkout v$MINOR_VERSION

# push the branch to the `denoland/deno` repository
$ git push upstream v$MINOR_VERSION

----------------------------------------

TITLE: Pre-flight Announcement Message for Deno Release
DESCRIPTION: Slack/Discord message template to announce the start of a release process and lock down the repository

LANGUAGE: plaintext
CODE:
:lock: 

@here

Deno v$VERSION is now getting released.

`denoland/deno` is now locked.

*DO NOT LAND ANY PRs*

Release checklist: <LINK TO THIS FORKED GIST GOES HERE>

----------------------------------------

TITLE: Using left-pad in JavaScript
DESCRIPTION: Examples showing how to use left-pad for padding strings and numbers. The function accepts three parameters: the value to pad, the total length desired, and an optional padding character (defaults to space).

LANGUAGE: javascript
CODE:
const leftPad = require("left-pad");

leftPad("foo", 5);
// => "  foo"

leftPad("foobar", 6);
// => "foobar"

leftPad(1, 2, "0");
// => "01"

leftPad(17, 5, 0);
// => "00017"

----------------------------------------

TITLE: Installing left-pad via npm
DESCRIPTION: Command to install the left-pad package using npm package manager

LANGUAGE: bash
CODE:
$ npm install left-pad

----------------------------------------

TITLE: Rust Test Implementation
DESCRIPTION: Demonstrates how to implement the Rust side of Node-API tests

LANGUAGE: rust
CODE:
use napi_sys::Status::napi_ok;
use napi_sys::ValueType::napi_boolean;
use napi_sys::*;

extern "C" fn test_boolean(
  env: napi_env,
  info: napi_callback_info,
) -> napi_value {
  let (args, argc, _) = crate::get_callback_info!(env, info, 1);
  assert_eq!(argc, 1);

  let mut ty = -1;
  assert!(unsafe { napi_typeof(env, args[0], &mut ty) } == napi_ok);
  assert_eq!(ty, napi_boolean);

  // Use napi_get_boolean here...

  value
}

pub fn init(env: napi_env, exports: napi_value) {
  let properties = &[crate::new_property!(env, "test_boolean\0", test_boolean)];

  unsafe {
    napi_define_properties(env, exports, properties.len(), properties.as_ptr())
  };
}

----------------------------------------

TITLE: Initializing Hono Web Application in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic Hono web application. It imports the Hono class, creates an instance, defines a GET route for the root path, and exports the app.

LANGUAGE: typescript
CODE:
import { Hono } from 'hono'
const app = new Hono()

app.get('/', (c) => c.text('Hono!!'))

export default app