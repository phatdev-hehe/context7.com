TITLE: Simple Bubble Chart Creation
DESCRIPTION: Creates a basic bubble chart with different sized markers using Plotly's Scatter plot with marker size attributes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[10, 11, 12, 13],
    mode='markers',
    marker=dict(
        size=[40, 60, 80, 100],
    )
)

data = [trace0]
py.iplot(data, filename='bubblechart-size')

----------------------------------------

TITLE: Creating Color-Variable 3D Surface Plot with Plotly
DESCRIPTION: Creates a complex 3D surface plot (ring cyclide) with two subplots showing different coloring schemes - one colored by z-value and another by distance from origin. Includes scene configuration, subplot creation, and annotation setup.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly import tools

import copy
import json
import math
import urllib2

# load ring cyclide data
response = urllib2.urlopen('https://plotly.com/~empet/2381.json')
data_file = response.read()
fig = json.loads(data_file)

data_original = fig['data'][0]        # trace0
data = copy.deepcopy(fig['data'])[0]  # trace1

lx = len(data['z'])
ly = len(data['z'][0])
out = []

def dist_origin(x, y, z):
    return math.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)

for i in xrange(lx):
    temp = []
    for j in xrange(ly):
        temp.append(
            dist_origin(data['x'][i][j], data['y'][i][j], data['z'][i][j]))
    out.append(temp)

data['surfacecolor'] = out     # sets surface-color to distance from the origin

scene = dict(
    xaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    yaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    zaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    cameraposition=[[0.2, 0.5, 0.5, 0.2], [0, 0, 0], 4.8]
)

fig = tools.make_subplots(rows=1, cols=2,
                          specs=[[{'is_3d': True}, {'is_3d': True}]])

# adding surfaces to subplots.
data_original['scene'] = 'scene1'
data_original['colorbar'] = dict(x=-0.07)

data['scene'] = 'scene2'
fig.append_trace(data_original, 1, 1)
fig.append_trace(data, 1, 2)

fig['layout'].update(title='Ring Cyclide',
                     height=800, width=950)
fig['layout']['scene1'].update(scene)
fig['layout']['scene2'].update(scene)
fig['layout']['annotations'] = [
    dict(x=0.1859205, y=0.95,     
         xref='x', yref='y',
         text='4th Dim Prop. to z',
         showarrow=False),
    dict(x=0.858, y=0.95,
         xref='x', yref='y',
         text='4th Dim Prop. to Distance from Origin',
         showarrow=False)
]

py.iplot(fig, filename='surface-coloring')

----------------------------------------

TITLE: Creating Basic Time Series Plot with Datetime Objects in Python
DESCRIPTION: Demonstrates how to create a simple time series line plot using Plotly and pandas with datetime data from a CSV file. The example plots Apple stock price data.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
from datetime import datetime

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

data = [go.Scatter(x=df.Date, y=df['AAPL.High'])]

py.iplot(data, filename = 'time-series-simple')

----------------------------------------

TITLE: Creating Mixed Subplots with Plotly in Python
DESCRIPTION: This code creates a complex figure with three subplots: a bar chart of volcano counts by country, a 3D surface plot of a volcano, and a geographic scatter plot of volcano locations. It demonstrates data loading, processing, and advanced layout configuration in Plotly.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

# read in volcano database data
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv')

# frequency of Country
freq = df
freq = freq.Country.value_counts().reset_index().rename(columns={'index': 'x'})

# plot(1) top 10 countries by total volcanoes
locations = go.Bar(x=freq['x'][0:10],y=freq['Country'][0:10], marker=dict(color='#CF1020'))

# read in 3d volcano surface data
df_v = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')

# plot(2) 3d surface of volcano
threed = go.Surface(z=df_v.values.tolist(), colorscale='Reds', showscale=False)

# plot(3)  scattergeo map of volcano locations
trace3 = {
  "geo": "geo3", 
  "lon": df['Longitude'],
  "lat": df['Latitude'],
  "hoverinfo": 'text',
  "marker": {
    "size": 4,
    "opacity": 0.8,
    "color": '#CF1020',
    "colorscale": 'Viridis'
  }, 
  "mode": "markers", 
  "type": "scattergeo"
}

data = [locations, threed, trace3]

# control the subplot below using domain in 'geo', 'scene', and 'axis'
layout = {
  "plot_bgcolor": 'black',
  "paper_bgcolor": 'black',
  "titlefont": {
      "size": 20,
      "family": "Raleway"
  },
  "font": {
      "color": 'white'
  },
  "dragmode": "zoom", 
  "geo3": {
    "domain": {
      "x": [0, 0.55], 
      "y": [0, 0.9]
    }, 
    "lakecolor": "rgba(127,205,255,1)",
    "oceancolor": "rgb(6,66,115)",
    "landcolor": 'white',
    "projection": {"type": "orthographic"}, 
    "scope": "world", 
    "showlakes": True,
    "showocean": True,
    "showland": True,
    "bgcolor": 'black'
  }, 
  "margin": {
    "r": 10, 
    "t": 25, 
    "b": 40, 
    "l": 60
  }, 
  "scene": {"domain": {
      "x": [0.5, 1], 
      "y": [0, 0.55]
    },
           "xaxis": {"gridcolor": 'white'},
           "yaxis": {"gridcolor": 'white'},
           "zaxis": {"gridcolor": 'white'}
           }, 
  "showlegend": False, 
  "title": "<br>Volcano Database", 
  "xaxis": {
    "anchor": "y", 
    "domain": [0.6, 0.95]
  }, 
  "yaxis": {
    "anchor": "x", 
    "domain": [0.65, 0.95],
    "showgrid": False
  }
}

annotations = { "text": "Source: NOAA",
               "showarrow": False,
               "xref": "paper",
               "yref": "paper",
               "x": 0,
               "y": 0}

layout['annotations'] = [annotations]

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename = "Mixed Subplots Volcano")

----------------------------------------

TITLE: Implementing Peak Detection
DESCRIPTION: Detects peaks in the time series using PeakUtils and visualizes them with red cross markers on the original plot.

LANGUAGE: python
CODE:
cb = np.array(time_series)
indices = peakutils.indexes(cb, thres=0.02/max(cb), min_dist=0.1)

trace = go.Scatter(
    x=[j for j in range(len(time_series))],
    y=time_series,
    mode='lines',
    name='Original Plot'
)

trace2 = go.Scatter(
    x=indices,
    y=[time_series[j] for j in indices],
    mode='markers',
    marker=dict(
        size=8,
        color='rgb(255,0,0)',
        symbol='cross'
    ),
    name='Detected Peaks'
)

data = [trace, trace2]
py.iplot(data, filename='milk-production-plot-with-peaks')

----------------------------------------

TITLE: Plotting Animated Gapminder Bubble Chart with Plotly
DESCRIPTION: Creates and displays the final animated bubble chart using Plotly's animation creation function.

LANGUAGE: python
CODE:
py.icreate_animations(figure, 'gapminder_example'+str(time.time()))

----------------------------------------

TITLE: Adjusting Figure Size in Plotly
DESCRIPTION: Updates the layout object to adjust the figure size while maintaining aspect ratio.

LANGUAGE: python
CODE:
ratio = float(fig['layout']['width']) / fig['layout']['height']

new_width = 650
new_height = int(new_width/ratio)

fig['layout'].update(
    autosize=False,
    width=new_width,
    height=new_height,
    font=Font(size=7),
    titlefont=Font(size=12)
)

----------------------------------------

TITLE: Creating US State Choropleth Map
DESCRIPTION: Creates a choropleth map of US agricultural exports by state using Plotly. Includes data loading, preprocessing, and visualization with hover effects showing detailed breakdowns.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv')

for col in df.columns:
    df[col] = df[col].astype(str)

scl = [
    [0.0, 'rgb(242,240,247)'],
    [0.2, 'rgb(218,218,235)'],
    [0.4, 'rgb(188,189,220)'],
    [0.6, 'rgb(158,154,200)'],
    [0.8, 'rgb(117,107,177)'],
    [1.0, 'rgb(84,39,143)']
]

df['text'] = df['state'] + '<br>' + \
    'Beef ' + df['beef'] + ' Dairy ' + df['dairy'] + '<br>' + \
    'Fruits ' + df['total fruits'] + ' Veggies ' + df['total veggies'] + '<br>' + \
    'Wheat ' + df['wheat'] + ' Corn ' + df['corn']

data = [go.Choropleth(
    colorscale = scl,
    autocolorscale = False,
    locations = df['code'],
    z = df['total exports'].astype(float),
    locationmode = 'USA-states',
    text = df['text'],
    marker = go.choropleth.Marker(
        line = go.choropleth.marker.Line(
            color = 'rgb(255,255,255)',
            width = 2
        )),
    colorbar = go.choropleth.ColorBar(
        title = "Millions USD")
)]

layout = go.Layout(
    title = go.layout.Title(
        text = '2011 US Agriculture Exports by State<br>(Hover for breakdown)'
    ),
    geo = go.layout.Geo(
        scope = 'usa',
        projection = go.layout.geo.Projection(type = 'albers usa'),
        showlakes = True,
        lakecolor = 'rgb(255, 255, 255)'),
)

fig = go.Figure(data = data, layout = layout)
py.iplot(fig, filename = 'd3-cloropleth-map')

----------------------------------------

TITLE: Interpolation and Extrapolation of Y from X with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to interpolate and extrapolate y values from a given set of x values using a polynomial fit. It then visualizes both the original data points and the interpolated/extrapolated points using Plotly.

LANGUAGE: python
CODE:
points = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])

# get x and y vectors
x = points[:,0]
y = points[:,1]

# calculate polynomial
z = np.polyfit(x, y, 3)
f = np.poly1d(z)

# other x values
other_x = np.array([1.2, 1.34, 1.57, 1.7, 3.6, 3.8, 3.9, 4.0, 5.4, 6.6, 7.2, 7.3, 7.7, 8, 8.9, 9.1, 9.3])
other_y = f(other_x)

# calculate new x's and y's
x_new = np.linspace(0, 10, 50)
y_new = f(x_new)

# Creating the dataset, and generating the plot
trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    name='Data',
    marker=dict(
        size=12
    )
)

trace2 = go.Scatter(
    x=other_x,
    y=other_y,
    name='Interpolated/Extrapolated Data',
    mode='markers',
    marker=dict(
        symbol='square-open',
        size=12
    )
)

layout = go.Layout(
    title='Interpolation and Extrapolation of Y From X',
)

data2 = [trace1, trace2]
fig2 = go.Figure(data=data2, layout=layout)

py.iplot(fig2, filename='interpolation-and-extrapolation-of-y-from-x')

----------------------------------------

TITLE: Two-Way ANOVA Implementation
DESCRIPTION: Implements a two-way ANOVA test analyzing the relationship between tooth length and two independent variables (supplement type and dose).

LANGUAGE: python
CODE:
formula = 'len ~ C(supp) + C(dose) + C(supp):C(dose)'
model = ols(formula, data).fit()
aov_table = statsmodels.stats.anova.anova_lm(model, typ=2)
print(aov_table)

----------------------------------------

TITLE: Creating Parallel Coordinates Plot with Iris Dataset
DESCRIPTION: Shows how to create a parallel coordinates plot using the Iris dataset, including color scaling and custom background colors.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd 

df = pd.read_csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")

data = [
    go.Parcoords(
        line = dict(color = df['species_id'],
                   colorscale = [[0,'#D7C16B'],[0.5,'#23D8C3'],[1,'#F3F10F']]),
        dimensions = list([
            dict(range = [0,8],
                constraintrange = [4,8],
                label = 'Sepal Length', values = df['sepal_length']),
            dict(range = [0,8],
                label = 'Sepal Width', values = df['sepal_width']),
            dict(range = [0,8],
                label = 'Petal Length', values = df['petal_length']),
            dict(range = [0,8],
                label = 'Petal Width', values = df['petal_width'])
        ])
    )
]

layout = go.Layout(
    plot_bgcolor = '#E5E5E5',
    paper_bgcolor = '#E5E5E5'
)

fig = go.Figure(data = data, layout = layout)
py.iplot(fig, filename = 'parcoords-basic')

----------------------------------------

TITLE: Creating 3D Surface Subplots with Plotly in Python
DESCRIPTION: This code creates a 2x2 grid of 3D surface plots using Plotly. It demonstrates how to generate data, set up scene properties, create subplots, and apply different colorscales to each surface plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly import tools

import numpy as np

x = np.linspace(-5, 80, 10)
y = np.linspace(-5, 60, 10)
xGrid, yGrid = np.meshgrid(y, x)
z = xGrid ** 3 + yGrid ** 3

scene = dict(
    xaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    yaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    zaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    )
)

fig = tools.make_subplots(rows=2, cols=2,
                          specs=[[{'is_3d': True}, {'is_3d': True}],
                                 [{'is_3d': True}, {'is_3d': True}]])

# adding surfaces to subplots.
fig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='Viridis',
                      scene='scene1', showscale=False), 1, 1)
fig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='RdBu',
                      scene='scene2', showscale=False), 1, 2)
fig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='YlOrRd',
                      scene='scene3', showscale=False), 2, 1)
fig.append_trace(dict(type='surface', x=x, y=y, z=z, colorscale='YlGnBu',
                      scene='scene4', showscale=False), 2, 2)

fig['layout'].update(title='subplots with different colorscales',
                     height=800, width=800)
fig['layout']['scene1'].update(scene)
fig['layout']['scene2'].update(scene)
fig['layout']['scene3'].update(scene)
fig['layout']['scene4'].update(scene)

py.iplot(fig, file_name='multiple_plots')

----------------------------------------

TITLE: Creating 3D Line Plot of Brownian Motion with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a 3D line plot of Brownian motion using Plotly in Python. It includes data generation using pandas and numpy, plot creation with Plotly's graph objects, and layout configuration for the 3D plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv')
df.head()

def brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):
    dt = float(T)/N
    t = np.linspace(0, T, N)
    W = np.random.standard_normal(size = N)
    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion
    X = (mu-0.5*sigma**2)*t + sigma*W
    S = S0*np.exp(X) # geometric brownian motion
    return S

dates = pd.date_range('2012-01-01', '2013-02-22')
T = (dates.max()-dates.min()).days / 365
N = dates.size
start_price = 100
y = pd.Series(
    brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)
z = pd.Series(
    brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)

trace = go.Scatter3d(
    x=list(dates), y=y, z=z,
    marker=dict(
        size=4,
        color=z,
        colorscale='Viridis',
    ),
    line=dict(
        color='#1f77b4',
        width=1
    )
)

data = [trace]

layout = dict(
    width=800,
    height=700,
    autosize=False,
    title='Iris dataset',
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        camera=dict(
            up=dict(
                x=0,
                y=0,
                z=1
            ),
            eye=dict(
                x=-1.7428,
                y=1.0707,
                z=0.7100,
            )
        ),
        aspectratio = dict( x=1, y=1, z=0.7 ),
        aspectmode = 'manual'
    ),
)

fig = dict(data=data, layout=layout)

py.iplot(fig, filename='pandas-brownian-motion-3d', height=700)

----------------------------------------

TITLE: Multiple Line and Scatter Plot Styles
DESCRIPTION: Shows how to create multiple traces with different plotting modes (markers, lines, lines+markers) on the same graph.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

N = 100
random_x = np.linspace(0, 1, N)
random_y0 = np.random.randn(N)+5
random_y1 = np.random.randn(N)
random_y2 = np.random.randn(N)-5

trace0 = go.Scatter(
    x = random_x,
    y = random_y0,
    mode = 'markers',
    name = 'markers'
)
trace1 = go.Scatter(
    x = random_x,
    y = random_y1,
    mode = 'lines+markers',
    name = 'lines+markers'
)
trace2 = go.Scatter(
    x = random_x,
    y = random_y2,
    mode = 'lines',
    name = 'lines'
)

data = [trace0, trace1, trace2]
py.iplot(data, filename='scatter-mode')

----------------------------------------

TITLE: Creating 3D Plot with Frequency Slider
DESCRIPTION: This code generates an interactive 3D surface plot with a slider to control the frequency of the plotted function. It uses a custom listener class to update the plot data.

LANGUAGE: python
CODE:
import plotly.plotly as py
import ipywidgets as widgets
import numpy as np

from ipywidgets import interact, interactive, fixed
from IPython.core.display import HTML
from IPython.display import display, clear_output
from plotly.widgets import GraphWidget

g = GraphWidget('https://plotly.com/~DemoAccount/10147/')
x = y = np.arange(-5,5,0.1)
yt = x[:,np.newaxis]

# define our listener class
class z_data:
    
    def __init__(self):
        self.z = np.cos(x*yt)+np.sin(x*yt)*2
    
    def on_z_change(self, name):
        new_value = name['new']
        
        self.z = np.cos(x*yt*(new_value+1)/100)+np.sin(x*yt*(new_value+1/100))
        self.replot()
        
    def replot(self):
        g.restyle({ 'z': [self.z], 'colorscale': 'Viridis'})

# create sliders
z_slider = widgets.FloatSlider(min=0,max=30,value=1,step=0.05, continuous_update=False)
z_slider.description = 'Frequency'
z_slider.value = 1

# initialize listener class
z_state = z_data()

# activate listener on our slider
z_slider.observe(z_state.on_z_change, 'value')

# display our app
display(z_slider)
display(g)

----------------------------------------

TITLE: Overlaying Scatter Plot on Ternary Contour Plot with Plotly in Python
DESCRIPTION: This code combines the previously created scatter and contour plots into a single overlaid plot. It modifies the scatter trace marker for better visibility and updates the layout title before plotting.

LANGUAGE: python
CODE:
trace1['marker']['symbol'] = 'x'
trace1['marker']['color'] = '#4d79ff'
traces.append(trace1)

# update title:
layout['title'] = 'Scatter Plot overlaid on Ternary Contour Plot'
figure = dict(data=traces, layout=layout)
py.iplot(figure)

----------------------------------------

TITLE: Creating Pie Chart Subplots with Plotly in Python
DESCRIPTION: This code demonstrates how to create multiple pie charts as subplots using Plotly, with custom positioning, colors, and hover information.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

fig = {
    'data': [
        {
            'labels': ['1st', '2nd', '3rd', '4th', '5th'],
            'values': [38, 27, 18, 10, 7],
            'type': 'pie',
            'name': 'Starry Night',
            'marker': {'colors': ['rgb(56, 75, 126)',
                                  'rgb(18, 36, 37)',
                                  'rgb(34, 53, 101)',
                                  'rgb(36, 55, 57)',
                                  'rgb(6, 4, 4)']},
            'domain': {'x': [0, .48],
                       'y': [0, .49]},
            'hoverinfo':'label+percent+name',
            'textinfo':'none'
        },
        {
            'labels': ['1st', '2nd', '3rd', '4th', '5th'],
            'values': [28, 26, 21, 15, 10],
            'marker': {'colors': ['rgb(177, 127, 38)',
                                  'rgb(205, 152, 36)',
                                  'rgb(99, 79, 37)',
                                  'rgb(129, 180, 179)',
                                  'rgb(124, 103, 37)']},
            'type': 'pie',
            'name': 'Sunflowers',
            'domain': {'x': [.52, 1],
                       'y': [0, .49]},
            'hoverinfo':'label+percent+name',
            'textinfo':'none'

        },
        {
            'labels': ['1st', '2nd', '3rd', '4th', '5th'],
            'values': [38, 19, 16, 14, 13],
            'marker': {'colors': ['rgb(33, 75, 99)',
                                  'rgb(79, 129, 102)',
                                  'rgb(151, 179, 100)',
                                  'rgb(175, 49, 35)',
                                  'rgb(36, 73, 147)']},
            'type': 'pie',
            'name': 'Irises',
            'domain': {'x': [0, .48],
                       'y': [.51, 1]},
            'hoverinfo':'label+percent+name',
            'textinfo':'none'
        },
        {
            'labels': ['1st', '2nd', '3rd', '4th', '5th'],
            'values': [31, 24, 19, 18, 8],
            'marker': {'colors': ['rgb(146, 123, 21)',
                                  'rgb(177, 180, 34)',
                                  'rgb(206, 206, 40)',
                                  'rgb(175, 51, 21)',
                                  'rgb(35, 36, 21)']},
            'type': 'pie',
            'name':'The Night Café',
            'domain': {'x': [.52, 1],
                       'y': [.51, 1]},
            'hoverinfo':'label+percent+name',
            'textinfo':'none'
        }
    ],
    'layout': {'title': 'Van Gogh: 5 Most Prominent Colors Shown Proportionally',
               'showlegend': False}
}

py.iplot(fig, filename='pie_chart_subplots')

----------------------------------------

TITLE: Creating a Scatter Plot with Pandas and Plotly
DESCRIPTION: Demonstrates how to create a scatter plot using data from a pandas DataFrame and Plotly. Includes axis customization.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')

fig = go.Figure(go.Scatter(x=df.gdpPercap, y=df.lifeExp, text=df.country, mode='markers', name='2007'))
fig.update_xaxes(title_text='GDP per Capita', type='log')
fig.update_yaxes(title_text='Life Expectancy')

py.iplot(fig, filename='pandas-multiple-scatter')

----------------------------------------

TITLE: Creating a Candlestick Chart with Datetime Objects in Python
DESCRIPTION: This code shows how to create a candlestick chart using datetime objects for the x-axis. It manually creates lists for open, high, low, and close data, along with corresponding dates.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

from datetime import datetime

open_data = [33.0, 33.3, 33.5, 33.0, 34.1]
high_data = [33.1, 33.3, 33.6, 33.2, 34.8]
low_data = [32.7, 32.7, 32.8, 32.6, 32.8]
close_data = [33.0, 32.9, 33.3, 33.1, 33.1]
dates = [datetime(year=2013, month=10, day=10),
         datetime(year=2013, month=11, day=10),
         datetime(year=2013, month=12, day=10),
         datetime(year=2014, month=1, day=10),
         datetime(year=2014, month=2, day=10)]

trace = go.Candlestick(x=dates,
                       open=open_data,
                       high=high_data,
                       low=low_data,
                       close=close_data)
data = [trace]
py.iplot(data, filename='candlestick_datetime')

----------------------------------------

TITLE: Creating 3D Filled Line Plot with Population Data
DESCRIPTION: Creates a 3D filled line plot showing population trends for selected countries from 1957-2007 using Plotly. Loads data from a CSV, processes it with Pandas, and configures a 3D visualization with custom styling and colors.

LANGUAGE: python
CODE:
import plotly.plotly as py
import pandas as pd

# The datasets' url. Thanks Jennifer Bryan!
url_csv = 'http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt'

df = pd.read_csv(url_csv, sep='\t')
df.head()

countries = ['China', 'India', 'United States', 'Bangladesh', 'South Africa']
fill_colors = ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854']
gf = df.groupby('country')

data = []

for country, fill_color in zip(countries[::-1], fill_colors):
    group = gf.get_group(country)
    years = group['year'].tolist()
    length = len(years)
    country_coords = [country] * length
    pop = group['pop'].tolist()
    zeros = [0] * length
    
    data.append(dict(
        type='scatter3d',
        mode='lines',
        x=years + years[::-1] + [years[0]],
        y=country_coords * 2 + [country_coords[0]],
        z=pop + zeros + [pop[0]],
        name='',
        surfaceaxis=1,
        surfacecolor=fill_color,
        line=dict(
            color='black',
            width=4
        ),
    ))

layout = dict(
    title='Population from 1957 to 2007 [Gapminder]',
    showlegend=False,
    scene=dict(
        xaxis=dict(title=''),
        yaxis=dict(title=''),
        zaxis=dict(title=''),
        camera=dict(
            eye=dict(x=-1.7, y=-1.7, z=0.5)
        )
    )
)

fig = dict(data=data, layout=layout)

py.iplot(fig, filename='filled-3d-lines')

----------------------------------------

TITLE: Polynomial Interpolation and Extrapolation with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to perform polynomial interpolation and extrapolation on a set of points, and then visualize the results using Plotly. It fits a 3rd degree polynomial to the data points and plots both the original data and the fitted curve.

LANGUAGE: python
CODE:
points = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])

x = points[:,0]
y = points[:,1]

z = np.polyfit(x, y, 3)
f = np.poly1d(z)

x_new = np.linspace(0, 10, 50)
y_new = f(x_new)

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    name='Data',
    marker=dict(
        size=12
    )
)

trace2 = go.Scatter(
    x=x_new,
    y=y_new,
    mode='lines',
    name='Fit'
)

annotation = go.Annotation(
    x=6,
    y=-4.5,
    text='$0.43X^3 - 0.56X^2 + 16.78X + 10.61$',
    showarrow=False
)

layout = go.Layout(
    title='Polynomial Fit in Python',
    annotations=[annotation]
)

data = [trace1, trace2]
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='interpolation-and-extrapolation')

----------------------------------------

TITLE: Creating Colored and Styled Error Bars with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create colored and styled error bars using Plotly. It creates two scatter plots, one with a theoretical curve and another with data points and custom-styled error bars.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

x_theo = np.linspace(-4, 4, 100)
sincx = np.sinc(x_theo)
x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]
y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]

trace1 = go.Scatter(
    x=x_theo,
    y=sincx,
    name='sinc(x)'
)
trace2 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    name='measured',
    error_y=dict(
        type='constant',
        value=0.1,
        color='#85144B',
        thickness=1.5,
        width=3,
    ),
    error_x=dict(
        type='constant',
        value=0.2,
        color='#85144B',
        thickness=1.5,
        width=3,
    ),
    marker=dict(
        color='#85144B',
        size=8
    )
)
data = [trace1, trace2]
py.iplot(data, filename='error-bar-style')

----------------------------------------

TITLE: Asymmetric Error Bars with Constant Offset
DESCRIPTION: Creates a wind speed plot with asymmetric error bars using Pandas dataframe and Plotly's continuous error bar functionality. The error bars are calculated using standard deviation.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')

upper_bound = go.Scatter(
    name='Upper Bound',
    x=df['Time'],
    y=df['10 Min Sampled Avg']+df['10 Min Std Dev'],
    mode='lines',
    marker=dict(color="#444"),
    line=dict(width=0),
    fillcolor='rgba(68, 68, 68, 0.3)',
    fill='tonexty')

trace = go.Scatter(
    name='Measurement',
    x=df['Time'],
    y=df['10 Min Sampled Avg'],
    mode='lines',
    line=dict(color='rgb(31, 119, 180)'),
    fillcolor='rgba(68, 68, 68, 0.3)',
    fill='tonexty')

lower_bound = go.Scatter(
    name='Lower Bound',
    x=df['Time'],
    y=df['10 Min Sampled Avg']-df['10 Min Std Dev'],
    marker=dict(color="#444"),
    line=dict(width=0),
    mode='lines')

data = [lower_bound, trace, upper_bound]

layout = go.Layout(
    yaxis=dict(title='Wind speed (m/s)'),
    title='Continuous, variable value error bars.<br>Notice the hover text!',
    showlegend = False)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='pandas-continuous-error-bars')

----------------------------------------

TITLE: Creating Basic Sankey Diagram in Plotly
DESCRIPTION: Creates a basic Sankey diagram with 6 nodes and connecting links showing flow relationships between them.

LANGUAGE: python
CODE:
import plotly.plotly as py

data = dict(
    type='sankey',
    node = dict(
      pad = 15,
      thickness = 20,
      line = dict(
        color = "black",
        width = 0.5
      ),
      label = ["A1", "A2", "B1", "B2", "C1", "C2"],
      color = ["blue", "blue", "blue", "blue", "blue", "blue"]
    ),
    link = dict(
      source = [0,1,0,2,3,3],
      target = [2,3,3,4,4,5],
      value = [8,4,2,8,4,2]
  ))

layout =  dict(
    title = "Basic Sankey Diagram",
    font = dict(
      size = 10
    )
)

fig = dict(data=[data], layout=layout)
py.iplot(fig, validate=False)

----------------------------------------

TITLE: Creating a Donut Chart with Plotly in Python
DESCRIPTION: This code demonstrates how to create a donut chart using Plotly, including multiple data sets, custom layouts, and annotations.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

fig = {
  "data": [
    {
      "values": [16, 15, 12, 6, 5, 4, 42],
      "labels": [
        "US",
        "China",
        "European Union",
        "Russian Federation",
        "Brazil",
        "India",
        "Rest of World"
      ],
      "domain": {"column": 0},
      "name": "GHG Emissions",
      "hoverinfo":"label+percent+name",
      "hole": .4,
      "type": "pie"
    },
    {
      "values": [27, 11, 25, 8, 1, 3, 25],
      "labels": [
        "US",
        "China",
        "European Union",
        "Russian Federation",
        "Brazil",
        "India",
        "Rest of World"
      ],
      "text":["CO2"],
      "textposition":"inside",
      "domain": {"column": 1},
      "name": "CO2 Emissions",
      "hoverinfo":"label+percent+name",
      "hole": .4,
      "type": "pie"
    }],
  "layout": {
        "title":"Global Emissions 1990-2011",
        "grid": {"rows": 1, "columns": 2},
        "annotations": [
            {
                "font": {
                    "size": 20
                },
                "showarrow": False,
                "text": "GHG",
                "x": 0.20,
                "y": 0.5
            },
            {
                "font": {
                    "size": 20
                },
                "showarrow": False,
                "text": "CO2",
                "x": 0.8,
                "y": 0.5
            }
        ]
    }
}
py.iplot(fig, filename='donut')

----------------------------------------

TITLE: Loading and Displaying Dataset with Plotly Table
DESCRIPTION: Load alcohol consumption dataset from CSV and create an interactive table display using Plotly's FigureFactory.

LANGUAGE: python
CODE:
data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')
df = data[0:10]

table = FF.create_table(df)
py.iplot(table, filename='alcohol-data-sample')

----------------------------------------

TITLE: Implementing Peak Detection
DESCRIPTION: Detects peaks in the stock data using PeakUtils and visualizes them with red cross markers

LANGUAGE: python
CODE:
x = [j for j in range(len(stock_data))][left_endpt:right_endpt]
y = stock_data['SBUX'][left_endpt:right_endpt]
y = y.tolist()

cb = np.array(y)
indices = peakutils.indexes(cb, thres=0.75, min_dist=0.1)

trace = go.Scatter(
    x=x,
    y=y,
    mode='lines',
    marker=dict(
        color='rgb(0,56,210)'
    ),
    name='Highlighted Plot'
)

trace2 = go.Scatter(
    x=indices + left_endpt,
    y=[y[j] for j in indices],
    mode='markers',
    marker=dict(
        size=8,
        color='rgb(255,0,0)',
        symbol='cross'
    ),
    name='Detected Peaks'
)

data = [trace, trace2]
py.iplot(data, filename='stock-data-with-peaks')

----------------------------------------

TITLE: Creating Grouped Box Plots in Python with Plotly
DESCRIPTION: This code demonstrates how to create grouped box plots using Plotly. It generates data for multiple categories and groups them by day.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
     'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']

trace0 = go.Box(
    y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],
    x=x,
    name='kale',
    marker=dict(
        color='#3D9970'
    )
)
trace1 = go.Box(
    y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],
    x=x,
    name='radishes',
    marker=dict(
        color='#FF4136'
    )
)
trace2 = go.Box(
    y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],
    x=x,
    name='carrots',
    marker=dict(
        color='#FF851B'
    )
)
data = [trace0, trace1, trace2]
layout = go.Layout(
    yaxis=dict(
        title='normalized moisture',
        zeroline=False
    ),
    boxmode='group'
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Creating Stacked Subplots with Shared X-Axis in Python using Plotly
DESCRIPTION: This code creates three stacked subplots with a shared x-axis. It uses the make_subplots function with shared_xaxes=True and adjusts the vertical spacing between subplots.

LANGUAGE: python
CODE:
from plotly import tools
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2],
    y=[10, 11, 12]
)
trace2 = go.Scatter(
    x=[2, 3, 4],
    y=[100, 110, 120],
)
trace3 = go.Scatter(
    x=[3, 4, 5],
    y=[1000, 1100, 1200],
)
fig = tools.make_subplots(rows=3, cols=1, specs=[[{}], [{}], [{}]],
                          shared_xaxes=True, shared_yaxes=True,
                          vertical_spacing=0.001)
fig.append_trace(trace1, 3, 1)
fig.append_trace(trace2, 2, 1)
fig.append_trace(trace3, 1, 1)

fig['layout'].update(height=600, width=600, title='Stacked Subplots with Shared X-Axes')
py.iplot(fig, filename='stacked-subplots-shared-xaxes')

----------------------------------------

TITLE: Creating a Styled Pie Chart with Plotly in Python
DESCRIPTION: This code creates a styled pie chart with custom colors, hover information, and text formatting using Plotly's go.Pie object.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

labels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']
values = [4500,2500,1053,500]
colors = ['#FEBFB3', '#E1396C', '#96D38C', '#D0F9B1']

trace = go.Pie(labels=labels, values=values,
               hoverinfo='label+percent', textinfo='value', 
               textfont=dict(size=20),
               marker=dict(colors=colors, 
                           line=dict(color='#000000', width=2)))

py.iplot([trace], filename='styled_pie_chart')

----------------------------------------

TITLE: Plotting Average of Sine and Cosine Curves with Plotly
DESCRIPTION: Creates an interactive plot showing sine and cosine functions along with their average curve using NumPy for calculations and Plotly for visualization. The plot includes custom styling and markers.

LANGUAGE: python
CODE:
x = np.linspace(0, 2*np.pi, 100)
f = np.sin(x)
g = np.cos(x)
h = [(f[j] + g[j])/2 for j in range(len(x))] 

trace1 = go.Scatter(
    x=x,
    y=f,
    mode='lines',
    name='f(x)',
    marker=dict(
        color='rgb(220, 20, 60)'
    )
)

trace2 = go.Scatter(
    x=x,
    y=g,
    mode='lines',
    name='g(x)',
    marker=dict(
        color='rgb(100, 149, 237)'
    )
)

trace3 = go.Scatter(
    x=x,
    y=h,
    mode='markers+lines',
    name='Average of f and g',
    marker=dict(
        color='rgb(128, 0, 128)',
        symbol='diamond-open',
    )
)

data = [trace1, trace2, trace3]
py.iplot(data, filename='2-curves')

----------------------------------------

TITLE: Creating a Multi-Color Parallel Categories Diagram with Titanic Data
DESCRIPTION: Demonstrates how to create a more complex parallel categories diagram using Titanic passenger data. The ribbons are colored based on survival outcome, and hovering provides detailed information.

LANGUAGE: python
CODE:
titanic_df = pd.read_csv(
    "https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv")

# Create dimensions
class_dim = go.parcats.Dimension(
    values=titanic_df.Pclass,
    categoryorder='category ascending',
    label="Class"
)

gender_dim = go.parcats.Dimension(
    values=titanic_df.Sex,
    label="Gender"
)

survival_dim = go.parcats.Dimension(
  values=titanic_df.Survived,
  label="Outcome",
  categoryarray=[0, 1],
  ticktext=['perished', 'survived'],
)

# Create parcats trace
color = titanic_df.Survived;
colorscale = [[0, 'lightsteelblue'], [1, 'mediumseagreen']];

data = [
    go.Parcats(
        dimensions=[class_dim, gender_dim, survival_dim],
        line={'color': color,
              'colorscale': colorscale},
        hoveron='color',
        hoverinfo='count+probability',
        labelfont={'size': 18, 'family': 'Times'},
        tickfont={'size': 16, 'family': 'Times'},
        arrangement='freeform'
    )
]

# Display figure
iplot(data)

----------------------------------------

TITLE: Creating Horizontal Error Bars with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create horizontal error bars using Plotly. It uses the go.Scatter object and sets the error_x parameter instead of error_y to create horizontal error bars.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_x=dict(
            type='percent',
            value=10
        )
    )
]
py.iplot(data, filename='error-bar-horizontal')

----------------------------------------

TITLE: Creating 3D Network Visualization with Plotly in Python
DESCRIPTION: Constructs a 3D scatter plot using Plotly to visualize the Les Misérables character network. Includes settings for node colors, edge lines, and interactive hover information.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1=go.Scatter3d(x=Xe,
               y=Ye,
               z=Ze,
               mode='lines',
               line=dict(color='rgb(125,125,125)', width=1),
               hoverinfo='none'
               )

trace2=go.Scatter3d(x=Xn,
               y=Yn,
               z=Zn,
               mode='markers',
               name='actors',
               marker=dict(symbol='circle',
                             size=6,
                             color=group,
                             colorscale='Viridis',
                             line=dict(color='rgb(50,50,50)', width=0.5)
                             ),
               text=labels,
               hoverinfo='text'
               )

axis=dict(showbackground=False,
          showline=False,
          zeroline=False,
          showgrid=False,
          showticklabels=False,
          title=''
          )

layout = go.Layout(
         title="Network of coappearances of characters in Victor Hugo's novel<br> Les Miserables (3D visualization)",
         width=1000,
         height=1000,
         showlegend=False,
         scene=dict(
             xaxis=dict(axis),
             yaxis=dict(axis),
             zaxis=dict(axis),
        ),
     margin=dict(
        t=100
    ),
    hovermode='closest',
    annotations=[
           dict(
           showarrow=False,
            text="Data source: <a href='http://bost.ocks.org/mike/miserables/miserables.json'>[1] miserables.json</a>",
            xref='paper',
            yref='paper',
            x=0,
            y=0.1,
            xanchor='left',
            yanchor='bottom',
            font=dict(
            size=14
            )
            )
        ],    )

----------------------------------------

TITLE: Creating a Plot with Multiple Y-Axes using Plotly in Python
DESCRIPTION: This code snippet shows how to create a plot with four Y-axes using Plotly's graph_objs module. It creates four scatter plots, each assigned to a different Y-axis, and configures the layout to display all axes with custom positioning and styling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6],
    name='yaxis1 data'
)
trace2 = go.Scatter(
    x=[2, 3, 4],
    y=[40, 50, 60],
    name='yaxis2 data',
    yaxis='y2'
)
trace3 = go.Scatter(
    x=[4, 5, 6],
    y=[40000, 50000, 60000],
    name='yaxis3 data',
    yaxis='y3'
)
trace4 = go.Scatter(
    x=[5, 6, 7],
    y=[400000, 500000, 600000],
    name='yaxis4 data',
    yaxis='y4'
)
data = [trace1, trace2, trace3, trace4]
layout = go.Layout(
    title='multiple y-axes example',
    width=800,
    xaxis=dict(
        domain=[0.3, 0.7]
    ),
    yaxis=dict(
        title='yaxis title',
        titlefont=dict(
            color='#1f77b4'
        ),
        tickfont=dict(
            color='#1f77b4'
        )
    ),
    yaxis2=dict(
        title='yaxis2 title',
        titlefont=dict(
            color='#ff7f0e'
        ),
        tickfont=dict(
            color='#ff7f0e'
        ),
        anchor='free',
        overlaying='y',
        side='left',
        position=0.15
    ),
    yaxis3=dict(
        title='yaxis4 title',
        titlefont=dict(
            color='#d62728'
        ),
        tickfont=dict(
            color='#d62728'
        ),
        anchor='x',
        overlaying='y',
        side='right'
    ),
    yaxis4=dict(
        title='yaxis5 title',
        titlefont=dict(
            color='#9467bd'
        ),
        tickfont=dict(
            color='#9467bd'
        ),
        anchor='free',
        overlaying='y',
        side='right',
        position=0.85
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='multiple-axes-multiple')

----------------------------------------

TITLE: Creating a 3D Bubble Chart with Custom Colorbar in Python using Plotly
DESCRIPTION: This snippet demonstrates how to create a 3D bubble chart with a custom colorbar using Plotly. It visualizes planetary data including distance from sun, density, gravity, and temperature.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']
temperatures = [167, 464, 15, -20, -65, -110, -140, -195, -200, -225]
distance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]

# Create trace, sizing bubbles by planet diameter
trace1 = go.Scatter3d(
    x = distance_from_sun,
    y = density,
    z = gravity,
    text = planets,
    mode = 'markers',
    marker = dict(
        sizemode = 'diameter',
        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/#scatter-marker-sizeref
        size = planet_diameter,
        color = temperatures,
        colorbar = dict(title = 'Mean<br>Temperature'),
        colorscale=[[0, 'rgb(5, 10, 172)'], [.3, 'rgb(255, 255, 255)'], [1, 'rgb(178, 10, 28)']]
        )  
)
data=[trace1]

layout=go.Layout(width=800, height=800, title = 'Planets!!',
            scene = dict(xaxis=dict(title='Distance from Sun',
                                    titlefont=dict(color='Orange')),
                            yaxis=dict(title='Density',
                                       titlefont=dict(color='rgb(220, 220, 220)')),
                            zaxis=dict(title='Gravity',
                                       titlefont=dict(color='rgb(220, 220, 220)')),
                            bgcolor = 'rgb(20, 24, 54)'
                           )
             )

fig=go.Figure(data=data, layout=layout)
py.iplot(fig, filename='solar_system_planet_temp')

----------------------------------------

TITLE: Creating Scatter Plot with Logarithmic Axes in Plotly
DESCRIPTION: Creates a scatter plot with two traces using logarithmic scales for both x and y axes. The plot contains two lines with inverse relationships plotted on logarithmic scales.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        type='log',
        autorange=True
    ),
    yaxis=dict(
        type='log',
        autorange=True
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Creating a Basic Pie Chart with Plotly in Python
DESCRIPTION: This code creates a simple pie chart using Plotly, defining labels and values for different elements and plotting them using go.Pie.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

labels = ['Oxygen','Hydrogen','Carbon_Dioxide','Nitrogen']
values = [4500,2500,1053,500]

trace = go.Pie(labels=labels, values=values)

py.iplot([trace], filename='basic_pie_chart')

----------------------------------------

TITLE: Implementing High-Pass FFT Filter
DESCRIPTION: Creates a high-pass filter to remove lower frequencies from the signal through spectral inversion of a low-pass filter.

LANGUAGE: python
CODE:
fc = 0.1
b = 0.08
N = int(np.ceil((4 / b)))
if not N % 2: N += 1
n = np.arange(N)
 
sinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))
window = np.blackman(N)
sinc_func = sinc_func * window
sinc_func = sinc_func / np.sum(sinc_func)

sinc_func = -sinc_func
sinc_func[int((N - 1) / 2)] += 1

s = list(data['10 Min Std Dev'])
new_signal = np.convolve(s, sinc_func)

----------------------------------------

TITLE: Creating a Complex Horizontal Bar Chart with Color Palette in Plotly
DESCRIPTION: This code creates an advanced horizontal bar chart with a custom color palette and annotations for a survey visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# ... (full code not shown due to length, includes data setup, trace creation, layout configuration, and annotations) ...

fig = go.Figure(data=traces, layout=layout)
py.iplot(fig, filename='bar-colorscale')

----------------------------------------

TITLE: Creating a Simple Subplot in Python with Plotly
DESCRIPTION: This code creates a simple subplot with two scatter plots side by side. It uses the make_subplots function to define the layout and appends traces to each subplot.

LANGUAGE: python
CODE:
from plotly import tools
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6],
    mode='markers+text',
    text=['Text A', 'Text B', 'Text C'],
    textposition='bottom center'
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[50, 60, 70],
    mode='markers+text',
    text=['Text D', 'Text E', 'Text F'],
    textposition='bottom center'
)

fig = tools.make_subplots(rows=1, cols=2)

fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 1, 2)

fig['layout'].update(height=600, width=800, title='i <3 annotations and subplots')
py.iplot(fig, filename='simple-subplot-with-annotations')

----------------------------------------

TITLE: Creating Exponential Fit with Plotly in Python
DESCRIPTION: This code creates an exponential fit using NumPy and SciPy, then visualizes it with Plotly. It includes data preparation, curve fitting, and plot creation with customized layout and annotations.

LANGUAGE: python
CODE:
# Learn about API authentication here: https://plotly.com/python/getting-started
# Find your api_key here: https://plotly.com/settings/api

import plotly.plotly as py
import plotly.graph_objs as go

# Scientific libraries
import numpy as np
from scipy.optimize import curve_fit


x = np.array([399.75, 989.25, 1578.75, 2168.25, 2757.75, 3347.25, 3936.75, 4526.25, 5115.75, 5705.25])
y = np.array([109,62,39,13,10,4,2,0,1,2])

def exponenial_func(x, a, b, c):
    return a*np.exp(-b*x)+c


popt, pcov = curve_fit(exponenial_func, x, y, p0=(1, 1e-6, 1))

xx = np.linspace(300, 6000, 1000)
yy = exponenial_func(xx, *popt)

# Creating the dataset, and generating the plot
trace1 = go.Scatter(
                  x=x, 
                  y=y, 
                  mode='markers',
                  marker=go.Marker(color='rgb(255, 127, 14)'),
                  name='Data'
                  )

trace2 = go.Scatter(
                  x=xx, 
                  y=yy, 
                  mode='lines',
                  marker=go.Marker(color='rgb(31, 119, 180)'),
                  name='Fit'
                  )

annotation = go.Annotation(
                  x=2000,
                  y=100,
                  text='$\textbf{Fit}: 163.56e^{-0.00097x} - 1.16$',
                  showarrow=False
                  )
layout = go.Layout(
                title='Exponential Fit in Python',
                plot_bgcolor='rgb(229, 229, 229)',
                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),
                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),
                  annotations=[annotation]
                )

data = [trace1, trace2]
fig = go.Figure(data=data, layout=layout)

py.plot(fig, filename='Exponential-Fit-in-python')

----------------------------------------

TITLE: Creating US City Population Bubble Map
DESCRIPTION: Creates an interactive bubble map showing US city populations in 2014. The map uses different colors and bubble sizes to represent population ranges, with bubbles scaled using sizeref and positioned using lat/long coordinates.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df.head()

df['text'] = df['name'] + '<br>Population ' + (df['pop']/1e6).astype(str)+' million'
limits = [(0,2),(3,10),(11,20),(21,50),(50,3000)]
colors = ["rgb(0,116,217)","rgb(255,65,54)","rgb(133,20,75)","rgb(255,133,27)","lightgrey"]
cities = []
scale = 5000

for i in range(len(limits)):
    lim = limits[i]
    df_sub = df[lim[0]:lim[1]]
    city = go.Scattergeo(
        locationmode = 'USA-states',
        lon = df_sub['lon'],
        lat = df_sub['lat'],
        text = df_sub['text'],
        marker = go.scattergeo.Marker(
            size = df_sub['pop']/scale,
            color = colors[i],
            line = go.scattergeo.marker.Line(
                width=0.5, color='rgb(40,40,40)'
            ),
            sizemode = 'area'
        ),
        name = '{0} - {1}'.format(lim[0],lim[1]) )
    cities.append(city)

layout = go.Layout(
        title = go.layout.Title(
            text = '2014 US city populations<br>(Click legend to toggle traces)'
        ),
        showlegend = True,
        geo = go.layout.Geo(
            scope = 'usa',
            projection = go.layout.geo.Projection(
                type='albers usa'
            ),
            showland = True,
            landcolor = 'rgb(217, 217, 217)',
            subunitwidth=1,
            countrywidth=1,
            subunitcolor="rgb(255, 255, 255)",
            countrycolor="rgb(255, 255, 255)"
        )
    )

fig = go.Figure(data=cities, layout=layout)
py.iplot(fig, filename='d3-bubble-map-populations')

----------------------------------------

TITLE: Grouping Tasks in a Gantt Chart with Plotly in Python
DESCRIPTION: Demonstrates how to create a Gantt chart with grouped tasks. It uses different colors to represent task completion status and groups related tasks together.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [dict(Task="Job-1", Start='2017-01-01', Finish='2017-02-02', Resource='Complete'),
      dict(Task="Job-1", Start='2017-02-15', Finish='2017-03-15', Resource='Incomplete'),
      dict(Task="Job-2", Start='2017-01-17', Finish='2017-02-17', Resource='Not Started'),
      dict(Task="Job-2", Start='2017-01-17', Finish='2017-02-17', Resource='Complete'),
      dict(Task="Job-3", Start='2017-03-10', Finish='2017-03-20', Resource='Not Started'),
      dict(Task="Job-3", Start='2017-04-01', Finish='2017-04-20', Resource='Not Started'),
      dict(Task="Job-3", Start='2017-05-18', Finish='2017-06-18', Resource='Not Started'),
      dict(Task="Job-4", Start='2017-01-14', Finish='2017-03-14', Resource='Complete')]

colors = {'Not Started': 'rgb(220, 0, 0)',
          'Incomplete': (1, 0.9, 0.16),
          'Complete': 'rgb(0, 255, 100)'}

fig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True, group_tasks=True)
py.iplot(fig, filename='gantt-group-tasks-together', world_readable=True)

----------------------------------------

TITLE: Creating 2D Histogram Contour Subplot with Plotly in Python
DESCRIPTION: This complex example creates a subplot with a 2D histogram contour plot, scatter plot, and marginal histograms. It demonstrates advanced layout configuration and multiple trace types.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

t = np.linspace(-1, 1.2, 2000)
x = (t**3) + (0.3 * np.random.randn(2000))
y = (t**6) + (0.3 * np.random.randn(2000))

data = [
    go.Histogram2dContour(
        x = x,
        y = y,
        colorscale = 'Blues',
        reversescale = True,
        xaxis = 'x',
        yaxis = 'y'
    ),
    go.Scatter(
        x = x,
        y = y,
        xaxis = 'x',
        yaxis = 'y',
        mode = 'markers',
        marker = dict(
            color = 'rgba(0,0,0,0.3)',
            size = 3
        )
    ),
    go.Histogram(
        y = y,
        xaxis = 'x2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    ),
    go.Histogram(
        x = x,
        yaxis = 'y2',
        marker = dict(
            color = 'rgba(0,0,0,1)'
        )
    )
]

layout = go.Layout(
    autosize = False,
    xaxis = dict(
        zeroline = False,
        domain = [0,0.85],
        showgrid = False
    ),
    yaxis = dict(
        zeroline = False,
        domain = [0,0.85],
        showgrid = False
    ),
    xaxis2 = dict(
        zeroline = False,
        domain = [0.85,1],
        showgrid = False
    ),
    yaxis2 = dict(
        zeroline = False,
        domain = [0.85,1],
        showgrid = False
    ),
    height = 600,
    width = 600,
    bargap = 0,
    hovermode = 'closest',
    showlegend = False
)



fig = go.Figure(data=data,layout=layout)
py.iplot(fig, filename='Histogram2dContour Subplot')

----------------------------------------

TITLE: Creating a Box Plot
DESCRIPTION: Creates a box plot visualization showing the statistical distribution of 10-minute standard deviation values.

LANGUAGE: python
CODE:
data = [
    go.Box(
        y=wind_data['10 Min Std Dev'],
    )
]

py.iplot(data, filename='wind-data-box-plot')

----------------------------------------

TITLE: Creating a Choropleth for the Entire USA
DESCRIPTION: This example demonstrates how to create a choropleth map for the entire United States, showing unemployment rates by county.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import numpy as np
import pandas as pd

df_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/laucnty16.csv')
df_sample['State FIPS Code'] = df_sample['State FIPS Code'].apply(lambda x: str(x).zfill(2))
df_sample['County FIPS Code'] = df_sample['County FIPS Code'].apply(lambda x: str(x).zfill(3))
df_sample['FIPS'] = df_sample['State FIPS Code'] + df_sample['County FIPS Code']

colorscale = ["#f7fbff","#ebf3fb","#deebf7","#d2e3f3","#c6dbef","#b3d2e9","#9ecae1",
              "#85bcdb","#6baed6","#57a0ce","#4292c6","#3082be","#2171b5","#1361a9",
              "#08519c","#0b4083","#08306b"]
endpts = list(np.linspace(1, 12, len(colorscale) - 1))
fips = df_sample['FIPS'].tolist()
values = df_sample['Unemployment Rate (%)'].tolist()

fig = ff.create_choropleth(
    fips=fips, values=values,
    binning_endpoints=endpts,
    colorscale=colorscale,
    show_state_data=False,
    show_hover=True, centroid_marker={'opacity': 0},
    asp=2.9, title='USA by Unemployment %',
    legend_title='% unemployed'
)
py.iplot(fig, filename='choropleth_full_usa')

----------------------------------------

TITLE: Creating a Box Plot with Underlying Data Points in Python using Plotly
DESCRIPTION: This code demonstrates how to create a box plot that displays the underlying data points. It uses the 'boxpoints' parameter to show all data points.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Box(
        y=[0, 1, 1, 2, 3, 5, 8, 13, 21],
        boxpoints='all',
        jitter=0.3,
        pointpos=-1.8
    )
]
py.iplot(data)

----------------------------------------

TITLE: Creating 2D Histogram Overlaid with Scatter Plot in Plotly
DESCRIPTION: This example combines a 2D histogram with scatter plots. It demonstrates how to layer multiple chart types and customize marker styles for a more complex visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

x0 = np.random.randn(100)/5. + 0.5
y0 = np.random.randn(100)/5. + 0.5
x1 = np.random.rand(50)
y1 = np.random.rand(50) + 1.0

x = np.concatenate([x0, x1])
y = np.concatenate([y0, y1])

trace1 = go.Scatter(
    x=x0,
    y=y0,
    mode='markers',
    showlegend=False,
    marker=dict(
        symbol='x',
        opacity=0.7,
        color='white',
        size=8,
        line=dict(width=1),
    )
)
trace2 = go.Scatter(
    x=x1,
    y=y1,
    mode='markers',
    showlegend=False,
    marker=dict(
        symbol='circle',
        opacity=0.7,
        color='white',
        size=8,
        line=dict(width=1),
    )
)
trace3 = go.Histogram2d(
    x=x,
    y=y,
    colorscale='YlGnBu',
    zmax=10,
    nbinsx=14,
    nbinsy=14,
    zauto=False,
)

layout = go.Layout(
    xaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),
    yaxis=dict( ticks='', showgrid=False, zeroline=False, nticks=20 ),
    autosize=False,
    height=550,
    width=550,
    hovermode='closest',
)
data = [trace1, trace2, trace3]
fig = go.Figure(data=data, layout=layout)

py.iplot(fig)

----------------------------------------

TITLE: Creating Multiple Subplots in Python with Plotly
DESCRIPTION: This example demonstrates how to create multiple subplots (2x2 grid) using Plotly. It defines separate x and y axes for each subplot and positions them using the domain parameter.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 5, 6]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[50, 60, 70],
    xaxis='x2',
    yaxis='y2'
)
trace3 = go.Scatter(
    x=[300, 400, 500],
    y=[600, 700, 800],
    xaxis='x3',
    yaxis='y3'
)
trace4 = go.Scatter(
    x=[4000, 5000, 6000],
    y=[7000, 8000, 9000],
    xaxis='x4',
    yaxis='y4'
)
data = [trace1, trace2, trace3, trace4]
layout = go.Layout(
    xaxis=dict(
        domain=[0, 0.45]
    ),
    yaxis=dict(
        domain=[0, 0.45]
    ),
    xaxis2=dict(
        domain=[0.55, 1]
    ),
    xaxis3=dict(
        domain=[0, 0.45],
        anchor='y3'
    ),
    xaxis4=dict(
        domain=[0.55, 1],
        anchor='y4'
    ),
    yaxis2=dict(
        domain=[0, 0.45],
        anchor='x2'
    ),
    yaxis3=dict(
        domain=[0.55, 1]
    ),
    yaxis4=dict(
        domain=[0.55, 1],
        anchor='x4'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='multiple-subplots')

----------------------------------------

TITLE: Time Series with Range Slider in Python
DESCRIPTION: Creates an interactive time series plot with a range slider and range selector buttons. The example shows high and low values of Apple stock with customizable time ranges.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv")

trace_high = go.Scatter(
    x=df.Date,
    y=df['AAPL.High'],
    name = "AAPL High",
    line = dict(color = '#17BECF'),
    opacity = 0.8)

trace_low = go.Scatter(
    x=df.Date,
    y=df['AAPL.Low'],
    name = "AAPL Low",
    line = dict(color = '#7F7F7F'),
    opacity = 0.8)

data = [trace_high,trace_low]

layout = dict(
    title='Time Series with Rangeslider',
    xaxis=dict(
        rangeselector=dict(
            buttons=list([
                dict(count=1,
                     label='1m',
                     step='month',
                     stepmode='backward'),
                dict(count=6,
                     label='6m',
                     step='month',
                     stepmode='backward'),
                dict(step='all')
            ])
        ),
        rangeslider=dict(
            visible = True
        ),
        type='date'
    )
)

fig = dict(data=data, layout=layout)
py.iplot(fig, filename = "Time Series with Rangeslider")

----------------------------------------

TITLE: Creating Complex Carpet Plot with Multiple Scatter Traces
DESCRIPTION: Creates an advanced carpet plot with multiple scatter traces, custom styling, and different marker sizes and colors. Includes layout customization and hover settings.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [0.1,0.2,0.3],
    b = [1,2,3],
    y = [[1,2.2,3],[1.5,2.7,3.5],[1.7,2.9,3.7]],
    cheaterslope = 1,
    aaxis = dict(
        title = "a",
        tickmode = "linear",
        dtick = 0.05
    ),
    baxis = dict(
        title = "b",
        tickmode = "linear",
        dtick = 0.05
    )
)

trace2 = go.Scattercarpet(
    name = "b = 1.5",
    a = [0.05, 0.15, 0.25, 0.35],
    b = [1.5, 1.5, 1.5, 1.5]
)

trace3 = go.Scattercarpet(
    name = "b = 2",
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2, 2, 2, 2]
)

trace4 = go.Scattercarpet(
    name = "b = 2.5",
    a = [0.05, 0.15, 0.25, 0.35],
    b = [2.5, 2.5, 2.5, 2.5]
)

trace5 = go.Scattercarpet(
    name = "a = 0.15",
    a = [0.15, 0.15, 0.15, 0.15],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing = 1,
        shape = "spline"
    )
)

trace6 = go.Scattercarpet(
    name = "a = 0.2",
    a = [0.2, 0.2, 0.2, 0.2],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing = 1,
        shape = "spline"
    ),
      marker = dict(
        size = [10, 20, 30, 40],
        color = ["#000", "#f00", "#ff0", "#fff"]
      )
)

trace7 = go.Scattercarpet(
    name = "a = 0.25",
    a = [0.25, 0.25, 0.25, 0.25],
    b = [0.5, 1.5, 2.5, 3.5],
    line = dict(
        smoothing = 1,
        shape = "spline"
    )
)

layout = go.Layout(
    title = "scattercarpet extrapolation, clipping, and smoothing",
    hovermode = "closest"
)

data = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]

fig = go.Figure(data = data, layout = layout)
py.iplot(fig, filename = "scattercarpet/multiple")

----------------------------------------

TITLE: Implementing an Interactive Slider for Sine Wave Visualization in Plotly
DESCRIPTION: This snippet builds upon the previous code to create an interactive slider control. It allows users to adjust the frequency of the sine wave in real-time. The code sets up the slider steps and layout for the plot.

LANGUAGE: python
CODE:
steps = []
for i in range(len(data)):
    step = dict(
        method = 'restyle',  
        args = ['visible', [False] * len(data)],
    )
    step['args'][1][i] = True # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active = 10,
    currentvalue = {"prefix": "Frequency: "},
    pad = {"t": 50},
    steps = steps
)]

layout = dict(sliders=sliders)

fig = dict(data=data, layout=layout)

py.iplot(fig, filename='Sine Wave Slider')

----------------------------------------

TITLE: Creating Custom Sized Subplots with Titles in Python using Plotly
DESCRIPTION: This example shows how to create custom sized subplots with titles. It uses the make_subplots function with a custom specs parameter to define the layout and size of each subplot.

LANGUAGE: python
CODE:
from plotly import tools
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2],
    y=[1, 2]
)
trace1 = go.Scatter(
    x=[1, 2],
    y=[1, 2]
)
trace2 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 1, 2]
)
fig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))

fig.append_trace(trace0, 1, 1)
fig.append_trace(trace1, 1, 2)
fig.append_trace(trace2, 2, 1)

fig['layout'].update(showlegend=False, title='Specs with Subplot Title')
py.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')

----------------------------------------

TITLE: Customizing Tick Placement and Style in Plotly Python
DESCRIPTION: This example shows how to customize tick placement, color, and style for both x and y axes. It sets linear tick mode, specifies tick interval, and adjusts tick length and width.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        tickmode='linear',
        ticks='outside',
        tick0=0,
        dtick=0.25,
        ticklen=8,
        tickwidth=4,
        tickcolor='#000'
    ),
    yaxis=dict(
        tickmode='linear',
        ticks='outside',
        tick0=0,
        dtick=0.25,
        ticklen=8,
        tickwidth=4,
        tickcolor='#000'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-ticks')

----------------------------------------

TITLE: Multiple Markers on Mapbox
DESCRIPTION: Demonstrates plotting multiple locations on a map showing various coffee shops in a city. Uses Scattermapbox to plot multiple points with custom labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# mapbox_access_token = 'ADD_YOUR_TOKEN_HERE'

data = [
    go.Scattermapbox(
        lat=['38.91427','38.91538','38.91458',
             '38.92239','38.93222','38.90842',
             '38.91931','38.93260','38.91368',
             '38.88516','38.921894','38.93206',
             '38.91275'],
        lon=['-77.02827','-77.02013','-77.03155',
             '-77.04227','-77.02854','-77.02419',
             '-77.02518','-77.03304','-77.04509',
             '-76.99656','-77.042438','-77.02821',
             '-77.01239'],
        mode='markers',
        marker=go.scattermapbox.Marker(
            size=9
        ),
        text=["The coffee bar","Bistro Bohem","Black Cat",
             "Snap","Columbia Heights Coffee","Azi's Cafe",
             "Blind Dog Cafe","Le Caprice","Filter",
             "Peregrine","Tryst","The Coupe",
             "Big Bear Cafe"],
    )
]

layout = go.Layout(
    autosize=True,
    hovermode='closest',
    mapbox=go.layout.Mapbox(
        accesstoken=mapbox_access_token,
        bearing=0,
        center=go.layout.mapbox.Center(
            lat=38.92,
            lon=-77.07
        ),
        pitch=0,
        zoom=10
    ),
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='Multiple Mapbox')

----------------------------------------

TITLE: Customizing Contour Lines and Labels in Plotly
DESCRIPTION: This example shows how to customize contour lines and add labels to a contour plot using Plotly. It demonstrates setting the contour line color, smoothing, and adding labels with custom font settings.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data=[
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        contours=dict(
            coloring ='heatmap',
            showlabels = True,
            labelfont = dict(
                family = 'Raleway',
                size = 12,
                color = 'white',
            )
        )
    )
]

py.iplot(data)

----------------------------------------

TITLE: Creating a Complex Scatter Plot with Multiple Traces in Plotly Python
DESCRIPTION: Demonstrates creating a more complex scatter plot comparing life expectancy and GDP per capita for different continents.

LANGUAGE: python
CODE:
import pandas as pd
import plotly.plotly as py
import plotly.graph_objs as go

df = pd.read_csv('https://raw.githubusercontent.com/yankev/test/master/life-expectancy-per-GDP-2007.csv')

americas = df[(df.continent=='Americas')]
europe = df[(df.continent=='Europe')]

trace_comp0 = go.Scatter(
    x=americas.gdp_percap,
    y=americas.life_exp,
    mode='markers',
    marker=dict(size=12,
                line=dict(width=1),
                color="navy"
               ),
    name='Americas',
    text=americas.country,
    )

trace_comp1 = go.Scatter(
    x=europe.gdp_percap,
    y=europe.life_exp,
    mode='markers',
    marker=dict(size=12,
                line=dict(width=1),
                color="red"
               ),
    name='Europe',
    text=europe.country,
        )

data_comp = [trace_comp0, trace_comp1]
layout_comp = go.Layout(
    title='Life Expectancy v. Per Capita GDP, 2007',
    hovermode='closest',
    xaxis=dict(
        title='GDP per capita (2000 dollars)',
        ticklen=5,
        zeroline=False,
        gridwidth=2,
    ),
    yaxis=dict(
        title='Life Expectancy (years)',
        ticklen=5,
        gridwidth=2,
    ),
)
fig_comp = go.Figure(data=data_comp, layout=layout_comp)
py.iplot(fig_comp, filename='life-expectancy-per-GDP-2007')

----------------------------------------

TITLE: Creating US Flight Paths Visualization
DESCRIPTION: Creates an interactive map showing American Airlines flight paths across the US using airport location data and flight path data. The visualization includes markers for airports and lines representing flight routes with opacity based on frequency.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df_airports = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')
df_airports.head()

df_flight_paths = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')
df_flight_paths.head()

airports = [go.Scattergeo(
    locationmode = 'USA-states',
    lon = df_airports['long'],
    lat = df_airports['lat'],
    hoverinfo = 'text',
    text = df_airports['airport'],
    mode = 'markers',
    marker = go.scattergeo.Marker(
        size = 2,
        color = 'rgb(255, 0, 0)',
        line = go.scattergeo.marker.Line(
            width = 3,
            color = 'rgba(68, 68, 68, 0)'
        )
    ))]

flight_paths = []
for i in range(len(df_flight_paths)):
    flight_paths.append(
        go.Scattergeo(
            locationmode = 'USA-states',
            lon = [df_flight_paths['start_lon'][i], df_flight_paths['end_lon'][i]],
            lat = [df_flight_paths['start_lat'][i], df_flight_paths['end_lat'][i]],
            mode = 'lines',
            line = go.scattergeo.Line(
                width = 1,
                color = 'red',
            ),
            opacity = float(df_flight_paths['cnt'][i]) / float(df_flight_paths['cnt'].max()),
        )
    )

layout = go.Layout(
    title = go.layout.Title(
        text = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)'
    ),
    showlegend = False,
    geo = go.layout.Geo(
        scope = 'north america',
        projection = go.layout.geo.Projection(type = 'azimuthal equal area'),
        showland = True,
        landcolor = 'rgb(243, 243, 243)',
        countrycolor = 'rgb(204, 204, 204)',
    ),
)

fig = go.Figure(data = flight_paths + airports, layout = layout)
py.iplot(fig, filename = 'd3-flight-paths')

----------------------------------------

TITLE: Creating a Basic 3D Parametric Plot with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a basic 3D parametric plot using Plotly and NumPy. It generates a surface plot based on parametric equations and customizes the plot layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

s = np.linspace(0, 2 * np.pi, 240)
t = np.linspace(0, np.pi, 240)
tGrid, sGrid = np.meshgrid(s, t)

r = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)
x = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)
y = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)
z = r * np.cos(tGrid)                  # z = r*cos(t)

surface = go.Surface(x=x, y=y, z=z)
data = [surface]

layout = go.Layout(
    title='Parametric Plot',
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        )
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='Parametric_plot')

----------------------------------------

TITLE: Adding Parameter Values to a Carpet Plot in Plotly
DESCRIPTION: This example demonstrates how to add parameter values to a carpet plot using the 'a' and 'b' attributes. It creates a more complete carpet plot with x and y coordinates.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
)

data = [trace1]

fig = go.Figure(data = data)
py.iplot(fig, filename = "carpet/add-parameters")

----------------------------------------

TITLE: Creating Basic Parallel Coordinates with Custom Dimensions
DESCRIPTION: Demonstrates creating a parallel coordinates plot with custom dimensions, ranges, and labels. Shows how to set up constraint ranges and custom tick values/labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Parcoords(
        line = dict(color = 'blue'),
        dimensions = list([
            dict(range = [1,5],
                 constraintrange = [1,2],
                 label = 'A', values = [1,4]),
            dict(range = [1.5,5],
                 tickvals = [1.5,3,4.5],
                 label = 'B', values = [3,1.5]),
            dict(range = [1,5],
                 tickvals = [1,2,4,5],
                 label = 'C', values = [2,4],
                 ticktext = ['text 1', 'text 2', 'text 3', 'text 4']),
            dict(range = [1,5],
                 label = 'D', values = [4,2])
        ])
    )
]

py.iplot(data, filename = 'parcoord-dimensions')

----------------------------------------

TITLE: Creating Treemap Visualization with Plotly and Squarify in Python
DESCRIPTION: This code snippet demonstrates how to create an interactive treemap using Plotly and Squarify libraries. It defines the coordinate system, sets up treemap values, normalizes sizes, and creates rectangles with colors and annotations.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import squarify

x = 0.
y = 0.
width = 100.
height = 100.

values = [500, 433, 78, 25, 25, 7]

normed = squarify.normalize_sizes(values, width, height)
rects = squarify.squarify(normed, x, y, width, height)

# Choose colors from http://colorbrewer2.org/ under "Export"
color_brewer = ['rgb(166,206,227)','rgb(31,120,180)','rgb(178,223,138)',
                'rgb(51,160,44)','rgb(251,154,153)','rgb(227,26,28)']
shapes = []
annotations = []
counter = 0

for r in rects:
    shapes.append( 
        dict(
            type = 'rect', 
            x0 = r['x'], 
            y0 = r['y'], 
            x1 = r['x']+r['dx'], 
            y1 = r['y']+r['dy'],
            line = dict( width = 2 ),
            fillcolor = color_brewer[counter]
        ) 
    )
    annotations.append(
        dict(
            x = r['x']+(r['dx']/2),
            y = r['y']+(r['dy']/2),
            text = values[counter],
            showarrow = False
        )
    )
    counter = counter + 1
    if counter >= len(color_brewer):
        counter = 0

# For hover text
trace0 = go.Scatter(
    x = [ r['x']+(r['dx']/2) for r in rects ], 
    y = [ r['y']+(r['dy']/2) for r in rects ],
    text = [ str(v) for v in values ], 
    mode = 'text',
)
        
layout = dict(
    height=700, 
    width=700,
    xaxis=dict(showgrid=False,zeroline=False),
    yaxis=dict(showgrid=False,zeroline=False),
    shapes=shapes,
    annotations=annotations,
    hovermode='closest'
)

# With hovertext
figure = dict(data=[trace0], layout=layout)

# Without hovertext
# figure = dict(data=[Scatter()], layout=layout)

py.iplot(figure, filename='squarify-treemap')

----------------------------------------

TITLE: Creating a Gantt Chart from a Pandas DataFrame in Python
DESCRIPTION: Demonstrates how to create a Gantt chart using data from a pandas DataFrame. It reads data from a CSV file and applies custom styling to the chart.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gantt_example.csv')

fig = ff.create_gantt(df, colors=['#333F44', '#93e4c1'], index_col='Complete', show_colorbar=True,
                      bar_width=0.2, showgrid_x=True, showgrid_y=True)
py.iplot(fig, filename='gantt-use-a-pandas-dataframe', world_readable=True)

----------------------------------------

TITLE: Creating Asymmetric Error Bars with Plotly in Python
DESCRIPTION: This code snippet shows how to create a scatter plot with asymmetric error bars using Plotly. It uses the go.Scatter object and sets the error_y parameter with symmetric=False and separate arrays for upper and lower error values.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_y=dict(
            type='data',
            symmetric=False,
            array=[0.1, 0.2, 0.1, 0.1],
            arrayminus=[0.2, 0.4, 1, 0.2]
        )
    )
]
py.iplot(data, filename='error-bar-asymmetric-array')

----------------------------------------

TITLE: Adding Basic Hover Text to Plotly Scatter Plot in Python
DESCRIPTION: This snippet demonstrates how to add custom hover text to a basic scatter plot using Plotly. It creates a scatter plot with green markers and custom text that appears when hovering over each point.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x = [1,2,3,4,5],
        y = [2,1,6,4,4],
        text = ["Text A", "Text B", "Text C", "Text D", "Text E"],
        hoverinfo = 'text',
        marker = dict(
            color = 'green'
        ),
        showlegend = False
    )
]

py.iplot(data, filename = "add-hover-text")

----------------------------------------

TITLE: Creating a Bar Chart with Error Bars using Plotly in Python
DESCRIPTION: This code snippet shows how to create a bar chart with error bars using Plotly. It creates two go.Bar objects with error_y parameters and uses a layout to group the bars.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Bar(
    x=['Trial 1', 'Trial 2', 'Trial 3'],
    y=[3, 6, 4],
    name='Control',
    error_y=dict(
        type='data',
        array=[1, 0.5, 1.5],
        visible=True
    )
)
trace2 = go.Bar(
    x=['Trial 1', 'Trial 2', 'Trial 3'],
    y=[4, 7, 3],
    name='Experimental',
    error_y=dict(
        type='data',
        array=[0.5, 1, 2],
        visible=True
    )
)
data = [trace1, trace2]
layout = go.Layout(
    barmode='group'
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='error-bar-bar')

----------------------------------------

TITLE: Creating 3D Wireframe Plot with Plotly
DESCRIPTION: Creates a 3D wireframe visualization using Plotly. Generates a mesh grid of x,y coordinates and calculates z values using sine function of the radial distance. Sets up plot styling with custom colors and grid properties.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

# Creating the data
x = np.linspace(-5, 5, 50)
y = np.linspace(-5, 5, 50)
xGrid, yGrid = np.meshgrid(y, x)
R = np.sqrt(xGrid ** 2 + yGrid ** 2)
z = np.sin(R)

# Creating the plot
lines = []
line_marker = dict(color='#0066FF', width=2)
for i, j, k in zip(xGrid, yGrid, z):
    lines.append(go.Scatter3d(x=i, y=j, z=k, mode='lines', line=line_marker))

layout = go.Layout(
    title='Wireframe Plot',
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        )
    ),
    showlegend=False,
)
fig = go.Figure(data=lines, layout=layout)
py.iplot(fig, filename='wireframe_plot')

----------------------------------------

TITLE: Creating 3D Point Clustering Visualization with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a 3D point clustering visualization using Plotly and pandas in Python. It loads data from a CSV file, creates a scatter plot and a mesh3d plot for clustering, and sets up the layout for the visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/alpha_shape.csv')
df.head()

scatter = dict(
    mode = "markers",
    name = "y",
    type = "scatter3d",    
    x = df['x'], y = df['y'], z = df['z'],
    marker = dict( size=2, color="rgb(23, 190, 207)" )
)
clusters = dict(
    alphahull = 7,
    name = "y",
    opacity = 0.1,
    type = "mesh3d",    
    x = df['x'], y = df['y'], z = df['z']
)
layout = dict(
    title = '3d point clustering',
    scene = dict(
        xaxis = dict( zeroline=False ),
        yaxis = dict( zeroline=False ),
        zaxis = dict( zeroline=False ),
    )
)
fig = dict( data=[scatter, clusters], layout=layout )
# Use py.iplot() for IPython notebook
py.iplot(fig, filename='3d point clustering')

----------------------------------------

TITLE: Creating a Basic Sunburst Chart with Plotly in Python
DESCRIPTION: This code creates a basic sunburst chart using Plotly. It defines labels, parents, and values for the chart structure, and sets some styling options like outside text font and marker line width.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace = go.Sunburst(
    labels=["Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve" ],
    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],
    outsidetextfont = {"size": 20, "color": "#377eb8"},
    marker = {"line": {"width": 2}},
)

layout = go.Layout(
    margin = go.layout.Margin(t=0, l=0, r=0, b=0)
)

py.iplot(go.Figure([trace], layout), filename='basic_sunburst_chart')

----------------------------------------

TITLE: Creating an Online Line Plot with Chart Studio
DESCRIPTION: Demonstrates how to create a basic line plot and save it online using Chart Studio. Uses py.plot() for general use.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[10, 15, 13, 17]
)
trace1 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[16, 5, 11, 9]
)
data = [trace0, trace1]

py.plot(data, filename = 'basic-line', auto_open=True)

----------------------------------------

TITLE: Creating Basic Mapbox Scatter Plot
DESCRIPTION: Creates a basic map visualization with a single marker showing Montreal. Requires Mapbox access token for map rendering.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# mapbox_access_token = 'ADD_YOUR_TOKEN_HERE'

data = [
    go.Scattermapbox(
        lat=['45.5017'],
        lon=['-73.5673'],
        mode='markers',
        marker=go.scattermapbox.Marker(
            size=14
        ),
        text=['Montreal'],
    )
]

layout = go.Layout(
    autosize=True,
    hovermode='closest',
    mapbox=go.layout.Mapbox(
        accesstoken=mapbox_access_token,
        bearing=0,
        center=go.layout.mapbox.Center(
            lat=45,
            lon=-73
        ),
        pitch=0,
        zoom=5
    ),
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='Montreal Mapbox')

----------------------------------------

TITLE: Adding Customized Text and Annotations to Candlestick Chart in Python
DESCRIPTION: This code shows how to add custom text and annotations to a candlestick chart using Plotly. It includes a title, axis labels, and a vertical line with annotation to mark a specific date.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
from datetime import datetime

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

trace = go.Candlestick(x=df['Date'],
                open=df['AAPL.Open'],
                high=df['AAPL.High'],
                low=df['AAPL.Low'],
                close=df['AAPL.Close'])
data = [trace]
layout = {
    'title': 'The Great Recession',
    'yaxis': {'title': 'AAPL Stock'},
    'shapes': [{
        'x0': '2016-12-09', 'x1': '2016-12-09',
        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',
        'line': {'color': 'rgb(30,30,30)', 'width': 1}
    }],
    'annotations': [{
        'x': '2016-12-09', 'y': 0.05, 'xref': 'x', 'yref': 'paper',
        'showarrow': False, 'xanchor': 'left',
        'text': 'Increase Period Begins'
    }]
}
fig = dict(data=data, layout=layout)
py.iplot(fig, filename='aapl-recession-candlestick')

----------------------------------------

TITLE: Creating a Candlestick Chart with Custom Colors in Python
DESCRIPTION: This example demonstrates how to customize the colors of a candlestick chart in Plotly. It sets different colors for increasing and decreasing candlesticks.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
from datetime import datetime

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

trace = go.Candlestick(
    x=df['Date'],
    open=df['AAPL.Open'],
    high=df['AAPL.High'],
    low=df['AAPL.Low'],
    close=df['AAPL.Close'],
    increasing=dict(line=dict(color= '#17BECF')),
    decreasing=dict(line=dict(color= '#7F7F7F'))
)
data = [trace]
py.iplot(data, filename='styled_candlestick')

----------------------------------------

TITLE: Creating Basic 3D Surface Plot from CSV Data
DESCRIPTION: Creates a 3D surface plot of Mt Bruno elevation data loaded from a CSV file. Uses Plotly's Surface plot type with custom layout settings for size and margins.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

# Read data from a csv
z_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')

data = [
    go.Surface(
        z=z_data.as_matrix()
    )
]
layout = go.Layout(
    title='Mt Bruno Elevation',
    autosize=False,
    width=500,
    height=500,
    margin=dict(
        l=65,
        r=50,
        b=65,
        t=90
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='elevations-3d-surface')

----------------------------------------

TITLE: Creating Color-Scaled 3D Scatter Plot
DESCRIPTION: Demonstrates how to create a 3D scatter plot with color scaling based on z-axis values. Uses the Viridis colorscale and includes custom marker properties.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x, y, z = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 400).transpose()

trace1 = go.Scatter3d(
    x=x,
    y=y,
    z=z,
    mode='markers',
    marker=dict(
        size=12,
        color=z,
        colorscale='Viridis',
        opacity=0.8
    )
)

data = [trace1]
layout = go.Layout(
    margin=dict(
        l=0,
        r=0,
        b=0,
        t=0
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='3d-scatter-colorscale')

----------------------------------------

TITLE: Drawing Rectangles with Plotly
DESCRIPTION: Demonstrates creating filled and unfilled rectangles using Plotly. The rectangles can be positioned relative to the axes and customized with different colors and opacity levels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1.5, 4.5],
    y=[0.75, 0.75],
    text=['Unfilled Rectangle', 'Filled Rectangle'],
    mode='text',
)
data = [trace0]
layout = {
    'xaxis': {
        'range': [0, 7],
        'showgrid': False,
    },
    'yaxis': {
        'range': [0, 3.5]
    },
    'shapes': [
        # unfilled Rectangle
        {
            'type': 'rect',
            'x0': 1,
            'y0': 1,
            'x1': 2,
            'y1': 3,
            'line': {
                'color': 'rgba(128, 0, 128, 1)',
            },
        },
        # filled Rectangle
        {
            'type': 'rect',
            'x0': 3,
            'y0': 1,
            'x1': 6,
            'y1': 2,
            'line': {
                'color': 'rgba(128, 0, 128, 1)',
                'width': 2,
            },
            'fillcolor': 'rgba(128, 0, 128, 0.7)',
        },
    ]
}
fig = {
    'data': data,
    'layout': layout,
}
py.iplot(fig, filename='shapes-rectangle')

----------------------------------------

TITLE: Creating Styled Sankey Energy Flow Diagram
DESCRIPTION: Creates a fully styled Sankey diagram with dark theme showing energy flow forecast, including custom node and link properties loaded from external JSON.

LANGUAGE: python
CODE:
import plotly.plotly as py
import urllib, json

url = 'https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json'
response = urllib.urlopen(url)
data = json.loads(response.read())

data_trace = dict(
    type='sankey',
    width = 1118,
    height = 772,
    domain = dict(
      x =  [0,1],
      y =  [0,1]
    ),
    orientation = "h",
    valueformat = ".0f",
    valuesuffix = "TWh",
    node = dict(
      pad = 15,
      thickness = 15,
      line = dict(
        color = "black",
        width = 0.5
      ),
      label =  data['data'][0]['node']['label']
    ),
    link = dict(
      source =  data['data'][0]['link']['source'],
      target =  data['data'][0]['link']['target'],
      value =  data['data'][0]['link']['value'],
      label =  data['data'][0]['link']['label']
  ))

layout =  dict(
    title = "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
    font = dict(
      size = 10,
      color = 'white'
    ),
    plot_bgcolor = 'black',
    paper_bgcolor = 'black'
)

fig = dict(data=[data_trace], layout=layout)
py.iplot(fig, validate = False)

----------------------------------------

TITLE: Creating Basic Isosurface Plot with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a basic 3D isosurface plot using Plotly. It defines the x, y, z coordinates and values, and sets the minimum and maximum isosurface values.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [go.Isosurface(
    x=[0,0,0,0,1,1,1,1],
    y=[1,0,1,0,1,0,1,0],
    z=[1,1,0,0,1,1,0,0],
    value=[1,2,3,4,5,6,7,8],
    isomin=2,
    isomax=6
)]

py.iplot(data, filename='basic-isosurface-trace')

----------------------------------------

TITLE: Creating a Basic Quiver Plot with Plotly in Python
DESCRIPTION: This code creates a basic quiver plot using Plotly's figure_factory module. It generates a 2D grid of points and calculates vector components using cosine and sine functions.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import numpy as np

x,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))
u = np.cos(x)*y
v = np.sin(x)*y

fig = ff.create_quiver(x, y, u, v)
py.iplot(fig, filename='Quiver Plot Example')

----------------------------------------

TITLE: Creating Multi-Region Stacked Funnel Plot
DESCRIPTION: Shows how to create a stacked funnel chart comparing sales processes across different regions. Includes multiple traces with different orientations and text display options.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly import graph_objs as go

trace1 = go.Funnel(
    name = 'Montreal',
    y = ["Website visit", "Downloads", "Potential customers", "Requested price"], 
    x = [120, 60, 30, 20],
    textinfo = "value+percent initial")

trace2 = go.Funnel(
    name = 'Toronto',
    orientation = "h", 
    y = ["Website visit", "Downloads", "Potential customers", "Requested price", "invoice sent"],
    x = [100, 60, 40, 30, 20],
    textposition = "inside",
    textinfo = "value+percent previous")

trace3 = go.Funnel(
    name = 'Vancouver',
    orientation = "h", 
    y = ["Website visit", "Downloads", "Potential customers", "Requested price", "invoice sent", "Finalized"],
    x = [90, 70, 50, 30, 10, 5],
    textposition = "outside",
    textinfo = "value+percent total")
            
layout = go.Layout(margin = {"l": 200 , "r": 200}, funnelmode = "stack", showlegend = True)

py.iplot(go.Figure([trace1, trace2, trace3], layout), filename = "funnel_stack")

----------------------------------------

TITLE: Normalizing Data by Standard Deviation with Plotly in Python
DESCRIPTION: This snippet demonstrates normalizing data by dividing each point by the standard deviation. It creates histograms of the original and normalized data using Plotly subplots.

LANGUAGE: python
CODE:
data = apple_data['AAPL_y']

data_norm_by_std = [number/scipy.std(data) for number in data]

trace1 = go.Histogram(
    x=data,
    opacity=0.75,
    name='data'
)

trace2 = go.Histogram(
    x=data_norm_by_std,
    opacity=0.75,
    name='normalized by std = ' + str(scipy.std(data)),
)

fig = tools.make_subplots(rows=2, cols=1)

fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 2, 1)

fig['layout'].update(height=600, width=800, title='Normalize by a Constant')
py.iplot(fig, filename='apple-data-normalize-constant')

----------------------------------------

TITLE: Finding the Inverse of a Matrix and Visualizing with Plotly in Python
DESCRIPTION: This code computes the inverse of a 2x2 matrix using NumPy's linear algebra function and visualizes the result using Plotly's annotated heatmap. It defines a matrix, calculates its inverse, and creates a color-coded table representation.

LANGUAGE: python
CODE:
matrix = np.matrix(
    [[1, 4],
     [2, 0]]
)

inverse = np.linalg.inv(matrix)

colorscale = [[0, '#F1FAFB'], [1, '#A0E4F1']]
font=['#000000', '#000000']

table = FF.create_annotated_heatmap(inverse.tolist(), colorscale=colorscale, font_colors=font)
py.iplot(table, filename='inverse')

----------------------------------------

TITLE: Creating Basic Wind Rose Chart with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a basic wind rose chart using Plotly's Python library. It visualizes wind speed distribution in Laurel, NE across different directions and speed ranges.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Barpolar(
    r=[77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],
    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
    name='11-14 m/s',
    marker=dict(
        color='rgb(106,81,163)'
    )
)
trace2 = go.Barpolar(
    r=[57.49999999999999, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.00000000000001],
    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
    name='8-11 m/s',
    marker=dict(
        color='rgb(158,154,200)'
    )
)
trace3 = go.Barpolar(
    r=[40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],
    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
    name='5-8 m/s',
    marker=dict(
        color='rgb(203,201,226)'
    )
)
trace4 = go.Barpolar(
    r=[20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],
    text=['North', 'N-E', 'East', 'S-E', 'South', 'S-W', 'West', 'N-W'],
    name='< 5 m/s',
    marker=dict(
        color='rgb(242,240,247)'
    )
)
data = [trace1, trace2, trace3, trace4]
layout = go.Layout(
    title='Wind Speed Distribution in Laurel, NE',
    font=dict(
        size=16
    ),
    legend=dict(
        font=dict(
            size=16
        )
    ),
    radialaxis=dict(
        ticksuffix='%'
    ),
    orientation=270
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='polar-area-chart')

----------------------------------------

TITLE: Creating a Gantt Chart Indexed by Numeric Variable in Python
DESCRIPTION: Shows how to create a Gantt chart where tasks are indexed by a numeric variable (completion percentage). It uses a custom color scheme and includes a color bar.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [dict(Task="Job A", Start='2009-01-01', Finish='2009-02-28', Complete=10),
      dict(Task="Job B", Start='2008-12-05', Finish='2009-04-15', Complete=60),
      dict(Task="Job C", Start='2009-02-20', Finish='2009-05-30', Complete=95)]

fig = ff.create_gantt(df, colors='Viridis', index_col='Complete', show_colorbar=True)
py.iplot(fig, filename='gantt-numeric-variable', world_readable=True)

----------------------------------------

TITLE: Creating Contour and Scatter Plot for Steepest Descent
DESCRIPTION: Creates a visualization of the method of steepest descent using a contour plot overlaid with a scatter plot. Loads data from a JSON file and configures the plots with custom styling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import json
import six.moves.urllib

response = six.moves.urllib.request.urlopen('https://raw.githubusercontent.com/plotly/datasets/master/steepest.json')
data = json.load(response)

trace1 = go.Contour(
    z=data['contour_z'][0],
    y=data['contour_y'][0],
    x=data['contour_x'][0],
    ncontours=30,
    showscale=False
)
trace2 = go.Scatter(
    x=data['trace_x'],
    y=data['trace_y'],
    mode='markers+lines',
    name='steepest',
    line=dict(
        color='black'
    )
)

data = [trace1, trace2]
py.iplot(data, filename='contour-scatter')

----------------------------------------

TITLE: Creating Asymmetric Error Bars with Constant Offset in Plotly Python
DESCRIPTION: This code snippet shows how to create asymmetric error bars with a constant offset using Plotly. It uses the go.Scatter object and sets the error_y parameter with type='percent', symmetric=False, and different values for upper and lower error percentages.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2, 3, 4],
        y=[2, 1, 3, 4],
        error_y=dict(
            type='percent',
            symmetric=False,
            value=15,
            valueminus=25
        )
    )
]
py.iplot(data, filename='error-bar-asymmetric-constant')

----------------------------------------

TITLE: Creating Ternary Contour Plot with Plotly Python
DESCRIPTION: Creates a ternary contour plot showing relationships between clay, sand and silt percentages. Loads data from a JSON URL, creates traces with different colors, and configures the plot layout with axis settings.

LANGUAGE: python
CODE:
import plotly.plotly as py

import json
import urllib

url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json'
response = urllib.urlopen(url).read()
data = json.loads(response)

colors = ['#8dd3c7','#ffffb3','#bebada',
          '#fb8072','#80b1d3','#fdb462',
          '#b3de69','#fccde5','#d9d9d9',
          '#bc80bd','#ccebc5','#ffed6f'];

# generate a,b and c from JSON data..
traces = []
color_iter = iter(colors)
for i in data.keys():
    trace = dict(text=i,
        type='scatterternary',
        a=[ k['clay'] for k in data[i] ],
        b=[ k['sand'] for k in data[i] ],
        c=[ k['silt'] for k in data[i] ],
        mode='lines',
        line=dict(color='#444'),
        fill='toself',
        fillcolor=color_iter.next()
    )
    traces.append(trace)
    
layout = {
    'title': 'Simple Ternary Contour Plot with Python',
    'ternary': 
        {'sum':100,
         'aaxis':{'title': 'clay', 'ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },
         'baxis':{'title': 'sand', 'ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' },
         'caxis':{'title': 'silt','ticksuffix':'%', 'min': 0.01, 'linewidth':2, 'ticks':'outside' }},
    'showlegend': False          
}

figure = dict(data=traces, layout=layout)
py.iplot(figure, validate=False)

----------------------------------------

TITLE: Creating Basic Streamline Plot
DESCRIPTION: Creates a basic streamline plot using numpy arrays to define vector field data. Uses create_streamline function to generate the visualization with custom arrow scaling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import numpy as np

x = np.linspace(-3, 3, 100)
y = np.linspace(-3, 3, 100)
Y, X = np.meshgrid(x, y)
u = -1 - X**2 + Y
v = 1 + X - Y**2

# Create streamline figure
fig = ff.create_streamline(x, y, u, v, arrow_scale=.1)
py.iplot(fig, filename='Streamline Plot Example')

----------------------------------------

TITLE: Creating Scatter Plot with Custom Size and Margins in Plotly
DESCRIPTION: This code creates a scatter plot using Plotly, demonstrating how to set custom width, height, and margins. It also shows how to change the background colors of the plot and paper.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
        y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
    )
]
layout = go.Layout(
    autosize=False,
    width=500,
    height=500,
    margin=go.layout.Margin(
        l=50,
        r=50,
        b=100,
        t=100,
        pad=4
    ),
    paper_bgcolor='#7f7f7f',
    plot_bgcolor='#c7c7c7'
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='size-margins')

----------------------------------------

TITLE: Styling 2D Histogram Contour Plot in Plotly
DESCRIPTION: This snippet demonstrates advanced styling of a 2D histogram contour plot. It customizes the color scale, contour labels, and hover labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.uniform(-1, 1, size=500)
y = np.random.uniform(-1, 1, size=500)

trace = [go.Histogram2dContour(
        x = x,
        y = y,
        colorscale = 'Jet',
        contours = dict(
            showlabels = True,
            labelfont = dict(
                family = 'Raleway',
                color = 'white'
            )
        ),
        hoverlabel = dict(
            bgcolor = 'white',
            bordercolor = 'black',
            font = dict(
                family = 'Raleway',
                color = 'black'
            )
        )
        
)]

py.iplot(trace, filename = "Histogram2dContour Styled")

----------------------------------------

TITLE: Creating a Simple Annotated Heatmap in Python with Plotly
DESCRIPTION: Demonstrates how to create a basic annotated heatmap using Plotly's figure factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

z = [[.1, .3, .5, .7, .9],  
     [1, .8, .6, .4, .2],
     [.2, 0, .5, .7, .9],  
     [.9, .8, .4, .2, 0],
     [.3, .4, .5, .7, 1]] 

fig = ff.create_annotated_heatmap(z)
py.iplot(fig, filename='annotated_heatmap')

----------------------------------------

TITLE: Integrating Sine Function and Plotting with Plotly in Python
DESCRIPTION: This code snippet demonstrates numerical integration of the sine function between 0 and 2π using NumPy's trapezoid rule. It then creates a Plotly scatter plot of the sine function and adds an annotation with the integration result.

LANGUAGE: python
CODE:
x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='lines',
)

# use numpy's built in trapezoid-rule integration tool
dy = np.trapz(y, x)

annotation = go.Annotation(
    x=4.5,
    y=1.25,
    text='Numerical Integration of sin(x) is approximately %s' % (dy),
    showarrow=False
)

layout = go.Layout(
    annotations=[annotation]
)

trace_data = [trace1]
fig = go.Figure(data=trace_data, layout=layout)

py.iplot(fig, filename='1d-numerical-integration')

----------------------------------------

TITLE: Creating Basic 3D Scatter Plot with Plotly
DESCRIPTION: Creates a 3D scatter plot with two sets of randomly generated points using numpy and Plotly. The plot includes custom marker styling and layout configuration.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x, y, z = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 200).transpose()
trace1 = go.Scatter3d(
    x=x,
    y=y,
    z=z,
    mode='markers',
    marker=dict(
        size=12,
        line=dict(
            color='rgba(217, 217, 217, 0.14)',
            width=0.5
        ),
        opacity=0.8
    )
)

x2, y2, z2 = np.random.multivariate_normal(np.array([0,0,0]), np.eye(3), 200).transpose()
trace2 = go.Scatter3d(
    x=x2,
    y=y2,
    z=z2,
    mode='markers',
    marker=dict(
        color='rgb(127, 127, 127)',
        size=12,
        symbol='circle',
        line=dict(
            color='rgb(204, 204, 204)',
            width=1
        ),
        opacity=0.9
    )
)
data = [trace1, trace2]
layout = go.Layout(
    margin=dict(
        l=0,
        r=0,
        b=0,
        t=0
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='simple-3d-scatter')

----------------------------------------

TITLE: Creating a Simple Gantt Chart in Python with Plotly
DESCRIPTION: Demonstrates how to create a basic Gantt chart using Plotly's figure_factory module. It defines tasks with start and end dates, then generates and displays the chart.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [dict(Task="Job A", Start='2009-01-01', Finish='2009-02-28'),
      dict(Task="Job B", Start='2009-03-05', Finish='2009-04-15'),
      dict(Task="Job C", Start='2009-02-20', Finish='2009-05-30')]

fig = ff.create_gantt(df)
py.iplot(fig, filename='gantt-simple-gantt-chart', world_readable=True)

----------------------------------------

TITLE: Creating Bar Chart with Automatic Margin Adjustment in Plotly
DESCRIPTION: This example demonstrates how to create a bar chart with automatically adjusted margins using Plotly. It uses the 'automargin' feature to prevent label overlap and customizes the y-axis with long labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Bar(
        x=['Apples', 'Oranges', 'Watermelon', 'Pears'],
        y=[3, 2, 1, 4]
    )
]
layout = go.Layout(
    autosize=False,
    width=500,
    height=500,
    yaxis=go.layout.YAxis(
        title='Y-axis Title',
        ticktext=['Very long label','long label','3','label'],
        tickvals=[1, 2, 3, 4],
        tickmode='array',
        automargin=True,
        titlefont=dict(size=30),
    ),
    paper_bgcolor='#7f7f7f',
    plot_bgcolor='#c7c7c7'
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='automargin')

----------------------------------------

TITLE: Creating Custom Colorbar in Plotly
DESCRIPTION: This snippet shows how to create a custom colorbar for a heatmap using Plotly. It loads data from a JSON file, applies a custom colorscale, and customizes the colorbar with specific title, ticks, and labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import six.moves.urllib
import json

response = six.moves.urllib.request.urlopen('https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json')
dataset = json.load(response)

data = [
    go.Heatmap(
        z=dataset['z'],
        colorscale=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'], [0.2222222222222222, 'rgb(244,109,67)'],
        [0.3333333333333333, 'rgb(253,174,97)'], [0.4444444444444444, 'rgb(254,224,144)'], [0.5555555555555556, 'rgb(224,243,248)'],
        [0.6666666666666666, 'rgb(171,217,233)'],[0.7777777777777778, 'rgb(116,173,209)'], [0.8888888888888888, 'rgb(69,117,180)'],
        [1.0, 'rgb(49,54,149)']],
        colorbar = dict(
            title = 'Surface Heat',
            titleside = 'top',
            tickmode = 'array',
            tickvals = [2,50,100],
            ticktext = ['Hot','Mild','Cool'],
            ticks = 'outside'
        )
    )
]

py.iplot(data, filename='custom-colorscale-colorbar')

----------------------------------------

TITLE: Drawing Vertical and Horizontal Lines in Plotly
DESCRIPTION: Creates a plot with vertical, horizontal and diagonal lines using Plotly's shape drawing. The lines are positioned relative to the axes and include different styles like solid, dashed and dotted.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[2, 3.5, 6],
    y=[1, 1.5, 1],
    text=['Vertical Line', 'Horizontal Dashed Line', 'Diagonal dotted Line'],
    mode='text',
)
data = [trace0]
layout = {
    'xaxis': {
        'range': [0, 7]
    },
    'yaxis': {
        'range': [0, 2.5]
    },
    'shapes': [
        # Line Vertical
        {
            'type': 'line',
            'x0': 1,
            'y0': 0,
            'x1': 1,
            'y1': 2,
            'line': {
                'color': 'rgb(55, 128, 191)',
                'width': 3,
            },
        },
        # Line Horizontal
        {
            'type': 'line',
            'x0': 2,
            'y0': 2,
            'x1': 5,
            'y1': 2,
            'line': {
                'color': 'rgb(50, 171, 96)',
                'width': 4,
                'dash': 'dashdot',
            },
        },
        # Line Diagonal
        {
            'type': 'line',
            'x0': 4,
            'y0': 0,
            'x1': 6,
            'y1': 2,
            'line': {
                'color': 'rgb(128, 0, 128)',
                'width': 4,
                'dash': 'dot',
            },
        },
    ]
}

fig = {
    'data': data,
    'layout': layout,
}

py.iplot(fig, filename='shapes-lines')

----------------------------------------

TITLE: Customizing Color Bar for Contour Plot in Plotly
DESCRIPTION: This code shows how to customize the color bar of a contour plot using Plotly. It demonstrates setting the color bar title, position, and font properties.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorbar=dict(
            title='Color bar title',
            titleside='right',
            titlefont=dict(
                size=14,
                family='Arial, sans-serif',
            ),
        )
    )
]
py.iplot(data)

----------------------------------------

TITLE: Creating Basic Ribbon Plot with Spectral Data in Python
DESCRIPTION: Creates a ribbon plot using spectral data loaded from a CSV file. The code processes wavelength data and creates multiple surface traces with color gradients to form a ribbon visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import urllib
import numpy as np

url = "https://raw.githubusercontent.com/plotly/datasets/master/spectral.csv"
f = urllib.urlopen(url)
spectra=np.loadtxt(f, delimiter=',')

traces = []
y_raw = spectra[:, 0] # wavelength
sample_size = spectra.shape[1]-1 
for i in range(1, sample_size):
    z_raw = spectra[:, i]
    x = []
    y = []
    z = []
    ci = int(255/sample_size*i) # ci = "color index"
    for j in range(0, len(z_raw)):
        z.append([z_raw[j], z_raw[j]])
        y.append([y_raw[j], y_raw[j]])
        x.append([i*2, i*2+1])
    traces.append(dict(
        z=z,
        x=x,
        y=y,
        colorscale=[ [i, 'rgb(%d,%d,255)'%(ci, ci)] for i in np.arange(0,1.1,0.1) ],
        showscale=False,
        type='surface',
    ))

fig = { 'data':traces, 'layout':{'title':'Ribbon Plot'} }
py.iplot(fig, filename='ribbon-plot-python')

----------------------------------------

TITLE: Creating Plotly Graph with LaTeX Labels
DESCRIPTION: Creates a scatter plot with LaTeX-formatted labels for graph titles and legend entries. Demonstrates mathematical notation and special characters in axis labels and data series names.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 4, 9, 16],
    name=r'$\alpha_{1c} = 352 \pm 11 \text{ km s}^{-1}$'
)
trace2 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[0.5, 2, 4.5, 8],
    name=r'$\beta_{1c} = 25 \pm 11 \text{ km s}^{-1}$'
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        title=r'$\sqrt{(n_\text{c}(t|{T_\text{early}}))}$'
    ),
    yaxis=dict(
        title=r'$d, r \text{ (solar radius)}$'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='latex')

----------------------------------------

TITLE: Creating a Detailed Daily Schedule Gantt Chart in Python
DESCRIPTION: Shows how to create a detailed Gantt chart representing a daily schedule. It uses precise time intervals and custom colors for different activities.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [
    dict(Task='Morning Sleep', Start='2016-01-01', Finish='2016-01-01 6:00:00', Resource='Sleep'),
    dict(Task='Breakfast', Start='2016-01-01 7:00:00', Finish='2016-01-01 7:30:00', Resource='Food'),
    dict(Task='Work', Start='2016-01-01 9:00:00', Finish='2016-01-01 11:25:00', Resource='Brain'),
    dict(Task='Break', Start='2016-01-01 11:30:00', Finish='2016-01-01 12:00:00', Resource='Rest'),
    dict(Task='Lunch', Start='2016-01-01 12:00:00', Finish='2016-01-01 13:00:00', Resource='Food'),
    dict(Task='Work', Start='2016-01-01 13:00:00', Finish='2016-01-01 17:00:00', Resource='Brain'),
    dict(Task='Exercise', Start='2016-01-01 17:30:00', Finish='2016-01-01 18:30:00', Resource='Cardio'), 
    dict(Task='Post Workout Rest', Start='2016-01-01 18:30:00', Finish='2016-01-01 19:00:00', Resource='Rest'),
    dict(Task='Dinner', Start='2016-01-01 19:00:00', Finish='2016-01-01 20:00:00', Resource='Food'),
    dict(Task='Evening Sleep', Start='2016-01-01 21:00:00', Finish='2016-01-01 23:59:00', Resource='Sleep')
]

colors = dict(Cardio = 'rgb(46, 137, 205)',
              Food = 'rgb(114, 44, 121)',
              Sleep = 'rgb(198, 47, 105)',
              Brain = 'rgb(58, 149, 136)',
              Rest = 'rgb(107, 127, 135)')

fig = ff.create_gantt(df, colors=colors, index_col='Resource', title='Daily Schedule',
                      show_colorbar=True, bar_width=0.8, showgrid_x=True, showgrid_y=True)
py.iplot(fig, filename='gantt-hours-minutes', world_readable=True)

----------------------------------------

TITLE: Implementing Triangular Moving Average Smoothing in Python
DESCRIPTION: This function implements the Triangular Moving Average smoothing algorithm. It takes the data, degree of smoothing, and an optional parameter to drop values as inputs.

LANGUAGE: python
CODE:
def smoothTriangle(data, degree, dropVals=False):
    triangle=np.array(list(range(degree)) + [degree] + list(range(degree)[::-1])) + 1
    smoothed=[]

    for i in range(degree, len(data) - degree * 2):
        point=data[i:i + len(triangle)] * triangle
        smoothed.append(sum(point)/sum(triangle))
    if dropVals:
        return smoothed
    smoothed=[smoothed[0]]*int(degree + degree/2) + smoothed
    while len(smoothed) < len(data):
        smoothed.append(smoothed[-1])
    return smoothed

----------------------------------------

TITLE: Plotting 1M Points with WebGL in Plotly Python
DESCRIPTION: Demonstrates WebGL's capability to handle 1 million data points in a scatter plot. Uses numpy for random data generation and custom marker styling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

N = 1000000
trace = go.Scattergl(
    x = np.random.randn(N),
    y = np.random.randn(N),
    mode = 'markers',
    marker = dict(
        color = 'rgb(152, 0, 0)',
        line = dict(
            width = 1,
            color = 'rgb(0,0,0)')
    )
)
data = [trace]
py.iplot(data, filename='WebGLmillion')

----------------------------------------

TITLE: Creating West Africa Ebola Cases Bubble Map
DESCRIPTION: Creates an interactive visualization showing Ebola cases in West Africa during 2014. The map includes both a main view and an inset map, using different colors to represent different months and bubble sizes to show case numbers.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
df.head()

cases = []
colors = ['rgb(239,243,255)','rgb(189,215,231)','rgb(107,174,214)','rgb(33,113,181)']
months = {6:'June',7:'July',8:'Aug',9:'Sept'}

for i in range(6,10)[::-1]:
    cases.append(go.Scattergeo(
            lon = df[ df['Month'] == i ]['Lon'],
            lat = df[ df['Month'] == i ]['Lat'],
            text = df[ df['Month'] == i ]['Value'],
            name = months[i],
            marker = go.scattergeo.Marker(
                size = df[ df['Month'] == i ]['Value']/50,
                color = colors[i-6],
                line = go.scattergeo.marker.Line(width = 0)
            )
        )
    )

cases[0]['text'] = df[ df['Month'] == 9 ]['Value'].map('{:.0f}'.format).astype(str)+' '+\
    df[ df['Month'] == 9 ]['Country']
cases[0]['mode'] = 'markers+text'
cases[0]['textposition'] = 'bottom center'

# Additional code for layout and visualization...

----------------------------------------

TITLE: Custom Binning for Histograms with Plotly in Python
DESCRIPTION: This code shows how to implement custom binning for histograms using Plotly. It demonstrates various ways to set bin sizes and ranges, including using 'nbinsx' and 'xbins' parameters.

LANGUAGE: python
CODE:
from plotly import tools
import plotly.plotly as py
import plotly.graph_objs as go

x = ['1970-01-01', '1970-01-01', '1970-02-01', '1970-04-01', '1970-01-02', '1972-01-31', '1970-02-13', '1971-04-19']


trace0 = go.Histogram(
    x=x,
    nbinsx = 4,         
  )
trace1 = go.Histogram(
    x=x,
    nbinsx = 8,   
  )
trace2 = go.Histogram(
    x=x,
    nbinsx = 10,     
  )
trace3 = go.Histogram(
    x=x,
    xbins=dict(
        start='1969-11-15',
        end='1972-03-31',
        size= 'M18'),
    autobinx = False
)
trace4 = go.Histogram(
    x=x,
    xbins=dict(
        start='1969-11-15',
        end='1972-03-31',
        size= 'M4'),
    autobinx = False
)
trace5 = go.Histogram(
    x=x,
    xbins=dict(
        start='1969-11-15',
        end='1972-03-31',
        size= 'M2'),
    autobinx = False
)
  
fig = tools.make_subplots(rows=3, cols=2)
fig.append_trace(trace0, 1, 1)
fig.append_trace(trace1, 1, 2)
fig.append_trace(trace2, 2, 1)
fig.append_trace(trace3, 2, 2)
fig.append_trace(trace4, 3, 1)
fig.append_trace(trace5, 3, 2)

py.iplot(fig, filename='custom binning')

----------------------------------------

TITLE: Implementing Low-Pass FFT Filter
DESCRIPTION: Creates a low-pass filter to remove higher frequencies from the signal using NumPy operations and visualizes results with Plotly.

LANGUAGE: python
CODE:
fc = 0.1
b = 0.08
N = int(np.ceil((4 / b)))
if not N % 2: N += 1
n = np.arange(N)
 
sinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.))
window = 0.42 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) + 0.08 * np.cos(4 * np.pi * n / (N - 1))
sinc_func = sinc_func * window
sinc_func = sinc_func / np.sum(sinc_func)

s = list(data['10 Min Std Dev'])
new_signal = np.convolve(s, sinc_func)

----------------------------------------

TITLE: Creating a Grouped Scatter Plot with Plotly in Python
DESCRIPTION: This code creates a scatter plot with grouped data points using Plotly. It demonstrates how to initialize Plotly for offline use, define data points, and apply group-based styling to the markers.

LANGUAGE: python
CODE:
import plotly.offline as off

off.init_notebook_mode(connected=True)

subject = ['Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly','Moe','Larry','Curly']
score = [1,6,2,8,2,9,4,5,1,5,2,8]

data = [dict(
  type = 'scatter',
  x = subject,
  y = score,
  mode = 'markers',
  transforms = [dict(
    type = 'groupby',
    groups = subject,
    styles = [
        dict(target = 'Moe', value = dict(marker = dict(color = 'blue'))),
        dict(target = 'Larry', value = dict(marker = dict(color = 'red'))),
        dict(target = 'Curly', value = dict(marker = dict(color = 'black')))
    ]
  )]
)]

off.iplot({'data': data}, validate=False)

----------------------------------------

TITLE: Creating WebGL Scatter Plot with 75,000 Points in Plotly
DESCRIPTION: This code snippet demonstrates how to create a WebGL-rendered scatter plot with 75,000 random points using Plotly's Scattergl function. It utilizes numpy for generating random data and sets up the plot with custom marker properties.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

N = 75000
trace = go.Scattergl(
    x = np.random.randn(N),
    y = np.random.randn(N),
    mode = 'markers',
    marker = dict(
        line = dict(
            width = 1, 
            color = '#404040')
    )
)
data = [trace]
layout = dict(title = 'WEBGL')
fig = dict(data=data, layout=layout)
py.iplot(data, filename='webgl75')

----------------------------------------

TITLE: Creating a Basic Scatter Plot with Plotly in Python
DESCRIPTION: Demonstrates how to create a simple scatter plot using Plotly's graph objects. Includes setting up data, layout, and creating a figure object.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(x=[1,2,3], y=[4,5,6], marker={'color': 'red', 'symbol': 104, 'size': 10}, 
                    mode="markers+lines",  text=["one","two","three"], name='1st Trace')
                                               
data=go.Data([trace1])
layout=go.Layout(title="First Plot", xaxis={'title':'x1'}, yaxis={'title':'x2'})
figure=go.Figure(data=data,layout=layout)
py.iplot(figure, filename='pyguide_1')

----------------------------------------

TITLE: Defining the Update Function with Interact Decorator
DESCRIPTION: Defines an update function decorated with @interact that takes parameters for frequency, phase, and color. This function updates the scatter plot data and appearance based on the input parameters.

LANGUAGE: python
CODE:
xs=np.linspace(0, 6, 100)

@interact(a=(1.0, 4.0, 0.01), b=(0, 10.0, 0.01), color=['red', 'green', 'blue'])
def update(a=3.6, b=4.3, color='blue'):
    with fig.batch_update():
        scatt.x=xs
        scatt.y=np.sin(a*xs-b)
        scatt.line.color=color

----------------------------------------

TITLE: Visualizing igraph Network with Plotly
DESCRIPTION: Creates an interactive network visualization using Plotly. Sets up scatter plots for edges and nodes, configures layout parameters and styling for the graph visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *

Xn=[layt[k][0] for k in range(N)]
Yn=[layt[k][1] for k in range(N)]
Xe=[]
Ye=[]
for e in E:
    Xe+=[layt[e[0]][0],layt[e[1]][0], None]
    Ye+=[layt[e[0]][1],layt[e[1]][1], None] 
    
trace1=Scatter(x=Xe,
               y=Ye,
               mode='lines',
               line= dict(color='rgb(210,210,210)', width=1),
               hoverinfo='none'
               )
trace2=Scatter(x=Xn,
               y=Yn,
               mode='markers',
               name='ntw',
               marker=dict(symbol='circle-dot',
                                        size=5,
                                        color='#6959CD',
                                        line=dict(color='rgb(50,50,50)', width=0.5)
                                        ),
               text=labels,
               hoverinfo='text'
               )

axis=dict(showline=False,
          zeroline=False,
          showgrid=False,
          showticklabels=False,
          title='' 
          )

width=800
height=800
layout=Layout(title= "Coauthorship network of scientists working on network theory and experiment"+\
              "<br> Data source: <a href='https://networkdata.ics.uci.edu/data.php?id=11'> [1]</a>",  
    font= dict(size=12),
    showlegend=False,
    autosize=False,
    width=width,
    height=height,
    xaxis=layout.XAxis(axis),
    yaxis=layout.YAxis(axis),          
    margin=layout.Margin(
        l=40,
        r=40,
        b=85,
        t=100,
    ),
    hovermode='closest',
    annotations=[
           dict(
           showarrow=False, 
            text='This igraph.Graph has the Kamada-Kawai layout',  
            xref='paper',     
            yref='paper',     
            x=0,  
            y=-0.1,  
            xanchor='left',   
            yanchor='bottom',  
            font=dict(
            size=14 
            )     
            )
        ]          
    )

data=[trace1, trace2]
fig=Figure(data=data, layout=layout)
py.iplot(fig, filename='Coautorship-network-igraph')

----------------------------------------

TITLE: Creating Styled Scatter Plot with Plotly
DESCRIPTION: Creates a scatter plot with two traces, custom styling for axes titles, and plot layout configuration. Demonstrates comprehensive plot customization including font settings and title positioning.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    name='Name of Trace 1'
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[1, 0, 3, 2, 5, 4, 7, 6, 8],
    name='Name of Trace 2'
)
data = [trace1, trace2]
layout = go.Layout(
    title=go.layout.Title(
        text='Plot Title',
        xref='paper',
        x=0
    ),
    xaxis=go.layout.XAxis(
        title=go.layout.xaxis.Title(
            text='x Axis',
            font=dict(
                family='Courier New, monospace',
                size=18,
                color='#7f7f7f'
            )
        )
    ),
    yaxis=go.layout.YAxis(
        title=go.layout.yaxis.Title(
            text='y Axis',
            font=dict(
                family='Courier New, monospace',
                size=18,
                color='#7f7f7f'
            )
        )
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='styling-names')

----------------------------------------

TITLE: Creating a Gantt Chart Indexed by String Variable in Python
DESCRIPTION: Demonstrates creating a Gantt chart indexed by a string variable (Resource). It uses custom colors for each resource and reverses the color order.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [dict(Task="Job A", Start='2009-01-01', Finish='2009-02-01', Resource='Apple'),
      dict(Task="Job B", Start='2009-03-05', Finish='2009-04-15', Resource='Grape'),
      dict(Task="Job C", Start='2009-04-20', Finish='2009-09-30', Resource='Banana')]

colors = ['#7a0504', (0.2, 0.7, 0.3), 'rgb(210, 60, 180)']

fig = ff.create_gantt(df, colors=colors, index_col='Resource', reverse_colors=True, show_colorbar=True)
py.iplot(fig, filename='gantt-string-variable', world_readable=True)

----------------------------------------

TITLE: Using Tickformatstops for Custom Formatting at Different Zoom Levels in Plotly
DESCRIPTION: This code demonstrates how to use tickformatstops to customize tick formatting for different zoom levels in a Plotly time series plot. It uses financial data for Apple stock prices.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

trace0 = go.Scatter(
    x = df['Date'],
    y = df['mavg']
)

data = [trace0]

layout = go.Layout(
    xaxis = go.layout.XAxis(
        tickformatstops = [
            go.layout.xaxis.Tickformatstop(
                dtickrange=[None, 1000],
                value="%H:%M:%S.%L ms"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=[1000, 60000],
                value="%H:%M:%S s"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=[60000, 3600000],
                value="%H:%M m"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=[3600000, 86400000],
                value="%H:%M h"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=[86400000, 604800000],
                value="%e. %b d"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=[604800000, "M1"],
                value="%e. %b w"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=["M1", "M12"],
                value="%b '%y M"
              ),
            go.layout.xaxis.Tickformatstop(
                dtickrange=["M12", None],
                value="%Y Y"
              )
        ]
    )
)

fig = go.Figure(
    data = data,
    layout = layout
)

py.iplot(fig, filename='tickformatstops')

----------------------------------------

TITLE: Dendrogram with Color Threshold
DESCRIPTION: Creates a dendrogram with a color threshold value of 1.5 to control cluster colorization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import numpy as np

X = np.random.rand(15, 15)
dendro = ff.create_dendrogram(X, color_threshold=1.5)
dendro['layout'].update({'width':800, 'height':500})
py.iplot(dendro, filename='simple_dendrogram_with_color_threshold')

----------------------------------------

TITLE: Creating Linear Fit Plot with Plotly in Python
DESCRIPTION: This code creates a linear fit plot using Plotly. It generates data points, calculates the linear regression, and creates a scatter plot with the original data and the fit line. The plot includes annotations and custom styling.

LANGUAGE: python
CODE:
# Learn about API authentication here: https://plotly.com/python/getting-started
# Find your api_key here: https://plotly.com/settings/api

import plotly.plotly as py
import plotly.graph_objs as go

# Scientific libraries
from numpy import arange,array,ones
from scipy import stats


xi = arange(0,9)
A = array([ xi, ones(9)])

# (Almost) linear sequence
y = [19, 20, 20.5, 21.5, 22, 23, 23, 25.5, 24]

# Generated linear fit
slope, intercept, r_value, p_value, std_err = stats.linregress(xi,y)
line = slope*xi+intercept

# Creating the dataset, and generating the plot
trace1 = go.Scatter(
                  x=xi, 
                  y=y, 
                  mode='markers',
                  marker=go.Marker(color='rgb(255, 127, 14)'),
                  name='Data'
                  )

trace2 = go.Scatter(
                  x=xi, 
                  y=line, 
                  mode='lines',
                  marker=go.Marker(color='rgb(31, 119, 180)'),
                  name='Fit'
                  )

annotation = go.Annotation(
                  x=3.5,
                  y=23.5,
                  text='$R^2 = 0.9551,\\Y = 0.716X + 19.18$',
                  showarrow=False,
                  font=go.Font(size=16)
                  )
layout = go.Layout(
                title='Linear Fit in Python',
                plot_bgcolor='rgb(229, 229, 229)',
                  xaxis=go.XAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),
                  yaxis=go.YAxis(zerolinecolor='rgb(255,255,255)', gridcolor='rgb(255,255,255)'),
                  annotations=[annotation]
                )

data = [trace1, trace2]
fig = go.Figure(data=data, layout=layout)

py.plot(fig, filename='Linear-Fit-in-python')

----------------------------------------

TITLE: Setting up Interactive Plotly Graph with IPython Widgets
DESCRIPTION: This code snippet sets up an interactive Plotly graph using IPython widgets. It loads data from a CSV file, creates a text input widget for borough selection, and defines functions to update the graph based on user input.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

from IPython.html import widgets 
from IPython.display import display, clear_output
from plotly.widgets import GraphWidget

df = pd.read_csv('https://raw.githubusercontent.com/jvns/pandas-cookbook/master/data/311-service-requests.csv')

def isTextValid(text):
    if text_input.value.upper() in borough_list:
        valid.value=True
        borough_df = df[df['Borough'] == text_input.value.upper()]
        
        temp = borough_df.groupby([df['Agency']]).count()['Agency']
        g2.plot({'data': [{'x': temp.index, 'y': temp }]})
        g2.relayout({'title': 'Complaints Dealt by Agencies in {}'.format(text_input.value.upper())})
        message.value = ""
    else: 
        valid.value=False
        message.value = "<font color=\"red\">Can't find that borough</font>"
    
g2 = GraphWidget('https://plotly.com/~kevintest/1178/')

button = widgets.Button(description="Submit")

text_input = widgets.Text(
    description='Borough:',
    value='MANHATTAN',
)

message = widgets.HTML(
    value="",
)

valid = widgets.Valid(
    value=True,
)

button.on_click(isTextValid)

container = widgets.HBox(children=[text_input, button, valid, message])
display(container)
display(g2)

----------------------------------------

TITLE: Creating 2D Histogram of Bivariate Normal Distribution with Plotly
DESCRIPTION: This snippet generates a 2D histogram from a bivariate normal distribution using Plotly. It demonstrates basic usage of the Histogram2d object.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

x = np.random.randn(500)
y = np.random.randn(500)+1

data = [
    go.Histogram2d(
        x=x,
        y=y
    )
]
py.iplot(data)

----------------------------------------

TITLE: Creating Meter Chart for Gauge in Python with Plotly
DESCRIPTION: This code snippet creates the meter chart component of the gauge using Plotly. It defines a pie chart with 6 sections, custom colors, and specific styling to form the semi-circular meter overlay.

LANGUAGE: python
CODE:
meter_chart = {
    "values": [50, 10, 10, 10, 10, 10],
    "labels": ["Log Level", "Debug", "Info", "Warn", "Error", "Fatal"],
    "marker": {
        'colors': [
            'rgb(255, 255, 255)',
            'rgb(232,226,202)',
            'rgb(226,210,172)',
            'rgb(223,189,139)',
            'rgb(223,162,103)',
            'rgb(226,126,64)'
        ]
    },
    "domain": {"x": [0, 0.48]},
    "name": "Gauge",
    "hole": .3,
    "type": "pie",
    "direction": "clockwise",
    "rotation": 90,
    "showlegend": False,
    "textinfo": "label",
    "textposition": "inside",
    "hoverinfo": "none"
}

----------------------------------------

TITLE: Creating North American Precipitation Map with Plotly in Python
DESCRIPTION: This code creates a scatter plot on a North American map showing precipitation data. It uses Pandas to read data from a CSV file and Plotly to create an interactive map with color-coded markers representing precipitation levels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv')

scl = [0,"rgb(150,0,90)"],[0.125,"rgb(0, 0, 200)"],[0.25,"rgb(0, 25, 255)"],\
[0.375,"rgb(0, 152, 255)"],[0.5,"rgb(44, 255, 150)"],[0.625,"rgb(151, 255, 0)"],\
[0.75,"rgb(255, 234, 0)"],[0.875,"rgb(255, 111, 0)"],[1,"rgb(255, 0, 0)"]

data = [go.Scattergeo(
    lat = df['Lat'],
    lon = df['Lon'],
    text = df['Globvalue'].astype(str) + ' inches',
    marker = dict(
        color = df['Globvalue'],
        colorscale = scl,
        reversescale = True,
        opacity = 0.7,
        size = 2,        
        colorbar = dict(
            thickness = 10,
            titleside = "right",
            outlinecolor = "rgba(68, 68, 68, 0)",
            ticks = "outside",
            ticklen = 3,
            showticksuffix = "last",
            ticksuffix = " inches",
            dtick = 0.1
        )                
    )
)]

layout = dict(
    geo = dict(
        scope = 'north america',
        showland = True,
        landcolor = "rgb(212, 212, 212)",
        subunitcolor = "rgb(255, 255, 255)",
        countrycolor = "rgb(255, 255, 255)",
        showlakes = True,
        lakecolor = "rgb(255, 255, 255)",
        showsubunits = True,
        showcountries = True,
        resolution = 50,
        projection = dict(
            type = 'conic conformal',
            rotation = dict(
                lon = -100
            )
        ),
        lonaxis = dict(
            showgrid = True,
            gridwidth = 0.5,
            range= [ -140.0, -55.0 ],
            dtick = 5
        ),
        lataxis = dict (
            showgrid = True,
            gridwidth = 0.5,
            range= [ 20.0, 60.0 ],
            dtick = 5
        )
    ),
    title = 'US Precipitation 06-30-2015<br>Source: <a href="http://water.weather.gov/precip/">NOAA</a>',
)

fig = go.Figure(data=data, layout=layout )
py.iplot(fig, filename='precipitation')

----------------------------------------

TITLE: Creating 3D Mesh Tetrahedron
DESCRIPTION: Creates a tetrahedron mesh with custom coloring using a colorscale and intensity values. Includes vertex indices for faces and colorbar configuration.

LANGUAGE: python
CODE:
data = [
    go.Mesh3d(
        x = [0, 1, 2, 0],
        y = [0, 0, 1, 2],
        z = [0, 2, 0, 1],
        colorbar = go.ColorBar(
            title='z'
        ),
        colorscale = [[0, 'rgb(255, 0, 0)'], 
                      [0.5, 'rgb(0, 255, 0)'], 
                      [1, 'rgb(0, 0, 255)']],
        intensity = [0, 0.33, 0.66, 1],
        i = [0, 0, 0, 1],
        j = [1, 2, 3, 2],
        k = [2, 3, 1, 3],
        name = 'y',
        showscale = True
    )
]
layout = go.Layout(
    xaxis=go.XAxis(
        title='x'
    ),
    yaxis=go.YAxis(
        title='y'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='3d-mesh-tetrahedron-python')

----------------------------------------

TITLE: Creating Plotly Heatmap
DESCRIPTION: Generate an interactive heatmap visualization of user preferences by state using Plotly.

LANGUAGE: python
CODE:
data = [
        go.Heatmap(
            z = df.drop('state', axis=1).values,
            x = df.drop('state', axis=1).columns,
            y = df.state,
            colorscale = 'Hot'
        )
    ]
layout = go.Layout(title="State and Music Tastes", yaxis=dict(autotick=False, dtick=1))
py.iplot(Figure(data=data, layout=layout), filename='redshift/state and music taste heatmap', height=1000)

----------------------------------------

TITLE: Creating a 3D Bubble Chart Sized by Variable in Python with Plotly
DESCRIPTION: This code creates a 3D bubble chart of planets, with bubble size based on planet diameter. It visualizes the planets' distance from the sun, density, and gravity.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']
planet_colors = ['rgb(135, 135, 125)', 'rgb(210, 50, 0)', 'rgb(50, 90, 255)',
                 'rgb(178, 0, 0)', 'rgb(235, 235, 210)', 'rgb(235, 205, 130)',
                 'rgb(55, 255, 217)', 'rgb(38, 0, 171)', 'rgb(255, 255, 255)']
distance_from_sun = [57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1, 5906.4]
density = [5427, 5243, 5514, 3933, 1326, 687, 1271, 1638, 2095]
gravity = [3.7, 8.9, 9.8, 3.7, 23.1, 9.0, 8.7, 11.0, 0.7]
planet_diameter = [4879, 12104, 12756, 6792, 142984, 120536, 51118, 49528, 2370]

# Create trace, sizing bubbles by planet diameter
trace1 = go.Scatter3d(
    x = distance_from_sun,
    y = density,
    z = gravity,
    text = planets,
    mode = 'markers',
    marker = dict(
        sizemode = 'diameter',
        sizeref = 750, # info on sizeref: https://plotly.com/python/reference/#scatter-marker-sizeref
        size = planet_diameter,
        color = planet_colors,
        )  
)
data=[trace1]

layout=go.Layout(width=800, height=800, title = 'Planets!',
              scene = dict(xaxis=dict(title='Distance from Sun',
                                      titlefont=dict(color='Orange')),
                            yaxis=dict(title='Density',
                                       titlefont=dict(color='rgb(220, 220, 220)')),
                            zaxis=dict(title='Gravity',
                                       titlefont=dict(color='rgb(220, 220, 220)')),
                            bgcolor = 'rgb(20, 24, 54)'
                           )
             )

fig=go.Figure(data=data, layout=layout)
py.iplot(fig, filename='solar_system_planet_size')

----------------------------------------

TITLE: Customizing Image Export Settings in Plotly.js
DESCRIPTION: This snippet demonstrates how to customize the export settings for a Plotly graph image. It shows how to specify the format, height, and width of the exported image using the Plotly.toImage() function.

LANGUAGE: javascript
CODE:
Plotly.toImage(
gd,{
  format:'jpeg',
  height:desired_height,
  width:desired_width,
});

----------------------------------------

TITLE: Creating a Table with LaTeX Equations
DESCRIPTION: Shows how to include LaTeX equations in a table using Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['Name', 'Equation'],
               ['Pythagorean Theorem', '$a^{2}+b^{2}=c^{2}$'],
               ['Euler\'s Formula', '$F-E+V=2$'],
               ['The Origin of Complex Numbers', '$i^{2}=-1$'],
               ['Einstein\'s Theory of Relativity', '$E=m c^{2}$']]

table = ff.create_table(data_matrix)
py.iplot(table, filename='latex_table')

----------------------------------------

TITLE: Implementing Continuous Data Streaming to Plotly in Python
DESCRIPTION: This snippet demonstrates how to continuously stream random data to both the pie chart and bar chart in the Plotly figure. It uses a while loop to generate and send new data every 0.8 seconds.

LANGUAGE: python
CODE:
s_1.open()
s_2.open()

import time
import datetime
import numpy as np

while True:
    nums = np.random.random_integers(0,10, size=(3))
    s_1.write(dict(labels=['one', 'two', 'three'], values=nums, type='pie'))
    s_2.write(dict(x=['one', 'two', 'three'], y=nums, type='bar', marker=dict(color=["blue", "orange", "green"])))
    time.sleep(0.8)
s_1.close()
s_2.close()

----------------------------------------

TITLE: Creating a Parallel Categories Diagram with Counts in Plotly
DESCRIPTION: Shows how to create a parallel categories diagram with pre-specified counts for each combination of attributes. This is useful when frequency data is already available.

LANGUAGE: python
CODE:
parcats = go.Parcats(
    dimensions=[
        {'label': 'Hair',
         'values': ['Black', 'Brown', 'Brown', 'Brown', 'Red']},
        {'label': 'Eye',
         'values': ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values': ['Female', 'Male', 'Female', 'Male', 'Male']}],
    counts=[6, 10, 40, 23, 7]
)

iplot([parcats])

----------------------------------------

TITLE: Customized Bubble Chart with Color and Opacity
DESCRIPTION: Creates a bubble chart with custom colors, opacity levels, and sizes for each marker.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[10, 11, 12, 13],
    mode='markers',
    marker=dict(
        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',
               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],
        opacity=[1, 0.8, 0.6, 0.4],
        size=[40, 60, 80, 100],
    )
)

data = [trace0]
py.iplot(data, filename='bubblechart-color')

----------------------------------------

TITLE: Setting Up Custom Styling for Jupyter Notebook
DESCRIPTION: This code sets up custom styling for the Jupyter notebook by adding custom fonts and CSS. It also installs and uses a publisher package for formatting and publishing the notebook content.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'sizing.ipynb', 'python/setting-graph-size/', 'Setting Graph Size',
    'How to manipulate the graph size in Python with Plotly.',
    title = 'Setting Graph Size',
    name = 'Setting Graph Size',
    has_thumbnail='true', thumbnail='thumbnail/sizing.png', 
    language='python', order=2,
    display_as='file_settings',
    ipynb= '~notebook_demo/133')

----------------------------------------

TITLE: Creating a Time Series Plot with Custom Date-Time Formatting in Plotly
DESCRIPTION: This code creates a time series plot using Plotly, demonstrating custom date-time formatting for the x-axis ticks. It uses financial data for Apple stock prices.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

trace0 = go.Scatter(
    mode = 'lines',
    name = 'AAPL High',
    x = df['Date'],
    y = df['AAPL.High'],
    line = go.scatter.Line(
        color = '#17BECF'
    )
)

trace1 = go.Scatter(
    mode = 'lines',
    name = 'AAPL Low',
    x = df['Date'],
    y = df['AAPL.Low'],
    line = go.scatter.Line(
        color = '#7F7F7F'
    )
)

data = [trace0, trace1]

layout = go.Layout(
    title = 'Time Series with Custom Date-Time Format',
    xaxis = go.layout.XAxis(
        tickformat = '%d %B (%a)<br>%Y'
    )
)

fig = go.Figure(
    data=data,
    layout=layout
)

py.iplot(fig, filename='using-tickformat-attribute-date')

----------------------------------------

TITLE: Rendering Les Misérables 3D Network Graph with Plotly in Python
DESCRIPTION: Combines the traces and layout to create the final figure, then uses Plotly to render and display the interactive 3D network visualization.

LANGUAGE: python
CODE:
data=[trace1, trace2]
fig=go.Figure(data=data, layout=layout)

py.iplot(fig, filename='Les-Miserables')

----------------------------------------

TITLE: Creating a Complex Annotated Heatmap (Periodic Table) in Python
DESCRIPTION: Shows how to create a more complex annotated heatmap representing the periodic table of elements using Plotly.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

# ... (data initialization code omitted for brevity)

# Display element name and atomic mass on hover
hover=range(len(symbol))
for x in range(len(symbol)):
    hover[x] = [i + '<br>' + 'Atomic Mass: ' + str(j) for i, j in zip(element[x], atomic_mass[x])]

# Invert Matrices
symbol = symbol[::-1]
hover = hover[::-1]
z = z[::-1]

# Set Colorscale
colorscale=[[0.0, 'rgb(255,255,255)'], [.2, 'rgb(255, 255, 153)'], 
            [.4, 'rgb(153, 255, 204)'], [.6, 'rgb(179, 217, 255)'], 
            [.8, 'rgb(240, 179, 255)'],[1.0, 'rgb(255, 77, 148)']]

# Make Annotated Heatmap
pt = ff.create_annotated_heatmap(z, annotation_text=symbol, text=hover,
                                 colorscale=colorscale, font_colors=['black'], hoverinfo='text')
pt.layout.title = 'Periodic Table'

py.iplot(pt, filename='periodic_table')

----------------------------------------

TITLE: Rendering Network Graph with Plotly
DESCRIPTION: Creates and displays the final network graph visualization using Plotly's Figure object with customized layout settings including title, margins, and axis properties.

LANGUAGE: python
CODE:
fig = go.Figure(data=[edge_trace, node_trace],
             layout=go.Layout(
                title='<br>Network graph made with Python',
                titlefont=dict(size=16),
                showlegend=False,
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                annotations=[ dict(
                    text="Python code: <a href='https://plotly.com/ipython-notebooks/network-graphs/'> https://plotly.com/ipython-notebooks/network-graphs/</a>",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))

py.iplot(fig, filename='networkx')

----------------------------------------

TITLE: Creating a Table with a Pie Chart
DESCRIPTION: Demonstrates how to create a table with an adjacent pie chart using Plotly Figure Factory and Graph Objects.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

# Add table data
table_data = [['Prominence', 'Percent', 'RGB Value'],
              [1, '38%', 'rgb(56, 75, 126)'],
              [2, '27%', 'rgb(18, 36, 37)'],
              [3, '18%', 'rgb(34, 53, 101)'], 
              [4, '10%', 'rgb(36, 55, 57)'],
              [5, '7%', 'rgb(6, 4, 4)']]
# Initialize a figure with ff.create_table(table_data)
figure = ff.create_table(table_data, height_constant=60)

# Add graph data
trace1={'labels': ['1st', '2nd', '3rd', '4th', '5th'],
        'values': [38, 27, 18, 10, 7],
        'type': 'pie',
        'name': 'Starry Night',
        'marker': {'colors': ['rgb(56, 75, 126)',
                              'rgb(18, 36, 37)',
                              'rgb(34, 53, 101)',
                              'rgb(36, 55, 57)',
                              'rgb(6, 4, 4)']},
            'domain': {'x': [0, 1],
                       'y': [.4, 1]},
            'hoverinfo':'label+percent+name',
            'textinfo':'none'
        }

# Add trace data to figure
figure['data'].extend(go.Data([trace1]))

# Edit layout for subplots
figure.layout.yaxis.update({'domain': [0, .30]})
# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa
# Update the margins to add a title and see graph x-labels. 
figure.layout.margin.update({'t':75, 'l':50})
figure.layout.update({'title': 'Starry Night'})
# Update the height because adding a graph vertically will interact with
# the plot height calculated for the table
figure.layout.update({'height':800})

# Plot!
py.iplot(figure)

----------------------------------------

TITLE: Creating Percentage-Based Error Bars with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create error bars as a percentage of the y-value using Plotly. It uses the go.Scatter object and sets the error_y parameter with type='percent' and a value representing the percentage.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='percent',
            value=50,
            visible=True
        )
    )
]
py.iplot(data, filename='percent-error-bar')

----------------------------------------

TITLE: Creating a 3D Cone Vortex Visualization with Plotly in Python
DESCRIPTION: This snippet creates a 3D cone plot representing a vortex using data from a CSV file. It demonstrates how to use Plotly to visualize vector field data as cones in 3D space.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/vortex.csv")

data = [{
    "type": "cone",
    "x": df['x'],
    "y": df['y'],
    "z": df['z'],
    "u": df['u'],
    "v": df['v'],
    "w": df['w'],
    "colorscale": 'Blues',
    "sizemode": "absolute",
    "sizeref": 40
}]

layout = {
    "scene": {
        "aspectratio": {"x": 1, "y": 1, "z": 0.8},
        "camera": {
            "eye": {"x": 1.2, "y": 1.2, "z": 0.6}
        }
    }
}

fig = {"data": data, "layout": layout}
py.iplot(fig, filename="cone-vortex", validate=False)

----------------------------------------

TITLE: Multiplying Two Matrices and Visualizing the Result with Plotly in Python
DESCRIPTION: This snippet demonstrates matrix multiplication using NumPy and visualizes the result using Plotly's annotated heatmap. It defines two 2x2 matrices, multiplies them, and creates a color-coded table representation.

LANGUAGE: python
CODE:
matrix1 = np.matrix(
    [[1, 4],
     [2, 0]]
)

matrix2 = np.matrix(
    [[-1, 2],
     [1, -2]]
)

matrix_prod = matrix1 * matrix2

colorscale = [[0, '#F1FFD9'], [1, '#8BDBF5']]
font=['#000000', '#000000']

table = FF.create_annotated_heatmap(matrix_prod.tolist(), colorscale=colorscale, font_colors=font)
py.iplot(table, filename='matrix-prod')

----------------------------------------

TITLE: Creating Basic Overlaid Area Chart with Plotly in Python
DESCRIPTION: This code creates a basic overlaid area chart using Plotly. It demonstrates how to create two scatter plots with fill, resulting in an overlaid area chart.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[0, 2, 3, 5],
    fill='tozeroy'
)
trace2 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[3, 5, 1, 7],
    fill='tonexty'
)

data = [trace1, trace2]
py.iplot(data, filename='basic-area')

----------------------------------------

TITLE: Creating a Splom Trace for the Iris Dataset
DESCRIPTION: Create a Splom trace using the Iris dataset, setting up dimensions, colors, and marker properties.

LANGUAGE: python
CODE:
trace1 = go.Splom(dimensions=[dict(label='sepal length',
                                 values=df['sepal length']),
                            dict(label='sepal width',
                                 values=df['sepal width']),
                            dict(label='petal length',
                                 values=df['petal length']),
                            dict(label='petal width',
                                 values=df['petal width'])],
                text=text,
                marker=dict(color=color_vals,
                            size=7,
                            colorscale=pl_colorscale,
                            showscale=False,
                            line=dict(width=0.5,
                                      color='rgb(230,230,230)'))
                )

----------------------------------------

TITLE: Creating a Private Graph with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a private graph using Plotly. Private graphs can only be viewed by the owner when logged into Plotly.

LANGUAGE: python
CODE:
py.iplot(data, filename='privacy-private', sharing='private')

----------------------------------------

TITLE: Creating a Normalized Histogram with Plotly in Python
DESCRIPTION: This code demonstrates how to create a normalized histogram using Plotly. It uses the 'histnorm' parameter to set the normalization method to 'probability'.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.randn(500)
data = [go.Histogram(x=x,
                     histnorm='probability')]

py.iplot(data, filename='normalized histogram')

----------------------------------------

TITLE: Plotting London to NYC Great Circle Route
DESCRIPTION: Creates a map showing the great circle route between London and New York City using geographic coordinates. The visualization includes custom map styling and projection settings.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

nyc_london = [go.Scattergeo(
    lat = [40.7127, 51.5072],
    lon = [-74.0059, 0.1275],
    mode = 'lines',
    line = go.scattergeo.Line(
        width = 2,
        color = 'blue',
    ),
)]

layout = go.Layout(
    title = go.layout.Title(
        text = 'London to NYC Great Circle'
    ),
    showlegend = False,
    geo = go.layout.Geo(
        resolution = 50,
        showland = True,
        showlakes = True,
        landcolor = 'rgb(204, 204, 204)',
        countrycolor = 'rgb(204, 204, 204)',
        lakecolor = 'rgb(255, 255, 255)',
        projection = go.layout.geo.Projection(
            type = "equirectangular"
        ),
        coastlinewidth = 2,
        lataxis = go.layout.geo.Lataxis(
            range = [20, 60],
            showgrid = True,
            dtick = 10
        ),
        lonaxis = go.layout.geo.Lonaxis(
            range = [-100, 20],
            showgrid = True,
            dtick = 20
        ),
    )
)

fig = go.Figure(data = nyc_london, layout = layout)
py.iplot(fig, filename = 'd3-great-circle')

----------------------------------------

TITLE: Hiding Specific Legend Entries in Plotly
DESCRIPTION: Shows how to hide specific legend entries by setting showlegend=False for individual traces.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    showlegend=False
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)

data = [trace0, trace1]
fig = go.Figure(data=data)

py.iplot(fig, filename='hide-legend-entry')

----------------------------------------

TITLE: Creating Basic Funnel Plot
DESCRIPTION: Creates a basic funnel chart showing sales process stages with corresponding values. Uses Plotly's graph objects to define the funnel structure and layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly import graph_objs as go 

trace1 = go.Funnel(
    y = ["Website visit", "Downloads", "Potential customers", "Requested price", "invoice sent"],
    x = [39, 27.4, 20.6, 11, 2])

layout = go.Layout(
    title = "Annual Sales",
    margin = {"l": 200, "r": 200})

py.iplot(go.Figure([trace1],layout), filename = "basic_funnel")

----------------------------------------

TITLE: Designing Outer Loop Heading Controller
DESCRIPTION: Implements an outer feedback loop to control heading angle, using root locus to tune the gain.

LANGUAGE: python
CODE:
psi_thetac = (theta_thetac * delta_theta * psi_delta).minreal()
psi_thetac

roots, gains = cn.root_locus(psi_thetac, kvect=np.linspace(0.0, 3.0, num=1001))
pl.iplot(plot_root_locus(gains, roots))

k_psi = 0.25
psi_psic = feedback(psi_thetac, k_psi)
psi_psic.minreal()

----------------------------------------

TITLE: Creating a Ternary Contour Plot with Plotly in Python
DESCRIPTION: This code creates a ternary contour plot using Plotly. It processes the contour data, defines a color map, creates traces for each contour, and plots the figure using py.iplot().

LANGUAGE: python
CODE:
contour_dict = contour_raw_data['Data']

# Defining a colormap:
colors = ['#8dd3c7','#ffffb3','#bebada',
          '#fb8072','#80b1d3','#fdb462',
          '#b3de69','#fccde5','#d9d9d9',
          '#bc80bd']
colors_iterator = iter(colors)

traces = []
for raw_data in contour_dict:
    data = clean_data(raw_data)
    
    a = [inner_data[0] for inner_data in data[1:]]
    a.append(data[1][0]) # Closing the loop 
    
    b = [inner_data[1] for inner_data in data[1:]]
    b.append(data[1][1]) # Closing the loop     
    
    c = [inner_data[2] for inner_data in data[1:]]
    c.append(data[1][2]) # Closing the loop     
    
    trace = dict(
        type='scatterternary',text = data[0],
        a=a, b=b, c=c, mode='lines',
        line=dict(color='#444', shape='spline'),
        fill='toself',
        fillcolor = colors_iterator.next()
    )
    traces.append(trace)
    
layout['title'] = 'Ternary Contour Plot'
contour_fig = dict(data=traces, layout=layout)
py.iplot(contour_fig)

----------------------------------------

TITLE: Creating a Candlestick Chart without Rangeslider in Python
DESCRIPTION: This snippet demonstrates how to create a candlestick chart without a rangeslider using Plotly. It uses the same data as the previous example but modifies the layout to remove the rangeslider.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
from datetime import datetime

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')

trace = go.Candlestick(x=df['Date'],
                open=df['AAPL.Open'],
                high=df['AAPL.High'],
                low=df['AAPL.Low'],
                close=df['AAPL.Close'])

layout = go.Layout(
    xaxis = dict(
        rangeslider = dict(
            visible = False
        )
    )
)

data = [trace]

fig = go.Figure(data=data,layout=layout)
py.iplot(fig, filename='simple_candlestick_without_range_slider')

----------------------------------------

TITLE: Creating a Basic Dot Plot with Plotly in Python
DESCRIPTION: This code creates a basic dot plot showing gender earnings disparity across universities. It uses Plotly's graph objects to define two scatter traces, one for women and one for men, and sets up the layout for the plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = {"x": [72, 67, 73, 80, 76, 79, 84, 78, 86, 93, 94, 90, 92, 96, 94, 112], 
          "y": ["Brown", "NYU", "Notre Dame", "Cornell", "Tufts", "Yale",
                "Dartmouth", "Chicago", "Columbia", "Duke", "Georgetown",
                "Princeton", "U.Penn", "Stanford", "MIT", "Harvard"], 
          "marker": {"color": "pink", "size": 12}, 
          "mode": "markers", 
          "name": "Women", 
          "type": "scatter"
}

trace2 = {"x": [92, 94, 100, 107, 112, 114, 114, 118, 119, 124, 131, 137, 141, 151, 152, 165], 
          "y": ["Brown", "NYU", "Notre Dame", "Cornell", "Tufts", "Yale",
                "Dartmouth", "Chicago", "Columbia", "Duke", "Georgetown",
                "Princeton", "U.Penn", "Stanford", "MIT", "Harvard"], 
          "marker": {"color": "blue", "size": 12}, 
          "mode": "markers", 
          "name": "Men", 
          "type": "scatter", 
}

data = [trace1, trace2]
layout = {"title": "Gender Earnings Disparity", 
          "xaxis": {"title": "Annual Salary (in thousands)", }, 
          "yaxis": {"title": "School"}}

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filenmae='basic_dot-plot')

----------------------------------------

TITLE: Creating a Basic Parallel Categories Diagram with Plotly
DESCRIPTION: Demonstrates how to create a simple parallel categories diagram using sample data on hair color, eye color, and sex. The plot shows relationships between these categorical variables.

LANGUAGE: python
CODE:
parcats = go.Parcats(
    dimensions=[
        {'label': 'Hair',
         'values': ['Black', 'Black', 'Black', 'Brown',
                    'Brown', 'Brown', 'Red', 'Brown']},
        {'label': 'Eye',
         'values': ['Brown', 'Brown', 'Brown', 'Brown',
                    'Brown', 'Blue', 'Blue', 'Blue']},
        {'label': 'Sex',
         'values': ['Female', 'Female', 'Female', 'Male',
                    'Female', 'Male', 'Male', 'Male']}]
)

iplot([parcats])

----------------------------------------

TITLE: Designing Closed Loop Roll Controller
DESCRIPTION: Implements a proportional feedback controller for roll angle control and analyzes the closed loop response.

LANGUAGE: python
CODE:
k_theta = -2.5
theta_thetac = feedback(theta_delta, k_theta)
theta_thetac

theta_thetac.pole()

thetac = np.deg2rad(3.0) * np.ones_like(time)
time, theta, state = cn.forced_response(theta_thetac, T=time, U=thetac)

pl.iplot(plot_siso_response(time, np.rad2deg(thetac), np.rad2deg(theta),
                            input_y_lab='Commanded Roll Angle [deg]',
                            output_y_lab='Roll Angle [deg]', subplots=False))

----------------------------------------

TITLE: Creating 3D Mesh with Alphahull
DESCRIPTION: Demonstrates creating a 3D mesh with alphahull parameter set to 5, which affects the shape of the mesh. Uses cyan color with 40% opacity.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

pts=np.loadtxt('mesh_dataset.txt')
x,y,z=zip(*pts)

trace = go.Mesh3d(x=x,y=y,z=z,
                   alphahull=5,
                   opacity=0.4,
                   color='#00FFFF')
py.iplot([trace])

----------------------------------------

TITLE: Adding Two Matrices and Visualizing the Result with Plotly in Python
DESCRIPTION: This code demonstrates matrix addition using NumPy and visualizes the result using Plotly's annotated heatmap. It defines two 2x2 matrices, adds them, and creates a color-coded table representation.

LANGUAGE: python
CODE:
matrix1 = np.matrix(
    [[0, 4],
     [2, 0]]
)

matrix2 = np.matrix(
    [[-1, 2],
     [1, -2]]
)

matrix_sum = matrix1 + matrix2

colorscale = [[0, '#EAEFC4'], [1, '#9BDF46']]
font=['#000000', '#000000']

table = FF.create_annotated_heatmap(matrix_sum.tolist(), colorscale=colorscale, font_colors=font)
py.iplot(table, filename='matrix-sum')

----------------------------------------

TITLE: Creating a Table with Hyperlinks
DESCRIPTION: Demonstrates how to create a table with clickable hyperlinks using HTML tags in the table data.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['User', 'Language', 'Chart Type', '# of Views'],
               ['<a href="https://plotly.com/~empet/folder/home">empet</a>',
                '<a href="https://plotly.com/python/">Python</a>',
                '<a href="https://plotly.com/~empet/8614/">Network Graph</a>',
                298],
               ['<a href="https://plotly.com/~Grondo/folder/home">Grondo</a>',
                '<a href="https://plotly.com/matlab/">Matlab</a>',
                '<a href="https://plotly.com/~Grondo/42/">Subplots</a>',
                356],
               ['<a href="https://plotly.com/~Dreamshot/folder/home">Dreamshot</a>',
                '<a href="https://help.plot.ly/tutorials/">Web App</a>',
                '<a href="https://plotly.com/~Dreamshot/6575/_2014-us-city-populations/">Bubble Map</a>',
                262],
               ['<a href="https://plotly.com/~FiveThirtyEight/folder/home">FiveThirtyEight</a>',
                '<a href="https://help.plot.ly/tutorials/">Web App</a>',
                '<a href="https://plotly.com/~FiveThirtyEight/30/">Scatter</a>',
                692],
               ['<a href="https://plotly.com/~cpsievert/folder/home">cpsievert</a>',
                '<a href="https://plotly.com/r/">R</a>',
                '<a href="https://plotly.com/~cpsievert/1130/">Surface</a>',
                302]]

table = ff.create_table(data_matrix)
py.iplot(table, filename='linked_table')

----------------------------------------

TITLE: Generating HTML Embed Code for Plotly Graph in Python
DESCRIPTION: This snippet shows how to use the chart_studio.tools.get_embed function to generate the HTML code for embedding a Plotly graph. It requires the chart_studio library and takes a URL of a Plotly graph as input.

LANGUAGE: python
CODE:
import chart_studio.tools as tls

tls.get_embed('https://plotly.com/~chris/1638')

----------------------------------------

TITLE: Creating a Quiver Plot with Additional Points in Plotly
DESCRIPTION: This example demonstrates how to create a more complex quiver plot with additional scatter points. It uses both the figure_factory and graph_objs modules from Plotly to combine quiver arrows with point markers.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import numpy as np

x,y = np.meshgrid(np.arange(-2, 2, .2),
                  np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient(z, .2, .2)

# Create quiver figure
fig = ff.create_quiver(x, y, u, v,
                       scale=.25,
                       arrow_scale=.4,
                       name='quiver',
                       line=dict(width=1))

# Create points
points = go.Scatter(x=[-.7, .75], y=[0,0],
                    mode='markers',
                    marker=dict(size=12),
                    name='points')

# Add points to figure
fig['data'].append(points)

py.iplot(fig, filename='Quiver with Points')

----------------------------------------

TITLE: Creating a Basic Box Plot in Python with Plotly
DESCRIPTION: This code creates a basic box plot using Plotly's graph objects. It generates random data and creates two box plots side by side.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

y0 = np.random.randn(50)-1
y1 = np.random.randn(50)+1

trace0 = go.Box(
    y=y0
)
trace1 = go.Box(
    y=y1
)
data = [trace0, trace1]
py.iplot(data)

----------------------------------------

TITLE: Calculating Root Locus for Roll Control Loop
DESCRIPTION: Computes and plots the root locus to analyze stability for different feedback gains in the roll control loop.

LANGUAGE: python
CODE:
pos_feedback_roots, pos_feedback_gains = cn.root_locus(theta_delta, kvect=np.linspace(0.0, -20.0, num=500))
pl.iplot(plot_root_locus(pos_feedback_gains, pos_feedback_roots))

----------------------------------------

TITLE: Advanced Parallel Coordinates with Complex Dataset
DESCRIPTION: Advanced example showing parallel coordinates with multiple dimensions, custom color scaling, and complex data visualization features.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd 

df = pd.read_csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv")

data = [
    go.Parcoords(
        line = dict(color = df['colorVal'],
                   colorscale = 'Jet',
                   showscale = True,
                   reversescale = True,
                   cmin = -4000,
                   cmax = -100),
        dimensions = list([
            dict(range = [32000,227900],
                 constraintrange = [100000,150000],
                 label = 'Block Height', values = df['blockHeight']),
            dict(range = [0,700000],
                 label = 'Block Width', values = df['blockWidth']),
            dict(tickvals = [0,0.5,1,2,3],
                 ticktext = ['A','AB','B','Y','Z'],
                 label = 'Cyclinder Material', values = df['cycMaterial']),
            dict(range = [-1,4],
                 tickvals = [0,1,2,3],
                 label = 'Block Material', values = df['blockMaterial']),
            dict(range = [134,3154],
                 visible = True,
                 label = 'Total Weight', values = df['totalWeight']),
            dict(range = [9,19984],
                 label = 'Assembly Penalty Weight', values = df['assemblyPW']),
            dict(range = [49000,568000],
                 label = 'Height st Width', values = df['HstW']),
            dict(range = [-28000,196430],
                 label = 'Min Height Width', values = df['minHW']),
            dict(range = [98453,501789],
                 label = 'Min Width Diameter', values = df['minWD']),
            dict(range = [1417,107154],
                 label = 'RF Block', values = df['rfBlock'])
        ])
    )
]

py.iplot(data, filename = 'parcoords-advanced')

----------------------------------------

TITLE: Normalizing Data to Custom Interval with Plotly in Python
DESCRIPTION: This snippet demonstrates normalizing data to a custom interval [a, b]. It creates histograms of the original and normalized data using Plotly subplots.

LANGUAGE: python
CODE:
a = 10
b = 50
data_norm_to_a_b = [(number - a)/(b - a) for number in data]

trace1 = go.Histogram(
    x=data,
    opacity=0.75,
    name='data',
)

trace2 = go.Histogram(
    x=data_norm_to_a_b,
    opacity=0.75,
    name='normalized to [10,50]',
)

fig = tools.make_subplots(rows=2, cols=1)

fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 2, 1)

fig['layout'].update(height=600, width=800, title='Normalize to [10,50]')
py.iplot(fig, filename='apple-data-normalize-a-b')

----------------------------------------

TITLE: Performing 2D Spline Interpolation and Visualization with Plotly
DESCRIPTION: This code performs 2D spline interpolation using SciPy and visualizes the results using Plotly. It creates a 3D scatter plot showing both the original data points and the interpolated surface.

LANGUAGE: python
CODE:
from scipy import interpolate

x = np.arange(-5.0, 5.0, 0.25)
y = np.arange(-5.0, 5.0, 0.25)
xx, yy = np.meshgrid(x, y)
z = np.sin(xx**2+yy**2)
f = interpolate.interp2d(x, y, z, kind='cubic')

xnew = np.arange(-5.0, 5.0, 1e-1)
ynew = np.arange(-5.0, 5.0, 1e-1)
znew = f(xnew, ynew)

trace1 = go.Scatter3d(
    x=x,
    y=y,
    z=z[0, :],
    mode='markers',
    name='Data',
    marker = dict(
        size = 7
    )
)

trace2 = go.Scatter3d(
    x=ynew,
    y=xnew,
    z=znew[0, :],
    marker=dict(
        size=3,
    ),
    name='Interpolated Data'
)

layout = go.Layout(
    title='Interpolation and Extrapolation in 2D',
    scene=dict(
            camera= dict(
                up=dict(x=0, y=0, z=1),
                center=dict(x=0, y=0, z=0),
                eye=dict(x=1, y=-1, z=0)
            )
    )
)

data = [trace1, trace2]

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='interpolation-and-extrapolation-2d')

----------------------------------------

TITLE: Multiple Traces Violin Plot
DESCRIPTION: Creates multiple violin plots by iterating through unique days in the dataset

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv")

data = []
for i in range(0,len(pd.unique(df['day']))):
    trace = {
            "type": 'violin',
            "x": df['day'][df['day'] == pd.unique(df['day'])[i]],
            "y": df['total_bill'][df['day'] == pd.unique(df['day'])[i]],
            "name": pd.unique(df['day'])[i],
            "box": {
                "visible": True
            },
            "meanline": {
                "visible": True
            }
        }
    data.append(trace)

fig = {
    "data": data,
    "layout" : {
        "title": "",
        "yaxis": {
            "zeroline": False,
        }
    }
}

py.iplot(fig, filename='violin/multiple', validate = False)

----------------------------------------

TITLE: Creating a Styled Categorical Dot Plot with Plotly in Python
DESCRIPTION: This code creates a styled categorical dot plot showing voting statistics for OECD countries. It demonstrates more advanced styling options for Plotly, including custom colors, marker styles, and layout configurations.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

country = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)',
           'United States (2012)', 'Slovenia (2014)', 'Canada (2011)',
           'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)']
voting_pop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6]
reg_voters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9]

trace0 = go.Scatter(
    x=voting_pop,
    y=country,
    mode='markers',
    name='Percent of estimated voting age population',
    marker=dict(
        color='rgba(156, 165, 196, 0.95)',
        line=dict(
            color='rgba(156, 165, 196, 1.0)',
            width=1,
        ),
        symbol='circle',
        size=16,
    )
)
trace1 = go.Scatter(
    x=reg_voters,
    y=country,
    mode='markers',
    name='Percent of estimated registered voters',
    marker=dict(
        color='rgba(204, 204, 204, 0.95)',
        line=dict(
            color='rgba(217, 217, 217, 1.0)',
            width=1,
        ),
        symbol='circle',
        size=16,
    )
)

data = [trace0, trace1]
layout = go.Layout(
    title="Votes cast for ten lowest voting age population in OECD countries",
    xaxis=dict(
        showgrid=False,
        showline=True,
        linecolor='rgb(102, 102, 102)',
        titlefont=dict(
            color='rgb(204, 204, 204)'
        ),
        tickfont=dict(
            color='rgb(102, 102, 102)',
        ),
        showticklabels=True,
        dtick=10,
        ticks='outside',
        tickcolor='rgb(102, 102, 102)',
    ),
    margin=dict(
        l=140,
        r=40,
        b=50,
        t=80
    ),
    legend=dict(
        font=dict(
            size=10,
        ),
        yanchor='middle',
        xanchor='right',
    ),
    width=800,
    height=600,
    paper_bgcolor='rgb(254, 247, 234)',
    plot_bgcolor='rgb(254, 247, 234)',
    hovermode='closest',
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='lowest-oecd-votes-cast')

----------------------------------------

TITLE: Creating Fixed Ratio Axes in Plotly Python
DESCRIPTION: This snippet shows how to create fixed ratio axes, where the scale of one axis is tied to another. It demonstrates various axis configurations including logarithmic scales and matching axis scales.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
  x = [0,1,1,0,0,1,1,2,2,3,3,2,2,3],
  y = [0,0,1,1,3,3,2,2,3,3,1,1,0,0]
)

trace1 = go.Scatter(
  x = [0,1,2,3],
  y = [1,2,4,8],
  yaxis = "y2"
)

trace2 = go.Scatter(
  x = [1,10,100,10,1],
  y = [0,1,2,3,4],
  xaxis = "x2",
  yaxis ="y3",
)

trace3 = go.Scatter(
  x = [1,100,30,80,1],
  y = [1,1.5,2,2.5,3],
  xaxis = "x2",
  yaxis = "y4"
)

data = [trace0,trace1,trace2,trace3]

layout = go.Layout(
    width = 800,
    height = 500,
    title = "fixed-ratio axes",
    xaxis = dict(
      nticks = 10,
      domain = [0, 0.45],
      title = "shared X axis"
    ),
    yaxis = dict(
      scaleanchor = "x",
      domain = [0, 0.45],
      title = "1:1"
    ),
    yaxis2 = dict(
      scaleanchor = "x",
      scaleratio = 0.2,
      domain = [0.55,1],
      title = "1:5"
    ),
    xaxis2 = dict(
      type = "log",
      domain = [0.55, 1],
      anchor = "y3",
      title = "unconstrained log X"
    ),
    yaxis3 = dict(
      domain = [0, 0.45],
      anchor = "x2",
      title = "Scale matches ->"
    ),
    yaxis4 = dict(
      scaleanchor = "y3",
      domain = [0.55, 1],
      anchor = "x2",
      title = "Scale matches <-"
    ),
    showlegend= False
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename = "aspect-ratio")

----------------------------------------

TITLE: Styling Buttons Example with Wind Farm Data
DESCRIPTION: Comprehensive example showing how to style Plotly buttons including colors, fonts, padding and positioning. Uses wind turbine data to create an interactive map visualization.

LANGUAGE: python
CODE:
import pandas as pd

layout = dict(
    height = 800,
    margin = dict( t=0, b=0, l=0, r=0 ),
    font = dict( color='#FFFFFF', size=11 ),
    paper_bgcolor = '#000000',
    updatemenus=list([
        dict(
            buttons = wind_farms[0:6],
            direction = 'left',
            pad = {'r': 0, 't': 10},
            type = 'buttons',
            x = 0.1,
            xanchor = 'left',
            y = 1.0,
            yanchor = 'top',
            bgcolor = '#AAAAAA',
            active = 99,
            bordercolor = '#FFFFFF',
            font = dict(size=11, color='#000000')
        )
    ])
)

----------------------------------------

TITLE: Embedding Live Plotly Stream in Python Notebook
DESCRIPTION: This code embeds the live streaming Plotly visualization directly into the Jupyter notebook for real-time viewing.

LANGUAGE: python
CODE:
tls.embed('streaming-demos','122')

----------------------------------------

TITLE: Creating a Bar Chart with Vox Logo in Python using Plotly
DESCRIPTION: This code creates a horizontal bar chart showing income percentile changes for different occupations. It adds a Vox logo to the top right corner of the chart using the 'images' property in the layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Bar(
        x=['-35.3', '-15.9', '-15.8', '-15.6', '-11.1',
           '-9.6', '-9.2', '-3.5', '-1.9', '-0.9',
           '1.0', '1.4', '1.7', '2.0', '2.8', '6.2',
           '8.1', '8.5', '8.5', '8.6', '11.4', '12.5',
           '13.3', '13.7', '14.4', '17.5', '17.7',
           '18.9', '25.1', '28.9', '41.4'],
        y=['Designers, musicians, artists, etc.',
           'Secretaries and administrative assistants',
           'Waiters and servers', 'Archivists, curators, and librarians',
           'Sales and related', 'Childcare workers, home car workers, etc.',
           'Food preparation occupations', 'Janitors, maids, etc.',
           'Healthcare technicians, assistants. and aides',
           'Counselors, social and religious workers',
           'Physical, life and social scientists', 'Construction',
           'Factory assembly workers', 'Machinists, repairmen, etc.',
           'Media and communications workers', 'Teachers',
           'Mechanics, repairmen, etc.', 'Financial analysts and advisers',
           'Farming, fishing and forestry workers',
           'Truck drivers, heavy equipment operator, etc.','Accountants and auditors',
           'Human resources, management analysts, etc.', 'Managers',
           'Lawyers and judges', 'Engineers, architects and surveyors',
           'Nurses', 'Legal support workers',
           'Computer programmers and system admin.', 'Police officers and firefighters',
           'Chief executives', 'Doctors, dentists and surgeons'],
        marker=dict(
            color='rgb(253, 240, 54)',
            line=dict(color='rgb(0, 0, 0)',
                      width=2)
        ),
        orientation='h',
    )
]

layout = go.Layout(
    images=[dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png",
        xref="paper", yref="paper",
        x=1, y=1.05,
        sizex=0.2, sizey=0.2,
        xanchor="right", yanchor="bottom"
      )],
    autosize=False, height=800, width=700,
    bargap=0.15, bargroupgap=0.1,
    barmode='stack', hovermode='x',
    margin=dict(r=20, l=300,
                  b=75, t=125),
    title='Moving Up, Moving Down<br><i>Percentile change in income between childhood and adulthood</i>',
    xaxis=dict(
        dtick=10, nticks=0,
        gridcolor='rgba(102, 102, 102, 0.4)',
        linecolor='#000', linewidth=1,
        mirror=True,
        showticklabels=True, tick0=0, tickwidth=1,
        title='<i>Change in percentile</i>',
    ),
    yaxis=dict(
        anchor='x',
        gridcolor='rgba(102, 102, 102, 0.4)', gridwidth=1,
        linecolor='#000', linewidth=1,
        mirror=True, showgrid=False,
        showline=True, zeroline=False,
        showticklabels=True, tick0=0,
        type='category',
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Generating Weibull Distribution Data in Python
DESCRIPTION: This code generates a 1D dataset from a Weibull Distribution using NumPy's random module. It creates 1000 samples with a shape parameter of 1.25.

LANGUAGE: python
CODE:
x=np.random.weibull(1.25, size=1000)
print(x[:10])

----------------------------------------

TITLE: Implementing Dixon's Q-Test for Outlier Detection in Python
DESCRIPTION: This function implements Dixon's Q-Test to determine if the smallest point in a dataset is an outlier. It compares the calculated Q-statistic to a reference value.

LANGUAGE: python
CODE:
def q_test_for_smallest_point(dataset):
    q_ref = 0.29  # the reference Q value for a significance level of 95% and 30 data points
    q_stat = (dataset[1] - dataset[0])/(dataset[-1] - dataset[0])
    
    if q_stat > q_ref:
        print("Since our Q-statistic is %f and %f > %f, we have evidence that our "
              "minimum point IS an outlier to the data.") %(q_stat, q_stat, q_ref)
    else:
        print("Since our Q-statistic is %f and %f < %f, we have evidence that our "
              "minimum point is NOT an outlier to the data.") %(q_stat, q_stat, q_ref)

----------------------------------------

TITLE: Version Check - Plotly Installation
DESCRIPTION: Imports and displays the installed Plotly version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Finding Eigenvalues of a Matrix in Python
DESCRIPTION: This snippet calculates the eigenvalues of a 2x2 matrix using NumPy's linear algebra function. It defines a matrix, computes its eigenvalues, and prints the results.

LANGUAGE: python
CODE:
matrix = np.matrix(
    [[1, 4],
     [2, 0]]
)

eigvals = np.linalg.eigvals(matrix)
print("The eignevalues are %f and %f") %(eigvals[0], eigvals[1])

----------------------------------------

TITLE: Performing Shapiro-Wilk Test for Normality in Python
DESCRIPTION: Conduct the Shapiro-Wilk test for normality using SciPy and display results in a Plotly table.

LANGUAGE: python
CODE:
from scipy.stats import shapiro
stat, p = shapiro(gauss_data)

# interpret
alpha = 0.05
if p > alpha:
    msg = 'Sample looks Gaussian (fail to reject H0)'
else:
    msg = 'Sample does not look Gaussian (reject H0)'

result_mat = [
    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],
    [len(gauss_data), stat, p, msg]
]

swt_table = ff.create_table(result_mat)
swt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]
swt_table['layout']['height']=200
swt_table['layout']['margin']['t']=50
swt_table['layout']['margin']['b']=50

py.iplot(swt_table, filename='shapiro-wilk-table')

----------------------------------------

TITLE: Setting up Tree Structure
DESCRIPTION: Create tree graph with vertices and edges using igraph, and calculate layout positions

LANGUAGE: python
CODE:
nr_vertices = 25
v_label = map(str, range(nr_vertices))
G = Graph.Tree(nr_vertices, 2) # 2 stands for children number
lay = G.layout('rt')

position = {k: lay[k] for k in range(nr_vertices)}
Y = [lay[k][1] for k in range(nr_vertices)]
M = max(Y)

es = EdgeSeq(G) # sequence of edges
E = [e.tuple for e in G.es] # list of edges

L = len(position)
Xn = [position[k][0] for k in range(L)]
Yn = [2*M-position[k][1] for k in range(L)]
Xe = []
Ye = []
for edge in E:
    Xe+=[position[edge[0]][0],position[edge[1]][0], None]
    Ye+=[2*M-position[edge[0]][1],2*M-position[edge[1]][1], None] 

labels = v_label

----------------------------------------

TITLE: Setting Axis Ranges in 3D Plotly Plot
DESCRIPTION: Creates a 3D mesh plot with custom axis ranges using Plotly. Sets specific ranges for x (-100 to 100), y (-50 to 100), and z (-100 to 100) axes with 4 ticks each.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

N = 70
trace1 = go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='rgba(244,22,100,0.6)'
                  )

layout = go.Layout(
                    scene = dict(
                    xaxis = dict(
                        nticks=4, range = [-100,100],),
                    yaxis = dict(
                        nticks=4, range = [-50,100],),
                    zaxis = dict(
                        nticks=4, range = [-100,100],),),
                    width=700,
                    margin=dict(
                    r=20, l=10,
                    b=10, t=10)
                  )
fig = go.Figure(data=[trace1], layout=layout)
py.iplot(fig, filename='3d-axis-range')

----------------------------------------

TITLE: Performing Singular Value Decomposition (SVD) and Visualizing with Plotly in Python
DESCRIPTION: This code performs Singular Value Decomposition (SVD) on a 2x2 matrix using NumPy and visualizes the result using Plotly's table. It decomposes the matrix into U, Σ, and V* matrices and creates a table representation.

LANGUAGE: python
CODE:
matrix = np.matrix(
    [[1, 4],
     [2, 0]]
)

svd = np.linalg.svd(matrix)

u = svd[0]
sigma = svd[1]
v = svd[2]

u = u.tolist()
sigma = sigma.tolist()
v = v.tolist()

colorscale = [[0, '#111111'],[1, '#222222']]
font=['#ffffff', '#ffffff']

matrix_prod = [
    ['$U$', '', '$\Sigma$', '$V^*$', ''],
    [u[0][0], u[0][1], sigma[0], v[0][0], v[0][1]],
    [u[1][0], u[1][1], sigma[1], v[1][0], v[1][1]]
]

table = FF.create_table(matrix_prod)
py.iplot(table, filename='svd')

----------------------------------------

TITLE: Time Series Plot with Custom Date Range in Python
DESCRIPTION: Shows how to create a time series plot with a custom date range using datetime objects and unix time conversion. Includes a helper function to convert datetime to unix timestamps.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import datetime

def to_unix_time(dt):
    epoch =  datetime.datetime.utcfromtimestamp(0)
    return (dt - epoch).total_seconds() * 1000

x = [datetime.datetime(year=2013, month=10, day=04),
    datetime.datetime(year=2013, month=11, day=05),
    datetime.datetime(year=2013, month=12, day=06)]
data = [go.Scatter(
            x=x,
            y=[1, 3, 6])]

layout = go.Layout(xaxis = dict(
                   range = [to_unix_time(datetime.datetime(2013, 10, 17)),
                            to_unix_time(datetime.datetime(2013, 11, 20))]
    ))

fig = go.Figure(data = data, layout = layout)
py.iplot(fig)

----------------------------------------

TITLE: Styling Legend in Plotly
DESCRIPTION: Shows how to style the legend by customizing font, background color, border color, and border width.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)
data = [trace0, trace1]

layout = go.Layout(
    legend=dict(
        x=0,
        y=1,
        traceorder='normal',
        font=dict(
            family='sans-serif',
            size=12,
            color='#000'
        ),
        bgcolor='#E2E2E2',
        bordercolor='#FFFFFF',
        borderwidth=2
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='style-legend')

----------------------------------------

TITLE: Creating Plotly Stream Link Objects in Python
DESCRIPTION: This code creates stream link objects using the previously defined tokens, which will be used to send data to the streaming plot.

LANGUAGE: python
CODE:
s_1 = py.Stream(stream_id=token_1)
s_2 = py.Stream(stream_id=token_2)

----------------------------------------

TITLE: Creating a Styled Histogram with Plotly in Python
DESCRIPTION: This code demonstrates how to create a styled histogram using Plotly. It customizes various aspects of the histogram, including colors, bin sizes, and labels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
x0 = np.random.randn(500)
x1 = np.random.randn(500)+1

trace1 = go.Histogram(
    x=x0,
    histnorm='percent',
    name='control',
    xbins=dict(
        start=-4.0,
        end=3.0,
        size=0.5
    ),
    marker=dict(
        color='#FFD7E9',
    ),
    opacity=0.75
)
trace2 = go.Histogram(
    x=x1,
    name='experimental',
    xbins=dict(
        start=-3.0,
        end=4,
        size=0.5
    ),
    marker=dict(
        color='#EB89B5'
    ),
    opacity=0.75
)
data = [trace1, trace2]

layout = go.Layout(
    title='Sampled Results',
    xaxis=dict(
        title='Value'
    ),
    yaxis=dict(
        title='Count'
    ),
    bargap=0.2,
    bargroupgap=0.1
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='styled histogram')

----------------------------------------

TITLE: Importing CSV Data into SQLite Database in Python
DESCRIPTION: Reads a large CSV file in chunks, processes the data, and appends it to a SQLite database.

LANGUAGE: python
CODE:
start = dt.datetime.now()
chunksize = 20000
j = 0
index_start = 1

for df in pd.read_csv('311_100M.csv', chunksize=chunksize, iterator=True, encoding='utf-8'):
    
    df = df.rename(columns={c: c.replace(' ', '') for c in df.columns}) # Remove spaces from columns

    df['CreatedDate'] = pd.to_datetime(df['CreatedDate']) # Convert to datetimes
    df['ClosedDate'] = pd.to_datetime(df['ClosedDate'])

    df.index += index_start

    # Remove the un-interesting columns
    columns = ['Agency', 'CreatedDate', 'ClosedDate', 'ComplaintType', 'Descriptor',
               'CreatedDate', 'ClosedDate', 'TimeToCompletion',
               'City']

    for c in df.columns:
        if c not in columns:
            df = df.drop(c, axis=1)    

    
    j+=1
    print '{} seconds: completed {} rows'.format((dt.datetime.now() - start).seconds, j*chunksize)

    df.to_sql('data', disk_engine, if_exists='append')
    index_start = df.index[-1] + 1

----------------------------------------

TITLE: Creating a Simple 3D Bubble Chart with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a basic 3D bubble chart using Plotly and pandas. It visualizes population and life expectancy data over time from the Gapminder dataset.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

# Get Data: this ex will only use part of it (i.e. rows 750-1500)
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')

trace1 = go.Scatter3d(
    x=df['year'][750:1500],
    y=df['continent'][750:1500],
    z=df['pop'][750:1500],
    text=df['country'][750:1500],
    mode='markers',
    marker=dict(
        sizemode='diameter',
        sizeref=750,
        size=df['gdpPercap'][750:1500],
        color = df['lifeExp'][750:1500],
        colorscale = 'Viridis',
        colorbar = dict(title = 'Life<br>Expectancy'),
        line=dict(color='rgb(140, 140, 170)')
    )
)

data=[trace1]

layout=go.Layout(height=800, width=800, title='Examining Population and Life Expectancy Over Time')

fig=go.Figure(data=data, layout=layout)
py.iplot(fig, filename='3DBubble')

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Sets up the necessary imports for Plotly, NumPy and Pandas to create visualizations

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as FF

import numpy as np
import pandas as pd

----------------------------------------

TITLE: Multiple Dropdown Controls for Chart Customization
DESCRIPTION: Implements multiple dropdown menus to control various aspects of a plot including colorscale, chart type, and line display

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import cmocean
import json
import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')
data = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]

updatemenus=list([
    dict(
        buttons=list([
            dict(args=['colorscale', 'Viridis'], label='Viridis', method='restyle'),
            dict(args=['colorscale', 'Cividis'], label='Cividis', method='restyle'),
            dict(args=['type', 'surface'], label='3D Surface', method='restyle'),
            dict(args=['type', 'heatmap'], label='Heatmap', method='restyle')
        ])
    )
])

layout = dict(updatemenus=updatemenus)
fig = dict(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Creating Plotly Stream ID Objects in Python
DESCRIPTION: This code creates stream ID objects for each token, which will be used to configure the streaming traces in the plot.

LANGUAGE: python
CODE:
stream_id1 = dict(token=token_1, maxpoints=60)
stream_id2 = dict(token=token_2, maxpoints=60)

----------------------------------------

TITLE: Performing Two-Sample T-Test in Python using SciPy
DESCRIPTION: This code performs a two-sample t-test using SciPy's ttest_ind function and creates a table to display the results using Plotly's FigureFactory.

LANGUAGE: python
CODE:
twosample_results = scipy.stats.ttest_ind(data1, data2)

matrix_twosample = [
    ['', 'Test Statistic', 'p-value'],
    ['Sample Data', twosample_results[0], twosample_results[1]]
]

twosample_table = FF.create_table(matrix_twosample, index=True)
py.iplot(twosample_table, filename='twosample-table')

----------------------------------------

TITLE: Solving Matrix Equation AX=B and Visualizing the Result with Plotly in Python
DESCRIPTION: This code solves the matrix equation AX=B using NumPy's linear algebra solver and visualizes the result using Plotly's annotated heatmap. It defines matrices A and B, solves for X, and creates a color-coded table representation.

LANGUAGE: python
CODE:
A = np.matrix(
    [[1, 4],
     [2, 0]]
)

B = np.matrix(
    [[-1, 2],
     [1, -2]]
)

X = np.linalg.solve(A, B)

colorscale = [[0, '#497285'], [1, '#DFEBED']]
font=['#000000', '#000000']

table = FF.create_annotated_heatmap(X.tolist(), colorscale=colorscale, font_colors=font)
py.iplot(table, filename='matrix-eq')

----------------------------------------

TITLE: Creating Animation Configuration
DESCRIPTION: Sets up data structure, frames, layout, and slider controls for the MRI slice animation

LANGUAGE: python
CODE:
data=[
    dict(
        type='surface', 
        zsrc=grid.get_column_reference('z1'),
        surfacecolorsrc=grid.get_column_reference('surfc1'),
        colorscale=pl_bone,
        colorbar=dict(thickness=20, ticklen=4)
    )
]

frames=[]
for k in range(nr_frames):
    frames.append(
        dict(
            data=[dict(zsrc=grid.get_column_reference('z{}'.format(k + 1)),
                       surfacecolorsrc=grid.get_column_reference('surfc{}'.format(k + 1)))],
            name='frame{}'.format(k + 1)
        )
    )

sliders=[
    dict(
        steps=[dict(method='animate',
                    args= [['frame{}'.format(k + 1)],
                            dict(mode='immediate',
                                 frame= dict(duration=70, redraw= False),
                                 transition=dict(duration=0))],
                    label='{:d}'.format(k+1)) for k in range(68)], 
        transition= dict(duration=0),
        x=0,
        y=0, 
        currentvalue=dict(font=dict(size=12), 
                          prefix='slice: ', 
                          visible=True, 
                          xanchor='center'
                         ),  
        len=1.0
    )
]

----------------------------------------

TITLE: Creating Edge and Node Traces for Network Visualization
DESCRIPTION: Sets up Plotly scatter traces for edges and nodes. Edges are represented as disconnected lines and nodes as markers with customizable properties including size, color, and hover information.

LANGUAGE: python
CODE:
edge_trace = go.Scatter(
    x=[],
    y=[],
    line=dict(width=0.5,color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in G.edges():
    x0, y0 = G.node[edge[0]]['pos']
    x1, y1 = G.node[edge[1]]['pos']
    edge_trace['x'] += tuple([x0, x1, None])
    edge_trace['y'] += tuple([y0, y1, None])

node_trace = go.Scatter(
    x=[],
    y=[],
    text=[],
    mode='markers',
    hoverinfo='text',
    marker=dict(
        showscale=True,
        colorscale='YlGnBu',
        reversescale=True,
        color=[],
        size=10,
        colorbar=dict(
            thickness=15,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

for node in G.nodes():
    x, y = G.node[node]['pos']
    node_trace['x'] += tuple([x])
    node_trace['y'] += tuple([y])

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for verifying the installed version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Sunburst Charts with Large Datasets in Plotly Python
DESCRIPTION: This example shows how to create sunburst charts with large datasets using Plotly grid attributes and domains. It creates two sunburst charts side by side, each using data from a different CSV file.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

df1 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')
df2 = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')

trace1 = go.Sunburst(
    ids=df1.ids,
    labels=df1.labels,
    parents=df1.parents,
    domain=dict(column=0)
)

trace2 = go.Sunburst(
    ids=df2.ids,
    labels=df2.labels,
    parents=df2.parents,
    domain=dict(column=1),
    maxdepth=2
)

layout = go.Layout(
    grid=go.layout.Grid(columns=2, rows=1),
    margin = go.layout.Margin(t=0, l=0, r=0, b=0),
    sunburstcolorway=[
    "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
    "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
  ],
    extendsunburstcolors=True
)

data = [trace1, trace2]

fig = go.Figure(data, layout)

py.iplot(fig, filename='large_number_of_slices')

----------------------------------------

TITLE: Creating Baseline Detection Plot
DESCRIPTION: Calculates baseline values using PeakUtils and creates a scatter plot comparing original data with baseline values using Plotly.

LANGUAGE: python
CODE:
# calculate baseline y values
baseline_values = peakutils.baseline(time_series)

trace = go.Scatter(
    x=[j for j in range(len(time_series))],
    y=time_series,
    mode='lines',
    marker=dict(
        color='#B292EA',
    ),
    name='Original Plot'
)

trace2 = go.Scatter(
    x=[j for j in range(len(time_series))],
    y=baseline_values,
    mode='markers',
    marker=dict(
        size=3,
        color='#EB55BF',
        symbol='circle-open'
    ),
    name='Baseline'
)

data = [trace, trace2]
py.iplot(data, filename='milk-production-plot-with-baseline')

----------------------------------------

TITLE: Customizing Legend Names in Plotly
DESCRIPTION: Demonstrates how to set custom names for legend entries using the 'name' parameter in trace objects.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
    name='Positive'
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
    name='Negative'
)

data = [trace0, trace1]
fig = go.Figure(data=data)

py.iplot(fig, filename='legend-names')

----------------------------------------

TITLE: Creating Choropleth Map with Plotly and Mapbox
DESCRIPTION: Creates an interactive choropleth map using Plotly and Mapbox, displaying Florida counties colored by political party affiliation.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as graph_objs

mapbox_access_token = "ADD_YOUR_TOKEN_HERE"

data = graph_objs.Data([
    graph_objs.Scattermapbox(
        lat=['45.5017'],
        lon=['-73.5673'],
        mode='markers',
    )
])
layout = graph_objs.Layout(
    height=600,
    autosize=True,
    hovermode='closest',
    mapbox=dict(
        layers=[
            dict(
                sourcetype = 'geojson',
                source = 'https://raw.githubusercontent.com/plotly/datasets/master/florida-red-data.json',
                type = 'fill',
                color = 'rgba(163,22,19,0.8)'
            ),
            dict(
                sourcetype = 'geojson',
                source = 'https://raw.githubusercontent.com/plotly/datasets/master/florida-blue-data.json',
                type = 'fill',
                color = 'rgba(40,0,113,0.8)'
            )
        ],
        accesstoken=mapbox_access_token,
        bearing=0,
        center=dict(
            lat=27.8,
            lon=-83
        ),
        pitch=0,
        zoom=5.2,
        style='light'
    ),
)

fig = dict(data=data, layout=layout)
py.iplot(fig, filename='county-level-choropleths-python')

----------------------------------------

TITLE: Retrieving Stream Tokens in Python
DESCRIPTION: Code to retrieve stream tokens from the credentials file. Stream tokens are required for creating streaming plots.

LANGUAGE: python
CODE:
stream_ids = tls.get_credentials_file()['stream_ids']

----------------------------------------

TITLE: Plotting Correlation Between Saw and Square Waves
DESCRIPTION: Creates and visualizes a saw wave, square wave, and their convolution using Plotly's Scatter plots. Uses SciPy's signal module to generate the waveforms and calculate convolution.

LANGUAGE: python
CODE:
x = np.linspace(0, 20, 50)
saw_y = signal.sawtooth(t=x)
square_y = signal.square(t=x)
convolve_y = signal.convolve(saw_y, square_y)

trace_saw = go.Scatter(
    x = x,
    y = saw_y,
    mode = 'lines',
    name = 'Saw',
    marker=dict(
        color='#57D1C9'
    )
)

trace_square = go.Scatter(
    x = x,
    y = square_y,
    mode = 'lines',
    name = 'Square',
    marker=dict(
        color='#ED5485'
    )
)

trace_convolution = go.Scatter(
    x = x,
    y = convolve_y,
    mode = 'lines',
    name = 'Convolution',
    marker=dict(
        color='#FFE869'
    )
)

data = [trace_saw, trace_square, trace_convolution]
py.iplot(data, filename='1d-convolution-of-saw-and-square')

----------------------------------------

TITLE: Publishing a Plotly Graph to Chart Studio in R
DESCRIPTION: Demonstrates how to publish a plotly graph to Chart Studio and embed it in an RMarkdown document.

LANGUAGE: r
CODE:
f <- api_create(p)
class(f)
f

----------------------------------------

TITLE: Visualizing Triangular Moving Average Smoothing with Plotly
DESCRIPTION: This code applies the Triangular Moving Average smoothing to the sample data and creates an interactive plot using Plotly to compare the original, noisy, and smoothed data.

LANGUAGE: python
CODE:
trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    marker=dict(
        size=2,
        color='rgb(0, 0, 0)',
    ),
    name='Sine'
)

trace2 = go.Scatter(
    x=x,
    y=y_noise,
    mode='markers',
    marker=dict(
        size=6,
        color='#5E88FC',
        symbol='circle-open'
    ),
    name='Noisy Sine'
)

trace3 = go.Scatter(
    x=x,
    y=smoothTriangle(y_noise, 10),  # setting degree to 10
    mode='markers',
    marker=dict(
        size=6,
        color='#C190F0',
        symbol='triangle-up'
    ),
    name='Moving Triangle - Degree 10'
)

layout = go.Layout(
    showlegend=True
)

data = [trace1, trace2, trace3]
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='smoothing-triangular-moving-average-degree-10')

----------------------------------------

TITLE: Importing Required Libraries for Plotly Visualization
DESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, and SciPy for data visualization and analysis.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Creating Scatter Plot with Marker Borders in Plotly
DESCRIPTION: This code creates a scatter plot with custom marker borders using Plotly. It demonstrates how to set marker size, color, and border properties for multiple data series.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))
  
data = [
    go.Scatter(
        mode = 'markers',
        x = x,
        y = y,
        marker = dict(
          color = 'rgb(17, 157, 255)',
          size = 20,
          line = dict(
            color = 'rgb(231, 99, 250)',
            width = 2
          )
        ),
        showlegend = False
  ),
  go.Scatter(
      mode = 'markers',
      x = [2],
      y = [4.5],
      marker = dict(
        color = 'rgb(17, 157, 255)',
        size = 120,
        line = dict(
          color = 'rgb(231, 99, 250)',
          width = 12
        )
      ),
      showlegend = False
  )]

py.iplot(data, filename = "style-add-border")

----------------------------------------

TITLE: Creating a Basic Contour Plot in Python with Plotly
DESCRIPTION: This code creates a basic contour plot using Plotly's go.Contour object. It sets the z values for the contour plot and uses default settings for colors and lines.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]]
    )
]
py.iplot(data)

----------------------------------------

TITLE: Creating Data Object with Multiple Traces in Plotly
DESCRIPTION: Creates a Data object containing multiple Scatter traces.

LANGUAGE: python
CODE:
data = Data([trace_china, trace_usa])

----------------------------------------

TITLE: Plotting Routes Between Stations
DESCRIPTION: Creates an interactive map showing the driving route between two Tesla supercharger stations using Google Maps Directions API and Plotly Scattermapbox

LANGUAGE: python
CODE:
def plot_route_between_tesla_stations(address_start, address_end, zoom=3, endpt_size=6):
    start = (supercharger_locations[address_start]['latitude'], supercharger_locations[address_start]['longitude'])
    end = (supercharger_locations[address_end]['latitude'], supercharger_locations[address_end]['longitude'])
    
    directions = gmaps.directions(start, end)
    steps = []
    steps.append(start)  # add starting coordinate to trip
    
    for index in range(len(directions[0]['legs'][0]['steps'])):
        start_coords = directions[0]['legs'][0]['steps'][index]['start_location']
        steps.append((start_coords['lat'], start_coords['lng']))

        if index == len(directions[0]['legs'][0]['steps']) - 1:
            end_coords = directions[0]['legs'][0]['steps'][index]['end_location']
            steps.append((end_coords['lat'], end_coords['lng']))

    steps.append(end)  # add ending coordinate to trip

    mapbox_access_token = "ADD_YOUR_TOKEN_HERE"

    data = Data([
        Scattermapbox(
            lat=[item_x[0] for item_x in steps],
            lon=[item_y[1] for item_y in steps],
            mode='markers+lines',
            marker=Marker(
                size=[endpt_size] + [4 for j in range(len(steps) - 2)] + [endpt_size]
            ),
        )
    ])
    layout = Layout(
        autosize=True,
        hovermode='closest',
        mapbox=dict(
            accesstoken=mapbox_access_token,
            bearing=0,
            style='streets',
            center=dict(
                lat=np.mean([float(step[0]) for step in steps]),
                lon=np.mean([float(step[1]) for step in steps]),
            ),
            pitch=0,
            zoom=zoom
        ),
    )

    fig = dict(data=data, layout=layout)
    return fig

----------------------------------------

TITLE: Creating 3D Surface Subplots for Ring Cyclide Visualization with Plotly in Python
DESCRIPTION: This snippet sets up the layout for two 3D surface subplots using Plotly, configures the scene properties, and adds annotations. It demonstrates advanced plot customization and subplot creation in Plotly.

LANGUAGE: python
CODE:
scene = dict(
    xaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    yaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    zaxis=dict(
        gridcolor='rgb(255, 255, 255)',
        zerolinecolor='rgb(255, 255, 255)',
        showbackground=True,
        backgroundcolor='rgb(230, 230,230)'
    ),
    cameraposition = [[0.2, 0.5, 0.5, 0.2], [0, 0, 0], 3.5]
)

fig = tools.make_subplots(rows=1, cols=2,
                          specs=[[{'is_3d': True}, {'is_3d': True}]])

data_original['scene'] = 'scene1'
data_original['colorbar'] = dict(x=-0.07)

data['scene'] = 'scene2'
fig.append_trace(data_original, 1, 1)
fig.append_trace(data, 1, 2)

fig['layout'].update(title='Ring Cyclide',
                     height=800, width=9000)
fig['layout']['scene1'].update(scene)
fig['layout']['scene2'].update(scene)
fig['layout']['annotations'] = [
        dict(
            x=0.1859205,
            y=0.95,       #0.9395833,
            xref='x',
            yref='y',
            text='4th Dim Prop. to z',
            showarrow=False
        ),
            dict(
            x=0.858,
            y=0.95,
            xref='x',
            yref='y',
            text='4th Dim Prop. to Distance from Origin',
            showarrow=False
        )
    
    ]

plot_url = py.plot(fig, filename='multiple_surface_plots', auto_open=False)

----------------------------------------

TITLE: Creating Interactive Population Distribution Plots
DESCRIPTION: Creates interactive bar charts using Plotly to visualize population demographics across Baltimore neighborhoods.

LANGUAGE: python
CODE:
df_white_sorted = df['pwhite10'].sort(inplace=False)

# Create a horizontal bar chart with plotly.
data = pgo.Data([
    pgo.Bar(
            y=df_white_sorted.index,
            x=df_white_sorted,
            orientation='h'
    )
])

----------------------------------------

TITLE: Creating an Animated Bubble Chart
DESCRIPTION: Generates an interactive animated bubble chart using the Gapminder dataset, demonstrating GDP per capita vs life expectancy over time.

LANGUAGE: python
CODE:
from plotly.offline import init_notebook_mode, iplot
from IPython.display import display, HTML

import pandas as pd

init_notebook_mode(connected=True)

url = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'
dataset = pd.read_csv(url)

years = ['1952', '1962', '1967', '1972', '1977', '1982', '1987', '1992', '1997', '2002', '2007']
continents = list(set(dataset['continent']))

figure = {
    'data': [],
    'layout': {},
    'frames': []
}

# Configure layout
figure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy'}
figure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log'}
figure['layout']['hovermode'] = 'closest'

# Add slider
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Year:',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

# Create frames and slider steps
for year in years:
    frame = {'data': [], 'name': str(year)}
    for continent in continents:
        dataset_by_year = dataset[dataset['year'] == int(year)]
        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]
        
        data_dict = {
            'x': list(dataset_by_year_and_cont['lifeExp']),
            'y': list(dataset_by_year_and_cont['gdpPercap']),
            'mode': 'markers',
            'text': list(dataset_by_year_and_cont['country']),
            'marker': {
                'sizemode': 'area',
                'sizeref': 200000,
                'size': list(dataset_by_year_and_cont['pop'])
            },
            'name': continent
        }
        frame['data'].append(data_dict)
    
    figure['frames'].append(frame)
    slider_step = {'args': [
        [year],
        {'frame': {'duration': 300, 'redraw': False},
         'mode': 'immediate',
         'transition': {'duration': 300}}
     ],
     'label': year,
     'method': 'animate'}
    sliders_dict['steps'].append(slider_step)

figure['layout']['sliders'] = [sliders_dict]

# Add play button
figure['layout']['updatemenus'] = [
    {
        'buttons': [
            {
                'args': [None, {'frame': {'duration': 500, 'redraw': False},
                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],
                'label': 'Play',
                'method': 'animate'
            },
            {
                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',
                'transition': {'duration': 0}}],
                'label': 'Pause',
                'method': 'animate'
            }
        ],
        'direction': 'left',
        'pad': {'r': 10, 't': 87},
        'showactive': False,
        'type': 'buttons',
        'x': 0.1,
        'xanchor': 'right',
        'y': 0,
        'yanchor': 'top'
    }
]

# Add data for first year
year = 1952
for continent in continents:
    dataset_by_year = dataset[dataset['year'] == year]
    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]

    data_dict = {
        'x': list(dataset_by_year_and_cont['lifeExp']),
        'y': list(dataset_by_year_and_cont['gdpPercap']),
        'mode': 'markers',
        'text': list(dataset_by_year_and_cont['country']),
        'marker': {
            'sizemode': 'area',
            'sizeref': 200000,
            'size': list(dataset_by_year_and_cont['pop'])
        },
        'name': continent
    }
    figure['data'].append(data_dict)

iplot(figure)

----------------------------------------

TITLE: Creating Scatter Plot of Open Opportunities
DESCRIPTION: Queries open opportunities and creates an interactive scatter plot showing deal amounts, close dates, and probabilities using Plotly.

LANGUAGE: python
CODE:
large_opps = sf.query("SELECT Id, Name, Probability, ExpectedRevenue, StageName, Amount, CloseDate, Owner.Name FROM Opportunity WHERE StageName NOT IN ('Closed Lost', 'Closed Won') AND Amount > 5000")

large_opps_df = pd.DataFrame(large_opps['records'])
large_opps_df['Owner'] = large_opps_df.Owner.apply(lambda x: x['Name'])
large_opps_df.drop('attributes', inplace=True, axis=1)

scatters = []
for name, temp_df in large_opps_df.groupby('Owner'):
    hover_text = temp_df.Name + "<br>Close Probability: " + temp_df.Probability.map(str) + "<br>Stage:" + temp_df.StageName
    scatters.append(
        go.Scatter(
            x=temp_df.CloseDate,
            y=temp_df.Amount,
            mode='markers',
            name=name,
            text=hover_text,
            marker=dict(
                size=(temp_df.Probability / 2)
            )
        )
    )

data = scatters
layout = go.Layout(
    title='Open Large Deals',
    xaxis=dict(
        title='Close Date'
    ),
    yaxis=dict(
        title='Deal Amount',
        showgrid=False
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='salesforce/open-large-deals-scatter')

----------------------------------------

TITLE: Creating Streamline Plot with Source Point
DESCRIPTION: Creates a more complex streamline plot that includes a source point. Demonstrates combining streamline visualization with scatter plot markers.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import numpy as np

N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace(x_start, x_end, N)
y = np.linspace(y_start, y_end, N)
X, Y = np.meshgrid(x, y)
source_strength = 5.0
x_source, y_source = -1.0, 0.0

# Compute the velocity field on the mesh grid
u = (source_strength/(2*np.pi) *
     (X-x_source)/((X-x_source)**2 + (Y-y_source)**2))
v = (source_strength/(2*np.pi) *
     (Y-y_source)/((X-x_source)**2 + (Y-y_source)**2))

# Create streamline figure
fig = ff.create_streamline(x, y, u, v,
                           name='streamline')

# Add source point
source_point = go.Scatter(x=[x_source], y=[y_source],
                          mode='markers',
                          marker=go.Marker(size=14),
                          name='source point')

# Add source point to figure
fig['data'].append(source_point)
py.iplot(fig, filename='streamline_source')

----------------------------------------

TITLE: Creating Custom Heatmap Colorscale in Plotly
DESCRIPTION: This snippet shows how to create a custom heatmap colorscale using Plotly. It loads data from a JSON file and applies a custom colorscale to the heatmap.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import six.moves.urllib
import json

response = six.moves.urllib.request.urlopen('https://raw.githubusercontent.com/plotly/datasets/master/custom_heatmap_colorscale.json')
dataset = json.load(response)

data = [
    go.Heatmap(
        z=dataset['z'],
        colorscale=[[0.0, 'rgb(165,0,38)'], [0.1111111111111111, 'rgb(215,48,39)'], [0.2222222222222222, 'rgb(244,109,67)'], [0.3333333333333333, 'rgb(253,174,97)'], [0.4444444444444444, 'rgb(254,224,144)'], [0.5555555555555556, 'rgb(224,243,248)'], [0.6666666666666666, 'rgb(171,217,233)'], [0.7777777777777778, 'rgb(116,173,209)'], [0.8888888888888888, 'rgb(69,117,180)'], [1.0, 'rgb(49,54,149)']]
    )
]
py.iplot(data, filename='custom-colorscale')

----------------------------------------

TITLE: Converting cmocean Colormaps to Plotly Colorscales
DESCRIPTION: Function to convert a cmocean colormap to a Plotly colorscale format. Takes a colormap and number of entries as input and returns a Plotly-compatible colorscale list.

LANGUAGE: python
CODE:
def cmocean_to_plotly(cmap, pl_entries):
    h = 1.0/(pl_entries-1)
    pl_colorscale = []
    
    for k in range(pl_entries):
        C = map(np.uint8, np.array(cmap(k*h)[:3])*255)
        pl_colorscale.append([k*h, 'rgb'+str((C[0], C[1], C[2]))])
        
    return pl_colorscale

----------------------------------------

TITLE: Creating Logarithmic Axes in Plotly Python
DESCRIPTION: This example demonstrates how to create logarithmic axes. It sets both x and y axes to logarithmic scale with auto-ranging enabled.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        type='log',
        autorange=True
    ),
    yaxis=dict(
        type='log',
        autorange=True
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-range-type')

----------------------------------------

TITLE: Creating Multiple Y-Axes Subplots with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a 2x2 grid of subplots, each with two Y-axes, using Plotly's graph_objs module. It creates eight scatter plots, configures the layout to create four separate plotting areas, and assigns each plot to its respective axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Top left
trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 32, 62],
    name='yaxis data',
)
trace2 = go.Scatter(
    x=[1, 2, 3],
    y=[40, 50, 60],
    name='yaxis2 data',
    yaxis='y2'
)

# Top right
trace3 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 32, 62],
    name='yaxis3 data',
    xaxis='x2',
    yaxis='y3'
)
trace4 = go.Scatter(
    x=[1, 2, 3],
    y=[40, 50, 60],
    name='yaxis4 data',
    xaxis='x2',
    yaxis='y4'
)

# Bottom left
trace5 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 32, 62],
    name='yaxis5 data',
    xaxis='x3',
    yaxis='y5'
)
trace6 = go.Scatter(
    x=[1, 2, 3],
    y=[40, 50, 60],
    name='yaxis6 data',
    xaxis='x3',
    yaxis='y6'
)

# Bottom right
trace7 = go.Scatter(
    x=[1, 2, 3],
    y=[2, 32, 62],
    name='yaxis7 data',
    xaxis='x4',
    yaxis='y7'
)
trace8 = go.Scatter(
    x=[1, 2, 3],
    y=[40, 50, 60],
    name='yaxis8 data',
    xaxis='x4',
    yaxis='y8'
)


data = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8]
layout = go.Layout(
    title='Double Y Axis Example',
    legend={'x': 1.1},
    width=1000,
    height=500,
    # Top left
    xaxis=dict(
        title='xaxis title',
        domain=[0, 0.4]
    ),
    yaxis=dict(
        title='yaxis title',
        type='log',
        domain=[0.6, 1.0],
        anchor='x'
    ),
    yaxis2=dict(
        title='yaxis2 title',
        overlaying='y',
        side='right'
    ),
    
    # Top right
    xaxis2=dict(
        title='xaxis2 title',
        domain=[0.6, 1.0],
        anchor='y3'
    ),
    yaxis3=dict(
        type='log',
        title='yaxis3 title',
        domain=[0.6, 1.0],
        anchor='x2'
    ),
    yaxis4=dict(
        title='yaxis4 title',
        domain=[0.6, 1.0],
        overlaying='y3',
        side='right',
        anchor='x2'
    ),
    
    # Bottom left
    xaxis3=dict(
        title='xaxis3 title',
        domain=[0, 0.4],
        anchor='y5'
    ),
    yaxis5=dict(
        type='log',
        title='yaxis5 title',
        domain=[0, 0.4],
        anchor='x3'
    ),
    yaxis6=dict(
        title='yaxis6 title',
        domain=[0, 0.4],
        overlaying='y5',
        side='right',
        anchor='x3'
    ),
    
    # Bottom right
    xaxis4=dict(
        title='xaxis4, title',
        domain=[0.6, 1.0],
        anchor='y7'
    ),
    yaxis7=dict(
        type='log',
        title='yaxis7 title',
        domain=[0, 0.4],
        anchor='x4'
    ),
    yaxis8=dict(
        title='yaxis8 title',
        domain=[0, 0.4],
        overlaying='y7',
        side='right',
        anchor='x4'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='multiple-y-axes-subplots')

----------------------------------------

TITLE: Initializing Trace for Streaming Plot
DESCRIPTION: Creates a Scatter trace object with an embedded stream ID.

LANGUAGE: python
CODE:
trace1 = Scatter(
    x=[],
    y=[],
    mode='lines+markers',
    stream=stream
)

data = Data([trace1])

----------------------------------------

TITLE: Square Area Calculation and Visualization
DESCRIPTION: Functions to sort polygon vertices, calculate polygon area, and create an interactive plot showing a square's area using Plotly. Includes vertex sorting based on angles and area calculation using the shoelace formula.

LANGUAGE: python
CODE:
def PolygonSort(corners):
    n = len(corners)
    cx = float(sum(x for x, y in corners)) / n
    cy = float(sum(y for x, y in corners)) / n
    cornersWithAngles = []
    for x, y in corners:
        an = (np.arctan2(y - cy, x - cx) + 2.0 * np.pi) % (2.0 * np.pi)
        cornersWithAngles.append((x, y, an))
    cornersWithAngles.sort(key = lambda tup: tup[2])
    return map(lambda (x, y, an): (x, y), cornersWithAngles)

def PolygonArea(corners):
    n = len(corners)
    area = 0.0
    for i in range(n):
        j = (i + 1) % n
        area += corners[i][0] * corners[j][1]
        area -= corners[j][0] * corners[i][1]
    area = abs(area) / 2.0
    return area

corners = [(0, 0), (1, 1), (0, 1), (1, 0)]
corners_sorted = PolygonSort(corners)
area = PolygonArea(corners_sorted)

x = [corner[0] for corner in corners_sorted]
y = [corner[1] for corner in corners_sorted]

annotation = go.Annotation(
    x=1.5,
    y=1.0,
    text='The area of the polygon is approximately %s' % (area),
    showarrow=False
)

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    fill='tonexty',
)

layout = go.Layout(
    annotations=[annotation],
    xaxis=dict(
        range=[-1, 2]
    ),
    yaxis=dict(
        range=[-1, 2]
    )
)

trace_data = [trace1]
fig = go.Figure(data=trace_data, layout=layout)

py.iplot(fig, filename='square-area')

----------------------------------------

TITLE: Customizing Subplots Layout in Plotly Python
DESCRIPTION: Demonstrates how to customize the layout of subplots by modifying axis properties and removing annotations.

LANGUAGE: python
CODE:
fig.data[1].yaxis = 'y1'
fig.data[1].xaxis = 'x1'
del fig.layout['xaxis2']
del fig.layout['yaxis2']
del fig.layout.annotations[0]   #deletes annotation for `First Subplot`
del fig.layout.annotations[0]   #deletes annotation for `Second Subplot` because of shift
fig.layout.xaxis1.domain = [0.0, 1]

py.iplot(fig, filename='box-heatmap-fixed')

----------------------------------------

TITLE: Creating Interactive Scatter Plot with Click Callback in Python using Plotly
DESCRIPTION: This code snippet demonstrates how to create an interactive scatter plot using Plotly's FigureWidget and implement a click callback to update point colors and sizes. It uses numpy for generating random data and plotly.graph_objs for creating the plot.

LANGUAGE: python
CODE:
import plotly.graph_objs as go

import numpy as np

x = np.random.rand(100)
y = np.random.rand(100)

f = go.FigureWidget([go.Scatter(x=x, y=y, mode='markers')])

scatter = f.data[0]
colors = ['#a3a7e4'] * 100
scatter.marker.color = colors
scatter.marker.size = [10] * 100
f.layout.hovermode = 'closest'


# create our callback function
def update_point(trace, points, selector):
    c = list(scatter.marker.color)
    s = list(scatter.marker.size)
    for i in points.point_inds:
        c[i] = '#bae2be'
        s[i] = 20
        scatter.marker.color = c
        scatter.marker.size = s


scatter.on_click(update_point)

f

----------------------------------------

TITLE: Creating a Table with an Adjacent Graph
DESCRIPTION: Shows how to create a table with an adjacent graph using Plotly Figure Factory and Graph Objects.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

# Add table data
table_data = [['Team', 'Wins', 'Losses', 'Ties'],
              ['Montréal<br>Canadiens', 18, 4, 0],
              ['Dallas Stars', 18, 5, 0],
              ['NY Rangers', 16, 5, 0], 
              ['Boston<br>Bruins', 13, 8, 0],
              ['Chicago<br>Blackhawks', 13, 8, 0],
              ['LA Kings', 13, 8, 0],
              ['Ottawa<br>Senators', 12, 5, 0]]
# Initialize a figure with FF.create_table(table_data)
figure = ff.create_table(table_data, height_constant=60)

# Add graph data
teams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',
         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]
# Make traces for graph
trace1 = go.Scatter(x=teams, y=GFPG,
                    marker=dict(color='#0099ff'),
                    name='Goals For<br>Per Game',
                    xaxis='x2', yaxis='y2')
trace2 = go.Scatter(x=teams, y=GAPG,
                    marker=dict(color='#404040'),
                    name='Goals Against<br>Per Game',
                    xaxis='x2', yaxis='y2')

# Add trace data to figure
figure['data'].extend(go.Data([trace1, trace2]))

# Edit layout for subplots
figure.layout.xaxis.update({'domain': [0, .5]})
figure.layout.xaxis2.update({'domain': [0.6, 1.]})
# The graph's yaxis MUST BE anchored to the graph's xaxis
figure.layout.yaxis2.update({'anchor': 'x2'})
figure.layout.yaxis2.update({'title': 'Goals'})
# Update the margins to add a title and see graph x-labels. 
figure.layout.margin.update({'t':50, 'b':100})
figure.layout.update({'title': '2016 Hockey Stats'})

# Plot!
py.iplot(figure, filename='subplot_table')

----------------------------------------

TITLE: Creating Multi-Line Plot from CSV Data
DESCRIPTION: Creates an interactive line plot with multiple traces using data from a CSV file

LANGUAGE: python
CODE:
trace1 = go.Scatter(
                    x=df['x'], y=df['logx'], # Data
                    mode='lines', name='logx' # Additional options
                   )
trace2 = go.Scatter(x=df['x'], y=df['sinx'], mode='lines', name='sinx' )
trace3 = go.Scatter(x=df['x'], y=df['cosx'], mode='lines', name='cosx')

layout = go.Layout(title='Simple Plot from csv data',
                   plot_bgcolor='rgb(230, 230,230)')

fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)

# Plot data in the notebook
py.iplot(fig, filename='simple-plot-from-csv')

----------------------------------------

TITLE: Generating a Scatter Plot Matrix
DESCRIPTION: Creates a scatter plot matrix showing relationships between all variables in the wind speed dataset.

LANGUAGE: python
CODE:
fig = FF.create_scatterplotmatrix(wind_data,
                                  height=1000,
                                  width=1000,
                                  title='Wind Data - Scatterplot Matrix')
py.iplot(fig, filename='wind-data-scatterplot-matrix')

----------------------------------------

TITLE: Configuring Axis Range Modes in Plotly Python
DESCRIPTION: This example demonstrates different range modes for axes: 'tozero' for x-axis and 'nonnegative' for y-axis. It shows how to ensure axes include zero or only positive values.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[2, 4, 6],
        y=[-3, 0, 3]
    )
]
layout = go.Layout(
    showlegend=False,
    xaxis=dict(
        rangemode='tozero',
        autorange=True
    ),
    yaxis=dict(
        rangemode='nonnegative',
        autorange=True
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-range-mode')

----------------------------------------

TITLE: Generating Time Series Plot of Accidents by Borough
DESCRIPTION: Extracts date and borough data, aggregates it over time, and creates an interactive time series plot for each borough using Plotly.

LANGUAGE: python
CODE:
dates_borough = store.select("nypd", "columns=['date', 'borough']").sort('date')
dates_borough['COUNT'] = 1
date_borough_sum = dates_borough.groupby(['borough', "date"]).sum()

data = []
for g, df in date_borough_sum.reset_index().groupby('borough'):
    data.append(Scatter(x= df.date, y=df.COUNT,name=g))
layout = Layout(xaxis=XAxis(title="Date"), yaxis=YAxis(title="Accident Count"))

py.iplot(Figure(data=Data(data), layout=layout), filename='nypd_crashes/over_time')

----------------------------------------

TITLE: Generating US Map Small Multiples with Plotly in Python
DESCRIPTION: This code snippet loads Walmart store opening data, creates multiple US maps for different years, and adds sparklines to show store growth trends. It uses Plotly and Pandas to process data and generate an interactive visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv')
df.head()

data = []
layout = dict(
    title = 'New Walmart Stores per year 1962-2006<br>\
Source: <a href="http://www.econ.umn.edu/~holmes/data/WalMart/index.html">\
University of Minnesota</a>',
    # showlegend = False,
    autosize = False,
    width = 1000,
    height = 900,
    hovermode = False,
    legend = dict(
        x=0.7,
        y=-0.1,
        bgcolor="rgba(255, 255, 255, 0)",
        font = dict( size=11 ),
    )
)
years = df['YEAR'].unique()

for i in range(len(years)):
    geo_key = 'geo'+str(i+1) if i != 0 else 'geo'
    lons = list(df[ df['YEAR'] == years[i] ]['LON'])
    lats = list(df[ df['YEAR'] == years[i] ]['LAT'])
    # Walmart store data
    data.append(
        dict(
            type = 'scattergeo',
            showlegend=False,
            lon = lons,
            lat = lats,
            geo = geo_key,
            name = years[i],
            marker = dict(
                color = "rgb(0, 0, 255)",
                opacity = 0.5
            )
        )
    )
    # Year markers
    data.append(
        dict(
            type = 'scattergeo',
            showlegend = False,
            lon = [-78],
            lat = [47],
            geo = geo_key,
            text = [years[i]],
            mode = 'text',
        )
    )
    layout[geo_key] = dict(
        scope = 'usa',
        showland = True,
        landcolor = 'rgb(229, 229, 229)',
        showcountries = False,
        domain = dict( x = [], y = [] ),
        subunitcolor = "rgb(255, 255, 255)",
    )


def draw_sparkline( domain, lataxis, lonaxis ):
    ''' Returns a sparkline layout object for geo coordinates  '''
    return dict(
        showland = False,
        showframe = False,
        showcountries = False,
        showcoastlines = False,
        domain = domain,
        lataxis = lataxis,
        lonaxis = lonaxis,
        bgcolor = 'rgba(255,200,200,0.0)'
    )

# Stores per year sparkline
layout['geo44'] = draw_sparkline({'x':[0.6,0.8], 'y':[0,0.15]}, \
                                 {'range':[-5.0, 30.0]}, {'range':[0.0, 40.0]} )
data.append(
    dict(
        type = 'scattergeo',
        mode = 'lines',
        lat = list(df.groupby(by=['YEAR']).count()['storenum']/1e1),
        lon = range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1)),
        line = dict( color = "rgb(0, 0, 255)" ),
        name = "New stores per year<br>Peak of 178 stores per year in 1990",
        geo = 'geo44',
    )
)

# Cumulative sum sparkline
layout['geo45'] = draw_sparkline({'x':[0.8,1], 'y':[0,0.15]}, \
                                 {'range':[-5.0, 50.0]}, {'range':[0.0, 50.0]} )
data.append(
    dict(
        type = 'scattergeo',
        mode = 'lines',
        lat = list(df.groupby(by=['YEAR']).count().cumsum()['storenum']/1e2),
        lon = range(len(df.groupby(by=['YEAR']).count()['storenum']/1e1)),
        line = dict( color = "rgb(214, 39, 40)" ),
        name ="Cumulative sum<br>3176 stores total in 2006",
        geo = 'geo45',
    )
)

z = 0
COLS = 5
ROWS = 9
for y in reversed(range(ROWS)):
    for x in range(COLS):
        geo_key = 'geo'+str(z+1) if z != 0 else 'geo'
        layout[geo_key]['domain']['x'] = [float(x)/float(COLS), float(x+1)/float(COLS)]
        layout[geo_key]['domain']['y'] = [float(y)/float(ROWS), float(y+1)/float(ROWS)]
        z=z+1
        if z > 42:
            break

fig = { 'data':data, 'layout':layout }
py.iplot( fig, filename='US Walmart growth', height=900, width=1000 )

----------------------------------------

TITLE: Advanced Streamtube Plot with Custom Starting Positions
DESCRIPTION: Creates a more complex streamtube visualization with custom starting positions and segment control. Includes wind data visualization with specific aspect ratio and margin settings.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv').drop(['Unnamed: 0'],axis=1)

data = [go.Streamtube(
    x = df['x'],
    y = df['y'],
    z = df['z'],
    u = df['u'],
    v = df['v'],
    w = df['w'],
    starts = dict(
        x = [80] * 16,
        y = [20,30,40,50] * 4,
        z = [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]
    ),
    sizeref = 0.3,
    colorscale = 'Portland',
    showscale = False,
    maxdisplayed = 3000
)]

layout = go.Layout(
    scene = dict(
        aspectratio = dict(
            x = 2,
            y = 1,
            z = 0.3
        )
    ),
    margin = dict(
        t = 20,
        b = 20,
        l = 20,
        r = 20
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename="streamtube wind")

----------------------------------------

TITLE: Applying Q-Test to Wind Speed Data in Python
DESCRIPTION: This code applies the Q-Test to a subset of the wind speed data to determine if the minimum value is an outlier.

LANGUAGE: python
CODE:
dataset = data[100:130]['10 Min Sampled Avg'].values.tolist()
dataset.sort()
q_test_for_smallest_point(dataset)

----------------------------------------

TITLE: Using Two Sliders for Range Selection
DESCRIPTION: This code creates a Plotly chart with two separate slider widgets to interactively set the x-axis range. It demonstrates linking the sliders and updating the chart layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import ipywidgets as widgets

from ipywidgets import interact, interactive, fixed
from IPython.core.display import HTML
from IPython.display import display, clear_output
from plotly.widgets import GraphWidget
from traitlets import link


styles = '''<style>.widget-hslider { width: 100%; }
    .widget-hbox { width: 100% !important; }
    .widget-slider { width: 100% !important; }</style>'''

HTML(styles)

#this widget will display our plotly chart
graph = GraphWidget("https://plotly.com/~jordanpeterson/889")
fig = py.get_figure("https://plotly.com/~jordanpeterson/889")

#find the range of the slider.
xmin, xmax = fig['layout']['xaxis']['range']

# let's define our listener functions that will respond to changes in the sliders
def on_value_change_left(change):
    graph.relayout({'xaxis.range[0]': change['new']})
    
def on_value_change_right(change):
    graph.relayout({'xaxis.range[1]': change['new']})
    
# define the sliders
left_slider = widgets.FloatSlider(min=xmin, max=xmax, value=xmin, description="Left Slider")
right_slider = widgets.FloatSlider(min=xmin, max=xmax, value=xmax, description="Right Slider")

# put listeners on slider activity
left_slider.observe(on_value_change_left, names='value')
right_slider.observe(on_value_change_right, names='value')

# set a relationship between the left and right slider
link((left_slider, 'max'), (right_slider, 'value'))
link((left_slider, 'value'), (right_slider, 'min'))

# display our app
display(left_slider)
display(right_slider)
display(graph)

----------------------------------------

TITLE: Creating Colorscale for Contour Plot in Plotly
DESCRIPTION: This code creates a contour plot with a 'Jet' colorscale using Plotly. It demonstrates how to set up the z-values and apply a predefined colorscale to the contour plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale='Jet',
    )
]

py.iplot(data, filename='simple-colorscales-colorscale')

----------------------------------------

TITLE: Creating 3D Mesh Cube
DESCRIPTION: Creates a cube mesh with custom vertex coordinates, face indices, and color gradients. Includes colorbar configuration and axis labels.

LANGUAGE: python
CODE:
data = [
    go.Mesh3d(
        x = [0, 0, 1, 1, 0, 0, 1, 1],
        y = [0, 1, 1, 0, 0, 1, 1, 0],
        z = [0, 0, 0, 0, 1, 1, 1, 1],
        colorbar = go.ColorBar(
            title='z'
        ),
        colorscale = [[0, 'rgb(255, 0, 255)'],
                    [0.5, 'rgb(0, 255, 0)'], 
                      [1, 'rgb(0, 0, 255)']],
        intensity = [0, 0.142857142857143, 0.285714285714286, 
                     0.428571428571429, 0.571428571428571, 
                     0.714285714285714, 0.857142857142857, 1],
        i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
        j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
        k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
        name='y',
        showscale=True
    )
]
layout = go.Layout(
    xaxis=go.XAxis(
        title='x'
    ),
    yaxis=go.YAxis(
        title='y'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='3d-mesh-cube-python')

----------------------------------------

TITLE: Graph Widget Initialization JavaScript
DESCRIPTION: Core JavaScript implementation of the Plotly graph widget including iframe handling, message passing, and event management. Extends DOMWidgetView for IPython widget functionality.

LANGUAGE: javascript
CODE:
window.genUID = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });
};

var IPYTHON_VERSION = '3';

require(["widgets/js/widget", "widgets/js/manager"], function (widget, manager) {
    if (!('DOMWidgetView' in widget)) {
        IPYTHON_VERSION = '2';
        manager = {WidgetManager: widget};
        widget = {DOMWidgetView: IPython.DOMWidgetView};
    }
    // ... remaining implementation

----------------------------------------

TITLE: Creating a Basic Plotly Scatter Plot with Default Legend
DESCRIPTION: Demonstrates how to create a basic scatter plot with two traces, which by default displays a legend.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)

data = [trace0, trace1]
fig = go.Figure(data=data)

py.iplot(fig, filename='default-legend')

----------------------------------------

TITLE: Creating an Empty FigureWidget and Adding a Scatter Trace
DESCRIPTION: Creates an empty FigureWidget and adds an empty scatter trace to it. This sets up the base plot that will be modified interactively.

LANGUAGE: python
CODE:
fig = go.FigureWidget()
scatt = fig.add_scatter()
fig

----------------------------------------

TITLE: Creating a Basic 3D Cone Plot with Plotly in Python
DESCRIPTION: This code creates a basic 3D cone plot using Plotly. It defines a single cone with position and direction vectors, and sets up the layout with a specific camera angle.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [{
    'type': 'cone',
    'x': [1], 'y': [1], 'z': [1],
    'u': [1], 'v': [1], 'w': [0]
}]

layout = {
    'scene': {
      'camera': {
        'eye': {'x': -0.76, 'y': 1.8, 'z': 0.92}
      }
    }
}

fig = {"data": data, "layout": layout}
py.iplot(fig, filename='cone-basic', validate=False)

----------------------------------------

TITLE: Creating a Colored Horizontal Bar Chart with Plotly
DESCRIPTION: This code creates a more complex horizontal bar chart with multiple data series and custom colors.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Bar(
    y=['giraffes', 'orangutans', 'monkeys'],
    x=[20, 14, 23],
    name='SF Zoo',
    orientation = 'h',
    marker = dict(
        color = 'rgba(246, 78, 139, 0.6)',
        line = dict(
            color = 'rgba(246, 78, 139, 1.0)',
            width = 3)
    )
)
trace2 = go.Bar(
    y=['giraffes', 'orangutans', 'monkeys'],
    x=[12, 18, 29],
    name='LA Zoo',
    orientation = 'h',
    marker = dict(
        color = 'rgba(58, 71, 80, 0.6)',
        line = dict(
            color = 'rgba(58, 71, 80, 1.0)',
            width = 3)
    )
)

data = [trace1, trace2]
layout = go.Layout(
    barmode='stack'
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='marker-h-bar')

----------------------------------------

TITLE: Creating Animation Frames for Gapminder Visualization
DESCRIPTION: Generates animation frames for each year and continent, and configures slider steps for the animation control.

LANGUAGE: python
CODE:
for year in years:
    frame = {'data': [], 'name': str(year)}
    for continent in continents:
        data_dict = {
            'xsrc': grid.get_column_reference(col_name_template.format(
                year=year, continent=continent, header='lifeExp'
            )),
            'ysrc': grid.get_column_reference(col_name_template.format(
                year=year, continent=continent, header='gdpPercap'
            )),
            'mode': 'markers',
            'textsrc': grid.get_column_reference(col_name_template.format(
                year=year, continent=continent, header='country'
                )),
            'marker': {
                'sizemode': 'area',
                'sizeref': 200000,
                'sizesrc': grid.get_column_reference(col_name_template.format(
                    year=year, continent=continent, header='pop'
                )),
                'color': custom_colors[continent]
            },
            'name': continent
        }
        frame['data'].append(data_dict)

    figure['frames'].append(frame)
    slider_step = {'args': [
        [year],
        {'frame': {'duration': 300, 'redraw': False},
         'mode': 'immediate',
       'transition': {'duration': 300}}
     ],
     'label': year,
     'method': 'animate'}
    sliders_dict['steps'].append(slider_step)

figure['layout']['sliders'] = [sliders_dict]

----------------------------------------

TITLE: Creating a Multi-State Choropleth for New England
DESCRIPTION: This example demonstrates how to create a choropleth map for multiple states (New England region) with custom styling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import pandas as pd

NE_states = ['Connecticut', 'Maine', 'Massachusetts', 'New Hampshire', 'Rhode Island', 'Vermont']
df_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')
df_sample_r = df_sample[df_sample['STNAME'].isin(NE_states)]

values = df_sample_r['TOT_POP'].tolist()
fips = df_sample_r['FIPS'].tolist()

colorscale = [
    'rgb(68.0, 1.0, 84.0)',
    'rgb(66.0, 64.0, 134.0)',
    'rgb(38.0, 130.0, 142.0)',
    'rgb(63.0, 188.0, 115.0)',
    'rgb(216.0, 226.0, 25.0)'
]

fig = ff.create_choropleth(
    fips=fips, values=values,
    scope=NE_states, county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},
    legend_title='Population per county'
   
)
fig['layout']['legend'].update({'x': 0})
fig['layout']['annotations'][0].update({'x': -0.12, 'xanchor': 'left'})
py.iplot(fig, filename='choropleth_new_england')

----------------------------------------

TITLE: Version Check for Plotly
DESCRIPTION: Simple code to check the installed version of Plotly library.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Styling Axes Titles and Labels in Plotly Python
DESCRIPTION: This snippet demonstrates how to set and style axis titles and tick labels. It customizes font properties, tick angle, and exponent format for both x and y axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        title='AXIS TITLE',
        titlefont=dict(
            family='Arial, sans-serif',
            size=18,
            color='lightgrey'
        ),
        showticklabels=True,
        tickangle=45,
        tickfont=dict(
            family='Old Standard TT, serif',
            size=14,
            color='black'
        ),
        exponentformat='e',
        showexponent='all'
    ),
    yaxis=dict(
        title='AXIS TITLE',
        titlefont=dict(
            family='Arial, sans-serif',
            size=18,
            color='lightgrey'
        ),
        showticklabels=True,
        tickangle=45,
        tickfont=dict(
            family='Old Standard TT, serif',
            size=14,
            color='black'
        ),
        exponentformat='e',
        showexponent='all'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-labels')

----------------------------------------

TITLE: Multiple 3D Surface Plots
DESCRIPTION: Creates multiple overlapping 3D surface plots with different z-values and opacity settings. Demonstrates how to display multiple surfaces in the same plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

z1 = [
    [8.83,8.89,8.81,8.87,8.9,8.87],
    [8.89,8.94,8.85,8.94,8.96,8.92],
    [8.84,8.9,8.82,8.92,8.93,8.91],
    [8.79,8.85,8.79,8.9,8.94,8.92],
    [8.79,8.88,8.81,8.9,8.95,8.92],
    [8.8,8.82,8.78,8.91,8.94,8.92],
    [8.75,8.78,8.77,8.91,8.95,8.92],
    [8.8,8.8,8.77,8.91,8.95,8.94],
    [8.74,8.81,8.76,8.93,8.98,8.99],
    [8.89,8.99,8.92,9.1,9.13,9.11],
    [8.97,8.97,8.91,9.09,9.11,9.11],
    [9.04,9.08,9.05,9.25,9.28,9.27],
    [9,9.01,9,9.2,9.23,9.2],
    [8.99,8.99,8.98,9.18,9.2,9.19],
    [8.93,8.97,8.97,9.18,9.2,9.18]
]

z2 = [[zij+1 for zij in zi] for zi in z1]
z3 = [[zij-1 for zij in zi] for zi in z1]

data = [
    go.Surface(z=z1),
    go.Surface(z=z2, showscale=False, opacity=0.9),
    go.Surface(z=z3, showscale=False, opacity=0.9)
]

py.iplot(data,filename='python-docs/multiple-surfaces')

----------------------------------------

TITLE: Implementing Real-time Data Streaming
DESCRIPTION: Sets up continuous data streaming loop that generates and sends data to both traces with different scales.

LANGUAGE: python
CODE:
s_1.open()
s_2.open()

import time
import datetime
import numpy as np

k=10
i=0

while True:
    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')
    delta = np.random.randint(4,10) 
    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0] 
    s_1.write(dict(x=x,y=y))
    s_2.write(dict(x=x,y=(-delta*y)))
    time.sleep(0.8)
    i += 1
s_1.close()
s_2.close()

----------------------------------------

TITLE: Using Hovertemplate for Advanced Hover Text in Plotly Python
DESCRIPTION: This snippet showcases the use of hovertemplate for creating advanced custom hover text. It creates two scatter plots with different hover text formats, demonstrating how to include custom text, formatting, and HTML in the hover information.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.io as pio


data = [
    go.Scatter(
        x = [1,2,3,4,5],
        y = [2.02825,1.63728,6.83839,4.8485,4.73463],
        hovertemplate = '<i>Price</i>: $%{y:.2f}'
                        '<br><b>X</b>: %{x}<br>'
                        '<b>%{text}</b>',
        text = ['Custom text {}'.format(i + 1) for i in range(5)],
        showlegend = False
    ),
    go.Scatter(
        x = [1,2,3,4,5],
        y = [3.02825,2.63728,4.83839,3.8485,1.73463],
        hovertemplate = 'Price: %{y:$.2f}<extra></extra>',
        showlegend = False
    )
]

layout = go.Layout(
    title = "Set hover text with hovertemplate",
    template = pio.templates['plotly'],
)

fig = go.Figure(data=data,layout=layout)
py.iplot(fig, filename = "hovertemplate-basic")

----------------------------------------

TITLE: Retrieving and Modifying Public Figure Title in Plotly
DESCRIPTION: Shows how to fetch a public Plotly figure using its URL and modify its title. Uses chart_studio.plotly to get and display the modified figure.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
# Learn about API authentication here: https://plotly.com/python/getting-started
# Find your api_key here: https://plotly.com/settings/api

fig = py.get_figure("https://plotly.com/~PlotBot/5")

fig['layout']['title'] = "Never forget that title!"

py.iplot(fig, filename="python-change_plot")

----------------------------------------

TITLE: Creating Table from Local CSV
DESCRIPTION: Reads a local CSV file using Pandas and creates an interactive table visualization using Plotly

LANGUAGE: python
CODE:
df = pd.read_csv('sample-data.csv')

sample_data_table = FF.create_table(df.head())
py.iplot(sample_data_table, filename='sample-data-table')

----------------------------------------

TITLE: Setting Axis Range Manually in Plotly Python
DESCRIPTION: This snippet demonstrates how to manually set the range for x and y axes. It creates a scatter plot and limits the visible range of both axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        range=[2, 5]
    ),
    yaxis=dict(
        range=[2, 5]
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-range-manual')

----------------------------------------

TITLE: Initializing Network Graph and Node Positions with NetworkX
DESCRIPTION: Creates a random geometric graph using NetworkX and finds a central node. The code generates 200 nodes with connection radius of 0.125 and calculates node positions.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import networkx as nx

G=nx.random_geometric_graph(200,0.125)
pos=nx.get_node_attributes(G,'pos')

dmin=1
ncenter=0
for n in pos:
    x,y=pos[n]
    d=(x-0.5)**2+(y-0.5)**2
    if d<dmin:
        ncenter=n
        dmin=d

p=nx.single_source_shortest_path_length(G,ncenter)

----------------------------------------

TITLE: Creating Parabola Plots with Custom Colorway in Plotly
DESCRIPTION: This code generates multiple parabola plots using Plotly and sets a custom colorway. It demonstrates how to create scatter plots with custom colors for each trace.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np


def parabola_gen(a, b):
    return lambda x: a * x ** 2 + b


parabolas = [parabola_gen(a, b) for a, b in zip(np.linspace(1, 3, 7), np.linspace(2, 14, 7))]
x = np.linspace(-1, 3)
data = [go.Scatter(x=x, y=p(x), mode='lines') for p in parabolas]

colorway = ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844']
layout = go.Layout(colorway=colorway)

py.iplot(go.Figure(data=data, layout=layout))

----------------------------------------

TITLE: Styling Axes and Zero Line in Plotly Python
DESCRIPTION: This example shows how to style the axes lines, grid lines, and zero line. It customizes colors and line widths for various axis components.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        showgrid=True,
        zeroline=True,
        showline=True,
        mirror='ticks',
        gridcolor='#bdbdbd',
        gridwidth=2,
        zerolinecolor='#969696',
        zerolinewidth=4,
        linecolor='#636363',
        linewidth=6
    ),
    yaxis=dict(
        showgrid=True,
        zeroline=True,
        showline=True,
        mirror='ticks',
        gridcolor='#bdbdbd',
        gridwidth=2,
        zerolinecolor='#969696',
        zerolinewidth=4,
        linecolor='#636363',
        linewidth=6
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-lines')

----------------------------------------

TITLE: Creating a Sunburst Chart with Total Branchvalues in Plotly Python
DESCRIPTION: This example demonstrates creating a sunburst chart with 'total' branchvalues. It shows how parent values affect the width of child wedges when using the 'total' setting.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace = go.Sunburst(
    labels=[ "Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"],
    parents=["",    "Eve",  "Eve",  "Seth", "Seth", "Eve",  "Eve",  "Awan",  "Eve" ],
    values=[  65,    14,     12,     10,     2,      6,      6,      4,       4],
    branchvalues="total",
    outsidetextfont = {"size": 20, "color": "#377eb8"},
    marker = {"line": {"width": 2}},
)

layout = go.Layout(
    margin = go.layout.Margin(t=0, l=0, r=0, b=0)
)

py.iplot(go.Figure([trace], layout), filename='basic_sunburst_chart_total_branchvalues')

----------------------------------------

TITLE: Setting Up Plotly Subplots with Streaming in Python
DESCRIPTION: This snippet creates a Plotly figure with two subplots: a streaming bar chart and a streaming pie chart. It sets up the layout and initializes the traces with streaming enabled.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Bar(
    x=['one', 'two', 'three'],
    y=[4, 3, 2],
    xaxis='x2',
    yaxis='y2',
    marker=dict(color="maroon"),
    name='Random Numbers',
    stream=stream_id2,
    showlegend=False
)
trace2 = go.Pie(
    labels=['one','two','three'],
    values=[20,50,100],
    domain=dict(x=[0, 0.45]),
    text=['one', 'two', 'three'],
    stream=stream_id1,
    sort=False,
    
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis2=dict(
        domain=[0.5, 0.95],
        anchor='y2'
    ),
    yaxis2=dict(
        domain=[0, 1],
        anchor='x2'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='simple-inset-stream')

----------------------------------------

TITLE: Creating Basic Radar Chart with Plotly
DESCRIPTION: Creates a simple radar chart with single dataset using Plotly's Scatterpolar object. Demonstrates basic radar chart setup with radial axis configuration and data plotting.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [go.Scatterpolar(
  r = [39, 28, 8, 7, 28, 39],
  theta = ['A','B','C', 'D', 'E', 'A'],
  fill = 'toself'
)]

layout = go.Layout(
  polar = dict(
    radialaxis = dict(
      visible = True,
      range = [0, 50]
    )
  ),
  showlegend = False
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename = "radar/basic")

----------------------------------------

TITLE: Importing and Previewing Gapminder Dataset with Plotly
DESCRIPTION: Imports required libraries, loads the Gapminder dataset from a CSV file, and creates a preview table using Plotly's figure factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff 
from plotly.grid_objs import Grid, Column

import pandas as pd
import time

url = 'https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv'
dataset = pd.read_csv(url)

table = ff.create_table(dataset.head(10))
py.iplot(table, filename='animations-gapminder-data-preview')

----------------------------------------

TITLE: Arbitrary Polygon Area Calculation and Visualization
DESCRIPTION: Implementation of polygon area calculation for an irregular polygon with five vertices. Uses the same sorting and area calculation functions but with different vertex coordinates and plot settings.

LANGUAGE: python
CODE:
corners = [(0, 0), (3, 0), (2, 10), (3, 4), (1, 5.5)]
corners_sorted = PolygonSort(corners)
area = PolygonArea(corners_sorted)

x = [corner[0] for corner in corners_sorted]
y = [corner[1] for corner in corners_sorted]

annotation = go.Annotation(
    x=5.5,
    y=8.0,
    text='The area of the polygon is approximately %s' % (area),
    showarrow=False
)

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    fill='tozeroy',
)

layout = go.Layout(
    annotations=[annotation],
    xaxis=dict(
        range=[-1, 9]
    ),
    yaxis=dict(
        range=[-1, 12]
    )
)

trace_data = [trace1]
fig = go.Figure(data=trace_data, layout=layout)

py.iplot(fig, filename='polygon-area')

----------------------------------------

TITLE: Creating a Public Graph with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a public graph using Plotly's Python library. It creates a scatter plot and sets the sharing option to 'public'.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go

data = [
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]
    )
]

py.iplot(data, filename='privacy-public', sharing='public')

----------------------------------------

TITLE: Connecting to MySQL Database
DESCRIPTION: Establishes connection to MySQL database and executes a query to fetch country data including name, continent, population, life expectancy and GNP.

LANGUAGE: python
CODE:
conn = MySQLdb.connect(host="localhost", user="root", passwd="xxxx", db="world")
cursor = conn.cursor()
cursor.execute('select Name, Continent, Population, LifeExpectancy, GNP from Country');

rows = cursor.fetchall()
str(rows)[0:300]

----------------------------------------

TITLE: Creating Reversed Axes with Specified Range in Plotly Python
DESCRIPTION: This snippet shows how to create reversed axes with a specified range. It creates a scatter plot with random data and reverses the x-axis with a defined range.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.linspace(0, 10, 100)
y = np.random.randint(1, 100, 100)

trace = go.Scatter(x=x, y=y, mode='markers')
data = [trace]
layout = go.Layout(title='Reversed Axis with Min/Max', xaxis=dict(range=[10, 0]))

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='example-reversed-axis-with-min-max')

----------------------------------------

TITLE: Creating Reversed Axes in Plotly Python
DESCRIPTION: This example demonstrates how to create reversed axes. It sets the x-axis to reverse its range, displaying values from high to low.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2],
        y=[1, 2]
    )
]
layout = go.Layout(
    xaxis=dict(
        autorange='reversed'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-reversed')

----------------------------------------

TITLE: Accessing Quick Reference in Jupyter
DESCRIPTION: Demonstrates how to open the quick reference guide in a Jupyter notebook.

LANGUAGE: python
CODE:
quickref

----------------------------------------

TITLE: Streaming real-time data to Plotly
DESCRIPTION: Demonstrates how to stream real-time data to a Plotly graph

LANGUAGE: python
CODE:
tls.embed('streaming-demos','4')

----------------------------------------

TITLE: Aggregating Time Series Data with SQLite in Python
DESCRIPTION: Demonstrates how to aggregate time series data into 15-minute intervals using SQLite and visualize it with Plotly.

LANGUAGE: python
CODE:
minutes = 15
seconds = 15*60

df = pd.read_sql_query('SELECT datetime(('
                                   'strftime(\'%s\', CreatedDate) / {seconds}) * {seconds}, \'unixepoch\') interval ,'
                               'COUNT(*) as "Complaints / interval"'
                       'FROM data '
                       'GROUP BY interval '
                       'ORDER BY interval '
                       'LIMIT 500'.format(seconds=seconds), disk_engine)

py.iplot(
    {
        'data': [{
            'x': df.interval,
            'y': df['Complaints / interval'],
            'type': 'bar'
        }],
        'layout': {
            'title': 'Number of 311 Complaints per 15 Minutes'
        }
}, filename='311/complaints per 15 minutes')

----------------------------------------

TITLE: Creating Offline HTML Plot
DESCRIPTION: Shows how to create a standalone HTML plot file using Plotly's offline mode. This creates a self-contained HTML file with the plot that can be viewed without an internet connection.

LANGUAGE: python
CODE:
import plotly
import plotly.graph_objs as go

plotly.offline.plot({
    "data": [go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1])],
    "layout": go.Layout(title="hello world")
}, auto_open=True)

----------------------------------------

TITLE: Formatting Hover Text in Plotly Scatter Plot with Python
DESCRIPTION: This code creates a scatter plot with formatted hover text. It demonstrates how to set custom hover text formatting for the y-axis values, showing them with two decimal places.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x = [1,2,3,4,5],
        y = [2.02825,1.63728,6.83839,4.8485,4.73463],
        hoverinfo = 'y',
        marker = dict(
            color = 'green'
        ),
        showlegend = False
    )
]

layout = go.Layout(
    title = "Set hover text formatting<br><a href= https://github.com/d3/d3-time-format/blob/master/README.md#locale_format>https://github.com/d3/d3-time-format/blob/master/README.md#locale_format</a>",
    titlefont = dict(
        size = 10
    ),
    xaxis = dict(
        zeroline = False
    ),
    yaxis = dict(
        hoverformat = '.2f'
    )
)

fig = go.Figure(data=data,layout=layout)
py.iplot(fig, filename = "format-hover-text")

----------------------------------------

TITLE: Toggling Axes Properties in Plotly Python
DESCRIPTION: This snippet demonstrates how to toggle various axis properties like grid lines, zero lines, and tick labels. It creates a basic scatter plot and customizes the x and y axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[8, 7, 6, 5, 4, 3, 2, 1, 0]
)
trace2 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    y=[0, 1, 2, 3, 4, 5, 6, 7, 8]
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis=dict(
        autorange=True,
        showgrid=False,
        zeroline=False,
        showline=False,
        ticks='',
        showticklabels=False
    ),
    yaxis=dict(
        autorange=True,
        showgrid=False,
        zeroline=False,
        showline=False,
        ticks='',
        showticklabels=False
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='axes-booleans')

----------------------------------------

TITLE: Extending Existing Plotly Traces
DESCRIPTION: Shows how to extend existing traces with new data using fileopt='extend'. Creates initial traces if none exist.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2],
    y=[1, 2]
)

trace1 = go.Scatter(
    x=[1, 2],
    y=[2, 3]
)

trace2 = go.Scatter(
    x=[1, 2],
    y=[3, 4]
)

data = [trace0, trace1, trace2]

# Take 1: if there is no data in the plot, 'extend' will create new traces.
plot_url = py.plot(data, filename='extend plot', fileopt='extend')

----------------------------------------

TITLE: Creating a 2D Contour Plot from Grid Data
DESCRIPTION: This snippet demonstrates how to create a 2D Contour plot using data from a previously uploaded Plotly grid, referencing the grid columns instead of embedding data directly.

LANGUAGE: python
CODE:
data = [
    go.Histogram2dContour(
        xsrc=grid[0],
        ysrc=grid[1]
    )
]

py.iplot(data, filename='2D Contour from Grid Data')

----------------------------------------

TITLE: Importing Libraries for Plotly and Data Analysis in Python
DESCRIPTION: This snippet imports the required libraries for creating plots with Plotly and performing data analysis using NumPy, Pandas, and SciPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Generating Plotly Scatter and Bar Plots
DESCRIPTION: Creates two Plotly plots: a scatter plot of cylinders vs weight and a bar chart of mpg vs car model. These plots will be used for interactive demonstrations.

LANGUAGE: python
CODE:
data1 = [{'x': df['cyl'], 'y': df['wt'], 'text': df['model'], 'type': 'scatter', 'mode': 'markers'}]
layout1 = {'xaxis': {'title': 'Cylinders'}, 'yaxis': {'title': 'Weight'}, 'hovermode': 'closest'}
url = py.plot({'data': data1, 'layout': layout1}, filename="mouseevent-scatter1", auto_open=False)

data2 = [{'x': df['model'], 'y': df['mpg'], 'text': df['model'], 'type': 'bar', 'marker': {'color': 'pink'}}]
layout2 = {'xaxis': {'title': 'Model'}, 'yaxis': {'title': 'Miles per Gallon'}, 'hovermode': 'closest'}

url = py.plot({'data': data2}, filename="mouseevent-scatter2", auto_open=False)

----------------------------------------

TITLE: Setting up Custom Styling and Publishing Notebook
DESCRIPTION: Configures custom styling for the notebook using Google Fonts and custom CSS. Also includes commands to install and use the Plotly publisher to publish the notebook.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'mixed.ipynb', 'python/graphing-multiple-chart-types/', 'Python Multiple Chart Types | plotly',
    'How to design figures with multiple chart types in python.',
    title = 'Python Multiple Chart Types | plotly',
    name = 'Multiple Chart Types',
    thumbnail='thumbnail/multiple-chart-type.jpg', language='python',
    has_thumbnail='true', display_as='file_settings', order=16)

----------------------------------------

TITLE: Configuring jQuery Knob with HTML Attributes
DESCRIPTION: Demonstrates how to configure knob options using HTML data attributes.

LANGUAGE: html
CODE:
<input type="text" class="dial" data-min="-50" data-max="50">

----------------------------------------

TITLE: Creating Stream Object
DESCRIPTION: Creates a Stream object with a token and maxpoints parameter.

LANGUAGE: python
CODE:
stream_id = stream_ids[0]
stream = Stream(
    token=stream_id,
    maxpoints=80
)

----------------------------------------

TITLE: Deleting All Plotly Plots and Grids Permanently in Python
DESCRIPTION: Defines functions to retrieve all pages of a user's files and to permanently delete all plots and grids. This process first moves files to trash and then permanently deletes them.

LANGUAGE: python
CODE:
def get_pages(username, page_size):
    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&page_size='+str(page_size)
    response = requests.get(url, auth=auth, headers=headers)
    if response.status_code != 200:
        return
    page = json.loads(response.content)
    yield page
    while True:
        resource = page['children']['next']
        if not resource:
            break
        response = requests.get(resource, auth=auth, headers=headers)
        if response.status_code != 200:
            break
        page = json.loads(response.content)
        yield page

def permanently_delete_files(username, page_size=500, filetype_to_delete='plot'):
    for page in get_pages(username, page_size):
        for x in range(0, len(page['children']['results'])):
            fid = page['children']['results'][x]['fid']
            res = requests.get('https://api.plot.ly/v2/files/' + fid, auth=auth, headers=headers)
            res.raise_for_status()
            if res.status_code == 200:
                json_res = json.loads(res.content)
                if json_res['filetype'] == filetype_to_delete:
                    # move to trash
                    requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)
                    # permanently delete
                    requests.delete('https://api.plot.ly/v2/files/'+fid+'/permanent_delete', auth=auth, headers=headers)

permanently_delete_files(username, filetype_to_delete='plot')
permanently_delete_files(username, filetype_to_delete='grid')

----------------------------------------

TITLE: Creating Percentage Histogram
DESCRIPTION: Creates a histogram displaying percentage distribution of alcohol consumption data.

LANGUAGE: python
CODE:
trace = go.Histogram(x=x, histnorm='percent',
                     xbins=dict(start=np.min(x),
                                size=0.25,
                                end=np.max(x)),
                     marker=dict(color='rgb(50, 50, 125)'))

layout = go.Layout(
    title="Histogram with Frequency Count"
)

fig = go.Figure(data=go.Data([trace]), layout=layout)
py.iplot(fig, filename='histogram-percentage')

----------------------------------------

TITLE: Importing Required Libraries for Plotly Streaming
DESCRIPTION: Initial setup importing necessary Python libraries for Plotly streaming functionality including numpy, plotly core modules and tools.

LANGUAGE: python
CODE:
import numpy as np 
import plotly.plotly as py  
import plotly.tools as tls   
import plotly.graph_objs as go

----------------------------------------

TITLE: Embedding Dash Example in IFrame
DESCRIPTION: Demonstrates how to embed a Dash application within an IFrame for visualization purposes

LANGUAGE: python
CODE:
from IPython.display import IFrame
IFrame(src= "https://dash-simple-apps.plotly.host/dash-figurelabelsplot/", width="100%", height="650px", frameBorder="0")

----------------------------------------

TITLE: Creating Basic Table with CSV Data
DESCRIPTION: Imports Bitcoin mining data from CSV, processes dates, and creates a basic Plotly table visualization

LANGUAGE: python
CODE:
import pandas as pd
import re
import plotly.plotly as py
import plotly.graph_objs as go

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv')

# remove min:sec:millisec from dates 
for i, row in enumerate(df['Date']):
    p = re.compile(' 00:00:00')
    datetime = p.split(df['Date'][i])[0]
    df.iloc[i, 1] = datetime

table = go.Table(
    header=dict(
        values=list(df.columns),
        line = dict(color='rgb(50, 50, 50)'),
        align = ['left'] * 5,
        fill = dict(color='#EDFAFF')
    ),
    cells=dict(
        values=[df.iloc[j] for j in range(10)],
        line = dict(color='rgb(50, 50, 50)'),
        align = ['left'] * 5,
        fill = dict(color='#f5f5fa')
    )
)

py.iplot([table])

----------------------------------------

TITLE: Publishing Plotly Documentation with Custom Styling
DESCRIPTION: Sets up custom fonts and CSS styling for documentation publishing, then uses the publisher module to publish the notebook as documentation.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python_Average_Multiple_Curves.ipynb', 'python/average_multiple_curves/', 'Average Multiple Curves | plotly',
    'Learn how to average the values of multiple curves with Python.',
    title='Average Multiple Curves in Python | plotly',
    name='Average Multiple Curves',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=9,
    ipynb= '~notebook_demo/107')

----------------------------------------

TITLE: Creating Location Data Table
DESCRIPTION: Generates an interactive table displaying sample location data using Plotly's figure factory

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['Location ID', 'Latitude', 'Longitude']]
first_ten_keys = supercharger_locations.keys()[0:10]

for key in first_ten_keys:
    row = [key,
           supercharger_locations[key]['latitude'],
           supercharger_locations[key]['longitude']]
    data_matrix.append(row)

table = ff.create_table(data_matrix)
py.iplot(table, filename='supercharger-locations-sample')

----------------------------------------

TITLE: Retrieving Stream IDs
DESCRIPTION: Retrieves stream IDs from the credentials file.

LANGUAGE: python
CODE:
stream_ids = tls.get_credentials_file()['stream_ids']

----------------------------------------

TITLE: Plotting Time Series with Baseline
DESCRIPTION: Calculates baseline values using PeakUtils and creates a Plotly scatter plot showing both original data and baseline values.

LANGUAGE: python
CODE:
baseline_values = peakutils.baseline(time_series)

trace = go.Scatter(
    x=[j for j in range(len(time_series))],
    y=time_series,
    mode='lines',
    marker=dict(
        color='#547C66',
    ),
    name='Original Plot'
)

trace2 = go.Scatter(
    x=[j for j in range(len(time_series))],
    y=baseline_values,
    mode='markers',
    marker=dict(
        size=3,
        color='#EB55BF',
        symbol='circle-open'
    ),
    name='Baseline'
)

data = [trace, trace2]
py.iplot(data, filename='milk-production-plot-with-baseline')

----------------------------------------

TITLE: Creating Basic Bar Chart
DESCRIPTION: Creates a simple bar chart showing animal counts with Plotly

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [go.Bar(
            x=['giraffes', 'orangutans', 'monkeys'],
            y=[20, 14, 23]
    )]

py.iplot(data, filename='basic-bar')

----------------------------------------

TITLE: Labeling Spectroscopy Data with Multiple Images in Python
DESCRIPTION: This example demonstrates how to add multiple images to a spectroscopy plot for labeling purposes. It simulates spectroscopy data for benzene and naphthalene, creates a line plot, and adds molecular structure images as annotations.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
from scipy.signal import savgol_filter

#simulate spectroscopy data
def simulated_absorption(mu,sigma,intensity):
    data = [np.random.normal(mu[i],sigma[i],intensity[i]) for i in range(len(mu))]
    hists = [np.histogram(d,1000,range=(200,500),normed=True) for d in data]
    ys = [y for y,x in hists]
    s = savgol_filter(np.max(ys,axis = 0),41,3)
    return hists[0][1],s

mus = [[290,240,260],[330,350]]
sigmas = [[4,6,10],[5,4]]
intensities = [[100000,300000,700000],[40000,20000]]

simulated_absorptions = [simulated_absorption(m,s,i) for m,s,i in zip(mus,sigmas,intensities)]

#create traces from data
names=['Benzene','Naphthalene']
colors = ['red','maroon']
traces = [go.Scatter(x=x,y=y,name=n,line = dict(color=c)) for (x,y),n,c in zip(simulated_absorptions,names,colors)]

#add pictures using layout-images and then connect the image to its trace using annotations
layout= go.Layout(
    images= [dict(
        source= "https://raw.githubusercontent.com/michaelbabyn/plot_data/master/benzene.png",
        xref= "paper",
        yref= "paper",
        x= 0.75,
        y= 0.65,
        sizex= 0.3,
        sizey= 0.3,
        xanchor= "right",
        yanchor= "bottom"
      ),dict(
        source= "https://raw.githubusercontent.com/michaelbabyn/plot_data/master/naphthalene.png",
        xref="paper",
        yref= "paper",
        x= 0.9,
        y= 0.3,
        sizex= 0.3,
        sizey= 0.3,

        xanchor= "right",
        yanchor= "bottom"
      )
    ],
    annotations=[
        dict(
            x=93.0/300,
            y=0.07/0.1,
            xref='paper',
            yref='paper',
            showarrow=True,
            arrowhead=0,
            opacity=0.5,
            ax=250,
            ay=-40,
        ),
        dict(
            x=156/300,
            y=0.04/0.1,
            xref='paper',
            yref='paper',
            showarrow=True,
            arrowhead=0,
            opacity=0.5,
            ax=140,
            ay=-10,
        )
    ],
    title = 'Absorption Frequencies of Benzene and Naphthalene',
    yaxis = dict(hoverformat='.3f', title='Absorption'),
    xaxis = dict(title='Wavelength'),
    showlegend=False,
    height = 500,
    width = 900
        
)

fig = go.Figure(data=traces,layout=layout)
py.iplot(fig,filename='EXAMPLES/spectroscopy')

----------------------------------------

TITLE: Permanently Deleting a Plotly Graph using REST API in Python
DESCRIPTION: Shows the process of permanently deleting a Plotly graph. This involves first trashing the plot and then using the permanent delete endpoint. This action cannot be undone.

LANGUAGE: python
CODE:
url = py.plot({"data": [{"x": [1, 2, 3],
                         "y": [3, 2, 1]}],
               "layout": {"title": "Let's Delete This Plot<br><b>FOREVER!!!!</b>"}},
              filename='PERMANENT delete ex')
url

fid_permanent_delete = username+':661'
fid_permanent_delete

requests.post('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/trash', auth=auth, headers=headers)

requests.delete('https://api.plot.ly/v2/files/'+fid_permanent_delete+'/permanent_delete', auth=auth, headers=headers)

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Imports necessary Python libraries including Plotly, MySQLdb for database connectivity, and pandas for data manipulation.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import MySQLdb
import pandas as pd

----------------------------------------

TITLE: Creating New Plotly Graph Files
DESCRIPTION: Creates a new plot file with automatic name incrementing using fileopt='new' parameter. This ensures a unique filename by appending a number if needed.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2],
        y=[3, 4]
    )
]

plot_url = py.plot(data, filename='new plot', fileopt='new')

----------------------------------------

TITLE: Publishing Plotly Documentation
DESCRIPTION: Sets up custom styling for documentation and publishes the notebook using Plotly's publisher tool. Includes font loading and CSS customization for documentation appearance.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'Polynomial-fits.ipynb', 'python/polynomial-fits/', 'Polynomial Fit',
    'Create a polynomial fit / regression in Python and add a line of best fit to your chart.',
    title = 'Polynomial Fit',
    name = 'Polynomial Fit',
    has_thumbnail='true', thumbnail='thumbnail/polynomial_fit.jpg', 
    language='python', page_type='example_index',
    display_as='statistics', order=12,
    ipynb= '~notebook_demo/138')

----------------------------------------

TITLE: Plotting Figure and Saving to Plotly in Python
DESCRIPTION: Plots the figure and saves it to Plotly with a specified filename.

LANGUAGE: python
CODE:
py.iplot(fig, filename='s1_grad-china-usa')

----------------------------------------

TITLE: Creating Stream ID Object for Plotly
DESCRIPTION: Initializes a stream ID object with token and maxpoints parameters to control streaming behavior.

LANGUAGE: python
CODE:
stream_id = stream_ids[0]

stream_1 = go.Stream(
    token=stream_id,  # link stream id to 'token' key
    maxpoints=80      # keep a max of 80 pts on screen
)

----------------------------------------

TITLE: Setting Axis Titles in 3D Plotly Plot
DESCRIPTION: Demonstrates how to set custom axis titles in a 3D plot with two mesh traces. Configures titles for X, Y, and Z axes while maintaining plot dimensions and margins.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

N = 50
trace1 = go.Mesh3d(x=(60*np.random.randn(N)),
                   y=(25*np.random.randn(N)),
                   z=(40*np.random.randn(N)),
                   opacity=0.5,
                   color='yellow'
                  )
trace2 = go.Mesh3d(x=(70*np.random.randn(N)),
                   y=(55*np.random.randn(N)),
                   z=(30*np.random.randn(N)),
                   opacity=0.5,
                   color='pink'
                  )
layout = go.Layout(
                    scene = dict(
                    xaxis = dict(
                        title='X AXIS TITLE'),
                    yaxis = dict(
                        title='Y AXIS TITLE'),
                    zaxis = dict(
                        title='Z AXIS TITLE'),),
                    width=700,
                    margin=dict(
                    r=20, b=10,
                    l=10, t=10)
                  )
fig = go.Figure(data=[trace1,trace2], layout=layout)
py.iplot(fig, filename='3d-axis-titles')

----------------------------------------

TITLE: Version Check - Python Plotly Installation
DESCRIPTION: Simple code to check the installed version of Plotly library.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Retrieving Earthquake Data from CartoDB
DESCRIPTION: Uses Pandas to read CSV data from CartoDB's SQL API, containing earthquake information including magnitude, type, time, location, and depth.

LANGUAGE: python
CODE:
url = "http://andye.cartodb.com/api/v2/sql?"\
      "q=SELECT%20mag,magtype,type,to_char(time,'yyyy-mm-DD%20HH24:MI:SS')%20AS%20time_plotly,place,depth%20FROM%20all_month"\
      "&format=csv"
df = pd.read_csv(url)
df = df.sort(['mag'], ascending=[0]);

----------------------------------------

TITLE: Trashing a Plotly Graph using REST API in Python
DESCRIPTION: Demonstrates how to move a Plotly graph to the trash using the Plotly REST API. Requires the file ID of the plot to be trashed.

LANGUAGE: python
CODE:
fid = username+':658'
fid

requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)

----------------------------------------

TITLE: Creating Scatter Trace for USA Data in Plotly
DESCRIPTION: Creates a Scatter trace object for USA data with square markers only.

LANGUAGE: python
CODE:
trace_usa = Scatter(
    Quartz7_data['data'][1],
    mode='markers',
    marker=Marker(
        symbol='square'
    )
)

----------------------------------------

TITLE: 3D Coordinate Dataset
DESCRIPTION: A series of space-separated floating point values representing x, y, z coordinates in 3D space. Each line contains three decimal numbers that define a point's position.

LANGUAGE: data
CODE:
0.689484 -0.014459 0.428751
0.476483 0.162624 0.449488
0.586770 0.102149 0.769481
1.068768 0.678668 1.023915
1.438060 0.683633 0.752397
1.483567 0.140479 1.389489
1.163844 0.125522 1.098527
1.491083 0.317640 0.760376
1.970356 0.389628 0.631279
1.961689 0.144644 0.254462

----------------------------------------

TITLE: Customizing 3D Scatter Plot Spikelines
DESCRIPTION: Creates a 3D scatter plot with customized spikelines that appear on hover. Demonstrates how to modify spikeline color, thickness and visibility.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

data = [go.Scatter3d(
    x=np.random.randn(50),
    y=np.random.randn(50),
    z=np.random.randn(50),
)]

layout = go.Layout(
    scene=go.layout.Scene(
        xaxis=go.layout.scene.XAxis(
            spikecolor='#1fe5bd',
            spikesides=False,
            spikethickness=6,
        ),
        yaxis=go.layout.scene.YAxis(
            spikecolor='#1fe5bd',
            spikesides=False,
            spikethickness=6,
        ),
        zaxis=go.layout.scene.ZAxis(
            spikecolor='#1fe5bd',
            spikethickness=6,
        ),
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='hover-spikelines')

----------------------------------------

TITLE: Dendrogram with Custom Orientation and Labels
DESCRIPTION: Creates a dendrogram with left orientation and custom labels for each data point using a list of names.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import numpy as np

X = np.random.rand(10, 10)
names = ['Jack', 'Oxana', 'John', 'Chelsea', 'Mark', 'Alice', 'Charlie', 'Rob', 'Lisa', 'Lily']
fig = ff.create_dendrogram(X, orientation='left', labels=names)
fig['layout'].update({'width':800, 'height':800})
py.iplot(fig, filename='dendrogram_with_labels')

----------------------------------------

TITLE: Creating an Offline Animation
DESCRIPTION: Demonstrates how to create an animated scatter plot in offline mode using Plotly.

LANGUAGE: python
CODE:
from plotly.offline import init_notebook_mode, iplot
from IPython.display import display, HTML

init_notebook_mode(connected=True)

figure = {'data': [{'x': [0, 1], 'y': [0, 1]}],
          'layout': {'xaxis': {'range': [0, 5], 'autorange': False},
                     'yaxis': {'range': [0, 5], 'autorange': False},
                     'title': 'Start Title'},
          'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},
                     {'data': [{'x': [1, 4], 'y': [1, 4]}]},
                     {'data': [{'x': [3, 4], 'y': [3, 4]}],
                      'layout': {'title': 'End Title'}}]}

iplot(figure)

----------------------------------------

TITLE: Creating Stacked Histograms with Plotly in Python
DESCRIPTION: This code shows how to create stacked histograms using Plotly. It generates two sets of random data and plots them as separate histograms stacked on top of each other.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x0 = np.random.randn(500)
x1 = np.random.randn(500)

trace0 = go.Histogram(
    x=x0
)
trace1 = go.Histogram(
    x=x1
)
data = [trace0, trace1]
layout = go.Layout(barmode='stack')
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='stacked histogram')

----------------------------------------

TITLE: Creating Vertical Table and Graph Subplot with Plotly in Python
DESCRIPTION: This code creates a vertical layout with a table at the top and three scatter plots stacked below. It showcases vertical arrangement of subplots in Plotly.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Table trace and scatter plot traces defined here
# ...

axis=dict(
    showline=True,
    zeroline=False,
    showgrid=True,
    mirror=True, 
    ticklen=4, 
    gridcolor='#ffffff',
    tickfont=dict(size=10)
)

layout2 = dict(
    width=950,
    height=800,
    autosize=False,
    title='Bitcoin mining stats for 180 days',
    margin = dict(t=100),
    showlegend=False,          
    xaxis1=dict(axis, **dict(domain=[0, 1], anchor='y1', showticklabels=False)),
    xaxis2=dict(axis, **dict(domain=[0, 1], anchor='y2', showticklabels=False)),          
    xaxis3=dict(axis, **dict(domain=[0, 1], anchor='y3')), 
    yaxis1=dict(axis, **dict(domain=[2 * 0.21 + 0.02 + 0.02, 0.68], anchor='x1', hoverformat='.2f')),  
    yaxis2=dict(axis, **dict(domain=[0.21 + 0.02, 2 * 0.21 + 0.02], anchor='x2', tickprefix='$', hoverformat='.2f')),
    yaxis3=dict(axis, **dict(domain=[0.0, 0.21], anchor='x3', tickprefix=u'\u20BF', hoverformat='.2f')),
    plot_bgcolor='rgba(228, 222, 249, 0.65)'
)

fig2 = dict(data=[table_trace2, trace4, trace5, trace6], layout=layout2)
py.iplot(fig2, filename='vertical-stacked-subplot-tables')

----------------------------------------

TITLE: Heatmap with Categorical Labels
DESCRIPTION: Creates a heatmap with custom axis labels for days of the week and times of day

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace = go.Heatmap(z=[[1, 20, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
                   x=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
                   y=['Morning', 'Afternoon', 'Evening'])
data=[trace]
py.iplot(data, filename='labelled-heatmap')

----------------------------------------

TITLE: 20x20 Numerical Matrix Data
DESCRIPTION: A matrix of floating point values stored in scientific notation. Each row contains 20 space-separated values with 15 decimal places precision. Values appear to be normalized or processed data points, potentially for visualization or analysis purposes.

LANGUAGE: plain text
CODE:
4.815073983484015607e-01 4.517083715120223109e-01 4.020904174051740387e-01 ...
3.510491288840051349e-01 5.689676611591822919e-01 5.858897633406653371e-01 ...
[Matrix continues for 20 rows]

----------------------------------------

TITLE: Creating a Basic Bar Chart with Plotly in Python
DESCRIPTION: Demonstrates how to create a simple bar chart using Plotly and data from a Pandas DataFrame.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [go.Bar(x=df.School,
            y=df.Gap)]

py.iplot(data, filename='jupyter-basic_bar')

----------------------------------------

TITLE: Embedding Streaming Plot Example
DESCRIPTION: Demonstrates how to embed an existing Plotly streaming plot using the tools.embed() function.

LANGUAGE: python
CODE:
# Embed an existing Plotly streaming plot
tls.embed('streaming-demos','6')

# Note that the time point correspond to internal clock of the servers, 
# that is UTC time.

----------------------------------------

TITLE: Updating Scatter Plot Axes Based on User Selection
DESCRIPTION: Defines a function to update the scatter plot axes based on user-selected columns from the DataFrame.

LANGUAGE: python
CODE:
def update_axes(xaxis, yaxis):
    scatter = f.data[0]
    scatter.x = df[xaxis]
    scatter.y = df[yaxis]
    with f.batch_update():
        f.layout.xaxis.title = xaxis
        f.layout.yaxis.title = yaxis
        scatter.x = scatter.x + np.random.rand(N)/10 *(df[xaxis].max() - df[xaxis].min())
        scatter.y = scatter.y + np.random.rand(N)/10 *(df[yaxis].max() - df[yaxis].min())
    
axis_dropdowns = interactive(update_axes, yaxis = df.select_dtypes('int64').columns, xaxis = df.select_dtypes('int64').columns)

----------------------------------------

TITLE: Creating a Basic Carpet Plot with Plotly in Python
DESCRIPTION: This code creates a basic carpet plot using Plotly. It sets up the y-coordinates but omits x-coordinates, resulting in a cheater plot that requires additional parameters before an axis can be plotted.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]
)

data = [trace1]

fig = go.Figure(data = data)
url = py.plot(fig, filename = "carpet/basic")

----------------------------------------

TITLE: Generating Random Scatter Plot
DESCRIPTION: Create scatter plot with 100 random points using numpy, with varying colors and sizes based on the Viridis colorscale.

LANGUAGE: python
CODE:
N = 100
x = np.random.rand(N)
y = np.random.rand(N)
colors = np.random.rand(N)
sz = np.random.rand(N)*30

fig = go.Figure()
fig.add_scatter(x=x,
                y=y,
                mode='markers',
                marker={'size': sz,
                        'color': colors,
                        'opacity': 0.6,
                        'colorscale': 'Viridis'
                       });
iplot(fig)

----------------------------------------

TITLE: Visualizing Normal Probability Distribution Functions with Plotly in Python
DESCRIPTION: This code creates a plot of two normal probability distribution functions using Plotly. It generates x-values, calculates y-values using SciPy's norm.pdf, and creates scatter plots for visualization.

LANGUAGE: python
CODE:
x = np.linspace(-4, 4, 160)
y1 = scipy.stats.norm.pdf(x)
y2 = scipy.stats.norm.pdf(x, loc=2)

trace1 = go.Scatter(
    x = x,
    y = y1,
    mode = 'lines+markers',
    name='Mean of 0'
)

trace2 = go.Scatter(
    x = x,
    y = y2,
    mode = 'lines+markers',
    name='Mean of 2'
)

data = [trace1, trace2]

py.iplot(data, filename='normal-dists-plot')

----------------------------------------

TITLE: Creating Combined Line and Bar Chart with Plotly
DESCRIPTION: Demonstrates how to create and combine a line chart and bar chart using Plotly's graph objects. Creates a scatter plot for the line and a bar plot with numeric x and y coordinates.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2, 3, 4, 5],
    y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]
)
trace2 = go.Bar(
    x=[0, 1, 2, 3, 4, 5],
    y=[1, 0.5, 0.7, -1.2, 0.3, 0.4]
)

data = [trace1, trace2]
py.iplot(data, filename='bar-line')

----------------------------------------

TITLE: Plotting Correlation Between Original and Shifted Saw Waves
DESCRIPTION: Demonstrates phase correlation by plotting an original saw wave, a phase-shifted version, and their convolution. Shows how correlation can detect similarities between shifted signals.

LANGUAGE: python
CODE:
x = np.linspace(0, 20, 50)

saw_y = signal.sawtooth(t=x)
square_y = signal.square(t=x)
shifted_saw_y = signal.sawtooth(t=np.linspace(10, 30, 50))
convolve_y = signal.convolve(saw_y, shifted_saw_y)

trace_saw = go.Scatter(
    x = x,
    y = saw_y,
    mode = 'lines',
    name = 'Saw',
    marker = dict(
        color='#FF7844'
    ),
    opacity = 0.8
)

trace_shifted_saw = go.Scatter(
    x = x,
    y = shifted_saw_y,
    mode = 'lines',
    name = 'Shifted Saw',
    marker = dict(
        color='#A64942'
    ),
    opacity = 0.8
)

trace_convolution = go.Scatter(
    x = x,
    y = convolve_y,
    mode = 'lines',
    name = 'Convolution',
    marker = dict(
        color='#53354A'
    )
)

data = [trace_saw, trace_shifted_saw, trace_convolution]
py.iplot(data, filename='1d-convolution-of-saw-and-shifted-saw')

----------------------------------------

TITLE: Creating Table with Right-Aligned Plots using Plotly in Python
DESCRIPTION: This code creates a complex layout with a table on the left and three scatter plots aligned to the right. It demonstrates custom layout creation and axis configuration in Plotly.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
import pandas as pd

# Table trace and scatter plot traces defined here
# ...

axis=dict(
    showline=True,
    zeroline=False,
    showgrid=True,
    mirror=True,
    ticklen=4, 
    gridcolor='#ffffff',
    tickfont=dict(size=10)
)

layout1 = dict(
    width=950,
    height=800,
    autosize=False,
    title='Bitcoin mining stats for 180 days',
    margin = dict(t=100),
    showlegend=False,   
    xaxis1=dict(axis, **dict(domain=[0.55, 1], anchor='y1', showticklabels=False)),
    xaxis2=dict(axis, **dict(domain=[0.55, 1], anchor='y2', showticklabels=False)),        
    xaxis3=dict(axis, **dict(domain=[0.55, 1], anchor='y3')), 
    yaxis1=dict(axis, **dict(domain=[0.66, 1.0], anchor='x1', hoverformat='.2f')),  
    yaxis2=dict(axis, **dict(domain=[0.3 + 0.03, 0.63], anchor='x2', tickprefix='$', hoverformat='.2f')),
    yaxis3=dict(axis, **dict(domain=[0.0, 0.3], anchor='x3', tickprefix=u'\u20BF', hoverformat='.2f')),
    plot_bgcolor='rgba(228, 222, 249, 0.65)'
)

fig1 = dict(data=[table_trace1, trace1, trace2, trace3], layout=layout1)
py.iplot(fig1, filename='table-right-aligned-plots')

----------------------------------------

TITLE: Populating Plotly Figure with Gapminder Data
DESCRIPTION: Fills the figure with initial data for each continent, using references to the previously created grid.

LANGUAGE: python
CODE:
col_name_template = '{year}_{continent}_{header}_gapminder_grid'
year = 1952
for continent in continents:
    data_dict = {
        'xsrc': grid.get_column_reference(col_name_template.format(
            year=year, continent=continent, header='lifeExp'
        )),
        'ysrc': grid.get_column_reference(col_name_template.format(
            year=year, continent=continent, header='gdpPercap'
        )),
        'mode': 'markers',
        'textsrc': grid.get_column_reference(col_name_template.format(
            year=year, continent=continent, header='country'
        )),
        'marker': {
            'sizemode': 'area',
            'sizeref': 200000,
            'sizesrc': grid.get_column_reference(col_name_template.format(
                 year=year, continent=continent, header='pop'
            )),
            'color': custom_colors[continent]
        },
        'name': continent
    }
    figure['data'].append(data_dict)

----------------------------------------

TITLE: Using Tickformat Attribute for Percentage Formatting in Plotly
DESCRIPTION: This code demonstrates how to use the tickformat attribute to display y-axis values as percentages in a Plotly scatter plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
y = [0.18, 0.38, 0.56, 0.46, 0.59, 0.4, 0.78, 0.77, 0.74, 0.42, 0.45, 0.39]

trace0 = go.Scatter(
    x = x,
    y = y
)

data = [trace0]

layout = go.Layout(
    yaxis = go.layout.YAxis(
        tickformat = '%'
    )
)

fig = go.Figure(
    data = data,
    layout = layout
)

py.iplot(fig, filename='using-tickformat-attribute')

----------------------------------------

TITLE: Customizing Colorscale for Contour Plot in Plotly
DESCRIPTION: This code demonstrates how to customize the colorscale of a contour plot using Plotly. It uses the 'Jet' colorscale to create a vibrant color gradient for the contour levels.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
     go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale='Jet',
    )]
py.iplot(data)

----------------------------------------

TITLE: Creating and Displaying GraphWidgets
DESCRIPTION: Initializes two GraphWidgets using the previously created Plotly graphs and displays them in the notebook.

LANGUAGE: python
CODE:
g = GraphWidget('https://plotly.com/~kevintest/1189/')
g2 = GraphWidget('https://plotly.com/~kevintest/1187')
display(g)
display(g2)

----------------------------------------

TITLE: Creating a Single State Choropleth for Florida
DESCRIPTION: This example shows how to create a detailed choropleth map for a single state (Florida) with custom color scaling and styling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import numpy as np
import pandas as pd

df_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')
df_sample_r = df_sample[df_sample['STNAME'] == 'Florida']

values = df_sample_r['TOT_POP'].tolist()
fips = df_sample_r['FIPS'].tolist()

endpts = list(np.mgrid[min(values):max(values):4j])
colorscale = ["#030512","#1d1d3b","#323268","#3d4b94","#3e6ab0",
              "#4989bc","#60a7c7","#85c5d3","#b7e0e4","#eafcfd"]
fig = ff.create_choropleth(
    fips=fips, values=values, scope=['Florida'], show_state_data=True,
    colorscale=colorscale, binning_endpoints=endpts, round_legend_values=True,
    plot_bgcolor='rgb(229,229,229)',
    paper_bgcolor='rgb(229,229,229)',
    legend_title='Population by County',
    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5},
    exponent_format=True,
)
py.iplot(fig, filename='choropleth_florida')

----------------------------------------

TITLE: Importing Common Data Science Libraries in Python
DESCRIPTION: Imports popular Python libraries for data analysis and visualization: pandas, numpy, scipy, and plotly.

LANGUAGE: python
CODE:
import pandas as pd
import numpy as np
import scipy as sp
import plotly.plotly as py

----------------------------------------

TITLE: Creating a Histogram with Larger Bins using Plotly in Python
DESCRIPTION: This code creates another histogram with larger bin sizes (0.75 instead of 0.25) to demonstrate how changing bin size affects the visualization of the data distribution.

LANGUAGE: python
CODE:
trace = go.Histogram(x=x, xbins=dict(start=np.min(x), size=0.75, end=np.max(x)),
                   marker=dict(color='rgb(0, 0, 100)'))

layout = go.Layout(
    title="Histogram Frequency Counts"
)

fig = go.Figure(data=go.Data([trace]), layout=layout)
py.iplot(fig, filename='histogram-freq-counts-larger-bins')

----------------------------------------

TITLE: Creating Grouped Bar Chart
DESCRIPTION: Creates a grouped bar chart comparing values across two categories

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Bar(
    x=['giraffes', 'orangutans', 'monkeys'],
    y=[20, 14, 23],
    name='SF Zoo'
)
trace2 = go.Bar(
    x=['giraffes', 'orangutans', 'monkeys'],
    y=[12, 18, 29],
    name='LA Zoo'
)

data = [trace1, trace2]
layout = go.Layout(
    barmode='group'
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='grouped-bar')

----------------------------------------

TITLE: Generating X-Y Coordinate Pairs for Plotly Visualization
DESCRIPTION: A list of 30 space-separated pairs of floating-point numbers, each pair representing an x-y coordinate. These data points can be used to create scatter plots, line charts, or other 2D visualizations in Plotly.

LANGUAGE: plaintext
CODE:
0.072213 0.616682
0.115641 0.256523
0.709330 0.077903
0.887964 0.372909
0.796091 0.624687
0.780431 0.069521
0.222984 0.266937
0.773456 0.151515
0.681843 0.500971
0.238492 0.623246
0.465003 0.922338
0.162313 0.481267
0.950678 0.447069
0.649028 0.803023
0.128857 0.013585
0.594825 0.671393
0.465626 0.745341
0.431693 0.989688
0.045125 0.219672
0.540694 0.005390
0.691728 0.573342
0.717810 0.898306
0.174244 0.180820
0.270756 0.310889
0.410399 0.182079
0.139572 0.704512
0.838489 0.642405
0.348582 0.240018
0.305693 0.803172
0.397964 0.863419

----------------------------------------

TITLE: Creating Multiple Isosurfaces with Caps in Plotly
DESCRIPTION: This snippet shows how to create multiple isosurfaces with caps. It uses a similar setup to the previous example but adds multiple surfaces and enables caps on all axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.io as pio
import numpy as np

f = lambda x, y, z:  81*(x**3 + y**3 + z**3) - 189*(x**2*y + x**2*z + y**2*x +y**2*z + z**2*x + z**2*y) +\
                     54*(x*y*z) + 126*(x*y + x*z + y*z) - 9*(x**2 + y**2 + z**2) - 9*(x + y + z) + 1

a = 1
X, Y, Z = np.mgrid[-a:a:25j, -a:a:25j, -a:a:25j]

data = [go.Isosurface(
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=f(X, Y, Z).flatten(),
    isomin=-10,
    isomax=10,
    surface=dict(show=True,count=4, fill=0.8, pattern='odd'),
    caps=go.isosurface.Caps(
        z=dict(show=True),
        x=dict(show=True),
        y=dict(show=True)
    ),
)]

layout = go.Layout(
    margin=dict(t=0, l=0, b=0),
    template=pio.templates['plotly'],
    scene=dict(
        camera=dict(
            eye=dict(
                x=1.86,
                y=0.61,
                z=0.98
            )
        )
    )
)

fig = go.Figure(data, layout)

py.iplot(fig, config=dict(showSendToCloud=True), filename='multiple-isosurface-with-caps')

----------------------------------------

TITLE: Surface Point Generation
DESCRIPTION: Function that generates points on the Bézier surface for a given set of parameters

LANGUAGE: Python
CODE:
def surface_points(n, b, barycenters):
    points=[]
    for weight in barycenters:
        b_aux=np.array(b)
        points.append(deCasteljau(n, b_aux, weight))
    return zip(*points)

----------------------------------------

TITLE: Using Exponentformat Attribute in Plotly
DESCRIPTION: This code demonstrates how to use the exponentformat attribute to display y-axis values in scientific notation in a Plotly scatter plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
y = [68000, 52000, 60000, 20000, 95000, 40000, 60000, 79000, 74000, 42000, 20000, 90000]

trace0 = go.Scatter(
    x = x,
    y = y
)

data = [trace0]

layout = go.Layout(
    yaxis = go.layout.YAxis(
        showexponent = 'all',
        exponentformat = 'e'
    )
)

fig = go.Figure(
    data = data,
    layout = layout
)

py.iplot(fig, filename='using-exponentformat')

----------------------------------------

TITLE: Creating Row-Faceted Plot with Custom Color
DESCRIPTION: Creates a facet grid plot with rows split by cylinder count and custom purple coloring for the markers.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import pandas as pd
mpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')

fig = ff.create_facet_grid(
    mpg,
    x='displ',
    y='cty',
    facet_row='cyl',
    marker={'color': 'rgb(86, 7, 100)'},
)

py.iplot(fig, filename='facet by row')

----------------------------------------

TITLE: Event Handler Implementation
DESCRIPTION: Defines message handler function to process widget events like clicks and zooms. Clears output and displays updated graph data.

LANGUAGE: python
CODE:
from IPython.display import display, clear_output
def message_handler(widget, msg):
    clear_output()
    print widget._graph_url
    display(msg)
    
g.on_click(message_handler)

----------------------------------------

TITLE: Event Handler Implementation
DESCRIPTION: Defines message handler function to process widget events like clicks and zooms. Clears output and displays updated graph data.

LANGUAGE: python
CODE:
from IPython.display import display, clear_output
def message_handler(widget, msg):
    clear_output()
    print widget._graph_url
    display(msg)
    
g.on_click(message_handler)

----------------------------------------

TITLE: Multiple Traces with WebGL in Plotly Python
DESCRIPTION: Creates multiple line traces using WebGL rendering, demonstrating how to plot multiple datasets simultaneously. Generates 10 traces with 5000 points each.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

data = []
trace_num = 10
point_num = 5000
for i in range(trace_num):
    data.append(go.Scattergl(
        x = np.linspace(0, 1, point_num),
        y = np.random.randn(point_num)+(i*5)
    )
)
layout = dict(showlegend=False)
fig=dict(data=data, layout=layout)
py.iplot(fig, filename='WebGL_line')

----------------------------------------

TITLE: Visualizing Savitzky-Golay Filter Smoothing with Plotly
DESCRIPTION: This code generates sample data, applies the Savitzky-Golay filter for smoothing, and creates an interactive plot using Plotly to compare the original, noisy, and smoothed data.

LANGUAGE: python
CODE:
x = np.linspace(0, 10, 100)
y = np.sin(x)
y_noise = [y_item + np.random.choice([-1, 1])*np.random.random() for y_item in y]

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    marker=dict(
        size=2,
        color='rgb(0, 0, 0)',
    ),
    name='Sine'
)

trace2 = go.Scatter(
    x=x,
    y=y_noise,
    mode='markers',
    marker=dict(
        size=6,
        color='#5E88FC',
        symbol='circle-open'
    ),
    name='Noisy Sine'
)

trace3 = go.Scatter(
    x=x,
    y=signal.savgol_filter(y, 53, 3),
    mode='markers',
    marker=dict(
        size=6,
        color='#C190F0',
        symbol='triangle-up'
    ),
    name='Savitzky-Golay'
)

layout = go.Layout(
    showlegend=True
)

data = [trace1, trace2, trace3]
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='smoothing-savitzky-golay-filter')

----------------------------------------

TITLE: Creating Stacked Area Chart in Plotly
DESCRIPTION: This snippet shows how to create a stacked area chart using Plotly. It uses multiple scatter plots with the 'stackgroup' parameter to stack the areas.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Add original data
x=['Winter', 'Spring', 'Summer', 'Fall']

trace0 = dict(
    x=x,
    y=[40, 60, 40, 10],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5,
              color='rgb(131, 90, 241)'),
    stackgroup='one'
)
trace1 = dict(
    x=x,
    y=[20, 10, 10, 60],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5,
              color='rgb(111, 231, 219)'),
    stackgroup='one'
)
trace2 = dict(
    x=x,
    y=[40, 30, 50, 30],
    hoverinfo='x+y',
    mode='lines',
    line=dict(width=0.5,
              color='rgb(184, 247, 212)'),
    stackgroup='one'
)
data = [trace0, trace1, trace2]

fig = dict(data=data)
py.iplot(fig, filename='stacked-area-plot-hover', validate=False)

----------------------------------------

TITLE: Multiple Dataset Distplot in Python
DESCRIPTION: Demonstrates how to create a distribution plot with multiple datasets, each with different mean values. Uses custom bin sizes for visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import numpy as np

x1 = np.random.randn(200)-2  
x2 = np.random.randn(200)  
x3 = np.random.randn(200)+2  
x4 = np.random.randn(200)+4  

hist_data = [x1, x2, x3, x4]
group_labels = ['Group 1', 'Group 2', 'Group 3', 'Group 4']

fig = ff.create_distplot(hist_data, group_labels, bin_size=.2)
py.iplot(fig, filename='Distplot with Multiple Datasets')

----------------------------------------

TITLE: Publishing Jupyter Notebook with Custom Styling
DESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs the publisher package, and publishes the notebook with specified metadata.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python-Frequency-Counts.ipynb', 'python/frequency-counts/', 'Frequency Counts | plotly',
    'Learn how to perform frequency counts using Python.',
    title='Frequency Counts in Python. | plotly',
    name='Frequency Counts',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='statistics', order=2,
    ipynb= '~notebook_demo/111')

----------------------------------------

TITLE: Creating Horizontal Legend in Plotly
DESCRIPTION: Shows how to create a horizontal legend by setting the orientation parameter in the legend layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)

data = [trace0, trace1]
layout = go.Layout(
    legend=dict(orientation="h")
)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='horizontal-legend')

----------------------------------------

TITLE: Serving the Jekyll Application Locally
DESCRIPTION: Command to serve the Jekyll application locally for development and testing.

LANGUAGE: sh
CODE:
bundle exec jekyll serve --config _config_dev.yml

----------------------------------------

TITLE: Event Study Analysis Class Implementation
DESCRIPTION: Creates an EventPlot class for conducting event studies around specific dates, calculating asset price moves over specified windows.

LANGUAGE: python
CODE:
# for dates
import datetime

# time series manipulation
import pandas

# for plotting data
import plotly
from plotly.graph_objs import *

class EventPlot:    
    def event_study(self, spot, dates, pre, post, mean_label = 'Mean'):
        data_frame = pandas.DataFrame()

        # for each date grab spot data the days before and after
        for i in range(0, len(dates)):
            mid_index = spot.index.searchsorted(dates[i])
            start_index = mid_index + pre
            finish_index = mid_index + post + 1

            x = (spot.ix[start_index:finish_index])[spot.columns.values[0]]

            data_frame[dates[i]] = x.values

        data_frame.index = range(pre, post + 1)

        data_frame = data_frame / data_frame.shift(1) - 1   # returns

        # add the mean on to the end
        data_frame[mean_label] = data_frame.mean(axis=1)

        data_frame = 100.0 * (1.0 + data_frame).cumprod()   # index
        data_frame.ix[pre,:] = 100

        return data_frame

----------------------------------------

TITLE: Creating Basic Line Plot
DESCRIPTION: Demonstrates how to create a basic line plot using random data generated with numpy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Create random data with numpy
import numpy as np

N = 500
random_x = np.linspace(0, 1, N)
random_y = np.random.randn(N)

# Create a trace
trace = go.Scatter(
    x = random_x,
    y = random_y
)

data = [trace]

py.iplot(data, filename='basic-line')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the correct version is installed for linear fit functionality.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Normalizing Data to [0, 1] Interval with Plotly in Python
DESCRIPTION: This code normalizes data to the [0, 1] interval by dividing each point by the norm of the dataset. It creates histograms of the original and normalized data using Plotly subplots.

LANGUAGE: python
CODE:
data_norm_to_0_1 = [number/scipy.linalg.norm(data) for number in data]

trace1 = go.Histogram(
    x=data,
    opacity=0.75,
    name='data',
)

trace2 = go.Histogram(
    x=data_norm_to_0_1,
    opacity=0.75,
    name='normalized to [0,1]',
)

fig = tools.make_subplots(rows=2, cols=1)

fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 2, 1)

fig['layout'].update(height=600, width=800, title='Normalize to [0,1]')
py.iplot(fig, filename='apple-data-normalize-0-1')

----------------------------------------

TITLE: Creating Custom Contour Plot Colorscale in Plotly
DESCRIPTION: This code demonstrates how to create a custom colorscale for a contour plot using Plotly. It sets up z-values and applies a custom colorscale to the contour plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Contour(
        z=[[10, 10.625, 12.5, 15.625, 20],
           [5.625, 6.25, 8.125, 11.25, 15.625],
           [2.5, 3.125, 5., 8.125, 12.5],
           [0.625, 1.25, 3.125, 6.25, 10.625],
           [0, 0.625, 2.5, 5.625, 10]],
        colorscale=[[0, 'rgb(166,206,227)'], [0.25, 'rgb(31,120,180)'], [0.45, 'rgb(178,223,138)'], [0.65, 'rgb(51,160,44)'], [0.85, 'rgb(251,154,153)'], [1, 'rgb(227,26,28)']],
    )
]

py.iplot(data, filename='colorscales-custom-colorscale')

----------------------------------------

TITLE: Creating SVG Scatter Plot with 75,000 Points in Plotly
DESCRIPTION: This code snippet shows how to create an SVG-rendered scatter plot with 75,000 random points using Plotly's Scatter function. It uses numpy for data generation and sets up the plot with the same marker properties as the WebGL version for comparison.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

N = 75000
trace = go.Scatter(
    x = np.random.randn(N),
    y = np.random.randn(N),
    mode = 'markers',
    marker = dict(
        line = dict(
            width = 1, 
            color = '#404040')
    )
)
data = [trace]
layout = dict(title = 'SVG')
fig = dict(data=data, layout=layout)
py.iplot(fig, filename='svg75')

----------------------------------------

TITLE: Running Jekyll Server for Development in Ruby
DESCRIPTION: This command starts a Jekyll server with a development configuration, creating a local server at http://localhost:4000 that Browsersync can use.

LANGUAGE: ruby
CODE:
$ jekyll serve --config _config_dev.yml

----------------------------------------

TITLE: Setting up Plotly Documentation Styling
DESCRIPTION: Configures the Jupyter notebook display settings and installs the Plotly publisher package for documentation. Sets up custom fonts and CSS styling for the notebook interface.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'webgl-text-and-annotations.ipynb', 'python/webgl-text-and-annotations/', 'WebGL Text and Annotations',
    'How to add webGL based text labels and annotations to plots in python',
    title = 'WebGL Text and Annotations | plotly',
    name = 'WebGL Text and Annotations',
    has_thumbnail='false', thumbnail='thumbnail/webgl-text-and-annotations.jpg', 
    language='python', 
    page_type='example_index', display_as='style_opt', order=2,
    ipynb= '~notebook_demo/219', uses_plotly_offline=False)

----------------------------------------

TITLE: Creating Colorscale Visualization Plot
DESCRIPTION: Function to create a subplot visualization of the colorscale applied to different data types including heatmaps. Takes a colorscale and title as input.

LANGUAGE: python
CODE:
def colorscale_plot(colorscale, title):    
    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)
    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)
    trace3 = go.Heatmap(z=z,colorscale=colorscale, showscale=False)
    
    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)
    fig.append_trace(trace1, 1, 1)
    fig.append_trace(trace2, 1, 2)
    fig.append_trace(trace3, 1, 3)
    
    fig['layout'].update(title=title)
    fig['layout']['xaxis2'].update(range=[0, 450])
    fig['layout']['yaxis2'].update(range=[0, 270])
    
    return fig

----------------------------------------

TITLE: Creating Isosurface Plot with Additional Slices in Plotly
DESCRIPTION: This code creates a more complex isosurface plot with additional slices. It uses NumPy to generate grid data, defines a custom function for values, and adds slices and caps to the isosurface.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

f = lambda x, y, z:  81*(x**3 + y**3 + z**3) - 189*(x**2*y + x**2*z + y**2*x +y**2*z + z**2*x + z**2*y) +\
                     54*(x*y*z) + 126*(x*y + x*z + y*z) - 9*(x**2 + y**2 + z**2) - 9*(x + y + z) + 1

a = 1
X, Y, Z = np.mgrid[-a:a:25j, -a:a:25j, -a:a:25j]

data = [go.Isosurface(
    x=X.flatten(),
    y=Y.flatten(),
    z=Z.flatten(),
    value=f(X, Y, Z).flatten(),
    isomin=-100,
    isomax=100,
    surface=dict(show=True,count=1, fill=0.8),
    slices=go.isosurface.Slices(
        z=go.isosurface.slices.Z(
            show = True,
            locations=[-0.3, 0.5])
    ),
    caps=go.isosurface.Caps(
        z=dict(show=False),
        x=dict(show=False),
        y=dict(show=False)
    ),
)]

layout = go.Layout(
    margin=dict(t=0, l=0, b=0),
    scene=dict(
        camera=dict(
            eye=dict(
                x=1.86,
                y=0.61,
                z=0.98
            )
        )
    )
)

fig = go.Figure(data, layout)

py.iplot(fig, config=dict(showSendToCloud=True), filename='isosurface-with-slices')

----------------------------------------

TITLE: Plotly Layout and Visualization Functions
DESCRIPTION: Functions for creating Plotly layouts and converting Pandas dataframes to Plotly-compatible formats with customizable styling options.

LANGUAGE: python
CODE:
def convert_df_plotly(self, dataframe, axis_no = 1, color_def = ['default'],
                          special_line = 'Mean', showlegend = True, addmarker = False, gradcolor = None):
        x = dataframe.index.values
        traces = []
        increments = 0.95 / float(len(dataframe.columns))

        if gradcolor is not None:
            try:
                import colorlover as cl
                color_def = cl.scales[str(len(dataframe.columns))]['seq'][gradcolor]
            except:
                print('Check colorlover installation...')

        i = 0

        for key in dataframe:
            scatter = plotly.graph_objs.Scatter(
                        x = x,
                        y = dataframe[key].values,
                        name = key,
                        xaxis = 'x' + str(axis_no),
                        yaxis = 'y' + str(axis_no),
                        showlegend = showlegend)

            if color_def[i % len(color_def)] != "default":
                if special_line in str(key):
                    scatter['mode'] = 'lines'
                    scatter['line'] = plotly.graph_objs.Line(
                                color = color_def[i % len(color_def)],
                                width = 2
                            )
                else:
                    line_width = 1
                    if addmarker:
                        opacity = 0.05 + (increments * i)
                        scatter['mode'] = 'markers+lines'
                        scatter['marker'] = plotly.graph_objs.Marker(
                                    color=color_def[i % len(color_def)],
                                    opacity = opacity,
                                    size = 5)
                        line_width = 0.2
                    else:
                        scatter['mode'] = 'lines'

                    scatter['line'] = plotly.graph_objs.Line(
                            color = color_def[i % len(color_def)],
                            width = line_width)
                    
                i = i + 1

            traces.append(scatter)

        return traces

----------------------------------------

TITLE: Creating Custom Discretized Heatmap Colorscale in Plotly
DESCRIPTION: This code creates a custom discretized heatmap colorscale using Plotly. It demonstrates how to set specific colors for different ranges of values in the heatmap.

LANGUAGE: python
CODE:
import plotly.plotly as py

py.iplot([{
    'z': [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    ],
    'type': 'heatmap',
    'colorscale': [
        # Let first 10% (0.1) of the values have color rgb(0, 0, 0)
        [0, 'rgb(0, 0, 0)'],
        [0.1, 'rgb(0, 0, 0)'],

        # Let values between 10-20% of the min and max of z
        # have color rgb(20, 20, 20)
        [0.1, 'rgb(20, 20, 20)'],
        [0.2, 'rgb(20, 20, 20)'],

        # Values between 20-30% of the min and max of z
        # have color rgb(40, 40, 40)
        [0.2, 'rgb(40, 40, 40)'],
        [0.3, 'rgb(40, 40, 40)'],

        [0.3, 'rgb(60, 60, 60)'],
        [0.4, 'rgb(60, 60, 60)'],

        [0.4, 'rgb(80, 80, 80)'],
        [0.5, 'rgb(80, 80, 80)'],

        [0.5, 'rgb(100, 100, 100)'],
        [0.6, 'rgb(100, 100, 100)'],

        [0.6, 'rgb(120, 120, 120)'],
        [0.7, 'rgb(120, 120, 120)'],

        [0.7, 'rgb(140, 140, 140)'],
        [0.8, 'rgb(140, 140, 140)'],

        [0.8, 'rgb(160, 160, 160)'],
        [0.9, 'rgb(160, 160, 160)'],

        [0.9, 'rgb(180, 180, 180)'],
        [1.0, 'rgb(180, 180, 180)']
    ],
    'colorbar': {
        'tick0': 0,
        'dtick': 1
    }
}], filename='heatmap-discrete-colorscale')

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling in Python
DESCRIPTION: Sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook to the Plotly documentation site.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python-Peak-Integration.ipynb', 'python/peak-integration/', 'Peak Integration | plotly',
    'Learn how to integrate the area between peaks and bassline in Python.',
    title='Peak Integration in Python | plotly',
    name='Peak Integration',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=4,
    ipynb= '~notebook_demo/121')

----------------------------------------

TITLE: Indexing a Pandas DataFrame in Python
DESCRIPTION: Demonstrates how to access a specific column and element in a Pandas DataFrame.

LANGUAGE: python
CODE:
schools = df.School
schools[0]

----------------------------------------

TITLE: Creating Stacked Area Chart with Normalized Values in Plotly
DESCRIPTION: This code creates a stacked area chart with normalized values (percentages) using Plotly. It uses the 'groupnorm' parameter set to 'percent' to normalize the values.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = dict(
    x=['Winter', 'Spring', 'Summer', 'Fall'],
    y=['40', '20', '30', '40'],
    mode='lines',
    line=dict(width=0.5,
              color='rgb(184, 247, 212)'),
    stackgroup='one',
    groupnorm='percent'
)
trace1 = dict(
    x=['Winter', 'Spring', 'Summer', 'Fall'],
    y=['50', '70', '40', '60'],
    mode='lines',
    line=dict(width=0.5,
              color='rgb(111, 231, 219)'),
    stackgroup='one'
)
trace2 = dict(
    x=['Winter', 'Spring', 'Summer', 'Fall'],
    y=['70', '80', '60', '70'],
    mode='lines',
    line=dict(width=0.5,
              color='rgb(127, 166, 238)'),
    stackgroup='one'
)
trace3 = dict(
    x=['Winter', 'Spring', 'Summer', 'Fall'],
    y=['100', '100', '100', '100'],
    mode='lines',
    line=dict(width=0.5,
              color='rgb(131, 90, 241)'),
    stackgroup='one'
)
data = [trace0, trace1, trace2, trace3]
layout = go.Layout(
    showlegend=True,
    xaxis=dict(
        type='category',
    ),
    yaxis=dict(
        type='linear',
        range=[1, 100],
        dtick=20,
        ticksuffix='%'
    )
)
fig = dict(data=data, layout=layout)
py.iplot(fig, filename='stacked-area-plot-norm', validate=False)

----------------------------------------

TITLE: Performing One-Sample T-Test in Python using SciPy
DESCRIPTION: This code performs a one-sample t-test using SciPy's ttest_1samp function and creates a table to display the results using Plotly's FigureFactory.

LANGUAGE: python
CODE:
true_mu = 0

onesample_results = scipy.stats.ttest_1samp(data1, true_mu)

matrix_onesample = [
    ['', 'Test Statistic', 'p-value'],
    ['Sample Data', onesample_results[0], onesample_results[1]]
]

onesample_table = FF.create_table(matrix_onesample, index=True)
py.iplot(onesample_table, filename='onesample-table')

----------------------------------------

TITLE: Creating Scatter Plot with Color Opacity in Plotly
DESCRIPTION: This code creates a scatter plot with custom color opacity for markers. It demonstrates how to set rgba color values to achieve transparency while keeping marker borders opaque.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.uniform(low=3, high=6, size=(500,))
y = np.random.uniform(low=3, high=6, size=(500,))
  
data = [
    go.Scatter(
        mode = 'markers',
        x = x,
        y = y,
        marker = dict(
          color = 'rgba(17, 157, 255, 0.5)',
          size = 20,
          line = dict(
            color = 'rgb(231, 99, 250)',
            width = 2
          )
        ),
        showlegend = False
      ),
      go.Scatter(
          mode = 'markers',
          x = [2,2],
          y = [4.25,4.75],
          marker = dict(
            color = 'rgba(17, 157, 255, 0.5)',
            size = 80,
            line = dict(
              color = 'rgb(231, 99, 250)',
              width = 8
            )
          ),
          showlegend = False
    )]

py.iplot(data, filename = "style-color-opacity")

----------------------------------------

TITLE: Installing Ruby Dependencies for Plotly Docs
DESCRIPTION: Commands to install Bundler and required Ruby dependencies for the Plotly documentation project.

LANGUAGE: bash
CODE:
$ gem install bundler
$ bundle install

----------------------------------------

TITLE: Creating a plot with custom color scale
DESCRIPTION: Uses plotly to create a scatter plot with markers colored using the interpolated color scale.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *
import math

un='IPython.Demo'; k='1fw3zw2o13'; py.sign_in(un,k);

data = Data([ Scatter(
    x = [ i * 0.1 for i in range(500) ],
    y = [ math.sin(j * 0.1) for j in range(500) ],
    mode='markers',
    marker=Marker(color=bupu500,size=22.0,line=Line(color='black',width=2)),
    text = cl.to_rgb( bupu500 ),
    opacity = 0.7
)])
layout = Layout( showlegend=False, xaxis=XAxis(zeroline=False), yaxis=YAxis(zeroline=False) )
fig = Figure(data=data, layout=layout)
py.iplot(fig, filename='spectral_bubblechart')

----------------------------------------

TITLE: Visualizing Atomic Orbital Contributions in Band Structure
DESCRIPTION: Calculates normalized atomic orbital contributions and uses a color scale to visualize them in the band structure plot.

LANGUAGE: Python
CODE:
name = "Si"
pbands = bands.get_projections_on_elts_and_orbitals({name: ["s", "p", "d"]})

contrib = np.zeros((bands.nb_bands, len(bands.kpoints), 3))                        
for band in range(bands.nb_bands):
    for k in range(len(bands.kpoints)):
        sc = pbands[Spin.up][band][k][name]["s"]**2
        pc = pbands[Spin.up][band][k][name]["p"]**2
        dc = pbands[Spin.up][band][k][name]["d"]**2
        tot = sc + pc + dc
        if tot != 0.0:
            contrib[band, k, 0] = sc / tot
            contrib[band, k, 1] = pc / tot
            contrib[band, k, 2] = dc / tot

colorBands = list()
nkpts = len(bands.kpoints)
for band in range(bands.nb_bands):
    eband = [e - bands.efermi for e in bands.bands[Spin.up][band]]
    for k in range(nkpts - 1):
        red, green, blue = [int(255 * (contrib[band, k, i] + contrib[band, k+1, i])/2) for i in range(3)]
        colorBands.append(
            go.Scatter(
                x=[k, k+1],
                y=[eband[k], eband[k+1]],
                mode="lines",
                line=go.Line(color="rgb({}, {}, {})".format(red, green, blue)),
                showlegend=False
            )
        )

----------------------------------------

TITLE: Simulating Negative Binomial Distribution in Python
DESCRIPTION: This code simulates a negative binomial distribution using a Poisson-Gamma mixture. It demonstrates Monte Carlo integration to estimate the mean of the distribution.

LANGUAGE: python
CODE:
import numpy as np

r = 3
p = 0.7

# Simulate Gamma means (r: shape parameter; p / (1 - p): scale parameter).
lam = np.random.gamma(r, p / (1 - p), size=100)

# Simulate sample Poisson conditional on lambda.
sim_vals = np.random.poisson(lam)

sim_vals.mean()

----------------------------------------

TITLE: Setting Up Display and Publishing Configuration
DESCRIPTION: Configures the notebook display settings and publishes the notebook using Plotly's publisher tool with specific metadata and styling.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python_Numerical_Differentiation.ipynb', 'python/numerical-differentiation/', 'Numerical Differentiation | plotly',
    'Learn how to differentiate a sequence or list of values numerically',
    title='Numerical Differentiation in Python. | plotly',
    name='Numerical Differentiation',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=6,
    ipynb= '~notebook_demo/102')

----------------------------------------

TITLE: Counting Lines in CSV File Using Shell Command in Python
DESCRIPTION: Executes a shell command to count the number of lines in the CSV file.

LANGUAGE: python
CODE:
!wc -l < 311_100M.csv # Number of lines in dataset

----------------------------------------

TITLE: Updating Graph Layout
DESCRIPTION: Update the layout properties of the graph like title and axis labels

LANGUAGE: Python
CODE:
g.relayout({'xaxis.title': 'samples'})

----------------------------------------

TITLE: Configuring URL Redirect for Plotly R Streaming Documentation
DESCRIPTION: This YAML configuration sets up a redirect from the '/r/streaming/' path to the Dash for R documentation site. It uses Jekyll's redirect_to feature to handle the redirection.

LANGUAGE: yaml
CODE:
---
permalink: r/streaming/
redirect_to: https://dashr.plot.ly
---

----------------------------------------

TITLE: Creating ipywidgets for User Interface Controls
DESCRIPTION: Defines various ipywidgets including sliders, checkboxes, and dropdowns for filtering and interacting with the flight data.

LANGUAGE: python
CODE:
month = widgets.FloatSlider(
    value=1.0,
    min=1.0,
    max=12.0,
    step=1.0,
    description='Month:',
    continuous_update = False
)

use_date = widgets.Checkbox(
    description='Date: ',
    value=True,
)

container = widgets.HBox(children=[use_date, month] )

textbox = widgets.Text(
    description='Airline:   ',
    value='Delta',
)

origin = widgets.Dropdown(
    options=list(df['origin'].unique()),
    value='LGA',
    description='Origin Airport:',
)

g = GraphWidget('https://plotly.com/~kevintest/1192/')

----------------------------------------

TITLE: Customizing 2D Histogram Binning and Styling in Plotly
DESCRIPTION: This code creates a 2D histogram with custom binning and color scaling. It shows how to adjust bin sizes, ranges, and color schemes for more detailed control over the visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

x = np.random.randn(500)
y = np.random.randn(500)+1

data = [
    go.Histogram2d(x=x, y=y, histnorm='probability',
        autobinx=False,
        xbins=dict(start=-3, end=3, size=0.1),
        autobiny=False,
        ybins=dict(start=-2.5, end=4, size=0.1),
        colorscale=[[0, 'rgb(12,51,131)'], [0.25, 'rgb(10,136,186)'], [0.5, 'rgb(242,211,56)'], [0.75, 'rgb(242,143,56)'], [1, 'rgb(217,30,30)']]
    )
]
py.iplot(data)

----------------------------------------

TITLE: Creating Transfer Function for Bicycle Plant Model
DESCRIPTION: Defines the transfer function relating steering angle to roll angle for the bicycle model using the Control library.

LANGUAGE: python
CODE:
num = -m * h * v / b * np.array([a, v])
den = np.array([(I + m * h**2), 0.0, -m * g * h])
theta_delta = cn.TransferFunction(num, den)
theta_delta

----------------------------------------

TITLE: Creating MA Plot with Plotly
DESCRIPTION: Generates an interactive MA plot comparing gene expression between adult and newborn tissue samples using Plotly's scatter plot functionality.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *

A = df_MA['adult'] + df_MA['newborn']
M = df_MA['adult'] - df_MA['newborn']

trace = Scatter(
    x=A[1:1000],
    y=M[1:1000],
    mode='markers',
    name="substantia nigra",
    text=df_MA['gene'][1:1000],
    marker=Marker(
        size=5,
        line=Line(
            width=0.5),
        opacity=0.8))

layout = Layout(showlegend=True,
                title="MA plot of gene expression in adult and newborn samples of substantia nigra",
                xaxis=XAxis(
                    title='A',
                ),
               yaxis=YAxis(
                    title='M',
                ))
fig = Figure(data=Data([trace]), layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Creating Basic Symmetric Error Bars with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a basic scatter plot with symmetric error bars using Plotly. It uses the go.Scatter object to define the data points and error_y parameter to specify the error bar properties.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[0, 1, 2],
        y=[6, 10, 2],
        error_y=dict(
            type='data',
            array=[1, 2, 3],
            visible=True
        )
    )
]

py.iplot(data, filename='basic-error-bar')

----------------------------------------

TITLE: Embedding a YouTube Video in Jupyter Notebook
DESCRIPTION: Shows how to embed a YouTube video in a Jupyter notebook using IPython display functions.

LANGUAGE: python
CODE:
from IPython.display import YouTubeVideo
YouTubeVideo("wupToqz1e2g")

----------------------------------------

TITLE: Querying SQLite Database with Pandas in Python
DESCRIPTION: Demonstrates various SQL queries using Pandas' read_sql_query function to retrieve data from the SQLite database.

LANGUAGE: python
CODE:
df = pd.read_sql_query('SELECT Agency, Descriptor FROM data LIMIT 3', disk_engine)
df = pd.read_sql_query('SELECT ComplaintType, Descriptor, Agency '
                       'FROM data '
                       'LIMIT 10', disk_engine)

----------------------------------------

TITLE: Zooming on Static Images in Plotly with Python
DESCRIPTION: This example shows how to create a zoomable static image plot using Plotly in Python. It loads an image, sets up the layout to match the image dimensions, and adds a scatter trace to enable zooming functionality.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

img_width = 1600
img_height = 900
scale_factor = 0.5

layout = go.Layout(
    xaxis = go.layout.XAxis(
        visible = False,
        range = [0, img_width*scale_factor]),
    yaxis = go.layout.YAxis(
        visible=False,
        range = [0, img_height*scale_factor],
        # the scaleanchor attribute ensures that the aspect ratio stays constant
        scaleanchor = 'x'),
    width = img_width*scale_factor,
    height = img_height*scale_factor,
    margin = {'l': 0, 'r': 0, 't': 0, 'b': 0},
    images = [go.layout.Image(
        x=0,
        sizex=img_width*scale_factor,
        y=img_height*scale_factor,
        sizey=img_height*scale_factor,
        xref="x",
        yref="y",
        opacity=1.0,
        layer="below",
        sizing="stretch",
        source='https://raw.githubusercontent.com/michaelbabyn/plot_data/master/bridge.jpg')]
)
# we add a scatter trace with data points in opposite corners to give the Autoscale feature a reference point
fig = go.Figure(data=[{
    'x': [0, img_width*scale_factor], 
    'y': [0, img_height*scale_factor], 
    'mode': 'markers',
    'marker': {'opacity': 0}}],layout = layout)
py.iplot(fig, filename='EXAMPLES/zoom_bridge')

----------------------------------------

TITLE: Adding Contours to Carpet Plot in Plotly
DESCRIPTION: Enhances the carpet plot by adding contour data with custom colorbar and contour settings.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Contourcarpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    z = [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],
    autocontour = False,
    contours = dict(
    	start = 1,
        end = 14,
        size = 1
    ),
    line = dict(
    	width = 2,
    	smoothing = 0
    ),
    colorbar = dict(
    	len = 0.4,
        y = 0.25
    )
)

----------------------------------------

TITLE: Creating Animated Filled-Area Plot for Apple Stock Data with Plotly in Python
DESCRIPTION: This code creates an animated filled-area plot of Apple stock prices using Plotly. It defines the data, layout, and frames for the animation, including customized axes, play button, and animation settings.

LANGUAGE: python
CODE:
data=[dict(type='scatter',
           xsrc=grid.get_column_reference('x1'),
           ysrc= grid.get_column_reference('y1'),
           name='AAPL',
           mode='lines',
           line=dict(color= 'rgb(114, 186, 59)'),
           fill='tozeroy',
           fillcolor='rgba(114, 186, 59, 0.5)')]

axis=dict(ticklen=4,
          mirror=True,
          zeroline=False,
          showline=True,
          autorange=False,
          showgrid=False)

layout = dict(title='AAPL Daily Stock Price',
              font=dict(family='Balto'),
              showlegend=False,
              autosize=False,
              width=800,
              height=400,
              xaxis=dict(axis, **{'nticks':12, 'tickangle':-45,
                                  'range': [to_unix_time(datetime(2015, 2, 17)),
                                            to_unix_time(datetime(2016, 11, 30))]}),
              yaxis=dict(axis, **{'title': '$', 'range':[0,170]}),
              updatemenus=[dict(type='buttons',
                                showactive=False,
                                y=1,
                                x=1.1,
                                xanchor='right',
                                yanchor='top',
                                pad=dict(t=0, r=10),
                                buttons=[dict(label='Play',
                                              method='animate',
                                              args=[None, dict(frame=dict(duration=50, redraw=False), 
                                                               transition=dict(duration=0),
                                                               fromcurrent=True,
                                                               mode='immediate')])])])

frames=[{'data':[{'xsrc': grid.get_column_reference('x{}'.format(k + 1)),
                  'ysrc': grid.get_column_reference('y{}'.format(k + 1))}],
         'traces': [0]
        } for k in range(len(appl.Date) - 1)]

fig=dict(data=data, layout=layout, frames=frames)
py.icreate_animations(fig, 'AAPL-stockprice' + str(time.time()))

----------------------------------------

TITLE: Building Jekyll Site with Development Configuration in Ruby
DESCRIPTION: This command builds the Jekyll site using a development configuration, which can then be served using a local server like MAMP Pro.

LANGUAGE: ruby
CODE:
$ jekyll build --config _config_dev.yml

----------------------------------------

TITLE: Plotting Selected Stock Data Range
DESCRIPTION: Creates a scatter plot highlighting a specific section of SBUX stock data for analysis

LANGUAGE: python
CODE:
left_endpt=1857
right_endpt=1940

original_trace = go.Scatter(
    x = [j for j in range(len(stock_data['SBUX']))],
    y = stock_data['SBUX'][0:left_endpt].tolist() + [None for k in range(right_endpt - left_endpt)] +
        stock_data['SBUX'][right_endpt + 1:len(stock_data['SBUX'])].tolist(),
    mode = 'lines',
    name = 'Full Data',
    marker = dict(color = 'rgb(160,200,250)')
)

highlighted_trace = go.Scatter(
    x = [j for j in range(left_endpt, right_endpt)],
    y = stock_data['SBUX'][left_endpt:right_endpt],
    mode = 'lines',
    name = 'Highlighted Section',
    marker = dict(color = 'rgb(0,56,210)')
)

data = [original_trace, highlighted_trace,]
py.iplot(data, filename='stock-data-SBUX')

----------------------------------------

TITLE: Configuring Display Settings
DESCRIPTION: Sets up custom display settings for the notebook including fonts and CSS styling

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'streamline.ipynb', 'python/streamline-plots/', 'Python Streamline Plots | plotly',
    'How to make a streamline plot in Python. A streamline plot displays vector field data. ',
    title = 'Python Streamline Plots | plotly',
    name = 'Streamline Plots',
    has_thumbnail='true', thumbnail='thumbnail/streamline.jpg', 
    language='python', 
    display_as='scientific', order=13,
    ipynb= '~notebook_demo/43')

----------------------------------------

TITLE: Reading VASP Output and Creating Density of States Plot
DESCRIPTION: Reads projected density of states from VASP output file and creates scatter plots for total DOS and orbital contributions.

LANGUAGE: Python
CODE:
dosrun = Vasprun("./DOS/vasprun.xml")
spd_dos = dosrun.complete_dos.get_spd_dos()

trace_tdos = go.Scatter(
    x=dosrun.tdos.densities[Spin.up],
    y=dosrun.tdos.energies - dosrun.efermi,
    mode="lines",
    name="total DOS",
    line=go.Line(color="#444444"),
    fill="tozeroy"
)

trace_3s = go.Scatter(
    x=spd_dos["S"].densities[Spin.up],
    y=dosrun.tdos.energies - dosrun.efermi,
    mode="lines",
    name="3s",
    line=go.Line(color="red")
)

trace_3p = go.Scatter(
    x=spd_dos["P"].densities[Spin.up],
    y=dosrun.tdos.energies - dosrun.efermi,
    mode="lines",
    name="3p",
    line=go.Line(color="green")
)

dosdata = go.Data([trace_tdos, trace_3s, trace_3p])

----------------------------------------

TITLE: Updating Graph Data
DESCRIPTION: Update the x and y data of existing traces in the graph

LANGUAGE: Python
CODE:
g.restyle({'x': [[1,2,3], 
               [1, 2, 4]],
         'y': [6*[10,20,35]]
}, indices=[0, 1])

----------------------------------------

TITLE: Creating a Git Feature Branch for Plotly Documentation
DESCRIPTION: Git commands to create a new feature branch and check the status of changed files in the Plotly documentation repository.

LANGUAGE: bash
CODE:
git checkout -b your_feature_branch
git status

----------------------------------------

TITLE: Manually Triggering Hover Event
DESCRIPTION: Programmatically trigger a hover event on the graph

LANGUAGE: Python
CODE:
g.hover({'xval': 2, 'yval': 8})

----------------------------------------

TITLE: Applying Lighting Effects to 3D Cones with Plotly in Python
DESCRIPTION: This code creates multiple 3D cones with various lighting effects using Plotly. It demonstrates different lighting parameters such as ambient, diffuse, specular, roughness, and fresnel.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [{
      "type": "cone",
      "name": "base",
      "x": [1, 1, 1],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False
    },{
      "type": "cone",
      "name": "opacity:0.3",
      "x": [2, 2, 2],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "opacity": 0.3
    },{
      "type": "cone",
      "name": "lighting.ambient:0.3",
      "x": [3, 3, 3],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lighting": {"ambient": 0.3}
    },{
      "type": "cone",
      "name": "lighting.diffuse:0.3",
      "x": [4, 4, 4],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lighting": {"diffuse": 0.3}
    },{
      "type": "cone",
      "name": "lighting.specular:2",
      "x": [5, 5, 5],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lighting": {"specular": 2}
    },{
      "type": "cone",
      "name": "lighting.roughness:1",
      "x": [6, 6, 6],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lighting": {"roughness": 1}
    },{
      "type": "cone",
      "name": "lighting.fresnel:2",
      "x": [7, 7, 7],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lighting": {"fresnel": 2}
    },{
      "type": "cone",
      "name": "lighting.position x:0,y:0,z:1e5",
      "x": [8, 8, 8],
      "y": [1, 2, 3],
      "z": [1, 1, 1],
      "u": [1, 2, 3],
      "v": [1, 1, 2],
      "w": [4, 4, 1],
      "hoverinfo": "u+v+w+name",
      "showscale": False,
      "lightposition": {"x": 0, "y": 0, "z": 1e5}
    }
]

layout = {
    "scene": {
      "aspectmode": "data",
      "camera": {
        "eye": {"x": 0.05, "y": -2.6, "z": 2}
      }
    },
    "margin": {"t": 0, "b": 0, "l": 0, "r": 0}
}

fig = {"data": data, "layout": layout}
py.iplot(fig, filename="cone-lighting", validate=False)

----------------------------------------

TITLE: Importing Libraries and Loading Data for Ring Cyclide Visualization in Python
DESCRIPTION: This snippet imports necessary libraries, loads data for a ring cyclide from a JSON file, and creates deep copies of the data for manipulation.

LANGUAGE: python
CODE:
import json
import plotly.plotly as py
import plotly.graph_objs as go
import math
from plotly import tools
import copy

with open('2381.json') as data_file:
    fig = json.load(data_file)

data_original = fig['data'][0]     #this will be trace0

data = copy.deepcopy(fig['data'])[0]        #trace1

----------------------------------------

TITLE: Creating Basic Carpet Plot in Plotly
DESCRIPTION: Creates a basic carpet plot with custom axis settings using Plotly. Demonstrates setting up coordinates, axis labels and grid properties.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],
    b = [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],
    x = [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],
    y = [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],
    aaxis = dict(
        tickprefix = 'a = ',
        smoothing = 0,
        minorgridcount = 9,
        type = 'linear'
    ),
    baxis = dict(
        tickprefix = 'b = ',
        smoothing = 0,
        minorgridcount = 9,
        type = 'linear'
    )
)

data = [trace1]

layout = go.Layout(
    margin = dict(
    	t = 40,
        r = 30,
        b = 30,
        l = 30
    ),
    yaxis = dict(
        range = [0.388,4.361]
    ),
    xaxis = dict(
    	range = [0.667,5.932]	
    )
)

fig = go.Figure(data = data, layout = layout)
py.iplot(fig, filename = "contourcarpet/basic")

----------------------------------------

TITLE: Adding Scatter Trace to Carpet Plot
DESCRIPTION: Demonstrates how to add a scatter trace to an existing carpet plot using Scattercarpet trace type with spline smoothing.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
      tickprefix = 'a = ',
      ticksuffix = 'm',
      smoothing = 1,
      minorgridcount = 9
      ),
    baxis = dict(
      tickprefix = 'b = ',
      ticksuffix = 'Pa',
      smoothing = 1,
      minorgridcount = 9
      )
    )

trace2 = go.Scattercarpet(
    a = [4, 4.5, 5, 6],
    b = [2.5, 2.5, 2.5, 2.5],
    line = dict(
      shape = 'spline',
      smoothing = 1,
      color = 'blue'
    )
  )

data = [trace1,trace2]

fig = go.Figure(data = data)
py.iplot(fig, filename = "scattercarpet/add-scattercarpet")

----------------------------------------

TITLE: Generating Documentation for R Language Posts in Jekyll
DESCRIPTION: This snippet uses Liquid templating to generate a list of R language documentation posts, sorted by order. It then includes a template for displaying the main language documentation examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r"  | sort: "order"  %}

{% include posts/mainlang_documentation_eg.html %}

----------------------------------------

TITLE: Visualizing networkx Graph with Plotly
DESCRIPTION: Creates an interactive visualization of the networkx graph using Plotly. Implements similar scatter plot approach for edges and nodes but with Fruchterman-Reingold layout positions.

LANGUAGE: python
CODE:
Xv=[pos[k][0] for k in range(N)]
Yv=[pos[k][1] for k in range(N)]
Xed=[]
Yed=[]
for edge in E:
    Xed+=[pos[edge[0]][0],pos[edge[1]][0], None]
    Yed+=[pos[edge[0]][1],pos[edge[1]][1], None] 
    
trace3=Scatter(x=Xed,
               y=Yed,
               mode='lines',
               line=dict(color='rgb(210,210,210)', width=1),
               hoverinfo='none'
               )
trace4=Scatter(x=Xv,
               y=Yv,
               mode='markers',
               name='net',
               marker=dict(symbol='circle-dot',
                             size=5, 
                             color='#6959CD',
                             line=dict(color='rgb(50,50,50)', width=0.5)
                             ),
               text=labels,
               hoverinfo='text'
               )

annot="This networkx.Graph has the Fruchterman-Reingold layout<br>Code:"+\
"<a href='http://nbviewer.ipython.org/gist/empet/07ea33b2e4e0b84193bd'> [2]</a>"

data1=[trace3, trace4]
fig1=Figure(data=data1, layout=layout)
fig1['layout']['annotations'][0]['text']=annot
py.iplot(fig1, filename='Coautorship-network-nx')

----------------------------------------

TITLE: Opening Stream and Writing Data
DESCRIPTION: Opens a stream connection and writes time series data in real-time.

LANGUAGE: python
CODE:
import datetime
import time

s = py.Stream(stream_id)
s.open()

i = 0
k = 5
N = 200

time.sleep(5)

while i<N:
    i += 1
    x = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')
    y = (np.cos(k*i/50.)*np.cos(i/50.)+np.random.randn(1))[0]
    s.write(dict(x=x, y=y))
    time.sleep(0.08)

s.close()

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the installed version supports animations (required version 1.12.10+).

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Using Alternate Input Format for Carpet Plots in Plotly
DESCRIPTION: This example illustrates an alternate input format for carpet plots where x and y can be specified as arrays of arrays. The length of 'a' should match the inner dimension and the length of 'b' the outer dimension.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]]
)

data = [trace1]

fig = go.Figure(data = data)
py.iplot(fig, filename = "carpet/input-format")

----------------------------------------

TITLE: Importing Plotly and Data Science Libraries
DESCRIPTION: Sets up the required libraries including Plotly, NumPy, Pandas and SciPy for statistical analysis and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Creating Vertical Table and Chart Layout
DESCRIPTION: Creates a vertical layout arrangement with table and charts stacked on top of each other showing Bitcoin statistics

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

table_trace2 = go.Table(
    domain=dict(x=[0, 1],
                y=[0, 1.0]),  
    columnwidth = [30] + [33, 35, 33],
    columnorder=[0, 1, 2, 3, 4],
    header = dict(height = 50,
                  values = [['<b>Date</b>'],['<b>Hash Rate, TH/sec</b>'], 
                            ['<b>Mining revenue</b>'], ['<b>Transaction fees</b>']], 
                  line = dict(color='rgb(50, 50, 50)'),
                  align = ['left'] * 5,
                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),
                  fill = dict(color='#d562be'))

----------------------------------------

TITLE: Initializing Plotly for Online Plotting
DESCRIPTION: Sets up Plotly for creating online animations by importing the necessary modules and checking the installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling in Python
DESCRIPTION: This snippet sets up custom styling for the notebook, installs the Plotly publisher package, and publishes the notebook. It includes setting fonts, CSS, and various metadata for the publication.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'filter.ipynb', 'python/filter/', 'Filter',
    'How to use filters in Python with Plotly.',
    title = 'Filter | Plotly',
    has_thumbnail='true', thumbnail='thumbnail/filter.jpg', 
    language='python', uses_plotly_offline=True,
    page_type='example_index',
    display_as='transforms', order=1,
    ipynb= '~notebook_demo/195')

----------------------------------------

TITLE: Creating Stock Price Visualization
DESCRIPTION: Creates an interactive line plot of Apple stock prices using external CSV data

LANGUAGE: python
CODE:
trace = go.Scatter(x = df['AAPL_x'], y = df['AAPL_y'],
                  name='Share Prices (in USD)')
layout = go.Layout(title='Apple Share Prices over time (2014)',
                   plot_bgcolor='rgb(230, 230,230)', 
                   showlegend=True)
fig = go.Figure(data=[trace], layout=layout)

py.iplot(fig, filename='apple-stock-prices')

----------------------------------------

TITLE: Define Custom Colorscale for Plotly
DESCRIPTION: Creating a custom colorscale using cubehelix colors for the contour plots.

LANGUAGE: python
CODE:
cubehelix_cs=[[0.0, '#fcf9f7'],
 [0.16666666666666666, '#edcfc9'],
 [0.3333333333333333, '#daa2ac'],
 [0.5, '#bc7897'],
 [0.6666666666666666, '#925684'],
 [0.8333333333333333, '#5f3868'],
 [1.0, '#2d1e3e']]

----------------------------------------

TITLE: Basic Streamtube Plot Creation
DESCRIPTION: Creates a basic 3D streamtube visualization using Plotly. Demonstrates setting up coordinates, vector field components, and basic styling options like color scale and size reference.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv')

data = [go.Streamtube(
    x = df['x'],
    y = df['y'],
    z = df['z'],
    u = df['u'],
    v = df['v'],
    w = df['w'],
    sizeref = 0.5,
    colorscale = 'Blues', 
    cmin = 0,
    cmax = 3
    )]

layout = go.Layout(
    scene = dict(
      camera = dict(
        eye = dict(
          x = -0.7243612458865182,
          y = 1.9269804254717962,
          z = 0.6704828299861716
        )
      )
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='streamtube-basic')

----------------------------------------

TITLE: Creating Surface Plot with Hover Text
DESCRIPTION: Creates a Plotly Surface object with interactive hover text showing x, y, and z coordinates.

LANGUAGE: python
CODE:
textz = [['x: '+'{:0.5f}'.format(x[i][j])+'<br>y: '+'{:0.5f}'.format(y[i][j])+
        '<br>z: '+'{:0.5f}'.format(z[i][j]) for j in range(z.shape[1])] for i in range(z.shape[0])]

trace1= go.Surface(
    x=tuple(x),
    y=tuple(y),
    z=tuple(z),
    colorscale=colorscale,
    text=textz,
    hoverinfo='text'
)

----------------------------------------

TITLE: Creating a Simple Slider Control with Plotly in Python
DESCRIPTION: This code creates a basic slider control for a sine wave plot using Plotly. It generates multiple sine waves with different frequencies and sets up the initial plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import numpy as np

data = [dict(
        visible = False,
        line=dict(color='#00CED1', width=6),
        name = '𝜈 = '+str(step),
        x = np.arange(0,10,0.01),
        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]
data[10]['visible'] = True

py.iplot(data, filename='Single Sine Wave')

----------------------------------------

TITLE: Converting HTML Report to PDF
DESCRIPTION: Defines a utility function to convert the HTML report to a PDF file using xhtml2pdf.

LANGUAGE: Python
CODE:
from xhtml2pdf import pisa             

def convert_html_to_pdf(source_html, output_filename):
    # open output file for writing (truncated binary)
    result_file = open(output_filename, "w+b")

    # convert HTML to PDF
    pisa_status = pisa.CreatePDF(
            source_html,                # the HTML to convert
            dest=result_file)           # file handle to recieve result

    # close output file
    result_file.close()                 # close output file

    # return True on success and False on errors
    return pisa_status.err

convert_html_to_pdf(static_report, 'report.pdf')

! open report.pdf

----------------------------------------

TITLE: Initializing Moebius Band Data in Python
DESCRIPTION: Sets up the data points and triangulation for a Moebius band surface using NumPy and SciPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
import matplotlib.cm as cm
from scipy.spatial import Delaunay

u=np.linspace(0,2*np.pi, 24)
v=np.linspace(-1,1, 8)
u,v=np.meshgrid(u,v)
u=u.flatten()
v=v.flatten()

#evaluate the parameterization at the flattened u and v
tp=1+0.5*v*np.cos(u/2.)
x=tp*np.cos(u)
y=tp*np.sin(u)
z=0.5*v*np.sin(u/2.)

#define 2D points, as input data for the Delaunay triangulation of U
points2D=np.vstack([u,v]).T
tri = Delaunay(points2D)#triangulate the rectangle U

----------------------------------------

TITLE: Loading and Displaying Milk Production Data
DESCRIPTION: Loads monthly milk production data from a CSV file, converts it to a numpy array and creates a table visualization using Plotly.

LANGUAGE: python
CODE:
milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
time_series = milk_data['Monthly milk production (pounds per cow)']
time_series = np.asarray(time_series)

df = milk_data[0:15]

table = ff.create_table(df)
py.iplot(table, filename='milk-production-dataframe')

----------------------------------------

TITLE: Creating Basic Line Plot with Text Labels
DESCRIPTION: Demonstrates adding text labels to data points in a line plot with different text positioning options.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[0, 1, 2],
    y=[1, 1, 1],
    mode='lines+markers+text',
    name='Lines, Markers and Text',
    text=['Text A', 'Text B', 'Text C'],
    textposition='top center'
)

trace2 = go.Scatter(
    x=[0, 1, 2],
    y=[2, 2, 2],
    mode='markers+text',
    name='Markers and Text',
    text=['Text D', 'Text E', 'Text F'],
    textposition='bottom center'
)

trace3 = go.Scatter(
    x=[0, 1, 2],
    y=[3, 3, 3],
    mode='lines+text',
    name='Lines and Text',
    text=['Text G', 'Text H', 'Text I'],
    textposition='bottom center'
)

data = [trace1, trace2, trace3]

layout = go.Layout(
    showlegend=False
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='text-chart-basic')

----------------------------------------

TITLE: Creating Violin Plots with Colorscale in Plotly Python
DESCRIPTION: Demonstrates how to create violin plots with a colorscale applied based on group statistics. Uses a custom colorscale and group statistics for coloring.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import numpy as np
import pandas as pd
from scipy import stats

np.random.seed(619517)
Nr = 250
y = np.random.randn(Nr)
gr = np.random.choice(list("ABCDE"), Nr)
norm_params = [(0, 1.2), (0.7, 1), (-0.5, 1.4), (0.3, 1), (0.8, 0.9)]

for i, letter in enumerate("ABCDE"):
    y[gr == letter] *= norm_params[i][1] + norm_params[i][0]
df = pd.DataFrame(dict(Score = y, Group = gr))

data_header = 'Score'
group_header = 'Group'

group_stats = {}
groupby_data = df.groupby([group_header])

for group in "ABCDE":
    data_from_group = groupby_data.get_group(group)[data_header]
    stat = np.median(data_from_group)
    group_stats[group] = stat

fig = ff.create_violin(df, data_header='Score', group_header='Group',
                       colors='YlOrRd', height=500, width=800,
                       use_colorscale=True, group_stats=group_stats)
py.iplot(fig, filename='Violin Plots with Colorscale')

----------------------------------------

TITLE: Creating Multiple 3D Cones with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create multiple 3D cones in a single plot using Plotly. It defines three cones with different positions and directions, and customizes the plot appearance.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [{
    "type": "cone",
    "x": [1, 2, 3],
    "y": [1, 2, 3],
    "z": [1, 2, 3],
    "u": [1, 0, 0],
    "v": [0, 3, 0],
    "w": [0, 0, 2],
    "sizemode": "absolute",
    "sizeref": 2,
    "anchor": "tip",
    "colorbar": {
    "x": 0,
    "xanchor": "right",
    "side": "left"
    }
}]

layout = {
    "scene": {
      "domain": {"x": [0, 1]},
      "camera": {
        "eye": {"x": -1.57, "y": 1.36, "z": 0.58}
      }
    }
}

fig = {"data": data, "layout": layout}
py.iplot(fig, filename="cone-mulitple", validate=False)

----------------------------------------

TITLE: Creating Vertical Subplots with Quiver and Streamline Plots
DESCRIPTION: This code creates two separate plots (a quiver plot and a streamline plot) using Plotly's Figure Factory, then combines them into vertical subplots.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import numpy as np

## Create first plot
x1,y1 = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))
u1 = np.cos(x1)*y1
v1 = np.sin(x1)*y1

fig1 = ff.create_quiver(x1, y1, u1, v1, name='Quiver')


## Create second plot
x = np.linspace(-3, 3, 100)
y = np.linspace(-3, 3, 100)
Y, X = np.meshgrid(x, y)
u = -1 - X**2 + Y
v = 1 + X - Y**2

fig2 = ff.create_streamline(x, y, u, v, arrow_scale=.1, name='Steamline')

# Edit the figures' x and y axes attributes to create subplots
for i in range(len(fig1.data)):
    fig1.data[i].xaxis='x1'
    fig1.data[i].yaxis='y1'

fig1.layout.xaxis1.update({'anchor': 'y1'})
fig1.layout.yaxis1.update({'anchor': 'x1', 'domain': [.55, 1]})

for i in range(len(fig2.data)):
    fig2.data[i].xaxis='x2'
    fig2.data[i].yaxis='y2'

# initialize xaxis2 and yaxis2
fig2['layout']['xaxis2'] = {}
fig2['layout']['yaxis2'] = {}

fig2.layout.xaxis2.update({'anchor': 'y2'})
fig2.layout.yaxis2.update({'anchor': 'x2', 'domain': [0, .45]})

# Combine the data and layout objects to create a figure
fig = go.Figure()
fig.add_traces([fig1.data[0], fig2.data[0]])

fig.layout.update(fig1.layout)
fig.layout.update(fig2.layout)

py.iplot(fig, filename='figure_factory_subplot')

----------------------------------------

TITLE: Adding Politico Logo to Existing Plotly Chart in Python
DESCRIPTION: This code retrieves an existing Plotly chart, adds a Politico logo to the bottom left corner, and then re-uploads the modified chart.

LANGUAGE: python
CODE:
import plotly.plotly as py

fig = py.get_figure('https://plotly.com/~Dreamshot/8155/')

fig.layout.images = [dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/politico.png",
        xref="paper", yref="paper",
        x=0.1, y=-0.2,
        sizex=0.4, sizey=0.4,
        xanchor="center", yanchor="bottom"
      )]

py.iplot(fig, fileopt='overwrite', filename='Logos/Foreign_Policy_Politico')

----------------------------------------

TITLE: Restyle Dropdown with Surface Plot
DESCRIPTION: Creates a 3D surface plot with a dropdown menu to switch between surface and heatmap views using the restyle method

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF
import json
import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')

data = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]

layout = go.Layout(
    width=800,
    height=900,
    autosize=False,
    margin=dict(t=0, b=0, l=0, r=0),
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230, 230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        aspectratio = dict(x=1, y=1, z=0.7),
        aspectmode = 'manual'
    )
)

updatemenus=list([
    dict(
        buttons=list([   
            dict(
                args=['type', 'surface'],
                label='3D Surface',
                method='restyle'
            ),
            dict(
                args=['type', 'heatmap'],
                label='Heatmap',
                method='restyle'
            )             
        ]),
        direction = 'down',
        pad = {'r': 10, 't': 10},
        showactive = True,
        x = 0.1,
        xanchor = 'left',
        y = 1.1,
        yanchor = 'top' 
    ),
])

fig = dict(data=data, layout=layout)
py.iplot(fig, filename='dropdown-example')

----------------------------------------

TITLE: Importing Plotly Dependencies in Python
DESCRIPTION: This code imports the necessary Plotly modules and NumPy for data manipulation and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py  
import plotly.tools as tls   
import plotly.graph_objs as go
import numpy as np  

----------------------------------------

TITLE: Generating Random Data from Normal Distributions in Python
DESCRIPTION: This code generates two sets of random data from normal distributions with different means using NumPy's random.normal function.

LANGUAGE: python
CODE:
data1 = np.random.normal(0, 1, size=50)
data2 = np.random.normal(2, 1, size=50)

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Code to check the installed version of Plotly package.

LANGUAGE: python
CODE:
# (*) Import plotly package
import plotly

# Check plolty version (if not latest, please upgrade)
plotly.__version__

----------------------------------------

TITLE: Plotting Bar Chart with Plotly in Python
DESCRIPTION: This snippet posts the created bar chart to the Plotly servers, making it available online.

LANGUAGE: python
CODE:
py.plot(fig, filename='bar-chart')      #post this plot up onto the plotly servers

----------------------------------------

TITLE: Loading and Displaying Wind Speed Data
DESCRIPTION: Loads wind speed data from a CSV file and creates a table visualization using Plotly's Figure Factory.

LANGUAGE: python
CODE:
wind_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')
df = wind_data[0:10]

table = FF.create_table(df)
py.iplot(table, filename='wind-data-sample')

----------------------------------------

TITLE: Cloning the Plotly Documentation Repository
DESCRIPTION: Commands to clone the graphing-library-docs repository and navigate to the project directory.

LANGUAGE: bash
CODE:
$ git clone git@github.com:plotly/graphing-library-docs.git
$ cd graphing-library-docs

----------------------------------------

TITLE: Adding Hover Text to Scatter Plot
DESCRIPTION: Shows how to add hover text functionality to data points in a scatter plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[0, 1, 2],
        y=[1, 3, 2],
        mode='markers',
        text=['Text A', 'Text B', 'Text C']
    )
]

layout = go.Layout(
    title='Hover over the points to see the text'
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='hover-chart-basic')

----------------------------------------

TITLE: Importing Required Libraries for Plotly Streaming
DESCRIPTION: Imports necessary Plotly modules and NumPy for data manipulation and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py  
import plotly.tools as tls   
import plotly.graph_objs as go
import numpy as np 

----------------------------------------

TITLE: Creating Simple 3D Mesh
DESCRIPTION: Creates a basic 3D mesh visualization using data loaded from an external file. The mesh is rendered with a light pink color and 50% opacity.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

pts=np.loadtxt('mesh_dataset.txt')
x,y,z=zip(*pts)

trace = go.Mesh3d(x=x,y=y,z=z,color='#FFB6C1',opacity=0.50)
py.iplot([trace])

----------------------------------------

TITLE: Creating Violin Plots with Custom Colors in Plotly Python
DESCRIPTION: Shows how to create violin plots with custom colors assigned to each group. Uses a dictionary to map groups to specific colors.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import numpy as np
import pandas as pd
from scipy import stats

np.random.seed(619517)
Nr = 250
y = np.random.randn(Nr)
gr = np.random.choice(list("ABCDE"), Nr)
norm_params = [(0, 1.2), (0.7, 1), (-0.5, 1.4), (0.3, 1), (0.8, 0.9)]

for i, letter in enumerate("ABCDE"):
    y[gr == letter] *= norm_params[i][1] + norm_params[i][0]
df = pd.DataFrame(dict(Score = y, Group = gr))

data_header = 'Score'
group_header = 'Group'

colors_dict = dict(A = 'rgb(25, 200, 120)',
                   B = '#aa6ff60',
                   C = (0.3, 0.7, 0.3),
                   D = 'rgb(175, 25, 122)',
                   E = 'rgb(255, 150, 226)')

fig = ff.create_violin(df, data_header='Score', group_header='Group',
                       colors=colors_dict, height=500, width=800,
                       use_colorscale=False)
py.iplot(fig, filename='Violin Plots with Dictionary Colors')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This code snippet imports the Plotly library and prints its version number to ensure compatibility with pie chart functionality.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Updating Streaming Bar Chart with Random Data in Python
DESCRIPTION: This snippet continuously updates the streaming bar chart with random data. It writes new data to the stream every 0.2 seconds and runs indefinitely until interrupted.

LANGUAGE: python
CODE:
while True:               
    
    s.write(dict(x=['one','two','three','four','five'], y=np.random.random_integers(0,100,5)))  

    time.sleep(0.2)        #wait one second before plotting again
    
s.close()                  #close the stream

----------------------------------------

TITLE: Updating Error Bar Opacity in Plotly.js
DESCRIPTION: This snippet demonstrates how to update the deprecated 'opacity' attribute for error bars to use the alpha channel of the 'color' attribute instead in Plotly.js.

LANGUAGE: javascript
CODE:
  error_y: {
    type: 'constant',
    value: 0.1,
    color: '#85144B',
    thickness: 1.5,
    width: 3,
    opacity: 0.5
  }

LANGUAGE: javascript
CODE:
  error_y: {
    type: 'constant',
    value: 0.1,
    color: 'rgba(133, 20, 75, 0.5)',
    thickness: 1.5,
    width: 3,
  }

----------------------------------------

TITLE: Opening Plotly Stream for Bar Chart in Python
DESCRIPTION: This code creates a Stream object with the same stream ID as before and opens the stream for data transmission.

LANGUAGE: python
CODE:
#Now a Stream object is created w/ the same stream_id as the stream id object

s = py.Stream(stream_id)
s.open()                  

----------------------------------------

TITLE: Importing Libraries and Loading Data for Plotly Selection Event Example
DESCRIPTION: Imports required libraries and loads car data from a CSV file to create an interactive scatter plot and table.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.offline as py

import pandas as pd
import numpy as np
from ipywidgets import interactive, HBox, VBox

py.init_notebook_mode()

df = pd.read_csv('https://raw.githubusercontent.com/jonmmease/plotly_ipywidget_notebooks/master/notebooks/data/cars/cars.csv')

----------------------------------------

TITLE: Displaying LaTeX Equations in Jupyter Notebook
DESCRIPTION: Demonstrates how to display LaTeX equations in a Jupyter notebook using IPython's Math display function.

LANGUAGE: python
CODE:
from IPython.display import display, Math, Latex

display(Math(r'F(k) = \int_{-\infty}^{\infty} f(x) e^{2\pi i k} dx'))

----------------------------------------

TITLE: Creating Surface Plot with Combined Lighting Effects
DESCRIPTION: Create a surface plot with multiple lighting effects applied simultaneously including ambient, diffuse, roughness, specular and fresnel

LANGUAGE: python
CODE:
lighting_effects = dict(ambient=0.4, diffuse=0.5, roughness = 0.9, specular=0.6, fresnel=0.2)
trace = go.Surface(z=Z1, colorscale='Viridis', lighting=lighting_effects)

py.iplot([trace])

----------------------------------------

TITLE: Importing Required Libraries for ANOVA Analysis
DESCRIPTION: Sets up the required Python libraries including Plotly for visualization, NumPy and Pandas for data manipulation, and Statsmodels for statistical analysis.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

import statsmodels
import statsmodels.api as sm
from statsmodels.formula.api import ols

----------------------------------------

TITLE: Initializing Plotly and Checking Version
DESCRIPTION: Imports the Plotly library and checks the installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Overlaid Histograms with Plotly in Python
DESCRIPTION: This code demonstrates how to create overlaid histograms using Plotly. It generates two sets of random data and plots them as separate histograms with different opacities.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x0 = np.random.randn(500)
x1 = np.random.randn(500)+1

trace1 = go.Histogram(
    x=x0,
    opacity=0.75
)
trace2 = go.Histogram(
    x=x1,
    opacity=0.75
)

data = [trace1, trace2]
layout = go.Layout(barmode='overlay')
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='overlaid histogram')

----------------------------------------

TITLE: Scatterplot Matrix with Indexed Column
DESCRIPTION: Creates a scatterplot matrix with a categorical index column based on fruit types.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import numpy as np
import pandas as pd

dataframe = pd.DataFrame(np.random.randn(10, 2),
                         columns=['Column A', 'Column B'])

dataframe['Fruit'] = pd.Series(['apple', 'apple', 'grape', 'apple', 'apple',
                                'grape', 'pear', 'pear', 'apple', 'pear'])

fig = ff.create_scatterplotmatrix(dataframe, index='Fruit', size=10, height=800, width=800)
py.iplot(fig, filename = 'Index a Column')

----------------------------------------

TITLE: Adding Bleacher Report Logo to Existing Plotly Chart in Python
DESCRIPTION: This code retrieves an existing Plotly chart, modifies its data and layout to add a Bleacher Report logo to the bottom center, and then re-uploads the modified chart.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

fig = py.get_figure('https://plotly.com/~Dreamshot/8160/', raw=True)
for j in range(len(fig['data'])):
    del fig['data'][j]['autobinx']
    del fig['data'][j]['autobiny']
fig = go.Figure(fig)

fig.layout.images = [dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/bleacherreport.png",
        xref="paper", yref="paper",
        x=0.5, y=-0.35,
        sizex=0.3, sizey=0.3,
        xanchor="center", yanchor="top"
      )]

py.iplot(fig, fileopt='overwrite', filename='Logos/Top_Earners_BleacherReport')

----------------------------------------

TITLE: Setting Up Display and Publishing Configuration
DESCRIPTION: Configures HTML display settings and publishes the notebook using Plotly's publisher tool. Includes font loading and stylesheet configuration.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/csshref="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade

import publisher
publisher.publish(
    'horizontal-legends.ipynb', 'python/horizontal-legend/', 'Horizontal legend | plotly',
    'How to add images to charts as background images or logos.',
    title = 'Horizontal legend | plotly',
    name = 'Horizontal Legends',
    has_thumbnail='false', thumbnail='thumbnail/your-tutorial-chart.jpg', 
    language='python', page_type='example_index',
    display_as='style_opt', order=12,
    ipynb= '~notebook_demo/94')

----------------------------------------

TITLE: Updating Plot Properties in Plotly Python
DESCRIPTION: Shows how to update properties of an existing plot, such as changing the title and marker color.

LANGUAGE: python
CODE:
figure.update(dict(layout=dict(title='Plot update'), data=dict(marker=dict(color='blue'))))
py.iplot(figure, filename='pyguide_2')

----------------------------------------

TITLE: Performing Signal Convolution and Visualization
DESCRIPTION: Demonstrates signal convolution between a sawtooth wave and stock price data, with visualization of both input signals and the resulting convolution.

LANGUAGE: python
CODE:
sample = range(15)
saw = signal.sawtooth(t=sample)

data_sample = list(stock_data['SBUX'][0:100])
data_sample2 = list(stock_data['AAPL'][0:100])
x = list(range(len(data_sample)))
y_convolve = signal.convolve(saw, data_sample2)
x_convolve = list(range(len(y_convolve)))

trace1 = go.Scatter(
    x = x,
    y = data_sample,
    mode = 'lines',
    name = 'SBUX'
)

trace2 = go.Scatter(
    x = x,
    y = data_sample2,
    mode = 'lines',
    name = 'AAPL'
)

trace3 = go.Scatter(
    x = x_convolve,
    y = y_convolve,
    mode = 'lines',
    name = 'Convolution'
)

data = [trace1, trace2, trace3]
py.iplot(data, filename='convolution-of-two-signals')

----------------------------------------

TITLE: Plotting Triangulated Surface with Plotly Mesh3d
DESCRIPTION: Defines functions to map z-values to colors and create a triangulated surface plot using Plotly's Mesh3d.

LANGUAGE: python
CODE:
def map_z2color(zval, colormap, vmin, vmax):
    #map the normalized value zval to a corresponding color in the colormap
    
    if vmin>vmax:
        raise ValueError('incorrect relation between vmin and vmax')
    t=(zval-vmin)/float((vmax-vmin))#normalize val
    R, G, B, alpha=colormap(t)
    return 'rgb('+'{:d}'.format(int(R*255+0.5))+','+'{:d}'.format(int(G*255+0.5))+\
           ','+'{:d}'.format(int(B*255+0.5))+')'

def tri_indices(simplices):
    #simplices is a numpy array defining the simplices of the triangularization
    #returns the lists of indices i, j, k
    
    return ([triplet[c] for triplet in simplices] for c in range(3))

def plotly_trisurf(x, y, z, simplices, colormap=cm.RdBu, plot_edges=None):
    #x, y, z are lists of coordinates of the triangle vertices 
    #simplices are the simplices that define the triangularization;
    #simplices  is a numpy array of shape (no_triangles, 3)
    #insert here the  type check for input data
    
    points3D=np.vstack((x,y,z)).T
    tri_vertices=map(lambda index: points3D[index], simplices)# vertices of the surface triangles     
    zmean=[np.mean(tri[:,2]) for tri in tri_vertices ]# mean values of z-coordinates of 
                                                      #triangle vertices
    min_zmean=np.min(zmean)
    max_zmean=np.max(zmean)  
    facecolor=[map_z2color(zz,  colormap, min_zmean, max_zmean) for zz in zmean] 
    I,J,K=tri_indices(simplices)
    
    triangles=go.Mesh3d(x=x,
                     y=y,
                     z=z,
                     facecolor=facecolor, 
                     i=I,
                     j=J,
                     k=K,
                     name=''
                    )
    
    if plot_edges is None:# the triangle sides are not plotted 
        return [triangles]
    else:
        #define the lists Xe, Ye, Ze, of x, y, resp z coordinates of edge end points for each triangle
        #None separates data corresponding to two consecutive triangles
        lists_coord=[[[T[k%3][c] for k in range(4)]+[ None]   for T in tri_vertices]  for c in range(3)]
        Xe, Ye, Ze=[reduce(lambda x,y: x+y, lists_coord[k]) for k in range(3)]
        
        #define the lines to be plotted
        lines=go.Scatter3d(x=Xe,
                        y=Ye,
                        z=Ze,
                        mode='lines',
                        line=dict(color= 'rgb(50,50,50)', width=1.5)
               )
        return [triangles, lines]

----------------------------------------

TITLE: Creating Area Chart with Interior Filling in Plotly
DESCRIPTION: This code demonstrates how to create an area chart with interior filling using Plotly. It uses two scatter plots with different fill settings to achieve the interior fill effect.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[3, 4, 8, 3],
    fill= None,
    mode='lines',
    line=dict(
        color='rgb(143, 19, 131)',
    )
)
trace1 = go.Scatter(
    x=[1, 2, 3, 4],
    y=[1, 6, 2, 6],
    fill='tonexty',
    mode='lines',
    line=dict(
        color='rgb(143, 19, 131)',
    )
)

data = [trace0, trace1]
py.iplot(data, filename='filling-interior-area')

----------------------------------------

TITLE: Deleting All Plots and Grids Permanently
DESCRIPTION: Defines functions to retrieve all pages of plots/grids and permanently delete them. This process deletes all plots first, then all associated grids.

LANGUAGE: python
CODE:
def get_pages(username, page_size):
    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&page_size='+str(page_size)
    response = requests.get(url, auth=auth, headers=headers)
    if response.status_code != 200:
        return
    page = json.loads(response.content)
    yield page
    while True:
        resource = page['children']['next'] 
        if not resource:
            break
        response = requests.get(resource, auth=auth, headers=headers)
        if response.status_code != 200:
            break
        page = json.loads(response.content)
        yield page
        
def permanently_delete_files(username, page_size=500, filetype_to_delete='plot'):
    for page in get_pages(username, page_size):
        for x in range(0, len(page['children']['results'])):
            fid = page['children']['results'][x]['fid']
            res = requests.get('https://api.plot.ly/v2/files/' + fid, auth=auth, headers=headers)
            res.raise_for_status()
            if res.status_code == 200:
                json_res = json.loads(res.content)
                if json_res['filetype'] == filetype_to_delete:
                    # move to trash
                    requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)
                    # permanently delete
                    requests.delete('https://api.plot.ly/v2/files/'+fid+'/permanent_delete', auth=auth, headers=headers)

permanently_delete_files(username, filetype_to_delete='plot')
permanently_delete_files(username, filetype_to_delete='grid')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for ensuring you're using the latest version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Bar Chart Object with Plotly in Python
DESCRIPTION: This code creates a simple bar chart object using Plotly. It sets up the initial data for the chart and associates it with the previously created stream object.

LANGUAGE: python
CODE:
#A simple bar chart object is generated

trace1 = Bar(
    x=['one','two','three','four','five'],
    y=np.array([20,20,20,20,20]),    
    stream=stream              #we set the stream parameter to the stream id object created earlier     
)

data = Data([trace1])
layout = Layout(title='Bar Chart Streaming')
fig = Figure(data=data, layout=layout)

----------------------------------------

TITLE: Updating Privacy Settings for All Existing Plotly Graphs using REST API
DESCRIPTION: This code demonstrates how to use Plotly's REST API to update the privacy settings of all existing plots to private. It requires the user's Plotly username and API key.

LANGUAGE: python
CODE:
import json
import requests
from requests.auth import HTTPBasicAuth

username = 'private_plotly' # Replace with YOUR USERNAME
api_key = 'k0yy0ztssk' # Replace with YOUR API KEY

auth = HTTPBasicAuth(username, api_key)
headers = {'Plotly-Client-Platform': 'python'}

page_size = 500

def get_pages(username, page_size):
    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&filetype=plot&page_size='+str(page_size)
    response = requests.get(url, auth=auth, headers=headers)
    if response.status_code != 200:
        return
    page = json.loads(response.content.decode('utf-8'))
    yield page
    while True:
        resource = page['children']['next']
        if not resource:
            break
        response = requests.get(resource, auth=auth, headers=headers)
        if response.status_code != 200:
            break
        page = json.loads(response.content.decode('utf-8'))
        yield page

def make_all_plots_private(username, page_size=500):
    for page in get_pages(username, page_size):
        for x in range(0, len(page['children']['results'])):
            fid = page['children']['results'][x]['fid']
            requests.patch('https://api.plot.ly/v2/files/'+fid, {"world_readable": False}, auth=auth, headers=headers)
    print('ALL of your plots are now private - visit: https://plotly.com/organize/home to view your private plots!')

make_all_plots_private(username)

----------------------------------------

TITLE: Importing Plotly Modules and Signing In
DESCRIPTION: Imports necessary Plotly modules and signs in using credentials file.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.tools as tls
from plotly.graph_objs import *
import numpy as np

----------------------------------------

TITLE: Creating a Polar Scatter Chart with Plotly in Python
DESCRIPTION: This code creates a polar scatter chart with six traces using random data. Each trace represents a trial with different colors and positions on the polar grid.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

trace1 = go.Scatter(
    r = np.random.uniform(1,6,size=62),
    t = np.random.uniform(30,5,size=62),
    mode='markers',
    name='Trial 1',
    marker=dict(
        color='rgb(27,158,119)',
        size=110,
        line=dict(
            color='white'
        ),
        opacity=0.7
    )
)
# ... [additional traces omitted for brevity]

data = [trace1, trace2, trace3, trace4, trace5, trace6]
layout = go.Layout(
    title='Hobbs-Pearson Trials',
    font=dict(
        size=15
    ),
    plot_bgcolor='rgb(223, 223, 223)',
    angularaxis=dict(
        tickcolor='rgb(253,253,253)'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling in Python
DESCRIPTION: This code snippet sets up custom styling for the Jupyter notebook and uses the Plotly publisher to publish the notebook. It includes font imports, CSS styling, and publisher configuration.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

!pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'filled-area-animation.ipynb', 'python/filled-area-animation/', 'Filled-Area Animation | plotly',
    'How to make an animated filled-area plot with apple stock data in Python.',
    title='Filled-Area Animation | plotly',
    name='Filled-Area Animation',
    language='python',
    page_type='example_index', has_thumbnail='true', thumbnail='thumbnail/apple_stock_animation.gif',
    display_as='animations', ipynb= '~notebook_demo/128', order=3)

----------------------------------------

TITLE: Creating Subplots with Box Plots and Heatmap in Plotly Python
DESCRIPTION: Shows how to create a complex figure with multiple subplots, including box plots and a heatmap.

LANGUAGE: python
CODE:
from plotly import tools
import numpy as np
import plotly.plotly as py
import plotly.graph_objs as go

heatmap = go.Heatmap(
        z=[[1, 20, 30],
           [20, 1, 60],
           [30, 60, 1]],
        showscale=False
        )

y0 = np.random.randn(50)
y1 = np.random.randn(50)+1

box_1 = go.Box(
    y=y0
)
box_2 = go.Box(
    y=y1
)
data = [heatmap, box_1, box_2]

fig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],
                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))

fig.append_trace(box_1, 1, 1)
fig.append_trace(box_2, 1, 2)
fig.append_trace(heatmap, 2, 1)

fig['layout'].update(height=600, width=600, title='i <3 subplots')

py.iplot(fig, filename='box_heatmap1')

----------------------------------------

TITLE: Modifying Camera View Points
DESCRIPTION: Shows how to adjust camera positions to view the plot from different angles and distances.

LANGUAGE: python
CODE:
name = 'eye = (x:0.1, y:0.1, z:2.5)'
camera = dict(
    up=dict(x=0, y=0, z=1),
    center=dict(x=0, y=0, z=0),
    eye=dict(x=0.1, y=0.1, z=2.5)
)

fig['layout'].update(
    scene=dict(camera=camera),
    title=name
)
py.iplot(fig, validate=False, filename=name)

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling
DESCRIPTION: This code snippet sets up custom styling for the Jupyter notebook and publishes the notebook using the Plotly publisher tool. It includes custom font loading, CSS styling, and configuration for publishing the notebook to the Plotly documentation.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
    
import publisher
publisher.publish(
    '3d-line.ipynb', 'python/3d-line-plots/', 'Python 3D Line Plots | plotly',
    'How to make 3D Line Plots',
    title= '3D Line Plots in Python | plotly',
    name = '3D Line Plots',
    has_thumbnail='true', thumbnail='thumbnail/3d-line.jpg', 
    language='python',
    display_as='3d_charts', order=3,
    ipynb= '~notebook_demo/63')

----------------------------------------

TITLE: Displaying the Interactive Application
DESCRIPTION: Displays the ipywidgets and Plotly graph to create the final interactive application for analyzing flight delays.

LANGUAGE: python
CODE:
display(container)
container2 = widgets.HBox([origin, textbox])
display(container2)
display(g)

----------------------------------------

TITLE: Creating and Displaying a Plotly Table
DESCRIPTION: Loads data from a CSV file, creates a table using Plotly's FigureFactory, and displays it using iplot.

LANGUAGE: python
CODE:
df = pd.read_csv('https://raw.githubusercontent.com/yankev/testing/master/datasets/mtcars.csv')
df.rename(columns={'Unnamed: 0':'model'}, inplace=True)
cols = df.columns.tolist()
cols = cols[1:] + [cols[0]]
table = FF.create_table(df[cols].head())
py.iplot(table, filename='df_table_mouseevents', show_link=False)

----------------------------------------

TITLE: Trashing a Plotly Plot
DESCRIPTION: Demonstrates how to move a plot to the trash using the Plotly API. Requires the file ID, which is a combination of username and plot number.

LANGUAGE: python
CODE:
fid = username+':18'
requests.post('https://api.plot.ly/v2/files/'+fid+'/trash', auth=auth, headers=headers)

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling
DESCRIPTION: This code snippet sets up custom styling for the notebook and uses the publisher module to publish the notebook. It includes custom font loading and CSS styling.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

#!pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'mixed-subplots.ipynb', 'python/mixed-subplots/', 'Mixed Subplots',
    'How to make mixed subplots in Python with Plotly.',
    title = 'Mixed Subplots | plotly',
    name = 'Mixed Subplots',
    has_thumbnail='true', thumbnail='thumbnail/mixed_subplot.JPG', 
    language='python', page_type='example_index',
    display_as='multiple_axes', order=5,
    ipynb= '~notebook_demo/132')

----------------------------------------

TITLE: Initializing Basic Stream Plot in Python
DESCRIPTION: Quickstart example showing how to initialize a Plotly figure object and send a single data point through a stream. Uses the Scatter plot type with empty initial arrays and a stream token configuration.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *
# auto sign-in with credentials or use py.sign_in()
trace1 = Scatter(
    x=[],
    y=[], 
    stream=dict(token='my_stream_id')
)
data = Data([trace1])
py.plot(data)
s = py.Stream('my_stream_id')
s.open()
s.write(dict(x=1, y=2))
s.close()

----------------------------------------

TITLE: Loading and Displaying Milk Production Data
DESCRIPTION: Loads milk production data from CSV, converts it to a numpy array, and creates a table visualization using Plotly's figure factory.

LANGUAGE: python
CODE:
milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
time_series = milk_data['Monthly milk production (pounds per cow)']
time_series = np.asarray(time_series)

df = milk_data[0:15]

table = ff.create_table(df)
py.iplot(table, filename='milk-production-dataframe')

----------------------------------------

TITLE: Version Check with Plotly
DESCRIPTION: Imports Plotly and checks installed version number

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Heatmap Plotting Function in Python
DESCRIPTION: Defines a function to create heatmap plots using Plotly. The function takes a colorscale and title as input and generates three different heatmap visualizations in a single figure.

LANGUAGE: python
CODE:
import plotly.plotly as py
import numpy as np
import os
import plotly.graph_objs as go
from plotly import tools

def heatmap_plot(colorscale, title):
    example_dir = os.path.join(os.path.dirname('__file__'), "examples")
    
    hist2d = np.loadtxt(os.path.join(example_dir, "hist2d.txt"))
    trace1 = go.Heatmap(z=hist2d, colorscale=colorscale, showscale=False)

    st_helens = np.loadtxt(os.path.join(example_dir,
                                        "st-helens_before-modified.txt.gz")).T
    trace2 = go.Heatmap(z=st_helens, colorscale=colorscale, y0=-5, x0=-5)

    dx = dy = 0.05  
    y, x = np.mgrid[-5 : 5 + dy : dy, -5 : 10 + dx : dx]
    z = np.sin(x)**10 + np.cos(10 + y*x) + np.cos(x) + 0.2*y + 0.1*x
    trace3 = go.Heatmap(z=z, colorscale=colorscale, showscale=False)
    
    fig = tools.make_subplots(rows=1, cols=3, print_grid=False)
    fig.append_trace(trace1, 1, 1)
    fig.append_trace(trace2, 1, 2)
    fig.append_trace(trace3, 1, 3)
    fig['layout'].update(title=title)
    fig['layout']['xaxis2'].update(range=[0, 450])
    fig['layout']['yaxis2'].update(range=[0, 270])
    
    return fig

----------------------------------------

TITLE: Plotting Multiple Sampled Histograms with Plotly
DESCRIPTION: Samples data from two Spark DataFrames and creates overlaid histograms using Plotly.

LANGUAGE: python
CODE:
s1 = df2.sample(False, 0.05, 20)
s2 = df3.sample(False, 0.05, 2500)

data = [
        go.Histogram(x=s1.toPandas()['d1'], name="Large Sample"),
        go.Histogram(x=s2.toPandas()['d1'], name="Small Sample")
    ]

py.iplot(data, filename="spark/sample_rides")

----------------------------------------

TITLE: Creating and Plotting Figure
DESCRIPTION: Creates a Figure object with data and layout, then plots it using py.plot().

LANGUAGE: python
CODE:
layout = Layout(title='Time Series')
fig = Figure(data=data, layout=layout)
unique_url = py.plot(fig, filename='s7_first-stream')

----------------------------------------

TITLE: Computing Covariance Matrix and Eigendecomposition
DESCRIPTION: Calculates the covariance matrix from standardized data and performs eigendecomposition to find principal components.

LANGUAGE: python
CODE:
from sklearn.preprocessing import StandardScaler
X_std = StandardScaler().fit_transform(X)

cov_mat = np.cov(X_std.T)
eig_vals, eig_vecs = np.linalg.eig(cov_mat)

print('Eigenvectors \n%s' %eig_vecs)
print('\nEigenvalues \n%s' %eig_vals)

----------------------------------------

TITLE: Defining Callback Function for Widget Interactions
DESCRIPTION: Implements a callback function that updates the Plotly graph based on user interactions with the ipywidgets.

LANGUAGE: python
CODE:
def validate():
    if origin.value in df['origin'].unique() and textbox.value in df['carrier'].unique():
        return True
    else:
        return False

def response(change):
    if validate():
        if use_date.value:
            filter_list = [i and j and k for i,j,k in 
                           zip(df['month'] == month.value, df['carrier'] == textbox.value, 
                               df['origin'] == origin.value)]
            temp_df = df[filter_list]
            x1 = temp_df['arr_delay']
            x2 = temp_df['dep_delay']
            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', 
                       'opacity': 0.75}, indices=0) 
            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', 
                       'opacity': 0.75}, indices=1)
            g.relayout({'barmode': 'overlay', 'xaxis': {'title': 'Delay in Minutes'},
                        'yaxis': {'title': 'Number of Delays'}})
        else:
            filter_list = [i and j for i,j in 
                           zip(df['carrier'] == 'DL', df['origin'] == origin.value)]
            temp_df = df[filter_list]
            x1 = temp_df['arr_delay']
            x2 = temp_df['dep_delay']
            g.restyle({'x': [x1], 'name': 'Arrival Delays', 'type': 'histogram', 
                       'opacity': 0.75}, indices=0) 
            g.restyle({'x': [x2], 'name': 'Departure Delays', 'type': 'histogram', 
                       'opacity': 0.75}, indices=1)
            g.relayout({'barmode': 'overlay'})

origin.observe(response, names="value")
textbox.observe(response, names="value")
month.observe(response, names="value")
use_date.observe(response, names="value")

----------------------------------------

TITLE: Adding Slider Controls to Plotly Animation
DESCRIPTION: Configures the slider component for controlling the animation, including appearance and behavior settings.

LANGUAGE: python
CODE:
sliders_dict = {
    'active': 0,
    'yanchor': 'top',
    'xanchor': 'left',
    'currentvalue': {
        'font': {'size': 20},
        'prefix': 'Year:',
        'visible': True,
        'xanchor': 'right'
    },
    'transition': {'duration': 300, 'easing': 'cubic-in-out'},
    'pad': {'b': 10, 't': 50},
    'len': 0.9,
    'x': 0.1,
    'y': 0,
    'steps': []
}

----------------------------------------

TITLE: Creating Bar Chart of Lead Statuses with Plotly
DESCRIPTION: Processes queried lead data and creates an interactive bar chart using Plotly to visualize lead status distributions.

LANGUAGE: python
CODE:
statuses = [x['Status'] for x in leads_for_status["records"]]
status_counts = Counter(statuses)

data = [go.Bar(x=status_counts.keys(), y=status_counts.values())]
py.iplot(data, filename='salesforce/lead-distributions')

----------------------------------------

TITLE: Creating a Secret Graph with Plotly in Python
DESCRIPTION: This code creates a secret graph using Plotly. Secret graphs can be viewed by anyone with the link, but won't appear in public feeds or search results.

LANGUAGE: python
CODE:
py.iplot(data, filename='privacy-secret', sharing='secret')

----------------------------------------

TITLE: Creating Violin Plot Visualization
DESCRIPTION: Generate an interactive violin plot to visualize the distribution of alcohol consumption data.

LANGUAGE: python
CODE:
y = data['alcohol'].values.tolist()

fig = FF.create_violin(y, title='Violin Plot', colors='#604d9e')
py.iplot(fig, filename='alcohol-violin-visual')

----------------------------------------

TITLE: Creating Trisurf Plot with Custom Colormaps in Python
DESCRIPTION: Generates 3D surface plots using the trisurf plotting technique with custom colormaps. Demonstrates the creation of a mobius strip surface with different colormap options.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.tools import FigureFactory as FF
import plotly.graph_objs as go
import numpy as np
from scipy.spatial import Delaunay

u = np.linspace(0, 2*np.pi, 24)
v = np.linspace(-1, 1, 8)
u,v = np.meshgrid(u, v)
u = u.flatten()
v = v.flatten()

tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)

points2D = np.vstack([u, v]).T
tri = Delaunay(points2D)
simplices = tri.simplices

trace1 = FF.create_trisurf(x=x, y=y, z=z,
                           simplices=simplices, colormap=magma_rgb, plot_edges=False,
                           title='Magma Colorscale for Trisurf Plot')

----------------------------------------

TITLE: Creating a Sample Plot for Deletion
DESCRIPTION: Creates a simple line plot using Plotly and returns the URL. This plot will be used to demonstrate deletion operations.

LANGUAGE: python
CODE:
url = py.plot({"data": [{"x": [1, 2, 3],
                         "y": [4, 2, 4]}],
               "layout": {"title": "Let's Trash This Plot<br>(then restore it)"}},
              filename='trash example') 

url

----------------------------------------

TITLE: Creating a 2D Histogram Contour Plot with Embedded Data
DESCRIPTION: This snippet shows how to create a 2D Histogram Contour plot using Plotly with data directly embedded in the graph object.

LANGUAGE: python
CODE:
x = np.random.randn(1000)
y = np.random.randn(1000) + 1

data = [
    go.Histogram2dContour(
        x=x,
        y=y
    )
]

py.iplot(data, filename='Example 2D Histogram Contour')

----------------------------------------

TITLE: Importing Spark and Plotly Libraries in Python
DESCRIPTION: Imports necessary libraries for working with Spark DataFrames and creating Plotly visualizations.

LANGUAGE: python
CODE:
from pyspark.sql import SQLContext
sqlContext = SQLContext(sc)

import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd
import requests
requests.packages.urllib3.disable_warnings()

----------------------------------------

TITLE: Creating Plotly Grid for Apple Stock Data Animation in Python
DESCRIPTION: This snippet defines a function to convert dates to Unix time and creates a Plotly grid with columns for dates and adjusted stock prices. It prepares the data structure for the animated plot.

LANGUAGE: python
CODE:
def to_unix_time(dt):
    epoch =  datetime.utcfromtimestamp(0)
    return (dt - epoch).total_seconds() * 1000

appl_price = list(appl['Adjusted'])
my_columns = []
for k in range(len(appl.Date) - 1):
    my_columns.append(Column(list(appl.Date)[:k + 1], 'x{}'.format(k + 1)))   
    my_columns.append(Column(appl_price[:k + 1], 'y{}'.format(k + 1)))
grid = Grid(my_columns)
py.grid_ops.upload(grid, 'AAPL-daily-stock-price' + str(time.time()), auto_open=False)

----------------------------------------

TITLE: Initializing the Plotly Widget
DESCRIPTION: Import required modules and initialize a Plotly GraphWidget with a URL

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from IPython.display import Image

from plotly.widgets import GraphWidget

url = py.plot({'data': [go.Scatter(x=[1, 2, 3], y=[4, 6, 9]), go.Scatter(x=[1, 2, 3], y=[10, 30, 20])]}, 
               filename = 'widget template', auto_open=False)
print url

graph = GraphWidget(url)
g = graph
graph

----------------------------------------

TITLE: Adding a Logo to a Bar Chart in Python
DESCRIPTION: This example shows how to add a logo to a bar chart using Plotly in Python. It creates a bar chart displaying percentile changes in income and adds the Vox logo as an overlay image with specific positioning.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Bar(
        x=['-35.3', '-15.9', '-15.8', '-15.6', '-11.1',
           '-9.6', '-9.2', '-3.5', '-1.9', '-0.9',
           '1.0', '1.4', '1.7', '2.0', '2.8', '6.2',
           '8.1', '8.5', '8.5', '8.6', '11.4', '12.5',
           '13.3', '13.7', '14.4', '17.5', '17.7',
           '18.9', '25.1', '28.9', '41.4'],
        y=['Designers, musicians, artists, etc.',
           'Secretaries and administrative assistants',
           'Waiters and servers', 'Archivists, curators, and librarians',
           'Sales and related', 'Childcare workers, home car workers, etc.',
           'Food preparation occupations', 'Janitors, maids, etc.',
           'Healthcare technicians, assistants. and aides',
           'Counselors, social and religious workers',
           'Physical, life and social scientists', 'Construction',
           'Factory assembly workers', 'Machinists, repairmen, etc.',
           'Media and communications workers', 'Teachers',
           'Mechanics, repairmen, etc.', 'Financial analysts and advisers',
           'Farming, fishing and forestry workers',
           'Truck drivers, heavy equipment operator, etc.','Accountants and auditors',
           'Human resources, management analysts, etc.', 'Managers',
           'Lawyers and judges', 'Engineers, architects and surveyors',
           'Nurses', 'Legal support workers',
           'Computer programmers and system admin.', 'Police officers and firefighters',
           'Chief executives', 'Doctors, dentists and surgeons'],
        marker=dict(
            color='rgb(253, 240, 54)',
            line=dict(color='rgb(0, 0, 0)',
                      width=2)
        ),
        orientation='h',
    )
]

layout = go.Layout(
    images=[dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png",
        xref="paper", yref="paper",
        x=1, y=1.05,
        sizex=0.2, sizey=0.2,
        xanchor="right", yanchor="bottom"
      )],
    autosize=False, height=800, width=700,
    bargap=0.15, bargroupgap=0.1,
    barmode='stack', hovermode='x',
    margin=dict(r=20, l=300,
                  b=75, t=125),
    title='Moving Up, Moving Down<br><i>Percentile change in income between childhood and adulthood</i>',
    xaxis=dict(
        dtick=10, nticks=0,
        gridcolor='rgba(102, 102, 102, 0.4)',
        linecolor='#000', linewidth=1,
        mirror=True,
        showticklabels=True, tick0=0, tickwidth=1,
        title='<i>Change in percentile</i>',
    ),
    yaxis=dict(
        anchor='x',
        gridcolor='rgba(102, 102, 102, 0.4)', gridwidth=1,
        linecolor='#000', linewidth=1,
        mirror=True, showgrid=False,
        showline=True, zeroline=False,
        showticklabels=True, tick0=0,
        type='category',
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig,filename='EXAMPLES/logo')

----------------------------------------

TITLE: Displaying GIF Animation in Jupyter Notebook
DESCRIPTION: This code snippet demonstrates how to display a GIF animation in a Jupyter notebook using HTML.

LANGUAGE: python
CODE:
%%html
<img src="https://cloud.githubusercontent.com/assets/12302455/16568848/46acc124-41fd-11e6-95e4-10e7dad66fe3.gif">

----------------------------------------

TITLE: Initializing Linear Gauge Chart Layout in Python with Plotly
DESCRIPTION: This code snippet sets up the basic structure and layout for a linear gauge chart with four scales using Plotly. It defines scale titles, labels, and configures the chart's axes and dimensions.

LANGUAGE: python
CODE:
from plotly import tools
import plotly.plotly as py
import plotly.graph_objs as go

# Define Titles and Labels for Each Scale
scales = ['<b>Tension</b>', '<b>Energy</b>',
          '<b>Valence</b>', '<b>Prefer</b>']
scale1 = ['Very <br> Calm ', 'Moderately <br> Calm ',
          'Slightly <br> Calm ', 'Neutral ',
          'Slightly <br> Tense ', 'Moderately <br> Tense ',
          'Very <br> Tense ']
scale2 = ['Very <br> Tired ', 'Moderately <br> Tired ',
          'Slightly <br> Tired ', 'Neutral ',
          'Slightly <br> Awake ', 'Moderately <br> Awake ',
          'Very <br> Awake ']
scale3 = ['Very <br> Displeased ', 'Moderately <br> Displeased ',
          'Slightly <br> Displeased ', 'Neutral ',
          'Slightly <br> Pleased ', 'Moderately <br> Pleased ',
          'Very <br> Pleased ']
scale4 = ['Strongly <br> Dislike ', 'Moderately <br> Dislike ',
          'Slightly <br> Dislike ', 'Neutral ',
          'Slightly <br> Like ', 'Moderately <br> Like ',
          'Strongly <br> Like ']
scale_labels = [scale1, scale2, scale3, scale4]

# Add Scale Titles to the Plot
traces = []
for i in range(len(scales)):
    traces.append(go.Scatter(
        x=[0.6], # Pad the title - a longer scale title would need a higher value 
        y=[6.25],
        text=scales[i],
        mode='text',
        hoverinfo='none',
        showlegend=False,
        xaxis='x'+str(i+1),
        yaxis='y'+str(i+1)
    ))

# Create Scales
## Since we have 7 lables, the scale will range from 0-6
shapes = []
for i in range(len(scales)):
    shapes.append({'type': 'rect',
                   'x0': .02, 'x1': 1.02,
                   'y0': 0, 'y1': 6,
                   'xref':'x'+str(i+1), 'yref':'y'+str(i+1)})

x_domains = [[0, .25], [.25, .5], [.5, .75], [.75, 1]] # Split for 4 scales
chart_width = 800

# Define X-Axes
xaxes = []
for i in range(len(scales)):
    xaxes.append({'domain': x_domains[i], 'range':[0, 4],
                  'showgrid': False, 'showline': False,
                  'zeroline': False, 'showticklabels': False})

# Define Y-Axes (and set scale labels)
## ticklen is used to create the segments of the scale,
## for more information see: https://plotly.com/python/reference/#layout-yaxis-ticklen
yaxes = []
for i in range(len(scales)):
    yaxes.append({'anchor':'x'+str(i+1), 'range':[-.5,6.5],
                  'showgrid': False, 'showline': False, 'zeroline': False,
                  'ticks':'inside', 'ticklen': chart_width/20,
                  'ticktext':scale_labels[i], 'tickvals':[0., 1., 2., 3., 4., 5., 6.]
                 })

# Put all elements of the layout together
layout = {'shapes': shapes,
          'xaxis1': xaxes[0],
          'xaxis2': xaxes[1],
          'xaxis3': xaxes[2],
          'xaxis4': xaxes[3],
          'yaxis1': yaxes[0],
          'yaxis2': yaxes[1],
          'yaxis3': yaxes[2],
          'yaxis4': yaxes[3],
          'autosize': False,
          'width': chart_width,
          'height': 600
}

### ADD RATING DATA HERE ###

fig = dict(data=traces, layout=layout)
py.iplot(fig, filename='linear-gauge-layout')

----------------------------------------

TITLE: Plotting External CSV Data
DESCRIPTION: Demonstrates how to load and visualize CSV data from an external URL using Pandas and Plotly

LANGUAGE: python
CODE:
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')

df_external_source = FF.create_table(df.head())
py.iplot(df_external_source, filename='df-external-source-table')

----------------------------------------

TITLE: Setting Up Streaming Plot Configuration
DESCRIPTION: Creates a scatter plot configuration with streaming enabled by embedding the stream ID object.

LANGUAGE: python
CODE:
trace1 = go.Scatter(
    x=[],
    y=[],
    mode='lines+markers',
    stream=stream_1         # (!) embed stream id, 1 per trace
)

data = go.Data([trace1])

layout = go.Layout(title='Time Series')

fig = go.Figure(data=data, layout=layout)

----------------------------------------

TITLE: Displaying LaTeX Equations in Jupyter Notebook
DESCRIPTION: Demonstrates how to display LaTeX equations in a Jupyter notebook using IPython.display.

LANGUAGE: python
CODE:
from IPython.display import display, Math, Latex

display(Math(r'F(k) = \int_{-\infty}^{\infty} f(x) e^{2\pi i k} dx'))

----------------------------------------

TITLE: Adding The Verge Logo to Existing Plotly Chart in Python
DESCRIPTION: This code retrieves an existing Plotly chart, adds The Verge logo to the top left corner, modifies the legend orientation, and then re-uploads the modified chart.

LANGUAGE: python
CODE:
import plotly.plotly as py

fig = py.get_figure('https://plotly.com/~Dreamshot/8158/')

fig.layout.images = [dict(
        source="https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/theverge.png",
        xref="paper", yref="paper",
        x=0.1, y=1.0,
        sizex=0.2, sizey=0.3,
        xanchor="center", yanchor="bottom"
      )]

fig.layout.legend.orientation = 'h'

py.iplot(fig, fileopt='overwrite', filename='Logos/Apple_Labor_Violations_TheVerge')

----------------------------------------

TITLE: Creating a Combined Bar and Line Chart with Plotly
DESCRIPTION: This code creates a complex visualization combining a horizontal bar chart and a line plot to show household savings and net worth data.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly import tools
import numpy as np

# ... (full code not shown due to length, includes data setup, trace creation, layout configuration, and subplot creation) ...

fig['layout'].update(layout)
py.iplot(fig, filename='oecd-networth-saving-bar-line')

----------------------------------------

TITLE: Configuring Plotly Figure Layout for Gapminder Animation
DESCRIPTION: Sets up the basic layout for the animated bubble chart, including axis configurations and background color.

LANGUAGE: python
CODE:
figure = {
    'data': [],
    'layout': {},
    'frames': [],
    'config': {'scrollzoom': True}
}

figure['layout']['xaxis'] = {'range': [30, 85], 'title': 'Life Expectancy', 'gridcolor': '#FFFFFF'}
figure['layout']['yaxis'] = {'title': 'GDP per Capita', 'type': 'log', 'gridcolor': '#FFFFFF'}
figure['layout']['hovermode'] = 'closest'
figure['layout']['plot_bgcolor'] = 'rgb(223, 232, 243)'

----------------------------------------

TITLE: Creating Vertical Subplots with Table and Bar Chart
DESCRIPTION: This code creates a table and a bar chart using Plotly's Figure Factory, then combines them into vertical subplots.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

# Add table data
table_data = [['Team', 'Wins', 'Losses', 'Ties'],
              ['Montréal<br>Canadiens', 18, 4, 0],
              ['Dallas Stars', 18, 5, 0],
              ['NY Rangers', 16, 5, 0], 
              ['Boston<br>Bruins', 13, 8, 0],
              ['Chicago<br>Blackhawks', 13, 8, 0],
              ['Ottawa<br>Senators', 12, 5, 0]]

# Initialize a figure with ff.create_table(table_data)
figure = ff.create_table(table_data, height_constant=60)

# Add graph data
teams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',
         'Boston Bruins', 'Chicago Blackhawks', 'Ottawa Senators']
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.77]

# Make traces for graph
trace1 = go.Bar(x=teams, y=GFPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#0099ff'),
                name='Goals For<br>Per Game')
trace2 = go.Bar(x=teams, y=GAPG, xaxis='x2', yaxis='y2',
                marker=dict(color='#404040'),
                name='Goals Against<br>Per Game')

# Add trace data to figure
figure.add_traces([trace1, trace2])

# initialize xaxis2 and yaxis2
figure['layout']['xaxis2'] = {}
figure['layout']['yaxis2'] = {}

# Edit layout for subplots
figure.layout.yaxis.update({'domain': [0, .45]})
figure.layout.yaxis2.update({'domain': [.6, 1]})

# The graph's yaxis2 MUST BE anchored to the graph's xaxis2 and vice versa
figure.layout.yaxis2.update({'anchor': 'x2'})
figure.layout.xaxis2.update({'anchor': 'y2'})
figure.layout.yaxis2.update({'title': 'Goals'})

# Update the margins to add a title and see graph x-labels. 
figure.layout.margin.update({'t':75, 'l':50})
figure.layout.update({'title': '2016 Hockey Stats'})

# Update the height because adding a graph vertically will interact with
# the plot height calculated for the table
figure.layout.update({'height':800})

# Plot!
py.iplot(figure, filename='subplot_table_vertical')

----------------------------------------

TITLE: Publishing Jupyter Notebook with Custom Styling in Python
DESCRIPTION: This code snippet sets up custom styling for the Jupyter notebook and publishes it using a custom publisher tool. It includes setting up custom fonts, CSS, and using a GitHub-hosted publisher package.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python_Interpolation_and_Extrapolation_in_1D.ipynb', 'python/interpolation-and-extrapolation-in-1d/', 'Interpolation and Extrapolation in 1D | plotly',
    'Learn how to interpolation and extrapolate data in one dimension',
    title='Interpolation and Extrapolation in 1D in Python. | plotly',
    name='Interpolation and Extrapolation in 1D',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=3,
    ipynb= '~notebook_demo/106')

----------------------------------------

TITLE: Configuring Plot Layout
DESCRIPTION: Set up the plot layout including axis properties, title, and margins

LANGUAGE: python
CODE:
axis = dict(showline=False,
            zeroline=False,
            showgrid=False,
            showticklabels=False,
            )

layout = dict(title= 'Tree with Reingold-Tilford Layout',  
              annotations=make_annotations(position, v_label),
              font=dict(size=12),
              showlegend=False,
              xaxis=go.XAxis(axis),
              yaxis=go.YAxis(axis),          
              margin=dict(l=40, r=40, b=85, t=100),
              hovermode='closest',
              plot_bgcolor='rgb(248,248,248)'          
              )

----------------------------------------

TITLE: Simulating Step Response of Open Loop Bicycle Model
DESCRIPTION: Simulates and plots the step response of the open loop bicycle model to a steering input.

LANGUAGE: python
CODE:
time = np.linspace(0.0, 5.0, num=1001)
delta = np.deg2rad(2.0) * np.ones_like(time)
time, theta, state = cn.forced_response(theta_delta, T=time, U=delta)

pl.iplot(plot_siso_response(time, np.rad2deg(delta),np.rad2deg(theta), title='Step Response',
                            output_y_lab='Roll Angle [deg]', input_y_lab='Steer Angle [deg]'))

----------------------------------------

TITLE: Creating Plotly Grid for Gapminder Animation
DESCRIPTION: Prepares data for animation by creating a Plotly grid with columns for each year, continent, and data attribute.

LANGUAGE: python
CODE:
years_from_col = set(dataset['year'])
years_ints = sorted(list(years_from_col))
years = [str(year) for year in years_ints]
years.remove('1957')

continents = []
for continent in dataset['continent']:
    if continent not in continents: 
        continents.append(continent)

columns = []
for year in years:
    for continent in continents:
        dataset_by_year = dataset[dataset['year'] == int(year)]
        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == continent]
        for col_name in dataset_by_year_and_cont:
            column_name = '{year}_{continent}_{header}_gapminder_grid'.format(
                year=year, continent=continent, header=col_name
            )
            a_column = Column(list(dataset_by_year_and_cont[col_name]), column_name)
            columns.append(a_column)

grid = Grid(columns)
url = py.grid_ops.upload(grid, 'gapminder_grid'+str(time.time()), auto_open=False)
url

----------------------------------------

TITLE: Creating a Basic Histogram with Plotly in Python
DESCRIPTION: This code creates a basic histogram using Plotly and NumPy. It generates random data and plots it as a histogram.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.randn(500)
data = [go.Histogram(x=x)]

py.iplot(data, filename='basic histogram')

----------------------------------------

TITLE: Adding New Traces
DESCRIPTION: Add a new trace to the existing graph

LANGUAGE: Python
CODE:
g.add_traces(go.Scatter(x=[1,2,3], y=[5, 4, 5], name='another sample'))

----------------------------------------

TITLE: Importing Required Libraries for Peak Analysis
DESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, SciPy and PeakUtils for data analysis and visualization

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy
import peakutils

from scipy import signal

----------------------------------------

TITLE: Creating an Offline HTML Plot with Plotly
DESCRIPTION: Demonstrates how to create a scatter plot and save it as a standalone HTML file using Plotly's offline mode.

LANGUAGE: python
CODE:
import plotly.graph_objects as go
import plotly.io as pio

fig = go.Figure(go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1]))
fig.update_layout(title_text='hello world')
pio.write_html(fig, file='hello_world.html', auto_open=True)

----------------------------------------

TITLE: Importing Plotly Libraries
DESCRIPTION: Basic imports of plotly libraries and pandas for data manipulation.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

----------------------------------------

TITLE: Exporting Plotly Graph as SVG in JavaScript
DESCRIPTION: This snippet demonstrates how to export a Plotly graph as an SVG image. It sets the image source attribute and specifies the SVG format in the Plotly.toImage() function.

LANGUAGE: javascript
CODE:
img_svg.attr("src", url);
Plotly.toImage(gd,{format:'svg',height:800,width:800});

----------------------------------------

TITLE: Creating Interactive Plot
DESCRIPTION: Initialize Plotly FigureWidget with two histogram traces for arrival and departure delays

LANGUAGE: python
CODE:
trace1 = go.Histogram(x=df['arr_delay'], opacity=0.75, name='Arrival Delays')
trace2 = go.Histogram(x=df['dep_delay'], opacity=0.75, name='Departure Delays')
g = go.FigureWidget(data=[trace1, trace2],
                    layout=go.Layout(
                        title=dict(
                            text='NYC FlightDatabase'
                        ),
                        barmode='overlay'
                    ))

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's used to ensure the correct version is installed for the examples that follow.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Data Grid for Bivariate Normal Distribution
DESCRIPTION: Generates a grid of bivariate normal distributions with varying correlation coefficients. Includes custom colorscale definition and helper functions for calculating probability density functions.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.grid_objs import Grid, Column

import time
import numpy as np
from scipy.stats import multivariate_normal as Nd

colorscale = [
    [0.0, 'rgb(25, 23, 10)'], 
    [0.05, 'rgb(69, 48, 44)'],
    [0.1, 'rgb(114, 52, 47)'],
    [0.15, 'rgb(155, 58, 49)'],
    [0.2, 'rgb(194, 70, 51)'],
    [0.25, 'rgb(227, 91, 53)'],
    [0.3, 'rgb(250, 120, 56)'],
    [0.35, 'rgb(255, 152, 60)'],
    [0.4, 'rgb(255, 188, 65)'],
    [0.45, 'rgb(236, 220, 72)'],
    [0.5, 'rgb(202, 243, 80)'],
    [0.55, 'rgb(164, 252, 93)'],
    [0.6, 'rgb(123, 245, 119)'],
    [0.65, 'rgb(93, 225, 162)'],
    [0.7, 'rgb(84, 196, 212)'],
    [0.75, 'rgb(99, 168, 238)'],
    [0.8, 'rgb(139, 146, 233)'],
    [0.85, 'rgb(190, 139, 216)'],
    [0.9, 'rgb(231, 152, 213)'],
    [0.95, 'rgb(241, 180, 226)'],
    [1.0, 'rgb(206, 221, 250)']
]

----------------------------------------

TITLE: Creating Animated Heatmap Figure
DESCRIPTION: Configures and creates the animated heatmap visualization using the previously generated data grid. Includes layout settings, frame definitions, and animation controls.

LANGUAGE: python
CODE:
data=[dict(type='heatmap',
           xsrc=grid.get_column_reference('x'),
           ysrc=grid.get_column_reference('y'), 
           zsrc=grid.get_column_reference('z1'), 
           zmin=0,
           zmax=zvmax[6],
           zsmooth='best', 
           colorscale=colorscale, 
           colorbar=dict(thickness=20, ticklen=4))]

title='Contour plot for bivariate normal distribution'+\
'<br> N(m=[0,0], sigma=[1,1], rho in (-1, 1))'

fig=dict(data=data, layout=layout, frames=frames)  
py.icreate_animations(fig, filename='animheatmap'+str(time.time()))

----------------------------------------

TITLE: Exporting Plotly Graph as PNG in JavaScript
DESCRIPTION: This code snippet shows how to export a Plotly graph as a PNG image. It sets the image source attribute and specifies the PNG format in the Plotly.toImage() function.

LANGUAGE: javascript
CODE:
img_png.attr("src", url);
Plotly.toImage(gd,{format:'png',height:400,width:400});

----------------------------------------

TITLE: Importing Required Libraries for Plotly and Scientific Computing
DESCRIPTION: Sets up the required Python libraries including Plotly, NumPy, Pandas, and SciPy for numerical computation and plotting.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Configuring IPython display and publishing Plotly guide
DESCRIPTION: This code snippet sets up custom styling for the IPython notebook, upgrades the 'publisher' package, and publishes the user guide to Plotly's documentation site. It demonstrates how to customize the notebook appearance and use Plotly's publishing tools.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install publisher --upgrade
import publisher
publisher.publish(
    'user-g.ipynb', 'python/userguide//', 'Getting Started Plotly for Python',
    'Getting Started with Plotly for Python',
    title = 'Getting Started Plotly for Python',
    thumbnail='', language='python',
    layout='user-guide', has_thumbnail='false')

----------------------------------------

TITLE: Importing Required Libraries for Salesforce and Plotly Integration
DESCRIPTION: Imports necessary Python libraries including Plotly, Pandas, and Simple Salesforce for data retrieval and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
import numpy as np
from collections import Counter
import requests

from simple_salesforce import Salesforce
requests.packages.urllib3.disable_warnings() # this squashes insecure SSL warnings - DO NOT DO THIS ON PRODUCTION!

----------------------------------------

TITLE: Attaching Metadata to a Plotly Grid
DESCRIPTION: This code shows how to attach custom metadata in JSON format to a Plotly grid when uploading it. This feature is available in Chart Studio Enterprise.

LANGUAGE: python
CODE:
meta = {
    "Month": "November",
    "Experiment ID": "d3kbd",
    "Operator": "James Murphy",
    "Initial Conditions": {
          "Voltage": 5.5
    }
}

grid_url = py.grid_ops.upload(grid, filename='grid_with_metadata_'+str(dt.now()), meta=meta)
print(url)

----------------------------------------

TITLE: Setting up custom fonts and CSS for Jupyter Notebook
DESCRIPTION: This code snippet sets up custom fonts and CSS for the Jupyter Notebook display. It also installs and imports the publisher package for publishing the notebook content.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'map-subplots.ipynb', ' python/map-subplots-and-small-multiples/', ' Python Map Subplots and Map Small Multiples| Plotly',
    'How to make map subplots and map small multiples in Python.',
    title = 'Python Map Subplots and Map Small Multiples | plotly',
    name = 'Map Subplots',
    has_thumbnail='true', thumbnail='thumbnail/map-subplots.jpg', 
    language='python', page_type='example_index'
    display_as='multiple_axes', order=5,
    ipynb= '~notebook_demo/59') 

----------------------------------------

TITLE: Creating an Interactive Table with Plotly in Python
DESCRIPTION: Demonstrates how to import data from a CSV file using Pandas and create an interactive table using Plotly's figure factory.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.figure_factory as ff
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")

table = ff.create_table(df)
py.iplot(table, filename='jupyter-table1')

----------------------------------------

TITLE: Creating HTML iFrame Display Function
DESCRIPTION: Function that generates HTML code to display presentations in an iframe within Jupyter notebooks

LANGUAGE: python
CODE:
def url_to_iframe(url, text=True):
    html = ''
    # style
    html += '''<head>
    <style>
    div.textbox {
        margin: 30px;
        font-weight: bold;   
    }
    </style>
    </head>'
    '''
    # iframe
    html += '<iframe src=' + url + '.embed#{} width=750 height=400 frameBorder="0"></iframe>'
    if text:
        html += '''<body>
        <div class="textbox">
            <p>Click on the presentation above and use left/right arrow keys to flip through the slides.</p>
        </div>
        </body>
        '''
    return html

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number to ensure compatibility with animation features.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple code to import Plotly and check the installed version number

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Hiding Entries in Grouped Legend in Plotly
DESCRIPTION: Shows how to hide specific entries in a grouped legend by setting showlegend=False for individual traces.

LANGUAGE: python
CODE:
import plotly.plotly as py

data = [
    {
        'x': [1, 2, 3],
        'y': [2, 1, 3],
        'legendgroup': 'group',
        'name': 'first legend group',
        'mode': 'markers',
        'marker': {
            'color': 'rgb(164, 194, 244)'
        }
    },
    {
        'x': [1, 2, 3],
        'y': [2, 2, 2],
        'legendgroup': 'group',
        'name': 'first legend group - average',
        'mode': 'lines',
        'line': {
            'color': 'rgb(164, 194, 244)'
        },
        'showlegend': False
    },
    {
        'x': [1, 2, 3],
        'y': [4, 9, 2],
        'legendgroup': 'group2',
        'name': 'second legend group',
        'mode': 'markers',
        'marker': {
            'color': 'rgb(142, 124, 195)'
        }
    },
    {
        'x': [1, 2, 3],
        'y': [5, 5, 5],
        'legendgroup': 'group2',
        'name': 'second legend group - average',
        'mode': 'lines',
        'line': {
            'color': 'rgb(142, 124, 195)'
        },
        'showlegend': False
    }
]

py.iplot(data, filename='hiding-entries-from-grouped-legends')

----------------------------------------

TITLE: Retrieving and Replotting Plotly Figure by URL
DESCRIPTION: Shows how to fetch a public Plotly figure using its URL and replot it without modifications.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
# Learn about API authentication here: https://plotly.com/python/getting-started
# Find your api_key here: https://plotly.com/settings/api

fig = py.get_figure("https://plotly.com/~PlotBot/5")

plot_url = py.plot(fig, filename="python-replot1")

----------------------------------------

TITLE: Creating Simple Inset Graph with Plotly in Python
DESCRIPTION: Creates an inset plot with two scatter plots using Plotly. The main plot shows data points (1,4), (2,3), (3,2) while the inset plot shows points (20,30), (30,40), (40,50) positioned in the upper right quadrant of the figure.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[4, 3, 2]
)
trace2 = go.Scatter(
    x=[20, 30, 40],
    y=[30, 40, 50],
    xaxis='x2',
    yaxis='y2'
)
data = [trace1, trace2]
layout = go.Layout(
    xaxis2=dict(
        domain=[0.6, 0.95],
        anchor='y2'
    ),
    yaxis2=dict(
        domain=[0.6, 0.95],
        anchor='x2'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='simple-inset')

----------------------------------------

TITLE: Creating Basic Plotly Graph
DESCRIPTION: Creates a basic scatter plot with default overwrite behavior. The plot will overwrite any existing file with the same name.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2],
        y=[3, 4]
    )
]

plot_url = py.plot(data, filename='my plot')

----------------------------------------

TITLE: Importing Essential Data Science Libraries in Python
DESCRIPTION: Importing commonly used libraries for data analysis and visualization, including Pandas, NumPy, SciPy, and Plotly.

LANGUAGE: python
CODE:
import pandas as pd
import numpy as np
import scipy as sp
import chart_studio.plotly as py

----------------------------------------

TITLE: Importing Required Libraries for Signal Processing and Plotting
DESCRIPTION: Imports necessary Python libraries including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and SciPy for signal processing functions.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
import pandas as pd
import scipy

from scipy import signal

----------------------------------------

TITLE: Path Finding Algorithm Implementation
DESCRIPTION: Implements a march function to find closest integer coordinate path between two points, used for graph interaction.

LANGUAGE: python
CODE:
def march(x0, y0, x1, y1):
    '''
    Return the closest path of integer coordinates 
    between (x0, y0) and (x1, y1)
    '''
    if abs(x1-x0) > abs(y1-y0):    
        if x1>x0:
            x = range(int(x0), int(x1)+1)
        else:
            x = range(int(x0), int(x1)+1, -1)
        y = []
        tanth = (y1-y0)/(x1-x0)
        for xi in x:
            y.append(round(y0+(xi-x0)*tanth))
    # ... remaining implementation

----------------------------------------

TITLE: Querying and Visualizing Opportunity Data
DESCRIPTION: Retrieves opportunity data from Salesforce and creates a histogram of opportunity amounts using Plotly.

LANGUAGE: python
CODE:
opportunity_amounts = sf.query("SELECT Id, Probability, StageName, Amount, Owner.Name FROM Opportunity WHERE AMOUNT < 10000")

amounts = [x['Amount'] for x in opportunity_amounts['records']]
owners = [x['Owner']['Name'] for x in opportunity_amounts['records']]

hist1 = go.Histogram(x=amounts)
py.iplot([hist1], filename='salesforce/opportunity-probability-histogram')

----------------------------------------

TITLE: Creating Custom Tick Labels in Plotly Python
DESCRIPTION: This snippet demonstrates how to create custom tick labels for axes. It uses financial data to create a chart with custom quarterly labels on the x-axis.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go 

import pandas as pd

# get and filter apple data
apple_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')
apple_df_2016 = apple_df[apple_df.Date < '2017'][apple_df.Date > '2016']

# get clean and filter tesla data
tesla_df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/tesla-stock-price.csv')
tesla_df.date = pd.to_datetime(tesla_df.date)
tesla_df_2016 = tesla_df[tesla_df.date < '2017'][tesla_df.date > '2016']

# set x-axis labels and their corresponding data values
labels = ['End of Q1', 'End of Q2', 'End of Q3', 'End of Q4']
tickvals = ['2016-04-01', '2016-07-01', '2016-10-01', apple_df_2016.Date.max()]

data=[
    go.Scatter(
        x = apple_df_2016.Date, 
        y=apple_df_2016['AAPL.High'], 
        name='Apple', 
        marker=dict(color='#851e52'),
    ),
    go.Scatter(
        x=tesla_df_2016.date, 
        y=tesla_df_2016.high, 
        name='Tesla', 
        yaxis='y2',
        marker=dict(color='#d3560e'),
    ),
]

layout = go.Layout(
    title='2016 Quarterly Stock Trends',
    xaxis=go.layout.XAxis(
        ticktext=labels,
        tickvals=tickvals
    ),
    yaxis2= dict(
        overlaying='y',
        side='right',
        showgrid=False,
    )
)
fig = go.Figure(data, layout)

py.iplot(fig, filename='tickvals-and-ticktext')

----------------------------------------

TITLE: Initializing Plotly Stream for Bar Chart in Python
DESCRIPTION: This snippet sets up the necessary imports and initializes a Plotly stream object for a bar chart. It defines the stream ID and creates a Stream object with a maximum of 80 points.

LANGUAGE: python
CODE:
import plotly.plotly as py  
import plotly.tools as tls   
import numpy as np
import time
 
from plotly.graph_objs import *
 
import numpy as np  

stream_id = 'jkc6d90yfw'   

# Let's generate a new stream id object
stream = Stream(
    token=stream_id,  
    maxpoints=80
)

----------------------------------------

TITLE: Customizing A and B Axes in a Carpet Plot with Plotly
DESCRIPTION: This code snippet shows how to customize the A and B axes of a carpet plot. It adds tick prefixes and suffixes, smoothing, and minor grid lines to enhance the plot's appearance and readability.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],
    b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    y = [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],
    aaxis = dict(
        tickprefix = 'a = ',
        ticksuffix = 'm',
        smoothing = 1,
        minorgridcount = 9,
    ),
    baxis = dict(
        tickprefix = 'b = ',
        ticksuffix = 'pa',
        smoothing = 1,
        minorgridcount = 9,
    )
)

data = [trace1]

fig = go.Figure(data = data)
py.iplot(fig, filename = "carpet/add-axes")

----------------------------------------

TITLE: Processing and Visualizing Plotly Figure Data
DESCRIPTION: Demonstrates how to retrieve figure data, process it to extract specific values, and create a new histogram visualization using plotly.graph_objects.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go
# Learn about API authentication here: https://plotly.com/python/getting-started
# Find your api_key here: https://plotly.com/settings/api

data = py.get_figure("https://plotly.com/~PythonPlotBot/3483").data
distance = [d['y'][0] for d in data]  # check out the data for yourself!

fig = go.Figure()
fig.add_histogram(y=distance, name="flyby distance", histnorm='probability')
xaxis = dict(title="Probability for Flyby at this Distance")
yaxis = dict(title="Distance from Earth (Earth Radii)")
fig.update_layout(title="data source: https://plotly.com/~AlexHP/68", xaxis=xaxis, yaxis=yaxis)

plot_url = py.plot(fig, filename="python-get-data")

----------------------------------------

TITLE: Printing Hello World in Python
DESCRIPTION: A simple example demonstrating how to print 'hello world' in a Jupyter notebook code cell.

LANGUAGE: python
CODE:
print("hello world")

----------------------------------------

TITLE: Displaying Dash Example Source Code in Jupyter Notebook
DESCRIPTION: This snippet uses IPython's IFrame to display the source code of a Dash application example within the Jupyter notebook. It provides a way to view the implementation details of the Dash app.

LANGUAGE: python
CODE:
from IPython.display import IFrame
IFrame(src= "https://dash-simple-apps.plotly.host/dash-graphsizeplot/code", width="100%", height=500, frameBorder="0")

----------------------------------------

TITLE: Creating a Table from a Pandas DataFrame
DESCRIPTION: Demonstrates how to create a table using data from a pandas DataFrame with Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')
df_sample = df[100:120]

table = ff.create_table(df_sample)
py.iplot(table, filename='pandas_table')

----------------------------------------

TITLE: Creating a Public Graph with Plotly in Python
DESCRIPTION: This code creates a public scatter plot using Plotly's Python library. It demonstrates how to create and display a public graph that anyone can view.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        x=[1, 2, 3],
        y=[1, 3, 1]
    )
]

py.iplot(data, filename='privacy-public', sharing='public')

----------------------------------------

TITLE: Complete De Casteljau Algorithm
DESCRIPTION: Recursive implementation of the full de Casteljau algorithm for computing points on a triangular Bézier patch

LANGUAGE: Python
CODE:
def deCasteljau(n,b,lam):
    if len(b)>1:       
        return deCasteljau(n-1, deCasteljau_step(n, b, lam), lam)   
    else: 
        return b[0]

----------------------------------------

TITLE: Creating Colored Box Plots in Python with Plotly
DESCRIPTION: This example shows how to create colored box plots using Plotly. It generates random data and creates two box plots with custom colors.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

y0 = np.random.randn(50)
y1 = np.random.randn(50)+1

trace0 = go.Box(
    y=y0,
    name = 'Sample A',
    marker = dict(
        color = 'rgb(214, 12, 140)',
    )
)
trace1 = go.Box(
    y=y1,
    name = 'Sample B',
    marker = dict(
        color = 'rgb(0, 128, 128)',
    )
)
data = [trace0, trace1]
py.iplot(data)

----------------------------------------

TITLE: Importing Required Libraries for Signal Processing
DESCRIPTION: Sets up the necessary Python libraries including Plotly for visualization, NumPy for numerical operations, Pandas for data handling, and SciPy for signal processing.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

import numpy as np
import pandas as pd
import scipy

from scipy import signal

----------------------------------------

TITLE: Importing CSV Data and Creating a Table with Plotly in Python
DESCRIPTION: This code imports CSV data, processes dates, and creates a table visualization using Plotly. It demonstrates data preprocessing and table styling.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd
import re

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv')

# remove min:sec:millisec from dates 
for i, row in enumerate(df['Date']):
    p = re.compile(' 00:00:00')
    datetime = p.split(df['Date'][i])[0]
    df.iloc[i, 1] = datetime

table = go.Table(
    columnwidth=[0.4, 0.47, 0.48, 0.4, 0.4, 0.45, 0.5, 0.6],
    header=dict(
        values=['Date', 'Number<br>Transactions', 'Output<br>Volume (BTC)',
                'Market<br>Price', 'Hash<br>Rate', 'Cost per<br>trans-USD',
                'Mining<br>Revenue-USD', 'Trasaction<br>fees-BTC'],
        font=dict(size=10),
        line = dict(color='rgb(50, 50, 50)'),
        align = 'left',
        fill = dict(color='#d562be'),
    ),
    cells=dict(
        values=[df[k].tolist() for k in df.columns[1:]],
        line = dict(color='rgb(50, 50, 50)'),
        align = 'left',
        fill = dict(color='#f5f5fa')
    )
)
py.iplot([table], filename='table-of-mining-data')

----------------------------------------

TITLE: Updating Point Cloud to Scatter GL in Plotly.js
DESCRIPTION: This snippet shows how to update the deprecated 'pointcloud' trace type to use 'scattergl' instead in Plotly.js.

LANGUAGE: javascript
CODE:
var myPlot = document.getElementById('myDiv');

var xy = new Float32Array([1,2,3,4,5,6,0,4]);


data = [{ xy: xy,  type: 'pointcloud' }];

layout = { };


Plotly.newPlot('myDiv', data, layout);

LANGUAGE: javascript
CODE:
var myPlot = document.getElementById('myDiv');

var xy = new Float32Array([1,2,3,4,5,6,0,4]);

var x = [];
var y = [];
for (var i = 0; i < xy.length; i += 2) {
    x.push(xy[i]);
    y.push(xy[i + 1]);
}

var data = [{
    x: x,
    y: y,
    mode: 'markers',
    type: 'scattergl',
    marker: {
        size: 10,
        color: 'blue',
        opacity: 0.8
    }
}];
var layout = {
    title: 'Point Cloud',
    xaxis: { title: 'X Axis' },
    yaxis: { title: 'Y Axis' }
};

Plotly.newPlot('myDiv', data, layout);

----------------------------------------

TITLE: Categorizing Counties by Political Party
DESCRIPTION: Analyzes voter registration data to categorize counties as either Republican (red) or Democratic (blue) based on majority party registration.

LANGUAGE: python
CODE:
red_counties = []
blue_counties = []

for k, county in enumerate(county_names):
    for j in range(len(repub_democ_counties)):
        county_len = len(county)
        if repub_democ_counties[j:j+county_len] == string.upper(county):
            new_j = j
            while True:
                try:
                    int(repub_democ_counties[new_j])
                    break
                except ValueError:
                    new_j += 1

    repub_votes = ''
    while repub_democ_counties[new_j] != '<':
        if repub_democ_counties[new_j] != ',':
            repub_votes += repub_democ_counties[new_j]
        new_j += 1
    
    new_j += 11

    democ_votes = ''
    while repub_democ_counties[new_j] != '<':
        if repub_democ_counties[new_j] != ',':
            democ_votes += repub_democ_counties[new_j]
        new_j += 1

    try:
        repub_votes = int(repub_votes)
    except ValueError:
        repub_votes = 0
    try:
        democ_votes = int(democ_votes)
    except ValueError:
        democ_votes = 0

    if repub_votes >= democ_votes:
        red_counties.append(florida_data['features'][k])
    else:
        blue_counties.append(florida_data['features'][k])

----------------------------------------

TITLE: Creating Basic Plotly Heatmap for Candidate Rankings
DESCRIPTION: Generates a simple heatmap visualization of candidate rankings using Plotly. Includes data preparation and heatmap configuration.

LANGUAGE: Python
CODE:
import plotly.plotly as py  
from plotly.graph_objs import *

data14=Data([Heatmap(z=tab_vals14,
                   y=factors,
                   x=candidates,
                   colorscale=newyorktimes_cs,
                   showscale=False
                   )])

# Additional layout code omitted for brevity

py.iplot(fig,filename='Heatmap-republican-candidates-14')

----------------------------------------

TITLE: Version Check for Plotly Installation
DESCRIPTION: Simple code to import Plotly and check the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Positioning Legend in Plotly
DESCRIPTION: Demonstrates how to position the legend by setting x and y coordinates in the legend layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)

data = [trace0, trace1]
layout = go.Layout(
    legend=dict(x=-.1, y=1.2)
)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='position-legend')

----------------------------------------

TITLE: Creating Multiple Plotly Graphs with a For Loop in R
DESCRIPTION: Uses a for loop to generate multiple plotly graphs and display them in an RMarkdown document using tagList.

LANGUAGE: r
CODE:
library(plotly)

l <- htmltools::tagList()
for (i in 1:3) {
  l[[i]] <- plot_ly(x = rnorm(10))
}
l

----------------------------------------

TITLE: Creating Interactive Table with Plotly FigureWidget
DESCRIPTION: Creates an interactive table using Plotly's FigureWidget to display data for selected points in the scatter plot.

LANGUAGE: python
CODE:
t = go.FigureWidget([go.Table(
    header=dict(values=['ID','Classification','Driveline','Hybrid'],
                fill = dict(color='#C2D4FF'),
                align = ['left'] * 5),
    cells=dict(values=[df[col] for col in ['ID','Classification','Driveline','Hybrid']],
               fill = dict(color='#F5F8FF'),
               align = ['left'] * 5))])

----------------------------------------

TITLE: Implementing Adaptive Metropolis-Hastings Algorithm
DESCRIPTION: This code implements an adaptive version of the Metropolis-Hastings algorithm that automatically tunes the proposal distribution to achieve optimal acceptance rates.

LANGUAGE: python
CODE:
def metropolis_tuned(n_iterations, initial_values, f=calc_posterior, prop_var=1, 
                     tune_for=None, tune_interval=100):
    
    n_params = len(initial_values)
            
    # Initial proposal standard deviations
    prop_sd = [prop_var] * n_params
    
    # Initialize trace for parameters
    trace = np.empty((n_iterations+1, n_params))
    
    # Set initial values
    trace[0] = initial_values
    # Initialize acceptance counts
    accepted = [0]*n_params
    
    # Calculate joint posterior for initial values
    current_log_prob = f(*trace[0])
    
    if tune_for is None:
        tune_for = n_iterations/2

    for i in range(n_iterations):
    
        if not i%1000: print('Iteration %i' % i)
    
        # Grab current parameter values
        current_params = trace[i]
    
        for j in range(n_params):
    
            # Get current value for parameter j
            p = trace[i].copy()
    
            # Propose new value
            if j==2:
                # Ensure tau is positive
                theta = np.exp(rnorm(np.log(current_params[j]), prop_sd[j]))
            else:
                theta = rnorm(current_params[j], prop_sd[j])
            
            # Insert new value 
            p[j] = theta
    
            # Calculate log posterior with proposed value
            proposed_log_prob = f(*p)
    
            # Log-acceptance rate
            alpha = proposed_log_prob - current_log_prob
    
            # Sample a uniform random variate
            u = runif()
    
            # Test proposed value
            if np.log(u) < alpha:
                # Accept
                trace[i+1,j] = theta
                current_log_prob = proposed_log_prob
                accepted[j] += 1
            else:
                # Reject
                trace[i+1,j] = trace[i,j]
                
            # Tune every 100 iterations
            if (not (i+1) % tune_interval) and (i < tune_for):
        
                # Calculate aceptance rate
                acceptance_rate = (1.*accepted[j])/tune_interval
                if acceptance_rate<0.1:
                    prop_sd[j] *= 0.9
                if acceptance_rate<0.2:
                    prop_sd[j] *= 0.95
                if acceptance_rate>0.4:
                    prop_sd[j] *= 1.05
                elif acceptance_rate>0.6:
                    prop_sd[j] *= 1.1
        
                accepted[j] = 0
                
    return trace[tune_for:], accepted

----------------------------------------

TITLE: Creating a Time Series Scatter Plot of Earthquake Data with Plotly
DESCRIPTION: Generates a scatter plot showing earthquake magnitudes over time, with point sizes representing depth. This visualization allows for analysis of temporal patterns in earthquake occurrences.

LANGUAGE: python
CODE:
depth_time_plot = [Scatter({'y': df['mag'], 
               'x': df['time_plotly'],
               'name': 'Earthquake Depth',
               'mode': 'markers',
               'text': df['place'],
               'marker': {
                    'size': 20.0 * (df['depth'] + abs(df['depth'].min())) / (df['depth'].max() + abs(df['depth'].min()))
                }})]

data_depth = Data(depth_time_plot)

layout_depth = Layout(yaxis=YAxis(title='Magnitude of the Event'),xaxis=XAxis(title='Date of Event'),hovermode='closest')

fig_depth = Figure(data=data_depth, layout=layout_depth )

py.iplot(fig_depth)

----------------------------------------

TITLE: Loading and Displaying Wind Speed Data
DESCRIPTION: Imports wind speed data from a CSV file and creates a table visualization using Plotly.

LANGUAGE: python
CODE:
data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv')
df = data[0:10]

table = ff.create_table(df)
py.iplot(table, filename='wind-data-sample')

----------------------------------------

TITLE: De Casteljau Single Step Computation
DESCRIPTION: Function that performs one step of the de Casteljau algorithm for triangular Bézier patches

LANGUAGE: Python
CODE:
def deCasteljau_step(n, b, lam):
    i=0
    j=1
    for nr in range(1, n+1):
        for k in range(nr):
            b[i]=lam[0]*b[i]+lam[1]*b[j]+lam[2]*b[j+1]
            i+=1
            j+=1
        j+=1
    return b[:-(n+1)]

----------------------------------------

TITLE: Setting up Plotly Publisher in Python
DESCRIPTION: This code snippet sets up the Plotly publisher for the notebook. It installs the publisher package, imports necessary modules, and configures the publishing settings for the 3D clustering visualization.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
    
import publisher
publisher.publish(
    '3d-clusters.ipynb', 'python/3d-point-clustering/', 'Python 3D Clustering | plotly',
    'How to cluster points in 3d with alpha shapes in plotly and Python',
    title= '3D Point Clustering in Python | plotly',
    name = '3d Clustering',
    has_thumbnail='true', thumbnail='thumbnail/3d-clusters.jpg', 
    language='python', 
    display_as='3d_charts', order=14,
    ipynb= '~notebook_demo/74')

----------------------------------------

TITLE: Stacked Subplots with Range Slider
DESCRIPTION: Creates a complex visualization with multiple vertically stacked subplots sharing a common x-axis range slider. Each subplot has its own y-axis with custom styling and units.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Multiple trace and layout definitions omitted for brevity...

fig = go.Figure(data=data, layout=layout)
py.iplot(fig)

----------------------------------------

TITLE: Defining Custom Colorscale
DESCRIPTION: Sets up a custom colorscale for the surface visualization using RGB values.

LANGUAGE: python
CODE:
colorscale=[[0.0, 'rgb(20,29,67)'],
           [0.1, 'rgb(28,76,96)'],
           [0.2, 'rgb(16,125,121)'],
           [0.3, 'rgb(92,166,133)'],
           [0.4, 'rgb(182,202,175)'],
           [0.5, 'rgb(253,245,243)'],
           [0.6, 'rgb(230,183,162)'],
           [0.7, 'rgb(211,118,105)'],
           [0.8, 'rgb(174,63,95)'],
           [0.9, 'rgb(116,25,93)'],
           [1.0, 'rgb(51,13,53)']]

----------------------------------------

TITLE: Displaying Help for Plotly Figure Factory Module
DESCRIPTION: This code imports the Plotly Figure Factory module and displays its help information, showing available functions and submodules.

LANGUAGE: python
CODE:
import plotly.figure_factory
help(plotly.figure_factory)

----------------------------------------

TITLE: Creating Bar Chart of Complaints by Agency using Plotly in Python
DESCRIPTION: Queries the database for complaint counts by agency and creates an interactive bar chart using Plotly.

LANGUAGE: python
CODE:
df = pd.read_sql_query('SELECT Agency, COUNT(*) as `num_complaints`'
                       'FROM data '
                       'GROUP BY Agency '
                       'ORDER BY -num_complaints', disk_engine)

py.iplot([go.Bar(x=df.Agency, y=df.num_complaints)], filename='311/most common complaints by agency')

----------------------------------------

TITLE: Creating a Secret Graph with Plotly in R
DESCRIPTION: This snippet demonstrates how to create a secret graph using plotly and api_create(). Secret graphs can be viewed by anyone with the link but don't appear in public feeds or search results.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')
secret_graph = api_create(p, filename = "secret-graph-file", sharing = "secret")
secret_graph

----------------------------------------

TITLE: Uploading a Pandas DataFrame to Plotly
DESCRIPTION: This code demonstrates how to upload a Pandas DataFrame to Plotly and create a table preview using plotly.figure_factory.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.figure_factory as ff

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
df_head = df.head()
table = ff.create_table(df_head)
py.iplot(table, filename='dataframe_ex_preview')

----------------------------------------

TITLE: Creating a Scatter Plot of Earthquake Magnitude vs Depth with Plotly
DESCRIPTION: Generates an interactive scatter plot showing the relationship between earthquake magnitude and depth, with hover information for each data point.

LANGUAGE: python
CODE:
trace1 = Scatter(
    x=df['depth'],
    y=df['mag'],
    text=location,
    mode='markers',
    marker=Marker(
            color='rgba(31, 119, 180, 0.15)',  # add opacity for visibility
        )
)
layout = Layout(
    title='Earthquake Magnitude vs. Depth',
    xaxis=XAxis( type='log', title='depth' ),
    yaxis=YAxis( type='log', title='magnitude' ),
    hovermode="closest",
)
data = Data([trace1])
fig = Figure(data=data, layout=layout)
py.iplot(fig, filename='Earthquake_basic')

----------------------------------------

TITLE: Calculating Standard Deviation with Pandas in Python
DESCRIPTION: Shows how to calculate the standard deviation for each column in a Pandas DataFrame.

LANGUAGE: python
CODE:
df.std()

----------------------------------------

TITLE: Basic jQuery Knob Implementation
DESCRIPTION: Shows the minimal HTML and JavaScript required to initialize a basic knob control.

LANGUAGE: html
CODE:
<input type="text" value="75" class="dial">

LANGUAGE: javascript
CODE:
$(function() {
    $(".dial").knob();
});

----------------------------------------

TITLE: Creating Basic Scatter Plot
DESCRIPTION: Creates a basic scatter plot comparing GNP vs Life Expectancy using Plotly's graph objects.

LANGUAGE: python
CODE:
trace1 = go.Scatter(
    x=df['GNP'],
    y=df['LifeExpectancy'],
    text=country_names,
    mode='markers'
)
layout = go.Layout(
    title='Life expectancy vs GNP from MySQL world database',
    xaxis=dict( type='log', title='GNP' ),
    yaxis=dict( title='Life expectancy' )
)
data = [trace1]
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='world GNP vs life expectancy')

----------------------------------------

TITLE: Combining DOS and Band Structure Plots using Subplots
DESCRIPTION: Uses plotly's make_subplots to create a figure with both density of states and band structure side by side.

LANGUAGE: Python
CODE:
dosbandfig = tls.make_subplots(rows=1, cols=2, shared_yaxes=True)

for btrace in bandTraces:
    dosbandfig.append_trace(btrace, 1, 1)
for vline in vlines:
    dosbandfig.append_trace(vline, 1, 1)
dosbandfig.append_trace(trace_tdos, 1, 2)
dosbandfig.append_trace(trace_3s, 1, 2)
dosbandfig.append_trace(trace_3p, 1, 2)

dosbandfig["layout"].update(
    go.Layout(
        title="Bands diagram and density of states of Silicon",
        xaxis1=bandxaxis,
        yaxis1=bandyaxis,
        xaxis2=dosxaxis,
        annotations=go.Annotations(annotations)
    )
)

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for verifying the installed version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Loading and Displaying Dataset with Plotly Table
DESCRIPTION: Loads alcohol consumption dataset from CSV and creates an interactive table display using Plotly's FigureFactory.

LANGUAGE: python
CODE:
data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv')
df = data[0:10]

table = FF.create_table(df)
py.iplot(table, filename='alcohol-data-sample')

----------------------------------------

TITLE: Generating Surface Plot Data
DESCRIPTION: Calculate z-values for two different surface plots using trigonometric functions

LANGUAGE: python
CODE:
Z1 = np.cos(X)*np.sin(Y)
Z2 = 2 + np.cos(X)*np.sin(Y)

----------------------------------------

TITLE: Image Export Notice HTML Content
DESCRIPTION: HTML markup displaying a notice about moved documentation with a link to the new GitHub location for Plotly image export documentation.

LANGUAGE: html
CODE:
<div class="content-box">
<p>These docs have moved!</p><br>

<p><a href="https://github.com/plotly/plotly-nodejs#plotlygetimagefigure-options-callback">Learn about image exporting Node.js on our GitHub docs.</a></p><br>
</div><br>

----------------------------------------

TITLE: Checking Current Proxy Settings
DESCRIPTION: Commands to verify current HTTP and HTTPS proxy environment variable settings.

LANGUAGE: bash
CODE:
$ echo $HTTP_PROXY
$ echo $HTTPS_PROXY

----------------------------------------

TITLE: Initializing Required Libraries for Baltimore Data Analysis
DESCRIPTION: Imports the necessary Python libraries including Plotly, NumPy, and pandas for data analysis and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as pgo

import glob
import numpy as np
import pandas as pd

----------------------------------------

TITLE: Displaying Help Information in Python
DESCRIPTION: Shows how to access Python's built-in help functionality in a Jupyter notebook.

LANGUAGE: python
CODE:
help

----------------------------------------

TITLE: Creating Figure Object in Plotly
DESCRIPTION: Creates a Figure object combining the Data and Layout objects.

LANGUAGE: python
CODE:
fig = Figure(data=data, layout=layout)

----------------------------------------

TITLE: Analyzing Noise Complaints by Hour using SQLite and Plotly in Python
DESCRIPTION: Queries the database for noise complaints by hour and creates a bar chart visualization using Plotly.

LANGUAGE: python
CODE:
df = pd.read_sql_query('SELECT CreatedDate, '
                               'strftime(\'%H\', CreatedDate) as `hour`,  '
                               'count(*) as `Complaints per Hour`'
                       'FROM data '
                       'WHERE ComplaintType IN ("Noise", '
                                               '"Noise - Street/Sidewalk", '
                                               '"Noise - Commercial", '
                                               '"Noise - Vehicle", '
                                               '"Noise - Park", '
                                               '"Noise - House of Worship", '
                                               '"Noise - Helicopter", '
                                               '"Collection Truck Noise") '
                       'GROUP BY hour', disk_engine)

py.iplot({
    'data': [go.Bar(x=df['hour'], y=df['Complaints per Hour'])],
    'layout': go.Layout(xaxis={'title': 'Hour in Day'},
                     yaxis={'title': 'Number of Complaints'},
                     title='Number of Noise Complaints in NYC by Hour in Day'
                    )}, filename='311/noise complaints per hour')

----------------------------------------

TITLE: Displaying Legend for Single Trace Plot in Plotly
DESCRIPTION: Shows how to force the display of a legend in a plot with a single trace by setting showlegend=True in the layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

data = [trace0]
layout = go.Layout(showlegend=True)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='show-legend')

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Imports Plotly and checks the installed version number. 3D Mesh functionality requires version 1.10.0 or higher.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Handling Widget Events
DESCRIPTION: Set up event handlers for click, hover and zoom events on the graph

LANGUAGE: Python
CODE:
from IPython.display import display, clear_output
def message_handler(widget, msg):
    clear_output()
    print widget._graph_url
    display(msg)

g.on_click(message_handler)
g.on_hover(message_handler)
g.on_zoom(message_handler)

----------------------------------------

TITLE: Specifying Python package dependencies for Plotly
DESCRIPTION: This snippet lists the required Python packages and their versions for the Plotly project. It includes algoliasearch for search functionality and python-frontmatter for handling front matter in text files.

LANGUAGE: plaintext
CODE:
algoliasearch==1.20.0
python-frontmatter==0.4.5

----------------------------------------

TITLE: Computing Secondary Statistical Measures
DESCRIPTION: Calculate median, maximum and minimum values from the dataset using NumPy functions.

LANGUAGE: python
CODE:
median = np.median(data['alcohol'])
maximum = np.max(data['alcohol'])
minimum = np.min(data['alcohol'])

print("The median is %r") %(median)
print("The maximum is %r") %(maximum)
print("The minimum is %r") %(minimum)

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number to ensure the latest version is installed.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Importing Required Libraries for Peak Integration in Python
DESCRIPTION: Imports necessary libraries including Plotly, NumPy, Pandas, SciPy, and PeakUtils for data analysis and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

import numpy as np
import pandas as pd
import scipy
import peakutils

----------------------------------------

TITLE: Creating a Filled Line Chart with Plotly in R
DESCRIPTION: This snippet shows how to create a filled line chart using Plotly and PerformanceAnalytics package in R. It loads sample data, converts it to a data frame, and plots a time series line chart.

LANGUAGE: R
CODE:
# Filled line Chart
library(plotly)
library(PerformanceAnalytics)

#Load data
data(managers)

# Convert to data.frame
managers.df <- as.data.frame(managers)
managers.df$Dates <- index(managers)

# See first few rows
head(managers.df)

# Plot
p <- plot_ly(managers.df, x = ~Dates, y = ~HAM1, name = "Manager 1") %>% add_lines() 
  layout(title = "Time Series plot")
embed_notebook(p)

----------------------------------------

TITLE: Importing Required Libraries for Data Analysis in Python
DESCRIPTION: Imports Pandas, SQLAlchemy, datetime, IPython display, and Plotly libraries needed for the analysis.

LANGUAGE: python
CODE:
import pandas as pd
from sqlalchemy import create_engine # database connection
import datetime as dt
from IPython.display import display

import plotly.plotly as py # interactive graphing
import plotly.graph_objs as go

----------------------------------------

TITLE: Using a Dictionary for Colors in Plotly Gantt Chart
DESCRIPTION: Shows how to use a dictionary to specify custom colors for each resource in a Gantt chart. This allows for precise control over the color scheme.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

df = [dict(Task="Job A", Start='2016-01-01', Finish='2016-01-02', Resource='Apple'),
      dict(Task="Job B", Start='2016-01-02', Finish='2016-01-04', Resource='Grape'),
      dict(Task="Job C", Start='2016-01-02', Finish='2016-01-03', Resource='Banana')]

colors = dict(Apple = 'rgb(220, 0, 0)',
              Grape = 'rgb(170, 14, 200)',
              Banana = (1, 0.9, 0.16))

fig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True)
py.iplot(fig, filename='gantt-dictioanry-colors', world_readable=True)

----------------------------------------

TITLE: Creating Time Series Plot of Bike Rentals by Station
DESCRIPTION: Transforms Spark DataFrame data into daily counts and creates a time series plot for top rental stations.

LANGUAGE: python
CODE:
def transform_df(df):
    df['counts'] = 1
    df['Start Date'] = df['Start Date'].apply(pd.to_datetime)
    return df.set_index('Start Date').resample('D', how='sum')

pop_stations = []
for station in dep_stations['Start Station'][:3]:
    temp = transform_df(btd.where(btd['Start Station'] == station).select("Start Date").toPandas())
    pop_stations.append(
        go.Scatter(
        x=temp.index,
        y=temp.counts,
        name=station
        )
    )
    
data = pop_stations
py.iplot(data, filename="spark/over_time")

----------------------------------------

TITLE: Importing Libraries for Plotly and Scientific Computing in Python
DESCRIPTION: This snippet imports necessary libraries for Plotly visualization and scientific computing, including NumPy, Pandas, and SciPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Version Check for Plotly Installation
DESCRIPTION: Imports Plotly and checks the installed version. Animations require version 1.12.10 or higher.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Setting Up Sankey Canvas with Custom Domain
DESCRIPTION: Initializes the basic structure for a Sankey diagram with custom domain settings and value formatting.

LANGUAGE: python
CODE:
import plotly.plotly as py

data = dict(
    type='sankey',
    domain = dict(
      x =  [0,1],
      y =  [0,1]
    ),
    orientation = "h",
    valueformat = ".0f",
    valuesuffix = "TWh"   
  )

layout =  dict(
    title = "Energy forecast for 2050<br>Source: Department of Energy & Climate Change, Tom Counsell via <a href='https://bost.ocks.org/mike/sankey/'>Mike Bostock</a>",
    font = dict(
      size = 10
    )
)

----------------------------------------

TITLE: Importing Required Libraries for HDF5 and Plotly Analysis
DESCRIPTION: Imports necessary Python libraries for working with HDF5 files, data analysis, and creating Plotly visualizations.

LANGUAGE: python
CODE:
import pandas as pd
from IPython.display import display
import plotly.plotly as py # interactive graphing
from plotly.graph_objs import Bar, Scatter, Marker, Layout, Data, Figure, Heatmap, XAxis, YAxis
import plotly.tools as tls
import numpy as np

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple version check for Plotly library to ensure compatibility with polynomial fitting features (requires v1.9.2+)

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Basic Plotly Table
DESCRIPTION: Creates a simple table with two columns showing A and B scores. Demonstrates basic table creation using go.Table.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace = go.Table(
    header=dict(values=['A Scores', 'B Scores']),
    cells=dict(values=[[100, 90, 80, 90],
                       [95, 85, 75, 95]]))

data = [trace] 
py.iplot(data, filename = 'basic_table')

----------------------------------------

TITLE: Initializing Offline Mode
DESCRIPTION: Configure plotly for offline usage in Jupyter notebooks.

LANGUAGE: python
CODE:
init_notebook_mode(connected=True)

----------------------------------------

TITLE: Creating Probability Distribution Histogram
DESCRIPTION: Creates a histogram showing probability distribution of alcohol consumption data with custom bin settings and styling.

LANGUAGE: python
CODE:
x = data['alcohol'].values.tolist()

trace = go.Histogram(x=x, histnorm='probability',
                     xbins=dict(start=np.min(x),
                                size=0.25,
                                end=np.max(x)),
                     marker=dict(color='rgb(25, 25, 100)'))

layout = go.Layout(
    title="Histogram with Probability Distribution"
)

fig = go.Figure(data=go.Data([trace]), layout=layout)
py.iplot(fig, filename='histogram-prob-dist')

----------------------------------------

TITLE: Retrieving Plotly Figure Object in Python
DESCRIPTION: Gets a Plotly figure object from the server using the get_figure function.

LANGUAGE: python
CODE:
Quartz7 = py.get_figure('Quartz', '7')

----------------------------------------

TITLE: Interactive Facial Recognition Overlays in Plotly with Python
DESCRIPTION: This advanced example demonstrates how to create interactive facial recognition overlays on an image using Plotly and the dlib library in Python. It detects human and dog faces in an image and adds interactive overlay boxes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np
import dlib


#load dlib's pretrained face detector
cnn_human_detector = dlib.cnn_face_detection_model_v1('mmod_human_face_detector.dat')

#choose a file in your current directory or download https://raw.githubusercontent.com/michaelbabyn/plot_data/master/beethoven.jpg
f = 'beethoven.jpg'
img = dlib.load_rgb_image(f)

human_dets = cnn_human_detector(img,1)

#load dlib's pretrained dog-face detector
cnn_dog_detector = dlib.cnn_face_detection_model_v1('mmod_dog_hipsterizer.dat')

dog_dets = cnn_dog_detector(img, 1)

layout= go.Layout(
    xaxis = go.layout.XAxis(
        showticklabels = False,
        showgrid=False,
        zeroline=False,
        range = [0, img.shape[1]]
    ),
    yaxis = go.layout.YAxis(
        showticklabels = False,
        showgrid=False,
        zeroline=False,
        range = [0, img.shape[0]],
        scaleanchor = 'x'
        ),
    autosize=False,
    height=img.shape[0], 
    width=img.shape[1],
    margin = {'l': 0, 'r': 0, 't': 0, 'b': 0},
    images= [dict(
        source= "https://raw.githubusercontent.com/michaelbabyn/plot_data/master/beethoven.jpg",
        x=0,
        sizex=img.shape[1],
        y=img.shape[0],
        sizey=img.shape[0],
        xref="x",
        yref="y",
        opacity=1.0,
        layer="below",
        sizing="stretch"
     )]
)

humans=[
    go.Scatter(
        x=[d.rect.left(), d.rect.right(), d.rect.right(), d.rect.left(), d.rect.left()],
        y=[img.shape[0] - d.rect.top(),img.shape[0] - d.rect.top(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.top()],
        hoveron = 'fills',
        name = 'Human #{0}'.format(i+1),
        text = 'confidence: {:.2f}'.format(d.confidence),
        mode='lines',
        line = dict(width=4,color='red'),
        showlegend = False
        ) 
    for i,d in enumerate(human_dets)]

dogs = [
    go.Scatter(
        x=[d.rect.left(),d.rect.right(),d.rect.right(),d.rect.left(),d.rect.left()],
        y=[img.shape[0] - d.rect.top(),img.shape[0] - d.rect.top(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.bottom(),img.shape[0] - d.rect.top()],
        hoveron = 'fills',
        name = 'Dog #{0}'.format(i+1),
        text = 'confidence: {:.2f}'.format(d.confidence),
        mode='lines',
        line = dict(width=4,color='blue'),
        showlegend = False
        ) 
    for i,d in enumerate(dog_dets)]

py.iplot(dict(data=humans+dogs,layout=layout),filename='EXAMPLES/facial_rec')

----------------------------------------

TITLE: Publishing Plotly Documentation with Python
DESCRIPTION: This code snippet demonstrates how to publish Plotly documentation using a custom publisher package. It sets up custom CSS, installs the publisher package, and calls the publish function with specific parameters for the 3D Parametric Plots documentation.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
    
import publisher
publisher.publish(
    '3d-parametric.ipynb', 'python/3d-parametric-plots/', '3D Parametric Plots | plotly',
    'How to 3D Parameteric Plots in Python',
    title= '3D Parametric Plots in Python | plotly',
    name = 'Parametric Plots',
    has_thumbnail='true', thumbnail='thumbnail/parametric.jpg', 
    language='python',
    display_as='3d_charts', order=9,
    ipynb= '~notebook_demo/69')

----------------------------------------

TITLE: Creating a Basic Horizontal Bar Chart with Plotly
DESCRIPTION: This code creates a simple horizontal bar chart using Plotly, displaying data for different animals.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [go.Bar(
            x=[20, 14, 23],
            y=['giraffes', 'orangutans', 'monkeys'],
            orientation = 'h'
)]

py.iplot(data, filename='horizontal-bar')

----------------------------------------

TITLE: Creating Band Structure Plot
DESCRIPTION: Reads band structure from VASP output and creates scatter plots for each band, with customized axes and high symmetry k-points.

LANGUAGE: Python
CODE:
run = Vasprun("./Bandes/vasprun.xml", parse_projected_eigen = True)
bands = run.get_band_structure("./Bandes/KPOINTS", line_mode=True, efermi=dosrun.efermi)

kptslist = [k for k in range(len(bands.kpoints))]
bandTraces = list()
for band in range(bands.nb_bands):
    bandTraces.append(
        go.Scatter(
            x=kptslist,
            y=[e - bands.efermi for e in bands.bands[Spin.up][band]],
            mode="lines",
            line=go.Line(color="#666666"),
            showlegend=False
        )
    )

----------------------------------------

TITLE: Installing Plotly Development Version
DESCRIPTION: Installs the development version of the plotly R package from GitHub using devtools, which is required for the plotly_IMAGE() function.

LANGUAGE: r
CODE:
devtools::install_github("plotly/plotly.R")

----------------------------------------

TITLE: Setting Up Custom Fonts and Styles for Plotly Documentation in Python
DESCRIPTION: This code snippet sets up custom fonts and styles for the Plotly documentation. It uses IPython display functions to add custom CSS and font links to the notebook.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

----------------------------------------

TITLE: Creating a Table with Custom Colors
DESCRIPTION: Demonstrates how to customize the colors of a table created with Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')
df_sample = df[400:410]

colorscale = [[0, '#4d004c'],[.5, '#f2e5ff'],[1, '#ffffff']]

table = ff.create_table(df_sample, colorscale=colorscale)
py.iplot(table, filename='color_table')

----------------------------------------

TITLE: Loading and Preprocessing Baltimore Neighborhood Data
DESCRIPTION: Loads CSV files containing Baltimore neighborhood data and merges them into a single DataFrame, with preprocessing steps to clean the data.

LANGUAGE: python
CODE:
# Load and combine the datasets.
path = 'raw_data/csv'

allFiles = glob.glob(path + '/*.csv')
df = pd.DataFrame()

for i, filename in enumerate(allFiles):
    df_file = pd.read_csv(filename)
    if i == 0:
        df = df_file
    else:
        df = pd.merge(df, df_file)

df.index = df['CSA2010']
df.drop('CSA2010', inplace=True)

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This code snippet imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Implementing Zoom Event Handler for GraphWidget
DESCRIPTION: Defines a message handler function that responds to zoom events on the scatter plot and updates the bar chart accordingly.

LANGUAGE: python
CODE:
def message_handler(widget, msg):
    xrange = msg['x']
    yrange = msg['y']
    
    x_bool = map(lambda x: x>=xrange[0] and x <= xrange[1], df['cyl'])
    y_bool = map(lambda y: y>=yrange[0] and y <= yrange[1], df['wt'])
    bool_filter = [i and j for i,j in zip(x_bool,y_bool)]

    temp_df = df[bool_filter]
    temp_df = temp_df.sort('mpg', 0, ascending=False)
    g2.restyle({'x': [temp_df['model']], 'y': [temp_df['mpg']]})
    
g.on_zoom(message_handler)

----------------------------------------

TITLE: Setting Chart Studio Credentials in R
DESCRIPTION: Sets the required environment variables for Chart Studio authentication using Sys.setenv(). Requires a Chart Studio account and API key.

LANGUAGE: r
CODE:
Sys.setenv("plotly_username" = "YOUR USER NAME")
Sys.setenv("plotly_api_key" = "YOUR API KEY")

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple code to import Plotly and check its installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating and Exporting a Plotly Graph as JPG in JavaScript
DESCRIPTION: This snippet shows how to create a simple scatter plot using Plotly.js and export it as a JPG image. It demonstrates setting up the graph data, layout, and using the Plotly.toImage() function to generate the image URL.

LANGUAGE: javascript
CODE:
var img_jpg= d3.select('#jpg-export');

// Plotting the Graph

var trace={x:[3,9,8,10,4,6,5],y:[5,7,6,7,8,9,8],type:"scatter"};
var trace1={x:[3,4,1,6,8,9,5],y:[4,2,5,2,1,7,3],type:"scatter"};
var data = [trace,trace1];
var layout = {title : "Simple JavaScript Graph"};
Plotly.newPlot(
  'plotly_div',
   data,
   layout)

// static image in jpg format

.then(
    function(gd)
     {
      Plotly.toImage(gd,{height:300,width:300})
         .then(
             function(url)
         {
             img_jpg.attr("src", url);
         }
         )
    });

----------------------------------------

TITLE: Creating Horizontal Subplots with Table and Line Chart
DESCRIPTION: This code creates a table and a line chart using Plotly's Figure Factory, then combines them into horizontal subplots.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

table_data = [['Team', 'Wins', 'Losses', 'Ties'],
              ['Montréal<br>Canadiens', 18, 4, 0],
              ['Dallas Stars', 18, 5, 0],
              ['NY Rangers', 16, 5, 0], 
              ['Boston<br>Bruins', 13, 8, 0],
              ['Chicago<br>Blackhawks', 13, 8, 0],
              ['LA Kings', 13, 8, 0],
              ['Ottawa<br>Senators', 12, 5, 0]]

figure = ff.create_table(table_data, height_constant=60)

teams = ['Montréal Canadiens', 'Dallas Stars', 'NY Rangers',
         'Boston Bruins', 'Chicago Blackhawks', 'LA Kings', 'Ottawa Senators']
GFPG = [3.54, 3.48, 3.0, 3.27, 2.83, 2.45, 3.18]
GAPG = [2.17, 2.57, 2.0, 2.91, 2.57, 2.14, 2.77]

trace1 = go.Scatter(x=teams, y=GFPG,
                    marker=dict(color='#0099ff'),
                    name='Goals For<br>Per Game',
                    xaxis='x2', yaxis='y2')
trace2 = go.Scatter(x=teams, y=GAPG,
                    marker=dict(color='#404040'),
                    name='Goals Against<br>Per Game',
                    xaxis='x2', yaxis='y2')

figure.add_traces([trace1, trace2])

# initialize xaxis2 and yaxis2
figure['layout']['xaxis2'] = {}
figure['layout']['yaxis2'] = {}

# Edit layout for subplots
figure.layout.xaxis.update({'domain': [0, .5]})
figure.layout.xaxis2.update({'domain': [0.6, 1.]})

# The graph's yaxis MUST BE anchored to the graph's xaxis
figure.layout.yaxis2.update({'anchor': 'x2'})
figure.layout.yaxis2.update({'title': 'Goals'})

# Update the margins to add a title and see graph x-labels. 
figure.layout.margin.update({'t':50, 'b':100})
figure.layout.update({'title': '2016 Hockey Stats'})

py.iplot(figure, filename='subplot_table')

----------------------------------------

TITLE: Importing colorlover and IPython display modules
DESCRIPTION: Imports the colorlover library as cl and the HTML display module from IPython. These are used to generate and display color scales.

LANGUAGE: python
CODE:
import colorlover as cl
from IPython.display import HTML

----------------------------------------

TITLE: Loading Gene Expression Data with Pandas
DESCRIPTION: Loads gene expression data from a TSV file into a Pandas DataFrame, skipping annotation columns and displaying basic statistics about the dataset.

LANGUAGE: python
CODE:
import numpy as np
import pandas as pd

data = np.genfromtxt("http://figshare.com/download/file/2087487/1",
                     comments="#", usecols=range(2,73,1), names=True, dtype=object, delimiter="\t")
df = pd.DataFrame(data)
print "Number of genes: " + str(len(df))
df.head()

----------------------------------------

TITLE: Initializing Chart Studio Credentials in Python
DESCRIPTION: Sets up Chart Studio credentials for online plotting. Requires a Chart Studio account and API key.

LANGUAGE: python
CODE:
import chart_studio
chart_studio.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')

----------------------------------------

TITLE: Initializing SQLite Database Connection in Python
DESCRIPTION: Creates a SQLite database engine using SQLAlchemy.

LANGUAGE: python
CODE:
disk_engine = create_engine('sqlite:///311_8M.db') # Initializes database with filename 311_8M.db in current directory

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This code snippet imports the Plotly library and prints its version number. It's used to ensure the installed version supports sunburst charts (version 3.8+).

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating a Scatter Plot with Plotly in R
DESCRIPTION: This snippet demonstrates how to create a scatter plot using Plotly in R. It generates random data points with varying colors and sizes, then plots them using plot_ly function.

LANGUAGE: R
CODE:
# Scatter plot
library(plotly)

set.seed(123)

x <- rnorm(1000)
y <- rchisq(1000, df = 1, ncp = 0)
color <- sample(LETTERS[1:5], size = 1000, replace = T)
size <- sample(1:5, size = 1000, replace = T)

ds <- data.frame(x, y, color, size)

p <- plot_ly(ds, x = ~x, y = ~y, color = ~color, size = ~size) %>% 
  layout(title = "Scatter plot in")
embed_notebook(p)

----------------------------------------

TITLE: Creating an Interactive Plot with Sliders in Python
DESCRIPTION: Demonstrates how to create an interactive plot with sliders using Plotly, allowing users to adjust the frequency of a sine wave.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import numpy as np

data = [dict(
        visible = False,
        line=dict(color='#00CED1', width=6),
        name = '𝜈 = '+str(step),
        x = np.arange(0,10,0.01),
        y = np.sin(step*np.arange(0,10,0.01))) for step in np.arange(0,5,0.1)]
data[10]['visible'] = True

steps = []
for i in range(len(data)):
    step = dict(
        method = 'restyle',
        args = ['visible', [False] * len(data)],
    )
    step['args'][1][i] = True # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active = 10,
    currentvalue = {"prefix": "Frequency: "},
    pad = {"t": 50},
    steps = steps
)]

layout = dict(sliders=sliders)
fig = dict(data=data, layout=layout)

py.iplot(fig, filename='Sine Wave Slider')

----------------------------------------

TITLE: Creating a 3D Surface Plot with Plotly in Python
DESCRIPTION: Shows how to create a 3D surface plot using Plotly and NumPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

s = np.linspace(0, 2 * np.pi, 240)
t = np.linspace(0, np.pi, 240)
tGrid, sGrid = np.meshgrid(s, t)

r = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)
x = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)
y = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)
z = r * np.cos(tGrid)                  # z = r*cos(t)

surface = go.Surface(x=x, y=y, z=z)
data = [surface]

layout = go.Layout(
    title='Parametric Plot',
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        )
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='jupyter-parametric_plot')

----------------------------------------

TITLE: Color interpolation
DESCRIPTION: Demonstrates color interpolation by expanding a 9-color scale to 500 colors using colorlover's interp function.

LANGUAGE: python
CODE:
bupu = cl.scales['9']['seq']['BuPu']
HTML( cl.to_html(bupu) )

bupu500 = cl.interp( bupu, 500 ) # Map color scale to 500 bins
HTML( cl.to_html( bupu500 ) )

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Imports Plotly and checks the installed version number. Ternary plots require version 1.9.10 or higher.

LANGUAGE: python
CODE:
import plotly 
plotly.__version__

----------------------------------------

TITLE: Loading and Preparing Data in R
DESCRIPTION: Load tongue cancer data in R and create Surv object for survival analysis

LANGUAGE: R
CODE:
data(tongue)
attach(tongue)
tongue.surv <- Surv(time[type==1], delta[type==1])
tongue.surv

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for verifying the installed version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Parsing 3D Coordinate Points - Text Format
DESCRIPTION: A dataset containing 3D coordinates with each line representing a point in space. Each line contains three floating-point numbers separated by spaces, representing X, Y, and Z coordinates respectively.

LANGUAGE: text
CODE:
0.689484 -0.014459 0.428751
0.476483 0.162624 0.449488
0.586770 0.102149 0.769481
[...additional coordinates...]

----------------------------------------

TITLE: Displaying Exported Plotly Graph Image in HTML
DESCRIPTION: This HTML snippet shows how to include the exported Plotly graph image in a webpage. It uses an img tag with a specific id that matches the JavaScript code.

LANGUAGE: html
CODE:
<img id="jpg-export"></img>

----------------------------------------

TITLE: Importing Required Libraries for Plotly and ipywidgets
DESCRIPTION: Imports necessary Python libraries including datetime, numpy, pandas, plotly, and ipywidgets for creating the interactive application.

LANGUAGE: python
CODE:
import datetime
import numpy as np
import pandas as pd
import plotly.graph_objs as go
import plotly.plotly as py

from ipywidgets import widgets 
from IPython.display import display, clear_output, Image
from plotly.widgets import GraphWidget

----------------------------------------

TITLE: Dynamic Configuration of jQuery Knob
DESCRIPTION: Shows how to dynamically update knob configuration after initialization.

LANGUAGE: javascript
CODE:
$('.dial')
    .trigger(
        'configure',
        {
        "min":10,
        "max":40,
        "fgColor":"#FF0000",
        "skin":"tron",
        "cursor":true
        }
    );

----------------------------------------

TITLE: Creating a Public Graph with Plotly in R
DESCRIPTION: This snippet demonstrates how to create a public graph using plotly and api_create(). Public graphs are the default and can be viewed by anyone.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')
chart_link = api_create(p, filename = "public-graph")
chart_link

----------------------------------------

TITLE: Creating Population Pyramid using Histogram with Automatic Binning
DESCRIPTION: Demonstrates how to create a population pyramid using go.Histogram for automatic data binning. Uses random exponential data to simulate age distributions.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

layout = go.Layout(barmode='overlay',
                   yaxis=go.layout.YAxis(range=[0, 90], title='Age'),
                   xaxis=go.layout.XAxis(
                       tickvals=[-150, -100, -50, 0, 50, 100, 150],
                       ticktext=[150, 100, 50, 0, 50, 100, 150],
                       title='Number'))

data = [go.Histogram(
    y=np.random.exponential(50, 1000),
    orientation='h',
    name='Men',
    marker=dict(color='plum'),
    hoverinfo='skip'
),
    go.Histogram(
        y=np.random.exponential(55, 1000),
        orientation='h',
        name='Women',
        marker=dict(color='purple'),
        hoverinfo='skip',
        x=-1 * np.ones(1000),
        histfunc="sum"
    )]

py.iplot(dict(data=data, layout=layout), filename='EXAMPLES/histogram_pyramid')

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Imports necessary libraries for using Cufflinks with Plotly and Pandas

LANGUAGE: python
CODE:
import plotly.plotly as py
import cufflinks as cf
import pandas as pd
import numpy as np
print cf.__version__

----------------------------------------

TITLE: Importing Required Libraries for Statistical Analysis
DESCRIPTION: Import necessary Python libraries including Plotly, NumPy, Pandas and SciPy for statistical analysis and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Initializing HTML Structure for Plotly Financial Charts Documentation in R
DESCRIPTION: This HTML snippet sets up the basic structure for a documentation page about Plotly financial charts in R. It includes a header with a title, description, and placeholders for additional content and navigation.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">

			<div class="--body">
				<h1>Plotly R Library Financial Charts</h1>
				<p>{{page.description}}</consectetur>
				</p><br>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Importing Plotly and Checking Version
DESCRIPTION: Imports the Plotly library and prints the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Configuring Private Plots in Chart Studio
DESCRIPTION: Sets the default privacy settings for plots to private. Useful for Personal or Professional Chart Studio users.

LANGUAGE: python
CODE:
import chart_studio
chart_studio.tools.set_config_file(world_readable=False,
                             sharing='private')

----------------------------------------

TITLE: Configuring Plot Layout
DESCRIPTION: Sets up the plot layout including axis properties, background colors, and plot dimensions.

LANGUAGE: python
CODE:
axis = dict(
showbackground=True, 
backgroundcolor="rgb(230, 230,230)", 
showgrid=False,    
zeroline=False,  
showline=False)

ztickvals=list(range(-6,4))
layout = go.Layout(title="Projections of a surface onto coordinate planes" , 
                autosize=False,
                width=700,
                height=600,
                scene=dict(xaxis=dict(axis, range=[-3.5, 3.5]),
                            yaxis=dict(axis, range=[-3.5, 3.5]),
                            zaxis=dict(axis , tickvals=ztickvals),
                            aspectratio=dict(x=1,
                                             y=1,
                                             z=0.95)
                           )
                )

----------------------------------------

TITLE: Plotly Surface Visualization
DESCRIPTION: Function that creates a 3D surface plot of the Bézier patch using Plotly

LANGUAGE: Python
CODE:
def plot_Surface(n, b, m, plot_title): 
    x, y, z= set_data_for_Surface(n, b, m)
    trace = Surface(
        z=z, 
        x=x,  
        y=y,   
        colorscale=viridisCS
    )
    # Layout code omitted for brevity
    return fig

----------------------------------------

TITLE: Creating a Cumulative Histogram with Plotly in Python
DESCRIPTION: This code shows how to create a cumulative histogram using Plotly. It uses the 'cumulative' parameter to enable cumulative counting of the data.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

x = np.random.randn(500)
data = [go.Histogram(x=x,
                     cumulative=dict(enabled=True))]

py.iplot(data, filename='cumulative histogram')

----------------------------------------

TITLE: Setting HTTP and HTTPS Proxy Environment Variables
DESCRIPTION: These bash commands demonstrate how to set environment variables for HTTP and HTTPS proxies. This configuration allows the Plotly API to communicate through corporate proxies.

LANGUAGE: bash
CODE:
$ export HTTP_PROXY="http://10.10.1.10:3128"
$ export HTTPS_PROXY="http://10.10.1.10:1080"

----------------------------------------

TITLE: Importing Required Libraries for Bicycle Control Design
DESCRIPTION: Imports the necessary Python libraries including NumPy for numerical computing, Control for control systems design, and Plotly for interactive plotting.

LANGUAGE: python
CODE:
import numpy as np
import control as cn
import plotly.plotly as pl
import plotly.graph_objs as gr

----------------------------------------

TITLE: Importing Plotly and Checking Version in Python
DESCRIPTION: Imports the Plotly library and prints the installed version. This is useful for ensuring compatibility with the examples in the tutorial.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Making All Existing Plotly Graphs Private Using REST API
DESCRIPTION: This snippet demonstrates how to use Plotly's REST API to make all existing graphs private. It includes functions to retrieve all plots and update their privacy settings.

LANGUAGE: python
CODE:
import json
import requests
from requests.auth import HTTPBasicAuth

username = 'private_plotly' # Replace with YOUR USERNAME
api_key = 'k0yy0ztssk' # Replace with YOUR API KEY

auth = HTTPBasicAuth(username, api_key)
headers = {'Plotly-Client-Platform': 'python'}

page_size = 500

def get_pages(username, page_size):
    url = 'https://api.plot.ly/v2/folders/all?user='+username+'&filetype=plot&page_size='+str(page_size)
    response = requests.get(url, auth=auth, headers=headers)
    if response.status_code != 200:
        return
    page = json.loads(response.content.decode('utf-8'))
    yield page
    while True:
        resource = page['children']['next']
        if not resource:
            break
        response = requests.get(resource, auth=auth, headers=headers)
        if response.status_code != 200:
            break
        page = json.loads(response.content.decode('utf-8'))
        yield page

def make_all_plots_private(username, page_size=500):
    for page in get_pages(username, page_size):
        for x in range(0, len(page['children']['results'])):
            fid = page['children']['results'][x]['fid']
            requests.patch('https://api.plot.ly/v2/files/'+fid, {"world_readable": False}, auth=auth, headers=headers)
    print('ALL of your plots are now private - visit: https://plotly.com/organize/home to view your private plots!')

make_all_plots_private(username)

----------------------------------------

TITLE: Suppressing Browser Auto-open in Chart Studio
DESCRIPTION: Sets browser option to false to prevent automatic opening of Chart Studio URLs when publishing plots.

LANGUAGE: r
CODE:
options(browser = 'false')
api_create(p, filename = "r-docs-midwest-boxplots")

----------------------------------------

TITLE: Converting R Markdown to Markdown for Plotly Documentation
DESCRIPTION: Bash commands to convert single or multiple R Markdown files to Markdown format for Plotly documentation.

LANGUAGE: bash
CODE:
Rscript -e "rmarkdown::render('YOUR_FILE_.RMD', output_dir='OUTPUT_DIRECTORY')"

LANGUAGE: bash
CODE:
for i in R_FILE_PATH/*.Rmd; do Rscript -e "rmarkdown::render('$i', output_dir='OUTPUT_DIRECTORY')"; done

----------------------------------------

TITLE: Initializing Plotly Dashboard
DESCRIPTION: Sets up a new Plotly dashboard by importing required modules and creating a dashboard instance

LANGUAGE: python
CODE:
import plotly.dashboard_objs as dashboard
import IPython.display
from IPython.display import Image

my_dboard = dashboard.Dashboard()
my_dboard.get_preview()

----------------------------------------

TITLE: Importing Libraries for Data Analysis and Visualization
DESCRIPTION: Imports necessary Python libraries including Pandas for data manipulation, Plotly for interactive plotting, and IPython's inline plotting functionality.

LANGUAGE: python
CODE:
# Import needed libraries
%pylab inline
import pandas as pd
import plotly.plotly as py
from plotly.graph_objs import *
import plotly.tools as tls

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple script to import plotly and check the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Kaplan-Meier Estimation in Python
DESCRIPTION: Fit Kaplan-Meier estimator using lifelines library in Python

LANGUAGE: Python
CODE:
from lifelines import KaplanMeierFitter
kmf = KaplanMeierFitter()
f = tongue.type==1
T = tongue[f]['time']
C = tongue[f]['delta']
kmf.fit(T, event_observed=C)

----------------------------------------

TITLE: Defining Model Parameters for Bicycle Control System
DESCRIPTION: Sets up the numerical values for the constants used in the bicycle model, including gravity, mass, inertia, and geometry parameters.

LANGUAGE: python
CODE:
g = 9.81  # m/s^2
m = 87.0  # kg
I = 3.28  # kg m^2
h = 1.0  # m
a = 0.5  # m
b = 1.0  # m
v = 5.0  # m/s

----------------------------------------

TITLE: Importing Libraries for Plotly, NumPy, Pandas, and SciPy in Python
DESCRIPTION: This code snippet imports the necessary libraries for data manipulation and plotting, including Plotly, NumPy, Pandas, and SciPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Downloading Chart Studio Plots in R
DESCRIPTION: Download a Chart Studio plot into R using api_download_plot() with the plot_id and username as arguments

LANGUAGE: r
CODE:
library(plotly)
fig <- api_download_plot("559", "cpsievert")
fig

----------------------------------------

TITLE: Creating Basic Scatter Plot with Plotly
DESCRIPTION: Creates a basic scatter plot using random data generated with numpy. Demonstrates the fundamental approach to creating scatter plots with Plotly.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Create random data with numpy
import numpy as np

N = 1000
random_x = np.random.randn(N)
random_y = np.random.randn(N)

# Create a trace
trace = go.Scatter(
    x = random_x,
    y = random_y,
    mode = 'markers'
)

data = [trace]

# Plot and embed in ipython notebook!
py.iplot(data, filename='basic-scatter')

# or plot with: plot_url = py.plot(data, filename='basic-line')

----------------------------------------

TITLE: Publishing Dashboard to Plotly Cloud
DESCRIPTION: Uploads the configured dashboard to Plotly Cloud with specified sharing settings

LANGUAGE: python
CODE:
import plotly.plotly as py
py.dashboard_ops.upload(my_dboard, 'My First Dashboard with Python')

----------------------------------------

TITLE: Importing Required Plotly Modules
DESCRIPTION: Imports necessary Plotly modules and tools for streaming functionality including plotly.plotly, plotly.tools, graph objects and numpy.

LANGUAGE: python
CODE:
# (*) To communicate with Plotly's server, sign in with credentials file
import plotly.plotly as py  

# (*) Useful Python/Plotly tools
import plotly.tools as tls   

# (*) Graph objects
from plotly.graph_objs import *

import numpy as np  # (*) numpy for math functions and arrays

----------------------------------------

TITLE: Calculating Distance from Origin for Ring Cyclide Surface Color in Python
DESCRIPTION: This code calculates the distance from the origin for each point on the ring cyclide surface and sets it as the surface color. It demonstrates array manipulation and mathematical operations in Python.

LANGUAGE: python
CODE:
lx = len(data['z'])
ly = len(data['z'][0])

out = []

def dist_origin(x, y, z):
    return math.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)

for i in xrange(lx):
    temp = []
    for j in xrange(ly):
        temp.append(
            dist_origin(data['x'][i][j], data['y'][i][j], data['z'][i][j]))
    out.append(temp)

print(len(out))
print(len(out[0]))

data['surfacecolor'] = out     #sets surface-color to distance from the origin

----------------------------------------

TITLE: Combining Charts and Adding Dial Indicator for Gauge in Python with Plotly
DESCRIPTION: This code snippet combines the base chart and meter chart, adds a dial indicator using a path shape, and sets up the layout for the final gauge chart. It demonstrates how to create a complete semi-circular gauge chart with Plotly.

LANGUAGE: python
CODE:
layout = {
    'xaxis': {
        'showticklabels': False,
        'showgrid': False,
        'zeroline': False,
    },
    'yaxis': {
        'showticklabels': False,
        'showgrid': False,
        'zeroline': False,
    },
    'shapes': [
        {
            'type': 'path',
            'path': 'M 0.235 0.5 L 0.24 0.65 L 0.245 0.5 Z',
            'fillcolor': 'rgba(44, 160, 101, 0.5)',
            'line': {
                'width': 0.5
            },
            'xref': 'paper',
            'yref': 'paper'
        }
    ],
    'annotations': [
        {
            'xref': 'paper',
            'yref': 'paper',
            'x': 0.23,
            'y': 0.45,
            'text': '50',
            'showarrow': False
        }
    ]
}

# we don't want the boundary now
base_chart['marker']['line']['width'] = 0

fig = {"data": [base_chart, meter_chart],
       "layout": layout}
py.iplot(fig, filename='gauge-meter-chart')

----------------------------------------

TITLE: Combining Charts and Adding Dial Indicator for Gauge in Python with Plotly
DESCRIPTION: This code snippet combines the base chart and meter chart, adds a dial indicator using a path shape, and sets up the layout for the final gauge chart. It demonstrates how to create a complete semi-circular gauge chart with Plotly.

LANGUAGE: python
CODE:
layout = {
    'xaxis': {
        'showticklabels': False,
        'showgrid': False,
        'zeroline': False,
    },
    'yaxis': {
        'showticklabels': False,
        'showgrid': False,
        'zeroline': False,
    },
    'shapes': [
        {
            'type': 'path',
            'path': 'M 0.235 0.5 L 0.24 0.65 L 0.245 0.5 Z',
            'fillcolor': 'rgba(44, 160, 101, 0.5)',
            'line': {
                'width': 0.5
            },
            'xref': 'paper',
            'yref': 'paper'
        }
    ],
    'annotations': [
        {
            'xref': 'paper',
            'yref': 'paper',
            'x': 0.23,
            'y': 0.45,
            'text': '50',
            'showarrow': False
        }
    ]
}

# we don't want the boundary now
base_chart['marker']['line']['width'] = 0

fig = {"data": [base_chart, meter_chart],
       "layout": layout}
py.iplot(fig, filename='gauge-meter-chart')

----------------------------------------

TITLE: Rendering Financial Chart Examples for Plotly R Library
DESCRIPTION: This Liquid template snippet filters and displays R-specific financial chart examples from the site's posts. It uses predefined includes to render the documentation examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","financial" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Publishing Plotly Documentation with Custom Styling
DESCRIPTION: Sets up custom styling for documentation and publishes the notebook using the Plotly publisher package. Includes font loading and CSS customization for documentation display.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'latex-typesetting.ipynb', 'python/LaTeX/', 'LaTeX',
    'How to add LaTeX to python graphs.',
    title = 'Python LaTeX | Examples | Plotly',
    has_thumbnail='true', thumbnail='thumbnail/latex.jpg',
    language='python',
    display_as='style_opt', order=3, ipynb='~notebook_demo/268')

----------------------------------------

TITLE: Importing and Version Check for Plotly
DESCRIPTION: Basic code to import Plotly and check the installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Configuring Private Plot Settings
DESCRIPTION: Sets the default privacy settings for Plotly plots to private mode. This is useful for Personal or Professional users who want their plots to be private by default.

LANGUAGE: python
CODE:
import plotly 
plotly.tools.set_config_file(world_readable=False,
                             sharing='private')

----------------------------------------

TITLE: Defining Mesh3d Traces for Alpha Shape Visualization
DESCRIPTION: Creates Plotly traces for visualizing both the input point set and resulting alpha shape mesh

LANGUAGE: python
CODE:
points=go.Scatter3d(mode = 'markers',
                 name = '',
                 x =x,
                 y= y, 
                 z= z,
                 marker = dict( size=2, color='#458B00' )
)

simplexes = go.Mesh3d(alphahull =10.0,    
                   name = '',
                   x =x,
                   y= y, 
                   z= z,
                   color='90EE90',
                   opacity=0.15   
)

----------------------------------------

TITLE: Creating Restyle Button for Surface Plot
DESCRIPTION: Example showing how to create a button that switches between surface and heatmap plot types using the restyle method. Includes visualization of volcano dataset with customizable view options.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import json
import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano.csv')

data = [go.Surface(z=df.values.tolist(), colorscale='Viridis')]

layout = go.Layout(
    width=800,
    height=900,
    autosize=False,
    margin=dict(t=0, b=0, l=0, r=0),
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230, 230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        aspectratio = dict(x=1, y=1, z=0.7),
        aspectmode = 'manual'
    )
)

updatemenus=list([
    dict(
        buttons=list([   
            dict(
                args=['type', 'surface'],
                label='3D Surface',
                method='restyle'
            ),
            dict(
                args=['type', 'heatmap'],
                label='Heatmap',
                method='restyle'
            )             
        ]),
        direction = 'left',
        pad = {'r': 10, 't': 10},
        showactive = True,
        type = 'buttons',
        x = 0.1,
        xanchor = 'left',
        y = 1.1,
        yanchor = 'top' 
    ),
])

layout['updatemenus'] = updatemenus

fig = dict(data=data, layout=layout)
py.iplot(fig, filename='cmocean-picker-one-button')

----------------------------------------

TITLE: Setting Chart Studio Authentication Credentials in R
DESCRIPTION: Sets the plotly username and API key as environment variables required for Chart Studio authentication. These credentials can be found in Chart Studio settings.

LANGUAGE: r
CODE:
Sys.setenv("plotly_username"="your_plotly_username")
Sys.setenv("plotly_api_key"="your_api_key")

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number to ensure the correct version is installed.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Advanced Scatter Plot with Hovertemplate in Plotly Python
DESCRIPTION: This code creates an advanced scatter plot using job automation probability data. It demonstrates how to use hovertemplate to display detailed information including custom text, formatted values, and multiple data points in the hover text.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.io as pio

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/job-automation-probability.csv')

data = [
    dict(
        type = 'scatter',
        mode = 'markers',
        x = dff['prob'],
        y = dff['Average annual wage'],
        text = dff['short occupation'],
        name = education_level,
        marker = dict(size = dff['numbEmployed'], sizeref = 4000, sizemode = 'area'),
        hovertemplate = "<b>%{text}</b><br><br>" +
            "%{yaxis.title.text}: %{y:$,.0f}<br>" +
            "%{xaxis.title.text}: %{x:.0%}<br>" +
            "Number Employed: %{marker.size:,}" +
            "<extra></extra>"
    ) for dff, education_level in [(df[df.education == education_level], education_level) for education_level in df.education.unique()]
]

layout = go.Layout(
    title = "Higher Risk of Job Automation in Lower Paying Jobs",
    template = pio.templates['plotly'],
    legend = dict(orientation = 'h', y = -0.3),
    xaxis = dict(title = 'Automation Probability'),
    yaxis = dict(title = 'Income')
)

fig = dict(data=data,layout=layout)
py.iplot(fig, filename = "hovertemplate-advanced")

----------------------------------------

TITLE: Rendering Page Header with HTML and Liquid
DESCRIPTION: This snippet creates the header section of the documentation page, including the title, description, and placeholders for additional content using Liquid templating.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">

			<div class="--body">
				<h1>Plotly R Library 3D Charts</h1>
				<p>{{page.description}}</p><br>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Creating Plotly Presentation with Charts
DESCRIPTION: Shows how to embed Plotly charts into presentation slides using the Plotly() syntax in markdown. Includes multiple slides with different chart configurations.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import chart_studio.presentation_objs as pres

filename = 'pres-with-plotly-chart'
markdown_string = """
# 3D scatterplots
3D Scatterplot are just a collection of balls in a 3D cartesian space each of which have assigned properties like color, size, and more.

---
# simple 3d scatterplot

Plotly(https://plotly.com/~AdamKulidjian/3698)
---
# different colorscales

There are various colorscales and colorschemes to try in Plotly. Check out plotly.colors to find a list of valid and available colorscales.

Plotly(https://plotly.com/~AdamKulidjian/3582)
Plotly(https://plotly.com/~AdamKulidjian/3698)
"""

my_pres = pres.Presentation(markdown_string)
pres_url_1 = py.presentation_ops.upload(my_pres, filename)

----------------------------------------

TITLE: Importing and Displaying a Timeseries Dataset using Plotly in Python
DESCRIPTION: This code imports a timeseries dataset from a CSV file using Pandas, creates a table visualization using Plotly's FigureFactory, and displays it interactively.

LANGUAGE: python
CODE:
data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/timeseries.csv')

table = FF.create_table(data)
py.iplot(table, filename='timeseries-data-table')

----------------------------------------

TITLE: Printing Hello World in Python
DESCRIPTION: Basic example of printing 'hello world' in a Jupyter notebook code cell.

LANGUAGE: python
CODE:
print "hello world"  

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple version check of the installed Plotly package

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Initializing Plotly Stream Object
DESCRIPTION: Creates a Plotly Stream object using the previously defined stream ID token.

LANGUAGE: python
CODE:
s = py.Stream(stream_id=token)

----------------------------------------

TITLE: Updating Annotation References in Plotly.js
DESCRIPTION: This snippet demonstrates how to update the deprecated 'annotation.ref' attribute to use 'annotation.xref' and 'annotation.yref' instead in Plotly.js layouts.

LANGUAGE: javascript
CODE:
var layout = {
    title: "Try panning or zooming!",
    annotations: [{
        text: "Absolutely-positioned annotation",
        ref: "paper",
        x: 0.3,
        y: 0.3,
        showarrow: false
    }]
};

LANGUAGE: javascript
CODE:
var layout = {
    title: "Try panning or zooming!",
    annotations: [{
        text: "Absolutely-positioned annotation",
        xref: "paper",
        yref: "paper",
        x: 0.3,
        y: 0.3,
        showarrow: false
    }]
};

----------------------------------------

TITLE: Importing Required Libraries for Interactive Plotting
DESCRIPTION: Imports the necessary libraries from Plotly and ipywidgets to create an interactive plot.

LANGUAGE: python
CODE:
import plotly.graph_objs as go

import numpy as np
from ipywidgets import interact

----------------------------------------

TITLE: Creating Horizontal Table and Chart Layout
DESCRIPTION: Creates a complex layout with a table on the left and three scatter plots on the right showing Bitcoin mining statistics

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

table_trace1 = go.Table(
    domain=dict(x=[0, 0.5],
                y=[0, 1.0]),
    columnwidth = [30] + [33, 35, 33],
    columnorder=[0, 1, 2, 3, 4],
    header = dict(height = 50,
                  values = [['<b>Date</b>'],['<b>Number<br>transactions</b>'], 
                            ['<b>Output-volume(BTC)</b>'], ['<b>Market-Price</b>']], 
                  line = dict(color='rgb(50, 50, 50)'),
                  align = ['left'] * 5,
                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),
                  fill = dict(color='#d562be')),
    cells = dict(values = [df.iloc[j][1:5] for j in range(25)],
                 line = dict(color='#506784'),
                 align = ['left'] * 5,
                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),
                 format = [None] + [", .2f"] * 2 + [',.4f'],
                 prefix = [None] * 2 + ['$', u'\u20BF'],
                 suffix=[None] * 4,
                 height = 27,
                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))
)

----------------------------------------

TITLE: Creating Horizontal Table and Chart Layout
DESCRIPTION: Creates a complex layout with a table on the left and three scatter plots on the right showing Bitcoin mining statistics

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

table_trace1 = go.Table(
    domain=dict(x=[0, 0.5],
                y=[0, 1.0]),
    columnwidth = [30] + [33, 35, 33],
    columnorder=[0, 1, 2, 3, 4],
    header = dict(height = 50,
                  values = [['<b>Date</b>'],['<b>Number<br>transactions</b>'], 
                            ['<b>Output-volume(BTC)</b>'], ['<b>Market-Price</b>']], 
                  line = dict(color='rgb(50, 50, 50)'),
                  align = ['left'] * 5,
                  font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),
                  fill = dict(color='#d562be')),
    cells = dict(values = [df.iloc[j][1:5] for j in range(25)],
                 line = dict(color='#506784'),
                 align = ['left'] * 5,
                 font = dict(color=['rgb(40, 40, 40)'] * 5, size=12),
                 format = [None] + [", .2f"] * 2 + [',.4f'],
                 prefix = [None] * 2 + ['$', u'\u20BF'],
                 suffix=[None] * 4,
                 height = 27,
                 fill = dict(color=['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']))
)

----------------------------------------

TITLE: Creating and Displaying a Basic Plotly Graph in R
DESCRIPTION: Creates a basic scatter plot using plotly and the economics dataset, then displays it directly in the RMarkdown output.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(economics, x = ~date, y = ~unemploy / pop)
p

----------------------------------------

TITLE: Creating Layout Object with Title in Plotly
DESCRIPTION: Creates a Layout object with a custom title for the plot.

LANGUAGE: python
CODE:
layout = Layout(title='Fig 1: Number of university graduates [in millions]')

----------------------------------------

TITLE: Importing Required Libraries for Plotly Analysis
DESCRIPTION: Imports necessary Python libraries including Plotly, NumPy, Pandas, SciPy and PeakUtils for data analysis and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.tools as tools
import plotly.figure_factory as ff

import numpy as np
import pandas as pd
import scipy
import peakutils

----------------------------------------

TITLE: Initializing Required Libraries for 3D Plotting
DESCRIPTION: Import necessary Plotly and NumPy libraries for creating 3D surface plots

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.tools as tls
import numpy as np

----------------------------------------

TITLE: Calculating and Plotting Numerical Derivative of Sine Function
DESCRIPTION: Computes the numerical derivative of sin(x) using numpy's diff function and creates a Plotly visualization comparing the original function with its derivative.

LANGUAGE: python
CODE:
x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

dy = np.zeros(y.shape,np.float)
dy[0:-1] = np.diff(y)/np.diff(x)
dy[-1] = (y[-1] - y[-2])/(x[-1] - x[-2])

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='lines',
    name='sin(x)'
)

trace2 = go.Scatter(
    x=x,
    y=dy,
    mode='lines',
    name='numerical derivative of sin(x)'
)

trace_data = [trace1, trace2]
py.iplot(trace_data, filename='numerical-differentiation')

----------------------------------------

TITLE: Creating an Interactive Table with Plotly in Python
DESCRIPTION: Imports data from a CSV file and creates an interactive table using Plotly.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")

table = ff.create_table(df)
py.iplot(table, filename='jupyter-table1')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple version check for the installed Plotly package.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Displaying Multiple Plotly Graphs Using tagList in R
DESCRIPTION: Uses the tagList function from htmltools to display multiple plotly graphs in a single RMarkdown code chunk.

LANGUAGE: r
CODE:
htmltools::tagList(list(p, p))

----------------------------------------

TITLE: Loading and Displaying Milk Production Data
DESCRIPTION: Imports milk production time series data from a CSV file and creates a table visualization using Plotly's Figure Factory.

LANGUAGE: python
CODE:
milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
time_series = milk_data['Monthly milk production (pounds per cow)']
time_series = time_series.tolist()

df = milk_data[0:15]

table = FF.create_table(df)
py.iplot(table, filename='milk-production-dataframe')

----------------------------------------

TITLE: Creating Colorscale for Scatter Plots in Plotly
DESCRIPTION: This snippet demonstrates how to create a colorscale for scatter plots using Plotly. It uses the 'Viridis' colorscale and sets up a colorbar for the plot.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

data = [
    go.Scatter(
        y=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        marker=dict(
            size=16,
            cmax=39,
            cmin=0,
            color=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
            colorbar=dict(
                title='Colorbar'
            ),
            colorscale='Viridis'
        ),
        mode='markers')
]

fig = go.Figure(data=data)
py.iplot(fig)

----------------------------------------

TITLE: Displaying Interactive Report in Jupyter Notebook
DESCRIPTION: Displays the interactive version of the report containing embedded Plotly graphs in the notebook.

LANGUAGE: Python
CODE:
display(HTML(interactive_report))

----------------------------------------

TITLE: Creating Grouped Legend in Plotly
DESCRIPTION: Demonstrates how to create a grouped legend by using the 'legendgroup' parameter for traces.

LANGUAGE: python
CODE:
import plotly.plotly as py

data = [
    {
        'x': [1, 2, 3],
        'y': [2, 1, 3],
        'legendgroup': 'group', # this can be any string, not just "group"
        'name': 'first legend group',
        'mode': 'markers',
        'marker': {
            'color': 'rgb(164, 194, 244)'
        }
    },
    {
        'x': [1, 2, 3],
        'y': [2, 2, 2],
        'legendgroup': 'group',
        'name': 'first legend group - average',
        'mode': 'lines',
        'line': {
            'color': 'rgb(164, 194, 244)'
        }
    },   
    {
        'x': [1, 2, 3],
        'y': [4, 9, 2],
        'legendgroup': 'group2', 
        'name': 'second legend group',
        'mode': 'markers',
        'marker': {
            'color': 'rgb(142, 124, 195)'
        }
    },        
    {
        'x': [1, 2, 3],
        'y': [5, 5, 5],
        'legendgroup': 'group2',
        'name': 'second legend group - average',
        'mode': 'lines',
        'line': {
            'color': 'rgb(142, 124, 195)'
        }
    }
]

py.iplot(data, filename='basic-legend-grouping')

----------------------------------------

TITLE: Creating a New Example Post in HTML and JavaScript
DESCRIPTION: Template for creating a new example post in the Plotly JavaScript documentation. It includes YAML front matter and a basic JavaScript example for creating a bar chart.

LANGUAGE: html
CODE:
---
description: How to make a D3.js-based bar chart in javascript. Seven examples of
grouped, stacked, overlaid, and colored bar charts.
display_as: basic
language: plotly_js
layout: base
name: Bar Charts
order: 3
page_type: example_index
permalink: javascript/bar-charts/
redirect_from: javascript-graphing-library/bar-charts/
thumbnail: thumbnail/bar.jpg **MORE INFO ON ADDING THUMBNAILS BELOW
markdown_content: |
  indented content in markdown format which will prefix an example ****SEE BELOW
---
var data = [
  {
    x: ['giraffes', 'orangutans', 'monkeys'],
    y: [20, 14, 23],
    type: 'bar'
  }The
];

Plotly.newPlot('myDiv', data);

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple version check to ensure Plotly is at least version 2.0.6+ which is required for parallel coordinates plots.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Initializing Plotly and Checking Version
DESCRIPTION: Import plotly modules and verify Orca version compatibility. Required version is 3.2.0+ for static image export API.

LANGUAGE: python
CODE:
import plotly
import plotly.graph_objs as go
from plotly.offline import iplot, init_notebook_mode

plotly.__version__

----------------------------------------

TITLE: Scaling a Dataset and Visualizing Results with Plotly in Python
DESCRIPTION: This code demonstrates how to scale a dataset by multiplying each value by a constant. It creates two scatter plots to compare the original and scaled data using Plotly.

LANGUAGE: python
CODE:
x = data['Date']
y = data['A']
y2 = [2.*k for k in y]

trace1 = go.Scatter(
    x=x,
    y=y,
    mode='markers',
    name='Data',
    marker=dict(
        size=12
    )
)

trace2 = go.Scatter(
    x=x,
    y=y2,
    mode='markers',
    name='Scaled by 2',
    marker=dict(
        size=12,
        symbol='x'
    )
)

trace_data = [trace1, trace2]
py.iplot(trace_data, filename='scale-a-dataset')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number to ensure compatibility with violin plot functionality.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Setting Up Custom Fonts and Styles for Jupyter Notebook in Python
DESCRIPTION: This code snippet demonstrates how to set up custom fonts and styles for a Jupyter notebook using IPython's HTML display functionality. It also installs and uses a custom publisher package for Plotly documentation.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
    
import publisher
publisher.publish(
    'figurewidget-click-event.ipynb', 'python/click-events/', 'Click Events with go.FigureWidget',
    'Click Events With FigureWidget',
    title = 'Click Events',
    name = 'Click Events',
    has_thumbnail='true', thumbnail='thumbnail/figurewidget-click-events.gif', 
    language='python', page_type='example_index', 
    display_as='chart_events', order=24,
    ipynb= '~notebook_demo/240')

----------------------------------------

TITLE: Creating and Modifying a DataFrame in Python
DESCRIPTION: This code creates a simple DataFrame, displays it as a table using Plotly, then modifies specific entries using arithmetic operations. It demonstrates how to change values in a DataFrame column.

LANGUAGE: python
CODE:
dataframe = pd.DataFrame([[1, 2],
                          [3, 4],
                          [5, 6],
                          [7, 8]],
                         columns=['A', 'B'])

table = FF.create_table(dataframe)
py.iplot(table, filename='math-operations-dataframe')

dataframe['A'][0] = 120
dataframe['B'][3] = -2*dataframe['B'][3]

table = FF.create_table(dataframe)
py.iplot(table, filename='math-operations-dataframe-changed')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for ensuring you're using the latest version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Configuring jQuery Knob with JavaScript
DESCRIPTION: Shows how to configure knob options using JavaScript initialization.

LANGUAGE: javascript
CODE:
$(".dial").knob({
    'min':-50
    ,'max':50
});

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports Plotly and checks the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number to ensure compatibility.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Mobius Band Visualization
DESCRIPTION: Creates a 3D visualization of a Mobius band using triangulated surfaces. Implements parametric equations to generate the Mobius strip geometry with custom coloring.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as FF
import plotly.graph_objs as go

import numpy as np
from scipy.spatial import Delaunay

u = np.linspace(0, 2*np.pi, 24)
v = np.linspace(-1, 1, 8)
u,v = np.meshgrid(u,v)
u = u.flatten()
v = v.flatten()

tp = 1 + 0.5*v*np.cos(u/2.)
x = tp*np.cos(u)
y = tp*np.sin(u)
z = 0.5*v*np.sin(u/2.)

points2D = np.vstack([u,v]).T
tri = Delaunay(points2D)
simplices = tri.simplices

fig1 = FF.create_trisurf(x=x, y=y, z=z,
                         colormap="Portland",
                         simplices=simplices,
                         title="Mobius Band")
py.iplot(fig1, filename="Mobius-Band")

----------------------------------------

TITLE: Importing and Displaying Milk Production Data with Plotly in Python
DESCRIPTION: Loads milk production data from a CSV file, converts it to a NumPy array, and creates a table visualization using Plotly's figure factory.

LANGUAGE: python
CODE:
milk_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/monthly-milk-production-pounds.csv')
time_series = milk_data['Monthly milk production (pounds per cow)']
time_series = np.asarray(time_series)

df = milk_data[0:15]

table = ff.create_table(df)
py.iplot(table, filename='milk-production-dataframe')

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple code to import plotly and check the installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: jQuery Knob with Event Hooks
DESCRIPTION: Example of implementing the release event hook for custom functionality.

LANGUAGE: javascript
CODE:
$(".dial").knob({
    'release' : function (v) { /*make something*/ }
});

----------------------------------------

TITLE: Publishing Plotly Documentation
DESCRIPTION: Sets up documentation styling and publishes the notebook as a tutorial using Plotly's publisher package.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'radar.ipynb', 'python/radar-chart/', 'Radar Charts',
    'How to make radar charts in Python with Plotly.',
    title = 'Radar Charts | Plotly',
    has_thumbnail='true', thumbnail='thumbnail/radar.gif', 
    language='python', 
    display_as='scientific',
    order=30, 
    ipynb='~notebook_demo/202')

----------------------------------------

TITLE: Adding Play/Pause Controls to an Animation
DESCRIPTION: Shows how to add play and pause buttons to control an animated plot.

LANGUAGE: python
CODE:
from plotly.offline import init_notebook_mode, iplot
from IPython.display import display, HTML

init_notebook_mode(connected=True)

figure = {'data': [{'x': [0, 1], 'y': [0, 1]}],
          'layout': {'xaxis': {'range': [0, 5], 'autorange': False},
                     'yaxis': {'range': [0, 5], 'autorange': False},
                     'title': 'Start Title',
                     'updatemenus': [{'type': 'buttons',
                                      'buttons': [{'label': 'Play',
                                                   'method': 'animate',
                                                   'args': [None]}]}]
                    },
          'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},
                     {'data': [{'x': [1, 4], 'y': [1, 4]}]},
                     {'data': [{'x': [3, 4], 'y': [3, 4]}],
                      'layout': {'title': 'End Title'}}]}

iplot(figure)

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Code to check the installed version of Plotly package. Important for ensuring compatibility with streaming features.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Hiding Legend in Plotly Multi-Trace Plot
DESCRIPTION: Demonstrates how to hide the legend in a plot with multiple traces by setting showlegend=False in the layout.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace0 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[1, 2, 3, 4, 5],
)

trace1 = go.Scatter(
    x=[1, 2, 3, 4, 5],
    y=[5, 4, 3, 2, 1],
)

data = [trace0, trace1]
layout = go.Layout(showlegend=False)
fig = go.Figure(data=data, layout=layout)

py.iplot(fig, filename='hide-legend')

----------------------------------------

TITLE: Creating Welcome Header in HTML
DESCRIPTION: Generates the welcome header section of the documentation page, including the title and description. It also includes placeholders for additional layout components.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">
	
			<div class="--body">
				<h1>Plotly R Open Source Graphing Library Artificial Intelligence and Machine Learning Charts</h1>
				<p>{{page.description}}</p><br>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Initializing Plotly and igraph
DESCRIPTION: Import required libraries and verify igraph version

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import igraph
from igraph import *
igraph.__version__

----------------------------------------

TITLE: Including Holder.js Basic Setup
DESCRIPTION: Basic HTML setup to include the Holder.js library and create a simple placeholder image.

LANGUAGE: html
CODE:
<script src="holder.js"></script>
<img src="holder.js/200x300">

----------------------------------------

TITLE: Loading and Displaying Stock Data
DESCRIPTION: Imports stock market data from a CSV file and creates a table visualization using Plotly's figure factory.

LANGUAGE: python
CODE:
stock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')
df = stock_data[0:15]

table = ff.create_table(df)
py.iplot(table, filename='stockdata-peak-fitting')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This code snippet imports the Plotly library and prints its version number. It's useful for ensuring you're using the latest version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Changing Font Size in a Plotly Table
DESCRIPTION: Demonstrates how to adjust the font size in a table created with Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['Country', 'Year', 'Population'],
               ['United States', 2000, 282200000],
               ['Canada', 2000, 27790000],
               ['United States', 2005, 295500000],
               ['Canada', 2005, 32310000],
               ['United States', 2010, 309000000],
               ['Canada', 2010, 34000000]]

table = ff.create_table(data_matrix, index=True)

# Make text size larger
for i in range(len(table.layout.annotations)):
    table.layout.annotations[i].font.size = 20

py.iplot(table, filename='index_table')

----------------------------------------

TITLE: Publishing Plotly Documentation
DESCRIPTION: Sets up custom styling for documentation and publishes the notebook as a Plotly tutorial page using the publisher package.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'ternary.ipynb', 'python/ternary-plots/', 'Python Ternary Plots | plotly',
    'How to make Ternary plots in Python with Plotly.',
    name = 'Ternary Plots',
    thumbnail='thumbnail/ternary.jpg', language='python',
    page_type='example_index', has_thumbnail='true', display_as='scientific', order=9,
    ipynb= '~notebook_demo/39')

----------------------------------------

TITLE: Conducting Anderson-Darling Test for Normality in Python
DESCRIPTION: Perform the Anderson-Darling test for normality using SciPy and visualize results with a Plotly table.

LANGUAGE: python
CODE:
from scipy.stats import anderson

result = anderson(gauss_data)
stat = round(result.statistic, 4)

p = 0
result_mat = []
for i in range(len(result.critical_values)):
    sl, cv = result.significance_level[i], result.critical_values[i]
    if result.statistic < result.critical_values[i]:
        msg = 'Sample looks Gaussian (fail to reject H0)'
    else:
        msg = 'Sample does not look Gaussian (reject H0)'
    result_mat.append([len(gauss_data), stat, sl, cv, msg])

trace = go.Table(
    header=dict(values=['<b>Sample Size</b>', '<b>Statistic</b>', '<b>Significance Level</b>', '<b>Critical Value</b>', '<b>Comment</b>'],
                line = dict(width=0),
                fill = dict(color='rgba(42,63,95,0.8)'),
                align = 'center',
                font = dict(
                    color = '#ffffff',
                    size = 12
                )),
    cells=dict(values=np.array(result_mat).T,
               line = dict(width=0),
               fill = dict(color=[['#EBF0F8', '#ffffff', '#EBF0F8', '#ffffff', '#EBF0F8']]),
               align = 'center',
               height = 40),
    columnwidth=[0.3, 0.25, 0.3, 0.25, 0.5])
layout = dict(
    height=300,
    margin=dict(
        l=5,
        r=5,
        t=30,
        b=0
    )
)
data = [trace]
andar_table = dict(data=data, layout=layout)

py.iplot(andar_table, filename='anderson-darling-table')

----------------------------------------

TITLE: Basic Continuous Error Bars with Multiple Lines
DESCRIPTION: Creates a plot with three lines (Fair, Premium, Ideal) and their corresponding shaded error regions using Plotly's Scatter plots with fill between lines.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x_rev = x[::-1]

# Line 1
y1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
y1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
y1_lower = y1_lower[::-1]

# Line 2
y2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]
y2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]
y2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]
y2_lower = y2_lower[::-1]

# Line 3
y3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]
y3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]
y3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]
y3_lower = y3_lower[::-1]

trace1 = go.Scatter(
    x=x+x_rev,
    y=y1_upper+y1_lower,
    fill='tozerox',
    fillcolor='rgba(0,100,80,0.2)',
    line=dict(color='rgba(255,255,255,0)'),
    showlegend=False,
    name='Fair',
)
trace2 = go.Scatter(
    x=x+x_rev,
    y=y2_upper+y2_lower,
    fill='tozerox',
    fillcolor='rgba(0,176,246,0.2)',
    line=dict(color='rgba(255,255,255,0)'),
    name='Premium',
    showlegend=False,
)
trace3 = go.Scatter(
    x=x+x_rev,
    y=y3_upper+y3_lower,
    fill='tozerox',
    fillcolor='rgba(231,107,243,0.2)',
    line=dict(color='rgba(255,255,255,0)'),
    showlegend=False,
    name='Ideal',
)
trace4 = go.Scatter(
    x=x,
    y=y1,
    line=dict(color='rgb(0,100,80)'),
    mode='lines',
    name='Fair',
)
trace5 = go.Scatter(
    x=x,
    y=y2,
    line=dict(color='rgb(0,176,246)'),
    mode='lines',
    name='Premium',
)
trace6 = go.Scatter(
    x=x,
    y=y3,
    line=dict(color='rgb(231,107,243)'),
    mode='lines',
    name='Ideal',
)

data = [trace1, trace2, trace3, trace4, trace5, trace6]

layout = go.Layout(
    paper_bgcolor='rgb(255,255,255)',
    plot_bgcolor='rgb(229,229,229)',
    xaxis=dict(
        gridcolor='rgb(255,255,255)',
        range=[1,10],
        showgrid=True,
        showline=False,
        showticklabels=True,
        tickcolor='rgb(127,127,127)',
        ticks='outside',
        zeroline=False
    ),
    yaxis=dict(
        gridcolor='rgb(255,255,255)',
        showgrid=True,
        showline=False,
        showticklabels=True,
        tickcolor='rgb(127,127,127)',
        ticks='outside',
        zeroline=False
    ),
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename= 'shaded_lines')

----------------------------------------

TITLE: Defining Page Metadata in YAML
DESCRIPTION: Sets up the metadata for the documentation page, including description, display category, language, layout, and other properties.

LANGUAGE: yaml
CODE:
---
description: Plotly's R graphing library makes interactive, publication-quality graphs online. Examples of how to make charts related to artificial intelligence and machine learning.
display_as: ai_ml
language: r
layout: langindex
name: AI and ML Charts
page_type: example_index
permalink: r/ai-ml/
thumbnail: thumbnail/mixed.jpg
---

----------------------------------------

TITLE: Running Jekyll Documentation Server
DESCRIPTION: Command to run the Jekyll server for viewing Bootstrap documentation locally.

LANGUAGE: bash
CODE:
jekyll serve

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's used to ensure the installed version supports 2D histograms.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Filtering and Sorting R Plotly Documentation Examples
DESCRIPTION: Liquid template code for filtering and sorting R Plotly documentation examples. It selects posts with specific attributes and includes a template for displaying documentation examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","multiple_axes" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Sets up required dependencies including plotly, numpy, requests, and googlemaps. Requires Google Maps API key configuration.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *

import numpy as np
import requests
import copy
import googlemaps

# add your google maps api key here
my_google_maps_api_key = 'YOUR_API_KEY'

----------------------------------------

TITLE: Generating Documentation Examples with Liquid
DESCRIPTION: Uses Liquid templating to filter and sort relevant documentation posts for R maps, then includes a template to display these examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","maps" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Importing Plotly and Checking Version in Python
DESCRIPTION: Imports the Plotly package and prints the installed version number.

LANGUAGE: python
CODE:
import plotly

plotly.__version__

----------------------------------------

TITLE: Importing Required Libraries for Plotly Offline Mode
DESCRIPTION: Imports necessary modules from Plotly and other libraries for offline plotting. This setup allows for local rendering of plots without requiring an internet connection.

LANGUAGE: python
CODE:
from plotly.offline import iplot, init_notebook_mode
import plotly.graph_objs as go

import pandas as pd
import numpy as np
import ipywidgets as widgets

----------------------------------------

TITLE: Embedding Plotly Graph in Python
DESCRIPTION: Uses Plotly tools to embed an existing graph from plotly.com.

LANGUAGE: python
CODE:
import plotly.tools as tls
tls.embed('https://plotly.com/~chris/7365')

----------------------------------------

TITLE: Configuring Redshift Connection
DESCRIPTION: Set up connection parameters for Amazon Redshift using environment variables to store sensitive credentials.

LANGUAGE: python
CODE:
redshift_endpoint = os.getenv("REDSHIFT_ENDPOINT")
redshift_user = os.getenv("REDSHIFT_USER")
redshift_pass = os.getenv("REDSHIFT_PASS")
port = 5439
dbname = 'dev'

----------------------------------------

TITLE: Structuring HTML Content for R Plotly Documentation Page
DESCRIPTION: HTML structure for the R Plotly documentation page. It includes a welcome header with title and description, and placeholders for additional content such as language selection and dashboard plug.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">

			<div class="--body">
				<h1>Plotly R Library Subplots and Multiple Axes</h1>
				<p>{{page.description}}</p><br>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Creating a Simple Table with Plotly Figure Factory
DESCRIPTION: Creates a basic table using Plotly's Figure Factory with population data for the United States and Canada.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['Country', 'Year', 'Population'],
               ['United States', 2000, 282200000],
               ['Canada', 2000, 27790000],
               ['United States', 2005, 295500000],
               ['Canada', 2005, 32310000],
               ['United States', 2010, 309000000],
               ['Canada', 2010, 34000000]]

table = ff.create_table(data_matrix)
py.iplot(table, filename='simple_table')

----------------------------------------

TITLE: Creating a Simple Table with Plotly Figure Factory
DESCRIPTION: Creates a basic table using Plotly's Figure Factory with population data for the United States and Canada.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

data_matrix = [['Country', 'Year', 'Population'],
               ['United States', 2000, 282200000],
               ['Canada', 2000, 27790000],
               ['United States', 2005, 295500000],
               ['Canada', 2005, 32310000],
               ['United States', 2010, 309000000],
               ['Canada', 2010, 34000000]]

table = ff.create_table(data_matrix)
py.iplot(table, filename='simple_table')

----------------------------------------

TITLE: Embedding Plotly Graph in Jupyter Notebook
DESCRIPTION: Embeds a Plotly graph in a Jupyter notebook using the tls.embed function.

LANGUAGE: python
CODE:
tls.embed('Quartz', '7')

----------------------------------------

TITLE: Retrieving Plotly Streaming Tokens
DESCRIPTION: Obtains streaming tokens from Plotly credentials file and selects one for use in the streaming plot.

LANGUAGE: python
CODE:
stream_tokens = tls.get_credentials_file()['stream_ids']
token = stream_tokens[-2]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens
print token

----------------------------------------

TITLE: Creating Basic Line Plot
DESCRIPTION: Demonstrates creating a simple line plot from a DataFrame using both native Plotly and Cufflinks syntax

LANGUAGE: python
CODE:
df = cf.datagen.lines()

py.iplot([{
    'x': df.index,
    'y': df[col],
    'name': col
}  for col in df.columns], filename='cufflinks/simple-line')

----------------------------------------

TITLE: Custom Domain and Theme Configuration
DESCRIPTION: JavaScript configuration for using Holder with custom domain and theme settings for specific images.

LANGUAGE: javascript
CODE:
Holder.run({
    domain: "example.com",
    themes: {
        "simple":{
            background:"#fff",
            foreground:"#000",
            size:12
            }
    },
    images: "#new"
    })

----------------------------------------

TITLE: Executing D'Agostino's K^2 Test for Normality in Python
DESCRIPTION: Run D'Agostino's K^2 test for normality using SciPy and present results in a Plotly table.

LANGUAGE: python
CODE:
from scipy.stats import normaltest

stat, p = normaltest(gauss_data)

# interpret
alpha = 0.05
if p > alpha:
    msg = 'Sample looks Gaussian (fail to reject H0)'
else:
    msg = 'Sample does not look Gaussian (reject H0)'

result_mat = [
    ['Length of the sample data', 'Test Statistic', 'p-value', 'Comments'],
    [len(gauss_data), stat, p, msg]
]

normt_table = ff.create_table(result_mat)
normt_table['data'][0].colorscale=[[0, '#2a3f5f'],[1, '#ffffff']]
normt_table['layout']['height']=200
normt_table['layout']['margin']['t']=50
normt_table['layout']['margin']['b']=50

py.iplot(normt_table, filename="D'Agostino-test-table")

----------------------------------------

TITLE: Structuring Welcome Header in HTML and Liquid
DESCRIPTION: Creates the welcome header section of the documentation page, including the title, description, and additional layout components using HTML and Liquid templating.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">

			<div class="--body">
				<h1>Plotly R Library Maps</h1>
				<p>{{page.description}}</p>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Coloring Network Nodes Based on Connections
DESCRIPTION: Colors each node based on the number of connections it has in the network. Updates the node trace color and hover text information.

LANGUAGE: python
CODE:
for node, adjacencies in enumerate(G.adjacency()):
    node_trace['marker']['color']+=tuple([len(adjacencies[1])])
    node_info = '# of connections: '+str(len(adjacencies[1]))
    node_trace['text']+=tuple([node_info])

----------------------------------------

TITLE: Importing Required Dependencies
DESCRIPTION: Imports necessary Plotly modules and NumPy for data manipulation and plotting.

LANGUAGE: python
CODE:
import plotly.plotly as py  
import plotly.tools as tls   
import plotly.graph_objs as go
import numpy as np  

----------------------------------------

TITLE: Adding Rating Data to Linear Gauge Chart in Python with Plotly
DESCRIPTION: This code snippet demonstrates how to add rating data to the previously created linear gauge chart. It scales the ratings between 0-6 to fit the y-values of the scales and adds markers to represent the ratings on each gauge.

LANGUAGE: python
CODE:
ratings = [4.5, 5, 1, 2.75]

for i in range(len(ratings)):
    traces.append(go.Scatter(
            x=[0.5], y=[ratings[i]],
            xaxis='x'+str(i+1), yaxis='y'+str(i+1),
            mode='markers', marker={'size': 16, 'color': '#29ABD6'},
            text=ratings[i], hoverinfo='text', showlegend=False
    ))

fig = dict(data=traces, layout=layout)
py.iplot(fig, filename='linear-gauge')

----------------------------------------

TITLE: Initializing Page Metadata in YAML Front Matter
DESCRIPTION: Sets up the page metadata including description, display category, language, layout, and other properties for the Plotly R Library Maps documentation page.

LANGUAGE: yaml
CODE:
---
description: Plotly's R graphing library makes interactive, publication-quality graphs
  online. Examples of maps.
display_as: maps
language: r
layout: langindex
name: Maps
page_type: example_index
permalink: r/maps/
thumbnail: thumbnail/mixed.jpg
---

----------------------------------------

TITLE: Creating a Table with Custom Font Colors
DESCRIPTION: Shows how to customize font colors in a table created with Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]

colorscale = [[0, '#272D31'],[.5, '#ffffff'],[1, '#ffffff']]
font=['#FCFCFC', '#00EE00', '#008B00', '#004F00', '#660000', '#CD0000', '#FF3030']

table = ff.create_table(text, colorscale=colorscale, font_colors=font)
table.layout.width=250
py.iplot(table, filename='font_table')

----------------------------------------

TITLE: Creating a Table with Custom Font Colors
DESCRIPTION: Shows how to customize font colors in a table created with Plotly Figure Factory.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff

text = [['Team', 'Rank'], ['A', 1], ['B', 2], ['C', 3], ['D', 4], ['E', 5], ['F', 6]]

colorscale = [[0, '#272D31'],[.5, '#ffffff'],[1, '#ffffff']]
font=['#FCFCFC', '#00EE00', '#008B00', '#004F00', '#660000', '#CD0000', '#FF3030']

table = ff.create_table(text, colorscale=colorscale, font_colors=font)
table.layout.width=250
py.iplot(table, filename='font_table')

----------------------------------------

TITLE: Creating Sample Scatter Plot Data
DESCRIPTION: Generate random data points and configure scatter plot properties including color scales and marker sizes.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.io as pio

import os
import numpy as np

----------------------------------------

TITLE: Importing Plotly and Checking Version
DESCRIPTION: Imports the Plotly library and prints its version number to ensure the correct version is installed.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Initializing Base Chart for Gauge Meter in Python with Plotly
DESCRIPTION: This code snippet initializes the base chart for a gauge meter using Plotly. It creates a pie chart with 7 sections, custom colors, and specific styling to form the foundation of the gauge.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

base_chart = {
    "values": [40, 10, 10, 10, 10, 10, 10],
    "labels": ["-", "0", "20", "40", "60", "80", "100"],
    "domain": {"x": [0, .48]},
    "marker": {
        "colors": [
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)',
            'rgb(255, 255, 255)'
        ],
        "line": {
            "width": 1
        }
    },
    "name": "Gauge",
    "hole": .4,
    "type": "pie",
    "direction": "clockwise",
    "rotation": 108,
    "showlegend": False,
    "hoverinfo": "none",
    "textinfo": "label",
    "textposition": "outside"
}

----------------------------------------

TITLE: Publishing Jupyter Notebook as Plotly Tutorial using Python
DESCRIPTION: This snippet sets up custom styling for the notebook and uses the publisher library to publish the notebook as a Plotly tutorial. It demonstrates how to prepare and publish educational content from Jupyter notebooks.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install publisher --upgrade
import publisher
publisher.publish(
    'surface-subplots.ipynb', 'python/demo/surface-subplots//', 'Surface Subplot Demo',
    'Surface Subplot Demo',
    title = 'Surface Subplot Demo',
    thumbnail='', language='python',
    layout='user-guide', has_thumbnail='false')

----------------------------------------

TITLE: Authenticating with Salesforce API
DESCRIPTION: Logs into Salesforce using credentials stored in a text file. This approach should be used cautiously and not in production environments.

LANGUAGE: python
CODE:
with open('salesforce_login.txt') as f:
    username, password, token = [x.strip("\n") for x in f.readlines()]
sf = Salesforce(username=username, password=password, security_token=token)

----------------------------------------

TITLE: Creating an Index Page for a New Chart Type in HTML
DESCRIPTION: Template for creating an index page for a new chart type in the Plotly JavaScript documentation. It includes YAML front matter and Liquid templating for generating example listings.

LANGUAGE: html
CODE:
---
name: Add-Chart-Type-or-Topic
permalink: javascript/add-chart-type-or-topic/
description: How to make a D3.js-based add-chart-type-or-topic in javascript. Add an additional sentence summarizing chart-type or topic.
layout: langindex
thumbnail: thumbnail/mixed.jpg 
language: plotly_js
page_type: example_index
display_as: **SEE BELOW
order: 5
---
  {% assign examples = site.posts | where:"language","plotly_js" | where:"suite","add-chart-type-or-topic"| sort: "order" %}
  {% include posts/auto_examples.html examples=examples %}

----------------------------------------

TITLE: Updating Title Font in Plotly.js
DESCRIPTION: This snippet shows how to update the deprecated 'titlefont' attribute to use 'title.font' instead in Plotly.js layouts.

LANGUAGE: javascript
CODE:
var data = [{
    type: 'bar',
    x: ['A', 'B', 'C', 'D'],
    y: [10, 15, 13, 17]
}];

var layout = {
    title: {
        text: 'Chart Title',
    },
    titlefont: {
        size: 40
    }
};

Plotly.newPlot('chart', data, layout);

LANGUAGE: javascript
CODE:
var data = [{
    type: 'bar',
    x: ['A', 'B', 'C', 'D'],
    y: [10, 15, 13, 17]
}];

var layout = {
    title: {
        text: 'Chart Title',
        font: {
            size: 40
        }
    },
};

Plotly.newPlot('chart', data, layout);

----------------------------------------

TITLE: Importing Required Libraries for Plotly and Data Manipulation in Python
DESCRIPTION: This code snippet imports the necessary libraries for creating Plotly visualizations and performing data manipulation tasks. It includes Plotly, NumPy, Pandas, and SciPy.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Line Plot with Multiple Modes
DESCRIPTION: Shows how to create line plots with different modes including lines, markers, and both combined.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

# Create random data with numpy
import numpy as np

N = 100
random_x = np.linspace(0, 1, N)
random_y0 = np.random.randn(N)+5
random_y1 = np.random.randn(N)
random_y2 = np.random.randn(N)-5

# Create traces
trace0 = go.Scatter(
    x = random_x,
    y = random_y0,
    mode = 'lines',
    name = 'lines'
)
trace1 = go.Scatter(
    x = random_x,
    y = random_y1,
    mode = 'lines+markers',
    name = 'lines+markers'
)
trace2 = go.Scatter(
    x = random_x,
    y = random_y2,
    mode = 'markers',
    name = 'markers'
)
data = [trace0, trace1, trace2]

py.iplot(data, filename='line-mode')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple version check for the installed Plotly library

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Publishing Notebook Configuration
DESCRIPTION: Sets up custom styling and publishes the notebook using Plotly's publisher package with specific metadata and configuration.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python-Baseline-Subtraction.ipynb', 'python/baseline-subtraction/', 'Baseline Subtraction | plotly',
    'Learn how to subtract baseline estimates from data in Python.',
    title='Baseline Subtraction in Python | plotly',
    name='Baseline Subtraction',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=2,
    ipynb= '~notebook_demo/118')

----------------------------------------

TITLE: Creating Julia Documentation Index Template
DESCRIPTION: HTML template for creating an index file for a new Julia documentation section, including YAML front matter for metadata.

LANGUAGE: html
CODE:
---
title: Julia Add-Chart-Type-or-Topic | Examples | Plotly
name: Add-Chart-Type-or-Topic
permalink: julia/add-chart-type-or-topic/
description: How to make a add-chart-type-or-topic in Julia. Add an additional sentence summarizing chart-type or topic.
layout: base
  thumbnail: thumbnail/add-chart-type-or-topic.jpg *MORE INFO ON ADDING THUMBNAILS BELOW
language: julia
page_type: example_index
display_as: **SEE BELOW
order: ***SEE BELOW
---
{% assign examples = site.posts | where:"language","julia" | where:"suite","add-chart-type-or-topic"**** | sort: "order" %}
{% include posts/auto_examples.html examples=examples %}

----------------------------------------

TITLE: Updating Surface Trace Color Scale in Plotly.js
DESCRIPTION: This snippet demonstrates how to update the deprecated 'zauto', 'zmin', and 'zmax' attributes to use 'cauto', 'cmin', and 'cmax' instead for surface traces in Plotly.js.

LANGUAGE: javascript
CODE:
var data = [{
    z: [
        [1, 20, 30, 50],
        [20, 1, 60, 80],
        [30, 60, 1, 100],
        [50, 80, 100, 1]
    ],
    type: 'surface',
    zauto: false,
    zmin: 0,
    zmax: 100
}];

LANGUAGE: javascript
CODE:
var data = [{
    z: [
        [1, 20, 30, 50],
        [20, 1, 60, 80],
        [30, 60, 1, 100],
        [50, 80, 100, 1]
    ],
    type: 'surface',
    cauto: false,
    cmin: 0,
    cmax: 100
}];

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's used to ensure the correct version is installed for the subsequent examples.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Styled Plotly Table
DESCRIPTION: Creates a table with custom styling including colors, alignment, and border lines. Shows how to apply custom styling to headers and cells.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace = go.Table(
    header=dict(values=['A Scores', 'B Scores'],
                line = dict(color='#7D7F80'),
                fill = dict(color='#a1c3d1'),
                align = ['left'] * 5),
    cells=dict(values=[[100, 90, 80, 90],
                       [95, 85, 75, 95]],
               line = dict(color='#7D7F80'),
               fill = dict(color='#EDFAFF'),
               align = ['left'] * 5))

layout = dict(width=500, height=300)
data = [trace]
fig = dict(data=data, layout=layout)
py.iplot(fig, filename = 'styled_table')

----------------------------------------

TITLE: Cloning the Plotly Documentation Repository
DESCRIPTION: Commands to clone the Plotly graphing library documentation repository and navigate to the project directory.

LANGUAGE: bash
CODE:
$ git clone git@github.com:plotly/graphing-library-docs.git
$ cd graphing-library-docs

----------------------------------------

TITLE: Embedding a YouTube Video in Jupyter Notebook
DESCRIPTION: Shows how to embed a YouTube video in a Jupyter notebook using IPython.display.

LANGUAGE: python
CODE:
from IPython.display import YouTubeVideo
YouTubeVideo("wupToqz1e2g")

----------------------------------------

TITLE: Initializing Plotly Version Check
DESCRIPTION: Simple version check of the installed Plotly library

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple code to import Plotly and check the installed version

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Visualizing Q-Test Results with Plotly in Python
DESCRIPTION: This code creates a scatter plot using Plotly to visualize the Q-Test results, showing the dataset points and the critical line for outlier detection.

LANGUAGE: python
CODE:
x = [j for j in range(len(dataset))]
y1 = dataset
y2 = [-2.04 for j in range(len(dataset))]

trace1 = go.Scatter(
    x = x,
    y = y1,
    mode = 'lines+markers',
    name='Dataset',
    marker=dict(symbol=[100, 0])
)

trace2 = go.Scatter(
    x = x,
    y = y2,
    mode = 'lines',
    name='Critical Line'
)

data = [trace1, trace2]
py.iplot(data, filename='q-test-scatter')

----------------------------------------

TITLE: Creating Plotly Stream ID Object
DESCRIPTION: Defines a stream ID object with the selected token and maximum number of points to display.

LANGUAGE: python
CODE:
stream_id = dict(token=token, maxpoints=3)
stream_id

----------------------------------------

TITLE: Filtering and Sorting Jekyll Posts for R Statistical Charts
DESCRIPTION: This Liquid template code filters and sorts Jekyll posts to display R statistical chart examples. It selects posts with specific attributes and passes them to a documentation example template for rendering.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","statistical" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Creating a Basic Bar Chart with Plotly in Python
DESCRIPTION: Shows how to create a simple bar chart using Plotly's graph objects and display it inline in a Jupyter notebook.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go

data = [go.Bar(x=df.School,
            y=df.Gap)]

py.iplot(data, filename='jupyter-basic_bar')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's used to ensure the installed version supports slider functionality.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Styling Funnel Chart with Custom Colors and Markers
DESCRIPTION: Demonstrates how to customize a funnel chart with specific colors, markers, and text positioning. Includes opacity settings and connector line customization.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly import graph_objs as go 

trace1 = go.Funnel(
    y = ["Website visit", "Downloads", "Potential customers", "Requested price", "Finalized"],
    x = [39, 27.4, 20.6, 11, 2],
    textposition = "inside", 
    textinfo = "value+percent initial", 
    opacity = 0.65, marker = {"color": ["deepskyblue", "lightsalmon", "tan", "teal", "silver"],
    "line": {"width": [4, 2, 2, 3, 1, 1], "color": ["wheat", "wheat", "blue", "wheat", "wheat"]}},
    connector = {"line": {"color": "royalblue", "dash": "dot", "width": 3}})

layout = go.Layout(margin = {"l": 200, "r": 200 })

py.iplot(go.Figure([trace1], layout), filename = "Style_funnel")

----------------------------------------

TITLE: Setting Up Display Configuration
DESCRIPTION: Configures display settings for the notebook including custom fonts and stylesheets, and publishes the notebook using plotly publisher.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher

publisher.publish(
    '3d-hover-options.ipynb', 'python/3d-hover/', 'Python 3D Hover Options | Plotly',
    'How to customize 3d hover options in python with Plotly.',
    title= 'Python 3D Hover Options | Plotly',
    name = '3D Hover Options',
    has_thumbnail='true', thumbnail='thumbnail/3d-hover.png', 
    language='python',
    display_as='3', order=19,
    ipynb= '~notebook_demo/257')

----------------------------------------

TITLE: Configuring Jekyll to Include All Directories
DESCRIPTION: YAML configuration to include all directories in the Jekyll build by not excluding any.

LANGUAGE: yml
CODE:
# ---
# Excludes no directory
# ---
staticurl: http://localhost:4000/all_static
exclude: []

----------------------------------------

TITLE: Creating Julia Example Template
DESCRIPTION: HTML template for creating individual Julia examples, including YAML front matter and Julia code for plotting.

LANGUAGE: html
CODE:
---
name: Basic Bar Chart **
plot_url: https://plotly.com/~PlotBot/39
language: julia
suite: bar
order: 1 **
sitemap: false
arrangement: horizontal
---
# Learn about API authentication here: https://plotly.com/julia/getting-started
# Find your api_key here: https://plotly.com/settings/api

using Plotly


data = [
  [
    "x" => ["giraffes", "orangutans", "monkeys"],
    "y" => [20, 14, 23],
    "type" => "bar"
  ]
]
response = Plotly.plot(data, ["filename" => "basic-bar", "fileopt" => "overwrite"])
plot_url = response["url"]

----------------------------------------

TITLE: Importing igraph for Graph Generation in Python
DESCRIPTION: Imports the igraph library for creating and manipulating graph structures. This is a prerequisite for building the character network.

LANGUAGE: python
CODE:
import igraph as ig

----------------------------------------

TITLE: Creating Network Graph with igraph
DESCRIPTION: Loads network data from GML file using igraph and sets up Kamada-Kawai layout. Defines basic graph structure including vertices, edges and labels.

LANGUAGE: python
CODE:
import igraph as ig

G=ig.Graph.Read_GML('netscience.gml.txt')
labels=list(G.vs['label'])
N=len(labels)
E=[e.tuple for e in G.es]# list of edges
layt=G.layout('kk') #kamada-kawai layout
type(layt)

----------------------------------------

TITLE: Setting Environment Variables for Chart Studio Authentication in R
DESCRIPTION: R code snippet to set environment variables for Chart Studio authentication in Plotly tutorials.

LANGUAGE: r
CODE:
```{r, echo = FALSE, message=FALSE}
knitr::opts_chunk$set(message = FALSE, warning=FALSE)
Sys.setenv("plotly_username"="RPlotBot")
Sys.setenv("plotly_api_key"="q0lz6r5efr")```

----------------------------------------

TITLE: Initializing Plotly and Dependencies
DESCRIPTION: Import required Plotly modules and Pandas for data handling.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import pandas as pd

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for verifying the installed version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Import Plotly package and check installed version

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Setting Default Camera Parameters
DESCRIPTION: Demonstrates default camera positioning with up, center, and eye vectors for 3D plot orientation.

LANGUAGE: python
CODE:
name = 'default'
camera = dict(
    up=dict(x=0, y=0, z=1),
    center=dict(x=0, y=0, z=0),
    eye=dict(x=1.25, y=1.25, z=1.25)
)

py.iplot(fig, validate=False, filename=name)

----------------------------------------

TITLE: Adding Edit Chart Link in R Plotly
DESCRIPTION: Creates a Plotly visualization using iris dataset and saves it as an HTML file with the 'Edit Chart' link enabled. Uses the config() function to set showLink parameter to true.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)

htmlwidgets::saveWidget(config(p, showLink = T), "graph.html")

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple version check for the installed Plotly package

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating and Uploading a Plotly Grid in Python
DESCRIPTION: This snippet demonstrates how to create a Plotly grid object with columns of data and upload it to Plotly using the grid_ops.upload() function. It includes setting the filename, visibility, and auto-open options.

LANGUAGE: python
CODE:
import chart_studio
import chart_studio.plotly as py
import chart_studio.tools as tls
import plotly.graph_objects as go
from chart_studio.grid_objs import Column, Grid

from datetime import datetime as dt
import numpy as np
from IPython.display import IFrame

column_1 = Column(['a', 'b', 'c'], 'column 1')
column_2 = Column([1, 2, 3], 'column 2') # Tabular data can be numbers, strings, or dates
grid = Grid([column_1, column_2])
url = py.grid_ops.upload(grid,
                         filename='grid_ex_'+str(dt.now()),
                         world_readable=True,
                         auto_open=False)
print(url)

----------------------------------------

TITLE: Initializing Plotly Stream Plot with Python
DESCRIPTION: Basic example showing how to initialize a Plotly figure object and send a single data point through a stream. Uses the plotly.plotly module and graph_objs for plot configuration.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *
# auto sign-in with credentials or use py.sign_in()
trace1 = Scatter(
    x=[],
    y=[], 
    stream=dict(token='my_stream_id')
)
data = Data([trace1])
py.plot(data)
s = py.Stream('my_stream_id')
s.open()
s.write(dict(x=1, y=2))
s.close()

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Using scikit-learn PCA Implementation
DESCRIPTION: Demonstrates how to perform PCA using scikit-learn's built-in PCA class as a simpler alternative to manual implementation.

LANGUAGE: python
CODE:
from sklearn.decomposition import PCA as sklearnPCA
sklearn_pca = sklearnPCA(n_components=2)
Y_sklearn = sklearn_pca.fit_transform(X_std)

----------------------------------------

TITLE: Initializing Plotly and Version Check
DESCRIPTION: Imports Plotly library and checks the installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating and Uploading a Grid with Multiple Columns
DESCRIPTION: This code creates a Plotly grid with multiple columns of random data and uploads it to Plotly, returning the URL of the uploaded grid.

LANGUAGE: python
CODE:
column_1 = Column(np.random.randn(1000), 'column 1')
column_2 = Column(np.random.randn(1000)+1, 'column 2')
column_3 = Column(np.random.randn(1000)+2, 'column 3')
column_4 = Column(np.random.randn(1000)+3, 'column 4')

grid = Grid([column_1, column_2, column_3, column_4])
url = py.grid_ops.upload(grid, filename='randn_int_offset_'+str(dt.now()))
print(url)

----------------------------------------

TITLE: Initializing File Walker Function in Python
DESCRIPTION: Function that walks through documentation files matching include/exclude patterns using fnmatch and applies a processing function

LANGUAGE: python
CODE:
def walknroll(fun, includes=['*.html', '_posts*'], excludes = ['*all_static*', '*_includes*', '*_layouts*', '*_drafts*']):
    # transform glob patterns to regular expressions
    includes = r'|'.join([fnmatch.translate(x) for x in includes])
    excludes = r'|'.join([fnmatch.translate(x) for x in excludes]) or r'$.'

    for root, dirs, files in os.walk('../_posts'):
        # exclude/include files
        files = [os.path.join(root, f) for f in files]
        files = [f for f in files if not re.match(excludes, f)]
        files = [f for f in files if re.match(includes, f)]

        for fname in files:
            fun(fname)

----------------------------------------

TITLE: Implementing Continuous Flight Data Streaming
DESCRIPTION: Defines a function to continuously stream flight data between random airports, updating the plot in real-time. Includes error handling and logging.

LANGUAGE: python
CODE:
import datetime
import time

def lets_stream():

    s.open()

    airports = dframe.sample(4)[['lat', 'long', 'airport']]
    depart = airports.iloc[0]
    arrive = airports.iloc[1]
    num_steps = 20

    while True:

        count = 0

        lats = np.linspace(depart['lat'], arrive['lat'], num_steps)
        lons = np.linspace(depart['long'], arrive['long'], num_steps)

        for i, j in zip(lats, lons):

            # added pts for the departure and arrival airports!!!
            s.write(dict(lon=[depart['long'], j, arrive['long']],
                         lat=[
                             depart['lat'], i, arrive['lat']], type='scattergeo',
                         marker={'size': [5, 7 + 0.2 * count, 5], 'sizemode': 'area',
                                 'color': ["green", "blue", "red"],
                                 'symbol': ["circle", "star", "x-open"]},
                         text=[depart['airport'],
                               '{},{}'.format(count, datetime.datetime.now()),
                               arrive['airport']]))

            count += 1
            stall = np.random.normal(10, 3)
            time.sleep(int((abs(stall) + 0.01) / 2.0))
            s.heartbeat()
            time.sleep(int((abs(stall) + 0.01) / 2.0))

        depart = arrive
        arrive = dframe.sample(1)[['lat', 'long', 'airport']].iloc[0]

while True:
    try:
        lets_stream()
    except Exception as e:
        with open('log.txt', 'a+') as f:
            f.write(str(e))
        print(str(e))
        s.close()

----------------------------------------

TITLE: Creating a Secret Graph with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a secret graph using Plotly's Python library. It uses the same data as previous examples but sets the sharing option to 'secret'.

LANGUAGE: python
CODE:
py.iplot(data, filename='privacy-secret', sharing='secret')

----------------------------------------

TITLE: Setting Plotly Credentials for Online Plotting
DESCRIPTION: Initializes Plotly credentials for online plotting by setting the username and API key. This is required for saving plots to the Plotly cloud service.

LANGUAGE: python
CODE:
import plotly 
plotly.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')

----------------------------------------

TITLE: Adding Play and Pause Buttons to Plotly Animation
DESCRIPTION: Adds play and pause buttons to control the animation, and defines custom colors for different continents.

LANGUAGE: python
CODE:
figure['layout']['updatemenus'] = [
    {
        'buttons': [
            {
                'args': [None, {'frame': {'duration': 500, 'redraw': False},
                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],
                'label': 'Play',
                'method': 'animate'
            },
            {
                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',
                'transition': {'duration': 0}}],
                'label': 'Pause',
                'method': 'animate'
            }
        ],
        'direction': 'left',
        'pad': {'r': 10, 't': 87},
        'showactive': False,
        'type': 'buttons',
        'x': 0.1,
        'xanchor': 'right',
        'y': 0,
        'yanchor': 'top'
    }
]

custom_colors = {
    'Asia': 'rgb(171, 99, 250)',
    'Europe': 'rgb(230, 99, 250)',
    'Africa': 'rgb(99, 110, 250)',
    'Americas': 'rgb(25, 211, 243)',
    'Oceania': 'rgb(50, 170, 255)'
}

----------------------------------------

TITLE: Defining Custom Color Scale
DESCRIPTION: Creates a custom bone-like color scale for MRI visualization with 21 color points ranging from black to white

LANGUAGE: python
CODE:
pl_bone = [
    [0.0, 'rgb(0, 0, 0)'],
    [0.05, 'rgb(10, 10, 14)'],
    [0.1, 'rgb(21, 21, 30)'],
    [0.15, 'rgb(33, 33, 46)'],
    [0.2, 'rgb(44, 44, 62)'],
    [0.25, 'rgb(56, 55, 77)'],
    [0.3, 'rgb(66, 66, 92)'],
    [0.35, 'rgb(77, 77, 108)'],
    [0.4, 'rgb(89, 92, 121)'],
    [0.45, 'rgb(100, 107, 132)'],
    [0.5, 'rgb(112, 123, 143)'],
    [0.55, 'rgb(122, 137, 154)'],
    [0.6, 'rgb(133, 153, 165)'],
    [0.65, 'rgb(145, 169, 177)'],
    [0.7, 'rgb(156, 184, 188)'],
    [0.75, 'rgb(168, 199, 199)'],
    [0.8, 'rgb(185, 210, 210)'],
    [0.85, 'rgb(203, 221, 221)'],
    [0.9, 'rgb(220, 233, 233)'],
    [0.95, 'rgb(238, 244, 244)'],
    [1.0, 'rgb(255, 255, 255)']
]

----------------------------------------

TITLE: Setting Default Privacy for Future Plotly Graphs in Python
DESCRIPTION: This snippet shows how to update the configuration file to make all future Plotly graphs private by default. It uses the chart_studio.tools module to set the config file.

LANGUAGE: python
CODE:
import chart_studio
chart_studio.tools.set_config_file(world_readable=False, sharing='private')

----------------------------------------

TITLE: Updating Heatmap Trace Type in Plotly.js
DESCRIPTION: This snippet shows how to update the deprecated 'heatmapgl' trace type to use 'heatmap' instead in Plotly.js.

LANGUAGE: javascript
CODE:
var data = [
  {
    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],
    type: 'heatmapgl'
  }
];

Plotly.newPlot('myDiv', data);

LANGUAGE: javascript
CODE:
var data = [
  {
    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],
    type: 'heatmap'
  }
];

Plotly.newPlot('myDiv', data);

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling
DESCRIPTION: This snippet sets up custom styling for the notebook and publishes it using the Plotly publisher tool. It includes adding custom fonts, CSS, and setting metadata for the published notebook.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'Exponential-fits.ipynb', 'python/exponential-fits/', 'Exponential Fit',
    'Create a exponential fit / regression in Python and add a line of best fit to your chart.',
    title = 'Exponential Fit',
    name = 'Exponential Fit',
    has_thumbnail='true', thumbnail='thumbnail/exponential_fit.jpg', 
    language='python', page_type='example_index',
    display_as='statistics', order=11,
    ipynb= '~notebook_demo/135')

----------------------------------------

TITLE: Generating Documentation Examples with Liquid
DESCRIPTION: This snippet uses Liquid templating to generate a list of documentation examples for 3D charts in R, sorting them by order and filtering by specific criteria.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","3d_charts" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Loading and Displaying Stock Data
DESCRIPTION: Loads stock data from a CSV file and creates a table visualization using Plotly's Figure Factory

LANGUAGE: python
CODE:
stock_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv')
df = stock_data[0:15]

table = FF.create_table(df)
py.iplot(table, filename='stockdata-peak-fitting')

----------------------------------------

TITLE: Generating Documentation Examples in Jekyll for Plotly R Library
DESCRIPTION: This snippet uses Jekyll liquid tags to generate a list of documentation examples for the Plotly R library. It filters posts by language, display type, and layout, then sorts them by order.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","file_settings" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Setting Up Custom Styles for Jupyter Notebook
DESCRIPTION: This snippet sets up custom styles for the Jupyter notebook, including fonts and CSS. It also installs and uses a publisher package to publish the notebook.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install publisher --upgrade
import publisher
publisher.publish(
    'bar_chart_stream.ipynb', 'python/bar_chart_stream//', 'Bar Chart Streaming Demo',
    'Getting Started with Plotly Streaming',
    title = 'Bar Chart Streaming',
    thumbnail='', language='python',
    layout='user-guide', has_thumbnail='false') 

----------------------------------------

TITLE: Reading CSV File Preview with Pandas in Python
DESCRIPTION: Uses Pandas to read the first two rows of a CSV file.

LANGUAGE: python
CODE:
pd.read_csv('311_100M.csv', nrows=2).head()

----------------------------------------

TITLE: Bootstrap Directory Structure
DESCRIPTION: Illustrates the directory structure of a Bootstrap installation, showing the locations of CSS, JavaScript, and font files.

LANGUAGE: markdown
CODE:
bootstrap/
├── css/
│   ├── bootstrap.css
│   ├── bootstrap.min.css
│   ├── bootstrap-theme.css
│   └── bootstrap-theme.min.css
├── js/
│   ├── bootstrap.js
│   └── bootstrap.min.js
└── fonts/
    ├── glyphicons-halflings-regular.eot
    ├── glyphicons-halflings-regular.svg
    ├── glyphicons-halflings-regular.ttf
    └── glyphicons-halflings-regular.woff

----------------------------------------

TITLE: Creating Private Charts in Chart Studio Enterprise
DESCRIPTION: Creates a private plot in Chart Studio Enterprise by setting the sharing parameter to private. Only available for enterprise subscribers.

LANGUAGE: r
CODE:
api_create(filename = "private-graph", sharing = "private")

----------------------------------------

TITLE: Opening HDF5 File with Pandas
DESCRIPTION: Sets up the HDF5 file format and opens a connection to the HDF5 file containing NYC traffic accident data.

LANGUAGE: python
CODE:
pd.set_option('io.hdf.default_format','table')
store = pd.HDFStore('nypd_motors.h5')

----------------------------------------

TITLE: Setting Up Plotly Publisher in Python
DESCRIPTION: This snippet sets up custom CSS for the notebook, installs the Plotly publisher package, and publishes the notebook. It's used for internal Plotly documentation processes.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'colorway.ipynb', 'python/colorway/', 'Colorway',
    'How to set default trace colors with colorway.',
    title = 'Colorway in Python | Plotly',
    has_thumbnail='true', thumbnail='thumbnail/colorway.jpg', 
    language='python', 
    display_as='file_settings', 
    order=20,
    ipynb= '~notebook_demo/256')

----------------------------------------

TITLE: Running Gulp Task for Style Processing
DESCRIPTION: This command starts the Gulp task, which watches for changes in SCSS files and processes them accordingly.

LANGUAGE: bash
CODE:
$ gulp

----------------------------------------

TITLE: Installing Ruby Dependencies for Jekyll
DESCRIPTION: Commands to install Bundler and the required Ruby dependencies for the Jekyll application.

LANGUAGE: sh
CODE:
gem install bundler
bundle install

----------------------------------------

TITLE: Installing Bootstrap with Bower
DESCRIPTION: Command to install Bootstrap using the Bower package manager.

LANGUAGE: bash
CODE:
bower install bootstrap

----------------------------------------

TITLE: Displaying all color scales
DESCRIPTION: Generates and displays HTML for all color scales available in colorlover.

LANGUAGE: python
CODE:
HTML(cl.to_html( cl.scales ))

----------------------------------------

TITLE: Updating Bar Chart Orientation in Plotly.js
DESCRIPTION: This snippet shows how to update the deprecated 'bardir' attribute to use 'orientation' instead for setting bar direction in Plotly.js bar charts.

LANGUAGE: javascript
CODE:
var data = [{
    type: 'bar',
    x: [1, 2, 3, 4],
    y: [10, 15, 13, 17],
    bardir: 'h',
}];

var layout = {
    title: 'Bar Chart with Horizontal Bars',
    xaxis: {
        title: 'X Axis'
    },
    yaxis: {
        title: 'Y Axis'
    }
};


Plotly.newPlot('bar-chart', data, layout);

LANGUAGE: javascript
CODE:
var data = [{
    type: 'bar',
    x: [1, 2, 3, 4],
    y: [10, 15, 13, 17],
    orientation: 'h',
}];

var layout = {
    title: 'Bar Chart with Horizontal Bars',
    xaxis: {
        title: 'X Axis'
    },
    yaxis: {
        title: 'Y Axis'
    }
};


Plotly.newPlot('bar-chart', data, layout);

----------------------------------------

TITLE: Initializing Plotly Version Check
DESCRIPTION: Simple version check for the Plotly library to ensure compatibility.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Retrieving Plotly Streaming Tokens in Python
DESCRIPTION: This snippet retrieves streaming tokens from the Plotly credentials file and assigns them to variables for later use in creating streaming visualizations.

LANGUAGE: python
CODE:
stream_tokens = tls.get_credentials_file()['stream_ids']
token_1 = stream_tokens[-1]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens
token_2 = stream_tokens[-2]   
print token_1
print token_2

----------------------------------------

TITLE: Filtering and Displaying Plotly.js Control Examples using Liquid
DESCRIPTION: This Liquid template code filters and sorts blog posts related to Plotly.js controls, then includes a template to display the documentation examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","plotly_js" | where:"display_as","controls" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Initializing Plotly Version Check
DESCRIPTION: Imports Plotly and displays the installed version number

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Converting RGB colors to HSL
DESCRIPTION: Converts a RGB color scale to HSL format using colorlover's to_hsl function.

LANGUAGE: python
CODE:
ryb = cl.scales['3']['div']['RdYlBu']; ryb
cl.to_hsl( ryb )

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for ensuring you're using the latest version of Plotly.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating a Double Y-Axis Plot with Plotly in Python
DESCRIPTION: This code snippet demonstrates how to create a plot with two Y-axes using Plotly's graph_objs module. It creates two scatter plots, one for each Y-axis, and configures the layout to display both axes.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Scatter(
    x=[1, 2, 3],
    y=[40, 50, 60],
    name='yaxis data'
)
trace2 = go.Scatter(
    x=[2, 3, 4],
    y=[4, 5, 6],
    name='yaxis2 data',
    yaxis='y2'
)
data = [trace1, trace2]
layout = go.Layout(
    title='Double Y Axis Example',
    yaxis=dict(
        title='yaxis title'
    ),
    yaxis2=dict(
        title='yaxis2 title',
        titlefont=dict(
            color='rgb(148, 103, 189)'
        ),
        tickfont=dict(
            color='rgb(148, 103, 189)'
        ),
        overlaying='y',
        side='right'
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='multiple-axes-double')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version. It's used to ensure the required version (1.9.2+) is installed for exponential fits.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Querying Top Active Users
DESCRIPTION: SQL query to find top 10 most active users by story count

LANGUAGE: sql
CODE:
SELECT
  author AS User,
  count(author) as Stories
FROM
  [fh-bigquery:hackernews.stories]
GROUP BY
  User
ORDER BY
  Stories DESC
LIMIT
  10

----------------------------------------

TITLE: Plotting 100K Points with WebGL in Plotly Python
DESCRIPTION: Creates a scatter plot of 100,000 random points using WebGL rendering for improved performance. Uses numpy for generating random data and plotly's Scattergl for rendering.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

N = 100000
trace = go.Scattergl(
    x = np.random.randn(N),
    y = np.random.randn(N),
    mode = 'markers',
    marker = dict(
        line = dict(
            width = 1, 
            color = '#404040')
    )
)
data = [trace]
py.iplot(data, filename='WebGL100000')

----------------------------------------

TITLE: Importing Plotly and Checking Version
DESCRIPTION: Import the Plotly library and check its installed version.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating a Styled Multi-Trace Bar Chart with Plotly in Python
DESCRIPTION: Demonstrates how to create a more complex bar chart with multiple traces, custom colors, and titles using Plotly.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go

trace_women = go.Bar(x=df.School,
                  y=df.Women,
                  name='Women',
                  marker=dict(color='#ffcdd2'))

trace_men = go.Bar(x=df.School,
                y=df.Men,
                name='Men',
                marker=dict(color='#A2D5F2'))

trace_gap = go.Bar(x=df.School,
                y=df.Gap,
                name='Gap',
                marker=dict(color='#59606D'))

data = [trace_women, trace_men, trace_gap]

layout = go.Layout(title="Average Earnings for Graduates",
                xaxis=dict(title='School'),
                yaxis=dict(title='Salary (in thousands)'))

fig = go.Figure(data=data, layout=layout)

py.iplot(fig, sharing='private', filename='jupyter-styled_bar')

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Simple version check for the installed Plotly package

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Configuring HTTP Basic Auth for Proxy
DESCRIPTION: This bash command shows how to set an HTTP proxy with Basic Authentication. It includes the username and password in the proxy URL.

LANGUAGE: bash
CODE:
$ export HTTP_PROXY="http://user:pass@10.10.1.10:3128/"

----------------------------------------

TITLE: Rendering Final Plot
DESCRIPTION: Combine all elements and create the interactive visualization

LANGUAGE: python
CODE:
data=go.Data([lines, dots])
fig=dict(data=data, layout=layout)
fig['layout'].update(annotations=make_annotations(position, v_label))
py.iplot(fig, filename='Tree-Reingold-Tilf')

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating Simple Plotly Presentation
DESCRIPTION: Demonstrates creating a basic two-slide presentation using markdown syntax and uploading it using the Plotly API.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import chart_studio.presentation_objs as pres

filename = 'simple-pres'
markdown_string = """
# slide 1
There is only one slide.

---
# slide 2
Again, another slide on this page.

"""

my_pres = pres.Presentation(markdown_string)
pres_url_0 = py.presentation_ops.upload(my_pres, filename)

----------------------------------------

TITLE: Setting Up Stream Tokens
DESCRIPTION: Retrieves and assigns stream tokens for multiple traces from credentials file.

LANGUAGE: python
CODE:
stream_tokens = tls.get_credentials_file()['stream_ids']
token_1 = stream_tokens[-1]   # I'm getting my stream tokens from the end to ensure I'm not reusing tokens
token_2 = stream_tokens[-2]   
print token_1
print token_2

----------------------------------------

TITLE: Initializing Plotly Version Check
DESCRIPTION: Imports Plotly and displays the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Initializing Plotly Version Check
DESCRIPTION: Imports Plotly and verifies the installed version number to ensure facet grid functionality is available (requires v2.0.12+).

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for ensuring the correct version is installed.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Embedding Existing Plotly Stream
DESCRIPTION: Example showing how to embed an existing Plotly streaming plot using the tools module. Demonstrates plot embedding functionality.

LANGUAGE: python
CODE:
tls.embed('streaming-demos','6')

----------------------------------------

TITLE: Setting Up Scattergeo Plot for US Airports
DESCRIPTION: Creates a scattergeo plot with custom layout settings to display US airports on a map. Initializes the plot with empty data and streaming configuration.

LANGUAGE: python
CODE:
data = [dict(
        type='scattergeo',
        lon=[],
        lat=[],
        mode='markers',
        marker=dict(
            size=8,
            opacity=0.8,
            reversescale=True,
            autocolorscale=False,
            line=dict(
                width=1,
                color='rgba(102, 102, 102)'
            ),
        ),
        stream=stream_id,
        name="Plane")]

layout = dict(
        title = 'Busy Airplane Streaming',
        colorbar = False,
        geo = dict(
            scope='usa',
            projection=dict( type='albers usa' ),
            showland = True,
            landcolor = "rgb(250, 250, 250)",
            subunitcolor = "rgb(217, 217, 217)",
            countrycolor = "rgb(217, 217, 217)",
            countrywidth = 0.5,
            subunitwidth = 0.5
        ),
    )

fig = dict( data=data, layout=layout )
py.iplot( fig, validate=False, filename='geo-streaming2', auto_open=False, fileopt='extend')

----------------------------------------

TITLE: Initializing Plotly API Credentials in Python
DESCRIPTION: Sets up the necessary imports, credentials, and authentication for interacting with the Plotly API. Requires the user's Plotly username and API key.

LANGUAGE: python
CODE:
import chart_studio
import chart_studio.plotly as py

import json
import requests
from requests.auth import HTTPBasicAuth

username = 'private_plotly' # Replace with YOUR USERNAME
api_key = 'k0yy0ztssk' # Replace with YOUR API KEY

auth = HTTPBasicAuth(username, api_key)
headers = {'Plotly-Client-Platform': 'python'}

chart_studio.tools.set_credentials_file(username=username, api_key=api_key)

----------------------------------------

TITLE: Importing Required Libraries for FFT Filtering
DESCRIPTION: Sets up the required Python libraries including Plotly, NumPy, Pandas, and SciPy for FFT filtering and visualization.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff

import numpy as np
import pandas as pd
import scipy

from scipy import signal

----------------------------------------

TITLE: Setting Basic HTTP and HTTPS Proxy Configuration
DESCRIPTION: Commands to set environment variables for HTTP and HTTPS proxy configuration. These settings allow Plotly's requests module to communicate through corporate proxies.

LANGUAGE: bash
CODE:
$ export HTTP_PROXY="http://10.10.1.10:3128"
$ export HTTPS_PROXY="http://10.10.1.10:1080"

----------------------------------------

TITLE: Creating Mesh Grid Data
DESCRIPTION: Generate x and y coordinate data using NumPy's linspace and meshgrid functions

LANGUAGE: python
CODE:
x = np.linspace(-np.pi, np.pi, 100)
y = np.linspace(-np.pi, np.pi, 100)

Y, X = np.meshgrid(x, y)

----------------------------------------

TITLE: Importing Libraries for Data Visualization with Plotly in Python
DESCRIPTION: This snippet imports the required libraries for data visualization using Plotly, along with NumPy, Pandas, and SciPy for data manipulation and analysis.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.tools as tools
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly 
plotly.__version__

----------------------------------------

TITLE: Post Class Implementation in Python
DESCRIPTION: Class for handling blog post files with front matter and content, including initialization, string representation and save functionality

LANGUAGE: python
CODE:
class Post:
    def __init__(self, fn):
        self.fn = fn
        content = open(fn).read()
        if '---' not in content:
            raise NotPost
        self.fm = content.split('---')[1] # front matter
        self.body = content.split('---')[2]
        self.fm_vars = OD((l.split(':')[0], l.split(': ')[1]) for l in self.fm.split('\n') if ': ' in l)
    
    def head(self):
        return ('---\n' +
            '\n'.join([k+': '+v for k, v in self.fm_vars.iteritems()]) +
            '\n---')
    
    def _content(self):
        return self.head() + self.body

    def __str__(self):
        return self._content()
    
    def __repr__(self):
        return 'Post(\'{}\')'.format(self.fn)
    
    def save(self):
        with open(self.fn, 'w') as f:
            f.write(self._content())

----------------------------------------

TITLE: Importing Plotly Dependencies in Python
DESCRIPTION: Imports required Plotly libraries and IPython display utilities for widget implementation.

LANGUAGE: python
CODE:
import plotly.plotly as py
from plotly.graph_objs import *
from IPython.display import Image, display
from plotly.widgets import GraphWidget

----------------------------------------

TITLE: Loading US Airport Traffic Dataset
DESCRIPTION: Uses pandas to load a CSV file containing US airport traffic data from a GitHub repository.

LANGUAGE: python
CODE:
import pandas as pd
dframe = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv')

----------------------------------------

TITLE: Creating Basic Population Pyramid using Plotly Bar Charts
DESCRIPTION: Creates a basic population pyramid using go.Bar traces with mirrored data for men and women. Uses custom styling for colors and hover information, with a configured layout for axis labels and ranges.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import numpy as np

women_bins = np.array([-600, -623, -653, -650, -670, -578, -541, -411, -322, -230])
men_bins = np.array([600, 623, 653, 650, 670, 578, 541, 360, 312, 170])

y = list(range(0, 100, 10))

layout = go.Layout(yaxis=go.layout.YAxis(title='Age'),
                   xaxis=go.layout.XAxis(
                       range=[-1200, 1200],
                       tickvals=[-1000, -700, -300, 0, 300, 700, 1000],
                       ticktext=[1000, 700, 300, 0, 300, 700, 1000],
                       title='Number'),
                   barmode='overlay',
                   bargap=0.1)

data = [go.Bar(y=y,
               x=men_bins,
               orientation='h',
               name='Men',
               hoverinfo='x',
               marker=dict(color='powderblue')
               ),
        go.Bar(y=y,
               x=women_bins,
               orientation='h',
               name='Women',
               text=-1 * women_bins.astype('int'),
               hoverinfo='text',
               marker=dict(color='seagreen')
               )]

py.iplot(dict(data=data, layout=layout), filename='EXAMPLES/bar_pyramid')

----------------------------------------

TITLE: Embedding Plotly Chart in Jupyter Notebook
DESCRIPTION: This code embeds the previously created Plotly chart into the Jupyter notebook for easy viewing.

LANGUAGE: python
CODE:
tls.embed('https://plotly.com/~streaming-demos/116/bar-chart-streaming')

----------------------------------------

TITLE: Creating Stream ID Objects
DESCRIPTION: Creates stream ID dictionaries with tokens and maximum points configuration.

LANGUAGE: python
CODE:
stream_id1 = dict(token=token_1, maxpoints=60)
stream_id2 = dict(token=token_2, maxpoints=60)

----------------------------------------

TITLE: Initializing Required Libraries for Random Walk Visualization
DESCRIPTION: Imports necessary Python libraries including Plotly for visualization, NumPy for numerical operations, Pandas for data manipulation, and other utility libraries.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
from plotly.tools import FigureFactory as FF

import numpy as np
import pandas as pd
import scipy
import random

----------------------------------------

TITLE: Generating Graph Images On-the-Fly
DESCRIPTION: Demonstrates how to generate static graph images on-the-fly using plotly.plotly.image.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import base64

width = 600
height = 600

template = (''
    '<img style="width: {width}; height: {height}" src="data:image/png;base64,{image}">' 
    '{caption}'                              # Optional caption to include below the graph
    '<br>'
    '<hr>'
'')

# A collection of Plotly graphs
figures = [
    {'data': [{'x': [1,2,3], 'y': [3,1,6]}], 'layout': {'title': 'the first graph'}},
    {'data': [{'x': [1,2,3], 'y': [3,7,6], 'type': 'bar'}], 'layout': {'title': 'the second graph'}}
]

# Generate their images using `py.image.get`
images = [base64.b64encode(py.image.get(figure, width=width, height=height)).decode('utf-8') for figure in figures]

report_html = ''
for image in images:
    _ = template
    _ = _.format(image=image, caption='', width=width, height=height)
    report_html += _

display(HTML(report_html))
convert_html_to_pdf(report_html, 'report-2.pdf')

----------------------------------------

TITLE: Creating Network Graph with networkx
DESCRIPTION: Creates the same network using networkx and applies Fruchterman-Reingold layout. Reuses the vertex and edge data from the igraph implementation.

LANGUAGE: python
CODE:
import networkx as nx

V=range(N)# list of vertices
g=nx.Graph()
g.add_nodes_from(V)
g.add_edges_from(E)# E is the list of edges

pos=nx.fruchterman_reingold_layout(g)

----------------------------------------

TITLE: Creating a Heat Map with Plotly in R
DESCRIPTION: This snippet demonstrates how to create a heat map using Plotly and mlbench package in R. It loads Sonar data, separates it into rock and mine categories, and creates two heat maps side by side for comparison.

LANGUAGE: R
CODE:
# Heat map
library(plotly)
library(mlbench)

# Get Sonar data
data(Sonar)

# Use only numeric data
rock <- as.matrix(subset(Sonar, Class == "R")[,1:59])
mine <- as.matrix(subset(Sonar, Class == "M")[,1:59])

# For rocks
p1 <- plot_ly(z = rock, type = "heatmap", showscale = F)
  
# For mines
p2 <- plot_ly(z = mine, type = "heatmap", name = "test") %>% 
  layout(title = "Mine vs Rock")

# Plot together
p3 <- subplot(p1, p2)
embed_notebook(p3)

----------------------------------------

TITLE: Embedding Plotly Charts
DESCRIPTION: Shows how to embed a Plotly chart using plotly.tools

LANGUAGE: python
CODE:
import plotly.tools as tls
tls.embed('https://plotly.com/~cufflinks/8')

----------------------------------------

TITLE: Generating Multiple Plotly Graphs with lapply in R
DESCRIPTION: Uses lapply to generate and display multiple plotly graphs in an RMarkdown document.

LANGUAGE: r
CODE:
library(plotly)

htmltools::tagList(lapply(1:3, function(x) { plot_ly(x = rnorm(10)) }))

----------------------------------------

TITLE: Creating Contour Plot Configuration
DESCRIPTION: Sets up Plotly Contour object with temperature data and styling options.

LANGUAGE: python
CODE:
trace1 = Contour(
    z=air,
    x=lon,
    y=lat,
    colorscale="RdBu",
    zauto=False,  # custom contour levels
    zmin=-5,      # first contour level
    zmax=5        # last contour level  => colorscale is centered about 0
)

----------------------------------------

TITLE: Configuring Jekyll Excludes for JavaScript Posts
DESCRIPTION: YAML configuration to exclude all directories except JavaScript posts in the Jekyll build.

LANGUAGE: yml
CODE:
# ---
# Excludes every directory except JavaScript
# ---
exclude: ['_posts/reference_pages', _posts/ggplot2','_posts/julia','_posts/matlab','_posts/node_js','_posts/r','_posts/python','_posts/python-v3','_posts/misc','_posts/dashboards',_posts/scala', '_posts/nodejs', 'node_modules']

----------------------------------------

TITLE: Generating Documentation Examples in Liquid
DESCRIPTION: Uses Liquid templating to filter and sort relevant documentation posts, then includes a template to display the examples.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","ai_ml" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Creating Custom Theme in Holder.js
DESCRIPTION: JavaScript code to create a custom theme with specific background, foreground, size and font properties.

LANGUAGE: javascript
CODE:
Holder.add_theme("dark", {background:"#000", foreground:"#aaa", size:11, font: "Monaco"})

----------------------------------------

TITLE: Liquid Template for Documentation Examples
DESCRIPTION: Uses Liquid templating to filter and display R-specific scientific chart documentation examples, sorting them by order parameter.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","scientific" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Loading JSON Data into Spark DataFrame
DESCRIPTION: Loads bike rental data from a JSON file into a Spark DataFrame.

LANGUAGE: python
CODE:
btd = sqlContext.jsonFile("btd2.json")

----------------------------------------

TITLE: Displaying Help Documentation for Plotly's create_quiver Function
DESCRIPTION: This snippet prints the help documentation for the create_quiver function from Plotly's figure_factory module. It provides detailed information about the function's parameters and usage examples.

LANGUAGE: python
CODE:
help(ff.create_quiver)

----------------------------------------

TITLE: Liquid Template Documentation List Generation
DESCRIPTION: Liquid template code that filters and sorts R language documentation posts for basic charts and includes them in the page.

LANGUAGE: liquid
CODE:
{% assign languagelist = site.posts | where:"language","r" | where:"display_as","basic" | where: "layout","base" | sort: "order" %}
{% include posts/documentation_eg.html %}

----------------------------------------

TITLE: Publishing Plotly Notebook with Custom Styling in Python
DESCRIPTION: This snippet sets up custom styling for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook with specific metadata for the Plotly documentation site.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python_Numerical_Integration.ipynb', 'python/numerical-integration/', 'Numerical Integration | plotly',
    'Learn how to integrate a sequence or list of values numerically',
    title='Numerical Integration in Python. | plotly',
    name='Numerical Integration',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=7,
    ipynb= '~notebook_demo/101')

----------------------------------------

TITLE: Publishing Plotly Charts to Chart Studio
DESCRIPTION: Creates a box plot using plotly and publishes it to Chart Studio using api_create(). The filename parameter sets the title of the file in your Chart Studio account.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
api_create(p, filename = "r-docs-midwest-boxplots")

----------------------------------------

TITLE: Configuring Display Settings and Publishing with Plotly
DESCRIPTION: This code snippet sets up custom display settings for the notebook and publishes content using Plotly's publisher package. It configures fonts, styles, and publishes the notebook with specific metadata.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'ipython-vs-python.ipynb', 'python/ipython-vs-python/', 'IPython vs Python | plotly',
    'Discussion of key differences between IPython and Python',
    title = 'IPython vs Python | plotly',
    name = 'IPython vs Python',
    thumbnail='thumbnail/venn.jpg', language='python',
    has_thumbnail='true', display_as='chart_studio', order=12,
    ipynb='~notebook_demo/17')

----------------------------------------

TITLE: Loading and Preprocessing NYC Flights Dataset
DESCRIPTION: Loads the NYC flights dataset from a CSV file and performs initial preprocessing by dropping the first column.

LANGUAGE: python
CODE:
df = pd.read_csv('https://raw.githubusercontent.com/yankev/testing/master/datasets/nycflights.csv')
df = df.drop(df.columns[[0]], axis=1)

----------------------------------------

TITLE: Installing Ruby Dependencies for Plotly Documentation
DESCRIPTION: Commands to install Bundler and project dependencies from the Gemfile.

LANGUAGE: bash
CODE:
$ gem install bundler
$ bundle install

----------------------------------------

TITLE: Creating MATLAB plot with Plotly
DESCRIPTION: Creates a MATLAB plot and converts it to a Plotly plot using fig2plotly

LANGUAGE: matlab
CODE:
close all

% Create a set of values for the damping factor
zeta = [0.01 .02 0.05 0.1 .2 .5 1 ];

% Define a color for each damping factor
colors = ['r' 'g' 'b' 'c' 'm' 'y' 'k'];

% Create a range of frequency values equally spaced logarithmically
w = logspace(-1, 1, 1000);

% Plot the gain vs. frequency for each of the seven damping factors
figure;
for i = 1:7
    a = w.^2 - 1;
    b = 2*w*zeta(i);
    gain = sqrt(1./(a.^2 + b.^2));
    loglog(w, gain, 'color', colors(i), 'linewidth', 2);
    hold on;
end

% Set the axis limits
axis([0.1 10 0.01 100]);

% Add a title and axis labels
title('Gain vs Frequency');
xlabel('Frequency');
ylabel('Gain');

% Turn the grid on
grid on;

% Convert the figure to plotly structures
[data, layout] = convertFigure(get(gcf), false);

% Customize the plot
for i=1:numel(data)
    data{i}.name =  ['$\\zeta = ' num2str(zeta(i)) '$'];
    data{i}.showlegend = true;
end

legendstyle = struct( ...
    'x' , 0.15, ...
    'y' , 0.9, ...
    'bgcolor' , '#E2E2E2', ...
    'bordercolor' , '#FFFFFF', ...
    'borderwidth' , 2, ...
    'traceorder' , 'normal' ...
    );
layout.legend = legendstyle;
layout.showlegend = true;
layout.hovermode = 'closest';

% Send to Plotly
response = plotly(data, struct('layout', layout, ...
    'filename','My_improved_plot', ...
	'fileopt', 'overwrite'));

----------------------------------------

TITLE: Publishing Notebook Configuration
DESCRIPTION: Sets up custom styling and publishes the notebook using Plotly's publisher tool with specific metadata and configuration.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python-Baseline-Detection.ipynb', 'python/baseline-detection/', 'Baseline Detection | plotly',
    'Learn how to detect baselines on data in Python.',
    title='Baseline Detection in Python | plotly',
    name='Baseline Detection',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='peak-analysis', order=1,
    ipynb= '~notebook_demo/117')

----------------------------------------

TITLE: Creating an Interactive 3D Surface Plot with Plotly in Python
DESCRIPTION: Shows how to create a 3D surface plot using NumPy for data generation and Plotly for visualization.

LANGUAGE: python
CODE:
import chart_studio.plotly as py
import plotly.graph_objects as go

import numpy as np

s = np.linspace(0, 2 * np.pi, 240)
t = np.linspace(0, np.pi, 240)
tGrid, sGrid = np.meshgrid(s, t)

r = 2 + np.sin(7 * sGrid + 5 * tGrid)  # r = 2 + sin(7s+5t)
x = r * np.cos(sGrid) * np.sin(tGrid)  # x = r*cos(s)*sin(t)
y = r * np.sin(sGrid) * np.sin(tGrid)  # y = r*sin(s)*sin(t)
z = r * np.cos(tGrid)                  # z = r*cos(t)

surface = go.Surface(x=x, y=y, z=z)
data = [surface]

layout = go.Layout(
    title='Parametric Plot',
    scene=dict(
        xaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        yaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        ),
        zaxis=dict(
            gridcolor='rgb(255, 255, 255)',
            zerolinecolor='rgb(255, 255, 255)',
            showbackground=True,
            backgroundcolor='rgb(230, 230,230)'
        )
    )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='jupyter-parametric_plot')

----------------------------------------

TITLE: Checking Proxy Environment Variables
DESCRIPTION: These bash commands demonstrate how to check if proxy environment variables are set. This is useful for troubleshooting proxy-related issues.

LANGUAGE: bash
CODE:
$ echo $HTTP_PROXY
$ echo $HTTPS_PROXY

----------------------------------------

TITLE: Creating Interactive Scatter Plot with Plotly FigureWidget
DESCRIPTION: Creates a scatter plot using Plotly's FigureWidget and adds random jitter to the points for better visualization.

LANGUAGE: python
CODE:
f = go.FigureWidget([go.Scatter(y = df['City mpg'], x = df['City mpg'], mode = 'markers')])
scatter = f.data[0]
N = len(df)
scatter.x = scatter.x + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())
scatter.y = scatter.y + np.random.rand(N)/10 *(df['City mpg'].max() - df['City mpg'].min())
scatter.marker.opacity = 0.5

----------------------------------------

TITLE: Setting jQuery Knob Value Programmatically
DESCRIPTION: Demonstrates how to set the knob value via JavaScript and trigger the change event.

LANGUAGE: javascript
CODE:
$('.dial')
    .val(27)
    .trigger('change');

----------------------------------------

TITLE: Creating a Cheater Plot Layout in Plotly
DESCRIPTION: This code demonstrates how to create a cheater plot layout using Plotly. It uses the 'cheaterslope' parameter and axis 'cheatertype' to determine the layout when x-coordinates are not specified.

LANGUAGE: python
CODE:
import plotly.graph_objs as go
import plotly.plotly as py

trace1 = go.Carpet(
    a = [4, 4.5, 5, 6],
    b = [1, 2, 3],
    y = [[2, 3, 5.5, 8],
         [3.5, 4.5, 6.5, 8.5],
         [4, 5, 7.5, 10]],
    cheaterslope = -5,
    aaxis = dict(cheatertype = 'index'),
    baxis = dict(cheatertype = 'value')
)

data = [trace1]

fig = go.Figure(data = data)
py.iplot(fig, filename = "carpet/cheater-layout")

----------------------------------------

TITLE: Updating Title Attribute in Plotly.js
DESCRIPTION: This snippet demonstrates how to update the 'title' attribute from a string to an object with a 'text' property in Plotly.js layouts.

LANGUAGE: javascript
CODE:
var data = [
  {
    x: [1, 2, 3, 4, 5],
    y: [1, 2, 4, 8, 16]
  }
];

var layout = {
  title: { text: "My chart title" },
  xaxis: {
    title: {
      text: "x-axis title"
    }
  },
  yaxis: { title: { text: "y-axis title" } }
};

Plotly.newPlot("myDiv", data, layout);

----------------------------------------

TITLE: Creating Interactive Visualization
DESCRIPTION: Creates interactive scatter plot of top HN submissions using Plotly

LANGUAGE: python
CODE:
# Create a table figure from the DataFrame
top10_story_figure = FF.create_table(top10_story_df)

# Scatter trace for the bubble chart timeseries
story_timeseries_trace = go.Scatter(
    x=top10_story_df['timestamp'],
    y=top10_story_df['score'],
    xaxis='x2',
    yaxis='y2',
    mode='markers',
    text=top10_story_df['title'],
    marker=dict(
        color=[80 + i*5 for i in range(10)],
        size=top10_story_df['score']/50,
        showscale=False
    )
)

----------------------------------------

TITLE: Configuring Layout and Rendering Map
DESCRIPTION: Creates final figure layout with title, annotations, and axis styling, then renders the interactive map.

LANGUAGE: python
CODE:
data = Data([trace1]+traces_cc)

title = u"Average daily surface air temperature anomalies [\u2103]<br> \
in July 2014 with respect to 1981-2010 climatology"

fig = Figure(data=data, layout=layout)

py.iplot(fig, filename="maps", width=1000)

----------------------------------------

TITLE: Displaying Dash App in Jupyter
DESCRIPTION: Shows how to embed a Dash application within a Jupyter notebook using IFrame. Demonstrates integration between Plotly and Dash for interactive visualizations.

LANGUAGE: python
CODE:
from IPython.display import IFrame
IFrame(src= "https://dash-simple-apps.plotly.host/dash-3dscatterplot/", width="100%", height="950px",frameBorder="0")

----------------------------------------

TITLE: KDE Calculation Function
DESCRIPTION: Function that calculates 2D kernel density estimation using scipy.stats.gaussian_kde and prepares data for Plotly contour plots.

LANGUAGE: python
CODE:
def kde_scipy( vals1, vals2, (a,b), (c,d), N ):
    
    #vals1, vals2 are the values of two variables (columns)
    #(a,b) interval for vals1; usually larger than (np.min(vals1), np.max(vals1))
    #(c,d) -"-          vals2 
    
    x=np.linspace(a,b,N)
    y=np.linspace(c,d,N)
    X,Y=np.meshgrid(x,y)
    positions = np.vstack([Y.ravel(), X.ravel()])

    values = np.vstack([vals1, vals2])
    kernel = st.gaussian_kde(values)
    Z = np.reshape(kernel(positions).T, X.shape)
    
    return [x, y, Z]

----------------------------------------

TITLE: Plotly KDE Plot Function
DESCRIPTION: Function that creates a Plotly figure with contour plot visualization of the kernel density estimation.

LANGUAGE: python
CODE:
def make_kdeplot(varX, varY, (a,b), (c,d), N, colorsc, title):
    x, y, Z = kde_scipy(varY, varX, (a,b), (c,d), N )
    
    data = Data([
       Contour(
           z=Z, 
           x=x,
           y=y,
           colorscale=colorsc,
           opacity=0.9,    
           contours=Contours(
               showlines=False)      
        ),        
     ])

    layout = Layout(
        title= title,  
        font= Font(family='Georgia, serif',  color='#635F5D'),
        showlegend=False,
        autosize=False,
        width=650,
        height=650,
        xaxis=XAxis(
            range=[a,b],
            showgrid=False,
            nticks=7
        ),
        yaxis=YAxis(
            range=[c,d],
            showgrid=False,
            nticks=7
        ),
        margin=Margin(
            l=40,
            r=40,
            b=85,
            t=100,
        ),
    )
     
    return Figure( data=data, layout=layout )

----------------------------------------

TITLE: Querying Lead Data from Salesforce
DESCRIPTION: Executes a SOQL query to retrieve lead status and owner information from Salesforce.

LANGUAGE: python
CODE:
leads_for_status = sf.query("SELECT Id, Status, Owner.Name FROM Lead")

----------------------------------------

TITLE: Setting up Plotly display in Jupyter
DESCRIPTION: This code snippet sets up the display for Plotly in Jupyter by importing necessary modules, adding custom fonts, and CSS styling. It also installs the latest version of the publisher package from GitHub.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
    
import publisher
publisher.publish(
    'jupyter-lab-tools.ipynb', 'python/jupyter-lab-tools/', 'IPython Widgets | plotly',
    'Using Plotly FigureWidgets with Jupyter Lab',
    title = 'Jupyter Lab with FigureWidget',
    name = 'Jupyter Lab with FigureWidget',
    has_thumbnail='true', thumbnail='thumbnail/figurewidget-jupyterlab.png', 
    language='python', 
    display_as='chart_events', order=2)

----------------------------------------

TITLE: Creating a Choropleth for California and Nearby States
DESCRIPTION: This example demonstrates creating a choropleth map for California and surrounding states, with custom color scaling and binning.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import numpy as np
import pandas as pd

df_sample = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/minoritymajority.csv')
df_sample_r = df_sample[df_sample['STNAME'] == 'California']

values = df_sample_r['TOT_POP'].tolist()
fips = df_sample_r['FIPS'].tolist()

colorscale = [
    'rgb(193, 193, 193)',
    'rgb(239,239,239)',
    'rgb(195, 196, 222)',
    'rgb(144,148,194)',
    'rgb(101,104,168)',
    'rgb(65, 53, 132)'
]

fig = ff.create_choropleth(
    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada', 'Oregon', ' Idaho'],
    binning_endpoints=[14348, 63983, 134827, 426762, 2081313], colorscale=colorscale,
    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5}, round_legend_values=True,
    legend_title='Population by County', title='California and Nearby States'
)
py.iplot(fig, filename='choropleth_california_and_surr_states_outlines')

----------------------------------------

TITLE: Loading Geographic Data with Basemap
DESCRIPTION: Loads NetCDF file containing temperature data and processes geographic coordinates.

LANGUAGE: python
CODE:
# Path the downloaded NetCDF file (different for each download)
f_path = '/home/etienne/Downloads/compday.Bo3cypJYyE.nc'

# Retrieve data from NetCDF file
with netcdf.netcdf_file(f_path, 'r') as f:
    lon = f.variables['lon'][::]    # copy as list
    lat = f.variables['lat'][::-1]  # invert the latitude vector -> South to North
    air = f.variables['air'][0,::-1,:]  # squeeze out the time dimension, 
                                        # invert latitude index

----------------------------------------

TITLE: Reading R Documentation Source File in Python
DESCRIPTION: Opens and reads the contents of an R documentation file into a variable named 'docs'.

LANGUAGE: python
CODE:
with open('../_posts/markdown/layout.R') as f:
    docs = f.read()

----------------------------------------

TITLE: Loading and Displaying Apple Stock Data with Plotly in Python
DESCRIPTION: This code loads Apple stock price data from a CSV file, creates a sample dataframe, and displays it as a table using Plotly's Figure Factory.

LANGUAGE: python
CODE:
apple_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
df = apple_data[0:10]

table = FF.create_table(df)
py.iplot(table, filename='apple-data-sample')

----------------------------------------

TITLE: Creating a Box Plot of Earthquake Magnitudes with Plotly
DESCRIPTION: Generates a box plot of earthquake magnitudes using Plotly, showing the distribution and outliers of earthquake strengths.

LANGUAGE: python
CODE:
mag_jitter_plot = [{'y': df['mag'], 
                 'name': 'Earthquake Magnitude',
                 'type': 'box',
                 'boxpoints': 'outliers', 
                 'jitter': 0.9,
}]

data_jitter = Data(mag_jitter_plot)

fig_jitter = Figure(data=data_jitter)

py.iplot(fig_jitter, filename='boxplot_with_jitter')

----------------------------------------

TITLE: Initializing Surface Data with NumPy
DESCRIPTION: Creates the initial 3D surface data using NumPy arrays. Defines a meshgrid and calculates z-values using a mathematical function.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

import numpy as np

xx=np.linspace(-3.5, 3.5, 100)
yy=np.linspace(-3.5, 3.5, 100)
x,y=np.meshgrid(xx, yy)
z=np.exp(-(x-1)**2-y**2)-10*(x**3+y**4-x/5)*np.exp(-(x**2+y**2))

----------------------------------------

TITLE: Finding the Determinant of a Matrix in Python
DESCRIPTION: This snippet calculates the determinant of a 2x2 matrix using NumPy's linear algebra function. It defines a matrix and computes its determinant.

LANGUAGE: python
CODE:
matrix = np.matrix(
    [[1, 4],
     [2, 0]]
)

det = np.linalg.det(matrix)
det

----------------------------------------

TITLE: Creating Subcategory Axes in Plotly Python
DESCRIPTION: This example shows how to create subcategory axes using box plots. It demonstrates custom axis labeling and grouping of data into categories and subcategories.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go

trace1 = go.Box(
  x = [2, 3, 1, 5],
  y = ["A", "A", "A", "A"],
  line = dict(color = 'gray'),
  name = "A",
  orientation = "h"
)

trace2 = go.Box(
  x = [8, 3, 6, 5],
  y = ["B", "B", "B", "B"],
  line = dict(color = 'gray'),
  name = "B",
  orientation = "h"
)

trace3 = go.Box(
  x = [2, 3, 2, 5],
  y = ["C", "C", "C", "C"],
  line = dict(color = 'gray'),
  name = "C",
  orientation = "h"
)

trace4 = go.Box(
  x = [7.5, 3, 6, 4],
  y = ["D", "D", "D", "D"],
  line = dict(color = 'gray'),
  name = "D",
  orientation = "h"
)

data = [trace1, trace2, trace3, trace4]

layout = go.Layout(
  annotations = [
    dict(
      x = -0.0951769406393,
      y = 1.06972670892,
      showarrow = False,
      text = "Subgroup",
      xref = "paper",
      yref = "paper"
    ),
    dict(
      x = -0.235516552511,
      y = 1.07060587474,
      showarrow = False,
      text = "Group",
      xref = "paper",
      yref = "paper"
    ),
    dict(
      x = -0.235516552511,
      y = 0.922906017856,
      showarrow = False,
      text = "One",
      xref = "paper",
      yref = "paper"
    ),
    dict(
      x = -0.235516552511,
      y = 0.375,
      showarrow = False,
      text = "Two",
      xref = "paper",
      yref = "paper"
    )
  ],
  height = 400,
  hovermode = "closest",
  legend = dict(
    x = 0.986145833333,
    y = 0.936263886049
  ),
  margin = dict(
    r = 10,
    t = 25,
    b = 40,
    l = 110
  ),
  shapes = [
    dict(
      line = dict(
        color = "rgba(68, 68, 68, 0.5)",
        width = 1
      ),
      type = "line",
      x0 = -0.3,
      x1 = 1.2,
      xref = "paper",
      y0 = 0.5,
      y1 = 0.5,
      yref = "paper"
    ),
    dict(
      line = dict(
        color = "rgba(68, 68, 68, 0.63)",
        width = 1
      ),
      type = "line",
      x0 = -0.3,
      x1 = 1.2,
      xref = "paper",
      y0 = 1,
      y1 = 1,
      yref = "paper"
    )
  ],
  showlegend = True,
  title = "",
  width = 600,
  xaxis = dict(
    domain = [0, 1]
  ),
  yaxis = dict(
    autorange = True,
    categoryorder = "category descending",
    domain = [0, 1],
    range = [-0.5, 3.5],
    showline = True,
    title = "",
    type = "category"
  )
)

fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename = 'subcategory-axes')

----------------------------------------

TITLE: Creating Simple Horizontal Bullet Chart
DESCRIPTION: Creates a basic horizontal bullet chart using pandas DataFrame loaded from JSON data. Demonstrates the basic usage of ff.create_bullet() with markers, measures, ranges, subtitles and titles.

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.figure_factory as ff
import pandas as pd

data = pd.read_json('https://cdn.rawgit.com/plotly/datasets/master/BulletData.json')

fig = ff.create_bullet(
    data, markers='markers', measures='measures',
    ranges='ranges', subtitles='subtitle', titles='title',
)
py.iplot(fig, filename='bullet chart from a dataframe')

----------------------------------------

TITLE: Creating Interactive Widgets
DESCRIPTION: Initialize ipywidgets for filtering data including month slider, date checkbox, airline dropdown and origin airport selector

LANGUAGE: python
CODE:
month = widgets.IntSlider(
    value=1.0,
    min=1.0, 
    max=12.0,
    step=1.0,
    description='Month:',
    continuous_update=False
)

use_date = widgets.Checkbox(
    description='Date: ',
    value=True,
)

container = widgets.HBox(children=[use_date, month])

textbox = widgets.Dropdown(
    description='Airline:   ',
    value='DL',
    options=df['carrier'].unique().tolist()
)

origin = widgets.Dropdown(
    options=list(df['origin'].unique()),
    value='LGA',
    description='Origin Airport:',
)

----------------------------------------

TITLE: Creating Scatter Trace for China Data in Plotly
DESCRIPTION: Creates a Scatter trace object for China data with markers and lines.

LANGUAGE: python
CODE:
trace_china = Scatter(
    Quartz7_data['data'][0],
    mode='markers+lines'
)

----------------------------------------

TITLE: Creating Plotly Histogram from Spark DataFrame
DESCRIPTION: Queries a Spark DataFrame for ride durations under 2 hours and creates a Plotly histogram.

LANGUAGE: python
CODE:
df2 = sqlCtx.sql("SELECT Duration as d1 from bay_area_bike where Duration < 7200")
data = [go.Histogram(x=df2.toPandas()['d1'])]
py.iplot(data, filename="spark/less_2_hour_rides")

----------------------------------------

TITLE: Simple Presentation Example
DESCRIPTION: Basic example showing how to create a two-slide presentation using markdown syntax

LANGUAGE: python
CODE:
import plotly.plotly as py
import plotly.presentation_objs as pres

filename = 'simple-pres'
markdown_string = """
# slide 1
There is only one slide.

---
# slide 2
Again, another slide on this page.

"""

my_pres = pres.Presentation(markdown_string)
pres_url_0 = py.presentation_ops.upload(my_pres, filename)

----------------------------------------

TITLE: Setting Chart Studio Enterprise Domain
DESCRIPTION: Sets the plotly_domain environment variable to point to a Chart Studio Enterprise server URL for enterprise users.

LANGUAGE: r
CODE:
Sys.setenv("plotly_domain"="https://plotly.your-company.com")

----------------------------------------

TITLE: Creating DataDownloader Class for Market Data
DESCRIPTION: Implements a DataDownloader class that can fetch market data from various sources including Bloomberg, Quandl and CSV files. Returns data as Pandas dataframes.

LANGUAGE: python
CODE:
# for time series manipulation
import pandas

class DataDownloader:
    def download_time_series(self, vendor_ticker, pretty_ticker, start_date, source, csv_file = None):

        if source == 'Quandl':
            import Quandl
            # Quandl requires API key for large number of daily downloads
            # https://www.quandl.com/help/api
            spot = Quandl.get(vendor_ticker)    # Bank of England's database on Quandl
            spot = pandas.DataFrame(data=spot['Value'], index=spot.index)
            spot.columns = [pretty_ticker]

        elif source == 'Bloomberg':
            from bbg_com import HistoricalDataRequest
            req = HistoricalDataRequest([vendor_ticker], ['PX_LAST'], start = start_date)
            req.execute()

            spot = req.response_as_single()
            spot.columns = [pretty_ticker]
        elif source == 'CSV':
            dateparse = lambda x: pandas.datetime.strptime(x, '%Y-%m-%d')

            # in case you want to use a source other than Bloomberg/Quandl
            spot = pandas.read_csv(csv_file, index_col=0, parse_dates=0, date_parser=dateparse)

        return spot

----------------------------------------

TITLE: Version Check for Plotly
DESCRIPTION: Checks the installed version of Plotly to ensure compatibility with 2D Density Plots (requires v2.0.0+)

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating a Basic Polar Chart with Plotly in Python
DESCRIPTION: This snippet demonstrates how to create a basic polar chart with multiple traces using Plotly in Python. It reads data from a CSV file and creates five scatter traces with different line colors.

LANGUAGE: Python
CODE:
import plotly.plotly as py
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv('polar_dataset.csv')

trace1 = go.Scatter(
    r=df['x1'],
    t=df['y'],
    mode='lines',
    name='go.Figure8',
    marker=dict(
        color='none',
        line=dict(
            color='peru'
        )
    )
)
# ... [additional traces omitted for brevity]

data = [trace1, trace2, trace3, trace4, trace5]
layout = go.Layout(
    title='Mic Patterns',
    font=dict(
        family='Arial, sans-serif;',
        size=12,
        color='#000'
    ),
    orientation=-90
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='polar-line')

----------------------------------------

TITLE: Importing Plotly and Checking Version in Python
DESCRIPTION: Imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Creating SQLAlchemy Engine
DESCRIPTION: Initialize SQLAlchemy engine for connecting to Redshift database using psycopg2 adapter.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
engine_string = "postgresql+psycopg2://%s:%s@%s:%d/%s" \
% (redshift_user, redshift_pass, redshift_endpoint, port, dbname)
engine = create_engine(engine_string)

----------------------------------------

TITLE: Saving Chart Studio Plot in Folders
DESCRIPTION: Saves a plot to a specific folder in Chart Studio Enterprise by including a forward slash in the filename parameter. This feature requires a Chart Studio Enterprise subscription.

LANGUAGE: r
CODE:
api_create(p, filename="r-docs/name-of-my-chart-studio-file")

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Imports plotly and checks the installed version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Imports Plotly and checks the installed version number. Range sliders require Plotly version 1.9.7 or higher.

LANGUAGE: python
CODE:
import plotly

plotly.__version__

----------------------------------------

TITLE: Creating Chart Studio Plot with R Plotly
DESCRIPTION: Creates a new Chart Studio figure from an R plotly chart using the api_create() function. The example creates a scatter plot using the iris dataset.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
api_create(p)

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet demonstrates how to check the installed version of the Plotly library in Python. It imports the plotly module and prints the version number.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Handling Connection Error in Plotly Python API
DESCRIPTION: This snippet shows the error message that may occur when using Plotly behind a corporate firewall. It demonstrates a connection error due to a timeout.

LANGUAGE: python
CODE:
requests.exceptions.ConnectionError: ('Connection aborted.', TimeoutError(10060, ...))

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This code snippet imports the Plotly library and prints its version number.

LANGUAGE: python
CODE:
import plotly 
plotly.__version__

----------------------------------------

TITLE: Creating a Private Graph with Plotly in R
DESCRIPTION: This snippet shows how to create a private graph using plotly and api_create(). Private graphs can only be viewed by the owner and require a Chart Studio Enterprise subscription.

LANGUAGE: r
CODE:
library(plotly)
p <- plot_ly(x = c(0, 2, 4), y = c(0, 4, 2), type = 'scatter', mode = 'markers+lines')
chart_link = api_create(p, filename = "private-graph", sharing = "private")
chart_link

----------------------------------------

TITLE: Committing and Pushing Changes to Plotly Documentation
DESCRIPTION: Git commands to add, commit, and push changes to a feature branch in the Plotly documentation repository.

LANGUAGE: bash
CODE:
git add file-a
git add file-b
git commit -m 'message about your changes'
git push origin your_feature_branch

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple code to import Plotly and check its installed version

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Version Check for Plotly Installation
DESCRIPTION: Simple code to check the installed version of Plotly package

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: Simple version check of the installed Plotly library

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version in Python
DESCRIPTION: This snippet imports the Plotly library and prints its version number. It's useful for ensuring you have the latest version of Plotly installed.

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Checking Plotly Version
DESCRIPTION: Imports Plotly and displays the installed version number

LANGUAGE: python
CODE:
import plotly
plotly.__version__

----------------------------------------

TITLE: Rendering Jekyll Page Header for Plotly R Statistical Charts
DESCRIPTION: This HTML snippet creates the header section of the documentation page. It includes the page title, description, and placeholders for additional content such as language selection and dashboard links.

LANGUAGE: html
CODE:
<header class="--welcome">
	<div class="--welcome-body">
		<!--div.--wrap-inner-->
		<div class="--title">

			<div class="--body">
				<h1>Plotly R Library Statistical Charts</h1>
				<p>{{page.description}}</p>
        {% include layouts/page-another-language.html %}
				{% include layouts/dashplug.html %}
			</div>
		</div>
	</div>
</header>

----------------------------------------

TITLE: Configuring Jekyll Front Matter for Plotly R Statistical Charts Page
DESCRIPTION: This YAML front matter defines metadata for a Jekyll page about Plotly's R statistical charts. It specifies the page description, display category, language, layout, and other properties used for rendering and organizing the content.

LANGUAGE: yaml
CODE:
---
description: Plotly's R graphing library makes interactive, publication-quality graphs
  online. Examples of how to make statistical charts.
display_as: statistical
language: r
layout: langindex
name: Statistical Charts
page_type: example_index
permalink: r/statistical-charts/
thumbnail: thumbnail/mixed.jpg
---

----------------------------------------

TITLE: Configuring Redirect for Plotly R Chart Events Documentation
DESCRIPTION: This YAML front matter snippet sets up a redirect from the '/r/chart-events/' path to the Dash for R documentation site. It's typically used in static site generators to manage URL redirections.

LANGUAGE: yaml
CODE:
---
permalink: r/chart-events/
redirect_to: https://dashr.plot.ly
---

----------------------------------------

TITLE: Makefile Target Definitions for Plotly Documentation Search
DESCRIPTION: A collection of make targets that update various Algolia search indices for different sections of Plotly documentation. Includes targets for JavaScript, Python, R, and schema reference documentation updates.

LANGUAGE: makefile
CODE:
search_readme -> less this file

update_js_search -> update the plotly.js search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/js_docs

update_python_search -> update the python search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/python_docs

update_r_search -> update the r search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/r_docs

update_ref_search -> update the schema search index: https://www.algolia.com/apps/7EK9KHJW8M/explorer/browse/schema

----------------------------------------

TITLE: Configuring Jupyter Notebook Display and Publishing Results
DESCRIPTION: This code sets up custom CSS for the Jupyter notebook, installs the Plotly publisher package, and publishes the notebook results. It configures the display of fonts and styles, and uses the publisher to share the notebook content.

LANGUAGE: python
CODE:
from IPython.display import display, HTML

display(HTML('<link href="//fonts.googleapis.com/css?family=Open+Sans:600,400,300,200|Inconsolata|Ubuntu+Mono:400,700" rel="stylesheet" type="text/css" />'))
display(HTML('<link rel="stylesheet" type="text/css" href="http://help.plot.ly/documentation/all_static/css/ipython-notebook-custom.css">'))

! pip install git+https://github.com/plotly/publisher.git --upgrade
import publisher
publisher.publish(
    'python_Interpolation_and_Extrapolation_in_2D.ipynb', 'python/interpolation-and-extrapolation-in-2d/', 'Interpolation and Extrapolation in 2D | plotly',
    'Learn how to interpolation and extrapolate data in two dimensions',
    title='Interpolation and Extrapolation in 2D in Python. | plotly',
    name='Interpolation and Extrapolation in 2D',
    language='python',
    page_type='example_index', has_thumbnail='false', display_as='mathematics', order=4,
    ipynb= '~notebook_demo/105')