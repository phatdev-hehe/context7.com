TITLE: Defining a Lit Component
DESCRIPTION: Shows how to create a basic Lit component class using both TypeScript (with decorator) and JavaScript approaches. The component extends LitElement and is registered with the browser as a custom element named 'my-element'.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {
}

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement {
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Declaring Reactive Properties in TypeScript with Decorators
DESCRIPTION: Example of declaring reactive properties in a Lit component using TypeScript decorators. Shows how to use the @property decorator with options.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  @property({type: String})
  mode?: string;

  @property({attribute: false})
  data = {};
}

----------------------------------------

TITLE: Implementing a Countdown Timer Component with Lit
DESCRIPTION: This snippet demonstrates a Lit component for a countdown timer. It showcases reactive properties, declarative templates, scoped styles, and lifecycle methods.

LANGUAGE: typescript
CODE:
import {LitElement, html, css} from 'lit';
import {customElement, property} from 'lit/decorators.js';

@customElement('countdown-timer')
export class CountdownTimer extends LitElement {
  static styles = css`
    :host {
      display: block;
      font-family: sans-serif;
      text-align: center;
    }
    .time {
      font-size: 2em;
      font-weight: bold;
    }
  `;

  @property({type: Number})
  duration = 60;

  @property({type: Number})
  private remaining = 0;

  private intervalId: number | undefined;

  render() {
    return html`
      <div>Remaining time:</div>
      <div class="time">${this.remaining}</div>
      <button @click=${this.start}>Start timer</button>
    `;
  }

  start() {
    this.remaining = this.duration;
    this.intervalId = setInterval(() => this.countdown(), 1000);
  }

  countdown() {
    if (this.remaining > 0) {
      this.remaining--;
    } else {
      clearInterval(this.intervalId);
    }
  }
}

----------------------------------------

TITLE: Installing Lit via NPM
DESCRIPTION: Command to install the Lit library using npm package manager.

LANGUAGE: shell
CODE:
npm i lit

----------------------------------------

TITLE: Installing Lit via npm
DESCRIPTION: This snippet shows how to install Lit using npm. It's the recommended method for projects using npm for client-side dependencies.

LANGUAGE: sh
CODE:
npm i lit

----------------------------------------

TITLE: Custom Property Accessors in Lit
DESCRIPTION: Example of implementing custom getter/setter for a reactive property.

LANGUAGE: typescript
CODE:
private _prop = 0;

@property()
set prop(val: number) {
  this._prop = Math.floor(val);
}

get prop() { return this._prop; }

LANGUAGE: javascript
CODE:
static properties = {
  prop: {},
};

_prop = 0;

set prop(val) {
  this._prop = Math.floor(val);
}

get prop() { return this._prop; }

----------------------------------------

TITLE: Implementing the Render Method
DESCRIPTION: Demonstrates how to add a render() method to a Lit component that returns a TemplateResult using the html tag function. This method defines the component's internal DOM structure.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <p>Hello world! From my-element.</p>
  `;
}

----------------------------------------

TITLE: Defining a Simple Greeting Component in Lit (TypeScript)
DESCRIPTION: This code snippet demonstrates a basic Lit component that displays a greeting message. It showcases the component structure, reactive properties, and rendering functionality.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit/decorators.js';

@customElement('simple-greeting')
export class SimpleGreeting extends LitElement {
  @property()
  name = 'World';

  render() {
    return html`<p>Hello, ${this.name}!</p>`;
  }
}

----------------------------------------

TITLE: Defining Lit Component in JavaScript
DESCRIPTION: Demonstrates how to create and register a Lit component using plain JavaScript without decorators.

LANGUAGE: javascript
CODE:
export class SimpleGreeting extends LitElement { /* ... */  }
customElements.define('simple-greeting', SimpleGreeting);

----------------------------------------

TITLE: Implementing Basic Lit Component in TypeScript
DESCRIPTION: Example shows a simple Lit component demonstrating key concepts like property definition, rendering, and templating. The component is a greeting component that uses decorators to define reactive properties.

LANGUAGE: typescript
CODE:
{% playground-example "v3-docs/components/overview/simple-greeting" "simple-greeting.ts" %}

----------------------------------------

TITLE: TypeScript Type Declarations for Lit Component
DESCRIPTION: Shows how to properly type a Lit component in TypeScript including HTMLElementTagNameMap declaration for proper type inference.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {
  @property({type: Number})
  aNumber: number = 5;
  /* ... */
}

declare global {
  interface HTMLElementTagNameMap {
    "my-element": MyElement;
  }
}

----------------------------------------

TITLE: Defining Lit Component in JavaScript
DESCRIPTION: Demonstrates how to define and register a Lit component using plain JavaScript without decorators.

LANGUAGE: javascript
CODE:
export class SimpleGreeting extends LitElement { /* ... */  }
customElements.define('simple-greeting', SimpleGreeting);

----------------------------------------

TITLE: Defining Lit Component with TypeScript Decorator
DESCRIPTION: Shows how to create a Lit component using TypeScript with the @customElement decorator to register the custom element.

LANGUAGE: typescript
CODE:
@customElement('simple-greeting')
export class SimpleGreeting extends LitElement { /* ... */ }

----------------------------------------

TITLE: Implementing a Countdown Timer Component with Lit in JavaScript
DESCRIPTION: This snippet demonstrates creating a countdown timer web component using Lit. It showcases reactive properties, declarative templates, and scoped styles. The component updates every second and stops at zero.

LANGUAGE: javascript
CODE:
import {LitElement, html, css} from 'lit';
import {customElement, property} from 'lit/decorators.js';

@customElement('my-timer')
export class MyTimer extends LitElement {
  static styles = css`
    :host {
      display: block;
      font-size: 5em;
    }`;

  @property({type: Number})
  duration = 60;

  @property({type: Number})
  remaining = 60;

  _timer;

  render() {
    return html`${this.remaining} seconds`;
  }

  connectedCallback() {
    super.connectedCallback();
    this._timer = setInterval(() => this._tick(), 1000);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    clearInterval(this._timer);
  }

  _tick() {
    if (this.remaining > 0) {
      this.remaining--;
    } else {
      clearInterval(this._timer);
    }
  }
}

----------------------------------------

TITLE: Implementing render Method
DESCRIPTION: Example of implementing the render method to define the component's template.

LANGUAGE: javascript
CODE:
render() {
  const header = `<header>${this.header}</header>`;
  const content = `<section>${this.content}</section>`;
  return html`${header}${content}`;
}

----------------------------------------

TITLE: Internal Reactive State in Lit
DESCRIPTION: Shows how to declare internal reactive state using @state decorator or state property option.

LANGUAGE: typescript
CODE:
@state()
private _counter = 0;

LANGUAGE: javascript
CODE:
static properties = {
  _counter: {state: true}
};

constructor() {
  super();
  this._counter = 0;
}

----------------------------------------

TITLE: Importing Lit in TypeScript
DESCRIPTION: This snippet demonstrates how to import Lit components and decorators in a TypeScript file. It includes the core LitElement and html template literal, as well as decorators for custom elements and properties.

LANGUAGE: ts
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit/decorators.js';

----------------------------------------

TITLE: Using Typed Lit Component in TypeScript
DESCRIPTION: Demonstrates usage of a properly typed Lit component with TypeScript type checking.

LANGUAGE: typescript
CODE:
const myElement = document.createElement('my-element');
myElement.aNumber = 10;

----------------------------------------

TITLE: Importing Lit in JavaScript
DESCRIPTION: This snippet shows how to import the core Lit components in a JavaScript file. It includes the LitElement base class and the html template literal for defining component templates.

LANGUAGE: js
CODE:
import {LitElement, html} from 'lit';

----------------------------------------

TITLE: Declaring Basic Reactive Property in Lit
DESCRIPTION: Demonstrates basic reactive property declaration using TypeScript decorators and JavaScript static properties field.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  @property()
  name?: string;
}

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  static properties = {
    name: {},
  };
}

----------------------------------------

TITLE: Composing Templates with Methods
DESCRIPTION: Demonstrates how to compose a complex template from smaller template methods for header, footer, and main content sections.

LANGUAGE: typescript
CODE:
class MyPage extends LitElement {
  headerTemplate() {
    return html`<header>Header</header>`;
  }

  mainTemplate() {
    return html`<main>Main</main>`;
  }

  footerTemplate() {
    return html`<footer>Footer</footer>`;
  }

  render() {
    return html`
      ${this.headerTemplate()}
      ${this.mainTemplate()}
      ${this.footerTemplate()}
    `;
  }
}

----------------------------------------

TITLE: Adding Basic Static Styles
DESCRIPTION: Example of adding static styles to a Lit component using the css tagged template literal and the static styles field.

LANGUAGE: TypeScript
CODE:
static styles = css`
  :host {
    display: block;
    border: solid 1px gray;
    padding: 16px;
    max-width: 800px;
  }`;

----------------------------------------

TITLE: Defining Basic Lit Component Template
DESCRIPTION: Shows how to define a render() method in a Lit component using the html tagged template literal.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <h1>Hello ${this.name}</h1>
  `;
}

----------------------------------------

TITLE: Importing Lit in TypeScript
DESCRIPTION: TypeScript code showing how to import LitElement, html and decorators from the Lit library.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit/decorators.js';

----------------------------------------

TITLE: Basic Lit Template with HTML Tag
DESCRIPTION: Demonstrates the basic syntax for creating a Lit template using the html tagged template literal. Shows how to interpolate a dynamic name variable into an h1 element.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Defining a LitElement Component with Decorators
DESCRIPTION: Demonstrates how to use the @customElement and @property decorators to create a LitElement component with less boilerplate code. The example shows a basic element definition with a reactive property and a render method.

LANGUAGE: javascript
CODE:
import {LitElement, html, customElement, property} from 'lit-element';

@customElement('my-element')
class MyElement extends LitElement {

 // Declare observed properties
 @property()
 adjective = 'awesome';

 // Define the element's template
 render() {
   return html`<p>your ${this.adjective} template here</p>`;
 }
}

----------------------------------------

TITLE: Creating a Simple lit-html Template
DESCRIPTION: Shows how to create a basic lit-html template function that generates an H1 element with a dynamic title. This illustrates the core syntax of lit-html templates.

LANGUAGE: javascript
CODE:
let header = (title) => html`<h1>${title}</h1>`;

----------------------------------------

TITLE: Setting Boolean Attributes in Lit Templates
DESCRIPTION: Illustrates how to use expressions to set boolean attributes in a Lit template.

LANGUAGE: js
CODE:
html`<div ?hidden=${!show}></div>`

----------------------------------------

TITLE: Rendering HTML with Lit Template in JavaScript
DESCRIPTION: Demonstrates how to create a simple Lit template using the html tag and a dynamic expression. The template renders an h1 element with a dynamic name value.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Importing Lit Decorators
DESCRIPTION: Examples of importing decorators from Lit, showing both bulk and individual imports.

LANGUAGE: javascript
CODE:
import {customElement, property, eventOptions, query} from 'lit/decorators.js';

LANGUAGE: javascript
CODE:
import {customElement} from 'lit/decorators/custom-element.js';
import {eventOptions} from 'lit/decorators/event-options.js';

----------------------------------------

TITLE: Using Lit Component in HTML
DESCRIPTION: Shows how to use a defined Lit component in HTML markup.

LANGUAGE: html
CODE:
<simple-greeting name="Markup"></simple-greeting>

----------------------------------------

TITLE: Dynamic Classes and Styles
DESCRIPTION: Example of using classMap and styleMap directives for dynamic styling based on component state.

LANGUAGE: TypeScript
CODE:
render() {
  return html`
    <div class=${classMap({active: this.active})} 
         style=${styleMap({color: this.color})}>
      Content
    </div>
  `;
}

----------------------------------------

TITLE: Composing Templates in a Lit Component
DESCRIPTION: Shows how to compose a larger template from smaller template methods within a Lit component. The example creates a <my-page> component with header, footer, and main content templates.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('my-page')
export class MyPage extends LitElement {
  headerTemplate() {
    return html`<header>Header</header>`;
  }

  articleTemplate() {
    return html`<article>Article</article>`;
  }

  footerTemplate() {
    return html`<footer>Footer</footer>`;
  }

  render() {
    return html`
      ${this.headerTemplate()}
      ${this.articleTemplate()}
      ${this.footerTemplate()}
    `;
  }
}

----------------------------------------

TITLE: Composing Templates with Imports
DESCRIPTION: Shows how to compose templates by importing and using other custom elements within a template.

LANGUAGE: typescript
CODE:
import './header.js';
import './footer.js';

class MyPage extends LitElement {
  render() {
    return html`
      <my-header></my-header>
      <main>Main content</main>
      <my-footer></my-footer>
    `;
  }
}

----------------------------------------

TITLE: Creating an Async Directive for Promise Resolution in Lit
DESCRIPTION: Demonstrates how to create an async directive that resolves a promise and updates the DOM asynchronously using the setValue() method.

LANGUAGE: typescript
CODE:
class ResolvePromise extends AsyncDirective {
  render(promise: Promise<unknown>) {
    Promise.resolve(promise).then((resolvedValue) => {
      // Rendered asynchronously:
      this.setValue(resolvedValue);
    });
    // Rendered synchronously:
    return `Waiting for promise to resolve`;
  }
}
export const resolvePromise = directive(ResolvePromise);

----------------------------------------

TITLE: Basic Lit Decorator Usage in TypeScript
DESCRIPTION: Example showing how to use @customElement and @property decorators to define a Lit component with a reactive property.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {

  @property()
  greeting = 'Welcome';

}

----------------------------------------

TITLE: Initializing Properties in Constructor
DESCRIPTION: Example of setting default values for properties in the constructor of a Lit component.

LANGUAGE: javascript
CODE:
constructor() {
  super();
  this.foo = 'foo';
  this.bar = 'bar';
}

----------------------------------------

TITLE: Basic Lit Template Expression Examples
DESCRIPTION: Demonstrates various types of expressions in Lit templates including child nodes, attributes, boolean attributes, properties and event listeners.

LANGUAGE: javascript
CODE:
html`\n<h1>Hello ${name}</h1>\n<ul>\n  ${listItems}\n</ul>`

LANGUAGE: javascript
CODE:
html`<div class=${highlightClass}></div>`

LANGUAGE: javascript
CODE:
html`<div ?hidden=${!show}></div>`

LANGUAGE: javascript
CODE:
html`<input .value=${value}>`

LANGUAGE: javascript
CODE:
html`<button @click=${this._clickHandler}>Go</button>`

LANGUAGE: javascript
CODE:
html`<input ${ref(inputRef)}>`

----------------------------------------

TITLE: Rendering Child Nodes in Lit Templates
DESCRIPTION: Demonstrates how to use expressions to render child nodes in a Lit template.

LANGUAGE: js
CODE:
html`
<h1>Hello ${name}</h1>
<ul>
  ${listItems}
</ul>`

----------------------------------------

TITLE: Rendering Composed Components in Lit
DESCRIPTION: Demonstrates how to compose smaller components within a Lit component's render method. This example shows a top bar component with nested icon button and title elements.

LANGUAGE: javascript
CODE:
render() {
  return html`
    <top-bar>
      <icon-button icon="menu" slot="nav-button"></icon-button>
      <span slot="title">Fuzzy</span>
    </top-bar>
    `;
}

----------------------------------------

TITLE: Firing a Custom Event from Lit Component
DESCRIPTION: Shows how to create and dispatch a custom event from within a Lit component, including setting custom data in the event detail.

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  render() {
    return html`<div>Hello World</div>`;
  }
  firstUpdated(changedProperties) {
    let event = new CustomEvent('my-event', {
      detail: {
        message: 'Something important happened'
      }
    });
    this.dispatchEvent(event);
  }
}

----------------------------------------

TITLE: Basic Static Styles in Lit
DESCRIPTION: Defines basic scoped styles using the static styles class field with the css tagged template literal.

LANGUAGE: TypeScript
CODE:
static styles = css`
  :host {
    display: block;
  }
  .content {
    color: blue;
  }`;

----------------------------------------

TITLE: Importing Lit in JavaScript
DESCRIPTION: JavaScript code showing how to import LitElement and html from the Lit library.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';

----------------------------------------

TITLE: Defining Custom Lit Element Component
DESCRIPTION: Shows how to create and register a custom Lit component using both TypeScript decorator syntax and JavaScript customElements.define(). The component must use a hyphenated name for browser compatibility.

LANGUAGE: typescript
CODE:
@customElement('word-viewer')
export class WordViewer extends LitElement { /* ... */ }

LANGUAGE: javascript
CODE:
export class WordViewer extends LitElement { /* ... */  }
customElements.define('word-viewer', WordViewer);

----------------------------------------

TITLE: Using Repeat Directive in Lit Templates
DESCRIPTION: Shows the syntax for using the repeat directive which performs efficient updates of lists based on unique keys.

LANGUAGE: typescript
CODE:
repeat(items, keyFunction, itemTemplate)

----------------------------------------

TITLE: Declaring Reactive Properties in JavaScript with Static Properties Field
DESCRIPTION: Example of declaring reactive properties in a Lit component using the static properties field in JavaScript. Demonstrates property options.

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  static properties = {
    mode: {type: String},
    data: {attribute: false},
  };

  constructor() {
    super();
    this.data = {};
  }
}

----------------------------------------

TITLE: Using Host Selectors
DESCRIPTION: Shows how to style the component itself using :host selectors with conditional styling.

LANGUAGE: JavaScript
CODE:
static styles = css`
  :host {
    display: block;
  }
  :host([hidden]) {
    display: none;
  }`;

----------------------------------------

TITLE: Basic Controller Creation in TypeScript
DESCRIPTION: Shows how to create a basic reactive controller that registers itself with a host component.

LANGUAGE: typescript
CODE:
class ClockController implements ReactiveController {
  private host: ReactiveControllerHost;

  constructor(host: ReactiveControllerHost) {
    // Store a reference to the host
    this.host = host;
    // Register for lifecycle updates
    host.addController(this);
  }
}

----------------------------------------

TITLE: Implementing willUpdate Method
DESCRIPTION: Example of implementing the willUpdate method to compute derived values before rendering.

LANGUAGE: typescript
CODE:
willUpdate(changedProperties: PropertyValues<this>) {
  // only need to check changed properties for an expensive computation.
  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
  }
}

render() {
  return html`SHA: ${this.sha}`;
}

LANGUAGE: javascript
CODE:
willUpdate(changedProperties) {
  // only need to check changed properties for an expensive computation.
  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
  }
}

render() {
  return html`SHA: ${this.sha}`;
}

----------------------------------------

TITLE: Implementing willUpdate Method
DESCRIPTION: Example of implementing the willUpdate method to compute derived values before rendering.

LANGUAGE: typescript
CODE:
willUpdate(changedProperties: PropertyValues<this>) {
  // only need to check changed properties for an expensive computation.
  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
  }
}

render() {
  return html`SHA: ${this.sha}`;
}

LANGUAGE: javascript
CODE:
willUpdate(changedProperties) {
  // only need to check changed properties for an expensive computation.
  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
  }
}

render() {
  return html`SHA: ${this.sha}`;
}

----------------------------------------

TITLE: Theming with CSS Custom Properties
DESCRIPTION: Demonstrates how to create themable components using CSS custom properties and inheritance.

LANGUAGE: JavaScript
CODE:
static styles = css`
  :host {
    background-color: var(--my-background, yellow);
  }`;

----------------------------------------

TITLE: Creating a Lit Component in TypeScript
DESCRIPTION: Example of creating a Lit component using TypeScript. It demonstrates the use of decorators and the basic structure of a Lit element.

LANGUAGE: ts
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('my-element')
class MyElement extends LitElement {
  render() {
    return html`
      <div>Hello from MyElement!</div>
    `;
  }
}

----------------------------------------

TITLE: Adding Click Event Handler in Lit Template
DESCRIPTION: Demonstrates how to add a basic click event handler to a button element in a Lit component template using the @click syntax.

LANGUAGE: html
CODE:
<button @click=${this.handleClick}>Click me!</button>

----------------------------------------

TITLE: Setting Properties in Lit Templates
DESCRIPTION: Demonstrates how to use expressions to set properties on elements in a Lit template.

LANGUAGE: js
CODE:
html`<input .value=${value}>`

----------------------------------------

TITLE: Using TypeScript-Typed Lit Components
DESCRIPTION: Demonstrates usage of properly typed Lit components in TypeScript code.

LANGUAGE: typescript
CODE:
const myElement = document.createElement('my-element');
myElement.aNumber = 10;

----------------------------------------

TITLE: Defining a Template in a Lit Component
DESCRIPTION: Demonstrates how to add a render() method to a Lit component to define its template. The template uses the html tag function and includes an expression to set the text content.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit/decorators.js';

@customElement('my-element')
export class MyElement extends LitElement {
  @property()
  name = 'World';

  render() {
    return html`<p>Hello, ${this.name}!</p>`;
  }
}

----------------------------------------

TITLE: Setting Default Property Values in Constructor
DESCRIPTION: Example of setting default values for properties in the constructor method of a Lit component.

LANGUAGE: javascript
CODE:
constructor() {
  super();
  this.foo = 'foo';
  this.bar = 'bar';
}

----------------------------------------

TITLE: Event Listener Options without Decorators
DESCRIPTION: Alternative approach to setting event listener options without using decorators by passing an object with handleEvent method.

LANGUAGE: javascript
CODE:
render() {
  return html`<button @click=${{handleEvent: () => this.onClick(), once: true}}>click</button>`
}

----------------------------------------

TITLE: Using @query Decorator in Lit Components
DESCRIPTION: Shows implementation of the @query decorator to easily access DOM elements within a component's shadow root.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';
import {query} from 'lit/decorators/query.js';

class MyElement extends LitElement {
  @query('#first')
  _first;

  render() {
    return html`
      <div id="first"></div>
      <div id="second"></div>
    `;
  }
}

----------------------------------------

TITLE: Composing Templates in lit-html
DESCRIPTION: Demonstrates how to nest and compose templates in lit-html. It shows how to interpolate TemplateResults and use template functions within other templates.

LANGUAGE: javascript
CODE:
const myHeader = html`<h1>Header</h1>`;
const myPage = html`
  ${myHeader}
  <div>Here's my main page.</div>
`;

// some complex view
const myListView = (items) => html`<ul>...</ul>`;

const myPage = (data) => html`
  ${myHeader}
  ${myListView(data.items)}
`;

----------------------------------------

TITLE: Using a Controller in a Component
DESCRIPTION: Demonstrates how to use a controller within a Lit component including initialization and rendering.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  private _textSize = new ResizeController(this);

  render() {
    return html`
      <textarea ${this._textSize.observe()}></textarea>
      <p>The width is ${this._textSize.contentRect?.width}</p>
    `;
  }
}

----------------------------------------

TITLE: Adding Event Listeners in Lit Template
DESCRIPTION: Demonstrates how to add event listeners using the '@' syntax in a Lit component's template. This declarative approach automatically binds the listener to the component instance.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('my-element')
class MyElement extends LitElement {
  render() {
    return html`<button @click="${this._handleClick}">Click me</button>`;
  }

  private _handleClick() {
    console.log('Button clicked!');
  }
}

----------------------------------------

TITLE: Custom Property Accessor in TypeScript
DESCRIPTION: Example of creating a custom property accessor for a reactive property in a Lit component using TypeScript.

LANGUAGE: typescript
CODE:
private _prop = 0;

set prop(val: number) {
  let oldVal = this._prop;
  this._prop = Math.floor(val);
  this.requestUpdate('prop', oldVal);
}

@property()
get prop() { return this._prop; }

----------------------------------------

TITLE: Implementing firstUpdated Method
DESCRIPTION: Example of implementing the firstUpdated method to perform one-time setup after the first render.

LANGUAGE: javascript
CODE:
firstUpdated() {
  this.renderRoot.getElementById('my-text-area').focus();
}

----------------------------------------

TITLE: Basic Signals Example using TC39 Proposal API
DESCRIPTION: Demonstrates core signals concepts including state signals, computed signals, and watchers using the proposed standard JavaScript signals API.

LANGUAGE: typescript
CODE:
const count = new Signal.State(0);

const doubleCount = new Signal.Computed(() => count.get() * 2);

const watcher = new Signal.subtle.Watcher(async () => {
  await 0;
  console.log('doubleCount is', doubleCount);
  watcher.watch();
});
watcher.watch(doubleCount);

doubleCount.get();

----------------------------------------

TITLE: Adding Static Styles to a Lit Component
DESCRIPTION: Demonstrates how to add static styles to a Lit component using the css tagged template literal in the static styles property. The styles are scoped to the component's shadow DOM.

LANGUAGE: JavaScript
CODE:
import { LitElement, css, html } from 'lit-element';

class MyElement extends LitElement {
  static get styles() {
    return css`
      div { color: red; }
    `;
  }
  render() {
    return html`
      <div>I'm styled!</div>
    `;
  }
}

----------------------------------------

TITLE: Composing Templates with Imported Elements in Lit
DESCRIPTION: Demonstrates how to compose templates by importing other elements and using them in the template. This example creates a <my-page> component that uses imported <my-header>, <my-article>, and <my-footer> components.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import './my-header.js';
import './my-article.js';
import './my-footer.js';

@customElement('my-page')
export class MyPage extends LitElement {
  render() {
    return html`
      <my-header></my-header>
      <my-article></my-article>
      <my-footer></my-footer>
    `;
  }
}

----------------------------------------

TITLE: Creating Basic LitElement Component
DESCRIPTION: Example of creating a simple LitElement component with a render method.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit-element';

class MyElement extends LitElement {
  render() {
    return html`
      <div>Hello from MyElement!</div>
    `;
  }
}

customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Implementing Mediator Pattern in Lit
DESCRIPTION: Illustrates the mediator pattern for managing data flow between sibling components. This example shows a mediator element that controls the enabled state of a button based on input from a text field.

LANGUAGE: javascript
CODE:
{% playground-example "v3-docs/composition/mediator-pattern" "mediator-element.ts" %}

----------------------------------------

TITLE: Applying a Mixin to LitElement in TypeScript
DESCRIPTION: Shows how to apply a mixin directly to LitElement when defining a new class.

LANGUAGE: typescript
CODE:
class MyElement extends MyMixin(LitElement) {
  /* user code */
}

----------------------------------------

TITLE: GameState Class with Signal Decorators
DESCRIPTION: Example showing how to use signal decorators from signal-utils to create an observable game state class.

LANGUAGE: typescript
CODE:
import {signal} from 'signal-utils';

class GameState {
  @signal
  accessor playerOneTotal = 0;

  @signal
  accessor playerTwoTotal = 0;

  @signal
  accessor over = false;

  readonly rounds = new SignalArray();

  recordRound(playerOneScore, playerTwoScore) {
    this.playerOneTotal += playerOneScore;
    this.playerTwoTotal += playerTwoScore;
    this.rounds.push([playerOneScore, playerTwoScore]);
  }
}

----------------------------------------

TITLE: Dynamic Styling with Maps
DESCRIPTION: Shows how to use classMap and styleMap directives for dynamic styling based on component state.

LANGUAGE: TypeScript
CODE:
render() {
  return html`
    <div class=${classMap({active: this.active})} 
         style=${styleMap({color: this.color})}>
      Content
    </div>`;
}

----------------------------------------

TITLE: Inheriting Styles from Superclass
DESCRIPTION: Demonstrates how to extend styles from a parent class while adding additional styles in a child component.

LANGUAGE: TypeScript
CODE:
static styles = [
  SuperElement.styles,
  css`
    :host {
      display: block;
      border: 1px solid black;
    }
  `
];

----------------------------------------

TITLE: Accessing Shadow DOM Nodes in Lit Components
DESCRIPTION: Demonstrates how to query and access nodes in the shadow DOM of a Lit component using the firstUpdated lifecycle method and a getter pattern.

LANGUAGE: JavaScript
CODE:
firstUpdated() {
  this.staticNode = this.renderRoot.querySelector('#static-node');
}

get _closeButton() {
  return this.renderRoot.querySelector('#close-button');
}

----------------------------------------

TITLE: Declaring Internal Reactive State in JavaScript
DESCRIPTION: Example of declaring internal reactive state in a Lit component using the static properties field in JavaScript.

LANGUAGE: javascript
CODE:
static properties = {
  _active: {state: true}
};

constructor() {
  this._active = false;
}

----------------------------------------

TITLE: Using @queryAll Decorator in Lit Components
DESCRIPTION: Demonstrates using the @queryAll decorator to select multiple DOM elements within the shadow root.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {queryAll} from 'lit/decorators/queryAll.js';

class MyElement extends LitElement {
  @queryAll('div')
  _divs;

  render() {
    return html`
      <div id="first"></div>
      <div id="second"></div>
    `;
  }
}

@queryAll('button')
_buttons!: NodeListOf<HTMLButtonElement>

----------------------------------------

TITLE: Binding Properties to Elements in LitElement Templates
DESCRIPTION: Shows different ways to bind properties to elements in LitElement templates, including text content, attributes, boolean attributes, properties, and event handlers.

LANGUAGE: JavaScript
CODE:
html`<div>${this.prop1}</div>`

html`<div id="${this.prop2}"></div>`

html`<input type="text" ?disabled="${this.prop3}">`

html`<input type="checkbox" .value="${this.prop4}"/>`

html`<button @click="${this.clickHandler}">pie?</button>`

----------------------------------------

TITLE: Basic Mixin Pattern in TypeScript
DESCRIPTION: Demonstrates the fundamental pattern for creating a class mixin in TypeScript that can be applied to extend a base class.

LANGUAGE: typescript
CODE:
const MyMixin = (superClass) => class extends superClass {
  /* class fields & methods to extend superClass with */
};

----------------------------------------

TITLE: Defining a Context Object
DESCRIPTION: Creating and exporting a typed context object for logging functionality

LANGUAGE: typescript
CODE:
import {createContext} from '@lit/context';
import type {Logger} from 'my-logging-library';
export type {Logger} from 'my-logging-library';
export const loggerContext = createContext<Logger>('logger');

----------------------------------------

TITLE: Configuring Rollup for Modern+Legacy Lit Build
DESCRIPTION: Rollup configuration file (rollup.config.js) for building a hybrid modern and legacy Lit application. It includes separate output configurations for modern and legacy builds, along with polyfill injection and feature detection.

LANGUAGE: javascript
CODE:
import html from '@web/rollup-plugin-html';
import polyfillsLoader from '@web/rollup-plugin-polyfills-loader';
import {copy} from '@web/rollup-plugin-copy';
import resolve from '@rollup/plugin-node-resolve';
import {getBabelOutputPlugin} from '@rollup/plugin-babel';
import {terser} from 'rollup-plugin-terser';
import minifyHTML from 'rollup-plugin-minify-html-literals';
import summary from 'rollup-plugin-summary';

const htmlPlugin = html({
  rootDir: './',
  flattenOutput: false,
});

export default {
  input: 'index.html',
  plugins: [
    htmlPlugin,
    resolve(),
    minifyHTML(),
    terser({
      module: true,
      warnings: true,
    }),
    polyfillsLoader({
      modernOutput: {
        name: 'modern',
      },
      legacyOutput: {
        name: 'legacy',
        test: '!!Array.prototype.flat',
        type: 'systemjs',
      },
      polyfills: {
        hash: true,
        coreJs: true,
        regeneratorRuntime: true,
        fetch: true,
        webcomponents: true,
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
    summary(),
    copy({
      patterns: ['data/**/*', 'images/**/*'],
    }),
  ],
  output: [
    {
      format: 'esm',
      chunkFileNames: '[name]-[hash].js',
      entryFileNames: '[name]-[hash].js',
      dir: 'build',
      plugins: [htmlPlugin.api.addOutput('modern')],
    },
    {
      format: 'esm',
      chunkFileNames: 'legacy-[name]-[hash].js',
      entryFileNames: 'legacy-[name]-[hash].js',
      dir: 'build',
      plugins: [
        htmlPlugin.api.addOutput('legacy'),
        getBabelOutputPlugin({
          compact: true,
          presets: [
            [
              '@babel/preset-env',
              {
                targets: {
                  ie: '11',
                },
                modules: 'systemjs',
              },
            ],
          ],
        }),
      ],
    },
  ],
  preserveEntrySignatures: false,
};

----------------------------------------

TITLE: Conditional Rendering with If Statements in Lit
DESCRIPTION: Shows how to use traditional if statements outside the template to compute conditional content. Demonstrates storing template results in variables before rendering.

LANGUAGE: typescript
CODE:
render() {
  let message;
  if (this.userName) {
    message = html`Welcome ${this.userName}`;
  } else {
    message = html`Please log in <button>Login</button>`;
  }
  return html`<p class="message">${message}</p>`;
}

----------------------------------------

TITLE: Implementing a Context Provider
DESCRIPTION: LitElement class that provides a logger instance to child components through context

LANGUAGE: typescript
CODE:
import {LitElement, property, html} from 'lit';
import {provide} from '@lit/context';

import {Logger} from 'my-logging-library';
import {loggerContext} from './logger-context.js';

@customElement('my-app')
class MyApp extends LitElement {

  @provide({context: loggerContext})
  logger = new Logger();

  render() {
    return html`...`;
  }
}

----------------------------------------

TITLE: Creating a Basic lit-html Template in JavaScript
DESCRIPTION: Demonstrates how to create a simple lit-html template using a tagged template literal. The template includes a dynamic value 'name' that can be updated efficiently.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Defining Lit Component with Decorators
DESCRIPTION: Example showing how to use @customElement and @property decorators to define a Lit component with reactive properties.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {
  @property() greeting = "Welcome";
  @property() name = "Sally";
  @property({type: Boolean}) emphatic = true;
  //...
}

----------------------------------------

TITLE: Conditional Rendering with Ternary Operator in Lit
DESCRIPTION: Demonstrates using the conditional (ternary) operator for inline conditional rendering in Lit templates. Shows how to conditionally display either a welcome message or login button based on userName state.

LANGUAGE: typescript
CODE:
render() {
  return this.userName
    ? html`Welcome ${this.userName}`
    : html`Please log in <button>Login</button>`;
}

----------------------------------------

TITLE: Implementing willUpdate Method
DESCRIPTION: Shows how to use willUpdate to compute derived values before rendering.

LANGUAGE: typescript
CODE:
willUpdate(changedProperties: PropertyValues<this>) {
  // only need to check changed properties for an expensive computation.
  if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
    this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
  }
}

render() {
  return html`SHA: ${this.sha}`;
}

----------------------------------------

TITLE: Customizing Event Listener Options with Decorator
DESCRIPTION: Shows how to use the @eventOptions decorator to customize event listener options, such as setting the listener as passive.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';
import {eventOptions} from 'lit/decorators.js';

@eventOptions({passive: true})
private _handleTouchStart(e) { console.log(e.type) }

----------------------------------------

TITLE: Basic Loop Template Generation in Lit
DESCRIPTION: Demonstrates how to build an array of templates using a for...of loop and render it within a Lit template.

LANGUAGE: typescript
CODE:
render() {
  const itemTemplates = [];
  for (const i of this.items) {
    itemTemplates.push(html`<li>${i}</li>`);
  }

  return html`
    <ul>
      ${itemTemplates}
    </ul>
  `;
}

----------------------------------------

TITLE: Conditional Rendering with Nothing Sentinel in Lit
DESCRIPTION: Shows how to conditionally render nothing using Lit's nothing sentinel value for both child content and attributes.

LANGUAGE: typescript
CODE:
render() {
  return html`<user-name>${this.userName ?? nothing}</user-name>`;
}

----------------------------------------

TITLE: Using Task Controller for HTTP API Calls in Lit Components
DESCRIPTION: This example demonstrates how to use the Task controller to fetch product data from an API when the productId changes. It handles loading, success, and error states.

LANGUAGE: typescript
CODE:
import {Task} from '@lit/task';

class MyElement extends LitElement {
  @property() productId?: string;

  private _productTask = new Task(this, {
    task: async ([productId], {signal}) => {
      const response = await fetch(`http://example.com/product/${productId}`, {signal});
      if (!response.ok) { throw new Error(response.status); }
      return response.json() as Product;
    },
    args: () => [this.productId]
  });

  render() {
    return this._productTask.render({
      pending: () => html`<p>Loading product...</p>`,
      complete: (product) => html`
          <h1>${product.name}</h1>
          <p>${product.price}</p>
        `,
      error: (e) => html`<p>Error: ${e}</p>`
    });
  }
}

LANGUAGE: javascript
CODE:
import {Task} from '@lit/task';

class MyElement extends LitElement {
  static properties = {
    productId: {},
  };

  _productTask = new Task(this, {
    task: async ([productId], {signal}) => {
      const response = await fetch(`http://example.com/product/${productId}`, {signal});
      if (!response.ok) { throw new Error(response.status); }
      return response.json();
    },
    args: () => [this.productId]
  });

  render() {
    return this._productTask.render({
      pending: () => html`<p>Loading product...</p>`,
      complete: (product) => html`
          <h1>${product.name}</h1>
          <p>${product.price}</p>
        `,
      error: (e) => html`<p>Error: ${e}</p>`
    });
  }
}

----------------------------------------

TITLE: Repeating Templates with Looping Statements in Lit
DESCRIPTION: Demonstrates how to build an array of templates using a for loop and render it within a template expression. Creates an unordered list from array items.

LANGUAGE: typescript
CODE:
render() {
  const itemTemplates = [];
  for (const i of this.items) {
    itemTemplates.push(html`<li>${i}</li>`);
  }

  return html`
    <ul>
      ${itemTemplates}
    </ul>
  `;
}

----------------------------------------

TITLE: Implementing a Context Consumer
DESCRIPTION: LitElement class that consumes a logger instance from context

LANGUAGE: typescript
CODE:
import {LitElement, property} from 'lit';
import {consume} from '@lit/context';

import {type Logger, loggerContext} from './logger-context.js';

export class MyElement extends LitElement {

  @consume({context: loggerContext})
  @property({attribute: false})
  public logger?: Logger;

  private doThing() {
    this.logger?.log('A thing was done');
  }
}

----------------------------------------

TITLE: Common Expression Positions in Lit Templates
DESCRIPTION: This snippet demonstrates five common positions for expressions in Lit templates: child nodes, attributes, boolean attributes, properties, and event listeners. It shows the syntax for each use case.

LANGUAGE: html
CODE:
<!-- Child nodes -->
<h1>${this.pageTitle}</h1>

<!-- Attribute -->
<div class=${this.myTheme}></div>

<!-- Boolean attribute -->
<p ?hidden=${this.isHidden}>I may be in hiding.</p>

<!-- Property -->
<input .value=${this.value}>

<!-- Event listener -->
<button @click=${() => {console.log("You clicked a button.")}}>...</button>

----------------------------------------

TITLE: Using a Lit Component in Plain HTML
DESCRIPTION: Example of how to use a Lit component in plain HTML. It shows how to import the component script and use the custom element tag.

LANGUAGE: html
CODE:
<script type="module" src="/lib/components/my-elements.js">
<my-element></my-element>

----------------------------------------

TITLE: Using a Lit Component in Plain HTML
DESCRIPTION: Example of how to use a Lit component in plain HTML. It shows how to import the component script and use the custom element tag.

LANGUAGE: html
CODE:
<script type="module" src="/lib/components/my-elements.js">
<my-element></my-element>

----------------------------------------

TITLE: Rendering List Items with Lit in HTML
DESCRIPTION: This snippet demonstrates how to use map() to render a list of items in a Lit template. It iterates over the _listItems array and creates an <li> element for each item.

LANGUAGE: html
CODE:
${this._listItems.map((item) =>
  html`<li>${item.text}</li>`
)}

----------------------------------------

TITLE: Adding Event Listener in connectedCallback
DESCRIPTION: Example of adding an event listener to the window in the connectedCallback method.

LANGUAGE: javascript
CODE:
connectedCallback() {
  super.connectedCallback()
  window.addEventListener('keydown', this._handleKeydown);
}

----------------------------------------

TITLE: Customizing Render Root in Lit Components
DESCRIPTION: Demonstrates how to customize the render root of a Lit component by setting shadowRootOptions or implementing createRenderRoot method.

LANGUAGE: JavaScript
CODE:
class DelegatesFocus extends LitElement {
  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};
}

----------------------------------------

TITLE: Adding Event Listener in connectedCallback
DESCRIPTION: Demonstrates adding a global event listener when the component is connected to the DOM.

LANGUAGE: javascript
CODE:
connectedCallback() {
  super.connectedCallback()
  window.addEventListener('keydown', this._handleKeydown);
}

----------------------------------------

TITLE: Using when Directive
DESCRIPTION: Conditionally renders one of two templates based on a boolean condition.

LANGUAGE: typescript
CODE:
import {when} from 'lit/directives/when.js';

class MyElement extends LitElement {
  render() {
    return html`
      ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}
    `;
  }
}

----------------------------------------

TITLE: Adding Event Listeners in Lit Templates
DESCRIPTION: Shows how to use expressions to add event listeners to elements in a Lit template.

LANGUAGE: js
CODE:
html`<button @click=${this._clickHandler}>Go</button>`

----------------------------------------

TITLE: List Rendering with Map Function
DESCRIPTION: Example showing how to render a list of checkboxes with user names using the map function in a Lit template.

LANGUAGE: typescript
CODE:
html`${this.users.map((user) =>
  html`
    <div><input type="checkbox"> ${user.name}</div>
  `)
}`

----------------------------------------

TITLE: Customizing Shadow Root Options in Lit Components
DESCRIPTION: Demonstrates how to customize shadow root initialization options in a Lit component.

LANGUAGE: javascript
CODE:
class DelegatesFocus extends LitElement {
  static shadowRootOptions = {...LitElement.shadowRootOptions, delegatesFocus: true};
}

----------------------------------------

TITLE: Setting Attributes in Lit Templates
DESCRIPTION: Shows how to use expressions to set attribute values in a Lit template.

LANGUAGE: js
CODE:
html`<div class=${highlightClass}></div>`

----------------------------------------

TITLE: Adding Event Listeners to Component or Shadow Root
DESCRIPTION: Demonstrates how to add event listeners to the component itself or its shadow root for handling events from slotted children or shadow DOM elements.

LANGUAGE: javascript
CODE:
constructor() {
  super();
  this.addEventListener('click', (e) => console.log(e.type, e.target.localName));
}

createRenderRoot() {
  const root = super.createRenderRoot();
  root.addEventListener('click', (e) => console.log('Shadow root event', e.target.id));
  return root;
}

----------------------------------------

TITLE: Window Event Listeners with Lifecycle Methods
DESCRIPTION: Properly managing event listeners for external elements using connectedCallback and disconnectedCallback lifecycle methods.

LANGUAGE: javascript
CODE:
connectedCallback() {
  super.connectedCallback();
  window.addEventListener('resize', this._handleResize);
}
disconnectedCallback() {
  window.removeEventListener('resize', this._handleResize);
  super.disconnectedCallback();
}

----------------------------------------

TITLE: Collecting Render Results Asynchronously
DESCRIPTION: Demonstrates the use of collectResult() function to asynchronously collect a RenderResult into a string. This function waits for Promises and handles nested iterables.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {collectResult} from '@lit-labs/ssr/lib/render-result.js';
import {html} from 'lit';

const result = render(html`<my-element></my-element>`);
const contents = await collectResult(result);

----------------------------------------

TITLE: TypeScript Configuration for Lit Components
DESCRIPTION: TSConfig settings for compiling Lit components targeting ES2019 with decorator support and type declarations.

LANGUAGE: json
CODE:
"compilerOptions": {
  "target": "es2019",
  "module": "es2015",
  "moduleResolution": "node",
  "lib": ["es2019", "dom"],
  "declaration": true,
  "declarationMap": true,
  "experimentalDecorators": true,
  "useDefineForClassFields": false
}

----------------------------------------

TITLE: Binding 'this' in Imperative Event Listeners in Lit Component
DESCRIPTION: Demonstrates how to bind 'this' when adding event listeners imperatively, ensuring the correct context in the event handler.

LANGUAGE: javascript
CODE:
this.boundResizeHandler = this.handleResize.bind(this);
window.addEventListener('resize', this.boundResizeHandler);

----------------------------------------

TITLE: Hydrating Standalone Lit Templates with SSR Client
DESCRIPTION: Demonstrates how to hydrate server-rendered Lit templates using the hydrate() method from @lit-labs/ssr-client before applying render() for dynamic updates.

LANGUAGE: javascript
CODE:
import {render} from 'lit';
import {hydrate} from '@lit-labs/ssr-client';
import {myTemplate} from './my-template.js';
// Initial hydration required before render:
// (must be same data used to render on the server)
const initialData = getInitialAppData();
hydrate(myTemplate(initialData), document.body);

// After hydration, render will efficiently update the server-rendered DOM:
const update = (data) => render(myTemplate(data), document.body);

----------------------------------------

TITLE: Using styleMap Directive for Dynamic Styles
DESCRIPTION: The styleMap directive efficiently applies inline styles to an element based on an object where keys are style property names and values are the style values.

LANGUAGE: typescript
CODE:
@customElement('my-element')
class MyElement extends LitElement {
  @property({type: Boolean})
  enabled = false;

  render() {
    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };
    return html`<p style=${styleMap(styles)}>Hello style!</p>`;
  }
}

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  static properties = {
    enabled: {type: Boolean},
  };

  constructor() {
    super();
    this.enabled = false;
  }

  render() {
    const styles = { backgroundColor: this.enabled ? 'blue' : 'gray', color: 'white' };
    return html`<p style=${styleMap(styles)}>Hello style!</p>`;
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Using @queryAll Decorator in Lit Components
DESCRIPTION: Demonstrates the usage of the @queryAll decorator to query multiple nodes in the shadow DOM of a Lit component.

LANGUAGE: JavaScript
CODE:
import {LitElement, html} from 'lit';
import {queryAll} from 'lit/decorators/queryAll.js';

class MyElement extends LitElement {
  @queryAll('div')
  _divs;

  render() {
    return html`
      <div id="first"></div>
      <div id="second"></div>
    `;
  }
}

----------------------------------------

TITLE: Conditional Rendering with If Statements in Lit
DESCRIPTION: Shows how to use traditional if statements to handle conditional rendering logic outside the template. Demonstrates storing template results in variables before rendering.

LANGUAGE: typescript
CODE:
render() {
  let message;
  if (this.userName) {
    message = html`Welcome ${this.userName}`;
  } else {
    message = html`Please log in <button>Login</button>`;
  }
  return html`<p class="message">${message}</p>`;
}

----------------------------------------

TITLE: Configuring Rollup for Lit Production Build
DESCRIPTION: Rollup configuration file that sets up a modern browser build with optimizations including HTML minification, JS minification, module resolution, and asset copying. Targets ES2021-compatible browsers.

LANGUAGE: javascript
CODE:
// Import rollup plugins
import html from '@web/rollup-plugin-html';
import {copy} from '@web/rollup-plugin-copy';
import resolve from '@rollup/plugin-node-resolve';
import {terser} from '@rollup/plugin-terser';
import minifyHTML from 'rollup-plugin-minify-html-literals';
import summary from 'rollup-plugin-summary';

export default {
  plugins: [
    // Entry point for application build; can specify a glob to build multiple
    // HTML files for non-SPA app
    html({
      input: 'index.html',
    }),
    // Resolve bare module specifiers to relative paths
    resolve(),
    // Minify HTML template literals
    minifyHTML(),
    // Minify JS
    terser({
      ecma: 2021,
      module: true,
      warnings: true,
    }),
    // Print bundle summary
    summary(),
    // Optional: copy any static assets to build directory
    copy({
      patterns: ['images/**/*'],
    }),
  ],
  output: {
    dir: 'build',
  },
  preserveEntrySignatures: 'strict',
};

----------------------------------------

TITLE: Rendering Chess Board Pattern with Lit
DESCRIPTION: Creates an 8x8 grid using nested map() and range() directives. Each cell is rendered as a div with a class determined by getColor() and content by getLabel() based on row and column coordinates.

LANGUAGE: typescript
CODE:
  render() {
    return html`
      ⋮
      <div id="board">
        ${map(range(8), (row) => map(range(8), (col) => html`
          <div class="${getColor(row, col)}">${getLabel(row, col)}</div>
        `))}
      </div>
    `;
  }

LANGUAGE: javascript
CODE:
  render() {
    return html`
      ⋮
      <div id="board">
        ${map(range(8), (row) => map(range(8), (col) => html`
          <div class="${getColor(row, col)}">${getLabel(row, col)}</div>
        `))}
      </div>
    `;
  }

----------------------------------------

TITLE: Basic Lit Component with Localization
DESCRIPTION: Example of a Lit component using the msg function for localizable content, shown in both TypeScript and JavaScript versions

LANGUAGE: typescript
CODE:
import {html, LitElement} from 'lit';
import {customElement, property} from 'lit/decorators.js';
import {msg} from '@lit/localize';

@customElement('my-greeter')
class MyGreeter extends LitElement {
  @property()
  who = 'World';

  render() {
    return msg(html`Hello <b>${this.who}</b>`);
  }
}

LANGUAGE: javascript
CODE:
import {html, LitElement} from 'lit';
import {msg} from '@lit/localize';

class MyGreeter extends LitElement {
  static properties = {
    who: {},
  };

  constructor() {
    super();
    this.who = 'World';
  }

  render() {
    return msg(html`Hello <b>${this.who}</b>`);
  }
}
customElements.define('my-greeter', MyGreeter);

----------------------------------------

TITLE: Immutable Data Pattern Examples in JavaScript
DESCRIPTION: Demonstrates recommended immutable data patterns for updating arrays and objects in Lit components to ensure proper change detection.

LANGUAGE: javascript
CODE:
this.array = [...this.array, newThing]
this.obj = {...this.obj, id: ++this.obj.id}

----------------------------------------

TITLE: Using CSS Custom Properties for Configurable Styles
DESCRIPTION: Shows how to use CSS custom properties to create configurable styles in Lit components.

LANGUAGE: JavaScript
CODE:
static get styles() {
  return css`
    :host { color: var(--themeColor); }
  `;
}

----------------------------------------

TITLE: SSR with VM Module in TypeScript
DESCRIPTION: Shows how to use VM modules for server-side rendering in TypeScript. This approach isolates the rendering context for each request, providing better isolation of global state.

LANGUAGE: typescript
CODE:
// server.js
import {ModuleLoader} from '@lit-labs/ssr/lib/module-loader.js';
import {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';

// ...

// within a Koa middleware, for example
app.use(async (ctx) => {
  const moduleLoader = new ModuleLoader();
  const importResult = await moduleLoader.importModule(
    './render-template.js',  // Module to load in VM context
    import.meta.url          // Referrer URL for module
  );
  const {renderTemplate} = importResult.module.namespace
    as typeof import('./render-template.js')
  const ssrResult = await renderTemplate({some: "data"});
  ctx.type = 'text/html';
  ctx.body = new RenderResultReadable(ssrResult);
});

----------------------------------------

TITLE: Creating a Class-Based Directive in Lit
DESCRIPTION: Shows how to create a class-based directive by extending the Directive class and using the directive() factory function. The example creates a simple 'Hello' directive.

LANGUAGE: javascript
CODE:
import {Directive, directive} from 'lit/directive.js';

// Define directive
class HelloDirective extends Directive {
  render() {
    return `Hello!`;
  }
}
// Create the directive function
const hello = directive(HelloDirective);

// Use directive
const template = html`<div>${hello()}</div>`;

----------------------------------------

TITLE: Basic lit-html Template Example
DESCRIPTION: Simple example of creating a lit-html template with a dynamic expression

LANGUAGE: html
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Adding Input and Click Handler for To-Do List in TypeScript
DESCRIPTION: This TypeScript code defines an input property using the @query decorator and implements an addToDo() method to handle adding new items to the list. It demonstrates how to update internal state immutably.

LANGUAGE: typescript
CODE:
@query('#newitem')
input!: HTMLInputElement;

addToDo() {
  this._listItems = [...this._listItems,
      {text: this.input.value, completed: false}];
  this.input.value = '';
}

----------------------------------------

TITLE: Rendering Children to Slots in a React Wrapper Component
DESCRIPTION: Illustrates how to render children to the default slot and named slots of a web component wrapped with createComponent().

LANGUAGE: jsx
CODE:
<MyElementComponent>
  <p>This will render in the default slot.</p>
  <p slot="foo">This will render in the slot named "foo".</p>
  <div slot="foo" style="display: contents;">
    <ReactComponent />
  </div>
</MyElementComponent>

----------------------------------------

TITLE: Styling Slotted Content in Lit Components
DESCRIPTION: Demonstrates how to style slotted content in a Lit component using the ::slotted() CSS pseudo-element.

LANGUAGE: JavaScript
CODE:
class MyElement extends LitElement {
  static get styles() {
    return css`
      ::slotted(*) { font-family: Roboto; }
      ::slotted(p) { color: blue; }
    `;
  }
  render() {
    return html`
      <slot></slot>
    `;
  }
}

----------------------------------------

TITLE: Using a React Wrapper Component for a Web Component
DESCRIPTION: Shows how to use the React wrapper component created with createComponent(). It demonstrates passing props and event handlers to the wrapped web component.

LANGUAGE: jsx
CODE:
<MyElementComponent
  active={isActive}
  onactivate={(e) => setIsActive(e.active)}
  onchange={handleChange}
/>

----------------------------------------

TITLE: Importing lit-html Core Functions
DESCRIPTION: Basic imports of the main lit-html functions html and render

LANGUAGE: js
CODE:
import {html, render} from 'lit-html';

----------------------------------------

TITLE: Conditional Rendering with Separate Function in Lit
DESCRIPTION: Illustrates how to factor out conditional logic into a separate function for cleaner template code. The function returns different template literals based on conditions.

LANGUAGE: typescript
CODE:
getUserMessage() {
  if (this.userName) {
    return html`Welcome ${this.userName}`;
  } else {
    return html`Please log in <button>Login</button>`;
  }
}
render() {
  return html`<p>${this.getUserMessage()}</p>`;
}

----------------------------------------

TITLE: Creating React Component from Web Component
DESCRIPTION: Example of using createComponent to create a React wrapper for a custom element with event handling configuration.

LANGUAGE: javascript
CODE:
import React from 'react';
import {createComponent} from '@lit-labs/react';
import {MyElement} from './my-element.js';

export const MyElementComponent = createComponent({
  tagName: 'my-element',
  elementClass: MyElement,
  react: React,
  events: {
    onactivate: 'activate',
    onchange: 'change',
  },
});

----------------------------------------

TITLE: Basic Lifecycle Callback Example
DESCRIPTION: Demonstrates implementing a basic connectedCallback lifecycle method with proper super call

LANGUAGE: javascript
CODE:
connectedCallback() {
  super.connectedCallback()

  console.log('connected')
}

----------------------------------------

TITLE: Conditional Rendering with Cache Directive in Lit
DESCRIPTION: Demonstrates using Lit's cache directive to optimize performance when switching between complex templates by caching DOM elements.

LANGUAGE: typescript
CODE:
render() {
  return html`${cache(this.userName ?
    html`Welcome ${this.userName}`:
    html`Please log in <button>Login</button>`)
  }`;
}

----------------------------------------

TITLE: Implementing getUpdateComplete Method
DESCRIPTION: Demonstrates how to extend the updateComplete promise to wait for child updates.

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  async getUpdateComplete() {
    await super.getUpdateComplete();
    await this._myChild.updateComplete;
  }
}

----------------------------------------

TITLE: Rendering Lit Templates with SSR
DESCRIPTION: Demonstrates how to use the render function from @lit-labs/ssr to render Lit templates on the server. It shows rendering a simple template and a template with custom elements.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {html} from 'lit';
// Import `my-element` on the server to server render it.
import './my-element.js';

const result = render(html`
  <h1>Hello SSR!</h1>
  <my-element></my-element>
`);

----------------------------------------

TITLE: Sharing Styles Between Components
DESCRIPTION: Shows how to create a module exporting shared styles and import them into a Lit component.

LANGUAGE: JavaScript
CODE:
// button-styles.js
import { css } from 'lit-element';

export const buttonStyles = css`
  .blue-button {
    color: white;
    background-color: blue;
  }
  .blue-button:disabled {
    background-color: grey;
  }`;

// my-element.js
import { buttonStyles } from './button-styles.js';

class MyElement extends LitElement {
  static get styles() {
    return [
      buttonStyles,
      css`
        :host { display: block;
          border: 1px solid black;
        }`
    ]
  }
  ...
}

----------------------------------------

TITLE: Creating React Component from Web Component
DESCRIPTION: Example of using createComponent to create a React wrapper for a custom element with event handling configuration.

LANGUAGE: javascript
CODE:
import React from 'react';
import {createComponent} from '@lit-labs/react';
import {MyElement} from './my-element.js';

export const MyElementComponent = createComponent({
  tagName: 'my-element',
  elementClass: MyElement,
  react: React,
  events: {
    onactivate: 'activate',
    onchange: 'change',
  },
});

----------------------------------------

TITLE: Using a Simple Function Directive in Lit
DESCRIPTION: Demonstrates how to use a simple function directive in a Lit template. The directive removes vowels from the input string.

LANGUAGE: javascript
CODE:
export noVowels = (str) => str.replaceAll(/[aeiou]/ig,'x');

----------------------------------------

TITLE: Defining a Lit Element Property in TypeScript and JavaScript
DESCRIPTION: This switchable sample shows how to define a property in a Lit element using TypeScript decorators and plain JavaScript. The property 'foo' is set to not create an attribute.

LANGUAGE: typescript
CODE:
@customElement('my-element')
class MyElement {
  @property({attribute: false})
  foo;
}

LANGUAGE: javascript
CODE:
class MyElement {
  static properties = {
    foo: {attribute: false}
  };
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Creating a Lit Component in JavaScript
DESCRIPTION: Example of creating a basic Lit component using JavaScript. It shows how to extend LitElement and define a custom element without decorators.

LANGUAGE: js
CODE:
import {LitElement, html} from 'lit';

class MyElement extends LitElement {
  render() {
    return html`
      <div>Hello from MyElement!</div>
    `;
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Configuring Localization in JavaScript
DESCRIPTION: This code snippet shows how to configure localization using the configureLocalization function from @lit/localize, including setting up the source locale, target locales, and a function to load locale modules.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
// Generated via output.localeCodesModule
import {sourceLocale, targetLocales} from './generated/locale-codes.js';

export const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: (locale) => import(`/locales/${locale}.js`),
});

----------------------------------------

TITLE: Conditional Rendering with Ternary Operator in Lit
DESCRIPTION: Demonstrates using the conditional (ternary) operator for inline conditional rendering in Lit templates. Shows how to switch between welcome message and login button based on userName state.

LANGUAGE: typescript
CODE:
render() {
  return this.userName
    ? html`Welcome ${this.userName}`
    : html`Please log in <button>Login</button>`;
}

----------------------------------------

TITLE: Composite Controller Example
DESCRIPTION: Shows how to create a controller composed of other controllers by forwarding the host.

LANGUAGE: typescript
CODE:
class DualClockController implements ReactiveController {
  private clock1: ClockController;
  private clock2: ClockController;

  constructor(host: ReactiveControllerHost, delay1: number, delay2: number) {
    this.clock1 = new ClockController(host, delay1);
    this.clock2 = new ClockController(host, delay2);
  }

  get time1() { return this.clock1.value; }
  get time2() { return this.clock2.value; }
}

----------------------------------------

TITLE: Styling the Shadow DOM in Lit Components
DESCRIPTION: Demonstrates how to style elements within the shadow DOM of a Lit component using standard CSS selectors.

LANGUAGE: JavaScript
CODE:
class MyElement extends LitElement {
  static get styles() {
    return css`
      * { color: red; }
      p { font-family: sans-serif; }
      .myclass { margin: 100px; }
      #main { padding: 30px; }
      h1 { font-size: 4em; }
    `;
  }
  render() {
    return html`
      <p>Hello World</p>
      <p class="myclass">Hello World</p>
      <p id="main">Hello World</p>
      <h1>Hello World</h1>
    `;
  }
}

----------------------------------------

TITLE: Implementing React Hook from Lit Controller
DESCRIPTION: Example of creating a custom React hook from a Lit reactive controller using useController.

LANGUAGE: jsx
CODE:
import React from 'react';
import {useController} from '@lit-labs/react/use-controller.js';
import {MouseController} from '@example/mouse-controller';

const useMouse = () => {
  const controller = useController(React, (host) => new MouseController(host));
  return controller.pos;
};

const Component = (props) => {
  const mousePosition = useMouse();
  return (
    <pre>
      x: {mousePosition.x}
      y: {mousePosition.y}
    </pre>
  );
};

----------------------------------------

TITLE: Implementing Property Binding for Rating Element in JavaScript
DESCRIPTION: This snippet demonstrates how to implement a property binding for a rating element in JavaScript. It includes a _rating property, a setter and getter for the rating property, and logic to update the view when the rating changes.

LANGUAGE: javascript
CODE:
_rating = 0;

set rating(value) {
  this._rating = value;

  if (!this.shadowRoot) {
    return;
  }

  const ratingEl = this.shadowRoot.querySelector('.rating');

  if (ratingEl) {
    ratingEl.innerText = `${this._rating}`;
  }
}

get rating() {
  return this._rating;
}

----------------------------------------

TITLE: Moving decorators from getters to setters
DESCRIPTION: Shows how to move decorators from getters to setters and simplify the setter implementation when using standard decorators.

LANGUAGE: typescript
CODE:
// Before:
class MyElement extends LitElement {
  private _foo = 42;
  set(v) {
    const oldValue = this._foo;
    this._foo = v;
    this.requestUpdate('foo', oldValue);
  }
  @property()
  get() {
    return this._foo;
  }
}

// After:
class MyElement extends LitElement {
  private _foo = 42;
  @property()
  set(v) {
    this._foo = v;
  }
  get() {
    return this._foo;
  }
}

----------------------------------------

TITLE: Using Controllers with Elements and Directives
DESCRIPTION: Example showing how to use controllers within Lit elements and combine them with directives for element observation.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  private _textSize = new ResizeController(this);

  render() {
    return html`
      <textarea ${this._textSize.observe()}></textarea>
      <p>The width is ${this._textSize.contentRect?.width}</p>
    `;
  }
}

----------------------------------------

TITLE: Declaring Reactive Property in Lit Component
DESCRIPTION: Shows two ways to declare a reactive property 'message' in a Lit component - using TypeScript decorator syntax and JavaScript static properties. The property is initialized with the value 'Hello again.'

LANGUAGE: typescript
CODE:
@property()
message: string = 'Hello again.';

LANGUAGE: javascript
CODE:
static properties = {
  message: {},
};

constructor() {
  super();
  this.message = 'Hello again.';
}

----------------------------------------

TITLE: Implementing Lifecycle Callbacks in a Logging Mixin
DESCRIPTION: Shows how to create a mixin that logs when the element is created, connected, and updated by implementing various lifecycle callbacks.

LANGUAGE: typescript
CODE:
const LoggingMixin = (superClass) => class extends superClass {
  constructor() {
    super();
    console.log(`${this.localName} was created`);
  }
  connectedCallback() {
    super.connectedCallback();
    console.log(`${this.localName} was connected`);
  }
  updated(changedProperties) {
    super.updated?.(changedProperties);
    console.log(`${this.localName} was updated`);
  }
}

----------------------------------------

TITLE: Using Expressions in Static Styles
DESCRIPTION: Shows how to use nested css tagged template literals and numbers in static styles. This allows for composing styles while maintaining security.

LANGUAGE: JavaScript
CODE:
import { LitElement, css, html, unsafeCSS } from 'lit-element';

// Assume these are defined somewhere
const mainColor = css`red`;
const fontSize = 16;

class MyElement extends LitElement {
  static get styles() {
    return css`
      div { color: ${mainColor}; font-size: ${fontSize}px; }
    `;
  }
  render() {
    return html`<div>Some text</div>`;
  }
}

----------------------------------------

TITLE: Defining a Basic Mixin in TypeScript
DESCRIPTION: Demonstrates how to define a simple mixin function that takes a superClass and returns a new class extending it.

LANGUAGE: typescript
CODE:
const MyMixin = (superClass) => class extends superClass {
  /* class fields & methods to extend superClass with */
};

----------------------------------------

TITLE: Defining a Basic Template in LitElement
DESCRIPTION: Shows how to define a simple template for a LitElement component using the render method and html tag function.

LANGUAGE: JavaScript
CODE:
import { LitElement, html } from 'lit-element';

class MyElement extends LitElement {
  render() {
    return html`<p>template content</p>`;
  }
}

----------------------------------------

TITLE: WebdriverIO Component Test Example
DESCRIPTION: Example test suite demonstrating how to test a Lit component using WebdriverIO, including component setup, testing, and cleanup

LANGUAGE: typescript
CODE:
import { expect, $ } from '@wdio/globals'

// Component.ts contains the <simple-greeting> component implemented the same as:
// https://lit.dev/docs/components/overview/
import './components/Component.ts'

describe('Lit Component testing', () => {
    let elem: HTMLElement

    beforeEach(() => {
        elem = document.createElement('simple-greeting')
    })

    it('should render component', async () => {
        elem.setAttribute('name', 'WebdriverIO')
        document.body.appendChild(elem)
        await expect($(elem)).toHaveText('Hello, WebdriverIO!')
    })

    afterEach(() => {
        elem.remove()
    })
})

----------------------------------------

TITLE: Customizing Update Scheduling
DESCRIPTION: Shows how to override scheduleUpdate to customize the timing of updates.

LANGUAGE: typescript
CODE:
protected override async scheduleUpdate(): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve));
  super.scheduleUpdate();
}

----------------------------------------

TITLE: Configuring Webpack 4 for Lit 3 compatibility
DESCRIPTION: Adds a Babel loader rule to the Webpack 4 configuration to downlevel Lit's ES2021 syntax for parsing.

LANGUAGE: javascript
CODE:
// In webpack.config.js

module.exports = {
  // ...

  module: {
    rules: [
      // ... your other rules

      // Add a babel-loader rule to downlevel Lit's ES2021 syntax so Webpack 4 can parse it.
      // TODO: Once on Webpack 5, this rule can be deleted.
      {
        test: /\.js$/,
        include: ['@lit', 'lit-element', 'lit-html'].map((p) =>
          path.resolve(__dirname, 'node_modules/' + p)
        ),
        use: {
          loader: 'babel-loader',
          options: {
            plugins: [
              '@babel/plugin-transform-optional-chaining',
              '@babel/plugin-transform-nullish-coalescing-operator',
              '@babel/plugin-transform-logical-assignment-operators'
            ],
          },
        },
      },
    ],
  }
}

----------------------------------------

TITLE: Creating Context Provider Component
DESCRIPTION: LitElement component that provides a logger context to child components

LANGUAGE: typescript
CODE:
import {LitElement, property, html} from 'lit';
import {provide} from '@lit-labs/context';

import {Logger} from 'my-logging-library';
import {loggerContext} from './logger-context.js';

@customElement('my-app')
class MyApp extends LitElement {

  @provide({context: loggerContext})
  logger = new Logger();

  render() {
    return html`...`;
  }
}

----------------------------------------

TITLE: Adding Input Event Handler in Lit Template
DESCRIPTION: Shows how to add an input event listener to an input element using the @input syntax for handling user input changes.

LANGUAGE: html
CODE:
<input @input=${this.changeName} placeholder="Enter your name">

----------------------------------------

TITLE: Using a Reactive Controller as a React Hook
DESCRIPTION: Shows how to use the useController() function to create a React hook from a Lit reactive controller, allowing shared state and behavior between web components and React.

LANGUAGE: javascript
CODE:
import React from 'react';
import {useController} from '@lit/react/use-controller.js';
import {MouseController} from '@example/mouse-controller';

const useMouse = () => {
  const controller = useController(React, (host) => new MouseController(host));
  return controller.pos;
};

const Component = (props) => {
  const mousePosition = useMouse();
  return (
    <pre>
      x: {mousePosition.x}
      y: {mousePosition.y}
    </pre>
  );
};

----------------------------------------

TITLE: Inheriting Styles in Lit Components
DESCRIPTION: Demonstrates how a Lit component can inherit styles from a superclass and add its own styles using an array of css tagged template literals.

LANGUAGE: JavaScript
CODE:
class MyElement extends SuperElement {
  static get styles() {
    return [
      super.styles,
      css`...`
    ];
  }
}

----------------------------------------

TITLE: Basic Lit Component with Localization
DESCRIPTION: Example of a Lit component using the msg function for localization, showing both TypeScript and JavaScript implementations.

LANGUAGE: typescript
CODE:
import {html, LitElement} from 'lit';
import {customElement, property} from 'lit/decorators.js';
import {msg} from '@lit/localize';

@customElement('my-greeter')
class MyGreeter extends LitElement {
  @property()
  who = 'World';

  render() {
    return msg(html`Hello <b>${this.who}</b>`);
  }
}

LANGUAGE: javascript
CODE:
import {html, LitElement} from 'lit';
import {msg} from '@lit/localize';

class MyGreeter extends LitElement {
  static properties = {
    who: {},
  };

  constructor() {
    super();
    this.who = 'World';
  }

  render() {
    return msg(html`Hello <b>${this.who}</b>`);
  }
}
customElements.define('my-greeter', MyGreeter);

----------------------------------------

TITLE: Defining Static Styles in Lit Component
DESCRIPTION: Demonstrates how to define encapsulated styles using the static styles class field in a Lit component. The styles are scoped to the component using shadow DOM and define the appearance of completed items.

LANGUAGE: javascript
CODE:
static styles = css`
  .completed {
    text-decoration-line: line-through;
    color: #777;
  }
`;

----------------------------------------

TITLE: Creating Context Consumer Component
DESCRIPTION: LitElement component that consumes a logger context from parent components

LANGUAGE: typescript
CODE:
import {LitElement, property} from 'lit';
import {consume} from '@lit-labs/context';

import {type Logger, loggerContext} from './logger-context.js';

export class MyElement extends LitElement {

  @consume({context: loggerContext})
  @property({attribute: false})
  public logger?: Logger;

  private doThing() {
    this.logger?.log('A thing was done');
  }
}

----------------------------------------

TITLE: Using React Wrapped Web Component
DESCRIPTION: Demonstrates how to use the wrapped web component in JSX with props and event handlers.

LANGUAGE: jsx
CODE:
<MyElementComponent
  active={isActive}
  onactivate={(e) => setIsActive(e.active)}
  onchange={handleChange}
/>

----------------------------------------

TITLE: Conditional Attribute Rendering in Lit
DESCRIPTION: Demonstrates how to conditionally render HTML attributes using the nothing sentinel value.

LANGUAGE: typescript
CODE:
html`<button aria-label="${this.ariaLabel || nothing}"></button>`

----------------------------------------

TITLE: Incorrect Property Default Localization in Lit
DESCRIPTION: Example showing an incorrect way to localize property defaults that won't update when locale changes.

LANGUAGE: javascript
CODE:
// Don't do this!
label = msg('Default label')

render() {
  return html`<button>${this.label}</button>`;
}

----------------------------------------

TITLE: Various Binding Types in lit-html
DESCRIPTION: Showcases different types of bindings including text, attribute, boolean attribute, property, and event listener bindings.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

html`<div id=${id}></div>`

html`<input type="checkbox" ?checked=${checked}>`

html`<input .value=${value}>`

html`<button @click=${(e) => console.log('clicked')}>Click Me</button>`

----------------------------------------

TITLE: Basic lit-html template rendering
DESCRIPTION: Complete example showing how to define and render a lit-html template with dynamic content

LANGUAGE: typescript
CODE:
// Import lit-html
import {html, render} from 'lit-html';

// Define a template
const myTemplate = (name) => html`<p>Hello ${name}</p>`;

// Render the template to the document
render(myTemplate('World'), document.body);

----------------------------------------

TITLE: Querying Shadow DOM Elements in Lit Components
DESCRIPTION: Demonstrates how to access elements within a component's shadow DOM using firstUpdated lifecycle method or a getter pattern.

LANGUAGE: javascript
CODE:
firstUpdated() {
  this.staticNode = this.renderRoot.querySelector('#static-node');
}

get _closeButton() {
  return this.renderRoot.querySelector('#close-button');
}

----------------------------------------

TITLE: TypeScript Type Declarations for Lit Components
DESCRIPTION: Shows how to add proper TypeScript type declarations for custom elements to enable correct type inference.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {
  @property({type: Number})
  aNumber: number = 5;
  /* ... */
}

declare global {
  interface HTMLElementTagNameMap {
    "my-element": MyElement;
  }
}

----------------------------------------

TITLE: Using Element Directives in Lit Templates
DESCRIPTION: Illustrates how to use element directives in a Lit template.

LANGUAGE: js
CODE:
html`<input ${ref(inputRef)}>`

----------------------------------------

TITLE: Filtering Todo Items in Lit Template (TypeScript)
DESCRIPTION: This snippet shows how to filter todo items based on a 'hideCompleted' flag. It uses the array filter method to exclude completed items when the flag is true.

LANGUAGE: typescript
CODE:
const items = this.hideCompleted
  ? this._listItems.filter((item) => !item.completed)
  : this._listItems;

----------------------------------------

TITLE: Defining Logger Context Type
DESCRIPTION: TypeScript code showing how to define a context object for a logger

LANGUAGE: typescript
CODE:
import {createContext} from '@lit-labs/context';
import type {Logger} from 'my-logging-library';
export type {Logger} from 'my-logging-library';
export const loggerContext = createContext<Logger>('logger');

----------------------------------------

TITLE: Rendering SVG Elements in Lit Component
DESCRIPTION: Demonstrates how to render SVG elements, including definitions and the created tile, in a Lit component.

LANGUAGE: ts
CODE:
export class RepeatPattern extends LitElement {
  ...

  render() {
    return html`
      <svg height="100%" width="100%">
        <defs>
          ${createTileBoundary()}
          ${createElement(this.chars)}
          ${createMotif(
            this.numPrints,
            this.rotationOffset,
          )}
        </defs>
      </svg>
    `;
  }
}

----------------------------------------

TITLE: Necessary HTML in Localized Templates
DESCRIPTION: Example showing when HTML markup should be included in localized templates, such as when HTML tags are needed within phrases.

LANGUAGE: javascript
CODE:
render() {
  return msg(html`Lift off in <b>T-${this.countdown}</b> seconds`);
}

----------------------------------------

TITLE: Conditional Rendering in lit-html
DESCRIPTION: Shows different approaches to conditional rendering in lit-html templates, including using ternary operators and if statements.

LANGUAGE: javascript
CODE:
html`
  ${user.isloggedIn
      ? html`Welcome ${user.name}`
      : html`Please log in`
  }
`;

getUserMessage() {
  if (user.isloggedIn) {
    return html`Welcome ${user.name}`;
  } else {
    return html`Please log in`;
  }
}

html`
  ${getUserMessage()}
`

----------------------------------------

TITLE: Basic lit-html Template Expression
DESCRIPTION: Example of a simple lit-html template literal with dynamic content

LANGUAGE: html
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: TypeScript Mixin with Interface
DESCRIPTION: Demonstrates how to define and implement a mixin that adds new public API with proper TypeScript typing.

LANGUAGE: typescript
CODE:
export declare class MyMixinInterface {
  highlight: boolean;
  protected renderHighlight(): unknown;
}

export const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {
  class MyMixinClass extends superClass {
    @property() highlight = false;
    protected renderHighlight() {
      /* ... */
    }
  };
  return MyMixinClass as Constructor<MyMixinInterface> & T;
}

----------------------------------------

TITLE: Setting Event Listener Options in Lit Component
DESCRIPTION: Demonstrates how to use the @eventOptions decorator to set options for declarative event listeners, such as making them passive.

LANGUAGE: javascript
CODE:
import {LitElement, html, eventOptions} from 'lit-element';
...

@eventOptions({passive: true})
private _handleTouchStart() { ... }

render() {
  return html`
    <div @touchstart=${this._handleTouchStart}><div>
  `;
}

----------------------------------------

TITLE: Event Communication Between Dispatcher and Listener
DESCRIPTION: Demonstrates how to use event details and preventDefault() to communicate between the event dispatcher and listener in Lit components.

LANGUAGE: typescript
CODE:
// In the dispatcher component
class MyDispatcher extends LitElement {
  private _handleClick() {
    const event = new CustomEvent('my-event', {
      bubbles: true,
      composed: true,
      detail: { message: 'Hello from dispatcher' },
      cancelable: true
    });
    this.dispatchEvent(event);
    if (event.defaultPrevented) {
      console.log('Event was prevented');
    }
  }
}

// In the listener component
class MyListener extends LitElement {
  private _handleMyEvent(e: CustomEvent) {
    console.log(e.detail.message);
    e.detail.response = 'Hello from listener';
    e.preventDefault();
  }
}

----------------------------------------

TITLE: Defining Reactive Properties for SVG Pattern in Lit
DESCRIPTION: Adds reactive properties to the RepeatPattern class for controlling the number of prints and rotation offset of the SVG pattern.

LANGUAGE: typescript
CODE:
export class RepeatPattern extends LitElement {
  @property({type: Number, attribute: "num-prints"}) numPrints = 7;
  @property({
    type: Number,
    attribute: "rotation-offset",
  }) rotationOffset = 0;
  ...
}

LANGUAGE: javascript
CODE:
export class RepeatPattern extends LitElement {
  static properties = {
    chars: {type: String},
    numPrints: {type: Number, attribute: 'num-prints'},
    rotationOffset: {
      type: Number,
      attribute: 'rotation-offset',
    },
  };

  constructor() {
    super();
    this.chars = 'lit';
    this.numPrints = 7;
    this.rotationOffset = 0;
  }
  ...
}

----------------------------------------

TITLE: Composing Controllers from Other Controllers
DESCRIPTION: Implementation of a controller that uses multiple instances of other controllers, demonstrating controller composition.

LANGUAGE: typescript
CODE:
class DualClockController implements ReactiveController {
  private clock1: ClockController;
  private clock2: ClockController;

  constructor(host: ReactiveControllerHost, delay1: number, delay2: number) {
    this.clock1 = new ClockController(host, delay1);
    this.clock2 = new ClockController(host, delay2);
  }

  get time1() { return this.clock1.value; }
  get time2() { return this.clock2.value; }
}

LANGUAGE: javascript
CODE:
class DualClockController {
  constructor(host, delay1, delay2) {
    this.clock1 = new ClockController(host, delay1);
    this.clock2 = new ClockController(host, delay2);
  }

  get time1() { return this.clock1.value; }
  get time2() { return this.clock2.value; }
}

----------------------------------------

TITLE: Automatically Re-rendering on Locale Change (TypeScript)
DESCRIPTION: Example of using the @localized decorator in TypeScript to automatically re-render a Lit component when the locale changes.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import {msg, localized} from '@lit/localize';

@customElement('my-element');
@localized()
class MyElement extends LitElement {
  render() {
    // Whenever setLocale() is called, and templates for that locale have
    // finished loading, this render() function will be re-invoked.
    return msg(html`Hello <b>World!</b>`);
  }
}

----------------------------------------

TITLE: Using Static Expressions in Lit Templates
DESCRIPTION: Demonstrates how to use static expressions in Lit templates for customizing tag names and attributes.

LANGUAGE: ts
CODE:
import {LitElement} from 'lit';
import {customElement, property} from 'lit/decorators.js';
import {html, literal} from 'lit/static-html.js';

@customElement('my-button')
class MyButton extends LitElement {
  tag = literal`button`;
  activeAttribute = literal`active`;
  @property() caption = 'Hello static';
  @property({type: Boolean}) active = false;

  render() {
    return html`
      <${this.tag} ${this.activeAttribute}=${this.active}>
        <p>${this.caption}</p>
      </${this.tag}>`;
  }
}

----------------------------------------

TITLE: Styling Simple Tooltip Host in CSS for Lit
DESCRIPTION: This CSS snippet styles the host element of a simple tooltip in Lit. It sets display, position, padding, border, background, and pointer-events properties to create a floating tooltip appearance.

LANGUAGE: css
CODE:
:host {
  display: inline-block;
  position: fixed;
  padding: 4px;
  border: 1px solid darkgray;
  border-radius: 4px;
  background: #ccc;
  pointer-events: none;
}

----------------------------------------

TITLE: Adding Slot to Motion Carousel Element in HTML
DESCRIPTION: This snippet shows how to add a slot to the motion carousel element to make the content visible. It creates a div with a 'fit' class that contains the slot.

LANGUAGE: html
CODE:
<div class="fit">
  <slot></slot>
</div>

----------------------------------------

TITLE: Conditional Rendering with Nullish Values in Lit
DESCRIPTION: Shows how to handle cases where nothing should be rendered using Lit's nothing sentinel value and nullish coalescing operator.

LANGUAGE: typescript
CODE:
render() {
  return html`<user-name>${this.userName ?? nothing}</user-name>`;
}

LANGUAGE: typescript
CODE:
html`<button aria-label="${this.ariaLabel || nothing}"></button>`

----------------------------------------

TITLE: Implementing Locale Picker in Lit for Transform Mode
DESCRIPTION: This code defines a LocalePicker custom element that allows switching between locales by reloading the page with a new locale parameter in the URL.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import {getLocale} from './localization.js';
import {allLocales} from './generated/locales.js';

@customElement('locale-picker');
export class LocalePicker extends LitElement {
  render() {
    return html`
      <select @change=${this.localeChanged}>
        ${allLocales.map(
          (locale) =>
            html`<option value=${locale} selected=${locale === getLocale()}>
              ${locale}
            </option>`
        )}
      </select>
    `;
  }

  localeChanged(event: Event) {
    const newLocale = (event.target as HTMLSelectElement).value;
    const url = new URL(window.location.href);
    if (url.searchParams.get('locale') !== newLocale) {
      url.searchParams.set('locale', newLocale);
      window.location.assign(url.href);
    }
  }
}

----------------------------------------

TITLE: Handling Custom Events in Lit Component Template
DESCRIPTION: Demonstrates how to listen to custom events fired from a Lit component within another Lit component or lit-html template.

LANGUAGE: html
CODE:
<my-element @my-event="${(e) => { console.log(e.detail.message) }}"></my-element>

----------------------------------------

TITLE: Creating a Max Value Directive in Lit
DESCRIPTION: Demonstrates how to create a directive that calculates the maximum value. It shows how to define render method arguments and use them in the directive function call.

LANGUAGE: typescript
CODE:
class MaxDirective extends Directive {
  maxValue = Number.MIN_VALUE;
  // Define a render method, which may accept arguments:
  render(value: number, minValue = Number.MIN_VALUE) {
    this.maxValue = Math.max(value, this.maxValue, minValue);
    return this.maxValue;
  }
}
const max = directive(MaxDirective);

// Call the directive with `value` and `minValue` arguments defined for `render()`:
const template = html`<div>${max(someNumber, 0)}</div>`;

----------------------------------------

TITLE: Typing a Mixin with New Public/Protected API
DESCRIPTION: Demonstrates how to type a mixin that adds new protected or public API, using a separate interface definition.

LANGUAGE: typescript
CODE:
// Define the interface for the mixin
export declare class MyMixinInterface {
  highlight: boolean;
  protected renderHighlight(): unknown;
}

export const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {
  class MyMixinClass extends superClass {
    @property() highlight = false;
    protected renderHighlight() {
      /* ... */
    }
  };
  // Cast return type to your mixin's interface intersected with the superClass type
  return MyMixinClass as Constructor<MyMixinInterface> & T;
}

----------------------------------------

TITLE: Logging Mixin Implementation
DESCRIPTION: Example mixin that adds logging functionality to key lifecycle methods of a Lit component.

LANGUAGE: typescript
CODE:
const LoggingMixin = (superClass) => class extends superClass {
  constructor() {
    super();
    console.log(`${this.localName} was created`);
  }
  connectedCallback() {
    super.connectedCallback();
    console.log(`${this.localName} was connected`);
  }
  updated(changedProperties) {
    super.updated?.(changedProperties);
    console.log(`${this.localName} was updated`);
  }
}

----------------------------------------

TITLE: Implementing Render Method for TimeAgo Directive
DESCRIPTION: Adds a render method to the TimeAgo directive that accepts a Date object and returns its string representation. Shows both TypeScript and JavaScript implementations.

LANGUAGE: typescript
CODE:
  render(time: Date) {
    return time.toDateString();
  }

LANGUAGE: javascript
CODE:
  render(time) {
    return time.toDateString();
  }

----------------------------------------

TITLE: Importing Time Ago Directive in TypeScript
DESCRIPTION: This snippet shows how to import the 'timeAgo' directive from a local file.

LANGUAGE: typescript
CODE:
import {timeAgo} from './time-ago.js';

----------------------------------------

TITLE: Shared Counter Component with SignalWatcher
DESCRIPTION: Example of a Lit component using SignalWatcher mixin to implement a shared counter with signals.

LANGUAGE: typescript
CODE:
import {LitElement, html, css} from 'lit';
import {customElement} from 'lit/decorators.js';
import {SignalWatcher, signal} from '@lit-labs/signals';

const count = signal(0);

@customElement('shared-counter')
export class SharedCounterComponent extends SignalWatcher(LitElement) {
  static styles = css`
    :host {
      display: block;
    }
  `;

  render() {
    return html`
      <p>The count is ${count.get()}</p>
      <button @click=${this.#onClick}>Increment</button>
    `;
  }

  #onClick() {
    count.set(count.get() + 1);
  }
}

LANGUAGE: html
CODE:
<!-- Both of these elements will show the same counter value -->
<shared-counter></shared-counter>
<shared-counter></shared-counter>

----------------------------------------

TITLE: Custom Element Registration
DESCRIPTION: Traditional method of registering a custom element without decorators.

LANGUAGE: javascript
CODE:
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Customizing Property Change Detection in JavaScript
DESCRIPTION: Example of customizing the hasChanged function for a reactive property in a Lit component using JavaScript.

LANGUAGE: javascript
CODE:
static properties = {
  myProp: {
    hasChanged(newVal, oldVal) {
      return newVal?.toLowerCase() !== oldVal?.toLowerCase();
    }
  }
};

----------------------------------------

TITLE: Creating Bubbling and Composed Custom Events in Lit Component
DESCRIPTION: Shows how to create a custom event that can bubble through and pass shadow DOM boundaries by setting both 'bubbles' and 'composed' flags to true.

LANGUAGE: javascript
CODE:
firstUpdated(changedProperties) {
  let myEvent = new CustomEvent('my-event', {
    detail: { message: 'my-event happened.' },
    bubbles: true,
    composed: true });
  this.dispatchEvent(myEvent);
}

----------------------------------------

TITLE: Accessing Slotted Children in Lit Components
DESCRIPTION: Shows how to access and manipulate elements assigned to slots in a component's shadow DOM.

LANGUAGE: javascript
CODE:
get _slottedChildren() {
  const slot = this.shadowRoot.querySelector('slot');
  return slot.assignedElements({flatten: true});
}

handleSlotchange(e) {
  const childNodes = e.target.assignedNodes({flatten: true});
  this.allText = childNodes.map((node) => {
    return node.textContent ? node.textContent : ''
  }).join('');
}

render() {
  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;
}

----------------------------------------

TITLE: Light DOM Component Structure Example
DESCRIPTION: Shows how to structure components using light DOM with slots for flexible content placement.

LANGUAGE: html
CODE:
<top-bar>
  <icon-button icon="menu" slot="nav-button"></icon-button>
  <span slot="title">Fuzzy</span>
</top-bar>

----------------------------------------

TITLE: Typing the Superclass in a TypeScript Mixin
DESCRIPTION: Demonstrates how to properly type the superClass argument in a TypeScript mixin using a generic Constructor type.

LANGUAGE: typescript
CODE:
import {LitElement} from 'lit';

type Constructor<T = {}> = new (...args: any[]) => T;

export const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {
  class MyMixinClass extends superClass {
    /* ... */
  };
  return MyMixinClass as /* see "typing the subclass" below */;
}

----------------------------------------

TITLE: Adding ESLint Script to package.json
DESCRIPTION: This snippet shows how to add an ESLint script to the package.json file for linting JavaScript and TypeScript files in a Lit project.

LANGUAGE: json
CODE:
{
  "scripts": {
    "lint": "eslint \"**/*.{js,ts}\""
  }
}

----------------------------------------

TITLE: Defining Slot Query Properties in Motion Carousel
DESCRIPTION: Demonstrates two approaches for accessing slot elements - using TypeScript decorators (@query) and JavaScript getters. These properties provide access to the 'selected' and 'previous' slots in the component.

LANGUAGE: typescript
CODE:
import {customElement, property, query} from 'lit/decorators.js';
...
export class MotionCarousel extends LitElement {
  @query('slot[name="selected"]', true)
  private selectedSlot!: HTMLSlotElement;

  @query('slot[name="previous"]', true)
  private previousSlot!: HTMLSlotElement;
  ...

LANGUAGE: javascript
CODE:
get selectedSlot() {
  return (this.__selectedSlot ??=
    this.renderRoot?.querySelector('slot[name="selected"]') ?? null);
}

get previousSlot() {
  return (this.__previousSlot ??=
    this.renderRoot?.querySelector('slot[name="previous"]') ?? null);
}

----------------------------------------

TITLE: Implementing updateSlots Method
DESCRIPTION: Method to manage slot assignments for carousel items. Removes existing slot assignments and sets new slots for the previous and selected items using the children collection.

LANGUAGE: typescript
CODE:
private updateSlots() {
  // unset old slot state
  this.selectedSlot.assignedElements()[0]?.removeAttribute('slot');
  this.previousSlot.assignedElements()[0]?.removeAttribute('slot');
  // set slots
  this.children[this.previous]?.setAttribute('slot', 'previous');
  this.children[this.selected]?.setAttribute('slot', 'selected');
}

LANGUAGE: javascript
CODE:
updateSlots() {
  // unset old slot state
  this.selectedSlot.assignedElements()[0]?.removeAttribute('slot');
  this.previousSlot.assignedElements()[0]?.removeAttribute('slot');
  // set slots
  this.children[this.previous]?.setAttribute('slot', 'previous');
  this.children[this.selected]?.setAttribute('slot', 'selected');
}

----------------------------------------

TITLE: HTML-based Plugin System Example
DESCRIPTION: Example showing how to use context for creating an HTML-based plugin system

LANGUAGE: html
CODE:
<code-editor>
  <code-editor-javascript-mode></code-editor-javascript-mode>
  <code-editor-python-mode></code-editor-python-mode>
</code-editor>

----------------------------------------

TITLE: Importing Lit Decorators
DESCRIPTION: Shows how to import decorators from the lit/decorators.js module.

LANGUAGE: javascript
CODE:
import {customElement, property, eventOptions, query} from 'lit/decorators.js';

----------------------------------------

TITLE: Automatically Re-rendering on Locale Change (JavaScript)
DESCRIPTION: Example of using the updateWhenLocaleChanges function in JavaScript to automatically re-render a Lit component when the locale changes.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';
import {msg, updateWhenLocaleChanges} from '@lit/localize';

class MyElement extends LitElement {
  constructor() {
    super();
    updateWhenLocaleChanges(this);
  }

  render() {
    // Whenever setLocale() is called, and templates for that locale have
    // finished loading, this render() function will be re-invoked.
    return msg(html`Hello <b>World!</b>`);
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Controller with Directive Implementation
DESCRIPTION: Shows how to implement a controller that creates and manages a directive.

LANGUAGE: typescript
CODE:
class ResizeDirective {
  /* ... */
}
const resizeDirective = directive(ResizeDirective);

export class ResizeController {
  /* ... */
  observe() {
    // Pass a reference to the controller so the directive can
    // notify the controller on size changes.
    return resizeDirective(this);
  }
}

----------------------------------------

TITLE: Accessing Slotted Children in Lit Components
DESCRIPTION: Shows how to access and manipulate slotted children in a Lit component using a getter and the slotchange event.

LANGUAGE: JavaScript
CODE:
get _slottedChildren() {
  const slot = this.shadowRoot.querySelector('slot');
  return slot.assignedElements({flatten: true});
}

handleSlotchange(e) {
  const childNodes = e.target.assignedNodes({flatten: true});
  // ... do something with childNodes ...
  this.allText = childNodes.map((node) => {
    return node.textContent ? node.textContent : ''
  }).join('');
}

render() {
  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;
}

----------------------------------------

TITLE: Handling Localization Status Events (TypeScript)
DESCRIPTION: Example of using the lit-localize-status event to handle locale loading status changes, including showing/hiding a progress indicator and re-rendering the application.

LANGUAGE: typescript
CODE:
// Show/hide a progress indicator whenever a new locale is loading,
// and re-render the application every time a new locale successfully loads.
window.addEventListener('lit-localize-status', (event) => {
  const spinner = document.querySelector('#spinner');

  if (event.detail.status === 'loading') {
    console.log(`Loading new locale: ${event.detail.loadingLocale}`);
    spinner.removeAttribute('hidden');
  } else if (event.detail.status === 'ready') {
    console.log(`Loaded new locale: ${event.detail.readyLocale}`);
    spinner.setAttribute('hidden', '');
    renderApplication();
  } else if (event.detail.status === 'error') {
    console.error(
      `Error loading locale ${event.detail.errorLocale}: ` +
        event.detail.errorMessage
    );
    spinner.setAttribute('hidden', '');
  }
});

----------------------------------------

TITLE: Using classMap Directive for Dynamic Classes
DESCRIPTION: The classMap directive efficiently adds and removes classes on an element based on an object where keys are class names and values determine if the class is applied.

LANGUAGE: typescript
CODE:
@customElement('my-element')
class MyElement extends LitElement {
  @property({type: Boolean})
  enabled = false;

  render() {
    const classes = { enabled: this.enabled, hidden: false };
    return html`<div class=${classMap(classes)}>Classy text</div>`;
  }
}

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  static properties = {
    enabled: {type: Boolean},
  };

  constructor() {
    super();
    this.enabled = false;
  }

  render() {
    const classes = { enabled: this.enabled, hidden: false };
    return html`<div class=${classMap(classes)}>Classy text</div>`;
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: TypeScript Element Registration Example
DESCRIPTION: Example of registering a Lit element with TypeScript including global type declarations.

LANGUAGE: ts
CODE:
@customElement('my-element')
export class MyElement extends LitElement { /* ... */ }

declare global {
  interface HTMLElementTagNameMap {
    "my-element": MyElement;
  }
}

----------------------------------------

TITLE: Extending AsyncDirective Class in Lit (TypeScript)
DESCRIPTION: This snippet shows how to import and extend the AsyncDirective class from Lit to create a custom TimeAgoDirective. It demonstrates the basic structure for implementing asynchronous directives.

LANGUAGE: typescript
CODE:
import {directive, AsyncDirective} from 'lit/async-directive.js';

class TimeAgoDirective extends AsyncDirective {

----------------------------------------

TITLE: Rendering a lit-html Template to the DOM in JavaScript
DESCRIPTION: Illustrates how to render a lit-html TemplateResult to the DOM using the render() function. This example creates a template result and renders it to the document body.

LANGUAGE: javascript
CODE:
const result = myTemplate({title: 'Hello', body: 'lit-html is cool'});
render(result, document.body);

----------------------------------------

TITLE: Placeholder Comment for Empty Content File
DESCRIPTION: HTML comment explaining that this file exists only to create a section heading and its output is deleted by the Eleventy build process.

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Initializing Basic Lit SSR Template Rendering
DESCRIPTION: Demonstrates the basic render function signature and usage for rendering Lit templates on the server using @lit-labs/ssr package.

LANGUAGE: typescript
CODE:
render(value: unknown, renderInfo?: Partial<RenderInfo>): RenderResult

----------------------------------------

TITLE: Creating Controller with Configuration Parameters
DESCRIPTION: Example of a controller implementation that accepts additional configuration parameters in the constructor.

LANGUAGE: typescript
CODE:
class ClockController implements ReactiveController {
  private host: ReactiveControllerHost;
  timeout: number

  constructor(host: ReactiveControllerHost, timeout: number) {
    this.host = host;
    this.timeout = timeout;
    host.addController(this);
  }

LANGUAGE: javascript
CODE:
class ClockController {
  constructor(host, timeout) {
    this.host = host;
    this.timeout = timeout;
    host.addController(this);
  }

----------------------------------------

TITLE: Checking Browser Features in Lit Components
DESCRIPTION: Demonstrates safe browser feature detection using optional chaining to avoid server-side errors.

LANGUAGE: javascript
CODE:
const hasConstructableStylesheets = typeof globalThis.CSSStyleSheet?.prototype.replaceSync === 'function';

----------------------------------------

TITLE: Updating decorator imports
DESCRIPTION: Updates the import statement for Lit decorators to use the new location in Lit 3.0.

LANGUAGE: typescript
CODE:
// Removed decorator exports from lit-element
import {customElement, property, state} from 'lit-element';

// Updated
import {customElement, property, state} from 'lit/decorators.js';

----------------------------------------

TITLE: Implementing an Observable Directive with Lifecycle Handling in Lit
DESCRIPTION: Shows how to create a directive that subscribes to an Observable and handles disconnection and reconnection. It demonstrates proper resource management in async directives.

LANGUAGE: typescript
CODE:
class ObserveDirective extends AsyncDirective {
  observable: Observable<unknown> | undefined;
  unsubscribe: (() => void) | undefined;
  // When the observable changes, unsubscribe to the old one and
  // subscribe to the new one
  render(observable: Observable<unknown>) {
    if (this.observable !== observable) {
      this.unsubscribe?.();
      this.observable = observable
      if (this.isConnected)  {
        this.subscribe(observable);
      }
    }
    return noChange;
  }
  // Subscribes to the observable, calling the directive's asynchronous
  // setValue API each time the value changes
  subscribe(observable: Observable<unknown>) {
    this.unsubscribe = observable.subscribe((v: unknown) => {
      this.setValue(v);
    });
  }
  // When the directive is disconnected from the DOM, unsubscribe to ensure
  // the directive instance can be garbage collected
  disconnected() {
    this.unsubscribe!();
  }
  // If the subtree the directive is in was disconnected and subsequently
  // re-connected, re-subscribe to make the directive operable again
  reconnected() {
    this.subscribe(this.observable!);
  }
}
export const observe = directive(ObserveDirective);

----------------------------------------

TITLE: Binding Click Event to Switch Direction in Lit Component
DESCRIPTION: This snippet demonstrates how to bind the switchPlayDirection method to a click event on the <pre> element using Lit's declarative event listener syntax.

LANGUAGE: typescript
CODE:
render() {
  ...
  return html`<pre
    @click=${this.switchPlayDirection}
  >${word}</pre>`;
}

LANGUAGE: javascript
CODE:
render() {
  ...
  return html`<pre
    @click=${this.switchPlayDirection}
  >${word}</pre>`;
}

----------------------------------------

TITLE: Implementing Timer Initialization in Lit Directive
DESCRIPTION: Sets up a class field for timer handling and implements a function to ensure a timer is started only once. The timer runs every 3 seconds for periodic updates.

LANGUAGE: typescript
CODE:
  timer: number | undefined;

  ensureTimerStarted() {
    if (this.timer === undefined) {
      this.timer = setInterval(() => {
        /* do some periodic work */
      }, 3000);
    }
  }

LANGUAGE: javascript
CODE:
  timer = undefined;

  ensureTimerStarted() {
    if (this.timer === undefined) {
      this.timer = setInterval(() => {
        /* do some periodic work */
      }, 3000);
    }
  }

----------------------------------------

TITLE: Adding a Lit Component to HTML
DESCRIPTION: Shows how to include a Lit component in an HTML file using custom element syntax. Lit components are web components that can be used like regular HTML elements.

LANGUAGE: html
CODE:
<my-element></my-element>

----------------------------------------

TITLE: Adding and Removing Event Listeners in Lit Component Lifecycle Methods
DESCRIPTION: Illustrates how to add event listeners in connectedCallback and remove them in disconnectedCallback, ensuring proper cleanup when the component is disconnected from the DOM.

LANGUAGE: javascript
CODE:
connectedCallback() {
  super.connectedCallback();
  window.addEventListener('resize', this._handleResize);
}
disconnectedCallback() {
  window.removeEventListener('resize', this._handleResize);
  super.disconnectedCallback();
}

----------------------------------------

TITLE: Disabling Lit Development Warnings
DESCRIPTION: Examples of how to disable specific categories of development warnings in Lit using ReactiveElement and LitElement methods.

LANGUAGE: typescript
CODE:
import {LitElement, ReactiveElement} from 'lit';

// Turn off migration warnings on all ReactiveElements,
// including LitElements
ReactiveElement.disableWarning?.('migration');

// Turn off update warnings on all LitElements
LitElement.disableWarning?.('change-in-update');

// Turn off update warnings on one element
MyElement.disableWarning?.('change-in-update');

----------------------------------------

TITLE: Running Lit Project Dev Server
DESCRIPTION: Command to start the development server for a Lit project.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Conditional Rendering with Cache Directive in Lit
DESCRIPTION: Demonstrates using Lit's cache directive to optimize performance when switching between templates by caching DOM elements that aren't currently rendered.

LANGUAGE: typescript
CODE:
render() {
  return html`${cache(this.userName ?
    html`Welcome ${this.userName}`:
    html`Please log in <button>Login</button>`)
  }`;
}

----------------------------------------

TITLE: Lit Localize Configuration File
DESCRIPTION: Example configuration file (lit-localize.json) for setting up localization parameters

LANGUAGE: json
CODE:
{
  "$schema": "https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json",
  "sourceLocale": "en",
  "targetLocales": ["es-419", "zh-Hans"],
  "tsConfig": "./tsconfig.json",
  "output": {
    "mode": "runtime",
    "outputDir": "./src/generated/locales",
    "localeCodesModule": "./src/generated/locale-codes.ts"
  },
  "interchange": {
    "format": "xliff",
    "xliffDir": "./xliff/"
  }
}

----------------------------------------

TITLE: Using LitElement Component in HTML
DESCRIPTION: Example of adding a LitElement component to an HTML file.

LANGUAGE: html
CODE:
<some-component></some-component>

----------------------------------------

TITLE: Configuring Web Dev Server for Legacy Browser Support
DESCRIPTION: Example of how to configure Web Dev Server to support legacy browsers, including polyfills for web components and Lit.

LANGUAGE: javascript
CODE:
import { legacyPlugin } from '@web/dev-server-legacy';

export default {
  // ...
  plugins: [
    // Make sure this plugin is always last
    legacyPlugin({
      polyfills: {
        webcomponents: true,
        // Inject lit's polyfill-support module into test files, which is required
        // for interfacing with the webcomponents polyfills
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
  ],
};

----------------------------------------

TITLE: Dynamic Template Function Example
DESCRIPTION: Demonstrates creating and using a template function for dynamic updates

LANGUAGE: js
CODE:
import {html, render} from 'lit-html';

// Define a template function
const myTemplate = (name) => html`<div>Hello ${name}</div>`;

// Render the template with some data
render(myTemplate('earth'), document.body);

// ... Later on ...
// Render the template with different data
render(myTemplate('mars'), document.body);

----------------------------------------

TITLE: Implementing Selection Updates in JavaScript
DESCRIPTION: JavaScript version of the selection management implementation, providing the same functionality as the TypeScript version but without type annotations.

LANGUAGE: javascript
CODE:
previous = 0;
updated(changedProperties) {
  if (changedProperties.has('selected') && this.hasValidSelected()) {
    this.updateSlots();
    this.previous = this.selected;
  }
}

updateSlots() {
  this.children[this.previous]?.removeAttribute('slot');
  this.children[this.selected]?.setAttribute('slot', 'selected');
}

----------------------------------------

TITLE: Applying Inline Styles with styleMap in lit-html
DESCRIPTION: Shows how to use the styleMap directive to set inline styles on an element in a lit-html template based on a styles object.

LANGUAGE: JavaScript
CODE:
import {html} from 'lit-html';
import {styleMap} from 'lit-html/directives/style-map.js';

...

const myTemplate = () => {
  styles = {
    color: myTextColor,
    backgroundColor: highlight ? myHighlightColor : myBackgroundColor,
  };

  return html`
    <div style=${styleMap(styles)}>
      Hi there!
    </div>
  `;
};

----------------------------------------

TITLE: Configuring Lit Warnings in a Custom Element
DESCRIPTION: Example of how to control which warnings are enabled for a specific Lit element class using the static enabledWarnings property.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  static enabledWarnings = ['migration'];
}

----------------------------------------

TITLE: TypeScript Mixin with Constructor Type
DESCRIPTION: Shows how to properly type a mixin in TypeScript using a Constructor helper type and proper type constraints.

LANGUAGE: typescript
CODE:
import {LitElement} from 'lit';

type Constructor<T = {}> = new (...args: any[]) => T;

export const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {
  class MyMixinClass extends superClass {
    /* ... */
  };
  return MyMixinClass as /* see "typing the subclass" below */;
}

----------------------------------------

TITLE: Adding Event Listeners in lit-html Templates
DESCRIPTION: Shows how to add declarative event listeners to elements in lit-html templates. It covers both function and object-based event handlers.

LANGUAGE: javascript
CODE:
const myTemplate = () => html`<button @click=${clickHandler}>Click Me!</button>`;

const clickHandler = {
  // handleEvent method is required.
  handleEvent(e) {
    console.log('clicked!');
  },
  // event listener objects can also define zero or more of the event
  // listener options: capture, passive, and once.
  capture: true,
};

----------------------------------------

TITLE: Using the Repeat Directive in Lit
DESCRIPTION: Shows the basic syntax for the repeat directive which performs efficient updates of lists based on user-supplied keys. Takes items array, key function, and item template as parameters.

LANGUAGE: typescript
CODE:
repeat(items, keyFunction, itemTemplate)

----------------------------------------

TITLE: Importing Code Checker in HTML
DESCRIPTION: Demonstrates how to import the code checking script in the tutorial's HTML file, using playground-hide comments to hide the import.

LANGUAGE: html
CODE:
<head>
  <!-- playground-hide --><script type="module" src="./_check-code.js"></script><!-- playground-hide-end -->
  <script type="module" src="./my-element.js"></script>
</head>
<body>
  <my-element name="User"></my-element>
</body>

----------------------------------------

TITLE: Configuring Babel for Lit Component Compilation
DESCRIPTION: Demonstrates the recommended Babel configuration for compiling Lit components, including preset-env and decorator plugin settings.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/preset-env", {"targets": "defaults"}]
  ],
  "plugins": [
    ["@babel/plugin-proposal-decorators", {"version": "2023-05"}]
  ]
}

----------------------------------------

TITLE: Updating Render Method with format Function
DESCRIPTION: This snippet shows how to use the format function from timeago.js in the render method of a directive.

LANGUAGE: typescript
CODE:
    return format(time);

----------------------------------------

TITLE: Updating Render Method with Click Handler in Lit Carousel
DESCRIPTION: This snippet shows how to modify the render method of a Lit component to add a click event listener to the carousel container.

LANGUAGE: typescript
CODE:
return html`
    <div class="fit" @click=${this.clickHandler}>`

----------------------------------------

TITLE: Cleaned Up Lit Component with Date Converter (TypeScript)
DESCRIPTION: This snippet shows the final, cleaned-up version of the DateDisplay component in TypeScript. It removes redundant properties and methods, focusing on the essential date conversion and rendering.

LANGUAGE: typescript
CODE:
export class DateDisplay extends LitElement {
  @property({converter: dateConverter})
  date = new Date();

  render() {
    return html`
      <p>The given date is: ${this.date.toLocaleDateString()}</p>
    `;
  }
}

----------------------------------------

TITLE: Adding Play Direction Switch Method in Lit Component
DESCRIPTION: This snippet adds a switchPlayDirection method to invert the playDirection property.

LANGUAGE: typescript
CODE:
switchPlayDirection() {
  this.playDirection *= -1;
}

LANGUAGE: javascript
CODE:
switchPlayDirection() {
  this.playDirection *= -1;
}

----------------------------------------

TITLE: Configuring Web Dev Server for Lit Development
DESCRIPTION: Example configuration for Web Dev Server to support Lit development, including module resolution and development build selection.

LANGUAGE: javascript
CODE:
export default {
  open: true,
  watch: true,
  appIndex: 'index.html',
  nodeResolve: {
    exportConditions: ['development'],
  },
};

----------------------------------------

TITLE: Updating Lit Import Statements
DESCRIPTION: Examples showing how to update import statements from lit-element to the new lit package.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit-element';

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';

----------------------------------------

TITLE: Nesting Templates in lit-html
DESCRIPTION: Demonstrates how to nest templates by passing a TemplateResult as a value of an expression.

LANGUAGE: javascript
CODE:
const header = html`<h1>Header</h1>`;

const page = html`
  ${header}
  <p>This is some text</p>
`;

----------------------------------------

TITLE: Functional UI Description with lit-html
DESCRIPTION: Demonstrates how to create a functional UI description using lit-html, where the UI is expressed as a function of data. This aligns with the concept of UI = f(data).

LANGUAGE: javascript
CODE:
let ui = (data) => html`...${data}...`;

----------------------------------------

TITLE: Template Breaking Examples in Localization
DESCRIPTION: Shows how to break down larger templates into smaller, more manageable pieces for better translation management.

LANGUAGE: javascript
CODE:
render() {
  // Don't do this!
  return msg(html`
  <p>The red button makes the rocket go up.</p>
  <p>The green button makes the rocket do a flip.</p>
  `);
}

LANGUAGE: javascript
CODE:
render() {
  // Better! No markup needs to be processed by translators, and each sentence
  // can be translated independently.
  return html`
  <p>${msg('The red button makes the rocket go up.')}</p>
  <p>${msg('The green button makes the rocket do a flip.')}</p>
  `;
}

----------------------------------------

TITLE: Implementing willUpdate() in Lit Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to implement the willUpdate() callback in a Lit component using TypeScript. It shows how to react to changes in 'forward' and 'backward' properties, updating each based on changes to the other.

LANGUAGE: typescript
CODE:
  willUpdate(changedProperties: PropertyValues<this>) {
    if (changedProperties.has('forward')) {
      this.backward = this.forward.split('').reverse().join('');
    }

    if (changedProperties.has('backward')) {
      this.forward = this.backward.split('').reverse().join('');
    }
  }

----------------------------------------

TITLE: Defining Lit Component Class in JavaScript
DESCRIPTION: JavaScript code snippet showing how to define and register a Lit component class.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement { /* ... */ }

customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Creating a Repeat Pattern Function
DESCRIPTION: Defines a function that creates a pattern element with specific dimensions and positioning attributes.

LANGUAGE: typescript
CODE:
const createRepeatPattern = () => svg`
  <pattern
    id="repeat-pattern"
    x="-10"
    y="-10"
    width="200"
    height="200"
    patternUnits="userSpaceOnUse">
    ${createTile()}
  </pattern>
`;

----------------------------------------

TITLE: Static Expressions with Lit
DESCRIPTION: Shows how to use static expressions in Lit templates using the literal tag function for cases where expressions need to be interpolated before HTML processing.

LANGUAGE: typescript
CODE:
import {LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {html, literal} from 'lit/static-html.js';\n\n@customElement('my-button')\nclass MyButton extends LitElement {\n  tag = literal`button`;\n  activeAttribute = literal`active`;\n  @property() caption = 'Hello static';\n  @property({type: Boolean}) active = false;\n\n  render() {\n    return html`\n      <${this.tag} ${this.activeAttribute}=${this.active}>\n        <p>${this.caption}</p>\n      </${this.tag}>`;\n  }\n}

----------------------------------------

TITLE: Defining TypeScript Typings for Lit Components
DESCRIPTION: Shows how to add an HTMLElementTagNameMap entry for a Lit component in TypeScript to improve type support.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement { /* ... */ }

declare global {
  interface HTMLElementTagNameMap {
    "my-element": MyElement;
  }
}

----------------------------------------

TITLE: Legacy Plugin Configuration
DESCRIPTION: Configuration for @web/test-runner or @web/dev-server to automatically inject polyfill support.

LANGUAGE: javascript
CODE:
export default {
  ...
  plugins: [
    legacyPlugin({
      polyfills: {
        webcomponents: true,
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
  ],
};

----------------------------------------

TITLE: Using Objects in lit-html Templates
DESCRIPTION: Shows how to use object entries in lit-html templates.

LANGUAGE: javascript
CODE:
const items = {
  a: 1,
  b: 23,
  c: 456,
};
const list = () => html`items = ${Object.entries(items)}`;

----------------------------------------

TITLE: Conditional Rendering with Separate Function in Lit
DESCRIPTION: Illustrates how to factor conditional logic into a separate function for cleaner template code. The getUserMessage function handles the conditional logic separately from the render method.

LANGUAGE: typescript
CODE:
getUserMessage() {
  if (this.userName) {
    return html`Welcome ${this.userName}`;
  } else {
    return html`Please log in <button>Login</button>`;
  }
}
render() {
  return html`<p>${this.getUserMessage()}</p>`;
}

----------------------------------------

TITLE: Creating a Concrete Subclass with a Mixin in TypeScript
DESCRIPTION: Demonstrates how to create a concrete subclass using a mixin, which can then be extended by users.

LANGUAGE: typescript
CODE:
export const LitElementWithMixin = MyMixin(LitElement);

LANGUAGE: typescript
CODE:
import {LitElementWithMixin} from './lit-element-with-mixin.js';

class MyElement extends LitElementWithMixin {
  /* user code */
}

----------------------------------------

TITLE: Implementing willUpdate() in Lit Component (JavaScript)
DESCRIPTION: This snippet shows how to implement the willUpdate() callback in a Lit component using JavaScript. It demonstrates reacting to changes in 'forward' and 'backward' properties, updating each based on changes to the other.

LANGUAGE: javascript
CODE:
  willUpdate(changedProperties) {
    if (changedProperties.has('forward')) {
      this.backward = this.forward.split('').reverse().join('');
    }

    if (changedProperties.has('backward')) {
      this.forward = this.backward.split('').reverse().join('');
    }
  }

----------------------------------------

TITLE: Installing Rollup Dependencies for Lit Production Build
DESCRIPTION: Shell commands for installing required npm packages to build a Lit application with Rollup, including plugins for HTML processing, minification, and asset copying.

LANGUAGE: shell
CODE:
npm i --save-dev rollup \
  @web/rollup-plugin-html \
  @web/rollup-plugin-copy \
  @rollup/plugin-node-resolve \
  @rollup/plugin-terser \
  rollup-plugin-minify-html-literals \
  rollup-plugin-summary

----------------------------------------

TITLE: Implementing renderTooltipContent Method for Dynamic Tooltip Updates in Lit
DESCRIPTION: This method renders the tooltip content using Lit's render function. It ensures the tooltip content is updated dynamically and stays in sync with the component's render options.

LANGUAGE: typescript
CODE:
import {html, css, LitElement, render} from 'lit';
//...

renderTooltipContent() {
  render(this.tooltipContent, this.tooltip!, this.part!.options);
}

LANGUAGE: javascript
CODE:
import {html, css, LitElement, render} from 'lit';
//...

renderTooltipContent() {
  render(this.tooltipContent, this.tooltip, this.part.options);
}

----------------------------------------

TITLE: Connecting Lit Component Events
DESCRIPTION: Implementation of the connectedCallback lifecycle method to set up event listeners and initialize the shadow DOM for the rating component.

LANGUAGE: typescript
CODE:
connectedCallback() {
  this.attachShadow({mode: 'open'});
  this.render();

  this.shadowRoot!
    .querySelector('.thumb_up')!
    .addEventListener('click', this._boundOnUpClick);
  this.shadowRoot!
    .querySelector('.thumb_down')!
    .addEventListener('click', this._boundOnDownClick);
}

LANGUAGE: javascript
CODE:
connectedCallback() {
  this.attachShadow({mode: 'open'});
  this.render();

  this.shadowRoot
    .querySelector('.thumb_up')
    .addEventListener('click', this._boundOnUpClick);
  this.shadowRoot
    .querySelector('.thumb_down')
    .addEventListener('click', this._boundOnDownClick);
}

----------------------------------------

TITLE: Configuring TypeScript for modern JavaScript output
DESCRIPTION: TypeScript configuration options for outputting modern JavaScript (ES2017 and ES modules).

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es2017",
    "module": "es2015",
    ...
}

----------------------------------------

TITLE: Equivalent Code Without @property Decorator
DESCRIPTION: Illustrates the equivalent code for declaring a reactive property without using the @property decorator. This shows how the decorator simplifies property declarations.

LANGUAGE: javascript
CODE:
static get properties() {
  return {
    adjective: {}
  };
}

constructor() {
  this.adjective = 'awesome';
}

----------------------------------------

TITLE: Implementing Localized LitElement in JavaScript
DESCRIPTION: This snippet shows how to create a localized LitElement component using JavaScript, including the updateWhenLocaleChanges function for automatic re-rendering when the locale changes.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';
import {msg, updateWhenLocaleChanges} from '@lit/localize';

class MyElement extends LitElement {
  constructor() {
    super();
    updateWhenLocaleChanges(this);
  }

  render() {
    // Whenever setLocale() is called, and templates for that locale have
    // finished loading, this render() function will be re-invoked.
    return msg(html`Hello <b>World!</b>`);
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Configuring Conditional Exports for SSR
DESCRIPTION: Example package.json configuration for setting up conditional exports to support different code paths for Node.js and browser environments.

LANGUAGE: json
CODE:
{
  "name": "my-awesome-lit-components",
  "exports": {
    "./button.js": {
      "node": "./button-node.js",
      "default": "./button.js"
    }
  }
}

----------------------------------------

TITLE: Implementing Pinpoint DOM Updates with Signals in Lit
DESCRIPTION: This example shows how to achieve pinpoint updates in a Lit component using the watch directive from @lit-labs/signals. It allows for targeted updates of specific bindings when a signal changes, potentially improving performance by avoiding unnecessary re-renders.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import {SignalWatcher, watch, signal} from '@lit-labs/signals';

const count = signal(0);

@customElement('pinpoint-counter')
export class PinpointCounter extends SignalWatcher(LitElement) {
  render() {
    return html`
      <p>The count is ${watch(count)}</p>
      <button @click=${this.increment}>Increment</button>
    `;
  }

  increment() {
    count.set(count.get() + 1);
  }
}

----------------------------------------

TITLE: Applying Clip Path to SVG Rectangle in TypeScript
DESCRIPTION: Demonstrates how to apply a clip path to an SVG rectangle by referencing the clip path's id.

LANGUAGE: ts
CODE:
const helloTile = svg`
  <rect
    clip-path="url(#rect-clip)"
    width="300"
    height="300"
    fill="#000000">
  </rect>
`;

----------------------------------------

TITLE: Checking for Constructable Stylesheets in JavaScript
DESCRIPTION: This code snippet demonstrates how to safely check for the availability of Constructable Stylesheets API, which may not be present in all environments.

LANGUAGE: javascript
CODE:
const hasConstructableStylesheets = typeof globalThis.CSSStyleSheet?.prototype.replaceSync === 'function';

----------------------------------------

TITLE: Implementing a Rating Element Custom Element in TypeScript
DESCRIPTION: This snippet demonstrates how to create a RatingElement custom element using TypeScript. It initializes the rating in the constructor and renders the DOM structure in the connectedCallback, including SVG icons for voting buttons and inline styles.

LANGUAGE: typescript
CODE:
export class RatingElement extends HTMLElement {
  rating: number;

  constructor() {
    super();
    this.rating = 0;
  }

  connectedCallback() {
    this.innerHTML = `
      <style>
        rating-element {
          display: inline-flex;
          align-items: center;
        }
        rating-element button {
          background: transparent;
          border: none;
          cursor: pointer;
        }
      </style>
      <button class="thumb_down" >
        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
      </button>
      <span class="rating">${this.rating}</span>
      <button class="thumb_up">
        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
      </button>
    `;
  }
 }

 customElements.define('rating-element', RatingElement);

----------------------------------------

TITLE: Deduplicating npm dependencies
DESCRIPTION: Command to reduce duplicated modules in an npm project.

LANGUAGE: bash
CODE:
npm dedupe

----------------------------------------

TITLE: Task Chaining in Lit Components
DESCRIPTION: This example demonstrates how to chain multiple tasks together, where the output of one task is used as input for another task. It shows two approaches: using separate tasks and using a single task with intermediate results.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  private _getDataTask = new Task(this, {
    task: ([dataId]) => getData(dataId),
    args: () => [this.dataId],
  });

  private _processDataTask = new Task(this, {
    task: ([data, param]) => processData(data, param),
    args: () => [this._getDataTask.value, this.param],
  });
}

// Alternative approach with a single task
class MyElement extends LitElement {
  private _getDataTask = new Task(this, {
    task: ([dataId, param]) => {
      const data = await getData(dataId);
      return processData(data, param);
    },
    args: () => [this.dataId, this.param],
  });
}

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  _getDataTask = new Task(this, {
    task: ([dataId]) => getData(dataId),
    args: () => [this.dataId],
  });

  _processDataTask = new Task(this, {
    task: ([data, param]) => processData(data, param),
    args: () => [this._getDataTask.value, this.param],
  });
}

// Alternative approach with a single task
class MyElement extends LitElement {
  _getDataTask = new Task(this, {
    task: ([dataId, param]) => {
      const data = await getData(dataId);
      return processData(data, param);
    },
    args: () => [this.dataId, this.param],
  });
}

----------------------------------------

TITLE: Using 'this' in Declarative Event Handlers in Lit Component
DESCRIPTION: Shows how 'this' can be used to refer to the component instance in declarative event handlers, as they are automatically bound to the component.

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  render() {
    return html`<button @click="${this._handleClick}">click</button>`;
  }
  _handleClick(e) {
    console.log(this.prop);
  }
}

----------------------------------------

TITLE: XLIFF Translation Example
DESCRIPTION: Sample XLIFF file showing source text and translations with HTML markup

LANGUAGE: xml
CODE:
<trans-unit id="s3d58dee72d4e0c27">
  <source>Hello World</source>
  <target>Hola Mundo</target>
</trans-unit>

<trans-unit id="saed7d3734ce7f09d">
  <source>Hello <x equiv-text="${name}"/></source>
  <target>Hola <x equiv-text="${name}"/></target>
</trans-unit>

<trans-unit id="hf71d669027554f48">
  <source>Hello <x equiv-text="&lt;b&gt;"/>World<x equiv-text="&lt;/b&gt;"/></source>
  <target>Hola <x equiv-text="&lt;b&gt;"/>Mundo<x equiv-text="&lt;/b&gt;"/></target>
</trans-unit>

----------------------------------------

TITLE: Configuring Web Dev Server for Lit Development
DESCRIPTION: This snippet shows the configuration for Web Dev Server to support Lit development, including module resolution and development build selection.

LANGUAGE: javascript
CODE:
export default {
  open: true,
  watch: true,
  appIndex: 'index.html',
  nodeResolve: {
    exportConditions: ['development'],
  },
};

----------------------------------------

TITLE: Importing LitElement Decorators
DESCRIPTION: Shows how to import decorators directly from the lit-element module. This example imports the eventOptions decorator.

LANGUAGE: javascript
CODE:
import {eventOptions} from 'lit-element';

----------------------------------------

TITLE: Implementing HTML Template for Rating Element
DESCRIPTION: This snippet shows how to create an HTML template for a rating element, including styles and SVG icons for thumbs up and down buttons.

LANGUAGE: html
CODE:
<template id="rating-element-template">
   <style>
     :host {
       display: inline-flex;
       align-items: center;
     }
     button {
       background: transparent;
       border: none;
       cursor: pointer;
     }
   </style>
   <button class="thumb_down" >
     <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
   </button>
   <span class="rating"></span>
   <button class="thumb_up">
     <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
   </button>
 </template>

----------------------------------------

TITLE: Building TypeScript LitElement Project
DESCRIPTION: Commands to build and watch for changes in a TypeScript LitElement project.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npm run build:watch

----------------------------------------

TITLE: Updating Main Lit Template (JavaScript)
DESCRIPTION: This snippet shows how to update the main Lit template to use the new conditional partial template. It replaces the static todos with the dynamic todosOrMessage.

LANGUAGE: javascript
CODE:
${todosOrMessage}

----------------------------------------

TITLE: Setting date-str Attribute in HTML
DESCRIPTION: HTML example showing how to set the date-str attribute on the date-display component.

LANGUAGE: html
CODE:
<body>
  <date-display date-str="05/05/22"></date-display>
</body>

----------------------------------------

TITLE: Including the template polyfill for IE11 support
DESCRIPTION: HTML snippet for including the template polyfill script for IE11 compatibility.

LANGUAGE: html
CODE:
<script src="./node_modules/@webcomponents/template/template.min.js"></script>

----------------------------------------

TITLE: Improving TypeScript Argument Type Inference for Tasks
DESCRIPTION: This example shows how to use 'as const' to improve TypeScript's type inference for task arguments, resulting in more accurate tuple types instead of loose array types.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  @property() myNumber = 10;
  @property() myText = "Hello world";

  _myTask = new Task(this, {
    args: () => [this.myNumber, this.myText] as const,
    task: ([number, text]) => {
      // implementation omitted
    }
  });
}

----------------------------------------

TITLE: Deferring Event Listener Addition After First Paint in Lit Component
DESCRIPTION: Demonstrates a technique to add event listeners after the first paint, which can be useful for optimizing first paint performance when adding many listeners.

LANGUAGE: javascript
CODE:
async firstUpdated() {
  // Give the browser a chance to paint
  await new Promise((r) => setTimeout(r, 0));
  this.addEventListener('click', this._handleClick);
}

----------------------------------------

TITLE: Using isServer for Environment-Specific Code in Lit
DESCRIPTION: This snippet shows how to use the isServer environment checker from the 'lit' package to conditionally execute code based on whether it's running in a server or browser environment.

LANGUAGE: javascript
CODE:
import {isServer} from 'lit';

if (isServer) {
  // only runs in server environments like Node
} else {
  // runs in the browser
}

----------------------------------------

TITLE: Typing a Mixin Without New Public/Protected API
DESCRIPTION: Shows how to type a mixin that only overrides LitElement methods or properties without adding new API.

LANGUAGE: typescript
CODE:
export const MyMixin = <T extends Constructor<LitElement>>(superClass: T) => {
  class MyMixinClass extends superClass {
    connectedCallback() {
      super.connectedCallback();
      this.doSomethingPrivate();
    }
    private doSomethingPrivate() {
      /* does not need to be part of the interface */
    }
  };
  // Cast return type to the superClass type passed in
  return MyMixinClass as T;
}

----------------------------------------

TITLE: Incorrect Default Label Localization Pattern in Lit
DESCRIPTION: Demonstrates an incorrect way of setting localized default values that won't update when locale changes

LANGUAGE: javascript
CODE:
// Don't do this!
label = msg('Default label')

render() {
  return html`<button>${this.label}</button>`;
}

----------------------------------------

TITLE: Implementing Direction-based Word Progression in Lit Component
DESCRIPTION: This snippet modifies the tickToNextWord method to choose the next word based on the playDirection.

LANGUAGE: typescript
CODE:
tickToNextWord = () => { this.idx += this.playDirection; };

LANGUAGE: javascript
CODE:
tickToNextWord = () => { this.idx += this.playDirection; };

----------------------------------------

TITLE: Polyfill Loading Script Configuration
DESCRIPTION: HTML script loading order for required polyfills and Lit support in legacy browsers.

LANGUAGE: html
CODE:
<script src="path/to/js/polyfills/you/need.js"></script>
<script src="node_modules/lit/polyfill-support.js"></script>
<script src="node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js"></script>
<!-- Load application code here -->

----------------------------------------

TITLE: Updating Word Selection Logic in Lit Component
DESCRIPTION: This snippet updates the math in the render() method to account for a negative this.idx when selecting the word to display.

LANGUAGE: typescript
CODE:
render() {
  ...
  const idx = ((this.idx % splitWords.length) + splitWords.length) % splitWords.length;
  const word = splitWords[idx];
  ...
}

LANGUAGE: javascript
CODE:
render() {
  ...
  const idx = ((this.idx % splitWords.length) + splitWords.length) % splitWords.length;
  const word = splitWords[idx];
  ...
}

----------------------------------------

TITLE: Importing lit-html in JavaScript
DESCRIPTION: Example of importing lit-html functions using bare module specifiers.

LANGUAGE: javascript
CODE:
import {html, render} from 'lit-html';

----------------------------------------

TITLE: Implementing shouldUpdate Method
DESCRIPTION: Example of implementing shouldUpdate to control when the component should update based on changed properties.

LANGUAGE: typescript
CODE:
shouldUpdate(changedProperties: Map<string, any>) {
  // Only update element if prop1 changed.
  return changedProperties.has('prop1'); 
}

----------------------------------------

TITLE: Adding Event Listener Options with Decorator
DESCRIPTION: Example showing how to use the @eventOptions decorator to customize event listener options like passive and capture.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';
import {eventOptions} from 'lit/decorators.js';
//...
@eventOptions({passive: true})
private _handleTouchStart(e) { console.log(e.type) }

----------------------------------------

TITLE: Custom Property Converter
DESCRIPTION: Implementation of custom property converter for attribute-property conversion.

LANGUAGE: JavaScript
CODE:
myProp: {
  converter: {
    fromAttribute: (value, type) => {
      // Convert string value to property type
    },
    toAttribute: (value, type) => {
      // Convert property value to string
    }
  }
}

----------------------------------------

TITLE: DOM Interface Implementation Table
DESCRIPTION: A markdown table showing the implementation status of various DOM interfaces and methods in Lit's server-side rendering environment. Includes details about Element, HTMLElement, and CustomElementRegistry implementations.

LANGUAGE: markdown
CODE:
| Property | Notes |
|-|-|
| `Element` | ⚠️ Partial <table><tbody><tr><td>`attributes`</td><td>✅</td><tr><td>`shadowRoot`</td><td>⚠️ Returns `{host: this}` if `attachShadow()` was called with `{mode: 'open'}`</td><tr><td>`setAttribute()`</td><td>✅</td><tr><td>`removeAttribute()`</td><td>✅</td><tr><td>`hasAttribute()`</td><td>✅</td><tr><td>`attachShadow()`</td><td>⚠️ Returns `{host: this}`</td><tr><td>`getAttribute()`</td><td>✅</td></tr></tbody></table> |
| `HTMLElement` | ⚠️ Empty class |
| `CustomElementRegistry` | <table><tbody><tr><td>`define()`</td><td>✅</td></tr><tr><td>`get()`</td><td>✅</td></tr></tbody></table> |
| `customElements` | Instance of `CustomElementRegistry` |

----------------------------------------

TITLE: Pre-loading Locale Modules (JavaScript)
DESCRIPTION: Example of pre-loading all locale modules when the page loads in Lit's runtime localization mode.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
import {sourceLocale, targetLocales} from './generated/locales.js';

const localizedTemplates = new Map(
  targetLocales.map((locale) => [locale, import(`/locales/${locale}.js`)])
);

const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: async (locale) => localizedTemplates.get(locale),
});

----------------------------------------

TITLE: Implementing shouldUpdate Method
DESCRIPTION: Example of implementing shouldUpdate to control when the component should update based on changed properties.

LANGUAGE: typescript
CODE:
shouldUpdate(changedProperties: Map<string, any>) {
  // Only update element if prop1 changed.
  return changedProperties.has('prop1'); 
}

----------------------------------------

TITLE: Implementing setupLazy Method for Lazy-Loading Tooltip in Lit
DESCRIPTION: This method sets up lazy loading for the tooltip using SimpleTooltip.lazy. It ensures the setup is only done once and stores the tooltip instance for later use.

LANGUAGE: typescript
CODE:
setupLazy() {
  this.didSetupLazy = true;
  SimpleTooltip.lazy(this.part!.element, (tooltip: SimpleTooltip) => {
    this.tooltip = tooltip;
    this.renderTooltipContent();
  });
}

LANGUAGE: javascript
CODE:
setupLazy() {
  this.didSetupLazy = true;
  SimpleTooltip.lazy(this.part.element, (tooltip) => {
    this.tooltip = tooltip;
    this.renderTooltipContent();
  });
}

----------------------------------------

TITLE: Importing animate directive from @lit-labs/motion in TypeScript
DESCRIPTION: This snippet shows how to import the animate directive from the @lit-labs/motion package. It's added after other import statements at the top of the module.

LANGUAGE: typescript
CODE:
import {animate} from '@lit-labs/motion';

----------------------------------------

TITLE: Using map() Directive in Lit Component Render Method (TypeScript)
DESCRIPTION: This code snippet shows how to use the map() directive in a Lit component's render method to transform items from the 'items' property into list items. It demonstrates rendering each item as an <li> element within a <ul> tag.

LANGUAGE: typescript
CODE:
  render() {
    return html`
      ⋮
      <ul>
        ${map(this.items, (item) => html`<li>${item}</li>`)}
      </ul>
    `;
  }

----------------------------------------

TITLE: Initializing Lit Template Component in TypeScript/JavaScript
DESCRIPTION: Main component implementation showing how to create a rating element using Lit templates. Includes styling, HTML structure, and basic rendering logic.

LANGUAGE: typescript
CODE:
// Don't forget to import from Lit!
import {render, html} from 'lit';

export class RatingElement extends HTMLElement {
  ...
  render() {
    if (!this.shadowRoot) {
      return;
    }

    const template = html`
      <style>
        :host {
          display: inline-flex;
          align-items: center;
        }
        button {
          background: transparent;
          border: none;
          cursor: pointer;
        }

       :host([vote=up]) .thumb_up {
         fill: green;
       }

       :host([vote=down]) .thumb_down {
         fill: red;
       }
      </style>
      <button class="thumb_down">
        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
      </button>
      <span class="rating">${this.rating}</span>
      <button class="thumb_up">
        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
      </button>`;

    render(template, this.shadowRoot);
  }
}

----------------------------------------

TITLE: Defining LitElement Properties in JavaScript
DESCRIPTION: Example of defining reactive properties in a LitElement component using JavaScript.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement {

  static get properties() {
    return {
      name: {type: String}
    }
  }

  constructor() {
    super();
    this.name = 'World';
  }
  ...
}

----------------------------------------

TITLE: Component Constructor Event Listener
DESCRIPTION: Adding event listeners in the component constructor to handle events from both slotted and shadow DOM children.

LANGUAGE: javascript
CODE:
constructor() {
  super();
  this.addEventListener('click', (e) => console.log(e.type, e.target.localName));
}

----------------------------------------

TITLE: Binding to Attributes and Properties in lit-html
DESCRIPTION: Demonstrates how to bind expressions to element attributes and properties. It covers standard attribute binding, boolean attribute binding, and property binding.

LANGUAGE: javascript
CODE:
// set the class attribute
const myTemplate = (data) => html`<div class=${data.cssClass}>Stylish text.</div>`;

const myTemplate2 = (data) => html`<div ?disabled=${!data.active}>Stylish text.</div>`;

const myTemplate3 = (data) => html`<input .value=${data.value}></input>`;

const myTemplate4 = (data) => html`<my-list .listItems=${data.items}></my-list>`;

----------------------------------------

TITLE: Loading Lit Element Hydration Support
DESCRIPTION: Shows how to properly load the Lit element hydration support module before component definitions for server-rendered components.

LANGUAGE: html
CODE:
  <body>
    <!-- App components rendered with declarative shadow DOM placed here. -->

    <!-- ssr-client lit-element-hydrate-support should be loaded first. -->
    <script type="module" src="/node_modules/@lit-labs/ssr-client/lit-element-hydrate-support.js"></script>

    <!-- As component definition loads, your pre-rendered components will
        come to life and become interactive. -->
    <script src="/app-components.js"></script>
  </body>

----------------------------------------

TITLE: Configuring Lazy-Loading of Locale Modules in JavaScript
DESCRIPTION: This snippet shows how to configure Lit Localize to lazy-load locale modules using dynamic imports, which minimizes the amount of code downloaded and executed by users.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
import {sourceLocale, targetLocales} from './generated/locale-codes.js';

const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: (locale) => import(`/locales/${locale}.js`),
});

----------------------------------------

TITLE: Displaying Dynamic Content with Custom Element in HTML
DESCRIPTION: This snippet demonstrates the use of a custom element 'ts-js' to display different content for JavaScript and TypeScript versions. It shows how to use slots within a custom element to provide language-specific information.

LANGUAGE: html
CODE:
<ts-js>
  <span slot="js">101</span>
  <span slot="ts">99</span>
</ts-js>

----------------------------------------

TITLE: Implementing Lazy Tooltip in MyContent Component
DESCRIPTION: This snippet demonstrates how to use the new lazy loading method in the MyContent component. It sets up the lazy tooltip in the firstUpdated lifecycle callback, ensuring the tooltip is created only when needed.

LANGUAGE: typescript
CODE:
import {SimpleTooltip} from './simple-tooltip.js';

@customElement('my-content')
export class MyContent extends LitElement {
  // ...
  firstUpdated() {
    const greeting = this.shadowRoot!.getElementById('greeting')!;
    SimpleTooltip.lazy(greeting, (tooltip: SimpleTooltip) => {
      tooltip.textContent = `${this.name}, there's coffee available in the lounge.`;
    });
  }

LANGUAGE: javascript
CODE:
import {SimpleTooltip} from './simple-tooltip.js';

export class MyContent extends LitElement {
  // ...
  firstUpdated() {
    const greeting = this.shadowRoot.getElementById('greeting');
    SimpleTooltip.lazy(greeting, (tooltip) => {
      tooltip.textContent = `${this.name}, there's coffee available in the lounge.`;
    });
  }

----------------------------------------

TITLE: TypeScript Decorator Configuration
DESCRIPTION: TypeScript compiler configuration for enabling experimental decorators.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
  }
}

----------------------------------------

TITLE: Cleaned Up Lit Component with Date Converter (JavaScript)
DESCRIPTION: This snippet presents the final, cleaned-up version of the DateDisplay component in JavaScript. It shows the simplified property definition and rendering logic using the date converter.

LANGUAGE: javascript
CODE:
export class DateDisplay extends LitElement {
  static properties = {
    date: {converter: dateConverter},
  };

  constructor() {
    super();
    this.date = new Date();
  }

  render() {
    return html`
      <p>The given date is: ${this.date.toLocaleDateString()}</p>
    `;
  }
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Lit Templates
DESCRIPTION: This YAML front matter defines the navigation metadata for the Templates section in a Lit project using Eleventy. It sets the title, navigation key, and order for the section.

LANGUAGE: yaml
CODE:
---
title: Templates
eleventyNavigation:
  key: Templates
  order: 3
---

----------------------------------------

TITLE: Importing lit-html with HTML script module
DESCRIPTION: Example of importing lit-html in an HTML file using module script tag and direct path

LANGUAGE: html
CODE:
<script type="module">
  import {html, render} from './node_modules/lit-html/lit-html.js';
  ...
</script>

----------------------------------------

TITLE: Async Event Listener in firstUpdated
DESCRIPTION: Adding event listeners asynchronously after component rendering for performance optimization.

LANGUAGE: javascript
CODE:
async firstUpdated() {
  // Give the browser a chance to paint
  await new Promise((r) => setTimeout(r, 0));
  this.addEventListener('click', this._handleClick);
}

----------------------------------------

TITLE: Using Arrays in lit-html Templates
DESCRIPTION: Demonstrates how to use arrays and iterables in lit-html templates, including mapping over array items.

LANGUAGE: javascript
CODE:
const items = [1, 2, 3];
const list = () => html`items = ${items.map((i) => `item: ${i}`)}`;

----------------------------------------

TITLE: Bundling Lit Element Hydration Support
DESCRIPTION: Example of importing hydration support when using bundled code in production.

LANGUAGE: javascript
CODE:
// index.js
import '@lit-labs/ssr-client/lit-element-hydrate-support.js';
import './app-components.js';

----------------------------------------

TITLE: Incorrect Binding Positions in lit-html
DESCRIPTION: Demonstrates incorrect usage of expressions in tag or attribute name positions, which will result in errors.

LANGUAGE: html
CODE:
<!-- ERROR -->
<${tagName}></${tagName}>

<!-- ERROR -->
<div ${attrName}=true></div>

----------------------------------------

TITLE: Configuring Localization in Runtime Mode (JavaScript)
DESCRIPTION: Example of configuring Lit's runtime localization mode using the configureLocalization function and importing generated locale information.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
// Generated via output.localeCodesModule
import {sourceLocale, targetLocales} from './generated/locales.js';

export const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: (locale) => import(`/locales/${locale}.js`),
});

----------------------------------------

TITLE: Initializing Tooltip Visibility in Connected Callback
DESCRIPTION: Implements the connectedCallback lifecycle method to ensure tooltip is hidden when element is connected to DOM. Includes call to parent class implementation to maintain LitElement functionality.

LANGUAGE: typescript
CODE:
connectedCallback() {
  super.connectedCallback();
  this.hide();
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Lit Templates
DESCRIPTION: This YAML front matter defines the navigation metadata for the Templates section in a Lit project using Eleventy. It sets the title, navigation key, and order for the section.

LANGUAGE: yaml
CODE:
---
title: Templates
eleventyNavigation:
  key: Templates
  order: 3
---

----------------------------------------

TITLE: Creating a Lit Component in TypeScript
DESCRIPTION: Example of creating a basic Lit component using TypeScript. It demonstrates the use of decorators and the LitElement base class.

LANGUAGE: ts
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('my-element')
class MyElement extends LitElement {
  render() {
    return html`
      <div>Hello from MyElement!</div>
    `;
  }
}

----------------------------------------

TITLE: Using a Lit Component in JSX
DESCRIPTION: Example of how to use a Lit component in JSX. It demonstrates importing the component and using it within a React-like component.

LANGUAGE: tsx
CODE:
import './components/my-elements.js';

export const App = () => (
  <h1>My App</h1>
  <my-element></my-element>
)

----------------------------------------

TITLE: Custom Update Scheduling
DESCRIPTION: Example of customizing update scheduling using performUpdate

LANGUAGE: javascript
CODE:
async performUpdate() {
  await new Promise((resolve) => requestAnimationFrame(() => resolve()));
  super.performUpdate();
}

----------------------------------------

TITLE: Rollup Configuration for Localization - TypeScript
DESCRIPTION: Rollup configuration for generating locale-specific bundles using TypeScript transformers

LANGUAGE: typescript
CODE:
import typescript from '@rollup/plugin-typescript';
import {localeTransformers} from '@lit/localize-tools/lib/rollup.js';
import resolve from '@rollup/plugin-node-resolve';
import {terser} from 'rollup-plugin-terser';

const locales = localeTransformers();

export default locales.map(({locale, localeTransformer}) => ({
  input: `src/index.ts`,
  plugins: [
    typescript({
      transformers: {
        before: [localeTransformer],
      },
    }),
    resolve(),
    terser(),
  ],
  output: {
    file: `bundled/${locale}/index.js`,
    format: 'es',
  },
}));

----------------------------------------

TITLE: Setting Classes with classMap in lit-html
DESCRIPTION: Demonstrates using the classMap directive to dynamically set classes on an element based on an object's properties.

LANGUAGE: JavaScript
CODE:
import {html} from 'lit-html';
import {classMap} from 'lit-html/directives/class-map.js';

const itemTemplate = (item) => {
  const classes = {selected: item.selected};
  return html`<div class="menu-item ${classMap(classes)}">Classy text</div>`;
}

----------------------------------------

TITLE: Configuring Rollup for Lit Development Build
DESCRIPTION: This snippet shows how to configure Rollup with the @rollup/plugin-node-resolve plugin to use the development build of Lit packages.

LANGUAGE: javascript
CODE:
import { nodeResolve } from '@rollup/plugin-node-resolve';

export default {
  // ...
  plugins: [nodeResolve({
    exportConditions: ['development']
  })]
};

----------------------------------------

TITLE: Conditional Rendering with Ternary Operator in lit-html
DESCRIPTION: Demonstrates how to use ternary expressions for inline conditionals in lit-html templates.

LANGUAGE: javascript
CODE:
html`
  ${user.isloggedIn
      ? html`Welcome ${user.name}`
      : html`Please log in`
  }
`;

----------------------------------------

TITLE: Applying Transforms to Cloned SVG Elements in Lit
DESCRIPTION: Shows how to apply transformations to a cloned SVG element without affecting the original definition. This example rotates the text 180 degrees.

LANGUAGE: typescript
CODE:
const helloDefs = svg`
  <defs>
    <text id="chars">Hello defs!</text>
  </defs>
  <use
    href="#chars"
    transform="rotate(180, 0,0)">
  </use>
`;

----------------------------------------

TITLE: Applying Pattern Fill to Rectangle Elements
DESCRIPTION: Demonstrates how to apply the pattern as a fill to rectangle elements, including a background rectangle.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <svg height="100%" width="100%">
      ...
      <rect height="100%" width="100%" fill="#ffffff"></rect>
      <rect height="100%" width="100%" fill="url(#repeat-pattern)"></rect>
    </svg>
  `;
}

----------------------------------------

TITLE: Using classMap Directive
DESCRIPTION: Sets CSS classes on an element based on an object where keys are class names and values determine if the class is applied.

LANGUAGE: typescript
CODE:
import {classMap} from 'lit/directives/class-map.js';

@customElement('my-element')
class MyElement extends LitElement {
  @property({type: Boolean})
  enabled = false;

  render() {
    const classes = { enabled: this.enabled, hidden: false };
    return html`<div class=${classMap(classes)}>Classy text</div>`;
  }
}

----------------------------------------

TITLE: Installing Rollup Dependencies for Modern Build
DESCRIPTION: Bash command to install the required npm packages for building a modern-only Lit application with Rollup.

LANGUAGE: bash
CODE:
npm i --save-dev rollup \
  @web/rollup-plugin-html \
  @web/rollup-plugin-copy \
  @rollup/plugin-node-resolve \
  @rollup/plugin-terser \
  rollup-plugin-minify-html-literals \
  rollup-plugin-summary

----------------------------------------

TITLE: Custom Getter/Setter Localization Implementation
DESCRIPTION: Shows how to implement localization using TypeScript and JavaScript custom getters/setters for more natural property handling.

LANGUAGE: typescript
CODE:
private _label?: string;

@property()
get label() {
  return this._label ?? msg('Default label');
}

set label(label: string) {
  this._label = label;
}

render() {
  return html`<button>${this.label}</button>`;
}

LANGUAGE: javascript
CODE:
static properties = {
  label: {}
};

get label() {
  return this._label ?? msg('Default label');
}

set label(label) {
  this._label = label;
}

render() {
  return html`<button>${this.label}</button>`;
}

----------------------------------------

TITLE: Applying ShadyCSS Styles in Custom Element Lifecycle
DESCRIPTION: Demonstrates how to apply ShadyCSS styles within a custom element's connectedCallback for proper style application in polyfilled environments.

LANGUAGE: JavaScript
CODE:
connectedCallback() {
  super.connectedCallback();
  if (window.ShadyCSS !== undefined) {
      window.ShadyCSS.styleElement(this);
  }
}

----------------------------------------

TITLE: Configuring Rollup for Modern-Only Lit Build
DESCRIPTION: Rollup configuration file (rollup.config.js) for building a modern-only Lit application. It includes plugins for HTML processing, module resolution, minification, and asset copying.

LANGUAGE: javascript
CODE:
import html from '@web/rollup-plugin-html';
import {copy} from '@web/rollup-plugin-copy';
import resolve from '@rollup/plugin-node-resolve';
import {terser} from '@rollup/plugin-terser';
import minifyHTML from 'rollup-plugin-minify-html-literals';
import summary from 'rollup-plugin-summary';

export default {
  plugins: [
    html({
      input: 'index.html',
    }),
    resolve(),
    minifyHTML(),
    terser({
      ecma: 2020,
      module: true,
      warnings: true,
    }),
    summary(),
    copy({
      patterns: ['images/**/*'],
    }),
  ],
  output: {
    dir: 'build',
  },
  preserveEntrySignatures: 'strict',
};

----------------------------------------

TITLE: Rendering Lists with Looping Statements in lit-html
DESCRIPTION: Shows how to use traditional looping statements to create a list of templates for rendering in lit-html.

LANGUAGE: javascript
CODE:
const itemTemplates = [];
for (const i of items) {
  itemTemplates.push(html`<li>${i}</li>`);
}

html`
  <ul>
    ${itemTemplates}
  </ul>
`;

----------------------------------------

TITLE: Implementing Lit Component Render Method
DESCRIPTION: Demonstrates how to implement the render() method in a Lit component using the html tagged template literal to create templates without a build step.

LANGUAGE: typescript
CODE:
import { html, LitElement } from 'lit';
...

  render() {
    return html`<pre>A super expressive and efficient template!</pre>`
  }

----------------------------------------

TITLE: Implementing Pattern in SVG Render Method
DESCRIPTION: Shows how to include the pattern definition in the SVG's defs section within a Lit component's render method.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <svg height="100%" width="100%">
      <defs>
        ...
        ${createRepeatPattern()}
      </defs>
    </svg>
  `;
}

----------------------------------------

TITLE: Modern Directive Implementation
DESCRIPTION: Example of a directive implementation using the new class-based API in Lit 2.0.

LANGUAGE: javascript
CODE:
import {html} from 'lit';
import {directive, Directive, Part, PartInfo, PartType} from 'lit/directive.js';

export class RenderCounter extends Directive {
  value: number | undefined;
  constructor(partInfo: PartInfo) {
    super(partInfo);
    if (partInfo.type !== PartType.CHILD) {
      throw new Error('renderCounter only supports child expressions');
    }
  }
  update(part: Part, [initialValue]: DirectiveParameters<this>) {
    return this.render(initialValue);
  }
  render(initialValue: number) {
    if (this.value === undefined) {
      this.value = initialValue;
    } else {
      this.value++;
    }
    return html`<p>${this.value}</p>`;
  }
}
export const renderCounter = directive(RenderCounter);

----------------------------------------

TITLE: Streaming SSR Results with RenderResultReadable
DESCRIPTION: Example of using RenderResultReadable with Koa to stream SSR results as an HTTP response.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';
import {html} from 'lit';

app.use(async (ctx) => {
  const result = render(html`<my-element></my-element>`);
  ctx.type = 'text/html';
  ctx.body = new RenderResultReadable(result);
});

----------------------------------------

TITLE: Package.json Types Configuration
DESCRIPTION: Package.json configuration for including TypeScript declaration files.

LANGUAGE: json
CODE:
{
  ...
  "types": "my-element.d.ts"
}

----------------------------------------

TITLE: Breaking Down Complex Localized Templates
DESCRIPTION: Demonstrates how to break down complex templates into smaller, more manageable pieces for better translation

LANGUAGE: javascript
CODE:
render() {
  // Don't do this!
  return msg(html`
  <p>The red button makes the rocket go up.</p>
  <p>The green button makes the rocket do a flip.</p>
  `);
}

LANGUAGE: javascript
CODE:
render() {
  // Better! No markup needs to be processed by translators, and each sentence
  // can be translated independently.
  return html`
  <p>${msg('The red button makes the rocket go up.')}</p>
  <p>${msg('The green button makes the rocket do a flip.')}</p>
  `;
}

----------------------------------------

TITLE: Rendering SVG Content with unsafeSVG Directive in JavaScript
DESCRIPTION: Shows how to use the 'unsafeSVG' directive to render SVG content within lit-html templates, with a warning about security considerations.

LANGUAGE: javascript
CODE:
// shape is SVG partial text, with no <svg> element
const renderShape = (shape) => html`
  <svg  width="100" height="100" viewBox="0 0 100 100">
    ${unsafeSVG(shape)}
  </svg>
`;

----------------------------------------

TITLE: Running Rollup Build
DESCRIPTION: Command to execute the Rollup build process using the configuration file.

LANGUAGE: bash
CODE:
rollup -c

----------------------------------------

TITLE: Demonstrating JavaScript Template Literals in lit-html
DESCRIPTION: Shows how to use JavaScript template literals with embedded expressions, which are a key feature utilized by lit-html for creating dynamic templates.

LANGUAGE: javascript
CODE:
`My name is ${name}.`

----------------------------------------

TITLE: Updating queryAssignedNodes decorator usage
DESCRIPTION: Updates the usage of queryAssignedNodes decorator to use the new object-based syntax or queryAssignedElements for selectors.

LANGUAGE: typescript
CODE:
// Removed
@queryAssignedNodes('list', true, '.item')

// Updated
@queryAssignedElements({slot: 'list', flatten: true, selector: '.item'})

// Removed
@queryAssignedNodes('list', true)

// Updated
@queryAssignedNodes({slot: 'list', flatten: true})

----------------------------------------

TITLE: Rendering Created Tile in Lit Component
DESCRIPTION: Updates the Lit component's render method to include the created tile within the SVG element.

LANGUAGE: ts
CODE:
export class RepeatPattern extends LitElement {
  ...
  render() {
    return html`
      <svg height="100%" width="100%">
        ...
        ${createTile()}
      </svg>
    `;
  }
}

----------------------------------------

TITLE: Hydrating Standalone Lit Templates
DESCRIPTION: Demonstrates how to hydrate server-rendered Lit templates using the hydrate() method from @lit-labs/ssr-client before applying any render() updates.

LANGUAGE: javascript
CODE:
import {render} from 'lit';
import {hydrate} from '@lit-labs/ssr-client';
import {myTemplate} from './my-template.js';
// Initial hydration required before render:
// (must be same data used to render on the server)
const initialData = getInitialAppData();
hydrate(myTemplate(initialData), document.body);

// After hydration, render will efficiently update the server-rendered DOM:
const update = (data) => render(myTemplate(data), document.body);

----------------------------------------

TITLE: Implementing Localized LitElement in TypeScript
DESCRIPTION: This snippet demonstrates how to create a localized LitElement component using TypeScript, including the @localized decorator for automatic re-rendering when the locale changes.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import {msg, localized} from '@lit/localize';

@customElement('my-element');
@localized()
class MyElement extends LitElement {
  render() {
    // Whenever setLocale() is called, and templates for that locale have
    // finished loading, this render() function will be re-invoked.
    return msg(html`Hello <b>World!</b>`);
  }
}

----------------------------------------

TITLE: Type-Safe Localization API Re-exports
DESCRIPTION: Demonstrates how to safely re-export localization APIs with proper type annotations

LANGUAGE: typescript
CODE:
const myMsg = ... as typeof import('@lit/localize').msg;

LANGUAGE: javascript
CODE:
/** @type import('@lit/localize').msg */
const myMsg = ...;

----------------------------------------

TITLE: Handling User Input with State Management in JavaScript
DESCRIPTION: Shows a recommended approach for handling user input in lit-html, maintaining synchronization between the application state and the DOM.

LANGUAGE: javascript
CODE:
let text = '';
const onInput = (e) => {
  text = e.target.value;
  go();
};

const go = () => {
  render(html`<input .value=${text} @input=${onInput}>`, document.body);
}
go();

----------------------------------------

TITLE: Final HTML Template After lit-html Processing
DESCRIPTION: Shows the final state of the HTML template after lit-html has processed it and removed the placeholders. This is the actual template used for rendering.

LANGUAGE: html
CODE:
<h1></h1>

----------------------------------------

TITLE: Using simple-tooltip in TypeScript/JavaScript
DESCRIPTION: Example usage of the simple-tooltip element in a TypeScript or JavaScript file named my-content. This snippet demonstrates how to implement the tooltip in a project.

LANGUAGE: typescript
CODE:
my-content.<ts-js></ts-js>

----------------------------------------

TITLE: Creating SVG Tile with Clipped and Repeated Motifs
DESCRIPTION: Function to create an SVG tile using the defined motif and clip path, demonstrating how to use and transform multiple instances of the motif.

LANGUAGE: ts
CODE:
const createTile = () => svg`
  <g clip-path="url(#rect-clip)">
    <use transform="translate(0, 0)" href="#motif"></use>
    <use transform="translate(0, 100)" href="#motif"></use>
    <use transform="translate(100, -50)" href="#motif"></use>
    <use transform="translate(100, 50)" href="#motif"></use>
    <use transform="translate(100, 150)" href="#motif"></use>
  </g>
`;

----------------------------------------

TITLE: Configuring Rollup for Lit Localize Transform Mode
DESCRIPTION: This Rollup configuration demonstrates how to integrate Lit Localize transform mode with Rollup, generating separate bundles for each locale.

LANGUAGE: typescript
CODE:
import typescript from '@rollup/plugin-typescript';
import {localeTransformers} from '@lit/localize-tools/lib/rollup.js';
import resolve from '@rollup/plugin-node-resolve';
import {terser} from 'rollup-plugin-terser';

// Config is read from ./lit-localize.json by default.
// Pass a path to read config from another location.
const locales = localeTransformers();

export default locales.map(({locale, localeTransformer}) => ({
  input: `src/index.ts`,
  plugins: [
    typescript({
      transformers: {
        before: [localeTransformer],
      },
    }),
    resolve(),
    terser(),
  ],
  output: {
    file: `bundled/${locale}/index.js`,
    format: 'es',
  },
}));

----------------------------------------

TITLE: Async Observable Directive Implementation
DESCRIPTION: Example of an async directive that handles subscribing to and unsubscribing from an Observable, with proper lifecycle management.

LANGUAGE: typescript
CODE:
class ObserveDirective extends AsyncDirective {
  observable: Observable<unknown> | undefined;
  unsubscribe: (() => void) | undefined;
  render(observable: Observable<unknown>) {
    if (this.observable !== observable) {
      this.unsubscribe?.();
      this.observable = observable
      if (this.isConnected)  {
        this.subscribe(observable);
      }
    }
    return noChange;
  }
  subscribe(observable: Observable<unknown>) {
    this.unsubscribe = observable.subscribe((v: unknown) => {
      this.setValue(v);
    });
  }
  disconnected() {
    this.unsubscribe!();
  }
  reconnected() {
    this.subscribe(this.observable!);
  }
}

----------------------------------------

TITLE: Handling Localization Status Events in TypeScript
DESCRIPTION: This snippet demonstrates how to use the lit-localize-status event to handle localization status changes, including showing/hiding a progress indicator and re-rendering the application.

LANGUAGE: typescript
CODE:
// Show/hide a progress indicator whenever a new locale is loading,
// and re-render the application every time a new locale successfully loads.
window.addEventListener('lit-localize-status', (event) => {
  const spinner = document.querySelector('#spinner');

  if (event.detail.status === 'loading') {
    console.log(`Loading new locale: ${event.detail.loadingLocale}`);
    spinner.removeAttribute('hidden');
  } else if (event.detail.status === 'ready') {
    console.log(`Loaded new locale: ${event.detail.readyLocale}`);
    spinner.setAttribute('hidden', '');
    renderApplication();
  } else if (event.detail.status === 'error') {
    console.error(
      `Error loading locale ${event.detail.errorLocale}: ` +
        event.detail.errorMessage
    );
    spinner.setAttribute('hidden', '');
  }
});

----------------------------------------

TITLE: Using Standard Decorators with Lit 3.0 in TypeScript
DESCRIPTION: Demonstrates how to use the new standard decorator syntax with Lit 3.0, including the 'accessor' keyword for properties.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  @property()
  accessor myProperty = 'hello';
}

----------------------------------------

TITLE: Loading lit-html from CDN
DESCRIPTION: Example of importing lit-html directly from a CDN using ES modules

LANGUAGE: javascript
CODE:
import {html, render} from 'https://esm.run/lit-html@1';

----------------------------------------

TITLE: Configuring NPM Scripts for ESLint
DESCRIPTION: Example of how to add an NPM script to run ESLint on JavaScript and TypeScript files in a project.

LANGUAGE: json
CODE:
{
  "scripts": {
    "lint": "eslint \"**/*.{js,ts}\""
  }
}

----------------------------------------

TITLE: Configuring Web Test Runner for Legacy Browser Support
DESCRIPTION: JavaScript configuration for Web Test Runner to enable support for older browsers, including web components polyfills and Lit's polyfill-support module.

LANGUAGE: javascript
CODE:
import { legacyPlugin } from '@web/dev-server-legacy';

export default {
  /* ... */
  plugins: [
    // make sure this plugin is always last
    legacyPlugin({
      polyfills: {
        webcomponents: true,
        // Inject lit's polyfill-support module into test files, which is required
        // for interfacing with the webcomponents polyfills
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
  ],
};

----------------------------------------

TITLE: Updating HTML Template for Lazy Tooltip
DESCRIPTION: This snippet shows the updated HTML template in the MyContent component, removing the inline tooltip to prepare for lazy loading implementation.

LANGUAGE: html
CODE:
<p>
  <span id="greeting">Hello, ${this.name}! <span class="icon">info_outline</span></span>
</p>

----------------------------------------

TITLE: Creating SVG Motif Group in TypeScript and JavaScript
DESCRIPTION: Function to create an SVG group with an id of 'motif' and apply a translation transform.

LANGUAGE: ts
CODE:
const createMotif = (
  numPrints: number,
  offset: number = 0,
): SVGTemplateResult => {
  ...

  return svg`
    <g
      id="motif"
      transform="translate(50, 50)">
        ${prints}
    </g>
  `;
}

LANGUAGE: js
CODE:
const createMotif = (
  numPrints,
  offset = 0,
) => {
  ...

  return svg`
    <g
      id="motif"
      transform="translate(50, 50)">
        ${prints}
    </g>
  `;
}

----------------------------------------

TITLE: Class-based Directive Definition
DESCRIPTION: Example showing how to create and use a basic class-based directive that extends the Directive class.

LANGUAGE: javascript
CODE:
import {Directive, directive} from 'lit/directive.js';

// Define directive
class HelloDirective extends Directive {
  render() {
    return `Hello!`;
  }
}
// Create the directive function
const hello = directive(HelloDirective);

// Use directive
const template = html`<div>${hello()}</div>`;

----------------------------------------

TITLE: Configuring Rollup.js for Lit Template Compiler
DESCRIPTION: Shows how to set up Rollup.js configuration to use the new Lit template compiler for improved rendering performance.

LANGUAGE: javascript
CODE:
// File: rollup.config.js
import typescript from '@rollup/plugin-typescript';
import {compileLitTemplates} from '@lit-labs/compiler';

export default {
  // ...
  plugins: [
    typescript({
      transformers: {
        before: [compileLitTemplates()],
      },
    }),
    // other rollup plugins
  ],
};

----------------------------------------

TITLE: Duplicate Content Directive Implementation
DESCRIPTION: Creates a complex directive that duplicates content using nested NodeParts with state management.

LANGUAGE: javascript
CODE:
import {html, render, directive, NodePart, appendIntoPart} from 'lit-html';

const nestedPartMap = new WeakMap();

const createAndAppendPart = (containerPart) => {
  const newPart = new NodePart(containerPart.options);
  newPart.appendIntoPart(containerPart);

  return newPart;
}

const duplicate = directive((value) => {
  return (containerPart) => {
    if (!(containerPart instanceof NodePart)) {
      throw new Error('duplicate directive can only be used in content bindings');
    }

    let part1, part2;
    const nestedParts = nestedPartMap.get(containerPart);
    if (nestedParts === undefined) {
      part1 = createAndAppendPart(containerPart);
      part2 = createAndAppendPart(containerPart);
      nestedPartMap.set(containerPart, [part1, part2]);
    } else {
      [part1, part2] = nestedParts;
    }

    part1.setValue(value);
    part1.commit();
    part2.setValue(value);
    part2.commit();
  }
});

----------------------------------------

TITLE: Installing WebdriverIO
DESCRIPTION: Command to initialize WebdriverIO in a project using the configuration wizard

LANGUAGE: bash
CODE:
npm init wdio@latest ./

----------------------------------------

TITLE: Configuring Package.json for Lit Component Publishing
DESCRIPTION: Basic package.json configuration for publishing a Lit component showing required fields for module type and entry points.

LANGUAGE: json
CODE:
{
  "type": "module",
  "main": "my-element.js",
  "module": "my-element.js"
}

----------------------------------------

TITLE: Opening Lit Source Code for Editing
DESCRIPTION: Command to open the Lit source code directory for editing API documentation.

LANGUAGE: sh
CODE:
code packages/lit-dev-api/lit/

----------------------------------------

TITLE: Creating SVG Clip Path in TypeScript
DESCRIPTION: Defines a clip path in the shape of a rectangle with an id of 'rect-clip'.

LANGUAGE: ts
CODE:
const helloClipPath = svg`
  <clipPath id="rect-clip">
    <rect width="200" height="200"></rect>
  </clipPath>
`;

----------------------------------------

TITLE: Max Value Directive Implementation
DESCRIPTION: Example of a directive that tracks and returns the maximum value seen across renders.

LANGUAGE: typescript
CODE:
class MaxDirective extends Directive {
  maxValue = Number.MIN_VALUE;
  // Define a render method, which may accept arguments:
  render(value: number, minValue = Number.MIN_VALUE) {
    this.maxValue = Math.max(value, this.maxValue, minValue);
    return this.maxValue;
  }
}
const max = directive(MaxDirective);

// Call the directive with `value` and `minValue` arguments defined for `render()`:
const template = html`<div>${max(someNumber, 0)}</div>`;

----------------------------------------

TITLE: Defining Lit Component with TypeScript Decorator
DESCRIPTION: Shows how to define a Lit component using the @customElement decorator to register the custom element with the browser.

LANGUAGE: typescript
CODE:
@customElement('simple-greeting')
export class SimpleGreeting extends LitElement { /* ... */ }

----------------------------------------

TITLE: Implementing a Shared Counter Component with Signals in Lit
DESCRIPTION: This example demonstrates how to create a shared counter using @lit-labs/signals. It uses the SignalWatcher mixin to enable signal-based reactivity in a Lit component, allowing multiple instances to share and react to changes in a single count signal.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement} from 'lit/decorators.js';
import {SignalWatcher, signal} from '@lit-labs/signals';

// This is a standard TC39 signal that uses the signals polyfill.
// The signal is shared across all component instances.
const count = signal(0);

@customElement('shared-counter')
export class SharedCounterComponent extends SignalWatcher(LitElement) {
  render() {
    // Just by using the signal in your template, your component will update
    // when the signal changes.
    return html`
      <p>The count is ${count.get()}</p>
      <button @click=${this.increment}>Increment</button>
    `;
  }

  increment() {
    count.set(count.get() + 1);
  }
}

----------------------------------------

TITLE: Generating Localized Files in Lit Localize Transform Mode
DESCRIPTION: This snippet demonstrates how Lit Localize transform mode generates localized versions of a source file for different locales, replacing msg calls with static localized strings.

LANGUAGE: javascript
CODE:
// src/launch-button.js
import {msg} from '@lit/localize';

render() {
  return html`<button>${msg('Launch rocket')}</button>`
}

LANGUAGE: javascript
CODE:
// locales/en/launch-button.js
render() {
  return html`<button>Launch rocket</button>`
}

// locales/es-419/launch-button.js
render() {
  return html`<button>Lanza cohete</button>`
}

----------------------------------------

TITLE: Creating Simple Hello Directive
DESCRIPTION: Shows how to create a basic directive that sets a static value using the directive function.

LANGUAGE: javascript
CODE:
const helloDirective = directive(() => (part) => { part.setValue('Hello')});

const helloTemplate = html`<div>${helloDirective()}</div>`

----------------------------------------

TITLE: Basic Rendering with lit-html
DESCRIPTION: Example of creating and rendering a simple lit-html template to the DOM

LANGUAGE: js
CODE:
import {html, render} from 'lit-html';

const name = 'world';
const sayHi = html`<h1>Hello ${name}</h1>`;
render(sayHi, document.body);

----------------------------------------

TITLE: Installing Lit via npm
DESCRIPTION: Command to install the Lit package using npm. This is the first step in adding Lit to an existing project.

LANGUAGE: sh
CODE:
npm i lit

----------------------------------------

TITLE: Generating Localized Files in Lit Localize Transform Mode
DESCRIPTION: This snippet demonstrates how Lit Localize transform mode generates localized versions of a source file for different locales, replacing msg calls with static localized strings.

LANGUAGE: javascript
CODE:
// src/launch-button.js
import {msg} from '@lit/localize';

render() {
  return html`<button>${msg('Launch rocket')}</button>`
}

LANGUAGE: javascript
CODE:
// locales/en/launch-button.js
render() {
  return html`<button>Launch rocket</button>`
}

// locales/es-419/launch-button.js
render() {
  return html`<button>Lanza cohete</button>`
}

----------------------------------------

TITLE: Rendering SVG Pattern with Lit Component
DESCRIPTION: Implements the render function for the RepeatPattern Lit component, combining the createElement and createMotif functions to generate the final SVG pattern.

LANGUAGE: typescript
CODE:
@customElement('repeat-pattern')
export class RepeatPattern extends LitElement {
  ...

  render() {
    return html`
      <svg height="100%" width="100%">
        <defs>
          ${createElement(this.chars)}
        </defs>
        ${createMotif(
            this.numPrints,
            this.rotationOffset,
          )}
      </svg>
    `;
  }
}

LANGUAGE: javascript
CODE:
export class RepeatPattern extends LitElement {
  ...

  render() {
    return html`
      <svg height="100%" width="100%">
        <defs>
          ${createElement(this.chars)}
        </defs>
        ${createMotif(
          this.numPrints,
          this.rotationOffset,
        )}
      </svg>
    `;
  }
}

----------------------------------------

TITLE: Type-Safe NodePart Directive
DESCRIPTION: Shows how to create a directive that only works with NodePart bindings.

LANGUAGE: javascript
CODE:
const myListDirective = directive((items) => (part) => {
  if (!(part instanceof NodePart)) {
    throw new Error('myListDirective can only be used in content bindings');
  }
  // Carry on ...
  ...

----------------------------------------

TITLE: Using choose() Directive for Switch-like Behavior
DESCRIPTION: Demonstrates the choose() directive for implementing switch-like conditional rendering in Lit templates.

LANGUAGE: typescript
CODE:
render() {
  return html`
    ${choose(this.section, [
      ['home', () => html`<h1>Home</h1>`],
      ['about', () => html`<h1>About</h1>`]
    ],
    () => html`<h1>Error</h1>`)}
  `;
}

----------------------------------------

TITLE: HTML Generated by lit-html During Template Creation
DESCRIPTION: Illustrates the intermediate HTML generated by lit-html when processing a template, showing how placeholders are initially inserted.

LANGUAGE: html
CODE:
<h1>{% raw %}{{}}{% endraw %}</h1>

----------------------------------------

TITLE: Defining a LitElement-based Web Component in TypeScript
DESCRIPTION: This snippet shows how to define a LitElement-based web component using TypeScript. It demonstrates importing LitElement, using the @customElement decorator, and extending the LitElement class.

LANGUAGE: typescript
CODE:
import {LitElement, html, css} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('rating-element')
export class RatingElement extends LitElement {
  // remove connectedCallback()
  // remove customElements.define at the end of the file
  // comment out the observedAttributes method. this will break
  // functionality for now, but it'll be addressed in the next step
  ...

----------------------------------------

TITLE: Modern Browser Rollup Configuration
DESCRIPTION: Rollup configuration for modern browsers supporting ES modules. Includes plugins for node resolution, minification, and static asset copying.

LANGUAGE: javascript
CODE:
import resolve from '@rollup/plugin-node-resolve';
import { terser } from 'rollup-plugin-terser';
import minifyHTML from 'rollup-plugin-minify-html-literals';
import copy from 'rollup-plugin-copy';

const copyConfig = {
  targets: [
    { src: 'node_modules/@webcomponents', dest: 'build-modern/node_modules' },
    { src: 'images', dest: 'build-modern' },
    { src: 'data', dest: 'build-modern' },
    { src: 'index.html', dest: 'build-modern' },
  ],
};

const config = {
  input: 'src/components/shop-app.js',
  output: {
    dir: 'build-modern/src/components',
    format: 'es',
  },
  plugins: [
    minifyHTML(),
    copy(copyConfig),
    resolve(),
  ],
  preserveEntrySignatures: false,
};

if (process.env.NODE_ENV !== 'development') {
  config.plugins.push(terser());
}

export default config;

----------------------------------------

TITLE: Configuring Web Dev Server for Legacy Browser Support
DESCRIPTION: This snippet demonstrates how to configure Web Dev Server to support legacy browsers, including polyfills for web components and Lit.

LANGUAGE: javascript
CODE:
import { legacyPlugin } from '@web/dev-server-legacy';

export default {
  // ...
  plugins: [
    // Make sure this plugin is always last
    legacyPlugin({
      polyfills: {
        webcomponents: true,
        // Inject lit's polyfill-support module into test files, which is required
        // for interfacing with the webcomponents polyfills
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
  ],
};

----------------------------------------

TITLE: Creating SVG Text Element with ID in Lit
DESCRIPTION: Defines a function to create an SVG text element with specific attributes and an id for later reference.

LANGUAGE: typescript
CODE:
const createElement = (
  chars: string,
): SVGTemplateResult => svg`
  <text
    id="chars"
    dominant-basline="hanging"
    font-family="monospace"
    font-size="24px">
    ${chars}
  </text>`;

LANGUAGE: javascript
CODE:
const createElement = (chars) => svg`
  <text
    id="chars"
    dominant-basline="hanging"
    font-family="monospace"
    font-size="24px">
    ${chars}
  </text>`;

----------------------------------------

TITLE: Configuring package.json for npm Publication
DESCRIPTION: Demonstrates the required fields in package.json for publishing a LitElement component to npm. It specifies both 'main' and 'module' fields pointing to the component's JavaScript file.

LANGUAGE: json
CODE:
{
  "main": "my-element.js",
  "module": "my-element.js"
}

----------------------------------------

TITLE: Initializing a new npm project
DESCRIPTION: Command to set up a new npm project in the current directory.

LANGUAGE: bash
CODE:
npm init

----------------------------------------

TITLE: Using the <word-viewer> Custom Element in HTML
DESCRIPTION: Demonstrates how to use the <word-viewer> custom element in HTML markup. The element takes a 'words' attribute with a period-separated list of words to display.

LANGUAGE: html
CODE:
<word-viewer words="Hello.World"></word-viewer>

----------------------------------------

TITLE: Defining LitElement Properties in TypeScript
DESCRIPTION: Example of defining reactive properties in a LitElement component using TypeScript decorators.

LANGUAGE: typescript
CODE:
export class MyElement extends LitElement {
  ...
  @property({type: String})
  name = 'World';
  ...
}

----------------------------------------

TITLE: Adding Lit Event Listeners in HTML Template
DESCRIPTION: This snippet shows how to add Lit event listeners to buttons in the HTML template. It uses the @click syntax to bind click events to update the 'vote' property.

LANGUAGE: html
CODE:
<button
    class="thumb_down"
    @click=${() => {this.vote = 'down'}}>
...
<button
    class="thumb_up"
    @click=${() => {this.vote = 'up'}}>

----------------------------------------

TITLE: Installing lit-html from npm
DESCRIPTION: Command to install lit-html as a dependency in an npm project.

LANGUAGE: bash
CODE:
npm i lit-html

----------------------------------------

TITLE: Displaying DOM Emulation Implementation Status in Markdown
DESCRIPTION: A markdown table showing the implementation status of various DOM properties and methods in Lit's SSR DOM emulation. It includes details for Element, HTMLElement, CustomElementRegistry, and customElements.

LANGUAGE: markdown
CODE:
| Property | Notes |
|-|-|
| `Element` | ⚠️ Partial <table><tbody><tr><td>`attributes`</td><td>✅</td><tr><td>`shadowRoot`</td><td>⚠️ Returns `{host: this}` if `attachShadow()` was called with `{mode: 'open'}`</td><tr><td>`setAttribute()`</td><td>✅</td><tr><td>`removeAttribute()`</td><td>✅</td><tr><td>`hasAttribute()`</td><td>✅</td><tr><td>`attachShadow()`</td><td>⚠️ Returns `{host: this}`</td><tr><td>`getAttribute()`</td><td>✅</td></tr></tbody></table> |
| `HTMLElement` | ⚠️ Empty class |
| `CustomElementRegistry` | <table><tbody><tr><td>`define()`</td><td>✅</td></tr><tr><td>`get()`</td><td>✅</td></tr></tbody></table> |
| `customElements` | Instance of `CustomElementRegistry` |

----------------------------------------

TITLE: Grouping and Transforming SVG Elements with <g> in Lit
DESCRIPTION: Demonstrates using the <g> element to apply transformations to multiple child elements. This example translates the group and rotates the text.

LANGUAGE: typescript
CODE:
const helloGroups = svg`
  <defs>
    <text id="chars">Hello defs!</text>
  </defs>
  <g transform="translate(50, 50)">
    <use
      href="#chars"
      transform="rotate(${currRotation}, 0,0)">
    </use>
  </g>
`;

----------------------------------------

TITLE: Rendering Styles in Shadow DOM with lit-html
DESCRIPTION: Demonstrates how to include a style sheet within a shadow root when using lit-html for rendering.

LANGUAGE: JavaScript
CODE:
html`
  <style>
    :host { ... }
    .test { ... }
  </style>
  <div class="test">...</div>
`;

----------------------------------------

TITLE: TypeScript Custom Element Type Definition
DESCRIPTION: Shows how to properly type custom elements in TypeScript by extending the HTMLElementTagNameMap interface, enabling proper type inference for document.createElement().

LANGUAGE: typescript
CODE:
declare global {
  interface HTMLElementTagNameMap {
    "word-viewer": WordViewer;
  }
}

----------------------------------------

TITLE: Running LitElement Dev Server
DESCRIPTION: Command to start the development server for a LitElement project.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Implementing Button Functionality in RatingElement Web Component
DESCRIPTION: This code snippet demonstrates how to add click event listeners to buttons in a custom RatingElement web component. It includes methods for binding event listeners, handling clicks, and cleaning up listeners when the element is disconnected.

LANGUAGE: typescript
CODE:
export class RatingElement extends HTMLElement {
  ...
  private _boundOnUpClick = this._onUpClick.bind(this);
  private _boundOnDownClick = this._onDownClick.bind(this);

  connectedCallback() {
    ...

    this.shadowRoot!
      .querySelector('.thumb_up')!
      .addEventListener('click', this._boundOnUpClick);
    this.shadowRoot!
      .querySelector('.thumb_down')!
      .addEventListener('click', this._boundOnDownClick);
  }

  disconnectedCallback() {
    this.shadowRoot!
      .querySelector('.thumb_up')!
      .removeEventListener('click', this._boundOnUpClick);
    this.shadowRoot!
      .querySelector('.thumb_down')!
      .removeEventListener('click', this._boundOnDownClick);
  }

  ...

  _onUpClick() {
    this.vote = 'up';
  }

  _onDownClick() {
    this.vote = 'down';
  }
}

LANGUAGE: javascript
CODE:
export class RatingElement extends HTMLElement {
  ...
  _boundOnUpClick = this._onUpClick.bind(this);
  _boundOnDownClick = this._onDownClick.bind(this);

  connectedCallback() {
    ...

    this.shadowRoot
      .querySelector('.thumb_up')
      .addEventListener('click', this._boundOnUpClick);
    this.shadowRoot
      .querySelector('.thumb_down')
      .addEventListener('click', this._boundOnDownClick);
  }

  disconnectedCallback() {
    this.shadowRoot
      .querySelector('.thumb_up')
      .removeEventListener('click', this._boundOnUpClick);
    this.shadowRoot
      .querySelector('.thumb_down')
      .removeEventListener('click', this._boundOnDownClick);
  }

  ...

  _onUpClick() {
    this.vote = 'up';
  }

  _onDownClick() {
    this.vote = 'down';
  }
}

----------------------------------------

TITLE: Importing map() Directive in Lit (JavaScript)
DESCRIPTION: This snippet demonstrates how to import the map() directive from Lit in a JavaScript file. The map() directive is used to transform items in an iterable for rendering in templates.

LANGUAGE: javascript
CODE:
import {map} from 'lit/directives/map.js';

----------------------------------------

TITLE: Installing Rollup Dependencies for Modern+Legacy Build
DESCRIPTION: Bash command to install the required npm packages for building a hybrid modern and legacy Lit application with Rollup.

LANGUAGE: bash
CODE:
npm i --save-dev rollup \
  @web/rollup-plugin-html \
  @web/rollup-plugin-polyfills-loader \
  @web/rollup-plugin-copy \
  @rollup/plugin-node-resolve \
  @rollup/plugin-babel \
  @rollup/plugin-terser \
  rollup-plugin-minify-html-literals \
  rollup-plugin-summary

----------------------------------------

TITLE: Implementing SVG Rendering in Lit Component
DESCRIPTION: Demonstrates how to create a Lit component that renders an SVG element with configurable text using the createElement function.

LANGUAGE: typescript
CODE:
@customElement('repeat-pattern')
export class RepeatPattern extends LitElement {        
  render() {
    return html`
      <svg height="100%" width="100%">
        ${createElement("lit")}
      </svg>
    `;
  }
}

LANGUAGE: javascript
CODE:
import { LitElement } from "lit";

export class RepeatPattern extends LitElement {
  render() {
    return html`
      <svg height="100%" width="100%">
        ${createElement("lit")}
      </svg>
    `;
  }
}
customElements.define('repeat-pattern', RepeatPattern);

----------------------------------------

TITLE: Using DOM Nodes in lit-html Templates
DESCRIPTION: Shows how to pass a DOM Node to a text position expression in a lit-html template.

LANGUAGE: javascript
CODE:
const div = document.createElement('div');
const page = html`
  ${div}
  <p>This is some text</p>
`;

----------------------------------------

TITLE: Event Listener Object in lit-html
DESCRIPTION: Shows how to use an object with a handleEvent method as an event listener, including event listener options.

LANGUAGE: javascript
CODE:
const listener = {
  handleEvent(e) {
    console.log('clicked');
  },
  capture: true,
};

html`<button @click=${listener}>Click Me</button>`

----------------------------------------

TITLE: Using map() Directive in Lit Component Render Method (JavaScript)
DESCRIPTION: This code snippet demonstrates how to use the map() directive in a Lit component's render method to transform items from the 'items' property into list items. It shows rendering each item as an <li> element within a <ul> tag.

LANGUAGE: javascript
CODE:
  render() {
    return html`
      ⋮
      <ul>
        ${map(this.items, (item) => html`<li>${item}</li>`)}
      </ul>
    `;
  }

----------------------------------------

TITLE: Installing Dependencies for LitElement Project
DESCRIPTION: Command to install project dependencies after downloading the starter project.

LANGUAGE: bash
CODE:
cd <project folder>
npm i

----------------------------------------

TITLE: Defining Custom Element Class in TypeScript/JavaScript
DESCRIPTION: Creates a basic custom element by extending HTMLElement class and registering it using customElements.define(). The element name must contain a hyphen to distinguish it from native elements.

LANGUAGE: typescript
CODE:
class RatingElement extends HTMLElement {}

customElements.define('rating-element', RatingElement);

LANGUAGE: javascript
CODE:
class RatingElement extends HTMLElement {}

customElements.define('rating-element', RatingElement);

----------------------------------------

TITLE: Using Property Expression in Lit Template
DESCRIPTION: Demonstrates how to use a reactive property in a Lit template using JavaScript expression syntax. The expression renders the value of the message property.

LANGUAGE: javascript
CODE:
${this.message}

----------------------------------------

TITLE: Styling the 'backwards' Class in Lit (TypeScript/JavaScript)
DESCRIPTION: This snippet defines the CSS styles for the 'backwards' class, which is applied when the play direction is reversed. It sets the text color to white and the background color to violet.

LANGUAGE: css
CODE:
static styles = css`
  ...
  .backwards {
    color: white;
    background-color: violet;
  }
`;

----------------------------------------

TITLE: Updating SSR hydration imports
DESCRIPTION: Updates the import statements for server-side rendering hydration support to use the new @lit-labs/ssr-client package.

LANGUAGE: typescript
CODE:
// Removed
import 'lit/experimental-hydrate-support.js';
import {hydrate} from 'lit/experimental-hydrate.js';

// Updated
import '@lit-labs/ssr-client/lit-element-hydrate-support.js';
import {hydrate} from '@lit-labs/ssr-client';

----------------------------------------

TITLE: Using templateContent Directive with HTML Templates in JavaScript
DESCRIPTION: Demonstrates how to use the 'templateContent' directive to incorporate HTML template content into lit-html templates.

LANGUAGE: html
CODE:
<template id="example">
  <p>HTML Template</p>
</template>

LANGUAGE: javascript
CODE:
const template = document.querySelector('#example');
html`
  <h1>Example</h1>
  ${templateContent(template)}
`;

----------------------------------------

TITLE: Rendering Conditional List Items in Lit Component Template
DESCRIPTION: This snippet shows how to include the conditionally populated list items array in the component's template. The listItems array is inserted into an unordered list element.

LANGUAGE: typescript
CODE:
// my-element.ts
  render() {
    ⋮
    return html`
      ⋮
      <ul>
        ${listItems}
      </ul>
    `;
  }

LANGUAGE: javascript
CODE:
// my-element.js
  render() {
    ⋮
    return html`
      ⋮
      <ul>
        ${listItems}
      </ul>
    `;
  }

----------------------------------------

TITLE: Calculating Carousel Element Positions in Lit Component
DESCRIPTION: This code calculates the positions for carousel elements based on selection changes. It determines if movement should occur, calculates the direction and distance of movement, and sets positioning values for the current, selected, and previous items.

LANGUAGE: typescript
CODE:
render() {
  const p = this.selectedInternal;
  const s = (this.selectedInternal =
    this.hasValidSelected() ? this.selected : this.selectedInternal);
  const shouldMove = this.hasUpdated && s !== p;
  const atStart = p === 0;
  const toStart = s === 0;
  const atEnd = p === this.maxSelected;
  const toEnd = s === this.maxSelected;
  const shouldAdvance = shouldMove &&
    (atEnd ? toStart : atStart ? !toEnd : s > p);
  const delta = (shouldMove ? Number(shouldAdvance) || -1 : 0) * 100;
  this.left -= delta;
  const animateLeft = `${this.left}%`;
  const selectedLeft = `${-this.left}%`;
  const previousLeft = `${-this.left - delta}%`;

----------------------------------------

TITLE: Applying Dynamic Classes with classMap in Lit (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the classMap directive in Lit to dynamically apply a 'backwards' class to a <pre> element based on the play direction. It uses TypeScript syntax.

LANGUAGE: typescript
CODE:
render() {
  ...
  return html`<pre
    class="${classMap({ backwards: this.playDirection === -1 })}"
    ...
  >${word}</pre>`;
}

----------------------------------------

TITLE: Integrating SVG Template into HTML Template in Lit
DESCRIPTION: Shows how to properly embed an SVG template within an HTML template using Lit's html and svg template literals.

LANGUAGE: typescript
CODE:
const helloHTML = html`
  <svg>
    ${svg`<text>Hello, SVG!</text>`}
  </svg>
`;

----------------------------------------

TITLE: Render Options Example with Container
DESCRIPTION: Shows how to use render options to control where content is inserted in the container

LANGUAGE: html
CODE:
<div id="container">
  <header>My Site</header>
  <footer>Copyright 2021</footer>
</div>

LANGUAGE: ts
CODE:
const template = () => html`...`;
const container = document.getElementById('container');
const renderBefore = container.querySelector('footer');
render(template(), container, {renderBefore});

----------------------------------------

TITLE: Updating ReactiveElement import
DESCRIPTION: Replaces the deprecated UpdatingElement alias with ReactiveElement in import statements.

LANGUAGE: typescript
CODE:
// Removed
import {UpdatingElement} from 'lit';

// Updated
import {ReactiveElement} from 'lit';

----------------------------------------

TITLE: Node-style Module Import for lit-html
DESCRIPTION: Shows how to import lit-html using Node-style module specifiers. This format is preferred by developers but requires transformation for browser use.

LANGUAGE: javascript
CODE:
import {html, render} from 'lit-html';

----------------------------------------

TITLE: Configuring ES Dev Server in package.json
DESCRIPTION: Example of adding an ES dev server command to package.json for a LitElement project.

LANGUAGE: json
CODE:
{
  "scripts": {
    "serve": "es-dev-server --app-index index.html --node-resolve --watch --open"
  }
}

----------------------------------------

TITLE: Importing Lit Range and Map Directives
DESCRIPTION: Imports the range and map directives from the Lit library, which are used to generate iterables and transform them into templates.

LANGUAGE: typescript
CODE:
import {range} from 'lit/directives/range.js';
import {map} from 'lit/directives/map.js';

LANGUAGE: javascript
CODE:
import {range} from 'lit/directives/range.js';
import {map} from 'lit/directives/map.js';

----------------------------------------

TITLE: Implementing Target Property for Tooltip in TypeScript
DESCRIPTION: Defines a target property with a getter and setter to manage the element being hinted by the tooltip. The setter handles adding and removing event listeners for showing and hiding the tooltip.

LANGUAGE: typescript
CODE:
_target: Element|null = null;

get target() {
  return this._target;
}

set target(target: Element|null) {
  // Remove events from existing target
  if (this.target) {
    enterEvents.forEach(name =>
      this.target!.removeEventListener(name, this.show));
    leaveEvents.forEach(name =>
      this.target!.removeEventListener(name, this.hide));
  }
  // Add events to new target
  if (target) {
    enterEvents.forEach(name =>
      target!.addEventListener(name, this.show));
    leaveEvents.forEach(name =>
      target!.addEventListener(name, this.hide));
  }
  this._target = target;
}

----------------------------------------

TITLE: Applying Dynamic Classes with classMap in Lit (JavaScript)
DESCRIPTION: This snippet shows how to use the classMap directive in Lit to dynamically apply a 'backwards' class to a <pre> element based on the play direction. It includes the import statement for classMap and uses JavaScript syntax.

LANGUAGE: javascript
CODE:
import {classMap} from 'lit/directives/class-map.js';
...

render() {
  ...
  return html`<pre
    class="${classMap({ backwards: this.playDirection === -1 })}"
    ...
  >${word}</pre>`;
}

----------------------------------------

TITLE: Applying CSS Classes to SVG Elements in Lit
DESCRIPTION: This example shows how to apply CSS classes to SVG elements using Lit's html template literal tag.

LANGUAGE: typescript
CODE:
const helloCssClasses = html`
  <rect class="background"></rect>
`;

----------------------------------------

TITLE: Configuring ES Dev Server in package.json
DESCRIPTION: JSON snippet for adding an ES Dev Server start script to package.json.

LANGUAGE: json
CODE:
"scripts": {
  "start": "es-dev-server --app-index index.html --node-resolve --watch --open"
}

----------------------------------------

TITLE: HTML Markup Usage Examples in Localization
DESCRIPTION: Demonstrates good and bad practices for handling HTML markup in localized content, showing how to minimize markup in translations.

LANGUAGE: javascript
CODE:
render() {
  // Don't do this! There's no reason to include the <button> tag in this
  // localized template.
  return msg(html`<button>Launch rocket</button>`);
}

LANGUAGE: javascript
CODE:
render() {
  // Much better! Now the phrase "Launch rocket" can be translated more easily
  // in isolation.
  return html`<button>${msg('Launch rocket')}</button>`;
}

----------------------------------------

TITLE: Implementing LitElement Render Method
DESCRIPTION: Example of a LitElement render method defining a template with data bindings and event handling.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement {
  ...
  render() {
    return html`
      <h1>Hello, ${this.name}!</h1>
      <button @click=${this._onClick}>
        Click Count: ${this.count}
      </button>
      <slot></slot>
    `;
  }
}

----------------------------------------

TITLE: Using Custom Element in HTML
DESCRIPTION: Demonstrates how to use the custom element in an HTML document by placing the element tag in the document body.

LANGUAGE: html
CODE:
<body>
 <rating-element></rating-element>
</body>

----------------------------------------

TITLE: Setting Up CSS Custom Properties for Theming
DESCRIPTION: This CSS snippet shows how to define CSS Custom Properties in the root element to theme the SVG components.

LANGUAGE: css
CODE:
:root {
  --background-color: #000000;
  --font-color: #ffffff;
  --font-size: 26px;
  --stroke-width: 1.2px;
  --stroke-color: #eeeeee;

  font-family: 'Open Sans', sans-serif;
  font-size: 1.5em;
}

----------------------------------------

TITLE: Adding Play Direction State in Lit Component
DESCRIPTION: This snippet shows how to add a new internal state property 'playDirection' to represent the current animation direction in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
@state() private playDirection: -1 | 1 = 1;

LANGUAGE: javascript
CODE:
static properties = {
  playDirection: {state: true},
  ...
};

constructor() {
  ...
  this.playDirection = 1;
}

----------------------------------------

TITLE: Implementing connectedCallback for Rating Element in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to implement the connectedCallback method for a rating element web component. It clones the template content and initializes the shadow DOM.

LANGUAGE: typescript
CODE:
connectedCallback() {
  const shadowRoot = this.attachShadow({mode: 'open'});
  const templateContent = document.querySelector<HTMLTemplateElement>('#rating-element-template')!.content;
  const clonedContent = templateContent.cloneNode(true);
  shadowRoot.appendChild(clonedContent);

  this.shadowRoot!.querySelector<HTMLElement>('.rating')!.innerText = `${this.rating}`;
}

----------------------------------------

TITLE: Babel Configuration for Lit Components
DESCRIPTION: Babel configuration file setup for compiling Lit components with class properties and decorators support.

LANGUAGE: js
CODE:
const assumptions = {
  "setPublicClassFields": true
};

const plugins = [
  ['@babel/plugin-proposal-decorators', { decoratorsBeforeExport: true } ],
  ["@babel/plugin-proposal-class-properties"],

];

module.exports = { assumptions, plugins };

----------------------------------------

TITLE: Proper Render-time Localization in Lit
DESCRIPTION: Demonstrates the correct way to implement localization that updates when locale changes by moving the msg call into the render method.

LANGUAGE: javascript
CODE:
render() {
  return html`<button>${this.label ?? msg('Default label')}</button>`;
}

----------------------------------------

TITLE: Using Preact Signals with Lit Components
DESCRIPTION: Illustrates how to use the new Preact Signals integration with Lit components using the SignalWatcher mixin.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit';
import {SignalWatcher, signal} from '@lit-labs/preact-signals';

const count = signal(0);

@customElement('signal-example')
export class SignalExample extends SignalWatcher(LitElement) {

  render() {
    return html`
      <p>The count is ${count.value}</p>
      <button @click=${this._onClick}>Increment<button></button></button>
    `;
  }

  private _onClick() {
    // A change to the signal value causes the element to re-render!
    count.value = count.value + 1;
  }
}

----------------------------------------

TITLE: Using map() Directive for Iteration
DESCRIPTION: Shows how to use the new map() directive for iterating over arrays and iterators in Lit templates.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <ul>
      ${map(this.items, (i) => html`<li>${i}</li>`)}
    </ul>
  `;
}

----------------------------------------

TITLE: Implementing Tooltip Positioning with Floating UI
DESCRIPTION: Shows the implementation of a show() method that positions a tooltip using Floating UI. The method uses fixed positioning strategy with offset, shift, and autoPlacement middleware to handle positioning calculations.

LANGUAGE: typescript
CODE:
show = () => {
  this.style.cssText = '';
  // Robust positioning
  computePosition(this.target, this, {
    strategy: 'fixed',
    middleware: [
      offset(this.offset),
      shift(),
      autoPlacement({allowedPlacements: ['top', 'bottom']})
    ],
  }).then(({x, y}: {x: number, y: number}) => {
    this.style.left = `${x}px`;
    this.style.top = `${y}px`;
  });
};

LANGUAGE: javascript
CODE:
show = () => {
  this.style.cssText = '';
  // Robust positioning
  computePosition(this.target, this, {
    strategy: 'fixed',
    middleware: [
      offset(this.offset),
      shift(),
      autoPlacement({allowedPlacements: ['top', 'bottom']}),
    ],
  }).then(({x, y}) => {
    this.style.left = `${x}px`;
    this.style.top = `${y}px`;
  });
};

----------------------------------------

TITLE: Applying CSS to SVG Elements in Lit
DESCRIPTION: This snippet demonstrates how to create a CSS template to style SVG elements using the css tag function from Lit.

LANGUAGE: typescript
CODE:
const helloSvgCss = css`
  .background {
    fill: #000000;
  }
`;

----------------------------------------

TITLE: Defining Scoped Styles for Lit Component in JavaScript
DESCRIPTION: This snippet demonstrates how to define scoped styles for a Lit component using the static styles class field in JavaScript. It shows styling for the host element and a pre element within the component.

LANGUAGE: javascript
CODE:
// word-viewer.js

  static styles = css`
    :host {
      background-color: white;
      color: violet;
      cursor: pointer;
      display: block;
    }
    pre {
      padding: 0.2em;
    }
  `;

----------------------------------------

TITLE: Implementing connectedCallback for Rating Element in JavaScript
DESCRIPTION: This JavaScript snippet shows how to implement the connectedCallback method for a rating element web component. It clones the template content and initializes the shadow DOM.

LANGUAGE: javascript
CODE:
connectedCallback() {
  const shadowRoot = this.attachShadow({mode: 'open'});
  const templateContent = document.querySelector('#rating-element-template').content;
  const clonedContent = templateContent.cloneNode(true);
  shadowRoot.appendChild(clonedContent);

  this.shadowRoot.querySelector('.rating').innerText = `${this.rating}`;
}

----------------------------------------

TITLE: Using accessor keyword with decorated fields
DESCRIPTION: Demonstrates how to use the new accessor keyword with decorated fields when using standard decorators.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  @property()
  accessor myProperty = "initial value"
...
}

----------------------------------------

TITLE: Generating Localized Templates in JavaScript
DESCRIPTION: This snippet shows an example of a generated localized template module for the es-419 locale in Lit Localize runtime mode.

LANGUAGE: javascript
CODE:
// locales/es-419.ts
export const templates = {
  h3c44aff2d5f5ef6b: html`Hola <b>Mundo!</b>`,
};

----------------------------------------

TITLE: Using Static Expressions in Lit 2 Templates
DESCRIPTION: Shows how to use static expressions in Lit 2 to interpolate constant or rarely-changed values into a template before processing, allowing use in tag-name positions.

LANGUAGE: javascript
CODE:
const tagName = literal`button`;
html`<${tagName}></${tagName}>`

----------------------------------------

TITLE: Transition Event Listener Setup
DESCRIPTION: Sets up the transitionend event listener in the constructor to handle the completion of hide transitions.

LANGUAGE: typescript
CODE:
constructor() {
  super();
  // Finish hiding at end of animation
  this.addEventListener('transitionend', this.finishHide);
}

LANGUAGE: javascript
CODE:
constructor() {
  super();
  // Finish hiding at end of animation
  this.addEventListener('transitionend', this.finishHide);
  this.offset = 4;
  this.showing = false;
}

----------------------------------------

TITLE: Conditional Class Assignment in Lit Template
DESCRIPTION: Shows how to conditionally apply CSS classes in a Lit template using a ternary expression. The code adds the 'completed' class to items based on their completion status.

LANGUAGE: javascript
CODE:
class=${item.completed ? 'completed' : ''}

----------------------------------------

TITLE: Defining Reactive Property in JavaScript
DESCRIPTION: Shows how to define a reactive property 'words' using the static properties field in a Lit component with JavaScript.

LANGUAGE: javascript
CODE:
class WordViewer extends LitElement {
  static properties = {
    words: {},
  };

  constructor() {
    super();
    this.words = 'initial value';
  }
  ...
}

----------------------------------------

TITLE: Handling Vote Attribute Changes in TypeScript
DESCRIPTION: Implementation of observed attributes and attribute change callback to handle vote attribute updates in TypeScript.

LANGUAGE: typescript
CODE:
static get observedAttributes() {
  return ['rating', 'vote'];
}

attributeChangedCallback(attributeName: string, _oldValue: string, newValue: string) {
  if (attributeName === 'rating') {
    const newRating = Number(newValue);

    this.rating = newRating;
  } else if (attributeName === 'vote') {
    this.vote = newValue as 'up'|'down';
  }
}

----------------------------------------

TITLE: Dispatching Custom Events in Lit Components
DESCRIPTION: Shows how to create and dispatch custom events from a Lit component, including setting the bubbles and composed flags for proper event propagation.

LANGUAGE: javascript
CODE:
_dispatchMyEvent() {
  let myEvent = new CustomEvent('my-event', {
    detail: { message: 'my-event happened.' },
    bubbles: true,
    composed: true });
  this.dispatchEvent(myEvent);
}

----------------------------------------

TITLE: Rendering Lit Template with Custom Elements
DESCRIPTION: Shows how to render a Lit template containing custom elements using the SSR render function.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {html} from 'lit';

const result = render(html`
  <h1>Hello SSR!</h1>
  <my-element></my-element>
`);

----------------------------------------

TITLE: Rendering HTML Template with JavaScript in Lit
DESCRIPTION: This snippet demonstrates how to use a template literal to render HTML with dynamic content in Lit.

LANGUAGE: js
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Configuring Package Versions for Lit Project
DESCRIPTION: This JSON configuration extends the site base configuration to resolve imports to 'lit-next'. It's used in the project.config file.

LANGUAGE: json
CODE:
{
  "extends": "/samples/v3-base.json"
}

----------------------------------------

TITLE: Creating Tile Boundary with SVG Clip Path in TypeScript
DESCRIPTION: Function to create a 200px square tile boundary using a clip path.

LANGUAGE: ts
CODE:
const createTileBoundary = () => svg`
  <clipPath id="rect-clip">
    <rect width="200" height="200"></rect>
  </clipPath>
`;

----------------------------------------

TITLE: Selecting Elements from Component's Internal DOM in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to select an element from a component's internal DOM using querySelector. It's equivalent to using the @query decorator in TypeScript.

LANGUAGE: javascript
CODE:
get input() {
  return this.renderRoot?.querySelector('#newitem') ?? null;
}

----------------------------------------

TITLE: CSS Transition Animation for Tooltip
DESCRIPTION: Defines CSS styles for animating the tooltip's opacity and scale when showing/hiding, using a 0.33s transition duration.

LANGUAGE: css
CODE:
:host {
  /* ... */
  opacity: 0;
  transform: scale(0.75);
  transition: opacity, transform;
  transition-duration:  0.33s;
}

:host([showing]) {
  opacity: 1;
  transform: scale(1);
}

----------------------------------------

TITLE: Defining a LitElement-based Web Component in JavaScript
DESCRIPTION: This snippet demonstrates how to define a LitElement-based web component using JavaScript. It shows the process of importing LitElement and extending the LitElement class.

LANGUAGE: javascript
CODE:
import {LitElement, html, css} from 'lit';

export class RatingElement extends LitElement {
  // remove connectedCallback()
  // comment out the observedAttributes method for now this will break
  //   functionality for now, but we'll tackle that in the next step
  ...

----------------------------------------

TITLE: Counter Directive Implementation
DESCRIPTION: Creates a directive that maintains a counter and increments it on each render.

LANGUAGE: javascript
CODE:
const renderCounter = directive((initialValue) => (part) =>
  part.setValue(part.value === undefined
     ? initialValue
     :  part.value + 1)
 );

----------------------------------------

TITLE: TypeScript Configuration for Modern Output
DESCRIPTION: TypeScript compiler configuration for outputting modern JavaScript code.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es2017",
    "module": "es2015"
  }
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Lit Framework Documentation
DESCRIPTION: This YAML frontmatter configures the navigation settings for the Frameworks section in the Lit documentation using Eleventy. It sets the navigation key and order for the page.

LANGUAGE: yaml
CODE:
---
title: Frameworks
eleventyNavigation:
  key: Frameworks
  order: 8
---

----------------------------------------

TITLE: Applying CSS Templates to a Lit Component
DESCRIPTION: This snippet shows how to apply the previously created CSS templates to a Lit component using the static styles property.

LANGUAGE: typescript
CODE:
@customElement('repeat-pattern')
export class RepeatPattern extends LitElement {
  static styles = [svgCSS, themeCSS];
  ...
}

LANGUAGE: javascript
CODE:
export class RepeatPattern extends LitElement {
  static styles = [svgCSS, themeCSS];
  ...
}
customElements.define('repeat-pattern', RepeatPattern);

----------------------------------------

TITLE: Storing Time Argument in AsyncDirective (TypeScript)
DESCRIPTION: This snippet shows how to store the time argument in a class field within the update method of an AsyncDirective. This allows the time to be accessed outside the normal update cycle.

LANGUAGE: typescript
CODE:
  time!: Date;

  update(part: Part, [time]: DirectiveParameters<this>) {
    this.time = time;
    ...
  }

----------------------------------------

TITLE: Defining Reflected Boolean Property in Lit
DESCRIPTION: Demonstrates two ways to define a 'showing' property that reflects to an HTML attribute - using TypeScript decorator syntax or JavaScript static properties.

LANGUAGE: typescript
CODE:
@property({reflect: true, type: Boolean})
showing = false;

LANGUAGE: javascript
CODE:
static properties = {
  offset: {type: Number},
  showing: {reflect: true, type: Boolean},
};
constructor() {
  super();
  this.offset = 4;
  this.showing = false;
}

----------------------------------------

TITLE: Implementing willUpdate Lifecycle Callback
DESCRIPTION: Implementation of the willUpdate lifecycle method to handle vote property changes and update the rating accordingly. Shows both TypeScript and JavaScript implementations.

LANGUAGE: typescript
CODE:
// import PropertyValues
import {LitElement, html, css, PropertyValues} from 'lit';
...
willUpdate(changedProps: PropertyValues<this>) {
  if (changedProps.has('vote')) {
    const newValue = this.vote;
    const oldValue = changedProps.get('vote');

    if (newValue === 'up') {
      if (oldValue === 'down') {
        this.rating += 2;
      } else {
        this.rating += 1;
      }
    } else if (newValue === 'down') {
      if (oldValue === 'up') {
        this.rating -= 2;
      } else {
        this.rating -= 1;
      }
    }
  }
}

LANGUAGE: javascript
CODE:
willUpdate(changedProps) {
  if (changedProps.has('vote')) {
    const newValue = this.vote;
    const oldValue = changedProps.get('vote');

    if (newValue === 'up') {
      if (oldValue === 'down') {
        this.rating += 2;
      } else {
        this.rating += 1;
      }
    } else if (newValue === 'down') {
      if (oldValue === 'up') {
        this.rating -= 2;
      } else {
        this.rating -= 1;
      }
    }
  }
}

----------------------------------------

TITLE: Adding Input and Click Handler for To-Do List in JavaScript
DESCRIPTION: This JavaScript code defines an input getter and implements an addToDo() method to handle adding new items to the list. It shows how to select elements from the component's render root and update internal state immutably.

LANGUAGE: javascript
CODE:
get input() {
  return this.renderRoot?.querySelector('#newitem') ?? null;
}

addToDo() {
  this._listItems = [...this._listItems,
      {text: this.input.value, completed: false}];
  this.input.value = '';
}

----------------------------------------

TITLE: Installing LitElement Component from npm
DESCRIPTION: Command to install a LitElement component package using npm.

LANGUAGE: bash
CODE:
npm install some-package-name

----------------------------------------

TITLE: Handling RenderResults with RenderResultReadable
DESCRIPTION: Shows how to use RenderResultReadable, a Node Readable stream implementation, to handle render results in a streaming context. This example uses Koa as the web server framework.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';
import {html} from 'lit';

// Using Koa to stream
app.use(async (ctx) => {
  const result = render(html`<my-element></my-element>`);
  ctx.type = 'text/html';
  ctx.body = new RenderResultReadable(result);
});

----------------------------------------

TITLE: Configuring Web Test Runner with Legacy Support
DESCRIPTION: Configuration setup for Web Test Runner that includes polyfills for web components and Lit support in legacy browsers

LANGUAGE: javascript
CODE:
import { legacyPlugin } from '@web/dev-server-legacy';

export default {
  /* ... */
  plugins: [
    // make sure this plugin is always last
    legacyPlugin({
      polyfills: {
        webcomponents: true,
        // Inject lit's polyfill-support module into test files, which is required
        // for interfacing with the webcomponents polyfills
        custom: [
          {
            name: 'lit-polyfill-support',
            path: 'node_modules/lit/polyfill-support.js',
            test: "!('attachShadow' in Element.prototype)",
            module: false,
          },
        ],
      },
    }),
  ],
};

----------------------------------------

TITLE: Setting Boolean Attribute with Expression in Lit HTML
DESCRIPTION: This snippet shows how to use an expression to conditionally set a boolean attribute (disabled) on a text input based on the state of a checkbox.

LANGUAGE: html
CODE:
?disabled=${!this.checked}

----------------------------------------

TITLE: Styling Summary Element Hover State
DESCRIPTION: CSS styles to add pointer cursor on summary element hover

LANGUAGE: css
CODE:
summary:hover {
  cursor: pointer;
}

----------------------------------------

TITLE: Creating SVG and Theme CSS Templates in Lit
DESCRIPTION: This code creates two CSS templates: one for general SVG styling and another for theming using CSS Custom Properties.

LANGUAGE: typescript
CODE:
import {LitElement, html, svg, css} from 'lit';

const svgCSS = css`
  :host {
    display: block;
  }

  svg {
    height: 100%;
    width: 100%;
  }

  text {
    fill: #ffffff;
    dominant-baseline: hanging;
    font-family: monospace;
    font-size: 24px;
  }
`;

const themeCSS = css`
  .background {
    fill: var(--background-color, #000000);
  }

  text {
    fill: var(--font-color, #ffffff);
    font-size: var(--font-size, 26px);
    stroke-width: var(--stroke-width, 1.2px);
    stroke: var(--stroke-color, #eeeeee);
  }
`;

----------------------------------------

TITLE: Implementing Show/Hide Methods for Tooltip
DESCRIPTION: Defines show and hide methods using arrow functions to control tooltip visibility through inline styles. The show method clears CSS text while hide method sets display to none.

LANGUAGE: typescript
CODE:
show = () => {
  this.style.cssText = '';
};

hide = () => {
  this.style.display = 'none';
};

----------------------------------------

TITLE: Playground Example Configuration
DESCRIPTION: Template for embedding a single playground example file with preview functionality using Liquid template syntax.

LANGUAGE: liquid
CODE:
{% playground-example "v2-docs/templates/define" "my-element.ts" %}

----------------------------------------

TITLE: Building TypeScript Lit Project
DESCRIPTION: Commands to build the JavaScript version of a TypeScript Lit project and watch for file changes.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npm run build:watch

----------------------------------------

TITLE: Dynamic Locale Script Loading - JavaScript
DESCRIPTION: Example of dynamically loading locale-specific scripts based on URL parameters with security validation

LANGUAGE: javascript
CODE:
import {allLocales} from './generated/locales.js';

const url = new URL(window.location.href);
const unsafeLocale = url.searchParams.get('locale');
const locale = allLocales.includes(unsafeLocale) ? unsafeLocale : 'en';

const script = document.createElement('script');
script.type = 'module';
script.src = `/${locale}.js`;
document.head.appendChild(script);

----------------------------------------

TITLE: Implementing Date Converter in JavaScript
DESCRIPTION: JavaScript version of the date converter that provides the same functionality without type annotations. Converts between Date objects and localized date strings based on the provided locale.

LANGUAGE: javascript
CODE:
export const dateConverter = (locale) => {
  return {
    toAttribute: (date) => {
      return date.toLocaleDateString(locale);
    },
    fromAttribute: (value) => {
      return new Date(value);
    },
  };
};

----------------------------------------

TITLE: Implementing the render Method in a LitElement Component
DESCRIPTION: This snippet demonstrates how to implement the render method in a LitElement component. It shows the use of the html tagged template literal to define the component's structure and event handling.

LANGUAGE: typescript
CODE:
render() {
  return html`
    <button
        class="thumb_down"
        @click=${() => {this.vote = 'down'}}>
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
    </button>
    <span class="rating">${this.rating}</span>
    <button
        class="thumb_up"
        @click=${() => {this.vote = 'up'}}>
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewbox="0 0 24 24" width="24"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
    </button>`;
}

----------------------------------------

TITLE: Using CSS Custom Properties for SVG Theming in Lit
DESCRIPTION: This snippet demonstrates how to use CSS Custom Properties to enable theming of SVG elements in Lit applications.

LANGUAGE: typescript
CODE:
const helloCssCustomProperties = css`
  .background {
    fill: var(--background-color, #000000);
  }
`;

----------------------------------------

TITLE: Defining Enter and Leave Events for Tooltip
DESCRIPTION: Defines arrays of events that trigger showing and hiding the tooltip. These events are used to manage the tooltip's visibility based on user interaction.

LANGUAGE: typescript
CODE:
// Events to turn on/off the tooltip
const enterEvents = ['pointerenter', 'focus'];
const leaveEvents = ['pointerleave', 'blur', 'keydown', 'click'];

----------------------------------------

TITLE: Adding Declarative Event Listener in Lit Component
DESCRIPTION: Demonstrates how to add a declarative event listener using lit-html @event binding in a component's render method.

LANGUAGE: javascript
CODE:
render() {
  return html`<button @click="${this._handleClick}">`;
}

----------------------------------------

TITLE: Installing Dependencies for Lit Starter Project
DESCRIPTION: Command to install project dependencies after downloading and extracting the starter kit.

LANGUAGE: bash
CODE:
cd <project folder>
npm i

----------------------------------------

TITLE: Configuring Server Rendering Section Header in Eleventy
DESCRIPTION: Eleventy front matter configuration for creating a server rendering documentation section. Sets up navigation properties including key, order, and labs flag.

LANGUAGE: markdown
CODE:
---
title: Server rendering
eleventyNavigation:
  key: Server rendering
  order: 7
  labs: true
---

----------------------------------------

TITLE: Using Date Display Component in HTML
DESCRIPTION: This HTML snippet demonstrates how to use the updated DateDisplay component with the date attribute for proper conversion to a JavaScript Date object.

LANGUAGE: html
CODE:
<date-display date="05/05/22"></date-display>

----------------------------------------

TITLE: Handling Vote Attribute Changes in JavaScript
DESCRIPTION: Implementation of observed attributes and attribute change callback to handle vote attribute updates in JavaScript.

LANGUAGE: javascript
CODE:
static get observedAttributes() {
  return ['rating', 'vote'];
}

attributeChangedCallback(attributeName, _oldValue, newValue) {
  if (attributeName === 'rating') {
    const newRating = Number(newValue);

    this.rating = newRating;
  } else if (attributeName === 'vote') {
    this.vote = newValue;
  }
}

----------------------------------------

TITLE: Pattern with Fill Reference in SVG
DESCRIPTION: Shows how to create a pattern with an ID and reference it as a fill attribute in other SVG elements.

LANGUAGE: typescript
CODE:
const helloPattern = svg`
  <pattern
    id="hello-pattern"
    patternUnits="userSpaceOnUse">
    ${createTile()}
  </pattern>
`;

const helloPatternFill = svg`
  <rect fill="url(#hello-pattern)" width="200" height="200"></rect>
`;

----------------------------------------

TITLE: Implementing Tooltip Positioning Logic
DESCRIPTION: Implements a show method that positions the tooltip relative to its target element using getBoundingClientRect(). Calculates the tooltip position based on the target's coordinates and the defined offset.

LANGUAGE: typescript
CODE:
show = () => {
  this.style.cssText = '';
  // Position the tooltip near the target.
  const {x, y, height} = this.target!.getBoundingClientRect();
  this.style.left = `${x}px`;
  this.style.top = `${y + height + this.offset}px`;
};

LANGUAGE: javascript
CODE:
show = () => {
  this.style.cssText = '';
  // Position the tooltip near the target.
  const {x, y, height} = this.target.getBoundingClientRect();
  this.style.left = `${x}px`;
  this.style.top = `${y + height + this.offset}px`;
};

----------------------------------------

TITLE: Rendering SVG with unsafeSVG Directive
DESCRIPTION: Shows how to use the unsafeSVG directive to render SVG fragments within an SVG container. Note that this directive should not be used with untrusted user input.

LANGUAGE: javascript
CODE:
const renderShape = (shape) => html`
  <svg  width="100" height="100" viewBox="0 0 100 100">
    ${unsafeSVG(shape)}
  </svg>
`;

----------------------------------------

TITLE: Importing Lit Using Bare Module Specifiers
DESCRIPTION: Example showing Lit's use of bare module specifiers which need to be transformed for browser compatibility.

LANGUAGE: javascript
CODE:
import {html} from 'lit-html';

----------------------------------------

TITLE: Adding Console Logging to Lifecycle Methods in Lit Directive
DESCRIPTION: These snippets add console.log statements to the ensureTimerStarted and ensureTimerStopped methods in a Lit directive class for debugging lifecycle events.

LANGUAGE: typescript
CODE:
  ensureTimerStarted() {
    console.log('timer started');
    ...
  }

LANGUAGE: typescript
CODE:
  ensureTimerStopped() {
    console.log('timer stopped');
    ...
  }

----------------------------------------

TITLE: Implementing Click Handler for Lit Carousel (JavaScript)
DESCRIPTION: This snippet provides the JavaScript version of the click handler method for a Lit carousel component. It performs the same functionality as the TypeScript version but without type annotations.

LANGUAGE: javascript
CODE:
clickHandler(e) {
  const i = this.selected + (Number(!e.shiftKey) || -1);
  this.selected = i > this.maxSelected ? 0 : i < 0 ? this.maxSelected : i;
  const change = new CustomEvent('change',
    {detail: this.selected, bubbles: true, composed: true});
  this.dispatchEvent(change);
}

----------------------------------------

TITLE: Implementing attributeChangedCallback for Rating Updates in TypeScript
DESCRIPTION: This snippet shows how to implement the attributeChangedCallback method in TypeScript to observe and react to changes in the 'rating' attribute of a web component. It also includes the static observedAttributes getter required for the callback to trigger.

LANGUAGE: typescript
CODE:
static get observedAttributes() {
  return ['rating'];
}

attributeChangedCallback(attributeName: string, _oldValue: string, newValue: string) {
  if (attributeName === 'rating') {
    const newRating = Number(newValue);

    this.rating = newRating;
  }
}

----------------------------------------

TITLE: Implementing Date Converter in TypeScript
DESCRIPTION: Creates a custom attribute converter that handles conversion between Date objects and localized date strings. The converter takes a locale parameter and provides toAttribute and fromAttribute methods for bidirectional conversion.

LANGUAGE: typescript
CODE:
import type {ComplexAttributeConverter} from 'lit';

export const dateConverter = (locale: string): ComplexAttributeConverter<Date> => {
  return {
    toAttribute: (date: Date) => {
      return date.toLocaleDateString(locale);
    },
    fromAttribute: (value: string) => {
      return new Date(value);
    }
  }
};

----------------------------------------

TITLE: Importing Floating UI Components
DESCRIPTION: Imports required functions from the @floating-ui/dom package for tooltip positioning functionality.

LANGUAGE: typescript
CODE:
import {
  computePosition,
  autoPlacement,
  offset,
  shift
} from '@floating-ui/dom';

----------------------------------------

TITLE: Complete Lit Template with Conditional Rendering (TypeScript)
DESCRIPTION: This is the final version of the Lit template, incorporating the conditional rendering of todos or a 'caught up' message. It demonstrates how to structure a Lit component's render method.

LANGUAGE: typescript
CODE:
return html`
  <h2>To Do</h2>
  ${todosOrMessage}
  <input id="newitem" aria-label="New item">
  ...
`

----------------------------------------

TITLE: Running Rollup Build for Lit Application
DESCRIPTION: Command to execute the Rollup build process using the configuration file.

LANGUAGE: shell
CODE:
rollup -c

----------------------------------------

TITLE: Implementing Reconnected Callback in Lit AsyncDirective
DESCRIPTION: Reconnected lifecycle callback that restarts the timer when the directive is reattached to DOM. Ensures functionality resumes after disconnection.

LANGUAGE: typescript
CODE:
  reconnected() {
    this.ensureTimerStarted();
  }

----------------------------------------

TITLE: Example of Direct format Function Usage in Template
DESCRIPTION: This snippet demonstrates how the format function could be used directly in a template without a directive, for comparison purposes.

LANGUAGE: typescript
CODE:
return html`<p>The page was rendered ${format(timeCreated)}`;

----------------------------------------

TITLE: Applying animate directive to container element in Lit render method
DESCRIPTION: This code demonstrates how to add the animate directive to the container element surrounding the slots in the render method of a Lit component. It's applied using the ${animate()} syntax within the template literal.

LANGUAGE: typescript
CODE:
return html`
  <div class="fit"
    ${animate()}

----------------------------------------

TITLE: Demonstrating Style Leakage in HTML
DESCRIPTION: This HTML snippet shows how styles can leak into a custom element without Shadow DOM, by applying a red border to all span elements.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
 <head>
   <script src="./rating-element.js" type="module"></script>
   <style>
     span {
       border: 1px solid red;
     }
   </style>
 </head>
 <body>
   <rating-element></rating-element>
 </body>
</html>

----------------------------------------

TITLE: Styling Selected Slot for Carousel Animation in Lit
DESCRIPTION: This CSS snippet adjusts the positioning of the selected slot to ensure proper display during animation. It moves the selected item up to prevent it from being hidden behind the previous item.

LANGUAGE: css
CODE:
.selected {
  top: -100%;
}

----------------------------------------

TITLE: Show Method Implementation
DESCRIPTION: Updates the show method to set the showing property to true, triggering the CSS transition.

LANGUAGE: typescript
CODE:
show = () => {
  // ...
  this.showing = true;
};

----------------------------------------

TITLE: Using Preact Signals with Lit Components
DESCRIPTION: Demonstrates how to integrate Preact Signals with Lit components using the new @lit-labs/preact-signals package and SignalWatcher mixin.

LANGUAGE: typescript
CODE:
import {LitElement, html} from 'lit';
import {customElement, property} from 'lit';
import {SignalWatcher, signal} from '@lit-labs/preact-signals';

const count = signal(0);

@customElement('signal-example')
export class SignalExample extends SignalWatcher(LitElement) {

  render() {
    return html`
      <p>The count is ${count.value}</p>
      <button @click=${this._onClick}>Increment</button>
    `;
  }

  private _onClick() {
    // A change to the signal value causes the element to re-render!
    count.value = count.value + 1;
  }
}

----------------------------------------

TITLE: Configuring tsconfig.json for Lit Component Compilation
DESCRIPTION: Shows the recommended TypeScript compiler options for targeting ES2021, enabling decorator compilation, and generating declaration files for Lit components.

LANGUAGE: json
CODE:
"compilerOptions": {
  "target": "es2021",
  "module": "es2015",
  "moduleResolution": "node",
  "lib": ["es2021", "dom"],
  "declaration": true,
  "declarationMap": true,
  "experimentalDecorators": true,
  "useDefineForClassFields": false
}

----------------------------------------

TITLE: Declaring Reactive Properties in Lit Component
DESCRIPTION: Demonstrates two approaches for declaring reactive properties in a Lit component - using TypeScript decorators and static properties. Shows configuration of property types and reflection behavior.

LANGUAGE: typescript
CODE:
import {customElement, property} from 'lit/decorators.js';

export class RatingElement extends LitElement {
  ...
  @property({type: Number})
  rating = 0;

  @property({type: String, reflect: true})
  vote: 'up'|'down'|null = null;

  // remove observedAttributes() and attributeChangedCallback()
  // remove set rating() get rating()
  // remove set vote() get vote()
  // remove the _rating and _vote private class members
  ...

LANGUAGE: javascript
CODE:
export class RatingElement extends LitElement {
  ...
  static properties = {
    rating: {type: Number},
    vote: {type: String, reflect: true},
  };

  constructor() {
    super();
    this.rating = 0;
    this.vote = null;
  }

  // remove observedAttributes() and attributeChangedCallback()
  // remove set rating() get rating()
  // remove set vote() get vote()
  // remove the _rating and _vote private class members
  ...

----------------------------------------

TITLE: Importing format Function from timeago.js
DESCRIPTION: This snippet demonstrates how to import the format function from the timeago.js library in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
...
import {format} from 'timeago.js';

LANGUAGE: javascript
CODE:
...
import {format} from 'timeago.js';

----------------------------------------

TITLE: Inspecting Custom Element Constructor
DESCRIPTION: Console command to verify the custom element registration by inspecting its constructor.

LANGUAGE: text
CODE:
document.querySelector('rating-element').constructor

LANGUAGE: javascript
CODE:
class RatingElement extends HTMLElement {}

----------------------------------------

TITLE: Implementing Selection Updates in TypeScript
DESCRIPTION: TypeScript implementation of the updated() lifecycle method and updateSlots() helper to manage slot assignments for carousel items. Handles tracking of previous selection and updates slot attributes accordingly.

LANGUAGE: typescript
CODE:
private previous = 0;
protected updated(changedProperties: PropertyValues) {
  if (changedProperties.has('selected') && this.hasValidSelected()) {
    this.updateSlots();
    this.previous = this.selected;
  }
}

private updateSlots() {
  this.children[this.previous]?.removeAttribute('slot');
  this.children[this.selected]?.setAttribute('slot', 'selected');
}

----------------------------------------

TITLE: Implementing Word Display Logic in Render Method
DESCRIPTION: Renders a single word from the words property by splitting the string on periods and using modulo operator to cycle through the array. Implementation is identical in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
// word-viewer.ts

  render() {
    const splitWords = this.words.split('.');
    const word = splitWords[this.idx % splitWords.length];
    return html`<pre>${word}</pre>`;
  }

LANGUAGE: javascript
CODE:
// word-viewer.js

  render() {
    const splitWords = this.words.split('.');
    const word = splitWords[this.idx % splitWords.length];
    return html`<pre>${word}</pre>`;
  }

----------------------------------------

TITLE: Configuring Eleventy Navigation for Localization Section in Lit Docs
DESCRIPTION: This YAML front matter sets up the navigation configuration for the Localization section in Lit documentation. It defines the navigation key and order for the Eleventy static site generator.

LANGUAGE: yaml
CODE:
---
title: Localization
eleventyNavigation:
  key: Localization
  order: 9
---

----------------------------------------

TITLE: Installing Web Test Runner Legacy Plugin
DESCRIPTION: Command to install the @web/dev-server-legacy package for supporting older browsers in Web Test Runner.

LANGUAGE: bash
CODE:
npm i @web/dev-server-legacy --save-dev

----------------------------------------

TITLE: Styling a LitElement Component using CSS
DESCRIPTION: This snippet shows how to define styles for a LitElement component using the static styles property and the css tagged template literal. It demonstrates styling the host element and child elements.

LANGUAGE: typescript
CODE:
export class RatingElement extends LitElement {
  static styles = css`
    :host {
      display: inline-flex;
      align-items: center;
    }

    button {
      background: transparent;
      border: none;
      cursor: pointer;
    }

    :host([vote=up]) .thumb_up {
      fill: green;
    }

    :host([vote=down]) .thumb_down {
      fill: red;
    }
  `;
  ...
  // remove <style> from render method

----------------------------------------

TITLE: Styling Vote Buttons with CSS Host Selectors
DESCRIPTION: CSS styles that apply different colors to thumb up/down buttons based on the vote attribute value using shadow DOM host selectors.

LANGUAGE: css
CODE:
<template>
  <style>
    ...

    :host([vote=up]) .thumb_up {
      fill: green;
    }
    :host([vote=down]) .thumb_down {
      fill: red;
    }
  </style>
</template>

----------------------------------------

TITLE: Implementing Update Lifecycle in Lit Directive
DESCRIPTION: Adds the update lifecycle callback that initiates the timer when the directive is connected. Includes connection state checking and proper TypeScript typing for parameters.

LANGUAGE: typescript
CODE:
import {DirectiveParameters, Part} from 'lit/directive.js';

...

  update(part: Part, [time]: DirectiveParameters<this>) {
    if (this.isConnected) {
      this.ensureTimerStarted();
    }
    return this.render(time);
  }

LANGUAGE: javascript
CODE:
  update(part, [time]) {
    if (this.isConnected) {
      this.ensureTimerStarted();
    }
    return this.render(time);
  }

----------------------------------------

TITLE: Configuring Selected Item Slot in HTML Template
DESCRIPTION: HTML template configuration that sets up a named slot for displaying the selected carousel item. The slot name 'selected' ensures only the selected item is rendered.

LANGUAGE: html
CODE:
<div class="fit">
  <slot name="selected"></slot>
</div>

----------------------------------------

TITLE: Implementing Carousel Selection in TypeScript with Lit
DESCRIPTION: This snippet shows how to add a 'selected' property to a carousel component using TypeScript and Lit. It includes property declaration, getter methods for maximum selection, validation, and rendering logic to update the internal selection.

LANGUAGE: typescript
CODE:
private selectedInternal = 0;
@property({type: Number})
selected = 0;

get maxSelected() {
  return this.childElementCount - 1;
}

hasValidSelected() {
  return this.selected >= 0 && this.selected <= this.maxSelected;
}

render() {
  if (this.hasValidSelected()) {
    this.selectedInternal = this.selected;
  }
  // ...

----------------------------------------

TITLE: Implementing Delete Method in Lit Component
DESCRIPTION: Defines a delete method that removes an item from the things array using array filter. Uses immutable data pattern by creating a new array reference to trigger Lit updates.

LANGUAGE: typescript
CODE:
class MyElement extends LitElement {
  ⋮
  private _deleteThing(index: number) {
    this.things = this.things.filter((_, i) => i !== index);
  }
}

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  ⋮
  _deleteThing(index) {
    this.things = this.things.filter((_, i) => i !== index);
  }
}

----------------------------------------

TITLE: Defining a Lit Component for Demo Greeter
DESCRIPTION: This code defines a Lit component called DemoGreeter. It includes styles, properties, and a render method to display a greeting with the provided name.

LANGUAGE: js
CODE:
import {LitElement, html, css} from 'lit';

class DemoGreeter extends LitElement {
  static styles = css`
    b { color: red; }
  `;

  static properties = {
    name: {},
  };

  render() {
    return html`Hello <b>${this.name}</b>!`;
  }
}
customElements.define('demo-greeter', DemoGreeter);

----------------------------------------

TITLE: Standard Decorator Syntax Example
DESCRIPTION: Example showing standard decorator syntax using the accessor keyword.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement {

  @property()
  accessor greeting = 'Welcome';

}

----------------------------------------

TITLE: Implementing attributeChangedCallback for Rating Updates in JavaScript
DESCRIPTION: This snippet demonstrates the JavaScript implementation of the attributeChangedCallback method to observe and react to changes in the 'rating' attribute of a web component. It includes the static observedAttributes getter necessary for the callback to function.

LANGUAGE: javascript
CODE:
static get observedAttributes() {
  return ['rating'];
}

attributeChangedCallback(attributeName, _oldValue, newValue) {
  if (attributeName === 'rating') {
    const newRating = Number(newValue);

    this.rating = newRating;
  }
}

----------------------------------------

TITLE: Rendering TimeAgo Directive in Child Expression (TypeScript)
DESCRIPTION: This snippet shows how to render the timeAgo directive as a string in a child expression within a Lit template.

LANGUAGE: typescript
CODE:
      <p>This page was rendered ${timeAgo(timeCreated)}.</p>

----------------------------------------

TITLE: Styling Motion Carousel Element with CSS
DESCRIPTION: This CSS snippet provides basic styling for the motion carousel element. It sets display properties, dimensions, and appearance for the host element, the fit class, and slotted children. It also includes comments explaining the purpose of certain styles.

LANGUAGE: css
CODE:
:host {
  display: inline-block;
  overflow: hidden;
  position: relative;
  /* Defaults */
  width: 200px;
  height: 200px;
  border-radius: 4px;
  background: gainsboro;
  cursor: pointer;
}

.fit {
  position: relative;
  height: 100%;
  width: 100%;
}

::slotted(*) {
  box-sizing: border-box;
  width: 100%;
  height: 100%;
}

----------------------------------------

TITLE: Creating Date Object and Defining Lit Element in TypeScript
DESCRIPTION: This code creates a Date object at the module level and defines a Lit element class using TypeScript. It demonstrates the setup required before using the timeAgo directive.

LANGUAGE: typescript
CODE:
const timeCreated = new Date();

@customElement('time-ago-example')
export class TimeAgoExample extends LitElement {
  ...


----------------------------------------

TITLE: Using Lit from a CDN Bundle
DESCRIPTION: This snippet demonstrates how to import Lit from a pre-built bundle hosted on a CDN. This method is suitable for environments where npm and build tools are not preferred or available.

LANGUAGE: js
CODE:
import {LitElement, html} from 'https://cdn.jsdelivr.net/gh/lit/dist@3/core/lit-core.min.js';

----------------------------------------

TITLE: Customizing Property Change Detection in TypeScript
DESCRIPTION: Example of customizing the hasChanged function for a reactive property in a Lit component using TypeScript.

LANGUAGE: typescript
CODE:
@property({
  hasChanged(newVal: string, oldVal: string) {
    return newVal?.toLowerCase() !== oldVal?.toLowerCase();
  }
})
myProp: string | undefined;

----------------------------------------

TITLE: Implementing Property Binding for Rating Element in TypeScript
DESCRIPTION: This snippet shows how to implement a property binding for a rating element in TypeScript. It includes a private _rating property, a setter and getter for the rating property, and logic to update the view when the rating changes.

LANGUAGE: typescript
CODE:
private _rating = 0;

set rating(value) {
  this._rating = value;

  if (!this.shadowRoot) {
    return;
  }

  const ratingEl = this.shadowRoot.querySelector<HTMLElement>('.rating');

  if (ratingEl) {
    ratingEl.innerText = `${this._rating}`;
  }
}

get rating() {
  return this._rating;
}

----------------------------------------

TITLE: Adding Reactive Property to SVG Lit Component
DESCRIPTION: Extends the RepeatPattern component with a reactive 'chars' property to allow dynamic configuration of the rendered text.

LANGUAGE: typescript
CODE:
@customElement('repeat-pattern')
export class RepeatPattern extends LitElement {    
  @property({type: String}) chars = "lit";
  
  render() {
    return html`
      <svg height="100%" width="100%">
        ${createElement(this.chars)}
      </svg>
    `;
  }
}

LANGUAGE: javascript
CODE:
export class RepeatPattern extends LitElement {
  static properties = {
    chars: {type: String},
  };

  constructor() {
    super();
    this.chars = 'lit';
  }

  render() {
    return html`
      <svg height="100%" width="100%">
        ${createElement(this.chars)}
      </svg>
    `;
  }
}
customElements.define('repeat-pattern', RepeatPattern);

----------------------------------------

TITLE: Binding TimeAgo Directive to Attribute Expression (TypeScript)
DESCRIPTION: This snippet shows how to bind the timeAgo directive to the time attribute of the comment-card element, allowing periodic updates without re-rendering the outer template.

LANGUAGE: typescript
CODE:
  time=${timeAgo(timeCreated)}

----------------------------------------

TITLE: Storing Time Argument in AsyncDirective (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to store the time argument in a class field within the update method of an AsyncDirective, allowing access to the time outside the normal update cycle.

LANGUAGE: javascript
CODE:
  update(part, [time]) {
    this.time = time;
    ...
  }

----------------------------------------

TITLE: Creating Date Object and Defining Lit Element in JavaScript
DESCRIPTION: This code creates a Date object at the module level and defines a Lit element class using JavaScript. It shows the JavaScript equivalent of the TypeScript setup.

LANGUAGE: javascript
CODE:
const timeCreated = new Date();

export class TimeAgoExample extends LitElement {
  ...


----------------------------------------

TITLE: Configuring Resources Section in Eleventy Navigation
DESCRIPTION: YAML front matter configuration that defines a Resources section in the navigation structure with a specified order. The file serves only to create the section heading and its output is deleted during build.

LANGUAGE: yaml
CODE:
---
title: Resources
eleventyNavigation:
  key: Resources
  order: 13
---

----------------------------------------

TITLE: Custom Property Accessor in JavaScript
DESCRIPTION: Example of creating a custom property accessor for a reactive property in a Lit component using JavaScript.

LANGUAGE: javascript
CODE:
static properties = {
  prop: {},
};

_prop = 0;

set prop(val) {
  let oldVal = this._prop;
  this._prop = Math.floor(val);
  this.requestUpdate('prop', oldVal);
}

get prop() { return this._prop; }

----------------------------------------

TITLE: Demonstrating Attribute and Property Relationship in HTML and JavaScript
DESCRIPTION: This snippet shows how to set both the 'value' attribute and property of an input element, illustrating the relationship between HTML attributes and JavaScript properties.

LANGUAGE: html
CODE:
<input value="This is setting the 'value' attribute">
<script>
  const inputElementReference = document.querySelector('input');
  inputElementReference.value = 'This is setting the "value" property';
</script>

----------------------------------------

TITLE: Using Time Ago Directive in Lit Element Template
DESCRIPTION: This snippet demonstrates how to use the 'timeAgo' directive within a Lit element's template. It passes the 'timeCreated' Date object to the directive to render the time ago string.

LANGUAGE: typescript
CODE:
    return html`
      <p>This page was rendered ${timeAgo(timeCreated)}.</p>
    `;

----------------------------------------

TITLE: Updating Rendered Value with setValue in AsyncDirective
DESCRIPTION: This snippet shows how to use the setValue method of AsyncDirective to update the rendered value outside the normal directive lifecycle. It re-formats the date using the currently elapsed time.

LANGUAGE: typescript
CODE:
        this.setValue(this.render(this.time));

----------------------------------------

TITLE: Declaring Internal Reactive State with TypeScript Decorator
DESCRIPTION: Example of declaring internal reactive state in a Lit component using the @state decorator in TypeScript.

LANGUAGE: typescript
CODE:
@state()
protected _active = false;

----------------------------------------

TITLE: Declaring Properties with Decorators
DESCRIPTION: Example demonstrating property declaration using TypeScript decorators in LitElement.

LANGUAGE: TypeScript
CODE:
@property({type: String})
mode = 'auto';

@property()
data = {};

----------------------------------------

TITLE: Updating Render Method for Carousel Animation in Lit (TypeScript)
DESCRIPTION: This snippet shows how to modify the render method to support animation between carousel items. It imports the styleMap directive and sets up the structure for animating between previous and selected items.

LANGUAGE: typescript
CODE:
import {styleMap} from 'lit/directives/style-map.js';

// ...
private left = 0;
render() {
  if (this.hasValidSelected()) {
    this.selectedInternal = this.selected;
  }
  const animateLeft = ``;
  const selectedLeft = ``;
  const previousLeft = ``;
  return html`
    <div class="fit"
      @click=${this.clickHandler}
      style=${styleMap({left: animateLeft})}
    >
      <div class="fit" style=${styleMap({left: previousLeft})}>
        <slot name="previous"></slot>
      </div>
      <div class="fit selected" style=${styleMap({left: selectedLeft})}>
        <slot name="selected"></slot>
      </div>
    </div>
  `;
}

----------------------------------------

TITLE: Defining Partial Templates in Lit (TypeScript)
DESCRIPTION: This code defines partial templates for a 'caught up' message and a conditional template that displays either the todos or the message. It uses Lit's html template literal tag.

LANGUAGE: typescript
CODE:
const caughtUpMessage = html`
  <p>
  You're all caught up!
  </p>
`;
const todosOrMessage = items.length > 0
  ? todos
  : caughtUpMessage;

----------------------------------------

TITLE: Initializing TimeAgo Directive Class in TypeScript
DESCRIPTION: Creates the basic scaffolding for a custom time formatting directive by extending the Directive class from Lit and exporting a directive function.

LANGUAGE: typescript
CODE:
import {directive, Directive} from 'lit/directive.js';

class TimeAgoDirective extends Directive {
}

export const timeAgo = directive(TimeAgoDirective);

----------------------------------------

TITLE: Creating CommentCard Element with Static Attributes (HTML)
DESCRIPTION: This snippet demonstrates the creation of a comment-card custom element with static attributes for user, time, subject, and content.

LANGUAGE: html
CODE:
  <comment-card user="litdeveloper"
                time="12:49 pm"
                subject="Just tried AsyncDirectives!"
                content="Cool stuff, they're really powerful!">
  </comment-card>

----------------------------------------

TITLE: Defining Scoped Styles for Lit Component in TypeScript
DESCRIPTION: This snippet shows how to define scoped styles for a Lit component using the static styles class field in TypeScript. It demonstrates styling the host element and a pre element within the component.

LANGUAGE: typescript
CODE:
// word-viewer.ts

  static styles = css`
    :host {
      background-color: white;
      color: violet;
      cursor: pointer;
      display: block;
    }
    pre {
      padding: 0.2em;
    }
  `;

----------------------------------------

TITLE: Declaring Properties with Static Field
DESCRIPTION: Example showing how to declare and initialize properties using a static properties field in LitElement.

LANGUAGE: JavaScript
CODE:
static get properties() {
  return {
    greeting: {type: String},
    data: {attribute: false},
    items: {}
  };
}

----------------------------------------

TITLE: Defining a Lit Element with Styles and Template in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Lit element using TypeScript decorators. It includes a static style definition and a render method that returns a template.

LANGUAGE: typescript
CODE:
import { LitElement, html, css, customElement } from 'lit-element';

@customElement('my-element');
class MyElement extends LitElement {
  static style = css`
    my-element #id .class [attr~="foo"] ::part(bar) {
      border: 1px solid blue;
    }
  `;

  render() {
    return html`
      Lorem ipsum ${value}!
      <button attribute="value"></button>
      <button attribute=${value}></button>
      <button .property=${value}></button>
      <button ?boolean=${value}></button>
      <button @event=${this.handler}></button>
    `;
  }
}

----------------------------------------

TITLE: Filtering and Mapping Arrays in Lit Template
DESCRIPTION: Demonstrates how to chain array methods filter() and map() within a Lit template to filter names containing 'e' and generate list items. Shows implementation in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
// my-element.ts
  render() {
    return html`
      ⋮
      <ul>
      ${this.names
        .filter((name) => name.match(/e/i))
        .map((name) => html`<li>${name}</li>`)}
      </ul>
    `;
  }

LANGUAGE: javascript
CODE:
// my-element.js
  render() {
    return html`
      ⋮
      <ul>
      ${this.names
        .filter((name) => name.match(/e/i))
        .map((name) => html`<li>${name}</li>`)}
      </ul>
    `;
  }

----------------------------------------

TITLE: Adding animate directive to indicator element in Lit render method
DESCRIPTION: This snippet shows how to apply the animate directive to the indicator element at the bottom of the render method in a Lit component. It uses the same ${animate()} syntax as the container element.

LANGUAGE: typescript
CODE:
  <div class="indicator"
    ${animate()}

----------------------------------------

TITLE: Using the Tooltip Directive in a Lit Component
DESCRIPTION: This snippet demonstrates how to import and use the custom tooltip directive in a Lit component. The directive is applied to a span element, providing dynamic tooltip content.

LANGUAGE: typescript
CODE:
import {tooltip} from './simple-tooltip.js';

<p>
  <span ${tooltip(html`${this.name}, there's coffee available in the lounge.`)}>
    Hello, ${this.name}!
  </span>
</p>

----------------------------------------

TITLE: Using Slots in LitElement Templates
DESCRIPTION: Demonstrates how to use slots to render child elements in LitElement templates, including named slots.

LANGUAGE: JavaScript
CODE:
render(){
  return html`
    <div>
      <slot></slot>
    </div>
  `;
}

render(){
  return html`
    <div>
      <slot name="one"></slot>
    </div>
  `;
}

----------------------------------------

TITLE: Template Shadowroot Polyfill Implementation
DESCRIPTION: Complete HTML implementation showing how to load and apply the template-shadowroot polyfill for browsers without native declarative shadow DOM support.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <!-- On browsers that don't yet support native declarative shadow DOM, a
        paint can occur after some or all pre-rendered HTML has been parsed,
        but before the declarative shadow DOM polyfill has taken effect. This
        paint is undesirable because it won't include any component shadow DOM.
        To prevent layout shifts that can result from this render, we use a
        "dsd-pending" attribute to ensure we only paint after we know
        shadow DOM is active. -->
    <style>
      body[dsd-pending] {
        display: none;
      }
    </style>
  </head>

  <body dsd-pending>
    <script>
      if (HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // This browser has native declarative shadow DOM support, so we can
        // allow painting immediately.
        document.body.removeAttribute('dsd-pending');
      }
    </script>

    <!-- App components rendered with declarative shadow DOM placed here. -->

    <!-- Use a type=module script so that we can use dynamic module imports.
        Note this pattern will not work in IE11. -->
    <script type="module">
      // Check if we require the template shadow root polyfill.
      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // Fetch the template shadow root polyfill.
        const {hydrateShadowRoots} = await import(
          '/node_modules/@webcomponents/template-shadowroot/template-shadowroot.js'
        );

        // Apply the polyfill. This is a one-shot operation, so it is important
        // it happens after all HTML has been parsed.
        hydrateShadowRoots(document.body);

        // At this point, browsers without native declarative shadow DOM
        // support can paint the initial state of your components!
        document.body.removeAttribute('dsd-pending');
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Template Shadowroot Polyfill Implementation
DESCRIPTION: Complete HTML implementation showing how to load and apply the template-shadowroot polyfill for browsers without native declarative shadow DOM support.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <!-- On browsers that don't yet support native declarative shadow DOM, a
        paint can occur after some or all pre-rendered HTML has been parsed,
        but before the declarative shadow DOM polyfill has taken effect. This
        paint is undesirable because it won't include any component shadow DOM.
        To prevent layout shifts that can result from this render, we use a
        "dsd-pending" attribute to ensure we only paint after we know
        shadow DOM is active. -->
    <style>
      body[dsd-pending] {
        display: none;
      }
    </style>
  </head>

  <body dsd-pending>
    <script>
      if (HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // This browser has native declarative shadow DOM support, so we can
        // allow painting immediately.
        document.body.removeAttribute('dsd-pending');
      }
    </script>

    <!-- App components rendered with declarative shadow DOM placed here. -->

    <!-- Use a type=module script so that we can use dynamic module imports.
        Note this pattern will not work in IE11. -->
    <script type="module">
      // Check if we require the template shadow root polyfill.
      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // Fetch the template shadow root polyfill.
        const {hydrateShadowRoots} = await import(
          '/node_modules/@webcomponents/template-shadowroot/template-shadowroot.js'
        );

        // Apply the polyfill. This is a one-shot operation, so it is important
        // it happens after all HTML has been parsed.
        hydrateShadowRoots(document.body);

        // At this point, browsers without native declarative shadow DOM
        // support can paint the initial state of your components!
        document.body.removeAttribute('dsd-pending');
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Template Shadowroot Polyfill Implementation
DESCRIPTION: Complete HTML template showing implementation of the template-shadowroot polyfill with handling for browsers with and without native declarative shadow DOM support.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <!-- On browsers that don't yet support native declarative shadow DOM, a
        paint can occur after some or all pre-rendered HTML has been parsed,
        but before the declarative shadow DOM polyfill has taken effect. This
        paint is undesirable because it won't include any component shadow DOM.
        To prevent layout shifts that can result from this render, we use a
        "dsd-pending" attribute to ensure we only paint after we know
        shadow DOM is active. -->
    <style>
      body[dsd-pending] {
        display: none;
      }
    </style>
  </head>

  <body dsd-pending>
    <script>
      if (HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // This browser has native declarative shadow DOM support, so we can
        // allow painting immediately.
        document.body.removeAttribute('dsd-pending');
      }
    </script>

    <!-- App components rendered with declarative shadow DOM placed here. -->

    <!-- Use a type=module script so that we can use dynamic module imports.
        Note this pattern will not work in IE11. -->
    <script type="module">
      // Check if we require the template shadow root polyfill.
      if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
        // Fetch the template shadow root polyfill.
        const {hydrateShadowRoots} = await import(
          '/node_modules/@webcomponents/template-shadowroot/template-shadowroot.js'
        );

        // Apply the polyfill. This is a one-shot operation, so it is important
        // it happens after all HTML has been parsed.
        hydrateShadowRoots(document.body);

        // At this point, browsers without native declarative shadow DOM
        // support can paint the initial state of your components!
        document.body.removeAttribute('dsd-pending');
      }
    </script>
  </body>
</html>

----------------------------------------

TITLE: Defining Lit Component Class
DESCRIPTION: Example of defining a Lit component class with TypeScript decorators and JavaScript class syntax.

LANGUAGE: typescript
CODE:
@customElement('my-element')\nexport class MyElement extends LitElement { /* ... */ }

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement { /* ... */ }\n\ncustomElements.define('my-element', MyElement);

----------------------------------------

TITLE: Installing Lit Signals Package
DESCRIPTION: Command to install the @lit-labs/signals package via npm.

LANGUAGE: sh
CODE:
npm i @lit-labs/signals

----------------------------------------

TITLE: Implementing Date Converter in Lit Component (TypeScript)
DESCRIPTION: This snippet shows how to import and use a custom date converter in a Lit component using TypeScript. It demonstrates setting up a reactive property with the converter and reflection enabled.

LANGUAGE: typescript
CODE:
import {dateConverter} from './date-converter.js';

export class DateDisplay extends LitElement {
  ...

  @property({converter: dateConverter(navigator.language), reflect: true})
  date = new Date();
  ...

----------------------------------------

TITLE: Defining Lit Component Properties in JavaScript
DESCRIPTION: JavaScript example of defining reactive properties in a Lit component.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement {
  // ...
  static properties = {
    name: {type: String}
  };

  constructor() {
    super();
    this.name = 'World';
  }
  // ...
}

----------------------------------------

TITLE: Using Properties and Expressions in LitElement Templates
DESCRIPTION: Demonstrates how to use properties, loops, and conditionals in LitElement templates.

LANGUAGE: JavaScript
CODE:
html`<ul>
  ${this.myArray.map(i => html`<li>${i}</li>`)}
</ul>`;

html`
  ${this.myBool?
    html`<p>Render some HTML if myBool is true</p>`:
    html`<p>Render some other HTML if myBool is false</p>`}
`;

----------------------------------------

TITLE: Installing Lit Context Package
DESCRIPTION: Command to install the @lit/context package via npm

LANGUAGE: bash
CODE:
npm i @lit/context

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the local development server for testing the Lit component.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Installing Lit Context Package
DESCRIPTION: Command to install the @lit/context package via npm

LANGUAGE: bash
CODE:
npm i @lit/context

----------------------------------------

TITLE: Implementing Date Converter in Lit Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to import and use a custom date converter in a Lit component using JavaScript. It shows the setup of static properties with the converter and reflection enabled.

LANGUAGE: javascript
CODE:
import {dateConverter} from './date-converter.js';

export class DateDisplay extends LitElement {
  static properties = {
    date: {converter: dateConverter(navigator.language), reflect: true},
    dateStr: {type: String, attribute: 'date-str'},
  };
  ...

----------------------------------------

TITLE: Installing @lit-labs/signals Package via npm
DESCRIPTION: This command installs the @lit-labs/signals package using npm, allowing developers to start using signals with Lit in their projects.

LANGUAGE: shell
CODE:
npm i @lit-labs/signals

----------------------------------------

TITLE: Adding Event Listener in Lit Component Constructor
DESCRIPTION: Shows how to add an event listener in the constructor of a Lit component, which is useful for listening to events that might occur before the component is added to the DOM.

LANGUAGE: javascript
CODE:
constructor() {
  super();
  this.addEventListener('focus', this._handleFocus);
}

----------------------------------------

TITLE: Updating API Docs for Lit.dev
DESCRIPTION: Commands to update and watch for changes in the generated API documentation.

LANGUAGE: sh
CODE:
cd packages/lit-dev-api
npm run build:watch

----------------------------------------

TITLE: Loading Lit Element Hydration Support
DESCRIPTION: Shows how to include the Lit Element hydration support script before loading component definitions, enabling automatic hydration of server-rendered components.

LANGUAGE: html
CODE:
  <body>
    <!-- App components rendered with declarative shadow DOM placed here. -->

    <!-- ssr-client lit-element-hydrate-support should be loaded first. -->
    <script type="module" src="/node_modules/@lit-labs/ssr-client/lit-element-hydrate-support.js"></script>

    <!-- As component definition loads, your pre-rendered components will
        come to life and become interactive. -->
    <script src="/app-components.js"></script>
  </body>

----------------------------------------

TITLE: Installing Lit Starter Kit Dependencies
DESCRIPTION: Command to install required npm dependencies after downloading the starter project.

LANGUAGE: bash
CODE:
cd <project folder>\nnpm i

----------------------------------------

TITLE: Configuring Eleventy Navigation Section for Managing Data
DESCRIPTION: YAML frontmatter configuration that defines a navigation section titled 'Managing Data' with ordering metadata. The HTML comment indicates this file's temporary nature in the build process.

LANGUAGE: yaml
CODE:
---
title: Managing Data
eleventyNavigation:
  key: Managing Data
  order: 5
---

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Creating HTML Templates with lit-html in JavaScript
DESCRIPTION: Demonstrates how to create and render an HTML template using lit-html. The example shows template creation, initial rendering, and re-rendering with updated data.

LANGUAGE: javascript
CODE:
const myTemplate = (name) => html`
  <div>
    Hi, my name is ${name}.
  </div>
`;

LANGUAGE: javascript
CODE:
render(myTemplate('Ada'), document.body);

LANGUAGE: javascript
CODE:
render(myTemplate('Grace'), document.body);

----------------------------------------

TITLE: Removing Event Listener in disconnectedCallback
DESCRIPTION: Shows how to remove a global event listener when the component is disconnected from the DOM.

LANGUAGE: javascript
CODE:
disconnectedCallback() {
  super.disconnectedCallback()
  window.removeEventListener('keydown', this._handleKeydown);
}

----------------------------------------

TITLE: Bundling Hydration Support
DESCRIPTION: Example of importing hydration support in a bundled application, ensuring it loads before component definitions.

LANGUAGE: javascript
CODE:
// index.js
import '@lit-labs/ssr-client/lit-element-hydrate-support.js';
import './app-components.js';

----------------------------------------

TITLE: Configuring Rollup for Lit Development Build
DESCRIPTION: Example of how to configure Rollup with the @rollup/node-resolve plugin to use the development build of Lit packages.

LANGUAGE: javascript
CODE:
import { nodeResolve } from '@rollup/plugin-node-resolve';

export default {
  // ...
  plugins: [nodeResolve({
    exportConditions: ['development']
  })]
};

----------------------------------------

TITLE: Legacy Directive Implementation
DESCRIPTION: Example of a directive implementation using the old functional-based API from lit-html 1.x.

LANGUAGE: javascript
CODE:
import {html, directive, Part, NodePart} from 'lit-html';

const previousState: WeakMap<Part, number> = new WeakMap();

export const renderCounter = directive((initialValue: number) => (part: Part) => {
  if (!(part instanceof NodePart)) {
    throw new Error('renderCounter only supports NodePart');
  }
  let value = previousState.get(part);
  if (value === undefined) {
    value = initialValue;
  } else {
    value++;
  }
  previousState.set(part, value);
  part.setValue(html`<p>${value}</p>`);
});

----------------------------------------

TITLE: Using animate() Directive with Lit 2 Templates
DESCRIPTION: Demonstrates how to use the experimental animate() directive from @lit-labs/motion package to animate list items when the list reorders.

LANGUAGE: javascript
CODE:
html`
  ${repeat(items,
    (item) => item.id,
    (item) => html`<div ${animate()}>${item}</div>`)}
`

----------------------------------------

TITLE: Slotted Content Styling
DESCRIPTION: Demonstrates styling slotted children elements using the ::slotted pseudo-element.

LANGUAGE: TypeScript
CODE:
static styles = css`
  ::slotted(*) {
    border: 1px solid black;
  }
  ::slotted(p) {
    color: blue;
  }`;

----------------------------------------

TITLE: Package Configuration for ES Modules in lit-html
DESCRIPTION: Package.json configuration demonstrating the use of the type field to indicate ES module format, while maintaining backward compatibility with the module field

LANGUAGE: json
CODE:
{
  "type": "module",
  "module": "true"
}

----------------------------------------

TITLE: SSR in Global Scope with Koa
DESCRIPTION: Demonstrates how to perform server-side rendering in the global scope using Koa as the web server. This approach uses a shared customElements registry across render requests.

LANGUAGE: javascript
CODE:
import {render} from '@lit-labs/ssr';
import {RenderResultReadable} from '@lit-labs/ssr/lib/render-result-readable.js';
import {myTemplate} from './my-template.js';

// ...

// within a Koa middleware, for example
app.use(async (ctx) => {
  const ssrResult = render(myTemplate(data));
  ctx.type = 'text/html';
  ctx.body = new RenderResultReadable(ssrResult);
});

----------------------------------------

TITLE: Installing Babel packages for Webpack 4 compatibility
DESCRIPTION: Installs necessary Babel packages to transpile Lit 3 code for compatibility with Webpack 4, which doesn't support some ES2021 syntax.

LANGUAGE: shell
CODE:
> npm i -D babel-loader@8 \
    @babel/plugin-transform-optional-chaining \
    @babel/plugin-transform-nullish-coalescing-operator \
    @babel/plugin-transform-logical-assignment-operators

----------------------------------------

TITLE: Using range() Directive for Repeated Elements
DESCRIPTION: Shows how to use the range() directive for creating repeated elements a specific number of times.

LANGUAGE: typescript
CODE:
render() {
  return html`
    ${map(range(8), () => html`<div class="cell"></div>`)}
  `;
}

----------------------------------------

TITLE: Style Inheritance from Superclass
DESCRIPTION: Demonstrates how to inherit styles from a parent class while adding additional styles in a child component.

LANGUAGE: TypeScript
CODE:
static styles = [
  MyElement.styles,
  css`
    :host {
      display: block;
      border: 1px solid black;
    }`
];

----------------------------------------

TITLE: Handling Input Events with State Management
DESCRIPTION: Shows the recommended pattern for handling user input with proper state management, ensuring synchronization between application state and DOM state.

LANGUAGE: typescript
CODE:
let text = '';
const onInput = (e) => {
  text = e.target.value;
  go();
};

const go = () => {
  render(html`<input .value=${text} @input=${onInput}>`, document.body);
}
go();

----------------------------------------

TITLE: Using Lit's Server Environment Detection
DESCRIPTION: Shows how to use Lit's isServer utility to conditionally execute code based on the runtime environment.

LANGUAGE: javascript
CODE:
import {isServer} from 'lit';

if (isServer) {
  // only runs in server environments like Node
} else {
  // runs in the browser
}

----------------------------------------

TITLE: Placeholder HTML Comment for Releases Section in Lit Documentation
DESCRIPTION: This HTML comment explains the purpose of the file, which is to create a section heading. It notes that the file's output is deleted by the Eleventy build process.

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Using LitElement Component in HTML
DESCRIPTION: Example of using a LitElement component in an HTML file.

LANGUAGE: html
CODE:
<my-element></my-element>

----------------------------------------

TITLE: Browser-ready Module Import for lit-html
DESCRIPTION: Illustrates the browser-ready module import syntax for lit-html, using a full path to the module file. This is the format that browsers can directly understand and use.

LANGUAGE: javascript
CODE:
import {html, render} from '../node_modules/lit-html/lit-html.js';

----------------------------------------

TITLE: Full IDE Playground Configuration
DESCRIPTION: Template for embedding a full interactive IDE playground environment using Liquid template syntax.

LANGUAGE: liquid
CODE:
{% playground-ide "v2-docs/templates/define" %}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Resources Section
DESCRIPTION: YAML front matter configuration that defines navigation properties for a Resources section heading. Sets the navigation key and order for the section in Eleventy.

LANGUAGE: yaml
CODE:
---
title: Resources
eleventyNavigation:
  key: Resources
  order: 13
---

----------------------------------------

TITLE: Configuring Eleventy Navigation for Releases Section in Lit Documentation
DESCRIPTION: This snippet defines the frontmatter for the Releases section in Lit's documentation. It sets the title and configures the Eleventy navigation, specifying the key and order for the section.

LANGUAGE: yaml
CODE:
---
title: Releases
eleventyNavigation:
  key: Releases
  order: 11
---

----------------------------------------

TITLE: Defining a Reusable lit-html Template Function in JavaScript
DESCRIPTION: Shows how to create a reusable template function that takes data as an argument. This pattern allows for efficient updates when data changes, returning a TemplateResult.

LANGUAGE: javascript
CODE:
let myTemplate = (data) => html`
  <h1>${data.title}</h1>
  <p>${data.body}</p>`;

----------------------------------------

TITLE: Using Tagged Template Literals in lit-html
DESCRIPTION: Demonstrates the usage of tagged template literals, where a function (tag) is called with the template literal as its argument. This is how lit-html processes templates.

LANGUAGE: javascript
CODE:
let name = 'Monica';
tag`My name is ${name}.`

----------------------------------------

TITLE: TypeScript Event Handling Configuration
DESCRIPTION: Shows how to properly type event handlers when creating React wrappers using TypeScript.

LANGUAGE: typescript
CODE:
import React from 'react';
import {createComponent} from '@lit-labs/react';
import {MyElement, type EventName} from './my-element.js';

export const MyElementComponent = createComponent({
  tagName: 'my-element',
  elementClass: MyElement,
  react: React,
  events: {
    'onmy-event': 'my-event' as EventName<MyEvent>,
  },
});

----------------------------------------

TITLE: Configuring Pre-Loading of Locale Modules in JavaScript
DESCRIPTION: This snippet demonstrates how to pre-load all locale modules when the page loads, using dynamic imports to ensure that the remaining script on the page is not blocked while the locale modules are being fetched.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
import {sourceLocale, targetLocales} from './generated/locale-codes.js';

const localizedTemplates = new Map(
  targetLocales.map((locale) => [locale, import(`/locales/${locale}.js`)])
);

const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: async (locale) => localizedTemplates.get(locale),
});

----------------------------------------

TITLE: Installing Lit Localize
DESCRIPTION: Commands to install the @lit/localize client library and @lit/localize-tools CLI.

LANGUAGE: shell
CODE:
npm i @lit/localize
npm i -D @lit/localize-tools

----------------------------------------

TITLE: Cleaning Generated Files in TypeScript Lit Project
DESCRIPTION: Command to remove generated files when renaming a TypeScript Lit component.

LANGUAGE: bash
CODE:
npm run clean

----------------------------------------

TITLE: Attribute and Text Content Bindings in lit-html
DESCRIPTION: Illustrates the correct usage of bindings in attribute values and text content positions.

LANGUAGE: html
CODE:
<!-- attribute value -->
<div label="${label}"></div>

<!-- text content -->
<div>${textContent}</div>

----------------------------------------

TITLE: Importing LitElement Component in JavaScript Module
DESCRIPTION: Example of importing a LitElement component in a JavaScript module.

LANGUAGE: javascript
CODE:
import 'some-package-name';

----------------------------------------

TITLE: Generating Locale Codes Module in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a generated locale codes module in Lit Localize, which exports the source locale, target locales, and all locales as variables.

LANGUAGE: javascript
CODE:
export const sourceLocale = 'en';
export const targetLocales = ['es-419', 'zh-Hans'];
export const allLocales = ['en', 'es-419', 'zh-Hans'];

----------------------------------------

TITLE: Implementing Code Checking in JavaScript
DESCRIPTION: Shows how to set up code checking for a tutorial step using the installCodeChecker function and custom validation logic.

LANGUAGE: javascript
CODE:
import {installCodeChecker} from './_check-code-helpers.js';

installCodeChecker(async () => {
  let passed = true;
  let message = '';

  const element = document.body.querySelector('my-element');
  const nameAttribute = element.getAttribute('name');

  if (element.name === undefined) {
    passed = false;
    message = `Define the 'name' property on the element.`;
  } else if (element.name !== nameAttribute) {
    passed = false;
    message = `The element's name property is not a reactive property.`;
  }

  return {passed, message};
});

----------------------------------------

TITLE: Using live Directive with Input Elements
DESCRIPTION: Demonstrates how to use the live directive to handle input element value binding when DOM state changes from user input. The live directive ensures updates occur even when the DOM value has changed.

LANGUAGE: javascript
CODE:
html`<input .value=${live(x)}>`

----------------------------------------

TITLE: Using Bindings in lit-html Templates
DESCRIPTION: Shows how to use bindings or expressions in lit-html templates using standard JavaScript template literal syntax.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Loading WebComponents Polyfills in HTML
DESCRIPTION: HTML structure for loading WebComponents polyfills and ensuring compatibility across browsers.

LANGUAGE: html
CODE:
<head>
  <!--
    If you are loading es5 code you will need
    custom-elements-es5-loader to make the element work in
    es6-capable browsers.

    If you are not loading es5 code, you don't need
    custom-elements-es5-loader.
  -->
  <!--
  <script src="./path-to/custom-elements-es5-loader.js"></script>
  -->

  <!-- Load polyfills -->
  <script
    src="path-to/webcomponents-loader.js"
    defer>
  </script>

  <!-- Load component when polyfills are definitely ready -->
  <script type="module">
    // Take care of cases in which the browser runs this
    // script before it has finished running
    // webcomponents-loader.js (e.g. Firefox script execution order)
    window.WebComponents = window.WebComponents || {
      waitFor(cb){ addEventListener('WebComponentsReady', cb) }
    }

    WebComponents.waitFor(async () => {
      import('./path-to/some-element.js');
    });
  </script>
</head>
<body>
  <!-- Add the element to the page -->
  <some-element></some-element>
</body>

----------------------------------------

TITLE: Lit Localize Config File Structure
DESCRIPTION: Example structure of the Lit localize configuration file, including general settings, output modes, and interchange format options.

LANGUAGE: json
CODE:
{
  "sourceLocale": "string",
  "targetLocales": ["string"],
  "inputFiles": ["string"],
  "tsConfig": "string",
  "output": {
    "mode": "transform" | "runtime",
    "localeCodesModule": "string",
    "outputDir": "string",
    "language": "js" | "ts"
  },
  "interchange": {
    "format": "xliff" | "xlb",
    "xliffDir": "string",
    "placeholderStyle": "x" | "ph",
    "outputFile": "string",
    "translationsGlob": "string"
  }
}

----------------------------------------

TITLE: Defining Styles in Lit
DESCRIPTION: Shows how to define styles for a Lit component using the css tag function.

LANGUAGE: javascript
CODE:
import {LitElement, css, html} from 'lit';
  ...

  static styles = css`.fancy { color: blue; }`;

----------------------------------------

TITLE: Loading Polyfill Support
DESCRIPTION: HTML code showing how to load the web components polyfills with Lit's polyfill support file.

LANGUAGE: html
CODE:
<script src="node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js">
<script src="node_modules/lit/polyfill-support.js">

----------------------------------------

TITLE: Caching Template Results with lit-html
DESCRIPTION: Demonstrates the use of the cache directive in lit-html for optimizing performance when switching between large, complicated templates by caching the generated DOM.

LANGUAGE: javascript
CODE:
import {html} from 'lit-html';
import {cache} from 'lit-html/directives/cache.js';

const detailView = (data) => html`<div>...</div>`;
const summaryView = (data) => html`<div>...</div>`;

html`${cache(data.showDetails
  ? detailView(data)
  : summaryView(data)
)}`

----------------------------------------

TITLE: Rendering Lists with lit-html
DESCRIPTION: Demonstrates different methods for rendering lists in lit-html, including using Array.map, looping statements, and the repeat directive for efficient list updates.

LANGUAGE: javascript
CODE:
html`
  <ul>
    ${items.map((item) => html`<li>${item}</li>`)}
  </ul>
`;

const itemTemplates = [];
for (const i of items) {
  itemTemplates.push(html`<li>${i}</li>`);
}

html`
  <ul>
    ${itemTemplates}
  </ul>
`;

import {html} from 'lit-html';
import {repeat} from 'lit-html/directives/repeat.js';

const employeeList = (employees) => html`
  <ul>
    ${repeat(employees, (employee) => employee.id, (employee, index) => html`
      <li>${index}: ${employee.familyName}, ${employee.givenName}</li>
    `)}
  </ul>
`;

----------------------------------------

TITLE: Package Documentation Table Structure in HTML
DESCRIPTION: HTML table structure for displaying Lit Labs packages with their descriptions and relevant links for documentation, feedback and issues.

LANGUAGE: html
CODE:
<table class="directory">
<thead><tr><th>Package</th><th>Description</th><th>Links</th></tr></thead>
<tbody>
<tr class="subheading"><td colspan=3>Near graduation</td></tr>
</tbody>
</table>

----------------------------------------

TITLE: Configuring Eleventy Navigation for Articles Section in YAML
DESCRIPTION: This YAML frontmatter snippet configures navigation properties for an 'Articles' section in an Eleventy-based website. It sets tags for article navigation and defines the navigation key and order.

LANGUAGE: yaml
CODE:
---
tags:
  - articles-nav
eleventyNavigation:
  key: Articles
  order: 1
---

----------------------------------------

TITLE: Lit Localization CLI Command Usage
DESCRIPTION: Basic command syntax for the lit-localize CLI tool. Used to execute localization commands with optional flags.

LANGUAGE: sh
CODE:
lit-localize command [--flags]

----------------------------------------

TITLE: Rendering Nothing with lit-html
DESCRIPTION: Explains how to render nothing in lit-html templates using the nothing value, and discusses its importance in specific scenarios like working with slots in shadow DOM.

LANGUAGE: javascript
CODE:
import {html, nothing} from 'lit-html';
${user.isAdmin
      ? html`<button>DELETE</button>`
      : nothing
  }

html`
<example-element>${user.isAdmin
        ? html`<button>DELETE</button>`
        : nothing
      }</example-element>
`;

----------------------------------------

TITLE: Installing lit-html via npm
DESCRIPTION: Commands to install lit-html package using npm package manager

LANGUAGE: bash
CODE:
npm install lit-html

----------------------------------------

TITLE: Styling Labs Table Links in HTML
DESCRIPTION: CSS styling for the labs package documentation table links, setting font size and line height for better readability.

LANGUAGE: html
CODE:
<style>
  .labs-table-links {
    font-size: 0.9em;
    line-height: 1.5;
  }
</style>

----------------------------------------

TITLE: HTML Comment for Build Process Note
DESCRIPTION: Provides a developer note explaining that this file exists solely to create a section heading and its output is removed during the Eleventy build process.

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Using Lit Localize CLI
DESCRIPTION: Basic usage of the Lit localize CLI command with optional flags.

LANGUAGE: sh
CODE:
lit-localize command [--flags]

----------------------------------------

TITLE: Defining LitElement Component in TypeScript
DESCRIPTION: Example of defining and registering a LitElement component in TypeScript using decorators.

LANGUAGE: typescript
CODE:
@customElement('my-element')
export class MyElement extends LitElement { ... }

----------------------------------------

TITLE: Asynchronous Promise Resolution Directive
DESCRIPTION: Implements an asynchronous directive that handles promise resolution and updates the DOM.

LANGUAGE: javascript
CODE:
const resolvePromise = directive((promise) => (part) => {
  // This first setValue call is synchronous, so
  // doesn't need the commit
  part.setValue("Waiting for promise to resolve.");

  Promise.resolve(promise).then((resolvedValue) => {
    part.setValue(resolvedValue);
    part.commit();
  });
});

----------------------------------------

TITLE: Rollup Babel Configuration for Node Modules
DESCRIPTION: Configuration examples for compiling Lit and its dependencies using Rollup's Babel plugin.

LANGUAGE: javascript
CODE:
exclude: [ 'node_modules/**' ]

LANGUAGE: javascript
CODE:
include: [
  'src/**',
  'node_modules/lit/**',
  'node_modules/lit-element/**',
  'node_modules/lit-html/**'
]

----------------------------------------

TITLE: Rendering Basic Component Template in Lit
DESCRIPTION: Demonstrates how to compose a basic component template with slots and custom elements in Lit.

LANGUAGE: javascript
CODE:
render() {
  return html`
    <top-bar>
      <icon-button icon="menu" slot="nav-button"></icon-button>
      <span slot="title">Fuzzy</span>
    </top-bar>
    `;
}

----------------------------------------

TITLE: Creating a React Wrapper Component with TypeScript Event Typing
DESCRIPTION: Demonstrates how to use TypeScript to provide accurate event types for the React wrapper component's event callbacks.

LANGUAGE: typescript
CODE:
import React from 'react';
import {createComponent, type EventName} from '@lit/react';
import {MyElement, MyEvent} from './my-element.js';

export const MyElementComponent = createComponent({
  tagName: 'my-element',
  elementClass: MyElement,
  react: React,
  events: {
    'onmy-event': 'my-event' as EventName<MyEvent>,
  },
});

----------------------------------------

TITLE: Using Lit via CDN Bundle
DESCRIPTION: Example of importing Lit from a CDN bundle using a browser module import.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'https://cdn.jsdelivr.net/gh/lit/dist@2/core/lit-core.min.js';

----------------------------------------

TITLE: Custom Property Accessor
DESCRIPTION: Example of implementing custom getter/setter for a LitElement property.

LANGUAGE: JavaScript
CODE:
private _myProp: string = '';

@property({ type: String })
get myProp(): string {
  return this._myProp;
}
set myProp(value: string) {
  const oldValue = this._myProp;
  this._myProp = value;
  this.requestUpdate('myProp', oldValue);
}

----------------------------------------

TITLE: Defining LitElement Component in JavaScript
DESCRIPTION: Example of defining and registering a LitElement component in JavaScript.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement { ... }

customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Static Importing of Locale Modules (JavaScript)
DESCRIPTION: Example of using static imports to pre-load all locale modules in Lit's runtime localization mode. This approach is not recommended for most applications due to potential performance impacts.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
import {sourceLocale, targetLocales} from './generated/locales.js';

import * as templates_es_419 from './locales/es-419.js';
import * as templates_zh_hans from './locales/zh-Hans.js';
...

const localizedTemplates = new Map([
  ['es-419', templates_es_419],
  ['zh-Hans', templates_zh_hans],
  ...
]);

const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: async (locale) => localizedTemplates.get(locale),
});

----------------------------------------

TITLE: Async Update Complete Handler
DESCRIPTION: Shows how to work with async/await and the updateComplete Promise

LANGUAGE: javascript
CODE:
async myFunc(data) {
  // Set a property, triggering an update
  this.myProp = data;

  // Wait for the updateComplete promise to resolve
  await this.updateComplete;
  // ...do stuff...
  return 'done';
}

----------------------------------------

TITLE: Overriding getUpdateComplete Method
DESCRIPTION: Example of overriding the getUpdateComplete method to await additional conditions.

LANGUAGE: javascript
CODE:
class MyElement extends LitElement {
  async getUpdateComplete() {
    const result = await super.getUpdateComplete();
    await this._myChild.updateComplete;
    return result;
  }
}

----------------------------------------

TITLE: Defining LitElement Component in JavaScript
DESCRIPTION: Example of defining and registering a LitElement component in JavaScript.

LANGUAGE: javascript
CODE:
export class MyElement extends LitElement { ... }

customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Enabling Decorators in TypeScript
DESCRIPTION: Shows how to enable decorator support in TypeScript by setting the experimentalDecorators compiler option to true in the TypeScript configuration.

LANGUAGE: json
CODE:
"experimentalDecorators": true,

----------------------------------------

TITLE: Necessary HTML in Localized Templates
DESCRIPTION: Shows appropriate use of HTML within localized templates when markup is required within a phrase

LANGUAGE: javascript
CODE:
render() {
  return msg(html`Lift off in <b>T-${this.countdown}</b> seconds`);
}

----------------------------------------

TITLE: Removing Event Listener in disconnectedCallback
DESCRIPTION: Example of removing an event listener from the window in the disconnectedCallback method.

LANGUAGE: javascript
CODE:
disconnectedCallback() {
  super.disconnectedCallback()
  window.removeEventListener('keydown', this._handleKeydown);
}

----------------------------------------

TITLE: Defining a DOM Template in Lit
DESCRIPTION: Shows how to define a template for a Lit component using the html tag function.

LANGUAGE: javascript
CODE:
import {LitElement, html} from 'lit';

export class MyElement extends LitElement {
  render() {
    return html`<b>Hello</b>`;
  }
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Enabling Decorators in Babel
DESCRIPTION: Demonstrates how to enable decorator support in Babel by adding the necessary plugins to the Babel configuration. This includes the class properties and decorators plugins.

LANGUAGE: javascript
CODE:
plugins = [
  '@babel/plugin-proposal-class-properties',
  ['@babel/plugin-proposal-decorators', {decoratorsBeforeExport: true}],
];

----------------------------------------

TITLE: Avoiding Unnecessary HTML in Localization
DESCRIPTION: Examples showing how to avoid including unnecessary HTML markup in localized content

LANGUAGE: javascript
CODE:
render() {
  // Don't do this! There's no reason to include the <button> tag in this
  // localized template.
  return msg(html`<button>Launch rocket</button>`);
}

LANGUAGE: javascript
CODE:
render() {
  // Much better! Now the phrase "Launch rocket" can be translated more easily
  // in isolation.
  return html`<button>${msg('Launch rocket')}</button>`;
}

----------------------------------------

TITLE: Implementing updated Method
DESCRIPTION: Example of implementing the updated method to perform work after an update.

LANGUAGE: typescript
CODE:
updated(changedProperties: Map<string, any>) {
  if (changedProperties.has('collapsed')) {
    this._measureDOM();
  }
}

LANGUAGE: javascript
CODE:
updated(changedProperties) {
  if (changedProperties.has('collapsed')) {
    this._measureDOM();
  }
}

----------------------------------------

TITLE: Repeating Templates in Lit
DESCRIPTION: Demonstrates how to render repeated content in a Lit template using the map directive.

LANGUAGE: javascript
CODE:
import {map} from 'lit/directives/map.js';
...
  render() {
    return html`
      <ul>
        ${map(this.items, (item) =>
          html`<li>${item.name}</li>`)
        }
      </ul>
    `;
  }

----------------------------------------

TITLE: Refactoring RatingElement Class in JavaScript
DESCRIPTION: This snippet shows the refactored RatingElement class in JavaScript. It simplifies the component by removing unnecessary methods and callbacks.

LANGUAGE: javascript
CODE:
export class RatingElement extends HTMLElement {
  _rating = 0;
  _vote = null;

  connectedCallback() {
    this.attachShadow({mode: 'open'});
    this.render();
  }

  // remove disonnectedCallback and _onUpClick and _onDownClick
  ...
}

----------------------------------------

TITLE: Defining a Lit Component in TypeScript
DESCRIPTION: Shows how to define a Lit component using TypeScript and the @customElement decorator.

LANGUAGE: typescript
CODE:
import {LitElement} from 'lit';
import {customElement} from 'lit/decorators.js';

@customElement('my-element')
export class MyElement extends LitElement { /* ... */  }

----------------------------------------

TITLE: Basic lit-html Rendering Example
DESCRIPTION: Complete example showing how to create and render a simple lit-html template

LANGUAGE: js
CODE:
import {html, render} from 'lit-html';

const name = 'world';
const sayHi = html`<h1>Hello ${name}</h1>`;
render(sayHi, document.body);

----------------------------------------

TITLE: Using updateComplete Promise
DESCRIPTION: Example of using the updateComplete promise to wait for an update to complete before dispatching an event.

LANGUAGE: javascript
CODE:
async _loginClickHandler() {
  this.loggedIn = true;
  // Wait for `loggedIn` state to be rendered to the DOM
  await this.updateComplete;
  this.dispatchEvent(new Event('login'));
}

----------------------------------------

TITLE: Defining Properties in Lit
DESCRIPTION: Shows how to define reactive properties in a Lit component.

LANGUAGE: javascript
CODE:
static properties = {
  user: {},
  count: {
    type: Number
  }
}

----------------------------------------

TITLE: Implementing Vote Property in JavaScript
DESCRIPTION: JavaScript implementation of the vote property getter/setter with logic to update ratings based on vote changes.

LANGUAGE: javascript
CODE:
export class RatingElement extends HTMLElement {
  _vote = null;

  ...

  set vote(newValue) {
    const oldValue = this._vote;
    if (newValue === oldValue) {
      return;
    }

    if (newValue === 'up') {
      if (oldValue === 'down') {
        this.rating += 2;
      } else {
        this.rating += 1;
      }
    } else if (newValue === 'down') {
      if (oldValue === 'up') {
        this.rating -= 2;
      } else {
        this.rating -= 1;
      }
    }

    this._vote = newValue;
    this.setAttribute('vote', newValue);
  }

  get vote() {
    return this._vote;
  }
}

----------------------------------------

TITLE: Configuring Eleventy Navigation for Articles Feed in YAML
DESCRIPTION: This YAML front matter configures an articles feed page in an Eleventy project. It sets the layout, title, tags for navigation, and Eleventy navigation properties including the key and order.

LANGUAGE: yaml
CODE:
---
layout: 'articles-feed'
title: Articles
tags:
  - articles-nav
eleventyNavigation:
  key: Tags
  order: 0
---

----------------------------------------

TITLE: Installing WebComponents Polyfills
DESCRIPTION: Command to install WebComponents polyfills for browser compatibility.

LANGUAGE: bash
CODE:
npm install --save-dev @webcomponents/webcomponentsjs

----------------------------------------

TITLE: Using addInitializer Static Method
DESCRIPTION: Example of using the addInitializer static method in a decorator to run code when instances are constructed.

LANGUAGE: typescript
CODE:
const myDecorator = (proto: ReactiveElement, key: string) => {
  const ctor = proto.constructor as typeof ReactiveElement;

  ctor.addInitializer((instance: ReactiveElement) => {
    // This is run during construction of the element
    new MyController(instance);
  });
};

LANGUAGE: javascript
CODE:
const myDecorator = (descriptor) => {
  ...descriptor,
  finisher(ctor) {
    ctor.addInitializer((instance) => {
      // This is run during construction of the element
      new MyController(instance);
    });
  },
};

----------------------------------------

TITLE: Frontmatter Configuration for Community Page
DESCRIPTION: YAML frontmatter configuration for the community page, defining navigation structure and version links

LANGUAGE: yaml
CODE:
---
title: Community
eleventyNavigation:
  key: Community
  parent: Resources
  order: 1
versionLinks:
  v2: resources/community/
  v3: resources/community/
---

----------------------------------------

TITLE: Implementing Shadow DOM in JavaScript Web Component
DESCRIPTION: This JavaScript code demonstrates how to attach a shadow root to a web component in the connectedCallback. It encapsulates styles and HTML structure within the shadow DOM.

LANGUAGE: javascript
CODE:
connectedCallback() {
  const shadowRoot = this.attachShadow({mode: 'open'});

  // Note the new CSS Selectors
  shadowRoot.innerHTML = `
    <style>
      :host {
        display: inline-flex;
        align-items: center;
      }
      button {
        background: transparent;
        border: none;
        cursor: pointer;
      }
    </style>
    <button class="thumb_down" >
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>
    </button>
    <span class="rating">${this.rating}</span>
    <button class="thumb_up">
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>
    </button>
  `;
}

----------------------------------------

TITLE: Configuring Rollup for LitElement Production Build
DESCRIPTION: Rollup configuration for building LitElement components for production, resolving dependencies and converting module specifiers.

LANGUAGE: javascript
CODE:
import resolve from 'rollup-plugin-node-resolve';

export default {
  // If using any exports from a symlinked project, uncomment the following:
  // preserveSymlinks: true,
	input: ['src/index.js'],
	output: {
		file: 'build/index.js',
		format: 'es',
		sourcemap: true
	},
	plugins: [
    resolve()
  ]
};

----------------------------------------

TITLE: TypeScript Decorator Configuration
DESCRIPTION: JSON configuration for enabling decorators in TypeScript.

LANGUAGE: json
CODE:
{
  "experimentalDecorators": true,
  "useDefineForClassFields": false
}

----------------------------------------

TITLE: Equivalent Code Without @customElement Decorator
DESCRIPTION: Shows the equivalent code for defining a custom element without using the @customElement decorator. This demonstrates what the decorator is doing behind the scenes.

LANGUAGE: javascript
CODE:
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Populating List Items Conditionally in Lit Component
DESCRIPTION: This snippet demonstrates how to populate an array of list items conditionally based on component state. It iterates over friends and pets arrays, adding list items to the array if certain conditions are met.

LANGUAGE: typescript
CODE:
// my-element.ts
  render() {
    const listItems: TemplateResult[] = [];
    this.friends.forEach((friend) => {
      listItems.push(html`<li>${friend}</li>`);
    });
    if (this.includePets) {
      this.pets.forEach((pet) => {
        listItems.push(html`<li>${pet.name} (${pet.species})</li>`);
      });
    }
    ⋮
  }

LANGUAGE: javascript
CODE:
// my-element.js
  render() {
    const listItems = [];
    this.friends.forEach((friend) => {
      listItems.push(html`<li>${friend}</li>`);
    });
    if (this.includePets) {
      this.pets.forEach((pet) => {
        listItems.push(html`<li>${pet.name} (${pet.species})</li>`);
      });
    }
    ⋮
  }

----------------------------------------

TITLE: Configuring Transform Localization in Lit
DESCRIPTION: This code snippet shows how to configure transform localization in a Lit project using the configureTransformLocalization function, specifying the source locale.

LANGUAGE: javascript
CODE:
import {configureTransformLocalization} from '@lit/localize';

export const {getLocale} = configureTransformLocalization({
  sourceLocale: 'en',
});

----------------------------------------

TITLE: Configuring Babel for LitElement Transpilation
DESCRIPTION: Demonstrates how to configure Babel for transpiling LitElement components using proposed JavaScript features. It includes plugins for class properties and decorators.

LANGUAGE: js
CODE:
const plugins = [
  '@babel/plugin-proposal-class-properties',
  ['@babel/plugin-proposal-decorators', { decoratorsBeforeExport: true } ],
];

module.exports = { plugins };

----------------------------------------

TITLE: Importing LitElement Component
DESCRIPTION: Example of importing a LitElement component in a JavaScript file.

LANGUAGE: javascript
CODE:
import './components/my-elements.js';

----------------------------------------

TITLE: Stateful Directive with WeakMap
DESCRIPTION: Shows how to maintain state between renders using a WeakMap in a directive.

LANGUAGE: javascript
CODE:
import {directive} from 'lit-html';

// Define the map at module level
const stateMap = new WeakMap();

const statefulDirective = directive(() => (part) => {
  let myState = stateMap.get(part);
  if (myState === undefined) {
    // Initialize state for this location
    myState = {};
    stateMap.set(part, myState);
  }
  // ... use the state somehow
});

----------------------------------------

TITLE: Implementing Animation in updated() Callback
DESCRIPTION: Demonstrates how to use the updated() lifecycle callback to create a slide-in animation effect when a message is shown. The code measures the message element's width and creates a horizontal sliding animation using the Web Animations API.

LANGUAGE: typescript
CODE:
  protected updated(changedProperties: PropertyValues<this>): void {
    if (changedProperties.has('_showMessage')) {
      const final = this._message.getBoundingClientRect().width;
      const starting = 0 - final;
      var player = this._message.animate([
        { transform: `translateX(${starting}px)` },
        { transform: `translateX(0)` }
      ], {
        duration: 500,
        easing: 'ease-out',
      });
    }
  }

LANGUAGE: javascript
CODE:
  updated(changedProperties) {
    if (changedProperties.has('_showMessage')) {
      const final = this._message.getBoundingClientRect().width;
      const starting = 0 - final;
      this._message.animate([
        { transform: `translateX(${starting}px)` },
        { transform: `translateX(0)` }
      ], {
        duration: 500,
        easing: 'ease-out',
      });
    }
  }

----------------------------------------

TITLE: Generating Localized Templates in Runtime Mode (JavaScript)
DESCRIPTION: Example of a generated localized template module for the es-419 locale in Lit's runtime localization mode.

LANGUAGE: javascript
CODE:
// locales/es-419.ts
export const templates = {
  h3c44aff2d5f5ef6b: html`Hola <b>Mundo!</b>`,
};

----------------------------------------

TITLE: Universal Build Script Loading
DESCRIPTION: HTML script loading configuration for universal build supporting older browsers, including polyfills and SystemJS loader.

LANGUAGE: html
CODE:
<!-- Babel polyfills--need to be loaded _before_ Web
     Components polyfills -->
<script src="nomodule/src/babel-polyfills-nomodule.js"></script>

<!-- Load Web Components polyfills, if needed. -->
<script src="node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js"></script>

<!-- SystemJS loader -->
<script src="node_modules/systemjs/dist/s.min.js"></script>

<!-- Use SystemJS to load the application bundle -->
<script>
  System.import('./nomodule/src/components/shop-app.js');
</script>

----------------------------------------

TITLE: Basic Directive Usage in lit-html
DESCRIPTION: Demonstrates basic syntax for using a directive within a lit-html template.

LANGUAGE: javascript
CODE:
html`<div>
     ${fancyDirective('some text')}
  </div>`

----------------------------------------

TITLE: Rendering HTML Template in JavaScript with Lit
DESCRIPTION: Demonstrates basic Lit template syntax using HTML template literal with dynamic content interpolation.

LANGUAGE: javascript
CODE:
html`<h1>Hello ${name}</h1>`

----------------------------------------

TITLE: Filtering Array Elements in TypeScript
DESCRIPTION: Shows how to properly remove an item from an array using an immutable approach in Lit components, creating a new array that excludes the specified element.

LANGUAGE: typescript
CODE:
    this.groceries =
        this.groceries.filter((_, i) => i !== indexToRemove);

----------------------------------------

TITLE: Lazy-loading Locale Modules (JavaScript)
DESCRIPTION: Example of using dynamic imports to lazy-load locale modules in Lit's runtime localization mode.

LANGUAGE: javascript
CODE:
import {configureLocalization} from '@lit/localize';
import {sourceLocale, targetLocales} from './generated/locales.js';

const {getLocale, setLocale} = configureLocalization({
  sourceLocale,
  targetLocales,
  loadLocale: (locale) => import(`/locales/${locale}.js`),
});

----------------------------------------

TITLE: Lit Component Event Context Rendering
DESCRIPTION: Shows how to use render options within a component class, specifically demonstrating the eventContext option to bind event listeners to the component instance.

LANGUAGE: javascript
CODE:
class MyComponent extends HTMLElement {
  // ...

  _update() {
    // Bind event listeners to the current instance of MyComponent
    render(this._template(), this._renderRoot, {eventContext: this});
  }
}

----------------------------------------

TITLE: Basic Directive Usage in Lit Template
DESCRIPTION: Example showing how to use a directive function within a Lit template.

LANGUAGE: javascript
CODE:
html`<div>
       ${fancyDirective('some text')}
     </div>`

----------------------------------------

TITLE: Property Definition Comparison in Lit
DESCRIPTION: Demonstrates two equivalent ways of defining properties in Lit components - using TypeScript decorators and vanilla JavaScript

LANGUAGE: typescript
CODE:
@customElement('my-element')
class MyElement {
  @property({attribute: false})
  foo;
}

LANGUAGE: javascript
CODE:
class MyElement {
  static properties = {
    foo: {attribute: false}
  };
}
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Configuring Eleventy Navigation for Tools and Workflows Section in YAML
DESCRIPTION: This YAML frontmatter configures the navigation metadata for the 'Tools and workflows' section in the Eleventy static site generator. It sets the title, navigation key, and order for the section.

LANGUAGE: yaml
CODE:
---
title: Tools and workflows
eleventyNavigation:
  title: Tools and workflows
  key: Tools
  order: 6
---

----------------------------------------

TITLE: Collecting Render Results Asynchronously
DESCRIPTION: Demonstrates using collectResult() to asynchronously combine a RenderResult into a string.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {collectResult} from '@lit-labs/ssr/lib/render-result.js';
import {html} from 'lit';

const result = render(html`<my-element></my-element>`);
const contents = await collectResult(result);

----------------------------------------

TITLE: Lit Localize Configuration
DESCRIPTION: Example configuration file (lit-localize.json) for both TypeScript and JavaScript projects.

LANGUAGE: json
CODE:
{
  "$schema": "https://raw.githubusercontent.com/lit/lit/main/packages/localize-tools/config.schema.json",
  "sourceLocale": "en",
  "targetLocales": ["es-419", "zh-Hans"],
  "tsConfig": "./tsconfig.json",
  "output": {
    "mode": "runtime",
    "outputDir": "./src/generated/locales",
    "localeCodesModule": "./src/generated/locale-codes.ts"
  },
  "interchange": {
    "format": "xliff",
    "xliffDir": "./xliff/"
  }
}

----------------------------------------

TITLE: Lit Template Compilation Example
DESCRIPTION: Illustrates how the Lit template compiler transforms a simple HTML template into an optimized format for faster rendering.

LANGUAGE: typescript
CODE:
const hi = (name) => html`<h1>Hello ${name}!</h1>`;

LANGUAGE: typescript
CODE:
const b = (s) => s;
const lit_template_1 = {h: b`<h1>Hello <?></h1>`, parts: [{type: 2, index: 1}]};
const hi = (name) => ({_$litType$: lit_template_1, values: [name]});

----------------------------------------

TITLE: Configuring Eleventy Navigation Metadata
DESCRIPTION: YAML front matter configuration for Eleventy static site generator that defines navigation properties for the Tools and Workflows section.

LANGUAGE: yaml
CODE:
---
title: Tools and workflows
eleventyNavigation:
  title: Tools and workflows
  key: Tools
  order: 6
---

----------------------------------------

TITLE: Collecting Render Results Asynchronously
DESCRIPTION: Demonstrates using collectResult() to asynchronously combine a RenderResult into a string.

LANGUAGE: typescript
CODE:
import {render} from '@lit-labs/ssr';
import {collectResult} from '@lit-labs/ssr/lib/render-result.js';
import {html} from 'lit';

const result = render(html`<my-element></my-element>`);
const contents = await collectResult(result);

----------------------------------------

TITLE: Defining Section Header in Markdown Frontmatter
DESCRIPTION: Markdown frontmatter that defines navigation metadata and version links for a documentation section about related libraries. The content is processed by Eleventy and removed during build.

LANGUAGE: markdown
CODE:
---
title: Related libraries
eleventyNavigation:
  key: Related libraries
  order: 12
versionLinks:
  v1: lit-html/introduction/
---

----------------------------------------

TITLE: Resultant Static HTML Output from Eleventy Build
DESCRIPTION: This snippet shows the static HTML output generated by Eleventy after processing the Markdown file with the Lit component. It includes the rendered shadow DOM and styles using declarative shadow DOM syntax.

LANGUAGE: html
CODE:
<h1>Greetings</h1>

<demo-greeter name="World">
  <template shadowroot="open">
    <style>
      b { color: red; }
    </style>
    Hello <b>World</b>!
  </template>
</demo-greeter>

----------------------------------------

TITLE: Configuring Eleventy Navigation YAML Frontmatter
DESCRIPTION: YAML frontmatter configuration for setting up documentation navigation properties including the page title and order.

LANGUAGE: yaml
CODE:
---
title: Introduction
eleventyNavigation:
  key: Introduction
  order: 1
---

----------------------------------------

TITLE: Configuring Eleventy Navigation for Introduction Section in YAML
DESCRIPTION: This YAML snippet defines the frontmatter for the Introduction section in the Lit project documentation. It sets the title and configures the Eleventy navigation properties, including the key and order.

LANGUAGE: yaml
CODE:
---
title: Introduction
eleventyNavigation:
  key: Introduction
  order: 1
---

----------------------------------------

TITLE: Build Process Comment in HTML
DESCRIPTION: HTML comment explaining that this file exists only to create a section heading and its output is deleted during the Eleventy build process.

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Eleventy Navigation Configuration in Markdown Frontmatter
DESCRIPTION: Defines navigation metadata for the Composition section using Eleventy's navigation system. Sets the title, key, and order for the navigation structure.

LANGUAGE: markdown
CODE:
---
title: Composition
eleventyNavigation:
  title: Composition
  key: Composition
  order: 4
---

----------------------------------------

TITLE: Using @queryAssignedElements Decorator
DESCRIPTION: Shows how to use the new @queryAssignedElements decorator for accessing slotted elements in a Lit component.

LANGUAGE: typescript
CODE:
@queryAssignedElements({ slot: 'icon' })
private _icon!: Array<HTMLElement>;

----------------------------------------

TITLE: Configuring Rollup for Lit Template Compilation
DESCRIPTION: Shows how to set up Rollup with the TypeScript plugin to use the new Lit template compiler for improved performance.

LANGUAGE: javascript
CODE:
import typescript from '@rollup/plugin-typescript';
import {compileLitTemplates} from '@lit-labs/compiler';

export default {
  // ...
  plugins: [
    typescript({
      transformers: {
        before: [compileLitTemplates()],
      },
    }),
    // other rollup plugins
  ],
};

----------------------------------------

TITLE: Installing lit-html Package
DESCRIPTION: Command to install the standalone lit-html package via npm

LANGUAGE: sh
CODE:
npm install lit-html

----------------------------------------

TITLE: Configuring lit-html Documentation Navigation in Eleventy
DESCRIPTION: YAML frontmatter configuration for setting up the lit-html documentation section navigation. Defines the page title and navigation properties including the key and order.

LANGUAGE: yaml
CODE:
---
title: lit-html
eleventyNavigation:
  key: lit-html
  order: 4
---

----------------------------------------

TITLE: Documentation Build Process Comment
DESCRIPTION: HTML comment explaining that this file exists only to create a section heading and its output is removed during the Eleventy build process.

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Using a Custom LitElement Component in HTML
DESCRIPTION: Shows how to use the custom 'name-tag' element created with LitElement in HTML markup.

LANGUAGE: html
CODE:
<name-tag name="Ida"></name-tag>

----------------------------------------

TITLE: Using join() Directive for Element Separation
DESCRIPTION: Demonstrates the join() directive for adding separators between rendered items in Lit templates.

LANGUAGE: typescript
CODE:
render() {
  return html`
    ${join(this.items, html`<span class="separator">|</span>`)}
  `;
}

----------------------------------------

TITLE: Importing lit-html Core Functions
DESCRIPTION: Basic import statement for the main lit-html functions

LANGUAGE: js
CODE:
import {html, render} from 'lit-html';

----------------------------------------

TITLE: Configuring Eleventy Navigation for Lit Documentation
DESCRIPTION: YAML frontmatter configuration that sets up the Introduction section navigation properties. Includes a commented note explaining that this file exists only to create a section heading and its output is deleted during build.

LANGUAGE: yaml
CODE:
---
title: Introduction
eleventyNavigation:
  key: Introduction
  order: 1
---

LANGUAGE: html
CODE:
<!-- This file exists only to create a section heading.
     Its output is deleted by the Eleventy build process. -->

----------------------------------------

TITLE: Markdown Blog Post Frontmatter
DESCRIPTION: YAML frontmatter for a blog post about the Lit 2 release livestream, including metadata like tags, layout, title, summary and date.

LANGUAGE: markdown
CODE:
---
tags: blogPosts
layout: blog-post.html
title: "Watch the Lit 2 release livestream"
summary: "What's new in Lit 2, a big-picture view of Lit usage at Google, and a community panel discussion."
date: 2021-09-22
---

----------------------------------------

TITLE: Defining a LitElement Web Component in TypeScript
DESCRIPTION: Shows how to create a simple Web Component using LitElement in TypeScript. The component defines a reactive property and renders a template using lit-html.

LANGUAGE: typescript
CODE:
@customElement('name-tag')
class NameTag extends LitElement {
  @property()
  name = 'a secret';

  render() {
    return html`<p>Hi, my name is ${this.name}!</p>`;
  }
}

----------------------------------------

TITLE: Deploying Lit Discord Bot with Google Cloud Build
DESCRIPTION: The Discord bot is deployed as a Cloud Run service using Google Cloud Build. The configuration is defined in a YAML file at the root of the monorepo. Deployment requires manual triggering and old revisions should be removed after successful deployment.

LANGUAGE: yaml
CODE:
cloudbuild-discord-bot.yaml

----------------------------------------

TITLE: Controlling Lit Development Warnings
DESCRIPTION: This snippet demonstrates how to enable or disable specific categories of development warnings in Lit elements using static methods and properties.

LANGUAGE: typescript
CODE:
import {LitElement, ReactiveElement} from 'lit';

// Turn off migration warnings on all ReactiveElements,
// including LitElements
ReactiveElement.disableWarning?.('migration');

// Turn off update warnings on all LitElements
LitElement.disableWarning?.('change-in-update');

// Turn off update warnings on one element
MyElement.disableWarning?.('change-in-update');

class MyElement extends LitElement {
  static enabledWarnings = ['migration'];
}

----------------------------------------

TITLE: Demonstrating Markdown Usage with Custom Element in Eleventy
DESCRIPTION: This snippet shows how to use a custom Lit element in a Markdown file for an Eleventy project. It demonstrates the syntax for including a <demo-greeter> component with a 'name' attribute.

LANGUAGE: html
CODE:
# Greetings

<demo-greeter name="World"></demo-greeter>

----------------------------------------

TITLE: Installing Lit 3.0 Pre-release Dependencies
DESCRIPTION: Package.json configuration showing the required dependency versions for testing Lit 3.0 pre-release. Includes core Lit packages and their corresponding pre-release versions.

LANGUAGE: json
CODE:
  "lit": "^3.0.0-pre.0"
  "lit-html": "^3.0.0-pre.0"
  "lit-element": "^4.0.0-pre.0"
  "@lit/reactive-element": "^2.0.0-pre.0"

----------------------------------------

TITLE: Configuring Web Components Documentation Frontmatter in YAML
DESCRIPTION: YAML frontmatter configuration that defines the title, children tag, and navigation structure for Web Components documentation. Sets up the parent-child relationship in the navigation hierarchy and defines the display order.

LANGUAGE: yaml
CODE:
---
title: Web Components
childrenTag: web-components
eleventyNavigation:
  parent: Tags
  key: Web Components
  order: 2
---

----------------------------------------

TITLE: Installing Dependencies for Lit.dev Project
DESCRIPTION: Command to install project dependencies using npm ci.

LANGUAGE: sh
CODE:
npm ci

----------------------------------------

TITLE: Including Template Polyfill for Standalone lit-html
DESCRIPTION: HTML script tag to include the template polyfill for standalone lit-html support in Internet Explorer 11.

LANGUAGE: html
CODE:
<script src="./node_modules/@webcomponents/template/template.min.js"></script>

----------------------------------------

TITLE: YouTube Video Embed
DESCRIPTION: HTML iframe element embedding a privacy-enhanced YouTube video player for the Lit 2 release livestream recording.

LANGUAGE: html
CODE:
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/nfb779XIhsU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

----------------------------------------

TITLE: Defining a Lit Component in JavaScript
DESCRIPTION: Shows how to define a basic Lit component class and register it as a custom element.

LANGUAGE: javascript
CODE:
import {LitElement} from 'lit';

export class MyElement extends LitElement { /* ... */  }
customElements.define('my-element', MyElement);

----------------------------------------

TITLE: Starting Docker Environment for Lit.dev Locally
DESCRIPTION: Docker commands to build and run the Lit.dev production environment locally, serving the main site and playground.

LANGUAGE: sh
CODE:
docker build -t litdev . --build-arg LITDEV_ENV=local
docker run --rm --name litdev -p 6415:6415 -e LITDEV_ENV=local -e MODE=main litdev
docker run --rm --name litdev-playground -p 6416:6416 -e LITDEV_ENV=local -e MODE=playground litdev

----------------------------------------

TITLE: Building and Serving Lit.dev in Production Mode
DESCRIPTION: Commands to build the project and start the production server, which serves the site at http://localhost:6415.

LANGUAGE: sh
CODE:
npm run build
npm start

----------------------------------------

TITLE: Defining a LitElement Web Component in JavaScript
DESCRIPTION: Demonstrates how to create the same Web Component using LitElement in JavaScript. It shows property definition, constructor initialization, and template rendering.

LANGUAGE: javascript
CODE:
class NameTag extends LitElement {
  static properties = {
    name: {},
  };

  constructor() {
    super();
    this.name = 'a secret';
  }

  render() {
    return html`<p>Hi, my name is ${this.name}!</p>`;
  }
}
customElements.define('name-tag', NameTag);

----------------------------------------

TITLE: Exporting Lit Development Server Configuration in JavaScript
DESCRIPTION: This code exports a configuration object for the Lit development server. It specifies the root directory, the command to run the server, and various options for handling file paths and redirects.

LANGUAGE: javascript
CODE:
export default {
  root: 'dev',
  command: 'eleventy --config=.eleventy.cjs --serve',
  mounts: {
    '/examples': './examples',
    '/docs': './docs',
    '/packages': './packages',
  },
  proxy: {
    '/playground': 'http://localhost:8000',
  },
  appIndex: 'dev/index.html',
  clearConsole: false,
  open: false,
};

----------------------------------------

TITLE: Watching Production Mode for Lit.dev
DESCRIPTION: Commands to start the production server and watch for changes in TypeScript, Rollup, and Eleventy builds.

LANGUAGE: sh
CODE:
npm start # production server

cd packages/lit-dev-content
npm run build:ts:watch     # TypeScript
npm run build:rollup:watch # Rollup
npm run build:eleventy:watch   # Eleventy

----------------------------------------

TITLE: Setting up Lit Development Environment
DESCRIPTION: Instructions for cloning the Lit repository, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
git clone https://github.com/lit/lit.dev.git
cd lit.dev
npm ci
npm run dev

----------------------------------------

TITLE: Starting Development Server for Lit.dev
DESCRIPTION: Command to run the development server for lit.dev, which serves the site at http://localhost:5415.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Conditional Rendering in Eleventy Templates for Lit.dev
DESCRIPTION: Example of using conditional rendering in Eleventy templates to differentiate between dev and prod modes.

LANGUAGE: liquid
CODE:
{% if env.DEV %}
  <p>Dev mode</p>
{% else %}
  <p>Prod mode</p>
{% endif %}