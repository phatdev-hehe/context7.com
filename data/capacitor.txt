TITLE: Installing Capacitor Core Dependencies
DESCRIPTION: Commands to install Capacitor's core runtime and CLI dependencies in an existing web application.

LANGUAGE: bash
CODE:
npm i @capacitor/core
npm i -D @capacitor/cli

----------------------------------------

TITLE: Implementing JSON Storage Operations in Capacitor
DESCRIPTION: Demonstrates how to store and retrieve JSON data using Capacitor's Storage API. Shows both setting and getting objects by converting them to and from JSON strings. The example includes storing a user object with id and name properties.

LANGUAGE: typescript
CODE:
import { Storage } from '@capacitor/storage';

// JSON "set" example
async setObject() {
  await Storage.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Storage.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

----------------------------------------

TITLE: Implementing Facade Pattern in Java for Capacitor Local Notifications Plugin
DESCRIPTION: This snippet showcases the Facade design pattern used in the Local Notifications plugin for Capacitor. It demonstrates how complex subsystem interactions are simplified through a single interface, hiding the underlying complexity from the client code.

LANGUAGE: java
CODE:
@Override
public void load() {
    super.load();
    notificationStorage = new NotificationStorage(getContext());
    manager = new LocalNotificationManager( … );
    manager.createNotificationChannel();
    notificationChannelManager = new NotificationChannelManager(getActivity());
    staticBridge = this.bridge;
}

----------------------------------------

TITLE: Handling Capacitor Plugin Events in Angular NgZone
DESCRIPTION: Demonstrates how to properly handle Capacitor plugin event listeners within Angular's NgZone to ensure change detection works correctly. Shows implementation of network status monitoring with proper Angular context.

LANGUAGE: typescript
CODE:
constructor(private ngZone: NgZone) { }

async ngOnInit() {
  Network.addListener("networkStatusChange", (status) => {
    this.ngZone.run(() => {
      // This code will run in Angular's execution context
      this.networkStatus = status.connected ? "Online" : "Offline";
    });
  });
}

----------------------------------------

TITLE: Initializing Capacitor Plugin Project with NPM
DESCRIPTION: Command to create a new Capacitor plugin project using the official plugin generator. Requires Node LTS version and npm 6+ to be installed.

LANGUAGE: bash
CODE:
npm init @capacitor/plugin@latest

----------------------------------------

TITLE: Capacitor Configuration Schema in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for the full Capacitor configuration schema, including all available options and their descriptions.

LANGUAGE: typescript
CODE:
export interface CapacitorConfig {
  appId?: string;
  appName?: string;
  webDir?: string;
  bundledWebRuntime?: boolean;
  hideLogs?: boolean;
  loggingBehavior?: 'none' | 'debug' | 'production';
  overrideUserAgent?: string;
  appendUserAgent?: string;
  backgroundColor?: string;
  android?: {
    path?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    allowMixedContent?: boolean;
    captureInput?: boolean;
    webContentsDebuggingEnabled?: boolean;
    hideLogs?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    flavor?: string;
    initialFocus?: boolean;
    minWebViewVersion?: number;
    buildOptions?: {
      keystorePath?: string;
      keystorePassword?: string;
      keystoreAlias?: string;
      keystoreAliasPassword?: string;
      releaseType?: 'AAB' | 'APK';
    };
    useLegacyBridge: boolean;
  };
  ios?: {
    path?: string;
    scheme?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';
    scrollEnabled?: boolean;
    cordovaLinkerFlags?: string[];
    allowsLinkPreview?: boolean;
    hideLogs?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    limitsNavigationsToAppBoundDomains?: boolean;
    preferredContentMode?: 'recommended' | 'desktop' | 'mobile';
    handleApplicationNotifications?: boolean;
  };
  server?: {
    hostname?: string;
    iosScheme?: string;
    androidScheme?: string;
    url?: string;
    cleartext?: boolean;
    allowNavigation?: string[];
    errorPath?: string;
  };
  cordova?: {
    accessOrigins?: string[];
    preferences?: { [key: string]: string | undefined };
    staticPlugins?: string[];
  };
  plugins?: PluginsConfig;
  includePlugins?: string[];
}

----------------------------------------

TITLE: Implementing Basic Echo Plugin in Swift for Capacitor iOS
DESCRIPTION: Demonstrates a simple Capacitor plugin for iOS that echoes a given value. Shows how to receive data from a plugin call and return data back to the caller.

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin {
  @objc func echo(_ call: CAPPluginCall) {
    let value = call.getString("value") ?? ""
    call.resolve([
        "value": value
    ])
  }
}

----------------------------------------

TITLE: Converting File Paths with Capacitor.convertFileSrc
DESCRIPTION: Demonstrates how to convert device file paths to Web View-friendly URLs using Capacitor's convertFileSrc function. This is necessary for handling file protocol differences between native and web environments.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const rawPhotoUri = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),

----------------------------------------

TITLE: Basic Capacitor Configuration in TypeScript
DESCRIPTION: This snippet shows a basic Capacitor configuration file (capacitor.config.ts) that sets the app ID, name, and web directory.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.company.appname',
  appName: 'My Capacitor App',
  webDir: 'www',
};

export default config;

----------------------------------------

TITLE: Error Handling in Web Plugin
DESCRIPTION: Demonstrates proper error handling patterns in Capacitor web plugins, including checking for API availability and throwing appropriate errors.

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  if (typeof navigator === 'undefined' || !navigator.geolocation) {
    throw this.unavailable('Geolocation API not available in this browser.');
  }

  // TODO: actual web implementation
}

----------------------------------------

TITLE: Defining TypeScript Plugin Interface
DESCRIPTION: Shows how to define a plugin interface in TypeScript with a new openMap method that accepts latitude and longitude parameters.

LANGUAGE: diff
CODE:
 export interface EchoPlugin {
   echo(options: { value: string }): Promise<{ value: string }>;
+  openMap(options: OpenMapOptions): Promise<void>;
 }

+export interface OpenMapOptions {
+  latitude: number;
+  longitude: number;
+}

----------------------------------------

TITLE: Defining Capacitor Plugin Method Types in TypeScript
DESCRIPTION: This snippet demonstrates how to define the three types of method signatures (void return, value return, and callback) in a TypeScript interface for a Capacitor plugin.

LANGUAGE: typescript
CODE:
export type CallbackID = string;

export interface MyData {
  data: string;
}

export type MyPluginCallback = (message: MyData | null, err?: any) => void;

export interface MyPlugin {
  method1(): Promise<void>;
  method2(): Promise<MyData>;
  method3(callback: MyPluginCallback): Promise<CallbackID>;
}

----------------------------------------

TITLE: Implementing Content Security Policy in HTML for Capacitor Apps
DESCRIPTION: This snippet demonstrates how to add a Content Security Policy (CSP) meta tag to the HTML head of a Capacitor app. The example policy allows requests to the current origin and 'foo.com'.

LANGUAGE: html
CODE:
<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self' foo.com"
/>

----------------------------------------

TITLE: Implementing Content Security Policy in HTML
DESCRIPTION: Demonstrates how to configure Content Security Policy (CSP) in a Capacitor app by adding a meta tag to the head section. This example allows requests to the current origin and foo.com domain.

LANGUAGE: html
CODE:
<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self' foo.com"
/>

----------------------------------------

TITLE: Creating New Capacitor Application
DESCRIPTION: Command to create a new Capacitor application using the @capacitor/create-app package

LANGUAGE: bash
CODE:
npm init @capacitor/app@latest

----------------------------------------

TITLE: Implementing Basic Web Plugin in TypeScript
DESCRIPTION: Shows the basic structure of a Capacitor web plugin implementation using TypeScript, demonstrating how to extend WebPlugin and implement a plugin interface.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';

import type { EchoPlugin } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

----------------------------------------

TITLE: Configuring Capacitor Settings with JSON5
DESCRIPTION: Complete example of a Capacitor configuration file showing all available options including app identification, web directory settings, platform-specific configurations for iOS and Android, and server settings. The configuration controls everything from basic app properties to platform-specific behaviors and debugging options.

LANGUAGE: json5
CODE:
{
  "appId": "com.company.appname",
  "appName": "Capacitor Kitchen Sink",
  "webDir": "www",
  "npmClient": "npm",
  "bundledWebRuntime": false,
  "windowsAndroidStudioPath": "C:\\Program Files\Android\Android Studio\binstudio64.exe",
  "hideLogs": true,
  "server": {
    "url": "http://192.168.1.33:8100",
    "hostname": "app",
    "iosScheme": "ionic",
    "androidScheme": "http",
    "allowNavigation": ["example.org", "*.example.org", "192.0.2.1"]
  },
  "overrideUserAgent": "my custom user agent",
  "appendUserAgent": "string to append",
  "backgroundColor": "#ffffff",
  "android": {
    "overrideUserAgent": "my custom user agent for Android",
    "appendUserAgent": "string to append for Android",
    "backgroundColor": "#ffffff",
    "allowMixedContent": true,
    "captureInput": true,
    "webContentsDebuggingEnabled": true,
    "hideLogs": true
  },
  "ios": {
    "overrideUserAgent": "my custom user agent for iOS",
    "appendUserAgent": "string to append for iOS",
    "backgroundColor": "#ffffff",
    "contentInset": "always",
    "cordovaSwiftVersion": "4.2",
    "minVersion": "11.3",
    "cordovaLinkerFlags": ["-ObjC"],
    "allowsLinkPreview": false,
    "hideLogs": true
  }
}

----------------------------------------

TITLE: Implementing a Basic Echo Plugin in Java for Capacitor Android
DESCRIPTION: This snippet demonstrates a simple Echo plugin that receives a value and returns it. It shows how to receive data from a Plugin Call and return data back to the caller.

LANGUAGE: java
CODE:
@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Implementing Basic Echo Plugin in Swift for Capacitor iOS
DESCRIPTION: Demonstrates a simple Echo plugin with an implementation class (Echo) and a plugin class (EchoPlugin) that extends CAPPlugin and CAPBridgedPlugin. The plugin has an 'echo' method that returns the input value.

LANGUAGE: swift
CODE:
import Foundation

@objc public class Echo: NSObject {
    @objc public func echo(_ value: String) -> String {
        print(value)
        return value
    }
}

LANGUAGE: swift
CODE:
import Foundation
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin, CAPBridgedPlugin {
    public let identifier = "EchoPlugin"
    public let jsName = "Echo"
    public let pluginMethods: [CAPPluginMethod] = [
        CAPPluginMethod(name: "echo", returnType: CAPPluginReturnPromise)
    ]
    private let implementation = Echo()

    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve([
            "value": implementation.echo(value)
        ])
    }
}

----------------------------------------

TITLE: Initializing Capacitor Configuration
DESCRIPTION: Command to initialize Capacitor configuration through CLI questionnaire

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Implementing Permission Methods
DESCRIPTION: Example of implementing checkPermissions and requestPermissions methods in a web plugin with feature detection.

LANGUAGE: typescript
CODE:
async checkPermissions(): Promise<PermissionStatus> {
  if (typeof navigator === 'undefined' || !navigator.permissions) {
    throw this.unavailable('Permissions API not available in this browser.');
  }

  const permission = await navigator.permissions.query( ... );

  // TODO
}

async requestPermissions(): Promise<PermissionStatus> {
  throw this.unimplemented('Not implemented on web.');
}

----------------------------------------

TITLE: Creating New Capacitor Application
DESCRIPTION: Command to scaffold a new Capacitor application using the @capacitor/create-app package

LANGUAGE: bash
CODE:
npm init @capacitor/app

----------------------------------------

TITLE: Implementing Motion Event Listeners in TypeScript
DESCRIPTION: Example demonstrating how to request permissions, add motion event listeners, and handle cleanup for device motion tracking. Shows usage of acceleration and orientation listeners with proper permission handling.

LANGUAGE: typescript
CODE:
import { PluginListenerHandle } from '@capacitor/core';
import { Motion } from '@capacitor/motion';


let accelHandler: PluginListenerHandle;

myButton.addEventListener('click', async () => {
  try {
    await DeviceMotionEvent.requestPermission();
  } catch (e) {
    // Handle error
    return;
  }

  // Once the user approves, can start listening:
  accelHandler = await Motion.addListener('accel', event => {
    console.log('Device motion event:', event);
  });
});

// Stop the acceleration listener
const stopAcceleration = () => {
  if (accelHandler) {
    accelHandler.remove();
  }
};

// Remove all listeners
const removeListeners = () => {
  Motion.removeAllListeners();
};

----------------------------------------

TITLE: Implementing Bridge Pattern in Swift for Capacitor Device Plugin
DESCRIPTION: Example showing how the Bridge pattern is implemented in Swift for the Capacitor Device plugin. The code demonstrates separation between abstraction and implementation by handling language code retrieval.

LANGUAGE: swift
CODE:
@objc func getLanguageCode(_ call: CAPPluginCall) {
    let code = implementation.getLanguageCode()
    call.resolve([ "value": code ])
}

----------------------------------------

TITLE: Adding Mobile Platforms to Capacitor Project
DESCRIPTION: Commands to add Android and iOS platforms to a Capacitor-enabled Ionic project

LANGUAGE: bash
CODE:
ionic capacitor add android
ionic capacitor add ios

----------------------------------------

TITLE: Implementing Basic Web Plugin Structure in TypeScript
DESCRIPTION: Demonstrates the basic structure of a Capacitor web plugin implementation using TypeScript, showing how to extend WebPlugin and implement plugin interface methods.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';

import type { EchoPlugin } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

----------------------------------------

TITLE: Accessing Plugin Call Data in Capacitor iOS
DESCRIPTION: Shows how to access data passed to a plugin method using CAPPluginCall. Demonstrates accessing strings, objects, booleans, and using guard statements for required parameters.

LANGUAGE: swift
CODE:
@objc func storeContact(_ call: CAPPluginCall) {
  let name = call.getString("yourName") ?? "default name"
  let address = call.getObject("address") ?? [:]
  let isAwesome = call.getBool("isAwesome") ?? false

  guard let id = call.options["id"] as? String else {
    call.reject("Must provide an id")
    return
  }

  // ...

  call.resolve()
}

----------------------------------------

TITLE: Implementing a Basic Echo Plugin in Java
DESCRIPTION: This snippet demonstrates a simple Capacitor plugin for Android that echoes a value passed to it. It shows how to receive data from a Plugin Call and return data back to the caller.

LANGUAGE: java
CODE:
@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Implementing Basic Web Plugin Structure in TypeScript
DESCRIPTION: Demonstrates the basic structure of a Capacitor web plugin implementation using TypeScript, showing how to extend WebPlugin and implement plugin interface methods.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';

import type { EchoPlugin } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

----------------------------------------

TITLE: Implementing Value Return Methods in iOS
DESCRIPTION: Objective-C implementation of a value return method in iOS using the CAP_PLUGIN macro with CAPPluginReturnPromise return type.

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Defining Plugin Interface in TypeScript
DESCRIPTION: Shows how to define a plugin interface and method signatures in TypeScript, including the addition of a new openMap method with latitude and longitude parameters.

LANGUAGE: diff
CODE:
 export interface EchoPlugin {
   echo(options: { value: string }): Promise<{ value: string }>;
+  openMap(options: OpenMapOptions): Promise<void>;
 }

+export interface OpenMapOptions {
+  latitude: number;
+  longitude: number;
+}

----------------------------------------

TITLE: Extending WebPlugin for Screen Orientation in TypeScript
DESCRIPTION: Defines the ScreenOrientationWeb class that extends Capacitor's WebPlugin and implements the ScreenOrientationPlugin interface. It sets up a listener for orientation changes in the constructor.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';
import type { ScreenOrientationPlugin } from './definitions';

export class ScreenOrientationWeb extends WebPlugin {
  constructor() {
    super();
    window.screen.orientation.addEventListener("change", () => {
      const type = window.screen.orientation.type;
      this.notifyListeners("screenOrientationChange", { type });
    });
  }
}

----------------------------------------

TITLE: Using Capacitor Http Plugin for GET and POST Requests
DESCRIPTION: Example usage of the Capacitor Http Plugin for making GET and POST requests. It demonstrates how to set up request options and handle responses using the CapacitorHttp API.

LANGUAGE: typescript
CODE:
import { CapacitorHttp } from '@capacitor/core';

// Example of a GET request
const doGet = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    params: { size: 'XL' },
  };

  const response: HttpResponse = await CapacitorHttp.get(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })
};

// Example of a POST request. Note: data
// can be passed as a raw JS Object (must be JSON serializable)
const doPost = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    data: { foo: 'bar' },
  };

  const response: HttpResponse = await CapacitorHttp.post(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })
};

----------------------------------------

TITLE: Defining Plugin Method Types in TypeScript
DESCRIPTION: TypeScript interface definitions showing the three different method types available in Capacitor plugins: void return, value return, and callback methods.

LANGUAGE: typescript
CODE:
export type CallbackID = string;

export interface MyData {
  data: string;
}

export type MyPluginCallback = (message: MyData | null, err?: any) => void;

export interface MyPlugin {
  method1(): Promise<void>;
  method2(): Promise<MyData>;
  method3(callback: MyPluginCallback): Promise<CallbackID>;
}

----------------------------------------

TITLE: Installing Platform-Specific Dependencies
DESCRIPTION: Commands to install Android and iOS platform dependencies for Capacitor.

LANGUAGE: bash
CODE:
npm i @capacitor/android @capacitor/ios

----------------------------------------

TITLE: Handling Unimplemented Functionality in Web Plugin
DESCRIPTION: Demonstrates how to handle unimplemented functionality in a web plugin by throwing an 'unimplemented' error. This can be used for stubbing out methods or indicating platform limitations.

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  throw this.unimplemented('Not implemented on web.');
}

----------------------------------------

TITLE: Making HTTP Requests with CapacitorHttp
DESCRIPTION: Example code showing how to make GET and POST requests using the CapacitorHttp plugin

LANGUAGE: typescript
CODE:
import { CapacitorHttp } from '@capacitor/core';

// Example of a GET request
const doGet = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    params: { size: 'XL' },
  };

  const response: HttpResponse = await CapacitorHttp.get(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })
};

// Example of a POST request. Note: data
// can be passed as a raw JS Object (must be JSON serializable)
const doPost = () => {
  const options = {
    url: 'https://example.com/my/api', 
    headers: { 'X-Fake-Header': 'Fake-Value' },
    data: { foo: 'bar' },
  };

  const response: HttpResponse = await CapacitorHttp.post(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })
};

----------------------------------------

TITLE: Capacitor App Usage Example
DESCRIPTION: TypeScript example showing how to use app state change listeners, URL open handlers, and launch URL checking.

LANGUAGE: typescript
CODE:
import { App } from '@capacitor/app';

App.addListener('appStateChange', ({ isActive }) => {
  console.log('App state changed. Is active?', isActive);
});

App.addListener('appUrlOpen', data => {
  console.log('App opened with URL:', data);
});

App.addListener('appRestoredResult', data => {
  console.log('Restored state:', data);
});

const checkAppLaunchUrl = async () => {
  const { url } = await App.getLaunchUrl();

  console.log('App opened with URL: ' + url);
};

----------------------------------------

TITLE: Converting File Paths for Web View in Capacitor
DESCRIPTION: Shows how to use the convertFileSrc function to transform device file paths into Web View-friendly paths, essential for cross-protocol compatibility in Capacitor apps.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const savedPhotoFile = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),
document.getElementById("savedPhoto").src = savedPhoto;

LANGUAGE: html
CODE:
<img id="savedPhoto" />

----------------------------------------

TITLE: Handling Plugin Permissions in Java
DESCRIPTION: Example showing how to implement camera permissions in a Capacitor Android plugin with proper permission request handling and callbacks.

LANGUAGE: java
CODE:
@PluginMethod()
public void takePhoto(PluginCall call) {
  if (getPermissionState("camera") != PermissionState.GRANTED) {
    requestPermissionForAlias("camera", call, "cameraPermsCallback");
  } else {
    loadCamera(call);
  }
}

@PermissionCallback
private void cameraPermsCallback(PluginCall call) {
  if (getPermissionState("camera") == PermissionState.GRANTED) {
    loadCamera(call);
  } else {
    call.reject("Permission is required to take a picture");
  }
}

----------------------------------------

TITLE: Implementing Basic Web Plugin Structure in TypeScript
DESCRIPTION: Demonstrates the basic structure of a Capacitor web plugin using TypeScript. It shows how to import necessary types, implement the plugin interface, and define an echo method.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';

import type { EchoPlugin } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

----------------------------------------

TITLE: Implementing Capacitor Network Plugin with Angular NgZone
DESCRIPTION: Demonstrates how to properly handle Capacitor plugin event listeners within Angular's NgZone to ensure change detection is triggered. The example shows network status monitoring with proper zone management.

LANGUAGE: typescript
CODE:
constructor(private ngZone: NgZone) { }

async ngOnInit() {
  Network.addListener("networkStatusChange", (status) => {
    this.ngZone.run(() => {
      // This code will run in Angular's execution context
      this.networkStatus = status.connected ? "Online" : "Offline";
    });
  });
}

----------------------------------------

TITLE: Making HTTP Requests with CapacitorHttp
DESCRIPTION: Example code showing how to make GET and POST requests using the CapacitorHttp plugin

LANGUAGE: typescript
CODE:
import { CapacitorHttp } from '@capacitor/core';

// Example of a GET request
const doGet = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    params: { size: 'XL' },
  };

  const response: HttpResponse = await CapacitorHttp.get(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })
};

// Example of a POST request. Note: data
// can be passed as a raw JS Object (must be JSON serializable)
const doPost = () => {
  const options = {
    url: 'https://example.com/my/api', 
    headers: { 'X-Fake-Header': 'Fake-Value' },
    data: { foo: 'bar' },
  };

  const response: HttpResponse = await CapacitorHttp.post(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })
};

----------------------------------------

TITLE: Checking Plugin Availability in Capacitor (TypeScript)
DESCRIPTION: This snippet demonstrates how to check if a specific plugin (Camera in this case) is available in Capacitor. It uses the Capacitor.isPluginAvailable() method to determine if the Camera plugin can be used, allowing for conditional logic based on the availability of native features.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  Camera.getPhoto();
}

----------------------------------------

TITLE: Checking Plugin Availability with isPluginAvailable in TypeScript
DESCRIPTION: Demonstrates how to use the isPluginAvailable function to check if a specific plugin is available on the current platform, and handle cases where it might not be available.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Implementing Basic Echo Plugin in Java
DESCRIPTION: A simple example of a Capacitor Android plugin that demonstrates receiving data from a Plugin Call and returning data back to the caller.

LANGUAGE: java
CODE:
package android.plugin.test;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Returning Data from Capacitor Android Plugin
DESCRIPTION: This example demonstrates how to return complex data structures back to the client using JSObject and call.resolve().

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("added", true);
JSObject info = new JSObject();
info.put("id", "unique-id-1234");
ret.put("info", info);
call.resolve(ret);

----------------------------------------

TITLE: Setting Android Permissions for External Storage
DESCRIPTION: XML snippet to add necessary permissions to AndroidManifest.xml for external storage access.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Importing Capacitor Object in TypeScript
DESCRIPTION: Shows how to import the global Capacitor object from the @capacitor/core package.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

----------------------------------------

TITLE: Using Action Sheet in TypeScript
DESCRIPTION: Example showing how to implement and display an Action Sheet with multiple options including upload, share and remove actions. Demonstrates usage of ActionSheetButtonStyle for styling options.

LANGUAGE: typescript
CODE:
import { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';

const showActions = async () => {
  const result = await ActionSheet.showActions({
    title: 'Photo Options',
    message: 'Select an option to perform',
    options: [
      {
        title: 'Upload',
      },
      {
        title: 'Share',
      },
      {
        title: 'Remove',
        style: ActionSheetButtonStyle.Destructive,
      },
    ],
  });

  console.log('Action Sheet result:', result);
};

----------------------------------------

TITLE: Checking Plugin Availability in Capacitor
DESCRIPTION: Illustrates how to use isPluginAvailable function to check if a specific plugin is available on the current platform, including handling cases where the plugin is not available.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Dynamic Capacitor Configuration
DESCRIPTION: Complete TypeScript configuration file for dynamic environment-specific settings in Capacitor

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

let config: CapacitorConfig;

const baseConfig: CapacitorConfig = {
  appId: 'io.ionic.starter',
  appName: 'My App',
  webDir: 'build',
};

switch (process.env.NODE_ENV) {
  case 'qa':
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App QA',
      },
      android: {
        flavor: 'qa',
      },
    };
    break;
  default:
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App',
      },
      android: {
        flavor: 'dev',
      },
    };
    break;
}

export default config;

----------------------------------------

TITLE: Installing Filesystem Capacitor Plugin
DESCRIPTION: Commands to install the Filesystem plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/filesystem
npx cap sync

----------------------------------------

TITLE: Implementing Web Plugin in TypeScript
DESCRIPTION: Demonstrates implementation of the web version of the plugin, showing how to add new methods to the WebPlugin class.

LANGUAGE: diff
CODE:
 import type {
   EchoPlugin,
+  OpenMapOptions,
 } from './definitions';

 export class EchoWeb extends WebPlugin implements EchoPlugin {
   // other methods

+  async openMap(location: OpenMapOptions): Promise<void> {
+    // logic here
+  }
 }

----------------------------------------

TITLE: Initializing Capacitor Configuration
DESCRIPTION: Command to initialize Capacitor configuration through CLI questionnaire

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Platform Detection with Capacitor.getPlatform
DESCRIPTION: Shows how to detect the current platform (iOS, Android, or web) using Capacitor's getPlatform function for platform-specific code execution.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  console.log('iOS!');
} else if (Capacitor.getPlatform() === 'android') {
  console.log('Android!');
} else {
  console.log('Web!');
}

----------------------------------------

TITLE: Installing Filesystem Capacitor Plugin
DESCRIPTION: Commands to install the Filesystem plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/filesystem
npx cap sync

----------------------------------------

TITLE: Implementing Basic Echo Plugin in Java for Capacitor Android
DESCRIPTION: This snippet demonstrates a simple Echo plugin that receives a value and returns it. It shows how to handle plugin calls, access data, and return results.

LANGUAGE: java
CODE:
@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Using Capacitor React Hooks in a Function Component
DESCRIPTION: This example demonstrates how to import and use Capacitor React hooks in a function component. It specifically shows the use of the useFilesystem hook to read a file asynchronously within a useEffect hook.

LANGUAGE: typescript
CODE:
import { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';

const MyComponent = () => (
  const { readFile } = useFilesystem();

  useEffect(() => {
    const readMyFile = async () => {
      const file = await readFile({
        path: filepath,
        directory: FilesystemDirectory.Data
      });
      // ...
    }

    readMyFile();
  }, [ readFile ]);

----------------------------------------

TITLE: Declaring Callback Method in Objective-C for iOS
DESCRIPTION: This snippet demonstrates how to declare a callback method in Objective-C for an iOS Capacitor plugin. The method is declared using CAP_PLUGIN_METHOD macro with CAPPluginReturnCallback return type.

LANGUAGE: objc
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);
)

----------------------------------------

TITLE: Basic Capacitor Configuration in TypeScript
DESCRIPTION: Basic example of a Capacitor configuration file that sets up essential app properties like ID, name and web directory.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.company.appname',
  appName: 'My Capacitor App',
  webDir: 'www',
};

export default config;

----------------------------------------

TITLE: Accessing Bridge Reference in Swift
DESCRIPTION: Shows how to access and safely unwrap the bridge reference in Capacitor iOS plugins. The bridge is stored as a weak reference that needs to be checked before use.

LANGUAGE: swift
CODE:
self.bridge?

LANGUAGE: swift
CODE:
guard let bridge = self.bridge else { return }

----------------------------------------

TITLE: Registering Capacitor Plugin with TypeScript
DESCRIPTION: Implementation of plugin registration using Capacitor's registerPlugin module. Exports the plugin interface and instantiated plugin object for use in applications.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

import type { ScreenOrientationPlugin } from './definitions';

const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
);

export * from './definitions';
export { ScreenOrientation };

----------------------------------------

TITLE: Managing Version and Build Numbers in Capacitor
DESCRIPTION: Demonstrates various operations for managing versions and build numbers in iOS and Android projects using the MobileProject API.

LANGUAGE: typescript
CODE:
await project.ios?.setVersion('App', 'Debug', '1.4.5');
await project.ios?.incrementBuild('App');
await project.ios?.getBuild('App', 'Debug');
await project.ios?.getBuild('App', 'Release');
await project.android?.setVersionName('1.0.2');
await project.android?.getVersionName();
await project.android?.setVersionCode(11);
await project.android?.getVersionCode();
await project.android?.incrementVersionCode();

----------------------------------------

TITLE: Implementing Web Plugin for Capacitor in TypeScript
DESCRIPTION: This code snippet demonstrates the basic structure of a Capacitor Web plugin. It shows how to extend WebPlugin, implement the plugin interface, and register the plugin for web use.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';
import { MyPlugin } from './definitions';

export class MyPluginWeb extends WebPlugin implements MyPlugin {
  constructor() {
    super({
      name: 'MyPlugin',
      platforms: ['web'],
    });
  }

  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

const MyPlugin = new MyPluginWeb();

export { MyPlugin };

import { registerWebPlugin } from '@capacitor/core';
registerWebPlugin(MyPlugin);

----------------------------------------

TITLE: Managing Version and Build Numbers in Capacitor
DESCRIPTION: Demonstrates various operations for managing versions and build numbers in iOS and Android projects using the MobileProject API.

LANGUAGE: typescript
CODE:
await project.ios?.setVersion('App', 'Debug', '1.4.5');
await project.ios?.incrementBuild('App');
await project.ios?.getBuild('App', 'Debug');
await project.ios?.getBuild('App', 'Release');
await project.android?.setVersionName('1.0.2');
await project.android?.getVersionName();
await project.android?.setVersionCode(11);
await project.android?.getVersionCode();
await project.android?.incrementVersionCode();

----------------------------------------

TITLE: Using Filesystem API in TypeScript
DESCRIPTION: Example of reading, writing, and deleting files using the Filesystem API in a TypeScript environment.

LANGUAGE: typescript
CODE:
import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

const writeSecretFile = async () => {
  await Filesystem.writeFile({
    path: 'secrets/text.txt',
    data: 'This is a test',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });
};

const readSecretFile = async () => {
  const contents = await Filesystem.readFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });

  console.log('secrets:', contents);
};

const deleteSecretFile = async () => {
  await Filesystem.deleteFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
  });
};

const readFilePath = async () => {
  const contents = await Filesystem.readFile({
    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',
  });

  console.log('data:', contents);
};

----------------------------------------

TITLE: Using Device API in TypeScript
DESCRIPTION: Example showing how to get device information and battery status using the Device API

LANGUAGE: typescript
CODE:
import { Device } from '@capacitor/device';

const logDeviceInfo = async () => {
  const info = await Device.getInfo();

  console.log(info);
};

const logBatteryInfo = async () => {
  const info = await Device.getBatteryInfo();

  console.log(info);
};

----------------------------------------

TITLE: Managing Version and Build Numbers in Capacitor
DESCRIPTION: Demonstrates various operations for managing versions and build numbers in iOS and Android projects using the MobileProject API.

LANGUAGE: typescript
CODE:
await project.ios?.setVersion('App', 'Debug', '1.4.5');
await project.ios?.incrementBuild('App');
await project.ios?.getBuild('App', 'Debug');
await project.ios?.getBuild('App', 'Release');
await project.android?.setVersionName('1.0.2');
await project.android?.getVersionName();
await project.android?.setVersionCode(11);
await project.android?.getVersionCode();
await project.android?.incrementVersionCode();

----------------------------------------

TITLE: Angular Deep Link Implementation
DESCRIPTION: Angular implementation of deep link handling using Capacitor App API, including imports, constructor setup, and URL event listener logic.

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { App, URLOpenListenerEvent } from '@capacitor/app';

LANGUAGE: typescript
CODE:
constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

LANGUAGE: typescript
CODE:
initializeApp() {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
        this.zone.run(() => {
            const slug = event.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
        });
    });
}

----------------------------------------

TITLE: Implementing ScreenOrientation Class for Current Orientation in Swift
DESCRIPTION: This snippet defines the ScreenOrientation class with methods to get the current device orientation and convert it to a string representation.

LANGUAGE: swift
CODE:
import Foundation
import UIKit

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }

}

----------------------------------------

TITLE: Implementing Basic Web Plugin in TypeScript
DESCRIPTION: Basic structure of a Capacitor web plugin implementation showing an Echo plugin example with TypeScript interface implementation.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';

import type { EchoPlugin } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    console.log('ECHO', options);
    return options;
  }
}

----------------------------------------

TITLE: Defining Screen Orientation Plugin Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the ScreenOrientation plugin that includes methods for getting orientation, locking/unlocking screen orientation, and handling orientation change events. Uses OrientationType from DOM typings.

LANGUAGE: typescript
CODE:
import type { PluginListenerHandle } from '@capacitor/core';

export interface ScreenOrientationPlugin {
  /**
   * Returns the screen's current orientation.
   */
  orientation(): Promise<{ type: OrientationType }>;

  /**
   * Locks the screen orientation.
   */
  lock(opts: { orientation: OrientationLockType }): Promise<void>;

  /**
   * Unlocks the screen's orientation.
   */
  unlock(): Promise<void>;

  /**
   * Listens for screen orientation changes.
   */
  addListener(
    eventName: 'screenOrientationChange',
    listenerFunc: (orientation: { type: OrientationType }) => void,
  ): Promise<PluginListenerHandle> & PluginListenerHandle;

  /**
   * Removes all listeners
   */
  removeAllListeners(): Promise<void>;
}

----------------------------------------

TITLE: Sharing Content with @capacitor/share in TypeScript
DESCRIPTION: Examples of using the Share API to share various types of content, including text, URLs, and local files.

LANGUAGE: typescript
CODE:
import { Share } from '@capacitor/share';

await Share.share({
  title: 'See cool stuff',
  text: 'Really awesome thing you need to see right meow',
  url: 'http://ionicframework.com/',
  dialogTitle: 'Share with buddies',
});

// Share text only
await Share.share({
  text: 'Really awesome thing you need to see right meow',
});

// Share url only
await Share.share({
  url: 'http://ionicframework.com/',
});

// Share local file using url parameter
const photo = await Camera.getPhoto(options);
await Share.share({
  url: photo.path,
});

// Share multiple files using files parameter
const { photos } = await Camera.pickImages(options);
await Share.share({
  files: photos.map(photo => photo.path!),
});

----------------------------------------

TITLE: Push Notifications Implementation Example
DESCRIPTION: TypeScript example showing how to implement push notification listeners and handle registration

LANGUAGE: typescript
CODE:
import { PushNotifications } from '@capacitor/push-notifications';

const addListeners = async () => {
  await PushNotifications.addListener('registration', token => {
    console.info('Registration token: ', token.value);
  });

  await PushNotifications.addListener('registrationError', err => {
    console.error('Registration error: ', err.error);
  });

  await PushNotifications.addListener('pushNotificationReceived', notification => {
    console.log('Push notification received: ', notification);
  });

  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {
    console.log('Push notification action performed', notification.actionId, notification.inputValue);
  });
}

const registerNotifications = async () => {
  let permStatus = await PushNotifications.checkPermissions();

  if (permStatus.receive === 'prompt') {
    permStatus = await PushNotifications.requestPermissions();
  }

  if (permStatus.receive !== 'granted') {
    throw new Error('User denied permissions!');
  }

  await PushNotifications.register();
}

const getDeliveredNotifications = async () => {
  const notificationList = await PushNotifications.getDeliveredNotifications();
  console.log('delivered notifications', notificationList);
}

----------------------------------------

TITLE: Using Push Notifications in TypeScript
DESCRIPTION: Example TypeScript code demonstrating how to use the Push Notifications API, including adding listeners and handling permissions.

LANGUAGE: typescript
CODE:
import { PushNotifications } from '@capacitor/push-notifications';

const addListeners = async () => {
  await PushNotifications.addListener('registration', token => {
    console.info('Registration token: ', token.value);
  });

  await PushNotifications.addListener('registrationError', err => {
    console.error('Registration error: ', err.error);
  });

  await PushNotifications.addListener('pushNotificationReceived', notification => {
    console.log('Push notification received: ', notification);
  });

  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {
    console.log('Push notification action performed', notification.actionId, notification.inputValue);
  });
}

const registerNotifications = async () => {
  let permStatus = await PushNotifications.checkPermissions();

  if (permStatus.receive === 'prompt') {
    permStatus = await PushNotifications.requestPermissions();
  }

  if (permStatus.receive !== 'granted') {
    throw new Error('User denied permissions!');
  }

  await PushNotifications.register();
}

const getDeliveredNotifications = async () => {
  const notificationList = await PushNotifications.getDeliveredNotifications();
  console.log('delivered notifications', notificationList);
}

----------------------------------------

TITLE: Implementing Action Sheet in TypeScript
DESCRIPTION: Example showing how to use the Action Sheet plugin to display a modal with multiple action options including upload, share and remove functionality

LANGUAGE: typescript
CODE:
import { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';

const showActions = async () => {
  const result = await ActionSheet.showActions({
    title: 'Photo Options',
    message: 'Select an option to perform',
    options: [
      {
        title: 'Upload',
      },
      {
        title: 'Share',
      },
      {
        title: 'Remove',
        style: ActionSheetButtonStyle.Destructive,
      },
    ],
  });

  console.log('Action Sheet result:', result);
};

----------------------------------------

TITLE: Setting Android Permissions for External Storage
DESCRIPTION: XML snippet to add necessary permissions in AndroidManifest.xml for accessing external storage on Android.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Implementing Action Sheet in TypeScript
DESCRIPTION: Example showing how to use the Action Sheet plugin to display a modal with multiple action options including upload, share and remove functionality

LANGUAGE: typescript
CODE:
import { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';

const showActions = async () => {
  const result = await ActionSheet.showActions({
    title: 'Photo Options',
    message: 'Select an option to perform',
    options: [
      {
        title: 'Upload',
      },
      {
        title: 'Share',
      },
      {
        title: 'Remove',
        style: ActionSheetButtonStyle.Destructive,
      },
    ],
  });

  console.log('Action Sheet result:', result);
};

----------------------------------------

TITLE: Implementing Bridge Pattern in Swift Capacitor Plugin
DESCRIPTION: Demonstrates the Bridge pattern implementation in a Capacitor Device plugin using Swift. Shows how platform-specific code is abstracted behind a common interface.

LANGUAGE: swift
CODE:
@objc func getLanguageCode(_ call: CAPPluginCall) {
    let code = implementation.getLanguageCode()
    call.resolve([ "value": code ])
}

----------------------------------------

TITLE: Checking Plugin Availability with Capacitor.isPluginAvailable
DESCRIPTION: Illustrates how to use Capacitor.isPluginAvailable to check if a specific plugin is available on the current platform, including handling cases where the plugin is not available.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Checking Current Platform in Capacitor
DESCRIPTION: Shows how to use the getPlatform function to determine the current platform (web, ios, or android) the app is running on.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Handling Permission Callbacks in Capacitor Android Plugin
DESCRIPTION: This example shows how to implement a permission callback method and initiate a permission request in a plugin method.

LANGUAGE: java
CODE:
@PluginMethod()
public void takePhoto(PluginCall call) {
  if (getPermissionState("camera") != PermissionState.GRANTED) {
    requestPermissionForAlias("camera", call, "cameraPermsCallback");
  } else {
    loadCamera(call);
  }
}

@PermissionCallback
private void cameraPermsCallback(PluginCall call) {
  if (getPermissionState("camera") == PermissionState.GRANTED) {
    loadCamera(call);
  } else {
    call.reject("Permission is required to take a picture");
  }
}

----------------------------------------

TITLE: Requesting Permission and Handling Motion Events in TypeScript
DESCRIPTION: Example of requesting permission for motion tracking, adding a listener for acceleration events, and handling cleanup. This snippet demonstrates how to properly request permissions, start listening for motion events, and remove listeners when no longer needed.

LANGUAGE: typescript
CODE:
import { PluginListenerHandle } from '@capacitor/core';
import { Motion } from '@capacitor/motion';


let accelHandler: PluginListenerHandle;

myButton.addEventListener('click', async () => {
  try {
    await DeviceMotionEvent.requestPermission();
  } catch (e) {
    // Handle error
    return;
  }

  // Once the user approves, can start listening:
  accelHandler = await Motion.addListener('accel', event => {
    console.log('Device motion event:', event);
  });
});

// Stop the acceleration listener
const stopAcceleration = () => {
  if (accelHandler) {
    accelHandler.remove();
  }
};

// Remove all listeners
const removeListeners = () => {
  Motion.removeAllListeners();
};

----------------------------------------

TITLE: Using Filesystem Hooks in React Component
DESCRIPTION: Example showing how to import and use the filesystem hooks within a React function component, demonstrating file reading functionality with useEffect

LANGUAGE: typescript
CODE:
import { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';

const MyComponent = () => (
  const { readFile } = useFilesystem();

  useEffect(() => {
    const readMyFile = async () => {
      const file = await readFile({
        path: filepath,
        directory: FilesystemDirectory.Data
      });
      // ...
    }

    readMyFile();
  }, [ readFile ]);

----------------------------------------

TITLE: Handling Permission Callbacks in Capacitor Android Plugin
DESCRIPTION: This example shows how to implement a permission callback method and initiate a permission request in a plugin method.

LANGUAGE: java
CODE:
@PluginMethod()
public void takePhoto(PluginCall call) {
  if (getPermissionState("camera") != PermissionState.GRANTED) {
    requestPermissionForAlias("camera", call, "cameraPermsCallback");
  } else {
    loadCamera(call);
  }
}

@PermissionCallback
private void cameraPermsCallback(PluginCall call) {
  if (getPermissionState("camera") == PermissionState.GRANTED) {
    loadCamera(call);
  } else {
    call.reject("Permission is required to take a picture");
  }
}

----------------------------------------

TITLE: Implementing Storage Operations in Capacitor with TypeScript
DESCRIPTION: This snippet demonstrates how to use the Storage API in Capacitor for various operations including setting and getting JSON objects, setting and getting simple values, removing items, retrieving keys, and clearing storage.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';

const { Storage } = Plugins;


// JSON "set" example
async setObject() {
  await Storage.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Storage.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

async setItem() {
  await Storage.set({
    key: 'name',
    value: 'Max'
  });
}

async getItem() {
  const { value } = await Storage.get({ key: 'name' });
  console.log('Got item: ', value);
}

async removeItem() {
  await Storage.remove({ key: 'name' });
}

async keys() {
  const { keys } = await Storage.keys();
  console.log('Got keys: ', keys);
}

async clear() {
  await Storage.clear();
}

----------------------------------------

TITLE: Using Accessibility API in Capacitor with TypeScript
DESCRIPTION: This snippet demonstrates how to use the Accessibility API in Capacitor. It shows how to listen for screen reader state changes, check if VoiceOver is enabled, and use the speak function.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';

const { Accessibility, Modals } = Plugins;

Accessibility.addListener('accessibilityScreenReaderStateChange', (state) => {
  console.log(state.value);
});

async isVoiceOverEnabled() {
  var vo = await Accessibility.isScreenReaderEnabled();
  alert('Voice over enabled? ' + vo.value);
}

async speak() {
  var value = await Modals.prompt({
    title: "Value to speak",
    message: "Enter the value to speak"
  });

  Accessibility.speak({value: value.value});
}

----------------------------------------

TITLE: Presenting View Controllers in Capacitor iOS
DESCRIPTION: Shows how to present custom view controllers over the main Capacitor view controller, including handling for iPad devices.

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

LANGUAGE: swift
CODE:
self.setCenteredPopover(ourCustomViewController)
self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)

----------------------------------------

TITLE: Using Preferences API in Capacitor for Key-Value Storage
DESCRIPTION: Demonstrates how to use Capacitor's Preferences API to store and retrieve JSON data. Shows implementation of both setting and getting objects using the key-value storage system.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

// JSON "set" example
async setObject() {
  await Preferences.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Preferences.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

----------------------------------------

TITLE: Opening a URL with @capacitor/browser in TypeScript
DESCRIPTION: Example of how to use the Browser.open() method to open a URL in the in-app browser.

LANGUAGE: typescript
CODE:
import { Browser } from '@capacitor/browser';

const openCapacitorSite = async () => {
  await Browser.open({ url: 'http://capacitorjs.com/' });
};

----------------------------------------

TITLE: Implementing Android Plugin Method
DESCRIPTION: Shows how to implement plugin functionality for Android platform in Java.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic

  call.resolve();
}

----------------------------------------

TITLE: Passing Null Values in TypeScript for Capacitor Plugin Call
DESCRIPTION: Demonstrates how to pass an object containing null values to a Capacitor plugin call. This example shows the structure of data that may require special handling in iOS.

LANGUAGE: typescript
CODE:
{ 'foo': null, 'bar': [1, 2, null, 4]}

----------------------------------------

TITLE: Using Camera.getPhoto() in TypeScript
DESCRIPTION: Example TypeScript code demonstrating how to use the Camera.getPhoto() method to capture or select an image and display it in an HTML image element.

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Emitting Plugin Events in Capacitor Android Plugin
DESCRIPTION: This snippet demonstrates how to emit custom events from a Capacitor Android plugin that can be listened to in the JavaScript code.

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("value", "some value");
notifyListeners("myPluginEvent", ret);

----------------------------------------

TITLE: Implementing Web Functionality for Capacitor Plugin in TypeScript
DESCRIPTION: This code snippet demonstrates how to implement the web functionality for a Capacitor plugin in the web.ts file. It shows the structure for adding the 'openMap' method to the EchoWeb class.

LANGUAGE: typescript
CODE:
import type {
  EchoPlugin,
  OpenMapOptions,
} from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  // other methods

  async openMap(location: OpenMapOptions): Promise<void> {
    // logic here
  }
}

----------------------------------------

TITLE: Taking a Picture with Camera Capacitor Plugin
DESCRIPTION: TypeScript example demonstrating how to use the Camera.getPhoto() method to capture an image and display it in an HTML element.

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Implementing Google Maps in JavaScript
DESCRIPTION: JavaScript and HTML example for creating and interacting with a Google Map.

LANGUAGE: html
CODE:
<capacitor-google-map id="map"></capacitor-google-map>
<button onclick="createMap()">Create Map</button>

<style>
  capacitor-google-map {
    display: inline-block;
    width: 275px;
    height: 400px;
  }
</style>

<script>
  import { GoogleMap } from '@capacitor/google-maps';

  const createMap = async () => {
    const mapRef = document.getElementById('map');

    const newMap = await GoogleMap.create({
      id: 'my-map',
      element: mapRef,
      apiKey: 'YOUR_API_KEY_HERE',
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  };
</script>

----------------------------------------

TITLE: Using Clipboard API in TypeScript
DESCRIPTION: Example of writing to and reading from the clipboard using the Clipboard API. It demonstrates writing a string to the clipboard and then reading and logging the clipboard contents.

LANGUAGE: typescript
CODE:
import { Clipboard } from '@capacitor/clipboard';

const writeToClipboard = async () => {
  await Clipboard.write({
    string: "Hello World!"
  });
};

const checkClipboard = async () => {
  const { type, value } = await Clipboard.read();

  console.log(`Got ${type} from clipboard: ${value}`);
};

----------------------------------------

TITLE: Using Preferences API in Capacitor for JSON Storage
DESCRIPTION: Demonstrates how to store and retrieve JSON data using Capacitor's Preferences API. Shows implementation of setObject and getObject methods for handling structured data storage.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

// JSON "set" example
async setObject() {
  await Preferences.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Preferences.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

----------------------------------------

TITLE: Adding Network Status Change Listener in TypeScript
DESCRIPTION: Method to add a listener for changes in the network connection, returning a PluginListenerHandle.

LANGUAGE: typescript
CODE:
addListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Plugin Availability Check with Capacitor.isPluginAvailable
DESCRIPTION: Shows how to check if a specific plugin is available on the current platform before attempting to use it, with a practical example using the Camera plugin.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Using Dialog API Methods in TypeScript
DESCRIPTION: Example showing how to use alert, confirm, and prompt dialogs with the Dialog API including handling responses

LANGUAGE: typescript
CODE:
import { Dialog } from '@capacitor/dialog';

const showAlert = async () => {
  await Dialog.alert({
    title: 'Stop',
    message: 'this is an error',
  });
};

const showConfirm = async () => {
  const { value } = await Dialog.confirm({
    title: 'Confirm',
    message: `Are you sure you'd like to press the red button?`,
  });

  console.log('Confirmed:', value);
};

const showPrompt = async () => {
  const { value, cancelled } = await Dialog.prompt({
    title: 'Hello',
    message: `What's your name?`,
  });

  console.log('Name:', value);
  console.log('Cancelled:', cancelled);
};

----------------------------------------

TITLE: Dialog Usage Examples in TypeScript
DESCRIPTION: Demonstrates how to use alert, confirm, and prompt dialogs using the Dialog API. Includes handling user responses and checking confirmation status.

LANGUAGE: typescript
CODE:
import { Dialog } from '@capacitor/dialog';

const showAlert = async () => {
  await Dialog.alert({
    title: 'Stop',
    message: 'this is an error',
  });
};

const showConfirm = async () => {
  const { value } = await Dialog.confirm({
    title: 'Confirm',
    message: `Are you sure you'd like to press the red button?`,
  });

  console.log('Confirmed:', value);
};

const showPrompt = async () => {
  const { value, cancelled } = await Dialog.prompt({
    title: 'Hello',
    message: `What's your name?`,
  });

  console.log('Name:', value);
  console.log('Cancelled:', cancelled);
};

----------------------------------------

TITLE: Keyboard Event Listeners Example in TypeScript
DESCRIPTION: Example showing how to add keyboard event listeners for show and hide events, with height information logging

LANGUAGE: typescript
CODE:
import { Keyboard } from '@capacitor/keyboard';

Keyboard.addListener('keyboardWillShow', info => {
  console.log('keyboard will show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardDidShow', info => {
  console.log('keyboard did show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardWillHide', () => {
  console.log('keyboard will hide');
});

Keyboard.addListener('keyboardDidHide', () => {
  console.log('keyboard did hide');
});

----------------------------------------

TITLE: Using Screen Reader API in TypeScript
DESCRIPTION: Example demonstrating how to use the Screen Reader API to listen for state changes, check if a screen reader is enabled, and use text-to-speech functionality.

LANGUAGE: typescript
CODE:
import { ScreenReader } from '@capacitor/screen-reader';

ScreenReader.addListener('screenReaderStateChange', ({ value }) => {
  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);
});

const checkScreenReaderEnabled = async () => {
  const { value } = await ScreenReader.isEnabled();

  console.log('Voice over enabled? ' + value);
};

const sayHello = async () => {
  await ScreenReader.speak({ value: 'Hello World!' });
};

----------------------------------------

TITLE: Initializing Deep Link Routing in Angular
DESCRIPTION: This code snippet demonstrates how to set up deep link routing in an Angular application using the Capacitor App API. It listens for the 'appUrlOpen' event and navigates to the appropriate route based on the incoming URL.

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { App, URLOpenListenerEvent } from '@capacitor/app';

constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

initializeApp() {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
        this.zone.run(() => {
            // Example url: https://beerswift.app/tabs/tab2
            // slug = /tabs/tab2
            const slug = event.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
            // If no match, do nothing - let regular routing
            // logic take over
        });
    });
}

----------------------------------------

TITLE: Initializing Capacitor Plugin with NPM
DESCRIPTION: Command to initialize a new Capacitor plugin project using the official plugin generator. Requires Node LTS version and npm 6+ to be installed.

LANGUAGE: bash
CODE:
npm init @capacitor/plugin@latest

----------------------------------------

TITLE: JavaScript Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in vanilla JavaScript

LANGUAGE: javascript
CODE:
const createMap = async () => {
  const mapRef = document.getElementById('map');

  const newMap = await GoogleMap.create({
    id: 'my-map',
    element: mapRef,
    apiKey: 'YOUR_API_KEY_HERE',
    config: {
      center: {
        lat: 33.6,
        lng: -117.9,
      },
      zoom: 8,
    },
  });
};

----------------------------------------

TITLE: Implementing Push Notifications in Ionic Angular
DESCRIPTION: TypeScript code for the HomePage component to register and handle push notifications using the Capacitor Push Notifications API.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core';

import { ActionPerformed, PushNotificationSchema, PushNotifications, Token } from '@capacitor/push-notifications';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  ngOnInit() {
    console.log('Initializing HomePage');

    // Request permission to use push notifications
    // iOS will prompt user and return if they granted permission or not
    // Android will just grant without prompting
    PushNotifications.requestPermissions().then((result) => {
      if (result.receive === 'granted') {
        // Register with Apple / Google to receive push via APNS/FCM
        PushNotifications.register();
      } else {
        // Show some error
      }
    });

    PushNotifications.addListener('registration', (token: Token) => {
      alert('Push registration success, token: ' + token.value);
    });

    PushNotifications.addListener('registrationError', (error: any) => {
      alert('Error on registration: ' + JSON.stringify(error));
    });

    PushNotifications.addListener('pushNotificationReceived', (notification: PushNotificationSchema) => {
      alert('Push received: ' + JSON.stringify(notification));
    });

    PushNotifications.addListener('pushNotificationActionPerformed', (notification: ActionPerformed) => {
      alert('Push action performed: ' + JSON.stringify(notification));
    });
  }
}

----------------------------------------

TITLE: JavaScript Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in vanilla JavaScript

LANGUAGE: javascript
CODE:
const createMap = async () => {
  const mapRef = document.getElementById('map');

  const newMap = await GoogleMap.create({
    id: 'my-map',
    element: mapRef,
    apiKey: 'YOUR_API_KEY_HERE',
    config: {
      center: {
        lat: 33.6,
        lng: -117.9,
      },
      zoom: 8,
    },
  });
};

----------------------------------------

TITLE: Defining Capacitor Configuration Schema in TypeScript
DESCRIPTION: This extensive TypeScript interface defines the complete schema for Capacitor configuration. It includes all available options with their descriptions, types, and default values where applicable.

LANGUAGE: typescript
CODE:
export interface CapacitorConfig {
  appId?: string;
  appName?: string;
  webDir?: string;
  bundledWebRuntime?: boolean;
  loggingBehavior?: 'none' | 'debug' | 'production';
  overrideUserAgent?: string;
  appendUserAgent?: string;
  backgroundColor?: string;
  android?: {
    path?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    allowMixedContent?: boolean;
    captureInput?: boolean;
    webContentsDebuggingEnabled?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    flavor?: string;
    initialFocus?: boolean;
    minWebViewVersion?: number;
    minHuaweiWebViewVersion?: number;
    buildOptions?: {
      keystorePath?: string;
      keystorePassword?: string;
      keystoreAlias?: string;
      keystoreAliasPassword?: string;
      releaseType?: 'AAB' | 'APK';
      signingType?: 'apksigner' | 'jarsigner';
    };
    useLegacyBridge?: boolean;
  };
  ios?: {
    path?: string;
    scheme?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';
    scrollEnabled?: boolean;
    cordovaLinkerFlags?: string[];
    allowsLinkPreview?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    limitsNavigationsToAppBoundDomains?: boolean;
    preferredContentMode?: 'recommended' | 'desktop' | 'mobile';
    handleApplicationNotifications?: boolean;
    webContentsDebuggingEnabled?: boolean;
  };
  server?: {
    hostname?: string;
    iosScheme?: string;
    androidScheme?: string;
    url?: string;
    cleartext?: boolean;
    allowNavigation?: string[];
    errorPath?: string;
  };
  cordova?: {
    accessOrigins?: string[];
    preferences?: { [key: string]: string | undefined };
    staticPlugins?: string[];
  };
  plugins?: PluginsConfig;
  includePlugins?: string[];
}

----------------------------------------

TITLE: Adding Android Platform to Capacitor Project
DESCRIPTION: Command to add the Android platform to an existing Capacitor project.

LANGUAGE: bash
CODE:
npx cap add android

----------------------------------------

TITLE: Creating EchoPlugin in Java for Capacitor
DESCRIPTION: This snippet shows how to create a custom Capacitor plugin named EchoPlugin in Java. It demonstrates the basic structure of a plugin class, including the necessary annotations and a simple echo method.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Basic Preferences Usage Example in TypeScript
DESCRIPTION: Demonstrates basic operations with the Preferences API including setting, getting, and removing values

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

const setName = async () => {
  await Preferences.set({
    key: 'name',
    value: 'Max',
  });
};

const checkName = async () => {
  const { value } = await Preferences.get({ key: 'name' });

  console.log(`Hello ${value}!`);
};

const removeName = async () => {
  await Preferences.remove({ key: 'name' });
};

----------------------------------------

TITLE: Accessing Plugin Call Data in Swift
DESCRIPTION: This snippet demonstrates how to access data passed to a plugin method from the client, including handling required options and different data types.

LANGUAGE: swift
CODE:
@objc func storeContact(_ call: CAPPluginCall) {
  let name = call.getString("yourName") ?? "default name"
  let address = call.getObject("address") ?? [:]
  let isAwesome = call.getBool("isAwesome") ?? false

  guard let id = call.options["id"] as? String else {
    call.reject("Must provide an id")
    return
  }

  // ...

  call.resolve()
}


----------------------------------------

TITLE: Using Screen Reader API in TypeScript
DESCRIPTION: Example demonstrating how to use the Screen Reader API to listen for state changes, check if a screen reader is enabled, and use text-to-speech functionality.

LANGUAGE: typescript
CODE:
import { ScreenReader } from '@capacitor/screen-reader';

ScreenReader.addListener('screenReaderStateChange', ({ value }) => {
  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);
});

const checkScreenReaderEnabled = async () => {
  const { value } = await ScreenReader.isEnabled();

  console.log('Voice over enabled? ' + value);
};

const sayHello = async () => {
  await ScreenReader.speak({ value: 'Hello World!' });
};

----------------------------------------

TITLE: Using @capacitor/preferences in TypeScript
DESCRIPTION: Example usage of the Preferences API for setting, getting, and removing values.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

const setName = async () => {
  await Preferences.set({
    key: 'name',
    value: 'Max',
  });
};

const checkName = async () => {
  const { value } = await Preferences.get({ key: 'name' });

  console.log(`Hello ${value}!`);
};

const removeName = async () => {
  await Preferences.remove({ key: 'name' });
};

----------------------------------------

TITLE: Motion Event Listener Method Signatures
DESCRIPTION: TypeScript interface definitions for accelerometer and orientation event listeners showing parameter types and return values.

LANGUAGE: typescript
CODE:
addListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle>

addListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle>

removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Using @capacitor/preferences Plugin in TypeScript
DESCRIPTION: Example of setting, getting, and removing a value using the Preferences API in a TypeScript application.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

const setName = async () => {
  await Preferences.set({
    key: 'name',
    value: 'Max',
  });
};

const checkName = async () => {
  const { value } = await Preferences.get({ key: 'name' });

  console.log(`Hello ${value}!`);
};

const removeName = async () => {
  await Preferences.remove({ key: 'name' });
};

----------------------------------------

TITLE: Configuring Cordova Preferences in Capacitor
DESCRIPTION: Example of how to configure Cordova plugin preferences in the Capacitor configuration file.

LANGUAGE: json
CODE:
{
  "cordova": {
    "preferences": {
      "DisableDeploy": "true",
      "CameraUsesGeolocation": "true"
    }
  }
}

----------------------------------------

TITLE: Implementing Status Bar Controls in TypeScript with Capacitor
DESCRIPTION: Example demonstrating status bar event handling and control methods including style changes, visibility toggling, and overlay configuration. Shows implementation of status bar tap events and various API methods.

LANGUAGE: typescript
CODE:
// Events (iOS only)
window.addEventListener('statusTap', function () {
  console.log('statusbar tapped');
});

//API
import { Plugins, StatusBarStyle } from '@capacitor/core';

const { StatusBar } = Plugins;

export class StatusBarExample {
  isStatusBarLight = true;

  changeStatusBar() {
    StatusBar.setStyle({
      style: this.isStatusBarLight ? StatusBarStyle.Dark : StatusBarStyle.Light,
    });
    this.isStatusBarLight = !this.isStatusBarLight;

    // Display content under transparent status bar (Android only)
    StatusBar.setOverlaysWebView({
      overlay: true,
    });
  }

  hideStatusBar() {
    StatusBar.hide();
  }

  showStatusBar() {
    StatusBar.show();
  }
}

----------------------------------------

TITLE: Defining Plugin Method Types in TypeScript
DESCRIPTION: TypeScript interface definitions showing the three different method signature types available in Capacitor plugins: void return, value return, and callback methods.

LANGUAGE: typescript
CODE:
export type CallbackID = string;

export interface MyData {
  data: string;
}

export type MyPluginCallback = (message: MyData | null, err?: any) => void;

export interface MyPlugin {
  method1(): Promise<void>;
  method2(): Promise<MyData>;
  method3(callback: MyPluginCallback): Promise<CallbackID>;
}

----------------------------------------

TITLE: Using Storage API in TypeScript
DESCRIPTION: Example demonstrating how to set, get, and remove a value using the Storage API in a TypeScript environment.

LANGUAGE: typescript
CODE:
import { Storage } from '@capacitor/storage';

const setName = async () => {
  await Storage.set({
    key: 'name',
    value: 'Max',
  });
};

const checkName = async () => {
  const { value } = await Storage.get({ key: 'name' });

  console.log(`Hello ${value}!`);
};

const removeName = async () => {
  await Storage.remove({ key: 'name' });
};

----------------------------------------

TITLE: Configuring Capacitor CLI Hooks in package.json
DESCRIPTION: This snippet demonstrates how to set up Capacitor CLI hooks in the scripts section of a package.json file. It shows examples for all available hooks, each echoing the command and the platform name.

LANGUAGE: json
CODE:
"scripts": {
  "capacitor:copy:before": "echo copy before $CAPACITOR_PLATFORM_NAME",
  "capacitor:copy:after": "echo copy after $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:before": "echo update before $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:after": "echo update after $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:before": "echo sync before $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:after": "echo sync after $CAPACITOR_PLATFORM_NAME"
}

----------------------------------------

TITLE: Opening URL in External Browser
DESCRIPTION: Example of opening a URL in the device's external browser using InAppBrowser.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
await InAppBrowser.openInExternalBrowser({
    url: "https://www.google.com"
});

----------------------------------------

TITLE: Using Clipboard API in TypeScript
DESCRIPTION: This example demonstrates how to use the Clipboard API to write to and read from the system clipboard using TypeScript.

LANGUAGE: typescript
CODE:
import { Clipboard } from '@capacitor/clipboard';

const writeToClipboard = async () => {
  await Clipboard.write({
    string: "Hello World!"
  });
};

const checkClipboard = async () => {
  const { type, value } = await Clipboard.read();

  console.log(`Got ${type} from clipboard: ${value}`);
};

----------------------------------------

TITLE: Setting Android Permissions for Camera Plugin
DESCRIPTION: XML snippet showing the required permissions to be added to AndroidManifest.xml for the Camera plugin to function on Android.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Preferences API Type Definitions
DESCRIPTION: TypeScript interface definitions for the Preferences API methods including configure, get, set, remove, clear, keys, migrate, and removeOld.

LANGUAGE: typescript
CODE:
configure(options: ConfigureOptions) => Promise<void>
get(options: GetOptions) => Promise<GetResult>
set(options: SetOptions) => Promise<void>
remove(options: RemoveOptions) => Promise<void>
clear() => Promise<void>
keys() => Promise<KeysResult>
migrate() => Promise<MigrateResult>
removeOld() => Promise<void>

----------------------------------------

TITLE: Implementing Haptic Feedback Functions
DESCRIPTION: Example implementation of various haptic feedback functions including impact, vibration, and selection feedback

LANGUAGE: typescript
CODE:
import { Haptics, ImpactStyle } from '@capacitor/haptics';

const hapticsImpactMedium = async () => {
  await Haptics.impact({ style: ImpactStyle.Medium });
};

const hapticsImpactLight = async () => {
  await Haptics.impact({ style: ImpactStyle.Light });
};

const hapticsVibrate = async () => {
  await Haptics.vibrate();
};

const hapticsSelectionStart = async () => {
  await Haptics.selectionStart();
};

const hapticsSelectionChanged = async () => {
  await Haptics.selectionChanged();
};

const hapticsSelectionEnd = async () => {
  await Haptics.selectionEnd();
};

----------------------------------------

TITLE: Implementing Echo Plugin in Java for Capacitor Android
DESCRIPTION: This code snippet demonstrates a simple Echo plugin implementation in Java for Capacitor Android. It shows how to receive data from a Plugin Call and return data back to the caller.

LANGUAGE: java
CODE:
package android.plugin.test;

import com.getcapacitor.JSObject;
import com.getcapacitor.NativePlugin;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;

@NativePlugin()
public class EchoPlugin extends Plugin {
    public void load() {
        // Called when the plugin is first constructed in the bridge
    }

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.success(ret);
    }
}

----------------------------------------

TITLE: Using Filesystem API in TypeScript
DESCRIPTION: Example of reading, writing, and deleting files using the Filesystem API.

LANGUAGE: typescript
CODE:
import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

const writeSecretFile = async () => {
  await Filesystem.writeFile({
    path: 'secrets/text.txt',
    data: 'This is a test',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });
};

const readSecretFile = async () => {
  const contents = await Filesystem.readFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });

  console.log('secrets:', contents);
};

const deleteSecretFile = async () => {
  await Filesystem.deleteFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
  });
};

const readFilePath = async () => {
  // Here's an example of reading a file with a full file path. Use this to
  // read binary data (base64 encoded) from plugins that return File URIs, such as
  // the Camera.
  const contents = await Filesystem.readFile({
    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',
  });

  console.log('data:', contents);
};

----------------------------------------

TITLE: Plugin Availability Check with isPluginAvailable
DESCRIPTION: Shows how to check if a specific plugin is available on the current platform, with an example using the Camera plugin.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Defining TypeScript Plugin Interface
DESCRIPTION: TypeScript interface definition for a Capacitor plugin that declares the plugin structure and available methods.

LANGUAGE: typescript
CODE:
declare module '@capacitor/core' {
  interface PluginRegistry {
    Echo: EchoPlugin;
  }
}

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

----------------------------------------

TITLE: Implementing Facade Pattern in Java for Local Notifications Plugin
DESCRIPTION: Example demonstrating the Facade pattern implementation in the Local Notifications plugin for Android. The code shows how complex notification subsystem initialization is simplified through a facade interface.

LANGUAGE: java
CODE:
@Override
public void load() {
    super.load();
    notificationStorage = new NotificationStorage(getContext());
    manager = new LocalNotificationManager( … );
    manager.createNotificationChannel();
    notificationChannelManager = new NotificationChannelManager(getActivity());
    staticBridge = this.bridge;
}

----------------------------------------

TITLE: Implementing Echo Plugin in Swift
DESCRIPTION: Creates a basic Echo plugin class that extends CAPPlugin to handle communication between JavaScript and native code. The plugin includes an echo method that receives a value and returns it back.

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin {
    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve(["value": value])
    }
}

----------------------------------------

TITLE: Creating New Ionic Project with Capacitor
DESCRIPTION: Command to create a new Ionic project with Capacitor pre-installed using the Ionic CLI.

LANGUAGE: bash
CODE:
ionic start

----------------------------------------

TITLE: Converting File Paths with convertFileSrc in TypeScript
DESCRIPTION: Shows how to use the convertFileSrc function to convert device filepaths into Web View-friendly paths, which is necessary due to protocol differences between device files and Capacitor apps.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const savedPhotoFile = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),
document.getElementById("savedPhoto").src = savedPhoto;

----------------------------------------

TITLE: Creating New Ionic Project with Capacitor
DESCRIPTION: Command to create a new Ionic project that includes Capacitor by default

LANGUAGE: bash
CODE:
ionic start

----------------------------------------

TITLE: Changing Package ID in Android Gradle File
DESCRIPTION: Demonstrates how to modify the applicationId in the android/app/build.gradle file to change the app's Package ID (Application ID) for Android.

LANGUAGE: diff
CODE:
defaultConfig {
-       applicationId "com.capacitorjs.app"
+       applicationId "com.mycompany.myapp"

----------------------------------------

TITLE: Dynamic Capacitor Configuration
DESCRIPTION: Complete TypeScript configuration file for managing multiple environment configurations in Capacitor

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

let config: CapacitorConfig;

const baseConfig: CapacitorConfig = {
  appId: 'io.ionic.starter',
  appName: 'My App',
  webDir: 'build',
  bundledWebRuntime: false,
};

switch (process.env.NODE_ENV) {
  case 'qa':
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App QA',
      },
      android: {
        flavor: 'qa',
      },
    };
    break;
  default:
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App',
      },
      android: {
        flavor: 'dev',
      },
    };
    break;
}

export default config;

----------------------------------------

TITLE: Scheduling Local Notifications in Capacitor TypeScript
DESCRIPTION: This code demonstrates how to import and use the LocalNotifications plugin to schedule a notification. It sets a title, body, ID, and schedules the notification to appear 5 seconds in the future.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';
const { LocalNotifications } = Plugins;

const notifs = await LocalNotifications.schedule({
  notifications: [
    {
      title: 'Title',
      body: 'Body',
      id: 1,
      schedule: { at: new Date(Date.now() + 1000 * 5) },
      sound: null,
      attachments: null,
      actionTypeId: '',
      extra: null,
    },
  ],
});
console.log('scheduled notifications', notifs);

----------------------------------------

TITLE: Using Haptics API in TypeScript
DESCRIPTION: Example of using various haptic feedback functions from the @capacitor/haptics plugin, including impact, vibration, and selection feedback.

LANGUAGE: typescript
CODE:
import { Haptics, ImpactStyle } from '@capacitor/haptics';

const hapticsImpactMedium = async () => {
  await Haptics.impact({ style: ImpactStyle.Medium });
};

const hapticsImpactLight = async () => {
  await Haptics.impact({ style: ImpactStyle.Light });
};

const hapticsVibrate = async () => {
  await Haptics.vibrate();
};

const hapticsSelectionStart = async () => {
  await Haptics.selectionStart();
};

const hapticsSelectionChanged = async () => {
  await Haptics.selectionChanged();
};

const hapticsSelectionEnd = async () => {
  await Haptics.selectionEnd();
};

----------------------------------------

TITLE: Creating a New Ionic Project with Capacitor
DESCRIPTION: Command to create a new Ionic project with Capacitor pre-installed using the Ionic CLI.

LANGUAGE: bash
CODE:
ionic start

----------------------------------------

TITLE: Open Browser Method Definition
DESCRIPTION: TypeScript definition for the open method with OpenOptions interface.

LANGUAGE: typescript
CODE:
open(options: OpenOptions) => Promise<void>

----------------------------------------

TITLE: Installing @capacitor/screen-orientation Plugin
DESCRIPTION: This shell command installs the @capacitor/screen-orientation plugin and syncs the Capacitor project.

LANGUAGE: shell
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Basic Preferences Operations in TypeScript
DESCRIPTION: Example showing basic operations with the Preferences API including setting, getting, and removing values using async/await syntax.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

const setName = async () => {
  await Preferences.set({
    key: 'name',
    value: 'Max',
  });
};

const checkName = async () => {
  const { value } = await Preferences.get({ key: 'name' });

  console.log(`Hello ${value}!`);
};

const removeName = async () => {
  await Preferences.remove({ key: 'name' });
};

----------------------------------------

TITLE: Taking a Photo with Capacitor Camera
DESCRIPTION: Example TypeScript code demonstrating how to capture a photo using the Camera API with quality settings and editing options

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Using Device and Battery Info APIs in TypeScript
DESCRIPTION: Example usage of the Device.getInfo() and Device.getBatteryInfo() methods to log device and battery information.

LANGUAGE: typescript
CODE:
import { Device } from '@capacitor/device';

const logDeviceInfo = async () => {
  const info = await Device.getInfo();

  console.log(info);
};

const logBatteryInfo = async () => {
  const info = await Device.getBatteryInfo();

  console.log(info);
};

----------------------------------------

TITLE: Configuring URL Scheme in Android strings.xml
DESCRIPTION: Illustrates how to set a custom URL scheme for deep linking in the strings.xml file of a Capacitor Android app.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Retrieving Device Information in TypeScript
DESCRIPTION: Function to get detailed information about the device, including model, platform, and operating system.

LANGUAGE: typescript
CODE:
getInfo() => Promise<DeviceInfo>

----------------------------------------

TITLE: Implementing Android Functionality for Capacitor Plugin in Java
DESCRIPTION: This snippet shows how to implement Android-specific functionality for a Capacitor plugin in the EchoPlugin.java file. It demonstrates adding the 'openMap' method with latitude and longitude parameters.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic

  call.resolve();
}

----------------------------------------

TITLE: Implementing Facade Pattern in Java Capacitor Plugin
DESCRIPTION: Example from the Local Notifications plugin showing how the Facade pattern simplifies complex subsystem initialization and management in Android. The load() method encapsulates multiple subsystem components behind a simple interface.

LANGUAGE: java
CODE:
@Override
public void load() {
    super.load();
    notificationStorage = new NotificationStorage(getContext());
    manager = new LocalNotificationManager( … );
    manager.createNotificationChannel();
    notificationChannelManager = new NotificationChannelManager(getActivity());
    staticBridge = this.bridge;
}

----------------------------------------

TITLE: Installing Capacitor App Plugin
DESCRIPTION: Commands to install the @capacitor/app plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/app
npx cap sync

----------------------------------------

TITLE: Returning Data from Capacitor iOS Plugin
DESCRIPTION: Demonstrates how to return data back to the client using the resolve() method, supporting JSON-serializable data types.

LANGUAGE: swift
CODE:
call.resolve([
  "added": true,
  "info": [
    "id": id
  ]
])

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Retrieving Device Information in TypeScript
DESCRIPTION: Example of using the Device.getInfo() method to get information about the underlying device, OS, and platform.

LANGUAGE: typescript
CODE:
getInfo() => Promise<DeviceInfo>

----------------------------------------

TITLE: Implementing Deep Link Routing in Angular
DESCRIPTION: Angular implementation for handling deep links using Capacitor's App API and Angular Router. Includes setup in app.component.ts with URL parsing and routing logic.

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { Plugins } from '@capacitor/core';
const { App } = Plugins;

constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

initializeApp() {
    App.addListener('appUrlOpen', (data: any) => {
        this.zone.run(() => {
            const slug = data.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
        });
    });
}

----------------------------------------

TITLE: Querying Network Status in TypeScript
DESCRIPTION: Method to get the current status of the network connection, returning a Promise with ConnectionStatus.

LANGUAGE: typescript
CODE:
getStatus() => Promise<ConnectionStatus>

----------------------------------------

TITLE: Dialog API Method: confirm
DESCRIPTION: TypeScript definition for the confirm method in the Dialog API, used to show a confirmation dialog.

LANGUAGE: typescript
CODE:
confirm(options: ConfirmOptions) => Promise<ConfirmResult>

----------------------------------------

TITLE: URL Translation Methods in iOS Bridge
DESCRIPTION: Methods for translating between web view URLs and native file URLs in iOS.

LANGUAGE: swift
CODE:
func localURL(fromWebURL webURL: URL?) -> URL?

LANGUAGE: swift
CODE:
func portablePath(fromLocalURL localURL: URL?) -> URL?

----------------------------------------

TITLE: Dialog API Method: confirm
DESCRIPTION: TypeScript definition for the confirm method in the Dialog API, used to show a confirmation dialog.

LANGUAGE: typescript
CODE:
confirm(options: ConfirmOptions) => Promise<ConfirmResult>

----------------------------------------

TITLE: Dialog API Method: confirm
DESCRIPTION: TypeScript definition for the confirm method in the Dialog API, used to show a confirmation dialog.

LANGUAGE: typescript
CODE:
confirm(options: ConfirmOptions) => Promise<ConfirmResult>

----------------------------------------

TITLE: Installing Capacitor Device Plugin
DESCRIPTION: Commands to install the latest version of the Capacitor device plugin and sync the native project

LANGUAGE: bash
CODE:
npm install @capacitor/device@latest-5
npx cap sync

----------------------------------------

TITLE: React Deep Link Implementation
DESCRIPTION: React implementation of deep link handling using a custom AppUrlListener component and React Router integration.

LANGUAGE: typescript
CODE:
import React, { useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import { App, URLOpenListenerEvent } from '@capacitor/app';

LANGUAGE: typescript
CODE:
const AppUrlListener: React.FC<any> = () => {
  let history = useHistory();
  useEffect(() => {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
      const slug = event.url.split('.app').pop();
      if (slug) {
        history.push(slug);
      }
    });
  }, []);

  return null;
};

export default AppUrlListener;

----------------------------------------

TITLE: Using Capacitor Share API
DESCRIPTION: Examples demonstrating various ways to use the Share API including sharing text, URLs, and files.

LANGUAGE: typescript
CODE:
import { Share } from '@capacitor/share';

await Share.share({
  title: 'See cool stuff',
  text: 'Really awesome thing you need to see right meow',
  url: 'http://ionicframework.com/',
  dialogTitle: 'Share with buddies',
});

// Share text only
await Share.share({
  text: 'Really awesome thing you need to see right meow',
});

// Share url only
await Share.share({
  url: 'http://ionicframework.com/',
});

// Share local file using url parameter
const photo = await Camera.getPhoto(options);
await Share.share({
  url: photo.path,
});

// Share multiple files using files parameter
const { photos } = await Camera.pickImages(options);
await Share.share({
  files: photos.map(photo => photo.path!),
});

----------------------------------------

TITLE: React Deep Link Implementation
DESCRIPTION: React implementation of deep link handling using a custom AppUrlListener component and React Router integration.

LANGUAGE: typescript
CODE:
import React, { useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import { App, URLOpenListenerEvent } from '@capacitor/app';

LANGUAGE: typescript
CODE:
const AppUrlListener: React.FC<any> = () => {
  let history = useHistory();
  useEffect(() => {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
      const slug = event.url.split('.app').pop();
      if (slug) {
        history.push(slug);
      }
    });
  }, []);

  return null;
};

export default AppUrlListener;

----------------------------------------

TITLE: Checking Platform with getPlatform in TypeScript
DESCRIPTION: Illustrates how to use the getPlatform function to determine the current platform (web, ios, or android) and perform platform-specific operations.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Share API Usage Examples - TypeScript
DESCRIPTION: Examples demonstrating various ways to use the Share API including sharing text, URLs, and files using TypeScript.

LANGUAGE: typescript
CODE:
import { Share } from '@capacitor/share';

await Share.share({
  title: 'See cool stuff',
  text: 'Really awesome thing you need to see right meow',
  url: 'http://ionicframework.com/',
  dialogTitle: 'Share with buddies',
});

// Share text only
await Share.share({
  text: 'Really awesome thing you need to see right meow',
});

// Share url only
await Share.share({
  url: 'http://ionicframework.com/',
});

// Share local file using url parameter
const photo = await Camera.getPhoto(options);
await Share.share({
  url: photo.path,
});

// Share multiple files using files parameter
const { photos } = await Camera.pickImages(options);
await Share.share({
  files: photos.map(photo => photo.path!),
});

----------------------------------------

TITLE: Implementing iOS Functionality for Capacitor Plugin in Swift
DESCRIPTION: This code snippet demonstrates how to implement iOS-specific functionality for a Capacitor plugin in the EchoPlugin.swift file. It shows the implementation of the 'openMap' method with latitude and longitude parameters.

LANGUAGE: swift
CODE:
@objc func openMap(_ call: CAPPluginCall) {
  let latitude = call.getString("latitude")
  let longitude = call.getNumber("longitude")

  // more logic

  call.resolve()
}

----------------------------------------

TITLE: Implementing Custom Echo Plugin in Swift for Capacitor
DESCRIPTION: This Swift code defines a custom Capacitor plugin called EchoPlugin. It implements an 'echo' method that receives a value and returns it. The plugin extends CAPPlugin and uses @objc decorators for Objective-C compatibility.

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin {
    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve(["value": value])
    }
}

----------------------------------------

TITLE: Using CapacitorHttp for HTTP Requests
DESCRIPTION: Example TypeScript code showing how to make GET and POST requests using the CapacitorHttp plugin

LANGUAGE: typescript
CODE:
import { CapacitorHttp } from '@capacitor/core';

// Example of a GET request
const doGet = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    params: { size: 'XL' },
  };

  const response: HttpResponse = await CapacitorHttp.get(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'GET' })
};

// Example of a POST request. Note: data
// can be passed as a raw JS Object (must be JSON serializable)
const doPost = () => {
  const options = {
    url: 'https://example.com/my/api',
    headers: { 'X-Fake-Header': 'Fake-Value' },
    data: { foo: 'bar' },
  };

  const response: HttpResponse = await CapacitorHttp.post(options);

  // or...
  // const response = await CapacitorHttp.request({ ...options, method: 'POST' })
};

----------------------------------------

TITLE: Action Sheet API Method Definition
DESCRIPTION: TypeScript interface definition for the showActions method that displays an action sheet modal

LANGUAGE: typescript
CODE:
showActions(options: ShowActionsOptions) => Promise<ShowActionsResult>

----------------------------------------

TITLE: Capacitor Config with Type References
DESCRIPTION: Example of using plugin type definitions in a Capacitor configuration file

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor-community/my-cool-plugin" />
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: "com.company.app",
  ...
  plugins: {
    MyCoolPlugin: {
      style: "dark",
      iconColor: "#034821"
    }
  }
}
export default config;

----------------------------------------

TITLE: Accessing Bridge in Swift for Capacitor iOS
DESCRIPTION: Demonstrates how to access the bridge in a Capacitor iOS plugin and perform an early exit if the bridge is not available.

LANGUAGE: swift
CODE:
self.bridge?

LANGUAGE: swift
CODE:
guard let bridge = self.bridge else { return }

----------------------------------------

TITLE: Android Permission Configuration
DESCRIPTION: XML configuration for adding exact alarm scheduling permission to Android manifest

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />

----------------------------------------

TITLE: Opening a URL with @capacitor/browser in TypeScript
DESCRIPTION: Example of how to use the Browser.open() method to open a URL in an in-app browser.

LANGUAGE: typescript
CODE:
import { Browser } from '@capacitor/browser';

const openCapacitorSite = async () => {
  await Browser.open({ url: 'http://capacitorjs.com/' });
};

----------------------------------------

TITLE: Initializing ScreenOrientationWeb Class in TypeScript
DESCRIPTION: Defines the ScreenOrientationWeb class that extends WebPlugin and implements the ScreenOrientationPlugin interface. The constructor sets up an event listener for orientation changes.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';
import type { ScreenOrientationPlugin } from './definitions';

export class ScreenOrientationWeb extends WebPlugin implements ScreenOrientationPlugin {
  constructor() {
    super();
    window.screen.orientation.addEventListener("change", () => {
      const type = window.screen.orientation.type;
      this.notifyListeners("screenOrientationChange", { type });
    });
  }
}

----------------------------------------

TITLE: Screen Orientation Lifecycle Management
DESCRIPTION: React useEffect hook implementation to initialize screen orientation and clean up listeners.

LANGUAGE: typescript
CODE:
useEffect(() => {
  ScreenOrientation.orientation().then(res => setOrientation(res.type));

  return () => {
    ScreenOrientation.removeAllListeners();
  };
}, []);

----------------------------------------

TITLE: Dynamic Screen Orientation Control
DESCRIPTION: TypeScript code demonstrating how to programmatically lock and unlock screen orientation using the Capacitor screen orientation plugin.

LANGUAGE: typescript
CODE:
import { ScreenOrientation } from '@capacitor/screen-orientation';
...
await ScreenOrientation.lock({ orientation: 'portrait' });
await ScreenOrientation.lock({ orientation: 'landscape' });

// To unlock orientation which will default back to the global setting:
await ScreenOrientation.unlock();

----------------------------------------

TITLE: Basic Geolocation Usage Example
DESCRIPTION: Example showing how to get the current position using the Geolocation plugin

LANGUAGE: typescript
CODE:
import { Geolocation } from '@capacitor/geolocation';

const printCurrentPosition = async () => {
  const coordinates = await Geolocation.getCurrentPosition();

  console.log('Current position:', coordinates);
};

----------------------------------------

TITLE: Presenting View Controllers in iOS
DESCRIPTION: Examples of presenting native view controllers using the Capacitor bridge, including both standard presentation and iPad-specific popover presentation.

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

LANGUAGE: swift
CODE:
self.setCenteredPopover(ourCustomViewController)
self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)

----------------------------------------

TITLE: Screen Orientation Change Event Listener
DESCRIPTION: TypeScript function to add an event listener for screen orientation changes, providing orientation updates.

LANGUAGE: typescript
CODE:
addListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Handling Screen Orientation Change in TypeScript React
DESCRIPTION: This snippet shows how to track screen orientation changes using React hooks and the ScreenOrientation API. It sets up a state variable, adds an event listener, and cleans up the listener when the component unmounts.

LANGUAGE: typescript
CODE:
const [orientation, setOrientation] = useState<string>('');

ScreenOrientation.addListener('screenOrientationChange', res =>
  setOrientation(res.type),
);

useEffect(() => {
  ScreenOrientation.orientation().then(res => setOrientation(res.type));

  return () => {
    ScreenOrientation.removeAllListeners();
  };
}, []);

----------------------------------------

TITLE: Confirm Method Type Definition
DESCRIPTION: TypeScript type definition for the confirm method showing parameter types and return value.

LANGUAGE: typescript
CODE:
confirm(options: ConfirmOptions) => Promise<ConfirmResult>

----------------------------------------

TITLE: Updating Capacitor Core and CLI Dependencies
DESCRIPTION: This snippet shows how to update the Capacitor Core and CLI dependencies to version 2 using npm.

LANGUAGE: bash
CODE:
npm install @capacitor/cli@2 @capacitor/core@2

----------------------------------------

TITLE: Using Device API in TypeScript
DESCRIPTION: Example of how to use the Device API to log device information and battery status.

LANGUAGE: typescript
CODE:
import { Device } from '@capacitor/device';

const logDeviceInfo = async () => {
  const info = await Device.getInfo();

  console.log(info);
};

const logBatteryInfo = async () => {
  const info = await Device.getBatteryInfo();

  console.log(info);
};

----------------------------------------

TITLE: Implementing Haptic Feedback Examples
DESCRIPTION: Example implementation showing different haptic feedback methods including impact, vibration, and selection feedback

LANGUAGE: typescript
CODE:
import { Haptics, ImpactStyle } from '@capacitor/haptics';

const hapticsImpactMedium = async () => {
  await Haptics.impact({ style: ImpactStyle.Medium });
};

const hapticsImpactLight = async () => {
  await Haptics.impact({ style: ImpactStyle.Light });
};

const hapticsVibrate = async () => {
  await Haptics.vibrate();
};

const hapticsSelectionStart = async () => {
  await Haptics.selectionStart();
};

const hapticsSelectionChanged = async () => {
  await Haptics.selectionChanged();
};

const hapticsSelectionEnd = async () => {
  await Haptics.selectionEnd();
};

----------------------------------------

TITLE: Verifying Plugin Availability in Capacitor
DESCRIPTION: Shows how to use the isPluginAvailable function to check if a specific plugin is available on the current platform, allowing for conditional code execution based on plugin availability.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Implementing getCurrentOrientationType in ScreenOrientation Class
DESCRIPTION: Defines the ScreenOrientation class with methods to get the current orientation type and convert device orientation to orientation type string.

LANGUAGE: swift
CODE:
import Foundation
import UIKit
import Capacitor

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }

}

----------------------------------------

TITLE: Using Dialog API in TypeScript
DESCRIPTION: Example demonstrating how to use the Dialog API for alerts, confirmations, and prompts in a TypeScript application.

LANGUAGE: typescript
CODE:
import { Dialog } from '@capacitor/dialog';

const showAlert = async () => {
  await Dialog.alert({
    title: 'Stop',
    message: 'this is an error',
  });
};

const showConfirm = async () => {
  const { value } = await Dialog.confirm({
    title: 'Confirm',
    message: `Are you sure you'd like to press the red button?`,
  });

  console.log('Confirmed:', value);
};

const showPrompt = async () => {
  const { value, cancelled } = await Dialog.prompt({
    title: 'Hello',
    message: `What's your name?`,
  });

  console.log('Name:', value);
  console.log('Cancelled:', cancelled);
};

----------------------------------------

TITLE: Preferences Configuration Method
DESCRIPTION: TypeScript interface showing the configure method signature for runtime configuration

LANGUAGE: typescript
CODE:
configure(options: ConfigureOptions) => Promise<void>

----------------------------------------

TITLE: iOS Plugin Call Management Methods
DESCRIPTION: Core methods available in iOS for managing plugin calls, including saving, retrieving, and releasing calls. These methods are used when a plugin call needs to persist beyond its initial execution.

LANGUAGE: swift
CODE:
func saveCall(_ call: CAPPluginCall)
func savedCall(withID: String) -> CAPPluginCall?
func releaseCall(_ call: CAPPluginCall)
func releaseCall(withID: String)

----------------------------------------

TITLE: Accessing Bridge Reference in Java
DESCRIPTION: Shows how to access the Capacitor bridge instance from within a plugin.

LANGUAGE: java
CODE:
this.bridge

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Importing and Using Toast API in Capacitor (TypeScript)
DESCRIPTION: This snippet demonstrates how to import the Toast plugin from Capacitor core and use it to display a simple toast message. It shows the basic usage of the 'show' method with a text option.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';
const { Toast } = Plugins;

async show() {
  await Toast.show({
    text: 'Hello!'
  });
}

----------------------------------------

TITLE: Using AppLauncher in TypeScript
DESCRIPTION: Example TypeScript code demonstrating how to check if a URL can be opened and how to open a URL using the AppLauncher API.

LANGUAGE: typescript
CODE:
import { AppLauncher } from '@capacitor/app-launcher';

const checkCanOpenUrl = async () => {
  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });

  console.log('Can open url: ', value);
};

const openPortfolioPage = async () => {
  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });
};

----------------------------------------

TITLE: Implementing Screen Orientation Locking in iOS
DESCRIPTION: This code adds methods to ScreenOrientation and ScreenOrientationPlugin classes to lock and unlock screen orientation.

LANGUAGE: swift
CODE:
public func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {
  DispatchQueue.main.async {
    let mask = self.fromOrientationTypeToMask(orientationType)
    let orientation = self.fromOrientationTypeToInt(orientationType)
    UIDevice.current.setValue(orientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion(mask)
  }
}

@objc public func lock(_ call: CAPPluginCall) {
  guard let lockToOrientation = call.getString("orientation") else {
    call.reject("Input option 'orientation' must be provided.")
    return
  }
  implementation.lock(lockToOrientation, completion: { (mask) -> Void in
    ScreenOrientationPlugin.supportedOrientations = mask;
    call.resolve()
  })
}

public func unlock(completion: @escaping () -> Void) {
  DispatchQueue.main.async {
    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue
    UIDevice.current.setValue(unknownOrientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion()
  }
}

@objc public func unlock(_ call: CAPPluginCall) {
  implementation.unlock {
    ScreenOrientationPlugin.supportedOrientations = UIInterfaceOrientationMask.all
    call.resolve()
  }
}

----------------------------------------

TITLE: iOS Scheme Configuration in Capacitor
DESCRIPTION: TypeScript configuration for iOS scheme in Capacitor config file

LANGUAGE: typescript
CODE:
ios: {
  scheme: 'App QA',
}

----------------------------------------

TITLE: Implementing Screen Orientation Methods in TypeScript
DESCRIPTION: Implements the orientation, lock, and unlock methods for the ScreenOrientationWeb class. These methods interact with the Screen Orientation Web API.

LANGUAGE: typescript
CODE:
async orientation(): Promise<{ type: OrientationType }> {
  return { type: window.screen.orientation.type };
}

async lock(opts: { orientation: OrientationLockType }): Promise<void> {
  await window.screen.orientation.lock(opts.orientation);
}

async unlock(): Promise<void> {
  window.screen.orientation.unlock();
}

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Opening URL with Capacitor Browser
DESCRIPTION: Example demonstrating how to open a URL using the Browser plugin in a Capacitor application.

LANGUAGE: typescript
CODE:
import { Browser } from '@capacitor/browser';

const openCapacitorSite = async () => {
  await Browser.open({ url: 'http://capacitorjs.com/' });
};

----------------------------------------

TITLE: Returning Complex Data from a Plugin Method in Java
DESCRIPTION: This snippet demonstrates how to return complex JSON-serializable data from a plugin method using JSObject.

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("added", true);
JSObject info = new JSObject();
info.put("id", "unique-id-1234");
ret.put("info", info);
call.resolve(ret);

----------------------------------------

TITLE: Language Code Method Implementation
DESCRIPTION: Method to get the device's current language locale code

LANGUAGE: typescript
CODE:
getLanguageCode() => Promise<GetLanguageCodeResult>

----------------------------------------

TITLE: Running Capacitor App on Android Device
DESCRIPTION: This command runs a debug build of the Capacitor app on an Android device for testing purposes.

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Angular Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in an Angular application with TypeScript

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';

@Component({
  template: `
    <capacitor-google-map #map></capacitor-google-map>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-map {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Using Action Sheet in TypeScript
DESCRIPTION: Example of how to use the Action Sheet API to show a native action sheet with multiple options.

LANGUAGE: typescript
CODE:
import { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';

const showActions = async () => {
  const result = await ActionSheet.showActions({
    title: 'Photo Options',
    message: 'Select an option to perform',
    options: [
      {
        title: 'Upload',
      },
      {
        title: 'Share',
      },
      {
        title: 'Remove',
        style: ActionSheetButtonStyle.Destructive,
      },
    ],
  });

  console.log('Action Sheet result:', result);
};

----------------------------------------

TITLE: Camera API Method Definition in TypeScript
DESCRIPTION: TypeScript interface definition for the getPhoto method showing the required CameraOptions parameter and CameraPhoto return type.

LANGUAGE: typescript
CODE:
getPhoto(options: CameraOptions) => Promise<CameraPhoto>

----------------------------------------

TITLE: Implementing iOS Plugin Method
DESCRIPTION: Shows implementation of the plugin method for iOS platform in Swift.

LANGUAGE: swift
CODE:
@objc func openMap(_ call: CAPPluginCall) {
  let latitude = call.getString("latitude")
  let longitude = call.getNumber("longitude")

  // more logic

  call.resolve()
}

----------------------------------------

TITLE: ProGuard Rules for Plugin Protection
DESCRIPTION: ProGuard configuration rules to prevent code optimization from breaking Capacitor plugin functionality.

LANGUAGE: text
CODE:
-keep class com.mythirdpartyplugin.** { *; }

----------------------------------------

TITLE: Implementing Bridge Pattern in Swift for Device Plugin
DESCRIPTION: Example of the Bridge design pattern from the Device plugin, showing how implementation details are abstracted away from the client code. The method getLanguageCode delegates to an implementation class while handling the response formatting.

LANGUAGE: swift
CODE:
@objc func getLanguageCode(_ call: CAPPluginCall) {
    let code = implementation.getLanguageCode()
    call.resolve([ "value": code ])
}

----------------------------------------

TITLE: Implementing Google Maps in Angular
DESCRIPTION: Angular component example for creating and interacting with a Google Map.

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';

@Component({
  template: `
    <capacitor-google-map #map></capacitor-google-map>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-map {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Handling Unavailable API Error in Web Plugin
DESCRIPTION: Shows how to handle cases where a web API is not available in the current browser. It checks for the existence of the API and throws an 'unavailable' error if not present.

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  if (typeof navigator === 'undefined' || !navigator.geolocation) {
    throw this.unavailable('Geolocation API not available in this browser.');
  }

  // TODO: actual web implementation
}

----------------------------------------

TITLE: Emitting Plugin Events in Capacitor iOS
DESCRIPTION: Shows how to emit custom events from a Capacitor iOS plugin that can be listened to in the web app.

LANGUAGE: swift
CODE:
self.notifyListeners("myPluginEvent", data: [:])

----------------------------------------

TITLE: Device Info Method Implementation
DESCRIPTION: Method to get information about the device, OS, and platform

LANGUAGE: typescript
CODE:
getInfo() => Promise<DeviceInfo>

----------------------------------------

TITLE: Configuring Date Serialization in Swift Capacitor Plugin
DESCRIPTION: Shows how to configure a Capacitor plugin in Swift to opt-out of automatic date serialization. This affects how Date objects are passed from web to native code.

LANGUAGE: swift
CODE:
override func load() {
    shouldStringifyDatesInCalls = false
}

----------------------------------------

TITLE: Generating Capacitor Plugin Project with npx
DESCRIPTION: Command to scaffold a new Capacitor plugin project using the @capacitor/create-plugin package. It sets up the basic structure and configuration for a global plugin.

LANGUAGE: bash
CODE:
npx @capacitor/create-plugin \
  --name @capacitor-community/screen-orientation \
  --package-id io.ionic.plugins.screenorientation \
  --class-name ScreenOrientation \
  --repo "https://ionic.io" \
  --license "MIT" \
  --description "Work with the screen orientation in a common way for iOS, Android, and web"

----------------------------------------

TITLE: Opening Native IDEs for iOS and Android
DESCRIPTION: Commands to open the native IDEs (Xcode for iOS, Android Studio for Android) after updating the Capacitor configuration.

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: ProGuard Rules for Plugin Protection
DESCRIPTION: ProGuard configuration rules to prevent code optimization from breaking Capacitor plugin functionality.

LANGUAGE: text
CODE:
-keep class com.mythirdpartyplugin.** { *; }

----------------------------------------

TITLE: Registering ScreenOrientationPlugin with Capacitor in Swift
DESCRIPTION: Defines the ScreenOrientationPlugin class, which implements CAPPlugin and CAPBridgedPlugin protocols. It specifies the plugin methods and their return types.

LANGUAGE: swift
CODE:
@objc(ScreenOrientationPlugin)
public class ScreenOrientationPlugin: CAPPlugin, CAPBridgedPlugin {
  public let identifier = "ScreenOrientationPlugin"
  public let jsName = "ScreenOrientation"
  public let pluginMethods: [CAPPluginMethod] = [
      CAPPluginMethod(name: "orientation", returnType: CAPPluginReturnPromise),
      CAPPluginMethod(name: "lock", returnType: CAPPluginReturnPromise),
      CAPPluginMethod(name: "unlock", returnType: CAPPluginReturnPromise)
  ]

  @objc public func orientation(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func lock(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func unlock(_ call: CAPPluginCall) {
    call.resolve();
  }
}

----------------------------------------

TITLE: Checking Plugin Availability in Capacitor (TypeScript)
DESCRIPTION: Demonstrates how to check if a specific plugin is available in the current Capacitor environment using isPluginAvailable function.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';
const isAvailable = Capacitor.isPluginAvailable('Camera');

----------------------------------------

TITLE: Implementing Plugin Load Method in Capacitor iOS
DESCRIPTION: Demonstrates how to run code when the plugin is first loaded, useful for setting up event handlers or other initialization tasks.

LANGUAGE: swift
CODE:
override public func load() {
}

----------------------------------------

TITLE: Using Keyboard Event Listeners in TypeScript
DESCRIPTION: Example of adding event listeners for keyboard show and hide events using the Keyboard API.

LANGUAGE: typescript
CODE:
import { Keyboard } from '@capacitor/keyboard';

Keyboard.addListener('keyboardWillShow', info => {
  console.log('keyboard will show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardDidShow', info => {
  console.log('keyboard did show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardWillHide', () => {
  console.log('keyboard will hide');
});

Keyboard.addListener('keyboardDidHide', () => {
  console.log('keyboard did hide');
});

----------------------------------------

TITLE: Using Clipboard API in TypeScript
DESCRIPTION: Example of writing to and reading from the clipboard using the @capacitor/clipboard plugin. It demonstrates how to write a string to the clipboard and how to read and log the clipboard contents.

LANGUAGE: typescript
CODE:
import { Clipboard } from '@capacitor/clipboard';

const writeToClipboard = async () => {
  await Clipboard.write({
    string: "Hello World!"
  });
};

const checkClipboard = async () => {
  const { type, value } = await Clipboard.read();

  console.log(`Got ${type} from clipboard: ${value}`);
};

----------------------------------------

TITLE: Syncing Web Code to Capacitor Project
DESCRIPTION: This command copies the built web bundle to Android and iOS projects and updates native dependencies used by Capacitor.

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Implementing Permissions in Capacitor Android Plugin
DESCRIPTION: This example shows how to define and request permissions in a Capacitor Android plugin using the @CapacitorPlugin and @Permission annotations.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(
            alias = "camera",
            strings = { Manifest.permission.CAMERA }
        ),
        @Permission(
            alias = "storage",
            strings = {
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
            }
        )
    }
)
public class FooBarPlugin extends Plugin {
    // ...
}

----------------------------------------

TITLE: Implementing Callback Methods in Java and Objective-C
DESCRIPTION: Implementation examples for callback methods in Android (Java) and iOS (Objective-C). These methods are used for returning data repeatedly and require saving the call for later invocation.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
public void method3(PluginCall call) {
}

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);
)

----------------------------------------

TITLE: Setting Text Zoom Level
DESCRIPTION: TypeScript method to set the current text zoom level using a decimal value (e.g., 1.2 for 120%).

LANGUAGE: typescript
CODE:
set(options: SetOptions) => Promise<void>

----------------------------------------

TITLE: Using Keyboard Event Listeners in TypeScript
DESCRIPTION: Example of how to add event listeners for keyboard show and hide events using the Keyboard API.

LANGUAGE: typescript
CODE:
import { Keyboard } from '@capacitor/keyboard';

Keyboard.addListener('keyboardWillShow', info => {
  console.log('keyboard will show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardDidShow', info => {
  console.log('keyboard did show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardWillHide', () => {
  console.log('keyboard will hide');
});

Keyboard.addListener('keyboardDidHide', () => {
  console.log('keyboard did hide');
});

----------------------------------------

TITLE: Using Capacitor Cookies API Methods
DESCRIPTION: Demonstrates various methods for managing cookies including getting, setting, deleting and clearing cookies using the Capacitor Cookies API.

LANGUAGE: typescript
CODE:
import { CapacitorCookies } from '@capacitor/core';

const getCookies = () => {
  return document.cookie;
};

const setCookie = () => {
  document.cookie = key + '=' + value;
};

const setCapacitorCookie = async () => {
  await CapacitorCookies.setCookie({
    url: 'http://example.com',
    key: 'language',
    value: 'en',
  });
};

const deleteCookie = async () => {
  await CapacitorCookies.deleteCookie({
    url: 'https://example.com',
    key: 'language',
  });
};

const clearCookiesOnUrl = async () => {
  await CapacitorCookies.clearCookies({
    url: 'https://example.com',
  });
};

const clearAllCookies = async () => {
  await CapacitorCookies.clearAllCookies();
};

----------------------------------------

TITLE: Running Capacitor CLI Build and Deploy Command
DESCRIPTION: Command syntax for running the Capacitor CLI 'cap run' command. This command syncs, builds, and deploys a native app to a target device. Supports platforms like Android and iOS with various configuration options including flavor selection, scheme configuration, and live reload capabilities.

LANGUAGE: bash
CODE:
npx cap run [options] <platform>

----------------------------------------

TITLE: Initializing Capacitor Plugin Project with NPM
DESCRIPTION: Command to create a new Capacitor plugin project using the official plugin generator tool. Requires Node LTS version and npm 6+ to be installed.

LANGUAGE: bash
CODE:
npm init @capacitor/plugin

----------------------------------------

TITLE: Screen Reader API Method: addListener
DESCRIPTION: TypeScript declaration for adding a screen reader state change listener

LANGUAGE: typescript
CODE:
addListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Registering Custom Plugin in Capacitor Android MainActivity
DESCRIPTION: This Java code snippet demonstrates how to register a custom plugin in the MainActivity of a Capacitor Android project. It shows the process of adding the custom plugin class to the list of plugins initialized with the Capacitor bridge.

LANGUAGE: java
CODE:
// Other imports...
import com.example.myapp.CustomNativePlugin;

public class MainActivity extends BridgeActivity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // Initializes the Bridge
    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{
      // Additional plugins you've installed go here
      // Ex: add(TotallyAwesomePlugin.class);
      add(CustomNativePlugin.class);
    }});
  }
}

----------------------------------------

TITLE: Generating Capacitor Plugin Project with CLI
DESCRIPTION: Command to scaffold a new Capacitor plugin project using @capacitor/create-plugin CLI tool, setting up package name, ID, class name and other metadata.

LANGUAGE: bash
CODE:
npx @capacitor/create-plugin \
  --name @capacitor-community/screen-orientation \
  --package-id io.ionic.plugins.screenorientation \
  --class-name ScreenOrientation \
  --repo "https://ionic.io" \
  --license "MIT" \
  --description "Work with the screen orientation in a common way for iOS, Android, and web"

----------------------------------------

TITLE: Changing Package ID in Android build.gradle
DESCRIPTION: Demonstrates how to change the application ID (package ID) in the android/app/build.gradle file for a Capacitor Android app.

LANGUAGE: diff
CODE:
defaultConfig {
-       applicationId "com.capacitorjs.app"
+       applicationId "com.mycompany.myapp"

----------------------------------------

TITLE: Screen Orientation Lock Implementation
DESCRIPTION: Event handler implementation for locking screen orientation to landscape mode.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.lock({ orientation: "landscape-primary" })}

----------------------------------------

TITLE: Initializing Screen Orientation Plugin Class
DESCRIPTION: Base implementation of the ScreenOrientationPlugin class with method stubs for orientation management.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "ScreenOrientation")
public class ScreenOrientationPlugin extends Plugin {

   @PluginMethod()
   public void orientation(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void lock(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void unlock(PluginCall call) {
       call.resolve();
   }
}

----------------------------------------

TITLE: Converting File Paths in Capacitor (TypeScript)
DESCRIPTION: Shows how to convert device file paths to Web View-compatible URLs using convertFileSrc function, including filesystem operations.

LANGUAGE: typescript
CODE:
const savedPhotoFile = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

const savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),
document.getElementById("savedPhoto").src = savedPhoto;

----------------------------------------

TITLE: Emitting Plugin Events in Capacitor Android
DESCRIPTION: This example shows how to emit custom events from a Capacitor Android plugin that can be listened to in JavaScript.

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("value", "some value");
notifyListeners("myPluginEvent", ret);

----------------------------------------

TITLE: Using Action Sheet in TypeScript
DESCRIPTION: Example of how to use the Action Sheet API to display options and handle user selection. It demonstrates creating an action sheet with multiple options, including a destructive action.

LANGUAGE: typescript
CODE:
import { ActionSheet, ActionSheetButtonStyle } from '@capacitor/action-sheet';

const showActions = async () => {
  const result = await ActionSheet.showActions({
    title: 'Photo Options',
    message: 'Select an option to perform',
    options: [
      {
        title: 'Upload',
      },
      {
        title: 'Share',
      },
      {
        title: 'Remove',
        style: ActionSheetButtonStyle.Destructive,
      },
    ],
  });

  console.log('Action Sheet result:', result);
};

----------------------------------------

TITLE: Using Camera.getPhoto() in TypeScript
DESCRIPTION: Example of how to use the Camera.getPhoto() method to take a picture or select an image from the gallery.

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Extending WebPlugin for Screen Orientation in TypeScript
DESCRIPTION: Declares the ScreenOrientationWeb class that extends WebPlugin and sets up a listener for screen orientation changes.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';
import type { ScreenOrientationPlugin } from './definitions';

export class ScreenOrientationWeb extends WebPlugin {
  constructor() {
    super();
    window.screen.orientation.addEventListener("change", () => {
      const type = window.screen.orientation.type;
      this.notifyListeners("screenOrientationChange", { type });
    });
  }
}

----------------------------------------

TITLE: Creating Manual Mock for Capacitor Storage Plugin in TypeScript
DESCRIPTION: Demonstrates how to create a manual mock for the Capacitor Storage plugin. This mock implements the basic methods of the Storage plugin without making native calls, making it suitable for unit testing.

LANGUAGE: typescript
CODE:
export const Storage = {
  async get(data: { key: string }): Promise<{ value: string | undefined }> {
    return { value: undefined };
  },

  async set(data: { key: string; value: string }): Promise<void> {},
  async clear(): Promise<void> {},
};

----------------------------------------

TITLE: Notification Method Definition
DESCRIPTION: TypeScript method signature for triggering haptics notification feedback with customizable options.

LANGUAGE: typescript
CODE:
notification(options: HapticsNotificationOptions) => void

----------------------------------------

TITLE: Platform Detection with getPlatform
DESCRIPTION: Shows how to detect the current platform (web, iOS, or Android) using the getPlatform utility function.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Plugin Configuration in TypeScript
DESCRIPTION: Example configuration for the Splash Screen plugin in capacitor.config.ts with type references.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/splash-screen" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    SplashScreen: {
      launchShowDuration: 3000,
      launchAutoHide: true,
      backgroundColor: "#ffffffff",
      androidSplashResourceName: "splash",
      androidScaleType: "CENTER_CROP",
      showSpinner: true,
      androidSpinnerStyle: "large",
      iosSpinnerStyle: "small",
      spinnerColor: "#999999",
      splashFullScreen: true,
      splashImmersive: true,
      layoutName: "launch_screen",
      useDialog: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Implementing Permission Methods in Web Plugin Class
DESCRIPTION: Shows the skeleton implementation of checkPermissions and requestPermissions methods in the web plugin class. It includes a check for the Permissions API availability.

LANGUAGE: typescript
CODE:
import { PermissionStatus } from './definitions';

export class EchoWeb extends WebPlugin implements EchoPlugin {
  async echo(options: { value: string }) {
    ...
  }

  async checkPermissions(): Promise<PermissionStatus> {
    if (typeof navigator === 'undefined' || !navigator.permissions) {
      throw this.unavailable('Permissions API not available in this browser.');
    }

    const permission = await navigator.permissions.query( ... );

    // TODO
  }

  async requestPermissions(): Promise<PermissionStatus> {
    // TODO
  }
}

----------------------------------------

TITLE: Screen Reader Usage Example in TypeScript
DESCRIPTION: Example showing how to use the Screen Reader plugin to detect state changes, check if screen reader is enabled, and perform text-to-speech

LANGUAGE: typescript
CODE:
import { ScreenReader } from '@capacitor/screen-reader';

ScreenReader.addListener('stateChange', ({ value }) => {
  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);
});

const checkScreenReaderEnabled = async () => {
  const { value } = await ScreenReader.isEnabled();

  console.log('Voice over enabled? ' + value);
};

const sayHello = async () => {
  await ScreenReader.speak({ value: 'Hello World!' });
};

----------------------------------------

TITLE: Triggering JavaScript Events from iOS
DESCRIPTION: Demonstrates how to trigger JavaScript events from native iOS code using the bridge's triggerJSEvent methods.

LANGUAGE: swift
CODE:
func triggerJSEvent(eventName: String, target: String)
func triggerJSEvent(eventName: String, target: String, data: String)

LANGUAGE: swift
CODE:
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "window")
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "document", data: "{ 'dataKey': 'dataValue' }")

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Accessing and Validating Plugin Call Data in Java for Capacitor Android
DESCRIPTION: This example shows how to access different types of data passed to a plugin method, including handling default values and data validation.

LANGUAGE: java
CODE:
@PluginMethod()
public void storeContact(PluginCall call) {
  String name = call.getString("yourName", "default name");
  JSObject address = call.getObject("address", new JSObject());
  boolean isAwesome = call.getBoolean("isAwesome", false);

  if (!call.getData().has("id")) {
    call.reject("Must provide an id");
    return;
  }
  // ...

  call.resolve();
}

----------------------------------------

TITLE: Implementing Screen Orientation Locking in Swift
DESCRIPTION: This snippet adds methods to ScreenOrientation and ScreenOrientationPlugin classes for locking and unlocking screen orientation.

LANGUAGE: swift
CODE:
public func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {
  DispatchQueue.main.async {
    let mask = self.fromOrientationTypeToMask(orientationType)
    let orientation = self.fromOrientationTypeToInt(orientationType)
    UIDevice.current.setValue(orientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion(mask)
  }
}

@objc public func lock(_ call: CAPPluginCall) {
  guard let lockToOrientation = call.getString("orientation") else {
    call.reject("Input option 'orientation' must be provided.")
    return
  }
  implementation.lock(lockToOrientation, completion: { (mask) -> Void in
    ScreenOrientationPlugin.supportedOrientations = mask;
    call.resolve()
  })
}

public func unlock(completion: @escaping () -> Void) {
  DispatchQueue.main.async {
    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue
    UIDevice.current.setValue(unknownOrientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion()
  }
}

@objc public func unlock(_ call: CAPPluginCall) {
  implementation.unlock {
    ScreenOrientationPlugin.supportedOrientations = UIInterfaceOrientationMask.all
    call.resolve()
  }
}

----------------------------------------

TITLE: Scanning Barcode with Capacitor Plugin
DESCRIPTION: TypeScript function to scan a barcode using the Capacitor Barcode Scanner plugin with configurable options.

LANGUAGE: typescript
CODE:
scanBarcode(options: CapacitorBarcodeScannerOptions) => Promise<CapacitorBarcodeScannerScanResult>

----------------------------------------

TITLE: ProGuard Rule for All Capacitor Plugins
DESCRIPTION: Generic ProGuard rule to protect all Capacitor plugin classes from being optimized.

LANGUAGE: text
CODE:
-keep public class * extends com.getcapacitor.Plugin

----------------------------------------

TITLE: Implementing Screen Orientation Interface Methods
DESCRIPTION: Implements the core methods defined in the ScreenOrientationPlugin interface for orientation detection, locking, and unlocking.

LANGUAGE: typescript
CODE:
 async orientation(): Promise<{ type: OrientationType }> {
   return { type: window.screen.orientation.type };
 }

 async lock(opts: { orientation: OrientationLockType }): Promise<void> {
   await window.screen.orientation.lock(opts.orientation);
 }

 async unlock(): Promise<void> {
   window.screen.orientation.unlock();
 }

----------------------------------------

TITLE: Exporting Capacitor iOS Plugin to Objective-C
DESCRIPTION: Shows how to export a Swift plugin class to Objective-C and register it with Capacitor using macros.

LANGUAGE: objectivec
CODE:
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(EchoPlugin, "Echo",
  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Unlocking Screen Orientation
DESCRIPTION: TypeScript function to unlock the screen orientation.

LANGUAGE: typescript
CODE:
unlock() => Promise<void>

----------------------------------------

TITLE: TypeScript Plugin Configuration Type Definitions
DESCRIPTION: Defining TypeScript types for plugin configuration values by extending the PluginsConfig interface

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/cli" />

declare module '@capacitor/cli' {
  export interface PluginsConfig {
    MyCoolPlugin?: {
      /**
       * Override the cool theme style if your app doesn't support light/dark theme changes.
       *
       * @since 1.0.0
       * @example "light"
       */
      style?: 'dark' | 'light';

      /**
       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.
       *
       * @since 1.0.0
       * @default #ffffff
       * @example "#FF9900"
       */
      iconColor?: string;
    };
  }
}

----------------------------------------

TITLE: Screen Reader Usage Example in TypeScript
DESCRIPTION: Example showing how to use the Screen Reader plugin to detect state changes, check if screen reader is enabled, and perform text-to-speech

LANGUAGE: typescript
CODE:
import { ScreenReader } from '@capacitor/screen-reader';

ScreenReader.addListener('stateChange', ({ value }) => {
  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);
});

const checkScreenReaderEnabled = async () => {
  const { value } = await ScreenReader.isEnabled();

  console.log('Voice over enabled? ' + value);
};

const sayHello = async () => {
  await ScreenReader.speak({ value: 'Hello World!' });
};

----------------------------------------

TITLE: Accessing Plugin Call Data in Capacitor Android
DESCRIPTION: This snippet demonstrates how to access data passed to a plugin method from the client in a Capacitor Android plugin. It shows various ways to retrieve different data types and how to handle missing data.

LANGUAGE: java
CODE:
@PluginMethod()
public void storeContact(PluginCall call) {
  String name = call.getString("yourName", "default name");
  JSObject address = call.getObject("address", new JSObject());
  boolean isAwesome = call.getBoolean("isAwesome", false);

  if (!call.getData().has("id")) {
    call.reject("Must provide an id");
    return;
  }
  // ...

  call.resolve();
}

----------------------------------------

TITLE: Installing Push Notifications Plugin
DESCRIPTION: Commands to install the push notifications plugin and sync with Capacitor

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Writing to Clipboard in TypeScript
DESCRIPTION: TypeScript function signature for writing data to the clipboard. It takes WriteOptions as a parameter and returns a Promise.

LANGUAGE: typescript
CODE:
write(options: WriteOptions) => Promise<void>

----------------------------------------

TITLE: Retrieving Device Language Tag in TypeScript
DESCRIPTION: Function to get the current language locale tag of the device in IETF BCP 47 format.

LANGUAGE: typescript
CODE:
getLanguageTag() => Promise<LanguageTag>

----------------------------------------

TITLE: Adding Markers and Interacting with Google Map
DESCRIPTION: TypeScript examples of adding markers, moving the camera, and handling events on a Google Map.

LANGUAGE: typescript
CODE:
const newMap = await GoogleMap.create({...});

// Add a marker to the map
const markerId = await newMap.addMarker({
  coordinate: {
    lat: 33.6,
    lng: -117.9
  }
});

// Move the map programmatically
await newMap.setCamera({
  coordinate: {
    lat: 33.6,
    lng: -117.9
  }
});

// Enable marker clustering
await newMap.enableClustering();

// Handle marker click
await newMap.setOnMarkerClickListener((event) => {...});

// Clean up map reference
await newMap.destroy();

----------------------------------------

TITLE: ProGuard Rule for All Capacitor Plugins
DESCRIPTION: ProGuard configuration rule to prevent code obfuscation for all Capacitor plugin classes that extend the Plugin base class.

LANGUAGE: proguard
CODE:
-keep public class * extends com.getcapacitor.Plugin

----------------------------------------

TITLE: Setting and Getting JSON Objects with Capacitor Preferences API in TypeScript
DESCRIPTION: Demonstrates how to use the Capacitor Preferences API to store and retrieve JSON objects. The example shows setting a user object and then retrieving and parsing it.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

// JSON "set" example
async setObject() {
  await Preferences.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Preferences.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

----------------------------------------

TITLE: Triggering JavaScript Events from Capacitor Android
DESCRIPTION: Illustrates how to trigger JavaScript events from the Android side using the Bridge. These methods allow firing events on JavaScript EventTargets like window or document.

LANGUAGE: java
CODE:
public void triggerJSEvent(final String eventName, final String target)
public void triggerJSEvent(final String eventName, final String target, final String data)

----------------------------------------

TITLE: Returning Complex Data from a Capacitor Android Plugin in Java
DESCRIPTION: This snippet illustrates how to return a complex JSON object from a plugin method, including nested objects.

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("added", true);
JSObject info = new JSObject();
info.put("id", "unique-id-1234");
ret.put("info", info);
call.resolve(ret);

----------------------------------------

TITLE: Using Geolocation to Get Current Position in TypeScript
DESCRIPTION: TypeScript example demonstrating how to import the Geolocation plugin and use it to get the device's current position.

LANGUAGE: typescript
CODE:
import { Geolocation } from '@capacitor/geolocation';

const printCurrentPosition = async () => {
  const coordinates = await Geolocation.getCurrentPosition();

  console.log('Current position:', coordinates);
};

----------------------------------------

TITLE: Configuring Keyboard Plugin in JSON
DESCRIPTION: Example of how to configure the Keyboard plugin in capacitor.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": {
    "Keyboard": {
      "resize": "body",
      "style": "DARK",
      "resizeOnFullScreen": true
    }
  }
}

----------------------------------------

TITLE: Mocking Capacitor Storage Plugin in Jasmine Tests
DESCRIPTION: Demonstrates how to mock and spy on the Capacitor Storage plugin methods in Jasmine unit tests. It provides examples of mocking the 'get' and 'clear' methods with different implementations and expectations.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
  spyOn(Storage, 'get');
  (Storage.get as any)
    .withArgs({ key: 'firstName' })
    .and.returnValue(Promise.resolve({ value: 'Jason' }));
  (Storage.get as any)
    .withArgs({ key: 'lastName' })
    .and.returnValue(Promise.resolve({ value: 'Jones' }));

  fixture.detectChanges();
  await fixture.whenRenderingDone();

  expect(component.firstName).toEqual('Jason');
  expect(component.lastName).toEqual('Jones');
});

it('clears the storage', () => {
  spyOn(Storage, 'clear');
  click(clear.nativeElement);
  fixture.detectChanges();
  expect(Storage.clear).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Implementing Google Maps in React
DESCRIPTION: React component example for creating and interacting with a Google Map.

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';
import { useRef } from 'react';

const MyMap: React.FC = () => {
  const mapRef = useRef<HTMLElement>();
  let newMap: GoogleMap;

  async function createMap() {
    if (!mapRef.current) return;

    newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: mapRef.current,
      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9
        },
        zoom: 8
      }
    })
  }

  return (
    <div className="component-wrapper">
      <capacitor-google-map ref={mapRef} style={{
        display: 'inline-block',
        width: 275,
        height: 400
      }}></capacitor-google-map>

      <button onClick={createMap}>Create Map</button>
    </div>
  )
}

export default MyMap;

----------------------------------------

TITLE: Registering Custom Plugin in MainActivity.java
DESCRIPTION: This code snippet shows how to register the custom 'Echo' plugin in the MainActivity.java file of a Capacitor Android project.

LANGUAGE: java
CODE:
public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        registerPlugin(EchoPlugin.class);
        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Using ScreenOrientation API in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to use the ScreenOrientation API to lock and unlock screen orientation dynamically in a Capacitor app.

LANGUAGE: typescript
CODE:
import { ScreenOrientation } from '@capacitor/screen-orientation';
...
await ScreenOrientation.lock({ orientation: 'portrait' });
await ScreenOrientation.lock({ orientation: 'landscape' });

// To unlock orientation which will default back to the global setting:
await ScreenOrientation.unlock();

----------------------------------------

TITLE: Triggering JavaScript Events from Capacitor Android
DESCRIPTION: Illustrates how to trigger JavaScript events from the Android side using the Bridge. These methods allow firing events on JavaScript EventTargets like window or document.

LANGUAGE: java
CODE:
public void triggerJSEvent(final String eventName, final String target)
public void triggerJSEvent(final String eventName, final String target, final String data)

----------------------------------------

TITLE: Deep Link Routing in React with AppUrlListener Component
DESCRIPTION: React implementation using a custom AppUrlListener component to handle deep links with React Router and Capacitor's App API.

LANGUAGE: typescript
CODE:
import React, { useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import { Plugins } from '@capacitor/core';
const { App: CapApp } = Plugins;

const AppUrlListener: React.FC<any> = () => {
  let history = useHistory();
  useEffect(() => {
    CapApp.addListener('appUrlOpen', (data: any) => {
      const slug = data.url.split('.app').pop();
      if (slug) {
        history.push(slug);
      }
    });
  }, []);

  return null;
};

export default AppUrlListener;

----------------------------------------

TITLE: Locking and Unlocking Screen Orientation in TypeScript
DESCRIPTION: This TypeScript snippet shows how to use the ScreenOrientation API to lock the screen to portrait or landscape orientation, and how to unlock it.

LANGUAGE: typescript
CODE:
import { ScreenOrientation } from '@capacitor/screen-orientation';
...
await ScreenOrientation.lock({ orientation: 'portrait' });
await ScreenOrientation.lock({ orientation: 'landscape' });

// To unlock orientation which will default back to the global setting:
await ScreenOrientation.unlock();

----------------------------------------

TITLE: Mocking Capacitor Storage Plugin in Jasmine Tests
DESCRIPTION: Demonstrates how to mock and spy on the Capacitor Storage plugin methods in Jasmine unit tests. It provides examples of mocking the 'get' and 'clear' methods with different implementations and expectations.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
  spyOn(Storage, 'get');
  (Storage.get as any)
    .withArgs({ key: 'firstName' })
    .and.returnValue(Promise.resolve({ value: 'Jason' }));
  (Storage.get as any)
    .withArgs({ key: 'lastName' })
    .and.returnValue(Promise.resolve({ value: 'Jones' }));

  fixture.detectChanges();
  await fixture.whenRenderingDone();

  expect(component.firstName).toEqual('Jason');
  expect(component.lastName).toEqual('Jones');
});

it('clears the storage', () => {
  spyOn(Storage, 'clear');
  click(clear.nativeElement);
  fixture.detectChanges();
  expect(Storage.clear).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Building Native Apps with Capacitor CLI
DESCRIPTION: Command for building native Android or iOS applications using Capacitor. Supports various build options including custom schemes, flavors, and keystore configurations for Android builds.

LANGUAGE: bash
CODE:
npx cap build [options] <platform>

----------------------------------------

TITLE: Implementing Value Return Methods in Java and Objective-C
DESCRIPTION: Implementation examples for value return methods in Android (Java) and iOS (Objective-C). These methods return a promise that resolves with a value.

LANGUAGE: java
CODE:
@PluginMethod()
public void method2(PluginCall call) {
}

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Implementing iOS Permissions Check
DESCRIPTION: Example of implementing permission checking logic for location services in a Capacitor plugin

LANGUAGE: swift
CODE:
@objc override func checkPermissions(_ call: CAPPluginCall) {
    let locationState: String

    switch CLLocationManager.authorizationStatus() {
    case .notDetermined:
        locationState = "prompt"
    case .restricted, .denied:
        locationState = "denied"
    case .authorizedAlways, .authorizedWhenInUse:
        locationState = "granted"
    @unknown default:
        locationState = "prompt"
    }

    call.resolve(["location": locationState])
}

----------------------------------------

TITLE: Setting Android Permissions for Camera Plugin
DESCRIPTION: XML snippet showing the required permissions to be added to AndroidManifest.xml for the Camera plugin to function on Android.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Defining Storage API Methods in TypeScript
DESCRIPTION: This snippet provides TypeScript type definitions for the Storage API methods including get, set, remove, clear, and keys. It specifies the input parameters and return types for each method.

LANGUAGE: typescript
CODE:
get(options: { key: string; }) => Promise<{ value: string | null; }>

set(options: { key: string; value: string; }) => Promise<void>

remove(options: { key: string; }) => Promise<void>

clear() => Promise<void>

keys() => Promise<{ keys: string[]; }>

----------------------------------------

TITLE: Using @capacitor/app API in TypeScript
DESCRIPTION: Example of using the App API to listen for app state changes, URL opens, and restored states.

LANGUAGE: typescript
CODE:
import { App } from '@capacitor/app';

App.addListener('appStateChange', ({ isActive }) => {
  console.log('App state changed. Is active?', isActive);
});

App.addListener('appUrlOpen', data => {
  console.log('App opened with URL:', data);
});

App.addListener('appRestoredResult', data => {
  console.log('Restored state:', data);
});

const checkAppLaunchUrl = async () => {
  const { url } = await App.getLaunchUrl();

  console.log('App opened with URL: ' + url);
};

----------------------------------------

TITLE: Updating Android SDK Versions in Gradle for Capacitor 6.0
DESCRIPTION: Updates the compileSdk and targetSdkVersion to 34 in the build.gradle file for Android.

LANGUAGE: diff
CODE:
# build.gradle

android {
-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33
+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34
-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33
+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34

----------------------------------------

TITLE: Configuring Capacitor Http Plugin in TypeScript
DESCRIPTION: Example configuration for enabling the Capacitor Http Plugin in the capacitor.config.ts file. This configuration enables the patching of fetch and XMLHttpRequest to use native libraries.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorHttp: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Android Intent Filter Configuration
DESCRIPTION: XML configuration for the Android Intent Filter, which is added to the AndroidManifest.xml file to enable deep linking in the Android app.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="https" android:host="beerswift.app" />
</intent-filter>

----------------------------------------

TITLE: Registering EchoPlugin in TypeScript for Capacitor
DESCRIPTION: This TypeScript code registers the EchoPlugin on the JavaScript side using registerPlugin from @capacitor/core. It also defines the plugin interface for type safety.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Implementing Basic Echo Plugin in Swift
DESCRIPTION: Example of a simple Capacitor plugin that demonstrates receiving data from a Plugin Call and returning data back to the caller

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin {
  @objc func echo(_ call: CAPPluginCall) {
    let value = call.getString("value") ?? ""
    call.resolve([
        "value": value
    ])
  }
}

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start the local development server for Live Reload functionality

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Declaring Void Return Method in Objective-C for iOS
DESCRIPTION: This snippet demonstrates how to declare a void return method in Objective-C for an iOS Capacitor plugin. The method is declared using CAP_PLUGIN_METHOD macro with CAPPluginReturnNone return type.

LANGUAGE: objc
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);
)

----------------------------------------

TITLE: Setting URL Scheme in Android Strings XML
DESCRIPTION: Shows how to configure custom URL scheme for deep linking in strings.xml

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Checking for Native Platform in Capacitor
DESCRIPTION: Demonstrates the use of isNativePlatform function to determine if the app is running on a native platform (ios or android) in a Capacitor application.

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  // do something
}

----------------------------------------

TITLE: Updating Java Version to 17 in build.gradle
DESCRIPTION: Update the Java compatibility version to 17 in the build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle
compileOptions {
-    sourceCompatibility JavaVersion.VERSION_11
+    sourceCompatibility JavaVersion.VERSION_17
-    targetCompatibility JavaVersion.VERSION_11
+    targetCompatibility JavaVersion.VERSION_17
}

----------------------------------------

TITLE: Locking Screen Orientation for iOS View Controllers
DESCRIPTION: Swift code to be added to AppDelegate.swift for locking screen orientation in presented View Controllers on iOS.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)
}

----------------------------------------

TITLE: Presenting View Controllers in iOS
DESCRIPTION: Examples of presenting native view controllers using Capacitor's bridge, including regular presentation and iPad-specific popover presentation.

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

LANGUAGE: swift
CODE:
self.setCenteredPopover(ourCustomViewController)
self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)

----------------------------------------

TITLE: Configuring Firebase in iOS AppDelegate
DESCRIPTION: Add Firebase configuration and push notification handling to the iOS AppDelegate.

LANGUAGE: swift
CODE:
import UIKit
import Capacitor
import Firebase

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

  var window: UIWindow?

  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    FirebaseApp.configure()
    return true
  }

  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Messaging.messaging().apnsToken = deviceToken
    Messaging.messaging().token(completion: { (token, error) in
      if let error = error {
          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
      } else if let token = token {
          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)
      }
    })
  }

  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
  }
}

----------------------------------------

TITLE: Installing Platform-Specific Dependencies
DESCRIPTION: Commands to install Android and iOS platform dependencies

LANGUAGE: bash
CODE:
npm i @capacitor/android @capacitor/ios

----------------------------------------

TITLE: Implementing Motion Tracking in TypeScript
DESCRIPTION: Example showing how to request permissions, add motion listeners, and handle accelerometer events. Includes cleanup functions for removing listeners.

LANGUAGE: typescript
CODE:
import { PluginListenerHandle } from '@capacitor/core';
import { Motion } from '@capacitor/motion';


let accelHandler: PluginListenerHandle;

myButton.addEventListener('click', async () => {
  try {
    await DeviceMotionEvent.requestPermission();
  } catch (e) {
    // Handle error
    return;
  }

  // Once the user approves, can start listening:
  accelHandler = await Motion.addListener('accel', event => {
    console.log('Device motion event:', event);
  });
});

// Stop the acceleration listener
const stopAcceleration = () => {
  if (accelHandler) {
    accelHandler.remove();
  }
};

// Remove all listeners
const removeListeners = () => {
  Motion.removeAllListeners();
};

----------------------------------------

TITLE: Adding Network Status Change Listener in TypeScript
DESCRIPTION: Function to add a listener for changes in the network connection.

LANGUAGE: typescript
CODE:
addListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Configuring Firebase in iOS AppDelegate
DESCRIPTION: Add Firebase configuration and push notification handling to the iOS AppDelegate.

LANGUAGE: swift
CODE:
import UIKit
import Capacitor
import Firebase

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

  var window: UIWindow?

  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    FirebaseApp.configure()
    return true
  }

  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Messaging.messaging().apnsToken = deviceToken
    Messaging.messaging().token(completion: { (token, error) in
      if let error = error {
          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
      } else if let token = token {
          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)
      }
    })
  }

  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
  }
}

----------------------------------------

TITLE: Implementing Motion Tracking in TypeScript
DESCRIPTION: Example showing how to request permissions, add motion listeners, and handle accelerometer events. Includes cleanup functions for removing listeners.

LANGUAGE: typescript
CODE:
import { PluginListenerHandle } from '@capacitor/core';
import { Motion } from '@capacitor/motion';


let accelHandler: PluginListenerHandle;

myButton.addEventListener('click', async () => {
  try {
    await DeviceMotionEvent.requestPermission();
  } catch (e) {
    // Handle error
    return;
  }

  // Once the user approves, can start listening:
  accelHandler = await Motion.addListener('accel', event => {
    console.log('Device motion event:', event);
  });
});

// Stop the acceleration listener
const stopAcceleration = () => {
  if (accelHandler) {
    accelHandler.remove();
  }
};

// Remove all listeners
const removeListeners = () => {
  Motion.removeAllListeners();
};

----------------------------------------

TITLE: Using @capacitor/app in TypeScript
DESCRIPTION: Example usage of the App API, including event listeners for app state changes, URL opening, and restored results.

LANGUAGE: typescript
CODE:
import { App } from '@capacitor/app';

App.addListener('appStateChange', ({ isActive }) => {
  console.log('App state changed. Is active?', isActive);
});

App.addListener('appUrlOpen', data => {
  console.log('App opened with URL:', data);
});

App.addListener('appRestoredResult', data => {
  console.log('Restored state:', data);
});

const checkAppLaunchUrl = async () => {
  const { url } = await App.getLaunchUrl();

  console.log('App opened with URL: ' + url);
};

----------------------------------------

TITLE: Capacitor Plugin Generator Wizard Example
DESCRIPTION: Interactive example of the plugin generator wizard showing the prompts for plugin configuration including NPM name, plugin ID, class name, and other metadata.

LANGUAGE: bash
CODE:
npx @capacitor/cli@2.4.7 plugin:generate
✏️  Creating new Capacitor plugin
? Plugin NPM name (kebab-case): my-plugin
? Plugin id (domain-style syntax. ex: com.example.plugin) com.ionicframework.myplugin
? Plugin class name (ex: AwesomePlugin) MyPlugin
? description:
? git repository:
? author:
? license: MIT
? package.json will be created, do you want to continue? (Y/n)

----------------------------------------

TITLE: Using Custom EchoPlugin in TypeScript
DESCRIPTION: This code snippet shows how to use the custom EchoPlugin in a TypeScript file. It imports the plugin and calls its echo method, demonstrating the interaction between JavaScript and native code.

LANGUAGE: typescript
CODE:
import Echo from '../path/to/echo-plugin';

const { value } = await Echo.echo({ value: 'Hello World!' });
console.log('Response from native:', value);

----------------------------------------

TITLE: Running Live Reload with Ionic CLI for Android and iOS
DESCRIPTION: Commands to start Live Reload process for Android and iOS using Ionic CLI. This performs an ionic build, copies web assets, and opens the native IDE.

LANGUAGE: bash
CODE:
ionic cap run android -l --external
ionic cap run ios -l --external

----------------------------------------

TITLE: Opening a Browser with Options in TypeScript
DESCRIPTION: Example of the Browser.open() method signature, showing the OpenOptions interface.

LANGUAGE: typescript
CODE:
open(options: OpenOptions) => Promise<void>

----------------------------------------

TITLE: Updating Google Services Plugin
DESCRIPTION: Update the Google Services plugin version in the build.gradle file for Capacitor 7 compatibility.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.1'
-       classpath 'com.google.gms:google-services:4.4.0'
+       classpath 'com.google.gms:google-services:4.4.2'

----------------------------------------

TITLE: Locking Screen Orientation
DESCRIPTION: TypeScript function to lock the screen orientation to a specific type using the Screen Orientation API.

LANGUAGE: typescript
CODE:
lock(options: OrientationLockOptions) => Promise<void>

----------------------------------------

TITLE: Detecting Native Platform in Capacitor
DESCRIPTION: Demonstrates the use of isNativePlatform function to check if the app is running on a native platform (ios or android).

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  // do something
}

----------------------------------------

TITLE: Triggering JavaScript Events
DESCRIPTION: Methods for firing events to JavaScript EventTarget objects like window or document. Includes overloaded versions with and without data payload.

LANGUAGE: java
CODE:
public void triggerJSEvent(final String eventName, final String target)
public void triggerJSEvent(final String eventName, final String target, final String data)

----------------------------------------

TITLE: Installing cordova-plugin-purchase for Capacitor
DESCRIPTION: Commands to install the cordova-plugin-purchase package and update Capacitor. This plugin enables In-App Purchase functionality in Capacitor applications.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: Haptics Impact Method Definition
DESCRIPTION: TypeScript definition for the impact() method that triggers haptic impact feedback with configurable style options

LANGUAGE: typescript
CODE:
impact(options?: ImpactOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Removing All Network Listeners in TypeScript
DESCRIPTION: Method to remove all listeners, including network status changes, for the Network plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Adding Android Platform to Capacitor Project
DESCRIPTION: Adds the Android platform to the Capacitor project using the Capacitor CLI. This sets up the necessary files and configurations for Android development.

LANGUAGE: bash
CODE:
npx cap add android

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Update the Android project variables in variables.gradle file to the new minimum values required for Capacitor 7.

LANGUAGE: groovy
CODE:
minSdkVersion = 23
compileSdkVersion = 35
targetSdkVersion = 35
androidxActivityVersion = '1.9.2'
androidxAppCompatVersion = '1.7.0'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.15.0'
androidxFragmentVersion = '1.8.4'
coreSplashScreenVersion = '1.0.1'
androidxWebkitVersion = '1.12.1'
junitVersion = '4.13.2'
androidxJunitVersion = '1.2.1'
androidxEspressoCoreVersion = '3.6.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Locking Screen Orientation
DESCRIPTION: TypeScript function to lock the screen orientation to a specific type.

LANGUAGE: typescript
CODE:
lock(options: OrientationLockOptions) => Promise<void>

----------------------------------------

TITLE: Retrieving Capacitor Configuration in Android
DESCRIPTION: Shows how to get the Capacitor configuration object in Android. This method returns the CapConfig object known to the Capacitor runtime.

LANGUAGE: java
CODE:
public CapConfig getConfig()

----------------------------------------

TITLE: Implementing iOS Plugin Method
DESCRIPTION: Shows how to implement plugin functionality for iOS platform using Swift, including parameter handling.

LANGUAGE: swift
CODE:
@objc func openMap(_ call: CAPPluginCall) {
  let latitude = call.getString("latitude")
  let longitude = call.getNumber("longitude")

  // more logic

  call.resolve()
}

----------------------------------------

TITLE: Configuring iOS Screen Orientation in Info.plist
DESCRIPTION: XML configuration for setting supported screen orientations on iOS devices. This example shows how to limit iPhones to portrait mode and iPads to landscape orientations.

LANGUAGE: xml
CODE:
  <key>UISupportedInterfaceOrientations</key>
  <array>
    <string>UIInterfaceOrientationPortrait</string>
  </array>
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeRight</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
  </array>

----------------------------------------

TITLE: Accessing Bridge in Capacitor Android Plugins
DESCRIPTION: Demonstrates how to access the Bridge object in Capacitor Android plugins. The Bridge is the core of the Capacitor Android library and provides essential functionality.

LANGUAGE: java
CODE:
this.bridge

----------------------------------------

TITLE: Implementing Capacitor Plugin Hooks in package.json
DESCRIPTION: Example implementation of Capacitor plugin hooks in package.json that demonstrates how to execute commands before and after copy, update, and sync operations. Each hook logs the command type and platform name using the $CAPACITOR_PLATFORM_NAME environment variable.

LANGUAGE: json
CODE:
"scripts": {
  "capacitor:copy:before": "echo copy before $CAPACITOR_PLATFORM_NAME",
  "capacitor:copy:after": "echo copy after $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:before": "echo update before $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:after": "echo update after $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:before": "echo sync before $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:after": "echo sync after $CAPACITOR_PLATFORM_NAME"
}

----------------------------------------

TITLE: Configuring Local Notifications in Capacitor Config TypeScript
DESCRIPTION: Example configuration for Local Notifications plugin using TypeScript in the Capacitor config file.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/local-notifications" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    LocalNotifications: {
      smallIcon: "ic_stat_icon_config_sample",
      iconColor: "#488AFF",
      sound: "beep.wav",
    },
  },
};

export default config;

----------------------------------------

TITLE: Registering and Exporting Echo Plugin in TypeScript for Capacitor
DESCRIPTION: This TypeScript code registers the Echo plugin on the JavaScript side using registerPlugin from @capacitor/core. It also defines a TypeScript interface for the plugin methods, providing type safety when using the plugin in TypeScript projects.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Notification Method Definition
DESCRIPTION: TypeScript definition for the notification method that triggers haptic notification feedback

LANGUAGE: typescript
CODE:
notification(options?: NotificationOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Configuring Android Scheme
DESCRIPTION: Configuration to set the Android scheme for existing apps to maintain data accessibility.

LANGUAGE: typescript
CODE:
{
  server: {
    androidScheme: "http"
  }
}

----------------------------------------

TITLE: Device ID Method Definition
DESCRIPTION: TypeScript method definition for getId() which returns a unique device identifier

LANGUAGE: typescript
CODE:
getId() => Promise<DeviceId>

----------------------------------------

TITLE: Registering Echo Plugin in MainActivity
DESCRIPTION: Shows how to register the custom Echo plugin in the Android MainActivity class to make it available to the Capacitor bridge.

LANGUAGE: java
CODE:
public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        registerPlugin(EchoPlugin.class);
    }
}

----------------------------------------

TITLE: Browser Open Method Type Definition
DESCRIPTION: Type definition for the open method that launches a browser session with configuration options.

LANGUAGE: typescript
CODE:
open(options: BrowserOpenOptions) => Promise<void>

----------------------------------------

TITLE: Handling Null Values in Swift Dictionaries
DESCRIPTION: Demonstrates how to safely access potentially null values from a dictionary in Swift using Capacitor's convenience accessors. This avoids issues with NSNull objects.

LANGUAGE: swift
CODE:
if let value = call.getString("foo") {
    // GOOD: `value` is nil, so this block won't run
}

----------------------------------------

TITLE: Installing Capacitor Platform Dependencies
DESCRIPTION: Commands to initialize a Capacitor project by installing iOS and Android platform dependencies, adding the platforms to the project, and syncing the native projects.

LANGUAGE: bash
CODE:
npm run build
npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android
npx cap sync

----------------------------------------

TITLE: Writing to Clipboard in TypeScript
DESCRIPTION: API definition for writing data to the clipboard. It accepts WriteOptions as a parameter, which can include string, image, URL, and label properties.

LANGUAGE: typescript
CODE:
write(options: WriteOptions) => Promise<void>

----------------------------------------

TITLE: Vibrate Method Definition
DESCRIPTION: TypeScript definition for the vibrate method that triggers device vibration with configurable duration

LANGUAGE: typescript
CODE:
vibrate(options?: VibrateOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Android @CapacitorPlugin Annotation Migration
DESCRIPTION: Example showing how to migrate from @NativePlugin to the new @CapacitorPlugin annotation with updated permission handling.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(strings = { Manifest.permission.FOO }, alias = "foo"),
        @Permission(strings = { Manifest.permission.BAR }, alias = "bar")
    })
)

----------------------------------------

TITLE: Adding iOS Platform to Capacitor Project
DESCRIPTION: Adds the iOS platform to the Capacitor project using the Capacitor CLI. This creates the necessary iOS project files.

LANGUAGE: bash
CODE:
npx cap add ios

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Updated minimum version requirements for Android project dependencies in variables.gradle file.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 34
targetSdkVersion = 34
androidxActivityVersion = '1.8.0'
androidxAppCompatVersion = '1.6.1'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.12.0'
androidxFragmentVersion = '1.6.2'
coreSplashScreenVersion = '1.0.1'
androidxWebkitVersion = '1.9.0'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.5'
androidxEspressoCoreVersion = '3.5.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Updating Platform-Specific Capacitor Dependencies
DESCRIPTION: Commands to update iOS, Android and Electron platform dependencies to version 2.0

LANGUAGE: bash
CODE:
# iOS
npm install @capacitor/ios@2
npx cap sync ios

# Android
npm install @capacitor/android@2
npx cap sync android

# Electron
cd electron
npm install @capacitor/electron@2

----------------------------------------

TITLE: Initializing PWA Elements in Angular
DESCRIPTION: Setup code for importing and initializing PWA Elements in an Angular application's main.ts file, including production mode handling.

LANGUAGE: typescript
CODE:
import { defineCustomElements } from '@ionic/pwa-elements/loader';
// Call the element loader before the bootstrapModule/bootstrapApplication call
defineCustomElements(window);
if (environment.production) {
  enableProdMode();
}

----------------------------------------

TITLE: Configuring iOS AppDelegate for Push Notifications
DESCRIPTION: Swift code to add to AppDelegate.swift for handling push notification registration on iOS.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)
}

func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
}

----------------------------------------

TITLE: Using Capacitor Cookies API
DESCRIPTION: Example usage of the Capacitor Cookies API showing various cookie operations including getting, setting, deleting and clearing cookies

LANGUAGE: typescript
CODE:
import { CapacitorCookies } from '@capacitor/core';

const getCookies = () => {
  return document.cookie;
};

const setCookie = () => {
  document.cookie = key + '=' + value;
};

const setCapacitorCookie = async () => {
  await CapacitorCookies.setCookie({
    url: 'http://example.com',
    key: 'language',
    value: 'en',
  });
};

const deleteCookie = async () => {
  await CapacitorCookies.deleteCookie({
    url: 'https://example.com',
    key: 'language',
  });
};

const clearCookiesOnUrl = async () => {
  await CapacitorCookies.clearCookies({
    url: 'https://example.com',
  });
};

const clearAllCookies = async () => {
  await CapacitorCookies.clearAllCookies();
};

----------------------------------------

TITLE: Installing Capacitor Watch Plugin
DESCRIPTION: Commands to install the Capacitor Watch plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/watch
npx cap sync
npx cap open ios

----------------------------------------

TITLE: Deep Link Routing Component for React
DESCRIPTION: React implementation using a dedicated AppUrlListener component to handle deep links with React Router

LANGUAGE: typescript
CODE:
import React, { useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import { App, URLOpenListenerEvent } from '@capacitor/app';

const AppUrlListener: React.FC<any> = () => {
  let history = useHistory();
  useEffect(() => {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
      const slug = event.url.split('.app').pop();
      if (slug) {
        history.push(slug);
      }
    });
  }, []);

  return null;
};

export default AppUrlListener;

----------------------------------------

TITLE: Initializing Capacitor Project with CLI
DESCRIPTION: Command to initialize a new Capacitor configuration with required appName and appID parameters. The appName specifies the application's display name, while appID should follow reverse domain naming convention (e.g., com.example.appname). An optional --web-dir parameter can specify an existing web application directory.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: Using Filesystem Hooks in React Component
DESCRIPTION: Example showing how to import and use the filesystem hooks within a React function component. Demonstrates reading a file using the useFilesystem hook inside a useEffect.

LANGUAGE: typescript
CODE:
import { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';

const MyComponent = () => (
  const { readFile } = useFilesystem();

  useEffect(() => {
    const readMyFile = async () => {
      const file = await readFile({
        path: filepath,
        directory: FilesystemDirectory.Data
      });
      // ...
    }

    readMyFile();
  }, [ readFile ]);

----------------------------------------

TITLE: Local Testing of Capacitor Plugin Using npm
DESCRIPTION: This bash command demonstrates how to link a local Capacitor plugin to an app for testing purposes using npm install with a file path.

LANGUAGE: bash
CODE:
npm install ../path/to/echo

----------------------------------------

TITLE: Taking Photos with Camera API Example
DESCRIPTION: TypeScript example showing how to capture a photo using the Camera plugin with quality and editing options.

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Taking Photos with Camera API Example
DESCRIPTION: TypeScript example showing how to capture a photo using the Camera plugin with quality and editing options.

LANGUAGE: typescript
CODE:
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });

  // image.webPath will contain a path that can be set as an image src.
  // You can access the original file using image.path, which can be
  // passed to the Filesystem API to read the raw data of the image,
  // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)
  var imageUrl = image.webPath;

  // Can be set to the src of an image now
  imageElement.src = imageUrl;
};

----------------------------------------

TITLE: Using Clipboard API in TypeScript
DESCRIPTION: Example demonstrating how to write to and read from the clipboard using the Capacitor Clipboard API. Includes writing a string and reading clipboard content with type checking.

LANGUAGE: typescript
CODE:
import { Clipboard } from '@capacitor/clipboard';

const writeToClipboard = async () => {
  await Clipboard.write({
    string: "Hello World!"
  });
};

const checkClipboard = async () => {
  const { type, value } = await Clipboard.read();

  console.log(`Got ${type} from clipboard: ${value}`);
};

----------------------------------------

TITLE: Styling Button Element in Markdown
DESCRIPTION: HTML and inline CSS styling for the VS Code extension installation button with specific styling properties for color, padding, and border radius.

LANGUAGE: markdown
CODE:
<a href="vscode:extension/ionic.ionic" target="_self"><button style={{color: '#FFF',cursor: 'pointer', fontWeight: 'bold', padding:16, paddingLeft:32, paddingRight:32, border:0, borderRadius:100, backgroundColor: '#000'}}>Install</button></a>

----------------------------------------

TITLE: Listening for Screen Orientation Changes
DESCRIPTION: TypeScript function to add a listener for screen orientation change events using the Screen Orientation API.

LANGUAGE: typescript
CODE:
addListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Device Info Method Definition
DESCRIPTION: TypeScript method definition for getInfo() which returns device/OS/platform information

LANGUAGE: typescript
CODE:
getInfo() => Promise<DeviceInfo>

----------------------------------------

TITLE: Converting File Paths for Web View in Capacitor
DESCRIPTION: Shows how to use the convertFileSrc function to transform device file paths into Web View-friendly paths, ensuring compatibility across different protocols.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const savedPhotoFile = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const savedPhoto = Capacitor.convertFileSrc(savedPhotoFile.uri),
document.getElementById("savedPhoto").src = savedPhoto;

LANGUAGE: html
CODE:
<img id="savedPhoto" />

----------------------------------------

TITLE: Implementing iOS Privacy Manifest for UserDefaults API
DESCRIPTION: Sample Privacy Manifest configuration file (PrivacyInfo.xcprivacy) demonstrating implementation for apps using the @capacitor/preferences plugin that accesses UserDefaults API. This configuration includes privacy tracking settings and API access declarations.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyTracking</key>
    <false/>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
    <key>NSPrivacyTrackingDomains</key>
    <array/>
  </dict>
</plist>

----------------------------------------

TITLE: Implementing Deep Link Routing in Angular
DESCRIPTION: Angular implementation of deep link handling using Capacitor's App API, including necessary imports and initialization in app.component.ts

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { App, URLOpenListenerEvent } from '@capacitor/app';

constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

initializeApp() {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
        this.zone.run(() => {
            const slug = event.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
        });
    });
}

----------------------------------------

TITLE: Adding Network Status Change Listener in TypeScript
DESCRIPTION: Method to add a listener for network status changes, returning a Promise with PluginListenerHandle.

LANGUAGE: typescript
CODE:
addListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Adding Pods Helpers to iOS Podfile
DESCRIPTION: Add a require statement to include Capacitor's pods helpers in the iOS Podfile.

LANGUAGE: ruby
CODE:
require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

----------------------------------------

TITLE: Setting App Name in Android Strings XML
DESCRIPTION: Change the app_name value in the strings.xml file to set the name of your Android app. Also includes setting the activity name.

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>

LANGUAGE: xml
CODE:
<string name="title_activity_main">MyApp</string>

----------------------------------------

TITLE: Implementing iOS Privacy Manifest for UserDefaults API
DESCRIPTION: Sample Privacy Manifest configuration file (PrivacyInfo.xcprivacy) demonstrating implementation for apps using the @capacitor/preferences plugin that accesses UserDefaults API. This configuration includes privacy tracking settings and API access declarations.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyTracking</key>
    <false/>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
    <key>NSPrivacyTrackingDomains</key>
    <array/>
  </dict>
</plist>

----------------------------------------

TITLE: Implementing Deep Link Routing in Angular
DESCRIPTION: Angular implementation of deep link handling using Capacitor's App API, including necessary imports and initialization in app.component.ts

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { App, URLOpenListenerEvent } from '@capacitor/app';

constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

initializeApp() {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
        this.zone.run(() => {
            const slug = event.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
        });
    });
}

----------------------------------------

TITLE: Integrating PWA Elements in React
DESCRIPTION: Implementation for loading PWA Elements in a React application by importing and defining custom elements

LANGUAGE: tsx
CODE:
import { defineCustomElements } from '@ionic/pwa-elements/loader';

// Call the element loader before the render call
defineCustomElements(window);

----------------------------------------

TITLE: TypeScript Plugin Configuration Type Definitions
DESCRIPTION: Demonstrates how to provide type definitions for plugin configuration values by extending the PluginsConfig interface from @capacitor/cli. Includes JSDoc documentation for configuration options.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/cli" />

declare module '@capacitor/cli' {
  export interface PluginsConfig {
    MyCoolPlugin?: {
      /**
       * Override the cool theme style if your app doesn't support light/dark theme changes.
       *
       * @since 1.0.0
       * @example "light"
       */
      style?: 'dark' | 'light';

      /**
       * Color of the cool icon in hex format, #RRGGBB or #RRGGBBAA.
       *
       * @since 1.0.0
       * @default #ffffff
       * @example "#FF9900"
       */
      iconColor?: string;
    };
  }
}

----------------------------------------

TITLE: Removing All Network Listeners in TypeScript
DESCRIPTION: Function to remove all listeners for the Network plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Implementing Screen Orientation Core Functionality
DESCRIPTION: Creates the main implementation class that handles getting current orientation and converting between rotation values and orientation types.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import android.view.Surface;
import androidx.appcompat.app.AppCompatActivity;

public class ScreenOrientation {
   private AppCompatActivity activity;

   public ScreenOrientation(AppCompatActivity activity) {
       this.activity = activity;
   }

   public String getCurrentOrientationType() {
       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
       return fromRotationToOrientationType(rotation);
   }

   private String fromRotationToOrientationType(int rotation) {
       switch (rotation) {
           case Surface.ROTATION_90:
               return "landscape-primary";
           case Surface.ROTATION_180:
               return "portrait-secondary";
           case Surface.ROTATION_270:
               return "landscape-secondary";
           default:
               return "portrait-primary";
       }
   }
}

----------------------------------------

TITLE: Implementing Screen Orientation Core Functionality
DESCRIPTION: Creates the main implementation class that handles getting current orientation and converting between rotation values and orientation types.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import android.view.Surface;
import androidx.appcompat.app.AppCompatActivity;

public class ScreenOrientation {
   private AppCompatActivity activity;

   public ScreenOrientation(AppCompatActivity activity) {
       this.activity = activity;
   }

   public String getCurrentOrientationType() {
       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
       return fromRotationToOrientationType(rotation);
   }

   private String fromRotationToOrientationType(int rotation) {
       switch (rotation) {
           case Surface.ROTATION_90:
               return "landscape-primary";
           case Surface.ROTATION_180:
               return "portrait-secondary";
           case Surface.ROTATION_270:
               return "landscape-secondary";
           default:
               return "portrait-primary";
       }
   }
}

----------------------------------------

TITLE: App Launcher Usage Example
DESCRIPTION: TypeScript example showing how to check if a URL can be opened and how to open a URL using the App Launcher plugin

LANGUAGE: typescript
CODE:
import { AppLauncher } from '@capacitor/app-launcher';

const checkCanOpenUrl = async () => {
  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });

  console.log('Can open url: ', value);
};

const openPortfolioPage = async () => {
  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });
};

----------------------------------------

TITLE: Defining ScreenOrientationPlugin Interface in TypeScript
DESCRIPTION: This code defines the TypeScript interface for the ScreenOrientationPlugin, including methods for getting orientation, locking/unlocking orientation, and handling orientation change events.

LANGUAGE: typescript
CODE:
import type { PluginListenerHandle } from '@capacitor/core';

export interface ScreenOrientationPlugin {
  /**
   * Returns the screen's current orientation.
   */
  orientation(): Promise<{ type: OrientationType }>;

  /**
   * Locks the screen orientation.
   */
  lock(opts: { orientation: OrientationLockType }): Promise<void>;

  /**
   * Unlocks the screen's orientation.
   */
  unlock(): Promise<void>;

  /**
   * Listens for screen orientation changes.
   */
  addListener(
    eventName: 'screenOrientationChange',
    listenerFunc: (orientation: { type: OrientationType }) => void,
  ): Promise<PluginListenerHandle> & PluginListenerHandle;

  /**
   * Removes all listeners
   */
  removeAllListeners(): Promise<void>;
}

----------------------------------------

TITLE: Implementing Android Plugin Method
DESCRIPTION: Shows how to implement plugin functionality for Android platform using Java, including parameter handling.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic

  call.resolve();
}

----------------------------------------

TITLE: Registering Web Implementation of Screen Orientation Plugin in TypeScript
DESCRIPTION: Registers the ScreenOrientationWeb class as the web implementation of the ScreenOrientation plugin using Capacitor's registerPlugin function.

LANGUAGE: typescript
CODE:
const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
  {
    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),
  },
);

----------------------------------------

TITLE: Getting Current Position TypeScript Implementation
DESCRIPTION: Method to get the current GPS location of the device with optional position options.

LANGUAGE: typescript
CODE:
getCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>

----------------------------------------

TITLE: Updating Podfile Target Name in Ruby
DESCRIPTION: Example showing how to rename the default 'App' target to 'MyRenamedApp' in the iOS Podfile configuration.

LANGUAGE: ruby
CODE:
target 'MyRenamedApp' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Removing All Listeners
DESCRIPTION: TypeScript function to remove all listeners for screen orientation events using the Screen Orientation API.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Configuring Keyboard Plugin in TypeScript
DESCRIPTION: Example of configuring the Keyboard plugin in capacitor.config.ts, including resize mode, style, and fullscreen settings.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/keyboard" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    Keyboard: {
      resize: "body",
      style: "dark",
      resizeOnFullScreen: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Configuring iOS Screen Orientation in Info.plist
DESCRIPTION: This XML snippet shows how to set supported interface orientations for iPhones and iPads in the Info.plist file. It limits iPhones to portrait mode and iPads to landscape modes.

LANGUAGE: xml
CODE:
  <key>UISupportedInterfaceOrientations</key>
  <array>
    <string>UIInterfaceOrientationPortrait</string>
  </array>
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeRight</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
  </array>

----------------------------------------

TITLE: Configuring Capacitor Server Hostname
DESCRIPTION: TypeScript code for setting the Capacitor server hostname in the configuration file to enable password manager suggestions for the app.

LANGUAGE: typescript
CODE:
const config: CapacitorConfig = {
...
  server: {
    hostname: 'my-app.com',
    androidScheme: 'https',
  }
};

----------------------------------------

TITLE: Accessing Configuration in Swift
DESCRIPTION: Shows how to access plugin configuration values in iOS native code using the getConfig() utility method.

LANGUAGE: swift
CODE:
if let style = getConfig().getString("style") {
  // Set the style
}

----------------------------------------

TITLE: Complete Capacitor Configuration Schema
DESCRIPTION: Complete TypeScript interface definition for Capacitor configuration options, including detailed type information and documentation for all supported properties across iOS, Android and web platforms.

LANGUAGE: typescript
CODE:
export interface CapacitorConfig {
  appId?: string;
  appName?: string;
  webDir?: string;
  loggingBehavior?: 'none' | 'debug' | 'production';
  overrideUserAgent?: string;
  appendUserAgent?: string;
  backgroundColor?: string;
  zoomEnabled?: boolean;
  initialFocus?: boolean;
  android?: {
    path?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    zoomEnabled?: boolean;
    allowMixedContent?: boolean;
    captureInput?: boolean;
    webContentsDebuggingEnabled?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    flavor?: string;
    initialFocus?: boolean;
    minWebViewVersion?: number;
    minHuaweiWebViewVersion?: number;
    buildOptions?: {
      keystorePath?: string;
      keystorePassword?: string;
      keystoreAlias?: string;
      keystoreAliasPassword?: string;
      releaseType?: 'AAB' | 'APK';
      signingType?: 'apksigner' | 'jarsigner';
    };
    useLegacyBridge?: boolean;
    resolveServiceWorkerRequests?: boolean;
  };
  ios?: {
    path?: string;
    scheme?: string;
    overrideUserAgent?: string;
    appendUserAgent?: string;
    backgroundColor?: string;
    zoomEnabled?: boolean;
    contentInset?: 'automatic' | 'scrollableAxes' | 'never' | 'always';
    scrollEnabled?: boolean;
    cordovaLinkerFlags?: string[];
    allowsLinkPreview?: boolean;
    loggingBehavior?: 'none' | 'debug' | 'production';
    includePlugins?: string[];
    limitsNavigationsToAppBoundDomains?: boolean;
    preferredContentMode?: 'recommended' | 'desktop' | 'mobile';
    handleApplicationNotifications?: boolean;
    webContentsDebuggingEnabled?: boolean;
    initialFocus?: boolean;
  };
  server?: {
    hostname?: string;
    iosScheme?: string;
    androidScheme?: string;
    url?: string;
    cleartext?: boolean;
    allowNavigation?: string[];
    errorPath?: string;
  };
  cordova?: {
    accessOrigins?: string[];
    preferences?: { [key: string]: string | undefined };
  };
  plugins?: PluginsConfig;
  includePlugins?: string[];
}

----------------------------------------

TITLE: Locking Screen Orientation
DESCRIPTION: TypeScript function to lock the screen orientation to a specified type using options parameter.

LANGUAGE: typescript
CODE:
lock(options: OrientationLockOptions) => Promise<void>

----------------------------------------

TITLE: Creating Custom Capacitor Plugin in Java
DESCRIPTION: This code snippet demonstrates how to create a custom Capacitor plugin named 'Echo' in Java. It includes the necessary imports, class definition with @CapacitorPlugin annotation, and a method to echo a value.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Configuring iOS for File Sharing
DESCRIPTION: Instructions to enable file sharing in the iOS Files app by setting specific keys in Info.plist.

LANGUAGE: xml
CODE:
<key>UIFileSharingEnabled</key>
<true/>
<key>LSSupportsOpeningDocumentsInPlace</key>
<true/>

----------------------------------------

TITLE: Implementing Content Security Policy in HTML Meta Tag
DESCRIPTION: Demonstrates how to configure Content Security Policy (CSP) in a Capacitor app by adding a meta tag to restrict resource loading to specific origins. This example allows requests to the current origin and foo.com domain.

LANGUAGE: html
CODE:
<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self' foo.com"
/>

----------------------------------------

TITLE: Status Bar Usage Examples in TypeScript
DESCRIPTION: Examples showing how to handle status bar interactions including style changes, visibility toggling, and event handling.

LANGUAGE: typescript
CODE:
import { StatusBar, Style } from '@capacitor/status-bar';

// iOS only
window.addEventListener('statusTap', function () {
  console.log('statusbar tapped');
});

// Display content under transparent status bar (Android only)
StatusBar.setOverlaysWebView({ overlay: true });

const setStatusBarStyleDark = async () => {
  await StatusBar.setStyle({ style: Style.Dark });
};

const setStatusBarStyleLight = async () => {
  await StatusBar.setStyle({ style: Style.Light });
};

const hideStatusBar = async () => {
  await StatusBar.hide();
};

const showStatusBar = async () => {
  await StatusBar.show();
};

----------------------------------------

TITLE: Using Status Bar API in TypeScript
DESCRIPTION: Example of using the Status Bar API to handle status bar tap events, set styles, and show/hide the status bar. Demonstrates various methods provided by the plugin.

LANGUAGE: typescript
CODE:
import { StatusBar, Style } from '@capacitor/status-bar';

// iOS only
window.addEventListener('statusTap', function () {
  console.log('statusbar tapped');
});

// Display content under transparent status bar (Android only)
StatusBar.setOverlaysWebView({ overlay: true });

const setStatusBarStyleDark = async () => {
  await StatusBar.setStyle({ style: Style.Dark });
};

const setStatusBarStyleLight = async () => {
  await StatusBar.setStyle({ style: Style.Light });
};

const hideStatusBar = async () => {
  await StatusBar.hide();
};

const showStatusBar = async () => {
  await StatusBar.show();
};

----------------------------------------

TITLE: Implementing Permissions in Capacitor iOS Plugin
DESCRIPTION: Shows how to implement checkPermissions() and requestPermissions() methods in a Capacitor iOS plugin, including examples for location services and multiple permissions.

LANGUAGE: swift
CODE:
@objc override func checkPermissions(_ call: CAPPluginCall) {
    let locationState: String

    switch CLLocationManager.authorizationStatus() {
    case .notDetermined:
        locationState = "prompt"
    case .restricted, .denied:
        locationState = "denied"
    case .authorizedAlways, .authorizedWhenInUse:
        locationState = "granted"
    @unknown default:
        locationState = "prompt"
    }

    call.resolve(["location": locationState])
}

LANGUAGE: swift
CODE:
@objc override func requestPermissions(_ call: CAPPluginCall) {
    // get the permissions to check or default to all of them
    var permissions = call.getArray("types", String.self) ?? []
    if permissions.isEmpty {
        permissions = ["contacts", "camera"]
    }

    let group = DispatchGroup()
    if permissions.contains("contacts") {
        group.enter()
        store.requestAccess(for: .contacts) { (_, _) in
            group.leave()
        }
    }
    if permissions.contains("camera") {
        group.enter()
        AVCaptureDevice.requestAccess(for: .video) { _ in
            group.leave()
        }
    }
    group.notify(queue: DispatchQueue.main) {
        self.checkPermissions(call)
    }
}

----------------------------------------

TITLE: Implementing Deep Link Routing in Angular
DESCRIPTION: This snippet demonstrates how to implement deep link routing in an Angular app using the Capacitor App API. It listens for the 'appUrlOpen' event and redirects to the appropriate route based on the deep link URL.

LANGUAGE: typescript
CODE:
import { Component, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { App, URLOpenListenerEvent } from '@capacitor/app';

constructor(private router: Router, private zone: NgZone) {
    this.initializeApp();
}

initializeApp() {
    App.addListener('appUrlOpen', (event: URLOpenListenerEvent) => {
        this.zone.run(() => {
            // Example url: https://beerswift.app/tabs/tab2
            // slug = /tabs/tab2
            const slug = event.url.split(".app").pop();
            if (slug) {
                this.router.navigateByUrl(slug);
            }
            // If no match, do nothing - let regular routing
            // logic take over
        });
    });
}

----------------------------------------

TITLE: Verifying Node.js Installation for Capacitor Development
DESCRIPTION: Checks the installed version of Node.js to ensure it meets Capacitor's requirements of version 20 or higher.

LANGUAGE: bash
CODE:
node --version
# v20.9.0

----------------------------------------

TITLE: Installing @capacitor/network Plugin
DESCRIPTION: Commands to install the @capacitor/network plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/network
npx cap sync

----------------------------------------

TITLE: Using Custom Capacitor Plugin in TypeScript
DESCRIPTION: This code snippet demonstrates how to import and use a custom Capacitor plugin in a web application. It shows the necessary imports and how to destructure the plugin from Capacitor Core.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';
import 'my-plugin';

const { MyPlugin } = Plugins;
await MyPlugin.echo({
  value: 'Hello from web!',
});

----------------------------------------

TITLE: Installing IAP Plugin for Capacitor
DESCRIPTION: Commands to install the cordova-plugin-purchase package and update Capacitor to implement In App Purchase functionality. This is the initial setup required before configuring products and consumables.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: Impact Method Definition
DESCRIPTION: TypeScript definition for the impact method that triggers haptic impact feedback with configurable options

LANGUAGE: typescript
CODE:
impact(options?: ImpactOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Implementing Custom ViewController in Swift for Capacitor
DESCRIPTION: Basic implementation of a custom ViewController that subclasses CAPBridgeViewController. This code shows the minimum required imports and class declaration needed to create a custom ViewController in a Capacitor iOS application.

LANGUAGE: swift
CODE:
import UIKit
import Capacitor

class MyViewController: CAPBridgeViewController {
    // additional code
}

----------------------------------------

TITLE: Retrieving Device Language Tag in TypeScript
DESCRIPTION: Example of using the Device.getLanguageTag() method to get the device's current language locale tag.

LANGUAGE: typescript
CODE:
getLanguageTag() => Promise<LanguageTag>

----------------------------------------

TITLE: Implementing Autofill Credentials Form in Angular
DESCRIPTION: HTML code for creating a form with autofill-enabled input fields for email and password in an Angular application. Includes a workaround for a webkit bug related to ion-input.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input appAutofill type="email" name="email" autocomplete="email" [(ngModel)]="email" required email></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input appAutofill type="password" name="password" autocomplete="current-password" required [(ngModel)]="password"></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

----------------------------------------

TITLE: Adding Capacitor iOS Pods Helper Script in Ruby
DESCRIPTION: This code adds a reference to the Capacitor iOS pods helper script in the Podfile. It's required for the iOS project update.

LANGUAGE: ruby
CODE:
require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

----------------------------------------

TITLE: Configuring Keyboard Plugin in TypeScript
DESCRIPTION: Example of how to configure the Keyboard plugin in capacitor.config.ts file using TypeScript.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/keyboard" />

import { CapacitorConfig } from '@capacitor/cli';
import { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';

const config: CapacitorConfig = {
  plugins: {
    Keyboard: {
      resize: KeyboardResize.Body,
      style: KeyboardStyle.Dark,
      resizeOnFullScreen: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Accessing Configuration in Java
DESCRIPTION: Shows how to access plugin configuration values in Android native code using the getConfig() utility method.

LANGUAGE: java
CODE:
String style = getConfig().getString("style");
if(style) {
  // Set the style
}

----------------------------------------

TITLE: Triggering JavaScript Events
DESCRIPTION: Method declarations and examples for triggering JavaScript events from native code, supporting both basic events and events with data payload.

LANGUAGE: swift
CODE:
func triggerJSEvent(eventName: String, target: String)
func triggerJSEvent(eventName: String, target: String, data: String)

LANGUAGE: swift
CODE:
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "window")
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "document", data: "{ 'dataKey': 'dataValue' }")

----------------------------------------

TITLE: Unlocking Screen Orientation
DESCRIPTION: TypeScript function to remove any screen orientation locks.

LANGUAGE: typescript
CODE:
unlock() => Promise<void>

----------------------------------------

TITLE: Including Capacitor Runtime in HTML
DESCRIPTION: HTML script tags showing how to properly include the Capacitor runtime bundle before other JavaScript files in a web project.

LANGUAGE: html
CODE:
<script src="capacitor.js"></script>
<script src="your/app.js"></script>

----------------------------------------

TITLE: Configuring iOS Push Notification Presentation Options
DESCRIPTION: JSON configuration to specify how push notifications are displayed when the app is in foreground on iOS. Options include badge, sound, and alert settings.

LANGUAGE: json
CODE:
"plugins": {
  "PushNotifications": {
    "presentationOptions": ["badge", "sound", "alert"]
  }
}

----------------------------------------

TITLE: Implementing Autofill Credentials Form in Angular
DESCRIPTION: HTML code for creating a form with autofill-enabled input fields for email and password in an Angular application.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input
        appAutofill
        type="email"
        name="email"
        autocomplete="email"
        [(ngModel)]="email"
        required
        email
      ></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input
        appAutofill
        type="password"
        name="password"
        autocomplete="current-password"
        required
        [(ngModel)]="password"
      ></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

----------------------------------------

TITLE: Basic Geolocation Usage Example
DESCRIPTION: Example showing how to import the Geolocation plugin and get the current device position.

LANGUAGE: typescript
CODE:
import { Geolocation } from '@capacitor/geolocation';

const printCurrentPosition = async () => {
  const coordinates = await Geolocation.getCurrentPosition();

  console.log('Current position:', coordinates);
};

----------------------------------------

TITLE: Screen Orientation Change Event Listener
DESCRIPTION: TypeScript function to add a listener for screen orientation changes.

LANGUAGE: typescript
CODE:
addListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Registering and Typing Custom Plugin in TypeScript
DESCRIPTION: This snippet demonstrates how to register the custom EchoPlugin in TypeScript, including defining an interface for type safety. It uses registerPlugin from @capacitor/core to create a typed plugin object.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Adding iOS Platform to Capacitor Project
DESCRIPTION: Add the iOS platform to your Capacitor project using the Capacitor CLI. This sets up the necessary iOS project files.

LANGUAGE: bash
CODE:
npx cap add ios

----------------------------------------

TITLE: Keyboard Event Listeners Implementation
DESCRIPTION: Example showing how to set up keyboard event listeners for show/hide events with height information

LANGUAGE: typescript
CODE:
import { Keyboard } from '@capacitor/keyboard';

Keyboard.addListener('keyboardWillShow', info => {
  console.log('keyboard will show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardDidShow', info => {
  console.log('keyboard did show with height:', info.keyboardHeight);
});

Keyboard.addListener('keyboardWillHide', () => {
  console.log('keyboard will hide');
});

Keyboard.addListener('keyboardDidHide', () => {
  console.log('keyboard did hide');
});

----------------------------------------

TITLE: Creating New Capacitor Application
DESCRIPTION: Command to create a new Capacitor application using the @capacitor/create-app package

LANGUAGE: bash
CODE:
npm init @capacitor/app

----------------------------------------

TITLE: Motion API Type Definitions
DESCRIPTION: TypeScript interface and type definitions for the Motion API showing acceleration and orientation event data structures

LANGUAGE: typescript
CODE:
addListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle> & PluginListenerHandle

addListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle> & PluginListenerHandle

removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Syncing Capacitor Project
DESCRIPTION: Command to synchronize web assets with native projects, copy new plugins, and setup native dependencies

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Publishing Plugin Command
DESCRIPTION: Command to publish the Capacitor plugin to npm registry.

LANGUAGE: bash
CODE:
npm publish

----------------------------------------

TITLE: Toast.show Method Signature in Capacitor (TypeScript)
DESCRIPTION: This snippet shows the TypeScript method signature for the 'show' method of the Toast API. It takes ToastShowOptions as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
show(options: ToastShowOptions) => Promise<void>

----------------------------------------

TITLE: Installing Capacitor Network Plugin
DESCRIPTION: Commands to install the @capacitor/network package and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/network
npx cap sync

----------------------------------------

TITLE: Configuring Capacitor Cookies in TypeScript
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.ts file using TypeScript.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorCookies: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Adding Android Exported Tag to Manifest
DESCRIPTION: This code adds the android:exported tag to the activity in the AndroidManifest.xml file, which is required for Android 12 compatibility.

LANGUAGE: xml
CODE:
android:exported="true"

----------------------------------------

TITLE: Language Code Method Definition
DESCRIPTION: TypeScript method definition for getLanguageCode() which returns the device's current language locale code

LANGUAGE: typescript
CODE:
getLanguageCode() => Promise<GetLanguageCodeResult>

----------------------------------------

TITLE: Configuring CapacitorHttp Plugin in JSON
DESCRIPTION: Example configuration for enabling fetch/XMLHttpRequest patching in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorHttp": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Registering ScreenOrientation Plugin with Capacitor in Objective-C
DESCRIPTION: This code registers the ScreenOrientation plugin with Capacitor, making its methods available to JavaScript.

LANGUAGE: objc
CODE:
#import <Foundation/Foundation.h>
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(ScreenOrientationPlugin, "ScreenOrientation",
  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Angular Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in an Angular application with TypeScript

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <capacitor-google-map #map></capacitor-google-map>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-map {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Implementing Capacitor CLI Hooks in package.json
DESCRIPTION: Example configuration showing how to set up CLI hooks in package.json to execute commands before and after Capacitor operations. The hooks use the $CAPACITOR_PLATFORM_NAME environment variable to reference the current platform.

LANGUAGE: json
CODE:
{
  "scripts": {
    "capacitor:copy:before": "echo copy before $CAPACITOR_PLATFORM_NAME",
    "capacitor:copy:after": "echo copy after $CAPACITOR_PLATFORM_NAME",
    "capacitor:update:before": "echo update before $CAPACITOR_PLATFORM_NAME",
    "capacitor:update:after": "echo update after $CAPACITOR_PLATFORM_NAME",
    "capacitor:sync:before": "echo sync before $CAPACITOR_PLATFORM_NAME",
    "capacitor:sync:after": "echo sync after $CAPACITOR_PLATFORM_NAME"
  }
}

----------------------------------------

TITLE: Network Status Change Listener
DESCRIPTION: TypeScript method definition for adding a network status change event listener.

LANGUAGE: typescript
CODE:
addListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Adding Network Status Change Listener in TypeScript
DESCRIPTION: Function signature for adding a listener to detect changes in the network connection.

LANGUAGE: typescript
CODE:
addListener(eventName: 'networkStatusChange', listenerFunc: ConnectionStatusChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Retrieving Device Information and Battery Status in TypeScript with Capacitor
DESCRIPTION: This snippet demonstrates how to use the Device API in Capacitor to retrieve device information and battery status. It imports the necessary plugins, calls the getInfo() and getBatteryInfo() methods, and logs the results.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';

const { Device } = Plugins;

const info = await Device.getInfo();
console.log(info);

// Example output:
{
  "diskFree": 12228108288,
  "appVersion": "1.0.2",
  "appBuild": "123",
  "appId": "com.capacitorjs.myapp",
  "appName": "MyApp",
  "operatingSystem": "ios",
  "osVersion": "11.2",
  "platform": "ios",
  "memUsed": 93851648,
  "diskTotal": 499054952448,
  "model": "iPhone",
  "manufacturer": "Apple",
  "uuid": "84AE7AA1-7000-4696-8A74-4FD588A4A5C7",
  "isVirtual":true
}

const info = await Device.getBatteryInfo();
console.log(info);

// Example output:
{
  "batteryLevel": -1,
  "isCharging": true
}

----------------------------------------

TITLE: Configuring iOS for File Sharing
DESCRIPTION: Instructions to enable file sharing in iOS by setting keys in Info.plist.

LANGUAGE: xml
CODE:
<key>UIFileSharingEnabled</key>
<true/>
<key>LSSupportsOpeningDocumentsInPlace</key>
<true/>

----------------------------------------

TITLE: Using Device API in TypeScript
DESCRIPTION: Example showing how to use Device.getInfo() and Device.getBatteryInfo() methods to retrieve device and battery information

LANGUAGE: typescript
CODE:
import { Device } from '@capacitor/device';

const logDeviceInfo = async () => {
  const info = await Device.getInfo();

  console.log(info);
};

const logBatteryInfo = async () => {
  const info = await Device.getBatteryInfo();

  console.log(info);
};

----------------------------------------

TITLE: Configuring PrivacyInfo.xcprivacy for iOS
DESCRIPTION: Example XML configuration for the PrivacyInfo.xcprivacy file required for iOS apps using the Preferences plugin.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Checking for Native Platform in Capacitor
DESCRIPTION: Demonstrates how to check if the app is running on a native platform versus web using isNativePlatform().

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  console.log("I'm a native app!");
} else {
  console.log("I'm a PWA or Web app!");
}

----------------------------------------

TITLE: Angular Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in an Angular application with TypeScript

LANGUAGE: typescript
CODE:
@Component({
  template: `
    <capacitor-google-map #map></capacitor-google-map>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-map {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Screen Orientation State Management
DESCRIPTION: Implementation of React state hook to track and manage screen orientation state.

LANGUAGE: typescript
CODE:
const [orientation, setOrientation] = useState<string>('');

----------------------------------------

TITLE: Action Sheet API Method Signature
DESCRIPTION: TypeScript signature for the showActions method of the Action Sheet API, showing parameters and return type.

LANGUAGE: typescript
CODE:
showActions(options: ShowActionsOptions) => Promise<ShowActionsResult>

----------------------------------------

TITLE: Implementing Orientation Method in ScreenOrientationPlugin
DESCRIPTION: This snippet updates the orientation method in ScreenOrientationPlugin to use the ScreenOrientation implementation and return the current orientation type.

LANGUAGE: swift
CODE:
@objc(ScreenOrientationPlugin)
public class ScreenOrientationPlugin: CAPPlugin {

  private let implementation = ScreenOrientation()

  @objc public func orientation(_ call: CAPPluginCall) {
    let orientationType = implementation.getCurrentOrientationType();
    call.resolve(["type": orientationType])
  }

  /* Remaining code omitted for brevity */
}

----------------------------------------

TITLE: Configuring Capacitor Http Plugin in JSON
DESCRIPTION: Example configuration for enabling the Capacitor Http Plugin in the capacitor.config.json file. This configuration enables the patching of fetch and XMLHttpRequest to use native libraries.

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorHttp": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Remove Screen Orientation Listeners
DESCRIPTION: TypeScript function to remove all screen orientation change event listeners.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Configuring Bundled Web Runtime in JSON
DESCRIPTION: Configuration settings in capacitor.config.json to enable bundled web runtime for script include usage.

LANGUAGE: json
CODE:
{
  "bundledWebRuntime": true
}

----------------------------------------

TITLE: Changing registerPlugin Order in Android
DESCRIPTION: This diff shows the correct order for registering custom plugins in the MainActivity.java file for Capacitor 4.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        registerPlugin(PluginInMyApp.class);
         super.onCreate(savedInstanceState);
-        registerPlugin(PluginInMyApp.class);
     }
 }

----------------------------------------

TITLE: Getting Device ID in TypeScript
DESCRIPTION: Function to retrieve a unique identifier for the device using the Device API.

LANGUAGE: typescript
CODE:
getId() => Promise<DeviceId>

----------------------------------------

TITLE: Detecting Platform in Capacitor
DESCRIPTION: Illustrates the use of getPlatform function to determine the current running platform (web, ios, or android) in a Capacitor application.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Creating a Google Map Instance in TypeScript
DESCRIPTION: TypeScript code to create a Google Map instance using the Capacitor plugin.

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';

const apiKey = 'YOUR_API_KEY_HERE';
const mapRef = document.getElementById('map');

const newMap = await GoogleMap.create({
  id: 'my-map',
  element: mapRef,
  apiKey: apiKey,
  config: {
    center: {
      lat: 33.6,
      lng: -117.9,
    },
    zoom: 8,
  },
});

----------------------------------------

TITLE: Locking Screen Orientation in TypeScript
DESCRIPTION: TypeScript function to lock the screen orientation to a specified type using the Screen Orientation API.

LANGUAGE: typescript
CODE:
lock(options: OrientationLockOptions) => Promise<void>

----------------------------------------

TITLE: Setting Zoom Level (TypeScript)
DESCRIPTION: TypeScript function to set the current zoom level. Takes an options object with a 'value' property representing the new zoom level as a decimal.

LANGUAGE: typescript
CODE:
set(options: SetOptions) => Promise<void>

----------------------------------------

TITLE: Creating New Capacitor App
DESCRIPTION: Command to create a new Capacitor application using the @capacitor/create-app package.

LANGUAGE: bash
CODE:
npm init @capacitor/app

----------------------------------------

TITLE: Implementing Storage Mock in TypeScript
DESCRIPTION: Basic implementation of a Storage plugin mock showing the core methods that can be stubbed for testing.

LANGUAGE: typescript
CODE:
export const Storage = {
  async get(data: { key: string }): Promise<{ value: string | undefined }> {
    return { value: undefined };
  },

  async set(data: { key: string; value: string }): Promise<void> {},
  async clear(): Promise<void> {},
};

----------------------------------------

TITLE: Capacitor Config TypeScript
DESCRIPTION: TypeScript configuration example for the Splash Screen plugin with type definitions.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/splash-screen" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    SplashScreen: {
      launchShowDuration: 3000,
      launchAutoHide: true,
      launchFadeOutDuration: 3000,
      backgroundColor: "#ffffffff",
      androidSplashResourceName: "splash",
      androidScaleType: "CENTER_CROP",
      showSpinner: true,
      androidSpinnerStyle: "large",
      iosSpinnerStyle: "small",
      spinnerColor: "#999999",
      splashFullScreen: true,
      splashImmersive: true,
      layoutName: "launch_screen",
      useDialog: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Checking Platform with Capacitor.getPlatform
DESCRIPTION: Shows how to use Capacitor.getPlatform to determine the current platform (web, iOS, or Android) the app is running on.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  console.log('iOS!');
} else if (Capacitor.getPlatform() === 'android') {
  console.log('Android!');
} else {
  console.log('Web!');
}

----------------------------------------

TITLE: Adding Capacitor Platform Support
DESCRIPTION: Commands to add iOS and Android platform support to a Capacitor project, creating separate native project folders.

LANGUAGE: bash
CODE:
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Android API Key Configuration
DESCRIPTION: Adding Google Maps API key to Android manifest file

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>

----------------------------------------

TITLE: Removing All Listeners in TypeScript
DESCRIPTION: Example of the removeAllListeners() method to remove all native listeners for the plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Installing Text Zoom Capacitor Plugin (Bash)
DESCRIPTION: Command-line instructions for installing the @capacitor/text-zoom plugin and syncing the project.

LANGUAGE: bash
CODE:
npm install @capacitor/text-zoom@latest-5
npx cap sync

----------------------------------------

TITLE: Creating Capacitor Plugin Project
DESCRIPTION: Command to generate a new Capacitor plugin project scaffold using @capacitor/create-plugin CLI tool.

LANGUAGE: bash
CODE:
npx @capacitor/create-plugin \
  --name @capacitor-community/screen-orientation \
  --package-id io.ionic.plugins.screenorientation \
  --class-name ScreenOrientation \
  --repo "https://ionic.io" \
  --license "MIT" \
  --description "Work with the screen orientation in a common way for iOS, Android, and web"

----------------------------------------

TITLE: URL Translation Methods
DESCRIPTION: Methods for translating URLs between web view and native file system formats, handling various URL schemes including res:// and file://.

LANGUAGE: swift
CODE:
func localURL(fromWebURL webURL: URL?) -> URL?

LANGUAGE: swift
CODE:
func portablePath(fromLocalURL localURL: URL?) -> URL?

----------------------------------------

TITLE: Dynamic Capacitor Configuration
DESCRIPTION: Complete TypeScript configuration file for handling multiple environment configurations

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

let config: CapacitorConfig;

const baseConfig: CapacitorConfig = {
  appId: 'io.ionic.starter',
  appName: 'My App',
  webDir: 'build',
  bundledWebRuntime: false,
};

switch (process.env.NODE_ENV) {
  case 'qa':
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App QA',
      },
      android: {
        flavor: 'qa',
      },
    };
    break;
  default:
    config = {
      ...baseConfig,
      ios: {
        scheme: 'App',
      },
      android: {
        flavor: 'dev',
      },
    };
    break;
}

export default config;

----------------------------------------

TITLE: Safe Array Null Value Replacement in Swift
DESCRIPTION: Shows the recommended approach for handling arrays with null values using Capacitor's convenience extension

LANGUAGE: swift
CODE:
if let values = call.getArray("bar").capacitor.replacingNullValues() as? [Int?] {
    // GOOD: `values` is now cast to `Int?` with `nil` at index 2
}

----------------------------------------

TITLE: Initializing Capacitor Configuration
DESCRIPTION: Command to initialize Capacitor configuration through an interactive CLI questionnaire.

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Moving Package to build.gradle
DESCRIPTION: Move the package declaration from AndroidManifest.xml to build.gradle file.

LANGUAGE: diff
CODE:
# AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
- <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-     package="[YOUR_PACKAGE_ID]">
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android">

LANGUAGE: diff
CODE:
# build.gradle

android {
+     namespace "[YOUR_PACKAGE_ID]"
      compileSdkVersion rootProject.ext.compileSdkVersion

----------------------------------------

TITLE: Battery Info Method Implementation
DESCRIPTION: Method to get device battery information

LANGUAGE: typescript
CODE:
getBatteryInfo() => Promise<BatteryInfo>

----------------------------------------

TITLE: Reading from Clipboard in TypeScript
DESCRIPTION: API definition for reading data from the clipboard. It returns a Promise that resolves to a ReadResult object containing the value and type of the clipboard content.

LANGUAGE: typescript
CODE:
read() => Promise<ReadResult>

----------------------------------------

TITLE: Preferences Set Method
DESCRIPTION: TypeScript interface showing the set method signature for storing values

LANGUAGE: typescript
CODE:
set(options: SetOptions) => Promise<void>

----------------------------------------

TITLE: Registering Plugin in MainActivity
DESCRIPTION: Registers the ScreenOrientationPlugin with Capacitor by overriding the onCreate method in MainActivity.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin;

import android.os.Bundle;
import com.getcapacitor.BridgeActivity;
import io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;

public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        registerPlugin(ScreenOrientationPlugin.class);
        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Updating iOS Platform Version in Podfile
DESCRIPTION: This code updates the iOS platform version to 13.0 in the Podfile, which is necessary for Capacitor 4 compatibility.

LANGUAGE: ruby
CODE:
platform :ios, '13.0'

----------------------------------------

TITLE: Adding Screen Orientation Change Listener in TypeScript
DESCRIPTION: TypeScript function to add a listener for screen orientation changes using the Screen Orientation API.

LANGUAGE: typescript
CODE:
addListener(eventName: 'screenOrientationChange', listenerFunc: (orientation: ScreenOrientationResult) => void) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Syncing Capacitor Web Assets
DESCRIPTION: Command to copy the Capacitor runtime bundle into the web assets directory for script include usage.

LANGUAGE: bash
CODE:
npx cap sync web

----------------------------------------

TITLE: Configuring Local Notifications Plugin in Capacitor Config
DESCRIPTION: Configure the Local Notifications plugin options in the Capacitor config file (JSON format).

LANGUAGE: json
CODE:
{
  "plugins": {
    "LocalNotifications": {
      "smallIcon": "ic_stat_icon_config_sample",
      "iconColor": "#488AFF",
      "sound": "beep.wav"
    }
  }
}

----------------------------------------

TITLE: Syncing Web Code to Native Projects
DESCRIPTION: Command to synchronize web application code with native projects, copying built web assets and installing native dependencies

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Android Manifest Display Name Configuration
DESCRIPTION: XML configuration for dynamic display name in Android manifest

LANGUAGE: xml
CODE:
<application
  ...snip...
  android:label="${displayName}">

  <activity
    ...snip...
    android:label="${displayName}">

----------------------------------------

TITLE: Implementing Motion Event Listeners in TypeScript
DESCRIPTION: Example showing how to request permissions, add acceleration listeners, and handle motion events with proper cleanup

LANGUAGE: typescript
CODE:
import { PluginListenerHandle } from '@capacitor/core';
import { Motion } from '@capacitor/motion';


let accelHandler: PluginListenerHandle;

myButton.addEventListener('click', async () => {
  try {
    await DeviceMotionEvent.requestPermission();
  } catch (e) {
    // Handle error
    return;
  }

  // Once the user approves, can start listening:
  accelHandler = await Motion.addListener('accel', event => {
    console.log('Device motion event:', event);
  });
});

// Stop the acceleration listener
const stopAcceleration = () => {
  if (accelHandler) {
    accelHandler.remove();
  }
};

// Remove all listeners
const removeListeners = () => {
  Motion.removeAllListeners();
};

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Open the iOS project in Xcode using the Capacitor CLI. This command launches Xcode with the project workspace.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Screen Reader API Method: speak
DESCRIPTION: TypeScript declaration for text-to-speech functionality

LANGUAGE: typescript
CODE:
speak(options: SpeakOptions) => Promise<void>

----------------------------------------

TITLE: Committing Changes in TypeScript
DESCRIPTION: This snippet demonstrates how to commit changes made to the virtual filesystem to reflect them in the actual project files.

LANGUAGE: typescript
CODE:
await project.commit();

----------------------------------------

TITLE: Native Platform Check in Capacitor (TypeScript)
DESCRIPTION: Shows how to check if the app is running on a native platform using isNativePlatform function.

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  // do something
}

----------------------------------------

TITLE: Implementing Echo Plugin in Kotlin for Capacitor Android
DESCRIPTION: This code snippet shows how to implement the Echo plugin using Kotlin for Capacitor Android. It demonstrates the same functionality as the Java version but in Kotlin syntax.

LANGUAGE: kotlin
CODE:
package android.plugin.test;

import com.getcapacitor.JSObject;
import com.getcapacitor.NativePlugin;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;

@NativePlugin()
class EchoPlugin : Plugin() {

  @PluginMethod
  fun echo(call: PluginCall) {
    val value = call.getString("value")
    val ret = JSObject()
    ret.put("value", value)
    call.success(ret)
  }
}

----------------------------------------

TITLE: Running Ionic Live Reload Commands
DESCRIPTION: Commands to start Live Reload for Android and iOS platforms using the Ionic CLI.

LANGUAGE: bash
CODE:
ionic cap run android -l --external
ionic cap run ios -l --external

----------------------------------------

TITLE: Setting App Name in Android strings.xml
DESCRIPTION: Shows how to change the app name and activity name in the strings.xml file for a Capacitor Android app.

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>
<string name="title_activity_main">MyApp</string>

----------------------------------------

TITLE: Updating Gradle Wrapper Version
DESCRIPTION: Update the Gradle wrapper version to 8.0.2 in the gradle-wrapper.properties file.

LANGUAGE: diff
CODE:
# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: Android Build Gradle Updates
DESCRIPTION: Diff showing required changes to Android build.gradle files for version 2.0 compatibility

LANGUAGE: diff
CODE:
 android {
-    compileSdkVersion 28
+    compileSdkVersion rootProject.ext.compileSdkVersion
     defaultConfig {
         applicationId "com.example.app"
-        minSdkVersion 21
-        targetSdkVersion 28
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion

----------------------------------------

TITLE: Creating Native Platform Projects
DESCRIPTION: Commands to create Android and iOS native projects

LANGUAGE: bash
CODE:
npx cap add android
npx cap add ios

----------------------------------------

TITLE: Running Capacitor Migration
DESCRIPTION: Execute the Capacitor migration command to automatically handle the upgrade process.

LANGUAGE: sh
CODE:
npx cap migrate

----------------------------------------

TITLE: Opening iOS Project Manually
DESCRIPTION: Alternative command to manually open the iOS project workspace in Xcode

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Keyboard Configuration in TypeScript
DESCRIPTION: TypeScript configuration example for keyboard plugin with type references and enum usage

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/keyboard" />

import { CapacitorConfig } from '@capacitor/cli';
import { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';

const config: CapacitorConfig = {
  plugins: {
    Keyboard: {
      resize: KeyboardResize.Body,
      style: KeyboardStyle.Dark,
      resizeOnFullScreen: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Language Tag Method Implementation
DESCRIPTION: Method to get the device's current language locale tag

LANGUAGE: typescript
CODE:
getLanguageTag() => Promise<LanguageTag>

----------------------------------------

TITLE: Obtaining Battery Information in TypeScript
DESCRIPTION: Function to retrieve current battery status information using the Device API.

LANGUAGE: typescript
CODE:
getBatteryInfo() => Promise<BatteryInfo>

----------------------------------------

TITLE: Configuring URL Scheme in strings.xml
DESCRIPTION: Shows how to set up custom URL schemes for deep linking by modifying the custom_url_scheme value in strings.xml.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Implementing Void Return Methods in Java and Objective-C
DESCRIPTION: Implementation examples for void return methods in Android (Java) and iOS (Objective-C). These methods don't return any data when the promise resolves.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_NONE)
public void method1(PluginCall call) {
}

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);
)

----------------------------------------

TITLE: Adding Platform Support in Ionic Capacitor Project
DESCRIPTION: Commands to add Android and iOS platform support to an Ionic Capacitor project.

LANGUAGE: bash
CODE:
ionic capacitor add android
ionic capacitor add ios

----------------------------------------

TITLE: Configuring URL Scheme in strings.xml
DESCRIPTION: Shows how to set up custom URL schemes for deep linking by modifying the custom_url_scheme value in strings.xml.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Configuring Capacitor Cookies Plugin in TypeScript
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.ts file using TypeScript.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorCookies: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Opens the iOS project in Xcode using the Capacitor CLI. This command launches Xcode with the project workspace.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Opens the iOS project in Xcode using the Capacitor CLI. This command launches Xcode with the project workspace.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Opens the iOS project in Xcode using the Capacitor CLI. This command launches Xcode with the project workspace.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Implementing Watch App Main Entry
DESCRIPTION: SwiftUI implementation of the watch app's main entry point with WatchConnectivity setup

LANGUAGE: swift
CODE:
import SwiftUI
import WatchConnectivity
import iOS_capWatch_watch

@main
struct watchddgg_Watch_AppApp: App {
    var body: some Scene {
        WindowGroup {
            CapWatchContentView()
                .onAppear {
                    assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
                    WCSession.default.delegate = WatchViewModel.shared
                    WCSession.default.activate()
                }
        }
    }
}

----------------------------------------

TITLE: Using Filesystem API in TypeScript
DESCRIPTION: Example demonstrating how to write, read, and delete files using the Filesystem API.

LANGUAGE: typescript
CODE:
import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

const writeSecretFile = async () => {
  await Filesystem.writeFile({
    path: 'secrets/text.txt',
    data: 'This is a test',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });
};

const readSecretFile = async () => {
  const contents = await Filesystem.readFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });

  console.log('secrets:', contents);
};

const deleteSecretFile = async () => {
  await Filesystem.deleteFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
  });
};

const readFilePath = async () => {
  const contents = await Filesystem.readFile({
    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',
  });

  console.log('data:', contents);
};

----------------------------------------

TITLE: Using Filesystem API in TypeScript
DESCRIPTION: Example demonstrating how to write, read, and delete files using the Filesystem API.

LANGUAGE: typescript
CODE:
import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

const writeSecretFile = async () => {
  await Filesystem.writeFile({
    path: 'secrets/text.txt',
    data: 'This is a test',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });
};

const readSecretFile = async () => {
  const contents = await Filesystem.readFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });

  console.log('secrets:', contents);
};

const deleteSecretFile = async () => {
  await Filesystem.deleteFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
  });
};

const readFilePath = async () => {
  const contents = await Filesystem.readFile({
    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt',
  });

  console.log('data:', contents);
};

----------------------------------------

TITLE: Plugin Availability with Conditional Logic (TypeScript)
DESCRIPTION: Demonstrates checking plugin availability with fallback logic for handling unavailable plugins.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Building Ionic Application
DESCRIPTION: Command to build the Ionic project, creating the www folder that Capacitor uses as the webDir.

LANGUAGE: bash
CODE:
ionic build

----------------------------------------

TITLE: Configuring iOS Screen Orientation in Info.plist
DESCRIPTION: This XML snippet demonstrates how to set supported interface orientations for iPhones and iPads in the Info.plist file. It limits iPhones to portrait mode and iPads to landscape orientations.

LANGUAGE: xml
CODE:
  <key>UISupportedInterfaceOrientations</key>
  <array>
    <string>UIInterfaceOrientationPortrait</string>
  </array>
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeRight</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
  </array>

----------------------------------------

TITLE: Updating Android SDK Versions
DESCRIPTION: Diff showing how to update SDK versions in the app's build.gradle file using the common variables.

LANGUAGE: diff
CODE:
 android {
-    compileSdkVersion 28
+    compileSdkVersion rootProject.ext.compileSdkVersion
     defaultConfig {
         applicationId "com.example.app"
-        minSdkVersion 21
-        targetSdkVersion 28
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

----------------------------------------

TITLE: Adding Android Platform to Ionic Capacitor Project
DESCRIPTION: Command to add the Android platform to an Ionic project using Capacitor.

LANGUAGE: bash
CODE:
ionic capacitor add android

----------------------------------------

TITLE: Moving Package Declaration to build.gradle
DESCRIPTION: Move the package declaration from AndroidManifest.xml to build.gradle and update the manifest accordingly.

LANGUAGE: diff
CODE:
# AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
- <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-     package="[YOUR_PACKAGE_ID]">
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android">

LANGUAGE: diff
CODE:
# build.gradle

android {
+     namespace "[YOUR_PACKAGE_ID]"
      compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33

----------------------------------------

TITLE: Implementing a Basic Echo Plugin in Swift for Capacitor iOS
DESCRIPTION: This snippet demonstrates a simple Capacitor plugin for iOS that echoes a value passed to it. It shows how to receive data from a plugin call and return data back to the caller.

LANGUAGE: swift
CODE:
import Capacitor

@objc(MyPlugin)
public class MyPlugin: CAPPlugin {
  @objc override public func load() {
    // Called when the plugin is first constructed in the bridge
  }

  @objc func echo(_ call: CAPPluginCall) {
    let value = call.getString("value") ?? ""
    call.resolve([
        "value": value
    ])
  }
}

----------------------------------------

TITLE: Configuring NPM Script for Trapeze
DESCRIPTION: Shows how to set up an NPM script to run the trapeze configuration tool with a YAML config file.

LANGUAGE: json
CODE:
"scripts": {
  "cap-config": "trapeze run config.yaml"
}

----------------------------------------

TITLE: Installing Local Notifications Plugin in Capacitor
DESCRIPTION: Commands to install the Local Notifications plugin and sync the Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications
npx cap sync

----------------------------------------

TITLE: Platform Detection in Capacitor (TypeScript)
DESCRIPTION: Demonstrates how to detect the current platform using getPlatform function.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Querying Network Status in TypeScript
DESCRIPTION: Function signature for querying the current status of the network connection using the getStatus() method.

LANGUAGE: typescript
CODE:
getStatus() => Promise<ConnectionStatus>

----------------------------------------

TITLE: Removing Maven Repository
DESCRIPTION: Diff showing how to remove the Capacitor maven repository from the app's build.gradle file, as it's no longer needed.

LANGUAGE: diff
CODE:
 repositories {
-    maven {
-        url "https://dl.bintray.com/ionic-team/capacitor"
-    }
     flatDir {
         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
     }
 }

----------------------------------------

TITLE: Example Background Runner Script
DESCRIPTION: JavaScript example showing event handling in a background runner file

LANGUAGE: javascript
CODE:
addEventListener('myCustomEvent', (resolve, reject, args) => {
  console.log('do something to update the system here');
  resolve();
});

addEventListener('myCustomEventWithReturnData', (resolve, reject, args) => {
  try {
    console.log('accepted this data: ' + JSON.stringify(args.user));
    const updatedUser = args.user;
    updatedUser.firstName = updatedUser.firstName + ' HELLO';
    updatedUser.lastName = updatedUser.lastName + ' WORLD';
    resolve(updatedUser);
  } catch (err) {
    reject(err);
  }
});

----------------------------------------

TITLE: Preferences Get Method
DESCRIPTION: TypeScript interface showing the get method signature for retrieving stored values

LANGUAGE: typescript
CODE:
get(options: GetOptions) => Promise<GetResult>

----------------------------------------

TITLE: Implementing Screen Orientation Logic in Swift
DESCRIPTION: Core implementation of screen orientation functionality including methods to get current orientation and convert between orientation types.

LANGUAGE: swift
CODE:
import Foundation
import UIKit

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }
}

----------------------------------------

TITLE: Installing Capacitor Plugin Dependencies for Ionic
DESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework for optimal user experience.

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Close Browser Method Definition
DESCRIPTION: TypeScript definition for the close method, available on Web & iOS platforms.

LANGUAGE: typescript
CODE:
close() => Promise<void>

----------------------------------------

TITLE: Installing Local Notifications Plugin in Capacitor
DESCRIPTION: Commands to install the Local Notifications plugin and sync the Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications
npx cap sync

----------------------------------------

TITLE: Implementing Void Return Methods in Java
DESCRIPTION: Example of implementing a void return method in Android using the @PluginMethod annotation with RETURN_NONE return type.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_NONE)
public void method1(PluginCall call) {
}

----------------------------------------

TITLE: Installing Capacitor Android Package
DESCRIPTION: Installs the @capacitor/android package using npm. This is the first step in adding Android support to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/android

----------------------------------------

TITLE: Querying Network Status in TypeScript
DESCRIPTION: Method to get the current status of the network connection, returning a Promise with ConnectionStatus.

LANGUAGE: typescript
CODE:
getStatus() => Promise<ConnectionStatus>

----------------------------------------

TITLE: Creating Apple App Site Association File for iOS
DESCRIPTION: This JSON snippet shows the structure of the apple-app-site-association file required for iOS deep linking. It specifies the app ID and the paths that should be handled by the app.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Orientation Change Listener Implementation
DESCRIPTION: Implementation of methods to handle device orientation change notifications

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  if(UIDevice.current.orientation.isValidInterfaceOrientation) {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Creating New Ionic Project with Capacitor
DESCRIPTION: Commands to create a new Ionic project with Capacitor integration using the tabs template.

LANGUAGE: bash
CODE:
ionic start myApp tabs --capacitor
cd myApp

----------------------------------------

TITLE: Installing Keyboard Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/keyboard plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/keyboard@latest-5
npx cap sync

----------------------------------------

TITLE: Configuring Watch App Main File in Swift
DESCRIPTION: Code to replace in the watch app's main file to set up Capacitor Watch functionality.

LANGUAGE: swift
CODE:
CapWatchContentView()
    .onAppear {
        assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
        WCSession.default.delegate = WatchViewModel.shared
        WCSession.default.activate()
    }

----------------------------------------

TITLE: Capacitor Plugin Import Example
DESCRIPTION: Example showing the new way to import Capacitor plugins directly from their packages

LANGUAGE: typescript
CODE:
// OLD
import { Plugins } from '@capacitor/core';
const { AnyPlugin } = Plugins;

// NEW
import { AnyPlugin } from 'any-plugin';

----------------------------------------

TITLE: Installing Homebrew Package Manager for macOS
DESCRIPTION: Installs Homebrew, a package manager for macOS, which is required to install CocoaPods for iOS development with Capacitor.

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

----------------------------------------

TITLE: Configuring Plugin in Capacitor Config
DESCRIPTION: Configuration options for Background Runner in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "BackgroundRunner": {
      "label": "com.example.background.task",
      "src": "runners/background.js",
      "event": "myCustomEvent",
      "repeat": true,
      "interval": 15,
      "autoStart": true
    }
  }
}

----------------------------------------

TITLE: Configuring iOS Content Mode in Capacitor
DESCRIPTION: Configuration required for iPad compatibility, setting the preferred content mode to mobile in the Capacitor configuration file.

LANGUAGE: json
CODE:
{
  "ios": {
    "preferredContentMode": "mobile"
  }
}

----------------------------------------

TITLE: Status Bar Show Method
DESCRIPTION: Method signature for showing the status bar with optional animation options.

LANGUAGE: typescript
CODE:
show(options?: StatusBarAnimationOptions) => Promise<void>

----------------------------------------

TITLE: Implementing Android Plugin Method
DESCRIPTION: Java implementation of the openMap method for Android platform using the Capacitor plugin architecture.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic
}

----------------------------------------

TITLE: Configuring Plugin in Capacitor Config
DESCRIPTION: Configuration options for Background Runner in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "BackgroundRunner": {
      "label": "com.example.background.task",
      "src": "runners/background.js",
      "event": "myCustomEvent",
      "repeat": true,
      "interval": 15,
      "autoStart": true
    }
  }
}

----------------------------------------

TITLE: iOS Third-Party Cookie Configuration
DESCRIPTION: XML configuration for Info.plist to enable third-party cookie support on iOS 14 and above.

LANGUAGE: xml
CODE:
<key>WKAppBoundDomains</key>
<array>
  <string>www.mydomain.com</string>
  <string>api.mydomain.com</string>
  <string>www.myothercooldomain.com</string>
</array>

----------------------------------------

TITLE: Starting Local Web Server for Live Reload in Capacitor
DESCRIPTION: This command starts the local web server for Live Reload. The server must be bound to 0.0.0.0 to be accessible from the LAN. The exact command may vary depending on the project setup.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Installing Ionic CLI and native-run for Live Reload
DESCRIPTION: Command to install Ionic CLI and native-run globally for enabling Live Reload functionality in Capacitor projects.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli native-run

----------------------------------------

TITLE: Opening iOS Project in Xcode with Capacitor CLI
DESCRIPTION: Use this command to open the iOS project in Xcode for further development and building.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Opening Browser Session with Capacitor Browser API
DESCRIPTION: Basic example of importing and using the Browser plugin to open a URL in an in-app browser session.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';

const { Browser } = Plugins;

await Browser.open({ url: 'http://capacitorjs.com/' });

----------------------------------------

TITLE: Locking Screen Orientation
DESCRIPTION: Implementation of screen orientation locking functionality.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.lock({ orientation: "landscape-primary" })}

----------------------------------------

TITLE: Installing Capacitor Android Package
DESCRIPTION: Command to install the @capacitor/android package using npm package manager.

LANGUAGE: bash
CODE:
npm install @capacitor/android

----------------------------------------

TITLE: Adding SCHEDULE_EXACT_ALARM Permission to AndroidManifest.xml
DESCRIPTION: XML snippet to add the SCHEDULE_EXACT_ALARM permission to the AndroidManifest.xml file for Android 12 and older.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />

----------------------------------------

TITLE: Updating Capacitor Platforms
DESCRIPTION: Commands for updating iOS and Android platform packages to version 2.

LANGUAGE: bash
CODE:
npm install @capacitor/ios@2
npm install @capacitor/android@2

----------------------------------------

TITLE: Initializing Capacitor Project
DESCRIPTION: Command to initialize a Capacitor project with the app name and ID extracted from the Cordova config.xml file.

LANGUAGE: bash
CODE:
npx cap init [appName] [appId]

----------------------------------------

TITLE: Installing Network Plugin for Capacitor
DESCRIPTION: Commands to install the Network plugin for Capacitor and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/network@latest-5
npx cap sync

----------------------------------------

TITLE: Removing Manual Plugin Initialization in Java
DESCRIPTION: Remove the onCreate method from MainActivity.java to switch to automatic Android plugin loading.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Initializes the Bridge
-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{
-            // Additional plugins you've installed go here
-            add(Plugin1.class);
-            add(Plugin2.class);
-        }});
-    }
 }

----------------------------------------

TITLE: Configuring Android Scheme in Capacitor Config
DESCRIPTION: Set the androidScheme to 'http' in the Capacitor configuration file to maintain compatibility.

LANGUAGE: typescript
CODE:
{
  server: {
    androidScheme: "http"
  }
}

----------------------------------------

TITLE: Starting Local Web Server for Framework CLIs
DESCRIPTION: Generic command to start a local web server for Live Reload when using framework CLIs. The server must be bound to 0.0.0.0 for LAN accessibility.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Getting Capacitor Configuration
DESCRIPTION: Method to retrieve the Capacitor runtime configuration object.

LANGUAGE: java
CODE:
public CapConfig getConfig()

----------------------------------------

TITLE: Installing Text Zoom Capacitor Plugin
DESCRIPTION: Commands for installing the Text Zoom plugin and syncing Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/text-zoom
npx cap sync

----------------------------------------

TITLE: Syncing Web Code to Capacitor Project
DESCRIPTION: This command copies the built web bundle to Android and iOS projects and updates native dependencies.

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Handling Deep Links in Vue
DESCRIPTION: Code snippet for handling deep links in a Vue application using the Capacitor App API and Vue Router. It listens for the 'appUrlOpen' event and navigates to the appropriate route.

LANGUAGE: typescript
CODE:
import { App, URLOpenListenerEvent } from '@capacitor/app';
import Vue from 'vue';
import VueRouter from 'vue-router';

const router = new VueRouter({
  routes: [],
});

const VueApp = new Vue({
  router,
}).$mount('#app');

App.addListener('appUrlOpen', function (event: URLOpenListenerEvent) {
  // Example url: https://beerswift.app/tabs/tabs2
  // slug = /tabs/tabs2
  const slug = event.url.split('.app').pop();

  // We only push to the route if there is a slug present
  if (slug) {
    router.push({
      path: slug,
    });
  }
});

----------------------------------------

TITLE: Status Bar WebView Overlay Method
DESCRIPTION: Method signature for configuring whether the status bar overlays the webview, particularly useful for notched devices.

LANGUAGE: typescript
CODE:
setOverlaysWebView(options: StatusBarOverlaysWebviewOptions) => Promise<void>

----------------------------------------

TITLE: Dialog API Method: alert
DESCRIPTION: TypeScript definition for the alert method in the Dialog API, used to show an alert dialog.

LANGUAGE: typescript
CODE:
alert(options: AlertOptions) => Promise<void>

----------------------------------------

TITLE: Updating Android Project Variables in Gradle
DESCRIPTION: Update the variables in the variables.gradle file to the new minimum values required for Capacitor 5.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 33
targetSdkVersion = 33
androidxActivityVersion = '1.7.0'
androidxAppCompatVersion = '1.6.1'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.10.0'
androidxFragmentVersion = '1.5.6'
coreSplashScreenVersion = '1.0.0'
androidxWebkitVersion = '1.6.1'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.5'
androidxEspressoCoreVersion = '3.5.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Implementing Value Return Methods in Objective-C
DESCRIPTION: Example of implementing a value return method in iOS using the CAP_PLUGIN macro with CAPPluginReturnPromise return type.

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method2, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Extending WebPlugin for ScreenOrientation in TypeScript
DESCRIPTION: Defines the ScreenOrientationWeb class that extends Capacitor's WebPlugin and sets up a listener for screen orientation changes.

LANGUAGE: typescript
CODE:
import { WebPlugin } from '@capacitor/core';
import type { ScreenOrientationPlugin } from './definitions';

export class ScreenOrientationWeb extends WebPlugin {
  constructor() {
    super();
    window.screen.orientation.addEventListener("change", () => {
      const type = window.screen.orientation.type;
      this.notifyListeners("screenOrientationChange", { type });
    });
  }
}

----------------------------------------

TITLE: Mocking Capacitor Storage Plugin in Jest Tests
DESCRIPTION: Illustrates how to mock and spy on the Capacitor Storage plugin methods in Jest unit tests. It shows examples of mocking the 'get' and 'clear' methods with different implementations and expectations.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
  Storage.get = jest.fn().mockImplementation(
    async (data: { key: string }): Promise<{ value: string }> => {
      return data.key === "firstName"
        ? { value: "Jimmy" }
        : data.key === "lastName"
        ? { value: "Simms" }
        : { value: "unknown" };
    }
  );
  const w = mount(Home);
  await flushPromises();
  expect(w.vm.firstName).toEqual("Jimmy");
  expect(w.vm.lastName).toEqual("Simms");
});

it("clears the storage", () => {
  const button = wrapper.findComponent('[data-testid="clear"]');
  Storage.clear = jest.fn().mockResolvedValue(undefined);
  button.trigger("click");
  expect(Storage.clear).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: This command opens the iOS Capacitor .xcworkspace project in Xcode for more control over the native project.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Mocking Capacitor Storage Plugin in Jest Tests
DESCRIPTION: Illustrates how to mock and spy on the Capacitor Storage plugin methods in Jest unit tests. It shows examples of mocking the 'get' and 'clear' methods with different implementations and expectations.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
  Storage.get = jest.fn().mockImplementation(
    async (data: { key: string }): Promise<{ value: string }> => {
      return data.key === "firstName"
        ? { value: "Jimmy" }
        : data.key === "lastName"
        ? { value: "Simms" }
        : { value: "unknown" };
    }
  );
  const w = mount(Home);
  await flushPromises();
  expect(w.vm.firstName).toEqual("Jimmy");
  expect(w.vm.lastName).toEqual("Simms");
});

it("clears the storage", () => {
  const button = wrapper.findComponent('[data-testid="clear"]');
  Storage.clear = jest.fn().mockResolvedValue(undefined);
  button.trigger("click");
  expect(Storage.clear).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Exit App Function Definition
DESCRIPTION: Function to force exit the app, primarily used with Android back button handler. Not recommended for use with Ionic framework as it handles this internally.

LANGUAGE: typescript
CODE:
exitApp() => never

----------------------------------------

TITLE: speak Method Definition
DESCRIPTION: TypeScript interface for the speak method that provides text-to-speech functionality

LANGUAGE: typescript
CODE:
speak(options: SpeakOptions) => Promise<void>

----------------------------------------

TITLE: Setting iOS Scheme Configuration
DESCRIPTION: Configuration to change the iOS scheme from capacitor:// to ionic:// for maintaining LocalStorage data compatibility.

LANGUAGE: json
CODE:
{
  "server": {
    "iosScheme": "ionic"
  }
}

----------------------------------------

TITLE: Status Bar Style Configuration Method
DESCRIPTION: Method signature for setting the current style of the status bar using StatusBarStyleOptions interface.

LANGUAGE: typescript
CODE:
setStyle(options: StatusBarStyleOptions) => Promise<void>

----------------------------------------

TITLE: Requesting Permissions in Swift for iOS
DESCRIPTION: This snippet demonstrates how to implement the requestPermissions method for a Capacitor plugin, using a block-based API for requesting video access.

LANGUAGE: swift
CODE:
@objc override func requestPermissions(_ call: CAPPluginCall) {
    AVCaptureDevice.requestAccess(for: .video) { [weak self] _ in
        self?.checkPermissions(call)
    }
}


----------------------------------------

TITLE: Cordova Dependencies Configuration
DESCRIPTION: Example of package.json dependencies showing Cordova plugins that will be automatically installed by Capacitor.

LANGUAGE: json
CODE:
{
    "dependencies": {
        "@ionic-native/camera": "^5.3.0",
        "@ionic-native/core": "^5.3.0",
        "@ionic-native/file": "^5.3.0",
        "cordova-android": "8.0.0",
        "cordova-ios": "5.0.0",
        "cordova-plugin-camera": "4.0.3",
        "cordova-plugin-file": "6.0.1"
    }
}

----------------------------------------

TITLE: Running Capacitor Sync Command in Bash
DESCRIPTION: This command runs the Copy and Update commands together for Capacitor projects. It can be used with optional platform specification and deployment option.

LANGUAGE: bash
CODE:
npx cap sync [options] [platform]

----------------------------------------

TITLE: Dialog API Method: alert
DESCRIPTION: TypeScript definition for the alert method in the Dialog API, used to show an alert dialog.

LANGUAGE: typescript
CODE:
alert(options: AlertOptions) => Promise<void>

----------------------------------------

TITLE: Installing Background Runner Plugin
DESCRIPTION: Commands to install the Background Runner plugin and sync Capacitor project

LANGUAGE: bash
CODE:
npm install @capacitor/background-runner
npx cap sync

----------------------------------------

TITLE: Modifying Package ID in Android Gradle Build File
DESCRIPTION: Shows how to change the application ID (package ID) in the Android build.gradle file

LANGUAGE: diff
CODE:
defaultConfig {
-       applicationId "com.capacitorjs.app"
+       applicationId "com.mycompany.myapp"

----------------------------------------

TITLE: Installing Latest Capacitor CLI
DESCRIPTION: Command to install the latest version of Capacitor CLI as a dev dependency.

LANGUAGE: sh
CODE:
npm i -D @capacitor/cli@latest

----------------------------------------

TITLE: Manually Opening iOS Project in Xcode
DESCRIPTION: Alternative command to manually open the iOS project in Xcode by specifying the .xcworkspace file path.

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Manually Opening iOS Project in Xcode
DESCRIPTION: Alternative command to manually open the iOS project in Xcode by specifying the .xcworkspace file path.

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Manually Opening iOS Project in Xcode
DESCRIPTION: Alternative command to manually open the iOS project in Xcode by specifying the .xcworkspace file path.

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Running Capacitor Android App from Command Line
DESCRIPTION: Runs the Capacitor Android app on a device or emulator using the Capacitor CLI. This command prompts for target selection and launches the app.

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Getting Preferred Zoom Level
DESCRIPTION: TypeScript method to retrieve the preferred text zoom level as a decimal value

LANGUAGE: typescript
CODE:
getPreferred() => Promise<GetPreferredResult>

----------------------------------------

TITLE: Implementing WebView-Accessible Custom Plugin in Kotlin for Capacitor Android
DESCRIPTION: This snippet shows how to create a custom Capacitor plugin using Kotlin. It demonstrates the structure of a plugin class with two custom methods, illustrating how to handle plugin calls and return results in Kotlin.

LANGUAGE: kotlin
CODE:
package com.example.myapp;

import com.getcapacitor.NativePlugin;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;

@NativePlugin
class CustomNativePlugin : Plugin() {

  @PluginMethod
  fun customCall(call: PluginCall) {
    val message = call.getString("message")
    // More code here...
    call.success()
  }

  @PluginMethod
  fun customFunction(call: PluginCall) {
    // More code here...
    call.resolve()
  }
}

----------------------------------------

TITLE: Installing Barcode Scanner Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/barcode-scanner plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/barcode-scanner
npx cap sync

----------------------------------------

TITLE: JavaScript Form Implementation with Autofill Credentials
DESCRIPTION: HTML form template and JavaScript workaround for implementing credential autofill functionality using ion-input components.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input type="email" name="email" autocomplete="email" required email></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input id="pwd" type="password" name="password" autocomplete="current-password" required></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

LANGUAGE: javascript
CODE:
document.getElementById('pwd').children[0].addEventListener('change', (e) => {
  this.password = (e.target as any).value;      
});

----------------------------------------

TITLE: Installing Capacitor iOS Package
DESCRIPTION: Command to install the @capacitor/ios package using npm. This is the first step in adding iOS support to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/ios

----------------------------------------

TITLE: Running Capacitor App on Android
DESCRIPTION: Command to run a debug build of Capacitor app on an Android device

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Browser Event Listener Implementation
DESCRIPTION: API methods for adding event listeners for browser finished and page loaded events.

LANGUAGE: typescript
CODE:
addListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle

addListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Implementing Multiple Permissions Request
DESCRIPTION: Demonstrates handling multiple permission requests using DispatchGroup for synchronization

LANGUAGE: swift
CODE:
let store = CNContactStore()

@objc override func requestPermissions(_ call: CAPPluginCall) {
    var permissions = call.getArray("types", String.self) ?? []
    if permissions.isEmpty {
        permissions = ["contacts", "camera"]
    }

    let group = DispatchGroup()
    if permissions.contains("contacts") {
        group.enter()
        store.requestAccess(for: .contacts) { (_, _) in
            group.leave()
        }
    }
    if permissions.contains("camera") {
        group.enter()
        AVCaptureDevice.requestAccess(for: .video) { _ in
            group.leave()
        }
    }
    group.notify(queue: DispatchQueue.main) {
        self.checkPermissions(call)
    }
}

----------------------------------------

TITLE: Implementing iOS Privacy Manifest for Capacitor Preferences
DESCRIPTION: Sample Privacy Manifest (PrivacyInfo.xcprivacy) configuration for apps using @capacitor/preferences plugin, demonstrating UserDefaults API access declaration with appropriate privacy reason codes.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyTracking</key>
    <false/>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
    <key>NSPrivacyTrackingDomains</key>
    <array/>
  </dict>
</plist>

----------------------------------------

TITLE: Browser Event Listener Definitions
DESCRIPTION: TypeScript definitions for browser event listeners including browserFinished and browserPageLoaded events.

LANGUAGE: typescript
CODE:
addListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle>

addListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle>

removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Removing fileprovider_authority from Android strings.xml
DESCRIPTION: Remove the deprecated fileprovider_authority string from the Android strings.xml resource file. This string is no longer required in Capacitor 1.1.0.

LANGUAGE: diff
CODE:
     <string name="app_name">My App</string>
     <string name="title_activity_main">My App</string>
     <string name="package_name">com.getcapacitor.myapp</string>
-    <string name="fileprovider_authority">com.getcapacitor.myapp.fileprovider</string>
     <string name="custom_url_scheme">com.getcapacitor.myapp</string>
 </resources>

----------------------------------------

TITLE: Getting Current Zoom Level
DESCRIPTION: TypeScript method to retrieve the current text zoom level, returning a promise with the zoom value as a decimal.

LANGUAGE: typescript
CODE:
get() => Promise<GetResult>

----------------------------------------

TITLE: Adding Native Platform with Capacitor CLI
DESCRIPTION: This command adds a native platform project (Android or iOS) to your Capacitor project. The 'platform' parameter is required and must be either 'android' or 'ios'.

LANGUAGE: bash
CODE:
npx cap add <platform>

----------------------------------------

TITLE: iOS Third Party Cookies Configuration
DESCRIPTION: XML configuration for enabling third-party cookies support on iOS 14+ in Info.plist

LANGUAGE: xml
CODE:
<key>WKAppBoundDomains</key>
<array>
  <string>www.mydomain.com</string>
  <string>api.mydomain.com</string>
  <string>www.myothercooldomain.com</string>
</array>

----------------------------------------

TITLE: Updating Gradle Wrapper Properties
DESCRIPTION: Updates the Gradle wrapper distribution URL to version 8.2.1.

LANGUAGE: diff
CODE:
# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.2.1-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: Updating Android Splash Screen Theme
DESCRIPTION: Update the Android splash screen theme to use the new Android 12 Splash Screen API.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="Theme.SplashScreen">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Copying Web Assets with Capacitor CLI
DESCRIPTION: This command copies web assets to the iOS project without updating native dependencies, which is faster for minor updates.

LANGUAGE: bash
CODE:
npx cap copy

----------------------------------------

TITLE: Using Echo Plugin in TypeScript
DESCRIPTION: Demonstrates how to use the Echo plugin in TypeScript code to communicate with the native implementation.

LANGUAGE: typescript
CODE:
import Echo from '../path/to/echo-plugin';

const { value } = await Echo.echo({ value: 'Hello World!' });
console.log('Response from native:', value);

----------------------------------------

TITLE: Registering Custom Plugin in JavaScript
DESCRIPTION: This TypeScript code demonstrates how to register the custom 'Echo' plugin in JavaScript using the registerPlugin function from @capacitor/core. It also includes type definitions for better TypeScript support.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Installing AppLauncher Capacitor Plugin
DESCRIPTION: Commands to install the AppLauncher Capacitor plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/app-launcher
npx cap sync

----------------------------------------

TITLE: Updating Kotlin Version in build.gradle
DESCRIPTION: Update the Kotlin version to 1.8.20 and replace the Kotlin standard library dependency in the build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle
buildscript {
-    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.7.0'
+    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.8.20'
    repositories {

LANGUAGE: diff
CODE:
# build.gradle
dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

----------------------------------------

TITLE: Updating Kotlin Version in build.gradle
DESCRIPTION: Update the Kotlin version to 1.8.20 and replace the Kotlin standard library dependency in the build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle
buildscript {
-    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.7.0'
+    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.8.20'
    repositories {

LANGUAGE: diff
CODE:
# build.gradle
dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

----------------------------------------

TITLE: Selection Methods Definitions
DESCRIPTION: TypeScript method signatures for handling haptic feedback during selection operations.

LANGUAGE: typescript
CODE:
selectionStart() => void
selectionChanged() => void
selectionEnd() => void

----------------------------------------

TITLE: Screen Orientation Change Event Listener
DESCRIPTION: Sets up an event listener to handle screen orientation changes and update the UI accordingly.

LANGUAGE: typescript
CODE:
ScreenOrientation.addListener('screenOrientationChange', res => setOrientation(res.type));

----------------------------------------

TITLE: Updating Android CapacitorPlugin Annotation
DESCRIPTION: Shows how to migrate from @NativePlugin to the new @CapacitorPlugin annotation, including changes to permission handling and request codes.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(strings = { Manifest.permission.FOO }, alias = "foo"),
        @Permission(strings = { Manifest.permission.BAR }, alias = "bar")
    })
)

----------------------------------------

TITLE: Defining Plugin Configuration in TypeScript
DESCRIPTION: Example of setting configuration values for a plugin in the Capacitor config file

LANGUAGE: typescript
CODE:
{
  appId: 'com.company.app',
  ...
  plugins: {
    MyCoolPlugin: {
      style: "dark",
      iconColor: '#FF0000'
    }
  }
}

----------------------------------------

TITLE: Configuring Local Notifications for Android in Capacitor JSON
DESCRIPTION: This JSON configuration sets default values for local notifications on Android. It specifies the small icon, icon color, and default sound for notifications.

LANGUAGE: json
CODE:
"plugins": {
  "LocalNotifications": {
    "smallIcon": "ic_stat_icon_config_sample",
    "iconColor": "#488AFF",
    "sound": "beep.wav"
  }
}

----------------------------------------

TITLE: Building Native Apps with Capacitor CLI
DESCRIPTION: Command syntax for building native Android and iOS applications using Capacitor CLI. The command supports various build options including scheme selection for iOS, flavor selection for Android, and keystore configuration for Android signing.

LANGUAGE: bash
CODE:
npx cap build [options] <platform>

----------------------------------------

TITLE: Installing Capacitor Assets Package
DESCRIPTION: Command to install the @capacitor/assets package as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install @capacitor/assets --save-dev

----------------------------------------

TITLE: Implementing ScreenOrientation Class for iOS
DESCRIPTION: This code defines the ScreenOrientation class with methods to get the current orientation and convert between orientation types.

LANGUAGE: swift
CODE:
import Foundation
import UIKit

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }

}

----------------------------------------

TITLE: Implementing ScreenOrientation Class for iOS
DESCRIPTION: This code defines the ScreenOrientation class with methods to get the current orientation and convert between orientation types.

LANGUAGE: swift
CODE:
import Foundation
import UIKit

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }

}

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Command to open the iOS project in Xcode using the Capacitor CLI. This is a convenient way to launch Xcode with the correct project.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Geolocation API Method Definitions
DESCRIPTION: TypeScript interface definitions for the Geolocation plugin API methods

LANGUAGE: typescript
CODE:
getCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>

watchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>

clearWatch(options: ClearWatchOptions) => Promise<void>

checkPermissions() => Promise<PermissionStatus>

requestPermissions(permissions?: GeolocationPluginPermissions | undefined) => Promise<PermissionStatus>

----------------------------------------

TITLE: Implementing ScreenOrientation Class for iOS
DESCRIPTION: This code defines the ScreenOrientation class with methods to get the current orientation and convert between orientation types.

LANGUAGE: swift
CODE:
import Foundation
import UIKit

public class ScreenOrientation: NSObject {

  public func getCurrentOrientationType() -> String {
    let currentOrientation: UIDeviceOrientation = UIDevice.current.orientation
    return fromDeviceOrientationToOrientationType(currentOrientation)
  }

  private func fromDeviceOrientationToOrientationType(_ orientation: UIDeviceOrientation) -> String {
    switch orientation {
    case .landscapeLeft:
      return "landscape-primary"
    case .landscapeRight:
      return "landscape-secondary"
    case .portraitUpsideDown:
      return "portrait-secondary"
    default:
      // Case: portrait
      return "portrait-primary"
    }
  }

}

----------------------------------------

TITLE: Running Capacitor iOS App via CLI
DESCRIPTION: Run the Capacitor iOS app on a device or simulator using the Capacitor CLI. This command prompts for target selection.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Running Capacitor iOS App via CLI
DESCRIPTION: Run the Capacitor iOS app on a device or simulator using the Capacitor CLI. This command prompts for target selection.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Closing InAppBrowser Instance
DESCRIPTION: TypeScript code to close the currently active InAppBrowser instance (WebView or System Browser).

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
await InAppBrowser.close();

----------------------------------------

TITLE: Running the cap sync Command in Capacitor CLI
DESCRIPTION: This command runs 'copy' and then 'update' in the Capacitor CLI. It can be used with optional platform specification and additional options for deployment and inline JavaScript source map handling.

LANGUAGE: bash
CODE:
npx cap sync [options] [<platform>]

----------------------------------------

TITLE: Getting Preferred Zoom Level
DESCRIPTION: TypeScript method to retrieve the preferred text zoom level, returning a promise with the zoom value as a decimal.

LANGUAGE: typescript
CODE:
getPreferred() => Promise<GetPreferredResult>

----------------------------------------

TITLE: Creating iOS App with Capacitor CLI
DESCRIPTION: Use these commands to add an iOS project to an existing Capacitor project and synchronize dependencies and web assets.

LANGUAGE: bash
CODE:
npx cap add ios
npx cap sync

----------------------------------------

TITLE: Saving Plugin Calls API Methods - iOS
DESCRIPTION: Core API methods for saving, retrieving, and releasing plugin calls in iOS. These methods allow managing CAPPluginCall objects for asynchronous operations.

LANGUAGE: swift
CODE:
func saveCall(_ call: CAPPluginCall)
func savedCall(withID: String) -> CAPPluginCall?
func releaseCall(_ call: CAPPluginCall)
func releaseCall(withID: String)

----------------------------------------

TITLE: Changing registerPlugin Order in Android MainActivity
DESCRIPTION: Change the order of registerPlugin calls in the MainActivity.java file for custom plugins.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        registerPlugin(PluginInMyApp.class);
         super.onCreate(savedInstanceState);
-        registerPlugin(PluginInMyApp.class);
     }
 }

----------------------------------------

TITLE: Updating Android SDK Versions
DESCRIPTION: Updates the target, compile, and minimum SDK versions for Android

LANGUAGE: diff
CODE:
android {
-    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34
+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 35
defaultConfig {
-        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 22
+        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23
-        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34
+        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 35
}

----------------------------------------

TITLE: Updating Cordova Plugin Version
DESCRIPTION: Commands to update an installed Cordova plugin to a specific version and sync the changes with the native project.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name@version
npx cap sync

----------------------------------------

TITLE: Verifying Node.js Installation for Capacitor Development
DESCRIPTION: This command checks the installed version of Node.js, which is required for Capacitor development. Node.js version 12 or higher is needed.

LANGUAGE: bash
CODE:
node --version
# v18.3.0

----------------------------------------

TITLE: Defining Permission Status Interface
DESCRIPTION: TypeScript interface definitions for handling plugin permissions, including PermissionStatus interface and plugin method signatures.

LANGUAGE: typescript
CODE:
import type { PermissionState } from '@capacitor/core';

export interface PermissionStatus {
  location: PermissionState;
}

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
  checkPermissions(): Promise<PermissionStatus>;
  requestPermissions(): Promise<PermissionStatus>;
}

----------------------------------------

TITLE: Configuring Local Notifications in Capacitor Config
DESCRIPTION: JSON configuration options for the local notifications plugin including icons and sounds

LANGUAGE: json
CODE:
{
  "plugins": {
    "LocalNotifications": {
      "smallIcon": "ic_stat_icon_config_sample",
      "iconColor": "#488AFF",
      "sound": "beep.wav"
    }
  }
}

----------------------------------------

TITLE: Verifying Node.js Installation for Capacitor Development
DESCRIPTION: This command checks the installed version of Node.js, which is required for Capacitor development. Node.js version 12 or higher is needed.

LANGUAGE: bash
CODE:
node --version
# v18.3.0

----------------------------------------

TITLE: Implementing New Method in TypeScript Interface for Capacitor Plugin
DESCRIPTION: This snippet shows how to add a new method signature to the plugin's TypeScript interface in the definitions.ts file. It demonstrates adding an 'openMap' method with latitude and longitude parameters.

LANGUAGE: typescript
CODE:
export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
  openMap(options: OpenMapOptions): Promise<void>;
}

export interface OpenMapOptions {
  latitude: number;
  longitude: number;
}

----------------------------------------

TITLE: Configuring Local Notifications in capacitor.config.json
DESCRIPTION: JSON configuration for Local Notifications in the Capacitor config file, including smallIcon, iconColor, and sound settings.

LANGUAGE: json
CODE:
{
  "plugins": {
    "LocalNotifications": {
      "smallIcon": "ic_stat_icon_config_sample",
      "iconColor": "#488AFF",
      "sound": "beep.wav"
    }
  }
}

----------------------------------------

TITLE: Installing Cordova Plugin in Capacitor
DESCRIPTION: Commands for installing a Cordova plugin and syncing it with native projects. The first command installs the plugin via npm, and the second syncs changes to native projects.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: Installing Capacitor Admob Plugin
DESCRIPTION: Commands to install the Capacitor Community Admob plugin and update Capacitor. This plugin allows integration of Google Admob advertisements into Capacitor applications.

LANGUAGE: shell
CODE:
npm install @capacitor-community/admob
npx cap update

----------------------------------------

TITLE: Configuring Custom URL Scheme in Android Manifest
DESCRIPTION: XML configuration to add a custom URL scheme for opening the app on Android.

LANGUAGE: xml
CODE:
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="@string/custom_url_scheme" />
</intent-filter>

----------------------------------------

TITLE: URL Opening Capability Check
DESCRIPTION: Function to check if an app can be opened with a specific URL. Requires LSApplicationQueriesSchemes configuration in Info.plist for iOS.

LANGUAGE: typescript
CODE:
canOpenUrl(options: { url: string; }) => Promise<{ value: boolean; }>

----------------------------------------

TITLE: Saving Photos to Library - TypeScript
DESCRIPTION: Method to save a photo to the user's photo library with options to specify the target album.

LANGUAGE: typescript
CODE:
savePhoto(options?: PhotosSaveOptions) => Promise<PhotosSaveResult>

----------------------------------------

TITLE: Initializing MobileProject in TypeScript
DESCRIPTION: Shows how to initialize and load a MobileProject instance with configuration for iOS and Android paths.

LANGUAGE: typescript
CODE:
import { MobileProject, MobileProjectConfig } from '@trapezedev/project';

// This takes a MobileProjectConfig
// to know where the ios and android projects are
const config: MobileProjectConfig = {
  ios: {
    path: 'ios/App',
  },
  android: {
    path: 'android',
  },
};

const project = new MobileProject(process.cwd(), config);
await project.load();

----------------------------------------

TITLE: Initializing MobileProject in TypeScript
DESCRIPTION: Shows how to initialize and load a MobileProject instance with configuration for iOS and Android paths.

LANGUAGE: typescript
CODE:
import { MobileProject, MobileProjectConfig } from '@trapezedev/project';

// This takes a MobileProjectConfig
// to know where the ios and android projects are
const config: MobileProjectConfig = {
  ios: {
    path: 'ios/App',
  },
  android: {
    path: 'android',
  },
};

const project = new MobileProject(process.cwd(), config);
await project.load();

----------------------------------------

TITLE: Setting Zoom Level in TypeScript
DESCRIPTION: TypeScript function to set the current zoom level, which takes an options object with the new zoom level as a decimal.

LANGUAGE: typescript
CODE:
set(options: SetOptions) => Promise<void>

----------------------------------------

TITLE: Disabling Jetifier in gradle.properties
DESCRIPTION: Remove the android.enableJetifier flag from gradle.properties to disable Jetifier.

LANGUAGE: diff
CODE:
# gradle.properties

# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
- # Automatically convert third-party libraries to use AndroidX
- android.enableJetifier=true

----------------------------------------

TITLE: Querying Screen Orientation
DESCRIPTION: TypeScript function to get the current screen orientation, returning a Promise with the orientation type.

LANGUAGE: typescript
CODE:
orientation() => Promise<ScreenOrientationResult>

----------------------------------------

TITLE: Opening Native IDE
DESCRIPTION: Command to open the native IDE for building and running the app.

LANGUAGE: bash
CODE:
npx cap open

----------------------------------------

TITLE: Adding Android Platform to Ionic Capacitor Project
DESCRIPTION: Command to add the Android platform to an Ionic project using Capacitor.

LANGUAGE: bash
CODE:
ionic capacitor add android

----------------------------------------

TITLE: Changing registerPlugin Order in Java
DESCRIPTION: Move the registerPlugin call before super.onCreate for custom plugins in MainActivity.java.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        registerPlugin(PluginInMyApp.class);
         super.onCreate(savedInstanceState);
-        registerPlugin(PluginInMyApp.class);
     }
 }

----------------------------------------

TITLE: Adding iOS Platform to Ionic Capacitor Project
DESCRIPTION: Command to add the iOS platform to an Ionic project using Capacitor.

LANGUAGE: bash
CODE:
ionic capacitor add ios

----------------------------------------

TITLE: Android Manifest Permission for Scheduled Alarms
DESCRIPTION: Required permission in AndroidManifest.xml for scheduling exact notifications on Android 12+

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />

----------------------------------------

TITLE: Installing CocoaPods for iOS Development
DESCRIPTION: This command uses Homebrew to install CocoaPods, an iOS dependency manager required by Capacitor for managing native dependencies in iOS projects.

LANGUAGE: bash
CODE:
brew install cocoapods

----------------------------------------

TITLE: Implementing Permissions Check in Capacitor iOS Plugin
DESCRIPTION: Demonstrates how to implement the checkPermissions() method to return the current status of permissions for a location-based plugin.

LANGUAGE: swift
CODE:
@objc override func checkPermissions(_ call: CAPPluginCall) {
    let locationState: String

    switch CLLocationManager.authorizationStatus() {
    case .notDetermined:
        locationState = "prompt"
    case .restricted, .denied:
        locationState = "denied"
    case .authorizedAlways, .authorizedWhenInUse:
        locationState = "granted"
    @unknown default:
        locationState = "prompt"
    }

    call.resolve(["location": locationState])
}

----------------------------------------

TITLE: Installing Motion Plugin with NPM
DESCRIPTION: Commands to install the @capacitor/motion plugin and sync the project

LANGUAGE: bash
CODE:
npm install @capacitor/motion
npx cap sync

----------------------------------------

TITLE: Installing Capacitor Push Notifications Plugin
DESCRIPTION: Install the Capacitor Push Notifications plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Configuring Local Notifications in Capacitor Config JSON
DESCRIPTION: Example configuration for Local Notifications plugin in the Capacitor config file, including settings for icon, color, and sound.

LANGUAGE: json
CODE:
{
  "plugins": {
    "LocalNotifications": {
      "smallIcon": "ic_stat_icon_config_sample",
      "iconColor": "#488AFF",
      "sound": "beep.wav"
    }
  }
}

----------------------------------------

TITLE: Adding Browser Event Listeners
DESCRIPTION: Example of adding event listeners for browser close and page load events.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
await InAppBrowser.addListener('browserClosed', () => {
    console.log("browser was closed.");
});

await InAppBrowser.addListener('browserPageLoaded', () => {
    console.log("browser was loaded.");
});

----------------------------------------

TITLE: Installing Capacitor iOS Package
DESCRIPTION: Install the @capacitor/ios package using npm. This is the first step in adding iOS platform support to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/ios

----------------------------------------

TITLE: Handling Null Values in TypeScript
DESCRIPTION: Example of an object containing null values being passed to a Capacitor plugin call

LANGUAGE: typescript
CODE:
{ 'foo': null, 'bar': [1, 2, null, 4]}

----------------------------------------

TITLE: Implementing Autofill Credentials Form in JavaScript
DESCRIPTION: HTML code for creating a form with autofill-enabled input fields for email and password in a JavaScript application.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input type="email" name="email" autocomplete="email" required email></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input id="pwd" type="password" name="password" autocomplete="current-password" required></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

----------------------------------------

TITLE: Installing Push Notifications Plugin
DESCRIPTION: Commands to install the Capacitor push notifications plugin and sync the project

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Displaying Converted File Path in HTML
DESCRIPTION: HTML snippet showing how to use the converted file path in an img tag.

LANGUAGE: html
CODE:
<img id="savedPhoto" />

----------------------------------------

TITLE: Installing Text Zoom Capacitor Plugin
DESCRIPTION: Bash commands to install the @capacitor/text-zoom plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/text-zoom
npx cap sync

----------------------------------------

TITLE: Configuring Cordova Plugin Preferences in Capacitor (TypeScript)
DESCRIPTION: Example of how to configure Cordova plugin preferences in the Capacitor configuration file (TypeScript format).

LANGUAGE: typescript
CODE:
const config: CapacitorConfig = {
  cordova: {
    preferences: {
      DisableDeploy: 'false',
      CameraUsesGeolocation: 'true',
    },
  },
};

----------------------------------------

TITLE: Initializing MobileProject in TypeScript
DESCRIPTION: Shows how to initialize and load a MobileProject instance with iOS and Android project configurations using @trapezedev/project library.

LANGUAGE: typescript
CODE:
import { MobileProject, MobileProjectConfig } from '@trapezedev/project';

// This takes a MobileProjectConfig
// to know where the ios and android projects are
const config: MobileProjectConfig = {
  ios: {
    path: 'ios/App',
  },
  android: {
    path: 'android',
  },
};

const project = new MobileProject(process.cwd(), config);
await project.load();

----------------------------------------

TITLE: Action Sheet API Type Definition
DESCRIPTION: TypeScript interface definition showing the showActions method signature with its options and return type

LANGUAGE: typescript
CODE:
showActions(options: ShowActionsOptions) => Promise<ShowActionsResult>

----------------------------------------

TITLE: Updating Watch UI in TypeScript
DESCRIPTION: TypeScript function to update the watch UI using the Capacitor Watch plugin.

LANGUAGE: typescript
CODE:
async function uploadMyWatchUI() {
    const watchUI = 
        `Text("Capacitor WATCH")
         Button("Add One", "inc")`;

    await Watch.updateWatchUI({"watchUI": watchUI});
}

----------------------------------------

TITLE: Querying Network Status in TypeScript
DESCRIPTION: Function to get the current status of the network connection.

LANGUAGE: typescript
CODE:
getStatus() => Promise<ConnectionStatus>

----------------------------------------

TITLE: Updating Native Project
DESCRIPTION: Commands for installing new plugins and updating the native project configuration.

LANGUAGE: bash
CODE:
npm install really-cool-plugin
npx cap update

----------------------------------------

TITLE: App Launcher API Type Definitions
DESCRIPTION: TypeScript interface definitions for the App Launcher API methods and their parameters

LANGUAGE: typescript
CODE:
canOpenUrl(options: CanOpenURLOptions) => Promise<CanOpenURLResult>

openUrl(options: OpenURLOptions) => Promise<OpenURLResult>

----------------------------------------

TITLE: Status Bar Hide Method
DESCRIPTION: Method signature for hiding the status bar with optional animation options.

LANGUAGE: typescript
CODE:
hide(options?: StatusBarAnimationOptions) => Promise<void>

----------------------------------------

TITLE: Installing FFI on Apple Silicon with Rosetta
DESCRIPTION: Commands to install FFI and run pod install on Apple Silicon Macs using Rosetta x86_64 architecture simulation

LANGUAGE: bash
CODE:
sudo arch -x86_64 gem install ffi
arch -x86_64 pod install

----------------------------------------

TITLE: Installing Capacitor iOS Package
DESCRIPTION: Installs the @capacitor/ios package using npm. This is the first step in adding iOS support to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/ios

----------------------------------------

TITLE: Installing Barcode Scanner Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/barcode-scanner plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/barcode-scanner
npx cap sync

----------------------------------------

TITLE: Installing CocoaPods without Homebrew using Ruby Gem
DESCRIPTION: This command installs CocoaPods directly using Ruby Gem, as an alternative to using Homebrew. Note that this method does not work on Apple Silicon Macs.

LANGUAGE: bash
CODE:
sudo gem install cocoapods

----------------------------------------

TITLE: Installing Local Notifications Plugin via NPM
DESCRIPTION: Commands to install the local notifications plugin and sync with Capacitor

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications
npx cap sync

----------------------------------------

TITLE: iOS Podfile Configuration
DESCRIPTION: Podfile configuration for multiple iOS targets including QA environment

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
end

target 'App QA' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Updating TypeScript Listener Definition
DESCRIPTION: Changes to the addListener method signature in definitions.ts to return only a Promise instead of Promise & PluginListenerHandle.

LANGUAGE: diff
CODE:
  addListener(
    eventName: 'resume',
    listenerFunc: () => void,
- ): Promise<PluginListenerHandle> & PluginListenerHandle;
+ ): Promise<PluginListenerHandle>;

----------------------------------------

TITLE: Disabling Privacy Screen Protection in TypeScript
DESCRIPTION: Method to disable privacy screen protection.

LANGUAGE: typescript
CODE:
disable() => Promise<{ success: boolean; }>

----------------------------------------

TITLE: Installing Browser Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/browser package and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/browser
npx cap sync

----------------------------------------

TITLE: Vibrate Method TypeScript Definition
DESCRIPTION: API definition for the vibrate method that triggers device vibration

LANGUAGE: typescript
CODE:
vibrate(options?: VibrateOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Configuring Capacitor for Text Zoom on iPads
DESCRIPTION: JSON configuration to set preferredContentMode to 'mobile' in the Capacitor configuration file, which is required for text-zoom plugin to work on iPads.

LANGUAGE: json
CODE:
{
  "ios": {
    "preferredContentMode": "mobile"
  }
}

----------------------------------------

TITLE: Building Capacitor App and Adding Platforms
DESCRIPTION: Initial commands to build a Capacitor app and add iOS/Android platforms

LANGUAGE: bash
CODE:
npm run build

npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Running Trapeze Configuration
DESCRIPTION: Demonstrates the command to execute the trapeze configuration tool using npm script.

LANGUAGE: bash
CODE:
npm run cap-config

----------------------------------------

TITLE: Getting Current Zoom Level
DESCRIPTION: TypeScript method to retrieve the current text zoom level as a decimal value

LANGUAGE: typescript
CODE:
get() => Promise<GetResult>

----------------------------------------

TITLE: Implementing Echo Plugin in Swift for iOS
DESCRIPTION: This snippet shows the implementation of a simple Echo plugin with a method that returns the input value. It demonstrates the basic structure of a Capacitor plugin for iOS.

LANGUAGE: swift
CODE:
import Foundation

@objc public class Echo: NSObject {
    @objc public func echo(_ value: String) -> String {
        print(value)
        return value
    }
}


LANGUAGE: swift
CODE:
import Foundation
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin, CAPBridgedPlugin {
    public let identifier = "EchoPlugin"
    public let jsName = "Echo"
    public let pluginMethods: [CAPPluginMethod] = [
        CAPPluginMethod(name: "echo", returnType: CAPPluginReturnPromise)
    ]
    private let implementation = Echo()

    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve([
            "value": implementation.echo(value)
        ])
    }
}


----------------------------------------

TITLE: Removing All Listeners in TypeScript
DESCRIPTION: Example of the removeAllListeners() method signature for removing all native listeners for the plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Building Android App
DESCRIPTION: Command to build the native Android project and output a signed AAB or APK file

LANGUAGE: bash
CODE:
npx cap build android

----------------------------------------

TITLE: Configuring TypeScript Paths for Jasmine Mocks
DESCRIPTION: JSON configuration showing how to set up TypeScript path mappings in tsconfig.spec.json to enable manual mocking in Jasmine tests.

LANGUAGE: json
CODE:
{
    "paths": {
      "@app/*": ["src/app/*"],
      "@env/*": ["src/environments/*"],
      "@test/*": ["test/*"],
      "@capacitor/*": ["__mocks__/@capacitor/*"]
    }
}

----------------------------------------

TITLE: Updating iOS Pods in Capacitor
DESCRIPTION: Command to update CocoaPods dependencies when encountering Sandbox sync errors with Podfile.lock

LANGUAGE: bash
CODE:
npx cap update ios

----------------------------------------

TITLE: Running iOS App via Command Line
DESCRIPTION: Command to run the iOS app on a device or simulator using Capacitor CLI

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Installing Capacitor Clipboard Plugin
DESCRIPTION: Commands to install the latest version of the Capacitor Clipboard plugin and sync the native platforms.

LANGUAGE: bash
CODE:
npm install @capacitor/clipboard@latest-5
npx cap sync

----------------------------------------

TITLE: Updating Capacitor iOS Project using Rosetta on Apple Silicon Macs
DESCRIPTION: These commands update a Capacitor iOS project on Apple Silicon Macs when CocoaPods is installed through Rosetta. They copy the web code and install pod dependencies.

LANGUAGE: bash
CODE:
npx cap copy
arch -x86_64 pod install

----------------------------------------

TITLE: Installing @capacitor/screen-reader Plugin
DESCRIPTION: Commands to install the @capacitor/screen-reader plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-reader
npx cap sync

----------------------------------------

TITLE: Updating Gradle Plugin Version
DESCRIPTION: Updates the Android Gradle plugin version to 8.2.1.

LANGUAGE: diff
CODE:
    dependencies {
-       classpath 'com.android.tools.build:gradle:8.0.0'
+       classpath 'com.android.tools.build:gradle:8.2.1'
    }

----------------------------------------

TITLE: HTML Image Element for File Display
DESCRIPTION: HTML markup for displaying the converted file image.

LANGUAGE: html
CODE:
<img id="savedPhoto" />

----------------------------------------

TITLE: Date Handling Configuration in Swift
DESCRIPTION: Example of configuring date handling behavior in a Capacitor plugin

LANGUAGE: swift
CODE:
override func load() {
    shouldStringifyDatesInCalls = false
}

----------------------------------------

TITLE: Installing App Launcher Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/app-launcher plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/app-launcher
npx cap sync

----------------------------------------

TITLE: Installing Local Notifications Plugin for Capacitor
DESCRIPTION: Install the latest version of the Local Notifications plugin for Capacitor and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications@latest-5
npx cap sync

----------------------------------------

TITLE: Configuring Keystore in Capacitor Config (TypeScript)
DESCRIPTION: The keystore file and alias for Android app signing are stored in the capacitor.config.ts file. This snippet shows where this information is typically located in the configuration.

LANGUAGE: typescript
CODE:
capacitor.config.ts

----------------------------------------

TITLE: TypeScript Implementation Example
DESCRIPTION: Complete example showing how to implement push notification handling including registration, permission handling and notification listeners

LANGUAGE: typescript
CODE:
import { PushNotifications } from '@capacitor/push-notifications';

const addListeners = async () => {
  await PushNotifications.addListener('registration', token => {
    console.info('Registration token: ', token.value);
  });

  await PushNotifications.addListener('registrationError', err => {
    console.error('Registration error: ', err.error);
  });

  await PushNotifications.addListener('pushNotificationReceived', notification => {
    console.log('Push notification received: ', notification);
  });

  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {
    console.log('Push notification action performed', notification.actionId, notification.inputValue);
  });
}

const registerNotifications = async () => {
  let permStatus = await PushNotifications.checkPermissions();

  if (permStatus.receive === 'prompt') {
    permStatus = await PushNotifications.requestPermissions();
  }

  if (permStatus.receive !== 'granted') {
    throw new Error('User denied permissions!');
  }

  await PushNotifications.register();
}

const getDeliveredNotifications = async () => {
  const notificationList = await PushNotifications.getDeliveredNotifications();
  console.log('delivered notifications', notificationList);
}

----------------------------------------

TITLE: Configuring CapacitorHttp Plugin in TypeScript
DESCRIPTION: TypeScript configuration for enabling native HTTP library patching in capacitor.config.ts

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorHttp: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Installing Dialog Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/dialog package and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/dialog
npx cap sync

----------------------------------------

TITLE: Implementing Activity Results in Java
DESCRIPTION: Example demonstrating how to handle activity results in a Capacitor Android plugin, specifically for image picking functionality.

LANGUAGE: java
CODE:
@CapacitorPlugin()
class ImagePicker extends Plugin {

  @PluginMethod()
  public void pickImage(PluginCall call) {
    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");

    startActivityForResult(call, intent, "pickImageResult");
  }

  @ActivityCallback
  private void pickImageResult(PluginCall call, ActivityResult result) {
    if (call == null) {
      return;
    }
  }
}

----------------------------------------

TITLE: Saving Plugin Calls API Methods - Android
DESCRIPTION: Core API methods for saving, retrieving, and releasing plugin calls in Android. These methods allow managing PluginCall objects for asynchronous operations.

LANGUAGE: java
CODE:
void saveCall(PluginCall call)
PluginCall getSavedCall(String callbackId)
void releaseCall(PluginCall call)
void releaseCall(String callbackId)

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Compatibility
DESCRIPTION: This snippet shows how to install and run jetifier to patch plugins with old Android support dependencies to use AndroidX equivalents.

LANGUAGE: bash
CODE:
npm install jetifier
npx jetify
npx cap sync android

----------------------------------------

TITLE: Toast ShowOptions Interface Definition
DESCRIPTION: TypeScript interface defining the configuration options for toast notifications, including text content, duration, and position properties.

LANGUAGE: typescript
CODE:
interface ShowOptions {
  text: string;
  duration?: 'short' | 'long';
  position?: 'top' | 'center' | 'bottom';
}

----------------------------------------

TITLE: iOS Custom URL Scheme Configuration
DESCRIPTION: XML configuration for Info.plist to enable custom URL scheme handling in iOS

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>com.getcapacitor.capacitor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>mycustomscheme</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Alert Dialog Method Definition
DESCRIPTION: TypeScript method signature for showing an alert dialog with AlertOptions interface

LANGUAGE: typescript
CODE:
alert(options: AlertOptions) => Promise<void>

----------------------------------------

TITLE: Running Capacitor App on iOS
DESCRIPTION: Command to run a debug build of Capacitor application on an iOS device

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Registering Plugin in Objective-C
DESCRIPTION: Shows how to register a Capacitor plugin and its methods using Objective-C macros

LANGUAGE: objectivec
CODE:
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(EchoPlugin, "Echo",
  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Moving Package Declaration in Android Manifest
DESCRIPTION: Move the package declaration from AndroidManifest.xml to build.gradle file.

LANGUAGE: diff
CODE:
# AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
- <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-     package="[YOUR_PACKAGE_ID]">
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android">

LANGUAGE: diff
CODE:
# build.gradle

android {
+     namespace "[YOUR_PACKAGE_ID]"
      compileSdkVersion rootProject.ext.compileSdkVersion

----------------------------------------

TITLE: Importing PWA Elements in React
DESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application's index file.

LANGUAGE: tsx
CODE:
import { defineCustomElements } from '@ionic/pwa-elements/loader';

ReactDOM.render(<App />, document.getElementById('root'));

// Call the element loader after the app has been rendered the first time
defineCustomElements(window);

----------------------------------------

TITLE: Locking Screen Orientation for iOS View Controllers
DESCRIPTION: Swift code to add to AppDelegate.swift for locking screen orientation in presented View Controllers on iOS.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)
}

----------------------------------------

TITLE: Installing Action Sheet Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/action-sheet plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/action-sheet
npx cap sync

----------------------------------------

TITLE: Syncing Web Code with Capacitor Project
DESCRIPTION: Command to copy built web bundle to Android and iOS projects and update native dependencies

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Installing Dialog Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/dialog package and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/dialog
npx cap sync

----------------------------------------

TITLE: iOS Scheme Configuration in Capacitor
DESCRIPTION: TypeScript configuration for iOS scheme in Capacitor config file

LANGUAGE: typescript
CODE:
ios: {
  scheme: 'App QA',
}

----------------------------------------

TITLE: Updating iOS AppDelegate
DESCRIPTION: Changes required in the iOS AppDelegate to switch from CAPBridge to ApplicationDelegateProxy.

LANGUAGE: diff
CODE:
     func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {
         // Called when the app was launched with a url. Feel free to add additional processing here,
         // but if you want the App API to support tracking app url opens, make sure to keep this call
-        return CAPBridge.handleOpenUrl(url, options)
+        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)
     }

     func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
         // Called when the app was launched with an activity, including Universal Links.
         // Feel free to add additional processing here, but if you want the App API to support
         // tracking app url opens, make sure to keep this call
-        return CAPBridge.handleContinueActivity(userActivity, restorationHandler)
+        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)
     }

----------------------------------------

TITLE: Handling Multiple Permissions in Capacitor iOS Plugin
DESCRIPTION: Shows how to handle multiple permission requests using a DispatchGroup for synchronization.

LANGUAGE: swift
CODE:
let store = CNContactStore()

@objc override func requestPermissions(_ call: CAPPluginCall) {
    // get the permissions to check or default to all of them
    var permissions = call.getArray("types", String.self) ?? []
    if permissions.isEmpty {
        permissions = ["contacts", "camera"]
    }

    let group = DispatchGroup()
    if permissions.contains("contacts") {
        group.enter()
        store.requestAccess(for: .contacts) { (_, _) in
            group.leave()
        }
    }
    if permissions.contains("camera") {
        group.enter()
        AVCaptureDevice.requestAccess(for: .video) { _ in
            group.leave()
        }
    }
    group.notify(queue: DispatchQueue.main) {
        self.checkPermissions(call)
    }
}

----------------------------------------

TITLE: Implementing Haptics Functionality in TypeScript
DESCRIPTION: Complete example class demonstrating all available haptics methods including impact feedback with different styles, vibration, and selection haptics.

LANGUAGE: typescript
CODE:
import { Plugins, HapticsImpactStyle } from '@capacitor/core';

const { Haptics } = Plugins;

export class HapticsExample {
  hapticsImpact(style = HapticsImpactStyle.Heavy) {
    Haptics.impact({
      style: style,
    });
  }

  hapticsImpactMedium(style) {
    this.hapticsImpact(HapticsImpactStyle.Medium);
  }

  hapticsImpactLight(style) {
    this.hapticsImpact(HapticsImpactStyle.Light);
  }

  hapticsVibrate() {
    Haptics.vibrate();
  }

  hapticsSelectionStart() {
    Haptics.selectionStart();
  }

  hapticsSelectionChanged() {
    Haptics.selectionChanged();
  }

  hapticsSelectionEnd() {
    Haptics.selectionEnd();
  }
}

----------------------------------------

TITLE: Unsafe Null Handling in Swift
DESCRIPTION: Shows an incorrect approach to handling null values by directly accessing the options dictionary.

LANGUAGE: swift
CODE:
if call.options["foo"] != nil {
    // BAD: the key returned a truthy `NSNull` object, so this block will run
}

----------------------------------------

TITLE: Installing Screen Reader Plugin with npm
DESCRIPTION: Commands to install the @capacitor/screen-reader plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/screen-reader
npx cap sync

----------------------------------------

TITLE: Configuring CocoaPods for Firebase in iOS
DESCRIPTION: Update the Podfile to include Firebase for iOS.

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
  pod 'Firebase/Messaging'
end

----------------------------------------

TITLE: Getting Device Language Code in TypeScript
DESCRIPTION: Example of using the Device.getLanguageCode() method to get the device's current language locale code.

LANGUAGE: typescript
CODE:
getLanguageCode() => Promise<GetLanguageCodeResult>

----------------------------------------

TITLE: Geolocation API Method Signatures
DESCRIPTION: TypeScript interface definitions for the core geolocation API methods including getCurrentPosition, watchPosition, and clearWatch.

LANGUAGE: typescript
CODE:
getCurrentPosition(options?: PositionOptions | undefined) => Promise<Position>

watchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>

clearWatch(options: ClearWatchOptions) => Promise<void>

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Migration
DESCRIPTION: Commands to install and run jetifier to fix android.support.* package errors by converting them to AndroidX equivalents.

LANGUAGE: bash
CODE:
npm install jetifier
npx jetify
npx cap sync android

----------------------------------------

TITLE: Installing Screen Orientation Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/screen-orientation plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Initializing Capacitor Configuration with CLI
DESCRIPTION: Command to initialize a new Capacitor project configuration. Requires an application name and ID in reverse domain notation format. Optionally accepts a web directory parameter to specify an existing web application location.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: Initializing Capacitor Configuration with CLI
DESCRIPTION: Command to initialize a new Capacitor project configuration. Requires an application name and ID in reverse domain notation format. Optionally accepts a web directory parameter to specify an existing web application location.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: Prompt Method Type Definition
DESCRIPTION: TypeScript type definition for the prompt method showing parameter types and return value.

LANGUAGE: typescript
CODE:
prompt(options: PromptOptions) => Promise<PromptResult>

----------------------------------------

TITLE: Customizing Android Splash Screen Resource in XML
DESCRIPTION: This XML snippet shows how to customize the Android splash screen resource name in the styles.xml file. It sets the background drawable for the AppTheme.NoActionBarLaunch style.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/NAME</item>
</style>

----------------------------------------

TITLE: Updating Capacitor Dependencies
DESCRIPTION: These commands update Capacitor core, iOS, Android, and CLI dependencies to their latest versions. It's important to keep all Capacitor libraries at the same version.

LANGUAGE: bash
CODE:
npm i @capacitor/core @capacitor/ios @capacitor/android
npm i -D @capacitor/cli

----------------------------------------

TITLE: Querying Current Screen Orientation in TypeScript
DESCRIPTION: TypeScript function to get the current screen orientation using the Screen Orientation API.

LANGUAGE: typescript
CODE:
orientation() => Promise<ScreenOrientationResult>

----------------------------------------

TITLE: Running Capacitor App on iOS
DESCRIPTION: Command to run a debug build of Capacitor app on an iOS device

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Installing Filesystem Capacitor Plugin
DESCRIPTION: Commands to install the Filesystem Capacitor plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/filesystem
npx cap sync

----------------------------------------

TITLE: TypeScript Configuration for Capacitor 3
DESCRIPTION: Example TypeScript configuration file showing plugin references and configuration options

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/local-notifications" />
/// <reference types="@capacitor/push-notifications" />
/// <reference types="@capacitor/splash-screen" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.capacitorjs.app.testapp',
  appName: 'capacitor-testapp',
  webDir: 'build',
  plugins: {
    SplashScreen: {
      launchAutoHide: false,
    },
    LocalNotifications: {
      smallIcon: 'ic_stat_icon_config_sample',
      iconColor: '#CE0B7C',
    },
    PushNotifications: {
      presentationOptions: ['alert', 'sound'],
    },
  },
};

export default config;

----------------------------------------

TITLE: Updating Capacitor Dependencies
DESCRIPTION: Commands to update Capacitor core, platform-specific libraries, and CLI tools

LANGUAGE: bash
CODE:
npm i @capacitor/core @capacitor/ios @capacitor/android
npm i -D @capacitor/cli

----------------------------------------

TITLE: Modifying iOS AppDelegate for ScreenOrientation Plugin
DESCRIPTION: Instructions for modifying the AppDelegate.swift file in iOS to support the ScreenOrientation plugin functionality.

LANGUAGE: swift
CODE:
import UIKit
import CapacitorCommunityScreenOrientation

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
     return ScreenOrientationPlugin.supportedOrientations
  }
}

----------------------------------------

TITLE: Modifying iOS AppDelegate for ScreenOrientation Plugin
DESCRIPTION: Instructions for modifying the AppDelegate.swift file in iOS to support the ScreenOrientation plugin functionality.

LANGUAGE: swift
CODE:
import UIKit
import CapacitorCommunityScreenOrientation

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
     return ScreenOrientationPlugin.supportedOrientations
  }
}

----------------------------------------

TITLE: Android Activity Result Callback Implementation
DESCRIPTION: Demonstrates the new way to handle activity results using @ActivityCallback annotation instead of request codes.

LANGUAGE: java
CODE:
@PluginMethod
public void chooseImage(PluginCall call) {
    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");
    startActivityForResult(call, intent, "chooseImageResult");
}

@ActivityCallback
private void chooseImageResult(PluginCall call, ActivityResult result) {
    if (result.getResultCode() == Activity.RESULT_CANCELED) {
        call.reject("Activity canceled");
    } else {
        Intent data = result.getData();
        call.resolve("Success!");
    }
}

----------------------------------------

TITLE: Android Custom URL Scheme Configuration
DESCRIPTION: XML configuration for AndroidManifest.xml to enable custom URL scheme handling in Android

LANGUAGE: xml
CODE:
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="@string/custom_url_scheme" />
</intent-filter>

----------------------------------------

TITLE: Modifying iOS AppDelegate for ScreenOrientation Plugin
DESCRIPTION: Instructions for modifying the AppDelegate.swift file in iOS to support the ScreenOrientation plugin functionality.

LANGUAGE: swift
CODE:
import UIKit
import CapacitorCommunityScreenOrientation

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
     return ScreenOrientationPlugin.supportedOrientations
  }
}

----------------------------------------

TITLE: Haptics Vibrate API Definition
DESCRIPTION: TypeScript interface definition for the vibrate() method with options parameter

LANGUAGE: typescript
CODE:
vibrate(options?: VibrateOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Implementing Callback Methods in Java
DESCRIPTION: Example of implementing a callback method in Android using the @PluginMethod annotation with RETURN_CALLBACK return type.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
public void method3(PluginCall call) {
}

----------------------------------------

TITLE: Local Plugin Testing Commands
DESCRIPTION: Bash commands for linking and testing the plugin locally using npm link.

LANGUAGE: bash
CODE:
$ npm link
$ npm link plugin-name
$ npm install plugin-name

----------------------------------------

TITLE: Adding Screen Orientation Change Listener
DESCRIPTION: Event listener implementation to detect and handle screen orientation changes.

LANGUAGE: typescript
CODE:
ScreenOrientation.addListener('screenOrientationChange', res => setOrientation(res.type));

----------------------------------------

TITLE: Updating Watch UI with Typescript
DESCRIPTION: Example of updating the watch UI using the Watch.updateWatchUI() method

LANGUAGE: typescript
CODE:
async uploadMyWatchUI() {
    const watchUI = 
        `Text("Capacitor WATCH")
         Button("Add One", "inc")`;

    await Watch.updateWatchUI({"watchUI": watchUI});
}

----------------------------------------

TITLE: Conditional Rendering Based on Screen Orientation in React JSX
DESCRIPTION: This JSX snippet demonstrates how to conditionally render UI components based on the current screen orientation. It checks if the orientation includes 'portrait' or 'landscape' to determine which UI to display.

LANGUAGE: jsx
CODE:
{
  orientation.includes('portrait') &&
    {
      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */
    };
}
{
  orientation.includes('landscape') &&
    {
      /* Let the user "sign" and unlock screen orientation through a confirmation button. */
    };
}

----------------------------------------

TITLE: Browser Prefetch Method Type Definition
DESCRIPTION: Type definition for the prefetch method that hints to the browser about URLs that will be accessed. Only functional on Android.

LANGUAGE: typescript
CODE:
prefetch(options: BrowserPrefetchOptions) => Promise<void>

----------------------------------------

TITLE: Configuring Custom URL Scheme in iOS Info.plist
DESCRIPTION: XML configuration to add a custom URL scheme for opening the app on iOS.

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>com.getcapacitor.capacitor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>mycustomscheme</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: iOS Third Party Cookies Configuration
DESCRIPTION: XML configuration for enabling third-party cookies support on iOS 14+ by adding domain entries to Info.plist

LANGUAGE: xml
CODE:
<key>WKAppBoundDomains</key>
<array>
  <string>www.mydomain.com</string>
  <string>api.mydomain.com</string>
  <string>www.myothercooldomain.com</string>
</array>

----------------------------------------

TITLE: Starting Capacitor Development Server
DESCRIPTION: Command to start the Capacitor development server with HTML5 routing support.

LANGUAGE: bash
CODE:
npx cap serve

----------------------------------------

TITLE: Installing Capacitor Browser Plugin via NPM
DESCRIPTION: Commands to install the @capacitor/browser plugin and sync the native project.

LANGUAGE: bash
CODE:
npm install @capacitor/browser
npx cap sync

----------------------------------------

TITLE: URL Navigation Commands for Browser Debugging
DESCRIPTION: Chrome and Edge browser URLs for inspecting and debugging web views in Capacitor applications. These commands allow developers to access debug tools for Android applications.

LANGUAGE: plaintext
CODE:
chrome://inspect
edge://inspect

----------------------------------------

TITLE: Implementing Screen Orientation Detection
DESCRIPTION: Core implementation for detecting current screen orientation in Android.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import android.view.Surface;
import androidx.appcompat.app.AppCompatActivity;

public class ScreenOrientation {
   private AppCompatActivity activity;

   public ScreenOrientation(AppCompatActivity activity) {
       this.activity = activity;
   }

   public String getCurrentOrientationType() {
       int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
       return fromRotationToOrientationType(rotation);
   }

   private String fromRotationToOrientationType(int rotation) {
       switch (rotation) {
           case Surface.ROTATION_90:
               return "landscape-primary";
           case Surface.ROTATION_180:
               return "portrait-secondary";
           case Surface.ROTATION_270:
               return "landscape-secondary";
           default:
               return "portrait-primary";
       }
   }
}

----------------------------------------

TITLE: Updating Pod Target Name in Ruby Podfile
DESCRIPTION: Shows how to rename the target in the iOS Podfile when changing the app name. The capacitor_pods and other dependencies remain under the renamed target.

LANGUAGE: ruby
CODE:
target 'MyRenamedApp' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Impact Method Definition
DESCRIPTION: TypeScript method signature for triggering haptics impact feedback with customizable options.

LANGUAGE: typescript
CODE:
impact(options: HapticsImpactOptions) => void

----------------------------------------

TITLE: Setting App Name in strings.xml
DESCRIPTION: Demonstrates how to modify the app name and activity name in Android strings.xml resource file.

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>

LANGUAGE: xml
CODE:
<string name="title_activity_main">MyApp</string>

----------------------------------------

TITLE: Implementing Push Notification Listeners in Angular
DESCRIPTION: TypeScript code for the HomePage component, implementing listeners for push notification events using the Capacitor Push Notifications API.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core';

import {
  ActionPerformed,
  PushNotificationSchema,
  PushNotifications,
  Token,
} from '@capacitor/push-notifications';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  ngOnInit() {
    console.log('Initializing HomePage');

    // Request permission to use push notifications
    // iOS will prompt user and return if they granted permission or not
    // Android will just grant without prompting
    PushNotifications.requestPermissions().then(result => {
      if (result.receive === 'granted') {
        // Register with Apple / Google to receive push via APNS/FCM
        PushNotifications.register();
      } else {
        // Show some error
      }
    });

    PushNotifications.addListener('registration', (token: Token) => {
      alert('Push registration success, token: ' + token.value);
    });

    PushNotifications.addListener('registrationError', (error: any) => {
      alert('Error on registration: ' + JSON.stringify(error));
    });

    PushNotifications.addListener(
      'pushNotificationReceived',
      (notification: PushNotificationSchema) => {
        alert('Push received: ' + JSON.stringify(notification));
      },
    );

    PushNotifications.addListener(
      'pushNotificationActionPerformed',
      (notification: ActionPerformed) => {
        alert('Push action performed: ' + JSON.stringify(notification));
      },
    );
  }
}

----------------------------------------

TITLE: Configuring iOS Screen Orientation in Info.plist
DESCRIPTION: XML configuration for setting supported screen orientations on iOS devices. Demonstrates how to set different orientation settings for iPhone (portrait) and iPad (landscape).

LANGUAGE: xml
CODE:
  <key>UISupportedInterfaceOrientations</key>
  <array>
    <string>UIInterfaceOrientationPortrait</string>
  </array>
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeRight</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
  </array>

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Update the variables.gradle file with new minimum values for Android project configuration.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 33
targetSdkVersion = 33
androidxActivityVersion = '1.7.0'
androidxAppCompatVersion = '1.6.1'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.10.0'
androidxFragmentVersion = '1.5.6'
coreSplashScreenVersion = '1.0.0'
androidxWebkitVersion = '1.6.1'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.5'
androidxEspressoCoreVersion = '3.5.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Fetching Photos from Library - TypeScript
DESCRIPTION: Method to retrieve photos from the user's photo library with customizable options for quantity, thumbnail size, and quality.

LANGUAGE: typescript
CODE:
getPhotos(options?: PhotosFetchOptions) => Promise<PhotosResult>

----------------------------------------

TITLE: Installing Capacitor Watch Plugin via npm
DESCRIPTION: Commands to install the Capacitor Watch plugin and sync with the native project

LANGUAGE: bash
CODE:
npm install @capacitor/watch
npx cap sync
npx cap open ios

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Update the variables.gradle file with new minimum values for Android project configuration.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 33
targetSdkVersion = 33
androidxActivityVersion = '1.7.0'
androidxAppCompatVersion = '1.6.1'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.10.0'
androidxFragmentVersion = '1.5.6'
coreSplashScreenVersion = '1.0.0'
androidxWebkitVersion = '1.6.1'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.5'
androidxEspressoCoreVersion = '3.5.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Initializing Screen Orientation Plugin Class
DESCRIPTION: Basic plugin class setup with method stubs for orientation management in Android.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "ScreenOrientation")
public class ScreenOrientationPlugin extends Plugin {

   @PluginMethod()
   public void orientation(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void lock(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void unlock(PluginCall call) {
       call.resolve();
   }
}

----------------------------------------

TITLE: Haptics Impact API Definition
DESCRIPTION: TypeScript interface definition for the impact() method with options parameter

LANGUAGE: typescript
CODE:
impact(options?: ImpactOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Installing Capacitor Watch Plugin via npm
DESCRIPTION: Commands to install the Capacitor Watch plugin and sync with the native project

LANGUAGE: bash
CODE:
npm install @capacitor/watch
npx cap sync
npx cap open ios

----------------------------------------

TITLE: Using Custom Plugin in TypeScript for Capacitor WebView
DESCRIPTION: This TypeScript snippet shows how to import and use a custom Capacitor plugin in the WebView code. It demonstrates importing the Plugins object from Capacitor core and calling custom methods of the plugin.

LANGUAGE: typescript
CODE:
// Other codes...
import { Plugins } from '@capacitor/core';
const { CustomNativePlugin } = Plugins;
// Other codes...
CustomNativePlugin.customCall({ message: 'CUSTOM MESSAGE' });
CustomNativePlugin.customFunction();
// Other codes...

----------------------------------------

TITLE: Removing Maven Repository from Android Build
DESCRIPTION: This diff snippet demonstrates how to remove the maven repository entry from the Android app's build.gradle file, as it is no longer needed and can cause problems.

LANGUAGE: diff
CODE:
 repositories {
-    maven {
-        url "https://dl.bintray.com/ionic-team/capacitor"
-    }
     flatDir {
         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
     }
 }

----------------------------------------

TITLE: Closing the Browser in TypeScript
DESCRIPTION: Example of the Browser.close() method signature for closing an open browser window on Web & iOS.

LANGUAGE: typescript
CODE:
close() => Promise<void>

----------------------------------------

TITLE: Configuring iOS Privacy Manifest for Filesystem Access
DESCRIPTION: Example of a PrivacyInfo.xcprivacy file to specify approved reasons for API usage on iOS.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>C617.1</string>
        </array>
      </dict>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Adding Exact Alarm Permission to Android Manifest
DESCRIPTION: XML code to add the SCHEDULE_EXACT_ALARM permission to the Android manifest file for precise notifications on Android 12+.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />

----------------------------------------

TITLE: Syncing Capacitor iOS Native Project
DESCRIPTION: This command synchronizes the native iOS project with the updated Capacitor configuration and web assets. It should be run after updating the Capacitor iOS library.

LANGUAGE: bash
CODE:
npx cap sync ios

----------------------------------------

TITLE: Listing Auto-Generated Documentation Paths
DESCRIPTION: Directory paths where auto-generated markdown documentation files are stored, created by scripts in the project.

LANGUAGE: markdown
CODE:
- docs/v3/api/
- docs/v3/cli/commands/
- docs/v3/native/

----------------------------------------

TITLE: Adding Network Permissions to Android Manifest
DESCRIPTION: Example of adding network-related permissions to AndroidManifest.xml file

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.getcapacitor.myapp">
    <activity>
      <!-- other stuff -->
    </activity>

    <!-- More stuff -->

    <!-- Your permissions -->

    <!-- Network API -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
</manifest>

----------------------------------------

TITLE: Initializing Capacitor Configuration with CLI Command
DESCRIPTION: This command initializes Capacitor configuration by setting up the app name and app ID. It requires two mandatory inputs: appName and appID. An optional --web-dir parameter can be used to specify an existing web application directory.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: Array Handling with Null Values in Swift
DESCRIPTION: Examples of handling arrays that may contain null values, including type casting considerations

LANGUAGE: swift
CODE:
if let values = call.getArray("bar") {
    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually
}
if let values = call.getArray("bar", Int?) {
    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run
}

----------------------------------------

TITLE: Implementing Android Activity Callback
DESCRIPTION: Replace manual request code handling with the new @ActivityCallback annotation for handling activity results in Android plugins.

LANGUAGE: java
CODE:
@PluginMethod
public void chooseImage(PluginCall call) {
    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");
    startActivityForResult(call, intent, "chooseImageResult");
}

@ActivityCallback
private void chooseImageResult(PluginCall call, ActivityResult result) {
    if (result.getResultCode() == Activity.RESULT_CANCELED) {
        call.reject("Activity canceled");
    } else {
        Intent data = result.getData();
        // do something with the result data
        call.resolve("Success!");
    }
}

----------------------------------------

TITLE: Directory Structure for Auto-Generated Documentation
DESCRIPTION: Lists the directories containing automatically generated markdown files from scripts, including API documentation, CLI commands, and native functionality documentation.

LANGUAGE: markdown
CODE:
- docs/api/
- docs/cli/commands/
- docs/native/

----------------------------------------

TITLE: Configuring Server URL in capacitor.config.json
DESCRIPTION: JSON configuration to set the server URL in capacitor.config.json for Live Reload. The URL should use the local web server's IP address and port.

LANGUAGE: json
CODE:
"server": {
  "url": "http://192.168.1.68:8100",
  "cleartext": true
},

----------------------------------------

TITLE: Adding Capacitor iOS Pods Helper in Ruby
DESCRIPTION: Add a require statement to include Capacitor iOS pods helper script at the beginning of the Podfile.

LANGUAGE: ruby
CODE:
require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

----------------------------------------

TITLE: Setting App Name in strings.xml
DESCRIPTION: Demonstrates how to set the application name in Android string resources.

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>

----------------------------------------

TITLE: Updating Android SDK Configuration
DESCRIPTION: Updates to build.gradle to replace deprecated compileSdkVersion and update target/compile SDK versions to 34.

LANGUAGE: diff
CODE:
# build.gradle

android {
-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33
+    compileSdk project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 34
-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33
+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 34

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Command to open the Android Capacitor project in Android Studio IDE

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Presenting Native Screens in Capacitor iOS Plugins
DESCRIPTION: This code snippet shows how to present a native iOS screen over the Capacitor view. It demonstrates accessing the Capacitor view controller and presenting a custom view controller.

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

----------------------------------------

TITLE: Configuring Apple Privacy Manifest for UserDefaults Usage
DESCRIPTION: Example of a PrivacyInfo.xcprivacy file configuration for using NSPrivacyAccessedAPICategoryUserDefaults in iOS apps.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Installing InAppBrowser Capacitor Plugin
DESCRIPTION: Commands to install the InAppBrowser plugin and sync the Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/inappbrowser
npx cap sync

----------------------------------------

TITLE: Adding Cache Path to FileProvider
DESCRIPTION: This diff snippet shows how to add the cache-path to the file_paths.xml file to avoid permission errors when editing gallery images.

LANGUAGE: diff
CODE:
 <?xml version="1.0" encoding="utf-8"?>
 <paths xmlns:android="http://schemas.android.com/apk/res/android">
     <external-path name="my_images" path="." />
+    <cache-path name="my_cache_images" path="." />
 </paths>

----------------------------------------

TITLE: Configuring Custom URL Scheme in Android Strings XML
DESCRIPTION: Modify the custom_url_scheme value in the strings.xml file to set a custom URL scheme for your Android app, enabling it to handle deeplinks.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.getcapacitor.myapp</string>

----------------------------------------

TITLE: Initializing MobileProject in TypeScript
DESCRIPTION: Demonstrates how to initialize and load a Capacitor mobile project using @trapezedev/project library. Configures paths for iOS and Android projects.

LANGUAGE: typescript
CODE:
import { MobileProject, MobileProjectConfig } from '@trapezedev/project';

// This takes a MobileProjectConfig
// to know where the ios and android projects are
const config: MobileProjectConfig = {
  ios: {
    path: 'ios/App',
  },
  android: {
    path: 'android',
  },
};

const project = new MobileProject(process.cwd(), config);
await project.load();

----------------------------------------

TITLE: Configuring Background Runner in capacitor.config.ts
DESCRIPTION: TypeScript configuration for Background Runner in the Capacitor config file.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/background-runner" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    BackgroundRunner: {
      label: "com.example.background.task",
      src: "runners/background.js",
      event: "myCustomEvent",
      repeat: true,
      interval: 15,
      autoStart: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: VS Code Keyboard Shortcut for Debugging
DESCRIPTION: Keyboard shortcut for initiating debug mode in the application. Uses Option+D on Mac or ALT+D on Windows.

LANGUAGE: markdown
CODE:
⌥ + D to debug your app (ALT + D on Windows)

----------------------------------------

TITLE: Updating iOS Bridge References
DESCRIPTION: Update iOS plugin code to use optional chaining when accessing the bridge property, which is now a weak reference.

LANGUAGE: swift
CODE:
bridge?.presentVC(myViewController, animated: true, completion: nil)

if let isSim = bridge?.isSimEnvironment, isSim {
    // Handle simulator environment
}

----------------------------------------

TITLE: Installing Core Capacitor Dependencies
DESCRIPTION: Commands to install Capacitor's core runtime and CLI dependencies in an existing project

LANGUAGE: bash
CODE:
npm i @capacitor/core
npm i -D @capacitor/cli

----------------------------------------

TITLE: Including Capacitor Runtime in HTML
DESCRIPTION: HTML script tags showing how to include Capacitor runtime before other JavaScript files.

LANGUAGE: html
CODE:
<script src="capacitor.js"></script>
<script src="your/app.js"></script>

----------------------------------------

TITLE: Tracking Screen Orientation in React
DESCRIPTION: This snippet shows how to track screen orientation using React state and Capacitor's ScreenOrientation API. It sets up a state variable, adds an event listener for orientation changes, and initializes the orientation on component mount.

LANGUAGE: typescript
CODE:
const [orientation, setOrientation] = useState<string>('');

ScreenOrientation.addListener('screenOrientationChange', res =>
  setOrientation(res.type),
);

useEffect(() => {
  ScreenOrientation.orientation().then(res => setOrientation(res.type));

  return () => {
    ScreenOrientation.removeAllListeners();
  };
}, []);

----------------------------------------

TITLE: Running Capacitor CLI Deploy Command
DESCRIPTION: Command syntax for deploying Capacitor apps to Android or iOS devices. The command first runs sync, then builds and deploys the native app. Supports platform-specific options like Android flavors and iOS schemes, with ability to target specific devices.

LANGUAGE: bash
CODE:
npx cap run [options] <platform>

----------------------------------------

TITLE: Configuring Capacitor Server Hostname
DESCRIPTION: TypeScript code for setting the Capacitor server hostname in the configuration file.

LANGUAGE: typescript
CODE:
const config: CapacitorConfig = {
...
  server: {
    hostname: 'my-app.com',
    androidScheme: 'https',
  }
};

----------------------------------------

TITLE: Toast Show Method API Definition
DESCRIPTION: TypeScript interface definition for the Toast.show() method showing the method signature and return type.

LANGUAGE: typescript
CODE:
show(options: ShowOptions) => Promise<void>

----------------------------------------

TITLE: Starting Live Reload with Ionic CLI for Android and iOS in Capacitor
DESCRIPTION: These commands start the Live Reload process for Android and iOS using the Ionic CLI. They perform an ionic build, copy web assets to the native platform, and open the appropriate IDE.

LANGUAGE: bash
CODE:
ionic cap run android -l --external
ionic cap run ios -l --external

----------------------------------------

TITLE: Updating Kotlin Version
DESCRIPTION: Updates the default Kotlin version to 1.9.10 in build.gradle for plugins using Kotlin.

LANGUAGE: diff
CODE:
# build.gradle
buildscript {
-    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.8.20'
+    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.9.10'
    repositories {

----------------------------------------

TITLE: Adding Native Platform with Capacitor CLI
DESCRIPTION: Command to add a native platform project (Android or iOS) to a Capacitor application. The platform parameter is required and must be either 'android' or 'ios'. For iOS platforms, an optional package manager can be specified (SPM or Cocoapods).

LANGUAGE: bash
CODE:
npx cap add <platform>

----------------------------------------

TITLE: Using App Launcher in TypeScript
DESCRIPTION: Example of using the AppLauncher API to check if a URL can be opened and to open a specific URL in an app.

LANGUAGE: typescript
CODE:
import { AppLauncher } from '@capacitor/app-launcher';

const checkCanOpenUrl = async () => {
  const { value } = await AppLauncher.canOpenUrl({ url: 'com.getcapacitor.myapp' });

  console.log('Can open url: ', value);
};

const openPortfolioPage = async () => {
  await AppLauncher.openUrl({ url: 'com.getcapacitor.myapp://page?id=portfolio' });
};

----------------------------------------

TITLE: Creating EchoPlugin in Swift for Capacitor
DESCRIPTION: This snippet shows how to create a custom Capacitor plugin in Swift. The EchoPlugin class extends CAPPlugin and implements an 'echo' method that returns the input value.

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin {
    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve(["value": value])
    }
}

----------------------------------------

TITLE: Updating OpenSSL and Ruby for GitHub Connection Issues
DESCRIPTION: These commands update OpenSSL and Ruby using Homebrew to resolve GitHub connection issues with CocoaPods. This addresses the 'Failed to connect to GitHub' error in Capacitor projects.

LANGUAGE: bash
CODE:
brew install openssl
brew upgrade openssl
brew install ruby
brew link --overwrite ruby

----------------------------------------

TITLE: Toast Show Method API Definition
DESCRIPTION: TypeScript interface definition for the Toast.show() method showing the method signature and return type.

LANGUAGE: typescript
CODE:
show(options: ShowOptions) => Promise<void>

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: Defines TypeScript types for the Echo plugin to provide type safety and better IDE support when using the plugin in TypeScript projects.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Configuring iOS Pod Dependencies
DESCRIPTION: Podfile configuration for both default and QA targets in iOS

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
end

target 'App QA' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Adding Native Platform with Capacitor CLI
DESCRIPTION: Command to add a native platform project (Android or iOS) to a Capacitor application. The platform parameter is required and must be either 'android' or 'ios'. For iOS platforms, an optional package manager can be specified (SPM or Cocoapods).

LANGUAGE: bash
CODE:
npx cap add <platform>

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Command to open the iOS Capacitor project workspace in Xcode IDE

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Reading from Clipboard in TypeScript
DESCRIPTION: This snippet shows the TypeScript function signature for reading data from the clipboard using the Clipboard API.

LANGUAGE: typescript
CODE:
read() => Promise<ReadResult>

----------------------------------------

TITLE: Chrome Debug URL
DESCRIPTION: URL to access Chrome's debugging interface for web views

LANGUAGE: markdown
CODE:
chrome://inspect

----------------------------------------

TITLE: Syncing Web Code to Native Project
DESCRIPTION: Command to sync web application bundle with native projects

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Implementing Android Plugin Method
DESCRIPTION: Shows how to implement the plugin method for Android platform in Java.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic

  call.resolve();
}

----------------------------------------

TITLE: Implementing Delegate-based Permission Request in Capacitor iOS Plugin
DESCRIPTION: Demonstrates how to implement the requestPermissions() method using a delegate-based API for requesting location permission.

LANGUAGE: swift
CODE:
var permissionCallID: String?
var locationManager: CLLocationManager?

@objc override func requestPermissions(_ call: CAPPluginCall) {
    if let manager = locationManager, CLLocationManager.locationServicesEnabled() {
        if CLLocationManager.authorizationStatus() == .notDetermined {
            bridge?.saveCall(call)
            permissionCallID = call.callbackId
            manager.requestWhenInUseAuthorization()
        } else {
            checkPermissions(call)
        }
    } else {
        call.reject("Location services are disabled")
    }
}

public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
    if let callID = permissionCallID, let call = bridge?.getSavedCall(callID) {
        checkPermissions(call)
        bridge?.releaseCall(call)
    }
}

----------------------------------------

TITLE: Adding Native Platform in Capacitor CLI
DESCRIPTION: Command to add a native platform project (Android or iOS) to a Capacitor application. The platform parameter is required and must be either 'android' or 'ios'.

LANGUAGE: bash
CODE:
npx cap add <platform>

----------------------------------------

TITLE: View Controller Property Declaration
DESCRIPTION: Declaration of the viewController property that provides access to the main UIViewController for presenting native views.

LANGUAGE: swift
CODE:
var viewController: UIViewController? { get }

----------------------------------------

TITLE: Updating iOS Deployment Target in Podfile
DESCRIPTION: Update the iOS deployment target to version 13.0 in the Podfile.

LANGUAGE: ruby
CODE:
platform :ios, '13.0'

----------------------------------------

TITLE: Including Capacitor in HTML
DESCRIPTION: HTML script tags showing how to include Capacitor and app JavaScript files in the correct order.

LANGUAGE: html
CODE:
<script src="capacitor.js"></script>
<script src="your/app.js"></script>

----------------------------------------

TITLE: iOS Apple App Site Association Configuration
DESCRIPTION: JSON configuration for iOS Universal Links setup, defining the app association and permitted paths.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Android SDK Version for Barcode Scanner
DESCRIPTION: Gradle configuration to set the minimum Android SDK version to 26 for the barcode scanner plugin.

LANGUAGE: gradle
CODE:
ext {
    minSdkVersion = 26
}

----------------------------------------

TITLE: Implementing iOS Plugin Method
DESCRIPTION: Shows how to implement the plugin method for iOS platform in Swift.

LANGUAGE: swift
CODE:
@objc func openMap(_ call: CAPPluginCall) {
  let latitude = call.getString("latitude")
  let longitude = call.getNumber("longitude")

  // more logic

  call.resolve()
}

----------------------------------------

TITLE: Updating Android CapacitorPlugin Annotation
DESCRIPTION: Replace the deprecated @NativePlugin annotation with the new @CapacitorPlugin annotation, updating attributes for permissions and removing request codes.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(strings = { Manifest.permission.FOO }, alias = "foo"),
        @Permission(strings = { Manifest.permission.BAR }, alias = "bar")
    }
)
public class FooBarPlugin extends Plugin {
    // Plugin implementation
}

----------------------------------------

TITLE: Processing Arrays with Null Values in Swift for Capacitor
DESCRIPTION: Demonstrates techniques for handling arrays that may contain null values in Swift when working with Capacitor plugin calls. It includes a custom extension method for replacing null values with optionals.

LANGUAGE: swift
CODE:
if let values = call.getArray("bar") {
    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually
}
if let values = call.getArray("bar", Int?) {
    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run
}

if let values = call.getArray("bar").capacitor.replacingNullValues() as? [Int?] {
    // GOOD: `values` is now cast to `Int?` with `nil` at index 2
}

----------------------------------------

TITLE: Accessing and Validating Plugin Call Data in Swift for Capacitor iOS
DESCRIPTION: This example illustrates how to access and validate data passed to a Capacitor plugin method. It demonstrates various ways to retrieve different data types and how to require specific options.

LANGUAGE: swift
CODE:
@objc func storeContact(_ call: CAPPluginCall) {
  let name = call.getString("yourName") ?? "default name"
  let address = call.getObject("address") ?? [:]
  let isAwesome = call.getBool("isAwesome") ?? false

  guard let id = call.options["id"] as? String else {
    call.reject("Must provide an id")
    return
  }

  // ...

  call.resolve()
}

----------------------------------------

TITLE: Installing @capacitor/app Plugin
DESCRIPTION: Commands to install the @capacitor/app plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/app
npx cap sync

----------------------------------------

TITLE: Android Manifest Query Configuration
DESCRIPTION: XML configuration required for Android 11+ to specify which app packages can be queried

LANGUAGE: xml
CODE:
<queries>
  <package android:name="com.getcapacitor.myapp" />
</queries>

----------------------------------------

TITLE: Installing @capacitor/app Plugin
DESCRIPTION: Commands to install the @capacitor/app plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/app
npx cap sync

----------------------------------------

TITLE: iOS Scheme Configuration in Capacitor
DESCRIPTION: TypeScript configuration for specifying iOS scheme in Capacitor config

LANGUAGE: typescript
CODE:
ios: {
  scheme: 'App QA',
}

----------------------------------------

TITLE: Installing Latest Capacitor CLI
DESCRIPTION: Command to install the latest version of the Capacitor CLI as a dev dependency in your project.

LANGUAGE: sh
CODE:
npm i -D @capacitor/cli@latest

----------------------------------------

TITLE: Installing Preferences Capacitor Plugin
DESCRIPTION: Commands to install the latest version of the Preferences plugin and sync the native projects.

LANGUAGE: bash
CODE:
npm install @capacitor/preferences@latest-5
npx cap sync

----------------------------------------

TITLE: Android Camera Permissions Configuration
DESCRIPTION: Required permissions that need to be added to AndroidManifest.xml for camera functionality

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_MEDIA_IMAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Defining Keyboard Shortcuts for Capacitor VSCode Extension
DESCRIPTION: This markdown table defines keyboard shortcuts for running, building, and debugging Capacitor apps in VSCode for both Mac and Windows.

LANGUAGE: markdown
CODE:
| Mac Shortcut | Windows Shortcut | Action |
| --- | --- | ----------- |
| `⌥` + R | `ALT` + R | Run the app |
| `⌥` + B | `ALT` + B | Build the app for web |
| `⌥` + D | `ALT` + D | Debug the app for web |

----------------------------------------

TITLE: Updating Watch Data in TypeScript
DESCRIPTION: TypeScript function to update watch data using the Capacitor Watch plugin.

LANGUAGE: typescript
CODE:
var stateData = {
  number: 0
}

async function counterIncrement() {
  stateData.counter++  
  await Watch.updateWatchData({"data": convertValuesOfObjectToStringValues(stateData)})
}

----------------------------------------

TITLE: Disabling Jetifier in Android gradle.properties
DESCRIPTION: Remove the Jetifier configuration from the gradle.properties file if not needed.

LANGUAGE: diff
CODE:
# gradle.properties

# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
- # Automatically convert third-party libraries to use AndroidX
- android.enableJetifier=true

----------------------------------------

TITLE: Configuration Script Setup in package.json
DESCRIPTION: Demonstrates how to set up an npm script for running the Trapeze configuration tool with a YAML config file.

LANGUAGE: json
CODE:
{
  "scripts": {
    "cap-config": "trapeze run config.yaml"
  }
}

----------------------------------------

TITLE: Handling Unimplemented Methods in Capacitor iOS Plugin
DESCRIPTION: Shows how to handle methods that cannot be implemented for iOS.

LANGUAGE: swift
CODE:
@objc override func methodThatRequiresAndroid(_ call: CAPPluginCall) {
    call.unimplemented("Not implemented on iOS.")
}

----------------------------------------

TITLE: Triggering JavaScript Events
DESCRIPTION: Method declarations and examples for triggering events in the JavaScript context from native code. Supports firing events with or without data payload.

LANGUAGE: swift
CODE:
func triggerJSEvent(eventName: String, target: String)
func triggerJSEvent(eventName: String, target: String, data: String)

LANGUAGE: swift
CODE:
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "window")
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "document", data: "{ 'dataKey': 'dataValue' }")

----------------------------------------

TITLE: Running Live Reload with Ionic CLI
DESCRIPTION: Commands to start Live Reload for Android and iOS platforms using the Ionic CLI

LANGUAGE: bash
CODE:
ionic cap run android -l --external
ionic cap run ios -l --external

----------------------------------------

TITLE: Initializing Capacitor Configuration in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic Capacitor configuration file using TypeScript. It sets up the app ID, name, and web directory.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.company.appname',
  appName: 'My Capacitor App',
  webDir: 'www',
};

export default config;

----------------------------------------

TITLE: iOS Site Association Configuration
DESCRIPTION: JSON configuration for iOS Universal Links site association file, defining app links and paths.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Detecting Platform Type in Capacitor
DESCRIPTION: Shows how to detect the current platform (iOS, Android, or web) using getPlatform(). Useful for implementing platform-specific logic.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  console.log('iOS!');
} else if (Capacitor.getPlatform() === 'android') {
  console.log('Android!');
} else {
  console.log('Web!');
}

----------------------------------------

TITLE: Updating Google Services in Android build.gradle
DESCRIPTION: Update the Google Services classpath in the project-level build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
-       classpath 'com.google.gms:google-services:4.3.13'
+       classpath 'com.google.gms:google-services:4.3.15'

----------------------------------------

TITLE: Opening URL in System Browser with InAppBrowser
DESCRIPTION: TypeScript code to open a URL in the system browser (Custom Tabs for Android, SFSafariViewController for iOS) using the InAppBrowser plugin.

LANGUAGE: typescript
CODE:
import { InAppBrowser, DefaultSystemBrowserOptions } from '@capacitor/inappbrowser';
await InAppBrowser.openInSystemBrowser({
    url: "https://www.google.com",
    options: DefaultSystemBrowserOptions
});

----------------------------------------

TITLE: Running Trapeze Configuration in Bash
DESCRIPTION: This bash command demonstrates how to run the Trapeze configuration tool using the npm script defined earlier.

LANGUAGE: bash
CODE:
npm run cap-config

----------------------------------------

TITLE: Implementing Echo Plugin in Java
DESCRIPTION: Creates a basic Capacitor plugin that echoes back a string value passed from JavaScript. The plugin demonstrates the fundamental structure of a Capacitor plugin with the necessary annotations and method implementations.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Initializing Screen Orientation State in React
DESCRIPTION: React useState hook implementation to track screen orientation state as a string value.

LANGUAGE: typescript
CODE:
const [orientation, setOrientation] = useState<string>('');

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Opens the Android project in Android Studio using the Capacitor CLI. This command launches Android Studio with the project loaded.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Generating Resources with Cordova-res
DESCRIPTION: Commands to install cordova-res globally and generate platform-specific icons and splash screens.

LANGUAGE: bash
CODE:
npm install -g cordova-res
cordova-res ios --skip-config --copy
cordova-res android --skip-config --copy

----------------------------------------

TITLE: Accessing Capacitor Bridge in Android Plugin
DESCRIPTION: Shows how to access the Capacitor bridge in an Android plugin. The bridge is the core component for plugin interactions.

LANGUAGE: java
CODE:
this.bridge

----------------------------------------

TITLE: Updating Android Gradle Dependencies
DESCRIPTION: Updates the minimum version requirements for Android dependencies in build.gradle

LANGUAGE: diff
CODE:
ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'
+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.7.0'
-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'
+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.2.1'
-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'
+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.6.1'
}

----------------------------------------

TITLE: Installing Privacy Screen Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/privacy-screen plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/privacy-screen
npx cap sync

----------------------------------------

TITLE: Fetching Battery Information in TypeScript
DESCRIPTION: Example of using the Device.getBatteryInfo() method to retrieve information about the device's battery.

LANGUAGE: typescript
CODE:
getBatteryInfo() => Promise<BatteryInfo>

----------------------------------------

TITLE: Installing Ionic CLI Dependencies
DESCRIPTION: Commands to install the Ionic CLI and native-run utility globally for enabling Live Reload functionality

LANGUAGE: bash
CODE:
npm install -g @ionic/cli native-run

----------------------------------------

TITLE: Executing Capacitor CLI Copy Command
DESCRIPTION: This command copies the web app build and Capacitor configuration file into the native platform project. It should be run after making changes to the web app or configuration values. An optional platform parameter can be specified.

LANGUAGE: bash
CODE:
npx cap copy [<platform>]

----------------------------------------

TITLE: Updating Google Services Plugin
DESCRIPTION: Diff showing how to update the Google Services plugin version in the project's build.gradle file.

LANGUAGE: diff
CODE:
     dependencies {
         classpath 'com.android.tools.build:gradle:4.1.1'
-        classpath 'com.google.gms:google-services:4.2.0'
+        classpath 'com.google.gms:google-services:4.3.3'

         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }

----------------------------------------

TITLE: Accessing Plugin Call Data in Capacitor iOS
DESCRIPTION: Shows how to access different types of data passed to a plugin method, including strings, objects, and booleans. Demonstrates error handling for required parameters.

LANGUAGE: swift
CODE:
@objc func storeContact(_ call: CAPPluginCall) {
  let name = call.getString("yourName") ?? "default name"
  let address = call.getObject("address") ?? [:]
  let isAwesome = call.getBool("isAwesome") ?? false

  guard let id = call.options["id"] as? String else {
    call.reject("Must provide an id")
    return
  }

  // ...

  call.resolve()
}

----------------------------------------

TITLE: Defining Permission Status Interface in TypeScript
DESCRIPTION: Demonstrates how to define permission status interfaces for Capacitor plugins using TypeScript, including permission state definitions.

LANGUAGE: typescript
CODE:
import type { PermissionState } from '@capacitor/core';

export interface PermissionStatus {
  location: PermissionState;
}

----------------------------------------

TITLE: Dynamic Screen Orientation Control
DESCRIPTION: TypeScript code showing how to programmatically lock and unlock screen orientation using the Capacitor Screen Orientation plugin.

LANGUAGE: typescript
CODE:
import { ScreenOrientation } from '@capacitor/screen-orientation';
...
await ScreenOrientation.lock({ orientation: 'portrait' });
await ScreenOrientation.lock({ orientation: 'landscape' });

// To unlock orientation which will default back to the global setting:
await ScreenOrientation.unlock();

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on Mac
DESCRIPTION: Example of setting the JAVA_HOME environment variable in .zshrc or .bashrc file on macOS systems.

LANGUAGE: bash
CODE:
export JAVA_HOME="/Applications/Android Studio.app/Contents/jre/Contents/Home"

----------------------------------------

TITLE: Starting Progressive Web App Development Server with Capacitor
DESCRIPTION: Command to start a local development web server for testing Progressive Web Apps. This opens the web app in a browser instance.

LANGUAGE: bash
CODE:
npx cap serve

----------------------------------------

TITLE: Creating Android Common Variables
DESCRIPTION: Groovy code to define common variables for Android project configuration in a 'variables.gradle' file.

LANGUAGE: groovy
CODE:
ext {
  minSdkVersion = 21
  compileSdkVersion = 29
  targetSdkVersion = 29
  androidxAppCompatVersion = '1.1.0'
  androidxCoreVersion =  '1.2.0'
  androidxMaterialVersion =  '1.1.0-rc02'
  androidxBrowserVersion =  '2.0.0'
  androidxLocalbroadcastmanagerVersion =  '1.0.0'
  firebaseMessagingVersion =  '20.1.2'
  playServicesLocationVersion =  '17.0.0'
  junitVersion =  '4.12'
  androidxJunitVersion =  '1.1.1'
  androidxEspressoCoreVersion =  '3.2.0'
  cordovaAndroidVersion =  '7.0.0'
}

----------------------------------------

TITLE: Updating Android Splash Screen Theme in XML
DESCRIPTION: Update the Android splash screen theme to use the new Android 12 Splash Screen API in styles.xml.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="Theme.SplashScreen">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Running Capacitor App on Android
DESCRIPTION: Command to run a debug build of Capacitor application on an Android device

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Implementing Error Handling for Web Plugins
DESCRIPTION: Demonstrates proper error handling patterns for Capacitor web plugins, including handling unavailable APIs and unimplemented features.

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  if (typeof navigator === 'undefined' || !navigator.geolocation) {
    throw this.unavailable('Geolocation API not available in this browser.');
  }

  // TODO: actual web implementation
}

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  throw this.unimplemented('Not implemented on web.');
}

----------------------------------------

TITLE: Android Product Flavors Configuration
DESCRIPTION: Gradle configuration for setting up Android product flavors with environment dimensions

LANGUAGE: groovy
CODE:
flavorDimensions = ["environment"]
productFlavors {
  dev {
      dimension "environment"
      manifestPlaceholders = [displayName:"My App"]
  }
  qa {
      dimension "environment"
      applicationIdSuffix ".qa"
      manifestPlaceholders = [displayName:"My App - QA"]
  }
}

----------------------------------------

TITLE: Updating Android SDK Target in Gradle
DESCRIPTION: Gradle configuration to set the minimum Android SDK target to 26 for the InAppBrowser plugin.

LANGUAGE: gradle
CODE:
ext {
    minSdkVersion = 26
}

----------------------------------------

TITLE: Android Manifest Configuration
DESCRIPTION: XML configuration for Android manifest using display name placeholder

LANGUAGE: xml
CODE:
<application
  ...snip...
  android:label="${displayName}">

  <activity
    ...snip...
    android:label="${displayName}">

----------------------------------------

TITLE: Showing Toast Notification API in TypeScript
DESCRIPTION: API definition for the 'show' method of the Toast plugin, including its type signature and parameter details.

LANGUAGE: typescript
CODE:
show(options: ShowOptions) => Promise<void>

----------------------------------------

TITLE: Showing Toast Notification API in TypeScript
DESCRIPTION: API definition for the 'show' method of the Toast plugin, including its type signature and parameter details.

LANGUAGE: typescript
CODE:
show(options: ShowOptions) => Promise<void>

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Command to open the iOS project in Xcode using Capacitor CLI

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Configuring Android SDK Version for Barcode Scanner
DESCRIPTION: Gradle configuration to set the minimum Android SDK version to 26 for the barcode scanner plugin.

LANGUAGE: gradle
CODE:
ext {
    minSdkVersion = 26
}

----------------------------------------

TITLE: URL Translation Methods
DESCRIPTION: Methods for translating between web view URLs and native file URLs in iOS, handling various URL schemes like res:// and file://.

LANGUAGE: swift
CODE:
func localURL(fromWebURL webURL: URL?) -> URL?

LANGUAGE: swift
CODE:
func portablePath(fromLocalURL localURL: URL?) -> URL?

----------------------------------------

TITLE: Updating Prettier Script Configuration
DESCRIPTION: Updates the prettier npm script to include the Java plugin configuration

LANGUAGE: diff
CODE:
-    "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
+    "prettier": "prettier \"**/*.{css,html,ts,js,java}\" --plugin=prettier-plugin-java",

----------------------------------------

TITLE: Installing @capacitor/clipboard Plugin
DESCRIPTION: This snippet shows how to install the @capacitor/clipboard plugin using npm and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/clipboard
npx cap sync

----------------------------------------

TITLE: Adding SCHEDULE_EXACT_ALARM Permission for Android 12+
DESCRIPTION: Add the SCHEDULE_EXACT_ALARM permission to AndroidManifest.xml for precise notifications on Android 12 and newer.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />

----------------------------------------

TITLE: Package.json Plugin Reference
DESCRIPTION: Example of how the linked plugin appears in package.json dependencies.

LANGUAGE: json
CODE:
"my-plugin": "file:my-plugin"

----------------------------------------

TITLE: Updating Android Dependencies
DESCRIPTION: Diff showing how to update dependencies in the app's build.gradle file using the common variables.

LANGUAGE: diff
CODE:
 dependencies {
     implementation fileTree(include: ['*.jar'], dir: 'libs')
-    implementation 'androidx.appcompat:appcompat:1.0.0'
+    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
     implementation project(':capacitor-android')
-    testImplementation 'junit:junit:4.12'
-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
+    testImplementation "junit:junit:$junitVersion"
+    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
+    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
     implementation project(':capacitor-cordova-android-plugins')

----------------------------------------

TITLE: Installing Capacitor Platforms
DESCRIPTION: Commands to initialize a Capacitor project by building the app, installing iOS and Android platform dependencies, adding the platforms, and syncing the project.

LANGUAGE: bash
CODE:
npm run build
npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android
npx cap sync

----------------------------------------

TITLE: Remove Network Listeners
DESCRIPTION: TypeScript method definition for removing all network status listeners.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: iPad Full Screen Requirement Configuration
DESCRIPTION: XML configuration for requiring full screen mode on iPad, which is necessary for orientation locking.

LANGUAGE: xml
CODE:
	<key>UIRequiresFullScreen</key>
	<true/>

----------------------------------------

TITLE: Adding Android Exported Tag in XML
DESCRIPTION: Add the android:exported tag to the activity in AndroidManifest.xml to ensure the app can be opened.

LANGUAGE: xml
CODE:
android:exported="true"

----------------------------------------

TITLE: Configuring Capacitor Cookies in JSON
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorCookies": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Configuring iOS Podfile
DESCRIPTION: Podfile configuration for multiple iOS targets including QA environment

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
end

target 'App QA' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Generating Assets for All Platforms
DESCRIPTION: Command to generate assets for all supported platforms (iOS, Android, PWA) using the capacitor-assets CLI tool.

LANGUAGE: shell
CODE:
npx capacitor-assets generate

----------------------------------------

TITLE: React Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in a React application

LANGUAGE: jsx
CODE:
import { GoogleMap } from '@capacitor/google-maps';
import { useRef } from 'react';

const MyMap: React.FC = () => {
  const mapRef = useRef<HTMLElement>();
  let newMap: GoogleMap;

  async function createMap() {
    if (!mapRef.current) return;

    newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: mapRef.current,
      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9
        },
        zoom: 8
      }
    })
  }

  return (
    <div className="component-wrapper">
      <capacitor-google-map ref={mapRef} style={{
        display: 'inline-block',
        width: 275,
        height: 400
      }}></capacitor-google-map>

      <button onClick={createMap}>Create Map</button>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Android Google Maps
DESCRIPTION: XML configuration required in AndroidManifest.xml for Google Maps SDK setup on Android

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

----------------------------------------

TITLE: Adding iOS Platform to Capacitor
DESCRIPTION: Command to add iOS platform support to a Capacitor project

LANGUAGE: bash
CODE:
npx cap add ios

----------------------------------------

TITLE: Defining Capacitor Plugin Method Types in TypeScript
DESCRIPTION: This snippet defines the interface for a Capacitor plugin with three different method types: void return, value return, and callback. It also includes type definitions for the callback and data structures used.

LANGUAGE: typescript
CODE:
export type CallbackID = string;

export interface MyData {
  data: string;
}

export type MyPluginCallback = (message: MyData | null, err?: any) => void;

export interface MyPlugin {
  method1(): Promise<void>;
  method2(): Promise<MyData>;
  method3(callback: MyPluginCallback): Promise<CallbackID>;
}

----------------------------------------

TITLE: Triggering JavaScript Events
DESCRIPTION: Method definitions and examples for triggering JavaScript events from native code to different targets like window or document.

LANGUAGE: swift
CODE:
func triggerJSEvent(eventName: String, target: String)
func triggerJSEvent(eventName: String, target: String, data: String)

LANGUAGE: swift
CODE:
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "window")
bridge.triggerJSEvent(eventName: "myCustomEvent", target: "document", data: "{ 'dataKey': 'dataValue' }")

----------------------------------------

TITLE: Updating Gradle Plugin Version in build.gradle
DESCRIPTION: Update the Android Gradle plugin version to 8.0.0 in the build.gradle file.

LANGUAGE: diff
CODE:
    dependencies {
-       classpath 'com.android.tools.build:gradle:7.2.1'
+       classpath 'com.android.tools.build:gradle:8.0.0'
    }

----------------------------------------

TITLE: Using Network API in TypeScript
DESCRIPTION: Example of how to use the Network API to listen for network status changes and log the current network status.

LANGUAGE: typescript
CODE:
import { Network } from '@capacitor/network';

Network.addListener('networkStatusChange', status => {
  console.log('Network status changed', status);
});

const logCurrentNetworkStatus = async () => {
  const status = await Network.getStatus();

  console.log('Network status:', status);
};

----------------------------------------

TITLE: Using Toast API in TypeScript
DESCRIPTION: Example of how to use the Toast API to show a simple notification with the text 'Hello!'.

LANGUAGE: typescript
CODE:
import { Toast } from '@capacitor/toast';

const showHelloToast = async () => {
  await Toast.show({
    text: 'Hello!',
  });
};

----------------------------------------

TITLE: Implementing Android Plugin Method
DESCRIPTION: Shows implementation of the plugin method for Android platform in Java.

LANGUAGE: java
CODE:
@PluginMethod()
public void openMap(PluginCall call) {
  Double latitude = call.getDouble("latitude");
  Double longitude = call.getDouble("longitude");

  // more logic

  call.resolve();
}

----------------------------------------

TITLE: Setting Permissions in Android Manifest XML
DESCRIPTION: Add required permissions to the AndroidManifest.xml file within the <manifest> tag. This example shows how to add network access permission.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.getcapacitor.myapp">
    <activity>
      <!-- other stuff -->
    </activity>

    <!-- More stuff -->

    <!-- Your permissions -->

    <!-- Network API -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
</manifest>

----------------------------------------

TITLE: Running Capacitor Migration CLI Command
DESCRIPTION: Execute the Capacitor CLI command to automatically handle the migration process.

LANGUAGE: sh
CODE:
npx cap migrate

----------------------------------------

TITLE: Configuring Android Splash Screen Style
DESCRIPTION: XML configuration for setting the splash screen background on Android.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Verifying Capacitor Plugin Code
DESCRIPTION: Command to run the verification process for the Capacitor plugin, checking for any issues after porting the code from the original project.

LANGUAGE: bash
CODE:
npm run verify

----------------------------------------

TITLE: Configuring Android Splash Screen Style
DESCRIPTION: XML configuration for setting the splash screen background on Android.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Installing cordova-res for Capacitor Splash Screen and Icon Generation
DESCRIPTION: Installs the cordova-res tool globally using npm. This tool is used to generate splash screens and icons for Capacitor projects.

LANGUAGE: bash
CODE:
npm install -g cordova-res

----------------------------------------

TITLE: iOS Site Association Configuration
DESCRIPTION: JSON configuration for iOS Universal Links setup in the apple-app-site-association file

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Extending Plugin Interface
DESCRIPTION: Example of extending the plugin interface with a new method for opening maps with latitude and longitude parameters.

LANGUAGE: typescript
CODE:
export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
  openMap(location: { latitude: number; longitude: number }): Promise<void>;
}

----------------------------------------

TITLE: Managing Version and Build Numbers in Capacitor
DESCRIPTION: Demonstrates various operations for managing version numbers and build configurations for both iOS and Android platforms using the project API.

LANGUAGE: typescript
CODE:
await project.ios?.setVersion('App', 'Debug', '1.4.5');
await project.ios?.incrementBuild('App');
await project.ios?.getBuild('App', 'Debug');
await project.ios?.getBuild('App', 'Release');
await project.android?.setVersionName('1.0.2');
await project.android?.getVersionName();
await project.android?.setVersionCode(11);
await project.android?.getVersionCode();
await project.android?.incrementVersionCode();

----------------------------------------

TITLE: Updating iOS Platform Version in Ruby
DESCRIPTION: Update the iOS platform version to 13.0 in the Podfile.

LANGUAGE: ruby
CODE:
platform :ios, '13.0'

----------------------------------------

TITLE: Declaring Callback Method in Objective-C for iOS
DESCRIPTION: This snippet demonstrates how to declare a callback method in Objective-C for an iOS Capacitor plugin.

LANGUAGE: objc
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);
)

----------------------------------------

TITLE: Generating Capacitor Plugin Project with CLI
DESCRIPTION: Command to scaffold a new Capacitor plugin project using @capacitor/create-plugin with specific configuration parameters for the ScreenOrientation plugin.

LANGUAGE: bash
CODE:
npx @capacitor/create-plugin \
  --name @capacitor-community/screen-orientation \
  --package-id io.ionic.plugins.screenorientation \
  --class-name ScreenOrientation \
  --repo "https://ionic.io" \
  --license "MIT" \
  --description "Work with the screen orientation in a common way for iOS, Android, and web"

----------------------------------------

TITLE: Opening Native IDEs
DESCRIPTION: Commands to open the native projects in their respective IDEs (Xcode for iOS and Android Studio for Android).

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: Getting Current Screen Orientation
DESCRIPTION: TypeScript function to retrieve the current screen orientation using the Screen Orientation API.

LANGUAGE: typescript
CODE:
orientation() => Promise<ScreenOrientationResult>

----------------------------------------

TITLE: Installing PWA Elements via NPM
DESCRIPTION: Command to install the @ionic/pwa-elements package using npm.

LANGUAGE: bash
CODE:
npm install @ionic/pwa-elements

----------------------------------------

TITLE: Copying Web Assets in Capacitor Android Project
DESCRIPTION: Command to copy web assets to the Android project without updating native dependencies. This is faster than 'sync' if only web assets have changed.

LANGUAGE: bash
CODE:
npx cap copy

----------------------------------------

TITLE: Verifying CocoaPods Installation in Bash
DESCRIPTION: This command checks the installed version of CocoaPods to ensure it is properly installed and accessible.

LANGUAGE: bash
CODE:
pod --version
# 1.12.1

----------------------------------------

TITLE: Plugin Package.json Requirements Example
DESCRIPTION: Example structure showing required fields in package.json for Capacitor plugin authors to ensure proper plugin listing and indexing.

LANGUAGE: json
CODE:
{
  "keywords": ["capacitor", "plugin", "native"],
  "description": "Plugin description here",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/username/repo"
  },
  "bugs": {
    "url": "https://github.com/username/repo/issues"
  },
  "author": {
    "name": "John Smith"
  }
}

----------------------------------------

TITLE: Defining Keyboard Shortcuts for Capacitor VSCode Extension
DESCRIPTION: This snippet presents a markdown table defining keyboard shortcuts for running, building, and debugging Capacitor apps in VSCode. It includes shortcuts for both Mac and Windows operating systems.

LANGUAGE: markdown
CODE:
| Mac Shortcut | Windows Shortcut | Action |
| --- | --- | ----------- |
| `⌥` + R | `ALT` + R | Run the app |
| `⌥` + B | `ALT` + B | Build the app for web |
| `⌥` + D | `ALT` + D | Debug the app for web |

----------------------------------------

TITLE: Committing Project Changes
DESCRIPTION: Shows how to commit changes to the filesystem after making modifications to the project configuration.

LANGUAGE: typescript
CODE:
await project.commit();

----------------------------------------

TITLE: Installing Homebrew Package Manager in Bash
DESCRIPTION: This command installs Homebrew, a package manager for macOS, which is required for installing CocoaPods and other development tools.

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

----------------------------------------

TITLE: Example Output of 'cap ls' Command in Capacitor CLI
DESCRIPTION: This snippet shows an example output of the 'cap ls' command, displaying installed Capacitor and Cordova plugins for the Android platform.

LANGUAGE: bash
CODE:
Found 1 Capacitor plugin for android:
    capacitor-mapbox (0.0.1)
Found 2 Cordova plugins for android:
    cordova-plugin-camera
    cordova-plugin-splashscreen

----------------------------------------

TITLE: Installing Capacitor Haptics Plugin
DESCRIPTION: Commands to install the @capacitor/haptics package and sync the project

LANGUAGE: bash
CODE:
npm install @capacitor/haptics
npx cap sync

----------------------------------------

TITLE: Installing Ionic CLI and native-run for Live Reload in Capacitor
DESCRIPTION: This snippet shows how to install the Ionic CLI and native-run, which are prerequisites for using Live Reload with Capacitor. These tools automate the Live Reload process for easier debugging.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli native-run

----------------------------------------

TITLE: Using convertFileSrc Result in HTML
DESCRIPTION: Demonstrates how to use the converted file path in an HTML img tag to display the saved photo.

LANGUAGE: html
CODE:
<img id="savedPhoto" />

----------------------------------------

TITLE: Generating and Copying Splash Screens and Icons for iOS and Android
DESCRIPTION: Commands to generate splash screens and icons for iOS and Android platforms using cordova-res, and then copy them into the respective native projects. The --skip-config flag is used to skip modifying config.xml.

LANGUAGE: bash
CODE:
cordova-res ios --skip-config --copy
cordova-res android --skip-config --copy

----------------------------------------

TITLE: Configuring Android Push Notification Icon
DESCRIPTION: XML configuration to specify the default notification icon for Firebase Cloud Messaging on Android.

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.firebase.messaging.default_notification_icon" android:resource="@mipmap/push_icon_name" />

----------------------------------------

TITLE: Implementing Screen Orientation Change Listener in iOS
DESCRIPTION: This code adds methods to ScreenOrientationPlugin to listen for and handle screen orientation changes.

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  // Ignore changes in orientation if unknown, face up, or face down
  if(UIDevice.current.orientation.isValidInterfaceOrientation) {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Updating Capacitor Core and CLI Dependencies
DESCRIPTION: Commands to update the Capacitor Core and CLI packages to version 2.

LANGUAGE: bash
CODE:
npm install @capacitor/cli@2 @capacitor/core@2

----------------------------------------

TITLE: Configuring Build Script in package.json
DESCRIPTION: Add a build script to package.json to enable standard frontend build command execution. This script will run the appropriate build tool for your web application.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "command-to-build (ex: webpack, tsc, babel, etc.)"
  }
}

----------------------------------------

TITLE: Apple App Site Association Configuration
DESCRIPTION: JSON configuration for Apple App Site Association file to enable credential autofill on iOS.

LANGUAGE: json
CODE:
{
  "applinks": {
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring CapacitorHttp Plugin in JSON
DESCRIPTION: JSON configuration for enabling native HTTP library patching in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorHttp": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Integrating PWA Elements in React
DESCRIPTION: Code snippet for importing and initializing PWA Elements in a React application's index file.

LANGUAGE: tsx
CODE:
import { defineCustomElements } from '@ionic/pwa-elements/loader';

ReactDOM.render(<App />, document.getElementById('root'));

// Call the element loader after the app has been rendered the first time
defineCustomElements(window);

----------------------------------------

TITLE: Checking Plugin Availability in TypeScript
DESCRIPTION: Illustrates how to use isPluginAvailable to check if a plugin is available on the current platform, with an example using the Camera plugin.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Initializing Capacitor Project
DESCRIPTION: Command to initialize a new Capacitor project, which prompts for app name and ID configuration.

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Running Capacitor App on iOS Device
DESCRIPTION: This command runs a debug build of the Capacitor app on an iOS device.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Implementing Screen Orientation Change Listener in iOS
DESCRIPTION: This code adds methods to ScreenOrientationPlugin to listen for and handle screen orientation changes.

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  // Ignore changes in orientation if unknown, face up, or face down
  if(UIDevice.current.orientation.isValidInterfaceOrientation) {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Example Package.json Structure for Plugin Authors
DESCRIPTION: Sample JSON structure showing the required fields that plugin authors should include in their package.json file for optimal plugin discoverability and documentation.

LANGUAGE: json
CODE:
{
  "keywords": ["relevant", "search", "terms"],
  "description": "Clear description of plugin functionality",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/username/repo"
  },
  "bugs": {
    "url": "https://github.com/username/repo/issues"
  },
  "author": {
    "name": "John Smith"
  }
}

----------------------------------------

TITLE: Generating Capacitor Plugin using CLI
DESCRIPTION: Commands to create a new custom Capacitor plugin using the CLI. The first command is for projects with Capacitor CLI already installed, while the second is for projects without it. Both commands start a wizard that prompts for information about the new plugin.

LANGUAGE: bash
CODE:
# Capacitor CLI already installed in project
npx cap plugin:generate

# Capacitor CLI not installed
npx @capacitor/cli@2.4.7 plugin:generate

----------------------------------------

TITLE: Creating a New Capacitor Project using CLI
DESCRIPTION: This command creates a new Capacitor project with a basic structure. It allows specifying the project directory, name, and package ID. An optional parameter can be used to set the npm client for dependency installation.

LANGUAGE: bash
CODE:
npx @capacitor/cli create [options] [directory] [name] [id]

----------------------------------------

TITLE: Building Plugin via NPM
DESCRIPTION: Command to compile the plugin using npm build script.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Verifying Node.js Installation in Bash
DESCRIPTION: This command checks the installed version of Node.js to ensure it meets the minimum requirement of version 18 or higher for Capacitor development.

LANGUAGE: bash
CODE:
node --version
# v20.9.0

----------------------------------------

TITLE: Verifying Xcode Command Line Tools Installation
DESCRIPTION: This command checks if the Xcode Command Line Tools are properly installed by displaying the installation path.

LANGUAGE: bash
CODE:
xcode-select -p
# /Applications/Xcode.app/Contents/Developer

----------------------------------------

TITLE: Registering Web Plugins in Capacitor 3
DESCRIPTION: Update web plugin registration to use the new registerPlugin function and lazy loading pattern.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';
import type { CoolPlugin } from './definitions';

const MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {
  web: () => import('./web').then((m) => new m.MyCoolPluginWeb()),
  // electron: () => ("./electron").then(m => new m.MyCoolPluginElectron())
});

export * from './definitions';
export { MyCoolPlugin };

----------------------------------------

TITLE: Accessing Configuration in iOS Bridge
DESCRIPTION: Shows how to access the Capacitor runtime configuration object.

LANGUAGE: swift
CODE:
var config: InstanceConfiguration { get }

----------------------------------------

TITLE: Declaring Void Return Method in Objective-C for iOS
DESCRIPTION: This snippet demonstrates how to declare a void return method in Objective-C for an iOS Capacitor plugin.

LANGUAGE: objc
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method1, CAPPluginReturnNone);
)

----------------------------------------

TITLE: Using Preferences API in Capacitor for JSON Storage
DESCRIPTION: Demonstrates how to store and retrieve JSON data using Capacitor's Preferences API. The example shows setting and getting a user object with basic error handling and JSON parsing.

LANGUAGE: typescript
CODE:
import { Preferences } from '@capacitor/preferences';

// JSON "set" example
async setObject() {
  await Preferences.set({
    key: 'user',
    value: JSON.stringify({
      id: 1,
      name: 'Max'
    })
  });
}

// JSON "get" example
async getObject() {
  const ret = await Preferences.get({ key: 'user' });
  const user = JSON.parse(ret.value);
}

----------------------------------------

TITLE: Implementing Echo Plugin in Java
DESCRIPTION: Creates a basic Capacitor plugin that echoes back a string value passed from JavaScript. The plugin demonstrates the fundamental structure of a Capacitor plugin including the necessary annotations and method handling.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "Echo")
public class EchoPlugin extends Plugin {

    @PluginMethod()
    public void echo(PluginCall call) {
        String value = call.getString("value");

        JSObject ret = new JSObject();
        ret.put("value", value);
        call.resolve(ret);
    }
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Location Services
DESCRIPTION: Required privacy description to be added to Info.plist for iOS location services.

LANGUAGE: xml
CODE:
<key>NSLocationWhenInUseUsageDescription</key>
<string>Your location is required for xyz benefits for you</string>

----------------------------------------

TITLE: Push Notification Implementation - Angular TypeScript
DESCRIPTION: Implementation of push notification handling in the HomePage component using Capacitor Push Notifications API.

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core';

import {
  ActionPerformed,
  PushNotificationSchema,
  PushNotifications,
  Token,
} from '@capacitor/push-notifications';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  ngOnInit() {
    console.log('Initializing HomePage');

    PushNotifications.requestPermissions().then(result => {
      if (result.receive === 'granted') {
        PushNotifications.register();
      } else {
        // Show some error
      }
    });

    PushNotifications.addListener('registration', (token: Token) => {
      alert('Push registration success, token: ' + token.value);
    });

    PushNotifications.addListener('registrationError', (error: any) => {
      alert('Error on registration: ' + JSON.stringify(error));
    });

    PushNotifications.addListener(
      'pushNotificationReceived',
      (notification: PushNotificationSchema) => {
        alert('Push received: ' + JSON.stringify(notification));
      },
    );

    PushNotifications.addListener(
      'pushNotificationActionPerformed',
      (notification: ActionPerformed) => {
        alert('Push action performed: ' + JSON.stringify(notification));
      },
    );
  }
}

----------------------------------------

TITLE: Installing Capacitor 2.0 Core Dependencies
DESCRIPTION: Commands to update Capacitor CLI and Core packages to version 2.0

LANGUAGE: bash
CODE:
npm install @capacitor/cli@2 @capacitor/core@2

----------------------------------------

TITLE: Installing ffi on Apple Silicon Macs for CocoaPods
DESCRIPTION: These commands install the ffi gem and run pod install using Rosetta 2 on Apple Silicon Macs. This resolves the 'ffi Bus Error' issue when updating Capacitor projects.

LANGUAGE: bash
CODE:
$ sudo arch -x86_64 gem install ffi
$ arch -x86_64 pod install

----------------------------------------

TITLE: Accessing Bridge Reference in iOS Plugins
DESCRIPTION: Shows how to access and safely unwrap the bridge reference in Capacitor iOS plugins. The bridge property is stored as a weak reference in plugins.

LANGUAGE: swift
CODE:
self.bridge?

LANGUAGE: swift
CODE:
guard let bridge = self.bridge else { return }

----------------------------------------

TITLE: Modifying Package ID in Android build.gradle
DESCRIPTION: Shows how to change the application ID (package ID) in the Android build configuration file.

LANGUAGE: diff
CODE:
defaultConfig {
-       applicationId "com.capacitorjs.app"
+       applicationId "com.mycompany.myapp"

----------------------------------------

TITLE: Importing PWA Elements in Angular
DESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application's main.ts file.

LANGUAGE: typescript
CODE:
import { defineCustomElements } from '@ionic/pwa-elements/loader';
// Call the element loader before the bootstrapModule/bootstrapApplication call
defineCustomElements(window);
if (environment.production) {
  enableProdMode();
}

----------------------------------------

TITLE: Implementing Callback Methods in iOS
DESCRIPTION: Objective-C implementation of a callback method in iOS using the CAP_PLUGIN macro with CAPPluginReturnCallback return type.

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);
)

----------------------------------------

TITLE: Building Android Native Binary
DESCRIPTION: This command builds the native Android project, outputting a signed AAB or APK file ready for distribution.

LANGUAGE: bash
CODE:
npx cap build android

----------------------------------------

TITLE: Installing Capacitor iOS Package
DESCRIPTION: Command to install the @capacitor/ios package using npm

LANGUAGE: bash
CODE:
npm install @capacitor/ios

----------------------------------------

TITLE: Screen Orientation Locking Implementation
DESCRIPTION: Implementation of methods to lock and unlock screen orientation

LANGUAGE: swift
CODE:
public func lock(_ orientationType: String, completion: @escaping (UIInterfaceOrientationMask) -> Void) {
  DispatchQueue.main.async {
    let mask = self.fromOrientationTypeToMask(orientationType)
    let orientation = self.fromOrientationTypeToInt(orientationType)
    UIDevice.current.setValue(orientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion(mask)
  }
}

public func unlock(completion: @escaping () -> Void) {
  DispatchQueue.main.async {
    let unknownOrientation = UIInterfaceOrientation.unknown.rawValue
    UIDevice.current.setValue(unknownOrientation, forKey: "orientation")
    UINavigationController.attemptRotationToDeviceOrientation()
    completion()
  }
}

----------------------------------------

TITLE: Syncing Web Code with Capacitor Project
DESCRIPTION: Command to copy built web bundle to Android and iOS projects and update native dependencies

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Setting Custom URL Scheme in Android strings.xml
DESCRIPTION: Illustrates how to set a custom URL scheme for the app by modifying the custom_url_scheme value in the strings.xml file. This enables the app to respond to custom URLs.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Initializing Screen Orientation Plugin Class
DESCRIPTION: Creates the main plugin class with basic method stubs for orientation, lock, and unlock functionality. This class extends Capacitor's Plugin class and uses the @CapacitorPlugin annotation.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin.plugins.ScreenOrientation;

import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

@CapacitorPlugin(name = "ScreenOrientation")
public class ScreenOrientationPlugin extends Plugin {

   @PluginMethod()
   public void orientation(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void lock(PluginCall call) {
       call.resolve();
   }

   @PluginMethod()
   public void unlock(PluginCall call) {
       call.resolve();
   }
}

----------------------------------------

TITLE: Opening Native IDEs
DESCRIPTION: Commands to open native IDEs (Xcode for iOS and Android Studio for Android) after configuration

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: Opening Native IDEs
DESCRIPTION: Commands to open native IDEs (Xcode for iOS and Android Studio for Android) after configuration

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: Configuring WatchConnectivity in AppDelegate
DESCRIPTION: Swift code to initialize WatchConnectivity in the iOS app delegate

LANGUAGE: swift
CODE:
assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
WCSession.default.delegate = CapWatchSessionDelegate.shared
WCSession.default.activate()

----------------------------------------

TITLE: Setting keepAlive for Multiple Completions in iOS
DESCRIPTION: Code snippet to set the keepAlive property of a CAPPluginCall to true in iOS, allowing for multiple completions of the same call.

LANGUAGE: swift
CODE:
call.keepAlive = true

----------------------------------------

TITLE: Keep Alive Flag Setting - iOS Swift
DESCRIPTION: Code to set the keepAlive flag for multiple completion scenarios in iOS. When set to true, allows resolve() to be called multiple times on the same plugin call.

LANGUAGE: swift
CODE:
call.keepAlive = true

----------------------------------------

TITLE: Removing Network Listeners in TypeScript
DESCRIPTION: Function signature for removing all listeners, including network status changes, for the Network plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Removing Network Listeners in TypeScript
DESCRIPTION: Function signature for removing all listeners, including network status changes, for the Network plugin.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Implementing Autofill Credentials Form in JavaScript
DESCRIPTION: HTML and JavaScript code for creating a form with autofill-enabled input fields for email and password in a JavaScript application. Includes a workaround for a webkit bug related to ion-input.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input type="email" name="email" autocomplete="email" required email></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input id="pwd" type="password" name="password" autocomplete="current-password" required></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

LANGUAGE: javascript
CODE:
document.getElementById('pwd').children[0].addEventListener('change', (e) => {
  this.password = (e.target as any).value;      
});

----------------------------------------

TITLE: Implementing Custom ViewController Subclass in Swift
DESCRIPTION: Creates a custom ViewController that inherits from CAPBridgeViewController, enabling customization of Capacitor's native view controller functionality. This implementation allows for runtime configuration changes, WKWebView customization, and integration with third-party SDKs.

LANGUAGE: swift
CODE:
import UIKit
import Capacitor

class MyViewController: CAPBridgeViewController {
    // additional code
}

----------------------------------------

TITLE: Updating Platform-Specific Capacitor Dependencies
DESCRIPTION: Commands to update iOS, Android and Electron platform packages to version 2.0

LANGUAGE: bash
CODE:
# iOS
npm install @capacitor/ios@2
npx cap sync ios

# Android
npm install @capacitor/android@2
npx cap sync android

# Electron
cd electron
npm install @capacitor/electron@2

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on Mac
DESCRIPTION: Bash command to set the JAVA_HOME environment variable in .zshrc or .bashrc file for Mac systems.

LANGUAGE: bash
CODE:
export JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home"

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on Mac
DESCRIPTION: Bash command to set the JAVA_HOME environment variable in .zshrc or .bashrc file for Mac systems.

LANGUAGE: bash
CODE:
export JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home"

----------------------------------------

TITLE: Updating Gradle Plugin Version
DESCRIPTION: Update the Android Gradle plugin version in the project's build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
-       classpath 'com.android.tools.build:gradle:7.2.1'
+       classpath 'com.android.tools.build:gradle:8.0.0'

----------------------------------------

TITLE: Screen Reader API Method: removeAllListeners
DESCRIPTION: TypeScript declaration for removing all plugin listeners

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Incorrect Null Handling in Swift Dictionaries
DESCRIPTION: Shows an incorrect way of checking for null values in Swift, which can lead to unexpected behavior due to NSNull objects.

LANGUAGE: swift
CODE:
if call.options["foo"] != nil {
    // BAD: the key returned a truthy `NSNull` object, so this block will run
}

----------------------------------------

TITLE: Adding Event Listeners to InAppBrowser
DESCRIPTION: TypeScript code to add event listeners for browser closure and page load events in the InAppBrowser plugin.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
await InAppBrowser.addListener('browserClosed', () => {
    console.log("browser was closed.");
});

await InAppBrowser.addListener('browserPageLoaded', () => {
    console.log("browser was loaded.");
});

----------------------------------------

TITLE: Checking Platform in TypeScript using Capacitor
DESCRIPTION: Demonstrates how to use getPlatform to check the current running platform.

LANGUAGE: typescript
CODE:
if (Capacitor.getPlatform() === 'ios') {
  // do something
}

----------------------------------------

TITLE: Configuring Local Notifications in capacitor.config.ts
DESCRIPTION: TypeScript configuration for Local Notifications in the Capacitor config file, including smallIcon, iconColor, and sound settings.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/local-notifications" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    LocalNotifications: {
      smallIcon: "ic_stat_icon_config_sample",
      iconColor: "#488AFF",
      sound: "beep.wav",
    },
  },
};

export default config;

----------------------------------------

TITLE: Implementing Screen Orientation Change Listener in Swift
DESCRIPTION: This snippet adds methods to ScreenOrientationPlugin for listening to screen orientation changes and notifying JavaScript listeners.

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  // Ignore changes in orientation if unknown, face up, or face down
  if(UIDevice.current.orientation.isValidInterfaceOrientation) {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Implementing Screen Orientation Change Listener in Swift
DESCRIPTION: This snippet adds methods to ScreenOrientationPlugin for listening to screen orientation changes and notifying JavaScript listeners.

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  // Ignore changes in orientation if unknown, face up, or face down
  if(UIDevice.current.orientation.isValidInterfaceOrientation) {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Installing cordova-res globally using npm
DESCRIPTION: Command to install the cordova-res tool globally using npm. This tool is required for generating splash screens and icons.

LANGUAGE: bash
CODE:
$ npm install -g cordova-res

----------------------------------------

TITLE: Registering Capacitor Plugin in Objective-C
DESCRIPTION: Registers the ScreenOrientation plugin with Capacitor using Objective-C macros, defining the available plugin methods.

LANGUAGE: objc
CODE:
#import <Foundation/Foundation.h>
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(ScreenOrientationPlugin, "ScreenOrientation",
  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Basic Swift Plugin Class Implementation
DESCRIPTION: Initial implementation of the ScreenOrientationPlugin class with empty method stubs

LANGUAGE: swift
CODE:
import Foundation
import Capacitor

@objc(ScreenOrientationPlugin)
public class ScreenOrientationPlugin: CAPPlugin {

  @objc public func orientation(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func lock(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func unlock(_ call: CAPPluginCall) {
    call.resolve();
  }
}

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start the local development server for framework-based development

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start the local development server for framework-based development

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: iOS Keep Alive Flag Setting
DESCRIPTION: Code to set the keepAlive flag for multiple completions in iOS. When set to true, this allows the plugin call to be resolved multiple times.

LANGUAGE: swift
CODE:
call.keepAlive = true

----------------------------------------

TITLE: Plugin Call Management Methods - Android Java
DESCRIPTION: Core methods for managing plugin calls in Android Capacitor implementation. Includes functions for saving, retrieving, and releasing plugin calls using PluginCall objects.

LANGUAGE: java
CODE:
void saveCall(PluginCall call)
PluginCall getSavedCall(String callbackId)
void releaseCall(PluginCall call)
void releaseCall(String callbackId)

----------------------------------------

TITLE: Installing the Published Plugin
DESCRIPTION: Commands for installing the published ScreenOrientation plugin in a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor-community/screen-orientation
npx cap sync

----------------------------------------

TITLE: Installing the Published Plugin
DESCRIPTION: Commands for installing the published ScreenOrientation plugin in a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor-community/screen-orientation
npx cap sync

----------------------------------------

TITLE: Installing In-App Purchase Plugin for Capacitor
DESCRIPTION: Commands to install the cordova-plugin-purchase package and update Capacitor to enable In-App Purchase functionality in the application.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: Registering Plugin in MainActivity
DESCRIPTION: Registration of the ScreenOrientationPlugin in the Android app's MainActivity class.

LANGUAGE: java
CODE:
package io.ionic.cap.plugin;

import android.os.Bundle;
import com.getcapacitor.BridgeActivity;
import io.ionic.cap.plugin.plugins.ScreenOrientation.ScreenOrientationPlugin;

public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        registerPlugin(ScreenOrientationPlugin.class);
        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Enabling Capacitor in Existing Ionic Project
DESCRIPTION: Command to enable Capacitor integration in an existing Ionic project.

LANGUAGE: bash
CODE:
cd myApp
ionic integrations enable capacitor

----------------------------------------

TITLE: Configuring Date Serialization in Swift for Capacitor Plugin
DESCRIPTION: Shows how to configure a Capacitor plugin in Swift to opt out of automatic date serialization. This allows for custom handling of date objects passed from the web runtime to native iOS code.

LANGUAGE: swift
CODE:
override func load() {
    shouldStringifyDatesInCalls = false
}

----------------------------------------

TITLE: Updating Gradle Wrapper Version
DESCRIPTION: Update the Gradle wrapper version in the gradle-wrapper.properties file.

LANGUAGE: diff
CODE:
# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: iOS Push Notification Registration
DESCRIPTION: Swift code required in AppDelegate.swift to handle push notification registration

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)
}

func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
}

----------------------------------------

TITLE: Setting Keep Alive Flag - Android
DESCRIPTION: Code to mark a plugin call for multiple completions in Android by setting the keepAlive property to true. This allows the call to be resolved multiple times.

LANGUAGE: java
CODE:
call.setKeepAlive(true);

----------------------------------------

TITLE: Basic Capacitor Configuration Example
DESCRIPTION: A minimal example of a capacitor.config.ts file showing the basic required configuration properties including appId, appName and webDir.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.company.appname',
  appName: 'My Capacitor App',
  webDir: 'www',
};

export default config;

----------------------------------------

TITLE: Initializing Capacitor Project
DESCRIPTION: Command to initialize a new Capacitor project, which prompts for app name and bundle ID that can be found in Cordova's config.xml file.

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Share API Method: share
DESCRIPTION: Main sharing method that displays a share modal for sharing content with other apps.

LANGUAGE: typescript
CODE:
share(options: ShareOptions) => Promise<ShareResult>

----------------------------------------

TITLE: Safe Null Handling in Swift
DESCRIPTION: Demonstrates the recommended way to handle potential null values using Swift optional binding.

LANGUAGE: swift
CODE:
if let value = call.getString("foo") {
    // GOOD: `value` is nil, so this block won't run
}

----------------------------------------

TITLE: Importing Capacitor Object in TypeScript
DESCRIPTION: Demonstrates how to import the Capacitor object from the @capacitor/core package for use in modern JavaScript applications.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

----------------------------------------

TITLE: Android Build Commands
DESCRIPTION: Commands for copying and opening the Android project in Android Studio. These commands prepare the Android project for final compilation.

LANGUAGE: bash
CODE:
npx cap copy android
npx cap open android

----------------------------------------

TITLE: Accessing Config Values in iOS Swift
DESCRIPTION: Example of accessing plugin configuration values in iOS Swift implementation

LANGUAGE: swift
CODE:
if let style = getConfig().getString("style") {
  // Set the style
}

----------------------------------------

TITLE: Starting Framework CLI Server
DESCRIPTION: Command to start the local web server for framework CLI implementations.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Error Handling Implementation
DESCRIPTION: Examples of proper error handling in web plugins using unavailable and unimplemented error patterns.

LANGUAGE: typescript
CODE:
async getLocation(): Promise<Location> {
  if (typeof navigator === 'undefined' || !navigator.geolocation) {
    throw this.unavailable('Geolocation API not available in this browser.');
  }

  // TODO: actual web implementation
}

async getLocation(): Promise<Location> {
  throw this.unimplemented('Not implemented on web.');
}

----------------------------------------

TITLE: Updating Google Services in build.gradle
DESCRIPTION: Update the Google Services classpath in the project's build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
-       classpath 'com.google.gms:google-services:4.3.13'
+       classpath 'com.google.gms:google-services:4.3.15'

----------------------------------------

TITLE: Generating Icons and Splash Screens with cordova-res
DESCRIPTION: Commands to generate and copy icons and splash screens for iOS and Android Capacitor projects using cordova-res.

LANGUAGE: bash
CODE:
cordova-res ios --skip-config --copy
cordova-res android --skip-config --copy

----------------------------------------

TITLE: Android Push Notification Icon Configuration
DESCRIPTION: XML configuration to specify the push notification icon in Android manifest

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.firebase.messaging.default_notification_icon" android:resource="@mipmap/push_icon_name" />

----------------------------------------

TITLE: Status Bar Usage Example in TypeScript
DESCRIPTION: Example showing how to use the Status Bar API for handling tap events, setting styles, and controlling visibility.

LANGUAGE: typescript
CODE:
import { StatusBar, Style } from '@capacitor/status-bar';

// iOS only
window.addEventListener('statusTap', function () {
  console.log('statusbar tapped');
});

// Display content under transparent status bar
StatusBar.setOverlaysWebView({ overlay: true });

const setStatusBarStyleDark = async () => {
  await StatusBar.setStyle({ style: Style.Dark });
};

const setStatusBarStyleLight = async () => {
  await StatusBar.setStyle({ style: Style.Light });
};

const hideStatusBar = async () => {
  await StatusBar.hide();
};

const showStatusBar = async () => {
  await StatusBar.show();
};

----------------------------------------

TITLE: Unsafe Null Value Handling in Swift
DESCRIPTION: Shows problematic direct access to options dictionary that doesn't properly handle NSNull

LANGUAGE: swift
CODE:
if call.options["foo"] != nil {
    // BAD: the key returned a truthy `NSNull` object, so this block will run
}

----------------------------------------

TITLE: Implementing Capacitor Plugin Event Hooks in package.json
DESCRIPTION: Example configuration showing how to implement all available Capacitor plugin hooks in package.json. Each hook prints the command name and platform where it was executed using the $CAPACITOR_PLATFORM_NAME environment variable.

LANGUAGE: json
CODE:
"scripts": {
  "capacitor:copy:before": "echo copy before $CAPACITOR_PLATFORM_NAME",
  "capacitor:copy:after": "echo copy after $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:before": "echo update before $CAPACITOR_PLATFORM_NAME",
  "capacitor:update:after": "echo update after $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:before": "echo sync before $CAPACITOR_PLATFORM_NAME",
  "capacitor:sync:after": "echo sync after $CAPACITOR_PLATFORM_NAME"
}

----------------------------------------

TITLE: Configuring TypeScript Path Mapping for Jasmine Tests
DESCRIPTION: Shows how to update the tsconfig.spec.json file to include path mappings for manual mocks in Jasmine tests. This configuration allows the test environment to use the mock implementations instead of the real Capacitor plugins.

LANGUAGE: json
CODE:
{
    "paths": {
      "@app/*": ["src/app/*"],
      "@env/*": ["src/environments/*"],
      "@test/*": ["test/*"],
      "@capacitor/*": ["__mocks__/@capacitor/*"]
    }
}

----------------------------------------

TITLE: Installing @capacitor/assets in Capacitor Project
DESCRIPTION: Command to install the @capacitor/assets package as a development dependency in a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/assets --save-dev

----------------------------------------

TITLE: Updating Gradle Plugin Version in Android build.gradle
DESCRIPTION: Update the Android Gradle plugin version in the project-level build.gradle file.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
-       classpath 'com.android.tools.build:gradle:7.2.1'
+       classpath 'com.android.tools.build:gradle:8.0.0'

----------------------------------------

TITLE: Detecting Native Platforms with isNativePlatform in TypeScript
DESCRIPTION: Shows how to use the isNativePlatform function to check if the app is running on a native platform (ios or android) and perform actions accordingly.

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  // do something
}

----------------------------------------

TITLE: Updating iOS .gitignore Configuration for Capacitor 1.1
DESCRIPTION: Adds Podfile.lock to the iOS .gitignore file to exclude it from version control. This change affects the path ios/.gitignore.

LANGUAGE: diff
CODE:
 App/build
 App/Pods
 App/public
+App/Podfile.lock
 xcuserdata

 # Cordova plugins for Capacitor

----------------------------------------

TITLE: Implementing Push Notification Listeners in Angular
DESCRIPTION: Set up listeners for push notification events in the Angular component.

LANGUAGE: typescript
CODE:
import {
  ActionPerformed,
  PushNotificationSchema,
  PushNotifications,
  Token,
} from '@capacitor/push-notifications';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  ngOnInit() {
    console.log('Initializing HomePage');

    PushNotifications.requestPermissions().then(result => {
      if (result.receive === 'granted') {
        PushNotifications.register();
      } else {
        // Show some error
      }
    });

    PushNotifications.addListener('registration', (token: Token) => {
      alert('Push registration success, token: ' + token.value);
    });

    PushNotifications.addListener('registrationError', (error: any) => {
      alert('Error on registration: ' + JSON.stringify(error));
    });

    PushNotifications.addListener(
      'pushNotificationReceived',
      (notification: PushNotificationSchema) => {
        alert('Push received: ' + JSON.stringify(notification));
      },
    );

    PushNotifications.addListener(
      'pushNotificationActionPerformed',
      (notification: ActionPerformed) => {
        alert('Push action performed: ' + JSON.stringify(notification));
      },
    );
  }
}

----------------------------------------

TITLE: Adding Native Platforms to Capacitor
DESCRIPTION: Commands to add Android and iOS platforms to a Capacitor project.

LANGUAGE: bash
CODE:
npx cap add android
npx cap add ios

----------------------------------------

TITLE: Applying Variables Gradle File in Android Build
DESCRIPTION: This diff snippet shows how to apply the variables.gradle file in the Android build.gradle file.

LANGUAGE: diff
CODE:
         classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.3.3'

         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
 }

+apply from: "variables.gradle"

 allprojects {
     repositories {
         google()
         jcenter()


----------------------------------------

TITLE: Enabling Capacitor in Existing Ionic Project
DESCRIPTION: Command to install and initialize Capacitor in an existing Ionic project.

LANGUAGE: bash
CODE:
ionic integrations enable capacitor

----------------------------------------

TITLE: Opening iOS Project in Xcode Manually
DESCRIPTION: Alternative command to manually open the iOS project workspace in Xcode.

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Getting Current Screen Orientation
DESCRIPTION: TypeScript function to retrieve the current screen orientation.

LANGUAGE: typescript
CODE:
orientation() => Promise<ScreenOrientationResult>

----------------------------------------

TITLE: Unlocking Screen Orientation in TypeScript
DESCRIPTION: TypeScript function to unlock the screen orientation using the Screen Orientation API.

LANGUAGE: typescript
CODE:
unlock() => Promise<void>

----------------------------------------

TITLE: Updating Kotlin Configuration
DESCRIPTION: Updates Kotlin version to 1.8.20 and updates stdlib dependency.

LANGUAGE: diff
CODE:
# build.gradle
buildscript {
-    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.7.0'
+    ext.kotlin_version = project.hasProperty("kotlin_version") ? rootProject.ext.kotlin_version : '1.8.20'
    repositories {

dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

----------------------------------------

TITLE: Haptics Notification Method Definition
DESCRIPTION: TypeScript definition for the notification() method that triggers haptic notification feedback with configurable type options

LANGUAGE: typescript
CODE:
notification(options?: NotificationOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Updating Gradle Wrapper Version
DESCRIPTION: Update the Gradle wrapper version in the gradle-wrapper.properties file.

LANGUAGE: diff
CODE:
# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: Removing Cordova Plugin and Syncing Capacitor
DESCRIPTION: Commands to uninstall a Cordova plugin and sync the changes with Capacitor for iOS or Android.

LANGUAGE: bash
CODE:
npm uninstall cordova-plugin-name
npx cap sync [android | ios]

----------------------------------------

TITLE: Applying Android Common Variables
DESCRIPTION: Diff showing how to apply the common variables in the Android project's build.gradle file.

LANGUAGE: diff
CODE:
         classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.3.3'

         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
 }

+apply from: "variables.gradle"

 allprojects {
     repositories {
         google()
         jcenter()


----------------------------------------

TITLE: Installing FFI on Apple Silicon Macs
DESCRIPTION: These commands install the FFI gem and run pod install using Rosetta to simulate an Intel architecture. This is a workaround for CocoaPods issues on Apple Silicon Macs.

LANGUAGE: bash
CODE:
$ sudo arch -x86_64 gem install ffi
$ arch -x86_64 pod install

----------------------------------------

TITLE: Passing Object with Null Values in TypeScript
DESCRIPTION: Example of an object containing null values being passed to a Capacitor plugin call. This demonstrates how null values are represented in TypeScript before being sent to native code.

LANGUAGE: typescript
CODE:
{ 'foo': null, 'bar': [1, 2, null, 4]}

----------------------------------------

TITLE: Updating TypeScript Definitions for Capacitor 6.0
DESCRIPTION: Changes the signature of the addListener method in the definitions.ts file to only return a Promise, removing the & PluginListenerHandle.

LANGUAGE: diff
CODE:
addListener(
    eventName: 'resume',
    listenerFunc: () => void,
- ): Promise<PluginListenerHandle> & PluginListenerHandle;
+ ): Promise<PluginListenerHandle>;

----------------------------------------

TITLE: Managing Version and Build Numbers in TypeScript
DESCRIPTION: Demonstrates various operations for managing version numbers and build configurations for both iOS and Android projects.

LANGUAGE: typescript
CODE:
await project.ios?.setVersion('App', 'Debug', '1.4.5');
await project.ios?.incrementBuild('App');
await project.ios?.getBuild('App', 'Debug');
await project.ios?.getBuild('App', 'Release');
await project.android?.setVersionName('1.0.2');
await project.android?.getVersionName();
await project.android?.setVersionCode(11);
await project.android?.getVersionCode();
await project.android?.incrementVersionCode();

----------------------------------------

TITLE: Generating Assets for All Platforms in Capacitor
DESCRIPTION: Command to generate Splash Screens and Icons for all supported platforms (iOS, Android, PWA) using @capacitor/assets in a Capacitor project.

LANGUAGE: shell
CODE:
npx capacitor-assets generate

----------------------------------------

TITLE: Monorepo Configuration in Markdown
DESCRIPTION: Documentation detailing supported monorepo types in the Capacitor VSCode extension. Includes description of various monorepo frameworks and tools that are compatible with the extension.

LANGUAGE: markdown
CODE:
---
title: Monorepos
description: Visual Studio Code Extension for Capacitor
contributors:
  - dtarnawsky
slug: /vscode/monorepos
---

----------------------------------------

TITLE: Adding Post-Install Hook for iOS Deployment Target Assertion
DESCRIPTION: This code adds a post-install hook to the Podfile to assert the correct deployment target for iOS.

LANGUAGE: ruby
CODE:
post_install do |installer|
  assertDeploymentTarget(installer)
end

----------------------------------------

TITLE: Passing Null Values in Typescript for Capacitor Plugin Call
DESCRIPTION: Demonstrates how to pass an object containing null values to a Capacitor plugin call. This example shows the structure of data that may require special handling in iOS environments.

LANGUAGE: typescript
CODE:
{ 'foo': null, 'bar': [1, 2, null, 4]}

----------------------------------------

TITLE: Adding Geolocation Permissions to Android Manifest
DESCRIPTION: XML code to add geolocation permissions to the Android manifest file.

LANGUAGE: xml
CODE:
<!-- Geolocation API -->
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.location.gps" />

----------------------------------------

TITLE: Removing Android FileProvider Authority String for Capacitor 1.1
DESCRIPTION: Removes the fileprovider_authority string from the Android strings.xml resource file. This change is required for Capacitor 1.1 compatibility.

LANGUAGE: diff
CODE:
     <string name="app_name">My App</string>
     <string name="title_activity_main">My App</string>
     <string name="package_name">com.getcapacitor.myapp</string>
-    <string name="fileprovider_authority">com.getcapacitor.myapp.fileprovider</string>
     <string name="custom_url_scheme">com.getcapacitor.myapp</string>
 </resources>

----------------------------------------

TITLE: Installing Action Sheet Capacitor Plugin
DESCRIPTION: Commands to install the Action Sheet plugin and sync with Capacitor

LANGUAGE: bash
CODE:
npm install @capacitor/action-sheet
npx cap sync

----------------------------------------

TITLE: Installing Capacitor React Hooks
DESCRIPTION: NPM command to install the Capacitor community React hooks package.

LANGUAGE: shell
CODE:
npm install @capacitor-community/react-hooks

----------------------------------------

TITLE: Installing Ionic CLI and native-run for Live Reload
DESCRIPTION: Command to install Ionic CLI and native-run globally for Live Reload functionality in Capacitor projects.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli native-run

----------------------------------------

TITLE: Installing Capacitor Core Dependencies
DESCRIPTION: Commands to install the core Capacitor dependencies in an existing web application project.

LANGUAGE: bash
CODE:
cd my-app
npm install @capacitor/core @capacitor/cli

----------------------------------------

TITLE: Defining Plugin Method Types in TypeScript
DESCRIPTION: TypeScript interface definitions showing the three different method signature types for Capacitor plugins: void return, value return with custom data type, and callback method with custom callback type.

LANGUAGE: typescript
CODE:
export type CallbackID = string;

export interface MyData {
  data: string;
}

export type MyPluginCallback = (message: MyData | null, err?: any) => void;

export interface MyPlugin {
  method1(): Promise<void>;
  method2(): Promise<MyData>;
  method3(callback: MyPluginCallback): Promise<CallbackID>;
}

----------------------------------------

TITLE: Updating Pod Target Name in Ruby Podfile
DESCRIPTION: Shows how to rename the target in the iOS Podfile when changing the app name. The capacitor_pods and other dependencies remain under the renamed target.

LANGUAGE: ruby
CODE:
-target 'App' do
+target 'MyRenamedApp' do
   capacitor_pods
   # Add your Pods here
 end

----------------------------------------

TITLE: Updating iOS .gitignore for Capacitor 1.1
DESCRIPTION: This snippet shows the changes to be made in the ios/.gitignore file. It adds Podfile.lock to the list of ignored files.

LANGUAGE: diff
CODE:
 App/build
 App/Pods
 App/public
+App/Podfile.lock
 xcuserdata

 # Cordova plugins for Capacitor

----------------------------------------

TITLE: Configuring Capacitor Cookies in JSON
DESCRIPTION: JSON configuration example for enabling the Capacitor Cookies plugin in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorCookies": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Executing Capacitor Copy Command
DESCRIPTION: Command to copy web app build and Capacitor configuration into native platform projects. The platform parameter is optional and can be either 'android' or 'ios'. Includes an optional --inline flag for inlining JS source maps for Android Web View debugging.

LANGUAGE: bash
CODE:
npx cap copy [<platform>]

----------------------------------------

TITLE: Configuring Cordova Plugin Preferences in Capacitor
DESCRIPTION: Example of how to configure Cordova plugin preferences in the Capacitor configuration file (JSON format).

LANGUAGE: json
CODE:
{
  "cordova": {
    "preferences": {
      "DisableDeploy": "true",
      "CameraUsesGeolocation": "true"
    }
  }
}

----------------------------------------

TITLE: Presenting View Controllers in iOS
DESCRIPTION: Examples of presenting view controllers using the Capacitor bridge, including regular presentation and iPad-specific popover presentation.

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

LANGUAGE: swift
CODE:
self.setCenteredPopover(ourCustomViewController)
self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)

----------------------------------------

TITLE: Configuration Property Declaration
DESCRIPTION: Declaration of the config property that provides access to the Capacitor runtime configuration.

LANGUAGE: swift
CODE:
var config: InstanceConfiguration { get }

----------------------------------------

TITLE: Installing @capacitor/filesystem Plugin
DESCRIPTION: Commands to install the @capacitor/filesystem plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/filesystem
npx cap sync

----------------------------------------

TITLE: Updating Capacitor Core and CLI
DESCRIPTION: Commands for updating Capacitor's core components and CLI to version 2.

LANGUAGE: bash
CODE:
npm install @capacitor/cli@2
npm install @capacitor/core@2

----------------------------------------

TITLE: Adding android:exported Tag to Android Manifest
DESCRIPTION: Add the android:exported="true" tag to the <activity> element in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
android:exported="true"

----------------------------------------

TITLE: Adding Native Platform Projects
DESCRIPTION: Commands to create Android and iOS native projects after installing platform dependencies.

LANGUAGE: bash
CODE:
npx cap add android
npx cap add ios

----------------------------------------

TITLE: Removing Android FileProvider Authority String
DESCRIPTION: Removes the deprecated fileprovider_authority string from Android strings.xml resource file as it's no longer needed in Capacitor 1.1.

LANGUAGE: diff
CODE:
     <string name="app_name">My App</string>
     <string name="title_activity_main">My App</string>
     <string name="package_name">com.getcapacitor.myapp</string>
-    <string name="fileprovider_authority">com.getcapacitor.myapp.fileprovider</string>
     <string name="custom_url_scheme">com.getcapacitor.myapp</string>
 </resources>

----------------------------------------

TITLE: Adding android:exported Tag to Android Manifest
DESCRIPTION: Add the android:exported="true" tag to the <activity> element in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
android:exported="true"

----------------------------------------

TITLE: Adding Native Platform Projects
DESCRIPTION: Commands to create Android and iOS native projects after installing platform dependencies.

LANGUAGE: bash
CODE:
npx cap add android
npx cap add ios

----------------------------------------

TITLE: Installing Action Sheet Capacitor Plugin
DESCRIPTION: Commands to install the Action Sheet plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/action-sheet
npx cap sync

----------------------------------------

TITLE: Creating New Capacitor Project
DESCRIPTION: Command to create a fresh Capacitor project with a basic structure, suitable for adding a UI framework later.

LANGUAGE: bash
CODE:
npx @capacitor/cli create

----------------------------------------

TITLE: Orientation Listener Definition
DESCRIPTION: TypeScript interface definition for device orientation change events

LANGUAGE: typescript
CODE:
addListener(eventName: 'orientation', listenerFunc: OrientationListener) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: Installing Xcode Command Line Tools for iOS Development
DESCRIPTION: Installs the Xcode Command Line Tools, which are required for building and testing iOS applications with Capacitor.

LANGUAGE: bash
CODE:
xcode-select --install

----------------------------------------

TITLE: Implementing Permissions Check in Swift for iOS
DESCRIPTION: This snippet shows how to implement the checkPermissions method for a Capacitor plugin, specifically for checking location permissions.

LANGUAGE: swift
CODE:
@objc override func checkPermissions(_ call: CAPPluginCall) {
    let locationState: String

    switch CLLocationManager.authorizationStatus() {
    case .notDetermined:
        locationState = "prompt"
    case .restricted, .denied:
        locationState = "denied"
    case .authorizedAlways, .authorizedWhenInUse:
        locationState = "granted"
    @unknown default:
        locationState = "prompt"
    }

    call.resolve(["location": locationState])
}


----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Command to open the Android Capacitor project in Android Studio IDE

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Running Capacitor CLI cap run Command
DESCRIPTION: This command runs the 'cap run' operation in the Capacitor CLI. It first executes the 'sync' command, then builds and deploys the native app to a specified target device. The command requires a platform argument and supports various options for customization.

LANGUAGE: bash
CODE:
npx cap run [options] <platform>

----------------------------------------

TITLE: Executing Capacitor Copy Command
DESCRIPTION: Command to copy web app build and Capacitor configuration to native platform projects. Can target specific platforms (Android/iOS) and includes an inline option for Android WebView debugging.

LANGUAGE: bash
CODE:
npx cap copy [<platform>]

----------------------------------------

TITLE: iOS Scheme Configuration
DESCRIPTION: Configuration to change the iOS scheme from capacitor to ionic for compatibility

LANGUAGE: json
CODE:
{
  "server": {
    "iosScheme": "ionic"
  }
}

----------------------------------------

TITLE: Creating Apple App Site Association File for iOS
DESCRIPTION: This JSON snippet shows the structure of the apple-app-site-association file required for iOS Universal Links. It specifies the app ID and the paths that should be handled by the app.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Updating Cordova Plugin in Capacitor Project
DESCRIPTION: Commands to update a Cordova plugin to a specific version and sync the changes with the native project in a Capacitor application.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name@version
npx cap sync

----------------------------------------

TITLE: Android Product Flavors Configuration
DESCRIPTION: Gradle configuration for setting up Android product flavors with environment dimensions

LANGUAGE: groovy
CODE:
flavorDimensions "environment"
productFlavors {
  dev {
      dimension "environment"
      manifestPlaceholders = [displayName:"My App"]
  }
  qa {
      dimension "environment"
      applicationIdSuffix ".qa"
      manifestPlaceholders = [displayName:"My App - QA"]
  }
}

----------------------------------------

TITLE: Copying Web Assets
DESCRIPTION: Command to copy built web assets to the native projects for deployment.

LANGUAGE: bash
CODE:
npx cap copy

----------------------------------------

TITLE: Updating iOS Pods in Capacitor
DESCRIPTION: This command updates the CocoaPods dependencies for an iOS project in Capacitor. It's used to resolve the 'Sandbox not in sync with the Podfile.lock' error.

LANGUAGE: bash
CODE:
npx cap update ios

----------------------------------------

TITLE: Installing Capacitor Android Package
DESCRIPTION: Command to install the @capacitor/android package via npm.

LANGUAGE: bash
CODE:
npm install @capacitor/android

----------------------------------------

TITLE: Browser Close Method Definition
DESCRIPTION: TypeScript definition for the close method that works on Web & iOS platforms.

LANGUAGE: typescript
CODE:
close() => Promise<void>

----------------------------------------

TITLE: Updating iOS Pods in Capacitor
DESCRIPTION: This command updates the CocoaPods dependencies for an iOS project in Capacitor. It's used to resolve the 'Sandbox not in sync with the Podfile.lock' error.

LANGUAGE: bash
CODE:
npx cap update ios

----------------------------------------

TITLE: Installing Capacitor Android Library Update
DESCRIPTION: Command to update the @capacitor/android package to version 2

LANGUAGE: bash
CODE:
npm install @capacitor/android@2

----------------------------------------

TITLE: Basic Capacitor CLI Usage Command
DESCRIPTION: Shows the basic command syntax for using the Capacitor CLI. Includes optional flags for version (-V) and help (-h) information, along with the general command structure.

LANGUAGE: bash
CODE:
npx cap [-V] [-h] [<command>]

----------------------------------------

TITLE: Verifying CocoaPods Installation
DESCRIPTION: This command checks the installed version of CocoaPods to ensure it has been installed correctly.

LANGUAGE: bash
CODE:
pod --version
# 1.11.3

----------------------------------------

TITLE: Installing Capacitor Share Plugin
DESCRIPTION: Installation commands for adding the Share plugin to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/share
npx cap sync

----------------------------------------

TITLE: Implementing Web Plugin Functionality
DESCRIPTION: Web implementation of the openMap method in TypeScript.

LANGUAGE: typescript
CODE:
async openMap(location: { latitude: number, longitude: number}): Promise<void> {
  // logic here
}

----------------------------------------

TITLE: Adding iOS Platform to Capacitor Project
DESCRIPTION: Command to add the iOS platform to a Capacitor project using the Capacitor CLI. This sets up the necessary iOS project files.

LANGUAGE: bash
CODE:
npx cap add ios

----------------------------------------

TITLE: Installing CocoaPods for iOS Development with Capacitor
DESCRIPTION: Uses Homebrew to install CocoaPods, an iOS dependency manager required for managing native dependencies in Capacitor iOS projects.

LANGUAGE: bash
CODE:
brew install cocoapods

----------------------------------------

TITLE: Installing Latest Capacitor iOS Library with npm
DESCRIPTION: This command installs the latest version of the @capacitor/ios package using npm. It updates the Capacitor iOS library to version 2.

LANGUAGE: bash
CODE:
npm install @capacitor/ios@2

----------------------------------------

TITLE: Implementing Content Security Policy in HTML
DESCRIPTION: Demonstrates how to configure Content Security Policy (CSP) in a Capacitor app by adding a meta tag to restrict resource loading to specific origins. This example allows requests to the current origin and foo.com.

LANGUAGE: html
CODE:
<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self' foo.com"
/>

----------------------------------------

TITLE: Screen Orientation Unlock Implementation
DESCRIPTION: Event handler implementation for unlocking screen orientation.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.unlock()}

----------------------------------------

TITLE: Implementing Callback Method in Java for Android
DESCRIPTION: This snippet shows how to annotate a callback method in Java for an Android Capacitor plugin.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
public void method3(PluginCall call) {
}

----------------------------------------

TITLE: Updating Capacitor Native Plugins using CLI
DESCRIPTION: Command to update Capacitor native plugins and dependencies. Accepts an optional platform parameter (android/ios) and --deployment flag for pod installation options. Updates are based on package.json references.

LANGUAGE: bash
CODE:
npx cap update [<platform>]

----------------------------------------

TITLE: Removing Cordova Plugin
DESCRIPTION: Commands to uninstall a Cordova plugin and sync the changes with Capacitor

LANGUAGE: bash
CODE:
npm uninstall cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: iOS Push Notification Registration in AppDelegate
DESCRIPTION: Swift code for registering device tokens for push notifications in iOS AppDelegate

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)
}

func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
}

----------------------------------------

TITLE: Implementing Bridge Pattern in Swift Capacitor Plugin
DESCRIPTION: Example from the Device plugin showing how the Bridge pattern is used to separate interface from implementation in iOS. The method getLanguageCode demonstrates forwarding calls to an implementation class while handling Capacitor-specific resolution.

LANGUAGE: swift
CODE:
@objc func getLanguageCode(_ call: CAPPluginCall) {
    let code = implementation.getLanguageCode()
    call.resolve([ "value": code ])
}

----------------------------------------

TITLE: Opening iOS Project in Xcode with Capacitor
DESCRIPTION: Command to open the iOS project in Xcode IDE for building and running iOS applications.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Setting Android Permissions for External Storage
DESCRIPTION: XML snippet to add necessary permissions to AndroidManifest.xml for using external storage on Android.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Executing 'cap ls' Command in Capacitor CLI
DESCRIPTION: This command lists all installed Cordova and Capacitor plugins. It can optionally filter results by specifying a platform (android or ios).

LANGUAGE: bash
CODE:
npx cap ls [platform]

----------------------------------------

TITLE: Installing Required Capacitor Plugins
DESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework including app, haptics, keyboard, and status-bar functionalities.

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Updating OpenSSL and Ruby for CocoaPods
DESCRIPTION: These commands update OpenSSL and Ruby using Homebrew to resolve GitHub connection issues with CocoaPods on older Mac systems.

LANGUAGE: bash
CODE:
brew install openssl
brew upgrade openssl
brew install ruby
brew link --overwrite ruby

----------------------------------------

TITLE: Configuring Bundled Web Runtime in Capacitor JSON
DESCRIPTION: Sets the 'bundledWebRuntime' option to true in the Capacitor configuration file to enable the bundled web runtime.

LANGUAGE: json
CODE:
"bundledWebRuntime": true

----------------------------------------

TITLE: Installing CocoaPods with Ruby Gem in Bash
DESCRIPTION: This command provides an alternative method to install CocoaPods using Ruby Gem, which may be necessary for certain setups.

LANGUAGE: bash
CODE:
sudo gem install cocoapods

----------------------------------------

TITLE: Updating iOS Deployment Target in Podfile
DESCRIPTION: Update the iOS deployment target in the Podfile to iOS 14.0 for Capacitor 7 compatibility.

LANGUAGE: ruby
CODE:
platform :ios, '14.0'

----------------------------------------

TITLE: Getting Current Zoom Level (TypeScript)
DESCRIPTION: TypeScript function to retrieve the current zoom level. Returns a Promise with the zoom level as a decimal value.

LANGUAGE: typescript
CODE:
get() => Promise<GetResult>

----------------------------------------

TITLE: Configuring Custom URL Scheme in iOS Info.plist
DESCRIPTION: XML configuration to add a custom URL scheme for opening the app on iOS.

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>com.getcapacitor.capacitor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>mycustomscheme</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Installing Required Capacitor Plugins
DESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework including app, haptics, keyboard, and status-bar functionalities.

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Updating iOS .gitignore for Capacitor 1.1
DESCRIPTION: Modification to iOS .gitignore file to add Podfile.lock to the ignored files list. This ensures the Podfile.lock is not tracked in version control.

LANGUAGE: diff
CODE:
 App/build
 App/Pods
 App/public
+App/Podfile.lock
 xcuserdata

 # Cordova plugins for Capacitor

----------------------------------------

TITLE: Environment-Specific Build Commands
DESCRIPTION: Commands for building and running Capacitor app with different environment configurations

LANGUAGE: bash
CODE:
NODE_ENV=qa npx cap copy
NODE_ENV=qa npx cap run ios

npx cap copy
npx cap run ios

----------------------------------------

TITLE: Installing Google Maps Capacitor Plugin
DESCRIPTION: Commands to install the Google Maps plugin and sync with Capacitor

LANGUAGE: bash
CODE:
npm install @capacitor/google-maps
npx cap sync

----------------------------------------

TITLE: Updating Android Package Name
DESCRIPTION: Java package declaration for Android plugin files that needs to match the package-id specified during plugin creation.

LANGUAGE: java
CODE:
package io.ionic.plugins.screenorientation

----------------------------------------

TITLE: Extracting App Name from Cordova config.xml
DESCRIPTION: Example of the name element in config.xml containing the app name, which is needed for Capacitor initialization.

LANGUAGE: xml
CODE:
<name>MyApp</name>

----------------------------------------

TITLE: Installing CocoaPods for iOS Development
DESCRIPTION: Command to install CocoaPods package manager required for iOS development with Capacitor.

LANGUAGE: bash
CODE:
sudo gem install cocoapods

----------------------------------------

TITLE: Capacitor Configuration for Server Hostname
DESCRIPTION: TypeScript configuration for setting up the Capacitor server hostname and Android scheme.

LANGUAGE: typescript
CODE:
const config: CapacitorConfig = {
...
  server: {
    hostname: 'my-app.com',
    androidScheme: 'https',
  }
};

----------------------------------------

TITLE: Installing Capacitor Admob Plugin
DESCRIPTION: Commands to install the Capacitor Community Admob plugin and update Capacitor. This plugin allows developers to integrate Google Admob advertisements into their Capacitor applications.

LANGUAGE: shell
CODE:
npm install @capacitor-community/admob
npx cap update

----------------------------------------

TITLE: Android Google Maps Configuration
DESCRIPTION: Required XML configuration for Android manifest including API key and permissions

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

----------------------------------------

TITLE: iOS Build Commands
DESCRIPTION: Commands for copying and opening the iOS project in Xcode. These commands prepare the iOS project for final compilation.

LANGUAGE: bash
CODE:
npx cap copy ios
npx cap open ios

----------------------------------------

TITLE: Angular Form Implementation with Autofill Credentials
DESCRIPTION: HTML form template for Angular applications implementing credential autofill functionality using ion-input components with proper autocomplete attributes.

LANGUAGE: html
CODE:
<form>
  <ion-list>
    <ion-item>
      <ion-label>E-Mail Address</ion-label>
      <ion-input appAutofill type="email" name="email" autocomplete="email" [(ngModel)]="email" required email></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Password</ion-label>
      <ion-input appAutofill type="password" name="password" autocomplete="current-password" required [(ngModel)]="password"></ion-input>
    </ion-item>
  </ion-list>
  <ion-button type="submit">Submit</ion-button>
</form>

----------------------------------------

TITLE: Syncing Web Code to Native Projects
DESCRIPTION: Command to sync web application code to native projects, copying built assets and installing dependencies.

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Implementing Facade Pattern in Java Capacitor Plugin
DESCRIPTION: Shows how the Facade pattern is used in the Local Notifications plugin to simplify complex subsystem interactions and provide a clean interface for notification management.

LANGUAGE: java
CODE:
@Override
public void load() {
    super.load();
    notificationStorage = new NotificationStorage(getContext());
    manager = new LocalNotificationManager( … );
    manager.createNotificationChannel();
    notificationChannelManager = new NotificationChannelManager(getActivity());
    staticBridge = this.bridge;
}

----------------------------------------

TITLE: Installing Cordova Purchase Plugin for Capacitor
DESCRIPTION: Commands to install the cordova-plugin-purchase package and update Capacitor to enable In App Purchase functionality in the application.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: Installing Xcode Command Line Tools
DESCRIPTION: Command to install Xcode Command Line Tools, a prerequisite for iOS development with Capacitor.

LANGUAGE: bash
CODE:
xcode-select --install

----------------------------------------

TITLE: Adding Android Platform to Capacitor Project
DESCRIPTION: Adds the Android platform to the Capacitor project using the Capacitor CLI. This sets up the necessary Android project files.

LANGUAGE: bash
CODE:
npx cap add android

----------------------------------------

TITLE: Angular Integration with Capacitor Plugins
DESCRIPTION: Demonstrates proper usage of Capacitor plugin event listeners within Angular's NgZone for proper change detection.

LANGUAGE: typescript
CODE:
constructor(private ngZone: NgZone) { }

async ngOnInit() {
  Network.addListener("networkStatusChange", (status) => {
    this.ngZone.run(() => {
      // This code will run in Angular's execution context
      this.networkStatus = status.connected ? "Online" : "Offline";
    });
  });
}

----------------------------------------

TITLE: Installing Xcode Command Line Tools in Bash
DESCRIPTION: This command installs the Xcode Command Line Tools, which are required for building and testing iOS applications with Capacitor.

LANGUAGE: bash
CODE:
xcode-select --install

----------------------------------------

TITLE: Syncing Web Content with Native Projects
DESCRIPTION: Command to sync changes from the web directory to native projects after building the application.

LANGUAGE: bash
CODE:
npx cap copy

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on Mac
DESCRIPTION: Example of setting the JAVA_HOME environment variable in Mac's .zshrc or .bashrc file to resolve Java Runtime location issues.

LANGUAGE: bash
CODE:
export JAVA_HOME="/Applications/Android Studio.app/Contents/jre/Contents/Home"

----------------------------------------

TITLE: iOS Podfile Configuration
DESCRIPTION: Ruby code for configuring CocoaPods dependencies including Firebase Messaging

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
  pod 'FirebaseMessaging'
end

----------------------------------------

TITLE: Creating Android Common Variables
DESCRIPTION: Configuration for common Android build variables in variables.gradle file

LANGUAGE: groovy
CODE:
ext {
  minSdkVersion = 21
  compileSdkVersion = 29
  targetSdkVersion = 29
  androidxAppCompatVersion = '1.1.0'
  androidxCoreVersion =  '1.2.0'
  androidxMaterialVersion =  '1.1.0-rc02'
  androidxBrowserVersion =  '1.2.0'
  androidxLocalbroadcastmanagerVersion =  '1.0.0'
  firebaseMessagingVersion =  '20.1.2'
  playServicesLocationVersion =  '17.0.0'
  junitVersion =  '4.12'
  androidxJunitVersion =  '1.1.1'
  androidxEspressoCoreVersion =  '3.2.0'
  cordovaAndroidVersion =  '7.0.0'
}

----------------------------------------

TITLE: Displaying Xcode Project Structure for App Renaming
DESCRIPTION: This code snippet shows the typical Xcode project structure, illustrating where to find the app name for renaming purposes. It demonstrates the PROJECT and TARGET sections in Xcode.

LANGUAGE: plaintext
CODE:
PROJECT
  App
-------
TARGET
  App

----------------------------------------

TITLE: Adding Vibration Permission for Android
DESCRIPTION: Required permission declaration in AndroidManifest.xml to enable vibration functionality on Android devices.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.VIBRATE" />

----------------------------------------

TITLE: Installing cordova-plugin-purchase for Capacitor
DESCRIPTION: This snippet shows how to install the cordova-plugin-purchase plugin and update Capacitor. The plugin is essential for implementing In App Purchases in Capacitor apps.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: iOS CocoaPods Configuration - Ruby
DESCRIPTION: Podfile configuration for including Firebase Messaging in iOS project.

LANGUAGE: ruby
CODE:
require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

platform :ios, '13.0'
use_frameworks!

install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
end

target 'App' do
  capacitor_pods
  pod 'Firebase/Messaging'
end

post_install do |installer|
  assertDeploymentTarget(installer)
end

----------------------------------------

TITLE: Running Trapeze Configuration
DESCRIPTION: Demonstrates the command to execute the trapeze configuration tool using npm.

LANGUAGE: bash
CODE:
npm run cap-config

----------------------------------------

TITLE: Opening Native Project Workspace with Capacitor CLI
DESCRIPTION: This command opens the native project workspace in the specified IDE (Xcode for iOS, Android Studio for Android). It requires the platform argument, which can be either 'android' or 'ios'.

LANGUAGE: bash
CODE:
npx cap open <platform>

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Command to open the Android project in Android Studio IDE.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Installing Xcode Command Line Tools for iOS Development
DESCRIPTION: This command installs the Xcode Command Line Tools, which are required for building and testing iOS applications with Capacitor.

LANGUAGE: bash
CODE:
xcode-select --install

----------------------------------------

TITLE: Using WebColor.parseColor() in Android
DESCRIPTION: Use WebColor.parseColor() instead of Color.parseColor() to parse RGBA color strings consistently across platforms.

LANGUAGE: java
CODE:
String colorStringWithAlpha = "#FF000088"; // Semi-transparent red
int color = WebColor.parseColor(colorStringWithAlpha);

----------------------------------------

TITLE: Running Trapeze Configuration
DESCRIPTION: Demonstrates the command to execute the trapeze configuration tool using npm.

LANGUAGE: bash
CODE:
npm run cap-config

----------------------------------------

TITLE: Exporting Capacitor Android Plugin to MainActivity
DESCRIPTION: This snippet demonstrates how to export a Capacitor Android plugin to the app's MainActivity, making Capacitor aware of the plugin and allowing it to be used in the application.

LANGUAGE: java
CODE:
// Other imports...
import com.example.myapp.EchoPlugin;

public class MainActivity extends BridgeActivity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // Initializes the Bridge
    this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{
      // Additional plugins you've installed go here
      // Ex: add(TotallyAwesomePlugin.class);
      add(EchoPlugin.class);
    }});
  }
}

----------------------------------------

TITLE: State Change Listener Definition
DESCRIPTION: TypeScript interface for adding a listener to detect screen reader state changes

LANGUAGE: typescript
CODE:
addListener(eventName: 'stateChange', listener: StateChangeListener) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Configuring Server in Capacitor Config
DESCRIPTION: JSON configuration for setting up the server URL in capacitor.config.json for Live Reload

LANGUAGE: json
CODE:
"server": {
  "url": "http://192.168.1.68:8100",
  "cleartext": true
}

----------------------------------------

TITLE: Installing Capacitor Android Package
DESCRIPTION: Installs the @capacitor/android package using npm. This is the first step in adding Android support to a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor/android

----------------------------------------

TITLE: Keyboard Shortcuts Configuration for Capacitor VSCode Extension
DESCRIPTION: Defines keyboard shortcuts for running, building, and debugging Capacitor applications on Mac and Windows platforms.

LANGUAGE: markdown
CODE:
| Mac Shortcut | Windows Shortcut | Action |
| --- | --- | ----------- |
| `⌥` + R | `ALT` + R | Run the app |
| `⌥` + B | `ALT` + B | Build the app for web |
| `⌥` + D | `ALT` + D | Debug the app for web |

----------------------------------------

TITLE: Capacitor App Plugin Usage Example
DESCRIPTION: Example TypeScript code demonstrating how to use the App plugin for handling app state changes, URL opens, and restored states

LANGUAGE: typescript
CODE:
import { App } from '@capacitor/app';

App.addListener('appStateChange', ({ isActive }) => {
  console.log('App state changed. Is active?', isActive);
});

App.addListener('appUrlOpen', data => {
  console.log('App opened with URL:', data);
});

App.addListener('appRestoredResult', data => {
  console.log('Restored state:', data);
});

const checkAppLaunchUrl = async () => {
  const { url } = await App.getLaunchUrl();

  console.log('App opened with URL: ' + url);
};

----------------------------------------

TITLE: Capacitor App Plugin Usage Example
DESCRIPTION: Example TypeScript code demonstrating how to use the App plugin for handling app state changes, URL opens, and restored states

LANGUAGE: typescript
CODE:
import { App } from '@capacitor/app';

App.addListener('appStateChange', ({ isActive }) => {
  console.log('App state changed. Is active?', isActive);
});

App.addListener('appUrlOpen', data => {
  console.log('App opened with URL:', data);
});

App.addListener('appRestoredResult', data => {
  console.log('Restored state:', data);
});

const checkAppLaunchUrl = async () => {
  const { url } = await App.getLaunchUrl();

  console.log('App opened with URL: ' + url);
};

----------------------------------------

TITLE: Modifying App Name in Android strings.xml
DESCRIPTION: Shows how to change the app name by modifying the app_name value in the strings.xml file. It also includes an example of changing the activity name.

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>
<string name="title_activity_main">MyApp</string>

----------------------------------------

TITLE: Registering Custom Plugin in MainActivity.java
DESCRIPTION: This code snippet shows how to register the custom EchoPlugin in the MainActivity.java file of a Capacitor Android project. It uses the registerPlugin() method to add the plugin to the app.

LANGUAGE: java
CODE:
public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        registerPlugin(EchoPlugin.class);
        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Registering Custom Plugin in MainActivity.java
DESCRIPTION: This code snippet shows how to register the custom EchoPlugin in the MainActivity.java file of a Capacitor Android project. It uses the registerPlugin() method to add the plugin to the app.

LANGUAGE: java
CODE:
public class MainActivity extends BridgeActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        registerPlugin(EchoPlugin.class);
        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Conditional Rendering Based on Orientation
DESCRIPTION: JSX logic to conditionally render UI components based on screen orientation.

LANGUAGE: jsx
CODE:
{
  orientation.includes('portrait') && {
    /* Provide a button that will rotate and lock the screen orientation to landscape mode. */
  };
}
{
  orientation.includes('landscape') && {
    /* Let the user "sign" and unlock screen orientation through a confirmation button. */
  };
}

----------------------------------------

TITLE: Jest Mock Implementation Example
DESCRIPTION: Example of using Jest to mock and test the Storage plugin implementation in a component test.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
    Storage.get = jest.fn().mockImplementation(
      async (data: { key: string }): Promise<{ value: string }> => {
        return data.key === "firstName"
          ? { value: "Jimmy" }
          : data.key === "lastName"
          ? { value: "Simms" }
          : { value: "unknown" };
      }
    );
    const w = mount(Home);
    await flushPromises();
    expect(w.vm.firstName).toEqual("Jimmy");
    expect(w.vm.lastName).toEqual("Simms");
  });

  it("clears the storage", () => {
    const button = wrapper.findComponent('[data-testid="clear"]');
    Storage.clear = jest.fn().mockResolvedValue(undefined);
    button.trigger("click");
    expect(Storage.clear).toHaveBeenCalledTimes(1);
  });

----------------------------------------

TITLE: Initializing Capacitor Plugin Generator
DESCRIPTION: Command to start the Capacitor plugin generator wizard using NPX. This tool helps create the initial plugin structure and configuration.

LANGUAGE: bash
CODE:
npx @capacitor/cli@2.4.7 plugin:generate

----------------------------------------

TITLE: Running Capacitor Android App
DESCRIPTION: Command to run the Android application on a device or emulator from the command line.

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Importing Capacitor in TypeScript
DESCRIPTION: Demonstrates how to import the Capacitor object from the @capacitor/core package for use in modern JavaScript applications.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Command to open the iOS Capacitor project in Xcode IDE

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Installing cordova-res CLI Tool
DESCRIPTION: Command to globally install the cordova-res package using npm package manager

LANGUAGE: bash
CODE:
npm install -g cordova-res

----------------------------------------

TITLE: Configuring iOS Permissions for Google Maps
DESCRIPTION: Instructions for adding required privacy descriptions to Info.plist for iOS location services.

LANGUAGE: xml
CODE:
<key>NSLocationWhenInUseUsageDescription</key>
<string>Your location is required for xyz benefits for you</string>

----------------------------------------

TITLE: Installing and Running Capacitor Docs Development Server
DESCRIPTION: Commands to install dependencies, build the documentation site, and start the development server. Requires Node.js and npm to be installed.

LANGUAGE: bash
CODE:
npm install
npm run build
npm run serve

----------------------------------------

TITLE: Configuring Background Runner in capacitor.config.json
DESCRIPTION: JSON configuration for Background Runner in the Capacitor config file.

LANGUAGE: json
CODE:
{
  "plugins": {
    "BackgroundRunner": {
      "label": "com.example.background.task",
      "src": "runners/background.js",
      "event": "myCustomEvent",
      "repeat": true,
      "interval": 15,
      "autoStart": true
    }
  }
}

----------------------------------------

TITLE: Implementing iOS Plugin Method
DESCRIPTION: Swift implementation of the openMap method for iOS platform using the Capacitor plugin architecture.

LANGUAGE: swift
CODE:
@objc func openMap(_ call: CAPPluginCall) {
  let latitude = call.getString("latitude")
  let longitude = call.getNumber("longitude")

  // more logic
}

----------------------------------------

TITLE: Installing Local Notifications Plugin
DESCRIPTION: Command line instructions for installing the local notifications plugin and syncing the Capacitor project

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications
npx cap sync

----------------------------------------

TITLE: Configuring Server URL for Live Reload in Capacitor
DESCRIPTION: This JSON snippet shows how to configure the server URL in the capacitor.config.json file. The URL should use the local web server's IP address and port for Live Reload to work correctly.

LANGUAGE: json
CODE:
"server": {
  "url": "http://192.168.1.68:8100",
  "cleartext": true
},

----------------------------------------

TITLE: Installing FFI on Apple Silicon Macs
DESCRIPTION: These commands install the FFI gem and run pod install using Rosetta to simulate an Intel architecture. This is a workaround for FFI installation issues on Apple Silicon Macs.

LANGUAGE: bash
CODE:
sudo arch -x86_64 gem install ffi
arch -x86_64 pod install

----------------------------------------

TITLE: Updating Pod Target Name in Ruby Podfile
DESCRIPTION: Shows how to rename the target in the iOS Podfile when changing the app name. This modification is required as part of the app renaming process in Capacitor iOS projects.

LANGUAGE: ruby
CODE:
-target 'App' do
+target 'MyRenamedApp' do
   capacitor_pods
   # Add your Pods here
 end

----------------------------------------

TITLE: Adding Android Exported Tag in XML
DESCRIPTION: Add the android:exported tag to the activity in AndroidManifest.xml file.

LANGUAGE: xml
CODE:
android:exported="true"

----------------------------------------

TITLE: Creating Privacy Manifest for iOS Capacitor App Using UserDefaults API
DESCRIPTION: This XML snippet shows a sample PrivacyInfo.xcprivacy file for a Capacitor app using the UserDefaults API through the @capacitor/preferences plugin. It declares the use of NSPrivacyAccessedAPICategoryUserDefaults with the reason code CA92.1.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyTracking</key>
    <false/>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryUserDefaults</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>CA92.1</string>
        </array>
      </dict>
    </array>
    <key>NSPrivacyTrackingDomains</key>
    <array/>
  </dict>
</plist>

----------------------------------------

TITLE: Updating Cordova Plugin Version
DESCRIPTION: Commands to update an existing Cordova plugin to a specific version and sync changes to native projects.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name@version
npx cap sync

----------------------------------------

TITLE: Extracting App ID from Cordova config.xml
DESCRIPTION: Example of the widget element in config.xml containing the app ID, which is needed for Capacitor initialization.

LANGUAGE: xml
CODE:
<widget id="io.ionic.myapp" version="0.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">

----------------------------------------

TITLE: Using Capacitor Plugins in TypeScript
DESCRIPTION: Demonstrates how to import and use Capacitor plugins, specifically showing geolocation functionality example.

LANGUAGE: typescript
CODE:
import { Plugins } from '@capacitor/core';

const position = await Plugins.Geolocation.getCurrentPosition();

----------------------------------------

TITLE: Setting Keep Alive Flag - iOS
DESCRIPTION: Code to mark a plugin call for multiple completions in iOS by setting the keepAlive property to true. This allows the call to be resolved multiple times.

LANGUAGE: swift
CODE:
call.keepAlive = true

----------------------------------------

TITLE: Running Capacitor App on iOS Device
DESCRIPTION: This command runs a debug build of the Capacitor app on an iOS device for testing purposes.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Registering EchoPlugin in Objective-C for Capacitor
DESCRIPTION: This Objective-C code registers the EchoPlugin with Capacitor, making it available to JavaScript. It uses the CAP_PLUGIN macro to define the plugin name and available methods.

LANGUAGE: objectivec
CODE:
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(EchoPlugin, "Echo",
    CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Including PWA Elements via CDN Script Tags
DESCRIPTION: HTML script tags for including PWA Elements directly in index.html via CDN. Includes both module and nomodule versions for browser compatibility.

LANGUAGE: html
CODE:
<script
  type="module"
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js"
></script>
<script
  nomodule
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js"
></script>

----------------------------------------

TITLE: Installing In-App Purchase Plugin for Capacitor
DESCRIPTION: This snippet shows how to install the cordova-plugin-purchase plugin and update Capacitor to enable In-App Purchase functionality in a Capacitor app.

LANGUAGE: shell
CODE:
npm install cordova-plugin-purchase
npx cap update

----------------------------------------

TITLE: Disabling Capacitor Telemetry
DESCRIPTION: Command to opt out of Capacitor's telemetry data collection program.

LANGUAGE: bash
CODE:
npx cap telemetry off

----------------------------------------

TITLE: Updating CocoaPods for iOS in Capacitor
DESCRIPTION: This command updates the CocoaPods dependencies for an iOS project in Capacitor. It's used to resolve the 'Sandbox not in sync with the Podfile.lock' error.

LANGUAGE: bash
CODE:
npx cap update ios

----------------------------------------

TITLE: Installing Screen Orientation Plugin
DESCRIPTION: Commands to install the Capacitor screen orientation plugin and sync the native projects.

LANGUAGE: shell
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Configuring Capacitor Http Plugin in JSON
DESCRIPTION: Example configuration for enabling the Capacitor Http Plugin in the capacitor.config.json file. This configuration enables the patching of fetch and XMLHttpRequest to use native libraries.

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorHttp": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Importing and Using Capacitor Utilities in TypeScript
DESCRIPTION: Demonstrates how to import Capacitor and use its utility functions, such as isPluginAvailable.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';
const isAvailable = Capacitor.isPluginAvailable('Camera');

----------------------------------------

TITLE: iOS Background Runner Integration
DESCRIPTION: Swift code required to integrate Background Runner into the iOS AppDelegate

LANGUAGE: swift
CODE:
import CapacitorBackgroundRunner

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    // ....
    BackgroundRunnerPlugin.registerBackgroundTask()
    BackgroundRunnerPlugin.handleApplicationDidFinishLaunching(launchOptions: launchOptions)
    // ....

    return true
}

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        // ....
        BackgroundRunnerPlugin.dispatchEvent(event: "remoteNotification", eventArgs: userInfo) { result in
            switch result {
            case .success:
                completionHandler(.newData)
            case .failure:
                completionHandler(.failed)
            }
        }
    }

----------------------------------------

TITLE: Using WebColor.parseColor() in Android
DESCRIPTION: Use WebColor.parseColor() instead of Color.parseColor() to parse hex color strings with alpha channels consistently across platforms.

LANGUAGE: java
CODE:
String colorStringWithAlpha = "#FF000088"; // Semi-transparent red
int color = WebColor.parseColor(colorStringWithAlpha);

----------------------------------------

TITLE: Adding Network Permissions in AndroidManifest.xml
DESCRIPTION: Demonstrates how to add network permissions to the AndroidManifest.xml file. This example shows the addition of the ACCESS_NETWORK_STATE permission.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.getcapacitor.myapp">
    <activity>
      <!-- other stuff -->
    </activity>

    <!-- More stuff -->

    <!-- Your permissions -->

    <!-- Network API -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
</manifest>

----------------------------------------

TITLE: Installing Capacitor CLI v5 with npm
DESCRIPTION: Install the latest v5 version of the Capacitor CLI as a dev dependency in your project.

LANGUAGE: sh
CODE:
npm i -D @capacitor/cli@latest-5

----------------------------------------

TITLE: Installing Geolocation Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/geolocation plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/geolocation
npx cap sync

----------------------------------------

TITLE: Using Capacitor Cookies API
DESCRIPTION: Example usage of Capacitor Cookies API including getting, setting, and deleting cookies

LANGUAGE: typescript
CODE:
import { CapacitorCookies } from '@capacitor/core';

const getCookies = () => {
  return document.cookie;
};

const setCookie = () => {
  document.cookie = key + '=' + value;
};

const setCapacitorCookie = async () => {
  await CapacitorCookies.setCookie({
    url: 'http://example.com',
    key: 'language',
    value: 'en',
  });
};

const deleteCookie = async () => {
  await CapacitorCookies.deleteCookie({
    url: 'https://example.com',
    key: 'language',
  });
};

const clearCookiesOnUrl = async () => {
  await CapacitorCookies.clearCookies({
    url: 'https://example.com',
  });
};

const clearAllCookies = async () => {
  await CapacitorCookies.clearAllCookies();
};

----------------------------------------

TITLE: Implementing Callback Method in Java for Android
DESCRIPTION: This snippet shows how to annotate a callback method in Java for an Android Capacitor plugin. The method is annotated with @PluginMethod and specifies RETURN_CALLBACK as the return type.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_CALLBACK)
public void method3(PluginCall call) {
}

----------------------------------------

TITLE: Keep Alive Flag Setting - Android Java
DESCRIPTION: Code to set the keepAlive flag for multiple completion scenarios in Android. When set to true, allows resolve() to be called multiple times on the same plugin call.

LANGUAGE: java
CODE:
call.setKeepAlive(true);

----------------------------------------

TITLE: Adding Native Platforms
DESCRIPTION: Commands to add iOS and Android platforms to the Capacitor project

LANGUAGE: bash
CODE:
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Configuring Android Manifest for Google Maps
DESCRIPTION: XML configuration to add Google Maps API key and location permissions to AndroidManifest.xml.

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

----------------------------------------

TITLE: Updating Capacitor Core Components
DESCRIPTION: Commands to update Capacitor Core, CLI, and platform-specific packages to their latest versions

LANGUAGE: bash
CODE:
npm install @capacitor/cli
npm install @capacitor/core

LANGUAGE: bash
CODE:
npm install @capacitor/ios
npm install @capacitor/android

----------------------------------------

TITLE: Registering ScreenOrientationWeb Plugin in TypeScript
DESCRIPTION: Registers the ScreenOrientationWeb class as the web implementation of the ScreenOrientation plugin using Capacitor's registerPlugin function.

LANGUAGE: typescript
CODE:
const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
  {
    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),
  },
);

----------------------------------------

TITLE: Registering ScreenOrientationWeb Plugin in TypeScript
DESCRIPTION: Registers the ScreenOrientationWeb class as the web implementation of the ScreenOrientation plugin using Capacitor's registerPlugin function.

LANGUAGE: typescript
CODE:
const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
  {
    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),
  },
);

----------------------------------------

TITLE: Locking and Unlocking Screen Orientation in React
DESCRIPTION: These TypeScript snippets show how to lock the screen orientation to landscape and how to unlock it using the ScreenOrientation API from Capacitor.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.lock({ orientation: "landscape-primary" })}

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.unlock()}

----------------------------------------

TITLE: Integrating PWA Elements in Angular
DESCRIPTION: Code snippet for importing and initializing PWA Elements in an Angular application's main.ts file.

LANGUAGE: typescript
CODE:
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

import { defineCustomElements } from '@ionic/pwa-elements/loader';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

// Call the element loader after the platform has been bootstrapped
defineCustomElements(window);

----------------------------------------

TITLE: Installing Keyboard Plugin using NPM
DESCRIPTION: Commands to install the @capacitor/keyboard plugin and sync the project

LANGUAGE: bash
CODE:
npm install @capacitor/keyboard
npx cap sync

----------------------------------------

TITLE: Installing Browser Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/browser plugin and sync the native projects.

LANGUAGE: bash
CODE:
npm install @capacitor/browser
npx cap sync

----------------------------------------

TITLE: Example Usage of triggerJSEvent in Capacitor Android
DESCRIPTION: Provides examples of using the triggerJSEvent method to fire custom events in JavaScript from Android. Note that the data parameter must be a serialized JSON string.

LANGUAGE: java
CODE:
bridge.triggerJSEvent("myCustomEvent", "window");
bridge.triggerJSEvent("myCustomEvent", "document", "{ 'dataKey': 'dataValue' }");

----------------------------------------

TITLE: Implementing WebView-Accessible Custom Plugin in Java for Capacitor Android
DESCRIPTION: This snippet demonstrates how to create a custom Capacitor plugin in Java. It shows the structure of a plugin class with two custom methods, illustrating how to handle plugin calls and return results.

LANGUAGE: java
CODE:
package com.example.myapp;

import com.getcapacitor.NativePlugin;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;

@NativePlugin()
public class CustomNativePlugin extends Plugin {

  @PluginMethod()
  public void customCall(PluginCall call) {
    String message = call.getString("message");
    // More code here...
    call.success();
  }

  @PluginMethod()
  public void customFunction(PluginCall call) {
    // More code here...
    call.resolve();
  }
}

----------------------------------------

TITLE: Configuring NPM Script for Trapeze
DESCRIPTION: Shows how to set up an NPM script for running the Trapeze configuration tool with a YAML config file.

LANGUAGE: json
CODE:
"scripts": {
  "cap-config": "trapeze run config.yaml"
}

----------------------------------------

TITLE: Importing Capacitor Core in TypeScript
DESCRIPTION: Shows how to import the Capacitor object from the core package for use in modern JavaScript applications.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Command to open the Android project in Android Studio using Capacitor CLI.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Enabling Capacitor in Existing Ionic Project
DESCRIPTION: Command to enable Capacitor integration in an existing Ionic project

LANGUAGE: bash
CODE:
ionic integrations enable capacitor

----------------------------------------

TITLE: Example Usage of triggerJSEvent in Capacitor Android
DESCRIPTION: Provides examples of using the triggerJSEvent method to fire custom events in JavaScript from Android. Note that the data parameter must be a serialized JSON string.

LANGUAGE: java
CODE:
bridge.triggerJSEvent("myCustomEvent", "window");
bridge.triggerJSEvent("myCustomEvent", "document", "{ 'dataKey': 'dataValue' }");

----------------------------------------

TITLE: Android Intent Filter Configuration
DESCRIPTION: XML configuration for Android App Links in AndroidManifest.xml, defining the intent filter for deep linking.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="https" android:host="beerswift.app" />
</intent-filter>

----------------------------------------

TITLE: Configuring iOS Podfile for Multiple Targets
DESCRIPTION: Ruby configuration for iOS Podfile to support both default and QA targets

LANGUAGE: ruby
CODE:
target 'App' do
  capacitor_pods
  # Add your Pods here
end

target 'App QA' do
  capacitor_pods
  # Add your Pods here
end

----------------------------------------

TITLE: Generating Resources with Cordova-res
DESCRIPTION: Commands to install cordova-res tool and generate icons and splash screens for iOS and Android

LANGUAGE: bash
CODE:
npm install -g cordova-res
cordova-res ios --skip-config --copy
cordova-res android --skip-config --copy

----------------------------------------

TITLE: Error Output Sample for CocoaPods on Apple Silicon
DESCRIPTION: Example error message when encountering CocoaPods installation issues on Apple Silicon Mac devices due to FFI library compatibility problems

LANGUAGE: bash
CODE:
[error] Analyzing dependencies
        /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi/library.rb:275: [BUG] Bus Error at 0x0000000000000000
        ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]

----------------------------------------

TITLE: Implementing Orientation Change Listener in ScreenOrientationPlugin
DESCRIPTION: Adds methods to ScreenOrientationPlugin for registering and handling orientation change notifications, including notifying JavaScript listeners.

LANGUAGE: swift
CODE:
override public func load() {
  NotificationCenter.default.addObserver(
    self,
    selector: #selector(self.orientationDidChange),
    name: UIDevice.orientationDidChangeNotification,
    object: nil)
  if let viewController = (self.bridge?.viewController as? CAPBridgeViewController) {
    implementation.setCapacitorViewController(viewController)
  }
}

deinit {
  NotificationCenter.default.removeObserver(self)
}

@objc private func orientationDidChange() {
  // Ignore changes in orientation if unknown, face up, or face down
  if UIDevice.current.orientation.isValidInterfaceOrientation {
    let orientation = implementation.getCurrentOrientationType()
    notifyListeners("screenOrientationChange", data: ["type": orientation])
  }
}

----------------------------------------

TITLE: Initializing Capacitor Project
DESCRIPTION: Command to initialize a new Capacitor project, requiring app name and bundle ID from existing Cordova config.xml

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Building Web Application
DESCRIPTION: Commands for building the web application before converting to native apps. Shows both generic npm build and specific Ionic framework example.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
ionic build

----------------------------------------

TITLE: Package.json Required Fields for Plugin Authors
DESCRIPTION: Example JSON structure showing the required fields that plugin authors should include in their package.json file for optimal plugin discoverability and information display.

LANGUAGE: json
CODE:
{
  "keywords": ["relevant", "search", "terms"],
  "description": "Description of plugin functionality",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/username/repo"
  },
  "bugs": {
    "url": "https://github.com/username/repo/issues"
  },
  "author": {
    "name": "John Smith"
  }
}

----------------------------------------

TITLE: Installing PWA Elements via NPM
DESCRIPTION: Command to install the @ionic/pwa-elements package using npm

LANGUAGE: bash
CODE:
npm install @ionic/pwa-elements

----------------------------------------

TITLE: Installing Status Bar Plugin with npm
DESCRIPTION: Commands to install the @capacitor/status-bar plugin and sync the native project.

LANGUAGE: bash
CODE:
npm install @capacitor/status-bar
npx cap sync

----------------------------------------

TITLE: Accessing Bridge Reference in Swift
DESCRIPTION: Shows how to access and safely unwrap the bridge reference in Capacitor iOS plugins. The bridge property is held as a weak reference in plugins.

LANGUAGE: swift
CODE:
self.bridge?

LANGUAGE: swift
CODE:
guard let bridge = self.bridge else { return }

----------------------------------------

TITLE: Configuring TypeScript Path Mapping for Jasmine
DESCRIPTION: JSON configuration for TypeScript path mapping in tsconfig.spec.json to enable manual mocks in Jasmine testing environment.

LANGUAGE: json
CODE:
{
    "paths": {
      "@app/*": ["src/app/*"],
      "@env/*": ["src/environments/*"],
      "@test/*": ["test/*"],
      "@capacitor/*": ["__mocks__/@capacitor/*"]
    }
}

----------------------------------------

TITLE: Opening iOS Project in Xcode using Capacitor
DESCRIPTION: Command to open the iOS project in Xcode using Capacitor's CLI tool. Requires Xcode 11 or above to be installed.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Command to open the Capacitor Android project in Android Studio for further development and debugging.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Installing Geolocation Plugin with npm
DESCRIPTION: Commands to install the @capacitor/geolocation plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/geolocation
npx cap sync

----------------------------------------

TITLE: Configuring iOS Screen Orientation in Info.plist
DESCRIPTION: This XML snippet demonstrates how to set supported interface orientations for iPhones and iPads in the Info.plist file. It limits iPhones to portrait mode and iPads to landscape orientations.

LANGUAGE: xml
CODE:
  <key>UISupportedInterfaceOrientations</key>
  <array>
    <string>UIInterfaceOrientationPortrait</string>
  </array>
  <key>UISupportedInterfaceOrientations~ipad</key>
  <array>
    <string>UIInterfaceOrientationLandscapeRight</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
  </array>

----------------------------------------

TITLE: Configuring URL Scheme in strings.xml
DESCRIPTION: Shows how to set custom URL scheme for deep linking in Android string resources.

LANGUAGE: xml
CODE:
<string name="custom_url_scheme">com.capacitorjs.myapp</string>

----------------------------------------

TITLE: Initializing MobileProject in TypeScript
DESCRIPTION: Shows how to initialize and load a MobileProject instance with iOS and Android configuration paths.

LANGUAGE: typescript
CODE:
import { MobileProject, MobileProjectConfig } from '@trapezedev/project';

// This takes a MobileProjectConfig
// to know where the ios and android projects are
const config: MobileProjectConfig = {
  ios: {
    path: 'ios/App',
  },
  android: {
    path: 'android',
  },
};

const project = new MobileProject(process.cwd(), config);
await project.load();

----------------------------------------

TITLE: Installing Haptics Plugin with npm
DESCRIPTION: Commands to install the Capacitor Haptics plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/haptics
npx cap sync

----------------------------------------

TITLE: Using Geolocation API in TypeScript
DESCRIPTION: Example of how to use the Geolocation API to get the current position in TypeScript.

LANGUAGE: typescript
CODE:
import { Geolocation } from '@capacitor/geolocation';

const printCurrentPosition = async () => {
  const coordinates = await Geolocation.getCurrentPosition();

  console.log('Current position:', coordinates);
};

----------------------------------------

TITLE: Using Geolocation API in TypeScript
DESCRIPTION: Example of how to use the Geolocation API to get the current position in TypeScript.

LANGUAGE: typescript
CODE:
import { Geolocation } from '@capacitor/geolocation';

const printCurrentPosition = async () => {
  const coordinates = await Geolocation.getCurrentPosition();

  console.log('Current position:', coordinates);
};

----------------------------------------

TITLE: Android Manifest Display Name Configuration
DESCRIPTION: XML configuration for using dynamic display names in Android manifest

LANGUAGE: xml
CODE:
<application
  ...snip...
  android:label="${displayName}">

  <activity
    ...snip...
    android:label="${displayName}">

----------------------------------------

TITLE: iOS Scheme Configuration
DESCRIPTION: JSON configuration for setting the iOS scheme in Capacitor to match Cordova's ionic:// scheme

LANGUAGE: json
CODE:
{
  "server": {
    "iosScheme": "ionic"
  }
}

----------------------------------------

TITLE: Installing Capacitor Haptics Plugin
DESCRIPTION: Commands to install the latest version of the Haptics plugin and sync the native project

LANGUAGE: bash
CODE:
npm install @capacitor/haptics@latest-5
npx cap sync

----------------------------------------

TITLE: Building and Copying Web Code Commands
DESCRIPTION: Commands for building the web application and copying it to native platforms. These commands should be run after making changes to the web code.

LANGUAGE: bash
CODE:
npm run build

LANGUAGE: bash
CODE:
npx cap copy

----------------------------------------

TITLE: Displaying Capacitor Plugin Error in Bash
DESCRIPTION: This bash snippet shows an error message that appears in the browser's Developer Tools when the ScreenOrientation plugin is not implemented for the web platform.

LANGUAGE: bash
CODE:
Uncaught (in promise) ScreenOrientation does not have web implementation.

----------------------------------------

TITLE: Configuring Capacitor for Text Zoom on iPads (JSON)
DESCRIPTION: Configuration snippet to set the preferred content mode to 'mobile' for iPads in the Capacitor configuration file. This is required for the text-zoom plugin to work on iPads.

LANGUAGE: json
CODE:
{
  "ios": {
    "preferredContentMode": "mobile"
  }
}

----------------------------------------

TITLE: Initializing Capacitor Plugin with NPM
DESCRIPTION: Command to run the Capacitor plugin generator using NPM. This tool helps developers start working on their custom Capacitor plugin.

LANGUAGE: bash
CODE:
npm init @capacitor/plugin@latest

----------------------------------------

TITLE: Updating iOS Bridge References
DESCRIPTION: Update bridge references to use optional chaining due to weak references in Capacitor 3.

LANGUAGE: swift
CODE:
bridge?.presentVC(myViewController, animated: true, completion: nil)

if let isSim = bridge?.isSimEnvironment, isSim {
    // Handle simulator environment
}

----------------------------------------

TITLE: Installing Camera Plugin for Capacitor
DESCRIPTION: Commands to install the camera plugin and synchronize with native platforms

LANGUAGE: bash
CODE:
npm install @capacitor/camera@latest-5
npx cap sync

----------------------------------------

TITLE: Syncing Capacitor Web Assets
DESCRIPTION: Uses the Capacitor CLI to synchronize web assets, copying the Capacitor runtime bundle (capacitor.js) into the web assets directory.

LANGUAGE: bash
CODE:
npx cap sync web

----------------------------------------

TITLE: Installing Capacitor Push Notifications Plugin
DESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Running Trapeze Configuration
DESCRIPTION: Shows the command to execute the Trapeze configuration tool using NPM script.

LANGUAGE: bash
CODE:
npm run cap-config

----------------------------------------

TITLE: Running Android App via Command Line
DESCRIPTION: Command to run the Android app on a device or emulator using Capacitor CLI.

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Updating Watch Data with Capacitor Watch in TypeScript
DESCRIPTION: Example of how to update data on the watch using the Capacitor Watch plugin.

LANGUAGE: typescript
CODE:
var stateData = {
  number: 0
}

async function counterIncrement() {
  stateData.counter++  
  await Watch.updateWatchData({"data": convertValuesOfObjectToStringValues(stateData)})
}

----------------------------------------

TITLE: Returning Data from Capacitor Android Plugin
DESCRIPTION: This code snippet shows how to return data back to the client from a Capacitor Android plugin. It demonstrates creating a JSObject with various data types and resolving or rejecting the plugin call.

LANGUAGE: java
CODE:
JSObject ret = new JSObject();
ret.put("added", true);
JSObject info = new JSObject();
info.put("id", "unique-id-1234");
ret.put("info", info);
call.resolve(ret);

// To reject a call
call.reject(exception.getLocalizedMessage(), exception);

----------------------------------------

TITLE: Creating a Google Map Instance in HTML
DESCRIPTION: HTML and CSS for embedding a Google Map component in a web page.

LANGUAGE: html
CODE:
<capacitor-google-map id="map"></capacitor-google-map>

<style>
capacitor-google-map {
  display: inline-block;
  width: 275px;
  height: 400px;
}
</style>

----------------------------------------

TITLE: Installing @capacitor/device Plugin
DESCRIPTION: Commands to install the @capacitor/device plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/device
npx cap sync

----------------------------------------

TITLE: Verifying Xcode Command Line Tools Installation
DESCRIPTION: Checks the installation path of Xcode Command Line Tools to confirm successful installation.

LANGUAGE: bash
CODE:
xcode-select -p
# /Applications/Xcode.app/Contents/Developer

----------------------------------------

TITLE: Adding Intent Filter for Android Deep Linking
DESCRIPTION: This XML snippet demonstrates how to add an intent filter to the AndroidManifest.xml file for Android app links. It specifies the actions, categories, and data scheme for deep linking.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="https" android:host="beerswift.app" />
</intent-filter>

----------------------------------------

TITLE: Installing Capacitor Plugin Dependencies for Ionic
DESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework for optimal user experience.

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Implementing Capacitor CLI Hook Scripts in package.json
DESCRIPTION: Example configuration showing how to implement CLI hooks in package.json for Capacitor commands. The hooks demonstrate logging the command name and platform using the $CAPACITOR_PLATFORM_NAME environment variable.

LANGUAGE: json
CODE:
{
  "scripts": {
    "capacitor:copy:before": "echo copy before $CAPACITOR_PLATFORM_NAME",
    "capacitor:copy:after": "echo copy after $CAPACITOR_PLATFORM_NAME",
    "capacitor:update:before": "echo update before $CAPACITOR_PLATFORM_NAME",
    "capacitor:update:after": "echo update after $CAPACITOR_PLATFORM_NAME",
    "capacitor:sync:before": "echo sync before $CAPACITOR_PLATFORM_NAME",
    "capacitor:sync:after": "echo sync after $CAPACITOR_PLATFORM_NAME"
  }
}

----------------------------------------

TITLE: iOS AppDelegate Configuration
DESCRIPTION: Required modifications to AppDelegate.swift for implementing screen orientation support on iOS.

LANGUAGE: diff
CODE:
import UIKit
+ import CapacitorCommunityScreenOrientation

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -\> UIInterfaceOrientationMask {
+     return ScreenOrientationPlugin.supportedOrientations
+  }
}

----------------------------------------

TITLE: Building Plugin Command
DESCRIPTION: Command to compile the plugin code.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Building Web Application
DESCRIPTION: Command to build the web project before adding native platforms

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Installing Dialog Plugin with npm
DESCRIPTION: Commands to install the @capacitor/dialog package and sync the native project.

LANGUAGE: bash
CODE:
npm install @capacitor/dialog
npx cap sync

----------------------------------------

TITLE: Push Notifications Registration Method
DESCRIPTION: TypeScript method for registering the app to receive push notifications without prompting for user permissions.

LANGUAGE: typescript
CODE:
register() => Promise<void>

----------------------------------------

TITLE: Installing Capacitor Plugin Dependencies for Ionic
DESCRIPTION: Command to install essential Capacitor plugins used by Ionic Framework for optimal user experience.

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Defining Permission Status Interface
DESCRIPTION: TypeScript interface definition for plugin permission status with permission state mapping.

LANGUAGE: typescript
CODE:
import type { PermissionState } from '@capacitor/core';

export interface PermissionStatus {
  location: PermissionState;
}

----------------------------------------

TITLE: Angular Integration Example
DESCRIPTION: Complete example of Google Maps integration in an Angular component

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';

@Component({
  template: `
    <capacitor-google-maps #map></capacitor-google-maps>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-maps {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Installing Motion Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/motion plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/motion
npx cap sync

----------------------------------------

TITLE: Configuring CapacitorHttp Plugin in TypeScript
DESCRIPTION: Example configuration for enabling fetch/XMLHttpRequest patching in capacitor.config.ts

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorHttp: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Installing Cordova Plugin in Capacitor
DESCRIPTION: Commands to install a Cordova plugin and sync it with the native project. Also shows optional installation of TypeScript wrapper if available.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name
npx cap sync

LANGUAGE: bash
CODE:
npm install @awesome-cordova-plugins/plugin-name

----------------------------------------

TITLE: Installing Motion Capacitor Plugin
DESCRIPTION: Commands to install the latest version of the Motion Capacitor Plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/motion@latest-5
npx cap sync

----------------------------------------

TITLE: Adding Native Platform with Capacitor CLI
DESCRIPTION: This command adds a native platform project (Android or iOS) to your Capacitor app. It requires specifying the desired platform as an argument.

LANGUAGE: bash
CODE:
npx cap add <platform>

----------------------------------------

TITLE: Package.json Plugin Reference
DESCRIPTION: Shows how the local plugin appears in package.json dependencies.

LANGUAGE: json
CODE:
"echo": "file:../path/to/echo",

----------------------------------------

TITLE: CocoaPods Installation Commands for Apple Silicon
DESCRIPTION: Terminal commands to resolve CocoaPods installation issues on Apple Silicon Macs using Rosetta architecture simulation

LANGUAGE: bash
CODE:
$ sudo arch -x86_64 gem install ffi
$ arch -x86_64 pod install

----------------------------------------

TITLE: Status Bar Info Retrieval Method
DESCRIPTION: Method signature for getting information about the current state of the status bar.

LANGUAGE: typescript
CODE:
getInfo() => Promise<StatusBarInfoResult>

----------------------------------------

TITLE: Installing Capacitor Admob Plugin
DESCRIPTION: Commands to install the Capacitor Community Admob plugin and update Capacitor to apply the changes. This enables advertisement functionality in Capacitor applications.

LANGUAGE: shell
CODE:
npm install @capacitor-community/admob
npx cap update

----------------------------------------

TITLE: Installing Capacitor Community Admob Plugin
DESCRIPTION: Commands to install the Capacitor Community Admob plugin and update Capacitor. This plugin allows developers to integrate Google Admob advertisements into their Capacitor applications.

LANGUAGE: shell
CODE:
npm install @capacitor-community/admob
npx cap update

----------------------------------------

TITLE: Running Ionic Live Reload
DESCRIPTION: Commands to start Live Reload using Ionic CLI for Android and iOS platforms with external network access

LANGUAGE: bash
CODE:
ionic cap run android -l --external
ionic cap run ios -l --external

----------------------------------------

TITLE: Getting Device ID in TypeScript
DESCRIPTION: Example of using the Device.getId() method to retrieve a unique identifier for the device.

LANGUAGE: typescript
CODE:
getId() => Promise<DeviceId>

----------------------------------------

TITLE: Including Capacitor Runtime in HTML
DESCRIPTION: Demonstrates how to include the Capacitor runtime script (capacitor.js) in the HTML file before other JavaScript files for proper initialization.

LANGUAGE: html
CODE:
<script src="capacitor.js"></script>
<script src="your/app.js"></script>

----------------------------------------

TITLE: Updating Android Gradle Variables
DESCRIPTION: Updates to the Android Gradle variables for Capacitor 3 compatibility.

LANGUAGE: diff
CODE:
 ext {
     minSdkVersion = 21
-    compileSdkVersion = 29
-    targetSdkVersion = 29
+    compileSdkVersion = 30
+    targetSdkVersion = 30
+    androidxActivityVersion = '1.2.0'
-    androidxAppCompatVersion = '1.1.0'
+    androidxAppCompatVersion = '1.2.0'
+    androidxCoordinatorLayoutVersion = '1.1.0'
-    androidxCoreVersion =  '1.2.0'
-    androidxMaterialVersion =  '1.1.0-rc02'
-    androidxBrowserVersion =  '1.2.0'
-    androidxLocalbroadcastmanagerVersion =  '1.0.0'
-    androidxExifInterfaceVersion = '1.2.0'
-    firebaseMessagingVersion =  '20.1.2'
-    playServicesLocationVersion =  '17.0.0'
+    androidxCoreVersion = '1.3.2'
+    androidxFragmentVersion = '1.3.0'
-    junitVersion =  '4.12'
-    androidxJunitVersion =  '1.1.1'
-    androidxEspressoCoreVersion =  '3.2.0'
+    junitVersion = '4.13.1'
+    androidxJunitVersion = '1.1.2'
+    androidxEspressoCoreVersion = '3.3.0'
     cordovaAndroidVersion = '7.0.0'
 }

----------------------------------------

TITLE: Installing Background Runner Capacitor Plugin
DESCRIPTION: Commands to install the Background Runner plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/background-runner
npx cap sync

----------------------------------------

TITLE: Installing Ionic Native Plugins in Capacitor Project
DESCRIPTION: Commands to install an Ionic Native wrapper, its corresponding Cordova plugin, and sync the Capacitor project. This process sets up TypeScript wrappers for easier development with Cordova plugins.

LANGUAGE: bash
CODE:
npm install @ionic-native/javascript-package-name
npm install cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: Installing @capacitor/camera Plugin
DESCRIPTION: Commands to install the @capacitor/camera plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/camera
npx cap sync

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on Mac
DESCRIPTION: This code snippet demonstrates how to set the JAVA_HOME environment variable in the .zshrc or .bashrc file on Mac to resolve Java Runtime location issues.

LANGUAGE: bash
CODE:
export JAVA_HOME="/Applications/Android Studio.app/Contents/jbr/Contents/Home"

----------------------------------------

TITLE: Modern Plugin Import Syntax
DESCRIPTION: Example showing the new way to import Capacitor plugins directly

LANGUAGE: typescript
CODE:
// OLD
import { Plugins } from '@capacitor/core';
const { AnyPlugin } = Plugins;

// NEW
import { AnyPlugin } from 'any-plugin';

----------------------------------------

TITLE: Configuring iPad Full Screen Requirement in Info.plist
DESCRIPTION: This XML snippet shows how to set the 'Requires Full Screen' option to 'YES' in the Info.plist file, allowing orientation lock on iPads.

LANGUAGE: xml
CODE:
	<key>UIRequiresFullScreen</key>
	<true/>

----------------------------------------

TITLE: Updating Capacitor Dependencies
DESCRIPTION: Commands to update Capacitor core, platform-specific libraries, and CLI tools

LANGUAGE: bash
CODE:
npm i @capacitor/core @capacitor/ios @capacitor/android
npm i -D @capacitor/cli

----------------------------------------

TITLE: Updating FileProvider Paths
DESCRIPTION: Diff showing how to update the file_paths.xml file to include the cache path for image editing.

LANGUAGE: diff
CODE:
 <?xml version="1.0" encoding="utf-8"?>
 <paths xmlns:android="http://schemas.android.com/apk/res/android">
     <external-path name="my_images" path="." />
+    <cache-path name="my_cache_images" path="." />
 </paths>

----------------------------------------

TITLE: Creating Photo Albums - TypeScript
DESCRIPTION: Method to create a new album in the user's photo library with a specified name.

LANGUAGE: typescript
CODE:
createAlbum(options: PhotosCreateAlbumOptions) => Promise<void>

----------------------------------------

TITLE: Updating OpenSSL and Ruby for CocoaPods
DESCRIPTION: These commands update OpenSSL and Ruby using Homebrew. This is a solution for the 'Failed to connect to GitHub' error in CocoaPods on Macs with old versions of these dependencies.

LANGUAGE: bash
CODE:
brew install openssl
brew upgrade openssl
brew install ruby
brew link --overwrite ruby

----------------------------------------

TITLE: Adding Native Platforms to Capacitor Project
DESCRIPTION: Command to add native platform support to a Capacitor project.

LANGUAGE: bash
CODE:
ionic capacitor add

----------------------------------------

TITLE: Committing Project Changes in TypeScript
DESCRIPTION: Shows how to commit buffered changes to the filesystem after making modifications.

LANGUAGE: typescript
CODE:
await project.commit();

----------------------------------------

TITLE: Using Echo Plugin in TypeScript
DESCRIPTION: Demonstrates how to use the Echo plugin to send and receive data between JavaScript and native code.

LANGUAGE: typescript
CODE:
import Echo from '../path/to/echo-plugin';

const { value } = await Echo.echo({ value: 'Hello World!' });
console.log('Response from native:', value);

----------------------------------------

TITLE: Configuring Capacitor Web Runtime
DESCRIPTION: JSON configuration to enable bundled web runtime in Capacitor config file.

LANGUAGE: json
CODE:
"bundledWebRuntime": true

----------------------------------------

TITLE: Configuring iPad Full Screen Requirement in Info.plist
DESCRIPTION: This XML snippet shows how to set the 'Requires Full Screen' option to 'YES' in the Info.plist file, allowing orientation lock on iPads.

LANGUAGE: xml
CODE:
	<key>UIRequiresFullScreen</key>
	<true/>

----------------------------------------

TITLE: Installing Action Sheet Plugin with npm
DESCRIPTION: Commands to install the @capacitor/action-sheet plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/action-sheet
npx cap sync

----------------------------------------

TITLE: Configuring Android Manifest for Geolocation
DESCRIPTION: XML configuration for Android manifest to enable geolocation permissions.

LANGUAGE: xml
CODE:
<!-- Geolocation API -->
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.location.gps" />

----------------------------------------

TITLE: Verifying Plugin Code
DESCRIPTION: Command to verify the ported plugin code and ensure there are no issues before publishing.

LANGUAGE: bash
CODE:
npm run verify

----------------------------------------

TITLE: Installing Cordova Plugin in Capacitor
DESCRIPTION: Commands to install a Cordova plugin and sync it with the native project. This is followed by any required native project configuration.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: Installing Splash Screen Plugin
DESCRIPTION: Commands to install the Capacitor Splash Screen plugin and sync the native projects.

LANGUAGE: bash
CODE:
npm install @capacitor/splash-screen
npx cap sync

----------------------------------------

TITLE: Implementing Web Plugin Functionality
DESCRIPTION: Demonstrates implementation of the plugin functionality for web platform in TypeScript.

LANGUAGE: diff
CODE:
 import type {
   EchoPlugin,
+  OpenMapOptions,
 } from './definitions';

 export class EchoWeb extends WebPlugin implements EchoPlugin {
   // other methods

+  async openMap(location: OpenMapOptions): Promise<void> {
+    // logic here
+  }
 }

----------------------------------------

TITLE: Creating New Ionic Project with Capacitor
DESCRIPTION: Command to create a new Ionic project with Capacitor installed by default.

LANGUAGE: bash
CODE:
ionic start

----------------------------------------

TITLE: Accessing Individual Capacitor Plugin
DESCRIPTION: Demonstrates how to extract a specific plugin from the Plugins registry for use in the application.

LANGUAGE: typescript
CODE:
const { Browser } = Plugins;

----------------------------------------

TITLE: Updating Android Manifest for Config Changes
DESCRIPTION: Diff showing how to update the AndroidManifest.xml file to handle configuration changes and avoid app restarts.

LANGUAGE: diff
CODE:
         <activity
-            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale"
+            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode"
             android:name="com.example.app"
             android:label="@string/title_activity_main"
             android:theme="@style/AppTheme.NoActionBarLaunch"
             android:launchMode="singleTask">

----------------------------------------

TITLE: Generating and copying resource images for iOS and Android
DESCRIPTION: Commands to generate all required images for splash screens and icons, and then copy them into the native iOS and Android projects. The --skip-config flag is used to skip modifying config files, and --copy ensures the generated files are copied to the appropriate locations.

LANGUAGE: bash
CODE:
$ cordova-res ios --skip-config --copy
$ cordova-res android --skip-config --copy

----------------------------------------

TITLE: Enabling Capacitor in Existing Ionic Project
DESCRIPTION: Command to enable Capacitor integration in an existing Ionic project using the Ionic CLI.

LANGUAGE: bash
CODE:
ionic integrations enable capacitor

----------------------------------------

TITLE: Installing Plugin via NPM
DESCRIPTION: Commands for installing the published plugin in a Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor-community/screen-orientation
npx cap sync

----------------------------------------

TITLE: Configuring Capacitor Http Plugin in TypeScript
DESCRIPTION: Example configuration for enabling the Capacitor Http Plugin in the capacitor.config.ts file. This configuration enables the patching of fetch and XMLHttpRequest to use native libraries.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorHttp: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: iOS URL Scheme Configuration
DESCRIPTION: XML configuration for Info.plist to enable custom URL schemes in iOS.

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>com.getcapacitor.capacitor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>mycustomscheme</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Running Capacitor Sync Command
DESCRIPTION: Executes the sync command which runs copy then update operations. Optionally accepts a platform parameter (android/ios) and supports deployment and inline debugging options.

LANGUAGE: bash
CODE:
npx cap sync [options] [<platform>]

----------------------------------------

TITLE: Installing Filesystem Capacitor Plugin
DESCRIPTION: Commands to install the Filesystem plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/filesystem
npx cap sync

----------------------------------------

TITLE: Creating a New Ionic Project with Capacitor
DESCRIPTION: Command to create a new Ionic project with Capacitor pre-installed using the Ionic CLI.

LANGUAGE: bash
CODE:
ionic start

----------------------------------------

TITLE: Android Style Configuration
DESCRIPTION: XML configuration for Android splash screen styling without the Android 12 compatibility library.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Creating Common Variables for Android Gradle
DESCRIPTION: This snippet shows the content of a variables.gradle file that defines common variables for the Android project, including SDK versions and dependency versions.

LANGUAGE: groovy
CODE:
ext {
  minSdkVersion = 21
  compileSdkVersion = 29
  targetSdkVersion = 29
  androidxAppCompatVersion = '1.1.0'
  androidxCoreVersion =  '1.2.0'
  androidxMaterialVersion =  '1.1.0-rc02'
  androidxBrowserVersion =  '2.0.0'
  androidxLocalbroadcastmanagerVersion =  '1.0.0'
  firebaseMessagingVersion =  '20.1.2'
  playServicesLocationVersion =  '17.0.0'
  junitVersion =  '4.12'
  androidxJunitVersion =  '1.1.1'
  androidxEspressoCoreVersion =  '3.2.0'
  cordovaAndroidVersion =  '7.0.0'
}

----------------------------------------

TITLE: Installing Capacitor React Hooks
DESCRIPTION: Command to install the Capacitor community React hooks package via npm.

LANGUAGE: shell
CODE:
npm install @capacitor-community/react-hooks

----------------------------------------

TITLE: Setting Android Permissions in AndroidManifest.xml
DESCRIPTION: Example of adding network permission to Android manifest file.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.getcapacitor.myapp">
    <activity>
      <!-- other stuff -->
    </activity>

    <!-- More stuff -->

    <!-- Your permissions -->

    <!-- Network API -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
</manifest>

----------------------------------------

TITLE: Android Style Configuration
DESCRIPTION: XML configuration for Android splash screen appearance in styles.xml.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/NAME</item>
</style>

----------------------------------------

TITLE: Removing Browser Event Listeners
DESCRIPTION: Example of removing all browser event listeners.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
InAppBrowser.removeAllListeners();

----------------------------------------

TITLE: Updating Android Manifest for Navigation
DESCRIPTION: Add 'navigation' to configChanges in AndroidManifest.xml to prevent app restarts on some devices when using bluetooth keyboards.

LANGUAGE: diff
CODE:
- android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode"
+ android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode|navigation"

----------------------------------------

TITLE: Installing Splash Screen Plugin
DESCRIPTION: Commands to install the Capacitor Splash Screen plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/splash-screen
npx cap sync

----------------------------------------

TITLE: Implementing Value Return Methods in Android
DESCRIPTION: Java implementation of a value return method in Android using the default @PluginMethod annotation.

LANGUAGE: java
CODE:
@PluginMethod()
public void method2(PluginCall call) {
}

----------------------------------------

TITLE: Importing Capacitor Core Module in TypeScript
DESCRIPTION: Shows how to import the main Capacitor module in a TypeScript project with module support.

LANGUAGE: typescript
CODE:
import { Capacitor } from '@capacitor/core';

----------------------------------------

TITLE: Converting File Paths for WebView Compatibility
DESCRIPTION: Demonstrates how to convert device file paths to WebView-compatible URLs using convertFileSrc(). This is necessary when working with file paths across different protocols.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const rawPhotoUri = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),

----------------------------------------

TITLE: Configuring Splash Screen in Capacitor TypeScript
DESCRIPTION: TypeScript configuration for the SplashScreen plugin in the capacitor.config.ts file.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/splash-screen" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    SplashScreen: {
      launchShowDuration: 3000,
      launchAutoHide: true,
      launchFadeOutDuration: 3000,
      backgroundColor: "#ffffffff",
      androidSplashResourceName: "splash",
      androidScaleType: "CENTER_CROP",
      showSpinner: true,
      androidSpinnerStyle: "large",
      iosSpinnerStyle: "small",
      spinnerColor: "#999999",
      splashFullScreen: true,
      splashImmersive: true,
      layoutName: "launch_screen",
      useDialog: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Browser Close Method Type Definition
DESCRIPTION: Type definition for the close method that closes an open browser. Only works on iOS and Web environments.

LANGUAGE: typescript
CODE:
close() => Promise<void>

----------------------------------------

TITLE: Installing InAppBrowser Capacitor Plugin
DESCRIPTION: Commands to install the InAppBrowser plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/inappbrowser
npx cap sync

----------------------------------------

TITLE: Handling Null Values in Swift for Capacitor Plugin
DESCRIPTION: Illustrates different approaches to handling potential null values in Swift when working with Capacitor plugin calls. It shows both recommended and problematic methods of accessing and type-checking values.

LANGUAGE: swift
CODE:
if let value = call.getString("foo") {
    // GOOD: `value` is nil, so this block won't run
}

if call.options["foo"] != nil {
    // BAD: the key returned a truthy `NSNull` object, so this block will run
}

----------------------------------------

TITLE: Configuring Capacitor Cookies in TypeScript
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.ts

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorCookies: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: iOS Push Notification Setup
DESCRIPTION: Swift implementation for the AppDelegate to handle push notification registration.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
  NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: deviceToken)
}

func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
  NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
}

----------------------------------------

TITLE: Installing Capacitor React Hooks
DESCRIPTION: Command to install the Capacitor community React hooks package via npm

LANGUAGE: shell
CODE:
npm install @capacitor-community/react-hooks

----------------------------------------

TITLE: Updating Android Project Variables in Gradle
DESCRIPTION: This code updates various Android project variables in the variables.gradle file to meet the new minimum requirements for Capacitor 4.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 32
targetSdkVersion = 32
androidxActivityVersion = '1.4.0'
androidxAppCompatVersion = '1.4.2'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.8.0'
androidxFragmentVersion = '1.4.1'
coreSplashScreenVersion = '1.0.0-rc01'
androidxWebkitVersion = '1.4.0'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.3'
androidxEspressoCoreVersion = '3.4.0'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Verifying Plugin Availability in Capacitor
DESCRIPTION: Shows how to use the isPluginAvailable function to check if a specific plugin is available on the current platform, including custom plugins registered in the plugin registry.

LANGUAGE: typescript
CODE:
const isAvailable = Capacitor.isPluginAvailable('Camera');

if (!isAvailable) {
  // Have the user upload a file instead
} else {
  // Otherwise, make the call:
  const image = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
  });
}

----------------------------------------

TITLE: Running Capacitor Sync Command
DESCRIPTION: The sync command runs copy and update operations sequentially. It accepts an optional platform parameter (android or ios) and provides options for deployment and inline source map handling.

LANGUAGE: bash
CODE:
npx cap sync [options] [<platform>]

----------------------------------------

TITLE: Updating Gradle Plugin
DESCRIPTION: Update the Gradle plugin version to 8.7.2 in the build.gradle file for Capacitor 7 compatibility.

LANGUAGE: diff
CODE:
# build.gradle

    dependencies {
-       classpath 'com.android.tools.build:gradle:8.2.1'
+       classpath 'com.android.tools.build:gradle:8.7.2'

----------------------------------------

TITLE: Installing CocoaPods on Apple Silicon Macs using Rosetta
DESCRIPTION: These commands install CocoaPods on Apple Silicon Macs using Rosetta emulation, which is necessary when not using Homebrew.

LANGUAGE: bash
CODE:
sudo arch -x86_64 gem install ffi

----------------------------------------

TITLE: Handling Null Values in Swift for Capacitor Plugin
DESCRIPTION: Illustrates different approaches to handling potential null values in Swift when working with Capacitor plugin calls. It shows both recommended and problematic methods of accessing and type-checking values.

LANGUAGE: swift
CODE:
if let value = call.getString("foo") {
    // GOOD: `value` is nil, so this block won't run
}

if call.options["foo"] != nil {
    // BAD: the key returned a truthy `NSNull` object, so this block will run
}

----------------------------------------

TITLE: Installing Toast Capacitor Plugin
DESCRIPTION: Commands to install the latest version of the @capacitor/toast plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/toast@latest-5
npx cap sync

----------------------------------------

TITLE: Triggering JavaScript Events from Capacitor iOS Plugins
DESCRIPTION: This example demonstrates how to trigger JavaScript events from a Capacitor iOS plugin. It shows various methods to emit events for different targets like window and document.

LANGUAGE: swift
CODE:
self.bridge.triggerJSEvent(eventName: "myCustomEvent", target: "window")

self.bridge.triggerJSEvent(eventName: "myCustomEvent", target: "document", data: "{ 'dataKey': 'dataValue' }")

// Window Events
self.bridge.triggerWindowJSEvent(eventName: "myCustomEvent")

self.bridge.triggerWindowJSEvent(eventName: "myCustomEvent", data: "{ 'dataKey': 'dataValue' }")

// Document events
self.bridge.triggerDocumentJSEvent(eventName: "myCustomEvent")

self.bridge.triggerDocumentJSEvent(eventName: "myCustomEvent", data: "{ 'dataKey': 'dataValue' }")

----------------------------------------

TITLE: Android Theme Configuration
DESCRIPTION: XML configuration for Android splash screen theme styling.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="AppTheme.NoActionBar">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Reading from Clipboard in TypeScript
DESCRIPTION: TypeScript function signature for reading data from the clipboard. It returns a Promise that resolves to a ReadResult object.

LANGUAGE: typescript
CODE:
read() => Promise<ReadResult>

----------------------------------------

TITLE: Closing Browser Instance
DESCRIPTION: Example of closing an active browser instance.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
await InAppBrowser.close();

----------------------------------------

TITLE: Android Manifest Permissions for Geolocation
DESCRIPTION: Required permission declarations in AndroidManifest.xml for location access

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.location.gps" />

----------------------------------------

TITLE: Running Capacitor App on Android Device
DESCRIPTION: This command runs a debug build of the Capacitor app on an Android device.

LANGUAGE: bash
CODE:
npx cap run android

----------------------------------------

TITLE: Implementing Value Return Method in Java for Android
DESCRIPTION: This snippet shows how to annotate a value return method in Java for an Android Capacitor plugin. The return type is optional as it's the default behavior.

LANGUAGE: java
CODE:
@PluginMethod()
public void method2(PluginCall call) {
}

----------------------------------------

TITLE: Removing All Network Listeners in TypeScript
DESCRIPTION: Method to remove all listeners for the Network plugin, including network status changes.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Using Filesystem Hooks in React Component
DESCRIPTION: Example showing how to import and use the filesystem hooks in a React function component. Demonstrates reading a file using the readFile hook within a useEffect.

LANGUAGE: typescript
CODE:
import { useFilesystem, base64FromPath, availableFeatures } from '@capacitor-community/react-hooks/filesystem';

const MyComponent = () => (
  const { readFile } = useFilesystem();

  useEffect(() => {
    const readMyFile = async () => {
      const file = await readFile({
        path: filepath,
        directory: FilesystemDirectory.Data
      });
      // ...
    }

    readMyFile();
  }, [ readFile ]);

----------------------------------------

TITLE: Installing Toast Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/toast plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/toast
npx cap sync

----------------------------------------

TITLE: Removing All Network Listeners in TypeScript
DESCRIPTION: Method to remove all listeners for the Network plugin, including network status changes.

LANGUAGE: typescript
CODE:
removeAllListeners() => Promise<void>

----------------------------------------

TITLE: Updating iOS Deployment Target
DESCRIPTION: Updates the minimum iOS deployment target in podspec and Package.swift files

LANGUAGE: diff
CODE:
-  s.ios.deployment_target = '13.0'
+  s.ios.deployment_target = '14.0'

-    platforms: [.iOS(.v13)],
+    platforms: [.iOS(.v14)],

----------------------------------------

TITLE: isEnabled Method Definition
DESCRIPTION: TypeScript interface showing the isEnabled method which checks if a screen reader is active

LANGUAGE: typescript
CODE:
isEnabled() => Promise<{ value: boolean; }>

----------------------------------------

TITLE: isEnabled Method Definition
DESCRIPTION: TypeScript interface showing the isEnabled method which checks if a screen reader is active

LANGUAGE: typescript
CODE:
isEnabled() => Promise<{ value: boolean; }>

----------------------------------------

TITLE: Handling Arrays with Null Values in Swift for Capacitor
DESCRIPTION: Demonstrates how to handle arrays that may contain null values in Swift when working with Capacitor plugin calls. It shows different approaches and their implications.

LANGUAGE: swift
CODE:
if let values = call.getArray("bar") {
    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually
}
if let values = call.getArray("bar", Int?) {
    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run
}

LANGUAGE: swift
CODE:
if let values = call.getArray("bar").capacitor.replacingNullValues() as? [Int?] {
    // GOOD: `values` is now cast to `Int?` with `nil` at index 2
}

----------------------------------------

TITLE: Registering ScreenOrientation Plugin with Capacitor in Objective-C
DESCRIPTION: This snippet registers the ScreenOrientation plugin and its methods with Capacitor using Objective-C macros.

LANGUAGE: objc
CODE:
#import <Foundation/Foundation.h>
#import <Capacitor/Capacitor.h>

CAP_PLUGIN(ScreenOrientationPlugin, "ScreenOrientation",
  CAP_PLUGIN_METHOD(orientation, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(lock, CAPPluginReturnPromise);
  CAP_PLUGIN_METHOD(unlock, CAPPluginReturnPromise);
)

----------------------------------------

TITLE: Android Manifest Permissions for Geolocation
DESCRIPTION: Required permission declarations in AndroidManifest.xml for location access

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.location.gps" />

----------------------------------------

TITLE: Configuring Android Permissions for Google Maps
DESCRIPTION: XML snippets for adding Google Maps API key and location permissions to AndroidManifest.xml.

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>

<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

----------------------------------------

TITLE: iOS Privacy Manifest Configuration
DESCRIPTION: XML configuration for iOS privacy manifest specifying disk space access requirements.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryDiskSpace</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>85F4.1</string>
        </array>
      </dict>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: This command opens the iOS Capacitor .xcworkspace project in Xcode for more control over the native project.

LANGUAGE: bash
CODE:
npx cap open ios

----------------------------------------

TITLE: Removing Unused touchesBegan Method in iOS
DESCRIPTION: Remove the unused touchesBegan method from the AppDelegate.swift file in iOS.

LANGUAGE: diff
CODE:
-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
-  super.touchesBegan(touches, with: event)
-
-  let statusBarRect = UIApplication.shared.statusBarFrame
-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }
-
-  if statusBarRect.contains(touchPoint) {
-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)
-  }
-}

----------------------------------------

TITLE: Running Capacitor iOS App via Command-Line
DESCRIPTION: Command to run the Capacitor iOS app on a device or simulator using the Capacitor CLI. This will prompt for target selection.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Removing Unused touchesBegan Method in iOS
DESCRIPTION: Remove the unused touchesBegan method from the AppDelegate.swift file in iOS.

LANGUAGE: diff
CODE:
-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
-  super.touchesBegan(touches, with: event)
-
-  let statusBarRect = UIApplication.shared.statusBarFrame
-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }
-
-  if statusBarRect.contains(touchPoint) {
-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)
-  }
-}

----------------------------------------

TITLE: Removing Unused touchesBegan Method in iOS
DESCRIPTION: Remove the unused touchesBegan method from the AppDelegate.swift file in iOS.

LANGUAGE: diff
CODE:
-override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
-  super.touchesBegan(touches, with: event)
-
-  let statusBarRect = UIApplication.shared.statusBarFrame
-  guard let touchPoint = event?.allTouches?.first?.location(in: self.window) else { return }
-
-  if statusBarRect.contains(touchPoint) {
-      NotificationCenter.default.post(name: .capacitorStatusBarTapped, object: nil)
-  }
-}

----------------------------------------

TITLE: Installing Screen Reader Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/screen-reader plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-reader@latest-5
npx cap sync

----------------------------------------

TITLE: Installing Screen Orientation Plugin for Capacitor
DESCRIPTION: Commands to install the @capacitor/screen-orientation plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-orientation@latest-5
npx cap sync

----------------------------------------

TITLE: Configuring Local Notifications Plugin in TypeScript
DESCRIPTION: Configure the Local Notifications plugin options using TypeScript in the Capacitor config file.

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    LocalNotifications: {
      smallIcon: "ic_stat_icon_config_sample",
      iconColor: "#488AFF",
      sound: "beep.wav",
    },
  },
};

export default config;

----------------------------------------

TITLE: Example Background Runner JavaScript File
DESCRIPTION: JavaScript code demonstrating event listeners for custom events and notifications in a Background Runner file.

LANGUAGE: javascript
CODE:
addEventListener('myCustomEvent', (resolve, reject, args) => {
  console.log('do something to update the system here');
  resolve();
});

addEventListener('myCustomEventWithReturnData', (resolve, reject, args) => {
  try {
    console.log('accepted this data: ' + JSON.stringify(args.user));

    const updatedUser = args.user;
    updatedUser.firstName = updatedUser.firstName + ' HELLO';
    updatedUser.lastName = updatedUser.lastName + ' WORLD';

    resolve(updatedUser);
  } catch (err) {
    reject(err);
  }
});

addEventListener('remoteNotification', (resolve, reject, args) => {
  try {
    console.log('received silent push notification');

    CapacitorNotifications.schedule([
      {
        id: 100,
        title: 'Enterprise Background Runner',
        body: 'Received silent push notification',
      },
    ]);

    resolve();
  } catch (err) {
    reject();
  }
});

----------------------------------------

TITLE: Updating Capacitor SPM Dependency
DESCRIPTION: Updates the Swift Package Manager dependency configuration for Capacitor

LANGUAGE: diff
CODE:
    dependencies: [
-        .package(url: "https://github.com/ionic-team/capacitor-swift-pm.git", branch: "main")
+        .package(url: "https://github.com/ionic-team/capacitor-swift-pm.git", from: "7.0.0")
    ],

----------------------------------------

TITLE: Implementing Push Notifications in TypeScript
DESCRIPTION: Complete example showing how to implement push notification listeners and handle registration.

LANGUAGE: typescript
CODE:
import { PushNotifications } from '@capacitor/push-notifications';

const addListeners = async () => {
  await PushNotifications.addListener('registration', token => {
    console.info('Registration token: ', token.value);
  });

  await PushNotifications.addListener('registrationError', err => {
    console.error('Registration error: ', err.error);
  });

  await PushNotifications.addListener('pushNotificationReceived', notification => {
    console.log('Push notification received: ', notification);
  });

  await PushNotifications.addListener('pushNotificationActionPerformed', notification => {
    console.log('Push notification action performed', notification.actionId, notification.inputValue);
  });
}

const registerNotifications = async () => {
  let permStatus = await PushNotifications.checkPermissions();

  if (permStatus.receive === 'prompt') {
    permStatus = await PushNotifications.requestPermissions();
  }

  if (permStatus.receive !== 'granted') {
    throw new Error('User denied permissions!');
  }

  await PushNotifications.register();
}

const getDeliveredNotifications = async () => {
  const notificationList = await PushNotifications.getDeliveredNotifications();
  console.log('delivered notifications', notificationList);
}

----------------------------------------

TITLE: Manually Opening iOS Project in Xcode
DESCRIPTION: Manually opens the iOS project workspace in Xcode using the 'open' command. This is an alternative to using the Capacitor CLI.

LANGUAGE: bash
CODE:
open ios/App/App.xcworkspace

----------------------------------------

TITLE: Installing Capacitor Core Dependencies
DESCRIPTION: Commands to install Capacitor's core runtime and CLI dependencies in an existing web application

LANGUAGE: bash
CODE:
npm i @capacitor/core
npm i -D @capacitor/cli

----------------------------------------

TITLE: Configuring Android Package Visibility for AppLauncher
DESCRIPTION: XML configuration to add app package names for querying on Android 11 and newer in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<queries>
  <package android:name="com.getcapacitor.myapp" />
</queries>

----------------------------------------

TITLE: Removing Manual Plugin Initialization in Java
DESCRIPTION: Remove the onCreate method from MainActivity.java as manual plugin initialization is no longer required.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Initializes the Bridge
-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{
-            // Additional plugins you've installed go here
-            add(Plugin1.class);
-            add(Plugin2.class);
-        }});
-    }
 }

----------------------------------------

TITLE: Capacitor Device API Usage Example
DESCRIPTION: TypeScript example showing how to get device information and battery status using the Device API.

LANGUAGE: typescript
CODE:
import { Device } from '@capacitor/device';

const logDeviceInfo = async () => {
  const info = await Device.getInfo();

  console.log(info);
};

const logBatteryInfo = async () => {
  const info = await Device.getBatteryInfo();

  console.log(info);
};

----------------------------------------

TITLE: Installing Platform-Specific Dependencies
DESCRIPTION: Commands to install Android and iOS platform dependencies

LANGUAGE: bash
CODE:
npm i @capacitor/android @capacitor/ios

----------------------------------------

TITLE: Configuring Capacitor Cookies in JSON
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorCookies": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Handling Watch Commands in Background Runner JavaScript
DESCRIPTION: Example of how to handle commands from the watch in a background runner using the Capacitor Background Runner Plugin.

LANGUAGE: javascript
CODE:
addEventListener("WatchConnectivity_didReceiveUserInfo", (args) => {
  console.log(args.message.jsCommand);
})

----------------------------------------

TITLE: Installing Capacitor App Plugin
DESCRIPTION: Commands to install the @capacitor/app plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/app
npx cap sync

----------------------------------------

TITLE: Installing @capacitor/network Plugin
DESCRIPTION: Command-line instructions for installing the @capacitor/network plugin and syncing the project.

LANGUAGE: bash
CODE:
npm install @capacitor/network
npx cap sync

----------------------------------------

TITLE: Adding Post-Install Hook for iOS Deployment Target in Ruby
DESCRIPTION: Add a post-install hook to assert the correct deployment target for iOS pods.

LANGUAGE: ruby
CODE:
post_install do |installer|
  assertDeploymentTarget(installer)
end

----------------------------------------

TITLE: Action Sheet API Method Definition
DESCRIPTION: TypeScript definition for the showActions method that displays the action sheet

LANGUAGE: typescript
CODE:
showActions(options: ShowActionsOptions) => Promise<ShowActionsResult>

----------------------------------------

TITLE: Installing Capacitor 5 CLI
DESCRIPTION: Commands to install the latest Capacitor 5 CLI and run the migration assistant.

LANGUAGE: sh
CODE:
npm i -D @capacitor/cli@latest-5

LANGUAGE: sh
CODE:
npx cap migrate

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: Commands for installing the published plugin package and syncing Capacitor project.

LANGUAGE: bash
CODE:
npm install @capacitor-community/screen-orientation
npx cap sync

----------------------------------------

TITLE: iOS Screen Orientation Lock Configuration
DESCRIPTION: Swift code to enable screen orientation locking for all View Controllers in an iOS app by modifying the AppDelegate.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
  return UIInterfaceOrientationMask(rawValue: (self.window!.rootViewController as! CAPBridgeViewController).supportedInterfaceOrientations.rawValue)
}

----------------------------------------

TITLE: Installing Essential Capacitor Plugins
DESCRIPTION: Command to install required Capacitor plugins for Ionic Framework including app, haptics, keyboard, and status-bar functionality

LANGUAGE: bash
CODE:
npm i @capacitor/app @capacitor/haptics @capacitor/keyboard @capacitor/status-bar

----------------------------------------

TITLE: Configuring Firebase in iOS AppDelegate
DESCRIPTION: Swift code to configure Firebase and handle push notification registration in the iOS AppDelegate.

LANGUAGE: swift
CODE:
import UIKit
import Capacitor
import FirebaseCore
import FirebaseMessaging

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

  var window: UIWindow?


  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    // Override point for customization after application launch.
    FirebaseApp.configure()
    return true
  }

  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Messaging.messaging().apnsToken = deviceToken
    Messaging.messaging().token(completion: { (token, error) in
      if let error = error {
          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
      } else if let token = token {
          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)
      }
    })
  }

  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
  }
}

----------------------------------------

TITLE: Environment-Specific Build Commands
DESCRIPTION: Commands for building and running Capacitor apps with different environment configurations

LANGUAGE: bash
CODE:
NODE_ENV=qa npx cap copy
NODE_ENV=qa npx cap run ios

npx cap copy
npx cap run ios

----------------------------------------

TITLE: Using Custom Plugin in TypeScript
DESCRIPTION: This TypeScript code shows how to use the custom 'Echo' plugin in a Capacitor project. It imports the plugin, calls the echo method, and logs the response.

LANGUAGE: typescript
CODE:
import Echo from '../path/to/echo-plugin';

const { value } = await Echo.echo({ value: 'Hello World!' });
console.log('Response from native:', value);

----------------------------------------

TITLE: Initializing New Capacitor Project via CLI
DESCRIPTION: Command to initialize a new Capacitor project with required app name and app ID parameters. The command supports an optional --web-dir parameter to specify an existing web application directory.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: URL Opening Implementation
DESCRIPTION: Function to open an app using a specified URL, returns a promise indicating if the operation was completed.

LANGUAGE: typescript
CODE:
openUrl(options: { url: string; }) => Promise<{ completed: boolean; }>

----------------------------------------

TITLE: Configuring Capacitor Cookies Plugin in JSON
DESCRIPTION: Example configuration for enabling native cookie support in capacitor.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": {
    "CapacitorCookies": {
      "enabled": true
    }
  }
}

----------------------------------------

TITLE: Presenting Native Screens with Intents in Capacitor Android
DESCRIPTION: This snippet demonstrates how to use Android Intents to present native screens and handle results using the @ActivityCallback annotation.

LANGUAGE: java
CODE:
@CapacitorPlugin()
class ImagePicker extends Plugin {

  @PluginMethod()
  public void pickImage(PluginCall call) {
    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");

    startActivityForResult(call, intent, "pickImageResult");
  }

  @ActivityCallback
  private void pickImageResult(PluginCall call, ActivityResult result) {
    if (call == null) {
      return;
    }

    // Do something with the result data
  }
}

----------------------------------------

TITLE: Installing Capacitor Device Plugin
DESCRIPTION: Commands to install the @capacitor/device plugin and sync the native projects.

LANGUAGE: bash
CODE:
npm install @capacitor/device
npx cap sync

----------------------------------------

TITLE: Including PWA Elements via Script Tags
DESCRIPTION: Alternative method to include PWA Elements through script tags in HTML. Note: This method will not work for offline scenarios.

LANGUAGE: html
CODE:
<script
  type="module"
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js"
></script>
<script
  nomodule
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js"
></script>

----------------------------------------

TITLE: Installing Local Notifications Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/local-notifications plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/local-notifications
npx cap sync

----------------------------------------

TITLE: Disabling Jetifier in gradle.properties
DESCRIPTION: Remove the Jetifier configuration from the gradle.properties file if not needed.

LANGUAGE: diff
CODE:
# gradle.properties

# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
- # Automatically convert third-party libraries to use AndroidX
- android.enableJetifier=true

----------------------------------------

TITLE: Adding Capacitor Platform Support
DESCRIPTION: Commands to add iOS and Android platform support to a Capacitor project

LANGUAGE: bash
CODE:
npx cap add ios
npx cap add android

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: Adds TypeScript type definitions for the Echo plugin interface to provide better type safety and IDE support.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
}

const Echo = registerPlugin<EchoPlugin>('Echo');

export default Echo;

----------------------------------------

TITLE: Installing Ionic CLI Dependencies
DESCRIPTION: Commands for installing the Ionic CLI and native-run utility for cross-platform development

LANGUAGE: bash
CODE:
npm install -g @ionic/cli native-run

----------------------------------------

TITLE: Configuring Keyboard Plugin in JSON
DESCRIPTION: Example of configuring the Keyboard plugin in capacitor.config.json, including resize mode, style, and fullscreen settings.

LANGUAGE: json
CODE:
{
  "plugins": {
    "Keyboard": {
      "resize": "body",
      "style": "dark",
      "resizeOnFullScreen": true
    }
  }
}

----------------------------------------

TITLE: Opening Native IDEs for Capacitor Project
DESCRIPTION: Commands to open the native IDEs (Xcode for iOS and Android Studio for Android) after configuring Live Reload settings.

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: Building Capacitor Project
DESCRIPTION: Initial build and platform addition commands for a Capacitor project

LANGUAGE: bash
CODE:
npm run build

npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Configuring Capacitor Cookies in TypeScript
DESCRIPTION: TypeScript configuration example for enabling the Capacitor Cookies plugin in capacitor.config.ts

LANGUAGE: typescript
CODE:
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    CapacitorCookies: {
      enabled: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: iOS Apple App Site Association File
DESCRIPTION: JSON configuration for the Apple App Site Association file, which is required for iOS Universal Links. It specifies the app ID and allowed paths for deep linking.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "TEAMID.BUNDLEID",
        "paths": ["*"]
      }
    ]
  }
}

----------------------------------------

TITLE: Installing @capacitor/clipboard Plugin
DESCRIPTION: Commands to install the @capacitor/clipboard plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/clipboard
npx cap sync

----------------------------------------

TITLE: Installing Screen Orientation Plugin
DESCRIPTION: Shell commands for installing the Capacitor screen orientation plugin and syncing the native projects.

LANGUAGE: shell
CODE:
npm install @capacitor/screen-orientation@latest-4
npx cap sync

----------------------------------------

TITLE: Installing Google Maps Capacitor Plugin
DESCRIPTION: Commands to install the Google Maps Capacitor plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/google-maps
npx cap sync

----------------------------------------

TITLE: iOS Third Party Cookies Configuration
DESCRIPTION: XML configuration for enabling third-party cookie support on iOS 14+ by adding domain entries to Info.plist file.

LANGUAGE: xml
CODE:
<key>WKAppBoundDomains</key>
<array>
  <string>www.mydomain.com</string>
  <string>api.mydomain.com</string>
  <string>www.myothercooldomain.com</string>
</array>

----------------------------------------

TITLE: Adding Post-Install Hook to iOS Podfile
DESCRIPTION: Add a post-install hook to assert the deployment target in the iOS Podfile.

LANGUAGE: ruby
CODE:
post_install do |installer|
  assertDeploymentTarget(installer)
end

----------------------------------------

TITLE: Keyboard Shortcut for Running App
DESCRIPTION: Keyboard shortcut commands for running the application on Mac (Option + R) and Windows (ALT + R)

LANGUAGE: markdown
CODE:
⌥ + R to run your app (ALT + R on Windows)

----------------------------------------

TITLE: Keyboard Shortcut for Running App
DESCRIPTION: Keyboard shortcut commands for running the application on Mac (Option + R) and Windows (ALT + R)

LANGUAGE: markdown
CODE:
⌥ + R to run your app (ALT + R on Windows)

----------------------------------------

TITLE: Registering Echo Plugin in ViewController
DESCRIPTION: Registers the EchoPlugin instance in the custom ViewController by overriding the capacitorDidLoad method.

LANGUAGE: swift
CODE:
override open func capacitorDidLoad() {
    bridge?.registerPluginInstance(EchoPlugin())
}

----------------------------------------

TITLE: Installing Capacitor Push Notifications Plugin
DESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Keyboard Configuration in TypeScript
DESCRIPTION: TypeScript configuration example with type references and keyboard settings using enums

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/keyboard" />

import { CapacitorConfig } from '@capacitor/cli';
import { KeyboardResize, KeyboardStyle } from '@capacitor/keyboard';

const config: CapacitorConfig = {
  plugins: {
    Keyboard: {
      resize: KeyboardResize.Body,
      style: KeyboardStyle.Dark,
      resizeOnFullScreen: true,
    },
  },
};

export default config;

----------------------------------------

TITLE: Executing Capacitor Update Command in Bash
DESCRIPTION: This command updates the native plugins and dependencies referenced in package.json. It can be run for all platforms or a specific platform (android or ios). An optional --deployment flag can be used for iOS to retain Podfile.lock and use the --deployment option with pod install.

LANGUAGE: bash
CODE:
npx cap update [<platform>]

----------------------------------------

TITLE: Status Bar Configuration in TypeScript
DESCRIPTION: Example configuration for the Status Bar plugin in capacitor.config.ts, demonstrating typed configuration options.

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/status-bar" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  plugins: {
    StatusBar: {
      overlaysWebView: false,
      style: "DARK",
      backgroundColor: "#ffffffff",
    },
  },
};

export default config;

----------------------------------------

TITLE: Updating Capacitor Dependencies
DESCRIPTION: This command updates Capacitor core, iOS, Android, and CLI dependencies to the latest version.

LANGUAGE: bash
CODE:
npm i @capacitor/core @capacitor/ios @capacitor/android
npm i -D @capacitor/cli

----------------------------------------

TITLE: Setting iOS Scheme Configuration
DESCRIPTION: TypeScript configuration for specifying iOS scheme in Capacitor config

LANGUAGE: typescript
CODE:
ios: {
  scheme: 'App QA',
}

----------------------------------------

TITLE: Using Filesystem API in TypeScript
DESCRIPTION: Example TypeScript code demonstrating various Filesystem API operations including writing, reading, and deleting files.

LANGUAGE: typescript
CODE:
import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';

const writeSecretFile = async () => {
  await Filesystem.writeFile({
    path: 'secrets/text.txt',
    data: "This is a test",
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });
};

const readSecretFile = async () => {
  const contents = await Filesystem.readFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
    encoding: Encoding.UTF8,
  });

  console.log('secrets:', contents);
};

const deleteSecretFile = async () => {
  await Filesystem.deleteFile({
    path: 'secrets/text.txt',
    directory: Directory.Documents,
  });
};

const readFilePath = async () => {
  const contents = await Filesystem.readFile({
    path: 'file:///var/mobile/Containers/Data/Application/22A433FD-D82D-4989-8BE6-9FC49DEA20BB/Documents/text.txt'
  });

  console.log('data:', contents);
};

----------------------------------------

TITLE: Vibrate Method Definition
DESCRIPTION: TypeScript method signature for triggering device vibration.

LANGUAGE: typescript
CODE:
vibrate() => void

----------------------------------------

TITLE: Removing Plugin Initialization in Android MainActivity
DESCRIPTION: Remove the manual plugin initialization code from the MainActivity.java file in Android.

LANGUAGE: diff
CODE:
 public class MainActivity extends BridgeActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Initializes the Bridge
-        this.init(savedInstanceState, new ArrayList<Class<? extends Plugin>>() {{
-            // Additional plugins you've installed go here
-            add(Plugin1.class);
-            add(Plugin2.class);
-        }});
-    }
 }

----------------------------------------

TITLE: Verifying CocoaPods Installation for iOS Development
DESCRIPTION: Checks the installed version of CocoaPods to confirm successful installation for use with Capacitor iOS projects.

LANGUAGE: bash
CODE:
pod --version
# 1.12.1

----------------------------------------

TITLE: Watch Position Implementation
DESCRIPTION: Method to set up a watch for location changes with callback functionality.

LANGUAGE: typescript
CODE:
watchPosition(options: PositionOptions, callback: WatchPositionCallback) => Promise<CallbackID>

----------------------------------------

TITLE: Configuring NPM Script for Trapeze
DESCRIPTION: Shows how to set up an NPM script to run the trapeze configuration tool with a YAML config file.

LANGUAGE: json
CODE:
"scripts": {
  "cap-config": "trapeze run config.yaml"
}

----------------------------------------

TITLE: Configuring Push Notification Presentation Options
DESCRIPTION: JSON configuration for specifying how push notifications are displayed when the app is in the foreground.

LANGUAGE: json
CODE:
{
  "plugins": {
    "PushNotifications": {
      "presentationOptions": ["badge", "sound", "alert"]
    }
  }
}

----------------------------------------

TITLE: Updating Gradle Wrapper
DESCRIPTION: Update the Gradle wrapper to version 8.11.1 in the gradle-wrapper.properties file for Capacitor 7 compatibility.

LANGUAGE: diff
CODE:
# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-8.2.1-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: Updating Capacitor Native Plugins via CLI
DESCRIPTION: Command to update Capacitor native plugins and dependencies. Can target specific platforms (Android/iOS) or update all platforms if no platform is specified. Supports a deployment option for iOS pod installation.

LANGUAGE: bash
CODE:
npx cap update [<platform>]

----------------------------------------

TITLE: Including PWA Elements via Script Tags
DESCRIPTION: HTML snippet for including PWA Elements through script tags in the index.html file. This method does not work for offline scenarios.

LANGUAGE: html
CODE:
<script
  type="module"
  src="https://unpkg.com/@ionic/pwa-elements@2/dist/ionicpwaelements/ionicpwaelements.esm.js"
></script>
<script
  nomodule
  src="https://unpkg.com/@ionic/pwa-elements@2/dist/ionicpwaelements/ionicpwaelements.js"
></script>

----------------------------------------

TITLE: Presenting Native Screens in Capacitor Android Plugin
DESCRIPTION: This snippet demonstrates how to present native Android screens using Intents in a Capacitor plugin. It shows both simple Intents without results and Intents with expected results, including handling the activity result.

LANGUAGE: java
CODE:
// Intent without result
Intent intent = new Intent(Intent.ACTION_VIEW);
getActivity().startActivity(intent);

// Intent with result
@NativePlugin(
  requestCodes={MyPlugin.REQUEST_IMAGE_PICK}
)
class ImagePicker extends Plugin {
  protected static final int REQUEST_IMAGE_PICK = 12345;

  @PluginMethod()
  public void pickImage(PluginCall call) {
    saveCall(call);

    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");

    startActivityForResult(call, intent, REQUEST_IMAGE_PICK);
  }

  @Override
  protected void handleOnActivityResult(int requestCode, int resultCode, Intent data) {
    super.handleOnActivityResult(requestCode, resultCode, data);

    PluginCall savedCall = getSavedCall();

    if (savedCall == null) {
      return;
    }
    if (requestCode == REQUEST_IMAGE_PICK) {
      // Do something with the data
    }
  }
}

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: This command opens the Android Capacitor project in Android Studio for more control over the native project.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Displaying Screen Orientation Error in Browser
DESCRIPTION: Error message shown when attempting to use unimplemented screen orientation functionality in web browser.

LANGUAGE: bash
CODE:
Uncaught (in promise) ScreenOrientation does not have web implementation.

----------------------------------------

TITLE: Adding Firebase SDK to iOS Podfile
DESCRIPTION: Ruby code for the Podfile, adding the Firebase/Messaging pod to the iOS project.

LANGUAGE: ruby
CODE:
platform :ios, '12.0'
use_frameworks!

# workaround to avoid Xcode caching of Pods that requires
# Product -> Clean Build Folder after new Cordova plugins installed
# Requires CocoaPods 1.6 or newer
install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
end

target 'App' do
  capacitor_pods
  # Add your Pods here
  pod 'Firebase/Messaging'
end

----------------------------------------

TITLE: Displaying Screen Orientation Error in Browser
DESCRIPTION: Error message shown when attempting to use unimplemented screen orientation functionality in web browser.

LANGUAGE: bash
CODE:
Uncaught (in promise) ScreenOrientation does not have web implementation.

----------------------------------------

TITLE: TypeScript Plugin Registration
DESCRIPTION: Shows the new way to register plugins in TypeScript using registerPlugin with lazy loading support.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';
import type { CoolPlugin } from './definitions';

const MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {
  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),
});

export * from './definitions';
export { MyCoolPlugin };

----------------------------------------

TITLE: Building Capacitor Project
DESCRIPTION: Initial build and platform addition commands for a Capacitor project

LANGUAGE: bash
CODE:
npm run build
npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Registering Background Task in iOS AppDelegate
DESCRIPTION: Swift code to register the background task in the iOS AppDelegate's application(_:didFinishLaunchingWithOptions:) method.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

    // ....
    BackgroundRunnerPlugin.registerBackgroundTask()
    BackgroundRunnerPlugin.handleApplicationDidFinishLaunching(launchOptions: launchOptions)
    // ....

    return true
}

----------------------------------------

TITLE: Configuring Android Push Notification Icon
DESCRIPTION: XML snippet to add to AndroidManifest.xml for specifying the push notification icon on Android.

LANGUAGE: xml
CODE:
<meta-data android:name="com.google.firebase.messaging.default_notification_icon" android:resource="@mipmap/push_icon_name" />

----------------------------------------

TITLE: Configuring AppDelegate for Watch Connectivity in iOS
DESCRIPTION: Swift code to set up Watch Connectivity in the iOS app's AppDelegate.

LANGUAGE: swift
CODE:
assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
WCSession.default.delegate = CapWatchSessionDelegate.shared
WCSession.default.activate()

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Update the Android project variables in the variables.gradle file to meet new minimum requirements and add new variables.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 32
targetSdkVersion = 32
androidxActivityVersion = '1.4.0'
androidxAppCompatVersion = '1.4.2'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.8.0'
androidxFragmentVersion = '1.4.1'
coreSplashScreenVersion = '1.0.0-rc01'
androidxWebkitVersion = '1.4.0'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.3'
androidxEspressoCoreVersion = '3.4.0'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Generating Capacitor Plugin Project
DESCRIPTION: Command to generate a new Capacitor plugin project using the @capacitor/create-plugin package. It sets up the basic structure and metadata for the plugin.

LANGUAGE: bash
CODE:
npx @capacitor/create-plugin \
  --name @capacitor-community/screen-orientation \
  --package-id io.ionic.plugins.screenorientation \
  --class-name ScreenOrientation \
  --repo "https://ionic.io" \
  --license "MIT" \
  --description "Work with the screen orientation in a common way for iOS, Android, and web"

----------------------------------------

TITLE: Adding Intent Filter for Android Deep Linking
DESCRIPTION: This XML snippet demonstrates how to add an intent filter to the AndroidManifest.xml file for Android deep linking. It specifies the actions, categories, and data scheme for handling deep links.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="https" android:host="beerswift.app" />
</intent-filter>

----------------------------------------

TITLE: Installing Ionic CLI and Creating New Project
DESCRIPTION: Commands to install the Ionic CLI globally and create a new blank Ionic Angular project called capApp.

LANGUAGE: bash
CODE:
npm install -g @ionic/cli
ionic start capApp blank --type=angular

----------------------------------------

TITLE: Capacitor Config JSON
DESCRIPTION: JSON configuration example for the Splash Screen plugin showing all available options.

LANGUAGE: json
CODE:
{
  "plugins": {
    "SplashScreen": {
      "launchShowDuration": 3000,
      "launchAutoHide": true,
      "launchFadeOutDuration": 3000,
      "backgroundColor": "#ffffffff",
      "androidSplashResourceName": "splash",
      "androidScaleType": "CENTER_CROP",
      "showSpinner": true,
      "androidSpinnerStyle": "large",
      "iosSpinnerStyle": "small",
      "spinnerColor": "#999999",
      "splashFullScreen": true,
      "splashImmersive": true,
      "layoutName": "launch_screen",
      "useDialog": true
    }
  }
}

----------------------------------------

TITLE: Watch Command Listener Implementation
DESCRIPTION: TypeScript implementation of a watch command listener

LANGUAGE: typescript
CODE:
Watch.addListener("runCommand", (data: {command: string}) => {
  console.log("PHONE got command - " + data.command);
})

----------------------------------------

TITLE: Capacitor Config JSON
DESCRIPTION: JSON configuration example for the Splash Screen plugin showing all available options.

LANGUAGE: json
CODE:
{
  "plugins": {
    "SplashScreen": {
      "launchShowDuration": 3000,
      "launchAutoHide": true,
      "launchFadeOutDuration": 3000,
      "backgroundColor": "#ffffffff",
      "androidSplashResourceName": "splash",
      "androidScaleType": "CENTER_CROP",
      "showSpinner": true,
      "androidSpinnerStyle": "large",
      "iosSpinnerStyle": "small",
      "spinnerColor": "#999999",
      "splashFullScreen": true,
      "splashImmersive": true,
      "layoutName": "launch_screen",
      "useDialog": true
    }
  }
}

----------------------------------------

TITLE: Activity Callback Implementation in Android
DESCRIPTION: Demonstrates how to implement the new AndroidX Activity Result API replacing manual request codes with callback methods.

LANGUAGE: java
CODE:
@PluginMethod
public void chooseImage(PluginCall call) {
    Intent intent = new Intent(Intent.ACTION_PICK);
    intent.setType("image/*");
    startActivityForResult(call, intent, "chooseImageResult");
}

@ActivityCallback
private void chooseImageResult(PluginCall call, ActivityResult result) {
    if (result.getResultCode() == Activity.RESULT_CANCELED) {
        call.reject("Activity canceled");
    } else {
        Intent data = result.getData();
        call.resolve("Success!");
    }
}

----------------------------------------

TITLE: ProGuard Rules for Plugin Protection
DESCRIPTION: ProGuard configuration rules to prevent code optimization issues with third-party plugins and Capacitor Plugin classes.

LANGUAGE: proguard
CODE:
-keep class com.mythirdpartyplugin.** { *; }

-keep public class * extends com.getcapacitor.Plugin

----------------------------------------

TITLE: Configuring AppDelegate for Watch Connectivity in Swift
DESCRIPTION: Code to add to AppDelegate.swift to set up Watch Connectivity for the iOS app.

LANGUAGE: swift
CODE:
assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
WCSession.default.delegate = CapWatchSessionDelegate.shared
WCSession.default.activate()

----------------------------------------

TITLE: Installing Action Sheet Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/action-sheet plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/action-sheet
npx cap sync

----------------------------------------

TITLE: Handling Watch Commands in Foreground
DESCRIPTION: TypeScript code to handle watch commands in the foreground using the Capacitor Watch plugin.

LANGUAGE: typescript
CODE:
Watch.addListener("runCommand", (data: {command: string}) => {
  console.log("PHONE got command - " + data.command);
})

----------------------------------------

TITLE: Implementing Storage Plugin Mock in TypeScript
DESCRIPTION: Basic implementation of a Storage plugin mock showing the core methods that need to be stubbed for testing. Includes get, set, and clear operations with proper typing.

LANGUAGE: typescript
CODE:
export const Storage = {
  async get(data: { key: string }): Promise<{ value: string | undefined }> {
    return { value: undefined };
  },

  async set(data: { key: string; value: string }): Promise<void> {},
  async clear(): Promise<void> {},
};

----------------------------------------

TITLE: Configuring iOS Content Mode in Capacitor
DESCRIPTION: JSON configuration to set preferredContentMode to mobile for iPad compatibility

LANGUAGE: json
CODE:
{
  "ios": {
    "preferredContentMode": "mobile"
  }
}

----------------------------------------

TITLE: Capacitor TypeScript Configuration Example
DESCRIPTION: Example of a typed Capacitor configuration file using TypeScript with plugin-specific settings

LANGUAGE: typescript
CODE:
/// <reference types="@capacitor/local-notifications" />
/// <reference types="@capacitor/push-notifications" />
/// <reference types="@capacitor/splash-screen" />

import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: 'com.capacitorjs.app.testapp',
  appName: 'capacitor-testapp',
  webDir: 'build',
  plugins: {
    SplashScreen: {
      launchAutoHide: false,
    },
    LocalNotifications: {
      smallIcon: 'ic_stat_icon_config_sample',
      iconColor: '#CE0B7C',
    },
    PushNotifications: {
      presentationOptions: ['alert', 'sound'],
    },
  },
};

export default config;

----------------------------------------

TITLE: Updating OpenSSL and Ruby for CocoaPods GitHub Connection
DESCRIPTION: Series of Homebrew commands to update openssl and Ruby to resolve GitHub connection issues with CocoaPods

LANGUAGE: bash
CODE:
brew install openssl
brew upgrade openssl
brew install ruby
brew link --overwrite ruby

----------------------------------------

TITLE: Installing Awesome Cordova Plugins Wrapper
DESCRIPTION: Command to install the @awesome-cordova-plugins wrapper for a Cordova plugin, which provides TypeScript support for the plugin in a Capacitor project.

LANGUAGE: bash
CODE:
npm install @awesome-cordova-plugins/plugin-name

----------------------------------------

TITLE: Android Build Gradle Modifications
DESCRIPTION: Required changes to Android build.gradle files for version 2.0 compatibility

LANGUAGE: diff
CODE:
         classpath 'com.android.tools.build:gradle:4.1.1'
         classpath 'com.google.gms:google-services:4.3.3'

         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
 }

+apply from: "variables.gradle"

 allprojects {
     repositories {
         google()
         jcenter()


----------------------------------------

TITLE: Updating Android App Build Gradle with Common Variables
DESCRIPTION: This diff snippet demonstrates how to update the Android app's build.gradle file to use the common variables defined in variables.gradle.

LANGUAGE: diff
CODE:
 android {
-    compileSdkVersion 28
+    compileSdkVersion rootProject.ext.compileSdkVersion
     defaultConfig {
         applicationId "com.example.app"
-        minSdkVersion 21
-        targetSdkVersion 28
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

----------------------------------------

TITLE: Installing @capacitor/browser Plugin
DESCRIPTION: Commands to install the @capacitor/browser plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/browser
npx cap sync

----------------------------------------

TITLE: Getting Current Zoom Level in TypeScript
DESCRIPTION: TypeScript function to get the current zoom level, which returns a Promise with the zoom level as a decimal.

LANGUAGE: typescript
CODE:
get() => Promise<GetResult>

----------------------------------------

TITLE: Adding Capacitor iOS Pods Helper in Ruby
DESCRIPTION: Add a require statement to include Capacitor iOS pods helper script at the beginning of the Podfile.

LANGUAGE: ruby
CODE:
require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

----------------------------------------

TITLE: Installing Capacitor Platform Dependencies
DESCRIPTION: Commands to set up iOS and Android platforms in a Capacitor project. Includes installing platform packages, adding platforms, and syncing project changes.

LANGUAGE: bash
CODE:
npm run build
npm install @capacitor/ios @capacitor/android
npx cap add ios
npx cap add android
npx cap sync

----------------------------------------

TITLE: Including PWA Elements via Script Tags
DESCRIPTION: HTML script tags to include PWA Elements directly in the index.html file. Note that this method does not work for offline scenarios.

LANGUAGE: html
CODE:
<script
  type="module"
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js"
></script>
<script
  nomodule
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js"
></script>

----------------------------------------

TITLE: Removing Camera Permissions
DESCRIPTION: Optional Android manifest permissions that can be removed when not using saveToGallery in Camera plugin.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_MEDIA_IMAGES"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Listing Installed Plugin Versions
DESCRIPTION: Command to display a list of all installed Capacitor and Cordova plugins along with their version numbers.

LANGUAGE: bash
CODE:
npx cap ls

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Compatibility
DESCRIPTION: Commands to install and run jetifier tool for patching plugins to work with AndroidX

LANGUAGE: bash
CODE:
npm install -D jetifier
npx jetifier

----------------------------------------

TITLE: Registering Web Plugins in TypeScript
DESCRIPTION: Shows the new way to register plugins using the registerPlugin function with lazy loading support.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';
import type { CoolPlugin } from './definitions';

const MyCoolPlugin = registerPlugin<CoolPlugin>('MyCoolPlugin', {
  web: () => import('./web').then(m => new m.MyCoolPluginWeb()),
});

export * from './definitions';
export { MyCoolPlugin };

----------------------------------------

TITLE: Detecting Native Platform with Capacitor.isNativePlatform
DESCRIPTION: Demonstrates the use of Capacitor.isNativePlatform to check if the app is running as a native, installed Capacitor app or as a PWA/web app.

LANGUAGE: typescript
CODE:
if (Capacitor.isNativePlatform()) {
  console.log("I'm a native app!");
} else {
  console.log("I'm a PWA or Web app!");
}

----------------------------------------

TITLE: Running Capacitor iOS App via Command Line
DESCRIPTION: Runs the Capacitor iOS app on a device or simulator using the Capacitor CLI. This command will prompt for target selection.

LANGUAGE: bash
CODE:
npx cap run ios

----------------------------------------

TITLE: Prompt Dialog Method Definition
DESCRIPTION: TypeScript method signature for showing a prompt dialog with PromptOptions interface

LANGUAGE: typescript
CODE:
prompt(options: PromptOptions) => Promise<PromptResult>

----------------------------------------

TITLE: Updating Android Splash Screen Theme in XML
DESCRIPTION: Update the Android splash screen theme to use the new Android 12 Splash Screen API.

LANGUAGE: xml
CODE:
<style name="AppTheme.NoActionBarLaunch" parent="Theme.SplashScreen">
    <item name="android:background">@drawable/splash</item>
</style>

----------------------------------------

TITLE: Android Storage Permissions Configuration
DESCRIPTION: Required Android manifest permissions for saving photos to gallery.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Implementing ScreenOrientationPlugin Class in Swift
DESCRIPTION: This snippet defines the ScreenOrientationPlugin class with placeholder methods for orientation, lock, and unlock functionality.

LANGUAGE: swift
CODE:
import Foundation
import Capacitor

@objc(ScreenOrientationPlugin)
public class ScreenOrientationPlugin: CAPPlugin {

  @objc public func orientation(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func lock(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func unlock(_ call: CAPPluginCall) {
    call.resolve();
  }
}

----------------------------------------

TITLE: Installing Screen Reader Plugin with npm
DESCRIPTION: Commands for installing the @capacitor/screen-reader plugin and syncing the project

LANGUAGE: bash
CODE:
npm install @capacitor/screen-reader
npx cap sync

----------------------------------------

TITLE: Accessing Configuration Property
DESCRIPTION: Shows the declaration of the config property that provides access to Capacitor's runtime configuration.

LANGUAGE: swift
CODE:
var config: InstanceConfiguration { get }

----------------------------------------

TITLE: Configuring Watch App Entry Point
DESCRIPTION: Swift code for the main entry point of the Watch app, setting up the CapWatchContentView and Watch Connectivity.

LANGUAGE: swift
CODE:
import SwiftUI
import WatchConnectivity
import iOS_capWatch_watch

@main
struct watchddgg_Watch_AppApp: App {
    var body: some Scene {
        WindowGroup {
            CapWatchContentView()
                .onAppear {
                    assert(WCSession.isSupported(), "This sample requires Watch Connectivity support!")
                    WCSession.default.delegate = WatchViewModel.shared
                    WCSession.default.activate()
                }
        }
    }
}

----------------------------------------

TITLE: Jasmine Test Implementation Example
DESCRIPTION: Example showing how to mock and test Storage plugin methods using Jasmine testing framework.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
    spyOn(Storage, 'get');
    (Storage.get as any)
      .withArgs({ key: 'firstName' })
      .and.returnValue(Promise.resolve({ value: 'Jason' }));
    (Storage.get as any)
      .withArgs({ key: 'lastName' })
      .and.returnValue(Promise.resolve({ value: 'Jones' }));

    fixture.detectChanges();
    await fixture.whenRenderingDone();

    expect(component.firstName).toEqual('Jason');
    expect(component.lastName).toEqual('Jones');
  });

  it('clears the storage', () => {
    spyOn(Storage, 'clear');
    click(clear.nativeElement);
    fixture.detectChanges();
    expect(Storage.clear).toHaveBeenCalledTimes(1);
  });

----------------------------------------

TITLE: Example Output of Capacitor Sync Command
DESCRIPTION: This snippet shows the typical output of running the 'cap sync' command, including the steps performed and their execution times.

LANGUAGE: bash
CODE:
√ Copying web assets from www to android\app\src\main\assets\public in 3.37s
√ Copying native bridge in 5.80ms
√ Copying capacitor.config.json in 2.59ms
√ copy in 3.43s
√ Updating Android plugins in 11.48ms
  Found 1 Capacitor plugin for android:
    capacitor-mapbox (0.0.1)
√ update android in 105.91ms
√ copy in 409.80μp
√ update web in 6.80μp
Sync finished in 3.563s

----------------------------------------

TITLE: Android Storage Permissions Configuration
DESCRIPTION: Required Android manifest permissions for saving photos to gallery.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Installing Ionic Native TypeScript Wrapper
DESCRIPTION: Optional command to install the Ionic Native wrapper for TypeScript support of a Cordova plugin.

LANGUAGE: bash
CODE:
npm install @ionic-native/plugin-name

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: Opens the Android project in Android Studio using the Capacitor CLI. This command launches Android Studio with the project loaded.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: Motion API Event Listener Definition
DESCRIPTION: TypeScript interface definitions for motion event listeners including acceleration and orientation tracking

LANGUAGE: typescript
CODE:
addListener(eventName: 'accel', listenerFunc: AccelListener) => Promise<PluginListenerHandle> & PluginListenerHandle

----------------------------------------

TITLE: iPad Full Screen Requirement Configuration
DESCRIPTION: XML configuration for Info.plist to enable orientation locking on iPads by requiring full screen mode.

LANGUAGE: xml
CODE:
	<key>UIRequiresFullScreen</key>
	<true/>

----------------------------------------

TITLE: Alert Method Type Definition
DESCRIPTION: TypeScript type definition for the alert method showing parameter types and return value.

LANGUAGE: typescript
CODE:
alert(options: AlertOptions) => Promise<void>

----------------------------------------

TITLE: Push Notifications Permission Request Method
DESCRIPTION: TypeScript method to request user permission for displaying notifications on iOS, automatically granted on Android.

LANGUAGE: typescript
CODE:
requestPermission() => Promise<NotificationPermissionResponse>

----------------------------------------

TITLE: Updating Java Package Name
DESCRIPTION: Example of updating the package name in Java files for the plugin project to match the specified package ID.

LANGUAGE: java
CODE:
package io.ionic.plugins.screenorientation

----------------------------------------

TITLE: Installing cordova-res Tool
DESCRIPTION: Command to install the cordova-res tool globally for generating icons and splash screens for Capacitor projects.

LANGUAGE: bash
CODE:
npm install -g cordova-res

----------------------------------------

TITLE: Modifying iOS AppDelegate for Capacitor Plugin
DESCRIPTION: Swift code diff showing the necessary modifications to the AppDelegate.swift file for iOS to support the ScreenOrientation plugin.

LANGUAGE: swift
CODE:
import UIKit
+ import CapacitorCommunityScreenOrientation

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
+   func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
+     return ScreenOrientationPlugin.supportedOrientations
+  }
}

----------------------------------------

TITLE: Implementing Push Notification Handling in Angular
DESCRIPTION: TypeScript code implementing push notification handling in an Angular component using Capacitor's Push Notifications API

LANGUAGE: typescript
CODE:
import { Component, OnInit } from '@angular/core';

import {
  ActionPerformed,
  PushNotificationSchema,
  PushNotifications,
  Token,
} from '@capacitor/push-notifications';

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage implements OnInit {
  ngOnInit() {
    console.log('Initializing HomePage');

    PushNotifications.requestPermissions().then(result => {
      if (result.receive === 'granted') {
        PushNotifications.register();
      } else {
        // Show some error
      }
    });

    PushNotifications.addListener('registration', (token: Token) => {
      alert('Push registration success, token: ' + token.value);
    });

    PushNotifications.addListener('registrationError', (error: any) => {
      alert('Error on registration: ' + JSON.stringify(error));
    });

    PushNotifications.addListener(
      'pushNotificationReceived',
      (notification: PushNotificationSchema) => {
        alert('Push received: ' + JSON.stringify(notification));
      },
    );

    PushNotifications.addListener(
      'pushNotificationActionPerformed',
      (notification: ActionPerformed) => {
        alert('Push action performed: ' + JSON.stringify(notification));
      },
    );
  }
}

----------------------------------------

TITLE: Installing @capacitor/share Plugin
DESCRIPTION: Command to install the @capacitor/share plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/share
npx cap sync

----------------------------------------

TITLE: Implementing Value Return Methods in Java
DESCRIPTION: Example of implementing a value return method in Android using the default @PluginMethod annotation.

LANGUAGE: java
CODE:
@PluginMethod()
public void method2(PluginCall call) {
}

----------------------------------------

TITLE: Removing All Listeners from InAppBrowser
DESCRIPTION: TypeScript code to remove all event listeners from the InAppBrowser plugin.

LANGUAGE: typescript
CODE:
import { InAppBrowser } from '@capacitor/inappbrowser';
InAppBrowser.removeAllListeners();

----------------------------------------

TITLE: Common Incorrect Plugin Usage Pattern
DESCRIPTION: Shows an anti-pattern where direct plugin import leads to using web implementation instead of native functionality.

LANGUAGE: typescript
CODE:
import { Browser } from '@capacitor/core';

async openBrowser() {
  // On iOS, for example, this will open the URL in Safari instead of
  // the SFSafariViewController (in-app browser)
  await Browser.open({ url: "https://ionicframework.com" });
}

----------------------------------------

TITLE: Updating Java Package Declaration
DESCRIPTION: Package declaration update required for Android plugin files in the generated plugin project.

LANGUAGE: java
CODE:
package io.ionic.plugins.screenorientation

----------------------------------------

TITLE: Updating Gradle Configuration
DESCRIPTION: Updates Gradle plugin version to 8.0.0 and wrapper version to 8.0.2.

LANGUAGE: diff
CODE:
    dependencies {
-       classpath 'com.android.tools.build:gradle:7.2.1'
+       classpath 'com.android.tools.build:gradle:8.0.0'
    }

# gradle-wrapper.properties

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
- distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-all.zip
+ distributionUrl=https\://services.gradle.org/distributions/gradle-8.0.2-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

----------------------------------------

TITLE: Installing Cordova Plugins in Capacitor Project
DESCRIPTION: Commands to install a Cordova plugin and sync the Capacitor project. This process installs the plugin and updates the native project configuration.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: iOS Plugin Call Management Methods
DESCRIPTION: Core methods available in iOS for saving, retrieving, and releasing plugin calls. These methods help manage the lifecycle of CAPPluginCall objects in the bridge.

LANGUAGE: swift
CODE:
func saveCall(_ call: CAPPluginCall)
func savedCall(withID: String) -> CAPPluginCall?
func releaseCall(_ call: CAPPluginCall)
func releaseCall(withID: String)

----------------------------------------

TITLE: Executing cap copy Command in Capacitor CLI
DESCRIPTION: This command copies the web app build and Capacitor configuration file into the native platform project. It should be run after making changes to the web app or modifying the capacitor.config.json file. The platform parameter is optional and can be either 'android' or 'ios'.

LANGUAGE: bash
CODE:
npx cap copy [platform]

----------------------------------------

TITLE: Installing Status Bar Capacitor Plugin
DESCRIPTION: Commands to install the @capacitor/status-bar plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/status-bar
npx cap sync

----------------------------------------

TITLE: Android Package Declaration
DESCRIPTION: Java package declaration for the Android implementation of the plugin.

LANGUAGE: java
CODE:
package io.ionic.plugins.screenorientation

----------------------------------------

TITLE: Markdown Page Structure with JSX Components
DESCRIPTION: MDX document structure showing the layout of the Capacitor plugins documentation page using DocCard and DocCardList components

LANGUAGE: markdown
CODE:
---
title: Capacitor Plugins
description: Capacitor Plugins
---

import DocCard from '@theme/DocCard';
import DocCardList from '@theme/DocCardList';

# Capacitor Plugins

Plugins in Capacitor enable JavaScript to interface directly with Native APIs.

<DocCardList>
  <DocCard header="Official plugins" img="/img/v5/docs/capacitor-card.png" href="/apis">
    <p>Official Plugins are maintained by the Capacitor Team</p>
  </DocCard>
  <DocCard header="Community plugins" img="/img/v5/docs/community-card.png" href="/plugins/community">
    <p>Community Plugins are maintained by the Capacitor Community</p>
  </DocCard>
</DocCardList>

----------------------------------------

TITLE: Opening URL in System Browser
DESCRIPTION: Example of opening a URL in the system browser (Custom Tabs/SFSafariViewController) with default options.

LANGUAGE: typescript
CODE:
import { InAppBrowser, DefaultSystemBrowserOptions } from '@capacitor/inappbrowser';
await InAppBrowser.openInSystemBrowser({
    url: "https://www.google.com",
    options: DefaultSystemBrowserOptions
});

----------------------------------------

TITLE: Accessing ViewController Property in iOS Bridge
DESCRIPTION: Shows the viewController property declaration and examples of presenting views using the main view controller.

LANGUAGE: swift
CODE:
var viewController: UIViewController? { get }

LANGUAGE: swift
CODE:
DispatchQueue.main.async {
  self.bridge?.viewController.present(ourCustomViewController, animated: true, completion: nil)
}

LANGUAGE: swift
CODE:
self.setCenteredPopover(ourCustomViewController)
self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)

----------------------------------------

TITLE: Installing @capacitor/preferences Plugin
DESCRIPTION: Commands to install the @capacitor/preferences plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/preferences
npx cap sync

----------------------------------------

TITLE: Importing PWA Elements in Vue
DESCRIPTION: Code snippet for importing and initializing PWA Elements in a Vue application's main.ts file.

LANGUAGE: typescript
CODE:
// Above the createApp() line
import { defineCustomElements } from '@ionic/pwa-elements/loader';
defineCustomElements(window);

----------------------------------------

TITLE: CocoaPods Error Output on Apple Silicon
DESCRIPTION: Example error output when encountering CocoaPods installation issues on Apple Silicon Macs, showing the Bus Error that occurs with the ffi library.

LANGUAGE: bash
CODE:
[error] Analyzing dependencies
        /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.3/lib/ffi/library.rb:275: [BUG] Bus Error at 0x0000000000000000
        ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]

----------------------------------------

TITLE: Installing @capacitor/preferences Plugin
DESCRIPTION: Commands to install the @capacitor/preferences plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/preferences
npx cap sync

----------------------------------------

TITLE: Installing TypeScript Support for Cordova Plugin
DESCRIPTION: Command for installing the awesome-cordova-plugins wrapper to add TypeScript support for a Cordova plugin.

LANGUAGE: bash
CODE:
npm install @awesome-cordova-plugins/plugin-name

----------------------------------------

TITLE: Enabling Capacitor Telemetry
DESCRIPTION: Command to opt back into Capacitor's telemetry data collection program.

LANGUAGE: bash
CODE:
npx cap telemetry on

----------------------------------------

TITLE: Converting File Paths with Capacitor.convertFileSrc
DESCRIPTION: Demonstrates the usage of Capacitor.convertFileSrc to convert device filepaths into Web View-friendly paths. This is necessary to handle protocol differences between device files and Web View content.

LANGUAGE: typescript
CODE:
// file:///path/to/device/photo.jpg
const rawPhotoUri = await Filesystem.writeFile({
  path: "myFile.jpg",
  data: base64Data,
  directory: FilesystemDirectory.Data
});

// http://localhost/path/to/device/photo.jpg
const fixedPhotoUri = Capacitor.convertFileSrc(rawPhotoUri.uri),

----------------------------------------

TITLE: Adding Package Queries to AndroidManifest.xml
DESCRIPTION: Example of how to add package queries to the AndroidManifest.xml file for Android 11 and newer to allow querying specific app packages.

LANGUAGE: xml
CODE:
<queries>
  <package android:name="com.getcapacitor.myapp" />
</queries>

----------------------------------------

TITLE: Generating Assets for All Platforms in Capacitor
DESCRIPTION: Command to generate Splash Screens and Icons for all supported platforms (iOS, Android, PWA) using @capacitor/assets in a Capacitor project.

LANGUAGE: shell
CODE:
npx capacitor-assets generate

----------------------------------------

TITLE: Including PWA Elements via Script Tags
DESCRIPTION: HTML snippet for including PWA Elements through script tags in the index.html file. Note that this method doesn't work for offline scenarios.

LANGUAGE: html
CODE:
<script
  type="module"
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js"
></script>
<script
  nomodule
  src="https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js"
></script>

----------------------------------------

TITLE: Browser Open Method Definition
DESCRIPTION: TypeScript definition for the open method with OpenOptions interface.

LANGUAGE: typescript
CODE:
open(options: OpenOptions) => Promise<void>

----------------------------------------

TITLE: ShowOptions Interface TypeScript Definition
DESCRIPTION: TypeScript interface definition for the ShowOptions object used in the Toast.show method, including properties for text, duration, and position.

LANGUAGE: typescript
CODE:
interface ShowOptions {
  text: string;
  duration?: 'short' | 'long';
  position?: 'top' | 'center' | 'bottom';
}

----------------------------------------

TITLE: Starting Local Web Server for Framework CLIs
DESCRIPTION: Generic command to start a local web server for Live Reload when using framework CLIs. The server must be bound to 0.0.0.0 for LAN accessibility.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Syncing Web Code to Native Projects
DESCRIPTION: Command to synchronize web application code with native projects

LANGUAGE: bash
CODE:
npx cap sync

----------------------------------------

TITLE: Building Plugin via NPM
DESCRIPTION: Command to compile the plugin using npm build script.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Initializing Capacitor Configuration
DESCRIPTION: Command to initialize Capacitor configuration through CLI questionnaire

LANGUAGE: bash
CODE:
npx cap init

----------------------------------------

TITLE: Plugin Configuration in JSON
DESCRIPTION: JSON configuration example for the Splash Screen plugin showing all available options.

LANGUAGE: json
CODE:
{
  "plugins": {
    "SplashScreen": {
      "launchShowDuration": 3000,
      "launchAutoHide": true,
      "launchFadeOutDuration": 3000,
      "backgroundColor": "#ffffffff",
      "androidSplashResourceName": "splash",
      "androidScaleType": "CENTER_CROP",
      "showSpinner": true,
      "androidSpinnerStyle": "large",
      "iosSpinnerStyle": "small",
      "spinnerColor": "#999999",
      "splashFullScreen": true,
      "splashImmersive": true,
      "layoutName": "launch_screen",
      "useDialog": true
    }
  }
}

----------------------------------------

TITLE: Updating OpenSSL and Ruby for CocoaPods GitHub Connection
DESCRIPTION: These commands update OpenSSL and Ruby to resolve GitHub connection issues with CocoaPods. This is particularly useful for Macs with older versions of these dependencies.

LANGUAGE: bash
CODE:
brew install openssl
brew upgrade openssl
brew install ruby
brew link --overwrite ruby

----------------------------------------

TITLE: Installing PWA Elements via npm
DESCRIPTION: Command to install the @ionic/pwa-elements package using npm.

LANGUAGE: bash
CODE:
npm install @ionic/pwa-elements

----------------------------------------

TITLE: Checking Capacitor Telemetry Status
DESCRIPTION: Command to check the current status of telemetry collection for your project.

LANGUAGE: bash
CODE:
npx cap telemetry

----------------------------------------

TITLE: Implementing ScreenOrientationPlugin Interface in TypeScript
DESCRIPTION: Implements the remaining methods of the ScreenOrientationPlugin interface including orientation, lock, and unlock.

LANGUAGE: typescript
CODE:
export class ScreenOrientationWeb
  extends WebPlugin
  implements ScreenOrientationPlugin
{
  async orientation(): Promise<{ type: OrientationType }> {
    return { type: window.screen.orientation.type };
  }

  async lock(opts: { orientation: OrientationLockType }): Promise<void> {
    await window.screen.orientation.lock(opts.orientation);
  }

  async unlock(): Promise<void> {
    window.screen.orientation.unlock();
  }
}

----------------------------------------

TITLE: Opening a Browser with Options in TypeScript
DESCRIPTION: Example of the Browser.open() method with OpenOptions interface, showing various configuration options.

LANGUAGE: typescript
CODE:
open(options: OpenOptions) => Promise<void>

----------------------------------------

TITLE: Updating Android Dependencies Versions
DESCRIPTION: Updates various Android dependency versions including AppCompat, JUnit, and Espresso in the build configuration.

LANGUAGE: diff
CODE:
ext {
    junitVersion = project.hasProperty('junitVersion') ? rootProject.ext.junitVersion : '4.13.2'
-   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.4.2'
+   androidxAppCompatVersion = project.hasProperty('androidxAppCompatVersion') ? rootProject.ext.androidxAppCompatVersion : '1.6.1'
-   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.3'
+   androidxJunitVersion = project.hasProperty('androidxJunitVersion') ? rootProject.ext.androidxJunitVersion : '1.1.5'
-   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.4.0'
+   androidxEspressoCoreVersion = project.hasProperty('androidxEspressoCoreVersion') ? rootProject.ext.androidxEspressoCoreVersion : '3.5.1'

----------------------------------------

TITLE: Adding Permission Methods to Plugin Interface in TypeScript
DESCRIPTION: Demonstrates how to extend the plugin interface to include checkPermissions and requestPermissions methods, which return the PermissionStatus.

LANGUAGE: typescript
CODE:
export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;
  checkPermissions(): Promise<PermissionStatus>;
  requestPermissions(): Promise<PermissionStatus>;
}

----------------------------------------

TITLE: Listing Installed Capacitor and Cordova Plugins
DESCRIPTION: Command to display a list of all Capacitor and Cordova plugins installed in the project, along with their version numbers.

LANGUAGE: bash
CODE:
npx cap ls

----------------------------------------

TITLE: Verifying Plugin Build
DESCRIPTION: Command to verify the plugin code has been properly ported and is ready for distribution.

LANGUAGE: bash
CODE:
npm run verify

----------------------------------------

TITLE: Defining Screen Orientation Plugin Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the ScreenOrientation plugin, specifying methods for getting orientation, locking/unlocking screen orientation, and handling orientation change events. Uses OrientationType and OrientationLockType from DOM typings.

LANGUAGE: typescript
CODE:
import type { PluginListenerHandle } from '@capacitor/core';

export interface ScreenOrientationPlugin {
  /**
   * Returns the screen's current orientation.
   */
  orientation(): Promise<{ type: OrientationType }>;

  /**
   * Locks the screen orientation.
   */
  lock(opts: { orientation: OrientationLockType }): Promise<void>;

  /**
   * Unlocks the screen's orientation.
   */
  unlock(): Promise<void>;

  /**
   * Listens for screen orientation changes.
   */
  addListener(
    eventName: 'screenOrientationChange',
    listenerFunc: (orientation: { type: OrientationType }) => void,
  ): Promise<PluginListenerHandle> & PluginListenerHandle;

  /**
   * Removes all listeners
   */
  removeAllListeners(): Promise<void>;
}

----------------------------------------

TITLE: iOS Firebase Configuration in AppDelegate
DESCRIPTION: Swift code for configuring Firebase in iOS AppDelegate including push notification handling

LANGUAGE: swift
CODE:
import UIKit
import Capacitor
import FirebaseCore
import FirebaseMessaging

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

  var window: UIWindow?


  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    FirebaseApp.configure()
    return true
  }

  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Messaging.messaging().apnsToken = deviceToken
    Messaging.messaging().token(completion: { (token, error) in
      if let error = error {
          NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
      } else if let token = token {
          NotificationCenter.default.post(name: .capacitorDidRegisterForRemoteNotifications, object: token)
      }
    })
  }

  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
    NotificationCenter.default.post(name: .capacitorDidFailToRegisterForRemoteNotifications, object: error)
  }

----------------------------------------

TITLE: Installing Capacitor React Hooks
DESCRIPTION: Command to install the Capacitor community React hooks package via npm.

LANGUAGE: shell
CODE:
npm install @capacitor-community/react-hooks

----------------------------------------

TITLE: Installing CocoaPods without Homebrew for iOS Development
DESCRIPTION: Alternative method to install CocoaPods using Ruby Gem, with additional steps for Apple Silicon Macs to run CocoaPods through Rosetta.

LANGUAGE: bash
CODE:
sudo gem install cocoapods

LANGUAGE: bash
CODE:
sudo arch -x86_64 gem install ffi

LANGUAGE: bash
CODE:
npx cap copy
arch -x86_64 pod install

----------------------------------------

TITLE: Plugin Call Management Methods - iOS Swift
DESCRIPTION: Core methods for managing plugin calls in iOS Capacitor implementation. Includes functions for saving, retrieving, and releasing plugin calls using CAPPluginCall objects.

LANGUAGE: swift
CODE:
func saveCall(_ call: CAPPluginCall)
func savedCall(withID: String) -> CAPPluginCall?
func releaseCall(_ call: CAPPluginCall)
func releaseCall(withID: String)

----------------------------------------

TITLE: Implementing Screen Orientation Methods in TypeScript
DESCRIPTION: Implements the orientation, lock, and unlock methods for the ScreenOrientationWeb class. These methods interact with the Screen Orientation Web API and handle cases where the API is not available.

LANGUAGE: typescript
CODE:
async orientation(): Promise<ScreenOrientationResult> {
  if (typeof screen === 'undefined' || !screen.orientation) {
    throw this.unavailable(
      'ScreenOrientation API not available in this browser',
    );
  }
  return { type: screen.orientation.type };
}

async lock(options: OrientationLockOptions): Promise<void> {
  if (
    typeof screen === 'undefined' ||
    !screen.orientation ||
    !screen.orientation.lock
  ) {
    throw this.unavailable(
      'ScreenOrientation API not available in this browser',
    );
  }
  try {
    await screen.orientation.lock(options.orientation);
  } catch {
    throw this.unavailable(
      'ScreenOrientation API not available in this browser',
    );
  }
}

async unlock(): Promise<void> {
  if (
    typeof screen === 'undefined' ||
    !screen.orientation ||
    !screen.orientation.unlock
  ) {
    throw this.unavailable(
      'ScreenOrientation API not available in this browser',
    );
  }
  try {
    screen.orientation.unlock();
  } catch {
    throw this.unavailable(
      'ScreenOrientation API not available in this browser',
    );
  }
}

----------------------------------------

TITLE: Defining Permission Status Interface in TypeScript
DESCRIPTION: Shows how to define a PermissionStatus interface for representing plugin permission states using aliases. It imports PermissionState from Capacitor core and defines a location alias.

LANGUAGE: typescript
CODE:
import type { PermissionState } from '@capacitor/core';

export interface PermissionStatus {
  // TODO: change 'location' to the actual name of your alias!
  location: PermissionState;
}

----------------------------------------

TITLE: Adding Browser Event Listeners in TypeScript
DESCRIPTION: Examples of adding event listeners for 'browserFinished' and 'browserPageLoaded' events.

LANGUAGE: typescript
CODE:
addListener(eventName: 'browserFinished', listenerFunc: () => void) => Promise<PluginListenerHandle>

LANGUAGE: typescript
CODE:
addListener(eventName: 'browserPageLoaded', listenerFunc: () => void) => Promise<PluginListenerHandle>

----------------------------------------

TITLE: Importing Background Runner in iOS AppDelegate
DESCRIPTION: Swift code to import the Background Runner plugin in the iOS AppDelegate file.

LANGUAGE: swift
CODE:
import CapacitorBackgroundRunner

----------------------------------------

TITLE: Defining Permission Status Interface in TypeScript
DESCRIPTION: Shows how to define a PermissionStatus interface for representing plugin permission states using aliases. It imports PermissionState from Capacitor core and defines a location alias.

LANGUAGE: typescript
CODE:
import type { PermissionState } from '@capacitor/core';

export interface PermissionStatus {
  // TODO: change 'location' to the actual name of your alias!
  location: PermissionState;
}

----------------------------------------

TITLE: Plugin Call Management Methods - iOS Swift
DESCRIPTION: Core methods for managing plugin calls in iOS Capacitor implementation. Includes functions for saving, retrieving, and releasing plugin calls using CAPPluginCall objects.

LANGUAGE: swift
CODE:
func saveCall(_ call: CAPPluginCall)
func savedCall(withID: String) -> CAPPluginCall?
func releaseCall(_ call: CAPPluginCall)
func releaseCall(withID: String)

----------------------------------------

TITLE: Importing Background Runner in iOS AppDelegate
DESCRIPTION: Swift code to import the Background Runner plugin in the iOS AppDelegate file.

LANGUAGE: swift
CODE:
import CapacitorBackgroundRunner

----------------------------------------

TITLE: Implementing Callback Methods in Objective-C
DESCRIPTION: Example of implementing a callback method in iOS using the CAP_PLUGIN macro with CAPPluginReturnCallback return type.

LANGUAGE: objectivec
CODE:
CAP_PLUGIN(MyPlugin, "MyPlugin",
           CAP_PLUGIN_METHOD(method3, CAPPluginReturnCallback);
)

----------------------------------------

TITLE: Push Notifications Configuration Example
DESCRIPTION: Example configuration for iOS push notification presentation options in capacitor.config.json

LANGUAGE: json
CODE:
{
  "plugins": {
    "PushNotifications": {
      "presentationOptions": ["badge", "sound", "alert"]
    }
  }
}

----------------------------------------

TITLE: Required Resource Directory Structure
DESCRIPTION: Example of the required directory structure for icon and splash screen source files

LANGUAGE: bash
CODE:
resources/
├── icon.png
└── splash.png

----------------------------------------

TITLE: Updating iOS Pods in Capacitor Project
DESCRIPTION: This command updates the CocoaPods dependencies for an iOS project in Capacitor. It should be run when encountering the 'Sandbox not in sync with the Podfile.lock' error.

LANGUAGE: bash
CODE:
npx cap update ios

----------------------------------------

TITLE: Adding Outsystems Repository to Android Project
DESCRIPTION: Gradle configuration to include the Outsystems repository in the Android project's build file.

LANGUAGE: gradle
CODE:
allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url 'https://pkgs.dev.azure.com/OutSystemsRD/9e79bc5b-69b2-4476-9ca5-d67594972a52/_packaging/PublicArtifactRepository/maven/v1'
            name 'Azure'
            credentials {
                username = "optional"
                password = ""
            }
            content {
                includeGroup "com.github.outsystems"
            }
        }
    }
}

----------------------------------------

TITLE: Rendering Install Button in Markdown
DESCRIPTION: This snippet demonstrates how to create a custom styled button in Markdown that links to the VS Code extension installation. It uses inline HTML and CSS for styling.

LANGUAGE: markdown
CODE:
<a href="vscode:extension/ionic.ionic" target="_self"><button style={{color: '#FFF',cursor: 'pointer', fontWeight: 'bold', padding:16, paddingLeft:32, paddingRight:32, border:0, borderRadius:100, backgroundColor: '#000'}}>Install</button></a>

----------------------------------------

TITLE: Opening URL with Browser Capacitor
DESCRIPTION: Example of using the Browser API to open a website in an in-app browser.

LANGUAGE: typescript
CODE:
import { Browser } from '@capacitor/browser';

const openCapacitorSite = async () => {
  await Browser.open({ url: 'http://capacitorjs.com/' });
};

----------------------------------------

TITLE: Running Capacitor CLI cap run Command
DESCRIPTION: This command first runs the 'sync' command, then builds and deploys the native app to a target device. It requires specifying the platform (android or ios) and offers options to list available devices or target a specific device.

LANGUAGE: bash
CODE:
npx cap run [options] <platform>

----------------------------------------

TITLE: Implementing Request Permissions Method
DESCRIPTION: Example of implementing the requestPermissions method in a Capacitor web plugin, showing how to handle unimplemented features.

LANGUAGE: typescript
CODE:
async requestPermissions(): Promise<PermissionStatus> {
  throw this.unimplemented('Not implemented on web.');
}

----------------------------------------

TITLE: Changing App ID in Android Gradle File
DESCRIPTION: Modify the applicationId in the android/app/build.gradle file to change the bundle/app id for your Android app.

LANGUAGE: groovy
CODE:
applicationId "com.getcapacitor.myapp"

----------------------------------------

TITLE: Configuring Date Serialization in Swift for Capacitor Plugin
DESCRIPTION: Shows how to configure a Capacitor plugin in Swift to opt-out of automatic date serialization. This allows for custom handling of date objects in plugin calls.

LANGUAGE: swift
CODE:
override func load() {
    shouldStringifyDatesInCalls = false
}

----------------------------------------

TITLE: Implementing Void Return Methods in Android
DESCRIPTION: Java implementation of a void return method in Android using the @PluginMethod annotation with RETURN_NONE return type.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_NONE)
public void method1(PluginCall call) {
}

----------------------------------------

TITLE: Generating Assets
DESCRIPTION: Commands to generate and copy icons and splash screens for iOS and Android projects

LANGUAGE: bash
CODE:
npx @capacitor/assets generate --ios
npx @capacitor/assets generate --android

----------------------------------------

TITLE: Installing @capacitor/screen-orientation Plugin
DESCRIPTION: This shell command installs the @capacitor/screen-orientation plugin and syncs the Capacitor project.

LANGUAGE: shell
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Cordova Plugin Management
DESCRIPTION: Commands to uninstall a Cordova plugin and sync changes with Capacitor

LANGUAGE: bash
CODE:
npm uninstall cordova-plugin-name
npx cap sync

----------------------------------------

TITLE: Installing @capacitor/device Plugin
DESCRIPTION: Commands to install the @capacitor/device plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/device
npx cap sync

----------------------------------------

TITLE: Accessing Config Values in Android Java
DESCRIPTION: Example of accessing plugin configuration values in Android Java implementation

LANGUAGE: java
CODE:
String style = getConfig().getString("style");
if(style) {
  // Set the style
}

----------------------------------------

TITLE: Initializing Capacitor Configuration
DESCRIPTION: Command to initialize Capacitor with app information, where appName is the name of your app and appId is the domain identifier (e.g., com.example.app).

LANGUAGE: bash
CODE:
npx cap init [appName] [appId]

----------------------------------------

TITLE: Locking and Unlocking Screen Orientation in TypeScript
DESCRIPTION: These TypeScript snippets show how to lock the screen orientation to landscape and how to unlock it. They are typically used in onClick event handlers for buttons in the UI.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.lock({ orientation: "landscape-primary" })}

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.unlock()}

----------------------------------------

TITLE: Date Serialization Configuration in Swift
DESCRIPTION: Shows how to configure date serialization behavior in a Capacitor plugin.

LANGUAGE: swift
CODE:
override func load() {
    shouldStringifyDatesInCalls = false
}

----------------------------------------

TITLE: Using Toast Plugin in TypeScript
DESCRIPTION: Example demonstrating how to import and use the Toast plugin to show a simple notification.

LANGUAGE: typescript
CODE:
import { Toast } from '@capacitor/toast';

const showHelloToast = async () => {
  await Toast.show({
    text: 'Hello!',
  });
};

----------------------------------------

TITLE: ProGuard Rules for Plugin Protection
DESCRIPTION: ProGuard configuration rules to protect plugin code from being optimized or removed during the build process.

LANGUAGE: text
CODE:
-keep class com.mythirdpartyplugin.** { *; }
-keep public class * extends com.getcapacitor.Plugin

----------------------------------------

TITLE: Installing Capacitor Community React Hooks
DESCRIPTION: This snippet shows how to install the Capacitor Community React Hooks package using npm. These hooks simplify access to Capacitor APIs in React function components.

LANGUAGE: shell
CODE:
npm install @capacitor-community/react-hooks

----------------------------------------

TITLE: Adding JSDoc Comments to Capacitor Plugin TypeScript Interface
DESCRIPTION: This TypeScript snippet shows how to add JSDoc comment blocks to document plugin functionality in the definitions.ts file. It includes examples for method and parameter documentation.

LANGUAGE: typescript
CODE:
export interface EchoPlugin {
  echo(options: { value: string }): Promise<{ value: string }>;

  /**
   * Opens the map at a given location.
   *
   * @since 1.1.0
   */
  openMap(options: OpenMapOptions): Promise<void>;
}

export interface OpenMapOptions {
  /**
   * The latitude at which to open the map.
   */
  latitude: number;

  /**
   * The longitude at which to open the map.
   */
  longitude: number;
}

----------------------------------------

TITLE: Installing Camera Plugin with NPM
DESCRIPTION: Commands to install the @capacitor/camera plugin and sync the native projects.

LANGUAGE: bash
CODE:
npm install @capacitor/camera
npx cap sync

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Migration
DESCRIPTION: Commands to install and run jetifier to patch plugins with old Android support dependencies to use AndroidX equivalents.

LANGUAGE: bash
CODE:
npm install jetifier
npx jetify
npx cap sync android

----------------------------------------

TITLE: Implementing Value Return Method in Java for Android
DESCRIPTION: This snippet shows how to annotate a value return method in Java for an Android Capacitor plugin. The method is annotated with @PluginMethod, and the return type is optional as it's the default.

LANGUAGE: java
CODE:
@PluginMethod()
public void method2(PluginCall call) {
}

----------------------------------------

TITLE: Configuring iOS Privacy Manifest
DESCRIPTION: Example of a PrivacyInfo.xcprivacy file for iOS to specify API usage reasons.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>NSPrivacyAccessedAPITypes</key>
    <array>
      <!-- Add this dict entry to the array if the PrivacyInfo file already exists -->
      <dict>
        <key>NSPrivacyAccessedAPIType</key>
        <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>
        <key>NSPrivacyAccessedAPITypeReasons</key>
        <array>
          <string>C617.1</string>
        </array>
      </dict>
    </array>
  </dict>
</plist>

----------------------------------------

TITLE: Plugin Dependencies in package.json
DESCRIPTION: Example of how the plugin appears as a local dependency in package.json when testing locally.

LANGUAGE: json
CODE:
"echo": "file:../path/to/echo",

----------------------------------------

TITLE: Android Keep Alive Flag Setting
DESCRIPTION: Code to set the keepAlive flag for multiple completions in Android. This enables the plugin call to be resolved multiple times and automatically saves the call.

LANGUAGE: java
CODE:
call.setKeepAlive(true);

----------------------------------------

TITLE: Adding Post-Install Hook for iOS Deployment Target in Ruby
DESCRIPTION: Add a post-install hook to assert the correct deployment target for iOS pods.

LANGUAGE: ruby
CODE:
post_install do |installer|
  assertDeploymentTarget(installer)
end

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Migration
DESCRIPTION: Commands to install and run jetifier to patch plugins with old Android support dependencies to use AndroidX equivalents.

LANGUAGE: bash
CODE:
npm install jetifier
npx jetify
npx cap sync android

----------------------------------------

TITLE: Building Ionic App and Adding Platforms
DESCRIPTION: Commands to build the Ionic app and add iOS and Android platforms using Capacitor.

LANGUAGE: bash
CODE:
ionic build
ionic cap add ios
ionic cap add android

----------------------------------------

TITLE: Updating Android CapacitorPlugin Annotation
DESCRIPTION: Shows how to migrate from the deprecated @NativePlugin to the new @CapacitorPlugin annotation with updated permission handling.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(strings = { Manifest.permission.FOO }, alias = "foo"),
        @Permission(strings = { Manifest.permission.BAR }, alias = "bar")
    })
)

----------------------------------------

TITLE: Android Plugin Call Management Methods
DESCRIPTION: Core methods available in Android for saving, retrieving, and releasing plugin calls. These methods help manage the lifecycle of PluginCall objects in the bridge.

LANGUAGE: java
CODE:
void saveCall(PluginCall call)
PluginCall getSavedCall(String callbackId)
void releaseCall(PluginCall call)
void releaseCall(String callbackId)

----------------------------------------

TITLE: Installing Screen Orientation Plugin with NPM
DESCRIPTION: Commands to install the @capacitor/screen-orientation plugin and sync with the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Configuring Android Gradle for Background Runner
DESCRIPTION: Gradle configuration to add the Background Runner plugin to the Android project.

LANGUAGE: groovy
CODE:
repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
        dirs '../../node_modules/@capacitor/background-runner/android/src/main/libs', 'libs'
    }
}

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: This command opens the Android Capacitor project in Android Studio for more control over the native project.

LANGUAGE: bash
CODE:
npx cap open android

----------------------------------------

TITLE: URL Translation Methods
DESCRIPTION: Declarations for methods that handle URL translation between web view and native file system contexts.

LANGUAGE: swift
CODE:
func localURL(fromWebURL webURL: URL?) -> URL?
func portablePath(fromLocalURL localURL: URL?) -> URL?

----------------------------------------

TITLE: Package.json Plugin Reference
DESCRIPTION: Shows how the local plugin appears in package.json dependencies.

LANGUAGE: json
CODE:
"echo": "file:../path/to/echo"

----------------------------------------

TITLE: Handling Null Values in TypeScript
DESCRIPTION: Example of a TypeScript object containing null values that will be passed to a Capacitor plugin call.

LANGUAGE: typescript
CODE:
{ 'foo': null, 'bar': [1, 2, null, 4]}

----------------------------------------

TITLE: Adding Platform Support
DESCRIPTION: Commands to add iOS and Android platform support to the Capacitor project.

LANGUAGE: bash
CODE:
npx cap add ios
npx cap add android

----------------------------------------

TITLE: Installing and Running Jetifier for AndroidX Migration
DESCRIPTION: Commands to install and run jetifier tool to fix android.support.* package errors by migrating to AndroidX dependencies. This is a workaround for plugins using older Android support libraries.

LANGUAGE: bash
CODE:
npm install jetifier
npx jetify
npx cap sync android

----------------------------------------

TITLE: Installing Screen Orientation Plugin with NPM
DESCRIPTION: Commands to install the @capacitor/screen-orientation plugin and sync with the project.

LANGUAGE: bash
CODE:
npm install @capacitor/screen-orientation
npx cap sync

----------------------------------------

TITLE: Updating Android Plugin Annotation
DESCRIPTION: Replace the deprecated @NativePlugin annotation with the new @CapacitorPlugin annotation, updating the permissions attribute to use @Permission annotations.

LANGUAGE: java
CODE:
@CapacitorPlugin(
    name = "FooBar",
    permissions = {
        @Permission(strings = { Manifest.permission.FOO }, alias = "foo"),
        @Permission(strings = { Manifest.permission.BAR }, alias = "bar")
    }
)
public class FooBarPlugin extends Plugin {
    // Plugin implementation
}

----------------------------------------

TITLE: Setting Keep Alive Flag in iOS
DESCRIPTION: Code to set the keepAlive property on a plugin call in iOS, allowing for multiple completions. This enables the call to persist for repeated resolve() invocations.

LANGUAGE: swift
CODE:
call.keepAlive = true

----------------------------------------

TITLE: Installing Camera Capacitor Plugin
DESCRIPTION: Instructions for installing the @capacitor/camera plugin using npm and syncing the project.

LANGUAGE: bash
CODE:
npm install @capacitor/camera
npx cap sync

----------------------------------------

TITLE: Using Google Maps in Angular Component
DESCRIPTION: Example of how to use the Google Maps Capacitor plugin in an Angular component.

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';

@Component({
  template: `
    <capacitor-google-map #map></capacitor-google-map>
    <button (click)="createMap()">Create Map</button>
  `,
  styles: [
    `
      capacitor-google-map {
        display: inline-block;
        width: 275px;
        height: 400px;
      }
    `,
  ],
})
export class MyMap {
  @ViewChild('map')
  mapRef: ElementRef<HTMLElement>;
  newMap: GoogleMap;

  async createMap() {
    this.newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.apiKey,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9,
        },
        zoom: 8,
      },
    });
  }
}

----------------------------------------

TITLE: Checking for Native Platform in TypeScript
DESCRIPTION: Shows how to use the isNative property to check if the app is running on a native platform.

LANGUAGE: typescript
CODE:
if (Capacitor.isNative) {
  // do something
}

----------------------------------------

TITLE: Updating Gradle Plugin Version for Capacitor 6.0
DESCRIPTION: Updates the Gradle plugin version to 8.2.1 in the build.gradle file.

LANGUAGE: diff
CODE:
    dependencies {
-       classpath 'com.android.tools.build:gradle:8.0.0'
+       classpath 'com.android.tools.build:gradle:8.2.1'
    }

----------------------------------------

TITLE: Installing Ionic CLI
DESCRIPTION: Command to install the latest version of Ionic CLI globally

LANGUAGE: bash
CODE:
npm install -g @ionic/cli

----------------------------------------

TITLE: Implementing ScreenOrientation Plugin Base in Swift
DESCRIPTION: Basic Swift implementation of the ScreenOrientation plugin class with placeholder methods for orientation, lock, and unlock functionality.

LANGUAGE: swift
CODE:
import Foundation
import Capacitor

@objc(ScreenOrientationPlugin)
public class ScreenOrientationPlugin: CAPPlugin {

  @objc public func orientation(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func lock(_ call: CAPPluginCall) {
    call.resolve()
  }

  @objc public func unlock(_ call: CAPPluginCall) {
    call.resolve();
  }
}

----------------------------------------

TITLE: Initializing Capacitor Project with CLI
DESCRIPTION: Command to initialize a new Capacitor project configuration. Requires two mandatory parameters: appName for the application name and appID for the unique identifier. Optionally accepts --web-dir parameter to specify an existing web application directory.

LANGUAGE: bash
CODE:
npx cap init <appName> <appID>

----------------------------------------

TITLE: Configuring App Name in Android Strings XML
DESCRIPTION: Demonstrates how to set the application name and activity title in strings.xml resource file

LANGUAGE: xml
CODE:
<string name="app_name">MyApp</string>

LANGUAGE: xml
CODE:
<string name="title_activity_main">MyApp</string>

----------------------------------------

TITLE: Installing Camera Capacitor Plugin
DESCRIPTION: Instructions for installing the @capacitor/camera plugin using npm and syncing the project.

LANGUAGE: bash
CODE:
npm install @capacitor/camera
npx cap sync

----------------------------------------

TITLE: Handling Arrays with Null Values in Swift
DESCRIPTION: Demonstrates different approaches to handling arrays that may contain null values in Swift, including type casting and using Capacitor's convenience methods.

LANGUAGE: swift
CODE:
if let values = call.getArray("bar") {
    // NEUTRAL: the array is all valid objects, so this block will run, but each value will need to be typed individually
}
if let values = call.getArray("bar", Int?) {
    // BAD: the array is a mix of `Int` and `NSNull` and can't be cast to `Int?`, so this block won't run
}
if let values = call.getArray("bar").capacitor.replacingNullValues() as? [Int?] {
    // GOOD: `values` is now cast to `Int?` with `nil` at index 2
}

----------------------------------------

TITLE: Opening Native IDEs
DESCRIPTION: Commands to open iOS and Android native IDEs for development.

LANGUAGE: bash
CODE:
npx cap open ios
npx cap open android

----------------------------------------

TITLE: Updating Android Gradle Configuration
DESCRIPTION: Updates compileSdkVersion and targetSdkVersion to 30 in the Android build.gradle file.

LANGUAGE: gradle
CODE:
android {
    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 30
    defaultConfig {
        minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 21
        targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 30
    }
}

----------------------------------------

TITLE: Setting iOS Scheme in Capacitor Configuration
DESCRIPTION: Example of how to set the iOS scheme in the Capacitor configuration file to match the Cordova ionic:// scheme.

LANGUAGE: json
CODE:
{
  "server": {
    "iosScheme": "ionic"
  }
}

----------------------------------------

TITLE: Plugin Package Dependencies
DESCRIPTION: Example of local plugin dependency in package.json.

LANGUAGE: json
CODE:
"echo": "file:../path/to/echo"

----------------------------------------

TITLE: Conditional Rendering Based on Screen Orientation in JSX
DESCRIPTION: This JSX snippet demonstrates how to conditionally render different UI components based on the current screen orientation. It checks if the orientation includes 'portrait' or 'landscape' to determine which design to show.

LANGUAGE: jsx
CODE:
{
  orientation.includes('portrait') &&
    {
      /* Provide a button that will rotate and lock the screen orientation to landscape mode. */
    };
}
{
  orientation.includes('landscape') &&
    {
      /* Let the user "sign" and unlock screen orientation through a confirmation button. */
    };
}

----------------------------------------

TITLE: Installing Geolocation Plugin with npm
DESCRIPTION: Commands to install the Capacitor Geolocation plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/geolocation
npx cap sync

----------------------------------------

TITLE: Keyboard Configuration in JSON
DESCRIPTION: JSON configuration example for keyboard settings including resize mode, style, and full screen behavior

LANGUAGE: json
CODE:
{
  "plugins": {
    "Keyboard": {
      "resize": "body",
      "style": "DARK",
      "resizeOnFullScreen": true
    }
  }
}

----------------------------------------

TITLE: Updating Ionic Native Plugins in Capacitor Project
DESCRIPTION: Commands to update an Ionic Native JavaScript library, reinstall the corresponding Cordova plugin, and update the Capacitor project. This ensures that both the wrapper and the plugin are updated to the latest versions.

LANGUAGE: bash
CODE:
npm install @ionic-native/javascript-package-name@2
npm install cordova-plugin-name@2
npx cap update

----------------------------------------

TITLE: Installing Geolocation Plugin with npm
DESCRIPTION: Commands to install the Capacitor Geolocation plugin and sync the native projects

LANGUAGE: bash
CODE:
npm install @capacitor/geolocation
npx cap sync

----------------------------------------

TITLE: Array Handling with Null Values in Swift
DESCRIPTION: Examples of handling arrays that may contain null values, including type casting approaches.

LANGUAGE: swift
CODE:
if let values = call.getArray("bar").capacitor.replacingNullValues() as? [Int?] {
    // GOOD: `values` is now cast to `Int?` with `nil` at index 2
}

----------------------------------------

TITLE: Implementing Echo Plugin in Swift
DESCRIPTION: Creates a custom Capacitor plugin that echoes back a string value. The plugin extends CAPPlugin and implements CAPBridgedPlugin to enable WebView accessibility.

LANGUAGE: swift
CODE:
import Capacitor

@objc(EchoPlugin)
public class EchoPlugin: CAPPlugin, CAPBridgedPlugin {
    public let identifier = "EchoPlugin"
    public let jsName = "Echo"
    public let pluginMethods: [CAPPluginMethod] = [
        CAPPluginMethod(name: "echo", returnType: CAPPluginReturnPromise)
    ]

    @objc func echo(_ call: CAPPluginCall) {
        let value = call.getString("value") ?? ""
        call.resolve(["value": value])
    }
}

----------------------------------------

TITLE: Scanning Barcode with Capacitor Plugin
DESCRIPTION: TypeScript interface for the scanBarcode method, which initiates a barcode scan with given options and returns a Promise with the scan result.

LANGUAGE: typescript
CODE:
scanBarcode(options: CapacitorBarcodeScannerOptions) => Promise<CapacitorBarcodeScannerScanResult>

----------------------------------------

TITLE: Registering Web Implementation of ScreenOrientation Plugin in TypeScript
DESCRIPTION: Updates the ScreenOrientation variable to register the ScreenOrientationWeb class as the web implementation of the plugin.

LANGUAGE: typescript
CODE:
const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
  {
    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),
  },
);

----------------------------------------

TITLE: Unlocking Screen Orientation
DESCRIPTION: Implementation of screen orientation unlocking functionality.

LANGUAGE: typescript
CODE:
onClick={() => ScreenOrientation.unlock()}

----------------------------------------

TITLE: Installing Push Notifications Plugin
DESCRIPTION: Commands to install the Capacitor Push Notifications plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/push-notifications
npx cap sync

----------------------------------------

TITLE: Implementing Void Return Method in Java for Android
DESCRIPTION: This snippet shows how to annotate a void return method in Java for an Android Capacitor plugin. The method is annotated with @PluginMethod and specifies RETURN_NONE as the return type.

LANGUAGE: java
CODE:
@PluginMethod(returnType = PluginMethod.RETURN_NONE)
public void method1(PluginCall call) {
}

----------------------------------------

TITLE: Updating Android SDK Versions in build.gradle
DESCRIPTION: Updates the compileSdkVersion and targetSdkVersion from 32 to 33 in the Android build configuration.

LANGUAGE: diff
CODE:
# build.gradle

android {
-    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 32
+    compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33
-    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 32
+    targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33

----------------------------------------

TITLE: Writing to Clipboard in TypeScript
DESCRIPTION: This snippet shows the TypeScript function signature for writing data to the clipboard using the Clipboard API.

LANGUAGE: typescript
CODE:
write(options: WriteOptions) => Promise<void>

----------------------------------------

TITLE: Registering ScreenOrientation Plugin in TypeScript
DESCRIPTION: This code registers the ScreenOrientation plugin using Capacitor's registerPlugin function. It imports the plugin interface and sets up the plugin object for use in the application.

LANGUAGE: typescript
CODE:
import { registerPlugin } from '@capacitor/core';

import type { ScreenOrientationPlugin } from './definitions';

const ScreenOrientation = registerPlugin<ScreenOrientationPlugin>(
  'ScreenOrientation',
  {
    web: () => import('./web').then(m => new m.ScreenOrientationWeb()),
  },
);

export * from './definitions';
export { ScreenOrientation };

----------------------------------------

TITLE: Installing Capacitor 3 CLI and Core
DESCRIPTION: Command to install the latest Capacitor 3 CLI and Core packages.

LANGUAGE: bash
CODE:
npm install @capacitor/cli@latest-3 @capacitor/core@latest-3

----------------------------------------

TITLE: Committing Project Changes
DESCRIPTION: Shows how to commit changes to the filesystem after making modifications to the project configuration.

LANGUAGE: typescript
CODE:
await project.commit();

----------------------------------------

TITLE: Installing Capacitor 3.0 CLI and Core
DESCRIPTION: Command to update the Capacitor CLI and Core packages to version 3

LANGUAGE: bash
CODE:
npm install @capacitor/cli@latest-3 @capacitor/core@latest-3

----------------------------------------

TITLE: Generating Platform-Specific Resources
DESCRIPTION: Commands to generate and copy resource images for iOS and Android platforms

LANGUAGE: bash
CODE:
cordova-res ios --skip-config --copy
cordova-res android --skip-config --copy

----------------------------------------

TITLE: Updating Google Services Plugin Version
DESCRIPTION: This diff snippet shows how to update the Google Services plugin version in the Android build.gradle file.

LANGUAGE: diff
CODE:
     dependencies {
         classpath 'com.android.tools.build:gradle:4.1.1'
-        classpath 'com.google.gms:google-services:4.2.0'
+        classpath 'com.google.gms:google-services:4.3.3'

         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }

----------------------------------------

TITLE: Installing App Launcher Plugin with npm
DESCRIPTION: Commands to install the App Launcher plugin and sync with Capacitor

LANGUAGE: bash
CODE:
npm install @capacitor/app-launcher
npx cap sync

----------------------------------------

TITLE: Android Product Flavors Configuration
DESCRIPTION: Gradle configuration for setting up Android product flavors with environment dimensions

LANGUAGE: groovy
CODE:
flavorDimensions = ["environment"]
productFlavors {
  dev {
      dimension "environment"
      manifestPlaceholders = [displayName:"My App"]
  }
  qa {
      dimension "environment"
      applicationIdSuffix ".qa"
      manifestPlaceholders = [displayName:"My App - QA"]
  }
}

----------------------------------------

TITLE: Creating Android Project with Capacitor CLI
DESCRIPTION: Commands to add Android platform to an existing Capacitor project and sync dependencies. The 'npx cap add android' command creates the Android project, while 'npx cap sync' updates dependencies and copies web assets.

LANGUAGE: bash
CODE:
npx cap add android
npx cap sync

----------------------------------------

TITLE: Updating Cordova Plugins in Capacitor Project
DESCRIPTION: Commands to update a Cordova plugin to the latest version and update the Capacitor project. This ensures that Capacitor picks up the changes from the updated plugin.

LANGUAGE: bash
CODE:
npm install cordova-plugin-name@2
npx cap update

----------------------------------------

TITLE: Jasmine Mock Implementation Example
DESCRIPTION: Example of using Jasmine to mock and test the Storage plugin implementation in a component test.

LANGUAGE: typescript
CODE:
it("gets the first and last name", async () => {
    spyOn(Storage, 'get');
    (Storage.get as any)
      .withArgs({ key: 'firstName' })
      .and.returnValue(Promise.resolve({ value: 'Jason' }));
    (Storage.get as any)
      .withArgs({ key: 'lastName' })
      .and.returnValue(Promise.resolve({ value: 'Jones' }));

    fixture.detectChanges();
    await fixture.whenRenderingDone();

    expect(component.firstName).toEqual('Jason');
    expect(component.lastName).toEqual('Jones');
  });

  it('clears the storage', () => {
    spyOn(Storage, 'clear');
    click(clear.nativeElement);
    fixture.detectChanges();
    expect(Storage.clear).toHaveBeenCalledTimes(1);
  });

----------------------------------------

TITLE: Installing @capacitor/haptics Plugin
DESCRIPTION: Command to install the @capacitor/haptics plugin and sync the project.

LANGUAGE: bash
CODE:
npm install @capacitor/haptics
npx cap sync

----------------------------------------

TITLE: React Google Maps Implementation
DESCRIPTION: Example of implementing Google Maps in a React application with TypeScript

LANGUAGE: typescript
CODE:
import { GoogleMap } from '@capacitor/google-maps';
import { useRef } from 'react';

const MyMap: React.FC = () => {
  const mapRef = useRef<HTMLElement>();
  let newMap: GoogleMap;

  async function createMap() {
    if (!mapRef.current) return;

    newMap = await GoogleMap.create({
      id: 'my-cool-map',
      element: mapRef.current,
      apiKey: process.env.REACT_APP_YOUR_API_KEY_HERE,
      config: {
        center: {
          lat: 33.6,
          lng: -117.9
        },
        zoom: 8
      }
    })
  }

  return (
    <div className="component-wrapper">
      <capacitor-google-map ref={mapRef} style={{
        display: 'inline-block',
        width: 275,
        height: 400
      }}></capacitor-google-map>

      <button onClick={createMap}>Create Map</button>
    </div>
  )
}

----------------------------------------

TITLE: Haptics Notification API Definition
DESCRIPTION: TypeScript interface definition for the notification() method with options parameter

LANGUAGE: typescript
CODE:
notification(options?: NotificationOptions | undefined) => Promise<void>

----------------------------------------

TITLE: Installing @capacitor/clipboard Plugin
DESCRIPTION: Commands to install the @capacitor/clipboard plugin and synchronize the project.

LANGUAGE: bash
CODE:
npm install @capacitor/clipboard
npx cap sync

----------------------------------------

TITLE: Installing Capacitor 2.0 Core Dependencies
DESCRIPTION: Commands to update Capacitor CLI and Core dependencies to version 2.0

LANGUAGE: bash
CODE:
npm install @capacitor/cli@2 @capacitor/core@2

----------------------------------------

TITLE: Installing Toast Capacitor Plugin
DESCRIPTION: Commands to install the Toast plugin and sync with Capacitor.

LANGUAGE: bash
CODE:
npm install @capacitor/toast
npx cap sync

----------------------------------------

TITLE: Using Screen Reader API in TypeScript
DESCRIPTION: Example usage of the Screen Reader API, including adding a state change listener, checking if screen reader is enabled, and using text-to-speech functionality.

LANGUAGE: typescript
CODE:
import { ScreenReader } from '@capacitor/screen-reader';

ScreenReader.addListener('stateChange', ({ value }) => {
  console.log(`Screen reader is now ${value ? 'on' : 'off'}`);
});

const checkScreenReaderEnabled = async () => {
  const { value } = await ScreenReader.isEnabled();

  console.log('Voice over enabled? ' + value);
};

const sayHello = async () => {
  await ScreenReader.speak({ value: 'Hello World!' });
};

----------------------------------------

TITLE: Installing Capacitor CLI and Core v3
DESCRIPTION: Command to upgrade Capacitor CLI and Core packages to version 3

LANGUAGE: bash
CODE:
npm install @capacitor/cli@latest-3 @capacitor/core@latest-3

----------------------------------------

TITLE: Updating Android Project Variables
DESCRIPTION: Updated minimum version requirements for Android project dependencies in variables.gradle file.

LANGUAGE: groovy
CODE:
minSdkVersion = 22
compileSdkVersion = 33
targetSdkVersion = 33
androidxActivityVersion = '1.7.0'
androidxAppCompatVersion = '1.6.1'
androidxCoordinatorLayoutVersion = '1.2.0'
androidxCoreVersion = '1.10.0'
androidxFragmentVersion = '1.5.6'
coreSplashScreenVersion = '1.0.0'
androidxWebkitVersion = '1.6.1'
junitVersion = '4.13.2'
androidxJunitVersion = '1.1.5'
androidxEspressoCoreVersion = '3.5.1'
cordovaAndroidVersion = '10.1.1'

----------------------------------------

TITLE: Listing Installed Capacitor and Cordova Plugins
DESCRIPTION: Command to display a list of Capacitor and Cordova plugins installed in the project, including their exact version numbers. This is useful for determining the current state of installed plugins.

LANGUAGE: bash
CODE:
npx cap ls

----------------------------------------

TITLE: Opening Browser with Options Interface
DESCRIPTION: API method definition for opening a browser with configurable options.

LANGUAGE: typescript
CODE:
open(options: OpenOptions) => Promise<void>