TITLE: Optimizing Props Stability in Vue.js Components
DESCRIPTION: Illustrates how to improve update performance by computing derived data in the parent component instead of passing frequently changing props to child components.

LANGUAGE: vue
CODE:
<ListItem
  v-for="item in list"
  :id="item.id"
  :active="item.id === activeId" />

----------------------------------------

TITLE: Basic v-model Usage with Text Input in Vue
DESCRIPTION: Demonstrates the basic usage of v-model directive with a text input, showing two-way data binding between the input value and a reactive variable.

LANGUAGE: vue
CODE:
<p>Message is: {{ message }}</p>
<input v-model="message" placeholder="edit me" />

----------------------------------------

TITLE: Using Refs in Vue.js Single-File Components with <script setup>
DESCRIPTION: Demonstrates the simplified usage of refs in Single-File Components using <script setup>. The ref and related functions are automatically exposed to the template without needing an explicit return statement.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const count = ref(0)

function increment() {
  count.value++
}
</script>

<template>
  <button @click="increment">
    {{ count }}
  </button>
</template>

----------------------------------------

TITLE: Defining Basic Vue Component (Options API)
DESCRIPTION: Example of defining a basic Vue component using Options API with a data property and click counter functionality.

LANGUAGE: vue
CODE:
<script>
export default {
  data() {
    return {
      count: 0
    }
  }
}
</script>

<template>
  <button @click="count++">You clicked me {{ count }} times.</button>
</template>

----------------------------------------

TITLE: Basic Vue.js Application Setup - Options API
DESCRIPTION: Demonstrates creating a basic Vue application using Options API with a counter component. Shows how to create the app instance and handle state using the data option.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

createApp({
  data() {
    return {
      count: 0
    }
  }
}).mount('#app')

----------------------------------------

TITLE: Creating Value Watchers with watch()
DESCRIPTION: Watches reactive data sources and calls a callback when sources change. Supports watching multiple sources, deep watching, and effect cleanup.

LANGUAGE: typescript
CODE:
function watch<T>(
  source: WatchSource<T>,
  callback: WatchCallback<T>,
  options?: WatchOptions
): WatchHandle

LANGUAGE: javascript
CODE:
const state = reactive({ count: 0 })
watch(
  () => state.count,
  (count, prevCount) => {
    /* ... */
  }
)

----------------------------------------

TITLE: Attribute Binding with v-bind
DESCRIPTION: Demonstrates how to bind HTML attributes using v-bind directive and its shorthand syntax.

LANGUAGE: vue-html
CODE:
<div v-bind:id="dynamicId"></div>

----------------------------------------

TITLE: Creating Reactive References with ref()
DESCRIPTION: Creates a reactive and mutable reference object with a .value property containing the inner value. The ref object tracks reads/writes and triggers reactive updates.

LANGUAGE: typescript
CODE:
function ref<T>(value: T): Ref<UnwrapRef<T>>

interface Ref<T> {
  value: T
}

LANGUAGE: javascript
CODE:
const count = ref(0)
console.log(count.value) // 0

count.value = 1
console.log(count.value) // 1

----------------------------------------

TITLE: Installing Vue Project with Package Managers
DESCRIPTION: Commands to create a new Vue project using different package managers (npm, pnpm, yarn, bun) via create-vue scaffolding tool

LANGUAGE: sh
CODE:
$ npm create vue@latest

LANGUAGE: sh
CODE:
$ pnpm create vue@latest

LANGUAGE: sh
CODE:
# For Yarn (v1+)
$ yarn create vue

# For Yarn Modern (v2+)
$ yarn create vue@latest

# For Yarn ^v4.11
$ yarn dlx create-vue@latest

LANGUAGE: sh
CODE:
$ bun create vue@latest

----------------------------------------

TITLE: Vue Single-File Component - Complete Example
DESCRIPTION: Comprehensive example of a Vue Single-File Component showing script, template, and style sections working together.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'
const count = ref(0)
</script>

<template>
  <button @click="count++">Count is: {{ count }}</button>
</template>

<style scoped>
button {
  font-weight: bold;
}
</style>

----------------------------------------

TITLE: Creating Vue Application Instance
DESCRIPTION: Demonstrates how to create a Vue application instance using createApp() method with both inline and imported root components.

LANGUAGE: typescript
CODE:
function createApp(rootComponent: Component, rootProps?: object): App

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({
  /* root component options */
})

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'
import App from './App.vue'

const app = createApp(App)

----------------------------------------

TITLE: Basic v-for Usage with Array in Vue.js
DESCRIPTION: Demonstrates how to use v-for directive to render a list of items from an array. Shows examples for both Composition API and Options API.

LANGUAGE: javascript
CODE:
const items = ref([{ message: 'Foo' }, { message: 'Bar' }])

LANGUAGE: javascript
CODE:
data() {
  return {
    items: [{ message: 'Foo' }, { message: 'Bar' }]
  }
}

LANGUAGE: vue-html
CODE:
<li v-for="item in items">
  {{ item.message }}
</li>

----------------------------------------

TITLE: Creating Reactive Objects with reactive()
DESCRIPTION: Creates a reactive proxy of an object with deep reactivity. Automatically unwraps refs while maintaining reactivity. The proxy is not equal to the original object.

LANGUAGE: typescript
CODE:
function reactive<T extends object>(target: T): UnwrapNestedRefs<T>

LANGUAGE: javascript
CODE:
const obj = reactive({ count: 0 })
obj.count++

----------------------------------------

TITLE: Two-way Binding with v-model Directive in Vue
DESCRIPTION: The v-model directive creates two-way data bindings on form inputs and components. It automatically picks the correct way to update the element based on the input type.

LANGUAGE: vue
CODE:
<input v-model="message">
<textarea v-model="message"></textarea>
<select v-model="selected">
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>

----------------------------------------

TITLE: Creating Vue Application Instance in JavaScript
DESCRIPTION: This snippet demonstrates how to create a new Vue application instance using the createApp function. It's the starting point for any Vue application.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({
  /* root component options */
})

----------------------------------------

TITLE: Emitting Events in Vue Template
DESCRIPTION: Demonstrates how to emit a custom event directly in a Vue template using the $emit method.

LANGUAGE: vue-html
CODE:
<button @click="$emit('someEvent')">Click Me</button>

----------------------------------------

TITLE: Vue Options API Component Example
DESCRIPTION: Demonstrates a complete component using Options API with lifecycle hooks, methods, and state management.

LANGUAGE: vue
CODE:
<script>
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  },
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>

----------------------------------------

TITLE: Basic Text Interpolation in Vue
DESCRIPTION: Demonstrates basic text interpolation using Vue's mustache syntax (double curly braces) to display dynamic content.

LANGUAGE: vue-html
CODE:
<span>Message: {{ msg }}</span>

----------------------------------------

TITLE: Dynamic Select Options with v-for and v-model in Vue
DESCRIPTION: Shows how to dynamically render select options using v-for and bind them with v-model.

LANGUAGE: javascript
CODE:
const selected = ref('A')

const options = ref([
  { text: 'One', value: 'A' },
  { text: 'Two', value: 'B' },
  { text: 'Three', value: 'C' }
])

LANGUAGE: vue
CODE:
<select v-model="selected">
  <option v-for="option in options" :value="option.value">
    {{ option.text }}
  </option>
</select>

<div>Selected: {{ selected }}</div>

----------------------------------------

TITLE: Props Validation Configuration
DESCRIPTION: Comprehensive example of prop validation including type checks, required props, defaults, and custom validators

LANGUAGE: js
CODE:
defineProps({
  propA: Number,
  propB: [String, Number],
  propC: {
    type: String,
    required: true
  },
  propD: {
    type: [String, null],
    required: true
  },
  propE: {
    type: Number,
    default: 100
  },
  propF: {
    type: Object,
    default(rawProps) {
      return { message: 'hello' }
    }
  },
  propG: {
    validator(value, props) {
      return ['success', 'warning', 'danger'].includes(value)
    }
  }
})

----------------------------------------

TITLE: Defining a Vue Single-File Component with Composition API
DESCRIPTION: This snippet shows the structure of a Vue Single-File Component using the Composition API with <script setup>. It demonstrates reactive data management, template rendering, and component-scoped styling.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'
const greeting = ref('Hello World!')
</script>

<template>
  <p class="greeting">{{ greeting }}</p>
</template>

<style>
.greeting {
  color: red;
  font-weight: bold;
}
</style>

----------------------------------------

TITLE: Creating Global and Local State with Composition API
DESCRIPTION: This snippet demonstrates how to create and share both global and local state using Vue's Composition API. It uses ref to create reactive state and exports a composable function.

LANGUAGE: javascript
CODE:
import { ref } from 'vue'

// global state, created in module scope
const globalCount = ref(1)

export function useCount() {
  // local state, created per-component
  const localCount = ref(1)

  return {
    globalCount,
    localCount
  }
}

----------------------------------------

TITLE: Basic Script Setup Usage in Vue
DESCRIPTION: Basic example of using <script setup> syntax in Vue SFC to declare and expose variables to the template.

LANGUAGE: vue
CODE:
<script setup>
console.log('hello script setup')
</script>

----------------------------------------

TITLE: Basic Vue Component with setup() Hook
DESCRIPTION: Demonstrates basic usage of setup() hook with ref for reactive state management and template integration. Shows how to expose reactive state to both template and other Options API hooks.

LANGUAGE: vue
CODE:
<script>
import { ref } from 'vue'

export default {
  setup() {
    const count = ref(0)

    // expose to template and other options API hooks
    return {
      count
    }
  },

  mounted() {
    console.log(this.count) // 0
  }
}
</script>

<template>
  <button @click="count++">{{ count }}</button>
</template>

----------------------------------------

TITLE: Defining Vue Component with TypeScript using defineComponent
DESCRIPTION: Example showing how to define a Vue component using TypeScript with defineComponent() to enable proper type inference for component options including props, data, and lifecycle methods.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'

export default defineComponent({
  // type inference enabled
  props: {
    name: String,
    msg: { type: String, required: true }
  },
  data() {
    return {
      count: 1
    }
  },
  mounted() {
    this.name // type: string | undefined
    this.msg // type: string
    this.count // type: number
  }
})

----------------------------------------

TITLE: Defining a Vue Single-File Component with Options API
DESCRIPTION: This snippet demonstrates the structure of a Vue Single-File Component using the Options API. It includes a script section for component logic, a template for the view, and a style section for CSS.

LANGUAGE: vue
CODE:
<script>
export default {
  data() {
    return {
      greeting: 'Hello World!'
    }
  }
}
</script>

<template>
  <p class="greeting">{{ greeting }}</p>
</template>

<style>
.greeting {
  color: red;
  font-weight: bold;
}
</style>

----------------------------------------

TITLE: Component Naming Examples in Vue
DESCRIPTION: Demonstrates the correct multi-word naming convention for Vue components to prevent conflicts with HTML elements.

LANGUAGE: vue-html
CODE:
<!-- Bad Examples -->
<Item />
<item></item>

<!-- Good Examples -->
<TodoItem />
<todo-item></todo-item>

----------------------------------------

TITLE: Writable Computed Property Example
DESCRIPTION: Example of implementing a writable computed property with both getter and setter functions.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      firstName: 'John',
      lastName: 'Doe'
    }
  },
  computed: {
    fullName: {
      get() {
        return this.firstName + ' ' + this.lastName
      },
      set(newValue) {
        [this.firstName, this.lastName] = newValue.split(' ')
      }
    }
  }
}

----------------------------------------

TITLE: Attribute Binding with v-bind Directive in Vue
DESCRIPTION: The v-bind directive dynamically binds attributes or component props to expressions. It supports various value types and has shorthand syntax using ':'.

LANGUAGE: vue
CODE:
<!-- bind an attribute -->
<img v-bind:src="imageSrc" />

<!-- shorthand -->
<img :src="imageSrc" />

<!-- class binding -->
<div :class="{ red: isRed }"></div>

<!-- style binding -->
<div :style="{ fontSize: size + 'px' }"></div>

<!-- binding an object of attributes -->
<div v-bind="{ id: someProp, 'other-attr': otherProp }"></div>

----------------------------------------

TITLE: Computed Property Implementation (Composition API)
DESCRIPTION: Implementation of a computed property using Composition API with computed ref to determine published books status.

LANGUAGE: vue
CODE:
<script setup>
import { reactive, computed } from 'vue'

const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})

const publishedBooksMessage = computed(() => {
  return author.books.length > 0 ? 'Yes' : 'No'
})
</script>

<template>
  <p>Has published books:</p>
  <span>{{ publishedBooksMessage }}</span>
</template>

----------------------------------------

TITLE: Basic Vue SFC Structure Example
DESCRIPTION: Demonstrates the fundamental structure of a Vue Single-File Component with template, script, style, and custom blocks.

LANGUAGE: vue
CODE:
<template>
  <div class="example">{{ msg }}</div>
</template>

<script>
export default {
  data() {
    return {
      msg: 'Hello world!'
    }
  }
}
</script>

<style>
.example {
  color: red;
}
</style>

<custom1>
  This could be e.g. documentation for the component.
</custom1>

----------------------------------------

TITLE: Configuring Vue Application Error Handler in JavaScript
DESCRIPTION: This snippet shows how to configure an app-level error handler for a Vue application. This handler will capture errors from all descendant components.

LANGUAGE: javascript
CODE:
app.config.errorHandler = (err) => {
  /* handle error */
}

----------------------------------------

TITLE: Event Handling with v-on Directive in Vue
DESCRIPTION: The v-on directive attaches event listeners to elements. It supports method handlers, inline statements, and modifiers for common operations like event propagation control.

LANGUAGE: vue
CODE:
<!-- method handler -->
<button v-on:click="doThis"></button>

<!-- inline statement -->
<button v-on:click="doThat('hello', $event)"></button>

<!-- shorthand -->
<button @click="doThis"></button>

<!-- stop propagation -->
<button @click.stop="doThis"></button>

<!-- prevent default -->
<button @click.prevent="doThis"></button>

----------------------------------------

TITLE: Configuring Error Handling for Production in Vue
DESCRIPTION: This snippet demonstrates how to set up an app-level error handler in Vue to report errors to tracking services. It shows the creation of a Vue app instance and configuration of the errorHandler property.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp(...)

app.config.errorHandler = (err, instance, info) => {
  // report error to tracking services
}

----------------------------------------

TITLE: Basic Props Declaration in Vue 3 Composition API
DESCRIPTION: Shows how to declare props using defineProps macro in a Single File Component with <script setup>

LANGUAGE: vue
CODE:
<script setup>
const props = defineProps(['foo'])

console.log(props.foo)
</script>

----------------------------------------

TITLE: Registering Lifecycle Hook with Options API in Vue
DESCRIPTION: Example of registering a mounted lifecycle hook using Vue's Options API. The hook logs a message when the component is mounted to the DOM.

LANGUAGE: javascript
CODE:
export default {
  mounted() {
    console.log(`the component is now mounted.`)
  }
}

----------------------------------------

TITLE: Creating Multiple Vue Application Instances in JavaScript
DESCRIPTION: This snippet shows how to create and mount multiple Vue application instances on the same page, each with its own configuration and global assets.

LANGUAGE: javascript
CODE:
const app1 = createApp({
  /* ... */
})
app1.mount('#container-1')

const app2 = createApp({
  /* ... */
})
app2.mount('#container-2')

----------------------------------------

TITLE: Emitting Events with Arguments
DESCRIPTION: Shows how to emit an event with additional arguments to pass data to the parent component.

LANGUAGE: vue-html
CODE:
<button @click="$emit('increaseBy', 1)">
  Increase by 1
</button>

----------------------------------------

TITLE: Method Handler with Event Object in Vue.js
DESCRIPTION: Shows how to handle events using component methods, demonstrating access to the native DOM event object and component instance.

LANGUAGE: javascript
CODE:
const name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}

LANGUAGE: vue-html
CODE:
<!-- `greet` is the name of the method defined above -->\n<button @click="greet">Greet</button>

----------------------------------------

TITLE: Basic v-model Implementation with Composition API
DESCRIPTION: Shows how to implement v-model on a component using the defineModel macro in Vue 3.4+.

LANGUAGE: vue
CODE:
<script setup>
const model = defineModel()

function update() {
  model.value++
}
</script>

<template>
  <div>Parent bound v-model is: {{ model }}</div>
  <button @click="update">Increment</button>
</template>

----------------------------------------

TITLE: Defining Component Data in Vue
DESCRIPTION: Demonstrates how to define the initial reactive state for a Vue component using the data option. The function returns a plain JavaScript object that becomes reactive.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return { a: 1 }
  },
  created() {
    console.log(this.a) // 1
    console.log(this.$data) // { a: 1 }
  }
}

----------------------------------------

TITLE: Binding Styles to Arrays in Vue
DESCRIPTION: Shows how to bind multiple style objects to an element using an array.

LANGUAGE: vue-html
CODE:
<div :style="[baseStyles, overridingStyles]"></div>

----------------------------------------

TITLE: Binding HTML Classes to Objects in Vue Template
DESCRIPTION: Demonstrates using v-bind to dynamically toggle classes based on data properties. The presence of the 'active' class is determined by the truthiness of isActive.

LANGUAGE: vue-html
CODE:
<div :class="{ active: isActive }"></div>

----------------------------------------

TITLE: Mouse Position Tracking Composable in Vue
DESCRIPTION: A reusable composable function that encapsulates mouse tracking logic using Vue's Composition API.

LANGUAGE: javascript
CODE:
// mouse.js
import { ref, onMounted, onUnmounted } from 'vue'

export function useMouse() {
  const x = ref(0)
  const y = ref(0)

  function update(event) {
    x.value = event.pageX
    y.value = event.pageY
  }

  onMounted(() => window.addEventListener('mousemove', update))
  onUnmounted(() => window.removeEventListener('mousemove', update))

  return { x, y }
}

----------------------------------------

TITLE: Basic Data Structure with Composition API
DESCRIPTION: Example showing how to define reactive data structure in Vue using Composition API with reactive author object.

LANGUAGE: javascript
CODE:
const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})

----------------------------------------

TITLE: Implementing Basic Client-Side Routing in Vue (Composition API)
DESCRIPTION: A simple client-side router implementation using Vue's Composition API. Uses hash-based routing with dynamic components to handle route changes and component rendering based on URL paths.

LANGUAGE: vue
CODE:
<script setup>
import { ref, computed } from 'vue'
import Home from './Home.vue'
import About from './About.vue'
import NotFound from './NotFound.vue'

const routes = {
  '/': Home,
  '/about': About
}

const currentPath = ref(window.location.hash)

window.addEventListener('hashchange', () => {
  currentPath.value = window.location.hash
})

const currentView = computed(() => {
  return routes[currentPath.value.slice(1) || '/'] || NotFound
})
</script>

<template>
  <a href="#/">Home</a> |
  <a href="#/about">About</a> |
  <a href="#/non-existent-path">Broken Link</a>
  <component :is="currentView" />
</template>

----------------------------------------

TITLE: Select Binding with v-model in Vue
DESCRIPTION: Demonstrates v-model usage with select elements, including single and multiple selections.

LANGUAGE: vue
CODE:
<select v-model="selected">
  <option disabled value="">Please select one</option>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>

LANGUAGE: vue
CODE:
<select v-model="selected" multiple>
  <option>A</option>
  <option>B</option>
  <option>C</option>
</select>

----------------------------------------

TITLE: JavaScript Expressions in Vue Templates
DESCRIPTION: Examples of using JavaScript expressions within Vue template bindings for dynamic content.

LANGUAGE: vue-html
CODE:
{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div :id="`list-${id}`"></div>

----------------------------------------

TITLE: Using a Vue.js Component with Class Attribute
DESCRIPTION: Shows how to use a custom Vue.js component with a class attribute, demonstrating attribute inheritance.

LANGUAGE: vue-html
CODE:
<MyButton class="large" />

----------------------------------------

TITLE: Registering Lifecycle Hook with Composition API in Vue
DESCRIPTION: Example of registering an onMounted lifecycle hook using Vue's Composition API within a script setup block. The hook logs a message when the component is mounted to the DOM.

LANGUAGE: vue
CODE:
<script setup>
import { onMounted } from 'vue'

onMounted(() => {
  console.log(`the component is now mounted.`)
})
</script>

----------------------------------------

TITLE: Named Slots in Vue.js
DESCRIPTION: Shows how to use named slots to define multiple slot outlets in a single component.

LANGUAGE: vue-html
CODE:
<div class="container">
  <header>
    <slot name="header"></slot>
  </header>
  <main>
    <slot></slot>
  </main>
  <footer>
    <slot name="footer"></slot>
  </footer>
</div>

LANGUAGE: vue-html
CODE:
<BaseLayout>
  <template #header>
    <h1>Here might be a page title</h1>
  </template>

  <template #default>
    <p>A paragraph for the main content.</p>
    <p>And another one.</p>
  </template>

  <template #footer>
    <p>Here's some contact info</p>
  </template>
</BaseLayout>

----------------------------------------

TITLE: Typing reactive() in Vue 3 with TypeScript
DESCRIPTION: Demonstrates how to type reactive() objects in Vue 3 using TypeScript, including type inference and explicit interface typing.

LANGUAGE: typescript
CODE:
import { reactive } from 'vue'

// inferred type: { title: string }
const book = reactive({ title: 'Vue 3 Guide' })

interface Book {
  title: string
  year?: number
}

const book: Book = reactive({ title: 'Vue 3 Guide' })

----------------------------------------

TITLE: Reactivity with Script Setup
DESCRIPTION: Shows how to create reactive state using ref and access it in the template with automatic unwrapping.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const count = ref(0)
</script>

<template>
  <button @click="count++">{{ count }}</button>
</template>

----------------------------------------

TITLE: v-for with Index in Vue.js
DESCRIPTION: Shows how to use v-for with an additional index parameter. Includes access to parent scope properties.

LANGUAGE: javascript
CODE:
const parentMessage = ref('Parent')
const items = ref([{ message: 'Foo' }, { message: 'Bar' }])

LANGUAGE: javascript
CODE:
data() {
  return {
    parentMessage: 'Parent',
    items: [{ message: 'Foo' }, { message: 'Bar' }]
  }
}

LANGUAGE: vue-html
CODE:
<li v-for="(item, index) in items">
  {{ parentMessage }} - {{ index }} - {{ item.message }}
</li>

----------------------------------------

TITLE: Using v-if Directive in Vue.js
DESCRIPTION: Demonstrates the usage of v-if directive for conditional rendering in Vue.js. The element will only be rendered if the condition is truthy.

LANGUAGE: vue-html
CODE:
<h1 v-if="awesome">Vue is awesome!</h1>

----------------------------------------

TITLE: Vue Render Function with Stable Fragment
DESCRIPTION: Demonstrates a compiled Vue render function for a template with multiple root nodes, using a stable fragment for optimized rendering.

LANGUAGE: javascript
CODE:
export function render() {
  return (_openBlock(), _createElementBlock(_Fragment, null, [
    /* children */
  ], 64 /* STABLE_FRAGMENT */))
}

----------------------------------------

TITLE: Rendering Slot Content in Vue.js Child Component
DESCRIPTION: This snippet demonstrates how to render slot content passed from a parent component in a child component using the <slot> element as an outlet.

LANGUAGE: vue-html
CODE:
<!-- in child template -->
<slot/>

LANGUAGE: vue-html
CODE:
<!-- in child template -->
<slot></slot>

----------------------------------------

TITLE: Event Listener Inheritance in Vue.js Components
DESCRIPTION: Demonstrates how event listeners are inherited by child components in Vue.js.

LANGUAGE: vue-html
CODE:
<MyButton @click="onClick" />

----------------------------------------

TITLE: Vue Component with Composition API and TypeScript
DESCRIPTION: Demonstrates using TypeScript with Vue's Composition API, showing type inference for props in the setup function.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'

export default defineComponent({
  // type inference enabled
  props: {
    message: String
  },
  setup(props) {
    props.message // type: string | undefined
  }
})

----------------------------------------

TITLE: Implementing v-else with v-if in Vue.js
DESCRIPTION: Shows how to use v-else directive in conjunction with v-if for conditional rendering. It includes a toggle button to switch between two states.

LANGUAGE: vue-html
CODE:
<button @click="awesome = !awesome">Toggle</button>

<h1 v-if="awesome">Vue is awesome!</h1>
<h1 v-else>Oh no 😢</h1>

----------------------------------------

TITLE: v-for with an Object in Vue.js
DESCRIPTION: Demonstrates how to use v-for to iterate through object properties. Shows examples with value, key, and index.

LANGUAGE: javascript
CODE:
const myObject = reactive({
  title: 'How to do lists in Vue',
  author: 'Jane Doe',
  publishedAt: '2016-04-10'
})

LANGUAGE: javascript
CODE:
data() {
  return {
    myObject: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }
}

LANGUAGE: vue-html
CODE:
<li v-for="(value, key, index) in myObject">
  {{ index }}. {{ key }}: {{ value }}
</li>

----------------------------------------

TITLE: Props Destructuring with Reactivity
DESCRIPTION: Demonstrates how to destructure props while maintaining reactivity using toRefs and toRef utility functions.

LANGUAGE: javascript
CODE:
import { toRefs, toRef } from 'vue'

export default {
  setup(props) {
    // turn `props` into an object of refs, then destructure
    const { title } = toRefs(props)
    // `title` is a ref that tracks `props.title`
    console.log(title.value)

    // OR, turn a single property on `props` into a ref
    const title = toRef(props, 'title')
  }
}

----------------------------------------

TITLE: Reactive Provide Example
DESCRIPTION: Demonstrates providing reactive state using refs that can be updated by descendant components.

LANGUAGE: javascript
CODE:
import { ref, provide } from 'vue'

const count = ref(0)
provide('key', count)

----------------------------------------

TITLE: Dynamic Import with Async Components in Vue
DESCRIPTION: Shows how to use ES module dynamic import with defineAsyncComponent for lazy loading Vue components.

LANGUAGE: javascript
CODE:
import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
)

----------------------------------------

TITLE: Installing a Vue Plugin
DESCRIPTION: Demonstrates how to install a plugin in a Vue.js application using the app.use() method. This snippet shows the basic structure for plugin installation, including optional configuration options.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({})

app.use(myPlugin, {
  /* optional options */
})

----------------------------------------

TITLE: Checkbox Binding with v-model in Vue
DESCRIPTION: Demonstrates v-model usage with checkboxes, including single checkbox for boolean values and multiple checkboxes bound to an array.

LANGUAGE: vue
CODE:
<input type="checkbox" id="checkbox" v-model="checked" />
<label for="checkbox">{{ checked }}</label>

LANGUAGE: vue
CODE:
<input type="checkbox" id="jack" value="Jack" v-model="checkedNames" />
<label for="jack">Jack</label>

<input type="checkbox" id="john" value="John" v-model="checkedNames" />
<label for="john">John</label>

<input type="checkbox" id="mike" value="Mike" v-model="checkedNames" />
<label for="mike">Mike</label>

----------------------------------------

TITLE: Typing Component Emits in Vue 3 with TypeScript
DESCRIPTION: Shows how to type component emits using TypeScript in Vue 3, including runtime declaration, options-based, and type-based methods.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// runtime
const emit = defineEmits(['change', 'update'])

// options based
const emit = defineEmits({
  change: (id: number) => {
    // return `true` or `false` to indicate
    // validation pass / fail
  },
  update: (value: string) => {
    // return `true` or `false` to indicate
    // validation pass / fail
  }
})

// type-based
const emit = defineEmits<{
  (e: 'change', id: number): void
  (e: 'update', value: string): void
}>()

// 3.3+: alternative, more succinct syntax
const emit = defineEmits<{
  change: [id: number]
  update: [value: string]
}>()
</script>

----------------------------------------

TITLE: Template Ref in Composition API
DESCRIPTION: Demonstrates using template refs in Composition API with script setup syntax.

LANGUAGE: vue
CODE:
<script setup>
import { useTemplateRef } from 'vue'

const pRef = useTemplateRef('p')
</script>

<template>
  <p ref="p">hello</p>
</template>

----------------------------------------

TITLE: Creating a Reactive Store in Vue
DESCRIPTION: This snippet demonstrates how to create a simple reactive store using Vue's reactive function. The store contains a count state and an increment method to modify it.

LANGUAGE: javascript
CODE:
// store.js
import { reactive } from 'vue'

export const store = reactive({
  count: 0,
  increment() {
    this.count++
  }
})

----------------------------------------

TITLE: Event Validation in Options API
DESCRIPTION: Demonstrates how to perform event validation using the object syntax with the emits option in the Options API.

LANGUAGE: javascript
CODE:
export default {
  emits: {
    submit(payload: { email: string, password: string }) {
      // return `true` or `false` to indicate
      // validation pass / fail
    }
  }
}

----------------------------------------

TITLE: v-model with Textarea in Vue
DESCRIPTION: Shows how to use v-model with a textarea element for multiline text input binding.

LANGUAGE: vue
CODE:
<span>Multiline message is:</span>
<p style="white-space: pre-line;">{{ message }}</p>
<textarea v-model="message" placeholder="add multiple lines"></textarea>

----------------------------------------

TITLE: Basic Vue Watcher (Composition API)
DESCRIPTION: Shows how to implement watchers using Composition API with ref and watch functions to monitor reactive state changes.

LANGUAGE: vue
CODE:
<script setup>
import { ref, watch } from 'vue'

const question = ref('')
const answer = ref('Questions usually contain a question mark. ;-)')
const loading = ref(false)

watch(question, async (newQuestion, oldQuestion) => {
  if (newQuestion.includes('?')) {
    loading.value = true
    answer.value = 'Thinking...'
    try {
      const res = await fetch('https://yesno.wtf/api')
      answer.value = (await res.json()).answer
    } catch (error) {
      answer.value = 'Error! Could not reach the API. ' + error
    } finally {
      loading.value = false
    }
  }
})
</script>

----------------------------------------

TITLE: Modal Component Implementation (Options API)
DESCRIPTION: Implementation of a modal component using Vue's Options API with state management and styling.

LANGUAGE: vue
CODE:
<script>
export default {
  data() {
    return {
      open: false
    }
  }
}
</script>

<template>
  <button @click="open = true">Open Modal</button>

  <div v-if="open" class="modal">
    <p>Hello from the modal!</p>
    <button @click="open = false">Close</button>
  </div>
</template>

<style scoped>
.modal {
  position: fixed;
  z-index: 999;
  top: 20%;
  left: 50%;
  width: 300px;
  margin-left: -150px;
}
</style>

----------------------------------------

TITLE: Reusable Transition Component in Vue
DESCRIPTION: Demonstrates how to create a reusable transition component.

LANGUAGE: vue
CODE:
<!-- MyTransition.vue -->
<script>
// JavaScript hooks logic...
</script>

<template>
  <Transition
    name="my-transition"
    @enter="onEnter"
    @leave="onLeave">
    <slot></slot>
  </Transition>
</template>

<style>
/*
  Necessary CSS...
  Note: avoid using <style scoped> here since it
  does not apply to slot content.
*/
</style>

----------------------------------------

TITLE: Named Transition in Vue
DESCRIPTION: Shows how to use a named transition with custom CSS classes.

LANGUAGE: vue-html
CODE:
<Transition name="fade">
  ...
</Transition>

LANGUAGE: css
CODE:
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

----------------------------------------

TITLE: Event Validation in Composition API
DESCRIPTION: Shows how to perform event validation using the object syntax with defineEmits in the Composition API.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const emit = defineEmits({
  submit(payload: { email: string, password: string }) {
    // return `true` or `false` to indicate
    // validation pass / fail
  }
})
</script>

----------------------------------------

TITLE: Declaring Emitted Events in Composition API
DESCRIPTION: Shows how to declare emitted events using the defineEmits macro in the Composition API.

LANGUAGE: vue
CODE:
<script setup>
defineEmits(['inFocus', 'submit'])
</script>

----------------------------------------

TITLE: Rendering Conditional Element with v-if in Vue
DESCRIPTION: This snippet shows how to use the v-if directive to conditionally render an h1 element based on the truthiness of the 'awesome' variable.

LANGUAGE: vue-html
CODE:
<h1 v-if="awesome">Vue is awesome!</h1>

----------------------------------------

TITLE: Implementing Basic Client-Side Routing in Vue (Options API)
DESCRIPTION: A simple client-side router implementation using Vue's Options API. Uses hash-based routing with dynamic components to handle route changes and component rendering based on URL paths.

LANGUAGE: vue
CODE:
<script>
import Home from './Home.vue'
import About from './About.vue'
import NotFound from './NotFound.vue'

const routes = {
  '/': Home,
  '/about': About
}

export default {
  data() {
    return {
      currentPath: window.location.hash
    }
  },
  computed: {
    currentView() {
      return routes[this.currentPath.slice(1) || '/'] || NotFound
    }
  },
  mounted() {
    window.addEventListener('hashchange', () => {
		  this.currentPath = window.location.hash
		})
  }
}
</script>

<template>
  <a href="#/">Home</a> |
  <a href="#/about">About</a> |
  <a href="#/non-existent-path">Broken Link</a>
  <component :is="currentView" />
</template>

----------------------------------------

TITLE: Implementing Suspense Component with Fallback
DESCRIPTION: Demonstrates the basic structure of using the Suspense component in a Vue template, including the default slot for the main content and the fallback slot for the loading state.

LANGUAGE: vue
CODE:
<Suspense>
  <!-- component with nested async dependencies -->
  <Dashboard />

  <!-- loading state via #fallback slot -->
  <template #fallback>
    Loading...
  </template>
</Suspense>

----------------------------------------

TITLE: Basic Transition Usage in Vue
DESCRIPTION: Demonstrates the basic usage of the Transition component with v-if for conditional rendering.

LANGUAGE: vue-html
CODE:
<button @click="show = !show">Toggle</button>
<Transition>
  <p v-if="show">hello</p>
</Transition>

LANGUAGE: css
CODE:
.v-enter-active,
.v-leave-active {
  transition: opacity 0.5s ease;
}

.v-enter-from,
.v-leave-to {
  opacity: 0;
}

----------------------------------------

TITLE: Renderless Component Pattern in Vue.js
DESCRIPTION: Demonstrates the concept of renderless components that encapsulate logic without rendering their own markup.

LANGUAGE: vue-html
CODE:
<MouseTracker v-slot="{ x, y }">
  Mouse is at: {{ x }}, {{ y }}
</MouseTracker>

----------------------------------------

TITLE: Local Registration without Script Setup
DESCRIPTION: Shows how to register components locally using the components option in Vue 3 without <script setup>.

LANGUAGE: javascript
CODE:
import ComponentA from './ComponentA.js'

export default {
  components: {
    ComponentA
  },
  setup() {
    // ...
  }
}

----------------------------------------

TITLE: Listening to Component Events
DESCRIPTION: Demonstrates how to listen to custom events emitted by a child component in the parent template.

LANGUAGE: vue-html
CODE:
<MyComponent @some-event="callback" />

----------------------------------------

TITLE: Typing Provide/Inject in Vue 3 with TypeScript
DESCRIPTION: Shows how to use TypeScript to type provide/inject in Vue 3, using InjectionKey for type synchronization between provider and consumer.

LANGUAGE: typescript
CODE:
import { provide, inject } from 'vue'
import type { InjectionKey } from 'vue'

const key = Symbol() as InjectionKey<string>

provide(key, 'foo') // providing non-string value will result in error

const foo = inject(key) // type of foo: string | undefined

const foo = inject<string>('foo') // type: string | undefined

const foo = inject<string>('foo', 'bar') // type: string

const foo = inject('foo') as string

----------------------------------------

TITLE: Lifecycle Hooks for Cached Components in Vue Options API
DESCRIPTION: This snippet shows how to use activated and deactivated hooks in the Options API to handle lifecycle events for cached components.

LANGUAGE: javascript
CODE:
export default {
  activated() {
    // called on initial mount
    // and every time it is re-inserted from the cache
  },
  deactivated() {
    // called when removed from the DOM into the cache
    // and also when unmounted
  }
}

----------------------------------------

TITLE: Globally Registering a Custom Directive in Vue
DESCRIPTION: Demonstrates how to globally register a custom directive 'v-highlight' at the Vue application level, making it available in all components.

LANGUAGE: javascript
CODE:
const app = createApp({})

// make v-highlight usable in all components
app.directive('highlight', {
  /* ... */
})

----------------------------------------

TITLE: Accessing Fallthrough Attributes in Vue.js Composition API
DESCRIPTION: Demonstrates how to access fallthrough attributes in the <script setup> section using the useAttrs() API in Vue.js Composition API.

LANGUAGE: javascript
CODE:
<script setup>
import { useAttrs } from 'vue'

const attrs = useAttrs()
</script>

----------------------------------------

TITLE: Nested Component Inheritance in Vue.js
DESCRIPTION: Shows how attributes are forwarded to nested components when a component renders another component as its root.

LANGUAGE: vue-html
CODE:
<!-- template of <MyButton/> that simply renders another component -->
<BaseButton />

----------------------------------------

TITLE: Using v-bind Shorthand Syntax in Vue.js
DESCRIPTION: This snippet shows the shorthand syntax for v-bind in Vue.js. The colon (:) is used as a shorthand for v-bind, binding the 'id' attribute to the 'dynamicId' property.

LANGUAGE: vue-html
CODE:
<div :id="dynamicId"></div>

----------------------------------------

TITLE: Typing Template Refs in Vue 3 with TypeScript
DESCRIPTION: Demonstrates how to type template refs in Vue 3 using TypeScript, including automatic inference and explicit typing methods.

LANGUAGE: typescript
CODE:
const el = useTemplateRef<HTMLInputElement>('el')

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { ref, onMounted } from 'vue'

const el = ref<HTMLInputElement | null>(null)

onMounted(() => {
  el.value?.focus()
})
</script>

<template>
  <input ref="el" />
</template>

----------------------------------------

TITLE: Defining unmounted Lifecycle Hook in Vue Component
DESCRIPTION: The unmounted hook is called after the component has been unmounted. It's used to clean up manually created side effects such as timers, DOM event listeners, or server connections.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  unmounted?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Dynamic Transitions in Vue
DESCRIPTION: Shows how to use dynamic transition names and apply different transitions based on state.

LANGUAGE: vue-html
CODE:
<Transition :name="transitionName">
  <!-- ... -->
</Transition>

----------------------------------------

TITLE: Handling v-model Modifiers with Composition API
DESCRIPTION: Shows how to handle v-model modifiers using the Composition API.

LANGUAGE: vue
CODE:
<script setup>
const [model, modifiers] = defineModel({
  set(value) {
    if (modifiers.capitalize) {
      return value.charAt(0).toUpperCase() + value.slice(1)
    }
    return value
  }
})
</script>

<template>
  <input type="text" v-model="model" />
</template>

----------------------------------------

TITLE: Vue Dependency Tracking Implementation
DESCRIPTION: Implements the core dependency tracking functionality used by Vue's reactivity system

LANGUAGE: javascript
CODE:
let activeEffect

function track(target, key) {
  if (activeEffect) {
    const effects = getSubscribersForProperty(target, key)
    effects.add(activeEffect)
  }
}

function trigger(target, key) {
  const effects = getSubscribersForProperty(target, key)
  effects.forEach((effect) => effect())
}

----------------------------------------

TITLE: Configuring Vue to Skip Component Resolution for Custom Elements
DESCRIPTION: Example showing how to configure Vue to recognize custom elements in browser-based compilation by treating tags containing hyphens as custom elements.

LANGUAGE: javascript
CODE:
app.config.compilerOptions.isCustomElement = (tag) => tag.includes('-')

----------------------------------------

TITLE: Defining beforeUpdate Lifecycle Hook in Vue Component
DESCRIPTION: The beforeUpdate hook is called right before the component is about to update its DOM tree due to a reactive state change. It can be used to access the DOM state before Vue updates it.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  beforeUpdate?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Basic Inject Usage - Composition API
DESCRIPTION: Shows how to inject provided values in a component using the inject() function.

LANGUAGE: vue
CODE:
<script setup>
import { inject } from 'vue'

const message = inject('message')
</script>

----------------------------------------

TITLE: Using KeepAlive with Dynamic Components in Vue
DESCRIPTION: This snippet demonstrates how to wrap a dynamic component with the KeepAlive component to preserve its state when inactive.

LANGUAGE: vue
CODE:
<!-- Inactive components will be cached! -->
<KeepAlive>
  <component :is="activeComponent" />
</KeepAlive>

----------------------------------------

TITLE: Separating Vue Components into Individual Files
DESCRIPTION: Demonstrates the recommended practice of placing each Vue component in its own file when using a build system. This improves component discoverability and management.

LANGUAGE: JavaScript
CODE:
components/
|- TodoList.js
|- TodoItem.js

LANGUAGE: JavaScript
CODE:
components/
|- TodoList.vue
|- TodoItem.vue

----------------------------------------

TITLE: Using Function Shorthand for Custom Directives in Vue
DESCRIPTION: Demonstrates how to define a custom directive as a function when only the mounted and updated hooks are needed. This example creates a 'v-color' directive to set an element's text color.

LANGUAGE: vue-html
CODE:
<div v-color="color"></div>

LANGUAGE: javascript
CODE:
app.directive('color', (el, binding) => {
  // this will be called for both `mounted` and `updated`
  el.style.color = binding.value
})

----------------------------------------

TITLE: Basic Vue SSR Example in Node.js
DESCRIPTION: A simple example demonstrating how to render a Vue application on the server using Node.js and the vue/server-renderer package.

LANGUAGE: javascript
CODE:
// this runs in Node.js on the server.
import { createSSRApp } from 'vue'
// Vue's server-rendering API is exposed under `vue/server-renderer`.
import { renderToString } from 'vue/server-renderer'

const app = createSSRApp({
  data: () => ({ count: 1 }),
  template: `<button @click="count++">{{ count }}</button>`
})

renderToString(app).then((html) => {
  console.log(html)
})

----------------------------------------

TITLE: Defining created Lifecycle Hook in Vue Component
DESCRIPTION: The created hook is called after the instance has finished processing all state-related options. Reactive data, computed properties, methods, and watchers are set up at this point.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  created?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Chained Component Registration in Vue 3
DESCRIPTION: Demonstrates how to register multiple components using method chaining with the .component() method.

LANGUAGE: javascript
CODE:
app
  .component('ComponentA', ComponentA)
  .component('ComponentB', ComponentB)
  .component('ComponentC', ComponentC)

----------------------------------------

TITLE: Modal Component Implementation (Composition API)
DESCRIPTION: Implementation of a modal component using Vue's Composition API with state management and styling.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const open = ref(false)
</script>

<template>
  <button @click="open = true">Open Modal</button>

  <div v-if="open" class="modal">
    <p>Hello from the modal!</p>
    <button @click="open = false">Close</button>
  </div>
</template>

<style scoped>
.modal {
  position: fixed;
  z-index: 999;
  top: 20%;
  left: 50%;
  width: 300px;
  margin-left: -150px;
}
</style>

----------------------------------------

TITLE: Defining Component Instance Type in TypeScript
DESCRIPTION: TypeScript interface definition for the Vue component public instance, including $data property.

LANGUAGE: typescript
CODE:
interface ComponentPublicInstance {
  $data: object
}

----------------------------------------

TITLE: Global Registration of Async Components
DESCRIPTION: Example of registering an async component globally using app.component().

LANGUAGE: javascript
CODE:
app.component('MyComponent', defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
))

----------------------------------------

TITLE: Defining beforeCreate Lifecycle Hook in Vue Component
DESCRIPTION: The beforeCreate hook is called when the instance is initialized, before data observation and event/watcher setup. It receives the component instance as its context.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  beforeCreate?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Defining Async Setup Hook in Vue Component
DESCRIPTION: Demonstrates how to create a Vue component with an async setup() hook using the Composition API. This allows the component to fetch data asynchronously before rendering.

LANGUAGE: javascript
CODE:
export default {
  async setup() {
    const res = await fetch(...)
    const posts = await res.json()
    return {
      posts
    }
  }
}

----------------------------------------

TITLE: Emitting Events in Options API
DESCRIPTION: Shows how to emit events using the this.$emit() method in the Options API.

LANGUAGE: javascript
CODE:
export default {
  methods: {
    submit() {
      this.$emit('someEvent')
    }
  }
}

----------------------------------------

TITLE: Registering Vue Custom Element
DESCRIPTION: Complete example demonstrating how to define and register a Vue-powered custom element using defineCustomElement() and the Custom Elements registry.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'vue'

const MyVueElement = defineCustomElement({
  /* component options */
})

// Register the custom element.
customElements.define('my-vue-element', MyVueElement)

----------------------------------------

TITLE: Basic Template Ref Declaration
DESCRIPTION: Shows how to declare a basic template ref attribute on an HTML element to get direct access to the DOM element.

LANGUAGE: vue-html
CODE:
<input ref="input">

----------------------------------------

TITLE: Optimizing Computed Properties for Stability in Vue.js
DESCRIPTION: Demonstrates how to manually optimize a computed property that returns an object, by comparing new and old values to avoid unnecessary updates.

LANGUAGE: javascript
CODE:
const computedObj = computed((oldValue) => {
  const newValue = {
    isEven: count.value % 2 === 0
  }
  if (oldValue && oldValue.isEven === newValue.isEven) {
    return oldValue
  }
  return newValue
})

----------------------------------------

TITLE: Basic Async Component Definition in Vue
DESCRIPTION: Demonstrates the basic usage of defineAsyncComponent to create an asynchronous component using a Promise-based loader function.

LANGUAGE: javascript
CODE:
import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() => {
  return new Promise((resolve, reject) => {
    // ...load component from server
    resolve(/* loaded component */)
  })
})

----------------------------------------

TITLE: Creating an i18n Plugin for Vue
DESCRIPTION: Demonstrates the creation of a simple i18n (internationalization) plugin for Vue. The plugin adds a global $translate method to handle string translations based on provided options.

LANGUAGE: javascript
CODE:
// plugins/i18n.js
export default {
  install: (app, options) => {
    // inject a globally available $translate() method
    app.config.globalProperties.$translate = (key) => {
      // retrieve a nested property in `options`
      // using `key` as the path
      return key.split('.').reduce((o, i) => {
        if (o) return o[i]
      }, options)
    }
  }
}

----------------------------------------

TITLE: Rendering a Basic Button Component in Vue.js
DESCRIPTION: Demonstrates a simple Vue.js component template for a button element. This serves as the foundation for explaining attribute inheritance.

LANGUAGE: vue-html
CODE:
<!-- template of <MyButton> -->
<button>Click Me</button>

----------------------------------------

TITLE: Template Refs with v-for
DESCRIPTION: Shows how to use template refs within v-for loops to obtain references to multiple elements.

LANGUAGE: vue
CODE:
<script setup>
import { ref, useTemplateRef, onMounted } from 'vue'

const list = ref([
  /* ... */
])

const itemRefs = useTemplateRef('items')

onMounted(() => console.log(itemRefs.value))
</script>

<template>
  <ul>
    <li v-for="item in list" ref="items">
      {{ item }}
    </li>
  </ul>
</template>

----------------------------------------

TITLE: Creating Async Components for Lazy Loading in Vue.js
DESCRIPTION: Shows how to define an async component in Vue.js, which creates a separate chunk for the component and its dependencies, loading it only when needed.

LANGUAGE: javascript
CODE:
import { defineAsyncComponent } from 'vue'

const Foo = defineAsyncComponent(() => import('./Foo.vue'))

----------------------------------------

TITLE: Implementing a Counter Component in Vue 3 Composition API
DESCRIPTION: This snippet demonstrates a simple counter component using Vue 3's Composition API. It includes state management with ref, and an action to increment the count.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

// state
const count = ref(0)

// actions
function increment() {
  count.value++
}
</script>

<!-- view -->
<template>{{ count }}</template>

----------------------------------------

TITLE: Event Listener Composable in Vue
DESCRIPTION: A reusable composable for managing DOM event listeners with proper lifecycle cleanup.

LANGUAGE: javascript
CODE:
// event.js
import { onMounted, onUnmounted } from 'vue'

export function useEventListener(target, event, callback) {
  onMounted(() => target.addEventListener(event, callback))
  onUnmounted(() => target.removeEventListener(event, callback))
}

----------------------------------------

TITLE: Defining createRenderer Function and RendererOptions Interface in TypeScript
DESCRIPTION: This snippet defines the type signature for the createRenderer function and the RendererOptions interface. It outlines the structure and methods required for creating a custom renderer in Vue.

LANGUAGE: typescript
CODE:
function createRenderer<HostNode, HostElement>(
  options: RendererOptions<HostNode, HostElement>
): Renderer<HostElement>

interface Renderer<HostElement> {
  render: RootRenderFunction<HostElement>
  createApp: CreateAppFunction<HostElement>
}

interface RendererOptions<HostNode, HostElement> {
  patchProp(
    el: HostElement,
    key: string,
    prevValue: any,
    nextValue: any,
    namespace?: ElementNamespace,
    parentComponent?: ComponentInternalInstance | null,
  ): void
  insert(el: HostNode, parent: HostElement, anchor?: HostNode | null): void
  remove(el: HostNode): void
  createElement(
    type: string,
    namespace?: ElementNamespace,
    isCustomizedBuiltIn?: string,
    vnodeProps?: (VNodeProps & { [key: string]: any }) | null,
  ): HostElement
  createText(text: string): HostNode
  createComment(text: string): HostNode
  setText(node: HostNode, text: string): void
  setElementText(node: HostElement, text: string): void
  parentNode(node: HostNode): HostElement | null
  nextSibling(node: HostNode): HostNode | null
  querySelector?(selector: string): HostElement | null
  setScopeId?(el: HostElement, id: string): void
  cloneNode?(node: HostNode): HostNode
  insertStaticContent?(
    content: string,
    parent: HostElement,
    anchor: HostNode | null,
    namespace: ElementNamespace,
    start?: HostNode | null,
    end?: HostNode | null,
  ): [HostNode, HostNode]
}

----------------------------------------

TITLE: KeepAlive Component Examples
DESCRIPTION: Examples of using KeepAlive for caching dynamic components with various configuration options.

LANGUAGE: vue-html
CODE:
<KeepAlive>
  <component :is="view"></component>
</KeepAlive>

<KeepAlive>
  <comp-a v-if="a > 1"></comp-a>
  <comp-b v-else></comp-b>
</KeepAlive>

<Transition>
  <KeepAlive>
    <component :is="view"></component>
  </KeepAlive>
</Transition>

----------------------------------------

TITLE: Component Template Ref with Expose
DESCRIPTION: Demonstrates how to expose specific properties and methods when using template refs on components with script setup.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const a = 1
const b = ref(2)

defineExpose({
  a,
  b
})
</script>

----------------------------------------

TITLE: Creating Accessible Forms in Vue.js
DESCRIPTION: Demonstrates how to create accessible forms in Vue.js using semantic HTML elements, proper labeling, and ARIA attributes for improved user experience with assistive technologies.

LANGUAGE: vue-html
CODE:
<form action="/dataCollectionLocation" method="post" autocomplete="on">
  <div v-for="item in formItems" :key="item.id" class="form-item">
    <label :for="item.id">{{ item.label }}: </label>
    <input
      :type="item.type"
      :id="item.id"
      :name="item.id"
      v-model="item.value"
    />
  </div>
  <button type="submit">Submit</button>
</form>

----------------------------------------

TITLE: Implementing Code Splitting with Dynamic Import in JavaScript
DESCRIPTION: Demonstrates how to use dynamic import to split code into separate chunks, which can be loaded on demand, improving initial load performance.

LANGUAGE: javascript
CODE:
function loadLazy() {
  return import('./lazy.js')
}

----------------------------------------

TITLE: Attribute Binding Security in Vue.js
DESCRIPTION: Demonstrates how Vue automatically escapes dynamic attribute bindings to prevent attribute injection attacks.

LANGUAGE: vue-html
CODE:
<h1 :title="userProvidedString">
  hello
</h1>

LANGUAGE: javascript
CODE:
'" onclick="alert(\'hi\')'

LANGUAGE: vue-html
CODE:
&quot; onclick=&quot;alert('hi')

----------------------------------------

TITLE: Basic Data Structure with Options API
DESCRIPTION: Example showing how to define basic data structure in Vue using Options API with an author object containing name and books array.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Basic Data Structure with Options API
DESCRIPTION: Example showing how to define basic data structure in Vue using Options API with an author object containing name and books array.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Vue SFC with Script Setup and TypeScript
DESCRIPTION: Shows how to use TypeScript in a Vue SFC with the script setup syntax, enabling type checking in both script and template.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// TypeScript enabled
import { ref } from 'vue'

const count = ref(1)
</script>

<template>
  <!-- type checking and auto-completion enabled -->
  {{ count.toFixed(2) }}
</template>

----------------------------------------

TITLE: Structuring Content with Semantic Headings in Vue.js
DESCRIPTION: Shows how to properly structure content using semantic headings (h1-h6) and ARIA attributes for improved accessibility in a Vue.js application.

LANGUAGE: vue-html
CODE:
<main role="main" aria-labelledby="main-title">
  <h1 id="main-title">Main title</h1>
  <section aria-labelledby="section-title-1">
    <h2 id="section-title-1"> Section Title </h2>
    <h3>Section Subtitle</h3>
    <!-- Content -->
  </section>
  <section aria-labelledby="section-title-2">
    <h2 id="section-title-2"> Section Title </h2>
    <h3>Section Subtitle</h3>
    <!-- Content -->
    <h3>Section Subtitle</h3>
    <!-- Content -->
  </section>
</main>

----------------------------------------

TITLE: Using PropType for Runtime Props Type Annotation in Vue
DESCRIPTION: Demonstrates how to use PropType utility to annotate component props with complex TypeScript interfaces.

LANGUAGE: typescript
CODE:
import type { PropType } from 'vue'

interface Book {
  title: string
  author: string
  year: number
}

export default {
  props: {
    book: {
      // provide more specific type to `Object`
      type: Object as PropType<Book>,
      required: true
    }
  }
}

----------------------------------------

TITLE: Using Shallow Reactivity for Large Immutable Structures in Vue.js
DESCRIPTION: Shows how to use shallowRef to reduce reactivity overhead for large data structures, with examples of how to properly update the shallow reactive state.

LANGUAGE: javascript
CODE:
const shallowArray = shallowRef([
  /* big list of deep objects */
])

// this won't trigger updates...
shallowArray.value.push(newObject)
// this does:
shallowArray.value = [...shallowArray.value, newObject]

// this won't trigger updates...
shallowArray.value[0].foo = 1
// this does:
shallowArray.value = [
  {
    ...shallowArray.value[0],
    foo: 1
  },
  ...shallowArray.value.slice(1)
]

----------------------------------------

TITLE: Creating Vue Components with h() Function
DESCRIPTION: Examples of creating component vnodes using Vue.js h() function, showing prop passing and slot handling.

LANGUAGE: javascript
CODE:
import Foo from './Foo.vue'

// passing props
h(Foo, {
  // equivalent of some-prop="hello"
  someProp: 'hello',
  // equivalent of @update="() => {}"
  onUpdate: () => {}
})

// passing single default slot
h(Foo, () => 'default slot')

// passing named slots
// notice the `null` is required to avoid
// slots object being treated as props
h(MyComponent, null, {
  default: () => 'default slot',
  foo: () => h('div', 'foo'),
  bar: () => [h('span', 'one'), h('span', 'two')]
})

----------------------------------------

TITLE: Unit Testing Increment Function with Jest
DESCRIPTION: This snippet demonstrates how to write unit tests for the increment function using Jest. It includes multiple test cases to cover different scenarios.

LANGUAGE: javascript
CODE:
import { increment } from './helpers'

describe('increment', () => {
  test('increments the current number by 1', () => {
    expect(increment(0, 10)).toBe(1)
  })

  test('does not increment the current number over the max', () => {
    expect(increment(10, 10)).toBe(10)
  })

  test('has a default max of 10', () => {
    expect(increment(10)).toBe(10)
  })
})

----------------------------------------

TITLE: Express Server with Vue SSR
DESCRIPTION: An example of integrating Vue SSR into an Express.js server, including the full HTML page structure.

LANGUAGE: javascript
CODE:
import express from 'express'
import { createSSRApp } from 'vue'
import { renderToString } from 'vue/server-renderer'

const server = express()

server.get('/', (req, res) => {
  const app = createSSRApp({
    data: () => ({ count: 1 }),
    template: `<button @click="count++">{{ count }}</button>`
  })

  renderToString(app).then((html) => {
    res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>Vue SSR Example</title>
      </head>
      <body>
        <div id="app">${html}</div>
      </body>
    </html>
    `)
  })
})

server.listen(3000, () => {
  console.log('ready')
})

----------------------------------------

TITLE: Implementing Skip Link in Vue.js Application
DESCRIPTION: Demonstrates how to add a skip link at the top of each page to allow users to jump directly to the main content area. Includes HTML structure, CSS for styling, and Vue.js code for focus management.

LANGUAGE: vue-html
CODE:
<span ref="backToTop" tabindex="-1" />
<ul class="skip-links">
  <li>
    <a href="#main" ref="skipLink" class="skip-link">Skip to main content</a>
  </li>
</ul>

LANGUAGE: css
CODE:
.skip-links {
  list-style: none;
}
.skip-link {
  white-space: nowrap;
  margin: 1em auto;
  top: 0;
  position: fixed;
  left: 50%;
  margin-left: -72px;
  opacity: 0;
}
.skip-link:focus {
  opacity: 1;
  background-color: white;
  padding: 0.5em;
  border: 1px solid black;
}

LANGUAGE: vue
CODE:
<script setup>
import { ref, watch } from 'vue'
import { useRoute } from 'vue-router'

const route = useRoute()
const backToTop = ref()

watch(
  () => route.path,
  () => {
    backToTop.value.focus()
  }
)
</script>

----------------------------------------

TITLE: Implementing CRUD Operations with Vue.js
DESCRIPTION: This Vue.js component implements a CRUD interface for managing a list of names. It includes functionality for creating, reading, updating, and deleting entries, as well as filtering the list.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      prefix: '',
      name: '',
      surname: '',
      selected: -1,
      names: []
    }
  },
  computed: {
    filteredNames() {
      return this.names.filter(n =>
        n.surname.toLowerCase().startsWith(this.prefix.toLowerCase())
      )
    }
  },
  methods: {
    create() {
      this.names.push({name: this.name, surname: this.surname})
      this.name = ''
      this.surname = ''
    },
    update() {
      Object.assign(this.names[this.selected],
        {name: this.name, surname: this.surname})
    },
    del() {
      this.names.splice(this.selected, 1)
      this.selected = -1
      this.name = ''
      this.surname = ''
    }
  }
}

----------------------------------------

TITLE: Binding Attributes with v-bind Directive in Vue.js
DESCRIPTION: This snippet demonstrates how to use the v-bind directive to bind an attribute to a dynamic value in Vue.js. The 'id' attribute is bound to the 'dynamicId' property from the component's state.

LANGUAGE: vue-html
CODE:
<div v-bind:id="dynamicId"></div>

----------------------------------------

TITLE: Basic Provide Usage - Composition API
DESCRIPTION: Example of providing data to descendant components using the provide() function in a Vue component with <script setup>.

LANGUAGE: vue
CODE:
<script setup>
import { provide } from 'vue'

provide(/* key */ 'message', /* value */ 'hello!')
</script>

----------------------------------------

TITLE: Basic Provide Usage - Composition API
DESCRIPTION: Example of providing data to descendant components using the provide() function in a Vue component with <script setup>.

LANGUAGE: vue
CODE:
<script setup>
import { provide } from 'vue'

provide(/* key */ 'message', /* value */ 'hello!')
</script>

----------------------------------------

TITLE: Using PascalCase for Component Names in Templates
DESCRIPTION: Demonstrates the recommended use of PascalCase for component names in Single-File Components and string templates, while using kebab-case in in-DOM templates.

LANGUAGE: HTML
CODE:
<!-- In Single-File Components and string templates -->
<MyComponent/>

LANGUAGE: HTML
CODE:
<!-- In in-DOM templates -->
<my-component></my-component>

----------------------------------------

TITLE: Using SSR Context in Vue Component Setup
DESCRIPTION: Shows how to use the useSSRContext function within a Vue component's setup to retrieve the SSR context and attach information for final HTML rendering.

LANGUAGE: javascript
CODE:
<script setup>
import { useSSRContext } from 'vue'

// make sure to only call it during SSR
// https://vitejs.dev/guide/ssr.html#conditional-logic
if (import.meta.env.SSR) {
  const ctx = useSSRContext()
  // ...attach properties to the context
}
</script>

----------------------------------------

TITLE: Typing Component Template Refs in Vue 3 with TypeScript
DESCRIPTION: Shows how to type component template refs in Vue 3 using TypeScript, including auto-inference and explicit typing for various scenarios.

LANGUAGE: vue
CODE:
<!-- App.vue -->
<script setup lang="ts">
import { useTemplateRef } from 'vue'
import Foo from './Foo.vue'
import Bar from './Bar.vue'

type FooType = InstanceType<typeof Foo>
type BarType = InstanceType<typeof Bar>

const compRef = useTemplateRef<FooType | BarType>('comp')
</script>

<template>
  <component :is="Math.random() > 0.5 ? Foo : Bar" ref="comp" />
</template>

LANGUAGE: typescript
CODE:
import { useTemplateRef } from 'vue'
import type { ComponentPublicInstance } from 'vue'

const child = useTemplateRef<ComponentPublicInstance>('child')

LANGUAGE: vue
CODE:
<!-- App.vue -->
<script setup lang="ts">
import { useTemplateRef } from 'vue'
import MyGenericModal from './MyGenericModal.vue'
import type { ComponentExposed } from 'vue-component-type-helpers'

const modal = useTemplateRef<ComponentExposed<typeof MyGenericModal>>('modal')

const openModal = () => {
  modal.value?.open('newValue')
}
</script>

----------------------------------------

TITLE: Composition API Event Handler Implementation
DESCRIPTION: Demonstrates event handler implementation using Composition API with <script setup> and ref for reactive state management.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const count = ref(0)

function increment() {
  // update component state
  count.value++
}
</script>

----------------------------------------

TITLE: Reactive Props Destructuring in Vue
DESCRIPTION: Demonstrates how to use reactivity transform with defineProps for easier props handling.

LANGUAGE: html
CODE:
<script setup lang="ts">
interface Props {
  msg: string
  count?: number
  foo?: string
}

const {
  msg,
  count = 1,
  foo: bar
} = defineProps<Props>()

watchEffect(() => {
  console.log(msg, count, bar)
})
</script>

----------------------------------------

TITLE: Server Prefetch Hook Implementation
DESCRIPTION: Demonstrates server-side data fetching using onServerPrefetch with client-side fallback

LANGUAGE: vue
CODE:
<script setup>
import { ref, onServerPrefetch, onMounted } from 'vue'

const data = ref(null)

onServerPrefetch(async () => {
  // component is rendered as part of the initial request
  // pre-fetch data on server as it is faster than on the client
  data.value = await fetchOnServer(/* ... */)
})

onMounted(async () => {
  if (!data.value) {
    // if data is null on mount, it means the component
    // is dynamically rendered on the client. Perform a
    // client-side fetch instead.
    data.value = await fetchOnClient(/* ... */)
  }
})
</script>

----------------------------------------

TITLE: Client-side Hydration in Vue SSR
DESCRIPTION: Code snippet showing how to set up client-side hydration for a server-rendered Vue application.

LANGUAGE: javascript
CODE:
// client.js
import { createApp } from './app.js'

createApp().mount('#app')

----------------------------------------

TITLE: Streaming Vue SSR with Simple Readable Interface
DESCRIPTION: Demonstrates how to use renderToSimpleStream function to render a Vue app in streaming mode using a simple readable interface with push and destroy methods.

LANGUAGE: javascript
CODE:
let res = ''

renderToSimpleStream(
  app,
  {},
  {
    push(chunk) {
      if (chunk === null) {
        // done
        console(`render complete: ${res}`)
      } else {
        res += chunk
      }
    },
    destroy(err) {
      // error encountered
    }
  }
)

----------------------------------------

TITLE: Typing Event Handlers in Vue 3 with TypeScript
DESCRIPTION: Demonstrates how to properly type event handlers in Vue 3 components using TypeScript, including type assertions for event targets.

LANGUAGE: vue
CODE:
<script setup lang="ts">
function handleChange(event: Event) {
  console.log((event.target as HTMLInputElement).value)
}
</script>

<template>
  <input type="text" @change="handleChange" />
</template>

----------------------------------------

TITLE: Simplified Two-way Binding with v-model
DESCRIPTION: Demonstrates the simplified approach using v-model directive, which provides automatic synchronization between form input value and component state.

LANGUAGE: vue-html
CODE:
<input v-model="text">

----------------------------------------

TITLE: Implementing Markdown Editor Component in Vue.js
DESCRIPTION: This code snippet defines a Vue component for a markdown editor. It uses a textarea for input and renders the markdown content in real-time. The component utilizes the marked library for markdown parsing.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      input: '# hello'
    }
  },
  computed: {
    compiledMarkdown() {
      return marked(this.input, { sanitize: true })
    }
  },
  methods: {
    update(e) {
      this.input = e.target.value
    }
  }
}

----------------------------------------

TITLE: Vue Element with Dynamic Class Binding
DESCRIPTION: Illustrates a Vue element with a dynamic class binding, which Vue compiles with patch flags for optimized updates.

LANGUAGE: html
CODE:
<!-- class binding only -->
<div :class="{ active }"></div>

<!-- id and value bindings only -->
<input :id="id" :value="value">

<!-- text children only -->
<div>{{ dynamic }}</div>

----------------------------------------

TITLE: Piping Vue SSR Output to Web WritableStream
DESCRIPTION: Shows how to use pipeToWebWritable function with a TransformStream to render a Vue app and create a Response with the rendered output.

LANGUAGE: javascript
CODE:
// TransformStream is available in environments such as CloudFlare workers.
// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'
const { readable, writable } = new TransformStream()
pipeToWebWritable(app, {}, writable)

return new Response(readable)

----------------------------------------

TITLE: Using shallowRef in Vue
DESCRIPTION: Example demonstrating usage of shallowRef() to create a shallow reactive reference that only tracks top-level changes.

LANGUAGE: javascript
CODE:
const state = shallowRef({ count: 1 })

// does NOT trigger change
state.value.count = 2

// does trigger change
state.value = { count: 2 }

----------------------------------------

TITLE: Using v-if and v-else for Conditional Rendering in Vue
DESCRIPTION: This example demonstrates how to use v-if and v-else directives to render different h1 elements based on a condition. It sets up a toggle scenario between two states.

LANGUAGE: vue-html
CODE:
<h1 v-if="awesome">Vue is awesome!</h1>
<h1 v-else>Oh no 😢</h1>

----------------------------------------

TITLE: Defining errorCaptured Lifecycle Hook in Vue Component
DESCRIPTION: The errorCaptured hook is called when an error propagating from a descendant component has been captured. It receives the error, component instance, and error information as arguments.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  errorCaptured?(
    this: ComponentPublicInstance,
    err: unknown,
    instance: ComponentPublicInstance | null,
    info: string
  ): boolean | void
}

----------------------------------------

TITLE: Creating Vue Project with Bun
DESCRIPTION: This command uses Bun, a modern JavaScript runtime, to create a new Vue project using the latest version of the create-vue scaffolding tool.

LANGUAGE: sh
CODE:
$ bun create vue@latest

----------------------------------------

TITLE: Compiled Vue Render Function with Patch Flags
DESCRIPTION: Shows the compiled JavaScript code for a Vue element with dynamic class binding, including patch flags for optimized rendering.

LANGUAGE: javascript
CODE:
createElementVNode("div", {
  class: _normalizeClass({ active: _ctx.active })
}, null, 2 /* CLASS */)

----------------------------------------

TITLE: Rendering Vue App to Node.js Readable Stream
DESCRIPTION: Demonstrates how to use renderToNodeStream function to render a Vue app as a Node.js Readable stream, which can be piped to an HTTP response.

LANGUAGE: javascript
CODE:
// inside a Node.js http handler
renderToNodeStream(app).pipe(res)

----------------------------------------

TITLE: Local Registration with Script Setup
DESCRIPTION: Demonstrates local component registration using <script setup> in Vue 3 Single File Components.

LANGUAGE: vue
CODE:
<script setup>
import ComponentA from './ComponentA.vue'
</script>

<template>
  <ComponentA />
</template>

----------------------------------------

TITLE: Basic Vue List Rendering with v-for
DESCRIPTION: Demonstrates how to render a list of todo items using v-for directive with key binding. The todo object must contain id and text properties, with id being used as the unique key for efficient list updates.

LANGUAGE: vue-html
CODE:
<ul>
  <li v-for="todo in todos" :key="todo.id">
    {{ todo.text }}
  </li>
</ul>

----------------------------------------

TITLE: Handling v-model Modifiers with Options API
DESCRIPTION: Demonstrates how to handle v-model modifiers using the Options API.

LANGUAGE: vue
CODE:
<script>
export default {
  props: {
    modelValue: String,
    modelModifiers: {
      default: () => ({})
    }
  },
  emits: ['update:modelValue'],
  methods: {
    emitValue(e) {
      let value = e.target.value
      if (this.modelModifiers.capitalize) {
        value = value.charAt(0).toUpperCase() + value.slice(1)
      }
      this.$emit('update:modelValue', value)
    }
  }
}
</script>

<template>
  <input type="text" :value="modelValue" @input="emitValue" />
</template>

----------------------------------------

TITLE: Vue Template with Static and Dynamic Content
DESCRIPTION: Shows a Vue template with both static and dynamic elements, demonstrating how Vue optimizes rendering for static content.

LANGUAGE: html
CODE:
<div>
  <div>foo</div> <!-- cached -->
  <div>bar</div> <!-- cached -->
  <div>{{ dynamic }}</div>
</div>

----------------------------------------

TITLE: Creating Per-Request App Instances for SSR
DESCRIPTION: An example of creating new app instances for each server request to avoid cross-request state pollution in SSR.

LANGUAGE: javascript
CODE:
// app.js (shared between server and client)
import { createSSRApp } from 'vue'
import { createStore } from './store.js'

// called on each request
export function createApp() {
  const app = createSSRApp(/* ... */)
  // create new instance of store per request
  const store = createStore(/* ... */)
  // provide store at the app level
  app.provide('store', store)
  // also expose store for hydration purposes
  return { app, store }
}

----------------------------------------

TITLE: Typing Component Props with defineComponent in TypeScript
DESCRIPTION: This snippet demonstrates how to use defineComponent to enable type inference for props in Vue's Options API. It shows basic prop types and how to use PropType for more complex types.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'
import type { PropType } from 'vue'

interface Book {
  title: string
  author: string
  year: number
}

export default defineComponent({
  props: {
    book: {
      // provide more specific type to `Object`
      type: Object as PropType<Book>,
      required: true
    },
    // can also annotate functions
    callback: Function as PropType<(id: number) => void>
  },
  mounted() {
    this.book.title // string
    this.book.year // number

    // TS Error: argument of type 'string' is not
    // assignable to parameter of type 'number'
    this.callback?.('123')
  }
})

----------------------------------------

TITLE: Todo List Checkbox Implementation in Vue Template
DESCRIPTION: Shows how to bind a checkbox to a todo item's done status using v-model directive in Vue template syntax.

LANGUAGE: vue-html
CODE:
<li v-for="todo in todos">
  <input type="checkbox" v-model="todo.done">
  ...
</li>

----------------------------------------

TITLE: TypeScript Implementation of isRef Function
DESCRIPTION: Type definition and implementation example of isRef utility that checks if a value is a ref object. Used as a type guard in TypeScript.

LANGUAGE: typescript
CODE:
function isRef<T>(r: Ref<T> | unknown): r is Ref<T>

LANGUAGE: typescript
CODE:
let foo: unknown
if (isRef(foo)) {
  // foo's type is narrowed to Ref<unknown>
  foo.value
}

----------------------------------------

TITLE: TypeScript Definition: hasInjectionContext()
DESCRIPTION: Type definition for the hasInjectionContext() utility function that checks if inject() can be safely used.

LANGUAGE: typescript
CODE:
function hasInjectionContext(): boolean

----------------------------------------

TITLE: Basic Mouse Position Tracking Component in Vue
DESCRIPTION: A Vue component that tracks mouse position using Composition API directly in the component.

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted, onUnmounted } from 'vue'

const x = ref(0)
const y = ref(0)

function update(event) {
  x.value = event.pageX
  y.value = event.pageY
}

onMounted(() => window.addEventListener('mousemove', update))
onUnmounted(() => window.removeEventListener('mousemove', update))
</script>

<template>Mouse position is at: {{ x }}, {{ y }}</template>

----------------------------------------

TITLE: Creating Vue Project with pnpm
DESCRIPTION: This command uses pnpm to create a new Vue project using the latest version of the create-vue scaffolding tool. It's an alternative to npm for setting up a Vite-based Vue project.

LANGUAGE: sh
CODE:
$ pnpm create vue@latest

----------------------------------------

TITLE: Traditional Local Component Registration
DESCRIPTION: Demonstrates the traditional way of registering components locally using the components option in a Vue Single File Component.

LANGUAGE: vue
CODE:
<script>
import ComponentA from './ComponentA.vue'

export default {
  components: {
    ComponentA
  }
}
</script>

<template>
  <ComponentA />
</template>

----------------------------------------

TITLE: Creating a Template Ref in Vue HTML
DESCRIPTION: Demonstrates how to create a template ref on a paragraph element using the special 'ref' attribute in Vue.

LANGUAGE: vue-html
CODE:
<p ref="pElementRef">hello</p>

----------------------------------------

TITLE: Using v-text Directive in Vue
DESCRIPTION: The v-text directive updates an element's text content. It expects a string value and overwrites any existing content inside the element.

LANGUAGE: vue
CODE:
<span v-text="msg"></span>
<!-- same as -->
<span>{{msg}}</span>

----------------------------------------

TITLE: Implementing Increment Function in JavaScript
DESCRIPTION: This snippet shows a simple increment function that increases a number up to a maximum value. It's used as an example for unit testing.

LANGUAGE: javascript
CODE:
export function increment(current, max = 10) {
  if (current < max) {
    return current + 1
  }
  return current
}

----------------------------------------

TITLE: Creating Vue Project with npm
DESCRIPTION: This command uses npm to create a new Vue project using the latest version of the create-vue scaffolding tool. It sets up a Vite-based Vue project with modern development practices.

LANGUAGE: sh
CODE:
$ npm create vue@latest

----------------------------------------

TITLE: Registering Child Component - Options API
DESCRIPTION: Component registration using the Options API approach, including both import and component registration in the components option.

LANGUAGE: javascript
CODE:
import ChildComp from './ChildComp.vue'

export default {
  components: {
    ChildComp
  }
}

----------------------------------------

TITLE: Multiple Attribute Binding Object
DESCRIPTION: Shows how to bind multiple attributes using a JavaScript object with v-bind.

LANGUAGE: js
CODE:
const objectOfAttrs = {
  id: 'container',
  class: 'wrapper',
  style: 'background-color:green'
}

----------------------------------------

TITLE: Multiple Attribute Binding Object
DESCRIPTION: Shows how to bind multiple attributes using a JavaScript object with v-bind.

LANGUAGE: js
CODE:
const objectOfAttrs = {
  id: 'container',
  class: 'wrapper',
  style: 'background-color:green'
}

----------------------------------------

TITLE: useSlots Type Definition
DESCRIPTION: Type definition for the useSlots helper function that returns parent-passed slots as callable functions.

LANGUAGE: typescript
CODE:
function useSlots(): Record<string, (...args: any[]) => VNode[]>

----------------------------------------

TITLE: Defining Custom Directive Lifecycle Hooks in Vue
DESCRIPTION: Illustrates the full set of lifecycle hooks available for custom directives in Vue, including created, beforeMount, mounted, beforeUpdate, updated, beforeUnmount, and unmounted.

LANGUAGE: javascript
CODE:
const myDirective = {
  created(el, binding, vnode) {
    // see below for details on arguments
  },
  beforeMount(el, binding, vnode) {},
  mounted(el, binding, vnode) {},
  beforeUpdate(el, binding, vnode, prevVnode) {},
  updated(el, binding, vnode, prevVnode) {},
  beforeUnmount(el, binding, vnode) {},
  unmounted(el, binding, vnode) {}
}

----------------------------------------

TITLE: Importing Vue Theme Components in JavaScript
DESCRIPTION: This snippet demonstrates how to import Vue Theme components using ES6 import syntax. It's typically used in Vue Single File Components (SFCs) to bring in pre-built UI elements.

LANGUAGE: javascript
CODE:
import { VTCodeGroup, VTCodeGroupTab } from '@vue/theme'

----------------------------------------

TITLE: Slotting with v-slot Directive in Vue
DESCRIPTION: The v-slot directive is used to denote named slots or scoped slots that expect to receive props. It has a shorthand syntax '#' and is typically used on <template> tags.

LANGUAGE: vue
CODE:
<!-- Named slots -->
<BaseLayout>
  <template v-slot:header>
    Header content
  </template>

  <template v-slot:default>
    Default slot content
  </template>

  <template v-slot:footer>
    Footer content
  </template>
</BaseLayout>

<!-- Named slot that receives props -->
<InfiniteScroll>
  <template v-slot:item="slotProps">
    <div class="item">
      {{ slotProps.item.text }}
    </div>
  </template>
</InfiniteScroll>

----------------------------------------

TITLE: Listening to Child Events in Vue Template (SFC)
DESCRIPTION: This snippet demonstrates how a parent component can listen to events emitted by a child component in a Vue Single File Component template. It uses the v-on directive (shorthand @) to bind an event handler that receives the emitted data.

LANGUAGE: vue-html
CODE:
<ChildComp @response="(msg) => childMsg = msg" />

----------------------------------------

TITLE: Declaring Reactive State with Options API in Vue.js
DESCRIPTION: Demonstrates how to declare reactive state using the data option in the Options API. The function returns an object with reactive properties that can be accessed via this in methods and lifecycle hooks.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      count: 1
    }
  },

  // `mounted` is a lifecycle hook which we will explain later
  mounted() {
    // `this` refers to the component instance.
    console.log(this.count) // => 1

    // data can be mutated as well
    this.count = 2
  }
}

----------------------------------------

TITLE: Declaring Reactive State with Options API in Vue.js
DESCRIPTION: Demonstrates how to declare reactive state using the data option in the Options API. The function returns an object with reactive properties that can be accessed via this in methods and lifecycle hooks.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      count: 1
    }
  },

  // `mounted` is a lifecycle hook which we will explain later
  mounted() {
    // `this` refers to the component instance.
    console.log(this.count) // => 1

    // data can be mutated as well
    this.count = 2
  }
}

----------------------------------------

TITLE: Passing Object Literals to Custom Directives in Vue
DESCRIPTION: Shows how to pass multiple values to a custom directive using a JavaScript object literal. The example demonstrates a 'v-demo' directive that receives color and text properties.

LANGUAGE: vue-html
CODE:
<div v-demo="{ color: 'white', text: 'hello!' }"></div>

LANGUAGE: javascript
CODE:
app.directive('demo', (el, binding) => {
  console.log(binding.value.color) // => "white"
  console.log(binding.value.text) // => "hello!"
})

----------------------------------------

TITLE: Using v-bind() in CSS for Dynamic Styling
DESCRIPTION: Shows how to use the v-bind CSS function to link CSS values to dynamic component state. This feature allows for reactive styling based on component data.

LANGUAGE: vue
CODE:
<template>
  <div class="text">hello</div>
</template>

<script>
export default {
  data() {
    return {
      color: 'red'
    }
  }
}
</script>

<style>
.text {
  color: v-bind(color);
}
</style>

----------------------------------------

TITLE: Shared App Creation Logic for SSR
DESCRIPTION: An example of how to structure the app creation logic to be shared between server and client in a Vue SSR setup.

LANGUAGE: javascript
CODE:
// app.js (shared between server and client)
import { createSSRApp } from 'vue'

export function createApp() {
  return createSSRApp({
    data: () => ({ count: 1 }),
    template: `<button @click="count++">{{ count }}</button>`
  })
}

----------------------------------------

TITLE: Accessing Custom Options in Vue Component
DESCRIPTION: Example of using $options to access custom component options in the created lifecycle hook.

LANGUAGE: javascript
CODE:
const app = createApp({
  customOption: 'foo',
  created() {
    console.log(this.$options.customOption) // => 'foo'
  }
})

----------------------------------------

TITLE: Destructuring Refs with $() in Vue
DESCRIPTION: Demonstrates how to use the $() macro for destructuring refs from composition functions.

LANGUAGE: javascript
CODE:
import { useMouse } from '@vueuse/core'

const { x, y } = $(useMouse())

console.log(x, y)

----------------------------------------

TITLE: Element Selectors with Scoped Styles - Bad Practice
DESCRIPTION: Demonstrates the incorrect use of element selectors in scoped styles, which can lead to performance issues due to slower element-attribute selector matching.

LANGUAGE: vue-html
CODE:
<template>
  <button>×</button>
</template>

<style scoped>
button {
  background-color: red;
}
</style>

----------------------------------------

TITLE: Transition Between Elements in Vue
DESCRIPTION: Shows how to transition between multiple elements using v-if and v-else.

LANGUAGE: vue-html
CODE:
<Transition>
  <button v-if="docState === 'saved'">Edit</button>
  <button v-else-if="docState === 'edited'">Save</button>
  <button v-else-if="docState === 'editing'">Cancel</button>
</Transition>

----------------------------------------

TITLE: Using Deep Selectors in Scoped CSS
DESCRIPTION: Shows how to use the :deep() pseudo-class to affect child components in scoped styles. This technique allows for more flexible styling in component hierarchies.

LANGUAGE: vue
CODE:
<style scoped>
.a :deep(.b) {
  /* ... */
}
</style>

LANGUAGE: css
CODE:
.a[data-v-f3f3eg9] .b {
  /* ... */
}

----------------------------------------

TITLE: Defining Vue Compiler Options Interface
DESCRIPTION: TypeScript interface for Vue component compiler options including custom element handling, whitespace preservation, delimiters, and comments.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  compilerOptions?: {
    isCustomElement?: (tag: string) => boolean
    whitespace?: 'condense' | 'preserve' // default: 'condense'
    delimiters?: [string, string] // default: ['{{', '}}']
    comments?: boolean // default: false
  }
}

----------------------------------------

TITLE: Defining deactivated Lifecycle Hook for KeepAlive Components
DESCRIPTION: The deactivated hook is called after the component instance is removed from the DOM as part of a tree cached by <KeepAlive>. It's not called during server-side rendering.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  deactivated?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Initializing Reactive State with Vue Composition API
DESCRIPTION: Demonstrates creating reactive state using Vue's reactive() API. The reactive() function creates a JavaScript Proxy that maintains reactivity for object properties.

LANGUAGE: javascript
CODE:
import { reactive } from 'vue'

const counter = reactive({
  count: 0
})

console.log(counter.count) // 0
counter.count++

----------------------------------------

TITLE: Transitions with Key Attribute in Vue
DESCRIPTION: Demonstrates using the key attribute to force re-render and trigger transitions.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue';
const count = ref(0);

setInterval(() => count.value++, 1000);
</script>

<template>
  <Transition>
    <span :key="count">{{ count }}</span>
  </Transition>
</template>

----------------------------------------

TITLE: Implementing Scoped CSS in Vue SFC
DESCRIPTION: Demonstrates how to use scoped CSS in a Vue component to apply styles only to the current component's elements. The example shows how Vue transforms scoped CSS during compilation.

LANGUAGE: vue
CODE:
<style scoped>
.example {
  color: red;
}
</style>

<template>
  <div class="example">hi</div>
</template>

LANGUAGE: vue
CODE:
<style>
.example[data-v-f3f3eg9] {
  color: red;
}
</style>

<template>
  <div class="example" data-v-f3f3eg9>hi</div>
</template>

----------------------------------------

TITLE: Implementing Custom Attribute Handling in Vue
DESCRIPTION: Example of using inheritAttrs: false to manually handle attribute binding in a Vue component. Demonstrates binding $attrs to a specific element.

LANGUAGE: vue
CODE:
<script>
export default {
  inheritAttrs: false,
  props: ['label', 'value'],
  emits: ['input']
}
</script>

<template>
  <label>
    {{ label }}
    <input
      v-bind="$attrs"
      v-bind:value="value"
      v-on:input="$emit('input', $event.target.value)"
    />
  </label>
</template>

----------------------------------------

TITLE: Defining renderTriggered Debug Hook in Vue Component
DESCRIPTION: The renderTriggered hook is called when a reactive dependency triggers the component's render effect to be re-run. It's a development-mode-only hook and not called during server-side rendering.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  renderTriggered?(this: ComponentPublicInstance, e: DebuggerEvent): void
}

type DebuggerEvent = {
  effect: ReactiveEffect
  target: object
  type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */
  key: any
  newValue?: any
  oldValue?: any
  oldTarget?: Map<any, any> | Set<any>
}

----------------------------------------

TITLE: JavaScript Hooks in Vue Transition
DESCRIPTION: Shows how to use JavaScript hooks with the Transition component.

LANGUAGE: vue-html
CODE:
<Transition
  @before-enter="onBeforeEnter"
  @enter="onEnter"
  @after-enter="onAfterEnter"
  @enter-cancelled="onEnterCancelled"
  @before-leave="onBeforeLeave"
  @leave="onLeave"
  @after-leave="onAfterLeave"
  @leave-cancelled="onLeaveCancelled"
>
  <!-- ... -->
</Transition>

LANGUAGE: javascript
CODE:
function onBeforeEnter(el) {}
function onEnter(el, done) {
  done()
}
function onAfterEnter(el) {}
function onEnterCancelled(el) {}
function onBeforeLeave(el) {}
function onLeave(el, done) {
  done()
}
function onAfterLeave(el) {}
function onLeaveCancelled(el) {}

----------------------------------------

TITLE: Implementing Watchers with Vue Composition API
DESCRIPTION: This snippet demonstrates how to use the watch() function from Vue's Composition API to observe changes in a ref and perform side effects. It watches a count ref and logs the new value to the console whenever it changes.

LANGUAGE: javascript
CODE:
import { ref, watch } from 'vue'

const count = ref(0)

watch(count, (newCount) => {
  // yes, console.log() is a side effect
  console.log(`new count is: ${newCount}`)
})

----------------------------------------

TITLE: Vue toRefs Implementation Example
DESCRIPTION: Example demonstrating toRefs utility that converts a reactive object to a plain object where each property is a ref linked to the original.

LANGUAGE: javascript
CODE:
const state = reactive({
  foo: 1,
  bar: 2
})

const stateAsRefs = toRefs(state)

// The ref and the original property is "linked"
state.foo++
console.log(stateAsRefs.foo.value) // 2

stateAsRefs.foo.value++
console.log(state.foo) // 3

----------------------------------------

TITLE: Setup Context Usage
DESCRIPTION: Shows how to use the setup context object to access attrs, slots, emit, and expose functionality.

LANGUAGE: javascript
CODE:
export default {
  setup(props, context) {
    // Attributes (Non-reactive object, equivalent to $attrs)
    console.log(context.attrs)

    // Slots (Non-reactive object, equivalent to $slots)
    console.log(context.slots)

    // Emit events (Function, equivalent to $emit)
    console.log(context.emit)

    // Expose public properties (Function)
    console.log(context.expose)
  }
}

----------------------------------------

TITLE: Defining beforeMount Lifecycle Hook in Vue Component
DESCRIPTION: The beforeMount hook is called right before the component is to be mounted. The component has finished setting up its reactive state, but no DOM nodes have been created yet.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  beforeMount?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Raw HTML Output with v-html Directive
DESCRIPTION: Shows how to output raw HTML content using Vue's v-html directive, with both text interpolation and directive examples.

LANGUAGE: vue-html
CODE:
<p>Using text interpolation: {{ rawHtml }}</p>
<p>Using v-html directive: <span v-html="rawHtml"></span></p>

----------------------------------------

TITLE: Configuring KeepAlive with Include/Exclude in Vue
DESCRIPTION: These snippets show different ways to use the include and exclude props of KeepAlive to customize which components are cached.

LANGUAGE: vue
CODE:
<!-- comma-delimited string -->
<KeepAlive include="a,b">
  <component :is="view" />
</KeepAlive>

<!-- regex (use `v-bind`) -->
<KeepAlive :include="/a|b/">
  <component :is="view" />
</KeepAlive>

<!-- Array (use `v-bind`) -->
<KeepAlive :include="['a', 'b']">
  <component :is="view" />
</KeepAlive>

----------------------------------------

TITLE: Vue toRef Implementation Examples
DESCRIPTION: Examples showing how to use toRef to create refs from reactive properties and normalize values. Includes both value normalization and object property signatures.

LANGUAGE: javascript
CODE:
// returns existing refs as-is
toRef(existingRef)

// creates a readonly ref that calls the getter on .value access
toRef(() => props.foo)

// creates normal refs from non-function values
// equivalent to ref(1)
toRef(1)

LANGUAGE: javascript
CODE:
const state = reactive({
  foo: 1,
  bar: 2
})

// a two-way ref that syncs with the original property
const fooRef = toRef(state, 'foo')

// mutating the ref updates the original
fooRef.value++
console.log(state.foo) // 2

// mutating the original also updates the ref
state.foo++
console.log(fooRef.value) // 3

----------------------------------------

TITLE: CSSProperties Augmentation in Vue
DESCRIPTION: Demonstrates augmenting allowed values in style property bindings for custom CSS properties.

LANGUAGE: typescript
CODE:
declare module 'vue' {
  interface CSSProperties {
    [key: `--${string}`]: string
  }
}

LANGUAGE: tsx
CODE:
<div style={ { '--bg-color': 'blue' } }>

LANGUAGE: html
CODE:
<div :style="{ '--bg-color': 'blue' }"></div>

----------------------------------------

TITLE: Defining beforeUnmount Lifecycle Hook in Vue Component
DESCRIPTION: The beforeUnmount hook is called right before a component instance is to be unmounted. The component instance is still fully functional at this point.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  beforeUnmount?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Using nextTick for DOM Updates
DESCRIPTION: Demonstrates using nextTick to handle asynchronous DOM updates after state changes. Shows both composition API and options API approaches.

LANGUAGE: vue
CODE:
<script setup>
import { ref, nextTick } from 'vue'

const count = ref(0)

async function increment() {
  count.value++

  // DOM not yet updated
  console.log(document.getElementById('counter').textContent) // 0

  await nextTick()
  // DOM is now updated
  console.log(document.getElementById('counter').textContent) // 1
}
</script>

<template>
  <button id="counter" @click="increment">{{ count }}</button>
</template>

LANGUAGE: vue
CODE:
<script>
import { nextTick } from 'vue'

export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    async increment() {
      this.count++

      // DOM not yet updated
      console.log(document.getElementById('counter').textContent) // 0

      await nextTick()
      // DOM is now updated
      console.log(document.getElementById('counter').textContent) // 1
    }
  }
}
</script>

<template>
  <button id="counter" @click="increment">{{ count }}</button>
</template>

----------------------------------------

TITLE: Typing Computed Properties in Vue with TypeScript
DESCRIPTION: This snippet illustrates how to type computed properties in Vue using TypeScript. It shows both inferred types and explicit type annotations for computed properties.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      message: 'Hello!'
    }
  },
  computed: {
    // explicitly annotate return type
    greeting(): string {
      return this.message + '!'
    },

    // annotating a writable computed property
    greetingUppercased: {
      get(): string {
        return this.greeting.toUpperCase()
      },
      set(newValue: string) {
        this.message = newValue.toUpperCase()
      }
    }
  }
})

----------------------------------------

TITLE: Handling Attribute Inheritance with Multiple Root Nodes in Vue.js
DESCRIPTION: Shows how to explicitly bind fallthrough attributes in components with multiple root nodes to avoid warnings.

LANGUAGE: vue-html
CODE:
<header>...</header>
<main v-bind="$attrs">...</main>
<footer>...</footer>

----------------------------------------

TITLE: Declaring Props in camelCase
DESCRIPTION: Shows the correct way to declare props using camelCase in component definitions, while using kebab-case in templates.

LANGUAGE: JavaScript
CODE:
props: {
  greetingText: String
}

LANGUAGE: JavaScript
CODE:
const props = defineProps({
  greetingText: String
})

LANGUAGE: HTML
CODE:
<!-- for in-DOM templates -->
<welcome-message greeting-text="hi"></welcome-message>

----------------------------------------

TITLE: Defining Component Name in TypeScript
DESCRIPTION: Type definition for the 'name' option in Vue component options. The name is used for self-reference, DevTools display, and warning traces.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  name?: string
}

----------------------------------------

TITLE: Basic Slot Usage in Vue.js
DESCRIPTION: Demonstrates how to use a basic slot in a Vue.js component to allow parent components to inject content.

LANGUAGE: vue-html
CODE:
<FancyButton>
  Click me! <!-- slot content -->
</FancyButton>

LANGUAGE: vue-html
CODE:
<button class="fancy-btn">
  <slot></slot> <!-- slot outlet -->
</button>

----------------------------------------

TITLE: Basic Slot Usage in Vue.js
DESCRIPTION: Demonstrates how to use a basic slot in a Vue.js component to allow parent components to inject content.

LANGUAGE: vue-html
CODE:
<FancyButton>
  Click me! <!-- slot content -->
</FancyButton>

LANGUAGE: vue-html
CODE:
<button class="fancy-btn">
  <slot></slot> <!-- slot outlet -->
</button>

----------------------------------------

TITLE: Typing Event Handlers in Vue with TypeScript
DESCRIPTION: This example demonstrates how to properly type event handlers in Vue components using TypeScript. It shows how to annotate the event argument and use type assertions when accessing event properties.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'

export default defineComponent({
  methods: {
    handleChange(event: Event) {
      console.log((event.target as HTMLInputElement).value)
    }
  }
})

----------------------------------------

TITLE: Accessing Fallthrough Attributes in Vue.js Templates
DESCRIPTION: Shows how to access fallthrough attributes directly in Vue.js template expressions using the $attrs object.

LANGUAGE: vue-html
CODE:
<span>Fallthrough attributes: {{ $attrs }}</span>

----------------------------------------

TITLE: Merging Props with Vue.js mergeProps() Function
DESCRIPTION: Example of merging multiple props objects with special handling for class, style, and event listeners using mergeProps().

LANGUAGE: javascript
CODE:
import { mergeProps } from 'vue'

const one = {
  class: 'foo',
  onClick: handlerA
}

const two = {
  class: { bar: true },
  onClick: handlerB
}

const merged = mergeProps(one, two)
/**
 {
   class: 'foo bar',
   onClick: [handlerA, handlerB]
 }
 */

----------------------------------------

TITLE: Defining Vue Render Function Interface
DESCRIPTION: TypeScript interface for Vue component render function that returns virtual DOM tree, including type definitions for VNode children.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  render?(this: ComponentPublicInstance) => VNodeChild
}

type VNodeChild = VNodeChildAtom | VNodeArrayChildren

type VNodeChildAtom =
  | VNode
  | string
  | number
  | boolean
  | null
  | undefined
  | void

type VNodeArrayChildren = (VNodeArrayChildren | VNodeChildAtom)[]

----------------------------------------

TITLE: Listening to Child Events in Vue Template (HTML)
DESCRIPTION: This snippet shows how a parent component can listen to events emitted by a child component in a Vue template within an HTML file. It uses the v-on directive to bind an event handler that receives the emitted data.

LANGUAGE: vue-html
CODE:
<child-comp @response="(msg) => childMsg = msg"></child-comp>

----------------------------------------

TITLE: App-Level Provide Setup
DESCRIPTION: Example of setting up provides at the Vue application level rather than in components.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({})

app.provide(/* key */ 'message', /* value */ 'hello!')

----------------------------------------

TITLE: Merging Class Attributes in Vue.js Components
DESCRIPTION: Illustrates how class attributes from both the parent and child components are merged in the final rendered DOM.

LANGUAGE: vue-html
CODE:
<!-- template of <MyButton> -->
<button class="btn">Click Me</button>

----------------------------------------

TITLE: Mutating Arrays in Vue Options API
DESCRIPTION: Shows how to update a todo list by mutating the source array using the push method in Options API style.

LANGUAGE: javascript
CODE:
this.todos.push(newTodo)

----------------------------------------

TITLE: Declaring Component Props in Vue
DESCRIPTION: Shows how to declare props for a Vue component using both simple array syntax and object syntax with validation options.

LANGUAGE: javascript
CODE:
export default {
  props: ['size', 'myMessage']
}

LANGUAGE: javascript
CODE:
export default {
  props: {
    // type check
    height: Number,
    // type check plus other validations
    age: {
      type: Number,
      default: 0,
      required: true,
      validator: (value) => {
        return value >= 0
      }
    }
  }
}

----------------------------------------

TITLE: Declaring Props with Options API
DESCRIPTION: Shows how to declare props using the Options API approach, defining a 'msg' prop of type String.

LANGUAGE: javascript
CODE:
// in child component
export default {
  props: {
    msg: String
  }
}

----------------------------------------

TITLE: Vite Configuration for Custom Elements
DESCRIPTION: Configuration example for Vite build setup to recognize custom elements in Vue applications.

LANGUAGE: javascript
CODE:
// vite.config.js
import vue from '@vitejs/plugin-vue'

export default {
  plugins: [
    vue({
      template: {
        compilerOptions: {
          // treat all tags with a dash as custom elements
          isCustomElement: (tag) => tag.includes('-')
        }
      }
    })
  ]
}

----------------------------------------

TITLE: Registering Custom Directives in Vue
DESCRIPTION: Type definition and example for the 'directives' option in Vue component options. Shows how to register custom directives for use in the component's template.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  directives?: { [key: string]: Directive }
}

LANGUAGE: javascript
CODE:
export default {
  directives: {
    // enables v-focus in template
    focus: {
      mounted(el) {
        el.focus()
      }
    }
  }
}

LANGUAGE: vue
CODE:
<input v-focus>

----------------------------------------

TITLE: Demonstrating v-model Limitation with Dynamic Native Elements in Vue
DESCRIPTION: Example showing that v-model doesn't work with dynamically created native HTML elements using <component>.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const tag = ref('input')
const username = ref('')
</script>

<template>
  <!-- This won't work as 'input' is a native HTML element -->
  <component :is="tag" v-model="username" />
</template>

----------------------------------------

TITLE: Exposing Public Properties in Vue Components
DESCRIPTION: Demonstrates how to use the expose option to declare which properties should be exposed on the component's public instance when accessed by a parent via template refs.

LANGUAGE: javascript
CODE:
export default {
  // only `publicMethod` will be available on the public instance
  expose: ['publicMethod'],
  methods: {
    publicMethod() {
      // ...
    },
    privateMethod() {
      // ...
    }
  }
}

----------------------------------------

TITLE: Accessing Template Refs with Composition API
DESCRIPTION: Demonstrates how to access template refs using the useTemplateRef helper in Vue 3.5+. Shows proper setup and usage within component lifecycle.

LANGUAGE: vue
CODE:
<script setup>
import { useTemplateRef, onMounted } from 'vue'

// the first argument must match the ref value in the template
const input = useTemplateRef('my-input')

onMounted(() => {
  input.value.focus()
})
</script>

<template>
  <input ref="my-input" />
</template>

----------------------------------------

TITLE: In-DOM Root Component Template with Vue in HTML and JavaScript
DESCRIPTION: This example shows how to define a template directly in the DOM for a Vue application's root component, along with the corresponding JavaScript to create and mount the app.

LANGUAGE: html
CODE:
<div id="app">
  <button @click="count++">{{ count }}</button>
</div>

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({
  data() {
    return {
      count: 0
    }
  }
})

app.mount('#app')

----------------------------------------

TITLE: Registering Child Components in Vue
DESCRIPTION: Type definition and example for the 'components' option in Vue component options. Demonstrates how to register child components for use in the current component.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  components?: { [key: string]: Component }
}

LANGUAGE: javascript
CODE:
import Foo from './Foo.vue'
import Bar from './Bar.vue'

export default {
  components: {
    // shorthand
    Foo,
    // register under a different name
    RenamedBar: Bar
  }
}

----------------------------------------

TITLE: JavaScript Expressions in Templates
DESCRIPTION: Demonstrates using JavaScript expressions within template mustaches for dynamic content transformation.

LANGUAGE: vue-html
CODE:
<h1>{{ message.split('').reverse().join('') }}</h1>

----------------------------------------

TITLE: Transition Component Type Definition
DESCRIPTION: TypeScript interface defining all available props for the Transition component including animation controls and CSS class customization.

LANGUAGE: typescript
CODE:
interface TransitionProps {
  name?: string
  css?: boolean
  type?: 'transition' | 'animation'
  duration?: number | { enter: number; leave: number }
  mode?: 'in-out' | 'out-in' | 'default'
  appear?: boolean
  enterFromClass?: string
  enterActiveClass?: string
  enterToClass?: string
  appearFromClass?: string
  appearActiveClass?: string
  appearToClass?: string
  leaveFromClass?: string
  leaveActiveClass?: string
  leaveToClass?: string
}

----------------------------------------

TITLE: Defining provide option in Vue component
DESCRIPTION: Demonstrates how to use the provide option in a Vue component to make values available for injection by descendant components.

LANGUAGE: javascript
CODE:
const s = Symbol()

export default {
  provide: {
    foo: 'foo',
    [s]: 'bar'
  }
}

----------------------------------------

TITLE: v-for with Component in Vue.js
DESCRIPTION: Shows how to use v-for with a component, passing iterated data as props.

LANGUAGE: vue-html
CODE:
<MyComponent
  v-for="(item, index) in items"
  :item="item"
  :index="index"
  :key="item.id"
/>

----------------------------------------

TITLE: Using defineOptions for Attribute Inheritance in Vue 3
DESCRIPTION: Example of using defineOptions to set inheritAttrs: false in a Vue 3 component with <script setup>. Shows how to handle custom attribute binding.

LANGUAGE: vue
CODE:
<script setup>
defineProps(['label', 'value'])
defineEmits(['input'])
defineOptions({
  inheritAttrs: false
})
</script>

<template>
  <label>
    {{ label }}
    <input
      v-bind="$attrs"
      v-bind:value="value"
      v-on:input="$emit('input', $event.target.value)"
    />
  </label>
</template>

----------------------------------------

TITLE: Using mounted Hook in Vue Options API
DESCRIPTION: Shows how to use the mounted lifecycle hook to run code after the component is mounted in the Options API.

LANGUAGE: javascript
CODE:
export default {
  mounted() {
    // component is now mounted.
  }
}

----------------------------------------

TITLE: Conditional Rendering with v-if, v-else, and v-else-if in Vue
DESCRIPTION: These directives are used for conditional rendering of elements or template fragments based on the truthy-ness of expression values. v-else and v-else-if must follow a v-if or v-else-if element.

LANGUAGE: vue
CODE:
<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>

----------------------------------------

TITLE: Creating Vnodes with h() Function in Vue
DESCRIPTION: Example showing how to create virtual DOM nodes using Vue's h() function with different argument patterns and prop configurations.

LANGUAGE: javascript
CODE:
import { h } from 'vue'

const vnode = h(
  'div', // type
  { id: 'foo', class: 'bar' }, // props
  [
    /* children */
  ]
)

----------------------------------------

TITLE: Using $ref for Reactive Variables in Vue
DESCRIPTION: Demonstrates how to use the $ref macro to create reactive variables without explicit .value access.

LANGUAGE: vue
CODE:
<script setup>
let count = $ref(0)

console.log(count)

function increment() {
  count++
}
</script>

<template>
  <button @click="increment">{{ count }}</button>
</template>

----------------------------------------

TITLE: SFC Global Registration in Vue 3
DESCRIPTION: Shows how to globally register Single File Components (.vue files) in a Vue 3 application.

LANGUAGE: javascript
CODE:
import MyComponent from './App.vue'

app.component('MyComponent', MyComponent)

----------------------------------------

TITLE: Accessing Vue Version
DESCRIPTION: Shows how to access the current Vue.js version number from code.

LANGUAGE: javascript
CODE:
import { version } from 'vue'

console.log(version)

----------------------------------------

TITLE: List Rendering with v-for Directive in Vue
DESCRIPTION: The v-for directive renders an element or template block multiple times based on source data. It supports arrays, objects, numbers, strings, and iterable values.

LANGUAGE: vue
CODE:
<div v-for="item in items" :key="item.id">
  {{ item.text }}
</div>

----------------------------------------

TITLE: Rendering Dynamic HTML Elements in Vue
DESCRIPTION: Example of using <component> to render different HTML elements based on a condition.

LANGUAGE: vue
CODE:
<component :is="href ? 'a' : 'span'></component>

----------------------------------------

TITLE: Compiled Output of $ref Usage in Vue
DESCRIPTION: Shows how the Vue compiler transforms $ref usage into standard ref calls with .value access.

LANGUAGE: javascript
CODE:
import { ref } from 'vue'

let count = ref(0)

console.log(count.value)

function increment() {
  count.value++
}

----------------------------------------

TITLE: Defining a Vue Plugin
DESCRIPTION: Shows the structure of a Vue plugin, defined as an object with an install method. The install method receives the app instance and optional configuration options as parameters.

LANGUAGE: javascript
CODE:
const myPlugin = {
  install(app, options) {
    // configure the app
  }
}

----------------------------------------

TITLE: Implementing CSS Modules in Vue SFC
DESCRIPTION: Demonstrates how to use CSS Modules in a Vue component. CSS Modules provide a way to scope styles and expose them as an object to the component.

LANGUAGE: vue
CODE:
<template>
  <p :class="$style.red">This should be red</p>
</template>

<style module>
.red {
  color: red;
}
</style>

----------------------------------------

TITLE: VNode Creation Type Definitions in TypeScript
DESCRIPTION: Type definitions for the h() function used to create virtual DOM nodes in Vue.js. Includes signatures for creating both element and component vnodes with optional props and children.

LANGUAGE: typescript
CODE:
function h(
  type: string | Component,
  props?: object | null,
  children?: Children | Slot | Slots
): VNode

// omitting props
function h(type: string | Component, children?: Children | Slot): VNode

type Children = string | number | boolean | VNode | null | Children[]

type Slot = () => Children

type Slots = { [name: string]: Slot }

----------------------------------------

TITLE: Compiled Output of $() Destructuring in Vue
DESCRIPTION: Shows how the Vue compiler transforms $() destructuring into toRef calls.

LANGUAGE: javascript
CODE:
import { toRef } from 'vue'
import { useMouse } from '@vueuse/core'

const __temp = useMouse(),
  x = toRef(__temp, 'x'),
  y = toRef(__temp, 'y')

console.log(x.value, y.value)

----------------------------------------

TITLE: ComponentCustomProps TSX Augmentation in Vue
DESCRIPTION: Shows how to augment allowed TSX props to support non-declared props on TSX elements.

LANGUAGE: typescript
CODE:
declare module 'vue' {
  interface ComponentCustomProps {
    hello?: string
  }
}

export {}

LANGUAGE: tsx
CODE:
// now works even if hello is not a declared prop
<MyComponent hello="world" />

----------------------------------------

TITLE: HTML Injection Methods in Vue.js
DESCRIPTION: Shows different ways to render HTML content when it's known to be safe, including template v-html directive and render function approaches.

LANGUAGE: vue-html
CODE:
<div v-html="userProvidedHtml"></div>

LANGUAGE: javascript
CODE:
h('div', {
  innerHTML: this.userProvidedHtml
})

LANGUAGE: jsx
CODE:
<div innerHTML={this.userProvidedHtml}></div>

----------------------------------------

TITLE: Displaying Sponsor Groups in Vue Template
DESCRIPTION: These snippets show how to use the SponsorsGroup component to display different tiers of sponsors. Each SponsorsGroup component is given a tier and placement prop to determine which sponsors to display and where.

LANGUAGE: vue
CODE:
<SponsorsGroup tier="special" placement="page" />

LANGUAGE: vue
CODE:
<SponsorsGroup tier="platinum" placement="page" />

LANGUAGE: vue
CODE:
<SponsorsGroup tier="platinum_china" placement="page" />

LANGUAGE: vue
CODE:
<SponsorsGroup tier="gold" placement="page" />

LANGUAGE: vue
CODE:
<SponsorsGroup tier="silver" placement="page" />

----------------------------------------

TITLE: Props and Emits Declaration
DESCRIPTION: Example of declaring props and emits using defineProps and defineEmits with TypeScript support.

LANGUAGE: vue
CODE:
<script setup>
const props = defineProps({
  foo: String
})

const emit = defineEmits(['change', 'delete'])
// setup code
</script>

----------------------------------------

TITLE: Emitting Events with Composition API in Vue JavaScript
DESCRIPTION: This snippet demonstrates how to declare and emit events in a Vue component using the Composition API in a JavaScript file. It uses the emits option to declare events and the emit function from the setup context to trigger them.

LANGUAGE: js
CODE:
export default {
  // declare emitted events
  emits: ['response'],
  setup(props, { emit }) {
    // emit with argument
    emit('response', 'hello from child')
  }
}

----------------------------------------

TITLE: Using data-allow-mismatch Attribute in Vue SSR
DESCRIPTION: Demonstrates the usage of the data-allow-mismatch attribute to suppress hydration mismatch warnings in Vue SSR. It can be used with specific values to limit the allowed mismatch type.

LANGUAGE: html
CODE:
<div data-allow-mismatch="text">{{ data.toLocaleString() }}</div>

----------------------------------------

TITLE: Component Scoped Styling in Vue
DESCRIPTION: Illustrates different approaches to component-scoped styling using scoped attribute, CSS modules, and BEM convention.

LANGUAGE: vue-html
CODE:
<!-- Using scoped attribute -->
<template>
  <button class="button button-close">×</button>
</template>
<style scoped>
.button {
  border: none;
  border-radius: 2px;
}
.button-close {
  background-color: red;
}
</style>

----------------------------------------

TITLE: Global Component Usage in Vue Templates
DESCRIPTION: Shows how globally registered components can be used in any component template within the application.

LANGUAGE: vue-html
CODE:
<!-- this will work in any component inside the app -->
<ComponentA/>
<ComponentB/>
<ComponentC/>

----------------------------------------

TITLE: Vue SFC Pre-processor Usage
DESCRIPTION: Demonstrates using pre-processors like Pug for template and Sass for styles in Vue SFC blocks.

LANGUAGE: vue-html
CODE:
<template lang="pug">
p {{ msg }}
</template>

<style lang="scss">
  $primary-color: #333;
  body {
    color: $primary-color;
  }
</style>

----------------------------------------

TITLE: Vue Component: Providing Values Example
DESCRIPTION: Example showing different ways to provide values in a Vue component using provide(), including static values, reactive refs, and Symbol keys.

LANGUAGE: vue
CODE:
<script setup>
import { ref, provide } from 'vue'
import { countSymbol } from './injectionSymbols'

// provide static value
provide('path', '/project/')

// provide reactive value
const count = ref(0)
provide('count', count)

// provide with Symbol keys
provide(countSymbol, count)
</script>

----------------------------------------

TITLE: Defining Vue Template Component Interface
DESCRIPTION: TypeScript interface definition for Vue component template option that accepts a string template.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  template?: string
}

----------------------------------------

TITLE: Detailed Prop Definitions in Vue Options API
DESCRIPTION: Shows proper prop definition patterns with type checking and validation in Vue Options API.

LANGUAGE: javascript
CODE:
// Bad
props: ['status']

// Good
props: {
  status: String
}

// Best Practice
props: {
  status: {
    type: String,
    required: true,
    validator: value => {
      return [
        'syncing',
        'synced',
        'version-conflict',
        'error'
      ].includes(value)
    }
  }
}

----------------------------------------

TITLE: Creating Reactive References with Vue ref()
DESCRIPTION: Shows how to create reactive references using Vue's ref() API. Unlike reactive(), ref() can handle primitive values by wrapping them in an object with a .value property.

LANGUAGE: javascript
CODE:
import { ref } from 'vue'

const message = ref('Hello World!')

console.log(message.value) // "Hello World!"
message.value = 'Changed'

----------------------------------------

TITLE: Rendering Vue App to String with SSR
DESCRIPTION: Demonstrates how to use renderToString function to render a Vue app to an HTML string on the server. It creates an SSR app, defines a template, and asynchronously renders it to a string.

LANGUAGE: javascript
CODE:
import { createSSRApp } from 'vue'
import { renderToString } from 'vue/server-renderer'

const app = createSSRApp({
  data: () => ({ msg: 'hello' }),
  template: `<div>{{ msg }}</div>`
})

;(async () => {
  const html = await renderToString(app)
  console.log(html)
})()

----------------------------------------

TITLE: Defining mounted Lifecycle Hook in Vue Component
DESCRIPTION: The mounted hook is called after the component has been mounted. It's typically used for performing side effects that need access to the component's rendered DOM.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  mounted?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Configuring Vue Compile-Time Flags in Vue CLI
DESCRIPTION: Configuration example for Vue CLI showing how to set compile-time flags using chainWebpack configuration. Sets values for Options API, DevTools, and hydration mismatch details.

LANGUAGE: javascript
CODE:
// vue.config.js
module.exports = {
  chainWebpack: (config) => {
    config.plugin('define').tap((definitions) => {
      Object.assign(definitions[0], {
        __VUE_OPTIONS_API__: 'true',
        __VUE_PROD_DEVTOOLS__: 'false',
        __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'
      })
      return definitions
    })
  }
}

----------------------------------------

TITLE: Using PascalCase or kebab-case for Single-File Component Filenames
DESCRIPTION: Shows the recommended naming conventions for Single-File Component filenames, using either PascalCase or kebab-case consistently.

LANGUAGE: JavaScript
CODE:
components/
|- MyComponent.vue

LANGUAGE: JavaScript
CODE:
components/
|- my-component.vue

----------------------------------------

TITLE: Renaming injected property in Vue
DESCRIPTION: Demonstrates how to inject a property with a different name using the 'from' option in a Vue component.

LANGUAGE: javascript
CODE:
const Child = {
  inject: {
    foo: {
      from: 'bar',
      default: 'foo'
    }
  }
}

----------------------------------------

TITLE: Rendering Vue App to Web ReadableStream
DESCRIPTION: Demonstrates how to use renderToWebStream function to render a Vue app as a Web ReadableStream, which can be used in environments supporting the Streams API.

LANGUAGE: javascript
CODE:
// inside an environment with ReadableStream support
return new Response(renderToWebStream(app))

----------------------------------------

TITLE: Declaring Methods in Vue.js Options API
DESCRIPTION: Shows how to declare methods using the methods option in the Options API. Methods can be called in lifecycle hooks or other methods, and are accessible in the component's template.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  },
  mounted() {
    // methods can be called in lifecycle hooks, or other methods!
    this.increment()
  }
}

----------------------------------------

TITLE: Configuring Vue Compile-Time Flags in Webpack
DESCRIPTION: Example of setting Vue.js compile-time flags using Webpack's DefinePlugin. Shows configuration for Options API, DevTools, and hydration mismatch details.

LANGUAGE: javascript
CODE:
// webpack.config.js
module.exports = {
  // ...
  plugins: [
    new webpack.DefinePlugin({
      __VUE_OPTIONS_API__: 'true',
      __VUE_PROD_DEVTOOLS__: 'false',
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'
    })
  ]
}

----------------------------------------

TITLE: Spacing in Vue.js Component Options
DESCRIPTION: Illustrates the use of empty lines between multi-line properties in Vue.js component options to improve readability. This example shows both bad and good practices for the Options API.

LANGUAGE: javascript
CODE:
// Good Example
props: {
  value: {
    type: String,
    required: true
  },

  focused: {
    type: Boolean,
    default: false
  },

  label: String,
  icon: String
},

computed: {
  formattedValue() {
    // ...
  },

  inputClasses() {
    // ...
  }
}

----------------------------------------

TITLE: Unsafe Template Usage Example in Vue.js
DESCRIPTION: Demonstrates an unsafe pattern of directly injecting user-provided content into Vue templates, which should never be done due to security risks.

LANGUAGE: javascript
CODE:
Vue.createApp({
  template: `<div>` + userProvidedString + `</div>` // NEVER DO THIS
}).mount('#app')

----------------------------------------

TITLE: Initializing Vue.js TodoMVC Application
DESCRIPTION: Sets up the main Vue.js application instance for the TodoMVC implementation. It defines the data structure, computed properties, and methods for managing todos.

LANGUAGE: JavaScript
CODE:
// app Vue instance
const app = Vue.createApp({
  // app initial state
  data: () => ({
    todos: [],
    newTodo: '',
    editedTodo: null,
    visibility: 'all'
  }),

  // computed properties
  // https://vuejs.org/guide/essentials/computed.html
  computed: {
    filteredTodos() {
      return filters[this.visibility](this.todos)
    },
    remaining() {
      return filters.active(this.todos).length
    },
    allDone: {
      get: function () {
        return this.remaining === 0
      },
      set: function (value) {
        this.todos.forEach(function (todo) {
          todo.completed = value
        })
      }
    }
  },

  // methods that implement data logic.
  // note there's no DOM manipulation here at all.
  methods: {
    pluralize: function (word, count) {
      return word + (count === 1 ? '' : 's')
    },

    addTodo: function () {
      const value = this.newTodo && this.newTodo.trim()
      if (!value) {
        return
      }
      this.todos.push({
        id: todoStorage.uid++,
        title: value,
        completed: false
      })
      this.newTodo = ''
    },

    removeTodo: function (todo) {
      const index = this.todos.indexOf(todo)
      this.todos.splice(index, 1)
    },

    editTodo: function (todo) {
      this.beforeEditCache = todo.title
      this.editedTodo = todo
    },

    doneEdit: function (todo) {
      if (!this.editedTodo) {
        return
      }
      this.editedTodo = null
      todo.title = todo.title.trim()
      if (!todo.title) {
        this.removeTodo(todo)
      }
    },

    cancelEdit: function (todo) {
      this.editedTodo = null
      todo.title = this.beforeEditCache
    },

    removeCompleted: function () {
      this.todos = filters.active(this.todos)
    }
  }
})

----------------------------------------

TITLE: Scoped Slots in Vue.js
DESCRIPTION: Explains how to use scoped slots to pass data from a child component to the parent's slot content.

LANGUAGE: vue-html
CODE:
<!-- <MyComponent> template -->
<div>
  <slot :text="greetingMessage" :count="1"></slot>
</div>

LANGUAGE: vue-html
CODE:
<MyComponent v-slot="slotProps">
  {{ slotProps.text }} {{ slotProps.count }}
</MyComponent>

----------------------------------------

TITLE: Configuring Vue Compile-Time Flags in Rollup
DESCRIPTION: Configuration example using Rollup's plugin-replace to set Vue.js compile-time flags. Demonstrates setting Options API, DevTools, and hydration mismatch details flags.

LANGUAGE: javascript
CODE:
// rollup.config.js
import replace from '@rollup/plugin-replace'

export default {
  plugins: [
    replace({
      __VUE_OPTIONS_API__: 'true',
      __VUE_PROD_DEVTOOLS__: 'false',
      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'
    })
  ]
}

----------------------------------------

TITLE: Vue ES Module Usage Example
DESCRIPTION: Example of using Vue via ES modules from CDN, showing module imports and basic Vue application setup

LANGUAGE: html
CODE:
<div id="app">{{ message }}</div>

<script type="module">
  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'

  createApp({
    data() {
      return {
        message: 'Hello Vue!'
      }
    }
  }).mount('#app')
</script>

----------------------------------------

TITLE: Creating Effect Watchers with watchEffect()
DESCRIPTION: Runs a function immediately while tracking reactive dependencies and re-runs it when dependencies change. Supports effect cleanup and debugging options.

LANGUAGE: typescript
CODE:
function watchEffect(
  effect: (onCleanup: OnCleanup) => void,
  options?: WatchEffectOptions
): WatchHandle

LANGUAGE: javascript
CODE:
const count = ref(0)

watchEffect(() => console.log(count.value))
// -> logs 0

count.value++
// -> logs 1

----------------------------------------

TITLE: Defining TodoMVC Filters in Vue.js
DESCRIPTION: Creates filter functions for the TodoMVC application. These filters are used to display all todos, only active todos, or only completed todos based on the current visibility selection.

LANGUAGE: JavaScript
CODE:
// visibility filters
const filters = {
  all: function (todos) {
    return todos
  },
  active: function (todos) {
    return todos.filter(function (todo) {
      return !todo.completed
    })
  },
  completed: function (todos) {
    return todos.filter(function (todo) {
      return todo.completed
    })
  }
}

----------------------------------------

TITLE: Declaring Props with Composition API in JavaScript
DESCRIPTION: Demonstrates prop declaration using the Composition API in a JavaScript file, showing how to access props in the setup function.

LANGUAGE: javascript
CODE:
// in child component
export default {
  props: {
    msg: String
  },
  setup(props) {
    // access props.msg
  }
}

----------------------------------------

TITLE: Using key Attribute with v-for in Vue
DESCRIPTION: Demonstrates using the key special attribute with v-for directive to help Vue track list items. Key attribute helps Vue's virtual DOM algorithm efficiently update and reorder elements.

LANGUAGE: vue-html
CODE:
<ul>
  <li v-for="item in items" :key="item.id">...</li>
</ul>

----------------------------------------

TITLE: Creating Custom Elements with Vue
DESCRIPTION: Example demonstrating how to create and register a custom element using Vue's defineCustomElement API.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'vue'

const MyVueElement = defineCustomElement({
  // normal Vue component options here
  props: {},
  emits: {},
  template: `...`,

  // defineCustomElement only: CSS to be injected into shadow root
  styles: [`/* inlined css */`]
})

// Register the custom element
customElements.define('my-vue-element', MyVueElement)

// Programmatically instantiate the element
document.body.appendChild(
  new MyVueElement({
    // initial props (optional)
  })
)

----------------------------------------

TITLE: Using v-html Directive in Vue
DESCRIPTION: The v-html directive updates an element's innerHTML. It expects a string value and inserts it as plain HTML, without processing Vue template syntax.

LANGUAGE: vue
CODE:
<div v-html="html"></div>

----------------------------------------

TITLE: Mounting Vue.js TodoMVC Application
DESCRIPTION: Mounts the Vue.js application to the DOM and sets up a watcher for the todos array. The watcher ensures that any changes to the todos are automatically saved to local storage.

LANGUAGE: JavaScript
CODE:
// mount
const vm = app.mount('.todoapp')

// handle routing
function onHashChange() {
  const visibility = window.location.hash.replace(/#\/?/, '')
  if (filters[visibility]) {
    vm.visibility = visibility
  } else {
    window.location.hash = ''
    vm.visibility = 'all'
  }
}

window.addEventListener('hashchange', onHashChange)
onHashChange()

// localStorage persistence
vm.$watch('todos', function (newTodos, oldTodos) {
  todoStorage.save(newTodos)
}, {
  deep: true
})

----------------------------------------

TITLE: Configuring Attribute Inheritance in TypeScript
DESCRIPTION: Type definition for the 'inheritAttrs' option in Vue component options. Controls whether default attribute fallthrough behavior is enabled.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  inheritAttrs?: boolean // default: true
}

----------------------------------------

TITLE: Using is Attribute with Custom Components
DESCRIPTION: Example of using the is attribute with vue: prefix to render a Vue component within DOM template constraints.

LANGUAGE: vue-html
CODE:
<table>
  <tr is="vue:my-row-component"></tr>
</table>

----------------------------------------

TITLE: Fetching Latest Vue Version with Vue 3 Composition API
DESCRIPTION: This Vue component uses the Composition API to fetch and display the latest stable version of Vue from GitHub's API. It demonstrates the use of ref, onMounted, and async/await for API calls in Vue 3.

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted } from 'vue'

const version = ref()

onMounted(async () => {
  const res = await fetch('https://api.github.com/repos/vuejs/core/releases/latest')
  version.value = (await res.json()).name
})
</script>

<template>
  <p v-if="version">
    The current latest stable version of Vue is <strong>{{ version }}</strong>.
  </p>
  <p v-else>
    Checking latest version...
  </p>
</template>

----------------------------------------

TITLE: Rendering Dynamic Components with Options API in Vue
DESCRIPTION: Example of using <component> to render dynamic components based on a data property in the Options API.

LANGUAGE: vue
CODE:
<script>
import Foo from './Foo.vue'
import Bar from './Bar.vue'

export default {
  components: { Foo, Bar },
  data() {
    return {
      view: 'Foo'
    }
  }
}
</script>

<template>
  <component :is="view" />
</template>

----------------------------------------

TITLE: Implementing Flight Booker Component in Vue.js
DESCRIPTION: This Vue component creates a flight booking interface with options for one-way or return flights. It includes date selection, input validation, and a booking confirmation feature.

LANGUAGE: vue
CODE:
<script setup>
import { ref, computed } from 'vue'

const flightType = ref('one-way')
const startDate = ref(formatDate(new Date()))
const returnDate = ref(startDate.value)

const isReturn = computed(() => flightType.value === 'return')

const isStartDateValid = computed(() => isValidDate(startDate.value))
const isReturnDateValid = computed(() => isValidDate(returnDate.value))
const isReturnDateAfterStartDate = computed(() => 
  new Date(returnDate.value) >= new Date(startDate.value)
)

const canBook = computed(() => 
  isStartDateValid.value && 
  (!isReturn.value || (isReturnDateValid.value && isReturnDateAfterStartDate.value))
)

function formatDate(date) {
  return date.toISOString().split('T')[0]
}

function isValidDate(dateString) {
  return !isNaN(new Date(dateString).getTime())
}

function book() {
  alert(`You have booked a ${flightType.value} flight on ${startDate.value}${isReturn.value ? ` with a return on ${returnDate.value}` : ''}.`)
}
</script>

<template>
  <div class="flight-booker">
    <select v-model="flightType">
      <option value="one-way">One-way flight</option>
      <option value="return">Return flight</option>
    </select>
    
    <input 
      type="date" 
      v-model="startDate"
      :class="{ invalid: !isStartDateValid }"
    >
    
    <input 
      type="date" 
      v-model="returnDate"
      :disabled="!isReturn"
      :class="{ invalid: isReturn && (!isReturnDateValid || !isReturnDateAfterStartDate) }"
    >
    
    <button @click="book" :disabled="!canBook">
      Book
    </button>
  </div>
</template>

<style scoped>
.flight-booker {
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 200px;
}

.invalid {
  background-color: rgb(255, 240, 240);
}
</style>

----------------------------------------

TITLE: Using extends in Vue component
DESCRIPTION: Shows how to use the extends option to inherit from a base component in Vue.

LANGUAGE: javascript
CODE:
const CompA = { ... }

const CompB = {
  extends: CompA,
  ...
}

----------------------------------------

TITLE: Dynamic Styling with v-bind() in <script setup>
DESCRIPTION: Demonstrates the use of v-bind CSS function with <script setup> syntax, allowing for more concise reactive styling using Composition API.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'
const theme = ref({
    color: 'red',
})
</script>

<template>
  <p>hello</p>
</template>

<style scoped>
p {
  color: v-bind('theme.color');
}
</style>

----------------------------------------

TITLE: Importing and Rendering TeamPage Component in Vue.js
DESCRIPTION: This snippet demonstrates how to import a TeamPage component and render it within a Vue.js page. It uses the <script setup> syntax for composition API and renders the TeamPage component in the template.

LANGUAGE: vue
CODE:
<script setup>
import TeamPage from './team/TeamPage.vue'
</script>

<TeamPage />

----------------------------------------

TITLE: Global Component Registration in Vue 3
DESCRIPTION: Demonstrates how to globally register a component using the createApp().component() method. This makes the component available throughout the entire Vue application.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({})

app.component(
  // the registered name
  'MyComponent',
  // the implementation
  {
    /* ... */
  }
)

----------------------------------------

TITLE: Global Component Registration in Vue 3
DESCRIPTION: Demonstrates how to globally register a component using the createApp().component() method. This makes the component available throughout the entire Vue application.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({})

app.component(
  // the registered name
  'MyComponent',
  // the implementation
  {
    /* ... */
  }
)

----------------------------------------

TITLE: Binding Element Attributes in Vue.js HTML Template
DESCRIPTION: This snippet demonstrates how to reactively bind an element's title attribute to a component's state in Vue.js. It showcases both the full v-bind syntax and its shorthand colon (:) notation.

LANGUAGE: html
CODE:
<span v-bind:title="dynamicTitle">Hover me</span>
<span :title="dynamicTitle">Hover me (shorthand)</span>

----------------------------------------

TITLE: Passing Props in SFC Template
DESCRIPTION: Demonstrates how to pass a dynamic prop value to a child component using v-bind syntax in a Single File Component template.

LANGUAGE: vue-html
CODE:
<ChildComp :msg="greeting" />

----------------------------------------

TITLE: Creating Computed Properties with computed()
DESCRIPTION: Creates a readonly reactive reference that automatically updates based on reactive dependencies. Can be made writable by providing get/set functions.

LANGUAGE: typescript
CODE:
// read-only
function computed<T>(
  getter: (oldValue: T | undefined) => T,
  debuggerOptions?: DebuggerOptions
): Readonly<Ref<Readonly<T>>>

// writable
function computed<T>(
  options: {
    get: (oldValue: T | undefined) => T
    set: (value: T) => void
  },
  debuggerOptions?: DebuggerOptions
): Ref<T>

LANGUAGE: javascript
CODE:
const count = ref(1)
const plusOne = computed(() => count.value + 1)

console.log(plusOne.value) // 2

plusOne.value++ // error

----------------------------------------

TITLE: Vue Page Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for a Vue page, setting various page display options including title, aside, footer, and outline settings.

LANGUAGE: yaml
CODE:
---
page: true
title: Examples
aside: false
footer: false
outline: false
---

----------------------------------------

TITLE: Implementing Cells Task Component in Vue.js
DESCRIPTION: This snippet defines a Vue.js component for the Cells task. It includes the template structure, component logic, and styling. The component manages a grid of cells, handles user input, and evaluates formulas.

LANGUAGE: javascript
CODE:
<script setup>
import { ref, computed } from 'vue'

const cols = 'ABCDEFG'.split('')
const rows = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

const cells = ref({})

function getCellId(col, row) {
  return `${col}${row}`
}

function getCellValue(col, row) {
  const id = getCellId(col, row)
  return cells.value[id]?.value ?? ''
}

function setCellValue(col, row, value) {
  const id = getCellId(col, row)
  if (!cells.value[id]) {
    cells.value[id] = {}
  }
  cells.value[id].value = value
  cells.value[id].error = null
  
  if (value.startsWith('=')) {
    try {
      cells.value[id].evaluated = evaluateFormula(value.slice(1), col, row)
    } catch (e) {
      cells.value[id].error = e.message
      cells.value[id].evaluated = '#ERROR'
    }
  } else {
    cells.value[id].evaluated = value
  }
}

function evaluateFormula(formula, col, row) {
  // Replace cell references with their values
  formula = formula.replace(/[A-G]\d{1,2}/g, (match) => {
    const refCol = match[0]
    const refRow = parseInt(match.slice(1))
    return getCellValue(refCol, refRow)
  })
  
  // Evaluate the formula
  return eval(formula)
}

const sortedCells = computed(() => {
  return Object.entries(cells.value).sort((a, b) => a[0].localeCompare(b[0]))
})
</script>

<template>
  <table>
    <thead>
      <tr>
        <th></th>
        <th v-for="col in cols" :key="col">{{ col }}</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="row in rows" :key="row">
        <th>{{ row }}</th>
        <td v-for="col in cols" :key="col">
          <input
            :value="getCellValue(col, row)"
            @input="setCellValue(col, row, $event.target.value)"
            :class="{ error: cells[getCellId(col, row)]?.error }"
          >
          <div class="evaluated" v-if="cells[getCellId(col, row)]?.evaluated !== undefined">
            {{ cells[getCellId(col, row)].evaluated }}
          </div>
        </td>
      </tr>
    </tbody>
  </table>
  
  <div class="debug">
    <pre>{{ sortedCells }}</pre>
  </div>
</template>

<style scoped>
table {
  border-collapse: collapse;
}
th, td {
  border: 1px solid #ccc;
  padding: 4px;
}
input {
  width: 100px;
  border: none;
  padding: 4px;
  font-family: monospace;
}
.evaluated {
  font-size: 0.8em;
  color: #666;
}
.error {
  background-color: #fdd;
}
.debug {
  margin-top: 20px;
  font-family: monospace;
  font-size: 12px;
}
</style>

----------------------------------------

TITLE: Parent-Child Communication - Bad Practice (Options API)
DESCRIPTION: Demonstrates anti-patterns in parent-child component communication using direct prop mutation and this.$parent access.

LANGUAGE: js
CODE:
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  template: '<input v-model="todo.text">'
})

LANGUAGE: js
CODE:
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  methods: {
    removeTodo() {
      this.$parent.todos = this.$parent.todos.filter(
        (todo) => todo.id !== vm.todo.id
      )
    }
  },

  template: `
    <span>
      {{ todo.text }}
      <button @click="removeTodo">
        ×
      </button>
    </span>
  `
})

----------------------------------------

TITLE: Multiple v-model Bindings with Composition API
DESCRIPTION: Demonstrates how to implement multiple v-model bindings on a single component using the Composition API.

LANGUAGE: vue
CODE:
<script setup>
const firstName = defineModel('firstName')
const lastName = defineModel('lastName')
</script>

<template>
  <input type="text" v-model="firstName" />
  <input type="text" v-model="lastName" />
</template>

----------------------------------------

TITLE: Creating Readonly Objects with readonly()
DESCRIPTION: Creates a readonly proxy of a reactive/plain object or ref. The proxy is deeply readonly and maintains ref unwrapping behavior.

LANGUAGE: typescript
CODE:
function readonly<T extends object>(
  target: T
): DeepReadonly<UnwrapNestedRefs<T>>

LANGUAGE: javascript
CODE:
const original = reactive({ count: 0 })
const copy = readonly(original)

watchEffect(() => {
  console.log(copy.count)
})

original.count++ // triggers watcher
copy.count++ // warning!

----------------------------------------

TITLE: Importing and Rendering Vue Developer Landing Component
DESCRIPTION: This snippet imports the DeveloperLanding component and renders it in the template. It uses the <script setup> syntax for composition API setup.

LANGUAGE: vue
CODE:
<script setup>
import DeveloperLanding from './components/DeveloperLanding.vue'
</script>

<DeveloperLanding />

----------------------------------------

TITLE: Parent-Child Communication - Good Practice (Composition API)
DESCRIPTION: Demonstrates the recommended approach using props and emits in Composition API for component communication.

LANGUAGE: vue
CODE:
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})

const emit = defineEmits(['input'])
</script>

<template>
  <input :value="todo.text" @input="emit('input', $event.target.value)" />
</template>

LANGUAGE: vue
CODE:
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})

const emit = defineEmits(['delete'])
</script>

<template>
  <span>
    {{ todo.text }}
    <button @click="emit('delete')">×</button>
  </span>
</template>

----------------------------------------

TITLE: Typing computed() in Vue 3 with TypeScript
DESCRIPTION: Shows how to type computed properties in Vue 3 using TypeScript, including type inference and explicit generic typing.

LANGUAGE: typescript
CODE:
import { ref, computed } from 'vue'

const count = ref(0)

// inferred type: ComputedRef<number>
const double = computed(() => count.value * 2)

// => TS Error: Property 'split' does not exist on type 'number'
const result = double.value.split('')

const double = computed<number>(() => {
  // type error if this doesn't return a number
})

----------------------------------------

TITLE: Vue SFC TypeScript Example
DESCRIPTION: Shows how to use TypeScript in a Vue SFC script block using the lang attribute.

LANGUAGE: vue-html
CODE:
<script lang="ts">
  // use TypeScript
</script>

----------------------------------------

TITLE: Basic TransitionGroup Implementation
DESCRIPTION: Example of implementing enter/leave transitions for a list using TransitionGroup component

LANGUAGE: vue
CODE:
<TransitionGroup name="list" tag="ul">
  <li v-for="item in items" :key="item">
    {{ item }}
  </li>
</TransitionGroup>

LANGUAGE: css
CODE:
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}
.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

----------------------------------------

TITLE: CSS Animation in Vue Transition
DESCRIPTION: Demonstrates using CSS animations with the Transition component.

LANGUAGE: vue-html
CODE:
<Transition name="bounce">
  <p v-if="show" style="text-align: center;">
    Hello here is some bouncy text!
  </p>
</Transition>

LANGUAGE: css
CODE:
.bounce-enter-active {
  animation: bounce-in 0.5s;
}
.bounce-leave-active {
  animation: bounce-in 0.5s reverse;
}
@keyframes bounce-in {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.25);
  }
  100% {
    transform: scale(1);
  }
}

----------------------------------------

TITLE: Ordering Element Attributes in Vue.js Templates
DESCRIPTION: Shows the recommended order for element attributes in Vue.js templates, including directives and standard HTML attributes. Categories include definition, rendering, conditionals, binding, and events.

LANGUAGE: vue
CODE:
<template>
  <div
    is="component-name"
    v-for="item in items"
    v-if="condition"
    v-once
    id="unique-id"
    ref="refName"
    v-model="modelValue"
    custom-attr="value"
    v-on:click="handleClick"
    v-html="htmlContent"
  >
  </div>
</template>

----------------------------------------

TITLE: Creating Vue Project with Yarn
DESCRIPTION: These commands use Yarn to create a new Vue project using the latest version of the create-vue scaffolding tool. It includes options for both modern Yarn (v2+) and older versions (^v4.11).

LANGUAGE: sh
CODE:
# For Yarn Modern (v2+)
$ yarn create vue@latest

# For Yarn ^v4.11
$ yarn dlx create-vue@latest

----------------------------------------

TITLE: Vue SFC External File Imports
DESCRIPTION: Shows how to import external files for template, style, and script blocks using the src attribute.

LANGUAGE: vue
CODE:
<template src="./template.html"></template>
<style src="./style.css"></style>
<script src="./script.js"></script>

----------------------------------------

TITLE: Basic List Transition Component Import
DESCRIPTION: Script setup importing demonstration components for list transitions in Vue.js

LANGUAGE: vue
CODE:
<script setup>
import ListBasic from './transition-demos/ListBasic.vue'
import ListMove from './transition-demos/ListMove.vue'
import ListStagger from './transition-demos/ListStagger.vue'
</script>

----------------------------------------

TITLE: useModel Type Definition and Implementation
DESCRIPTION: Type definition and example implementation of useModel helper that powers v-model binding in components.

LANGUAGE: typescript
CODE:
function useModel(
  props: Record<string, any>,
  key: string,
  options?: DefineModelOptions
): ModelRef

type DefineModelOptions<T = any> = {
  get?: (v: T) => any
  set?: (v: T) => any
}

type ModelRef<T, M extends PropertyKey = string, G = T, S = T> = Ref<G, S> & [
  ModelRef<T, M, G, S>,
  Record<M, true | undefined>
]

LANGUAGE: javascript
CODE:
export default {
  props: ['count'],
  emits: ['update:count'],
  setup(props) {
    const msg = useModel(props, 'count')
    msg.value = 1
  }
}

----------------------------------------

TITLE: Configuring Vue Component with Partners Display
DESCRIPTION: Sets up a Vue page with frontmatter configuration and imports a PartnerAll component for display. Uses script setup syntax for composition API.

LANGUAGE: vue
CODE:
---
page: true
footer: false
---

<script setup>
import PartnerAll from './components/PartnerAll.vue'
</script>

<PartnerAll />

----------------------------------------

TITLE: Importing Vue Components in Render Functions
DESCRIPTION: Example of importing and using built-in Vue components within render functions.

LANGUAGE: javascript
CODE:
import { h, Transition } from 'vue'

h(Transition, {
  /* props */
})

----------------------------------------

TITLE: Defining Computed Properties in Vue
DESCRIPTION: Illustrates how to declare computed properties in a Vue component, including both read-only and writable computed properties.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return { a: 1 }
  },
  computed: {
    // readonly
    aDouble() {
      return this.a * 2
    },
    // writable
    aPlus: {
      get() {
        return this.a + 1
      },
      set(v) {
        this.a = v - 1
      }
    }
  },
  created() {
    console.log(this.aDouble) // => 2
    console.log(this.aPlus) // => 2

    this.aPlus = 3
    console.log(this.a) // => 2
    console.log(this.aDouble) // => 4
  }
}

----------------------------------------

TITLE: Basic Usage of Dynamic Components in Vue
DESCRIPTION: This snippet shows the basic syntax for using dynamic components in Vue with the <component> special element.

LANGUAGE: vue
CODE:
<component :is="activeComponent" />

----------------------------------------

TITLE: Using mixins in Vue component
DESCRIPTION: Demonstrates how to use mixins to extend component functionality in Vue, showing the order of execution for lifecycle hooks.

LANGUAGE: javascript
CODE:
const mixin = {
  created() {
    console.log(1)
  }
}

createApp({
  created() {
    console.log(2)
  },
  mixins: [mixin]
})

// => 1
// => 2

----------------------------------------

TITLE: TypeScript Type Definitions for Vue Custom Elements
DESCRIPTION: Example showing how to provide TypeScript type support for Vue components registered as custom elements.

LANGUAGE: typescript
CODE:
import { defineCustomElement } from 'vue'
import SomeComponent from './src/components/SomeComponent.ce.vue'

export const SomeElement = defineCustomElement(SomeComponent)

customElements.define('some-element', SomeElement)

declare module 'vue' {
  interface GlobalComponents {
    'some-element': typeof SomeComponent
  }
}

----------------------------------------

TITLE: Defining updated Lifecycle Hook in Vue Component
DESCRIPTION: The updated hook is called after the component has updated its DOM tree due to a reactive state change. It's called after any DOM update of the component.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  updated?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Declaring Methods in Vue Components
DESCRIPTION: Shows how to declare methods in a Vue component. Methods can be accessed on the component instance and used in template expressions.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return { a: 1 }
  },
  methods: {
    plus() {
      this.a++
    }
  },
  created() {
    this.plus()
    console.log(this.a) // => 2
  }
}

----------------------------------------

TITLE: Importing SwitchComponent in Vue
DESCRIPTION: This snippet demonstrates how to import a component named SwitchComponent in a Vue file using the script setup syntax.

LANGUAGE: vue
CODE:
<script setup>
import SwitchComponent from './keep-alive-demos/SwitchComponent.vue'
</script>

----------------------------------------

TITLE: Fetching and Displaying GitHub Commits with Vue.js
DESCRIPTION: This snippet creates a Vue application that fetches commit data from GitHub's API for the Vue Core repository. It renders a list of commits and provides a button to switch between two primary branches.

LANGUAGE: HTML
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Vue.js GitHub Commits API Example</title>
    <script src="https://unpkg.com/vue@3"></script>
    <script src="https://unpkg.com/axios@1.1.2/dist/axios.min.js"></script>
  </head>
  <body>
    <div id="app">
      <h1>Latest Vue Core Commits</h1>
      <template v-for="branch in branches">
        <input
          type="radio"
          :id="branch"
          :value="branch"
          name="branch"
          v-model="currentBranch"
        />
        <label :for="branch">{{ branch }}</label>
      </template>
      <p>vuejs/core@{{ currentBranch }}</p>
      <ul>
        <li v-for="record in commits">
          <a
            :href="`https://github.com/vuejs/core/commit/${record.sha}`"
            target="_blank"
            class="commit"
            >{{ record.sha.slice(0, 7) }}</a
          >
          - <span class="message">{{ record.commit.message }}</span><br />
          by <span class="author">
            <a :href="record.author.html_url" target="_blank">{{
              record.commit.author.name
            }}</a>
          </span>
          at <span class="date">{{ formatDate(record.commit.author.date) }}</span>
        </li>
      </ul>
    </div>

    <script>
      const API_URL = `https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=`

      Vue.createApp({
        data: () => ({
          branches: ['main', 'v2-compat'],
          currentBranch: 'main',
          commits: null
        }),

        created() {
          this.fetchData()
        },

        watch: {
          currentBranch: 'fetchData'
        },

        methods: {
          async fetchData() {
            const url = `${API_URL}${this.currentBranch}`
            this.commits = await (await fetch(url)).json()
          },
          formatDate(date) {
            return new Date(date).toLocaleString()
          }
        }
      }).mount('#app')
    </script>
  </body>
</html>

----------------------------------------

TITLE: Using $$() for Reactivity Retention in Vue
DESCRIPTION: Shows how to use the $$() macro to retain reactivity when passing reactive variables as function arguments.

LANGUAGE: typescript
CODE:
function trackChange(x: Ref<number>) {
  watch(x, (x) => {
    console.log('x changed!')
  })
}

let count = $ref(0)
trackChange($$(count)) // works!

----------------------------------------

TITLE: Using shallowReactive in Vue
DESCRIPTION: Example showing shallowReactive() usage to create an object that is only reactive at its root level properties.

LANGUAGE: javascript
CODE:
const state = shallowReactive({
  foo: 1,
  nested: {
    bar: 2
  }
})

// mutating state's own properties is reactive
state.foo++

// ...but does not convert nested objects
isReactive(state.nested) // false

// NOT reactive
state.nested.bar++

----------------------------------------

TITLE: Defining Watchers in Vue Components
DESCRIPTION: Demonstrates various ways to declare watchers in a Vue component, including watching top-level properties, nested properties, and using watch options.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      a: 1,
      b: 2,
      c: {
        d: 4
      },
      e: 5,
      f: 6
    }
  },
  watch: {
    // watching top-level property
    a(val, oldVal) {
      console.log(`new: ${val}, old: ${oldVal}`)
    },
    // string method name
    b: 'someMethod',
    // the callback will be called whenever any of the watched object properties change regardless of their nested depth
    c: {
      handler(val, oldVal) {
        console.log('c changed')
      },
      deep: true
    },
    // watching a single nested property:
    'c.d': function (val, oldVal) {
      // do something
    },
    // the callback will be called immediately after the start of the observation
    e: {
      handler(val, oldVal) {
        console.log('e changed')
      },
      immediate: true
    },
    // you can pass array of callbacks, they will be called one-by-one
    f: [
      'handle1',
      function handle2(val, oldVal) {
        console.log('handle2 triggered')
      },
      {
        handler: function handle3(val, oldVal) {
          console.log('handle3 triggered')
        }
        /* ... */
      }
    ]
  },
  methods: {
    someMethod() {
      console.log('b changed')
    },
    handle1() {
      console.log('handle 1 triggered')
    }
  },
  created() {
    this.a = 3 // => new: 3, old: 1
  }
}

----------------------------------------

TITLE: TransitionGroup Component Example
DESCRIPTION: Example of using TransitionGroup to animate lists of elements with smooth transitions.

LANGUAGE: vue-html
CODE:
<TransitionGroup tag="ul" name="slide">
  <li v-for="item in items" :key="item.id">
    {{ item.text }}
  </li>
</TransitionGroup>

----------------------------------------

TITLE: ComponentCustomProperties Augmentation in Vue
DESCRIPTION: Shows how to augment component instance type to support custom global properties like HTTP client and translation function.

LANGUAGE: typescript
CODE:
import axios from 'axios'

declare module 'vue' {
  interface ComponentCustomProperties {
    $http: typeof axios
    $translate: (key: string) => string
  }
}

----------------------------------------

TITLE: Typing Component Props with <script setup> in Vue 3
DESCRIPTION: Demonstrates how to type component props using <script setup> in Vue 3, showing both runtime declaration and type-based declaration methods.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const props = defineProps({
  foo: { type: String, required: true },
  bar: Number
})

props.foo // string
props.bar // number | undefined
</script>

LANGUAGE: vue
CODE:
<script setup lang="ts">
const props = defineProps<{
  foo: string
  bar?: number
}>()
</script>

----------------------------------------

TITLE: Creating and Exporting a Custom Renderer in JavaScript
DESCRIPTION: This example demonstrates how to create a custom renderer using the createRenderer function from @vue/runtime-core. It shows the basic setup, including defining required methods and exporting the render and createApp functions.

LANGUAGE: javascript
CODE:
import { createRenderer } from '@vue/runtime-core'

const { render, createApp } = createRenderer({
  patchProp,
  insert,
  remove,
  createElement
  // ...
})

// `render` is the low-level API
// `createApp` returns an app instance
export { render, createApp }

// re-export Vue core APIs
export * from '@vue/runtime-core'

----------------------------------------

TITLE: Declaring Emitted Events in Vue Components
DESCRIPTION: Shows how to declare custom events emitted by a Vue component using both array and object syntax, including event validation.

LANGUAGE: javascript
CODE:
export default {
  emits: ['check'],
  created() {
    this.$emit('check')
  }
}

LANGUAGE: javascript
CODE:
export default {
  emits: {
    // no validation
    click: null,

    // with validation
    submit: (payload) => {
      if (payload.email && payload.password) {
        return true
      } else {
        console.warn(`Invalid submit event payload!`)
        return false
      }
    }
  }
}

----------------------------------------

TITLE: Dynamic Ref Assignment
DESCRIPTION: Shows how to use a function with ref attribute for dynamic reference assignment.

LANGUAGE: vue-html
CODE:
<ChildComponent :ref="(el) => child = el" />

----------------------------------------

TITLE: Vue Global Build Usage Example
DESCRIPTION: Example of using Vue directly from CDN via global build, demonstrating basic Vue instance creation and data binding

LANGUAGE: html
CODE:
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

<div id="app">{{ message }}</div>

<script>
  const { createApp } = Vue

  createApp({
    data() {
      return {
        message: 'Hello Vue!'
      }
    }
  }).mount('#app')
</script>

----------------------------------------

TITLE: Template Ref Usage in Options API
DESCRIPTION: Example of using the ref attribute to register a reference to a DOM element in Options API style.

LANGUAGE: vue-html
CODE:
<!-- stored as this.$refs.p -->
<p ref="p">hello</p>

----------------------------------------

TITLE: Defining Custom Element Types in TypeScript
DESCRIPTION: Type definitions for the defineCustomElement() function and CustomElementsOptions interface, showing supported options for creating Vue-powered custom elements.

LANGUAGE: typescript
CODE:
function defineCustomElement(
  component:
    | (ComponentOptions & CustomElementsOptions)
    | ComponentOptions['setup'],
  options?: CustomElementsOptions
): {
  new (props?: object): HTMLElement
}

interface CustomElementsOptions {
  styles?: string[]

  // the following options are 3.5+
  configureApp?: (app: App) => void
  shadowRoot?: boolean
  nonce?: string
}

----------------------------------------

TITLE: Animating with Watchers in Vue
DESCRIPTION: This snippet demonstrates how to use watchers to animate numerical state in Vue. It includes both Composition API and Options API implementations, along with the corresponding HTML. The example uses the GSAP library for animation.

LANGUAGE: javascript
CODE:
import { ref, reactive, watch } from 'vue'
import gsap from 'gsap'

const number = ref(0)
const tweened = reactive({
  number: 0
})

watch(number, (n) => {
  gsap.to(tweened, { duration: 0.5, number: Number(n) || 0 })
})

LANGUAGE: javascript
CODE:
import gsap from 'gsap'

export default {
  data() {
    return {
      number: 0,
      tweened: 0
    }
  },
  watch: {
    number(n) {
      gsap.to(this, { duration: 0.5, tweened: Number(n) || 0 })
    }
  }
}

LANGUAGE: vue
CODE:
Type a number: <input v-model.number="number" />
<p>{{ tweened.number.toFixed(0) }}</p>

LANGUAGE: vue
CODE:
Type a number: <input v-model.number="number" />
<p>{{ tweened.toFixed(0) }}</p>

----------------------------------------

TITLE: Using Self-Closing Components in Templates
DESCRIPTION: Shows the correct usage of self-closing syntax for components without content in Single-File Components, string templates, and JSX.

LANGUAGE: HTML
CODE:
<!-- In Single-File Components, string templates, and JSX -->
<MyComponent/>

LANGUAGE: HTML
CODE:
<!-- In in-DOM templates -->
<my-component></my-component>

----------------------------------------

TITLE: Local Registration of Async Components (Composition API)
DESCRIPTION: Demonstrates defining an async component directly in a component using Composition API and <script setup>.

LANGUAGE: vue
CODE:
<script setup>
import { defineAsyncComponent } from 'vue'

const AdminPage = defineAsyncComponent(() =>
  import('./components/AdminPageComponent.vue')
)
</script>

<template>
  <AdminPage />
</template>

----------------------------------------

TITLE: Replacing Arrays in Vue Composition API
DESCRIPTION: Demonstrates how to update a todo list by replacing the entire array using filter method in Composition API style.

LANGUAGE: javascript
CODE:
todos.value = todos.value.filter(/* ... */)

----------------------------------------

TITLE: TypeScript Definition: inject()
DESCRIPTION: Type definitions for the inject() function, showing various overloads for different injection scenarios including default values and factories.

LANGUAGE: typescript
CODE:
// without default value
function inject<T>(key: InjectionKey<T> | string): T | undefined

// with default value
function inject<T>(key: InjectionKey<T> | string, defaultValue: T): T

// with factory
function inject<T>(
  key: InjectionKey<T> | string,
  defaultValue: () => T,
  treatDefaultAsFactory: true
): T

----------------------------------------

TITLE: Vue Component Debug Hooks
DESCRIPTION: Demonstrates how to use Vue's debug hooks for tracking reactivity in components

LANGUAGE: vue
CODE:
<script setup>
import { onRenderTracked, onRenderTriggered } from 'vue'

onRenderTracked((event) => {
  debugger
})

onRenderTriggered((event) => {
  debugger
})
</script>

----------------------------------------

TITLE: Registering Component in Non-SFC Setup
DESCRIPTION: Component registration in a non-Single File Component setup using createApp, suitable for DOM template usage.

LANGUAGE: javascript
CODE:
import ChildComp from './ChildComp.js'

createApp({
  components: {
    ChildComp
  }
})

----------------------------------------

TITLE: Initializing Vue Component with Error Table Setup
DESCRIPTION: This Vue component imports error data and a custom ErrorsTable component. It uses the composition API to set up reactive highlighting based on the URL hash.

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted } from 'vue'
import { data } from './errors.data.ts'
import ErrorsTable from './ErrorsTable.vue'

const highlight = ref()
onMounted(() => {
  highlight.value = location.hash.slice(1)
})
</script>

----------------------------------------

TITLE: Incorrect Asynchronous Lifecycle Hook Registration in Vue
DESCRIPTION: Example demonstrating incorrect usage of onMounted hook within an asynchronous context, which won't work because lifecycle hooks must be registered synchronously during component setup.

LANGUAGE: javascript
CODE:
setTimeout(() => {
  onMounted(() => {
    // this won't work.
  })
}, 100)

----------------------------------------

TITLE: useAttrs Type Definition
DESCRIPTION: Type definition for the useAttrs helper function that returns fallthrough attributes of the current component.

LANGUAGE: typescript
CODE:
function useAttrs(): Record<string, unknown>

----------------------------------------

TITLE: Creating Custom Debounced Ref in Vue
DESCRIPTION: Implementation of a custom ref that debounces value updates using customRef() API.

LANGUAGE: javascript
CODE:
import { customRef } from 'vue'

export function useDebouncedRef(value, delay = 200) {
  let timeout
  return customRef((track, trigger) => {
    return {
      get() {
        track()
        return value
      },
      set(newValue) {
        clearTimeout(timeout)
        timeout = setTimeout(() => {
          value = newValue
          trigger()
        }, delay)
      }
    }
  })
}

----------------------------------------

TITLE: ExtractPropTypes Usage Example in Vue
DESCRIPTION: Shows how to extract internal prop types from runtime props options object, where boolean props and props with defaults are always defined.

LANGUAGE: typescript
CODE:
const propsOptions = {
  foo: String,
  bar: Boolean,
  baz: {
    type: Number,
    required: true
  },
  qux: {
    type: Number,
    default: 1
  }
} as const

type Props = ExtractPropTypes<typeof propsOptions>

----------------------------------------

TITLE: Vue Component: Injecting Values Example
DESCRIPTION: Example demonstrating different ways to inject values in a Vue component, including static values, reactive values, default values, and factory functions.

LANGUAGE: vue
CODE:
<script setup>
import { inject } from 'vue'
import { countSymbol } from './injectionSymbols'

// inject static value without default
const path = inject('path')

// inject reactive value
const count = inject('count')

// inject with Symbol keys
const count2 = inject(countSymbol)

// inject with default value
const bar = inject('path', '/default-path')

// inject with function default value
const fn = inject('function', () => {})

// inject with default value factory
const baz = inject('factory', () => new ExpensiveObject(), true)
</script>

----------------------------------------

TITLE: Automatically Registering Base Components
DESCRIPTION: Demonstrates how to use Webpack to automatically register base components globally, leveraging the naming convention.

LANGUAGE: JavaScript
CODE:
const requireComponent = require.context(
  './src',
  true,
  /Base[A-Z]\w+\.(vue|js)$/
)
requireComponent.keys().forEach(function (fileName) {
  let baseComponentConfig = requireComponent(fileName)
  baseComponentConfig =
    baseComponentConfig.default || baseComponentConfig
  const baseComponentName =
    baseComponentConfig.name ||
    fileName.replace(/^.+\//, '').replace(/\.\w+$/, '')
  app.component(baseComponentName, baseComponentConfig)
})

----------------------------------------

TITLE: onUnmounted Hook Cleanup Example
DESCRIPTION: Illustrates proper cleanup of side effects using onUnmounted hook for interval timers

LANGUAGE: vue
CODE:
<script setup>
import { onMounted, onUnmounted } from 'vue'

let intervalId
onMounted(() => {
  intervalId = setInterval(() => {
    // ...
  })
})

onUnmounted(() => clearInterval(intervalId))
</script>

----------------------------------------

TITLE: Implementing Nested Suspense Components
DESCRIPTION: Demonstrates how to use nested Suspense components to handle multiple levels of async components, particularly useful for nested or layout-based routes. The inner Suspense is marked as 'suspensible' to delegate async handling to the parent.

LANGUAGE: vue
CODE:
<Suspense>
  <component :is="DynamicAsyncOuter">
    <Suspense suspensible> <!-- this -->
      <component :is="DynamicAsyncInner" />
    </Suspense>
  </component>
</Suspense>

----------------------------------------

TITLE: Extending components with Composition API in Vue
DESCRIPTION: Demonstrates how to extend a component using Composition API by calling the base component's setup() in the extending component's setup().

LANGUAGE: javascript
CODE:
import Base from './Base.js'
export default {
  extends: Base,
  setup(props, ctx) {
    return {
      ...Base.setup(props, ctx),
      // local bindings
    }
  }
}

----------------------------------------

TITLE: onUpdated Hook Implementation Example
DESCRIPTION: Shows how to use onUpdated hook to access the DOM after reactive state changes trigger updates

LANGUAGE: vue
CODE:
<script setup>
import { ref, onUpdated } from 'vue'

const count = ref(0)

onUpdated(() => {
  // text content should be the same as current `count.value`
  console.log(document.getElementById('count').textContent)
})
</script>

<template>
  <button id="count" @click="count++">{{ count }}</button>
</template>

----------------------------------------

TITLE: Defining a Custom Directive with Composition API in Vue
DESCRIPTION: Demonstrates how to create a custom directive 'v-highlight' using the Composition API in Vue. The directive adds a CSS class to the element when mounted.

LANGUAGE: vue
CODE:
<script setup>
const vHighlight = {
  mounted: el => {
    el.classList.add('is-highlight')
  }
}
</script>

<template>
  <p v-highlight>This sentence is important!</p>
</template>

----------------------------------------

TITLE: Effect Scope Management in Vue
DESCRIPTION: Demonstration of effectScope() API for managing and disposing reactive effects together.

LANGUAGE: javascript
CODE:
const scope = effectScope()

scope.run(() => {
  const doubled = computed(() => counter.value * 2)

  watch(doubled, () => console.log(doubled.value))

  watchEffect(() => console.log('Count: ', doubled.value))
})

// to dispose all effects in the scope
scope.stop()

----------------------------------------

TITLE: Combining Suspense with Other Vue Components
DESCRIPTION: Shows how to properly nest Suspense with Transition, KeepAlive, and RouterView components from Vue Router. This combination allows for smooth transitions and state preservation during async loading.

LANGUAGE: vue
CODE:
<RouterView v-slot="{ Component }">
  <template v-if="Component">
    <Transition mode="out-in">
      <KeepAlive>
        <Suspense>
          <!-- main content -->
          <component :is="Component"></component>

          <!-- loading state -->
          <template #fallback>
            Loading...
          </template>
        </Suspense>
      </KeepAlive>
    </Transition>
  </template>
</RouterView>

----------------------------------------

TITLE: Typing ref() in Vue 3 with TypeScript
DESCRIPTION: Explains how to properly type ref() in Vue 3 using TypeScript, including type inference and explicit typing methods.

LANGUAGE: typescript
CODE:
import { ref } from 'vue'
import type { Ref } from 'vue'

// inferred type: Ref<number>
const year = ref(2020)

// => TS Error: Type 'string' is not assignable to type 'number'.
year.value = '2020'

const year: Ref<string | number> = ref('2020')

year.value = 2020 // ok!

// resulting type: Ref<string | number>
const year = ref<string | number>('2020')

year.value = 2020 // ok!

// inferred type: Ref<number | undefined>
const n = ref<number>()

----------------------------------------

TITLE: Disabling Attribute Inheritance in Vue.js Components
DESCRIPTION: Demonstrates how to disable automatic attribute inheritance in Vue.js components using the inheritAttrs option.

LANGUAGE: javascript
CODE:
<script setup>
defineOptions({
  inheritAttrs: false
})
// ...setup logic
</script>

----------------------------------------

TITLE: Initializing Sponsor Data in Vue Component
DESCRIPTION: This snippet sets up a Vue component to load and display sponsor data. It imports necessary components and functions, and uses the onMounted hook to load sponsor data when the component is mounted.

LANGUAGE: vue
CODE:
<script setup>
import SponsorsGroup from '@theme/components/SponsorsGroup.vue'
import { load, data } from '@theme/components/sponsors'
import { onMounted } from 'vue'

onMounted(load)
</script>

----------------------------------------

TITLE: TypeScript Implementation of unref Function
DESCRIPTION: Type definition and example of unref utility that returns the inner value of a ref or the original value if not a ref.

LANGUAGE: typescript
CODE:
function unref<T>(ref: T | Ref<T>): T

LANGUAGE: typescript
CODE:
function useFoo(x: number | Ref<number>) {
  const unwrapped = unref(x)
  // unwrapped is guaranteed to be number now
}

----------------------------------------

TITLE: ComponentCustomOptions Augmentation in Vue
DESCRIPTION: Demonstrates augmenting component options type to support custom options like router hooks.

LANGUAGE: typescript
CODE:
import { Route } from 'vue-router'

declare module 'vue' {
  interface ComponentCustomOptions {
    beforeRouteEnter?(to: any, from: any, next: () => void): void
  }
}

----------------------------------------

TITLE: Options API Event Handler Implementation
DESCRIPTION: Shows the implementation of the input event handler using Vue's Options API. The handler receives the native DOM event and updates the component's text data property.

LANGUAGE: javascript
CODE:
methods: {
  onInput(e) {
    // a v-on handler receives the native DOM event
    // as the argument.
    this.text = e.target.value
  }
}

----------------------------------------

TITLE: Accessing Fallthrough Attributes in Vue.js Options API
DESCRIPTION: Shows how to access fallthrough attributes using the $attrs instance property in Vue.js Options API.

LANGUAGE: javascript
CODE:
export default {
  created() {
    console.log(this.$attrs)
  }
}

----------------------------------------

TITLE: Basic Vue.js Application Setup - Composition API
DESCRIPTION: Shows how to create the same counter component using Composition API with ref for reactive state management.

LANGUAGE: javascript
CODE:
import { createApp, ref } from 'vue'

createApp({
  setup() {
    return {
      count: ref(0)
    }
  }
}).mount('#app')

----------------------------------------

TITLE: Using SSR Context with renderToString in Vue
DESCRIPTION: Shows how to use an optional context object with renderToString to capture additional data during rendering, such as teleported content.

LANGUAGE: javascript
CODE:
const ctx = {}
const html = await renderToString(app, ctx)

console.log(ctx.teleports) // { '#teleported': 'teleported content' }

----------------------------------------

TITLE: ExtractPublicPropTypes Usage in Vue
DESCRIPTION: Demonstrates extracting public-facing prop types that parent components are allowed to pass.

LANGUAGE: typescript
CODE:
const propsOptions = {
  foo: String,
  bar: Boolean,
  baz: {
    type: Number,
    required: true
  },
  qux: {
    type: Number,
    default: 1
  }
} as const

type Props = ExtractPublicPropTypes<typeof propsOptions>

----------------------------------------

TITLE: TypeScript Definition: provide()
DESCRIPTION: Type definition for the provide() function which enables dependency injection in Vue components.

LANGUAGE: typescript
CODE:
function provide<T>(key: InjectionKey<T> | string, value: T): void

----------------------------------------

TITLE: Basic v-model Implementation with Options API
DESCRIPTION: Demonstrates how to implement v-model on a component using the Options API.

LANGUAGE: vue
CODE:
<script>
export default {
  props: ['modelValue'],
  emits: ['update:modelValue']
}
</script>

<template>
  <input
    :value="modelValue"
    @input="$emit('update:modelValue', $event.target.value)"
  />
</template>

----------------------------------------

TITLE: Parent-Child Communication - Bad Practice (Composition API)
DESCRIPTION: Shows anti-patterns in Composition API using direct prop mutation and parent instance access.

LANGUAGE: vue
CODE:
<script setup>
defineProps({
  todo: {
    type: Object,
    required: true
  }
})
</script>

<template>
  <input v-model="todo.text" />
</template>

LANGUAGE: vue
CODE:
<script setup>
import { getCurrentInstance } from 'vue'

const props = defineProps({
  todo: {
    type: Object,
    required: true
  }
})

const instance = getCurrentInstance()

function removeTodo() {
  const parent = instance.parent
  if (!parent) return

  parent.props.todos = parent.props.todos.filter((todo) => {
    return todo.id !== props.todo.id
  })
}
</script>

<template>
  <span>
    {{ todo.text }}
    <button @click="removeTodo">×</button>
  </span>
</template>

----------------------------------------

TITLE: Installing Dependencies and Running Development Server for Vue.js Docs
DESCRIPTION: This snippet shows how to install project dependencies and start the development server for the Vue.js documentation site using pnpm. It requires pnpm to be installed as the preferred package manager.

LANGUAGE: bash
CODE:
pnpm i
pnpm run dev

----------------------------------------

TITLE: Defining activated Lifecycle Hook for KeepAlive Components
DESCRIPTION: The activated hook is called after the component instance is inserted into the DOM as part of a tree cached by <KeepAlive>. It's not called during server-side rendering.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  activated?(this: ComponentPublicInstance): void
}

----------------------------------------

TITLE: Applying Fallthrough Attributes to Specific Elements in Vue.js
DESCRIPTION: Demonstrates how to apply fallthrough attributes to specific elements within a component using v-bind="$attrs".

LANGUAGE: vue-html
CODE:
<div class="btn-wrapper">
  <button class="btn" v-bind="$attrs">Click Me</button>
</div>

----------------------------------------

TITLE: Handling v-model Arguments with Composition API
DESCRIPTION: Shows how to handle v-model arguments using the Composition API.

LANGUAGE: vue
CODE:
<script setup>
const title = defineModel('title')
</script>

<template>
  <input type="text" v-model="title" />
</template>

----------------------------------------

TITLE: Registering Global Components
DESCRIPTION: Demonstrates registration and retrieval of global components using app.component() method.

LANGUAGE: typescript
CODE:
interface App {
  component(name: string): Component | undefined
  component(name: string, component: Component): this
}

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'

const app = createApp({})

// register an options object
app.component('MyComponent', {
  /* ... */
})

// retrieve a registered component
const MyComponent = app.component('MyComponent')

----------------------------------------

TITLE: Enabling Corepack for Node.js Version Management
DESCRIPTION: This command enables corepack, which is recommended for managing Node.js versions. The project requires Node.js v18 or higher.

LANGUAGE: bash
CODE:
corepack enable

----------------------------------------

TITLE: Defining renderTracked Debug Hook in Vue Component
DESCRIPTION: The renderTracked hook is called when a reactive dependency has been tracked by the component's render effect. It's a development-mode-only hook and not called during server-side rendering.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  renderTracked?(this: ComponentPublicInstance, e: DebuggerEvent): void
}

type DebuggerEvent = {
  effect: ReactiveEffect
  target: object
  type: TrackOpTypes /* 'get' | 'has' | 'iterate' */
  key: any
}

----------------------------------------

TITLE: Using a Reactive Store in Vue Components
DESCRIPTION: These snippets show how to use a reactive store in Vue components. ComponentA and ComponentB both import and use the same store, demonstrating shared state across components.

LANGUAGE: vue
CODE:
<!-- ComponentA.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From A: {{ store.count }}</template>

LANGUAGE: vue
CODE:
<!-- ComponentB.vue -->
<script setup>
import { store } from './store.js'
</script>

<template>From B: {{ store.count }}</template>

----------------------------------------

TITLE: Defining SlotProps Interface in TypeScript
DESCRIPTION: TypeScript interface for the props of the <slot> element, including dynamic props and the 'name' prop.

LANGUAGE: typescript
CODE:
interface SlotProps {
  /**
   * Any props passed to <slot> to passed as arguments
   * for scoped slots
   */
  [key: string]: any
  /**
   * Reserved for specifying slot name.
   */
  name?: string
}

----------------------------------------

TITLE: Importing Vue.js for HTML-mode Usage
DESCRIPTION: This snippet shows how to import Vue.js when using HTML-mode without a build step. It specifies the correct path to the ESM bundler version of Vue.

LANGUAGE: javascript
CODE:
import { ... } from 'vue/dist/vue.esm-bundler.js'

----------------------------------------

TITLE: Using JSX/TSX in Vue Components
DESCRIPTION: Example of using JSX syntax in Vue components with dynamic values and proper TypeScript configuration.

LANGUAGE: jsx
CODE:
const vnode = <div id={dynamicId}>hello, {userName}</div>

----------------------------------------

TITLE: Declaring Props with Composition API in SFC
DESCRIPTION: Shows how to declare props in a Single File Component using the Composition API with defineProps(). The example demonstrates accepting a 'msg' prop of type String.

LANGUAGE: vue
CODE:
<!-- ChildComp.vue -->
<script setup>
const props = defineProps({
  msg: String
})
</script>

----------------------------------------

TITLE: Importing and Creating Vue Application with Root Component in JavaScript
DESCRIPTION: This code shows how to import a root component from a single-file component and create a Vue application instance with it. This is a common pattern in Vue applications.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'
// import the root component App from a single-file component.
import App from './App.vue'

const app = createApp(App)

----------------------------------------

TITLE: Configuring Custom Element Options
DESCRIPTION: Example showing how to pass custom element configuration options separately from the component definition when using defineCustomElement().

LANGUAGE: javascript
CODE:
import Element from './MyElement.ce.vue'

defineCustomElement(Element, {
  configureApp(app) {
    // ...
  }
})

----------------------------------------

TITLE: Configuring Vite for Vue.js Resolution
DESCRIPTION: This code snippet demonstrates how to configure Vite to resolve Vue.js correctly when using HTML-mode. It sets up an alias for the 'vue' import to use the ESM bundler version.

LANGUAGE: javascript
CODE:
// vite.config.js
export default {
  resolve: {
    alias: {
      vue: 'vue/dist/vue.esm-bundler.js'
    }
  }
}

----------------------------------------

TITLE: Custom Arguments in Method Handlers
DESCRIPTION: Demonstrates passing custom arguments to methods in event handlers while still maintaining access to the event object.

LANGUAGE: javascript
CODE:
function say(message) {\n  alert(message)\n}

LANGUAGE: vue-html
CODE:
<button @click="say('hello')">Say hello</button>\n<button @click="say('bye')">Say bye</button>

----------------------------------------

TITLE: Defining serverPrefetch Hook for Server-Side Rendering
DESCRIPTION: The serverPrefetch hook is an async function to be resolved before the component instance is rendered on the server. It's only called during server-side rendering and can be used for server-only data fetching.

LANGUAGE: typescript
CODE:
interface ComponentOptions {
  serverPrefetch?(this: ComponentPublicInstance): Promise<any>
}

----------------------------------------

TITLE: Mounting Vue Application to DOM Element in HTML and JavaScript
DESCRIPTION: This snippet demonstrates how to mount a Vue application to a DOM element. It requires both HTML for the container element and JavaScript for the mounting operation.

LANGUAGE: html
CODE:
<div id="app"></div>

LANGUAGE: javascript
CODE:
app.mount('#app')

----------------------------------------

TITLE: Rendering Dynamic Components with Composition API in Vue
DESCRIPTION: Example of using <component> to render dynamic components based on a condition in the Composition API with <script setup>.

LANGUAGE: vue
CODE:
<script setup>
import Foo from './Foo.vue'
import Bar from './Bar.vue'
</script>

<template>
  <component :is="Math.random() > 0.5 ? Foo : Bar" />
</template>

----------------------------------------

TITLE: Vue Event Binding Shorthand Syntax
DESCRIPTION: Demonstrates the shorthand @ syntax for v-on directive in Vue templates.

LANGUAGE: vue-html
CODE:
<button @click="increment">{{ count }}</button>

----------------------------------------

TITLE: Declaring Emitted Events in Options API
DESCRIPTION: Demonstrates how to declare emitted events using the emits option in the Options API.

LANGUAGE: javascript
CODE:
export default {
  emits: ['inFocus', 'submit']
}

----------------------------------------

TITLE: Local Registration of Async Components (Options API)
DESCRIPTION: Shows how to register an async component locally using Options API.

LANGUAGE: vue
CODE:
<script>
import { defineAsyncComponent } from 'vue'

export default {
  components: {
    AdminPage: defineAsyncComponent(() =>
      import('./components/AdminPageComponent.vue')
    )
  }
}
</script>

<template>
  <AdminPage />
</template>

----------------------------------------

TITLE: Registering Component in Vue Application in JavaScript
DESCRIPTION: This code demonstrates how to register a component globally in a Vue application, making it available for use anywhere in the app.

LANGUAGE: javascript
CODE:
app.component('TodoDeleteButton', TodoDeleteButton)

----------------------------------------

TITLE: useTemplateRef Example Implementation
DESCRIPTION: Example of using useTemplateRef to create a reference to a template element and focus it on mount.

LANGUAGE: vue
CODE:
<script setup>
import { useTemplateRef, onMounted } from 'vue'

const inputRef = useTemplateRef('input')

onMounted(() => {
  inputRef.value.focus()
})
</script>

<template>
  <input ref="input" />
</template>

----------------------------------------

TITLE: Using Child Component in DOM Template
DESCRIPTION: Example of using a registered child component within a DOM template, using kebab-case syntax due to HTML's case-insensitive nature.

LANGUAGE: vue-html
CODE:
<child-comp></child-comp>

----------------------------------------

TITLE: Radio Button Binding with v-model in Vue
DESCRIPTION: Shows how to use v-model with radio buttons for selecting a single value from multiple options.

LANGUAGE: vue
CODE:
<input type="radio" id="one" value="One" v-model="picked" />
<label for="one">One</label>

<input type="radio" id="two" value="Two" v-model="picked" />
<label for="two">Two</label>

----------------------------------------

TITLE: Emitting Custom Events in Vue Component
DESCRIPTION: Example of using $emit to trigger custom events with and without additional arguments.

LANGUAGE: javascript
CODE:
export default {
  created() {
    // only event
    this.$emit('foo')
    // with additional arguments
    this.$emit('bar', 1, 2, 3)
  }
}

----------------------------------------

TITLE: Mounting Vue Application
DESCRIPTION: Shows how to mount a Vue application to a DOM container using app.mount() method. The container can be specified using either a CSS selector or DOM element.

LANGUAGE: typescript
CODE:
interface App {
  mount(rootContainer: Element | string): ComponentPublicInstance
}

LANGUAGE: javascript
CODE:
import { createApp } from 'vue'
const app = createApp(/* ... */)

app.mount('#app')

LANGUAGE: javascript
CODE:
app.mount(document.body.firstChild)

----------------------------------------

TITLE: Data Fetching Composable with Reactive State
DESCRIPTION: A composable function that handles async data fetching with support for reactive URLs and state management.

LANGUAGE: javascript
CODE:
// fetch.js
import { ref, watchEffect, toValue } from 'vue'

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  const fetchData = () => {
    data.value = null
    error.value = null

    fetch(toValue(url))
      .then((res) => res.json())
      .then((json) => (data.value = json))
      .catch((err) => (error.value = err))
  }

  watchEffect(() => {
    fetchData()
  })

  return { data, error }
}

----------------------------------------

TITLE: Data Fetching Composable with Reactive State
DESCRIPTION: A composable function that handles async data fetching with support for reactive URLs and state management.

LANGUAGE: javascript
CODE:
// fetch.js
import { ref, watchEffect, toValue } from 'vue'

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  const fetchData = () => {
    data.value = null
    error.value = null

    fetch(toValue(url))
      .then((res) => res.json())
      .then((json) => (data.value = json))
      .catch((err) => (error.value = err))
  }

  watchEffect(() => {
    fetchData()
  })

  return { data, error }
}

----------------------------------------

TITLE: Emitting Events with Options API in Vue
DESCRIPTION: This snippet shows how to declare and emit events in a Vue component using the Options API. It uses the emits option to declare events and the this.$emit() method to trigger them within the component's lifecycle hooks or methods.

LANGUAGE: js
CODE:
export default {
  // declare emitted events
  emits: ['response'],
  created() {
    // emit with argument
    this.$emit('response', 'hello from child')
  }
}

----------------------------------------

TITLE: Emitting Events with Composition API in Vue SFC
DESCRIPTION: This snippet shows how to declare and emit events in a Vue Single File Component using the Composition API. It uses the defineEmits() function to declare events and the emit() function to trigger them.

LANGUAGE: vue
CODE:
<script setup>
// declare emitted events
const emit = defineEmits(['response'])

// emit with argument
emit('response', 'hello from child')
</script>

----------------------------------------

TITLE: Defining Components with TypeScript Support
DESCRIPTION: Shows how to use defineComponent for Vue component definition with TypeScript type inference support. Includes both options API and composition API approaches.

LANGUAGE: typescript
CODE:
const Comp = defineComponent(
  <T extends string | number>(props: { msg: T; list: T[] }) => {
    // use Composition API here like in <script setup>
    const count = ref(0)

    return () => {
      // render function or JSX
      return <div>{count.value}</div>
    }
  },
  // manual runtime props declaration is currently still needed.
  {
    props: ['msg', 'list']
  }
)

----------------------------------------

TITLE: Using provide with component state in Vue
DESCRIPTION: Shows how to use a function for the provide option to provide per-component state in a Vue component.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      msg: 'foo'
    }
  }
  provide() {
    return {
      msg: this.msg
    }
  }
}

----------------------------------------

TITLE: onMounted Hook Implementation Example
DESCRIPTION: Demonstrates how to use the onMounted hook to access DOM elements via template refs after component mounting

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted } from 'vue'

const el = ref()

onMounted(() => {
  el.value // <div>
})
</script>

<template>
  <div ref="el"></div>
</template>

----------------------------------------

TITLE: Passing Slot Content in Vue.js Parent Component
DESCRIPTION: This snippet shows how to pass slot content from a parent component to a child component in Vue.js. The content inside the child component tags becomes the slot content.

LANGUAGE: vue-html
CODE:
<ChildComp>
  This is some slot content!
</ChildComp>

LANGUAGE: vue-html
CODE:
<child-comp>
  This is some slot content!
</child-comp>

----------------------------------------

TITLE: Passing Props in HTML Template
DESCRIPTION: Shows how to pass a dynamic prop value to a child component using v-bind syntax in an HTML template format.

LANGUAGE: vue-html
CODE:
<child-comp :msg="greeting"></child-comp>

----------------------------------------

TITLE: Vue Slots Type Definition Example
DESCRIPTION: Example of using SlotsType helper for TypeScript slot definitions in Vue components with programmatic render functions.

LANGUAGE: typescript
CODE:
import { SlotsType } from 'vue'

defineComponent({
  slots: Object as SlotsType<{
    default: { foo: string; bar: number }
    item: { data: number }
  }>,
  setup(props, { slots }) {
    expectType<
      undefined | ((scope: { foo: string; bar: number }) => any)
    >(slots.default)
    expectType<undefined | ((scope: { data: number }) => any)>(
      slots.item
    )
  }
})

----------------------------------------

TITLE: Basic usage of inject in Vue component
DESCRIPTION: Demonstrates the basic usage of the inject option in a Vue component to receive injected properties from ancestor components.

LANGUAGE: javascript
CODE:
export default {
  inject: ['foo'],
  created() {
    console.log(this.foo)
  }
}

----------------------------------------

TITLE: Defining a Custom Directive with Options API in Vue
DESCRIPTION: Shows how to create and use a custom directive 'v-highlight' using the Options API in Vue. The directive is defined in the component's directives option.

LANGUAGE: javascript
CODE:
const highlight = {
  mounted: (el) => el.classList.add('is-highlight')
}

export default {
  directives: {
    highlight
  }
}

LANGUAGE: vue-html
CODE:
<p v-highlight>This sentence is important!</p>

----------------------------------------

TITLE: Vue Component Configuration with Async Loading
DESCRIPTION: Defines a Vue component that asynchronously loads a tutorial REPL component with a loading state. Uses defineAsyncComponent for lazy loading and includes a separate loading component to display while the main component loads.

LANGUAGE: javascript
CODE:
import { defineAsyncComponent } from 'vue'
import ReplLoading from '@theme/components/ReplLoading.vue'

export default {
  components: {
    TutorialRepl: defineAsyncComponent({
      loader: () => import('./TutorialRepl.vue'),
      loadingComponent: ReplLoading
    })
  }
}

----------------------------------------

TITLE: Using Child Component in Template
DESCRIPTION: Example of using a registered child component within a Vue template using self-closing tag syntax.

LANGUAGE: vue-html
CODE:
<ChildComp />

----------------------------------------

TITLE: Using Top-Level Await in Vue Script Setup
DESCRIPTION: Shows how to use top-level await expressions in a Vue component's <script setup> block, which automatically makes the component an async dependency for Suspense.

LANGUAGE: vue
CODE:
<script setup>
const res = await fetch(...)
const posts = await res.json()
</script>

<template>
  {{ posts }}
</template>

----------------------------------------

TITLE: Using injected value as prop default in Vue
DESCRIPTION: Shows how to use an injected value as the default for a prop in a Vue component.

LANGUAGE: javascript
CODE:
const Child = {
  inject: ['foo'],
  props: {
    bar: {
      default() {
        return this.foo
      }
    }
  }
}

----------------------------------------

TITLE: Using $watch Method in Vue Component
DESCRIPTION: Examples of using the $watch method to observe changes in component properties and expressions.

LANGUAGE: javascript
CODE:
this.$watch('a', (newVal, oldVal) => {})

this.$watch('a.b', (newVal, oldVal) => {})

this.$watch(
  () => this.a + this.b,
  (newVal, oldVal) => {}
)

const unwatch = this.$watch('a', cb)

// later...
unwatch()

----------------------------------------

TITLE: Vue Client-Only Component Usage
DESCRIPTION: Wraps the TutorialRepl component in a ClientOnly component to ensure it only renders on the client side, preventing server-side rendering issues.

LANGUAGE: vue
CODE:
<ClientOnly>
  <TutorialRepl />
</ClientOnly>

----------------------------------------

TITLE: Importing Child Component - Composition API
DESCRIPTION: Simple import statement for a child component using the Composition API approach in Vue single file components.

LANGUAGE: javascript
CODE:
import ChildComp from './ChildComp.vue'

----------------------------------------

TITLE: Organizing Component Options in Vue.js
DESCRIPTION: Demonstrates the recommended order for component options in Vue.js, categorized by functionality. Includes options for global awareness, template compilation, dependencies, composition, interface, state management, events, and rendering.

LANGUAGE: javascript
CODE:
{
  // 1. Global Awareness
  name: 'ComponentName',

  // 2. Template Compiler Options
  compilerOptions: {},

  // 3. Template Dependencies
  components: {},
  directives: {},

  // 4. Composition
  extends: {},
  mixins: [],
  provide() {},
  inject: [],

  // 5. Interface
  inheritAttrs: false,
  props: {},
  emits: [],

  // 6. Composition API
  setup() {},

  // 7. Local State
  data() {},
  computed: {},

  // 8. Events
  watch: {},
  // Lifecycle Events
  beforeCreate() {},
  created() {},
  // ... other lifecycle hooks

  // 9. Non-Reactive Properties
  methods: {},

  // 10. Rendering
  template: '',
  // or
  render() {}
}

----------------------------------------

TITLE: Basic Vue Watcher (Options API)
DESCRIPTION: Demonstrates basic watcher implementation in Options API to monitor question changes and fetch answers from an API.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      question: '',
      answer: 'Questions usually contain a question mark. ;-)',
      loading: false
    }
  },
  watch: {
    question(newQuestion, oldQuestion) {
      if (newQuestion.includes('?')) {
        this.getAnswer()
      }
    }
  },
  methods: {
    async getAnswer() {
      this.loading = true
      this.answer = 'Thinking...'
      try {
        const res = await fetch('https://yesno.wtf/api')
        this.answer = (await res.json()).answer
      } catch (error) {
        this.answer = 'Error! Could not reach the API. ' + error
      } finally {
        this.loading = false
      }
    }
  }
}

----------------------------------------

TITLE: Composition API Event Handler Implementation
DESCRIPTION: Shows the implementation of the input event handler using Vue's Composition API. The handler updates a reactive text ref with the input's value.

LANGUAGE: javascript
CODE:
function onInput(e) {
  // a v-on handler receives the native DOM event
  // as the argument.
  text.value = e.target.value
}

----------------------------------------

TITLE: Vue Async Component Setup
DESCRIPTION: Script setup for asynchronously loading an example REPL component with a loading state component. Uses Vue's defineAsyncComponent for lazy loading optimization.

LANGUAGE: javascript
CODE:
<script>
import { defineAsyncComponent } from 'vue'
import ReplLoading from '@theme/components/ReplLoading.vue'

export default {
  components: {
    ExampleRepl: defineAsyncComponent({
      loader: () => import('./ExampleRepl.vue'),
      loadingComponent: ReplLoading
    })
  }
}
</script>

----------------------------------------

TITLE: Basic Two-way Binding with v-bind and v-on in Vue
DESCRIPTION: Demonstrates the manual implementation of two-way data binding using v-bind for value binding and v-on for event handling. This approach explicitly shows the connection between the input value and state management.

LANGUAGE: vue-html
CODE:
<input :value="text" @input="onInput">

----------------------------------------

TITLE: Implementing Watchers with Vue Options API
DESCRIPTION: This snippet shows how to use the watch option in Vue's Options API to observe changes in a data property and perform side effects. It watches the count property and logs the new value to the console whenever it changes.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      count: 0
    }
  },
  watch: {
    count(newCount) {
      // yes, console.log() is a side effect
      console.log(`new count is: ${newCount}`)
    }
  }
}

----------------------------------------

TITLE: Options API Event Handler Implementation
DESCRIPTION: Shows how to implement an event handler using the Options API with methods option. Includes state management through data property.

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      // update component state
      this.count++
    }
  }
}

----------------------------------------

TITLE: Defining Vue Partners Page Structure
DESCRIPTION: This snippet sets up the structure for the Vue Partners page. It includes frontmatter for page metadata and imports a custom PartnerLanding component.

LANGUAGE: vue
CODE:
---
page: true
footer: false
title: Vue Partners
---

<script setup>
import PartnerLanding from './components/PartnerLanding.vue'
</script>

<PartnerLanding />

----------------------------------------

TITLE: Client-Only Component Rendering
DESCRIPTION: Template markup for rendering the ExampleRepl component only on the client side, preventing server-side rendering issues.

LANGUAGE: vue
CODE:
<ClientOnly>
  <ExampleRepl />
</ClientOnly>

----------------------------------------

TITLE: Composition API Setup Function Implementation
DESCRIPTION: Shows how to implement event handlers using Composition API's setup() function, including state management and proper return of reactive variables.

LANGUAGE: javascript
CODE:
setup() {
  const count = ref(0)

  function increment(e) {
    // update component state
    count.value++
  }

  return {
    count,
    increment
  }
}

----------------------------------------

TITLE: Mutating Arrays in Vue Composition API
DESCRIPTION: Shows how to update a todo list by mutating the source array using the push method in Composition API style. The .value property is used due to the reactive reference.

LANGUAGE: javascript
CODE:
todos.value.push(newTodo)

----------------------------------------

TITLE: Importing a Vue Single-File Component in JavaScript
DESCRIPTION: This snippet demonstrates how to import a Vue Single-File Component in a JavaScript module. It shows that compiled SFCs can be treated as standard ES modules.

LANGUAGE: javascript
CODE:
import MyComponent from './MyComponent.vue'

export default {
  components: {
    MyComponent
  }
}

----------------------------------------

TITLE: Defining Vue.js Directives for TodoMVC
DESCRIPTION: Creates custom Vue.js directives for handling focus behavior in the todo input fields. The 'todo-focus' directive automatically focuses an input element when a todo item is being edited.

LANGUAGE: JavaScript
CODE:
// Some directives
app.directive('todo-focus', {
  updated(el, binding) {
    if (binding.value) {
      el.focus()
    }
  }
})

----------------------------------------

TITLE: Basic Vue Event Binding Syntax
DESCRIPTION: Shows the basic syntax for binding click events using v-on directive in Vue templates.

LANGUAGE: vue-html
CODE:
<button v-on:click="increment">{{ count }}</button>

----------------------------------------

TITLE: Replacing Arrays in Vue Options API
DESCRIPTION: Demonstrates how to update a todo list by replacing the entire array using filter method in Options API style.

LANGUAGE: javascript
CODE:
this.todos = this.todos.filter(/* ... */)

----------------------------------------

TITLE: Implementing FLIP List Transitions with Vue TransitionGroup
DESCRIPTION: This snippet demonstrates how to use Vue's <TransitionGroup> component to create FLIP animations for list transitions. It includes the template structure and JavaScript logic for handling dynamic list updates with smooth animations.

LANGUAGE: vue
CODE:
<template>
  <TransitionGroup
    tag="ul"
    :css="false"
    @before-enter="onBeforeEnter"
    @enter="onEnter"
    @leave="onLeave"
  >
    <li
      v-for="item in items"
      :key="item.id"
    >
      {{ item.text }}
    </li>
  </TransitionGroup>
</template>

<script>
import gsap from 'gsap'

export default {
  data() {
    return {
      items: [
        { id: 1, text: 'Item 1' },
        { id: 2, text: 'Item 2' },
        { id: 3, text: 'Item 3' }
      ]
    }
  },
  methods: {
    onBeforeEnter(el) {
      el.style.opacity = 0
      el.style.height = 0
    },
    onEnter(el, done) {
      gsap.to(el, {
        opacity: 1,
        height: '1.6em',
        delay: el.dataset.index * 0.15,
        onComplete: done
      })
    },
    onLeave(el, done) {
      gsap.to(el, {
        opacity: 0,
        height: 0,
        delay: el.dataset.index * 0.15,
        onComplete: done
      })
    }
  }
}
</script>

----------------------------------------

TITLE: Implementing Local Storage for TodoMVC
DESCRIPTION: Defines a todoStorage object that handles saving and loading todos from local storage. It provides methods for fetching all todos and saving updates to the browser's local storage.

LANGUAGE: JavaScript
CODE:
const todoStorage = {
  fetch() {
    const todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]')
    todos.forEach(function (todo, index) {
      todo.id = index
    })
    todoStorage.uid = todos.length
    return todos
  },
  save(todos) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))
  }
}

----------------------------------------

TITLE: Basic Template Rendering with Vue
DESCRIPTION: Shows how to render reactive state in templates using mustache syntax. Demonstrates automatic unwrapping of refs in templates.

LANGUAGE: vue-html
CODE:
<h1>{{ message }}</h1>
<p>Count is: {{ counter.count }}</p>

----------------------------------------

TITLE: Computed Property Implementation Using Options API
DESCRIPTION: Demonstrates how to define a computed property for filtered todos using Vue's Options API approach.

LANGUAGE: javascript
CODE:
export default {
  // ...
  computed: {
    filteredTodos() {
      // return filtered todos based on `this.hideCompleted`
    }
  }
}

----------------------------------------

TITLE: Component Testing with Vue Test Utils
DESCRIPTION: This snippet shows how to test a Vue component using Vue Test Utils. It demonstrates mounting a component, interacting with it, and asserting its behavior.

LANGUAGE: javascript
CODE:
const valueSelector = '[data-testid=stepper-value]'
const buttonSelector = '[data-testid=increment]'

const wrapper = mount(Stepper, {
  props: {
    max: 1
  }
})

expect(wrapper.find(valueSelector).text()).toContain('0')

await wrapper.find(buttonSelector).trigger('click')

expect(wrapper.find(valueSelector).text()).toContain('1')

----------------------------------------

TITLE: Importing and Rendering Vue Theme Component
DESCRIPTION: Sets up a Vue component using the script setup syntax to import and render a ThemePage component. Uses Vue 3 composition API syntax with the script setup sugar.

LANGUAGE: vue
CODE:
---
page: true
---

<script setup>
import ThemePage from './themes/ThemePage.vue'
</script>

<ThemePage />

----------------------------------------

TITLE: Component Setup with Options API
DESCRIPTION: Demonstrates component setup using Options API, returning reactive state through the data() option function.

LANGUAGE: javascript
CODE:
setup() {
  const counter = reactive({ count: 0 })
  const message = ref('Hello World!')
  return {
    counter,
    message
  }
}

----------------------------------------

TITLE: Composition API Setup Function Implementation
DESCRIPTION: Full example of implementing computed properties within a Vue component's setup function using Composition API.

LANGUAGE: javascript
CODE:
import { createApp, ref, computed } from 'vue'

createApp({
  setup() {
    const hideCompleted = ref(false)
    const todos = ref([
      /* ... */
    ])

    const filteredTodos = computed(() => {
      // return filtered todos based on
      // `todos.value` & `hideCompleted.value`
    })

    return {
      // ...
    }
  }
})

----------------------------------------

TITLE: Structuring Single-File Components in Vue.js
DESCRIPTION: Demonstrates the recommended order of top-level elements in Vue.js Single-File Components (SFCs). The <script> and <template> tags should precede the <style> tag for consistency.

LANGUAGE: vue
CODE:
<!-- Good Example -->
<template>...</template>
<script>/* ... */</script>
<style>/* ... */</style>

----------------------------------------

TITLE: Naming Base Components with a Specific Prefix
DESCRIPTION: Illustrates the convention of prefixing base component names with 'Base', 'App', or 'V' to distinguish them and group them together in file listings.

LANGUAGE: JavaScript
CODE:
components/
|- BaseButton.vue
|- BaseTable.vue
|- BaseIcon.vue

LANGUAGE: JavaScript
CODE:
components/
|- AppButton.vue
|- AppTable.vue
|- AppIcon.vue

LANGUAGE: JavaScript
CODE:
components/
|- VButton.vue
|- VTable.vue
|- VIcon.vue

----------------------------------------

TITLE: Vue.js CRUD Component Template
DESCRIPTION: HTML template for the CRUD component. It includes input fields for filtering and editing names, buttons for CRUD operations, and a list to display the names.

LANGUAGE: html
CODE:
<div>
  <div>
    <span>Filter prefix:</span>
    <input v-model="prefix">
  </div>
  <select size="5" v-model="selected">
    <option v-for="(n, i) in filteredNames" :value="i">
      {{n.surname}}, {{n.name}}
    </option>
  </select>
  <div>
    <span>Name:</span><input v-model="name">
  </div>
  <div>
    <span>Surname:</span><input v-model="surname">
  </div>
  <div>
    <button @click="create">Create</button>
    <button @click="update" :disabled="selected < 0">Update</button>
    <button @click="del" :disabled="selected < 0">Delete</button>
  </div>
</div>

----------------------------------------

TITLE: Using onMounted Hook in Vue Composition API
DESCRIPTION: Demonstrates how to use the onMounted lifecycle hook to run code after the component is mounted in the Composition API.

LANGUAGE: javascript
CODE:
import { onMounted } from 'vue'

onMounted(() => {
  // component is now mounted.
})

----------------------------------------

TITLE: Importing and Rendering Vue.js Home Component
DESCRIPTION: This snippet sets up the Vue.js homepage by importing the Home component from the theme directory and rendering it using the <script setup> syntax. It demonstrates the use of Vue 3's Composition API for component organization.

LANGUAGE: vue
CODE:
<script setup>
import Home from '@theme/components/Home.vue'
</script>

<Home />

----------------------------------------

TITLE: Element Selectors with Scoped Styles - Good Practice
DESCRIPTION: Shows the preferred approach using class selectors in scoped styles for better performance through class-attribute selector matching.

LANGUAGE: vue-html
CODE:
<template>
  <button class="btn btn-close">×</button>
</template>

<style scoped>
.btn-close {
  background-color: red;
}
</style>

----------------------------------------

TITLE: Implementing Recursive Nested Tree Component in Vue.js
DESCRIPTION: This Vue.js component creates a recursive tree structure. It renders items as either files or folders, with the ability to toggle between the two by double-clicking. The component uses props to pass data and emit events for user interactions.

LANGUAGE: vue
CODE:
<script setup>
import { ref } from 'vue'

const props = defineProps({
  model: Object
})

const isOpen = ref(false)
const isFolder = ref(false)
const items = ref(props.model.children)

function toggle() {
  isOpen.value = !isOpen.value
}

function changeType() {
  if (!isFolder.value) {
    props.model.children = []
    addChild()
    isFolder.value = true
  }
}

function addChild() {
  items.value.push({
    name: 'new stuff'
  })
}
</script>

<template>
  <li>
    <div
      :class="{ bold: isFolder }"
      @click="toggle"
      @dblclick="changeType"
    >
      {{ model.name }}
      [{{ isOpen ? '-' : '+' }}]
    </div>
    <ul v-show="isOpen" v-if="isFolder">
      <TreeItem
        class="item"
        v-for="model in items"
        :model="model"
      ></TreeItem>
      <li class="add" @click="addChild">+</li>
    </ul>
  </li>
</template>

<style scoped>
.item {
  cursor: pointer;
}
.bold {
  font-weight: bold;
}
ul {
  padding-left: 1em;
  line-height: 1.5em;
  list-style-type: dot;
}
</style>

----------------------------------------

TITLE: Defining DynamicComponentProps Interface in TypeScript
DESCRIPTION: TypeScript interface for the props of the <component> element, specifying the 'is' prop type.

LANGUAGE: typescript
CODE:
interface DynamicComponentProps {
  is: string | Component
}

----------------------------------------

TITLE: Parent-Child Communication - Good Practice (Options API)
DESCRIPTION: Shows the recommended approach using props down, events up pattern for component communication.

LANGUAGE: js
CODE:
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  emits: ['input'],

  template: `
    <input
      :value="todo.text"
      @input="$emit('input', $event.target.value)"
    >
  `
})

LANGUAGE: js
CODE:
app.component('TodoItem', {
  props: {
    todo: {
      type: Object,
      required: true
    }
  },

  emits: ['delete'],

  template: `
    <span>
      {{ todo.text }}
      <button @click="$emit('delete')">
        ×
      </button>
    </span>
  `
})

----------------------------------------

TITLE: HTML Structure for Vue.js TodoMVC Application
DESCRIPTION: Defines the HTML structure for the TodoMVC application. It includes input fields for adding new todos, a list of todos with edit and delete functionality, and footer controls for filtering and clearing completed todos.

LANGUAGE: HTML
CODE:
<section class="todoapp">
  <header class="header">
    <h1>todos</h1>
    <input
      class="new-todo"
      autofocus
      autocomplete="off"
      placeholder="What needs to be done?"
      v-model="newTodo"
      @keyup.enter="addTodo"
    >
  </header>
  <section class="main" v-show="todos.length">
    <input
      id="toggle-all"
      class="toggle-all"
      type="checkbox"
      v-model="allDone"
    >
    <label for="toggle-all">Mark all as complete</label>
    <ul class="todo-list">
      <li
        v-for="todo in filteredTodos"
        class="todo"
        :key="todo.id"
        :class="{ completed: todo.completed, editing: todo == editedTodo }"
      >
        <div class="view">
          <input class="toggle" type="checkbox" v-model="todo.completed">
          <label @dblclick="editTodo(todo)">{{ todo.title }}</label>
          <button class="destroy" @click="removeTodo(todo)"></button>
        </div>
        <input
          v-if="todo == editedTodo"
          class="edit"
          type="text"
          v-model="todo.title"
          v-todo-focus="todo == editedTodo"
          @blur="doneEdit(todo)"
          @keyup.enter="doneEdit(todo)"
          @keyup.escape="cancelEdit(todo)"
        >
      </li>
    </ul>
  </section>
  <footer class="footer" v-show="todos.length">
    <span class="todo-count">
      <strong>{{ remaining }}</strong> {{ pluralize('item', remaining) }} left
    </span>
    <ul class="filters">
      <li>
        <a href="#/all" :class="{ selected: visibility == 'all' }">All</a>
      </li>
      <li>
        <a href="#/active" :class="{ selected: visibility == 'active' }">Active</a>
      </li>
      <li>
        <a href="#/completed" :class="{ selected: visibility == 'completed' }">Completed</a>
      </li>
    </ul>
    <button class="clear-completed" @click="removeCompleted" v-show="todos.length > remaining">
      Clear completed
    </button>
  </footer>
</section>

----------------------------------------

TITLE: HTML Content Auto-Escaping in Vue.js Templates
DESCRIPTION: Shows how Vue automatically escapes HTML content in templates to prevent script injection attacks.

LANGUAGE: vue-html
CODE:
<h1>{{ userProvidedString }}</h1>

LANGUAGE: javascript
CODE:
'<script>alert("hi")</script>'

LANGUAGE: vue-html
CODE:
&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;

----------------------------------------

TITLE: Setting up Vue API Reference Page with ApiIndex Component
DESCRIPTION: This snippet configures the Vue API reference page using frontmatter and imports the ApiIndex component. The ApiIndex component is then rendered in the template.

LANGUAGE: vue
CODE:
<script setup>
import ApiIndex from './ApiIndex.vue'
</script>

<ApiIndex />

----------------------------------------

TITLE: Creating Simple Prop-Rendering Vue.js Component
DESCRIPTION: This snippet demonstrates how to create a basic Vue.js component that accepts a prop named 'msg' and renders it within a paragraph element. It showcases the component structure and prop usage in Vue.js.

LANGUAGE: vue
CODE:
<script>
export default {
  props: ['msg']
}
</script>

<template>
  <p>{{ msg }}</p>
</template>

----------------------------------------

TITLE: Lifecycle Hooks for Cached Components in Vue Composition API
DESCRIPTION: This snippet demonstrates how to use onActivated and onDeactivated hooks in the Composition API to handle lifecycle events for cached components.

LANGUAGE: vue
CODE:
<script setup>
import { onActivated, onDeactivated } from 'vue'

onActivated(() => {
  // called on initial mount
  // and every time it is re-inserted from the cache
})

onDeactivated(() => {
  // called when removed from the DOM into the cache
  // and also when unmounted
})
</script>

----------------------------------------

TITLE: Basic Provide Usage - Options API
DESCRIPTION: Shows how to provide data using the provide option in Options API style components.

LANGUAGE: javascript
CODE:
export default {
  provide: {
    message: 'hello!'
  }
}

----------------------------------------

TITLE: Defining a Simple Vue Component
DESCRIPTION: Demonstrates creating a basic Vue component object with a render function that returns 'Hello world!'.

LANGUAGE: javascript
CODE:
const HelloWorldComponent = {
  render() {
    return 'Hello world!'
  }
}

----------------------------------------

TITLE: Rendering Markdown Editor Template in Vue.js
DESCRIPTION: This template defines the structure of the markdown editor component. It includes a textarea for input and a div to display the rendered markdown output. The v-model directive is used for two-way data binding.

LANGUAGE: vue
CODE:
<template>
  <div id="editor">
    <textarea
      :value="input"
      @input="update"
    ></textarea>
    <div v-html="compiledMarkdown"></div>
  </div>
</template>

----------------------------------------

TITLE: Teleport Implementation Example
DESCRIPTION: Example showing how to use Teleport to move modal content to the body element.

LANGUAGE: vue-html
CODE:
<button @click="open = true">Open Modal</button>

<Teleport to="body">
  <div v-if="open" class="modal">
    <p>Hello from the modal!</p>
    <button @click="open = false">Close</button>
  </div>
</Teleport>

----------------------------------------

TITLE: Piping Vue SSR Output to Node.js Writable Stream
DESCRIPTION: Shows how to use pipeToNodeWritable function to render a Vue app and pipe the output to an existing Node.js Writable stream instance.

LANGUAGE: javascript
CODE:
// inside a Node.js http handler
pipeToNodeWritable(app, {}, res)

----------------------------------------

TITLE: Enhanced Move Transitions
DESCRIPTION: CSS rules for smooth movement transitions when items are added, removed, or reordered in a list

LANGUAGE: css
CODE:
.list-move,
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}

.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

.list-leave-active {
  position: absolute;
}

----------------------------------------

TITLE: Using factory function for non-primitive defaults in Vue inject
DESCRIPTION: Shows how to use a factory function for non-primitive default values in Vue component injections.

LANGUAGE: javascript
CODE:
const Child = {
  inject: {
    foo: {
      from: 'bar',
      default: () => [1, 2, 3]
    }
  }
}

----------------------------------------

TITLE: Multiple Teleports Example
DESCRIPTION: Example demonstrating how multiple Teleports can target the same destination element.

LANGUAGE: vue-html
CODE:
<Teleport to="#modals">
  <div>A</div>
</Teleport>
<Teleport to="#modals">
  <div>B</div>
</Teleport>

----------------------------------------

TITLE: Augmenting Global Properties in Vue with TypeScript
DESCRIPTION: This snippet shows how to augment global properties in Vue using TypeScript module augmentation. It demonstrates adding custom properties to the ComponentCustomProperties interface.

LANGUAGE: typescript
CODE:
import axios from 'axios'

declare module 'vue' {
  interface ComponentCustomProperties {
    $http: typeof axios
    $translate: (key: string) => string
  }
}

----------------------------------------

TITLE: Basic JavaScript Reactivity Example
DESCRIPTION: Demonstrates the limitations of basic JavaScript variable updates without reactivity

LANGUAGE: javascript
CODE:
let A0 = 1
let A1 = 2
let A2 = A0 + A1

console.log(A2) // 3

A0 = 2
console.log(A2) // Still 3

----------------------------------------

TITLE: Using injected value in data() in Vue
DESCRIPTION: Demonstrates how to use an injected value as a data entry in a Vue component.

LANGUAGE: javascript
CODE:
const Child = {
  inject: ['foo'],
  data() {
    return {
      bar: this.foo
    }
  }
}

----------------------------------------

TITLE: Props Declaration with Object Syntax
DESCRIPTION: Demonstrates declaring props using object syntax with type validation

LANGUAGE: js
CODE:
export default {
  props: {
    title: String,
    likes: Number
  }
}

----------------------------------------

TITLE: Registering and Using Built-in Components Dynamically in Vue
DESCRIPTION: Example of registering and using Vue's built-in components (Transition and TransitionGroup) with <component>.

LANGUAGE: vue
CODE:
<script>
import { Transition, TransitionGroup } from 'vue'

export default {
  components: {
    Transition,
    TransitionGroup
  }
}
</script>

<template>
  <component :is="isGroup ? 'TransitionGroup' : 'Transition'">
    ...
  </component>
</template>

----------------------------------------

TITLE: Vue Single File Component with TypeScript
DESCRIPTION: Example of a Vue SFC using TypeScript with basic data property and template type checking.

LANGUAGE: vue
CODE:
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      count: 1
    }
  }
})
</script>

<template>
  <!-- type checking and auto-completion enabled -->
  {{ count.toFixed(2) }}
</template>

----------------------------------------

TITLE: Render Function with setup()
DESCRIPTION: Demonstrates using setup() with render functions and exposing methods to parent components via template refs.

LANGUAGE: javascript
CODE:
import { h, ref } from 'vue'

export default {
  setup(props, { expose }) {
    const count = ref(0)
    const increment = () => ++count.value

    expose({
      increment
    })

    return () => h('div', count.value)
  }
}

----------------------------------------

TITLE: Transition Between Components in Vue
DESCRIPTION: Demonstrates using Transition with dynamic components.

LANGUAGE: vue-html
CODE:
<Transition name="fade" mode="out-in">
  <component :is="activeComponent"></component>
</Transition>

----------------------------------------

TITLE: Accessing Props in setup()
DESCRIPTION: Shows how to access and work with component props within the setup() function. Props are reactive and will update when new values are passed.

LANGUAGE: javascript
CODE:
export default {
  props: {
    title: String
  },
  setup(props) {
    console.log(props.title)
  }
}

----------------------------------------

TITLE: Using the i18n Plugin in Vue
DESCRIPTION: Shows how to use the custom i18n plugin in a Vue application. The plugin is imported and installed with translation options using app.use().

LANGUAGE: javascript
CODE:
import i18nPlugin from './plugins/i18n'

app.use(i18nPlugin, {
  greetings: {
    hello: 'Bonjour!'
  }
})

----------------------------------------

TITLE: Setting Max Cached Instances for KeepAlive in Vue
DESCRIPTION: This snippet shows how to limit the maximum number of component instances that can be cached using the max prop of KeepAlive.

LANGUAGE: vue
CODE:
<KeepAlive :max="10">
  <component :is="activeComponent" />
</KeepAlive>

----------------------------------------

TITLE: Injecting Plugin Options in a Vue Component (Options API)
DESCRIPTION: Demonstrates how to inject and use plugin options in a Vue component using the Options API. This example injects the i18n options and logs a translated greeting in the created hook.

LANGUAGE: javascript
CODE:
export default {
  inject: ['i18n'],
  created() {
    console.log(this.i18n.greetings.hello)
  }
}

----------------------------------------

TITLE: Typing Component Emits in Vue with TypeScript
DESCRIPTION: This example shows how to declare expected payload types for emitted events using the object syntax of the emits option. It also demonstrates type checking for non-declared emitted events.

LANGUAGE: typescript
CODE:
import { defineComponent } from 'vue'

export default defineComponent({
  emits: {
    addBook(payload: { bookName: string }) {
      // perform runtime validation
      return payload.bookName.length > 0
    }
  },
  methods: {
    onSubmit() {
      this.$emit('addBook', {
        bookName: 123 // Type error!
      })

      this.$emit('non-declared-event') // Type error!
    }
  }
})

----------------------------------------

TITLE: Implementing Provide/Inject in a Vue Plugin
DESCRIPTION: Demonstrates how to use the provide/inject pattern in a Vue plugin. This allows the plugin to make its options available for injection in components throughout the application.

LANGUAGE: javascript
CODE:
// plugins/i18n.js
export default {
  install: (app, options) => {
    app.provide('i18n', options)
  }
}

----------------------------------------

TITLE: Using v-if on <template> Element in Vue.js
DESCRIPTION: Shows how to use v-if directive on a <template> element to conditionally render multiple elements without introducing an extra wrapper DOM element.

LANGUAGE: vue-html
CODE:
<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>

----------------------------------------

TITLE: Implementing a Counter Component in Vue 2 Options API
DESCRIPTION: This snippet shows how to create a counter component using Vue 2's Options API. It includes state management in the data option and an action method to increment the count.

LANGUAGE: vue
CODE:
<script>
export default {
  // state
  data() {
    return {
      count: 0
    }
  },
  // actions
  methods: {
    increment() {
      this.count++
    }
  }
}
</script>

<!-- view -->
<template>{{ count }}</template>

----------------------------------------

TITLE: Configuring Vue Partner Page Component with VitePress
DESCRIPTION: Sets up a Vue.js component to render partner-specific pages using VitePress. It imports the useData hook from VitePress to access page parameters and renders a custom Page component with the partner ID passed as a prop.

LANGUAGE: vue
CODE:
<script setup>
import { useData } from 'vitepress'
import Page from './components/PartnerPage.vue'

const { page } = useData()
</script>

<Page :partner="page.params.partnerId" />

----------------------------------------

TITLE: Using key Attribute for Transition Control
DESCRIPTION: Shows how to use the key attribute to force element replacement and trigger transitions when content changes.

LANGUAGE: vue-html
CODE:
<transition>
  <span :key="text">{{ text }}</span>
</transition>

----------------------------------------

TITLE: Implementing Class-based Animation in Vue
DESCRIPTION: This snippet demonstrates how to trigger animations by dynamically adding a CSS class in Vue. It includes both Composition API and Options API implementations, along with the corresponding HTML and CSS.

LANGUAGE: javascript
CODE:
const disabled = ref(false)

function warnDisabled() {
  disabled.value = true
  setTimeout(() => {
    disabled.value = false
  }, 1500)
}

LANGUAGE: javascript
CODE:
export default {
  data() {
    return {
      disabled: false
    }
  },
  methods: {
    warnDisabled() {
      this.disabled = true
      setTimeout(() => {
        this.disabled = false
      }, 1500)
    }
  }
}

LANGUAGE: vue
CODE:
<div :class="{ shake: disabled }">
  <button @click="warnDisabled">Click me</button>
  <span v-if="disabled">This feature is disabled!</span>
</div>

LANGUAGE: css
CODE:
.shake {
  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate3d(0, 0, 0);
}

@keyframes shake {
  10%,
  90% {
    transform: translate3d(-1px, 0, 0);
  }

  20%,
  80% {
    transform: translate3d(2px, 0, 0);
  }

  30%,
  50%,
  70% {
    transform: translate3d(-4px, 0, 0);
  }

  40%,
  60% {
    transform: translate3d(4px, 0, 0);
  }
}

----------------------------------------

TITLE: Advanced Async Component Configuration
DESCRIPTION: Shows the advanced options for defineAsyncComponent including loading and error states with timeouts.

LANGUAGE: javascript
CODE:
const AsyncComp = defineAsyncComponent({
  loader: () => import('./Foo.vue'),
  loadingComponent: LoadingComponent,
  delay: 200,
  errorComponent: ErrorComponent,
  timeout: 3000
})

----------------------------------------

TITLE: Styling Markdown Editor Component in Vue.js
DESCRIPTION: This CSS snippet provides basic styling for the markdown editor component. It sets up a side-by-side layout for the input textarea and rendered output, with a consistent font and padding.

LANGUAGE: css
CODE:
<style>
html, body, #editor {
  margin: 0;
  height: 100%;
  font-family: 'Helvetica Neue', Arial, sans-serif;
  color: #333;
}

textarea, #editor div {
  display: inline-block;
  width: 49%;
  height: 100%;
  vertical-align: top;
  box-sizing: border-box;
  padding: 0 20px;
}

textarea {
  border: none;
  border-right: 1px solid #ccc;
  resize: none;
  outline: none;
  background-color: #f6f6f6;
  font-size: 14px;
  font-family: 'Monaco', courier, monospace;
  padding: 20px;
}

code {
  color: #f66;
}
</style>

----------------------------------------

TITLE: Basic Composition API Example in Vue.js
DESCRIPTION: Demonstrates a simple Vue component using Composition API with reactive state, mutating functions, and lifecycle hooks. Shows how to use ref, onMounted, and template syntax.

LANGUAGE: vue
CODE:
<script setup>
import { ref, onMounted } from 'vue'

// reactive state
const count = ref(0)

// functions that mutate state and trigger updates
function increment() {
  count.value++
}

// lifecycle hooks
onMounted(() => {
  console.log(`The initial count is ${count.value}.`)
})
</script>

<template>
  <button @click="increment">Count is: {{ count }}</button>
</template>

----------------------------------------

TITLE: Defining Fallback Content for Vue.js Slots
DESCRIPTION: This snippet shows how to define fallback content for a slot in Vue.js. The content inside the <slot> element will be displayed if the parent component doesn't provide any slot content.

LANGUAGE: vue-html
CODE:
<slot>Fallback content</slot>

----------------------------------------

TITLE: Handling User Input with v-on Directive in Vue.js
DESCRIPTION: This snippet shows how to use the v-on directive in Vue.js to handle user input. It demonstrates binding a method to an input event, allowing for dynamic interaction with the user interface.

LANGUAGE: vue
CODE:
<template>
  <div>
    <input v-on:input="handleInput" placeholder="Type something">
    <p>You typed: {{ userInput }}</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      userInput: ''
    }
  },
  methods: {
    handleInput(event) {
      this.userInput = event.target.value
    }
  }
}
</script>

----------------------------------------

TITLE: Handling Event Arguments in Parent
DESCRIPTION: Demonstrates how to handle event arguments in the parent component using an inline arrow function or a method.

LANGUAGE: vue-html
CODE:
<MyButton @increase-by="(n) => count += n" />

LANGUAGE: vue-html
CODE:
<MyButton @increase-by="increaseCount" />