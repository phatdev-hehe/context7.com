TITLE: Installing Ant Design with yarn
DESCRIPTION: Command to install the Ant Design library using yarn package manager.

LANGUAGE: bash
CODE:
yarn add antd

----------------------------------------

TITLE: Creating Basic Grid System with Ant Design in JSX
DESCRIPTION: This snippet demonstrates how to use Ant Design's Row and Col components to create a basic grid system. It shows the transition from a stacked layout to a horizontal arrangement.

LANGUAGE: JSX
CODE:
<Row>\n  <Col />\n</Row>

----------------------------------------

TITLE: Configuring Internationalization with ConfigProvider in React
DESCRIPTION: This snippet demonstrates how to set up internationalization for Ant Design components using the ConfigProvider. It imports the Chinese locale and configures it globally for the entire application.

LANGUAGE: jsx
CODE:
import zhCN from 'antd/locale/zh_CN';
// for date-picker i18n
import 'dayjs/locale/zh-cn';

return (
  <ConfigProvider locale={zhCN}>
    <App />
  </ConfigProvider>
);

----------------------------------------

TITLE: Creating an Interactive DatePicker Component with Ant Design
DESCRIPTION: This example shows how to create a more complex component using Ant Design's DatePicker and message components. It demonstrates state management and handling user interactions.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react';
import { DatePicker, message } from 'antd';
import { createRoot } from 'react-dom/client';

import './index.css';

const App = () => {
  const [date, setDate] = useState(null);
  const [messageApi, contextHolder] = message.useMessage();
  const handleChange = (value) => {
    messageApi.info(`Selected Date: ${value ? value.format('YYYY-MM-DD') : 'None'}`);
    setDate(value);
  };
  return (
    <div style={{ width: 400, margin: '100px auto' }}>
      <DatePicker onChange={handleChange} />
      <div style={{ marginTop: 16 }}>
        Selected Date: {date ? date.format('YYYY-MM-DD') : 'None'}
      </div>
      {contextHolder}
    </div>
  );
};

createRoot(document.getElementById('root')).render(<App />);

----------------------------------------

TITLE: Customizing Design Tokens with ConfigProvider in React
DESCRIPTION: Demonstrates how to use ConfigProvider to customize Design Tokens like primary color and border radius globally. It also shows how to modify alias tokens like container background color.

LANGUAGE: tsx
CODE:
import { Button, ConfigProvider, Space } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        // Seed Token
        colorPrimary: '#00b96b',
        borderRadius: 2,

        // Alias Token
        colorBgContainer: '#f6ffed',
      },
    }}
  >
    <Space>
      <Button type="primary">Primary</Button>
      <Button>Default</Button>
    </Space>
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Implementing Simple Table with Actions using Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create a basic table with action buttons in the last column using Ant Design components. It includes data structure definition, column configuration, and rendering of action buttons.

LANGUAGE: jsx
CODE:
import { Space, Table, Tag } from 'antd';
import React from 'react';

const { Column, ColumnGroup } = Table;

const data = [
  {
    key: '1',
    firstName: 'John',
    lastName: 'Brown',
    age: 32,
    address: 'New York No. 1 Lake Park',
    tags: ['nice', 'developer'],
  },
  {
    key: '2',
    firstName: 'Jim',
    lastName: 'Green',
    age: 42,
    address: 'London No. 1 Sidney Place',
    tags: ['loser'],
  },
  {
    key: '3',
    firstName: 'Joe',
    lastName: 'Black',
    age: 32,
    address: 'Sydney No. 1 York Street',
    tags: ['cool', 'teacher'],
  },
];

const App: React.FC = () => (
  <Table dataSource={data}>
    <ColumnGroup title="Name">
      <Column title="First Name" dataIndex="firstName" key="firstName" />
      <Column title="Last Name" dataIndex="lastName" key="lastName" />
    </ColumnGroup>
    <Column title="Age" dataIndex="age" key="age" />
    <Column title="Address" dataIndex="address" key="address" />
    <Column
      title="Tags"
      dataIndex="tags"
      key="tags"
      render={(tags: string[]) => (
        <>
          {tags.map((tag) => (
            <Tag color="blue" key={tag}>
              {tag}
            </Tag>
          ))}
        </>
      )}
    />
    <Column
      title="Action"
      key="action"
      render={(_: any, record: { firstName: string; lastName: string }) => (
        <Space size="middle">
          <a>Invite {record.lastName}</a>
          <a>Delete</a>
        </Space>
      )}
    />
  </Table>
);

export default App;

----------------------------------------

TITLE: Basic React Component Usage with Ant Design
DESCRIPTION: Demonstrates how to import and use an Ant Design component (DatePicker) in a React application. Shows the minimal code required to implement a functional component.

LANGUAGE: jsx
CODE:
import React from 'react';
import { DatePicker } from 'antd';

const App = () => {
  return <DatePicker />;
};

export default App;

----------------------------------------

TITLE: Creating a Basic Ant Design React Component
DESCRIPTION: This snippet demonstrates how to create a simple React component using Ant Design's Button, Space, and DatePicker components. It also displays the current version of Ant Design.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button, Space, DatePicker, version } from 'antd';

const App = () => (
  <div style={{ padding: '0 24px' }}>
    <h1>antd version: {version}</h1>
    <Space>
      <DatePicker />
      <Button type="primary">Primary Button</Button>
    </Space>
  </div>
);

export default App;

----------------------------------------

TITLE: Basic Form Usage with Form and Form.Item
DESCRIPTION: Demonstrates how to create a basic form using Form and Form.Item components

LANGUAGE: tsx
CODE:
<Form>
  <Form.Item name="username">
    <Input />
  </Form.Item>
  <Form.Item name="password">
    <Input.Password />
  </Form.Item>
</Form>

----------------------------------------

TITLE: Implementing Ant Design Components with React and Localization
DESCRIPTION: This code snippet shows how to use Ant Design components in a React application, including date picking, message display, and localization. It demonstrates the usage of ConfigProvider, DatePicker, and message components along with dayjs for date formatting.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react';
import { ConfigProvider, DatePicker, message } from 'antd';
// 由于 antd 组件的默认文案是英文，所以需要修改为中文
import dayjs from 'dayjs';
import { createRoot } from 'react-dom/client';

import 'dayjs/locale/zh-cn';

import zhCN from 'antd/locale/zh_CN';

import './index.css';

dayjs.locale('zh-cn');

const App = () => {
  const [date, setDate] = useState(null);
  const [messageApi, contextHolder] = message.useMessage();
  const handleChange = (value) => {
    messageApi.info(`您选择的日期是: ${value ? value.format('YYYY年MM月DD日') : '未选择'}`);
    setDate(value);
  };
  return (
    <ConfigProvider locale={zhCN}>
      <div style={{ width: 400, margin: '100px auto' }}>
        <DatePicker onChange={handleChange} />
        <div style={{ marginTop: 16 }}>
          当前日期：{date ? date.format('YYYY年MM月DD日') : '未选择'}
        </div>
      </div>
      {contextHolder}
    </ConfigProvider>
  );
};

createRoot(document.getElementById('root')).render(<App />);

----------------------------------------

TITLE: Defining Common Props Table in Markdown
DESCRIPTION: This snippet presents a markdown table that documents the 'rootClassName' property commonly used in Ant Design components. It specifies the property name, description, type, and default value.

LANGUAGE: markdown
CODE:
| Property      | Description                   | Type   | Default |
| ------------- | ----------------------------- | ------ | ------- |
| rootClassName | ClassName on the root element | string | -       |

----------------------------------------

TITLE: Creating User Registration Form with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create a user registration form using Ant Design components in React. It includes form layout, input fields for username, email, password, and agreement checkbox. The form also handles submission and displays success message.

LANGUAGE: jsx
CODE:
import { Button, Checkbox, Form, Input } from 'antd';

const onFinish = (values: any) => {
  console.log('Success:', values);
};

const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
};

const App: React.FC = () => (
  <Form
    name="basic"
    labelCol={{ span: 8 }}
    wrapperCol={{ span: 16 }}
    style={{ maxWidth: 600 }}
    initialValues={{ remember: true }}
    onFinish={onFinish}
    onFinishFailed={onFinishFailed}
    autoComplete="off"
  >
    <Form.Item
      label="Username"
      name="username"
      rules={[{ required: true, message: 'Please input your username!' }]}
    >
      <Input />
    </Form.Item>

    <Form.Item
      label="Password"
      name="password"
      rules={[{ required: true, message: 'Please input your password!' }]}
    >
      <Input.Password />
    </Form.Item>

    <Form.Item name="remember" valuePropName="checked" wrapperCol={{ offset: 8, span: 16 }}>
      <Checkbox>Remember me</Checkbox>
    </Form.Item>

    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
      <Button type="primary" htmlType="submit">
        Submit
      </Button>
    </Form.Item>
  </Form>
);

export default App;

----------------------------------------

TITLE: Using Modal Confirmation with Promise Support - Ant Design
DESCRIPTION: Demonstrates how to implement a confirmation dialog using Modal.confirm() where onCancel and onOk handlers return promises to control dialog closing timing. This pattern allows for asynchronous operations before closing the dialog.

LANGUAGE: javascript
CODE:
Modal.confirm({
  onOk: () => {
    return new Promise((resolve) => {
      // Async operation
      resolve();
    });
  },
  onCancel: () => {
    return new Promise((resolve) => {
      // Async operation
      resolve();
    });
  }
})

----------------------------------------

TITLE: Dynamically Switching Themes in Ant Design
DESCRIPTION: Shows how to dynamically switch themes using ConfigProvider and ColorPicker. It demonstrates changing the primary color at runtime and applying it to components.

LANGUAGE: tsx
CODE:
import { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';
import React from 'react';

const App: React.FC = () => {
  const [primary, setPrimary] = React.useState('#1677ff');

  return (
    <>
      <ColorPicker showText value={primary} onChange={(color) => setPrimary(color.toHexString())} />
      <Divider />
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: primary,
          },
        }}
      >
        <Space>
          <Input placeholder="Please Input" />
          <Button type="primary">Submit</Button>
        </Space>
      </ConfigProvider>
    </>
  );
}

export default App;

----------------------------------------

TITLE: Installing Ant Design with npm
DESCRIPTION: Command to install the Ant Design library using npm package manager.

LANGUAGE: bash
CODE:
npm install antd

----------------------------------------

TITLE: Implementing Disabled DatePicker and RangePicker in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to create disabled DatePicker and RangePicker components in Ant Design. It shows both fully disabled components and how to selectively disable one input in a RangePicker using an array.

LANGUAGE: JSX
CODE:
import { DatePicker, Space } from 'antd';

const { RangePicker } = DatePicker;

const App = () => (
  <Space direction="vertical" size={12}>
    <DatePicker disabled />
    <DatePicker picker="month" disabled />
    <RangePicker disabled />
    <RangePicker disabled={[false, true]} />
  </Space>
);

export default App;

----------------------------------------

TITLE: Form.useForm Hook Usage
DESCRIPTION: Demonstrates how to use the Form.useForm hook to create a form instance

LANGUAGE: tsx
CODE:
const Demo = () => {
  const [form] = Form.useForm();

  return (
    <Form form={form}>
      {/* Form fields */}
    </Form>
  );
};

----------------------------------------

TITLE: Implementing Server-side Data Fetching and Sorting with Ant Design Table in React
DESCRIPTION: This code snippet demonstrates how to create a table component that fetches data from a server, implements server-side filtering and sorting, and preserves selected row keys. It uses the Ant Design Table component and the randomuser.me API for mock data.

LANGUAGE: jsx
CODE:
import { Table } from 'antd';
import { useState, useEffect } from 'react';

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
    sorter: true,
    render: (name) => `${name.first} ${name.last}`,
    width: '20%',
  },
  {
    title: 'Gender',
    dataIndex: 'gender',
    filters: [
      { text: 'Male', value: 'male' },
      { text: 'Female', value: 'female' },
    ],
    width: '20%',
  },
  {
    title: 'Email',
    dataIndex: 'email',
  },
];

const getRandomuserParams = (params) => ({
  results: params.pagination?.pageSize,
  page: params.pagination?.current,
  ...params,
});

const App = () => {
  const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [tableParams, setTableParams] = useState({
    pagination: {
      current: 1,
      pageSize: 10,
    },
  });

  const fetchData = () => {
    setLoading(true);
    fetch(`https://randomuser.me/api?${qs.stringify(getRandomuserParams(tableParams))}`)
      .then((res) => res.json())
      .then(({ results }) => {
        setData(results);
        setLoading(false);
        setTableParams({
          ...tableParams,
          pagination: {
            ...tableParams.pagination,
            total: 200,
          },
        });
      });
  };

  useEffect(() => {
    fetchData();
  }, [JSON.stringify(tableParams)]);

  const handleTableChange = (pagination, filters, sorter) => {
    setTableParams({
      pagination,
      filters,
      ...sorter,
    });
  };

  return (
    <Table
      columns={columns}
      rowKey={(record) => record.login.uuid}
      dataSource={data}
      pagination={tableParams.pagination}
      loading={loading}
      onChange={handleTableChange}
    />
  );
};

export default App;

----------------------------------------

TITLE: Global App Usage with Redux Integration
DESCRIPTION: Shows how to set up global instances of message, notification, and modal functions for use in Redux scenarios.

LANGUAGE: tsx
CODE:
// Entry component
import { App } from 'antd';
import type { MessageInstance } from 'antd/es/message/interface';
import type { ModalStaticFunctions } from 'antd/es/modal/confirm';
import type { NotificationInstance } from 'antd/es/notification/interface';

let message: MessageInstance;
let notification: NotificationInstance;
let modal: Omit<ModalStaticFunctions, 'warn'>;

export default () => {
  const staticFunction = App.useApp();
  message = staticFunction.message;
  modal = staticFunction.modal;
  notification = staticFunction.notification;
  return null;
};

export { message, notification, modal };

LANGUAGE: tsx
CODE:
// sub page
import React from 'react';
import { Button, Space } from 'antd';

import { message } from './store';

export default () => {
  const showMessage = () => {
    message.success('Success!');
  };

  return (
    <Space>
      <Button type="primary" onClick={showMessage}>
        Open message
      </Button>
    </Space>
  );
};

----------------------------------------

TITLE: Installing Ant Design Package
DESCRIPTION: Different package manager commands to install the Ant Design library. Shows installation options using npm, yarn, pnpm, and bun.

LANGUAGE: bash
CODE:
npm install antd --save

LANGUAGE: bash
CODE:
yarn add antd

LANGUAGE: bash
CODE:
pnpm add antd

LANGUAGE: bash
CODE:
bun add antd

----------------------------------------

TITLE: Implementing Inline Styles with @ant-design/cssinjs
DESCRIPTION: Demonstrates how to extract and inline Ant Design styles during server-side rendering using @ant-design/cssinjs. This approach embeds styles directly in the HTML head.

LANGUAGE: tsx
CODE:
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/es/Cache';
import { renderToString } from 'react-dom/server';

const App = () => {
  const cache = React.useMemo<Entity>(() => createCache(), []);
  const html = renderToString(
    <StyleProvider cache={cache}>
      <MyApp />
    </StyleProvider>,
  );

  const styleText = extractStyle(cache);

  return `
    <!DOCTYPE html>
    <html>
      <head>
        ${styleText}
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
};

export default App;

----------------------------------------

TITLE: Rendering Closable Alert in React
DESCRIPTION: This code snippet demonstrates how to use the Alert component from Ant Design with the closable prop set to true. It creates a closable warning alert with a custom message.

LANGUAGE: JSX
CODE:
import { Alert } from 'antd';

ReactDOM.render(
  <Alert
    message="Warning Text Warning Text Warning TextW arning Text Warning Text Warning TextWarning Text"
    type="warning"
    closable
  />,
  mountNode,
);

----------------------------------------

TITLE: ConfigProvider with CSP Support
DESCRIPTION: Example demonstrating how to configure Content Security Policy support with ConfigProvider using a nonce value.

LANGUAGE: tsx
CODE:
<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>
  <Button>My Button</Button>
</ConfigProvider>

----------------------------------------

TITLE: Defining Custom Ant Design Theme
DESCRIPTION: Configuration of a custom theme for Ant Design components.

LANGUAGE: ts
CODE:
import type { ThemeConfig } from 'antd';

const theme: ThemeConfig = {
  token: {
    fontSize: 16,
    colorPrimary: '#52c41a',
  },
};

export default theme;

----------------------------------------

TITLE: Implementing Products Page with React Query
DESCRIPTION: TypeScript React component for the products page, using react-query for data fetching and mutation.

LANGUAGE: tsx
CODE:
import React from 'react';
import axios from 'axios';
import { useMutation, useQuery, useQueryClient } from 'umi';

import styles from './products.less';
import ProductList from '@/components/ProductList';

export default function Page() {
  const queryClient = useQueryClient();
  const productsQuery = useQuery(['products'], {
    queryFn() {
      return axios.get('/api/products').then((res) => res.data);
    },
  });
  const productsDeleteMutation = useMutation({
    mutationFn(id: string) {
      return axios.delete(`/api/products/${id}`);
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
  if (productsQuery.isLoading) return null;
  return (
    <div>
      <h1 className={styles.title}>Page products</h1>
      <ProductList
        products={productsQuery.data.data}
        onDelete={(id) => {
          productsDeleteMutation.mutate(id);
        }}
      />
    </div>
  );
}

----------------------------------------

TITLE: Implementing Advanced Aggregated Field Component in React and ant-design
DESCRIPTION: This snippet showcases a more advanced implementation of an aggregated field component. It uses getValueProps, getValueFromEvent, and transform to handle data transformation between FormStore and the UI component. It also includes examples of using this component with Cascader and DatePicker.RangePicker.

LANGUAGE: tsx
CODE:
import React from 'react';
import type { FormItemProps } from 'antd';
import { Button, Cascader, DatePicker, Form as OriginForm } from 'antd';
import dayjs from 'dayjs';

interface AggregateProps<V = any> extends FormItemProps<V> {
  names?: FormItemProps<V>['name'][];
}

const Aggregate = (props: AggregateProps) => {
  const form = OriginForm.useFormInstance();

  const { names = [], rules = [], ...rest } = props;
  const [firstName, ...resetNames] = names;

  return (
    <>
      <OriginForm.Item
        name={firstName}
        getValueProps={() => {
          const value = names.map((name) => form.getFieldValue(name));
          if (value.every((v) => v === undefined)) {
            return undefined;
          }
          return { value };
        }}
        getValueFromEvent={(values) => {
          const fieldData = names.map((name, index) => ({ name, value: values?.[index] }));
          form.setFields(fieldData);
          return values?.[0];
        }}
        rules={rules.map((rule) => {
          if (typeof rule === 'object' && rule) {
            return {
              ...rule,
              transform: () => {
                const values = names.map((name) => form.getFieldValue(name));
                return values;
              },
            };
          }
          return rule;
        })}
        {...rest}
      />
      {resetNames.map((name) => (
        <OriginForm.Item key={name?.toString()} name={name} noStyle />
      ))}
    </>
  );
};

const data = {
  province: 'Beijing',
  city: 'Haidian',
  startTime: dayjs(),
  endTime: dayjs().add(1, 'month'),
};

const options = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [{ value: 'hangzhou', label: 'Hangzhou' }],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [{ value: 'nanjing', label: 'Nanjing' }],
  },
];

const Form = Object.assign(OriginForm, { Aggregate });

export default () => (
  <Form initialValues={data} onFinish={(value) => console.log(value)}>
    <Form.Aggregate label="Address" names={['province', 'city']} rules={[{ required: true }]}>
      <Cascader options={options} placeholder="Please select" />
    </Form.Aggregate>

    <Form.Item label="Address (use Default)" name="defaultAddress">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>

    <Form.Aggregate label="Date" names={['startTime', 'endTime']}>
      <DatePicker.RangePicker />
    </Form.Aggregate>

    <Form.Item>
      <Button htmlType="submit" type="primary">
        Submit
      </Button>
    </Form.Item>
  </Form>
);

----------------------------------------

TITLE: Generating Static CSS for Ant Design Components
DESCRIPTION: Script to extract and generate static CSS files from Ant Design components, supporting both default and custom themes.

LANGUAGE: tsx
CODE:
import fs from 'fs';
import { extractStyle } from '@ant-design/static-style-extract';

const outputPath = './public/antd.min.css';

const css = extractStyle();

fs.writeFileSync(outputPath, css);

----------------------------------------

TITLE: Configuring Ant Design with Next.js Pages Router
DESCRIPTION: Custom Document implementation to extract and inject Ant Design styles for Next.js Pages Router.

LANGUAGE: tsx
CODE:
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import Document, { Head, Html, Main, NextScript } from 'next/document';
import type { DocumentContext } from 'next/document';

const MyDocument = () => (
  <Html lang="en">
    <Head />
    <body>
      <Main />
      <NextScript />
    </body>
  </Html>
);

MyDocument.getInitialProps = async (ctx: DocumentContext) => {
  const cache = createCache();
  const originalRenderPage = ctx.renderPage;
  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => (
        <StyleProvider cache={cache}>
          <App {...props} />
        </StyleProvider>
      ),
    });

  const initialProps = await Document.getInitialProps(ctx);
  const style = extractStyle(cache, true);
  return {
    ...initialProps,
    styles: (
      <>
        {initialProps.styles}
        <style dangerouslySetInnerHTML={{ __html: style }} />
      </>
    ),
  };
};

export default MyDocument;

----------------------------------------

TITLE: Form.Item.useStatus Hook Usage
DESCRIPTION: Demonstrates how to use Form.Item.useStatus to get validation status and error messages

LANGUAGE: tsx
CODE:
const CustomInput = ({ value, onChange }) => {
  const { status, errors } = Form.Item.useStatus();
  return (
    <input
      value={value}
      onChange={onChange}
      className={`custom-input-${status}`}
      placeholder={(errors.length && errors[0]) || ''}
    />
  );
};

export default () => (
  <Form>
    <Form.Item name="username">
      <CustomInput />
    </Form.Item>
  </Form>
);

----------------------------------------

TITLE: App Configuration with Theme Provider
DESCRIPTION: Setup of the Next.js _app file with Ant Design ConfigProvider and custom theme.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';
import type { AppProps } from 'next/app';

import theme from './theme/themeConfig';

const App = ({ Component, pageProps }: AppProps) => (
  <ConfigProvider theme={theme}>
    <Component {...pageProps} />
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Configuring SubMenu Themes in Ant Design Menu Documentation
DESCRIPTION: Documentation showing how to use the theme property to set different theme colors for root and sub-menus in Ant Design. The example demonstrates setting a dark theme for root menu items and light theme for submenus.

LANGUAGE: markdown
CODE:
## zh-CN

你可以通过 `theme` 属性来设置 SubMenu 的主题从而达到不同目录树下不同主题色的效果。该例子默认为根目录深色，子目录浅色效果。

## en-US

You can config SubMenu theme with `theme` prop to enable different theme color effect. This sample is dark for root and light for SubMenu.

----------------------------------------

TITLE: Implementing Dynamic Date Picker Type Selection in React with Ant Design
DESCRIPTION: This snippet defines a React component that allows users to switch between different date picker types using a select dropdown. It utilizes Ant Design's Select and DatePicker components, demonstrating how to dynamically render different picker types based on user selection.

LANGUAGE: typescript
CODE:
import React, { useState } from 'react';
import { Select, DatePicker } from 'antd';
import type { DatePickerProps, TimePickerProps } from 'antd';

type PickerType = 'time' | 'date' | 'week' | 'month' | 'quarter' | 'year';

const { Option } = Select;

const PickerWithType = ({ type, onChange }: { type: PickerType; onChange: TimePickerProps['onChange'] | DatePickerProps['onChange'] }) => {
  if (type === 'time') return <DatePicker picker={type} onChange={onChange} />;
  if (type === 'date') return <DatePicker onChange={onChange} />;
  return <DatePicker picker={type} onChange={onChange} />;
};

const App: React.FC = () => {
  const [type, setType] = useState<PickerType>('time');

  return (
    <>
      <Select value={type} onChange={setType}>
        <Option value="time">Time</Option>
        <Option value="date">Date</Option>
        <Option value="week">Week</Option>
        <Option value="month">Month</Option>
        <Option value="quarter">Quarter</Option>
        <Option value="year">Year</Option>
      </Select>
      <PickerWithType type={type} onChange={(value) => console.log(value)} />
    </>
  );
};

export default App;

----------------------------------------

TITLE: Implementing useRenderTimes Hook for Debugging React Renders
DESCRIPTION: A custom hook that tracks component render times and displays them in React Dev Tools. It uses useDebugValue to show render count and changed prop keys.

LANGUAGE: tsx
CODE:
import React from 'react';

function useRenderTimes<T>(props: T) {
  // Render times
  const timesRef = React.useRef(0);
  timesRef.current += 1;

  // Cache for prev props
  const cacheProps = React.useRef(props);
  const changedPropKeys = getDiff(props, cacheProps.current); // Some compare logic

  React.useDebugValue(timesRef.current);
  React.useDebugValue(changedPropKeys);

  cacheProps.current = props;
}

export default process.env.NODE_ENV !== 'production' ? useRenderTimes : () => {};

----------------------------------------

TITLE: Configuring CSS Variables in React 18 with Ant Design
DESCRIPTION: Basic configuration example for enabling CSS variables in Ant Design using ConfigProvider with React 18. CSS variables mode enables shared styles across different themes and improved theme switching performance.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ cssVar: true }}>
  <App />
</ConfigProvider>

----------------------------------------

TITLE: Customizing Feedback Icons in Ant Design Forms using JSX
DESCRIPTION: This snippet demonstrates two methods for customizing feedback icons in Ant Design forms. The first method uses the hasFeedback prop with an icons object, while the second method passes a feedbackIcons prop to the Form component. Note that the Form.Item must have the hasFeedback attribute for these customizations to take effect.

LANGUAGE: JSX
CODE:
hasFeedback={{ icons: ... }}

LANGUAGE: JSX
CODE:
<Form feedbackIcons={icons}>

----------------------------------------

TITLE: Using Icon Component for Custom SVG Icons in React
DESCRIPTION: Demonstrates how to create a reusable custom icon component using Ant Design's Icon component. The component property allows passing a custom React component that renders to an SVG element, enabling flexible icon customization.



----------------------------------------

TITLE: Table Usage with TypeScript
DESCRIPTION: Shows how to use the Table component with TypeScript, including type definitions for columns and data source.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Table } from 'antd';
import type { TableColumnsType } from 'antd';

interface User {
  key: number;
  name: string;
}

const columns: TableColumnsType<User> = [
  {
    key: 'name',
    title: 'Name',
    dataIndex: 'name',
  },
];

const data: User[] = [
  {
    key: 0,
    name: 'Jack',
  },
];

const Demo: React.FC = () => (
  <>
    <Table<User> columns={columns} dataSource={data} />
    {/* 使用 JSX 风格的 API */}
    <Table<User> dataSource={data}>
      <Table.Column<User> key="name" title="Name" dataIndex="name" />
    </Table>
  </>
);

export default Demo;

----------------------------------------

TITLE: Implementing Breadcrumb Component in React
DESCRIPTION: Shows different ways to implement the Breadcrumb component, including the recommended approach for version 5.3.0 and above, and legacy approaches for earlier versions.

LANGUAGE: jsx
CODE:
// >=5.3.0 可用，推荐的写法 ✅
return <Breadcrumb items={[{ title: 'sample' }]} />;

// <5.3.0 可用，>=5.3.0 时不推荐 🙅🏻‍♀️
return (
  <Breadcrumb>
    <Breadcrumb.Item>sample</Breadcrumb.Item>
  </Breadcrumb>
);

// 或

return <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;

----------------------------------------

TITLE: Consuming Design Tokens with useToken Hook
DESCRIPTION: Demonstrates how to use the useToken hook to consume Design Tokens in custom components. It shows applying token values to inline styles.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, theme } from 'antd';

const { useToken } = theme;

const App: React.FC = () => {
  const { token } = useToken();

  return (
    <div
      style={{
        backgroundColor: token.colorPrimaryBg,
        padding: token.padding,
        borderRadius: token.borderRadius,
        color: token.colorPrimaryText,
        fontSize: token.fontSize,
      }}
    >
      Consume Design Token
    </div>
  );
};

export default App;

----------------------------------------

TITLE: Ant Design Form Validation Properties
DESCRIPTION: Documentation of three key properties for form validation in Ant Design: validateStatus for setting validation state, hasFeedback for adding feedback icons, and help for displaying validation messages. These can be used independently without requiring a Form component.

LANGUAGE: markdown
CODE:
1. `validateStatus`: validate status of form components which could be 'success', 'warning', 'error', 'validating'.
2. `hasFeedback`: display feed icon of input control
3. `help`: display validate message.

----------------------------------------

TITLE: Implementing Flexible Layout with Checkbox.Group and Grid in React
DESCRIPTION: This code snippet demonstrates how to create a flexible layout using Checkbox.Group with embedded Checkboxes and Grid components from the Ant Design library. It allows for complex arrangements of checkboxes within a grid structure.

LANGUAGE: jsx
CODE:
import { Checkbox, Row, Col } from 'antd';

const onChange = (checkedValues) => {
  console.log('checked = ', checkedValues);
};

const App = () => (
  <Checkbox.Group style={{ width: '100%' }} onChange={onChange}>
    <Row>
      <Col span={8}>
        <Checkbox value="A">A</Checkbox>
      </Col>
      <Col span={8}>
        <Checkbox value="B">B</Checkbox>
      </Col>
      <Col span={8}>
        <Checkbox value="C">C</Checkbox>
      </Col>
      <Col span={8}>
        <Checkbox value="D">D</Checkbox>
      </Col>
      <Col span={8}>
        <Checkbox value="E">E</Checkbox>
      </Col>
    </Row>
  </Checkbox.Group>
);

export default App;

----------------------------------------

TITLE: Steps Component API Documentation
DESCRIPTION: API documentation for the Steps component showing properties, types, and descriptions. Includes both regular Steps and inline Steps variants.

LANGUAGE: markdown
CODE:
### Steps

| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| className | Additional class to Steps | string | - |  |
| current | To set the current step, counting from 0 | number | 0 |  |
| direction | To specify the direction, horizontal or vertical | string | horizontal |  |
| initial | Set the initial step, counting from 0 | number | 0 |  |
| labelPlacement | Place title and description direction | string | horizontal |  |
| percent | Progress circle percentage | number | - | 4.5.0 |

----------------------------------------

TITLE: Implementing Searchable Select Component in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a Select component with search functionality using Ant Design in a React application. It showcases the use of the Select component with options that can be searched when the dropdown is expanded.

LANGUAGE: jsx
CODE:
import { Select } from 'antd';
import React from 'react';

const { Option } = Select;

const handleChange = (value) => {
  console.log(`selected ${value}`);
};

const App = () => (
  <Select
    showSearch
    style={{ width: 200 }}
    placeholder="Search to Select"
    optionFilterProp="children"
    onChange={handleChange}
    filterOption={(input, option) => (option?.label ?? '').includes(input)}
    filterSort={(optionA, optionB) =>
      (optionA?.label ?? '')
        .toLowerCase()
        .localeCompare((optionB?.label ?? '').toLowerCase())
    }
    options={[
      {
        value: '1',
        label: 'Not Identified',
      },
      {
        value: '2',
        label: 'Closed',
      },
      {
        value: '3',
        label: 'Communicated',
      },
      {
        value: '4',
        label: 'Identified',
      },
      {
        value: '5',
        label: 'Resolved',
      },
      {
        value: '6',
        label: 'Cancelled',
      },
    ]}
  />
);

export default App;

----------------------------------------

TITLE: Basic App Component Usage in React with ant-design
DESCRIPTION: Demonstrates basic usage of App component to provide message, notification and modal functionality through useApp hook. Component must be wrapped in App context to access these features.

LANGUAGE: tsx
CODE:
import React from 'react';
import { App } from 'antd';

const MyPage: React.FC = () => {
  const { message, notification, modal } = App.useApp();
  message.success('Good!');
  notification.info({ message: 'Good' });
  modal.warning({ title: 'Good' });
  // ....
  // other message, notification, modal static function
  return <div>Hello word</div>;
};

const MyApp: React.FC = () => (
  <App>
    <MyPage />
  </App>
);

export default MyApp;

----------------------------------------

TITLE: Basic ConfigProvider Usage - React/TypeScript
DESCRIPTION: Example of wrapping an application with ConfigProvider to enable RTL (right-to-left) direction globally.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

// ...
const Demo: React.FC = () => (
  <ConfigProvider direction="rtl">
    <App />
  </ConfigProvider>
);

export default Demo;

----------------------------------------

TITLE: Menu Component Usage Examples - TypeScript/React
DESCRIPTION: Code examples demonstrating various Menu implementations including horizontal navigation, inline menu, collapsed menu, themed menus, and vertical menu layouts.

LANGUAGE: tsx
CODE:
const groupItem = {
  type: 'group', // Must have
  label: 'My Group',
  children: [],
};

LANGUAGE: tsx
CODE:
const dividerItem = {
  type: 'divider', // Must have
};

LANGUAGE: jsx
CODE:
<div style={{ flex }}>
  <div style={{ ... }}>Some Content</div>
  <Menu style={{ minWidth: 0, flex: "auto" }} />
</div>

----------------------------------------

TITLE: Basic Table Implementation in JSX
DESCRIPTION: Shows how to create a basic table with data source and column definitions. Demonstrates setting up key table properties like dataSource and columns.

LANGUAGE: jsx
CODE:
const dataSource = [
  {
    key: '1',
    name: 'Mike',
    age: 32,
    address: '10 Downing Street',
  },
  {
    key: '2',
    name: 'John',
    age: 42,
    address: '10 Downing Street',
  },
];

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
  {
    title: 'Age',
    dataIndex: 'age',
    key: 'age',
  },
  {
    title: 'Address',
    dataIndex: 'address',
    key: 'address',
  },
];

<Table dataSource={dataSource} columns={columns} />;

----------------------------------------

TITLE: Setting up TSConfig for Ant Design SSR
DESCRIPTION: Configuration file for TypeScript settings specific to server-side rendering with Node.js environment.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strictNullChecks": true,
    "module": "NodeNext",
    "jsx": "react",
    "esModuleInterop": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}

----------------------------------------

TITLE: Implementing Rem Adaptation with px2remTransformer in React
DESCRIPTION: This code demonstrates how to use the px2remTransformer to convert pixel units to rem units, enabling responsive and adaptive layouts in Ant Design applications.

LANGUAGE: tsx
CODE:
import { px2remTransformer, StyleProvider } from '@ant-design/cssinjs';

const px2rem = px2remTransformer({
  rootValue: 32, // 32px = 1rem; @default 16
});

export default () => (
  <StyleProvider transformers={[px2rem]}>
    <MyApp />
  </StyleProvider>
);

----------------------------------------

TITLE: Styling Input Group Elements in CSS for Ant Design
DESCRIPTION: This CSS snippet provides styling for input group elements in Ant Design. It includes styles for split inputs, right-aligned inputs, and RTL (right-to-left) input variations. The styles focus on background color, border widths, and hover/focus states.

LANGUAGE: CSS
CODE:
.site-input-group-wrapper .site-input-split {
  background-color: #fff !important;
}

.site-input-group-wrapper .site-input-right {
  border-left-width: 0;
}

.site-input-group-wrapper .site-input-right:hover,
.site-input-group-wrapper .site-input-right:focus {
  border-left-width: 1px;
}

.site-input-group-wrapper .ant-input-rtl.site-input-right {
  border-right-width: 0;
}

.site-input-group-wrapper .ant-input-rtl.site-input-right:hover,
.site-input-group-wrapper .ant-input-rtl.site-input-right:focus {
  border-right-width: 1px;
}

----------------------------------------

TITLE: Using Message Context - TypeScript/React
DESCRIPTION: Example showing how to access context information in Message component using useMessage hook with proper context providers.

LANGUAGE: tsx
CODE:
const [api, contextHolder] = message.useMessage();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);

----------------------------------------

TITLE: Form.List Usage for Dynamic Form Items
DESCRIPTION: Shows how to use Form.List to create dynamic form fields

LANGUAGE: tsx
CODE:
<Form.List>
  {(fields) => (
    <div>
      {fields.map((field) => (
        <Form.Item {...field}>
          <Input />
        </Form.Item>
      ))}
    </div>
  )}
</Form.List>

----------------------------------------

TITLE: App Router Setup with AntdRegistry
DESCRIPTION: Configuration for Next.js App Router to handle Ant Design styles using @ant-design/nextjs-registry.

LANGUAGE: tsx
CODE:
import React from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';

const RootLayout = ({ children }: React.PropsWithChildren) => (
  <html lang="en">
    <body>
      <AntdRegistry>{children}</AntdRegistry>
    </body>
  </html>
);

export default RootLayout;

----------------------------------------

TITLE: Configuring StyleProvider for :where Selector Compatibility in React
DESCRIPTION: This snippet demonstrates how to configure StyleProvider to disable the default lowering of specificity using the :where selector, which improves compatibility with older browsers.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';

// Config `hashPriority` to `high` instead of default `low`
// Which will remove `:where` wrapper
export default () => (
  <StyleProvider hashPriority="high">
    <MyApp />
  </StyleProvider>
);

----------------------------------------

TITLE: Basic App Component Usage in React with Ant Design
DESCRIPTION: Demonstrates basic usage of App component to provide context for message, notification, and modal static methods. Shows how to wrap components and consume the context using App.useApp hook.

LANGUAGE: tsx
CODE:
import React from 'react';
import { App } from 'antd';

const MyPage: React.FC = () => {
  const { message, notification, modal } = App.useApp();
  message.success('Good!');
  notification.info({ message: 'Good' });
  modal.warning({ title: 'Good' });
  // ....
  // other message, notification, modal static function
  return <div>Hello word</div>;
};

const MyApp: React.FC = () => (
  <App>
    <MyPage />
  </App>
);

export default MyApp;

----------------------------------------

TITLE: Configuring Tree Table Display in Ant Design
DESCRIPTION: Demonstrates how to configure a Table component to display hierarchical data. Shows usage of childrenColumnName prop for custom children field mapping and indentSize prop for controlling indent width of nested levels.

LANGUAGE: jsx
CODE:
<Table
  childrenColumnName="children"
  indentSize={16}
  dataSource={treeData}
/>

----------------------------------------

TITLE: Implementing Radio.Group Component in React
DESCRIPTION: Demonstrates recommended vs not recommended patterns for implementing Radio.Group component. The recommended approach uses options prop for better maintainability and cleaner code.

LANGUAGE: tsx
CODE:
// 使用 Radio.Group 组件时，推荐的写法 ✅
return (
  <Radio.Group
    value={value}
    options={[
      { value: 1, label: 'A' },
      { value: 2, label: 'B' },
      { value: 3, label: 'C' },
    ]}
  />
);

// 不推荐的写法 🙅🏻‍♀️
return (
  <Radio.Group value={value}>
    <Radio value={1}>A</Radio>
    <Radio value={2}>B</Radio>
    <Radio value={3}>C</Radio>
  </Radio.Group>
);

----------------------------------------

TITLE: Configuring Locale for DatePicker in Ant Design
DESCRIPTION: Example of how to set up localization for the DatePicker component using ConfigProvider and dayjs.

LANGUAGE: jsx
CODE:
import locale from 'antd/locale/zh_CN';
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

<ConfigProvider locale={locale}>
  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />
</ConfigProvider>;

----------------------------------------

TITLE: Implementing Basic Transfer Component in ant-design
DESCRIPTION: Shows core functionality of Transfer component including dataSource configuration, targetKeys management, render functions, and event handling through onChange, onSelectChange, and onScroll callbacks. Essential implementation for data transfer interface.



----------------------------------------

TITLE: Space Component Gap Usage Documentation
DESCRIPTION: Documentation explaining the usage of gap property in Space component. Shows that gap can be set to predefined values (small, middle, large) or customized to control spacing between elements.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `gap` 设置元素之间的间距，预设了 `small`、`middle`、`large` 三种尺寸，也可以自定义间距。

## en-US

Set the `gap` between elements, which has three preset sizes: `small`, `middle`, `large`, You can also customize the gap size.

----------------------------------------

TITLE: Menu Item Group Definition in TypeScript
DESCRIPTION: Example of defining a menu item group structure using TypeScript. Shows how to create a group with label and children properties.

LANGUAGE: typescript
CODE:
const groupItem = {
  type: 'group', // Must have
  label: 'My Group',
  children: [],
};

----------------------------------------

TITLE: Implementing Large Dataset Pagination with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to set up pagination for a large dataset using Ant Design's Table component in a React application. It includes data generation, column definition, and pagination configuration.

LANGUAGE: jsx
CODE:
import { Table } from 'antd';
import React from 'react';

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
    render: (name) => `${name.first} ${name.last}`,
    width: '20%',
  },
  {
    title: 'Gender',
    dataIndex: 'gender',
    width: '20%',
  },
  {
    title: 'Email',
    dataIndex: 'email',
  },
];

const App = () => {
  const [data, setData] = React.useState();
  const [loading, setLoading] = React.useState(false);
  const [tableParams, setTableParams] = React.useState({
    pagination: {
      current: 1,
      pageSize: 10,
    },
  });
  const fetchData = () => {
    setLoading(true);
    fetch(`https://randomuser.me/api?results=${tableParams.pagination.pageSize}`)
      .then((res) => res.json())
      .then(({ results }) => {
        setData(results);
        setLoading(false);
        setTableParams({
          ...tableParams,
          pagination: {
            ...tableParams.pagination,
            total: 200,
          },
        });
      });
  };

  React.useEffect(() => {
    fetchData();
  }, [JSON.stringify(tableParams)]);

  const handleTableChange = (pagination, filters, sorter) => {
    setTableParams({
      pagination,
      filters,
      ...sorter,
    });

    // `dataSource` is useless since `pageSize` changed
    if (pagination.pageSize !== tableParams.pagination?.pageSize) {
      setData([]);
    }
  };

  return (
    <Table
      columns={columns}
      rowKey={(record) => record.login.uuid}
      dataSource={data}
      pagination={tableParams.pagination}
      loading={loading}
      onChange={handleTableChange}
    />
  );
};

export default App;

----------------------------------------

TITLE: Implementing Inline SSR Styles with Ant Design
DESCRIPTION: Example showing how to extract and inline styles during server-side rendering using @ant-design/cssinjs. Creates a cache and extracts styles to be included directly in the HTML head.

LANGUAGE: tsx
CODE:
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/es/Cache';
import { renderToString } from 'react-dom/server';

const App = () => {
  const cache = React.useMemo<Entity>(() => createCache(), []);
  const html = renderToString(
    <StyleProvider cache={cache}>
      <MyApp />
    </StyleProvider>,
  );

  const styleText = extractStyle(cache);

  return `
    <!DOCTYPE html>
    <html>
      <head>
        ${styleText}
      </head>
      <body>
        <div id="root">${html}</div>
      </body>
    </html>
  `;
};

export default App;

----------------------------------------

TITLE: Configuring Typography Copyable Interface - TypeScript
DESCRIPTION: TypeScript interface definition for the copyable property of Typography components, specifying options for custom copy behavior including text, icons, and tooltips.

LANGUAGE: typescript
CODE:
{
  text: string | (() => string | Promise<string>),
  onCopy: function(event),
  icon: ReactNode,
  tooltips: false | [ReactNode, ReactNode],
  format: 'text/plain' | 'text/html',
  tabIndex: number,
}

----------------------------------------

TITLE: Upload Component Type Definition
DESCRIPTION: TypeScript interface showing the Upload component's properties including file handling, display options, and event callbacks.

LANGUAGE: typescript
CODE:
interface UploadProps {
  accept?: string;
  action: string | ((file: File) => Promise<string>);
  beforeUpload?: (file: File, fileList: File[]) => boolean | Promise<File>;
  customRequest?: Function;
  data?: object | ((file: File) => object | Promise<object>);
  defaultFileList?: object[];
  directory?: boolean;
  disabled?: boolean;
  fileList?: UploadFile[];
  headers?: object;
  listType?: 'text' | 'picture' | 'picture-card' | 'picture-circle';
  multiple?: boolean;
  name?: string;
  showUploadList?: boolean | ShowUploadListInterface;
  withCredentials?: boolean;
  onChange?: (info: UploadChangeParam) => void;
  onPreview?: (file: UploadFile) => void;
  onRemove?: (file: UploadFile) => boolean | Promise<boolean>;
}

----------------------------------------

TITLE: Using Modal.useModal Hook with Context Support
DESCRIPTION: Demonstrates how to create modals that can access React context using Modal.useModal hook. The hook returns a contextHolder that enables context reading and supports Promise-based await operations.

LANGUAGE: TypeScript
CODE:
Modal.useModal()

----------------------------------------

TITLE: Importing and Using Ant Design Button in React
DESCRIPTION: React component example showing how to import and use the Button component from Ant Design. This demonstrates basic usage of an antd component in a React application.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

const App: React.FC = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;

----------------------------------------

TITLE: Implementing Custom Render Method for Ant Design v5 with React 19
DESCRIPTION: This code demonstrates how to use the unstableSetRender method to customize the rendering process for Ant Design v5 components when using React 19. It creates a root for each container and handles rendering and unmounting.

LANGUAGE: js
CODE:
import { unstableSetRender } from 'antd';
import { createRoot } from 'react-dom/client';

unstableSetRender((node, container) => {
  container._reactRoot ||= createRoot(container);
  const root = container._reactRoot;
  root.render(node);
  return async () => {
    await new Promise((resolve) => setTimeout(resolve, 0));
    root.unmount();
  };
});

----------------------------------------

TITLE: Basic Select Usage in React
DESCRIPTION: Demonstrates the recommended usage of the Select component after version 5.11.0, using the options prop for better performance.

LANGUAGE: jsx
CODE:
// works when >=5.11.0, recommended ✅
return <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;

// works when <5.11.0, deprecated when >=5.11.0 🙅🏻‍♀️
return (
  <Select onChange={onChange}>
    <Select.Option value="sample">Sample</Select.Option>
  </Select>
);

----------------------------------------

TITLE: Rendering Custom Panel Header Content with Ant Design in JSX
DESCRIPTION: This snippet shows how to use the 'extra' prop of Collapse.Panel to add custom content to the top-right corner of each panel. It demonstrates setting up a Collapse component with two panels, each having a custom button in its header.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Collapse, Select } from 'antd';

const { Panel } = Collapse;
const { Option } = Select;

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const App: React.FC = () => (
  <Collapse
    defaultActiveKey={['1']}
    onChange={(key) => {
      console.log(key);
    }}
  >
    <Panel
      header="This is panel header 1"
      key="1"
      extra={
        <Select defaultValue="lucy" style={{ width: 120 }}>
          <Option value="lucy">Lucy</Option>
        </Select>
      }
    >
      <p>{text}</p>
    </Panel>
    <Panel
      header="This is panel header 2"
      key="2"
      extra={<button type="button">Click me!</button>}
    >
      <p>{text}</p>
    </Panel>
  </Collapse>
);

export default App;

----------------------------------------

TITLE: Basic Breadcrumb Usage in React
DESCRIPTION: Demonstrates the most basic usage of the Breadcrumb component. It's used when users need to understand their current position in the system hierarchy or navigate upwards.

LANGUAGE: tsx
CODE:
src="./demo/basic"

----------------------------------------

TITLE: Using Form.useForm for Form Data Interaction in React
DESCRIPTION: This snippet demonstrates how to use Form.useForm to interact with form data in a React functional component. It's part of the ant-design library and allows for dynamic form manipulation.

LANGUAGE: JavaScript
CODE:
Form.useForm()

----------------------------------------

TITLE: Implementing Draggable Modal in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a custom modal dialog with draggable functionality using React, Ant Design, and react-draggable. It includes a button to trigger the modal and custom rendering of the modal content with a draggable header.

LANGUAGE: jsx
CODE:
import { Button, Modal } from 'antd';
import React, { useState } from 'react';
import Draggable from 'react-draggable';

const App: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [disabled, setDisabled] = useState(false);
  const [bounds, setBounds] = useState({ left: 0, top: 0, bottom: 0, right: 0 });
  const draggleRef = React.useRef<HTMLDivElement>(null);

  const showModal = () => {
    setOpen(true);
  };

  const handleOk = (e: React.MouseEvent<HTMLElement>) => {
    console.log(e);
    setOpen(false);
  };

  const handleCancel = (e: React.MouseEvent<HTMLElement>) => {
    console.log(e);
    setOpen(false);
  };

  const onStart = (_event: DraggableEvent, uiData: DraggableData) => {
    const { clientWidth, clientHeight } = window.document.documentElement;
    const targetRect = draggleRef.current?.getBoundingClientRect();
    if (!targetRect) {
      return;
    }
    setBounds({
      left: -targetRect.left + uiData.x,
      right: clientWidth - (targetRect.right - uiData.x),
      top: -targetRect.top + uiData.y,
      bottom: clientHeight - (targetRect.bottom - uiData.y),
    });
  };

  return (
    <>
      <Button onClick={showModal}>Open Draggable Modal</Button>
      <Modal
        title={
          <div
            style={{
              width: '100%',
              cursor: 'move',
            }}
            onMouseOver={() => {
              if (disabled) {
                setDisabled(false);
              }
            }}
            onMouseOut={() => {
              setDisabled(true);
            }}
            // fix eslintjsx-a11y/mouse-events-have-key-events
            // https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/docs/rules/mouse-events-have-key-events.md
            onFocus={() => {}}
            onBlur={() => {}}
            // end
          >
            Draggable Modal
          </div>
        }
        open={open}
        onOk={handleOk}
        onCancel={handleCancel}
        modalRender={(modal) => (
          <Draggable
            disabled={disabled}
            bounds={bounds}
            onStart={(event, uiData) => onStart(event, uiData)}
          >
            <div ref={draggleRef}>{modal}</div>
          </Draggable>
        )}
      >
        <p>Just don't learn to fly under water.</p>
        <p>Just don't learn to fly under water.</p>
        <p>Just don't learn to fly under water.</p>
      </Modal>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Tree Component Usage Documentation - Ant Design
DESCRIPTION: Multilingual documentation showing basic Tree component features. Demonstrates checkable nodes, selection, disabled state, and default expanded keys functionality in both Chinese and English.

LANGUAGE: markdown
CODE:
## zh-CN

最简单的用法，展示可勾选，可选中，禁用，默认展开等功能。

## en-US

The most basic usage, tell you how to use checkable, selectable, disabled, defaultExpandKeys, and etc.

----------------------------------------

TITLE: Initializing Select Component with Options in React
DESCRIPTION: Example of initializing a Select component with options using the recommended syntax in ant-design version 5.11.0 and later. This approach offers better performance and easier data organization.

LANGUAGE: jsx
CODE:
return <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;

----------------------------------------

TITLE: ConfigProvider Static Configuration
DESCRIPTION: Example showing how to configure static settings for Modal, Message and Notification components using ConfigProvider.config().

LANGUAGE: tsx
CODE:
ConfigProvider.config({
  // 5.13.0+
  holderRender: (children) => (
    <ConfigProvider
      prefixCls="ant"
      iconPrefixCls="anticon"
      theme={{ token: { colorPrimary: 'red' } }}
    >
      {children}
    </ConfigProvider>
  ),
});

----------------------------------------

TITLE: Basic Table Component Type Usage in TypeScript
DESCRIPTION: Demonstrates how to use basic type definitions exported by antd for Table component configuration.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Table, type TableColumnsType } from 'antd';

const columns: TableColumnsType = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
];

export default () => <Table columns={columns} />;

----------------------------------------

TITLE: Three Column Grid Search Form Documentation
DESCRIPTION: Documentation for implementing a three-column grid layout search form. The layout is specifically designed for advanced data table searching functionality, with notes about the need for custom styling due to variable label lengths.

LANGUAGE: markdown
CODE:
## zh-CN

三列栅格式的表单排列方式，常用于数据表格的高级搜索。

有部分定制的样式代码，由于输入标签长度不确定，需要根据具体情况自行调整。

> 🛎️ 想要 3 分钟实现？ 试试 ProForm 的[查询表单](https://procomponents.ant.design/components/form#%E6%9F%A5%E8%AF%A2%E7%AD%9B%E9%80%89)！

## en-US

Three columns layout is often used for advanced searching of data table.

Because the width of label is not fixed, you may need to adjust it by customizing its style.

----------------------------------------

TITLE: Using Notification with Context in React
DESCRIPTION: Demonstrates how to use the useNotification hook to create a notification API that can access React context. This is useful when you need to access ConfigProvider settings or other context information.

LANGUAGE: tsx
CODE:
const [api, contextHolder] = notification.useNotification();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}
    </Context2.Provider>
  </Context1.Provider>
);

----------------------------------------

TITLE: Demonstrating Basic Alert Content Display in TSX
DESCRIPTION: This code demonstrates how to display alert content, optionally including a title. It showcases the basic usage of the Alert component for presenting information.

LANGUAGE: TSX
CODE:
src="./design/demo/content"

----------------------------------------

TITLE: Configuring Component Styles with ConfigProvider in React
DESCRIPTION: This snippet demonstrates how to use ConfigProvider to apply custom classNames to multiple Ant Design components. It allows for extending the theme by adding custom styles to specific components.

LANGUAGE: tsx
CODE:
<ConfigProvider
  button={{ className: 'my-button' }}
  checkbox={{ className: 'my-checkbox' }}
  divider={{ className: 'my-divider' }}
/>

----------------------------------------

TITLE: Adding Interactive Actions to Alerts in TSX
DESCRIPTION: This code exemplifies how to add interactive elements to alerts, such as close buttons, expand/collapse functionality, or other custom actions. It showcases the flexibility of the Alert component in handling user interactions.

LANGUAGE: TSX
CODE:
src="./design/demo/action"

----------------------------------------

TITLE: Basic Table Usage in JSX
DESCRIPTION: Demonstrates how to create a basic table with data source and columns configuration.

LANGUAGE: jsx
CODE:
const dataSource = [
  {
    key: '1',
    name: '胡彦斌',
    age: 32,
    address: '西湖区湖底公园1号',
  },
  {
    key: '2',
    name: '胡彦祖',
    age: 42,
    address: '西湖区湖底公园1号',
  },
];

const columns = [
  {
    title: '姓名',
    dataIndex: 'name',
    key: 'name',
  },
  {
    title: '年龄',
    dataIndex: 'age',
    key: 'age',
  },
  {
    title: '住址',
    dataIndex: 'address',
    key: 'address',
  },
];

<Table dataSource={dataSource} columns={columns} />;

----------------------------------------

TITLE: Demonstrating Fullscreen Loading Property Usage
DESCRIPTION: Example showing how to implement a fullscreen loading overlay with a centered spinner. The fullscreen property creates a semi-transparent overlay that covers the entire page with a loading indicator in the center.

LANGUAGE: markdown
CODE:
## zh-CN

`fullscreen` 属性非常适合创建流畅的页面加载器。它添加了半透明覆盖层，并在其中心放置了一个旋转加载符号。

## en-US

The `fullscreen` mode is perfect for creating page loaders. It adds a dimmed overlay with a centered spinner.

----------------------------------------

TITLE: Importing Space Component in TypeScript
DESCRIPTION: Example of importing and using the Space component in a TypeScript React application. It demonstrates basic usage with multiple child elements.

LANGUAGE: typescript
CODE:
<code src="./demo/base.tsx">Basic Usage</code>

----------------------------------------

TITLE: Documenting Form.Item Dependencies in Ant Design (Markdown)
DESCRIPTION: Explains the usage of the dependencies property in Form.Item components. When the value of an associated field changes, it triggers validation and updates for the dependent field.

LANGUAGE: Markdown
CODE:
## zh-CN

Form.Item 可以通过 `dependencies` 属性，设置关联字段。当关联字段的值发生变化时，会触发校验与更新。

## en-US

Form.Item can set the associated field through the `dependencies` property. When the value of the associated field changes, the validation and update will be triggered.

----------------------------------------

TITLE: Basic usage of Ant Design components in React
DESCRIPTION: Example of importing and using Ant Design components (Button and DatePicker) in a React component.

LANGUAGE: tsx
CODE:
import { Button, DatePicker } from 'antd';

export default () => (
  <>
    <Button type="primary">PRESS ME</Button>
    <DatePicker placeholder="select date" />
  </>
);

----------------------------------------

TITLE: Setting Notification Placement Options - Ant Design
DESCRIPTION: Demonstrates the various placement options available for notification boxes in Ant Design. The placement property supports values including top, bottom, topLeft, topRight, bottomLeft, and bottomRight to control where notifications appear relative to the viewport.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `placement` 可以配置通知从上面、下面、左上角、右上角、左下角、右下角弹出。

## en-US

A notification box can appear from the `top` `bottom` `topLeft` `topRight` `bottomLeft` or `bottomRight` of the viewport via `placement`.

----------------------------------------

TITLE: Rendering Tree with Asynchronous Data in React
DESCRIPTION: Example of how to properly render a Tree component when loading data asynchronously. This approach avoids double computing issues when using large datasets with checkable nodes.

LANGUAGE: jsx
CODE:
{
  this.state.treeData.length ? (
    <Tree>
      {this.state.treeData.map((data) => (
        <TreeNode />
      ))}
    </Tree>
  ) : (
    'loading tree'
  );
}

----------------------------------------

TITLE: Typography Component Documentation in Markdown
DESCRIPTION: Multi-language documentation headers for Typography component features, showing the component provides various text styles and link functionality.

LANGUAGE: markdown
CODE:
## zh-CN

内置不同样式的文本以及超链接组件。

## en-US

Provides multiple types of text and a link.

----------------------------------------

TITLE: Modifying Form.Item Structure for Multiple Elements in JSX
DESCRIPTION: This code snippet shows how to restructure a Form.Item to accommodate additional elements alongside the input field. It demonstrates wrapping the Input component with a nested Form.Item and adding a description span.

LANGUAGE: diff
CODE:
- <Form.Item label="Field" name="field">
-   <Input />
- </Form.Item>
+ <Form.Item label="Field">
+   <Form.Item name="field" noStyle><Input /></Form.Item> // 直接包裹才会绑定表单
+   <span>description</span>
+ </Form.Item>

----------------------------------------

TITLE: Configuring Virtual Scrolling in Ant Design Table (Markdown)
DESCRIPTION: This snippet explains how to enable virtual scrolling in Ant Design tables. It requires setting the 'virtual' property to true and specifying numeric values for both scroll.x and scroll.y.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `virtual` 开启虚拟滚动，此时 `scroll.x` 与 `scroll.y` 必须设置且为 `number` 类型。

## en-US

Set `virtual` to enable virtual scroll, and `scroll.x` and `scroll.y` must be set at the same time with `number` type.

----------------------------------------

TITLE: Transforming CSS Logical Properties for Older Browser Compatibility
DESCRIPTION: This code shows how to use StyleProvider with a transformer to downgrade CSS logical properties, ensuring compatibility with older browsers that don't support these properties.

LANGUAGE: tsx
CODE:
import { legacyLogicalPropertiesTransformer, StyleProvider } from '@ant-design/cssinjs';

// `transformers` provides a way to transform CSS properties
export default () => (
  <StyleProvider transformers={[legacyLogicalPropertiesTransformer]}>
    <MyApp />
  </StyleProvider>
);

----------------------------------------

TITLE: Disabling Ant Design Tooltip Component via Title Prop
DESCRIPTION: Shows two methods to disable an Ant Design Tooltip component by either setting the title prop to null or an empty string. This approach allows developers to conditionally disable tooltip functionality while maintaining the component structure.

LANGUAGE: JSX
CODE:
<Tooltip title={null} />
<Tooltip title="" />

----------------------------------------

TITLE: Basic Cascader Component Usage in JSX
DESCRIPTION: Basic example showing how to use the Cascader component with options and onChange handler.

LANGUAGE: jsx
CODE:
<Cascader options={options} onChange={onChange} />

----------------------------------------

TITLE: Generating Checkbox Group from Array in Ant Design React
DESCRIPTION: This code snippet demonstrates how to create a Checkbox.Group component in Ant Design using an array of options. It shows the setup for both controlled and uncontrolled components, handling state changes, and displaying selected values.

LANGUAGE: jsx
CODE:
import { Checkbox } from 'antd';

const plainOptions = ['Apple', 'Pear', 'Orange'];
const options = [
  { label: 'Apple', value: 'Apple' },
  { label: 'Pear', value: 'Pear' },
  { label: 'Orange', value: 'Orange' },
];
const optionsWithDisabled = [
  { label: 'Apple', value: 'Apple' },
  { label: 'Pear', value: 'Pear' },
  { label: 'Orange', value: 'Orange', disabled: false },
];

const App: React.FC = () => {
  const onChange = (checkedValues: string[]) => {
    console.log('checked = ', checkedValues);
  };

  return (
    <>
      <Checkbox.Group options={plainOptions} defaultValue={['Apple']} onChange={onChange} />
      <br />
      <br />
      <Checkbox.Group options={options} defaultValue={['Pear']} onChange={onChange} />
      <br />
      <br />
      <Checkbox.Group
        options={optionsWithDisabled}
        disabled
        defaultValue={['Apple']}
        onChange={onChange}
      />
    </>
  );
};

export default App;

----------------------------------------

TITLE: Shadow DOM Integration
DESCRIPTION: Example of integrating Ant Design with Shadow DOM by configuring StyleProvider container.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';
import { createRoot } from 'react-dom/client';

const shadowRoot = someEle.attachShadow({ mode: 'open' });
const container = document.createElement('div');
shadowRoot.appendChild(container);
const root = createRoot(container);

root.render(
  <StyleProvider container={shadowRoot}>
    <MyApp />
  </StyleProvider>,
);

----------------------------------------

TITLE: Basic Form Value Transformation - TypeScript
DESCRIPTION: Example showing how to normalize form values before submitting. Demonstrates string escaping and value transformation.

LANGUAGE: typescript
CODE:
const validateMessages = {
  required: "'${name}' 是必选字段",
  // ...
};

<Form validateMessages={validateMessages} />;

----------------------------------------

TITLE: Configuring Global Notification Settings in JavaScript
DESCRIPTION: This snippet demonstrates how to configure global settings for the Notification component using the notification.config method. It sets placement, bottom margin, duration, and enables RTL mode.

LANGUAGE: javascript
CODE:
notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
  rtl: true,
});

----------------------------------------

TITLE: Form Field Validation - JSX
DESCRIPTION: Example showing custom field validation with dependencies between fields.

LANGUAGE: jsx
CODE:
<Form.Item
  messageVariables={{ another: 'good' }}
  label="user"
  rules={[{ required: true, message: '${another} is required' }]}
>
  <Input />
</Form.Item>

----------------------------------------

TITLE: Configuring Prefix for Ant Design v5
DESCRIPTION: React code showing how to configure a custom prefix for Ant Design v5 components to avoid style conflicts.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider as ConfigProvider5 } from 'antd-v5';

export default () => (
  <ConfigProvider5 prefixCls="ant5">
    <MyApp />
  </ConfigProvider5>
);

----------------------------------------

TITLE: Custom Dropdown Content in React Select
DESCRIPTION: Shows how to customize the dropdown content of a Select component using the dropdownRender prop.

LANGUAGE: tsx
CODE:
<Select
  dropdownRender={() => (
    <div
      onMouseDown={(e) => {
        e.preventDefault();
        e.stopPropagation();
      }}
    >
      Some Content
    </div>
  )}
/>

----------------------------------------

TITLE: Describing Input Variants in Ant Design (Chinese)
DESCRIPTION: This Markdown snippet outlines the available form variants for the Input component in Chinese. It mentions four different styles: outlined, filled, borderless, and underlined.

LANGUAGE: Markdown
CODE:
## zh-CN

Input 形态变体，可选 `outlined` `filled` `borderless` `underlined` 四种形态。

----------------------------------------

TITLE: Configuring Filtering and Sorting in Ant Design Table (JSX)
DESCRIPTION: This snippet demonstrates how to set up filtering and sorting for columns in an Ant Design table. It includes properties for filtering, sorting, and their default values. The code shows the structure of a column definition with these features enabled.

LANGUAGE: jsx
CODE:
{
  title: 'Column Title',
  dataIndex: 'columnKey',
  filters: [
    { text: 'Filter 1', value: 'filter1' },
    { text: 'Filter 2', value: 'filter2' },
  ],
  onFilter: (value, record) => record.columnKey.includes(value),
  filterMultiple: true,
  filterOnClose: false,
  defaultFilteredValue: ['filter1'],
  sorter: (a, b) => a.columnKey.length - b.columnKey.length,
  sortDirections: ['ascend', 'descend'],
  defaultSortOrder: 'ascend'
}

----------------------------------------

TITLE: Configuring Graduated Slider with Marks in Ant Design React
DESCRIPTION: This code snippet demonstrates how to use the 'marks' property to create a graduated slider in Ant Design. It also shows how to use 'value' or 'defaultValue' to set the slider position, and how to configure the 'included' and 'step' properties for different behaviors.

LANGUAGE: jsx
CODE:
<Slider marks={marks} defaultValue={37} />
<Slider range marks={marks} defaultValue={[26, 37]} />

<Slider marks={marks} included={false} defaultValue={37} />

<Slider marks={marks} step={null} included={false} defaultValue={37} />

----------------------------------------

TITLE: Warning Banner Component in JSX
DESCRIPTION: An Ant Design Alert component displaying a warning message about tooltip-related components.

LANGUAGE: jsx
CODE:
<Antd component="Alert" message="以下常见问题均适用于 Tooltip、Popconfirm、Popover 组件" type="warning" banner="true"></Antd>

----------------------------------------

TITLE: Implementing Nested Modals with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create nested modal dialogs using the Ant Design library in a React application. It includes two levels of modals with open/close functionality.

LANGUAGE: jsx
CODE:
import { Button, Modal } from 'antd';
import { useState } from 'react';
const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isInnerModalOpen, setIsInnerModalOpen] = useState(false);
  const showModal = () => {
    setIsModalOpen(true);
  };
  const handleOk = () => {
    setIsModalOpen(false);
  };
  const handleCancel = () => {
    setIsModalOpen(false);
  };
  const showInnerModal = () => {
    setIsInnerModalOpen(true);
  };
  const handleInnerOk = () => {
    setIsInnerModalOpen(false);
  };
  const handleInnerCancel = () => {
    setIsInnerModalOpen(false);
  };
  return (
    <>
      <Button type="primary" onClick={showModal}>
        Open Modal
      </Button>
      <Modal title="Modal" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>
        <Button onClick={showInnerModal}>Open Inner Modal</Button>
        <Modal
          title="Inner Modal"
          open={isInnerModalOpen}
          onOk={handleInnerOk}
          onCancel={handleInnerCancel}
        >
          <p>Inner Modal Content</p>
        </Modal>
      </Modal>
    </>
  );
};
export default App;

----------------------------------------

TITLE: Documenting Color Encoding Formats in Markdown
DESCRIPTION: This snippet describes the supported color encoding formats for a color picker component. It includes both Chinese (zh-CN) and English (en-US) versions of the documentation.

LANGUAGE: Markdown
CODE:
## zh-CN

编码格式，支持`HEX`、`HSB`、`RGB`。

## en-US

Encoding formats, support `HEX`, `HSB`, `RGB`.

----------------------------------------

TITLE: Describing Multi-Select Component with Remote Search in Markdown
DESCRIPTION: This snippet provides descriptions in Chinese and English for a sophisticated multi-select component. It highlights features such as remote search, debounce control, request sequence management, and loading state indication.

LANGUAGE: Markdown
CODE:
## zh-CN

一个带有远程搜索，防抖控制，请求时序控制，加载状态的多选示例。

## en-US

A complete multiple select sample with remote search, debounce fetch, ajax callback order flow, and loading state.

----------------------------------------

TITLE: Implementing Character Counting in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to add character counting functionality to an Ant Design component, likely a TextArea or Input. It shows the setup for both Chinese and English language interfaces.

LANGUAGE: JSX
CODE:
import { Input } from 'antd';

const { TextArea } = Input;

ReactDOM.render(
  <TextArea showCount maxLength={100} />,
  mountNode,
);

----------------------------------------

TITLE: Implementing Ant Design Button Types in JSX
DESCRIPTION: This snippet showcases how to use the 'type' prop to create different button styles in Ant Design. It includes primary, default, dashed, text, and link buttons. The 'type' prop acts as a syntactic sugar for applying preset button styles.

LANGUAGE: JSX
CODE:
<Button type="primary">Primary Button</Button>
<Button>Default Button</Button>
<Button type="dashed">Dashed Button</Button>
<Button type="text">Text Button</Button>
<Button type="link">Link Button</Button>

----------------------------------------

TITLE: Configuring Grid Layout in Ant Design List
DESCRIPTION: Shows how to enable grid layout functionality in an Ant Design List component by setting the grid property. The column attribute allows specifying the desired number of columns to display.

LANGUAGE: markdown
CODE:
## zh-CN

可以通过设置 `List` 的 `grid` 属性来实现栅格列表，`column` 可设置期望显示的列数。

## en-US

Create a grid layout by setting the `grid` property of List.

----------------------------------------

TITLE: Defining CountConfig Interface in TypeScript
DESCRIPTION: Defines the CountConfig interface used for character count configuration in the Input component. It includes properties for maximum character count, custom counting strategy, display options, and custom truncation logic.

LANGUAGE: TypeScript
CODE:
interface CountConfig {
  max?: number;
  strategy?: (value: string) => number;
  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);
  exceedFormatter?: (value: string, config: { max: number }) => string;
}

----------------------------------------

TITLE: Grid Layout Demo Container in HTML
DESCRIPTION: Basic HTML container for displaying grid system design concept with an SVG image.

LANGUAGE: html
CODE:
<div class="grid-demo">
  <img draggable="false" src="https://gw.alipayobjects.com/zos/bmw-prod/9189c9ef-c601-40dc-9960-c11dbb681888.svg" alt="grid design" />
</div>

----------------------------------------

TITLE: Configuring Middle Ellipsis in Ant Design Components
DESCRIPTION: This snippet shows how to use the ellipsis property with a custom suffix to create a component that truncates content from the middle. This approach is useful when you need to preserve important information at the end of the text while still fitting it into a limited space.

LANGUAGE: jsx
CODE:
ellipsis={{ suffix: ... }}

----------------------------------------

TITLE: Component Style Caching Implementation
DESCRIPTION: Demonstration of how Ant Design caches component styles based on the principle that props don't affect component styles, allowing for single-time style generation per component



----------------------------------------

TITLE: Record Flattening Implementation - Optimized Version
DESCRIPTION: Optimized version of the flatten function that avoids unnecessary array creation and reduces garbage collection overhead.

LANGUAGE: tsx
CODE:
function flatten<T extends { children?: T[] }>(data: T[] = [], list: T[] = []) {
  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    list.push(record);
    flatten(record.children, list);
  }

  return list;
}

----------------------------------------

TITLE: Displaying Badge Overflow Count in ant-design (Markdown)
DESCRIPTION: Describes how the Badge component displays counts exceeding the overflowCount value. When the count is larger than overflowCount, it shows as '${overflowCount}+'. The default overflowCount is 99.

LANGUAGE: markdown
CODE:
## zh-CN

超过 `overflowCount` 的会显示为 `${overflowCount}+`，默认的 `overflowCount` 为 `99`。

## en-US

`${overflowCount}+` is displayed when count is larger than `overflowCount`. The default value of `overflowCount` is `99`.

----------------------------------------

TITLE: Modifying Start Day of Week for DatePicker
DESCRIPTION: Example of how to change the start day of the week in DatePicker using dayjs locale configuration.

LANGUAGE: javascript
CODE:
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

import updateLocale from 'dayjs/plugin/updateLocale';

dayjs.extend(updateLocale);
dayjs.updateLocale('zh-cn', {
  weekStart: 0,
});

----------------------------------------

TITLE: Initializing Upload Component with Default Files in React (Ant Design)
DESCRIPTION: This snippet demonstrates how to use the defaultFileList prop in Ant Design's Upload component to display a list of pre-uploaded files when the page loads. It's useful for scenarios where you need to show existing files in an upload interface.

LANGUAGE: jsx
CODE:
import { Upload, message } from 'antd';
import { InboxOutlined } from '@ant-design/icons';

const { Dragger } = Upload;

const props = {
  name: 'file',
  multiple: true,
  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
  onChange(info) {
    const { status } = info.file;
    if (status !== 'uploading') {
      console.log(info.file, info.fileList);
    }
    if (status === 'done') {
      message.success(`${info.file.name} file uploaded successfully.`);
    } else if (status === 'error') {
      message.error(`${info.file.name} file upload failed.`);
    }
  },
  onDrop(e) {
    console.log('Dropped files', e.dataTransfer.files);
  },
};

ReactDOM.render(
  <Dragger
    {...props}
    defaultFileList={[
      {
        uid: '1',
        name: 'xxx.png',
        status: 'done',
        response: 'Server Error 500', // custom error message to show
        url: 'http://www.baidu.com/xxx.png',
      },
      {
        uid: '2',
        name: 'yyy.png',
        status: 'done',
        url: 'http://www.baidu.com/yyy.png',
      },
      {
        uid: '3',
        name: 'zzz.png',
        status: 'error',
        response: 'Server Error 500', // custom error message to show
        url: 'http://www.baidu.com/zzz.png',
      },
    ]}
  >
    <p className="ant-upload-drag-icon">
      <InboxOutlined />
    </p>
    <p className="ant-upload-text">Click or drag file to this area to upload</p>
    <p className="ant-upload-hint">
      Support for a single or bulk upload. Strictly prohibit from uploading company data or other
      sensitive files.
    </p>
  </Dragger>,
  mountNode,
);

----------------------------------------

TITLE: Applying Scale to Offset Calculations in TypeScript
DESCRIPTION: This snippet shows how to apply the calculated scale ratio to alignment offset calculations. It ensures that the popup element is correctly positioned even when scaled.

LANGUAGE: tsx
CODE:
// Some logic for align offset calculation
// const baseOffsetX = ...
// const baseOffsetY = ...

const scaledOffsetX = baseOffsetX / scaleX;
const scaledOffsetY = baseOffsetY / scaleY;

----------------------------------------

TITLE: Using Notification Hook with Context in React TSX
DESCRIPTION: This example shows how to use the notification.useNotification hook to access context information in a React component. It demonstrates proper placement of the contextHolder to ensure access to the correct context values.

LANGUAGE: tsx
CODE:
const [api, contextHolder] = notification.useNotification();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder is inside Context1 which means api will get value of Context1 */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}
    </Context2.Provider>
  </Context1.Provider>
);

----------------------------------------

TITLE: Customizing Component Tokens in Ant Design
DESCRIPTION: Demonstrates how to customize component-specific tokens using ConfigProvider. It shows how to enable algorithm for component tokens and override global tokens for specific components.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider, Button, Space, Input, Divider } from 'antd';

const App: React.FC = () => (
  <>
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
            algorithm: true, // Enable algorithm
          },
          Input: {
            colorPrimary: '#eb2f96',
            algorithm: true, // Enable algorithm
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Enable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
    <Divider />
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
          },
          Input: {
            colorPrimary: '#eb2f96',
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Disable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
  </>
);

export default App;

----------------------------------------

TITLE: Implementing Divider and Disabled Items in Ant Design Menu (JSX)
DESCRIPTION: This code snippet demonstrates how to create a menu with dividers and disabled items using Ant Design's Menu component. It includes options for different types of food and beverages, with some items disabled and separated by dividers.

LANGUAGE: jsx
CODE:
import { Menu } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <Menu
    style={{ width: 256 }}
    defaultSelectedKeys={['1']}
    defaultOpenKeys={['sub1']}
    mode="inline"
  >
    <Menu.Item key="1">Option 1</Menu.Item>
    <Menu.Item key="2">Option 2</Menu.Item>
    <Menu.Item key="3" disabled>
      Option 3
    </Menu.Item>
    <Menu.SubMenu key="sub1" title="Submenu">
      <Menu.Item key="5">Option 5</Menu.Item>
      <Menu.Item key="6">Option 6</Menu.Item>
      <Menu.Item key="7">Option 7</Menu.Item>
      <Menu.Item key="8">Option 8</Menu.Item>
    </Menu.SubMenu>
    <Menu.SubMenu key="sub2" title="Disabled Submenu" disabled>
      <Menu.Item key="9">Option 9</Menu.Item>
      <Menu.Item key="10">Option 10</Menu.Item>
    </Menu.SubMenu>
    <Menu.Item key="link" danger>
      <a href="https://ant.design" target="_blank" rel="noopener noreferrer">
        Danger item
      </a>
    </Menu.Item>
  </Menu>
);

export default App;

----------------------------------------

TITLE: Configuring Grouped Table Headers in Ant Design
DESCRIPTION: Shows the usage of nested columns[n].children property to create grouped table headers. This pattern allows for creating complex multi-level header structures in Ant Design tables.

LANGUAGE: markdown
CODE:
## zh-CN

`columns[n]` 可以内嵌 `children`，以渲染分组表头。

## en-US

Group table head with `columns[n].children`.

----------------------------------------

TITLE: Defining Input Component Sizes in Ant Design
DESCRIPTION: This snippet defines three sizes for the <Input /> component in Ant Design: large (40px), default (32px), and small (24px). It provides context for developers on how to use different input field sizes in their Ant Design projects.

LANGUAGE: markdown
CODE:
## zh-CN

我们为 `<Input />` 输入框定义了三种尺寸（大、默认、小），高度分别为 `40px`、`32px` 和 `24px`。

## en-US

There are three sizes of an Input box: `large` (40px), `default` (32px) and `small` (24px).

----------------------------------------

TITLE: Configuring TextArea AutoSize in Ant Design
DESCRIPTION: Demonstrates how to use the autoSize property with TextArea components. The property enables automatic height adjustment based on content and can be configured with minimum and maximum line constraints.

LANGUAGE: markdown
CODE:
## zh-CN

`autoSize` 属性适用于 `textarea` 节点，并且只有高度会自动变化。另外 `autoSize` 可以设定为一个对象，指定最小行数和最大行数。

## en-US

`autoSize` prop for a `textarea` type of `Input` makes the height to automatically adjust based on the content. An option object can be provided to `autoSize` to specify the minimum and maximum number of lines the textarea will automatically adjust.

----------------------------------------

TITLE: Styling Resizable Columns in CSS for Ant Design Table
DESCRIPTION: This CSS snippet defines styles for resizable columns in an Ant Design Table. It sets the position and appearance of the resize handle, ensuring it's clickable and visible to users.

LANGUAGE: CSS
CODE:
#table-demo-resizable-column .react-resizable {
  position: relative;
  background-clip: padding-box;
}

#table-demo-resizable-column .react-resizable-handle {
  position: absolute;
  inset-inline-end: -5px;
  bottom: 0;
  z-index: 1;
  width: 10px;
  height: 100%;
  cursor: col-resize;
}

----------------------------------------

TITLE: Setting Selection Limit with maxCount in Ant Design
DESCRIPTION: Shows how to use the maxCount property to limit the number of items that can be selected in an Ant Design component. When the maximum limit is reached, remaining unselected options become disabled automatically.

LANGUAGE: markdown
CODE:
## zh-CN

你可以通过设置 `maxCount` 约束最多可选中的数量，当超出限制时会变成禁止选中状态。

## en-US

You can set the `maxCount` prop to control the max number of items can be selected. When the limit is exceeded, the options will become disabled.

----------------------------------------

TITLE: Downloading QRCode in React
DESCRIPTION: Provides an example of how to implement a download feature for the generated QRCode.

LANGUAGE: jsx
CODE:
<code src="./demo/download.tsx">下载二维码</code>

----------------------------------------

TITLE: Implementing Collapse Component in React with Ant Design
DESCRIPTION: This snippet demonstrates how to use the Collapse component in React with Ant Design. It shows both the recommended usage for versions >= 5.6.0 and the deprecated usage for versions < 5.6.0.

LANGUAGE: tsx
CODE:
// works when >= 5.6.0, recommended ✅
const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const items: CollapseProps['items'] = [
  {
    key: '1',
    label: 'This is panel header 1',
    children: <p>{text}</p>,
  },
  {
    key: '2',
    label: 'This is panel header 2',
    children: <p>{text}</p>,
  },
  {
    key: '3',
    label: 'This is panel header 3',
    children: <p>{text}</p>,
  },
];

<Collapse items={items} defaultActiveKey={['1']} />;

// works when <5.6.0 , deprecated when >=5.6.0  🙅🏻‍♀️

<Collapse defaultActiveKey={['1']} onChange={onChange}>
  <Panel header="This is panel header 1" key="1">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 2" key="2">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 3" key="3">
    <p>{text}</p>
  </Panel>
</Collapse>;

----------------------------------------

TITLE: Configuring Non-Modal Tour with Primary Type in Ant Design React
DESCRIPTION: Shows how to configure a Tour component to display without a modal mask while using primary type styling for emphasis. Set mask={false} to remove the modal overlay and type="primary" to highlight the tour steps.

LANGUAGE: jsx
CODE:
<Tour mask={false} type="primary" />

----------------------------------------

TITLE: Handling Image Watermark Error Fallback - TypeScript/React
DESCRIPTION: Example showing how to implement a fallback text watermark when image loading fails. Uses both image and content props to ensure watermark remains visible even if image fails to load.

LANGUAGE: typescript
CODE:
<Watermark
  height={30}
  width={130}
  content="Ant Design"
  image="https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original"
>
  <div style={{ height: 500 }} />
</Watermark>

----------------------------------------

TITLE: Defining Dropdown Component API Properties
DESCRIPTION: Documents the available properties and their types for the Dropdown component. Includes common props, specific dropdown properties, and Dropdown.Button variant properties.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| arrow | Whether the dropdown arrow should be visible | boolean \| { pointAtCenter: boolean } | false |  |
| autoAdjustOverflow | Whether to adjust dropdown placement automatically when dropdown is off screen | boolean | true | 5.2.0 |

----------------------------------------

TITLE: Pages Router Document Setup
DESCRIPTION: Configuration for Next.js Pages Router to handle Ant Design styles using @ant-design/cssinjs.

LANGUAGE: tsx
CODE:
import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import Document, { Head, Html, Main, NextScript } from 'next/document';
import type { DocumentContext } from 'next/document';

const MyDocument = () => (
  <Html lang="en">
    <Head />
    <body>
      <Main />
      <NextScript />
    </body>
  </Html>
);

MyDocument.getInitialProps = async (ctx: DocumentContext) => {
  const cache = createCache();
  const originalRenderPage = ctx.renderPage;
  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => (
        <StyleProvider cache={cache}>
          <App {...props} />
        </StyleProvider>
      ),
    });

  const initialProps = await Document.getInitialProps(ctx);
  const style = extractStyle(cache, true);
  return {
    ...initialProps,
    styles: (
      <>
        {initialProps.styles}
        <style dangerouslySetInnerHTML={{ __html: style }} />
      </>
    ),
  };
};

export default MyDocument;

----------------------------------------

TITLE: Basic Layout Structure Implementation - JSX
DESCRIPTION: Shows the basic structure and nesting of Layout components including Header, Sider, Content and Footer elements.

LANGUAGE: jsx
CODE:
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>

----------------------------------------

TITLE: Creating Context-Aware Notifications with useNotification in Ant Design
DESCRIPTION: Demonstrates how to use notification.useNotification to create context-aware notifications that can properly consume ConfigProvider data. This approach is recommended over static notification methods as it provides access to React context.



----------------------------------------

TITLE: Implementing Basic Drawer Component in React with Ant Design
DESCRIPTION: This code snippet demonstrates the implementation of a basic Drawer component using Ant Design in a React application. It shows how to create a button that triggers the drawer to slide out from the right side of the screen, and how the drawer can be closed by clicking on the mask area.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react';
import { Drawer, Button } from 'antd';

const App: React.FC = () => {
  const [open, setOpen] = useState(false);

  const showDrawer = () => {
    setOpen(true);
  };

  const onClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Button type="primary" onClick={showDrawer}>
        Open
      </Button>
      <Drawer title="Basic Drawer" placement="right" onClose={onClose} open={open}>
        <p>Some contents...</p>
        <p>Some contents...</p>
        <p>Some contents...</p>
      </Drawer>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Webpack SVG Icon Configuration
DESCRIPTION: Configuration for using SVG icons as React components with webpack.

LANGUAGE: js
CODE:
module.exports = {
  // ... other config
  test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
  use: [
    {
      loader: 'babel-loader',
    },
    {
      loader: '@svgr/webpack',
      options: {
        babel: false,
        icon: true,
      },
    },
  ],
};

----------------------------------------

TITLE: Creating Context-Aware Message Hooks with message.useMessage in Ant Design
DESCRIPTION: This snippet demonstrates the usage of message.useMessage to create a contextHolder that can read context in Ant Design. It's recommended to use this approach instead of static message methods to ensure proper context consumption and ConfigProvider functionality.

LANGUAGE: JavaScript
CODE:
message.useMessage

----------------------------------------

TITLE: Implementing Button Loading States with Ant Design in JSX
DESCRIPTION: This code snippet shows how to create buttons with loading states using Ant Design. It demonstrates static loading states and dynamic loading triggered by user interaction. The loading icon can be customized using the `loading.icon` property.

LANGUAGE: JSX
CODE:
<Button type="primary" loading>\n  Loading\n</Button>\n<Button type="primary" size="small" loading>\n  Loading\n</Button>\n<Button type="primary" icon={<PoweroffOutlined />} loading />\n\n<Button type="primary" loading={loadings[0]} onClick={() => enterLoading(0)}>\n  Click me!\n</Button>\n<Button\n  type="primary"\n  icon={<PoweroffOutlined />}\n  loading={loadings[1]}\n  onClick={() => enterLoading(1)}\n>\n  Click me!\n</Button>\n<Button\n  type="primary"\n  icon={<PoweroffOutlined />}\n  loading={loadings[2]}\n  onClick={() => enterLoading(2)}\n/>\n

----------------------------------------

TITLE: Configuring Virtual Scroll in React Select
DESCRIPTION: Demonstrates how to adjust the listItemHeight and listHeight props to fix scroll issues with custom Option components.

LANGUAGE: tsx
CODE:
<Select listItemHeight={10} listHeight={250} />

----------------------------------------

TITLE: Hiding Arrow Icon in Ant Design CollapsePanel
DESCRIPTION: Demonstrates how to hide the default arrow icon in a CollapsePanel component by setting the showArrow prop to false. This customization option allows for cleaner panel headers when arrow indicators aren't needed.

LANGUAGE: JSX
CODE:
<CollapsePanel showArrow={false} />

----------------------------------------

TITLE: Setting Up Vite Project and Dependencies
DESCRIPTION: Commands for navigating to the project directory, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm install
$ npm run dev

----------------------------------------

TITLE: Configuring Column and Row Spans in Ant Design Table
DESCRIPTION: Demonstrates usage of colSpan and rowSpan properties in table columns and cells. Column headers support colSpan through column configuration, while table cells support both colSpan and rowSpan through the onCell property. Setting either span value to 0 will prevent the cell from rendering.



----------------------------------------

TITLE: Importing Carousel Examples in TypeScript React
DESCRIPTION: Demonstrates how to import and use various Carousel examples in a React application using TypeScript. Each example showcases different features of the Carousel component.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/position.tsx">Position</code>
<code src="./demo/autoplay.tsx">Scroll automatically</code>
<code src="./demo/fade.tsx">Fade in</code>
<code src="./demo/arrows.tsx" version="5.17.0">Arrows for switching</code>
<code src="./demo/dot-duration.tsx" version="5.24.0">Progress of dots</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Implementing Switch in Form Item - React TSX
DESCRIPTION: Example showing how to properly bind a Switch component within a Form.Item component using the valuePropName property to correctly handle the checked state.

LANGUAGE: tsx
CODE:
<Form.Item name="fieldA" valuePropName="checked">
  <Switch />
</Form.Item>

----------------------------------------

TITLE: Basic Theme Configuration with Design Tokens in Ant Design
DESCRIPTION: Demonstrates how to customize theme variables using Design Tokens through ConfigProvider. Shows modification of Seed Tokens and derived variables.

LANGUAGE: tsx
CODE:
import { Button, ConfigProvider, Space } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: '#00b96b',
        borderRadius: 2,
        colorBgContainer: '#f6ffed',
      },
    }}
  >
    <Space>
      <Button type="primary">Primary</Button>
      <Button>Default</Button>
    </Space>
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Importing QRCode Component Examples in React
DESCRIPTION: This code snippet demonstrates how to import various examples of the QRCode component in a React application. It includes basic usage, icon integration, custom status rendering, and advanced features.

LANGUAGE: jsx
CODE:
<code src="./demo/base.tsx">base</code>
<code src="./demo/icon.tsx">With Icon</code>
<code src="./demo/status.tsx">other status</code>
<code src="./demo/customStatusRender.tsx" version="5.20.0">custom status render</code>
<code src="./demo/type.tsx">Custom Render Type</code>
<code src="./demo/customSize.tsx">Custom Size</code>
<code src="./demo/customColor.tsx">Custom Color</code>
<code src="./demo/download.tsx">Download QRCode</code>
<code src="./demo/errorlevel.tsx">Error Level</code>
<code src="./demo/Popover.tsx">Advanced Usage</code>

----------------------------------------

TITLE: Rendering Alerts with Description in React
DESCRIPTION: This code snippet demonstrates how to create alert components with additional descriptive text using the Ant Design library in React. It showcases different types of alerts (success, info, warning, error) with both a main message and a more detailed description.

LANGUAGE: jsx
CODE:
import { Alert, Space } from 'antd';

const App: React.FC = () => (
  <Space direction="vertical" style={{ width: '100%' }}>
    <Alert
      message="Success Text"
      description="Success Description Success Description Success Description"
      type="success"
    />
    <Alert
      message="Info Text"
      description="Info Description Info Description Info Description Info Description"
      type="info"
    />
    <Alert
      message="Warning Text"
      description="Warning Description Warning Description Warning Description Warning Description"
      type="warning"
    />
    <Alert
      message="Error Text"
      description="Error Description Error Description Error Description Error Description"
      type="error"
    />
  </Space>
);

export default App;

----------------------------------------

TITLE: Using Modal.useModal Hook in React
DESCRIPTION: Demonstrates how to use the Modal.useModal hook to create a modal with context support.

LANGUAGE: jsx
CODE:
const [modal, contextHolder] = Modal.useModal();

React.useEffect(() => {
  modal.confirm({
    // ...
  });
}, []);

return <div>{contextHolder}</div>;

----------------------------------------

TITLE: DatePicker Variant Options
DESCRIPTION: Lists the four available visual variants for the DatePicker component. These variants control the appearance and border styling of the date picker input.

LANGUAGE: markdown
CODE:
`outlined` `filled` `borderless` `underlined`

----------------------------------------

TITLE: Configuring Tooltip Destruction in Ant Design
DESCRIPTION: Shows how to use the destroyTooltipOnHide property to manage tooltip DOM cleanup behavior. When enabled, this property will cause the tooltip's DOM node to be destroyed when the tooltip is hidden, helping to clean up unused DOM elements.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `destroyTooltipOnHide` 控制提示关闭时是否销毁 dom 节点。

## en-US

Setting `destroyTooltipOnHide` to control whether destroy dom node of tooltip when hidden.

----------------------------------------

TITLE: Importing InputNumber Component in React
DESCRIPTION: This code snippet demonstrates how to import and use the InputNumber component in a React application. It includes various examples of component usage with different props and configurations.

LANGUAGE: TypeScript
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/size.tsx">三种大小</code>
<code src="./demo/addon.tsx">前置/后置标签</code>
<code src="./demo/disabled.tsx">不可用</code>
<code src="./demo/digit.tsx">高精度小数</code>
<code src="./demo/formatter.tsx">格式化展示</code>
<code src="./demo/keyboard.tsx">键盘行为</code>
<code src="./demo/change-on-wheel.tsx" version="5.14.0">鼠标滚轮</code>
<code src="./demo/variant.tsx" version="5.13.0">形态变体</code>
<code src="./demo/filled-debug.tsx" debug>Filled Debug</code>
<code src="./demo/out-of-range.tsx">超出边界</code>
<code src="./demo/presuffix.tsx">前缀/后缀</code>
<code src="./demo/status.tsx">自定义状态</code>
<code src="./demo/focus.tsx" version="5.22.0">聚焦</code>
<code src="./demo/controls.tsx" debug>图标按钮</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
<code src="./demo/debug-token.tsx" debug>覆盖组件样式</code>

----------------------------------------

TITLE: Rendering Warning Result in Ant Design (JSX)
DESCRIPTION: This snippet shows how to render a warning-type result using Ant Design's Result component. It demonstrates the usage in both Chinese and English contexts.

LANGUAGE: JSX
CODE:
import { Result } from 'antd';

const WarningResult = () => (
  <Result
    status="warning"
    title="警告提示的标题"
    subTitle="警告提示的详细描述"
  />
);

const WarningResultEnglish = () => (
  <Result
    status="warning"
    title="Warning Title"
    subTitle="Warning description"
  />
);

----------------------------------------

TITLE: Basic Ant Design Component Usage Example
DESCRIPTION: Demonstrates how to import and use basic Ant Design components like Button and DatePicker in a React application.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, DatePicker } from 'antd';

const App = () => (
  <>
    <Button type="primary">PRESS ME</Button>
    <DatePicker />
  </>
);

export default App;

----------------------------------------

TITLE: Displaying Simple Badge Indicator - Ant Design React
DESCRIPTION: Demonstrates how to display a simple red badge indicator without a specific count value. The badge will be shown as a dot when no count is specified, and will not be displayed when count equals zero.

LANGUAGE: jsx
CODE:
<Badge dot />
<Badge dot={false} />

----------------------------------------

TITLE: Implementing Basic Progress Component Pattern
DESCRIPTION: Demonstrates the fundamental behavior pattern of the Progress component.

LANGUAGE: tsx
CODE:
<code src="./design/behavior-pattern.tsx" inline></code>

----------------------------------------

TITLE: Updating Dependencies and Cleaning Project
DESCRIPTION: Commands to clean the project directory and reinstall dependencies, useful for updating to the latest patch versions of dependencies.

LANGUAGE: bash
CODE:
git clean -fdx
npm i

----------------------------------------

TITLE: Importing and Using Tabs Component in React TSX
DESCRIPTION: This snippet demonstrates how to import and use the Tabs component in a React application using TypeScript JSX (TSX). It shows various usage examples including basic tabs, disabled tabs, centered tabs, and tabs with icons.

LANGUAGE: TSX
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/disabled.tsx">禁用</code>
<code src="./demo/centered.tsx">居中</code>
<code src="./demo/icon.tsx">图标</code>

----------------------------------------

TITLE: Rendering Input with Semantic DOM Classes in React
DESCRIPTION: This snippet demonstrates how to render an Input component with semantic DOM classes in React using Ant Design.

LANGUAGE: tsx
CODE:
import { Input } from 'antd';

const App: React.FC = () => (
  <Input
    classNames={{
      input: 'my-input-class',
      prefix: 'my-prefix-class',
      suffix: 'my-suffix-class',
      affixWrapper: 'my-affix-wrapper-class',
    }}
  />
);

export default App;

----------------------------------------

TITLE: Using Ant Design Spin Component with Embedded Content
DESCRIPTION: Demonstrates how to wrap content within a Spin component to create a loading state. The Spin component can be used to show a loading indicator while overlaying the existing content.

LANGUAGE: markdown
CODE:
## zh-CN

可以直接把内容内嵌到 `Spin` 中，将现有容器变为加载状态。

## en-US

Embedding content into `Spin` will set it into loading state.

----------------------------------------

TITLE: Safari Directory Upload Workaround
DESCRIPTION: Code example showing how to handle directory upload limitations in Safari browser.

LANGUAGE: jsx
CODE:
accept: `.${'n'.repeat(100)}`;

----------------------------------------

TITLE: Modal Reference Management in JSX
DESCRIPTION: Example demonstrating how to create, update and destroy modal dialogs using Modal.method() references.

LANGUAGE: jsx
CODE:
const modal = Modal.info();

modal.update({
  title: 'Updated title',
  content: 'Updated content',
});

// on 4.8.0 or above, you can pass a function to update modal
modal.update((prevConfig) => ({
  ...prevConfig,
  title: `${prevConfig.title} (New)`,
}));

modal.destroy();

----------------------------------------

TITLE: Configuring Controlled Table Properties - Ant Design
DESCRIPTION: Guidelines for implementing controlled filtering and sorting in tables. Requires setting filteredValue and sortOrder in columns configuration, with important constraints around column keys and sort order implementation.

LANGUAGE: markdown
CODE:
> 1. columns 中定义了 filteredValue 和 sortOrder 属性即视为受控模式。\n> 2. 只支持同时对一列进行排序，请保证只有一列的 sortOrder 属性是生效的。\n> 3. 务必指定 `column.key`。\n\n> 1. Defining `filteredValue` or `sortOrder` means that it is in the controlled mode.\n> 2. Make sure `sortOrder` is assigned for only one column.\n> 3. `column.key` is required.

----------------------------------------

TITLE: Partial Static Style Extraction with Hash-based Caching
DESCRIPTION: Demonstrates a method for partial static style extraction that combines CSS-in-JS flexibility with file caching benefits. It uses MD5 hashing for cache invalidation.

LANGUAGE: tsx
CODE:
import { createHash } from 'crypto';

// Get Style content like above
const styleText = extractStyle(cache);

const hash = createHash('md5').update(styleText).digest('hex');
const cssFileName = `css-${hash.substring(0, 8)}.css`;

if (!fs.existsSync(cssFileName)) {
  fs.writeFileSync(cssFileName, styleText);
}

----------------------------------------

TITLE: Documenting Cascader Search Functionality in Markdown
DESCRIPTION: Provides documentation for the search and select feature in the Cascader component. It explains that options can be directly searched and selected, but notes that server-side search is not currently supported for Cascader[showSearch].

LANGUAGE: markdown
CODE:
## zh-CN

可以直接搜索选项并选择。

> `Cascader[showSearch]` 暂不支持服务端搜索，更多信息见 [#5547](https://github.com/ant-design/ant-design/issues/5547)

## en-US

Search and select options directly.

> Now, `Cascader[showSearch]` doesn't support search on server, more info [#5547](https://github.com/ant-design/ant-design/issues/5547)

----------------------------------------

TITLE: Documenting Responsive Grid List - Ant Design
DESCRIPTION: Documentation in Chinese and English describing the responsive grid list component and its relationship to Layout Grid sizing. References the Layout Grid documentation for column specifications.

LANGUAGE: markdown
CODE:
## zh-CN

响应式的栅格列表。尺寸与 [Layout Grid](/components/grid-cn/#col) 保持一致。

## en-US

Responsive grid list. The size property the is as same as [Layout Grid](/components/grid/#col).

----------------------------------------

TITLE: Implementing Auto-Adjusting Tooltip Placement in React with Ant Design
DESCRIPTION: This React component demonstrates how Ant Design's Tooltip automatically adjusts its placement when it becomes invisible. It uses a Button wrapped in a Tooltip, with the tooltip content set to change based on the button's position.

LANGUAGE: typescript
CODE:
import React, { useState } from 'react';
import { Tooltip, Button } from 'antd';

const App: React.FC = () => {
  const [destroyed, setDestroyed] = useState(false);

  const getPopupContainer = (trigger: Element) => trigger.parentElement!;

  return (
    <div style={{ marginTop: 100, marginLeft: 100 }}>
      <div
        style={{
          width: 200,
          height: 100,
          position: 'relative',
          border: '1px solid #40a9ff',
          overflow: 'hidden',
        }}
      >
        {!destroyed && (
          <Tooltip
            placement="top"
            title="This is a long tooltip. It will be auto adjusted if it is longer than the available space."
            getPopupContainer={getPopupContainer}
          >
            <Button
              style={{ width: 100, position: 'absolute', left: 70, top: destroyed ? 20 : 80 }}
              onClick={() => setDestroyed((c) => !c)}
            >
              {destroyed ? 'Destroyed' : 'Reposition'}
            </Button>
          </Tooltip>
        )}
      </div>
    </div>
  );
};

export default App;

----------------------------------------

TITLE: Documenting Nested Form Fields in Ant Design (Markdown)
DESCRIPTION: Explains how to extend the 'field' property for nested form fields in Ant Design. It instructs to apply 'field.name' to control nested items.

LANGUAGE: Markdown
CODE:
## zh-CN

嵌套表单字段需要对 `field` 进行拓展，将 `field.name` 应用于控制字段。

## en-US

Nest dynamic field need extends `field`. Pass `field.name` to nest item.

----------------------------------------

TITLE: Implementing Custom DatePicker with Moment.js in TypeScript
DESCRIPTION: Creates a custom DatePicker component using Moment.js instead of the default Day.js. Uses the generatePicker utility from antd with moment configuration.

LANGUAGE: tsx
CODE:
import { DatePicker } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/lib/generate/moment';

const MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);

export default MyDatePicker;

----------------------------------------

TITLE: Configuring Message Component - JavaScript
DESCRIPTION: Configuration options for the Message component including RTL support, duration, position and prefix class name settings.

LANGUAGE: javascript
CODE:
message.config({
  top: 100,
  duration: 2,
  maxCount: 3,
  rtl: true,
  prefixCls: 'my-message',
});

----------------------------------------

TITLE: Rendering QRCode with Different Statuses in React
DESCRIPTION: Demonstrates how to use the status prop to display different states of the QRCode.

LANGUAGE: jsx
CODE:
<code src="./demo/status.tsx">不同的状态</code>

----------------------------------------

TITLE: Importing AutoComplete Examples in React
DESCRIPTION: These code snippets demonstrate how to import and use various AutoComplete examples in a React application. They cover basic usage, customization, and specific features of the AutoComplete component.

LANGUAGE: markdown
CODE:
<code src="./demo/basic.tsx">Basic Usage</code>
<code src="./demo/options.tsx">Customized</code>
<code src="./demo/custom.tsx">Customize Input Component</code>
<code src="./demo/non-case-sensitive.tsx">Non-case-sensitive AutoComplete</code>
<code src="./demo/certain-category.tsx">Lookup-Patterns - Certain Category</code>
<code src="./demo/uncertain-category.tsx">Lookup-Patterns - Uncertain Category</code>
<code src="./demo/status.tsx">Status</code>
<code src="./demo/variant.tsx" version="5.13.0">Variants</code>
<code src="./demo/allowClear.tsx">Customize clear button</code>
<code src="./demo/form-debug.tsx" debug>Debug in Form</code>
<code src="./demo/AutoComplete-and-Select.tsx" debug>AutoComplete and Select</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>

----------------------------------------

TITLE: Comparing Button Type and Color/Variant in React
DESCRIPTION: These snippets show the equivalence between using the 'type' prop and the combination of 'color' and 'variant' props for buttons. The first example uses 'type', while the second achieves the same result with 'color' and 'variant'.

LANGUAGE: jsx
CODE:
<Button type="primary">click</Button>

LANGUAGE: jsx
CODE:
<Button color="primary" variant="solid">
  click
</Button>

----------------------------------------

TITLE: Rendering Cascader Components with Different Sizes in React
DESCRIPTION: This code snippet demonstrates how to create Cascader components of different sizes using Ant Design in a React application. It showcases the 'large', default, and 'small' size options.

LANGUAGE: JSX
CODE:
import { Cascader } from 'antd';
import React from 'react';

const options = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];

const onChange = (value) => {
  console.log(value);
};

const App = () => (
  <>
    <Cascader size="large" options={options} onChange={onChange} />
    <br />
    <br />
    <Cascader options={options} onChange={onChange} />
    <br />
    <br />
    <Cascader size="small" options={options} onChange={onChange} />
    <br />
    <br />
  </>
);

export default App;

----------------------------------------

TITLE: Documentation for Container-Nested Component
DESCRIPTION: Multi-language documentation explaining usage of a component meant to be nested inside containers with limited space. Includes both Chinese (zh-CN) and English (en-US) descriptions.

LANGUAGE: markdown
CODE:
## zh-CN

用于嵌套在空间有限的容器中。

## en-US

Nested inside a container element for rendering in limited space.

----------------------------------------

TITLE: Configuring DatePicker Locale in React
DESCRIPTION: Example of how to set up internationalization for DatePicker using ConfigProvider and dayjs locales.

LANGUAGE: jsx
CODE:
import locale from 'antd/locale/zh_CN';
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

<ConfigProvider locale={locale}>
  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />
</ConfigProvider>;

----------------------------------------

TITLE: Importing and Using Carousel Component in React
DESCRIPTION: This snippet demonstrates how to import and use the Carousel component in a React application. It includes examples for basic usage, positioning, autoplay, fade effect, and custom arrows.

LANGUAGE: tsx
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/position.tsx">位置</code>
<code src="./demo/autoplay.tsx">自动切换</code>
<code src="./demo/fade.tsx">渐显</code>
<code src="./demo/arrows.tsx" version="5.17.0">切换箭头</code>
<code src="./demo/dot-duration.tsx" version="5.24.0">进度条</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Chaining Messages with Promise Interface in Ant Design React
DESCRIPTION: This snippet demonstrates how to use the promise interface of the Ant Design message component to display a new message when the previous one is about to close. It utilizes the 'then' method to chain message displays.

LANGUAGE: jsx
CODE:
const success = () => {
  message
    .loading('Action in progress..', 2.5)
    .then(() => message.success('Loading finished', 2.5))
    .then(() => message.info('Loading finished is finished', 2.5));
};

ReactDOM.render(
  <Button onClick={success}>Display sequential messages</Button>,
  mountNode,
);

----------------------------------------

TITLE: Describing Accordion Mode in Ant Design
DESCRIPTION: Provides multilingual descriptions of the accordion mode functionality in Ant Design. It explains that in this mode, only one panel can be expanded at a time, ensuring a compact and organized interface.

LANGUAGE: Markdown
CODE:
## zh-CN

手风琴模式，始终只有一个面板处在激活状态。

## en-US

In accordion mode, only one panel can be expanded at a time.

----------------------------------------

TITLE: Attempted Conditional Rendering of FormProvider (TSX)
DESCRIPTION: Illustrates an unsuccessful attempt to optimize ConfigProvider by conditionally rendering FormProvider based on the presence of validateMessages.

LANGUAGE: tsx
CODE:
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  let node = children;

  if (validateMessages) {
    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;
  }

  return node;
};

----------------------------------------

TITLE: Rendering Breadcrumb Components in React
DESCRIPTION: Demonstrates two ways of rendering Breadcrumb components: using the new 'items' prop (recommended for version 5.3.0 and above) and the older method using child components (deprecated in version 5.3.0). Also shows usage with 'routes' prop.

LANGUAGE: jsx
CODE:
// works when >=5.3.0, recommended ✅
return <Breadcrumb items={[{ title: 'sample' }]} />;

// works when <5.3.0, deprecated when >=5.3.0 🙅🏻‍♀️
return (
  <Breadcrumb>
    <Breadcrumb.Item>sample</Breadcrumb.Item>
  </Breadcrumb>
);

// or

return <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;

----------------------------------------

TITLE: Configuring Built-in Themes in Ant Design
DESCRIPTION: Demonstrates the available theme options in Ant Design. The framework provides two built-in themes: light and dark, with light being the default theme setting.

LANGUAGE: markdown
CODE:
`light` and `dark`

----------------------------------------

TITLE: Component Mouse Event Props Example
DESCRIPTION: List of required mouse and pointer event props that must be passed to child components for tooltips to function properly.

LANGUAGE: text
CODE:
onMouseEnter, onMouseLeave, onPointerEnter, onPointerLeave, onFocus, onClick

----------------------------------------

TITLE: Styling Editable Cells in CSS for ant-design Table
DESCRIPTION: This CSS snippet provides styling for editable cells in an ant-design table. It defines styles for the editable cell, its value wrapper, and hover effects for the editable row.

LANGUAGE: CSS
CODE:
.editable-cell {
  position: relative;
}

.editable-cell-value-wrap {
  padding: 5px 12px;
  cursor: pointer;
}

.editable-row:hover .editable-cell-value-wrap {
  padding: 4px 11px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
}

----------------------------------------

TITLE: Less Migration Configuration
DESCRIPTION: Webpack configuration for migrating Less variables from v4 to v5

LANGUAGE: javascript
CODE:
const { theme } = require('antd/lib');
const { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');

const { defaultAlgorithm, defaultSeed } = theme;

const mapV5Token = defaultAlgorithm(defaultSeed);
const v5Vars = convertLegacyToken(mapV5Token);
const mapV4Token = theme.getDesignToken(defaultTheme);
const v4Vars = convertLegacyToken(mapV4Token);

module.exports = {
  loader: 'less-loader',
  options: {
    lessOptions: {
      modifyVars: v5Vars, // or v4Vars
    },
  },
};

----------------------------------------

TITLE: Configuring Custom Row Selection in Ant Design Table (Markdown)
DESCRIPTION: This snippet explains how to use the rowSelection.selections property to customize selection options in an Ant Design Table component. It mentions that by default, no dropdown is shown, but setting it to true will display default selection options.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `rowSelection.selections` 自定义选择项，默认不显示下拉选项，设为 `true` 时显示默认选择项。

## en-US

Use `rowSelection.selections` custom selections, default no select dropdown, show default selections via setting to `true`.

----------------------------------------

TITLE: Rendering Circular Progress Bars with ant-design in React
DESCRIPTION: This code snippet demonstrates how to create circular progress bars using the Progress component from ant-design. It showcases different styles and configurations of circular progress indicators.

LANGUAGE: JSX
CODE:
import { Progress, Space } from 'antd';

const App: React.FC = () => (
  <Space wrap>
    <Progress type="circle" percent={75} />
    <Progress type="circle" percent={70} status="exception" />
    <Progress type="circle" percent={100} />
  </Space>
);

export default App;

----------------------------------------

TITLE: Customizing Ant Design Theme with ConfigProvider
DESCRIPTION: React component example demonstrating how to use ConfigProvider to customize the Ant Design theme. This shows how to change the primary color of the antd components.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

const App: React.FC = () => (
  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
    <MyApp />
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Configuring Space Component Alignment with CSS
DESCRIPTION: CSS styles for creating a flexible container with aligned space blocks. Defines a container with flex layout and wrapped items, along with styling for individual blocks and their mock content.

LANGUAGE: css
CODE:
.space-align-container {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
}
.space-align-block {
  flex: none;
  margin: 8px 4px;
  padding: 4px;
  border: 1px solid #40a9ff;
}
.space-align-block .mock-block {
  display: inline-block;
  padding: 32px 8px 16px;
  background: rgba(150, 150, 150, 0.2);
}

----------------------------------------

TITLE: Debugging Splitter Component
DESCRIPTION: This code snippet is used for debugging purposes, demonstrating various scenarios and edge cases for the Splitter component.

LANGUAGE: jsx
CODE:
<code src="./demo/debug.tsx" debug>调试</code>

----------------------------------------

TITLE: Mini Pagination - TSX
DESCRIPTION: Small-sized pagination control for scenarios requiring lightweight navigation in limited space.

LANGUAGE: tsx
CODE:
./design/demo/mini

----------------------------------------

TITLE: FloatButton API Specification - TypeScript
DESCRIPTION: API interface documentation for the FloatButton component, including common properties, group properties, and BackTop functionality specifications.

LANGUAGE: typescript
CODE:
interface FloatButtonProps {
  icon?: ReactNode;
  description?: ReactNode;
  tooltip?: ReactNode | (() => ReactNode);
  type?: 'default' | 'primary';
  shape?: 'circle' | 'square';
  onClick?: (event: Event) => void;
  href?: string;
  target?: string;
  htmlType?: 'submit' | 'reset' | 'button';
  badge?: BadgeProps;
}

LANGUAGE: typescript
CODE:
interface FloatButtonGroupProps {
  shape?: 'circle' | 'square';
  trigger?: 'click' | 'hover';
  open?: boolean;
  closeIcon?: React.ReactNode;
  placement?: 'top' | 'left' | 'right' | 'bottom';
  onOpenChange?: (open: boolean) => void;
  onClick?: (event: Event) => void;
}

LANGUAGE: typescript
CODE:
interface FloatButtonBackTopProps {
  duration?: number;
  target?: () => HTMLElement;
  visibilityHeight?: number;
  onClick?: () => void;
}

----------------------------------------

TITLE: Implementing Connected Tree Structure in React with Ant Design
DESCRIPTION: This code snippet shows how to create a tree component with connected lines using Ant Design's Tree component in React. It demonstrates the usage of 'showLine' prop to enable connected lines and 'switcherIcon' prop to customize the default expand/collapse icon.

LANGUAGE: jsx
CODE:
import { CarryOutOutlined, FormOutlined } from '@ant-design/icons';
import { Switch, Tree } from 'antd';
import React, { useState } from 'react';
const treeData = [
  {
    title: 'parent 1',
    key: '0-0',
    icon: <CarryOutOutlined />,
    children: [
      {
        title: 'parent 1-0',
        key: '0-0-0',
        icon: <CarryOutOutlined />,
        children: [
          {
            title: 'leaf',
            key: '0-0-0-0',
            icon: <CarryOutOutlined />,
          },
          {
            title: (
              <>
                <div>multiple line title</div>
                <div>multiple line title</div>
              </>
            ),
            key: '0-0-0-1',
            icon: <CarryOutOutlined />,
          },
          {
            title: 'leaf',
            key: '0-0-0-2',
            icon: <CarryOutOutlined />,
          },
        ],
      },
      {
        title: 'parent 1-1',
        key: '0-0-1',
        icon: <CarryOutOutlined />,
        children: [
          {
            title: 'leaf',
            key: '0-0-1-0',
            icon: <CarryOutOutlined />,
          },
        ],
      },
      {
        title: 'parent 1-2',
        key: '0-0-2',
        icon: <CarryOutOutlined />,
        children: [
          {
            title: 'leaf',
            key: '0-0-2-0',
            icon: <CarryOutOutlined />,
          },
          {
            title: 'leaf',
            key: '0-0-2-1',
            icon: <CarryOutOutlined />,
            switcherIcon: <FormOutlined />,
          },
        ],
      },
    ],
  },
  {
    title: 'parent 2',
    key: '0-1',
    icon: <CarryOutOutlined />,
    children: [
      {
        title: 'parent 2-0',
        key: '0-1-0',
        icon: <CarryOutOutlined />,
        children: [
          {
            title: 'leaf',
            key: '0-1-0-0',
            icon: <CarryOutOutlined />,
          },
          {
            title: 'leaf',
            key: '0-1-0-1',
            icon: <CarryOutOutlined />,
          },
        ],
      },
    ],
  },
];
const App = () => {
  const [showLine, setShowLine] = useState(true);
  const [showIcon, setShowIcon] = useState(false);
  const [showLeafIcon, setShowLeafIcon] = useState(true);
  const onSelect = (selectedKeys, info) => {
    console.log('selected', selectedKeys, info);
  };
  const onSetLeafIcon = (checked) => {
    setShowLeafIcon(checked);
    setShowLine({
      showLeafIcon: checked,
    });
  };
  const onSetShowLine = (checked) => {
    setShowLine(checked ? { showLeafIcon } : false);
  };
  return (
    <>
      <div
        style={{
          marginBottom: 16,
        }}
      >
        showLine: <Switch checked={!!showLine} onChange={onSetShowLine} />
        <br />
        <br />
        showIcon: <Switch checked={showIcon} onChange={setShowIcon} />
        <br />
        <br />
        showLeafIcon: <Switch checked={showLeafIcon} onChange={onSetLeafIcon} />
      </div>
      <Tree
        showLine={showLine}
        showIcon={showIcon}
        defaultExpandedKeys={['0-0-0']}
        onSelect={onSelect}
        treeData={treeData}
      />
    </>
  );
};
export default App;

----------------------------------------

TITLE: Result Component API Table - Markdown
DESCRIPTION: API documentation table showing the available properties for the Result component, including their descriptions, types, and default values.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| --- | --- | --- | --- |
| extra | Operating area | ReactNode | - |
| icon | Custom back icon | ReactNode | - |
| status | Result status, decide icons and colors | `success` \| `error` \| `info` \| `warning` \| `404` \| `403` \| `500` | `info` |
| subTitle | The subTitle | ReactNode | - |
| title | The title | ReactNode | - |

----------------------------------------

TITLE: Importing Skeleton Component in React
DESCRIPTION: Code examples for importing and using the Skeleton component in React applications. These snippets demonstrate different configurations and use cases.

LANGUAGE: tsx
CODE:
<code src="./demo/basic.tsx">基本</code>

LANGUAGE: tsx
CODE:
<code src="./demo/complex.tsx">复杂的组合</code>

LANGUAGE: tsx
CODE:
<code src="./demo/active.tsx">动画效果</code>

LANGUAGE: tsx
CODE:
<code src="./demo/element.tsx">按钮/头像/输入框/图像/自定义节点</code>

LANGUAGE: tsx
CODE:
<code src="./demo/children.tsx">包含子组件</code>

LANGUAGE: tsx
CODE:
<code src="./demo/list.tsx">列表</code>

LANGUAGE: tsx
CODE:
<code src="./demo/componentToken.tsx" debug>自定义组件 Token</code>

----------------------------------------

TITLE: Custom Preview Image
DESCRIPTION: Demonstrates how to use a custom preview image different from the main image.

LANGUAGE: typescript
CODE:
<code src="./demo/previewSrc.tsx">自定义预览图片</code>

----------------------------------------

TITLE: Configuring Drawer Dimensions in ant-design
DESCRIPTION: Specifies the width options available for the Drawer component. The default width is 378px, with a preset large size option of 736px that can be set using the size property.

LANGUAGE: css
CODE:
378px

LANGUAGE: css
CODE:
736px

----------------------------------------

TITLE: Styling Custom Preview Mask in CSS for Ant Design
DESCRIPTION: This CSS snippet defines styles for a custom preview mask in Ant Design. It sets a larger font size and full opacity for the mask, with an even larger font size for icons within the mask.

LANGUAGE: css
CODE:
.customize-mask {
  font-size: 20px;
  opacity: 1;
}
.customize-mask .anticon {
  font-size: 32px;
}

----------------------------------------

TITLE: Importing Badge Component in TypeScript
DESCRIPTION: Example of importing and using the Badge component in a TypeScript React file. This snippet demonstrates basic usage of the Badge component.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">基本</code>

----------------------------------------

TITLE: Disabling Pointer Events for Dragged Items in CSS
DESCRIPTION: This CSS snippet disables pointer events for anchor tags within elements that are being dragged. This prevents accidental clicks or interactions while an item is being moved.

LANGUAGE: CSS
CODE:
.is-dragging a {
  pointer-events: none;
}

----------------------------------------

TITLE: Implementing Dynamic Badge Count Animation in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a badge with a dynamically changing count that animates smoothly. It uses React hooks and Ant Design components to achieve this effect.

LANGUAGE: jsx
CODE:
import { Badge, Button, Switch } from 'antd';
import { useState } from 'react';

const App: React.FC = () => {
  const [count, setCount] = useState(5);
  const [show, setShow] = useState(true);

  const increase = () => {
    setCount(count + 1);
  };

  const decline = () => {
    let newCount = count - 1;
    if (newCount < 0) {
      newCount = 0;
    }
    setCount(newCount);
  };

  const random = () => {
    const newCount = Math.floor(Math.random() * 100);
    setCount(newCount);
  };

  const onChange = (checked: boolean) => {
    setShow(checked);
  };

  return (
    <>
      <Badge count={show ? count : 0} showZero color="#faad14">
        <div className="head-example" />
      </Badge>
      <br />
      <Badge count={show ? count : 0} showZero color="#52c41a">
        <div className="head-example" />
      </Badge>
      <br />
      <Badge count={show ? count : 0} showZero>
        <div className="head-example" />
      </Badge>
      <div style={{ marginTop: 10 }}>
        <Button onClick={decline}>-</Button>
        <Button onClick={increase}>+</Button>
        <Button onClick={random}>random</Button>
        <Switch onChange={onChange} checked={show} style={{ marginLeft: 10 }} />
      </div>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Documenting Image Upload with Thumbnail Preview in Ant Design
DESCRIPTION: Explains how to implement image upload with local thumbnail preview in Ant Design. For IE8/9 which don't support local thumbnail display, it suggests using the 'thumbUrl' attribute as an alternative.

LANGUAGE: markdown
CODE:
## zh-CN

上传文件为图片，可展示本地缩略图。`IE8/9` 不支持浏览器本地缩略图展示（[Ref](https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL)），可以写 `thumbUrl` 属性来代替。

## en-US

If uploaded file is a picture, the thumbnail can be shown. `IE8/9` do not support local thumbnail show. Please use `thumbUrl` instead.

----------------------------------------

TITLE: Styling Date Picker Type Selector in Ant Design
DESCRIPTION: This CSS snippet provides styling for the date picker type selector component. It sets a specific width for the select dropdown and adds some margin to separate it from the date picker.

LANGUAGE: css
CODE:
.code-box-demo .ant-select {
  margin: 0 8px 10px 0;
}

----------------------------------------

TITLE: Creating Steps Progress Circle in TypeScript
DESCRIPTION: Demonstration of creating a stepped progress circle with multiple stages using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/circle-steps.tsx" version="5.16.0">步骤进度圈</code>

----------------------------------------

TITLE: Implementing Block Buttons in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to use the 'block' property on Ant Design buttons in a React component. The block property makes the buttons expand to fit the full width of their parent container.

LANGUAGE: jsx
CODE:
import { Button, Space } from 'antd';

const App: React.FC = () => (
  <Space direction="vertical" style={{ width: '100%' }}>
    <Button type="primary" block>
      Primary
    </Button>
    <Button block>Default</Button>
    <Button type="dashed" block>
      Dashed
    </Button>
    <Button disabled block>
      disabled
    </Button>
    <Button type="text" block>
      text
    </Button>
    <Button type="link" block>
      Link
    </Button>
  </Space>
);

export default App;

----------------------------------------

TITLE: AutoComplete API Properties Table
DESCRIPTION: Markdown table defining the API properties of the AutoComplete component, including parameter names, descriptions, types, default values and version information.

LANGUAGE: markdown
CODE:
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| allowClear | 支持清除 | boolean \| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |
| autoFocus | 自动获取焦点 | boolean | false |  |
| backfill | 使用键盘选择选项的时候把选中项回填到输入框中 | boolean | false |  |

----------------------------------------

TITLE: Implementing Collapse Panel Examples in React TSX
DESCRIPTION: Demonstrates two ways to implement collapse panels - the recommended approach for version 5.6.0+ and the legacy approach for earlier versions. Shows how to create collapsible content areas with headers and nested text content.

LANGUAGE: tsx
CODE:
// >= 5.6.0 可用，推荐的写法 ✅
const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const items: CollapseProps['items'] = [
  {
    key: '1',
    label: 'This is panel header 1',
    children: <p>{text}</p>,
  },
  {
    key: '2',
    label: 'This is panel header 2',
    children: <p>{text}</p>,
  },
  {
    key: '3',
    label: 'This is panel header 3',
    children: <p>{text}</p>,
  },
];

<Collapse items={items} defaultActiveKey={['1']} />;

// <5.6.0 可用，>=5.6.0 时不推荐 🙅🏻‍♀️

<Collapse defaultActiveKey={['1']} onChange={onChange}>
  <Panel header="This is panel header 1" key="1">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 2" key="2">
    <p>{text}</p>
  </Panel>
  <Panel header="This is panel header 3" key="3">
    <p>{text}</p>
  </Panel>
</Collapse>;

----------------------------------------

TITLE: Configuring Closable Card Tabs in Ant Design
DESCRIPTION: Example showing how to configure card-style tabs with closable property. Shows how to disable tab closing using closable={false} property.

LANGUAGE: markdown
CODE:
## zh-CN

只有卡片样式的页签支持新增和关闭选项。使用 `closable={false}` 禁止关闭。

## en-US

Only card type Tabs support adding & closable. +Use `closable={false}` to disable close.

----------------------------------------

TITLE: Configuring Visual Elements in Ant Design Select
DESCRIPTION: Shows the three main customization props available for Ant Design Select components: prefix for custom prefix content, suffixIcon for the dropdown arrow icon, and expandIcon for submenu expansion indicators.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `prefix` 自定前缀，通过 `suffixIcon` 自定义选择框后缀图标，通过 `expandIcon` 自定义次级菜单展开图标。

## en-US

Use `prefix` to customize the prefix content, use `suffixIcon` to customize the selection box suffix icon, and use `expandIcon` to customize the current item expand icon.

----------------------------------------

TITLE: Integrating Typography with React Router - TypeScript
DESCRIPTION: Example code showing how to use Typography.Link component with react-router by customizing the Link component rendering.

LANGUAGE: tsx
CODE:
<Link to="/" component={Typography.Link} />

----------------------------------------

TITLE: Initializing Calendar Component with Localization in React
DESCRIPTION: This snippet demonstrates how to set up and use the Calendar component with proper localization. It shows the global setup for dayjs locale and the basic usage of the Calendar component with custom rendering and event handlers.

LANGUAGE: jsx
CODE:
// 默认语言为 en-US，所以如果需要使用其他语言，推荐在入口文件全局设置 locale
// import dayjs from 'dayjs';
// import 'dayjs/locale/zh-cn';
// dayjs.locale('zh-cn');

<Calendar cellRender={cellRender} onPanelChange={onPanelChange} onSelect={onSelect} />

----------------------------------------

TITLE: Creating Dynamic Styles with CSS-in-JS in React
DESCRIPTION: This example demonstrates how to create dynamic styles using CSS-in-JS (antd-style) in React. It shows how to use ConfigProvider's context to get the correct prefix for class names, ensuring compatibility with custom prefixes.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';
import { createStyles } from 'antd-style';

const useButtonStyle = () => {
  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');

  // Customize styles
  return createStyles(({ css }) => ({
    btn: css`
      background: red;
      .${btnPrefixCls}-icon {
        color: green;
      }
    `,
  }))();
};

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { styles } = useButtonStyle();
  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;
};

export default GeekProvider;

----------------------------------------

TITLE: Rendering Ant Design Buttons with Text and Icons in React
DESCRIPTION: This code snippet demonstrates how to create buttons using Ant Design components that include both text labels and icons. It showcases various button types and styles.

LANGUAGE: JSX
CODE:
import { Button } from 'antd';
import { SearchOutlined } from '@ant-design/icons';

ReactDOM.render(
  <>
    <Button type="primary" icon={<SearchOutlined />}>
      Search
    </Button>
    <Button icon={<SearchOutlined />}>Search</Button>
    <Button type="dashed" icon={<SearchOutlined />}>
      Search
    </Button>
    <Button type="link" icon={<SearchOutlined />}>
      Search
    </Button>
  </>,
  mountNode,
);

----------------------------------------

TITLE: GetRef Usage for Component Refs
DESCRIPTION: Illustrates how to use GetRef utility type to extract ref types from both custom and antd components.

LANGUAGE: tsx
CODE:
import React, { forwardRef } from 'react';
import type { GetRef, Select } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

const Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);
type DomRefType = GetRef<typeof Div>; // HTMLDivElement

----------------------------------------

TITLE: Installing @ant-design/icons Package
DESCRIPTION: Shows how to install the @ant-design/icons package using various package managers.

LANGUAGE: shell
CODE:
npm install @ant-design/icons --save

LANGUAGE: shell
CODE:
yarn add @ant-design/icons

LANGUAGE: shell
CODE:
pnpm install @ant-design/icons --save

LANGUAGE: shell
CODE:
bun add @ant-design/icons

----------------------------------------

TITLE: Styling MessageOutlined Icon
DESCRIPTION: Shows how to apply custom styling to an icon using style props.

LANGUAGE: jsx
CODE:
import { MessageOutlined } from '@ant-design/icons';

<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;

----------------------------------------

TITLE: Implementing Mentions Component in React - New vs Legacy Syntax
DESCRIPTION: Demonstrates the new recommended syntax (>= 5.1.0) for implementing Mentions component compared to the legacy approach. The new syntax offers better performance and simpler data organization.

LANGUAGE: jsx
CODE:
// >=5.1.0 可用，推荐的写法 ✅
const options = [{ value: 'sample', label: 'sample' }];
return <Mentions options={options} />;

// <5.1.0 可用，>=5.1.0 时不推荐 🙅🏻‍♀️
return (
  <Mentions onChange={onChange}>
    <Mentions.Option value="sample">Sample</Mentions.Option>
  </Mentions>
);

----------------------------------------

TITLE: Modal Router Integration in JSX
DESCRIPTION: Example showing how to automatically destroy all confirmation modals during router changes.

LANGUAGE: jsx
CODE:
import { browserHistory } from 'react-router';

// router change
browserHistory.listen(() => {
  Modal.destroyAll();
});

----------------------------------------

TITLE: Configuring Button Wave Effect in React
DESCRIPTION: This snippet demonstrates how to disable the click wave effect for buttons using the ConfigProvider component in Ant Design.

LANGUAGE: jsx
CODE:
<ConfigProvider wave={{ disabled: true }}>
  <Button>click</Button>
</ConfigProvider>

----------------------------------------

TITLE: Rendering Statistics in Cards with Ant Design in TypeScript
DESCRIPTION: This snippet showcases how to display statistical data using Statistic components within Card layouts. It demonstrates various formatting options and icon usage.

LANGUAGE: typescript
CODE:
import React from 'react';
import { Card, Col, Row, Statistic } from 'antd';
import { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';

const App: React.FC = () => (
  <Row gutter={16}>
    <Col span={12}>
      <Card bordered={false}>
        <Statistic
          title="Active"
          value={11.28}
          precision={2}
          valueStyle={{ color: '#3f8600' }}
          prefix={<ArrowUpOutlined />}
          suffix="%"
        />
      </Card>
    </Col>
    <Col span={12}>
      <Card bordered={false}>
        <Statistic
          title="Idle"
          value={9.3}
          precision={2}
          valueStyle={{ color: '#cf1322' }}
          prefix={<ArrowDownOutlined />}
          suffix="%"
        />
      </Card>
    </Col>
  </Row>
);

export default App;

----------------------------------------

TITLE: Configuring px2rem Transformer
DESCRIPTION: Example showing how to set up px to rem unit conversion for responsive design.

LANGUAGE: tsx
CODE:
import { px2remTransformer, StyleProvider } from '@ant-design/cssinjs';

const px2rem = px2remTransformer({
  rootValue: 32, // 32px = 1rem; @default 16
});

export default () => (
  <StyleProvider transformers={[px2rem]}>
    <MyApp />
  </StyleProvider>
);

----------------------------------------

TITLE: Documenting Switch Loading State in Chinese
DESCRIPTION: This snippet provides a brief description in Chinese explaining how to indicate that a switch operation is still in progress.

LANGUAGE: Markdown
CODE:
## zh-CN

标识开关操作仍在执行中。

----------------------------------------

TITLE: Implementing Global Locale Hack for Static Methods in React
DESCRIPTION: This snippet demonstrates a hacky implementation to provide global locale for static methods in React, using a global variable to store and retrieve locale information.

LANGUAGE: tsx
CODE:
// Sample. Not real world code.
let globalLocale = null;

const ConfigProvider = (props) => {
  if (props.locale) {
    globalLocale = props.locale;
  }

  // ...
};

Modal.confirm = (props) => {
  // ...

  ReactDOM.render(
    <ConfigProvider locale={globalLocale}>
      <Modal {...modalProps} />
    </ConfigProvider>,
  );
};

----------------------------------------

TITLE: Basic Skeleton Component API Table
DESCRIPTION: API documentation table showing the main properties of the Skeleton component, including active, avatar, loading, paragraph, round, and title props.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| --- | --- | --- | --- |
| active | Show animation effect | boolean | false |
| avatar | Show avatar placeholder | boolean \| [SkeletonAvatarProps](#skeletonavatarprops) | false |
| loading | Display the skeleton when true | boolean | - |
| paragraph | Show paragraph placeholder | boolean \| [SkeletonParagraphProps](#skeletonparagraphprops) | true |
| round | Show paragraph and title radius when true | boolean | false |
| title | Show title placeholder | boolean \| [SkeletonTitleProps](#skeletontitleprops) | true |

----------------------------------------

TITLE: Installing Additional Dependencies
DESCRIPTION: Commands to install additional dependencies including Umi plugins, Ant Design, Axios, and Ant Design Pro components.

LANGUAGE: bash
CODE:
$ pnpm i @umijs/plugins -D
$ pnpm i antd axios @ant-design/pro-components -S

----------------------------------------

TITLE: Documenting holderRender Usage for Ant Design Components
DESCRIPTION: Provides multilingual documentation on using holderRender to set Providers for static methods in Ant Design. It covers message, modal, and notification components.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `holderRender` 给 `message` 、`modal` 、`notification` 静态方法设置 `Provider`

## en-US

Use `holderRender` to set the `Provider` for the static methods `message` 、`modal` 、`notification`.

----------------------------------------

TITLE: Implementing Extra Actions in Ant Design Drawer (Markdown)
DESCRIPTION: This snippet provides instructions in Chinese and English for adding extra action buttons to an Ant Design Drawer component. It emphasizes using the 'extra' prop to place these buttons in the top-right corner of the drawer, adhering to Ant Design specifications.

LANGUAGE: Markdown
CODE:
## zh-CN

在 Ant Design 规范中，操作按钮建议放在抽屉的右上角，可以使用 `extra` 属性来实现。

## en-US

Extra actions should be placed at corner of drawer in Ant Design, you can use `extra` prop for that.

----------------------------------------

TITLE: Configuring Upward Expanding Autocomplete in Ant Design (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure an Autocomplete component in Ant Design to display suggestions expanding upwards. It uses the 'placement' prop set to 'top' to achieve this behavior.

LANGUAGE: TypeScript
CODE:
import { AutoComplete } from 'antd';
import React from 'react';

const options = [
  { value: 'Burns Bay Road' },
  { value: 'Downing Street' },
  { value: 'Wall Street' },
];

const App: React.FC = () => (
  <AutoComplete
    style={{ width: 200 }}
    options={options}
    placeholder="try to type `b`"
    filterOption={(inputValue, option) =>
      option!.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1
    }
    placement="top"
  />
);

export default App;

----------------------------------------

TITLE: Configuring Popover Placement in Ant Design
DESCRIPTION: Shows documentation in Chinese and English for using the placement property to control popup positioning. The placement prop allows manual specification of where tooltips, popovers and other floating elements appear relative to their trigger element.

LANGUAGE: markdown
CODE:
## zh-CN

可以通过 `placement` 手动指定弹出的位置。

## en-US

You can manually specify the position of the popup via `placement`.

----------------------------------------

TITLE: Implementing Simple Pagination with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create a basic pagination component using Ant Design in a React application. It imports the necessary components and sets up a simple pagination with default settings.

LANGUAGE: tsx
CODE:
import { Pagination } from 'antd';
import React from 'react';

const App: React.FC = () => <Pagination defaultCurrent={1} total={50} />;

export default App;

----------------------------------------

TITLE: Semantic DOM Structure Example - TypeScript/React
DESCRIPTION: Example showing the semantic DOM structure of the Drawer component with classNames and styles configuration.

LANGUAGE: typescript
CODE:
type SemanticDOM = \"header\" | \"body\" | \"footer\" | \"mask\" | \"wrapper\" | \"close\" | \"content\";

----------------------------------------

TITLE: Importing Badge Component Examples in React
DESCRIPTION: These code snippets demonstrate how to import and use various Badge component examples in a React application using Ant Design.

LANGUAGE: tsx
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/no-wrapper.tsx">Standalone</code>
<code src="./demo/overflow.tsx">Overflow Count</code>
<code src="./demo/dot.tsx">Red badge</code>
<code src="./demo/change.tsx">Dynamic</code>
<code src="./demo/link.tsx">Clickable</code>
<code src="./demo/offset.tsx">Offset</code>
<code src="./demo/size.tsx">Size</code>
<code src="./demo/status.tsx">Status</code>
<code src="./demo/colorful.tsx">Colorful Badge</code>
<code src="./demo/ribbon.tsx">Ribbon</code>
<code src="./demo/ribbon-debug.tsx" debug>Ribbon Debug</code>
<code src="./demo/mix.tsx" debug>Mixed usage</code>
<code src="./demo/title.tsx" debug>Title</code>
<code src="./demo/colorful-with-count-debug.tsx" debug>Colorful Badge support count Debug</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Defining Typography Ellipsis Configuration - TypeScript
DESCRIPTION: TypeScript interface definition for ellipsis configuration in Typography components, including options for expandable text, rows, suffix, and callbacks.

LANGUAGE: typescript
CODE:
interface EllipsisConfig {
  rows: number;
  /** `collapsible` added in `5.16.0` */
  expandable: boolean | 'collapsible';
  suffix: string;
  /** render function added in `5.16.0` */
  symbol: ReactNode | ((expanded: boolean) => ReactNode);
  tooltip: ReactNode | TooltipProps;
  /** added in `5.16.0` */
  defaultExpanded: boolean;
  /** added in `5.16.0` */
  expanded: boolean;
  /** `info` added in `5.16.0` */
  onExpand: (event: MouseEvent, info: { expanded: boolean }) => void;
  onEllipsis: (ellipsis: boolean) => void;
}

----------------------------------------

TITLE: Unlinking and Reinstalling Dependencies
DESCRIPTION: Shows the commands to unlink a dependency (e.g., rc-field-form) and reinstall it, which is useful after testing local changes to rc-x libraries.

LANGUAGE: bash
CODE:
npm unlink "rc-field-form" --no-save
npm i

----------------------------------------

TITLE: Importing Flex Component in TypeScript
DESCRIPTION: Code snippets demonstrating basic usage, alignment, gap setting, wrapping, and combination of Flex component in ant-design.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">基本布局</code>
<code src="./demo/align.tsx">对齐方式</code>
<code src="./demo/gap.tsx">设置间隙</code>
<code src="./demo/wrap.tsx">自动换行</code>
<code src="./demo/combination.tsx">组合使用</code>
<code src="./demo/debug.tsx" debug>调试专用</code>

----------------------------------------

TITLE: Implementing Non-Case-Sensitive AutoComplete in React with Ant Design
DESCRIPTION: This code snippet creates a React component that renders an AutoComplete input field. It uses a custom filter function to perform case-insensitive matching of input against a predefined list of options. The component demonstrates how to customize Ant Design's AutoComplete behavior.

LANGUAGE: javascript
CODE:
import React from 'react';
import { AutoComplete } from 'antd';

const options = [
  { value: 'Burns Bay Road' },
  { value: 'Downing Street' },
  { value: 'Wall Street' },
];

const App = () => {
  const filterOption = (inputValue, option) =>
    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1;

  return (
    <AutoComplete
      style={{ width: 200 }}
      options={options}
      placeholder="try to type `b`"
      filterOption={filterOption}
    />
  );
};

export default App;

----------------------------------------

TITLE: Implementing Wave Component for Click Effects in React
DESCRIPTION: This code sample shows how the Wave component is used to wrap a button and create a click effect. The Wave component listens for click events on its children and adds a box-shadow animation.

LANGUAGE: tsx
CODE:
// Sample code.
const Button = (
  <Wave>
    <button />
  </Wave>
);

----------------------------------------

TITLE: Implementing ProLayout in Umi
DESCRIPTION: TypeScript React component implementing ProLayout from Ant Design Pro in the Umi application.

LANGUAGE: tsx
CODE:
import { ProLayout } from '@ant-design/pro-components';
import { Link, Outlet, useAppData, useLocation } from 'umi';

export default function Layout() {
  const { clientRoutes } = useAppData();
  const location = useLocation();
  return (
    <ProLayout
      route={clientRoutes[0]}
      location={location}
      title="Umi x Ant Design"
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            <Link to={menuItemProps.path} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
    >
      <Outlet />
    </ProLayout>
  );
}

----------------------------------------

TITLE: Specifying Dependency Version in package.json
DESCRIPTION: Demonstrates how to use the tilde (~) version specifier in package.json to allow patch version updates for dependencies like rc-cascader.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "rc-cascader": "~3.9.0"
  }
}

----------------------------------------

TITLE: Using Divider Component with Text Orientation
DESCRIPTION: Shows how to implement a divider with inner text content where the text position can be controlled using the orientation prop. Supports left, right, and default (center) alignments.

LANGUAGE: markdown
CODE:
## zh-CN

分割线中带有文字，可以用 `orientation` 指定文字位置。

## en-US

Divider with inner title, set `orientation="left/right"` to align it.

----------------------------------------

TITLE: Fixed Sequential Build Function
DESCRIPTION: Corrected implementation using sequential builds to avoid file writing conflicts.

LANGUAGE: typescript
CODE:
for (const config of configs) {
  await vite.build(config);
}

----------------------------------------

TITLE: Cascader Option Interface Definition
DESCRIPTION: TypeScript interface definition for Cascader options, defining the structure of each option item including value, label, disabled state, children, and leaf node properties.

LANGUAGE: typescript
CODE:
interface Option {
  value: string | number;
  label?: React.ReactNode;
  disabled?: boolean;
  children?: Option[];
  // 标记是否为叶子节点，设置了 `loadData` 时有效
  // 设为 `false` 时会强制标记为父节点，即使当前节点没有 children，也会显示展开图标
  isLeaf?: boolean;
}

----------------------------------------

TITLE: Implementing Year Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific year in the DatePicker component. It is used when users only need to input year information.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-year.tsx" description="用于年的选择。用户仅需输入年份时使用。">选择某年</code>

----------------------------------------

TITLE: Importing Alert Component Examples in TypeScript
DESCRIPTION: This section demonstrates how to import various examples of the Alert component using TypeScript. It includes basic usage, styling, closable alerts, descriptions, icons, banners, and more.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/style.tsx">More types</code>
<code src="./demo/closable.tsx">Closable</code>
<code src="./demo/description.tsx">Description</code>
<code src="./demo/icon.tsx">Icon</code>
<code src="./demo/banner.tsx" iframe="250">Banner</code>
<code src="./demo/loop-banner.tsx">Loop Banner</code>
<code src="./demo/smooth-closed.tsx">Smoothly Unmount</code>
<code src="./demo/error-boundary.tsx">ErrorBoundary</code>
<code src="./demo/custom-icon.tsx" debug>Custom Icon</code>
<code src="./demo/action.tsx">Custom action</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Configuring FloatButton Type - Ant Design Markdown
DESCRIPTION: Documentation showing how to use the type property to customize FloatButton appearance. The example is provided in both Chinese and English localization formats.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `type` 改变悬浮按钮的类型。

## en-US

Change the type of the FloatButton with the `type` property.

----------------------------------------

TITLE: Defining Alert Component Styles in Ant Design
DESCRIPTION: This snippet outlines the four available styles for the Alert component in Ant Design: success, info, warning, and error. These styles are used to convey different types of messages or notifications to users.

LANGUAGE: Markdown
CODE:
## zh-CN

共有四种样式 `success`、`info`、`warning`、`error`。

## en-US

There are 4 types of Alert: `success`, `info`, `warning`, `error`.

----------------------------------------

TITLE: Creating ProductList Component
DESCRIPTION: TypeScript React component for displaying a list of products using Ant Design Table and Popconfirm components.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, Popconfirm, Table } from 'antd';
import type { TableProps } from 'antd';

interface DataType {
  id: string;
  name: string;
}

const ProductList: React.FC<{ products: DataType[]; onDelete: (id: string) => void }> = ({
  onDelete,
  products,
}) => {
  const columns: TableProps<DataType>['columns'] = [
    {
      title: 'Name',
      dataIndex: 'name',
    },
    {
      title: 'Actions',
      render(text, record) {
        return (
          <Popconfirm title="Delete?" onConfirm={() => onDelete(record.id)}>
            <Button>Delete</Button>
          </Popconfirm>
        );
      },
    },
  ];
  return <Table rowKey="id" dataSource={products} columns={columns} />;
};

export default ProductList;

----------------------------------------

TITLE: Markdown Front Matter Definition
DESCRIPTION: YAML front matter block defining the document's metadata including group, type, order and title.

LANGUAGE: yaml
CODE:
---
group: 设计模式
type: 原则
order: 8
title: 提供邀请
---

----------------------------------------

TITLE: API Properties Table Format
DESCRIPTION: Table defining the core properties of the ColorPicker component, including types, defaults, and version information.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| :-- | :-- | :-- | :-- | :-- |
| allowClear | Allow clearing color selected | boolean | false | |
| arrow | Configuration for popup arrow | `boolean \| { pointAtCenter: boolean }` | true | |

----------------------------------------

TITLE: Implementing CSS-based Ellipsis in React
DESCRIPTION: This snippet demonstrates how to use CSS properties to implement text truncation with ellipsis for a specified number of lines in a React component. It uses the -webkit-line-clamp property for cross-browser compatibility.

LANGUAGE: tsx
CODE:
<div
  style={{
    display: '-webkit-box',
    overflow: 'hidden',
    WebkitBoxOrient: 'vertical',
    webkitLineClamp: 3,
  }}
>
  {text}
</div>

----------------------------------------

TITLE: Basic Tooltip Content Update Example
DESCRIPTION: Demonstrates how to handle tooltip content updates with caching behavior to avoid flickering when content changes.

LANGUAGE: jsx
CODE:
<Tooltip open={user} title={user?.name} />

----------------------------------------

TITLE: CSS Cache Path Definition
DESCRIPTION: LESS implementation for storing cache path information in CSS

LANGUAGE: less
CODE:
// Just example. Not real world code
.cssinjs-cache-path {
  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';
}

----------------------------------------

TITLE: Custom Snapshot Serializer Configuration
DESCRIPTION: Implementation of a custom snapshot serializer for handling DOM elements consistently across React versions.

LANGUAGE: typescript
CODE:
expect.addSnapshotSerializer({
  test: (element) => element instanceof HTMLElement,
  print: (element) => {
    const htmlContent = format(element, {
      plugins: [plugins.DOMCollection, plugins.DOMElement],
    });
    const filtered = htmlContent
      .split(/[\n\r]+/)
      .filter((line) => line.trim())
      .map((line) => line.replace(/\s+$/, ''))
      .join('\n');
    return filtered;
  },
});

----------------------------------------

TITLE: Implementing Custom Carousel Indicator in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a custom indicator for an Ant Design Carousel component using React. It defines a functional component that renders a Carousel with custom dot indicators.

LANGUAGE: JSX
CODE:
import React from 'react';
import { Carousel } from 'antd';

const contentStyle = {
  height: '160px',
  color: '#fff',
  lineHeight: '160px',
  textAlign: 'center',
  background: '#364d79',
};

const App = () => {
  const onChange = (currentSlide) => {
    console.log(currentSlide);
  };

  return (
    <Carousel afterChange={onChange}>
      <div>
        <h3 style={contentStyle}>1</h3>
      </div>
      <div>
        <h3 style={contentStyle}>2</h3>
      </div>
      <div>
        <h3 style={contentStyle}>3</h3>
      </div>
      <div>
        <h3 style={contentStyle}>4</h3>
      </div>
    </Carousel>
  );
};

export default App;

----------------------------------------

TITLE: Importing and Using Tag Component in React
DESCRIPTION: This snippet demonstrates how to import and use the Tag component in a React application. It includes examples of basic usage, colorful tags, and checkable tags.

LANGUAGE: jsx
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/colorful.tsx">多彩标签</code>
<code src="./demo/colorful-inverse.tsx" debug>反色多彩标签</code>
<code src="./demo/control.tsx">动态添加和删除</code>
<code src="./demo/checkable.tsx">可选择标签</code>
<code src="./demo/animation.tsx">添加动画</code>
<code src="./demo/icon.tsx">图标按钮</code>
<code src="./demo/status.tsx">预设状态的标签</code>
<code src="./demo/borderless.tsx">无边框</code>
<code src="./demo/borderlessLayout.tsx" debug>深色背景中无边框</code>
<code src="./demo/customize.tsx" debug>自定义关闭按钮</code>
<code src="./demo/draggable.tsx">可拖拽标签</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Theme Algorithm Configuration in Ant Design
DESCRIPTION: Shows how to use preset theme algorithms including dark mode and compact mode, with support for algorithm combination.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, ConfigProvider, Input, Space, theme } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      algorithm: theme.darkAlgorithm,
    }}
  >
    <Space>
      <Input placeholder="Please Input" />
      <Button type="primary">Submit</Button>
    </Space>
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Implementing Breadcrumb with browserHistory in React Router
DESCRIPTION: Demonstrates how to use the Breadcrumb component with React Router's browserHistory. It uses the 'itemRender' prop to customize the rendering of each breadcrumb item, creating links for non-last items and a span for the last item.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router';

const items = [
  {
    path: '/index',
    title: 'home',
  },
  {
    path: '/first',
    title: 'first',
    children: [
      {
        path: '/general',
        title: 'General',
      },
      {
        path: '/layout',
        title: 'Layout',
      },
      {
        path: '/navigation',
        title: 'Navigation',
      },
    ],
  },
  {
    path: '/second',
    title: 'second',
  },
];

function itemRender(currentRoute, params, items, paths) {
  const isLast = currentRoute?.path === items[items.length - 1]?.path;

  return isLast ? (
    <span>{currentRoute.title}</span>
  ) : (
    <Link to={`/${paths.join("/")}`}>{currentRoute.title}</Link>
  );
}

return <Breadcrumb itemRender={itemRender} items={items} />;

----------------------------------------

TITLE: Using Timeline Component in React with Ant Design
DESCRIPTION: Demonstrates the recommended usage of the Timeline component in Ant Design version 5.2.0 and above, as well as the deprecated usage for versions below 5.2.0.

LANGUAGE: jsx
CODE:
// works when >=5.2.0, recommended ✅
const items = [{ children: 'sample', label: 'sample' }];
return <Timeline items={items} />;

// works when <5.2.0, deprecated when >=5.2.0 🙅🏻‍♀️
return (
  <Timeline onChange={onChange}>
    <Timeline.Item>Sample</Timeline.Item>
  </Timeline>
);

----------------------------------------

TITLE: Countdown Component Usage
DESCRIPTION: Demonstration of the Countdown subcomponent of Statistic. This shows how to implement a countdown timer using the Statistic component.

LANGUAGE: typescript
CODE:
<code src="./demo/countdown.tsx">倒计时</code>

----------------------------------------

TITLE: Rendering Basic Step Bar in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a simple step bar using the Steps component from Ant Design. It shows three steps with different statuses: finished, in progress, and waiting.

LANGUAGE: JSX
CODE:
import { Steps } from 'antd';

const { Step } = Steps;

const App: React.FC = () => (
  <Steps current={1}>
    <Step title="Finished" description="This is a description." />
    <Step title="In Progress" subTitle="Left 00:00:08" description="This is a description." />
    <Step title="Waiting" description="This is a description." />
  </Steps>
);

export default App;

----------------------------------------

TITLE: Rendering Empty Component in React with Ant Design
DESCRIPTION: This snippet demonstrates how to use the Empty component from Ant Design in its simplest form, without any additional props or customization. It's ideal for displaying a placeholder when no data is available.

LANGUAGE: JSX
CODE:
import { Empty } from 'antd';

ReactDOM.render(<Empty />, mountNode);

----------------------------------------

TITLE: Configuring Time Step Options in TimePicker
DESCRIPTION: Shows how to use hourStep, minuteStep, and secondStep props to control the granularity of time selection options in the TimePicker component. These props allow users to define custom intervals for hours, minutes, and seconds selection.

LANGUAGE: markdown
CODE:
## zh-CN

可以使用 `hourStep` `minuteStep` `secondStep` 按步长展示可选的时分秒。

## en-US

Show stepped options by `hourStep` `minuteStep` `secondStep`.

----------------------------------------

TITLE: Markdown Structure for Design Values Documentation
DESCRIPTION: Structured markdown content detailing Ant Design's design values including section headers, image placeholders, and descriptive text

LANGUAGE: markdown
CODE:
---
group: Ant Design
order: 1
title: 设计价值观
---

Ant Design 设计价值观为设计者提供评价设计好坏的内在标准...

----------------------------------------

TITLE: Declaring Static Method for Spin Component
DESCRIPTION: Static method definition for setting default indicator globally in the Spin component.

LANGUAGE: typescript
CODE:
static setDefaultIndicator(indicator: ReactNode): void;

----------------------------------------

TITLE: Progressive Image Loading
DESCRIPTION: Shows how to implement progressive image loading with a placeholder.

LANGUAGE: typescript
CODE:
<code src="./demo/placeholder.tsx">渐进加载</code>

----------------------------------------

TITLE: Using GetRef to Obtain Component Ref Type in TypeScript
DESCRIPTION: Demonstrates how to use the GetRef utility to obtain the ref type of a Select component. This is useful for components that don't directly expose their ref type.

LANGUAGE: typescript
CODE:
import { Select } from 'antd';
import type { GetRef } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

----------------------------------------

TITLE: Demonstrating DatePicker Behavior Pattern in ant-design (TSX)
DESCRIPTION: This code snippet demonstrates the basic behavior pattern of the DatePicker component. It likely showcases the core functionality and interaction of the component.

LANGUAGE: tsx
CODE:
<code src="./design/behavior-pattern.tsx" inline></code>

----------------------------------------

TITLE: Component-Level Theme Customization in Ant Design
DESCRIPTION: Demonstrates component-specific theme customization using Component Tokens, with options for enabling token algorithms.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, theme } from 'antd';

const { useToken } = theme;

const App: React.FC = () => {
  const { token } = useToken();

  return (
    <div
      style={{
        backgroundColor: token.colorPrimaryBg,
        padding: token.padding,
        borderRadius: token.borderRadius,
        color: token.colorPrimaryText,
        fontSize: token.fontSize,
      }}
    >
      使用 Design Token
    </div>
  );
};

export default App;

----------------------------------------

TITLE: Configuring Absolute Positioning for Affix Component in React
DESCRIPTION: Example showing how to configure absolute positioning for an Affix component using inline styles. This approach should be used when absolute positioning effects are needed instead of applying absolute positioning to child elements.

LANGUAGE: jsx
CODE:
<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>

----------------------------------------

TITLE: Circular Progress Implementation
DESCRIPTION: Implements a circular progress bar, particularly useful for dashboard interfaces where percentage emphasis is needed.

LANGUAGE: tsx
CODE:
<code src="./design/demo/circle" description="以环形展示进度，多用于需要强调百分比的场景，如 Dashboard">环形进度条</code>

----------------------------------------

TITLE: Basic CI/CD Workflow Configuration in YAML
DESCRIPTION: Example GitHub Actions workflow configuration that sets up CI/CD pipeline with pnpm, including linting, building, and deployment to GitHub Pages.

LANGUAGE: yaml
CODE:
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: 16

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.0.0

      - name: Install dependencies
        run: pnpm install

      - name: lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

----------------------------------------

TITLE: Implementing Style Insertion with useMemo and useEffect in React
DESCRIPTION: This code demonstrates a method for inserting styles using useMemo for immediate insertion and useEffect for cleanup. It uses a counter to track style usage across components.

LANGUAGE: tsx
CODE:
// pseudocode. Not used in real world
function useStyleInsertion(hash: string, counter: Record<string, number>) {
  useMemo(() => {
    if (!counter[hash]) {
      // Insert only when current style not inserted
    }

    counter[hash] += 1;
  }, [hash]);

  useEffect(
    () => () => {
      counter[hash] -= 1;

      if (!counter[hash]) {
        // Remove if set to clear on destroy
      }
    },
    [hash],
  );
}

----------------------------------------

TITLE: Basic String Display Component Implementation in React TSX
DESCRIPTION: Simple React component implementation that displays a string value passed as a prop.

LANGUAGE: tsx
CODE:
interface StrProps {
  value: string;
}

function MyStr({ value }: StrProps) {
  return <div>{value}</div>;
}
<MyStr value="Hello World" />;

----------------------------------------

TITLE: Defining Separator Type in TypeScript
DESCRIPTION: TypeScript interface definition for the separator type used in Breadcrumb component.

LANGUAGE: typescript
CODE:
const item = {
  type: 'separator', // Must have
  separator: '/',
};

----------------------------------------

TITLE: Importing Dropdown Demo Components in React
DESCRIPTION: This code snippet demonstrates how to import and use various Dropdown demo components in a React application. It includes examples for basic usage, placement, arrow styling, and more.

LANGUAGE: tsx
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/extra.tsx" version="5.21.0">额外节点</code>
<code src="./demo/placement.tsx">弹出位置</code>
<code src="./demo/arrow.tsx">箭头</code>
<code src="./demo/item.tsx">其他元素</code>
<code src="./demo/arrow-center.tsx">箭头指向</code>
<code src="./demo/trigger.tsx">触发方式</code>
<code src="./demo/event.tsx">触发事件</code>
<code src="./demo/dropdown-button.tsx">带下拉框的按钮</code>
<code src="./demo/custom-dropdown.tsx">扩展菜单</code>
<code src="./demo/sub-menu.tsx">多级菜单</code>
<code src="./demo/sub-menu-debug.tsx" debug>多级菜单</code>
<code src="./demo/overlay-open.tsx">菜单隐藏方式</code>
<code src="./demo/context-menu.tsx">右键菜单</code>
<code src="./demo/loading.tsx">加载中状态</code>
<code src="./demo/selectable.tsx">菜单可选选择</code>
<code src="./demo/menu-full.tsx" debug>Menu 完整样式</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
<code src="./demo/icon-debug.tsx" debug>Icon debug</code>

----------------------------------------

TITLE: Creating Vite React Project
DESCRIPTION: Commands to create a new Vite project and install dependencies. These commands initialize the project structure and start the development server.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm install
$ npm run dev

----------------------------------------

TITLE: String Component with Length Constraint Interface
DESCRIPTION: Interface definition for a string component that includes an optional maximum length constraint.

LANGUAGE: tsx
CODE:
interface StrProps {
  value: string;
  maxLen?: number;
}

----------------------------------------

TITLE: Dialog Content Position Calculation
DESCRIPTION: Pseudocode showing how rc-dialog calculates modal position based on mouse coordinates and dialog element offset.

LANGUAGE: tsx
CODE:
// pseudocode
const elementOffset = offset(dialogElement);
const transformOrigin = `${mousePosition.x - elementOffset.left}px ${
  mousePosition.y - elementOffset.top
}px`;

----------------------------------------

TITLE: Markdown Document Structure for Contrast Design Principles
DESCRIPTION: Defines the structure and metadata for the design principles document about contrast, including group categorization, type, and ordering information.

LANGUAGE: markdown
CODE:
---
group: Design Patterns
type: Principles
order: 3
title: Contrast
---

----------------------------------------

TITLE: Setting Button Color and Variant in React
DESCRIPTION: This code shows how to set the color and variant of a button explicitly, which is equivalent to using the 'type' prop in Ant Design.

LANGUAGE: jsx
CODE:
<Button color="primary" variant="solid">
  click
</Button>

----------------------------------------

TITLE: Using Compact Mode for Form Components in TypeScript
DESCRIPTION: Demonstration of using the compact mode of Space component for form elements in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/compact.tsx">Compact Mode for form component</code>

----------------------------------------

TITLE: Form Provider Usage Description
DESCRIPTION: Markdown documentation describing form submission handling in Chinese and English. Explains how to use Form.Provider for cross-component form handling and different submission methods including form.submit and native HTML submission.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `Form.Provider` 在表单间处理数据。本例子中，Modal 的确认按钮在 Form 之外，通过 `form.submit` 方法调用表单提交功能。反之，则推荐使用 `<Button htmlType="submit" />` 调用 web 原生提交逻辑。

## en-US

Use `Form.Provider` to process data between forms. In this case, submit button is in the Modal which is out of Form. You can use `form.submit` to submit form. Besides, we recommend native `<Button htmlType="submit" />` to submit a form.

----------------------------------------

TITLE: Applying Custom Ant Design Theme in Next.js
DESCRIPTION: Implementation of ConfigProvider to apply a custom Ant Design theme in a Next.js app.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';
import type { AppProps } from 'next/app';

import theme from './theme/themeConfig';

const App = ({ Component, pageProps }: AppProps) => (
  <ConfigProvider theme={theme}>
    <Component {...pageProps} />
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Setting Global Two-Tone Color
DESCRIPTION: Example of setting and getting the global two-tone color for icons.

LANGUAGE: jsx
CODE:
import { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';

setTwoToneColor('#eb2f96');
getTwoToneColor(); // #eb2f96

----------------------------------------

TITLE: Rendering TextArea Component with Semantic DOM in JSX
DESCRIPTION: Illustrates the semantic DOM structures for the Input.TextArea component. This code snippet is used in the documentation to display the available semantic class and style targets for TextArea.

LANGUAGE: JSX
CODE:
<code src="./demo/_semantic_textarea.tsx" simplify="true"></code>

----------------------------------------

TITLE: Setting QRCode Error Correction Level in React
DESCRIPTION: Demonstrates how to set different error correction levels for the QRCode using the errorLevel prop.

LANGUAGE: jsx
CODE:
<code src="./demo/errorlevel.tsx">纠错比例</code>

----------------------------------------

TITLE: Describing File Upload Control Features in Markdown
DESCRIPTION: This snippet outlines two custom file upload control scenarios using ant-design's Upload component: limiting the number of uploaded files and reading remote file paths to display links. It's presented in both Chinese and English.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `fileList` 对列表进行完全控制，可以实现各种自定义功能，以下演示二种情况：

1. 上传列表数量的限制。

2. 读取远程路径并显示链接。

## en-US

You can gain full control over filelist by configuring `fileList`. You can accomplish all kinds of customized functions. The following shows two circumstances:

1. limit the number of uploaded files.

2. read from response and show file link.

----------------------------------------

TITLE: TypeScript Definition for ShowEffect Function
DESCRIPTION: This code defines the TypeScript type for the showEffect function used in ConfigProvider. It specifies the parameters and their types, including the target element and component information.

LANGUAGE: tsx
CODE:
type ShowEffect = (target: HTMLElement, info: { component: string; token: GlobalToken }) => void;

----------------------------------------

TITLE: Describing Input Variants in Ant Design (English)
DESCRIPTION: This Markdown snippet describes the available form variants for the Input component in English. It lists four different styles: outlined, filled, borderless, and underlined.

LANGUAGE: Markdown
CODE:
## en-US

Variants of Input, there are four variants: `outlined` `filled` `borderless` and `underlined`.

----------------------------------------

TITLE: Implementing Responsive Progress Circle in TypeScript
DESCRIPTION: Example of creating a responsive progress circle that adapts to different screen sizes using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/circle-micro.tsx">响应式进度圈</code>

----------------------------------------

TITLE: Setting Vertical Divider Type in Ant Design
DESCRIPTION: Shows how to configure a divider component to display vertically instead of horizontally by setting the type property to 'vertical'. This creates an inline vertical separator that can be used to divide content.

LANGUAGE: markdown
CODE:
type="vertical"

----------------------------------------

TITLE: Installing Ant Design
DESCRIPTION: Command to install the Ant Design library using npm.

LANGUAGE: bash
CODE:
$ npm install antd --save

----------------------------------------

TITLE: Configuring Vertical Space in TypeScript
DESCRIPTION: Example of using the Space component with vertical alignment in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/vertical.tsx">Vertical Space</code>

----------------------------------------

TITLE: Using Timeline Component with Child Items in React
DESCRIPTION: Shows the older usage of the Timeline component with child Timeline.Item elements. This approach is deprecated in version 5.2.0 and will be removed in the next major version.

LANGUAGE: jsx
CODE:
return (
  <Timeline onChange={onChange}>
    <Timeline.Item>Sample</Timeline.Item>
  </Timeline>
);

----------------------------------------

TITLE: Component Lifecycle with StrictMode
DESCRIPTION: Example showing component lifecycle behavior in React 18 StrictMode, demonstrating multiple render and effect calls.

LANGUAGE: tsx
CODE:
const My = () => {
  console.log('render');

  useMemo(() => {
    console.log('memo');
  }, []);

  useEffect(() => {
    console.log('effect');

    return () => {
      console.log('effect cleanup');
    };
  }, []);
};

<StrictMode>
  <My />
</StrictMode>;

----------------------------------------

TITLE: Creating Custom Iconfont Component
DESCRIPTION: Demonstrates how to create a custom icon component using createFromIconfontCN for iconfont.cn integration.

LANGUAGE: jsx
CODE:
import React from 'react';
import { createFromIconfontCN } from '@ant-design/icons';
import ReactDOM from 'react-dom/client';

const MyIcon = createFromIconfontCN({
  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // 在 iconfont.cn 上生成
});

ReactDOM.createRoot(mountNode).render(<MyIcon type="icon-example" />);

----------------------------------------

TITLE: Custom Button Styling with Less
DESCRIPTION: This Less code snippet shows how to style a custom button class. It's a simple example of applying a red background to buttons with the 'my-button' class.

LANGUAGE: less
CODE:
.my-button {
  background: red;
}

----------------------------------------

TITLE: Defining Link Props Interface
DESCRIPTION: TypeScript interface for the legacy Link component props, though using items is now recommended.

LANGUAGE: typescript
CODE:
interface LinkProps {
  href: string;
  target?: string;
  title: ReactNode;
}

----------------------------------------

TITLE: Statistic Component Token Customization
DESCRIPTION: Debug example for customizing component tokens in the Statistic component. This is useful for theme customization and styling.

LANGUAGE: typescript
CODE:
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Multiple Panels in Splitter Component
DESCRIPTION: This code snippet demonstrates how to create a Splitter with multiple panels, allowing for more complex layouts and divisions.

LANGUAGE: jsx
CODE:
<code src="./demo/multiple.tsx">多面板</code>

----------------------------------------

TITLE: Defining Spin Component API in TypeScript
DESCRIPTION: TypeScript interface definition for the Spin component props including delay, fullscreen, indicator, percent, size, spinning, tip and wrapper class name properties.

LANGUAGE: typescript
CODE:
interface SpinProps {
  delay?: number;
  fullscreen?: boolean;
  indicator?: ReactNode;
  percent?: number | 'auto';
  size?: 'small' | 'default' | 'large';
  spinning?: boolean;
  tip?: ReactNode;
  wrapperClassName?: string;
}

----------------------------------------

TITLE: Optimized Data Flattening Implementation
DESCRIPTION: Improved version of the flattening function that avoids unnecessary array creation by using a mutable list parameter.

LANGUAGE: tsx
CODE:
function flatten<T extends { children?: T[] }>(data: T[] = [], list: T[] = []) {
  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    list.push(record);
    flatten(record.children, list);
  }

  return list;
}

----------------------------------------

TITLE: Handling Date Selection in Calendar Component with React
DESCRIPTION: This code snippet shows how to handle date selection events in the Calendar component. It demonstrates using the onSelect callback to filter events based on their source, specifically for dates selected directly from the panel.

LANGUAGE: tsx
CODE:
<Calendar
  onSelect={(date, { source }) => {
    if (source === 'date') {
      console.log('Panel Select:', source);
    }
  }}
/>

----------------------------------------

TITLE: Initializing TimePicker with dayjs
DESCRIPTION: Basic example showing how to initialize a TimePicker component with a default value using dayjs library and custom format

LANGUAGE: jsx
CODE:
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat'

dayjs.extend(customParseFormat)
<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;

----------------------------------------

TITLE: List Grid Props Interface
DESCRIPTION: TypeScript interface defining the grid system properties for responsive list layouts

LANGUAGE: typescript
CODE:
interface ListGridProps {
  column?: number;
  gutter?: number;
  xs?: number;
  sm?: number;
  md?: number;
  lg?: number;
  xl?: number;
  xxl?: number;
}

----------------------------------------

TITLE: Vertical Compact Mode in TypeScript
DESCRIPTION: Demonstration of vertical compact mode using the Space component in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/compact-button-vertical.tsx">Vertical Compact Mode</code>

----------------------------------------

TITLE: Destroying All Modals on Route Change
DESCRIPTION: Demonstrates how to destroy all modals when the route changes using react-router.

LANGUAGE: jsx
CODE:
import { browserHistory } from 'react-router';

// router change
browserHistory.listen(() => {
  Modal.destroyAll();
});

----------------------------------------

TITLE: Compact Mode for Buttons in TypeScript
DESCRIPTION: Example of using the compact mode of Space component specifically for buttons in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/compact-buttons.tsx">Button Compact Mode</code>

----------------------------------------

TITLE: Large Dataset Pagination - TSX
DESCRIPTION: Pagination for large datasets showing first and last page numbers with ellipsis. Recommended for content exceeding 10 pages.

LANGUAGE: tsx
CODE:
./design/demo/large-amount

----------------------------------------

TITLE: Customizing Progress Bar Edge Shape in TypeScript
DESCRIPTION: Demonstration of customizing the edge shape of a progress bar using the strokeLinecap prop in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/linecap.tsx">边缘形状</code>

----------------------------------------

TITLE: Component Usage Guidelines
DESCRIPTION: Guidelines explaining when and how to use the Drawer component effectively

LANGUAGE: markdown
CODE:
## 何时使用

抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到原任务。

- 当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。
- 当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。

----------------------------------------

TITLE: Documenting Color Picker Control in Markdown
DESCRIPTION: This snippet provides documentation in both Chinese and English for controlling the Color Picker component in ant-design. It explains how to use 'value' and 'onChange' props for controlled mode, and how 'onChangeComplete' can lock the display color.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `value` 和 `onChange` 设置组件为受控模式，如果通过 `onChangeComplete` 受控则会锁定展示颜色。

## en-US

Set the component to controlled mode. Will lock the display color if controlled by `onChangeComplete`.

----------------------------------------

TITLE: Configuring Vite for antd-mobile Bundle Build
DESCRIPTION: This configuration snippet shows the Vite setup for building antd-mobile bundles, including CSS generation and minification settings.

LANGUAGE: javascript
CODE:
{
    root: process.cwd(),
    mode: env,
    logLevel: 'silent',
    define: { 'process.env.NODE_ENV': `"${env}"` },
    build: {
      cssTarget: 'chrome61',
      lib: {
        formats,
        ...
      },
      rollupOptions: {
       output: {
          dir: './lib/bundle',
          globals: {
            'react': 'React',
            'react-dom': 'ReactDOM',
          },
        },
      },
      minify: isProd ? 'esbuild' : false,
    },
  }

----------------------------------------

TITLE: Configuring Dayjs Locale in Ant Design
DESCRIPTION: Example demonstrating how to properly configure dayjs locale for date-related components in antd.

LANGUAGE: jsx
CODE:
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

----------------------------------------

TITLE: Documenting TreeSelect Multiple Selection in Ant Design (Markdown)
DESCRIPTION: Provides multilingual documentation for the TreeSelect component's multiple selection feature in Ant Design. It explains the keyboard shortcuts for multiple selection on different operating systems.

LANGUAGE: markdown
CODE:
## zh-CN

内置的目录树，`multiple` 模式支持 `ctrl(Windows)` / `command(Mac)` 复选。

## en-US

Built-in directory tree. `multiple` support `ctrl(Windows)` / `command(Mac)` selection.

----------------------------------------

TITLE: Applying Custom Styles with LESS
DESCRIPTION: This LESS code snippet shows how to define custom styles for a button class that can be applied through ConfigProvider. It's a basic example of extending component styles.

LANGUAGE: less
CODE:
.my-button {
  background: red;
}

----------------------------------------

TITLE: File Upload Event Handler Interface
DESCRIPTION: Example of the onChange event handler response structure when uploading files.

LANGUAGE: jsx
CODE:
{
  file: { /* ... */ },
  fileList: [ /* ... */ ],
  event: { /* ... */ },
}

----------------------------------------

TITLE: Configuring Element Spacing in Ant Design
DESCRIPTION: The 'size' property is used to set spacing between elements in Ant Design. It offers preset values of 'small', 'middle', and 'large', with 'small' as the default if not specified. Custom spacing values can also be defined.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `size` 设置元素之间的间距，预设了 `small`、`middle`、`large` 三种尺寸，也可以自定义间距，若不设置 `size`，则默认为 `small`。

## en-US

Use `size` to set the spacing, Three sizes are preset: `small`, `middle`, `large`. You can also customize the spacing. If `size` is not set, the spacing is `small`.

----------------------------------------

TITLE: Implementing Time Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific time in the DatePicker component. It is used when users need to input year, month, date, and time information.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-time.tsx" description="用于具体时刻的选择。用户需输入年份+月份+日期+时间信息时使用。">选择某时刻</code>

----------------------------------------

TITLE: Configuring Menu Trigger Modes in Ant Design
DESCRIPTION: Documentation shows the different trigger modes available for Ant Design menus. The component supports both hover (default) and click trigger modes for displaying menus.

LANGUAGE: markdown
CODE:
## zh-CN

默认是移入触发菜单，可以点击触发。

## en-US

The default trigger mode is `hover`, you can change it to `click`.

----------------------------------------

TITLE: Customizing Mention Trigger in ant-design using prefix prop
DESCRIPTION: This snippet demonstrates how to use the `prefix` prop to customize the trigger character for the Mention component in ant-design. It explains that the default trigger is '@' and that an array of strings can also be used as triggers.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `prefix` 属性自定义触发字符。默认为 `@`, 可以定义为数组。

## en-US

Customize Trigger Token by `prefix` props. Default to `@`, `Array<string>` also supported.

----------------------------------------

TITLE: ConfigProvider Basic Usage with Form Validation
DESCRIPTION: Shows the basic usage of ConfigProvider for customizing form validation messages.

LANGUAGE: tsx
CODE:
<ConfigProvider form={{ validateMessages }} />

----------------------------------------

TITLE: Creating Mini Progress Circle in TypeScript
DESCRIPTION: Code snippet showing how to create a small-sized progress circle using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/circle-mini.tsx">小型进度圈</code>

----------------------------------------

TITLE: Implementing Month Range Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific month range in the DatePicker component.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-month-range.tsx" description="用于月范围的选择。">选择某月至某月</code>

----------------------------------------

TITLE: Describing Popover Edge Behavior in Chinese
DESCRIPTION: Explains in Chinese that when a Popover is close to the edge of the screen, it automatically adjusts its position and arrow placement. If it exceeds the screen boundaries significantly, it will scroll out of view along with the screen.

LANGUAGE: Markdown
CODE:
## zh-CN

当 Popover 贴边时，自动偏移并且调整箭头位置。当超出过多时，则一同滚出屏幕。

----------------------------------------

TITLE: Updating and Destroying Modal in React
DESCRIPTION: Shows how to update and destroy a modal instance after creation.

LANGUAGE: jsx
CODE:
const modal = Modal.info();

modal.update({
  title: '修改的标题',
  content: '修改的内容',
});

// 在 4.8.0 或更高版本中，可以通过传入函数的方式更新弹窗
modal.update((prevConfig) => ({
  ...prevConfig,
  title: `${prevConfig.title}（新）`,
}));

modal.destroy();

----------------------------------------

TITLE: Attempted Conditional FormProvider Optimization
DESCRIPTION: An attempted but ineffective optimization to conditionally render FormProvider based on validateMessages presence.

LANGUAGE: tsx
CODE:
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  let node = children;

  if (validateMessages) {
    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;
  }

  return node;
};

----------------------------------------

TITLE: Converting Enzyme Event Simulation to Testing Library Events
DESCRIPTION: Demonstrates how to migrate from Enzyme's simulate method to Testing Library's fireEvent for handling user interactions.

LANGUAGE: diff
CODE:
++  import { fireEvent } from '@testing-library/react';

--  wrapper.find('.ant-handle').simulate('click');
++  fireEvent.click(container.querySelector('.ant-handle'));

----------------------------------------

TITLE: Configuring Wave Effect with ConfigProvider in React
DESCRIPTION: This snippet demonstrates how to use ConfigProvider to customize the wave effect for Ant Design components. The 'wave' prop accepts a showEffect function to define custom behavior.

LANGUAGE: tsx
CODE:
<ConfigProvider wave={{ showEffect }}>
  <Button />
</ConfigProvider>

----------------------------------------

TITLE: Basic Demo Imports in TypeScript
DESCRIPTION: Collection of demo imports showing different Slider implementations including basic usage, input number integration, icon sliders, and customized tooltips

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/input-number.tsx">Slider with InputNumber</code>
<code src="./demo/icon-slider.tsx">Slider with icon</code>
<code src="./demo/tip-formatter.tsx">Customize tooltip</code>

----------------------------------------

TITLE: Configuring TailwindCSS v4 Layer Order with Ant Design
DESCRIPTION: This CSS snippet shows how to arrange the @layer order in TailwindCSS v4 to properly integrate with Ant Design, ensuring correct style override behavior.

LANGUAGE: less
CODE:
@layer theme, base, antd, components, utilities;

@import 'tailwindcss';

----------------------------------------

TITLE: Configuring Popconfirm Placement in React
DESCRIPTION: This code snippet demonstrates how to import an example of a Popconfirm component with custom placement options in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/placement.tsx">Placement</code>

----------------------------------------

TITLE: Adding Status to TreeSelect in Ant Design (JSX)
DESCRIPTION: This snippet demonstrates how to use the 'status' prop with TreeSelect component in Ant Design. It allows setting the status to either 'error' or 'warning' to visually indicate different states of the component.

LANGUAGE: JSX
CODE:
<TreeSelect status="error" />
<TreeSelect status="warning" />

----------------------------------------

TITLE: Implementing Layer One Shadows in CSS
DESCRIPTION: CSS variables for layer one shadows in all four directions (up, down, left, right). Each direction uses three layered shadows with varying opacity, blur, and spread values.

LANGUAGE: CSS
CODE:
@shadow-1-up: 0px -1px 2px -2px rgba(0, 0, 0, 0.16),\n            0px -3px 6px 0px rgba(0, 0, 0, 0.12),\n            0px -5px 12px 4px rgba(0, 0, 0, 0.09);\n@shadow-1-down: 0px 1px 2px -2px rgba(0, 0, 0, 0.16),\n              0px 3px 6px 0px rgba(0, 0, 0, 0.12),\n              0px 5px 12px 4px rgba(0, 0, 0, 0.09);\n@shadow-1-left: -1px 0px 2px -2px rgba(0, 0, 0, 0.16),\n              -3px 0px 6px 0px rgba(0, 0, 0, 0.12),\n              -5px 0px 12px 4px rgba(0, 0, 0, 0.09);\n@shadow-1-right: 1px 0px 2px -2px rgba(0, 0, 0, 0.16),\n               3px 0px 6px 0px rgba(0, 0, 0, 0.12),\n               5px 0px 12px 4px rgba(0, 0, 0, 0.09);

----------------------------------------

TITLE: Importing Spin Component Demos in React
DESCRIPTION: This code snippet demonstrates how to import various demo components for the Spin component. It includes examples for basic usage, different sizes, nested loading, custom descriptions, delay, custom indicators, progress, and fullscreen modes.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">基本用法</code>
<code src="./demo/size.tsx">各种大小</code>
<code src="./demo/nested.tsx">卡片加载中</code>
<code src="./demo/tip.tsx">自定义描述文案</code>
<code src="./demo/delayAndDebounce.tsx">延迟</code>
<code src="./demo/custom-indicator.tsx">自定义指示符</code>
<code src="./demo/percent.tsx" version="5.18.0">进度</code>
<code src="./demo/fullscreen.tsx">全屏</code>

----------------------------------------

TITLE: Fresh Content Update Tooltip Example
DESCRIPTION: Shows how to implement a tooltip that updates content even when closed using the fresh property.

LANGUAGE: jsx
CODE:
<Tooltip open={user} title={user?.name} fresh />

----------------------------------------

TITLE: Cascader Option Type Definition
DESCRIPTION: TypeScript interface defining the structure of Cascader options, including value, label, disabled state, children, and isLeaf flag.

LANGUAGE: typescript
CODE:
interface Option {
  value: string | number;
  label?: React.ReactNode;
  disabled?: boolean;
  children?: Option[];
  // Determines if this is a leaf node(effective when `loadData` is specified).
  // `false` will force trade TreeNode as a parent node.
  // Show expand icon even if the current node has no children.
  isLeaf?: boolean;
}

----------------------------------------

TITLE: Configuring GitHub Actions CI Workflow for React Project
DESCRIPTION: YAML configuration for a basic CI workflow that runs linting, building, and deployment steps for a React project using pnpm. It triggers on pushes and pull requests to the master branch.

LANGUAGE: yaml
CODE:
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      - name: Setup Node.js (设置 node 版本)
        uses: oven-sh/setup-bun@v2
        with:
          node-version: 16

      - name: Install pnpm (安装 pnpm)
        uses: pnpm/action-setup@v2
        with:
          version: 7.0.0

      - name: Install dependencies (安装依赖)
        run: pnpm install

      - name: lint (代码检查)
        run: pnpm run lint

      - name: Build (构建)
        run: pnpm run build

      - name: Upload build artifacts (上传构建产物)
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Deploy to GitHub Pages (部署到 GitHub Pages)
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

----------------------------------------

TITLE: Menu Divider Definition in TypeScript
DESCRIPTION: Example of defining a menu divider item using TypeScript. Shows the minimal structure needed for creating a divider in the menu.

LANGUAGE: typescript
CODE:
const dividerItem = {
  type: 'divider', // Must have
};

----------------------------------------

TITLE: Tag.CheckableTag API Properties
DESCRIPTION: Defines the API properties for the CheckableTag variant, which includes checked status and onChange event handler.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| -------- | ----------------------------------------------- | ----------------- | ------- |
| checked | Checked status of Tag | boolean | false |
| onChange | Callback executed when Tag is checked/unchecked | (checked) => void | - |

----------------------------------------

TITLE: Local Development Setup
DESCRIPTION: Commands for cloning and setting up local development environment for Ant Design.

LANGUAGE: bash
CODE:
$ git clone git@github.com:ant-design/ant-design.git
$ cd ant-design
$ npm install
$ npm start

----------------------------------------

TITLE: Controlled Preview Mode
DESCRIPTION: Shows how to implement a controlled preview mode for images.

LANGUAGE: typescript
CODE:
<code src="./demo/controlled-preview.tsx">受控的预览</code>

----------------------------------------

TITLE: Rendering Badge Components with Custom Props in React
DESCRIPTION: This code snippet demonstrates how to use the Badge component from ant-design with various combinations of props. It shows examples of using count, status, color, and dot properties to create different badge styles.

LANGUAGE: jsx
CODE:
import { Badge, Space } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <Space>
    <Badge count={5} status="success" />
    <Badge count={5} status="warning" />
    <Badge count={5} color="#faad14" />
    <Badge count={5} color="#52c41a" />
    <Badge dot status="success" />
    <Badge dot status="warning" />
    <Badge dot color="#faad14" />
    <Badge dot color="#52c41a" />
  </Space>
);

export default App;

----------------------------------------

TITLE: Configuring Input Box Sizes - Ant Design
DESCRIPTION: Demonstrates the three available size options for Ant Design input boxes. The middle size is used as the default when no size prop is specified.

LANGUAGE: markdown
CODE:
middle

----------------------------------------

TITLE: Adding Status to Mentions Component in ant-design (Markdown)
DESCRIPTION: This snippet explains how to use the 'status' prop to add status indicators to the Mentions component in ant-design. It supports 'error' and 'warning' statuses.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `status` 为 Mentions 添加状态。可选 `error` 或者 `warning`。

## en-US

Add status to Mentions with `status`, which could be `error` or `warning`。

----------------------------------------

TITLE: Demonstrating Semantic DOM for Popconfirm
DESCRIPTION: This code snippet demonstrates how to import a simplified example showcasing the semantic DOM structure of the Popconfirm component in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/_semantic.tsx" simplify="true"></code>

----------------------------------------

TITLE: Native Input with MaxLength Example
DESCRIPTION: Example showing native HTML input with maxLength attribute implementation.

LANGUAGE: tsx
CODE:
<input value="Hello World" maxLength={5} />

----------------------------------------

TITLE: Generated CSS Output
DESCRIPTION: The CSS output generated from the cache structure

LANGUAGE: css
CODE:
:where(.bAMbOo).ant-btn {
  color: red;
}
:where(.bAMbOo).ant-spin {
  color: blue;
}

----------------------------------------

TITLE: Content-Level Mini Progress Bar
DESCRIPTION: Implements a miniature progress bar for content-level scenarios, designed to work alongside text elements.

LANGUAGE: tsx
CODE:
<code src="./design/demo/content" description="适用于内容级场景的微型进度条，常与文本搭配使用">内容级进度条</code>

----------------------------------------

TITLE: Parallel Vite Build Function for antd-mobile Bundles
DESCRIPTION: This function configures and executes parallel Vite builds for different environments and formats, which led to the CSS generation issue.

LANGUAGE: javascript
CODE:
async function buildBundles(cb) {
  const envs = ['development', 'production'];
  const configs = envs.map((env) =>
    getViteConfigForPackage({
      env,
      formats: ['es', 'cjs', 'umd'],
      external: ['react', 'react-dom'],
    }),
  );

  await Promise.all(configs.map((config) => vite.build(config)));
  cb && cb();
}

----------------------------------------

TITLE: Displaying Basic Usage Instructions in Multiple Languages
DESCRIPTION: Markdown headings showing basic usage instructions in both Chinese (zh-CN) and English (en-US) languages for an Ant Design component.

LANGUAGE: markdown
CODE:
## zh-CN

基本使用。

## en-US

Basic usage.

----------------------------------------

TITLE: Form Implementation with Input Components
DESCRIPTION: Example of a form implementation using Form.Item components with Input and InputNumber fields.

LANGUAGE: tsx
CODE:
<Form>
  <Form.Item label="Name" name="name">
    <Input />
  </Form.Item>

  <Form.Item label="Price" name="price">
    <InputNumber />
  </Form.Item>
</Form>

----------------------------------------

TITLE: Documenting Flexible Responsive Flex Ratio Support in Markdown
DESCRIPTION: This snippet provides multilingual documentation for a feature in Ant Design that supports more flexible responsive flex ratios. It highlights that this functionality requires browser support for CSS Variables.

LANGUAGE: Markdown
CODE:
## zh-CN

支持更灵活的响应式下的任意 flex 比例，该功能需要浏览器支持 CSS Variables。

## en-US

Support much more flexible responsive flex ratio, which requires CSS Variables supported by browser.

----------------------------------------

TITLE: Using GetRef Utility with Select Component
DESCRIPTION: Demonstrates how to extract the ref type from a Select component using the GetRef utility type. This is useful when you need to work with component references that aren't directly exposed.

LANGUAGE: typescript
CODE:
import { Select } from 'antd';
import type { GetRef } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

----------------------------------------

TITLE: Implementing Descriptions Component in React with Ant Design
DESCRIPTION: Demonstrates two methods of using the Descriptions component - the recommended approach for version 5.8.0+ using items prop, and the legacy approach for versions below 5.8.0. Shows how to display user information in a structured format.

LANGUAGE: tsx
CODE:
// works when >= 5.8.0, recommended ✅

const items: DescriptionsProps['items'] = [
  {
    key: '1',
    label: 'UserName',
    children: <p>Zhou Maomao</p>,
  },
  {
    key: '2',
    label: 'Telephone',
    children: <p>1810000000</p>,
  },
  {
    key: '3',
    label: 'Live',
    children: <p>Hangzhou, Zhejiang</p>,
  },
  {
    key: '4',
    label: 'Remark',
    children: <p>empty</p>,
  },
  {
    key: '5',
    label: 'Address',
    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,
  },
];

<Descriptions title="User Info" items={items} />;

// works when <5.8.0 , deprecated when >=5.8.0 🙅🏻‍♀️

<Descriptions title="User Info">
  <Descriptions.Item label="UserName">Zhou Maomao</Descriptions.Item>
  <Descriptions.Item label="Telephone">1810000000</Descriptions.Item>
  <Descriptions.Item label="Live">Hangzhou, Zhejiang</Descriptions.Item>
  <Descriptions.Item label="Remark">empty</Descriptions.Item>
  <Descriptions.Item label="Address">
    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China
  </Descriptions.Item>
</Descriptions>;

----------------------------------------

TITLE: Badge Sizes in TypeScript
DESCRIPTION: Demonstrates different size options for the Badge component. This example shows how to adjust the badge size to fit different design needs.

LANGUAGE: typescript
CODE:
<code src="./demo/size.tsx">大小</code>

----------------------------------------

TITLE: Setting Progress Bar Stroke Linecap in Ant Design
DESCRIPTION: This snippet demonstrates how to set the strokeLinecap property to 'butt' in an Ant Design progress bar component. This changes the edge shape of the progress bar from a closed circular arc to an open-ended line.

LANGUAGE: markdown
CODE:
## zh-CN

通过设定 `strokeLinecap="butt"` 可以将进度条边缘的形状从闭合的圆形的圆弧调整为断口，详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap)。

## en-US

By setting `strokeLinecap="butt"`, you can change the linecaps from `round` to `butt`, see [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) for more information.

----------------------------------------

TITLE: Custom Badge Positioning in TypeScript
DESCRIPTION: Shows how to customize the position offset of a Badge. This is useful for fine-tuning the placement of the badge on an element.

LANGUAGE: typescript
CODE:
<code src="./demo/offset.tsx">自定义位置偏移</code>

----------------------------------------

TITLE: Importing Splitter Component in React
DESCRIPTION: This code snippet demonstrates how to import and use the Splitter component in a React application. It shows basic usage with horizontal layout.

LANGUAGE: jsx
CODE:
<code src="./demo/size.tsx">基本用法</code>

----------------------------------------

TITLE: Column Component API Documentation in Markdown
DESCRIPTION: API documentation for the Col component, detailing properties like flex layout, offset, ordering, and responsive breakpoints.

LANGUAGE: markdown
CODE:
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| flex | flex 布局属性 | string \| number | - | |
| offset | 栅格左侧的间隔格数，间隔内不可以有栅格 | number | 0 | |

----------------------------------------

TITLE: Synchronizing Slider with InputNumber in Ant Design (Chinese)
DESCRIPTION: This snippet provides a link to the InputNumber component documentation in Chinese, explaining how to keep the Slider component synchronized with it.

LANGUAGE: Markdown
CODE:
## zh-CN

和 [数字输入框](/components/input-number-cn) 组件保持同步。

----------------------------------------

TITLE: Styling Ant Design Category Search Dropdown
DESCRIPTION: CSS styles that customize the appearance of an Ant Design dropdown menu used for category-based searching. Includes styling for group titles, menu items, borders, and defines maximum height for scrolling. These styles are specifically for implementing the 'Certain Category' lookup pattern.

LANGUAGE: css
CODE:
.certain-category-search-dropdown .ant-select-dropdown-menu-item-group-title {
  color: #666;
  font-weight: bold;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item-group {
  border-bottom: 1px solid #f6f6f6;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item {
  padding-inline-start: 16px;
}

.certain-category-search-dropdown .ant-select-dropdown-menu-item.show-all {
  text-align: center;
  cursor: default;
}

.certain-category-search-dropdown .ant-select-dropdown-menu {
  max-height: 300px;
}

----------------------------------------

TITLE: Component Usage with Length Constraint
DESCRIPTION: Example of using the string component with a maximum length constraint.

LANGUAGE: tsx
CODE:
<MyStr value="Hello World" maxLen={5}>

----------------------------------------

TITLE: Defining Space.Compact Component API in TypeScript
DESCRIPTION: TypeScript interface defining the API for the Space.Compact component, including properties like block, direction, and size.

LANGUAGE: TypeScript
CODE:
interface SpaceCompactProps {
  block?: boolean;
  direction?: 'vertical' | 'horizontal';
  size?: 'large' | 'middle' | 'small';
}

----------------------------------------

TITLE: Configuring clearFilters Function Parameters in Ant Design Table
DESCRIPTION: Details about the enhanced clearFilters function with two new boolean parameters: closeDropdown to control filter menu visibility (defaults to true) and confirm to determine if selected options should be submitted when clearing filters (defaults to true).

LANGUAGE: typescript
CODE:
clearFilters(closeDropdown: boolean = true, confirm: boolean = true)

----------------------------------------

TITLE: Dynamic Row Span Example
DESCRIPTION: Example showing how rowSpan can be dynamically configured using the onCell property in Table columns.

LANGUAGE: jsx
CODE:
const Demo = () => {
  const [spanCount, setSpanCount] = useState(3);

  const columns = [{
    dataIndex: 'group',
    onCell: (_, index) => ({
      rowSpan: index % spanCount === 0 ? spanCount : 0,
    }),
  }];

  React.useEffect(() => {
    setSpanCount(5);
  }, []);

  return <Table columns={columns} {...props} />;
};

----------------------------------------

TITLE: Setting Vertical List Layout Configuration in Ant Design
DESCRIPTION: Instructions in both Chinese and English explaining how to configure a list component to display in a vertical layout by setting the itemLayout property to 'vertical'

LANGUAGE: markdown
CODE:
## zh-CN

通过设置 `itemLayout` 属性为 `vertical` 可实现竖排列表样式。

## en-US

Set the `itemLayout` property to `vertical` to create a vertical list.

----------------------------------------

TITLE: Using Card.Meta for Flexible Content in Ant Design (JSX)
DESCRIPTION: This example demonstrates how to use the Card.Meta component from Ant Design to create more flexible and customizable content within a Card. Card.Meta allows for structured formatting of title, description, and avatar elements.

LANGUAGE: JSX
CODE:
<Card.Meta />

----------------------------------------

TITLE: Configuring Warning-Only Form Validation in Ant Design
DESCRIPTION: Documentation showing how form validation rules can be configured with warningOnly property to allow form submission even when validation fails. The warningOnly flag enables non-blocking validation behavior.

LANGUAGE: markdown
CODE:
## zh-CN

`rule` 添加 `warningOnly` 后校验不再阻塞表单提交。

## en-US

`rule` with `warningOnly` will not block form submit.

----------------------------------------

TITLE: Implementing FloatButton with Badge in React
DESCRIPTION: This code snippet demonstrates how to create a FloatButton component with a Badge in React. It uses the ant-design library to render a floating action button with a circular numerical indicator in the top right corner.

LANGUAGE: JSX
CODE:
import { FloatButton, Badge } from 'antd';
import { CustomerServiceOutlined } from '@ant-design/icons';

const App: React.FC = () => (
  <>
    <Badge count={5} size="small">
      <FloatButton icon={<CustomerServiceOutlined />} />
    </Badge>
    <Badge count={5} size="small">
      <FloatButton shape="square" icon={<CustomerServiceOutlined />} style={{ right: 94 }} />
    </Badge>
  </>
);

export default App;

----------------------------------------

TITLE: Importing FloatButton Examples in Markdown
DESCRIPTION: Code blocks for importing various FloatButton examples using the <code> tag in Markdown. These examples demonstrate different features and configurations of the FloatButton component.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx" iframe="360">Basic</code>
<code src="./demo/type.tsx" iframe="360">Type</code>
<code src="./demo/shape.tsx" iframe="360">Shape</code>
<code src="./demo/description.tsx" iframe="360">Description</code>
<code src="./demo/tooltip.tsx" iframe="360">FloatButton with tooltip</code>
<code src="./demo/group.tsx" iframe="360">FloatButton Group</code>
<code src="./demo/group-menu.tsx" iframe="360">Menu mode</code>
<code src="./demo/controlled.tsx" iframe="360">Controlled mode</code>
<code src="./demo/placement.tsx" iframe="380" version="5.21.0">placement</code>
<code src="./demo/back-top.tsx" iframe="360">BackTop</code>
<code src="./demo/badge.tsx" iframe="360">badge</code>
<code src="./demo/badge-debug.tsx" iframe="360" debug>debug dot</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>

----------------------------------------

TITLE: Displaying Deprecation Warning Message in Ant Design
DESCRIPTION: Example of a deprecation warning message shown to users when using outdated API props in Ant Design components.

LANGUAGE: text
CODE:
Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.

----------------------------------------

TITLE: Starting the Rsbuild Development Server
DESCRIPTION: Commands to navigate to the project directory and start the development server.

LANGUAGE: bash
CODE:
$ cd demo
$ npm run dev

----------------------------------------

TITLE: Upload File Interface
DESCRIPTION: Interface definition for upload file objects extending the File type with additional properties for rendering and status tracking.

LANGUAGE: typescript
CODE:
interface UploadFile extends File {
  crossOrigin?: 'anonymous' | 'use-credentials' | '';
  name: string;
  percent?: number;
  status?: 'error' | 'done' | 'uploading' | 'removed';
  thumbUrl?: string;
  uid: string;
  url?: string;
}

----------------------------------------

TITLE: Implementing Wave Effect in React Components
DESCRIPTION: This code snippet illustrates how the Wave component is used to wrap other components like buttons to add a click wave effect. It's a simplified example of the internal implementation.

LANGUAGE: tsx
CODE:
// Sample code.
const Button = (
  <Wave>
    <button />
  </Wave>
);

----------------------------------------

TITLE: Configuring Vite for SVG Icon Import
DESCRIPTION: Vite configuration to import SVG icons as React components using vite-plugin-svgr.

LANGUAGE: js
CODE:
// vite.config.js
export default defineConfig(() => ({
  // ... other config
  plugins: [svgr({ svgrOptions: { icon: true } })],
}));

----------------------------------------

TITLE: Using useWatch Hook Reference - Ant Design
DESCRIPTION: Demonstrates the useWatch hook usage in Ant Design forms to monitor field changes and optimize re-rendering performance by only triggering when watched field values change.

LANGUAGE: markdown
CODE:
`useWatch` 允许你监听字段变化，同时仅当该字段变化时重新渲染。API 文档请[查阅此处](#formusewatch)。

`useWatch` helps watch the field change and only re-render for the value change. [API Ref](#formusewatch).

----------------------------------------

TITLE: Implementing Preset Range Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements a quick time range selection feature using preset options in the left panel of the DatePicker component. It's recommended to limit the number of shortcut options to 8 or fewer based on Hick's law.

LANGUAGE: tsx
CODE:
<code src="./design/demo/preset-range.tsx" description="通过面板左侧区域提供的预置项，帮助用户快速完成时间段的选择。" tip="根据希克定律，建议快捷选项的个数不超过8个。">快捷选择时间段</code>

----------------------------------------

TITLE: Controlling Calendar Panel Display with mode and onPanelChange in Ant Design
DESCRIPTION: This snippet demonstrates how to use the mode prop and onPanelChange event handler to determine which panel (e.g., month, year) is shown in an Ant Design Calendar component. It provides explanations in both Chinese and English.

LANGUAGE: Markdown
CODE:
## zh-CN

通过组合 `mode` 与 `onPanelChange` 控制要展示的面板。

## en-US

Determine which panel to show with `mode` and `onPanelChange`.

----------------------------------------

TITLE: Configuring High Precision Decimal Support with stringMode
DESCRIPTION: When stringMode is enabled, the NumberInput component supports high precision decimals and returns string values in onChange events. This is particularly useful for handling large numbers or precise decimal values. Note that BigInt polyfill is required for older browsers.

LANGUAGE: jsx
CODE:
<InputNumber stringMode />

----------------------------------------

TITLE: Documenting Style Customization in Ant Design
DESCRIPTION: Markdown documentation explaining how to use the style prop to modify default component styles. Provided in both Chinese (zh-CN) and English (en-US) translations.

LANGUAGE: markdown
CODE:
## zh-CN

测试一些 `style` 修改样式的行为。

## en-US

Use `style` to change default style.

----------------------------------------

TITLE: Implementing Custom Icons in Ant Design React Components
DESCRIPTION: This snippet demonstrates how to use custom icons within Ant Design components. It imports necessary dependencies and creates a custom icon component that can be used with various Ant Design elements.

LANGUAGE: JSX
CODE:
import { Button, Tooltip, Space } from 'antd';
import { SearchOutlined } from '@ant-design/icons';
import React from 'react';

const HeartSvg = () => (
  <svg width="1em" height="1em" fill="currentColor" viewBox="0 0 1024 1024">
    <path d="M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9z" />
  </svg>
);

const HeartIcon = (props) => <Icon component={HeartSvg} {...props} />;

export default () => (
  <Space>
    <Tooltip title="search">
      <Button type="primary" shape="circle" icon={<SearchOutlined />} />
    </Tooltip>
    <Button type="primary" shape="circle">
      A
    </Button>
    <Button type="primary" icon={<SearchOutlined />}>
      Search
    </Button>
    <Tooltip title="search">
      <Button shape="circle" icon={<SearchOutlined />} />
    </Tooltip>
    <Button icon={<SearchOutlined />}>Search</Button>
    <br />
    <Tooltip title="search">
      <Button shape="circle" icon={<SearchOutlined />} />
    </Tooltip>
    <Button icon={<SearchOutlined />}>Search</Button>
    <Tooltip title="search">
      <Button type="dashed" shape="circle" icon={<SearchOutlined />} />
    </Tooltip>
    <Button type="dashed" icon={<SearchOutlined />}>
      Search
    </Button>
    <Button icon={<SearchOutlined />} href="https://www.google.com" />
    <br />
    <br />
    <Tooltip title="search">
      <Button type="primary" shape="circle" icon={<SearchOutlined />} size="large" />
    </Tooltip>
    <Button type="primary" shape="circle" size="large">
      A
    </Button>
    <Button type="primary" icon={<SearchOutlined />} size="large">
      Search
    </Button>
    <Tooltip title="search">
      <Button shape="circle" icon={<SearchOutlined />} size="large" />
    </Tooltip>
    <Button icon={<SearchOutlined />} size="large">
      Search
    </Button>
    <br />
    <Tooltip title="Heart">
      <Button type="primary" icon={<HeartIcon />} size="large" />
    </Tooltip>
  </Space>
);

----------------------------------------

TITLE: Button with Dropdown Documentation
DESCRIPTION: Multilingual documentation explaining button with dropdown menu functionality in Ant Design. Describes how the button is positioned on the left with a related menu on the right, and mentions the ability to customize the right icon using the 'icon' property.

LANGUAGE: markdown
CODE:
## zh-CN

左边是按钮，右边是额外的相关功能菜单。可设置 `icon` 属性来修改右边的图标。

## en-US

A button is on the left, and a related functional menu is on the right. You can set the icon property to modify the icon of right.

----------------------------------------

TITLE: Implementing Radio Group in React with Ant Design
DESCRIPTION: Demonstrates two ways to implement Radio.Group - the recommended approach using options prop and the less recommended direct children approach.

LANGUAGE: tsx
CODE:
// When use Radio.Group, recommended ✅
return (
  <Radio.Group
    value={value}
    options={[
      { value: 1, label: "A" },
      { value: 2, label: "B"},
      { value: 3, label: "C" },
    ]}
  />
);

// No recommended 🙅🏻‍♀️
return (
  <Radio.Group value={value}>
    <Radio value={1}>A</Radio>
    <Radio value={2}>B</Radio>
    <Radio value={3}>C</Radio>
  </Radio.Group>
);

----------------------------------------

TITLE: Measuring Total Height with CSS Ellipsis in React
DESCRIPTION: This snippet demonstrates how to measure the total height of text with CSS-based ellipsis using a React ref. It's part of the mixed measurement approach for accurate text truncation.

LANGUAGE: tsx
CODE:
<div ref={measureRef} style={ellipsisStyle}>
  {text}
</div>;

const cssHeight = measureRef.current.clientHeight;

----------------------------------------

TITLE: Image Fallback Logic Description
DESCRIPTION: Describes the fallback sequence when an image fails to load. The component first checks if src is a ReactElement to use as fallback, then attempts to use an icon prop, and finally falls back to displaying children content if no other options are valid.

LANGUAGE: markdown
CODE:
src (ReactElement) -> src -> icon -> children

----------------------------------------

TITLE: Caching Build Artifacts in GitHub Actions
DESCRIPTION: GitHub Actions cache configuration for storing and retrieving yarn.lock files between builds for comparison.

LANGUAGE: yaml
CODE:
- uses: actions/cache@v4
  with:
    path: ~tmpProj/yarn.lock
    key: primes-${{ runner.os }}-${{ github.run_id }}
    restore-keys: mock-proj-lock-file

----------------------------------------

TITLE: Defining Component Token Headers
DESCRIPTION: Markdown headers defining the language sections for component token documentation in Chinese and English

LANGUAGE: markdown
CODE:
## zh-CN

组件 Token

## en-US

Component Token

----------------------------------------

TITLE: Displaying Multilingual Debug Warning Messages
DESCRIPTION: Markdown content displaying warning messages in Chinese (zh-CN) and English (en-US) about not using debug components in production environments.

LANGUAGE: markdown
CODE:
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.

----------------------------------------

TITLE: Custom Type Extraction for Select Options
DESCRIPTION: Shows traditional way of extracting Select component option types using TypeScript type operations.

LANGUAGE: tsx
CODE:
import type { SelectProps } from 'antd';

type SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];

----------------------------------------

TITLE: Implementing Quarter Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific quarter in the DatePicker component. It is used when users need to input year and quarter information.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-quarter.tsx" description="用于季度的选择。用户仅需输入年份 + 季度信息时使用。">选择某季度</code>

----------------------------------------

TITLE: Implementing Controlled Checkbox with Ant Design and React
DESCRIPTION: This code snippet demonstrates how to create a controlled checkbox using Ant Design components in a React application. It shows the checkbox being used within a form context, illustrating how to manage its state and handle changes.

LANGUAGE: jsx
CODE:
import { Checkbox, Form } from 'antd';
import React from 'react';

const App: React.FC = () => {
  const [form] = Form.useForm();

  const onFinish = (values: any) => {
    console.log('Finish:', values);
  };

  return (
    <Form form={form} name="validate_other" onFinish={onFinish}>
      <Form.Item name="checkbox-group" valuePropName="checked">
        <Checkbox>Checkbox</Checkbox>
      </Form.Item>
      <Form.Item>
        <Button type="primary" htmlType="submit">
          Submit
        </Button>
      </Form.Item>
    </Form>
  );
};

export default App;

----------------------------------------

TITLE: Styling Table Control Bar in Ant Design CSS
DESCRIPTION: Custom CSS styling for table control bar form items, adjusting margins for better spacing and layout

LANGUAGE: css
CODE:
.table-demo-control-bar .ant-form-item {
  margin-inline-end: 16px !important;
  margin-bottom: 8px !important;
}

----------------------------------------

TITLE: Ant Design Context Menu Documentation
DESCRIPTION: Documentation in Chinese and English explaining how to configure context menu trigger behavior. The component supports both hover and right-click (contextMenu) trigger modes, with the menu position following the click location.

LANGUAGE: markdown
CODE:
## zh-CN

默认是移入触发菜单，可以点击鼠标右键触发。弹出菜单位置会跟随右键点击位置变动。

## en-US

The default trigger mode is `hover`, you can change it to `contextMenu`. The pop-up menu position will follow the right-click position.

----------------------------------------

TITLE: Basic Semantic DOM Example for Popover Component
DESCRIPTION: Example demonstrating semantic DOM structure for the Popover component, referenced in the documentation with path ./demo/_semantic.tsx

LANGUAGE: tsx
CODE:
<code src="./demo/_semantic.tsx" simplify="true"></code>

----------------------------------------

TITLE: Configuring Scheduled GitHub Actions Workflow
DESCRIPTION: GitHub Actions workflow configuration to run automated builds every 30 minutes using cron schedule.

LANGUAGE: yaml
CODE:
on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

----------------------------------------

TITLE: Documentation for Compact Table Sizes in ant-design
DESCRIPTION: Describes two compacted table size options available in ant-design: middle and small. Small size tables are specifically designed for use within Modal components only.

LANGUAGE: markdown
CODE:
## zh-CN

两种紧凑型的列表，小型列表只用于对话框内。

## en-US

There are two compacted table sizes: `middle` and `small`. The `small` size is used in Modals only.

----------------------------------------

TITLE: TypeScript Table Implementation
DESCRIPTION: Example showing how to use the Table component with TypeScript including proper type definitions for columns and data source.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Table } from 'antd';
import type { TableColumnsType } from 'antd';

interface User {
  key: number;
  name: string;
}

const columns: TableColumnsType<User> = [
  {
    key: 'name',
    title: 'Name',
    dataIndex: 'name',
  },
];

const data: User[] = [
  {
    key: 0,
    name: 'Jack',
  },
];

const Demo: React.FC = () => (
  <>
    <Table<User> columns={columns} dataSource={data} />
    <Table<User> dataSource={data}>
      <Table.Column<User> key="name" title="Name" dataIndex="name" />
    </Table>
  </>
);

export default Demo;

----------------------------------------

TITLE: Next.js Integration with Ant Design Styles
DESCRIPTION: Configuration for integrating Ant Design styles with Next.js, including script setup and style provider implementation.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';
import type { AppProps } from 'next/app';

import '../public/antd.min.css';
import '../styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <StyleProvider hashPriority="high">
      <Component {...pageProps} />
    </StyleProvider>
  );
}

----------------------------------------

TITLE: Implementing Alert Types with Icons and Colors in TSX
DESCRIPTION: This snippet shows how to use different background colors and icons to indicate various alert types such as success, information, warning, and error. It demonstrates type differentiation in alerts.

LANGUAGE: TSX
CODE:
src="./design/demo/type"

----------------------------------------

TITLE: Implementing custom snapshot serializer for DOM elements
DESCRIPTION: Shows how to create a custom snapshot serializer to handle DOM element differences between React versions in Jest tests.

LANGUAGE: typescript
CODE:
expect.addSnapshotSerializer({
  test: (element) => element instanceof HTMLElement,
  print: (element) => {
    const htmlContent = format(element, {
      plugins: [plugins.DOMCollection, plugins.DOMElement],
    });
    const filtered = htmlContent
      .split(/[\n\r]+/)
      .filter((line) => line.trim())
      .map((line) => line.replace(/\s+$/, ''))
      .join('\n');
    return filtered;
  },
});

----------------------------------------

TITLE: Configuring 12-hour TimePicker format in Ant Design
DESCRIPTION: This snippet explains how to set up a TimePicker component with a 12-hour format in Ant Design. The default format is 'h:mm:ss a', which represents hours (1-12), minutes, seconds, and AM/PM indicator.

LANGUAGE: markdown
CODE:
## zh-CN

12 小时制的时间选择器，默认的 format 为 `h:mm:ss a`。

## en-US

TimePicker of 12 hours format, with default format `h:mm:ss a`.

----------------------------------------

TITLE: ColorPicker API Parameters
DESCRIPTION: API reference table showing the available props and parameters for the ColorPicker component.

LANGUAGE: markdown
CODE:
| Parameter | Description | Type | Default | Version |
| :-- | :-- | :-- | :-- | :-- |
| allowClear | Allow clearing selected color | boolean | false | |
| arrow | Configure popup arrow | boolean \| { pointAtCenter: boolean } | true | |
| children | ColorPicker trigger | React.ReactNode | - | |
| defaultValue | Default color value | string \| Color | - | |
| defaultFormat | Default color format | rgb \| hex \| hsb | - | 5.9.0 |

----------------------------------------

TITLE: Multiple Image Preview
DESCRIPTION: Demonstrates how to preview multiple images in a group.

LANGUAGE: typescript
CODE:
<code src="./demo/preview-group.tsx">多张图片预览</code>

----------------------------------------

TITLE: Hybrid CSS-JS Ellipsis Measurement in React
DESCRIPTION: These snippets demonstrate a hybrid approach to text truncation with ellipsis. It uses CSS to measure the total height of the truncated text and JavaScript to determine the exact truncation point, ensuring accuracy even with mixed line heights.

LANGUAGE: tsx
CODE:
<div ref={measureRef} style={ellipsisStyle}>
  {text}
</div>;

const cssHeight = measureRef.current.clientHeight;

LANGUAGE: tsx
CODE:
// pseudocode. Not used in real world
<div ref={walkingMeasureRef}>{text.slice(0, walkingMeasureIndex)}</div>;

if (walkingMeasureRef.current.clientHeight > cssHeight) {
  // Not meet the requirement
}

----------------------------------------

TITLE: UI Stability Test Instructions in Markdown (Chinese)
DESCRIPTION: Simple markdown instruction in Chinese asking users to test the demo to check if there are any style shaking issues before modifying content.

LANGUAGE: markdown
CODE:
## zh-CN

修改内容前，请尝试此 Demo 查看样式是否抖动。

----------------------------------------

TITLE: Defining ToolbarRenderInfoType Interface in TypeScript
DESCRIPTION: Interface definition for toolbar rendering information including icons, action handlers, transformation state, and image info.

LANGUAGE: typescript
CODE:
{
  icons: {
    flipYIcon: React.ReactNode;
    flipXIcon: React.ReactNode;
    rotateLeftIcon: React.ReactNode;
    rotateRightIcon: React.ReactNode;
    zoomOutIcon: React.ReactNode;
    zoomInIcon: React.ReactNode;
  };
  actions: {
    onActive?: (index: number) => void;
    onFlipY: () => void;
    onFlipX: () => void;
    onRotateLeft: () => void;
    onRotateRight: () => void;
    onZoomOut: () => void;
    onZoomIn: () => void;
    onReset: () => void;
    onClose: () => void;
  };
  transform: TransformType,
  current: number;
  image: ImgInfo
}

----------------------------------------

TITLE: Documenting TreeSelect prop behavior in Markdown
DESCRIPTION: Explains when the maxCount prop does not take effect in the TreeSelect component, based on the values of showCheckedStrategy and treeCheckStrictly props.

LANGUAGE: Markdown
CODE:
## zh-CN

当 `showCheckedStrategy='SHOW_PARENT'` 或 `showCheckedStrategy='SHOW_ALL'` 且 `treeCheckStrictly=false` 时，`maxCount` 就不会生效。

## en-US

When `showCheckedStrategy=SHOW_PARENT` or `showCheckedStrategy=SHOW_ALL` and `treeCheckStrictly=false`, `maxCount` will not take effect.

----------------------------------------

TITLE: Avatar Component API Documentation
DESCRIPTION: API documentation for the Avatar component, including all available props and their descriptions. Includes both Avatar and Avatar.Group component configurations.

LANGUAGE: markdown
CODE:
### Avatar

| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| alt | 图像无法显示时的替代文本 | string | - |  |
| gap | 字符类型距离左右两侧边界单位像素 | number | 4 | 4.3.0 |
| icon | 设置头像的自定义图标 | ReactNode | - |  |
| shape | 指定头像的形状 | `circle` \| `square` | `circle` |  |
| size | 设置头像的大小 | number \| `large` \| `small` \| `default` \| { xs: number, sm: number, ...} | `default` | 4.7.0 |
| src | 图片类头像的资源地址或者图片元素 | string \| ReactNode | - | ReactNode: 4.8.0 |
| srcSet | 设置图片类头像响应式资源地址 | string | - |  |
| draggable | 图片是否允许拖动 | boolean \| `'true'` \| `'false'` | true |  |
| crossOrigin | CORS 属性设置 | `'anonymous'` \| `'use-credentials'` \| `''` | - | 4.17.0 |
| onError | 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为 | () => boolean | - |  |

----------------------------------------

TITLE: React 18 Compatible SomeComponent Implementation
DESCRIPTION: Demonstrates an updated implementation of SomeComponent that is compatible with React 18's StrictMode. It uses useState and useEffect to manage the container element and clean up properly.

LANGUAGE: tsx
CODE:
// Fake Code. Just for Demo
const SomeComponent = ({ getContainer }) => {
  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);

  React.useEffect(() => {
    if (getContainer) {
      setMyContainer(getContainer());
      return;
    }

    const div = document.createElement('div');
    document.body.appendChild(div);
    setMyContainer(div);

    return () => {
      document.body.removeChild(div);
    };
  }, [getContainer]);

  return <PopupWrapper getContainer={() => myContainer} />;
};

----------------------------------------

TITLE: Testing Component Warnings with Jest Spies
DESCRIPTION: Shows how to test component deprecation warnings using Jest spy functions.

LANGUAGE: diff
CODE:
    describe('BackTop', () => {
++    it('should console Error', () => {
++        const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
++        render(<BackTop />);
++        expect(errSpy).toHaveBeenCalledWith(
++          'Warning: [antd: BackTop] `BackTop` is deprecated. Please use `FloatButton.BackTop` instead.',
++        );
++      errSpy.mockRestore();
++    });
    });

----------------------------------------

TITLE: Demonstrating React 18 StrictMode Behavior with Hooks
DESCRIPTION: This snippet illustrates how React 18's StrictMode affects the execution of different hooks, including render, useMemo, and useEffect. It shows that effects are called multiple times to ensure proper cleanup.

LANGUAGE: tsx
CODE:
const My = () => {
  console.log('render');

  useMemo(() => {
    console.log('memo');
  }, []);

  useEffect(() => {
    console.log('effect');

    return () => {
      console.log('effect cleanup');
    };
  }, []);
};

<StrictMode>
  <My />
</StrictMode>;

// Console:
// - render
// - memo
// - render
// - memo
// - effect
// - effect cleanup
// - effect

----------------------------------------

TITLE: GetProps Type Utility Usage
DESCRIPTION: Demonstrates how to use GetProps utility to extract props type from a sub-component.

LANGUAGE: tsx
CODE:
import type { Checkbox, GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;

----------------------------------------

TITLE: Content Security Policy Configuration - React/TypeScript
DESCRIPTION: Configuration example for Content Security Policy (CSP) support with wave effect using nonce code.

LANGUAGE: tsx
CODE:
<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>
  <Button>My Button</Button>
</ConfigProvider>

----------------------------------------

TITLE: Importing Compatibility Package for React 19 in TypeScript
DESCRIPTION: This code snippet shows how to import the @ant-design/v5-patch-for-react-19 compatibility package at the application entry point to ensure Ant Design v5 works correctly with React 19.

LANGUAGE: tsx
CODE:
import '@ant-design/v5-patch-for-react-19';

----------------------------------------

TITLE: Adding console warning tests for deprecated components
DESCRIPTION: Demonstrates how to add tests for console warnings when using deprecated components in React Testing Library.

LANGUAGE: javascript
CODE:
describe('BackTop', () => {
++ it('should console Error', () => {
++   const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
++   render(<BackTop />);
++   expect(errSpy).toHaveBeenCalledWith(
++     'Warning: [antd: BackTop] `BackTop` is deprecated. Please use `FloatButton.BackTop` instead.',
++   );
++ errSpy.mockRestore();
++ });
});

----------------------------------------

TITLE: Using HappyProvider for Happy Work Theme in React
DESCRIPTION: This snippet demonstrates how to use the HappyProvider component from @ant-design/happy-work-theme to enable the Happy Work Theme effects in a React application.

LANGUAGE: tsx
CODE:
import { HappyProvider } from '@ant-design/happy-work-theme';

export default () => (
  <HappyProvider>
    <Button />
  </HappyProvider>
);

----------------------------------------

TITLE: Styling Custom Image Viewer Toolbar in CSS
DESCRIPTION: Defines CSS styles for a customizable image viewer toolbar. It sets the appearance of the toolbar wrapper, icon buttons, and their hover and disabled states. The toolbar has a semi-transparent background and rounded corners.

LANGUAGE: css
CODE:
.toolbar-wrapper {
  padding: 0px 24px;
  color: #fff;
  font-size: 20px;
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 100px;
}

.toolbar-wrapper .anticon {
  padding: 12px;
  cursor: pointer;
}

.toolbar-wrapper .anticon[disabled] {
  cursor: not-allowed;
  opacity: 0.3;
}

.toolbar-wrapper .anticon:hover {
  opacity: 0.3;
}

----------------------------------------

TITLE: Queue Creation Implementation
DESCRIPTION: Queue management implementation for handling nested portal creation order using React state and useLayoutEffect.

LANGUAGE: tsx
CODE:
// pseudocode
const [queue, setQueue] = useState<VoidFunction[]>([]);

function queueCreate(appendFn: VoidFunction) {
  setQueue((origin) => {
    const newQueue = [appendFn, ...origin];
    return newQueue;
  });
}

useLayoutEffect(() => {
  if (queue.length) {
    queue.forEach((appendFn) => appendFn());
    setQueue([]);
  }
}, [queue]);

----------------------------------------

TITLE: Documenting Draggable Tags Implementation with dnd kit in Markdown
DESCRIPTION: This snippet provides documentation for implementing draggable tags using the dnd kit library. It includes both Chinese and English descriptions, linking to the dnd kit website for further reference.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 [dnd kit](https://dndkit.com) 实现的可拖拽标签。

## en-US

Draggable tags using [dnd kit](https://dndkit.com).

----------------------------------------

TITLE: Demonstrating Component Unmounting and Mounting Order in React
DESCRIPTION: This code illustrates the order of operations when switching between two components in React. It highlights potential issues with style management during component transitions.

LANGUAGE: tsx
CODE:
import React from 'react';

const A = () => {
  React.useMemo(() => {
    console.log('A render');
  }, []);

  React.useEffect(() => {
    console.log('A mounted');
    return () => {
      console.log('A unmounted');
    };
  }, []);

  return <div>A</div>;
};

const B = () => {
  React.useMemo(() => {
    console.log('B render');
  }, []);

  React.useEffect(() => {
    console.log('B mounted');
    return () => {
      console.log('B unmounted');
    };
  }, []);

  return <div>B</div>;
};

export default function App() {
  const [show, setShow] = React.useState(true);

  const toggle = () => {
    setShow((prev) => !prev);
  };

  return (
    <div>
      <button onClick={toggle}>toggle</button>
      <div>{show ? <A /> : <B />}</div>
    </div>
  );
}

----------------------------------------

TITLE: Disabling Hash and Enabling CSS Variables with ConfigProvider
DESCRIPTION: This code shows how to disable the hash feature while enabling CSS variables in Ant Design, useful for applications with a single antd version to reduce style size.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ cssVar: true, hashed: false }}>
  <App />
</ConfigProvider>

----------------------------------------

TITLE: Styling Ant Design Grid Rows with CSS
DESCRIPTION: This CSS snippet applies a background color to all elements within the grid demo that have a class containing 'ant-row'. It uses a semi-transparent gray background to visually distinguish the rows.

LANGUAGE: css
CODE:
#grid-demo-flex-order [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}

----------------------------------------

TITLE: Static Style Extraction for Ant Design Components
DESCRIPTION: Demonstrates how to pre-render all Ant Design components to extract their complete styles into a static CSS file. This method allows for better caching and performance.

LANGUAGE: tsx
CODE:
const cache = createCache();

// HTML Content
renderToString(
  <StyleProvider cache={cache}>
    <Button />
    <Switch />
    <Input />
    {/* Rest antd components */}
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);

----------------------------------------

TITLE: Optimized ConfigProvider with Context
DESCRIPTION: Final optimized implementation using a separate ValidateMessageContext to decouple from FormProvider.

LANGUAGE: tsx
CODE:
// Sample only. Not real world code.
import { ValidateMessageContext } from '../form/context.ts';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = ...

  return (
    // Just use the proxy context
    <ValidateMessageContext value={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </ValidateMessageContext>
  );
};

----------------------------------------

TITLE: Starting the Refine project
DESCRIPTION: Commands to navigate into the project directory and start the development server after initializing the Refine project with Ant Design.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm run dev

----------------------------------------

TITLE: Configuring TailwindCSS v3 Layer Order with Ant Design
DESCRIPTION: This CSS snippet demonstrates how to arrange the @layer order in TailwindCSS v3 to properly integrate with Ant Design, ensuring correct style override behavior.

LANGUAGE: less
CODE:
@layer tailwind-base, antd;

@layer tailwind-base {
  @tailwind base;
}
@tailwind components;
@tailwind utilities;

----------------------------------------

TITLE: Configuring Select Component Sizes in Ant Design
DESCRIPTION: Explains the three size options for Select components and their corresponding input field heights. The default size has a height of 32px, while 'large' is 40px and 'small' is 24px.

LANGUAGE: markdown
CODE:
## zh-CN

三种大小的选择框，当 size 分别为 `large` 和 `small` 时，输入框高度为 `40px` 和 `24px` ，默认高度为 `32px`。

## en-US

The height of the input field for the select defaults to 32px. If size is set to large, the height will be 40px, and if set to small, 24px.

----------------------------------------

TITLE: Defining Drawer Component API Parameters
DESCRIPTION: API table documenting the properties, types, defaults and versions for the Drawer component

LANGUAGE: markdown
CODE:
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| autoFocus | 抽屉展开后是否将焦点切换至其 DOM 节点 | boolean | true | 4.17.0 |
| afterOpenChange | 切换抽屉时动画结束后的回调 | function(open) | - |  |
| className | Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName | string | - |  |
| classNames | 语义化结构 className | [Record<SemanticDOM, string>](#semantic-dom) | - | 5.10.0 |

----------------------------------------

TITLE: Collecting Scroll Containers for Event Listeners in TypeScript
DESCRIPTION: This function collects all scrollable parent elements of a given element. It's used to attach scroll event listeners for recalculating popup positions when scrolling occurs in any parent container.

LANGUAGE: tsx
CODE:
function collectScroll(ele: HTMLElement) {
  const scrollList: HTMLElement[] = [];
  let current = ele?.parentElement;

  while (current) {
    if (isScrollContainer(current)) {
      scrollList.push(ele);
    }

    current = current.parentElement;
  }

  return scrollList;
}

const targetScrollList = collectScroll(targetEle);
const popupScrollList = collectScroll(popupEle);

// We merge the list in real world. Here just for sample
[window, ...targetScrollList, ...popupScrollList].forEach((ele) => {
  ele.addEventListener(...);
});

----------------------------------------

TITLE: Styling Ant Design Tabs with CSS
DESCRIPTION: This CSS snippet provides custom styling for the Ant Design Tabs component. It adjusts the margin of the icon within the tab label to ensure proper spacing between the icon and text.

LANGUAGE: css
CODE:
.ant-tabs-tab .anticon {
  margin-right: 8px;
}

----------------------------------------

TITLE: Collapsible Splitter Panels in React
DESCRIPTION: This example shows how to create collapsible panels within the Splitter component, allowing users to quickly expand or collapse sections.

LANGUAGE: jsx
CODE:
<code src="./demo/collapsible.tsx">可折叠</code>

----------------------------------------

TITLE: Clickable Badge in TypeScript
DESCRIPTION: Example of making a Badge clickable, typically used for linking to a detailed view. This demonstrates how to add interactivity to badges.

LANGUAGE: typescript
CODE:
<code src="./demo/link.tsx">可点击</code>

----------------------------------------

TITLE: List Component Type Definitions
DESCRIPTION: TypeScript interface definitions showing available properties for List, List.Item, and List.Item.Meta components.

LANGUAGE: typescript
CODE:
interface ListProps {
  bordered?: boolean;
  dataSource?: any[];
  footer?: ReactNode;
  grid?: ListGridProps;
  header?: ReactNode;
  itemLayout?: 'horizontal' | 'vertical';
  loading?: boolean | SpinProps;
  loadMore?: ReactNode;
  locale?: { emptyText: string };
  pagination?: boolean | object;
  renderItem?: (item: any) => ReactNode;
  rowKey?: string | ((item: any) => React.Key);
  size?: 'default' | 'large' | 'small';
  split?: boolean;
}

----------------------------------------

TITLE: Customizing Image Gallery Properties in ant-design (Markdown)
DESCRIPTION: This snippet demonstrates how to customize image properties in an ant-design gallery component. It includes examples for modifying image source, size, description, and extra content, presented in both Chinese and English.

LANGUAGE: Markdown
CODE:
## zh-CN

自定义图片链接、图片大小、描述、附属内容。

## en-US

Customize image source, image size, description and extra content.

----------------------------------------

TITLE: Using App Component and useApp Hook in Ant Design v5
DESCRIPTION: This snippet demonstrates the usage of the new App component and useApp hook in Ant Design v5, which simplifies the process of accessing message APIs with proper context.

LANGUAGE: tsx
CODE:
const Demo = () => {
  const { message } = App.useApp();

  React.useEffect(() => {
    message.success('Hello World');
  }, []);

  // ...
};

----------------------------------------

TITLE: HTML Structure for Design Cards
DESCRIPTION: HTML markup for displaying design principle cards with images and descriptions

LANGUAGE: html
CODE:
<div class="design-inline-cards">
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*7BUOQYDiEr0AAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>可循性</h4>
      <p>用户可定位到他们想要的信息。</p>
    </div>
  </div>
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*NfLHQJfGmUQAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>高效</h4>
      <p>1. 多接入点：对同一目的地提供多个链接；</p>
      <p>2. 捷径：提供访问内容的捷径，如相关链接；</p>
      <p>3. 逃生舱：点击 logo 回到首页重新启动信息搜寻。</p>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Implementing Multilevel Menu Structure in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to create a menu with multiple hierarchical levels using Ant Design's Menu component. It includes examples for both Chinese and English languages, showcasing the flexibility of the component for internationalization.

LANGUAGE: JSX
CODE:
import { Menu } from 'antd';
import { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';

function getItem(label, key, icon, children, type) {
  return {
    key,
    icon,
    children,
    label,
    type,
  };
}

const items = [
  getItem('Navigation One', 'sub1', <MailOutlined />, [
    getItem('Option 1', '1'),
    getItem('Option 2', '2'),
    getItem('Option 3', '3'),
    getItem('Option 4', '4'),
  ]),
  getItem('Navigation Two', 'sub2', <AppstoreOutlined />, [
    getItem('Option 5', '5'),
    getItem('Option 6', '6'),
    getItem('Submenu', 'sub3', null, [
      getItem('Option 7', '7'),
      getItem('Option 8', '8'),
    ]),
  ]),
  getItem('Navigation Three', 'sub4', <SettingOutlined />, [
    getItem('Option 9', '9'),
    getItem('Option 10', '10'),
    getItem('Option 11', '11'),
    getItem('Option 12', '12'),
  ]),
];

const App = () => {
  const onClick = (e) => {
    console.log('click ', e);
  };

  return (
    <Menu
      onClick={onClick}
      style={{ width: 256 }}
      defaultSelectedKeys={['1']}
      defaultOpenKeys={['sub1']}
      mode="inline"
      items={items}
    />
  );
};

export default App;

----------------------------------------

TITLE: Configuring Progress Bar Mode Property Documentation
DESCRIPTION: Markdown documentation explaining how to use the mode property to set either single or gradient colors for Progress components in both Chinese and English.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `mode` 设置颜色为单一颜色还是渐变色。

## en-US

Set the color to a single or a gradient color via `mode`.

----------------------------------------

TITLE: Importing Image Component in React
DESCRIPTION: Example of importing and using the Image component in a React application.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">基本用法</code>

----------------------------------------

TITLE: Implementing Global Locale Hack for Static Methods
DESCRIPTION: This snippet demonstrates a hack used to provide locale information to static methods in Ant Design. It shows how global variables are used to store and retrieve locale settings.

LANGUAGE: tsx
CODE:
// Sample. Not real world code.
let globalLocale = null;

const ConfigProvider = (props) => {
  if (props.locale) {
    globalLocale = props.locale;
  }

  // ...
};

Modal.confirm = (props) => {
  // ...

  ReactDOM.render(
    <ConfigProvider locale={globalLocale}>
      <Modal {...modalProps} />
    </ConfigProvider>,
  );
};

----------------------------------------

TITLE: GetProp Type Utility Usage
DESCRIPTION: Shows how to use GetProp utility to extract specific property types from components or their props types.

LANGUAGE: tsx
CODE:
import type { GetProp, Select, SelectProps } from 'antd';

// Both of this can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];

----------------------------------------

TITLE: Styling Editable Tabs for Drag and Drop in Ant Design
DESCRIPTION: CSS customization to remove transition effects on editable card-type tabs to ensure smooth drag and drop behavior. This modification is necessary when implementing dnd-kit draggable functionality.

LANGUAGE: css
CODE:
/* set transition to none when type="editable-card" */
.ant-tabs-editable > .ant-tabs-nav .ant-tabs-tab {
  transition: none;
}

----------------------------------------

TITLE: Rendering Ant Design Tabs with Icons in React TypeScript
DESCRIPTION: This code snippet demonstrates how to create Tab components with icons using Ant Design in a React application. It imports necessary components from antd and @ant-design/icons, then renders a Tabs container with three tabs, each having a different icon.

LANGUAGE: typescript
CODE:
import { Tabs } from 'antd';
import { AppleOutlined, AndroidOutlined } from '@ant-design/icons';

const App: React.FC = () => (
  <Tabs
    defaultActiveKey="2"
    items={[
      {
        label: (
          <span>
            <AppleOutlined />
            Tab 1
          </span>
        ),
        key: '1',
        children: 'Tab 1',
      },
      {
        label: (
          <span>
            <AndroidOutlined />
            Tab 2
          </span>
        ),
        key: '2',
        children: 'Tab 2',
      },
    ]}
  />
);

export default App;

----------------------------------------

TITLE: Extending ConfigProvider with Inherited ClassNames in React
DESCRIPTION: This code snippet shows how to extend the ConfigProvider to include both custom and inherited class names. It demonstrates combining existing button classes with new custom styles.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { button } = React.useContext(ConfigProvider.ConfigContext);
  const { styles } = useButtonStyle();
  return (
    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>
      {props.children}
    </ConfigProvider>
  );
};

export default GeekProvider;

----------------------------------------

TITLE: Exception Page Design Structure (Markdown)
DESCRIPTION: Markdown structure defining the exception page documentation including headers, design principles, and various error state templates (404, 403, 500, browser incompatibility).

LANGUAGE: markdown
CODE:
---
group: 设计模式 - 探索
type: 模板文档
order: 5
title: 异常页
---

----------------------------------------

TITLE: Adding Status to InputNumber Component
DESCRIPTION: Demonstrates how to add error or warning status to an InputNumber component using the status prop. The component can be configured with either 'error' or 'warning' status values to indicate different validation states.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `status` 为 InputNumber 添加状态，可选 `error` 或者 `warning`。

## en-US

Add status to InputNumber with `status`, which could be `error` or `warning`.

----------------------------------------

TITLE: Basic Ant Design Component Integration
DESCRIPTION: Example of importing and using an Ant Design Button component in a Next.js page component.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;

----------------------------------------

TITLE: Using GetProp to Obtain Single Prop Type in TypeScript
DESCRIPTION: Illustrates the use of GetProp to extract the type of a single prop (options) from the Select component. GetProp includes NonNullable, eliminating the need to handle null cases.

LANGUAGE: typescript
CODE:
import { Select } from 'antd';
import type { GetProp, SelectProps } from 'antd';

// 以下两种都可以生效
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];

----------------------------------------

TITLE: Running Visual Regression Tests in Ant Design (Bash)
DESCRIPTION: Command to run visual regression tests in the Ant Design repository. It captures screenshots of component demos and saves them in the imageSnapshots directory. An option for testing specific components is also provided.

LANGUAGE: bash
CODE:
npm run test:image # Screenshots will be saved in the imageSnapshots directory. For specific component screenshots, use: npm run test:image -- components/button

----------------------------------------

TITLE: Image Preview Component Template
DESCRIPTION: Template for displaying image previews with optional descriptions.

LANGUAGE: HTML
CODE:
<ImagePreview>
<img class="preview-img no-padding" description="海兔色板" src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*5ZE6RrjW-jQAAAAAAAAAAABkARQnAQ" />
</ImagePreview>

----------------------------------------

TITLE: Gap Parameter Usage - Ant Design Component
DESCRIPTION: Demonstrates the usage of the gap parameter to control highlight area margins and border radius. Notes version 5.9.0 compatibility for directional offsets and array-type offset parameters.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `gap` 参数来控制高亮区域的边距和圆角。

- `5.9.0` 之前不支持单独设置两个方向上的边距和数组类型的 `offset` 参数。

## en-US

Using `gap` to control the radius of highlight area and the offset between highlight area and the element.

- Setting offset in two directions individually and `offset` with array type is not supported until `5.9.0`.

----------------------------------------

TITLE: Describing Multi-line Text Ellipsis in Ant Design (Chinese)
DESCRIPTION: Explains the usage of multi-line text ellipsis in Chinese. It mentions the 'tooltip' property for configuring ellipsis content display and recommends using 'expandable' for large amounts of text.

LANGUAGE: Markdown
CODE:
## zh-CN

多行文本省略。你可以通过 `tooltip` 属性配置省略展示内容，大量文本时推荐优先使用 `expandable`。

----------------------------------------

TITLE: Basic Linear Progress Implementation
DESCRIPTION: Shows the basic usage of Progress component displaying total and completed progress in a linear format.

LANGUAGE: tsx
CODE:
<code src="./design/demo/progress" description="以线形展示总进度和已完成进度，是最基础的使用方式">了解任务进度</code>

----------------------------------------

TITLE: Record Flattening Implementation - Initial Version
DESCRIPTION: Initial implementation of the flatten function for handling expandable rows, which had performance issues due to creating temporary arrays.

LANGUAGE: tsx
CODE:
function flatten<T extends { children?: T[] }>(data: T[] = []) {
  let tmpList: T[] = [];

  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    tmpList = [...tmpList, record, ...flatten(record.children)];
  }

  return tmpList;
}

----------------------------------------

TITLE: Enabling CSS Variables with ConfigProvider in React 18
DESCRIPTION: This snippet shows how to enable CSS variables globally in an Ant Design React 18 application using the ConfigProvider component.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ cssVar: true }}>
  <App />
</ConfigProvider>

----------------------------------------

TITLE: Adding Saturation and Brightness Overlays to Color Panel in CSS
DESCRIPTION: This CSS snippet combines both saturation and brightness overlays for the color panel, using multiple linear gradients to create a full HSV color space representation.

LANGUAGE: css
CODE:
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent),
  linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));

----------------------------------------

TITLE: RangeDisabledTime Type Definition
DESCRIPTION: TypeScript type definition for the RangePicker's disabledTime prop function that controls disabled time options for range selection

LANGUAGE: typescript
CODE:
type RangeDisabledTime = (
  now: Dayjs,
  type = 'start' | 'end',
) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
};

----------------------------------------

TITLE: Setting TwoTone Color for Icons
DESCRIPTION: Demonstrates how to set and get the primary color for two-tone icons using static methods.

LANGUAGE: jsx
CODE:
import { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';

setTwoToneColor('#eb2f96');
getTwoToneColor(); // #eb2f96

----------------------------------------

TITLE: Caching yarn.lock File in GitHub Actions YAML
DESCRIPTION: This YAML snippet sets up caching for the yarn.lock file in a GitHub Actions workflow. It allows for easy comparison between successful and failed builds to identify dependency changes.

LANGUAGE: yaml
CODE:
- uses: actions/cache@v4
  with:
    path: ~tmpProj/yarn.lock
    key: primes-${{ runner.os }}-${{ github.run_id }}
    restore-keys: mock-proj-lock-file

----------------------------------------

TITLE: Creating Custom Sized Popover in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a Popover component with custom size using Ant Design in a React application. It uses the Popover and Button components from antd, and sets a custom width for the popover content.

LANGUAGE: jsx
CODE:
import { Popover, Button } from 'antd';
import React from 'react';

const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

const App: React.FC = () => (
  <Popover content={content} title="Title" width={500}>
    <Button type="primary">Hover me</Button>
  </Popover>
);

export default App;

----------------------------------------

TITLE: Updating Umi Configuration for ProLayout
DESCRIPTION: Diff showing how to add names to routes in the Umi configuration file for use with ProLayout.

LANGUAGE: diff
CODE:
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
-    { path: "/", component: "index" },
+    { path: "/", component: "index", name: "home" },
-    { path: "/docs", component: "docs" },
+    { path: "/docs", component: "docs", name: "docs" },
-    { path: "/products", component: "products" },
+    { path: "/products", component: "products", name: "products" },
  ],
  plugins: ["@umijs/plugins/dist/react-query"],
  reactQuery: {},
  npmClient: "pnpm",
});

----------------------------------------

TITLE: Configuring Message Component in Ant Design
DESCRIPTION: Demonstrates how to configure global settings for the Message component, including RTL mode, duration, and prefix class.

LANGUAGE: javascript
CODE:
message.config({
  top: 100,
  duration: 2,
  maxCount: 3,
  rtl: true,
  prefixCls: 'my-message',
});

----------------------------------------

TITLE: Initializing Custom DatePicker with Moment.js in TypeScript
DESCRIPTION: Creates a custom DatePicker component using Moment.js instead of the default Day.js library. This snippet uses the generatePicker function from Ant Design to create a DatePicker that works with Moment objects.

LANGUAGE: TypeScript
CODE:
import { DatePicker } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/lib/generate/moment';

const MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);

export default MyDatePicker;

----------------------------------------

TITLE: Rendering TextArea with Semantic DOM Classes in React
DESCRIPTION: This snippet shows how to render a TextArea component with semantic DOM classes in React using Ant Design.

LANGUAGE: tsx
CODE:
import { Input } from 'antd';

const { TextArea } = Input;

const App: React.FC = () => (
  <TextArea
    classNames={{
      textarea: 'my-textarea-class',
      count: 'my-count-class',
    }}
  />
);

export default App;

----------------------------------------

TITLE: CSS Shadow Variables Level 2
DESCRIPTION: Defines shadow CSS variables for second elevation level with up, down, left and right directions. Uses larger offset values and softer opacity compared to level 1.

LANGUAGE: css
CODE:
@shadow-2-up {
  box-shadow: 0px -3px 6px -4px rgba(0,0,0,0.12),
             0px -6px 16px 0px rgba(0,0,0,0.08),
             0px -9px 28px 8px rgba(0,0,0,0.05);
}

----------------------------------------

TITLE: Split Context Implementation
DESCRIPTION: Shows how to split a single context into multiple contexts to minimize the impact of context updates on child components.

LANGUAGE: tsx
CODE:
const MyContext1 = React.createContext<{ prop1: string }>();
const MyContext2 = React.createContext<{ prop2: string }>();

// Child
const { prop1 } = React.useContext(MyContext1);

// Root
<MyContext1.Provider value={context1}>
  <MyContext2.Provider value={context2}>
    <Child />
  </MyContext2.Provider>
</MyContext1.Provider>;

----------------------------------------

TITLE: Component-Level Hash Calculation
DESCRIPTION: Illustration of Ant Design's approach to calculating style hashes based on package version and theme variables, eliminating the need for CSS serialization



----------------------------------------

TITLE: Installing Ant Design with bun
DESCRIPTION: Command to install the Ant Design library using bun package manager.

LANGUAGE: bash
CODE:
bun add antd

----------------------------------------

TITLE: Splitting React Context for Granular Updates
DESCRIPTION: Shows how to split a single context into multiple contexts to reduce the scope of updates and prevent unnecessary re-renders of unaffected components.

LANGUAGE: tsx
CODE:
const MyContext1 = React.createContext<{ prop1: string }>();
const MyContext2 = React.createContext<{ prop2: string }>();

// Child
const { prop1 } = React.useContext(MyContext1);

// Root
<MyContext1.Provider value={context1}>
  <MyContext2.Provider value={context2}>
    <Child />
  </MyContext2.Provider>
</MyContext1.Provider>;

----------------------------------------

TITLE: Updating Umi Configuration for React Query
DESCRIPTION: Diff showing how to enable the react-query plugin in the Umi configuration file.

LANGUAGE: diff
CODE:
import { defineConfig } from "umi";

export default defineConfig({
+  plugins: ['@umijs/plugins/dist/react-query'],
+  reactQuery: {},
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
    { path: "/products", component: "products" },
  ],
  npmClient: 'pnpm',
});

----------------------------------------

TITLE: Element Offset Calculation Utility
DESCRIPTION: Utility function from rc-dialog that retrieves element's position coordinates using getBoundingClientRect.

LANGUAGE: tsx
CODE:
// pseudocode
function offset(el: Element) {
  const { left, top } = el.getBoundingClientRect();
  return { left, top };
}

----------------------------------------

TITLE: Inline Style Rendering for Ant Design Button in HTML
DESCRIPTION: Demonstrates the inline style approach for rendering Ant Design button styles directly in HTML. This method injects styles before each element but can lead to style duplication.

LANGUAGE: html
CODE:
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World</button>
</div>

----------------------------------------

TITLE: Documenting Select Component Variants in ant-design
DESCRIPTION: Defines the four available variant styles for the Select component: outlined (default), filled, borderless, and underlined. These variants allow for different visual presentations while maintaining the same core functionality.

LANGUAGE: markdown
CODE:
outlined filled borderless underlined

----------------------------------------

TITLE: Using Ant Design v4 and v5 Components Together
DESCRIPTION: React code demonstrating how to use Ant Design v4 and v5 components in the same file using aliases.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button as Button4 } from 'antd'; // v4
import { Button as Button5 } from 'antd-v5'; // v5

export default () => (
  <>
    <Button4 />
    <Button5 />
  </>
);

----------------------------------------

TITLE: Implementing Ant Design Button in Next.js
DESCRIPTION: Example of importing and using an Ant Design Button component in a Next.js page.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;

----------------------------------------

TITLE: API Table for Popover Component
DESCRIPTION: Markdown table showing the API properties for the Popover component, including content and title parameters

LANGUAGE: markdown
CODE:
| 参数    | 说明     | 类型                         | 默认值 | 版本 |
| ------- | -------- | ---------------------------- | ------ | ---- |
| content | 卡片内容 | ReactNode \| () => ReactNode | -      |      |
| title   | 卡片标题 | ReactNode \| () => ReactNode | -      |      |

----------------------------------------

TITLE: Creating Custom TimePicker with Moment.js in TypeScript
DESCRIPTION: Implements a custom TimePicker component using the previously created DatePicker. This component is a wrapper around DatePicker with the 'time' picker prop set.

LANGUAGE: TypeScript
CODE:
import * as React from 'react';
import type { PickerTimeProps } from 'antd/es/date-picker/generatePicker';
import type { Moment } from 'moment';

import DatePicker from './DatePicker';

export interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {}

const TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => (
  <DatePicker {...props} picker="time" mode={undefined} ref={ref} />
));

TimePicker.displayName = 'TimePicker';

export default TimePicker;

----------------------------------------

TITLE: Configuring Small Switch Size in Ant Design
DESCRIPTION: This snippet demonstrates how to set a switch component to a small size using the 'size' prop in Ant Design. The 'size="small"' attribute is used to render a smaller version of the switch.

LANGUAGE: markdown
CODE:
## zh-CN

`size="small"` 表示小号开关。

## en-US

`size="small"` represents a small sized switch.

----------------------------------------

TITLE: Static Style Extraction with Theme Support
DESCRIPTION: Demonstrates how to extract styles for all components with support for multiple themes using @ant-design/static-style-extract package.

LANGUAGE: tsx
CODE:
// `node` is the components set we prepared
const css = extractStyle((node) => (
  <>
    <ConfigProvider theme={theme1}>{node}</ConfigProvider>
    <ConfigProvider theme={theme2}>{node}</ConfigProvider>
    <ConfigProvider theme={theme3}>{node}</ConfigProvider>
  </>
));

----------------------------------------

TITLE: Manual Style Collection for SSR in React with Ant Design
DESCRIPTION: Shows how to manually collect styles for server-side rendering using Ant Design's CSS-in-JS solution. This approach prevents style duplication but requires explicit style extraction.

LANGUAGE: tsx
CODE:
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { renderToString } from 'react-dom/server';

const cache = createCache();

// HTML Content
const html = renderToString(
  <StyleProvider cache={cache}>
    <MyApp />
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);

----------------------------------------

TITLE: Debugging Internal Panel in Popconfirm
DESCRIPTION: This code snippet demonstrates how to import a debug example of an internal panel component for Popconfirm in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>

----------------------------------------

TITLE: Creating Mini Progress Bar in TypeScript
DESCRIPTION: Demonstration of creating a small-sized progress bar using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/line-mini.tsx">小型进度条</code>

----------------------------------------

TITLE: Ribbon Badge in TypeScript
DESCRIPTION: Showcases the Ribbon variant of the Badge component. This demonstrates how to use badges as ribbons for highlighting or categorizing content.

LANGUAGE: typescript
CODE:
<code src="./demo/ribbon.tsx">缎带</code>

----------------------------------------

TITLE: Status-Based Progress Visualization
DESCRIPTION: Demonstrates how to represent task status through progress color variations.

LANGUAGE: tsx
CODE:
<code src="./design/demo/status" description="通过已完成进度的颜色，来了解当前任务的状态">了解任务状态</code>

----------------------------------------

TITLE: Describing Radio Group Usage in Ant Design (Markdown)
DESCRIPTION: Provides a brief description of the Radio Group component in both Chinese and English. It explains that the component is used to create a set of mutually exclusive radio buttons.

LANGUAGE: Markdown
CODE:
## zh-CN

一组互斥的 Radio 配合使用。

## en-US

A group of radio components.

----------------------------------------

TITLE: Creating Forms with Refine and Ant Design
DESCRIPTION: Example of creating a form component using Refine's integration with Ant Design components. Shows usage of Form, Input components and Refine's useForm hook.

LANGUAGE: tsx
CODE:
import { Create, useForm } from '@refinedev/antd';
import { Form, Input } from 'antd';

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item label={'Title'} name={['title']} rules={[{ required: true }]}>
          <Input />
        </Form.Item>
      </Form>
    </Create>
  );
};

----------------------------------------

TITLE: Setting Modal Width in Ant Design
DESCRIPTION: Demonstrates how to use the width property to control the width of a modal dialog component in Ant Design. The width property allows customization of the modal's size to fit specific design requirements.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `width` 来设置模态对话框的宽度。

## en-US

Use `width` to set the width of the modal dialog.

----------------------------------------

TITLE: Demonstrating Modal Hook Bug in React
DESCRIPTION: Example showing how contextHolder placement affects modal positioning. When placed inside Modal component, the confirm dialog appears at incorrect coordinates.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, Modal } from 'antd';

export default () => {
  const [modal, contextHolder] = Modal.useModal();

  return (
    <div>
      <Modal open>
        <Button
          onClick={() => {
            modal.confirm({ title: 'Hello World' });
          }}
        >
          Confirm
        </Button>

        {/* 🚨 BUG when put here */}
        {contextHolder}
      </Modal>

      {/* ✅ Work as expect when put here */}
      {/* {contextHolder} */}
    </div>
  );
};

----------------------------------------

TITLE: Using Responsive Grid Properties in Ant Design JSX
DESCRIPTION: Demonstrates how to embed grid properties into breakpoint-specific attributes. Shows the equivalence between shorthand and object notation for these properties.

LANGUAGE: jsx
CODE:
xs={6}

// is equivalent to

xs={{ span: 6 }}

----------------------------------------

TITLE: Multi-Field Inline Edit Pattern - Markdown
DESCRIPTION: Details the implementation of inline editing for multiple fields simultaneously, noting the importance of maintaining visual integrity and proper spacing.

LANGUAGE: markdown
CODE:
Multi-Field Inline Edit

> Note：In「Multi-Field Inline Edit」, there are huge different between the content and required field, So it is more needed to use the 「Explain What Just Happened」 in 「Use Transition」 to eliminate this visual effects.

----------------------------------------

TITLE: Creating Custom Button Styles with antd-style in React
DESCRIPTION: This snippet demonstrates how to create custom button styles using antd-style and ConfigProvider. It shows how to access the prefixCls and create custom CSS styles that respect the Ant Design class naming conventions.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';
import { createStyles } from 'antd-style';

const useButtonStyle = () => {
  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');

  // Customize styles
  return createStyles(({ css }) => ({
    btn: css`
      background: red;
      .${btnPrefixCls}-icon {
        color: green;
      }
    `,
  }))();
};

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { styles } = useButtonStyle();
  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;
};

export default GeekProvider;

----------------------------------------

TITLE: Fallback to useLayoutEffect for React 17 Compatibility
DESCRIPTION: This snippet demonstrates how to use useLayoutEffect as a fallback for useInsertionEffect in React 17. It ensures compatibility while maintaining similar functionality across React versions.

LANGUAGE: tsx
CODE:
const useMergedInsertionEffect = useInsertionEffect || useLayoutEffect;

useMergedInsertionEffect(() => {
  // Same as above
}, [hash]);

----------------------------------------

TITLE: Generated CSS Output
DESCRIPTION: Example of extracted and compiled CSS styles from the cache

LANGUAGE: css
CODE:
:where(.bAMbOo).ant-btn {
  color: red;
}
:where(.bAMbOo).ant-spin {
  color: blue;
}

----------------------------------------

TITLE: Defining DisabledTime Type Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the disabledTime method, specifying granular time disable information including hours, minutes, seconds, and milliseconds.

LANGUAGE: tsx
CODE:
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};

----------------------------------------

TITLE: Example Code References in Markdown
DESCRIPTION: Series of code references to various grid system demonstration files, showing different aspects of the grid layout functionality.

LANGUAGE: markdown
CODE:
<code src="./demo/basic.tsx">Basic Grid</code>
<code src="./demo/gutter.tsx">Grid Gutter</code>
<code src="./demo/offset.tsx">Column offset</code>
<code src="./demo/sort.tsx">Grid sort</code>
<code src="./demo/flex.tsx">Typesetting</code>
<code src="./demo/flex-align.tsx">Alignment</code>
<code src="./demo/flex-order.tsx">Order</code>
<code src="./demo/flex-stretch.tsx">Flex Stretch</code>
<code src="./demo/responsive.tsx">Responsive</code>
<code src="./demo/responsive-flex.tsx" version="5.14.0">Flex Responsive</code>
<code src="./demo/responsive-more.tsx">More responsive</code>
<code src="./demo/playground.tsx">Playground</code>
<code src="./demo/useBreakpoint.tsx">useBreakpoint Hook</code>

----------------------------------------

TITLE: Importing Alert Component in React
DESCRIPTION: This code snippet demonstrates how to import and use the Alert component in a React application. It shows basic usage with different types of alerts.

LANGUAGE: typescript
CODE:
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/style.tsx">四种样式</code>
<code src="./demo/closable.tsx">可关闭的警告提示</code>
<code src="./demo/description.tsx">含有辅助性文字介绍</code>
<code src="./demo/icon.tsx">图标</code>
<code src="./demo/banner.tsx" iframe="250">顶部公告</code>
<code src="./demo/loop-banner.tsx">轮播的公告</code>
<code src="./demo/smooth-closed.tsx">平滑地卸载</code>
<code src="./demo/error-boundary.tsx">React 错误处理</code>
<code src="./demo/custom-icon.tsx" debug>自定义图标</code>
<code src="./demo/action.tsx">操作</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Implementing a Basic String Display Component in React
DESCRIPTION: This snippet demonstrates a simple React component that displays a string value passed as a prop.

LANGUAGE: tsx
CODE:
interface StrProps {
  value: string;
}

function MyStr({ value }: StrProps) {
  return <div>{value}</div>
}
<MyStr value="Hello World" />;

----------------------------------------

TITLE: Creating Custom Font Icon Component in React
DESCRIPTION: Shows how to create a custom icon component using createFromIconfontCN function for icons from iconfont.cn.

LANGUAGE: jsx
CODE:
import React from 'react';
import { createFromIconfontCN } from '@ant-design/icons';
import ReactDOM from 'react-dom/client';

const MyIcon = createFromIconfontCN({
  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // generate in iconfont.cn
});

ReactDOM.createRoot(mountNode).render(<MyIcon type="icon-example" />);

----------------------------------------

TITLE: Basic Ant Design Button Integration
DESCRIPTION: Example of importing and using a basic Ant Design Button component in a React component using Farm.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

export function Main() {
  return (
    <div>
      <Button type="primary">Button</Button>
    </div>
  );
}

----------------------------------------

TITLE: Defining Checkbox Option Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Checkbox options, specifying the structure of option objects with label, value, and optional disabled properties.

LANGUAGE: typescript
CODE:
interface Option {
  label: string;
  value: string;
  disabled?: boolean;
}

----------------------------------------

TITLE: Component Mount/Unmount Order Example
DESCRIPTION: Demonstrates the order of component lifecycle events during component switching in React 17.

LANGUAGE: tsx
CODE:
import React from 'react';

const A = () => {
  React.useMemo(() => {
    console.log('A render');
  }, []);

  React.useEffect(() => {
    console.log('A mounted');
    return () => {
      console.log('A unmounted');
    };
  }, []);

  return <div>A</div>;
};

const B = () => {
  React.useMemo(() => {
    console.log('B render');
  }, []);

  React.useEffect(() => {
    console.log('B mounted');
    return () => {
      console.log('B unmounted');
    };
  }, []);

  return <div>B</div>;
};

export default function App() {
  const [show, setShow] = React.useState(true);

  const toggle = () => {
    setShow((prev) => !prev);
  };

  return (
    <div>
      <button onClick={toggle}>toggle</button>
      <div>{show ? <A /> : <B />}</div>
    </div>
  );
}

----------------------------------------

TITLE: Defining Tab Positions in Ant Design
DESCRIPTION: Describes the available tab position options in Ant Design and their behavior on mobile devices. The tabPosition prop can be set to 'left', 'right', 'top', or 'bottom'. On mobile devices, 'left' and 'right' positions automatically switch to 'top'.

LANGUAGE: Markdown
CODE:
## zh-CN

有四个位置，`tabPosition="left|right|top|bottom"`。在移动端下，`left|right` 会自动切换成 `top`。

## en-US

Tab's position: left, right, top or bottom. Will auto switch to `top` in mobile.

----------------------------------------

TITLE: Defining Tab Positions in Ant Design
DESCRIPTION: Describes the available tab position options in Ant Design and their behavior on mobile devices. The tabPosition prop can be set to 'left', 'right', 'top', or 'bottom'. On mobile devices, 'left' and 'right' positions automatically switch to 'top'.

LANGUAGE: Markdown
CODE:
## zh-CN

有四个位置，`tabPosition="left|right|top|bottom"`。在移动端下，`left|right` 会自动切换成 `top`。

## en-US

Tab's position: left, right, top or bottom. Will auto switch to `top` in mobile.

----------------------------------------

TITLE: Changing QRCode Rendering Type in React
DESCRIPTION: Illustrates how to use the type prop to switch between canvas and SVG rendering for the QRCode.

LANGUAGE: jsx
CODE:
<code src="./demo/type.tsx">自定义渲染类型</code>

----------------------------------------

TITLE: Implementing SomeComponent with React 18 Compatible getContainer
DESCRIPTION: This snippet demonstrates an updated implementation of SomeComponent that is compatible with React 18 StrictMode. It uses state to manage the container and properly handles cleanup in the effect.

LANGUAGE: tsx
CODE:
// Fake Code. Just for Demo
const SomeComponent = ({ getContainer }) => {
  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);

  React.useEffect(() => {
    if (getContainer) {
      setMyContainer(getContainer());
      return;
    }

    const div = document.createElement('div');
    document.body.appendChild(div);
    setMyContainer(div);

    return () => {
      document.body.removeChild(div);
    };
  }, [getContainer]);

  return <PopupWrapper getContainer={() => myContainer} />;
};

----------------------------------------

TITLE: Virtual List Extra Render Implementation
DESCRIPTION: Implementation of the extraRender function that handles row spanning in virtual scrolling context by processing start and end records.

LANGUAGE: tsx
CODE:
const extraRender = ({ start, end }) => {
  // Start record
  const startRecord = flattenData[start];
  columns.forEach((col) => {
    // `rowSpan` === 0 means upper record has `rowSpan`
    const { rowSpan } = col.onCell(startRecord, start);
  });

  // End record
  const endRecord = flattenData[end];
  columns.forEach((col) => {
    // `rowSpan` > 1 means it should extend to next records
    const { rowSpan } = col.onCell(endRecord, end);
  });
};

----------------------------------------

TITLE: Rendering Borderless Table with Ant Design in JSX
DESCRIPTION: This code snippet demonstrates how to create a borderless table using Ant Design's Table component. It sets the bordered prop to false to remove borders from the table.

LANGUAGE: JSX
CODE:
import { Table } from 'antd';

const columns = [
  {
    title: 'Name',
    dataIndex: 'name',
  },
  {
    title: 'Age',
    dataIndex: 'age',
  },
  {
    title: 'Address',
    dataIndex: 'address',
  },
];

const data = [
  {
    key: '1',
    name: 'John Brown',
    age: 32,
    address: 'New York No. 1 Lake Park',
  },
  {
    key: '2',
    name: 'Jim Green',
    age: 42,
    address: 'London No. 1 Bridge Street',
  },
  {
    key: '3',
    name: 'Joe Black',
    age: 32,
    address: 'Sydney No. 1 York Street',
  },
];

ReactDOM.render(
  <Table columns={columns} dataSource={data} bordered={false} />,
  mountNode,
);

----------------------------------------

TITLE: Color Object Methods Table Format
DESCRIPTION: Table defining the available methods on the Color object returned by the ColorPicker, including conversion utilities and format options.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Version |
| :-- | :-- | :-- | :-- |
| toCssString | Convert to CSS support format | `() => string` | 5.20.0 |
| toHex | Convert to `hex` format characters | `() => string` | - |

----------------------------------------

TITLE: Rendering Empty Component with Child Button in JSX
DESCRIPTION: Demonstrates how to use the Empty component with a child Button element. This example shows the basic structure for customizing the Empty component's content.

LANGUAGE: jsx
CODE:
<Empty>
  <Button>Create</Button>
</Empty>

----------------------------------------

TITLE: Describing Placement Options in Ant Design (Markdown)
DESCRIPTION: This snippet provides a multilingual description of the placement options available in Ant Design. It states that there are twelve different directions for placement in both Chinese and English.

LANGUAGE: Markdown
CODE:
## zh-CN

位置有十二个方向。

## en-US

There are 12 `placement` options available.

----------------------------------------

TITLE: Form Integration Example with Checkbox
DESCRIPTION: Example showing how to properly integrate a Checkbox component within a Form.Item, using valuePropName to correctly bind the checked state.

LANGUAGE: tsx
CODE:
<Form.Item name="fieldA" valuePropName="checked">
  <Checkbox />
</Form.Item>

----------------------------------------

TITLE: Defining Font Family in CSS for Ant Design
DESCRIPTION: CSS snippet defining the recommended font family for Ant Design. It includes system default fonts and fallback options to ensure readability across different platforms and browsers.

LANGUAGE: css
CODE:
@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
  'Noto Color Emoji';

----------------------------------------

TITLE: Basic Table Component Type Usage in TypeScript
DESCRIPTION: Demonstrates how to use antd's built-in type definitions for Table component configuration.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Table, type TableColumnsType } from 'antd';

const columns: TableColumnsType = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
];

export default () => <Table columns={columns} />;

----------------------------------------

TITLE: Adding Brightness Overlay to Color Panel in CSS
DESCRIPTION: This CSS snippet adds a brightness overlay to the color panel using a linear gradient, creating a vertical variation in brightness from black to transparent.

LANGUAGE: css
CODE:
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);

----------------------------------------

TITLE: Initializing Farm Project
DESCRIPTION: Command line instructions for creating and starting a new Farm project with React template.

LANGUAGE: bash
CODE:
$ cd farm-project
$ npm install
$ npm start

----------------------------------------

TITLE: Configuring Button Wave Effect in React
DESCRIPTION: This snippet demonstrates how to disable the click wave effect for buttons using the ConfigProvider component. It sets the 'disabled' property of 'wave' to true, which turns off the ripple effect when buttons are clicked.

LANGUAGE: jsx
CODE:
<ConfigProvider wave={{ disabled: true }}>
  <Button>click</Button>
</ConfigProvider>

----------------------------------------

TITLE: CSS-in-JS Cache Structure Example
DESCRIPTION: Example showing the cache structure for component styles with their corresponding hash values and CSS content

LANGUAGE: tsx
CODE:
// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", ":where(.bAMbOo).ant-btn { color: red }"],
  "bAMbOo|Spin": ["liGHt", ":where(.bAMbOo).ant-spin { color: blue }"]
}

----------------------------------------

TITLE: TypeScript Definition for ShowEffect Function
DESCRIPTION: This code defines the TypeScript type for the showEffect function used in wave effect customization. It specifies the parameters and their types that the function receives.

LANGUAGE: tsx
CODE:
type ShowEffect = (target: HTMLElement, info: { component: string; token: GlobalToken }) => void;

----------------------------------------

TITLE: Styling Input Addon Selects - CSS
DESCRIPTION: Sets specific widths for select elements that appear before and after an input field. The before select is given 90px width while the after select is set to 80px width.

LANGUAGE: css
CODE:
.select-before {
  width: 90px;
}

.select-after {
  width: 80px;
}

----------------------------------------

TITLE: Configuring Webpack for SVG Icon Import
DESCRIPTION: Webpack configuration to import SVG icons as React components using @svgr/webpack.

LANGUAGE: js
CODE:
// webpack.config.js
module.exports = {
  // ... other config
  test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
  use: [
    {
      loader: 'babel-loader',
    },
    {
      loader: '@svgr/webpack',
      options: {
        babel: false,
        icon: true,
      },
    },
  ],
};

----------------------------------------

TITLE: Menu Flex Layout Implementation in JSX
DESCRIPTION: Example showing how to implement responsive menu collapse in a flex layout context. Demonstrates proper styling to enable responsiveness.

LANGUAGE: jsx
CODE:
<div style={{ flex }}>
  <div style={{ ... }}>Some Content</div>
  <Menu style={{ minWidth: 0, flex: "auto" }} />
</div>

----------------------------------------

TITLE: CSS File Style Registration
DESCRIPTION: Example of style registration using external CSS files

LANGUAGE: tsx
CODE:
// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", "__FROM_CSS_FILE__"],
  "bAMbOo|Spin": ["liGHt", "__FROM_CSS_FILE__"]
}

----------------------------------------

TITLE: Setting up StyleProvider with Layer Support
DESCRIPTION: Configuration for enabling CSS @layer support to manage style priority with ConfigProvider integration.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';
import { ConfigProvider } from 'antd';

export default () => (
  <StyleProvider layer>
    <ConfigProvider>
      <MyApp />
    </ConfigProvider>
  </StyleProvider>
);

----------------------------------------

TITLE: Initializing Next.js Project
DESCRIPTION: Commands to create a new Next.js project using various package managers.

LANGUAGE: bash
CODE:
$ npx create-next-app antd-demo

----------------------------------------

TITLE: Styling MessageOutlined Icon in React
DESCRIPTION: Shows how to apply custom styling to the MessageOutlined icon component.

LANGUAGE: jsx
CODE:
import { MessageOutlined } from '@ant-design/icons';

<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;

----------------------------------------

TITLE: Rendering Ant Design Alert Component in Markdown
DESCRIPTION: This snippet demonstrates how to render an Ant Design Alert component within a markdown file. It displays an informational message about shared APIs.

LANGUAGE: markdown
CODE:
<Antd component="Alert" message="The following APIs are shared by Tooltip, Popconfirm, Popover." type="info" banner="true"></Antd>

----------------------------------------

TITLE: Defining Lookup Pattern Documentation Links in Markdown
DESCRIPTION: Provides multilingual documentation links for Ant Design's lookup patterns, specifically focusing on the uncertain category pattern implementation.

LANGUAGE: markdown
CODE:
## zh-CN

[查询模式: 不确定类目](https://ant.design/docs/spec/reaction#lookup-patterns) 示例。

## en-US

Demonstration of [Lookup Patterns: Uncertain Category](https://ant.design/docs/spec/reaction#lookup-patterns).

----------------------------------------

TITLE: Customizing QRCode Size in React
DESCRIPTION: Demonstrates how to adjust the size of the QRCode using the size prop.

LANGUAGE: jsx
CODE:
<code src="./demo/customSize.tsx">自定义尺寸</code>

----------------------------------------

TITLE: Documenting Ant Design Button Danger Property Change
DESCRIPTION: Multilingual documentation explaining that danger is now a property rather than a button type in Ant Design version 4.0 and later.

LANGUAGE: markdown
CODE:
## zh-CN

在 4.0 之后，危险成为一种按钮属性而不是按钮类型。

## en-US

The `danger` is a property of buttons after antd 4.0.

----------------------------------------

TITLE: Component Reference Interface Definition
DESCRIPTION: Example of a TypeScript interface defining the structure for component references in Ant Design Mobile.

LANGUAGE: tsx
CODE:
export interface SampleRef {
  nativeElement: HTMLElement;
  focus(): void;
  blur(): void;
}

----------------------------------------

TITLE: Examining CI Build Log for antd-mobile
DESCRIPTION: This log snippet shows the build process for antd-mobile, highlighting where the CSS build fails in the '2x' step.

LANGUAGE: log
CODE:
[09:44:16] Using gulpfile ~/work/ant-design-mobile/ant-design-mobile/gulpfile.js
[09:44:16] Starting 'default'...
[09:44:16] Starting 'clean'...
[09:44:17] Finished 'clean' after 286 ms
[09:44:17] Starting 'buildES'...
[09:44:26] Finished 'buildES' after 8.77 s
[09:44:26] Starting 'buildCJS'...
[09:44:27] Finished 'buildCJS' after 1.72 s
[09:44:27] Starting 'buildDeclaration'...
[09:44:27] Starting 'buildStyle'...
[09:44:28] Finished 'buildStyle' after 682 ms
[09:44:34] Finished 'buildDeclaration' after 6.5 s
[09:44:34] Starting 'copyAssets'...
[09:44:34] Finished 'copyAssets' after 2.37 ms
[09:44:34] Starting 'copyMetaFiles'...
[09:44:34] Finished 'copyMetaFiles' after 4.64 ms
[09:44:34] Starting 'generatePackageJSON'...
[09:44:34] Finished 'generatePackageJSON' after 2.72 ms
[09:44:34] Starting 'buildBundles'...
[09:44:45] Finished 'buildBundles' after 11 s
[09:44:45] Starting 'init2xFolder'...
[09:44:46] Finished 'init2xFolder' after 811 ms
[09:44:46] Starting 'build2xCSS'...
[09:44:46] 'build2xCSS' errored after 126 ms
[09:44:46] CssSyntaxError in plugin "gulp-postcss"

----------------------------------------

TITLE: Using Ref Instruction in Ant Design
DESCRIPTION: A bilingual instruction (Chinese and English) emphasizing the recommendation to prioritize using `ref` in Ant Design components.

LANGUAGE: markdown
CODE:
## zh-CN

请优先使用 `ref`！

## en-US

Use `ref` first!

----------------------------------------

TITLE: Configuring Progress Component Props in TypeScript
DESCRIPTION: Example of setting various props for the Progress component, including percent, status, and strokeColor.

LANGUAGE: typescript
CODE:
<code src="./demo/circle.tsx">进度圈</code>

----------------------------------------

TITLE: Redux Integration with App Component
DESCRIPTION: Demonstrates global usage pattern with Redux, exporting static functions for use across the application. Includes both store setup and usage in sub-components.

LANGUAGE: tsx
CODE:
// Entry component
import { App } from 'antd';
import type { MessageInstance } from 'antd/es/message/interface';
import type { ModalStaticFunctions } from 'antd/es/modal/confirm';
import type { NotificationInstance } from 'antd/es/notification/interface';

let message: MessageInstance;
let notification: NotificationInstance;
let modal: Omit<ModalStaticFunctions, 'warn'>;

export default () => {
  const staticFunction = App.useApp();
  message = staticFunction.message;
  modal = staticFunction.modal;
  notification = staticFunction.notification;
  return null;
};

export { message, modal, notification };

LANGUAGE: tsx
CODE:
// sub page
import React from 'react';
import { Button, Space } from 'antd';

import { message } from './store';

export default () => {
  const showMessage = () => {
    message.success('Success!');
  };

  return (
    <Space>
      <Button type="primary" onClick={showMessage}>
        Open message
      </Button>
    </Space>
  );
};

----------------------------------------

TITLE: Creating Mock Data for Products API
DESCRIPTION: TypeScript file defining mock data and API endpoints for products using Umi's mock functionality.

LANGUAGE: typescript
CODE:
import { defineMock } from 'umi';

type Product = {
  id: string;
  name: string;
};

let products: Product[] = [
  { id: '1', name: 'Umi' },
  { id: '2', name: 'Ant Design' },
  { id: '3', name: 'Ant Design Pro' },
  { id: '4', name: 'Dva' },
];

export default defineMock({
  'GET /api/products': (_, res) => {
    res.send({
      status: 'ok',
      data: products,
    });
  },
  'DELETE /api/products/:id': (req, res) => {
    products = products.filter((item) => item.id !== req.params.id);
    res.send({ status: 'ok' });
  },
});

----------------------------------------

TITLE: Avatar.Group API Properties - TypeScript
DESCRIPTION: TypeScript interface defining the properties available for the Avatar.Group component, including maximum display configurations and appearance settings.

LANGUAGE: typescript
CODE:
interface AvatarGroupProps {
  max?: {
    count?: number;
    style?: CSSProperties;
    popover?: PopoverProps;
  };
  size?: number | 'large' | 'small' | 'default' | { xs: number, sm: number, ...};
  shape?: 'circle' | 'square';
}

----------------------------------------

TITLE: Implementing Loading State for Ant Design Search Component in React
DESCRIPTION: This code snippet demonstrates how to add a loading state to an Ant Design Search component when the onSearch event is triggered. It uses React hooks to manage the loading state and updates it based on user interactions.

LANGUAGE: jsx
CODE:
import { Input } from 'antd';
import React, { useState } from 'react';

const { Search } = Input;

const App: React.FC = () => {
  const [loading, setLoading] = useState(false);

  const onSearch = (value: string, _e: any, info: any) => {
    if (info?.source === 'input') {
      setLoading(true);
      setTimeout(() => {
        setLoading(false);
      }, 1000);
      console.log('Input Value:', value);
    }
  };

  return (
    <Search
      placeholder="input search loading with enterButton"
      loading={loading}
      enterButton="Search"
      onSearch={onSearch}
    />
  );
};

export default App;

----------------------------------------

TITLE: PNPM Cache Configuration in GitHub Actions
DESCRIPTION: Configuration steps to implement PNPM caching in GitHub Actions workflow to improve dependency installation speed.

LANGUAGE: yaml
CODE:
- name: create pnpm-lock.yaml
  run: pnpm install --frozen-lockfile --ignore-scripts

- name: Get pnpm store directory
  id: pnpm-cache
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

- name: Setup pnpm cache
  uses: actions/cache@v4
  with:
    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      ${{ runner.os }}-pnpm-store-

----------------------------------------

TITLE: Implementing Custom Calendar with Moment.js in TypeScript
DESCRIPTION: Creates a custom Calendar component using Moment.js. This snippet uses the generateCalendar function from Ant Design to create a Calendar that works with Moment objects.

LANGUAGE: TypeScript
CODE:
import { Calendar } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/es/generate/moment';

const MyCalendar = Calendar.generateCalendar<Moment>(momentGenerateConfig);

export default MyCalendar;

----------------------------------------

TITLE: Setting Absolute Position for Affix in React
DESCRIPTION: Demonstrates how to set an absolute position for the Affix component while allowing its children to have relative positioning.

LANGUAGE: jsx
CODE:
<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>

----------------------------------------

TITLE: Styling Form Wrapper in Drawer using CSS
DESCRIPTION: CSS code to style the wrapper for a form inside an Ant Design drawer. It positions the wrapper at the bottom of the drawer, sets its width, adds padding, and includes a top border.

LANGUAGE: CSS
CODE:
.site-form-in-drawer-wrapper {
  position: absolute;
  inset-inline-end: 0;
  bottom: 0;
  width: 100%;
  padding: 10px 16px;
  text-align: right;
  background: #fff;
  border-top: 1px solid #e9e9e9;
}

----------------------------------------

TITLE: Static Consumption of Design Tokens
DESCRIPTION: Shows how to consume Design Tokens statically using getDesignToken function. It demonstrates getting global tokens and using them with ConfigProvider.

LANGUAGE: tsx
CODE:
import type { ThemeConfig } from 'antd';
import { theme } from 'antd';
import { createRoot } from 'react-dom/client';

const { getDesignToken, useToken } = theme;

const config: ThemeConfig = {
  token: {
    colorPrimary: '#1890ff',
  },
};

// By static function
const globalToken = getDesignToken(config);

// By hook
const App = () => {
  const { token } = useToken();
  return null;
};

// Example for rendering
createRoot(document.getElementById('#app')).render(
  <ConfigProvider theme={config}>
    <App />
  </ConfigProvider>,
);

----------------------------------------

TITLE: Using Different Icon Themes in React
DESCRIPTION: Demonstrates how to use different themes for icons in React components.

LANGUAGE: jsx
CODE:
import { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';

<StarOutlined />
<StarFilled />
<StarTwoTone twoToneColor="#eb2f96" />

----------------------------------------

TITLE: Rendering Basic Card in React
DESCRIPTION: This snippet demonstrates how to create a basic Card component with a title and content. It shows the fundamental usage of the Card component in React.

LANGUAGE: jsx
CODE:
<Card title="Card title">Card content</Card>

----------------------------------------

TITLE: Basic Cascader Component Usage in React
DESCRIPTION: Basic implementation example of the Cascader component showing the minimal required props.

LANGUAGE: jsx
CODE:
<Cascader options={options} onChange={onChange} />

----------------------------------------

TITLE: Implementing Layer Three Shadows in CSS
DESCRIPTION: CSS variables for layer three shadows with maximum elevation effects. Features the largest blur and spread values for dramatic depth.

LANGUAGE: CSS
CODE:
@shadow-3-up: 0px -6px 16px -8px rgba(0, 0, 0, 0.08),\n            0px -9px 28px 0px rgba(0, 0, 0, 0.05),\n            0px -12px 48px 16px rgba(0, 0, 0, 0.03);\n@shadow-3-down: 0px 6px 16px -8px rgba(0, 0, 0, 0.08),\n              0px 9px 28px 0px rgba(0, 0, 0, 0.05),\n              0px 12px 48px 16px rgba(0, 0, 0, 0.03);\n@shadow-3-left: -6px 0px 16px -8px rgba(0, 0, 0, 0.08),\n              -9px 0px 28px 0px rgba(0, 0, 0, 0.05),\n              -12px 0px 48px 16px rgba(0, 0, 0, 0.03);\n@shadow-3-right: 6px 0px 16px -8px rgba(0, 0, 0, 0.08),\n               9px 0px 28px 0px rgba(0, 0, 0, 0.05),\n               12px 0px 48px 16px rgba(0, 0, 0, 0.03);

----------------------------------------

TITLE: Markdown Formatting for Design Pattern Documentation
DESCRIPTION: This snippet demonstrates the use of Markdown formatting to structure a design pattern document. It includes headers, emphasis, and image references for visual examples.

LANGUAGE: markdown
CODE:
---
group: 设计模式
type: 原则
order: 5
title: 直截了当
---

正如 Alan Cooper 所言：「需要在哪里输出，就要允许在哪里输入」。这就是直接操作的原理。例如：不要为了编辑内容而打开另一个页面，应该直接在上下文中实现编辑。

---

## 页内编辑

<ImagePreview>
<img class="preview-img" alt="单击编辑示例" description="状态一：普通的浏览模式，不区分可编辑行和不可编辑行；<br>状态二：鼠标悬停时，「指针」变为「手型」，编辑区域底色变黄，出现「Tooltips」提示单击编辑；<br>状态三：鼠标点击后，出现「输入框」、「确定」、「取消」表单元素，同时光标定位在「输入框」中。" src="https://gw.alipayobjects.com/zos/rmsportal/EXKwsvUkIUNkHBSsOlRi.png">
</ImagePreview>

单字段行内编辑

当「易读性」远比「易编辑性」重要时，可以使用「单击编辑」。

----------------------------------------

TITLE: Empty State Design Documentation in Markdown
DESCRIPTION: Markdown documentation detailing the principles and implementation of empty states in UI design. Includes sections on design goals, principles, best practices, and specific use cases with visual examples.

LANGUAGE: markdown
CODE:
---
group: Design Patterns (Research)
type: Global Rules
order: 3
title: Empty Status
skip: true
---

## Design Goals

- The empty state should provide a prompt to help users understand the reason for the empty state, avoiding confusion and misunderstanding;
- Provide recommended action tips to help users get out of the empty state.

----------------------------------------

TITLE: Implementing Nested Collapse Components in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to create nested collapsible panels using the Collapse component from Ant Design. It shows the structure for implementing a Collapse component inside another Collapse component.

LANGUAGE: JSX
CODE:
import { Collapse } from 'antd';

const { Panel } = Collapse;

const text = `
  A dog is a type of domesticated animal.
  Known for its loyalty and faithfulness,
  it can be found as a welcome guest in many households across the world.
`;

const App: React.FC = () => (
  <Collapse>
    <Panel header="This is panel header 1" key="1">
      <Collapse defaultActiveKey="1">
        <Panel header="This is panel nest panel" key="1">
          <p>{text}</p>
        </Panel>
      </Collapse>
    </Panel>
    <Panel header="This is panel header 2" key="2">
      <p>{text}</p>
    </Panel>
    <Panel header="This is panel header 3" key="3">
      <p>{text}</p>
    </Panel>
  </Collapse>
);

export default App;

----------------------------------------

TITLE: Basic Card Usage in JSX
DESCRIPTION: Demonstrates the basic usage of a Card component with a title and content.

LANGUAGE: jsx
CODE:
<Card title="卡片标题">卡片内容</Card>

----------------------------------------

TITLE: Configuring Steps Component Props
DESCRIPTION: API documentation for the main Steps component configuration options including direction, size, status and event handlers.

LANGUAGE: markdown
CODE:
| Parameter | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| className | Steps class name | string | - | |
| current | Current step, starting from 0 | number | 0 | |
| direction | Direction of steps (horizontal/vertical) | string | horizontal | |
| initial | Starting step number | number | 0 | |
| labelPlacement | Label placement position | string | horizontal | |

----------------------------------------

TITLE: Custom SVG Icon Usage
DESCRIPTION: Example of importing and using a custom SVG icon as a React component.

LANGUAGE: jsx
CODE:
import React from 'react';
import Icon from '@ant-design/icons';
import MessageSvg from 'path/to/message.svg';
import ReactDOM from 'react-dom/client';

ReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);

----------------------------------------

TITLE: Customizing QRCode Colors in React
DESCRIPTION: Shows how to change the colors of the QRCode using the color and bgColor props.

LANGUAGE: jsx
CODE:
<code src="./demo/customColor.tsx">自定义颜色</code>

----------------------------------------

TITLE: Configuring Controlled Mode in Ant Design Components
DESCRIPTION: Demonstrates how to enable controlled mode in Ant Design components by using the open property together with trigger property. This combination allows for programmatic control over component state.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `open` 设置组件为受控模式，需要配合 `trigger` 一起使用。

## en-US

Set the component to controlled mode through `open`, which need to be used together with `trigger`.

----------------------------------------

TITLE: Basic Result Page Configuration in Markdown
DESCRIPTION: Front matter configuration for the result page documentation in ant-design framework. Defines group, type, order and other metadata.

LANGUAGE: markdown
CODE:
---
group: Design Patterns (Research)
type: Template Document
order: 4
title: Result Page
skip: true
---

----------------------------------------

TITLE: Demonstrating Native Input Behavior with maxLength in React
DESCRIPTION: This snippet illustrates how the native input element behaves with the maxLength attribute, which only limits user input and doesn't truncate the initial value.

LANGUAGE: tsx
CODE:
<input value="Hello World" maxLength={5} />

----------------------------------------

TITLE: Defining TransformAction Type in TypeScript
DESCRIPTION: Type definition for possible image transformation actions including flip, rotate, zoom, navigation, and interaction events.

LANGUAGE: typescript
CODE:
type TransformAction =
  | 'flipY'
  | 'flipX'
  | 'rotateLeft'
  | 'rotateRight'
  | 'zoomIn'
  | 'zoomOut'
  | 'close'
  | 'prev'
  | 'next'
  | 'wheel'
  | 'doubleClick'
  | 'move'
  | 'dragRebound';

----------------------------------------

TITLE: Upload File Object Structure
DESCRIPTION: Structure of the file object containing upload status and metadata.

LANGUAGE: jsx
CODE:
{
   uid: 'uid',      // unique identifier, negative is recommended, to prevent interference with internally generated id
   name: 'xx.png',   // file name
   status: 'done' | 'uploading' | 'error' | 'removed', // Intercepted file by beforeUpload doesn't have a status field.
   response: '{"status": "success"}', // response from server
   linkProps: '{"download": "image"}', // additional HTML props of file link
   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header
}

----------------------------------------

TITLE: Documenting Resizable Panel Behavior in Ant Design
DESCRIPTION: This snippet provides documentation in both Chinese and English for the controlled size adjustment feature of Ant Design's Resizable Panel component. It explains that dragging is disabled when any panel has the 'resizable' property set to false.

LANGUAGE: Markdown
CODE:
## zh-CN

受控调整尺寸。当 Panel 之间任意一方禁用 `resizable`，则其拖拽将被禁用。

## en-US

Control the size of the splitter. When one of the panels disables `resizable`, dragging will be disabled.

----------------------------------------

TITLE: Wrapping Space Content in TypeScript
DESCRIPTION: Demonstration of content wrapping within the Space component in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/wrap.tsx">Wrap</code>

----------------------------------------

TITLE: Defining Checkbox Option Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Checkbox option configuration. Specifies the structure for checkbox options including label, value, and optional disabled state.

LANGUAGE: typescript
CODE:
interface Option {
  label: string;
  value: string;
  disabled?: boolean;
}

----------------------------------------

TITLE: Configuring AutoComplete Status in ant-design (Markdown)
DESCRIPTION: Describes how to add status to the AutoComplete component using the 'status' prop. It supports 'error' and 'warning' states, enhancing the component's visual feedback capabilities.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `status` 为 AutoComplete 添加状态，可选 `error` 或者 `warning`。

## en-US

Add status to AutoComplete with `status`, which could be `error` or `warning`.

----------------------------------------

TITLE: Initializing Umi Project with pnpm
DESCRIPTION: Commands to create a new Umi project directory and initialize it using pnpm.

LANGUAGE: bash
CODE:
$ mkdir myapp && cd myapp
$ pnpm create umi

----------------------------------------

TITLE: Measuring Line Height with React Ref
DESCRIPTION: This code snippet shows how to measure the line height of text by inserting a temporary span element and using a React ref to access its dimensions.

LANGUAGE: tsx
CODE:
<div>
  {text}
  {measuring && <span ref={measureRef}>&nbsp;</span>}
</div>

----------------------------------------

TITLE: Event Handler Properties for Custom Components
DESCRIPTION: List of required event handlers that must be implemented for custom components to work properly with tooltip-like components.

LANGUAGE: markdown
CODE:
onMouseEnter, onMouseLeave, onPointerEnter, onPointerLeave, onFocus, onClick

----------------------------------------

TITLE: Using Offset Property in Ant Design Grid
DESCRIPTION: Demonstrates how to use the offset property to shift grid columns to the right. The offset value determines the number of columns to shift, where offset={4} shifts the column by 4 units.

LANGUAGE: jsx
CODE:
offset={4}

----------------------------------------

TITLE: Generating New Umi Page
DESCRIPTION: Command to generate a new page in the Umi project using the CLI.

LANGUAGE: bash
CODE:
$ npx umi g page products

----------------------------------------

TITLE: Scheduling Periodic Builds with GitHub Actions YAML
DESCRIPTION: This YAML snippet configures a GitHub Actions workflow to run every 30 minutes or on manual dispatch. It's used to periodically build a mock project to detect potential dependency issues early.

LANGUAGE: yaml
CODE:
on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

----------------------------------------

TITLE: Configuring QR Code Status Rendering in ant-design
DESCRIPTION: Demonstrates the use of statusRender property to customize how QR codes appear in different states. This feature allows developers to implement custom rendering logic for various QR code states.

LANGUAGE: markdown
CODE:
## zh-CN

可以通过 `statusRender` 的值控制二维码不同状态的渲染逻辑。

## en-US

You can control the rendering logic of the QR code in different states through the value of `statusRender`.

----------------------------------------

TITLE: Color Object Methods Documentation
DESCRIPTION: Documentation for the Color object methods that can be used to convert colors between different formats.

LANGUAGE: markdown
CODE:
| Method | Description | Type | Version |
| :-- | :-- | :-- | :-- |
| toCssString | Convert to CSS supported format | () => string | 5.20.0 |
| toHex | Convert to hex format string, returns format like: 1677ff | () => string | - |
| toHexString | Convert to hex format color string, returns format like: #1677ff | () => string | - |

----------------------------------------

TITLE: DatePicker Range Limitation Documentation
DESCRIPTION: Description of how to use minDate and maxDate props to restrict date selection range in DatePicker component. The content explains the functionality in both Chinese (zh-CN) and English (en-US) languages.

LANGUAGE: markdown
CODE:
## zh-CN

通过 `minDate` 和 `maxDate` 限定日期范围。

## en-US

Limit the range of available dates by using `minDate` and `maxDate`.

----------------------------------------

TITLE: Compiling Ant Design TypeScript Code
DESCRIPTION: Commands to compile TypeScript code to the 'lib' and 'es' directories using npm or yarn.

LANGUAGE: bash
CODE:
$ npm run compile

LANGUAGE: bash
CODE:
$ yarn compile

----------------------------------------

TITLE: Debugging Component Tokens in Ant Design (JSX)
DESCRIPTION: This code snippet sets up a debugging environment for Ant Design component tokens. It uses the ConfigProvider to apply custom token configurations and renders various components for testing.

LANGUAGE: jsx
CODE:
import { ConfigProvider, DatePicker, Button, Form, Input } from 'antd';
import { useState } from 'react';

const App: React.FC = () => {
  const [bgColor, setBgColor] = useState('#1677ff');
  return (
    <>
      <h3>背景色 / Background Color:</h3>
      <Input
        style={{ width: 200, marginBottom: 16 }}
        value={bgColor}
        onChange={(e) => setBgColor(e.target.value)}
      />
      <br />
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: bgColor,
          },
          components: {
            Button: {
              colorPrimary: '#00b96b',
            },
            Input: {
              colorPrimary: '#eb2f96',
            },
          },
        }}
      >
        <Form>
          <Form.Item>
            <DatePicker />
          </Form.Item>
          <Form.Item>
            <Button type="primary">Button</Button>
          </Form.Item>
          <Form.Item>
            <Input />
          </Form.Item>
        </Form>
      </ConfigProvider>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Using Message Component with Context in React
DESCRIPTION: Shows how to use the Message component with React context to access ConfigProvider settings and other context values.

LANGUAGE: tsx
CODE:
const [api, contextHolder] = message.useMessage();

return (
  <Context1.Provider value="Ant">
    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}
    {contextHolder}
    <Context2.Provider value="Design">
      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}
    </Context2.Provider>
  </Context1.Provider>
);

----------------------------------------

TITLE: List Component API Type Definitions - TypeScript
DESCRIPTION: Type definitions and interface declarations for the List component API properties including pagination, grid props, and list item configuration.

LANGUAGE: typescript
CODE:
interface ListProps {
  bordered?: boolean;
  dataSource?: any[];
  footer?: ReactNode;
  grid?: ListGridProps;
  header?: ReactNode;
  itemLayout?: string;
  loading?: boolean | object;
  loadMore?: ReactNode;
  locale?: { emptyText: string };
  pagination?: boolean | object;
  renderItem?: (item: any) => ReactNode;
  rowKey?: string | ((item: any) => React.Key);
  size?: 'default' | 'large' | 'small';
  split?: boolean;
}

----------------------------------------

TITLE: Configuring Ant Design with Next.js App Router
DESCRIPTION: Implementation of AntdRegistry in the root layout for Next.js App Router to handle Ant Design styles.

LANGUAGE: tsx
CODE:
import React from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';

const RootLayout = ({ children }: React.PropsWithChildren) => (
  <html lang="en">
    <body>
      <AntdRegistry>{children}</AntdRegistry>
    </body>
  </html>
);

export default RootLayout;

----------------------------------------

TITLE: Running Ant Design Test Suite
DESCRIPTION: Commands to execute the complete test suite for Ant Design using npm or yarn.

LANGUAGE: bash
CODE:
$ npm test

LANGUAGE: bash
CODE:
$ yarn test

----------------------------------------

TITLE: Importing Semantic DOM Example in React
DESCRIPTION: This code snippet shows how to import and use a simplified semantic DOM example for the Badge component in a React application using Ant Design.

LANGUAGE: tsx
CODE:
<code src="./demo/_semantic.tsx" simplify="true"></code>

----------------------------------------

TITLE: Describing Image Preview Carousel Functionality in Markdown
DESCRIPTION: This snippet provides brief descriptions in Chinese and English explaining how to use left and right buttons to navigate through multiple images in a preview carousel.

LANGUAGE: Markdown
CODE:
## zh-CN

点击左右切换按钮可以预览多张图片。

## en-US

Click the left and right switch buttons to preview multiple images.

----------------------------------------

TITLE: Checking Code Style in Ant Design
DESCRIPTION: Commands to run linting checks on the codebase using npm or yarn.

LANGUAGE: bash
CODE:
$ npm run lint

LANGUAGE: bash
CODE:
$ yarn lint

----------------------------------------

TITLE: Running Local Visual Regression Tests in Ant Design (Bash)
DESCRIPTION: Command to run visual regression tests locally before submitting a PR contribution. It prompts the user to select components for testing.

LANGUAGE: bash
CODE:
npm run test:visual-regression:local # Follow the prompts to select components for visual regression testing

----------------------------------------

TITLE: ConfigProvider Warning Configuration
DESCRIPTION: Shows how to configure warning behavior using ConfigProvider to aggregate deprecated information warnings.

LANGUAGE: tsx
CODE:
<ConfigProvider warning={{ strict: false }} />

----------------------------------------

TITLE: Handling Panel Click in Calendar Component
DESCRIPTION: This snippet shows how to use the onSelect callback to handle panel clicks in the Calendar component. It demonstrates accessing the source of the selection event.

LANGUAGE: tsx
CODE:
<Calendar
  onSelect={(date, { source }) => {
    if (source === 'date') {
      console.log('Panel Select:', source);
    }
  }}
/>

----------------------------------------

TITLE: Nested App Component Usage
DESCRIPTION: Demonstrates nested usage of App components, though nesting should be avoided when possible.

LANGUAGE: tsx
CODE:
<App>
  <Space>
    ...
    <App>...</App>
  </Space>
</App>

----------------------------------------

TITLE: Importing TreeSelect Component in React
DESCRIPTION: Example of how to import and use the TreeSelect component in a React application. This is inferred from the context, as no explicit code snippet is provided.

LANGUAGE: TypeScript
CODE:
import { TreeSelect } from 'antd';

function MyComponent() {
  return (
    <TreeSelect
      // ... props
    />
  );
}

----------------------------------------

TITLE: Implementing Descriptions Component in React TSX - Modern vs Legacy Syntax
DESCRIPTION: Shows two implementation approaches for the Descriptions component - the recommended approach for version 5.8.0+ using items prop, and the legacy approach using child components. The component displays user information in a structured format.

LANGUAGE: tsx
CODE:
// >= 5.8.0 可用，推荐的写法 ✅

const items: DescriptionsProps['items'] = [
  {
    key: '1',
    label: 'UserName',
    children: <p>Zhou Maomao</p>,
  },
  {
    key: '2',
    label: 'Telephone',
    children: <p>1810000000</p>,
  },
  {
    key: '3',
    label: 'Live',
    children: <p>Hangzhou, Zhejiang</p>,
  },
  {
    key: '4',
    label: 'Remark',
    children: <p>empty</p>,
  },
  {
    key: '5',
    label: 'Address',
    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,
  },
];

<Descriptions title="User Info" items={items} />;

// <5.8.0 可用，>=5.8.0 时不推荐 🙅🏻‍♀️

<Descriptions title="User Info">
  <Descriptions.Item label="UserName">Zhou Maomao</Descriptions.Item>
  <Descriptions.Item label="Telephone">1810000000</Descriptions.Item>
  <Descriptions.Item label="Live">Hangzhou, Zhejiang</Descriptions.Item>
  <Descriptions.Item label="Remark">empty</Descriptions.Item>
  <Descriptions.Item label="Address">
    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China
  </Descriptions.Item>
</Descriptions>;

----------------------------------------

TITLE: Defining 404 Error Messages in Markdown
DESCRIPTION: Markdown format text defining 404 error messages in Chinese (zh-CN) and English (en-US) languages for Ant Design framework.

LANGUAGE: markdown
CODE:
## zh-CN

此页面未找到。

## en-US

The page you visited does not exist.

----------------------------------------

TITLE: Documenting rootClassName Property in Ant Design
DESCRIPTION: Markdown table defining the rootClassName property which can be used to add custom class names to the outermost layer of Ant Design components. This property is universally applicable across most Ant Design components unless specifically noted otherwise.

LANGUAGE: markdown
CODE:
| 参数          | 说明                         | 类型   | 默认值 |
| ------------- | ---------------------------- | ------ | ------ |
| rootClassName | 添加在组件最外层的 className | string | -      |

----------------------------------------

TITLE: Configuring Modal Element Classes in Ant Design React
DESCRIPTION: Shows how to use the classNames property to set custom CSS classes for different sections of a modal including header, body, footer, mask, and wrapper. This allows for granular styling control of modal components.

LANGUAGE: typescript
CODE:
interface ModalClassNames {
  header?: string;
  body?: string;
  footer?: string;
  mask?: string;
  wrapper?: string;
}

----------------------------------------

TITLE: Initializing Vite Project Directory Structure
DESCRIPTION: Shows the default directory structure of a Vite project after initialization. This helps developers understand the project layout and file organization.

LANGUAGE: text
CODE:
├── public
│   └── vite.svg
├── src
│   └── assets
│       └── react.svg
│   ├── App.css
│   ├── App.js
│   ├── index.css
│   ├── main.js
│   └── logo.svg
├── index.html
├── package.json
└── vite.config.js

----------------------------------------

TITLE: Handling Image Loading Errors
DESCRIPTION: Demonstrates how to handle image loading errors using the fallback property.

LANGUAGE: typescript
CODE:
<code src="./demo/fallback.tsx">容错处理</code>

----------------------------------------

TITLE: Using Ant Design Moment Webpack Plugin
DESCRIPTION: JavaScript code to configure webpack for using Moment.js with Ant Design v5 using a custom plugin.

LANGUAGE: javascript
CODE:
// webpack-config.js
import AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};

----------------------------------------

TITLE: Audio Element Implementation
DESCRIPTION: HTML audio element setup for Ant Design pronunciation guide, embedding an audio file with MP3 source.

LANGUAGE: html
CODE:
<audio id="antd-audio">
  <source src="https://mdn.alipayobjects.com/huamei_iwk9zp/afts/file/A*ChCdRJ0w8SUAAAAAAAAAAAAADgCCAQ" type="audio/mpeg">
</audio>

----------------------------------------

TITLE: Avatar.Group API Documentation
DESCRIPTION: API documentation for the Avatar.Group component introduced in version 4.5.0, including configuration options for grouped avatars.

LANGUAGE: markdown
CODE:
### Avatar.Group (4.5.0+)

| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| max | 设置最多显示相关配置，`5.18.0` 前可使用 [参数] | `{ count?: number; style?: CSSProperties; popover?: PopoverProps }` | - | 5.18.0 |
| size | 设置头像的大小 | number \| `large` \| `small` \| `default` \| { xs: number, sm: number, ...} | `default` | 4.8.0 |
| shape | 设置头像的形状 | `circle` \| `square` | `circle` | 5.8.0 |

----------------------------------------

TITLE: Defining Copyable Configuration Interface in TypeScript
DESCRIPTION: Defines the interface for the copyable configuration object used in Typography components. It includes properties for customizing copy behavior and appearance.

LANGUAGE: typescript
CODE:
{
  text: string | (() => string | Promise<string>),
  onCopy: function(event),
  icon: ReactNode,
  tooltips: false | [ReactNode, ReactNode],
  format: 'text/plain' | 'text/html',
  tabIndex: number,
}

----------------------------------------

TITLE: DisabledTime Type Definition
DESCRIPTION: TypeScript type definition for the disabledTime prop function that controls which time options are disabled

LANGUAGE: typescript
CODE:
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};

----------------------------------------

TITLE: Updating Test Snapshots for New Language
DESCRIPTION: Command to update test snapshots after adding new language support to Ant Design components.

LANGUAGE: bash
CODE:
npm run test -- components/locale -u

----------------------------------------

TITLE: Rendering Typography Components in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to use Ant Design's Typography component to render a title and paragraph in both Chinese and English. It utilizes the Title and Paragraph subcomponents of Typography.

LANGUAGE: jsx
CODE:
import { Typography } from 'antd';

const { Title, Paragraph } = Typography;

ReactDOM.render(
  <Typography>
    <Title>介绍</Title>
    <Paragraph>
      蚂蚁的企业级产品是一个庞大且复杂的体系。这类产品不仅量级巨大且功能复杂，而且变动和并发频繁，常常需要设计与开发能够快速的做出响应。同时这类产品中有存在很多类似的页面以及组件，可以通过抽象得到一些稳定且高复用性的内容。
    </Paragraph>
    <Title>设计资源</Title>
    <Paragraph>
      我们提供完善的设计原则、最佳实践和设计资源文件（Sketch 和 Axure），来帮助业务快速设计出高质量的产品原型。
    </Paragraph>

    <Title>Introduction</Title>
    <Paragraph>
      An enterprise-class product is a large and complex system. This type of product is not only large-scale and complex in function, but also frequent in changes and concurrency. It often requires designers and developers to respond quickly. At the same time, there are many similar pages and components in this type of product, which can be abstracted to obtain some stable and highly reusable content.
    </Paragraph>
    <Title>Design resources</Title>
    <Paragraph>
      We provide comprehensive design principles, best practices and design resource files (Sketch and Axure) to help the business quickly design high-quality product prototypes.
    </Paragraph>
  </Typography>,
  mountNode,
);

----------------------------------------

TITLE: Custom Preview Content
DESCRIPTION: Shows how to customize the content displayed in the image preview.

LANGUAGE: typescript
CODE:
<code src="./demo/imageRender.tsx">自定义预览内容</code>

----------------------------------------

TITLE: SegmentedItemType Interface Definition
DESCRIPTION: TypeScript interface definition for individual Segmented items, specifying properties like label, value, icon, disabled state, and custom className.

LANGUAGE: markdown
CODE:
| 属性 | 描述 | 类型 | 默认值 | 版本 |
| --------- | ---------------- | ---------------- | ------ | ---- |
| label | 分段项的显示文本 | ReactNode | - | |
| value | 分段项的值 | string \| number | - | |
| icon | 分段项的显示图标 | ReactNode | - | |
| disabled | 分段项的禁用状态 | boolean | false | |
| className | 自定义类名 | string | - | |

----------------------------------------

TITLE: CSS Shadow Variables Level 3
DESCRIPTION: Defines shadow CSS variables for third elevation level with up, down, left and right directions. Uses the largest offset values and lowest opacity for highest elevation effects.

LANGUAGE: css
CODE:
@shadow-3-up {
  box-shadow: 0px -6px 16px -8px rgba(0,0,0,0.08),
             0px -9px 28px 0px rgba(0,0,0,0.05),
             0px -12px 48px 16px rgba(0,0,0,0.03);
}

----------------------------------------

TITLE: Adding Splits to Space in TypeScript
DESCRIPTION: Example of adding splits between elements in the Space component in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/split.tsx">Split</code>

----------------------------------------

TITLE: Styling Demo Elements for Ant Design Dynamic Options
DESCRIPTION: Custom CSS styles for the Ant Design demo, specifically targeting images within elements with the class 'antd-demo-dynamic-option'. It sets image dimensions and adds right margin (for LTR languages) or left margin (for RTL languages).

LANGUAGE: CSS
CODE:
.antd-demo-dynamic-option img {
  width: 20px;
  height: 20px;
  margin-inline-end: 8px;
}

----------------------------------------

TITLE: ResourceArticles Component Implementation
DESCRIPTION: Empty ResourceArticles component implementation for displaying Ant Design related articles.

LANGUAGE: markdown
CODE:
<ResourceArticles></ResourceArticles>

----------------------------------------

TITLE: StepItem API Documentation
DESCRIPTION: API documentation for individual StepItem components within Steps, showing available properties and configuration options.

LANGUAGE: markdown
CODE:
### StepItem

| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| description | Description of the step | ReactNode | - |  |
| disabled | Disable click | boolean | false |  |
| icon | Icon of the step | ReactNode | - |  |
| status | Status of the step | string | wait |  |
| subTitle | Subtitle of the step | ReactNode | - |  |
| title | Title of the step | ReactNode | - |  |

----------------------------------------

TITLE: Basic Form Implementation with Array-to-Object Conversion
DESCRIPTION: Demonstrates a basic form implementation that converts between array and object formats for province/city selection using Ant Design's Cascader component.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Cascader, Form } from 'antd';

const data = { province: 'Beijing', city: 'Haidian' };
const options = [
  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },
  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] },
];
const createUser = (values) => console.log(values);

const Demo = () => (
  <Form
    initialValues={{ province: [data.province, data.city] }}
    onFinish={(values) => {
      const { province, ...rest } = values;
      createUser({ province: province[0], city: province[1], ...rest });
    }}
  >
    <Form.Item label="Address" name="province">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>
  </Form>
);

----------------------------------------

TITLE: Navigation Overview Section in Markdown
DESCRIPTION: Front matter and introduction section describing general navigation principles and guidelines for designers implementing navigation patterns.

LANGUAGE: markdown
CODE:
---
group: 设计模式
type: 全局规则
order: 2
title: 导航
skip: true
---

----------------------------------------

TITLE: Basic Tooltip Usage in React
DESCRIPTION: Example showing basic tooltip implementation with conditional content updating. Demonstrates both standard and fresh content update behavior.

LANGUAGE: jsx
CODE:
// `title` 不会因为 `user` 置空而闪烁置空
<Tooltip open={user} title={user?.name} />

LANGUAGE: jsx
CODE:
<Tooltip open={user} title={user?.name} fresh />

----------------------------------------

TITLE: Implementing Quick Page Jump in Ant Design Pagination (React/JSX)
DESCRIPTION: This code snippet demonstrates how to use the Pagination component from Ant Design to create a pagination interface with quick jump functionality. It allows users to directly input a page number to navigate to that specific page quickly.

LANGUAGE: jsx
CODE:
import { Pagination } from 'antd';

const App: React.FC = () => <Pagination showQuickJumper defaultCurrent={2} total={500} />;

export default App;

----------------------------------------

TITLE: ResourceCards Component Usage in Markdown
DESCRIPTION: Markdown implementation of ResourceCards component showcasing design resources and downloads for Ant Design.

LANGUAGE: markdown
CODE:
<ResourceCards>
- Sketch 组件包
  - https://gw.alipayobjects.com/zos/basement_prod/048ee28f-2c80-4d15-9aa3-4f5ddac50465.svg
  - 桌面组件 Sketch 模板包
  - https://github.com/ant-design/ant-design/releases/download/5.13.3/AntDesign5.0_UI.KIT_202401.sketch
  - 官方
</ResourceCards>

----------------------------------------

TITLE: Duration Values in Notification Component
DESCRIPTION: Demonstrates the duration property values for notifications. Default is 4.5 seconds, and setting to 0 prevents auto-closing. This represents a key configuration parameter in Ant Design's notification system.

LANGUAGE: markdown
CODE:
4.5s

LANGUAGE: markdown
CODE:
0

----------------------------------------

TITLE: Breadcrumb with Icons in React
DESCRIPTION: Illustrates how icons can be used to replace part of the text or be added before the text in a Breadcrumb component.

LANGUAGE: tsx
CODE:
src="./demo/withIcon"

----------------------------------------

TITLE: Tour Component API Properties
DESCRIPTION: API documentation table showing the available properties for the Tour component, including types, defaults, and version information.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| arrow | Whether to show the arrow, including the configuration whether to point to the center of the element | `boolean`\|`{ pointAtCenter: boolean}` | `true` | |
| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |

----------------------------------------

TITLE: Using Statistic Component with Units
DESCRIPTION: Example of using the Statistic component with units. This demonstrates how to add unit prefixes or suffixes to the displayed value.

LANGUAGE: typescript
CODE:
<code src="./demo/unit.tsx">单位</code>

----------------------------------------

TITLE: Setting Autocomplete Options in Ant Design - Basic Usage Documentation
DESCRIPTION: Multilingual documentation explaining how to configure basic autocomplete functionality by setting the data source through the options property in Ant Design components.

LANGUAGE: markdown
CODE:
## zh-CN

基本使用，通过 `options` 设置自动完成的数据源。

## en-US

Basic Usage, set data source of autocomplete with `options` property.

----------------------------------------

TITLE: Configuring Table Filter UI in Ant Design
DESCRIPTION: This snippet demonstrates how to use the `filterMode` prop to customize the filter interface in Ant Design tables. It also mentions the `filterSearch` prop for enabling searchable filter dropdown items.

LANGUAGE: markdown
CODE:
## zh-CN

可以使用 `filterMode` 来修改筛选菜单的 UI，可选值有 `menu`（默认）和 `tree`。

## en-US

You can use `filterMode` to change default filter interface, options: `menu`(default) and `tree`.

> `filterSearch` is used for making filter dropdown items searchable.

----------------------------------------

TITLE: Defining Editable Configuration Interface in TypeScript
DESCRIPTION: Defines the interface for the editable configuration object used in Typography components. It includes properties for controlling editing behavior and appearance.

LANGUAGE: typescript
CODE:
{
  icon: ReactNode,
  tooltip: ReactNode,
  editing: boolean,
  maxLength: number,
  autoSize: boolean | { minRows: number, maxRows: number },
  text: string,
  onChange: function(string),
  onCancel: function,
  onStart: function,
  onEnd: function,
  triggerType: ('icon' | 'text')[],
  enterIcon: ReactNode,
  tabIndex: number,
}

----------------------------------------

TITLE: Importing Segmented Component Examples in React
DESCRIPTION: This snippet demonstrates how to import and use various examples of the Segmented component in a React application using Ant Design.

LANGUAGE: jsx
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/vertical.tsx" version="5.21.0">Vertical Direction</code>
<code src="./demo/block.tsx">Block Segmented</code>
<code src="./demo/shape.tsx" version="5.24.0">Round shape</code>
<code src="./demo/disabled.tsx">Disabled</code>
<code src="./demo/controlled.tsx">Controlled mode</code>
<code src="./demo/custom.tsx">Custom Render</code>
<code src="./demo/dynamic.tsx">Dynamic</code>
<code src="./demo/size.tsx">Three sizes of Segmented</code>
<code src="./demo/with-icon.tsx">With Icon</code>
<code src="./demo/icon-only.tsx">With Icon only</code>
<code src="./demo/with-name.tsx" version="5.23.0">With name</code>
<code src="./demo/controlled-two.tsx" debug>Controlled Synced mode</code>
<code src="./demo/size-consistent.tsx" debug>Consistent height</code>
<code src="./demo/componentToken.tsx" debug>Custom component token</code>

----------------------------------------

TITLE: Styling Calendar Events and Notes in CSS for Ant Design
DESCRIPTION: This CSS snippet provides custom styling for calendar events and month notes in an Ant Design Calendar component. It defines styles for event lists, badges, and month notes to enhance the visual presentation of custom-rendered calendar data.

LANGUAGE: css
CODE:
.events {
  margin: 0;
  padding: 0;
  list-style: none;
}
.events .ant-badge-status {
  width: 100%;
  overflow: hidden;
  font-size: 12px;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.notes-month {
  font-size: 28px;
  text-align: center;
}
.notes-month section {
  font-size: 28px;
}

----------------------------------------

TITLE: Basic Pagination Component Pattern - TSX
DESCRIPTION: Demonstrates the core behavior pattern of the Pagination component that controls the amount of information per page and allows page navigation.

LANGUAGE: tsx
CODE:
./design/behavior-pattern.tsx

----------------------------------------

TITLE: Skeleton Avatar Props API Table
DESCRIPTION: API documentation table showing the properties specific to the avatar feature of the Skeleton component.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| --- | --- | --- | --- |
| active | Show animation effect, only valid when used avatar independently | boolean | false |
| shape | Set the shape of avatar | `circle` \| `square` | - |
| size | Set the size of avatar | number \| `large` \| `small` \| `default` | - |

----------------------------------------

TITLE: Sequential Vite Build Function for antd-mobile Bundles
DESCRIPTION: This updated function executes Vite builds sequentially, resolving the CSS file generation race condition in the antd-mobile build process.

LANGUAGE: javascript
CODE:
for (const config of configs) {
  await vite.build(config);
}

----------------------------------------

TITLE: Customizing Popconfirm Icon in React
DESCRIPTION: This code snippet shows how to import an example of a Popconfirm component with a customized icon in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/icon.tsx">Customize icon</code>

----------------------------------------

TITLE: Describing InputNumber Variants in Markdown
DESCRIPTION: This snippet outlines the four available variants for the InputNumber component: outlined, filled, borderless, and underlined. It provides this information in both Chinese (zh-CN) and English (en-US) languages.

LANGUAGE: Markdown
CODE:
## zh-CN

InputNumber 形态变体，可选 `outlined` `filled` `borderless` `underlined` 四种形态。

## en-US

Variants of InputNumber, there are four variants: `outlined` `filled` `borderless` and `underlined`.

----------------------------------------

TITLE: Adding Loading State to Ant Design Dropdown Button
DESCRIPTION: Demonstrates how to implement loading states in Ant Design buttons by setting the loading property on Dropdown.Button components. When activated, the button displays a loading indicator to provide visual feedback during operations.



----------------------------------------

TITLE: Deprecation Warning Example
DESCRIPTION: Example of a typical deprecation warning message shown when using outdated Ant Design APIs.

LANGUAGE: text
CODE:
Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.

----------------------------------------

TITLE: Simple Pagination - TSX
DESCRIPTION: Simplified pagination control showing only current page, total pages, and navigation buttons. Suitable for scenarios with limited horizontal space.

LANGUAGE: tsx
CODE:
./design/demo/simple

----------------------------------------

TITLE: Configuring Button Sizes in Ant Design (Markdown)
DESCRIPTION: Describes how to set button sizes in Ant Design using the 'size' property. It explains the three available sizes (large, default, small) and how to apply them.

LANGUAGE: markdown
CODE:
## zh-CN

按钮有大、中、小三种尺寸。

通过设置 `size` 为 `large` `small` 分别把按钮设为大、小尺寸。若不设置 `size`，则尺寸默认为中。

## en-US

Ant Design supports three sizes of buttons: small, default and large.

If a large or small button is desired, set the `size` property to either `large` or `small` respectively. Omit the `size` property for a button with the default size.

----------------------------------------

TITLE: Configuring Collapse Panel Sizes in Ant Design
DESCRIPTION: Explains how to set the size of collapse panels in Ant Design using the 'size' property. It details the available options (large, small) and mentions that omitting the property results in the default medium size.

LANGUAGE: markdown
CODE:
## zh-CN

折叠面板有大、中、小三种尺寸。

通过设置 `size` 为 `large` `small` 分别把折叠面板设为大、小尺寸。若不设置 `size`，则尺寸默认为中。

## en-US

Ant Design supports a default collapse size as well as a large and small size.

If a large or small collapse is desired, set the `size` property to either `large` or `small` respectively. Omit the `size` property for a collapse with the default size.

----------------------------------------

TITLE: Tour Component API Definition
DESCRIPTION: Comprehensive API documentation for the Tour component, including properties, types, default values, and versions.

LANGUAGE: markdown
CODE:
### Tour

| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| arrow | Whether to show arrow and center pointing configuration | `boolean` \| `{ pointAtCenter: boolean}` | `true` |  |
| closeIcon | Custom close button | `React.ReactNode` | `true` | 5.9.0 |
| disabledInteraction | Disable highlight area interaction | `boolean` | `false` | 5.13.0 |

----------------------------------------

TITLE: Using useContextSelector for Optimized Context Consumption
DESCRIPTION: Demonstrates the use of useContextSelector, a proposed API for React that allows components to subscribe to specific parts of a context, reducing unnecessary re-renders.

LANGUAGE: tsx
CODE:
const Child = React.memo(() => {
  const prop1 = useContextSelector(MyContext, (context) => context.prop1);
  return <>{prop1}</>;
});

----------------------------------------

TITLE: Nested Splitter in Tabs (Debug Mode)
DESCRIPTION: This code snippet demonstrates how to nest a Splitter component within Tabs, useful for debugging and complex layout scenarios.

LANGUAGE: jsx
CODE:
<code src="./demo/nested-in-tabs.tsx" debug>标签页中嵌套</code>

----------------------------------------

TITLE: Form.useWatch Hook for Field Value Watching
DESCRIPTION: Shows how to use Form.useWatch to watch field values and integrate with other hooks

LANGUAGE: tsx
CODE:
const Demo = () => {
  const [form] = Form.useForm();
  const userName = Form.useWatch('username', form);

  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);

  return (
    <Form form={form}>
      <Form.Item name="username">
        <AutoComplete options={options} />
      </Form.Item>
    </Form>
  );
};

----------------------------------------

TITLE: Replacing Moment.js with Day.js
DESCRIPTION: Diff showing the replacement of Moment.js imports and locale configuration with Day.js equivalents.

LANGUAGE: diff
CODE:
-   import moment from 'moment';
+   import dayjs from 'dayjs';
-   import 'moment/locale/zh-cn';
+   import 'dayjs/locale/zh-cn';

-   moment.locale('zh-cn');
+   dayjs.locale('zh-cn');

----------------------------------------

TITLE: Custom Toolbar for Image Preview
DESCRIPTION: Demonstrates how to customize the toolbar in image preview mode.

LANGUAGE: typescript
CODE:
<code src="./demo/toolbarRender.tsx">自定义工具栏</code>

----------------------------------------

TITLE: Defining StatusRenderInfo Type in TypeScript
DESCRIPTION: This code snippet defines the StatusRenderInfo type used in the QRCode component. It includes properties for status, locale, and an optional onRefresh callback.

LANGUAGE: typescript
CODE:
type StatusRenderInfo = {
  status: QRStatus;
  locale: Locale['QRCode'];
  onRefresh?: () => void;
};

----------------------------------------

TITLE: Result Component Example References - TSX
DESCRIPTION: References to various example implementations of the Result component showing different states and customizations.

LANGUAGE: tsx
CODE:
<code src="./demo/success.tsx">Success</code>
<code src="./demo/info.tsx">Info</code>
<code src="./demo/warning.tsx">Warning</code>
<code src="./demo/403.tsx">403</code>
<code src="./demo/404.tsx">404</code>
<code src="./demo/500.tsx">500</code>
<code src="./demo/error.tsx">Error</code>
<code src="./demo/customIcon.tsx">Custom icon</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Disabling Notification Stacking in Ant Design
DESCRIPTION: Shows how to disable the new stacking behavior and revert to the pre-5.10.0 default behavior where notifications don't stack.

LANGUAGE: css
CODE:
stack: false

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to navigate to the project directory and start the development server.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm run dev

----------------------------------------

TITLE: Configuring StepItem Properties
DESCRIPTION: API documentation for individual step item configuration including title, description, icon and status settings.

LANGUAGE: markdown
CODE:
| Parameter | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| description | Step description | ReactNode | - | |
| disabled | Disable clicking | boolean | false | |
| icon | Step icon | ReactNode | - | |
| status | Step status | string | wait | |
| subTitle | Step subtitle | ReactNode | - | |
| title | Step title | ReactNode | - | |

----------------------------------------

TITLE: Documenting Table Component Usage in Chinese and English
DESCRIPTION: Example markdown documentation showing bilingual description for using Table as a custom list renderer in Ant Design.

LANGUAGE: markdown
CODE:
## zh-CN

使用 Table 组件作为自定义渲染列表。

## en-US

Customize the render list with a Table component.

----------------------------------------

TITLE: CSS Variable Theme Switching
DESCRIPTION: Demonstrates how to set up CSS variables for different themes (light and dark) using custom classes as selectors. This allows for easy theme switching by changing a class on a parent element.

LANGUAGE: css
CODE:
/* Using custom classes as selectors */
.light .css-hash {
  --color-text: rgba(0, 0, 0, 0.85);
}

.dark .css-hash {
  --color-text: rgba(255, 255, 255, 0.88);
}

----------------------------------------

TITLE: Advanced QRCode Usage with Popover in React
DESCRIPTION: Shows an advanced usage example of the QRCode component combined with a Popover component.

LANGUAGE: jsx
CODE:
<code src="./demo/Popover.tsx">高级用法</code>

----------------------------------------

TITLE: Ant Design Card Component Usage Documentation
DESCRIPTION: Example documentation in Chinese and English explaining the implementation of an enhanced Card component that supports cover images, avatar icons, titles and descriptive text.

LANGUAGE: markdown
CODE:
## zh-CN

一种支持封面、头像、标题和描述信息的卡片。

## en-US

A Card that supports `cover`, `avatar`, `title` and `description`.

----------------------------------------

TITLE: Displaying Debug Component Warning in Markdown
DESCRIPTION: This snippet shows a bilingual warning message for a debug component. It advises developers not to use this component in production environments, indicating it's intended for debugging purposes only.

LANGUAGE: Markdown
CODE:
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.

----------------------------------------

TITLE: Portal DOM Append Implementation
DESCRIPTION: Core implementation of rc-portal's DOM node creation and append logic using useLayoutEffect.

LANGUAGE: tsx
CODE:
// pseudocode
function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
}

useLayoutEffect(() => {
  if (queueCreate) {
    queueCreate(append);
  } else {
    append();
  }
}, []);

----------------------------------------

TITLE: Customizing Progress Value Position in TypeScript
DESCRIPTION: Example of changing the position of the progress value display in a Progress component using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/info-position.tsx" version="5.18.0">改变进度数值位置</code>

----------------------------------------

TITLE: Styling for Custom Icon Message Demo (CSS)
DESCRIPTION: This CSS snippet provides styling for the custom icon message demo. It sets a specific width for the demo container.

LANGUAGE: css
CODE:
.ant-message-custom-content {
  width: 300px;
}

----------------------------------------

TITLE: Implementing Segmented Progress Bar in TypeScript
DESCRIPTION: Example of creating a segmented progress bar with multiple stages using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/segment.tsx">分段进度条</code>

----------------------------------------

TITLE: Using Badge Color Status Properties in Ant Design
DESCRIPTION: Instructions for setting the color property on Badge components to indicate different statuses using predefined values. The available status colors are success, processing, error, default, and warning.

LANGUAGE: markdown
CODE:
success
processing
error
default
warning

----------------------------------------

TITLE: Deprecated Select Component Initialization in React
DESCRIPTION: Example of initializing a Select component using the older, deprecated syntax in ant-design version 5.x. This method is not recommended for versions 5.11.0 and later, and will be removed in version 6.0.

LANGUAGE: jsx
CODE:
return (
  <Select onChange={onChange}>
    <Select.Option value="sample">Sample</Select.Option>
  </Select>
);

----------------------------------------

TITLE: Defining 403 Error Messages in Markdown for Ant Design
DESCRIPTION: This snippet defines localized text for a 403 (Unauthorized) error page in Ant Design. It includes translations in Chinese (zh-CN) and English (en-US) for displaying a message when a user does not have permission to access a specific page.

LANGUAGE: Markdown
CODE:
## zh-CN

你没有此页面的访问权限。

## en-US

you are not authorized to access this page.

----------------------------------------

TITLE: Defining Alert Component Behavior Pattern in TypeScript
DESCRIPTION: This snippet defines the behavior pattern for the Alert component, illustrating its essence as a notification within a page or module that requires attention.

LANGUAGE: TypeScript
CODE:
src="./design/behavior-pattern.tsx"

----------------------------------------

TITLE: Progress Component API Documentation
DESCRIPTION: API documentation detailing the common properties and specific properties for different progress types (line, circle, dashboard). Includes information about styling, formatting, and behavior configuration options.

LANGUAGE: markdown
CODE:
## API

Common props ref：[Common props](/docs/react/common-props)

Properties that shared by all types.

| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| format | The template function of the content | function(percent, successPercent) | (percent) => percent + `%` | - |
| percent | To set the completion percentage | number | 0 | - |
| showInfo | Whether to display the progress value and the status icon | boolean | true |
| status | To set the status of the Progress | string | - |
| strokeColor | The color of progress bar | string | - | - |

----------------------------------------

TITLE: Skeleton Title and Paragraph Props API Tables
DESCRIPTION: API documentation tables showing the properties for title and paragraph features of the Skeleton component.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default |
| -------- | ---------------------- | ---------------- | ------- |
| width | Set the width of title | number \| string | - |

| Property | Description | Type | Default |
| --- | --- | --- | --- |
| rows | Set the row count of paragraph | number | - |
| width | Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width | number \| string \| Array&lt;number \| string> | - |

----------------------------------------

TITLE: Implementing Switch Component in React with ant-design
DESCRIPTION: This code snippet demonstrates the basic usage of the Switch component in a React application using ant-design. It includes various properties and methods available for customization.

LANGUAGE: TSX
CODE:
<Form.Item name="fieldA" valuePropName="checked">
  <Switch />
</Form.Item>

----------------------------------------

TITLE: Implementing Switchable Arrows in Ant Design Dropdown Menu
DESCRIPTION: This code snippet demonstrates how to add switchable arrows to an Ant Design dropdown menu. It uses the 'expandIcon' prop to customize the arrow icon.

LANGUAGE: JSX
CODE:
import { DownOutlined } from '@ant-design/icons';
import { Dropdown, Menu, Space } from 'antd';
import React from 'react';

const menu = (
  <Menu
    items={[
      {
        key: '1',
        label: '1st menu item',
      },
      {
        key: '2',
        label: '2nd menu item',
      },
      {
        key: '3',
        label: '3rd menu item',
      },
    ]}
  />
);

const App: React.FC = () => (
  <Space>
    <Dropdown overlay={menu} placement="bottomLeft" arrow={{ pointAtCenter: true }}>
      <a onClick={(e) => e.preventDefault()}>
        <Space>
          Hover me
          <DownOutlined />
        </Space>
      </a>
    </Dropdown>
    <Dropdown overlay={menu} placement="bottomLeft" arrow={{ pointAtCenter: true }}>
      <a onClick={(e) => e.preventDefault()}>
        <Space>
          Hover me
          <DownOutlined />
        </Space>
      </a>
    </Dropdown>
  </Space>
);

export default App;

----------------------------------------

TITLE: Styling Error Icon in Ant Design with CSS
DESCRIPTION: CSS class definition for customizing the color of error feedback icons in Ant Design. Sets the color to red for enhanced error visibility.

LANGUAGE: css
CODE:
.site-result-demo-error-icon {
  color: red;
}

----------------------------------------

TITLE: Styling Image Container with HTML/CSS
DESCRIPTION: Centers an image within a div container using text-align property.

LANGUAGE: HTML
CODE:
<div style="text-align:center;">
  <img alt="General" src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*WzMpTIP8R6gAAAAAAAAAAABkARQnAQ" />
</div>

----------------------------------------

TITLE: Basic ConfigProvider Usage in React
DESCRIPTION: Example showing how to wrap an app with ConfigProvider to enable RTL direction support.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

// ...
const Demo: React.FC = () => (
  <ConfigProvider direction="rtl">
    <App />
  </ConfigProvider>
);

export default Demo;

----------------------------------------

TITLE: Setting Base Color in CSS
DESCRIPTION: CSS implementation for setting the base color of the color panel using RGB values.

LANGUAGE: css
CODE:
background-color: rgb(0, 106, 255);

----------------------------------------

TITLE: Documenting Controlled Tree Operations - Markdown
DESCRIPTION: Multilingual documentation explaining the controlled mode functionality for tree components, where parent nodes intelligently reflect child node states.

LANGUAGE: markdown
CODE:
## zh-CN

受控操作示例

## en-US

Controlled mode lets parent nodes reflect the status of child nodes more intelligently.

----------------------------------------

TITLE: Styling Drawer Preview Elements with CSS
DESCRIPTION: Defines styling for drawer preview components including wrapper elements, body paragraphs, and labels. Sets specific typography properties like font sizes, colors, and spacing for a consistent preview display interface.

LANGUAGE: css
CODE:
.site-description-item-profile-wrapper {
  margin-bottom: 7px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 14px;
  line-height: 1.5715;
}

.ant-drawer-body p.site-description-item-profile-p {
  display: block;
  margin-bottom: 16px;
  color: rgba(0, 0, 0, 0.85);
  font-size: 16px;
  line-height: 1.5715;
}

.site-description-item-profile-p-label {
  display: inline-block;
  margin-inline-end: 8px;
  color: rgba(0, 0, 0, 0.85);
}

----------------------------------------

TITLE: Breadcrumb with Custom Separator in React
DESCRIPTION: Demonstrates how to customize the separator in a Breadcrumb component, using a mathematical greater-than symbol as an example.

LANGUAGE: tsx
CODE:
src="./demo/separator"

----------------------------------------

TITLE: Describing Segmented Component Sizes in Markdown
DESCRIPTION: This snippet defines the three sizes available for the Segmented component in both Chinese and English. It specifies the height for each size option: large (40px), default (32px), and small (24px).

LANGUAGE: Markdown
CODE:
## zh-CN

我们为 `<Segmented />` 组件定义了三种尺寸（大、默认、小），高度分别为 `40px`、`32px` 和 `24px`。

## en-US

There are three sizes of an Segmented: `large` (40px), `default` (32px) and `small` (24px).

----------------------------------------

TITLE: Rendering Colorful Badges with Count in React using Ant Design
DESCRIPTION: This code snippet demonstrates how to use the Badge component from Ant Design to create colorful badges that also display a count. It showcases various color options and count values.

LANGUAGE: jsx
CODE:
import { Badge, Divider } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <>
    <Badge count={5} color="#f50" />
    <Badge count={5} color="#2db7f5" />
    <Badge count={5} color="#87d068" />
    <Badge count={5} color="#108ee9" />
    <Divider />
    <Badge count={5} color="#f50" showZero />
    <Badge count={0} color="#2db7f5" showZero />
    <Badge count={0} color="#87d068" showZero />
    <Badge count={0} color="#108ee9" showZero />
  </>
);

export default App;

----------------------------------------

TITLE: Configuring Badge Status Dot Offset in ant-design
DESCRIPTION: Explains how to set the offset for badge status dots using a [left, top] array format. This configuration allows precise positioning of the dot relative to its default location on the badge.

LANGUAGE: Markdown
CODE:
## zh-CN

设置状态点的位置偏移，格式为 `[left, top]`，表示状态点距默认位置左侧、上方的偏移量。

## en-US

Set offset of the badge dot, the format is `[left, top]`, which represents the offset of the status dot from the left and top of the default position.

----------------------------------------

TITLE: Initializing Pagination Component in JSX
DESCRIPTION: Basic usage of the Pagination component with onChange event handler and total prop. This snippet demonstrates how to set up a simple pagination control.

LANGUAGE: jsx
CODE:
<Pagination onChange={onChange} total={50} />

----------------------------------------

TITLE: Controlled Mode Splitter in React
DESCRIPTION: This example shows how to use the Splitter component in controlled mode, where the panel sizes are managed by the parent component.

LANGUAGE: jsx
CODE:
<code src="./demo/control.tsx">受控模式</code>

----------------------------------------

TITLE: Configuring Tree Selection Display in Chinese
DESCRIPTION: Markdown documentation in Chinese explaining how to use showCheckedStrategy to control the display of selected items.

LANGUAGE: markdown
CODE:
## zh-CN

通过设置 `showCheckedStrategy` 选择回填方式。

----------------------------------------

TITLE: Documenting Component Tokens in Markdown
DESCRIPTION: Bilingual markdown headers for component token documentation in ant-design, showing both Chinese (zh-CN) and English (en-US) versions.

LANGUAGE: markdown
CODE:
## zh-CN

组件 Token

## en-US

Component Token

----------------------------------------

TITLE: Customizing Popconfirm Icon in React
DESCRIPTION: This example shows how to customize the icon displayed in the Popconfirm component. It allows developers to replace the default icon with a custom one.

LANGUAGE: tsx
CODE:
<code src="./demo/icon.tsx">自定义 Icon 图标</code>

----------------------------------------

TITLE: Importing Splitter Examples in Markdown
DESCRIPTION: Demonstrates how to import and display various Splitter component examples using code blocks in Markdown.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/size.tsx">Basic</code>
<code src="./demo/control.tsx">Control mode</code>
<code src="./demo/vertical.tsx">Vertical</code>
<code src="./demo/collapsible.tsx">Collapsible</code>
<code src="./demo/multiple.tsx">Multiple panels</code>
<code src="./demo/group.tsx">Complex combination</code>
<code src="./demo/nested-in-tabs.tsx" debug>Nested in tabs</code>
<code src="./demo/lazy.tsx" version="5.23.0">Lazy</code>
<code src="./demo/debug.tsx" debug>Debug</code>

----------------------------------------

TITLE: Documenting Debug Component Usage in Ant Design (Markdown)
DESCRIPTION: This snippet provides multilingual documentation for a debug-only component in Ant Design. It warns users in both Chinese and English that the component should not be used in production environments.

LANGUAGE: Markdown
CODE:
## zh-CN

调试用组件，请勿直接使用。

## en-US

Debug usage. Do not use in your production.

----------------------------------------

TITLE: Importing Rate Component Demos in Markdown
DESCRIPTION: This snippet demonstrates how to import various demo examples of the Rate component using markdown code blocks. Each demo represents a different aspect or feature of the Rate component.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/half.tsx">半星</code>
<code src="./demo/text.tsx">文案展现</code>
<code src="./demo/disabled.tsx">只读</code>
<code src="./demo/clear.tsx">清除</code>
<code src="./demo/character.tsx">其他字符</code>
<code src="./demo/character-function.tsx">自定义字符</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Lazy Rendering Mode for Splitter
DESCRIPTION: This example introduces the lazy rendering mode for the Splitter component, optimizing performance by rendering panels only when needed.

LANGUAGE: jsx
CODE:
<code src="./demo/lazy.tsx" version="5.23.0">延迟渲染模式</code>

----------------------------------------

TITLE: Defining Localized Server Error Messages in Markdown
DESCRIPTION: This snippet defines error messages for server errors in Chinese and English using Markdown headings. It provides a simple way to manage localized error messages for different language versions of an application.

LANGUAGE: Markdown
CODE:
## zh-CN

服务器发生了错误。

## en-US

Something went wrong on server.

----------------------------------------

TITLE: Referencing Ant Design GitHub Issue in Markdown
DESCRIPTION: This snippet provides links to a specific GitHub issue (#36583) in the Ant Design repository. It includes separate sections for Chinese and English languages using Markdown headers.

LANGUAGE: Markdown
CODE:
## zh-CN

https://github.com/ant-design/ant-design/issues/36583

## en-US

https://github.com/ant-design/ant-design/issues/36583

----------------------------------------

TITLE: Styling Grid Gutter Box with CSS
DESCRIPTION: CSS styling for grid box elements that defines padding and background color for gutter demonstration. Sets vertical padding of 8px and blue background color.

LANGUAGE: css
CODE:
.gutter-box {
  padding: 8px 0;
  background: #00a0e9;
}

----------------------------------------

TITLE: Implementing Expandable Rows in Ant Design Table with TypeScript and React
DESCRIPTION: This code snippet demonstrates how to create a table with expandable rows using Ant Design's Table component. It includes custom rendering for expanded content and defines the table structure with columns for name, age, address, and more detailed information.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Table } from 'antd';
import type { TableProps } from 'antd';

interface DataType {
  key: React.Key;
  name: string;
  age: number;
  address: string;
  description: string;
}

const columns: TableProps<DataType>['columns'] = [
  { title: 'Name', dataIndex: 'name', key: 'name' },
  { title: 'Age', dataIndex: 'age', key: 'age' },
  { title: 'Address', dataIndex: 'address', key: 'address' },
  {
    title: 'Action',
    dataIndex: '',
    key: 'x',
    render: () => <a>Delete</a>,
  },
];

const data: DataType[] = [
  {
    key: 1,
    name: 'John Brown',
    age: 32,
    address: 'New York No. 1 Lake Park',
    description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.',
  },
  {
    key: 2,
    name: 'Jim Green',
    age: 42,
    address: 'London No. 1 Bridge',
    description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Bridge.',
  },
  {
    key: 3,
    name: 'Not Expandable',
    age: 29,
    address: 'Jiangsu No. 1 Lake Park',
    description: 'This not expandable',
  },
  {
    key: 4,
    name: 'Joe Black',
    age: 32,
    address: 'Sydney No. 1 Bridge',
    description: 'My name is Joe Black, I am 32 years old, living in Sydney No. 1 Bridge.',
  },
];

const App: React.FC = () => (
  <Table
    columns={columns}
    expandable={{
      expandedRowRender: (record) => <p style={{ margin: 0 }}>{record.description}</p>,
      rowExpandable: (record) => record.name !== 'Not Expandable',
    }}
    dataSource={data}
  />
);

export default App;

----------------------------------------

TITLE: Using Promise-based Async Closing for Popconfirm in React
DESCRIPTION: This example shows how to use Promise-based asynchronous closing for the Popconfirm component. It's an alternative approach to handling asynchronous confirmation actions.

LANGUAGE: tsx
CODE:
<code src="./demo/promise.tsx">基于 Promise 的异步关闭</code>

----------------------------------------

TITLE: Creating Gradient Progress Bar in TypeScript
DESCRIPTION: Code snippet showing how to create a progress bar with custom gradient colors using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/gradient-line.tsx">自定义进度条渐变色</code>

----------------------------------------

TITLE: Implementing Date Range Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific date range in the DatePicker component.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-date-range.tsx" description="用于具体日期范围的选择。">选择某天至某天</code>

----------------------------------------

TITLE: Adding Status to TimePicker in React with ant-design
DESCRIPTION: This code snippet shows how to use the 'status' prop on a TimePicker component to add error or warning states. It demonstrates the flexibility of the TimePicker component in conveying different statuses to the user.

LANGUAGE: JSX
CODE:
<TimePicker status="error" />
<TimePicker status="warning" />

----------------------------------------

TITLE: Album Mode for Image Preview
DESCRIPTION: Shows how to use the album mode for previewing multiple images.

LANGUAGE: typescript
CODE:
<code src="./demo/preview-group-visible.tsx">相册模式</code>

----------------------------------------

TITLE: Custom Navigation Text - TSX
DESCRIPTION: Modifies previous and next navigation buttons to text links.

LANGUAGE: tsx
CODE:
./demo/itemRender

----------------------------------------

TITLE: Creating a Category form using Refine and Ant Design
DESCRIPTION: Example of a React component using Refine's hooks and Ant Design components to create a form for adding a new category. It demonstrates the integration between Refine and Ant Design in a typical CRUD operation.

LANGUAGE: tsx
CODE:
import { Create, useForm } from '@refinedev/antd';
import { Form, Input } from 'antd';

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item label={'Title'} name={['title']} rules={[{ required: true }]}>
          <Input />
        </Form.Item>
      </Form>
    </Create>
  );
};

----------------------------------------

TITLE: Configuring RTL Styles for Ant Design Components
DESCRIPTION: CSS styles that define margins, spacing, and layout properties for RTL-compatible components including buttons, button groups, head examples, and badges. Includes specific adjustments for RTL direction using margin-inline properties.

LANGUAGE: css
CODE:
.button-demo .ant-btn,
.button-demo .ant-btn-group {
  margin-inline-end: 8px;
  margin-bottom: 12px;
}
.button-demo .ant-btn-group > .ant-btn,
.button-demo .ant-btn-group > span > .ant-btn {
  margin-inline-end: 0;
  margin-inline-start: 0;
}

.head-example {
  display: inline-block;
  width: 42px;
  height: 42px;
  vertical-align: middle;
  background: #eee;
  border-radius: 4px;
}

.ant-badge:not(.ant-badge-not-a-wrapper) {
  margin-inline-end: 20px;
}

.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {
  margin-inline-end: 0;
  margin-inline-start: 20px;
}

----------------------------------------

TITLE: Documenting Dropdown Placement Options in Ant Design (Markdown)
DESCRIPTION: This snippet describes the available options for customizing the placement of dropdown menus in Ant Design components. It specifies four preset values: top, right, bottom, and left, with top being the default placement.

LANGUAGE: Markdown
CODE:
## zh-CN

自定义弹出位置，提供了四个预设值：`top`、`right`、`bottom`、`left`，默认值为 `top`。

## en-US

Customize animation placement, providing four preset placement: `top`, `right`, `bottom`, `left`, the `top` position by default.

----------------------------------------

TITLE: Configuring Notification Stacking Threshold in Ant Design
DESCRIPTION: Demonstrates how to set the threshold for when notifications start stacking. The default is 3, meaning stacking occurs when the 4th notification appears. This can be customized using the stack property.

LANGUAGE: css
CODE:
stack: { threshold: 3 }

----------------------------------------

TITLE: Configuring Arrow Visibility and Position in Ant Design Popover
DESCRIPTION: This code snippet demonstrates how to control the visibility and positioning of the arrow in an Ant Design Popover component. It shows options for showing, hiding, and centering the arrow.

LANGUAGE: JSX
CODE:
import { Button, Popover } from 'antd';

const content = (
  <div>
    <p>Content</p>
    <p>Content</p>
  </div>
);

const App: React.FC = () => (
  <>
    <Popover content={content} title="Title" trigger="hover">
      <Button>Hover me</Button>
    </Popover>
    <Popover content={content} title="Title" trigger="hover" arrow={false}>
      <Button>Hide arrow</Button>
    </Popover>
    <Popover
      content={content}
      title="Title"
      trigger="hover"
      arrow={{ pointAtCenter: true }}
    >
      <Button>Arrow points to center</Button>
    </Popover>
  </>
);

export default App;

----------------------------------------

TITLE: Styling Ant Design Row Background for Flex Alignment Demo
DESCRIPTION: CSS code that applies a semi-transparent gray background to Ant Design row components for better visualization of the flex alignment. Uses attribute selector to target elements with 'ant-row' class.

LANGUAGE: css
CODE:
#grid-demo-flex-align [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}

----------------------------------------

TITLE: Installing Ant Design v5 with Alias
DESCRIPTION: Commands to install Ant Design v5 using an alias to coexist with v4.

LANGUAGE: bash
CODE:
$ npm install --save antd-v5@npm:antd@5
# or
$ yarn add antd-v5@npm:antd@5
# or
$ pnpm add antd-v5@npm:antd@5

----------------------------------------

TITLE: Running Ant Design Website Locally
DESCRIPTION: Commands to start the Ant Design website development server using npm or yarn.

LANGUAGE: bash
CODE:
$ npm start

LANGUAGE: bash
CODE:
$ yarn start

----------------------------------------

TITLE: DnD-Kit Integration Description in Markdown
DESCRIPTION: Multi-language documentation for integrating dnd-kit library with Ant Design tables for column drag sorting. Includes both Chinese and English descriptions.

LANGUAGE: markdown
CODE:
## zh-CN

使用自定义元素，我们可以集成 [dnd-kit](https://github.com/clauderic/dnd-kit) 来实现列拖拽排序。

## en-US

By using `components`, we can integrate table with [dnd-kit](https://github.com/clauderic/dnd-kit) to implement column drag sorting function.

----------------------------------------

TITLE: Implementing Products Page with React Query
DESCRIPTION: Implementation of the products page using React Query for data fetching and mutation.

LANGUAGE: tsx
CODE:
import React from 'react';
import axios from 'axios';
import { useMutation, useQuery, useQueryClient } from 'umi';

import styles from './products.less';
import ProductList from '@/components/ProductList';

export default function Page() {
  const queryClient = useQueryClient();
  const productsQuery = useQuery(['products'], {
    queryFn() {
      return axios.get('/api/products').then((res) => res.data);
    },
  });
  const productsDeleteMutation = useMutation({
    mutationFn(id: string) {
      return axios.delete(`/api/products/${id}`);
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
  if (productsQuery.isLoading) return null;
  return (
    <div>
      <h1 className={styles.title}>Page products</h1>
      <ProductList
        products={productsQuery.data.data}
        onDelete={(id) => {
          productsDeleteMutation.mutate(id);
        }}
      />
    </div>
  );
}

----------------------------------------

TITLE: Alert Banner Component in JSX
DESCRIPTION: An Ant Design Alert component displaying a warning message about FAQ applicability to tooltip-related components.

LANGUAGE: jsx
CODE:
<Antd component="Alert" message="The following FAQ applies to Tooltip, Popconfirm, Popover components." type="warning" banner="true"></Antd>

----------------------------------------

TITLE: Implementing Dynamic Progress Display in TypeScript
DESCRIPTION: Demonstration of dynamically updating progress values in a Progress component using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/dynamic.tsx">动态展示</code>

----------------------------------------

TITLE: Popconfirm Edge Detection and Auto-adjustment Documentation
DESCRIPTION: Explains how the Popconfirm component automatically adjusts its position and arrow placement when near screen edges. Notes that the component will scroll out of view when exceeding screen boundaries.

LANGUAGE: markdown
CODE:
## zh-CN\n\n当 Popconfirm 贴边时，自动偏移并且调整箭头位置。当超出过多时，则一同滚出屏幕。\n\n## en-US\n\nAuto adjust Popup and arrow position when Popconfirm is close to the edge of the screen. Will be out of screen when exceed limitation.

----------------------------------------

TITLE: Documenting Switch Loading State in English
DESCRIPTION: This snippet provides a brief description in English explaining how to indicate a pending state of a switch component.

LANGUAGE: Markdown
CODE:
## en-US

Mark a pending state of switch.

----------------------------------------

TITLE: Importing Anchor Component Examples in React
DESCRIPTION: This snippet demonstrates how to import and use various examples of the Anchor component in a React application. It includes basic usage, horizontal layout, static anchor, custom onClick event, and more.

LANGUAGE: jsx
CODE:
<code src="./demo/basic.tsx" iframe="200">Basic</code>
<code src="./demo/horizontal.tsx" iframe="200">Horizontal Anchor</code>
<code src="./demo/static.tsx" >Static Anchor</code>
<code src="./demo/onClick.tsx">Customize the onClick event</code>
<code src="./demo/customizeHighlight.tsx">Customize the anchor highlight</code>
<code src="./demo/targetOffset.tsx" iframe="200">Set Anchor scroll offset</code>
<code src="./demo/onChange.tsx">Listening for anchor link change</code>
<code src="./demo/replace.tsx" iframe="200">Replace href in history</code>
<code src="./demo/legacy-anchor.tsx" debug>Deprecated JSX demo</code>
<code src="./demo/component-token.tsx" iframe="800" debug>Component Token</code>

----------------------------------------

TITLE: Configuring TypeScript for Node.js
DESCRIPTION: TypeScript configuration specifically for Node.js environment when using Ant Design with server-side rendering.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strictNullChecks": true,
    "module": "NodeNext",
    "jsx": "react",
    "esModuleInterop": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}

----------------------------------------

TITLE: Describing Button Customization in ant-design (Markdown)
DESCRIPTION: This snippet provides explanations in Chinese and English for creating custom button variants in ant-design. It instructs users to set both 'color' and 'variant' properties to derive more button styles.

LANGUAGE: Markdown
CODE:
## zh-CN

同时设置 `color` 和 `variant` 属性，可以衍生出更多的变体按钮。

## en-US

You can set the `color` and `variant` attributes at the same time can derive more variant buttons.

----------------------------------------

TITLE: Tour Step Component Properties
DESCRIPTION: API documentation table showing the available properties for individual TourStep components, including types, defaults, and version information.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| target | Get the element the guide card points to. Empty makes it show in center of screen | `() => HTMLElement` \| `HTMLElement` | - | |
| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |

----------------------------------------

TITLE: Rendering Input Component with Semantic DOM in JSX
DESCRIPTION: Demonstrates the usage of semantic DOM structures for the Input component. This code snippet is referenced in the documentation to show the available semantic class and style targets.

LANGUAGE: JSX
CODE:
<code src="./demo/_semantic_input.tsx" simplify="true"></code>

----------------------------------------

TITLE: Implementing Steps Progress Bar in TypeScript
DESCRIPTION: Example of creating a stepped progress bar with multiple stages using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/steps.tsx">步骤进度条</code>

----------------------------------------

TITLE: Customizing Message Icon in Ant Design (TypeScript)
DESCRIPTION: This snippet shows how to use a custom icon with the Ant Design Message component. It demonstrates setting the icon prop to customize the appearance of the message.

LANGUAGE: typescript
CODE:
import { SmileOutlined } from '@ant-design/icons';
import { Button, message } from 'antd';

const App: React.FC = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const success = () => {
    messageApi.open({
      type: 'success',
      content: 'This is a prompt message with custom icon',
      icon: <SmileOutlined />,
    });
  };

  return (
    <>
      {contextHolder}
      <Button onClick={success}>Customized style</Button>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Demonstrating Modal Hook Position Bug in React
DESCRIPTION: Example showing how contextHolder placement affects Modal positioning in Ant Design, with both correct and incorrect implementations.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, Modal } from 'antd';

export default () => {
  const [modal, contextHolder] = Modal.useModal();

  return (
    <div>
      <Modal open>
        <Button
          onClick={() => {
            modal.confirm({ title: 'Hello World' });
          }}
        >
          Confirm
        </Button>

        {/* 🚨 BUG when put here */}
        {contextHolder}
      </Modal>

      {/* ✅ Work as expect when put here */}
      {/* {contextHolder} */}
    </div>
  );
};

----------------------------------------

TITLE: Documentation for Date Format Customization - Ant Design
DESCRIPTION: Shows how to use the format property to customize date display formats. When format is provided as an array, users can input dates in any of the valid formats specified in that array.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `format` 属性，可以自定义日期显示格式。当 `format` 为数组时，选择器输入框可以输入数组中任意一个有效格式。

## en-US

We can set the date format by `format`. When `format` is an array, the input box can be entered in any of the valid formats of the array.

----------------------------------------

TITLE: TourStep Configuration Definition
DESCRIPTION: API documentation for individual tour steps, including target elements, positioning, and customization options.

LANGUAGE: markdown
CODE:
### TourStep

| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| target | Target element for the tour card | `() => HTMLElement` \| `HTMLElement` | - |  |
| arrow | Show arrow with center pointing configuration | `boolean` \| `{ pointAtCenter: boolean}` | `true` |  |
| closeIcon | Custom close button | `React.ReactNode` | `true` | 5.9.0 |

----------------------------------------

TITLE: Avatar Component API Properties - TypeScript
DESCRIPTION: TypeScript interface showing all available properties for the Avatar component, including size, shape, src, and event handling options.

LANGUAGE: typescript
CODE:
interface AvatarProps {
  alt?: string;
  gap?: number;
  icon?: ReactNode;
  shape?: 'circle' | 'square';
  size?: number | 'large' | 'small' | 'default' | { xs: number, sm: number, ...};
  src?: string | ReactNode;
  srcSet?: string;
  draggable?: boolean | 'true' | 'false';
  crossOrigin?: 'anonymous' | 'use-credentials' | '';
  onError?: () => boolean;
}

----------------------------------------

TITLE: Path-Hash Mapping JSON
DESCRIPTION: Simplified path and hash mapping structure for style caching

LANGUAGE: json
CODE:
{
  "bAMbOo|Button": "LItTlE",
  "bAMbOo|Spin": "liGHt"
}

----------------------------------------

TITLE: Basic Tree Node Rendering Example
DESCRIPTION: Example showing how to properly render tree nodes when using async loading with checkable trees prior to version 3.4.0.

LANGUAGE: jsx
CODE:
{
  this.state.treeData.length ? (
    <Tree>
      {this.state.treeData.map((data) => (
        <TreeNode />
      ))}
    </Tree>
  ) : (
    'loading tree'
  );
}

----------------------------------------

TITLE: Adding Length Limitation to String Display Component in React
DESCRIPTION: This snippet shows how to add a maxLen prop to the MyStr component to potentially limit the displayed string length.

LANGUAGE: tsx
CODE:
interface StrProps {
  value: string;
  maxLen?: number;
}

<MyStr value="Hello World" maxLen={5}>

----------------------------------------

TITLE: Integrating Typography.Link with React Router in TSX
DESCRIPTION: Demonstrates how to integrate Typography.Link component with react-router library using the custom rendering feature of Link component.

LANGUAGE: tsx
CODE:
<Link to="/" component={Typography.Link} />

----------------------------------------

TITLE: BackTop Component Size and Usage Notes
DESCRIPTION: Specifies the size limitations for the BackTop button component (40px by 40px) and notes that the component requires a child element that can accept onClick events. Direct text content as children will not work properly.

LANGUAGE: markdown
CODE:
40px * 40px

----------------------------------------

TITLE: Accessing Component Props in TypeScript
DESCRIPTION: Shows how to access props and ref types for Ant Design components using TypeScript utility types.

LANGUAGE: typescript
CODE:
import type { Checkbox, CheckboxProps, GetProp, GetProps, GetRef, Input } from 'antd';

// Get Props
type CheckboxGroupProps = GetProps<typeof Checkbox.Group>;

// Get Prop
type CheckboxValue = GetProp<CheckboxProps, 'value'>;

// Get Ref
type InputRef = GetRef<typeof Input>;

----------------------------------------

TITLE: Implementing SomeComponent with default getContainer in React
DESCRIPTION: This snippet shows how to implement a component that uses getContainer, with a default implementation that creates a new div and appends it to the document body.

LANGUAGE: tsx
CODE:
// Fake Code. Just for Demo
const defaultGetContainer = () => {
  const div = document.createElement('div');
  document.body.appendChild(div);
  return div;
};

const SomeComponent = ({ getContainer = defaultGetContainer }) => (
  <PopupWrapper getContainer={getContainer} />
);

----------------------------------------

TITLE: Using Modal.destroyAll() in Ant Design
DESCRIPTION: Demonstrates the usage of Modal.destroyAll() method to destroy all confirmation modal dialogs. This is particularly useful in router change events to automatically clean up modal dialogs when navigating between pages.

LANGUAGE: JavaScript
CODE:
Modal.destroyAll()

----------------------------------------

TITLE: Documenting Custom File Preview in Ant Design (Markdown)
DESCRIPTION: This snippet contains markdown documentation in Chinese and English explaining how to customize local file preview functionality in Ant Design for non-image file formats like videos.

LANGUAGE: Markdown
CODE:
## zh-CN

自定义本地预览，用于处理非图片格式文件（例如视频文件）。

## en-US

Customize local preview. Can handle with non-image format files such as video.

----------------------------------------

TITLE: Badge with Overflow Count in TypeScript
DESCRIPTION: Example of using Badge with a maximum count, displaying a '+' sign when the count exceeds the limit. This demonstrates how to handle large numbers in badges.

LANGUAGE: typescript
CODE:
<code src="./demo/overflow.tsx">封顶数字</code>

----------------------------------------

TITLE: Updating Umi Configuration for New Route
DESCRIPTION: Modification to .umirc.ts to add the new 'products' route.

LANGUAGE: diff
CODE:
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
+   { path: "/products", component: "products" },
  ],
  npmClient: "pnpm",
});

----------------------------------------

TITLE: Importing QRCode Component in React
DESCRIPTION: Example of importing and using the QRCode component in a React application. It demonstrates basic usage with a value prop.

LANGUAGE: jsx
CODE:
<code src="./demo/base.tsx">基本使用</code>

----------------------------------------

TITLE: Importing Flex Component Examples in Markdown
DESCRIPTION: Imports various example components demonstrating different features of the Flex component, such as basic usage, alignment, gap, wrapping, and combinations.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/align.tsx">align</code>
<code src="./demo/gap.tsx">gap</code>
<code src="./demo/wrap.tsx">Wrap</code>
<code src="./demo/combination.tsx">combination</code>
<code src="./demo/debug.tsx" debug>debug</code>

----------------------------------------

TITLE: Modifying Watermark Container Overflow Behavior
DESCRIPTION: Example demonstrating how to override the default overflow:hidden style introduced in version 5.18.0 to make the watermark container visible even when height is modified.

LANGUAGE: typescript
CODE:
<Watermark style={{ overflow: 'visible' }} />

----------------------------------------

TITLE: Documentation for Space.Compact Usage in Ant Design
DESCRIPTION: Markdown documentation showing bilingual description of Space.Compact component usage for creating compact form layouts with merged borders between components.

LANGUAGE: markdown
CODE:
## zh-CN

使用 Space.Compact 让表单组件之间紧凑连接且合并边框。

## en-US

Compact Mode for form component.

----------------------------------------

TITLE: Dot Badge in TypeScript
DESCRIPTION: Showcases the use of Badge as a small dot indicator without a number. This is useful for simple notification indicators.

LANGUAGE: typescript
CODE:
<code src="./demo/dot.tsx">讨嫌的小红点</code>

----------------------------------------

TITLE: Implementing PopupWrapper with getContainer in React
DESCRIPTION: Demonstrates a basic implementation of a PopupWrapper component that uses getContainer to determine where to render its content. It uses useRef and useEffect hooks to manage the container element.

LANGUAGE: tsx
CODE:
// Fake Code. Just for Demo
const PopupWrapper = () => {
  const eleRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    // It's much complex with timing in real world. You can view the source for more detail:
    // https://github.com/react-component/portal/blob/master/src/Portal.tsx
    const container: HTMLElement = getContainer(eleRef.current);

    // ...
  }, []);

  return (
    <div ref={eleRef}>
      {...}
    </div>
  );
}

----------------------------------------

TITLE: Hashing Example in Emotion CSS-in-JS
DESCRIPTION: Visual representation of how Emotion generates unique hash values for different style blocks, demonstrating why traditional CSS-in-JS solutions require style serialization on each render



----------------------------------------

TITLE: Implementing Well-Structured React Component Example
DESCRIPTION: Example of properly formatted React/TypeScript code showing correct component structure, clean imports, and consistent formatting.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Menu } from 'antd';

const Demo: React.FC = () => {
  const [collapsed, setCollapsed] = useState<boolean>(false);

  const toggle = () => setCollapsed(!collapsed);

  return <Menu>...</Menu>;
};

export default Demo;

----------------------------------------

TITLE: Configuring Component Tokens in Ant Design 5.x
DESCRIPTION: Example of how to configure component-specific tokens using the ConfigProvider in Ant Design 5.x. This snippet demonstrates setting custom colors for Radio and Checkbox components.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Checkbox, ConfigProvider, Radio } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      components: {
        Radio: {
          colorPrimary: '#00b96b',
        },
        Checkbox: {
          colorPrimary: '#ff4d4f',
        },
      },
    }}
  >
    <Radio>Radio</Radio>
    <Checkbox>Checkbox</Checkbox>
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Importing Slider Component Examples in React
DESCRIPTION: This code snippet demonstrates how to import various Slider component examples in a React application. It includes basic usage, input number integration, icon sliders, custom tooltips, event handling, and more.

LANGUAGE: jsx
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">基本</code>
<code src="./demo/input-number.tsx">带输入框的滑块</code>
<code src="./demo/icon-slider.tsx">带 icon 的滑块</code>
<code src="./demo/tip-formatter.tsx">自定义提示</code>
<code src="./demo/event.tsx">事件</code>
<code src="./demo/mark.tsx">带标签的滑块</code>
<code src="./demo/vertical.tsx">垂直</code>
<code src="./demo/show-tooltip.tsx">控制 ToolTip 的显示</code>
<code src="./demo/reverse.tsx">反向</code>
<code src="./demo/draggableTrack.tsx">范围可拖拽</code>
<code src="./demo/multiple.tsx">多点组合</code>
<code src="./demo/editable.tsx" version="5.20.0">动态增减节点</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Configuring Less Variables for v5 Compatibility
DESCRIPTION: JavaScript code to configure Less variables for compatibility with Ant Design v5 using less-loader.

LANGUAGE: javascript
CODE:
const { theme } = require('antd/lib');
const { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');

const { defaultAlgorithm, defaultSeed } = theme;

const mapV5Token = defaultAlgorithm(defaultSeed);
const v5Vars = convertLegacyToken(mapV5Token);
const mapV4Token = theme.getDesignToken(defaultTheme);
const v4Vars = convertLegacyToken(mapV4Token);

// Webpack Config
module.exports = {
  // ... other config
  loader: 'less-loader',
  options: {
    lessOptions: {
      modifyVars: v5Vars, // or v4Vars
    },
  },
};

----------------------------------------

TITLE: Adding Value Gradient in CSS
DESCRIPTION: CSS implementation for adding value (brightness) gradient to the color panel using linear gradients.

LANGUAGE: css
CODE:
background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);

----------------------------------------

TITLE: Implementing Date-Time Range Restrictions
DESCRIPTION: Complex example showing how to implement date-time range restrictions between 2024-01-01 09:00:00 and 2024-01-02 17:00:00.

LANGUAGE: tsx
CODE:
const disabledDate = (date, info) => {
  if (info.type === 'date') {
    return date.isBefore('2024-01-01', 'day') || date.isAfter('2024-01-02', 'day');
  }
  return !date.isSame('2024-01-01', info.type);
};

const disabledTime = (date) => {
  if (date.isSame('2024-01-01', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour < 9),
    };
  }

  if (date.isSame('2024-01-02', 'day')) {
    return {
      disabledHours: () => Array.from({ length: 24 }, (_, i) => i).filter((hour) => hour > 17),
    };
  }

  return {};
};

----------------------------------------

TITLE: Defining Responsive Design Dimensions in Ant Design
DESCRIPTION: This snippet lists the six preset responsive dimensions used in Ant Design: xs, sm, md, lg, xl, and xxl. These dimensions are based on Bootstrap's responsive design approach and are used for creating responsive layouts.

LANGUAGE: Markdown
CODE:
## zh-CN

参照 Bootstrap 的 [响应式设计](http://getbootstrap.com/css/#grid-media-queries)，预设六个响应尺寸：`xs` `sm` `md` `lg` `xl` `xxl`.

## en-US

Referring to the Bootstrap [responsive design](http://getbootstrap.com/css/#grid-media-queries), here preset six dimensions: `xs` `sm` `md` `lg` `xl` `xxl`.

----------------------------------------

TITLE: Configuring showTotal in Ant Design Pagination (JSX)
DESCRIPTION: This snippet demonstrates how to use the showTotal prop in Ant Design's Pagination component to display the total number of data items. The showTotal prop allows customization of how the total count is presented.

LANGUAGE: JSX
CODE:
<Pagination
  total={85}
  showTotal={(total) => `Total ${total} items`}
/>

----------------------------------------

TITLE: Generating Static CSS for Ant Design
DESCRIPTION: Script to extract and generate static CSS files from Ant Design components, supporting custom themes and mixed theme configurations.

LANGUAGE: tsx
CODE:
import fs from 'fs';
import { extractStyle } from '@ant-design/static-style-extract';

const outputPath = './public/antd.min.css';

const css = extractStyle();

fs.writeFileSync(outputPath, css);

----------------------------------------

TITLE: Customizing Ant Design Notification Styles
DESCRIPTION: Shows how to customize notifications in Ant Design using style and className properties. This allows developers to apply custom CSS styles and class names to notification components for visual customization.



----------------------------------------

TITLE: Defining DisabledTime Type for DateTimePicker in TypeScript
DESCRIPTION: This code snippet defines the TypeScript type for the disabledTime function used in Ant Design's DateTimePicker component. It specifies the structure for disabling hours, minutes, seconds, and milliseconds based on selected time units.

LANGUAGE: tsx
CODE:
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};

----------------------------------------

TITLE: Comparing useLayoutEffect and useInsertionEffect Execution Order
DESCRIPTION: Demonstrates the execution order difference between useLayoutEffect and useInsertionEffect hooks in React 18, showing that useInsertionEffect runs before useLayoutEffect.

LANGUAGE: tsx
CODE:
useLayoutEffect(() => {
  console.log('layout effect');
}, []);

useInsertionEffect(() => {
  console.log('insertion effect');
}, []);

----------------------------------------

TITLE: Customizing Ant Design Theme
DESCRIPTION: Implementation of custom theming using Ant Design's ConfigProvider to modify the primary color of components.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, ConfigProvider } from 'antd';

export function Main() {
  return (
    <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
      <Button type="primary">Button</Button>
    </ConfigProvider>
  );
}

----------------------------------------

TITLE: Structuring Basic Layout in JSX
DESCRIPTION: Demonstrates the basic structure of a layout using the Layout, Header, Sider, Content, and Footer components. This snippet shows how to nest these components to create a complete page layout.

LANGUAGE: jsx
CODE:
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>

----------------------------------------

TITLE: Structuring Basic Layout in JSX
DESCRIPTION: Demonstrates the basic structure of a layout using the Layout, Header, Sider, Content, and Footer components. This snippet shows how to nest these components to create a complete page layout.

LANGUAGE: jsx
CODE:
<Layout>
  <Header>header</Header>
  <Layout>
    <Sider>left sidebar</Sider>
    <Content>main content</Content>
    <Sider>right sidebar</Sider>
  </Layout>
  <Footer>footer</Footer>
</Layout>

----------------------------------------

TITLE: Defining AnchorItem Interface
DESCRIPTION: TypeScript interface for individual anchor items that can be used in the items prop, supporting nested navigation structure.

LANGUAGE: typescript
CODE:
interface AnchorItem {
  key: string | number;
  href: string;
  target?: string;
  title: ReactNode;
  children?: AnchorItem[];
  replace?: boolean;
}

----------------------------------------

TITLE: Style Insertion Implementation with Counter
DESCRIPTION: Shows the initial implementation of style management using useMemo and useEffect for counting style usage and managing insertion/removal.

LANGUAGE: tsx
CODE:
function useStyleInsertion(hash: string, counter: Record<string, number>) {
  useMemo(() => {
    if (!counter[hash]) {
      // Insert only when current style not inserted
    }

    counter[hash] += 1;
  }, [hash]);

  useEffect(
    () => () => {
      counter[hash] -= 1;

      if (!counter[hash]) {
        // Remove if set to clear on destroy
      }
    },
    [hash],
  );
}

----------------------------------------

TITLE: Adding Status to Ant Design Input Components
DESCRIPTION: This snippet shows how to use the 'status' prop on Input components to indicate error or warning states. The status can be set to either 'error' or 'warning' to apply the appropriate visual styling.

LANGUAGE: JSX
CODE:
<Input status="error" />
<Input status="warning" />

----------------------------------------

TITLE: Implementing Extra Render for Row Spanning
DESCRIPTION: Example implementation of extraRender function that handles row spanning in virtual scroll by collecting rowSpan information for visible rows.

LANGUAGE: tsx
CODE:
const extraRender = ({ start, end }) => {
  // Start record
  const startRecord = flattenData[start];
  columns.forEach((col) => {
    // `rowSpan` === 0 means upper record has `rowSpan`
    const { rowSpan } = col.onCell(startRecord, start);
  });

  // End record
  const endRecord = flattenData[end];
  columns.forEach((col) => {
    // `rowSpan` > 1 means it should extend to next records
    const { rowSpan } = col.onCell(endRecord, end);
  });
};

----------------------------------------

TITLE: Implementing Asynchronous Close for Popconfirm in React
DESCRIPTION: This code snippet demonstrates how to import an example of a Popconfirm component with asynchronous closing functionality in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/async.tsx">Asynchronously close</code>

----------------------------------------

TITLE: Element Offset Calculation Function
DESCRIPTION: Utility function from rc-dialog that retrieves element position coordinates using getBoundingClientRect.

LANGUAGE: tsx
CODE:
// pseudocode
function offset(el: Element) {
  const { left, top } = el.getBoundingClientRect();
  return { left, top };
}

----------------------------------------

TITLE: Suspense Route Implementation
DESCRIPTION: Shows how Suspense is implemented with browser routes for page loading states.

LANGUAGE: tsx
CODE:
<BrowserRoutes>
  <Routs>
    <Suspense fallback={<Loading />} />
  </Routs>
</BrowserRoutes>

----------------------------------------

TITLE: Portal DOM Append Implementation
DESCRIPTION: Implementation showing how rc-portal handles DOM node creation and appending, including queue mechanism for nested portals.

LANGUAGE: tsx
CODE:
// pseudocode
function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
}

useLayoutEffect(() => {
  if (queueCreate) {
    queueCreate(append);
  } else {
    append();
  }
}, []);

----------------------------------------

TITLE: Installing Ant Design with Package Managers
DESCRIPTION: Commands to install the Ant Design library using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
$ npm install antd --save

LANGUAGE: bash
CODE:
$ yarn add antd

LANGUAGE: bash
CODE:
$ pnpm install antd --save

LANGUAGE: bash
CODE:
$ bun add antd

----------------------------------------

TITLE: Controlling QR Code Status in Ant Design
DESCRIPTION: The QR code component in Ant Design allows status control through the 'status' prop. It supports four different states: 'active', 'expired', 'loading', and 'scanned'. This enables developers to represent various stages of QR code interaction within their application.

LANGUAGE: markdown
CODE:
## zh-CN

可以通过 `status` 的值控制二维码的状态，提供了 `active`、`expired`、`loading`、`scanned` 四个值。

## en-US

The status can be controlled by the value `status`, four values ​​of `active`, `expired`, `loading`, `scanned` are provided.

----------------------------------------

TITLE: Tag Component API Properties
DESCRIPTION: Defines the API properties available for the Tag component including closeIcon, color, icon, bordered, and onClose event handler.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | ReactNode | false | 4.4.0 |
| color | Color of the Tag | string | - |  |
| icon | Set the icon of tag | ReactNode | - |  |
| bordered | Whether has border style | boolean | true | 5.4.0 |
| onClose | Callback executed when tag is closed | (e: React.MouseEvent<HTMLElement, MouseEvent>) => void | - |  |

----------------------------------------

TITLE: Configuring Form Validation Messages in ConfigProvider (TSX)
DESCRIPTION: Demonstrates how to set custom validation messages for Form components using ConfigProvider in ant-design.

LANGUAGE: tsx
CODE:
<ConfigProvider form={{ validateMessages }} />

----------------------------------------

TITLE: Using Theme-Based Icons in React
DESCRIPTION: Demonstrates how to import and use different themed icons from @ant-design/icons package.

LANGUAGE: jsx
CODE:
import { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';

<StarOutlined />
<StarFilled />
<StarTwoTone twoToneColor="#eb2f96" />

----------------------------------------

TITLE: Styling Graduated Slider Demo in CSS
DESCRIPTION: This CSS snippet provides custom styling for the graduated slider demo. It sets margins for headings and bottom margin for sliders with marks.

LANGUAGE: css
CODE:
#slider-demo-mark h4 {
  margin: 0 0 16px;
}
#slider-demo-mark .ant-slider-with-marks {
  margin-bottom: 44px;
}

----------------------------------------

TITLE: Specifying @layer for Ant Design's reset.css
DESCRIPTION: This CSS snippet demonstrates how to specify the @layer for Ant Design's reset.css to prevent style conflicts and ensure proper integration with other styles.

LANGUAGE: less
CODE:
@layer reset, antd;

@import url(reset.css) layer(reset);

----------------------------------------

TITLE: Configuring Range Picker Type Documentation
DESCRIPTION: Documentation showing how to use the picker property to specify the range picker type in both Chinese and English languages.

LANGUAGE: markdown
CODE:
## zh-CN

通过设置 `picker` 属性，指定范围选择器类型。

## en-US

Set range picker type by `picker` prop.

----------------------------------------

TITLE: Installing Dependencies for Ant Design Development
DESCRIPTION: Commands to install project dependencies using npm or yarn package managers.

LANGUAGE: bash
CODE:
$ npm install

LANGUAGE: bash
CODE:
$ yarn

----------------------------------------

TITLE: Setting Locale for Calendar Component in React
DESCRIPTION: This snippet demonstrates how to set the locale for the Calendar component globally using dayjs. It shows the basic usage of the Calendar component with cellRender, onPanelChange, and onSelect props.

LANGUAGE: jsx
CODE:
// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.
// import dayjs from 'dayjs';
// import 'dayjs/locale/zh-cn';
// dayjs.locale('zh-cn');

<Calendar cellRender={cellRender} onPanelChange={onPanelChange} onSelect={onSelect} />

----------------------------------------

TITLE: Configuring Warning Filter in Ant Design
DESCRIPTION: Shows how to use ConfigProvider to aggregate deprecation warnings, making them more manageable while preserving important usage warnings.

LANGUAGE: tsx
CODE:
<ConfigProvider warning={{ strict: false }} />

----------------------------------------

TITLE: Build Process Log Output
DESCRIPTION: CI build log showing the sequence of gulp tasks and the CSS syntax error occurring during the build2xCSS task.

LANGUAGE: log
CODE:
[09:44:16] Using gulpfile ~/work/ant-design-mobile/ant-design-mobile/gulpfile.js
[09:44:16] Starting 'default'...
[09:44:16] Starting 'clean'...
[09:44:17] Finished 'clean' after 286 ms
[09:44:17] Starting 'buildES'...
[09:44:26] Finished 'buildES' after 8.77 s
[09:44:26] Starting 'buildCJS'...
[09:44:27] Finished 'buildCJS' after 1.72 s
[09:44:27] Starting 'buildDeclaration'...
[09:44:27] Starting 'buildStyle'...
[09:44:28] Finished 'buildStyle' after 682 ms
[09:44:34] Finished 'buildDeclaration' after 6.5 s
[09:44:34] Starting 'copyAssets'...
[09:44:34] Finished 'copyAssets' after 2.37 ms
[09:44:34] Starting 'copyMetaFiles'...
[09:44:34] Finished 'copyMetaFiles' after 4.64 ms
[09:44:34] Starting 'generatePackageJSON'...
[09:44:34] Finished 'generatePackageJSON' after 2.72 ms
[09:44:34] Starting 'buildBundles'...
[09:44:45] Finished 'buildBundles' after 11 s
[09:44:45] Starting 'init2xFolder'...
[09:44:46] Finished 'init2xFolder' after 811 ms
[09:44:46] Starting 'build2xCSS'...
[09:44:46] 'build2xCSS' errored after 126 ms
[09:44:46] CssSyntaxError in plugin "gulp-postcss"

----------------------------------------

TITLE: Importing Popover Examples in TypeScript
DESCRIPTION: These code snippets demonstrate how to import and use various Popover examples in a React application using ant-design. Each example showcases different features and use cases of the Popover component.

LANGUAGE: TypeScript
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/triggerType.tsx">Three ways to trigger</code>
<code src="./demo/placement.tsx">Placement</code>
<code src="./demo/arrow.tsx">Arrow</code>
<code src="./demo/arrow-point-at-center.tsx" debug>Arrow.pointAtCenter</code>
<code src="./demo/shift.tsx" iframe="300">Auto Shift</code>
<code src="./demo/control.tsx">Controlling the close of the dialog</code>
<code src="./demo/hover-with-click.tsx">Hover with click popover</code>
<code src="./demo/render-panel.tsx" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>
<code src="./demo/wireframe.tsx" debug>Wireframe</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Running Ant Design Website Locally
DESCRIPTION: Commands to start the Ant Design website locally for development purposes.

LANGUAGE: Shell
CODE:
$ npm start

LANGUAGE: Shell
CODE:
$ yarn start

----------------------------------------

TITLE: Disabling Buttons in Ant Design Components
DESCRIPTION: Shows how to add the disabled property to Button components to make them non-interactive. When disabled, the button's visual appearance changes to indicate its inactive state.

LANGUAGE: markdown
CODE:
## zh-CN

添加 `disabled` 属性即可让按钮处于不可用状态，同时按钮样式也会改变。

## en-US

To mark a button as disabled, add the `disabled` property to the `Button`.

----------------------------------------

TITLE: Defining Typography Line Wrap Documentation in Markdown
DESCRIPTION: Multi-language documentation headers for demonstrating automatic line wrapping functionality in both Chinese and English languages.

LANGUAGE: markdown
CODE:
## zh-CN

自动换行。

## en-US

Auto wrap line.

----------------------------------------

TITLE: Controlling Card Display Documentation
DESCRIPTION: Markdown documentation showing how to use the open property to control card visibility in Ant Design. The open prop allows programmatic control of whether the card's floating layer is displayed.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `open` 属性控制浮层显示。

## en-US

Use `open` prop to control the display of the card.

----------------------------------------

TITLE: Configuring ProLayout in Umi
DESCRIPTION: Implementation of ProLayout for a standard admin interface layout in Umi.

LANGUAGE: tsx
CODE:
import { ProLayout } from '@ant-design/pro-components';
import { Link, Outlet, useAppData, useLocation } from 'umi';

export default function Layout() {
  const { clientRoutes } = useAppData();
  const location = useLocation();
  return (
    <ProLayout
      route={clientRoutes[0]}
      location={location}
      title="Umi x Ant Design"
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            <Link to={menuItemProps.path} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
    >
      <Outlet />
    </ProLayout>
  );
}

----------------------------------------

TITLE: Basic Ant Design Button Implementation
DESCRIPTION: Example of importing and using an Ant Design Button component in a React component with Farm.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

export function Main() {
  return (
    <div>
      <Button type="primary">Button</Button>
    </div>
  );
}

----------------------------------------

TITLE: Defining Multi-language Input Component Headers
DESCRIPTION: Markdown headers defining the component documentation in both Chinese (zh-CN) and English (en-US) languages. The component is described as a custom input component implementation.

LANGUAGE: markdown
CODE:
## zh-CN

自定义输入组件。

## en-US

Customize Input Component

----------------------------------------

TITLE: Basic HTML Structure for Design Principles Cards
DESCRIPTION: HTML markup for displaying design principles in a card-based layout with images and descriptions for Direct, Clear hierarchy, and Concise principles.

LANGUAGE: html
CODE:
<div class="design-inline-cards">
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*3CfhSZLxsIEAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>Direct</h4>
      <p>Try to display the information as flat as possible. Do not hide or fold up the content if not necessary.</p>
    </div>
  </div>
  <!-- Additional card structures omitted for brevity -->
</div>

----------------------------------------

TITLE: Using Timeline Component with Items Prop in React
DESCRIPTION: Demonstrates the recommended usage of the Timeline component with the items prop for better performance. This approach is available in version 5.2.0 and later.

LANGUAGE: jsx
CODE:
const items = [{ children: 'sample', label: 'sample' }];
return <Timeline items={items} />;

----------------------------------------

TITLE: Using Timeline Component with Items Prop in React
DESCRIPTION: Demonstrates the recommended usage of the Timeline component with the items prop for better performance. This approach is available in version 5.2.0 and later.

LANGUAGE: jsx
CODE:
const items = [{ children: 'sample', label: 'sample' }];
return <Timeline items={items} />;

----------------------------------------

TITLE: Style Registration with Inline Styles
DESCRIPTION: Example of style registration using inline styles from SSR

LANGUAGE: tsx
CODE:
// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", "READ_FROM_INLINE_STYLE"],
  "bAMbOo|Spin": ["liGHt", "READ_FROM_INLINE_STYLE"]
}

----------------------------------------

TITLE: Installing Refine with Ant Design Preset
DESCRIPTION: CLI commands to create a new Refine project with the Ant Design preset using different package managers.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm run dev

----------------------------------------

TITLE: Documenting Slider onChange and onChangeComplete Events in Chinese
DESCRIPTION: Explains when the onChange event is triggered and what parameters are passed. Also describes when the onChangeComplete event is fired and its parameters.

LANGUAGE: Markdown
CODE:
## zh-CN

当 Slider 的值发生改变时，会触发 `onChange` 事件，并把改变后的值作为参数传入。在 `mouseup` 或者 `keyup` 时，会触发 `onChangeComplete` 事件，并把当前值作为参数传入。

----------------------------------------

TITLE: Configuring Dashboard-Style Progress Bar in ant-design
DESCRIPTION: Explains how to create a dashboard-style progress bar using ant-design components. It details setting the 'type' property to 'dashboard' and adjusting the 'gapDegree' property to modify the angle of the gap.

LANGUAGE: Markdown
CODE:
## zh-CN

通过设置 `type=dashboard`，可以很方便地实现仪表盘样式的进度条。若想要修改缺口的角度，可以设置 `gapDegree` 为你想要的值。

## en-US

By setting `type=dashboard`, you can get a dashboard style of progress easily. Modify `gapDegree` to set the degree of gap.

----------------------------------------

TITLE: Component Structure for Ant Design Documentation
DESCRIPTION: Front matter and structure for a design pattern documentation page in the Ant Design system, defining the group, type, order and title.

LANGUAGE: markdown
CODE:
---
group: Design Patterns
type: Principles
order: 6
title: Stay on the Page
---

----------------------------------------

TITLE: Exporting Custom Date Components in TypeScript
DESCRIPTION: Exports the custom Calendar, DatePicker, and TimePicker components from a single file for easy importing in other parts of the application.

LANGUAGE: TypeScript
CODE:
export { default as Calendar } from './Calendar';
export { default as DatePicker } from './DatePicker';
export { default as TimePicker } from './TimePicker';

----------------------------------------

TITLE: Installing Rsbuild with Package Managers
DESCRIPTION: Commands to create a new Rsbuild project using npm, yarn, pnpm, or bun. The user should choose the React template during initialization.

LANGUAGE: bash
CODE:
$ npm create rsbuild

LANGUAGE: bash
CODE:
$ yarn create rsbuild

LANGUAGE: bash
CODE:
$ pnpm create rsbuild

LANGUAGE: bash
CODE:
$ bun create rsbuild

----------------------------------------

TITLE: Nesting ConfigProvider Components in React
DESCRIPTION: Demonstrates how to nest ConfigProvider components to create different themes for different parts of the application. This example shows the potential issue with hash calculation when using CSS variables.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ token: { colorPrimary: 'blue' } }}>
  <Button>Button 1</Button>
  <ConfigProvider theme={{ token: { colorPrimary: 'green' } }}>
    <Button>Button 2</Button>
  </ConfigProvider>
</ConfigProvider>

----------------------------------------

TITLE: Installing Refine with Ant Design preset using npm
DESCRIPTION: Command to create a new Refine project with Ant Design preset using npm. This setup eliminates the need for additional dependencies and adds example pages built with Ant Design for quick start.

LANGUAGE: bash
CODE:
$ npm create refine-app@latest -- --preset refine-antd

----------------------------------------

TITLE: Vertical Splitter Layout in React
DESCRIPTION: This code snippet demonstrates how to use the Splitter component with a vertical layout, dividing areas top to bottom.

LANGUAGE: jsx
CODE:
<code src="./demo/vertical.tsx">垂直方向</code>

----------------------------------------

TITLE: Adding pnpm Cache to GitHub Actions Workflow
DESCRIPTION: YAML configuration snippet for adding pnpm caching to a GitHub Actions workflow to speed up dependency installation.

LANGUAGE: yaml
CODE:
- name: create pnpm-lock.yaml (创建 pnpm-lock.yaml)
  run: pnpm install --frozen-lockfile --ignore-scripts

- name: Get pnpm store directory (获取 pnpm store 目录)
  id: pnpm-cache
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

- name: Setup pnpm cache (设置 pnpm 缓存)
  uses: actions/cache@v4
  with:
    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      ${{ runner.os }}-pnpm-store-

----------------------------------------

TITLE: Updating Umi Configuration for New Route
DESCRIPTION: Diff showing how to add a new route to the Umi configuration file.

LANGUAGE: diff
CODE:
import { defineConfig } from "umi";

export default defineConfig({
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
+    { path: "/products", component: "products" },
  ],
  npmClient: "pnpm",
});

----------------------------------------

TITLE: Styling Tree Search Value Highlighting in CSS
DESCRIPTION: Defines the text color styling for highlighted search values within a tree component. Sets the color to a bright orange (#f50) to make searched terms visually stand out.

LANGUAGE: css
CODE:
.site-tree-search-value {
  color: #f50;
}

----------------------------------------

TITLE: Setting Space Size in TypeScript
DESCRIPTION: Demonstration of configuring different sizes for the Space component in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/size.tsx">Space Size</code>

----------------------------------------

TITLE: Manual Style Collection with StyleProvider
DESCRIPTION: Shows how to manually collect and extract styles using StyleProvider and cache in SSR context. This approach provides more control over style injection.

LANGUAGE: tsx
CODE:
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { renderToString } from 'react-dom/server';

const cache = createCache();

// HTML Content
const html = renderToString(
  <StyleProvider cache={cache}>
    <MyApp />
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);

----------------------------------------

TITLE: Initialize Next.js Project
DESCRIPTION: Command to create a new Next.js project using package managers like npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
$ cd antd-demo
$ npm run dev

----------------------------------------

TITLE: Initializing Umi Project with pnpm
DESCRIPTION: Commands to create a new Umi project directory and initialize it using pnpm.

LANGUAGE: bash
CODE:
$ mkdir myapp && cd myapp
$ pnpm create umi

----------------------------------------

TITLE: AutoComplete Methods Reference
DESCRIPTION: Table listing available methods for the AutoComplete component, including blur() and focus() functions.

LANGUAGE: markdown
CODE:
| 名称    | 描述     | 版本 |
| ------- | -------- | ---- |
| blur()  | 移除焦点 |      |
| focus() | 获取焦点 |      |

----------------------------------------

TITLE: Implementing Ant Design Button Component in React
DESCRIPTION: Example of importing and using an Ant Design Button component in a React application. Shows basic component integration with minimal setup.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button } from 'antd';

const App = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;

----------------------------------------

TITLE: Documenting RangePicker Empty State Feature
DESCRIPTION: Bilingual documentation explaining the empty state feature in RangePicker component. Describes how users can leave date fields empty, which is particularly useful for scenarios requiring an open-ended 'to date' field in date range selections.

LANGUAGE: markdown
CODE:
## zh-CN

在范围选择时，可以允许留空。这对于需要保留"至今"日期项颇为有用。

## en-US

Allow empty for the RangePicker. It's useful when you need to keep the "to date".

----------------------------------------

TITLE: Markdown Table for Ant Design Tooltip, Popconfirm, and Popover API Properties
DESCRIPTION: This snippet contains a Markdown table listing shared API properties for Tooltip, Popconfirm, and Popover components. It includes parameter names, descriptions, types, default values, and version information.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| align | 该值将合并到 placement 的配置中，设置参考 [dom-align](https://github.com/yiminghe/dom-align) | object | - |  |
| arrow | 修改箭头的显示状态以及修改箭头是否指向目标元素中心 | boolean \| { pointAtCenter: boolean } | true | 5.2.0 |
| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | boolean | true |  |
| color | 背景颜色 | string | - | 4.3.0 |
| defaultOpen | 默认是否显隐 | boolean | false | 4.23.0 |
| destroyTooltipOnHide | 关闭后是否销毁 Tooltip | boolean | false |  |
| fresh | 默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新 | boolean | false | 5.10.0 |
| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |
| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0.1 |  |
| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |  |
| ~~overlayClassName~~ | 卡片类名, 请使用 `classNames={{ root: '' }}` 替换 | string | - |  |
| ~~overlayStyle~~ | 卡片样式, 请使用 `styles={{ root: {} }}` 替换| React.CSSProperties | - |  |
| ~~overlayInnerStyle~~ | 卡片内容区域的样式对象, 请使用 `styles={{ body: {} }}` 替换 | React.CSSProperties | - |  |
| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |
| trigger | 触发行为，可选 `hover` \| `focus` \| `click` \| `contextMenu`，可使用数组设置多个触发行为 | string \| string\[] | `hover` |  |
| open | 用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | false | 4.23.0 |
| zIndex | 设置 Tooltip 的 `z-index` | number | - |  |
| onOpenChange | 显示隐藏的回调 | (open: boolean) => void | - | 4.23.0 |

----------------------------------------

TITLE: Implementing Year Range Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific year range in the DatePicker component.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-year-range.tsx" description="用于年范围的选择。">选择某年至某年</code>

----------------------------------------

TITLE: Tree Node Drag and Drop Description - Multilingual
DESCRIPTION: Multilingual description of tree node drag and drop functionality, explaining that nodes can be dragged to insert after other nodes or into other parent nodes.

LANGUAGE: markdown
CODE:
## zh-CN

将节点拖拽到其他节点内部或前后。

## en-US

Drag treeNode to insert after the other treeNode or insert into the other parent TreeNode.

----------------------------------------

TITLE: Total Count Pagination - TSX
DESCRIPTION: Displays total data count for quick understanding of dataset size. Commonly used in table data statistics.

LANGUAGE: tsx
CODE:
./design/demo/total

----------------------------------------

TITLE: Markdown Configuration for Page Metadata
DESCRIPTION: Frontmatter configuration that defines page grouping, ordering and title for the Ant Design pattern exploration section.

LANGUAGE: markdown
CODE:
---
group:
  title: 设计模式 - 探索
  order: 3
order: 0
title: 概览
---

----------------------------------------

TITLE: InputNumber Ref Methods
DESCRIPTION: Documentation of the available ref methods for the InputNumber component, including blur(), focus(), and nativeElement access.

LANGUAGE: markdown
CODE:
| Name | Description | Type | Version |
| --- | --- | --- | --- |
| blur() | Remove focus | - |  |
| focus() | Get focus | (option?: { preventScroll?: boolean, cursor?: 'start' \| 'end' \| 'all' }) | cursor - 5.22.0 |
| nativeElement | The native DOM element | - | 5.17.3 |

----------------------------------------

TITLE: Implementing Text Divider in ant-design
DESCRIPTION: Shows how to create a horizontal divider that can contain text content. The divider is horizontal by default and allows for text to be placed in its center.

LANGUAGE: jsx
CODE:
import { Divider } from 'antd';

ReactDOM.render(
  <>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider>Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider orientation="left">Left Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
    <Divider orientation="right">Right Text</Divider>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nonne merninisti licere mihi ista probare, quae sunt a te dicta? Refert tamen, quo modo.</p>
  </>,
  mountNode,
);

----------------------------------------

TITLE: Styling Autocomplete Component in Ant Design (CSS)
DESCRIPTION: This CSS snippet provides additional styling for the Autocomplete component demo. It sets a minimum height for the container to ensure proper display of the upward-expanding suggestions.

LANGUAGE: CSS
CODE:
#components-auto-complete-demo-placement .ant-row-rtl .global-search-wrapper {
  direction: rtl;
}

#components-auto-complete-demo-placement {
  min-height: 400px;
}

----------------------------------------

TITLE: Defining YAML Frontmatter for Ant Design Documentation
DESCRIPTION: YAML frontmatter used to define metadata for the design patterns overview page in Ant Design documentation. It specifies the group title, order, and page title.

LANGUAGE: yaml
CODE:
---
group:
  title: Design Patterns
  order: 2
order: 0
title: Overview
---

----------------------------------------

TITLE: Customizing Dropdown Option Rendering with optionRender in Ant Design (JSX)
DESCRIPTION: This snippet demonstrates how to use the optionRender prop to customize the rendering of dropdown options in Ant Design components. It allows for greater flexibility in styling and structuring the options displayed in dropdowns.

LANGUAGE: jsx
CODE:
import { Select, Space } from 'antd';

const { Option } = Select;

const handleChange = (value) => {
  console.log(`selected ${value}`);
};

const App = () => (
  <Space wrap>
    <Select
      defaultValue="lucy"
      style={{
        width: 120,
      }}
      onChange={handleChange}
      optionRender={(option) => (
        <Space>
          <span role="img" aria-label={option.data.label}>
            {option.data.emoji}
          </span>
          {option.data.desc}
        </Space>
      )}
      options={[
        {
          value: 'jack',
          label: 'Jack',
          emoji: '🇺🇸',
          desc: 'USA',
        },
        {
          value: 'lucy',
          label: 'Lucy',
          emoji: '🇬🇧',
          desc: 'UK',
        },
        {
          value: 'disabled',
          label: 'Disabled',
          emoji: '🇨🇳',
          desc: 'China',
          disabled: true,
        },
        {
          value: 'yiminghe',
          label: 'Yiminghe',
          emoji: '🇯🇵',
          desc: 'Japan',
        },
      ]}
    />
  </Space>
);

export default App;

----------------------------------------

TITLE: Removing Modal Mask in Ant Design (JSX)
DESCRIPTION: This snippet demonstrates how to configure a Modal component in Ant Design to remove the default mask overlay. It uses the `mask={false}` prop to disable the mask.

LANGUAGE: JSX
CODE:
<Modal mask={false} />

----------------------------------------

TITLE: Defining Card Structure in Ant Design
DESCRIPTION: Describes the basic structure of an Ant Design Card component, including title, content, and action areas. It also mentions support for two sizes: default and small.

LANGUAGE: Markdown
CODE:
## zh-CN

包含标题、内容、操作区域。

## en-US

A basic card containing a title, content and an extra corner content. Supports two sizes: `default` and `small`.

----------------------------------------

TITLE: Using App Component in Ant Design v5
DESCRIPTION: This snippet demonstrates the usage of the App component introduced in Ant Design v5, which provides a centralized way to handle context for Modal, message, and notification components.

LANGUAGE: tsx
CODE:
const Demo = () => {
  const { message } = App.useApp();

  React.useEffect(() => {
    message.success('Hello World');
  }, []);

  // ...
};

----------------------------------------

TITLE: Implementing Week Range Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific week range in the DatePicker component.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-week-range.tsx" description="用于周范围的选择。">选择某周至某周</code>

----------------------------------------

TITLE: Using Typography.Text Ellipsis in Form Labels
DESCRIPTION: Shows how to implement text truncation with ellipsis in form labels using Ant Design's Typography.Text component. The ellipsis property should properly display '...' when text overflows.

LANGUAGE: markdown
CODE:
## zh-CN

`label` 中使用 `<Typography.Text ellipsis>` 时应该显示 `...`。

## en-US

Use `<Typography.Text ellipsis>` in label should show `...`.

----------------------------------------

TITLE: Configuring filterSearch in Ant Design Components
DESCRIPTION: Demonstrates how to use the filterSearch property to enable searching of filter items. It allows setting a custom filter method using a function that takes input and record parameters and returns a boolean value.

LANGUAGE: jsx
CODE:
filterSearch: (input, record) => boolean

----------------------------------------

TITLE: Configuring filterSearch in Ant Design Components
DESCRIPTION: Demonstrates how to use the filterSearch property to enable searching of filter items. It allows setting a custom filter method using a function that takes input and record parameters and returns a boolean value.

LANGUAGE: jsx
CODE:
filterSearch: (input, record) => boolean

----------------------------------------

TITLE: Form DOM Structure Changes Overview
DESCRIPTION: Outlines three major changes to the Form component: className relocation to top level, removal of wrapper div, and status class prefix addition

LANGUAGE: markdown
CODE:
# Form Dom 变化

- 状态 className 现在移动到顶层，不再是 input only
- 去除 `ant-form-item-control-wrapper` 一层 div
- `.has-success` 等状态样式添加 `ant-form-item` 前缀

----------------------------------------

TITLE: Styling Basic BackTop Component in CSS for Ant Design
DESCRIPTION: This CSS snippet defines the color for a basic BackTop component in Ant Design. It sets the color to a semi-transparent dark gray, providing a subtle appearance for the back-to-top button.

LANGUAGE: css
CODE:
.site-back-top-basic {
  color: rgba(64, 64, 64, 0.6);
}

----------------------------------------

TITLE: Styling Mini Pagination Components in CSS
DESCRIPTION: This CSS snippet adds custom styling to mini pagination components in Ant Design. It sets a bottom margin for all pagination elements except the last one, improving visual separation.

LANGUAGE: CSS
CODE:
#pagination-demo-mini .ant-pagination:not(:last-child) {
  margin-bottom: 24px;
}

----------------------------------------

TITLE: Implementing PopupWrapper with getContainer in React
DESCRIPTION: This snippet demonstrates a basic implementation of a PopupWrapper component that uses getContainer to determine where to render its content. It uses React hooks to manage the container element.

LANGUAGE: tsx
CODE:
// Fake Code. Just for Demo
const PopupWrapper = () => {
  const eleRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    // It's much complex with timing in real world. You can view the source for more detail:
    // https://github.com/react-component/portal/blob/master/src/Portal.tsx
    const container: HTMLElement = getContainer(eleRef.current);

    // ...
  }, []);

  return (
    <div ref={eleRef}>
      {...}
    </div>
  );
}

----------------------------------------

TITLE: Configuring Custom Icons in Ant Design Components
DESCRIPTION: Shows how to use the prefix and suffixIcon properties to customize component icons. prefix allows setting a custom prefix while suffixIcon enables custom suffix icon configuration.

LANGUAGE: markdown
CODE:
## zh-CN

自定义前缀 `prefix` 和后缀图标 `suffixIcon`。

## en-US

Custom `prefix` and `suffixIcon`.

----------------------------------------

TITLE: Enabling Virtual Scrolling in Ant Design Table
DESCRIPTION: Basic usage example showing how to enable virtual scrolling in Table component with scroll configuration for both horizontal and vertical directions.

LANGUAGE: tsx
CODE:
<Table virtual scroll={{ x: 2000, y: 500 }} {...otherProps} />

----------------------------------------

TITLE: Dialog Content Position Calculation
DESCRIPTION: Pseudocode showing how rc-dialog calculates modal position based on mouse coordinates and element offset.

LANGUAGE: tsx
CODE:
// pseudocode
const elementOffset = offset(dialogElement);
const transformOrigin = `${mousePosition.x - elementOffset.left}px ${
  mousePosition.y - elementOffset.top
}px`;

----------------------------------------

TITLE: Space.Compact Component Documentation - English
DESCRIPTION: English language documentation for Space.Compact component, explaining how to create compact style layouts with a reference link to detailed documentation.

LANGUAGE: markdown
CODE:
## en-US

Use `Space.Compact` create compact style, See the [Space.Compact](/components/space#spacecompact) documentation for more.

----------------------------------------

TITLE: Documenting QR Code Download Feature
DESCRIPTION: Bilingual markdown documentation explaining the QR code download functionality in both Chinese (zh-CN) and English languages.

LANGUAGE: markdown
CODE:
## zh-CN

下载二维码的简单实现。

## en-US

A way to download QRCode.

----------------------------------------

TITLE: Using Promise for Asynchronous Close in Popconfirm
DESCRIPTION: This code snippet shows how to import an example of a Popconfirm component that uses a Promise for asynchronous closing in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/promise.tsx">Asynchronously close on Promise</code>

----------------------------------------

TITLE: Breakpoint Width Configuration - JavaScript
DESCRIPTION: Defines responsive breakpoint width values for different screen sizes used in the Layout.Sider component.

LANGUAGE: js
CODE:
{
  xs: '480px',
  sm: '576px',
  md: '768px',
  lg: '992px',
  xl: '1200px',
  xxl: '1600px',
}

----------------------------------------

TITLE: Configuring autoInsertSpace Property in ant-design
DESCRIPTION: This code snippet demonstrates how to disable the automatic insertion of spaces between Chinese characters in ant-design by setting the 'autoInsertSpace' property to false.

LANGUAGE: Markdown
CODE:
## zh-CN

我们默认在两个汉字之间添加空格，可以通过设置 `autoInsertSpace` 为 `false` 关闭。

## en-US

We add a space between two Chinese characters by default, which can be removed by setting `autoInsertSpace` to `false`.

----------------------------------------

TITLE: Initializing Pagination Component in JSX
DESCRIPTION: Basic usage of the Pagination component with onChange handler and total prop. This snippet demonstrates how to set up a simple pagination control.

LANGUAGE: jsx
CODE:
<Pagination onChange={onChange} total={50} />

----------------------------------------

TITLE: Documenting Progress Bar Value Position Options in Ant Design
DESCRIPTION: Explains how to use the 'percentPosition' prop to adjust the position of the progress value in Ant Design progress bars. It can be set to display the value inside, outside, or at the bottom of the progress bar.

LANGUAGE: markdown
CODE:
## zh-CN

改变进度数值位置，可使用 `percentPosition` 调整，使进度条数值在进度条内部、外部或底部。

## en-US

Change the position of the progress value, you can use `percentPosition` to adjust it so that the progress bar value is inside, outside or at the bottom of the progress bar.

----------------------------------------

TITLE: Pasting Tag Values in Ant Design Select
DESCRIPTION: Explains how to paste comma-separated values like 'Lucy,Jack' into a Select component when using tags or multiple selection modes. The functionality allows converting pasted text into individual tag selections.

LANGUAGE: markdown
CODE:
## zh-CN

试下复制 `露西,杰克` 并粘贴到输入框里。只在 tags 和 multiple 模式下可用。

## en-US

Try to copy `Lucy,Jack` and paste to the input. Only available in tags and multiple mode.

----------------------------------------

TITLE: Configuring Tooltip Placement in Ant Design
DESCRIPTION: Demonstrates how to set up tooltip placement in Ant Design. It mentions that there are 12 placement options available and shows how to make the arrow point at the center of the target element using the 'arrow' property.

LANGUAGE: markdown
CODE:
## zh-CN

位置有十二个方向。如需箭头指向目标元素中心，可以设置 `arrow: { pointAtCenter: true }`。

## en-US

There are 12 `placement` options available. Use `arrow: { pointAtCenter: true }` if you want the arrow to point at the center of target.

----------------------------------------

TITLE: Integrating Breadcrumb with React Router
DESCRIPTION: Demonstrates how to integrate the Breadcrumb component with React Router using browserHistory and custom itemRender function.

LANGUAGE: jsx
CODE:
import { Link } from 'react-router';

const items = [
  {
    path: '/index',
    title: 'home',
  },
  {
    path: '/first',
    title: 'first',
    children: [
      {
        path: '/general',
        title: 'General',
      },
      {
        path: '/layout',
        title: 'Layout',
      },
      {
        path: '/navigation',
        title: 'Navigation',
      },
    ],
  },
  {
    path: '/second',
    title: 'second',
  },
];

function itemRender(currentRoute, params, items, paths) {
  const isLast = currentRoute?.path === items[items.length - 1]?.path;

  return isLast ? (
    <span>{currentRoute.title}</span>
  ) : (
    <Link to={`/${paths.join("/")}`}>{currentRoute.title}</Link>
  );
}

return <Breadcrumb itemRender={itemRender} items={items} />;

----------------------------------------

TITLE: Demonstrating Breadcrumb Behavior Pattern in React
DESCRIPTION: This code snippet illustrates the behavior pattern of the Breadcrumb component. It likely shows how the component responds to user interactions and updates accordingly.

LANGUAGE: tsx
CODE:
src="./design/behavior-pattern.tsx"

----------------------------------------

TITLE: Configuring maxCount Selection Limit in Ant Design
DESCRIPTION: Demonstrates how to use the maxCount property to limit the number of items that can be selected. When the maximum count is reached, remaining unselected options become disabled automatically.



----------------------------------------

TITLE: Implementing unstableSetRender for React 19 Compatibility in JavaScript
DESCRIPTION: This code demonstrates how to use the unstableSetRender method to modify the rendering method of ReactDOM, allowing Ant Design v5 to work with React 19. This approach is recommended for special scenarios like umd or micro-applications.

LANGUAGE: js
CODE:
import { unstableSetRender } from 'antd';
import { createRoot } from 'react-dom/client';

unstableSetRender((node, container) => {
  container._reactRoot ||= createRoot(container);
  const root = container._reactRoot;
  root.render(node);
  return async () => {
    await new Promise((resolve) => setTimeout(resolve, 0));
    root.unmount();
  };
});

----------------------------------------

TITLE: Implementing Multi-Page Pagination with Ant Design in React
DESCRIPTION: This code snippet demonstrates how to create a pagination component with more pages using Ant Design in a React application. It showcases the basic usage of the Pagination component.

LANGUAGE: JSX
CODE:
import { Pagination } from 'antd';
import React from 'react';

const App: React.FC = () => <Pagination defaultCurrent={6} total={500} />;

export default App;

----------------------------------------

TITLE: Documenting Slider onChange and onChangeComplete Events in English
DESCRIPTION: Describes when the onChange callback function is fired and what it receives as a parameter. Also explains when the onChangeComplete callback function is triggered.

LANGUAGE: Markdown
CODE:
## en-US

The `onChange` callback function will fire when the user changes the slider's value. The `onChangeComplete` callback function will fire when `mouseup` or `keyup` fired.

----------------------------------------

TITLE: Creating Dashboard-style Progress in TypeScript
DESCRIPTION: Code snippet demonstrating how to create a dashboard-style progress indicator using the Progress component in TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/dashboard.tsx">仪表盘</code>

----------------------------------------

TITLE: Adjustable Page Size Pagination - TSX
DESCRIPTION: Allows users to adjust the number of items displayed per page based on their needs.

LANGUAGE: tsx
CODE:
./design/demo/page-size

----------------------------------------

TITLE: Semantic DOM Structure Example in TypeScript
DESCRIPTION: Example showing the semantic DOM structure of the Slider component with default implementation

LANGUAGE: typescript
CODE:
<code src="./demo/_semantic.tsx" simplify="true"></code>

----------------------------------------

TITLE: Implementing Ant Design Button Component
DESCRIPTION: Example React component implementation showing how to import and use an Ant Design Button component in a basic App component.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button } from 'antd';

const App = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;

----------------------------------------

TITLE: Initializing TimePicker with dayjs
DESCRIPTION: Example showing how to initialize a TimePicker component with a default value using dayjs library. Demonstrates importing required dependencies and basic usage.

LANGUAGE: jsx
CODE:
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat'

dayjs.extend(customParseFormat)

<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;

----------------------------------------

TITLE: Statistic Component in Card
DESCRIPTION: Example of using the Statistic component within a Card component. This demonstrates how to integrate statistics into other UI elements.

LANGUAGE: typescript
CODE:
<code src="./demo/card.tsx" background="grey">在卡片中使用</code>

----------------------------------------

TITLE: Fixed Portal Implementation with Append Reference
DESCRIPTION: Updated implementation that fixes the positioning issue by tracking append state and conditionally bypassing the queue.

LANGUAGE: tsx
CODE:
// pseudocode
const appendedRef = useRef(false);

const queueCreate = !appendedRef.current
  ? (appendFn: VoidFunction) => {
      // same code
    }
  : undefined;

function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
  appendedRef.current = true;
}

// ...

return <PortalContext value={queueCreate}>{children}</PortalContext>;

----------------------------------------

TITLE: Running Codemod CLI for v5 Upgrade
DESCRIPTION: Commands to run the codemod CLI tool for automated upgrades to Ant Design v5.

LANGUAGE: shell
CODE:
# Run directly through npx
npx -p @ant-design/codemod-v5 antd5-codemod src

# Or run directly through pnpm
pnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src

----------------------------------------

TITLE: Styling Table Demo Size Headers in HTML/CSS
DESCRIPTION: This CSS snippet adds bottom margin to h4 elements within the #table-demo-size container, providing spacing for the table size demonstration.

LANGUAGE: HTML
CODE:
<style>#table-demo-size h4 { margin-bottom: 16px; }</style>

----------------------------------------

TITLE: Customizing Ant Design Theme with ConfigProvider
DESCRIPTION: React component example demonstrating how to use ConfigProvider to customize the Ant Design theme, specifically changing the primary color.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

const App: React.FC = () => (
  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
    <MyApp />
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Implementing Auto Shift for Popconfirm in React
DESCRIPTION: This code snippet shows how to import an example of a Popconfirm component with auto-shift functionality in a React application, displayed in an iframe.

LANGUAGE: tsx
CODE:
<code src="./demo/shift.tsx" iframe="300">Auto Shift</code>

----------------------------------------

TITLE: Advanced Tabs Configuration in React TSX
DESCRIPTION: This code snippet showcases advanced configuration options for the Tabs component, including custom indicators, sliding tabs, extra content, and size variations.

LANGUAGE: TSX
CODE:
<code src="./demo/custom-indicator.tsx">指示条</code>
<code src="./demo/slide.tsx">滑动</code>
<code src="./demo/extra.tsx">附加内容</code>
<code src="./demo/size.tsx">大小</code>

----------------------------------------

TITLE: Setting Vertical Label Placement in Ant Design
DESCRIPTION: Shows how to configure label placement to vertical position in Ant Design components using the labelPlacement property. This setting affects how labels are positioned relative to their associated content.

LANGUAGE: text
CODE:
labelPlacement="vertical"

----------------------------------------

TITLE: Color Selection Point Calculation in TypeScript
DESCRIPTION: TypeScript implementation for calculating saturation and brightness values based on pointer position in the color panel.

LANGUAGE: typescript
CODE:
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// 饱和度
const saturation = (offset.x + centerOffsetX) / width;
// 明度
const bright = 1 - (offset.y + centerOffsetY) / height;

----------------------------------------

TITLE: Documenting Tag Component Usage in Ant Design (Markdown)
DESCRIPTION: Explains the usage of basic Tag components in Ant Design, including how to make tags closable and customize close buttons. It describes the `closeIcon` property for enabling closable tags and mentions the `onClose` event for closable tags.

LANGUAGE: Markdown
CODE:
## zh-CN

基本标签的用法，可以通过设置 `closeIcon` 变为可关闭标签并自定义关闭按钮，设置为 `true` 时将使用默认关闭按钮。可关闭标签具有 `onClose` 事件。

## en-US

Usage of basic Tag, and it could be closable and customize close button by set `closeIcon` property, will display default close button when `closeIcon` is setting to `true`. Closable Tag supports `onClose` events.

----------------------------------------

TITLE: Getting TypeScript Component Definitions in Ant Design
DESCRIPTION: Example showing how to get TypeScript definitions for unexposed props using antd utility types.

LANGUAGE: tsx
CODE:
import type { Checkbox, CheckboxProps, GetProp, GetProps, GetRef, Input } from 'antd';

// Get Props
type CheckboxGroupProps = GetProps<typeof Checkbox.Group>;

// Get Prop
type CheckboxValue = GetProp<CheckboxProps, 'value'>;

// Get Ref
type InputRef = GetRef<typeof Input>;

----------------------------------------

TITLE: Running Test Cases for Ant Design
DESCRIPTION: Commands to execute the test suite for Ant Design. Ensure NODE_ENV is not set before running tests.

LANGUAGE: Shell
CODE:
$ npm test

LANGUAGE: Shell
CODE:
$ yarn test

----------------------------------------

TITLE: Basic Transfer Component Props Example
DESCRIPTION: Example showing how to implement a basic transfer component with rowKey prop for unique identification of elements.

LANGUAGE: jsx
CODE:
return <Transfer rowKey={(record) => record.uid} />;

----------------------------------------

TITLE: Rendering Motion Principles with React and Ant Design
DESCRIPTION: This code snippet demonstrates how to create a component that displays the three motion design principles of Ant Design using React and Ant Design components. It renders a grid of images and text describing each principle.

LANGUAGE: jsx
CODE:
/**
 * inline: true
 */

import { Col, Row } from 'antd';

const text = [
  {
    title: '自然',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif',
    content: '自然运动规律，保证视觉连贯，让用户感知到动作是成立的',
  },
  {
    title: '高效',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif',
    content: '尽量节省过渡的时间，快速完成过渡的动画效果',
  },
  {
    title: '克制',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif',
    content: '做有意义的动效，不去做太多的修饰而干扰用户',
  },
];

function Principle() {
  const childrenToRender = text.map((item) => (
    <Col key={item.title} sm={24} md={8}>
      <div className="principle">
        <div>
          <img src={item.img} width="80%" />
        </div>
        <h4>{item.title}</h4>
        <p>{item.content}</p>
      </div>
    </Col>
  ));
  return (
    <div className="motion-principle-wrapper">
      <Row gutter={{ md: 32, sm: 0 }} className="principle-wrapper">
        {childrenToRender}
      </Row>
    </div>
  );
}

export default Principle;

----------------------------------------

TITLE: Importing Result Component Demos in React
DESCRIPTION: This snippet demonstrates how to import various Result component demos in React. It includes examples for different statuses and customizations.

LANGUAGE: markdown
CODE:
<code src="./demo/success.tsx">Success</code>
<code src="./demo/info.tsx">Info</code>
<code src="./demo/warning.tsx">Warning</code>
<code src="./demo/403.tsx">403</code>
<code src="./demo/404.tsx">404</code>
<code src="./demo/500.tsx">500</code>
<code src="./demo/error.tsx">Error</code>
<code src="./demo/customIcon.tsx">自定义 icon</code>
<code src="./demo/component-token.tsx" debug>组件 Token</code>

----------------------------------------

TITLE: Updating Jest Snapshots
DESCRIPTION: Demonstrates the command to update Jest snapshots after making changes to component demos, which is necessary to pass CI tests.

LANGUAGE: bash
CODE:
npm run test -u

----------------------------------------

TITLE: Installing Compatibility Packages
DESCRIPTION: Commands to install compatibility packages for deprecated components in Ant Design v5.

LANGUAGE: bash
CODE:
npm install --save @ant-design/compatible@v5-compatible-v4
npm install --save @ant-design/pro-components

----------------------------------------

TITLE: Documenting Asynchronous Popconfirm Usage
DESCRIPTION: Multi-language documentation explaining how to implement asynchronous closing behavior in Popconfirm component when clicking the OK button, particularly useful for form submission scenarios.

LANGUAGE: markdown
CODE:
## zh-CN

点击确定后异步关闭 Popconfirm，例如提交表单。

## en-US

Asynchronously close a popconfirm when the OK button is pressed. For example, you can use this pattern when you submit a form.

----------------------------------------

TITLE: Defining Vertical Spacing Formula in Ant Design
DESCRIPTION: Mathematical formula for calculating vertical spacing in Ant Design where y represents vertical spacing, 8 is the base unit, and n is a non-negative multiplier.

LANGUAGE: markdown
CODE:
y = 8 + 8 * n, where n >= 0

----------------------------------------

TITLE: Comparing Select and TreeSelect API Usage
DESCRIPTION: Demonstrates the inconsistent API naming between Select and TreeSelect components for search functionality, showing historical API design issues.

LANGUAGE: tsx
CODE:
// Select 在 combobox 模式下，搜索框就是输入框，`inputValue` 看起来很合理
<Select inputValue="search" />

// TreeSelect 的搜索框在弹出层，`searchValue` 也很合理
<TreeSelect searchValue="search" />

----------------------------------------

TITLE: Enabling CSS Variables with ConfigProvider in React 17 or 16
DESCRIPTION: This snippet demonstrates how to enable CSS variables globally in an Ant Design React 17 or 16 application, requiring a manual key for theme isolation.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ cssVar: { key: 'app' } }}>
  <App />
</ConfigProvider>

----------------------------------------

TITLE: Status Badge in TypeScript
DESCRIPTION: Example of using Badge as a status indicator with different states. This showcases how to use badges to represent various status conditions.

LANGUAGE: typescript
CODE:
<code src="./demo/status.tsx">状态点</code>

----------------------------------------

TITLE: Styling Timeline Clock Icon in Ant Design with CSS
DESCRIPTION: CSS style definition for customizing the font size of timeline clock icons in Ant Design components. Sets the font size to 16 pixels for elements with the timeline-clock-icon class.

LANGUAGE: css
CODE:
.timeline-clock-icon {
  font-size: 16px;
}

----------------------------------------

TITLE: Styling Ant Design Row Components with CSS
DESCRIPTION: CSS snippet that applies a light gray background to all Ant Design row elements within a grid demo container. Uses rgba for semi-transparent background effect.

LANGUAGE: CSS
CODE:
#grid-demo-flex [class~='ant-row'] {
  background: rgba(128, 128, 128, 0.08);
}

----------------------------------------

TITLE: Creating a Basic Form with Input and InputNumber in React
DESCRIPTION: This snippet shows a simple form setup using Ant Design's Form, Input, and InputNumber components for a product name and price.

LANGUAGE: tsx
CODE:
<Form>
  <Form.Item label="Name" name="name">
    <Input />
  </Form.Item>

  <Form.Item label="Price" name="price">
    <InputNumber />
  </Form.Item>
</Form>

----------------------------------------

TITLE: Custom Theme Configuration
DESCRIPTION: Definition of custom theme configuration for Ant Design components.

LANGUAGE: ts
CODE:
import type { ThemeConfig } from 'antd';

const theme: ThemeConfig = {
  token: {
    fontSize: 16,
    colorPrimary: '#52c41a',
  },
};

export default theme;

----------------------------------------

TITLE: DisabledTime Type Definition
DESCRIPTION: TypeScript type definition for the DisabledTime function used to specify disabled time options in TimePicker. Includes options for disabling hours, minutes, seconds, and milliseconds.

LANGUAGE: typescript
CODE:
type DisabledTime = (now: Dayjs) => {
  disabledHours?: () => number[];
  disabledMinutes?: (selectedHour: number) => number[];
  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];
  disabledMilliseconds?: (
    selectedHour: number,
    selectedMinute: number,
    selectedSecond: number,
  ) => number[];
};

----------------------------------------

TITLE: Installing Ant Design Colors Package
DESCRIPTION: Command to install the @ant-design/colors npm package for programmatic color usage.

LANGUAGE: bash
CODE:
npm install @ant-design/colors

----------------------------------------

TITLE: Switching Themes with CSS Variables and Selectors
DESCRIPTION: Shows how to implement theme switching using CSS variables and selectors, allowing for efficient theme changes without JavaScript manipulation.

LANGUAGE: css
CODE:
/* Utilizing custom theme classes as nested selectors */
.light .css-hash {
  --color-text: rgba(0, 0, 0, 0.85);
}

.dark .css-hash {
  --color-text: rgba(255, 255, 255, 0.88);
}

----------------------------------------

TITLE: Image Preview Component Implementation
DESCRIPTION: HTML structure for displaying image previews with descriptions for demonstrating do's and don'ts in empty state design.

LANGUAGE: html
CODE:
<ImagePreview>
<img class="preview-img no-padding good" src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*Bh_yRKPOByUAAAAAAAAAAABkARQnAQ" alt="正确示范" description="展示明确空状态提示。">
<img class="preview-img no-padding bad" src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*yiIXR4u8s2wAAAAAAAAAAABkARQnAQ" alt="错误示范" description="空状态没有任何提示。">
</ImagePreview>

----------------------------------------

TITLE: ShowTime Property Configuration in Ant Design
DESCRIPTION: Demonstrates how the showTime property enables time selection functionality and passes properties to an embedded TimePicker component. The documentation is provided in both Chinese and English to support internationalization.

LANGUAGE: markdown
CODE:
## zh-CN

增加选择时间功能，当 `showTime` 为一个对象时，其属性会传递给内建的 `TimePicker`。

## en-US

This property provides an additional time selection. When `showTime` is an Object, its properties will be passed on to the built-in `TimePicker`.

----------------------------------------

TITLE: Configuring Tree Selection Display in English
DESCRIPTION: Markdown documentation in English explaining how to use showCheckedStrategy to show selected items in a box.

LANGUAGE: markdown
CODE:
## en-US

Shows a selected item in a box using `showCheckedStrategy`.

----------------------------------------

TITLE: Using HappyProvider for Theme Effects in React
DESCRIPTION: This snippet demonstrates how to use the HappyProvider component from @ant-design/happy-work-theme to enable theme effects in a React application.

LANGUAGE: tsx
CODE:
import { HappyProvider } from '@ant-design/happy-work-theme';

export default () => (
  <HappyProvider>
    <Button />
  </HappyProvider>
);

----------------------------------------

TITLE: Configuring CSS Variables in React 16/17 with Ant Design
DESCRIPTION: Configuration example for enabling CSS variables in Ant Design using ConfigProvider with React 16/17, requiring a manual key specification for theme isolation.

LANGUAGE: tsx
CODE:
<ConfigProvider theme={{ cssVar: { key: 'app' } }}>
  <App />
</ConfigProvider>

----------------------------------------

TITLE: Custom Overflow Style Configuration - TypeScript/React
DESCRIPTION: Example demonstrating how to override the default overflow:hidden style introduced in version 5.18.0 to modify container behavior.

LANGUAGE: tsx
CODE:
<Watermark style={{ overflow: 'visible' }} />

----------------------------------------

TITLE: Configuring Jest for Ant Design Testing
DESCRIPTION: This JSON snippet shows the necessary configuration to enable Jest testing with Ant Design components, which use ESM modules.

LANGUAGE: json
CODE:
"transform": { "^.+\\.(ts|tsx|js|jsx)?$": "ts-jest" }

----------------------------------------

TITLE: Proxy Implementation for Refs
DESCRIPTION: Shows how to use Proxy to intercept ref access and provide backward compatibility while adding new functionality.

LANGUAGE: tsx
CODE:
useImperativeHandle(
  ref,
  () =>
    new Proxy(divRef.current, {
      get(target, key) {
        // ...
      },
    }),
);

----------------------------------------

TITLE: Using Ant Design Color Palette in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Ant Design color palette in JavaScript code. It shows how to import and use the blue color palette, including accessing the primary color.

LANGUAGE: javascript
CODE:
import { blue } from '@ant-design/colors';

console.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']
console.log(blue.primary); // '#1677FF'

----------------------------------------

TITLE: Cloning and setting up Ant Design development environment
DESCRIPTION: Commands to clone the Ant Design repository, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
$ git clone git@github.com:ant-design/ant-design.git
$ cd ant-design
$ npm install
$ npm start

----------------------------------------

TITLE: Implementing Preset Time Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements a quick time point selection feature using preset options in the left panel of the DatePicker component. It's recommended to limit the number of shortcut options to 8 or fewer based on Hick's law.

LANGUAGE: tsx
CODE:
<code src="./design/demo/preset-time.tsx" description="通过面板左侧区域提供的预置项，帮助用户快速完成时间点的选择。" tip="根据希克定律，建议快捷选项的个数不超过8个。">快捷选择时间点</code>

----------------------------------------

TITLE: Calculating Hue and Alpha from Slider Positions in TypeScript
DESCRIPTION: This TypeScript snippet calculates the hue and alpha (opacity) values based on the positions of their respective sliders.

LANGUAGE: typescript
CODE:
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Hue
const hue = ((offset.x + centerOffsetX) / width) * 360;
// Opacity
const alpha = (offset.x + centerOffsetX) / width;

----------------------------------------

TITLE: CSS Shadow Variables Level 1
DESCRIPTION: Defines shadow CSS variables for first elevation level with up, down, left and right directions. Each direction uses 3 layered shadows with different opacity, blur and spread values.

LANGUAGE: css
CODE:
@shadow-1-up {
  box-shadow: 0px -1px 2px -2px rgba(0,0,0,0.16),
             0px -3px 6px 0px rgba(0,0,0,0.12),
             0px -5px 12px 4px rgba(0,0,0,0.09);
}

----------------------------------------

TITLE: Running Code Style Checks for Ant Design
DESCRIPTION: Commands to run linting and code style checks on the Ant Design codebase.

LANGUAGE: Shell
CODE:
$ npm run lint

LANGUAGE: Shell
CODE:
$ yarn lint

----------------------------------------

TITLE: Customizing Message Styles with style and className in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to use the style and className props to customize the appearance of Message components in Ant Design. These props allow for both inline styling and CSS class-based styling.

LANGUAGE: jsx
CODE:
import { message, Button } from 'antd';

const key = 'updatable';

const openMessage = () => {
  message.loading({ content: 'Loading...', key });
  setTimeout(() => {
    message.success({
      content: 'Loaded!',
      key,
      style: {
        marginTop: '20vh',
      },
      className: 'custom-message',
    });
  }, 1000);
};

ReactDOM.render(
  <Button onClick={openMessage}>Open the message box</Button>,
  mountNode,
);

----------------------------------------

TITLE: Implementing useRenderTimes Hook in TypeScript
DESCRIPTION: A debug hook that tracks component render times and prop changes during development. Uses React's useDebugValue to display render count in React Dev Tools.

LANGUAGE: tsx
CODE:
import React from 'react';

function useRenderTimes<T>(props: T) {
  // Render times
  const timesRef = React.useRef(0);
  timesRef.current += 1;

  // Cache for prev props
  const cacheProps = React.useRef(props);
  const changedPropKeys = getDiff(props, cacheProps.current); // Some compare logic

  React.useDebugValue(timesRef.current);
  React.useDebugValue(changedPropKeys);

  cacheProps.current = props;
}

export default process.env.NODE_ENV !== 'production' ? useRenderTimes : () => {};

----------------------------------------

TITLE: Configuring Progress Component Size in TypeScript
DESCRIPTION: Code snippet showing how to set different sizes for the Progress component using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/size.tsx">尺寸</code>

----------------------------------------

TITLE: Implementing Async Closing for Popconfirm in React
DESCRIPTION: This code snippet demonstrates how to implement asynchronous closing functionality for the Popconfirm component. It's useful when the confirmation action requires an asynchronous operation.

LANGUAGE: tsx
CODE:
<code src="./demo/async.tsx">异步关闭</code>

----------------------------------------

TITLE: Configuring Radio.Group with block property in JSX
DESCRIPTION: This snippet shows how to use the 'block' property on a Radio.Group component to make it fill the width of its parent container. The example is likely part of an ant-design demo or documentation.

LANGUAGE: JSX
CODE:
<Radio.Group block />

----------------------------------------

TITLE: Implementing CSS-based Line Ellipsis in React
DESCRIPTION: This snippet demonstrates how to use CSS properties to implement line ellipsis for text overflow. It uses '-webkit-line-clamp' to limit the number of displayed lines.

LANGUAGE: tsx
CODE:
<div
  style={{
    display: '-webkit-box',
    overflow: 'hidden',
    WebkitBoxOrient: 'vertical',
    webkitLineClamp: 3,
  }}
>
  {text}
</div>

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the documentation page defining group, type, order and title.

LANGUAGE: yaml
CODE:
---
group: 设计模式
type: 原则
order: 2
title: 对齐
---

----------------------------------------

TITLE: Problematic Concurrent Build Function
DESCRIPTION: Original implementation using Promise.all that caused race conditions in file writing operations.

LANGUAGE: typescript
CODE:
async function buildBundles(cb) {
  const envs = ['development', 'production'];
  const configs = envs.map((env) =>
    getViteConfigForPackage({
      env,
      formats: ['es', 'cjs', 'umd'],
      external: ['react', 'react-dom'],
    }),
  );

  await Promise.all(configs.map((config) => vite.build(config)));
  cb && cb();
}

----------------------------------------

TITLE: Dropdown Button API Properties
DESCRIPTION: Specifies additional properties available for the Dropdown.Button variant, including button-specific attributes like loading state, size, and type.

LANGUAGE: markdown
CODE:
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| buttonsRender | Custom buttons inside Dropdown.Button | (buttons: ReactNode\[]) => ReactNode\[] | - |  |
| loading | Set the loading status of button | boolean \| { delay: number, icon: ReactNode } | false | icon: 5.23.0 |

----------------------------------------

TITLE: Applying Scale Ratio to Offset Calculations for Popup Positioning
DESCRIPTION: This snippet shows how to apply the calculated scale ratio to the base offset values. This ensures that the popup is correctly positioned even when scaling transforms are present on parent elements.

LANGUAGE: tsx
CODE:
// Some logic for align offset calculation
// const baseOffsetX = ...
// const baseOffsetY = ...

const scaledOffsetX = baseOffsetX / scaleX;
const scaledOffsetY = baseOffsetY / scaleY;

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Default directory structure of a Vite React project showing key files and folders organization.

LANGUAGE: text
CODE:
├── public
│   └── vite.svg
├── src
│   └── assets
│       └── react.svg
│   ├── App.css
│   ├── App.js
│   ├── index.css
│   ├── main.js
│   └── logo.svg
├── index.html
├── package.json
└── vite.config.ts

----------------------------------------

TITLE: Setting Background Color for Color Panel in CSS
DESCRIPTION: This CSS snippet sets the background color for the color panel to a specific blue shade, which serves as the base for the hue in the HSV color model.

LANGUAGE: css
CODE:
background-color: rgb(0, 106, 255);

----------------------------------------

TITLE: Empty State Design Cards HTML Structure
DESCRIPTION: HTML structure for displaying design principles cards with images and text descriptions for empty state patterns.

LANGUAGE: html
CODE:
<div class="design-inline-cards">
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*q5MRQ6TBR0EAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>明确</h4>
      <p>通过使用清晰明了的语言、插画等形式告知用户空状态的具体原因。</p>
    </div>
  </div>
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*wOoaT6juZqwAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>提供邀请</h4>
      <p>提供帮助文案、建议操作等解决方案，表明在下一个界面可以做什么，引导用户进行操作。</p>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Replacing Enzyme simulate with React Testing Library fireEvent
DESCRIPTION: Shows how to replace Enzyme's simulate method for event simulation with React Testing Library's fireEvent function.

LANGUAGE: javascript
CODE:
++ import { fireEvent } from '@testing-library/react';

-- wrapper.find('.ant-handle').simulate('click');
++ fireEvent.click(container.querySelector('.ant-handle'));

----------------------------------------

TITLE: Starting Umi Development Server
DESCRIPTION: Command to start the Umi development server and view the application.

LANGUAGE: bash
CODE:
$ npm run dev

----------------------------------------

TITLE: Implementing Dynamic Date Range Selection in Ant Design (JSX)
DESCRIPTION: This code snippet demonstrates how to use the disabledDate property with info.from to create a dynamic date range selection in Ant Design. It allows for limiting the selectable date range based on the currently selected date.

LANGUAGE: JSX
CODE:
import { DatePicker, Space } from 'antd';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';

dayjs.extend(customParseFormat);

const { RangePicker } = DatePicker;

const App = () => {
  const disabledDate = (current, info) => {
    if (info.type === 'start') {
      return current && current < dayjs().endOf('day');
    }
    return current && current < info?.from?.startOf('day');
  };

  return (
    <Space direction="vertical" size={12}>
      <RangePicker disabledDate={disabledDate} />
    </Space>
  );
};

export default App;

----------------------------------------

TITLE: Migrating Enzyme DOM queries to native DOM methods
DESCRIPTION: Illustrates how to replace Enzyme's DOM querying methods with native DOM methods when using React Testing Library.

LANGUAGE: javascript
CODE:
expect(ref.current.getPopupDomNode()).toBe(null);
-- popover.find('span').simulate('click');
-- expect(popover.find('Trigger PopupInner').props().visible).toBeTruthy();

++ expect(container.querySelector('.ant-popover-inner-content')).toBeFalsy();
++ fireEvent.click(popover.container.querySelector('span'));
++ expect(container.querySelector('.ant-popover-inner-content')).toBeTruthy();

----------------------------------------

TITLE: CSS Cache Path Storage
DESCRIPTION: LESS code showing how cache paths are stored in CSS

LANGUAGE: less
CODE:
// Just example. Not real world code
.cssinjs-cache-path {
  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';
}

----------------------------------------

TITLE: Implementing Inline Style SSR in HTML
DESCRIPTION: Demonstrates the basic inline style implementation for SSR, showing how styles are embedded directly in HTML. Shows the issue with style duplication for multiple instances of the same component.

LANGUAGE: html
CODE:
<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World</button>
</div>

----------------------------------------

TITLE: Adding Alert Component to Existing Ant Design Setup
DESCRIPTION: This diff snippet demonstrates how to add the Alert component to an existing Ant Design React setup. It shows the necessary import changes and JSX modifications to incorporate the Alert component for displaying the selected date.

LANGUAGE: diff
CODE:
- import { ConfigProvider, DatePicker, message } from 'antd';
+ import { ConfigProvider, DatePicker, message, Alert } from 'antd';

  <DatePicker onChange={value => this.handleChange(value)} />
  <div style={{ marginTop: 16 }}>
-   当前日期：{date ? date.format('YYYY-MM-DD') : '未选择'}
+   <Alert message="当前日期" description={date ? date.format('YYYY年MM月DD日') : '未选择'} />
  </div>

----------------------------------------

TITLE: Adding Alert Component to Existing Ant Design Setup
DESCRIPTION: This diff snippet demonstrates how to add the Alert component to an existing Ant Design React setup. It shows the necessary import changes and JSX modifications to incorporate the Alert component for displaying the selected date.

LANGUAGE: diff
CODE:
- import { ConfigProvider, DatePicker, message } from 'antd';
+ import { ConfigProvider, DatePicker, message, Alert } from 'antd';

  <DatePicker onChange={value => this.handleChange(value)} />
  <div style={{ marginTop: 16 }}>
-   当前日期：{date ? date.format('YYYY-MM-DD') : '未选择'}
+   <Alert message="当前日期" description={date ? date.format('YYYY年MM月DD日') : '未选择'} />
  </div>

----------------------------------------

TITLE: Extending ConfigProvider with Inherited ClassNames in React
DESCRIPTION: This React component demonstrates how to extend ConfigProvider settings while preserving existing classNames. It allows for layering multiple style configurations without conflicts.

LANGUAGE: tsx
CODE:
import React from 'react';
import { ConfigProvider } from 'antd';

const GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {
  const { button } = React.useContext(ConfigProvider.ConfigContext);
  const { styles } = useButtonStyle();
  return (
    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>
      {props.children}
    </ConfigProvider>
  );
};

export default GeekProvider;

----------------------------------------

TITLE: Implementing Component Ref Interface
DESCRIPTION: Example of a TypeScript interface definition for component refs, showing the structured approach to handling DOM references and methods.

LANGUAGE: tsx
CODE:
export interface SampleRef {
  nativeElement: HTMLElement;
  focus(): void;
  blur(): void;
}

----------------------------------------

TITLE: Documenting Ant Design Styling Bugs in Markdown
DESCRIPTION: This snippet uses Markdown to document styling issues in Ant Design components. It includes headers in both Chinese and English, indicating that the content demonstrates buggy styling behavior.

LANGUAGE: Markdown
CODE:
## zh-CN

Buggy! 测试一些踩过的样式坑。

## en-US

Buggy!

----------------------------------------

TITLE: Client-side Cache Path Extraction
DESCRIPTION: Code showing how to extract cache paths on the client side using getComputedStyle

LANGUAGE: tsx
CODE:
// Just example. Not real world code
const measure = document.createElement('div');
measure.className = 'cssinjs-cache-path';
document.body.appendChild(measure);

// Now let's parse the `content`
const { content } = getComputedStyle(measure);

----------------------------------------

TITLE: Component API Usage Comparison
DESCRIPTION: Demonstrates the historical difference in API naming between Select and TreeSelect components for search functionality.

LANGUAGE: tsx
CODE:
// Select in combobox mode, the search box is the input box, `inputValue` looks reasonable
<Select inputValue="search" />

// TreeSelect's search box is in the popup layer, `searchValue` is also reasonable
<TreeSelect searchValue="search" />

----------------------------------------

TITLE: Dependency Diff Analysis Step
DESCRIPTION: GitHub Actions step to compare yarn.lock files and generate diff report on build failure.

LANGUAGE: yaml
CODE:
- name: 🎨 Diff Report
  if: ${{ failure() }}
  run: npx diff-yarn-lock --source=~tmpProj/yarn.lock --target=~tmpProj/yarn.lock.failed

----------------------------------------

TITLE: Space.Compact Component Documentation - Chinese
DESCRIPTION: Chinese language documentation for Space.Compact component, explaining how to create compact mode layouts with a reference link to detailed documentation.

LANGUAGE: markdown
CODE:
## zh-CN

使用 `Space.Compact` 创建紧凑模式，更多请查看 [Space.Compact](/components/space-cn#spacecompact) 文档。

----------------------------------------

TITLE: Handling Failed Image Watermarks with TypeScript/React
DESCRIPTION: Example showing how to handle image watermark failures by providing fallback content. This approach ensures watermark visibility even when the image fails to load.

LANGUAGE: typescript
CODE:
<Watermark
  height={30}
  width={130}
  content="Ant Design"
  image="https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original"
>
  <div style={{ height: 500 }} />
</Watermark>

----------------------------------------

TITLE: Documenting Component Token Debugging in Markdown
DESCRIPTION: This snippet provides a brief description of component token debugging in both Chinese (zh-CN) and English (en-US). It uses Markdown syntax for language-specific sections.

LANGUAGE: Markdown
CODE:
## zh-CN

Component Token Debug.

## en-US

Component Token Debug.

----------------------------------------

TITLE: Using @ant-design/static-style-extract for Style Extraction
DESCRIPTION: Shows how to use the @ant-design/static-style-extract package to easily extract styles from all Ant Design components, excluding popup components not needed in SSR.

LANGUAGE: typescript
CODE:
import { extractStyle } from '@ant-design/static-style-extract';
import fs from 'fs';

// `extractStyle` containers all the antd component
// excludes popup like component which is no need in ssr: Modal, message, notification, etc.
const css = extractStyle();

fs.writeFile(...);

----------------------------------------

TITLE: Importing Progress Component in TypeScript
DESCRIPTION: Code snippet demonstrating how to import and use the Progress component in a TypeScript React application.

LANGUAGE: typescript
CODE:
<code src="./demo/line.tsx">进度条</code>

----------------------------------------

TITLE: Calculating Saturation and Brightness from Selection Anchor Position in TypeScript
DESCRIPTION: This TypeScript snippet calculates the saturation and brightness values based on the position of the selection anchor within the color panel.

LANGUAGE: typescript
CODE:
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Saturation
const saturation = (offset.x + centerOffsetX) / width;
// Brightness
const bright = 1 - (offset.y + centerOffsetY) / height;

----------------------------------------

TITLE: Configuring Dayjs Locale for Internationalization
DESCRIPTION: Demonstrates how to configure the Dayjs locale for proper internationalization of date components.

LANGUAGE: javascript
CODE:
import dayjs from 'dayjs';

import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');

----------------------------------------

TITLE: Implementing Nested Themes with CSS Variables in React
DESCRIPTION: Demonstrates how to create nested themes using ConfigProvider and CSS variables, showing the desired CSS output for isolated theme styles.

LANGUAGE: jsx
CODE:
<ConfigProvider theme={{ token: { colorPrimary: 'blue' } }}>
  <Button>Button 1</Button>
  <ConfigProvider theme={{ token: { colorPrimary: 'green' } }}>
    <Button>Button 2</Button>
  </ConfigProvider>
</ConfigProvider>

LANGUAGE: css
CODE:
:where(.css-hash1).ant-btn {
  background-color: var(--color-primary);
}

:where(.css-hash2).ant-btn {
  background-color: var(--color-primary);
}

.css-hash1 {
  --color-primary: blue;
}

.css-hash2 {
  --color-primary: green;
}

----------------------------------------

TITLE: Enabling @layer for Unified CSS Priority in Ant Design
DESCRIPTION: This snippet shows how to enable @layer support in Ant Design to unify CSS priority and allow easier style overrides. It requires wrapping the app with both StyleProvider and ConfigProvider.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';
import { ConfigProvider } from 'antd';

export default () => (
  <StyleProvider layer>
    <ConfigProvider>
      <MyApp />
    </ConfigProvider>
  </StyleProvider>
);

----------------------------------------

TITLE: Tab Size Guidelines Documentation
DESCRIPTION: Documentation describing when to use different tab sizes in Ant Design components. Large tabs are recommended for page headers while small tabs are suggested for modals and narrow containers.

LANGUAGE: markdown
CODE:
## zh-CN

大号页签用在页头区域，小号用在弹出框等较狭窄的容器内。

## en-US

Large size tabs are usually used in page header, and small size could be used in Modal.

----------------------------------------

TITLE: Implementing Layer Two Shadows in CSS
DESCRIPTION: CSS variables for layer two shadows with increased elevation effects. Includes all four directions with three-layer shadow implementation.

LANGUAGE: CSS
CODE:
@shadow-2-up: 0px -3px 6px -4px rgba(0, 0, 0, 0.12),\n            0px -6px 16px 0px rgba(0, 0, 0, 0.08),\n            0px -9px 28px 8px rgba(0, 0, 0, 0.05);\n@shadow-2-down: 0px 3px 6px -4px rgba(0, 0, 0, 0.12),\n              0px 6px 16px 0px rgba(0, 0, 0, 0.08),\n              0px 9px 28px 8px rgba(0, 0, 0, 0.05);\n@shadow-2-left: -3px 0px 6px -4px rgba(0, 0, 0, 0.12),\n              -6px 0px 16px 0px rgba(0, 0, 0, 0.08),\n              -9px 0px 28px 8px rgba(0, 0, 0, 0.05);\n@shadow-2-right: 3px 0px 6px -4px rgba(0, 0, 0, 0.12),\n               6px 0px 16px 0px rgba(0, 0, 0, 0.08),\n               9px 0px 28px 8px rgba(0, 0, 0, 0.05);

----------------------------------------

TITLE: Implementing Basic Form with Aggregated Fields in React and ant-design
DESCRIPTION: This snippet demonstrates a basic implementation of aggregating province and city fields into a single Cascader component. It shows how to handle initialValues and onFinish to transform data between the UI and backend formats.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Cascader, Form } from 'antd';

const data = { province: 'Beijing', city: 'Haidian' };
const options = [
  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },
  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] },
];
const createUser = (values) => console.log(values);

const Demo = () => (
  <Form
    initialValues={{ province: [data.province, data.city] }}
    onFinish={(values) => {
      const { province, ...rest } = values;
      createUser({ province: province[0], city: province[1], ...rest });
    }}
  >
    <Form.Item label="Address" name="province">
      <Cascader options={options} placeholder="Please select" />
    </Form.Item>
  </Form>
);
export default Demo;

----------------------------------------

TITLE: Customizing Popconfirm Locale in React
DESCRIPTION: This code snippet shows how to import an example of a Popconfirm component with customized locale text in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/locale.tsx">Locale text</code>

----------------------------------------

TITLE: Single-Field Inline Edit Pattern - Markdown
DESCRIPTION: Describes the implementation of click-to-edit functionality for single fields, with emphasis on balancing readability and editability.

LANGUAGE: markdown
CODE:
Single-Field Inline Edit

If 「readability」 is more important than 「editability」, 「click to edit」 can be used.

----------------------------------------

TITLE: Describing Popover Edge Behavior in English
DESCRIPTION: Explains in English that the Popup and arrow position automatically adjust when the Popover is close to the edge of the screen. It also mentions that the Popover will move out of the screen if it exceeds the screen limitations.

LANGUAGE: Markdown
CODE:
## en-US

Auto adjust Popup and arrow position when Popover is close to the edge of the screen. Will be out of screen when exceed limitation.

----------------------------------------

TITLE: Calculating Scale Ratio for Popup Element in TypeScript
DESCRIPTION: This code snippet demonstrates how to calculate the scale ratio of a popup element using getBoundingClientRect and offsetWidth/offsetHeight. It's used to adjust alignment calculations for scaled elements.

LANGUAGE: tsx
CODE:
const popupRect = popupEle.getBoundingClientRect();
const { offsetWidth, offsetHeight } = popupEle;

const scaleX = popupRect.width / offsetWidth;
const scaleY = popupRect.height / offsetHeight;

----------------------------------------

TITLE: Installing Dependencies for Ant Design Development
DESCRIPTION: Commands for installing project dependencies using npm or yarn package managers.

LANGUAGE: Shell
CODE:
$ npm install

LANGUAGE: Shell
CODE:
$ yarn

----------------------------------------

TITLE: Synchronizing Slider with InputNumber in Ant Design (English)
DESCRIPTION: This snippet provides a link to the InputNumber component documentation in English, explaining how to synchronize the Slider component with it.

LANGUAGE: Markdown
CODE:
## en-US

Synchronize with [InputNumber](/components/input-number/) component.

----------------------------------------

TITLE: Implementing Principle Component with React and ant-design
DESCRIPTION: A React component that displays animation principles using a grid layout with images and descriptions. Uses ant-design's Row and Col components to create a responsive grid showing three core animation principles: Natural, Performant, and Concise.

LANGUAGE: jsx
CODE:
/**
 * inline: true
 */

import { Col, Row } from 'antd';

const text = [
  {
    title: 'Natural',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif',
    content:
      'The animation should based on law of nature. This assures the animation is smooth by its nature and intuitive to its users.',
  },
  {
    title: 'Performant',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif',
    content:
      'The animation should have a transition time as minimal as possible so that it serves its purpose in the most effective way.',
  },
  {
    title: 'Concise',
    img: 'https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif',
    content:
      'The animation should be meaningful and justified. An over fancy animation will frustrate its users, and therefore should always be avoided.',
  },
];

function Principle() {
  const childrenToRender = text.map((item) => (
    <Col key={item.title} sm={24} md={8}>
      <div className="principle">
        <div>
          <img src={item.img} width="80%" />
        </div>
        <h4>{item.title}</h4>
        <p>{item.content}</p>
      </div>
    </Col>
  ));
  return (
    <div className="motion-principle-wrapper">
      <Row gutter={{ md: 32, sm: 0 }} className="principle-wrapper">
        {childrenToRender}
      </Row>
    </div>
  );
}

export default Principle;

----------------------------------------

TITLE: CSS-in-JS Cache Structure Example
DESCRIPTION: Example showing the cache structure used to store component styles and their hash values

LANGUAGE: tsx
CODE:
{
  "bAMbOo|Button": ["LItTlE", ":where(.bAMbOo).ant-btn { color: red }"],
  "bAMbOo|Spin": ["liGHt", ":where(.bAMbOo).ant-spin { color: blue }"]
}

----------------------------------------

TITLE: Configuring StyleProvider with High Hash Priority
DESCRIPTION: Example showing how to configure StyleProvider to remove :where selector wrapping for better browser compatibility.

LANGUAGE: tsx
CODE:
import { StyleProvider } from '@ant-design/cssinjs';

// `hashPriority` 默认为 `low`，配置为 `high` 后，
// 会移除 `:where` 选择器封装
export default () => (
  <StyleProvider hashPriority="high">
    <MyApp />
  </StyleProvider>
);

----------------------------------------

TITLE: Implementing Controlled Row Selection in Ant Design Table
DESCRIPTION: This code snippet demonstrates how to use rowSelection.selectedRowKeys to control selected rows in an Ant Design Table. It allows for performing operations on selected rows and clearing the selection afterwards.

LANGUAGE: JSX
CODE:
import { Table } from 'antd';

// Implement your component logic here
// Use rowSelection.selectedRowKeys to control selected rows
// Perform operations on selected rows
// Clear selection after operations

----------------------------------------

TITLE: Creating Conditional Trigger for Popconfirm in React
DESCRIPTION: This code snippet demonstrates how to import an example of a Popconfirm component with a conditional trigger in a React application.

LANGUAGE: tsx
CODE:
<code src="./demo/dynamic-trigger.tsx">Conditional trigger</code>

----------------------------------------

TITLE: HTML Template for Including Hashed CSS File
DESCRIPTION: Shows how to include the dynamically generated CSS file with a hash in the HTML template for better caching and performance in SSR applications.

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="${hashCssFileUrl}" />
  </head>
  <body>
    <div id="root">${html}</div>
  </body>
</html>

----------------------------------------

TITLE: Customizing Progress Text Format in TypeScript
DESCRIPTION: Example of customizing the text format displayed in a Progress component using TypeScript.

LANGUAGE: typescript
CODE:
<code src="./demo/format.tsx">自定义文字格式</code>

----------------------------------------

TITLE: Building Umi Application
DESCRIPTION: Command to build the Umi application for production deployment.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: Importing and Using Ant Design Button in React
DESCRIPTION: React component example showing how to import and use an Ant Design Button component in a basic App structure.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button } from 'antd';

const App: React.FC = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the design pattern documentation page, specifying group, type, order and title.

LANGUAGE: yaml
CODE:
---
group: 设计模式
type: 原则
order: 6
title: 足不出户
---

----------------------------------------

TITLE: Example Code References
DESCRIPTION: List of code examples demonstrating various ColorPicker features and implementations.

LANGUAGE: jsx
CODE:
<code src="./demo/base.tsx">Basic Usage</code>
<code src="./demo/size.tsx">Trigger size</code>
<code src="./demo/controlled.tsx">controlled mode</code>

----------------------------------------

TITLE: Configuring Drawer Position Documentation
DESCRIPTION: Markdown documentation in Chinese and English explaining how drawer can slide out from different screen edges and close on mask click.

LANGUAGE: markdown
CODE:
## zh-CN

自定义位置，点击触发按钮抽屉从相应的位置滑出，点击遮罩区关闭。

## en-US

The Drawer can appear from any edge of the screen.

----------------------------------------

TITLE: Implementing Date Selection in DatePicker (TSX)
DESCRIPTION: This code snippet implements the selection of a specific date in the DatePicker component. It is used when users need to input very specific date information.

LANGUAGE: tsx
CODE:
<code src="./design/demo/pick-date.tsx" description="用于具体日期的选择。用户仅需要输入非常具体的日期信息时使用。">选择某天</code>

----------------------------------------

TITLE: Basic Workbench Template Structure
DESCRIPTION: HTML structure showing the design principle cards layout with images and descriptions for workbench design principles of findability and reduced memory load.

LANGUAGE: html
CODE:
<div class="design-inline-cards">
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*aFiGRbIvuH4AAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>可寻性</h4>
      <p>用户是否能定位到他们想要的信息。</p>
    </div>
  </div>
  <div>
    <img src="https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*lTUuSKmd8WsAAAAAAAAAAABkARQnAQ" />
    <div>
      <h4>降低记忆负载</h4>
      <p>理解用户再次访问的核心目标，为可能的目的地提供最短导航路径。</p>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Installing Rsbuild with Package Managers
DESCRIPTION: Commands to create a new Rsbuild project using npm, yarn, pnpm, or bun. This initializes a new project with the necessary dependencies.

LANGUAGE: bash
CODE:
$ npm create rsbuild

LANGUAGE: bash
CODE:
$ yarn create rsbuild

LANGUAGE: bash
CODE:
$ pnpm create rsbuild

LANGUAGE: bash
CODE:
$ bun create rsbuild

----------------------------------------

TITLE: Importing Tabs Component Examples in React
DESCRIPTION: This section demonstrates how to import various examples of the Tabs component in a React application using Ant Design.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/disabled.tsx">Disabled</code>
<code src="./demo/centered.tsx">Centered</code>
<code src="./demo/icon.tsx">Icon</code>
<code src="./demo/custom-indicator.tsx">Indicator</code>
<code src="./demo/slide.tsx">Slide</code>
<code src="./demo/extra.tsx">Extra content</code>
<code src="./demo/size.tsx">Size</code>
<code src="./demo/position.tsx">Position</code>
<code src="./demo/card.tsx">Card type tab</code>
<code src="./demo/editable-card.tsx">Add & close tab</code>
<code src="./demo/card-top.tsx" compact background="grey" debug>Container of card type Tab</code>
<code src="./demo/custom-add-trigger.tsx">Customized trigger of new tab</code>
<code src="./demo/custom-tab-bar.tsx">Customized bar of tab</code>
<code src="./demo/custom-tab-bar-node.tsx">Draggable Tabs</code>
<code src="./demo/animated.tsx" debug>Animated</code>
<code src="./demo/nest.tsx" debug>Nest</code>
<code src="./demo/component-token.tsx" debug>component Token</code>

----------------------------------------

TITLE: Configuring Tooltip Arrow in ant-design
DESCRIPTION: This snippet shows how to set the 'arrow' prop to make the tooltip arrow point to the center of the target element. It uses an object with the 'pointAtCenter' property set to true.

LANGUAGE: Markdown
CODE:
## zh-CN

设置 `arrow` 为 `{ pointAtCenter: true }` 后，箭头将指向目标元素的中心。

## en-US

By specifying `arrow` prop with `{ pointAtCenter: true }`, the arrow will point to the center of the target element.

----------------------------------------

TITLE: Using Ant Design Colors in JavaScript
DESCRIPTION: Example showing how to import and use the blue color palette from @ant-design/colors package. Returns an array of 10 color values and provides access to the primary color.

LANGUAGE: javascript
CODE:
import { blue } from '@ant-design/colors';

console.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']
console.log(blue.primary); // '#1677FF'

----------------------------------------

TITLE: Implementing Search-enabled Transfer Component in React
DESCRIPTION: This code snippet demonstrates how to create a Transfer component with search functionality in React. It uses the antd library's Transfer component and implements a custom search filter function.

LANGUAGE: jsx
CODE:
import { Transfer } from 'antd';
import { useState } from 'react';

const mockData = Array.from({
  length: 20,
}).map((_, i) => ({
  key: i.toString(),
  title: `content${i + 1}`,
  description: `description of content${i + 1}`,
}));

const initialTargetKeys = mockData.filter((item) => Number(item.key) > 10).map((item) => item.key);

const App = () => {
  const [targetKeys, setTargetKeys] = useState(initialTargetKeys);
  const [selectedKeys, setSelectedKeys] = useState([]);
  const onChange = (nextTargetKeys, direction, moveKeys) => {
    console.log('targetKeys:', nextTargetKeys);
    console.log('direction:', direction);
    console.log('moveKeys:', moveKeys);
    setTargetKeys(nextTargetKeys);
  };
  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {
    console.log('sourceSelectedKeys:', sourceSelectedKeys);
    console.log('targetSelectedKeys:', targetSelectedKeys);
    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);
  };
  const onScroll = (direction, e) => {
    console.log('direction:', direction);
    console.log('target:', e.target);
  };
  const filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1;
  return (
    <Transfer
      dataSource={mockData}
      showSearch
      filterOption={filterOption}
      targetKeys={targetKeys}
      selectedKeys={selectedKeys}
      onChange={onChange}
      onSelectChange={onSelectChange}
      onScroll={onScroll}
      render={(item) => item.title}
    />
  );
};

export default App;

----------------------------------------

TITLE: Importing Rate Component Examples in React
DESCRIPTION: This snippet demonstrates how to import and use various examples of the Rate component in a React application. It includes basic usage, half-star selection, copywriting, read-only mode, clear functionality, custom characters, and component token debugging.

LANGUAGE: tsx
CODE:
<code src="./demo/basic.tsx">Basic</code>
<code src="./demo/half.tsx">Half star</code>
<code src="./demo/text.tsx">Show copywriting</code>
<code src="./demo/disabled.tsx">Read only</code>
<code src="./demo/clear.tsx">Clear star</code>
<code src="./demo/character.tsx">Other Character</code>
<code src="./demo/character-function.tsx">Customize character</code>
<code src="./demo/component-token.tsx" debug>Component Token</code>

----------------------------------------

TITLE: Configuring InputNumber Scroll Behavior in Ant Design
DESCRIPTION: This snippet shows how to use the 'changeOnScroll' and 'needConfirm' props to modify the behavior of an InputNumber component in Ant Design. When enabled, these props allow the component's value to change when the user scrolls, potentially requiring confirmation.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `changeOnScroll` 与 `needConfirm` 使其滚动时改变数值。

## en-US

Use `changeOnScroll` and `needConfirm` to change the value when scrolling.

----------------------------------------

TITLE: Migrating Enzyme mount to React Testing Library render
DESCRIPTION: Demonstrates how to replace Enzyme's mount function with React Testing Library's render function for component rendering in tests.

LANGUAGE: javascript
CODE:
-- import { mount } from 'enzyme';
++ import { render } from '@testing-library/react';

-- const wrapper = mount(
++ const { container } = render(
    <ConfigProvider getPopupContainer={getPopupContainer}>
      <Slider />
    </ConfigProvider>,
  );

----------------------------------------

TITLE: Displaying Extra Date Information in DatePicker (TSX)
DESCRIPTION: This code snippet demonstrates how to display additional business-related information in date cells of the DatePicker component. It allows customization of cell content and styles to provide more context for user selection.

LANGUAGE: tsx
CODE:
<code src="./design/demo/date-extra-info.tsx" description="通过定义日期单元格内容及样式，为用户展示更多业务场景相关信息作为选择参考。">查看日期附属信息</code>

----------------------------------------

TITLE: Installing Dependencies with npm
DESCRIPTION: Commands for installing Ant Design v5 and compatibility packages

LANGUAGE: bash
CODE:
npm install --save antd@5.x
npm install --save @ant-design/compatible@v5-compatible-v4
npm install --save @ant-design/pro-components

----------------------------------------

TITLE: Customizing QRCode with Icon in React
DESCRIPTION: Shows how to add an icon to the QRCode component using the icon prop.

LANGUAGE: jsx
CODE:
<code src="./demo/icon.tsx">带 Icon 的例子</code>

----------------------------------------

TITLE: Setting Disabled and ReadOnly States in Ant Design (Markdown)
DESCRIPTION: This snippet provides instructions in Chinese and English for configuring the 'disabled' and 'readOnly' attributes in Ant Design components. It explains how to set whether a component is effective or read-only using these properties.

LANGUAGE: Markdown
CODE:
## zh-CN

通过 `disabled` 属性设置是否生效。通过 `readOnly` 属性设置是否只读。

## en-US

Configure `disabled` and `readOnly`.

----------------------------------------

TITLE: Calendar Component Description
DESCRIPTION: Multi-language documentation for a basic calendar component that provides year and month switching capabilities. The component is part of the ant-design library.

LANGUAGE: markdown
CODE:
## zh-CN

一个通用的日历面板，支持年/月切换。

## en-US

A basic calendar component with Year/Month switch.

----------------------------------------

TITLE: Locale Tag Description
DESCRIPTION: Markdown headers defining the description in Chinese (zh-CN) and English (en-US) for internal inverse color tag functionality.

LANGUAGE: markdown
CODE:
## zh-CN

内部反色标签

## en-US

Internal inverse color tag

----------------------------------------

TITLE: Documenting Dropdown Customization in Ant Design (Markdown)
DESCRIPTION: This snippet provides documentation in both Chinese and English for customizing dropdown menus in Ant Design. It explains the use of the dropdownRender prop for extending dropdown functionality and suggests using Popover for simpler cases.

LANGUAGE: Markdown
CODE:
## zh-CN

使用 `dropdownRender` 对下拉菜单进行自由扩展。如果你并不需要 Menu 内容，请直接使用 Popover 组件。

## en-US

Customize the dropdown menu via `dropdownRender`. If you don't need the Menu content, use the Popover component directly.

----------------------------------------

TITLE: Configuring Global Notification Settings in JavaScript
DESCRIPTION: Example of how to configure global settings for notifications using the notification.config method. This includes setting placement, bottom margin, duration, and RTL mode.

LANGUAGE: javascript
CODE:
notification.config({
  placement: 'bottomRight',
  bottom: 50,
  duration: 3,
  rtl: true,
});

----------------------------------------

TITLE: Tooltip Color Presets Description - Bilingual
DESCRIPTION: Documentation text explaining the availability of preset color styles for tooltips in Ant Design. The content is provided in both Chinese (zh-CN) and English (en-US) languages.

LANGUAGE: markdown
CODE:
## zh-CN

我们添加了多种预设色彩的文字提示样式，用作不同场景使用。

## en-US

We preset a series of colorful Tooltip styles for use in different situations.

----------------------------------------

TITLE: Installing Ant Design with pnpm
DESCRIPTION: Command to install the Ant Design library using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add antd

----------------------------------------

TITLE: Installing and Starting Farm Project
DESCRIPTION: Commands for creating a new Farm project, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
$ cd farm-project
$ npm install
$ npm start

----------------------------------------

TITLE: Manual File Upload Handler with Ant Design Upload Component
DESCRIPTION: Demonstrates how to implement manual file upload handling using Ant Design's Upload component. The beforeUpload prop returns false to prevent automatic upload, allowing manual control of the upload process.

LANGUAGE: TypeScript
CODE:
import { UploadOutlined } from '@ant-design/icons';
import type { UploadFile, UploadProps } from 'antd';
import { Button, Upload, message } from 'antd';
import React, { useState } from 'react';

const App: React.FC = () => {
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [uploading, setUploading] = useState(false);

  const handleUpload = () => {
    const formData = new FormData();
    fileList.forEach((file) => {
      formData.append('files[]', file as any);
    });
    setUploading(true);
    // You can use any AJAX library you like
    fetch('https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188', {
      method: 'POST',
      body: formData,
    })
      .then((res) => res.json())
      .then(() => {
        setFileList([]);
        message.success('upload successfully.');
      })
      .catch(() => {
        message.error('upload failed.');
      })
      .finally(() => {
        setUploading(false);
      });
  };

  const props: UploadProps = {
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
    beforeUpload: (file) => {
      setFileList([...fileList, file]);
      return false;
    },
    fileList,
  };

  return (
    <>
      <Upload {...props}>
        <Button icon={<UploadOutlined />}>Select File</Button>
      </Upload>
      <Button
        type="primary"
        onClick={handleUpload}
        disabled={fileList.length === 0}
        loading={uploading}
        style={{ marginTop: 16 }}
      >
        {uploading ? 'Uploading' : 'Start Upload'}
      </Button>
    </>
  );
};

export default App;

----------------------------------------

TITLE: Implementing Part Static Style Extraction
DESCRIPTION: Shows how to implement partial static style extraction with file caching using MD5 hashing for optimized performance.

LANGUAGE: tsx
CODE:
import { createHash } from 'crypto';

// Get Style content like above
const styleText = extractStyle(cache);

const hash = createHash('md5').update(styleText).digest('hex');
const cssFileName = `css-${hash.substring(0, 8)}.css`;

if (!fs.existsSync(cssFileName)) {
  fs.writeFileSync(cssFileName, styleText);
}

----------------------------------------

TITLE: Initial ConfigProvider Implementation with FormProvider
DESCRIPTION: Original implementation showing how ConfigProvider uses FormProvider from rc-field-form to handle validation messages.

LANGUAGE: tsx
CODE:
// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = React.useMemo(
    () => merge(antdDefaultValidateMessages, validateMessages),
    [validateMessages],
  );

  return (
    <FormProvider validateMessages={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </FormProvider>
  );
};

----------------------------------------

TITLE: Animated Statistic Component
DESCRIPTION: Implementation of the Statistic component with animation effects. This shows how to create dynamic, animated statistical displays.

LANGUAGE: typescript
CODE:
<code src="./demo/animated.tsx">动画效果</code>

----------------------------------------

TITLE: Styling Collapsible Panel Space Component in Ant Design
DESCRIPTION: CSS styling to set full width for space components within a collapsible panel container

LANGUAGE: css
CODE:
#collapse-demo-collapsible .ant-space {
  width: 100%;
}

----------------------------------------

TITLE: Using GetProp Utility with Select Options
DESCRIPTION: Demonstrates how to extract a specific prop type (options) from a Select component using the GetProp utility. This utility includes NonNullable handling and can work with both component instances and their props types.

LANGUAGE: typescript
CODE:
import { Select } from 'antd';
import type { GetProp, SelectProps } from 'antd';

// Both of these can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];

----------------------------------------

TITLE: Tooltip Component API Table in Markdown
DESCRIPTION: This snippet presents a markdown table detailing the API properties for the Tooltip component. It includes property names, descriptions, types, default values, and version information.

LANGUAGE: markdown
CODE:
<!-- prettier-ignore -->
| Property | Description | Type | Default | Version |
| --- | --- | --- | --- | --- |
| align | This value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align) | object | - |  |
| arrow | Change arrow's visible state and change whether the arrow is pointed at the center of target. | boolean \| { pointAtCenter: boolean } | true | 5.2.0 |
| autoAdjustOverflow | Whether to adjust popup placement automatically when popup is off screen | boolean | true |  |
| color | The background color | string | - | 4.3.0 |
| defaultOpen | Whether the floating tooltip card is open by default | boolean | false | 4.23.0 |
| destroyTooltipOnHide | Whether destroy tooltip when hidden | boolean | false |  |
| fresh | Tooltip will cache content when it is closed by default. Setting this property will always keep updating | boolean | false | 5.10.0 |
| getPopupContainer | The DOM container of the tip, the default behavior is to create a `div` element in `body` | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |
| mouseEnterDelay | Delay in seconds, before tooltip is shown on mouse enter | number | 0.1 |  |
| mouseLeaveDelay | Delay in seconds, before tooltip is hidden on mouse leave | number | 0.1 |  |
| ~~overlayClassName~~ | Class name of the tooltip card, please use `classNames={{ root: '' }}` instead | string | - |  |
| ~~overlayStyle~~ | Style of the tooltip card, please use `styles={{ root: {} }}` | React.CSSProperties | - |  |
| ~~overlayInnerStyle~~ | Style of the tooltip inner content, please use `styles={{ body: {} }}` | React.CSSProperties | - |  |
| placement | The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |
| trigger | Tooltip trigger mode. Could be multiple by passing an array | `hover` \| `focus` \| `click` \| `contextMenu` \| Array&lt;string> | `hover` |  |
| open | Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | false | 4.23.0 |
| zIndex | Config `z-index` of Tooltip | number | - |  |
| onOpenChange | Callback executed when visibility of the tooltip card is changed | (open: boolean) => void | - | 4.23.0 |

----------------------------------------

TITLE: Basic Empty Component Usage in React
DESCRIPTION: Shows how to use the Empty component with a button child element for creating new content.

LANGUAGE: jsx
CODE:
<Empty>
  <Button>创建</Button>
</Empty>

----------------------------------------

TITLE: Setting Button Icon Position with Ant Design (Markdown)
DESCRIPTION: This snippet shows how to use the 'iconPosition' prop to position icons within buttons in Ant Design. It can be set to 'start' or 'end' to place the icon at the beginning or end of the button respectively.

LANGUAGE: Markdown
CODE:
## zh-CN

通过设置 `iconPosition` 为 `start` 或 `end` 分别设置按钮图标的位置。

## en-US

You can set the position of a button's icon by setting the `iconPosition` to `start` or `end` respectively.

----------------------------------------

TITLE: Setting Button Icon Position with Ant Design (Markdown)
DESCRIPTION: This snippet shows how to use the 'iconPosition' prop to position icons within buttons in Ant Design. It can be set to 'start' or 'end' to place the icon at the beginning or end of the button respectively.

LANGUAGE: Markdown
CODE:
## zh-CN

通过设置 `iconPosition` 为 `start` 或 `end` 分别设置按钮图标的位置。

## en-US

You can set the position of a button's icon by setting the `iconPosition` to `start` or `end` respectively.

----------------------------------------

TITLE: Using GetProps to Obtain Component Props Type in TypeScript
DESCRIPTION: Shows how to use the GetProps utility to get the props type of a Checkbox.Group component. This is helpful for accessing the full props interface of a component.

LANGUAGE: typescript
CODE:
import { Checkbox } from 'antd';
import type { GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;

----------------------------------------

TITLE: Implementing Cascading Province/City/District Selection in React with Ant Design
DESCRIPTION: This code snippet demonstrates how to create a cascading selection interface for provinces, cities, and districts using Ant Design's Cascader component in a React application. It includes options for provinces and their corresponding cities and districts.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Cascader } from 'antd';

interface Option {
  value: string;
  label: string;
  children?: Option[];
}

const options: Option[] = [
  {
    value: 'zhejiang',
    label: 'Zhejiang',
    children: [
      {
        value: 'hangzhou',
        label: 'Hangzhou',
        children: [
          {
            value: 'xihu',
            label: 'West Lake',
          },
        ],
      },
    ],
  },
  {
    value: 'jiangsu',
    label: 'Jiangsu',
    children: [
      {
        value: 'nanjing',
        label: 'Nanjing',
        children: [
          {
            value: 'zhonghuamen',
            label: 'Zhong Hua Men',
          },
        ],
      },
    ],
  },
];

const onChange = (value: string[]) => {
  console.log(value);
};

const App: React.FC = () => (
  <Cascader
    options={options}
    onChange={onChange}
    placeholder="Please select"
  />
);

export default App;

----------------------------------------

TITLE: Basic Transfer Component Implementation
DESCRIPTION: Example showing basic implementation of Transfer component with rowKey prop for unique data identification.

LANGUAGE: jsx
CODE:
return <Transfer rowKey={(record) => record.uid} />;

----------------------------------------

TITLE: Custom Form Input Component - JSX
DESCRIPTION: Example of creating a custom form input component that handles controlled value updates.

LANGUAGE: jsx
CODE:
const MyInput = ({ value = '', ...rest }) => <input value={value} {...rest} />;

<Form.Item name="my">
  <MyInput />
</Form.Item>;

----------------------------------------

TITLE: Using Preset Theme Algorithms in Ant Design
DESCRIPTION: Shows how to use preset theme algorithms like dark and compact themes. It demonstrates switching algorithms and combining multiple algorithms using ConfigProvider.

LANGUAGE: tsx
CODE:
import React from 'react';
import { Button, ConfigProvider, Input, Space, theme } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      // 1. Use dark algorithm
      algorithm: theme.darkAlgorithm,

      // 2. Combine dark algorithm and compact algorithm
      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],
    }}
  >
    <Space>
      <Input placeholder="Please Input" />
      <Button type="primary">Submit</Button>
    </Space>
  </ConfigProvider>
);

export default App;

----------------------------------------

TITLE: Setting Up Mock Data for Products API
DESCRIPTION: Creation of mock data and API endpoints for products using Umi's built-in mock functionality.

LANGUAGE: ts
CODE:
import { defineMock } from 'umi';

type Product = {
  id: string;
  name: string;
};

let products: Product[] = [
  { id: '1', name: 'Umi' },
  { id: '2', name: 'Ant Design' },
  { id: '3', name: 'Ant Design Pro' },
  { id: '4', name: 'Dva' },
];

export default defineMock({
  'GET /api/products': (_, res) => {
    res.send({
      status: 'ok',
      data: products,
    });
  },
  'DELETE /api/products/:id': (req, res) => {
    products = products.filter((item) => item.id !== req.params.id);
    res.send({ status: 'ok' });
  },
});

----------------------------------------

TITLE: Defining Space Component API in TypeScript
DESCRIPTION: TypeScript interface defining the API for the Space component, including properties like align, direction, size, and split.

LANGUAGE: TypeScript
CODE:
interface SpaceProps {
  align?: 'start' | 'end' | 'center' | 'baseline';
  classNames?: Record<SemanticDOM, string>;
  direction?: 'vertical' | 'horizontal';
  size?: Size | Size[];
  split?: ReactNode;
  styles?: Record<SemanticDOM, CSSProperties>;
  wrap?: boolean;
}

----------------------------------------

TITLE: Row Component API Documentation in Markdown
DESCRIPTION: Detailed API documentation for the Row component, including alignment, gutter spacing, and justify content options.

LANGUAGE: markdown
CODE:
| 参数 | 说明 | 类型 | 默认值 | 版本 |
| --- | --- | --- | --- | --- |
| align | 垂直对齐方式 | `top` \| `middle` \| `bottom` \| `stretch` \| `{[key in 'xs' \| 'sm' \| 'md' \| 'lg' \| 'xl' \| 'xxl']: 'top' \| 'middle' \| 'bottom' \| 'stretch'}` | `top` | object: 4.24.0 |

----------------------------------------

TITLE: Configuring Form Component Variants in Ant Design
DESCRIPTION: This snippet describes the available options for changing the visual variant of all components within an Ant Design form. The variants include 'outlined', 'filled', 'borderless', and 'underlined'.

LANGUAGE: Markdown
CODE:
## zh-CN

改变表单内所有组件的变体，可选 `outlined` `filled` `borderless` `underlined` 四种形态。

## en-US

Change the variant of all components in the form, options include: `outlined` `filled` `borderless` and `underlined`.

----------------------------------------

TITLE: Configuring Form Component Variants in Ant Design
DESCRIPTION: This snippet describes the available options for changing the visual variant of all components within an Ant Design form. The variants include 'outlined', 'filled', 'borderless', and 'underlined'.

LANGUAGE: Markdown
CODE:
## zh-CN

改变表单内所有组件的变体，可选 `outlined` `filled` `borderless` `underlined` 四种形态。

## en-US

Change the variant of all components in the form, options include: `outlined` `filled` `borderless` and `underlined`.