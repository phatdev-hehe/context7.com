TITLE: Compiling Sass to CSS using Command Line
DESCRIPTION: Demonstrates how to use the sass executable to compile a .scss file to a .css file. This command takes a source Sass file and outputs a compiled CSS file.

LANGUAGE: shellsession
CODE:
sass source/stylesheets/index.scss build/stylesheets/index.css

----------------------------------------

TITLE: Creating and Using Mixins in Sass
DESCRIPTION: Demonstrates how to create a mixin with parameters and use it with @include directive.

LANGUAGE: scss
CODE:
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}

LANGUAGE: sass
CODE:
@mixin theme($theme: DarkGray)
  background: $theme
  box-shadow: 0 0 1px rgba($theme, .25)
  color: #fff

.info
  @include theme

.alert
  @include theme($theme: DarkRed)

.success
  @include theme($theme: DarkGreen)

----------------------------------------

TITLE: Using Variables in Sass
DESCRIPTION: Shows how to define and use variables in Sass for colors and font stacks.

LANGUAGE: scss
CODE:
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}

LANGUAGE: sass
CODE:
$font-stack: Helvetica, sans-serif
$primary-color: #333

body
  font: 100% $font-stack
  color: $primary-color

----------------------------------------

TITLE: Using Modules in Sass
DESCRIPTION: Shows how to use the @use rule to load Sass files as modules and reference their variables.

LANGUAGE: scss
CODE:
// _base.scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
---
// styles.scss
@use 'base';

.inverse {
  background-color: base.$primary-color;
  color: white;
}

LANGUAGE: sass
CODE:
// _base.sass
$font-stack: Helvetica, sans-serif
$primary-color: #333

body
  font: 100% $font-stack
  color: $primary-color
---
// styles.sass
@use 'base'

.inverse
  background-color: base.$primary-color
  color: white

----------------------------------------

TITLE: Compiling Sass to CSS using Command Line
DESCRIPTION: Demonstrates how to use the sass command to compile Sass files to CSS, including watching for changes.

LANGUAGE: shellsession
CODE:
sass input.scss output.css

LANGUAGE: shellsession
CODE:
sass --watch input.scss output.css

LANGUAGE: shellsession
CODE:
sass --watch app/sass:public/stylesheets

----------------------------------------

TITLE: Basic Mixin Definition and Usage in Sass
DESCRIPTION: Demonstrates creating and using simple mixins for list styling with both reset-list and horizontal-list examples.

LANGUAGE: sass
CODE:
@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin horizontal-list {
  @include reset-list;

  li {
    display: inline-block;
    margin: {
      left: -2px;
      right: 2em;
    }
  }
}

nav ul {
  @include horizontal-list;
}

----------------------------------------

TITLE: Theme Colors Mixin with SASS Conditionals
DESCRIPTION: A mixin that implements light and dark theme color switching using SASS @if and @else directives. Takes a boolean parameter to determine the theme and sets appropriate background and text colors.

LANGUAGE: sass
CODE:
$light-background: #f2ece4;
$light-text: #036;
$dark-background: #6b717f;
$dark-text: #d2e1dd;

@mixin theme-colors($light-theme: true) {
  @if $light-theme {
    background-color: $light-background;
    color: $light-text;
  } @else {
    background-color: $dark-background;
    color: $dark-text;
  }
}

.banner {
  @include theme-colors($light-theme: true);
  body.dark & {
    @include theme-colors($light-theme: false);
  }
}

----------------------------------------

TITLE: Optional Arguments in Mixins
DESCRIPTION: Demonstrates using optional arguments with default values in a text replacement mixin.

LANGUAGE: sass
CODE:
@mixin replace-text($image, $x: 50%, $y: 50%) {
  text-indent: -99999em;
  overflow: hidden;
  text-align: left;

  background: {
    image: $image;
    repeat: no-repeat;
    position: $x $y;
  }
}

.mail-icon {
  @include replace-text(url("/images/mail.svg"), 0);
}

----------------------------------------

TITLE: Declaring and Using Sass Variables in SCSS and Sass
DESCRIPTION: Demonstrates how to declare and use Sass variables for colors and border styles in both SCSS and Sass syntax.

LANGUAGE: scss
CODE:
$base-color: #c6538c;
$border-dark: rgba($base-color, 0.88);

.alert {
  border: 1px solid $border-dark;
}

LANGUAGE: sass
CODE:
$base-color: #c6538c
$border-dark: rgba($base-color, 0.88)

.alert
  border: 1px solid $border-dark

----------------------------------------

TITLE: Using Math Operators in Sass
DESCRIPTION: Demonstrates how to use math operators and functions to calculate widths in a fluid grid layout.

LANGUAGE: scss
CODE:
@use "sass:math";

.container {
  display: flex;
}

article[role="main"] {
  width: math.div(600px, 960px) * 100%;
}

aside[role="complementary"] {
  width: math.div(300px, 960px) * 100%;
  margin-left: auto;
}

LANGUAGE: sass
CODE:
@use "sass:math"

.container
  display: flex

article[role="main"]
  width: math.div(600px, 960px) * 100%

aside[role="complementary"]
  width: math.div(300px, 960px) * 100%
  margin-left: auto

----------------------------------------

TITLE: Basic Style Rule Definition in Sass
DESCRIPTION: Demonstrates basic style rule syntax for defining button styles using both SCSS and Sass formats.

LANGUAGE: scss
CODE:
.button {
  padding: 3px 10px;
  font-size: 12px;
  border-radius: 3px;
  border: 1px solid #e1e4e8;
}

LANGUAGE: sass
CODE:
.button
  padding: 3px 10px
  font-size: 12px
  border-radius: 3px
  border: 1px solid #e1e4e8

----------------------------------------

TITLE: Nesting Selectors in Sass
DESCRIPTION: Demonstrates how to nest CSS selectors in Sass, following the visual hierarchy of HTML.

LANGUAGE: scss
CODE:
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

LANGUAGE: sass
CODE:
nav
  ul
    margin: 0
    padding: 0
    list-style: none

  li
    display: inline-block

  a
    display: block
    padding: 6px 12px
    text-decoration: none

----------------------------------------

TITLE: Mixin Arguments with RTL Support
DESCRIPTION: Shows how to create a mixin with arguments for handling RTL layouts by passing property names and values.

LANGUAGE: sass
CODE:
@mixin rtl($property, $ltr-value, $rtl-value) {
  #{$property}: $ltr-value;

  [dir=rtl] & {
    #{$property}: $rtl-value;
  }
}

.sidebar {
  @include rtl(float, left, right);
}

----------------------------------------

TITLE: Property Nesting in Sass/SCSS
DESCRIPTION: Illustrates how to use property nesting to group related properties and reduce repetition, including transition properties and pseudo-selectors.

LANGUAGE: scss
CODE:
.enlarge {
  font-size: 14px;
  transition: {
    property: font-size;
    duration: 4s;
    delay: 2s;
  }

  &:hover { font-size: 36px; }
}

LANGUAGE: sass
CODE:
.enlarge
  font-size: 14px
  transition:
    property: font-size
    duration: 4s
    delay: 2s

  &:hover
    font-size: 36px

----------------------------------------

TITLE: Installing Sass globally using npm
DESCRIPTION: Shows how to install Sass globally using npm (Node Package Manager). This method installs the pure JavaScript implementation of Sass, which may be slower than other options but provides the same interface.

LANGUAGE: shellsession
CODE:
npm install -g sass

----------------------------------------

TITLE: Basic Parent Selector Usage in SCSS/Sass
DESCRIPTION: Demonstrates basic usage of the parent selector (&) for pseudo-classes, contextual styling, and pseudo-class arguments. Shows how the parent selector can be used to reference the outer selector in nested rules.

LANGUAGE: scss
CODE:
.alert {
  &:hover {
    font-weight: bold;
  }

  [dir=rtl] & {
    margin-left: 0;
    margin-right: 10px;
  }

  :not(&) {
    opacity: 0.8;
  }
}

LANGUAGE: sass
CODE:
.alert
  &:hover
    font-weight: bold

  [dir=rtl] &
    margin-left: 0
    margin-right: 10px

  :not(&)
    opacity: 0.8

----------------------------------------

TITLE: Extending Placeholder Selectors in Sass
DESCRIPTION: This example demonstrates how to define and extend placeholder selectors in Sass. It creates a %toolbelt placeholder with common styles, which is then extended by .action-buttons and .reset-buttons classes, each with their own specific color.

LANGUAGE: scss
CODE:
%toolbelt {
  box-sizing: border-box;
  border-top: 1px rgba(#000, .12) solid;
  padding: 16px 0;
  width: 100%;

  &:hover { border: 2px rgba(#000, .5) solid; }
}

.action-buttons {
  @extend %toolbelt;
  color: #4285f4;
}

.reset-buttons {
  @extend %toolbelt;
  color: #cddc39;
}

LANGUAGE: sass
CODE:
%toolbelt
  box-sizing: border-box
  border-top: 1px rgba(#000, .12) solid
  padding: 16px 0
  width: 100%

  &:hover
    border: 2px rgba(#000, .5) solid

.action-buttons
  @extend %toolbelt
  color: #4285f4


.reset-buttons
  @extend %toolbelt
  color: #cddc39

----------------------------------------

TITLE: Adjusting Color Properties in Sass
DESCRIPTION: The color.adjust() function increases or decreases one or more channels of a color by fixed amounts. It can adjust channels in the color's native space or a specified color space.

LANGUAGE: scss
CODE:
@use 'sass:color';

@debug color.adjust(#6b717f, $red: 15);  // #7a717f
@debug color.adjust(lab(40% 30 40), $lightness: 10%, $a: -20);  // lab(50% 10 40)
@debug color.adjust(#d2e1dd, $hue: 45deg, $space: oklch);
// rgb(209.7987626149, 223.8632000471, 229.3988769575)

LANGUAGE: sass
CODE:
@use 'sass:color'

@debug color.adjust(#6b717f, $red: 15)  // #7a717f
@debug color.adjust(lab(40% 30 40), $lightness: 10%, $a: -20)  // lab(50% 10 40)
@debug color.adjust(#d2e1dd, $hue: 45deg, $space: oklch)
// rgb(209.7987626149, 223.8632000471, 229.3988769575)

----------------------------------------

TITLE: Basic One-to-One Mode Usage
DESCRIPTION: Demonstrates basic one-to-one compilation mode for converting a single Sass file to CSS output.

LANGUAGE: shellsession
CODE:
sass <input.scss> [output.css]

----------------------------------------

TITLE: Using Sass Color Functions
DESCRIPTION: Demonstrates the use of Sass color functions for scaling and mixing colors, including conversions between color spaces.

LANGUAGE: scss
CODE:
@use 'sass:color';

$venus: #998099;

@debug color.scale($venus, $lightness: +15%, $space: oklch);
// rgb(170.1523703626, 144.612080603, 170.1172627174)
@debug color.mix($venus, midnightblue, $method: oklch);
// rgb(95.9363315581, 74.5687109346, 133.2082569526)

LANGUAGE: sass
CODE:
@use 'sass:color'

$venus: #998099

@debug color.scale($venus, $lightness: +15%, $space: oklch)
// rgb(170.1523703626, 144.612080603, 170.1172627174)
@debug color.mix($venus, midnightblue, $method: oklch)
// rgb(95.9363315581, 74.5687109346, 133.2082569526)

----------------------------------------

TITLE: Destructuring Lists with SASS @each Rule
DESCRIPTION: Demonstrates using @each rule to destructure a list of icon definitions into name, glyph, and size variables. Creates icon classes with corresponding properties for each item in the list.

LANGUAGE: scss
CODE:
$icons:
  "eye" "\f112" 12px,
  "start" "\f12e" 16px,
  "stop" "\f12f" 10px;

@each $name, $glyph, $size in $icons {
  .icon-#{$name}:before {
    display: inline-block;
    font-family: "Icon Font";
    content: $glyph;
    font-size: $size;
  }
}

LANGUAGE: sass
CODE:
$icons: "eye" "\f112" 12px, "start" "\f12e" 16px, "stop" "\f12f" 10px

@each $name, $glyph, $size in $icons
  .icon-#{$name}:before
    display: inline-block
    font-family: "Icon Font"
    content: $glyph
    font-size: $size

----------------------------------------

TITLE: Defining Colors in Sass
DESCRIPTION: Demonstrates various ways to define colors in Sass, including hex codes, color names, and color functions.

LANGUAGE: scss
CODE:
@debug #f2ece4; // #f2ece4
@debug #b37399aa; // rgba(179, 115, 153, 67%)
@debug midnightblue; // #191970
@debug rgb(204 102 153); // #c69
@debug lab(32.4% 38.4 -47.7 / 0.7); // lab(32.4% 38.4 -47.7 / 0.7)
@debug color(display-p3 0.597 0.732 0.576); // color(display-p3 0.597 0.732 0.576)

LANGUAGE: sass
CODE:
@debug #f2ece4  // #f2ece4
@debug #b37399aa  // rgba(179, 115, 153, 67%)
@debug midnightblue  // #191970
@debug rgb(204 102 153)  // #c69
@debug lab(32.4% 38.4 -47.7 / 0.7)  // lab(32.4% 38.4 -47.7 / 0.7)
@debug color(display-p3 0.597 0.732 0.576)  // color(display-p3 0.597 0.732 0.576)

----------------------------------------

TITLE: Many-to-Many Mode Usage
DESCRIPTION: Shows how to compile multiple Sass files to CSS or compile entire directories of Sass files.

LANGUAGE: shellsession
CODE:
sass [<input.scss>:<output.css>] [<input/>:<output/>]...

----------------------------------------

TITLE: Configuring Modules with @use in SCSS and Sass
DESCRIPTION: Demonstrates how to configure a module's default variables when loading it with @use.

LANGUAGE: scss
CODE:
// _library.scss
$-black: #000 !default;
$-border-radius: 0.25rem !default;
$-box-shadow: null !default;

@function -box-shadow() {
  @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15));
}

@mixin base-styles {
  border: 1px solid lightgray;
  border-radius: $-border-radius;
  box-shadow: -box-shadow();
}

// style.scss
@use 'library' with (
  $-black: #222,
  $-border-radius: 0.1rem
);

.post {
  @include library.base-styles;
  padding: 1rem;
  margin-bottom: 2rem;
}

LANGUAGE: sass
CODE:
// _library.sass
$-black: #000 !default
$-border-radius: 0.25rem !default
$-box-shadow: null !default

@function -box-shadow()
  @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15))

@mixin base-styles
  border: 1px solid lightgray
  border-radius: $-border-radius
  box-shadow: -box-shadow()

// style.sass
@use 'library' with ($-black: #222, $-border-radius: 0.1rem)

.post
  @include library.base-styles
  padding: 1rem
  margin-bottom: 2rem

----------------------------------------

TITLE: Defining and Using a Fibonacci Function in Sass
DESCRIPTION: This example demonstrates how to define a function that calculates Fibonacci numbers and use it in a CSS rule. It shows the syntax for defining functions, using loops, and returning values.

LANGUAGE: scss
CODE:
@function fibonacci($n) {
  $sequence: 0 1;
  @for $_ from 1 through $n {
    $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1);
    $sequence: append($sequence, $new);
  }
  @return nth($sequence, length($sequence));
}

.sidebar {
  float: left;
  margin-left: fibonacci(4) * 1px;
}

LANGUAGE: sass
CODE:
@function fibonacci($n)
  $sequence: 0 1
  @for $_ from 1 through $n
    $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1)
    $sequence: append($sequence, $new)
  @return nth($sequence, length($sequence))

.sidebar
  float: left
  margin-left: fibonacci(4) * 1px

----------------------------------------

TITLE: Deep Removing Map Values in Sass
DESCRIPTION: Demonstrates removing values from nested maps using map.deep-remove() with multiple key arguments.

LANGUAGE: scss
CODE:
@use "sass:map";

$fonts: (
  "Helvetica": (
    "weights": (
      "regular": 400,
      "medium": 500,
      "bold": 700
    )
  )
);

@debug map.deep-remove($fonts, "Helvetica", "weights", "regular");

----------------------------------------

TITLE: Defining a Button Mixin using SCSS Syntax
DESCRIPTION: This SCSS snippet demonstrates the creation of a button-base mixin. It includes various CSS properties and nested selectors for hover and disabled states.

LANGUAGE: scss
CODE:
@mixin button-base() {
  @include typography(button);
  @include ripple-surface;
  @include ripple-radius-bounded;

  display: inline-flex;
  position: relative;
  height: $button-height;
  border: none;
  vertical-align: middle;

  &:hover {
    cursor: pointer;
  }

  &:disabled {
    color: $mdc-button-disabled-ink-color;
    cursor: default;
    pointer-events: none;
  }
}

----------------------------------------

TITLE: Loading Members with @use in SCSS and Sass
DESCRIPTION: Shows how to access variables, functions, and mixins from a loaded module using the namespace provided by @use.

LANGUAGE: scss
CODE:
// src/_corners.scss
$radius: 3px;

@mixin rounded {
  border-radius: $radius;
}

// style.scss
@use "src/corners";

.button {
  @include corners.rounded;
  padding: 5px + corners.$radius;
}

LANGUAGE: sass
CODE:
// src/_corners.sass
$radius: 3px

@mixin rounded
  border-radius: $radius

// style.sass
@use "src/corners"

.button
  @include corners.rounded
  padding: 5px + corners.$radius

----------------------------------------

TITLE: Using Sass Built-In Modules in SCSS
DESCRIPTION: Demonstrates how to use the sass:color module to manipulate colors in SCSS.

LANGUAGE: scss
CODE:
@use "sass:color";

.button {
  $primary-color: #6b717f;
  color: $primary-color;
  border: 1px solid color.scale($primary-color, $lightness: 20%);
}

----------------------------------------

TITLE: Appending Values to Lists in Sass
DESCRIPTION: Demonstrates the use of the list.append() function to add values to the end of lists. Shows different separators and handling of nested lists.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.append(10px 20px, 30px); // 10px 20px 30px
@debug list.append((blue, red), green); // blue, red, green
@debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)
@debug list.append(10px, 20px, $separator: comma); // 10px, 20px
@debug list.append((blue, red), green, $separator: space); // blue red green

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.append(10px 20px, 30px)  // 10px 20px 30px
@debug list.append((blue, red), green)  // blue, red, green
@debug list.append(10px 20px, 30px 40px)  // 10px 20px (30px 40px)
@debug list.append(10px, 20px, $separator: comma)  // 10px, 20px
@debug list.append((blue, red), green, $separator: space)  // blue red green

----------------------------------------

TITLE: Content Block Usage in Mixins
DESCRIPTION: Shows how to use content blocks within mixins to create flexible hover states with custom styles.

LANGUAGE: sass
CODE:
@mixin hover {
  &:not([disabled]):hover {
    @content;
  }
}

.button {
  border: 1px solid black;
  @include hover {
    border-width: 2px;
  }
}

----------------------------------------

TITLE: Using Extend/Inheritance in Sass
DESCRIPTION: Shows how to use @extend for sharing CSS properties and creating placeholder classes.

LANGUAGE: scss
CODE:
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}

.success {
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}

LANGUAGE: sass
CODE:
%message-shared
  border: 1px solid #ccc
  padding: 10px
  color: #333

%equal-heights
  display: flex
  flex-wrap: wrap

.message
  @extend %message-shared

.success
  @extend %message-shared
  border-color: green

.error
  @extend %message-shared
  border-color: red

.warning
  @extend %message-shared
  border-color: yellow

----------------------------------------

TITLE: Configuring Libraries with @use in Sass
DESCRIPTION: Shows how to configure library variables using the 'with' clause when importing with @use.

LANGUAGE: scss
CODE:
// bootstrap.scss
$paragraph-margin-bottom: 1rem !default;

p {
  margin-top: 0;
  margin-bottom: $paragraph-margin-bottom;
}

LANGUAGE: scss
CODE:
@use "bootstrap" with (
  $paragraph-margin-bottom: 1.2rem
);

----------------------------------------

TITLE: Nesting CSS At-Rules in Sass
DESCRIPTION: This example illustrates how Sass allows nesting of at-rules within style rules, automatically swapping their positions in the output CSS. This feature simplifies the addition of conditional styling.

LANGUAGE: scss
CODE:
.print-only {
  display: none;

  @media print { display: block; }
}

LANGUAGE: sass
CODE:
.print-only
  display: none

  @media print
    display: block

----------------------------------------

TITLE: Parent Selector with BEM Methodology
DESCRIPTION: Shows how to use the parent selector to implement BEM methodology in Sass, demonstrating suffix addition for creating BEM-style class names and nested modifiers.

LANGUAGE: scss
CODE:
.accordion {
  max-width: 600px;
  margin: 4rem auto;
  width: 90%;
  font-family: "Raleway", sans-serif;
  background: #f4f4f4;

  &__copy {
    display: none;
    padding: 1rem 1.5rem 2rem 1.5rem;
    color: gray;
    line-height: 1.6;
    font-size: 14px;
    font-weight: 500;

    &--open {
      display: block;
    }
  }
}

LANGUAGE: sass
CODE:
.accordion
  max-width: 600px
  margin: 4rem auto
  width: 90%
  font-family: "Raleway", sans-serif
  background: #f4f4f4

  &__copy
    display: none
    padding: 1rem 1.5rem 2rem 1.5rem
    color: gray
    line-height: 1.6
    font-size: 14px
    font-weight: 500

    &--open
      display: block

----------------------------------------

TITLE: Changing Color Properties in Sass
DESCRIPTION: The color.change() function sets one or more channels of a color to new values. It can change channels in the color's native space or a specified color space.

LANGUAGE: scss
CODE:
@use 'sass:color';

@debug color.change(#6b717f, $red: 100);  // #64717f
@debug color.change(color(srgb 0 0.2 0.4), $red: 0.8, $blue: 0.1);
// color(srgb 0.8 0.2 0.1)
@debug color.change(#998099, $lightness: 30%, $space: oklch);
// rgb(58.0719961509, 37.2631531594, 58.4201613409)

LANGUAGE: sass
CODE:
@use 'sass:color'

@debug color.change(#6b717f, $red: 100)  // #64717f
@debug color.change(color(srgb 0 0.2 0.4), $red: 0.8, $blue: 0.1)
// color(srgb 0.8 0.2 0.1)
@debug color.change(#998099, $lightness: 30%, $space: oklch)
// rgb(58.0719961509, 37.2631531594, 58.4201613409)

----------------------------------------

TITLE: Using map.set() Function in Sass
DESCRIPTION: Demonstrates how to use the map.set() function to add new key-value pairs to a map or update existing ones.

LANGUAGE: scss
CODE:
@use "sass:map";

$font-weights: ("regular": 400, "medium": 500, "bold": 700);

@debug map.set($font-weights, "extra-bold", 900);
// ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)
@debug map.set($font-weights, "bold", 900);
// ("regular": 400, "medium": 500, "bold": 900)

LANGUAGE: sass
CODE:
@use "sass:map"

$font-weights: ("regular": 400, "medium": 500, "bold": 700)

@debug map.set($font-weights, "extra-bold": 900)
// ("regular": 400, "medium": 500, "bold": 700, "extra-bold": 900)
@debug map.set($font-weights, "bold", 900)
// ("regular": 400, "medium": 500, "bold": 900)

----------------------------------------

TITLE: Generating Unique IDs in Sass
DESCRIPTION: The string.unique-id() function returns a randomly-generated unquoted string that's guaranteed to be a valid CSS identifier and unique within the current Sass compilation.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.unique-id(); // uabtrnzug
@debug string.unique-id(); // u6w1b1def

----------------------------------------

TITLE: Iterating with SASS @for Loop
DESCRIPTION: Demonstrates using @for loop to create sequential nth-child selectors with progressively lighter background colors. The example shows how to interpolate the loop variable and use it in calculations for color manipulation.

LANGUAGE: scss
CODE:
$base-color: #036;

@for $i from 1 through 3 {
  ul:nth-child(3n + #{$i}) {
    background-color: lighten($base-color, $i * 5%);
  }
}

LANGUAGE: sass
CODE:
$base-color: #036

@for $i from 1 through 3
  ul:nth-child(3n + #{$i})
    background-color: lighten($base-color, $i * 5%)

----------------------------------------

TITLE: Basic Calculations in Sass
DESCRIPTION: Demonstrates basic usage of calc(), min(), and other calculation functions in Sass. Shows how Sass simplifies calculations where possible.

LANGUAGE: scss
CODE:
@debug calc(400px + 10%); // calc(400px + 10%)
@debug calc(400px / 2); // 200px
@debug min(100px, calc(1rem + 10%)); // min(100px, 1rem + 10%)

LANGUAGE: sass
CODE:
@debug calc(400px + 10%)  // calc(400px + 10%)
@debug calc(400px / 2)  // 200px
@debug min(100px, calc(1rem + 10%)) ; // min(100px, 1rem + 10%)

----------------------------------------

TITLE: Interpolation in SassScript for Dynamic Animation Names
DESCRIPTION: Shows how to use interpolation in SassScript to generate unique animation names and create inline keyframe animations.

LANGUAGE: scss
CODE:
@mixin inline-animation($duration) {
  $name: inline-#{unique-id()};

  @keyframes #{$name} {
    @content;
  }

  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: infinite;
}

.pulse {
  @include inline-animation(2s) {
    from { background-color: yellow }
    to { background-color: red }
  }
}

LANGUAGE: sass
CODE:
@mixin inline-animation($duration)
  $name: inline-#{unique-id()}

  @keyframes #{$name}
    @content


  animation-name: $name
  animation-duration: $duration
  animation-iteration-count: infinite


.pulse
  @include inline-animation(2s)
    from
      background-color: yellow
    to
      background-color: red

LANGUAGE: css
CODE:
.pulse {
  animation-name: inline-uifpe6h;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}
@keyframes inline-uifpe6h {
  from {
    background-color: yellow;
  }
  to {
    background-color: red;
  }
}

----------------------------------------

TITLE: Demonstrating @content Arguments in Sass Mixins
DESCRIPTION: Shows how to use @content arguments in a mixin to create responsive media queries with type-specific styles.

LANGUAGE: scss
CODE:
@mixin media($types...) {
  @each $type in $types {
    @media #{$type} {
      @content($type);
    }
  }
}

@include media(screen, print) using ($type) {
  h1 {
    font-size: 40px;
    @if $type == print {
      font-family: Calluna;
    }
  }
}

LANGUAGE: css
CODE:
@media screen {
  h1 {
    font-size: 40px;
  }
}
@media print {
  h1 {
    font-size: 40px;
    font-family: Calluna;
  }
}

----------------------------------------

TITLE: Using map.get() Function in Sass
DESCRIPTION: Demonstrates how to use the map.get() function to retrieve a value from a map using a key.

LANGUAGE: scss
CODE:
@use "sass:map";

$font-weights: ("regular": 400, "medium": 500, "bold": 700);

.icon {
  font-weight: map.get($font-weights, "medium");
}

// Compiles to:
// .icon {
//   font-weight: 500;
// }

----------------------------------------

TITLE: Implementing Error Handling in Sass Mixin
DESCRIPTION: This snippet demonstrates a Sass mixin that uses @error to validate input parameters. It checks if the $property argument is either 'left' or 'right', throwing an error if it's not. The mixin then sets CSS properties based on the input.

LANGUAGE: sass
CODE:
@mixin reflexive-position($property, $value)
  @if $property != left and $property != right
    @error "Property #{$property} must be either left or right."


  $left-value: if($property == right, initial, $value)
  $right-value: if($property == right, $value, initial)

  left: $left-value
  right: $right-value
  [dir=rtl] &
    left: $right-value
    right: $left-value



.sidebar
  @include reflexive-position(top, 12px)
  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // Error: Property top must be either left or right.

----------------------------------------

TITLE: Demonstrating null Values in Sass Functions
DESCRIPTION: Shows various ways null values can be returned from Sass functions and operations using the string and map modules. Demonstrates how null represents the absence of a value.

LANGUAGE: scss
CODE:
@use "sass:map";
@use "sass:string";

@debug string.index("Helvetica Neue", "Roboto"); // null
@debug map.get(("large": 20px), "small"); // null
@debug &; // null

----------------------------------------

TITLE: Basic HTML and CSS Example
DESCRIPTION: Demonstrates a common use case for @extend with BEM methodology showing both HTML structure and CSS styling.

LANGUAGE: html
CODE:
<div class="error error--serious">
  Oh no! You've been hacked!
</div>

LANGUAGE: css
CODE:
.error {
  border: 1px #f00;
  background-color: #fdd;
}

.error--serious {
  border-width: 3px;
}

----------------------------------------

TITLE: Using @each Rule with Maps in Sass
DESCRIPTION: Shows how to use the @each rule to iterate over key-value pairs in a map and generate styles.

LANGUAGE: scss
CODE:
$icons: ("eye": "\f112", "start": "\f12e", "stop": "\f12f");

@each $name, $glyph in $icons {
  .icon-#{$name}:before {
    display: inline-block;
    font-family: "Icon Font";
    content: $glyph;
  }
}

// Compiles to:
// .icon-eye:before {
//   display: inline-block;
//   font-family: "Icon Font";
//   content: "\f112";
// }
// 
// .icon-start:before {
//   display: inline-block;
//   font-family: "Icon Font";
//   content: "\f12e";
// }
// 
// .icon-stop:before {
//   display: inline-block;
//   font-family: "Icon Font";
//   content: "\f12f";
// }

----------------------------------------

TITLE: Basic SASS @forward Usage Example
DESCRIPTION: Demonstrates basic usage of @forward rule to expose a list-reset mixin from a source file through a bootstrap file to the main stylesheet.

LANGUAGE: scss
CODE:
// src/_list.scss
@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

// bootstrap.scss
@forward "src/list";

// styles.scss
@use "bootstrap";

li {
  @include bootstrap.list-reset;
}

----------------------------------------

TITLE: Implementing Prefix Validation with @warn in Sass
DESCRIPTION: Demonstrates using @warn to validate CSS vendor prefixes in a mixin. The mixin checks if provided prefixes are in a known list and warns about unknown prefixes while still generating the prefixed CSS properties.

LANGUAGE: scss
CODE:
$known-prefixes: webkit, moz, ms, o;

@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if not index($known-prefixes, $prefix) {
      @warn "Unknown prefix #{$prefix}.";
    }

    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

.tilt {
  // Oops, we typo'd "webkit" as "wekbit"!
  @include prefix(transform, rotate(15deg), wekbit ms);
}

LANGUAGE: sass
CODE:
$known-prefixes: webkit, moz, ms, o

@mixin prefix($property, $value, $prefixes)
  @each $prefix in $prefixes
    @if not index($known-prefixes, $prefix)
      @warn "Unknown prefix #{$prefix}."


    -#{$prefix}-#{$property}: $value

  #{$property}: $value


.tilt
  // Oops, we typo'd "webkit" as "wekbit"!
  @include prefix(transform, rotate(15deg), wekbit ms)

LANGUAGE: css
CODE:
.tilt {
  -wekbit-transform: rotate(15deg);
  -ms-transform: rotate(15deg);
  transform: rotate(15deg);
}

----------------------------------------

TITLE: Using selector.extend Function in Sass
DESCRIPTION: Demonstrates the extend function, which applies @extend-like behavior to selectors programmatically.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.extend("a.disabled", "a", ".link");  // a.disabled, .link.disabled
@debug selector.extend("a.disabled", "h1", "h2");  // a.disabled
@debug selector.extend(".guide .info", ".info", ".content nav.sidebar");
// .guide .info, .guide .content nav.sidebar, .content .guide nav.sidebar

----------------------------------------

TITLE: Using math.div() for Division in Sass
DESCRIPTION: Demonstrates the correct usage of math.div() function for division operations in future Sass versions, compared to the deprecated slash operator.

LANGUAGE: scss
CODE:
@use "sass:math";

.item3 {
  $row: span math.div(6, 2) / 7; // A two-element slash-separated list.
  grid-row: $row;
}

LANGUAGE: sass
CODE:
@use "sass:math"

.item3
  $row: span math.div(6, 2) / 7 // A two-element slash-separated list.
  grid-row: $row

----------------------------------------

TITLE: Demonstrating First-Class Functions in Sass
DESCRIPTION: This snippet shows how to use functions as values in Sass. It defines a higher-order function 'transform' that takes a list and a function as arguments, then applies the function to each item in the list.

LANGUAGE: scss
CODE:
@use 'sass:list';
@use 'sass:meta';

@function transform($list, $function) {
  $result: ();
  @each $item in $list {
    $result: list.append($result, meta.call($function, $item));
  }
  @return $result;
}

@function double($number) {
  @return $number * 2;
}

.powers-of-two {
  // Prints (2, 4, 8, 16)
  contents: transform((1, 2, 3, 4), meta.get-function(double));
}

----------------------------------------

TITLE: Displaying Sass Error Output
DESCRIPTION: This snippet shows the error output format when running Dart Sass from the command line. It displays the error message, the line where the error occurred, and the call stack.

LANGUAGE: text
CODE:
Error: "Property top must be either left or right."
  ╷
3 │     @error "Property #{$property} must be either left or right.";
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  ╵
  example.scss 3:5   reflexive-position()
  example.scss 19:3  root stylesheet

----------------------------------------

TITLE: Using selector.nest Function in Sass
DESCRIPTION: Shows how to use the nest function to combine selectors as if they were nested in a stylesheet.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.nest("ul", "li");  // ul li
@debug selector.nest(".alert, .warning", "p");  // .alert p, .warning p
@debug selector.nest(".alert", "&:hover");  // .alert:hover
@debug selector.nest(".accordion", "&__copy");  // .accordion__copy

----------------------------------------

TITLE: Implementing a Scale-Below Function Using @while in SASS
DESCRIPTION: This snippet demonstrates a function 'scale-below' that uses a @while loop to divide a value by a ratio until it falls below a base value. It's used to calculate a smaller font size for superscript text.

LANGUAGE: scss
CODE:
@use "sass:math";

/// Divides `$value` by `$ratio` until it's below `$base`.
@function scale-below($value, $base, $ratio: 1.618) {
  @while $value > $base {
    $value: math.div($value, $ratio);
  }
  @return $value;
}

$normal-font-size: 16px;
sup {
  font-size: scale-below(20px, 16px);
}

LANGUAGE: sass
CODE:
@use "sass:math"

/// Divides `$value` by `$ratio` until it's below `$base`.
@function scale-below($value, $base, $ratio: 1.618)
  @while $value > $base
    $value: math.div($value, $ratio)
  @return $value



$normal-font-size: 16px
sup
  font-size: scale-below(20px, 16px)

----------------------------------------

TITLE: Nested Map Access in Sass
DESCRIPTION: Demonstrates how to access deeply nested values in Sass maps using map.get() with multiple key arguments.

LANGUAGE: scss
CODE:
@use "sass:map";

$config: (a: (b: (c: d)));
@debug map.get($config, a, b, c); // d

----------------------------------------

TITLE: Joining Lists in Sass
DESCRIPTION: Demonstrates the use of the list.join() function to combine two lists, with options for separator and brackets.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px
@debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def
@debug list.join(10px, 20px); // 10px 20px
@debug list.join(10px, 20px, $separator: comma); // 10px, 20px
@debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def
@debug list.join([10px], 20px); // [10px 20px]
@debug list.join(10px, 20px, $bracketed: true); // [10px 20px]

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.join(10px 20px, 30px 40px)  // 10px 20px 30px 40px
@debug list.join((blue, red), (#abc, #def))  // blue, red, #abc, #def
@debug list.join(10px, 20px)  // 10px 20px
@debug list.join(10px, 20px, comma)  // 10px, 20px
@debug list.join((blue, red), (#abc, #def), space)  // blue red #abc #def
@debug list.join([10px], 20px)  // [10px 20px]
@debug list.join(10px, 20px, $bracketed: true)  // [10px 20px]

----------------------------------------

TITLE: Using Trigonometric Functions in SASS
DESCRIPTION: Examples of trigonometric calculations using sin, cos, tan and their inverse functions

LANGUAGE: sass
CODE:
@use 'sass:math';

@debug math.sin(100deg); // 0.984807753
@debug math.cos(1rad); // 0.5403023059
@debug math.tan(1); // 1.5574077247

----------------------------------------

TITLE: Basic Property Declaration with SassScript in Sass/SCSS
DESCRIPTION: Demonstrates using SassScript expressions in property declarations, including variable usage and arithmetic operations.

LANGUAGE: scss
CODE:
.circle {
  $size: 100px;
  width: $size;
  height: $size;
  border-radius: $size * 0.5;
}

LANGUAGE: sass
CODE:
.circle
  $size: 100px
  width: $size
  height: $size
  border-radius: $size * 0.5

----------------------------------------

TITLE: Using Maps for Dynamic Variable Names in SCSS and Sass
DESCRIPTION: Demonstrates how to use maps as an alternative to dynamic variable names, allowing for variable-based access to values.

LANGUAGE: scss
CODE:
@use "sass:map";

$theme-colors: (
  "success": #28a745,
  "info": #17a2b8,
  "warning": #ffc107,
);

.alert {
  // Instead of $theme-color-#{warning}
  background-color: map.get($theme-colors, "warning");
}

LANGUAGE: sass
CODE:
@use "sass:map"

$theme-colors: ("success": #28a745, "info": #17a2b8, "warning": #ffc107)

.alert
  // Instead of $theme-color-#{warning}
  background-color: map.get($theme-colors, "warning")

----------------------------------------

TITLE: Module Variables Inspection
DESCRIPTION: Example showing how to inspect variables defined in a module using meta.module-variables().

LANGUAGE: scss
CODE:
// _variables.scss
$hopbush: #c69;
$midnight-blue: #036;
$wafer: #e1d7d2;

@use "sass:meta";
@use "variables";

@debug meta.module-variables("variables");

----------------------------------------

TITLE: Using SassScript in @supports Rules
DESCRIPTION: This snippet illustrates how Sass allows the use of SassScript expressions in @supports declaration queries, enabling more dynamic feature detection and styling.

LANGUAGE: scss
CODE:
@mixin sticky-position {
  position: fixed;
  @supports (position: sticky) {
    position: sticky;
  }
}

.banner {
  @include sticky-position;
}

LANGUAGE: sass
CODE:
@mixin sticky-position
  position: fixed
  @supports (position: sticky)
    position: sticky



.banner
  @include sticky-position

----------------------------------------

TITLE: Property Interpolation in Sass/SCSS
DESCRIPTION: Shows how to use interpolation to dynamically generate property names, including a mixin for vendor prefixing.

LANGUAGE: scss
CODE:
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

.gray {
  @include prefix(filter, grayscale(50%), moz webkit);
}

LANGUAGE: sass
CODE:
@mixin prefix($property, $value, $prefixes)
  @each $prefix in $prefixes
    -#{$prefix}-#{$property}: $value

  #{$property}: $value


.gray
  @include prefix(filter, grayscale(50%), moz webkit)

----------------------------------------

TITLE: Demonstrating Basic CSS At-Rules in Sass
DESCRIPTION: This snippet shows how Sass supports standard CSS at-rules like @namespace, @font-face, and @counter-style. It demonstrates that Sass preserves the structure of these rules while allowing for both SCSS and Sass syntax.

LANGUAGE: scss
CODE:
@namespace svg url(http://www.w3.org/2000/svg);

@font-face {
  font-family: "Open Sans";
  src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2");
}

@counter-style thumbs {
  system: cyclic;
  symbols: "\1F44D";
}

LANGUAGE: sass
CODE:
@namespace svg url(http://www.w3.org/2000/svg)

@font-face
  font-family: "Open Sans"
  src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2")

@counter-style thumbs
  system: cyclic
  symbols: "\1F44D"

----------------------------------------

TITLE: Converting String to Uppercase in Sass
DESCRIPTION: The string.to-upper-case() function returns a copy of the string with ASCII letters converted to uppercase. It works with both quoted and unquoted strings.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.to-upper-case("Bold"); // "BOLD"
@debug string.to-upper-case(sans-serif); // SANS-SERIF

----------------------------------------

TITLE: Map Iteration with @each
DESCRIPTION: Shows how to iterate over map key-value pairs using the @each directive to generate CSS rules. This example creates font sizes for different heading levels.

LANGUAGE: scss
CODE:
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}

----------------------------------------

TITLE: Custom Properties (CSS Variables) in Sass/SCSS
DESCRIPTION: Demonstrates how to define and use CSS custom properties (variables) in Sass, including the use of interpolation for dynamic values.

LANGUAGE: scss
CODE:
$primary: #81899b;
$accent: #302e24;
$warn: #dfa612;

:root {
  --primary: #{$primary};
  --accent: #{$accent};
  --warn: #{$warn};

  // Even though this looks like a Sass variable, it's valid CSS so it's not
  // evaluated.
  --consumed-by-js: $primary;
}

LANGUAGE: sass
CODE:
$primary: #81899b
$accent: #302e24
$warn: #dfa612

:root
  --primary: #{$primary}
  --accent: #{$accent}
  --warn: #{$warn}

  // Even though this looks like a Sass variable, it's valid CSS so it's not
  // evaluated.
  --consumed-by-js: $primary

----------------------------------------

TITLE: Creating Alert Components in HTML
DESCRIPTION: This snippet demonstrates how to create alert components using HTML and Sass classes. It includes examples of a default alert and an info alert.

LANGUAGE: HTML
CODE:
<div class="sl-c-alert">
  <div class="sl-l-container">
    <p>
      <strong>Alert</strong>
      {% lorem 'sentence' %}
    </p>
  </div>
</div>

<div class="sl-c-alert sl-c-alert--info">
  <div class="sl-l-container">
    <p>
      <strong>Info Alert</strong>
      {% lorem 'sentence' %}
    </p>
  </div>
</div>

----------------------------------------

TITLE: Retrieving Color Channel Values in Sass
DESCRIPTION: The color.channel() function returns the value of a specified channel in a given color space. It supports various color spaces and channels.

LANGUAGE: scss
CODE:
@use 'sass:color';

@debug color.channel(hsl(80deg 30% 50%), "hue");  // 80deg
@debug color.channel(hsl(80deg 30% 50%), "hue", $space: oklch);  // 124.279238779deg
@debug color.channel(hsl(80deg 30% 50%), "red", $space: rgb);  // 140.25

LANGUAGE: sass
CODE:
@use 'sass:color'

@debug color.channel(hsl(80deg 30% 50%), "hue")  // 80deg
@debug color.channel(hsl(80deg 30% 50%), "hue", $space: oklch)  // 124.279238779deg
@debug color.channel(hsl(80deg 30% 50%), "red", $space: rgb)  // 140.25

----------------------------------------

TITLE: Calculation Operations in Sass
DESCRIPTION: Demonstrates how calculations can be used within other calc() functions, but not with normal SassScript operations.

LANGUAGE: scss
CODE:
$width: calc(100% + 10px);
@debug $width * 2; // Error!
@debug calc($width * 2); // calc((100% + 10px) * 2);

LANGUAGE: sass
CODE:
$width: calc(100% + 10px);
@debug $width * 2; // Error!
@debug calc($width * 2); // calc((100% + 10px) * 2);

----------------------------------------

TITLE: Using selector.simple-selectors Function in Sass
DESCRIPTION: Shows how to use the simple-selectors function to break down a compound selector into its component parts.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.simple-selectors("a.disabled");  // a, .disabled
@debug selector.simple-selectors("main.blog:after");  // main, .blog, :after

----------------------------------------

TITLE: Converting Between Quoted and Unquoted Strings in Sass
DESCRIPTION: Demonstrates using string.quote() and string.unquote() functions to convert between quoted and unquoted strings.

LANGUAGE: sass
CODE:
@use "sass:string";

@debug string.unquote(".widget:hover"); // .widget:hover
@debug string.quote(bold); // "bold"

----------------------------------------

TITLE: List Index Example in Sass
DESCRIPTION: Demonstrates using list.index() function to find elements in a list and handle invalid inputs with error messaging.

LANGUAGE: sass
CODE:
@use "sass:list"

$valid-sides: top, bottom, left, right

@mixin attach($side)
  @if not list.index($valid-sides, $side)
    @error "#{$side} is not a valid side. Expected one of #{$valid-sides}."

  // ...

----------------------------------------

TITLE: Getting List Length in Sass
DESCRIPTION: Shows how to use the list.length() function to determine the number of elements in a list or pairs in a map.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.length(10px); // 1
@debug list.length(10px 20px 30px); // 3
@debug list.length((width: 10px, height: 20px)); // 2

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.length(10px)  // 1
@debug list.length(10px 20px 30px)  // 3
@debug list.length((width: 10px, height: 20px))  // 2

----------------------------------------

TITLE: Using selector.is-superselector Function in Sass
DESCRIPTION: Demonstrates the usage of the is-superselector function, which checks if one selector matches all elements that another selector matches.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.is-superselector("a", "a.disabled"); // true
@debug selector.is-superselector("a.disabled", "a"); // false
@debug selector.is-superselector("a", "sidebar a"); // true
@debug selector.is-superselector("sidebar a", "a"); // false
@debug selector.is-superselector("a", "a"); // true

----------------------------------------

TITLE: Interpolation in Sass Mixins and Selectors
DESCRIPTION: Demonstrates using interpolation within a mixin to dynamically generate class names and property values based on parameters.

LANGUAGE: scss
CODE:
@mixin corner-icon($name, $top-or-bottom, $left-or-right) {
  .icon-#{$name} {
    background-image: url("/icons/#{$name}.svg");
    position: absolute;
    #{$top-or-bottom}: 0;
    #{$left-or-right}: 0;
  }
}

@include corner-icon("mail", top, left);

LANGUAGE: sass
CODE:
@mixin corner-icon($name, $top-or-bottom, $left-or-right)
  .icon-#{$name}
    background-image: url("/icons/#{$name}.svg")
    position: absolute
    #{$top-or-bottom}: 0
    #{$left-or-right}: 0



@include corner-icon("mail", top, left)

----------------------------------------

TITLE: Basic Numeric Operations in Sass
DESCRIPTION: Demonstrates basic arithmetic operations with numbers including addition, subtraction, multiplication, and modulo. Shows how Sass handles units in calculations.

LANGUAGE: sass
CODE:
@debug 10s + 15s; // 25s
@debug 1in - 10px; // 0.8958333333in
@debug 5px * 3px; // 15px*px
@debug 1in % 9px; // 0.0625in

----------------------------------------

TITLE: String Escape Sequences in Sass
DESCRIPTION: Shows various ways to use escape sequences in Sass strings, including Unicode characters and special characters.

LANGUAGE: sass
CODE:
@debug "\""; // '"'
@debug \.widget; // \.widget
@debug "\a"; // "\a" (a string containing only a newline)
@debug "line1\a line2"; // "line1\a line2"
@debug "Nat + Liz \1F46D"; // "Nat + Liz 👭"

----------------------------------------

TITLE: Creating a Sass Function with Arbitrary Arguments
DESCRIPTION: This example shows how to create a function that accepts an arbitrary number of arguments using the ... syntax. It demonstrates a sum function that can take any number of numeric inputs.

LANGUAGE: scss
CODE:
@function sum($numbers...) {
  $sum: 0;
  @each $number in $numbers {
    $sum: $sum + $number;
  }
  @return $sum;
}

.micro {
  width: sum(50px, 30px, 100px);
}

LANGUAGE: sass
CODE:
@function sum($numbers...)
  $sum: 0
  @each $number in $numbers
    $sum: $sum + $number

  @return $sum


.micro
  width: sum(50px, 30px, 100px)

----------------------------------------

TITLE: Meta Function Examples
DESCRIPTION: Examples showing usage of various meta functions for type checking, function existence, and value inspection.

LANGUAGE: scss
CODE:
@use "sass:meta";

@debug meta.type-of(10px); // number
@debug meta.function-exists("scale-color"); // true
@debug meta.inspect(10px 20px 30px); // unquote("10px 20px 30px")

----------------------------------------

TITLE: Comparing Numbers with Relational Operators in Sass
DESCRIPTION: Demonstrates the use of relational operators (<, <=, >, >=) with numbers in Sass. Shows comparisons between different numeric values, including those with compatible units.

LANGUAGE: sass
CODE:
@debug 100 > 50; // true
@debug 10px < 17px; // true
@debug 96px >= 1in; // true
@debug 1000ms <= 1s; // true

----------------------------------------

TITLE: String Index Operations in Sass
DESCRIPTION: Demonstrates using string functions to find character positions and slice strings using positive and negative indexes.

LANGUAGE: sass
CODE:
@use "sass:string";

@debug string.index("Helvetica Neue", "Helvetica"); // 1
@debug string.index("Helvetica Neue", "Neue"); // 11
@debug string.slice("Roboto Mono", -4); // "Mono"

----------------------------------------

TITLE: Using Optional Arguments in Sass Functions
DESCRIPTION: This example shows how to define a function with optional arguments using default values. It demonstrates creating a color inversion function with a customizable amount parameter.

LANGUAGE: scss
CODE:
@function invert($color, $amount: 100%) {
  $inverse: change-color($color, $hue: hue($color) + 180);
  @return mix($inverse, $color, $amount);
}

$primary-color: #036;
.header {
  background-color: invert($primary-color, 80%);
}

LANGUAGE: sass
CODE:
@function invert($color, $amount: 100%)
  $inverse: change-color($color, $hue: hue($color) + 180)
  @return mix($inverse, $color, $amount)


$primary-color: #036
.header
  background-color: invert($primary-color, 80%)

----------------------------------------

TITLE: Demonstrating Sass Equality Operators
DESCRIPTION: Examples showing how equality operators work with different Sass data types including numbers, strings, colors, lists, maps, calculations, booleans, null, and functions. Demonstrates both equality (==) and inequality (!=) comparisons.

LANGUAGE: sass
CODE:
@debug 1px == 1px; // true
@debug 1px != 1em; // true
@debug 1 != 1px; // true
@debug 96px == 1in; // true

@debug "Helvetica" == Helvetica; // true
@debug "Helvetica" != "Arial"; // true

@debug hsl(34, 35%, 92.1%) == #f2ece4; // true
@debug rgba(179, 115, 153, 0.5) != rgba(179, 115, 153, 0.8); // true

@debug (5px 7px 10px) == (5px 7px 10px); // true
@debug (5px 7px 10px) != (10px 14px 20px); // true
@debug (5px 7px 10px) != (5px, 7px, 10px); // true
@debug (5px 7px 10px) != [5px 7px 10px]; // true

$theme: ("venus": #998099, "nebula": #d2e1dd);
@debug $theme == ("venus": #998099, "nebula": #d2e1dd); // true
@debug $theme != ("venus": #998099, "iron": #dadbdf); // true

@debug true == true; // true
@debug true != false; // true
@debug null != false; // true

@debug get-function("rgba") == get-function("rgba"); // true
@debug get-function("rgba") != get-function("hsla"); // true

----------------------------------------

TITLE: Managing Color Gamuts in Sass
DESCRIPTION: Demonstrates how to check if colors are in gamut and adjust them to fit within specific gamuts using Sass color functions.

LANGUAGE: scss
CODE:
@use 'sass:color';
$extra-pink: color(display-p3 0.951 0.457 0.7569);

// result: true, for display-p3 gamut
@debug color.is-in-gamut($extra-pink);

// result: false, for srgb gamut
@debug color.is-in-gamut($extra-pink, $space: srgb);

$extra-pink: oklch(90% 90% 0deg);

// result: oklch(68.3601568298% 0.290089749 338.3604392249deg)
@debug color.to-gamut($extra-pink, srgb, clip);

// result: oklch(88.7173946522% 0.0667320674 355.3282956627deg)
@debug color.to-gamut($extra-pink, srgb, local-minde);

----------------------------------------

TITLE: Creating Complementary Colors in Sass
DESCRIPTION: The color.complement() function returns the complement of a color in a specified color space by rotating the hue by 180 degrees.

LANGUAGE: scss
CODE:
@use 'sass:color';

// HSL hue 222deg becomes 42deg.
@debug color.complement(#6b717f);  // #7f796b

// Oklch hue 267.1262408996deg becomes 87.1262408996deg
@debug color.complement(#6b717f, oklch);
// rgb(118.8110604298, 112.5123650034, 98.1616586336)

// Hue 70deg becomes 250deg.
@debug color.complement(oklch(50% 0.12 70deg), oklch);  // oklch(50% 0.12 250deg)

LANGUAGE: sass
CODE:
@use 'sass:color'

// HSL hue 222deg becomes 42deg.
@debug color.complement(#6b717f)  // #7f796b

// Oklch hue 267.1262408996deg becomes 87.1262408996deg
@debug color.complement(#6b717f, oklch) 
// rgb(118.8110604298, 112.5123650034, 98.1616586336)

// Hue 70deg becomes 250deg.
@debug color.complement(oklch(50% 0.12 70deg), oklch)  // oklch(50% 0.12 250deg)

----------------------------------------

TITLE: Using selector.parse Function in Sass
DESCRIPTION: Demonstrates how to use the parse function to convert a selector string into the internal selector value format.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.parse(".main aside:hover, .sidebar p");
// ((unquote(".main") unquote("aside:hover")),
//  (unquote(".sidebar") unquote("p")))

----------------------------------------

TITLE: Demonstrating Boolean Operations in Sass
DESCRIPTION: This snippet shows various boolean operations and comparisons in Sass, including equality checks, relational operators, and the use of the math module for comparability.

LANGUAGE: sass
CODE:
@use "sass:math";

@debug 1px == 2px; // false
@debug 1px == 1px; // true
@debug 10px < 3px; // false
@debug math.comparable(100px, 3in); // true

LANGUAGE: sass
CODE:
@use "sass:math"

@debug 1px == 2px  // false
@debug 1px == 1px  // true
@debug 10px < 3px  // false
@debug math.comparable(100px, 3in)  // true

----------------------------------------

TITLE: Performing Bounding Operations in SASS
DESCRIPTION: Examples of using ceil, floor, round and clamp functions for number bounding

LANGUAGE: sass
CODE:
@use 'sass:math';

@debug math.ceil(4.2); // 5
@debug math.floor(4.9); // 4
@debug math.round(4.2); // 4
@debug math.clamp(-1, 0, 1); // 0

----------------------------------------

TITLE: Using the Global LCH Function in SCSS
DESCRIPTION: Demonstrates the usage of the global lch() function to create colors using lightness, chroma, and hue values.

LANGUAGE: scss
CODE:
@debug lch(50% 10 270deg); // lch(50% 10 270deg)
@debug lch(80% 50% 0.2turn / 0.5); // lch(80% 75 72deg / 0.5);

----------------------------------------

TITLE: Accessing Mathematical Constants in SASS
DESCRIPTION: Examples of using built-in mathematical constants like e and pi in SASS

LANGUAGE: sass
CODE:
@use 'sass:math';

@debug math.$e; // 2.7182818285
@debug math.$pi; // 3.1415926536

----------------------------------------

TITLE: Defining @keyframes Rules in Sass
DESCRIPTION: This example demonstrates how Sass handles @keyframes rules, allowing the definition of animation keyframes using percentage values or keywords like 'from' and 'to'.

LANGUAGE: scss
CODE:
@keyframes slide-in {
  from {
    margin-left: 100%;
    width: 300%;
  }

  70% {
    margin-left: 90%;
    width: 150%;
  }

  to {
    margin-left: 0%;
    width: 100%;
  }
}

LANGUAGE: sass
CODE:
@keyframes slide-in
  from
    margin-left: 100%
    width: 300%


  70%
    margin-left: 90%
    width: 150%


  to
    margin-left: 0%
    width: 100%

----------------------------------------

TITLE: Using @return in Sass Functions
DESCRIPTION: This example shows how to use the @return at-rule in a Sass function. It demonstrates a string insertion function with early returns for edge cases.

LANGUAGE: scss
CODE:
@use "sass:string";

@function str-insert($string, $insert, $index) {
  // Avoid making new strings if we don't need to.
  @if string.length($string) == 0 {
    @return $insert;
  }

  $before: string.slice($string, 0, $index);
  $after: string.slice($string, $index);
  @return $before + $insert + $after;
}

LANGUAGE: sass
CODE:
@use "sass:string"

@function str-insert($string, $insert, $index)
  // Avoid making new strings if we don't need to.
  @if string.length($string) == 0
    @return $insert


  $before: string.slice($string, 0, $index)
  $after: string.slice($string, $index)
  @return $before + $insert + $after

----------------------------------------

TITLE: Using the Global OKLCH Function in SCSS
DESCRIPTION: Demonstrates the usage of the global oklch() function to create colors using perceptually-uniform lightness, chroma, and hue values.

LANGUAGE: scss
CODE:
@debug oklch(50% 0.3 270deg); // oklch(50% 0.3 270deg)
@debug oklch(80% 50% 0.2turn / 0.5); // oklch(80% 0.2 72deg / 0.5);

----------------------------------------

TITLE: Working with Units in SASS
DESCRIPTION: Examples of unit manipulation and compatibility checking functions

LANGUAGE: sass
CODE:
@use 'sass:math';

@debug math.compatible(2px, 1px); // true
@debug math.is-unitless(100); // true
@debug math.unit(100px); // "px"

----------------------------------------

TITLE: Quoting Strings in Sass
DESCRIPTION: The string.quote() function returns a string as a quoted string. It works with both unquoted and already quoted strings.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.quote(Helvetica); // "Helvetica"
@debug string.quote("Helvetica"); // "Helvetica"

----------------------------------------

TITLE: Using selector.append Function in Sass
DESCRIPTION: Shows how to use the append function to combine selectors without descendant combinators.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.append("a", ".disabled");  // a.disabled
@debug selector.append(".accordion", "__copy");  // .accordion__copy
@debug selector.append(".accordion", "__copy, __image");
// .accordion__copy, .accordion__image

----------------------------------------

TITLE: Unquoting Strings in Sass
DESCRIPTION: The string.unquote() function returns a string as an unquoted string. This can produce strings that aren't valid CSS, so it should be used with caution.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.unquote("Helvetica"); // Helvetica
@debug string.unquote(".widget:hover"); // .widget:hover

----------------------------------------

TITLE: Load CSS Module Example
DESCRIPTION: Demonstrates using meta.load-css() to dynamically load and include CSS from a module with configuration options.

LANGUAGE: scss
CODE:
// dark-theme/_code.scss
$border-contrast: false !default;

code {
  background-color: #6b717f;
  color: #d2e1dd;
  @if $border-contrast {
    border-color: #dadbdf;
  }
}

LANGUAGE: scss
CODE:
// style.scss
@use "sass:meta";

body.dark {
  @include meta.load-css("dark-theme/code",
      $with: ("border-contrast": true));
}

----------------------------------------

TITLE: Inserting Substrings in Sass
DESCRIPTION: The string.insert() function returns a copy of a string with another string inserted at a specified index. Negative indices count from the end of the string.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.insert("Roboto Bold", " Mono", 7); // "Roboto Mono Bold"
@debug string.insert("Roboto Bold", " Mono", -6); // "Roboto Mono Bold"

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.insert("Roboto", " Bold", 100); // "Roboto Bold"
@debug string.insert("Bold", "Roboto ", -100); // "Roboto Bold"

----------------------------------------

TITLE: Shorthand and Nested Property Declarations in Sass/SCSS
DESCRIPTION: Demonstrates how to combine shorthand property declarations with nested property declarations for more specific control.

LANGUAGE: scss
CODE:
.info-page {
  margin: auto {
    bottom: 10px;
    top: 2px;
  }
}

LANGUAGE: sass
CODE:
.info-page
  margin: auto
    bottom: 10px
    top: 2px

----------------------------------------

TITLE: Updating Maps Using Variables in Sass
DESCRIPTION: Demonstrates how to update maps using variables and the !global flag in a mixin.

LANGUAGE: scss
CODE:
@use "sass:map";

$prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms);

@mixin add-browser-prefix($browser, $prefix) {
  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global;
}

@include add-browser-prefix("opera", o);
@debug $prefixes-by-browser;
// ("firefox": moz, "safari": webkit, "ie": ms, "opera": o)

LANGUAGE: sass
CODE:
@use "sass:map"

$prefixes-by-browser: ("firefox": moz, "safari": webkit, "ie": ms)

@mixin add-browser-prefix($browser, $prefix)
  $prefixes-by-browser: map.merge($prefixes-by-browser, ($browser: $prefix)) !global


@include add-browser-prefix("opera", o)
@debug $prefixes-by-browser
// ("firefox": moz, "safari": webkit, "ie": ms, "opera": o)

----------------------------------------

TITLE: List Appending Example
DESCRIPTION: Demonstrates basic list append operations with both space-separated and bracket notation lists.

LANGUAGE: sass
CODE:
@debug append(10px 12px 16px, 25px)  // 10px 12px 16px 25px
@debug append([col1-line1], col1-line2)  // [col1-line1, col1-line2]

----------------------------------------

TITLE: Basic Sass Import Example
DESCRIPTION: Demonstrates basic usage of @import to combine multiple Sass files into a single stylesheet, showing both SCSS and Sass syntax.

LANGUAGE: scss
CODE:
// foundation/_code.scss
code {
  padding: .25em;
  line-height: 0;
}

LANGUAGE: scss
CODE:
// foundation/_lists.scss
ul, ol {
  text-align: left;

  & & {
    padding: {
      bottom: 0;
      left: 0;
    }
  }
}

LANGUAGE: scss
CODE:
// style.scss
@import 'foundation/code', 'foundation/lists';

----------------------------------------

TITLE: Splitting Strings in Sass
DESCRIPTION: The string.split() function splits a string into a list of substrings based on a separator. An optional limit parameter can be provided to limit the number of splits.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.split("Segoe UI Emoji", " "); // ["Segoe", "UI", "Emoji"]
@debug string.split("Segoe UI Emoji", " ", $limit: 1); // ["Segoe", "UI Emoji"]

----------------------------------------

TITLE: Using Boolean Operators in Sass
DESCRIPTION: This snippet demonstrates the use of boolean operators 'and', 'or', and 'not' in Sass, showing how they combine and negate boolean values.

LANGUAGE: sass
CODE:
@debug true and true; // true
@debug true and false; // false

@debug true or false; // true
@debug false or false; // false

@debug not true; // false
@debug not false; // true

LANGUAGE: sass
CODE:
@debug true and true  // true
@debug true and false  // false

@debug true or false  // true
@debug false or false  // false

@debug not true  // false
@debug not false  // true

----------------------------------------

TITLE: Using map.merge() Function in Sass
DESCRIPTION: Shows how to use the map.merge() function to combine two maps into a single map.

LANGUAGE: scss
CODE:
@use "sass:map";

$light-weights: ("lightest": 100, "light": 300);
$heavy-weights: ("medium": 500, "bold": 700);

@debug map.merge($light-weights, $heavy-weights);
// ("lightest": 100, "light": 300, "medium": 500, "bold": 700)

LANGUAGE: sass
CODE:
@use "sass:map"

$light-weights: ("lightest": 100, "light": 300)
$heavy-weights: ("medium": 500, "bold": 700)

@debug map.merge($light-weights, $heavy-weights)
// ("lightest": 100, "light": 300, "medium": 500, "bold": 700)

----------------------------------------

TITLE: Quoted String Examples in Sass
DESCRIPTION: Demonstrates usage of quoted strings with various escape sequences and string interpolation.

LANGUAGE: sass
CODE:
@debug "Helvetica Neue"; // "Helvetica Neue"
@debug "C:\\Program Files"; // "C:\\Program Files"
@debug "\"Don't Fear the Reaper\""; // "\"Don't Fear the Reaper\""
@debug "line1\a line2"; // "line1\a line2"

$roboto-variant: "Mono";
@debug "Roboto #{$roboto-variant}"; // "Roboto Mono"

----------------------------------------

TITLE: Demonstrating @at-root Usage with Media Queries in SCSS
DESCRIPTION: This snippet shows how to use @at-root with 'without' and 'with' queries to control which rules are included or excluded when moving styles to the root of the document.

LANGUAGE: scss
CODE:
@media print {
  .page {
    width: 8in;

    @at-root (without: media) {
      color: #111;
    }

    @at-root (with: rule) {
      font-size: 1.2em;
    }
  }
}

----------------------------------------

TITLE: Using !global Flag to Modify Global Variables in SCSS and Sass
DESCRIPTION: Shows how to use the !global flag to modify a global variable from within a local scope.

LANGUAGE: scss
CODE:
$variable: first global value;

.content {
  $variable: second global value !global;
  value: $variable;
}

.sidebar {
  value: $variable;
}

LANGUAGE: sass
CODE:
$variable: first global value

.content
  $variable: second global value !global
  value: $variable


.sidebar
  value: $variable

----------------------------------------

TITLE: Handling Key Conflicts in map.merge() Function
DESCRIPTION: Demonstrates how map.merge() handles conflicts when merging maps with the same keys.

LANGUAGE: scss
CODE:
@use "sass:map";

$weights: ("light": 300, "medium": 500);

@debug map.merge($weights, ("medium": 700));
// ("light": 300, "medium": 700)

LANGUAGE: sass
CODE:
@use "sass:map";

$weights: ("light": 300, "medium": 500)

@debug map.merge($weights, ("medium": 700))
// ("light": 300, "medium": 700)

----------------------------------------

TITLE: Demonstrating Comment Types in SCSS
DESCRIPTION: This snippet shows various types of comments in SCSS, including single-line comments, multi-line comments, and comments with interpolation. It also demonstrates how comments can be placed within style rules.

LANGUAGE: scss
CODE:
// This comment won't be included in the CSS.

/* But this comment will, except in compressed mode. */

/* It can also contain interpolation:
* 1 + 1 = #{1 + 1} */

/*! This comment will be included even in compressed mode. */

p /* Multi-line comments can be written anywhere
  * whitespace is allowed. */ .sans {
  font: Helvetica, // So can single-line comments.
        sans-serif;
}

----------------------------------------

TITLE: Sass @extend Example
DESCRIPTION: Shows how to use @extend in Sass to avoid duplicating classes in HTML while maintaining the same styling behavior.

LANGUAGE: sass
CODE:
.error {
  border: 1px #f00;
  background-color: #fdd;

  &--serious {
    @extend .error;
    border-width: 3px;
  }
}

----------------------------------------

TITLE: Demonstrating Selector Value Format in Sass
DESCRIPTION: Shows how selectors are represented internally as nested lists in Sass. This format is used by selector functions when returning selector values.

LANGUAGE: scss
CODE:
@debug ((unquote(".main") unquote("aside:hover")),
        (unquote(".sidebar") unquote("p")));
// .main aside:hover, .sidebar p

----------------------------------------

TITLE: Demonstrating Number Types in Sass
DESCRIPTION: This snippet shows various number representations in Sass, including integers, decimals, units, and complex units.

LANGUAGE: sass
CODE:
@debug 100; // 100
@debug 0.8; // 0.8
@debug 16px; // 16px
@debug 5px * 2px; // 10px*px (read "square pixels")

----------------------------------------

TITLE: Constants in Sass Calculations
DESCRIPTION: Shows how constants like pi and e can be used within Sass calculations.

LANGUAGE: scss
CODE:
@debug calc(h + 30deg); // calc(h + 30deg);

LANGUAGE: sass
CODE:
@debug calc(h + 30deg)  // calc(h + 30deg);

----------------------------------------

TITLE: Property Declaration in Sass
DESCRIPTION: Shows how to declare properties within style rules

LANGUAGE: sass
CODE:
width: 100px

----------------------------------------

TITLE: Importing Sass Files Using pkg: URLs
DESCRIPTION: Demonstrates how to use the new 'pkg:' URL scheme to import Sass files from a package. This syntax allows for consistent imports across different build environments.

LANGUAGE: scss
CODE:
@use "pkg:library";
@use "pkg:library/utils";

----------------------------------------

TITLE: Map Values in Sass
DESCRIPTION: Example of a map value in Sass, showing key-value pair association.

LANGUAGE: sass
CODE:
("background": red, "foreground": pink)

----------------------------------------

TITLE: Unitless Number Operations in Sass
DESCRIPTION: Shows how unitless numbers can be used with numbers of any unit in mathematical operations.

LANGUAGE: sass
CODE:
@debug 100px + 50; // 150px
@debug 4s * 10; // 40s

----------------------------------------

TITLE: SASS @forward with Visibility Control
DESCRIPTION: Demonstrates how to control which members are forwarded using 'hide' keyword to exclude specific mixins and variables from being forwarded.

LANGUAGE: scss
CODE:
// src/_list.scss
$horizontal-list-gap: 2em;

@mixin list-reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin list-horizontal {
  @include list-reset;

  li {
    display: inline-block;
    margin: {
      left: -2px;
      right: $horizontal-list-gap;
    }
  }
}

// bootstrap.scss
@forward "src/list" hide list-reset, $horizontal-list-gap;

----------------------------------------

TITLE: Creating Slash-Separated Lists in Sass
DESCRIPTION: Demonstrates the use of the list.slash() function to create a slash-separated list.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.slash(1px, 50px, 100px); // 1px / 50px / 100px

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.slash(1px, 50px, 100px)  // 1px / 50px / 100px

----------------------------------------

TITLE: List Values in Sass
DESCRIPTION: Examples of list values in Sass, showing different separator styles and optional bracketing.

LANGUAGE: sass
CODE:
1.5em 1em 0 2em
Helvetica, Arial, sans-serif
[col1-start]

----------------------------------------

TITLE: Incompatible Units Example in Sass
DESCRIPTION: Demonstrates error handling when attempting to perform operations with incompatible units.

LANGUAGE: sass
CODE:
@debug 100px + 10s;
//     ^^^^^^^^^^^
// Error: Incompatible units px and s.

----------------------------------------

TITLE: Demonstrating @at-root Usage with Media Queries in Sass
DESCRIPTION: This snippet illustrates the use of @at-root with 'without' and 'with' queries in Sass syntax, showing how to control rule inclusion and exclusion when moving styles to the root.

LANGUAGE: sass
CODE:
@media print
  .page
    width: 8in

    @at-root (without: media)
      color: #111


    @at-root (with: rule)
      font-size: 1.2em

----------------------------------------

TITLE: Zipping Multiple Lists in Sass
DESCRIPTION: Shows how to use the list.zip() function to combine multiple lists into a single list of sub-lists.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long
@debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.zip(10px 50px 100px, short mid long)  // 10px short, 50px mid, 100px long
@debug list.zip(10px 50px 100px, short mid)  // 10px short, 50px mid

----------------------------------------

TITLE: Number Values in Sass
DESCRIPTION: Examples of numeric values in Sass, which can include units or be unitless.

LANGUAGE: sass
CODE:
12
100px

----------------------------------------

TITLE: Unary Operators in Sass
DESCRIPTION: Shows usage of unary plus and minus operators with numeric expressions.

LANGUAGE: sass
CODE:
@debug +(5s + 7s); // 12s
@debug -(50px + 30px); // -80px
@debug -(10px - 15px); // 5px

----------------------------------------

TITLE: Controlling Visibility with @forward in Sass
DESCRIPTION: Shows how to selectively expose or hide specific names when using @forward.

LANGUAGE: scss
CODE:
@forward "functions" show color-yiq;

LANGUAGE: scss
CODE:
@forward "functions" hide assert-ascending;

----------------------------------------

TITLE: Using selector.unify Function in Sass
DESCRIPTION: Demonstrates the unify function, which returns a selector matching elements matched by both input selectors.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.unify("a", ".disabled");  // a.disabled
@debug selector.unify("a.disabled", "a.outgoing");  // a.disabled.outgoing
@debug selector.unify("a", "h1");  // null
@debug selector.unify(".warning a", "main a");  // .warning main a, main .warning a

----------------------------------------

TITLE: String Values in Sass
DESCRIPTION: Examples of string values in Sass, which can be quoted or unquoted.

LANGUAGE: sass
CODE:
"Helvetica Neue"
bold

----------------------------------------

TITLE: Comparing Unitless Numbers with Unit Numbers in Sass
DESCRIPTION: Illustrates how Sass automatically converts unitless numbers when comparing them with numbers that have units. This allows for comparisons between different types of numeric values.

LANGUAGE: sass
CODE:
@debug 100 > 50px; // true
@debug 10px < 17; // true

----------------------------------------

TITLE: Demonstrating Mixin Values in Sass
DESCRIPTION: This code snippet showcases how to use mixins as values in Sass. It defines a mixin, retrieves it as a value, and then applies it using meta functions. This technique allows for dynamic mixin application and enhances the flexibility of Sass libraries.

LANGUAGE: sass
CODE:
@use 'sass:meta'

@mixin app-background {
  background-color: #f1f1f1;
  color: #333;
}

@mixin app-theme($mixin) {
  @include meta.apply($mixin);
  margin: 0;
  padding: 20px;
}

.app {
  @include app-theme(meta.get-mixin('app-background'));
}

----------------------------------------

TITLE: Using Parent Selector in SassScript with Sass 3.4
DESCRIPTION: Demonstrates how the parent selector '&' can now be used in SassScript, returning a list of lists representing the parent selector.

LANGUAGE: sass
CODE:
.foo .bar, .baz { $selector: & }

----------------------------------------

TITLE: Extended Selector Example
DESCRIPTION: Demonstrates how @extend affects selectors throughout the stylesheet, including hover states.

LANGUAGE: sass
CODE:
.error:hover {
  background-color: #fee;
}

.error--serious {
  @extend .error;
  border-width: 3px;
}

----------------------------------------

TITLE: Error Handling for Incompatible Units in Sass Comparisons
DESCRIPTION: Shows the error message generated when attempting to compare numbers with incompatible units in Sass. This demonstrates the limitation of relational operators with certain unit combinations.

LANGUAGE: sass
CODE:
@debug 100px > 10s;
//     ^^^^^^^^^^^
// Error: Incompatible units px and s.

----------------------------------------

TITLE: SASS @forward with Configuration
DESCRIPTION: Shows how to configure forwarded modules using the with keyword and !default flag to set default values while allowing downstream overrides.

LANGUAGE: scss
CODE:
// _library.scss
$black: #000 !default;
$border-radius: 0.25rem !default;
$box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default;

code {
  border-radius: $border-radius;
  box-shadow: $box-shadow;
}

// _opinionated.scss
@forward 'library' with (
  $black: #222 !default,
  $border-radius: 0.1rem !default
);

// style.scss
@use 'opinionated' with ($black: #333);

----------------------------------------

TITLE: Using the Global Color Function in SCSS
DESCRIPTION: Shows how to use the global color() function to create colors in different color spaces.

LANGUAGE: scss
CODE:
@debug color(srgb 0.1 0.6 1); // color(srgb 0.1 0.6 1)
@debug color(xyz 30% 0% 90% / 50%); // color(xyz 0.3 0 0.9 / 50%)

----------------------------------------

TITLE: Finding Substring Index in Sass
DESCRIPTION: The string.index() function returns the first index of a substring within a string, or null if not found. Indexing starts at 1.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.index("Helvetica Neue", "Helvetica"); // 1
@debug string.index("Helvetica Neue", "Neue"); // 11

----------------------------------------

TITLE: Demonstrating Comment Types in Sass (Indented Syntax)
DESCRIPTION: This snippet illustrates how comments work in Sass indented syntax. It shows single-line comments, multi-line comments, and how indentation affects comment behavior. It also demonstrates inline comments within style rules.

LANGUAGE: sass
CODE:
// This comment won't be included in the CSS.
  This is also commented out.

/* But this comment will, except in compressed mode.

/* It can also contain interpolation:
  1 + 1 = #{1 + 1}

/*! This comment will be included even in compressed mode.

p .sans
  font: Helvetica, /* Inline comments must be closed. */ sans-serif

----------------------------------------

TITLE: Customizing @use Namespace in Sass
DESCRIPTION: Shows how to set a custom namespace for imported modules using the 'as' keyword with @use.

LANGUAGE: scss
CODE:
@use "bootstrap" as b;

.element {
  @include b.float-left;
}

----------------------------------------

TITLE: Using the Global If Function in SCSS
DESCRIPTION: Demonstrates the usage of the global if() function for conditional value selection.

LANGUAGE: scss
CODE:
@debug if(true, 10px, 15px); // 10px
@debug if(false, 10px, 15px); // 15px
@debug if(variable-defined($var), $var, null); // null

----------------------------------------

TITLE: Slicing Strings in Sass
DESCRIPTION: The string.slice() function returns a substring of a given string, starting and ending at specified indices. Negative indices count from the end of the string.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.slice("Helvetica Neue", 11); // "Neue"
@debug string.slice("Helvetica Neue", 1, 3); // "Hel"
@debug string.slice("Helvetica Neue", 1, -6); // "Helvetica"

----------------------------------------

TITLE: Conditional Property Declarations in Sass/SCSS
DESCRIPTION: Shows how to use conditional logic to include or exclude property declarations based on variable values.

LANGUAGE: scss
CODE:
$rounded-corners: false;

.button {
  border: 1px solid black;
  border-radius: if($rounded-corners, 5px, null);
}

LANGUAGE: sass
CODE:
$rounded-corners: false

.button
  border: 1px solid black
  border-radius: if($rounded-corners, 5px, null)

----------------------------------------

TITLE: Using @use with Wildcard Namespace in Sass
DESCRIPTION: Demonstrates how to import all members into the top-level namespace using @use with 'as *'.

LANGUAGE: scss
CODE:
@use "bootstrap" as *;

.element {
  @include float-left;
}

----------------------------------------

TITLE: Using the Global OKLAB Function in SCSS
DESCRIPTION: Shows how to use the global oklab() function to create colors using perceptually-uniform lightness, a, and b channel values.

LANGUAGE: scss
CODE:
@debug oklab(50% -0.1 0.15); // oklab(50% -0.1 0.15)
@debug oklab(80% 0% 20% / 0.5); // oklab(80% 0 0.08 / 0.5)

----------------------------------------

TITLE: Calculation Simplification in Sass
DESCRIPTION: Shows how Sass simplifies calculations within other calculations, removing unnecessary calc() functions where possible.

LANGUAGE: scss
CODE:
$width: calc(400px + 10%);

.sidebar {
  width: $width;
  padding-left: calc($width / 4);
}

LANGUAGE: sass
CODE:
$width: calc(400px + 10%)

.sidebar
  width: $width
  padding-left: calc($width / 4)

----------------------------------------

TITLE: Preserving Quotes in Custom Properties with meta.inspect() in Sass/SCSS
DESCRIPTION: Shows how to use the meta.inspect() function to preserve quotes when using Sass variables to set custom property values.

LANGUAGE: scss
CODE:
@use "sass:meta";

$font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto;
$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas;

:root {
  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)};
  --font-family-monospace: #{meta.inspect($font-family-monospace)};
}

LANGUAGE: sass
CODE:
@use "sass:meta"

$font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto
$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas

:root
  --font-family-sans-serif: #{meta.inspect($font-family-sans-serif)}
  --font-family-monospace: #{meta.inspect($font-family-monospace)}

----------------------------------------

TITLE: Using Scientific Notation in Sass
DESCRIPTION: This snippet demonstrates the use of scientific notation in Sass numbers, which is always compiled to fully expanded numbers for better browser compatibility.

LANGUAGE: sass
CODE:
@debug 5.2e3; // 5200
@debug 6e-2; // 0.06

----------------------------------------

TITLE: Using the Global RGB Function with Color and Alpha in SCSS
DESCRIPTION: Demonstrates how to use the global rgb() and rgba() functions to modify the alpha channel of existing colors.

LANGUAGE: scss
CODE:
@debug rgb(#f2ece4, 50%); // rgba(242, 236, 228, 0.5);
@debug rgba(rgba(0, 51, 102, 0.5), 1); // #003366

----------------------------------------

TITLE: Min and Max Functions in Sass
DESCRIPTION: Shows how min() and max() functions are parsed as calculations or SassScript functions depending on their content.

LANGUAGE: scss
CODE:
$padding: 12px;

.post {
  padding-left: max($padding, env(safe-area-inset-left));
  padding-right: max($padding, env(safe-area-inset-right));
}

.sidebar {
  padding-left: max($padding % 10, 20px);
  padding-right: max($padding % 10, 20px);
}

LANGUAGE: sass
CODE:
$padding: 12px

.post
  padding-left: max($padding, env(safe-area-inset-left))
  padding-right: max($padding, env(safe-area-inset-right))


.sidebar
  padding-left: max($padding % 10, 20px)
  padding-right: max($padding % 10, 20px)

----------------------------------------

TITLE: Comparing Sass and CSS Variable Behavior in SCSS and Sass
DESCRIPTION: Illustrates the imperative nature of Sass variables compared to CSS variables, showing how value changes affect variable usage.

LANGUAGE: scss
CODE:
$variable: value 1;
.rule-1 {
  value: $variable;
}

$variable: value 2;
.rule-2 {
  value: $variable;
}

LANGUAGE: sass
CODE:
$variable: value 1
.rule-1
  value: $variable


$variable: value 2
.rule-2
  value: $variable

----------------------------------------

TITLE: Demonstrating Precision in Sass Numbers
DESCRIPTION: This snippet illustrates Sass's number precision, showing how numbers are rounded to 10 digits after the decimal point and how this affects equality comparisons and integer recognition.

LANGUAGE: sass
CODE:
@debug 0.012345678912345; // 0.0123456789
@debug 0.01234567891 == 0.01234567899; // true
@debug 1.00000000009; // 1
@debug 0.99999999991; // 1

----------------------------------------

TITLE: Using var() Function with CSS Color Functions in Sass 3.5
DESCRIPTION: Sass 3.5 allows safe passing of the var() function to CSS color functions rgb(), rgba(), hsl(), and hsla().

LANGUAGE: sass
CODE:
color: rgb(var(--my-color-variable));

----------------------------------------

TITLE: Abs Function in Sass
DESCRIPTION: Shows the usage of the abs() function in Sass calculations.

LANGUAGE: scss
CODE:
.post-image {
  padding-left: abs(10px);
  padding-right: math.abs(-7.5%);
  padding-top: abs(1 + 1px);
}

LANGUAGE: sass
CODE:
.post-image
  padding-left: abs(-10px)
  padding-right: math.abs(-7.5%)
  padding-top: abs(1 + 1px)

----------------------------------------

TITLE: Variable Shadowing in SCSS and Sass
DESCRIPTION: Demonstrates how local variables can shadow global variables with the same name without affecting the global scope.

LANGUAGE: scss
CODE:
$variable: global value;

.content {
  $variable: local value;
  value: $variable;
}

.sidebar {
  value: $variable;
}

LANGUAGE: sass
CODE:
$variable: global value

.content
  $variable: local value
  value: $variable


.sidebar
  value: $variable

----------------------------------------

TITLE: Unitless Numbers in Sass Calculations
DESCRIPTION: Demonstrates the use of special constants like pi, e, infinity, and NaN in Sass calculations.

LANGUAGE: scss
CODE:
@use 'sass:math';

@debug calc(pi); // 3.1415926536
@debug calc(e);  // 2.7182818285
@debug calc(infinity) > math.$max-number;  // true
@debug calc(-infinity) < math.$min-number; // true

LANGUAGE: sass
CODE:
@use 'sass:math'

@debug calc(pi)  // 3.1415926536
@debug calc(e)   // 2.7182818285
@debug calc(infinity) > math.$max-number   // true
@debug calc(-infinity) < math.$min-number  // true

----------------------------------------

TITLE: Transparent Color Output in Sass 3.5
DESCRIPTION: Sass 3.5 now outputs transparent colors as rgba(0, 0, 0, 0) instead of transparent to work around an Internet Explorer bug.

LANGUAGE: sass
CODE:
$transparent-color: rgba(0, 0, 0, 0);
// Will output as rgba(0, 0, 0, 0) in the CSS

----------------------------------------

TITLE: Using SassScript Expressions in @media Queries
DESCRIPTION: This snippet demonstrates how Sass allows the use of variables and SassScript expressions directly in @media feature queries, enhancing the flexibility of media query definitions.

LANGUAGE: scss
CODE:
$layout-breakpoint-small: 960px;

@media (min-width: $layout-breakpoint-small) {
  .hide-extra-small {
    display: none;
  }
}

LANGUAGE: sass
CODE:
$layout-breakpoint-small: 960px

@media (min-width: $layout-breakpoint-small)
  .hide-extra-small
    display: none

----------------------------------------

TITLE: Using selector.replace Function in Sass
DESCRIPTION: Shows how to use the replace function to substitute parts of a selector with another selector.

LANGUAGE: scss
CODE:
@use "sass:selector";

@debug selector.replace("a.disabled", "a", ".link");  // .link.disabled
@debug selector.replace("a.disabled", "h1", "h2");  // a.disabled
@debug selector.replace(".guide .info", ".info", ".content nav.sidebar");
// .guide .content nav.sidebar, .content .guide nav.sidebar

----------------------------------------

TITLE: Parentheses Usage in Sass Operations
DESCRIPTION: Shows how parentheses can be used to control the order of operations in Sass calculations, including nested parentheses examples.

LANGUAGE: scss
CODE:
@debug (1 + 2) * 3; // 9
@debug ((1 + 2) * 3 + 4) * 5; // 65

LANGUAGE: sass
CODE:
@debug (1 + 2) * 3  // 9
@debug ((1 + 2) * 3 + 4) * 5  // 65

----------------------------------------

TITLE: Deprecated Compound Selector Extension in Sass 3.5
DESCRIPTION: Extending compound selectors is deprecated in Sass 3.5 due to inconsistent behavior with the stated semantics of extend.

LANGUAGE: sass
CODE:
// Deprecated
h1 {
  @extend .a.b;
}

----------------------------------------

TITLE: Nesting and Merging @media Queries in Sass
DESCRIPTION: This example shows how Sass merges nested @media queries to improve browser compatibility, particularly for browsers that don't support natively nested @media rules.

LANGUAGE: scss
CODE:
@media (hover: hover) {
  .button:hover {
    border: 2px solid black;

    @media (color) {
      border-color: #036;
    }
  }
}

LANGUAGE: sass
CODE:
@media (hover: hover)
  .button:hover
    border: 2px solid black

    @media (color)
      border-color: #036

----------------------------------------

TITLE: Converting Colors to Grayscale in Sass
DESCRIPTION: The color.grayscale() function returns a gray color with the same lightness as the input color, adjusting saturation or chroma based on the color space.

LANGUAGE: scss
CODE:
@use 'sass:color';

@debug color.grayscale(#6b717f);  // #757575
@debug color.grayscale(color(srgb 0.4 0.2 0.6));  // color(srgb 0.3233585271 0.3233585411 0.3233585792)
@debug color.grayscale(oklch(50% 80% 270deg));  // oklch(50% 0% 270deg)

LANGUAGE: sass
CODE:
@use 'sass:color'

@debug color.grayscale(#6b717f)  // #757575
@debug color.grayscale(color(srgb 0.4 0.2 0.6))  // color(srgb 0.3233585271 0.3233585411 0.3233585792)
@debug color.grayscale(oklch(50% 80% 270deg))  // oklch(50% 0% 270deg)

----------------------------------------

TITLE: Single Equals Operator in Sass
DESCRIPTION: Demonstrates the special single equals operator used in function arguments for backwards compatibility with old IE syntax.

LANGUAGE: scss
CODE:
.transparent-blue {
  filter: chroma(color=#0000ff);
}

LANGUAGE: sass
CODE:
.transparent-blue
  filter: chroma(color=#0000ff)

----------------------------------------

TITLE: Deprecated Color Arithmetic in Sass 3.5
DESCRIPTION: Color arithmetic is deprecated in Sass 3.5 in favor of using Sass's color functions for more intuitive color manipulation.

LANGUAGE: sass
CODE:
// Deprecated
$new-color: $base-color + rgb(10, 20, 30);

----------------------------------------

TITLE: Demonstrating @debug Usage in Sass Mixin
DESCRIPTION: This snippet shows how to use the @debug rule within a Sass mixin to print the value of a calculated variable. The mixin calculates a divider offset and uses it to set margin and width properties.

LANGUAGE: scss
CODE:
@mixin inset-divider-offset($offset, $padding) {
  $divider-offset: (2 * $padding) + $offset;
  @debug "divider offset: #{$divider-offset}";

  margin-left: $divider-offset;
  width: calc(100% - #{$divider-offset});
}

LANGUAGE: sass
CODE:
@mixin inset-divider-offset($offset, $padding)
  $divider-offset: (2 * $padding) + $offset
  @debug "divider offset: #{$divider-offset}"

  margin-left: $divider-offset
  width: calc(100% - #{$divider-offset})

----------------------------------------

TITLE: Variable Declaration in Sass
DESCRIPTION: Shows the basic syntax for declaring variables in Sass

LANGUAGE: sass
CODE:
$var: value

----------------------------------------

TITLE: Flow Control Scope for Variables in SCSS and Sass
DESCRIPTION: Demonstrates how variables declared in flow control rules can assign to variables in the outer scope without shadowing.

LANGUAGE: scss
CODE:
$dark-theme: true !default;
$primary-color: #f8bbd0 !default;
$accent-color: #6a1b9a !default;

@if $dark-theme {
  $primary-color: darken($primary-color, 60%);
  $accent-color: lighten($accent-color, 60%);
}

.button {
  background-color: $primary-color;
  border: 1px solid $accent-color;
  border-radius: 3px;
}

LANGUAGE: sass
CODE:
$dark-theme: true !default
$primary-color: #f8bbd0 !default
$accent-color: #6a1b9a !default

@if $dark-theme
  $primary-color: darken($primary-color, 60%)
  $accent-color: lighten($accent-color, 60%)


.button
  background-color: $primary-color
  border: 1px solid $accent-color
  border-radius: 3px

----------------------------------------

TITLE: Deprecated Reference Combinator in Sass 3.5
DESCRIPTION: The reference combinator is deprecated in Sass 3.5 as it's no longer in the CSS specification and is being removed from Chrome.

LANGUAGE: sass
CODE:
// Deprecated
/foo/ {
  // Styles
}

----------------------------------------

TITLE: Index Files Import Example
DESCRIPTION: Shows how index files (_index.scss/_index.sass) can be used to combine multiple partials when importing a directory.

LANGUAGE: scss
CODE:
// foundation/_index.scss
@import 'code', 'lists';

// style.scss
@import 'foundation';

----------------------------------------

TITLE: List Declaration in Sass
DESCRIPTION: Examples of different list formats in Sass

LANGUAGE: sass
CODE:
1.5em 1em 0 2em
Helvetica, Arial, sans-serif
[col1-start]

----------------------------------------

TITLE: Demonstrating Variable Scope in SCSS and Sass
DESCRIPTION: Shows the difference between global and local variable scopes in Sass, including access limitations for local variables.

LANGUAGE: scss
CODE:
$global-variable: global value;

.content {
  $local-variable: local value;
  global: $global-variable;
  local: $local-variable;
}

.sidebar {
  global: $global-variable;

  // This would fail, because $local-variable isn't in scope:
  // local: $local-variable;
}

LANGUAGE: sass
CODE:
$global-variable: global value

.content
  $local-variable: local value
  global: $global-variable
  local: $local-variable


.sidebar
  global: $global-variable

  // This would fail, because $local-variable isn't in scope:
  // local: $local-variable

----------------------------------------

TITLE: Using color.is-powerless() Function in SCSS
DESCRIPTION: Demonstrates the usage of the new color.is-powerless() function to check if a channel is powerless in a given color.

LANGUAGE: scss
CODE:
$grey: hsl(0 0% 60%);

// result: true, because saturation is 0
$hue-powerless: color.is-powerless($grey, "hue");

// result: false
$hue-powerless: color.is-powerless($grey, "lightness");

----------------------------------------

TITLE: Nested Import Example
DESCRIPTION: Demonstrates how imports can be nested within style rules to scope imported styles.

LANGUAGE: scss
CODE:
// _theme.scss
pre, code {
  font-family: 'Source Code Pro', Helvetica, Arial;
  border-radius: 4px;
}

// style.scss
.theme-sample {
  @import "theme";
}

----------------------------------------

TITLE: Converting String to Lowercase in Sass
DESCRIPTION: The string.to-lower-case() function returns a copy of the string with ASCII letters converted to lowercase. It works with both quoted and unquoted strings.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.to-lower-case("Bold"); // "bold"
@debug string.to-lower-case(SANS-SERIF); // sans-serif

----------------------------------------

TITLE: Using color.space() Function in SCSS
DESCRIPTION: Shows how to use the new color.space() function to determine the color space of a given color.

LANGUAGE: scss
CODE:
// result: hsl
$hsl-space: color.space(hsl(0 100% 25.1%));

// result: oklch
$oklch-space: color.space(oklch(37.7% 38.75% 29.23deg));

----------------------------------------

TITLE: Demonstrating Valid Nesting with Combinators in Sass
DESCRIPTION: This snippet shows how leading and trailing combinators can still be used for nesting purposes in Sass, which remains supported.

LANGUAGE: sass
CODE:
.sidebar > {
  .error {
    color: red;
  }
}
===
.sidebar >
  .error
    color: red

----------------------------------------

TITLE: Order of Operations Example in Sass
DESCRIPTION: Demonstrates how Sass evaluates mathematical and logical operations according to operator precedence.

LANGUAGE: scss
CODE:
@debug 1 + 2 * 3 == 1 + (2 * 3); // true
@debug true or false and false == true or (false and false); // true

LANGUAGE: sass
CODE:
@debug 1 + 2 * 3 == 1 + (2 * 3)  // true
@debug true or false and false == true or (false and false)  // true

----------------------------------------

TITLE: Property Value Omission with null
DESCRIPTION: Shows how properties with null values are completely omitted from the generated CSS output. Demonstrates nested font property handling with map-get returning null.

LANGUAGE: scss
CODE:
$fonts: ("serif": "Helvetica Neue", "monospace": "Consolas");

h3 {
  font: {
    size: 18px;
    weight: bold;
    family: map-get($fonts, "sans");
  }
}

----------------------------------------

TITLE: Using color.scale() Function with Different Color Spaces in SCSS
DESCRIPTION: Demonstrates how to use the updated color.scale() function with different color spaces for more reliable color transformations.

LANGUAGE: scss
CODE:
$brand: hsl(0 100% 25.1%);

// result: hsl(0 100% 43.8%)
$hsl-lightness: color.scale($brand, $lightness: 25%);

// result: hsl(5.76 56% 45.4%)
$oklch-lightness: color.scale($brand, $lightness: 25%, $space: oklch);

----------------------------------------

TITLE: Using color.channel() for RGB and OKLCH in Sass
DESCRIPTION: Demonstrates how to use the color.channel() function to access color channel values in different color spaces, replacing deprecated functions like color.red().

LANGUAGE: scss
CODE:
@use "sass:color";

$color: #c71585;
@debug color.channel($color, "red", $space: rgb);
@debug color.channel($color, "red", $space: display-p3);
@debug color.channel($color, "hue", $space: oklch);

LANGUAGE: sass
CODE:
@use "sass:color"

$color: #c71585
@debug color.channel($color, "red", $space: rgb)
@debug color.channel($color, "red", $space: display-p3)
@debug color.channel($color, "hue", $space: oklch)

----------------------------------------

TITLE: Using Boolean Operators in Sass
DESCRIPTION: Demonstrates the usage of Sass boolean operators including not, and, or. Shows how these operators work with true/false values and explains their behavior with multiple examples.

LANGUAGE: sass
CODE:
@debug not true; // false
@debug not false; // true

@debug true and true; // true
@debug true and false; // false

@debug true or false; // true
@debug false or false; // false

LANGUAGE: sass
CODE:
@debug not true  // false
@debug not false  // true

@debug true and true  // true
@debug true and false  // false

@debug true or false  // true
@debug false or false  // false

----------------------------------------

TITLE: Comparing sRGB and Display P3 Color Spaces in SCSS
DESCRIPTION: Shows the difference between sRGB and Display P3 color spaces, demonstrating how P3 can provide brighter and more saturated colors.

LANGUAGE: scss
CODE:
$fallback-green: rgb(0% 100% 0%);
$brighter-green: color(display-p3 0 1 0);

----------------------------------------

TITLE: Using color.channel() Function in SCSS
DESCRIPTION: Demonstrates the usage of the new color.channel() function to extract channel values from colors in different color spaces.

LANGUAGE: scss
CODE:
$brand: hsl(0 100% 25.1%);

// result: 25.1%
$hsl-lightness: color.channel($brand, "lightness");

// result: 37.67%
$oklch-lightness: color.channel($brand, "lightness", $space: oklch);

----------------------------------------

TITLE: Demonstrating Invalid Sass Variable Declaration with Duplicate Flags
DESCRIPTION: This snippet shows an example of a Sass variable declaration that will become invalid in Dart Sass 2.0.0 due to duplicate `!default` flags.

LANGUAGE: sass
CODE:
$var: value !default !default

----------------------------------------

TITLE: Using @use for Namespaced Imports in Sass
DESCRIPTION: Demonstrates how to use the @use rule to import and namespace variables, mixins, and functions from another stylesheet.

LANGUAGE: scss
CODE:
@use "bootstrap";

.element {
  background-color: bootstrap.$body-bg;
  @include bootstrap.float-left;
}

----------------------------------------

TITLE: Using color.same() Function in SCSS
DESCRIPTION: Shows how to use the new color.same() function to compare colors across different color spaces.

LANGUAGE: scss
CODE:
$orange-rgb: #ff5f00;
$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg);

// result: false
$equal: $orange-rgb == $orange-oklch;

// result: true
$same: color.same($orange-rgb, $orange-oklch);

----------------------------------------

TITLE: Defining Colors in OKLCH Color Space in SCSS
DESCRIPTION: Demonstrates defining colors using the OKLCH color space, which provides perceptually uniform colors with consistent lightness and chroma values.

LANGUAGE: scss
CODE:
$pink: oklch(64% 0.196 353); // hsl(329.8 70.29% 58.75%)
$blue: oklch(64% 0.196 253); // hsl(207.4 99.22% 50.69%)

----------------------------------------

TITLE: New CSS-Compatible Mixed Declarations Behavior
DESCRIPTION: Shows the new behavior that matches CSS nesting where declarations apply in document order rather than being pulled to the beginning.

LANGUAGE: scss
CODE:
.example {
  color: red;

  &--serious {
    font-weight: bold;
  }

  font-weight: normal;
}

LANGUAGE: sass
CODE:
.example
  color: red

  &--serious
    font-weight: bold


  font-weight: normal

LANGUAGE: css
CODE:
.example {
  color: red;
}

.example--serious {
  font-weight: bold;
}

.example {
  font-weight: normal;
}

----------------------------------------

TITLE: Adding Prefixes with @forward in Sass
DESCRIPTION: Demonstrates how to add prefixes to forwarded members using the 'as' clause with @forward.

LANGUAGE: scss
CODE:
// material/_index.scss
@forward "theme" as theme-*;

LANGUAGE: scss
CODE:
@use "material" with ($theme-primary: blue);

LANGUAGE: scss
CODE:
@use "material/theme" with ($primary: blue);

----------------------------------------

TITLE: Comparing Colors and Checking Channel Values in Sass
DESCRIPTION: Shows how to compare colors for visual equality and inspect individual channel values in different color spaces.

LANGUAGE: scss
CODE:
@use 'sass:color';
$orange-rgb: #ff5f00;
$orange-oklch: oklch(68.72% 20.966858279% 41.4189852913deg);

// result: false
@debug $orange-rgb == $orange-oklch;

// result: true
@debug color.same($orange-rgb, $orange-oklch);

$brand: hsl(0 100% 25.1%);

// result: 25.1%
@debug color.channel($brand, "lightness");

// result: 37.67%
@debug color.channel($brand, "lightness", $space: oklch);

----------------------------------------

TITLE: Demonstrating Descendant Combinator Behavior in Sass and Native CSS Nesting
DESCRIPTION: Highlights how Sass and native CSS nesting handle descendant combinators differently, affecting which elements match the selector.

LANGUAGE: scss
CODE:
.foo .bar {
  .green-theme & { /* ... */ }
}

----------------------------------------

TITLE: Initializing SassColor with Explicit Alpha in JavaScript
DESCRIPTION: Shows how to properly initialize a SassColor object with RGB values and explicit alpha channel handling using nullish coalescing operator in JavaScript.

LANGUAGE: javascript
CODE:
new sass.SassColor({
  red: 102,
  green: 51,
  blue: 153,
  alpha: alpha ?? 1,
});

----------------------------------------

TITLE: Using Namespaced Imports in Sass
DESCRIPTION: Demonstrates how to import and use namespaced mixins from another stylesheet using the new @use directive.

LANGUAGE: scss
CODE:
@use "bootstrap";

.element {
  @include bootstrap.float-left;
}

----------------------------------------

TITLE: Checking Powerless and Missing Channels in Sass Colors
DESCRIPTION: Demonstrates how to check for powerless and missing channels in Sass colors using color functions.

LANGUAGE: scss
CODE:
@use 'sass:color';
$gray: hsl(0 0% 60%);

// result: true, because saturation is 0
@debug color.is-powerless($gray, "hue");

// result: false
@debug color.is-powerless($gray, "lightness");

$brand: hsl(none 100% 25.1%);

// result: false
@debug color.is-missing($brand, "lightness");

// result: true
@debug color.is-missing($brand, "hue");

----------------------------------------

TITLE: Comparing Suffix Addition in Sass and Type Selector Addition in Native CSS
DESCRIPTION: Shows how Sass and native CSS nesting interpret the & symbol differently when followed by characters, leading to different selector outcomes.

LANGUAGE: scss
CODE:
.foo {
  &-suffix { /* ... */ }
}

LANGUAGE: scss
CODE:
.foo {
  &div { /* ... */ }
}

----------------------------------------

TITLE: Defining Sass Exports in package.json for Node.js pkg: Importer
DESCRIPTION: Demonstrates how to use the "exports" field in package.json to define the default Sass stylesheet for a package. This approach is recommended for new packages to work with the Node.js pkg: importer.

LANGUAGE: json
CODE:
{
  "exports": {
    "sass": "styles/index.scss"
  }
}

----------------------------------------

TITLE: Custom Namespace Configuration in Sass
DESCRIPTION: Shows how to assign a custom namespace to an imported module using the 'as' keyword.

LANGUAGE: scss
CODE:
@use "bootstrap" as b;

.element {
  @include b.float-left;
}

----------------------------------------

TITLE: Adjusting Color Whiteness in Sass
DESCRIPTION: The color.scale() function can be used to adjust the whiteness of a color by a percentage.

LANGUAGE: sass
CODE:
color.scale($color, $whiteness: 20%)

----------------------------------------

TITLE: Illustrating Specificity Differences in Sass and Native CSS Nesting
DESCRIPTION: Shows an HTML structure where the specificity difference between Sass and native CSS nesting becomes apparent, affecting how styles are applied.

LANGUAGE: html
CODE:
<div class=foo>
  <p class=baz>
</div>

----------------------------------------

TITLE: Examples of Valid Line Breaks in Sass Indented Syntax
DESCRIPTION: This snippet illustrates various scenarios where line breaks are allowed within statements without ending them, based on the proposed syntax improvements.

LANGUAGE: sass
CODE:
@each $item in /* A statement can't end after the word "in" in an `@each` statement. */
    1, 2, 3
  .item-#{ 
    $item /* A statement can't end inside the curly braces in an interpolation. */
  }
    content: $item * /* A statement can't end after a multiplication operator. */
        10

----------------------------------------

TITLE: Global Namespace Import in Sass
DESCRIPTION: Demonstrates importing module members into the global namespace using 'as *' syntax.

LANGUAGE: scss
CODE:
@use "bootstrap" as *;

.element {
  @include float-left;
}

----------------------------------------

TITLE: Using map.set() Function for Nested Maps in Sass
DESCRIPTION: This example shows how to use the new map.set() function to update values in a nested map structure, including adding new nested keys.

LANGUAGE: scss
CODE:
(
  "colors": (
    "primary": red,
    "secondary": blue,
    "tertiary": yellow
  )
)

----------------------------------------

TITLE: Defining a Button Mixin using Sass Indented Syntax
DESCRIPTION: This Sass snippet shows the same button-base mixin as the SCSS example, but using the indented syntax. It demonstrates the use of indentation instead of curly braces and semicolons.

LANGUAGE: sass
CODE:
@mixin button-base()
  @include typography(button)
  @include ripple-surface
  @include ripple-radius-bounded

  display: inline-flex
  position: relative
  height: $button-height
  border: none
  vertical-align: middle

  &:hover
    cursor: pointer

  &:disabled
    color: $mdc-button-disabled-ink-color
    cursor: default
    pointer-events: none

----------------------------------------

TITLE: Nesting Selectors with selector-nest() Function in Sass 3.4
DESCRIPTION: Shows the usage of the new selector-nest() function, which properly nests selectors while handling comma-separated lists.

LANGUAGE: sass
CODE:
selector-nest(".foo, .bar", ".child")

----------------------------------------

TITLE: Library Configuration with Default Variables
DESCRIPTION: Example of defining and overriding default variables in a module configuration.

LANGUAGE: scss
CODE:
// bootstrap.scss
$paragraph-margin-bottom: 1rem !default;

p {
  margin-top: 0;
  margin-bottom: $paragraph-margin-bottom;
}

LANGUAGE: scss
CODE:
@use "bootstrap" with (
  $paragraph-margin-bottom: 1.2rem
);

----------------------------------------

TITLE: Using @forward for Library Composition in Sass
DESCRIPTION: Demonstrates how to use @forward to compose a library from multiple source files.

LANGUAGE: scss
CODE:
// bootstrap.scss
@forward "functions";
@forward "variables";
@forward "mixins";

----------------------------------------

TITLE: Manipulating Colors in Different Spaces with Sass
DESCRIPTION: Shows how to manipulate colors in different color spaces using Sass color functions like scale and mix.

LANGUAGE: scss
CODE:
@use 'sass:color';
$brand: hsl(0 100% 25.1%);

// result: hsl(0 100% 43.8%)
@debug color.scale($brand, $lightness: 25%);

// result: hsl(5.76 56% 45.4%)
@debug color.scale($brand, $lightness: 25%, $space: oklch);

// result: #660099
@debug color.mix(red, blue, 40%);

// result: rgb(176.2950613593, -28.8924497904, 159.1757183525)
@debug color.mix(red, blue, 40%, $method: lab);

// result: rgb(-129.55249236, 149.0291922672, 77.9649510422)
@debug color.mix(red, blue, 40%, $method: oklch longer hue);

----------------------------------------

TITLE: Demonstrating Static and Dynamic Properties in Early Sass
DESCRIPTION: This snippet shows how static and dynamic properties were declared in early versions of Sass, using the indented syntax. It illustrates the use of '!' for variables and the '=' for dynamic properties.

LANGUAGE: sass
CODE:
.border
  border-width: 4px
  border-style: solid
  border-color= !background_color

----------------------------------------

TITLE: Sass Importer Interface Definition
DESCRIPTION: Interface for custom importers that handle URL canonicalization and stylesheet loading.

LANGUAGE: typescript
CODE:
interface Importer {
  canonicalize(
    url: string,
    options: {fromImport: boolean}
  ): URL | null;

  load(canonicalUrl: URL): ImporterResult | null;
}

----------------------------------------

TITLE: Demonstrating Sass List Separator Syntax
DESCRIPTION: Example showing how the new slash separator syntax will work in Sass, creating a three-element slash-separated list.

LANGUAGE: sass
CODE:
1 / 2 / 3

----------------------------------------

TITLE: Demonstrating Multiline Statements in Sass Indented Syntax
DESCRIPTION: This snippet shows how the proposed multiline statement syntax would work for a grid template declaration. It allows for improved readability by breaking long statements across multiple lines.

LANGUAGE: sass
CODE:
.grid
  display: grid
  grid-template: (
    "header" min-content
    "main" 1fr
  )

----------------------------------------

TITLE: Introducing Interpolation in Early Sass Syntax
DESCRIPTION: This snippet demonstrates the introduction of interpolation using #{} in early Sass, allowing for partially dynamic property values. It shows how this improved the syntax for properties with multiple values.

LANGUAGE: sass
CODE:
.border
  border: 4px solid #{!background_color}

----------------------------------------

TITLE: Implementing Sass Compilation Functions in TypeScript
DESCRIPTION: Core compilation functions for processing Sass files and strings, with both synchronous and asynchronous variants. Includes options for customizing compilation behavior.

LANGUAGE: typescript
CODE:
function compile(
  path: string,
  options?: Options<'sync'>
): CompileResult;

function compileString(
  source: string,
  options?: StringOptions<'sync'>
): CompileResult;

function compileAsync(
  path: string,
  options?: Options<'async'>
): Promise<CompileResult>;

function compileStringAsync(
  source: string,
  options?: StringOptions<'async'>
): Promise<CompileResult>;

----------------------------------------

TITLE: Module Forwarding in Sass
DESCRIPTION: Shows how to forward multiple module components and control visibility of forwarded members.

LANGUAGE: scss
CODE:
// bootstrap.scss
@forward "functions";
@forward "variables";
@forward "mixins";

LANGUAGE: scss
CODE:
@forward "functions" show color-yiq;

LANGUAGE: scss
CODE:
@forward "functions" hide assert-ascending;

----------------------------------------

TITLE: Examples of Invalid Line Breaks in Sass Indented Syntax
DESCRIPTION: This snippet demonstrates scenarios where line breaks would end statements and cause compilation errors, illustrating the limitations of the proposed syntax improvements.

LANGUAGE: sass
CODE:
@each $item in 1, /* A statement can end after a value, even in the middle of a list. */
     2, 3
  .item-#{ $item }
    content: $item /* A statement can end after a value, and does not look ahead for operators. */
      * 10

----------------------------------------

TITLE: Demonstrating CSS Custom Property Syntax in CSS
DESCRIPTION: This snippet shows an example of the broad syntax allowed for CSS custom properties, which posed a challenge for Sass implementation.

LANGUAGE: css
CODE:
.wacky-property {
  --property: .%(#@$~`^[^_+]<;:"}"|?)*+;
}

----------------------------------------

TITLE: Configuring Sass Compiler with Node Package Importer
DESCRIPTION: JavaScript code showing how to configure the Sass compiler to use the new Node Package Importer. This enables the use of 'pkg:' URLs in Sass files for Node.js environments.

LANGUAGE: js
CODE:
const sass = require('sass');

sass.compile('style.scss', {
    importers: [sass.nodePackageImporter]
})

----------------------------------------

TITLE: SCSS Nested Media Queries with Variables
DESCRIPTION: Shows how to use Sass variables and interpolation with nested range-format media queries.

LANGUAGE: scss
CODE:
@media (width > $width) {
  @media (height < #{$height}) {
    /* ... */
  }
}

----------------------------------------

TITLE: Compiled CSS Output for Multiline Sass Grid Template
DESCRIPTION: This snippet demonstrates the CSS output generated from the previous Sass code, showing that the multiline formatting does not affect the final CSS output.

LANGUAGE: css
CODE:
.grid {
  display: grid;
  grid-template: "header" min-content "main" 1fr;
}

----------------------------------------

TITLE: CSS Grid Layout Example with Bracketed Lists
DESCRIPTION: This CSS snippet shows the use of bracketed lists in CSS Grid Layout, which Sass 3.5 now supports as a new syntax feature.

LANGUAGE: css
CODE:
.container {
  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
}

----------------------------------------

TITLE: Using Patterns for Sass Exports in package.json
DESCRIPTION: Demonstrates how to use patterns in the "exports" field to define Sass file locations. This approach allows for more flexible matching of import paths to corresponding stylesheets in the package.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "sass": "styles/index.scss"
    },
    "./*.scss": {
      "sass": "styles/*.scss"
    }
  }
}

----------------------------------------

TITLE: Installing Dart Sass via Homebrew
DESCRIPTION: Commands to install or upgrade Dart Sass using Mac OS X Homebrew package manager

LANGUAGE: bash
CODE:
brew install sass/sass/sass

----------------------------------------

TITLE: Defining a Nested Configuration Map in Sass
DESCRIPTION: This snippet demonstrates how to create a nested map structure in Sass, which is commonly used for configuration and design tokens in complex projects.

LANGUAGE: scss
CODE:
$config: (
  "colors": (
    "primary": red,
    "secondary": blue
  )
)

----------------------------------------

TITLE: Demonstrating Subset Map Operations in Ruby
DESCRIPTION: Example showing how the subset map data structure works with set operations and value lookups.

LANGUAGE: ruby
CODE:
map.set([1, 2], 'value1')
map.set([2, 3], 'value2')
map.set([3, 4], 'value3')
map.get([1, 2, 3]) => ['value1', 'value2']

----------------------------------------

TITLE: Initializing Sass Compiler in Browser
DESCRIPTION: Example showing how to import and use Sass compiler directly in browser using ES6 imports. Demonstrates basic string compilation functionality.

LANGUAGE: javascript
CODE:
const sass = await import('https://jspm.dev/sass');
sass.compileString('a {color: #663399}');

----------------------------------------

TITLE: Using ::slotted() Pseudo-Element in Sass 3.5
DESCRIPTION: Sass 3.5 now supports the ::slotted() pseudo-element from the CSS Scoping specification, including the ability to extend its selector arguments.

LANGUAGE: sass
CODE:
::slotted(.some-class) {
  // Styles for slotted elements
}

----------------------------------------

TITLE: Compiling Sass to CSS using New JavaScript API
DESCRIPTION: Demonstrates how to use the new compileString() function to compile Sass code directly to CSS. The example shows basic Sass nesting functionality with a h1 selector containing nested code styles.

LANGUAGE: javascript
CODE:
const sass = require('sass');

const result = sass.compileString(`
h1 {
  font-size: 40px;
  code {
    font-face: Roboto Mono;
  }
}`);
console.log(result.css);

----------------------------------------

TITLE: Recording Pass Algorithm for @extend
DESCRIPTION: Pseudocode showing how @extend declarations are recorded in a subset map during the first pass.

LANGUAGE: pseudocode
CODE:
let MAP be an empty subset map from simple selectors to (complex selector, compound selector) pairs
for each @extend in the document:
  let EXTENDER be the complex selector of the CSS rule containing the @extend
  let TARGET be the compound selector being @extended
  MAP.set(TARGET, (EXTENDER, TARGET))

----------------------------------------

TITLE: Inspecting Color Spaces and Converting Colors in Sass
DESCRIPTION: Demonstrates how to inspect color spaces, check if a color is legacy, and convert colors between spaces using Sass color functions.

LANGUAGE: scss
CODE:
@use 'sass:color';
$brand: MediumVioletRed;

// results: rgb, true
@debug color.space($brand);
@debug color.is-legacy($brand);

// result: oklch(55.34% 0.2217 349.7)
@debug color.to-space($brand, 'oklch');

// results: oklch, false
@debug color.space($brand);
@debug color.is-legacy($brand);

----------------------------------------

TITLE: Using SassScript in Custom Properties with Sass 3.5
DESCRIPTION: This SCSS snippet demonstrates how to include dynamic SassScript values in custom properties using the new syntax in Sass 3.5.

LANGUAGE: scss
CODE:
:host {
  --my-toolbar-theme: {
    background-color: #{$toolbar-background};
    border-radius: 4px;
    border: 1px solid gray;
  }
}

----------------------------------------

TITLE: Sass Logger Interface Definition
DESCRIPTION: Interface for custom loggers that handle warnings and debug messages during Sass compilation.

LANGUAGE: typescript
CODE:
interface Logger {
  warn?(
    message: string,
    options: {
      deprecation: boolean;
      span?: SourceSpan;
      stack?: string;
    }
  ): void;

  debug?(
    message: string,
    options: {span: SourceSpan}
  ): void;
}

----------------------------------------

TITLE: Defining Maps in SassScript
DESCRIPTION: Demonstrates how to create a map data structure in Sass that associates keys with values. Maps must be surrounded by parentheses and can't be used directly as CSS values.

LANGUAGE: scss
CODE:
$map: (key1: value1, key2: value2, key3: value3);

----------------------------------------

TITLE: Demonstrating Color Space Equivalence in Sass
DESCRIPTION: Shows how the same color can be represented in different color spaces using Sass color functions.

LANGUAGE: scss
CODE:
@debug MediumVioletRed;
@debug #C71585;
@debug hsl(322.2 80.91% 43.14%);
@debug oklch(55.34% 0.2217 349.7);
@debug color(display-p3 0.716 0.1763 0.5105);

----------------------------------------

TITLE: Weave Algorithm Implementation
DESCRIPTION: Pseudocode for the weave operation that handles combining multiple complex selectors.

LANGUAGE: pseudocode
CODE:
let PAREN_SELECTOR be the argument to weave(), a list of complex selectors
let PREFIXES be an empty list of complex selectors

for each complex selector COMPLEX in PAREN_SELECTOR:
  if PREFIXES is empty:
    add COMPLEX to PREFIXES
    move to the next iteration

  let COMPLEX_SUFFIX be the final compound selector in COMPLEX
  let COMPLEX_PREFIX be COMPLEX without COMPLEX_SUFFIX
  let NEW_PREFIXES be an empty list of complex selectors
  for each complex selector PREFIX in PREFIXES:
    let WOVEN be subweave(PREFIX, COMPLEX_PREFIX)
    if WOVEN is null, move to the next iteration
    for each complex selector WOVEN_COMPLEX in WOVEN:
      append COMPLEX_SUFFIX to WOVEN_COMPLEX
      add WOVEN_COMPLEX to NEW_PREFIXES
  let PREFIXES be NEW_PREFIXES

return PREFIXES

----------------------------------------

TITLE: Specifying Multiple Sass Export Paths in package.json
DESCRIPTION: Shows how to use the "exports" field to specify different locations for various subpaths within a package. This allows for more granular control over which stylesheets are loaded for different import paths.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "sass": "styles/index.scss"
    },
    "./button.scss": {
      "sass": "styles/button.scss"
    },
    "./accordion.scss": {
      "sass": "styles/accordion.scss"
    }
  }
}

----------------------------------------

TITLE: Generated CSS from Map Iteration
DESCRIPTION: The resulting CSS output from the map iteration example, showing the generated font-size rules for each heading level.

LANGUAGE: css
CODE:
h1 {
  font-size: 2em;
}

h2 {
  font-size: 1.5em;
}

h3 {
  font-size: 1.2em;
}

----------------------------------------

TITLE: Demonstrating map.deep-merge() Function in Sass
DESCRIPTION: This snippet illustrates the use of the new map.deep-merge() function, which recursively merges nested maps, allowing for easy combination of configuration maps with the same structure.

LANGUAGE: scss
CODE:
(
  "colors": (
    "primary": red,
    "secondary": teal
  )
)

----------------------------------------

TITLE: Executing Ruby Sass in One-to-One Mode
DESCRIPTION: Demonstrates how to compile a single Sass file to CSS using the command-line interface.

LANGUAGE: shellsession
CODE:
sass [input.scss] [output.css]

----------------------------------------

TITLE: Running Sass Module Migration Command
DESCRIPTION: Command line instruction for migrating Sass files from @import to the module system using the sass-migrator tool. The --migrate-deps flag ensures dependencies are also migrated.

LANGUAGE: shellsession
CODE:
$ sass-migrator module --migrate-deps <path/to/style.scss>

----------------------------------------

TITLE: Implementing Sass Compilation in Dart
DESCRIPTION: Dart script that compiles Sass files to CSS using the Sass package. Takes input and output file paths as command line arguments.

LANGUAGE: dart
CODE:
import 'dart:io';
import 'package:sass/sass.dart' as sass;

void main(List<String> arguments) {
  var result = sass.compileToResult(arguments[0]);
  new File(arguments[1]).writeAsStringSync(result.css);
}

----------------------------------------

TITLE: Installing and Running Sass Migrator for Module System Migration
DESCRIPTION: This snippet demonstrates how to install the Sass migrator globally using npm and then use it to automatically update stylesheets to use the module system. The --migrate-deps flag is used to migrate dependencies as well.

LANGUAGE: shellsession
CODE:
$ npm install -g sass-migrator
$ sass-migrator module --migrate-deps your-entrypoint.scss

----------------------------------------

TITLE: Using Load Path Option in Ruby Sass CLI
DESCRIPTION: Demonstrates how to add an additional load path for Sass to look for stylesheets using the --load-path option.

LANGUAGE: shellsession
CODE:
$ sass --load-path=node_modules/bootstrap/dist/css style.scss style.css

----------------------------------------

TITLE: Deprecated Old-Style Property Syntax in Sass 3.5
DESCRIPTION: The old-style :name value property syntax is deprecated in Sass 3.5 to align more closely with CSS syntax.

LANGUAGE: sass
CODE:
// Deprecated
:property value

----------------------------------------

TITLE: Running Dart Sass Compiler
DESCRIPTION: Command line execution of the Dart-based Sass compiler script.

LANGUAGE: shellsession
CODE:
dart compile-sass.dart styles.scss styles.css

----------------------------------------

TITLE: Importing Sass in ECMAScript Modules (Deprecated)
DESCRIPTION: This snippet shows the deprecated method of importing Sass in ECMAScript modules using default export syntax. This approach is no longer recommended and will be removed in Dart Sass 2.0.0.

LANGUAGE: javascript
CODE:
import sass from 'sass'; // Don't do this anymore

----------------------------------------

TITLE: Using Ruby Gem Requirement Option in Sass CLI
DESCRIPTION: Illustrates how to load a Ruby gem before running Sass using the --require option.

LANGUAGE: shellsession
CODE:
$ sass --require=rails-sass-images style.scss style.css

----------------------------------------

TITLE: Unifying Selectors with selector-unify() Function in Sass 3.4
DESCRIPTION: Shows how the selector-unify() function combines two selectors to match elements that satisfy both input selectors.

LANGUAGE: sass
CODE:
selector-unify(".foo.bar", ".bar.baz")

----------------------------------------

TITLE: Installing Dart Sass via npm
DESCRIPTION: Command to install the JavaScript version of Dart Sass using npm.

LANGUAGE: shell
CODE:
npm install -g dart-sass

----------------------------------------

TITLE: Importing Sass in ECMAScript Modules (Recommended)
DESCRIPTION: This snippet demonstrates the recommended way to import Sass in ECMAScript modules using named exports. This is the preferred method and will continue to work in future versions of Dart Sass.

LANGUAGE: javascript
CODE:
import * as sass from 'sass'; // Do this

----------------------------------------

TITLE: Controlling Output Style in Ruby Sass CLI
DESCRIPTION: Demonstrates the four output styles available in Ruby Sass: nested, expanded, compact, and compressed.

LANGUAGE: shellsession
CODE:
$ sass --style=nested
h1 {
  font-size: 40px; }
  h1 code {
    font-face: Roboto Mono; }

$ sass --style=expanded style.scss
h1 {
  font-size: 40px;
}
h1 code {
  font-face: Roboto Mono;
}

$ sass --style=compact style.scss
h1 { font-size: 40px; }
h1 code { font-face: Roboto Mono; }

$ sass --style=compressed style.scss
h1{font-size:40px}h1 code{font-face:Roboto Mono}

----------------------------------------

TITLE: Using color.change() with explicit color space in Sass JS API
DESCRIPTION: Demonstrates the new requirement to specify a 'space' parameter when using color.change() for cross-space transformations. This ensures unambiguous color space selection when working with CSS Color 4 spaces.

LANGUAGE: javascript
CODE:
const color = new sass.SassColor({red: 0x66, green: 0x33, blue: 0x99});
color.change({hue: 270, space: "okclh"});

----------------------------------------

TITLE: Installing Dart Sass via Dart's pub
DESCRIPTION: Command to install Dart Sass using Dart's package manager pub.

LANGUAGE: shell
CODE:
pub global install sass

----------------------------------------

TITLE: Opt-in to New CSS Semantics Using & Wrapper
DESCRIPTION: Demonstrates how to explicitly opt into the new CSS semantics by wrapping nested declarations in & {}.

LANGUAGE: scss
CODE:
.example {
  color: red;

  &--serious {
    font-weight: bold;
  }

  & {
    font-weight: normal;
  }
}

LANGUAGE: sass
CODE:
.example
  color: red

  &--serious
    font-weight: bold


  &
    font-weight: normal

----------------------------------------

TITLE: Using Watch Mode in Ruby Sass CLI
DESCRIPTION: Shows how to use the --watch flag to continuously compile Sass files when they or their dependencies change.

LANGUAGE: shellsession
CODE:
$ sass --watch themes:public/css
      write public/css/light.css
      write public/css/light.css.map

# Then when you edit themes/dark.scss...
      write public/css/dark.css
      write public/css/dark.css.map

----------------------------------------

TITLE: Displaying Compatibility Information for Sass Implementations
DESCRIPTION: This snippet shows the compatibility information for different Sass implementations regarding the breaking change. It uses a custom Liquid tag to render the compatibility details.

LANGUAGE: liquid
CODE:
{% compatibility 'dart: "1.76.0"', 'libsass: false', 'ruby: false' %}{% endcompatibility %}

----------------------------------------

TITLE: Installing Sass via Chocolatey CLI
DESCRIPTION: Command to install the pre-release version of Dart Sass using the Chocolatey package manager on Windows. This installation will provide a 'sass' executable that runs on the Dart VM.

LANGUAGE: shellsession
CODE:
$ choco install sass -prerelease

----------------------------------------

TITLE: Legacy Mixed Declarations Behavior in Sass
DESCRIPTION: Demonstrates the historical behavior where Sass pulls all declarations to the beginning of the rule to avoid duplicating the outer selector.

LANGUAGE: scss
CODE:
.example {
  color: red;

  &--serious {
    font-weight: bold;
  }

  font-weight: normal;
}

LANGUAGE: sass
CODE:
.example
  color: red

  &--serious
    font-weight: bold


  font-weight: normal

LANGUAGE: css
CODE:
.example {
  color: red;
  font-weight: normal;
}

.example--serious {
  font-weight: bold;
}

----------------------------------------

TITLE: Using Interactive Mode in Ruby Sass CLI
DESCRIPTION: Demonstrates how to use interactive mode to execute SassScript expressions and work with variables.

LANGUAGE: shellsession
CODE:
$ sass --interactive
>> 1px + 1in
97px
>> $map: ("width": 100px, "height": 70px)
("width": 100px, "height": 70px)
>> map-get($map, "width")
100px

----------------------------------------

TITLE: Rendering Instructions for Silencing Deprecations
DESCRIPTION: This snippet includes a custom Liquid tag that likely renders instructions on how to silence deprecation warnings related to the breaking change.

LANGUAGE: liquid
CODE:
{% render 'silencing_deprecations' %}

----------------------------------------

TITLE: Installing Dart Sass Beta via Dart pub
DESCRIPTION: Command to activate the Dart Sass beta globally using the Dart package manager.

LANGUAGE: shell
CODE:
pub global activate sass

----------------------------------------

TITLE: Sass abs() Function with Percentage Example
DESCRIPTION: Demonstrates the difference between Sass's abs() and CSS's abs() function behavior with percentage values. In Sass, abs(10%) returns 10% regardless of the computed value, while CSS resolves the percentage before applying abs().

LANGUAGE: sass
CODE:
abs(10%)

----------------------------------------

TITLE: Directory Compilation Example
DESCRIPTION: Examples of compiling individual files and directories using many-to-many mode.

LANGUAGE: shellsession
CODE:
# Compiles style.scss to style.css.
$ sass style.scss:style.css

# Compiles light.scss and dark.scss to light.css and dark.css.
$ sass light.scss:light.css dark.scss:dark.css

# Compiles all Sass files in themes/ to public/css/.
$ sass themes:public/css

----------------------------------------

TITLE: Demonstrating Incorrect Compound Selector Extension in SCSS and Sass
DESCRIPTION: This example shows how extending a compound selector currently works incorrectly in LibSass and Ruby Sass. It demonstrates that '.heads-up {@extend .message.info}' doesn't extend selectors with either '.info' or '.message' as expected.

LANGUAGE: scss
CODE:
// These should both be extended, but they won't be.
.message {
  border: 1px solid black;
}
.info {
  font-size: 1.5rem;
}

.heads-up {
  @extend .message.info;
}

LANGUAGE: sass
CODE:
// These should both be extended, but they won't be.
.message
  border: 1px solid black

.info
  font-size: 1.5rem


.heads-up
  @extend .message.info

----------------------------------------

TITLE: Installing Dart Sass via NPM
DESCRIPTION: Command to install Dart Sass globally using npm package manager

LANGUAGE: bash
CODE:
npm install -g sass

----------------------------------------

TITLE: CSS abs() Function with Percentage Example
DESCRIPTION: Shows how CSS's native abs() function handles percentage values by resolving the percentage to its computed value before applying the absolute value operation.

LANGUAGE: css
CODE:
abs(10%)

----------------------------------------

TITLE: Example Debug Output in Dart Sass
DESCRIPTION: This snippet shows the format of the debug message output in Dart Sass. It displays the filename, line number, and the value of the debugged expression.

LANGUAGE: plaintext
CODE:
test.scss:3 Debug: divider offset: 132px

----------------------------------------

TITLE: Detecting First-Class Calculations Support in Sass
DESCRIPTION: This snippet demonstrates how to detect support for first-class calculations in Sass using expression-level syntax. It compares the result of a calc() function to a numeric value.

LANGUAGE: sass
CODE:
calc(1) == 1

----------------------------------------

TITLE: Sass Warning Output Example
DESCRIPTION: Shows the warning message format output by Dart Sass when an unknown prefix is encountered during compilation.

LANGUAGE: plaintext
CODE:
Warning: Unknown prefix wekbit.
    example.scss 6:7   prefix()
    example.scss 16:3  root stylesheet

----------------------------------------

TITLE: Using Placeholder Selectors for Compound Selector Extension in SCSS and Sass
DESCRIPTION: This example shows how to use placeholder selectors to maintain the behavior of compound selector extension while ensuring compatibility with Dart Sass and future LibSass versions. It demonstrates creating a placeholder selector that includes the compound selector's styles.

LANGUAGE: scss
CODE:
// Instead of just `.message.info`.
%message-info, .message.info {
  border: 1px solid black;
  font-size: 1.5rem;
}

.heads-up {
  // Instead of `.message.info`.
  @extend %message-info;
}

LANGUAGE: sass
CODE:
// Instead of just `.message.info`.
%message-info, .message.info
  border: 1px solid black
  font-size: 1.5rem


.heads-up
  // Instead of `.message.info`.
  @extend %message-info

----------------------------------------

TITLE: Using Keyword Arguments in Sass Functions
DESCRIPTION: This example demonstrates how to use keyword arguments when calling Sass functions. It shows how to use the scale-color function with a named lightness parameter.

LANGUAGE: scss
CODE:
$primary-color: #036;
.banner {
  background-color: $primary-color;
  color: scale-color($primary-color, $lightness: +40%);
}

LANGUAGE: sass
CODE:
$primary-color: #036
.banner
  background-color: $primary-color
  color: scale-color($primary-color, $lightness: +40%)

----------------------------------------

TITLE: Using @-moz-document with Empty URL Prefix in Sass
DESCRIPTION: Demonstrates the only remaining supported usage of @-moz-document in Sass, using an empty url-prefix() function as a Firefox-targeting hack. This pattern will continue to work while other @-moz-document usages will be deprecated.

LANGUAGE: scss
CODE:
@-moz-document url-prefix() {
  .error {
    color: red;
  }
}

LANGUAGE: sass
CODE:
@-moz-document url-prefix()
  .error
    color: red

----------------------------------------

TITLE: Using url() Function with Different Argument Types in Sass
DESCRIPTION: Demonstrates three different ways of using the url() function in @font-face declarations, showing how Sass parses quoted strings, arithmetic expressions, and interpolated values differently.

LANGUAGE: scss
CODE:
$roboto-font-path: "../fonts/roboto";

@font-face {
    // This is parsed as a normal function call that takes a quoted string.
    src: url("#{$roboto-font-path}/Roboto-Thin.woff2") format("woff2");

    font-family: "Roboto";
    font-weight: 100;
}

@font-face {
    // This is parsed as a normal function call that takes an arithmetic
    // expression.
    src: url($roboto-font-path + "/Roboto-Light.woff2") format("woff2");

    font-family: "Roboto";
    font-weight: 300;
}

@font-face {
    // This is parsed as an interpolated special function.
    src: url(#{$roboto-font-path}/Roboto-Regular.woff2) format("woff2");

    font-family: "Roboto";
    font-weight: 400;
}

----------------------------------------

TITLE: Preserving Quotes in CSS Variables
DESCRIPTION: Demonstrates how to use meta.inspect() function to preserve quotation marks when using interpolation with string values in CSS custom properties.

LANGUAGE: scss
CODE:
@use "sass:meta";

$font-family-monospace: Menlo, Consolas, "Courier New", monospace;

:root {
  --font-family-monospace: #{meta.inspect($font-family-monospace)};
}

LANGUAGE: sass
CODE:
@use "sass:meta"

$font-family-monospace: Menlo, Consolas, "Courier New", monospace

:root
  --font-family-monospace: #{meta.inspect($font-family-monospace)}

----------------------------------------

TITLE: SASS @forward with Prefix
DESCRIPTION: Shows how to use @forward with a prefix to namespace forwarded members, adding 'list-' to the beginning of every forwarded mixin, function, and variable name.

LANGUAGE: scss
CODE:
// src/_list.scss
@mixin reset {
  margin: 0;
  padding: 0;
  list-style: none;
}

// bootstrap.scss
@forward "src/list" as list-*;

// styles.scss
@use "bootstrap";

li {
  @include bootstrap.list-reset;
}

----------------------------------------

TITLE: Initializing SassColor with Explicit Alpha in Dart
DESCRIPTION: Demonstrates the correct way to create a SassColor object with RGB values and explicit alpha channel handling using nullish coalescing operator in Dart.

LANGUAGE: dart
CODE:
sass.SassColor.rgb(102, 51, 153, alpha ?? 1);

----------------------------------------

TITLE: Using element() Function with Interpolation in Sass
DESCRIPTION: Shows how to use the element() function with interpolation to inject dynamic values, demonstrating special parsing rules for element IDs that could be interpreted as colors.

LANGUAGE: scss
CODE:
$logo-element: logo-bg;

.logo {
  background: element(##{$logo-element});
}

----------------------------------------

TITLE: CSS Variable Interpolation Usage
DESCRIPTION: Shows the correct and incorrect ways to use SassScript expressions in CSS custom properties, demonstrating how interpolation should be used for compatibility across all Sass versions.

LANGUAGE: scss
CODE:
$accent-color: #fbbc04;

:root {
  // WRONG, will not work in recent Sass versions.
  --accent-color-wrong: $accent-color;

  // RIGHT, will work in all Sass versions.
  --accent-color-right: #{$accent-color};
}

LANGUAGE: sass
CODE:
$accent-color: #fbbc04

:root
  // WRONG, will not work in recent Sass versions.
  --accent-color-wrong: $accent-color

  // RIGHT, will work in all Sass versions.
  --accent-color-right: #{$accent-color}

----------------------------------------

TITLE: Using the Global LAB Function in SCSS
DESCRIPTION: Shows how to use the global lab() function to create colors using lightness, a, and b channel values.

LANGUAGE: scss
CODE:
@debug lab(50% -20 30); // lab(50% -20 30)
@debug lab(80% 0% 20% / 0.5); // lab(80% 0 25 / 0.5);

----------------------------------------

TITLE: Transitioning from Slash to math.div() in Sass
DESCRIPTION: Shows the correct and incorrect ways to perform division in future Sass versions, emphasizing the use of math.div() instead of the slash operator.

LANGUAGE: scss
CODE:
@use "sass:math";

// WRONG, will not work in future Sass versions.
@debug (12px/4px); // 3

// RIGHT, will work in future Sass versions.
@debug math.div(12px, 4px); // 3

LANGUAGE: sass
CODE:
@use "sass:math"

// WRONG, will not work in future Sass versions.
@debug (12px/4px) // 3

// RIGHT, will work in future Sass versions.
@debug math.div(12px, 4px) // 3

----------------------------------------

TITLE: Unquoted String Examples in Sass
DESCRIPTION: Shows usage of unquoted strings (identifiers) with interpolation and various prefix patterns.

LANGUAGE: sass
CODE:
@debug bold; // bold
@debug -webkit-flex; // -webkit-flex
@debug --123; // --123

$prefix: ms;
@debug -#{$prefix}-flex; // -ms-flex

----------------------------------------

TITLE: Demonstrating Future Sass math.random() Function with Units
DESCRIPTION: Shows how the math.random() function will handle units in a future Sass version. The function will return a random integer with the same units as the input limit.

LANGUAGE: scss
CODE:
@use "sass:math";

// Future Sass, doesn't work yet!
@debug math.random(100px); // 42px

LANGUAGE: sass
CODE:
@use "sass:math"

// Future Sass, doesn't work yet!
@debug math.random(100px)  // 42px

----------------------------------------

TITLE: Using the Global RGB Function in SCSS
DESCRIPTION: Shows how to use the global rgb() and rgba() functions to create colors using red, green, blue, and alpha channel values.

LANGUAGE: scss
CODE:
@debug rgb(0 51 102); // #036
@debug rgb(95%, 92.5%, 89.5%); // #f2ece4
@debug rgb(0 51 102 / 50%); // rgba(0, 51, 102, 0.5)
@debug rgba(95%, 92.5%, 89.5%, 0.2); // rgba(242, 236, 228, 0.2)

----------------------------------------

TITLE: Demonstrating Ambiguous Unary Operator Usage in Sass
DESCRIPTION: This snippet shows an example of ambiguous unary operator usage in Sass, which is the subject of the breaking change. It demonstrates how the '-' operator can be interpreted differently depending on context.

LANGUAGE: sass
CODE:
$size: 10px;

div {
  margin: 15px -$size;
}

LANGUAGE: sass
CODE:
$size: 10px

div
  margin: 15px -$size

----------------------------------------

TITLE: Configuring 404 Page Template with YAML Front Matter
DESCRIPTION: This YAML front matter block configures a 404 error page template. It sets the layout, title, permalink, and introduction text. The page is excluded from collections and the introduction is centered.

LANGUAGE: yaml
CODE:
---
layout: has_no_sidebars
title: Page Not Found
permalink: '/404.html'
eleventyExcludeFromCollections: true
introduction: >
  Sorry, but the page you were trying to view does not exist.
center_introduction: true
---

----------------------------------------

TITLE: Using calc() for Division in Sass
DESCRIPTION: Shows how to use calc() as an alternative to perform division operations in future Sass versions.

LANGUAGE: scss
CODE:
// WRONG, will not work in future Sass versions.
@debug (12px/4px); // 3

// RIGHT, will work in future Sass versions.
@debug calc(12px / 4px); // 3

LANGUAGE: sass
CODE:
// WRONG, will not work in future Sass versions.
@debug (12px/4px) // 3

// RIGHT, will work in future Sass versions.
@debug calc(12px / 4px) // 3

----------------------------------------

TITLE: Deep Merging Maps in Sass
DESCRIPTION: Shows how to recursively merge nested maps using map.deep-merge() compared to regular map.merge()

LANGUAGE: scss
CODE:
@use "sass:map";

$helvetica-light: (
  "weights": (
    "lightest": 100,
    "light": 300
  )
);
$helvetica-heavy: (
  "weights": (
    "medium": 500,
    "bold": 700
  )
);

@debug map.deep-merge($helvetica-light, $helvetica-heavy);

----------------------------------------

TITLE: Running Sass Migrator for Strict Unary Operator Update
DESCRIPTION: This shellsession snippet demonstrates how to use the Sass migrator tool to automatically update stylesheets to comply with the new strict unary operator rules. It installs the migrator and runs it on all .scss files in the current directory and subdirectories.

LANGUAGE: shellsession
CODE:
$ npm install -g sass-migrator
$ sass-migrator strict-unary **/*.scss

----------------------------------------

TITLE: Installing Dart Sass Beta via npm
DESCRIPTION: Command to install the pure-JavaScript version of Dart Sass beta globally using npm.

LANGUAGE: shell
CODE:
npm install -g dart-sass

----------------------------------------

TITLE: Adjusting and Scaling Colors in Sass
DESCRIPTION: Shows how to use color.adjust() and color.scale() functions to modify color values in different color spaces, replacing deprecated functions like lighten() and darken().

LANGUAGE: scss
CODE:
@use "sass:color";

$color: #c71585;
@debug color.adjust($color, $lightness: 15%, $space: hsl);
@debug color.adjust($color, $lightness: 15%, $space: oklch);
@debug color.scale($color, $lightness: 15%, $space: oklch);

LANGUAGE: sass
CODE:
@use "sass:color"

$color: #c71585
@debug color.adjust($color, $lightness: 15%, $space: hsl)
@debug color.adjust($color, $lightness: 15%, $space: oklch)
@debug color.scale($color, $lightness: 15%, $space: oklch)

----------------------------------------

TITLE: Executing Ruby Sass in Many-to-Many Mode
DESCRIPTION: Shows how to compile multiple Sass files to CSS or compile entire directories using the command-line interface.

LANGUAGE: shellsession
CODE:
sass [<input.css>:<output.css>] [<input/>:<output/>] [input.css] [input/]...

----------------------------------------

TITLE: Installing Dart Sass Beta via Chocolatey
DESCRIPTION: Command to install the beta version of Dart Sass using the Chocolatey package manager on Windows.

LANGUAGE: shell
CODE:
choco install sass --pre

----------------------------------------

TITLE: CSS Custom Property Mixins Example
DESCRIPTION: Demonstrates how CSS custom properties were used in the Polymer library for CSS mixins, showing valid CSS syntax that would have failed to parse in older Sass versions.

LANGUAGE: scss
CODE:
:root {
  --flex-theme: {
    border: 1px solid var(--theme-dark-blue);
    font-family: var(--theme-font-family);
    padding: var(--theme-wide-padding);
    background-color: var(--theme-light-blue);
  };
}

----------------------------------------

TITLE: Loading Compass Framework in Ruby Sass CLI
DESCRIPTION: Shows how to load the Compass framework and make its mixins and functions available in Sass using the --compass flag.

LANGUAGE: shellsession
CODE:
$ sass --compass style.scss style.css

----------------------------------------

TITLE: Creating Horizontal Navigation Menu in HTML for Sass Project
DESCRIPTION: This HTML snippet defines a horizontal navigation menu with links to Sass GitHub repositories, website source code, style guide, and community guidelines. It uses the 'sl-c-list-horizontal-wrapper' and 'sl-c-list-wrap' classes for styling.

LANGUAGE: HTML
CODE:
<nav class="sl-c-list-horizontal-wrapper sl-c-list-wrap">

- [Sass on GitHub](https://github.com/sass)
- [Website Source Code](https://github.com/sass/sass-site)
- [Style Guide](/styleguide)
- [Community Guidelines](/community-guidelines)

</nav>

----------------------------------------

TITLE: Upgrading Dart Sass Beta via Chocolatey
DESCRIPTION: Command to upgrade an existing installation of Dart Sass to the beta version using Chocolatey on Windows.

LANGUAGE: shell
CODE:
choco upgrade sass --pre

----------------------------------------

TITLE: Demonstrating Valid Sass Variable Declaration with Different Flags
DESCRIPTION: This snippet shows an example of a Sass variable declaration that will remain valid in Dart Sass 2.0.0, using both `!global` and `!default` flags.

LANGUAGE: sass
CODE:
$var: value !global !default

----------------------------------------

TITLE: Setting SASS_PATH Environment Variable
DESCRIPTION: Shows how to set the SASS_PATH environment variable to specify load paths for Sass.

LANGUAGE: shellsession
CODE:
$ SASS_PATH=node_modules/bootstrap/dist/css sass style.scss style.css

----------------------------------------

TITLE: HTML5 Strict XHTML Style Example
DESCRIPTION: Demonstrates the preferred HTML markup style with proper attribute quoting and self-closing elements

LANGUAGE: HTML
CODE:
<hr />

----------------------------------------

TITLE: Appending Selectors with selector-append() Function in Sass 3.4
DESCRIPTION: Demonstrates the selector-append() function, which appends selectors without adding whitespace between them.

LANGUAGE: sass
CODE:
selector-append(".foo, .bar", "-suffix")

----------------------------------------

TITLE: Correct Approach for Extending Multiple Selectors in SCSS and Sass
DESCRIPTION: This example demonstrates the correct way to extend multiple selectors separately, which is compatible with Dart Sass and future versions of LibSass. It shows how to use '@extend' with multiple simple selectors instead of a compound selector.

LANGUAGE: scss
CODE:
.message {
  border: 1px solid black;
}
.info {
  font-size: 1.5rem;
}

.heads-up {
  @extend .message, .info;
}

LANGUAGE: sass
CODE:
.message
  border: 1px solid black

.info
  font-size: 1.5rem


.heads-up
  @extend .message, .info

----------------------------------------

TITLE: Installing Dart Sass via Dart pub
DESCRIPTION: Command to install Dart Sass globally using Dart's pub package manager

LANGUAGE: bash
CODE:
pub global activate sass

----------------------------------------

TITLE: Implementing Button Components in HTML
DESCRIPTION: This snippet shows how to create button components using HTML and Sass classes. It includes examples of link buttons and regular buttons, both in default and primary styles.

LANGUAGE: HTML
CODE:
<a href="#" class="sl-c-button">Link</a>
<button class="sl-c-button" type="button">Button</button>

<a href="#" class="sl-c-button sl-c-button--primary">Link</a>
<button class="sl-c-button sl-c-button--primary" type="button">Button</button>

----------------------------------------

TITLE: Replacing Selectors with selector-replace() Function in Sass 3.4
DESCRIPTION: Illustrates the use of selector-replace() function, which performs a semantic search-and-replace operation on selectors.

LANGUAGE: sass
CODE:
selector-replace(".foo.bar.baz", ".foo.baz", ".qux")

----------------------------------------

TITLE: Silencing Legacy API Deprecation Warnings in Dart Sass
DESCRIPTION: Example showing how to silence deprecation warnings for the legacy JS API using the silenceDeprecations option. This is a temporary solution until migration to the modern API, as the legacy API will be removed in Dart Sass 2.0.0.

LANGUAGE: javascript
CODE:
const sass = require('sass');

const result = sass.renderSync({
  silenceDeprecations: ['legacy-js-api'],
  ...
});

----------------------------------------

TITLE: Installing Dart Sass via Chocolatey
DESCRIPTION: Commands to install or upgrade Dart Sass using Windows Chocolatey package manager

LANGUAGE: bash
CODE:
choco install sass

----------------------------------------

TITLE: Implementing Introduction Components in HTML
DESCRIPTION: This snippet shows how to create introduction components using HTML and Sass classes. It includes examples of both a single paragraph and a multi-paragraph introduction.

LANGUAGE: HTML
CODE:
<p class="sl-c-introduction">
  {% lorem 'paragraph' %}
</p>

<div class="sl-c-introduction">
  <p>{% lorem 'paragraph' %}</p>
</div>

----------------------------------------

TITLE: Example of Complex CSS Custom Property from Polymer Docs
DESCRIPTION: This CSS snippet, taken from Polymer documentation, demonstrates a complex custom property that was difficult to represent in previous Sass versions.

LANGUAGE: css
CODE:
:host {
  --my-toolbar-theme: {
    background-color: green;
    border-radius: 4px;
    border: 1px solid gray;
  }
}

----------------------------------------

TITLE: Deprecated Media Query Syntax in Sass
DESCRIPTION: Examples of deprecated Sass media query syntax that is now interpreted differently due to Media Queries Level 4 support. These include negation and logical operators in media conditions.

LANGUAGE: sass
CODE:
@media (not (foo))

LANGUAGE: sass
CODE:
@media ((foo) and (bar))

LANGUAGE: sass
CODE:
@media ((foo) or (bar))

----------------------------------------

TITLE: Installing Sass on Mac OS X or Linux using Homebrew
DESCRIPTION: Shows how to install Dart Sass using the Homebrew package manager on Mac OS X or Linux systems. This method offers a straightforward way to install Sass on Unix-based systems.

LANGUAGE: shellsession
CODE:
brew install sass/sass/sass

----------------------------------------

TITLE: Implementing Table Component in HTML
DESCRIPTION: This snippet shows how to create a simple table component using HTML and Sass classes.

LANGUAGE: HTML
CODE:
<table class="sl-c-table">
  <tr>
    <td>Table</td>
    <td>Table</td>
  </tr>
</table>

----------------------------------------

TITLE: Demonstrating Parent Selector Issue with Selector Lists in Sass
DESCRIPTION: This code snippet demonstrates a problematic use case where using the parent selector (&) with interpolation fails to properly handle selector lists, resulting in incorrect selector combinations.

LANGUAGE: scss
CODE:
.foo, .bar {
  @at-root #{&}-suffix {
    color: blue;
  }
}

----------------------------------------

TITLE: Creating Slash-Separated Lists in Sass
DESCRIPTION: Demonstrates how to create slash-separated lists using the list.slash() function in Sass during the transition period.

LANGUAGE: scss
CODE:
@use "sass:list";
@use "sass:math";

.item3 {
  $row: list.slash(span math.div(6, 2), 7);
  grid-row: $row;
}

LANGUAGE: sass
CODE:
@use "sass:list"
@use "sass:math"

.item3
  $row: list.slash(span math.div(6, 2), 7)
  grid-row: $row

----------------------------------------

TITLE: Ruby Sass Module to SassC Module Migration
DESCRIPTION: Example of migrating from Ruby Sass to the SassC gem by replacing the module name. This is the primary migration path for Ruby applications using Sass functions.

LANGUAGE: ruby
CODE:
# Replace:
Sass

# With:
SassC

----------------------------------------

TITLE: Illustrating Unsupported Calc Usage in Sass
DESCRIPTION: Examples demonstrating cases where calculations cannot be used interchangeably with numbers in Sass expressions.

LANGUAGE: sass
CODE:
1px + calc(1px + 10%)
math.round(calc(1px + 10%))

----------------------------------------

TITLE: Complex Selector Extension
DESCRIPTION: Shows how Sass handles intelligent unification of selectors when using @extend with complex selectors.

LANGUAGE: sass
CODE:
.content nav.sidebar {
  @extend .info;
}

p.info {
  background-color: #dee9fc;
}

.guide .info {
  border: 1px solid rgba(#000, 0.8);
  border-radius: 2px;
}

main.content .info {
  font-size: 0.8em;
}

----------------------------------------

TITLE: Recommended Sass Unary Operator Syntax
DESCRIPTION: Examples of the recommended explicit syntax patterns for handling subtraction and negative values in Sass.

LANGUAGE: sass
CODE:
margin: $a - $b

LANGUAGE: sass
CODE:
margin: $a (-$b)

----------------------------------------

TITLE: Generating Archive Files with Incorrect Permissions in Dart
DESCRIPTION: This function creates an ArchiveFile with incorrect permissions. It was intended to set executable mode to 755 and non-executable mode to 644, but due to a decimal-to-octal conversion error, it set 757 and 654 respectively.

LANGUAGE: dart
CODE:
ArchiveFile fileFromBytes(String path, List<int> data,\n        {bool executable = false}) =>\n    ArchiveFile(path, data.length, data)\n      ..mode = executable ? 495 : 428\n      ..lastModTime = DateTime.now().millisecondsSinceEpoch ~/ 1000;

----------------------------------------

TITLE: Implementing Closed Description List in HTML
DESCRIPTION: This snippet demonstrates how to create a closed horizontal description list using HTML and Sass classes. It includes information about Dart Sass and Ruby Sass compatibility.

LANGUAGE: HTML
CODE:
<dl class="sl-c-description-list sl-c-description-list--horizontal">
  <div>
    <dt>Dart Sass</dt>
    <dd>✓</dd>
  </div>
  <div>
    <dt>Ruby Sass</dt>
    <dd>since 3.5.0</dd>
  </div>
  <div><a href="#">➤︎</a></div>
</dl>

----------------------------------------

TITLE: HTML Layout Structure for Implementation Guide
DESCRIPTION: Basic HTML structure using unordered list with custom styling for displaying implementation guide sections including Resources, Requirements, and Language Changes.

LANGUAGE: html
CODE:
<ul class="list-tiled">
<li>
<h2>Resources</h2>
[...]
</li>
<li>
<h2>Requirements</h2>
[...]
</li>
<li>
<h2>Making Language Changes</h2>
[...]
</li>
</ul>

----------------------------------------

TITLE: Checking Tar File Permissions in Bash
DESCRIPTION: This command checks the permissions of the Sass executable file to determine if it's vulnerable to the security issue. If the last group of letters in the first column contains 'w', the file is vulnerable.

LANGUAGE: bash
CODE:
Vulnerable:\n-rwxr-xrwx 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass\n\nNot vulnerable:\n-rwxr-xr-x 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass

----------------------------------------

TITLE: Creating Callout Components in HTML
DESCRIPTION: This snippet demonstrates how to create callout components using HTML and Sass classes. It includes examples of a default callout, a warning callout, and a fun fact callout.

LANGUAGE: HTML
CODE:
<div class="sl-c-callout">

  ### Callout

  {% lorem 'paragraph' %}
</div>

<div class="sl-c-callout sl-c-callout--warning">

  ### Warning

  {% lorem 'paragraph' %}
</div>

<div class="sl-c-callout sl-c-callout--fun-fact">

  ### Fun Fact

  {% lorem 'paragraph' %}
</div>

----------------------------------------

TITLE: Running SassC Compiler in Shell
DESCRIPTION: This snippet demonstrates how to use the SassC executable to compile Sass files to CSS. It takes an input file and outputs the result to stdout, which can be redirected to a file.

LANGUAGE: shellsession
CODE:
./bin/sassc [input file] > output.css

----------------------------------------

TITLE: Checking for Bracketed Lists in Sass
DESCRIPTION: Shows how to use the list.is-bracketed() function to determine if a list has square brackets.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.is-bracketed(1px 2px 3px); // false
@debug list.is-bracketed([1px, 2px, 3px]); // true

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.is-bracketed(1px 2px 3px)  // false
@debug list.is-bracketed([1px, 2px, 3px])  // true

----------------------------------------

TITLE: SCSS Class Naming Conventions
DESCRIPTION: Examples of BEM-style class naming with prefixes for components, layouts, states, and JavaScript hooks

LANGUAGE: SCSS
CODE:
sl-c-card
sl-c-card__header
sl-c-card--primary
sl-c-card__header--large
sl-l-grid
sl-is-active
sl-js-toggle-navigation

----------------------------------------

TITLE: Setting LibSass Path Environment Variable in Shell
DESCRIPTION: This snippet shows how to set the SASS_LIBSASS_PATH environment variable, which is necessary for building SassC, a C wrapper for LibSass.

LANGUAGE: shellsession
CODE:
export SASS_LIBSASS_PATH=/Users/hampton/path/libsass

----------------------------------------

TITLE: Using the Global HSL Function in SCSS
DESCRIPTION: Demonstrates the usage of the global hsl() function to create colors using hue, saturation, and lightness values.

LANGUAGE: scss
CODE:
@debug hsl(210deg 100% 20%); // #036
@debug hsl(210deg 100% 20% / 50%); // rgba(0, 51, 102, 0.5)
@debug hsla(34, 35%, 92%, 0.2); // rgba(241.74, 235.552, 227.46, 0.2)

----------------------------------------

TITLE: Compiling Sass Files via Command Line
DESCRIPTION: Basic command line usage of Dart Sass to compile SCSS files to CSS.

LANGUAGE: shellsession
CODE:
sass source/index.scss css/index.css

----------------------------------------

TITLE: Implementing Open Description List in HTML
DESCRIPTION: This snippet shows how to create an open horizontal description list using HTML and Sass classes. It includes information about Dart Sass and Ruby Sass compatibility.

LANGUAGE: HTML
CODE:
<dl class="sl-c-description-list sl-c-description-list--horizontal">
  <div>
    <dt>Dart Sass</dt>
    <dd>✓</dd>
  </div>
  <div>
    <dt>Ruby Sass</dt>
    <dd>since 3.5.0</dd>
  </div>
  <div><a href="#">▼</a></div>
</dl>

----------------------------------------

TITLE: Using Sass Built-In Modules in Sass
DESCRIPTION: Demonstrates how to use the sass:color module to manipulate colors in Sass syntax.

LANGUAGE: sass
CODE:
@use "sass:color"

.button
  $primary-color: #6b717f
  color: $primary-color
  border: 1px solid color.scale($primary-color, $lightness: 20%)

----------------------------------------

TITLE: Configuring Dart Sass Project Dependencies
DESCRIPTION: YAML configuration for adding Sass as a development dependency in a Dart project.

LANGUAGE: yaml
CODE:
name: my_project
dev_dependencies:
  sass: ^{{ releases['dart-sass'].version }}

----------------------------------------

TITLE: Color Values in Sass
DESCRIPTION: Examples of color values in Sass, including hex codes, color names, and functional notation.

LANGUAGE: sass
CODE:
#c6538c
blue
rgb(107, 113, 127)
hsl(210, 100%, 20%)

----------------------------------------

TITLE: Handling Missing Color Channels in Sass
DESCRIPTION: Illustrates how Sass handles missing color channels, including mixing colors and converting between color spaces.

LANGUAGE: scss
CODE:
@use 'sass:color';

$grey: hsl(none 0% 50%);

@debug color.mix($grey, blue, $method: hsl); // hsl(240, 50%, 50%)
@debug color.to-space($grey, lch); // lch(53.3889647411% 0 none)

LANGUAGE: sass
CODE:
@use 'sass:color'

$grey: hsl(none 0% 50%)

@debug color.mix($grey, blue, $method: hsl)  // hsl(240, 50%, 50%)
@debug color.to-space($grey, lch)  // lch(53.3889647411% 0 none)

----------------------------------------

TITLE: Using Sass in JavaScript
DESCRIPTION: JavaScript code demonstrating both synchronous and asynchronous compilation of Sass files using the sass npm package.

LANGUAGE: javascript
CODE:
const sass = require('sass');

const result = sass.compile('style.scss');
console.log(result.css);

// OR

const result = await sass.compileAsync('style.scss');
console.log(result.css);

----------------------------------------

TITLE: Basic String Operations in Sass
DESCRIPTION: Demonstrates basic string concatenation using the + operator and legacy - operator with different types of strings.

LANGUAGE: sass
CODE:
@debug "Helvetica" + " Neue"; // "Helvetica Neue"
@debug sans- + serif; // sans-serif
@debug sans - serif; // sans-serif

----------------------------------------

TITLE: Using the if() Function in Sass
DESCRIPTION: This snippet shows how to use the if() function in Sass to return different values based on a boolean condition.

LANGUAGE: sass
CODE:
@debug if(true, 10px, 30px); // 10px
@debug if(false, 10px, 30px); // 30px

LANGUAGE: sass
CODE:
@debug if(true, 10px, 30px)  // 10px
@debug if(false, 10px, 30px)  // 30px

----------------------------------------

TITLE: Installing Sass Module System Preview using Package Managers
DESCRIPTION: This code snippet demonstrates how to install the Sass module system preview version 1.23.0-module.beta.1 using various package managers and installation methods, including npm, Homebrew, Chocolatey, and Pub.

LANGUAGE: shellsession
CODE:
$ npm install --save-dev sass@1.23.0-module.beta.1

$ npm install -g sass@1.23.0-module.beta.1

$ brew install sass/sass/sass@1.23.0-module.beta.1

$ choco install sass --version 1.23.0.modulebeta-1

$ pub global activate sass 1.23.0-module.beta.1

----------------------------------------

TITLE: Getting String Length in Sass
DESCRIPTION: The string.length() function returns the number of characters in a string. It works with both quoted and unquoted strings.

LANGUAGE: scss
CODE:
@use "sass:string";

@debug string.length("Helvetica Neue"); // 14
@debug string.length(bold); // 4
@debug string.length(""); // 0

----------------------------------------

TITLE: Style Rule Example in Sass
DESCRIPTION: Demonstrates basic style rule syntax in Sass

LANGUAGE: sass
CODE:
h1 { /* ... */ }

----------------------------------------

TITLE: Demonstrating First-Class Calc Behavior in Sass
DESCRIPTION: Examples showing how the proposed First-Class Calc functionality would handle various calc() expressions, including those with Sass variables and functions.

LANGUAGE: sass
CODE:
calc(1px + 10px)
calc(1px + $length)
calc(1px + 10%)
calc(1px + $length)
calc(1% + math.round(15.3px))

----------------------------------------

TITLE: Replacing List Elements in Sass
DESCRIPTION: Shows how to use the list.set-nth() function to replace an element at a specific index in a list.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto

----------------------------------------

TITLE: Map Declaration in Sass
DESCRIPTION: Example of defining a map with key-value pairs in Sass

LANGUAGE: sass
CODE:
("background": red, "foreground": pink)

----------------------------------------

TITLE: Deprecated Sass Unary Operator Syntax
DESCRIPTION: Example of the deprecated syntax pattern where '$a -$b' is parsed as subtraction rather than as a space-separated list with a negative value.

LANGUAGE: sass
CODE:
margin: $a -$b

----------------------------------------

TITLE: Determining List Separator in Sass
DESCRIPTION: Demonstrates the use of the list.separator() function to identify the separator used in a list.

LANGUAGE: scss
CODE:
@use 'sass:list';

@debug list.separator(1px 2px 3px); // space
@debug list.separator((1px, 2px, 3px)); // comma
@debug list.separator('Helvetica'); // space
@debug list.separator(()); // space

LANGUAGE: sass
CODE:
@use 'sass:list'

@debug list.separator(1px 2px 3px)  // space
@debug list.separator((1px, 2px, 3px))  // comma
@debug list.separator('Helvetica')  // space
@debug list.separator(())  // space

----------------------------------------

TITLE: Creating Documentation Comments with SassDoc
DESCRIPTION: This snippet demonstrates how to write documentation comments using SassDoc syntax. It shows how to document a function with parameters and return value using special annotations.

LANGUAGE: scss
CODE:
/// Computes an exponent.
///
/// @param {number} $base
///   The number to multiply by itself.
/// @param {integer (unitless)} $exponent
///   The number of `$base`s to multiply together.
/// @return {number} `$base` to the power of `$exponent`.
@function pow($base, $exponent) {
  $result: 1;
  @for $_ from 1 through $exponent {
    $result: $result * $base;
  }
  @return $result;
}

LANGUAGE: sass
CODE:
/// Computes an exponent.
///
/// @param {number} $base
///   The number to multiply by itself.
/// @param {integer (unitless)} $exponent
///   The number of `$base`s to multiply together.
/// @return {number} `$base` to the power of `$exponent`.
@function pow($base, $exponent)
  $result: 1
  @for $_ from 1 through $exponent
    $result: $result * $base

  @return $result

----------------------------------------

TITLE: Configuring Package Exports in package.json for Sass
DESCRIPTION: Example of how to configure conditional exports in package.json to specify Sass entry points alongside JavaScript exports. This allows consumers to use 'pkg:' URLs to import Sass files from the package.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "sass": "./src/scss/index.scss",
      "import": "./dist/js/index.mjs",
      "default": "./dist/js/index.js"
    },
    "./utils": {
      "sass": "./src/scss/_utils.scss",
      "default": "./dist/js/utils.js"
    }
  }
}

----------------------------------------

TITLE: Passing Arbitrary Arguments to Sass Functions
DESCRIPTION: This example demonstrates how to pass a list of arguments to a function using the ... syntax. It shows how to use the min function with a list of width values.

LANGUAGE: scss
CODE:
$widths: 50px, 30px, 100px;
.micro {
  width: min($widths...);
}

LANGUAGE: sass
CODE:
$widths: 50px, 30px, 100px
.micro
  width: min($widths...)

----------------------------------------

TITLE: Parent Selector in SassScript
DESCRIPTION: Demonstrates using the parent selector as a SassScript expression, showing how it returns selector values and can be used in selector functions.

LANGUAGE: scss
CODE:
.main aside:hover,
.sidebar p {
  parent-selector: &;
  // => ((unquote(".main") unquote("aside:hover")),
  //     (unquote(".sidebar") unquote("p")))
}

LANGUAGE: sass
CODE:
.main aside:hover,
.sidebar p
  parent-selector: &
  // => ((unquote(".main") unquote("aside:hover")),
  //     (unquote(".sidebar") unquote("p")))

----------------------------------------

TITLE: Rendering Compatibility Indicator in Markdown
DESCRIPTION: Demonstrates how to use a custom Markdown syntax to render a compatibility indicator for different Sass implementations.

LANGUAGE: markdown
CODE:
{% compatibility 'dart: true', 'libsass: "3.6.0"', 'ruby: false', 'feature: "Feature Name"' %}{% endcompatibility %}

----------------------------------------

TITLE: Using Plain CSS Functions in Sass
DESCRIPTION: This example demonstrates how Sass handles plain CSS functions. It shows the use of the var() function and how Sass passes arguments to unknown functions like radial-gradient().

LANGUAGE: scss
CODE:
@debug var(--main-bg-color); // var(--main-bg-color)

$primary: #f2ece4;
$accent: #e1d7d2;
@debug radial-gradient($primary, $accent); // radial-gradient(#f2ece4, #e1d7d2)

LANGUAGE: sass
CODE:
@debug var(--main-bg-color)  // var(--main-bg-color)

$primary: #f2ece4
$accent: #e1d7d2
@debug radial-gradient($primary, $accent)  // radial-gradient(#f2ece4, #e1d7d2)

----------------------------------------

TITLE: Selector Combinators in Sass
DESCRIPTION: Demonstrates various ways to use selector combinators in nested rules, including child selectors and adjacent sibling selectors.

LANGUAGE: scss
CODE:
ul > {
  li {
    list-style-type: none;
  }
}

h2 {
  + p {
    border-top: 1px solid gray;
  }
}

p {
  ~ {
    span {
      opacity: 0.8;
    }
  }
}

LANGUAGE: sass
CODE:
ul >
  li
    list-style-type: none



h2
  + p
    border-top: 1px solid gray



p
  ~
    span
      opacity: 0.8

----------------------------------------

TITLE: Rendering Partial Compatibility Indicator in Markdown
DESCRIPTION: Shows how to use a custom Markdown syntax to render a compatibility indicator with partial support and additional details.

LANGUAGE: markdown
CODE:
{% compatibility 'dart: true', 'libsass: "partial"', 'ruby: false' %}
  Additional details go here.
{% endcompatibility %}

----------------------------------------

TITLE: Handling null in Sass Lists
DESCRIPTION: Demonstrates how null values are omitted when generating CSS from Sass lists. Shows map-get operation returning null for non-existent keys.

LANGUAGE: scss
CODE:
$fonts: ("serif": "Helvetica Neue", "monospace": "Consolas");

h3 {
  font: 18px bold map-get($fonts, "sans");
}

----------------------------------------

TITLE: Basic @use Example in SCSS and Sass
DESCRIPTION: Demonstrates basic usage of @use to load styles from other files. The example shows how to use @use in both SCSS and Sass syntaxes.

LANGUAGE: scss
CODE:
// foundation/_code.scss
code {
  padding: .25em;
  line-height: 0;
}

// foundation/_lists.scss
ul, ol {
  text-align: left;

  & & {
    padding: {
      bottom: 0;
      left: 0;
    }
  }
}

// style.scss
@use 'foundation/code';
@use 'foundation/lists';

LANGUAGE: sass
CODE:
// foundation/_code.sass
code
  padding: .25em
  line-height: 0

// foundation/_lists.sass
ul, ol
  text-align: left

  & &
    padding:
      bottom: 0
      left: 0

// style.sass
@use 'foundation/code'
@use 'foundation/lists'

----------------------------------------

TITLE: Basic @use Example in SCSS and Sass
DESCRIPTION: Demonstrates basic usage of @use to load styles from other files. The example shows how to use @use in both SCSS and Sass syntaxes.

LANGUAGE: scss
CODE:
// foundation/_code.scss
code {
  padding: .25em;
  line-height: 0;
}

// foundation/_lists.scss
ul, ol {
  text-align: left;

  & & {
    padding: {
      bottom: 0;
      left: 0;
    }
  }
}

// style.scss
@use 'foundation/code';
@use 'foundation/lists';

LANGUAGE: sass
CODE:
// foundation/_code.sass
code
  padding: .25em
  line-height: 0

// foundation/_lists.sass
ul, ol
  text-align: left

  & &
    padding:
      bottom: 0
      left: 0

// style.sass
@use 'foundation/code'
@use 'foundation/lists'

----------------------------------------

TITLE: Selector List Nesting in Sass
DESCRIPTION: Shows how to nest selector lists with comma-separated selectors, demonstrating how Sass handles complex selector combinations.

LANGUAGE: scss
CODE:
.alert, .warning {
  ul, p {
    margin-right: 0;
    margin-left: 0;
    padding-bottom: 0;
  }
}

LANGUAGE: sass
CODE:
.alert, .warning
  ul, p
    margin-right: 0
    margin-left: 0
    padding-bottom: 0

----------------------------------------

TITLE: Interpolation in Sass Selectors
DESCRIPTION: Shows how to use interpolation to inject dynamic values into selectors, particularly useful in mixins for generating dynamic class names.

LANGUAGE: scss
CODE:
@mixin define-emoji($name, $glyph) {
  span.emoji-#{$name} {
    font-family: IconFont;
    font-variant: normal;
    font-weight: normal;
    content: $glyph;
  }
}

@include define-emoji("women-holding-hands", "👭");

LANGUAGE: sass
CODE:
@mixin define-emoji($name, $glyph)
  span.emoji-#{$name}
    font-family: IconFont
    font-variant: normal
    font-weight: normal
    content: $glyph



@include define-emoji("women-holding-hands", "👭")

----------------------------------------

TITLE: HTML Structure Illustrating Descendant Combinator Differences
DESCRIPTION: Presents an HTML structure where the difference in descendant combinator handling between Sass and native CSS nesting becomes evident.

LANGUAGE: html
CODE:
<div class=foo>
  <div class="green-theme">
    <p class=bar>
  </div>
</div>

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the page layout and title, defining the page structure and basic metadata.

LANGUAGE: markdown
CODE:
---
layout: has_no_sidebars
title: Implementation Guide
introduction: >
  Sass has a thriving community of implementations, with more being produced all
  the time. The core team loves to see new implementations thrive and mature,
  and they want to help out in any way they can.
---

----------------------------------------

TITLE: Using the Global HWB Function in SCSS
DESCRIPTION: Shows how to use the global hwb() function to create colors using hue, whiteness, and blackness values.

LANGUAGE: scss
CODE:
@debug hwb(210deg 0% 60%); // #036
@debug hwb(210 0% 60% / 0.5); // rgba(0, 51, 102, 0.5)

----------------------------------------

TITLE: Comparing Sass and Native CSS Nesting Selector Resolution
DESCRIPTION: Demonstrates how Sass and native CSS nesting differ in resolving nested selectors, particularly in terms of specificity due to the implicit use of :is() in native CSS.

LANGUAGE: scss
CODE:
.foo, #bar {
  .baz { /* ... */ }
}

----------------------------------------

TITLE: Installing Sass on Windows using Chocolatey
DESCRIPTION: Demonstrates the installation of Dart Sass using the Chocolatey package manager for Windows. This method provides an easy way to install Sass on Windows systems.

LANGUAGE: shellsession
CODE:
choco install sass

----------------------------------------

TITLE: Transformation Pass Algorithm for @extend
DESCRIPTION: Complex pseudocode detailing how selectors are transformed using recorded @extend information.

LANGUAGE: pseudocode
CODE:
let MAP be the subset map from the recording pass

define extend_complex(COMPLEX, SEEN) to be:
  let CHOICES be an empty list of lists of complex selectors
  for each compound selector COMPOUND in COMPLEX:
    let EXTENDED be extend_compound(COMPOUND, SEEN)
    if no complex selector in EXTENDED is a superselector of COMPOUND:
      add a complex selector composed only of COMPOUND to EXTENDED
    add EXTENDED to CHOICES

  let WEAVES be an empty list of selector lists
  for each list of complex selectors PATH in paths(CHOICES):
    add weave(PATH) to WEAVES
  return trim(WEAVES)

define extend_compound(COMPOUND, SEEN) to be:
  let RESULTS be an empty list of complex selectors
  for each (EXTENDER, TARGET) in MAP.get(COMPOUND):
    if SEEN contains TARGET, move to the next iteration

    let COMPOUND_WITHOUT_TARGET be COMPOUND without any of the simple selectors in TARGET
    let EXTENDER_COMPOUND be the last compound selector in EXTENDER
    let UNIFIED be unify(EXTENDER_COMPOUND, COMPOUND_WITHOUT_TARGET)
    if UNIFIED is null, move to the next iteration

    let UNIFIED_COMPLEX be EXTENDER with the last compound selector replaced with UNIFIED
    with TARGET in SEEN:
      add each complex selector in extend_complex(UNIFIED_COMPLEX, SEEN) to RESULTS
  return RESULTS

for each selector COMPLEX in the document:
  let SEEN be an empty set of compound selectors
  let LIST be a selector list comprised of the complex selectors in extend_complex(COMPLEX, SEEN)
  replace COMPLEX with LIST

----------------------------------------

TITLE: HTML Navigation Bar with Schema.org Markup
DESCRIPTION: A semantic HTML navigation component with Schema.org markup, accessibility attributes, and links to main site sections. Includes a grid layout structure and a search component placeholder.

LANGUAGE: html
CODE:
<nav
  class="sl-r-banner__navigation sl-l-grid__column sl-l-large-grid sl-l-large-grid__column--auto-size sl-c-list-horizontal-wrapper"
  itemtype="https://schema.org/SiteNavigationElement"
  itemscope="itemscope"
  role="navigation"
  aria-label="Site navigation">

- [Playground](/playground)
- [Install](/install)
- [Learn Sass](/guide)
- [Blog](/blog)
- [Documentation](/documentation)
- [Get Involved](/community)
- <div id="docsearch"></div>

</nav>

----------------------------------------

TITLE: CSS Range-Format Media Query Example
DESCRIPTION: Demonstrates the CSS Media Queries Level 4 range syntax for defining media queries with width conditions.

LANGUAGE: css
CODE:
@media (width > 500px) {
  /* ... */
}

----------------------------------------

TITLE: Running Eleventy Development Server for Sass Website
DESCRIPTION: This command compiles the Sass website using Eleventy and starts a local development server with file watching enabled. It allows developers to see changes in real-time as they modify the source files.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Displaying Brand Color Swatches with SASS Variables using HTML and Liquid
DESCRIPTION: This snippet creates a responsive grid layout to display color swatches for brand colors. Each swatch is represented by a colored block and the corresponding SASS variable name. It uses Liquid templating to iterate through a predefined list of color names.

LANGUAGE: HTML
CODE:
<ul class="sl-l-grid sl-l-grid--full sl-l-large-grid--divide-by-3 sl-l-large-grid--gutters">
  {% for swatch in colors %}
    <li class="sl-l-grid__column">
      <p class="sl-color--{{ swatch }}-background">&nbsp;</p>
      <code>$sl-color--{{ swatch }}</code>
    </li>
  {% endfor %}
</ul>

----------------------------------------

TITLE: Rendering Font Family List with Liquid Templates
DESCRIPTION: Template that generates a description list of font families, displaying the font style visually and its corresponding Sass variable name. Uses Liquid templating to iterate through font family data.

LANGUAGE: html
CODE:
{% for font_family in font_families %}
  <dl class="guide-description-list">
    <dt class="sl-font-family--{{ font_family.style }}">{{ font_family.value }}</dt>
    <dd>
      <code>$sl-font-family--{{ font_family.style }}</code>
    </dd>
  </dl>
{% endfor %}

----------------------------------------

TITLE: Creating Navigation List Components in HTML
DESCRIPTION: This snippet demonstrates how to create navigation list components using HTML and Sass classes. It includes examples of both vertical and horizontal navigation lists.

LANGUAGE: HTML
CODE:
<div class="sl-c-list-navigation-wrapper" style="height: unset; position: unset">

  - [Vertical](#)
  - [Navigation](#)
  - [List](#)

</div>

<div class="sl-c-list-horizontal-wrapper">

  - [Horizontal](#)
  - [Navigation](#)
  - [List](#)

</div>