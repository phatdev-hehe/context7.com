TITLE: Configuring Axios Request Options in JavaScript
DESCRIPTION: Complete reference implementation showing all available configuration options for Axios HTTP requests. Includes settings for URL construction, HTTP methods, data transformation, authentication, timeout handling, proxies, and various other request customization options.

LANGUAGE: javascript
CODE:
{
  // `url` is the server URL that will be used for the request
  url: '/user',

  // `method` is the request method to be used when making the request
  method: 'get', // default

  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: 'https://some-domain.com/api',

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  transformRequest: [function (data, headers) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  transformResponse: [function (data) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `headers` are custom headers to be sent
  headers: {'X-Requested-With': 'XMLHttpRequest'},

  // `params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  // NOTE: params that are null or undefined are not rendered in the URL.
  params: {
    ID: 12345
  },

  // `paramsSerializer` is an optional function in charge of serializing `params`
  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
  paramsSerializer: function (params) {
    return Qs.stringify(params, {arrayFormat: 'brackets'})
  },

  // `data` is the data to be sent as the request body
  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer
  data: {
    firstName: 'Fred'
  },
  
  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data: 'Country=Brasil&City=Belo Horizonte',

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  timeout: 1000, // default is `0` (no timeout)

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  withCredentials: false, // default

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md).
  adapter: function (config) {
    /* ... */
  },

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },

  // `responseType` indicates the type of data that the server will respond with
  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'
  //   browser only: 'blob'
  responseType: 'json', // default

  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)
  // Note: Ignored for `responseType` of 'stream' or client-side requests
  responseEncoding: 'utf8', // default

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  xsrfCookieName: 'XSRF-TOKEN', // default

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  xsrfHeaderName: 'X-XSRF-TOKEN', // default

  // `onUploadProgress` allows handling of progress events for uploads
  // browser only
  onUploadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `onDownloadProgress` allows handling of progress events for downloads
  // browser only
  onDownloadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js
  maxContentLength: 2000,

  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed
  maxBodyLength: 2000,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  validateStatus: function (status) {
    return status >= 200 && status < 300; // default
  },

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  maxRedirects: 5, // default

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  socketPath: null, // default

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default.
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // `proxy` defines the hostname, port, and protocol of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // Disable if supplying a custom httpAgent/httpsAgent to manage proxying requests.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  // If the proxy server uses HTTPS, then you must set the protocol to `https`. 
  proxy: {
    protocol: 'https',
    host: '127.0.0.1',
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  },

  // `signal` and instance of AbortController can be used to cancel the request
  signal: new AbortController().signal,

  // (Deprecatred) `cancelToken` specifies a cancel token that can also be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: new CancelToken(function (cancel) {
  }),

  // `decompress` indicates whether or not the response body should be decompressed 
  // automatically. If set to `true` will also remove the 'content-encoding' header 
  // from the responses objects of all decompressed responses
  // - Node only (XHR cannot turn off decompression)
  decompress: true // default

}

----------------------------------------

TITLE: Making POST Request with Axios Config Object
DESCRIPTION: Demonstrates how to send a POST request using axios() with a full configuration object specifying method, URL and request body data.

LANGUAGE: javascript
CODE:
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});

----------------------------------------

TITLE: Performing GET Requests with Axios using Async/Await
DESCRIPTION: This snippet shows how to use Axios with async/await syntax for making GET requests. It includes error handling within a try-catch block.

LANGUAGE: javascript
CODE:
// Want to use async/await? Add the `async` keyword to your outer function/method.
async function getUser() {
  try {
    const response = await axios.get('/user?ID=12345');
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}

----------------------------------------

TITLE: Performing Basic JSON POST Request with Axios
DESCRIPTION: Demonstrates how to make a basic POST request with a JSON payload using Axios. The example shows sending user data and handling the response using promises.

LANGUAGE: javascript
CODE:
axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

----------------------------------------

TITLE: Catching and Analyzing Axios Errors in JavaScript
DESCRIPTION: This snippet demonstrates how to catch and analyze different types of errors that may occur during an Axios request. It checks for server responses, request failures, and setup errors.

LANGUAGE: javascript
CODE:
axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });

----------------------------------------

TITLE: Creating Custom Axios Instance with Configuration
DESCRIPTION: Demonstrates how to create a new Axios instance with custom base URL, timeout, and headers. The axios.create() method accepts a configuration object to customize the instance behavior.

LANGUAGE: javascript
CODE:
const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});

----------------------------------------

TITLE: Adding Request and Response Interceptors in Axios
DESCRIPTION: Demonstrates how to add interceptors for both requests and responses in Axios. These interceptors can modify the request config or response data, or handle errors before they reach the main promise chain.

LANGUAGE: javascript
CODE:
// Add a request interceptor
axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// Add a response interceptor
axios.interceptors.response.use(function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  }, function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  });

----------------------------------------

TITLE: Cancelling Axios Requests with AbortController
DESCRIPTION: Demonstrates how to cancel an Axios request using the AbortController API. This is the recommended modern approach for request cancellation available since Axios v0.22.0.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

axios.get('/foo/bar', {
   signal: controller.signal
}).then(function(response) {
   //...
});
// cancel the request
controller.abort()

----------------------------------------

TITLE: Setting Global Axios Defaults
DESCRIPTION: Demonstrates how to configure global defaults for all Axios requests including baseURL, authorization headers, and content type settings.

LANGUAGE: javascript
CODE:
axios.defaults.baseURL = 'https://api.example.com';
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

----------------------------------------

TITLE: Performing GET Requests with Axios using Promises
DESCRIPTION: This example demonstrates how to make GET requests using Axios with promise-based syntax. It includes error handling and a 'finally' block for cleanup operations.

LANGUAGE: javascript
CODE:
const axios = require('axios');

// Make a request for a user with a given ID
axios.get('/user?ID=12345')
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .finally(function () {
    // always executed
  });

// Optionally the request above could also be done as
axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .finally(function () {
    // always executed
  });  

----------------------------------------

TITLE: Making Concurrent Axios Requests
DESCRIPTION: Shows how to perform multiple concurrent HTTP requests using Axios with Promise.all(). Demonstrates both async/await and promise-based approaches.

LANGUAGE: javascript
CODE:
function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

const [acct, perm] = await Promise.all([getUserAccount(), getUserPermissions()]);

// OR

Promise.all([getUserAccount(), getUserPermissions()])
  .then(function ([acct, perm]) {
    // ...
  });

----------------------------------------

TITLE: Customizing Error Triggering Conditions in Axios
DESCRIPTION: This snippet shows how to use the validateStatus config option in Axios to define which HTTP status codes should trigger an error. In this example, only status codes 500 and above will throw an error.

LANGUAGE: javascript
CODE:
axios.get('/user/12345', {
  validateStatus: function (status) {
    return status < 500; // Resolve only if the status code is less than 500
  }
})

----------------------------------------

TITLE: Using URLSearchParams in Browser with Axios
DESCRIPTION: Demonstrates how to use the URLSearchParams API to format request data for URL-encoded form submission in browsers.

LANGUAGE: javascript
CODE:
const params = new URLSearchParams();
params.append('param1', 'value1');
params.append('param2', 'value2');
axios.post('/foo', params);

----------------------------------------

TITLE: Posting FormData using Axios in Browser
DESCRIPTION: Demonstrates how to create a FormData object and post it using Axios in a browser environment. It shows appending various types of data including text, Blob, and file input.

LANGUAGE: javascript
CODE:
const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Blob([1,2,3]));
form.append('my_file', fileInput.files[0]);

axios.post('https://example.com', form)

----------------------------------------

TITLE: Downloading Image Stream with Axios in Node.js
DESCRIPTION: Shows how to download an image file using Axios in Node.js by setting responseType to 'stream' and piping the response to a write stream.

LANGUAGE: javascript
CODE:
axios({
  method: 'get',
  url: 'http://bit.ly/2mTM3nY',
  responseType: 'stream'
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
  });

----------------------------------------

TITLE: Defining Axios Response Schema in JavaScript
DESCRIPTION: This snippet outlines the structure of an Axios response object, detailing each property and its purpose. It includes data, status, statusText, headers, config, and request properties.

LANGUAGE: javascript
CODE:
{
  // `data` is the response that was provided by the server
  data: {},

  // `status` is the HTTP status code from the server response
  status: 200,

  // `statusText` is the HTTP status message from the server response
  // As of HTTP/2 status text is blank or unsupported.
  // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)
  statusText: 'OK',

  // `headers` the HTTP headers that the server responded with
  // All header names are lower cased and can be accessed using the bracket notation.
  // Example: `response.headers['content-type']`
  headers: {},

  // `config` is the config that was provided to `axios` for the request
  config: {},

  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance in the browser
  request: {}
}

----------------------------------------

TITLE: Creating Custom Axios Instance with Defaults
DESCRIPTION: Shows how to create a custom Axios instance with specific defaults and modify them after creation.

LANGUAGE: javascript
CODE:
// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: 'https://api.example.com'
});

// Alter defaults after instance has been created
instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;

----------------------------------------

TITLE: Importing and Using Axios with TypeScript
DESCRIPTION: Demonstrates the basic TypeScript usage of Axios for making HTTP requests. Shows how to import the axios module and make a GET request with TypeScript type definitions.

LANGUAGE: typescript
CODE:
import axios from 'axios';
axios.get('/user?ID=12345');

----------------------------------------

TITLE: Axios Request Timeout with AbortSignal
DESCRIPTION: Shows how to implement request timeout using AbortSignal.timeout() API. This method is available in Node.js 17.3+ and provides a clean way to automatically cancel requests after a specified duration.

LANGUAGE: javascript
CODE:
axios.get('/foo/bar', {
   signal: AbortSignal.timeout(5000) //Aborts request after 5 seconds
}).then(function(response) {
   //...
});

----------------------------------------

TITLE: Obtaining Detailed Error Information in Axios
DESCRIPTION: This snippet demonstrates how to use the toJSON method on an Axios error object to get more detailed information about the HTTP error that occurred during the request.

LANGUAGE: javascript
CODE:
axios.get('/user/12345')
  .catch(function (error) {
    console.log(error.toJSON());
  });

----------------------------------------

TITLE: Configuring Axios Request Options in JavaScript
DESCRIPTION: This snippet demonstrates the complete set of configuration options available for Axios requests. It includes settings for URL, method, headers, data transformation, authentication, timeout, and more. Each option is explained with comments.

LANGUAGE: javascript
CODE:
{
  // `url` is the server URL that will be used for the request
  url: '/user',

  // `method` is the request method to be used when making the request
  method: 'get', // default

  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: 'https://some-domain.com/api',

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  transformRequest: [function (data, headers) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  transformResponse: [function (data) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `headers` are custom headers to be sent
  headers: {'X-Requested-With': 'XMLHttpRequest'},

  // `params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  // NOTE: params that are null or undefined are not rendered in the URL.
  params: {
    ID: 12345
  },

  // `paramsSerializer` is an optional function in charge of serializing `params`
  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
  paramsSerializer: function (params) {
    return Qs.stringify(params, {arrayFormat: 'brackets'})
  },

  // `data` is the data to be sent as the request body
  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer
  data: {
    firstName: 'Fred'
  },
  
  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data: 'Country=Brasil&City=Belo Horizonte',

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  timeout: 1000, // default is `0` (no timeout)

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  withCredentials: false, // default

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md).
  adapter: function (config) {
    /* ... */
  },

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  auth: {
    username: 'janedoe',
    password: 's00pers3cret'
  },

  // `responseType` indicates the type of data that the server will respond with
  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'
  //   browser only: 'blob'
  responseType: 'json', // default

  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)
  // Note: Ignored for `responseType` of 'stream' or client-side requests
  responseEncoding: 'utf8', // default

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  xsrfCookieName: 'XSRF-TOKEN', // default

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  xsrfHeaderName: 'X-XSRF-TOKEN', // default

  // `onUploadProgress` allows handling of progress events for uploads
  // browser only
  onUploadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `onDownloadProgress` allows handling of progress events for downloads
  // browser only
  onDownloadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js
  maxContentLength: 2000,

  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed
  maxBodyLength: 2000,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  validateStatus: function (status) {
    return status >= 200 && status < 300; // default
  },

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  maxRedirects: 5, // default

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  socketPath: null, // default

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default.
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // `proxy` defines the hostname, port, and protocol of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  // If the proxy server uses HTTPS, then you must set the protocol to `https`. 
  proxy: {
    protocol: 'https',
    host: '127.0.0.1',
    port: 9000,
    auth: {
      username: 'mikeymike',
      password: 'rapunz3l'
    }
  },

  // `cancelToken` specifies a cancel token that can be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: new CancelToken(function (cancel) {
  }),

  // `decompress` indicates whether or not the response body should be decompressed 
  // automatically. If set to `true` will also remove the 'content-encoding' header 
  // from the responses objects of all decompressed responses
  // - Node only (XHR cannot turn off decompression)
  decompress: true // default

}

----------------------------------------

TITLE: Making HTTP GET Requests with Axios
DESCRIPTION: Demonstrates three different methods of making GET requests with Axios: using promise chains, using the params object for query parameters, and using async/await syntax. Includes error handling and response processing for each approach.

LANGUAGE: javascript
CODE:
const axios = require('axios');

// Make a request for a user with a given ID
axios.get('/user?ID=12345')
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .then(function () {
    // always executed
  });

// Optionally the request above could also be done as
axios.get('/user', {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .then(function () {
    // always executed
  });  

// Want to use async/await? Add the `async` keyword to your outer function/method.
async function getUser() {
  try {
    const response = await axios.get('/user?ID=12345');
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}

----------------------------------------

TITLE: Performing POST Request with Axios in JavaScript
DESCRIPTION: This snippet demonstrates how to make a POST request using Axios. It sends a JSON payload with user data and handles the response using promise callbacks.

LANGUAGE: javascript
CODE:
axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

----------------------------------------

TITLE: Creating Custom Axios Instance in JavaScript
DESCRIPTION: Demonstrates how to create a new Axios instance with custom configuration including baseURL, timeout, and custom headers. This allows for creating reusable axios configurations for specific use cases.

LANGUAGE: javascript
CODE:
const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});

----------------------------------------

TITLE: Implementing Basic Axios Request and Response Interceptors
DESCRIPTION: Demonstrates how to add interceptors for both requests and responses in Axios. Request interceptors run before a request is sent, while response interceptors handle the incoming response data or errors. Both interceptors can modify the data or handle errors before the main promise chain.

LANGUAGE: javascript
CODE:
// Add a request interceptor
axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// Add a response interceptor
axios.interceptors.response.use(function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  }, function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  });

----------------------------------------

TITLE: Basic Axios Error Handling with Catch Block
DESCRIPTION: Demonstrates comprehensive error handling for Axios requests using catch() blocks. Handles three scenarios: server response errors, no response received, and request setup errors.

LANGUAGE: javascript
CODE:
axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });

----------------------------------------

TITLE: Setting Global Axios Defaults in JavaScript
DESCRIPTION: This snippet demonstrates how to set global defaults for Axios, including the base URL, common headers, and content type for POST requests.

LANGUAGE: javascript
CODE:
axios.defaults.baseURL = 'https://api.example.com';
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

----------------------------------------

TITLE: Canceling Axios Requests with AbortController
DESCRIPTION: Demonstrates how to use the AbortController API to cancel Axios requests. This is the recommended approach since v0.22.0, using the standard fetch API cancellation pattern.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

axios.get('/foo/bar', {
   signal: controller.signal
}).then(function(response) {
   //...
});
// cancel the request
controller.abort()

----------------------------------------

TITLE: Defining Axios Response Schema in JavaScript
DESCRIPTION: This snippet outlines the structure of an Axios response object, including data, status, headers, and other properties returned from an HTTP request.

LANGUAGE: javascript
CODE:
{
  // `data` is the response that was provided by the server
  data: {},

  // `status` is the HTTP status code from the server response
  status: 200,

  // `statusText` is the HTTP status message from the server response
  // As of HTTP/2 status text is blank or unsupported.
  // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)
  statusText: 'OK',

  // `headers` the HTTP headers that the server responded with
  // All header names are lower cased and can be accessed using the bracket notation.
  // Example: `response.headers['content-type']`
  headers: {},

  // `config` is the config that was provided to `axios` for the request
  config: {},

  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance in the browser
  request: {}
}

----------------------------------------

TITLE: URL-Encoding Bodies with URLSearchParams in Browser
DESCRIPTION: This snippet demonstrates how to use the URLSearchParams API to encode data for a POST request in the browser environment using Axios.

LANGUAGE: javascript
CODE:
const params = new URLSearchParams();
params.append('param1', 'value1');
params.append('param2', 'value2');
axios.post('/foo', params);

----------------------------------------

TITLE: Canceling Axios Requests with AbortController in JavaScript
DESCRIPTION: This snippet demonstrates how to use AbortController to cancel an Axios GET request. It creates a controller, passes its signal to the Axios config, and shows how to abort the request.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

axios.get('/foo/bar', {
   signal: controller.signal
}).then(function(response) {
   //...
});
// cancel the request
controller.abort()

----------------------------------------

TITLE: Posting HTML Form as JSON with Axios
DESCRIPTION: Example of submitting an HTML form as JSON using Axios. Sets the appropriate content-type header and uses form selector.

LANGUAGE: javascript
CODE:
const {data} = await axios.post('/user', document.querySelector('#my-form'), {
  headers: {
    'Content-Type': 'application/json'
  }
})

----------------------------------------

TITLE: Using QS Library for URL Encoding with Axios
DESCRIPTION: Shows how to use the 'qs' library to stringify data for URL-encoded form submission.

LANGUAGE: javascript
CODE:
const qs = require('qs');
axios.post('/foo', qs.stringify({ 'bar': 123 }));

----------------------------------------

TITLE: Posting Form Data using Axios shorthand method
DESCRIPTION: Shows how to use the Axios postForm shorthand method to achieve the same result as using FormData. This method automatically serializes the data into FormData format.

LANGUAGE: javascript
CODE:
axios.postForm('https://httpbin.org/post', {
  my_field: 'my value',
  my_buffer: new Blob([1,2,3]),
  my_file:  fileInput.files // FileList will be unwrapped as sepate fields
});

----------------------------------------

TITLE: Simple GET Request with Axios
DESCRIPTION: Shows the simplified syntax for making a GET request (default method) using axios() with just a URL parameter.

LANGUAGE: javascript
CODE:
axios('/user/12345');

----------------------------------------

TITLE: Accessing Axios Response Properties in JavaScript Promise
DESCRIPTION: This example demonstrates how to access various properties of an Axios response object within a promise's 'then' block. It shows logging of data, status, statusText, headers, and config.

LANGUAGE: javascript
CODE:
axios.get('/user/12345')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });

----------------------------------------

TITLE: Implementing Axios Config Precedence
DESCRIPTION: Illustrates the order of precedence in Axios configuration using timeout settings as an example, showing how instance defaults can be overridden per request.

LANGUAGE: javascript
CODE:
// Create an instance using the config defaults provided by the library
// At this point the timeout config value is `0` as is the default for the library
const instance = axios.create();

// Override timeout default for the library
// Now all requests using this instance will wait 2.5 seconds before timing out
instance.defaults.timeout = 2500;

// Override timeout for this request as it's known to take a long time
instance.get('/longRequest', {
  timeout: 5000
});

----------------------------------------

TITLE: Custom Timeout Implementation with AbortController
DESCRIPTION: A helper function implementation for creating timeout-based abort signals. This approach works in environments where AbortSignal.timeout() is not available.

LANGUAGE: javascript
CODE:
function newAbortSignal(timeoutMs) {
  const abortController = new AbortController();
  setTimeout(() => abortController.abort(), timeoutMs || 0);

  return abortController.signal;
}

axios.get('/foo/bar', {
   signal: newAbortSignal(5000) //Aborts request after 5 seconds
}).then(function(response) {
   //...
});

----------------------------------------

TITLE: Setting up Axios with TypeScript Typings in CommonJS
DESCRIPTION: Shows how to import Axios with TypeScript typings support when using CommonJS require() syntax. This enables autocomplete and parameter type hints in supported IDEs.

LANGUAGE: javascript
CODE:
const axios = require('axios').default;

// axios.<method> will now provide autocomplete and parameter typings

----------------------------------------

TITLE: Executing Multiple Concurrent Requests with Axios in JavaScript
DESCRIPTION: This snippet shows how to perform multiple concurrent GET requests using Axios. It defines separate functions for each request and uses Promise.all() to handle them concurrently.

LANGUAGE: javascript
CODE:
function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

Promise.all([getUserAccount(), getUserPermissions()])
  .then(function (results) {
    const acct = results[0];
    const perm = results[1];
  });

----------------------------------------

TITLE: Removing Axios Interceptors
DESCRIPTION: Shows how to remove a previously added interceptor using the eject method. This is useful when you need to dynamically manage interceptors during runtime.

LANGUAGE: javascript
CODE:
const myInterceptor = axios.interceptors.request.use(function () {/*...*/});
axios.interceptors.request.eject(myInterceptor);

----------------------------------------

TITLE: Custom HTTP Status Validation in Axios
DESCRIPTION: Shows how to customize which HTTP status codes should trigger errors using the validateStatus configuration option. This example allows all status codes below 500 to be treated as successful responses.

LANGUAGE: javascript
CODE:
axios.get('/user/12345', {
  validateStatus: function (status) {
    return status < 500; // Resolve only if the status code is less than 500
  }
})

----------------------------------------

TITLE: Creating and Configuring Custom Axios Instances in JavaScript
DESCRIPTION: This code shows how to create a custom Axios instance with default settings and how to modify its defaults after creation.

LANGUAGE: javascript
CODE:
// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: 'https://api.example.com'
});

// Alter defaults after instance has been created
instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;

----------------------------------------

TITLE: Canceling Axios Requests with CancelToken Source
DESCRIPTION: Shows how to cancel requests using the deprecated CancelToken.source() factory method. This approach includes error handling for canceled requests and supports multiple request cancellation.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');

----------------------------------------

TITLE: Accessing Axios Response Properties with Promises in JavaScript
DESCRIPTION: This snippet demonstrates how to access various properties of an Axios response object using the Promise .then() method after making a GET request.

LANGUAGE: javascript
CODE:
axios.get('/user/12345')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });

----------------------------------------

TITLE: URL-Encoding Bodies with qs Library in Browser
DESCRIPTION: This example shows how to use the qs library to stringify and encode data for a POST request using Axios in the browser.

LANGUAGE: javascript
CODE:
const qs = require('qs');
axios.post('/foo', qs.stringify({ 'bar': 123 }));

----------------------------------------

TITLE: Canceling Axios Requests with CancelToken in JavaScript (Deprecated)
DESCRIPTION: This snippet shows the deprecated CancelToken method for canceling Axios requests. It creates a cancel token source, uses it in GET and POST requests, and demonstrates how to cancel the requests.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');

----------------------------------------

TITLE: Submitting Multipart Form Data with Axios
DESCRIPTION: Demonstrates how to submit multipart form data including files using Axios. Shows handling of multiple data types including arrays and file inputs.

LANGUAGE: javascript
CODE:
const {data} = await axios.post('https://httpbin.org/post', {
    firstName: 'Fred',
    lastName: 'Flintstone',
    orders: [1, 2, 3],
    photo: document.querySelector('#fileInput').files
  }, {
    headers: {
      'Content-Type': 'multipart/form-data'
    }
  }
)

----------------------------------------

TITLE: ES6 Implementation with QS Library and Axios
DESCRIPTION: Modern ES6 approach using the 'qs' library with explicit headers and options configuration.

LANGUAGE: javascript
CODE:
import qs from 'qs';
const data = { 'bar': 123 };
const options = {
  method: 'POST',
  headers: { 'content-type': 'application/x-www-form-urlencoded' },
  data: qs.stringify(data),
  url,
};
axios(options);

----------------------------------------

TITLE: Posting FormData using Axios in Node.js
DESCRIPTION: Demonstrates how to create and post FormData in a Node.js environment using Axios. It includes examples of appending text and Blob data.

LANGUAGE: javascript
CODE:
import axios from 'axios';

const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Blob(['some content']));

axios.post('https://example.com', form)

----------------------------------------

TITLE: Deprecated CancelToken Implementation
DESCRIPTION: Shows the legacy CancelToken approach for request cancellation. This method is deprecated since Axios v0.22.0 but included for maintaining existing implementations.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');

----------------------------------------

TITLE: Canceling Axios Requests with CancelToken Constructor
DESCRIPTION: Demonstrates cancellation using the CancelToken constructor with an executor function. This deprecated approach provides more direct control over the cancel function.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
let cancel;

axios.get('/user/12345', {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();

----------------------------------------

TITLE: Adding Interceptors to Custom Axios Instance
DESCRIPTION: Demonstrates how to add interceptors to a custom Axios instance instead of the global axios object. This allows for different interceptor configurations for different instances.

LANGUAGE: javascript
CODE:
const instance = axios.create();
instance.interceptors.request.use(function () {/*...*/});

----------------------------------------

TITLE: Demonstrating Config Precedence in Axios Requests with JavaScript
DESCRIPTION: This example illustrates the order of precedence for Axios configurations, showing how defaults can be overridden at different levels.

LANGUAGE: javascript
CODE:
// Create an instance using the config defaults provided by the library
// At this point the timeout config value is `0` as is the default for the library
const instance = axios.create();

// Override timeout default for the library
// Now all requests using this instance will wait 2.5 seconds before timing out
instance.defaults.timeout = 2500;

// Override timeout for this request as it's known to take a long time
instance.get('/longRequest', {
  timeout: 5000
});

----------------------------------------

TITLE: URL-Encoding Bodies with qs Library and Custom Options in Browser
DESCRIPTION: This snippet demonstrates an alternative way to use the qs library with custom options for encoding data in a POST request using Axios in the browser.

LANGUAGE: javascript
CODE:
import qs from 'qs';
const data = { 'bar': 123 };
const options = {
  method: 'POST',
  headers: { 'content-type': 'application/x-www-form-urlencoded' },
  data: qs.stringify(data),
  url,
};
axios(options);

----------------------------------------

TITLE: Creating CancelToken with Executor Function in Axios (JavaScript)
DESCRIPTION: This snippet demonstrates an alternative way to create a CancelToken using an executor function. It shows how to create and use the token in an Axios GET request and how to cancel it.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
let cancel;

axios.get('/user/12345', {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();

----------------------------------------

TITLE: Submitting URL Encoded Form Data with Axios
DESCRIPTION: Shows how to submit form data using URL encoded format. Demonstrates setting the appropriate content-type header and structuring the data.

LANGUAGE: javascript
CODE:
const {data} = await axios.post('https://httpbin.org/post', {
    firstName: 'Fred',
    lastName: 'Flintstone',
    orders: [1, 2, 3]
  }, {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
})

----------------------------------------

TITLE: Node.js QueryString Implementation with Axios
DESCRIPTION: Demonstrates using Node.js built-in querystring module for URL-encoded form submission.

LANGUAGE: javascript
CODE:
const querystring = require('querystring');
axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));

----------------------------------------

TITLE: Posting FormData with file using third-party package in Node.js
DESCRIPTION: Shows how to use a third-party package (formdata-node) to create FormData with file content in Node.js, as Node.js doesn't natively support creating Blobs from files.

LANGUAGE: javascript
CODE:
import {fileFromPath} from 'formdata-node/file-from-path'

form.append('my_field', 'my value');
form.append('my_file', await fileFromPath('/foo/bar.jpg'));

axios.post('https://example.com', form)

----------------------------------------

TITLE: Using Both AbortController and CancelToken
DESCRIPTION: Shows how to use both cancellation APIs simultaneously during the transition period. This approach supports both modern and legacy cancellation patterns in the same request.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token,
  signal: controller.signal
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');
// OR
controller.abort(); // the message parameter is not supported

----------------------------------------

TITLE: URL-Encoding Bodies with querystring Module in Node.js
DESCRIPTION: This example shows how to use the querystring module to stringify and encode data for a POST request using Axios in Node.js.

LANGUAGE: javascript
CODE:
const querystring = require('querystring');
axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));

----------------------------------------

TITLE: Using Both AbortController and CancelToken in Axios (JavaScript)
DESCRIPTION: This snippet shows how to use both AbortController and CancelToken APIs simultaneously for the same request during the transition period. It demonstrates setting up both cancellation methods and how to cancel using either approach.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token,
  signal: controller.signal
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');
// OR
controller.abort(); // the message parameter is not supported

----------------------------------------

TITLE: Node.js URLSearchParams Implementation with Axios
DESCRIPTION: Shows how to use Node.js URLSearchParams from the url module for form submission.

LANGUAGE: javascript
CODE:
const url = require('url');
const params = new url.URLSearchParams({ foo: 'bar' });
axios.post('http://something.com/', params.toString());

----------------------------------------

TITLE: Posting FormData using form-data package in older Axios versions
DESCRIPTION: Demonstrates how to use the form-data package to create and post FormData in Node.js for Axios versions older than v1.3.0.

LANGUAGE: javascript
CODE:
const FormData = require('form-data');

const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Buffer(10));
form.append('my_file', fs.createReadStream('/foo/bar.jpg'));

axios.post('https://example.com', form)

----------------------------------------

TITLE: URL-Encoding Bodies with URLSearchParams in Node.js
DESCRIPTION: This snippet demonstrates how to use the URLSearchParams class from the url module to encode data for a POST request in Node.js using Axios.

LANGUAGE: javascript
CODE:
const url = require('url');
const params = new url.URLSearchParams({ foo: 'bar' });
axios.post('http://something.com/', params.toString());

----------------------------------------

TITLE: Automatic Serialization with Axios
DESCRIPTION: Demonstrates Axios's automatic serialization of nested objects when content-type is set to application/x-www-form-urlencoded.

LANGUAGE: javascript
CODE:
const data = {
  x: 1,
  arr: [1, 2, 3],
  arr2: [1, [2], 3],
  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],
};

await axios.post('https://postman-echo.com/post', data,
  {headers: {'content-type': 'application/x-www-form-urlencoded'}}
);

----------------------------------------

TITLE: Automatic serialization of objects to FormData in Axios
DESCRIPTION: Demonstrates Axios's automatic serialization of objects to FormData when the Content-Type header is set to multipart/form-data. This feature is available from Axios v0.27.0.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.post('https://httpbin.org/post', {
  user: {
    name: 'Dmitriy'
  },
  file: fs.createReadStream('/foo/bar.jpg')
}, {
  headers: {
    'Content-Type': 'multipart/form-data'
  }
}).then(({data})=> console.log(data));

----------------------------------------

TITLE: Sending Form Data with form-data Library in Node.js
DESCRIPTION: This example demonstrates how to use the form-data library to create and send multipart form data in a POST request using Axios in Node.js.

LANGUAGE: javascript
CODE:
const FormData = require('form-data');

const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Buffer(10));
form.append('my_file', fs.createReadStream('/foo/bar.jpg'));

axios.post('https://example.com', form, { headers: form.getHeaders() })

----------------------------------------

TITLE: Express.js Server Implementation for URL-encoded Bodies
DESCRIPTION: Server-side implementation using Express.js to handle URL-encoded request bodies with body-parser middleware.

LANGUAGE: javascript
CODE:
var app = express();

app.use(bodyParser.urlencoded({ extended: true })); // support url-encoded bodies

app.post('/', function (req, res, next) {
   res.send(JSON.stringify(req.body));
});

server = app.listen(3000);

----------------------------------------

TITLE: Using Axios FormData serializer with special endings
DESCRIPTION: Shows how to use Axios FormData serializer with special endings for JSON serialization and array unwrapping. It also demonstrates the use of shortcut methods and direct FileList passing.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.post('https://httpbin.org/post', {
  'myObj{}': {x: 1, s: "foo"},
  'files[]': document.querySelector('#fileInput').files 
}, {
  headers: {
    'Content-Type': 'multipart/form-data'
  }
}).then(({data})=> console.log(data));

LANGUAGE: javascript
CODE:
await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)

----------------------------------------

TITLE: Using Axios Interceptor for Form Data Headers in Node.js
DESCRIPTION: This snippet shows how to use an Axios interceptor to automatically set the appropriate headers when sending form data in Node.js.

LANGUAGE: javascript
CODE:
axios.interceptors.request.use(config => {
  if (config.data instanceof FormData) {
    Object.assign(config.headers, config.data.getHeaders());
  }
  return config;
});

----------------------------------------

TITLE: Alternative CancelToken Creation Method
DESCRIPTION: Demonstrates creating a cancel token using the CancelToken constructor with an executor function. This is an alternative to the source factory method but is also deprecated.

LANGUAGE: javascript
CODE:
const CancelToken = axios.CancelToken;
let cancel;

axios.get('/user/12345', {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();

----------------------------------------

TITLE: Combined Signal and CancelToken Usage
DESCRIPTION: Demonstrates using both modern AbortController signal and deprecated CancelToken approaches simultaneously during transition periods.

LANGUAGE: javascript
CODE:
const controller = new AbortController();

const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get('/user/12345', {
  cancelToken: source.token,
  signal: controller.signal
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log('Request canceled', thrown.message);
  } else {
    // handle error
  }
});

axios.post('/user/12345', {
  name: 'new name'
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel('Operation canceled by the user.');
// OR
controller.abort(); // the message parameter is not supported

----------------------------------------

TITLE: Importing Language Configuration in JavaScript
DESCRIPTION: This snippet demonstrates how to import a language configuration file in the root configuration of the Axios documentation project.

LANGUAGE: javascript
CODE:
const {language-shortcut}Config = require('./{language-shortcut}.config.js');

----------------------------------------

TITLE: Registering New Language in JavaScript Configuration
DESCRIPTION: This code shows how to add a new language to the 'langs' constant in the root configuration file. It includes the language name, prefix, and imported configuration object.

LANGUAGE: javascript
CODE:
const langs = [
  ...
  {
    name: 'Some name that uniquely identifies your language, for example "English" or "German"',
    prefix: "The same prefix as in the configuration file",
    config: {language-shortcut}Config // The configuration object you imported earlier
  }
  ...
];

----------------------------------------

TITLE: Importing Language Configuration in JavaScript
DESCRIPTION: This snippet demonstrates how to import a language configuration file in JavaScript. It uses a dynamic import based on the language shortcode.

LANGUAGE: javascript
CODE:
const {language-shortcut}Config = require('./{language-shortcut}.config.js');

----------------------------------------

TITLE: Installing Axios with npm
DESCRIPTION: Command to install Axios using npm package manager.

LANGUAGE: bash
CODE:
$ npm install axios

----------------------------------------

TITLE: Installing Axios with Bower
DESCRIPTION: Command to install Axios using Bower package manager.

LANGUAGE: bash
CODE:
$ bower install axios

----------------------------------------

TITLE: Installing Axios with Yarn
DESCRIPTION: Command to install Axios using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn add axios

----------------------------------------

TITLE: Including Axios via jsDelivr CDN
DESCRIPTION: HTML script tag to include Axios from jsDelivr CDN in a web page.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

----------------------------------------

TITLE: Including Axios via unpkg CDN
DESCRIPTION: HTML script tag to include Axios from unpkg CDN in a web page.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

----------------------------------------

TITLE: Importing Axios as CommonJS Module
DESCRIPTION: JavaScript code to import Axios as a CommonJS module for both browser and Node.js environments.

LANGUAGE: javascript
CODE:
const axios = require('axios/dist/browser/axios.cjs'); // browser
const axios = require('axios/dist/node/axios.cjs'); // node

----------------------------------------

TITLE: Installing Axios with npm
DESCRIPTION: Command to install Axios using npm package manager.

LANGUAGE: bash
CODE:
$ npm install axios

----------------------------------------

TITLE: Installing Axios with Bower
DESCRIPTION: Command to install Axios using Bower package manager.

LANGUAGE: bash
CODE:
$ bower install axios

----------------------------------------

TITLE: Installing Axios with Yarn
DESCRIPTION: Command to install Axios using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn add axios

----------------------------------------

TITLE: Including Axios via jsDelivr CDN
DESCRIPTION: HTML script tag to include Axios from jsDelivr CDN in a web page.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

----------------------------------------

TITLE: Including Axios via unpkg CDN
DESCRIPTION: HTML script tag to include Axios from unpkg CDN in a web page.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

----------------------------------------

TITLE: Installing Inert CLI for Axios Documentation Generation
DESCRIPTION: This command installs the Inert static site generator CLI globally using npm or yarn. The Inert CLI is required to build the Axios documentation website.

LANGUAGE: bash
CODE:
npm i -g inert-ssg # yarn global add inert-ssg

----------------------------------------

TITLE: Building Axios Documentation with Inert
DESCRIPTION: This command uses the Inert CLI to build the Axios documentation. It converts markdown files to HTML, inserts them into templates, compiles SCSS styles, and outputs the result to the 'public' directory.

LANGUAGE: bash
CODE:
inert build

----------------------------------------

TITLE: Installing Inert SSG for Axios Documentation Development
DESCRIPTION: Instructions for setting up the development environment for Axios documentation using Inert SSG. This includes removing any existing inert-cli installation and installing inert-ssg globally.

LANGUAGE: bash
CODE:
npm i -g inert-ssg

LANGUAGE: bash
CODE:
yarn global add inert-ssg

LANGUAGE: bash
CODE:
inert build