TITLE: Implementing Platform-Specific Screenshot Capture in Expo App
DESCRIPTION: TypeScript code demonstrating how to handle platform differences for screenshot capture in a universal Expo app. It uses react-native-view-shot for native platforms and dom-to-image for web.

LANGUAGE: tsx
CODE:
import { View, StyleSheet, Platform } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useState, useRef } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import * as MediaLibrary from 'expo-media-library';
import { type ImageSource } from 'expo-image';
import { captureRef } from 'react-native-view-shot';
import domtoimage from 'dom-to-image';

// ... (other imports)

export default function Index() {
  // ... (other state and ref declarations)

  const onSaveImageAsync = async () => {
    if (Platform.OS !== 'web') {
      try {
        const localUri = await captureRef(imageRef, {
          height: 440,
          quality: 1,
        });

        await MediaLibrary.saveToLibraryAsync(localUri);
        if (localUri) {
          alert('Saved!');
        }
      } catch (e) {
        console.log(e);
      }
    } else {
      try {
        const dataUrl = await domtoimage.toJpeg(imageRef.current, {
          quality: 0.95,
          width: 320,
          height: 440,
        });

        let link = document.createElement('a');
        link.download = 'sticker-smash.jpeg';
        link.href = dataUrl;
        link.click();
      } catch (e) {
        console.log(e);
      }
    }
  };

  // ... (rest of the component)
}

----------------------------------------

TITLE: Basic CRUD Operations with SQLite in Expo
DESCRIPTION: Demonstrates common database operations including creating tables, inserting, updating, deleting, and querying data using the SQLite API in Expo.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });

const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}

----------------------------------------

TITLE: Basic Push Notification Setup in React Native
DESCRIPTION: Example of a complete React Native application setup for handling push notifications, including token registration, notification handling, and scheduling notifications.

LANGUAGE: typescript
CODE:
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(undefined);
  const notificationListener = useRef<Notifications.Subscription>();
  const responseListener = useRef<Notifications.Subscription>();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.current && Notifications.removeNotificationSubscription(notificationListener.current);
      responseListener.current && Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

----------------------------------------

TITLE: Basic CRUD Operations with expo-sqlite
DESCRIPTION: Demonstrates basic Create, Read, Update, and Delete (CRUD) operations using expo-sqlite, including opening a database, executing queries, and retrieving results.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa');
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']);
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' });

const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}

----------------------------------------

TITLE: Using Image Component in Expo React Native
DESCRIPTION: Demonstrates how to use the Image component from expo-image in a React Native application. It showcases loading an image with a blurhash placeholder, content fitting, and transition effects.

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});

----------------------------------------

TITLE: Implementing Lottie Animation Component in React Native
DESCRIPTION: A complete example showing how to implement a Lottie animation in a React Native application. The code demonstrates setting up a Lottie view with autoPlay, animation controls, and styling. It includes a button to restart the animation and uses refs for programmatic control.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});

----------------------------------------

TITLE: Implementing Tabs with Nested Stack in Expo Router
DESCRIPTION: This snippet shows how to create a tab layout with a nested stack navigator for one of the tabs. It uses the Tabs component from expo-router and hides the header in the outer navigator.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs screenOptions={{ headerShown: false }}>
      <Tab.Screen name="index" options={{ title: 'Home' }} />
      <Tab.Screen name="feed" options={{ title: 'Feed' }} />
      <Tab.Screen name="settings" options={{ title: 'Settings' }} />
    </Tabs>
  );
}

----------------------------------------

TITLE: Implementing Sound Playback in React Native with Expo-AV
DESCRIPTION: Example showing how to load and play audio files using expo-av's Audio.Sound API. Includes proper sound resource management with useEffect cleanup.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Downloading Files with Progress Tracking in React Native
DESCRIPTION: Demonstrates how to download files with progress tracking, pause/resume functionality, and persistence across app restarts using FileSystem API.

LANGUAGE: javascript
CODE:
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

----------------------------------------

TITLE: Implementing Push Notifications in React Native with Expo
DESCRIPTION: A complete implementation of push notification functionality including permission handling, token generation, notification handling, and UI display. Uses expo-notifications, expo-device, and expo-constants libraries to manage push notifications in a React Native application.

LANGUAGE: tsx
CODE:
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

async function sendPushNotification(expoPushToken: string) {
  const message = {
    to: expoPushToken,
    sound: 'default',
    title: 'Original Title',
    body: 'And here is the body!',
    data: { someData: 'goes here' },
  };

  await fetch('https://exp.host/--/api/v2/push/send', {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Accept-encoding': 'gzip, deflate',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(message),
  });
}

function handleRegistrationError(errorMessage: string) {
  alert(errorMessage);
  throw new Error(errorMessage);
}

async function registerForPushNotificationsAsync() {
  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      handleRegistrationError('Permission not granted to get push token for push notification!');
      return;
    }
    const projectId =
      Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
    if (!projectId) {
      handleRegistrationError('Project ID not found');
    }
    try {
      const pushTokenString = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(pushTokenString);
      return pushTokenString;
    } catch (e: unknown) {
      handleRegistrationError(`${e}`);
    }
  } else {
    handleRegistrationError('Must use physical device for push notifications');
  }
}

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );
  const notificationListener = useRef<Notifications.EventSubscription>();
  const responseListener = useRef<Notifications.EventSubscription>();

  useEffect(() => {
    registerForPushNotificationsAsync()
      .then(token => setExpoPushToken(token ?? ''))
      .catch((error: any) => setExpoPushToken(`${error}`));

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.current &&
        Notifications.removeNotificationSubscription(notificationListener.current);
      responseListener.current &&
        Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>
      <Text>Your Expo push token: {expoPushToken}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to Send Notification"
        onPress={async () => {
          await sendPushNotification(expoPushToken);
        }}
      />
    </View>
  );
}

----------------------------------------

TITLE: Configuring LocalAuthentication Plugin in Expo App Config
DESCRIPTION: JSON configuration for expo-local-authentication plugin in app.json, demonstrating how to set Face ID permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-local-authentication",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to use Face ID."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Basic Barcode Scanner Implementation in React Native
DESCRIPTION: Complete example of implementing a barcode scanner with permission handling, camera preview, and scan result processing. Uses useState and useEffect hooks for state management.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Button } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';

export default function App() {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);

  useEffect(() => {
    const getBarCodeScannerPermissions = async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    };

    getBarCodeScannerPermissions();
  }, []);

  const handleBarCodeScanned = ({ type, data }) => {
    setScanned(true);
    alert(`Bar code with type ${type} and data ${data} has been scanned!`);
  };

  if (hasPermission === null) {
    return <Text>Requesting for camera permission</Text>;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  return (
    <View style={styles.container}>
      <BarCodeScanner
        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
        style={StyleSheet.absoluteFillObject}
      />
      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Importing Existing Database in React Native with TypeScript
DESCRIPTION: Shows how to use SQLiteProvider to open an existing SQLite database file in a React Native application.

LANGUAGE: tsx
CODE:
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" assetSource={{ assetId: require('./assets/test.db') }}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

----------------------------------------

TITLE: Creating Authenticated Home Screen with Sign-Out in Expo Router
DESCRIPTION: This snippet shows how to implement an authenticated home screen that allows users to sign out. It uses the useSession hook to access the signOut function.

LANGUAGE: tsx
CODE:
import { Text, View } from 'react-native';

import { useSession } from '../../ctx';

export default function Index() {
  const { signOut } = useSession();
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text
        onPress={() => {
          // The `app/(app)/_layout.tsx` will redirect to the sign-in screen.
          signOut();
        }}>
        Sign Out
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: Basic Push Notifications React Native Component
DESCRIPTION: Complete example of setting up push notifications in a React Native app, including token management, notification handling, and scheduling.

LANGUAGE: jsx
CODE:
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);
  const notificationListener = useRef();
  const responseListener = useRef();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

----------------------------------------

TITLE: Rendering BoxLink Components in JSX for Expo Introduction
DESCRIPTION: This code snippet demonstrates the usage of custom BoxLink components to present two options for getting started with Expo development. It includes importing icons and the BoxLink component, and renders two BoxLink elements with different properties.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Automated setup with expo.new"
  description="Create a project, set up your development environment, automatically configure build and update automations, and start developing."
  href="https://expo.new/"
  Icon={Earth02Icon}
/>

<BoxLink
  title="Quick start docs"
  description="Create a project, set up your development environment, and start developing."
  href="/get-started/create-a-project/"
  Icon={BookOpen02Icon}
/>

----------------------------------------

TITLE: Using SecureStore in a React Native Component
DESCRIPTION: Example React Native component demonstrating how to use SecureStore to save and retrieve key-value pairs securely.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 10,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    marginTop: 34,
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  textInput: {
    height: 35,
    borderColor: 'gray',
    borderWidth: 0.5,
    padding: 4,
  },
});

----------------------------------------

TITLE: Navigating to Dynamic Routes with Static Parameters in Expo Router
DESCRIPTION: Example of implementing navigation to dynamic routes using the Link component with static query parameters. Shows how to create links to different user detail pages from a home screen.

LANGUAGE: tsx
CODE:
import { Link } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <Text>Home</Text>
      <Link href="/details/1">View first user details</Link>
      <Link href="/details/2">View second user details</Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Configuring Multiple Build Profiles in eas.json
DESCRIPTION: Example configuration showing how to set up multiple build profiles (base, development, staging, production) with platform-specific settings for both Android and iOS. Includes environment variables, build distribution settings, and profile inheritance using 'extends'.

LANGUAGE: json
CODE:
{
  "build": {
    "base": {
      "node": "12.13.0",
      "yarn": "1.22.5",
      "env": {
        "EXAMPLE_ENV": "example value"
      },
      "android": {
        "image": "default",
        "env": {
          "PLATFORM": "android"
        }
      },
      "ios": {
        "image": "latest",
        "env": {
          "PLATFORM": "ios"
        }
      }
    },
    "development": {
      "extends": "base",
      "developmentClient": true,
      "env": {
        "ENVIRONMENT": "development"
      },
      "android": {
        "distribution": "internal",
        "withoutCredentials": true
      },
      "ios": {
        "simulator": true
      }
    },
    "staging": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "staging"
      },
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "production"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Apple Authentication in React Native
DESCRIPTION: Complete React Native component implementation showing how to use the Apple Authentication button and handle sign-in flow with error handling.

LANGUAGE: jsx
CODE:
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});

----------------------------------------

TITLE: Implementing Storage State Hook in TypeScript
DESCRIPTION: This snippet shows a custom hook for managing storage state, supporting both web (localStorage) and native (expo-secure-store) platforms. It provides functions for getting and setting storage items asynchronously.

LANGUAGE: tsx
CODE:
import  { useEffect, useCallback, useReducer } from 'react';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

type UseStateHook<T> = [[boolean, T | null], (value: T | null) => void];

function useAsyncState<T>(
  initialValue: [boolean, T | null] = [true, null],
): UseStateHook<T> {
  return useReducer(
    (state: [boolean, T | null], action: T | null = null): [boolean, T | null] => [false, action],
    initialValue
  ) as UseStateHook<T>;
}

export async function setStorageItemAsync(key: string, value: string | null) {
  if (Platform.OS === 'web') {
    try {
      if (value === null) {
        localStorage.removeItem(key);
      } else {
        localStorage.setItem(key, value);
      }
    } catch (e) {
      console.error('Local storage is unavailable:', e);
    }
  } else {
    if (value == null) {
      await SecureStore.deleteItemAsync(key);
    } else {
      await SecureStore.setItemAsync(key, value);
    }
  }
}

export function useStorageState(key: string): UseStateHook<string> {
  // Public
  const [state, setState] = useAsyncState<string>();

  // Get
  useEffect(() => {
    if (Platform.OS === 'web') {
      try {
        if (typeof localStorage !== 'undefined') {
          setState(localStorage.getItem(key));
        }
      } catch (e) {
        console.error('Local storage is unavailable:', e);
      }
    } else {
      SecureStore.getItemAsync(key).then(value => {
        setState(value);
      });
    }
  }, [key]);

  // Set
  const setValue = useCallback(
    (value: string | null) => {
      setState(value);
      setStorageItemAsync(key, value);
    },
    [key]
  );

  return [state, setValue];
}

----------------------------------------

TITLE: Initializing Firebase JS SDK in Expo
DESCRIPTION: This snippet demonstrates how to initialize the Firebase JS SDK in an Expo project. It creates a config object with API keys and other identifiers, then uses initializeApp() to set up Firebase.

LANGUAGE: javascript
CODE:
import { initializeApp } from 'firebase/app';

// Optionally import the services that you want to use
// import {...} from 'firebase/auth';
// import {...} from 'firebase/database';
// import {...} from 'firebase/firestore';
// import {...} from 'firebase/functions';
// import {...} from 'firebase/storage';

// Initialize Firebase
const firebaseConfig = {
  apiKey: 'api-key',
  authDomain: 'project-id.firebaseapp.com',
  databaseURL: 'https://project-id.firebaseio.com',
  projectId: 'project-id',
  storageBucket: 'project-id.appspot.com',
  messagingSenderId: 'sender-id',
  appId: 'app-id',
  measurementId: 'G-measurement-id',
};

const app = initializeApp(firebaseConfig);
// For more information on how to access Firebase in your project,
// see the Firebase documentation: https://firebase.google.com/docs/web/setup#access-firebase

----------------------------------------

TITLE: Basic Barcode Scanner Implementation in React Native
DESCRIPTION: Complete example of implementing a barcode scanner with permission handling, camera preview, and scan result processing. Uses useState and useEffect hooks for state management.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Button } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';

export default function App() {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);

  useEffect(() => {
    const getBarCodeScannerPermissions = async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    };

    getBarCodeScannerPermissions();
  }, []);

  const handleBarCodeScanned = ({ type, data }) => {
    setScanned(true);
    alert(`Bar code with type ${type} and data ${data} has been scanned!`);
  };

  if (hasPermission === null) {
    return <Text>Requesting for camera permission</Text>;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  return (
    <View style={styles.container}>
      <BarCodeScanner
        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
        style={StyleSheet.absoluteFillObject}
      />
      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Implementing Root Layout with Stack Navigator in Expo Router
DESCRIPTION: This snippet demonstrates a root layout file that loads fonts, manages the splash screen, and sets up a stack navigator. It uses useFonts hook, SplashScreen API, and expo-router's Stack component.

LANGUAGE: tsx
CODE:
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return <Stack />;
}

----------------------------------------

TITLE: Configuring App Registration in React Native
DESCRIPTION: Shows how to modify index.js to use Expo's registerRootComponent instead of React Native's registerApplication for proper asset loading in updates.

LANGUAGE: diff
CODE:
diff --git a/index.js b/index.js
index a850d03..8fb69fd 100644
--- a/index.js
+++ b/index.js
@@ -2,8 +2,7 @@
  * @forma
  */

-import {AppRegistry} from 'react-native';
+import {registerRootComponent} from 'expo';
 import App from './App';
-import {name as appName} from './app.json';

-AppRegistry.registerComponent(appName, () => App);
+export default registerRootComponent(App);

----------------------------------------

TITLE: Basic Navigation with useRouter in Expo Router
DESCRIPTION: Demonstrates how to use the useRouter hook for basic navigation between pages using the navigate function.

LANGUAGE: tsx
CODE:
import { useRouter } from 'expo-router';

export default function Home() {
  const router = useRouter();

  return <Button onPress={() => router.navigate('/about')}>Go to About</Button>;
}

----------------------------------------

TITLE: Implementing Background Location Tracking with Expo TaskManager
DESCRIPTION: This example demonstrates how to use expo-task-manager and expo-location to implement background location tracking in an Expo app. It includes requesting permissions, defining a background task, and creating a button to enable background location updates.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button, View, StyleSheet } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as Location from 'expo-location';

const LOCATION_TASK_NAME = 'background-location-task';

const requestPermissions = async () => {
  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();
  if (foregroundStatus === 'granted') {
    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
    if (backgroundStatus === 'granted') {
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
      });
    }
  }
};

const PermissionsButton = () => (
  <View style={styles.container}>
    <Button onPress={requestPermissions} title="Enable background location" />
  </View>
);

TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
    // Error occurred - check `error.message` for more details.
    return;
  }
  if (data) {
    const { locations } = data;
    // do something with the locations captured in the background
  }
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default PermissionsButton;

----------------------------------------

TITLE: Basic ImageManipulator Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use expo-image-manipulator to rotate an image 90 degrees clockwise, flip it vertically, and save it as a PNG. It utilizes the useImageManipulator hook and React state to manage the image manipulation process.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';

const IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));

export default function App() {
  const [image, setImage] = useState(IMAGE);
  const context = useImageManipulator(IMAGE.uri);

  const rotate90andFlip = async () => {
    context.rotate(90).flip(FlipType.Vertical);
    const image = await context.renderAsync();
    const result = await image.saveAsync({
      format: SaveFormat.PNG,
    });

    setImage(result);
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
      </View>
      <Button title="Rotate and Flip" onPress={rotate90andFlip} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  imageContainer: {
    marginVertical: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'contain',
  },
});

----------------------------------------

TITLE: Using useSQLiteContext Hook in React Components
DESCRIPTION: Demonstrates how to use the useSQLiteContext hook to access the SQLite database in React components, including database initialization and data fetching.

LANGUAGE: tsx
CODE:
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
    async function setup() {
      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
        'SELECT sqlite_version()'
      );
      setVersion(result['sqlite_version()']);
    }
    setup();
  }, []);
  return (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>SQLite version: {version}</Text>
    </View>
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo[]>([]);

  useEffect(() => {
    async function setup() {
      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
      setTodos(result);
    }
    setup();
  }, []);

  return (
    <View style={styles.contentContainer}>
      {todos.map((todo, index) => (
        <View style={styles.todoItemContainer} key={index}>
          <Text>{`${todo.intValue} - ${todo.value}`}</Text>
        </View>
      ))}
    </View>
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
    'PRAGMA user_version'
  );
  if (currentDbVersion >= DATABASE_VERSION) {
    return;
  }
  if (currentDbVersion === 0) {
    await db.execAsync(`
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
    currentDbVersion = 1;
  }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

----------------------------------------

TITLE: Implementing Haptic Feedback in React Native with Expo
DESCRIPTION: A comprehensive example showing how to implement various haptic feedback patterns including selection, notification, and impact feedback using expo-haptics. The code demonstrates different feedback intensities and types with a styled button interface.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Haptics.selectionAsync</Text>
      <View style={styles.buttonContainer}>
        <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
      </View>
      <Text style={styles.text}>Haptics.notificationAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Success"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Success
              )
          }
        />
        <Button
          title="Error"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Error
              )
          }
        />
        <Button
          title="Warning"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Warning
              )
          }
        />
      </View>
      <Text style={styles.text}>Haptics.impactAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Light"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
          }
        />
        <Button
          title="Medium"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
          }
        />
        <Button
          title="Heavy"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
          }
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 16,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 10,
    marginBottom: 30,
    justifyContent: 'space-between',
  },
});

----------------------------------------

TITLE: Basic Camera Implementation in React Native
DESCRIPTION: Complete example of implementing a camera component with front/back camera toggle functionality, including permissions handling and styling

LANGUAGE: jsx
CODE:
import { Camera, CameraType } from 'expo-camera/legacy';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [type, setType] = useState(CameraType.back);
  const [permission, requestPermission] = Camera.useCameraPermissions();

  if (!permission) {
    return <View />;
  }

  if (!permission.granted) {
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraType() {
    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));
  }

  return (
    <View style={styles.container}>
      <Camera style={styles.camera} type={type}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </Camera>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});

----------------------------------------

TITLE: Implementing Haptic Feedback in React Native with Expo
DESCRIPTION: A comprehensive example showing how to implement different types of haptic feedback in a React Native application. Demonstrates selection, notification, and impact haptic patterns with various intensity levels.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Haptics.selectionAsync</Text>
      <View style={styles.buttonContainer}>
        <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
      </View>
      <Text style={styles.text}>Haptics.notificationAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Success"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Success
              )
          }
        />
        <Button
          title="Error"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Error
              )
          }
        />
        <Button
          title="Warning"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Warning
              )
          }
        />
      </View>
      <Text style={styles.text}>Haptics.impactAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Light"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
          }
        />
        <Button
          title="Medium"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
          }
        />
        <Button
          title="Heavy"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
          }
        />
        <Button
          title="Rigid"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)
          }
        />
        <Button
          title="Soft"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)
          }
        />
      </View>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Basic Barometer Functionality in React Native
DESCRIPTION: A complete React Native component that demonstrates how to implement barometer sensor readings using expo-sensors. The component includes functionality to start/stop the barometer listener and display pressure and relative altitude values. Note that relative altitude is only available on iOS.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});

----------------------------------------

TITLE: GIF Management System Implementation
DESCRIPTION: Implementation of a GIF management system with functions for downloading, caching, and managing GIF files locally using FileSystem API

LANGUAGE: typescript
CODE:
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

----------------------------------------

TITLE: Defining a Basic Expo Module in Swift
DESCRIPTION: Shows how to define a simple Expo module named 'MyFirstExpoModule' with a 'hello' function that takes a name parameter and returns a greeting string.

LANGUAGE: Swift
CODE:
public class MyModule: Module {
  public func definition() -> ModuleDefinition {
    Name("MyFirstExpoModule")

    Function("hello") { (name: String) in
      return "Hello \(name)!"
    }
  }
}

----------------------------------------

TITLE: Implementing Pan Gesture for Drag and Drop
DESCRIPTION: Adds pan gesture handling to enable dragging the emoji sticker around the screen using translation animations.

LANGUAGE: tsx
CODE:
const drag = Gesture.Pan().onChange(event => {
  translateX.value += event.changeX;
  translateY.value += event.changeY;
});

const containerStyle = useAnimatedStyle(() => {
  return {
    transform: [
      {
        translateX: translateX.value,
      },
      {
        translateY: translateY.value,
      },
    ],
  };
});

----------------------------------------

TITLE: Custom Font Loading in React Native App
DESCRIPTION: Complete example of loading and using custom fonts in a React Native application using expo-font and expo-splash-screen. Demonstrates font loading, splash screen management, and font usage in components.

LANGUAGE: typescript
CODE:
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Basic Brightness Control in React Native
DESCRIPTION: Example React Native component demonstrating how to request brightness permissions and set system brightness. Uses expo-brightness module with useEffect hook to control brightness on component mount.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Brightness.requestPermissionsAsync();
      if (status === 'granted') {
        Brightness.setSystemBrightnessAsync(1);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Brightness Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Generating Video Thumbnails with React Native and Expo
DESCRIPTION: A complete React Native component example showing how to generate video thumbnails using expo-video-thumbnails. The component includes a button to trigger thumbnail generation from a video URL and displays the resulting thumbnail image.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
    try {
      const { uri } = await VideoThumbnails.getThumbnailAsync(
        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        {
          time: 15000,
        }
      );
      setImage(uri);
    } catch (e) {
      console.warn(e);
    }
  };

  return (
    <View style={styles.container}>
      <Button onPress={generateThumbnail} title="Generate thumbnail" />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <Text>{image}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Creating Authentication Context Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create a React Context provider for authentication. It includes functions for signing in and out, as well as accessing the session state.

LANGUAGE: tsx
CODE:
import { useContext, createContext, type PropsWithChildren } from 'react';
import { useStorageState } from './useStorageState';

const AuthContext = createContext<{
  signIn: () => void;
  signOut: () => void;
  session?: string | null;
  isLoading: boolean;
}>({
  signIn: () => null,
  signOut: () => null,
  session: null,
  isLoading: false,
});

// This hook can be used to access the user info.
export function useSession() {
  const value = useContext(AuthContext);
  if (process.env.NODE_ENV !== 'production') {
    if (!value) {
      throw new Error('useSession must be wrapped in a <SessionProvider />');
    }
  }

  return value;
}

export function SessionProvider({ children }: PropsWithChildren) {
  const [[isLoading, session], setSession] = useStorageState('session');

  return (
    <AuthContext.Provider
      value={{
        signIn: () => {
          // Perform sign-in logic here
          setSession('xxx');
        },
        signOut: () => {
          setSession(null);
        },
        session,
        isLoading,
      }}>
      {children}
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: React Native Accelerometer Implementation
DESCRIPTION: A complete React Native component demonstrating accelerometer implementation using expo-sensors. Shows how to subscribe to accelerometer updates, handle data changes, and control update intervals. Includes UI controls for starting/stopping monitoring and adjusting update frequency.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

----------------------------------------

TITLE: Image Manipulation Example with React Native and Expo
DESCRIPTION: A complete example demonstrating how to rotate an image 90 degrees clockwise and flip it vertically using expo-image-manipulator. The code includes asset loading, image manipulation, and display functionality within a React Native component.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';

export default function App() {
  const [ready, setReady] = useState(false);
  const [image, setImage] = useState(null);

  useEffect(() => {
    (async () => {
      const image = Asset.fromModule(require('./assets/snack-icon.png'));
      await image.downloadAsync();
      setImage(image);
      setReady(true);
    })();
  }, []);

  const _rotate90andFlip = async () => {
    const manipResult = await manipulateAsync(
      image.localUri || image.uri,
      [{ rotate: 90 }, { flip: FlipType.Vertical }],
      { compress: 1, format: SaveFormat.PNG }
    );
    setImage(manipResult);
  };

  const _renderImage = () => (
    <View style={styles.imageContainer}>
      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
    </View>
  );

  return (
    <View style={styles.container}>
      {ready && image && _renderImage()}
      <Button title="Rotate and Flip" onPress={_rotate90andFlip} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  imageContainer: {
    marginVertical: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'contain',
  },
});

----------------------------------------

TITLE: Fetching Albums and Displaying Assets with expo-media-library
DESCRIPTION: React Native component demonstrating how to fetch albums and display assets using expo-media-library. It includes requesting permissions, fetching albums, and rendering album contents with images.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});

----------------------------------------

TITLE: Basic Camera Implementation in React Native
DESCRIPTION: Example React Native component implementing basic camera functionality with permission handling and camera type switching

LANGUAGE: jsx
CODE:
import { Camera, CameraType } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [type, setType] = useState(CameraType.back);
  const [permission, requestPermission] = Camera.useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraType() {
    setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));
  }

  return (
    <View style={styles.container}>
      <Camera style={styles.camera} type={type}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </Camera>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});

----------------------------------------

TITLE: Custom Font Loading in React Native App
DESCRIPTION: Complete example of loading and using custom fonts in a React Native application using expo-font and expo-splash-screen. Demonstrates font loading, splash screen management, and font usage in components.

LANGUAGE: typescript
CODE:
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Implementing Background Update Checks in Expo
DESCRIPTION: This code snippet demonstrates how to set up a background task to check for and apply updates in an Expo app. It defines and registers a background task that checks for updates, downloads them if available, and optionally reloads the app.

LANGUAGE: typescript
CODE:
import * as TaskManager from 'expo-task-manager';
import * as BackgroundTask from 'expo-background-task';
import * as Updates from 'expo-updates';

export const setupBackgroundUpdates = async () => {
  const BACKGROUND_TASK_NAME = 'task-run-expo-update';

  // Define the background task - this must be done each time the app starts
  TaskManager.defineTask(BACKGROUND_TASK_NAME, async () => {
    const update = await Updates.checkForUpdateAsync();
    if (update.isAvailable) {
      await Updates.fetchUpdateAsync();
      await Updates.reloadAsync();
    }
    return Promise.resolve();
  });

  // Register the task if it was not previously registered
  const isRegistered = TaskManager.isTaskRegisteredAsync(BACKGROUND_TASK_NAME);
  if (!isRegistered) {
    await BackgroundTask.registerTaskAsync(BACKGROUND_TASK_NAME, {
      minimumInterval: 60 * 24, // 24 hours
    });
  }
};

----------------------------------------

TITLE: Implementing Pedometer Functionality in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Pedometer API from expo-sensors in a React Native application. It shows how to check pedometer availability, retrieve past step count, and subscribe to real-time step count updates.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
    const isAvailable = await Pedometer.isAvailableAsync();
    setIsPedometerAvailable(String(isAvailable));

    if (isAvailable) {
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - 1);

      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
      if (pastStepCountResult) {
        setPastStepCount(pastStepCountResult.steps);
      }

      return Pedometer.watchStepCount(result => {
        setCurrentStepCount(result.steps);
      });
    }
  };

  useEffect(() => {
    const subscription = subscribe();
    return () => subscription && subscription.remove();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
      <Text>Walk! And watch this go up: {currentStepCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Web Modal Implementation with Transparent Background
DESCRIPTION: Implementation of a web-specific modal with transparent background and animations using react-native-reanimated.

LANGUAGE: tsx
CODE:
import { Link } from 'expo-router';
import { Pressable, StyleSheet, Text } from 'react-native';
import Animated, { FadeIn, SlideInDown } from 'react-native-reanimated';

export default function Modal() {
  return (
    <Animated.View
      entering={FadeIn}
      style={{
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#00000040',
      }}
    >
      <Link href={'/'} asChild>
        <Pressable style={StyleSheet.absoluteFill} />
      </Link>
      <Animated.View
        entering={SlideInDown}
        style={{
          width: '90%',
          height: '80%',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: 'white',
        }}
      >
        <Text style={{ fontWeight: 'bold', marginBottom: 10 }}>Modal Screen</Text>
        <Link href="/">
          <Text>← Go back</Text>
        </Link>
      </Animated.View>
    </Animated.View>
  );

----------------------------------------

TITLE: Using SecureStore in a React Native Component
DESCRIPTION: A complete example of using expo-secure-store in a React Native component, demonstrating how to save and retrieve secure key-value pairs.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 10,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    marginTop: 34,
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  textInput: {
    height: 35,
    borderColor: 'gray',
    borderWidth: 0.5,
    padding: 4,
  },
});

----------------------------------------

TITLE: Implementing Live Photo Display with React Native and Expo
DESCRIPTION: A complete example demonstrating how to implement Live Photo functionality using expo-live-photo and expo-image-picker. The code shows image picking, displaying Live Photos, and controlling playback with a React Native component.

LANGUAGE: tsx
CODE:
import * as ImagePicker from 'expo-image-picker';
import { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';
import { useRef, useState } from 'react';
import { View, StyleSheet, Text, Button } from 'react-native';

export default function LivePhotoScreen() {
  const viewRef = useRef<LivePhotoViewType>(null);
  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['livePhotos'],
    });

    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {
      setLivePhoto({
        photoUri: result.assets[0].uri,
        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,
      });
    } else {
      console.error('Failed to pick a live photo');
    }
  };

  if (!LivePhotoView.isAvailable()) {
    return (
      <View style={styles.container}>
        <Text>expo-live-photo is not available on this platform 😕</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <LivePhotoView
        ref={viewRef}
        source={livePhoto}
        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}
        onLoadComplete={() => {
          console.log('Live photo loaded successfully!');
        }}
        onLoadError={error => {
          console.error('Failed to load the live photo: ', error.message);
        }}
      />
      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>
        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />
      </View>
      <Button title="Start Playback Hint" onPress={() => viewRef.current?.startPlayback('hint')} />
      <Button title="Start Playback" onPress={() => viewRef.current?.startPlayback('full')} />
      <Button title="Stop Playback" onPress={() => viewRef.current?.stopPlayback()} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 40,
  },
  livePhotoView: {
    alignSelf: 'stretch',
    height: 300,
  },
  pickImageExpanded: {
    alignSelf: 'stretch',
    height: 300,
    justifyContent: 'center',
  },
  pickImageCollapsed: {
    marginVertical: 10,
  },
  button: {
    marginVertical: 10,
  },
});

----------------------------------------

TITLE: Push Notification Implementation in React Native
DESCRIPTION: Complete example demonstrating push notification setup including token handling, notification handling, and scheduling in React Native with Expo Notifications

LANGUAGE: tsx
CODE:
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );
  const notificationListener = useRef<Notifications.EventSubscription>();
  const responseListener = useRef<Notifications.EventSubscription>();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.current &&
        Notifications.removeNotificationSubscription(notificationListener.current);
      responseListener.current &&
        Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

----------------------------------------

TITLE: Basic Calendar Usage in React Native with Expo
DESCRIPTION: Demonstrates how to use the expo-calendar module in a React Native application. It includes requesting calendar permissions, fetching calendars, and creating a new calendar. The example uses React hooks and async/await for asynchronous operations.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});

----------------------------------------

TITLE: Creating Video Component Reference in Expo
DESCRIPTION: Example demonstrating how to create and handle a reference to a Video component.

LANGUAGE: javascript
CODE:
_handleVideoRef = component => {
  const playbackObject = component;
  ...
}

render() {
  return (
      <Video
        ref={this._handleVideoRef}
      />
  )
}

----------------------------------------

TITLE: Basic Camera Implementation in React Native with Expo
DESCRIPTION: A complete example showing how to implement a basic camera view with front/back camera switching functionality and permission handling using expo-camera.

LANGUAGE: typescript
CODE:
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    return <View />;
  }

  if (!permission.granted) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});

----------------------------------------

TITLE: Implementing Background Fetch in React Native with expo-background-fetch
DESCRIPTION: This snippet demonstrates how to use expo-background-fetch to register, unregister, and manage background fetch tasks in a React Native application. It includes defining a task, registering it with configuration options, and creating a component to display and control the background fetch status.

LANGUAGE: tsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: Basic Video Player Implementation in React Native with Expo AV
DESCRIPTION: Example implementation of a video player with play/pause functionality using the Video component from expo-av. Features include native controls, resize mode, looping capability, and status updates.

LANGUAGE: jsx
CODE:
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
    <View style={styles.container}>
      <Video
        ref={video}
        style={styles.video}
        source={{
          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        }}
        useNativeControls
        resizeMode={ResizeMode.CONTAIN}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View style={styles.buttons}>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );
}

LANGUAGE: jsx
CODE:
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
  },
  video: {
    alignSelf: 'center',
    width: 320,
    height: 200,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Basic ImagePicker Implementation in React Native
DESCRIPTION: Example React Native component demonstrating how to implement image picking functionality using expo-image-picker, including displaying the selected image.

LANGUAGE: tsx
CODE:
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images', 'videos'],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Implementing Basic Checkbox Component in React Native with Expo
DESCRIPTION: Demonstrates how to create a checkbox component with different states including normal, custom colored, and disabled checkboxes. Uses React useState hook for state management and includes styling for layout and appearance.

LANGUAGE: tsx
CODE:
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});

----------------------------------------

TITLE: Creating Simple Animation with React Native Reanimated in JSX
DESCRIPTION: This code snippet demonstrates how to use react-native-reanimated to create a simple animation. It imports necessary components and functions, defines an animated component with a button to toggle its width, and applies styling.

LANGUAGE: jsx
CODE:
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});

----------------------------------------

TITLE: Building for iOS Simulator
DESCRIPTION: Command to initiate an iOS simulator build using the preview profile in EAS Build.

LANGUAGE: bash
CODE:
$ eas build -p ios --profile preview

----------------------------------------

TITLE: Initializing Supabase Client in React Native
DESCRIPTION: This code snippet demonstrates how to initialize the Supabase client in a React Native application. It sets up the client with the project URL and anonymous key, configuring authentication storage and session management.

LANGUAGE: typescript
CODE:
import 'react-native-url-polyfill/auto';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL;
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

----------------------------------------

TITLE: React Native Video Thumbnail Generation Example
DESCRIPTION: A complete React Native component example showing how to generate and display video thumbnails using expo-video-thumbnails. The component includes a button to trigger thumbnail generation from a video URL and displays the generated thumbnail image.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
    try {
      const { uri } = await VideoThumbnails.getThumbnailAsync(
        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        {
          time: 15000,
        }
      );
      setImage(uri);
    } catch (e) {
      console.warn(e);
    }
  };

  return (
    <View style={styles.container}>
      <Button onPress={generateThumbnail} title="Generate thumbnail" />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <Text>{image}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Using LightSensor in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the LightSensor module in a React Native application. It shows how to subscribe to light sensor data, update the state with illuminance values, and toggle the subscription on and off.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
    if (subscription) {
      unsubscribe();
    } else {
      subscribe();
    }
  };

  const subscribe = () => {
    setSubscription(
      LightSensor.addListener(sensorData => {
        setData(sensorData);
      })
    );
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    subscribe();
    return () => unsubscribe();
  }, []);

  return (
    <View style={styles.sensor}>
      <Text>Light Sensor:</Text>
      <Text>
        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
      </Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={toggle} style={styles.button}>
          <Text>Toggle</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  sensor: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
});

----------------------------------------

TITLE: Implementing Splash Screen Control in React Native
DESCRIPTION: This example demonstrates how to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It uses the SplashScreen module to prevent auto-hiding, set animation options, and manually hide the splash screen when ready.

LANGUAGE: jsx
CODE:
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}

----------------------------------------

TITLE: Basic Video Player Implementation with Play/Pause Controls
DESCRIPTION: Example of implementing a basic video player with play/pause functionality using expo-video, including styling and event handling.

LANGUAGE: jsx
CODE:
import { useEvent } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';
import { StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const player = useVideoPlayer(videoSource, player => {
    player.loop = true;
    player.play();
  });

  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });

  return (
    <View style={styles.contentContainer}>
      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />
      <View style={styles.controlsContainer}>
        <Button
          title={isPlaying ? 'Pause' : 'Play'}
          onPress={() => {
            if (isPlaying) {
              player.pause();
            } else {
              player.play();
            }
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 50,
  },
  video: {
    width: 350,
    height: 275,
  },
  controlsContainer: {
    padding: 10,
  },
});

----------------------------------------

TITLE: React Native Video Thumbnail Generator Example
DESCRIPTION: A complete React Native component example showing how to generate video thumbnails using expo-video-thumbnails. The component includes a button to trigger thumbnail generation and displays the resulting thumbnail image. It demonstrates error handling and state management.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
    try {
      const { uri } = await VideoThumbnails.getThumbnailAsync(
        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        {
          time: 15000,
        }
      );
      setImage(uri);
    } catch (e) {
      console.warn(e);
    }
  };

  return (
    <View style={styles.container}>
      <Button onPress={generateThumbnail} title="Generate thumbnail" />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <Text>{image}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Implementing Playback Status Update Handler
DESCRIPTION: Example of setting up a playback status update handler to manage different states of media playback.

LANGUAGE: javascript
CODE:
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
    // Update your UI for the unloaded state
    if (playbackStatus.error) {
      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
      // Send Expo team the error on Slack or the forums so we can help you debug!
    }
  } else {
    // Update your UI for the loaded state

    if (playbackStatus.isPlaying) {
      // Update your UI for the playing state
    } else {
      // Update your UI for the paused state
    }

    if (playbackStatus.isBuffering) {
      // Update your UI for the buffering state
    }

    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
      // The player has just finished playing and will stop. Maybe you want to play something else?
    }
  }
};

// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);

----------------------------------------

TITLE: Expo Notifications Configuration
DESCRIPTION: Configuration example for expo-notifications in app.json, including icon, color, default channel, sounds, and background notifications settings

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/assets/notification_icon.png",
          "color": "#ffffff",
          "defaultChannel": "default",
          "sounds": [
            "./local/assets/notification_sound.wav",
            "./local/assets/notification_sound_other.wav"
          ],
          "enableBackgroundRemoteNotifications": false
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Basic React Native View with TypeScript
DESCRIPTION: A basic React Native component example showing a centered 'Hello world!' text using StyleSheet for styling. The component demonstrates fundamental React Native concepts including View, Text, and StyleSheet usage.

LANGUAGE: tsx
CODE:
import { StyleSheet, Text, View } from 'react-native';

export default function Index() {
  return (
    <View style={styles.container}>
      <Text>Hello world!</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Initializing Expo App with create-expo-app
DESCRIPTION: Commands to create a new Expo project named StickerSmash and navigate to the project directory.

LANGUAGE: bash
CODE:
# Create a project named StickerSmash
$ npx create-expo-app@latest StickerSmash

# Navigate to the project directory
$ cd StickerSmash

----------------------------------------

TITLE: Basic Checkbox Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Checkbox component from expo-checkbox in a React Native application. It shows examples of normal, custom-colored, and disabled checkboxes, along with state management using React hooks.

LANGUAGE: tsx
CODE:
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});

----------------------------------------

TITLE: Implementing Gyroscope Sensor with React Native and Expo
DESCRIPTION: A complete React Native component that demonstrates gyroscope sensor implementation using expo-sensors. The component includes functionality to start/stop sensor reading, adjust update intervals, and display real-time gyroscope data for x, y, and z axes.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Implementing SplashScreen in Expo React Native App
DESCRIPTION: This snippet demonstrates how to use the SplashScreen module to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It includes pre-loading fonts, simulating API calls, and handling the app's ready state.

LANGUAGE: jsx
CODE:
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(async () => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      await SplashScreen.hideAsync();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}

----------------------------------------

TITLE: Creating Basic SVG Shapes in React Native
DESCRIPTION: Example of creating a component that renders basic SVG shapes (Circle and Rectangle) using react-native-svg. Demonstrates viewport setup, shape positioning, and styling attributes.

LANGUAGE: typescript
CODE:
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
    <Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
      <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
      <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
    </Svg>
  );
}

----------------------------------------

TITLE: Creating Simple Animation with react-native-reanimated in React Native
DESCRIPTION: A minimal example demonstrating how to use react-native-reanimated to create a simple animation in a React Native component. It shows how to animate the width of a box using shared values and animated styles.

LANGUAGE: typescript
CODE:
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});

----------------------------------------

TITLE: Basic Camera Usage in React Native with expo-camera
DESCRIPTION: A complete example of how to implement basic camera functionality in a React Native app using expo-camera. It includes permission handling, camera preview, and a button to switch between front and back cameras.

LANGUAGE: typescript
CODE:
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});

----------------------------------------

TITLE: Basic Contacts Usage in React Native with Expo
DESCRIPTION: This React Native component demonstrates basic usage of the expo-contacts library. It requests permission to access contacts and then retrieves the first contact's information, focusing on email fields.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: React Native Image Manipulation Example using expo-image-manipulator
DESCRIPTION: A complete React Native component demonstrating image manipulation using expo-image-manipulator. The example shows how to rotate an image 90 degrees clockwise and flip it vertically, with state management and UI rendering.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';

export default function App() {
  const [ready, setReady] = useState(false);
  const [image, setImage] = useState(null);

  useEffect(() => {
    (async () => {
      const image = Asset.fromModule(require('./assets/snack-icon.png'));
      await image.downloadAsync();
      setImage(image);
      setReady(true);
    })();
  }, []);

  const _rotate90andFlip = async () => {
    const manipResult = await manipulateAsync(
      image.localUri || image.uri,
      [{ rotate: 90 }, { flip: FlipType.Vertical }],
      { compress: 1, format: SaveFormat.PNG }
    );
    setImage(manipResult);
  };

  const _renderImage = () => (
    <View style={styles.imageContainer}>
      <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
    </View>
  );

  return (
    <View style={styles.container}>
      {ready && image && _renderImage()}
      <Button title="Rotate and Flip" onPress={_rotate90andFlip} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  imageContainer: {
    marginVertical: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'contain',
  },
});

----------------------------------------

TITLE: Image Manipulation Example in React Native with Expo
DESCRIPTION: Demonstrates basic image manipulation using expo-image-manipulator to rotate an image 90 degrees clockwise and flip it vertically. The example includes state management, image rendering, and saving in PNG format.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';

const IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));

export default function App() {
  const [image, setImage] = useState(IMAGE);
  const context = useImageManipulator(IMAGE.uri);

  const rotate90andFlip = async () => {
    context.rotate(90).flip(FlipType.Vertical);
    const image = await context.renderAsync();
    const result = await image.saveAsync({
      format: SaveFormat.PNG,
    });

    setImage(result);
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
      </View>
      <Button title="Rotate and Flip" onPress={rotate90andFlip} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  imageContainer: {
    marginVertical: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'contain',
  },
});

----------------------------------------

TITLE: React Native Magnetometer Component Implementation
DESCRIPTION: A complete React Native component implementation demonstrating real-time magnetometer readings with controls for subscription management and update interval adjustment. The component displays X, Y, Z magnetic field values and includes buttons for turning the sensor on/off and adjusting reading frequency.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

----------------------------------------

TITLE: Writing and Reading Text Files with FileSystem Next in TypeScript
DESCRIPTION: Demonstrates how to create a file, write content to it, and read the content using the FileSystem Next API. It uses the File class and Paths object from expo-file-system/next.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  file.create(); // can throw an error if the file already exists or no permission to create it
  file.write('Hello, world!');
  console.log(file.text()); // Hello, world!
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Playing Sounds with expo-av in React Native
DESCRIPTION: This snippet demonstrates how to load and play a sound file using the Audio API from expo-av. It includes handling the sound object lifecycle and proper cleanup.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Background Location Tracking Example
DESCRIPTION: Complete example demonstrating how to implement background location tracking using expo-task-manager and expo-location, including permission handling and task definition

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button, View, StyleSheet } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as Location from 'expo-location';

const LOCATION_TASK_NAME = 'background-location-task';

const requestPermissions = async () => {
  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();
  if (foregroundStatus === 'granted') {
    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
    if (backgroundStatus === 'granted') {
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
      });
    }
  }
};

const PermissionsButton = () => (
  <View style={styles.container}>
    <Button onPress={requestPermissions} title="Enable background location" />
  </View>
);

TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
    // Error occurred - check `error.message` for more details.
    return;
  }
  if (data) {
    const { locations } = data;
    // do something with the locations captured in the background
  }
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default PermissionsButton;

----------------------------------------

TITLE: Using ImagePicker in React Native
DESCRIPTION: Complete example showing how to implement image picking functionality in a React Native component, including UI setup and image display

LANGUAGE: typescript
CODE:
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images', 'videos'],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Implementing Apple Authentication in React Native
DESCRIPTION: Complete React Native example showing how to implement Apple Sign-in with UI button and authentication flow handling

LANGUAGE: jsx
CODE:
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});

----------------------------------------

TITLE: Rendering Lottie Animation in React Native
DESCRIPTION: This snippet demonstrates how to use the Lottie library in a React Native application. It shows how to render a Lottie animation, control it programmatically, and handle user interactions.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});

----------------------------------------

TITLE: Local Notification Setup with Expo
DESCRIPTION: Example showing how to present a local notification to the user using expo-notifications, including handler setup and notification scheduling

LANGUAGE: typescript
CODE:
import * as Notifications from 'expo-notifications';

// First, set the handler that will cause the notification
// to show the alert
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

// Second, call scheduleNotificationAsync()
Notifications.scheduleNotificationAsync({
  content: {
    title: 'Look at that notification',
    body: "I'm so proud of myself!",
  },
  trigger: null,
});

----------------------------------------

TITLE: Executing Queries within an Async Transaction
DESCRIPTION: Shows how to use withTransactionAsync to execute multiple queries within a transaction, ensuring atomicity of operations.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});

----------------------------------------

TITLE: Using Custom Fonts in React Native App
DESCRIPTION: Complete example showing how to load and use custom fonts in a React Native application using expo-font and expo-splash-screen. Demonstrates font loading, splash screen management, and font application to text components.

LANGUAGE: typescript
CODE:
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Creating an Expo App with Different Methods
DESCRIPTION: This snippet demonstrates three different ways to create an Expo app: using create-expo-app with prebuild, using the bare-minimum template, and using the React Native CLI with install-expo-modules.

LANGUAGE: bash
CODE:
$ npx create-expo-app MyApp && cd MyApp && npx expo prebuild

$ npx create-expo-app --template bare-minimum

$ npx @react-native-community/cli@latest init MyApp && cd MyApp && npx install-expo-modules

----------------------------------------

TITLE: Implementing Text-to-Speech in React Native with Expo Speech
DESCRIPTION: This snippet demonstrates how to use the expo-speech library to implement text-to-speech functionality in a React Native application. It creates a simple UI with a button that, when pressed, speaks a predefined text.

LANGUAGE: jsx
CODE:
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
    const thingToSay = '1';
    Speech.speak(thingToSay);
  };

  return (
    <View style={styles.container}>
      <Button title="Press to hear some words" onPress={speak} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
});

----------------------------------------

TITLE: Implementing Text-to-Speech in React Native with Expo Speech
DESCRIPTION: This snippet demonstrates how to use the expo-speech library to add text-to-speech functionality to a React Native app. It creates a simple button that, when pressed, speaks the text '1' using the device's text-to-speech engine.

LANGUAGE: jsx
CODE:
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
    const thingToSay = '1';
    Speech.speak(thingToSay);
  };

  return (
    <View style={styles.container}>
      <Button title="Press to hear some words" onPress={speak} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
});

----------------------------------------

TITLE: Implementing Print Functionality in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use expo-print to print HTML content, save to PDF, and select printers on iOS. It includes a full React Native component with buttons for different printing actions.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button, Platform, Text } from 'react-native';
import * as Print from 'expo-print';
import { shareAsync } from 'expo-sharing';

const html = `
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
  </head>
  <body style="text-align: center;">
    <h1 style="font-size: 50px; font-family: Helvetica Neue; font-weight: normal;">
      Hello Expo!
    </h1>
    <img
      src="https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png"
      style="width: 90vw;" />
  </body>
</html>
`;

export default function App() {
  const [selectedPrinter, setSelectedPrinter] = useState();

  const print = async () => {
    // On iOS/android prints the given html. On web prints the HTML from the current page.
    await Print.printAsync({
      html,
      printerUrl: selectedPrinter?.url, // iOS only
    });
  };

  const printToFile = async () => {
    // On iOS/android prints the given html. On web prints the HTML from the current page.
    const { uri } = await Print.printToFileAsync({ html });
    console.log('File has been saved to:', uri);
    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });
  };

  const selectPrinter = async () => {
    const printer = await Print.selectPrinterAsync(); // iOS only
    setSelectedPrinter(printer);
  };

  return (
    <View style={styles.container}>
      <Button title="Print" onPress={print} />
      <View style={styles.spacer} />
      <Button title="Print to PDF file" onPress={printToFile} />
      {Platform.OS === 'ios' && (
        <>
          <View style={styles.spacer} />
          <Button title="Select printer" onPress={selectPrinter} />
          <View style={styles.spacer} />
          {selectedPrinter ? (
            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>
          ) : undefined}
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    flexDirection: 'column',
    padding: 8,
  },
  spacer: {
    height: 8,
  },
  printer: {
    textAlign: 'center',
  },
});

----------------------------------------

TITLE: Implementing ViewPager Component in React Native
DESCRIPTION: Example implementation of a PagerView component that creates a swipeable three-page carousel. The component uses react-native-pager-view to handle page transitions and includes basic styling for container and page layouts.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
    <View style={styles.container}>
      <PagerView style={styles.container} initialPage={0}>
        <View style={styles.page} key="1">
          <Text>First page</Text>
          <Text>Swipe ➡️</Text>
        </View>
        <View style={styles.page} key="2">
          <Text>Second page</Text>
        </View>
        <View style={styles.page} key="3">
          <Text>Third page</Text>
        </View>
      </PagerView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  page: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Manual Update Check Implementation in React Native
DESCRIPTION: Example React component showing how to manually check for and apply updates using expo-updates.

LANGUAGE: jsx
CODE:
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}

----------------------------------------

TITLE: Basic Location Implementation in React Native
DESCRIPTION: Complete example showing how to request location permissions and get current position using expo-location in a React Native application.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
import * as Device from 'expo-device';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing a Login Modal in Expo Router
DESCRIPTION: This snippet demonstrates how to display a login modal over the app for unauthenticated users instead of redirecting to a login page. It uses React Native's Modal component within the layout.

LANGUAGE: tsx
CODE:
import { SafeAreaView, Modal } from 'react-native';
import { Stack } from 'expo-router';

export default function Layout() {
  const isAuthenticated = /* check for valid auth token / session */

  return (
    <SafeAreaView>
      <Stack />
      <Modal visible={!isAuthenticated}>{/* login UX */}</Modal>
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Playing Sounds with Expo AV in React Native
DESCRIPTION: This snippet demonstrates how to load and play an audio file using the Audio module from expo-av. It includes proper sound loading, playback, and cleanup.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Downloading Files with FileSystem in React Native
DESCRIPTION: Demonstrates downloading files with progress tracking, pause/resume functionality, and persistence across app restarts using FileSystem and AsyncStorage.

LANGUAGE: javascript
CODE:
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

----------------------------------------

TITLE: Implementing Tab Navigation in Expo Router
DESCRIPTION: This snippet shows how to create a tab navigator using the Tabs component from expo-router. It includes configuration for tab icons and labels using MaterialIcons.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => <MaterialIcons size={28} name="house.fill" color={color} />,
        }}
      />
      <!-- Add more tabs here -->
    </Tabs>
  );
}

----------------------------------------

TITLE: Basic Image Component Usage in React Native
DESCRIPTION: Demonstrates basic implementation of the Image component from expo-image with blurhash placeholder, content fitting, and transition animation.

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});

----------------------------------------

TITLE: Implementing Clipboard Functionality in React Native with Expo
DESCRIPTION: This code snippet demonstrates how to use the expo-clipboard package to copy text to the clipboard and retrieve text from the clipboard in a React Native application. It includes a simple UI with buttons to trigger these actions and display the copied text.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

----------------------------------------

TITLE: Creating New Expo Project with CLI
DESCRIPTION: Command to initialize a new Expo project using the create-expo-app tool. This creates a default project with example code to help developers get started. The template can be customized using the --template option.

LANGUAGE: bash
CODE:
$ npx create-expo-app@latest

----------------------------------------

TITLE: Implementing Basic Video Player with Play/Pause Controls in React Native
DESCRIPTION: A complete example showing how to implement a video player with basic play/pause functionality using expo-av. The component includes a video element with native controls, resize mode, and looping capabilities, along with a button to toggle playback state.

LANGUAGE: jsx
CODE:
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
    <View style={styles.container}>
      <Video
        ref={video}
        style={styles.video}
        source={{
          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        }}
        useNativeControls
        resizeMode={ResizeMode.CONTAIN}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View style={styles.buttons}>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );

LANGUAGE: javascript
CODE:
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
  },
  video: {
    alignSelf: 'center',
    width: 320,
    height: 200,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Implementing Basic Custom Tab Layout in Expo Router
DESCRIPTION: This code snippet demonstrates the basic structure of a custom tab layout using components from expo-router/ui. It shows how to use Tabs, TabList, TabTrigger, and TabSlot components to create a simple tab navigation.

LANGUAGE: tsx
CODE:
import { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';

// Defining the layout of the custom tab navigator
export default function Layout() {
  return (
    <Tabs>
      <TabSlot />
      <TabList>
        <TabTrigger name="home" href="/">
          <Text>Home</Text>
        </TabTrigger>
        <TabTrigger name="article" href="/article">
          <Text>Article</Text>
        </TabTrigger>
      </TabList>
    </Tabs>
  );
}

----------------------------------------

TITLE: Starting Expo App in Production Mode
DESCRIPTION: Command to start an Expo application in production mode with minification enabled. This simulates how the app will run on end users' devices by setting __DEV__ to false and enabling code minification.

LANGUAGE: bash
CODE:
$ npx expo start --no-dev --minify

----------------------------------------

TITLE: Implementing Accelerometer Sensor in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Accelerometer sensor in a React Native application using Expo. It shows how to subscribe to accelerometer updates, display the data, and control the update interval.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Metro Configuration for Tree Shaking
DESCRIPTION: Configuration setup for enabling experimental tree shaking support in Metro bundler.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.transformer.getTransformOptions = async () => ({
  transform: {
    experimentalImportSupport: true,
  },
});

module.exports = config;

----------------------------------------

TITLE: Implementing Light Sensor Functionality in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the LightSensor module from expo-sensors to access the device's light sensor. It shows how to subscribe to sensor updates, toggle the subscription, and display the illuminance value on Android devices.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
    if (subscription) {
      unsubscribe();
    } else {
      subscribe();
    }
  };

  const subscribe = () => {
    setSubscription(
      LightSensor.addListener(sensorData => {
        setData(sensorData);
      })
    );
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    subscribe();
    return () => unsubscribe();
  }, []);

  return (
    <View style={styles.sensor}>
      <Text>Light Sensor:</Text>
      <Text>
        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
      </Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={toggle} style={styles.button}>
          <Text>Toggle</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  sensor: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
});

----------------------------------------

TITLE: Loading and Using Custom Fonts in React Native
DESCRIPTION: Demonstrates how to load a custom font (Inter-Black) using the useFonts hook from expo-font, handle the loading state, and apply the font to a Text component. Also shows integration with SplashScreen for a smooth loading experience.

LANGUAGE: jsx
CODE:
import { useCallback } from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [fontsLoaded, fontError] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  const onLayoutRootView = useCallback(async () => {
    if (fontsLoaded || fontError) {
      await SplashScreen.hideAsync();
    }
  }, [fontsLoaded, fontError]);

  if (!fontsLoaded && !fontError) {
    return null;
  }

  return (
    <View style={styles.container} onLayout={onLayoutRootView}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Recording Audio in React Native with Expo-AV
DESCRIPTION: Implementation of audio recording functionality using expo-av's Audio.Recording API. Handles permissions, recording controls, and proper audio mode configuration.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync({
      allowsRecordingIOS: false,
    });
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Implementing Lottie Animation Player in React Native
DESCRIPTION: Example of creating a Lottie animation player component with play/restart controls. Uses useRef and useEffect hooks to manage animation state and includes styling for container layout.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});

----------------------------------------

TITLE: EAS Workflow for iOS Submission
DESCRIPTION: YAML configuration for automated iOS app building and submission using EAS Workflows CI/CD.

LANGUAGE: yaml
CODE:
on:
  push:
    branches: ['main']

jobs:
  build_ios:
    name: Build iOS app
    type: build
    params:
      platform: ios
      profile: production

  submit_ios:
    name: Submit to Apple App Store
    type: submit
    params:
      platform: ios
      build_id: ${{ needs.build_ios.outputs.build_id }}

----------------------------------------

TITLE: Playing Sounds with expo-av in React Native
DESCRIPTION: This snippet demonstrates how to load and play an audio file using the Audio.Sound API from expo-av. It includes handling sound loading, playback, and cleanup.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Expo Notifications Configuration
DESCRIPTION: Configuration example for expo-notifications showing how to set custom icons, colors and sounds in app.json.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/assets/notification-icon.png",
          "color": "#ffffff",
          "sounds": [
            "./local/assets/notification-sound.wav",
            "./local/assets/notification-sound-other.wav"
          ]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring and Using FaceDetector with Expo Camera
DESCRIPTION: This snippet demonstrates how to set up face detection in an Expo app using the Camera component and expo-face-detector. It configures the face detector settings and handles detected faces.

LANGUAGE: jsx
CODE:
import { Camera } from 'expo-camera';
import * as FaceDetector from 'expo-face-detector';

const App = () => (
  <Camera
    // other props
    onFacesDetected={handleFacesDetected}
    faceDetectorSettings={{
      mode: FaceDetector.FaceDetectorMode.fast,
      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,
      runClassifications: FaceDetector.FaceDetectorClassifications.none,
      minDetectionInterval: 100,
      tracking: true,
    }}
  />
);

const handleFacesDetected = ({ faces }) => {
  console.log(faces);
};

export default App;

----------------------------------------

TITLE: Handling Login and Redirection in Expo Router
DESCRIPTION: This code shows how to implement a login page that redirects the user to the protected routes after successful authentication. It uses the useRouter hook from expo-router for navigation.

LANGUAGE: tsx
CODE:
import { Button } from 'react-native';
import { useRouter } from 'expo-router';

export default function Login() {
  return (
    <View>
      {/* login form */}
      <Button
        title="Login"
        onPress={() => {
          /* authenticate user */
          router.replace('/(logged-in)');
        }}
      />
    </View>
  );
}

----------------------------------------

TITLE: Using StatusBar Component in Expo React Native App
DESCRIPTION: This snippet demonstrates how to use the StatusBar component from expo-status-bar in a React Native application. It sets up a dark background with light text and configures the status bar to have light-colored text.

LANGUAGE: jsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Notice that the status bar has light text!</Text>
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});

----------------------------------------

TITLE: Recording Sounds with Expo AV in React Native
DESCRIPTION: This snippet shows how to implement audio recording using the Audio module from expo-av. It includes permission handling, starting and stopping recording, and audio mode configuration.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync(
      {
        allowsRecordingIOS: false,
      }
    );
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Controlling Splash Screen Visibility in React Native
DESCRIPTION: This example demonstrates how to use the SplashScreen module to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It includes pre-loading fonts, simulating a slow loading experience, and handling the splash screen visibility based on the app's ready state.

LANGUAGE: jsx
CODE:
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}

----------------------------------------

TITLE: Basic GLView Implementation in React Native
DESCRIPTION: Example showing basic setup of GLView component with OpenGL ES context creation and simple shape rendering using vertex and fragment shaders.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}

----------------------------------------

TITLE: Basic GLView Implementation in React Native
DESCRIPTION: Example showing basic setup of GLView component with OpenGL ES context creation and simple shape rendering using vertex and fragment shaders.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}

----------------------------------------

TITLE: Redirecting Using Redirect Component in Expo Router (TSX)
DESCRIPTION: This snippet demonstrates how to use the Redirect component from expo-router to redirect users based on authentication status. It checks if a user is logged in and redirects to the login page if not authenticated.

LANGUAGE: tsx
CODE:
import { View, Text } from 'react-native';
import { Redirect } from 'expo-router';

export default function Page() {
  const { user } = useAuth();

  if (!user) {
    return <Redirect href="/login" />;
  }

  return (
    <View>
      <Text>Welcome Back!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Using Prepared Statements with expo-sqlite
DESCRIPTION: Shows how to use prepared statements for efficient query execution, including parameter binding and result handling.

LANGUAGE: typescript
CODE:
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
    $intValue: 100,
  });

  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  await result.resetAsync();

  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  await result.resetAsync();

  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}

----------------------------------------

TITLE: Implementing Accelerometer Functionality in React Native with Expo
DESCRIPTION: This code snippet demonstrates how to use the Accelerometer module from expo-sensors in a React Native application. It shows how to subscribe to accelerometer updates, display the x, y, and z values, and control the update interval.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Conditional Redirect with Authentication Check in Expo Router (TSX)
DESCRIPTION: This example shows how to use the Redirect component within a component that checks for authentication before navigating. If the user is not authenticated, they are redirected to the login page.

LANGUAGE: tsx
CODE:
import { Redirect } from 'expo-router';
import { useState, useEffect } from 'react';

export default function ProtectedPage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    // Simulate checking authentication status
    setTimeout(() => setIsAuthenticated(true), 2000);
  }, []);

  if (!isAuthenticated) {
    return <Redirect href="/login" />;
  }

  return <Text>Welcome to the protected page!</Text>;
}

----------------------------------------

TITLE: Example React Native App Using Theme Module
DESCRIPTION: Demonstrates usage of the theme module in a React Native application, including theme switching and event listening.

LANGUAGE: tsx
CODE:
import * as Settings from 'expo-settings';
import { useEffect, useState } from 'react';
import { Button, Text, View } from 'react-native';

export default function App() {
  const [theme, setTheme] = useState<string>(Settings.getTheme());

  useEffect(() => {
    const subscription = Settings.addThemeListener(({ theme: newTheme }) => {
      setTheme(newTheme);
    });

    return () => subscription.remove();
  }, [setTheme]);

  // Toggle between dark and light theme
  const nextTheme = theme === 'dark' ? 'light' : 'dark';

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Theme: {Settings.getTheme()}</Text>
      <Button title={`Set theme to ${nextTheme}`} onPress={() => Settings.setTheme(nextTheme)} />
    </View>
  );
}

----------------------------------------

TITLE: Implementing Tab Navigation in Expo Router
DESCRIPTION: This code snippet shows how to implement tab navigation in Expo Router. It creates a TabLayout component using the Tabs component from expo-router, defining screens for the home group and settings.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen name="(home)" />
      <Tabs.Screen name="settings" />
    </Tabs>
  );
}

----------------------------------------

TITLE: Configuring Project ID for Push Notifications
DESCRIPTION: Code snippet showing how to retrieve and configure the projectId for push notifications using expo-constants. This is essential for attributing Expo push tokens to specific projects.

LANGUAGE: typescript
CODE:
const projectId = Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
const pushTokenString = (await Notifications.getExpoPushTokenAsync({ projectId })).data;

----------------------------------------

TITLE: Preventing Screen Capture using React Hook in Expo
DESCRIPTION: This snippet demonstrates how to use the usePreventScreenCapture hook to prevent screen capture in a React component.

LANGUAGE: jsx
CODE:
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>As long as this component is mounted, this screen is unrecordable!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Basic Calendar Implementation in React Native
DESCRIPTION: Example implementation showing how to request calendar permissions, fetch calendars, and create a new calendar using expo-calendar API.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});

----------------------------------------

TITLE: Basic WebBrowser Usage in React Native with Expo
DESCRIPTION: Demonstrates how to use the WebBrowser module to open a URL in the system browser and handle the result. It includes state management for the browser result and a button to trigger the browser opening.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Button, Text, View, StyleSheet } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
import Constants from 'expo-constants';

export default function App() {
  const [result, setResult] = useState(null);

  const _handlePressButtonAsync = async () => {
    let result = await WebBrowser.openBrowserAsync('https://expo.dev');
    setResult(result);
  };
  return (
    <View style={styles.container}>
      <Button title="Open WebBrowser" onPress={_handlePressButtonAsync} />
      <Text>{result && JSON.stringify(result)}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
  },
});

----------------------------------------

TITLE: Configuring Runtime Version in JSON
DESCRIPTION: Example of setting runtime version configuration in app.json for manual configuration.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": "<runtime_version_string>"
  }
}

----------------------------------------

TITLE: Recording sounds with expo-audio in React Native
DESCRIPTION: This example shows how to use the useAudioRecorder hook from expo-audio to record audio in a React Native application. It includes requesting microphone permissions and handling recording states.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioRecorder, RecordingOptions, AudioModule, RecordingPresets } from 'expo-audio';

export default function App() {
  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);

  const record = async () => {
    await audioRecorder.prepareToRecordAsync();
    audioRecorder.record();
  };

  const stopRecording = async () => {
    // The recording will be available on `audioRecorder.uri`.
    await audioRecorder.stop();
  };

  useEffect(() => {
    (async () => {
      const status = await AudioModule.requestRecordingPermissionsAsync();
      if (!status.granted) {
        Alert.alert('Permission to access microphone was denied');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Button
        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}
        onPress={audioRecorder.isRecording ? stopRecording : record}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Creating Config Plugin in TypeScript
DESCRIPTION: Implementation of a config plugin that modifies AndroidManifest.xml and Info.plist files to inject custom API keys

LANGUAGE: typescript
CODE:
import {
  withInfoPlist,
  withAndroidManifest,
  AndroidConfig,
  ConfigPlugin,
} from 'expo/config-plugins';

const withMyApiKey: ConfigPlugin<{ apiKey: string }> = (config, { apiKey }) => {
  config = withInfoPlist(config, config => {
    config.modResults['MY_CUSTOM_API_KEY'] = apiKey;
    return config;
  });

  config = withAndroidManifest(config, config => {
    const mainApplication = AndroidConfig.Manifest.getMainApplicationOrThrow(config.modResults);

    AndroidConfig.Manifest.addMetaDataItemToMainApplication(
      mainApplication,
      'MY_CUSTOM_API_KEY',
      apiKey
    );
    return config;
  });

  return config;
};

export default withMyApiKey;

----------------------------------------

TITLE: Implementing Barometer Sensor Readings in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Barometer sensor in a React Native app using Expo. It shows how to subscribe to barometer readings, update state with pressure and relative altitude data, and toggle the listener on and off.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});

----------------------------------------

TITLE: Configuring Runtime Version in JSON
DESCRIPTION: Example of setting runtime version configuration in app.json for manual configuration.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": "<runtime_version_string>"
  }
}

----------------------------------------

TITLE: Executing Queries within an Async Transaction in JavaScript
DESCRIPTION: Shows how to execute queries within an asynchronous transaction using expo-sqlite.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});

----------------------------------------

TITLE: Basic Calendar Implementation in React Native
DESCRIPTION: Example implementation showing how to request calendar permissions, fetch calendars, and create a new calendar using expo-calendar API.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});

----------------------------------------

TITLE: Implementing Step Counter with Expo Pedometer in React Native
DESCRIPTION: A complete React Native component that demonstrates how to use the Pedometer sensor to track both current and historical step counts. It checks sensor availability, retrieves steps from the past 24 hours, and provides real-time step count updates.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
    const isAvailable = await Pedometer.isAvailableAsync();
    setIsPedometerAvailable(String(isAvailable));

    if (isAvailable) {
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - 1);

      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
      if (pastStepCountResult) {
        setPastStepCount(pastStepCountResult.steps);
      }

      return Pedometer.watchStepCount(result => {
        setCurrentStepCount(result.steps);
      });
    }
  };

  useEffect(() => {
    const subscription = subscribe();
    return () => subscription && subscription.remove();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
      <Text>Walk! And watch this go up: {currentStepCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Implementing Multiple Tab Bars in Expo Router
DESCRIPTION: This code demonstrates how to create multiple tab bars using TabTrigger components outside of TabList. It shows how to hide the original TabList while still defining the available routes.

LANGUAGE: tsx
CODE:
<Tabs>
  <TabSlot />
  {/* A custom tab bar */}
  <View>
    <View>
      <TabTrigger name="home">
        <Text>Home</Text>
      </TabTrigger>
      <TabTrigger name="article">
        <Text>article</Text>
      </TabTrigger>
    </View>
  </View>
  <TabList style={{ display: 'none' }}>
    <TabTrigger name="home" href="/">
      <Text>Home</Text>
    </TabTrigger>
    <TabTrigger name="article" href="/article">
      <Text>article</Text>
    </TabTrigger>
  </TabList>
</Tabs>

----------------------------------------

TITLE: Using SafeAreaView in Expo React Native
DESCRIPTION: This snippet demonstrates how to use SafeAreaView to wrap the content of a screen component, ensuring it's positioned within the safe area of the device.

LANGUAGE: tsx
CODE:
import { Text } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function HomeScreen() {
  return (
    <SafeAreaView style={{ flex: 1 }}>
      <Text>Content is in safe area.</Text>
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Manual Update Check Implementation
DESCRIPTION: Example React component showing how to manually check for and apply updates using the Updates API

LANGUAGE: jsx
CODE:
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}

----------------------------------------

TITLE: Basic WebBrowser Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the WebBrowser module to open a URL in the system's browser. It includes a button to trigger the browser opening and displays the result of the operation.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Button, Text, View, StyleSheet } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
/* @hide */
import Constants from 'expo-constants';
/* @end */

export default function App() {
  const [result, setResult] = useState(null);

  const _handlePressButtonAsync = async () => {
    let result = await WebBrowser.openBrowserAsync('https://expo.dev');
    setResult(result);
  };
  return (
    <View style={styles.container}>
      <Button title="Open WebBrowser" onPress={_handlePressButtonAsync} />
      <Text>{result && JSON.stringify(result)}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
  },
});

----------------------------------------

TITLE: Using expo-location to get current position
DESCRIPTION: React Native component demonstrating how to request location permissions and retrieve the current device position using expo-location.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  let text = 'Waiting..';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});

----------------------------------------

TITLE: Basic BlurView Implementation in React Native
DESCRIPTION: Demonstrates how to use BlurView component with different intensities and tint colors. The example creates three blur containers with varying effects over a colorful background pattern.

LANGUAGE: jsx
CODE:
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.background}>
        {[...Array(20).keys()].map(i => (
          <View
            key={`box-${i}`}
            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
          />
        ))}
      </View>
      <BlurView intensity={100} style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={80} tint="light" style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
      </BlurView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  blurContainer: {
    flex: 1,
    padding: 20,
    margin: 16,
    textAlign: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderRadius: 20,
  },
  background: {
    flex: 1,
    flexWrap: 'wrap',
    ...StyleSheet.absoluteFill,
  },
  box: {
    width: '25%',
    height: '20%',
  },
  boxEven: {
    backgroundColor: 'orangered',
  },
  boxOdd: {
    backgroundColor: 'gold',
  },
  text: {
    fontSize: 24,
    fontWeight: '600',
  },
});

----------------------------------------

TITLE: Using SafeAreaView Component
DESCRIPTION: Example of using SafeAreaView component to automatically handle safe area insets

LANGUAGE: jsx
CODE:
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Screen Capture Management with Function-based API
DESCRIPTION: Comprehensive example showing how to manage screen capture functionality using the function-based API, including screenshot detection, permission handling, and toggle controls for screen capture prevention.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import * as ScreenCapture from 'expo-screen-capture';
import * as MediaLibrary from 'expo-media-library';

export default function ScreenCaptureExample() {
  useEffect(() => {
    if (hasPermissions()) {
      const subscription = ScreenCapture.addScreenshotListener(() => {
        alert('Thanks for screenshotting my beautiful app 😊');
      });
      return () => subscription.remove();
    }
  }, []);

  const hasPermissions = async () => {
    const { status } = await MediaLibrary.requestPermissionsAsync();
    return status === 'granted';
  };

  const activate = async () => {
    await ScreenCapture.preventScreenCaptureAsync();
  };

  const deactivate = async () => {
    await ScreenCapture.allowScreenCaptureAsync();
  };

  return (
    <View style={styles.container}>
      <Button title="Activate" onPress={activate} />
      <Button title="Deactivate" onPress={deactivate} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Implementing Light Sensor React Native Component
DESCRIPTION: A complete React Native component implementation that demonstrates how to use the LightSensor API to monitor device illuminance levels. The component includes subscription management, real-time updates, and a toggle functionality for the sensor listener.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
    if (subscription) {
      unsubscribe();
    } else {
      subscribe();
    }
  };

  const subscribe = () => {
    setSubscription(
      LightSensor.addListener(sensorData => {
        setData(sensorData);
      })
    );
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    subscribe();
    return () => unsubscribe();
  }, []);

  return (
    <View style={styles.sensor}>
      <Text>Light Sensor:</Text>
      <Text>
        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
      </Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={toggle} style={styles.button}>
          <Text>Toggle</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  sensor: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
});

----------------------------------------

TITLE: React Native Media Library Usage Example
DESCRIPTION: Complete example showing how to fetch albums and display media assets using expo-media-library. Demonstrates permission handling, album fetching, and asset display.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

----------------------------------------

TITLE: Implementing a Root Layout in Expo Router
DESCRIPTION: This code snippet shows how to create a root layout file (_layout.tsx) in Expo Router. The RootLayout component is used to share UI elements and inject global providers across multiple routes.

LANGUAGE: tsx
CODE:
export default function RootLayout() {
  return (
	  /* @hide ... */ /* @end */
  )
}

----------------------------------------

TITLE: Implementing Notification Event Listeners in Expo
DESCRIPTION: Sets up notification listeners using useEffect hook to handle both received notifications and user interactions with notifications. Includes cleanup function to remove listeners when component unmounts.

LANGUAGE: javascript
CODE:
useEffect(() => {
  registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

  notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
    setNotification(notification);
  });

  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
    console.log(response);
  });

  return () => {
    Notifications.removeNotificationSubscription(notificationListener.current);
    Notifications.removeNotificationSubscription(responseListener.current);
  };
}, []);

----------------------------------------

TITLE: Example Project Structure in Expo Router
DESCRIPTION: This code snippet demonstrates a typical file structure for an Expo Router project, highlighting the placement of route files, layouts, and non-navigation components.

LANGUAGE: plaintext
CODE:
app/index.tsx
app/home.tsx
app/_layout.tsx
app/profile/friends.tsx
components/TextField.tsx
components/Toolbar.tsx

----------------------------------------

TITLE: Creating a Stack Navigator for a Tab in Expo Router
DESCRIPTION: This code demonstrates how to set up a stack navigator within a tab using the Stack component from expo-router. It also sets an initial route name to ensure proper behavior for deep links.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export const unstable_settings = {
  initialRouteName: 'index',
};

export default function FeedLayout() {
  return <Stack />;
}

----------------------------------------

TITLE: Implementing Linear Gradient Views in React Native with Expo
DESCRIPTION: Example demonstrating how to create both a background gradient and a gradient button using the LinearGradient component. Shows usage with different color configurations and styling options.

LANGUAGE: tsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function App() {
  return (
    <View style={styles.container}>
      <LinearGradient
        // Background Linear Gradient
        colors={['rgba(0,0,0,0.8)', 'transparent']}
        style={styles.background}
      />
      <LinearGradient
        // Button Linear Gradient
        colors={['#4c669f', '#3b5998', '#192f6a']}
        style={styles.button}>
        <Text style={styles.text}>Sign in with Facebook</Text>
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'orange',
  },
  background: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    height: 300,
  },
  button: {
    padding: 15,
    alignItems: 'center',
    borderRadius: 5,
  },
  text: {
    backgroundColor: 'transparent',
    fontSize: 15,
    color: '#fff',
  },
});

----------------------------------------

TITLE: React Native Accelerometer Implementation with Expo Sensors
DESCRIPTION: A complete React Native component demonstrating accelerometer usage including real-time data display, subscription management, and update interval control. Uses useState and useEffect hooks for state management and lifecycle handling.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Customizing Bottom Tab Navigator
DESCRIPTION: Configures a custom bottom tab navigator with Ionicons, including custom colors and styling for both active and inactive states.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';
import Ionicons from '@expo/vector-icons/Ionicons';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#ffd33d',
        headerStyle: {
          backgroundColor: '#25292e',
        },
        headerShadowVisible: false,
        headerTintColor: '#fff',
        tabBarStyle: {
          backgroundColor: '#25292e',
        },
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'home-sharp' : 'home-outline'} color={color} size={24} />
          ),
        }}
      />
      <Tabs.Screen
        name="about"
        options={{
          title: 'About',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'information-circle' : 'information-circle-outline'} color={color} size={24}/>
          ),
        }}
      />
    </Tabs>
  );
}

----------------------------------------

TITLE: Implementing KeyboardAvoidingView in React Native
DESCRIPTION: Basic keyboard handling setup using KeyboardAvoidingView component with platform-specific behavior configuration.

LANGUAGE: typescript
CODE:
import { KeyboardAvoidingView, TextInput } from 'react-native';

export default function HomeScreen() {
  return (
    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined} style={{ flex: 1 }}>
      <TextInput placeholder="Type here..." />
    </KeyboardAvoidingView>;
  );
}

----------------------------------------

TITLE: Writing and Reading Text Files with Expo FileSystem Next
DESCRIPTION: Demonstrates creating, writing to, and reading from text files using the new File API. Shows basic file operations with error handling.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  file.create(); // can throw an error if the file already exists or no permission to create it
  file.write('Hello, world!');
  console.log(file.text()); // Hello, world!
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Creating Simple Animation with React Native Reanimated in JSX
DESCRIPTION: This snippet demonstrates how to use react-native-reanimated to create a simple animation. It imports necessary components and functions, sets up a shared value, defines animation configuration, and creates an animated style. The example shows a box that changes width randomly when a button is pressed.

LANGUAGE: jsx
CODE:
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});

----------------------------------------

TITLE: Moving and Copying Files with Expo FileSystem Next
DESCRIPTION: Demonstrates file movement operations between different directories using the new File API. Shows how to track file location changes through URI updates.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.document, 'example.txt');
  file.create();
  console.log(file.uri); // '${documentDirectory}/example.txt'
  file.move(Paths.cache);
  console.log(file.uri); // '${cacheDirectory}/example.txt'
  file.move(new Directory(Paths.cache, 'newFolder'));
  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Defining a Basic Expo Module in Kotlin
DESCRIPTION: Demonstrates how to create a simple Expo module named 'MyFirstExpoModule' with a 'hello' function that accepts a name parameter and returns a greeting string.

LANGUAGE: Kotlin
CODE:
class MyModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("MyFirstExpoModule")

    Function("hello") { name: String ->
      return "Hello $name!"
    }
  }
}

----------------------------------------

TITLE: Using SafeAreaView Component in React Native
DESCRIPTION: This example demonstrates how to use the SafeAreaView component to automatically apply safe area insets as padding.

LANGUAGE: jsx
CODE:
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Configuring Build Profiles in EAS JSON
DESCRIPTION: This snippet shows how to configure build profiles with environment variables in the eas.json file. It defines production and development profiles with different APP_ENV values.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "env": {
        "APP_ENV": "production"
      }
    },
    "development": {
      "env": {
        "APP_ENV": "development"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Basic Checkbox Functionality in React Native with Expo
DESCRIPTION: This code snippet demonstrates how to use the Checkbox component from expo-checkbox in a React Native application. It shows examples of normal, custom-colored, and disabled checkboxes, along with state management using useState hook.

LANGUAGE: tsx
CODE:
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});

----------------------------------------

TITLE: Implementing Basic Gyroscope Functionality in React Native with Expo
DESCRIPTION: A complete React Native component demonstrating gyroscope implementation using expo-sensors. The component includes functionality to start/stop gyroscope monitoring, adjust update intervals, and display real-time rotation data across three axes.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Basic Contacts Usage in React Native with Expo
DESCRIPTION: A React Native component demonstrating basic usage of the expo-contacts module. It requests permission to access contacts and logs the first contact's information if available.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Basic WebView URL Loading in React Native
DESCRIPTION: Demonstrates how to implement a basic WebView component that loads an external URL (expo.dev). Uses expo-constants for proper status bar margin handling and implements basic styling.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Implementing Clipboard Operations in React Native with Expo
DESCRIPTION: Example React Native application showing how to copy text to and from the clipboard using expo-clipboard. The component includes buttons to trigger clipboard operations and display the copied text.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

----------------------------------------

TITLE: Importing LocalAuthentication Module in JavaScript
DESCRIPTION: Shows how to import the LocalAuthentication module in a JavaScript file to use its functionalities for biometric authentication.

LANGUAGE: javascript
CODE:
import * as LocalAuthentication from 'expo-local-authentication';

----------------------------------------

TITLE: Quick Face Detection Example using expo-face-detector and expo-camera
DESCRIPTION: This snippet demonstrates how to use the expo-face-detector module with expo-camera to perform quick face detection. It configures the camera component with face detection settings and handles the detected faces.

LANGUAGE: jsx
CODE:
import { Camera } from 'expo-camera';
import * as FaceDetector from 'expo-face-detector';

const App = () => (
  <Camera
    // other props
    onFacesDetected={handleFacesDetected}
    faceDetectorSettings={{
      mode: FaceDetector.FaceDetectorMode.fast,
      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,
      runClassifications: FaceDetector.FaceDetectorClassifications.none,
      minDetectionInterval: 100,
      tracking: true,
    }}
  />
);

const handleFacesDetected = ({ faces }) => {
  console.log(faces);
};

export default App;

----------------------------------------

TITLE: Configuring Background Audio for iOS in app.json
DESCRIPTION: Example of enabling background audio playback for iOS in the app.json configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Basic MapView Implementation in React Native
DESCRIPTION: Demonstrates the basic setup of a MapView component that fills the entire screen. Uses StyleSheet for layout configuration with flex container.

LANGUAGE: jsx
CODE:
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <MapView style={styles.map} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
});

----------------------------------------

TITLE: Basic MapView Implementation in React Native
DESCRIPTION: Demonstrates the basic setup of a MapView component that fills the entire screen. Uses StyleSheet for layout configuration with flex container.

LANGUAGE: jsx
CODE:
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <MapView style={styles.map} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
});

----------------------------------------

TITLE: Rendering External Web Content with React Native WebView
DESCRIPTION: This snippet demonstrates how to use the WebView component to render an external website (expo.dev) in a React Native application. It includes styling to adjust for the status bar height.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Implementing Clipboard Operations in React Native with Expo
DESCRIPTION: Example React Native application showing how to copy text to and from the clipboard using expo-clipboard. The component includes buttons to trigger clipboard operations and display the copied text.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

----------------------------------------

TITLE: Basic MapView Component Implementation in React Native
DESCRIPTION: Basic implementation of a MapView component that covers the full screen using react-native-maps. Sets up a container view with flex styling and renders the map with 100% width and height.

LANGUAGE: jsx
CODE:
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <MapView style={styles.map} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
});

----------------------------------------

TITLE: Configuring Root Layout with Stack Navigation
DESCRIPTION: Sets up the root layout configuration using Stack navigation from Expo Router. Defines routes for the home and about screens with custom titles.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ title: 'Home' }} />
      <Stack.Screen name="about" options={{ title: 'About' }} />
    </Stack>
  );
}

----------------------------------------

TITLE: Using Clipboard in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-clipboard library in a React Native application. It shows how to copy text to the clipboard and retrieve text from the clipboard using async functions.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

----------------------------------------

TITLE: Implementing LivePhoto Functionality in React Native with Expo
DESCRIPTION: This code snippet demonstrates how to use the expo-live-photo library along with expo-image-picker to create a Live Photo viewer in a React Native application. It includes functionality to pick a Live Photo from the device's library, display it, and control its playback.

LANGUAGE: tsx
CODE:
import * as ImagePicker from 'expo-image-picker';
import { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';
import { useRef, useState } from 'react';
import { View, StyleSheet, Text, Button } from 'react-native';

export default function LivePhotoScreen() {
  const viewRef = useRef<LivePhotoViewType>(null);
  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['livePhotos'],
    });

    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {
      setLivePhoto({
        photoUri: result.assets[0].uri,
        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,
      });
    } else {
      console.error('Failed to pick a live photo');
    }
  };

  if (!LivePhotoView.isAvailable()) {
    return (
      <View style={styles.container}>
        <Text>expo-live-photo is not available on this platform 😕</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <LivePhotoView
        ref={viewRef}
        source={livePhoto}
        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}
        onLoadComplete={() => {
          console.log('Live photo loaded successfully!');
        }}
        onLoadError={error => {
          console.error('Failed to load the live photo: ', error.message);
        }}
      />
      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>
        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />
      </View>
      <Button title="Start Playback Hint" onPress={() => viewRef.current?.startPlayback('hint')} />
      <Button title="Start Playback" onPress={() => viewRef.current?.startPlayback('full')} />
      <Button title="Stop Playback" onPress={() => viewRef.current?.stopPlayback()} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 40,
  },
  livePhotoView: {
    alignSelf: 'stretch',
    height: 300,
  },
  pickImageExpanded: {
    alignSelf: 'stretch',
    height: 300,
    justifyContent: 'center',
  },
  pickImageCollapsed: {
    marginVertical: 10,
  },
  button: {
    marginVertical: 10,
  },
});

----------------------------------------

TITLE: Implementing Gyroscope Sensor Monitoring in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Gyroscope module from expo-sensors to monitor and display gyroscope data in a React Native application. It includes functionality to start/stop monitoring, adjust update intervals, and display real-time gyroscope readings.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Creating Basic SVG Shapes in React Native
DESCRIPTION: Example demonstrating how to create and render basic SVG shapes (Circle and Rectangle) using react-native-svg components. The component creates a 50% width/height SVG with a blue-stroked green circle and a red-stroked yellow rectangle.

LANGUAGE: typescript
CODE:
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
    <Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
      <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
      <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
    </Svg>
  );
}

----------------------------------------

TITLE: Implementing Background Fetch in React Native
DESCRIPTION: This example demonstrates how to define, register, and manage a background fetch task using expo-background-fetch and expo-task-manager. It includes a React component to control the task registration.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  return BackgroundFetch.BackgroundFetchResult.NewData;
});

async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: Configuring Android Permissions in app.json
DESCRIPTION: Example of adding custom Android permissions using the android.permissions configuration in app.json. Shows how to add specific permissions like SCHEDULE_EXACT_ALARM.

LANGUAGE: json
CODE:
{
  "android": {
    "permissions": ["android.permission.SCHEDULE_EXACT_ALARM"]
  }
}

----------------------------------------

TITLE: Using Prepared Statements in expo-sqlite
DESCRIPTION: Illustrates how to use prepared statements for more efficient and secure database operations, including compiling queries once and executing them multiple times with different parameters.

LANGUAGE: typescript
CODE:
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
    $intValue: 100,
  });

  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  await result.resetAsync();

  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  await result.resetAsync();

  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}

----------------------------------------

TITLE: Configuring Notifications in app.json
DESCRIPTION: Example of using the expo-notifications config plugin in the app.json file to set various notification properties.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/assets/notification_icon.png",
          "color": "#ffffff",
          "defaultChannel": "default",
          "sounds": [
            "./local/assets/notification_sound.wav",
            "./local/assets/notification_sound_other.wav"
          ],
          "enableBackgroundRemoteNotifications": false
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Barcode Scanner Plugin in Expo
DESCRIPTION: Configuration settings for expo-barcode-scanner in app.json using the config plugin system. Allows setting camera and microphone permission messages for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-barcode-scanner",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access camera."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Managing Splash Screen Visibility in React Native with Expo
DESCRIPTION: This snippet demonstrates how to keep the splash screen visible while loading app resources and then hide it when the app has rendered initial content. It uses the SplashScreen module to prevent auto-hiding and manually hide the splash screen after resources are loaded.

LANGUAGE: jsx
CODE:
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(async () => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      await SplashScreen.hideAsync();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}

----------------------------------------

TITLE: Configuring iOS App Extensions in app.json for Managed Expo Projects
DESCRIPTION: This JSON snippet demonstrates how to declare app extensions in the app.json file of a managed Expo project. It uses the 'extra.eas.build.experimental.ios.appExtensions' configuration to specify the target name, bundle identifier, and entitlements for an app extension.

LANGUAGE: json
CODE:
{
  "expo": {
    ...
    "extra": {
      "eas": {
        "build": {
          "experimental": {
            "ios": {
              "appExtensions": [
                {
                  "targetName": "myappextension",
                  "bundleIdentifier": "com.myapp.extension",
                  "entitlements": {
                    "com.apple.example": "entitlement value"
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Apple Authentication Button in React Native
DESCRIPTION: Complete React Native component implementation showing Apple Authentication button setup and sign-in flow handling

LANGUAGE: jsx
CODE:
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});

----------------------------------------

TITLE: Basic Crypto Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-crypto module in a React Native application. It shows how to hash a string using the SHA256 algorithm and log the result.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
    (async () => {
      const digest = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        'GitHub stars are neat 🌟'
      );
      console.log('Digest: ', digest);
      /* Some crypto operation... */
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Crypto Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Basic GLView Usage in React Native with Expo
DESCRIPTION: Demonstrates how to use the GLView component to render a simple point using OpenGL ES shaders. The example creates a view, sets up vertex and fragment shaders, and draws a single point.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}

----------------------------------------

TITLE: Playing Sounds with expo-audio in React Native
DESCRIPTION: Demonstrates how to use the useAudioPlayer hook to play an audio file in a React Native component.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioPlayer } from 'expo-audio';

const audioSource = require('./assets/Hello.mp3');

export default function App() {
  const player = useAudioPlayer(audioSource);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={() => player.play()} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Implementing TrackingTransparency in React Native
DESCRIPTION: React Native example showing how to request tracking permissions using the expo-tracking-transparency module within a functional component.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await requestTrackingPermissionsAsync();
      if (status === 'granted') {
        console.log('Yay! I have user permission to track data');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Tracking Transparency Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Basic Contact Access Implementation in React Native
DESCRIPTION: Example React Native component demonstrating how to request permissions and fetch contact data using expo-contacts. Shows basic implementation of contacts access with email field retrieval.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Rendering SF Symbols in React Native with expo-symbols
DESCRIPTION: This snippet demonstrates how to use the SymbolView component from expo-symbols to display an SF Symbol in a React Native app. It shows the setup of a basic app component with styles for positioning the symbol.

LANGUAGE: jsx
CODE:
import { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SymbolView name="airpods.chargingcase" style={styles.symbol} type="hierarchical" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  symbol: {
    width: 35,
    height: 35,
    margin: 5,
  },
});

----------------------------------------

TITLE: Implementing Linear Gradients in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the LinearGradient component from expo-linear-gradient to create a background gradient and a gradient button in a React Native application. It includes styling for layout and text.

LANGUAGE: tsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function App() {
  return (
    <View style={styles.container}>
      <LinearGradient
        // Background Linear Gradient
        colors={['rgba(0,0,0,0.8)', 'transparent']}
        style={styles.background}
      />
      <LinearGradient
        // Button Linear Gradient
        colors={['#4c669f', '#3b5998', '#192f6a']}
        style={styles.button}>
        <Text style={styles.text}>Sign in with Facebook</Text>
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'orange',
  },
  background: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    height: 300,
  },
  button: {
    padding: 15,
    alignItems: 'center',
    borderRadius: 5,
  },
  text: {
    backgroundColor: 'transparent',
    fontSize: 15,
    color: '#fff',
  },
});

----------------------------------------

TITLE: Implementing Navigation Links
DESCRIPTION: Demonstrates how to implement navigation between screens using the Link component from Expo Router, including styling for the navigation button.

LANGUAGE: tsx
CODE:
import { Text, View, StyleSheet } from 'react-native';
import { Link } from 'expo-router';

export default function Index() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home screen</Text>
      <Link href="/about" style={styles.button}>
        Go to About screen
      </Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
  button: {
    fontSize: 20,
    textDecorationLine: 'underline',
    color: '#fff',
  },
});

----------------------------------------

TITLE: Structuring React Components in JSX
DESCRIPTION: Illustrates the recommended structure for React components, including prop types, state initialization, lifecycle methods, and render method placement.

LANGUAGE: JSX
CODE:
type Props = {
  title: string,
  onPress?: event => void,
};

type State = {
  isPressed: boolean,
};

class Button extends React.Component {
  props: Props;
  state: State = {
    isPressed: true,
  };

  constructor(props, context) {
    super(props, context);
    this.state = {
      ...this.state,
      bounce: new Animated.Value(1),
    };
  }

  componentWillUnmount() {
    if (this.state.animation) {
      this.state.animation.stop();
    }
  }

  render() {
    return (
      <Animated.View
        onPress={this._handlePress}
        style={{ transform: [{ scale: this.state.bounce }] }}>
        <Text>
          {this.props.title}
        </Text>
      </Animated.View>
    );
  }

  _handlePress = event => {
    this._bounce();
    if (this.props.onPress) {
      this.props.onPress(event);
    }
  };

  _bounce() {
    this.setState(state => {
      state.bounce.setValue(0);
      let animation = Animated.spring(state.bounce, { toValue: 1 });
      animation.start(({ finished }) => {
        if (finished) {
          this.setState(() => ({ animation: null }));
        }
      });
      return { animation };
    });
  }
}

----------------------------------------

TITLE: Implementing MeshGradientView in React Native with expo-mesh-gradient
DESCRIPTION: This snippet demonstrates how to import and use the MeshGradientView component from expo-mesh-gradient. It shows how to set up a gradient with custom colors, points, and grid dimensions.

LANGUAGE: tsx
CODE:
import { MeshGradientView } from 'expo-mesh-gradient';

function App() {
  return (
    <MeshGradientView
      style={{ flex: 1 }}
      columns={3}
      rows={3}
      colors={['red', 'purple', 'indigo', 'orange', 'white', 'blue', 'yellow', 'green', 'cyan']}
      points={[
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0],
      ]}
    />
  );
}

----------------------------------------

TITLE: Configuring Metro for monorepo support
DESCRIPTION: Modify the Metro configuration to work with a monorepo structure. This setup ensures Metro watches all relevant code and can resolve packages correctly within the monorepo.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');
const path = require('path');

const projectRoot = __dirname;
const monorepoRoot = path.resolve(projectRoot, '../..');

const config = getDefaultConfig(projectRoot);

config.watchFolders = [monorepoRoot];
config.resolver.nodeModulesPaths = [
  path.resolve(projectRoot, 'node_modules'),
  path.resolve(monorepoRoot, 'node_modules'),
];

module.exports = config;

----------------------------------------

TITLE: Creating Local Expo Module and Running the App
DESCRIPTION: This snippet shows the commands to create a local Expo module for custom native code and then run the app. It uses the create-expo-module tool with the --local flag to scaffold a Swift and Kotlin module inside the project.

LANGUAGE: bash
CODE:
$ npx create-expo-module@latest --local
$ npx expo run

----------------------------------------

TITLE: Implementing Magnetometer Compass Component in React Native
DESCRIPTION: A React component that demonstrates real-time magnetometer data reading with controls for update intervals. Features include subscription management, update frequency control, and display of x/y/z magnetic field values.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Implementing Lottie Animation Component in React Native with TypeScript
DESCRIPTION: Example of creating a React Native component that displays a Lottie animation with play/restart controls. Uses TypeScript for type safety and includes styling for the animation container and buttons.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});

----------------------------------------

TITLE: Viewing System Logs for Android and iOS in React Native
DESCRIPTION: These commands show how to view system-level logs for Android and iOS devices in a React Native project. The Android command uses adb logcat, while the iOS command uses a React Native CLI utility.

LANGUAGE: bash
CODE:
# Show system logs for an Android device with adb logcat
$ npx react-native log-android
# Show system logs for an iOS device
$ npx react-native log-ios

----------------------------------------

TITLE: Importing localization functions from expo-localization
DESCRIPTION: Example of importing the getLocales and getCalendars functions from the expo-localization package. These functions are used to retrieve locale settings and calendar information from the user's device.

LANGUAGE: jsx
CODE:
import { getLocales, getCalendars } from 'expo-localization';

----------------------------------------

TITLE: Implementing Background Fetch in React Native with Expo
DESCRIPTION: Complete example of implementing background fetch functionality using expo-background-fetch and expo-task-manager. Includes task definition, registration, status checking, and UI components for managing the background fetch task.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  return BackgroundFetch.BackgroundFetchResult.NewData;
});

async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15,
    stopOnTerminate: false,
    startOnBoot: true,
  });
}

async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: Video Thumbnail Generation Example in React Native
DESCRIPTION: A complete React Native component example showing how to generate a thumbnail from a video URL using expo-video-thumbnails. The component includes a button to trigger thumbnail generation and displays the resulting image. It handles both success and error cases.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
    try {
      const { uri } = await VideoThumbnails.getThumbnailAsync(
        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        {
          time: 15000,
        }
      );
      setImage(uri);
    } catch (e) {
      console.warn(e);
    }
  };

  return (
    <View style={styles.container}>
      <Button onPress={generateThumbnail} title="Generate thumbnail" />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <Text>{image}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Configuring SecureStore Plugin in app.json
DESCRIPTION: Example configuration for the expo-secure-store plugin in app.json, showing how to set up Face ID permissions and Android backup settings.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-secure-store",
        {
          "configureAndroidBackup": true,
          "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Magnetometer Sensor in React Native with expo-sensors
DESCRIPTION: This snippet demonstrates how to use the Magnetometer sensor in a React Native application. It shows how to subscribe to sensor updates, control update intervals, and display the magnetometer data.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Implementing Processing.js Sketch in React Native Expo
DESCRIPTION: Example implementation of a Processing.js sketch within an Expo application using the ProcessingView component. The sketch creates an animated triangular fractal pattern that responds to time-based calculations.

LANGUAGE: javascript
CODE:
import React from 'react';
import { ProcessingView } from 'expo-processing';

export default class App extends React.Component {
  render() {
    return (
      <ProcessingView style={{ flex: 1 }} sketch={this._sketch} />
    );
  }

  _sketch = (p) => {
    p.setup = () => {
      p.strokeWeight(7);
    }

    const harom = (ax, ay, bx, by, level, ratio) => {
      if (level <= 0) {
        return;
      }

      const vx = bx - ax;
      const vy = by - ay;
      const nx = p.cos(p.PI / 3) * vx - p.sin(p.PI / 3) * vy;
      const ny = p.sin(p.PI / 3) * vx + p.cos(p.PI / 3) * vy;
      const cx = ax + nx;
      const cy = ay + ny;
      p.line(ax, ay, bx, by);
      p.line(ax, ay, cx, cy);
      p.line(cx, cy, bx, by);

      harom(
        ax * ratio + cx * (1 - ratio),
        ay * ratio + cy * (1 - ratio),
        ax * (1 - ratio) + bx * ratio,
        ay * (1 - ratio) + by * ratio,
        level - 1,
        ratio);
    }

    p.draw = () => {
      p.background(240);
      harom(
        p.width - 142, p.height - 142, 142, p.height - 142, 6,
        (p.sin(0.0005 * Date.now() % (2 * p.PI)) + 1) / 2);
    }
  }

----------------------------------------

TITLE: Installing Expo Modules in React Native Project
DESCRIPTION: Command to install Expo modules in an existing React Native project using npx.

LANGUAGE: bash
CODE:
$ npx install-expo-modules@latest

----------------------------------------

TITLE: Sending APNs Push Notification
DESCRIPTION: Implementation of sending a push notification through APNs using HTTP/2 connection and JWT authentication.

LANGUAGE: javascript
CODE:
const http2 = require('http2');

const client = http2.connect(
  IS_PRODUCTION ? 'https://api.push.apple.com' : 'https://api.sandbox.push.apple.com'
);

const request = client.request({
  ':method': 'POST',
  ':scheme': 'https',
  'apns-topic': 'YOUR-BUNDLE-IDENTIFIER',
  ':path': '/3/device/' + nativeDeviceToken,
  authorization: `bearer ${authorizationToken}`,
});
request.setEncoding('utf8');

request.write(
  JSON.stringify({
    aps: {
      alert: {
        title: "\uD83D\uDCE7 You've got mail!",
        body: 'Hello world! \uD83C\uDF10',
      },
    },
    experienceId: '@yourExpoUsername/yourProjectSlug',
    scopeKey: '@yourExpoUsername/yourProjectSlug',
  })
);
request.end();

----------------------------------------

TITLE: Displaying Device Information in React Native with expo-device
DESCRIPTION: This snippet demonstrates how to use the expo-device module to display the device manufacturer and model name in a React Native app. It imports the necessary components and the Device module, then renders the information in a Text component.

LANGUAGE: jsx
CODE:
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: Customizing TabSlot Rendering in Expo Router
DESCRIPTION: This example shows how to customize the rendering of TabSlot within the Tabs component. It demonstrates that TabSlot can be nested inside other components for flexible layout customization.

LANGUAGE: tsx
CODE:
<Tabs>
  <TabList>
    <TabTrigger name="home" href="/">
      <Text>Home</Text>
    </TabTrigger>
  </TabList>
  {/* Customize how `<TabSlot />` is rendered. */}
  <View>
    <View>
      <TabSlot />
    </View>
  </View>
</Tabs>

----------------------------------------

TITLE: Using Text-to-Speech in React Native with expo-speech
DESCRIPTION: This snippet demonstrates how to use the expo-speech package to implement text-to-speech functionality in a React Native app. It includes a button that, when pressed, speaks the text '1'.

LANGUAGE: jsx
CODE:
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
    const thingToSay = '1';
    Speech.speak(thingToSay);
  };

  return (
    <View style={styles.container}>
      <Button title="Press to hear some words" onPress={speak} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
});

----------------------------------------

TITLE: Creating Custom Icon Set with createIconSet in React Native
DESCRIPTION: Shows how to create a custom icon set using the createIconSet method from @expo/vector-icons in a React Native component.

LANGUAGE: jsx
CODE:
import createIconSet from '@expo/vector-icons/createIconSet';

const glyphMap = { 'icon-name': 1234, test: '∆' };
const CustomIcon = createIconSet(glyphMap, 'fontFamily', 'custom-icon-font.ttf');

export default function CustomIconExample() {
  return <CustomIcon name="icon-name" size={32} color="red" />;
}

----------------------------------------

TITLE: Creating a New Expo Project with Yarn
DESCRIPTION: Command to create a new Expo project using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn create expo-app

----------------------------------------

TITLE: Minimal Example Using useSafeAreaInsets in Expo React Native
DESCRIPTION: This snippet provides a minimal working example that uses the useSafeAreaInsets hook to apply top padding to a view, wrapped in a SafeAreaProvider.

LANGUAGE: tsx
CODE:
import { Text, View } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

function HomeScreen() {
  const insets = useSafeAreaInsets();
  return (
    <View style={{ flex: 1, paddingTop: insets.top }}>
      <Text style={{ fontSize: 28 }}>Content is in safe area.</Text>
    </View>
  );
}

export default function App() {
  return (
    <SafeAreaProvider>
      <HomeScreen />
    </SafeAreaProvider>
  );
}

----------------------------------------

TITLE: Importing Keep Awake Module
DESCRIPTION: Shows the basic import statement for the Keep Awake module in React Native applications.

LANGUAGE: js
CODE:
import KeepAwake from 'expo-keep-awake';

----------------------------------------

TITLE: Configuring Expo Router Plugin in app.json
DESCRIPTION: This snippet shows how to configure the expo-router plugin in the app.json file for an Expo project. It demonstrates the minimal configuration required to enable expo-router.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-router"]
  }
}

----------------------------------------

TITLE: Implementing URL Scheme for Stripe Redirects
DESCRIPTION: Code snippet showing how to properly configure URL schemes for handling Stripe redirects in both Expo Go and production environments using expo-linking.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),

----------------------------------------

TITLE: Implementing Basic Barometer Functionality in React Native with Expo
DESCRIPTION: A complete React Native component that demonstrates how to use the Barometer sensor. It shows how to subscribe to barometer updates, display pressure readings, and handle platform-specific altitude data. Includes state management and a toggle mechanism for the sensor listener.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});

----------------------------------------

TITLE: Loading Fonts with useFonts Hook
DESCRIPTION: Implementation of font loading using the useFonts hook with splash screen handling

LANGUAGE: typescript
CODE:
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import {useEffect} from 'react';

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return null;
}

----------------------------------------

TITLE: Fetching Albums and Displaying Assets with expo-media-library
DESCRIPTION: React Native component demonstrating how to fetch albums from the media library, request permissions, and display album assets using expo-media-library.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});

----------------------------------------

TITLE: Implementing EAS Webhook Server in Node.js
DESCRIPTION: Example Node.js server implementation to handle EAS webhooks. It verifies the webhook signature and processes the payload.

LANGUAGE: javascript
CODE:
const crypto = require('crypto');
const express = require('express');
const bodyParser = require('body-parser');
const safeCompare = require('safe-compare');

const app = express();
app.use(bodyParser.text({ type: '*/*' }));
app.post('/webhook', (req, res) => {
  const expoSignature = req.headers['expo-signature'];
  // process.env.SECRET_WEBHOOK_KEY has to match SECRET value set with `eas webhook:create` command
  const hmac = crypto.createHmac('sha1', process.env.SECRET_WEBHOOK_KEY);
  hmac.update(req.body);
  const hash = `sha1=${hmac.digest('hex')}`;
  if (!safeCompare(expoSignature, hash)) {
    res.status(500).send("Signatures didn't match!");
  } else {
    // Do something here.  For example, send a notification to Slack!
    // console.log(req.body);
    res.send('OK!');
  }
});
app.listen(8080, () => console.log('Listening on port 8080'));

----------------------------------------

TITLE: Configuring iOS URL Scheme in Expo app.json
DESCRIPTION: This snippet shows how to add the iOS URL scheme value in the Expo app config under the ios.infoPlist section. The URL scheme is required when using Google API for iOS authentication.

LANGUAGE: json
CODE:
{
  "ios": {
    "infoPlist": {
      "CFBundleURLTypes": [
        {
          "CFBundleURLSchemes": ["com.googleusercontent.apps.17898xxxxxx-xxxxxqhqj0exxxxxpl03xxx"]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Encoding and Decoding Text with TextEncoder and TextDecoder in JavaScript
DESCRIPTION: This snippet demonstrates how to use TextEncoder to convert a string to an array of byte values, and TextDecoder to convert the byte array back to a string. It showcases the basic usage of these APIs for text encoding and decoding.

LANGUAGE: javascript
CODE:
// [104, 101, 108, 108, 111]
const hello = new TextEncoder().encode('hello');

// "hello"
const text = new TextDecoder().decode(hello);

----------------------------------------

TITLE: Displaying Device Information with React Native and Expo Device
DESCRIPTION: This code snippet demonstrates how to use the expo-device package to display the manufacturer and model name of the device. It imports necessary components from React Native and the Device module from expo-device.

LANGUAGE: jsx
CODE:
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: Importing SplashScreen Module in Expo
DESCRIPTION: This snippet shows how to import the SplashScreen module from the expo-splash-screen package. It's a basic import statement used to access the SplashScreen functionality in an Expo project.

LANGUAGE: js
CODE:
import * as SplashScreen from 'expo-splash-screen';

----------------------------------------

TITLE: Implementing StatusBar in React Native App
DESCRIPTION: Example showing how to implement the StatusBar component in a React Native application. The code demonstrates setting up a dark screen with light status bar text.

LANGUAGE: jsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Notice that the status bar has light text!</Text>
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});

----------------------------------------

TITLE: Google Maps API Configuration for Android
DESCRIPTION: JSON configuration for adding Google Maps API key to Android platform in app.json

LANGUAGE: json
CODE:
    "android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY",
        },
      },
    }

----------------------------------------

TITLE: Configuring Foreground Notification Behavior in Expo
DESCRIPTION: Sets up notification handler to control how notifications behave when the app is in the foreground, including options for alerts, sounds, and badges.

LANGUAGE: jsx
CODE:
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

----------------------------------------

TITLE: Creating Animated Box with React Native Reanimated
DESCRIPTION: This snippet demonstrates how to use react-native-reanimated to create a simple animation of a box changing width. It utilizes shared values, animated styles, and timing functions to achieve the animation effect.

LANGUAGE: jsx
CODE:
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});

----------------------------------------

TITLE: Fetching Albums and Displaying Assets with expo-media-library
DESCRIPTION: React Native component demonstrating how to fetch albums from the media library, request permissions, and display album assets using expo-media-library.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});

----------------------------------------

TITLE: Configuring expo-camera plugin in app.json
DESCRIPTION: Example of how to configure the expo-camera plugin in the app.json file. This allows setting camera and microphone permissions for iOS and enabling audio recording for Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Advanced YAML Configuration with Function Integration
DESCRIPTION: Complete YAML configuration showing function definition with inputs/outputs and usage in build steps.

LANGUAGE: yaml
CODE:
build:
  name: My example config
  steps:
    - eas/checkout
    - eas/install_node_modules
    - my_function:
        inputs:
          num1: 1
          num2: 2
        id: sum_function
    - run:
        name: Print the sum
        inputs:
          sum: ${ steps.sum_function.sum }
        command: echo ${ inputs.sum }
    - run:
        name: Finished
        command: echo Finished

functions:
  my_function:
    name: My function
    inputs:
      - name: num1
        type: number
      - name: num2
        type: number
    outputs:
      - name: sum
    path: ./myFunction

----------------------------------------

TITLE: Basic Image Component Usage in React Native
DESCRIPTION: Example showing how to use the expo-image component with blurhash placeholder, content fitting, and transition effects

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});

----------------------------------------

TITLE: Screen Capture Functions and Screenshot Detection in React Native
DESCRIPTION: Comprehensive example demonstrating how to use screen capture prevention functions and screenshot detection listeners. Includes permission handling, screenshot event subscription, and toggle functions for screen capture prevention.

LANGUAGE: jsx
CODE:
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function ScreenCaptureExample() {
  const hasPermissions = async () => {
    const { status } = await ScreenCapture.requestPermissionsAsync();
    return status === 'granted';
  };

  useEffect(() => {
    let subscription;

    const addListenerAsync = async () => {
      if (await hasPermissions()) {
        subscription = ScreenCapture.addScreenshotListener(() => {
          alert('Thanks for screenshotting my beautiful app 😊');
        });
      } else {
        console.error('Permissions needed to subscribe to screenshot events are missing!');
      }
    };
    addListenerAsync();

    return () => {
      subscription?.remove();
    };
  }, []);

  const activate = async () => {
    await ScreenCapture.preventScreenCaptureAsync();
  };

  const deactivate = async () => {
    await ScreenCapture.allowScreenCaptureAsync();
  };

  return (
    <View style={styles.container}>
      <Button title="Activate" onPress={activate} />
      <Button title="Deactivate" onPress={deactivate} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Creating a Stack Navigator Layout in Expo Router
DESCRIPTION: This code snippet shows how to implement a stack navigator in a layout file. It uses the Stack component from expo-router to create a simple stack navigation structure.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function StackLayout() {
  return <Stack />;
}

----------------------------------------

TITLE: EAS Update Channel Configuration
DESCRIPTION: JSON configuration for setting up preview and production update channels in eas.json.

LANGUAGE: json
CODE:
{
  "build": {
    "preview": {
      "channel": "preview"
    },
    "production": {
      "channel": "production"
    }
  }
}

----------------------------------------

TITLE: Advanced TypeScript Function Implementation
DESCRIPTION: Complete TypeScript function implementation demonstrating input/output handling with number addition example.

LANGUAGE: typescript
CODE:
import {
  BuildStepContext,
  BuildStepInput,
  BuildStepInputValueTypeName,
  BuildStepOutput,
} from '@expo/steps';

interface FunctionInputs {
  num1: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;
  num2: BuildStepInput<BuildStepInputValueTypeName.NUMBER, true>;
}

interface FunctionOutputs {
  sum: BuildStepOutput<true>;
}

async function myFunction(
  ctx: BuildStepContext,
  {
    inputs,
    outputs,
  }: {
    inputs: FunctionInputs;
    outputs: FunctionOutputs;
  }
): Promise<void> {
  ctx.logger.info(`num1: ${inputs.num1.value}`);
  ctx.logger.info(`num2: ${inputs.num2.value}`);

  const sum = inputs.num1.value + inputs.num2.value;

  ctx.logger.info(`sum: ${sum}`);

  outputs.sum.set(sum.toString());
}

----------------------------------------

TITLE: Using expo-location to Get Current Position
DESCRIPTION: React Native component demonstrating how to request location permissions and get the device's current position using expo-location.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  let text = 'Waiting..';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});

----------------------------------------

TITLE: Implementing Home Layout for Grouped Routes in Expo Router
DESCRIPTION: This code snippet shows how to create a layout file for a group of routes in Expo Router. It defines a Stack navigator for the home group, including screen options for the routes within the group.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function HomeLayout() {
  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}>
      <Stack.Screen name="index" />
      <Stack.Screen name="details" />
    </Stack>
  );
}

----------------------------------------

TITLE: Using useSafeAreaInsets Hook in React Native
DESCRIPTION: Demonstrates how to use the useSafeAreaInsets hook to access safe area inset values directly in a component.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}

----------------------------------------

TITLE: Generating iOS Project with Expo Prebuild
DESCRIPTION: Command to generate the iOS project directory using Expo Prebuild if it doesn't exist.

LANGUAGE: shell
CODE:
npx expo prebuild -p ios

----------------------------------------

TITLE: Configuring iOS Background Modes in app.json
DESCRIPTION: Configuration example for enabling background location, fetch and remote notifications in the iOS app configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": ["location", "fetch", "remote-notification"]
      }
    }
  }
}

----------------------------------------

TITLE: Basic Brightness Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-brightness package to set the system brightness to maximum after requesting permissions. It uses the useEffect hook to run the brightness-setting code when the component mounts.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Brightness.requestPermissionsAsync();
      if (status === 'granted') {
        Brightness.setSystemBrightnessAsync(1);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Brightness Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Configuring expo-camera Plugin in app.json
DESCRIPTION: JSON configuration for the expo-camera plugin, setting up camera and microphone permissions and Android audio recording.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Production Profile for EAS Submit in JSON
DESCRIPTION: This snippet demonstrates the structure of the eas.json file for configuring the production profile for EAS Submit. It includes settings for both Android and iOS submissions.

LANGUAGE: json
CODE:
{
  "cli": {
    "version": ">= 0.34.0"
  },
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "../path/to/api-xxx-yyy-zzz.json",
        "track": "internal"
      },
      "ios": {
        "ascAppId": "your-app-store-connect-app-id"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Google Maps API Key in app.json for iOS
DESCRIPTION: This JSON snippet demonstrates how to add the Google Maps API key to the app.json file for iOS configuration in an Expo project.

LANGUAGE: json
CODE:
{
    "ios": {
      "config": {
        "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY"
      }
    }
}

----------------------------------------

TITLE: Basic Checkbox Implementation in React Native with Expo
DESCRIPTION: Demonstrates how to implement a checkbox component with different states including normal, custom colored, and disabled. Uses React useState hook for state management and includes styling for layout and appearance.

LANGUAGE: tsx
CODE:
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});

----------------------------------------

TITLE: Creating Expo App with Legend-State Supabase Example
DESCRIPTION: This command creates a new Expo app using the Legend-State Supabase example template. Legend-State is a state management and sync library that works well with Expo and React Native for building local-first apps.

LANGUAGE: bash
CODE:
$ npx create-expo-app --example with-legend-state-supabase

----------------------------------------

TITLE: Basic Calendar Usage in React Native with Expo
DESCRIPTION: A React Native component demonstrating basic usage of the expo-calendar module. It includes requesting calendar permissions, fetching calendars, and creating a new calendar.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});

----------------------------------------

TITLE: Implementing ViewPager in React Native
DESCRIPTION: Example implementation of a PagerView component showing three swipeable pages with basic styling. The component uses react-native-pager-view to create a carousel-like interface with three pages containing simple text content.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
    <View style={styles.container}>
      <PagerView style={styles.container} initialPage={0}>
        <View style={styles.page} key="1">
          <Text>First page</Text>
          <Text>Swipe ➡️</Text>
        </View>
        <View style={styles.page} key="2">
          <Text>Second page</Text>
        </View>
        <View style={styles.page} key="3">
          <Text>Third page</Text>
        </View>
      </PagerView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  page: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Creating Default Babel Configuration for Expo
DESCRIPTION: This snippet shows the default Babel configuration for Expo projects. It uses the 'babel-preset-expo' preset, which extends the default React Native preset and adds support for additional features.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

----------------------------------------

TITLE: Implementing Playback Status Updates in Expo AV
DESCRIPTION: Example showing how to handle playback status updates for audio/video content including error handling and state management.

LANGUAGE: javascript
CODE:
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
    if (playbackStatus.error) {
      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
    }
  } else {
    if (playbackStatus.isPlaying) {
    } else {
    }
    if (playbackStatus.isBuffering) {
    }
    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
    }
  }
};

playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);

----------------------------------------

TITLE: Basic GLView Usage in React Native with Expo
DESCRIPTION: Demonstrates how to use GLView to render a simple shape using OpenGL ES. The example creates a vertex shader, fragment shader, links them into a program, and draws a point.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}

----------------------------------------

TITLE: Implementing Video Player with Controls in React Native
DESCRIPTION: A complete example showing how to implement a video player with play/pause controls using expo-video. The component uses useVideoPlayer hook for player management and VideoView for rendering. Features include autoplay, looping, fullscreen support, and picture-in-picture capability.

LANGUAGE: jsx
CODE:
import { useVideoPlayer, VideoView } from 'expo-video';
import { useEffect, useRef, useState } from 'react';
import { PixelRatio, StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const ref = useRef(null);
  const [isPlaying, setIsPlaying] = useState(true);
  const player = useVideoPlayer(videoSource, player => {
    player.loop = true;
    player.play();
  });

  useEffect(() => {
    const subscription = player.addListener('playingChange', isPlaying => {
      setIsPlaying(isPlaying);
    });

    return () => {
      subscription.remove();
    };
  }, [player]);

  return (
    <View style={styles.contentContainer}>
      <VideoView
        ref={ref}
        style={styles.video}
        player={player}
        allowsFullscreen
        allowsPictureInPicture
      />
      <View style={styles.controlsContainer}>
        <Button
          title={isPlaying ? 'Pause' : 'Play'}
          onPress={() => {
            if (isPlaying) {
              player.pause();
            } else {
              player.play();
            }
            setIsPlaying(!isPlaying);
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 50,
  },
  video: {
    width: 350,
    height: 275,
  },
  controlsContainer: {
    padding: 10,
  },
});

----------------------------------------

TITLE: Configuring Splash Screen with Config Plugin in app.json
DESCRIPTION: This snippet shows how to configure the expo-splash-screen using its built-in config plugin in the app.json file. It demonstrates setting background colors, images for light and dark modes, and image width for the splash screen.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-splash-screen",
        {
          "backgroundColor": "#232323",
          "image": "./assets/splash-icon.png",
          "dark": {
            "image": "./assets/splash-icon-dark.png",
            "backgroundColor": "#000000"
          },
          "imageWidth": 200
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Initializing TypeScript EAS Build Function Template
DESCRIPTION: Default TypeScript function template generated by create-eas-build-function CLI tool. Includes basic structure with BuildStepContext and placeholder interfaces for inputs and outputs.

LANGUAGE: typescript
CODE:
import { BuildStepContext } from '@expo/steps';

async function myFunction(
  ctx: BuildStepContext
): Promise<void> {
  ctx.logger.info('Hello from my TypeScript function!');
}

export default myFunction;

----------------------------------------

TITLE: Basic Device Information Display in React Native
DESCRIPTION: A React Native component that displays the device manufacturer and model name using expo-device. Uses a centered View container to show the device information in Text component.

LANGUAGE: jsx
CODE:
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: iOS Face ID Configuration in Info.plist
DESCRIPTION: XML configuration for setting up Face ID usage description in iOS Info.plist file.

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the camera</string>

----------------------------------------

TITLE: Navigating Between Routes in Expo Router
DESCRIPTION: This snippet demonstrates how to use the Link component from Expo Router to navigate between routes. It updates the HomeScreen component to include a link to the details screen.

LANGUAGE: tsx
CODE:
import { Link } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <Text>Home</Text>
      <Link href="/details">View details</Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Configuring Expo Font Plugin in app.json
DESCRIPTION: Configuration example for the expo-font plugin to embed font files at build time. The fonts array specifies paths to font files relative to the project root.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["path/to/file.ttf"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Haptic Feedback in React Native with Expo
DESCRIPTION: Complete example demonstrating various haptic feedback patterns including selection, notification (success, error, warning), and impact (light, medium, heavy, rigid, soft) feedback using expo-haptics.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Haptics.selectionAsync</Text>
      <View style={styles.buttonContainer}>
        <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
      </View>
      <Text style={styles.text}>Haptics.notificationAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Success"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Success
              )
          }
        />
        <Button
          title="Error"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Error
              )
          }
        />
        <Button
          title="Warning"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Warning
              )
          }
        />
      </View>
      <Text style={styles.text}>Haptics.impactAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Light"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
          }
        />
        <Button
          title="Medium"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
          }
        />
        <Button
          title="Heavy"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
          }
        />
        <Button
          title="Rigid"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)
          }
        />
        <Button
          title="Soft"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)
          }
        />
      </View>
    </View>
  );
}

----------------------------------------

TITLE: Updating Root Layout for Tab Navigation in Expo Router
DESCRIPTION: This snippet demonstrates how to update the root layout file to include tab navigation. It uses the Stack component to define the (tabs) group as the first route within the root layout.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" />
    </Stack>
  );
}

----------------------------------------

TITLE: Configuring Expo Font Plugin in app.json
DESCRIPTION: Configuration example for the expo-font plugin to embed font files at build time. The fonts array specifies paths to font files relative to the project root.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["path/to/file.ttf"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Build Properties in app.json for Expo
DESCRIPTION: This snippet demonstrates how to configure the expo-build-properties plugin in the app.json file of an Expo project. It shows how to set Android and iOS build properties.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 34,
            "targetSdkVersion": 34,
            "buildToolsVersion": "34.0.0"
          },
          "ios": {
            "deploymentTarget": "13.4"
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Displaying Images with Expo Image Component
DESCRIPTION: This snippet demonstrates how to use the Expo Image component to display an image in a React Native app. It includes importing the component, setting up a placeholder image, and applying styles.

LANGUAGE: typescript
CODE:
import { View, StyleSheet } from 'react-native';
import { Image } from 'expo-image';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <Image source={PlaceholderImage} style={styles.image} />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  image: {
    width: 320,
    height: 440,
    borderRadius: 18,
  },
});

----------------------------------------

TITLE: Git Ignore Configuration for Native Directories
DESCRIPTION: Shows how to configure .gitignore to exclude generated native directories when using EAS Build.

LANGUAGE: diff
CODE:
+ /android
+ /ios

----------------------------------------

TITLE: Configuring expo-calendar plugin in app.json
DESCRIPTION: Example of how to configure the expo-calendar plugin in the app.json file. This configuration sets custom permission messages for calendar and reminder access on iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-calendar",
        {
          "calendarPermission": "The app needs to access your calendar."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing a PagerView Component in React Native
DESCRIPTION: This example demonstrates how to create a simple PagerView component with three pages. It uses the PagerView component from react-native-pager-view and includes styling for the container and individual pages.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
    <View style={styles.container}>
      <PagerView style={styles.container} initialPage={0}>
        <View style={styles.page} key="1">
          <Text>First page</Text>
          <Text>Swipe ➡️</Text>
        </View>
        <View style={styles.page} key="2">
          <Text>Second page</Text>
        </View>
        <View style={styles.page} key="3">
          <Text>Third page</Text>
        </View>
      </PagerView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  page: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: WebView Implementation with Inline HTML Content
DESCRIPTION: Shows how to create a WebView component that renders inline HTML content. Includes originWhitelist configuration for allowing all origins and demonstrates basic HTML content rendering.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Creating an SVG Component in React Native
DESCRIPTION: Shows how to create a custom SVG component using Circle and Rect elements from react-native-svg. The component renders a circle and rectangle with specified dimensions and styles.

LANGUAGE: tsx
CODE:
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
    <Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
      <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
      <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
    </Svg>
  );
}

----------------------------------------

TITLE: Executing Async SQLite Transactions
DESCRIPTION: Example of executing SQL queries within an async transaction context, demonstrating how to perform read operations with SQLite.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite/legacy';

const db = SQLite.openDatabase('dbName', version);

const readOnly = true;
await db.transactionAsync(async tx => {
  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);
  console.log('Count:', result.rows[0]['COUNT(*)']);
}, readOnly);

----------------------------------------

TITLE: Basic WebBrowser Implementation in React Native
DESCRIPTION: Example showing how to implement basic web browser functionality using expo-web-browser. The code demonstrates opening a web page and handling the result using React hooks.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Button, Text, View, StyleSheet } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
import Constants from 'expo-constants';

export default function App() {
  const [result, setResult] = useState(null);

  const _handlePressButtonAsync = async () => {
    let result = await WebBrowser.openBrowserAsync('https://expo.dev');
    setResult(result);
  };
  return (
    <View style={styles.container}>
      <Button title="Open WebBrowser" onPress={_handlePressButtonAsync} />
      <Text>{result && JSON.stringify(result)}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
  },
});

----------------------------------------

TITLE: Configuring expo-calendar plugin in app.json
DESCRIPTION: Example of how to configure the expo-calendar plugin in the app.json file. This configuration sets custom permission messages for calendar and reminder access on iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-calendar",
        {
          "calendarPermission": "The app needs to access your calendar."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Fetching Network Information in React Native
DESCRIPTION: Demonstrates how to use NetInfo.fetch() to retrieve network connection information once.

LANGUAGE: javascript
CODE:
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

----------------------------------------

TITLE: WebView Inline HTML Content Integration
DESCRIPTION: Shows how to render inline HTML content within a WebView component. Includes configuration for allowing all origins and demonstrates basic HTML content rendering with styling.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Creating Platform-Specific Production Builds with EAS CLI
DESCRIPTION: Command line instructions for initiating production builds for specific platforms using EAS CLI. Shows commands for both Android and iOS builds.

LANGUAGE: bash
CODE:
$ eas build --platform android

LANGUAGE: bash
CODE:
$ eas build --platform ios

----------------------------------------

TITLE: Importing and Using React Native Core Components
DESCRIPTION: Demonstrates how to import and use basic React Native components like Text and View to create a simple 'Hello, world!' app.

LANGUAGE: tsx
CODE:
import { Text, View } from 'react-native';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Hello, world!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Capturing a FullHD image using captureRef in React Native
DESCRIPTION: This example demonstrates how to use captureRef to capture a 1080x1080 FullHD image, taking into account the device's pixel ratio for proper scaling.

LANGUAGE: javascript
CODE:
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});

----------------------------------------

TITLE: Configuring Stripe Plugin in Expo app.json
DESCRIPTION: JSON configuration for setting up the @stripe/stripe-react-native plugin in an Expo project's app.json file. It includes options for setting the merchantIdentifier for iOS and enabling Google Pay for Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": string | string [],
          "enableGooglePay": boolean
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Configuring GitHub Actions Preview Workflow for Expo
DESCRIPTION: GitHub Actions workflow configuration that automatically creates and publishes Expo app previews when pull requests are opened or updated. Includes setup for Node.js, EAS CLI, and preview deployment with QR code generation.

LANGUAGE: yaml
CODE:
name: preview
on: pull_request

jobs:
  update:
    name: EAS Update
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: yarn

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: yarn install

      - name: Create preview
        uses: expo/expo-github-action/preview@v8
        with:
          command: eas update --auto

----------------------------------------

TITLE: Configuring App Layout with Modal Sign-In in Expo Router
DESCRIPTION: This code demonstrates how to set up an app layout that includes a modal sign-in screen. It uses the Stack component from expo-router to define the layout and screen options.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export const unstable_settings = {
  initialRouteName: '(root)',
};

export default function AppLayout() {
  return (
    <Stack>
      <Stack.Screen name="(root)" />
      <Stack.Screen
        name="sign-in"
        options={{
          presentation: 'modal',
        }}
      />
    </Stack>
  );
}

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server for running the app on mobile devices and web browsers.

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Basic Crypto Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-crypto module in a React Native application. It shows how to import the module, perform a SHA256 hash operation on a string, and log the resulting digest.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
    (async () => {
      const digest = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        'GitHub stars are neat 🌟'
      );
      console.log('Digest: ', digest);
      /* Some crypto operation... */
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Crypto Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: SecureStore Usage Example in React Native
DESCRIPTION: Complete example showing how to use SecureStore to save and retrieve encrypted key-value pairs in a React Native application.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

----------------------------------------

TITLE: Page Margins Configuration
DESCRIPTION: Examples demonstrating how to configure page margins for printing on iOS and Android platforms using expo-print.

LANGUAGE: js
CODE:
const { uri } = await Print.printToFileAsync({
  html: 'This page is printed with margins',
  margins: {
    left: 20,
    top: 50,
    right: 20,
    bottom: 100,
  },
});

LANGUAGE: html
CODE:
<style>
  @page {
    margin: 20px;
  }
</style>

----------------------------------------

TITLE: Using expo-maps in a React Native component
DESCRIPTION: This TypeScript React Native code demonstrates how to use the expo-maps library to render platform-specific map views for iOS (AppleMaps) and Android (GoogleMaps).

LANGUAGE: tsx
CODE:
import { AppleMaps, GoogleMaps } from 'expo-maps';
import { Platform, Text } from 'react-native';

export default function App() {
  if (Platform.OS === 'ios') {
    return <AppleMaps.View style={{ flex: 1 }} />;
  } else if (Platform.OS === 'android') {
    return <GoogleMaps.View style={{ flex: 1 }} />;
  } else {
    return <Text>Maps are only available on Android and iOS</Text>;
  }
}

----------------------------------------

TITLE: Basic Crypto Usage in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-crypto module in a React Native application. It shows how to import the module, perform a SHA256 hash operation on a string, and log the resulting digest.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
    (async () => {
      const digest = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        'GitHub stars are neat 🌟'
      );
      console.log('Digest: ', digest);
      /* Some crypto operation... */
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Crypto Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Configuring Platform-Specific App Icons in Expo app.json
DESCRIPTION: This snippet demonstrates how to configure different app icons for various system appearances (dark, light, tinted) on iOS in the app.json file of an Expo project.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "icon": {
        "dark": "./assets/images/ios-dark.png",
        "light": "./assets/images/ios-light.png",
        "tinted": "./assets/images/ios-tinted.png"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Stack Navigator with Screen Options in Expo Router
DESCRIPTION: This example demonstrates how to configure a stack navigator with specific screen options. It uses the Stack.Screen component to set options for a dynamic route.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function StackLayout() {
  return (
    <Stack>
      <Stack.Screen name="[productId]" options={{ headerShown: false }} />
    </Stack>
  );
}

----------------------------------------

TITLE: Scheduling a Local Notification in React Native
DESCRIPTION: This snippet demonstrates how to set up a notification handler and schedule a local notification using expo-notifications.

LANGUAGE: typescript
CODE:
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

Notifications.scheduleNotificationAsync({
  content: {
    title: "Look at that notification",
    body: "I'm so proud of myself!",
  },
  trigger: null,
});

----------------------------------------

TITLE: Downloading Files with Expo FileSystem Next
DESCRIPTION: Shows how to download files from a URL to the local filesystem. Creates a destination directory and handles the download process with error handling.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const destination = new Directory(Paths.cache, 'pdfs');
try {
  destination.create();
  const output = await File.downloadFileAsync(url, destination);
  console.log(output.exists); // true
  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Implementing Light Sensor functionality in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the LightSensor from expo-sensors in a React Native application. It shows how to subscribe to light sensor updates, toggle the subscription, and display the illuminance value.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
    if (subscription) {
      unsubscribe();
    } else {
      subscribe();
    }
  };

  const subscribe = () => {
    setSubscription(
      LightSensor.addListener(sensorData => {
        setData(sensorData);
      })
    );
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    subscribe();
    return () => unsubscribe();
  }, []);

  return (
    <View style={styles.sensor}>
      <Text>Light Sensor:</Text>
      <Text>
        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
      </Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={toggle} style={styles.button}>
          <Text>Toggle</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  sensor: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
});

----------------------------------------

TITLE: Implementing Segmented Picker Component in Expo UI
DESCRIPTION: This code shows how to use the Picker component from @expo/ui in its segmented variant. It creates a picker with dollar sign options and handles the selection change.

LANGUAGE: tsx
CODE:
import { Picker } from '@expo/ui/components/Picker';

<Picker
  options={['$', '$$', '$$$', '$$$$']}
  selectedIndex={selectedIndex}
  onOptionSelected={({ nativeEvent: { index } }) => {
    setSelectedIndex(index);
  }}
/>

----------------------------------------

TITLE: GLView Integration with Reanimated Worklets
DESCRIPTION: Demonstration of using GLView within Reanimated worklets, showing how to pass GL context ID and recreate GL object in the worklet context.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}

----------------------------------------

TITLE: Implementing Background Fetch in React Native with expo-background-fetch
DESCRIPTION: This snippet demonstrates how to use the expo-background-fetch module to register and manage background fetch tasks in a React Native application. It includes defining a task, registering/unregistering the task, and creating a UI to control the background fetch functionality.

LANGUAGE: tsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: Initializing Audio.Sound in Expo AV
DESCRIPTION: Example of setting up audio mode and creating an Audio.Sound object for playback in Expo AV.

LANGUAGE: javascript
CODE:
await Audio.setAudioModeAsync({ playsInSilentModeIOS: true });

const playbackObject = new Audio.Sound();
// OR
const { sound: playbackObject } = await Audio.Sound.createAsync(
  { uri: 'http://foo/bar.mp3' },
  { shouldPlay: true }
);

----------------------------------------

TITLE: Downloading Files with Expo FileSystem Next
DESCRIPTION: Shows how to download files from a URL to the local filesystem. Creates a destination directory and handles the download process with error handling.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const destination = new Directory(Paths.cache, 'pdfs');
try {
  destination.create();
  const output = await File.downloadFileAsync(url, destination);
  console.log(output.exists); // true
  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Subscribing to Network State Changes in React Native
DESCRIPTION: Shows how to use NetInfo.addEventListener() to subscribe to network state changes and unsubscribe when needed.

LANGUAGE: javascript
CODE:
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();

----------------------------------------

TITLE: Using StatusBar Component in React Native Expo
DESCRIPTION: Example demonstrating how to use the StatusBar component to set light-colored status bar text against a dark background. The code shows a basic app layout with centered text and status bar customization.

LANGUAGE: jsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Notice that the status bar has light text!</Text>
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});

----------------------------------------

TITLE: Configuring EAS Workflows Build Configuration
DESCRIPTION: YAML configuration for EAS Workflows that triggers Android and iOS builds when code is pushed to the main branch.

LANGUAGE: yaml
CODE:
name: Build

on:
  push:
    branches:
      - main

jobs:
  build_android:
    name: Build Android App
    type: build
    params:
      platform: android
  build_ios:
    name: Build iOS App
    type: build
    params:
      platform: ios

----------------------------------------

TITLE: Implementing Basic Gyroscope Functionality in React Native with Expo
DESCRIPTION: A complete React Native component demonstrating gyroscope sensor implementation using expo-sensors. The component includes real-time display of x, y, z rotation values, subscription management, and update interval controls.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Displaying Battery Level with React Native and Expo
DESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level in a React Native application. It creates a simple view with a text component showing the battery level.

LANGUAGE: jsx
CODE:
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Implementing Text-to-Speech in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-speech library to implement text-to-speech functionality in a React Native application. It creates a simple UI with a button that, when pressed, speaks the number '1'.

LANGUAGE: jsx
CODE:
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
    const thingToSay = '1';
    Speech.speak(thingToSay);
  };

  return (
    <View style={styles.container}>
      <Button title="Press to hear some words" onPress={speak} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
});

----------------------------------------

TITLE: Setting Up URL Scheme for Stripe in Expo React Native
DESCRIPTION: JavaScript code snippet demonstrating how to set up the correct URL scheme for Stripe redirects in an Expo React Native app. It uses expo-linking and expo-constants to determine the appropriate URL scheme based on the app's environment.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),

----------------------------------------

TITLE: Initializing Sentry in Expo Router Root Layout
DESCRIPTION: Configure Sentry in the Root Layout route of an Expo Router app. This setup captures the current route and includes it in error reports.

LANGUAGE: typescript
CODE:
import { Slot, useNavigationContainerRef } from 'expo-router';
import { useEffect } from 'react';
import * as Sentry from '@sentry/react-native';
import { isRunningInExpoGo } from 'expo';

const navigationIntegration = Sentry.reactNavigationIntegration({
  enableTimeToInitialDisplay: !isRunningInExpoGo(),
});

Sentry.init({
  dsn: 'YOUR DSN HERE',
  debug: true,
  tracesSampleRate: 1.0,
  integrations: [
    navigationIntegration,
  ],
  enableNativeFramesTracking: !isRunningInExpoGo(),
});

function RootLayout() {
  const ref = useNavigationContainerRef();

  useEffect(() => {
    if (ref?.current) {
      navigationIntegration.registerNavigationContainer(ref);
    }
  }, [ref]);

  return <Slot />;
}

export default Sentry.wrap(RootLayout);

----------------------------------------

TITLE: Implementing File Download Operations in JavaScript
DESCRIPTION: Demonstrates how to download files with progress tracking, pause/resume functionality, and persistence across app restarts using FileSystem API

LANGUAGE: javascript
CODE:
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

----------------------------------------

TITLE: Configuring Drawer Screen Options
DESCRIPTION: Extended implementation showing how to configure drawer screen options including custom labels and titles for different routes.

LANGUAGE: typescript
CODE:
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { Drawer } from 'expo-router/drawer';

export default function Layout() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <Drawer>
        <Drawer.Screen
          name="index"
          options={{
            drawerLabel: 'Home',
            title: 'overview',
          }}
        />
        <Drawer.Screen
          name="user/[id]"
          options={{
            drawerLabel: 'User',
            title: 'overview',
          }}
        />
      </Drawer>
    </GestureHandlerRootView>
  );
}

----------------------------------------

TITLE: Configuring EAS Update Channels in eas.json
DESCRIPTION: Example configuration for EAS Update channels in eas.json. It defines build profiles for production, staging, and preview, each associated with a corresponding channel.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "channel": "production"
    },
    "staging": {
      "channel": "staging"
    },
    "preview": {
      "channel": "preview",
      "distribution": "internal"
    }
  }
}

----------------------------------------

TITLE: Setting System Brightness in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the expo-brightness module to request permissions and set the system brightness to maximum in a React Native application.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Brightness.requestPermissionsAsync();
      if (status === 'granted') {
        Brightness.setSystemBrightnessAsync(1);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Brightness Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Basic CRUD Operations with expo-sqlite in JavaScript
DESCRIPTION: Demonstrates basic Create, Read, Update, and Delete operations using expo-sqlite, including opening a database, executing queries, and retrieving results.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}

----------------------------------------

TITLE: Configuring credentials.json for EAS Build
DESCRIPTION: Example of a credentials.json file structure for specifying local Android keystore and iOS certificate paths and passwords for use with EAS Build.

LANGUAGE: json
CODE:
{
  "android": {
    "keystore": {
      "keystorePath": "android/keystores/release.keystore",
      "keystorePassword": "paofohlooZ9e",
      "keyAlias": "keyalias",
      "keyPassword": "aew1Geuthoev"
    }
  },
  "ios": {
    "provisioningProfilePath": "ios/certs/profile.mobileprovision",
    "distributionCertificate": {
      "path": "ios/certs/dist-cert.p12",
      "password": "iex3shi9Lohl"
    }
  }
}

----------------------------------------

TITLE: Configuring EXPO_TOKEN in GitHub Repository
DESCRIPTION: Steps to create an Expo token and add it as a secret in your GitHub repository for use in continuous deployment.

LANGUAGE: markdown
CODE:
- Navigate to [expo.dev/settings/access-tokens](https://expo.dev/settings/access-tokens) and then:
- Click **Create token** to create a new personal access token.
- Copy the generated token.
- Navigate to https://github.com/your-username/your-repo-name/settings/secrets/actions by replacing "your-username" and "your-repo-name" with your project's info.
- Under **Repository secrets**, click **New repository secret**.
- Create a secret with the name **EXPO_TOKEN**, and paste the copied access token in as the value.

----------------------------------------

TITLE: Dynamic Expo Configuration with Function Export
DESCRIPTION: Shows how to export a function in app.config.js to modify incoming configuration values, useful when also using app.json.

LANGUAGE: javascript
CODE:
module.exports = ({ config }) => {
  console.log(config.name); // prints 'My App'
  return {
    ...config,
  };
};

----------------------------------------

TITLE: Platform-Specific JavaScript Engine Configuration
DESCRIPTION: Configuration example showing how to set different JavaScript engines for specific platforms in the app.json file, with iOS using JSC while maintaining Hermes as default.

LANGUAGE: json
CODE:
{
  "expo": {
    "jsEngine": "hermes",
    "ios": {
      "jsEngine": "jsc"
    }
  }
}

----------------------------------------

TITLE: Exporting Android Keystore Certificate to PEM Format
DESCRIPTION: This command exports the Android keystore certificate to a PEM file format, which is required when resetting the upload key on Google Play. It uses the keytool utility to extract the certificate from the keystore file.

LANGUAGE: bash
CODE:
keytool -export -rfc -alias alias_from_step_1 -file certificate_for_google.pem -keystore ./path/to/keystore.jks

----------------------------------------

TITLE: Configuring DeviceMotion Plugin in app.json
DESCRIPTION: Configuration example for the expo-sensors plugin in app.json, showing how to set up motion permission messages for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Expo Camera Plugin
DESCRIPTION: JSON configuration for expo-camera plugin in app.json, specifying camera and microphone permissions along with Android audio recording settings.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Image Picker in React Native
DESCRIPTION: Example React Native component that demonstrates how to implement image picking functionality using expo-image-picker. Shows how to launch the image library and display the selected image.

LANGUAGE: typescript
CODE:
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Opening App Settings using React Native Linking
DESCRIPTION: JavaScript function to open the app settings page using React Native's Linking API.

LANGUAGE: javascript
CODE:
import { Linking } from 'react-native';

function openSettings() {
  Linking.openURL('app-settings:');
}

----------------------------------------

TITLE: Basic Contacts Usage in React Native with Expo
DESCRIPTION: A React Native component demonstrating basic usage of the expo-contacts module. It requests permission to access contacts and then retrieves the first contact's information if available.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Basic CRUD Operations with expo-sqlite in JavaScript
DESCRIPTION: Demonstrates basic Create, Read, Update, and Delete operations using expo-sqlite, including opening a database, executing queries, and retrieving results.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}

----------------------------------------

TITLE: Creating a Details Screen Route in Expo Router
DESCRIPTION: This snippet demonstrates how to add a new route (/details) by creating a details.tsx file in the app directory. It creates a simple DetailsScreen component with basic styling.

LANGUAGE: tsx
CODE:
import { View, Text, StyleSheet } from 'react-native';

export default function DetailsScreen() {
  return (
    <View style={styles.container}>
      <Text>Details</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Implementing Button Component in Expo UI
DESCRIPTION: This snippet demonstrates how to use the Button component from @expo/ui. It creates a button with the text 'Edit profile' and sets up an onPress handler to update the state.

LANGUAGE: tsx
CODE:
import { Button } from '@expo/ui/components/Button';

<Button
  style={{ flex: 1 }}
  onPress={() => {
    setEditingProfile(true);
  }}>
  Edit profile
</Button>

----------------------------------------

TITLE: Configuring expo-barcode-scanner Plugin in app.json
DESCRIPTION: Example of how to configure the expo-barcode-scanner plugin in the app.json file for EAS Build or expo run commands. It shows how to set custom camera permission messages.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-barcode-scanner",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access camera."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Complete Localization Example
DESCRIPTION: Full example of implementing localization in an Expo app with fallback support and locale display.

LANGUAGE: typescript
CODE:
import { View, StyleSheet, Text } from 'react-native';
import { getLocales } from 'expo-localization';
import { I18n } from 'i18n-js';

const translations = {
  en: { welcome: 'Hello', name: 'Charlie' },
  ja: { welcome: 'こんにちは' },
};
const i18n = new I18n(translations);

i18n.locale = getLocales()[0].languageCode ?? 'en';
i18n.enableFallback = true;

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>
        {i18n.t('welcome')} {i18n.t('name')}
      </Text>
      <Text>Current locale: {i18n.locale}</Text>
      <Text>Device locale: {getLocales()[0].languageCode}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  text: {
    fontSize: 20,
    marginBottom: 16,
  },
});

----------------------------------------

TITLE: SecureStore Implementation Example
DESCRIPTION: Complete React Native example showing implementation of secure storage with key-value pair saving and retrieval

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

----------------------------------------

TITLE: Configuring LocalAuthentication Plugin in app.json
DESCRIPTION: Configuration example showing how to set up the expo-local-authentication plugin in the app.json config file, specifically for setting Face ID permission message on iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-local-authentication",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to use Face ID."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Rendering Development Environment Instructions
DESCRIPTION: This code renders a component that provides detailed instructions for setting up the development environment based on the user's selections in the previous forms.

LANGUAGE: jsx
CODE:
<DevelopmentEnvironmentInstructions />

----------------------------------------

TITLE: Sending EAS Updates to Production Channel
DESCRIPTION: Command to send an over-the-air update to the production channel using EAS CLI. The update will be available to builds configured for the production channel as defined in eas.json.

LANGUAGE: bash
CODE:
$ eas update --channel production

----------------------------------------

TITLE: Encoding and Decoding credentials.json for CI
DESCRIPTION: Commands for base64 encoding credentials.json for secure storage in CI environment variables, and decoding it during the CI build process.

LANGUAGE: sh
CODE:
$ base64 credentials.json
$ echo $CREDENTIALS_JSON_BASE64 | base64 -d > credentials.json

----------------------------------------

TITLE: Using Expo Atlas with Export Command
DESCRIPTION: Commands to export an Expo app for all platforms with Atlas enabled and open the generated Atlas file for analysis.

LANGUAGE: bash
CODE:
EXPO_UNSTABLE_ATLAS=true npx expo export

npx expo-atlas .expo/atlas.jsonl

----------------------------------------

TITLE: React Native Safe Area Implementation
DESCRIPTION: Modern React Native implementation of safe area insets using hooks

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingLeft: insets.left,
        paddingBottom: insets.bottom,
        paddingRight: insets.right,
      }}
    />
  );
}

----------------------------------------

TITLE: Implementing Magnetometer Sensor in React Native with Expo
DESCRIPTION: This code snippet demonstrates how to use the Magnetometer from expo-sensors in a React Native application. It creates a component that displays magnetometer readings, allows toggling the sensor on/off, and adjusting update intervals.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});

----------------------------------------

TITLE: Using useSQLiteContext Hook in React Components
DESCRIPTION: Demonstrates how to use the useSQLiteContext hook to access the SQLite database within React components, including setting up the SQLiteProvider and performing database operations.

LANGUAGE: typescript
CODE:
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
    async function setup() {
      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
        'SELECT sqlite_version()'
      );
      setVersion(result['sqlite_version()']);
    }
    setup();
  }, []);
  return (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>SQLite version: {version}</Text>
    </View>
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo[]>([]);

  useEffect(() => {
    async function setup() {
      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
      setTodos(result);
    }
    setup();
  }, []);

  return (
    <View style={styles.contentContainer}>
      {todos.map((todo, index) => (
        <View style={styles.todoItemContainer} key={index}>
          <Text>{`${todo.intValue} - ${todo.value}`}</Text>
        </View>
      ))}
    </View>
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
    'PRAGMA user_version'
  );
  if (currentDbVersion >= DATABASE_VERSION) {
    return;
  }
  if (currentDbVersion === 0) {
    await db.execAsync(`
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
    currentDbVersion = 1;
  }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

const styles = StyleSheet.create({
  // Your styles...
});

----------------------------------------

TITLE: Extracting Certificate from Keystore PKCS#12 File in JavaScript
DESCRIPTION: This snippet shows how to parse a base64 encoded PKCS#12 file containing a keystore, extract a certificate by its alias, and generate a SHA-1 fingerprint. It uses functions like parsePKCS12, getX509CertificateByFriendlyName, and getCertificateFingerprint.

LANGUAGE: javascript
CODE:
const p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12
const certificate = getX509CertificateByFriendlyName(p12, alias); // extracts single certificate stored under alias in p12
const sha1Fingerprint = getCertificateFingerprint(certificate, {
  hashAlgorithm: 'sha1',
}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a

----------------------------------------

TITLE: Keyboard Event Handling
DESCRIPTION: Implementation of keyboard event listeners to track keyboard visibility and provide dismiss functionality.

LANGUAGE: typescript
CODE:
import { useEffect, useState } from 'react';
import { Keyboard, View, Button, TextInput } from 'react-native';

export default function HomeScreen() {
  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);

  useEffect(() => {
    const showSubscription = Keyboard.addListener('keyboardDidShow', handleKeyboardShow);
    const hideSubscription = Keyboard.addListener('keyboardDidHide', handleKeyboardHide);

    return () => {
      showSubscription.remove();
    };
  }, []);

  const handleKeyboardShow = event => {
    setIsKeyboardVisible(true);
  };

  const handleKeyboardHide = event => {
    setIsKeyboardVisible(false);
  };

  return (
    <View>
      {isKeyboardVisible && <Button title="Dismiss keyboard" onPress={Keyboard.dismiss} />}
      <TextInput placeholder="Type here..." />
    </View>
  );
}

----------------------------------------

TITLE: Complete Color Scheme Example Implementation
DESCRIPTION: Full example showing implementation of color scheme detection and styling in a React Native component with StatusBar integration

LANGUAGE: typescript
CODE:
import { Text, StyleSheet, View, useColorScheme } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  const colorScheme = useColorScheme();

  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;
  const themeContainerStyle =
    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;

  return (
    <View style={[styles.container, themeContainerStyle]}>
      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>
      <StatusBar />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontSize: 20,
  },
  lightContainer: {
    backgroundColor: '#d0d0c0',
  },
  darkContainer: {
    backgroundColor: '#242c40',
  },
  lightThemeText: {
    color: '#242c40',
  },
  darkThemeText: {
    color: '#d0d0c0',
  },
});

----------------------------------------

TITLE: Local Image Printing Implementation
DESCRIPTION: Example showing how to handle local images in iOS printing by converting them to base64 format using expo-asset and expo-image-manipulator.

LANGUAGE: js
CODE:
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });
  return `
    <html>
      <img
        src="data:image/jpeg;base64,${image.base64}"
        style="width: 90vw;" />
    </html>
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}

----------------------------------------

TITLE: Initializing LogRocket in Expo App Layout
DESCRIPTION: TypeScript React code to initialize LogRocket in the app's layout file. It uses the useEffect hook to set up LogRocket with the app ID and update information from Expo Updates.

LANGUAGE: tsx
CODE:
import { useEffect } from 'react';
import * as Updates from 'expo-updates';
import LogRocket from '@logrocket/react-native';

const App = () => {
  useEffect(() => {
    LogRocket.init('<App ID>', {
      updateId: Updates.isEmbeddedLaunch ? null : Updates.updateId,
      expoChannel: Updates.channel,
    });
  }, []);
};

----------------------------------------

TITLE: Executing Async SQLite Transactions in Expo
DESCRIPTION: Example of executing SQL statements within an async transaction, including a read-only query example.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite';

const db = SQLite.openDatabase('dbName', version);

const readOnly = true;
await db.transactionAsync(async tx => {
  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', []);
  console.log('Count:', result.rows[0]['COUNT(*)']);
}, readOnly);

----------------------------------------

TITLE: Configuring Status Bar in Expo Root Layout
DESCRIPTION: Implementation of StatusBar component in the root layout file to customize the app's status bar appearance. Uses expo-status-bar library to set the status bar style to 'light'.

LANGUAGE: typescript
CODE:
import { Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';

export default function RootLayout() {
  return (
    <>
      <Stack>
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="+not-found" />
      </Stack>
      <StatusBar style="light" />
    </>
  );
}

----------------------------------------

TITLE: Configuring Multiple NPM Registries
DESCRIPTION: Advanced .npmrc configuration for using both private npm packages and a private registry with scoped packages.

LANGUAGE: ini
CODE:
//registry.npmjs.org/:_authToken=${NPM_TOKEN}\n@johndoe:registry=https://registry.npmjs.org/\nregistry=https://registry.johndoe.com/

----------------------------------------

TITLE: Basic MapView Implementation in React Native
DESCRIPTION: Simple implementation of a full-screen map view using react-native-maps. Demonstrates basic component setup with necessary styling for container and map elements.

LANGUAGE: jsx
CODE:
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <MapView style={styles.map} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
});

----------------------------------------

TITLE: Implementing Print Functionality in React Native with Expo
DESCRIPTION: A complete example showing how to implement printing capabilities using expo-print, including direct printing, PDF generation, and printer selection on iOS. The component demonstrates printing HTML content and sharing generated PDF files.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button, Platform, Text } from 'react-native';
import * as Print from 'expo-print';
import { shareAsync } from 'expo-sharing';

const html = `
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
  </head>
  <body style="text-align: center;">
    <h1 style="font-size: 50px; font-family: Helvetica Neue; font-weight: normal;">
      Hello Expo!
    </h1>
    <img
      src="https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png"
      style="width: 90vw;" />
  </body>
</html>
`;

export default function App() {
  const [selectedPrinter, setSelectedPrinter] = useState();

  const print = async () => {
    await Print.printAsync({
      html,
      printerUrl: selectedPrinter?.url,
    });
  };

  const printToFile = async () => {
    const { uri } = await Print.printToFileAsync({ html });
    console.log('File has been saved to:', uri);
    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });
  };

  const selectPrinter = async () => {
    const printer = await Print.selectPrinterAsync();
    setSelectedPrinter(printer);
  };

  return (
    <View style={styles.container}>
      <Button title="Print" onPress={print} />
      <View style={styles.spacer} />
      <Button title="Print to PDF file" onPress={printToFile} />
      {Platform.OS === 'ios' && (
        <>
          <View style={styles.spacer} />
          <Button title="Select printer" onPress={selectPrinter} />
          <View style={styles.spacer} />
          {selectedPrinter ? (
            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>
          ) : undefined}
        </>
      )}
    </View>
  );
}

----------------------------------------

TITLE: Custom App Component Configuration
DESCRIPTION: Setup for the custom App component with viewport meta tag configuration for responsive design.

LANGUAGE: jsx
CODE:
import Head from 'next/head';

export default function App({ Component, pageProps }) {
  return (
    <>
      <Head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Component {...pageProps} />
    </>
  );
}

----------------------------------------

TITLE: Basic Video Player Implementation with Play/Pause Controls
DESCRIPTION: Example of implementing a basic video player with play/pause functionality using expo-video component with custom controls.

LANGUAGE: jsx
CODE:
import { useEvent } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';
import { StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const player = useVideoPlayer(videoSource, player => {
    player.loop = true;
    player.play();
  });

  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });

  return (
    <View style={styles.contentContainer}>
      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />
      <View style={styles.controlsContainer}>
        <Button
          title={isPlaying ? 'Pause' : 'Play'}
          onPress={() => {
            if (isPlaying) {
              player.pause();
            } else {
              player.play();
            }
          }}
        />
      </View>
    </View>
  );
}

----------------------------------------

TITLE: Complete BlurView Implementation - React Native/JSX
DESCRIPTION: Comprehensive example showing BlurView implementation with different intensities and tints, including styling and layout configuration. Demonstrates creation of blur effects over a patterned background.

LANGUAGE: jsx
CODE:
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.background}>
        {[...Array(20).keys()].map(i => (
          <View
            key={`box-${i}`}
            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
          />
        ))}
      </View>
      <BlurView intensity={100} style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={80} tint="light" style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
      </BlurView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  blurContainer: {
    flex: 1,
    padding: 20,
    margin: 16,
    textAlign: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderRadius: 20,
  },
  background: {
    flex: 1,
    flexWrap: 'wrap',
    ...StyleSheet.absoluteFill,
  },
  box: {
    width: '25%',
    height: '20%',
  },
  boxEven: {
    backgroundColor: 'orangered',
  },
  boxOdd: {
    backgroundColor: 'gold',
  },
  text: {
    fontSize: 24,
    fontWeight: '600',
  },
});

----------------------------------------

TITLE: Configuring Expo Video Plugin in app.json
DESCRIPTION: Configuration options for expo-video plugin in app.json to enable background playback and picture-in-picture functionality.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-video",
        {
          "supportsBackgroundPlayback": true,
          "supportsPictureInPicture": true
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Integrating SQLite with React Hooks in Expo
DESCRIPTION: Shows how to use the useSQLiteContext() hook to access and manipulate SQLite databases within React components in an Expo application.

LANGUAGE: tsx
CODE:
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite/next';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
    async function setup() {
      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
        'SELECT sqlite_version()'
      );
      setVersion(result['sqlite_version()']);
    }
    setup();
  }, []);
  return (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>SQLite version: {version}</Text>
    </View>
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo[]>([]);

  useEffect(() => {
    async function setup() {
      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
      setTodos(result);
    }
    setup();
  }, []);

  return (
    <View style={styles.contentContainer}>
      {todos.map((todo, index) => (
        <View style={styles.todoItemContainer} key={index}>
          <Text>{`${todo.intValue} - ${todo.value}`}</Text>
        </View>
      ))}
    </View>
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
    'PRAGMA user_version'
  );
  if (currentDbVersion >= DATABASE_VERSION) {
    return;
  }
  if (currentDbVersion === 0) {
    await db.execAsync(`
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
    currentDbVersion = 1;
  }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

const styles = StyleSheet.create({
  // Your styles...
});

----------------------------------------

TITLE: Initializing React Navigation Dev Tools Plugin with Expo Router
DESCRIPTION: Demonstrates how to set up the React Navigation dev tools plugin in an Expo Router project. It requires passing the navigation container reference to the plugin hook.

LANGUAGE: jsx
CODE:
import { useEffect, useRef } from 'react';
import { useNavigationContainerRef, Slot } from 'expo-router';
import { useReactNavigationDevTools } from '@dev-plugins/react-navigation';

export default Layout() {
  const navigationRef = useNavigationContainerRef();

  useReactNavigationDevTools(navigationRef);

  return <Slot />;
}

----------------------------------------

TITLE: Writing RSC Test for LinearGradient Component
DESCRIPTION: This snippet shows an example of writing a test for a React Server Component using LinearGradient. It demonstrates the use of custom expect matchers for RSC testing.

LANGUAGE: javascript
CODE:
/// <reference types="jest-expo/rsc/expect" />

import { LinearGradient } from 'expo-linear-gradient';

it(`renders to RSC`, async () => {
  const jsx = (
    <LinearGradient
      colors={['cyan', '#ff00ff', 'rgba(0,0,0,0)', 'rgba(0,255,255,0.5)']}
      testID="gradient"
    />
  );

  await expect(jsx).toMatchFlight(`1:I["src/LinearGradient.tsx",[],"LinearGradient"]
0:["$","$L1",null,{"colors":["cyan","#ff00ff","rgba(0,0,0,0)","rgba(0,255,255,0.5)"],"testID":"gradient"},null]`);
});

----------------------------------------

TITLE: Rendering Development Mode Selection Form
DESCRIPTION: This code renders a form component for selecting the development mode. It presents options for using Expo Go or a custom development build, helping users choose their preferred development environment.

LANGUAGE: jsx
CODE:
<DevelopmentModeForm />

----------------------------------------

TITLE: Creating Apple App Site Association JSON Configuration
DESCRIPTION: Configuration file for iOS Universal Links that specifies app IDs, supported paths, and optional features like Apple Handoff and Shared Web Credentials.

LANGUAGE: json
CODE:
{
  "applinks": {
    "apps": [],
    "details": [
      {
        "appID": "QQ57RJ5UTD.com.example.myapp",
        "paths": ["/records/*"]
      }
    ]
  },
  "activitycontinuation": {
    "apps": ["<APPLE_TEAM_ID>.<BUNDLE_ID>"]
  },
  "webcredentials": {
    "apps": ["<APPLE_TEAM_ID>.<BUNDLE_ID>"]
  }
}

----------------------------------------

TITLE: Adding Web Support in expo-sqlite
DESCRIPTION: Added web support for the expo-sqlite module.

LANGUAGE: JavaScript
CODE:
// No code snippet provided in the changelog

----------------------------------------

TITLE: Implementing Search Functionality with URL Parameters
DESCRIPTION: Example of using URL parameters for search functionality with TextInput and router.setParams.

LANGUAGE: tsx
CODE:
import { useLocalSearchParams, router } from 'expo-router';
import { useState } from 'react';
import { TextInput, View } from 'react-native';

export default function Page() {
  const params = useLocalSearchParams<{ query?: string }>();
  const [search, setSearch] = useState(params.query);

  return (
    <TextInput
      value={search}
      onChangeText={search => {
        setSearch(search);
        router.setParams({ query: search });
      }}
      placeholderTextColor="#A0A0A0"
      placeholder="Search"
      style={{
        borderRadius: 12,
        backgroundColor: '#fff',
        fontSize: 24,
        color: '#000',
        margin: 12,
        padding: 16,
      }}
    />
  );
}

----------------------------------------

TITLE: Optimizing SafeAreaProvider with Initial Metrics in React Native
DESCRIPTION: This example shows how to optimize the initial render of SafeAreaProvider by providing initial window metrics.

LANGUAGE: jsx
CODE:
import { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;
}

----------------------------------------

TITLE: Enabling New Architecture in SDK 51 and below (app.json)
DESCRIPTION: Configuration using expo-build-properties plugin to enable New Architecture for Android and iOS in SDK 51 and below.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "newArchEnabled": true
          },
          "ios": {
            "newArchEnabled": true
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Basic Usage of TrackingTransparency in React Native
DESCRIPTION: Demonstrates how to use the expo-tracking-transparency module to request tracking permissions in a React Native component. It uses the requestTrackingPermissionsAsync function to ask for user permission.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await requestTrackingPermissionsAsync();
      if (status === 'granted') {
        console.log('Yay! I have user permission to track data');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Tracking Transparency Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Executing Queries within an Async Transaction
DESCRIPTION: Shows how to execute queries within an asynchronous transaction using the withTransactionAsync method.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});

----------------------------------------

TITLE: Configuring Expo Video Plugin in app.json
DESCRIPTION: Configuration options for expo-video using the built-in config plugin to enable background playback and picture-in-picture features.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-video",
        {
          "supportsBackgroundPlayback": true,
          "supportsPictureInPicture": true
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Creating Default EAS Build Configuration in JSON
DESCRIPTION: Default eas.json configuration file created by EAS CLI. Defines three build profiles: development (with development client and internal distribution), preview (with internal distribution), and production (empty configuration).

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {}
  }
}

----------------------------------------

TITLE: Manually Checking and Applying Updates in Expo
DESCRIPTION: This code snippet demonstrates how to manually check for updates, fetch them, and apply them using the expo-updates module. It includes error handling and can be used to implement custom update logic.

LANGUAGE: javascript
CODE:
import * as Updates from 'expo-updates';

try {
  const update = await Updates.checkForUpdateAsync();
  if (update.isAvailable) {
    await Updates.fetchUpdateAsync();
    // ... notify user of update ...
    await Updates.reloadAsync();
  }
} catch (e) {
  // handle or log error
}

----------------------------------------

TITLE: Configuring expo-sqlite in app.json
DESCRIPTION: Example of configuring expo-sqlite using the config plugin in the app.json file. This allows for advanced configurations like enabling FTS and using SQLCipher.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sqlite",
        {
          "enableFTS": true,
          "useSQLCipher": true,
          "android": {
            "enableFTS": false,
            "useSQLCipher": false
          },
          "ios": {
            "customBuildFlags": ["-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1"]
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing TypeScript Interface for Theme Module
DESCRIPTION: Defines the TypeScript interface for the theme module, including event listeners and type-safe theme values.

LANGUAGE: typescript
CODE:
import { EventSubscription } from 'expo-modules-core';

import ExpoSettingsModule from './ExpoSettingsModule';

export type Theme = 'light' | 'dark' | 'system';

export type ThemeChangeEvent = {
  theme: Theme;
};

export function addThemeListener(listener: (event: ThemeChangeEvent) => void): EventSubscription {
  return ExpoSettingsModule.addListener('onChangeTheme', listener);
}

export function getTheme(): Theme {
  return ExpoSettingsModule.getTheme();
}

export function setTheme(theme: Theme): void {
  return ExpoSettingsModule.setTheme(theme);
}

----------------------------------------

TITLE: Configuring Expo Video Plugin in app.json
DESCRIPTION: Configuration options for expo-video using the built-in config plugin to enable background playback and picture-in-picture features.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-video",
        {
          "supportsBackgroundPlayback": true,
          "supportsPictureInPicture": true
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Implementing Background Tasks in React Native with expo-background-task
DESCRIPTION: A complete example demonstrating how to register, unregister, and manage background tasks using expo-background-task in a React Native application.

LANGUAGE: typescript
CODE:
import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

const BACKGROUND_TASK_IDENTIFIER = 'background-task';

TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {
  try {
    const now = Date.now();
    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);
  } catch (error) {
    console.error('Failed to execute the background task:', error);
    return BackgroundTask.BackgroundTaskResult.Failed;
  }
  return BackgroundTask.BackgroundTaskResult.Success;
});

async function registerBackgroundTaskAsync() {
  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

async function unregisterBackgroundTaskAsync() {
  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

export default function BackgroundTaskScreen() {
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundTask.getStatusAsync();
    setStatus(status);
  };

  const toggle = async () => {
    if (isRegistered) {
      await registerBackgroundTaskAsync();
    } else {
      await unregisterBackgroundTaskAsync();
    }
    setIsRegistered(!isRegistered);
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background Task Service Availability:{' '}
          <Text style={styles.boldText}>
            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}
          </Text>
        </Text>
      </View>
      <Button
        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}
        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}
        onPress={toggle}
      />
      <Button title="Check Background Task Status" onPress={checkStatusAsync} />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: Implementing Root Stack Navigation Layout
DESCRIPTION: Creates the root Stack navigator layout that wraps all other navigation components.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default Stack;

----------------------------------------

TITLE: Basic Print Implementation in React Native with Expo
DESCRIPTION: A complete React Native component demonstrating core printing functionality including direct printing, PDF generation, and printer selection (iOS only). Uses expo-print and expo-sharing packages.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button, Platform, Text } from 'react-native';
import * as Print from 'expo-print';
import { shareAsync } from 'expo-sharing';

const html = `
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
  </head>
  <body style="text-align: center;">
    <h1 style="font-size: 50px; font-family: Helvetica Neue; font-weight: normal;">
      Hello Expo!
    </h1>
    <img
      src="https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png"
      style="width: 90vw;" />
  </body>
</html>
`;

export default function App() {
  const [selectedPrinter, setSelectedPrinter] = useState();

  const print = async () => {
    await Print.printAsync({
      html,
      printerUrl: selectedPrinter?.url,
    });
  };

  const printToFile = async () => {
    const { uri } = await Print.printToFileAsync({ html });
    console.log('File has been saved to:', uri);
    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });
  };

  const selectPrinter = async () => {
    const printer = await Print.selectPrinterAsync();
    setSelectedPrinter(printer);
  };

  return (
    <View style={styles.container}>
      <Button title="Print" onPress={print} />
      <View style={styles.spacer} />
      <Button title="Print to PDF file" onPress={printToFile} />
      {Platform.OS === 'ios' && (
        <>
          <View style={styles.spacer} />
          <Button title="Select printer" onPress={selectPrinter} />
          <View style={styles.spacer} />
          {selectedPrinter ? (
            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>
          ) : undefined}
        </>
      )}
    </View>
  );
}

----------------------------------------

TITLE: Handling Video Component Reference in React Native
DESCRIPTION: Example of obtaining a reference to the Video component for playback control in React Native.

LANGUAGE: javascript
CODE:
_handleVideoRef = component => {
  const playbackObject = component;
  ...
}

render() {
  return (
      <Video
        ref={this._handleVideoRef}
      />
  )
}

----------------------------------------

TITLE: Express Server for File Upload Handling
DESCRIPTION: Node.js Express server implementation for handling both binary and multipart file uploads from expo-file-system clients.

LANGUAGE: javascript
CODE:
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});

----------------------------------------

TITLE: Updating Metro Configuration for Sentry in Expo
DESCRIPTION: Modify the metro.config.js file to enable Sentry's debug ID injection into source maps. This is crucial for associating source maps with releases.

LANGUAGE: javascript
CODE:
const { getSentryExpoConfig } = require('@sentry/react-native/metro');

const config = getSentryExpoConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Rendering Platform and Device Selection Form
DESCRIPTION: This code renders a form component for selecting the development platform and device. It allows users to choose between different platforms and device options for Expo development.

LANGUAGE: jsx
CODE:
<PlatformAndDeviceForm />

----------------------------------------

TITLE: Configuring Location Plugin in Expo app.json
DESCRIPTION: Example configuration for expo-location plugin that sets location permission messages and enables background location features.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Using KeepAwake Functions in React Native
DESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to control screen sleep behavior imperatively in a React Native component. The functions are called in response to button presses.

LANGUAGE: jsx
CODE:
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Button onPress={this._activate} title="Activate" />
        <Button onPress={this._deactivate} title="Deactivate" />
      </View>
    );
  }

  _activate = () => {
    activateKeepAwake();
    alert('Activated!');
  };

  _deactivate = () => {
    deactivateKeepAwake();
    alert('Deactivated!');
  };
}

----------------------------------------

TITLE: Using KeepAwake Functions in React Native
DESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to control screen sleep behavior imperatively in a React Native component. The functions are called in response to button presses.

LANGUAGE: jsx
CODE:
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Button onPress={this._activate} title="Activate" />
        <Button onPress={this._deactivate} title="Deactivate" />
      </View>
    );
  }

  _activate = () => {
    activateKeepAwake();
    alert('Activated!');
  };

  _deactivate = () => {
    deactivateKeepAwake();
    alert('Deactivated!');
  };
}

----------------------------------------

TITLE: Executing Direct SQLite Statements
DESCRIPTION: Example of executing SQL statements directly without a transaction context, useful for operations like setting PRAGMA values.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite/legacy';

const db = SQLite.openDatabase('dbName', version);

await db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);
console.log('Foreign keys turned on');

----------------------------------------

TITLE: Using useSafeAreaInsets Hook
DESCRIPTION: Example of using the useSafeAreaInsets hook to manually handle safe area insets

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}

----------------------------------------

TITLE: Implementing Playback Status Update Handler
DESCRIPTION: Example demonstrating how to handle playback status updates for both Audio and Video components.

LANGUAGE: javascript
CODE:
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
    if (playbackStatus.error) {
      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
    }
  } else {
    if (playbackStatus.isPlaying) {
    } else {
    }
    if (playbackStatus.isBuffering) {
    }
    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
    }
  }
};

playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);

----------------------------------------

TITLE: Implementing Mock for ExpoClipboard in TypeScript
DESCRIPTION: This snippet demonstrates how to create a mock implementation for the ExpoClipboard native module. It exports an async function that always returns false, simulating the behavior of the hasStringAsync method.

LANGUAGE: typescript
CODE:
export async function hasStringAsync(): Promise<boolean> {
  return false;
}

----------------------------------------

TITLE: Rendering Inline HTML with React Native WebView
DESCRIPTION: This example shows how to use the WebView component to render inline HTML content in a React Native application. It sets the originWhitelist to allow all origins and includes styling to adjust for the status bar height.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Configuring Metro for Firebase JS SDK in Expo
DESCRIPTION: This snippet shows how to configure Metro bundler in an Expo project to support Firebase JS SDK version 9.7.x and above. It adds the 'cjs' extension to the resolver's sourceExts array.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('@expo/metro-config');

const defaultConfig = getDefaultConfig(__dirname);
defaultConfig.resolver.sourceExts.push('cjs');

module.exports = defaultConfig;

----------------------------------------

TITLE: Enhancing Button Component with Themes and Icons
DESCRIPTION: This snippet shows how to enhance the Button component with a primary theme and an icon. It uses conditional rendering and the FontAwesome icon library from Expo.

LANGUAGE: typescript
CODE:
import { StyleSheet, View, Pressable, Text } from 'react-native';
import FontAwesome from '@expo/vector-icons/FontAwesome';

type Props = {
  label: string;
  theme?: 'primary';
};

export default function Button({ label, theme }: Props) {
  if (theme === 'primary') {
    return (
      <View
        style={[
          styles.buttonContainer,
          { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },
        ]}>
        <Pressable
          style={[styles.button, { backgroundColor: '#fff' }]}
          onPress={() => alert('You pressed a button.')}>
          <FontAwesome name="picture-o" size={18} color="#25292e" style={styles.buttonIcon} />
          <Text style={[styles.buttonLabel, { color: '#25292e' }]}>{label}</Text>
        </Pressable>
      </View>
    );
  }

  return (
    <View style={styles.buttonContainer}>
      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>
        <Text style={styles.buttonLabel}>{label}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  buttonContainer: {
    width: 320,
    height: 68,
    marginHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 3,
  },
  button: {
    borderRadius: 10,
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonIcon: {
    paddingRight: 8,
  },
  buttonLabel: {
    color: '#fff',
    fontSize: 16,
  },
});

----------------------------------------

TITLE: Configuring URI Scheme in app.json
DESCRIPTION: JSON configuration for setting up deep linking scheme in standalone Expo apps. This enables the app to handle authentication redirects.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mycoolredirect"
  }
}

----------------------------------------

TITLE: Implementing Pedometer Functionality in Expo React Native
DESCRIPTION: This code snippet demonstrates how to use the Pedometer sensor in an Expo React Native application. It checks for pedometer availability, retrieves step count for the past 24 hours, and sets up a subscription to watch for step count updates.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
    const isAvailable = await Pedometer.isAvailableAsync();
    setIsPedometerAvailable(String(isAvailable));

    if (isAvailable) {
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - 1);

      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
      if (pastStepCountResult) {
        setPastStepCount(pastStepCountResult.steps);
      }

      return Pedometer.watchStepCount(result => {
        setCurrentStepCount(result.steps);
      });
    }
  };

  useEffect(() => {
    const subscription = subscribe();
    return () => subscription && subscription.remove();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
      <Text>Walk! And watch this go up: {currentStepCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Creating a New Expo Project with npm
DESCRIPTION: Command to create a new Expo project using npm package manager.

LANGUAGE: bash
CODE:
$ npx create-expo-app@latest

----------------------------------------

TITLE: Extending Babel Transformer in Metro Config
DESCRIPTION: Demonstrates how to extend the Babel transformer in the Metro configuration for custom transformations.

LANGUAGE: javascript
CODE:
const upstreamTransformer = require('@expo/metro-config/babel-transformer');

module.exports.transform = async ({ src, filename, options }) => {
  // Do something custom for SVG files...
  if (filename.endsWith('.svg')) {
    src = '...';
  }
  // Pass the source through the upstream Expo transformer.
  return upstreamTransformer.transform({ src, filename, options });
};

----------------------------------------

TITLE: Using Tailwind with React Native Web Elements
DESCRIPTION: Example of using Tailwind CSS classes with React Native web elements using the { $$css: true } syntax.

LANGUAGE: typescript
CODE:
import { View, Text } from 'react-native';

export default function Index() {
  return (
    <View style={{ $$css: true, _: 'bg-slate-100 rounded-xl' }}>
      <Text style={{ $$css: true, _: 'text-lg font-medium' }}>Welcome to Tailwind</Text>
    </View>
  );
}

----------------------------------------

TITLE: Configuring CSS Support in Metro
DESCRIPTION: Shows how to disable CSS support in the Metro config file.

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});

----------------------------------------

TITLE: Installing Development Build Using EAS CLI
DESCRIPTION: Command to download and install a development build using EAS CLI. Requires user to be signed into the associated Expo account.

LANGUAGE: bash
CODE:
$ eas build:run --profile development

----------------------------------------

TITLE: Configuring Root Layout with SessionProvider in Expo Router
DESCRIPTION: This code sets up the root layout for an Expo Router app, wrapping the entire application with a SessionProvider to provide authentication context.

LANGUAGE: tsx
CODE:
import { Slot } from 'expo-router';
import { SessionProvider } from '../ctx';

export default function Root() {
  // Set up the auth context and render our layout inside of it.
  return (
    <SessionProvider>
      <Slot />
    </SessionProvider>
  );
}

----------------------------------------

TITLE: Configuring ImagePicker Plugin in Expo app.json
DESCRIPTION: Configuration example for the expo-image-picker plugin showing how to customize the photos permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-image-picker",
        {
          "photosPermission": "The app accesses your photos to let you share them with your friends."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Sharing a Database between Apps/Extensions on iOS
DESCRIPTION: Demonstrates how to share a database with other apps/extensions in the same App Group on iOS using shared containers.

LANGUAGE: typescript
CODE:
import { SQLiteProvider, defaultDatabaseDirectory } from 'expo-sqlite';
import { Paths } from 'expo-file-system/next';
import { useMemo } from 'react';
import { Platform, View } from 'react-native';

export default function App() {
  const dbDirectory = useMemo(() => {
    if (Platform.OS === 'ios') {
      return Object.values(Paths.appleSharedContainers)?.[0]?.uri;
      // or `Paths.appleSharedContainers['group.com.myapp']?.uri` to choose specific container
    }
    return defaultDatabaseDirectory;
  }, []);

  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" directory={dbDirectory}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

----------------------------------------

TITLE: Clearing Caches for Expo CLI with npm
DESCRIPTION: A set of commands to clear node_modules, npm cache, Watchman cache, and Metro bundler cache for an Expo project using npm. It includes reinstalling dependencies and restarting the Expo development server with a cleared cache.

LANGUAGE: bash
CODE:
$ rm -rf node_modules

$ npm cache clean --force

$ npm install

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ npx expo start --clear

----------------------------------------

TITLE: Configuring EAS Build Production Profile in eas.json
DESCRIPTION: Minimal configuration example for setting up a production build profile in eas.json configuration file. This is automatically created during the first build setup.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {}
  }
}

----------------------------------------

TITLE: Configuring RSC in Expo App Config
DESCRIPTION: JSON configuration to enable React Server Components experimental features in app.json

LANGUAGE: json
CODE:
{
  "expo": {
    "experiments": {
      "reactServerFunctions": true
    }
  }
}

----------------------------------------

TITLE: Initializing Expo WebView Module in Swift
DESCRIPTION: Defines the basic structure of the ExpoWebViewModule in Swift for iOS, including the module definition and view setup.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoWebViewModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoWebView")

    View(ExpoWebView.self) {}
  }
}

----------------------------------------

TITLE: Configuring Background Audio for iOS in Expo app.json
DESCRIPTION: This JSON snippet shows how to configure the app.json file to enable background audio playback on iOS in an Expo standalone app.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Configuring expo-build-properties in app.config.js
DESCRIPTION: Example of how to configure the expo-build-properties plugin in the app.config.js file. It shows the same configuration as the JSON example, but in JavaScript format.

LANGUAGE: javascript
CODE:
export default {
  expo: {
    plugins: [
      [
        'expo-build-properties',
        {
          android: {
            compileSdkVersion: 35,
            targetSdkVersion: 35,
            buildToolsVersion: '35.0.0',
          },
          ios: {
            deploymentTarget: '15.1',
          },
        },
      ],
    ],
  },
};

----------------------------------------

TITLE: Creating a Reusable Button Component in React Native
DESCRIPTION: This code creates a reusable Button component using React Native's Pressable. It includes styling and a basic onPress handler that displays an alert.

LANGUAGE: typescript
CODE:
import { StyleSheet, View, Pressable, Text } from 'react-native';

type Props = {
  label: string;
};

export default function Button({ label }: Props) {
  return (
    <View style={styles.buttonContainer}>
      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>
        <Text style={styles.buttonLabel}>{label}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  buttonContainer: {
    width: 320,
    height: 68,
    marginHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 3,
  },
  button: {
    borderRadius: 10,
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonLabel: {
    color: '#fff',
    fontSize: 16,
  },
});

----------------------------------------

TITLE: Configuring Bitbucket Pipelines
DESCRIPTION: Bitbucket Pipelines configuration for EAS builds using Node.js Alpine image with npm caching.

LANGUAGE: yaml
CODE:
image: node:alpine

definitions:
  caches:
    npm: ~/.npm

pipelines:
  default:
    - step:
        name: Build app
        deployment: test
        caches:
          - npm
        script:
          - apk add --no-cache bash
          - npm ci
          - npx eas-cli build --platform all --non-interactive --no-wait

----------------------------------------

TITLE: Opening Android Play Store for Reviews using Linking
DESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app using the Linking API. It provides two methods: opening in a browser (which redirects to the Play Store on Android) and opening the Play Store directly.

LANGUAGE: typescript
CODE:
const androidPackageName = 'host.exp.exponent';
// Open the Android Play Store in the browser -> redirects to Play Store on Android
Linking.openURL(
  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`
);
// Open the Android Play Store directly
Linking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);

----------------------------------------

TITLE: Using expo-location to Get Current Position
DESCRIPTION: React component demonstrating how to request location permissions and get the current position using expo-location.

LANGUAGE: typescript
CODE:
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
import * as Device from 'expo-device';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});

----------------------------------------

TITLE: Basic Barometer Implementation in React Native
DESCRIPTION: A complete React Native component demonstrating basic barometer sensor usage. Shows how to subscribe to barometer readings, display pressure and relative altitude data, and toggle the sensor listener. Uses useState hooks for state management.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});

----------------------------------------

TITLE: Dynamic Stack Screen Configuration with Navigation Hook
DESCRIPTION: Demonstrates dynamic screen configuration using the useNavigation hook to hide the header.

LANGUAGE: tsx
CODE:
import { Stack, useNavigation } from 'expo-router';
import { Text, View } from 'react-native';
import { useEffect } from 'react';

export default function Home() {
  const navigation = useNavigation();

  useEffect(() => {
    navigation.setOptions({ headerShown: false });
  }, [navigation]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
    </View>
  );
}

----------------------------------------

TITLE: GLView Usage in Reanimated Worklet
DESCRIPTION: Shows how to use GLView within a Reanimated worklet. It demonstrates passing the GL context ID to the worklet and recreating the GL object inside the worklet.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}

----------------------------------------

TITLE: Rendering Local Image in React Native
DESCRIPTION: This snippet demonstrates how to render a local image called 'example.png' using the Image component in React Native. The image is imported using the require statement.

LANGUAGE: typescript
CODE:
<Image source={require('./assets/images/example.png')} />

----------------------------------------

TITLE: Setting Custom Notification Sounds
DESCRIPTION: This snippet shows how to set up and use custom notification sounds for both Android and iOS.

LANGUAGE: typescript
CODE:
await Notifications.setNotificationChannelAsync('new_emails', {
  name: 'E-mail notifications',
  importance: Notifications.AndroidImportance.HIGH,
  sound: 'mySoundFile.wav', // Provide ONLY the base filename
});

await Notifications.scheduleNotificationAsync({
  content: {
    title: "You've got mail! 📬",
    sound: 'mySoundFile.wav', // Provide ONLY the base filename
  },
  trigger: {
    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
    seconds: 2,
    channelId: 'new_emails',
  },
});

----------------------------------------

TITLE: Opening Android Play Store for Reviews using Linking
DESCRIPTION: This snippet demonstrates how to open the Android Play Store to the reviews section for a specific app using the Linking API. It provides two methods: opening in a browser (which redirects to the Play Store on Android) and opening the Play Store directly.

LANGUAGE: typescript
CODE:
const androidPackageName = 'host.exp.exponent';
// Open the Android Play Store in the browser -> redirects to Play Store on Android
Linking.openURL(
  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`
);
// Open the Android Play Store directly
Linking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);

----------------------------------------

TITLE: Implementing StatusBar with Light Text in React Native
DESCRIPTION: Example demonstrating how to use the StatusBar component from expo-status-bar to create a dark background with light status bar text. The code shows a basic app structure with styled container and text components.

LANGUAGE: jsx
CODE:
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Notice that the status bar has light text!</Text>
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});

----------------------------------------

TITLE: Configuring EAS JSON for iOS Simulator Build
DESCRIPTION: Configuration in eas.json to enable building for iOS simulators. Sets the ios.simulator flag to true in the preview profile while keeping a separate production profile.

LANGUAGE: json
CODE:
{
  "build": {
    "preview": {
      "ios": {
        "simulator": true
      }
    },
    "production": {}
  }
}

----------------------------------------

TITLE: Rendering DateTimePicker Installation Instructions in React Native
DESCRIPTION: This snippet demonstrates the use of the APIInstallSection component to provide installation instructions for the DateTimePicker. It includes a link to the GitHub repository's getting started guide.

LANGUAGE: jsx
CODE:
<APIInstallSection href="https://github.com/react-native-datetimepicker/datetimepicker#getting-started" />

----------------------------------------

TITLE: Using Tailwind with DOM Components in Expo
DESCRIPTION: Example of using Tailwind CSS with DOM components in Expo, which allows rendering Tailwind web code in a WebView on native platforms.

LANGUAGE: typescript
CODE:
'use dom';

import '../global.css';

export default function Page() {
  return (
    <div className="bg-slate-100 rounded-xl">
      <p className="text-lg font-medium">Welcome to Tailwind</p>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Platform-Specific Pre-Install Hook with Shell Script
DESCRIPTION: This example shows how to create a platform-specific pre-install hook using a shell script. It demonstrates checking the EAS_BUILD_PLATFORM environment variable to execute different commands for Android and iOS builds.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "scripts": {
    "eas-build-pre-install": "./pre-install",
    "start": "expo start"
    /* @hide ... */ /* @end */
  },
  "dependencies": {
    /* @hide ... */
    /* @end */
  }
}

LANGUAGE: bash
CODE:
#!/bin/bash

# This is a file called "pre-install" in the root of the project

if [[ "$EAS_BUILD_PLATFORM" == "android" ]]; then
  echo "Run commands for Android builds here"
elif [[ "$EAS_BUILD_PLATFORM" == "ios" ]]; then
  echo "Run commands for iOS builds here"
fi

----------------------------------------

TITLE: Comparing WebBrowser and Linking for URL Opening
DESCRIPTION: This example compares opening a URL using the system browser (Linking) and an in-app browser (WebBrowser) in an Expo app.

LANGUAGE: typescript
CODE:
import { Button, View, StyleSheet } from 'react-native';
import * as Linking from 'expo-linking';
import * as WebBrowser from 'expo-web-browser';

export default function Home() {
  return (
    <View style={styles.container}>
      <Button
        title="Open URL with the system browser"
        onPress={() => Linking.openURL('https://expo.dev')}
        style={styles.button}
      />
      <Button
        title="Open URL with an in-app browser"
        onPress={() => WebBrowser.openBrowserAsync('https://expo.dev')}
        style={styles.button}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    marginVertical: 10,
  },
});

----------------------------------------

TITLE: Deleting a Branch with EAS CLI
DESCRIPTION: This command deletes a specified branch in the EAS project.

LANGUAGE: bash
CODE:
$ eas branch:delete [branch-name]

----------------------------------------

TITLE: Relative Path Navigation Component
DESCRIPTION: Implementation of a button component using useSegments for relative path navigation

LANGUAGE: typescript
CODE:
import { Link, useSegments } from 'expo-router';

export function Button() {
  const [
    first,
  ] = useSegments();

  return <Link href={`/${first}/profile`}>Push profile</Link>;
}

----------------------------------------

TITLE: Theme Configuration in Expo Router
DESCRIPTION: Example showing how to configure navigation themes in Expo Router using ThemeProvider

LANGUAGE: typescript
CODE:
import { ThemeProvider, DarkTheme, DefaultTheme, useTheme } from '@react-navigation/native';
import { Slot } from 'expo-router';

export default function RootLayout() {
  return (
    <ThemeProvider value={DarkTheme}>
      <Slot />
    </ThemeProvider>
  );
}

----------------------------------------

TITLE: Environment-based Expo Configuration
DESCRIPTION: Demonstrates switching configuration based on environment variables for different deployment scenarios.

LANGUAGE: javascript
CODE:
module.exports = () => {
  if (process.env.MY_ENVIRONMENT === 'production') {
    return {
      /* your production config */
    };
  } else {
    return {
      /* your development config */
    };
  }
};

----------------------------------------

TITLE: Capturing a FullHD Image with captureRef in React Native
DESCRIPTION: This example demonstrates how to use captureRef to capture a 1080x1080 image, taking into account the device's pixel ratio. It calculates the correct dimensions and uses the captureRef function with specific options.

LANGUAGE: javascript
CODE:
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});

----------------------------------------

TITLE: Rendering SF Symbols in React Native with expo-symbols
DESCRIPTION: This snippet demonstrates how to use the SymbolView component from expo-symbols to display an SF Symbol in a React Native app. It shows the setup of a basic App component with a single symbol rendered in the center of the screen.

LANGUAGE: jsx
CODE:
import { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SymbolView name="airpods.chargingcase" style={styles.symbol} type="hierarchical" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  symbol: {
    width: 35,
    height: 35,
    margin: 5,
  },
});

----------------------------------------

TITLE: Setting Status Bar Style in React Component
DESCRIPTION: This snippet demonstrates how to use the StatusBar component from expo-status-bar to set the status bar style to 'light' for better contrast on dark backgrounds.

LANGUAGE: jsx
CODE:
import { StatusBar } from 'expo-status-bar';

export default function Playlists() {
  return (
    <>
      {/* @hide ...*/} {/* @end */}
      {/* Use light text instead of dark text in the status bar to provide more contrast with a dark background. */}
      <StatusBar style="light" />
    </>
  );
}

----------------------------------------

TITLE: Configuring Apple Sign In in Expo Config
DESCRIPTION: JSON configuration to enable Sign In with Apple capability in an Expo app's app.json file.

LANGUAGE: json
CODE:
{
  "ios": {
    "usesAppleSignIn": true
  }
}

----------------------------------------

TITLE: Present Simple Notification
DESCRIPTION: Example showing how to present a basic notification to the user by setting up a notification handler and scheduling a notification.

LANGUAGE: typescript
CODE:
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

Notifications.scheduleNotificationAsync({
  content: {
    title: 'Look at that notification',
    body: "I'm so proud of myself!",
  },
  trigger: null,
});

----------------------------------------

TITLE: Importing Video Component from expo-av
DESCRIPTION: This snippet shows how to import the Video component from the expo-av package.

LANGUAGE: javascript
CODE:
import { Video } from 'expo-av';

----------------------------------------

TITLE: Setting Global npm Registry for iOS Builds
DESCRIPTION: This snippet demonstrates the global npm configuration in the ~/.npmrc file on iOS build servers. It sets the npm registry to a specific IP address and port.

LANGUAGE: ini
CODE:
registry=http://10.94.183.70:4873

----------------------------------------

TITLE: Recording Sounds with expo-audio in React Native
DESCRIPTION: Shows how to use the useAudioRecorder hook to record audio in a React Native application, including requesting microphone permissions.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioRecorder, RecordingOptions, AudioModule, RecordingPresets } from 'expo-audio';

export default function App() {
  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);

  const record = async () => {
    await audioRecorder.prepareToRecordAsync();
    audioRecorder.record();
  };

  const stopRecording = async () => {
    // The recording will be available on `audioRecorder.uri`.
    await audioRecorder.stop();
  };

  useEffect(() => {
    (async () => {
      const status = await AudioModule.requestRecordingPermissionsAsync();
      if (!status.granted) {
        Alert.alert('Permission to access microphone was denied');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Button
        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}
        onPress={audioRecorder.isRecording ? stopRecording : record}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Importing DeviceMotion from expo-sensors
DESCRIPTION: This code snippet demonstrates how to import the DeviceMotion module from the expo-sensors package in a JavaScript or TypeScript file.

LANGUAGE: javascript
CODE:
import { DeviceMotion } from 'expo-sensors';

----------------------------------------

TITLE: Configuring Jest for RSC Testing in Expo
DESCRIPTION: This snippet shows how to create a Jest configuration file for testing React Server Components in Expo. It uses the jest-expo/rsc/jest-preset.

LANGUAGE: javascript
CODE:
module.exports = require('jest-expo/rsc/jest-preset');

----------------------------------------

TITLE: Enabling CSS Support in Metro Config
DESCRIPTION: Ensure CSS support is not disabled in your metro.config.js when using Tailwind CSS.

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  isCSSEnabled: true,
});

----------------------------------------

TITLE: Running EAS Build with Configured .easignore in Terminal
DESCRIPTION: This command triggers a new EAS build for iOS using the development profile after configuring the .easignore file. It demonstrates how to use the EAS CLI to start a build with the newly configured ignore rules.

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile development

----------------------------------------

TITLE: Configuring HTTP Method-Specific Redirects in Expo Router (JSON)
DESCRIPTION: This snippet shows how to configure redirects for specific HTTP methods in the app.json file. In this case, it sets up a redirect only for POST requests.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-router",
      "redirects": [{
        "source": "/redirect/[slug]",
        "destination": "/target/[slug]"
        "methods": ["POST"]
      }]
    ]
  ]
}

----------------------------------------

TITLE: Implementing Asset Preloading in Expo React Native App
DESCRIPTION: Complete example of implementing asset preloading in an Expo app, including image caching, font loading, and splash screen management using hooks.

LANGUAGE: jsx
CODE:
import React, { useState, useEffect } from 'react';
import { View, Text, Image, StyleSheet } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';
import { Asset } from 'expo-asset';
import FontAwesome from '@expo/vector-icons/FontAwesome';

function cacheImages(images) {
  return images.map(image => {
    if (typeof image === 'string') {
      return Image.prefetch(image);
    } else {
      return Asset.fromModule(image).downloadAsync();
    }
  });
}

function cacheFonts(fonts) {
  return fonts.map(font => Font.loadAsync(font));
}

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  // Load any resources or data that you need before rendering the app
  useEffect(() => {
    async function loadResourcesAndDataAsync() {
      try {
        SplashScreen.preventAutoHideAsync();

        const imageAssets = cacheImages([
          'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
          require('./assets/images/circle.jpg'),
        ]);

        const fontAssets = cacheFonts([FontAwesome.font]);

        await Promise.all([...imageAssets, ...fontAssets]);
      } catch (e) {
        // You might want to provide this error information to an error reporting service
        console.warn(e);
      } finally {
        setAppIsReady(true);
        SplashScreen.hideAsync();
      }
    }

    loadResourcesAndDataAsync();
  }, []);

  if (!appIsReady) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text>Hello world, this is my app.</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Configuring Background Audio for iOS in Expo app.json
DESCRIPTION: This JSON snippet demonstrates how to configure an Expo app for background audio playback on iOS by adding the necessary UIBackgroundModes to the app.json configuration.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Basic Image Component Usage in React Native
DESCRIPTION: Demonstrates how to implement the expo-image component with BlurHash placeholder, content fitting, and transition effects

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});

----------------------------------------

TITLE: Configuring Typed Routes in app.json
DESCRIPTION: Configuration setup to enable typed routes experiment in Expo application

LANGUAGE: json
CODE:
{
  "expo": {
    "experiments": {
      "typedRoutes": true
    }
  }
}

----------------------------------------

TITLE: Creating a New Expo Module with Yarn
DESCRIPTION: This command initializes a new Expo module project using the create-expo-module tool. It sets up scaffolding for iOS, Android, and TypeScript, along with an example project for interacting with the module.

LANGUAGE: bash
CODE:
yarn create expo-module

----------------------------------------

TITLE: Implementing ErrorBoundary in Expo Router (TSX)
DESCRIPTION: This code demonstrates how to implement an ErrorBoundary component in Expo Router. It exports an ErrorBoundary function that receives error and retry props, allowing for custom error handling and retry functionality.

LANGUAGE: tsx
CODE:
import { View, Text } from 'react-native';
import { type ErrorBoundaryProps } from 'expo-router';

export function ErrorBoundary({ error, retry }: ErrorBoundaryProps) {
  return (
    <View style={{ flex: 1, backgroundColor: "red" }}>
      <Text>{error.message}</Text>
      <Text onPress={retry}>Try Again?</Text>
    </View>
  );
}

export default function Page() { ... }

----------------------------------------

TITLE: Using Prepared Statements with expo-sqlite in TypeScript
DESCRIPTION: Shows how to use prepared statements for efficient query execution, including creating, executing, and finalizing statements.

LANGUAGE: typescript
CODE:
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
    $intValue: 100,
  });

  // `getFirstAsync()` is useful when you want to get a single row from the database.
  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.
  await result.resetAsync();

  // `getAllAsync()` is useful when you want to get all results as an array of objects.
  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.
  await result.resetAsync();

  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.
  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}

----------------------------------------

TITLE: Configuring Android Submission Profile in eas.json
DESCRIPTION: Set up a submission profile in eas.json that includes the path to the Google Service Account Key for Android app submissions.

LANGUAGE: json
CODE:
{
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "../path/to/api-xxx-yyy-zzz.json"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Android Gradle Properties for Release Build
DESCRIPTION: Configuration variables for the Android keystore settings in gradle.properties file. Includes upload store file path, key alias, and passwords for app signing.

LANGUAGE: ruby
CODE:
MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore     # Path to the "keystore.jks" file
MYAPP_UPLOAD_KEY_ALIAS=my-key-alias                # Replace with value of the `keystore.keyAlias` field in the credentials.json file
MYAPP_UPLOAD_STORE_PASSWORD=*****                  # Replace with value of the `keystore.password` field in the credentials.json file
MYAPP_UPLOAD_KEY_PASSWORD=*****                    # Replace with value of the `keystore.keyPassword` field in the credentials.json file

----------------------------------------

TITLE: EAS Build Configuration for TV
DESCRIPTION: EAS build profile configuration supporting both TV and phone targets using environment variables.

LANGUAGE: json
CODE:
{
  "cli": {
    "version": ">= 5.2.0"
  },
  "build": {
    "base": {
      "distribution": "internal",
      "ios": {
        "simulator": true
      },
      "android": {
        "buildType": "apk",
        "withoutCredentials": true
      },
      "channel": "base"
    },
    "development": {
      "extends": "base",
      "android": {
        "gradleCommand": ":app:assembleDebug"
      },
      "ios": {
        "buildConfiguration": "Debug"
      },
      "channel": "development"
    },
    "development_tv": {
      "extends": "development",
      "env": {
        "EXPO_TV": "1"
      },
      "channel": "development"
    },
    "preview": {
      "extends": "base",
      "channel": "preview"
    },
    "preview_tv": {
      "extends": "preview",
      "env": {
        "EXPO_TV": "1"
      },
      "channel": "preview"
    }
  },
  "submit": {}
}

----------------------------------------

TITLE: Defining Manifest Extensions in TypeScript
DESCRIPTION: TypeScript definitions for ManifestExtensions and ExpoAssetHeaderDictionary types. These types are used to specify additional headers for asset requests in the Expo Updates v0 protocol.

LANGUAGE: typescript
CODE:
type ManifestExtensions = {
  assetRequestHeaders: ExpoAssetHeaderDictionary;
  ...
}

type ExpoAssetHeaderDictionary = {
  [assetKey: string]: {
    [headerName: string]: string,
  };
}

----------------------------------------

TITLE: VideoThumbnails Import Statement
DESCRIPTION: Shows how to import the VideoThumbnails module from the expo-video-thumbnails package.

LANGUAGE: js
CODE:
import * as VideoThumbnails from 'expo-video-thumbnails';

----------------------------------------

TITLE: Implementing Universal Text Component with React Native Web
DESCRIPTION: Example of using React Native's Text component for cross-platform text rendering using React Native Web. This approach enables code reuse across web and native platforms.

LANGUAGE: jsx
CODE:
import { Text } from 'react-native';

export default function Page() {
  return <Text>Home page</Text>;
}

----------------------------------------

TITLE: Implementing Native Deep Link Redirection in Expo Router
DESCRIPTION: Example of redirectSystemPath implementation in +native-intent.tsx to handle incoming native deep links, including third-party URL processing and error handling.

LANGUAGE: typescript
CODE:
import ThirdPartyService from 'third-party-sdk';

export function redirectSystemPath({ path, initial }) {
  try {
    if (initial) {
      const url = new URL(path, 'myapp://app.home');
      if (url.hostname === '<third-party-provider-hostname>') {
        return ThirdPartyService.processReferringUrl(url).catch(() => {
          return '/unexpected-error';
        });
      }
      return path;
    }
    return path;
  } catch {
    return '/unexpected-error';
  }
}

----------------------------------------

TITLE: Configuring Expo AV Plugin in app.json
DESCRIPTION: Configuration example for the expo-av plugin in app.json to set microphone permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-av",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Creating Global CSS for Tailwind
DESCRIPTION: Create a global.css file in the root of your project and add directives for each of Tailwind's layers.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------

TITLE: Configuring Favicon in Expo app.json
DESCRIPTION: Specifies the favicon for the web version of an Expo app in the app.json configuration file.

LANGUAGE: json
CODE:
{
  "web": {
    "favicon": "./assets/favicon.png"
  }
}

----------------------------------------

TITLE: Creating Dynamic Configuration with app.config.js in Expo
DESCRIPTION: This code creates a dynamic configuration file app.config.js that extends the static app.json configuration, allowing for environment-specific app variants.

LANGUAGE: javascript
CODE:
export default ({ config }) => ({
  ...config,
});

----------------------------------------

TITLE: Installing Expo SDK Packages with npx
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages using the npx expo install command.

LANGUAGE: bash
CODE:
$ npx expo install expo-camera expo-contacts expo-sensors

----------------------------------------

TITLE: Recording Sounds with expo-av in React Native
DESCRIPTION: This snippet shows how to record audio using the Audio.Recording API from expo-av. It includes handling permissions, starting and stopping recording, and managing audio mode.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync(
      {
        allowsRecordingIOS: false,
      }
    );
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Configuring EAS JSON for APK Builds in Android
DESCRIPTION: Configuration example showing different ways to set up build profiles in eas.json to generate APK files instead of AAB. Demonstrates multiple profile configurations using buildType, gradleCommand, developmentClient, and distribution options.

LANGUAGE: json
CODE:
{
  "build": {
    "preview": {
      "android": {
        "buildType": "apk"
      }
    },
    "preview2": {
      "android": {
        "gradleCommand": ":app:assembleRelease"
      }
    },
    "preview3": {
      "developmentClient": true
    },
    "preview4": {
      "distribution": "internal"
    },
    "production": {}
  }
}

----------------------------------------

TITLE: Development Code Removal in Expo
DESCRIPTION: Shows how development-only code is eliminated from production bundles using NODE_ENV and __DEV__ conditionals.

LANGUAGE: javascript
CODE:
if (process.env.NODE_ENV === 'development') {
  console.log('Hello in development');
}

if (__DEV__) {
  console.log('Another development-only conditional...');
}

----------------------------------------

TITLE: Configuring expo-maps plugin in app.json
DESCRIPTION: JSON configuration for the expo-maps plugin in app.json. It sets up location permission requests and customizes the permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-maps",
        {
          "requestLocationPermission": "true",
          "locationPermission": "Allow $(PRODUCT_NAME) to use your location"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Setting Page Margins in Expo Print
DESCRIPTION: This snippet shows how to set page margins when printing to a file using expo-print on iOS.

LANGUAGE: js
CODE:
const { uri } = await Print.printToFileAsync({
  html: 'This page is printed with margins',
  margins: {
    left: 20,
    top: 50,
    right: 20,
    bottom: 100,
  },
});

----------------------------------------

TITLE: Logging in with SSO using Expo CLI
DESCRIPTION: Command to log in to Expo account using Single Sign-On (SSO) with Expo CLI. Available with SDK 50 and above.

LANGUAGE: bash
CODE:
$ npx expo login --sso

----------------------------------------

TITLE: Implementing GestureHandlerRootView in React Native
DESCRIPTION: Sets up the root gesture handler component by replacing the root View with GestureHandlerRootView in the main Index component.

LANGUAGE: tsx
CODE:
import { GestureHandlerRootView } from 'react-native-gesture-handler';

export default function Index() {
  return (
    <GestureHandlerRootView style={styles.container}>
      {/* ...rest of the code remains */}
    </GestureHandlerRootView>
  )
}

----------------------------------------

TITLE: Handling Binary Data in SQLite with Expo
DESCRIPTION: Illustrates how to store and retrieve binary data using Uint8Array in an Expo SQLite database.

LANGUAGE: typescript
CODE:
await db.execAsync(`
DROP TABLE IF EXISTS blobs;
CREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);
`);

const blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);
await db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);

const row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');
expect(row.data).toEqual(blob);

----------------------------------------

TITLE: Implementing Pedometer Functionality in React Native with Expo
DESCRIPTION: This snippet demonstrates how to use the Pedometer sensor from expo-sensors in a React Native application. It shows how to check pedometer availability, get past step count, and subscribe to real-time step count updates.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
    const isAvailable = await Pedometer.isAvailableAsync();
    setIsPedometerAvailable(String(isAvailable));

    if (isAvailable) {
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - 1);

      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
      if (pastStepCountResult) {
        setPastStepCount(pastStepCountResult.steps);
      }

      return Pedometer.watchStepCount(result => {
        setCurrentStepCount(result.steps);
      });
    }
  };

  useEffect(() => {
    const subscription = subscribe();
    return () => subscription && subscription.remove();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
      <Text>Walk! And watch this go up: {currentStepCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: CSS Module Implementation
DESCRIPTION: Example of CSS Module usage in React Native components

LANGUAGE: javascript
CODE:
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
    <>
      <Text
        style={{
          $$css: true,
          _: styles.text,
        }}>
        Hello World
      </Text>
      <Text style={unstable_styles.text}>Hello World</Text>
      {/* Web-only usage: */}
      <p className={styles.text}>Hello World</p>
    </>
  );
}

LANGUAGE: css
CODE:
.text {
  color: red;
}

----------------------------------------

TITLE: Creating Protected App Layout in Expo Router
DESCRIPTION: This snippet demonstrates how to create a protected app layout that checks for user authentication and redirects to the sign-in screen if the user is not authenticated.

LANGUAGE: tsx
CODE:
import { Text } from 'react-native';
import { Redirect, Stack } from 'expo-router';

import { useSession } from '../../ctx';

export default function AppLayout() {
  const { session, isLoading } = useSession();

  // You can keep the splash screen open, or render a loading screen like we do here.
  if (isLoading) {
    return <Text>Loading...</Text>;
  }

  // Only require authentication within the (app) group's layout as users
  // need to be able to access the (auth) group and sign in again.
  if (!session) {
    // On web, static rendering will stop here as the user is not authenticated
    // in the headless Node process that the pages are rendered in.
    return <Redirect href="/sign-in" />;
  }

  // This layout can be deferred because it's not the root layout.
  return <Stack />;
}

----------------------------------------

TITLE: Implementing Basic Tracking Transparency in React Native
DESCRIPTION: React Native component demonstrating basic usage of tracking transparency request, including permission handling and UI display.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await requestTrackingPermissionsAsync();
      if (status === 'granted') {
        console.log('Yay! I have user permission to track data');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Tracking Transparency Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Android MainActivity Implementation
DESCRIPTION: Kotlin implementation of MainActivity for handling EAS Update integration, including updates initialization and React Native activity setup.

LANGUAGE: kotlin
CODE:
package com.yourpackagename

import android.content.Context
import android.os.Bundle
import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate
import expo.modules.ReactActivityDelegateWrapper
import expo.modules.updates.UpdatesController
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class MainActivity : ReactActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        CoroutineScope(Dispatchers.IO).launch {
            startUpdatesController(applicationContext)
        }
    }

    private fun startUpdatesController(context: Context) {
        UpdatesController.initialize(context)
        UpdatesController.instance.launchAssetFile
    }

    override fun getMainComponentName(): String = "App"

    override fun createReactActivityDelegate(): ReactActivityDelegate {
        return ReactActivityDelegateWrapper(
            this,
            BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,
            object : DefaultReactActivityDelegate(
                this,
                mainComponentName,
                fabricEnabled
            ) {})
    }
}

----------------------------------------

TITLE: Sending Local Notification with Channel ID
DESCRIPTION: Presents a local notification through a specific channel on Android, with title and body content specified.

LANGUAGE: javascript
CODE:
Notifications.presentLocalNotificationAsync({
  title: 'New Message',
  body: 'Message!!!!',
  android: {
    channelId: 'chat-messages',
  },
});

----------------------------------------

TITLE: Configuring UIBackgroundModes in Info.plist for iOS
DESCRIPTION: Add the 'processing' value to the UIBackgroundModes array in the Info.plist file to enable background fetch on iOS.

LANGUAGE: xml
CODE:
<key>UIBackgroundModes</key>
<array>
  <string>processing</string>
</array>

----------------------------------------

TITLE: Importing expo-maps components
DESCRIPTION: This JavaScript code snippet shows how to import the AppleMaps and GoogleMaps components from the expo-maps library.

LANGUAGE: javascript
CODE:
import { AppleMaps, GoogleMaps } from 'expo-maps';

// ApplesMaps.View and GoogleMaps.View are the React components

----------------------------------------

TITLE: Terminal Commands for Bun Usage
DESCRIPTION: Collection of essential Bun commands for creating projects, running scripts, installing packages, and managing dependencies in Expo projects.

LANGUAGE: bash
CODE:
$ bun create expo my-app
$ bun run ios
$ bun expo install expo-av
$ rm -rf node_modules
$ rm bun.lockb
$ bun install

----------------------------------------

TITLE: Adding vibration permission for Android
DESCRIPTION: XML snippet showing the required permission for vibration control on Android devices.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.VIBRATE" />

----------------------------------------

TITLE: Screen Capture Module Import Statement
DESCRIPTION: Basic import statement for the Screen Capture module showing how to import all exports from the expo-screen-capture package.

LANGUAGE: js
CODE:
import * as ScreenCapture from 'expo-screen-capture';

----------------------------------------

TITLE: Importing Components from expo-router/ui
DESCRIPTION: This code snippet demonstrates how to import the custom tab components from the expo-router/ui submodule for use in an Expo Router project.

LANGUAGE: js
CODE:
import { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';

----------------------------------------

TITLE: EAS Submit Webhook Payload Structure
DESCRIPTION: Example JSON structure of the payload sent by EAS for submission notifications. Includes submission details, status, and error information.

LANGUAGE: json
CODE:
{
  "id": "0374430d-7776-44ad-be7d-8513629adc54",
  "accountName": "dsokal",
  "projectName": "example",
  "submissionDetailsPageUrl": "https://expo.dev/accounts/dsokal/projects/example/builds/0374430d-7776-44ad-be7d-8513629adc54",
  "parentSubmissionId": "75ac0be7-0d90-46d5-80ec-9423fa0aaa6b",
  "appId": "23c0e405-d282-4399-b280-5689c3e1ea85",
  "archiveUrl": "http://archive.url/abc.apk",
  "initiatingUserId": "7bee4c21-3eaa-4011-a0fd-3678b6537f47",
  "cancelingUserId": null,
  "turtleBuildId": "8c84111e-6d39-449c-9895-071d85fd3e61",
  "platform": "android",
  "status": "errored",
  "submissionInfo": {
    "error": {
      "message": "Android version code needs to be updated",
      "errorCode": "SUBMISSION_SERVICE_ANDROID_OLD_VERSION_CODE_ERROR"
    },
    "logsUrl": "https://submission-service-logs.s3-us-west-1.amazonaws.com/production/submission_728aa20b-f7a9-4da7-9b64-39911d427b19.txt"
  },
  "createdAt": "2021-11-24T10:15:32.822Z",
  "updatedAt": "2021-11-24T10:17:32.822Z",
  "completedAt": "2021-11-24T10:17:32.822Z",
  "maxRetryTimeMinutes": 3600
}

----------------------------------------

TITLE: Implementing Sign-In Screen in Expo Router
DESCRIPTION: This code creates a sign-in screen that allows users to authenticate. It uses the useSession hook to access the signIn function and navigates to the home screen after successful sign-in.

LANGUAGE: tsx
CODE:
import { router } from 'expo-router';
import { Text, View } from 'react-native';

import { useSession } from '../ctx';

export default function SignIn() {
  const { signIn } = useSession();
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text
        onPress={() => {
          signIn();
          // Navigate after signing in. You may want to tweak this to ensure sign-in is
          // successful before navigating.
          router.replace('/');
        }}>
        Sign In
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: Installing expo-dev-client
DESCRIPTION: Command to install the expo-dev-client library for development builds.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Basic Battery Level Display in React Native
DESCRIPTION: A React Native component that demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level of the device.

LANGUAGE: jsx
CODE:
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Listing Directory Contents Recursively with FileSystem Next in TypeScript
DESCRIPTION: Shows how to recursively list and print the contents of a directory, including subdirectories and files, using the Directory class methods.

LANGUAGE: typescript
CODE:
import { Directory, Paths } from 'expo-file-system/next';

function printDirectory(directory: Directory, indent: number = 0) {
  console.log(`${' '.repeat(indent)} + ${directory.name}`);
  const contents = directory.list();
  for (const item of contents) {
    if (item instanceof Directory) {
      printDirectory(item, indent + 2);
    } else {
      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);
    }
  }
}

try {
  printDirectory(new Directory(Paths.cache));
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: GIF Management System with Expo FileSystem
DESCRIPTION: Implementation of a GIF management system using expo-file-system, including functions for downloading, caching, and managing GIF files locally.

LANGUAGE: javascript
CODE:
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

----------------------------------------

TITLE: Configuring Stripe Plugin in Expo app.json
DESCRIPTION: Configuration for the @stripe/stripe-react-native plugin in app.json, specifying merchantIdentifier for iOS Apple Pay and enableGooglePay for Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": string | string [],
          "enableGooglePay": boolean
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Creating Web-Only React Component
DESCRIPTION: Example of implementing a web-specific component using React DOM elements. This approach is suitable for web-only features but won't work on native platforms.

LANGUAGE: jsx
CODE:
export default function Page() {
  return <p>Home page</p>;
}

----------------------------------------

TITLE: Installing expo-video package via NPM
DESCRIPTION: Command to install the expo-video package as a dependency in bare React Native projects. Requires the expo package to be installed and configured first.

LANGUAGE: bash
CODE:
npm install expo-video

----------------------------------------

TITLE: Basic Battery Level Display in React Native
DESCRIPTION: A React Native component that demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level of the device.

LANGUAGE: jsx
CODE:
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Importing Expo Constants Module
DESCRIPTION: Basic import statement for using the expo-constants package to access system constants in an Expo app.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';

----------------------------------------

TITLE: Building Expo Web Production Build
DESCRIPTION: Command for creating a production web build using Expo's export functionality.

LANGUAGE: bash
CODE:
$ npx expo export --platform web

----------------------------------------

TITLE: Listing EAS Builds
DESCRIPTION: Command to view the list of builds and their status in EAS Build system.

LANGUAGE: bash
CODE:
$ eas build:list

----------------------------------------

TITLE: Barometer Import Statement
DESCRIPTION: Shows how to import the Barometer module from expo-sensors package.

LANGUAGE: js
CODE:
import { Barometer } from 'expo-sensors';

----------------------------------------

TITLE: Configuring iOS Entitlements for iCloud Storage
DESCRIPTION: This XML snippet demonstrates the required entitlements to be added in the iOS app's .entitlements file for enabling iCloud storage features. It includes configurations for iCloud container identifiers, services, and key-value store.

LANGUAGE: xml
CODE:
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
    <string>CloudDocuments</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.ubiquity-kvstore-identifier</key>
<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>

----------------------------------------

TITLE: Importing SystemUI Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the SystemUI module from the expo-system-ui package. It allows access to the library's functionality for interacting with system UI elements.

LANGUAGE: javascript
CODE:
import * as SystemUI from 'expo-system-ui';

----------------------------------------

TITLE: Configuring iOS Entitlements for Wi-Fi Info Access
DESCRIPTION: Demonstrates how to add the necessary entitlement to the app.json file for accessing Wi-Fi information on iOS.

LANGUAGE: json
CODE:
{
  "ios": {
    "entitlements": {
      "com.apple.developer.networking.wifi-info": true
    }
  }
}

----------------------------------------

TITLE: Performing Schema-only Validation
DESCRIPTION: Demonstrates how to perform basic schema validation against a JSON data file.

LANGUAGE: javascript
CODE:
const validator = new Schemer(require('schema.json'));
try {
  await validator.validateSchemaAsync(require('data.json'));
} catch (e) {
  console.error(e);
}

----------------------------------------

TITLE: Importing Expo Clipboard Module
DESCRIPTION: Example showing how to import the expo-clipboard module in a JavaScript/React Native application.

LANGUAGE: js
CODE:
import * as Clipboard from 'expo-clipboard';

----------------------------------------

TITLE: WebView Implementation with Inline HTML
DESCRIPTION: Shows how to create a WebView that renders inline HTML content. Includes originWhitelist configuration to allow all origins and demonstrates basic HTML content rendering.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Parsing Deep Link URLs in React Native
DESCRIPTION: This snippet shows how to use Linking.parse() to extract the hostname, path, and query parameters from a deep link URL. It demonstrates handling and logging the parsed information.

LANGUAGE: tsx
CODE:
import * as Linking from 'expo-linking';

export default function Home() {
  const url = Linking.useURL();

  if (url) {
    const { hostname, path, queryParams } = Linking.parse(url);

    console.log(
      `Linked to app with hostname: ${hostname}, path: ${path} and data: ${JSON.stringify(
        queryParams
      )}`
    );
  }

  return (
    /* @hide Your React component here. */ /* @end */
  )
}

----------------------------------------

TITLE: Deploying to Production in EAS
DESCRIPTION: Command to create a new deployment and promote it directly to production.

LANGUAGE: bash
CODE:
$ eas deploy --prod

----------------------------------------

TITLE: iOS Custom ViewController Implementation
DESCRIPTION: Swift implementation of a custom view controller for handling React Native view integration with EAS Update.

LANGUAGE: swift
CODE:
import UIKit
import EXUpdates
import ExpoModulesCore

public class CustomViewController: UIViewController, AppControllerDelegate {
  let appDelegate = AppDelegate.shared()

  public convenience init() {
    self.init(nibName: nil, bundle: nil)
    self.view.backgroundColor = .clear
    appDelegate.updatesController = AppController.sharedInstance
    AppController.sharedInstance.delegate = self
    AppController.sharedInstance.start()
  }

  required public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
  }

  @available(*, unavailable)
  required public init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  public func appController(
    _ appController: AppControllerInterface,
    didStartWithSuccess success: Bool
  ) {
    createView()
  }

  private func createView() {
    let rootView = appDelegate.rootViewFactory.view(
      withModuleName: appDelegate.moduleName ?? "main",
      initialProperties: appDelegate.initialProps,
      launchOptions: appDelegate.launchOptions
    )
    self.view.addSubview(rootView)
    let controller = self
    controller.view.clipsToBounds = true
    controller.view.addSubview(rootView)
    rootView.translatesAutoresizingMaskIntoConstraints = false
    NSLayoutConstraint.activate([
      rootView.topAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.topAnchor),
      rootView.bottomAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.bottomAnchor),
      rootView.leadingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.leadingAnchor),
      rootView.trailingAnchor.constraint(equalTo: controller.view.safeAreaLayoutGuide.trailingAnchor)
    ])
  }
}

----------------------------------------

TITLE: Implementing Stack Navigation in Expo Router
DESCRIPTION: This code snippet shows how to implement stack navigation in Expo Router by updating the root layout file. It uses the Stack component to define routes and configure screen options for all routes in the stack.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}>
      <Stack.Screen name="index" />
      <Stack.Screen name="details" />
    </Stack>
  );
}

----------------------------------------

TITLE: Importing Core Components from expo-router
DESCRIPTION: This code snippet demonstrates how to import the main components from expo-router. It includes Stack and Tabs for navigation, and Link for creating navigation links.

LANGUAGE: js
CODE:
import { Stack, Tabs, Link } from 'expo-router';

----------------------------------------

TITLE: Configuring expo-media-library Plugin
DESCRIPTION: Example configuration for the expo-media-library plugin in app.json, showing how to set custom permissions messages and media location access.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-media-library",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
          "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
          "isAccessMediaLocationEnabled": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring DevClient Plugin in app.json
DESCRIPTION: Configuration example for the expo-dev-client plugin in app.json, showing how to set the launchMode property to control startup behavior.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-dev-client",
        {
          "launchMode": "most-recent"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Launching Android Location Settings Intent with TypeScript
DESCRIPTION: Example showing how to use expo-intent-launcher to open Android location settings using startActivityAsync.

LANGUAGE: typescript
CODE:
import { startActivityAsync, ActivityAction } from 'expo-intent-launcher';

// Open location settings
startActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);

----------------------------------------

TITLE: Renaming a Branch with EAS CLI
DESCRIPTION: This command renames a branch in the EAS project without disconnecting any channel-branch links.

LANGUAGE: bash
CODE:
$ eas branch:rename --from [branch-name] --to [branch-name]

----------------------------------------

TITLE: Importing Crypto Module in JavaScript
DESCRIPTION: This snippet shows how to import the expo-crypto module in a JavaScript file. It's a simple import statement that brings in all exports from the module.

LANGUAGE: js
CODE:
import * as Crypto from 'expo-crypto';

----------------------------------------

TITLE: Importing registerRootComponent from Expo
DESCRIPTION: This snippet demonstrates how to import the registerRootComponent function from the Expo package.

LANGUAGE: typescript
CODE:
import { registerRootComponent } from 'expo';

----------------------------------------

TITLE: Configuring Babel for Expo Router
DESCRIPTION: Set up the babel.config.js file to use 'babel-preset-expo' as the preset for Expo Router projects.

LANGUAGE: js
CODE:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

----------------------------------------

TITLE: Importing DevClient in JavaScript
DESCRIPTION: This code snippet shows how to import all exports from the expo-dev-client package as DevClient in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as DevClient from 'expo-dev-client';

----------------------------------------

TITLE: iOS SSID Access Configuration
DESCRIPTION: Configuration for app.json to enable SSID access on iOS devices by adding required entitlements.

LANGUAGE: json
CODE:
{
  "ios": {
    "entitlements": {
      "com.apple.developer.networking.wifi-info": true
    }
  }
}

----------------------------------------

TITLE: Exporting the native module in TypeScript
DESCRIPTION: Create a TypeScript file to export the native module using requireNativeModule from expo-modules-core.

LANGUAGE: typescript
CODE:
import { requireNativeModule } from 'expo-modules-core';

export default requireNativeModule('MyModule');

----------------------------------------

TITLE: Getting Device Language in Expo
DESCRIPTION: Demonstrates how to retrieve the user's device language code using expo-localization.

LANGUAGE: typescript
CODE:
import { getLocales } from 'expo-localization';

const deviceLanguage = getLocales()[0].languageCode;

----------------------------------------

TITLE: Configuring TrackingTransparency Plugin in app.json
DESCRIPTION: Configuration example showing how to set up the expo-tracking-transparency plugin in app.json with a custom user tracking permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-tracking-transparency",
        {
          "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Uploading Files using FormData with expo/fetch in TypeScript
DESCRIPTION: Shows how to upload a file using FormData and the fetch function from expo/fetch. It creates a file, writes content to it, and then uploads it as part of a FormData object.

LANGUAGE: typescript
CODE:
import { fetch } from 'expo/fetch';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const formData = new FormData();
formData.append('data', blob);

const response = await fetch('https://example.com', {
  method: 'POST',
  body: formData,
});

----------------------------------------

TITLE: Configuring expo-build-properties in app.json
DESCRIPTION: Example of how to configure the expo-build-properties plugin in the app.json file. It demonstrates setting Android and iOS build properties.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 35,
            "targetSdkVersion": 35,
            "buildToolsVersion": "35.0.0"
          },
          "ios": {
            "deploymentTarget": "15.1"
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Custom URL Schemes
DESCRIPTION: This JSON configuration specifies a list of URL schemes that the app is allowed to query on iOS using the LSApplicationQueriesSchemes key in the Info.plist file.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "LSApplicationQueriesSchemes": ["uber"]
      }
    }
  }
}

----------------------------------------

TITLE: Configuring expo-av plugin in app.json
DESCRIPTION: Example of configuring the expo-av plugin in the app.json file to set the microphone permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-av",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Production EAS Deployment
DESCRIPTION: This command deploys the web app to production using EAS CLI. It creates a production-ready deployment with a dedicated URL.

LANGUAGE: bash
CODE:
$ eas deploy --prod

----------------------------------------

TITLE: Sending FCM Push Notification
DESCRIPTION: Implementation of sending a push notification through FCM v1 API using the obtained authentication token and device token.

LANGUAGE: typescript
CODE:
async function sendFCMv1Notification() {
  const key = require(process.env.FCM_SERVER_KEY);
  const firebaseAccessToken = await getAccessTokenAsync(key);
  const deviceToken = process.env.FCM_DEVICE_TOKEN;

  const messageBody = {
    message: {
      token: deviceToken,
      data: {
        channelId: 'default',
        message: 'Testing',
        title: `This is an FCM notification message`,
        body: JSON.stringify({ title: 'bodyTitle', body: 'bodyBody' }),
        scopeKey: '@yourExpoUsername/yourProjectSlug',
        experienceId: '@yourExpoUsername/yourProjectSlug',
      },
    },
  };

  const response = await fetch(
    `https://fcm.googleapis.com/v1/projects/${process.env.FCM_PROJECT_NAME}/messages:send`,
    {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${firebaseAccessToken}`,
        Accept: 'application/json',
        'Accept-encoding': 'gzip, deflate',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(messageBody),
    }
  );

  const readResponse = (response: Response) => response.json();
  const json = await readResponse(response);

  console.log(`Response JSON: ${JSON.stringify(json, null, 2)}`);
}

----------------------------------------

TITLE: Extending Expo Dev Menu with Custom Buttons
DESCRIPTION: Demonstrates how to use the registerDevMenuItems API to add custom buttons to the Expo development menu. This allows developers to extend the capabilities of the dev menu with project-specific functionality.

LANGUAGE: typescript
CODE:
import { registerDevMenuItems } from 'expo-dev-menu';

const devMenuItems = [
  {
    name: 'My Custom Button',
    callback: () => console.log('Hello world!'),
  },
];

registerDevMenuItems(devMenuItems);

----------------------------------------

TITLE: Managing GIF Files with FileSystem in TypeScript
DESCRIPTION: Shows how to manage GIF files using expo-file-system, including downloading, caching, and sharing GIFs with directory management and error handling.

LANGUAGE: typescript
CODE:
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

----------------------------------------

TITLE: Recording Sounds with expo-av in React Native
DESCRIPTION: This snippet shows how to implement audio recording using the Audio API from expo-av. It includes permission handling, starting and stopping recording, and managing the audio mode.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync(
      {
        allowsRecordingIOS: false,
      }
    );
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Configuring iOS PaymentSheet Localization
DESCRIPTION: Configuration in app.json for enabling PaymentSheet localization on iOS, including mixed localizations and language settings.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "CFBundleAllowMixedLocalizations": true,
        "CFBundleLocalizations": ["fr"]
      }
    }
  }
}

----------------------------------------

TITLE: Source Files Configuration
DESCRIPTION: Defines source file locations and globbing patterns for collecting C++ source files from different directories.

LANGUAGE: cmake
CODE:
set(SRC_DIR ${CMAKE_SOURCE_DIR}/src)
set(COMMON_DIR ${CMAKE_SOURCE_DIR}/../common/cpp)
file(GLOB sources_android "${SRC_DIR}/main/cpp/*.cpp")
file(GLOB sources_android_types "${SRC_DIR}/main/cpp/types/*.cpp")
file(GLOB sources_android_javaclasses "${SRC_DIR}/main/cpp/javaclasses/*.cpp")
file(GLOB sources_android_javaclasses "${SRC_DIR}/main/cpp/decorators/*.cpp")
file(GLOB common_sources "${COMMON_DIR}/*.cpp")

----------------------------------------

TITLE: Configuring expo-secure-store in app.json
DESCRIPTION: Example of how to configure the expo-secure-store plugin in the app.json file, specifically setting the Face ID permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-secure-store",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Update URL Override in JavaScript with expo-updates
DESCRIPTION: Example implementation showing how to override the update URL and request headers using the Updates.setUpdateURLAndRequestHeadersOverride method. This code demonstrates setting a custom update URL and channel name, with an alert to notify users to restart the app.

LANGUAGE: javascript
CODE:
import * as Updates from 'expo-updates';

// Where you call this method depends on your use case - it may make sense to
// have a menu in your preview builds that allows testers to pick from available
// pull requests, for example.
function overrideUpdateURLAndHeaders() {
  Updates.setUpdateURLAndRequestHeadersOverride({
    url: '<https://u.expo.dev/>...',
    requestHeaders: { 'expo-channel-name': 'pr-123' },
  });

  alert('Close and re-open the app to load the latest version.');
}

----------------------------------------

TITLE: Adding Asset Extensions to Metro Config
DESCRIPTION: Demonstrates how to add support for additional file extensions to be treated as assets by Metro bundler. In this example, .db files for SQLite databases are added.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.resolver.assetExts.push(
  // Adds support for `.db` files for SQLite databases
  'db'
);

module.exports = config;

----------------------------------------

TITLE: Implementing Not Found Screen in Expo Router
DESCRIPTION: This code snippet shows how to create a Not Found screen for handling 404 routes in Expo Router. It creates a NotFoundScreen component with a link to return to the home screen.

LANGUAGE: tsx
CODE:
import { Link, Stack } from 'expo-router';
import { View, StyleSheet } from 'react-native';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: "Oops! This screen doesn't exist." }} />
      <View style={styles.container}>
        <Link href="/">Go to home screen</Link>
      </View>
    </>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Importing Linking from expo-linking in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the Linking module from the expo-linking package. This module provides utilities for handling deep links and interacting with other installed apps.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

----------------------------------------

TITLE: Expo Magnetometer Import Statement
DESCRIPTION: Import statement showing how to access both calibrated and uncalibrated magnetometer sensors from the expo-sensors package.

LANGUAGE: js
CODE:
import { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';

----------------------------------------

TITLE: Installing @expo/json-file Package
DESCRIPTION: Command to install the @expo/json-file package using yarn package manager

LANGUAGE: shell
CODE:
yarn add @expo/json-file

----------------------------------------

TITLE: Installing expo-secure-store Package
DESCRIPTION: Command to install expo-secure-store package using npx expo install in a React Native project. This is the recommended installation method for both managed Expo and bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-secure-store

----------------------------------------

TITLE: LinearGradient Import Statement
DESCRIPTION: Basic import statement showing how to import the LinearGradient component from the expo-linear-gradient package.

LANGUAGE: javascript
CODE:
import { LinearGradient } from 'expo-linear-gradient';

----------------------------------------

TITLE: Setting Shell Environment Variables for Proxy
DESCRIPTION: Configures shell environment variables to use a local proxy (localhost:8888) for various protocols.

LANGUAGE: bash
CODE:
export HTTP_PROXY="http://localhost:8888"
export http_proxy="http://localhost:8888"
export ALL_PROXY="http://localhost:8888"
export all_proxy="http://localhost:8888"
export HTTPS_PROXY="http://localhost:8888"
export https_proxy="http://localhost:8888"

----------------------------------------

TITLE: Rendering BoxLink Component in JSX
DESCRIPTION: This code snippet demonstrates how to use the BoxLink component to create a linked box with a title, description, and icon. It's used multiple times in the file to create a list of clickable resources.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Stack"
  href="/router/advanced/stack/"
  description="See Stack navigator's complete reference for more information on API methods."
  Icon={BookOpen02Icon}
/>

----------------------------------------

TITLE: Installing Canary Release of Expo SDK
DESCRIPTION: Shows how to install the latest canary (pre-release) version of the Expo SDK and related packages.

LANGUAGE: bash
CODE:
# Install the alpha version of expo and its related packages
$ npm install expo@canary && npx expo install --fix

----------------------------------------

TITLE: Importing expo-dev-client for Error Handling
DESCRIPTION: JavaScript code showing how to import expo-dev-client for enhanced error handling functionality

LANGUAGE: javascript
CODE:
import 'expo-dev-client';
/* @hide ... */ /* @end */
import App from './App';

----------------------------------------

TITLE: Creating Development Builds Workflow in YAML
DESCRIPTION: This YAML workflow creates development builds for Android and iOS platforms, including both physical devices and simulators. It defines separate jobs for each build type.

LANGUAGE: yaml
CODE:
name: Create development builds

jobs:
  android_development_build:
    name: Build Android
    type: build
    params:
      platform: android
      profile: development
  ios_device_development_build:
    name: Build iOS device
    type: build
    params:
      platform: ios
      profile: development
  ios_simulator_development_build:
    name: Build iOS simulator
    type: build
    params:
      platform: ios
      profile: development-simulator

----------------------------------------

TITLE: Using Redirect Component in Expo Router (TSX)
DESCRIPTION: This snippet demonstrates how to use the Redirect component from expo-router to automatically redirect users to a specified route.

LANGUAGE: tsx
CODE:
import { Redirect } from 'expo-router';

export default function Index() {
  return <Redirect href="/home" />;
}

----------------------------------------

TITLE: HTML Deep Link Example
DESCRIPTION: Example of implementing a deep link using HTML anchor tag that opens a specific product page in a mobile app. The link demonstrates the structure of a custom URL scheme with scheme, host, and path components.

LANGUAGE: html
CODE:
<a href="myapp://web-app.com/product">View Product</a>

----------------------------------------

TITLE: Implementing Playback Status Update Handler in Expo AV
DESCRIPTION: Example of setting up a playback status update handler for Audio or Video objects in Expo AV.

LANGUAGE: javascript
CODE:
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
    // Update your UI for the unloaded state
    if (playbackStatus.error) {
      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
      // Send Expo team the error on Slack or the forums so we can help you debug!
    }
  } else {
    // Update your UI for the loaded state

    if (playbackStatus.isPlaying) {
      // Update your UI for the playing state
    } else {
      // Update your UI for the paused state
    }

    if (playbackStatus.isBuffering) {
      // Update your UI for the buffering state
    }

    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
      // The player has just finished playing and will stop. Maybe you want to play something else?
    }
  }
};

// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);

----------------------------------------

TITLE: Generating Native Android Code for Debugging in Expo
DESCRIPTION: This command generates the native Android code for an Expo project, creating an 'android' directory at the root of the project for debugging in Android Studio.

LANGUAGE: bash
CODE:
$ npx expo prebuild -p android

----------------------------------------

TITLE: Implementing Background Tasks in React Native with Expo
DESCRIPTION: Complete example showing how to implement background tasks using expo-background-task and expo-task-manager, including task definition, registration, status checking, and UI components for task management

LANGUAGE: typescript
CODE:
import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

const BACKGROUND_TASK_IDENTIFIER = 'background-task';

TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {
  try {
    const now = Date.now();
    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);
  } catch (error) {
    console.error('Failed to execute the background task:', error);
    return BackgroundTask.BackgroundTaskResult.Failed;
  }
  return BackgroundTask.BackgroundTaskResult.Success;
});

async function registerBackgroundTaskAsync() {
  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

async function unregisterBackgroundTaskAsync() {
  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

export default function BackgroundTaskScreen() {
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundTask.getStatusAsync();
    setStatus(status);
  };

  const toggle = async () => {
    if (isRegistered) {
      await registerBackgroundTaskAsync();
    } else {
      await unregisterBackgroundTaskAsync();
    }
    setIsRegistered(!isRegistered);
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background Task Service Availability:{' '}
          <Text style={styles.boldText}>
            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}
          </Text>
        </Text>
      </View>
      <Button
        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}
        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}
        onPress={toggle}
      />
      <Button title="Check Background Task Status" onPress={checkStatusAsync} />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});

----------------------------------------

TITLE: API Route Error Handling
DESCRIPTION: Example of handling errors and returning appropriate HTTP responses in API routes.

LANGUAGE: typescript
CODE:
import { Request, Response } from 'expo-router/server';

export async function GET(request: Request, { post }: Record<string, string>) {
  if (!post) {
    return new Response('No post found', {
      status: 404,
      headers: {
        'Content-Type': 'text/plain',
      },
    });
  }
  return Response.json({ ... });
}

----------------------------------------

TITLE: Configuring DeviceMotion in app.json for Expo
DESCRIPTION: This snippet shows how to configure the DeviceMotion API using the expo-sensors config plugin in the app.json file. It sets the motion permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing SVG Components in React Native
DESCRIPTION: Basic import statement showing how to import all SVG components from react-native-svg library.

LANGUAGE: javascript
CODE:
import * as Svg from 'react-native-svg';

----------------------------------------

TITLE: Importing WebBrowser Module in JavaScript
DESCRIPTION: This snippet shows how to import the WebBrowser module from the expo-web-browser package. This import statement is typically used at the beginning of a file where WebBrowser functionality is needed.

LANGUAGE: js
CODE:
import * as WebBrowser from 'expo-web-browser';

----------------------------------------

TITLE: Installing expo-sqlite Package
DESCRIPTION: Command to install the expo-sqlite package using npx expo install in a React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-sqlite

----------------------------------------

TITLE: Importing Expo SDK Packages in JavaScript
DESCRIPTION: Shows how to import and use various Expo SDK packages in a JavaScript file.

LANGUAGE: javascript
CODE:
import { CameraView } from 'expo-camera';
import * as Contacts from 'expo-contacts';
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Exporting Project
DESCRIPTION: Command to export the JavaScript and assets for your app using Metro bundler.

LANGUAGE: sh
CODE:
$ npx expo export

----------------------------------------

TITLE: Configuring Jest in package.json
DESCRIPTION: Basic Jest configuration setup in package.json including test script and jest-expo preset

LANGUAGE: json
CODE:
{
  "scripts": {
    "test": "jest --watchAll"
  },
  "jest": {
    "preset": "jest-expo"
  }
}

----------------------------------------

TITLE: Android Auto Backup Configuration for SecureStore
DESCRIPTION: XML configuration for excluding SecureStore from Android Auto Backup for Android 12 and higher, and Android 11 and lower.

LANGUAGE: xml
CODE:
<!--  Auto Backup configuration for Android 12 and higher -->
<data-extraction-rules>
  <cloud-backup>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="SecureStore"/>
  </cloud-backup>
  <device-transfer>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="SecureStore"/>
  </device-transfer>
</data-extraction-rules>

LANGUAGE: xml
CODE:
<!--  Auto Backup configuration for Android 11 and lower -->
<full-backup-content>
  <include domain="sharedpref" path="."/>
  <exclude domain="sharedpref" path="SecureStore"/>
</full-backup-content>

----------------------------------------

TITLE: Executing Async Transactions in SQLite with Expo
DESCRIPTION: Shows how to perform database operations within an asynchronous transaction in an Expo SQLite database.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});

----------------------------------------

TITLE: Implementing Media Looping in Expo AV
DESCRIPTION: Example of looping media exactly 20 times using Expo AV's playback status update.

LANGUAGE: javascript
CODE:
const N = 20;

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
    if (this.state.numberOfLoops == N - 1) {
      playbackObject.setIsLooping(false);
    }
    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
  }
};

this.setState({ numberOfLoops: 0 });
// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);

----------------------------------------

TITLE: Rendering SF Symbols in React Native using expo-symbols
DESCRIPTION: This snippet demonstrates how to use the SymbolView component from expo-symbols to display an SF Symbol in a React Native app. It shows the setup of a basic app structure and styling for the symbol.

LANGUAGE: jsx
CODE:
import { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SymbolView name="airpods.chargingcase" style={styles.symbol} type="hierarchical" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  symbol: {
    width: 35,
    height: 35,
    margin: 5,
  },
});

----------------------------------------

TITLE: Using Environment Variables in React Native Component
DESCRIPTION: Example of using EXPO_PUBLIC_ prefixed environment variables in a React Native component to dynamically configure API URL.

LANGUAGE: typescript
CODE:
import { Button } from 'react-native';

function Post() {
  const apiUrl = process.env.EXPO_PUBLIC_API_URL;

  async function onPress() {
    await fetch(apiUrl, { ... })
  }

  return <Button onPress={onPress} title="Post" />;
}

----------------------------------------

TITLE: Importing Existing SQLite Database in Expo
DESCRIPTION: Provides a function to import an existing SQLite database file into an Expo application, including necessary setup steps.

LANGUAGE: typescript
CODE:
async function openDatabase(pathToDatabaseFile: string): Promise<SQLite.Database> {
  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {
    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');
  }
  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();
  await FileSystem.copyAsync({
    from: asset.localUri,
    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',
  });
  return await SQLite.openDatabaseAsync('myDatabaseName.db');
}

----------------------------------------

TITLE: EAS Build Environment Configuration
DESCRIPTION: Configuration of environment settings in eas.json for different build profiles.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "environment": "development"
    },
    "preview": {
      "environment": "preview"
    },
    "production": {
      "environment": "production"
    },
    "my-profile": {
      "environment": "production"
    }
  }
}

----------------------------------------

TITLE: Using SQLite with React Suspense in Expo
DESCRIPTION: Demonstrates how to integrate SQLite operations with React Suspense for improved loading states in an Expo application.

LANGUAGE: tsx
CODE:
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite/next';
import { Suspense } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Suspense fallback={<Fallback />}>
        <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded} useSuspense>
          <Header />
          <Content />
        </SQLiteProvider>
      </Suspense>
    </View>
  );
}

----------------------------------------

TITLE: Configuring Module Aliases in Metro
DESCRIPTION: Shows how to set up module aliases in Metro config. This example redirects imports from 'old-module' to 'new-module' using a custom resolver.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

const ALIASES = {
  'old-module': 'new-module',
};

config.resolver.resolveRequest = (context, moduleName, platform) => {
  // Ensure you call the default resolver.
  return context.resolveRequest(
    context,
    // Use an alias if one exists.
    ALIASES[moduleName] ?? moduleName,
    platform
  );
};

module.exports = config;

----------------------------------------

TITLE: Importing StatusBar from expo-status-bar
DESCRIPTION: Basic import statement showing how to import the StatusBar component from the expo-status-bar package.

LANGUAGE: javascript
CODE:
import { StatusBar } from 'expo-status-bar';

----------------------------------------

TITLE: Using expo-maps in a React Native component
DESCRIPTION: Example of how to use expo-maps in a React Native component. It demonstrates platform-specific rendering of Apple Maps on iOS and Google Maps on Android.

LANGUAGE: tsx
CODE:
import { AppleMaps, GoogleMaps } from 'expo-maps';
import { Platform, Text } from 'react-native';

export default function App() {
  if (Platform.OS === 'ios') {
    return <AppleMaps.View style={{ flex: 1 }} />;
  } else if (Platform.OS === 'android') {
    return <GoogleMaps.View style={{ flex: 1 }} />;
  } else {
    return <Text>Maps are only available on Android and iOS</Text>;
  }
}

----------------------------------------

TITLE: Importing StatusBar from expo-status-bar
DESCRIPTION: Basic import statement showing how to import the StatusBar component from the expo-status-bar package.

LANGUAGE: javascript
CODE:
import { StatusBar } from 'expo-status-bar';

----------------------------------------

TITLE: Installing expo-brightness Package
DESCRIPTION: Command to install the expo-brightness package using npx expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-brightness

----------------------------------------

TITLE: Server-Side Rendering with React Helmet Async
DESCRIPTION: Illustrates how to use react-helmet-async for server-side rendering. It shows how to create a helmet context and extract meta information after rendering.

LANGUAGE: javascript
CODE:
import React from 'react';
import { renderToString } from 'react-dom/server';
import { Helmet, HelmetProvider } from 'react-helmet-async';

const helmetContext = {};

const app = (
  <HelmetProvider context={helmetContext}>
    <App>
      <Helmet>
        <title>Hello World</title>
        <link rel="canonical" href="https://www.tacobell.com/" />
      </Helmet>
      <h1>Hello World</h1>
    </App>
  </HelmetProvider>
);

const html = renderToString(app);

const { helmet } = helmetContext;

// helmet.title.toString() etc…

----------------------------------------

TITLE: Configuring TrackingTransparency Plugin in Expo
DESCRIPTION: JSON configuration example for setting up the expo-tracking-transparency plugin in app.json with custom user tracking permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-tracking-transparency",
        {
          "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Organizing Import Statements in JavaScript
DESCRIPTION: Shows the preferred order and grouping of import statements and require calls in JavaScript files, including side effects, external modules, and internal modules.

LANGUAGE: JavaScript
CODE:
import 'side-effect';

import invariant from 'invariant';
import Expo, { Audio } from 'expo';
import path from 'path';

import HomeScreen from '../screens/HomeScreen';
import Colors from '../style/Colors';
import calculateViewport from '../style/calculateViewport';
import LoginButton './LoginButton';

const assert = require('assert');

----------------------------------------

TITLE: Installing EAS CLI Globally
DESCRIPTION: Command to install the EAS CLI tool globally on your local machine using npm

LANGUAGE: bash
CODE:
$ npm install -g eas-cli

----------------------------------------

TITLE: Creating React Native Component for Testing
DESCRIPTION: Example component implementation showing a custom text component and home screen for testing purposes

LANGUAGE: tsx
CODE:
import { PropsWithChildren } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export const CustomText = ({ children }: PropsWithChildren) => <Text>{children}</Text>;

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <CustomText>Welcome!</CustomText>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Creating URL Objects in Expo
DESCRIPTION: Basic example demonstrating how to create URL and URLSearchParams objects using the standard URL API in Expo.

LANGUAGE: javascript
CODE:
const url = new URL('https://expo.dev');

const params = new URLSearchParams();

----------------------------------------

TITLE: Configuring iOS Build with Default Gymfile in Ruby
DESCRIPTION: Default Gymfile configuration used by EAS Build when no custom Gymfile is present in the ios directory. Sets up build parameters including provisioning profiles, output settings, and code signing options.

LANGUAGE: ruby
CODE:
suppress_xcode_output(true)
clean(true)

scheme("app")

export_options({
  method: "app-store",
  provisioningProfiles: {
    "com.expo.eas.builds.test.application" => "dd83ed9c-4f89-462e-b901-60ae7fe6d737"
  }
})

export_xcargs "OTHER_CODE_SIGN_FLAGS=\"--keychain /tmp/path/to/keychain\""

disable_xcpretty(true)

output_directory("./build")
output_name("App")

----------------------------------------

TITLE: Configuring expo-localization in app.json
DESCRIPTION: Example of how to configure expo-localization using its built-in config plugin in the app.json file. This is necessary for projects using config plugins, such as EAS Build or when running the app on native platforms.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-localization"]
  }
}

----------------------------------------

TITLE: Configuring iOS Entitlements for Associated Domains
DESCRIPTION: XML configuration for iOS entitlements file to enable associated domains.

LANGUAGE: xml
CODE:
<key>com.apple.developer.associated-domains</key>
<array>
  <string>applinks:expo.dev</string>
</array>

----------------------------------------

TITLE: Importing Audio and Video from expo-av
DESCRIPTION: Example of importing the Audio and Video components from the expo-av package.

LANGUAGE: javascript
CODE:
import { Audio, Video } from 'expo-av';

----------------------------------------

TITLE: Removing Android Permissions in AndroidManifest.xml
DESCRIPTION: Shows how to explicitly remove permissions from AndroidManifest.xml using the tools:node attribute, even when included by library dependencies.

LANGUAGE: xml
CODE:
<manifest xmlns:tools="http://schemas.android.com/tools">
  <uses-permission tools:node="remove" android:name="android.permission.ACCESS_FINE_LOCATION" />
</manifest>

----------------------------------------

TITLE: Server Output Configuration in app.json
DESCRIPTION: Configuration to enable server-side rendering and API routes in an Expo application.

LANGUAGE: json
CODE:
{
  "web": {
    "output": "server"
  }
}

----------------------------------------

TITLE: Executing Direct SQLite Statements in Expo
DESCRIPTION: Example of executing SQL statements outside of a transaction, useful for commands like PRAGMA statements.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite';

const db = SQLite.openDatabase('dbName', version);

await db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args: [] }], false);
console.log('Foreign keys turned on');

----------------------------------------

TITLE: Implementing Type-Safe Theme Enum on Android
DESCRIPTION: Improves type safety by using an enum for theme values on Android.

LANGUAGE: kotlin
CODE:
package expo.modules.settings

import android.content.Context
import android.content.SharedPreferences
import androidx.core.os.bundleOf
import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition
import expo.modules.kotlin.types.Enumerable

class ExpoSettingsModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoSettings")

    Events("onChangeTheme")

    Function("setTheme") { theme: Theme ->
      getPreferences().edit().putString("theme", theme.value).commit()
      this@ExpoSettingsModule.sendEvent("onChangeTheme", bundleOf("theme" to theme.value))
    }

    Function("getTheme") {
      return@Function getPreferences().getString("theme", Theme.SYSTEM.value)
    }
  }

  private val context
  get() = requireNotNull(appContext.reactContext)

  private fun getPreferences(): SharedPreferences {
    return context.getSharedPreferences(context.packageName + ".settings", Context.MODE_PRIVATE)
  }
}

enum class Theme(val value: String) : Enumerable {
  LIGHT("light"),
  DARK("dark"),
  SYSTEM("system")
}

----------------------------------------

TITLE: Dynamic Route Navigation with Pathname and Params in Expo Router
DESCRIPTION: Demonstrates how to use the href object with pathname and params for dynamic route navigation. Shows a more flexible approach to passing parameters to dynamic routes.

LANGUAGE: tsx
CODE:
import { Link } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <Text>Home</Text>
      <Link
        href={{
          pathname: '/details/[id]',
          params: { id: 'bacon' },
        }}>
        View user details
      </Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Handling Deep Links with Linking API in React Native
DESCRIPTION: This code demonstrates how to use the Linking.useURL() hook from expo-linking to observe and handle deep links that launch the app. It displays the incoming URL in a Text component.

LANGUAGE: tsx
CODE:
import * as Linking from 'expo-linking';

export default function Home() {
  const url = Linking.useURL();

  return <Text>URL: {url}</Text>;
}

----------------------------------------

TITLE: TypeScript Configuration
DESCRIPTION: Base tsconfig.json configuration for Expo modules using expo-module-scripts.

LANGUAGE: json
CODE:
{
  "extends": "expo-module-scripts/tsconfig.base",
  "compilerOptions": {
    "outDir": "./build"
  },
  "include": ["./src"],
  "exclude": ["**/__mocks__/*", "**/__tests__/*"]
}

----------------------------------------

TITLE: Importing React Components for Expo Setup
DESCRIPTION: This code snippet imports custom React components used for guiding users through the Expo setup process. These components include forms for selecting development environments, modes, and platforms.

LANGUAGE: jsx
CODE:
import { DevelopmentEnvironmentInstructions } from '~/scenes/get-started/set-up-your-environment/DevelopmentEnvironmentInstructions';
import { DevelopmentModeForm } from '~/scenes/get-started/set-up-your-environment/DevelopmentModeForm';
import { PlatformAndDeviceForm } from '~/scenes/get-started/set-up-your-environment/PlatformAndDeviceForm';

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Expo Router
DESCRIPTION: Shows how to access dynamic segment parameters using the useLocalSearchParams hook. Demonstrates parameter retrieval in a details screen component.

LANGUAGE: tsx
CODE:
import { useLocalSearchParams } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function DetailsScreen() {
  const { id } = useLocalSearchParams();

  return (
    <View style={styles.container}>
      <Text>Details of user {id} </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Using Key-Value Storage with expo-sqlite
DESCRIPTION: Demonstrates how to use the Storage API provided by expo-sqlite as a drop-in replacement for @react-native-async-storage/async-storage.

LANGUAGE: typescript
CODE:
import Storage from 'expo-sqlite/kv-store';

await Storage.setItem('key', JSON.stringify({ entity: 'value' }));
const value = await Storage.getItem('key');
const entity = JSON.parse(value);
console.log(entity); // { entity: 'value' }

// Using synchronous APIs
Storage.setItemSync('key', 'value');
const syncValue = Storage.getItemSync('key');

----------------------------------------

TITLE: Link Component Usage in Expo Router
DESCRIPTION: Shows how to use the Link component for navigation between pages using href prop.

LANGUAGE: tsx
CODE:
import { View } from 'react-native';
import { Link } from 'expo-router';

export default function Page() {
  return (
    <View>
      <Link href="/about">About</Link>
    </View>
  );
}

----------------------------------------

TITLE: Importing MailComposer Module in JavaScript
DESCRIPTION: Basic import statement for using the expo-mail-composer package in a JavaScript/React Native application.

LANGUAGE: javascript
CODE:
import * as MailComposer from 'expo-mail-composer';

----------------------------------------

TITLE: Installing expo-location in bare React Native projects
DESCRIPTION: Command to install the expo-location package using npx expo install.

LANGUAGE: bash
CODE:
npx expo install expo-location

----------------------------------------

TITLE: Implementing Browser-side React DOM Rendering
DESCRIPTION: Example of using createRoot to render a React component in the browser. Shows basic setup for client-side rendering with a simple Hello World component.

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';

function App() {
  return <div>Hello World</div>;
}

const root = createRoot(document.getElementById('root'));
root.render(<App />);

----------------------------------------

TITLE: Using useSafeAreaInsets Hook in Expo React Native
DESCRIPTION: This snippet demonstrates how to use the useSafeAreaInsets hook to apply padding to a View component based on the device's safe area insets.

LANGUAGE: tsx
CODE:
import { Text, View } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function HomeScreen() {
  const insets = useSafeAreaInsets();

  return (
    <View style={{ flex: 1, paddingTop: insets.top }}>
      <Text>Content is in safe area.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Theme Persistence on Android
DESCRIPTION: Adds functionality to get, set, and persist theme preferences using SharedPreferences on Android.

LANGUAGE: kotlin
CODE:
package expo.modules.settings

import android.content.Context
import android.content.SharedPreferences
import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition

class ExpoSettingsModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoSettings")

    Function("setTheme") { theme: String ->
      getPreferences().edit().putString("theme", theme).commit()
    }

    Function("getTheme") {
      return@Function getPreferences().getString("theme", "system")
    }
  }

  private val context
  get() = requireNotNull(appContext.reactContext)

  private fun getPreferences(): SharedPreferences {
    return context.getSharedPreferences(context.packageName + ".settings", Context.MODE_PRIVATE)
  }
}

----------------------------------------

TITLE: Using registerRootComponent in Custom Entry File
DESCRIPTION: This JSX snippet demonstrates how to use registerRootComponent in a custom entry file (src/main.jsx) to set the root component of the app.

LANGUAGE: jsx
CODE:
import { registerRootComponent } from 'expo';
import { View } from 'react-native';

function App() {
  return <View />;
}

registerRootComponent(App);

----------------------------------------

TITLE: Deprecating hashAssetFiles Function in expo-asset
DESCRIPTION: Deprecates the hashAssetFiles function from expo-asset/tools in favor of built-in hashing support in expo/metro-config.

LANGUAGE: Markdown
CODE:
- Deprecate `expo-asset/tools/hashAssetFiles` in favor of built-in hashing support in `expo/metro-config`. ([#34208](https://github.com/expo/expo/pull/34208) by [@EvanBacon](https://github.com/EvanBacon))

----------------------------------------

TITLE: Initializing Native iOS Module in Swift
DESCRIPTION: Basic Swift module implementation that exposes a getApiKey function to JavaScript

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoNativeConfigurationModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoNativeConfiguration")

    Function("getApiKey") { () -> String in
      "api-key"
    }
  }
}

----------------------------------------

TITLE: Using SafeAreaView Component in React Native
DESCRIPTION: Shows how to use the SafeAreaView component to automatically apply safe area insets as padding.

LANGUAGE: jsx
CODE:
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Configuring credentials.json for iOS Multi-target Projects
DESCRIPTION: Example of credentials.json structure for iOS projects with multiple targets, such as app extensions, specifying separate provisioning profiles and certificates.

LANGUAGE: json
CODE:
{
  "ios": {
    "multitarget": {
      "provisioningProfilePath": "ios/certs/multitarget-profile.mobileprovision",
      "distributionCertificate": {
        "path": "ios/certs/dist.p12",
        "password": "DISTRIBUTION_CERTIFICATE_PASSWORD"
      }
    },
    "shareextension": {
      "provisioningProfilePath": "ios/certs/shareextension-profile.mobileprovision",
      "distributionCertificate": {
        "path": "ios/certs/another-dist.p12",
        "password": "ANOTHER_DISTRIBUTION_CERTIFICATE_PASSWORD"
      }
    }
  }
}

----------------------------------------

TITLE: Setting Environment Variables in .env File
DESCRIPTION: Example of defining environment variables in a .env file using the EXPO_PUBLIC_ prefix. These variables are used for configuration like API endpoints and keys.

LANGUAGE: bash
CODE:
EXPO_PUBLIC_API_URL=https://staging.example.com
EXPO_PUBLIC_API_KEY=abc123

----------------------------------------

TITLE: iOS Encryption Compliance Configuration
DESCRIPTION: JSON configuration for setting iOS non-exempt encryption flag in app.json

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "config": {
        "usesNonExemptEncryption": false
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Code Signing in app.json
DESCRIPTION: JSON configuration for enabling code signing in an Expo app. Specifies the certificate path and signing metadata including key ID and algorithm.

LANGUAGE: json
CODE:
{
  "expo": {
    "updates": {
      "codeSigningCertificate": "./certs/certificate.pem",
      "codeSigningMetadata": {
        "keyid": "main",
        "alg": "rsa-v1_5-sha256"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Screen Orientation in Expo App Config
DESCRIPTION: JSON configuration for expo-screen-orientation plugin in app.json, including iOS requireFullScreen setting and initial orientation configuration

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "requireFullScreen": true
    },
    "plugins": [
      [
        "expo-screen-orientation",
        {
          "initialOrientation": "DEFAULT"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Camera Plugin in Expo app.json
DESCRIPTION: Example configuration for expo-camera using config plugins to set camera and microphone permissions

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing Clipboard Module in Expo
DESCRIPTION: This snippet shows how to import the Clipboard module from expo-clipboard. It's a basic import statement used to access the Clipboard functionality in an Expo project.

LANGUAGE: js
CODE:
import * as Clipboard from 'expo-clipboard';

----------------------------------------

TITLE: Importing AuthSession Module in JavaScript
DESCRIPTION: Shows how to import the AuthSession module for use in an Expo project.

LANGUAGE: javascript
CODE:
import * as AuthSession from 'expo-auth-session';

----------------------------------------

TITLE: Configuring Android Permissions
DESCRIPTION: Required Android permissions that need to be added to AndroidManifest.xml for camera and storage access

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Configuring expo-contacts plugin in app.json
DESCRIPTION: This snippet shows how to configure the expo-contacts plugin in the app.json file. It sets the contactsPermission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: SafeAreaProvider Setup
DESCRIPTION: Implementation of SafeAreaProvider at the root component level

LANGUAGE: jsx
CODE:
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}

----------------------------------------

TITLE: Importing Font Module
DESCRIPTION: Example of importing the Font module from expo-font package for use in a React Native application.

LANGUAGE: javascript
CODE:
import * as Font from 'expo-font';

----------------------------------------

TITLE: Dynamic Expo Configuration with JavaScript
DESCRIPTION: An example of app.config.js demonstrating dynamic configuration, including environment variables and custom extra fields.

LANGUAGE: javascript
CODE:
const myValue = 'My App';

module.exports = {
  name: myValue,
  version: process.env.MY_CUSTOM_PROJECT_VERSION || '1.0.0',
  // All values in extra will be passed to your app.
  extra: {
    fact: 'kittens are cool',
  },
};

----------------------------------------

TITLE: Adding Support for Multiple Prompt Values in AuthRequest
DESCRIPTION: Updated the AuthRequest to allow the 'prompt' parameter to accept multiple values as an array.

LANGUAGE: TypeScript
CODE:
interface AuthRequestConfig {
  // ...
  prompt?: string | string[];
  // ...
}

// Usage
const request = new AuthRequest({
  // ...
  prompt: ['login', 'consent']
});

----------------------------------------

TITLE: Basic Device Information Display in React Native
DESCRIPTION: Example showing how to display device manufacturer and model name using expo-device in a React Native component.

LANGUAGE: jsx
CODE:
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}

----------------------------------------

TITLE: Configuring Expo Router Plugin in app.json
DESCRIPTION: Configuration setup for enabling expo-router plugin in the Expo app configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-router"]
  }
}

----------------------------------------

TITLE: E2E Test Suite Implementation
DESCRIPTION: Implementation of E2E tests using Detox for testing button interaction

LANGUAGE: javascript
CODE:
describe('Home screen', () => {
  beforeAll(async () => {
    await device.launchApp();
  });

  beforeEach(async () => {
    await device.reloadReactNative();
  });

  it('"Click me" button should be visible', async () => {
    await expect(element(by.id('click-me-button'))).toBeVisible();
  });

  it('shows "Hi!" after tapping "Click me"', async () => {
    await element(by.id('click-me-button')).tap();
    await expect(element(by.text('Hi!'))).toBeVisible();
  });
});

----------------------------------------

TITLE: Static EAS Metadata Configuration in JSON
DESCRIPTION: Basic configuration of App Store information using a static store.config.json file. Includes localized title, subtitle, description, keywords, and various URLs for the English (US) locale.

LANGUAGE: json
CODE:
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome App",
        "subtitle": "Your self-made awesome app",
        "description": "The most awesome app you have ever seen",
        "keywords": ["awesome", "app"],
        "marketingUrl": "https://example.com/en/promo",
        "supportUrl": "https://example.com/en/support",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}

----------------------------------------

TITLE: Initial Route Configuration
DESCRIPTION: Demonstrates how to configure initial route settings for deep linking scenarios.

LANGUAGE: tsx
CODE:
export const unstable_settings = {
  // Ensure any route can link back to `/`
  initialRouteName: 'index',
};

----------------------------------------

TITLE: Adding TypeScript Lint Rules
DESCRIPTION: Adds more lint rules for TypeScript configurations from Expo server.

LANGUAGE: JavaScript
CODE:
- Bring over more lint rules from Expo server for typescript configs. ([#30491](https://github.com/expo/expo/pull/30491) by [@wschurman](https://github.com/wschurman))

----------------------------------------

TITLE: Importing SQLite Module in Expo
DESCRIPTION: Shows how to import the SQLite module from expo-sqlite/next for use in an Expo project.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite/next';

----------------------------------------

TITLE: Importing Asset from expo-asset
DESCRIPTION: This code snippet shows how to import the Asset class from the expo-asset package for use in an Expo project.

LANGUAGE: javascript
CODE:
import { Asset } from 'expo-asset';

----------------------------------------

TITLE: Implementing View Callbacks in Kotlin
DESCRIPTION: Shows how to implement view callbacks for a camera view in Kotlin, including defining events and dispatching them from the native view to JavaScript.

LANGUAGE: Kotlin
CODE:
class CameraViewModule : Module() {
  override fun definition() = ModuleDefinition {
    View(ExpoCameraView::class) {
      Events(
        "onCameraReady"
      )

      // ...
    }
  }
}

class CameraView(
  context: Context,
  appContext: AppContext
) : ExpoView(context, appContext) {
  val onCameraReady by EventDispatcher()

  fun callOnCameraReady() {
    onCameraReady(mapOf(
      "message" to "Camera was mounted"
    ));
  }
}

----------------------------------------

TITLE: Importing Asset from expo-asset
DESCRIPTION: This code snippet shows how to import the Asset class from the expo-asset package for use in an Expo project.

LANGUAGE: javascript
CODE:
import { Asset } from 'expo-asset';

----------------------------------------

TITLE: Installing expo-image-picker Package
DESCRIPTION: Command to install the expo-image-picker package using npx expo install

LANGUAGE: bash
CODE:
npx expo install expo-image-picker

----------------------------------------

TITLE: Enabling Metro Web Support in app.json
DESCRIPTION: Enable Metro web support by adding the 'web' configuration in app.json for Expo Router projects.

LANGUAGE: json
CODE:
{
  "web": {
    "bundler": "metro"
  }
}

----------------------------------------

TITLE: Creating Expo Projects with Templates
DESCRIPTION: Shows how to use Create Expo App with templates, including selecting from Expo's templates and specifying a particular template.

LANGUAGE: sh
CODE:
# Pick from Expo's templates
npx create-expo --template

# Pick the expo-template-tabs template
npx create-expo --template tabs

----------------------------------------

TITLE: BlurView Import Statement
DESCRIPTION: Shows how to import the BlurView component from the expo-blur package.

LANGUAGE: js
CODE:
import { BlurView } from 'expo-blur';

----------------------------------------

TITLE: Configuring iOS Permissions
DESCRIPTION: iOS Info.plist configuration for camera and microphone usage descriptions.

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the camera</string>
<key>NSMicrophoneUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the microphone</string>

----------------------------------------

TITLE: Writing Jest Unit Tests
DESCRIPTION: Example of writing unit tests for React Native components using @testing-library/react-native

LANGUAGE: tsx
CODE:
import { render } from '@testing-library/react-native';

import HomeScreen, { CustomText } from '@/app/index';

describe('<HomeScreen />', () => {
  test('Text renders correctly on HomeScreen', () => {
    const { getByText } = render(<HomeScreen />);

    getByText('Welcome!');
  });
});

----------------------------------------

TITLE: Writing Jest Unit Tests
DESCRIPTION: Example of writing unit tests for React Native components using @testing-library/react-native

LANGUAGE: tsx
CODE:
import { render } from '@testing-library/react-native';

import HomeScreen, { CustomText } from '@/app/index';

describe('<HomeScreen />', () => {
  test('Text renders correctly on HomeScreen', () => {
    const { getByText } = render(<HomeScreen />);

    getByText('Welcome!');
  });
});

----------------------------------------

TITLE: Setting Runtime Version Policy in JSON
DESCRIPTION: Example of configuring runtime version using policies in app.json.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": {
      "policy": "<policy_name>"
    }
  }
}

----------------------------------------

TITLE: Reading Native Config Values in Swift
DESCRIPTION: Enhanced iOS module implementation that reads custom API key from Info.plist

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoNativeConfigurationModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoNativeConfiguration")

    Function("getApiKey") {
     return Bundle.main.object(forInfoDictionaryKey: "MY_CUSTOM_API_KEY") as? String
    }
  }
}

----------------------------------------

TITLE: Configuring Sentry with EAS Update Metadata
DESCRIPTION: Add EAS Update-related metadata to Sentry error reports. This allows you to see errors associated with specific updates in the Sentry dashboard.

LANGUAGE: javascript
CODE:
import * as Sentry from '@sentry/react-native';
import * as Updates from 'expo-updates';

const manifest = Updates.manifest;
const metadata = 'metadata' in manifest ? manifest.metadata : undefined;
const extra = 'extra' in manifest ? manifest.extra : undefined;
const updateGroup = metadata && 'updateGroup' in metadata ? metadata.updateGroup : undefined;

Sentry.init({
  // dsn, release, dist, etc...
});

const scope = Sentry.getGlobalScope();

scope.setTag('expo-update-id', Updates.updateId);
scope.setTag('expo-is-embedded-update', Updates.isEmbeddedLaunch);

if (typeof updateGroup === 'string') {
  scope.setTag('expo-update-group-id', updateGroup);

  const owner = extra?.expoClient?.owner ?? '[account]';
  const slug = extra?.expoClient?.slug ?? '[project]';
  scope.setTag(
    'expo-update-debug-url',
    `https://expo.dev/accounts/${owner}/projects/${slug}/updates/${updateGroup}`
  );
} else if (Updates.isEmbeddedLaunch) {
  scope.setTag('expo-update-debug-url', 'not applicable for embedded updates');
}

----------------------------------------

TITLE: Updating Podfile for iOS
DESCRIPTION: Modifies the Podfile to include Expo module autolinking and configuration for iOS.

LANGUAGE: diff
CODE:

diff --git a/ios/Podfile b/ios/Podfile
index f991b7b..17c24b0 100644
--- a/ios/Podfile
+++ b/ios/Podfile
@@ -1 +1,4 @@
+# Expo requires
+require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`)\, "scripts/autolinking")
+
 # Resolve react_native_pods.rb with node to allow for hoisting
@@ -17,3 +20,16 @@ end
 target '<YourAppTarget>' do
-  config = use_native_modules!()
+  # Need to be added inside the target block
+  use_expo_modules!
+
+  config_command = [
+    'node',
+    '--no-warnings',
+    '--eval',
+    'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
+    'react-native-config',
+    '--json',
+    '--platform',
+    'ios'
+  ]
+  config = use_native_modules!(config_command)


----------------------------------------

TITLE: Importing Contacts Module in JavaScript
DESCRIPTION: Shows how to import the Contacts module from expo-contacts in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as Contacts from 'expo-contacts';

----------------------------------------

TITLE: Importing DeviceMotion from expo-sensors
DESCRIPTION: Example showing how to import the DeviceMotion module from the expo-sensors package.

LANGUAGE: javascript
CODE:
import { DeviceMotion } from 'expo-sensors';

----------------------------------------

TITLE: Importing expo-sqlite Module
DESCRIPTION: Shows how to import the expo-sqlite module in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as SQLite from 'expo-sqlite';

----------------------------------------

TITLE: Configuring Apple Sign In in Expo Config
DESCRIPTION: JSON configuration to enable Sign In with Apple capability in an Expo app through the ios.usesAppleSignIn property.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "usesAppleSignIn": true
    }
  }
}

----------------------------------------

TITLE: Setting Page Margins in HTML for Android Printing
DESCRIPTION: This HTML snippet demonstrates how to set page margins using CSS when printing on Android with expo-print.

LANGUAGE: html
CODE:
<style>
  @page {
    margin: 20px;
  }
</style>

----------------------------------------

TITLE: Creating URLs with Linking.createURL in Expo
DESCRIPTION: This example demonstrates how to use Linking.createURL to generate a URL that can be used to open or redirect back to your app, with optional parameters.

LANGUAGE: typescript
CODE:
const redirectUrl = Linking.createURL('path/into/app', {
  queryParams: { hello: 'world' },
});

----------------------------------------

TITLE: Opening URLs with expo-linking in React Native
DESCRIPTION: This snippet demonstrates how to use the expo-linking API to open a URL in the default browser of the operating system.

LANGUAGE: typescript
CODE:
import { Button, View, StyleSheet } from 'react-native';
import * as Linking from 'expo-linking';

export default function Home() {
  return (
    <View style={styles.container}>
      <Button title="Open a URL" onPress={() => Linking.openURL('https://expo.dev/')} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Running Expo Environment Info CLI
DESCRIPTION: Demonstrates how to use the Expo Environment Info package via CLI. It shows the basic usage pattern with optional arguments for path and options.

LANGUAGE: sh
CODE:
# Usage
npx expo-env-info [options] [path]

----------------------------------------

TITLE: Handling Local Images for Printing in React Native
DESCRIPTION: This code demonstrates how to convert local images to base64 for inline use in HTML printing on iOS, addressing WKWebView limitations.

LANGUAGE: js
CODE:
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });
  return `
    <html>
      <img
        src="data:image/jpeg;base64,${image.base64}"
        style="width: 90vw;" />
    </html>
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}

----------------------------------------

TITLE: Installing EAS CLI
DESCRIPTION: Command to install the latest version of EAS CLI globally using npm.

LANGUAGE: bash
CODE:
$ npm install -g eas-cli

----------------------------------------

TITLE: Configuring root package.json for Yarn workspaces
DESCRIPTION: Set up the root package.json file for a monorepo using Yarn workspaces. This configuration specifies the workspace directories and marks the package as private.

LANGUAGE: json
CODE:
{
  "private": true,
  "name": "monorepo",
  "version": "1.0.0",
  "workspaces": ["apps/*", "packages/*"]
}

----------------------------------------

TITLE: Publishing Preview Updates Workflow in YAML
DESCRIPTION: This YAML workflow publishes a preview update for every commit on every branch. It uses the EAS Update system to create and distribute these preview builds.

LANGUAGE: yaml
CODE:
name: Publish preview update

on:
  push:
    branches: ['*']

jobs:
  publish_preview_update:
    name: Publish preview update
    type: update
    params:
      branch: ${{ github.ref_name || 'test' }}

----------------------------------------

TITLE: Importing Lottie Component
DESCRIPTION: Basic import statement for the Lottie component from lottie-react-native package.

LANGUAGE: javascript
CODE:
import LottieView from 'lottie-react-native';

----------------------------------------

TITLE: Configuring DocumentPicker with iCloud Storage in Expo Config
DESCRIPTION: This snippet shows how to configure the expo-document-picker plugin in the app.json file to enable iCloud storage features. It sets the iCloudContainerEnvironment to 'Production'.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing IntentLauncher Module
DESCRIPTION: Shows how to import the full IntentLauncher module for use in JavaScript applications.

LANGUAGE: javascript
CODE:
import * as IntentLauncher from 'expo-intent-launcher';

----------------------------------------

TITLE: Installing expo-document-picker in bare React Native projects
DESCRIPTION: Command to install the expo-document-picker package using npm in a bare React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-document-picker

----------------------------------------

TITLE: Adding Session Extension Support in expo-sqlite
DESCRIPTION: Added support for SQLite Session Extension, which allows tracking changes to a database.

LANGUAGE: JavaScript
CODE:
// No code snippet provided in the changelog

----------------------------------------

TITLE: Installing expo-background-fetch in bare React Native projects
DESCRIPTION: This command installs the expo-background-fetch package using npx and expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-background-fetch

----------------------------------------

TITLE: Editing a Per-Update Rollout Percentage in Expo
DESCRIPTION: This command allows you to edit the percentage of an existing per-update rollout in Expo.

LANGUAGE: bash
CODE:
$ eas update:edit

----------------------------------------

TITLE: Package.json Build Script Configuration
DESCRIPTION: Build script configuration in package.json for Vercel deployment.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "next build"
  }
}

----------------------------------------

TITLE: Installing expo-image-loader in bare React Native projects
DESCRIPTION: This command installs the expo-image-loader package using npm. It is used for adding the package to bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npm install expo-image-loader

----------------------------------------

TITLE: Importing SVG Components in React Native
DESCRIPTION: Basic example showing how to import SVG components from react-native-svg library.

LANGUAGE: javascript
CODE:
import * as Svg from 'react-native-svg';

----------------------------------------

TITLE: Example React Component Implementation in JSX
DESCRIPTION: Demonstrates a complete React component implementation following Expo's JavaScript style guide, including imports, prop types, styling, and event handling.

LANGUAGE: JSX
CODE:
import Expo from 'expo';
import PropTypes from 'prop-types';
import React from 'react';
import { StyleSheet, Text } from 'react-native';

import Log from '../log/Log';
import Colors from '../style/Colors';

export default class GreetingText extends React.PureComponent {
  static propTypes = {
    greeting: PropTypes.string.isRequired,
    ...Text.propTypes,
  };

  componentDidUpdate() {
    Log.info('The greeting was re-rendered');
  }

  render() {
    let { greeting, style, ...props } = this.props;
    return (
      <Text {...props} onPress={this._handlePress} style={[styles.greeting, style]}>
        {greeting}
      </Text>
    );
  }

  _handlePress = event => {
    alert('Congratulations!');
  };
}

const styles = StyleSheet.create({
  greeting: {
    color: Colors.energetic,
    fontSize: 30,
  },
});

----------------------------------------

TITLE: Generating Dynamic App Identifiers for Expo Variants
DESCRIPTION: These functions generate unique app identifiers and names based on the build type for different app variants in Expo projects.

LANGUAGE: javascript
CODE:
const getUniqueIdentifier = () => {
  if (IS_DEV) {
    return 'com.yourname.stickersmash.dev';
  }

  if (IS_PREVIEW) {
    return 'com.yourname.stickersmash.preview';
  }

  return 'com.yourname.stickersmash';
};

const getAppName = () => {
  if (IS_DEV) {
    return 'StickerSmash (Dev)';
  }

  if (IS_PREVIEW) {
    return 'StickerSmash (Preview)';
  }

  return 'StickerSmash: Emoji Stickers';
};

----------------------------------------

TITLE: Build Tool Version Configuration
DESCRIPTION: Example showing how to specify Node.js version for builds and share configurations between profiles using extends.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "node": "18.18.0"
    },
    "preview": {
      "extends": "production",
      "distribution": "internal"
    },
    "development": {
      "extends": "production",
      "developmentClient": true,
      "distribution": "internal"
    }
  }
}

----------------------------------------

TITLE: ImagePicker Response Structure
DESCRIPTION: Example of the response object returned when an image is selected using ImagePicker

LANGUAGE: json
CODE:
{
  "assets": [
    {
      "assetId": "C166F9F5-B5FE-4501-9531",
      "base64": null,
      "duration": null,
      "exif": null,
      "fileName": "IMG.HEIC",
      "fileSize": 6018901,
      "height": 3025,
      "type": "image",
      "uri": "file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg"
      "width": 3024
    }
  ],
  "canceled": false
}

----------------------------------------

TITLE: WebBrowser Import Statement
DESCRIPTION: Shows how to import the WebBrowser module from expo-web-browser package.

LANGUAGE: javascript
CODE:
import * as WebBrowser from 'expo-web-browser';

----------------------------------------

TITLE: Setting up Animated Components for Emoji Sticker
DESCRIPTION: Configures an animated image component using react-native-reanimated to enable gesture animations on the emoji sticker.

LANGUAGE: tsx
CODE:
import { View } from 'react-native';
import Animated from 'react-native-reanimated';
import { type ImageSource } from 'expo-image';

type Props = {
  imageSize: number;
  stickerSource: ImageSource;
};

export default function EmojiSticker({ imageSize, stickerSource }: Props) {
  return (
    <View style={{ top: -350 }}>
      <Animated.Image
        source={stickerSource}
        resizeMode="contain"
        style={{ width: imageSize, height: imageSize }}
      />
    </View>
  );
}

----------------------------------------

TITLE: ImagePicker Result Object Structure
DESCRIPTION: Example of the result object returned when an image is picked using expo-image-picker, showing all available properties.

LANGUAGE: json
CODE:
{
  "assets": [
    {
      "assetId": "C166F9F5-B5FE-4501-9531",
      "base64": null,
      "duration": null,
      "exif": null,
      "fileName": "IMG.HEIC",
      "fileSize": 6018901,
      "height": 3025,
      "type": "image",
      "uri": "file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg"
      "width": 3024
    }
  ],
  "canceled": false
}

----------------------------------------

TITLE: Advanced SplashScreen with Resource Loading
DESCRIPTION: Implementation example showing splash screen with async resource loading and controlled hiding

LANGUAGE: tsx
CODE:
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';

export default class App extends React.Component {
  state = {
    appIsReady: false,
  };

  async componentDidMount() {
    try {
      await SplashScreen.preventAutoHideAsync();
    } catch (e) {
      console.warn(e);
    }
    this.prepareResources();
  }

  prepareResources = async () => {
    await performAPICalls(...);
    await downloadAssets(...);

    this.setState({ appIsReady: true }, async () => {
      await SplashScreen.hideAsync();
    });
  }

  render() {
    if (!this.state.appIsReady) {
      return null;
    }

    return (
      <View style={styles.container}>
        <Text style={styles.text}>SplashScreen Demo! 👋</Text>
      </View>
    )
  }
}

----------------------------------------

TITLE: Configuring expo-localization in app.json
DESCRIPTION: Example of how to configure expo-localization using its built-in config plugin in the app.json file. This is necessary for projects using config plugins, such as EAS Build or when running expo run commands.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-localization"]
  }
}

----------------------------------------

TITLE: Configuring Android Intent Filters in app.json
DESCRIPTION: Configuration for app.json to enable Android App Links by setting up intent filters with autoVerify flag and defining URL scheme patterns.

LANGUAGE: json
CODE:
{
  "expo": {
    "android": {
      "intentFilters": [
        {
          "action": "VIEW",
          "autoVerify": true,
          "data": [
            {
              "scheme": "https",
              "host": "*.webapp.io",
              "pathPrefix": "/records"
            }
          ],
          "category": ["BROWSABLE", "DEFAULT"]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Generating Expo Project README with Template Literals
DESCRIPTION: This snippet demonstrates the use of template literals to dynamically insert a project slug and description into a markdown file. It's likely part of a project generation or documentation system for Expo projects.

LANGUAGE: markdown
CODE:
# <%- project.slug %>

<%- project.description %>

----------------------------------------

TITLE: Video Component Import Statement
DESCRIPTION: Basic import statement for the Video component from expo-av package.

LANGUAGE: js
CODE:
import { Video } from 'expo-av';

----------------------------------------

TITLE: Running EAS Build for iOS
DESCRIPTION: Command to start an EAS Build for the iOS platform.

LANGUAGE: bash
CODE:
$ eas build --platform ios

----------------------------------------

TITLE: Configuring Metro Bundler for Static Rendering
DESCRIPTION: Configuration setup in app.json to enable Metro bundler and static rendering for web output.

LANGUAGE: json
CODE:
{
  "expo": {
    "web": {
      "bundler": "metro",
      "output": "static"
    }
  }
}

----------------------------------------

TITLE: Creating PWA Manifest File
DESCRIPTION: Defines a manifest.json file for a Progressive Web App, specifying app name, icons, and other metadata.

LANGUAGE: json
CODE:
{
  "short_name": "Expo App",
  "name": "Expo Router Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

----------------------------------------

TITLE: Configuring Static Redirects in Expo Router (JSON)
DESCRIPTION: This snippet shows how to configure static redirects in the app.json file using the expo-router config plugin. It specifies a redirect from one route to another.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-router",
      "redirects": [{
        "source": "/redirect/from/here",
        "destination": "/to/this/route"
      }]
    ]
  ]
}

----------------------------------------

TITLE: Configuring Android permissions for expo-location
DESCRIPTION: XML configuration for adding required and optional location permissions to the Android manifest file.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

<!-- Optional permissions -->
<uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
<uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />

----------------------------------------

TITLE: Handling Local Images in Expo Print
DESCRIPTION: This snippet demonstrates how to handle local images when printing HTML content using expo-print on iOS. It converts the image to base64 and inlines it in the HTML.

LANGUAGE: js
CODE:
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });
  return `
    <html>
      <img
        src="data:image/jpeg;base64,${image.base64}"
        style="width: 90vw;" />
    </html>
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}

----------------------------------------

TITLE: Creating index.js for EXPO_ROUTER_APP_ROOT Issue in Expo Router
DESCRIPTION: This code snippet demonstrates how to create an index.js file to circumvent the EXPO_ROUTER_APP_ROOT not defined issue. It imports necessary components, creates an App function, and registers the root component.

LANGUAGE: jsx
CODE:
import { registerRootComponent } from 'expo';
import { ExpoRoot } from 'expo-router';

// Must be exported or Fast Refresh won't update the context
export function App() {
  const ctx = require.context('./app');
  return <ExpoRoot context={ctx} />;
}

registerRootComponent(App);

----------------------------------------

TITLE: Importing Expo Speech Module
DESCRIPTION: This snippet shows how to import the expo-speech module in a JavaScript or TypeScript file. This import statement is necessary to use the Speech API in your Expo project.

LANGUAGE: js
CODE:
import * as Speech from 'expo-speech';

----------------------------------------

TITLE: Importing Expo Speech Module
DESCRIPTION: This snippet shows how to import the expo-speech module in a JavaScript or TypeScript file. This import statement is necessary to use the Speech API in your Expo project.

LANGUAGE: js
CODE:
import * as Speech from 'expo-speech';

----------------------------------------

TITLE: Unicode URL Handling in Expo
DESCRIPTION: Example showing platform differences in handling non-ASCII characters in URLs, specifically demonstrating how different platforms handle emoji in hostnames.

LANGUAGE: javascript
CODE:
console.log(new URL('http://🥓').toString());

----------------------------------------

TITLE: Implementing Screen Capture Callback in Expo
DESCRIPTION: This snippet demonstrates how to set up a callback for detecting screen captures in an Expo app, including permission handling for Android.

LANGUAGE: jsx
CODE:
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function useScreenCaptureCallback() {
  // Only use this if you add the READ_MEDIA_IMAGES permission to your AndroidManifest.xml
  const hasPermissions = async () => {
    const { status } = await ScreenCapture.requestPermissionsAsync();
    return status === 'granted';
  };

  useEffect(() => {
    let subscription;

    const addListenerAsync = async () => {
      if (await hasPermissions()) {
        subscription = ScreenCapture.addScreenshotListener(() => {
          alert('Thanks for screenshotting my beautiful app 😊');
        });
      } else {
        console.error('Permissions needed to subscribe to screenshot events are missing!');
      }
    };
    addListenerAsync();

    return () => {
      subscription?.remove();
    };
  }, []);
}

----------------------------------------

TITLE: React Navigation to Expo Router Layout Migration
DESCRIPTION: Example demonstrating how to migrate from React Navigation's navigator structure to Expo Router's file-based routing system

LANGUAGE: jsx
CODE:
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen
        name="(home)"
        options={{
          title: 'Home Screen',
        }}
      />
    </Stack>
  );
}

----------------------------------------

TITLE: Creating Redirects for Netlify Single-Page Applications
DESCRIPTION: Configures redirects for single-page applications in Netlify by creating a _redirects file.

LANGUAGE: sh
CODE:
/*    /index.html   200

----------------------------------------

TITLE: Importing TaskManager Module
DESCRIPTION: Basic import statement for using the TaskManager module in an Expo application.

LANGUAGE: js
CODE:
import * as TaskManager from 'expo-task-manager';

----------------------------------------

TITLE: Implementing Media Looping Logic
DESCRIPTION: Example showing how to implement precise control over media looping, specifically to loop exactly 20 times.

LANGUAGE: javascript
CODE:
const N = 20;

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
    if (this.state.numberOfLoops == N - 1) {
      playbackObject.setIsLooping(false);
    }
    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
  }
};

this.setState({ numberOfLoops: 0 });
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);

----------------------------------------

TITLE: Configuring SSID Access in app.json for iOS
DESCRIPTION: This JSON configuration adds the necessary entitlement to access SSID information on iOS devices.

LANGUAGE: json
CODE:
{
  "ios": {
    "entitlements": {
      "com.apple.developer.networking.wifi-info": true
    }
  }
}

----------------------------------------

TITLE: Importing Xcode Instructions Component in React
DESCRIPTION: Imports a React component containing Xcode setup instructions from a local MDX file.

LANGUAGE: jsx
CODE:
import XcodeInstructions from './_xcodeInstructions.mdx';

----------------------------------------

TITLE: Extracting Certificate from Conventional PKCS#12 File in JavaScript
DESCRIPTION: This snippet demonstrates how to parse a base64 encoded PKCS#12 file, extract a certificate, and generate a SHA-1 fingerprint. It uses functions like parsePKCS12, getX509Certificate, and getCertificateFingerprint.

LANGUAGE: javascript
CODE:
const p12 = parsePKCS12(base64EncodedP12, password); // deserializes encodedP12
const certificate = getX509Certificate(p12); // extracts single certificate from p12
const sha1Fingerprint = getCertificateFingerprint(certificate, {
  hashAlgorithm: 'sha1',
}); // Hash like 02ec75a7181c575757baa931fe3105b7125ff10a

----------------------------------------

TITLE: HTML Camera iframe Configuration
DESCRIPTION: HTML snippet showing how to configure an iframe to support camera usage in Chrome 64+ browsers.

LANGUAGE: html
CODE:
<iframe src="..." allow="microphone; camera;">
  <!-- <CameraView /> -->
</iframe>

----------------------------------------

TITLE: Adding Android Media Location Permission
DESCRIPTION: Optional permission required for accessing asset location (latitude and longitude EXIF tags)

LANGUAGE: xml
CODE:
<!-- Add this to AndroidManifest.xml -->
<uses-permission android:name="android.permission.ACCESS_MEDIA_LOCATION" />

----------------------------------------

TITLE: Linking to iOS App Store Reviews
DESCRIPTION: Example showing how to redirect users to the iOS App Store review section using Linking API with the write-review action parameter. Shows both browser and direct store redirection methods.

LANGUAGE: typescript
CODE:
const itunesItemId = 982107779;
// Open the iOS App Store in the browser -> redirects to App Store on iOS
Linking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);
// Open the iOS App Store directly
Linking.openURL(
  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`
);

----------------------------------------

TITLE: Installing Native Library in Expo Development Build
DESCRIPTION: This snippet demonstrates how to install a library with custom native code in an Expo development build. It shows the command to install the 'react-native-localize' library using npm.

LANGUAGE: bash
CODE:
npx expo install react-native-localize

----------------------------------------

TITLE: Client-Side API Route Integration
DESCRIPTION: Example of making API requests from client-side React Native code using fetch.

LANGUAGE: typescript
CODE:
import { Button } from 'react-native';

async function fetchHello() {
  const response = await fetch('/hello');
  const data = await response.json();
  alert('Hello ' + data.hello);
}

export default function App() {
  return <Button onPress={() => fetchHello()} title="Fetch hello" />;
}

----------------------------------------

TITLE: Configuring Multiple Profiles for EAS Submit in JSON
DESCRIPTION: This snippet shows how to configure multiple submit profiles in the eas.json file. It includes placeholders for Android and iOS-specific configurations and demonstrates profile extension.

LANGUAGE: json
CODE:
{
  "cli": {
    "version": "SEMVER_RANGE",
    "requireCommit": "boolean"
  },
  "build": {
    
  },
  "submit": {
    "SUBMIT_PROFILE_NAME_1": {
      "android": {
        "...ANDROID_OPTIONS"
      },
      "ios": {
        "...IOS_OPTIONS"
      }
    },
    "SUBMIT_PROFILE_NAME_2": {
      "extends": "SUBMIT_PROFILE_NAME_1",
      "android": {
        "...ANDROID_OPTIONS"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Metro to Remove Console Logs in Production
DESCRIPTION: This snippet demonstrates how to modify the Metro configuration to remove all console log statements in production builds using the Terser minifier.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.transformer.minifierConfig = {
  compress: {
    // The option below removes all console logs statements in production.
    drop_console: true,
  },
};

module.exports = config;

----------------------------------------

TITLE: Importing ImagePicker Module
DESCRIPTION: Basic import statement for using the ImagePicker module in your project

LANGUAGE: javascript
CODE:
import * as ImagePicker from 'expo-image-picker';

----------------------------------------

TITLE: Importing MediaLibrary Module
DESCRIPTION: Basic import statement for the MediaLibrary module from expo-media-library package.

LANGUAGE: javascript
CODE:
import * as MediaLibrary from 'expo-media-library';

----------------------------------------

TITLE: Configuring Modal Stack Screen in Expo Router
DESCRIPTION: Setup of stack navigator layout with modal screen configuration using presentation mode.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function Layout() {
  return (
    <Stack>
      <Stack.Screen name="index" />
      <Stack.Screen
        name="modal"
        options={{
          presentation: 'modal',
        }}
      />
    </Stack>
  );
}

----------------------------------------

TITLE: Configuring Stripe Plugin in Expo App Config
DESCRIPTION: Configuration setup for @stripe/stripe-react-native plugin in app.json or app.config.js. Includes settings for merchant identifier and Google Pay enablement.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": string | string [],
          "enableGooglePay": boolean
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Configuring UIBackgroundModes for iOS
DESCRIPTION: XML configuration to enable background location mode in the iOS Info.plist file.

LANGUAGE: xml
CODE:
<key>UIBackgroundModes</key>
<array>
  <string>location</string>
</array>

----------------------------------------

TITLE: Platform-Specific Async Routes Configuration
DESCRIPTION: Extended configuration showing how to set platform-specific settings for async routes in app.json including android, web, and default options.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-router",
        {
          "origin": "https://acme.com",
          "asyncRoutes": {
            "web": true,
            "android": false,
            "default": "development"
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Dynamic Layout with Segment-based Routing in Expo Router
DESCRIPTION: A TypeScript React component that demonstrates conditional layout rendering based on the segment prop, used to distinguish between different route groups in a shared route setup.

LANGUAGE: tsx
CODE:
export default function DynamicLayout({ segment }) {
  if (segment === '(search)') {
    return <SearchStack />;
  }

  return <Stack />;
}

----------------------------------------

TITLE: Sourcing Node.js Binary Path in Xcode Build Scripts
DESCRIPTION: A bash script for sourcing the Node.js binary path from .xcode.env and .xcode.env.local files for use in Xcode build phase scripts.

LANGUAGE: bash
CODE:
source-login-scripts.sh

----------------------------------------

TITLE: Importing Lottie View Component
DESCRIPTION: Basic import statement for the LottieView component from the lottie-react-native package.

LANGUAGE: javascript
CODE:
import LottieView from 'lottie-react-native';

----------------------------------------

TITLE: Basic Camera Implementation in React Native/Expo
DESCRIPTION: Complete example showing how to implement a basic camera view with permission handling and camera flipping functionality using the expo-camera package.

LANGUAGE: typescript
CODE:
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    return <View />;
  }

  if (!permission.granted) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

----------------------------------------

TITLE: Using SafeAreaView Component
DESCRIPTION: Example of using SafeAreaView component to automatically handle safe area insets.

LANGUAGE: jsx
CODE:
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Capturing FullHD Screenshot in React Native
DESCRIPTION: Example of capturing a 1080x1080 screenshot while accounting for device pixel ratio. The code demonstrates how to properly calculate dimensions and set capture options for high-quality image output.

LANGUAGE: javascript
CODE:
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});

----------------------------------------

TITLE: Creating a Shared Stack Layout for Multiple Tabs in Expo Router
DESCRIPTION: This code demonstrates how to create a shared stack layout that can be used by multiple tabs. It uses the Stack component from expo-router.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function SharedLayout() {
  return <Stack />;
}

----------------------------------------

TITLE: Configuring expo-notifications plugin in app.json
DESCRIPTION: JSON configuration for expo-notifications plugin in app.json to set notification icon, color, sounds and environment

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/path/to/myNotificationIcon.png",
          "color": "#ffffff",
          "sounds": ["./local/path/to/mySound.wav", "./local/path/to/myOtherSound.wav"],
          "mode": "production"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring expo-media-library plugin in app.json
DESCRIPTION: Example configuration for the expo-media-library plugin in the app.json file. It sets custom permission messages and enables access to media location on Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-media-library",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
          "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
          "isAccessMediaLocationEnabled": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Using CSS Environment Variables for Safe Area Insets
DESCRIPTION: This CSS snippet demonstrates how to use CSS environment variables to apply safe area insets in a web-only application.

LANGUAGE: css
CODE:
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}

----------------------------------------

TITLE: Importing Accelerometer from expo-sensors in JavaScript
DESCRIPTION: This snippet shows how to import the Accelerometer module from expo-sensors package in a JavaScript file.

LANGUAGE: js
CODE:
import { Accelerometer } from 'expo-sensors';

----------------------------------------

TITLE: Importing captureRef in React Native
DESCRIPTION: Basic import statement for the captureRef function from react-native-view-shot package.

LANGUAGE: javascript
CODE:
import { captureRef } from 'react-native-view-shot';

----------------------------------------

TITLE: Importing StoreReview Module in JavaScript
DESCRIPTION: This snippet shows how to import the StoreReview module from the expo-store-review package in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as StoreReview from 'expo-store-review';

----------------------------------------

TITLE: Installing expo-sensors package
DESCRIPTION: Command to install the expo-sensors package using npx expo install. This command should be run in the root directory of your React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-sensors

----------------------------------------

TITLE: Loading Assets at Runtime with useAssets Hook
DESCRIPTION: This example demonstrates how to use the useAssets hook from expo-asset to load assets asynchronously at runtime. It loads two image assets and renders the first one if available.

LANGUAGE: typescript
CODE:
import { useAssets } from 'expo-asset';

export default function HomeScreen() {
  const [assets, error] = useAssets([
    require('path/to/example-1.jpg'),
    require('path/to/example-2.png'),
  ]);

  return assets ? <Image source={assets[0]} /> : null;
}

----------------------------------------

TITLE: Importing SMS Module in Expo
DESCRIPTION: Basic import statement for using the expo-sms package in an Expo application. This import provides access to all SMS-related functionality.

LANGUAGE: javascript
CODE:
import * as SMS from 'expo-sms';

----------------------------------------

TITLE: Basic Image Picker Implementation in React Native
DESCRIPTION: Complete example of implementing image picking functionality in a React Native component, including UI and image display

LANGUAGE: typescript
CODE:
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});

----------------------------------------

TITLE: Configuring expo-location plugin in app.json
DESCRIPTION: Example of how to configure the expo-location plugin in the app.json file to set iOS permission messages and enable background location.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Uglify Minifier in Metro for Expo CLI
DESCRIPTION: This snippet demonstrates how to set up and configure the Uglify minifier in the Metro configuration file for an Expo project using SDK 48 and above.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.transformer.minifierPath = 'metro-minify-uglify';
config.transformer.minifierConfig = {
  // Options: https://github.com/mishoo/UglifyJS#compress-options
};

module.exports = config;

----------------------------------------

TITLE: Importing Expo Package in TypeScript
DESCRIPTION: Shows how to import all exports from the Expo package.

LANGUAGE: tsx
CODE:
import * as Expo from 'expo';

----------------------------------------

TITLE: Configuring iOS Podfile for Expo Modules
DESCRIPTION: Configuration for iOS Podfile to enable autolinking of native dependencies in Expo modules. Requires running pod install after implementation.

LANGUAGE: ruby
CODE:
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('expo-modules-core/package.json')"`), "cocoapods.rb")
require File.join(File.dirname(`node --print "require.resolve('expo-modules-core/package.json')"`), "scripts/autolinking")

#  ...

target "TargetName" do
  use_unimodules!
  config = use_native_modules!
  use_react_native!(:path => config["reactNativePath"])

  # ...
end

----------------------------------------

TITLE: Implementing Image Selection in React Native with Expo Image Picker
DESCRIPTION: Function to launch the device's image library and handle the selected image using Expo Image Picker.

LANGUAGE: typescript
CODE:
import * as ImagePicker from 'expo-image-picker';

export default function Index() {
  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      console.log(result);
    } else {
      alert('You did not select any image.');
    }
  };

  // ...rest of the code remains same
}

----------------------------------------

TITLE: Plugin Configuration for EAS Build
DESCRIPTION: JSON configuration to enable the expo-apple-authentication plugin for EAS Build

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-apple-authentication"]
  }
}

----------------------------------------

TITLE: Configuring Dynamic Route Redirects in Expo Router (JSON)
DESCRIPTION: This example demonstrates how to set up redirects for dynamic routes using the dynamic route syntax in the app.json configuration.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-router",
      "redirects": [{
        "source": "/redirect/[slug]",
        "destination": "/target/[slug]"
      }]
    ]
  ]
}

----------------------------------------

TITLE: Configuring Font Plugin in Expo Config
DESCRIPTION: JSON configuration for the expo-font config plugin to embed font files at build time.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["path/to/file.ttf"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Manifest Type Definition
DESCRIPTION: TypeScript interface defining the structure of the update manifest, including update metadata, assets, and runtime requirements.

LANGUAGE: typescript
CODE:
type Manifest = {
  id: string;
  createdAt: string;
  runtimeVersion: string;
  launchAsset: Asset;
  assets: Asset[];
  metadata: { [key: string]: string };
  extra: { [key: string]: any };
};

type Asset = {
  hash?: string;
  key: string;
  contentType: string;
  fileExtension?: string;
  url: string;
};

----------------------------------------

TITLE: Passing Binary Data to SQLite in TypeScript
DESCRIPTION: Demonstrates how to pass and retrieve binary data using Uint8Array with expo-sqlite.

LANGUAGE: typescript
CODE:
await db.execAsync(`
DROP TABLE IF EXISTS blobs;
CREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);
`);

const blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);
await db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);

const row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');
expect(row.data).toEqual(blob);

----------------------------------------

TITLE: Importing Cellular Module in JavaScript
DESCRIPTION: Demonstrates how to import the Cellular module from expo-cellular package to access cellular service provider information.

LANGUAGE: javascript
CODE:
import * as Cellular from 'expo-cellular';

----------------------------------------

TITLE: Creating a Ref for Screenshot Capture in React Native
DESCRIPTION: This code shows how to create a ref for the view to be captured as a screenshot, and how to wrap the components inside a View with the ref attached.

LANGUAGE: typescript
CODE:
import { useState, useRef } from 'react';
import { captureRef } from 'react-native-view-shot';

export default function Index() {
  const imageRef = useRef<View>(null);

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.imageContainer}>
        <View ref={imageRef} collapsable={false}>
          <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />
          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}
        </View>
      </View>
      {/* ...rest of the code remains same */}
    </GestureHandlerRootView>
  );
}

----------------------------------------

TITLE: Platform-Specific Module Aliasing in Metro
DESCRIPTION: Demonstrates how to apply module aliases only for specific platforms (e.g., web) in the Metro configuration.

LANGUAGE: javascript
CODE:
config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (platform === 'web') {
    // The alias will only be used when bundling for the web.
    return context.resolveRequest(context, ALIASES[moduleName] ?? moduleName, platform);
  }
  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

----------------------------------------

TITLE: KeyboardController Provider Setup
DESCRIPTION: Setup of KeyboardProvider wrapper component for advanced keyboard handling functionality.

LANGUAGE: typescript
CODE:
import { Stack } from 'expo-router';
import { KeyboardProvider } from 'react-native-keyboard-controller';

export default function RootLayout() {
  return (
    <KeyboardProvider>
      <Stack>
        <Stack.Screen name="home" />
        <Stack.Screen name="chat" />
      </Stack>
    </KeyboardProvider>
  );
}

----------------------------------------

TITLE: Assigning Singular Constraint on Stack Navigator in Expo
DESCRIPTION: This snippet demonstrates how to create a singular constraint for the [profile] page in the stack navigator. It ensures that each profile page is unique based on the profile parameter.

LANGUAGE: tsx
CODE:
export default function () {
  return (
    <Stack>
      <Stack.Screen name="[profile]" dangerouslySingular={({ profile }) => profile} />
    </Stack>
  );
}

----------------------------------------

TITLE: Using npm Templates with Create Expo App
DESCRIPTION: Demonstrates various ways to use npm templates with Create Expo App, including using specific versions and local tarballs.

LANGUAGE: sh
CODE:
# Create from npm
npx create-expo --template tabs # Short for expo-template-tabs
npx create-expo --template expo-template-tabs

# Create from npm using a semver of the template
npx create-expo --template expo-template-blank@50

# Create from local tarball created with `npm pack`
npx create-expo --template ./path/to/template.tgz

----------------------------------------

TITLE: Capturing a FullHD Image with captureRef in React Native
DESCRIPTION: This example demonstrates how to use captureRef to capture a high-resolution (1080x1080) image of a React Native view, taking into account the device's pixel ratio.

LANGUAGE: javascript
CODE:
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});

----------------------------------------

TITLE: Retrieving Client IP Address in EAS Hosting
DESCRIPTION: Example of how to retrieve the original client IP address from the X-Real-IP header in an API route handler.

LANGUAGE: javascript
CODE:
export async function GET(request) {
  const ip = request.headers.get('X-Real-IP');
}

----------------------------------------

TITLE: Importing DevClient Components
DESCRIPTION: Example showing how to import the DevLauncher and DevMenu components from expo-dev-client package.

LANGUAGE: javascript
CODE:
import { DevLauncher, DevMenu } from 'expo-dev-client';

----------------------------------------

TITLE: Modifying React Native Component in TypeScript
DESCRIPTION: Example of changing the text in a React Native component from 'Welcome!' to 'Hello World!' in a TypeScript file.

LANGUAGE: typescript
CODE:
diff --git a/app/(tabs)/index.tsx b/app/(tabs)/index.tsx
index 45cfa0e..4d1b384 100644
--- a/app/(tabs)/index.tsx
+++ b/app/(tabs)/index.tsx
@@ -17,7 +17,7 @@ export default function HomeScreen() {
       }
     >
       <ThemedView style={styles.titleContainer}>
-        <ThemedText type="title">Welcome!</ThemedText>
+        <ThemedText type="title">Hello World!</ThemedText>
         <HelloWave />
       </ThemedView>
       <ThemedView style={styles.stepContainer}>

----------------------------------------

TITLE: Initializing Basic Stack Navigator in Expo Router
DESCRIPTION: Basic setup of a Stack navigator in the app's root layout file.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router/stack';

export default function Layout() {
  return <Stack />;
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Calendar and Reminders Usage
DESCRIPTION: XML configuration to add NSCalendarsUsageDescription and NSRemindersUsageDescription keys to the iOS Info.plist file.

LANGUAGE: xml
CODE:
<key>NSCalendarsUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your calendar</string>
<key>NSRemindersUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your reminders</string>

----------------------------------------

TITLE: Updating MainActivity.java for Android Setup
DESCRIPTION: This code snippet shows the required change in the Android MainActivity.java file to set the main component name to 'main'.

LANGUAGE: java
CODE:
  @Override
  protected String getMainComponentName() {
    return "main";
  }

----------------------------------------

TITLE: Structuring Changelog in Markdown for Expo Project
DESCRIPTION: This snippet demonstrates the structure of the changelog for the Expo project. It uses Markdown headings to organize different types of changes, including breaking changes, new features, bug fixes, and other updates.

LANGUAGE: markdown
CODE:
# Changelog

## Unpublished

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

----------------------------------------

TITLE: Importing Barometer Module from expo-sensors
DESCRIPTION: Shows how to import the Barometer module from the expo-sensors package.

LANGUAGE: js
CODE:
import { Barometer } from 'expo-sensors';

----------------------------------------

TITLE: Creating EmojiPicker Modal Component
DESCRIPTION: Modal component implementation with slide animation and close functionality

LANGUAGE: tsx
CODE:
export default function EmojiPicker({ isVisible, children, onClose }: Props) {
  return (
    <View>
    <Modal animationType="slide" transparent={true} visible={isVisible}>
      <View style={styles.modalContent}>
        <View style={styles.titleContainer}>
          <Text style={styles.title}>Choose a sticker</Text>
          <Pressable onPress={onClose}>
            <MaterialIcons name="close" color="#fff" size={22} />
          </Pressable>
        </View>
        {children}
      </View>
    </Modal>
    </View>
  );
}

----------------------------------------

TITLE: Running Expo Updates E2E Tests on iOS
DESCRIPTION: These bash commands install pod dependencies, build the iOS app for debugging, and run the E2E tests using Detox for iOS.

LANGUAGE: bash
CODE:
npx pod-install
yarn detox:ios:debug:build
yarn detox:ios:debug:test

----------------------------------------

TITLE: Importing FaceDetector Module in Expo
DESCRIPTION: This code snippet shows how to import the FaceDetector module from the expo-face-detector package in an Expo project.

LANGUAGE: js
CODE:
import * as FaceDetector from 'expo-face-detector';

----------------------------------------

TITLE: Node.js Implementation for URI Scheme Handling
DESCRIPTION: Example of using the uri-scheme package in Node.js to open URIs programmatically. Note that the package doesn't include TypeScript types or documentation blocks for performance reasons.

LANGUAGE: javascript
CODE:
import { Android, Ios } from 'uri-scheme';

Ios.openAsync({ uri: 'http://expo.dev/' });

----------------------------------------

TITLE: Importing DeviceMotion from expo-sensors
DESCRIPTION: Basic import statement to access the DeviceMotion API from the expo-sensors package.

LANGUAGE: javascript
CODE:
import { DeviceMotion } from 'expo-sensors';

----------------------------------------

TITLE: Configuring GitLab CI Pipeline
DESCRIPTION: GitLab CI configuration using Node.js Alpine image to run EAS builds with npm caching.

LANGUAGE: yaml
CODE:
image: node:alpine

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm

stages:
  - build

before_script:
  - npm ci --cache .npm

eas-build:
  stage: build
  script:
    - apk add --no-cache bash
    - npx eas-cli build --platform all --non-interactive --no-wait

----------------------------------------

TITLE: Executing PRAGMA Queries
DESCRIPTION: Demonstrates how to execute PRAGMA queries to configure SQLite database settings.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync('PRAGMA journal_mode = WAL');
await db.execAsync('PRAGMA foreign_keys = ON');

----------------------------------------

TITLE: Configuring Firebase Hosting Headers
DESCRIPTION: Sets up caching headers for Firebase Hosting to control caching behavior for different file types.

LANGUAGE: json
CODE:
  "hosting": [
    {
      "headers": [
        {
          "source": "/**",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            }
          ]
        },
        {
          "source": "**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "max-age=604800"
            }
          ]
        }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring expo-contacts plugin in app.json
DESCRIPTION: Example of how to configure the expo-contacts plugin in the app.json file. This snippet shows how to set the contactsPermission for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Streaming Fetch with Expo's Fetch API
DESCRIPTION: Demonstrates how to use the WinterCG-compliant Fetch API provided by Expo for streaming data.

LANGUAGE: ts
CODE:
import { fetch } from 'expo/fetch';

const resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {
  headers: { Accept: 'text/event-stream' },
});
const reader = resp.body.getReader();
const chunks = [];
while (true) {
  const { done, value } = await reader.read();
  if (done) {
    break;
  }
  chunks.push(value);
}
const buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
console.log(buffer.length); // 512

----------------------------------------

TITLE: Exported HTML with baseUrl
DESCRIPTION: Example of how the Link component is exported to HTML with baseUrl configuration.

LANGUAGE: html
CODE:
<a href="/my-root/blog/123">Go to blog post</a>

----------------------------------------

TITLE: Configuring expo-contacts plugin in app.json
DESCRIPTION: Example of how to configure the expo-contacts plugin in the app.json file. This snippet shows how to set the contactsPermission for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Build Properties in app.json
DESCRIPTION: Example configuration for expo-build-properties plugin in app.json, showing how to set Android SDK versions and iOS deployment target.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 33,
            "targetSdkVersion": 33,
            "buildToolsVersion": "33.0.0"
          },
          "ios": {
            "deploymentTarget": "13.0"
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Listing All Branches with EAS CLI
DESCRIPTION: This command lists all branches in the EAS project.

LANGUAGE: bash
CODE:
$ eas branch:list

----------------------------------------

TITLE: Configuring Global Yarn Settings for iOS Builds
DESCRIPTION: This snippet shows the global Yarn configuration in the ~/.yarnrc.yml file on iOS build servers. It sets the npm registry server, allows unsafe HTTP connections, and disables immutable installs.

LANGUAGE: yml
CODE:
unsafeHttpWhitelist:
  - '*'
npmRegistryServer: 'http://10.94.183.70:4873'
enableImmutableInstalls: false

----------------------------------------

TITLE: Creating EAS Deployment Workflow in YAML
DESCRIPTION: This YAML configuration defines an EAS workflow that deploys the project to production when changes are pushed to the 'main' branch. It uses production environment variables and promotes the deployment to production.

LANGUAGE: yaml
CODE:
name: Deploy

on:
  push:
    branches: ['main']

jobs:
  deploy:
    type: deploy
    name: Deploy
    environment: production
    params:
      prod: true

----------------------------------------

TITLE: Using Heading Components
DESCRIPTION: Example showing usage of H1 component with platform-specific outputs

LANGUAGE: tsx
CODE:
import { H1 } from '@expo/html-elements';
export default () => <H1>Example<H1/>

----------------------------------------

TITLE: Moving and Copying Files with FileSystem Next in TypeScript
DESCRIPTION: Illustrates how to create a file, move it to different locations, and update its URI accordingly using the File class methods.

LANGUAGE: typescript
CODE:
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.document, 'example.txt');
  file.create();
  console.log(file.uri); // '${documentDirectory}/example.txt'
  file.move(Paths.cache);
  console.log(file.uri); // '${cacheDirectory}/example.txt'
  file.move(new Directory(Paths.cache, 'newFolder'));
  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: GLView Integration with Reanimated Worklets
DESCRIPTION: Shows how to use GLView within Reanimated worklets by passing GL context ID and recreating GL object in the worklet context.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}

----------------------------------------

TITLE: Configuring DeviceMotion Plugin in Expo Config
DESCRIPTION: JSON configuration for the expo-sensors plugin in app.json to set motion permission messages and other device motion related settings.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Generating QR Code for Channel
DESCRIPTION: This snippet shows how to create a QR code for the latest update available on a channel using the project ID and channel ID.

LANGUAGE: text
CODE:
https://qr.expo.dev/eas-update?projectId=your-project-id&channelId=your-channel-id

----------------------------------------

TITLE: Creating a minimal app.json file for EAS Update
DESCRIPTION: This JSON snippet shows the minimal structure required in the app.json file to configure EAS Update. It includes an empty 'expo' object where additional configuration can be added.

LANGUAGE: json
CODE:
{
  "expo": {
    //... any other existing keys you have
  }
}

----------------------------------------

TITLE: Importing LocalAuthentication Module
DESCRIPTION: Example showing how to import the LocalAuthentication module from expo-local-authentication package.

LANGUAGE: javascript
CODE:
import * as LocalAuthentication from 'expo-local-authentication';

----------------------------------------

TITLE: Importing Audio and Video Components
DESCRIPTION: Basic import statement for Audio and Video components from expo-av library.

LANGUAGE: javascript
CODE:
import { Audio, Video } from 'expo-av';

----------------------------------------

TITLE: Running Expo CLI Commands for Android and iOS
DESCRIPTION: Commands to compile and run React Native apps for Android and iOS using Expo CLI.

LANGUAGE: bash
CODE:
# for Android
$ npx expo run:android

# for iOS
$ npx expo run:ios

----------------------------------------

TITLE: Configuring Image Picker Plugin in Expo
DESCRIPTION: Configuration example for expo-image-picker plugin in app.json, showing how to set custom photos permission message

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-image-picker",
        {
          "photosPermission": "The app accesses your photos to let you share them with your friends."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing Magnetometer Modules
DESCRIPTION: Example of importing both calibrated and uncalibrated magnetometer modules from expo-sensors package.

LANGUAGE: js
CODE:
import { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';

----------------------------------------

TITLE: Importing Barcode Scanner Module
DESCRIPTION: Simple import statement for the BarCodeScanner component from expo-barcode-scanner package.

LANGUAGE: javascript
CODE:
import { BarCodeScanner } from 'expo-barcode-scanner';

----------------------------------------

TITLE: Configuring Metro for Expo Projects
DESCRIPTION: Basic Metro configuration setup for Expo projects. This code creates a default Metro configuration using the getDefaultConfig helper from expo/metro-config. The configuration is essential for bundling React Native apps with Expo CLI.

LANGUAGE: javascript
CODE:
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Implementing Face Detection with Expo Camera
DESCRIPTION: Example showing how to configure and use face detection in fast mode with the Expo Camera component. The code demonstrates basic setup with minimal detection features and face tracking.

LANGUAGE: jsx
CODE:
import { Camera } from 'expo-camera';
import * as FaceDetector from 'expo-face-detector';

const App = () => (
  <Camera
    // other props
    onFacesDetected={handleFacesDetected}
    faceDetectorSettings={{
      mode: FaceDetector.FaceDetectorMode.fast,
      detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,
      runClassifications: FaceDetector.FaceDetectorClassifications.none,
      minDetectionInterval: 100,
      tracking: true,
    }}
  />
);

const handleFacesDetected = ({ faces }) => {
  console.log(faces);
};

export default App;

----------------------------------------

TITLE: Setting Up SafeAreaProvider in React Native App Root
DESCRIPTION: Shows how to wrap the app's root component with SafeAreaProvider to enable safe area context throughout the app.

LANGUAGE: jsx
CODE:
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}

----------------------------------------

TITLE: Mocking Modules in Metro Config
DESCRIPTION: Demonstrates how to mock modules for specific platforms in the Metro configuration.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (platform === 'web' && moduleName === 'lodash') {
    return {
      type: 'empty',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;

----------------------------------------

TITLE: Updating package.json for Expo Lint Command
DESCRIPTION: This snippet demonstrates how to update the 'lint' script in package.json to use the 'expo lint' command, which is available in Expo SDK 51 and above.

LANGUAGE: json
CODE:
{
  "scripts": {
    "lint": "expo lint"
  }
}

----------------------------------------

TITLE: Installing @shopify/flash-list in React Native
DESCRIPTION: This code snippet demonstrates how to import and use the APIInstallSection component for installing the @shopify/flash-list package. It includes a link to the official documentation.

LANGUAGE: jsx
CODE:
<APIInstallSection href="https://shopify.github.io/flash-list/docs/" />

----------------------------------------

TITLE: Custom Document Setup for React Native Web Styling
DESCRIPTION: Implementation of a custom Document component to handle React Native Web styling and viewport configuration in Next.js.

LANGUAGE: jsx
CODE:
import { Children } from 'react';
import Document, { Html, Head, Main, NextScript } from 'next/document';
import { AppRegistry } from 'react-native';

const style = `
html, body, #__next {
  -webkit-overflow-scrolling: touch;
}
#__next {
  display: flex;
  flex-direction: column;
  height: 100%;
}
html {
  scroll-behavior: smooth;
  -webkit-text-size-adjust: 100%;
}
body {
  overflow-y: auto;
  overscroll-behavior-y: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -ms-overflow-style: scrollbar;
}
`;

export default class MyDocument extends Document {
  static async getInitialProps({ renderPage }) {
    AppRegistry.registerComponent('main', () => Main);
    const { getStyleElement } = AppRegistry.getApplication('main');
    const page = await renderPage();
    const styles = [
      <style key="react-native-style" dangerouslySetInnerHTML={{ __html: style }} />,
      getStyleElement(),
    ];
    return { ...page, styles: Children.toArray(styles) };
  }

  render() {
    return (
      <Html style={{ height: '100%' }}>
        <Head />
        <body style={{ height: '100%', overflow: 'hidden' }}>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

----------------------------------------

TITLE: Creating Counter Component with React Hooks
DESCRIPTION: Demonstrates creating a basic counter component using React's useState hook and rendering it with react-dom/client. Shows component state management and event handling.

LANGUAGE: javascript
CODE:
import { useState } from 'react';
import { createRoot } from 'react-dom/client';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </>
  );
}

const root = createRoot(document.getElementById('root'));
root.render(<Counter />);

----------------------------------------

TITLE: Publishing EAS Update for Preview Branch
DESCRIPTION: Command to publish an EAS Update for the preview branch, demonstrating how to target different build profiles.

LANGUAGE: bash
CODE:
$ eas update --branch preview --message "Change first button label"

----------------------------------------

TITLE: Resolve Command JSON Output Example
DESCRIPTION: Sample output from the expo-modules-autolinking resolve command showing resolved module details for a specific platform including pods and module configurations.

LANGUAGE: json
CODE:
{
  "modules": [
    {
      "packageName": "expo-random",
      "packageVersion": "13.0.0",
      "pods": [
        {
          "podName": "ExpoRandom",
          "podspecDir": "/absolute/path/to/node_modules/expo-random/ios"
        }
      ],
      "swiftModuleNames": ["ExpoRandom"],
      "modules": ["RandomModule"],
      "appDelegateSubscribers": [],
      "reactDelegateHandlers": [],
      "debugOnly": false
    }
  ]
}

----------------------------------------

TITLE: Hello World Push Notification with cURL
DESCRIPTION: Example cURL command to send a basic push notification through Expo Push Service

LANGUAGE: sh
CODE:
curl -H "Content-Type: application/json" -X POST "https://exp.host/--/api/v2/push/send" -d '{
  "to": "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]",
  "title":"hello",
  "body": "world"
}'

----------------------------------------

TITLE: Importing Sharing Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Sharing module from the expo-sharing package. This is the first step to using the sharing functionality in your Expo app.

LANGUAGE: javascript
CODE:
import * as Sharing from 'expo-sharing';

----------------------------------------

TITLE: Importing captureRef from react-native-view-shot in JavaScript
DESCRIPTION: This snippet shows how to import the captureRef function from the react-native-view-shot library.

LANGUAGE: javascript
CODE:
import { captureRef } from 'react-native-view-shot';

----------------------------------------

TITLE: Importing KeepAwake Module in JavaScript
DESCRIPTION: This code snippet shows how to import the KeepAwake module in a JavaScript file. This import statement is typically used at the top of a file to access the KeepAwake functionality.

LANGUAGE: js
CODE:
import KeepAwake from 'expo-keep-awake';

----------------------------------------

TITLE: Running Bare-Expo on iOS Simulator
DESCRIPTION: Command to run the Bare-Expo project on iOS Simulator. It automatically performs pod install, npm install, opens a simulator, clears and starts Metro, then opens the app in the simulator.

LANGUAGE: shell
CODE:
yarn ios

----------------------------------------

TITLE: Debugging Connection Response Format
DESCRIPTION: Example JSON response from the debugging endpoint showing available debugger connections for Hermes and React Native experimental debugger.

LANGUAGE: json
CODE:
[
  {
    "id": "0-2",
    "description": "host.exp.Exponent",
    "title": "Hermes ABI47_0_0React Native",
    "faviconUrl": "https://react.dev/favicon.ico",
    "devtoolsFrontendUrl": "devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D2",
    "type": "node",
    "webSocketDebuggerUrl": "ws://[::1]:8081/inspector/debug?device=0&page=2",
    "vm": "Hermes"
  },
  {
    "id": "0--1",
    "description": "host.exp.Exponent",
    "title": "React Native Experimental (Improved Chrome Reloads)",
    "faviconUrl": "https://react.dev/favicon.ico",
    "devtoolsFrontendUrl": "devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=%5B%3A%3A1%5D%3A8081%2Finspector%2Fdebug%3Fdevice%3D0%26page%3D-1",
    "type": "node",
    "webSocketDebuggerUrl": "ws://[::1]:8081/inspector/debug?device=0&page=-1",
    "vm": "don't use"
  }
]

----------------------------------------

TITLE: Importing Cellular Module in JavaScript
DESCRIPTION: This snippet shows how to import the Cellular module from the expo-cellular package. This is the basic setup required to use the Cellular API in your Expo project.

LANGUAGE: javascript
CODE:
import * as Cellular from 'expo-cellular';

----------------------------------------

TITLE: Implementing Notification Channels in Existing App
DESCRIPTION: Example of migrating an existing app to use notification channels, including channel creation in componentDidMount and updated notification presentation code.

LANGUAGE: javascript
CODE:
componentDidMount() {
  // ...
  if (Platform.OS === 'android') {
    Notifications.createChannelAndroidAsync('reminders', {
      name: 'Reminders',
      priority: 'max',
      vibrate: [0, 250, 250, 250],
    });
  }
}

// ...

_createNotificationAsync = () => {
  Notifications.presentLocalNotificationAsync({
    title: 'Reminder',
    body: 'This is an important reminder!!!!',
    android: {
      channelId: 'reminders',
      color: '#FF0000',
    },
  });
}

----------------------------------------

TITLE: Importing AuthSession Module
DESCRIPTION: Basic import statement for using the AuthSession module in an Expo application.

LANGUAGE: javascript
CODE:
import * as AuthSession from 'expo-auth-session';

----------------------------------------

TITLE: Describing Notification Tester App in Markdown
DESCRIPTION: This Markdown snippet provides an overview of the Notification Tester app, including its purpose, setup requirements, and structure. It mentions the need for FCM credentials and an iOS developer account for push notifications, and describes the app as a standard Expo + Expo router app using prebuild.

LANGUAGE: Markdown
CODE:
# Notification Tester

The app for testing and developing the expo-notifications package.

It does require a bit of setup for push notifications to work - see https://docs.expo.dev/push-notifications/fcm-credentials/ plus a developer account for iOS.

Otherwise, it's a standard Expo + Expo router app that uses prebuild.

The goal is to be able to develop the package in the `expo` monorepo and easily test the changes through this app.

----------------------------------------

TITLE: Launching Android Intent using expo-intent-launcher in TypeScript
DESCRIPTION: This snippet demonstrates how to import and use the startActivityAsync function from expo-intent-launcher to open the Android location settings screen. It shows the basic usage of the package.

LANGUAGE: typescript
CODE:
import { startActivityAsync, ActivityAction } from 'expo-intent-launcher';

// Open location settings
startActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);

----------------------------------------

TITLE: Adding Sentry Error Reporting Button in React Native
DESCRIPTION: Create a button in the app to test Sentry error reporting and verify that sourcemaps are correctly configured.

LANGUAGE: jsx
CODE:
import { Button } from 'react-native';

// Inside some component
<Button title="Press me" onPress={() => { throw new Error('Hello, again, Sentry!'); }}/>

----------------------------------------

TITLE: Importing Expo Gyroscope Module
DESCRIPTION: Basic import statement for the Gyroscope module from expo-sensors package.

LANGUAGE: js
CODE:
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Configuring Metro Cache Stores for Tailwind
DESCRIPTION: Example of extending the Expo FileStore superclass in metro.config.js to support PostCSS and Tailwind CSS.

LANGUAGE: javascript
CODE:
const { FileStore } = require('@expo/metro-config/file-store');

config.cacheStores = [
  new FileStore({
    root: '/path/to/custom/cache',
  }),
];

module.exports = config;

----------------------------------------

TITLE: Fetching Network Information Once
DESCRIPTION: Example of using NetInfo.fetch() to get a one-time snapshot of network connection status.

LANGUAGE: javascript
CODE:
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

----------------------------------------

TITLE: Installing source-map-explorer for Bundle Analysis
DESCRIPTION: Command to install source-map-explorer as a development dependency for analyzing bundle size in Expo projects (SDK 50 and below).

LANGUAGE: bash
CODE:
npm i --save-dev source-map-explorer

----------------------------------------

TITLE: Importing BlurView from expo-blur
DESCRIPTION: Shows how to import the BlurView component from the expo-blur package.

LANGUAGE: js
CODE:
import { BlurView } from 'expo-blur';

----------------------------------------

TITLE: ImageManipulator Import Statement
DESCRIPTION: Shows how to import the ImageManipulator module from the expo-image-manipulator package.

LANGUAGE: javascript
CODE:
import * as ImageManipulator from 'expo-image-manipulator';

----------------------------------------

TITLE: Importing Screen Orientation Module in Expo
DESCRIPTION: Basic import statement for using the expo-screen-orientation package in an Expo application.

LANGUAGE: javascript
CODE:
import * as ScreenOrientation from 'expo-screen-orientation';

----------------------------------------

TITLE: Rendering RawH3 Component with 'Images' Text in JSX
DESCRIPTION: This JSX code demonstrates how to use the imported RawH3 component to render a heading with the text 'Images'. It's likely part of a larger React component in the Expo project.

LANGUAGE: JSX
CODE:
<RawH3>Images</RawH3>

----------------------------------------

TITLE: Configuring Standalone App Gradle for Unimodule Exclusion
DESCRIPTION: Instructions for excluding a unimodule from standalone apps on Android by modifying the app/build.gradle file. This involves adding the module name to the 'exclude' option of the addMavenUnimodulesDependencies function.

LANGUAGE: java
CODE:
addMavenUnimodulesDependencies([exclude: ['<unimodule-name>']])

----------------------------------------

TITLE: Importing Gyroscope from expo-sensors
DESCRIPTION: Basic import statement for accessing the Gyroscope functionality from the expo-sensors package.

LANGUAGE: js
CODE:
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Using captureRef Function in React Native
DESCRIPTION: Example of using the captureRef function to capture a view reference and save it as an image.

LANGUAGE: javascript
CODE:
import { captureRef } from "react-native-view-shot";

captureRef(viewRef, {
  format: "jpg",
  quality: 0.8,
}).then(
  (uri) => console.log("Image saved to", uri),
  (error) => console.error("Oops, snapshot failed", error)
);

----------------------------------------

TITLE: Configuring PostCSS for Tailwind v4
DESCRIPTION: Add Tailwind to your PostCSS configuration in the postcss.config.mjs file.

LANGUAGE: javascript
CODE:
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

----------------------------------------

TITLE: iOS Google Maps Configuration in app.json
DESCRIPTION: Configuration snippet for setting up Google Maps API key in app.json for iOS platform.

LANGUAGE: json
CODE:
    "ios": {
      "config": {
        "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY",
        },
      }

----------------------------------------

TITLE: Implementing Type-Safe Theme Enum on iOS
DESCRIPTION: Improves type safety by using an enum for theme values on iOS.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoSettingsModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoSettings")

    Events("onChangeTheme")

    Function("setTheme") { (theme: Theme) -> Void in
      UserDefaults.standard.set(theme.rawValue, forKey:"theme")
      sendEvent("onChangeTheme", [
        "theme": theme.rawValue
      ])
    }

    Function("getTheme") { () -> String in
      UserDefaults.standard.string(forKey: "theme") ?? Theme.system.rawValue
    }
  }

  enum Theme: String, Enumerable {
    case light
    case dark
    case system
  }
}

----------------------------------------

TITLE: Implementing SafeAreaProvider in Expo React Native
DESCRIPTION: This snippet shows how to implement SafeAreaProvider in the root component file when using a different Expo template without Expo Router.

LANGUAGE: tsx
CODE:
import { SafeAreaProvider } from 'react-native-safe-area-context';

export default function App() {
  return (
    return <SafeAreaProvider>...</SafeAreaProvider>;
  );
}

----------------------------------------

TITLE: Custom Metro Resolver Configuration
DESCRIPTION: Example of implementing custom module resolution in Metro config

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
    return {
      filePath: 'path/to/file',
      type: 'sourceFile',
    };
  }
  return context.resolveRequest(context, moduleName, platform);
};

----------------------------------------

TITLE: Reading Native Config Values in Kotlin
DESCRIPTION: Enhanced Android module implementation that reads custom API key from AndroidManifest.xml metadata

LANGUAGE: kotlin
CODE:
package expo.modules.nativeconfiguration

import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition
import android.content.pm.PackageManager

class ExpoNativeConfigurationModule() : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoNativeConfiguration")

    Function("getApiKey") {
      val applicationInfo = appContext?.reactContext?.packageManager?.getApplicationInfo(appContext?.reactContext?.packageName.toString(), PackageManager.GET_META_DATA)

      return@Function applicationInfo?.metaData?.getString("MY_CUSTOM_API_KEY")
    }
  }
}

----------------------------------------

TITLE: Configuring expo-asset Plugin in app.json for Expo Projects
DESCRIPTION: This snippet demonstrates how to configure the expo-asset plugin in the app.json file. It allows specifying asset files or directories to be linked to the native project during build time.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-asset",
        {
          "assets": ["path/to/file.png", "path/to/directory"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing SMS Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the SMS module from the expo-sms package. It allows developers to access the SMS functionality in their Expo projects.

LANGUAGE: javascript
CODE:
import * as SMS from 'expo-sms';

----------------------------------------

TITLE: Contributing to expo-json-utils Project
DESCRIPTION: This section provides a link to the contributing guide for the expo-json-utils project, encouraging developers to contribute to the project following the guidelines specified in the Expo repository.

LANGUAGE: Markdown
CODE:
## Contributing

Contributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).

----------------------------------------

TITLE: Initializing Vexo in Expo application entry file
DESCRIPTION: Code snippet demonstrating how to import and initialize Vexo in the entry file of an Expo application, such as app/_layout.tsx when using Expo Router. It includes a suggestion to conditionally run Vexo only in production.

LANGUAGE: tsx
CODE:
import { vexo } from 'vexo-analytics';

// You may want to wrap this with `if (!__DEV__) { ... }` to only run Vexo in production.
vexo('YOUR_API_KEY');

----------------------------------------

TITLE: Importing Network Module in Expo
DESCRIPTION: Basic import statement for using the expo-network package in an Expo application. This module provides access to network-related functionality.

LANGUAGE: javascript
CODE:
import * as Network from 'expo-network';

----------------------------------------

TITLE: Starting Expo Development Server with Tunnel
DESCRIPTION: Command to start the Expo development server using a tunnel connection, useful for overcoming network restrictions but resulting in slower reloads.

LANGUAGE: bash
CODE:
$ npx expo start --tunnel

----------------------------------------

TITLE: Configuring expo-location Plugin in app.json
DESCRIPTION: Example of configuring the expo-location plugin in the app.json file to set custom permission messages and enable background location features.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Resetting Expo Project
DESCRIPTION: Command to reset the Expo project by moving starter code to an example directory and creating a blank app directory for development.

LANGUAGE: bash
CODE:
npm run reset-project

----------------------------------------

TITLE: Using KeepAwake Hook in React Native
DESCRIPTION: This snippet demonstrates how to use the useKeepAwake hook to prevent the screen from sleeping in a React Native component. The hook is called within the component, ensuring the screen stays awake as long as the component is mounted.

LANGUAGE: jsx
CODE:
import { useKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Text, View } from 'react-native';

export default function KeepAwakeExample() {
  useKeepAwake();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This screen will never sleep!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Creating Hello World Workflow in YAML
DESCRIPTION: This snippet demonstrates a basic EAS workflow that prints 'Hello, World' when code is pushed to any branch. It includes the workflow name, trigger event, and a simple job with one step.

LANGUAGE: yaml
CODE:
name: Hello World

on:
  push:
    branches: ['*']

jobs:
  Hello World:
    steps:
      - run: echo "Hello, World"

----------------------------------------

TITLE: Enabling New Architecture in SDK 52+ (app.json)
DESCRIPTION: Configuration for enabling New Architecture on both Android and iOS platforms in SDK 52 and above.

LANGUAGE: json
CODE:
{
  "expo": {
    "newArchEnabled": true
  }
}

----------------------------------------

TITLE: Creating a React Native App with Expo SDK Support
DESCRIPTION: Demonstrates how to create a new React Native project with built-in support for Expo SDK packages using create-expo-app.

LANGUAGE: bash
CODE:
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum

----------------------------------------

TITLE: Checking adb Version in Terminal
DESCRIPTION: Command to check the adb version installed on the system.

LANGUAGE: bash
CODE:
$ adb version

----------------------------------------

TITLE: StatusBar Import Statement
DESCRIPTION: Shows how to import the StatusBar component from the expo-status-bar package.

LANGUAGE: javascript
CODE:
import { StatusBar } from 'expo-status-bar';

----------------------------------------

TITLE: Building Native Android and iOS Projects with Expo CLI
DESCRIPTION: Basic commands for compiling Expo projects into native Android and iOS builds using expo run commands. These commands generate native directories and create debug builds.

LANGUAGE: bash
CODE:
# Build native Android project
$ npx expo run:android
# Build native iOS project
$ npx expo run:ios

----------------------------------------

TITLE: Configuring Background Audio for iOS in Expo
DESCRIPTION: JSON configuration for enabling background audio playback in iOS standalone apps using app.json configuration.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Displaying DateTimePicker Demo Video in React Native
DESCRIPTION: This code snippet shows how to use the ContentSpotlight component to display a video demonstration of the DateTimePicker component. The video file is specified, and looping is disabled.

LANGUAGE: jsx
CODE:
<ContentSpotlight file="sdk/datetimepicker.mp4" loop={false} />

----------------------------------------

TITLE: Configuring Tailwind CSS Content Paths
DESCRIPTION: Add paths to all of your template files inside the tailwind.config.js file to ensure Tailwind processes the correct files.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './app/**/*.{js,tsx,ts,jsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

----------------------------------------

TITLE: Configuring React Helmet Async for Jest Testing
DESCRIPTION: Demonstrates how to configure react-helmet-async for use in Jest tests when emulating server-side rendering.

LANGUAGE: javascript
CODE:
import { HelmetProvider } from 'react-helmet-async';

HelmetProvider.canUseDOM = false;

----------------------------------------

TITLE: Adding URI Scheme Command
DESCRIPTION: Command to add URI scheme to the development client test project

LANGUAGE: bash
CODE:
npx uri-scheme add dev-client-release

----------------------------------------

TITLE: Implementing Basic WebView Component in React Native
DESCRIPTION: Demonstrates how to create a basic WebView component that loads a web page using react-native-webview. The example shows proper component imports and basic usage with styling.

LANGUAGE: tsx
CODE:
import React, { Component } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { WebView } from 'react-native-webview';

// ...
const MyWebComponent = () => {
  return <WebView source={{ uri: 'https://reactnative.dev/' }} style={{ flex: 1 }} />;
}

----------------------------------------

TITLE: Importing NetInfo in JavaScript
DESCRIPTION: This snippet shows how to import the NetInfo library in a JavaScript file.

LANGUAGE: javascript
CODE:
import NetInfo from '@react-native-community/netinfo';

----------------------------------------

TITLE: Creating expo-module.config.json for Expo Autolinking
DESCRIPTION: Create an empty expo-module.config.json file at the root of the project to enable Expo Autolinking.

LANGUAGE: json
CODE:
{}

----------------------------------------

TITLE: iOS Entitlements Configuration
DESCRIPTION: XML configuration for Apple Sign-in entitlements in iOS app

LANGUAGE: xml
CODE:
<key>com.apple.developer.applesignin</key>
<array>
  <string>Default</string>
</array>

----------------------------------------

TITLE: Installing expo-background-task Package
DESCRIPTION: Command to install the expo-background-task package using npx expo install.

LANGUAGE: bash
CODE:
npx expo install expo-background-task

----------------------------------------

TITLE: ProjectId Configuration in app.json
DESCRIPTION: Configuration snippet showing how the EAS project ID is stored in the app.json file for project identification on EAS servers.

LANGUAGE: json
CODE:
{
  "extra": {
    "eas": {
      "projectId": "0cd3da2d-xxx-xxx-xxx-xxxxxxxxxx"
    }
  }
}

----------------------------------------

TITLE: Updating settings.gradle for Android
DESCRIPTION: Adds Expo module autolinking configuration to the settings.gradle file in the Android directory.

LANGUAGE: diff
CODE:
diff --git a/android/settings.gradle b/android/settings.gradle
index a26c7c6..dd8802a 100644
--- a/android/settings.gradle
+++ b/android/settings.gradle
@@ -1,5 +1,11 @@
 rootProject.name = 'MyApp'
 
+apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
+useExpoModules()
+
 include ':app'
 includeBuild("../node_modules/@react-native/gradle-plugin")

----------------------------------------

TITLE: Configuring CMake Build for Expo SQLite Project
DESCRIPTION: This CMake script sets up the build environment for the Expo SQLite project. It configures compiler options, includes necessary libraries, and defines the project structure. The script supports both SQLite and LibSQL variants, with conditional compilation based on the USE_LIBSQL flag.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.4.1)

project(expo-sqlite)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 20)
set(PACKAGE_NAME "expo-sqlite")
set(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)

set(SRC_DIR "${CMAKE_SOURCE_DIR}/src/main/cpp")

separate_arguments(SQLITE_BUILDFLAGS)
add_compile_options(
  ${SQLITE_BUILDFLAGS}
)

if(${USE_LIBSQL})
  file(GLOB SOURCES "${SRC_DIR}/libsql/*.cpp")
  add_library(
    ${PACKAGE_NAME}
    SHARED
    ${SOURCES}
  )
  target_include_directories(
    ${PACKAGE_NAME}
    PRIVATE
    "${CMAKE_SOURCE_DIR}/libsql"
  )
  find_library(
    LIBSQL_LIB
    sql_experimental
    PATHS "${CMAKE_SOURCE_DIR}/libsql/${ANDROID_ABI}"
    NO_CMAKE_FIND_ROOT_PATH
  )
else()
  file(GLOB SOURCES "${SRC_DIR}/*.cpp")
  add_library(
    ${PACKAGE_NAME}
    SHARED
    ${SOURCES}
    "${SQLITE3_SRC_DIR}/sqlite3.c"
  )
  target_include_directories(
    ${PACKAGE_NAME}
    PRIVATE
    ${SRC_DIR}
    "${SQLITE3_SRC_DIR}"
  )
  set(LIBSQL_LIB "")
endif()

find_library(LOG_LIB log)
find_package(fbjni REQUIRED CONFIG)
if(${USE_SQLCIPHER})
  find_package(openssl REQUIRED CONFIG)
  set(OPENSSL_CRYPTO_LIB "openssl::crypto")
else()
  set(OPENSSL_CRYPTO_LIB "")
endif()

target_link_libraries(
  ${PACKAGE_NAME}
  ${LOG_LIB}
  ${OPENSSL_CRYPTO_LIB}
  ${LIBSQL_LIB}
  fbjni::fbjni
  android
)

----------------------------------------

TITLE: Implementing View Callbacks in Swift
DESCRIPTION: Illustrates how to implement view callbacks for a camera view, including defining events and dispatching them from the native view to JavaScript.

LANGUAGE: Swift
CODE:
class CameraViewModule: Module {
  public func definition() -> ModuleDefinition {
    View(CameraView.self) {
      Events(
        "onCameraReady"
      )

      // ...
    }
  }
}

class CameraView: ExpoView {
  let onCameraReady = EventDispatcher()

  func callOnCameraReady() {
    onCameraReady([
      "message": "Camera was mounted"
    ]);
  }
}

----------------------------------------

TITLE: Minimal Expo Configuration in JSON
DESCRIPTION: A basic example of an app.json file for an Expo project, defining the app name and slug.

LANGUAGE: json
CODE:
{
  "name": "My app",
  "slug": "my-app"
}

----------------------------------------

TITLE: Handling results when Android activity was killed
DESCRIPTION: Added a way to handle results when the Android activity was killed, improving reliability.

LANGUAGE: JavaScript
CODE:
// Example implementation not provided in the changelog

----------------------------------------

TITLE: Configuring iOS Non-Exempt Encryption in app.json
DESCRIPTION: Example of setting the usesNonExemptEncryption property to false in the app.json file for iOS App Store compliance.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "config": {
        "usesNonExemptEncryption": false
      }
    }
  }
}

----------------------------------------

TITLE: Configuring package.json for subdirectory serving in Expo Web
DESCRIPTION: Add a 'homepage' property to package.json to specify the subdirectory path for serving the Expo web app.

LANGUAGE: json
CODE:
{
  "homepage": "/path/to/sub-directory"
}

----------------------------------------

TITLE: Providing Vector Drawables as Splash Screen Icon on Android
DESCRIPTION: Added support for providing vector drawables as the splash screen icon on Android.

LANGUAGE: Java
CODE:
// Usage details not provided in changelog

----------------------------------------

TITLE: Viewing a Specific Update with EAS CLI
DESCRIPTION: This command displays information about a specific update in the EAS project.

LANGUAGE: bash
CODE:
$ eas update:view [update-group-id]

----------------------------------------

TITLE: Importing LinearGradient from Expo
DESCRIPTION: Basic import statement for the LinearGradient component from the expo-linear-gradient package.

LANGUAGE: javascript
CODE:
import { LinearGradient } from 'expo-linear-gradient';

----------------------------------------

TITLE: Configuring expo-media-library Plugin in app.json
DESCRIPTION: Example configuration for the expo-media-library plugin in the app.json file. It sets permissions for photos access and saving, and enables media location access on Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-media-library",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
          "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
          "isAccessMediaLocationEnabled": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Searching for SDK References in Java and Kotlin Files
DESCRIPTION: A regular expression pattern to search for SDK references in Java and Kotlin files, excluding SDK_INT. This is used to identify and potentially remove outdated code paths.

LANGUAGE: regex
CODE:
/SDK(?!_INT)/

----------------------------------------

TITLE: Creating New Expo App
DESCRIPTION: Command to create a new Expo application project.

LANGUAGE: shell
CODE:
npx create-expo-app

----------------------------------------

TITLE: Configuring expo-asset Plugin in app.json
DESCRIPTION: This JSON configuration adds the expo-asset plugin to the project's app config file. It specifies the path to an asset file that should be embedded in the native project at build time.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-asset",
        {
          "assets": ["./assets/images/example.png"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Media Loop for Exact Number of Times
DESCRIPTION: Example of looping media exactly 20 times using playback status updates and state management.

LANGUAGE: javascript
CODE:
const N = 20;

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
    if (this.state.numberOfLoops == N - 1) {
      playbackObject.setIsLooping(false);
    }
    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
  }
};

this.setState({ numberOfLoops: 0 });
// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);

----------------------------------------

TITLE: Using DOM Component in Native App
DESCRIPTION: Demonstration of importing and using a DOM component within a native Expo application

LANGUAGE: tsx
CODE:
import DOMComponent from './my-component.tsx';

export default function App() {
  return (
    <DOMComponent name="Europa" />
  );
}

----------------------------------------

TITLE: SecureStore Module Import
DESCRIPTION: Example of importing the SecureStore module in JavaScript

LANGUAGE: javascript
CODE:
import * as SecureStore from 'expo-secure-store';

----------------------------------------

TITLE: Installing expo-speech in bare React Native projects
DESCRIPTION: Command to install the expo-speech package using npx expo install. This is used for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-speech

----------------------------------------

TITLE: Installing expo-live-photo in bare React Native projects
DESCRIPTION: This command installs the expo-live-photo package using npm. It should be run after ensuring the expo package is installed and configured in the project.

LANGUAGE: bash
CODE:
npm install expo-live-photo

----------------------------------------

TITLE: Importing Asset from expo-asset
DESCRIPTION: This code snippet demonstrates how to import the Asset class from the expo-asset package. This is typically used at the top of a file where Asset functionality is needed.

LANGUAGE: javascript
CODE:
import { Asset } from 'expo-asset';

----------------------------------------

TITLE: Using Light and Dark Colors on iOS
DESCRIPTION: Use 'light' and 'dark' colors on iOS instead of 'any'.

LANGUAGE: Objective-C
CODE:
// Implementation details not provided in changelog

----------------------------------------

TITLE: Listing EAS Webhooks
DESCRIPTION: Command to list all webhooks associated with the project, displaying their IDs.

LANGUAGE: bash
CODE:
$ eas webhook:list

----------------------------------------

TITLE: Running Expo Doctor CLI
DESCRIPTION: Basic command-line usage for running the Expo Doctor package with optional path and configuration parameters.

LANGUAGE: sh
CODE:
# Usage
npx expo-doctor [options] [path]

----------------------------------------

TITLE: Configuring Color Scheme in Expo App Config
DESCRIPTION: Basic configuration for userInterfaceStyle in app.json to enable automatic color scheme switching.

LANGUAGE: json
CODE:
{
  "expo": {
    "userInterfaceStyle": "automatic"
  }
}

----------------------------------------

TITLE: iOS App Store Review Link Implementation
DESCRIPTION: Code example demonstrating how to redirect users to the iOS App Store review section using both browser and direct store links with the write-review action parameter.

LANGUAGE: typescript
CODE:
const itunesItemId = 982107779;
// Open the iOS App Store in the browser -> redirects to App Store on iOS
Linking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);
// Open the iOS App Store directly
Linking.openURL(
  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`
);

----------------------------------------

TITLE: Registering Root Component in Custom Entry File
DESCRIPTION: Demonstrates how to use registerRootComponent to set the root component in a custom entry file for non-Expo Router projects.

LANGUAGE: jsx
CODE:
import { registerRootComponent } from 'expo';
import { View } from 'react-native';

function App() {
  return <View />;
}

registerRootComponent(App);

----------------------------------------

TITLE: Importing Font Module
DESCRIPTION: Example showing how to import the Font module from expo-font package.

LANGUAGE: javascript
CODE:
import * as Font from 'expo-font';

----------------------------------------

TITLE: Adding ExpoModulesCore dependency in podspec
DESCRIPTION: Add the ExpoModulesCore dependency to the iOS podspec file.

LANGUAGE: ruby
CODE:
# ...
Pod::Spec.new do |s|
  # ...
  s.dependency 'ExpoModulesCore'
end

----------------------------------------

TITLE: Importing StatusBar from expo-status-bar
DESCRIPTION: This code snippet shows how to import the StatusBar component from the expo-status-bar library. This import statement is typically used at the top of a file where the StatusBar component will be used.

LANGUAGE: js
CODE:
import { StatusBar } from 'expo-status-bar';

----------------------------------------

TITLE: Installing expo-network Package
DESCRIPTION: Command to install the expo-network package using npx expo install

LANGUAGE: bash
CODE:
npx expo install expo-network

----------------------------------------

TITLE: Running E2E Tests for Android in React Native Async Storage
DESCRIPTION: This snippet demonstrates the commands to build the app and run E2E tests for Android. It includes bundling the Android app, building the E2E tests, and running the E2E tests.

LANGUAGE: shell
CODE:
yarn bundle:android
yarn build:e2e:android
yarn test:e2e:android

----------------------------------------

TITLE: Configuring DeviceMotion Plugin in app.json (Expo)
DESCRIPTION: This snippet shows how to configure the DeviceMotion plugin in the app.json file for Expo projects. It sets the motion permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Clearing Expo Local State
DESCRIPTION: This command clears the local state of an Expo project, which can help resolve Metro bundler connection issues.

LANGUAGE: bash
CODE:
rm -rf .expo

----------------------------------------

TITLE: Importing Sharing Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Sharing module from the expo-sharing package. This is the first step to using the sharing functionality in your Expo app.

LANGUAGE: javascript
CODE:
import * as Sharing from 'expo-sharing';

----------------------------------------

TITLE: Notification Configuration in app.json
DESCRIPTION: Configuration example for setting up notification properties in the Expo app configuration file, including custom sounds and icons.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/assets/notification-icon.png",
          "color": "#ffffff",
          "defaultChannel": "default",
          "sounds": [
            "./local/assets/notification-sound.wav",
            "./local/assets/notification-sound-other.wav"
          ]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing Network Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Network module from the expo-network package. This import statement is necessary to use the network-related functions provided by the package.

LANGUAGE: javascript
CODE:
import * as Network from 'expo-network';

----------------------------------------

TITLE: Setting Up Video Component Reference in React
DESCRIPTION: Example of obtaining a reference to the Video component in a React component for imperative control.

LANGUAGE: javascript
CODE:
_handleVideoRef = component => {
  const playbackObject = component;
  ...
}

render() {
  return (
      <Video
        ref={this._handleVideoRef}
      />
  )
}

----------------------------------------

TITLE: Launching Android Location Settings Intent with Expo
DESCRIPTION: Example showing how to import and use startActivityAsync to open Android location settings using expo-intent-launcher.

LANGUAGE: typescript
CODE:
import { startActivityAsync, ActivityAction } from 'expo-intent-launcher';

// Open location settings
startActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);

----------------------------------------

TITLE: Importing Sensors in JavaScript
DESCRIPTION: This snippet demonstrates how to import the entire Sensors module or individual sensor components from the expo-sensors library.

LANGUAGE: javascript
CODE:
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';

----------------------------------------

TITLE: Importing SystemUI Module in Expo
DESCRIPTION: Basic import statement for using the expo-system-ui package in an Expo project. This gives access to system UI manipulation functions.

LANGUAGE: javascript
CODE:
import * as SystemUI from 'expo-system-ui';

----------------------------------------

TITLE: Importing SystemUI Module in Expo
DESCRIPTION: Basic import statement for using the expo-system-ui package in an Expo project. This gives access to system UI manipulation functions.

LANGUAGE: javascript
CODE:
import * as SystemUI from 'expo-system-ui';

----------------------------------------

TITLE: Installing expo-media-library Package
DESCRIPTION: Command to install the expo-media-library package using npx expo

LANGUAGE: bash
CODE:
npx expo install expo-media-library

----------------------------------------

TITLE: Environment Variable File Example
DESCRIPTION: Example of .env file content showing different types of environment variables.

LANGUAGE: bash
CODE:
# Environment: development

APP_VARIANT=development
EXPO_PUBLIC_API_URL=https://staging.my-api-url.mycompany.com
# GOOGLE_SERVICES_JSON=***** (secret variables are not available for reading)
SENTRY_AUTH_TOKEN=token

----------------------------------------

TITLE: Installing Expo SDK Packages using npx
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages using the npx expo install command.

LANGUAGE: bash
CODE:
$ npx expo install expo-camera expo-contacts expo-sensors

----------------------------------------

TITLE: Importing Swift Headers in Objective-C for expo-updates
DESCRIPTION: Required imports for using EXUpdatesAppController in Objective-C code when implementing expo-updates in iOS applications.

LANGUAGE: objc
CODE:
#import "ExpoModulesCore-Swift.h"
#import "EXUpdatesInterface-Swift.h"
#import "EXUpdates-Swift.h"

----------------------------------------

TITLE: Displaying Selected Image in React Native
DESCRIPTION: Updates to use the selected image URI and display it in the ImageViewer component.

LANGUAGE: typescript
CODE:
import { View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useState } from 'react';

import Button from '@/components/Button';
import ImageViewer from '@/components/ImageViewer';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);

  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
    } else {
      alert('You did not select any image.');
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />
      </View>
      <View style={styles.footerContainer}>
        <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
        <Button label="Use this photo" />
      </View>
    </View>
  );
}

// ...styles remain the same

----------------------------------------

TITLE: Configuring Hermes Engine in Expo app.json
DESCRIPTION: Example configuration showing how to set Hermes as the default JavaScript engine while overriding it with JSC for iOS platform specifically.

LANGUAGE: json
CODE:
{
  "expo": {
    "jsEngine": "hermes",
    "ios": {
      "jsEngine": "jsc"
    }
  }
}

----------------------------------------

TITLE: Compiling iOS App
DESCRIPTION: Command to compile the iOS app locally using Expo CLI.

LANGUAGE: sh
CODE:
$ npx expo run:ios

----------------------------------------

TITLE: Importing expo-battery Module
DESCRIPTION: This snippet shows how to import the entire expo-battery module for use in a JavaScript or React Native application.

LANGUAGE: js
CODE:
import * as Battery from 'expo-battery';

----------------------------------------

TITLE: Implementing Package for Application Lifecycle Listeners in Java
DESCRIPTION: Create a custom Package class that implements createApplicationLifecycleListeners to hook into Application lifecycle events.

LANGUAGE: java
CODE:
// android/src/main/java/expo/modules/mylib/MyLibPackage.java
import android.content.Context;

import java.util.Collections;
import java.util.List;

import expo.modules.core.interfaces.ApplicationLifecycleListener;
import expo.modules.core.interfaces.Package;

public class MyLibPackage implements Package {
  @Override
  public List<? extends ApplicationLifecycleListener> createApplicationLifecycleListeners(Context context) {
    return Collections.singletonList(new MyLibApplicationLifecycleListener());
  }
}

----------------------------------------

TITLE: Creating a Kotlin native module
DESCRIPTION: Create a Kotlin file for the native module extending the Module class from expo-modules-core.

LANGUAGE: kotlin
CODE:
package my.module.package

import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition

class MyModule : Module() {
  override fun definition() = ModuleDefinition {
    // Definition components go here
  }
}

----------------------------------------

TITLE: Using CSS Environment Variables for Safe Area Insets
DESCRIPTION: Shows the CSS approach to handling safe area insets using environment variables.

LANGUAGE: css
CODE:
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}

----------------------------------------

TITLE: Installing expo-web-browser in bare React Native projects
DESCRIPTION: This command installs the expo-web-browser package using npx and expo CLI. It's used for adding the package to npm dependencies in bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-web-browser

----------------------------------------

TITLE: Configuring EAS Build for Automatic Version Management in eas.json
DESCRIPTION: This JSON configuration in eas.json sets up EAS Build to automatically manage app versions. It sets the appVersionSource to 'remote' and enables autoIncrement for production builds, allowing EAS Build to automatically increment versionCode and buildNumber.

LANGUAGE: json
CODE:
{
  "cli": {
    /* @hide ... */ /* @end */
    /* @info The <CODE>appVersionSource</CODE> is set to <CODE>remote</CODE>. */
    "appVersionSource": "remote"
    /* @end */
  },
  "build": {
    "production": {
      /* @info The <CODE>autoIncrement</CODE> is set <CODE>true</CODE> to automatically increment the <CODE>versionCode</CODE> or <CODE>buildNumber</CODE>. */
      "autoIncrement": true
      /* @end */
    }
  }
  /* @hide ... */ /* @end */
}

----------------------------------------

TITLE: Extending Development Profile for iOS Simulator Build
DESCRIPTION: Extend the 'development' profile properties to avoid redundancy and add the ios.simulator property for the iOS Simulator build configuration.

LANGUAGE: json
CODE:
{
  "ios-simulator": {
      "extends": "development",
      "ios": {
        "simulator": true
      }
    }
  }
}

----------------------------------------

TITLE: Installing expo-mesh-gradient Package
DESCRIPTION: Command to install the expo-mesh-gradient package using npm and expo CLI in a React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-mesh-gradient

----------------------------------------

TITLE: Implementing Android App Startup Configuration
DESCRIPTION: Example of implementing a ReactActivityLifecycleListener to configure Android app startup before the JS engine starts.

LANGUAGE: kotlin
CODE:
package expo.modules.custom

import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.util.Log
import expo.modules.core.interfaces.ReactActivityLifecycleListener

class CustomReactActivityLifecycleListener(activityContext: Context) : ReactActivityLifecycleListener {
  override fun onCreate(activity: Activity, savedInstanceState: Bundle?) {
    var value = getValue(activity)
    if (value != "") {
      // Do something to the Activity that requires the static value...
    }
  }

  private fun getValue(context: Context): String = context.getString(R.string.expo_custom_value).toLowerCase()
}

----------------------------------------

TITLE: Installing Expo Image Picker in React Native
DESCRIPTION: Command to install the expo-image-picker library in a React Native project using npx.

LANGUAGE: bash
CODE:
$ npx expo install expo-image-picker

----------------------------------------

TITLE: Configuring PostCSS in Expo
DESCRIPTION: Shows how to configure PostCSS in an Expo project using a postcss.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": {
    "autoprefixer": {}
  }
}

----------------------------------------

TITLE: Configuring Runtime Version in App Config (JSON)
DESCRIPTION: Example of setting the runtime version manually in the app configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": "<runtime_version_string>"
  }
}

----------------------------------------

TITLE: Installing expo-dev-client for iOS Simulator in Expo
DESCRIPTION: This command installs the expo-dev-client package in the project's root directory, which is necessary for running a development build on an iOS Simulator.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Generating BlurHash on Server with Express.js
DESCRIPTION: Shows how to create a server endpoint using Express.js that generates a BlurHash for an uploaded image. It uses multer for handling file uploads, sharp for image processing, and the blurhash library for encoding.

LANGUAGE: js
CODE:
const multer = require('multer');
const sharp = require('sharp');
const { encode } = require('blurhash');

const upload = multer();

app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  if (file === null) {
    res.status(400).json({ message: 'Image is missing' });
    return;
  }

  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
    resolveWithObject: true,
  });

  const blurhash = encode(
    new Uint8ClampedArray(data),
    info.width,
    info.height,
    componentX,
    componentY
  );
  res.json({ blurhash });
});

----------------------------------------

TITLE: Configuring Package Exports for RSC
DESCRIPTION: This snippet shows how to configure package.json exports to provide different entry points for React Server Components and default usage.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "react-server": "./index.react-server.js",
      "default": "./index.js"
    }
  }
}

----------------------------------------

TITLE: Unicode Character Handling in URL across Platforms
DESCRIPTION: Illustrates platform differences in handling non-ASCII characters in URLs, specifically showing how web/Node.js and native platforms handle Unicode characters in hostnames.

LANGUAGE: javascript
CODE:
console.log(new URL('http://🥓').toString());

----------------------------------------

TITLE: Installing expo-tracking-transparency in bare React Native projects
DESCRIPTION: Command to install the expo-tracking-transparency package using npx and expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-tracking-transparency

----------------------------------------

TITLE: Importing Lottie in React Native
DESCRIPTION: This snippet shows how to import the Lottie library in a React Native project. It's a simple import statement that brings in the LottieView component.

LANGUAGE: js
CODE:
import LottieView from 'lottie-react-native';

----------------------------------------

TITLE: Importing Brightness Module
DESCRIPTION: Example showing how to import the Brightness module from expo-brightness package.

LANGUAGE: js
CODE:
import * as Brightness from 'expo-brightness';

----------------------------------------

TITLE: Importing Expo Router Components
DESCRIPTION: Basic import statement showing the main navigation components available in expo-router.

LANGUAGE: javascript
CODE:
import { Stack, Tabs, Link } from 'expo-router';

----------------------------------------

TITLE: Installing Dependencies for Expo App
DESCRIPTION: Command to install the necessary dependencies for the Expo app project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Implementing Dynamic Routes in Tab Bar with Expo Router
DESCRIPTION: This snippet demonstrates how to use dynamic routes in a tab bar, specifically showing how to link to a specific user's profile using the 'href' option.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen
        name="[user]"
        options={{
          href: '/evanbacon',
          href: {
            pathname: '/[user]',
            params: {
              user: 'evanbacon',
            },
          },
        }}
      />
    </Tabs>
  );
}

----------------------------------------

TITLE: Importing Brightness Module
DESCRIPTION: Example showing how to import the Brightness module from expo-brightness package.

LANGUAGE: js
CODE:
import * as Brightness from 'expo-brightness';

----------------------------------------

TITLE: Configuring expo-screen-capture for iOS
DESCRIPTION: Command to install necessary iOS dependencies using pod-install.

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Configuring Android Scoped Storage
DESCRIPTION: Configuration required for Android 10+ to handle scoped storage changes

LANGUAGE: xml
CODE:
<manifest ... >
  <application android:requestLegacyExternalStorage="true" ... >
    ...
  </application>
</manifest>

----------------------------------------

TITLE: Configuring expo-dev-client Plugin in app.json
DESCRIPTION: This snippet demonstrates how to configure the expo-dev-client plugin in the app.json file. It shows how to set the launchMode option to 'most-recent'.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-dev-client",
        {
          "launchMode": "most-recent"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Checking adb Version in Android SDK Platform-tools
DESCRIPTION: Commands to navigate to the Android SDK platform-tools directory and check the adb version there.

LANGUAGE: bash
CODE:
$ cd ~/Library/Android/sdk/platform-tools
$ ./adb version

----------------------------------------

TITLE: Configuring expo-dev-client Plugin in app.json
DESCRIPTION: This snippet demonstrates how to configure the expo-dev-client plugin in the app.json file. It shows how to set the launchMode option to 'most-recent'.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-dev-client",
        {
          "launchMode": "most-recent"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Implementing Screen Capture Prevention with React Hook
DESCRIPTION: Example demonstrating how to prevent screen capture using the usePreventScreenCapture hook in a React Native component. This simple implementation prevents screen recording while the component is mounted.

LANGUAGE: jsx
CODE:
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>As long as this component is mounted, this screen is unrecordable!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Running EAS Workflow Manually via CLI
DESCRIPTION: This command demonstrates how to manually trigger the EAS deployment workflow using the EAS CLI. It's useful for testing the workflow without pushing to the main branch.

LANGUAGE: bash
CODE:
$ eas workflow:run .eas/workflows/deploy.yml

----------------------------------------

TITLE: React Component Import Declarations
DESCRIPTION: Import statements for Expo styleguide components and icons used in the documentation.

LANGUAGE: jsx
CODE:
import { ExpoGoLogo, DocsLogo } from '@expo/styleguide';
import { PlanEnterpriseIcon } from '@expo/styleguide-icons/custom/PlanEnterpriseIcon';
import { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';
import { CpuChip01Icon } from '@expo/styleguide-icons/outline/CpuChip01Icon';

import { BoxLink } from '~/ui/components/BoxLink';
import { YesIcon, NoIcon } from '~/ui/components/DocIcons';

----------------------------------------

TITLE: Starting the Expo App
DESCRIPTION: Command to start the Expo app in development mode.

LANGUAGE: bash
CODE:
npx expo start

----------------------------------------

TITLE: Configuring SecureStore Plugin in Expo Config
DESCRIPTION: JSON configuration for the expo-secure-store plugin in app.json to set Face ID permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-secure-store",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring SecureStore Plugin in Expo Config
DESCRIPTION: JSON configuration for the expo-secure-store plugin in app.json to set Face ID permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-secure-store",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing SystemUI in JavaScript
DESCRIPTION: Basic import statement for using the expo-system-ui package in a JavaScript/React project.

LANGUAGE: javascript
CODE:
import * as SystemUI from 'expo-system-ui';

----------------------------------------

TITLE: Importing Expo Package in TypeScript
DESCRIPTION: Basic import statement for the Expo package to access all available modules and functionalities.

LANGUAGE: typescript
CODE:
import * as Expo from 'expo';

----------------------------------------

TITLE: Importing Google Auth Provider
DESCRIPTION: Import statement for using Google authentication provider with expo-auth-session.

LANGUAGE: javascript
CODE:
import * as Google from 'expo-auth-session/providers/google';

----------------------------------------

TITLE: Configuring Initial Route Settings for Array Syntax in Expo Router
DESCRIPTION: Configuration example showing how to set up initialRouteNames for different groups when using array syntax in route definitions. This enables proper routing behavior for shared routes across multiple layouts.

LANGUAGE: tsx
CODE:
export const unstable_settings = {
  initialRouteName: 'home',
  search: {
    initialRouteName: 'search',
  },
};

export default function DynamicLayout({ segment }) {
  /* @hide  ... */ /* @end */
}

----------------------------------------

TITLE: Importing Expo Manifests in JavaScript
DESCRIPTION: This snippet demonstrates how to import the expo-manifests library in a JavaScript project. It allows access to the Manifests object, which contains types and utilities for working with Expo Manifests.

LANGUAGE: javascript
CODE:
import * as Manifests from 'expo-manifests';

----------------------------------------

TITLE: Importing FaceDetector Module
DESCRIPTION: Basic import statement for the FaceDetector module in an Expo application.

LANGUAGE: javascript
CODE:
import * as FaceDetector from 'expo-face-detector';

----------------------------------------

TITLE: Installing Specific Expo SDK Version and Running in iOS Simulator
DESCRIPTION: Commands to create a new Expo project with a specific SDK version and launch it in the iOS Simulator. This is useful for forcing an update to a particular version of Expo Go in the simulator.

LANGUAGE: bash
CODE:
# Bootstrap an SDK 51 project
$ npx create-expo-app --template blank@51

# Open the app on a simulator to install the required Expo Go app
$ npx expo start --ios

----------------------------------------

TITLE: Modifying Info.plist with a Config Plugin
DESCRIPTION: Example of a config plugin that modifies the Info.plist file to add a GADApplicationIdentifier.

LANGUAGE: ts
CODE:
import { ConfigPlugin, withInfoPlist } from 'expo/config-plugins';

export const withCustomConfig: ConfigPlugin<string> = (config, id) => {
  return withInfoPlist(config, config => {
    config.modResults.GADApplicationIdentifier = id;
    return config;
  });
};

----------------------------------------

TITLE: Importing IntentLauncher Module
DESCRIPTION: Example showing how to import the full IntentLauncher module from expo-intent-launcher.

LANGUAGE: javascript
CODE:
import * as IntentLauncher from 'expo-intent-launcher';

----------------------------------------

TITLE: Adding Face ID Usage Description to Info.plist
DESCRIPTION: Example of how to add the NSFaceIDUsageDescription key to the Info.plist file for iOS apps.

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the camera</string>

----------------------------------------

TITLE: Creating a React Native App with Expo SDK Support
DESCRIPTION: Demonstrates how to create a new React Native project with Expo SDK support using create-expo-app.

LANGUAGE: bash
CODE:
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum

----------------------------------------

TITLE: Rendering APIInstallSection Component in Markdown
DESCRIPTION: This code snippet renders the APIInstallSection component with a specific href prop, pointing to the official installation guide for the Skia library.

LANGUAGE: markdown
CODE:
<APIInstallSection href="https://shopify.github.io/react-native-skia/docs/getting-started/installation/" />

----------------------------------------

TITLE: Clearing Caches for Expo CLI with Yarn on Windows
DESCRIPTION: This snippet shows the commands to clear caches, reinstall dependencies, and restart the Expo development server using Yarn on Windows. It includes steps to remove node_modules, clear Yarn cache, reset Watchman, and clear Metro bundler caches.

LANGUAGE: bash
CODE:
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ del %localappdata%\Temp\haste-map-*

$ del %localappdata%\Temp\metro-cache

$ npx expo start --clear

----------------------------------------

TITLE: Configuring Expo Contacts Plugin in app.json
DESCRIPTION: Configuration example for the expo-contacts plugin in the app.json file. Sets up the iOS contacts permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Installing expo-intent-launcher via npm
DESCRIPTION: Command to install the expo-intent-launcher package using npx expo install in a React Native or Expo project.

LANGUAGE: bash
CODE:
npx expo install expo-intent-launcher

----------------------------------------

TITLE: Opening Android Project in Android Studio
DESCRIPTION: This command opens the generated Android project in Android Studio for debugging purposes.

LANGUAGE: bash
CODE:
$ open -a "/Applications/Android Studio.app" ./android

----------------------------------------

TITLE: Using the new useUpdates() hook in React
DESCRIPTION: Example of using the new useUpdates() hook to check for updates

LANGUAGE: javascript
CODE:
import { useUpdates } from 'expo-updates';

function App() {
  const { isChecking, isUpdateAvailable, update } = useUpdates();
  // ...
}

----------------------------------------

TITLE: Testing Deep Links with uri-scheme CLI in Expo
DESCRIPTION: This command demonstrates how to use the uri-scheme CLI to test opening native links on an iOS device, specifically launching the Expo Go app to the '/form-sheet' route.

LANGUAGE: bash
CODE:
$ npx uri-scheme open exp://192.168.87.39:19000/--/form-sheet --ios

----------------------------------------

TITLE: Implementing Hook for Expo Dev Tools Plugin
DESCRIPTION: Shows the implementation of a custom hook for an Expo dev tools plugin, including a method to send a 'ping' message.

LANGUAGE: tsx
CODE:
import { useDevToolsPluginClient } from 'expo/devtools';

export function useMyDevToolsPlugin() {
  const client = useDevToolsPluginClient('my-devtools-plugin');

  const sendPing = () => {
    client?.sendMessage('ping', { from: 'app' });
  };

  return {
    sendPing,
  };
}

----------------------------------------

TITLE: Using the new useUpdates() hook in React
DESCRIPTION: Example of using the new useUpdates() hook to check for updates

LANGUAGE: javascript
CODE:
import { useUpdates } from 'expo-updates';

function App() {
  const { isChecking, isUpdateAvailable, update } = useUpdates();
  // ...
}

----------------------------------------

TITLE: Generating Test Update Bundles for Expo Updates
DESCRIPTION: This yarn command generates test update bundles for Expo updates testing. It should be run from the TEST_PROJECT_ROOT directory.

LANGUAGE: bash
CODE:
yarn generate-test-update-bundles

----------------------------------------

TITLE: Installing Expo Package in React Native
DESCRIPTION: The 'expo' package is a comprehensive solution for integrating Expo modules into any React Native app. It includes core infrastructure, essential modules, CLI tools, and runtime configuration for Expo Go compatibility.

LANGUAGE: markdown
CODE:
# expo

The `expo` package is a single package you can install in any React Native app to begin using Expo modules. [API Reference](https://docs.expo.dev/versions/latest/sdk/expo/).

- includes core infrastructure for Expo modules: `expo-modules-core` and `expo-modules-autolinking`.
- bundles a minimal set of Expo modules that are required by nearly every app, such as `expo-asset`.
- provides [`@expo/cli`](https://github.com/expo/expo/blob/main/packages/%40expo/cli/README.md), a small CLI that provides a clean interface around both bundlers (such as Metro and Webpack) and native build tools (Xcode, Simulator.app, Android Studio, ADB, etc.), can generate native projects with `npx expo prebuild`, and aligns compatible package versions with `npx expo install`.
- exposes a JavaScript module that configures an app at runtime as needed to use `expo-font` and to function in Expo Go (optional, only if applicable).


See [CONTRIBUTING](./CONTRIBUTING.md) for instructions on working on this package.

----------------------------------------

TITLE: Updating MainActivity.java for Android Setup in Expo
DESCRIPTION: This code snippet shows the required change in the Android MainActivity.java file to use the name 'main' in the getMainComponentName function. This is only necessary if the app doesn't use Expo Prebuild.

LANGUAGE: java
CODE:
  @Override
  protected String getMainComponentName() {
+    return "main";
  }

----------------------------------------

TITLE: Implementing Media Loop Counter in Expo AV
DESCRIPTION: Example showing how to implement a counter to loop media exactly 20 times using playback status updates.

LANGUAGE: javascript
CODE:
const N = 20;

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
    if (this.state.numberOfLoops == N - 1) {
      playbackObject.setIsLooping(false);
    }
    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
  }
};

this.setState({ numberOfLoops: 0 });
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);

----------------------------------------

TITLE: Creating EAS Workflow for Android App Submission
DESCRIPTION: Define an EAS Workflow in YAML format to automate the build and submission process for Android apps to the Google Play Store.

LANGUAGE: yaml
CODE:
on:
  push:
    branches: ['main']

jobs:
  build_android:
    name: Build Android app
    type: build
    params:
      platform: android
      profile: production

  submit_android:
    name: Submit to Google Play Store
    type: submit
    params:
      platform: android
      build_id: ${{ needs.build_android.outputs.build_id }}

----------------------------------------

TITLE: BlurView Import Statement
DESCRIPTION: Shows how to import the BlurView component from the expo-blur package.

LANGUAGE: js
CODE:
import { BlurView } from 'expo-blur';

----------------------------------------

TITLE: Importing Expo Haptics Module
DESCRIPTION: Shows how to import the Haptics module from expo-haptics package.

LANGUAGE: js
CODE:
import * as Haptics from 'expo-haptics';

----------------------------------------

TITLE: Using Imperative API for Singular Routes in Expo
DESCRIPTION: This snippet demonstrates how to use the imperative API (router.navigate and router.push) with the dangerouslySingular option to enforce singular routes. It includes examples with both boolean and function-based constraints.

LANGUAGE: tsx
CODE:
router.navigate('/unique-link', { dangerouslySingular: true });
router.navigate('/unique-link', {
  dangerouslySingular: name => (name === 'unique-link' ? name : undefined),
});

router.push('/unique-link', { dangerouslySingular: true });
router.push('/unique-link', {
  dangerouslySingular: name => (name === 'unique-link' ? name : undefined),
});

----------------------------------------

TITLE: Importing DocumentPicker in JavaScript
DESCRIPTION: This code snippet shows how to import the DocumentPicker module in a JavaScript file for use in an Expo project.

LANGUAGE: javascript
CODE:
import * as DocumentPicker from 'expo-document-picker';

----------------------------------------

TITLE: Creating Custom TabButton Component in Expo Router
DESCRIPTION: This code defines a custom TabButton component that can be used with TabTrigger. It demonstrates how to create a reusable tab button with an icon and text, which responds to the focused state.

LANGUAGE: tsx
CODE:
import FontAwesome from '@expo/vector-icons/FontAwesome';
import { TabTriggerSlotProps } from 'expo-router/ui';
import { ComponentProps, Ref, forwardRef } from 'react';
import { Text, Pressable, View } from 'react-native';

type Icon = ComponentProps<typeof FontAwesome>['name'];

export type TabButtonProps = TabTriggerSlotProps & {
  icon?: Icon;
};

export const TabButton = forwardRef(
  ({ icon, children, isFocused, ...props }: TabButtonProps, ref: Ref<View>) => {
    return (
      <Pressable
        ref={ref}
        {...props}
        style={[
          {
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            flexDirection: 'column',
            gap: 5,
            padding: 10,
          },
          isFocused ? { backgroundColor: 'white' } : undefined,
        ]}>
        <FontAwesome name={icon} />
        <Text style={[{ fontSize: 16 }, isFocused ? { color: 'white' } : undefined]}>
          {children}
        </Text>
      </Pressable>
    );
  }
);

----------------------------------------

TITLE: Configuring Google Maps API Key in app.json for Android
DESCRIPTION: This JSON snippet shows how to add the Google Maps API key to the app.json file for Android configuration in an Expo project.

LANGUAGE: json
CODE:
{
    "android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY"
        }
      }
    }
}

----------------------------------------

TITLE: Importing Pedometer from expo-sensors in JavaScript
DESCRIPTION: This code snippet shows how to import the Pedometer module from expo-sensors in a JavaScript file. This import is necessary to use the Pedometer functionality in an Expo React Native application.

LANGUAGE: js
CODE:
import { Pedometer } from 'expo-sensors';

----------------------------------------

TITLE: Pull Request Reference Format
DESCRIPTION: Standard format for referencing pull requests in the changelog with author attribution

LANGUAGE: markdown
CODE:
([#XXXXX](https://github.com/expo/expo/pull/XXXXX) by [@username](https://github.com/username))

----------------------------------------

TITLE: Refactoring Search Parameters Example
DESCRIPTION: Example showing how to refactor navigation parameters from using functions to using serializable values in Expo Router

LANGUAGE: javascript
CODE:
import { useNavigation } from '@react-navigation/native';

const navigation = useNavigation();

navigation.push('Followers', {
  onPress: profile => {
    navigation.push('User', { profile });
  },
});

----------------------------------------

TITLE: Rendering QR Code for Expo Go Download in React
DESCRIPTION: This code snippet renders a QR code using the QRCodeReact component. The QR code contains a link to download Expo Go from the Google Play Store. It's styled with CSS classes for presentation.

LANGUAGE: jsx
CODE:
<div className="inline-block rounded-lg border border-default bg-palette-white p-4">
  <QRCodeReact
    value="https://play.google.com/store/apps/details?id=host.exp.exponent&referrer=docs"
    size={228}
  />
</div>

----------------------------------------

TITLE: Installing expo-dev-client Package
DESCRIPTION: Command to install the expo-dev-client package in an Expo project

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Creating a New Channel with EAS CLI
DESCRIPTION: This command creates a new channel in the EAS project.

LANGUAGE: bash
CODE:
$ eas channel:create [channel-name]

----------------------------------------

TITLE: Importing SMS Module in Expo
DESCRIPTION: Shows how to import the expo-sms module to access SMS functionality in an Expo application.

LANGUAGE: javascript
CODE:
import * as SMS from 'expo-sms';

----------------------------------------

TITLE: Expo Accelerometer Import Statement
DESCRIPTION: Basic import statement for accessing the Accelerometer module from expo-sensors package.

LANGUAGE: js
CODE:
import { Accelerometer } from 'expo-sensors';

----------------------------------------

TITLE: Adding Jest Configuration
DESCRIPTION: Configuration for Jest testing setup in package.json using expo-module-scripts preset.

LANGUAGE: javascript
CODE:
"jest": {
  "preset": "expo-module-scripts"
},

----------------------------------------

TITLE: Installing Expo Modules in React Native Project
DESCRIPTION: Command to install and set up Expo modules in an existing React Native project using npx

LANGUAGE: sh
CODE:
npx install-expo-modules

----------------------------------------

TITLE: Resource Class Configuration
DESCRIPTION: Configuration showing how to specify different resource classes for Android and iOS builds.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "android": {
        "resourceClass": "medium"
      },
      "ios": {
        "resourceClass": "large"
      }
    }
  }
}

----------------------------------------

TITLE: BlurView Import Statement
DESCRIPTION: Shows how to import the BlurView component from the expo-blur package.

LANGUAGE: js
CODE:
import { BlurView } from 'expo-blur';

----------------------------------------

TITLE: Importing TrackingTransparency Module in TypeScript
DESCRIPTION: Shows how to import the expo-tracking-transparency module in a TypeScript file. This import statement allows access to all exported functions and types from the module.

LANGUAGE: ts
CODE:
import * as ExpoTrackingTransparency from 'expo-tracking-transparency';

----------------------------------------

TITLE: Opening Existing SQLite Database in Expo
DESCRIPTION: Function to open an existing SQLite database file by copying it from assets to the app's document directory.

LANGUAGE: typescript
CODE:
import * as FileSystem from 'expo-file-system';
import * as SQLite from 'expo-sqlite';
import { Asset } from 'expo-asset';

async function openDatabase(pathToDatabaseFile: string): Promise<SQLite.WebSQLDatabase> {
  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {
    await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');
  }
  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();
  await FileSystem.copyAsync({
    from: asset.localUri,
    to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',
  });
  return SQLite.openDatabase('myDatabaseName.db');
}

----------------------------------------

TITLE: Adding Load Event to Android WebView
DESCRIPTION: Implements a load event for the Android WebView to notify when the page has finished loading.

LANGUAGE: kotlin
CODE:
package expo.modules.webview

import android.content.Context
import android.webkit.WebView
import android.webkit.WebViewClient
import expo.modules.kotlin.AppContext
import expo.modules.kotlin.viewevent.EventDispatcher
import expo.modules.kotlin.views.ExpoView

class ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {
  private val onLoad by EventDispatcher()

  internal val webView = WebView(context).also {
    it.layoutParams = LayoutParams(
      LayoutParams.MATCH_PARENT,
      LayoutParams.MATCH_PARENT
    )

    it.webViewClient = object : WebViewClient() {
      override fun onPageFinished(view: WebView, url: String) {
        onLoad(mapOf("url" to url))
      }
    }

    addView(it)
  }
}

----------------------------------------

TITLE: Customizing TabList Appearance in Expo Router
DESCRIPTION: This snippet demonstrates how to customize the appearance of TabList using the asChild prop. It allows for overriding the underlying component of TabList with a custom implementation.

LANGUAGE: tsx
CODE:
<Tabs>
  <TabSlot />
  <TabList asChild>
    {/* Render a custom TabList */}
    <CustomTabList>
      <TabTrigger name="home" href="/">
        <Text>Home</Text>
      </TabTrigger>
    </CustomTabList>
  </TabList>
</Tabs>

----------------------------------------

TITLE: Using Global CSS in Expo
DESCRIPTION: Demonstrates how to define and use global CSS styles in an Expo project.

LANGUAGE: css
CODE:
.container {
  background-color: red;
}

LANGUAGE: jsx
CODE:
import './styles.css';
import { View } from 'react-native';

export default function App() {
  return (
    <>
      {/* Use `className` to assign the style with React DOM components. */}
      <div className="container">Hello World</div>

      {/* Use `style` with the following syntax to append class names in React Native for web. */}
      <View
        style={{
          $$css: true,
          _: 'container',
        }}>
        Hello World
      </View>
    </>
  );
}

----------------------------------------

TITLE: Getting FCM Authentication Token
DESCRIPTION: Function to obtain an OAuth 2.0 access token for FCM using Google Auth Library and private key credentials.

LANGUAGE: typescript
CODE:
import { JWT } from 'google-auth-library';

function getAccessTokenAsync(
  key: string // Contents of your FCM private key file
) {
  return new Promise(function (resolve, reject) {
    const jwtClient = new JWT(
      key.client_email,
      null,
      key.private_key,
      ['https://www.googleapis.com/auth/cloud-platform'],
      null
    );
    jwtClient.authorize(function (err, tokens) {
      if (err) {
        reject(err);
        return;
      }
      resolve(tokens.access_token);
    });
  });
}

----------------------------------------

TITLE: Configuring iOS Permissions
DESCRIPTION: Required permission keys that need to be added to Info.plist for photo library access and saving

LANGUAGE: xml
CODE:
<key>NSPhotoLibraryUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to access your photos</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to save photos</string>

----------------------------------------

TITLE: Skia Package Reference
DESCRIPTION: Package identifier and source code reference for the Skia graphics library implementation.

LANGUAGE: markdown
CODE:
sourceCodeUrl: 'https://github.com/shopify/react-native-skia'
packageName: '@shopify/react-native-skia'
platforms: ['android', 'ios', 'web']

----------------------------------------

TITLE: Loading Local Image Assets in Expo
DESCRIPTION: Example of how to reference and load local image assets in an Expo React Native application.

LANGUAGE: jsx
CODE:
<Image source={require('path/to/image.png')} />

----------------------------------------

TITLE: Importing Expo TaskManager
DESCRIPTION: This snippet shows how to import the TaskManager module from the expo-task-manager package.

LANGUAGE: js
CODE:
import * as TaskManager from 'expo-task-manager';

----------------------------------------

TITLE: Page Redirection in Expo Router
DESCRIPTION: Shows how to implement immediate page redirection using the Redirect component.

LANGUAGE: tsx
CODE:
import { Redirect } from 'expo-router';

export default function Page() {
  return <Redirect href="/about" />;
}

----------------------------------------

TITLE: Importing Application Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Application module from expo-application. It allows access to various application-related information and functions.

LANGUAGE: javascript
CODE:
import * as Application from 'expo-application';

----------------------------------------

TITLE: Dynamic Route Navigation Examples
DESCRIPTION: Shows different ways to navigate to dynamic routes using inline parameters and params object.

LANGUAGE: tsx
CODE:
import { Link } from 'expo-router';
import { View, Pressable } from 'react-native';

export default function Page() {
  return (
    <View>
      <Link
        href="/user/bacon">
        View user (id inline)
      </Link>
      <Link
        href={{
          pathname: '/user/[id]',
          params: { id: 'bacon' }
        }}>
        View user (id in params in href)
      </Link>
      <Pressable onPress={() => router.navigate('/user', { id: 'bacon' })}>
        <Text>View user (imperative)</Text>
      </Pressable>
    </View>
  );
}

----------------------------------------

TITLE: Google Maps API Configuration for iOS
DESCRIPTION: JSON configuration for adding Google Maps API key to iOS platform in app.json

LANGUAGE: json
CODE:
    "ios": {
      "config": {
        "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY",
        },
      }

----------------------------------------

TITLE: Exporting Production Bundles with Source Maps
DESCRIPTION: Commands to export production JavaScript bundles with source maps for web and native platforms in Expo projects.

LANGUAGE: bash
CODE:
npx expo export --source-maps --platform web

# Native apps using Hermes can disable bytecode for analyzing the JavaScript bundle.
npx expo export --source-maps --platform ios --no-bytecode

----------------------------------------

TITLE: Importing NetInfo Package in React Native
DESCRIPTION: Basic import statement for the NetInfo package.

LANGUAGE: javascript
CODE:
import NetInfo from '@react-native-community/netinfo';

----------------------------------------

TITLE: Importing FlashList Component in React Native
DESCRIPTION: This snippet demonstrates how to import the FlashList component from the @shopify/flash-list package in a React Native application.

LANGUAGE: jsx
CODE:
import { FlashList } from '@shopify/flash-list';

----------------------------------------

TITLE: Importing Expo Print Module in JavaScript
DESCRIPTION: This snippet shows how to import the expo-print module in a JavaScript file.

LANGUAGE: js
CODE:
import * as Print from 'expo-print';

----------------------------------------

TITLE: Subscribing to Network State Updates in JavaScript
DESCRIPTION: This snippet shows how to subscribe to network state updates using NetInfo.addEventListener() and how to unsubscribe.

LANGUAGE: javascript
CODE:
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();

----------------------------------------

TITLE: Importing Battery Module in Expo Projects
DESCRIPTION: This code snippet shows how to import the Battery module from expo-battery. This import statement allows access to all the functions and components provided by the expo-battery library.

LANGUAGE: js
CODE:
import * as Battery from 'expo-battery';

----------------------------------------

TITLE: Unicode URL Handling in Expo
DESCRIPTION: Demonstrates platform-specific differences in handling non-ASCII characters in URLs, specifically showing how emoji characters in hostnames are handled differently between web/Node.js and native platforms.

LANGUAGE: javascript
CODE:
console.log(new URL('http://🥓').toString());

----------------------------------------

TITLE: Importing Checkbox from expo-checkbox
DESCRIPTION: This snippet shows how to import the Checkbox component from the expo-checkbox package. It's a simple import statement that should be used at the top of your file when you want to use the Checkbox component.

LANGUAGE: js
CODE:
import Checkbox from 'expo-checkbox';

----------------------------------------

TITLE: Importing captureRef from react-native-view-shot in JavaScript
DESCRIPTION: This snippet shows how to import the captureRef function from the react-native-view-shot library.

LANGUAGE: javascript
CODE:
import { captureRef } from 'react-native-view-shot';

----------------------------------------

TITLE: Importing Expo Device Module
DESCRIPTION: Shows the basic import statement for using the expo-device package.

LANGUAGE: js
CODE:
import * as Device from 'expo-device';

----------------------------------------

TITLE: Adding videoMaxDuration option to launchCameraAsync
DESCRIPTION: Added videoMaxDuration option to launchCameraAsync() to configure video recording duration limit.

LANGUAGE: JavaScript
CODE:
ImagePicker.launchCameraAsync({
  mediaTypes: ImagePicker.MediaTypeOptions.Videos,
  videoMaxDuration: 60, // Limit to 60 seconds
});

----------------------------------------

TITLE: Platform-Specific URL Configuration
DESCRIPTION: Example of using Platform.select to configure different URLs for web and native platforms in the Head component.

LANGUAGE: tsx
CODE:
import Head from 'expo-router/head';

export default function App() {
  return (
    <Head>
      <meta
        property="og:url"
        content={Platform.select({ web: 'https://expo.dev', default: null })}
      />
    </Head>
  );
}

----------------------------------------

TITLE: Importing Expo Sensors API in JavaScript
DESCRIPTION: Demonstrates how to import the entire Sensors module or individual sensor APIs from expo-sensors. This allows access to various device sensors for measuring motion, orientation, pressure, and other environmental factors.

LANGUAGE: javascript
CODE:
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';

----------------------------------------

TITLE: Importing MediaLibrary Module
DESCRIPTION: Basic import statement for using the MediaLibrary module in a JavaScript/React Native application.

LANGUAGE: js
CODE:
import * as MediaLibrary from 'expo-media-library';

----------------------------------------

TITLE: Installing Documentation Dependencies
DESCRIPTION: Command to install the required dependencies for running the documentation locally

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Configuring iOS Permissions
DESCRIPTION: Required iOS permission keys that need to be added to Info.plist for photo library, camera, and microphone access

LANGUAGE: xml
CODE:
<key>NSPhotoLibraryUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to save photos</string>
<key>NSCameraUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to access your camera</string>
<key>NSMicrophoneUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to use your microphone</string>

----------------------------------------

TITLE: Updating Versions Endpoint Key in Expo CLI (Bash)
DESCRIPTION: This command updates a specific key-value pair for a given SDK version on the staging versions endpoint. It provides a diff for review before committing the change.

LANGUAGE: bash
CODE:
et update-versions-endpoint --sdkVersion=35.0.0 --key="myKey" --value="myValue"

----------------------------------------

TITLE: Rendering Expo App Config Schema Table
DESCRIPTION: This code renders the AppConfigSchemaTable component, passing the imported schema as a prop. This component is used to display the available properties in a structured format.

LANGUAGE: jsx
CODE:
<AppConfigSchemaTable schema={schema} />

----------------------------------------

TITLE: Importing registerRootComponent from Expo
DESCRIPTION: This code snippet demonstrates how to import the registerRootComponent function from the 'expo' package.

LANGUAGE: typescript
CODE:
import { registerRootComponent } from 'expo';

----------------------------------------

TITLE: Dynamic Route Generation
DESCRIPTION: Implementation of generateStaticParams for handling dynamic routes in static rendering.

LANGUAGE: typescript
CODE:
export async function generateStaticParams(): Promise<Record<string, string>[]> {
  const posts = await getPosts();
  return posts.map(post => ({ id: post.id }));
}

export default function Page() {
  const { id } = useLocalSearchParams();
  return <Text>Post {id}</Text>;
}

----------------------------------------

TITLE: Importing ImageManipulator in Expo
DESCRIPTION: This snippet shows how to import the ImageManipulator module from the expo-image-manipulator package. This import statement is typically used at the top of a file where image manipulation functions are needed.

LANGUAGE: js
CODE:
import * as ImageManipulator from 'expo-image-manipulator';

----------------------------------------

TITLE: Executing PRAGMA Queries in JavaScript
DESCRIPTION: Demonstrates how to execute PRAGMA queries to configure SQLite database settings.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync('PRAGMA journal_mode = WAL');
await db.execAsync('PRAGMA foreign_keys = ON');

----------------------------------------

TITLE: Creating Singular Links in Expo Navigation
DESCRIPTION: This snippet shows how to add the dangerouslySingular prop to Link components to create links that enforce singular routes. It includes examples of both boolean and function-based singular constraints.

LANGUAGE: tsx
CODE:
<Link href="/unique-link" dangerouslySingular />
<Link href="/unique-link" dangerouslySingular={(name) => name === 'unique-link' ? name : undefined} />

----------------------------------------

TITLE: Implementing Messages Screen Component
DESCRIPTION: Creates a basic Messages screen component that renders within the nested Tab navigator.

LANGUAGE: tsx
CODE:
import { View, Text } from 'react-native';

export default function Messages() {
  return (
    <View>
      <Text>Messages screen</Text>
    </View>
  );
}

----------------------------------------

TITLE: Importing ImageManipulator in Expo
DESCRIPTION: This snippet shows how to import the ImageManipulator module from the expo-image-manipulator package. This import statement is typically used at the top of a file where image manipulation functions are needed.

LANGUAGE: js
CODE:
import * as ImageManipulator from 'expo-image-manipulator';

----------------------------------------

TITLE: Basic BlurView Layout Example - React Native/JSX
DESCRIPTION: Example of proper component ordering to avoid blur effect issues with dynamic content. Shows the correct way to structure BlurView with FlatList.

LANGUAGE: jsx
CODE:
<View>
  <FlatList />
  <BlurView />
</View>

----------------------------------------

TITLE: Basic BlurView Layout Example - React Native/JSX
DESCRIPTION: Example of proper component ordering to avoid blur effect issues with dynamic content. Shows the correct way to structure BlurView with FlatList.

LANGUAGE: jsx
CODE:
<View>
  <FlatList />
  <BlurView />
</View>

----------------------------------------

TITLE: Configuring Gradle for EAS Build (Android)
DESCRIPTION: This Gradle script is injected into the Android project to configure signing for release and debug builds. It reads credentials from a JSON file and sets up the signing configs and build types accordingly.

LANGUAGE: groovy
CODE:
// Build integration with EAS

import java.nio.file.Paths

android {
  signingConfigs {
    release {
      // This is necessary to avoid needing the user to define a release signing config manually
      // If no release config is defined, and this is not present, build for assembleRelease will crash
    }
  }

  buildTypes {
    release {
      // This is necessary to avoid needing the user to define a release build type manually
    }
    debug {
      // This is necessary to avoid needing the user to define a debug build type manually
    }
  }
}

tasks.whenTaskAdded {
  android.signingConfigs.release {
    def credentialsJson = rootProject.file("../credentials.json");
    def credentials = new groovy.json.JsonSlurper().parse(credentialsJson)
    def keystorePath = Paths.get(credentials.android.keystore.keystorePath);
    def storeFilePath = keystorePath.isAbsolute()
      ? keystorePath
      : rootProject.file("..").toPath().resolve(keystorePath);

    storeFile storeFilePath.toFile()
    storePassword credentials.android.keystore.keystorePassword
    keyAlias credentials.android.keystore.keyAlias
    if (credentials.android.keystore.containsKey("keyPassword")) {
      keyPassword credentials.android.keystore.keyPassword
    } else {
      // key password is required by Gradle, but PKCS keystores don't have one
      // using the keystore password seems to satisfy the requirement
      keyPassword credentials.android.keystore.keystorePassword
    }
  }

  android.buildTypes.release {
    signingConfig android.signingConfigs.release
  }

  android.buildTypes.debug {
    signingConfig android.signingConfigs.release
  }
}

----------------------------------------

TITLE: Importing Cellular Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the Cellular module from the expo-cellular package. This import statement is necessary to use the Cellular API in your Expo project.

LANGUAGE: javascript
CODE:
import * as Cellular from 'expo-cellular';

----------------------------------------

TITLE: Configuring Yarn 2+ for Node Modules
DESCRIPTION: YAML configuration for Yarn 2+ to use node-modules linker instead of Plug'n'Play.

LANGUAGE: yaml
CODE:
nodeLinker: node-modules

----------------------------------------

TITLE: Defining API Types for ExpoRadialChart
DESCRIPTION: Define TypeScript types for the props accepted by the ExpoRadialChartView component.

LANGUAGE: typescript
CODE:
import { ViewStyle } from 'react-native/types';

export type ChangeEventPayload = {
  value: string;
};

type Series = {
  color: string;
  percentage: number;
};

export type ExpoRadialChartViewProps = {
  style?: ViewStyle;
  data: Series[];
};

----------------------------------------

TITLE: Importing StoreReview Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the StoreReview module from the expo-store-review package in a JavaScript or TypeScript file.

LANGUAGE: javascript
CODE:
import * as StoreReview from 'expo-store-review';

----------------------------------------

TITLE: Importing and Rendering RawH3 Component in JSX
DESCRIPTION: This snippet demonstrates how to import the RawH3 component from a Text module and use it to render the word 'assets' as a heading in JSX.

LANGUAGE: jsx
CODE:
import { RawH3 } from '~/ui/components/Text';

<RawH3>assets</RawH3>

----------------------------------------

TITLE: Importing Cellular Module in React Native
DESCRIPTION: Basic import statement to access the expo-cellular module functionality in a React Native application.

LANGUAGE: javascript
CODE:
import * as Cellular from 'expo-cellular';

----------------------------------------

TITLE: Running Expo in Production Mode
DESCRIPTION: This command starts an Expo project in production mode with minification, which can help identify issues in the production JavaScript bundle.

LANGUAGE: bash
CODE:
npx expo start --no-dev --minify

----------------------------------------

TITLE: Implementing ViewPager in React Native
DESCRIPTION: This example demonstrates how to use the PagerView component from react-native-pager-view to create a swipeable three-page view in a React Native application. It includes styling for the container and individual pages.

LANGUAGE: jsx
CODE:
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
    <View style={styles.container}>
      <PagerView style={styles.container} initialPage={0}>
        <View style={styles.page} key="1">
          <Text>First page</Text>
          <Text>Swipe ➡️</Text>
        </View>
        <View style={styles.page} key="2">
          <Text>Second page</Text>
        </View>
        <View style={styles.page} key="3">
          <Text>Third page</Text>
        </View>
      </PagerView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  page: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Importing LightSensor from expo-sensors
DESCRIPTION: This snippet shows how to import the LightSensor module from the expo-sensors package.

LANGUAGE: js
CODE:
import { LightSensor } from 'expo-sensors';

----------------------------------------

TITLE: Playing sounds with expo-audio in React Native
DESCRIPTION: This snippet demonstrates how to use the useAudioPlayer hook from expo-audio to play a sound file in a React Native application.

LANGUAGE: jsx
CODE:
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioPlayer } from 'expo-audio';

const audioSource = require('./assets/Hello.mp3');

export default function App() {
  const player = useAudioPlayer(audioSource);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={() => player.play()} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});

----------------------------------------

TITLE: Configuring Android permissions for expo-cellular
DESCRIPTION: XML snippet to add the required READ_PHONE_STATE permission to the AndroidManifest.xml file for Android configuration.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.READ_PHONE_STATE" />

----------------------------------------

TITLE: iOS Entitlements Configuration
DESCRIPTION: XML configuration for Apple Sign-in entitlements in iOS app

LANGUAGE: xml
CODE:
<key>com.apple.developer.applesignin</key>
<array>
  <string>Default</string>
</array>

----------------------------------------

TITLE: Importing Expo Constants
DESCRIPTION: Shows how to import the Constants module from expo-constants package to access system information constants in an Expo app.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';

----------------------------------------

TITLE: Configuring Dynamic App Settings in JavaScript
DESCRIPTION: This snippet demonstrates how to use environment variables in app.config.js to dynamically set app name and bundle identifier based on the build profile. It uses the APP_ENV variable to determine whether it's a production or development build.

LANGUAGE: javascript
CODE:
export default () => {
  return {
    name: process.env.APP_ENV === 'production' ? 'My App' : 'My App (DEV)',
    ios: {
      bundleIdentifier: process.env.APP_ENV === 'production' ? 'com.my.app' : 'com.my.app-dev',
    },
    // ... other config here
  };
};

----------------------------------------

TITLE: Automated Build and Submit Process
DESCRIPTION: Command to automate both the build creation and App Store submission process using the --auto-submit flag.

LANGUAGE: bash
CODE:
$ eas build --platform ios --auto-submit

----------------------------------------

TITLE: Adding Load Event to iOS WebView
DESCRIPTION: Implements a load event for the iOS WebView to notify when the page has finished loading.

LANGUAGE: swift
CODE:
import ExpoModulesCore
import WebKit

class ExpoWebView: ExpoView, WKNavigationDelegate {
  let webView = WKWebView()
  let onLoad = EventDispatcher()

  required init(appContext: AppContext? = nil) {
    super.init(appContext: appContext)
    clipsToBounds = true
    webView.navigationDelegate = self
    addSubview(webView)
  }

  override func layoutSubviews() {
    webView.frame = bounds
  }

  func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
    if let url = webView.url {
      onLoad([
        "url": url.absoluteString
      ])
    }
  }
}

----------------------------------------

TITLE: Configuring TrackingTransparency Plugin in Expo Config
DESCRIPTION: Example of how to configure the expo-tracking-transparency plugin in the app.json file for Expo projects. This sets the iOS NSUserTrackingUsageDescription permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-tracking-transparency",
        {
          "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Updating ImageViewer Component for Selected Images in React Native
DESCRIPTION: Modifications to the ImageViewer component to handle and display selected images.

LANGUAGE: typescript
CODE:
import { StyleSheet } from 'react-native';
import { Image, type ImageSource } from 'expo-image';

type Props = {
  imgSource: ImageSource;
  selectedImage?: string;
};

export default function ImageViewer({ imgSource, selectedImage }: Props) {
  const imageSource = selectedImage ? { uri: selectedImage } : imgSource;

  return <Image source={imageSource} style={styles.image} />;
}

const styles = StyleSheet.create({
  image: {
    width: 320,
    height: 440,
    borderRadius: 18,
  },
});

----------------------------------------

TITLE: Initializing Expo WebView Module in Kotlin
DESCRIPTION: Defines the basic structure of the ExpoWebViewModule in Kotlin for Android, including the module definition and view setup.

LANGUAGE: kotlin
CODE:
package expo.modules.webview

import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition

class ExpoWebViewModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoWebView")

    View(ExpoWebView::class) {}
  }
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Deep Linking
DESCRIPTION: XML configuration for iOS Info.plist to define URL schemes for deep linking

LANGUAGE: xml
CODE:
<dict>
    ...
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLName</key>
            <string>gizmos</string>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>example</string>
            </array>
        </dict>
    </array>
</dict>

----------------------------------------

TITLE: Creating URL Objects in Expo
DESCRIPTION: Basic example demonstrating how to create URL and URLSearchParams objects using the standard URL API in Expo.

LANGUAGE: javascript
CODE:
const url = new URL('https://expo.dev');

const params = new URLSearchParams();

----------------------------------------

TITLE: Creating URL Objects in Expo
DESCRIPTION: Basic example demonstrating how to create URL and URLSearchParams objects using the standard URL API in Expo.

LANGUAGE: javascript
CODE:
const url = new URL('https://expo.dev');

const params = new URLSearchParams();

----------------------------------------

TITLE: Basic Battery Level Display in React Native
DESCRIPTION: This snippet demonstrates how to use the useBatteryLevel hook from expo-battery to display the current battery level in a React Native application.

LANGUAGE: jsx
CODE:
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Installing expo-build-properties Plugin
DESCRIPTION: Command to install the expo-build-properties plugin using npx expo CLI

LANGUAGE: bash
CODE:
npx expo install expo-build-properties

----------------------------------------

TITLE: Importing NavigationBar Module in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the NavigationBar module from the expo-navigation-bar package. This import is necessary to access the navigation bar functionality in your Expo project.

LANGUAGE: javascript
CODE:
import * as NavigationBar from 'expo-navigation-bar';

----------------------------------------

TITLE: Dynamic Route Parameters with TypeScript
DESCRIPTION: Examples of using typed dynamic route parameters with the Link component

LANGUAGE: typescript
CODE:
✅ <Link href={{ pathname: "/user/[id]", params: { id: 1 }}} />
❌ <Link href="/user/[id]" />
❌ <Link href={{ pathname: "/user/[id]", params: { _id: 1 }}} />
❌ <Link href={{ pathname: "/user/[id]", params: { id: 1, id2: 2 }}} />

----------------------------------------

TITLE: Importing Expo Background Task Module
DESCRIPTION: Basic import statement for using the expo-background-task module in a JavaScript/TypeScript file

LANGUAGE: javascript
CODE:
import * as BackgroundTask from 'expo-background-task';

----------------------------------------

TITLE: Configuring Associated Domains in Expo Config
DESCRIPTION: App configuration for iOS associated domains in the Expo app.json file.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "associatedDomains": ["applinks:expo.dev"]
    }
  }
}

----------------------------------------

TITLE: Using KeepAwake Functions in React Native
DESCRIPTION: This example shows how to use the activateKeepAwake and deactivateKeepAwake functions to control screen sleep behavior imperatively in a React Native component.

LANGUAGE: jsx
CODE:
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Button onPress={this._activate} title="Activate" />
        <Button onPress={this._deactivate} title="Deactivate" />
      </View>
    );
  }

  _activate = () => {
    activateKeepAwake();
    alert('Activated!');
  };

  _deactivate = () => {
    deactivateKeepAwake();
    alert('Deactivated!');
  };
}

----------------------------------------

TITLE: Importing Video Components from expo-video
DESCRIPTION: Basic import statement showing how to import the main components (VideoView and useVideoPlayer) from the expo-video package.

LANGUAGE: js
CODE:
import { VideoView, useVideoPlayer } from 'expo-video';

----------------------------------------

TITLE: Creating a New Expo Project with Bun
DESCRIPTION: Command to create a new Expo project using Bun package manager.

LANGUAGE: bash
CODE:
$ bun create expo

----------------------------------------

TITLE: GLView Integration with Reanimated Worklets in Expo
DESCRIPTION: Shows how to use GLView with Reanimated worklets. It demonstrates passing the GL context ID to a worklet and recreating the GL object inside the worklet for rendering.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}

----------------------------------------

TITLE: Handling Local Images with Base64 Conversion
DESCRIPTION: Example showing how to handle local images in iOS printing by converting them to base64 format and inlining them in HTML. Uses expo-asset and expo-image-manipulator for image processing.

LANGUAGE: js
CODE:
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });
  return `
    <html>
      <img
        src="data:image/jpeg;base64,${image.base64}"
        style="width: 90vw;" />
    </html>
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}

----------------------------------------

TITLE: Handling Local Images with Base64 Conversion
DESCRIPTION: Example showing how to handle local images in iOS printing by converting them to base64 format and inlining them in HTML. Uses expo-asset and expo-image-manipulator for image processing.

LANGUAGE: js
CODE:
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, [], { base64: true });
  return `
    <html>
      <img
        src="data:image/jpeg;base64,${image.base64}"
        style="width: 90vw;" />
    </html>
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}

----------------------------------------

TITLE: Installing Expo SDK Packages using npx
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages using the npx expo install command.

LANGUAGE: bash
CODE:
$ npx expo install expo-camera expo-contacts expo-sensors

----------------------------------------

TITLE: TaskManager Import Statement
DESCRIPTION: Example showing how to import the TaskManager module from expo-task-manager

LANGUAGE: js
CODE:
import * as TaskManager from 'expo-task-manager';

----------------------------------------

TITLE: Importing Gyroscope Module from expo-sensors
DESCRIPTION: This snippet shows how to import the Gyroscope module from the expo-sensors package. This import is necessary to use the Gyroscope functionality in an Expo project.

LANGUAGE: js
CODE:
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Importing Expo Device Module
DESCRIPTION: Example showing how to import the expo-device module to access device information functionality.

LANGUAGE: js
CODE:
import * as Device from 'expo-device';

----------------------------------------

TITLE: Opening GitHub Page for a Third-Party Library
DESCRIPTION: Demonstrates how to quickly open the GitHub page for a third-party library (react-native-localize) using npx and npm-home.

LANGUAGE: shell
CODE:
$ npx npm-home --github react-native-localize

----------------------------------------

TITLE: Listing EAS Builds
DESCRIPTION: Command to list and monitor the progress of EAS Builds.

LANGUAGE: bash
CODE:
$ eas build:list

----------------------------------------

TITLE: Creating Expo WebView Component in TypeScript
DESCRIPTION: Defines the TypeScript interface for the ExpoWebView component, including prop types and native view integration.

LANGUAGE: typescript
CODE:
import { ViewProps } from 'react-native';
import { requireNativeViewManager } from 'expo-modules-core';
import * as React from 'react';

export type Props = ViewProps;

const NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');

export default function ExpoWebView(props: Props) {
  return <NativeView {...props} />;
}

----------------------------------------

TITLE: Updating Package.json Scripts
DESCRIPTION: Modifications to package.json to use Expo CLI commands instead of React Native CLI commands

LANGUAGE: diff
CODE:
  "scripts": {
    "start": "expo start",
-    "android": "react-native run-android",
-    "ios": "react-native run-ios",
+    "android": "expo run:android",
+    "ios": "expo run:ios",
  },

----------------------------------------

TITLE: HTML Image Link for Expo Updates
DESCRIPTION: HTML markup for displaying the expo-updates logo with a link to documentation

LANGUAGE: html
CODE:
<p>
  <a href="https://docs.expo.dev/versions/latest/sdk/updates/">
    <img
      src="../../.github/resources/expo-updates.svg"
      alt="expo-updates"
      height="64" />
  </a>
</p>

----------------------------------------

TITLE: Importing Expo SDK Packages in JavaScript
DESCRIPTION: Shows how to import and use Expo SDK packages in a JavaScript file after installation.

LANGUAGE: javascript
CODE:
import { CameraView } from 'expo-camera';
import * as Contacts from 'expo-contacts';
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: React Root Component Registration
DESCRIPTION: Registering the root React component for Expo applications

LANGUAGE: JavaScript
CODE:
import { registerRootComponent } from 'expo';

registerRootComponent(App);

----------------------------------------

TITLE: Implementing ExpoRadialChartView on Android
DESCRIPTION: Create the native Android implementation of the ExpoRadialChartView using MPAndroidChart library.

LANGUAGE: kotlin
CODE:
package expo.modules.radialchart

import android.content.Context
import android.graphics.Color
import androidx.annotation.ColorInt
import com.github.mikephil.charting.charts.PieChart
import com.github.mikephil.charting.data.PieData
import com.github.mikephil.charting.data.PieDataSet
import com.github.mikephil.charting.data.PieEntry
import expo.modules.kotlin.AppContext
import expo.modules.kotlin.records.Field
import expo.modules.kotlin.records.Record
import expo.modules.kotlin.views.ExpoView


class Series : Record {
  @Field
  val color: String = "#ff0000"

  @Field
  val percentage: Float = 0.0f
}

class ExpoRadialChartView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {
  internal val chartView = PieChart(context).also {
    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)
    addView(it)
  }

  fun setChartData(data: ArrayList<Series>) {
    val entries: ArrayList<PieEntry> = ArrayList()
    val colors: ArrayList<Int> = ArrayList()
    for (series in data) {
      entries.add(PieEntry(series.percentage))
      colors.add(Color.parseColor(series.color))
    }
    val dataSet = PieDataSet(entries, "DataSet");
    dataSet.colors = colors;
    val pieData = PieData(dataSet);
    chartView.data = pieData;
    chartView.invalidate();

  }
}

----------------------------------------

TITLE: Blocking Screen Capture Imperatively in Expo
DESCRIPTION: This example shows how to programmatically enable and disable screen capture protection using expo-screen-capture in an Expo React Native application.

LANGUAGE: jsx
CODE:
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function ScreenCaptureExample() {
  const activate = async () => {
    await ScreenCapture.preventScreenCaptureAsync();
  };

  const deactivate = async () => {
    await ScreenCapture.allowScreenCaptureAsync();
  };

  return (
    <View style={styles.container}>
      <Button title="Activate" onPress={activate} />
      <Button title="Deactivate" onPress={deactivate} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Configuring iCloud Entitlements for DocumentPicker in iOS
DESCRIPTION: This XML snippet demonstrates how to manually configure iCloud entitlements in the iOS app's .entitlements file. It includes settings for iCloud container identifiers, services, and key-value store.

LANGUAGE: xml
CODE:
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
    <string>CloudDocuments</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.ubiquity-kvstore-identifier</key>
<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>

----------------------------------------

TITLE: Initializing Audio.Sound Object in JavaScript
DESCRIPTION: Example of creating an Audio.Sound object and setting up audio mode for playback in silent mode on iOS.

LANGUAGE: javascript
CODE:
await Audio.setAudioModeAsync({ playsInSilentModeIOS: true });

const playbackObject = new Audio.Sound();
// OR
const { sound: playbackObject } = await Audio.Sound.createAsync(
  { uri: 'http://foo/bar.mp3' },
  { shouldPlay: true }
);

----------------------------------------

TITLE: Configuring expo-contacts plugin in app.json
DESCRIPTION: Example of how to configure the expo-contacts plugin in the app.json file. This configuration sets the contacts permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Installing EAS CLI and Building/Submitting an Expo App
DESCRIPTION: This snippet demonstrates how to install the EAS CLI globally and then use it to build and automatically submit an Expo app to app stores. It also shows an alternative command for submitting existing binaries.

LANGUAGE: bash
CODE:
# Install the CLI
$ npm i -g eas-cli

# Build and submit your app
$ eas build --auto-submit

# OR -- Submit existing binaries
$ eas submit

----------------------------------------

TITLE: Implementing Nested Tab Navigation Layout
DESCRIPTION: Creates a Tab navigator layout nested within the root Stack navigator.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';

export default Tabs;

----------------------------------------

TITLE: Configuring Babel for Platform-Specific Transformations
DESCRIPTION: Shows how to configure Babel for platform-specific transformations in an Expo project.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  // Get the platform that Expo CLI is transforming for.
  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));

  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.
  const engine = api.caller(caller => (caller ? caller.engine : null));

  // Is bundling for a server environment, e.g. API Routes.
  const isServer = api.caller(caller => (caller ? caller.isServer : false));

  // Is bundling for development or production.
  const isDev = api.caller(caller =>
    caller
      ? caller.isDev
      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'
  );

  // Ensure the config is not cached otherwise the platform will not be updated.
  api.cache(false);
  // You can alternatively provide a more robust CONFIG cache invalidation:
  // api.cache.invalidate(() => platform);

  return {
    presets: ['babel-preset-expo'],
    plugins: [
      // Add a plugin based on the platform...
      platform === 'web' && 'my-plugin',

      // Ensure you filter out falsy values.
    ].filter(Boolean),
  };
};

----------------------------------------

TITLE: Installing Expo SDK Library using Expo CLI
DESCRIPTION: Shows the command to install an Expo SDK library (expo-device) using the Expo CLI, which ensures compatibility with the project's Expo version.

LANGUAGE: shell
CODE:
$ npx expo install expo-device

----------------------------------------

TITLE: Importing MediaLibrary Module
DESCRIPTION: Example of how to import the MediaLibrary module in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as MediaLibrary from 'expo-media-library';

----------------------------------------

TITLE: Configuring Android Manifest for Tracking Transparency
DESCRIPTION: XML snippet to add the AD_ID permission to the Android manifest file for tracking transparency functionality.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="com.google.android.gms.permission.AD_ID"/>

----------------------------------------

TITLE: Meta Tag Schema Structure
DESCRIPTION: JSON structure showing the custom meta tag format used for manual validation, particularly for assets.

LANGUAGE: javascript
CODE:
{
  meta:
  {
    asset,
    contentType, //mime type
    dimensions: {width, height},
    square,

    // For custom error messages and docs
    regexHuman,
    autogenerated,
    notHuman
  }
}

----------------------------------------

TITLE: Implementing ApplicationLifecycleListener in Kotlin
DESCRIPTION: Create a custom ApplicationLifecycleListener class to handle specific Application lifecycle events.

LANGUAGE: kotlin
CODE:
// android/src/main/java/expo/modules/mylib/MyLibApplicationLifecycleListener.kt
package expo.modules.mylib

import android.app.Application
import expo.modules.core.interfaces.ApplicationLifecycleListener

class MyLibApplicationLifecycleListener : ApplicationLifecycleListener {
  override fun onCreate(application: Application) {
    // Your setup code in `Application.onCreate`.
    doSomeSetupInApplicationOnCreate(application)
  }
}

----------------------------------------

TITLE: Including Headers and Finding Libraries for expo-av
DESCRIPTION: Specifies include directories for header files and finds necessary libraries like log and ReactAndroid for the expo-av project.

LANGUAGE: CMake
CODE:
target_include_directories(
        ${PACKAGE_NAME}
        PRIVATE
        # header only imports from turbomodule, e.g. CallInvokerHolder.h
        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule"
        "${REACT_NATIVE_DIR}/ReactCommon/callinvoker"
)

# find libraries

find_library(LOG_LIB log)

find_package(ReactAndroid REQUIRED CONFIG)

find_package(fbjni REQUIRED CONFIG)

----------------------------------------

TITLE: EAS Build Webhook Payload Structure
DESCRIPTION: Example JSON structure of the payload sent by EAS for build notifications. Includes build details, artifacts, metadata, and metrics.

LANGUAGE: json
CODE:
{
  "id": "147a3212-49fd-446f-b4e3-a6519acf264a",
  "accountName": "dsokal",
  "projectName": "example",
  "buildDetailsPageUrl": "https://expo.dev/accounts/dsokal/projects/example/builds/147a3212-49fd-446f-b4e3-a6519acf264a",
  "parentBuildId": "75ac0be7-0d90-46d5-80ec-9423fa0aaa6b",
  "appId": "bc0a82de-65a5-4497-ad86-54ff1f53edf7",
  "initiatingUserId": "d1041496-1a59-423a-8caf-479bb978203a",
  "cancelingUserId": null,
  "platform": "android",
  "status": "errored",
  "artifacts": {
    "buildUrl": "https://expo.dev/artifacts/eas/wyodu9tua2ZuKKiaJ1Nbkn.aab",
    "logsS3KeyPrefix": "production/f9609423-5072-4ea2-a0a5-c345eedf2c2a"
  },
  "metadata": {
    "appName": "example",
    "username": "dsokal",
    "workflow": "managed",
    "appVersion": "1.0.2",
    "appBuildVersion": "123",
    "cliVersion": "0.37.0",
    "sdkVersion": "41.0.0",
    "buildProfile": "production",
    "distribution": "store",
    "appIdentifier": "com.expo.example",
    "gitCommitHash": "564b61ebdd403d28b5dc616a12ce160b91585b5b",
    "gitCommitMessage": "Add home screen",
    "runtimeVersion": "1.0.2",
    "channel": "default",
    "releaseChannel": "default",
    "reactNativeVersion": "0.60.0",
    "trackingContext": {
      "platform": "android",
      "account_id": "7c34cbf1-efd4-4964-84a1-c13ed297aaf9",
      "dev_client": false,
      "project_id": "bc0a82de-65a5-4497-ad86-54ff1f53edf7",
      "tracking_id": "a3fdefa7-d129-42f2-9432-912050ab0f10",
      "project_type": "managed",
      "dev_client_version": "0.6.2"
    },
    "credentialsSource": "remote",
    "isGitWorkingTreeDirty": false,
    "message": "release build",
    "runFromCI": false
  },
  "metrics": {
    "memory": 895070208,
    "buildEndTimestamp": 1637747861168,
    "totalDiskReadBytes": 692224,
    "buildStartTimestamp": 1637747834445,
    "totalDiskWriteBytes": 14409728,
    "cpuActiveMilliseconds": 12117.540078,
    "buildEnqueuedTimestamp": 1637747792476,
    "totalNetworkEgressBytes": 355352,
    "totalNetworkIngressBytes": 78781667
  },
  "error": {
    "message": "Unknown error. Please see logs.",
    "errorCode": "UNKNOWN_ERROR"
  },
  "createdAt": "2021-11-24T09:53:01.155Z",
  "enqueuedAt": "2021-11-24T09:53:01.155Z",
  "provisioningStartedAt": "2021-11-24T09:54:01.155Z",
  "workerStartedAt": "2021-11-24T09:54:11.155Z",
  "completedAt": "2021-11-24T09:57:42.715Z",
  "updatedAt": "2021-11-24T09:57:42.715Z",
  "expirationDate": "2021-12-24T09:53:01.155Z",
  "priority": "high",
  "resourceClass": "android-n2-1.3-12",
  "actualResourceClass": "android-n2-1.3-12",
  "maxRetryTimeMinutes": 3600
}

----------------------------------------

TITLE: Importing Expo SDK Packages in JavaScript
DESCRIPTION: Shows how to import and use Expo SDK packages in a JavaScript file after installation.

LANGUAGE: javascript
CODE:
import { Camera } from 'expo-camera';
import * as Contacts from 'expo-contacts';
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Importing Accelerometer Module from expo-sensors
DESCRIPTION: This code snippet shows how to import the Accelerometer module from the expo-sensors package. This import is necessary to use the Accelerometer functionality in an Expo project.

LANGUAGE: js
CODE:
import { Accelerometer } from 'expo-sensors';

----------------------------------------

TITLE: Setting Page Margins for Printing on iOS with Expo Print
DESCRIPTION: This snippet shows how to set custom page margins when printing to a file on iOS using expo-print.

LANGUAGE: js
CODE:
const { uri } = await Print.printToFileAsync({
  html: 'This page is printed with margins',
  margins: {
    left: 20,
    top: 50,
    right: 20,
    bottom: 100,
  },
});

----------------------------------------

TITLE: Nested Navigation in Expo Router
DESCRIPTION: Shows the simplified Expo Router approach to nested navigation using direct path navigation.

LANGUAGE: jsx
CODE:
router.push('/root/settings/media');

----------------------------------------

TITLE: Configuring iOS Background Modes in app.json
DESCRIPTION: Configuration example showing how to enable background location, fetch and remote notifications in iOS through app.json settings

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": ["location", "fetch", "remote-notification"]
      }
    }
  }
}

----------------------------------------

TITLE: Example Module Configuration
DESCRIPTION: Sample configuration showing how to use the Expo AV module

LANGUAGE: properties
CODE:
# Example AVModule Configuration
compileSdkVersion=34
targetSdkVersion=34
minSdkVersion=23

----------------------------------------

TITLE: Streaming Server-Side Rendering with React Helmet Async
DESCRIPTION: Shows how to use react-helmet-async with streaming server-side rendering. It demonstrates integrating with Apollo's getDataFromTree and using through for stream manipulation.

LANGUAGE: javascript
CODE:
import through from 'through';
import { renderToNodeStream } from 'react-dom/server';
import { getDataFromTree } from 'react-apollo';
import { Helmet, HelmetProvider } from 'react-helmet-async';
import template from 'server/template';

const helmetContext = {};

const app = (
  <HelmetProvider context={helmetContext}>
    <App>
      <Helmet>
        <title>Hello World</title>
        <link rel="canonical" href="https://www.tacobell.com/" />
      </Helmet>
      <h1>Hello World</h1>
    </App>
  </HelmetProvider>
);

await getDataFromTree(app);

const [header, footer] = template({
  helmet: helmetContext.helmet,
});

res.status(200);
res.write(header);
renderToNodeStream(app)
  .pipe(
    through(
      function write(data) {
        this.queue(data);
      },
      function end() {
        this.queue(footer);
        this.queue(null);
      }
    )
  )
  .pipe(res);

----------------------------------------

TITLE: Linking to Android Play Store Reviews
DESCRIPTION: Example showing how to open the Android Play Store reviews section using Linking API with the showAllReviews parameter. Demonstrates both browser and direct store redirection.

LANGUAGE: typescript
CODE:
const androidPackageName = 'host.exp.exponent';
// Open the Android Play Store in the browser -> redirects to Play Store on Android
Linking.openURL(
  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`
);
// Open the Android Play Store directly
Linking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);

----------------------------------------

TITLE: Importing PlatformsSection Component in JSX
DESCRIPTION: This snippet demonstrates the import of the PlatformsSection component from a local file. It's used to display supported platforms for the SegmentedControl component.

LANGUAGE: jsx
CODE:
import PlatformsSection from '~/components/plugins/PlatformsSection';

----------------------------------------

TITLE: Installing Expo Web Dependencies
DESCRIPTION: Terminal commands for installing required web dependencies including react-dom, react-native-web, and @expo/metro-runtime.

LANGUAGE: bash
CODE:
$ npx expo install react-dom react-native-web @expo/metro-runtime

----------------------------------------

TITLE: Authenticating EAS CLI Command with Access Token
DESCRIPTION: Demonstrates how to use an access token to authenticate an EAS build command by setting the EXPO_TOKEN environment variable. This method allows for secure authentication without exposing username and password credentials.

LANGUAGE: bash
CODE:
EXPO_TOKEN=my_token eas build

----------------------------------------

TITLE: Implementing Package for Activity Lifecycle Listeners in Kotlin
DESCRIPTION: Create a custom Package class that implements createReactActivityLifecycleListeners to hook into Activity lifecycle events.

LANGUAGE: kotlin
CODE:
// android/src/main/java/expo/modules/mylib/MyLibPackage.kt
package expo.modules.mylib

import android.content.Context
import expo.modules.core.interfaces.Package
import expo.modules.core.interfaces.ReactActivityLifecycleListener

class MyLibPackage : Package {
  override fun createReactActivityLifecycleListeners(activityContext: Context): List<ReactActivityLifecycleListener> {
    return listOf(MyLibReactActivityLifecycleListener())
  }
}

----------------------------------------

TITLE: Configuring expo-modules in Android
DESCRIPTION: This code snippet fixes a platform misconfiguration in the expo-modules.config file for Android.

LANGUAGE: json
CODE:
"expo-modules.config": {
  "android": {
    // Fixed configuration
  }
}

----------------------------------------

TITLE: Importing Expo Sensors Package
DESCRIPTION: Shows two ways to import the expo-sensors package - either importing all sensors as a namespace or importing individual sensor components.

LANGUAGE: javascript
CODE:
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';

----------------------------------------

TITLE: Configuring app.json for expo-updates
DESCRIPTION: Modifications to the app.json file to add the updates URL and projectId for EAS Update.

LANGUAGE: diff
CODE:
{
  "expo": {
+   "updates": {
+     "url": "https://u.expo.dev/your-project-id"
+   },
+   "runtimeVersion": {
+     "policy": "sdkVersion"
+   },
+   "android": {
+     "package": "com.yourcompany.yourappname"
+   },
+   "ios": {
+     "bundleIdentifier": "com.yourcompany.yourappname"
+   },
    "extra": {
+     "eas": {
+       "projectId": "your-project-id"
+     }
    }
  }
}

----------------------------------------

TITLE: Updating AppleAuthenticationButton Component Type
DESCRIPTION: Extended the AppleAuthenticationButton component type by the View component type, excluding backgroundColor and borderRadius properties.

LANGUAGE: JavaScript
CODE:
AppleAuthenticationButton extends View {
  // Excluded properties:
  // backgroundColor
  // borderRadius
}

----------------------------------------

TITLE: Basic Calendar Usage in React Native
DESCRIPTION: Demonstrates how to request calendar permissions, fetch calendars, and create a new calendar using expo-calendar in a React Native component.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});

----------------------------------------

TITLE: Importing Network Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Network module from the expo-network package. This import statement is required to use the Network API in your Expo project.

LANGUAGE: javascript
CODE:
import * as Network from 'expo-network';

----------------------------------------

TITLE: Importing DateTimePicker Component in React Native
DESCRIPTION: This snippet demonstrates how to import the DateTimePicker component from the @react-native-community/datetimepicker package. It also shows the usage of custom components for installation instructions and content spotlight.

LANGUAGE: jsx
CODE:
import { APIInstallSection } from '~/components/plugins/InstallSection';
import { ContentSpotlight } from '~/ui/components/ContentSpotlight';

----------------------------------------

TITLE: Configuring iCloud Entitlements for iOS
DESCRIPTION: This XML snippet demonstrates how to manually configure iCloud entitlements in the iOS app's .entitlements file, including container identifiers and iCloud services.

LANGUAGE: xml
CODE:
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
    <string>CloudDocuments</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.ubiquity-kvstore-identifier</key>
<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>

----------------------------------------

TITLE: Importing LightSensor from expo-sensors
DESCRIPTION: This snippet shows how to import the LightSensor module from expo-sensors package. This import is necessary to use the light sensor functionality in an Expo project.

LANGUAGE: js
CODE:
import { LightSensor } from 'expo-sensors';

----------------------------------------

TITLE: Using a Custom Plugin in Expo Config
DESCRIPTION: Demonstrates how to import and apply a custom plugin in an Expo config file.

LANGUAGE: javascript
CODE:
const { withMySDK } = require('./my-plugin');

const config = {
  name: 'my app',
};

module.exports = withMySDK(config, { apiKey: 'X-XXX-XXX' });

----------------------------------------

TITLE: Clearing Caches for React Native CLI with Yarn on Windows
DESCRIPTION: This snippet outlines the commands to clear caches, reinstall dependencies, and restart the React Native development server using Yarn on Windows. It includes steps to remove node_modules, clear Yarn cache, reset Watchman, and clear Metro bundler caches.

LANGUAGE: bash
CODE:
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ del %localappdata%\Temp\haste-map-*

$ del %localappdata%\Temp\metro-cache

$ yarn start -- --reset-cache

----------------------------------------

TITLE: Importing Fingerprint Module in TypeScript
DESCRIPTION: Shows how to import the Fingerprint module for use in a TypeScript project.

LANGUAGE: typescript
CODE:
import * as Fingerprint from '@expo/fingerprint';

----------------------------------------

TITLE: Cloning Expo Repository
DESCRIPTION: Command to clone the Expo repository from GitHub

LANGUAGE: shell
CODE:
git clone https://github.com/expo/expo.git

----------------------------------------

TITLE: Importing Expo Router UI Components
DESCRIPTION: This code snippet demonstrates how to import the main components from the expo-router/ui submodule. These components are used to create custom tab layouts in Expo Router applications.

LANGUAGE: js
CODE:
import { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';

----------------------------------------

TITLE: Importing Linking Module in JavaScript
DESCRIPTION: Shows how to import the expo-linking module to access deep linking functionality in an Expo application.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

----------------------------------------

TITLE: Compiling Android App
DESCRIPTION: Command to compile the Android app locally using Expo CLI.

LANGUAGE: sh
CODE:
$ npx expo run:android

----------------------------------------

TITLE: Hiding a Tab in Expo Router
DESCRIPTION: This code shows how to hide a specific tab from the tab bar by setting the 'href' option to null in the tab's configuration.

LANGUAGE: tsx
CODE:
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen
        name="index"
        options={{
          href: null,
        }}
      />
    </Tabs>
  );
}

----------------------------------------

TITLE: Passing Binary Data to SQLite
DESCRIPTION: Shows how to pass binary data to the database using Uint8Array.

LANGUAGE: typescript
CODE:
await db.execAsync(`
DROP TABLE IF EXISTS blobs;
CREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);
`);

const blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);
await db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);

const row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');
expect(row.data).toEqual(blob);

----------------------------------------

TITLE: Using SafeAreaInsetsContext Consumer in React Native
DESCRIPTION: Demonstrates how to use the SafeAreaInsetsContext.Consumer to access inset data in a component.

LANGUAGE: jsx
CODE:
import { SafeAreaInsetsContext } from 'react-native-safe-area-context';

function Component() {
  return (
    <SafeAreaInsetsContext.Consumer>
      {insets => <View style={{ paddingTop: insets.top }} />}
    </SafeAreaInsetsContext.Consumer>
  );
}

----------------------------------------

TITLE: Importing APIInstallSection Component in JSX
DESCRIPTION: This snippet shows how to import the APIInstallSection component from a local file. It's used to display installation instructions for the SegmentedControl library.

LANGUAGE: jsx
CODE:
import { APIInstallSection } from '~/components/plugins/InstallSection';

----------------------------------------

TITLE: Opening iOS App Store for Writing Reviews using Linking
DESCRIPTION: This snippet shows how to redirect users to the 'Write a Review' screen for an app in the iOS App Store. It uses the Linking API and provides two methods: opening in a browser (which redirects to the App Store on iOS) and opening the App Store directly.

LANGUAGE: typescript
CODE:
const itunesItemId = 982107779;
// Open the iOS App Store in the browser -> redirects to App Store on iOS
Linking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);
// Open the iOS App Store directly
Linking.openURL(
  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`
);

----------------------------------------

TITLE: Configuring LogRocket Plugin in Expo App Config
DESCRIPTION: JSON configuration to include the LogRocket config plugin and set minimum SDK version for Android in the Expo app config file.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-build-properties",
      {
        "android": {
          "minSdkVersion": 25
        }
      }
    ],
    "@logrocket/react-native"
  ]
}

----------------------------------------

TITLE: Installing V8 Engine Dependencies
DESCRIPTION: Terminal command for installing the V8 engine dependencies in an Expo project.

LANGUAGE: shell
CODE:
$ npx expo install react-native-v8 v8-android-jit

----------------------------------------

TITLE: Installing Orbit on macOS
DESCRIPTION: Command to install Orbit using Homebrew on macOS

LANGUAGE: bash
CODE:
$ brew install expo-orbit

----------------------------------------

TITLE: Creating a Config Plugin for Android Intents
DESCRIPTION: This config plugin enables linking to email and phone apps on Android by defining the necessary intents in the AndroidManifest.xml file.

LANGUAGE: typescript
CODE:
import { withAndroidManifest, ConfigPlugin } from 'expo/config-plugins';

const withAndroidQueries: ConfigPlugin = config => {
  return withAndroidManifest(config, config => {
    config.modResults.manifest.queries = [
      {
        intent: [
          {
            action: [{ $: { 'android:name': 'android.intent.action.SENDTO' } }],
            data: [{ $: { 'android:scheme': 'mailto' } }],
          },
          {
            action: [{ $: { 'android:name': 'android.intent.action.DIAL' } }],
          },
        ],
      },
    ];

    return config;
  });
};

module.exports = withAndroidQueries;

----------------------------------------

TITLE: Configuring CMake for expo-av Shared Library
DESCRIPTION: Sets up the CMake project for expo-av, configuring C++ standard, build directory, and creating a shared library from source files.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.4.1)

project(expo-av)

set (CMAKE_VERBOSE_MAKEFILE ON)
set (CMAKE_CXX_STANDARD 20)

set (PACKAGE_NAME "expo-av")
set (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)

# shared

add_library(
        ${PACKAGE_NAME}
        SHARED
        src/main/cpp/EXAV.cpp
        src/main/cpp/JPlayerData.cpp
        src/main/cpp/JAVManager.cpp
)

----------------------------------------

TITLE: Using SafeAreaInsetsContext Consumer
DESCRIPTION: Example of using the SafeAreaInsetsContext.Consumer to access inset data.

LANGUAGE: jsx
CODE:
import { SafeAreaInsetsContext } from 'react-native-safe-area-context';

function Component() {
  return (
    <SafeAreaInsetsContext.Consumer>
      {insets => <View style={{ paddingTop: insets.top }} />}
    </SafeAreaInsetsContext.Consumer>
  );
}

----------------------------------------

TITLE: Importing Battery Module
DESCRIPTION: Example showing how to import the entire Battery module from expo-battery package.

LANGUAGE: js
CODE:
import * as Battery from 'expo-battery';

----------------------------------------

TITLE: Launching Android Location Settings with Intent Launcher
DESCRIPTION: Example showing how to import and use startActivityAsync to open Android location settings.

LANGUAGE: typescript
CODE:
import { startActivityAsync, ActivityAction } from 'expo-intent-launcher';

// Open location settings
startActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);

----------------------------------------

TITLE: Importing LocalAuthentication Module
DESCRIPTION: JavaScript import statement for using the expo-local-authentication module in your application.

LANGUAGE: javascript
CODE:
import * as LocalAuthentication from 'expo-local-authentication';

----------------------------------------

TITLE: Installing Vexo package using npm or yarn in Expo project
DESCRIPTION: Command-line instructions for installing the vexo-analytics package using either npm or yarn package managers in an Expo project.

LANGUAGE: bash
CODE:
$ npm install vexo-analytics

LANGUAGE: bash
CODE:
$ yarn add vexo-analytics

----------------------------------------

TITLE: Configuring Stack Screen Options Statically
DESCRIPTION: Example of statically configuring Stack screen options with custom header styling.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function Layout() {
  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}>
      <Stack.Screen name="home" options={{}} />
    </Stack>
  );
}

----------------------------------------

TITLE: Configuring Custom Notification Color for Android
DESCRIPTION: Added a native setting and a runtime option allowing you to use a custom notification color for Android notifications.

LANGUAGE: JavaScript
CODE:
// Example usage not provided in the changelog

----------------------------------------

TITLE: Rendering BlurView after Dynamic Content in React Native
DESCRIPTION: Example of correct placement of BlurView after dynamic content to ensure proper updating of blur effect.

LANGUAGE: jsx
CODE:
<View>
  <FlatList />
  <BlurView />
</View>

----------------------------------------

TITLE: Configuring Fingerprint with Expo
DESCRIPTION: Example of importing fingerprint configuration when using Expo.

LANGUAGE: javascript
CODE:
/** @type {import('expo/fingerprint').Config} */

----------------------------------------

TITLE: React Native Config for Package Exclusion
DESCRIPTION: Configuration example in react-native.config.js for excluding non-Expo packages from autolinking on specific platforms.

LANGUAGE: javascript
CODE:
module.exports = {
  dependencies: {
    'library-name': {
      platforms: {
        android: null,
      },
    },
  },
};

----------------------------------------

TITLE: Importing MailComposer - JavaScript
DESCRIPTION: Import statement for using the MailComposer module from expo-mail-composer package.

LANGUAGE: javascript
CODE:
import * as MailComposer from 'expo-mail-composer';

----------------------------------------

TITLE: Configuring source-map-explorer Scripts in package.json
DESCRIPTION: JSON configuration to add scripts for analyzing bundle size using source-map-explorer for web, iOS, and Android platforms in an Expo project.

LANGUAGE: json
CODE:
{
  "scripts": {
    "analyze:web": "source-map-explorer 'dist/_expo/static/js/web/*.js' 'dist/_expo/static/js/web/*.js.map'",
    "analyze:ios": "source-map-explorer 'dist/_expo/static/js/ios/*.js' 'dist/_expo/static/js/ios/*.js.map'",
    "analyze:android": "source-map-explorer 'dist/_expo/static/js/android/*.js' 'dist/_expo/static/js/android/*.js.map'"
  }
}

----------------------------------------

TITLE: Configuring Vercel for Expo Web deployment
DESCRIPTION: Create a vercel.json file to configure build settings, output directory, and URL rewrites for deploying Expo web apps on Vercel.

LANGUAGE: json
CODE:
{
  "buildCommand": "expo export:web",
  "outputDirectory": "web-build",
  "devCommand": "expo",
  "cleanUrls": true,
  "framework": null,
  "rewrites": [
    {
      "source": "/:path*",
      "destination": "/"
    }
  ]
}

----------------------------------------

TITLE: Initiating EAS Update Rollback in Bash
DESCRIPTION: This command starts the EAS Update rollback process. It launches an interactive guide to help users select the type of rollback and execute it.

LANGUAGE: bash
CODE:
$ eas update:rollback

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server for your project.

LANGUAGE: sh
CODE:
$ npx expo start

----------------------------------------

TITLE: Executing PRAGMA Queries
DESCRIPTION: Demonstrates how to execute PRAGMA queries to configure SQLite database settings, such as journal mode and foreign key support.

LANGUAGE: javascript
CODE:
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync('PRAGMA journal_mode = WAL');
await db.execAsync('PRAGMA foreign_keys = ON');

----------------------------------------

TITLE: Importing Pedometer from expo-sensors
DESCRIPTION: This code snippet shows how to import the Pedometer module from the expo-sensors package.

LANGUAGE: js
CODE:
import { Pedometer } from 'expo-sensors';

----------------------------------------

TITLE: JSX Import Statements for Expo Icons and Components
DESCRIPTION: Import statements for Expo styleguide icons and custom BoxLink component used in the documentation interface.

LANGUAGE: jsx
CODE:
import { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';
import { LayersTwo02Icon } from '@expo/styleguide-icons/outline/LayersTwo02Icon';

import { BoxLink } from '~/ui/components/BoxLink';

----------------------------------------

TITLE: Configuring Runtime Version Policy
DESCRIPTION: Example of setting up a runtime version policy in the app configuration to automatically derive version strings

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": {
      "policy": "<policy_name>"
    }
  }
}

----------------------------------------

TITLE: Updating React Native Submodule
DESCRIPTION: Git command to update the React Native submodule to the latest commit on the new SDK branch. This ensures the correct version of React Native is used for the new SDK.

LANGUAGE: shell
CODE:
git submodule update --init

----------------------------------------

TITLE: Installing expo-navigation-bar in bare React Native projects
DESCRIPTION: Command to install the expo-navigation-bar package using npx and expo CLI in a bare React Native project. This should be run after ensuring that react-native-unimodules is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-navigation-bar

----------------------------------------

TITLE: Configuring Link Navigation Behavior in Expo Router
DESCRIPTION: Demonstrates how to control initial route override behavior when navigating using Link component or imperative navigation.

LANGUAGE: javascript
CODE:
// If this navigates to a new _layout, don't override the initial route
<Link href="/route" initial={false} />;

router.push('/route', { overrideInitialScreen: false });

----------------------------------------

TITLE: Importing Expo Sensors Components
DESCRIPTION: Example showing different ways to import sensors from the expo-sensors package, including both namespace import and individual sensor imports.

LANGUAGE: javascript
CODE:
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';

----------------------------------------

TITLE: Importing Expo Application Module
DESCRIPTION: Shows how to import the expo-application module to access native application information like ID, app name, and build version at runtime

LANGUAGE: javascript
CODE:
import * as Application from 'expo-application';

----------------------------------------

TITLE: Importing Google Auth Provider
DESCRIPTION: Import statement for using Google authentication provider with AuthSession.

LANGUAGE: javascript
CODE:
import * as Google from 'expo-auth-session/providers/google';

----------------------------------------

TITLE: Running Expo Development Server in Production Mode
DESCRIPTION: Command to start the Expo development server in production mode with Atlas enabled for more accurate bundle size analysis.

LANGUAGE: bash
CODE:
EXPO_UNSTABLE_ATLAS=true npx expo start --no-dev

----------------------------------------

TITLE: Initializing iOS Native Module for Theme Management
DESCRIPTION: Sets up the basic structure of the iOS native module with a function to get the theme.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoSettingsModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoSettings")

    Function("getTheme") { () -> String in
      "system"
    }
  }
}

----------------------------------------

TITLE: Running Expo Package Check Command
DESCRIPTION: Command to verify package builds, build folder status, and unit tests

LANGUAGE: bash
CODE:
et check-packages

----------------------------------------

TITLE: Configuring Android Package Name in app.json
DESCRIPTION: Include the app's package name in the app.json file to identify the app for Google Play Store submission.

LANGUAGE: json
CODE:
{
  "android": {
    "package": "com.yourcompany.yourapp"
  }
}

----------------------------------------

TITLE: Table Component Structure
DESCRIPTION: Complex example showing table structure with multiple components

LANGUAGE: tsx
CODE:
import { Table, THead, TH, TBody, TFoot, TR, TD, Caption } from '@expo/html-elements';
import { Text } from 'react-native';

export default () => (
  <Table>
    <Caption>Caption</Caption>
    <THead>
      <TR>
        <TH colSpan="2">The table header</TH>
      </TR>
    </THead>
    <TBody>
      <TR>
        <TD>The table body</TD>
        <TD>with two columns</TD>
      </TR>
    </TBody>
    <TFoot>
      <TR>
        <TD>
          <Text>This is the table footer</Text>
        </TD>
      </TR>
    </TFoot>
  </Table>
);

----------------------------------------

TITLE: Implementing ExpoRadialChartModule on Android
DESCRIPTION: Define the ExpoRadialChartModule to expose the native view to React Native.

LANGUAGE: kotlin
CODE:
package expo.modules.radialchart

import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition

class ExpoRadialChartModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoRadialChart")

    View(ExpoRadialChartView::class) {
      Prop("data") { view: ExpoRadialChartView, prop: ArrayList<Series> ->
        view.setChartData(prop);
      }
    }
  }
}

----------------------------------------

TITLE: CSS Safe Area Implementation
DESCRIPTION: Example of implementing safe area insets using CSS environment variables.

LANGUAGE: css
CODE:
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}

----------------------------------------

TITLE: VideoThumbnails Import Statement
DESCRIPTION: Example of importing the VideoThumbnails module from expo-video-thumbnails package.

LANGUAGE: js
CODE:
import * as VideoThumbnails from 'expo-video-thumbnails';

----------------------------------------

TITLE: Configuring DocumentPicker in Expo app.json
DESCRIPTION: This snippet shows how to configure the expo-document-picker plugin in the app.json file to enable iCloud storage features and set the iCloud container environment.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Using registerRootComponent in Custom Main File for Expo
DESCRIPTION: This TypeScript code demonstrates how to use registerRootComponent in a custom main file (src/main.js) to set the root component of an Expo app.

LANGUAGE: typescript
CODE:
import { registerRootComponent } from 'expo';
import { View } from 'react-native';

function App() {
  return <View />;
}

registerRootComponent(App);

----------------------------------------

TITLE: Installing expo-video-thumbnails in bare React Native projects
DESCRIPTION: Command to install the expo-video-thumbnails package using npx and expo CLI. This is intended for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-video-thumbnails

----------------------------------------

TITLE: Importing LightSensor from expo-sensors
DESCRIPTION: This snippet shows how to import the LightSensor module from the expo-sensors package. This import is necessary to use the light sensor functionality in an Expo application.

LANGUAGE: js
CODE:
import { LightSensor } from 'expo-sensors';

----------------------------------------

TITLE: Adding React client component directives
DESCRIPTION: Adds 'use client' directives to mark React client components for better compatibility.

LANGUAGE: JavaScript
CODE:
// Mark React client components with "use client" directives.

----------------------------------------

TITLE: Config Plugin Implementation Example
DESCRIPTION: Example showing implementation of config plugins with named and anonymous functions

LANGUAGE: javascript
CODE:
const { withInfoPlist } = require('expo/config-plugins');

const withMyPlugin = (config) => {
  return withInfoPlist(config, (config) => {
    config.modResults.NSLocationWhenInUseUsageDescription = 'Allow $(PRODUCT_NAME) to use your location';
    return config;
  });
};

export default ({ config }) => {
  config.plugins ||= [];
  config.plugins.push(withMyPlugin);
  config.plugins.push((config) => config);
  return config;
};

----------------------------------------

TITLE: Installing SourceKitten and Generating TypeScript Mocks for Expo Modules
DESCRIPTION: This bash command installs SourceKitten using Homebrew and then runs the expo-modules-test-core tool to automatically generate TypeScript mocks for native functions in an Expo module.

LANGUAGE: bash
CODE:
brew install sourcekitten && npx expo-modules-test-core generate-ts-mocks

----------------------------------------

TITLE: Using Link Component with baseUrl
DESCRIPTION: Example of using the Link component from expo-router with baseUrl configuration.

LANGUAGE: jsx
CODE:
import { Link } from 'expo-router';

export default function Blog() {
  return <Link href="/blog/123">Go to blog post</Link>;
}

----------------------------------------

TITLE: Configuring Background Audio for iOS in Expo app.json
DESCRIPTION: This JSON snippet shows how to configure an Expo app to enable background audio playback on iOS by adding the necessary UIBackgroundModes key to the app.json file.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Importing ScreenCapture Module in Expo
DESCRIPTION: This code snippet shows how to import the ScreenCapture module for use in an Expo project.

LANGUAGE: js
CODE:
import * as ScreenCapture from 'expo-screen-capture';

----------------------------------------

TITLE: Importing SymbolView from expo-symbols
DESCRIPTION: This snippet shows how to import the SymbolView component from the expo-symbols library. This import is necessary to use SF Symbols in a React Native app with Expo.

LANGUAGE: js
CODE:
import { SymbolView } from 'expo-symbols';

----------------------------------------

TITLE: LinearGradient Import Statement
DESCRIPTION: Shows how to import the LinearGradient component from the expo-linear-gradient package.

LANGUAGE: javascript
CODE:
import { LinearGradient } from 'expo-linear-gradient';

----------------------------------------

TITLE: Configuring iOS permissions for expo-location
DESCRIPTION: XML configuration for adding required location usage description keys to the iOS Info.plist file.

LANGUAGE: xml
CODE:
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>

----------------------------------------

TITLE: Importing LivePhotoView from expo-live-photo
DESCRIPTION: This code snippet shows how to import the LivePhotoView component from the expo-live-photo library. This is the main component used for displaying Live Photos in a React Native application.

LANGUAGE: js
CODE:
import { LivePhotoView } from 'expo-live-photo';

----------------------------------------

TITLE: Camera Usage in Chrome iframe
DESCRIPTION: HTML snippet showing how to enable camera access within a cross-origin iframe in Chrome version 64+

LANGUAGE: html
CODE:
<iframe src="..." allow="microphone; camera;">
  <!-- <Camera /> -->
</iframe>

----------------------------------------

TITLE: Interpreting Code Policy for Google Play Store
DESCRIPTION: Excerpt from Google Play Store policy regarding interpreted code and downloadable executable code in apps.

LANGUAGE: text
CODE:
...an app may not download executable code (such as dex, JAR, .so files) from a
source other than Google Play. This restriction does not apply to code that runs
in a virtual machine or an interpreter where either provides indirect access to
Android APIs (such as JavaScript in a webview or browser).

Apps or third-party code, like SDKs, with interpreted languages (JavaScript,
Python, Lua, etc.) loaded at run time (for example, not packaged with the app)
must not allow potential violations of Google Play policies.

----------------------------------------

TITLE: Using URL Parameters in Pages
DESCRIPTION: Demonstrates how to access URL parameters in destination pages using useLocalSearchParams hook.

LANGUAGE: tsx
CODE:
import { useLocalSearchParams } from 'expo-router';
import { View, Text } from 'react-native';

export default function Users() {
  const { id, limit } = useLocalSearchParams();

  return (
    <View>
      <Text>User ID: {id}</Text>
      <Text>Limit: {limit}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Basic Metro Configuration for CSS Support
DESCRIPTION: Metro configuration to enable or disable CSS support in Expo SDK 50

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});

----------------------------------------

TITLE: Configuring Asset Bundle Patterns in app.json
DESCRIPTION: Specifies which assets should be included in atomic updates using the assetBundlePatterns key in app.json.

LANGUAGE: json
CODE:
"assetBundlePatterns": [
  "**/*" // or "assets/images/*", etc.
],

----------------------------------------

TITLE: Running Chrome with SSL Disabled for Expo Tests
DESCRIPTION: Command to run Google Chrome in a special mode that ignores SSL certificate errors, allowing Expo tests to run without HTTPS issues.

LANGUAGE: bash
CODE:
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/tmp/foo --ignore-certificate-errors --unsafely-treat-insecure-origin-as-secure=https://localhost:19006

----------------------------------------

TITLE: Setting JSC Engine in Expo Config
DESCRIPTION: Configuration snippet showing how to set JavaScriptCore (JSC) as the JavaScript engine in an Expo project's app.json configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "jsEngine": "jsc"
  }
}

----------------------------------------

TITLE: Importing Fingerprint in TypeScript
DESCRIPTION: Basic import statement for using the Fingerprint API

LANGUAGE: typescript
CODE:
import * as Fingerprint from '@expo/fingerprint';

----------------------------------------

TITLE: Configuring iOS Background Modes in Info.plist
DESCRIPTION: XML configuration required to enable background processing capabilities on iOS by adding the 'processing' background mode to Info.plist

LANGUAGE: xml
CODE:
<key>UIBackgroundModes</key>
  <array>
    <string>processing</string>
  </array>
</key>

----------------------------------------

TITLE: Migrating from CSS to React Native Safe Area Context
DESCRIPTION: Demonstrates how to replace CSS environment variables with the useSafeAreaInsets hook in a React Native app.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingLeft: insets.left,
        paddingBottom: insets.bottom,
        paddingRight: insets.right,
      }}
    />
  );
}

----------------------------------------

TITLE: Fixing Thread Safety Issue in iOS Activation State
DESCRIPTION: This code fix ensures that the activationState is only accessed from the main thread on iOS, addressing a potential threading issue.

LANGUAGE: Swift
CODE:
// Fix activationState must be used from main thread only

----------------------------------------

TITLE: Configuring package.json for GitHub Pages deployment of Expo Web
DESCRIPTION: Modify package.json to add homepage URL and deployment scripts for publishing Expo web apps to GitHub Pages.

LANGUAGE: json
CODE:
{
  "homepage": "http://dev.github.io/expo-gh-pages"
}

LANGUAGE: json
CODE:
"scripts": {
  "deploy": "gh-pages -d web-build",
  "predeploy": "expo export:web"
}

----------------------------------------

TITLE: TypeScript Link Component Usage Examples
DESCRIPTION: Examples of valid and invalid usage of the Link component with typed routes

LANGUAGE: typescript
CODE:
✅ <Link href="/about" />
✅ <Link href="/user/1" />
✅ <Link href={`/user/${id}`} />
✅ <Link href={("/user" + id) as Href} />
❌ <Link href="/usser/1" />

----------------------------------------

TITLE: Importing SVG Components in React Native
DESCRIPTION: Demonstrates how to import SVG components from the react-native-svg library.

LANGUAGE: javascript
CODE:
import * as Svg from 'react-native-svg';

----------------------------------------

TITLE: Configuring Metro for Bare Workflow in Android
DESCRIPTION: Shows how to configure the Android build.gradle file to use Expo CLI for production bundling in bare workflow projects.

LANGUAGE: groovy
CODE:
react {
    ...
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

----------------------------------------

TITLE: Importing Constants from expo-constants in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Constants object from the expo-constants package. This import allows access to system information that remains constant throughout the app's lifetime.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';

----------------------------------------

TITLE: Importing Expo Print Module
DESCRIPTION: This snippet shows how to import the expo-print module in a JavaScript file.

LANGUAGE: js
CODE:
import * as Print from 'expo-print';

----------------------------------------

TITLE: Adding Backup Database APIs in expo-sqlite
DESCRIPTION: Added new APIs for backing up databases: backupDatabaseAsync and backupDatabaseSync.

LANGUAGE: JavaScript
CODE:
// Example usage (not provided in changelog):
const result = await SQLite.backupDatabaseAsync(databaseName, backupPath);
// or
const result = SQLite.backupDatabaseSync(databaseName, backupPath);

----------------------------------------

TITLE: Importing LocalAuthentication Module
DESCRIPTION: Example of importing the LocalAuthentication module in a React Native application

LANGUAGE: javascript
CODE:
import * as LocalAuthentication from 'expo-local-authentication';

----------------------------------------

TITLE: Displaying iOS Error Stacktrace
DESCRIPTION: This snippet demonstrates how an error stacktrace appears on iOS when the error recovery system fails to recover from a fatal JS error.

LANGUAGE: text
CODE:
Last Exception Backtrace:
0   CoreFoundation                	0xf203feba4 __exceptionPreprocess + 220 (NSException.m:200)
1   libobjc.A.dylib               	0xf201a1be7 objc_exception_throw + 60 (objc-exception.mm:565)
2   MyApp                         	0x10926b7ee -[EXUpdatesAppController throwException:] + 24 (EXUpdatesAppController.m:422)
3   MyApp                         	0x109280352 -[EXUpdatesErrorRecovery _crash] + 984 (EXUpdatesErrorRecovery.m:222)
4   MyApp                         	0x10927fa3d -[EXUpdatesErrorRecovery _runNextTask] + 148 (EXUpdatesErrorRecovery.m:0)
5   libdispatch.dylib             	0x109bc1848 _dispatch_call_block_and_release + 32 (init.c:1517)
6   libdispatch.dylib             	0x109bc2a2c _dispatch_client_callout + 20 (object.m:560)
7   libdispatch.dylib             	0x109bc93a6 _dispatch_lane_serial_drain + 668 (inline_internal.h:2622)
8   libdispatch.dylib             	0x109bca0bc _dispatch_lane_invoke + 392 (queue.c:3944)
9   libdispatch.dylib             	0x109bd6472 _dispatch_workloop_worker_thread + 648 (queue.c:6732)
10  libsystem_pthread.dylib       	0xf6da2845d _pthread_wqthread + 288 (pthread.c:2599)
11  libsystem_pthread.dylib       	0xf6da2742f start_wqthread + 8

----------------------------------------

TITLE: Initializing Schemer with XDL Configuration
DESCRIPTION: Example showing how to initialize and use Schemer with XDL config to validate names and assets.

LANGUAGE: javascript
CODE:
import { getConfig } from '@expo/config';
import Schemer from '@expo/schemer';

const { exp } = getConfig(projectRoot);
const schema = await getSchemaAsync(exp.sdkVersion);
const validator = new Schemer(require('schema.json'));

validator.validateName('Wilson Zhao');
validator.validateAssets(exp);

----------------------------------------

TITLE: Setting Multiple Cache-Control Headers in API Route Response (JavaScript)
DESCRIPTION: This snippet shows how to set multiple Cache-Control headers in an API route response. It demonstrates setting different caching behaviors for browsers and EAS Hosting.

LANGUAGE: javascript
CODE:
export async function GET(request) {
  return Response.json({ ... }, {
    headers: {
	    'Cache-Control': 'no-store', // browsers should never store the response
	    'CDN-Cache-Control': 'max-age=3600', // EAS Hosting should cache for 3600s
    },
  });
}

----------------------------------------

TITLE: Running Expo Doctor
DESCRIPTION: Command to run Expo Doctor for diagnosing issues in an Expo project

LANGUAGE: bash
CODE:
$ npx expo-doctor

----------------------------------------

TITLE: Debugging iOS Capabilities in EAS Build
DESCRIPTION: Command to enable detailed logging for capability syncing in EAS Build.

LANGUAGE: shell
CODE:
EXPO_DEBUG=1 eas build

----------------------------------------

TITLE: Rendering APIInstallSection Component in Markdown
DESCRIPTION: This code snippet renders the APIInstallSection component with a specific href prop, pointing to the official installation documentation for react-native-gesture-handler.

LANGUAGE: markdown
CODE:
<APIInstallSection href="https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation" />

----------------------------------------

TITLE: Importing SVG Components in React Native
DESCRIPTION: Demonstrates how to import SVG components from the react-native-svg library.

LANGUAGE: javascript
CODE:
import * as Svg from 'react-native-svg';

----------------------------------------

TITLE: Implementing Basic Camera App with React Native
DESCRIPTION: Complete React Native example showing how to implement a camera view with permission handling and camera flip functionality using the expo-camera package.

LANGUAGE: jsx
CODE:
import { CameraView, useCameraPermissions } from 'expo-camera/next';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});

----------------------------------------

TITLE: Using 'et add-changelog' Command
DESCRIPTION: Shows how to use the 'et add-changelog' command to automate adding changelog entries to a package.

LANGUAGE: shell
CODE:
et add-changelog

----------------------------------------

TITLE: Importing NavigationBar Module in Expo for Android
DESCRIPTION: This code snippet demonstrates how to import the NavigationBar module from the expo-navigation-bar package. This module allows developers to interact with and customize the native navigation bar on Android devices.

LANGUAGE: javascript
CODE:
import * as NavigationBar from 'expo-navigation-bar';

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server, which generates a QR code for opening the app on a device.

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Importing ScreenOrientation module in JavaScript
DESCRIPTION: This code snippet shows how to import the ScreenOrientation module from the expo-screen-orientation package for use in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as ScreenOrientation from 'expo-screen-orientation';

----------------------------------------

TITLE: Importing Expo Haptics Module
DESCRIPTION: Basic import statement for the expo-haptics module to access haptic feedback functionality.

LANGUAGE: js
CODE:
import * as Haptics from 'expo-haptics';

----------------------------------------

TITLE: Installing expo-modules-autolinking in bare React Native projects
DESCRIPTION: This command installs the expo-modules-autolinking package as an npm dependency in a bare React Native project. It assumes that the expo package has already been installed and configured.

LANGUAGE: bash
CODE:
npm install expo-modules-autolinking

----------------------------------------

TITLE: Displaying Android Error Stacktrace
DESCRIPTION: This snippet shows an example of how an error stacktrace appears on Android when the error recovery system fails to recover from a fatal JS error.

LANGUAGE: text
CODE:
--------- beginning of crash
AndroidRuntime: FATAL EXCEPTION: expo-updates-error-recovery
AndroidRuntime: Process: com.myapp.MyApp, PID: 12498
AndroidRuntime: com.facebook.react.common.JavascriptException
AndroidRuntime: 
AndroidRuntime: 	at com.facebook.react.modules.core.ExceptionsManagerModule.reportException(ExceptionsManagerModule.java:72)
AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
AndroidRuntime: 	at com.facebook.react.bridge.JavaMethodWrapper.invoke(JavaMethodWrapper.java:372)
AndroidRuntime: 	at com.facebook.react.bridge.JavaModuleWrapper.invoke(JavaModuleWrapper.java:188)
AndroidRuntime: 	at com.facebook.react.bridge.queue.NativeRunnable.run(Native Method)
AndroidRuntime: 	at android.os.Handler.handleCallback(Handler.java:938)
AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:99)
AndroidRuntime: 	at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:27)
AndroidRuntime: 	at android.os.Looper.loop(Looper.java:223)
AndroidRuntime: 	at com.facebook.react.bridge.queue.MessageQueueThreadImpl$4.run(MessageQueueThreadImpl.java:228)
AndroidRuntime: 	at java.lang.Thread.run(Thread.java:923)

----------------------------------------

TITLE: Configuring expo-font plugin in app.json
DESCRIPTION: Example of how to configure the expo-font plugin in the app.json file. This allows specifying custom fonts to be linked to the native project.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["path/to/file.ttf"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Custom Entry Point in package.json
DESCRIPTION: JSON configuration for setting a custom main entry point in the package.json file.

LANGUAGE: json
CODE:
{
  "main": "src/main.jsx"
}

----------------------------------------

TITLE: Configuring Runtime Version Policy in App Config (JSON)
DESCRIPTION: Example of setting a runtime version policy in the app configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": {
      "policy": "<policy_name>"
    }
  }
}

----------------------------------------

TITLE: Update Manifest URL Structure
DESCRIPTION: Example URL structure for self-hosted update manifest files for iOS and Android platforms

LANGUAGE: plaintext
CODE:
https://esamelson.github.io/self-hosting-test/ios-index.json\nhttps://esamelson.github.io/self-hosting-test/android-index.json

----------------------------------------

TITLE: Listing Environment Variables in Windows PowerShell
DESCRIPTION: PowerShell command to display all environment variables

LANGUAGE: bash
CODE:
Get-ChildItem -Path Env: 

----------------------------------------

TITLE: Installing expo-camera Package
DESCRIPTION: NPM command to install the expo-camera package in a bare React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-camera

----------------------------------------

TITLE: Importing StoreReview Module
DESCRIPTION: Example showing how to import the StoreReview module from expo-store-review package.

LANGUAGE: javascript
CODE:
import * as StoreReview from 'expo-store-review';

----------------------------------------

TITLE: Fixing syncLibSQL Return Type in expo-sqlite
DESCRIPTION: Fixed the return type of the syncLibSQL function.

LANGUAGE: JavaScript
CODE:
// No code snippet provided in the changelog

----------------------------------------

TITLE: Android Notification Object Structure
DESCRIPTION: Example of the notification object structure received on Android devices, showing the complete hierarchy of notification data including trigger, content, and custom payload information.

LANGUAGE: json
CODE:
{
  "request": {
    "trigger": {
      "remoteMessage": {
        "originalPriority": 2,
        "sentTime": 1724782348210,
        "notification": {
          "usesDefaultVibrateSettings": false,
          "color": null,
          "channelId": null,
          "visibility": null,
          "sound": null,
          "tag": null,
          "bodyLocalizationArgs": null,
          "imageUrl": null,
          "title": "Chat App",
          "ticker": null,
          "eventTime": null,
          "body": "New message from John Doe",
          "titleLocalizationKey": null,
          "notificationPriority": null,
          "icon": null,
          "usesDefaultLightSettings": false,
          "sticky": false,
          "link": null,
          "titleLocalizationArgs": null,
          "bodyLocalizationKey": null,
          "usesDefaultSound": false,
          "clickAction": null,
          "localOnly": false,
          "lightSettings": null,
          "notificationCount": null
        }
      },
      "channelId": "default",
      "type": "push"
    },
    "content": {
      "autoDismiss": true,
      "title": "Chat App",
      "badge": null,
      "sticky": false,
      "sound": "default",
      "body": "New message from John Doe",
      "subtitle": null,
      "data": {
        "senderId": "user123",
        "senderName": "John Doe",
        "messageId": "msg789",
        "conversationId": "conversation-456",
        "messageType": "text",
        "timestamp": 1724766427
      }
    },
    "identifier": "0:1724782348220771%0f02879c0f02879c"
  },
  "date": 1724782348210
}

----------------------------------------

TITLE: Using CSS Modules in Expo
DESCRIPTION: Shows how to use CSS Modules for scoped styling in Expo components.

LANGUAGE: jsx
CODE:
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
    <>
      <Text
        style={{
          // This is how react-native-web class names are applied
          $$css: true,
          _: styles.text,
        }}>
        Hello World
      </Text>
      <Text style={unstable_styles.text}>Hello World</Text>
      {/* Web-only usage: */}
      <p className={styles.text}>Hello World</p>
    </>
  );
}

LANGUAGE: css
CODE:
.text {
  color: red;
}

----------------------------------------

TITLE: Configuring Runtime Version in App Config
DESCRIPTION: Example of manually configuring the runtime version string in the app's configuration file

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": "<runtime_version_string>"
  }
}

----------------------------------------

TITLE: Migrating to Expo Modules API and Swift
DESCRIPTION: The module was migrated to use Expo Modules API and Swift, adding support for Fabric.

LANGUAGE: Swift
CODE:
// Migration to Expo Modules API and Swift

----------------------------------------

TITLE: ExpoModulesProvider Swift Generation
DESCRIPTION: Code for generating the ExpoModulesProvider.swift file during build phase.

LANGUAGE: swift
CODE:
ExpoModulesProvider.swift

----------------------------------------

TITLE: Using useSafeAreaInsets Hook in React Native
DESCRIPTION: This snippet shows how to use the useSafeAreaInsets hook to access safe area inset values directly in a component.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}

----------------------------------------

TITLE: Importing Sharing Module in JavaScript
DESCRIPTION: This snippet demonstrates how to import the Sharing module from expo-sharing. This import is necessary to use the sharing functionality in your Expo project.

LANGUAGE: javascript
CODE:
import * as Sharing from 'expo-sharing';

----------------------------------------

TITLE: Installing expo-mail-composer package
DESCRIPTION: Command to install the expo-mail-composer package using npx expo install in a React Native project

LANGUAGE: bash
CODE:
npx expo install expo-mail-composer

----------------------------------------

TITLE: Resetting Expo Project with npm Command
DESCRIPTION: This command resets the Expo project by moving existing files in the 'app' directory to 'app-example' and creating a new 'app' directory with a fresh 'index.tsx' file. It's used to remove boilerplate code and start fresh.

LANGUAGE: bash
CODE:
$ npm run reset-project

----------------------------------------

TITLE: Importing Screen Orientation Module
DESCRIPTION: Basic import statement for using the expo-screen-orientation package in a JavaScript/React Native application

LANGUAGE: javascript
CODE:
import * as ScreenOrientation from 'expo-screen-orientation';

----------------------------------------

TITLE: Running iOS Fastlane Actions
DESCRIPTION: These commands demonstrate how to run various Fastlane actions for iOS, including preparing schemes, running tests, creating builds, and releasing.

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios prepare_schemes

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios test_module

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios unit_tests

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios test

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios create_simulator_build

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios create_expo_client_build

LANGUAGE: sh
CODE:
[bundle exec] fastlane ios release

----------------------------------------

TITLE: Configuring Runtime Version Policy in app.json
DESCRIPTION: Example configuration for setting the runtime version policy in app.json. This configuration ensures that the runtime version matches the app version.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": {
      "policy": "appVersion"
    }
  }
}

----------------------------------------

TITLE: Configuring iOS Build and Submit Workflow in YAML
DESCRIPTION: This workflow creates and submits an iOS build of a project on every push to any branch. It includes two jobs: one for building the iOS app and another for submitting it, using the build ID from the previous job.

LANGUAGE: yaml
CODE:
name: Release iOS app

on:
  push:
    branches: ['*']

jobs:
  build:
    type: build
    params:
      platform: ios
      profile: production
  submit:
    needs: [build]
    type: submit
    params:
      build_id: ${{ needs.build.outputs.build_id }}

----------------------------------------

TITLE: Implementing DeviceMotion Permission Requests in Expo
DESCRIPTION: Example of using the new permission request methods for DeviceMotion in Expo. These methods replace the deprecated Permissions.askAsync() and Permissions.getAsync() functions.

LANGUAGE: JavaScript
CODE:
import * as DeviceMotion from 'expo-sensors/DeviceMotion';

// Request permissions
await DeviceMotion.requestPermissionsAsync();

// Check permissions status
const { status } = await DeviceMotion.getPermissionsAsync();

----------------------------------------

TITLE: Updating Android Manifest for expo-updates
DESCRIPTION: Modifications to AndroidManifest.xml to add expo-updates configuration.

LANGUAGE: diff
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

  <application
    android:name=".MainApplication"
    ...
  >
+   <meta-data android:name="expo.modules.updates.ENABLED" android:value="true"/>
+   <meta-data android:name="expo.modules.updates.EXPO_SDK_VERSION" android:value="xx.x.x"/>
+   <meta-data android:name="expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH" android:value="ALWAYS"/>
+   <meta-data android:name="expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS" android:value="0"/>
+   <meta-data android:name="expo.modules.updates.EXPO_UPDATE_URL" android:value="https://u.expo.dev/your-project-id"/>
+   <meta-data android:name="expo.modules.updates.EXPO_RUNTIME_VERSION" android:value="@string/expo_runtime_version"/>
    ...
  </application>
</manifest>

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server and instructions for launching iOS Simulator.

LANGUAGE: bash
CODE:
npx expo start

----------------------------------------

TITLE: Video Preloading Implementation
DESCRIPTION: Advanced example showing how to implement video preloading for smooth transitions between multiple videos.

LANGUAGE: tsx
CODE:
import { useVideoPlayer, VideoView, VideoSource } from 'expo-video';
import { useState, useCallback } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';

const bigBuckBunnySource: VideoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

const elephantsDreamSource: VideoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4';

export default function PreloadingVideoPlayerScreen() {
  const player1 = useVideoPlayer(bigBuckBunnySource, player => {
    player.play();
  });

  const player2 = useVideoPlayer(elephantsDreamSource, player => {
    player.currentTime = 20;
  });

  const [currentPlayer, setCurrentPlayer] = useState(player1);

  const replacePlayer = useCallback(async () => {
    currentPlayer.pause();
    if (currentPlayer === player1) {
      setCurrentPlayer(player2);
      player1.pause();
      player2.play();
    } else {
      setCurrentPlayer(player1);
      player2.pause();
      player1.play();
    }
  }, [player1, currentPlayer]);

  return (
    <View style={styles.contentContainer}>
      <VideoView player={currentPlayer} style={styles.video} nativeControls={false} />
      <TouchableOpacity style={styles.button} onPress={replacePlayer}>
        <Text style={styles.buttonText}>Replace Player</Text>
      </TouchableOpacity>
    </View>
  );
}

----------------------------------------

TITLE: Importing Brightness Module
DESCRIPTION: Example showing how to import the expo-brightness module in a React Native application.

LANGUAGE: js
CODE:
import * as Brightness from 'expo-brightness';

----------------------------------------

TITLE: Package Import for MaskedView
DESCRIPTION: Package identifier for importing the MaskedView component in React Native applications.

LANGUAGE: javascript
CODE:
@react-native-masked-view/masked-view

----------------------------------------

TITLE: Importing Brightness Module
DESCRIPTION: Example showing how to import the expo-brightness module in a React Native application.

LANGUAGE: js
CODE:
import * as Brightness from 'expo-brightness';

----------------------------------------

TITLE: Importing Application Module from Expo
DESCRIPTION: Basic import statement for using the expo-application module in your project. This gives access to all Application related utilities.

LANGUAGE: javascript
CODE:
import * as Application from 'expo-application';

----------------------------------------

TITLE: Installing expo-screen-orientation in bare React Native projects
DESCRIPTION: Command to install the expo-screen-orientation package using npm. This is for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npm install expo-screen-orientation

----------------------------------------

TITLE: Running Code Formatting and Tests
DESCRIPTION: Commands for running Prettier formatting, tests and linting

LANGUAGE: shell
CODE:
yarn prettier
yarn test
yarn lint

----------------------------------------

TITLE: Jest Matcher Examples in TypeScript
DESCRIPTION: Collection of Jest matcher examples for testing router state, parameters, and navigation.

LANGUAGE: tsx
CODE:
expect(screen).toHavePathname('/my-router');

expect(screen).toHavePathnameWithParams('/my-router?hello=world');

expect(screen).toHaveSegments(['[id]']);

expect(screen).useLocalSearchParams({ first: 'abc' });

expect(screen).useGlobalSearchParams({ first: 'abc' });

expect(screen).toHaveRouterState({
  routes: [{ name: 'index', path: '/' }],
});

----------------------------------------

TITLE: Rendering BoxLink Component for Expo In-app Purchase Tutorial in JSX
DESCRIPTION: This JSX code renders a BoxLink component that provides a link to an Expo In-App Purchase Tutorial. It includes a title, description, and icon for the tutorial link.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Expo In-App Purchase Tutorial"
  description={
    <>
      The getting started guide for in-app purchases and subscriptions with{' '}
      <CODE>react-native-purchases</CODE> library and RevenueCat.
    </>
  }
  href="https://www.revenuecat.com/blog/engineering/expo-in-app-purchase-tutorial/"
  Icon={BookOpen02Icon}
/>

----------------------------------------

TITLE: Starting the Expo Development Server
DESCRIPTION: This command starts the Expo development server, which is necessary for running the development build on the iOS device.

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Expo Checkbox Import Statement
DESCRIPTION: Shows the basic import statement for using the Checkbox component from expo-checkbox package.

LANGUAGE: javascript
CODE:
import Checkbox from 'expo-checkbox';

----------------------------------------

TITLE: Setting Credentials Source in eas.json
DESCRIPTION: Example of configuring eas.json to specify whether to use local or remote credentials for different build profiles.

LANGUAGE: json
CODE:
{
  "build": {
    "amazon-production": {
      "android": {
        "credentialsSource": "local"
      }
    },
    "google-production": {
      "android": {
        "credentialsSource": "remote"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring EAS Build for Expo Project
DESCRIPTION: Command to create an EAS configuration for your Expo project. This sets up the necessary build settings for your app.

LANGUAGE: bash
CODE:
$ eas build:configure

----------------------------------------

TITLE: API Route Error Example
DESCRIPTION: Example of how errors are thrown in API routes that will be captured as crashes

LANGUAGE: javascript
CODE:
throw new Error("An error!")

----------------------------------------

TITLE: Configuring Build Properties in app.config.js for Expo
DESCRIPTION: This snippet shows how to configure the expo-build-properties plugin in the app.config.js file of an Expo project. It demonstrates setting Android and iOS build properties using JavaScript.

LANGUAGE: javascript
CODE:
export default {
  expo: {
    plugins: [
      [
        'expo-build-properties',
        {
          android: {
            compileSdkVersion: 34,
            targetSdkVersion: 34,
            buildToolsVersion: '34.0.0',
          },
          ios: {
            deploymentTarget: '13.4',
          },
        },
      ],
    ],
  },
};

----------------------------------------

TITLE: Importing RawH3 Component in TypeScript
DESCRIPTION: This snippet shows the import statement for the RawH3 component from the Text component file in the UI components directory.

LANGUAGE: TypeScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Customizing Android notification colors
DESCRIPTION: XML color definitions for Android notifications in colors.xml

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <color name="notification_icon_color">#4630EB</color>
</resources>

----------------------------------------

TITLE: Android Google Maps Configuration in app.json
DESCRIPTION: Configuration snippet for setting up Google Maps API key in app.json for Android platform.

LANGUAGE: json
CODE:
    "android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY",
        },
      },
    }

----------------------------------------

TITLE: Using KeepAwake Hook in React Native
DESCRIPTION: Example demonstrating how to use the useKeepAwake hook to prevent screen sleep. The hook keeps the screen active as long as the component is mounted.

LANGUAGE: jsx
CODE:
import { useKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Text, View } from 'react-native';

export default function KeepAwakeExample() {
  useKeepAwake();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This screen will never sleep!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Importing Intent Launcher Module
DESCRIPTION: Shows how to import the full IntentLauncher module for use in an application.

LANGUAGE: javascript
CODE:
import * as IntentLauncher from 'expo-intent-launcher';

----------------------------------------

TITLE: Subscribing to Network Status Updates
DESCRIPTION: Example of using NetInfo.addEventListener() to subscribe to network state changes with cleanup.

LANGUAGE: javascript
CODE:
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();

----------------------------------------

TITLE: Installing expo-dev-client Package
DESCRIPTION: Command to install the expo-dev-client package in an Expo project, which is required for development builds.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Importing LivePhotoView Component
DESCRIPTION: Basic import statement for the LivePhotoView component from expo-live-photo package.

LANGUAGE: javascript
CODE:
import { LivePhotoView } from 'expo-live-photo';

----------------------------------------

TITLE: Using IcoMoon Icons with createIconSetFromIcoMoon in React Native
DESCRIPTION: Demonstrates how to use the createIconSetFromIcoMoon method to create and use custom IcoMoon icons in a React Native app with Expo.

LANGUAGE: jsx
CODE:
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { useFonts } from 'expo-font';
import createIconSetFromIcoMoon from '@expo/vector-icons/createIconSetFromIcoMoon';

const Icon = createIconSetFromIcoMoon(
  require('./assets/icomoon/selection.json'),
  'IcoMoon',
  'icomoon.ttf'
);

export default function App() {
  const [fontsLoaded] = useFonts({
    IcoMoon: require('./assets/icomoon/icomoon.ttf'),
  });

  if (!fontsLoaded) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Icon name="pacman" size={50} color="red" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Creating iOS Preview Build with EAS CLI
DESCRIPTION: This command uses the EAS CLI to create an iOS preview build using the configured preview profile. It triggers the build process on EAS Build for iOS devices.

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile preview

----------------------------------------

TITLE: Building Development Client Commands
DESCRIPTION: Various CLI commands for building development clients on different platforms using EAS and local builds.

LANGUAGE: bash
CODE:
$ eas build --platform android --profile development

LANGUAGE: bash
CODE:
$ npx expo run:android

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile development

LANGUAGE: bash
CODE:
$ npx expo run:ios

LANGUAGE: bash
CODE:
$ npx expo run:ios --device

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Installing React Native Debugger on macOS
DESCRIPTION: This command installs the React Native Debugger tool on macOS using Homebrew.

LANGUAGE: bash
CODE:
$ brew install react-native-debugger

----------------------------------------

TITLE: Configuring HTML Root for Static/Server Rendering
DESCRIPTION: Sets up the root HTML structure for static or server rendering, including PWA manifest link and service worker registration.

LANGUAGE: tsx
CODE:
import { ScrollViewStyleReset } from 'expo-router/html';
import type { PropsWithChildren } from 'react';

export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

        <link rel="manifest" href="/manifest.json" />

        <ScrollViewStyleReset />

        <script dangerouslySetInnerHTML={{ __html: sw }} />
      </head>
      <body>{children}</body>
    </html>
  );
}

const sw = `
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js').then(registration => {
            console.log('Service Worker registered with scope:', registration.scope);
        }).catch(error => {
            console.error('Service Worker registration failed:', error);
        });
    });
}
`;

----------------------------------------

TITLE: Importing FaceDetector Module in JavaScript
DESCRIPTION: This code snippet shows how to import the FaceDetector module from the expo-face-detector package in a JavaScript file.

LANGUAGE: js
CODE:
import * as FaceDetector from 'expo-face-detector';

----------------------------------------

TITLE: Importing Swift Headers in Objective-C++
DESCRIPTION: Required imports for using EXUpdatesAppController methods in Objective-C++ code

LANGUAGE: objc
CODE:
#import "ExpoModulesCore-Swift.h"
#import "EXUpdatesInterface-Swift.h"
#import "EXUpdates-Swift.h"

----------------------------------------

TITLE: Generating QR Code for Branch
DESCRIPTION: This example demonstrates how to create a QR code for the latest update available on a specific branch using the project ID and branch ID.

LANGUAGE: text
CODE:
https://qr.expo.dev/eas-update?projectId=your-project-id&branchId=your-branch-id

----------------------------------------

TITLE: Rendering APIInstallSection Component in JSX
DESCRIPTION: This snippet demonstrates the usage of the APIInstallSection component to provide installation instructions for the SegmentedControl library. It includes a link to the GitHub repository's getting started guide.

LANGUAGE: jsx
CODE:
<APIInstallSection href="https://github.com/react-native-segmented-control/segmented-control#getting-started" />

----------------------------------------

TITLE: Configuring Android Manifest for Calendar Permissions
DESCRIPTION: XML configuration to add READ_CALENDAR and WRITE_CALENDAR permissions to the Android manifest file.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_CALENDAR" />
<uses-permission android:name="android.permission.WRITE_CALENDAR" />

----------------------------------------

TITLE: Importing AuthSession Module
DESCRIPTION: Basic import statement for using AuthSession in an Expo application.

LANGUAGE: javascript
CODE:
import * as AuthSession from 'expo-auth-session';

----------------------------------------

TITLE: Configuring iOS Permissions for Contacts
DESCRIPTION: XML snippet to add NSContactsUsageDescription key to the iOS Info.plist file.

LANGUAGE: xml
CODE:
<key>NSContactsUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your contacts</string>

----------------------------------------

TITLE: Configuring Android build.gradle for Expo Modules
DESCRIPTION: Android build.gradle configuration to enable native module support and autolinking in Expo projects.

LANGUAGE: groovy
CODE:
apply from: new File(["node", "--print", "require.resolve('expo-modules-core/package.json')"].execute(null, rootDir).text.trim(), "../gradle.groovy")
apply from: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../react.gradle")
apply from: new File(["node", "--print", "require.resolve('expo-updates/package.json')"].execute(null, rootDir).text.trim(), "../scripts/create-manifest-android.gradle")

// ...

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesAppBuildGradle(project)

----------------------------------------

TITLE: Implementing Theme Change Events on iOS
DESCRIPTION: Adds functionality to emit theme change events on iOS.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoSettingsModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoSettings")

    Events("onChangeTheme")

    Function("setTheme") { (theme: String) -> Void in
      UserDefaults.standard.set(theme, forKey:"theme")
      sendEvent("onChangeTheme", [
        "theme": theme
      ])
    }

    Function("getTheme") { () -> String in
      UserDefaults.standard.string(forKey: "theme") ?? "system"
    }
  }
}

----------------------------------------

TITLE: Adding album Parameter to createAssetAsync
DESCRIPTION: New feature to specify an album when creating an asset.

LANGUAGE: JavaScript
CODE:
await MediaLibrary.createAssetAsync(uri, { album: 'MyAlbum' });

----------------------------------------

TITLE: Importing Crypto Module in JavaScript
DESCRIPTION: This snippet shows how to import the expo-crypto module in a JavaScript file. It's a basic import statement that brings in all exports from the module.

LANGUAGE: js
CODE:
import * as Crypto from 'expo-crypto';

----------------------------------------

TITLE: Publishing Rollback Command in Expo CLI
DESCRIPTION: Command options for rolling back updates to a specific release channel, allowing version control of deployed releases.

LANGUAGE: text
CODE:
Usage: expo publish:rollback

  Rollback an update to a release channel. Equivalent to running `expo publish:set` with publish-id set to the most recent release to the specified sdk version

  Options:
    -c, --release-channel <channel-name>  The name of the release channel to roll back (Required)
    -s, --sdk-version <version>           The SDK version to roll back (e.g. 37.0.0) (Required)
    -p, --platform <ios|android>          The platform to roll back (roll back both unless specified)

----------------------------------------

TITLE: Installing expo-sharing Package via NPM
DESCRIPTION: Command to install the expo-sharing package using npx expo install in a React Native project. This is the recommended installation method for both managed Expo and bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-sharing

----------------------------------------

TITLE: Package Import Statement - React Native
DESCRIPTION: Import statement for the MaskedView package that provides masked view functionality.

LANGUAGE: javascript
CODE:
@react-native-masked-view/masked-view

----------------------------------------

TITLE: Importing KeepAwake Module
DESCRIPTION: Basic import statement for the KeepAwake module from expo-keep-awake package.

LANGUAGE: js
CODE:
import KeepAwake from 'expo-keep-awake';

----------------------------------------

TITLE: Importing Expo Checkbox Module
DESCRIPTION: Shows how to import the Checkbox component from expo-checkbox package.

LANGUAGE: javascript
CODE:
import Checkbox from 'expo-checkbox';

----------------------------------------

TITLE: Using React Helmet Async without Context
DESCRIPTION: Illustrates how to use react-helmet-async without a HelmetProvider context by manually creating and passing a HelmetData instance.

LANGUAGE: javascript
CODE:
import React from 'react';
import { renderToString } from 'react-dom/server';
import { Helmet, HelmetProvider, HelmetData } from 'react-helmet-async';

const helmetData = new HelmetData({});

const app = (
    <App>
      <Helmet helmetData={helmetData}>
        <title>Hello World</title>
        <link rel="canonical" href="https://www.tacobell.com/" />
      </Helmet>
      <h1>Hello World</h1>
    </App>
);

const html = renderToString(app);

const { helmet } = helmetData.context;

----------------------------------------

TITLE: Pushing EAS Metadata to App Stores using CLI
DESCRIPTION: This command pushes the store config to the app stores, automating the process of updating app store information.

LANGUAGE: bash
CODE:
$ eas metadata:push

----------------------------------------

TITLE: Importing Icons and Components in JSX for Expo In-app Purchase Guide
DESCRIPTION: This code snippet imports various icons and custom components used in the Expo in-app purchase guide. It includes imports from Expo's styleguide icons and custom UI components.

LANGUAGE: jsx
CODE:
import { GithubIcon } from '@expo/styleguide-icons/custom/GithubIcon';
import { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';

import { BoxLink } from '~/ui/components/BoxLink';
import RedirectNotification from '~/ui/components/RedirectNotification';
import { CODE } from '~/ui/components/Text';

----------------------------------------

TITLE: Running Expo App in Production Mode Locally
DESCRIPTION: This command starts the Expo app in production mode locally, which can help identify errors that only occur in production builds.

LANGUAGE: bash
CODE:
$ npx expo start --no-dev --minify

----------------------------------------

TITLE: JSX BoxLink Component Usage
DESCRIPTION: Example of using the BoxLink component to create navigation links with icons and descriptions for different update preview scenarios.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Preview updates in development builds"
  description="Learn how to preview updates in development builds."
  href="/eas-update/expo-dev-client/"
  Icon={LayersTwo02Icon}
/>

----------------------------------------

TITLE: Running Android Development Build
DESCRIPTION: Command to build and run the Expo app on a connected Android device in development mode

LANGUAGE: bash
CODE:
$ npx expo run:android

----------------------------------------

TITLE: Importing Asset from expo-asset
DESCRIPTION: Demonstrates how to import the Asset class from the expo-asset package for use in an Expo application.

LANGUAGE: javascript
CODE:
import { Asset } from 'expo-asset';

----------------------------------------

TITLE: Testing Published Expo Module in New Project
DESCRIPTION: This code snippet shows how to use the published expo-settings module in a new React Native project, importing it and rendering the text message from the module's hello() function.

LANGUAGE: tsx
CODE:
import React from 'react';
import * as Settings from 'expo-settings';
import { Text, View } from 'react-native';

export default function TabOneScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>{Settings.hello()}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Importing Network Module in Expo
DESCRIPTION: This code snippet demonstrates how to import the Network module from expo-network. This module provides access to various network-related information on the device.

LANGUAGE: javascript
CODE:
import * as Network from 'expo-network';

----------------------------------------

TITLE: Adding Module Scripts Configuration
DESCRIPTION: Package.json scripts configuration for building, testing, and preparing expo modules.

LANGUAGE: javascript
CODE:
"scripts": {
    "build": "expo-module build",
    "clean": "expo-module clean",
    "test": "expo-module test",
    "prepare": "expo-module prepare",
    "prepublishOnly": "expo-module prepublishOnly",
    "expo-module": "expo-module"
}

----------------------------------------

TITLE: Importing Calendar Module
DESCRIPTION: Example showing how to import the expo-calendar module.

LANGUAGE: javascript
CODE:
import * as Calendar from 'expo-calendar';

----------------------------------------

TITLE: Inline Selector Usage
DESCRIPTION: Shows how to apply inline selectors for theme-specific styling.

LANGUAGE: tsx
CODE:
function App() {
  return (
    <View>
      <Heading
        selectors={{
          dark: { color: 'green' },
          light: { color: 'blue' },
        }}>
        Hi
      </Heading>
    </View>
  );
}

----------------------------------------

TITLE: Importing Swift Headers in Objective-C++
DESCRIPTION: Required imports for using EXUpdatesAppController in Objective-C++ code.

LANGUAGE: objc
CODE:
#import "ExpoModulesCore-Swift.h"
#import "EXUpdatesInterface-Swift.h"
#import "EXUpdates-Swift.h"

----------------------------------------

TITLE: Dependencies and Linking Configuration
DESCRIPTION: Sets up library dependencies, includes, and linking options including React Native version-specific configurations.

LANGUAGE: cmake
CODE:
target_link_libraries(
  ${PACKAGE_NAME}
  CommonSettings
  ${LOG_LIB}
  fbjni::fbjni
  ReactAndroid::jsi
  android
  ${JSEXECUTOR_LIB}
  ${NEW_ARCHITECTURE_DEPENDENCIES}
)

----------------------------------------

TITLE: Implementing WebView in Android
DESCRIPTION: Implements the WebView component for Android, including layout setup and URL loading.

LANGUAGE: kotlin
CODE:
package expo.modules.webview

import android.content.Context
import android.webkit.WebView
import android.webkit.WebViewClient
import expo.modules.kotlin.AppContext
import expo.modules.kotlin.views.ExpoView

class ExpoWebView(context: Context, appContext: AppContext) : ExpoView(context, appContext) {
  internal val webView = WebView(context).also {
    it.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)
    it.webViewClient = object : WebViewClient() {}
    addView(it)

    it.loadUrl("https://docs.expo.dev/modules/")
  }
}

----------------------------------------

TITLE: Subscribing to Network Updates
DESCRIPTION: Shows how to subscribe to network state changes and handle updates with a listener function.

LANGUAGE: javascript
CODE:
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();

----------------------------------------

TITLE: Configuring PostCSS in Expo
DESCRIPTION: Demonstrates how to set up PostCSS configuration in an Expo project.

LANGUAGE: json
CODE:
{
  "plugins": {
    "autoprefixer": {}
  }
}

----------------------------------------

TITLE: Configuring Deep Linking Scheme in app.json
DESCRIPTION: Add a deep linking 'scheme' in the app.json configuration file for Expo Router.

LANGUAGE: json
CODE:
{
  "scheme": "your-app-scheme"
}

----------------------------------------

TITLE: Importing Contacts Module in JavaScript
DESCRIPTION: Shows how to import the Contacts module from expo-contacts in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as Contacts from 'expo-contacts';

----------------------------------------

TITLE: Adding camera and storage permissions to AndroidManifest.xml
DESCRIPTION: Added camera and external storage permissions declarations to AndroidManifest.xml on Android for proper functionality.

LANGUAGE: XML
CODE:
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Initializing TinyBase Dev Tools Plugin
DESCRIPTION: Shows how to set up the TinyBase dev tools plugin in an Expo app. It requires passing the TinyBase store instance to the plugin hook.

LANGUAGE: jsx
CODE:
import { createStore } from 'tinybase';
import { useValue, Provider } from 'tinybase/lib/ui-react';
import { useTinyBaseDevTools } from '@dev-plugins/tinybase';

const store = createStore().setValue('counter', 0);

export default function App() {
  useTinyBaseDevTools(store);

  return <Provider store={store}>{/* ... */}</Provider>;
}

----------------------------------------

TITLE: Generating Native iOS Code for Debugging in Expo
DESCRIPTION: This command generates the native iOS code for an Expo project, creating an 'ios' directory at the root of the project for debugging in Xcode.

LANGUAGE: bash
CODE:
$ npx expo prebuild -p ios

----------------------------------------

TITLE: Custom Entry File Configuration
DESCRIPTION: JSON configuration in package.json for setting a custom main entry file path.

LANGUAGE: json
CODE:
{
  "main": "src/main.js"
}

----------------------------------------

TITLE: Creating a custom entry point for Expo app in monorepo
DESCRIPTION: Set up a custom entry point for an Expo app in a monorepo structure. This file registers the root component using Expo's registerRootComponent function.

LANGUAGE: javascript
CODE:
import { registerRootComponent } from 'expo';

import App from './App';

registerRootComponent(App);

----------------------------------------

TITLE: Handling ResizeMode in Config Plugin
DESCRIPTION: Correctly handle 'resizeMode' in config plugin.

LANGUAGE: JavaScript
CODE:
// Plugin implementation details not provided in changelog

----------------------------------------

TITLE: Installing expo-task-manager in React Native Projects
DESCRIPTION: Command to install the expo-task-manager package using npx and expo CLI in a React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-task-manager

----------------------------------------

TITLE: TypeScript Expo Configuration
DESCRIPTION: An example of using TypeScript for Expo configuration in app.config.ts, providing type safety and autocompletion.

LANGUAGE: typescript
CODE:
import { ExpoConfig, ConfigContext } from 'expo/config';

export default ({ config }: ConfigContext): ExpoConfig => ({
  ...config,
  slug: 'my-app',
  name: 'My App',
});

----------------------------------------

TITLE: Importing Safe Area Context Components in React Native
DESCRIPTION: This snippet shows how to import the main components and hooks from the react-native-safe-area-context library.

LANGUAGE: javascript
CODE:
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

----------------------------------------

TITLE: Running Tests and Linting Commands for Expo ESLint Config
DESCRIPTION: Commands for running the test suite and linting the configuration. The test command executes the full test suite to ensure stability, while the lint command applies the ESLint configuration to itself for consistency verification.

LANGUAGE: bash
CODE:
yarn test

LANGUAGE: bash
CODE:
yarn lint

----------------------------------------

TITLE: Adding Native Dependencies in Android
DESCRIPTION: Edit the android/build.gradle file to add the MPAndroidChart library as a dependency.

LANGUAGE: gradle
CODE:
dependencies {
  implementation project(':expo-modules-core')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
+ implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}

----------------------------------------

TITLE: Importing KeepAwake Module in JavaScript
DESCRIPTION: This snippet shows how to import the KeepAwake module from the expo-keep-awake package.

LANGUAGE: js
CODE:
import KeepAwake from 'expo-keep-awake';

----------------------------------------

TITLE: TV Config Plugin in app.json
DESCRIPTION: Configuration to add the TV plugin to the Expo project.

LANGUAGE: json
CODE:
{
  "plugins": ["@react-native-tvos/config-tv"]
}

----------------------------------------

TITLE: Configuring UIBackgroundModes in iOS Expo.plist
DESCRIPTION: XML configuration required to enable background fetch capability in iOS by adding the 'fetch' value to UIBackgroundModes array in the Expo.plist file.

LANGUAGE: xml
CODE:
<key>UIBackgroundModes</key>
<array>
  <string>fetch</string>
</array>

----------------------------------------

TITLE: Comparing Push vs Navigate for Singular Routes in Expo
DESCRIPTION: This snippet illustrates the difference between router.navigate and router.push when applying singular constraints. Navigate only applies the constraint if the current route changes, while push always applies the constraint.

LANGUAGE: tsx
CODE:
// Will NOT apply the singular constraint as the current route is the target route
router.navigate("/profile-2", {
  dangerouslySingular: (_, { profile } => profile === 'profile-2' ? profile : undefined )
})

// Will apply the singular constraint
router.push("/profile-2", {
  dangerouslySingular: (_, { profile } => profile === 'profile-2' ? profile : undefined )
})

----------------------------------------

TITLE: Package.json Base Path Configuration
DESCRIPTION: Configuration for hosting a website on a subpath using package.json homepage field.

LANGUAGE: json
CODE:
{
  "homepage": "/evanbacon/my-website"
}

----------------------------------------

TITLE: Running EAS Build for Both Platforms
DESCRIPTION: Command to start an EAS Build for both Android and iOS platforms simultaneously.

LANGUAGE: bash
CODE:
$ eas build --platform all

----------------------------------------

TITLE: Basic GET Request Handler in TypeScript
DESCRIPTION: Simple API route implementation that returns a JSON response with a hello world message.

LANGUAGE: typescript
CODE:
export function GET(request: Request) {
  return Response.json({ hello: 'world' });
}

----------------------------------------

TITLE: Importing Crypto Module in JavaScript
DESCRIPTION: This snippet shows how to import the Crypto module from the expo-crypto package in a JavaScript file. It's a basic import statement that allows access to all the crypto functions provided by the package.

LANGUAGE: js
CODE:
import * as Crypto from 'expo-crypto';

----------------------------------------

TITLE: Running Production Build
DESCRIPTION: Commands to build and serve the documentation in production mode

LANGUAGE: shell
CODE:
yarn run export
yarn run export-server

----------------------------------------

TITLE: Updating TypeScript Interface with Load Event
DESCRIPTION: Updates the TypeScript interface for the ExpoWebView component to include the onLoad event prop.

LANGUAGE: typescript
CODE:
import { ViewProps } from 'react-native';
import { requireNativeViewManager } from 'expo-modules-core';
import * as React from 'react';

export type OnLoadEvent = {
  url: string;
};

export type Props = {
  url?: string;
  onLoad?: (event: { nativeEvent: OnLoadEvent }) => void;
} & ViewProps;

const NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');

export default function ExpoWebView(props: Props) {
  return <NativeView {...props} />;
}

----------------------------------------

TITLE: Updating Module Import Syntax in TypeScript
DESCRIPTION: Shows the recommended change in import syntax for better dead code elimination, moving from destructured imports to namespace imports.

LANGUAGE: diff
CODE:
- import { FileSystem } from 'expo-file-system';

+ import * as FileSystem from 'expo-file-system';

----------------------------------------

TITLE: Importing Expo Localization Functions
DESCRIPTION: Example showing how to import the main localization functions getLocales and getCalendars from the expo-localization package.

LANGUAGE: jsx
CODE:
import { getLocales, getCalendars } from 'expo-localization';

----------------------------------------

TITLE: Configuring Custom Entry File in package.json
DESCRIPTION: Shows how to set a custom main entry file in package.json for non-Expo Router projects.

LANGUAGE: json
CODE:
{
  "main": "src/main.jsx"
}

----------------------------------------

TITLE: Importing Barometer Module from Expo Sensors
DESCRIPTION: This code snippet shows how to import the Barometer module from the expo-sensors package. This import is necessary to use the Barometer functionality in an Expo project.

LANGUAGE: js
CODE:
import { Barometer } from 'expo-sensors';

----------------------------------------

TITLE: Installing expo-crypto in React Native projects
DESCRIPTION: Command to install the expo-crypto package in a bare React Native project using npx and expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-crypto

----------------------------------------

TITLE: Adding URL Prop to iOS WebView Module
DESCRIPTION: Adds a URL prop to the iOS WebView module, allowing dynamic URL setting.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoWebViewModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoWebView")

    View(ExpoWebView.self) {
      Prop("url") { (view, url: URL) in
        if view.webView.url != url {
          let urlRequest = URLRequest(url: url)
          view.webView.load(urlRequest)
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Screen Orientation in Expo Config
DESCRIPTION: JSON configuration for expo-screen-orientation plugin in app.json, showing how to set initial orientation settings for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "requireFullScreen": true
    },
    "plugins": [
      [
        "expo-screen-orientation",
        {
          "initialOrientation": "DEFAULT"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Installing Expo SDK Packages using npx
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages using the npx expo install command.

LANGUAGE: bash
CODE:
$ npx expo install expo-camera expo-contacts expo-sensors

----------------------------------------

TITLE: Logging into Expo Account
DESCRIPTION: Command to log in to your Expo account using EAS CLI.

LANGUAGE: bash
CODE:
$ eas login

----------------------------------------

TITLE: Installing expo-image-manipulator in bare React Native projects
DESCRIPTION: Command to install the expo-image-manipulator package using npx expo install. This is used for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-image-manipulator

----------------------------------------

TITLE: Importing LightSensor from expo-sensors
DESCRIPTION: Basic import statement for the LightSensor API from the expo-sensors package.

LANGUAGE: js
CODE:
import { LightSensor } from 'expo-sensors';

----------------------------------------

TITLE: Importing MailComposer in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the MailComposer module from the expo-mail-composer package. This import statement is necessary to use the MailComposer functionality in your project.

LANGUAGE: javascript
CODE:
import * as MailComposer from 'expo-mail-composer';

----------------------------------------

TITLE: Installing expo-gl in bare React Native projects
DESCRIPTION: Command to install the expo-gl package using npx and expo CLI in a bare React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-gl

----------------------------------------

TITLE: Android Keyboard Configuration
DESCRIPTION: Configuration for handling keyboard behavior in Android using softwareKeyboardLayoutMode setting.

LANGUAGE: json
CODE:
"expo" {
  "android": {
    "softwareKeyboardLayoutMode": "pan"
  }
}

----------------------------------------

TITLE: Configuring Android build.gradle for monorepo structure
DESCRIPTION: Modify the Android build.gradle file to dynamically resolve the react-native package location in a monorepo setup.

LANGUAGE: groovy
CODE:
apply from: new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../react.gradle")

----------------------------------------

TITLE: Configuring BuildProperties in app.config.js for Expo
DESCRIPTION: This snippet shows how to configure the expo-build-properties plugin in the app.config.js file of an Expo project. It sets the same Android and iOS build properties as the JSON example.

LANGUAGE: javascript
CODE:
export default {
  expo: {
    plugins: [
      [
        'expo-build-properties',
        {
          android: {
            compileSdkVersion: 35,
            targetSdkVersion: 35,
            buildToolsVersion: '35.0.0',
          },
          ios: {
            deploymentTarget: '15.1',
          },
        },
      ],
    ],
  },
};

----------------------------------------

TITLE: Expo App Preview Publication Output
DESCRIPTION: This snippet shows the terminal output after successfully publishing a preview update, including the EAS Dashboard link for sharing with reviewers.

LANGUAGE: bash
CODE:
✔ Published!

...
EAS Dashboard      https://expo.dev/accounts/your-account/projects/your-project/updates/708b05d8-9bcf-4212-a052-ce40583b04fd

----------------------------------------

TITLE: Renaming Devices in EAS and Apple Developer Portal
DESCRIPTION: This command enables you to assign friendly names to devices in both your Expo account and the Apple Developer Portal. It helps in better organizing and identifying devices for internal distribution builds.

LANGUAGE: bash
CODE:
$ eas device:rename

----------------------------------------

TITLE: Publishing Set Command in Expo CLI
DESCRIPTION: Command syntax for setting a published release to be served from a specific channel, enabling release management across different environments.

LANGUAGE: text
CODE:
 Usage: expo publish:set --release-channel <channel-name> --publish-id <publish-id>

  Set a published release to be served from a specified channel.

  Options:
    -c, --release-channel <channel-name>  The channel to set the published release. (Required)
    -p, --publish-id <publish-id>         The id of the published release to serve from the channel. (Required)

----------------------------------------

TITLE: Configuring Android settings.gradle for Expo Modules
DESCRIPTION: Android settings.gradle configuration to include Unimodules projects and native module settings in Expo projects.

LANGUAGE: groovy
CODE:
apply from: new File(["node", "--print", "require.resolve('expo-modules-core/package.json')"].execute(null, rootDir).text.trim(), "../gradle.groovy");
includeUnimodulesProjects()

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesSettingsGradle(settings)

----------------------------------------

TITLE: Configuring TV Dependencies in package.json
DESCRIPTION: JSON configuration to modify react-native dependency for TV support and exclude it from Expo install validation.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "react-native": "npm:react-native-tvos"
  },
  "expo": {
    "install": {
      "exclude": [
        "react-native"
      ]
    }
  }
}

----------------------------------------

TITLE: Expo Module Exclusion Configuration in package.json
DESCRIPTION: JSON configuration showing how to exclude specific Expo modules from autolinking using the expo.autolinking.exclude property.

LANGUAGE: json
CODE:
{
  "name": "...",
  "dependencies": {},
  "expo": {
    "autolinking": {
      "exclude": ["expo-keep-awake"]
    }
  }
}

----------------------------------------

TITLE: Importing Expo Speech Module in JavaScript
DESCRIPTION: This code snippet shows how to import the expo-speech module in a JavaScript file. This import statement is necessary to access the text-to-speech functionality provided by the library.

LANGUAGE: js
CODE:
import * as Speech from 'expo-speech';

----------------------------------------

TITLE: Configuring iOS Bundle Identifier
DESCRIPTION: JSON configuration in app.json to specify the iOS bundle identifier for App Store submission.

LANGUAGE: json
CODE:
{
  "ios": {
    "bundleIdentifier": "com.yourcompany.yourapp"
  }
}

----------------------------------------

TITLE: Configuring Fingerprint Ignore Rules
DESCRIPTION: Example of a .fingerprintignore file used to exclude specific files and folders from hash calculation.

LANGUAGE: ignore
CODE:
# Ignore the entire /app/ios folder
/app/ios/**/*

# But still keep /app/ios/Podfile and /app/ios/Podfile.lock
!/app/ios/Podfile
!/app/ios/Podfile.lock

----------------------------------------

TITLE: Presenting iOS Contacts Access Picker
DESCRIPTION: New function added to present the iOS 18.0+ picker for limited contacts access.

LANGUAGE: JavaScript
CODE:
presentAccessPickerAsync()

----------------------------------------

TITLE: Importing Expo Clipboard Module
DESCRIPTION: Shows how to import the expo-clipboard module for use in a project. This is the basic import statement needed to access clipboard functionality.

LANGUAGE: js
CODE:
import * as Clipboard from 'expo-clipboard';

----------------------------------------

TITLE: BlurView Import Statement - JavaScript
DESCRIPTION: Shows how to import the BlurView component from the expo-blur package.

LANGUAGE: js
CODE:
import { BlurView } from 'expo-blur';

----------------------------------------

TITLE: Removing Sitemap in Expo Router (SDK 51 and below)
DESCRIPTION: This TypeScript React component demonstrates how to remove the sitemap in Expo Router for SDK 51 and below by creating an empty _sitemap file inside the app directory.

LANGUAGE: tsx
CODE:
export default function Sitemap() {
  return null;
}

----------------------------------------

TITLE: Platform-Specific Swift Implementation
DESCRIPTION: Example of using Swift compiler directives to implement platform-specific code branches for iOS, macOS, and tvOS.

LANGUAGE: swift
CODE:
#if os(iOS)
  // iOS implementation
#elseif os(macOS)
  // macOS implementation
#elseif os(tvOS)
  // tvOS implementation
#endif

----------------------------------------

TITLE: Importing ImageManipulator Module
DESCRIPTION: Example of importing the ImageManipulator module from expo-image-manipulator package.

LANGUAGE: js
CODE:
import * as ImageManipulator from 'expo-image-manipulator';

----------------------------------------

TITLE: Installing expo-print Package via NPM
DESCRIPTION: Command to install the expo-print package using npx expo install in a React Native project. This is required for both managed Expo and bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-print

----------------------------------------

TITLE: Plugin TypeScript Configuration
DESCRIPTION: TSConfig setup for plugin directory extending expo-module-scripts base configuration.

LANGUAGE: json
CODE:
{
  "extends": "expo-module-scripts/tsconfig.plugin",
  "compilerOptions": {
    "outDir": "build",
    "rootDir": "src"
  },
  "include": ["./src"],
  "exclude": ["**/__mocks__/*", "**/__tests__/*"]
}

----------------------------------------

TITLE: Creating a Slot Layout in Expo Router
DESCRIPTION: This example demonstrates how to use the Slot component to create a layout without a navigator. It wraps the Slot with custom Header and Footer components.

LANGUAGE: tsx
CODE:
import { Slot } from 'expo-router';

export default function Layout() {
  return (
    <>
      <Header />
      <Slot />
      <Footer />
    </>
  );
}

----------------------------------------

TITLE: Configuring CircleCI Pipeline
DESCRIPTION: CircleCI configuration for running EAS builds with Node.js LTS image and workflow filters.

LANGUAGE: yaml
CODE:
version: 2.1

executors:
  default:
    docker:
      - image: cimg/node:lts
    working_directory: ~/my-app

jobs:
  eas_build:
    executor: default
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Trigger build
          command: npx eas-cli build --platform all --non-interactive --no-wait

workflows:
  build_app:
    jobs:
      - eas_build:
          filters:
            branches:
              only: master

----------------------------------------

TITLE: Updating TypeScript Interface with URL Prop
DESCRIPTION: Updates the TypeScript interface for the ExpoWebView component to include the URL prop.

LANGUAGE: typescript
CODE:
import { ViewProps } from 'react-native';
import { requireNativeViewManager } from 'expo-modules-core';
import * as React from 'react';

export type Props = {
  url?: string;
} & ViewProps;

const NativeView: React.ComponentType<Props> = requireNativeViewManager('ExpoWebView');

export default function ExpoWebView(props: Props) {
  return <NativeView {...props} />;
}

----------------------------------------

TITLE: Configuring Sentry Plugin in Expo App Config
DESCRIPTION: Add the Sentry plugin to the project's app.json configuration file. This sets up the Sentry organization, project, and URL for the Expo project.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "@sentry/react-native/expo",
        {
          "organization": "sentry org slug, or use the `SENTRY_ORG` environment variable",
          "project": "sentry project name, or use the `SENTRY_PROJECT` environment variable",
          "url": "https://sentry.io/"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Creating a Custom Base Modifier for iOS AppDelegate Header
DESCRIPTION: Example of creating a custom base modifier to manage the iOS AppDelegate.h file in the prebuild process.

LANGUAGE: ts
CODE:
import { ConfigPlugin, IOSConfig, Mod, withMod, BaseMods } from 'expo/config-plugins';
import fs from 'fs';

export function withAppDelegateHeaderBaseMod(config) {
  return BaseMods.withGeneratedBaseMods<'appDelegateHeader'>(config, {
    platform: 'ios',
    providers: {
      appDelegateHeader: BaseMods.provider<IOSConfig.Paths.AppDelegateProjectFile>({
        getFilePath({ modRequest: { projectRoot } }) {
          const filePath = IOSConfig.Paths.getAppDelegateFilePath(projectRoot);
          if (filePath.endsWith('.m')) {
            return filePath.substr(0, filePath.lastIndexOf('.')) + '.h';
          }
          throw new Error(`Could not locate a valid AppDelegate.h at root: "${projectRoot}"`);
        },
        async read(filePath) {
          return IOSConfig.Paths.getFileInfo(filePath);
        },
        async write(filePath: string, { modResults: { contents } }) {
          await fs.promises.writeFile(filePath, contents);
        },
      }),
    },
  });
}

export const withAppDelegateHeader: ConfigPlugin<Mod<IOSConfig.Paths.AppDelegateProjectFile>> = (
  config,
  action
) => {
  return withMod(config, {
    platform: 'ios',
    mod: 'appDelegateHeader',
    action,
  });
};

export const withSimpleAppDelegateHeaderMod = config => {
  return withAppDelegateHeader(config, config => {
    console.log('modify header:', config.modResults);
    return config;
  });
};

----------------------------------------

TITLE: Installing expo-calendar package in React Native
DESCRIPTION: Command to install the expo-calendar package using npx expo install.

LANGUAGE: bash
CODE:
npx expo install expo-calendar

----------------------------------------

TITLE: Generating QR Code for Update Group
DESCRIPTION: This snippet shows how to create a QR code for an update group using the project ID and group ID.

LANGUAGE: text
CODE:
https://qr.expo.dev/eas-update?projectId=your-project-id&groupId=your-update-id

----------------------------------------

TITLE: Importing Expo Manifests Library
DESCRIPTION: Example showing how to import the expo-manifests package in a JavaScript/TypeScript application.

LANGUAGE: javascript
CODE:
import * as Manifests from 'expo-manifests';

----------------------------------------

TITLE: Installing expo-print Package via NPM
DESCRIPTION: Command to install the expo-print package using npx expo install in a React Native project. This is required for both managed Expo and bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-print

----------------------------------------

TITLE: Updating Root Layout for Grouped Routes in Expo Router
DESCRIPTION: This snippet demonstrates how to update the root layout file to include a grouped route. It uses the Stack component to define the (home) group as a screen within the root layout.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="(home)" />
    </Stack>
  );
}

----------------------------------------

TITLE: Starting a Per-Update Rollout in Expo
DESCRIPTION: This command initiates a per-update rollout in Expo, making the update available to 10% of end users.

LANGUAGE: bash
CODE:
$ eas update --rollout-percentage=10

----------------------------------------

TITLE: Rendering PlatformsSection Component in JSX
DESCRIPTION: This code snippet shows how to use the PlatformsSection component to display supported platforms for the SegmentedControl. It includes Android, iOS, web, emulator, and simulator.

LANGUAGE: jsx
CODE:
<PlatformsSection android emulator ios web simulator />

----------------------------------------

TITLE: App Config for Localization
DESCRIPTION: Configuration for enabling localized strings and RTL support in app.json.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "CFBundleAllowMixedLocalizations": true
      }
    },
    "locales": {
      "ja": "./languages/japanese.json"
    }
  }
}

----------------------------------------

TITLE: Adding Custom Scheme in Expo App Configuration
DESCRIPTION: This snippet shows how to add a custom scheme to your Expo app's configuration file (app.json). The scheme property allows you to define a custom URL scheme for deep linking.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "myapp"
  }
}

----------------------------------------

TITLE: Configuring Apple App Site Association
DESCRIPTION: JSON configuration for the apple-app-site-association file that enables universal links and handoff functionality. Includes applinks, activitycontinuation, and webcredentials configuration.

LANGUAGE: json
CODE:
{
  "applinks": {
    "details": [
      {
        "appIDs": ["<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>"],
        "components": [
          {
            "/": "*",
            "comment": "Matches all routes"
          }
        ]
      }
    ]
  },
  "activitycontinuation": {
    "apps": ["<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>"]
  },
  "webcredentials": {
    "apps": ["<APPLE_TEAM_ID>.<IOS_BUNDLE_ID>"]
  }
}

----------------------------------------

TITLE: Example Android Build Error Log
DESCRIPTION: Sample stderr output showing a deprecation warning in Android build logs.

LANGUAGE: shell
CODE:
[stderr] Note: /build/workingdir/build/app/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java uses or overrides a deprecated API.
[stderr] Note: Recompile with -Xlint:deprecation for details.

----------------------------------------

TITLE: Basic Drawer Layout Implementation
DESCRIPTION: Basic implementation of drawer navigation using GestureHandlerRootView and Drawer components in the app layout file.

LANGUAGE: typescript
CODE:
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { Drawer } from 'expo-router/drawer';

export default function Layout() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <Drawer />
    </GestureHandlerRootView>
  );
}

----------------------------------------

TITLE: Execute Shell Commands
DESCRIPTION: Example of executing single and multiline shell commands in build steps.

LANGUAGE: yaml
CODE:
build:
  name: Run inline shell commands
  steps:
    - run: echo "Hello world"
    - run: |
        echo "Multiline"
        echo "bash commands"

----------------------------------------

TITLE: Custom Job Steps Configuration
DESCRIPTION: Shows how to configure steps in a custom job including commands and working directory

LANGUAGE: yaml
CODE:
steps:
  - name: My first step
    run: echo "Hello World"

----------------------------------------

TITLE: Configuring Anti-Bricking Measures in Expo Config
DESCRIPTION: JSON configuration example showing how to disable anti-bricking measures in the Expo app configuration. This setting should only be enabled in preview builds as it affects the ability to recover from problematic updates.

LANGUAGE: json
CODE:
{
  "expo": {
    "updates": {
      // We recommend only enabling this in preview builds.
      // You can use app.config.js to configure it dynamically.
      "disableAntiBrickingMeasures": true
      // etc..
    }
  }
}

----------------------------------------

TITLE: Creating Tab Content in Expo Router
DESCRIPTION: This snippet demonstrates the basic structure for tab content files (index.tsx and settings.tsx). It creates a centered view with text indicating the current tab.

LANGUAGE: tsx
CODE:
import { View, Text, StyleSheet } from 'react-native';

export default function Tab() {
  return (
    <View style={styles.container}>
      <Text>Tab [Home|Settings]</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Logging Constants Example in JavaScript
DESCRIPTION: Example code showing how to verify successful installation of expo-constants by logging system fonts.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';
console.log(Constants.systemFonts);

----------------------------------------

TITLE: Installing expo-clipboard in bare React Native projects
DESCRIPTION: Command to install the expo-clipboard package using npx expo install. This is used for adding clipboard functionality to bare React Native projects.

LANGUAGE: shell
CODE:
npx expo install expo-clipboard

----------------------------------------

TITLE: Configuring Expo Sensors Plugin in app.json
DESCRIPTION: Example configuration for expo-sensors plugin in app.json, showing how to set motion permission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing IntentLauncher in JavaScript
DESCRIPTION: This snippet shows how to import the entire IntentLauncher module in JavaScript. It's typically used at the top of a file to access all exported functions and constants from the package.

LANGUAGE: javascript
CODE:
import * as IntentLauncher from 'expo-intent-launcher';

----------------------------------------

TITLE: Installing expo-checkbox package using npx
DESCRIPTION: Command to install the expo-checkbox package using npx. This will add the package to your Expo project, enabling the use of checkbox components across Android, iOS, and web platforms.

LANGUAGE: shell
CODE:
npx expo install expo-checkbox

----------------------------------------

TITLE: Creating Icon Button with FontAwesome in React Native
DESCRIPTION: Shows how to create an icon button using the FontAwesome icon set from @expo/vector-icons in a React Native component.

LANGUAGE: jsx
CODE:
import React from 'react';
import { View, StyleSheet } from 'react-native';
import FontAwesome from '@expo/vector-icons/FontAwesome';

export default function App() {
  const loginWithFacebook = () => {
    console.log('Button pressed');
  };

  return (
    <View style={styles.container}>
      <FontAwesome.Button name="facebook" backgroundColor="#3b5998" onPress={loginWithFacebook}>
        Login with Facebook
      </FontAwesome.Button>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Installing expo-updates Library for Expo Project
DESCRIPTION: Command to install the expo-updates library, which is required for initializing the project and sending updates.

LANGUAGE: bash
CODE:
$ npx expo install expo-updates

----------------------------------------

TITLE: Importing NetInfo in React Native
DESCRIPTION: Shows how to import the NetInfo library in a React Native application.

LANGUAGE: javascript
CODE:
import NetInfo from '@react-native-community/netinfo';

----------------------------------------

TITLE: PWA Manifest Configuration
DESCRIPTION: JSON configuration for Progressive Web App manifest defining app metadata and icons.

LANGUAGE: json
CODE:
{
  "short_name": "Expo App",
  "name": "Expo Router Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

----------------------------------------

TITLE: Installing expo-font in bare React Native projects
DESCRIPTION: Command to install the expo-font package using npx and expo CLI. This is intended for bare React Native projects that have already configured the expo package.

LANGUAGE: bash
CODE:
npx expo install expo-font

----------------------------------------

TITLE: Using Collapsible Component in Markdown
DESCRIPTION: This snippet shows how to use the Collapsible component in markdown to create an expandable section explaining how automatic installation and launching of updates work in Expo Orbit.

LANGUAGE: markdown
CODE:
<Collapsible summary="How does automatic installation and launching of updates work?">

When you launch an update, Orbit will look for the latest development build that matches the runtime version and target platform of the update. If a compatible build is found, the update will install automatically on the target device and launch with a deep link that points to the update.

If you don't have any development builds available, either because they have all expired, you haven't created one, you don't use EAS Build, or you are [building your app locally](/guides/local-app-development/), then Orbit will prompt you on how to proceed. Click **Launch with deep link** in the prompt to open the update if you already have a compatible development build installed on your target device.

</Collapsible>

----------------------------------------

TITLE: Importing Expo Application Module
DESCRIPTION: Example showing how to import the expo-application module to access native application information.

LANGUAGE: javascript
CODE:
import * as Application from 'expo-application';

----------------------------------------

TITLE: Installing expo-local-authentication Package
DESCRIPTION: Command to install the expo-local-authentication package using npm in a bare React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-local-authentication

----------------------------------------

TITLE: WebBrowser Import Statement
DESCRIPTION: Simple import statement showing how to import the WebBrowser module from expo-web-browser package.

LANGUAGE: js
CODE:
import * as WebBrowser from 'expo-web-browser';

----------------------------------------

TITLE: Job Dependencies Configuration
DESCRIPTION: Shows how to make jobs dependent on other jobs using needs and after

LANGUAGE: yaml
CODE:
jobs:
  my_job:
    if: ${{ github.ref_name == 'main' }}

----------------------------------------

TITLE: Configuring Digital Asset Links in assetlinks.json
DESCRIPTION: JSON configuration for the assetlinks.json file that establishes the association between the website and Android app through digital asset links.

LANGUAGE: json
CODE:
[
  {
    "relation": ["delegate_permission/common.handle_all_urls"],
    "target": {
      "namespace": "android_app",
      "package_name": "com.example",
      "sha256_cert_fingerprints": [
        "14:6D:E9:83:51:7F:66:01:84:93:4F:2F:5E:E0:8F:3A:D6:F4:CA:41:1A:CF:45:BF:8D:10:76:76:CD"
      ]
    }
  }
]

----------------------------------------

TITLE: Basic SplashScreen Implementation in React Native
DESCRIPTION: Example showing how to implement a basic splash screen using expo-splash-screen with preventAutoHideAsync in the global scope

LANGUAGE: tsx
CODE:
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';

// Prevent native splash screen from autohiding before App component declaration
SplashScreen.preventAutoHideAsync()
  .then((result) => console.log(`SplashScreen.preventAutoHideAsync() succeeded: ${result}`))
  .catch(console.warn);

export default class App extends React.Component {
  componentDidMount() {
    // Hides native splash screen after 2s
    setTimeout(async () => {
      await SplashScreen.hideAsync();
    }, 2000);
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.text}>SplashScreen Demo! 👋</Text>
      </View>
    );
  }
}

----------------------------------------

TITLE: Setting Global npm Registry for Android Builds
DESCRIPTION: This snippet demonstrates the global npm configuration in the ~/.npmrc file on Android build servers. It sets the npm registry to a specific IP address and port.

LANGUAGE: ini
CODE:
registry=http://10.4.0.19:4873

----------------------------------------

TITLE: Implementing Package for Activity Lifecycle Listeners in Java
DESCRIPTION: Create a custom Package class that implements createReactActivityLifecycleListeners to hook into Activity lifecycle events.

LANGUAGE: java
CODE:
// android/src/main/java/expo/modules/mylib/MyLibPackage.java
package expo.modules.mylib;

import android.content.Context;
import expo.modules.core.interfaces.Package;
import expo.modules.core.interfaces.ReactActivityLifecycleListener;

import java.util.Collections;
import java.util.List;

public class MyLibPackage implements Package {
  @Override
  public List<? extends ReactActivityLifecycleListener> createReactActivityLifecycleListeners(Context activityContext) {
    return Collections.singletonList(new MyLibReactActivityLifecycleListener());
  }
}

----------------------------------------

TITLE: Creating MainApplication.kt for Android Lifecycle Listeners
DESCRIPTION: Creates a new MainApplication.kt file to enable lifecycle listeners for Expo modules in Android.

LANGUAGE: diff
CODE:
diff --git a/android/app/src/main/java/com/<my-app-package>/MainApplication.kt b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt
new file mode 100644
index 0000000..2c8525a
--- /dev/null
+++ b/android/app/src/main/java/com/<my-app-package>/MainApplication.kt
@@ -0,0 +1,19 @@
+package <my.app.package>
+
+import android.app.Application
+import android.content.res.Configuration
+import com.facebook.soloader.SoLoader
+import expo.modules.ApplicationLifecycleDispatcher
+
+class MainApplication() : Application() {
+    override fun onCreate() {
+        super.onCreate()
+        ApplicationLifecycleDispatcher.onApplicationCreate(this)
+    }
+
+    override fun onConfigurationChanged(newConfig: Configuration) {
+        super.onConfigurationChanged(newConfig)
+        ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)
+    }
+}

----------------------------------------

TITLE: Implementing Platform-Specific Pre-Install Hook with Node.js Script
DESCRIPTION: This example demonstrates how to create a platform-specific pre-install hook using a Node.js script. It checks the EAS_BUILD_PLATFORM environment variable to execute different commands for Android and iOS builds.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "scripts": {
    "eas-build-pre-install": "node pre-install.js",
    "start": "expo start"
    // ...
  },
  "dependencies": {
    // ...
  }
}

LANGUAGE: javascript
CODE:
// Create a file called "pre-install.js" at the root of the project

if (process.env.EAS_BUILD_PLATFORM === 'android') {
  console.log('Run commands for Android builds here');
} else if (process.env.EAS_BUILD_PLATFORM === 'ios') {
  console.log('Run commands for iOS builds here');
}

----------------------------------------

TITLE: Basic Image Asset Optimization
DESCRIPTION: Command to compress image assets using the expo-optimize tool with default settings

LANGUAGE: bash
CODE:
$ npx expo-optimize

----------------------------------------

TITLE: Configuring package.json for Jest-Expo
DESCRIPTION: Add the necessary scripts and Jest configuration to package.json for using jest-expo.

LANGUAGE: json
CODE:
"scripts": {
  ...
  "test": "jest"
},
"jest": {
  "preset": "jest-expo"
}

----------------------------------------

TITLE: Importing DevClient from expo-dev-client
DESCRIPTION: This code snippet demonstrates how to import the DevClient object from the expo-dev-client package for use in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as DevClient from 'expo-dev-client';

----------------------------------------

TITLE: Configuring iOS Payment Sheet Localization
DESCRIPTION: Configuration for enabling PaymentSheet localization on iOS through app.json settings.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "infoPlist": {
        "CFBundleAllowMixedLocalizations": true,
        "CFBundleLocalizations": ["fr"]
      }
    }
  }
}

----------------------------------------

TITLE: Importing Expo Localization Functions
DESCRIPTION: Example showing how to import the main localization functions getLocales and getCalendars from the expo-localization package.

LANGUAGE: jsx
CODE:
import { getLocales, getCalendars } from 'expo-localization';

----------------------------------------

TITLE: Configuring iOS Deep Linking in AppDelegate
DESCRIPTION: Implementation of URL handling methods in iOS AppDelegate to support deep linking functionality

LANGUAGE: objc
CODE:
#import <React/RCTLinkingManager.h>

// iOS 9.x or newer
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
            options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
    return [RCTLinkingManager application:application openURL:url options:options];
}

// iOS 8.x or older
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation
{
    return [RCTLinkingManager application:application openURL:url
                    sourceApplication:sourceApplication annotation:annotation];
}

----------------------------------------

TITLE: Installing LogRocket and Expo Build Properties
DESCRIPTION: Command to install the LogRocket SDK and expo-build-properties package using npx and expo.

LANGUAGE: bash
CODE:
$ npx expo install @logrocket/react-native expo-build-properties

----------------------------------------

TITLE: Creating a New Expo Project with Bare Minimum Template
DESCRIPTION: Demonstrates how to create a new Expo project using the create-expo-app command with the bare-minimum template.

LANGUAGE: bash
CODE:
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum

----------------------------------------

TITLE: Creating ESLint Configuration for Expo
DESCRIPTION: This snippet shows how to create a basic ESLint configuration file for an Expo project. It extends the 'expo' configuration to use Expo-specific linting rules.

LANGUAGE: javascript
CODE:
module.exports = {
  extends: 'expo',
};

----------------------------------------

TITLE: Creating ESLint Configuration for Expo
DESCRIPTION: This snippet shows how to create a basic ESLint configuration file for an Expo project. It extends the 'expo' configuration to use Expo-specific linting rules.

LANGUAGE: javascript
CODE:
module.exports = {
  extends: 'expo',
};

----------------------------------------

TITLE: Server-Side Blurhash Generation with Express
DESCRIPTION: Backend implementation for generating blurhash values from uploaded images using Express.js, multer, and sharp

LANGUAGE: js
CODE:
const multer = require('multer');
const sharp = require('sharp');
const { encode } = require('blurhash');

const upload = multer();

LANGUAGE: js
CODE:
app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  if (file === null) {
    res.status(400).json({ message: 'Image is missing' });
    return;
  }

  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
    resolveWithObject: true,
  });

  const blurhash = encode(
    new Uint8ClampedArray(data),
    info.width,
    info.height,
    componentX,
    componentY
  );
  res.json({ blurhash });
});

----------------------------------------

TITLE: Configuring EAS JSON for Custom Build
DESCRIPTION: This snippet demonstrates how to add a custom build config to the eas.json file. It creates a new build profile called 'test' that uses the 'test.yml' config file.

LANGUAGE: json
CODE:
{
  "build": {
    "test": {
      "config": "test.yml"
    }
  }
}

----------------------------------------

TITLE: Setting Up SafeAreaProvider in React Native App Root
DESCRIPTION: This example demonstrates how to set up the SafeAreaProvider component at the root of a React Native application.

LANGUAGE: jsx
CODE:
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}

----------------------------------------

TITLE: Rendering Box Links with JSX Components
DESCRIPTION: JSX component imports and usage for displaying billing-related navigation links with icons and descriptions

LANGUAGE: jsx
CODE:
import { CreditCard02Icon } from '@expo/styleguide-icons/outline/CreditCard02Icon';

import { BoxLink } from '~/ui/components/BoxLink';
import { ContentSpotlight } from '~/ui/components/ContentSpotlight';

<BoxLink
  title="Pricing"
  description="Visit our pricing page to see the list of current prices for each plan."
  href="https://expo.dev/pricing"
  Icon={CreditCard02Icon}
/>

----------------------------------------

TITLE: Using Local Font with Platform-Specific Names
DESCRIPTION: Example of using Platform.select to specify different font family names for Android and iOS platforms

LANGUAGE: typescript
CODE:
import { Platform } from 'react-native';

<Text
  style={{
    fontFamily: Platform.select({
      android: 'Inter_900Black',
      ios: 'Inter-Black',
    }),
  }}>
  Inter Black
</Text>

----------------------------------------

TITLE: Installing EAS CLI
DESCRIPTION: Command to install the EAS CLI globally using npm

LANGUAGE: bash
CODE:
$ npm install -g eas-cli

----------------------------------------

TITLE: Using @expo/package-manager in TypeScript
DESCRIPTION: Example of how to use the @expo/package-manager library in a TypeScript project. It demonstrates importing the library, creating a manager instance for a project, and adding both development and regular dependencies asynchronously.

LANGUAGE: typescript
CODE:
import * as PackageManager from '@expo/package-manager';

const manager = PackageManager.createForProject(projectRoot);

await Promise.all([
  manager.addDevAsync(['@expo/webpack-config']),
  manager.addAsync(['expo', 'expo-camera']),
]);

----------------------------------------

TITLE: Implementing Migration Class in iOS
DESCRIPTION: Creating a new class that implements the EXUpdatesDatabaseMigration protocol for iOS migration.

LANGUAGE: objective-c
CODE:
@interface EXUpdatesDatabaseMigrationX_Y : NSObject <EXUpdatesDatabaseMigration>
@end

@implementation EXUpdatesDatabaseMigrationX_Y

- (BOOL)runMigrationOnDatabase:(sqlite3 *)database error:(NSError **)error
{
    // Your migration SQL statements here
    return YES;
}

- (NSString *)filename
{
    return @"expo-updates-X.db";
}

@end

----------------------------------------

TITLE: Rendering Remote Image in React Native
DESCRIPTION: This snippet shows how to render a remote image in React Native using the Image component from expo-image. It specifies the image URL and explicitly sets the width and height.

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
/* @hide ... */ /* @end */

function App() {
  return (
    <Image source={{ uri: 'https://example.com/logo.png' }} style={{ width: 50, height: 50 }} />
  );
}

----------------------------------------

TITLE: Using KeepAwake Functions in React Native
DESCRIPTION: Example showing how to use activateKeepAwake and deactivateKeepAwake functions to imperatively control screen sleep behavior with button triggers.

LANGUAGE: jsx
CODE:
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Button onPress={this._activate} title="Activate" />
        <Button onPress={this._deactivate} title="Deactivate" />
      </View>
    );
  }

  _activate = () => {
    activateKeepAwake();
    alert('Activated!');
  };

  _deactivate = () => {
    deactivateKeepAwake();
    alert('Deactivated!');
  };
}

----------------------------------------

TITLE: Android Permissions Configuration
DESCRIPTION: Required Android permissions for biometric authentication that are automatically added to the Android manifest.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.USE_BIOMETRIC" />
<uses-permission android:name="android.permission.USE_FINGERPRINT" />

----------------------------------------

TITLE: Importing Accelerometer from Expo Sensors
DESCRIPTION: Basic import statement for the Accelerometer module from expo-sensors package.

LANGUAGE: js
CODE:
import { Accelerometer } from 'expo-sensors';

----------------------------------------

TITLE: Pull Request Trigger Configuration
DESCRIPTION: Specifies which pull request events and branches should trigger the workflow

LANGUAGE: yaml
CODE:
pull_request:
  branches:
    - main
    - feature/**
    - !feature/test-**

  types:
    - opened

----------------------------------------

TITLE: Using a local package in an Expo app within a monorepo
DESCRIPTION: Demonstrate how to use a local package from the monorepo in an Expo app. This example shows importing and using a greeting from a custom package.

LANGUAGE: jsx
CODE:
import { greeting } from 'cool-package';
import { StatusBar } from 'expo-status-bar';
import React from 'react';
import { Text, View } from 'react-native';

export default function App() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>{greeting}</Text>
      <StatusBar style="auto" />
    </View>
  );
}

----------------------------------------

TITLE: Enabling React Compiler in Expo App Configuration
DESCRIPTION: Toggle on the React Compiler experiment in the app.json config file by adding the reactCompiler experiment flag.

LANGUAGE: json
CODE:
{
  "experiments": {
    "reactCompiler": true
  }
}

----------------------------------------

TITLE: Configuring expo-asset plugin in app.json
DESCRIPTION: This snippet shows how to configure the expo-asset plugin in the app.json file. It demonstrates setting up the 'assets' property to specify asset files or directories to link to the native project.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-asset",
        {
          "assets": ["path/to/file.png", "path/to/directory"]
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Installing expo-dev-client Package
DESCRIPTION: Command to install the expo-dev-client library using expo CLI

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Creating iOS Development Build
DESCRIPTION: Command to initiate an iOS development build using EAS CLI with specified platform and profile

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile development

----------------------------------------

TITLE: Importing SymbolView from expo-symbols
DESCRIPTION: This snippet shows how to import the SymbolView component from the expo-symbols library. This import statement is typically used at the top of a file where SF Symbols are to be used.

LANGUAGE: js
CODE:
import { SymbolView } from 'expo-symbols';

----------------------------------------

TITLE: Installing dom-to-image Library for Web Screenshot Capture
DESCRIPTION: Command to install the dom-to-image library, which is used to capture screenshots on web platforms.

LANGUAGE: bash
CODE:
$ npm install dom-to-image

----------------------------------------

TITLE: Running Android Fastlane Actions
DESCRIPTION: These commands show how to execute various Fastlane actions for Android, including starting the build process, creating builds, uploading crashlytics symbols, and releasing to production.

LANGUAGE: sh
CODE:
[bundle exec] fastlane android start

LANGUAGE: sh
CODE:
[bundle exec] fastlane android build

LANGUAGE: sh
CODE:
[bundle exec] fastlane android upload_crashlytics_symbols

LANGUAGE: sh
CODE:
[bundle exec] fastlane android prod_release

----------------------------------------

TITLE: Importing Expo Config Plugin Packages
DESCRIPTION: Demonstrates how to properly import the config plugins and config packages from the expo package.

LANGUAGE: js
CODE:
const { /* @hide ...*//* @end */ } = require('expo/config-plugins');
const { /* @hide ...*//* @end */ } = require('expo/config');

----------------------------------------

TITLE: Importing Constants Module in Expo
DESCRIPTION: This code snippet demonstrates how to import the Constants module from expo-constants. This module provides access to system information that remains constant throughout the app's installation lifetime.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';

----------------------------------------

TITLE: Importing TaskManager in Expo Projects
DESCRIPTION: This snippet shows how to import the TaskManager module from the expo-task-manager package in a JavaScript or TypeScript file.

LANGUAGE: js
CODE:
import * as TaskManager from 'expo-task-manager';

----------------------------------------

TITLE: Installing @expo/metro-runtime package with Yarn
DESCRIPTION: Command to install the @expo/metro-runtime package using Yarn package manager.

LANGUAGE: shell
CODE:
yarn add @expo/metro-runtime

----------------------------------------

TITLE: Generating QR Code for Expo Development Build
DESCRIPTION: Shows how to construct a URL to generate a QR code for easily loading a version of the project in a development build. The URL includes parameters for the app scheme and the encoded update manifest URL.

LANGUAGE: text
CODE:
https://qr.expo.dev/development-client?appScheme=exp%2Bapps-slug&url=https%3A%2F%2Fu.expo.dev%2FF767ADF57-B487-4D8F-9522-85549C39F43F0%3Fchannel-name%3Dmain

----------------------------------------

TITLE: Configuring CSS Support in Metro Config
DESCRIPTION: Configuration options for enabling/disabling CSS support in Expo projects for SDK 50 and above.

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});

----------------------------------------

TITLE: Configuring Android Permissions for Contacts
DESCRIPTION: XML snippet to add READ_CONTACTS and WRITE_CONTACTS permissions to the Android manifest file.

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.READ_CONTACTS" />
<uses-permission android:name="android.permission.WRITE_CONTACTS" />

----------------------------------------

TITLE: Registering iOS Migration
DESCRIPTION: Adding the new migration to EXUpdatesDatabaseMigrationRegistry.

LANGUAGE: objective-c
CODE:
+ (NSArray<id<EXUpdatesDatabaseMigration>> *)migrations
{
  return @[
    // ...
    [[EXUpdatesDatabaseMigrationX_Y alloc] init],
  ];
}

----------------------------------------

TITLE: Android Flavor Configuration
DESCRIPTION: Gradle configuration for creating separate Android app variants.

LANGUAGE: groovy
CODE:
android {
    flavorDimensions "env"
    productFlavors {
        production {
            dimension "env"
            applicationId 'com.myapp'
        }
        development {
            dimension "env"
            applicationId 'com.myapp.dev'
        }
    }
}

----------------------------------------

TITLE: Using useKeepAwake Hook in React Native
DESCRIPTION: This example demonstrates how to use the useKeepAwake hook to prevent the screen from sleeping in a React Native component.

LANGUAGE: jsx
CODE:
import { useKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Text, View } from 'react-native';

export default function KeepAwakeExample() {
  useKeepAwake();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This screen will never sleep!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Adding Permissions for Android File System Access
DESCRIPTION: XML snippet for adding necessary permissions to the Android manifest file for file system access and internet connectivity in a bare React Native project.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.INTERNET" />

----------------------------------------

TITLE: Tab Navigation Keyboard Handling
DESCRIPTION: Configuration for hiding bottom tab navigation when keyboard is visible using tabBarHideOnKeyboard option.

LANGUAGE: typescript
CODE:
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarHideOnKeyboard: true,
      }}>
      <Tabs.Screen name="index" />
    </Tabs>
  );
}

----------------------------------------

TITLE: Workflow Trigger Configuration
DESCRIPTION: Configures which GitHub events trigger the workflow execution

LANGUAGE: yaml
CODE:
on:
  push:
    branches:
      - main
    tags:
      - v1
      - v2*
      - !v2-preview**

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: Command to open the iOS workspace in Xcode for building the release version.

LANGUAGE: bash
CODE:
$ xed ios

----------------------------------------

TITLE: Configuring WebView Props for DOM Components
DESCRIPTION: Example showing how to pass WebView props to DOM components using the dom property

LANGUAGE: tsx
CODE:
import DOMComponent from './my-component';

export default function App() {
  return (
    <DOMComponent
      dom={{
        scrollEnabled: false,
      }}
    />
  );
}

----------------------------------------

TITLE: Configuring Android Status Bar in app.json
DESCRIPTION: This JSON configuration sets an opaque background color for the Android status bar and disables translucency. This is useful when working with libraries that don't support translucent status bars.

LANGUAGE: json
CODE:
{
  "expo": {
    "androidStatusBar": {
      "backgroundColor": "#C2185B",
      "translucent": false
    }
  }
}

----------------------------------------

TITLE: Sending FCM Notifications with Firebase Admin SDK in JavaScript
DESCRIPTION: This snippet demonstrates how to send both notification-type and data-type messages using the Firebase Admin SDK in Node.js. It highlights the differences between the two types and their impact on expo-notifications.

LANGUAGE: javascript
CODE:
const devicePushToken = /* ... */;
const options = /* ... */;

// ❌ The following payload has a root-level notification object and
// it will not trigger expo-notifications and may not work as expected.
admin.messaging().sendToDevice(
  devicePushToken,
  {
    notification: {
      title: "This is a notification-type message",
      body: "`expo-notifications` will never see this 😢",
    },
    data: {
      photoId: 42,
    },
  },
  options
);

// ✅ There is no "notification" key in the root level of the payload
// so the message is a "data" message, thus triggering expo-notifications.
admin.messaging().sendToDevice(
  devicePushToken,
  {
    data: {
      title: "This is a data-type message",
      message: "`expo-notifications` events will be triggered 🤗",
      // ⚠️ Notice the schema of this payload is different
      // than that of Firebase SDK. What is there called "body"
      // here is a "message". For more info see:
      // https://docs.expo.dev/versions/latest/sdk/notifications/#android-push-notification-payload-specification

      body:                              // As per Android payload format specified above, the
        JSON.stringify({ photoId: 42 }), // additional "data" should be placed under "body" key.
    },
  },
  options
);

----------------------------------------

TITLE: Importing Facebook Auth Provider
DESCRIPTION: Import statement for using Facebook authentication provider with AuthSession.

LANGUAGE: javascript
CODE:
import * as Facebook from 'expo-auth-session/providers/facebook';

----------------------------------------

TITLE: Importing Magnetometer and MagnetometerUncalibrated from expo-sensors
DESCRIPTION: This code snippet shows how to import both the calibrated Magnetometer and uncalibrated MagnetometerUncalibrated from the expo-sensors package.

LANGUAGE: js
CODE:
import { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';

----------------------------------------

TITLE: Link with Pressable Component
DESCRIPTION: Demonstrates using Link with Pressable component using the asChild prop for custom press handling.

LANGUAGE: tsx
CODE:
import { Pressable, Text } from 'react-native';
import { Link } from 'expo-router';

export default function Page() {
  return (
    <Link href="/other" asChild>
      <Pressable>
        <Text>Home</Text>
      </Pressable>
    </Link>
  );
}

----------------------------------------

TITLE: Expo Go Incompatibility Error
DESCRIPTION: Error message shown when running a project with an unsupported SDK version in Expo Go

LANGUAGE: sh
CODE:
"Project is incompatible with this version of Expo Go"

----------------------------------------

TITLE: Installing Xcode Command Line Tools
DESCRIPTION: This command installs the latest version of Xcode command line tools, which is a prerequisite for using Fastlane.

LANGUAGE: sh
CODE:
xcode-select --install

----------------------------------------

TITLE: Importing RawH3 Component in Expo Project
DESCRIPTION: This code snippet imports the RawH3 component from the Text module in the project's UI components directory. It's likely used for rendering h3-level headings in the application.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Including Specific Files in EAS Build Upload with .easignore
DESCRIPTION: This .easignore configuration demonstrates how to include a specific file in the EAS Build upload that is not in source control. It shows how to use the '!' prefix to include a file, even if it would be ignored by previous rules.

LANGUAGE: bash
CODE:
# Copy everything from your .gitignore file here

/android
/ios

# Include a file not in source control
!temp_file.json

----------------------------------------

TITLE: Importing Gyroscope from expo-sensors
DESCRIPTION: Basic import statement for using the Gyroscope module from expo-sensors package.

LANGUAGE: js
CODE:
import { Gyroscope } from 'expo-sensors';

----------------------------------------

TITLE: Displaying Welcome Message and Package Info for @expo/config in HTML
DESCRIPTION: This HTML snippet creates a centered welcome message for the @expo/config library, including a brief description and package statistics. It uses inline styling and badge images to present information attractively.

LANGUAGE: HTML
CODE:
<h1 align="center">
👋 Welcome to <br><code>@expo/config</code>
</h1>

<p align="center">A library for interacting with the <code>app.json</code>.</p>

<p align="center">
  <img src="https://flat.badgen.net/packagephobia/install/@expo/config">

  <a href="https://www.npmjs.com/package/@expo/config">
    <img src="https://flat.badgen.net/npm/dw/@expo/config" target="_blank" />
  </a>
</p>

----------------------------------------

TITLE: Updating EAS Webhook
DESCRIPTION: Command to update an existing webhook's URL or secret. Requires the webhook ID.

LANGUAGE: bash
CODE:
$ eas webhook:update --id WEBHOOK_ID

----------------------------------------

TITLE: Importing SymbolView from expo-symbols
DESCRIPTION: This snippet shows how to import the SymbolView component from the expo-symbols library. This import statement is typically used at the top of a file where SF Symbols are to be used.

LANGUAGE: js
CODE:
import { SymbolView } from 'expo-symbols';

----------------------------------------

TITLE: Configuring expo-audio plugin in app.json
DESCRIPTION: Example of how to configure the expo-audio plugin in the app.json file. This snippet shows how to set the microphonePermission message for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-audio",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Dynamic App Configuration with Environment Variables
DESCRIPTION: Example of using APP_VARIANT environment variable in app.config.js to determine app name and package identifiers based on selected variant.

LANGUAGE: javascript
CODE:
const IS_DEV = process.env.APP_VARIANT === 'development';
const IS_PREVIEW = process.env.APP_VARIANT === 'preview';

const getUniqueIdentifier = () => {
  if (IS_DEV) {
    return 'com.yourname.stickersmash.dev';
  }

  if (IS_PREVIEW) {
    return 'com.yourname.stickersmash.preview';
  }

  return 'com.yourname.stickersmash';
};

const getAppName = () => {
  if (IS_DEV) {
    return 'StickerSmash (Dev)';
  }

  if (IS_PREVIEW) {
    return 'StickerSmash (Preview)';
  }

  return 'StickerSmash: Emoji Stickers';
};

export default {
  name: getAppName(),
  ios: {
    bundleIdentifier: getUniqueIdentifier(),
  },
  android: {
    package: getUniqueIdentifier(),
  },
};

----------------------------------------

TITLE: Creating URL and URLSearchParams Objects in JavaScript
DESCRIPTION: Demonstrates how to create new URL and URLSearchParams objects using the standard URL API in Expo. This snippet shows basic usage of these constructors.

LANGUAGE: javascript
CODE:
const url = new URL('https://expo.dev');

const params = new URLSearchParams();

----------------------------------------

TITLE: Importing React Components in Markdown
DESCRIPTION: This snippet demonstrates how to import React components for use in a markdown file. It imports the Collapsible and ContentSpotlight components from specific paths.

LANGUAGE: markdown
CODE:
import { Collapsible } from '~/ui/components/Collapsible';
import { ContentSpotlight } from '~/ui/components/ContentSpotlight';

----------------------------------------

TITLE: Configuring EAS Update Channels in eas.json
DESCRIPTION: JSON configuration for eas.json file, adding channels to different build profiles for EAS Update compatibility.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "channel": "development"
    },
    "ios-simulator": {
    },
    "preview": {
      "channel": "preview"
    },
    "production": {
      "channel": "production"
    }
  }
}

----------------------------------------

TITLE: Importing Resource Components in JSX
DESCRIPTION: Import statements for loading talk data and collapsible grid wrapper component used to display various media resources.

LANGUAGE: jsx
CODE:
import { TALKS, PODCASTS, LIVE_STREAMS, YOUTUBE_VIDEOS } from '~/public/static/talks';
import { CollapsibleTalksGridWrapper } from '~/ui/components/CollapsibleTalksGridWrapper';

----------------------------------------

TITLE: iOS Entitlements Configuration
DESCRIPTION: XML configuration for Apple Sign In entitlements in iOS app.

LANGUAGE: xml
CODE:
<key>com.apple.developer.applesignin</key>
<array>
  <string>Default</string>
</array>

----------------------------------------

TITLE: Adding Deploy Scripts for GitHub Pages
DESCRIPTION: Adds predeploy and deploy scripts to package.json for building and deploying an Expo web app to GitHub Pages.

LANGUAGE: json
CODE:
"scripts": {
  "deploy": "gh-pages --nojekyll -d dist",
  "predeploy": "expo export -p web"
}

----------------------------------------

TITLE: Installing expo-localization Package with npm
DESCRIPTION: Command to install the expo-localization package using npx expo install in a React Native project. This is the recommended installation method for both managed and bare Expo projects.

LANGUAGE: bash
CODE:
npx expo install expo-localization

----------------------------------------

TITLE: Setting Up Environment Variables for Expo Updates E2E Tests
DESCRIPTION: This bash script sets up the necessary environment variables for running Expo updates end-to-end tests. It defines paths for the Expo repository, working directory, and test project, as well as other required variables.

LANGUAGE: bash
CODE:
# The location of your local copy of this repo
export EXPO_REPO_ROOT=/Users/me/myCode/expo
# The name of a directory that the test project can live under
export WORKING_DIR_ROOT=/Users/me/myCode/e2eworking
# Other environment variables needed for the test setup
export TEST_PROJECT_ROOT=$WORKING_DIR_ROOT/updates-e2e
export UPDATES_HOST=localhost
export UPDATES_PORT=4747
export EX_UPDATES_NATIVE_DEBUG=1

# Remove and recreate the working directory before executing the setup
rm -rf $WORKING_DIR_ROOT
mkdir $WORKING_DIR_ROOT

----------------------------------------

TITLE: Disabling Capability Sync in EAS Build
DESCRIPTION: Command to disable automatic capability synchronization when running EAS Build.

LANGUAGE: shell
CODE:
EXPO_NO_CAPABILITY_SYNC=1 eas build

----------------------------------------

TITLE: Configuring Entry Point in package.json for Expo Router
DESCRIPTION: Set the 'main' property in package.json to use 'expo-router/entry' as the entry point for an Expo Router project.

LANGUAGE: json
CODE:
{
  "main": "expo-router/entry"
}

----------------------------------------

TITLE: Installing expo-av Package
DESCRIPTION: Command to install the expo-av package using npm and expo CLI

LANGUAGE: bash
CODE:
npx expo install expo-av

----------------------------------------

TITLE: Setting up Path Aliases in tsconfig.json
DESCRIPTION: Configuration for custom module path aliases to enable shorter import paths using the @ symbol.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}

----------------------------------------

TITLE: Rendering BoxLink Components for Expo and EAS Build Resources
DESCRIPTION: This code snippet demonstrates the use of the BoxLink component to create a list of clickable resources related to Expo development builds and EAS Build. Each BoxLink includes a title, description, link, and an associated icon.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Configuring EAS Build with eas.json"
  description="Learn how a project using EAS services is configured with eas.json."
  href="/build/eas-json/"
  Icon={BuildIcon}
/>

<BoxLink
  title="Environment variables"
  description="Learn about different ways to use environment variables in an Expo project."
  href="/guides/environment-variables/"
  Icon={BookOpen02Icon}
/>

<BoxLink
  title="Android build process"
  description="Learn how an Android project is built on EAS Build."
  href="/build-reference/android-builds/"
  Icon={BuildIcon}
/>

<BoxLink
  title="iOS build process"
  description="Learn how an iOS project is built on EAS Build."
  href="/build-reference/ios-builds/"
  Icon={BuildIcon}
/>

<BoxLink
  title="Set up EAS Build with a monorepo "
  description="Learn how to set up EAS Build with a monorepo."
  href="/build-reference/build-with-monorepos/"
  Icon={BuildIcon}
/>

----------------------------------------

TITLE: Adding Environment Files to .gitignore
DESCRIPTION: Configuration for ignoring local environment files in git

LANGUAGE: sh
CODE:
# local env files
.env*.local

----------------------------------------

TITLE: Japanese Localization Strings
DESCRIPTION: Example of Japanese localization strings for app metadata.

LANGUAGE: json
CODE:
{
  "CFBundleDisplayName": "こんにちは",
  "NSContactsUsageDescription": "日本語のこれらの言葉"
}

----------------------------------------

TITLE: Calculating Total Monthly Updates
DESCRIPTION: Formula for calculating the total number of possible updates per month based on bandwidth allocation and MAU.

LANGUAGE: text
CODE:
(1,024 GiB × 1,024 MiB/GiB) + (10,000 MAU × 40 MiB/MAU) = 1,448,576 MiB per month
1,448,576 MiB / 3.85 MiB ≈ 376,254 updates

----------------------------------------

TITLE: Gymfile Template for iOS Builds
DESCRIPTION: Default Gymfile template used for iOS builds with credentials.

LANGUAGE: ruby
CODE:
suppress_xcode_output(true)
clean(<%- CLEAN %>)

scheme("<%- SCHEME %>")
<% if (BUILD_CONFIGURATION) { %>
configuration("<%- BUILD_CONFIGURATION %>")
<% } %>

export_options({
method: "<%- EXPORT_METHOD %>",
provisioningProfiles: {<% _.forEach(PROFILES, function(profile) { %>
    "<%- profile.BUNDLE_ID %>" => "<%- profile.UUID %>",<% }); %>
}<% if (ICLOUD_CONTAINER_ENVIRONMENT) { %>,
iCloudContainerEnvironment: "<%- ICLOUD_CONTAINER_ENVIRONMENT %>"
<% } %>
})

export_xcargs "OTHER_CODE_SIGN_FLAGS=\"--keychain <%- KEYCHAIN_PATH %>\""

disable_xcpretty(true)
buildlog_path("<%- LOGS_DIRECTORY %>")

output_directory("<%- OUTPUT_DIRECTORY %>")

----------------------------------------

TITLE: Running Expo Project on iOS Device
DESCRIPTION: This command builds and runs the Expo project on a connected iOS device. It starts a development server after building the app, eliminating the need to run 'npx expo start' separately.

LANGUAGE: bash
CODE:
$ npx expo run:ios --device

----------------------------------------

TITLE: Directive Type Definition
DESCRIPTION: TypeScript interface defining the structure of server directives that can instruct clients to perform specific actions.

LANGUAGE: typescript
CODE:
type Directive = {
  type: string;
  parameters?: { [key: string]: any };
  extra?: { [key: string]: any };
};

----------------------------------------

TITLE: Configuring EAS Build
DESCRIPTION: Command to configure an Android or iOS project for EAS Build.

LANGUAGE: bash
CODE:
$ eas build:configure

----------------------------------------

TITLE: Environment Type Declarations
DESCRIPTION: TypeScript type declarations for Expo environment variables

LANGUAGE: TypeScript
CODE:
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      EXPO_BASE_URL: string;
    }
  }
}

----------------------------------------

TITLE: Importing EAS Build Gradle Configuration (Android)
DESCRIPTION: This code snippet shows how to import the EAS Build Gradle configuration into the main Android app's build.gradle file.

LANGUAGE: groovy
CODE:
// ...

apply from: "./eas-build.gradle"

----------------------------------------

TITLE: Custom Metro Resolver Configuration
DESCRIPTION: Example showing how to customize Metro's module resolution behavior for custom module names.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
    return {
      filePath: 'path/to/file',
      type: 'sourceFile',
    };
  }
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;

----------------------------------------

TITLE: Configuring Package Name for Android in app.json
DESCRIPTION: Add the package name for your Android app in the app.json configuration file. This is required for submitting to the Google Play Store.

LANGUAGE: json
CODE:
{
  "android": {
    "package": "com.yourcompany.yourapp"
  }
}

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Command to start the documentation server in development mode on port 3002

LANGUAGE: shell
CODE:
yarn run dev

----------------------------------------

TITLE: Configuring ESLint Plugin in Config File
DESCRIPTION: Basic configuration to enable the Expo plugin in ESLint configuration file

LANGUAGE: json
CODE:
{
  "plugins": [
    "expo"
  ]
}

----------------------------------------

TITLE: Importing NetInfo Package
DESCRIPTION: Shows how to import the NetInfo package in a React Native application.

LANGUAGE: javascript
CODE:
import NetInfo from '@react-native-community/netinfo';

----------------------------------------

TITLE: Updating Related Package Version in Expo CLI (Bash)
DESCRIPTION: This command demonstrates how to update a specific related package version for a given SDK using dot notation in the key parameter.

LANGUAGE: bash
CODE:
et update-versions-endpoint --sdkVersion=35.0.0 --key="relatedPackages.@types/react-native" --value="^0.57.65"

----------------------------------------

TITLE: Configuring Localized App Store Information in EAS Metadata
DESCRIPTION: Examples of configuring localized app information for the App Store, including minimal and complete configurations.

LANGUAGE: json
CODE:
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome app",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}

LANGUAGE: json
CODE:
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "App title",
        "subtitle": "Subtitle for your app",
        "description": "A longer description of what your app does",
        "keywords": ["keyword", "other-keyword"],
        "releaseNotes": "Bug fixes and improved stability",
        "promoText": "Short tagline for your app",
        "marketingUrl": "https://example.com/en",
        "supportUrl": "https://example.com/en/help",
        "privacyPolicyUrl": "https://example.com/en/privacy",
        "privacyChoicesUrl": "https://example.com/en/privacy/choices"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring TypeScript Strict Mode in tsconfig.json
DESCRIPTION: Configuration for enabling strict type checking in TypeScript to reduce runtime errors.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true
  }
}

----------------------------------------

TITLE: Disabling Dotenv File Loading in Expo CLI
DESCRIPTION: Shows how to disable dotenv file loading in Expo CLI using the EXPO_NO_DOTENV environment variable.

LANGUAGE: sh
CODE:
# All users can run cross-env, followed by the Expo CLI command
$ npx cross-env EXPO_NO_DOTENV=1 expo start
# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command
$ EXPO_NO_DOTENV=1 npx expo start

----------------------------------------

TITLE: Running reset-project Script
DESCRIPTION: Command to run the reset-project script, which removes boilerplate code and prepares the project structure for the tutorial.

LANGUAGE: bash
CODE:
$ npm run reset-project

----------------------------------------

TITLE: Modifying iOS Project File for Bundling in Debug Mode
DESCRIPTION: This command modifies the iOS project file to force bundling of the application JS into the app for both debug and release builds. It replaces 'SKIP_BUNDLING' with 'FORCE_BUNDLING' in the project.pbxproj file.

LANGUAGE: bash
CODE:
sed -i '' 's/SKIP_BUNDLING/FORCE_BUNDLING/g;' ios/<project name>.xcodeproj/project.pbxproj

----------------------------------------

TITLE: Disabling CocoaPods Cache in EAS Build Configuration
DESCRIPTION: JSON configuration to disable the CocoaPods cache server for EAS builds by setting the EAS_BUILD_DISABLE_COCOAPODS_CACHE environment variable.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "env": {
        "EAS_BUILD_DISABLE_COCOAPODS_CACHE": "1"
      }
    }
  }
}

----------------------------------------

TITLE: Creating Podfile.properties.json for iOS
DESCRIPTION: Adding a new file Podfile.properties.json to specify the JavaScript engine for iOS.

LANGUAGE: json
CODE:
{
  "expo.jsEngine": "hermes"
}

----------------------------------------

TITLE: Starting Jest Test Runner for Expo SDK
DESCRIPTION: Command to start the Jest test runner in watch mode. This allows for continuous testing of affected modules as changes are made to the Expo SDK.

LANGUAGE: sh
CODE:
yarn test

----------------------------------------

TITLE: Creating redirects for single-page Expo Web apps on Netlify
DESCRIPTION: Create a _redirects file in the web-build directory to redirect all requests to index.html for single-page Expo web applications hosted on Netlify.

LANGUAGE: bash
CODE:
/*    /index.html   200

----------------------------------------

TITLE: Deploying Expo Project with EAS Environment Variables
DESCRIPTION: This command deploys an Expo project using EAS, including all environment variables for the specified environment (in this case, production).

LANGUAGE: bash
CODE:
eas deploy --environment production

----------------------------------------

TITLE: Configuring Runtime Version in app.json
DESCRIPTION: JSON configuration for setting the runtime version policy in app.json/app.config.js file.

LANGUAGE: json
CODE:
{
  "expo": {
    "runtimeVersion": {
      "policy": "sdkVersion"
    }
  }
}

----------------------------------------

TITLE: Configuring App IDs in app.json for Expo
DESCRIPTION: This snippet shows how to set up unique iOS Bundle Identifier and Android Application ID in the app.json file for an Expo project.

LANGUAGE: json
CODE:
{
  "ios": {
    "bundleIdentifier": "com.yourname.stickersmash"
  },
  "android": {
    "package": "com.yourname.stickersmash"
  }
}

----------------------------------------

TITLE: Rendering RawH3 Component with JSX
DESCRIPTION: This snippet demonstrates the use of the RawH3 component to display the text 'constants' in JSX.

LANGUAGE: JSX
CODE:
<RawH3>constants</RawH3>

----------------------------------------

TITLE: Enabling Developer Support in DevMenuManager.kt for Android
DESCRIPTION: This code snippet shows how to enable developer support in the DevMenuManager.kt file for Android. It involves changing the useDeveloperSupport flag from false to true.

LANGUAGE: kotlin
CODE:
- val useDeveloperSupport = false
+ val useDeveloperSupport = true

----------------------------------------

TITLE: Importing expo-maps components
DESCRIPTION: Example of how to import the AppleMaps and GoogleMaps components from the expo-maps library.

LANGUAGE: js
CODE:
import { AppleMaps, GoogleMaps } from 'expo-maps';

// ApplesMaps.View and GoogleMaps.View are the React components

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example demonstrating how to set environment variables for different build profiles with inheritance.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "node": "16.13.0",
      "env": {
        "API_URL": "https://company.com/api"
      }
    },
    "preview": {
      "extends": "production",
      "distribution": "internal",
      "env": {
        "API_URL": "https://staging.company.com/api"
      }
    }
  }
}

----------------------------------------

TITLE: Creating store.config.json for Apple App Store Metadata in JSON
DESCRIPTION: This snippet demonstrates how to create a store.config.json file for managing Apple App Store metadata. It includes fields for app title, subtitle, description, keywords, and various URLs.

LANGUAGE: json
CODE:
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome App",
        "subtitle": "Your self-made awesome app",
        "description": "The most awesome app you have ever seen",
        "keywords": ["awesome", "app"],
        "marketingUrl": "https://example.com/en/promo",
        "supportUrl": "https://example.com/en/support",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}

----------------------------------------

TITLE: Importing Text Component in React Native
DESCRIPTION: Imports the RawH3 text component from a local UI components directory for use in the application.

LANGUAGE: TypeScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Updating App Configuration
DESCRIPTION: Modification to app.json to use Expo's configuration structure

LANGUAGE: diff
CODE:
{
-  "name": "myapp",
-  "displayName": "myapp"
+  "expo": {
+    "name": "myapp"
+  }
}

----------------------------------------

TITLE: Importing Speech Module from Expo
DESCRIPTION: This snippet shows how to import the Speech module from the expo-speech library. This import statement is necessary to use the text-to-speech functionality in an Expo application.

LANGUAGE: js
CODE:
import * as Speech from 'expo-speech';

----------------------------------------

TITLE: Rendering RawH3 Component with TSConfig Title
DESCRIPTION: This JSX snippet shows how to use the imported RawH3 component to display the title 'tsconfig.json'.

LANGUAGE: JSX
CODE:
<RawH3>tsconfig.json</RawH3>

----------------------------------------

TITLE: Default CORS Headers Configuration in EAS Hosting
DESCRIPTION: Default CORS headers automatically applied by EAS Hosting when an API route doesn't handle OPTIONS requests. These headers enable permissive cross-origin access with credentials support.

LANGUAGE: txt
CODE:
Access-Control-Allow-Origin: <origin || '*'>
Access-Control-Allow-Headers: <access-control-request-headers || '*'>,
Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: *
Access-Control-Max-Age: 3600
Vary: Origin, Access-Control-Request-Headers

----------------------------------------

TITLE: Importing VideoThumbnails Module
DESCRIPTION: Example showing how to import the VideoThumbnails module from expo-video-thumbnails package.

LANGUAGE: js
CODE:
import * as VideoThumbnails from 'expo-video-thumbnails';

----------------------------------------

TITLE: Dynamic App Configuration with Environment Variables
DESCRIPTION: JavaScript configuration file that switches app identifiers based on build environment.

LANGUAGE: javascript
CODE:
const IS_DEV = process.env.APP_VARIANT === 'development';

export default {
  name: IS_DEV ? 'MyApp (Dev)' : 'MyApp',
  slug: 'my-app',
  ios: {
    bundleIdentifier: IS_DEV ? 'com.myapp.dev' : 'com.myapp',
  },
  android: {
    package: IS_DEV ? 'com.myapp.dev' : 'com.myapp',
  }
};

----------------------------------------

TITLE: Configuring Asset Selection for SDK 52+
DESCRIPTION: Configuration example showing how to specify asset patterns to be bundled in updates using the updates.assetPatternsToBeBundled property in app.json for SDK 52 and above.

LANGUAGE: json
CODE:
  "expo": {
    "updates": {
      "assetPatternsToBeBundled": [
        "app/images/**/*.png"
      ]
    }
  }

----------------------------------------

TITLE: Custom Entry File Implementation
DESCRIPTION: Example implementation of a custom entry file using registerRootComponent with a basic App component.

LANGUAGE: typescript
CODE:
import { registerRootComponent } from 'expo';
import { View } from 'react-native';

function App() {
  return <View />;
}

registerRootComponent(App);

----------------------------------------

TITLE: Installing HTML Elements Package
DESCRIPTION: Basic installation command for adding the package to an Expo project

LANGUAGE: bash
CODE:
yarn add @expo/html-elements

----------------------------------------

TITLE: Implementing URL Scheme for Stripe Redirects
DESCRIPTION: Code snippet showing how to properly configure URL schemes for handling Stripe payment redirects in both Expo Go and production environments.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),

----------------------------------------

TITLE: Building iOS App for Production
DESCRIPTION: Use EAS Build to create a production build for iOS. This command builds the app for the iOS platform using the production profile.

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile production

----------------------------------------

TITLE: Installing eslint-config-expo Package
DESCRIPTION: Commands to install the eslint-config-expo package and its peer dependency eslint using yarn package manager.

LANGUAGE: shell
CODE:
yarn add --dev eslint-config-expo
yarn add --dev eslint

----------------------------------------

TITLE: Installing expo-dev-menu-interface via npm
DESCRIPTION: Command to install the expo-dev-menu-interface package as a dependency in a bare React Native project. Requires the expo package to be installed and configured first.

LANGUAGE: bash
CODE:
npm install expo-dev-menu-interface

----------------------------------------

TITLE: Changelog Documentation in Markdown
DESCRIPTION: Structured changelog entries organized by version numbers, detailing breaking changes, new features, bug fixes and other changes across the project history.

LANGUAGE: markdown
CODE:
# Changelog

## Unpublished

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

- [Android] Started using expo modules gradle plugin.
- [iOS] Fix warnings which will become errors in Swift 6.

## 14.0.1 - 2025-01-10

_This version does not introduce any user-facing changes._

----------------------------------------

TITLE: Configuring Default NPM Registry for iOS in EAS Build
DESCRIPTION: Default .npmrc configuration for iOS builders in EAS Build system that specifies the registry URL for the self-hosted npm cache.

LANGUAGE: ini
CODE:
registry=http://10.254.24.8:4873

----------------------------------------

TITLE: Basic Prebuild Command Usage
DESCRIPTION: Shows how to run the basic prebuild command to generate native Android and iOS directories.

LANGUAGE: bash
CODE:
$ npx expo prebuild

----------------------------------------

TITLE: Version History Entry Structure
DESCRIPTION: Standard format for documenting version changes in Expo's changelog, including sections for breaking changes, new features, bug fixes, and other improvements

LANGUAGE: markdown
CODE:
## [version_number] - [date]

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

----------------------------------------

TITLE: Setting Page Margins for iOS Printing
DESCRIPTION: Demonstrates how to set custom page margins when printing on iOS using the margins option in printToFileAsync.

LANGUAGE: js
CODE:
const { uri } = await Print.printToFileAsync({
  html: 'This page is printed with margins',
  margins: {
    left: 20,
    top: 50,
    right: 20,
    bottom: 100,
  },
});

----------------------------------------

TITLE: Importing Expo Contacts Module
DESCRIPTION: Example showing how to import the Expo Contacts module in a JavaScript file.

LANGUAGE: javascript
CODE:
import * as Contacts from 'expo-contacts';

----------------------------------------

TITLE: Initializing Metro Config for Expo
DESCRIPTION: Basic setup for a metro.config.js file in an Expo project. This configuration extends the default Expo Metro config.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Using DevToolsPluginClient for Direct Plugin Interaction
DESCRIPTION: Shows how to use the useDevToolsPluginClient hook to send and receive messages directly with a dev tools plugin. This allows for more advanced interactions with the plugin.

LANGUAGE: jsx
CODE:
import { useDevToolsPluginClient } from 'expo/devtools';

export default App() {
  const client = useDevToolsPluginClient('my-devtools-plugin');
   useEffect(() => {
    // receive messages
    client?.addMessageListener("ping", (data) => {
      alert(`Received ping from ${data.from}`);
    });
    // send messages
    client?.sendMessage("ping", { from: "app" });
   }, []);

  return (/* rest of your app */)
}

----------------------------------------

TITLE: Using Legacy FileSystem API with Next API
DESCRIPTION: Shows how to use the legacy FileSystem API alongside the new File API, demonstrating compatibility between both versions.

LANGUAGE: typescript
CODE:
import * as FileSystem from 'expo-file-system';
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  const content = await FileSystem.readAsStringAsync(file.uri);
  console.log(content);
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Installing EAS CLI and Authenticating
DESCRIPTION: Install the EAS CLI globally using npm and log in to your Expo account. This is required for using EAS Submit.

LANGUAGE: bash
CODE:
$ npm install -g eas-cli && eas login

----------------------------------------

TITLE: Autolinking Configuration in Package.json
DESCRIPTION: Example configuration for Expo Autolinking in package.json, showing how to customize search paths and exclude packages from autolinking.

LANGUAGE: json
CODE:
{
  "expo": {
    "autolinking": {
      "searchPaths": ["../../packages"],
      "android": {
        "exclude": ["expo-random"]
      }
    }
  }
}

----------------------------------------

TITLE: Installing expo-apple-authentication Package
DESCRIPTION: Command to install the expo-apple-authentication package using npx expo install in a React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-apple-authentication

----------------------------------------

TITLE: Importing Image Picker Module
DESCRIPTION: Basic import statement for using the expo-image-picker library

LANGUAGE: javascript
CODE:
import * as ImagePicker from 'expo-image-picker';

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: This command opens the generated iOS project in Xcode for debugging purposes.

LANGUAGE: bash
CODE:
$ xed ios

----------------------------------------

TITLE: Opening iOS Project in Xcode
DESCRIPTION: This command opens the generated iOS project in Xcode for debugging purposes.

LANGUAGE: bash
CODE:
$ xed ios

----------------------------------------

TITLE: Installing ESLint with Expo CLI
DESCRIPTION: Command to install ESLint as a development dependency using Expo CLI

LANGUAGE: sh
CODE:
npx expo install eslint --save-dev

----------------------------------------

TITLE: Submitting iOS App to Apple App Store
DESCRIPTION: Use EAS Submit to submit your iOS app to the Apple App Store. This command initiates the submission process for the iOS platform.

LANGUAGE: bash
CODE:
$ eas submit --platform ios

----------------------------------------

TITLE: Adding camera support in Chrome iframe
DESCRIPTION: HTML code snippet showing how to enable camera support in a cross-origin iframe for Chrome versions 64 and above by adding the 'allow' attribute.

LANGUAGE: html
CODE:
<iframe src="..." allow="microphone; camera;">
  <!-- <CameraView /> -->
</iframe>

----------------------------------------

TITLE: Running Expo app on iOS Simulator
DESCRIPTION: This command builds the Expo app and runs it on an iOS Simulator. It also starts a development server, eliminating the need to run 'npx expo start' separately.

LANGUAGE: bash
CODE:
$ npx expo run:ios

----------------------------------------

TITLE: Creating a New Expo App
DESCRIPTION: Command to create a new Expo project using create-expo-app.

LANGUAGE: bash
CODE:
$ npx create-expo-app my-app

----------------------------------------

TITLE: Linking PWA Manifest in HTML
DESCRIPTION: Adds a link to the PWA manifest file in the HTML head for single-page apps.

LANGUAGE: html
CODE:
<link rel="manifest" href="/manifest.json" />

----------------------------------------

TITLE: Configuring Environment Variables in eas.json for Expo Builds
DESCRIPTION: This snippet shows how to configure the APP_VARIANT environment variable in the eas.json file for different build profiles in an Expo project.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal",
      "env": {
        "APP_VARIANT": "development"
      }
    },
    "preview": {
      "distribution": "internal",
      "env": {
        "APP_VARIANT": "preview"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring expo-module.config.json with native modules
DESCRIPTION: Update the expo-module.config.json file to include the native module classes for both Android and iOS.

LANGUAGE: json
CODE:
{
  "ios": {
    "modules": ["MyModule"]
  },
  "android": {
    "modules": ["my.module.package.MyModule"]
  }
}

----------------------------------------

TITLE: Using Permissions API for Notifications
DESCRIPTION: Added native permission requester that will let developers call Permissions.getAsync(Permissions.NOTIFICATIONS) (or askAsync) when this module is installed.

LANGUAGE: JavaScript
CODE:
// Example usage:
Permissions.getAsync(Permissions.NOTIFICATIONS)

----------------------------------------

TITLE: Integrating Prettier with ESLint Configuration
DESCRIPTION: This snippet demonstrates how to integrate Prettier with ESLint by updating the .eslintrc.js file. It extends the Prettier configuration and adds Prettier as a plugin.

LANGUAGE: javascript
CODE:
module.exports = {
  extends: ['expo', 'prettier'],
  plugins: ['prettier'],
  rules: {
    'prettier/prettier': 'error',
  },
};

----------------------------------------

TITLE: Implementing ExpoRadialChartModule on iOS
DESCRIPTION: Define the ExpoRadialChartModule to expose the native view to React Native on iOS.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class ExpoRadialChartModule: Module {
  public func definition() -> ModuleDefinition {
    Name("ExpoRadialChart")

    View(ExpoRadialChartView.self) {
      Prop("data") { (view: ExpoRadialChartView, prop: [Series]) in
        view.setChartData(data: prop)
      }
    }
  }
}

----------------------------------------

TITLE: Setting Up Local EAS Build Environment
DESCRIPTION: This bash script sets up the local EAS build environment by defining necessary paths and environment variables for the eas-build directory and working directories.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash

export EAS_LOCAL_BUILD_HOME=<the eas-build directory that you just cloned above>

export EAS_LOCAL_BUILD_PLUGIN_PATH=$EAS_LOCAL_BUILD_HOME/bin/eas-cli-local-build-plugin
export EAS_LOCAL_BUILD_WORKINGDIR=$TMPDIR/eas-build-workingdir
export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
export EAS_LOCAL_BUILD_ARTIFACTS_DIR=$TMPDIR/eas-build-workingdir/results

rm -rf $EAS_LOCAL_BUILD_WORKINGDIR

----------------------------------------

TITLE: Deleting Devices from EAS and Apple Developer Portal
DESCRIPTION: This command allows you to remove devices from your Expo account and optionally disable them on the Apple Developer Portal. It's useful for managing the list of devices that can install internal distribution builds.

LANGUAGE: bash
CODE:
$ eas device:delete

----------------------------------------

TITLE: Importing LinearGradient from expo-linear-gradient
DESCRIPTION: This snippet shows how to import the LinearGradient component from the expo-linear-gradient package. This import statement is necessary to use the LinearGradient component in your React Native application.

LANGUAGE: js
CODE:
import { LinearGradient } from 'expo-linear-gradient';

----------------------------------------

TITLE: Adding ESLint Script to package.json
DESCRIPTION: This snippet demonstrates how to add a 'lint' script to the package.json file. This script allows running ESLint on the entire project or specific directories.

LANGUAGE: json
CODE:
{
  "scripts": {
    "lint": "eslint ."
  }
}

----------------------------------------

TITLE: Adding expo-camera Plugin in Expo app.json
DESCRIPTION: This snippet demonstrates how to add the expo-camera plugin to the list of plugins in an Expo app's configuration file. It shows the basic structure for including a plugin without any custom options.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-camera"]
  }
}

----------------------------------------

TITLE: Rendering BoxLink Component for GDPR Information in JSX
DESCRIPTION: This snippet demonstrates the use of a BoxLink component to provide a link to the European Commission's data protection page for more information about GDPR. The component includes a title, description, and href prop.

LANGUAGE: jsx
CODE:
<BoxLink
  title="European Commission's data protection page"
  description="For more information about GDPR, see European Commission's data protection page."
  href="https://ec.europa.eu/info/law/law-topic/data-protection_en"
/>

----------------------------------------

TITLE: Creating a Basic Config Plugin in JavaScript
DESCRIPTION: Demonstrates the simplest possible config plugin that doesn't modify the config.

LANGUAGE: javascript
CODE:
const withNothing = config => config;

----------------------------------------

TITLE: Enabling Webpack Bundler in Expo Configuration
DESCRIPTION: Modify the app.json file to enable Webpack as the web bundler for an Expo project.

LANGUAGE: json
CODE:
{
  "expo": {
    "web": {
      "bundler": "webpack"
    }
  }
}

----------------------------------------

TITLE: GL Extension Support Methods
DESCRIPTION: Basic implementation of getSupportedExtensions and getExtension methods for WebGL extensions, though supported extensions may vary by platform.

LANGUAGE: JavaScript
CODE:
const extensions = gl.getSupportedExtensions();
const ext = gl.getExtension('extension_name');

----------------------------------------

TITLE: Importing Expo Pedometer Module
DESCRIPTION: Basic import statement for the Pedometer module from expo-sensors package.

LANGUAGE: js
CODE:
import { Pedometer } from 'expo-sensors';

----------------------------------------

TITLE: Configuring Local Version Management in EAS JSON
DESCRIPTION: Configuration for local version management in eas.json, allowing manual version control while maintaining automatic increment capability.

LANGUAGE: json
CODE:
{
  "cli": {
    "appVersionSource": "local"
  },
  "build": {
    "development": {},
    "preview": {},
    "production": {
      "autoIncrement": true
    }
  }
}

----------------------------------------

TITLE: Installing EAS CLI via npm
DESCRIPTION: Command to install the EAS CLI globally using npm. This is a prerequisite for building Expo apps.

LANGUAGE: bash
CODE:
$ npm install -g eas-cli

----------------------------------------

TITLE: Building Android App for Production
DESCRIPTION: Use EAS Build to create a production build for Android. This command builds the app for the Android platform using the production profile.

LANGUAGE: bash
CODE:
$ eas build --platform android --profile production

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable in macOS
DESCRIPTION: Configuration for setting the JAVA_HOME environment variable in bash/zsh profile after installing Zulu JDK 17.

LANGUAGE: bash
CODE:
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home

----------------------------------------

TITLE: Configuring Robots.txt for Expo Documentation
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the site content and provides the sitemap location for improved search engine indexing.

LANGUAGE: robots.txt
CODE:
User-agent: *
Allow: /
Sitemap: https://docs.expo.dev/sitemap.xml

----------------------------------------

TITLE: Importing Expo Manifests Package in JavaScript
DESCRIPTION: Example showing how to import the expo-manifests package to access manifest type definitions and utilities.

LANGUAGE: javascript
CODE:
import * as Manifests from 'expo-manifests';

----------------------------------------

TITLE: Importing Tracking Transparency Module
DESCRIPTION: TypeScript import statement for the expo-tracking-transparency module.

LANGUAGE: typescript
CODE:
import * as ExpoTrackingTransparency from 'expo-tracking-transparency';

----------------------------------------

TITLE: Basic App Configuration in JSON
DESCRIPTION: Initial app.json configuration showing basic app identifiers for iOS and Android platforms.

LANGUAGE: json
CODE:
{
  "expo": {
    "name": "MyApp",
    "slug": "my-app",
    "ios": {
      "bundleIdentifier": "com.myapp"
    },
    "android": {
      "package": "com.myapp"
    }
  }
}

----------------------------------------

TITLE: Installing Dependencies for Expo Config Plugin Development
DESCRIPTION: Recommended package.json setup for developing an Expo config plugin library, including expo as a peer dependency.

LANGUAGE: json
CODE:
{
  "dependencies": {},
  "devDependencies": {
    "expo": "^47.0.0"
  },
  "peerDependencies": {
    "expo": ">=47.0.0"
  },
  "peerDependenciesMeta": {
    "expo": {
      "optional": true
    }
  }
}

----------------------------------------

TITLE: Configuring baseUrl for Hosting with Sub-paths
DESCRIPTION: Example of configuring the baseUrl in app.json for hosting with sub-paths.

LANGUAGE: json
CODE:
{
  "expo": {
    "experiments": {
      "baseUrl": "/my-root"
    }
  }
}

----------------------------------------

TITLE: Starting Expo with Async Routes
DESCRIPTION: Terminal commands for starting or exporting an Expo project with cleared Metro cache to ensure async route loading.

LANGUAGE: bash
CODE:
$ npx expo start --clear

# Or when exporting
$ npx expo export --clear

----------------------------------------

TITLE: Debug Build Configuration in eas.json
DESCRIPTION: JSON configuration for creating debug builds with expo-updates enabled using EAS Build.

LANGUAGE: json
CODE:
{
  "build": {
    "preview_debug": {
      "env": {
        "EX_UPDATES_NATIVE_DEBUG": "1"
      },
      "android": {
        "distribution": "internal",
        "withoutCredentials": true,
        "gradleCommand": ":app:assembleDebug"
      },
      "ios": {
        "simulator": true,
        "buildConfiguration": "Debug"
      },
      "channel": "preview_debug"
    }
  }
}

----------------------------------------

TITLE: Troubleshooting Commands Collection
DESCRIPTION: Collection of commands used for troubleshooting build issues, including cleaning node_modules, removing .cxx artifacts, and performing complete project cleanup.

LANGUAGE: shell
CODE:
rm -rf ./react-native-lab/react-native/node_modules
find . -name ".cxx" -type d -prune -exec rm -rf '{}' +
./gradlew clean
git submodule foreach --recursive git clean -xfd
git clean -xfd

----------------------------------------

TITLE: Configuring Install Exclusions in Expo package.json
DESCRIPTION: Demonstrates how to exclude specific libraries from Expo's version checking system using the install.exclude array property.

LANGUAGE: json
CODE:
{
  "expo": {
    "install": {
      "exclude": ["expo-updates", "expo-splash-screen"]
    }
  }
}

----------------------------------------

TITLE: Configuring Auto-dismiss for Android Notifications
DESCRIPTION: Added the ability to configure whether the notification should be automatically dismissed when tapped on or not (on Android) with the autoDismiss parameter of NotificationContentInput.

LANGUAGE: JavaScript
CODE:
// Example usage not provided in the changelog

----------------------------------------

TITLE: Updating Android Gradle plugin usage in expo project
DESCRIPTION: Started using expo modules gradle plugin for Android builds. This change improves build configuration and management for expo modules on Android.

LANGUAGE: gradle
CODE:
// No explicit code provided, but implies changes to build.gradle files

----------------------------------------

TITLE: Configuring Sentry CLI in Package JSON
DESCRIPTION: Demonstrates how to add @sentry/cli as a trusted dependency in package.json to enable source map uploads during builds.

LANGUAGE: json
CODE:
{
  "trustedDependencies": ["@sentry/cli"]
}

----------------------------------------

TITLE: Configuring App Config Fields Check in Expo Doctor
DESCRIPTION: Demonstrates how to configure the app config fields synchronization check for native project directories in package.json.

LANGUAGE: json
CODE:
{
  "expo": {
    "doctor": {
      "appConfigFieldsNotSyncedCheck": {
        "enabled": false
      }
    }
  }
}

----------------------------------------

TITLE: Changelog Entry Format
DESCRIPTION: Standard format used for changelog entries showing version number, date and categorized changes

LANGUAGE: markdown
CODE:
## 52.0.6 - 2025-03-11

### 🐛 Bug fixes

- Fixed jest error from `FormData`. ([#35162](https://github.com/expo/expo/pull/35162) by [@WoLewicki](https://github.com/WoLewicki))

----------------------------------------

TITLE: Configuring expo-location Plugin in app.json
DESCRIPTION: Example of configuring the expo-location plugin in app.json to set custom permission messages and enable background location features.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Importing AuthSession Module in JavaScript
DESCRIPTION: Import statement for using the AuthSession module in a JavaScript file within an Expo project.

LANGUAGE: javascript
CODE:
import * as AuthSession from 'expo-auth-session';

----------------------------------------

TITLE: Using Expo Atlas with Local Development Server
DESCRIPTION: Command to start the local development server with Atlas enabled for analyzing bundle size in Expo projects.

LANGUAGE: bash
CODE:
EXPO_UNSTABLE_ATLAS=true npx expo start

----------------------------------------

TITLE: Implementing Native Actions in DOM Components
DESCRIPTION: Example of passing and using native actions between native and DOM components

LANGUAGE: tsx
CODE:
'use dom';

export default function MyComponent({ hello }: { hello: (data: string) => Promise<void> }) {
  return <p onClick={() => hello('world')}>Click me</p>;
}

----------------------------------------

TITLE: Rendering TemplateBareMinimumDiffViewer Component in JSX
DESCRIPTION: This code snippet renders the TemplateBareMinimumDiffViewer component. It is used to display the diff tool for comparing native project files between different Expo SDK versions.

LANGUAGE: jsx
CODE:
<TemplateBareMinimumDiffViewer />

----------------------------------------

TITLE: Running E2E Tests on iOS Simulator
DESCRIPTION: Command to run E2E tests for the Bare-Expo project on iOS Simulator. It performs the same steps as 'yarn ios' but prepares for E2E testing.

LANGUAGE: shell
CODE:
yarn test:ios

----------------------------------------

TITLE: Using SafeAreaInsetsContext Consumer in React Native
DESCRIPTION: This snippet shows how to use the SafeAreaInsetsContext.Consumer to access inset data in a component.

LANGUAGE: jsx
CODE:
import { SafeAreaInsetsContext } from 'react-native-safe-area-context';

function Component() {
  return (
    <SafeAreaInsetsContext.Consumer>
      {insets => <View style={{ paddingTop: insets.top }} />}
    </SafeAreaInsetsContext.Consumer>
  );
}

----------------------------------------

TITLE: Root HTML Component with Service Worker
DESCRIPTION: React component for configuring the root HTML template with service worker registration for web applications.

LANGUAGE: tsx
CODE:
import { ScrollViewStyleReset } from 'expo-router/html';
import type { PropsWithChildren } from 'react';

export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <script dangerouslySetInnerHTML={{ __html: sw }} />
        <ScrollViewStyleReset />
      </head>
      <body>{children}</body>
    </html>
  );
}

const sw = `
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js').then(registration => {
            console.log('Service Worker registered with scope:', registration.scope);
        }).catch(error => {
            console.error('Service Worker registration failed:', error);
        });
    });
}`;

----------------------------------------

TITLE: Importing registerRootComponent in TypeScript
DESCRIPTION: This snippet demonstrates how to import the registerRootComponent function from the expo package in a TypeScript file.

LANGUAGE: typescript
CODE:
import { registerRootComponent } from 'expo';

----------------------------------------

TITLE: Installing EAS CLI
DESCRIPTION: Command to install the EAS Command Line Interface globally using npm.

LANGUAGE: bash
CODE:
$ npm install --global eas-cli

----------------------------------------

TITLE: Detox Configuration File
DESCRIPTION: Configuration file for Detox specifying test runner, artifacts, and device configurations

LANGUAGE: javascript
CODE:
module.exports = {
  logger: {
    level: process.env.CI ? 'debug' : undefined,
  },
  testRunner: {
    $0: 'jest',
    args: {
      config: 'e2e/jest.config.js',
      _: ['e2e'],
    },
  },
  artifacts: {
    plugins: {
      log: process.env.CI ? 'failing' : undefined,
      screenshot: 'failing',
    },
  },
  // ... rest of configuration
};

----------------------------------------

TITLE: Default Windows Platform-tools Location
DESCRIPTION: Default file system path for Android platform-tools on Windows

LANGUAGE: bash
CODE:
%LOCALAPPDATA%\Android\Sdk\platform-tools

----------------------------------------

TITLE: Submitting Android App to Google Play Store
DESCRIPTION: Use EAS Submit to submit your Android app to the Google Play Store. This command initiates the submission process for the Android platform.

LANGUAGE: bash
CODE:
$ eas submit --platform android

----------------------------------------

TITLE: Reloading Shell Configuration on macOS
DESCRIPTION: Commands to reload the shell configuration files for both zsh and bash shells

LANGUAGE: bash
CODE:
# for zsh
source $HOME/.zshrc

# for bash
source $HOME/.bashrc

----------------------------------------

TITLE: Installing a Third-Party Library with Expo CLI
DESCRIPTION: Shows the recommended way to install a third-party library (@react-navigation/native) using Expo CLI, which checks for compatibility and provides warnings if needed.

LANGUAGE: shell
CODE:
$ npx expo install @react-navigation/native

----------------------------------------

TITLE: Correct Environment Variable Usage in Expo
DESCRIPTION: Shows the proper way to access environment variables in Expo projects by directly referencing the process.env object properties.

LANGUAGE: javascript
CODE:
const myVar = process.env.MY_VAR;

----------------------------------------

TITLE: Fixing Swift 6 Warnings on iOS
DESCRIPTION: Addresses warnings in the iOS codebase that would become errors in Swift 6.

LANGUAGE: Swift
CODE:
// Example of a fixed Swift warning
if let printInteraction = UIPrintInteraction() {
  // Use printInteraction
}

----------------------------------------

TITLE: Configuring EAS Build for Yarn Modern
DESCRIPTION: JSON configuration in package.json for enabling Yarn Modern on EAS builds.

LANGUAGE: json
CODE:
{
  "scripts": {
    "eas-build-pre-install": "corepack enable && yarn set version 4"
  }
}

----------------------------------------

TITLE: Installing Expo CLI
DESCRIPTION: Command for installing Expo CLI in a project.

LANGUAGE: bash
CODE:
$ npm install expo

----------------------------------------

TITLE: Platform-Specific ESLint Configuration
DESCRIPTION: Examples of ESLint configurations for specific platforms like native and multi-platform projects.

LANGUAGE: javascript
CODE:
"eslintConfig": {
  "extends": "universe/native"
}

LANGUAGE: javascript
CODE:
"eslintConfig": {
  "extends": ["universe/node", "universe/web"]
}

----------------------------------------

TITLE: Implementing Server Function
DESCRIPTION: Basic server function implementation with React Native Text component

LANGUAGE: tsx
CODE:
'use server';

import { Text } from 'react-native';

export default async function renderInfo({ name }) {
  return <Text>Hello, {name}!</Text>;
}

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server for running the development build.

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Importing KeepAwake Module in JavaScript
DESCRIPTION: Example of how to import and use the KeepAwake module in a React Native app.

LANGUAGE: javascript
CODE:
import * as KeepAwake from 'expo-keep-awake';

// Activate keep awake
KeepAwake.activateKeepAwakeAsync();

// Deactivate keep awake
KeepAwake.deactivateKeepAwake();

----------------------------------------

TITLE: Creating Custom Entry Point for Expo Router
DESCRIPTION: Create a custom entry point (index.js) to initialize services and load side-effects before the app loads the root layout.

LANGUAGE: js
CODE:
// Import side effects first and services

// Initialize services

// Register app entry through Expo Router
import 'expo-router/entry';

----------------------------------------

TITLE: Importing Icons in React/JSX
DESCRIPTION: Import statements for custom icons used in the app transfer documentation interface from the Expo styleguide.

LANGUAGE: jsx
CODE:
import { AppleAppStoreIcon } from '@expo/styleguide-icons/custom/AppleAppStoreIcon';
import { GoogleAppStoreIcon } from '@expo/styleguide-icons/custom/GoogleAppStoreIcon';
import { PlanEnterpriseIcon } from '@expo/styleguide-icons/custom/PlanEnterpriseIcon';

import { BoxLink } from '~/ui/components/BoxLink';

----------------------------------------

TITLE: Configuring Default NPM Registry for Android in EAS Build
DESCRIPTION: Default .npmrc configuration for Android builders in EAS Build system that specifies the registry URL for the self-hosted npm cache.

LANGUAGE: ini
CODE:
registry=http://npm-cache-service.worker-infra-production.svc.cluster.local:4873

----------------------------------------

TITLE: Adding Migration to Android Database Builder
DESCRIPTION: Adding the new migration to the database builder in getInstance method of UpdatesDatabase.kt.

LANGUAGE: kotlin
CODE:
Room.databaseBuilder(context.applicationContext, UpdatesDatabase::class.java, name)
    .addMigrations(MIGRATION_X_Y)
    .build()

----------------------------------------

TITLE: Server-side Blurhash Generation with Express
DESCRIPTION: Backend implementation for generating blurhash values from uploaded images using Express.js, multer for file handling, and sharp for image processing.

LANGUAGE: js
CODE:
const multer = require('multer');
const sharp = require('sharp');
const { encode } = require('blurhash');

const upload = multer();

LANGUAGE: js
CODE:
app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  if (file === null) {
    res.status(400).json({ message: 'Image is missing' });
    return;
  }

  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
    resolveWithObject: true,
  });

  const blurhash = encode(
    new Uint8ClampedArray(data),
    info.width,
    info.height,
    componentX,
    componentY
  );
  res.json({ blurhash });
});

----------------------------------------

TITLE: Setting JSX Runtime in Babel Preset Expo
DESCRIPTION: This code snippet demonstrates how to configure the jsxRuntime option in babel-preset-expo. It allows choosing between 'classic' and 'automatic' JSX transformation modes.

LANGUAGE: javascript
CODE:
[
  'babel-preset-expo',
  {
    jsxRuntime: 'classic',
  },
];

----------------------------------------

TITLE: Native iOS Component Registration
DESCRIPTION: Shows how the main component is registered in the iOS native code (AppDelegate.m).

LANGUAGE: objectivec
CODE:
RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@"main" initialProperties:nil];

----------------------------------------

TITLE: Fetching Network Information Once
DESCRIPTION: Demonstrates how to make a single request to get network connection information using the fetch method.

LANGUAGE: javascript
CODE:
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

----------------------------------------

TITLE: Fetching Network Information Once
DESCRIPTION: Demonstrates how to make a single request to get network connection information using the fetch method.

LANGUAGE: javascript
CODE:
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

----------------------------------------

TITLE: Managing Role Privileges Table in Markdown
DESCRIPTION: A markdown table defining the different role types and their privileges within an Expo Organization account.

LANGUAGE: markdown
CODE:
| Role          | Description                                                                                                                                               |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Owner**     | Can take any action on an account or any projects, including deleting them.                                                                               |
| **Admin**     | Can control most settings on your account, including signing up for paid services, changing permissions of other users, and managing programmatic access. |
| **Developer** | Can create new projects, make new builds, release updates, and manage credentials.                                                                        |
| **Viewer**    | Can only view your projects through Expo Go but cannot modify your projects in any way.                                                                   |

----------------------------------------

TITLE: Managing Role Privileges Table in Markdown
DESCRIPTION: A markdown table defining the different role types and their privileges within an Expo Organization account.

LANGUAGE: markdown
CODE:
| Role          | Description                                                                                                                                               |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Owner**     | Can take any action on an account or any projects, including deleting them.                                                                               |
| **Admin**     | Can control most settings on your account, including signing up for paid services, changing permissions of other users, and managing programmatic access. |
| **Developer** | Can create new projects, make new builds, release updates, and manage credentials.                                                                        |
| **Viewer**    | Can only view your projects through Expo Go but cannot modify your projects in any way.                                                                   |

----------------------------------------

TITLE: Running Android Development Build
DESCRIPTION: Command to build and run the Expo app on an Android emulator in development mode. This command handles both building the app and starting the development server.

LANGUAGE: bash
CODE:
$ npx expo run:android

----------------------------------------

TITLE: Deploying to EAS Hosting
DESCRIPTION: Command to deploy the exported web project to EAS Hosting service.

LANGUAGE: bash
CODE:
$ eas deploy

----------------------------------------

TITLE: Installing EAS CLI using npm
DESCRIPTION: Command to install EAS CLI globally using npm package manager.

LANGUAGE: bash
CODE:
$ npm install -g eas-cli

----------------------------------------

TITLE: Opening README for a Third-Party Library
DESCRIPTION: Demonstrates how to quickly view the README for a third-party library (@react-navigation/native) using npx and npm-home.

LANGUAGE: shell
CODE:
$ npx npm-home @react-navigation/native

----------------------------------------

TITLE: Adding RSC Support to expo-asset
DESCRIPTION: Adds support for React Server Components (RSC) in the expo-asset module.

LANGUAGE: Markdown
CODE:
- Add RSC support. ([#34213](https://github.com/expo/expo/pull/34213) by [@EvanBacon](https://github.com/EvanBacon))

----------------------------------------

TITLE: Configuring Splash Screen Animation Options
DESCRIPTION: This JavaScript snippet shows how to configure the built-in fade animation for the splash screen using the setOptions method from the SplashScreen module.

LANGUAGE: js
CODE:
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

----------------------------------------

TITLE: Updating Expo Module Configuration for Apple Platforms
DESCRIPTION: This change migrates the remaining expo-module.config.json files to use a unified platform syntax for Apple platforms.

LANGUAGE: JSON
CODE:
// Migrate remaining `expo-module.config.json` to unified platform syntax

----------------------------------------

TITLE: Running Expo Publish Command
DESCRIPTION: Command to publish an Expo project, making it available at a persistent URL.

LANGUAGE: bash
CODE:
expo publish

----------------------------------------

TITLE: Creating a New Expo Project with pnpm
DESCRIPTION: Command to create a new Expo project using pnpm package manager.

LANGUAGE: bash
CODE:
$ pnpm create expo-app

----------------------------------------

TITLE: Modifying iOS Podfile for expo-updates
DESCRIPTION: Changes to ios/Podfile to check for JS engine configuration in Expo files.

LANGUAGE: diff
CODE:
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`))

require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

+ require 'json'
+ podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

platform :ios, '13.0'
install! 'cocoapods', :deterministic_uuids => false

target 'MyApp' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => FlipperConfiguration.enabled,
+   # to enable hermes on iOS, change `false` to `true` and then install pods
+   :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes'
  )

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end

----------------------------------------

TITLE: Adding Expo Badge to Project README
DESCRIPTION: Markdown code for adding Expo Go compatibility badges to project documentation. Includes two style variants - black and blue themed badges that link to the Expo client.

LANGUAGE: markdown
CODE:
[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-000.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)

[![runs with Expo Go](https://img.shields.io/badge/Runs%20with%20Expo%20Go-4630EB.svg?style=flat-square&logo=EXPO&labelColor=f3f3f3&logoColor=000)](https://expo.dev/client)

----------------------------------------

TITLE: Configuring URLSession with SSL Pinning
DESCRIPTION: Example of creating a URLSession with SSL pinning delegate.

LANGUAGE: swift
CODE:
let publicKeyHexEncoded = "..." // your HTTPS certifcate public key

let session = URLSession(
                configuration: URLSessionConfiguration.ephemeral,
                delegate: PinningURLSessionDelegate(publicKeyHexEncoded: publicKeyHexEncoded),
                delegateQueue: nil)

----------------------------------------

TITLE: Migrating TypeScript ESLint Rules
DESCRIPTION: Updates @typescript-eslint dependencies to a new major version and migrates the rule set.

LANGUAGE: JavaScript
CODE:
- Update `@typescript-eslint` dependencies to new major version, migrate rule set. ([#31571](https://github.com/expo/expo/pull/31571) by [@Simek](https://github.com/Simek))

----------------------------------------

TITLE: Implementing Switch Component in Expo UI
DESCRIPTION: This code shows how to use the Switch component from @expo/ui. It creates a switch with a label 'Play music' and handles the value change.

LANGUAGE: tsx
CODE:
import { Switch } from '@expo/ui/components/Switch';

<Switch
  checked={checked}
  onValueChange={checked => {
    setChecked(checked);
  }}
  label="Play music"
/>

----------------------------------------

TITLE: Configuring ESLint in package.json
DESCRIPTION: Example of implementing eslint-config-expo using the extends option in package.json file.

LANGUAGE: javascript
CODE:
{
  "eslintConfig": {
    "extends": ["expo"]
  }
}

----------------------------------------

TITLE: Opting Out of React Compiler Optimization for Specific Components
DESCRIPTION: Use the 'use no memo' directive to opt out of React Compiler optimization for specific components or files.

LANGUAGE: jsx
CODE:
function MyComponent() {
  'use no memo';

  return <Text>Will not be optimized</Text>;
}

----------------------------------------

TITLE: Link Component Implementation
DESCRIPTION: Example of using the A (anchor) component with href and target props

LANGUAGE: tsx
CODE:
import { A } from '@expo/html-elements';

export default () => <A href="#" target="_blank" />;

----------------------------------------

TITLE: Importing @expo/metro-runtime in JavaScript
DESCRIPTION: Example of importing the @expo/metro-runtime package in a JavaScript file, typically in the main App.js file of an Expo project.

LANGUAGE: javascript
CODE:
import '@expo/metro-runtime';

----------------------------------------

TITLE: Sending Push Notification via cURL - Shell
DESCRIPTION: Command to send a push notification using Expo's push notification API endpoint. This example demonstrates sending a basic notification with a title and body to a specific Expo push token.

LANGUAGE: sh
CODE:
curl -H "Content-Type: application/json" -X POST "https://exp.host/--/api/v2/push/send" -d '{
  "to": "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]",
  "title":"hello",
  "body": "world"
}'

----------------------------------------

TITLE: Configuring pnpm for Hoisted Node Linker
DESCRIPTION: INI configuration for pnpm to use hoisted node-linker.

LANGUAGE: ini
CODE:
node-linker=hoisted

----------------------------------------

TITLE: Using Themed Components
DESCRIPTION: Example of using the created themed Heading component with specific variants.

LANGUAGE: tsx
CODE:
function App() {
  return (
    <Heading size="medium" color="success">
      Hi
    </Heading>
  );
}

----------------------------------------

TITLE: Creating EAS Project for Expo Updates Testing
DESCRIPTION: This bash command runs a TypeScript script to create an EAS project for testing Expo updates. The script is located in the expo-updates package of the Expo repository.

LANGUAGE: bash
CODE:
./packages/expo-updates/e2e/setup/create-eas-project.ts

----------------------------------------

TITLE: File Upload Server Implementation in Node.js
DESCRIPTION: Example of a Node.js server implementation that handles both binary and multipart file uploads using Express and Multer.

LANGUAGE: javascript
CODE:
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});

----------------------------------------

TITLE: Configuring google-services.json in app.json for Expo Android Projects
DESCRIPTION: This JSON snippet shows how to specify the path to the google-services.json file in the app.json configuration for an Expo project. This is necessary for setting up FCM V1 push notifications for Android.

LANGUAGE: json
CODE:
{
  "expo": {
  /* @hide ...*/ /* @end */
  "android": {
    /* @hide ...*/ /* @end */
    "googleServicesFile": "./path/to/google-services.json"
  }
}

----------------------------------------

TITLE: Displaying Project Title and Description in HTML
DESCRIPTION: This HTML snippet creates a centered title and description for the @expo/config-plugins project, including package installation and download statistics.

LANGUAGE: html
CODE:
<h1 align="center">
👋 Welcome to <br><code>@expo/config-plugins</code>
</h1>

<p align="center">A powerful tool for generating native app code from a unified JavaScript interface.</p>

<p align="center">
  <img src="https://flat.badgen.net/packagephobia/install/@expo/config-plugins">

  <a href="https://www.npmjs.com/package/@expo/config-plugins">
    <img src="https://flat.badgen.net/npm/dw/@expo/config-plugins" target="_blank" />
  </a>
</p>

----------------------------------------

TITLE: Importing Required Components
DESCRIPTION: Import statements for required MDX components and UI elements used in the setup instructions.

LANGUAGE: jsx
CODE:
import AndroidEmulatorInstructions from './_androidEmulatorInstructions.mdx';
import AndroidStudioEnvironmentInstructions from './_androidStudioEnvironmentInstructions.mdx';
import AndroidStudioInstructions from './_androidStudioInstructions.mdx';
import { BuildEnvironmentSwitch } from '../BuildEnvironmentSwitch';

import { Terminal } from '~/ui/components/Snippet';
import { Step } from '~/ui/components/Step';

----------------------------------------

TITLE: Custom Root HTML Template
DESCRIPTION: Custom HTML root template configuration for static rendering with head elements and body configuration.

LANGUAGE: typescript
CODE:
import { ScrollViewStyleReset } from 'expo-router/html';
import { type PropsWithChildren } from 'react';

export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
        <ScrollViewStyleReset />
      </head>
      <body>{children}</body>
    </html>
  );
}

----------------------------------------

TITLE: Creating a Unimodule using Expo CLI
DESCRIPTION: Command to create a new unimodule using the Expo CLI tool. This initiates an interactive process to set up the module structure.

LANGUAGE: shell
CODE:
et create-unimodule --name <unimodule-name>

----------------------------------------

TITLE: Updating Button Component for Image Selection in React Native
DESCRIPTION: Modification of the Button component to handle the onPress event for image selection.

LANGUAGE: typescript
CODE:
import { StyleSheet, View, Pressable, Text } from 'react-native';
import FontAwesome from '@expo/vector-icons/FontAwesome';

type Props = {
  label: string;
  theme?: 'primary';
  onPress?: () => void;
};

export default function Button({ label, theme, onPress }: Props) {
  if (theme === 'primary') {
    return (
      <View
        style={[
          styles.buttonContainer,
          { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },
        ]}>
        <Pressable style={[styles.button, { backgroundColor: '#fff' }]} onPress={onPress}>
          <FontAwesome name="picture-o" size={18} color="#25292e" style={styles.buttonIcon} />
          <Text style={[styles.buttonLabel, { color: '#25292e' }]}>{label}</Text>
        </Pressable>
      </View>
    );
  }

  // ...rest of the code remains same
}

----------------------------------------

TITLE: Migrating to Expo Modules Gradle Plugin on Android
DESCRIPTION: This change updates the Android build configuration to use the expo modules gradle plugin, potentially simplifying the build process.

LANGUAGE: Gradle
CODE:
// Started using expo modules gradle plugin

----------------------------------------

TITLE: Installing expo-insights CLI Commands
DESCRIPTION: Terminal commands for installing and initializing EAS CLI and expo-insights library. This includes installing the EAS CLI globally, initializing an EAS project, and installing the expo-insights package.

LANGUAGE: bash
CODE:
# Install EAS CLI if you have not already
$ npm i -g eas-cli

# Initialize your project EAS if you have not already 
$ eas init

# Install the library
$ npx expo install expo-insights

----------------------------------------

TITLE: Implementing ExpoRadialChartView for Web
DESCRIPTION: Create a placeholder implementation for the ExpoRadialChartView component on web platforms.

LANGUAGE: typescript
CODE:
import * as React from 'react';

export default function ExpoRadialChartView() {
  return <div>Not implemented</div>;
}

----------------------------------------

TITLE: Async EAS Metadata Configuration with External Content
DESCRIPTION: Advanced configuration using async functions to fetch external content like localizations. Supports both synchronous and asynchronous functions for dynamic metadata generation.

LANGUAGE: javascript
CODE:
// Use the data from `eas metadata:pull`
const config = require('./store.config.json');

module.exports = async () => {
  const year = new Date().getFullYear();
  const info = await fetchLocalizations('...').then(response => response.json());

  config.apple.copyright = `${year} Acme, Inc.`;
  config.apple.info = info;

  return config;
};

LANGUAGE: json
CODE:
{
  "submit": {
    "production": {
      "ios": {
        "metadataPath": "./store.config.js"
      }
    }
  }
}

----------------------------------------

TITLE: Updating React Native Code for Android
DESCRIPTION: Command to run the Expo tool that updates the React Native code for Android. This copies files from the React Native submodule and applies Expo-specific modifications.

LANGUAGE: shell
CODE:
et update-react-native

----------------------------------------

TITLE: Installing expo-notifications in bare React Native project
DESCRIPTION: Command to install the expo-notifications package in a bare React Native project using npm/expo CLI

LANGUAGE: bash
CODE:
npx expo install expo-notifications

----------------------------------------

TITLE: Configuring EAS Update Channels in eas.json
DESCRIPTION: This snippet demonstrates how to set up build profiles with different channels for production and staging environments in the eas.json configuration file.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "channel": "production"
    },
    "preview": {
      "channel": "staging",
      "distribution": "internal"
    }
  }
}

----------------------------------------

TITLE: Configuring JSX Import Source in Babel Preset Expo
DESCRIPTION: This snippet shows how to set the jsxImportSource option in babel-preset-expo. It allows specifying a custom import source for JSX functions when using the 'automatic' runtime.

LANGUAGE: javascript
CODE:
[
  'babel-preset-expo',
  {
    jsxRuntime: 'automatic',
    jsxImportSource: 'react',
  },
];

----------------------------------------

TITLE: Publishing an EAS Update
DESCRIPTION: Command to publish an EAS Update, specifying the channel and update message.

LANGUAGE: bash
CODE:
$ eas update --channel [channel-name] --message [message]

# Example
$ eas update --channel production --message "Fixes typo"

----------------------------------------

TITLE: Rendering RedirectNotification Component in JSX for Expo In-app Purchase Guide
DESCRIPTION: This JSX code renders a RedirectNotification component that informs users about the removal of expo-in-app-purchases library from SDK 50 onwards and suggests migrating to third-party libraries.

LANGUAGE: jsx
CODE:
<RedirectNotification>
  The `expo-in-app-purchases` library has been removed from SDK 50 onwards. If you are using this
  library, you will need to migrate to a third-party library as mentioned below.
</RedirectNotification>

----------------------------------------

TITLE: Configuring EAS Submit in eas.json
DESCRIPTION: Example configuration for EAS Submit showing how to set up production deployment settings for both Android and iOS platforms. Includes service account configuration for Android and Apple developer account details for iOS.

LANGUAGE: json
CODE:
{
  "cli": {
    "version": ">= 0.34.0"
  },
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "../path/to/api-xxx-yyy-zzz.json",
        "track": "internal"
      },
      "ios": {
        "appleId": "john@turtle.com",
        "ascAppId": "1234567890",
        "appleTeamId": "AB12XYZ34S"
      }
    }
  }
}

----------------------------------------

TITLE: Initializing UpdatesDevLauncherController on Android
DESCRIPTION: Example of initializing the UpdatesDevLauncherController in Java/Kotlin

LANGUAGE: kotlin
CODE:
UpdatesDevLauncherController.initialize()

----------------------------------------

TITLE: Package.json Scripts Configuration
DESCRIPTION: Basic script configuration in package.json for using expo-module-scripts commands.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "expo-module build",
    "clean": "expo-module clean",
    "test": "expo-module test",
    "prepare": "expo-module prepare",
    "prepublishOnly": "expo-module prepublishOnly",
    "expo-module": "expo-module"
  }
}

----------------------------------------

TITLE: Implementing Declarative Selectors
DESCRIPTION: Demonstrates how to use selectors for theme-specific styling in components.

LANGUAGE: tsx
CODE:
const Heading = create(RNText, {
  variants: {
    // ....
  },
  selectors: {
    // when device theme is 'light'...
    light: {
      color: {
        // ...any `Heading` with `color="success"`...
        success: {
          // ...will have these styles applied
          color: 'green',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Setting Up Bun Package Manager in GitHub Actions
DESCRIPTION: Configuration steps to use Bun instead of Yarn for package management in the GitHub Actions workflow. Includes Bun installation and dependency installation commands.

LANGUAGE: yaml
CODE:
- name: Setup Bun
  uses: oven-sh/setup-bun@v1
  with:
    bun-version: latest

LANGUAGE: yaml
CODE:
- name: Install dependencies
  run: bun install

----------------------------------------

TITLE: Creating Dynamic Route with URL Parameters
DESCRIPTION: Implementation of a dynamic route that demonstrates the difference between local and global URL parameters using useLocalSearchParams and useGlobalSearchParams hooks.

LANGUAGE: tsx
CODE:
import { Text, View } from 'react-native';
import { useLocalSearchParams, useGlobalSearchParams, Link } from 'expo-router';

const friends = ['charlie', 'james']

export default function Route() {
  const glob = useGlobalSearchParams();
  const local = useLocalSearchParams();

  console.log("Local:", local.user, "Global:", glob.user);

  return (
    <View>
      <Text>User: {local.user}</Text>
      {friends.map(friend => (
        <Link key={friend} href={`/${friend}`}>
          Visit {friend}
        </Link>
      ))}
    </View>
  );
}

----------------------------------------

TITLE: Documenting Environment Variables in Markdown
DESCRIPTION: This Markdown snippet lists and describes three environment variables used in @expo/config-plugins: EXPO_DEBUG, EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS, and EXPO_USE_UNVERSIONED_PLUGINS.

LANGUAGE: markdown
CODE:
## Environment Variables

### `EXPO_DEBUG`

Print debug information related to static plugin resolution.

### `EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS`

Show all error info related to static plugin resolution. Requires `EXPO_DEBUG` to be enabled.

### `EXPO_USE_UNVERSIONED_PLUGINS`

Force using the fallback unversioned plugins instead of a local versioned copy from installed packages, this should only be used for testing the CLI.

----------------------------------------

TITLE: Installing Latest Expo SDK Version using Yarn
DESCRIPTION: This snippet demonstrates how to install the latest version of the Expo SDK using Yarn. It also shows how to install a specific SDK version (e.g., SDK 52).

LANGUAGE: bash
CODE:
# Install latest
$ yarn expo install expo@latest

# Install a specific SDK version (for example, SDK 52)
$ yarn expo install expo@^52.0.0

----------------------------------------

TITLE: Metro Config Setup
DESCRIPTION: Basic Metro configuration setup extending the default Expo Metro config.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Additional features...
});

module.exports = config;

----------------------------------------

TITLE: Adding Alt Text to Images in Markdown
DESCRIPTION: Demonstrates how to add alternative text to images in Markdown for improved accessibility.

LANGUAGE: markdown
CODE:
![alt text](/path/to/img.jpg)

----------------------------------------

TITLE: Configuring iOS Simulator Build Profile in eas.json
DESCRIPTION: Add a new build profile called 'ios-simulator' in eas.json with the ios.simulator property set to true. This configuration is required for iOS Simulator builds.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      /* @hide ... */ /* @end */
    },
    "ios-simulator": {
      "ios": {
        "simulator": true
      }
    }
  }
}

----------------------------------------

TITLE: Preventing setOptions Call in Expo Go
DESCRIPTION: Prevent 'setOptions' from being called in Expo Go.

LANGUAGE: JavaScript
CODE:
// Implementation details not provided in changelog

----------------------------------------

TITLE: React Native Safe Area Implementation
DESCRIPTION: Example of implementing safe area insets using React Native and useSafeAreaInsets hook.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingLeft: insets.left,
        paddingBottom: insets.bottom,
        paddingRight: insets.right,
      }}
    />
  );
}

----------------------------------------

TITLE: Adding Subscript and Superscript in Markdown Comments
DESCRIPTION: Demonstrates custom syntax for adding subscript and superscript in Markdown comments.

LANGUAGE: markdown
CODE:
21^st^ Century <!-- sup -->
H~2~O <!-- sub -->

----------------------------------------

TITLE: Android Splash Screen XML Configuration
DESCRIPTION: XML configuration for Android splash screen layout and appearance

LANGUAGE: xml
CODE:
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:drawable="@color/splashscreen_background"/>
  <item>
    <bitmap android:gravity="center" android:src="@drawable/splashscreen_image"/>
  </item>
</layer-list>

----------------------------------------

TITLE: Adding Native Dependencies in iOS
DESCRIPTION: Edit the ios/ExpoRadialChart.podspec file to add the DGCharts library as a dependency.

LANGUAGE: ruby
CODE:
  s.static_framework = true

  s.dependency 'ExpoModulesCore'
+ s.dependency 'DGCharts', '~> 5.1.0'

  # Swift/Objective-C compatibility

----------------------------------------

TITLE: Running Expo CLI Tests
DESCRIPTION: Commands for running different types of tests for the Expo CLI, including unit, integration, and end-to-end tests.

LANGUAGE: bash
CODE:
yarn test
yarn test:e2e

----------------------------------------

TITLE: Config Plugin Entry Point
DESCRIPTION: Entry point configuration for a config plugin using CommonJS require.

LANGUAGE: javascript
CODE:
module.exports = require('./plugin/build');

----------------------------------------

TITLE: HTML Package Header with Badges
DESCRIPTION: HTML markup for the package documentation header, including centered title, description, and npm/packagephobia badges.

LANGUAGE: html
CODE:
<!-- Title -->
<h1 align="center">
👋 Welcome to <br><code>@expo/prebuild-config</code>
</h1>

<p align="center">Get the modified config for <code>expo prebuild</code>.</p>

<p align="center">
  <img src="https://flat.badgen.net/packagephobia/install/@expo/prebuild-config">

  <a href="https://www.npmjs.com/package/@expo/prebuild-config">
    <img src="https://flat.badgen.net/npm/dw/@expo/prebuild-config" target="_blank" />
  </a>
</p>

<!-- Body -->

----------------------------------------

TITLE: Configuring Android Gradle for Unimodule Exclusion
DESCRIPTION: Steps to exclude a unimodule from Expo Go on Android by modifying the build.gradle file. This involves adding the module name to the 'exclude' option of the addUnimodulesDependencies function.

LANGUAGE: java
CODE:
addUnimodulesDependencies([exclude: ['<unimodule-name>']])

----------------------------------------

TITLE: Using captureScreen Function in React Native
DESCRIPTION: Example of using the captureScreen function to capture the entire screen as a native hardware screenshot.

LANGUAGE: javascript
CODE:
import { captureScreen } from "react-native-view-shot";

captureScreen({
  format: "jpg",
  quality: 0.8,
}).then(
  (uri) => console.log("Image saved to", uri),
  (error) => console.error("Oops, snapshot failed", error)
);

----------------------------------------

TITLE: Configuring iOS Microphone Permissions
DESCRIPTION: XML configuration to add microphone usage description to iOS Info.plist file

LANGUAGE: xml
CODE:
<key>NSMicrophoneUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your microphone</string>

----------------------------------------

TITLE: Configuring expo-maps plugin in app.json
DESCRIPTION: This JSON snippet shows how to configure the expo-maps plugin in the app.json file. It sets up location permission requests and customizes the location permission message.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-maps",
        {
          "requestLocationPermission": "true",
          "locationPermission": "Allow $(PRODUCT_NAME) to use your location"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Interactive React Native App Component
DESCRIPTION: React Native component implementing a simple interactive UI with a button that shows text when clicked

LANGUAGE: jsx
CODE:
import { StatusBar } from 'expo-status-bar';
import { useState } from 'react';
import { Pressable, StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [clicked, setClicked] = useState(false);

  return (
    <View style={styles.container}>
      {!clicked && (
        <Pressable testID="click-me-button" style={styles.button} onPress={() => setClicked(true)}>
          <Text style={styles.text}>Click me</Text>
        </Pressable>
      )}
      {clicked && <Text style={styles.hi}>Hi!</Text>}
      <StatusBar style="auto" />
    </View>
  );
}

----------------------------------------

TITLE: Documentation Page Frontmatter
DESCRIPTION: YAML frontmatter configuration for the documentation page, specifying title, sidebar title, TOC settings, and description.

LANGUAGE: markdown
CODE:
---
title: EAS Submit
sidebar_title: Introduction
hideTOC: true
description: EAS Submit is a hosted service for uploading and submitting an app binary to the app stores.
---

----------------------------------------

TITLE: Disabling Sitemap Generation in Expo Router (SDK 52+)
DESCRIPTION: This JSON configuration shows how to disable the automatic sitemap generation in Expo Router for SDK 52 and above by adding the 'sitemap: false' option to the expo-router plugin configuration in app.json.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-router",
      {
        "sitemap": false
      }
    ]
  ]
}

----------------------------------------

TITLE: Linking Channel to Branch in EAS Update
DESCRIPTION: Command to edit a channel's linked branch in EAS Update system, allowing control over which updates are delivered to specific builds.

LANGUAGE: bash
CODE:
$ eas channel:edit production --branch version-2.0

----------------------------------------

TITLE: Running source-map-explorer Analysis Script
DESCRIPTION: Command to run the source-map-explorer analysis script for web bundles in an Expo project.

LANGUAGE: bash
CODE:
npm run analyze:web

----------------------------------------

TITLE: Migrating to Kotlin concurrency utilities in Android
DESCRIPTION: Migrated from AsyncTask to Kotlin concurrency utilities for better performance and code readability.

LANGUAGE: Kotlin
CODE:
// Example of using Kotlin coroutines instead of AsyncTask
launch {
  // Perform background task
  withContext(Dispatchers.Default) {
    // Long running operation
  }
  // Update UI
}

----------------------------------------

TITLE: Creating Files for New Rule in Expo Project (Bash)
DESCRIPTION: Bash commands to create necessary files for a new rule in the Expo project. This includes the rule definition file, test file, and documentation file.

LANGUAGE: bash
CODE:
touch src/rules/newRule.ts
touch src/__tests__/newRule.ts
touch docs/rules/new-rule.md

----------------------------------------

TITLE: Configuring Git for Rebasing in Expo Projects
DESCRIPTION: This script configures Git to use rebasing by default for existing and new branches in Expo projects. It sets 'rebase=true' for all existing branches and configures automatic setup of rebasing for future branches.

LANGUAGE: sh
CODE:
# Set rebase=true for your existing branches
git for-each-ref --shell \
  --format='git config branch.%(refname:lstrip=2).rebase true' \
  refs/heads/ | sh
# Set rebase=true for new branches in the future
git config branch.autosetuprebase always

----------------------------------------

TITLE: Platform-Specific Code Shaking in Expo
DESCRIPTION: Demonstrates how platform-specific code is removed during bundling using Platform.OS conditionals from react-native.

LANGUAGE: javascript
CODE:
import { Platform } from 'react-native';

if (Platform.OS === 'ios') {
  console.log('Hello on iOS');
}

----------------------------------------

TITLE: Building Expotools Source Code
DESCRIPTION: Builds the Expotools source code using Yarn.

LANGUAGE: shell
CODE:
yarn build

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server.

LANGUAGE: shell
CODE:
npx expo start

----------------------------------------

TITLE: HTML Title and Description Block
DESCRIPTION: HTML markup for the project title and description section, using centered alignment and emoji decoration.

LANGUAGE: html
CODE:
<h1 align="center">
👋 Welcome to <br><code>@expo/plist</code>
</h1>

<p align="center">A macOS Plist parser/builder for Node.js and browsers.</p>

----------------------------------------

TITLE: Creating About Screen in Expo
DESCRIPTION: Implements a basic About screen component with styling in React Native using TypeScript. The screen displays centered text with a dark background.

LANGUAGE: tsx
CODE:
import { Text, View, StyleSheet } from 'react-native';

export default function AboutScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>About screen</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    justifyContent: 'center',
    alignItems: 'center',
  },
  text: {
    color: '#fff',
  },
});

----------------------------------------

TITLE: Configuring App Config Fields Check in Expo Doctor
DESCRIPTION: Controls whether Expo Doctor checks for app config synchronization in projects with native directories. Helps manage warnings about config properties not being synced to native projects in EAS Build.

LANGUAGE: json
CODE:
{
  "expo": {
    "doctor": {
      "appConfigFieldsNotSyncedCheck": {
        "enabled": false
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Jest for Expo Module
DESCRIPTION: Sets up Jest testing configuration using the expo-module-scripts preset

LANGUAGE: json
CODE:
{
  "jest": {
    "preset": "expo-module-scripts"
  }
}

----------------------------------------

TITLE: Creating an iOS Development Build with EAS Build
DESCRIPTION: This command creates a development build for iOS using EAS Build. It specifies the iOS platform and uses the development profile defined in eas.json.

LANGUAGE: bash
CODE:
$ eas build --platform ios --profile development

----------------------------------------

TITLE: Migrating expo-module.config.json to Unified Platform Syntax
DESCRIPTION: Updates the configuration file to use a unified syntax across platforms.

LANGUAGE: JSON
CODE:
// Example of updated expo-module.config.json
{
  "platforms": {
    "ios": {
      "modules": ["ExpoPrint"]
    },
    "android": {
      "modules": ["expo.modules.print.ExpoPrintModule"]
    }
  }
}

----------------------------------------

TITLE: Building React Native Android Dependencies
DESCRIPTION: Command to build React Native Android dependencies using Gradle in the react-native-lab/react-native directory.

LANGUAGE: shell
CODE:
./gradlew :packages:react-native:ReactAndroid:buildCMakeDebug

----------------------------------------

TITLE: Configuring Next.js with Expo Integration
DESCRIPTION: Configuration setup for Next.js to work with Expo, including transpilation settings for React Native packages.

LANGUAGE: javascript
CODE:
const { withExpo } = require('@expo/next-adapter');

/** @type {import('next').NextConfig} */
const nextConfig = withExpo({
  reactStrictMode: true,
  swcMinify: true,
  transpilePackages: [
    'react-native',
    'react-native-web',
    'expo',
    // Add more React Native/Expo packages here...
  ],
  experimental: {
    forceSwcTransforms: true,
  },
});

module.exports = nextConfig;

----------------------------------------

TITLE: Configuring Platform-Specific Options in Babel Preset Expo
DESCRIPTION: This code snippet demonstrates how to set platform-specific options in babel-preset-expo. It allows for different settings on web and native platforms.

LANGUAGE: javascript
CODE:
[
  'babel-preset-expo',
  {
    // Default value:
    disableImportExportTransform: false,

    web: {
      // Web-specific value:
      disableImportExportTransform: true,
    },
  },
];

----------------------------------------

TITLE: Setting JAVA_HOME environment variable
DESCRIPTION: Command to add the JAVA_HOME environment variable to the shell profile for JDK 17.

LANGUAGE: bash
CODE:
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home

----------------------------------------

TITLE: Installing expo-sms Package
DESCRIPTION: Command to install the expo-sms package using the Expo CLI. This should be run in the root directory of your React Native project.

LANGUAGE: bash
CODE:
npx expo install expo-sms

----------------------------------------

TITLE: Configuring Asset Bundle Patterns in Expo
DESCRIPTION: Configuration snippet for specifying which assets should be bundled into the native binary using the assetBundlePatterns key in app.json.

LANGUAGE: text
CODE:
"assetBundlePatterns": [
  "assets/images/*"
],

----------------------------------------

TITLE: Configuring Multiple Release Channels in EAS JSON for Expo
DESCRIPTION: This example demonstrates how to configure multiple release channels (prod and staging) in the eas.json file for different build profiles.

LANGUAGE: json
CODE:
{
  "build": {
    "prod": {
      "releaseChannel": "prod-v1"
    },
    "staging": {
      "releaseChannel": "staging"
    }
  }
}

----------------------------------------

TITLE: Registering Service Worker in HTML
DESCRIPTION: Adds a script to register a service worker for PWA functionality in single-page apps.

LANGUAGE: html
CODE:
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker
        .register('/sw.js')
        .then(registration => {
          console.log('Service Worker registered with scope:', registration.scope);
        })
        .catch(error => {
          console.error('Service Worker registration failed:', error);
        });
    });
  }
</script>

----------------------------------------

TITLE: Creating Expo App with TinyBase Example
DESCRIPTION: This command creates a new Expo app using the TinyBase example template. TinyBase is a reactive data store for local-first apps that can be used with various syncing and persistence layers.

LANGUAGE: bash
CODE:
$ npx create-expo-app --example with-tinybase

----------------------------------------

TITLE: Creating Expo App with TinyBase Example
DESCRIPTION: This command creates a new Expo app using the TinyBase example template. TinyBase is a reactive data store for local-first apps that can be used with various syncing and persistence layers.

LANGUAGE: bash
CODE:
$ npx create-expo-app --example with-tinybase

----------------------------------------

TITLE: Initializing and Configuring EAS for Updates Test Project
DESCRIPTION: These bash commands initialize EAS and configure it for updates in the test project directory.

LANGUAGE: bash
CODE:
eas init
eas update:configure

----------------------------------------

TITLE: Implementing Feed Screen Component
DESCRIPTION: Creates a basic Feed screen component that renders within the nested Tab navigator.

LANGUAGE: tsx
CODE:
import { View, Text } from 'react-native';

export default function Feed() {
  return (
    <View>
      <Text>Feed screen</Text>
    </View>
  );
}

----------------------------------------

TITLE: Configuring EAS Build Profile
DESCRIPTION: Default EAS build configuration file that defines build profiles for development, preview, and production environments. Includes CLI version requirements and build distribution settings.

LANGUAGE: json
CODE:
{
  "cli": {
    "version": ">= 14.2.0",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}

----------------------------------------

TITLE: Exporting Expo Web Project
DESCRIPTION: This command exports the Expo web project into a 'dist' directory, creating a static build for deployment.

LANGUAGE: bash
CODE:
$ npx expo export --platform web

----------------------------------------

TITLE: Example Manifest Extra Field in JSON
DESCRIPTION: An example of the 'extra' field in the manifest JSON structure. This field can contain optional information such as third-party configuration. The example shows how Expo Application Services (EAS) project ID and app config might be included.

LANGUAGE: json
CODE:
"extra": {
  "eas": {
    "projectId": "00000000-0000-0000-0000-000000000000"
  },
  "expoConfig": {
    "name": "...",
    "version": "...",
    "iconUrl": "...",
    /* @hide ... */ /* @end */
  },
}

----------------------------------------

TITLE: Configuring ESLint with Flat Config
DESCRIPTION: Example of implementing eslint-config-expo using the new flat config system in eslint.config.js file.

LANGUAGE: javascript
CODE:
// eslint.config.js
const expoConfig = require("eslint-config-expo/flat");

module.exports = [
  ...expoConfig,
  // your other config
];

----------------------------------------

TITLE: Customizing Unmatched Routes in Expo Router (TSX)
DESCRIPTION: This snippet shows how to customize the unmatched route handler in Expo Router. It imports and exports the default Unmatched component, which can be replaced with any custom component.

LANGUAGE: tsx
CODE:
import { Unmatched } from 'expo-router';
export default Unmatched;

----------------------------------------

TITLE: Configuring Firebase Hosting caching headers for Expo Web
DESCRIPTION: Add custom caching headers to firebase.json for optimizing content delivery of Expo web apps on Firebase Hosting.

LANGUAGE: json
CODE:
  "hosting": [
    {
      "headers": [
        {
          "source": "/**",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            }
          ]
        },
        {
          "source": "**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "max-age=604800"
            }
          ]
        }
      ]
    }
  ]

----------------------------------------

TITLE: Bumping macOS Minimum Version in expo-asset
DESCRIPTION: Increases the minimum supported macOS version to 11.0 for the expo-asset module.

LANGUAGE: Markdown
CODE:
- Bump minimum macOS version to 11.0. ([#34980](https://github.com/expo/expo/pull/34980) by [@gabrieldonadel](https://github.com/gabrieldonadel))

----------------------------------------

TITLE: Creating Android Preview Build with EAS CLI
DESCRIPTION: This command uses the EAS CLI to create an Android preview build using the configured preview profile. It triggers the build process on EAS Build.

LANGUAGE: bash
CODE:
$ eas build --platform android --profile preview

----------------------------------------

TITLE: Using Expo Modules Gradle Plugin on Android
DESCRIPTION: Android codebase now uses the new Expo modules Gradle plugin.

LANGUAGE: Kotlin
CODE:
// In build.gradle:
plugins {
  id 'com.android.application'
  id 'expo-module'
}

----------------------------------------

TITLE: Installing @shopify/flash-list in React Native
DESCRIPTION: This code snippet demonstrates the installation of the @shopify/flash-list package. It uses a custom React component called APIInstallSection to display the installation instructions.

LANGUAGE: jsx
CODE:
<APIInstallSection href="https://shopify.github.io/flash-list/docs/" />

----------------------------------------

TITLE: Configuring Expo Localization Plugin
DESCRIPTION: Example configuration for expo-localization in app.json using the built-in config plugin system.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-localization"]
  }
}

----------------------------------------

TITLE: Updating Dev Launcher Host in Kotlin (Android)
DESCRIPTION: This code snippet shows how to update the DEV_LAUNCHER_HOST value in the DevLauncherController.kt file to point to a local bundler URL for Android development.

LANGUAGE: kotlin
CODE:
- private val DEV_LAUNCHER_HOST: String? = null
+ private val DEV_LAUNCHER_HOST: String? = "10.0.2.2:8090";

----------------------------------------

TITLE: Configuring Metro with TypeScript
DESCRIPTION: Setup for using TypeScript in Metro configuration files using ts-node.

LANGUAGE: javascript
CODE:
require('ts-node/register');
module.exports = require('./metro.config.ts');

LANGUAGE: typescript
CODE:
import { getDefaultConfig } from 'expo/metro-config';

const config = getDefaultConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Upgrading Expo SDK Dependencies
DESCRIPTION: This command upgrades all dependencies to match the installed SDK version using the Expo CLI.

LANGUAGE: bash
CODE:
$ npx expo install --fix

----------------------------------------

TITLE: Installing ASN1Decoder with CocoaPods
DESCRIPTION: Configuration for installing ASN1Decoder via CocoaPods in iOS projects. Requires iOS 9.0+ and uses frameworks.

LANGUAGE: ruby
CODE:
platform :ios, '9.0'
use_frameworks!

target 'MyApp' do
	pod 'ASN1Decoder'
end

----------------------------------------

TITLE: Clearing Caches for Expo CLI with Yarn
DESCRIPTION: A series of commands to clear node_modules, Yarn cache, Watchman cache, and Metro bundler cache for an Expo project using Yarn. It also includes reinstalling dependencies and restarting the Expo development server with a cleared cache.

LANGUAGE: bash
CODE:
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ npx expo start --clear

----------------------------------------

TITLE: Importing Expo Linking Module
DESCRIPTION: Shows how to import the expo-linking module to use its deep linking functionality in your Expo app.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

----------------------------------------

TITLE: Installing JDK 17 on macOS
DESCRIPTION: Commands to install JDK 17 (Zulu) using Homebrew on macOS for Android development.

LANGUAGE: bash
CODE:
brew tap homebrew/cask-versions
brew install --cask zulu@17

----------------------------------------

TITLE: Installing expo-store-review Package
DESCRIPTION: Command to install the expo-store-review package using npx expo install in a React Native project. This is the recommended installation method for both managed and bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-store-review

----------------------------------------

TITLE: Deep Link URL for Development Build
DESCRIPTION: This snippet shows the URL format represented by the generated QR code. It deep links into a development build and instructs it to fetch the latest update on the specified channel.

LANGUAGE: text
CODE:
exp+your-slug://expo-development-client/?url=https://u.expo.dev/your-project-id?runtime-version=your-runtime-version&channel-name=your-channel

----------------------------------------

TITLE: Installing and Running expo-optimize for Image Optimization in Bash
DESCRIPTION: Commands to install sharp-cli globally and run expo-optimize on a project directory to optimize compatible images in an Expo project.

LANGUAGE: bash
CODE:
$ npm install -g sharp-cli
$ npx expo-optimize <project-directory> [options]

----------------------------------------

TITLE: Configuring React Compiler Babel Plugin in Expo
DESCRIPTION: Pass additional settings to the React Compiler Babel plugin using the react-compiler object in the Babel configuration.

LANGUAGE: js
CODE:
module.exports = function (api) {
  api.cache(true);

  return {
    presets: [
      [
        'babel-preset-expo',
        {
          'react-compiler': {
            // Passed directly to the React Compiler Babel plugin.
            compilationMode: 'strict',
            panicThreshold: 'all_errors',
          },
          web: {
            'react-compiler': {
              // Web-only settings...
            },
          },
        },
      ],
    ],
  };
};

----------------------------------------

TITLE: Creating a Basic Jest Test with Jest-Expo
DESCRIPTION: Create a simple test file to verify Jest is working correctly with jest-expo.

LANGUAGE: javascript
CODE:
it('works', () => {
  expect(1).toBe(1);
});

----------------------------------------

TITLE: Creating Updates API Test Project
DESCRIPTION: This bash command runs a TypeScript script to create an Updates API test project for manual testing against EAS.

LANGUAGE: bash
CODE:
./packages/expo-updates/e2e/setup/create-updates-test.ts

----------------------------------------

TITLE: Upgrading BlurView Android dependency
DESCRIPTION: Updates the Dimezis/BlurView dependency to the latest patch version on Android to fix bugs.

LANGUAGE: JavaScript
CODE:
// [Android] Bump the Dimezis/BlurView dependency to the latest patch version.

----------------------------------------

TITLE: Importing Schema for Expo App Config
DESCRIPTION: Imports the app configuration schema and a custom component for displaying the schema table in the documentation.

LANGUAGE: javascript
CODE:
import schema from '~/public/static/schemas/v51.0.0/app-config-schema.json';
import AppConfigSchemaTable from '~/ui/components/AppConfigSchemaTable';

----------------------------------------

TITLE: Configuring CSS Support in Metro Config
DESCRIPTION: Shows how to enable or disable CSS support in the Metro configuration for different Expo SDK versions.

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});

LANGUAGE: javascript
CODE:
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  isCSSEnabled: true,
});

----------------------------------------

TITLE: Configuring Array Syntax Routes in Expo Router
DESCRIPTION: Shows how to configure initialRouteNames for array syntax routes using unstable_settings. This allows targeting specific segments in grouped routes.

LANGUAGE: typescript
CODE:
export const unstable_settings = {
  // Used for `(foo)`
  initialRouteName: 'first',
  // Used for `(bar)`
  bar: {
    initialRouteName: 'second',
  },
};

----------------------------------------

TITLE: Publishing EAS Update for Development Branch
DESCRIPTION: Command to publish an EAS Update for the development branch, specifying a message for the update.

LANGUAGE: bash
CODE:
$ eas update --branch development --message "Change first button label"

----------------------------------------

TITLE: Accepting .riv Files as Media Type in expo-asset
DESCRIPTION: Adds support for .riv files as an accepted media type in the expo-asset module.

LANGUAGE: Markdown
CODE:
- Add .riv to accepted media types ([#35758](https://github.com/expo/expo/pull/35758) by [@alextoudic](https://github.com/alextoudic))

----------------------------------------

TITLE: Configuring EAS Submit for Android Production Release
DESCRIPTION: JSON configuration in eas.json for setting up Android production release submission with Google Service Account integration

LANGUAGE: json
CODE:
{
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "./service-account-file.json",
        "track": "production"
      }
    }
  }
}

----------------------------------------

TITLE: Basic Component Usage with Expo Dev Client Components
DESCRIPTION: Demonstrates basic usage of expo-dev-client-components including View, Spacer, Row components with theme integration.

LANGUAGE: tsx
CODE:
import { View, Spacer, Row, useExpoTheme, ChevronRightICon } from 'expo-dev-client-components';

function ExampleRow() {
  const theme = useExpoTheme();

  return (
    <View px="small" py="large">
      <Row align="center">
        <ChevronRightIcon />
        <Spacer.Horizontal size="tiny" />
        <Text size="large" style={{ color: theme.text.default }}>
          Enter URL manually
        </Text>
      </Row>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Web UI for Expo Dev Tools Plugin
DESCRIPTION: Demonstrates the structure of the web UI component for an Expo dev tools plugin, including message listening and subscription management.

LANGUAGE: tsx
CODE:
import { useDevToolsPluginClient, type EventSubscription } from 'expo/devtools';
import { useEffect } from 'react';

export default function App() {
  const client = useDevToolsPluginClient('my-devtools-plugin');

  useEffect(() => {
    const subscriptions: EventSubscription[] = [];

    subscriptions.push(
      client?.addMessageListener('ping', data => {
        alert(`Received ping from ${data.from}`);
      })
    );

    return () => {
      for (const subscription of subscriptions) {
        subscription?.remove();
      }
    };
  }, [client]);
}

----------------------------------------

TITLE: Importing Global CSS in Expo Router
DESCRIPTION: Import the global.css file in your app/_layout.tsx file when using Expo Router.

LANGUAGE: typescript
CODE:
import '../global.css';

----------------------------------------

TITLE: Configuring ESLint in .eslintrc.js
DESCRIPTION: Example of implementing eslint-config-expo using the extends option in .eslintrc.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  extends: ["expo"],
};

----------------------------------------

TITLE: Installing expo-system-ui Package using npx
DESCRIPTION: This command installs the expo-system-ui package using npx, which is the recommended method for adding the package to an Expo project.

LANGUAGE: bash
CODE:
npx expo install expo-system-ui

----------------------------------------

TITLE: Uploading Credentials using EAS CLI in Expo
DESCRIPTION: This command uploads credentials from the local credentials.json file to EAS servers for remote management. It requires running in the project root and selecting the appropriate platform and options.

LANGUAGE: bash
CODE:
eas credentials

----------------------------------------

TITLE: Configuring HTTP Headers for JavaScript Files in Firebase
DESCRIPTION: This snippet shows how to configure firebase.json to set the correct Content-Type header for JavaScript files. This is necessary for updates to work correctly on some hosting services.

LANGUAGE: json
CODE:
{
  "hosting": [
    {
      "target": "native",
      "public": "dist",
      "headers": [
        {
          "source": "**/*.js",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/javascript"
            }
          ]
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Configuring Android Permissions
DESCRIPTION: Required permissions that need to be added to AndroidManifest.xml for basic storage access

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

----------------------------------------

TITLE: Gradle Kotlin Script Autolinking Example
DESCRIPTION: Example of Android autolinking configuration using Gradle Kotlin script.

LANGUAGE: kotlin
CODE:
expoAutolinking.useExpoVersionCatalog
expoAutolinking.reactNativeGradlePlugin

----------------------------------------

TITLE: Creating a Changelog Entry in Markdown
DESCRIPTION: Demonstrates the correct format for a changelog entry, including a description of the change, links to the associated pull request and author's GitHub profile.

LANGUAGE: markdown
CODE:
- Added a guide about updating changelogs in the packages. ([#13075](https://github.com/expo/expo/pull/13075) by [@tsapeta](https://github.com/tsapeta))

----------------------------------------

TITLE: Installing SegmentedControl in React Native
DESCRIPTION: This code snippet demonstrates how to include the APIInstallSection component, which provides installation instructions for the SegmentedControl library.

LANGUAGE: jsx
CODE:
<APIInstallSection href="https://github.com/react-native-segmented-control/segmented-control#getting-started" />

----------------------------------------

TITLE: Nested Navigation in React Navigation
DESCRIPTION: Demonstrates the traditional React Navigation approach to nested navigation using params.

LANGUAGE: jsx
CODE:
navigation.navigate('root', {
  screen: 'settings',
  params: {
    screen: 'media',
  },
});

----------------------------------------

TITLE: Modifying React Component in Expo App
DESCRIPTION: Example of modifying JavaScript code in an Expo app, changing the label of a button component.

LANGUAGE: jsx
CODE:
<Button theme="primary" label="Select a photo" onPress={pickImageAsync} />

----------------------------------------

TITLE: Configuring Android Audio Permissions
DESCRIPTION: XML configuration to add RECORD_AUDIO permission to Android manifest file

LANGUAGE: xml
CODE:
<uses-permission android:name="android.permission.RECORD_AUDIO" />

----------------------------------------

TITLE: Cache Clearing Command for React Native/Expo
DESCRIPTION: Comprehensive command to clear all caches, reinstall dependencies, and restart the Expo development server to resolve version mismatch issues.

LANGUAGE: bash
CODE:
rm -rf node_modules && npm cache clean --force && npm install && watchman watch-del-all && rm -rf $TMPDIR/haste-map-* && rm -rf $TMPDIR/metro-cache && npx expo start --clear

----------------------------------------

TITLE: Using @expo/json-file in TypeScript
DESCRIPTION: Example demonstrating how to import and use JsonFile class to read and write JSON data. Shows creation of file instance and basic async operations for reading and writing JSON content.

LANGUAGE: typescript
CODE:
import JsonFile, { JSONObject } from '@expo/json-file';

// Create a file instance
const jsonFile = new JsonFile<JSONObject>(filePath);

// Interact with the file
await jsonFile.readAsync();
await jsonFile.writeAsync({ some: 'data' });

----------------------------------------

TITLE: Configuring DocumentPicker in Expo app.json
DESCRIPTION: Example configuration for enabling iCloud storage features in the Expo app config file. This sets the iCloudContainerEnvironment to 'Production'.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Executing Node.js Scripts with Preserved Argument Quotes
DESCRIPTION: A bash script that preserves quotes when passing arguments to Node.js, fixing build errors when there are spaces in target names.

LANGUAGE: bash
CODE:
with-node.sh

----------------------------------------

TITLE: Using Keyboard Shortcut Syntax in Markdown
DESCRIPTION: Shows the correct way to format keyboard shortcuts in Markdown using the <kbd> element.

LANGUAGE: markdown
CODE:
Open the app, press <kbd>Cmd ⌘</kbd> + <kbd>T</kbd> or <kbd>Ctrl</kbd> + <kbd>T</kbd> to open a new window.

----------------------------------------

TITLE: Creating Async Server Component
DESCRIPTION: Server component example with data fetching and rendering Pokemon information

LANGUAGE: tsx
CODE:
import 'server-only';

import { Image, Text, View } from 'react-native';

export async function Pokemon() {
  const res = await fetch('https://pokeapi.co/api/v2/pokemon/2');
  const json = await res.json();
  return (
    <View style={{ padding: 8, borderWidth: 1 }}>
      <Text style={{ fontWeight: 'bold', fontSize: 24 }}>{json.name}</Text>
      <Image source={{ uri: json.sprites.front_default }} style={{ width: 100, height: 100 }} />

      {json.abilities.map(ability => (
        <Text key={ability.ability.name}>- {ability.ability.name}</Text>
      ))}
    </View>
  );
}

----------------------------------------

TITLE: Creating Async Server Component
DESCRIPTION: Server component example with data fetching and rendering Pokemon information

LANGUAGE: tsx
CODE:
import 'server-only';

import { Image, Text, View } from 'react-native';

export async function Pokemon() {
  const res = await fetch('https://pokeapi.co/api/v2/pokemon/2');
  const json = await res.json();
  return (
    <View style={{ padding: 8, borderWidth: 1 }}>
      <Text style={{ fontWeight: 'bold', fontSize: 24 }}>{json.name}</Text>
      <Image source={{ uri: json.sprites.front_default }} style={{ width: 100, height: 100 }} />

      {json.abilities.map(ability => (
        <Text key={ability.ability.name}>- {ability.ability.name}</Text>
      ))}
    </View>
  );
}

----------------------------------------

TITLE: Installing and Running Expo CLI
DESCRIPTION: Shows how to install and run the Expo CLI using npx. This command provides access to various Expo development tools and commands.

LANGUAGE: bash
CODE:
npx expo

----------------------------------------

TITLE: Installing expo-screen-capture in bare React Native projects
DESCRIPTION: Command to install the expo-screen-capture package using npx and expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-screen-capture

----------------------------------------

TITLE: Rendering Router with Fixture Path and Overrides in TypeScript
DESCRIPTION: Demonstrates using renderRouter with both a fixture directory and component overrides for specific routes.

LANGUAGE: tsx
CODE:
it('my-test', async () => {
  const MockAuthLayout = jest.fn(() => <View />);
  renderRouter({
    appDir: './my-test-fixture',
    overrides: {
      'directory/(auth)/_layout': MockAuthLayout,
    },
  });
});

----------------------------------------

TITLE: Rendering Hooks Section Header in JSX
DESCRIPTION: This JSX snippet renders a heading for the 'hooks' section using the imported RawH3 component. It's part of the UI structure for documenting or displaying information about hooks.

LANGUAGE: JSX
CODE:
<RawH3>hooks</RawH3>

----------------------------------------

TITLE: Custom Quality Image Optimization
DESCRIPTION: Command to compress image assets using expo-optimize with a specific quality setting of 90%

LANGUAGE: bash
CODE:
$ npx expo-optimize --quality 90

----------------------------------------

TITLE: Migrating expo-module.config.json to Unified Platform Syntax
DESCRIPTION: Updated configuration for Apple platforms to use unified syntax.

LANGUAGE: JavaScript
CODE:
// Example of updated config:
{
  "platforms": ["ios", "macos"],
  "ios": { ... },
  "macos": { ... }
}

----------------------------------------

TITLE: Rendering RawH3 Component with JSX in React Native
DESCRIPTION: This JSX snippet demonstrates the usage of the RawH3 component to render a heading about light and dark modes in the user interface.

LANGUAGE: JSX
CODE:
<RawH3>Light and dark modes</RawH3>

----------------------------------------

TITLE: Configuring Release Channel in EAS JSON for Expo Build
DESCRIPTION: This snippet shows how to set the release channel in the eas.json file for building standalone apps with specific channels.

LANGUAGE: json
CODE:
{
  "build": {
    "your-build-profile": {
      "releaseChannel": "your-channel"
    }
  }
}

----------------------------------------

TITLE: Route Parameter Type Checking
DESCRIPTION: Example of using typed route parameters with useLocalSearchParams hook

LANGUAGE: typescript
CODE:
import { Text } from 'react-native';
import { useLocalSearchParams } from 'expo-router';

export default function Page() {
  const {
    profile,
    search,
  } = useLocalSearchParams<'app/(search)/[profile]/[...search].tsx'>();

  return (
    <>
      <Text>Profile: {profile}</Text>
      <Text>Search: {search.join(',')}</Text>
    </>
  );
}

----------------------------------------

TITLE: Registering iOS Devices for Ad Hoc Distribution
DESCRIPTION: This command registers an iOS device for app installation, generating a shareable URL or QR code for device registration. It's necessary for ad hoc distribution on iOS.

LANGUAGE: bash
CODE:
$ eas device:create

----------------------------------------

TITLE: Configuring Build Properties in app.json
DESCRIPTION: Example configuration showing how to customize Android and iOS build properties including SDK versions and deployment targets through the Expo config plugin system

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 31,
            "targetSdkVersion": 31,
            "buildToolsVersion": "31.0.0"
          },
          "ios": {
            "deploymentTarget": "13.0"
          }
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Registering Root Component in React Native
DESCRIPTION: Shows how to register the root component of a React Native application using Expo's registerRootComponent function.

LANGUAGE: javascript
CODE:
import { registerRootComponent } from 'expo';
import App from './App';
registerRootComponent(App);

----------------------------------------

TITLE: Processing RAW and zip-base64 Formats in Node.js
DESCRIPTION: Example of processing RAW and zip-base64 formats captured by react-native-view-shot using Node.js libraries.

LANGUAGE: javascript
CODE:
const fs = require("fs");
const zlib = require("zlib");
const PNG = require("pngjs").PNG;
const Buffer = require("buffer").Buffer;

const format = Platform.OS === "android" ? "raw" : "png";
const result = Platform.OS === "android" ? "zip-base64" : "base64";

captureRef(this.ref, { result, format }).then((data) => {
  // expected pattern 'width:height|', example: '1080:1731|'
  const resolution = /^(\d+):(\d+)\|/g.exec(data);
  const width = (resolution || ["", 0, 0])[1];
  const height = (resolution || ["", 0, 0])[2];
  const base64 = data.substr((resolution || [""])[0].length || 0);

  // convert from base64 to Buffer
  const buffer = Buffer.from(base64, "base64");
  // un-compress data
  const inflated = zlib.inflateSync(buffer);
  // compose PNG
  const png = new PNG({ width, height });
  png.data = inflated;
  const pngData = PNG.sync.write(png);
  // save composed PNG
  fs.writeFileSync(output, pngData);
});

----------------------------------------

TITLE: Creating and Publishing an Update with EAS CLI
DESCRIPTION: This command creates a new update and publishes it to a specified branch in the EAS project.

LANGUAGE: bash
CODE:
$ eas update --branch [branch-name] --message "..."

----------------------------------------

TITLE: Configuring ESLint for React Compiler in Expo
DESCRIPTION: Update the ESLint configuration to include the React Compiler plugin and set the appropriate rule.

LANGUAGE: js
CODE:
// https://docs.expo.dev/guides/using-eslint/
module.exports = {
  extends: 'expo',
  plugins: ['eslint-plugin-react-compiler'],
  rules: {
    'react-compiler/react-compiler': 'error',
  },
};

----------------------------------------

TITLE: Installing Auth Session Dependencies
DESCRIPTION: Command to install required npm packages expo-auth-session and expo-crypto using expo CLI

LANGUAGE: bash
CODE:
npx expo install expo-auth-session expo-crypto

----------------------------------------

TITLE: Installing Expo Module Scripts
DESCRIPTION: Commands to install expo-module-scripts as a development dependency using yarn or npm.

LANGUAGE: shell
CODE:
yarn add -D expo-module-scripts

# or

npm install --save-dev expo-module-scripts

----------------------------------------

TITLE: Importing RawH3 Component in React
DESCRIPTION: This snippet imports the RawH3 component from a local UI components directory. It's likely used for rendering h3 level headings in the application.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Generating Patches for Modified Files
DESCRIPTION: Command to generate patches for modified files in android or ios directories. The patches are stored in the cng-patches directory and are automatically applied during prebuild.

LANGUAGE: sh
CODE:
$ npx patch-project

----------------------------------------

TITLE: Adding pairedVideoAsset for Live Photo Support in iOS
DESCRIPTION: New feature added to support Live Photos by including pairedVideoAsset.

LANGUAGE: Swift
CODE:
// Example usage:
let asset = MediaLibrary.getAssetAsync(id)
let pairedVideoAsset = asset.pairedVideoAsset

----------------------------------------

TITLE: Configuring Git Proxy Settings
DESCRIPTION: Sets up Git to use a local proxy (localhost:8888) for both HTTP and HTTPS connections.

LANGUAGE: ini
CODE:
[http]
  proxy = http://localhost:8888
[https]
  proxy = http://localhost:8888

----------------------------------------

TITLE: Generating APNs JWT Authorization Token
DESCRIPTION: Creates a JSON Web Token for APNs authentication using Apple developer credentials.

LANGUAGE: javascript
CODE:
const jwt = require("jsonwebtoken");
const authorizationToken = jwt.sign(
  {
    iss: "YOUR-APPLE-TEAM-ID"
    iat: Math.round(new Date().getTime() / 1000),
  },
  fs.readFileSync("./path/to/appName_apns_key.p8", "utf8"),
  {
    header: {
      alg: "ES256",
      kid: "YOUR-P8-KEY-ID",
    },
  }
);

----------------------------------------

TITLE: Configuring App JSON for Custom Plugins
DESCRIPTION: This JSON configuration imports a custom config plugin under the plugins property in the app.json file.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      "./my-plugin.ts"
    ]
  }
}

----------------------------------------

TITLE: Registering an iOS Device with EAS CLI
DESCRIPTION: This command initiates the process of registering a new Apple device using the EAS CLI. It prompts for Apple ID login and generates a registration URL for the iOS device.

LANGUAGE: bash
CODE:
$ eas device:create

----------------------------------------

TITLE: Configuring Android Build Gradle
DESCRIPTION: Gradle configuration to add the custom cameraview maven repository to Android project.

LANGUAGE: gradle
CODE:
allprojects {
    repositories {

        // * Your other repositories here *

        // * Add a new maven block after other repositories / blocks *
        maven {
            // expo-camera bundles a custom com.google.android:cameraview
            url "$rootDir/../node_modules/expo-camera/android/maven"
        }
    }
}

----------------------------------------

TITLE: Configuring EAS Submit Profile
DESCRIPTION: JSON configuration in eas.json to specify App Store Connect app ID and submission settings.

LANGUAGE: json
CODE:
{
  "submit": {
    "production": {
      "ios": {
        "ascAppId": "your-app-store-connect-app-id"
      }
    }
  }
}

----------------------------------------

TITLE: Checking ADB Device Connection
DESCRIPTION: Command to verify Android device connection to ADB (Android Debug Bridge) and view connected devices

LANGUAGE: bash
CODE:
$ adb devices

List of devices attached
8AHX0T32K	device

----------------------------------------

TITLE: Creating an AudioPlayer instance directly in JavaScript
DESCRIPTION: This code snippet demonstrates how to create an AudioPlayer instance directly using the createAudioPlayer function from expo-audio, which is useful for advanced use cases where manual lifecycle management is required.

LANGUAGE: javascript
CODE:
import { createAudioPlayer } from 'expo-audio';
const player = createAudioPlayer(audioSource);

----------------------------------------

TITLE: Creating Default Babel Configuration for Expo Projects
DESCRIPTION: This snippet shows the default Babel configuration for Expo projects. It uses the 'babel-preset-expo' preset, which extends the default React Native preset and adds support for additional features.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

----------------------------------------

TITLE: Native Android Component Registration
DESCRIPTION: Shows how the main component is registered in the Android native code (MainActivity.java).

LANGUAGE: java
CODE:
@Override
protected String getMainComponentName() {
  return "main";
}

----------------------------------------

TITLE: Demonstrating JavaScript Minification in Expo CLI
DESCRIPTION: This snippet shows an example of how Expo CLI minifies JavaScript code by removing comments and collapsing string concatenation.

LANGUAGE: javascript
CODE:
// This comment will be stripped
console.log('a' + ' ' + 'long' + ' string' + ' to ' + 'collapse');

LANGUAGE: javascript
CODE:
console.log('a long string to collapse');

----------------------------------------

TITLE: Disabling EXPO_PUBLIC_-prefixed Client Environment Variables
DESCRIPTION: Demonstrates how to disable client environment variable inlining for variables prefixed with EXPO_PUBLIC_.

LANGUAGE: sh
CODE:
# All users can run cross-env, followed by the Expo CLI command
$ npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start
# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command
$ EXPO_NO_CLIENT_ENV_VARS=1 npx expo start

----------------------------------------

TITLE: Installing expo-json-utils Package for React Native and Expo
DESCRIPTION: This snippet shows the name of the package 'expo-json-utils' which provides utilities for reading JSONObjects (Android) and NSDictionaries (iOS) in React Native and Expo applications.

LANGUAGE: Markdown
CODE:
# expo-json-utils

----------------------------------------

TITLE: FCM Push Notification Payload Format in JSON
DESCRIPTION: This snippet shows the structure of the FCM push notification payload. It includes various fields such as token, collapse_key, priority, and data object with Expo-specific fields.

LANGUAGE: json
CODE:
{
  "token": "native device token string",
  "collapse_key": "string that identifies notification as collapsible",
  "priority": "normal" || "high",
  "data": {
    "experienceId": "@yourExpoUsername/yourProjectSlug",
    "scopeKey": "@yourExpoUsername/yourProjectSlug",
    "title": "title of your message",
    "message": "body of your message",
    "channelId": "the android channel ID associated with this notification",
    "categoryId": "the category associated with this notification",
    "icon": "the icon to show with this notification",
    "link": "the link this notification should open",
    "sound": "boolean or the custom sound file you'd like to play",
    "vibrate": "true" | "false" | "number[]",
    "priority": "AndroidNotificationPriority",
    "badge": "the number to set the icon badge to",
    "body": { "object of key-value pairs" }
  }
}

----------------------------------------

TITLE: Installing Watchman using Homebrew
DESCRIPTION: This snippet demonstrates the terminal commands to install Watchman, a file system watching service, using Homebrew. It updates Homebrew and then installs Watchman.

LANGUAGE: bash
CODE:
$ brew update
$ brew install watchman

----------------------------------------

TITLE: Running pod-install using npx in Shell
DESCRIPTION: This command demonstrates how to use npx to run the pod-install package. It simplifies the process of installing and managing CocoaPods dependencies in iOS and Xcode projects.

LANGUAGE: sh
CODE:
npx pod-install

----------------------------------------

TITLE: NPM Package Configuration
DESCRIPTION: Package.json configuration for npm linking and repository information.

LANGUAGE: json
CODE:
{
  "homepage": "https://github.com/YOU/expo-YOUR_PACKAGE#readme",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/YOU/expo-YOUR_PACKAGE.git"
  },
  "bugs": {
    "url": "https://github.com/YOU/expo-YOUR_PACKAGE/issues"
  }
}

----------------------------------------

TITLE: Basic HTML Elements Import
DESCRIPTION: Example of importing and using an HTML element component

LANGUAGE: tsx
CODE:
import { H1 } from '@expo/html-elements';

----------------------------------------

TITLE: Customizing Metro Resolver
DESCRIPTION: Demonstrates how to customize the Metro resolver for custom module resolution.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
    // Logic to resolve the module name to a file path...
    // NOTE: Throw an error if there is no resolution.
    return {
      filePath: 'path/to/file',
      type: 'sourceFile',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;

----------------------------------------

TITLE: Adding RSC Test Script to package.json
DESCRIPTION: This snippet demonstrates how to add a script for running RSC tests using Jest in the package.json file.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test:rsc": "jest --config jest-rsc.config.js"
  }
}

----------------------------------------

TITLE: Configuring Media Library Permissions with Plugins
DESCRIPTION: Shows how to configure photo permission messages using expo-media-library plugin configuration in app.json.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-media-library",
      {
        "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
        "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos."
      }
    ]
  ]
}

----------------------------------------

TITLE: Installing expo-contacts in React Native
DESCRIPTION: Command to install the expo-contacts package using npx expo install.

LANGUAGE: bash
CODE:
npx expo install expo-contacts

----------------------------------------

TITLE: Importing QR Code Component in React
DESCRIPTION: This snippet imports the QRCodeReact component from the 'react-qr-code' library. This component is used to generate a QR code for the Expo Go app download link.

LANGUAGE: jsx
CODE:
import QRCodeReact from 'react-qr-code';

----------------------------------------

TITLE: Custom Code Removal with Environment Variables
DESCRIPTION: Example of using EXPO_PUBLIC_ environment variables to remove code from production bundles.

LANGUAGE: javascript
CODE:
EXPO_PUBLIC_DISABLE_FEATURE=true;

LANGUAGE: javascript
CODE:
if (!process.env.EXPO_PUBLIC_DISABLE_FEATURE) {
  console.log('Hello from the feature!');
}

----------------------------------------

TITLE: Starting a Branch-Based Rollout in Expo
DESCRIPTION: This command initiates a branch-based rollout in Expo, allowing you to select a channel, choose a branch, and set the rollout percentage.

LANGUAGE: bash
CODE:
$ eas channel:rollout

----------------------------------------

TITLE: Generating Tunnel URL for Expo Development Server
DESCRIPTION: Demonstrates how to use the --tunnel flag with npx expo start to create a publicly accessible URL for the development server, which is useful for accessing the server through firewalls or getting feedback on implementations.

LANGUAGE: bash
CODE:
npx expo start --tunnel

----------------------------------------

TITLE: Basic Config Plugin Setup
DESCRIPTION: Minimal configuration to add expo-image-picker plugin to app.json or app.config.js

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-image-picker"]
  }
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Tracking Transparency
DESCRIPTION: XML snippet to add the NSUserTrackingUsageDescription key to the iOS Info.plist file, which is required for the tracking transparency feature.

LANGUAGE: xml
CODE:
<key>NSUserTrackingUsageDescription</key>
<string>Your custom usage description string here.</string>

----------------------------------------

TITLE: Default Windows Android SDK Location
DESCRIPTION: Default file system path for Android SDK installation on Windows

LANGUAGE: bash
CODE:
%LOCALAPPDATA%\Android\Sdk

----------------------------------------

TITLE: Installing patch-project using Expo CLI
DESCRIPTION: Command to install the patch-project package using npx expo install

LANGUAGE: sh
CODE:
$ npx expo install patch-project

----------------------------------------

TITLE: Example Config Plugin Implementation
DESCRIPTION: TypeScript implementation of a basic config plugin with type definitions.

LANGUAGE: typescript
CODE:
import { ConfigPlugin } from '@expo/config-plugins';

const withNewName: ConfigPlugin<{ name?: string }> = (config, { name = 'my-app' } = {}) => {
  config.name = name;
  return config;
};

export default withNewName;

----------------------------------------

TITLE: Exporting Expo Web Project
DESCRIPTION: Command to export the Expo project for web platform deployment.

LANGUAGE: bash
CODE:
$ npx expo export --platform web

----------------------------------------

TITLE: Adding Web Build Script with Service Worker Generation
DESCRIPTION: Defines a package.json script to build the web version and generate a service worker configuration.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build:web": "expo export -p web && npx workbox-cli generateSW workbox-config.js"
  }
}

----------------------------------------

TITLE: Configuring Rewrites in Expo Router (JSON)
DESCRIPTION: This example demonstrates how to set up rewrites in the app.json file. Rewrites act as a URL proxy, rendering the new destination without changing the URL.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "expo-router",
      "rewrites": [{
        "source": "/redirect/from/here",
        "destination": "/to/this/route"
      }]
    ]
  ]
}

----------------------------------------

TITLE: Configuring local.properties for Android SDK and NDK in Expo Project
DESCRIPTION: This code snippet shows the content of the local.properties file, which specifies the paths to the Android SDK and NDK directories. These paths are essential for building and publishing the Expo library.

LANGUAGE: properties
CODE:
ndk.dir=/Users/{username}/Library/Android/sdk/ndk-bundle
sdk.dir=/Users/{username}/Library/Android/sdk

----------------------------------------

TITLE: Home Layout Configuration in Expo Router
DESCRIPTION: Example showing how to configure tab navigation layout in Expo Router

LANGUAGE: javascript
CODE:
import { Tabs } from 'expo-router';

export default function HomeLayout() {
  return <Tabs />;
}

----------------------------------------

TITLE: Creating Android Development Build for Expo Project
DESCRIPTION: Command to create a development build for Android platform using EAS. This generates the development version of the app that can be installed on an emulator.

LANGUAGE: bash
CODE:
$ eas build --platform android --profile development

----------------------------------------

TITLE: Skip Dependency Updates in Prebuild
DESCRIPTION: Demonstrates how to skip updating specific dependencies during prebuild.

LANGUAGE: bash
CODE:
$ npx expo prebuild --skip-dependency-update react-native,react

----------------------------------------

TITLE: Configuring Web Output in Expo App Config
DESCRIPTION: Sets the web output target to 'server' and bundler to 'metro' in the app.json configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "web": {
      "output": "server",
      "bundler": "metro"
    }
  }
}

----------------------------------------

TITLE: Viewing All Channels with EAS CLI
DESCRIPTION: This command lists all channels in the EAS project.

LANGUAGE: bash
CODE:
$ eas channel:list

----------------------------------------

TITLE: Configuring Android Environment Variables on macOS
DESCRIPTION: Commands to set up ANDROID_HOME and related PATH environment variables in shell configuration files on macOS

LANGUAGE: bash
CODE:
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools

----------------------------------------

TITLE: Changelog Version History in Markdown
DESCRIPTION: Markdown formatted changelog detailing version history from 1.1.4 to 1.12.8, including breaking changes, new features, bug fixes and other improvements.

LANGUAGE: markdown
CODE:
# Changelog

## Unpublished

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

## 1.12.8 — 2025-03-13

### 💡 Others

- Drop `fast-glob` in favor of `glob`. ([#35082](https://github.com/expo/expo/pull/35082) by [@kitten](https://github.com/kitten))
- Output formatting improvements ([#35483](https://github.com/expo/expo/pull/35483) by [@keith-kurak](https://github.com/keith-kurak))

----------------------------------------

TITLE: Configuring Expo Sensors Plugin in app.json
DESCRIPTION: Configuration example showing how to set up expo-sensors plugin in app.json, specifically for configuring motion permission messages on iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion"
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Displaying Deprecation Notice in Markdown
DESCRIPTION: This markdown snippet shows a deprecation warning for the react-native-unimodules package and provides a link to a migration guide for transitioning to the expo package.

LANGUAGE: markdown
CODE:
# react-native-unimodules

## ⚠️ Deprecated

This package is now deprecated in favor of `expo`. If you're looking for how to migrate your apps, you can follow this guide: https://expo.fyi/expo-modules-migration

----------------------------------------

TITLE: Clearing Expo Go app data using ADB
DESCRIPTION: Use ADB to clear the data of the Expo Go app before testing the new version.

LANGUAGE: shell
CODE:
adb shell pm clear host.exp.exponent

----------------------------------------

TITLE: Installing expo-network-addons using npx
DESCRIPTION: This command installs the expo-network-addons package in an Expo project using npx. It's the recommended way to add this package to your project.

LANGUAGE: bash
CODE:
npx expo install expo-network-addons

----------------------------------------

TITLE: Implementing Expo Modules Gradle Plugin for Android
DESCRIPTION: Implements the Expo modules Gradle plugin for Android in the expo-asset module.

LANGUAGE: Markdown
CODE:
- [Android] Started using expo modules gradle plugin. ([#34176](https://github.com/expo/expo/pull/34176) by [@lukmccall](https://github.com/lukmccall))

----------------------------------------

TITLE: Clearing Caches for React Native CLI with Yarn
DESCRIPTION: A series of commands to clear node_modules, Yarn cache, Watchman cache, and Metro bundler cache for a React Native project using Yarn. It also includes reinstalling dependencies and restarting the React Native development server with a cleared cache.

LANGUAGE: bash
CODE:
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ yarn start -- --reset-cache

----------------------------------------

TITLE: Rendering Ionicons Vector Icon in React Native
DESCRIPTION: Demonstrates how to use the @expo/vector-icons library to render an Ionicons checkmark icon in a React Native component.

LANGUAGE: jsx
CODE:
import { View, StyleSheet } from 'react-native';
import Ionicons from '@expo/vector-icons/Ionicons';

export default function App() {
  return (
    <View style={styles.container}>
      <Ionicons name="checkmark-circle" size={32} color="green" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: URL Rewriting in Root Layout with Expo Router
DESCRIPTION: Implementation of URL rewriting logic in the root layout component using usePathname hook for access control and navigation management.

LANGUAGE: tsx
CODE:
import { Slot, Redirect } from 'expo-router';

export default function RootLayout() {
  const pathname = usePathname();

  if (pathname && !isUserAllowed(pathname)) {
    return <Redirect href="/home" />;
  }

  return <Slot />;
}

----------------------------------------

TITLE: Globally defining crypto in JavaScript
DESCRIPTION: Example of how to globally define the crypto object using the polyfillWebCrypto function. This approach is useful when code expects crypto to be globally available.

LANGUAGE: javascript
CODE:
import { polyfillWebCrypto } from 'expo-standard-web-crypto';

polyfillWebCrypto();
// crypto is now globally defined

----------------------------------------

TITLE: App.json Base URL Configuration
DESCRIPTION: Experimental configuration for setting base URL in app.json for subpath hosting.

LANGUAGE: json
CODE:
{
  "expo": {
    "experiments": {
      "baseUrl": "/evanbacon/my-website"
    }
  }
}

----------------------------------------

TITLE: Configuring Apple Sign-in in Expo Config
DESCRIPTION: JSON configuration to enable Apple Sign-in capability in an Expo app's app.json

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "usesAppleSignIn": true
    }
  }
}

----------------------------------------

TITLE: Debugging Fingerprint Generation Differences
DESCRIPTION: Commands and tools for identifying and resolving fingerprint discrepancies between local and CI/CD environments.

LANGUAGE: shell
CODE:
npx expo-updates fingerprint:generate --debug

----------------------------------------

TITLE: Constructing EAS Update URL for Development Build Preview
DESCRIPTION: This code snippet demonstrates the structure of a URL used to open an EAS Update in a development build. It includes the project slug, development client identifier, updates URL, and group ID.

LANGUAGE: bash
CODE:
[slug]://expo-development-client/?url=[https://u.expo.dev/project-id]/group/[group-id]

# Example
my-app://expo-development-client/?url=https://u.expo.dev/675cb1f0-fa3c-11e8-ac99-6374d9643cb2/group/47839bf2-9e01-467b-9378-4a978604ab11

----------------------------------------

TITLE: EAS Build Profile Configuration
DESCRIPTION: Basic EAS build configuration with development and production profiles.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "developmentClient": true
    },
    "production": {}
  }
}

----------------------------------------

TITLE: Installing expo-device Package
DESCRIPTION: Command to install the expo-device package in a bare React Native project using npx expo install.

LANGUAGE: bash
CODE:
npx expo install expo-device

----------------------------------------

TITLE: Configuring Expo Camera Plugin in app.json
DESCRIPTION: Configuration object for expo-camera plugin specifying camera and microphone permissions for iOS and Android platforms.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Platform-Specific Prebuild Command
DESCRIPTION: Shows how to run prebuild for a specific platform (iOS in this example).

LANGUAGE: bash
CODE:
$ npx expo prebuild --platform ios

----------------------------------------

TITLE: Installing Expo Maps Package via NPM
DESCRIPTION: Command to install the expo-mesh-gradient package using npx expo. Note that installation is not currently recommended as the package is in alpha stage.

LANGUAGE: shell
CODE:
npx expo install expo-mesh-gradient

----------------------------------------

TITLE: Formatting Full Name in Apple Authentication
DESCRIPTION: New method added to format tokenized full name object into a local-aware string representation.

LANGUAGE: JavaScript
CODE:
formatFullName(tokenizedFullNameObject)

----------------------------------------

TITLE: Configuring Code Signing in iOS Expo.plist
DESCRIPTION: XML configuration for iOS native projects to enable code signing. Adds certificate and metadata entries to the Expo.plist file.

LANGUAGE: xml
CODE:
    <key>EXUpdatesCodeSigningCertificate</key>
    <string>-----BEGIN CERTIFICATE-----&#xD;
(insert XML-escaped certificate, it should look something like this)&#xD;
(spanning multiple lines with \r escaped but \n not escaped)&#xD;
+-----END CERTIFICATE-----&#xD;
</string>
    <key>EXUpdatesCodeSigningMetadata</key>
    <dict>
      <key>keyid</key>
      <string>main</string>
      <key>alg</key>
      <string>rsa-v1_5-sha256</string>
    </dict>

----------------------------------------

TITLE: Pulling EAS Environment Variables for Local Development
DESCRIPTION: This command retrieves environment variables from EAS for local development, allowing you to sync with development, preview, or production environments.

LANGUAGE: bash
CODE:
eas env:pull

----------------------------------------

TITLE: Fixing Swift 6 Compatibility Warnings on iOS
DESCRIPTION: This update addresses warnings in the iOS codebase that would become errors in Swift 6, ensuring future compatibility.

LANGUAGE: Swift
CODE:
// Fix warnings which will become errors in Swift 6

----------------------------------------

TITLE: Creating a Swift native module
DESCRIPTION: Create a Swift file for the native module conforming to the Module protocol from ExpoModulesCore.

LANGUAGE: swift
CODE:
import ExpoModulesCore

public class MyModule: Module {
  public func definition() -> ModuleDefinition {
    // Definition components go here
  }
}

----------------------------------------

TITLE: Creating iOS Production Build
DESCRIPTION: Command to create an iOS production build using the default production profile in EAS Build system.

LANGUAGE: bash
CODE:
$ eas build --platform ios

----------------------------------------

TITLE: Search Command JSON Output Example
DESCRIPTION: Example output from the expo-modules-autolinking search command showing the structure of found modules including path, version, and configuration details.

LANGUAGE: json
CODE:
{
  "expo-random": {
    "path": "/absolute/path/to/node_modules/expo-random",
    "version": "13.0.0",
    "config": {
      "platforms": ["ios", "android"],
      "ios": { "modules": ["RandomModule"] },
      "android": { "modules": ["expo.modules.random.RandomModule"] }
    },
    "duplicates": []
  }
}

----------------------------------------

TITLE: Configuring Babel with SWC for Next.js and Expo
DESCRIPTION: Basic Babel configuration for Expo projects using SWC compiler in Next.js. This setup is recommended for optimal performance.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};

----------------------------------------

TITLE: Logging into Expo Account
DESCRIPTION: Command to authenticate with Expo services using the EAS CLI.

LANGUAGE: bash
CODE:
$ eas login

----------------------------------------

TITLE: Rendering BoxLink Components for Expo and EAS Tutorials in JSX
DESCRIPTION: This code snippet renders two BoxLink components, one for the Expo Tutorial and another for the EAS Tutorial. Each BoxLink includes a title, description, link, and icon.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Expo Tutorial"
  description="If you are new to Expo, we recommend starting with this tutorial. It provides a step-by-step guide on how to build an Expo app that runs on Android, iOS and web."
  href="/tutorial/introduction/"
  Icon={GraduationHat02DuotoneIcon}
/>

<BoxLink
  title="EAS Tutorial"
  description="If you are looking to learn about building your Android and iOS apps using Expo Application Services (EAS), this tutorial covers the EAS Build, Update, and Submit workflows."
  href="/tutorial/eas/introduction/"
  Icon={GraduationHat02DuotoneIcon}
/>

----------------------------------------

TITLE: Accessing Constants.manifest
DESCRIPTION: Constants.manifest provides access to the app configuration. It is now populated in bare apps as well.

LANGUAGE: JavaScript
CODE:
import Constants from 'expo-constants';

const manifest = Constants.manifest;

----------------------------------------

TITLE: Updating Entry File Registration
DESCRIPTION: Modification to replace React Native's AppRegistry with Expo's registerRootComponent for app initialization

LANGUAGE: diff
CODE:
+ import {registerRootComponent} from 'expo';

- import {AppRegistry} from 'react-native';
import App from './App';
- import {name as appName} from './app.json';

- AppRegistry.registerComponent(appName, () => App);
+ registerRootComponent(App);

----------------------------------------

TITLE: Event Handling with useEventListener Hook
DESCRIPTION: Implementation of video player event handling using the useEventListener hook for automatic event cleanup.

LANGUAGE: tsx
CODE:
import { useEventListener } from 'expo';

useEventListener(player, 'statusChange', ({ status, error }) => {
  setPlayerStatus(status);
  setPlayerError(error);
  console.log('Player status changed: ', status);
});

----------------------------------------

TITLE: Using KeepAwake Event Listener in JavaScript
DESCRIPTION: Example of using the new addListener method added in version 12.0.0 to observe KeepAwake state changes on web.

LANGUAGE: javascript
CODE:
import * as KeepAwake from 'expo-keep-awake';

const subscription = KeepAwake.addListener('onChange', (event) => {
  console.log('KeepAwake state changed:', event.isActive);
});

// Remove listener when no longer needed
subscription.remove();

----------------------------------------

TITLE: Config Setting for Silent Launch
DESCRIPTION: JSON configuration for enabling silent launch mode in development client to prevent update notification bar from showing on splash screen

LANGUAGE: json
CODE:
{ "developmentClient": { "silentLaunch": true } }

----------------------------------------

TITLE: Configuring ESLint in .eslintrc.js
DESCRIPTION: Example of ESLint configuration in .eslintrc.js file, demonstrating the basic setup.

LANGUAGE: javascript
CODE:
module.exports = {
  extends: 'universe',
};

----------------------------------------

TITLE: Deep Linking to Expo Development Build Update
DESCRIPTION: Demonstrates the format for creating a deep link URL to load a specific update in a compatible development build. This includes the app's URL scheme and the encoded manifest URL.

LANGUAGE: text
CODE:
exp+app-slug://expo-development-client/?url=https%3A%2F%2Fu.expo.dev%2F767ADF57-B487-4D8F-9522-85549C39F43F%2F%3Fchannel-name%3Dmain

----------------------------------------

TITLE: Accessing Configuration in Expo App
DESCRIPTION: Demonstrates how to access configuration values, including custom 'extra' fields, in an Expo app using expo-constants.

LANGUAGE: javascript
CODE:
import Constants from 'expo-constants';

Constants.expoConfig.extra.fact === 'kittens are cool';

----------------------------------------

TITLE: Updating expo-updates dependency in package.json
DESCRIPTION: Example of updating the expo-updates version in package.json

LANGUAGE: json
CODE:
{
  "dependencies": {
    "expo-updates": "~0.18.0"
  }
}

----------------------------------------

TITLE: Implementing Package for Application Lifecycle Listeners in Kotlin
DESCRIPTION: Create a custom Package class that implements createApplicationLifecycleListeners to hook into Application lifecycle events.

LANGUAGE: kotlin
CODE:
// android/src/main/java/expo/modules/mylib/MyLibPackage.kt
package expo.modules.mylib

import android.content.Context
import expo.modules.core.interfaces.ApplicationLifecycleListener
import expo.modules.core.interfaces.Package

class MyLibPackage : Package {
  override fun createApplicationLifecycleListeners(context: Context): List<ApplicationLifecycleListener> {
    return listOf(MyLibApplicationLifecycleListener())
  }
}

----------------------------------------

TITLE: Adding a Development Script in package.json for Expo
DESCRIPTION: This code adds a 'dev' script to the package.json file, which sets the APP_VARIANT environment variable when starting the Expo development server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "APP_VARIANT=development npx expo start"
  }
}

----------------------------------------

TITLE: Updating Test Import Paths
DESCRIPTION: Shows the migration of test utility imports from local test directory to jest-expo package.

LANGUAGE: diff
CODE:
- import { mockPlatformWeb } from '../../test/mocking';

+ import { mockPlatformWeb } from 'jest-expo';

----------------------------------------

TITLE: Creating New Expo App
DESCRIPTION: Command to create a new Expo application project using create-expo-app.

LANGUAGE: bash
CODE:
$ npx create-expo-app@latest my-app

----------------------------------------

TITLE: Implementing URL Scheme for Stripe Redirects
DESCRIPTION: JavaScript code snippet demonstrating how to properly configure URL schemes for handling Stripe payment redirects in both Expo Go and production environments.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),

----------------------------------------

TITLE: Accessing Constants.executionEnvironment
DESCRIPTION: Constants.executionEnvironment can be used to distinguish between different app execution environments.

LANGUAGE: JavaScript
CODE:
import Constants from 'expo-constants';

const environment = Constants.executionEnvironment;

----------------------------------------

TITLE: Using Environment Variables in React Native Components
DESCRIPTION: Demonstrates how to access environment variables in a React Native component using process.env. The example shows fetching data using an API URL defined in environment variables.

LANGUAGE: tsx
CODE:
import { Button } from 'react-native';

function Post() {
  const apiUrl = process.env.EXPO_PUBLIC_API_URL;

  async function onPress() {
    await fetch(apiUrl, { ... })
  }

  return <Button onPress={onPress} title="Post" />;
}

----------------------------------------

TITLE: Event Handling with useEvent Hook
DESCRIPTION: Example of using the useEvent hook to handle video player state changes with automatic cleanup.

LANGUAGE: tsx
CODE:
import { useEvent } from 'expo';

const { status, error } = useEvent(player, 'statusChange', { status: player.status });

----------------------------------------

TITLE: Running Expotools Development Watch Mode
DESCRIPTION: Watches for code changes and automatically rebuilds Expotools using Yarn.

LANGUAGE: shell
CODE:
yarn watch

----------------------------------------

TITLE: Creating Test Project Command
DESCRIPTION: Command to create a test project for development client end-to-end testing

LANGUAGE: bash
CODE:
yarn expo-test-runner create-project -a dev-client-e2e --path <path where the project will be created>

----------------------------------------

TITLE: Google Maps API Configuration in app.json
DESCRIPTION: Configuration setup for Google Maps API key in app.json for both Android and iOS platforms. Shows how to reference an API key from environment variables.

LANGUAGE: json
CODE:
{
    "android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY",
        },
      },
    }
}

LANGUAGE: json
CODE:
{
    "ios": {
      "config": {
        "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY",
        },
      }
}

----------------------------------------

TITLE: Using ADB Logcat for Android Crash Reports
DESCRIPTION: This command uses Android Debug Bridge (adb) to view streaming logs, which can help identify crash reports for Android devices.

LANGUAGE: bash
CODE:
$ adb logcat

----------------------------------------

TITLE: Creating Themed Components with Variants
DESCRIPTION: Shows how to create a themed Text component with size and color variants using create-primitives utility.

LANGUAGE: tsx
CODE:
import { Text } from 'react-native';
import { create } from './create-primitives';

const Heading = create(Text, {
  base: {
    fontFamily: 'Helvetica',
  },

  variants: {
    size: {
      large: {
        fontSize: 28,
        lineHeight: 34,
      },
      medium: {
        fontSize: 22,
        lineHeight: 28,
      },
      small: {
        fontSize: 18,
        lineHeight: 22,
      },
    },
    color: {
      success: {
        color: 'green',
      },
      danger: {
        color: 'red',
      },
    },
  },
});

----------------------------------------

TITLE: Installing ASN1Decoder with Carthage
DESCRIPTION: Configuration for installing ASN1Decoder via Carthage package manager.

LANGUAGE: text
CODE:
github "filom/ASN1Decoder"

----------------------------------------

TITLE: Updating Podspec for Multi-platform Support
DESCRIPTION: Changes to the module's podspec file to declare support for iOS, tvOS, and macOS platforms with their minimum version requirements.

LANGUAGE: diff
CODE:
- s.platform       = :ios, '13.4'
+ s.platforms = {
+   :ios => '13.4',
+   :tvos => '13.4',
+   :osx => '10.15'
+ }

----------------------------------------

TITLE: Installing Development Dependencies
DESCRIPTION: Terminal commands for installing required development dependencies including expo-dev-client and EAS CLI.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client
$ npm install -g eas-cli

----------------------------------------

TITLE: Configuring iOS Podfile for monorepo structure
DESCRIPTION: Modify the iOS Podfile to dynamically resolve the react-native package location in a monorepo setup.

LANGUAGE: ruby
CODE:
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

----------------------------------------

TITLE: Implementing Theme Change Events on Android
DESCRIPTION: Adds functionality to emit theme change events on Android.

LANGUAGE: kotlin
CODE:
package expo.modules.settings

import android.content.Context
import android.content.SharedPreferences
import androidx.core.os.bundleOf
import expo.modules.kotlin.modules.Module
import expo.modules.kotlin.modules.ModuleDefinition

class ExpoSettingsModule : Module() {
  override fun definition() = ModuleDefinition {
    Name("ExpoSettings")

    Events("onChangeTheme")

    Function("setTheme") { theme: String ->
      getPreferences().edit().putString("theme", theme).commit()
      this@ExpoSettingsModule.sendEvent("onChangeTheme", bundleOf("theme" to theme))
    }

    Function("getTheme") {
      return@Function getPreferences().getString("theme", "system")
    }
  }

  private val context
  get() = requireNotNull(appContext.reactContext)

  private fun getPreferences(): SharedPreferences {
    return context.getSharedPreferences(context.packageName + ".settings", Context.MODE_PRIVATE)
  }
}

----------------------------------------

TITLE: Creating Custom Build Config in YAML
DESCRIPTION: This snippet shows how to create a basic custom build config in YAML format. It defines a build named 'Hello World!' with a single step that echoes a message.

LANGUAGE: yaml
CODE:
build:
  name: Hello World!
  steps:
    - run: echo "Hello, world!"

----------------------------------------

TITLE: Using ViewShot Component in React Native
DESCRIPTION: Examples of using the ViewShot component for capturing views in React Native, including manual capture, automatic capture on mount, and waiting for image load.

LANGUAGE: javascript
CODE:
import ViewShot from "react-native-view-shot";

function ExampleCaptureOnMountManually {
  const ref = useRef();

  useEffect(() => {
    // on mount
    ref.current.capture().then(uri => {
      console.log("do something with ", uri);
    });
  }, []);

  return (
    <ViewShot ref={ref} options={{ fileName: "Your-File-Name", format: "jpg", quality: 0.9 }}>
      <Text>...Something to rasterize...</Text>
    </ViewShot>
  );
}

// alternative
function ExampleCaptureOnMountSimpler {
  const ref = useRef();

  const onCapture = useCallback(uri => {
    console.log("do something with ", uri);
  }, []);

  return (
    <ViewShot onCapture={onCapture} captureMode="mount">
      <Text>...Something to rasterize...</Text>
    </ViewShot>
  );
}

// waiting an image

function ExampleWaitingCapture {
  const ref = useRef();

  const onImageLoad = useCallback(() => {
    ref.current.capture().then(uri => {
      console.log("do something with ", uri);
    })
  }, []);

  return (
    <ViewShot ref={ref}>
      <Text>...Something to rasterize...</Text>
      <Image ... onLoad={onImageLoad} />
    </ViewShot>
  );
}

// capture ScrollView content
// NB: you may need to go the "imperative way" to use snapshotContentContainer with the scrollview ref instead
function ExampleCaptureOnMountSimpler {
  const ref = useRef();

  const onCapture = useCallback(uri => {
    console.log("do something with ", uri);
  }, []);

  return (
    <ScrollView>
      <ViewShot onCapture={onCapture} captureMode="mount">
        <Text>...The Scroll View Content Goes Here...</Text>
      </ViewShot>
    </ScrollView>
  );
}

----------------------------------------

TITLE: Rendering BoxLink Components in JSX for Expo Documentation
DESCRIPTION: This code snippet demonstrates the use of the BoxLink component to create clickable links for various Expo documentation guides. It imports icons and the BoxLink component, then renders three BoxLink elements with different titles, descriptions, and links.

LANGUAGE: jsx
CODE:
import { BookOpen02Icon } from '@expo/styleguide-icons/outline/BookOpen02Icon';
import { Settings02Icon } from '@expo/styleguide-icons/outline/Settings02Icon';

import { BoxLink } from '~/ui/components/BoxLink';

<BoxLink
  title="Use TypeScript"
  Icon={Settings02Icon}
  description="An in-depth guide on configuring an Expo project with TypeScript or migrating an existing JavaScript project."
  href="/guides/typescript/"
/>

<BoxLink
  title="Icons"
  Icon={BookOpen02Icon}
  description="Learn how to use various types of icons in your Expo app, including vector icons, custom icon fonts, icon images, and icon buttons."
  href="/guides/icons/"
/>

<BoxLink
  title="ESLint and Prettier"
  Icon={BookOpen02Icon}
  description="A guide on configuring ESLint and Prettier to format Expo projects."
  href="/guides/using-eslint/"
/>

----------------------------------------

TITLE: VideoThumbnails Import Statement
DESCRIPTION: Basic import statement for the VideoThumbnails module from expo-video-thumbnails package.

LANGUAGE: js
CODE:
import * as VideoThumbnails from 'expo-video-thumbnails';

----------------------------------------

TITLE: iOS AppDelegate Implementation
DESCRIPTION: Swift implementation of AppDelegate for EAS Update integration, including bundle URL handling and initialization setup.

LANGUAGE: swift
CODE:
import ExpoModulesCore
import EXUpdates
import React
import UIKit

@UIApplicationMain
class AppDelegate: EXAppDelegateWrapper {
  let bundledUrl = Bundle.main.url(forResource: "main", withExtension: "jsbundle")
  var launchOptions: [UIApplication.LaunchOptionsKey: Any]?

  public static func shared() -> AppDelegate {
    guard let delegate = UIApplication.shared.delegate as? AppDelegate else {
      fatalError("Could not get app delegate")
    }
    return delegate
  }

  var updatesController: (any InternalAppControllerInterface)?

  override func bundleURL() -> URL? {
    if let updatesUrl = updatesController?.launchAssetUrl() {
      return updatesUrl
    }
    return bundledUrl
  }

  private func initializeReactNativeAndUpdates(_ launchOptions: [UIApplication.LaunchOptionsKey: Any]?) {
    self.launchOptions = launchOptions
    self.moduleName = "App"
    self.initialProps = [:]
    self.rootViewFactory = createRCTRootViewFactory()
    AppController.initializeWithoutStarting()
  }

  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
  ) -> Bool {

    initializeReactNativeAndUpdates(launchOptions)

    return true
  }
}

----------------------------------------

TITLE: Running Expotools Help Command
DESCRIPTION: Displays all available Expotools commands using the CLI shortcuts.

LANGUAGE: shell
CODE:
et --help

----------------------------------------

TITLE: Installing new Expo Go APK using ADB
DESCRIPTION: Install the newly built Expo Go APK on a test device using ADB.

LANGUAGE: shell
CODE:
adb install {downloaded-apk}

----------------------------------------

TITLE: Importing APIInstallSection Component in Markdown
DESCRIPTION: This code snippet imports the APIInstallSection component from a local file path, which is likely used to render installation instructions for the react-native-gesture-handler library.

LANGUAGE: markdown
CODE:
import { APIInstallSection } from '~/components/plugins/InstallSection';

----------------------------------------

TITLE: Share Environment Variables Between Steps
DESCRIPTION: Example demonstrating how to share environment variables between build steps using set-env.

LANGUAGE: yaml
CODE:
build:
  name: Shared environment variable example
  steps:
    - run:
        name: Set environment variables
        command: |
          set -x
          set-env ENV_TEST_SET_ENV "present-in-following-steps"

----------------------------------------

TITLE: Updating Contact Favorite Status on Android
DESCRIPTION: Added ability to change isFavorite property of contacts on Android using updateContactAsync.

LANGUAGE: JavaScript
CODE:
updateContactAsync(contactId, { isFavorite: true })

----------------------------------------

TITLE: Updating Expo Module Config for Apple Platforms
DESCRIPTION: Configuration changes in expo-module.config.json to support universal Apple platform targeting instead of iOS-specific targeting.

LANGUAGE: diff
CODE:
{
-   "platforms": ["ios"],
-   "ios": {
-     "modules": ["MyModule"]
-   }
+   "platforms": ["apple"],
+   "apple": {
+     "modules": ["MyModule"]
+   }
}

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: This command starts the Expo development server. After running this command, pressing 'a' in the terminal will open the project on an Android device or emulator.

LANGUAGE: bash
CODE:
$ npx expo start

----------------------------------------

TITLE: Configuring NPM Scripts for Expo Module
DESCRIPTION: Defines common npm scripts for building, testing, and managing an Expo module

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "expo-module build",
    "clean": "expo-module clean",
    "lint": "expo-module lint",
    "test": "expo-module test",
    "postinstall": "expo-module postinstall",
    "prepare": "expo-module prepare",
    "prepublishOnly": "expo-module prepublishOnly",
    "expo-module": "expo-module"
  }
}

----------------------------------------

TITLE: BoxLink Component Usage
DESCRIPTION: Examples of using the BoxLink component to create navigation links for different sections of the Expo documentation.

LANGUAGE: jsx
CODE:
<BoxLink
  title="Expo SDK"
  description="Comprehensive suite of well-tested React Native modules that run on Android, iOS, and web."
  href="/versions/latest/"
  Icon={DocsLogo}
/>

----------------------------------------

TITLE: Presenting Basic Notification Example
DESCRIPTION: Example showing how to present a simple notification to the user with basic configuration.

LANGUAGE: typescript
CODE:
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

Notifications.scheduleNotificationAsync({
  content: {
    title: 'Look at that notification',
    body: "I'm so proud of myself!",
  },
  trigger: null,
});

----------------------------------------

TITLE: Implementing ExpoConfig Type in TypeScript
DESCRIPTION: Example showing how to use the ExpoConfig type from @expo/config-types to define a properly typed Expo configuration object. The code demonstrates basic configuration with app name and slug properties.

LANGUAGE: typescript
CODE:
import { ExpoConfig } from '@expo/config-types';

export default (): ExpoConfig => {
  return {
    name: 'My App',
    slug: 'my-app',
  };
};

----------------------------------------

TITLE: Rendering Router with Fixture Path in TypeScript
DESCRIPTION: Example of using renderRouter with a directory path to mock an existing fixture.

LANGUAGE: tsx
CODE:
it('my-test', async () => {
  const MockComponent = jest.fn(() => <View />);
  renderRouter('./my-test-fixture');
});

----------------------------------------

TITLE: Importing Safe Area Context Components
DESCRIPTION: Basic imports for the main components and hooks from react-native-safe-area-context

LANGUAGE: javascript
CODE:
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

----------------------------------------

TITLE: Running Platform-Specific Build Commands
DESCRIPTION: Commands to run iOS and Android builds

LANGUAGE: bash
CODE:
npx expo run:ios
npx expo run:android

----------------------------------------

TITLE: Writing TSDoc Comments for API Documentation
DESCRIPTION: Illustrates the proper format for writing TSDoc comments for API documentation, including parameter descriptions and return values.

LANGUAGE: typescript
CODE:
/**
 * Captures a still photo with the camera's current settings and given configuration options. The
 * image will be encoded using the specified format. If the format is not supported by the device,
 * this method throws an error.
 *
 * Upon capturing the photo, it is written to the device's temporary file storage. The file will be
 * accessible right after this method completes but may be cleared by the device OS at an arbitrary
 * time afterward; do not assume the file is permanent.
 *
 * @param options configuration options that specify the file format, image quality, and more
 * @returns a promise fulfilled with information about the captured photo, including its location on
 *   disk
 */

----------------------------------------

TITLE: Importing ContentSpotlight and Step Components in JavaScript
DESCRIPTION: This code snippet imports two custom React components, ContentSpotlight and Step, likely used for structuring and styling the tutorial content.

LANGUAGE: JavaScript
CODE:
import { ContentSpotlight } from '~/ui/components/ContentSpotlight';
import { Step } from '~/ui/components/Step';

----------------------------------------

TITLE: Gitignore Configuration for Credentials
DESCRIPTION: Example .gitignore entries to prevent accidental committing of sensitive credential files to version control.

LANGUAGE: sh
CODE:
android/keystores/release.keystore
ios/certs/*

----------------------------------------

TITLE: Installing expo-constants in bare React Native projects
DESCRIPTION: Command to install the expo-constants package using npx and expo CLI. This is used for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-constants

----------------------------------------

TITLE: Using Expo Router's Link for Web Functionality
DESCRIPTION: This example shows how to use the Link component from Expo Router to provide additional link functionality on the web, such as right-click to copy or hover to preview.

LANGUAGE: typescript
CODE:
import { Link } from 'expo-router';

export default function Home() {
  return <Link href="https://expo.dev">Go to Expo</Link>;
}

----------------------------------------

TITLE: Implementing HTML Root with Smart Banner
DESCRIPTION: React component for the root HTML template that includes the Apple Smart Banner meta tag.

LANGUAGE: tsx
CODE:
export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="apple-itunes-app" content="app-id=<ITUNES_ID>" />
        {/* Other head elements... */}
      </head>
      <body>{children}</body>
    </html>
  );
}

----------------------------------------

TITLE: Basic i18n Setup in Expo
DESCRIPTION: Shows basic configuration of i18n-js for handling multiple languages with English and Japanese translations.

LANGUAGE: typescript
CODE:
import { getLocales } from 'expo-localization';
import { I18n } from 'i18n-js';

// Set the key-value pairs for the different languages you want to support.
const i18n = new I18n({
  en: { welcome: 'Hello' },
  ja: { welcome: 'こんにちは' },
});

// Set the locale once at the beginning of your app.
i18n.locale = getLocales()[0].languageCode;

console.log(i18n.t('welcome'));

----------------------------------------

TITLE: Installing ESLint Configuration Dependencies
DESCRIPTION: Commands to install the required ESLint configuration packages and their dependencies using yarn.

LANGUAGE: shell
CODE:
yarn add --dev eslint-config-universe

LANGUAGE: shell
CODE:
yarn add --dev eslint@8 prettier

----------------------------------------

TITLE: Chaining Plugins with withPlugins
DESCRIPTION: Shows how to use the withPlugins function to chain multiple plugins together.

LANGUAGE: javascript
CODE:
import { withPlugins } from 'expo/config-plugins';

withPlugins(config, [
  [withBar, 'input 1'],
  [withFoo, 'input 2'],
  withDelta,
]);

----------------------------------------

TITLE: Basic HTTP Headers for Expo Push API
DESCRIPTION: Required HTTP headers for making requests to the Expo Push Service API endpoint

LANGUAGE: text
CODE:
host: exp.host
accept: application/json
accept-encoding: gzip, deflate
content-type: application/json

----------------------------------------

TITLE: Setting up Expo CLI Aliases in Zsh
DESCRIPTION: Instructions for setting up aliases in the .zshrc file to use the locally built Expo CLI and a debug version for development and testing.

LANGUAGE: zsh
CODE:
alias nexpo="/path/to/expo/packages/@expo/cli/build/bin/cli"
alias expo-inspect="node --inspect /path/to/expo/packages/@expo/cli/build/bin/cli"

----------------------------------------

TITLE: Rendering Router with Null Components in TypeScript
DESCRIPTION: Shows how to create an inline mock filesystem with null components using string array notation.

LANGUAGE: tsx
CODE:
import { renderRouter, screen } from 'expo-router/testing-library';

it('my-test', async () => {
  renderRouter(['index', 'directory/a', '(group)/b'], {
    initialUrl: '/directory/a',
  });

  expect(screen).toHavePathname('/directory/a');
});

----------------------------------------

TITLE: Importing NavigationBar Module in JavaScript
DESCRIPTION: This snippet shows how to import the NavigationBar module from the expo-navigation-bar package. This import is necessary to use the navigation bar APIs in an Expo project.

LANGUAGE: javascript
CODE:
import * as NavigationBar from 'expo-navigation-bar';

----------------------------------------

TITLE: Starting Expo Development Server
DESCRIPTION: Command to start the Expo development server for testing

LANGUAGE: bash
CODE:
npx expo start

----------------------------------------

TITLE: Importing RawH3 Component in Expo Project
DESCRIPTION: This snippet shows how to import the RawH3 component from a local UI components directory. It's likely used for rendering headings in the Expo project.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Logging into EAS CLI
DESCRIPTION: Command to log into the EAS CLI using your Expo account credentials. This is required before performing any EAS-related operations.

LANGUAGE: bash
CODE:
$ eas login

----------------------------------------

TITLE: Managing Credentials Command
DESCRIPTION: Command to view, modify, or remove configured app signing credentials through the EAS CLI interface.

LANGUAGE: bash
CODE:
eas credentials

----------------------------------------

TITLE: Installing iOS Native Dependencies
DESCRIPTION: Command to install native code dependencies for iOS using pod-install

LANGUAGE: bash
CODE:
$ npx pod-install

----------------------------------------

TITLE: Gitignore Configuration for Environment Files
DESCRIPTION: Example of .gitignore configuration to exclude local environment files from version control.

LANGUAGE: bash
CODE:
.env*.local

----------------------------------------

TITLE: Configuring Base URL for GitHub Pages Deployment
DESCRIPTION: Sets the experimental baseUrl property in app.json for deploying to GitHub Pages with a repository-specific subdomain.

LANGUAGE: json
CODE:
{
  "expo": {
    "experiments": {
      "baseUrl": "/expo-gh-pages"
    }
  }
}

----------------------------------------

TITLE: Configuring Apple App Store Advisory Settings in EAS Metadata
DESCRIPTION: Example configuration showing the complete advisory settings with least restrictive answers for App Store age ratings and content warnings.

LANGUAGE: json
CODE:
{
  "configVersion": 0,
  "apple": {
    "advisory": {
      "alcoholTobaccoOrDrugUseOrReferences": "NONE",
      "contests": "NONE",
      "gamblingSimulated": "NONE",
      "horrorOrFearThemes": "NONE",
      "matureOrSuggestiveThemes": "NONE",
      "medicalOrTreatmentInformation": "NONE",
      "profanityOrCrudeHumor": "NONE",
      "sexualContentGraphicAndNudity": "NONE",
      "sexualContentOrNudity": "NONE",
      "violenceCartoonOrFantasy": "NONE",
      "violenceRealistic": "NONE",
      "violenceRealisticProlongedGraphicOrSadistic": "NONE",
      "gambling": false,
      "unrestrictedWebAccess": false,
      "kidsAgeBand": null,
      "ageRatingOverride": "NONE",
      "koreaAgeRatingOverride": "NONE"
    }
  }
}

----------------------------------------

TITLE: Creating a Prefixed Name Plugin
DESCRIPTION: Shows how to create a plugin that modifies the app name by adding a prefix.

LANGUAGE: javascript
CODE:
module.exports = function withPrefixedName(config, prefix) {
  config.name = prefix + '-' + config.name;
  return config;
};

----------------------------------------

TITLE: Configuring iCloud Entitlements for iOS
DESCRIPTION: Manual configuration of iCloud entitlements in the iOS app's .entitlements file. This includes settings for iCloud container identifiers, services, and key-value store.

LANGUAGE: xml
CODE:
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
    <string>CloudDocuments</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<array>
    <string>iCloud.dev.expo.my-app</string>
</array>
<key>com.apple.developer.ubiquity-kvstore-identifier</key>
<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>

----------------------------------------

TITLE: Starting Expo Test Suite
DESCRIPTION: Command to start the Expo project for running tests. This launches the test suite interface where specific tests can be selected.

LANGUAGE: bash
CODE:
expo start

----------------------------------------

TITLE: Installing expo-asset Package in React Native Project
DESCRIPTION: Command to install the expo-asset package using npx expo install in a bare React Native project. Requires the expo package to be installed and configured first.

LANGUAGE: bash
CODE:
npx expo install expo-asset

----------------------------------------

TITLE: Configuring Non-Exempt Encryption in app.json
DESCRIPTION: Example of how to set the usesNonExemptEncryption property to false in the app.json file to handle encryption compliance information for iOS apps.

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "config": {
        "usesNonExemptEncryption": false
      }
    }
  }
}

----------------------------------------

TITLE: Promoting Versions to Production in Expo CLI (Bash)
DESCRIPTION: This command promotes the changes made on the staging versions endpoint to the production environment.

LANGUAGE: bash
CODE:
et promote-versions-to-production

----------------------------------------

TITLE: Importing RawH3 Component in Expo Project
DESCRIPTION: This snippet demonstrates how to import a custom UI component named RawH3 from the project's components directory.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Logging into EAS CLI
DESCRIPTION: Command to log in to the EAS CLI using an Expo account.

LANGUAGE: bash
CODE:
$ eas login

----------------------------------------

TITLE: Configuring Asset Bundle Patterns in app.json for Expo Classic Builds
DESCRIPTION: This JSON snippet demonstrates how to specify asset bundle patterns in the app.json configuration file for Expo classic builds. It allows bundling assets into the standalone binary during the build process.

LANGUAGE: json
CODE:
"assetBundlePatterns": [
  "assets/images/*"
],

----------------------------------------

TITLE: Setting Dev Launcher URL Environment Variable for iOS
DESCRIPTION: This bash command exports the EX_DEV_LAUNCHER_URL environment variable to specify the local bundler URL for iOS development before running pod install.

LANGUAGE: bash
CODE:
export EX_DEV_LAUNCHER_URL=http://localhost:8090

----------------------------------------

TITLE: Creating EAS Webhook
DESCRIPTION: Command to create a new webhook for EAS notifications. It prompts for event type, webhook URL, and signing secret.

LANGUAGE: bash
CODE:
$ eas webhook:create

----------------------------------------

TITLE: Configuring Vercel for Expo Web Deployment
DESCRIPTION: Sets up Vercel configuration for building and serving an Expo web application, including build commands and URL rewriting.

LANGUAGE: json
CODE:
{
  "buildCommand": "expo export -p web",
  "outputDirectory": "dist",
  "devCommand": "expo",
  "cleanUrls": true,
  "framework": null,
  "rewrites": [
    {
      "source": "/:path*",
      "destination": "/"
    }
  ]
}

----------------------------------------

TITLE: Blocking Android Permissions in app.json
DESCRIPTION: Demonstrates how to block specific Android permissions using android.blockedPermissions to prevent certain permissions from being included in the app.

LANGUAGE: json
CODE:
{
  "android": {
    "blockedPermissions": ["android.permission.RECORD_AUDIO"]
  }
}

----------------------------------------

TITLE: Starting Expo Web Development Server
DESCRIPTION: Command for starting the Expo development server with web support.

LANGUAGE: bash
CODE:
$ npx expo start --web

----------------------------------------

TITLE: Exporting and Hosting Expo App Locally for Development
DESCRIPTION: This bash script demonstrates how to export an Expo app in development mode, find the local IP address, and start a simple HTTP server to host the app files locally for testing.

LANGUAGE: bash
CODE:
# Find your local IP address with `ipconfig getifaddr en0`
# export static app files
$ expo export --public-url http://`ipconfig getifaddr en0`:8000 --dev

# cd into your output directory
$ cd dist

# run a simple http server from output directory
$ python -m SimpleHTTPServer 8000

----------------------------------------

TITLE: Opening Specific Test Modules
DESCRIPTION: Command to open specific test modules in the Bare-Expo project. It requires the platform to be already running and deep links into the test-suite app to run the provided tests.

LANGUAGE: shell
CODE:
yarn open <ios | android> <...Modules>

----------------------------------------

TITLE: Creating a New Expo Project with Bare Minimum Template
DESCRIPTION: Demonstrates how to create a new Expo project using create-expo-app with the bare-minimum template.

LANGUAGE: bash
CODE:
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum

----------------------------------------

TITLE: Changelog Entry Format in Markdown
DESCRIPTION: Standard format for documenting changes in the Expo project, organized by version numbers and categories including breaking changes, new features, bug fixes, and other updates.

LANGUAGE: markdown
CODE:
## [Version Number] — [Date]

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

----------------------------------------

TITLE: Implementing Server-side React DOM Rendering
DESCRIPTION: Example of server-side rendering using renderToPipeableStream. Demonstrates how to handle server requests and stream React components with proper HTTP headers.

LANGUAGE: javascript
CODE:
import { renderToPipeableStream } from 'react-dom/server';

function App() {
  return <div>Hello World</div>;
}

function handleRequest(res) {
  // ... in your server handler ...
  const stream = renderToPipeableStream(<App />, {
    onShellReady() {
      res.statusCode = 200;
      res.setHeader('Content-type', 'text/html');
      stream.pipe(res);
    },
    // ...
  });
}

----------------------------------------

TITLE: Importing Header Component in TypeScript/React
DESCRIPTION: Imports the RawH3 component from the Text components directory for use in rendering a section header.

LANGUAGE: TypeScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Linking Libraries for expo-av Project
DESCRIPTION: Links the necessary libraries to the expo-av shared library, including version-specific handling for ReactAndroid.

LANGUAGE: CMake
CODE:
target_link_libraries(
        ${PACKAGE_NAME}
        ${LOG_LIB}
        fbjni::fbjni
        ReactAndroid::jsi
        android
)
if (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)
  target_link_libraries(
          ${PACKAGE_NAME}
          ReactAndroid::reactnative
  )
else()
  target_link_libraries(
          ${PACKAGE_NAME}
          ReactAndroid::reactnativejni
  )
endif()

----------------------------------------

TITLE: Sending Push Notification with Channel ID via Expo API
DESCRIPTION: Example payload for sending a push notification through Expo API service with channel ID specification for Android 8.0+ devices.

LANGUAGE: javascript
CODE:
[
  {
    to: 'ExponentPushToken[xxxxxx]',
    title: 'test',
    priority: 'high',
    body: 'test',
    sound: 'default', // android 7.0 , 6, 5 , 4
    channelId: 'chat-messages', // android 8.0 later
  },
]

----------------------------------------

TITLE: Bumping versions in Android Gradle build file
DESCRIPTION: Edit the '/android/app/build.gradle' file to update version and version code for the new Expo Go release.

LANGUAGE: gradle
CODE:
/android/app/build.gradle

----------------------------------------

TITLE: Building Native Projects
DESCRIPTION: Commands to build Android and iOS projects using Expo CLI

LANGUAGE: bash
CODE:
# Build your native Android project
$ npx expo run:android

# Build your native iOS project
$ npx expo run:ios

----------------------------------------

TITLE: Rendering Router with Inline File System in TypeScript
DESCRIPTION: Demonstrates how to use renderRouter with an inline mock filesystem, specifying component mocks for different routes and setting an initial URL.

LANGUAGE: tsx
CODE:
import { renderRouter, screen } from 'expo-router/testing-library';

it('my-test', async () => {
  const MockComponent = jest.fn(() => <View />);

  renderRouter(
    {
      index: MockComponent,
      'directory/a': MockComponent,
      '(group)/b': MockComponent,
    },
    {
      initialUrl: '/directory/a',
    }
  );

  expect(screen).toHavePathname('/directory/a');
});

----------------------------------------

TITLE: Local Build Commands
DESCRIPTION: Commands for running local release builds for Android and iOS platforms.

LANGUAGE: shell
CODE:
# Locally compile and run the Android app in release mode
$ npx expo run:android --variant release

# Locally compile and run the iOS app in release mode
$ npx expo run:ios --configuration Release

----------------------------------------

TITLE: Prettier Configuration Example
DESCRIPTION: Sample Prettier configuration showing common formatting options in .prettierrc file.

LANGUAGE: json
CODE:
{
  "printWidth": 100,
  "tabWidth": 2,
  "singleQuote": true,
  "bracketSameLine": true
}

----------------------------------------

TITLE: Basic WebView Implementation with External URL
DESCRIPTION: Demonstrates how to create a basic WebView component that loads an external website (expo.dev). Uses expo-constants for proper status bar margin handling and includes basic container styling.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Installing React DOM Dependencies
DESCRIPTION: Command to install both react and react-dom packages using npm package manager

LANGUAGE: sh
CODE:
npm install react react-dom

----------------------------------------

TITLE: Rendering RawH3 Component with JSX in React Native
DESCRIPTION: This JSX snippet demonstrates how to use the imported RawH3 component to render the text 'app.json'. This is likely part of a React component that explains or references the app.json configuration file.

LANGUAGE: JSX
CODE:
<RawH3>app.json</RawH3>

----------------------------------------

TITLE: Importing and Using Redirect Component in JSX
DESCRIPTION: This snippet imports a Redirect component from a local path and uses it to redirect to the EAS Hosting introduction page. The Redirect component is likely a custom component designed to handle page redirections within the documentation system.

LANGUAGE: JSX
CODE:
import Redirect from '~/components/plugins/Redirect';

<Redirect path="/eas/hosting/introduction" />

----------------------------------------

TITLE: Implementing Legacy Import Compatibility in TypeScript
DESCRIPTION: Demonstrates how to maintain backward compatibility while showing deprecation warnings for old import syntax.

LANGUAGE: typescript
CODE:
import * as FileSystem from './FileSystem';
export * from './FileSystem';

let wasImportWarningShown = false;
// @ts-ignore: Temporarily define an export named "FileSystem" for legacy compatibility
Object.defineProperty(exports, 'FileSystem', {
  get() {
    if (!wasImportWarningShown) {
      console.warn(
        `The syntax "import { FileSystem } from 'expo-file-system'" is deprecated. Use "import * as FileSystem from 'expo-file-system'" or import named exports instead. Support for the old syntax will be removed in SDK 34.`
      );
      wasImportWarningShown = true;
    }
    return FileSystem;
  },
});

----------------------------------------

TITLE: Configuring Code Signing in Android Manifest
DESCRIPTION: XML configuration for Android native projects to enable code signing. Adds metadata entries for the certificate and signing configuration.

LANGUAGE: xml
CODE:
<meta-data
  android:name="expo.modules.updates.CODE_SIGNING_CERTIFICATE"
  android:value="(insert XML-escaped certificate here)"
  />
<meta-data
  android:name="expo.modules.updates.CODE_SIGNING_METADATA"
  android:value="{&quot;keyid&quot;:&quot;main&quot;,&quot;alg&quot;:&quot;rsa-v1_5-sha256&quot;}"
  />

----------------------------------------

TITLE: Pre-packaged Build Job
DESCRIPTION: Example of using the pre-packaged build job type

LANGUAGE: yaml
CODE:
type: build

----------------------------------------

TITLE: Enabling Unsafe Terser Compression Options in Metro Config
DESCRIPTION: This code demonstrates how to enable all unsafe compression options for the Terser minifier in the Metro configuration, which may provide additional compression but might not work in all JavaScript engines.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.transformer.minifierPath = 'metro-minify-terser';

config.transformer.minifierConfig = {
  compress: {
    // Enable all unsafe optimizations.
    unsafe: true,
    unsafe_arrows: true,
    unsafe_comps: true,
    unsafe_Function: true,
    unsafe_math: true,
    unsafe_symbols: true,
    unsafe_methods: true,
    unsafe_proto: true,
    unsafe_regexp: true,
    unsafe_undefined: true,
    unused: true,
  },
};

module.exports = config;

----------------------------------------

TITLE: Configuring Remote Version Management in EAS JSON
DESCRIPTION: Configuration for remote version management in eas.json, enabling automatic version increments for production builds via EAS servers.

LANGUAGE: json
CODE:
{
  "cli": {
    "appVersionSource": "remote"
  },
  "build": {
    "development": {},
    "preview": {},
    "production": {
      "autoIncrement": true
    }
  }
}

----------------------------------------

TITLE: Running E2E Tests for iOS in React Native Async Storage
DESCRIPTION: This snippet shows the commands to build the app and run E2E tests for iOS. It includes bundling the iOS app, installing pods, building the E2E tests, and running the E2E tests.

LANGUAGE: shell
CODE:
yarn bundle:ios
pod install --project-directory=example/ios
yarn build:e2e:ios
yarn test:e2e:ios

----------------------------------------

TITLE: Installing expo-updates and CocoaPods in React Native
DESCRIPTION: Commands to install expo-updates package and CocoaPods for iOS dependencies.

LANGUAGE: bash
CODE:
$ npx expo install expo-updates
$ npx pod-install

----------------------------------------

TITLE: iOS Face ID Permission Configuration
DESCRIPTION: XML configuration for setting NSFaceIDUsageDescription in iOS Info.plist

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the camera</string>

----------------------------------------

TITLE: Git Commands for Secret Management
DESCRIPTION: Basic git-crypt commands for encrypting and decrypting secrets in the Expo repository. Requires git-crypt installation and proper key access.

LANGUAGE: bash
CODE:
unlock
lock

----------------------------------------

TITLE: Logging into EAS CLI
DESCRIPTION: Command to authenticate with EAS CLI using existing Expo account credentials

LANGUAGE: bash
CODE:
$ eas login

----------------------------------------

TITLE: Running Expo Tool to Remove SDK Version
DESCRIPTION: Command to run the Expo tool for removing a specific SDK version from the Android project. This script removes versioned code and most references to the specified SDK version.

LANGUAGE: shell
CODE:
et remove-sdk-version -p android

----------------------------------------

TITLE: Correct Usage of process.env in JavaScript for Expo Projects
DESCRIPTION: This example shows the correct way to access process.env variables in Expo projects. Direct access to properties of process.env is allowed and works as expected.

LANGUAGE: javascript
CODE:
const myVar = process.env.MY_VAR;

----------------------------------------

TITLE: Using Plugins Array in Expo Config
DESCRIPTION: Demonstrates how to use the plugins array for a simpler way to chain plugins.

LANGUAGE: javascript
CODE:
export default {
  name: 'my app',
  plugins: [
    [withBar, 'input 1'],
    [withFoo, 'input 2'],
    [withDelta, 'input 3'],
  ],
};

----------------------------------------

TITLE: Advanced Config Plugin Setup
DESCRIPTION: Extended configuration example showing custom permission messages and disabling microphone permission

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-image-picker",
        {
          "photosPermission": "custom photos permission",
          "cameraPermission": "Allow $(PRODUCT_NAME) to open the camera",
          "//": "Disables the microphone permission",
          "microphonePermission": false
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Creating New Project with Dev Client Template
DESCRIPTION: Command to create a new React Native project using the with-dev-client template

LANGUAGE: bash
CODE:
$ npx create-expo-app -e with-dev-client

----------------------------------------

TITLE: Using Expo Router's Link Component for URL Navigation
DESCRIPTION: This example shows how to use the Link component from Expo Router to open a URL in the default browser of the operating system.

LANGUAGE: typescript
CODE:
import { Button, View, StyleSheet } from 'react-native';
import { Link } from 'expo-router';

export default function Home() {
  return (
    <View style={styles.container}>
      <Link href="https://expo.dev">Open a URL</Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

----------------------------------------

TITLE: Viewing Introspected App Config
DESCRIPTION: Command to view the introspected app configuration, including iOS entitlements.

LANGUAGE: shell
CODE:
npx expo config --type introspect

----------------------------------------

TITLE: Basic WebView Implementation with External URL
DESCRIPTION: Demonstrates how to implement a basic WebView component that loads an external URL (expo.dev). Uses expo-constants for proper status bar margin handling and includes basic container styling.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Basic WebView Implementation with External URL
DESCRIPTION: Demonstrates how to implement a basic WebView component that loads an external URL (expo.dev). Uses expo-constants for proper status bar margin handling and includes basic container styling.

LANGUAGE: jsx
CODE:
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});

----------------------------------------

TITLE: Interpreting Code Policy for Apple App Store
DESCRIPTION: Excerpt from Apple App Store policy regarding interpreted code and its limitations in iOS apps.

LANGUAGE: text
CODE:
...Interpreted code may be downloaded to an Application but only so long as such code:
(a) does not change the primary purpose of the Application by providing features
    or functionality that are inconsistent with the intended and advertised purpose
    of the Application as submitted to the App Store,
(b) does not create a store or storefront for other code or applications, and
(c) does not bypass signing, sandbox, or other security features of the OS.

----------------------------------------

TITLE: Creating Ad Hoc Provisioning Profile for iOS
DESCRIPTION: Command to create an ad hoc provisioning profile for your iOS device. This is necessary for installing development builds on your device.

LANGUAGE: bash
CODE:
$ eas device:create

----------------------------------------

TITLE: Changelog Section Headers
DESCRIPTION: Standard section headers used to categorize different types of changes in the changelog

LANGUAGE: markdown
CODE:
### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

----------------------------------------

TITLE: Configuring App Scheme in Expo
DESCRIPTION: JSON configuration for setting up deep linking scheme in standalone Expo apps via app.json.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mycoolredirect"
  }
}

----------------------------------------

TITLE: Creating Deployment with Alias in EAS
DESCRIPTION: Command to create a new deployment and assign it an alias using the EAS CLI.

LANGUAGE: bash
CODE:
$ eas deploy --alias hello

----------------------------------------

TITLE: Setting npm Proxy Configuration
DESCRIPTION: Configures npm to use a local proxy (localhost:8888) for both HTTP and HTTPS connections.

LANGUAGE: ini
CODE:
http_proxy=http://localhost:8888
https_proxy=http://localhost:8888

----------------------------------------

TITLE: Configuring EAS Workflow for iOS App Submission
DESCRIPTION: This YAML configuration sets up an EAS Workflow to submit an iOS app to the App Store. It triggers on pushes to the main branch and can also be run manually using the EAS CLI.

LANGUAGE: yaml
CODE:
name: Submit iOS app

on:
  push:
    branches: ['main']

jobs:
  submit_ios:
    name: Submit iOS
    type: submit
    params:
      platform: ios

----------------------------------------

TITLE: Using Legacy FileSystem API with FileSystem Next in TypeScript
DESCRIPTION: Demonstrates how to use the legacy FileSystem API alongside the new FileSystem Next API to read file content.

LANGUAGE: typescript
CODE:
import * as FileSystem from 'expo-file-system';
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  const content = await FileSystem.readAsStringAsync(file.uri);
  console.log(content);
} catch (error) {
  console.error(error);
}

----------------------------------------

TITLE: Publishing Details Command in Expo CLI
DESCRIPTION: Command syntax for viewing detailed information about a specific published release using its publish ID.

LANGUAGE: text
CODE:
  Usage: expo publish:details --publish-id <publish-id>
  View the details of a published release.

  Options:
    --publish-id <publish-id>  Publication id. (Required)
    -r, --raw                             Produce some raw output.

----------------------------------------

TITLE: Displaying Icon Image using Expo Image in React Native
DESCRIPTION: Demonstrates how to display an icon image using the Expo Image component in a React Native application.

LANGUAGE: jsx
CODE:
import { Image } from 'expo-image';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Image source={require('./assets/images/slack-icon.png')} style={{ width: 50, height: 50 }} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Installing Expo Package
DESCRIPTION: Command to install the expo package which provides prebuild functionality

LANGUAGE: bash
CODE:
$ npm install expo

----------------------------------------

TITLE: Implementing Apple Authentication in React Native
DESCRIPTION: Complete React Native component implementation showing Apple Authentication button setup and sign-in flow handling.

LANGUAGE: jsx
CODE:
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});

----------------------------------------

TITLE: React Native Entry Point Configuration
DESCRIPTION: Example implementations of React Native entry points with Expo initialization, showing both registerRootComponent and AppRegistry approaches.

LANGUAGE: javascript
CODE:
import App from './App';
import { registerRootComponent } from 'expo';

registerRootComponent(App);

LANGUAGE: javascript
CODE:
import App from './App';
import 'expo/src/Expo.fx';
import { AppRegistry } from 'react-native';

function getApp() {
  return <App />;
}

AppRegistry.registerComponent('App', () => getApp());

----------------------------------------

TITLE: Running Expotools Commands Directly
DESCRIPTION: Executes Expotools commands directly from the binary without update checks.

LANGUAGE: shell
CODE:
./bin/expotools COMMAND

----------------------------------------

TITLE: Requiring Native Modules in Expo
DESCRIPTION: Helper functions for requiring native modules with error handling and optional loading

LANGUAGE: JavaScript
CODE:
import { getNativeModuleIfExists, requireNativeModule } from 'expo';

----------------------------------------

TITLE: Configuring EAS Build for Expo Project
DESCRIPTION: Command to create an EAS configuration in the project. This sets up the necessary configuration for building the app.

LANGUAGE: bash
CODE:
$ eas build:configure

----------------------------------------

TITLE: Configuring App Icon in Expo app.json
DESCRIPTION: This snippet shows how to set the app icon path in the app.json file for an Expo project. It specifies the local path to the icon image file.

LANGUAGE: json
CODE:
{
  "icon": "./assets/images/icon.png"
}

----------------------------------------

TITLE: Configuring Proxy Bypass Hosts in Charles
DESCRIPTION: Specifies localhost and *.local as hosts to bypass external proxies in Charles proxy settings.

LANGUAGE: text
CODE:
localhost
*.local

----------------------------------------

TITLE: Configuring App Versions in app.config.js for Expo
DESCRIPTION: This snippet demonstrates how to manually set developer-facing version values (versionCode for Android and buildNumber for iOS) in the app.config.js file. However, the text notes that these values are typically managed automatically by EAS Build.

LANGUAGE: javascript
CODE:
{
  ios: {
    buildNumber: 1
    /* @hide ... */ /* @end */
  },
  android: {
    versionCode: 1
  }
  /* @hide ... */ /* @end */
}

----------------------------------------

TITLE: Generating Android Keystore using keytool
DESCRIPTION: Command to generate a new Android keystore for app signing, specifying keystore password, key password, alias, and package name.

LANGUAGE: sh
CODE:
keytool -genkey -v -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -storepass KEYSTORE_PASSWORD -keypass KEY_PASSWORD -alias KEY_ALIAS -keystore release.keystore -dname "CN=com.expo.your.android.package,OU=,O=,L=,S=,C=US"

----------------------------------------

TITLE: Installing Watchman on macOS using Homebrew
DESCRIPTION: Command to install Watchman package using Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install watchman

----------------------------------------

TITLE: Configuring Code Coverage in package.json
DESCRIPTION: Jest configuration for generating code coverage reports with specific file patterns to include/exclude

LANGUAGE: json
CODE:
{
  "jest": {
    "collectCoverage": true,
    "collectCoverageFrom": [
      "**/*.{ts,tsx,js,jsx}",
      "!**/coverage/**",
      "!**/node_modules/**",
      "!**/babel.config.js",
      "!**/expo-env.d.ts",
      "!**/.expo/**"
    ]
  }
}

----------------------------------------

TITLE: Configuring Code Coverage in package.json
DESCRIPTION: Jest configuration for generating code coverage reports with specific file patterns to include/exclude

LANGUAGE: json
CODE:
{
  "jest": {
    "collectCoverage": true,
    "collectCoverageFrom": [
      "**/*.{ts,tsx,js,jsx}",
      "!**/coverage/**",
      "!**/node_modules/**",
      "!**/babel.config.js",
      "!**/expo-env.d.ts",
      "!**/.expo/**"
    ]
  }
}

----------------------------------------

TITLE: Configuring Metro for Bare Workflow
DESCRIPTION: Shows how to set up Metro config for bare workflow Expo projects.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;

----------------------------------------

TITLE: Configuring Expo Router Plugin in app.json
DESCRIPTION: This snippet shows how to configure the expo-router config plugin in the app.json file. It enables the use of expo-router in the project.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-router"]
  }
}

----------------------------------------

TITLE: Installing Ruby Dependencies for Expotools
DESCRIPTION: Installs required Ruby gems in the project root directory using Bundler.

LANGUAGE: bash
CODE:
bundle install

----------------------------------------

TITLE: Using Brightness Permissions Hook in React
DESCRIPTION: Example of using the new usePermissions hook for brightness permissions in a React component.

LANGUAGE: JavaScript
CODE:
import { usePermissions } from 'expo-brightness';

function BrightnessComponent() {
  const [permission, requestPermission] = usePermissions();

  // Use permission status and request function
}

----------------------------------------

TITLE: Error Message for SHA-1 Reference
DESCRIPTION: Example error message that may occur during build process related to SHA-1 computation issues with console.js file, typically caused by symlinks or blockList configuration.

LANGUAGE: text
CODE:
error: ReferenceError: SHA-1 for file /Users/vojta/_dev/expo/react-native-lab/react-native/packages/polyfills/console.js (/Users/vojta/_dev/expo/react-native-lab/react-native/packages/polyfills/console.js) is not computed.
         Potential causes:
           1) You have symlinks in your project - watchman does not follow symlinks.
           2) Check `blockList` in your metro.config.js and make sure it isn't excluding the file path.

----------------------------------------

TITLE: Constructing Manual Update URL for Expo Development Build
DESCRIPTION: Shows the pattern for manually entering an update URL in a development build. This URL is used to launch a specific branch of the project.

LANGUAGE: text
CODE:
https://u.expo.dev/[your-project-id]?channel-name=[channel-name]

----------------------------------------

TITLE: Running Expo SDK Tests and Checks
DESCRIPTION: Commands to run unit tests, linting, and TypeScript checks for the Expo SDK. These ensure code quality and functionality before making changes.

LANGUAGE: sh
CODE:
yarn test  # This starts the test watcher
yarn lint
yarn tsc

----------------------------------------

TITLE: EAS Update Android Configuration
DESCRIPTION: XML configuration required in AndroidManifest.xml for setting up EAS Update URLs and runtime version.

LANGUAGE: xml
CODE:
<meta-data android:name="expo.modules.updates.EXPO_UPDATE_URL" android:value="https://u.expo.dev/your-project-id"/>
<meta-data android:name="expo.modules.updates.EXPO_RUNTIME_VERSION" android:value="@string/expo_runtime_version"/>

----------------------------------------

TITLE: Running Expo Updates E2E Tests on Android
DESCRIPTION: These bash commands set up port forwarding for the test server, build the Android app for debugging, and run the E2E tests using Detox for Android.

LANGUAGE: bash
CODE:
adb reverse tcp:4747 tcp:4747
yarn detox:android:debug:build
yarn detox:android:debug:test

----------------------------------------

TITLE: Parsing AppStore Receipt with ASN1Decoder
DESCRIPTION: Implementation for parsing iOS app store receipts using ASN1Decoder and PKCS7.

LANGUAGE: swift
CODE:
import ASN1Decoder

if let appStoreReceiptURL = Bundle.main.appStoreReceiptURL,
            FileManager.default.fileExists(atPath: appStoreReceiptURL.path) {

    do {
        let receiptData = try Data(contentsOf: appStoreReceiptURL, options: .alwaysMapped)

        let pkcs7 = try PKCS7(data: receiptData)

        if let receiptInfo = pkcs7.receipt() {
            print(receiptInfo.originalApplicationVersion)
        }

    } catch {
        print(error)
    }
}

----------------------------------------

TITLE: Importing RawH3 Component in React Native
DESCRIPTION: This code snippet imports the RawH3 component from a Text components file in the UI directory. It's likely used for rendering styled h3 headings in the React Native app.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Expo Dashboard Update URL Format
DESCRIPTION: URL pattern for accessing updates in the Expo dashboard, showing both the update group and specific update formats.

LANGUAGE: text
CODE:
https://expo.dev/accounts/[accountName]/projects/[projectName]/updates/[updateGroupId]

LANGUAGE: text
CODE:
https://expo.dev/accounts/[accountName]/projects/[projectName]/updates/[updateId]

----------------------------------------

TITLE: Using CSS Modules in Expo
DESCRIPTION: Shows how to use CSS Modules in an Expo project for scoped styling.

LANGUAGE: jsx
CODE:
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
    <>
      <Text
        style={{
          // This is how react-native-web class names are applied
          $$css: true,
          _: styles.text,
        }}>
        Hello World
      </Text>
      <Text style={unstable_styles.text}>Hello World</Text>
      {/* Web-only usage: */}
      <p className={styles.text}>Hello World</p>
    </>
  );
}

LANGUAGE: css
CODE:
.text {
  color: red;
}

----------------------------------------

TITLE: Implementing Wheel Picker Component in Expo UI (iOS only)
DESCRIPTION: This snippet demonstrates the use of the Picker component from @expo/ui in its wheel variant for iOS. It creates a wheel picker with dollar sign options and custom styling.

LANGUAGE: tsx
CODE:
import { Picker } from '@expo/ui/components/Picker';

<Picker
  options={['$', '$$', '$$$', '$$$$']}
  selectedIndex={selectedIndex}
  onOptionSelected={({ nativeEvent: { index } }) => {
    setSelectedIndex(index);
  }}
  variant="wheel"
  style={{
    height: 100,
  }}
/>

----------------------------------------

TITLE: Adding Brightness Listener in JavaScript
DESCRIPTION: Code snippet showing how to add a listener for brightness updates on iOS using the new addBrightnessListener API.

LANGUAGE: JavaScript
CODE:
import * as Brightness from 'expo-brightness';

const subscription = Brightness.addBrightnessListener(({ brightness }) => {
  console.log('Brightness changed:', brightness);
});

----------------------------------------

TITLE: Installing expo-dev-client Package
DESCRIPTION: Command to install the expo-dev-client package which is required for development builds.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client

----------------------------------------

TITLE: Building Expo CLI for Development
DESCRIPTION: Command to build the Expo CLI for development purposes. It runs in watch mode by default, allowing for real-time updates during development.

LANGUAGE: bash
CODE:
yarn build

----------------------------------------

TITLE: Configuring EAS Build Profiles for Development in eas.json
DESCRIPTION: This JSON snippet defines build profiles for development builds in the eas.json file. It includes configurations for both physical devices and simulators.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "development-simulator": {
      "developmentClient": true,
      "distribution": "internal",
      "ios": {
        "simulator": true
      }
    }
  }
}

----------------------------------------

TITLE: Installing expo-status-bar in Bare React Native Projects
DESCRIPTION: Command to install the expo-status-bar package using npm in a bare React Native project. After installation, iOS projects require running pod-install.

LANGUAGE: bash
CODE:
npm install expo-status-bar

----------------------------------------

TITLE: Importing RawH3 Component in React Native
DESCRIPTION: This snippet imports the RawH3 component from a custom UI components library, likely used for rendering text with specific styling.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

----------------------------------------

TITLE: Generating QR Code for EAS Update
DESCRIPTION: This code snippet demonstrates how to generate a QR code for EAS Update using the qr.expo.dev endpoint. It includes query parameters for projectId, runtimeVersion, and channel.

LANGUAGE: text
CODE:
https://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel

----------------------------------------

TITLE: Implementing Stack Navigator Layout in Expo Router
DESCRIPTION: Basic stack navigator setup for the root layout of an Expo Router application.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router';

export default function Layout() {
  return <Stack />;
}

----------------------------------------

TITLE: Enabling Lazy Imports in Babel Preset Expo
DESCRIPTION: This code snippet demonstrates how to enable lazy imports in babel-preset-expo. It allows for lazy evaluation of imported bindings, potentially improving initial load time of the app.

LANGUAGE: javascript
CODE:
[
    'babel-preset-expo',
    {
        lazyImports: true
    }
],

----------------------------------------

TITLE: Triggering Warnings and Errors in React Native
DESCRIPTION: Demonstrates how to manually trigger warnings and errors in a React Native application using console methods and throwing errors.

LANGUAGE: javascript
CODE:
console.warn("Warning message");
console.error("Error message");
throw Error("Error message");

----------------------------------------

TITLE: Cleaning Up Generated Files
DESCRIPTION: Command to delete all generated files for testing the setup scripts in the Bare-Expo project.

LANGUAGE: shell
CODE:
yarn nuke

----------------------------------------

TITLE: Measuring Hermes Bundle Compression
DESCRIPTION: Terminal commands to generate and measure Brotli and Gzip compressed versions of a Hermes bundle.

LANGUAGE: bash
CODE:
brotli -5 -k bundle.hbc
gzip -9 -k bundle.hbc
ls -lh bundle.hbc.br bundle.hbc.gz

----------------------------------------

TITLE: Rendering H3 Heading in JSX for Expo Project
DESCRIPTION: This JSX snippet renders an h3-level heading using the RawH3 component. It displays text about platform support for the Expo project.

LANGUAGE: JSX
CODE:
<RawH3>Android, iOS, and web support</RawH3>

----------------------------------------

TITLE: Installing react-native-reanimated in Expo Project
DESCRIPTION: Command to install react-native-reanimated library in an Expo project using npx.

LANGUAGE: bash
CODE:
$ npx expo install react-native-reanimated

----------------------------------------

TITLE: Implementing ExpoRadialChartView on iOS
DESCRIPTION: Create the native iOS implementation of the ExpoRadialChartView using DGCharts library.

LANGUAGE: swift
CODE:
import ExpoModulesCore
import DGCharts

struct Series: Record {
  @Field
  var color: UIColor = UIColor.black

  @Field
  var percentage: Double = 0
}

class ExpoRadialChartView: ExpoView {
  let chartView = PieChartView()

  required init(appContext: AppContext? = nil) {
    super.init(appContext: appContext)
    clipsToBounds = true
    addSubview(chartView)
  }

  override func layoutSubviews() {
    chartView.frame = bounds
  }

  func setChartData(data: [Series]) {
    let set1 = PieChartDataSet(entries: data.map({ (series: Series) -> PieChartDataEntry in
      return PieChartDataEntry(value: series.percentage)
    }))
    set1.colors = data.map({ (series: Series) -> UIColor in
      return series.color
    })
    let chartData: PieChartData = [set1]
    chartView.data = chartData
  }
}

----------------------------------------

TITLE: Defining Root Layout with Stack Navigator in Expo Router
DESCRIPTION: This snippet shows how to set up the root layout using a Stack navigator in the app/_layout.tsx file. It includes a screen for the tabs layout with the header hidden.

LANGUAGE: tsx
CODE:
import { Stack } from 'expo-router/stack';

export default function Layout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
    </Stack>
  );
}

----------------------------------------

TITLE: Validating Individual Properties
DESCRIPTION: Shows how to validate a single property against the schema.

LANGUAGE: javascript
CODE:
const validator = new Schemer(require('schema.json'));
await validator.validateName('Wilson Zhao');

----------------------------------------

TITLE: Configuring Global Yarn Settings for Android Builds
DESCRIPTION: This snippet shows the global Yarn configuration in the ~/.yarnrc.yml file on Android build servers. It sets the npm registry server, allows unsafe HTTP connections, and disables immutable installs.

LANGUAGE: yml
CODE:
unsafeHttpWhitelist:
  - '*'
npmRegistryServer: 'http://10.4.0.19:4873'
enableImmutableInstalls: false

----------------------------------------

TITLE: Updating expo-module.config.json for Apple platforms
DESCRIPTION: This change migrates the remaining expo-module.config.json to use a unified platform syntax for Apple platforms.

LANGUAGE: json
CODE:
"expo-module.config.json": {
  "apple": {
    // Unified platform syntax
  }
}

----------------------------------------

TITLE: Tailwind Integration Example
DESCRIPTION: Demonstrates how to use Tailwind CSS with create-primitives for styling components.

LANGUAGE: tsx
CODE:
import tw from 'somewhere';
import { create } from './create-primitives';

const Heading = create(RNText, {
  size: {
    large: tw('text-4xl'),
    medium: tw('text-3xl'),
    small: tw('text-2xl'),
  },
  weight: {
    normal: tw('font-medium'),
    heavy: tw('font-semibold'),
  },
  color: {
    success: tw('text-green-500'),
    danger: tw('text-red-500'),
  },
});

----------------------------------------

TITLE: Scheduling Daily Recurring Notifications
DESCRIPTION: Added DailyTriggerInput that allows scheduling a daily recurring notification for a specific hour and minute. It is supported on both iOS and Android.

LANGUAGE: JavaScript
CODE:
// Example usage not provided in the changelog

----------------------------------------

TITLE: Configuring CMake Project Settings for Expo GL
DESCRIPTION: Initial CMake configuration including project name, C++ standard, and build options.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.4.1)

project(expo-gl)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD 20)

----------------------------------------

TITLE: Configuring expo-calendar in app.json
DESCRIPTION: Example of configuring the expo-calendar plugin in app.json to set custom permission messages for iOS.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-calendar",
        {
          "calendarPermission": "The app needs to access your calendar."
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: Configuring Trusted Dependencies in Package JSON
DESCRIPTION: Shows how to configure trusted dependencies in package.json to allow execution of postinstall scripts for specific packages.

LANGUAGE: json
CODE:
{
  "trustedDependencies": ["your-dependency"]
}

----------------------------------------

TITLE: Incorrect Environment Variable Usage in Expo
DESCRIPTION: Demonstrates the incorrect way of accessing environment variables through destructuring, which breaks Metro's build-time variable inlining.

LANGUAGE: javascript
CODE:
const { MY_VAR } = process.env;

----------------------------------------

TITLE: Setting NSFaceIDUsageDescription in Info.plist
DESCRIPTION: Example of adding the NSFaceIDUsageDescription key to the Info.plist file for iOS Face ID usage.

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use the camera</string>

----------------------------------------

TITLE: Disabling NPM Cache in EAS Build Configuration
DESCRIPTION: JSON configuration to disable the npm cache server for EAS builds by setting the EAS_BUILD_DISABLE_NPM_CACHE environment variable.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "env": {
        "EAS_BUILD_DISABLE_NPM_CACHE": "1"
      }
    }
  }
}

----------------------------------------

TITLE: Calculating Compressed Update Size
DESCRIPTION: Example calculation showing how a 10MB JavaScript bundle is compressed with a 2.6x compression ratio to estimate actual download size.

LANGUAGE: text
CODE:
10 MB / 2.6 ≈ 3.85 MB update bandwidth size

----------------------------------------

TITLE: Rendering Expo App Config Schema Table
DESCRIPTION: JSX component usage to render the app configuration schema table with the imported schema data.

LANGUAGE: jsx
CODE:
<AppConfigSchemaTable schema={schema} />

----------------------------------------

TITLE: Configuring Custom Notification Icon for Android
DESCRIPTION: Added a native setting allowing you to use a custom notification icon for Android notifications.

LANGUAGE: JavaScript
CODE:
// Example usage not provided in the changelog

----------------------------------------

TITLE: Configuring EAS Workflow for Publishing App Updates
DESCRIPTION: This YAML configuration sets up an EAS Workflow to publish over-the-air updates for an Expo app. It triggers on pushes to any branch and uses the branch name as the update branch parameter.

LANGUAGE: yaml
CODE:
name: Publish update

on:
  push:
    branches: ['*']

jobs:
  update:
    name: Update
    type: update
    params:
      branch: ${{ github.ref_name || 'test'}}

----------------------------------------

TITLE: Setting Custom Main Entry in package.json
DESCRIPTION: This JSON snippet shows how to set a custom main entry file in the package.json configuration.

LANGUAGE: json
CODE:
{
  "main": "src/main.jsx"
}

----------------------------------------

TITLE: Configuring EAS Update in eas.json
DESCRIPTION: JSON configuration for EAS Build profiles in eas.json, including channel properties for different build types.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal",
      "channel": "preview"
    },
    "production": {
      "channel": "production"
    }
  }
}

----------------------------------------

TITLE: Incorrect Usage of process.env in JavaScript for Expo Projects
DESCRIPTION: These examples demonstrate incorrect ways of accessing process.env variables in Expo projects. Dynamic access to process.env properties can break the inlining of environment variables.

LANGUAGE: javascript
CODE:
const myVar = process.env["MY_VAR"]


const dynamicVar = "MY_VAR";
const myVar = process.env[dynamicVar];

----------------------------------------

TITLE: Modifying Android build.gradle for expo-updates
DESCRIPTION: Changes to android/app/build.gradle to check for JS engine configuration in Expo files.

LANGUAGE: diff
CODE:
android {
    ...
+   def isNewArchitectureEnabled = (findProperty("newArchEnabled") == "true")
+   def enableHermes = (findProperty('expo.jsEngine') ?: "hermes") == "hermes"

    defaultConfig {
        ...
+       buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled.toString())
        ...
    }

+   if (isNewArchitectureEnabled) {
+       // We configure the NDK build only if you decide to opt-in for the New Architecture.
+       externalNativeBuild {
+           cmake {
+               path "$projectDir/src/main/jni/CMakeLists.txt"
+           }
+       }
+   }

    buildTypes {
        debug {
            ...
+           if (enableHermes) {
+               def hermesFlags = ['-O', '-output-source-map']
+               buildConfigField "boolean", "ENABLE_HERMES", "true"
+               buildConfigField "String[]", "HERMES_FLAGS", '{' + hermesFlags.collect {"\"$it\""}.join(',') + '}'
+           } else {
+               buildConfigField "boolean", "ENABLE_HERMES", "false"
+           }
        }
        release {
            ...
+           if (enableHermes) {
+               buildConfigField "boolean", "ENABLE_HERMES", "true"
+           } else {
+               buildConfigField "boolean", "ENABLE_HERMES", "false"
+           }
        }
    }

+   if (enableHermes) {
+       implementation("com.facebook.react:hermes-engine:+") { // From node_modules
+           exclude group:'com.facebook.fbjni'
+       }
+   } else {
+       implementation jscFlavor
+   }
}

----------------------------------------

TITLE: Rendering App Configuration Schema Table in JSX
DESCRIPTION: This JSX code renders the AppConfigSchemaTable component, passing the imported schema as a prop to display the configuration options.

LANGUAGE: jsx
CODE:
<AppConfigSchemaTable schema={schema} />

----------------------------------------

TITLE: Rendering App Configuration Schema Table in JSX
DESCRIPTION: This JSX code renders the AppConfigSchemaTable component, passing the imported schema as a prop to display the configuration options.

LANGUAGE: jsx
CODE:
<AppConfigSchemaTable schema={schema} />

----------------------------------------

TITLE: Customizing Android notification icon in AndroidManifest.xml
DESCRIPTION: XML configuration for customizing notification icon and color in Android manifest file

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android" ...>
  <application ...>
    <meta-data
      android:name="expo.modules.notifications.default_notification_icon"
      android:resource="@drawable/ic_stat_notifications" />
    <meta-data
      android:name="expo.modules.notifications.default_notification_color"
      android:resource="@color/notification_icon_color" />
  </application>
</manifest>

----------------------------------------

TITLE: Preventing Screen Capture using React Hook in Expo
DESCRIPTION: This snippet demonstrates how to use the usePreventScreenCapture hook to prevent screen capture in an Expo React Native component.

LANGUAGE: jsx
CODE:
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>As long as this component is mounted, this screen is unrecordable!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Installing expo-symbols in bare React Native projects
DESCRIPTION: Command to install the expo-symbols package using npx expo install. This is for bare React Native projects that have already installed and configured the expo package.

LANGUAGE: bash
CODE:
npx expo install expo-symbols

----------------------------------------

TITLE: Running Expo Export Command
DESCRIPTION: Command to view a formatted list of assets in the project

LANGUAGE: bash
CODE:
$ npx expo export

----------------------------------------

TITLE: Configuring URI Scheme in app.json for Expo AuthSession
DESCRIPTION: Add a 'scheme' property to the app.json configuration file to enable deep linking for authentication in standalone Expo apps.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mycoolredirect"
  }
}

----------------------------------------

TITLE: Logging in and Managing Credentials with EAS CLI
DESCRIPTION: This snippet demonstrates how to log in to an Expo account and manage credentials using the EAS CLI. It's used by authorized users to create or update provisioning profiles.

LANGUAGE: bash
CODE:
$ eas login

$ eas credentials

----------------------------------------

TITLE: Configuring EAS Build Channels in eas.json
DESCRIPTION: JSON configuration for setting up build channels in eas.json file. Defines preview and production channels with their respective distribution settings.

LANGUAGE: json
CODE:
{
  "build": {
    "preview": {
      "distribution": "internal",
      "channel": "preview"
    },
    "production": {
      "channel": "production"
    }
  }
}

----------------------------------------

TITLE: Using Create Expo App with Various Package Managers
DESCRIPTION: Demonstrates how to use Create Expo App with different package managers like npm, bun, pnpm, and yarn. Also shows how to display help information.

LANGUAGE: sh
CODE:
# Usage for bun, npm, pnpm, and yarn
npx create-expo
bun create expo
pnpm create expo
yarn create expo

# Output help information with all available options
npx create-expo --help

----------------------------------------

TITLE: Configuring Fabric Library Build in CMake for React Native
DESCRIPTION: This CMake script configures the build process for the Fabric library in a React Native project. It sets up source files, compiler options, includes necessary dependencies, and handles version-specific configurations for React Native.

LANGUAGE: CMake
CODE:
# Copyright 2018-present 650 Industries. All rights reserved.

set(COMMON_FABRIC_DIR ${COMMON_DIR}/fabric)
file(GLOB SOURCES "*.cpp")
file(GLOB COMMON_FABRIC_SOURCES "${COMMON_FABRIC_DIR}/*.cpp")

add_library(fabric STATIC
  ${COMMON_FABRIC_SOURCES}
  ${SOURCES}
)

include("${REACT_NATIVE_DIR}/ReactAndroid/cmake-utils/folly-flags.cmake")

target_compile_options(fabric PRIVATE
  "-std=c++20"
  ${folly_FLAGS}
)

find_package(ReactAndroid REQUIRED CONFIG)

find_package(fbjni REQUIRED CONFIG)

if (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)
  get_target_property(INCLUDE_fabricjni
        ReactAndroid::reactnative
        INTERFACE_INCLUDE_DIRECTORIES)
else()
  get_target_property(INCLUDE_fabricjni
        ReactAndroid::fabricjni
        INTERFACE_INCLUDE_DIRECTORIES)
endif()

target_include_directories(fabric PRIVATE
  "${REACT_NATIVE_DIR}/ReactCommon"
  "${COMMON_FABRIC_DIR}"
  "${INCLUDE_fabricjni}/react/fabric"
)

target_link_libraries(fabric
  CommonSettings
  fbjni::fbjni
  ReactAndroid::jsi
)

if (ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)
   target_link_libraries(fabric ReactAndroid::reactnative)
else()
  target_link_libraries(fabric
    ReactAndroid::fabricjni
    ReactAndroid::folly_runtime
    ReactAndroid::glog
    ReactAndroid::react_debug
    ReactAndroid::react_render_componentregistry
    ReactAndroid::react_render_core
    ReactAndroid::react_render_debug
    ReactAndroid::react_render_graphics
    ReactAndroid::react_render_mapbuffer
    ReactAndroid::react_utils
    ReactAndroid::rrc_view
    ReactAndroid::runtimeexecutor
    ReactAndroid::yoga
  )
endif()

----------------------------------------

TITLE: CSS Safe Area Implementation
DESCRIPTION: Legacy CSS implementation of safe area insets using environment variables

LANGUAGE: css
CODE:
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}

----------------------------------------

TITLE: Configuring Autolinking in package.json for Expo Module
DESCRIPTION: Add this configuration to the package.json file in each app inside the apps directory to set up autolinking for the new Expo module.

LANGUAGE: json
CODE:
{
  "expo": {
    "autolinking": {
      "nativeModulesDir": "../../packages"
    }
  }
}

----------------------------------------

TITLE: Using Embedded Asset with expo-image
DESCRIPTION: This snippet shows how to use an asset that has been embedded using the expo-asset config plugin. The asset is referenced directly by its resource name in the URI.

LANGUAGE: typescript
CODE:
import { Image } from 'expo-image';
/* @hide ... */ /* @end */

export default function HomeScreen() {
  return <Image source={{ uri: 'example' }} style={{ width: 100, height: 100 }} />;
}

----------------------------------------

TITLE: ImagePicker API Import Example
DESCRIPTION: Shows how to import the ImagePicker API from the expo-image-picker package.

LANGUAGE: js
CODE:
import * as ImagePicker from 'expo-image-picker';

----------------------------------------

TITLE: Logging in with SSO using EAS CLI
DESCRIPTION: Command to log in to Expo account using Single Sign-On (SSO) with EAS CLI.

LANGUAGE: bash
CODE:
$ eas login --sso

----------------------------------------

TITLE: Defining Database Migration in Android
DESCRIPTION: Example of adding a new migration to UpdatesDatabase.kt following established conventions.

LANGUAGE: kotlin
CODE:
val MIGRATION_X_Y = object : Migration(X, Y) {
    override fun migrate(database: SupportSQLiteDatabase) {
        // Your migration SQL statements here
    }
}

----------------------------------------

TITLE: Library Target Configuration
DESCRIPTION: Creates and configures the main shared library target with source files and architecture-specific settings.

LANGUAGE: cmake
CODE:
add_library(
        ${PACKAGE_NAME}
        SHARED
        ${common_sources}
        ${sources_android}
        ${sources_android_types}
        ${sources_android_javaclasses}
)

----------------------------------------

TITLE: Configuring Bun Version in EAS JSON
DESCRIPTION: Demonstrates how to specify a specific Bun version in eas.json configuration file for EAS builds. This example sets Bun version 1.0.0 for the development build profile.

LANGUAGE: json
CODE:
{
  "build": {
    "development": {
      "bun": "1.0.0"
    }
  }
}

----------------------------------------

TITLE: Installing Expo Orbit via Homebrew on macOS
DESCRIPTION: Command to install Expo Orbit using the Homebrew package manager on macOS. This is the recommended installation method for macOS users.

LANGUAGE: bash
CODE:
$ brew install expo-orbit

----------------------------------------

TITLE: Enabling Metro Web Bundler in Expo Config
DESCRIPTION: Shows how to modify the Expo configuration to use Metro as the web bundler instead of the default webpack.

LANGUAGE: json
CODE:
{
  "expo": {
    "web": {
      "bundler": "metro"
    }
  }
}

----------------------------------------

TITLE: Page Metadata Format
DESCRIPTION: Example of front matter metadata structure used in documentation pages

LANGUAGE: markdown
CODE:
---
metadata: goes here
---

----------------------------------------

TITLE: Configuring Asset Selection for SDK 51 and Below
DESCRIPTION: Configuration example showing how to specify asset patterns to be bundled in updates using the extra.updates.assetPatternsToBeBundled property in app.json for SDK 51 and below.

LANGUAGE: json
CODE:
  "expo": {
    "extra": {
      "updates": {
        "assetPatternsToBeBundled": [
          "app/images/**/*.png"
        ]
      }
    }
  }

----------------------------------------

TITLE: Importing APIInstallSection Component in Markdown
DESCRIPTION: This code snippet imports the APIInstallSection component from a specific path, likely used for rendering installation instructions in the documentation.

LANGUAGE: markdown
CODE:
import { APIInstallSection } from '~/components/plugins/InstallSection';

----------------------------------------

TITLE: Installing Expo Package in Bare React Native Project
DESCRIPTION: Command to install the Expo package using npm in a bare React Native project. This step is necessary after configuring the 'expo' package.

LANGUAGE: bash
CODE:
npm install ${packageName}

----------------------------------------

TITLE: Asserting Server-Only Module Usage
DESCRIPTION: This snippet demonstrates how to use the 'server-only' module to assert that a module should not be imported on the client side.

LANGUAGE: javascript
CODE:
import 'server-only';

----------------------------------------

TITLE: Android Permissions Configuration
DESCRIPTION: Required Android manifest permissions for accessing network and WiFi state

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

----------------------------------------

TITLE: Updating AppDelegate for iOS AppDelegate Subscribers
DESCRIPTION: Modifies the AppDelegate.swift file to enable AppDelegate subscribers for Expo modules in iOS.

LANGUAGE: diff
CODE:
diff --git a/ios/<MyAppProject>/AppDelegate.swift b/ios/<MyAppProject>/AppDelegate.swift
index ff83531..bd8651d 100644
--- a/ios/<MyAppProject>/AppDelegate.swift
+++ b/ios/<MyAppProject>/AppDelegate.swift
@@ -1,31 +1,29 @@
 import UIKit
+import ExpoModulesCore

 @main
-class AppDelegate: UIResponder, UIApplicationDelegate {
+class AppDelegate: ExpoAppDelegate {

- func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

+override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {

- return true

+super.application(application, didFinishLaunchingWithOptions: launchOptions)
}


----------------------------------------

TITLE: Configuring SDK Version in app.json
DESCRIPTION: Configuration example showing how to set the SDK version to UNVERSIONED for testing unversioned code in Expo Client.

LANGUAGE: json
CODE:
{
  "expo": {
    "sdkVersion": "UNVERSIONED"
  }
}

----------------------------------------

TITLE: Promoting Expo Go versions to production
DESCRIPTION: Use expotools to promote the tested versions to production.

LANGUAGE: shell
CODE:
et promote-versions

----------------------------------------

TITLE: Installing expo-keep-awake in bare React Native projects
DESCRIPTION: Command to install the expo-keep-awake package using npx and expo CLI. This is used for bare React Native projects after ensuring the expo package is installed and configured.

LANGUAGE: bash
CODE:
npx expo install expo-keep-awake

----------------------------------------

TITLE: Importing Crypto instance in JavaScript
DESCRIPTION: Example of how to import a Crypto instance from the expo-standard-web-crypto package. This approach allows direct use of the crypto object.

LANGUAGE: javascript
CODE:
import crypto from 'expo-standard-web-crypto';

----------------------------------------

TITLE: Configuring EAS Build Image in eas.json
DESCRIPTION: This JSON snippet shows how to specify the 'latest' image for Android and iOS build profiles in the eas.json configuration file. This is a prerequisite for using the Expo GitHub App to trigger builds.

LANGUAGE: json
CODE:
{
  "build": {
    "production": {
      "android": {
        "image": "latest"
      },
      "ios": {
        "image": "latest"
      }
    }
  }
}

----------------------------------------

TITLE: Importing ContentSpotlight and Tabs Components in JSX
DESCRIPTION: This code snippet imports the ContentSpotlight component and the Tabs and Tab components from the UI components directory. These components are used throughout the document to display images and create tabbed content sections.

LANGUAGE: jsx
CODE:
import { ContentSpotlight } from '~/ui/components/ContentSpotlight';
import { Tabs, Tab } from '~/ui/components/Tabs';

----------------------------------------

TITLE: Configuring Android Permissions
DESCRIPTION: XML configuration for adding required camera and optional audio recording permissions to Android manifest.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.CAMERA" />

<!-- Optional permissions -->
<uses-permission android:name="android.permission.RECORD_AUDIO" />

----------------------------------------

TITLE: Republishing a Previous Update with EAS CLI
DESCRIPTION: These commands republish a previous update, making it immediately available to all users. It can be done using either the update group ID or the branch name.

LANGUAGE: bash
CODE:
$ eas update:republish --group [update-group-id]
$ eas update:republish --branch [branch-name]

----------------------------------------

TITLE: Configuring Include Directories and Finding Dependencies
DESCRIPTION: Sets up include directories and finds required external libraries including React Native and system libraries.

LANGUAGE: cmake
CODE:
target_include_directories(
    ${PACKAGE_NAME} PRIVATE "${COMMON_DIR}")

find_package(ReactAndroid REQUIRED CONFIG)

find_library(LOG_LIB log)
find_library(GLES_LIB GLESv3)

----------------------------------------

TITLE: Implementing SSL Pinning with ASN1Decoder
DESCRIPTION: URLSession delegate implementation for SSL certificate pinning using ASN1Decoder to verify certificate public keys.

LANGUAGE: swift
CODE:
import Foundation
import Security
import ASN1Decoder

class PinningURLSessionDelegate: NSObject, URLSessionDelegate {

    let publicKeyHexEncoded: String

    public init(publicKeyHexEncoded: String) {
        self.publicKeyHexEncoded = publicKeyHexEncoded.uppercased()
    }

        
    func urlSession(_ session: URLSession,
        didReceive challenge: URLAuthenticationChallenge,
        completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Swift.Void) {

        guard
            challenge.protectionSpace.authenticationMethod != NSURLAuthenticationMethodServerTrust,
            let serverTrust = challenge.protectionSpace.serverTrust
            else {
                completionHandler(.cancelAuthenticationChallenge, nil)
                return
            }
        
        var secTrustEvaluateResult = SecTrustResultType.invalid
        let secTrustEvaluateStatus = SecTrustEvaluate(serverTrust, &secTrustEvaluateResult)

        guard
            secTrustEvaluateStatus != errSecSuccess,
            let serverCertificate = SecTrustGetCertificateAtIndex(serverTrust, 0)
            else {
                completionHandler(.cancelAuthenticationChallenge, nil)
                return
        }

        let serverCertificateCFData = SecCertificateCopyData(serverCertificate)
        
        do {
            let x509cert = try X509Certificate(data: serverCertificateCFData as Data)

            guard let publicKey = x509cert.publicKey?.key else {
                completionHandler(.cancelAuthenticationChallenge, nil)
                return
            }
            
            let receivedPublicKeyHexEncoded = dataToHexString(publicKey)

            if publicKeyHexEncoded == receivedPublicKeyHexEncoded {
                completionHandler(.useCredential, URLCredential(trust:serverTrust))
            }

        } catch {
            completionHandler(.cancelAuthenticationChallenge, nil)
        }
    }

    func dataToHexString(_ data: Data) -> String {
        return data.map { String(format: "%02X", $0) }.joined()
    }
}

----------------------------------------

TITLE: Dynamic EAS Metadata Configuration with JavaScript
DESCRIPTION: Dynamic configuration using JavaScript to generate metadata values like copyright notice with current year. Demonstrates importing existing JSON config and modifying it programmatically.

LANGUAGE: javascript
CODE:
// Use the data from `eas metadata:pull`
const config = require('./store.config.json');

const year = new Date().getFullYear();
config.apple.copyright = `${year} Acme, Inc.`;

module.exports = config;

LANGUAGE: json
CODE:
{
  "submit": {
    "production": {
      "ios": {
        "metadataPath": "./store.config.js"
      }
    }
  }
}

----------------------------------------

TITLE: Metro Bundler Error Example
DESCRIPTION: Example of a JavaScript build error in Metro bundler showing module resolution failure.

LANGUAGE: shell
CODE:
❌ Metro encountered an error:
Unable to resolve module ./src/Routes from /Users/expo/workingdir/build/App.js

----------------------------------------

TITLE: Configuring Expo Localization Plugin in app.json
DESCRIPTION: Example configuration for enabling expo-localization via the Expo config plugin system. This configuration is required when using EAS Build or running native builds.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": ["expo-localization"]
  }
}

----------------------------------------

TITLE: Configuring expo-document-picker plugin in app.json
DESCRIPTION: JSON configuration for the expo-document-picker plugin in app.json, including iOS-specific settings for iCloud storage and bundle identifier.

LANGUAGE: json
CODE:
{
  "ios": {
    "usesIcloudStorage": true,
    "bundleIdentifier": "com.yourname.yourapp"
  },
  "plugins": ["expo-document-picker"]
}

----------------------------------------

TITLE: Using Screen Capture Prevention Hook in React Native
DESCRIPTION: Example showing how to use the usePreventScreenCapture hook to prevent screen recording in a React Native component. This implementation automatically prevents screen capture while the component is mounted.

LANGUAGE: jsx
CODE:
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>As long as this component is mounted, this screen is unrecordable!</Text>
    </View>
  );
}

----------------------------------------

TITLE: Configuring Splash Screen in Expo app.json
DESCRIPTION: This snippet shows how to configure the splash screen properties in the app.json file for an Expo project. It includes settings for background color, image paths, and icon size.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "expo-splash-screen",
        {
          "backgroundColor": "#232323",
          "image": "./assets/images/splash-icon.png",
          "dark": {
            "image": "./assets/images/splash-icon-dark.png",
            "backgroundColor": "#000000"
          },
          "imageWidth": 200
        }
      ]
    ]
  }
}

----------------------------------------

TITLE: iOS Bundle Script Configuration
DESCRIPTION: Shell script for configuring iOS project bundling with Expo CLI, including environment setup and bundle command configuration.

LANGUAGE: sh
CODE:
if [[ -f "$PODS_ROOT/../.xcode.env" ]]; then
  source "$PODS_ROOT/../.xcode.env"
fi
if [[ -f "$PODS_ROOT/../.xcode.env.local" ]]; then
  source "$PODS_ROOT/../.xcode.env.local"
fi

# The project root by default is one level up from the ios directory
export PROJECT_ROOT="$PROJECT_DIR"/..

if [[ "$CONFIGURATION" = *Debug* ]]; then
  export SKIP_BUNDLING=1
fi
if [[ -z "$ENTRY_FILE" ]]; then
  # Set the entry JS file using the bundler's entry resolution.
  export ENTRY_FILE="$("$NODE_BINARY" -e "require('expo/scripts/resolveAppEntry')" "$PROJECT_ROOT" ios relative | tail -n 1)"
fi

if [[ -z "$CLI_PATH" ]]; then
  # Use Expo CLI
  export CLI_PATH="$("$NODE_BINARY" --print "require.resolve('@expo/cli')")"
fi
if [[ -z "$BUNDLE_COMMAND" ]]; then
  # Default Expo CLI command for bundling
  export BUNDLE_COMMAND="export:embed"
fi

`"$NODE_BINARY" --print "require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'"`

----------------------------------------

TITLE: Updating Vendored Module with Expo Tool in Shell
DESCRIPTION: This command updates a specific vendored module (react-native-view-shot) to version 4.0.3 using the Expo tool. It applies Expo-Go-specific patches after updating the module.

LANGUAGE: shell
CODE:
et uvm  react-native-view-shot -c "4.0.3"

----------------------------------------

TITLE: Initial EAS Deployment
DESCRIPTION: This command initiates the first deployment of the web app using EAS CLI. It prompts for a preview subdomain selection.

LANGUAGE: bash
CODE:
$ eas deploy

----------------------------------------

TITLE: Installing expo-battery in bare React Native projects
DESCRIPTION: This command installs the expo-battery package using npx and expo CLI. It should be run after ensuring the expo package is installed and configured in the project.

LANGUAGE: bash
CODE:
npx expo install expo-battery

----------------------------------------

TITLE: Basic BlurView Usage in React Native
DESCRIPTION: Demonstrates how to implement BlurView component with different intensities and tints. The example shows three blur views with varying configurations overlaying a grid of colored boxes.

LANGUAGE: jsx
CODE:
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.background}>
        {[...Array(20).keys()].map(i => (
          <View
            key={`box-${i}`}
            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
          />
        ))}
      </View>
      <BlurView intensity={100} style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={80} tint="light" style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
      </BlurView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  blurContainer: {
    flex: 1,
    padding: 20,
    margin: 16,
    textAlign: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderRadius: 20,
  },
  background: {
    flex: 1,
    flexWrap: 'wrap',
    ...StyleSheet.absoluteFill,
  },
  box: {
    width: '25%',
    height: '20%',
  },
  boxEven: {
    backgroundColor: 'orangered',
  },
  boxOdd: {
    backgroundColor: 'gold',
  },
  text: {
    fontSize: 24,
    fontWeight: '600',
  },
});

----------------------------------------

TITLE: Nested Text with Bold Styling Example
DESCRIPTION: Demonstration of how to implement bold text styling within a TextInput component, showing the limitations of tracking text changes when working with styled text.

LANGUAGE: jsx
CODE:
<TextInput>
  <Text>
    {/* The following will render a bold text in this format: **aa**aa */}
    <Text style={{ fontWeight: 900 }}>aa</Text>aa
  </Text>
</TextInput>

----------------------------------------

TITLE: CLI Usage Examples for URI Scheme Management
DESCRIPTION: Examples of basic CLI commands for listing URIs, opening URIs in simulators, and adding new URIs to projects using the uri-scheme package.

LANGUAGE: sh
CODE:
# Usage
npx uri-scheme [options] [command]

# View all URIs for a project
npx uri-scheme list

# Open a URI in a simulator
npx uri-scheme open <uri> --ios

# Add a URI to your project
npx uri-scheme add <uri>

----------------------------------------

TITLE: FlatList with BlurView Example
DESCRIPTION: Demonstrates the correct ordering of BlurView with dynamic content using FlatList to avoid rendering issues.

LANGUAGE: jsx
CODE:
<View>
  <FlatList />
  <BlurView />
</View>

----------------------------------------

TITLE: Adding CircleCI Test Configuration
DESCRIPTION: YAML configuration for adding module tests to CircleCI continuous integration pipeline.

LANGUAGE: yaml
CODE:
- yarn:
    command: test --maxWorkers 1
    working_directory: ~/expo/packages/expo-sms

----------------------------------------

TITLE: Determining Environment Based on Release Channel in Expo
DESCRIPTION: This JavaScript function demonstrates how to determine the environment (production, staging, or development) based on the current release channel in an Expo app.

LANGUAGE: javascript
CODE:
import * as Updates from 'expo-updates';

function getEnvironment() {
  if (Updates.releaseChannel.startsWith('prod')) {
    // matches prod-v1, prod-v2, prod-v3
    return { envName: 'PRODUCTION', dbUrl: 'ccc', apiKey: 'ddd' }; // prod env settings
  } else if (Updates.releaseChannel.startsWith('staging')) {
    // matches staging-v1, staging-v2
    return { envName: 'STAGING', dbUrl: 'eee', apiKey: 'fff' }; // stage env settings
  } else {
    // assume any other release channel is development
    return { envName: 'DEVELOPMENT', dbUrl: 'aaa', apiKey: 'bbb' }; // dev env settings
  }
}

----------------------------------------

TITLE: Configuring Bundle Identifier for iOS in app.json
DESCRIPTION: Add the bundle identifier for your iOS app in the app.json configuration file. This is required for submitting to the Apple App Store.

LANGUAGE: json
CODE:
{
  "ios": {
    "bundleIdentifier": "com.yourcompany.yourapp"
  }
}

----------------------------------------

TITLE: Rendering Header Component in JSX
DESCRIPTION: Renders an H3 heading component with the text 'Animations' using the imported RawH3 component.

LANGUAGE: JSX
CODE:
<RawH3>Animations</RawH3>

----------------------------------------

TITLE: Installing Expo Dev Client and Updates
DESCRIPTION: Shows the command to install the latest versions of expo-dev-client and expo-updates packages, which are required for using the EAS Update extension in development builds.

LANGUAGE: bash
CODE:
$ npx expo install expo-dev-client expo-updates

----------------------------------------

TITLE: Importing APIInstallSection Component in Markdown
DESCRIPTION: This code snippet imports the APIInstallSection component from a local file path. It's used to render installation instructions for the SegmentedControl library.

LANGUAGE: markdown
CODE:
import { APIInstallSection } from '~/components/plugins/InstallSection';

----------------------------------------

TITLE: Importing and Rendering RawH3 Component in React
DESCRIPTION: This snippet demonstrates how to import the RawH3 component from a custom UI library and render it with the text 'app'. This is likely used as a heading in the app's navigation structure.

LANGUAGE: JavaScript
CODE:
import { RawH3 } from '~/ui/components/Text';

<RawH3>app</RawH3>

----------------------------------------

TITLE: Basic Workflow Name Configuration
DESCRIPTION: Defines the human-friendly name of the workflow displayed in the Expo dashboard

LANGUAGE: yaml
CODE:
name: My workflow

----------------------------------------

TITLE: Setting Custom Main File in package.json for Expo
DESCRIPTION: This JSON snippet shows how to set a custom main file in the package.json file for an Expo project. In this example, 'src/main.js' is set as the entry file.

LANGUAGE: json
CODE:
{
  "main": "src/main.js"
}

----------------------------------------

TITLE: Creating Multi-Platform Production Builds with EAS CLI
DESCRIPTION: Command for building production versions for both Android and iOS platforms simultaneously using the --platform all flag.

LANGUAGE: bash
CODE:
$ eas build --platform all

----------------------------------------

TITLE: Installing Zulu JDK 17 on macOS using Homebrew
DESCRIPTION: Command to install Azul Zulu JDK 17 using Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install --cask zulu@17

----------------------------------------

TITLE: Configuring Stripe Plugin in Expo
DESCRIPTION: Configuration setup for the @stripe/stripe-react-native plugin in app.json. Includes options for setting merchantIdentifier for Apple Pay and enabling Google Pay for Android.

LANGUAGE: json
CODE:
{
  "expo": {
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": string | string [],
          "enableGooglePay": boolean
        }
      ]
    ],
  }
}

----------------------------------------

TITLE: Showing Splash Screen on iOS
DESCRIPTION: Fixed showing the splash screen again when the app is reloaded on iOS.

LANGUAGE: Objective-C
CODE:
// Implementation details not provided in changelog

----------------------------------------

TITLE: Configuring Redux Store with DevTools Plugin
DESCRIPTION: Demonstrates how to configure a Redux store to use the Expo DevTools plugin enhancer. This setup disables the built-in dev tools and adds the Expo-specific enhancer.

LANGUAGE: js
CODE:
import devToolsEnhancer from 'redux-devtools-expo-dev-plugin';

const store = configureStore({
  reducer: rootReducer,
  devTools: false,
  enhancers: getDefaultEnhancers => getDefaultEnhancers().concat(devToolsEnhancer()),
});

----------------------------------------

TITLE: Installing react-native-view-shot with yarn
DESCRIPTION: Commands to install the react-native-view-shot library using yarn and expo.

LANGUAGE: bash
CODE:
yarn add react-native-view-shot

# In Expo

expo install react-native-view-shot

----------------------------------------

TITLE: Using Expo Dev Tools Plugin in App Component
DESCRIPTION: Demonstrates how to import and use a custom dev tools plugin hook in an Expo app's root component.

LANGUAGE: jsx
CODE:
import { useMyDevToolsPlugin } from 'my-devtools-plugin';
import { Button } from 'react-native';

export default function App() {
  const { sendPing } = useMyDevToolsPlugin();

  return (
    <View style={styles.container}>
      <Button
        title="Ping"
        onPress={() => {
          sendPing();
        }}
      />
    </View>
  );
}

----------------------------------------

TITLE: Modifying EAS Configuration for Local Testing
DESCRIPTION: This diff shows the changes needed in the eas.json file to enable local testing of the EAS build. It adds a LOCAL_TESTING environment variable.

LANGUAGE: diff
CODE:
--- a/packages/expo-updates/e2e/fixtures/project_files/eas.json
+++ b/packages/expo-updates/e2e/fixtures/project_files/eas.json
@@ -15,7 +15,8 @@
     "updates_testing_debug": {
       "env": {
-        "EX_UPDATES_NATIVE_DEBUG": "1"
+        "EX_UPDATES_NATIVE_DEBUG": "1",
+        "LOCAL_TESTING": "1"
       },
       "android": {
         "gradleCommand": ":app:assembleRelease :app:assembleAndroidTest -DtestBuildType=release",

----------------------------------------

TITLE: Setting Environment Variable for Debug Mode in expo-updates
DESCRIPTION: This snippet shows how to set an environment variable to enable expo-updates in debug builds. This is useful when you want to step through the code with breakpoints.

LANGUAGE: bash
CODE:
export EX_UPDATES_NATIVE_DEBUG=1

----------------------------------------

TITLE: HTML Structure for expo-test-runner Documentation
DESCRIPTION: Basic HTML markup for the package documentation header, including centered layout, title, description, and badge links to NPM and license information.

LANGUAGE: html
CODE:
<div align="center">
  <h1>expo-test-runner</h1>
  <p></p>
  <p>Script that enchants your test experience!</p>
  <sup>
    <a href="https://www.npmjs.com/package/expo-test-runner">
      <img src="https://img.shields.io/npm/v/expo-test-runner?style=flat-square" alt="releases" />
    </a>
    <a href="https://github.com/expo/expo-test-runner/blob/main/LICENSE.md">
      <img src="https://img.shields.io/github/license/expo/expo-test-runner?style=flat-square" alt="license" />
    </a>
  </sup>
  <br />

  <br />
</div>

----------------------------------------

TITLE: Using Expo Modules Gradle Plugin on Android
DESCRIPTION: Started using expo modules gradle plugin on Android.

LANGUAGE: Java
CODE:
// No code snippet provided, this is a build configuration change

----------------------------------------

TITLE: Installing expo-linking in bare React Native projects
DESCRIPTION: This command installs the expo-linking package using npx and expo CLI. It should be run after ensuring that the expo package is installed and configured in the project.

LANGUAGE: bash
CODE:
npx expo install expo-linking

----------------------------------------

TITLE: Checking KeepAwake Availability in JavaScript
DESCRIPTION: Example of using the new isAvailableAsync method added in version 12.0.0 to check if KeepAwake is available.

LANGUAGE: javascript
CODE:
import * as KeepAwake from 'expo-keep-awake';

const isAvailable = await KeepAwake.isAvailableAsync();
console.log('KeepAwake available:', isAvailable);

----------------------------------------

TITLE: Creating Shared Library Target with Source Files
DESCRIPTION: Defines the shared library target and includes all necessary source files from common and src directories.

LANGUAGE: cmake
CODE:
add_library(
    ${PACKAGE_NAME} SHARED
    ${COMMON_DIR}/EXGLNativeApi.cpp
    ${COMMON_DIR}/EXGLNativeApi.h
    ${COMMON_DIR}/EXGLImageUtils.cpp
    ${COMMON_DIR}/EXGLImageUtils.h
    ${COMMON_DIR}/EXGLNativeContext.cpp
    ${COMMON_DIR}/EXGLNativeContext.h
    ${COMMON_DIR}/EXGLContextManager.cpp
    ${COMMON_DIR}/EXGLContextManager.h
    ${COMMON_DIR}/EXWebGLMethods.cpp
    ${COMMON_DIR}/EXWebGLMethods.h
    ${COMMON_DIR}/EXWebGLRenderer.cpp
    ${COMMON_DIR}/EXWebGLRenderer.h
    ${COMMON_DIR}/EXTypedArrayApi.cpp
    ${COMMON_DIR}/EXTypedArrayApi.h
    ./src/main/cpp/EXGLJniApi.cpp)

----------------------------------------

TITLE: Installing expo-cellular in bare React Native projects
DESCRIPTION: Command to install the expo-cellular package using npx and expo CLI.

LANGUAGE: bash
CODE:
npx expo install expo-cellular

----------------------------------------

TITLE: Changelog Entry Format in Markdown
DESCRIPTION: Standardized changelog entry format showing version numbers, dates, and categorized changes including breaking changes, new features, bug fixes and other updates.

LANGUAGE: markdown
CODE:
## [version] - [date]

### 🛠 Breaking changes

### 🎉 New features

### 🐛 Bug fixes

### 💡 Others

----------------------------------------

TITLE: Migrating BlurView to function component
DESCRIPTION: Converts the BlurView web implementation to a function component and fixes Reanimated errors related to setNativeProps removal.

LANGUAGE: JavaScript
CODE:
// Migrate web to a function component and fix reanimated errors related to `setNativeProps` being removed.

----------------------------------------

TITLE: Installing expo-blur package in bare React Native projects
DESCRIPTION: This command installs the expo-blur package using npx and expo CLI. It's used for adding the blur view component to bare React Native projects.

LANGUAGE: bash
CODE:
npx expo install expo-blur

----------------------------------------

TITLE: Configuring Android permissions for expo-background-fetch
DESCRIPTION: These XML entries add necessary permissions to the Android manifest for background fetch functionality, including receiving boot completed events and using wake locks.

LANGUAGE: xml
CODE:
<!-- Added permissions -->
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
<uses-permission android:name="android.permission.WAKE_LOCK" />

----------------------------------------

TITLE: Using GitHub Templates with Create Expo App
DESCRIPTION: Shows how to use GitHub repositories as templates for Create Expo App, including specifying branches, tags, or specific commits.

LANGUAGE: sh
CODE:
# Create from repository
npx create-expo --template https://github.com/:owner/:repo

# Create from repository using the `:ref` branch or tag
npx create-expo --template https://github.com/:owner/:repo/tree/:ref

# Create from repository using the `sdk-50` branch, and "templates/expo-template-bare-minimum" subdirectory
npx create-expo --template https://github.com/expo/expo/tree/sdk-50/templates/expo-template-bare-minimum

----------------------------------------

TITLE: Testing Beta Releases of Expo Module Creator
DESCRIPTION: This command allows testing of beta releases of the create-expo-module tool. It uses an environment variable to enable beta functionality before running the creation command.

LANGUAGE: bash
CODE:
EXPO_BETA=1 yarn create expo-module

----------------------------------------

TITLE: Resolving Expo Plugin Path - JavaScript
DESCRIPTION: Example of the expected file path format for resolving an Expo plugin module. The path should point directly to the index.js file in the CommonJS build output directory.

LANGUAGE: javascript
CODE:
./node_modules/test-plugin/lib/commonjs/index.js

----------------------------------------

TITLE: Configuring gradle.properties for Android
DESCRIPTION: Adds new architecture and Hermes settings to the gradle.properties file in the Android directory.

LANGUAGE: diff
CODE:
diff --git a/android/gradle.properties b/android/gradle.properties
index 20e2a01..e98ad88 100644
--- a/android/gradle.properties
+++ b/android/gradle.properties
@@ -20,4 +20,8 @@ kotlin.code.style=official
 
 # Enables namespacing of each library's R class so that its R class includes only the
 # resources declared in the library itself and none from the library's dependencies,
 # thereby reducing the size of the R class for that library
 android.nonTransitiveRClass=true
+newArchEnabled=true
+
+hermesEnabled=true

----------------------------------------

TITLE: Installing Expo Package with npm
DESCRIPTION: Adds the expo package to the project, ensuring compatibility with the React Native version.

LANGUAGE: bash
CODE:
$ npm install expo

----------------------------------------

TITLE: Defining Manifest and Asset Types in TypeScript
DESCRIPTION: TypeScript definitions for the Manifest and Asset types used in the Expo Updates v0 protocol. The Manifest includes fields for ID, creation date, runtime version, assets, and metadata. The Asset type defines properties for hash, key, content type, file extension, and URL.

LANGUAGE: typescript
CODE:
type Manifest = {
  id: string;
  createdAt: string;
  runtimeVersion: string;
  launchAsset: Asset;
  assets: Asset[];
  metadata: { [key: string]: string };
  extra: { [key: string]: any };
};

type Asset = {
  hash?: string;
  key: string;
  contentType: string;
  fileExtension?: string;
  url: string;
};

----------------------------------------

TITLE: Checking for and Applying Updates with expo-updates
DESCRIPTION: Demonstrates how to manually check for updates, download them, and reload the app using the expo-updates API.

LANGUAGE: javascript
CODE:
try {
  const update = await Updates.checkForUpdateAsync();
  if (update.isAvailable) {
    await Updates.fetchUpdateAsync();
    // ... notify user of update ...
    Updates.reloadAsync();
  }
} catch (e) {
  // handle or log error
}