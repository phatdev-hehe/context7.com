TITLE: TypeScript Type Checking Example
DESCRIPTION: Shows how TypeScript catches spelling errors in property names during compilation through static type checking.

LANGUAGE: typescript
CODE:
const obj = { width: 10, height: 15 };
const area = obj.width * obj.heigth;

----------------------------------------

TITLE: Function Parameter Type Annotations in TypeScript
DESCRIPTION: Illustrates how to add type annotations to function parameters and return values.

LANGUAGE: typescript
CODE:
// Parameter type annotation
function greet(name: string) {
  console.log("Hello, " + name.toUpperCase() + "!!");
}

----------------------------------------

TITLE: Implementing a Generic Class in TypeScript
DESCRIPTION: Demonstrates the creation of a generic class that can work with different types of numeric values.

LANGUAGE: typescript
CODE:
class GenericNumber<NumType> {
  zeroValue: NumType;
  add: (x: NumType, y: NumType) => NumType;
}

----------------------------------------

TITLE: Using Generic Constraints in TypeScript
DESCRIPTION: Shows how to constrain generic types to those with specific properties using interfaces and the 'extends' keyword.

LANGUAGE: typescript
CODE:
interface Lengthwise {
  length: number;
}

function loggingIdentity<Type extends Lengthwise>(arg: Type): Type {
  console.log(arg.length);
  return arg;
}

----------------------------------------

TITLE: Implementing Accessors in TypeScript
DESCRIPTION: Shows how to use getters and setters to control access to class properties in TypeScript.

LANGUAGE: typescript
CODE:
const fullNameMaxLength = 10;

class Employee {
  private _fullName: string = "";

  get fullName(): string {
    return this._fullName;
  }

  set fullName(newName: string) {
    if (newName && newName.length > fullNameMaxLength) {
      throw new Error("fullName has a max length of " + fullNameMaxLength);
    }

    this._fullName = newName;
  }
}

let employee = new Employee();
employee.fullName = "Bob Smith";

if (employee.fullName) {
  console.log(employee.fullName);
}

----------------------------------------

TITLE: Tuple Types in TypeScript
DESCRIPTION: Shows how to define and use tuple types for fixed-length arrays with specific types at each index.

LANGUAGE: typescript
CODE:
type StringNumberPair = [string, number];

function doSomething(pair: [string, number]) {
  const a = pair[0];
  const b = pair[1];
  // ...
}

doSomething(["hello", 42]);

----------------------------------------

TITLE: Defining Basic Conditional Types in TypeScript
DESCRIPTION: Demonstrates the syntax and basic usage of conditional types in TypeScript, showing how types can be conditionally selected based on type relationships.

LANGUAGE: typescript
CODE:
interface Animal {
  live(): void;
}
interface Dog extends Animal {
  woof(): void;
}

type Example1 = Dog extends Animal ? number : string;

type Example2 = RegExp extends Animal ? number : string;

----------------------------------------

TITLE: Generics Implementation
DESCRIPTION: Shows how to use generics to create type-safe collections and interfaces with variable types.

LANGUAGE: typescript
CODE:
interface Backpack<Type> {
  add: (obj: Type) => void;
  get: () => Type;
}

----------------------------------------

TITLE: Object Types in TypeScript
DESCRIPTION: Demonstrates defining and using object types with properties and optional fields.

LANGUAGE: typescript
CODE:
// The parameter's type annotation is an object type
function printCoord(pt: { x: number; y: number }) {
  console.log("The coordinate's x value is " + pt.x);
  console.log("The coordinate's y value is " + pt.y);
}
printCoord({ x: 3, y: 7 });

----------------------------------------

TITLE: Implementing a Generic Identity Function in TypeScript
DESCRIPTION: Demonstrates how to create a generic identity function that works with any type, preserving type information.

LANGUAGE: typescript
CODE:
function identity<Type>(arg: Type): Type {
  return arg;
}

----------------------------------------

TITLE: Basic Interface Implementation in TypeScript
DESCRIPTION: Demonstrates a simple interface implementation for object type checking with a labeled object example.

LANGUAGE: typescript
CODE:
interface LabeledValue {
  label: string;
}

function printLabel(labeledObj: LabeledValue) {
  console.log(labeledObj.label);
}

let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj);

----------------------------------------

TITLE: Array Type Declarations in TypeScript
DESCRIPTION: Shows two ways to declare array types: using square bracket notation and using generic Array type.

LANGUAGE: typescript
CODE:
let list: number[] = [1, 2, 3];

LANGUAGE: typescript
CODE:
let list: Array<number> = [1, 2, 3];

----------------------------------------

TITLE: Defining Callback Return Types in TypeScript
DESCRIPTION: Illustrates the proper way to define return types for callbacks in TypeScript, using 'void' instead of 'any' when the return value is ignored.

LANGUAGE: typescript
CODE:
/* WRONG */
function fn(x: () => any) {
  x();
}

LANGUAGE: typescript
CODE:
/* OK */
function fn(x: () => void) {
  x();
}

LANGUAGE: typescript
CODE:
function fn(x: () => void) {
  var k = x(); // oops! meant to do something else
  k.doSomething(); // error, but would be OK if the return type had been 'any'
}

----------------------------------------

TITLE: Function with Type Checking Example
DESCRIPTION: Shows how TypeScript can catch potential runtime errors through static type checking.

LANGUAGE: typescript
CODE:
function greet(person: string, date: Date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}

----------------------------------------

TITLE: Basic Type Inference in TypeScript
DESCRIPTION: Demonstrates how TypeScript infers the type of a variable from its initial value without an explicit type annotation.

LANGUAGE: typescript
CODE:
let x = 3;

----------------------------------------

TITLE: Implementing Generic Identity Function in TypeScript
DESCRIPTION: Demonstrates how to create a basic generic identity function that returns the input argument of any type.

LANGUAGE: typescript
CODE:
function identity<T>(arg: T): T {
  return arg;
}

----------------------------------------

TITLE: Creating Named Interfaces in TypeScript
DESCRIPTION: Shows how to define a named interface for an object type.

LANGUAGE: typescript
CODE:
interface Person {
  name: string;
  age: number;
}

function greet(person: Person) {
  return "Hello " + person.name;
}

----------------------------------------

TITLE: Type Inference Example
DESCRIPTION: Demonstrates TypeScript's ability to infer types without explicit annotations.

LANGUAGE: typescript
CODE:
let msg = "hello there!";

----------------------------------------

TITLE: Type Guards with In Operator
DESCRIPTION: Example showing how to use the 'in' operator as a type guard to narrow down union types

LANGUAGE: typescript
CODE:
function move(pet: Fish | Bird) {
  if ("swim" in pet) {
    return pet.swim();
  }
  return pet.fly();
}

----------------------------------------

TITLE: Type Annotations for Variables in TypeScript
DESCRIPTION: Shows how to explicitly annotate variable types in TypeScript using let, const, and var declarations.

LANGUAGE: typescript
CODE:
let myName: string = "Alice";
//        ^^^^^^^^ Type annotation

----------------------------------------

TITLE: Optional Properties in TypeScript Object Types
DESCRIPTION: Shows how to define optional properties in an interface using the question mark (?).

LANGUAGE: typescript
CODE:
interface PaintOptions {
  shape: Shape;
  xPos?: number;
  yPos?: number;
}

function paintShape(opts: PaintOptions) {
  // ...
}

----------------------------------------

TITLE: Generic Object Types in TypeScript
DESCRIPTION: Demonstrates how to create generic object types using type parameters.

LANGUAGE: typescript
CODE:
interface Box<Type> {
  contents: Type;
}

let box: Box<string>;

----------------------------------------

TITLE: Using Type Predicates for Custom Type Guards
DESCRIPTION: Demonstrates the use of type predicates to create custom type guards, allowing for more precise type narrowing in user-defined scenarios.

LANGUAGE: typescript
CODE:
type Fish = { swim: () => void };
type Bird = { fly: () => void };

function isFish(pet: Fish | Bird): pet is Fish {
  return (pet as Fish).swim !== undefined;
}

let pet = getSmallPet();

if (isFish(pet)) {
  pet.swim();
} else {
  pet.fly();
}

----------------------------------------

TITLE: Implementing Generic Parameter Defaults in TypeScript
DESCRIPTION: Demonstrates how to use default type parameters in generic functions, making them optional to specify.

LANGUAGE: typescript
CODE:
declare function create<T extends HTMLElement = HTMLDivElement, U extends HTMLElement[] = T[]>(
  element?: T,
  children?: U
): Container<T, U>;

----------------------------------------

TITLE: Implementing Inheritance in TypeScript
DESCRIPTION: Shows how to create derived classes using inheritance in TypeScript, including method overriding.

LANGUAGE: typescript
CODE:
class Animal {
  name: string;
  constructor(theName: string) {
    this.name = theName;
  }
  move(distanceInMeters: number = 0) {
    console.log(`${this.name} moved ${distanceInMeters}m.`);
  }
}

class Snake extends Animal {
  constructor(name: string) {
    super(name);
  }
  move(distanceInMeters = 5) {
    console.log("Slithering...");
    super.move(distanceInMeters);
  }
}

class Horse extends Animal {
  constructor(name: string) {
    super(name);
  }
  move(distanceInMeters = 45) {
    console.log("Galloping...");
    super.move(distanceInMeters);
  }
}

let sam = new Snake("Sammy the Python");
let tom: Animal = new Horse("Tommy the Palomino");

sam.move();
tom.move(34);

----------------------------------------

TITLE: Basic Structural Typing in TypeScript
DESCRIPTION: Demonstrates how structural typing allows compatibility between a class and interface with matching members, even without explicit implementation.

LANGUAGE: typescript
CODE:
interface Pet {
  name: string;
}

class Dog {
  name: string;
}

let pet: Pet;
// OK, because of structural typing
pet = new Dog();

----------------------------------------

TITLE: Readonly Properties in TypeScript Interfaces
DESCRIPTION: Illustrates how to create immutable properties using the readonly modifier in interfaces.

LANGUAGE: typescript
CODE:
interface Point {
  readonly x: number;
  readonly y: number;
}

let p1: Point = { x: 10, y: 20 };
// p1.x = 5; // error!

----------------------------------------

TITLE: Using Generic Functions with Type Argument Inference in TypeScript
DESCRIPTION: Shows how to use a generic function with type argument inference, allowing the compiler to automatically determine the type based on the input.

LANGUAGE: typescript
CODE:
let output = identity("myString");
//       ^?

----------------------------------------

TITLE: Defining a Basic Class in TypeScript
DESCRIPTION: Demonstrates how to define a simple class with a constructor, property, and method in TypeScript.

LANGUAGE: typescript
CODE:
class Greeter {
  greeting: string;

  constructor(message: string) {
    this.greeting = message;
  }

  greet() {
    return "Hello, " + this.greeting;
  }
}

let greeter = new Greeter("world");

----------------------------------------

TITLE: Merging Interfaces in TypeScript
DESCRIPTION: Demonstrates how TypeScript merges multiple interface declarations with the same name into a single interface. This example shows merging of non-function and function members.

LANGUAGE: typescript
CODE:
interface Box {
  height: number;
  width: number;
}

interface Box {
  scale: number;
}

let box: Box = { height: 5, width: 6, scale: 10 };

----------------------------------------

TITLE: Generic Function Example
DESCRIPTION: Demonstrates generic function implementation with type parameters for type-safe array operations.

LANGUAGE: typescript
CODE:
function firstElement<Type>(arr: Type[]): Type | undefined {
  return arr[0];
}

// s is of type 'string'
const s = firstElement(["a", "b", "c"]);
// n is of type 'number'
const n = firstElement([1, 2, 3]);
// u is of type undefined
const u = firstElement([]);

----------------------------------------

TITLE: Using the any Type in TypeScript
DESCRIPTION: Demonstrates using the any type to disable type checking for a variable, allowing access to any properties or methods without compiler errors.

LANGUAGE: typescript
CODE:
let obj: any = { x: 0 };
// None of the following lines of code will throw compiler errors.
// Using `any` disables all further type checking, and it is assumed
// you know the environment better than TypeScript.
obj.foo();
obj();
obj.bar = 100;
obj = "hello";
const n: number = obj;

----------------------------------------

TITLE: Using Access Modifiers in TypeScript Classes
DESCRIPTION: Demonstrates the use of public, private, and protected access modifiers in TypeScript classes.

LANGUAGE: typescript
CODE:
class Animal {
  private name: string;
  constructor(theName: string) {
    this.name = theName;
  }
}

new Animal("Cat").name; // Error: 'name' is private

----------------------------------------

TITLE: Type Inference in TypeScript
DESCRIPTION: Demonstrates how TypeScript automatically infers types from variable assignments without explicit type declarations.

LANGUAGE: typescript
CODE:
let helloWorld = "Hello World";

----------------------------------------

TITLE: Implementing padLeft Function with Type Narrowing
DESCRIPTION: Demonstrates type narrowing using typeof checks to handle different padding types (number or string) in a padLeft function.

LANGUAGE: typescript
CODE:
function padLeft(padding: number | string, input: string): string {
  if (typeof padding === "number") {
    return " ".repeat(padding) + input;
  }
  return padding + input;
}

----------------------------------------

TITLE: Configuring TypeScript Strict Mode
DESCRIPTION: The 'strict' compiler flag enables comprehensive type checking behavior in TypeScript. When enabled, it activates all strict mode family options by default, though individual checks can be disabled as needed. Future TypeScript versions may add additional strict checks under this flag.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "strict": true
  }
}

----------------------------------------

TITLE: Union Types
DESCRIPTION: Demonstrates the use of union types to allow multiple type possibilities for a single variable or parameter.

LANGUAGE: typescript
CODE:
function getLength(obj: string | string[]) {
  return obj.length;
}

----------------------------------------

TITLE: Defining Named and Anonymous Functions in TypeScript
DESCRIPTION: Demonstrates how to create named and anonymous functions in TypeScript, showing the basic syntax for function declarations.

LANGUAGE: typescript
CODE:
// Named function
function add(x, y) {
  return x + y;
}

// Anonymous function
let myAdd = function (x, y) {
  return x + y;
};

----------------------------------------

TITLE: Using Awaited Type in TypeScript
DESCRIPTION: Demonstrates the Awaited utility type for unwrapping Promise types recursively

LANGUAGE: typescript
CODE:
type A = Awaited<Promise<string>>;
type B = Awaited<Promise<Promise<number>>>;
type C = Awaited<boolean | Promise<number>>;

----------------------------------------

TITLE: ReadonlyArray Type in TypeScript
DESCRIPTION: Demonstrates the use of ReadonlyArray type for immutable arrays.

LANGUAGE: typescript
CODE:
function doStuff(values: ReadonlyArray<string>) {
  const copy = values.slice();
  console.log(`The first value is ${values[0]}`);
  // Error: Property 'push' does not exist on type 'readonly string[]'.
  // values.push("hello!");
}

----------------------------------------

TITLE: Mapped Types
DESCRIPTION: Example of creating new types by transforming properties of existing types

LANGUAGE: typescript
CODE:
type Partial<T> = {
  [P in keyof T]?: T[P];
};

type Readonly<T> = {
  readonly [P in keyof T]: T[P];
};

----------------------------------------

TITLE: Defining Anonymous Object Types in TypeScript
DESCRIPTION: Demonstrates how to define an anonymous object type inline within a function parameter.

LANGUAGE: typescript
CODE:
function greet(person: { name: string; age: number }) {
  return "Hello " + person.name;
}

----------------------------------------

TITLE: Using Conditional Types with Generics in TypeScript
DESCRIPTION: Shows how conditional types can be combined with generics to create flexible type definitions that adapt based on input types.

LANGUAGE: typescript
CODE:
type NameOrId<T extends number | string> = T extends number
  ? IdLabel
  : NameLabel;

function createLabel<T extends number | string>(idOrName: T): NameOrId<T> {
  throw "unimplemented";
}

let a = createLabel("typescript");
let b = createLabel(2.8);
let c = createLabel(Math.random() ? "hello" : 42);

----------------------------------------

TITLE: Applying Generic Constraints in TypeScript Functions
DESCRIPTION: Demonstrates how to use generic constraints to ensure that the type parameter has specific properties or methods.

LANGUAGE: typescript
CODE:
interface Lengthwise {
  length: number;
}

function loggingIdentity<T extends Lengthwise>(arg: T): T {
  console.log(arg.length);
  return arg;
}

----------------------------------------

TITLE: Handling union types in TypeScript
DESCRIPTION: Shows how to work with union types in TypeScript, including type narrowing using type predicates.

LANGUAGE: typescript
CODE:
function start(
  arg: string | string[] | (() => string) | { s: string }
): string {
  if (typeof arg === "string") {
    return commonCase(arg);
  } else if (Array.isArray(arg)) {
    return arg.map(commonCase).join(",");
  } else if (typeof arg === "function") {
    return commonCase(arg());
  } else {
    return commonCase(arg.s);
  }

  function commonCase(s: string): string {
    return s;
  }
}

----------------------------------------

TITLE: Access Modifiers Usage
DESCRIPTION: Shows how to use public, private and protected access modifiers on class members.

LANGUAGE: typescript
CODE:
class Greeter {
  public greet() {
    console.log("Hello, " + this.getName());
  }
  protected getName() {
    return "hi";
  }
}

----------------------------------------

TITLE: Defining a Generic Interface in TypeScript
DESCRIPTION: Illustrates how to create a generic interface that describes a function with a generic type parameter.

LANGUAGE: typescript
CODE:
interface GenericIdentityFn<Type> {
  (arg: Type): Type;
}

----------------------------------------

TITLE: Basic Mapped Type with Property Key Iteration
DESCRIPTION: Shows how to create a mapped type that transforms all properties of an input type to boolean values

LANGUAGE: typescript
CODE:
type OptionsFlags<Type> = {
  [Property in keyof Type]: boolean;
};

type Features = {
  darkMode: () => void;
  newUserProfile: () => void;
};

type FeatureOptions = OptionsFlags<Features>;

----------------------------------------

TITLE: Exhaustiveness Checking with never Type
DESCRIPTION: Demonstrates how to use the never type for exhaustiveness checking in switch statements, ensuring all cases of a discriminated union are handled.

LANGUAGE: typescript
CODE:
type Shape = Circle | Square;

function getArea(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.sideLength ** 2;
    default:
      const _exhaustiveCheck: never = shape;
      return _exhaustiveCheck;
  }
}

----------------------------------------

TITLE: Intersection Types with Error Handling
DESCRIPTION: Demonstrates how to combine multiple interfaces using intersection types to create new types with combined features. Shows practical usage with network response handling.

LANGUAGE: typescript
CODE:
interface ErrorHandling {
  success: boolean;
  error?: { message: string };
}

interface ArtworksData {
  artworks: { title: string }[];
}

interface ArtistsData {
  artists: { name: string }[];
}

type ArtworksResponse = ArtworksData & ErrorHandling;
type ArtistsResponse = ArtistsData & ErrorHandling;

----------------------------------------

TITLE: Class Fields with Type Annotations
DESCRIPTION: Shows how to declare class fields with type annotations and initialization.

LANGUAGE: typescript
CODE:
class Point {
  x: number;
  y: number;
}

const pt = new Point();
pt.x = 0;
pt.y = 0;

----------------------------------------

TITLE: Defining Full Function Types in TypeScript
DESCRIPTION: Illustrates how to write out the complete type of a function, including parameter types and return type, using arrow notation.

LANGUAGE: typescript
CODE:
let myAdd: (x: number, y: number) => number = function (
  x: number,
  y: number
): number {
  return x + y;
};

----------------------------------------

TITLE: Merging Namespaces with Classes in TypeScript
DESCRIPTION: Shows how TypeScript allows merging namespaces with classes to create inner classes or add static members to existing classes. The namespace declaration must follow the class declaration it will merge with.

LANGUAGE: typescript
CODE:
class Album {
  label: Album.AlbumLabel;
}
namespace Album {
  export class AlbumLabel {}
}

----------------------------------------

TITLE: Using the TypeScript CLI (tsc)
DESCRIPTION: Examples of how to use the TypeScript compiler CLI (tsc) for various compilation scenarios, including project-based compilation, single file compilation, and using specific compiler options.

LANGUAGE: sh
CODE:
# Run a compile based on a backwards look through the fs for a tsconfig.json
tsc

# Emit JS for just the index.ts with the compiler defaults
tsc index.ts

# Emit JS for any .ts files in the folder src, with the default settings
tsc src/*.ts

# Emit files referenced in with the compiler settings from tsconfig.production.json
tsc --project tsconfig.production.json

# Emit d.ts files for a js file with showing compiler options which are booleans
tsc index.js --declaration --emitDeclarationOnly

# Emit a single .js file from two files via compiler options which take string arguments
tsc app.ts util.ts --target esnext --outfile index.js

----------------------------------------

TITLE: Basic Union Type Example with padLeft Function
DESCRIPTION: Demonstrates how to use union types to accept multiple parameter types. The function accepts either a number or string for padding and applies it accordingly.

LANGUAGE: typescript
CODE:
function padLeft(value: string, padding: string | number) {
  if (typeof padding === "number") {
    return Array(padding + 1).join(" ") + value;
  }
  if (typeof padding === "string") {
    return padding + value;
  }
  throw new Error(`Expected string or number, got '${typeof padding}'.`);
}

----------------------------------------

TITLE: Basic Template Literal Type Declaration
DESCRIPTION: Demonstrates how to create a simple template literal type by concatenating a string literal with a type variable.

LANGUAGE: typescript
CODE:
type World = "world";

type Greeting = `hello ${World}`;

----------------------------------------

TITLE: Type Exports in TypeScript
DESCRIPTION: Demonstrates exporting type definitions and interfaces.

LANGUAGE: typescript
CODE:
export type Cat = { breed: string; yearOfBirth: number };

export interface Dog {
  breeds: string[];
  yearOfBirth: number;
}

----------------------------------------

TITLE: Defining and Using the Omit Helper Type in TypeScript
DESCRIPTION: Demonstrates the usage of the new Omit helper type in TypeScript 3.5. It creates a new type by removing specified properties from an existing type.

LANGUAGE: typescript
CODE:
type Person = {
  name: string;
  age: number;
  location: string;
};

type QuantumPerson = Omit<Person, "location">;

// equivalent to
type QuantumPerson = {
  name: string;
  age: number;
};

----------------------------------------

TITLE: Complex Union Type Combinations
DESCRIPTION: Demonstrates how multiple union types are cross-multiplied in template literal interpolation positions.

LANGUAGE: typescript
CODE:
type EmailLocaleIDs = "welcome_email" | "email_heading";
type FooterLocaleIDs = "footer_title" | "footer_sendoff";
type AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;
type Lang = "en" | "ja" | "pt";

type LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`;

----------------------------------------

TITLE: Optional Properties in TypeScript Interfaces
DESCRIPTION: Shows how to define optional properties in interfaces using the question mark syntax and their implementation in a square creation function.

LANGUAGE: typescript
CODE:
interface SquareConfig {
  color?: string;
  width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
  let newSquare = { color: "white", area: 100 };
  if (config.color) {
    newSquare.color = config.color;
  }
  if (config.width) {
    newSquare.area = config.width * config.width;
  }
  return newSquare;
}

let mySquare = createSquare({ color: "black" });

----------------------------------------

TITLE: React Component Type Definition
DESCRIPTION: Example of defining a React component with TypeScript, including props interface and proper type checking.

LANGUAGE: typescript
CODE:
interface Props {
  foo: string;
}

class MyComponent extends React.Component<Props, {}> {
  render() {
    return <span>{this.props.foo}</span>;
  }
}

<MyComponent foo="bar" />; // ok
<MyComponent foo={0} />; // error

----------------------------------------

TITLE: TypeScript Declaration File Template for Function Modules
DESCRIPTION: This comprehensive template shows how to create a TypeScript declaration file for a function module. It includes handling for UMD and ES module imports, function overloads, namespace declarations, and various type definitions. The template is designed to be flexible and cover common use cases for function modules.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

/*~ This is the module template file for function modules.
 *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.
 *~ For example, if you were writing a file for "super-greeter", this
 *~ file should be 'super-greeter/index.d.ts'
 */

// Note that ES6 modules cannot directly export class objects.
// This file should be imported using the CommonJS-style:
//   import x = require('[~THE MODULE~]');
//
// Alternatively, if --allowSyntheticDefaultImports or
// --esModuleInterop is turned on, this file can also be
// imported as a default import:
//   import x from '[~THE MODULE~]';
//
// Refer to the TypeScript documentation at
// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require
// to understand common workarounds for this limitation of ES6 modules.

/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when
 *~ loaded outside a module loader environment, declare that global here.
 *~ Otherwise, delete this declaration.
 */
export as namespace myFuncLib;

/*~ This declaration specifies that the function
 *~ is the exported object from the file
 */
export = Greeter;

/*~ This example shows how to have multiple overloads for your function */
declare function Greeter(name: string): Greeter.NamedReturnType;
declare function Greeter(length: number): Greeter.LengthReturnType;

/*~ If you want to expose types from your module as well, you can
 *~ place them in this block. Often you will want to describe the
 *~ shape of the return type of the function; that type should
 *~ be declared in here, as this example shows.
 *~
 *~ Note that if you decide to include this namespace, the module can be
 *~ incorrectly imported as a namespace object, unless
 *~ --esModuleInterop is turned on:
 *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!
 */
declare namespace Greeter {
  export interface LengthReturnType {
    width: number;
    height: number;
  }
  export interface NamedReturnType {
    firstName: string;
    lastName: string;
  }

  /*~ If the module also has properties, declare them here. For example,
   *~ this declaration says that this code is legal:
   *~   import f = require('super-greeter');
   *~   console.log(f.defaultName);
   */
  export const defaultName: string;
  export let defaultLength: number;
}

----------------------------------------

TITLE: Handling Callback Overloads in TypeScript
DESCRIPTION: Demonstrates the proper way to handle function overloads with callbacks in TypeScript declarations, using a single overload with maximum arity.

LANGUAGE: typescript
CODE:
/* WRONG */
declare function beforeAll(action: () => void, timeout?: number): void;
declare function beforeAll(
  action: (done: DoneFn) => void,
  timeout?: number
): void;

LANGUAGE: typescript
CODE:
/* OK */
declare function beforeAll(
  action: (done: DoneFn) => void,
  timeout?: number
): void;

----------------------------------------

TITLE: Discriminated Unions for Shape Area Calculation
DESCRIPTION: Shows how to use discriminated unions to create type-safe code for calculating areas of different shapes, leveraging TypeScript's ability to narrow types based on a discriminant property.

LANGUAGE: typescript
CODE:
interface Circle {
  kind: "circle";
  radius: number;
}

interface Square {
  kind: "square";
  sideLength: number;
}

type Shape = Circle | Square;

function getArea(shape: Shape) {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.sideLength ** 2;
  }
}

----------------------------------------

TITLE: Declaring Reusable Types with Type Aliases in TypeScript
DESCRIPTION: Demonstrates the use of type aliases to create a shorthand for complex types. This example creates a 'GreetingLike' type that can be a string, a function, or a class instance.

LANGUAGE: typescript
CODE:
type GreetingLike = string | (() => string) | MyGreeter;

declare function greet(g: GreetingLike): void;

----------------------------------------

TITLE: Implementing a Basic Decorator in TypeScript
DESCRIPTION: Demonstrates the implementation of a simple decorator function that can be used to annotate class declarations.

LANGUAGE: typescript
CODE:
function sealed(target) {
  // do something with 'target' ...
}

----------------------------------------

TITLE: Contextual Typing in TypeScript Event Handlers
DESCRIPTION: Shows how TypeScript uses contextual typing to infer the type of function parameters based on their usage context, specifically for event handlers.

LANGUAGE: typescript
CODE:
window.onmousedown = function (mouseEvent) {
  console.log(mouseEvent.button);
  console.log(mouseEvent.kangaroo);
};

----------------------------------------

TITLE: Basic Index Signature Type in TypeScript
DESCRIPTION: Demonstrates the basic syntax for index signatures, which form the foundation for mapped types

LANGUAGE: typescript
CODE:
type OnlyBoolsAndHorses = {
  [key: string]: boolean | Horse;
};

const conforms: OnlyBoolsAndHorses = {
  del: true,
  rodney: false,
};

----------------------------------------

TITLE: Function Type Expression Basics
DESCRIPTION: Demonstrates basic function type expressions in TypeScript using arrow function syntax to define parameter and return types.

LANGUAGE: typescript
CODE:
function greeter(fn: (a: string) => void) {
  fn("Hello, World");
}

function printToConsole(s: string) {
  console.log(s);
}

greeter(printToConsole);

----------------------------------------

TITLE: React useState Pattern Example
DESCRIPTION: Example showing TypeScript's support for React's useState pattern

LANGUAGE: typescript
CODE:
useState

----------------------------------------

TITLE: Using Static Properties in TypeScript Classes
DESCRIPTION: Demonstrates how to use static properties in TypeScript classes, which are shared across all instances.

LANGUAGE: typescript
CODE:
class Grid {
  static origin = { x: 0, y: 0 };

  calculateDistanceFromOrigin(point: { x: number; y: number }) {
    let xDist = point.x - Grid.origin.x;
    let yDist = point.y - Grid.origin.y;
    return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
  }

  constructor(public scale: number) {}
}

let grid1 = new Grid(1.0); // 1x scale
let grid2 = new Grid(5.0); // 5x scale

console.log(grid1.calculateDistanceFromOrigin({ x: 10, y: 10 }));
console.log(grid2.calculateDistanceFromOrigin({ x: 10, y: 10 }));

----------------------------------------

TITLE: CommonJS Import Example
DESCRIPTION: An example of importing an exported value from a CommonJS module.

LANGUAGE: javascript
CODE:
// b.js
const a = require("./a");
console.log(a.message); // 'Hello from a.js'

----------------------------------------

TITLE: Demonstrating the satisfies Operator in TypeScript
DESCRIPTION: Shows how to use the new satisfies operator to validate types while preserving specific type information for inference purposes.

LANGUAGE: typescript
CODE:
const palette = {
    red: [255, 0, 0],
    green: "#00ff00",
    bleu: [0, 0, 255]
//  ^^^^ sacrebleu - we've made a typo!
};

// We want to be able to use string methods on 'green'...
const greenNormalized = palette.green.toUpperCase();

----------------------------------------

TITLE: Implementing Readonly Properties in TypeScript
DESCRIPTION: Shows how to use the readonly modifier to create read-only properties in TypeScript classes.

LANGUAGE: typescript
CODE:
class Octopus {
  readonly name: string;
  readonly numberOfLegs: number = 8;

  constructor(theName: string) {
    this.name = theName;
  }
}

let dad = new Octopus("Man with the 8 strong legs");
dad.name = "Man with the 3-piece suit"; // Error: name is readonly

----------------------------------------

TITLE: Intersection Types in TypeScript
DESCRIPTION: Shows how to create intersection types using the & operator.

LANGUAGE: typescript
CODE:
interface Colorful {
  color: string;
}
interface Circle {
  radius: number;
}

type ColorfulCircle = Colorful & Circle;

----------------------------------------

TITLE: Working with readonly types in TypeScript
DESCRIPTION: Shows various ways to create immutable types in TypeScript, including readonly properties and const assertions.

LANGUAGE: typescript
CODE:
interface Rx {
  readonly x: number;
}
let rx: Rx = { x: 1 };
rx.x = 12; // error

let a: ReadonlyArray<number> = [1, 2, 3];
let b: readonly number[] = [1, 2, 3];
a.push(102); // error
b[0] = 101; // error

let c = [1, 2, 3] as const;
c.push(102); // error
c[0] = 101; // error

----------------------------------------

TITLE: Conditional Types
DESCRIPTION: Shows how to create conditional types that select between two possible types based on a condition

LANGUAGE: typescript
CODE:
type TypeName<T> = T extends string
  ? "string"
  : T extends number
  ? "number"
  : T extends boolean
  ? "boolean"
  : T extends undefined
  ? "undefined"
  : T extends Function
  ? "function"
  : "object";

----------------------------------------

TITLE: Defining discriminated unions in TypeScript
DESCRIPTION: Illustrates how to create and use discriminated unions in TypeScript, similar to algebraic data types in functional languages.

LANGUAGE: typescript
CODE:
type Shape =
  | { kind: "circle"; radius: number }
  | { kind: "square"; x: number }
  | { kind: "triangle"; x: number; y: number };

function area(s: Shape) {
  if (s.kind === "circle") {
    return Math.PI * s.radius * s.radius;
  } else if (s.kind === "square") {
    return s.x * s.x;
  } else {
    return (s.x * s.y) / 2;
  }
}

----------------------------------------

TITLE: Call Signatures Implementation
DESCRIPTION: Shows how to implement call signatures for functions with additional properties using object type syntax.

LANGUAGE: typescript
CODE:
type DescribableFunction = {
  description: string;
  (someArg: number): boolean;
};
function doSomething(fn: DescribableFunction) {
  console.log(fn.description + " returned " + fn(6));
}

function myFunc(someArg: number) {
  return someArg > 3;
}
myFunc.description = "default description";

doSomething(myFunc);

----------------------------------------

TITLE: Class Inheritance Example
DESCRIPTION: Demonstrates class inheritance using extends keyword and method overriding.

LANGUAGE: typescript
CODE:
class Animal {
  move() {
    console.log("Moving along!");
  }
}

class Dog extends Animal {
  woof(times: number) {
    for (let i = 0; i < times; i++) {
      console.log("woof!");
    }
  }
}

----------------------------------------

TITLE: Implementing Scale Mixin in TypeScript
DESCRIPTION: Defines a Scale mixin using a generic function that returns a class expression. This mixin adds scaling functionality to any base class.

LANGUAGE: typescript
CODE:
type Constructor = new (...args: any[]) => {};

function Scale<TBase extends Constructor>(Base: TBase) {
  return class Scaling extends Base {
    // Mixins may not declare private/protected properties
    // however, you can use ES2020 private fields
    _scale = 1;

    setScale(scale: number) {
      this._scale = scale;
    }

    get scale(): number {
      return this._scale;
    }
  };
}

----------------------------------------

TITLE: Implementing Function Overloads in TypeScript
DESCRIPTION: Shows how to use function overloads in TypeScript to define multiple function signatures for different parameter types and return values.

LANGUAGE: typescript
CODE:
function pickCard(x: { suit: string; card: number }[]): number;
function pickCard(x: number): { suit: string; card: number };
function pickCard(x: any): any {
  if (typeof x == "object") {
    let pickedCard = Math.floor(Math.random() * x.length);
    return pickedCard;
  } else if (typeof x == "number") {
    let pickedSuit = Math.floor(x / 13);
    return { suit: suits[pickedSuit], card: x % 13 };
  }
}

----------------------------------------

TITLE: Function Component Definition in TypeScript
DESCRIPTION: Example of defining Function Components with TypeScript, including props interface definition and component implementation.

LANGUAGE: typescript
CODE:
interface FooProp {
  name: string;
  X: number;
  Y: number;
}

declare function AnotherComponent(prop: { name: string });
function ComponentFoo(prop: FooProp) {
  return <AnotherComponent name={prop.name} />;
}

const Button = (prop: { value: string }, context: { color: string }) => (
  <button />
);

----------------------------------------

TITLE: Basic Indexed Access Type Example
DESCRIPTION: Demonstrates how to access a specific property type from an object type using indexed access syntax.

LANGUAGE: typescript
CODE:
type Person = { age: number; name: string; alive: boolean };
type Age = Person["age"];

----------------------------------------

TITLE: Creating a Method Decorator in TypeScript
DESCRIPTION: Shows how to implement a method decorator that modifies the enumerable property of the method's descriptor.

LANGUAGE: typescript
CODE:
function enumerable(value: boolean) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    descriptor.enumerable = value;
  };
}

class Greeter {
  greeting: string;
  constructor(message: string) {
    this.greeting = message;
  }

  @enumerable(false)
  greet() {
    return "Hello, " + this.greeting;
  }
}

----------------------------------------

TITLE: Creating a Decorator Factory in TypeScript
DESCRIPTION: Shows how to create a decorator factory function that returns a decorator to customize its application to a declaration.

LANGUAGE: typescript
CODE:
function color(value: string) {
  // this is the decorator factory, it sets up
  // the returned decorator function
  return function (target) {
    // this is the decorator
    // do something with 'target' and 'value'...
  };
}

----------------------------------------

TITLE: Conditional Type Constraints in TypeScript
DESCRIPTION: Explains how conditional types can be used with constraints to provide more specific type information within the true branch of the condition.

LANGUAGE: typescript
CODE:
type MessageOf<T> = T extends { message: unknown } ? T["message"] : never;

interface Email {
  message: string;
}

interface Dog {
  bark(): void;
}

type EmailMessageContents = MessageOf<Email>;
type DogMessageContents = MessageOf<Dog>;

----------------------------------------

TITLE: Using Classes as Interfaces in TypeScript
DESCRIPTION: Demonstrates how classes can be used in place of interfaces in TypeScript due to structural typing.

LANGUAGE: typescript
CODE:
class Point {
  x: number;
  y: number;
}

interface Point3d extends Point {
  z: number;
}

let point3d: Point3d = { x: 1, y: 2, z: 3 };

----------------------------------------

TITLE: Explicit Type Annotation for Arrays in TypeScript
DESCRIPTION: Demonstrates how to provide an explicit type annotation to override the inferred union type for an array of custom classes.

LANGUAGE: typescript
CODE:
class Animal {}
class Rhino extends Animal {
  hasHorn: true;
}
class Elephant extends Animal {
  hasTrunk: true;
}
class Snake extends Animal {
  hasLegs: false;
}
let zoo: Animal[] = [new Rhino(), new Elephant(), new Snake()];

----------------------------------------

TITLE: Creating a Property Decorator in TypeScript
DESCRIPTION: Illustrates how to implement a property decorator that adds metadata to a class property using reflect-metadata.

LANGUAGE: typescript
CODE:
import "reflect-metadata";

const formatMetadataKey = Symbol("format");

function format(formatString: string) {
  return Reflect.metadata(formatMetadataKey, formatString);
}

function getFormat(target: any, propertyKey: string) {
  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);
}

class Greeter {
  @format("Hello, %s")
  greeting: string;

  constructor(message: string) {
    this.greeting = message;
  }

  greet() {
    let formatString = getFormat(this, "greeting");
    return formatString.replace("%s", this.greeting);
  }
}

----------------------------------------

TITLE: Index Signatures in TypeScript
DESCRIPTION: Shows how to use index signatures to describe objects with dynamic property names.

LANGUAGE: typescript
CODE:
interface StringArray {
  [index: number]: string;
}

const myArray: StringArray = getStringArray();
const secondItem = myArray[1];

----------------------------------------

TITLE: Using Distributive Conditional Types in TypeScript
DESCRIPTION: Shows how conditional types distribute over union types and can be used to filter union types.

LANGUAGE: typescript
CODE:
type T10 = TypeName<string | (() => void)>; // "string" | "function"
type T12 = TypeName<string | string[] | undefined>; // "string" | "object" | "undefined"
type T11 = TypeName<string[] | number[]>; // "object"

LANGUAGE: typescript
CODE:
type Diff<T, U> = T extends U ? never : T; // Remove types from T that are assignable to U
type Filter<T, U> = T extends U ? T : never; // Remove types from T that are not assignable to U

type T30 = Diff<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "b" | "d"
type T31 = Filter<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "a" | "c"
type T32 = Diff<string | number | (() => void), Function>; // string | number
type T33 = Filter<string | number | (() => void), Function>; // () => void

----------------------------------------

TITLE: Array Element Type Extraction
DESCRIPTION: Demonstrates how to extract element types from array literals using indexed access types with number index.

LANGUAGE: typescript
CODE:
const MyArray = [
  { name: "Alice", age: 15 },
  { name: "Bob", age: 23 },
  { name: "Eve", age: 38 },
];

type Person = typeof MyArray[number];
type Age = typeof MyArray[number]["age"];
// Or
type Age2 = Person["age"];

----------------------------------------

TITLE: Configuring TypeScript Compiler Options with include and exclude Properties
DESCRIPTION: This example shows a tsconfig.json file using 'include' and 'exclude' properties to specify files for compilation. It also demonstrates various compiler options including module system, output file, and source map generation.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "system",
    "noImplicitAny": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "outFile": "../../built/local/tsc.js",
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["**/*.spec.ts"]
}

----------------------------------------

TITLE: Interface Declaration
DESCRIPTION: Demonstrates how to explicitly define object shapes using TypeScript interfaces.

LANGUAGE: typescript
CODE:
interface User {
  name: string;
  id: number;
}

----------------------------------------

TITLE: Implementing Type-Only Imports and Exports in TypeScript
DESCRIPTION: Demonstrates the new syntax for type-only imports and exports, which get fully erased at runtime. Shows usage with React components and highlights restrictions.

LANGUAGE: typescript
CODE:
import type { SomeThing } from "./some-module.js";

export type { SomeThing };

----------------------------------------

TITLE: Defining Object Shape Using TypeScript Interface
DESCRIPTION: Demonstrates how to create a TypeScript interface that defines the structure of a Dog object. The interface specifies three required properties: a name as a string, a dateOfBirth as a Date object, and markings as an array of strings.

LANGUAGE: typescript
CODE:
interface Dog {
  name: string;
  dateOfBirth: Date;
  markings: string[];
}

----------------------------------------

TITLE: Defining Constrained Mixins in TypeScript
DESCRIPTION: Introduces constrained mixins by modifying the constructor type to accept a generic argument. This allows for creating mixins that work with specific base classes.

LANGUAGE: typescript
CODE:
type GConstructor<T = {}> = new (...args: any[]) => T;

type Positionable = GConstructor<{ setPos: (x: number, y: number) => void }>;
type Spritable = GConstructor<Sprite>;
type Loggable = GConstructor<{ print: () => void }>;

----------------------------------------

TITLE: Demonstrating Type Narrowing in TypeScript 5.4
DESCRIPTION: Shows how TypeScript 5.4 preserves narrowed types in closures following last assignments, improving type inference in common JavaScript patterns.

LANGUAGE: typescript
CODE:
function getUrls(url: string | URL, names: string[]) {
    if (typeof url === "string") {
        url = new URL(url);
    }

    return names.map(name => {
        url.searchParams.set("name", name)
        return url.toString();
    });
}

----------------------------------------

TITLE: Handling 'this' in TypeScript Arrow Functions
DESCRIPTION: Illustrates how to use arrow functions in TypeScript to correctly capture and handle 'this' context, avoiding common pitfalls in object methods.

LANGUAGE: typescript
CODE:
let deck = {
  suits: ["hearts", "spades", "clubs", "diamonds"],
  cards: Array(52),
  createCardPicker: function () {
    return () => {
      let pickedCard = Math.floor(Math.random() * 52);
      let pickedSuit = Math.floor(pickedCard / 13);

      return { suit: this.suits[pickedSuit], card: pickedCard % 13 };
    };
  },
};

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);

----------------------------------------

TITLE: Object Destructuring in TypeScript
DESCRIPTION: Shows how to use object destructuring to create new variables from object properties in TypeScript.

LANGUAGE: typescript
CODE:
let o = {
  a: "foo",
  b: 12,
  c: "bar",
};
let { a, b } = o;

----------------------------------------

TITLE: TypeScript Compiler Usage
DESCRIPTION: Commands to install and run the TypeScript compiler.

LANGUAGE: shell
CODE:
npm install -g typescript
tsc hello.ts

----------------------------------------

TITLE: Merging Namespaces in TypeScript
DESCRIPTION: Demonstrates how TypeScript merges namespaces with the same name, combining both exported and non-exported members. Exported members are merged, while non-exported members remain visible only in their original namespace.

LANGUAGE: typescript
CODE:
namespace Animals {
  export class Zebra {}
}

namespace Animals {
  export interface Legged {
    numberOfLegs: number;
  }
  export class Dog {}
}

----------------------------------------

TITLE: Basic JSDoc Type Annotation in JavaScript
DESCRIPTION: Demonstrates using JSDoc annotations to specify types in JavaScript files. Shows how type inference works with basic variable assignment.

LANGUAGE: javascript
CODE:
/** @type {number} */
var x;

x = 0; // OK
x = false; // OK?!

----------------------------------------

TITLE: Function Parameter Compatibility
DESCRIPTION: Illustrates function compatibility rules regarding parameter counts and types, showing how functions with fewer parameters can be assigned to functions with more parameters.

LANGUAGE: typescript
CODE:
let x = (a: number) => 0;
let y = (b: number, s: string) => 0;

y = x; // OK
x = y; // Error

----------------------------------------

TITLE: Named Exports in TypeScript
DESCRIPTION: Shows multiple named exports including variables, classes, and functions.

LANGUAGE: typescript
CODE:
export var pi = 3.14;
export let squareTwo = 1.41;
export const phi = 1.61;

export class RandomNumberGenerator {}

export function absolute(num: number) {
  if (num < 0) return num * -1;
  return num;
}

----------------------------------------

TITLE: Declaring Ambient Modules in TypeScript
DESCRIPTION: Example showing how to declare an ambient module in a .d.ts file, which allows external module declarations to be recognized by the TypeScript compiler.

LANGUAGE: typescript
CODE:
// In a .d.ts file or .ts file that is not a module:
declare module "SomeModule" {
  export function fn(): string;
}

LANGUAGE: typescript
CODE:
/// <reference path="myModules.d.ts" />
import * as m from "SomeModule";

----------------------------------------

TITLE: Type-Safe Property Access with keyof in TypeScript
DESCRIPTION: Shows how to use keyof with generics to create type-safe property access and modification functions.

LANGUAGE: typescript
CODE:
function getProperty<T, K extends keyof T>(obj: T, key: K) {
  return obj[key]; // Inferred type is T[K]
}

function setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {
  obj[key] = value;
}

let x = { foo: 10, bar: "hello!" };

let foo = getProperty(x, "foo"); // number
let bar = getProperty(x, "bar"); // string

let oops = getProperty(x, "wargarbl"); // Error! "wargarbl" is not "foo" | "bar"

setProperty(x, "foo", "string"); // Error!, string expected number

----------------------------------------

TITLE: Using Required Type in TypeScript
DESCRIPTION: Demonstrates the Required utility type which makes all properties required

LANGUAGE: typescript
CODE:
interface Props {
  a?: number;
  b?: string;
}

const obj: Props = { a: 5 };

const obj2: Required<Props> = { a: 5 };

----------------------------------------

TITLE: Tuple Type Usage in TypeScript
DESCRIPTION: Demonstrates tuple type declaration and type checking for fixed-length arrays with known types.

LANGUAGE: typescript
CODE:
let x: [string, number];
x = ["hello", 10]; // OK
x = [10, "hello"]; // Error

----------------------------------------

TITLE: Inferring Types in Conditional Types with TypeScript
DESCRIPTION: Demonstrates the use of the 'infer' keyword in conditional types to extract and infer types from complex structures.

LANGUAGE: typescript
CODE:
type Flatten<Type> = Type extends Array<infer Item> ? Item : Type;

type GetReturnType<Type> = Type extends (...args: never[]) => infer Return
  ? Return
  : never;

type Num = GetReturnType<() => number>;
type Str = GetReturnType<(x: string) => string>;
type Bools = GetReturnType<(a: boolean, b: boolean) => boolean[]>;

----------------------------------------

TITLE: Implementing Default Parameters in TypeScript Functions
DESCRIPTION: Shows how to use default-initialized parameters in TypeScript, providing default values for function parameters when not explicitly provided.

LANGUAGE: typescript
CODE:
function buildName(firstName: string, lastName = "Smith") {
  return firstName + " " + lastName;
}

let result1 = buildName("Bob"); // works correctly now, returns "Bob Smith"
let result2 = buildName("Bob", undefined); // still works, also returns "Bob Smith"
let result3 = buildName("Bob", "Adams", "Sr."); // error, too many parameters
let result4 = buildName("Bob", "Adams"); // ah, just right

----------------------------------------

TITLE: Using Labeled Tuple Elements in TypeScript
DESCRIPTION: Shows how to define and use labeled tuple elements for improved readability and documentation.

LANGUAGE: typescript
CODE:
type Range = [start: number, end: number];

type Foo = [first: number, second?: string, ...rest: any[]];

----------------------------------------

TITLE: Function Parameter Optionality
DESCRIPTION: Shows how function parameters are treated as optional by default in JavaScript files.

LANGUAGE: javascript
CODE:
function bar(a, b) {
  console.log(a + " " + b);
}

bar(1); // OK, second argument considered optional
bar(1, 2);
bar(1, 2, 3); // Error, too many arguments

----------------------------------------

TITLE: Global Augmentation in TypeScript
DESCRIPTION: Demonstrates how to use global augmentation in TypeScript to add declarations to the global scope from inside a module. This example adds a toObservable method to the global Array interface.

LANGUAGE: typescript
CODE:
// observable.ts
export class Observable<T> {
  // ... still no implementation ...
}

declare global {
  interface Array<T> {
    toObservable(): Observable<T>;
  }
}

Array.prototype.toObservable = function () {
  // ...
};

----------------------------------------

TITLE: Default Export in TypeScript
DESCRIPTION: Demonstrates how to create and use a default export in TypeScript modules.

LANGUAGE: typescript
CODE:
export default function helloWorld() {
  console.log("Hello, world!");
}

----------------------------------------

TITLE: Improved Type Inference in TypeScript 2.1
DESCRIPTION: Shows how TypeScript 2.1 improves type inference for variables without explicit type annotations, including evolution of array types.

LANGUAGE: typescript
CODE:
let x;

x = () => 42;

let y = x();

console.log(x + y);
//          ~~~~~
// Error! Operator '+' cannot be applied to types '() => number' and 'number'.

x = "Hello world!";

x.toLowerCase();

function f1() {
  let x = [];
  x.push(5);
  x[1] = "hello";
  x.unshift(true);
  return x; // (string | number | boolean)[]
}

function f2() {
  let x = null;
  if (cond()) {
    x = [];
    while (cond()) {
      x.push("hello");
    }
  }
  return x; // string[] | null
}

----------------------------------------

TITLE: Const Enum Definition
DESCRIPTION: Demonstrates const enum usage which gets completely removed during compilation for better performance.

LANGUAGE: typescript
CODE:
const enum Direction {
  Up,
  Down,
  Left,
  Right
}

let directions = [
  Direction.Up,
  Direction.Down,
  Direction.Left,
  Direction.Right
];

----------------------------------------

TITLE: Enum Type Declaration in TypeScript
DESCRIPTION: Shows enum declaration and usage, including automatic and manual number assignment.

LANGUAGE: typescript
CODE:
enum Color {
  Red,
  Green,
  Blue,
}
let c: Color = Color.Green;

----------------------------------------

TITLE: Using Class Types in Generics with TypeScript
DESCRIPTION: Shows advanced usage of generics with class types, including creating instances and working with constructor functions.

LANGUAGE: typescript
CODE:
function createInstance<A extends Animal>(c: new () => A): A {
  return new c();
}

createInstance(Lion).keeper.nametag;
createInstance(Bee).keeper.hasMask;

----------------------------------------

TITLE: Adding Types to Function Parameters and Return Values
DESCRIPTION: Shows how to add type annotations to function parameters and return values in TypeScript, improving type safety and code clarity.

LANGUAGE: typescript
CODE:
function add(x: number, y: number): number {
  return x + y;
}

let myAdd = function (x: number, y: number): number {
  return x + y;
};

----------------------------------------

TITLE: Using namespace imports with TypeScript declarations
DESCRIPTION: Illustrates how exported types are available on the namespace when referenced in a type position, but not as values.

LANGUAGE: typescript
CODE:
import * as mod from "./module.js";
mod.f();
mod.SomeType; // Property 'SomeType' does not exist on type 'typeof import("./module.js")'
let x: mod.SomeType; // Ok

----------------------------------------

TITLE: Custom Types with @typedef
DESCRIPTION: Shows how to define custom complex types using @typedef annotation with properties.

LANGUAGE: javascript
CODE:
/**
 * @typedef {Object} SpecialType - creates a new type named 'SpecialType'
 * @property {string} prop1 - a string property of SpecialType
 * @property {number} prop2 - a number property of SpecialType
 * @property {number=} prop3 - an optional number property of SpecialType
 * @prop {number} [prop4] - an optional number property of SpecialType
 * @prop {number} [prop5=42] - an optional number property of SpecialType with default
 */

/** @type {SpecialType} */
var specialTypeObject;

----------------------------------------

TITLE: Implementing Namespaced Validators in TypeScript
DESCRIPTION: Shows how to organize string validators within a namespace called 'Validation'. This approach helps in managing related code and avoiding naming conflicts in larger applications.

LANGUAGE: typescript
CODE:
namespace Validation {
  export interface StringValidator {
    isAcceptable(s: string): boolean;
  }

  const lettersRegexp = /^[A-Za-z]+$/;
  const numberRegexp = /^[0-9]+$/;

  export class LettersOnlyValidator implements StringValidator {
    isAcceptable(s: string) {
      return lettersRegexp.test(s);
    }
  }

  export class ZipCodeValidator implements StringValidator {
    isAcceptable(s: string) {
      return s.length === 5 && numberRegexp.test(s);
    }
  }
}

// Some samples to try
let strings = ["Hello", "98052", "101"];

// Validators to use
let validators: { [s: string]: Validation.StringValidator } = {};
validators["ZIP code"] = new Validation.ZipCodeValidator();
validators["Letters only"] = new Validation.LettersOnlyValidator();

// Show whether each string passed each validator
for (let s of strings) {
  for (let name in validators) {
    console.log(
      `"${s}" - ${
        validators[name].isAcceptable(s) ? "matches" : "does not match"
      } ${name}`
    );
  }
}

----------------------------------------

TITLE: ECMAScript Private Class Elements in TypeScript
DESCRIPTION: Demonstrates the expanded support for ECMAScript private class elements in TypeScript 4.3, including private methods, accessors, and static members.

LANGUAGE: typescript
CODE:
class Foo {
  #someMethod() {
    //...
  }

  get #someValue() {
    return 100;
  }

  static #staticMethod() {
    // ...
  }

  publicMethod() {
    this.#someMethod();
    return this.#someValue;
  }
}

----------------------------------------

TITLE: Const Assertions Examples
DESCRIPTION: Demonstrates the new const assertions feature for creating literal types and readonly objects.

LANGUAGE: typescript
CODE:
// Type '"hello"'
let x = "hello" as const;

// Type 'readonly [10, 20]'
let y = [10, 20] as const;

// Type '{ readonly text: "hello" }'
let z = { text: "hello" } as const;

----------------------------------------

TITLE: Defining Generic Interface for Function Types in TypeScript
DESCRIPTION: Demonstrates how to create a generic interface that describes a function type, allowing for flexible type definitions.

LANGUAGE: typescript
CODE:
interface GenericIdentityFn<T> {
  (arg: T): T;
}

function identity<T>(arg: T): T {
  return arg;
}

let myIdentity: GenericIdentityFn<number> = identity;

----------------------------------------

TITLE: Defining Numeric Enums in TypeScript
DESCRIPTION: Demonstrates how to create and initialize numeric enums with auto-incrementing values.

LANGUAGE: typescript
CODE:
enum Direction {
  Up = 1,
  Down,
  Left,
  Right,
}

----------------------------------------

TITLE: Using Parameter Properties in TypeScript
DESCRIPTION: Demonstrates the use of parameter properties to create and initialize class members in one place.

LANGUAGE: typescript
CODE:
class Octopus {
  readonly numberOfLegs: number = 8;
  constructor(readonly name: string) {}
}

let dad = new Octopus("Man with the 8 strong legs");
dad.name;

----------------------------------------

TITLE: Contextual Typing with Different Event Types in TypeScript
DESCRIPTION: Demonstrates how TypeScript infers different event types based on the context of the event handler assignment.

LANGUAGE: typescript
CODE:
window.onscroll = function (uiEvent) {
  console.log(uiEvent.button);
};

----------------------------------------

TITLE: Boolean Type Declaration in TypeScript
DESCRIPTION: Demonstrates how to declare a boolean variable in TypeScript using type annotation.

LANGUAGE: typescript
CODE:
let isDone: boolean = false;

----------------------------------------

TITLE: Type-only imports and exports in TypeScript
DESCRIPTION: Demonstrates the use of `import type` and `export type` to explicitly mark imports and exports as type-only, which are guaranteed to be elided from the output JavaScript.

LANGUAGE: typescript
CODE:
// @Filename: main.ts
import { f, type SomeInterface } from "./module.js";
import type { SomeType } from "./module.js";

class C implements SomeInterface {
  constructor(p: SomeType) {
    f();
  }
}

export type { C };

// @Filename: main.js
import { f } from "./module.js";

class C {
  constructor(p) {
    f();
  }
}

----------------------------------------

TITLE: Using Symbols as Object Keys in TypeScript
DESCRIPTION: Illustrates how symbols can be used as keys for object properties, demonstrating their use in object literal notation and property access.

LANGUAGE: typescript
CODE:
const sym = Symbol();

let obj = {
  [sym]: "value",
};

console.log(obj[sym]); // "value"

----------------------------------------

TITLE: Implementing Separate Write Types on Properties in TypeScript
DESCRIPTION: Demonstrates how to specify different types for reading and writing to properties in TypeScript 4.3, allowing for more precise modeling of APIs that convert values.

LANGUAGE: typescript
CODE:
class Thing {
  #size = 0;

  get size(): number {
    return this.#size;
  }

  set size(value: string | number | boolean) {
    let num = Number(value);

    // Don't allow NaN and stuff.
    if (!Number.isFinite(num)) {
      this.#size = 0;
      return;
    }

    this.#size = num;
  }
}

----------------------------------------

TITLE: Using String Literal Types with Union Types in TypeScript
DESCRIPTION: This example demonstrates how string literal types can be combined with union types to create enum-like behavior. It shows type checking for a limited set of string values in a method parameter.

LANGUAGE: typescript
CODE:
type Easing = "ease-in" | "ease-out" | "ease-in-out";

class UIElement {
  animate(dx: number, dy: number, easing: Easing) {
    if (easing === "ease-in") {
      // ...
    } else if (easing === "ease-out") {
    } else if (easing === "ease-in-out") {
    } else {
      // It's possible that someone could reach this
      // by ignoring your types though.
    }
  }
}

let button = new UIElement();
button.animate(0, 0, "ease-in");
button.animate(0, 0, "uneasy");

----------------------------------------

TITLE: Nullish Coalescing Operator Example
DESCRIPTION: Shows usage of new ?? operator for providing default values only when a value is null/undefined.

LANGUAGE: typescript
CODE:
let x = foo ?? bar();

// Equivalent to:
let x = foo !== null && foo !== undefined ? foo : bar();

----------------------------------------

TITLE: New Generator Interface Definition in TypeScript 3.6
DESCRIPTION: Defines the new Generator interface that extends Iterator with required return and throw methods.

LANGUAGE: typescript
CODE:
interface Generator<T = unknown, TReturn = any, TNext = unknown>
  extends Iterator<T, TReturn, TNext> {
  next(...args: [] | [TNext]): IteratorResult<T, TReturn>;
  return(value: TReturn): IteratorResult<T, TReturn>;
  throw(e: any): IteratorResult<T, TReturn>;
  [Symbol.iterator](): Generator<T, TReturn, TNext>;
}

----------------------------------------

TITLE: Creating Abstract Classes in TypeScript
DESCRIPTION: Shows how to define and use abstract classes and methods in TypeScript.

LANGUAGE: typescript
CODE:
abstract class Department {
  constructor(public name: string) {}

  printName(): void {
    console.log("Department name: " + this.name);
  }

  abstract printMeeting(): void; // must be implemented in derived classes
}

class AccountingDepartment extends Department {
  constructor() {
    super("Accounting and Auditing");
  }

  printMeeting(): void {
    console.log("The Accounting Department meets each Monday at 10am.");
  }

  generateReports(): void {
    console.log("Generating accounting reports...");
  }
}

let department: Department;
department = new AccountingDepartment();
department.printName();
department.printMeeting();
department.generateReports(); // Error: method doesn't exist on declared abstract type

----------------------------------------

TITLE: Implementing a Class Decorator in TypeScript
DESCRIPTION: Demonstrates how to create and apply a class decorator that seals the constructor and its prototype.

LANGUAGE: typescript
CODE:
function sealed(constructor: Function) {
  Object.seal(constructor);
  Object.seal(constructor.prototype);
}

@sealed
class BugReport {
  type = "report";
  title: string;

  constructor(t: string) {
    this.title = t;
  }
}

----------------------------------------

TITLE: User-Defined Type Guards
DESCRIPTION: Demonstrates how to create custom type guard functions using type predicates

LANGUAGE: typescript
CODE:
function isFish(pet: Fish | Bird): pet is Fish {
  return (pet as Fish).swim !== undefined;
}

----------------------------------------

TITLE: Basic For..Of Loop Implementation in TypeScript
DESCRIPTION: Shows how to use for..of loop to iterate over array elements of different types.

LANGUAGE: typescript
CODE:
let someArray = [1, "string", false];

for (let entry of someArray) {
  console.log(entry); // 1, "string", false
}

----------------------------------------

TITLE: Demonstrating Symbol Uniqueness in TypeScript
DESCRIPTION: Shows that symbols are unique even when created with the same key, and cannot be compared for equality.

LANGUAGE: typescript
CODE:
let sym2 = Symbol("key");
let sym3 = Symbol("key");

sym2 === sym3; // false, symbols are unique

----------------------------------------

TITLE: Tagged Union Types in TypeScript
DESCRIPTION: Example showing how TypeScript 2.0 supports tagged (or discriminated) union types, allowing type narrowing based on a discriminant property.

LANGUAGE: typescript
CODE:
interface Square {
  kind: "square";
  size: number;
}

interface Rectangle {
  kind: "rectangle";
  width: number;
  height: number;
}

interface Circle {
  kind: "circle";
  radius: number;
}

type Shape = Square | Rectangle | Circle;

function area(s: Shape) {
  switch (s.kind) {
    case "square":
      return s.size * s.size;
    case "rectangle":
      return s.width * s.height;
    case "circle":
      return Math.PI * s.radius * s.radius;
  }
}

----------------------------------------

TITLE: Declaring Variables with let in TypeScript
DESCRIPTION: Demonstrates how to declare a variable using the let keyword in TypeScript, which provides block-scoping.

LANGUAGE: typescript
CODE:
let hello = "Hello!";

----------------------------------------

TITLE: Auto-Accessors in TypeScript Classes
DESCRIPTION: Demonstrates the new auto-accessors feature in classes that provides a simplified syntax for getter/setter declarations.

LANGUAGE: typescript
CODE:
class Person {
    accessor name: string;

    constructor(name: string) {
        this.name = name;
    }
}

----------------------------------------

TITLE: Using keyof and Lookup Types in TypeScript
DESCRIPTION: Demonstrates how to use the keyof operator to get property names of a type, and how to use lookup types to access property types.

LANGUAGE: typescript
CODE:
interface Person {
  name: string;
  age: number;
  location: string;
}

type K1 = keyof Person; // "name" | "age" | "location"
type K2 = keyof Person[]; // "length" | "push" | "pop" | "concat" | ...
type K3 = keyof { [x: string]: Person }; // string

type P1 = Person["name"]; // string
type P2 = Person["name" | "age"]; // string | number
type P3 = string["charAt"]; // (pos: number) => string
type P4 = string[]["push"]; // (...items: string[]) => number
type P5 = string[][0]; // string

----------------------------------------

TITLE: Class Constructor Definition
DESCRIPTION: Example of defining a constructor with parameters and type annotations.

LANGUAGE: typescript
CODE:
class Point {
  x: number;
  y: number;

  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
}

----------------------------------------

TITLE: Improved Type Inference for Object Literals in TypeScript
DESCRIPTION: Shows the enhanced type inference for object literals in union types in TypeScript 2.7, which now normalizes object literal types to include all properties in each union constituent.

LANGUAGE: typescript
CODE:
const obj = test ? { text: "hello" } : {}; // { text: string } | { text?: undefined }
const s = obj.text; // string | undefined

LANGUAGE: typescript
CODE:
// let obj: { a: number, b: number } |
//     { a: string, b?: undefined } |
//     { a?: undefined, b?: undefined }
let obj = [{ a: 1, b: 2 }, { a: "abc" }, {}][0];
obj.a; // string | number | undefined
obj.b; // number | undefined

LANGUAGE: typescript
CODE:
declare function f<T>(...items: T[]): T;
// let obj: { a: number, b: number } |
//     { a: string, b?: undefined } |
//     { a?: undefined, b?: undefined }
let obj = f({ a: 1, b: 2 }, { a: "abc" }, {});
obj.a; // string | number | undefined
obj.b; // number | undefined

----------------------------------------

TITLE: Creating Symbols in TypeScript
DESCRIPTION: Demonstrates how to create symbol values using the Symbol constructor, with and without an optional string key.

LANGUAGE: typescript
CODE:
let sym1 = Symbol();

let sym2 = Symbol("key"); // optional string key

----------------------------------------

TITLE: Implementing an Async Generator Function in TypeScript
DESCRIPTION: This example shows an async generator function that yields values, uses await, and delegates to both synchronous and asynchronous iterables.

LANGUAGE: typescript
CODE:
async function* g() {
  yield 1;
  await sleep(100);
  yield* [2, 3];
  yield* (async function*() {
    await sleep(100);
    yield 4;
  })();
}

----------------------------------------

TITLE: Object Property Compatibility
DESCRIPTION: Shows how object compatibility is checked based on property matching, allowing objects with extra properties to be assigned to types with fewer properties.

LANGUAGE: typescript
CODE:
interface Pet {
  name: string;
}

let pet: Pet;
// dog's inferred type is { name: string; owner: string; }
let dog = { name: "Lassie", owner: "Rudd Weatherwax" };
pet = dog;

----------------------------------------

TITLE: Mapped Type with Conditional Filtering
DESCRIPTION: Shows how to filter out specific properties using conditional types in mapped types

LANGUAGE: typescript
CODE:
type ExtractPII<Type> = {
  [Property in keyof Type]: Type[Property] extends { pii: true } ? true : false;
};

type DBFields = {
  id: { format: "incrementing" };
  name: { type: string; pii: true };
};

type ObjectsNeedingGDPRDeletion = ExtractPII<DBFields>;

----------------------------------------

TITLE: Declaring Constants with const in TypeScript
DESCRIPTION: Shows how to declare a constant using the const keyword in TypeScript, which prevents reassignment but not mutation of object properties.

LANGUAGE: typescript
CODE:
const numLivesForCat = 9;
const kitty = {
  name: "Aurora",
  numLives: numLivesForCat,
};

// Error
kitty = {
  name: "Danielle",
  numLives: numLivesForCat,
};

// all "okay"
kitty.name = "Rory";
kitty.name = "Kitty";
kitty.name = "Cat";
kitty.numLives--;

----------------------------------------

TITLE: TypeScript Configuration for Node.js
DESCRIPTION: Configuration settings for TypeScript projects that compile and run directly in Node.js environment. Uses the nodenext module system.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "nodenext",
    "verbatimModuleSyntax": true
  }
}

----------------------------------------

TITLE: Smarter Union Type Checking in TypeScript 3.5
DESCRIPTION: Demonstrates the improved union type checking in TypeScript 3.5, which now decomposes types with discriminant properties for more accurate type assignments.

LANGUAGE: typescript
CODE:
type S = { done: boolean; value: number };
type T = { done: false; value: number } | { done: true; value: number };

declare let source: S;
declare let target: T;

target = source;

----------------------------------------

TITLE: Using Optional Parameters in TypeScript Functions
DESCRIPTION: Demonstrates how to define optional parameters in TypeScript functions using the '?' syntax, allowing for more flexible function calls.

LANGUAGE: typescript
CODE:
function buildName(firstName: string, lastName?: string) {
  if (lastName) return firstName + " " + lastName;
  else return firstName;
}

let result1 = buildName("Bob"); // works correctly now
let result2 = buildName("Bob", "Adams", "Sr."); // error, too many parameters
let result3 = buildName("Bob", "Adams"); // ah, just right

----------------------------------------

TITLE: Combining Symbols with Computed Properties in TypeScript Classes
DESCRIPTION: Shows how symbols can be used with computed property declarations to define object properties and class members.

LANGUAGE: typescript
CODE:
const getClassNameSymbol = Symbol();

class C {
  [getClassNameSymbol]() {
    return "C";
  }
}

let c = new C();
let className = c[getClassNameSymbol](); // "C"

----------------------------------------

TITLE: Implementing Dynamic Import in TypeScript
DESCRIPTION: Demonstrates how to use dynamic import expressions to asynchronously load modules on demand. Shows implementation of an async function that imports a zip utility only when needed.

LANGUAGE: typescript
CODE:
async function getZipFile(name: string, files: File[]): Promise<File> {
  const zipUtil = await import("./utils/create-zip-file");
  const zipContents = await zipUtil.getContentAsBlob(files);
  return new File(zipContents, name);
}

----------------------------------------

TITLE: Reference Template for Module Declaration (TypeScript)
DESCRIPTION: A comprehensive template for creating a new module declaration file, including various export styles and type declarations.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

export as namespace myLib;

export function myFunction(a: string): string;
export function myOtherFunction(a: number): number;

export interface SomeType {
  name: string;
  length: number;
  extras?: string[];
}

export const myField: number;

----------------------------------------

TITLE: Function Return Type Compatibility
DESCRIPTION: Shows how return type compatibility is checked between functions, requiring the source function's return type to be a subtype of the target type.

LANGUAGE: typescript
CODE:
let x = () => ({ name: "Alice" });
let y = () => ({ name: "Alice", location: "Seattle" });

x = y; // OK
y = x; // Error, because x() lacks a location property

----------------------------------------

TITLE: Creating Mapped Types with String Literals in TypeScript
DESCRIPTION: Shows how to use string literals as property names in mapped types to create configuration option types.

LANGUAGE: typescript
CODE:
type Options = {
  [K in "noImplicitAny" | "strictNullChecks" | "strictFunctionTypes"]?: boolean;
};

----------------------------------------

TITLE: Optional Chaining Feature Example
DESCRIPTION: Demonstrates the new optional chaining operator (?.) that allows safe access to nested properties that may be null/undefined.

LANGUAGE: typescript
CODE:
let x = foo?.bar.baz();

// Equivalent to:
let x = foo === null || foo === undefined ? undefined : foo.bar.baz();

----------------------------------------

TITLE: Using jQuery as a Global Library Example
DESCRIPTION: Demonstrates how to use a global library (jQuery) without any imports, accessing the $ variable directly from global scope.

LANGUAGE: typescript
CODE:
$(() => {
  console.log("hello!");
});

----------------------------------------

TITLE: ECMAScript Modules Export Example
DESCRIPTION: An example of exporting a default value in an ECMAScript module.

LANGUAGE: javascript
CODE:
// a.js
export default "Hello from a.js";

----------------------------------------

TITLE: Using Type Aliases for Object Types in TypeScript
DESCRIPTION: Demonstrates how to use a type alias to define an object type.

LANGUAGE: typescript
CODE:
type Person = {
  name: string;
  age: number;
};

function greet(person: Person) {
  return "Hello " + person.name;
}

----------------------------------------

TITLE: Spread Expressions with Tuple Types in TypeScript
DESCRIPTION: Demonstrates different ways to call a function using tuple type spread expressions

LANGUAGE: typescript
CODE:
const args: [number, string, boolean] = [42, "hello", true];
foo(42, "hello", true);
foo(args[0], args[1], args[2]);
foo(...args);

----------------------------------------

TITLE: Definite Assignment Assertions in TypeScript
DESCRIPTION: Demonstrates the use of definite assignment assertions (!) in TypeScript 2.7 to indicate that a variable is assigned even when TypeScript's analysis cannot detect it.

LANGUAGE: typescript
CODE:
let x: number;
initialize();
console.log(x + x);
//          ~   ~
// Error! Variable 'x' is used before being assigned.

function initialize() {
  x = 10;
}

LANGUAGE: typescript
CODE:
// Notice the '!'
let x!: number;
initialize();

// No error!
console.log(x + x);

function initialize() {
  x = 10;
}

----------------------------------------

TITLE: Using Primitive Types in TypeScript Declarations
DESCRIPTION: Demonstrates the correct usage of primitive types (number, string, boolean, symbol) instead of their boxed object counterparts (Number, String, Boolean, Symbol) in TypeScript declarations.

LANGUAGE: typescript
CODE:
/* WRONG */
function reverse(s: String): String;

LANGUAGE: typescript
CODE:
/* OK */
function reverse(s: string): string;

----------------------------------------

TITLE: Contextual Typing in Function Return Types in TypeScript
DESCRIPTION: Demonstrates how TypeScript uses contextual typing to infer the return type of a function based on its declared return type and the types of the returned values.

LANGUAGE: typescript
CODE:
class Animal {}
class Rhino extends Animal {
  hasHorn: true;
}
class Elephant extends Animal {
  hasTrunk: true;
}
class Snake extends Animal {
  hasLegs: false;
}
function createZoo(): Animal[] {
  return [new Rhino(), new Elephant(), new Snake()];
}

----------------------------------------

TITLE: Best Common Type Inference in TypeScript Arrays
DESCRIPTION: Shows how TypeScript infers the type of an array with multiple element types using the best common type algorithm.

LANGUAGE: typescript
CODE:
let x = [0, 1, null];

----------------------------------------

TITLE: Complex Best Common Type Inference in TypeScript
DESCRIPTION: Illustrates a more complex scenario of best common type inference with custom classes, resulting in a union type array.

LANGUAGE: typescript
CODE:
class Animal {}
class Rhino extends Animal {
  hasHorn: true;
}
class Elephant extends Animal {
  hasTrunk: true;
}
class Snake extends Animal {
  hasLegs: false;
}
let zoo = [new Rhino(), new Elephant(), new Snake()];

----------------------------------------

TITLE: For..In vs For..Of Loop Comparison in TypeScript
DESCRIPTION: Demonstrates the difference between for..in (iterating over keys) and for..of (iterating over values) loops.

LANGUAGE: typescript
CODE:
let list = [4, 5, 6];

for (let i in list) {
  console.log(i); // "0", "1", "2",
}

for (let i of list) {
  console.log(i); // 4, 5, 6
}

----------------------------------------

TITLE: Higher Order Type Inference from Generic Constructors
DESCRIPTION: Shows the enhanced type inference for generic constructors in TypeScript 3.5, allowing for more accurate typing in compositional patterns and when working with generic class components.

LANGUAGE: typescript
CODE:
class Box<T> {
  kind: "box";
  value: T;
  constructor(value: T) {
    this.value = value;
  }
}

class Bag<U> {
  kind: "bag";
  value: U;
  constructor(value: U) {
    this.value = value;
  }
}

function composeCtor<T, U, V>(
  F: new (x: T) => U,
  G: new (y: U) => V
): (x: T) => V {
  return x => new G(new F(x));
}

let f = composeCtor(Box, Bag); // has type '<T>(x: T) => Bag<Box<T>>'
let a = f(1024); // has type 'Bag<Box<number>>'

----------------------------------------

TITLE: TypeScript Function with Type Annotation
DESCRIPTION: Example showing a function with string type annotation for parameters

LANGUAGE: typescript
CODE:
function greeter(person: string) {
  return "Hello, " + person;
}

let user = "Jane User";

document.body.textContent = greeter(user);

----------------------------------------

TITLE: Extending Types in TypeScript
DESCRIPTION: Demonstrates how to extend existing types using the extends keyword with interfaces.

LANGUAGE: typescript
CODE:
interface BasicAddress {
  name?: string;
  street: string;
  city: string;
  country: string;
  postalCode: string;
}

interface AddressWithUnit extends BasicAddress {
  unit: string;
}

----------------------------------------

TITLE: Implementing Generic Iterable Function in TypeScript
DESCRIPTION: Demonstrates how to create a function that accepts any iterable type and converts it to an array using the spread operator.

LANGUAGE: typescript
CODE:
function toArray<X>(xs: Iterable<X>): X[] {
  return [...xs]
}

----------------------------------------

TITLE: Mapped Type Modifiers in TypeScript 2.8
DESCRIPTION: Shows how to add or remove readonly and optional modifiers in mapped types using + and - prefixes.

LANGUAGE: typescript
CODE:
type MutableRequired<T> = { -readonly [P in keyof T]-?: T[P] }; // Remove readonly and ?
type ReadonlyPartial<T> = { +readonly [P in keyof T]+?: T[P] }; // Add readonly and ?

----------------------------------------

TITLE: JSDoc Property Type Annotations
DESCRIPTION: Shows how to use JSDoc annotations to explicitly specify property types in JavaScript classes.

LANGUAGE: javascript
CODE:
class C {
  constructor() {
    /** @type {number | undefined} */
    this.prop = undefined;
    /** @type {number | undefined} */
    this.count;
  }
}

let c = new C();
c.prop = 0; // OK
c.count = "string";

----------------------------------------

TITLE: Using the 'override' Keyword in TypeScript Classes
DESCRIPTION: Shows how to use the new 'override' keyword to explicitly mark methods that override base class methods, helping catch errors when method names change.

LANGUAGE: typescript
CODE:
class Base {
  someMethod() {
    // ...
  }
}

class Derived extends Base {
  override someMethod() {
    // ...
  }
}

----------------------------------------

TITLE: Named and Anonymous Tuple Elements in TypeScript
DESCRIPTION: Illustrates the new flexibility in mixing labeled and unlabeled elements in tuple types in TypeScript 5.2.

LANGUAGE: typescript
CODE:
// Now allowed in TypeScript 5.2
type Pair3<T> = [first: T, T];

// Also now allowed
type TwoOrMore<T> = [first: T, second: T, ...T[]];

----------------------------------------

TITLE: Non-Contextual Typing in TypeScript Functions
DESCRIPTION: Illustrates how TypeScript handles type inference when a function is not in a contextually typed position, defaulting to 'any' type for parameters.

LANGUAGE: typescript
CODE:
const handler = function (uiEvent) {
  console.log(uiEvent.button); // <- OK
};

----------------------------------------

TITLE: Mapped Type with Key Remapping using Template Literals
DESCRIPTION: Demonstrates how to use template literal types to create getter method names from property names

LANGUAGE: typescript
CODE:
type Getters<Type> = {
    [Property in keyof Type as `get${Capitalize<string & Property>}`]: () => Type[Property]
};

interface Person {
    name: string;
    age: number;
    location: string;
}

type LazyPerson = Getters<Person>;

----------------------------------------

TITLE: Implementing Async Functions in TypeScript
DESCRIPTION: Demonstrates how to write and use async functions in TypeScript, which can be compiled to run in ES3/ES5 environments.

LANGUAGE: typescript
CODE:
function delay(milliseconds: number) {
  return new Promise<void>(resolve => {
    setTimeout(resolve, milliseconds);
  });
}

async function dramaticWelcome() {
  console.log("Hello");

  for (let i = 0; i < 3; i++) {
    await delay(500);
    console.log(".");
  }

  console.log("World!");
}

dramaticWelcome();

----------------------------------------

TITLE: Implementing Generic Classes in TypeScript
DESCRIPTION: Shows how to create a generic class that can work with different types, demonstrating flexibility in property and method types.

LANGUAGE: typescript
CODE:
class GenericNumber<T> {
  zeroValue: T;
  add: (x: T, y: T) => T;
}

let myGenericNumber = new GenericNumber<number>();
myGenericNumber.zeroValue = 0;
myGenericNumber.add = function (x, y) {
  return x + y;
};

----------------------------------------

TITLE: Organizing Types with Namespaces in TypeScript
DESCRIPTION: Shows how to use namespaces to organize related types. This example creates a 'GreetingLib' namespace with nested interfaces for different options.

LANGUAGE: typescript
CODE:
declare namespace GreetingLib {
  interface LogOptions {
    verbose?: boolean;
  }
  interface AlertOptions {
    modal: boolean;
    title?: string;
    color?: string;
  }
}

LANGUAGE: typescript
CODE:
declare namespace GreetingLib.Options {
  // Refer to via GreetingLib.Options.Log
  interface Log {
    verbose?: boolean;
  }
  interface Alert {
    modal: boolean;
    title?: string;
    color?: string;
  }
}

----------------------------------------

TITLE: Assertion Functions Example
DESCRIPTION: Demonstrates new assertion function type signatures for runtime type checking.

LANGUAGE: typescript
CODE:
function assert(condition: any, msg?: string): asserts condition {
  if (!condition) {
    throw new AssertionError(msg);
  }
}

----------------------------------------

TITLE: Generic Function Composition Implementation
DESCRIPTION: Shows implementation of a type-safe compose function that combines two functions, demonstrating improved type inference for generic functions.

LANGUAGE: typescript
CODE:
function compose<A, B, C>(f: (arg: A) => B, g: (arg: B) => C): (arg: A) => C {
  return (x) => g(f(x));
}

----------------------------------------

TITLE: Template Literal Type Creation in TypeScript
DESCRIPTION: Demonstrates template literal types by concatenating literal types to create new string literal types.

LANGUAGE: typescript
CODE:
type World = "world";

type Greeting = `hello ${World}`;

----------------------------------------

TITLE: Class Property Inference from Constructors in TypeScript
DESCRIPTION: Demonstrates how TypeScript 4.0 can infer property types in classes based on constructor assignments.

LANGUAGE: typescript
CODE:
class Square {
  area;
  sideLength;
  constructor(sideLength: number) {
    this.sideLength = sideLength;
    this.area = sideLength ** 2;
  }
}

----------------------------------------

TITLE: Heterogeneous Enum Example
DESCRIPTION: Demonstrates mixing string and numeric enum members, though this practice is not recommended.

LANGUAGE: typescript
CODE:
enum BooleanLikeHeterogeneousEnum {
  No = 0,
  Yes = "YES",
}

----------------------------------------

TITLE: Control Flow Analysis for Dependent Parameters in TypeScript
DESCRIPTION: Demonstrates TypeScript 4.6's ability to narrow types for parameters that depend on each other in discriminated union of tuples.

LANGUAGE: typescript
CODE:
type Func = (...args: ["a", number] | ["b", string]) => void;

const f1: Func = (kind, payload) => {
  if (kind === "a") {
    payload.toFixed(); // 'payload' narrowed to 'number'
  }
  if (kind === "b") {
    payload.toUpperCase(); // 'payload' narrowed to 'string'
  }
};

f1("a", 42);
f1("b", "hello");

----------------------------------------

TITLE: Exporting Declarations in TypeScript
DESCRIPTION: Demonstrates how to export interface and function declarations using the new ES6 module syntax in TypeScript 1.5. It shows exporting with optional renaming using 'as' clause.

LANGUAGE: typescript
CODE:
interface Stream { ... }
function writeToStream(stream: Stream, data: string) { ... }
export { Stream, writeToStream as write };  // writeToStream exported as write

----------------------------------------

TITLE: Demonstrating Literal Narrowing in TypeScript
DESCRIPTION: This snippet shows how const and let declarations affect type inference for string literals. The const declaration narrows the type to the specific string value, while let allows for any string.

LANGUAGE: typescript
CODE:
// We're making a guarantee that this variable
// helloWorld will never change, by using const.

// So, TypeScript sets the type to be "Hello World", not string
const helloWorld = "Hello World";

// On the other hand, a let can change, and so the compiler declares it a string
let hiWorld = "Hi World";

----------------------------------------

TITLE: Implementing Parameter Decorators in TypeScript
DESCRIPTION: Shows how to create and use parameter decorators to add metadata about method parameters and validate them at runtime.

LANGUAGE: typescript
CODE:
import "reflect-metadata";
const requiredMetadataKey = Symbol("required");

function required(target: Object, propertyKey: string | symbol, parameterIndex: number) {
  let existingRequiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];
  existingRequiredParameters.push(parameterIndex);
  Reflect.defineMetadata( requiredMetadataKey, existingRequiredParameters, target, propertyKey);
}

function validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {
  let method = descriptor.value!;

  descriptor.value = function () {
    let requiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyName);
    if (requiredParameters) {
      for (let parameterIndex of requiredParameters) {
        if (parameterIndex >= arguments.length || arguments[parameterIndex] === undefined) {
          throw new Error("Missing required argument.");
        }
      }
    }
    return method.apply(this, arguments);
  };
}

class BugReport {
  type = "report";
  title: string;

  constructor(t: string) {
    this.title = t;
  }

  @validate
  print(@required verbose: boolean) {
    if (verbose) {
      return `type: ${this.type}\ntitle: ${this.title}`;
    } else {
     return this.title; 
    }
  }
}

----------------------------------------

TITLE: Module Augmentation in TypeScript
DESCRIPTION: Shows how to use module augmentation in TypeScript to extend existing modules with new functionality. This example adds a map method to an Observable class from an external module.

LANGUAGE: typescript
CODE:
// observable.ts
export class Observable<T> {
  // ... implementation left as an exercise for the reader ...
}

// map.ts
import { Observable } from "./observable";
declare module "./observable" {
  interface Observable<T> {
    map<U>(f: (x: T) => U): Observable<U>;
  }
}
Observable.prototype.map = function (f) {
  // ... another exercise for the reader
};

// consumer.ts
import { Observable } from "./observable";
import "./map";
let o: Observable<number>;
o.map((x) => x.toFixed());

----------------------------------------

TITLE: Using --resolveJsonModule in TypeScript
DESCRIPTION: This example demonstrates the new --resolveJsonModule option in TypeScript 2.9, which allows importing, extracting types from, and generating .json files. It shows a JSON file, its usage in TypeScript, and the required tsconfig.json settings.

LANGUAGE: typescript
CODE:
// settings.json

{
    "repo": "TypeScript",
    "dry": false,
    "debug": false
}

// a.ts

import settings from "./settings.json";

settings.debug === true; // OK
settings.dry === 2; // Error: Operator '===' cannot be applied boolean and number

// tsconfig.json

{
  "compilerOptions": {
    "module": "commonjs",
    "resolveJsonModule": true,
    "esModuleInterop": true
  }
}

----------------------------------------

TITLE: Implementing Variadic Tuple Types in TypeScript
DESCRIPTION: Demonstrates how to use variadic tuple types to create a flexible concat function for arrays and tuples.

LANGUAGE: typescript
CODE:
type Arr = readonly any[];

function concat<T extends Arr, U extends Arr>(arr1: T, arr2: U): [...T, ...U] {
  return [...arr1, ...arr2];
}

----------------------------------------

TITLE: Using Rest Parameters in TypeScript Functions
DESCRIPTION: Demonstrates how to use rest parameters in TypeScript to work with multiple parameters as a group, allowing for a variable number of arguments.

LANGUAGE: typescript
CODE:
function buildName(firstName: string, ...restOfName: string[]) {
  return firstName + " " + restOfName.join(" ");
}

// employeeName will be "Joseph Samuel Lucas MacKinzie"
let employeeName = buildName("Joseph", "Samuel", "Lucas", "MacKinzie");

----------------------------------------

TITLE: NonNullable Value Validation Function
DESCRIPTION: Shows how the improved type narrowing enables implementation of a null-check function without type assertions.

LANGUAGE: typescript
CODE:
function throwIfNullable<T>(value: T): NonNullable<T> {
    if (value === undefined || value === null) {
        throw Error("Nullable value!");
    }
    return value;
}

----------------------------------------

TITLE: Simplified NonNullable Type Implementation
DESCRIPTION: Shows the new simplified implementation of NonNullable using intersection types instead of conditional types.

LANGUAGE: typescript
CODE:
- type NonNullable<T> = T extends null | undefined ? never : T;
+ type NonNullable<T> = T & {};

----------------------------------------

TITLE: TypeScript Import with File Extension
DESCRIPTION: An example of importing a function from a file with a .mjs extension in TypeScript.

LANGUAGE: typescript
CODE:
import { add } from "./math.mjs";
add(1, 2);

----------------------------------------

TITLE: Literal Type Inference in TypeScript 2.1
DESCRIPTION: Demonstrates how TypeScript 2.1 infers literal types for const variables and readonly properties, and how type widening works for let variables.

LANGUAGE: typescript
CODE:
const c1 = 1; // Type 1
const c2 = c1; // Type 1
const c3 = "abc"; // Type "abc"
const c4 = true; // Type true
const c5 = cond ? 1 : "abc"; // Type 1 | "abc"

let v1 = 1; // Type number
let v2 = c2; // Type number
let v3 = c3; // Type string
let v4 = c4; // Type boolean
let v5 = c5; // Type number | string

const c1 = "hello"; // Widening type "hello"
let v1 = c1; // Type string

const c2: "hello" = "hello"; // Type "hello"
let v2 = c2; // Type "hello"

----------------------------------------

TITLE: Using Numeric Literal Types in TypeScript
DESCRIPTION: This example demonstrates the use of numeric literal types in TypeScript. It shows how to define a function that returns only specific numeric values and how to use numeric literals in interface definitions.

LANGUAGE: typescript
CODE:
function rollDice(): 1 | 2 | 3 | 4 | 5 | 6 {
  return (Math.floor(Math.random() * 6) + 1) as 1 | 2 | 3 | 4 | 5 | 6;
}

const result = rollDice();

/** Creates a map centered at loc/lat */
declare function setupMap(config: MapConfig): void;

interface MapConfig {
  lng: number;
  lat: number;
  tileSize: 8 | 16 | 32;
}

setupMap({ lng: -73.935242, lat: 40.73061, tileSize: 16 });

----------------------------------------

TITLE: Merging Function Overloads in TypeScript Interfaces
DESCRIPTION: Shows how TypeScript merges function overloads when interfaces with the same name are declared multiple times. The resulting interface combines all overloads with specific signatures ordered first.

LANGUAGE: typescript
CODE:
interface Cloner {
  clone(animal: Animal): Animal;
}

interface Cloner {
  clone(animal: Sheep): Sheep;
}

interface Cloner {
  clone(animal: Dog): Dog;
  clone(animal: Cat): Cat;
}

----------------------------------------

TITLE: Merging Namespaces with Enums in TypeScript
DESCRIPTION: Demonstrates how namespaces can be used to extend enums with static members in TypeScript, allowing for additional functionality to be added to enum types.

LANGUAGE: typescript
CODE:
enum Color {
  red = 1,
  green = 2,
  blue = 4,
}

namespace Color {
  export function mixColor(colorName: string) {
    if (colorName == "yellow") {
      return Color.red + Color.green;
    } else if (colorName == "white") {
      return Color.red + Color.green + Color.blue;
    } else if (colorName == "magenta") {
      return Color.red + Color.blue;
    } else if (colorName == "cyan") {
      return Color.green + Color.blue;
    }
  }
}

----------------------------------------

TITLE: Union Type Array Methods with Explicit Type Annotation
DESCRIPTION: Demonstrates the correct way to handle union type arrays by providing explicit type annotations in callback functions.

LANGUAGE: typescript
CODE:
interface Dog {
  kind: "dog";
  dogProp: any;
}
interface Cat {
  kind: "cat";
  catProp: any;
}

const catOrDogArray: Dog[] | Cat[] = [];
catOrDogArray.forEach((animal: Dog | Cat) => {
  if (animal.kind === "dog") {
    animal.dogProp;
    // ...
  } else if (animal.kind === "cat") {
    animal.catProp;
    // ...
  }
});

----------------------------------------

TITLE: New Iterator Interface Definition in TypeScript 3.6
DESCRIPTION: Shows the updated Iterator interface that allows specification of yielded type, return type, and next() argument type.

LANGUAGE: typescript
CODE:
interface Iterator<T, TReturn = any, TNext = undefined> {
  // Takes either 0 or 1 arguments - doesn't accept 'undefined'
  next(...args: [] | [TNext]): IteratorResult<T, TReturn>;
  return?(value?: TReturn): IteratorResult<T, TReturn>;
  throw?(e?: any): IteratorResult<T, TReturn>;
}

----------------------------------------

TITLE: JSX Intrinsic Elements Type Definition
DESCRIPTION: Shows how to define and type check intrinsic JSX elements using the JSX.IntrinsicElements interface.

LANGUAGE: typescript
CODE:
declare namespace JSX {
  interface IntrinsicElements {
    foo: any;
  }
}

<foo />; // ok
<bar />; // error

----------------------------------------

TITLE: Object Type Definition
DESCRIPTION: Shows how to create objects with inferred types in TypeScript.

LANGUAGE: typescript
CODE:
const user = {
  name: "Hayes",
  id: 0,
};

----------------------------------------

TITLE: Using the New NoInfer Utility Type in TypeScript 5.4
DESCRIPTION: Demonstrates the usage of the new NoInfer utility type to prevent undesired type inference in generic functions.

LANGUAGE: typescript
CODE:
function createStreetLight<C extends string>(colors: C[], defaultColor?: NoInfer<C>) {
    // ...
}

createStreetLight(["red", "yellow", "green"], "blue");
//                                            ~~~~~~
// error!
// Argument of type '"blue"' is not assignable to parameter of type '"red" | "yellow" | "green" | undefined'.

----------------------------------------

TITLE: TypeScript Export with Relative Path
DESCRIPTION: An example of exporting all from a relative path in TypeScript, demonstrating potential compatibility issues.

LANGUAGE: typescript
CODE:
export * from "./utils";

----------------------------------------

TITLE: Implementing Boolean Literal Types in TypeScript
DESCRIPTION: This snippet illustrates the use of boolean literal types in TypeScript. It shows how to create interfaces with boolean literal properties and combine them using union types.

LANGUAGE: typescript
CODE:
interface ValidationSuccess {
  isValid: true;
  reason: null;
}

interface ValidationFailure {
  isValid: false;
  reason: string;
}

type ValidationResult = ValidationSuccess | ValidationFailure;

----------------------------------------

TITLE: Switch True Narrowing
DESCRIPTION: Demonstrates TypeScript's new ability to perform type narrowing based on conditions in case clauses within a switch(true) statement.

LANGUAGE: typescript
CODE:
function f(x: unknown) {
    switch (true) {
        case typeof x === "string":
            // 'x' is a 'string' here
            console.log(x.toUpperCase());
            // falls through...

        case Array.isArray(x):
            // 'x' is a 'string | any[]' here.
            console.log(x.length);
            // falls through...

        default:
          // 'x' is 'unknown' here.
          // ...
    }
}

----------------------------------------

TITLE: Enum Reverse Mapping Example
DESCRIPTION: Shows how numeric enums provide reverse mapping functionality from values to names.

LANGUAGE: typescript
CODE:
enum Enum {
  A
}

let a = Enum.A;
let nameOfA = Enum[a]; // "A"

----------------------------------------

TITLE: Generic Function Return Type Inference
DESCRIPTION: Demonstrates improved type inference for generic functions, showing how TypeScript can now make inferences for function return types.

LANGUAGE: typescript
CODE:
function arrayMap<T, U>(f: (x: T) => U): (a: T[]) => U[] {
  return a => a.map(f);
}

const lengths: (a: string[]) => number[] = arrayMap(s => s.length);

----------------------------------------

TITLE: Rest Elements in Tuple Types Example
DESCRIPTION: Demonstrates the usage of rest elements in tuple types with spread operator

LANGUAGE: typescript
CODE:
function tuple<T extends any[]>(...args: T): T {
  return args;
}

const numbers: number[] = getArrayOfNumbers();
const t1 = tuple("foo", 1, true); // [string, number, boolean]
const t2 = tuple("bar", ...numbers); // [string, ...number[]]

----------------------------------------

TITLE: Enhanced Type Narrowing with Unknown Type
DESCRIPTION: Demonstrates improved type narrowing behavior for unknown and union types in conditional blocks.

LANGUAGE: typescript
CODE:
function narrowUnknown(x: unknown) {
    if (x) {
        x;  // used to be 'unknown', now '{}'
    }
    else {
        x;  // unknown
    }
}

----------------------------------------

TITLE: JavaScript vs TypeScript Division Operation
DESCRIPTION: Compares how JavaScript and TypeScript handle invalid division operations, showing TypeScript's type checking benefits.

LANGUAGE: javascript
CODE:
console.log(4 / []);

LANGUAGE: typescript
CODE:
console.log(4 / []);

----------------------------------------

TITLE: TypeScript Array.find Type Definition Comparison
DESCRIPTION: Illustrates the difference in Array.find type definitions between strict and non-strict null checks modes.

LANGUAGE: typescript
CODE:
// When strictNullChecks: true
type Array = {
  find(predicate: (value: any, index: number) => boolean): S | undefined;
};

// When strictNullChecks: false the undefined is removed from the type system,
// allowing you to write code which assumes it always found a result
type Array = {
  find(predicate: (value: any, index: number) => boolean): S;
};

----------------------------------------

TITLE: Importing and Exporting in TypeScript
DESCRIPTION: Demonstrates basic import and export syntax in TypeScript, which is used as a base example for different module configurations.

LANGUAGE: typescript
CODE:
// @filename: constants.ts
export const valueOfPi = 3.142;
// ---cut---
// @filename: index.ts
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Implementing fluent-style API with this-typing in TypeScript
DESCRIPTION: Demonstrates the use of this-typing in TypeScript to create a fluent-style API for a basic calculator class. This approach allows for method chaining and proper type inference when extending the class.

LANGUAGE: typescript
CODE:
export default class BasicCalculator {
  public constructor(protected value: number = 0) {}

  public currentValue(): number {
    return this.value;
  }

  public add(operand: number) {
    this.value += operand;
    return this;
  }

  public subtract(operand: number) {
    this.value -= operand;
    return this;
  }

  public multiply(operand: number) {
    this.value *= operand;
    return this;
  }

  public divide(operand: number) {
    this.value /= operand;
    return this;
  }
}

----------------------------------------

TITLE: Basic Class Definition in TypeScript
DESCRIPTION: Demonstrates the most basic empty class definition in TypeScript.

LANGUAGE: typescript
CODE:
class Point {}

----------------------------------------

TITLE: Applying Multiple Decorators in TypeScript
DESCRIPTION: Illustrates how to apply multiple decorators to a single declaration and explains the order of evaluation.

LANGUAGE: typescript
CODE:
function first() {
  console.log("first(): factory evaluated");
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    console.log("first(): called");
  };
}

function second() {
  console.log("second(): factory evaluated");
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    console.log("second(): called");
  };
}

class ExampleClass {
  @first()
  @second()
  method() {}
}

----------------------------------------

TITLE: Node.js CommonJS to ESM Interop
DESCRIPTION: Demonstrates how Node.js handles imports from CommonJS modules in ES modules.

LANGUAGE: typescript
CODE:
// @Filename: export.cjs
module.exports = { hello: "world" };

LANGUAGE: typescript
CODE:
// @Filename: import.mjs
import greeting from "./export.cjs";
greeting.hello; // "world"

----------------------------------------

TITLE: Basic DOM Manipulation in TypeScript
DESCRIPTION: This snippet demonstrates how to select an element, create a new paragraph element, add text content, and append it to the DOM using TypeScript.

LANGUAGE: typescript
CODE:
// 1. Select the div element using the id property
const app = document.getElementById("app");

// 2. Create a new <p></p> element programmatically
const p = document.createElement("p");

// 3. Add the text content
p.textContent = "Hello, World!";

// 4. Append the p element to the div element
app?.appendChild(p);

----------------------------------------

TITLE: Module Output: preserve
DESCRIPTION: Demonstrates the 'preserve' module option, which maintains the original import and export syntax in the output, including support for both ECMAScript and CommonJS-style imports.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: preserve
// @noErrors
import { valueOfPi } from "./constants";
import constants = require("./constants");

export const piSquared = valueOfPi * constants.valueOfPi;

----------------------------------------

TITLE: Correct Usage of ReturnType with typeof and Function Name
DESCRIPTION: Demonstrates the correct way to use ReturnType with a function name by using the typeof operator to refer to the function's type.

LANGUAGE: typescript
CODE:
function f() {
  return { x: 10, y: 3 };
}
type P = ReturnType<typeof f>;
//   ^?

----------------------------------------

TITLE: Empty Types in TypeScript
DESCRIPTION: Demonstrates how TypeScript's structural typing handles empty types, showing that any object can satisfy an empty class type since it has all of the empty class's properties.

LANGUAGE: typescript
CODE:
class Empty {}

function fn(arg: Empty) {
  // do something?
}

// No error, but this isn't an 'Empty' ?
fn({ k: 10 });

----------------------------------------

TITLE: Module Output: UMD
DESCRIPTION: Demonstrates the TypeScript compiler output when the module option is set to UMD (Universal Module Definition).

LANGUAGE: typescript
CODE:
// @showEmit
// @module: umd
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Importing Declarations in TypeScript
DESCRIPTION: Shows how to import specific exports from a module using ES6 import syntax in TypeScript 1.5. It demonstrates importing with optional renaming using 'as' clause.

LANGUAGE: typescript
CODE:
import { read, write, standardOutput as stdout } from "./inout";
var s = read(stdout);
write(stdout, s);

----------------------------------------

TITLE: Truthiness Narrowing in getUsersOnlineMessage Function
DESCRIPTION: Shows how TypeScript uses truthiness checks to narrow types and provide more specific type information in conditional branches.

LANGUAGE: typescript
CODE:
function getUsersOnlineMessage(numUsersOnline: number) {
  if (numUsersOnline) {
    return `There are ${numUsersOnline} online now!`;
  }
  return "Nobody's here. :("
}

----------------------------------------

TITLE: Working with Union Type Properties
DESCRIPTION: Demonstrates accessing shared properties of union types and using type guards for type-specific operations.

LANGUAGE: typescript
CODE:
if (opts.commandline.length === 0) {
  // OK, string and string[] both have 'length' property
  console.log("it's empty");
}

LANGUAGE: typescript
CODE:
function formatCommandline(c: string | string[]) {
  if (typeof c === "string") {
    return c.trim();
  } else {
    return c.join(" ");
  }
}

----------------------------------------

TITLE: ESModule Interop Flag in TypeScript
DESCRIPTION: Shows how the __esModule flag is added to transpiled ES modules for interoperability.

LANGUAGE: typescript
CODE:
exports.A = {};
exports.B = {};
exports.default = "Hello, world!";
// Extra special flag!
exports.__esModule = true;

----------------------------------------

TITLE: Configuration Inheritance in TypeScript 2.1
DESCRIPTION: Demonstrates how to use the new extends property in tsconfig.json to inherit and override configuration options across multiple files.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}

LANGUAGE: json
CODE:
{
  "extends": "./configs/base",
  "files": ["main.ts", "supplemental.ts"]
}

LANGUAGE: json
CODE:
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "strictNullChecks": false
  }
}

----------------------------------------

TITLE: Module Output: System
DESCRIPTION: Shows the TypeScript compiler output when the module option is set to System.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: system
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: ES5 Code Generation for For..Of Loops
DESCRIPTION: Demonstrates how TypeScript compiles for..of loops when targeting ES5, converting them to traditional for loops.

LANGUAGE: typescript
CODE:
let numbers = [1, 2, 3];
for (let num of numbers) {
  console.log(num);
}

LANGUAGE: javascript
CODE:
var numbers = [1, 2, 3];
for (var _i = 0; _i < numbers.length; _i++) {
  var num = numbers[_i];
  console.log(num);
}

----------------------------------------

TITLE: Extending Base TypeScript Configuration in JSON
DESCRIPTION: This snippet demonstrates a 'tsconfig.json' file that extends the base configuration and specifies additional files to be included in the compilation.

LANGUAGE: json
CODE:
{
  "extends": "./configs/base",
  "files": ["main.ts", "supplemental.ts"]
}

----------------------------------------

TITLE: Re-exporting All Exports in TypeScript
DESCRIPTION: Shows how to re-export all exports from other modules using the 'export *' syntax in TypeScript 1.5. This is useful for creating aggregator modules.

LANGUAGE: typescript
CODE:
export function transform(s: string): string { ... }
export * from "./mod1";
export * from "./mod2";

----------------------------------------

TITLE: Advanced Indexed Access with Unions and keyof
DESCRIPTION: Shows how to use union types and the keyof operator with indexed access types to access multiple properties.

LANGUAGE: typescript
CODE:
type Person = { age: number; name: string; alive: boolean };
type I1 = Person["age" | "name"];
type I2 = Person[keyof Person];
type AliveOrName = "alive" | "name";
type I3 = Person[AliveOrName];

----------------------------------------

TITLE: Declaring and Using Unique Symbols in TypeScript
DESCRIPTION: Demonstrates the usage of the new 'unique symbol' type in TypeScript 2.7, including declaration constraints and identity comparisons.

LANGUAGE: typescript
CODE:
// Works
declare const Foo: unique symbol;

// Error! 'Bar' isn't a constant.
let Bar: unique symbol = Symbol();

// Works - refers to a unique symbol, but its identity is tied to 'Foo'.
let Baz: typeof Foo = Foo;

// Also works.
class C {
  static readonly StaticSymbol: unique symbol = Symbol();
}

LANGUAGE: typescript
CODE:
const Foo = Symbol();
const Bar = Symbol();

// Error: can't compare two unique symbols.
if (Foo === Bar) {
  // ...
}

----------------------------------------

TITLE: Configuring TypeScript Compiler Options with files Property
DESCRIPTION: This example demonstrates a tsconfig.json file using the 'files' property to specify individual files for compilation. It includes various compiler options such as module system, strict typing, and source map generation.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "noImplicitAny": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "sourceMap": true
  },
  "files": [
    "core.ts",
    "sys.ts",
    "types.ts",
    "scanner.ts",
    "parser.ts",
    "utilities.ts",
    "binder.ts",
    "checker.ts",
    "emitter.ts",
    "program.ts",
    "commandLineParser.ts",
    "tsc.ts",
    "diagnosticInformationMap.generated.ts"
  ]
}

----------------------------------------

TITLE: Module Resolution Enhancements in TypeScript 2.0
DESCRIPTION: Example tsconfig.json showing how to use baseUrl and paths for module resolution in TypeScript 2.0.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": "./node_modules",
    "paths": {
      "jquery": ["jquery/dist/jquery.slim.min"]
    }
  }
}

----------------------------------------

TITLE: Module Output: CommonJS
DESCRIPTION: Shows the TypeScript compiler output when the module option is set to CommonJS.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: commonjs
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Using ECMAScript Private Fields in TypeScript Classes
DESCRIPTION: Shows implementation of private fields using the # prefix, demonstrating hard privacy and unique scoping to containing classes.

LANGUAGE: typescript
CODE:
class Person {
  #name: string;

  constructor(name: string) {
    this.#name = name;
  }

  greet() {
    console.log(`Hello, my name is ${this.#name}!`);
  }
}

----------------------------------------

TITLE: Merging Namespaces with Functions in TypeScript
DESCRIPTION: Illustrates how TypeScript uses declaration merging to extend functions with additional properties, mimicking a common JavaScript pattern in a type-safe way.

LANGUAGE: typescript
CODE:
function buildLabel(name: string): string {
  return buildLabel.prefix + name + buildLabel.suffix;
}

namespace buildLabel {
  export let suffix = "";
  export let prefix = "Hello, ";
}

console.log(buildLabel("Sam Smith"));

----------------------------------------

TITLE: Intersection Types Examples
DESCRIPTION: Demonstrates intersection types functionality with examples of extending objects and creating linked lists.

LANGUAGE: typescript
CODE:
function extend<T, U>(first: T, second: U): T & U {
  let result = <T & U>{};
  for (let id in first) {
    result[id] = first[id];
  }
  for (let id in second) {
    if (!result.hasOwnProperty(id)) {
      result[id] = second[id];
    }
  }
  return result;
}

var x = extend({ a: "hello" }, { b: 42 });
var s = x.a;
var n = x.b;

LANGUAGE: typescript
CODE:
type LinkedList<T> = T & { next: LinkedList<T> };

interface Person {
  name: string;
}

var people: LinkedList<Person>;
var s = people.name;
var s = people.next.name;
var s = people.next.next.name;
var s = people.next.next.next.name;

LANGUAGE: typescript
CODE:
interface A {
  a: string;
}
interface B {
  b: string;
}
interface C {
  c: string;
}

var abc: A & B & C;
abc.a = "hello";
abc.b = "hello";
abc.c = "hello";

----------------------------------------

TITLE: Importing Default Export in TypeScript
DESCRIPTION: Demonstrates how to import a default export from a module using the default import syntax in TypeScript 1.5. This example imports and uses the Greeter class.

LANGUAGE: typescript
CODE:
import Greeter from "./greeter";
var g = new Greeter();
g.sayHello();

----------------------------------------

TITLE: Type Alias Usage with Indexed Access
DESCRIPTION: Shows how to use type aliases with indexed access types as an alternative to const variables.

LANGUAGE: typescript
CODE:
type Person = { age: number; name: string; alive: boolean };
type key = "age";
type Age = Person[key];

----------------------------------------

TITLE: Creating TypeScript Declaration File for Module Plugin
DESCRIPTION: This snippet demonstrates how to create a declaration file for a module plugin in TypeScript. It extends the existing 'super-greeter' module by adding a new method to the GreeterFunction interface using declaration merging.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

/*~ This is the module plugin template file. You should rename it to index.d.ts
 *~ and place it in a folder with the same name as the module.
 *~ For example, if you were writing a file for "super-greeter", this
 *~ file should be 'super-greeter/index.d.ts'
 */

/*~ On this line, import the module which this module adds to */
import { greeter } from "super-greeter";

/*~ Here, declare the same module as the one you imported above
 *~ then we expand the existing declaration of the greeter function
 */
export module "super-greeter" {
  export interface GreeterFunction {
    /** Greets even better! */
    hyperGreet(): void;
  }
}

----------------------------------------

TITLE: Default Export in TypeScript
DESCRIPTION: Illustrates how to use the 'export default' declaration to specify a default export for a module in TypeScript 1.5. This example exports a default Greeter class.

LANGUAGE: typescript
CODE:
export default class Greeter {
  sayHello() {
    console.log("Greetings!");
  }
}

----------------------------------------

TITLE: Emitting JSX for React Native
DESCRIPTION: Demonstrates how TypeScript handles JSX when targeting React Native environments.

LANGUAGE: tsx
CODE:
declare module JSX {
  interface Element {}
  interface IntrinsicElements {
    [s: string]: any;
  }
}
// @showEmit
// @noErrors
// @jsx: react-native
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Implementing Union Types in TypeScript
DESCRIPTION: Demonstrates how to use union types to express values that can be of multiple types. Shows interface definition and type assignment examples.

LANGUAGE: typescript
CODE:
interface RunOptions {
  program: string;
  commandline: string[] | string | (() => string);
}

----------------------------------------

TITLE: Alternative Mixin Pattern in TypeScript
DESCRIPTION: Demonstrates an alternative mixin pattern where runtime and type hierarchies are created separately and then merged. This approach relies less on the compiler and more on manual synchronization.

LANGUAGE: typescript
CODE:
class Jumpable {
  jump() {}
}

class Duckable {
  duck() {}
}

class Sprite {
  x = 0;
  y = 0;
}

interface Sprite extends Jumpable, Duckable {}
applyMixins(Sprite, [Jumpable, Duckable]);

let player = new Sprite();
player.jump();
console.log(player.x, player.y);

function applyMixins(derivedCtor: any, constructors: any[]) {
  constructors.forEach((baseCtor) => {
    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
      Object.defineProperty(
        derivedCtor.prototype,
        name,
        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||
          Object.create(null)
      );
    });
  });
}

----------------------------------------

TITLE: Using the 'object' Type in TypeScript
DESCRIPTION: Demonstrates the usage of the new 'object' type in TypeScript 2.2 for representing non-primitive types in APIs like Object.create.

LANGUAGE: typescript
CODE:
declare function create(o: object | null): void;

create({ prop: 0 }); // OK
create(null); // OK

create(42); // Error
create("string"); // Error
create(false); // Error
create(undefined); // Error

----------------------------------------

TITLE: Bare Import in TypeScript
DESCRIPTION: Shows how to use a 'bare import' to import a module only for its side-effects without importing any bindings in TypeScript 1.5.

LANGUAGE: typescript
CODE:
import "./polyfills";

----------------------------------------

TITLE: Using noUncheckedIndexedAccess in TypeScript
DESCRIPTION: This snippet demonstrates the effect of enabling the noUncheckedIndexedAccess compiler option. With this option, TypeScript adds 'undefined' to the type of any undeclared field in an object with an index signature.

LANGUAGE: typescript
CODE:
interface EnvironmentVars {
  NAME: string;
  OS: string;

  // Unknown properties are covered by this index signature.
  [propName: string]: string;
}
// @noUncheckedIndexedAccess
// ---cut---
declare const env: EnvironmentVars;

// Declared as existing
const sysName = env.NAME;
const os = env.OS;
//    ^?

// Not declared, but because of the index
// signature, then it is considered a string
const nodeEnv = env.NODE_ENV;
//    ^?

----------------------------------------

TITLE: Mapped Type with Readonly Modifier Removal
DESCRIPTION: Demonstrates how to remove readonly modifiers from properties using mapped types

LANGUAGE: typescript
CODE:
type CreateMutable<Type> = {
  -readonly [Property in keyof Type]: Type[Property];
};

type LockedAccount = {
  readonly id: string;
  readonly name: string;
};

type UnlockedAccount = CreateMutable<LockedAccount>;

----------------------------------------

TITLE: Optional Elements in Tuple Types
DESCRIPTION: Shows how to use optional elements in tuple types with the ? modifier

LANGUAGE: typescript
CODE:
let t: [number, string?, boolean?];
t = [42, "hello", true];
t = [42, "hello"];
t = [42];

----------------------------------------

TITLE: Defining TypeScript Interface for Super-Greeter Library
DESCRIPTION: This snippet shows the TypeScript definition for the 'super-greeter' library. It defines a GreeterFunction interface with multiple overloads and exports a constant greeter of that type.

LANGUAGE: typescript
CODE:
/*~ This example shows how to have multiple overloads for your function */
export interface GreeterFunction {
  (name: string): void
  (time: number): void
}

/*~ This example shows how to export a function specified by an interface */
export const greeter: GreeterFunction;

----------------------------------------

TITLE: Function Type Checking with strictFunctionTypes Enabled
DESCRIPTION: Shows how strictFunctionTypes prevents unsafe function assignments by detecting type incompatibilities at compile time.

LANGUAGE: typescript
CODE:
// @errors: 2322
function fn(x: string) {
  console.log("Hello, " + x.toLowerCase());
}

type StringOrNumberFunc = (ns: string | number) => void;

// Unsafe assignment is prevented
let func: StringOrNumberFunc = fn;

----------------------------------------

TITLE: Preserving JSX in Output
DESCRIPTION: Illustrates how TypeScript preserves JSX syntax in the output when using the preserve option.

LANGUAGE: tsx
CODE:
declare module JSX {
  interface Element {}
  interface IntrinsicElements {
    [s: string]: any;
  }
}
// @showEmit
// @noErrors
// @jsx: preserve
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Array Types in TypeScript
DESCRIPTION: Shows how to use the Array type and its shorthand syntax.

LANGUAGE: typescript
CODE:
function doSomething(value: Array<string>) {
  // ...
}

let myArray: string[] = ["hello", "world"];

doSomething(myArray);
doSomething(new Array("hello", "world"));

----------------------------------------

TITLE: Demonstrating No Implicit Returns in TypeScript Functions
DESCRIPTION: Example showing how TypeScript enforces explicit return statements when noImplicitReturns is enabled. The function demonstrates an error case where one code path lacks a proper return statement.

LANGUAGE: typescript
CODE:
function lookupHeadphonesManufacturer(color: "blue" | "black"): string {
  if (color === "blue") {
    return "beats";
  } else {
    "bose";
  }
}

----------------------------------------

TITLE: Enabling Experimental Decorators in TypeScript
DESCRIPTION: Shows how to enable experimental decorator support in TypeScript using command line options or tsconfig.json configuration.

LANGUAGE: shell
CODE:
tsc --target ES5 --experimentalDecorators

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "ES5",
    "experimentalDecorators": true
  }
}

----------------------------------------

TITLE: Object Destructuring Declaration in TypeScript
DESCRIPTION: Demonstrates object destructuring declaration syntax in TypeScript 1.5, which extracts values from an object and assigns them to variables.

LANGUAGE: typescript
CODE:
var { x, y, z } = getSomeObject();

----------------------------------------

TITLE: Watched Object Implementation
DESCRIPTION: Shows implementation of a type-safe event system using template literal types to ensure correct event names and callback parameter types.

LANGUAGE: typescript
CODE:
type PropEventSource<Type> = {
    on<Key extends string & keyof Type>
        (eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;
};

declare function makeWatchedObject<Type>(obj: Type): Type & PropEventSource<Type>;

----------------------------------------

TITLE: Implementing a Generic Comparer Interface in TypeScript
DESCRIPTION: This example demonstrates how strict function types affect generic interfaces. It shows contravariant behavior for type parameters used in function parameter positions.

LANGUAGE: typescript
CODE:
interface Comparer<T> {
  compare: (a: T, b: T) => number;
}

declare let animalComparer: Comparer<Animal>;
declare let dogComparer: Comparer<Dog>;

animalComparer = dogComparer; // Error
dogComparer = animalComparer; // Ok

----------------------------------------

TITLE: Importing Module in CommonJS
DESCRIPTION: Demonstrates how to import a module using CommonJS require syntax

LANGUAGE: javascript
CODE:
var fs = require("fs");

----------------------------------------

TITLE: Comparing Generic Function Types in TypeScript
DESCRIPTION: This snippet demonstrates TypeScript's default behavior when comparing two generic function types. It shows that assigning a more specific type (B) to a more general type (A) is allowed, but not vice versa.

LANGUAGE: typescript
CODE:
// @errors: 2322

type A = <T, U>(x: T, y: U) => [T, U];
type B = <S>(x: S, y: S) => [S, S];

function f(a: A, b: B) {
  b = a; // Ok
  a = b; // Error
}

----------------------------------------

TITLE: Per-file JSX Factory Configuration
DESCRIPTION: Shows how to configure JSX factory on a per-file basis using the @jsx pragma comment.

LANGUAGE: tsx
CODE:
/** @jsx h */
import { h } from "preact";

const HelloWorld = () => <div>Hello</div>;

----------------------------------------

TITLE: Creating a Simple TypeScript File
DESCRIPTION: A basic TypeScript file demonstrating a simple function with type annotations.

LANGUAGE: typescript
CODE:
function hello(compiler: string) {
  console.log(`Hello from ${compiler}`);
}
hello("TypeScript");

----------------------------------------

TITLE: Configuring Package.json for Declaration Files
DESCRIPTION: Example of configuring package.json to include TypeScript declaration files by specifying the types field pointing to the main declaration file.

LANGUAGE: json
CODE:
{
  "name": "awesome",
  "author": "Vandelay Industries",
  "version": "1.0.0",
  "main": "./lib/main.js",
  "types": "./lib/main.d.ts"
}

----------------------------------------

TITLE: TypeScript Syntax Error Example
DESCRIPTION: Demonstrates how TypeScript identifies basic syntax errors like missing parentheses.

LANGUAGE: typescript
CODE:
let a = (4

----------------------------------------

TITLE: Namespace Declaration in TypeScript
DESCRIPTION: Shows the new 'namespace' keyword usage in TypeScript 1.5, which replaces the 'module' keyword for declaring internal modules or namespaces.

LANGUAGE: typescript
CODE:
namespace Math {
    export function add(x, y) { ... }
}

----------------------------------------

TITLE: For..Of Loop in TypeScript
DESCRIPTION: Shows the usage of ES6 for..of loops in TypeScript 1.5, which provides a simple way to iterate over array elements. The compiler transpiles this to ES3/ES5 compatible code.

LANGUAGE: typescript
CODE:
for (var v of expr) {
}

----------------------------------------

TITLE: Using querySelector and querySelectorAll in TypeScript
DESCRIPTION: This snippet demonstrates how to use querySelector to select the first matching element and querySelectorAll to select all matching elements from the DOM.

LANGUAGE: html
CODE:
<ul>
  <li>First :)</li>
  <li>Second!</li>
  <li>Third times a charm.</li>
</ul>

LANGUAGE: typescript
CODE:
const first = document.querySelector("li"); // returns the first li element
const all = document.querySelectorAll("li"); // returns the list of all li elements

----------------------------------------

TITLE: Using @ts-ignore to Suppress Errors in TypeScript
DESCRIPTION: This snippet shows how to use the new @ts-ignore comment to suppress TypeScript errors on the following line. It's recommended to explain the suppressed error in the comment.

LANGUAGE: typescript
CODE:
if (false) {
  // @ts-ignore: Unreachable code error
  console.log("hello");
}

----------------------------------------

TITLE: Using Union Types in TypeScript Interfaces
DESCRIPTION: Demonstrates the use of union types in TypeScript interfaces instead of multiple overloads that differ by type in only one argument position.

LANGUAGE: typescript
CODE:
/* WRONG */
interface Moment {
  utcOffset(): number;
  utcOffset(b: number): Moment;
  utcOffset(b: string): Moment;
}

LANGUAGE: typescript
CODE:
/* OK */
interface Moment {
  utcOffset(): number;
  utcOffset(b: number | string): Moment;
}

----------------------------------------

TITLE: TypeScript Example With Strict Null Checks
DESCRIPTION: Shows how strictNullChecks being true causes TypeScript to enforce null/undefined checking before accessing properties.

LANGUAGE: typescript
CODE:
// @errors: 2339 2532 18048
// @target: ES2020
// @strictNullChecks
declare const loggedInUsername: string;

const users = [
  { name: "Oby", age: 12 },
  { name: "Heera", age: 32 },
];

const loggedInUser = users.find((u) => u.name === loggedInUsername);
console.log(loggedInUser.age);

----------------------------------------

TITLE: Output Directory Structure with rootDir: "."
DESCRIPTION: Shows the output directory structure when rootDir is explicitly set to the project root, preserving the core directory in the output.

LANGUAGE: plaintext
CODE:
MyProj
├── dist
│   ├── core
│   │   ├── a.js
│   │   ├── b.js
│   │   ├── sub
│   │   │   ├── c.js

----------------------------------------

TITLE: Using Short-Circuiting Assignment Operators in TypeScript
DESCRIPTION: Introduces the new &&=, ||=, and ??= assignment operators in TypeScript 4.0.

LANGUAGE: typescript
CODE:
obj.prop ||= foo();

// roughly equivalent to either of the following

obj.prop || (obj.prop = foo());

if (!obj.prop) {
    obj.prop = foo();
}

----------------------------------------

TITLE: Demonstrating Constructor Code Before super() in TypeScript
DESCRIPTION: Shows how TypeScript 4.6 allows code to run before super() in class constructors, while still ensuring super() is called before this is referenced.

LANGUAGE: typescript
CODE:
class Base {
  // ...
}

class Derived extends Base {
  someProperty = true;

  constructor() {
    // error!
    // have to call 'super()' first because it needs to initialize 'someProperty'.
    doSomeStuff();
    super();
  }
}

----------------------------------------

TITLE: Using Unique Symbols in TypeScript
DESCRIPTION: Demonstrates the usage of the 'unique symbol' type, which is a subtype of symbol and can only be used with const declarations or readonly static properties.

LANGUAGE: typescript
CODE:
declare const sym1: unique symbol;

// sym2 can only be a constant reference.
let sym2: unique symbol = Symbol();

// Works - refers to a unique symbol, but its identity is tied to 'sym1'.
let sym3: typeof sym1 = sym1;

// Also works.
class C {
  static readonly StaticSymbol: unique symbol = Symbol();
}

----------------------------------------

TITLE: Decorators in TypeScript
DESCRIPTION: Demonstrates the use of decorators in TypeScript 1.5, which are expressions that evaluate to functions and can be used to modify classes and their members.

LANGUAGE: typescript
CODE:
class C {
  @readonly
  @enumerable(false)
  method() { ... }
}

function readonly(target, key, descriptor) {
    descriptor.writable = false;
}

function enumerable(value) {
    return function (target, key, descriptor) {
        descriptor.enumerable = value;
    };
}

----------------------------------------

TITLE: Never-Initialized Variables Detection in TypeScript
DESCRIPTION: Demonstrates TypeScript's ability to detect variables that are never initialized before use, improving error detection in both direct and nested function contexts.

LANGUAGE: typescript
CODE:
let result: number
if (someCondition()) {
    result = doSomeWork();
}
else {
    let temporaryWork = doSomeWork();
    temporaryWork *= 2;
    // forgot to assign to 'result'
}

console.log(result); // error: Variable 'result' is used before being assigned.

----------------------------------------

TITLE: Generated AMD Dependency JavaScript
DESCRIPTION: Shows the JavaScript output generated from a TypeScript AMD dependency declaration.

LANGUAGE: javascript
CODE:
define(["require", "exports", "legacy/moduleA"], function (
  require,
  exports,
  moduleA
) {
  moduleA.callStuff();
});

----------------------------------------

TITLE: Defining Optional Parameters in Callbacks
DESCRIPTION: Shows the correct approach to defining callback parameters in TypeScript interfaces, avoiding unnecessary optional parameters.

LANGUAGE: typescript
CODE:
/* WRONG */
interface Fetcher {
  getObject(done: (data: unknown, elapsedTime?: number) => void): void;
}

LANGUAGE: typescript
CODE:
/* OK */
interface Fetcher {
  getObject(done: (data: unknown, elapsedTime: number) => void): void;
}

----------------------------------------

TITLE: Demonstrating 'noImplicitThis' Error in TypeScript Class Method
DESCRIPTION: This code snippet shows a Rectangle class with a getAreaFunction method that incorrectly uses 'this'. With 'noImplicitThis' enabled, TypeScript will raise an error on the 'this' usage inside the returned function, as it has an implied 'any' type.

LANGUAGE: typescript
CODE:
// @errors: 2683
class Rectangle {
  width: number;
  height: number;

  constructor(width: number, height: number) {
    this.width = width;
    this.height = height;
  }

  getAreaFunction() {
    return function () {
      return this.width * this.height;
    };
  }
}

----------------------------------------

TITLE: Output Directory Structure with Default rootDir
DESCRIPTION: Demonstrates the output directory structure when using the default rootDir value, which is the longest common path of all non-declaration input files (core/).

LANGUAGE: plaintext
CODE:
MyProj
├── dist
│   ├── a.js
│   ├── b.js
│   ├── sub
│   │   ├── c.js

----------------------------------------

TITLE: Array Destructuring in TypeScript
DESCRIPTION: Demonstrates array destructuring assignment in TypeScript, creating new variables from array elements.

LANGUAGE: typescript
CODE:
let input = [1, 2];
let [first, second] = input;
console.log(first); // outputs 1
console.log(second); // outputs 2

----------------------------------------

TITLE: Configuring ECMAScript Modules in TypeScript
DESCRIPTION: Example of configuring TypeScript to use Node.js ECMAScript modules via tsconfig.json

LANGUAGE: jsonc
CODE:
{
    "compilerOptions": {
        "module": "node16",
    }
}

----------------------------------------

TITLE: Demonstrating Disabled Error Truncation in TypeScript
DESCRIPTION: This snippet illustrates the behavior when 'noErrorTruncation' is set to true. It uses the same complex object type and invalid assignment as the previous example, but the resulting error message will display the full type description without truncation.

LANGUAGE: typescript
CODE:
// @errors: 2322 2454
// @noErrorTruncation: true
var x: {
  propertyWithAnExceedinglyLongName1: string;
  propertyWithAnExceedinglyLongName2: string;
  propertyWithAnExceedinglyLongName3: string;
  propertyWithAnExceedinglyLongName4: string;
  propertyWithAnExceedinglyLongName5: string;
  propertyWithAnExceedinglyLongName6: string;
  propertyWithAnExceedinglyLongName7: string;
  propertyWithAnExceedinglyLongName8: string;
};

// String representation of type of 'x' should be truncated in error message
var s: string = x;

----------------------------------------

TITLE: Computed Properties in TypeScript
DESCRIPTION: Illustrates the use of computed properties in object literals in TypeScript 1.5, allowing for dynamic property names during object initialization.

LANGUAGE: typescript
CODE:
function makeNode(name: string, initialNeighbor: Node): Node {
  return {
    name: name,
    neighbors: {
      [initialNeighbor.name]: initialNeighbor
    }
  };
}

----------------------------------------

TITLE: Demonstrating Default Import Elision in TypeScript
DESCRIPTION: This snippet shows how TypeScript's default import elision works, where imports used only for types are removed in the JavaScript output.

LANGUAGE: typescript
CODE:
import { Car } from "./car";

export function drive(car: Car) {
    // ...
}

LANGUAGE: javascript
CODE:
export function drive(car) {
    // ...
}

----------------------------------------

TITLE: Implementing Iterator Helper Methods in TypeScript 5.6
DESCRIPTION: TypeScript 5.6 adds support for the ECMAScript proposal to add helper methods like map, filter, and take to iterators.

LANGUAGE: typescript
CODE:
function* positiveIntegers() {
    let i = 1;
    while (true) {
        yield i;
        i++;
    }
}

const evenNumbers = positiveIntegers().map(x => x * 2);

// Output:
//    2
//    4
//    6
//    8
//   10
for (const value of evenNumbers.take(5)) {
    console.log(value);
}

----------------------------------------

TITLE: Implementing an Accessor Decorator in TypeScript
DESCRIPTION: Demonstrates how to create and apply an accessor decorator that modifies the configurable property of the accessor's descriptor.

LANGUAGE: typescript
CODE:
function configurable(value: boolean) {
  return function (
    target: any,
    propertyKey: string,
    descriptor: PropertyDescriptor
  ) {
    descriptor.configurable = value;
  };
}

class Point {
  private _x: number;
  private _y: number;
  constructor(x: number, y: number) {
    this._x = x;
    this._y = y;
  }

  @configurable(false)
  get x() {
    return this._x;
  }

  @configurable(false)
  get y() {
    return this._y;
  }
}

----------------------------------------

TITLE: Defining HelloWorld Component in TSX
DESCRIPTION: A basic example of a React component using JSX syntax in TypeScript.

LANGUAGE: tsx
CODE:
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Demonstrating Spread Operator in TypeScript
DESCRIPTION: This snippet shows a simple TypeScript function that uses the spread operator, which is a common use case for helper functions.

LANGUAGE: typescript
CODE:
export function fn(arr: number[]) {
  const arr2 = [1, ...arr];
}

----------------------------------------

TITLE: Custom Output Directory Structure Result
DESCRIPTION: Demonstrates the resulting file structure after compilation when using the outDir option, showing how compiled files are placed in the specified dist directory while source files remain in their original location.

LANGUAGE: sh
CODE:
$ tsc

example
├── dist
│   └── index.js
├── index.ts
└── tsconfig.json

----------------------------------------

TITLE: Extending TSConfig Bases for Node.js v12 Projects
DESCRIPTION: This example demonstrates how to use TSConfig Bases to simplify project configuration. It extends from a pre-defined configuration for Node.js v12 projects and adds project-specific options.

LANGUAGE: json
CODE:
{
  "extends": "@tsconfig/node12/tsconfig.json",

  "compilerOptions": {
    "preserveConstEnums": true
  },

  "include": ["src/**/*"],
  "exclude": ["**/*.spec.ts"]
}

----------------------------------------

TITLE: Private Field Presence Checks
DESCRIPTION: Example of using the 'in' operator to check for the presence of private fields.

LANGUAGE: typescript
CODE:
class Person {
    #name: string;
    constructor(name: string) {
        this.#name = name;
    }

    equals(other: unknown) {
        return other &&
            typeof other === "object" &&
            #name in other && // <- this is new!
            this.#name === other.#name;
    }
}

----------------------------------------

TITLE: Using the Awaited Type in TypeScript
DESCRIPTION: Examples of using the new Awaited utility type to unwrap Promise types.

LANGUAGE: typescript
CODE:
// A = string
type A = Awaited<Promise<string>>;

// B = number
type B = Awaited<Promise<Promise<number>>>;

// C = boolean | number
type C = Awaited<boolean | Promise<number>>;

----------------------------------------

TITLE: TSConfig JSON Configuration in TypeScript
DESCRIPTION: Shows an example of a tsconfig.json file used to configure TypeScript compiler options for a project in TypeScript 1.5.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "noImplicitAny": true,
    "sourceMap": true
  }
}

----------------------------------------

TITLE: Inferred Type Predicates Example
DESCRIPTION: Demonstrates TypeScript's new ability to infer type predicates from filter functions that refine types.

LANGUAGE: tsx
CODE:
interface Bird {
    commonName: string;
    scientificName: string;
    sing(): void;
}

// Maps country names -> national bird.
// Not all nations have official birds (looking at you, Canada!)
declare const nationalBirds: Map<string, Bird>;

function makeNationalBirdCall(country: string) {
  const bird = nationalBirds.get(country);  // bird has a declared type of Bird | undefined
  if (bird) {
    bird.sing();  // bird has type Bird inside the if statement
  } else {
    // bird has type undefined here.
  }
}

----------------------------------------

TITLE: Implementing Explicit Resource Management in TypeScript
DESCRIPTION: Demonstrates the use of the new 'using' keyword and Symbol.dispose for resource management in TypeScript 5.2.

LANGUAGE: typescript
CODE:
class TempFile implements Disposable {
    #path: string;
    #handle: number;

    constructor(path: string) {
        this.#path = path;
        this.#handle = fs.openSync(path, "w+");
    }

    // other methods

    [Symbol.dispose]() {
        // Close the file and delete it.
        fs.closeSync(this.#handle);
        fs.unlinkSync(this.#path);
    }
}

export function doSomeWork() {
    using file = new TempFile(".some_temp_file");

    // use file...

    if (someCondition()) {
        // do some more work...
        return;
    }
}

----------------------------------------

TITLE: Using Legacy React JSX Transform
DESCRIPTION: Shows how TypeScript compiles JSX using the legacy React.createElement calls.

LANGUAGE: tsx
CODE:
declare module JSX {
  interface Element {}
  interface IntrinsicElements {
    [s: string]: any;
  }
}
// @showEmit
// @noErrors
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Configuring Incremental Compilation in TypeScript
DESCRIPTION: Enables incremental compilation in TypeScript by saving .tsbuildinfo files to disk. These files store project graph information from previous compilations to speed up subsequent builds. The files are created in the same location as compilation output but are not used at runtime.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "incremental": true
  }
}

----------------------------------------

TITLE: Default TypeScript Compilation Output Structure
DESCRIPTION: Shows the default file structure when compiling TypeScript files without specifying an outDir, where .js files are created in the same directory as their source .ts files.

LANGUAGE: sh
CODE:
$ tsc

example
├── index.js
└── index.ts

----------------------------------------

TITLE: Declaring pattern ambient modules in TypeScript
DESCRIPTION: Shows how to declare a pattern ambient module containing a single `*` wildcard character in its name, useful for declaring modules provided by custom loaders.

LANGUAGE: typescript
CODE:
declare module "*.html" {
  const content: string;
  export default content;
}

----------------------------------------

TITLE: NaN Comparison Checks in TypeScript
DESCRIPTION: Shows TypeScript's new error checking for invalid NaN comparisons with suggestions for correct usage.

LANGUAGE: typescript
CODE:
function validate(someValue: number) {
    return someValue !== NaN;
    //     ~~~~~~~~~~~~~~~~~
    // error: This condition will always return 'true'.
    //        Did you mean '!Number.isNaN(someValue)'?
}

----------------------------------------

TITLE: Path Rewriting for TypeScript Extensions
DESCRIPTION: Shows how TypeScript handles import path rewriting with the new --rewriteRelativeImportExtensions option, allowing for both direct .ts file execution and compiled .js output.

LANGUAGE: typescript
CODE:
// Under --rewriteRelativeImportExtensions...

// these will be rewritten.
import * as foo from "./foo.ts";
import * as bar from "../someFolder/bar.mts";

// these will NOT be rewritten in any way.
import * as a from "./foo";
import * as b from "some-package/file.ts";
import * as c from "@some-scope/some-package/file.ts";
import * as d from "#/file.ts";
import * as e from "./file.js";

----------------------------------------

TITLE: Stricter Generic Type Checking
DESCRIPTION: Shows improved type checking for generic functions and demonstrates both error cases and correct usage with union types.

LANGUAGE: typescript
CODE:
function equal<T>(lhs: T, rhs: T): boolean {
  return lhs === rhs;
}

// Previously: No error
// New behavior: Error, no best common type between 'string' and 'number'
var e = equal(42, "hello");

LANGUAGE: typescript
CODE:
function choose1<T>(a: T, b: T): T {
  return Math.random() > 0.5 ? a : b;
}
var a = choose1("hello", 42); // Error
var b = choose1<string | number>("hello", 42); // OK

function choose2<T, U>(a: T, b: U): T | U {
  return Math.random() > 0.5 ? a : b;
}
var c = choose2("bar", "foo"); // OK, c: string
var d = choose2("hello", 42); // OK, d: string|number

----------------------------------------

TITLE: Configuring TypeScript Projects in tsconfig.json
DESCRIPTION: Demonstrates how to use the 'projects' compiler option in a tsconfig.json file to specify the locations of TypeScript projects. This option allows for referencing other projects in a multi-project TypeScript workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "project": ["tsconfig.json", "other/tsconfig.json"]
  }
}

----------------------------------------

TITLE: Using Object.groupBy in TypeScript 5.4
DESCRIPTION: Shows how to use the newly supported Object.groupBy method in TypeScript 5.4, which groups elements of an array based on a given criteria.

LANGUAGE: javascript
CODE:
const array = [0, 1, 2, 3, 4, 5];

const myObj = Object.groupBy(array, (num, index) => {
    return num % 2 === 0 ? "even": "odd";
});

----------------------------------------

TITLE: Using generic type arguments in JSX elements in TypeScript
DESCRIPTION: This example demonstrates how JSX elements now allow passing type arguments to generic components in TypeScript 2.9. It shows a generic React component and how to use it with type arguments.

LANGUAGE: typescript
CODE:
class GenericComponent<P> extends React.Component<P> {
  internalProp: P;
}

type Props = { a: number; b: string };

const x = <GenericComponent<Props> a={10} b="hi" />; // OK

const y = <GenericComponent<Props> a={10} b={20} />; // Error

----------------------------------------

TITLE: Module Output: None
DESCRIPTION: Illustrates the TypeScript compiler output when the module option is set to None, which doesn't transform module syntax.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: none
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: TypeScript Compiler Configuration with OutDir
DESCRIPTION: Example tsconfig.json configuration that specifies a 'dist' directory as the output location for compiled files.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "outDir": "dist"
  }
}

----------------------------------------

TITLE: Resolving Module Imports with Base URL in TypeScript
DESCRIPTION: Demonstrates how to use the 'baseUrl' option to resolve module imports from a specified base directory. This example shows importing a module 'hello/world' relative to the project root.

LANGUAGE: typescript
CODE:
import { helloWorld } from "hello/world";

console.log(helloWorld);

----------------------------------------

TITLE: Basic TypeScript Function Implementation
DESCRIPTION: Example TypeScript code demonstrating DOM manipulation and string interpolation

LANGUAGE: typescript
CODE:
function sayHello() {
  const compiler = (document.getElementById("compiler") as HTMLInputElement).value;
  const framework = (document.getElementById("framework") as HTMLInputElement).value;
  return `Hello from ${compiler} and ${framework}!`;
}

----------------------------------------

TITLE: JSDoc Import Tag Example
DESCRIPTION: Demonstrates the new @import JSDoc tag for importing types in JavaScript files without runtime imports.

LANGUAGE: js
CODE:
/** @import { SomeType } from "some-module" */

/**
 * @param {SomeType} myValue
 */
function doSomething(myValue) {
    // ...
}

----------------------------------------

TITLE: Configuring Custom Conditions in tsconfig.json
DESCRIPTION: Demonstrates how to set up custom conditions in a TypeScript configuration file. This example adds a custom condition 'my-condition' to the resolver's default conditions.

LANGUAGE: jsonc
CODE:
{
    "compilerOptions": {
        "target": "es2022",
        "moduleResolution": "bundler",
        "customConditions": ["my-condition"]
    }
}

----------------------------------------

TITLE: Implementing Mapped Types in TypeScript
DESCRIPTION: Demonstrates how to use mapped types to create new types by transforming properties of existing types.

LANGUAGE: typescript
CODE:
type Partial<T> = {
  [P in keyof T]?: T[P];
};

type PartialPerson = Partial<Person>;

// More examples of mapped types
type Readonly<T> = {
  readonly [P in keyof T]: T[P];
};

type Deferred<T> = {
  [P in keyof T]: Promise<T[P]>;
};

type Proxify<T> = {
  [P in keyof T]: { get(): T[P]; set(v: T[P]): void };
};

----------------------------------------

TITLE: Using require() with --moduleResolution bundler in TypeScript 5.4
DESCRIPTION: Demonstrates the new support for require() calls when using --moduleResolution bundler and --module preserve in TypeScript 5.4.

LANGUAGE: typescript
CODE:
import * as foo from "some-package/foo";
import bar = require("some-package/bar");

----------------------------------------

TITLE: Declaring Global Variables in TypeScript
DESCRIPTION: Demonstrates how to use 'declare var' to declare global variables. This example declares a global variable 'foo' of type number.

LANGUAGE: typescript
CODE:
/** The number of widgets present */
declare var foo: number;

----------------------------------------

TITLE: Overriding Inherited TypeScript Configuration in JSON
DESCRIPTION: This snippet shows a 'tsconfig.nostrictnull.json' file that extends another configuration and overrides a specific compiler option.

LANGUAGE: json
CODE:
{
  "extends": "./tsconfig",
  "compilerOptions": {
    "strictNullChecks": false
  }
}

----------------------------------------

TITLE: Configuring Package Exports Resolution in TypeScript
DESCRIPTION: The --resolvePackageJsonExports compiler flag enables TypeScript to use the exports field in package.json when resolving imports from node_modules. This option is automatically enabled when using node16, nodenext, or bundler moduleResolution settings.

LANGUAGE: typescript
CODE:
--resolvePackageJsonExports

----------------------------------------

TITLE: Configuring Base TypeScript Settings in JSON
DESCRIPTION: This snippet shows a base configuration file 'configs/base.json' that sets compiler options for strict null checks and implicit any types.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}

----------------------------------------

TITLE: Applying Mixin to Create New Class in TypeScript
DESCRIPTION: Demonstrates how to compose a new class by applying the Scale mixin to the Sprite base class. It also shows usage of the resulting class.

LANGUAGE: typescript
CODE:
const EightBitSprite = Scale(Sprite);

const flappySprite = new EightBitSprite("Bird");
flappySprite.setScale(0.8);
console.log(flappySprite.scale);

----------------------------------------

TITLE: ConfigDir Template Variable Usage
DESCRIPTION: Shows how to use the new ${configDir} template variable in tsconfig.json files for more portable path configurations.

LANGUAGE: json5
CODE:
{
    "compilerOptions": {
        "typeRoots": [
            "${configDir}/node_modules/@types"
            "${configDir}/custom-types"
        ],
        "outDir": "${configDir}/dist"
    }
}

----------------------------------------

TITLE: Configuring Watch Options in tsconfig.json
DESCRIPTION: Example configuration for TypeScript watch mode settings in tsconfig.json. Shows how to configure native file system events, polling behavior, and file/directory exclusions.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es2020",
    "moduleResolution": "node"
  },

  "watchOptions": {
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    "fallbackPolling": "dynamicPriority",
    "synchronousWatchDirectory": true,
    "excludeDirectories": ["**/node_modules", "_build"],
    "excludeFiles": ["build/fileWhichChangesOften.ts"]
  }
}

----------------------------------------

TITLE: Using Utility Types in TypeScript
DESCRIPTION: Shows examples of using built-in utility types like Partial, Readonly, Record, and Pick for common transformations.

LANGUAGE: typescript
CODE:
function assign<T>(obj: T, props: Partial<T>): void;
function freeze<T>(obj: T): Readonly<T>;

// Using Pick
declare function pick<T, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;

const nameAndAgeOnly = pick(person, "name", "age"); // { name: string, age: number }

// Using Record
function mapObject<K extends string, T, U>(
  obj: Record<K, T>,
  f: (x: T) => U
): Record<K, U>;

const names = { foo: "hello", bar: "world", baz: "bye" };
const lengths = mapObject(names, s => s.length); // { foo: number, bar: number, baz: number }

----------------------------------------

TITLE: Defining AsyncIterator Interface in TypeScript
DESCRIPTION: This code defines the AsyncIterator interface, which is similar to Iterator but returns Promises for iteration results.

LANGUAGE: typescript
CODE:
interface AsyncIterator<T> {
  next(value?: any): Promise<IteratorResult<T>>;
  return?(value?: any): Promise<IteratorResult<T>>;
  throw?(e?: any): Promise<IteratorResult<T>>;
}

----------------------------------------

TITLE: Import Attributes in TypeScript
DESCRIPTION: Demonstrates the new import attributes feature that provides information about module format to the runtime. Shows usage with both static imports and dynamic import() calls.

LANGUAGE: typescript
CODE:
// We only want this to be interpreted as JSON,
// not a runnable/malicious JavaScript file with a `.json` extension.
import obj from "./something.json" with { type: "json" };

LANGUAGE: typescript
CODE:
// TypeScript is fine with this.
// But your browser? Probably not.
import * as foo from "./foo.js" with { type: "fluffy bunny" };

LANGUAGE: typescript
CODE:
const obj = await import("./something.json", {
    with: { type: "json" }
});

----------------------------------------

TITLE: Emitting JSX with react-jsx Transform
DESCRIPTION: Demonstrates how TypeScript compiles JSX using the react-jsx transform option, which is optimized for production.

LANGUAGE: tsx
CODE:
declare module JSX {
  interface Element {}
  interface IntrinsicElements {
    [s: string]: any;
  }
}
// @showEmit
// @noErrors
// @jsx: react-jsx
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: TypeScript ES2023 Array Method Examples
DESCRIPTION: Examples of newer array methods available in ES2023 library definitions, showing modern JavaScript array manipulation methods.

LANGUAGE: typescript
CODE:
array.with
array.findLast
array.findLastIndex
array.toSorted
array.toReversed

----------------------------------------

TITLE: Configuring TypeRoots in TypeScript tsconfig.json
DESCRIPTION: This snippet demonstrates how to use the 'typeRoots' option in a tsconfig.json file to specify custom directories for type declarations. It includes two paths: './typings' and './vendor/types', which will be used instead of the default '@types' folder in node_modules.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "typeRoots": ["./typings", "./vendor/types"]
  }
}

----------------------------------------

TITLE: Demonstrating TypeScript Behavior with noImplicitAny Enabled
DESCRIPTION: This snippet illustrates how TypeScript behaves when 'noImplicitAny' is enabled. It shows that TypeScript will issue an error for parameters without type annotations.

LANGUAGE: typescript
CODE:
// @errors: 7006
function fn(s) {
  console.log(s.subtr(3));
}

----------------------------------------

TITLE: Extending Classes with Super Calls in TypeScript
DESCRIPTION: Shows how TypeScript 2.1 handles extending classes where the base constructor may return a different object, important for custom elements.

LANGUAGE: typescript
CODE:
class Base {
  x: number;
  constructor() {
    // return a new object other than `this`
    return {
      x: 1
    };
  }
}

class Derived extends Base {
  constructor() {
    super();
    this.x = 2;
  }
}

LANGUAGE: javascript
CODE:
var Derived = (function(_super) {
  __extends(Derived, _super);
  function Derived() {
    var _this = _super.call(this) || this;
    _this.x = 2;
    return _this;
  }
  return Derived;
})(Base);

----------------------------------------

TITLE: Disallowing Nullish and Truthy Checks in TypeScript 5.6
DESCRIPTION: TypeScript 5.6 introduces new compiler checks to flag suspicious truthy or nullish expressions that may indicate errors.

LANGUAGE: typescript
CODE:
if (/0x[0-9a-f]/) {
    // Oops! This block always runs.
    // ...
}

if (x => 0) {
    // Oops! This block always runs.
    // ...
}

function isValid(value: string | number, options: any, strictness: "strict" | "loose") {
    if (strictness === "loose") {
        value = +value
    }
    return value < options.max ?? 100;
    // Oops! This is parsed as (value < options.max) ?? 100
}

if (
    isValid(primaryValue, "strict") || isValid(secondaryValue, "strict") ||
    isValid(primaryValue, "loose" || isValid(secondaryValue, "loose"))
) {
    //                           ^^^^ 👀 Did we forget a closing ')'?
}

----------------------------------------

TITLE: Hash-based URL Parameters for TypeScript Playground
DESCRIPTION: Examples of different hash-based URL patterns used to control the editor state and UI behavior in TypeScript Playground. Includes code representation, examples loading, and UI panel triggers.

LANGUAGE: plaintext
CODE:
#code/PRAz3dDc3...
#src=The%20code...
#example/generic-functions
#handbook-2
#show-examples
#show-whatisnew

----------------------------------------

TITLE: Configuring TypeScript for External Helpers
DESCRIPTION: Shows how to configure TypeScript to use external helpers from the tslib library instead of inlining them in every file.

LANGUAGE: sh
CODE:
npm install tslib
tsc --module commonjs --importHelpers a.ts

----------------------------------------

TITLE: Union Type Array Methods with Implicit Any
DESCRIPTION: Shows how array methods like forEach behave with union types under noImplicitAny, demonstrating potential type inference issues.

LANGUAGE: typescript
CODE:
interface Dog {
  kind: "dog";
  dogProp: any;
}
interface Cat {
  kind: "cat";
  catProp: any;
}

const catOrDogArray: Dog[] | Cat[] = [];

catOrDogArray.forEach(animal => {
  //                ~~~~~~ error!
  // Parameter 'animal' implicitly has an 'any' type.
});

----------------------------------------

TITLE: Triple-Slash Directive Preservation Examples
DESCRIPTION: Demonstrates the syntax for preserving triple-slash directives in the output using the preserve attribute.

LANGUAGE: typescript
CODE:
/// <reference path="..." />
/// <reference types="..." />
/// <reference lib="..." />

LANGUAGE: typescript
CODE:
/// <reference path="..." preserve="true" />
/// <reference types="..." preserve="true" />
/// <reference lib="..." preserve="true" />

----------------------------------------

TITLE: Demonstrating noUnusedParameters Flag in TypeScript
DESCRIPTION: Example showing how TypeScript's noUnusedParameters flag identifies an unused parameter 'modelID' in a function. The function declares a parameter that is never read within its body, triggering error 6133.

LANGUAGE: typescript
CODE:
// @noUnusedParameters
// @errors: 6133
const createDefaultKeyboard = (modelID: number) => {
  const defaultModelID = 23;
  return { type: "keyboard", modelID: defaultModelID };
};

----------------------------------------

TITLE: Setting mapRoot in TypeScript Configuration
DESCRIPTION: Example configuration showing how to specify a custom URL location for TypeScript source map files using the mapRoot compiler option. This configuration would cause index.js to have its source map located at https://my-website.com/debug/sourcemaps/index.js.map.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "sourceMap": true,
    "mapRoot": "https://my-website.com/debug/sourcemaps/"
  }
}

----------------------------------------

TITLE: TypeScript Example Without Strict Null Checks
DESCRIPTION: Demonstrates code behavior when strictNullChecks is false, allowing potentially unsafe access to objects that might be undefined.

LANGUAGE: typescript
CODE:
// @strictNullChecks: false
// @target: ES2015
declare const loggedInUsername: string;

const users = [
  { name: "Oby", age: 12 },
  { name: "Heera", age: 32 },
];

const loggedInUser = users.find((u) => u.name === loggedInUsername);
console.log(loggedInUser.age);

----------------------------------------

TITLE: Indexed Access Inference Improvements in TypeScript
DESCRIPTION: Shows how TypeScript 4.6 improves type inference for indexed access types on mapped object types.

LANGUAGE: typescript
CODE:
interface TypeMap {
  number: number;
  string: string;
  boolean: boolean;
}

type UnionRecord<P extends keyof TypeMap> = {
  [K in P]: {
    kind: K;
    v: TypeMap[K];
    f: (p: TypeMap[K]) => void;
  };
}[P];

function processRecord<K extends keyof TypeMap>(record: UnionRecord<K>) {
  record.f(record.v);
}

// This call used to have issues - now works!
processRecord({
  kind: "string",
  v: "hello!",

  // 'val' used to implicitly have the type 'string | number | boolean',
  // but now is correctly inferred to just 'string'.
  f: (val) => {
    console.log(val.toUpperCase());
  },
});

----------------------------------------

TITLE: Re-exporting Module Contents in TypeScript
DESCRIPTION: Demonstrates how to re-export contents from another module without introducing local names using the 'export from' syntax in TypeScript 1.5.

LANGUAGE: typescript
CODE:
export { read, write, standardOutput as stdout } from "./inout";

----------------------------------------

TITLE: Detailed Default Sandbox Compiler Options in TypeScript Playground
DESCRIPTION: This TypeScript function defines the full specification of default compiler settings used in the TypeScript Playground as of TypeScript 4.5. It includes a comprehensive list of compiler options and their default values.

LANGUAGE: typescript
CODE:
export function getDefaultSandboxCompilerOptions(config: SandboxConfig, monaco: Monaco) {
  const useJavaScript = config.filetype === "js"
  const settings: CompilerOptions = {
    strict: true,

    noImplicitAny: true,
    strictNullChecks: !useJavaScript,
    strictFunctionTypes: true,
    strictPropertyInitialization: true,
    strictBindCallApply: true,
    noImplicitThis: true,
    noImplicitReturns: true,
    noUncheckedIndexedAccess: false,

    useDefineForClassFields: false,

    alwaysStrict: true,
    allowUnreachableCode: false,
    allowUnusedLabels: false,

    downlevelIteration: false,
    noEmitHelpers: false,
    noLib: false,
    noStrictGenericChecks: false,
    noUnusedLocals: false,
    noUnusedParameters: false,

    esModuleInterop: true,
    preserveConstEnums: false,
    removeComments: false,
    skipLibCheck: false,

    checkJs: useJavaScript,
    allowJs: useJavaScript,
    declaration: true,

    importHelpers: false,

    experimentalDecorators: true,
    emitDecoratorMetadata: true,
    moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,

    target: monaco.languages.typescript.ScriptTarget.ES2017,
    jsx: monaco.languages.typescript.JsxEmit.React,
    module: monaco.languages.typescript.ModuleKind.ESNext,
  }

  return { ...settings, ...config.compilerOptions }
}

----------------------------------------

TITLE: Generic Rest Parameters Example in TypeScript
DESCRIPTION: Illustrates how generic rest parameters can be used for function binding with type inference

LANGUAGE: typescript
CODE:
declare function bind<T, U extends any[], V>(
  f: (x: T, ...args: U) => V,
  x: T
): (...args: U) => V;

declare function f3(x: number, y: string, z: boolean): void;

const f2 = bind(f3, 42); // (y: string, z: boolean) => void
const f1 = bind(f2, "hello"); // (z: boolean) => void
const f0 = bind(f1, true); // () => void

f3(42, "hello", true);
f2("hello", true);
f1(true);
f0();

----------------------------------------

TITLE: Package.json Type Configuration for ESM
DESCRIPTION: Setting package.json type field to specify ECMAScript module handling

LANGUAGE: jsonc
CODE:
{
    "name": "my-package",
    "type": "module",
    "//": "...",
    "dependencies": {
    }
}

----------------------------------------

TITLE: Demonstrating Mapped Types on Tuples in TypeScript 3.1
DESCRIPTION: This snippet shows how mapped object types now produce new tuples/arrays in TypeScript 3.1. It defines a MapToPromise type that converts each element of a tuple to a Promise of that element's type.

LANGUAGE: typescript
CODE:
type MapToPromise<T> = { [K in keyof T]: Promise<T[K]> };

type Coordinate = [number, number];

type PromiseCoordinate = MapToPromise<Coordinate>; // [Promise<number>, Promise<number>]

----------------------------------------

TITLE: Adding to Classes Using Namespaces in TypeScript
DESCRIPTION: Shows how to use namespace declarations to add static members, nested types, and nested namespaces to existing classes.

LANGUAGE: typescript
CODE:
class C {}
// ... elsewhere ...
namespace C {
  export let x: number;
}
let y = C.x; // OK

LANGUAGE: typescript
CODE:
class C {}
// ... elsewhere ...
namespace C {
  export interface D {}
}
let y: C.D; // OK

----------------------------------------

TITLE: Compiling TypeScript with inlineSources and inlineSourceMap
DESCRIPTION: This example demonstrates the output when compiling TypeScript with both 'inlineSources' and 'inlineSourceMap' options enabled. The resulting JavaScript includes a comment with the source map containing the original source code.

LANGUAGE: typescript
CODE:
const helloWorld = "hi";
console.log(helloWorld);

----------------------------------------

TITLE: Demonstrating Error Reporting with checkJs Enabled
DESCRIPTION: This snippet shows how enabling 'checkJs' along with 'allowJs' causes TypeScript to report errors in JavaScript files. It highlights the type checking applied to the parseFloat usage in the JavaScript code.

LANGUAGE: typescript
CODE:
// @errors: 2345
// @allowjs: true
// @checkjs: true
// @filename: constants.js
module.exports.pi = parseFloat(3.142);

// @filename: index.ts
import { pi } from "./constants";
console.log(pi);

----------------------------------------

TITLE: Using TypeScript VFS with Node.js in TypeScript
DESCRIPTION: Demonstrates how to use TypeScript VFS in a Node.js environment, including setting up a file system-backed system and getting completions.

LANGUAGE: typescript
CODE:
const compilerOpts: ts.CompilerOptions = { target: ts.ScriptTarget.ES2016, esModuleInterop: true }
const fsMap = new Map<string, string>()

// If using imports where the types don't directly match up to their FS representation (like the
// imports for node) then use triple-slash directives to make sure globals are set up first.
const content = `/// <reference types="node" />\nimport * as path from 'path';\npath.`
fsMap.set("index.ts", content)

// By providing a project root, then the system knows how to resolve node_modules correctly
const projectRoot = path.join(__dirname, "..")
const system = createFSBackedSystem(fsMap, projectRoot)
const env = createVirtualTypeScriptEnvironment(system, ["index.ts"], ts, compilerOpts)

// Requests auto-completions at `path.|`
const completions = env.languageService.getCompletionsAtPosition("index.ts", content.length, {})

----------------------------------------

TITLE: Project References TSConfig Configuration
DESCRIPTION: Example tsconfig.json configuration showing how to set up project references

LANGUAGE: javascript
CODE:
{
    "compilerOptions": {
        // The usual
    },
    "references": [
        { "path": "../src" }
    ]
}

----------------------------------------

TITLE: TypeScript JSX Type Casting Example
DESCRIPTION: Demonstrates the new 'as' operator for type casting in TypeScript, which replaces the prefix cast operator when using JSX.

LANGUAGE: typescript
CODE:
var x = <any>foo;
// is equivalent to:
var x = foo as any;

----------------------------------------

TITLE: Demonstrating URL-Encoded Code Input in TypeScript Playground
DESCRIPTION: Illustrates how to include TypeScript code in the playground URL using URL encoding.

LANGUAGE: typescript
CODE:
#src=The%20code

----------------------------------------

TITLE: Using 'unknown' Type for Catch Clause Variables
DESCRIPTION: Shows how to use the 'unknown' type for catch clause variables to improve type safety in error handling.

LANGUAGE: typescript
CODE:
try {
  // ...
} catch (e: unknown) {
  // Can't access values on unknowns
  console.log(e.toUpperCase());

  if (typeof e === "string") {
    // We've narrowed 'e' down to the type 'string'.
    console.log(e.toUpperCase());
  }
}

----------------------------------------

TITLE: Unknown Type Operations and Constraints
DESCRIPTION: Comprehensive example showing operations and constraints with the new unknown type

LANGUAGE: typescript
CODE:
// Type variable and unknown in union and intersection

type T20<T> = T & {}; // T & {}
type T21<T> = T | {}; // T | {}
type T22<T> = T & unknown; // T
type T23<T> = T | unknown; // unknown

// unknown in conditional types

type T30<T> = unknown extends T ? true : false; // Deferred
type T31<T> = T extends unknown ? true : false; // Deferred (so it distributes)
type T32<T> = never extends T ? true : false; // true
type T33<T> = T extends never ? true : false; // Deferred

----------------------------------------

TITLE: JSX defaultProps Support Example
DESCRIPTION: Shows how to use defaultProps with React components in TypeScript 3.0

LANGUAGE: tsx
CODE:
export interface Props {
  name: string;
}

export class Greet extends React.Component<Props> {
  render() {
    const { name } = this.props;
    return <div>Hello {name.toUpperCase()}!</div>;
  }
  static defaultProps = { name: "world" };
}

// Type-checks! No type assertions needed!
let el = <Greet />;

----------------------------------------

TITLE: Package.json with Custom Condition Export Mapping
DESCRIPTION: Shows an example package.json file with export mappings that include a custom condition. This demonstrates how TypeScript would resolve imports based on the custom condition set in the tsconfig.json.

LANGUAGE: jsonc
CODE:
{
    // ...
    "exports": {
        ".": {
            "my-condition": "./foo.mjs",
            "node": "./bar.mjs",
            "import": "./baz.mjs",
            "require": "./biz.mjs"
        }
    }
}

----------------------------------------

TITLE: Importing Unchecked JavaScript in TypeScript without Errors
DESCRIPTION: This example demonstrates how unchecked JavaScript can be imported into a TypeScript file without generating errors when 'checkJs' is not enabled. It uses the 'allowJs' option to allow JavaScript imports.

LANGUAGE: typescript
CODE:
// @allowJs
// @filename: constants.js
module.exports.pi = parseFloat(3.142);

// @filename: index.ts
import { pi } from "./constants";
console.log(pi);

----------------------------------------

TITLE: Setting Up TypeScript Lib Files for Web Environment in TypeScript
DESCRIPTION: Demonstrates how to set up TypeScript lib files for a web environment, including reading from node_modules and creating a default map.

LANGUAGE: typescript
CODE:
const getLib = (name: string) => {
  const lib = dirname(require.resolve("typescript"))
  return readFileSync(join(lib, name), "utf8")
}

const addLib = (name: string, map: Map<string, string>) => {
  map.set("/" + name, getLib(name))
}

const createDefaultMap2015 = () => {
  const fsMap = new Map<string, string>()
  addLib("lib.es2015.d.ts", fsMap)
  addLib("lib.es2015.collection.d.ts", fsMap)
  addLib("lib.es2015.core.d.ts", fsMap)
  addLib("lib.es2015.generator.d.ts", fsMap)
  addLib("lib.es2015.iterable.d.ts", fsMap)
  addLib("lib.es2015.promise.d.ts", fsMap)
  addLib("lib.es2015.proxy.d.ts", fsMap)
  addLib("lib.es2015.reflect.d.ts", fsMap)
  addLib("lib.es2015.symbol.d.ts", fsMap)
  addLib("lib.es2015.symbol.wellknown.d.ts", fsMap)
  addLib("lib.es5.d.ts", fsMap)
  return fsMap
}

----------------------------------------

TITLE: Illustrating Extra Properties Error in TypeScript
DESCRIPTION: This example demonstrates an error when trying to assign an object with an extra property to a variable of a type that doesn't include that property. It shows how TypeScript enforces exact object shape matching.

LANGUAGE: typescript
CODE:
type A = { m: number };
const a: A = { m: 10, n: "" };

----------------------------------------

TITLE: Control Flow Based Type Analysis in TypeScript
DESCRIPTION: Example demonstrating how TypeScript 2.0 performs control flow analysis to determine variable types in different code blocks.

LANGUAGE: typescript
CODE:
function foo(x: string | number | boolean) {
  if (typeof x === "string") {
    x; // type of x is string here
    x = 1;
    x; // type of x is number here
  }
  x; // type of x is number | boolean here
}

function bar(x: string | number) {
  if (typeof x === "number") {
    return;
  }
  x; // type of x is string here
}

----------------------------------------

TITLE: Configuring TypeScript Source Root with URL Path
DESCRIPTION: Demonstrates how to set up the sourceRoot compiler option in tsconfig.json to specify a custom URL path for debugger source file resolution. Requires sourceMap to be enabled for functionality.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "sourceMap": true,
    "sourceRoot": "https://my-website.com/debug/source/"
  }
}

----------------------------------------

TITLE: Defining Basic Primitive Type Alias
DESCRIPTION: Demonstrates how to create a type alias for common primitive types.

LANGUAGE: typescript
CODE:
type BasicPrimitive = number | string | boolean;

----------------------------------------

TITLE: Using Spread Operator in JSX Element Children
DESCRIPTION: Illustrates the new support for using the spread operator on JSX element children in TypeScript 2.2.

LANGUAGE: typescript
CODE:
function Todo(prop: { key: number; todo: string }) {
  return <div>{prop.key.toString() + prop.todo}</div>;
}

function TodoList({ todos }: TodoListProps) {
  return (
    <div>{...todos.map(todo => <Todo key={todo.id} todo={todo.todo} />)}</div>
  );
}

let x: TodoListProps;

<TodoList {...x} />;

----------------------------------------

TITLE: Demonstrating Rest Parameters with Tuple Types in TypeScript
DESCRIPTION: Shows how tuple types can be used with rest parameters to create equivalent function declarations

LANGUAGE: typescript
CODE:
declare function foo(...args: [number, string, boolean]): void;

LANGUAGE: typescript
CODE:
declare function foo(args_0: number, args_1: string, args_2: boolean): void;

----------------------------------------

TITLE: Weak Type Interface Definition
DESCRIPTION: Shows the definition and usage of weak types in TypeScript 2.4, where a type containing only optional properties is considered weak and receives additional type checking.

LANGUAGE: typescript
CODE:
interface Options {
  data?: string;
  timeout?: number;
  maxRetries?: number;
}

function sendMessage(options: Options) {
  // ...
}

const opts = {
  payload: "hello world!",
  retryOnFail: true
};

// Error!
sendMessage(opts);

----------------------------------------

TITLE: Directory Structure with Include Pattern Matches
DESCRIPTION: Visual representation of which files would be included (✓) or excluded (⨯) based on the include patterns. Shows the complete directory structure with matching indicators.

LANGUAGE: plaintext
CODE:
.
├── scripts                ⨯
│   ├── lint.ts            ⨯
│   ├── update_deps.ts     ⨯
│   └── utils.ts           ⨯
├── src                    ✓
│   ├── client             ✓
│   │    ├── index.ts      ✓
│   │    └── utils.ts      ✓
│   ├── server             ✓
│   │    └── index.ts      ✓
├── tests                  ✓
│   ├── app.test.ts        ✓
│   ├── utils.ts           ✓
│   └── tests.d.ts         ✓
├── package.json
├── tsconfig.json
└── yarn.lock

----------------------------------------

TITLE: Transpiler Behavior: Creating Synthetic Default Export
DESCRIPTION: Demonstrates how transpilers like Babel automatically create a default export for CommonJS modules, making them compatible with ES6 import syntax. This is similar to the behavior enabled by 'allowSyntheticDefaultImports'.

LANGUAGE: javascript
CODE:
// @filename: utilFunctions.js
const getStringLength = (str) => str.length;
const allFunctions = {
  getStringLength,
};

module.exports = allFunctions;
module.exports.default = allFunctions;

----------------------------------------

TITLE: TypeScript Version Parameter Examples
DESCRIPTION: Examples of URL parameters used for specifying TypeScript versions in the Playground URL. Shows both specific version number and 'next' parameter usage.

LANGUAGE: plaintext
CODE:
?ts=4.3.5

LANGUAGE: plaintext
CODE:
?ts=next

LANGUAGE: plaintext
CODE:
3.3.3333

----------------------------------------

TITLE: Exporting TypeScript-specific declarations
DESCRIPTION: Demonstrates how to export type aliases, interfaces, enums, and namespaces from a TypeScript module using the `export` keyword.

LANGUAGE: typescript
CODE:
// Standard JavaScript syntax...
export function f() {}
// ...extended to type declarations
export type SomeType = /* ... */;
export interface SomeInterface { /* ... */ }

----------------------------------------

TITLE: Using new.target in Constructable Functions
DESCRIPTION: Demonstrates the use of new.target in TypeScript 2.2 for writing constructable functions that can determine if they were called with 'new'.

LANGUAGE: typescript
CODE:
function f() {
  if (new.target) {
    /* called via 'new' */
  }
}

----------------------------------------

TITLE: Implementing Stricter Generator Functions in TypeScript 3.6
DESCRIPTION: Demonstrates improved type checking for generator functions, showing how TypeScript 3.6 correctly handles yielded vs returned values and provides better type inference.

LANGUAGE: typescript
CODE:
function* foo() {
  if (Math.random() < 0.5) yield 100;
  return "Finished!";
}

let iter = foo();
let curr = iter.next();
if (curr.done) {
  // TypeScript 3.5 and prior thought this was a 'string | number'.
  // It should know it's 'string' since 'done' was 'true'!
  curr.value;
}

----------------------------------------

TITLE: Import Assertions in TypeScript
DESCRIPTION: Examples of using import assertions for JSON imports and dynamic imports.

LANGUAGE: typescript
CODE:
import obj from "./something.json" assert { type: "json" };

LANGUAGE: typescript
CODE:
const obj = await import("./something.json", {
  assert: { type: "json" },
});

----------------------------------------

TITLE: Using import.meta in TypeScript
DESCRIPTION: This snippet shows how to use import.meta in TypeScript 2.9, including how to extend the ImportMeta interface to add custom properties. import.meta is only allowed when targeting ESNext modules and ECMAScript targets.

LANGUAGE: typescript
CODE:
// node.d.ts
interface ImportMeta {
  __dirname: string;
}

// Usage
import.meta.__dirname; // Has type 'string'

----------------------------------------

TITLE: Defining Simple Types and Values in TypeScript
DESCRIPTION: Demonstrates basic TypeScript declarations for types and values, including type aliases, interfaces, classes, enums, and imports.

LANGUAGE: typescript
CODE:
type sn = number | string;
interface I { x: number[]; }
class C { }
enum E { A, B, C }
let x = 5;

----------------------------------------

TITLE: Preserving Const Enums in TypeScript Compilation
DESCRIPTION: This snippet demonstrates the behavior when 'preserveConstEnums' is set to true. The enum declaration is preserved in the generated JavaScript, while still emitting the number literals for enum references.

LANGUAGE: typescript
CODE:
const enum Album {
  JimmyEatWorldFutures = 1,
  TubRingZooHypothesis = 2,
  DogFashionDiscoAdultery = 3,
}

const selectedAlbum = Album.JimmyEatWorldFutures;
if (selectedAlbum === Album.JimmyEatWorldFutures) {
  console.log("That is a great choice.");
}

----------------------------------------

TITLE: Importing without allowSyntheticDefaultImports in TypeScript
DESCRIPTION: Shows the alternative import syntax required when 'allowSyntheticDefaultImports' is not enabled, using the 'import * as' syntax for modules without a default export.

LANGUAGE: typescript
CODE:
import * as React from "react";

----------------------------------------

TITLE: TypeScript Build Commands
DESCRIPTION: Examples of different tsc build command options for project references

LANGUAGE: shell
CODE:
 > tsc -b                            # Use the tsconfig.json in the current directory
 > tsc -b src                        # Use src/tsconfig.json
 > tsc -b foo/prd.tsconfig.json bar  # Use foo/prd.tsconfig.json and bar/tsconfig.json

----------------------------------------

TITLE: Compiler Error for Unreachable Code in TypeScript
DESCRIPTION: This example demonstrates how setting 'allowUnreachableCode' to false raises a compiler error for unreachable code. The error is shown using the @errors pragma.

LANGUAGE: typescript
CODE:
// @errors: 7027
// @allowUnreachableCode: false
function fn(n: number) {
  if (n > 5) {
    return true;
  } else {
    return false;
  }
  return true;
}

----------------------------------------

TITLE: JavaScript Export Example
DESCRIPTION: Basic JavaScript file exporting a constant value using ES modules syntax.

LANGUAGE: javascript
CODE:
// @filename: card.js
export const defaultCardDeck = "Heart";

----------------------------------------

TITLE: Double Default Problem in Node.js
DESCRIPTION: Illustrates the "double default" problem when importing transpiled modules in Node.js ESM.

LANGUAGE: typescript
CODE:
// @Filename: node_modules/dependency/index.js
exports.__esModule = true;
exports.default = function doSomething() { /*...*/ }

LANGUAGE: typescript
CODE:
// @Filename: transpile-vs-run-directly.{js/mjs}
import doSomething from "dependency";
// Works after transpilation, but not a function in Node.js ESM:
doSomething();
// Doesn't exist after transpilation, but works in Node.js ESM:
doSomething.default();

----------------------------------------

TITLE: Demonstrating Granular Checks for Branches in Return Expressions in TypeScript
DESCRIPTION: This snippet shows how TypeScript 5.8 improves type checking for conditional expressions in return statements, catching potential bugs that were previously missed.

LANGUAGE: typescript
CODE:
declare const untypedCache: Map<any, any>;

function getUrlObject(urlString: string): URL {
    return untypedCache.has(urlString) ?
        untypedCache.get(urlString) :
        urlString;
    //  ~~~~~~~~~
    // error! Type 'string' is not assignable to type 'URL'.
}

----------------------------------------

TITLE: Setting File Type in TypeScript Playground URL
DESCRIPTION: Illustrates how to specify the file type (JavaScript, TypeScript, or Declaration) in the playground URL.

LANGUAGE: typescript
CODE:
?filetype=js|ts|dts

----------------------------------------

TITLE: Using import types in TypeScript
DESCRIPTION: This example demonstrates how to use import types in TypeScript 2.9 to access types from modules in non-module scripts. It shows both TypeScript and JavaScript (with JSDoc) usage.

LANGUAGE: typescript
CODE:
// module.d.ts

export declare class Pet {
  name: string;
}

// global-script.ts

function adopt(p: import("./module").Pet) {
  console.log(`Adopting ${p.name}...`);
}

// a.js

/**
 * @param p { import("./module").Pet }
 */
function walk(p) {
  console.log(`Walking ${p.name}...`);
}

----------------------------------------

TITLE: Supporting Multiple Import Styles (JavaScript)
DESCRIPTION: Example of a CommonJS module supporting various import styles including default and named exports.

LANGUAGE: javascript
CODE:
class FastifyInstance {}

function fastify() {
  return new FastifyInstance();
}

fastify.FastifyInstance = FastifyInstance;

// Allows for { fastify }
fastify.fastify = fastify;
// Allows for strict ES Module support
fastify.default = fastify;
// Sets the default export
module.exports = fastify;

----------------------------------------

TITLE: Configuring TypeScript Watch File Strategies
DESCRIPTION: This snippet outlines the available options for the 'Watch File' configuration in TypeScript. It describes five different strategies for monitoring file changes, ranging from fixed interval polling to using native file system events.

LANGUAGE: typescript
CODE:
{
  "watchFile": "fixedPollingInterval" | "priorityPollingInterval" | "dynamicPriorityPolling" | "useFsEvents" | "useFsEventsOnParentDirectory"
}

----------------------------------------

TITLE: CSS Import in React Component
DESCRIPTION: Shows how side effect imports are commonly used with bundlers to import CSS files in React components.

LANGUAGE: tsx
CODE:
import "./button-component.css";

export function Button() {
    // ...
}

----------------------------------------

TITLE: Integrating Browserify with TypeScript
DESCRIPTION: Instructions for using Browserify with TypeScript via tsify plugin, showing both CLI and API approaches.

LANGUAGE: shell
CODE:
npm install tsify

LANGUAGE: shell
CODE:
browserify main.ts -p [ tsify --noImplicitAny ] > bundle.js

LANGUAGE: javascript
CODE:
var browserify = require("browserify");
var tsify = require("tsify");

browserify()
  .add("main.ts")
  .plugin("tsify", { noImplicitAny: true })
  .bundle()
  .pipe(process.stdout);

----------------------------------------

TITLE: Loading Multi-file TypeScript Namespaces in HTML
DESCRIPTION: Demonstrates how to include multiple JavaScript files generated from TypeScript namespaces in an HTML file. This is necessary when using per-file compilation.

LANGUAGE: html
CODE:
<script src="Validation.js" type="text/javascript" />
<script src="LettersOnlyValidator.js" type="text/javascript" />
<script src="ZipCodeValidator.js" type="text/javascript" />
<script src="Test.js" type="text/javascript" />

----------------------------------------

TITLE: Exporting a Variable in TypeScript
DESCRIPTION: Demonstrates a simple TypeScript code snippet that exports a string variable. This is used to show the input for declaration file generation.

LANGUAGE: typescript
CODE:
export let helloWorld = "hi";

----------------------------------------

TITLE: Relative Path Reference in JavaScript
DESCRIPTION: Link reference using relative path syntax for the English examples directory.

LANGUAGE: markdown
CODE:
[`en/`](en/)

----------------------------------------

TITLE: Introducing the --noUncheckedSideEffectImports Option in TypeScript 5.6
DESCRIPTION: TypeScript 5.6 adds a new compiler option to catch potential typos in side effect imports.

LANGUAGE: typescript
CODE:
import "oops-this-module-does-not-exist";
//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding type declarations.

----------------------------------------

TITLE: Abstracting over numeric and symbol keys with keyof in TypeScript
DESCRIPTION: This snippet shows how to use keyof to abstract over access to properties of objects indexed by numeric literals (such as numeric enum types) and unique symbols in TypeScript 2.9.

LANGUAGE: typescript
CODE:
const enum Enum {
  A,
  B,
  C,
}

const enumToStringMap = {
  [Enum.A]: "Name A",
  [Enum.B]: "Name B",
  [Enum.C]: "Name C",
};

const sym1 = Symbol();
const sym2 = Symbol();
const sym3 = Symbol();

const symbolToNumberMap = {
  [sym1]: 1,
  [sym2]: 2,
  [sym3]: 3,
};

type KE = keyof typeof enumToStringMap; // Enum (i.e. Enum.A | Enum.B | Enum.C)
type KS = keyof typeof symbolToNumberMap; // typeof sym1 | typeof sym2 | typeof sym3

function getValue<T, K extends keyof T>(obj: T, key: K): T[K] {
  return obj[key];
}

let x1 = getValue(enumToStringMap, Enum.C); // Returns "Name C"
let x2 = getValue(symbolToNumberMap, sym3); // Returns 3

----------------------------------------

TITLE: Using Index Signatures with Dynamic Properties
DESCRIPTION: Shows how TypeScript handles both defined and undefined properties when using index signatures. Demonstrates type inference for both explicit and dynamic properties.

LANGUAGE: typescript
CODE:
declare const modernConstants: ModernConstants;

// This was defined earlier
modernConstants.raabe;

// This field was not defined above, so it is just `number`
modernConstants.lebesgue;

----------------------------------------

TITLE: Configuring Type Acquisition Settings in TypeScript
DESCRIPTION: JSON configuration to disable TypeScript's automatic type acquisition based on filenames. This prevents TypeScript from automatically downloading type definitions (like @types packages) when it detects files with names matching known libraries (e.g., jquery.js).

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "disableFilenameBasedTypeAcquisition": true
  }
}

----------------------------------------

TITLE: Invalid Module Import Error
DESCRIPTION: Demonstrates the error message shown when noUncheckedSideEffectImports is enabled and an invalid module is imported.

LANGUAGE: typescript
CODE:
import "oops-this-module-does-not-exist";
//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding
//        type declarations.

----------------------------------------

TITLE: Class Module Type Definition Template
DESCRIPTION: Comprehensive template for creating TypeScript declaration files (.d.ts) for class-based modules. Includes UMD namespace declaration, class definition, and associated types.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

/*~ This is the module template file for class modules.
 *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.
 *~ For example, if you were writing a file for "super-greeter", this
 *~ file should be 'super-greeter/index.d.ts'
 */

// Note that ES6 modules cannot directly export class objects.
// This file should be imported using the CommonJS-style:
//   import x = require('[~THE MODULE~]');
//
// Alternatively, if --allowSyntheticDefaultImports or
// --esModuleInterop is turned on, this file can also be
// imported as a default import:
//   import x from '[~THE MODULE~]';
//
// Refer to the TypeScript documentation at
// https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require
// to understand common workarounds for this limitation of ES6 modules.

/*~ If this module is a UMD module that exposes a global variable 'myClassLib' when
 *~ loaded outside a module loader environment, declare that global here.
 *~ Otherwise, delete this declaration.
 */
export as namespace myClassLib;

/*~ This declaration specifies that the class constructor function
 *~ is the exported object from the file
 */
export = Greeter;

/*~ Write your module's methods and properties in this class */
declare class Greeter {
  constructor(customGreeting?: string);

  greet: void;

  myMethod(opts: MyClass.MyClassMethodOptions): number;
}

/*~ If you want to expose types from your module as well, you can
 *~ place them in this block.
 *~
 *~ Note that if you decide to include this namespace, the module can be
 *~ incorrectly imported as a namespace object, unless
 *~ --esModuleInterop is turned on:
 *~   import * as x from '[~THE MODULE~]'; // WRONG! DO NOT DO THIS!
 */
declare namespace MyClass {
  export interface MyClassMethodOptions {
    width?: number;
    height?: number;
  }
}

----------------------------------------

TITLE: Importing CommonJS Function in TypeScript
DESCRIPTION: Demonstrates how to import a CommonJS function module in TypeScript.

LANGUAGE: typescript
CODE:
import * as hello from "./exports-function";
hello();

LANGUAGE: typescript
CODE:
const hello = require("./exports-function");
hello();

----------------------------------------

TITLE: Example Project Structure Before Compilation
DESCRIPTION: This snippet illustrates the initial file structure of a TypeScript project before compilation. It shows the presence of index.ts, package.json, and tsconfig.json files in the root directory.

LANGUAGE: plaintext
CODE:
example
├── index.ts
├── package.json
└── tsconfig.json

----------------------------------------

TITLE: Importing CSS Modules with TypeScript
DESCRIPTION: This snippet shows how to import CSS modules in TypeScript using generated declaration files. It demonstrates the benefit of using rootDirs for handling non-code imports in bundled applications.

LANGUAGE: typescript
CODE:
// @filename: main.css.d.ts
export const appClass = "mainClassF3EC2";
// ---cut---
// @filename: index.ts
import { appClass } from "./main.css";

----------------------------------------

TITLE: Demonstrating JavaScript Equality Operator Quirks
DESCRIPTION: Shows unexpected behavior of JavaScript's equality operator through coercion examples.

LANGUAGE: javascript
CODE:
if ("" == 0) {
  // It is! But why??
}
if (1 < x < 3) {
  // True for *any* value of x!
}

----------------------------------------

TITLE: Configuring Project References in TypeScript
DESCRIPTION: Example showing the display and oneline configuration properties for TypeScript project references documentation. These properties define how the configuration option should be presented in documentation.

LANGUAGE: yaml
CODE:
display: "References"
oneline: "Specify an array of objects that specify paths for projects. Used in project references."

----------------------------------------

TITLE: Demonstrating keyof and mapped types with number and symbol properties in TypeScript
DESCRIPTION: This snippet shows how keyof and mapped types now support number and symbol named properties in TypeScript 2.9. It demonstrates the behavior of keyof with different property types and how Extract can be used to filter property types.

LANGUAGE: typescript
CODE:
const c = "c";
const d = 10;
const e = Symbol();

const enum E1 {
  A,
  B,
  C,
}
const enum E2 {
  A = "A",
  B = "B",
  C = "C",
}

type Foo = {
  a: string; // String-like name
  5: string; // Number-like name
  [c]: string; // String-like name
  [d]: string; // Number-like name
  [e]: string; // Symbol-like name
  [E1.A]: string; // Number-like name
  [E2.A]: string; // String-like name
};

type K1 = keyof Foo; // "a" | 5 | "c" | 10 | typeof e | E1.A | E2.A
type K2 = Extract<keyof Foo, string>; // "a" | "c" | E2.A
type K3 = Extract<keyof Foo, number>; // 5 | 10 | E1.A
type K4 = Extract<keyof Foo, symbol>; // typeof e

----------------------------------------

TITLE: Improved destructuring with object and array literals in TypeScript
DESCRIPTION: Illustrates the improved checking for destructuring patterns with object and array literal initializers in TypeScript 1.7, showing how default values and optional properties are handled.

LANGUAGE: typescript
CODE:
// Type of f1 is (arg?: { x?: number, y?: number }) => void
function f1({ x = 0, y = 0 } = {}) {}

// And can be called as:
f1();
f1({});
f1({ x: 1 });
f1({ y: 1 });
f1({ x: 1, y: 1 });

// Type of f2 is (arg?: (x: number, y?: number) => void
function f2({ x, y = 0 } = { x: 0 }) {}

f2();
f2({}); // Error, x not optional
f2({ x: 1 });
f2({ y: 1 }); // Error, x not optional
f2({ x: 1, y: 1 });

----------------------------------------

TITLE: JSX Factory Configuration Example
DESCRIPTION: Demonstrates JSX compilation with custom factory setting using compiler directives for Preact.

LANGUAGE: tsx
CODE:
// @showEmit
// @showEmittedFile: index.js
// @jsxFactory: h
// @noErrors
// @target: esnext
// @module: commonjs

import { h, Fragment } from "preact";

const HelloWorld = () => <div>Hello</div>;

----------------------------------------

TITLE: Excluding Modules from Type Acquisition in TypeScript
DESCRIPTION: This snippet shows how to exclude specific modules (e.g., 'jquery') from automatic type acquisition, even if they're available in node_modules.

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "exclude": ["jquery"]
  }
}

----------------------------------------

TITLE: Exporting a Function with Extra Properties (JavaScript)
DESCRIPTION: Example of exporting a function with additional properties in CommonJS.

LANGUAGE: javascript
CODE:
function getArrayLength(arr) {
  return arr.length;
}
getArrayLength.maxInterval = 12;

module.exports = getArrayLength;

----------------------------------------

TITLE: CommonJS Module Export in TypeScript
DESCRIPTION: Shows how to export using CommonJS module.exports syntax in TypeScript.

LANGUAGE: typescript
CODE:
function absolute(num: number) {
  if (num < 0) return num * -1;
  return num;
}

module.exports = {
  pi: 3.14,
  squareTwo: 1.41,
  phi: 1.61,
  absolute,
};

----------------------------------------

TITLE: Example Project Structure After Compilation
DESCRIPTION: This snippet demonstrates the resulting file structure after TypeScript compilation with the specified declarationDir option. It shows the generated index.js file in the root and the index.d.ts file in the 'types' subdirectory.

LANGUAGE: plaintext
CODE:
example
├── index.js
├── index.ts
├── package.json
├── tsconfig.json
└── types
    └── index.d.ts

----------------------------------------

TITLE: Configuring TypeScript Options in MSBuild Project XML
DESCRIPTION: Example of defining TypeScript compiler options using PropertyGroup elements in an MSBuild project file.

LANGUAGE: xml
CODE:
<PropertyGroup>
  <TypeScriptNoEmitOnError>true</TypeScriptNoEmitOnError>
  <TypeScriptNoImplicitReturns>true</TypeScriptNoImplicitReturns>
</PropertyGroup>

----------------------------------------

TITLE: Basic JavaScript Operations Example
DESCRIPTION: Demonstrates basic JavaScript operations on a variable to illustrate type behavior.

LANGUAGE: javascript
CODE:
// Accessing the property 'toLowerCase'
// on 'message' and then calling it
message.toLowerCase();

// Calling 'message'
message();

----------------------------------------

TITLE: JSX Factory Configuration in TypeScript Files
DESCRIPTION: Demonstrates how to configure a per-file JSX factory using the @jsx pragma comment.

LANGUAGE: typescript
CODE:
/** @jsx dom */
import { dom } from "./renderer";
<h></h>;

----------------------------------------

TITLE: Implementing Partial Type in TypeScript
DESCRIPTION: Shows how to use Partial utility type to make all properties optional in an interface

LANGUAGE: typescript
CODE:
interface Todo {
  title: string;
  description: string;
}

function updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {
  return { ...todo, ...fieldsToUpdate };
}

const todo1 = {
  title: "organize desk",
  description: "clear clutter",
};

const todo2 = updateTodo(todo1, {
  description: "throw out trash",
});

----------------------------------------

TITLE: Basic Preact JSX Example
DESCRIPTION: A simple example showing JSX usage with Preact's h function import.

LANGUAGE: tsx
CODE:
import { h } from "preact";

const HelloWorld = () => <div>Hello</div>;

----------------------------------------

TITLE: Disabling Type Acquisition in TypeScript
DESCRIPTION: This snippet shows how to disable automatic type acquisition by setting 'enable' to false in the jsconfig.json file.

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "enable": false
  }
}

----------------------------------------

TITLE: Exporting a Function in ES Modules (JavaScript)
DESCRIPTION: Example of exporting a function using ES Modules syntax in JavaScript.

LANGUAGE: javascript
CODE:
export function getArrayLength(arr) {
  return arr.length;
}

----------------------------------------

TITLE: Empty Module Declaration in TypeScript
DESCRIPTION: Converting a non-module file to a module by adding an empty export statement.

LANGUAGE: typescript
CODE:
export {};

----------------------------------------

TITLE: Disabling Source Project Reference Redirect in TypeScript Configuration
DESCRIPTION: A TypeScript compiler option that allows reverting to pre-3.7 behavior where declaration (.d.ts) files are used as module boundaries instead of source (.ts) files in composite projects. This setting affects how TypeScript handles project references in composite project setups.

LANGUAGE: typescript
CODE:
{
  "disableSourceProjectReferenceRedirect": true
}

----------------------------------------

TITLE: Tail-Recursion Elimination on Conditional Types
DESCRIPTION: Examples of conditional types that can benefit from tail-recursion elimination optimization.

LANGUAGE: typescript
CODE:
type TrimLeft<T extends string> =
    T extends ` ${infer Rest}` ? TrimLeft<Rest> : T;

// Test = "hello" | "world"
type Test = TrimLeft<"   hello" | " world">;

LANGUAGE: typescript
CODE:
type GetChars<S> = GetCharsHelper<S, never>;
type GetCharsHelper<S, Acc> =
    S extends `${infer Char}${infer Rest}` ? GetCharsHelper<Rest, Char | Acc> : Acc;

----------------------------------------

TITLE: Using typeof Operator in TypeScript Type Context
DESCRIPTION: Shows how to use the typeof operator in a TypeScript type context to refer to the type of a variable.

LANGUAGE: typescript
CODE:
let s = "hello";
let n: typeof s;
//  ^?

----------------------------------------

TITLE: Using noResolve Compiler Option in TypeScript
DESCRIPTION: The noResolve option prevents TypeScript from automatically including files referenced through import and <reference> directives in the program. While the resolution process is disabled, import statements are still validated to ensure they point to valid modules.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "noResolve": true
  }
}

----------------------------------------

TITLE: Type Inference in Conditional Types with TypeScript
DESCRIPTION: Demonstrates how to use the 'infer' keyword for type inference within conditional types.

LANGUAGE: typescript
CODE:
type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;

type Unpacked<T> = T extends (infer U)[]
  ? U
  : T extends (...args: any[]) => infer U
  ? U
  : T extends Promise<infer U>
  ? U
  : T;

type T0 = Unpacked<string>; // string
type T1 = Unpacked<string[]>; // string
type T2 = Unpacked<() => string>; // string
type T3 = Unpacked<Promise<string>>; // string
type T4 = Unpacked<Promise<string>[]>; // Promise<string>
type T5 = Unpacked<Unpacked<Promise<string>[]>>; // string

----------------------------------------

TITLE: Declaring Exported Functions and Constants (TypeScript)
DESCRIPTION: TypeScript declaration file (.d.ts) equivalent for the CommonJS module, using ES Module-like syntax.

LANGUAGE: typescript
CODE:
export function getArrayLength(arr: any[]): number;
export const maxInterval: 12;

----------------------------------------

TITLE: Including Specific Type Definitions in JavaScript Projects
DESCRIPTION: This JSON configuration in jsconfig.json specifies additional type definitions to be downloaded for a JavaScript project. In this example, it instructs TypeScript to acquire type definitions for jQuery.

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "include": ["jquery"]
  }
}

----------------------------------------

TITLE: Emitting Declarations with stripInternal Set to True in TypeScript
DESCRIPTION: This snippet demonstrates the effect of setting 'stripInternal' to true. The internal constant is omitted from the generated declaration file, while the exported function remains.

LANGUAGE: typescript
CODE:
// @stripinternal
// @showEmittedFile: index.d.ts
// @showEmit
// @declaration
/**
 * Days available in a week
 * @internal
 */
export const daysInAWeek = 7;

/** Calculate how much someone earns in a week */
export function weeklySalary(dayRate: number) {
  return daysInAWeek * dayRate;
}

----------------------------------------

TITLE: Global Library TypeScript Declaration Template
DESCRIPTION: Comprehensive template for creating TypeScript declaration files for global libraries, including function overloads, interfaces, namespaces, and various type definitions.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

/*~ If this library is callable (e.g. can be invoked as myLib(3)),
 *~ include those call signatures here.
 *~ Otherwise, delete this section.
 */
declare function myLib(a: string): string;
declare function myLib(a: number): number;

/*~ If you want the name of this library to be a valid type name,
 *~ you can do so here.
 *~
 *~ For example, this allows us to write 'var x: myLib';
 *~ Be sure this actually makes sense! If it doesn't, just
 *~ delete this declaration and add types inside the namespace below.
 */
interface myLib {
  name: string;
  length: number;
  extras?: string[];
}

/*~ If your library has properties exposed on a global variable,
 *~ place them here.
 *~ You should also place types (interfaces and type alias) here.
 */
declare namespace myLib {
  //~ We can write 'myLib.timeout = 50;'
  let timeout: number;

  //~ We can access 'myLib.version', but not change it
  const version: string;

  //~ There's some class we can create via 'let c = new myLib.Cat(42)'
  //~ Or reference e.g. 'function f(c: myLib.Cat) { ... }
  class Cat {
    constructor(n: number);

    //~ We can read 'c.age' from a 'Cat' instance
    readonly age: number;

    //~ We can invoke 'c.purr()' from a 'Cat' instance
    purr(): void;
  }

  //~ We can declare a variable as
  //~   'var s: myLib.CatSettings = { weight: 5, name: "Maru" };'
  interface CatSettings {
    weight: number;
    name: string;
    tailLength?: number;
  }

  //~ We can write 'const v: myLib.VetID = 42;'
  //~  or 'const v: myLib.VetID = "bob";'
  type VetID = string | number;

  //~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'
  function checkCat(c: Cat, s?: VetID);
}

----------------------------------------

TITLE: String Type Usage in TypeScript
DESCRIPTION: Demonstrates string declarations using single quotes, double quotes, and template literals with expressions.

LANGUAGE: typescript
CODE:
let color: string = "blue";
color = 'red';

LANGUAGE: typescript
CODE:
let fullName: string = `Bob Bobbington`;
let age: number = 37;
let sentence: string = `Hello, my name is ${fullName}.

I'll be ${age + 1} years old next month.`;

----------------------------------------

TITLE: Setting excludeFiles in TypeScript Watch Options
DESCRIPTION: Demonstrates how to configure the excludeFiles option in tsconfig.json to remove specific files from TypeScript's watch mode processing. This example shows excluding a single file 'temp/file.ts' from being watched.

LANGUAGE: json
CODE:
{
  "watchOptions": {
    "excludeFiles": ["temp/file.ts"]
  }
}

----------------------------------------

TITLE: Demonstrating Strict Property Initialization in TypeScript Classes
DESCRIPTION: Shows how TypeScript handles different scenarios of property initialization in a class including explicitly set properties, default values, unset properties, and optional properties. The example highlights how TypeScript raises errors for uninitialized required properties.

LANGUAGE: typescript
CODE:
// @errors: 2564
class UserAccount {
  name: string;
  accountType = "user";

  email: string;
  address: string | undefined;

  constructor(name: string) {
    this.name = name;
    // Note that this.email is not set
  }
}

----------------------------------------

TITLE: Function Types with @param and @returns
DESCRIPTION: Demonstrates documenting function parameters and return types using JSDoc annotations.

LANGUAGE: javascript
CODE:
/**
 * @param {string}  p1 - A string param.
 * @param {string=} p2 - An optional param (Google Closure syntax)
 * @param {string} [p3] - Another optional param (JSDoc syntax).
 * @param {string} [p4="test"] - An optional param with a default value
 * @returns {string} This is the result
 */
function stringsStringStrings(p1, p2, p3, p4) {
  // TODO
}

----------------------------------------

TITLE: Defining Conditional Types in TypeScript
DESCRIPTION: Demonstrates how to define and use conditional types to create flexible type relationships based on conditions.

LANGUAGE: typescript
CODE:
T extends U ? X : Y

LANGUAGE: typescript
CODE:
type TypeName<T> = T extends string
  ? "string"
  : T extends number
  ? "number"
  : T extends boolean
  ? "boolean"
  : T extends undefined
  ? "undefined"
  : T extends Function
  ? "function"
  : "object";

type T0 = TypeName<string>; // "string"
type T1 = TypeName<"a">; // "string"
type T2 = TypeName<true>; // "boolean"
type T3 = TypeName<() => void>; // "function"
type T4 = TypeName<string[]>; // "object"

----------------------------------------

TITLE: Demonstrating Structural Typing in TypeScript
DESCRIPTION: Shows how TypeScript's structural typing allows objects to satisfy multiple interfaces based on their shape rather than explicit declarations. Demonstrates using an object that implements both Pointlike and Named interfaces.

LANGUAGE: typescript
CODE:
interface Pointlike {
  x: number;
  y: number;
}
interface Named {
  name: string;
}

function logPoint(point: Pointlike) {
  console.log("x = " + point.x + ", y = " + point.y);
}

function logName(x: Named) {
  console.log("Hello, " + x.name);
}

const obj = {
  x: 0,
  y: 0,
  name: "Origin",
};

logPoint(obj);
logName(obj);

----------------------------------------

TITLE: Basic TypeScript Decorator Implementation
DESCRIPTION: Demonstrates a basic method decorator implementation with logging functionality and its usage in a class.

LANGUAGE: typescript
CODE:
function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {
  console.log(target);
  console.log(propertyKey);
  console.log(descriptor);
}

class Demo {
  @LogMethod
  public foo(bar: number) {
    // do nothing
  }
}

const demo = new Demo();

----------------------------------------

TITLE: Invalid rootDir Configuration Example
DESCRIPTION: Demonstrates an invalid configuration where rootDir is set to core/ but includes files outside that directory, which would cause compilation errors.

LANGUAGE: plaintext
CODE:
MyProj
├── tsconfig.json
├── core
│   ├── a.ts
│   ├── b.ts
├── helpers.ts

----------------------------------------

TITLE: Comparing children and childNodes in TypeScript
DESCRIPTION: This snippet illustrates the difference between the children and childNodes properties of a DOM element, showing how they handle HTML elements and text nodes differently.

LANGUAGE: html
CODE:
<div>
  <p>Hello, World</p>
  TypeScript!
</div>

LANGUAGE: typescript
CODE:
const div = document.getElementsByTagName("div")[0];

div.children;
// HTMLCollection(1) [p]

div.childNodes;
// NodeList(2) [p, text]

----------------------------------------

TITLE: Implementing String Validators in TypeScript
DESCRIPTION: Demonstrates the implementation of simple string validators using TypeScript interfaces and classes. It includes validators for letters-only strings and ZIP codes, along with a test routine.

LANGUAGE: typescript
CODE:
interface StringValidator {
  isAcceptable(s: string): boolean;
}

let lettersRegexp = /^[A-Za-z]+$/;
let numberRegexp = /^[0-9]+$/;

class LettersOnlyValidator implements StringValidator {
  isAcceptable(s: string) {
    return lettersRegexp.test(s);
  }
}

class ZipCodeValidator implements StringValidator {
  isAcceptable(s: string) {
    return s.length === 5 && numberRegexp.test(s);
  }
}

// Some samples to try
let strings = ["Hello", "98052", "101"];

// Validators to use
let validators: { [s: string]: StringValidator } = {};
validators["ZIP code"] = new ZipCodeValidator();
validators["Letters only"] = new LettersOnlyValidator();

// Show whether each string passed each validator
for (let s of strings) {
  for (let name in validators) {
    let isMatch = validators[name].isAcceptable(s);
    console.log(`'${s}' ${isMatch ? "matches" : "does not match"} '${name}'.`);
  }
}

----------------------------------------

TITLE: Generating CPU Profile with TypeScript Compiler CLI
DESCRIPTION: This command demonstrates how to use the TypeScript compiler CLI to generate a CPU profile. The profile is saved as 'tsc-output.cpuprofile' and can be used for performance analysis.

LANGUAGE: sh
CODE:
npm run tsc --generateCpuProfile tsc-output.cpuprofile

----------------------------------------

TITLE: Unnecessary Namespace Pattern in TypeScript Modules
DESCRIPTION: Demonstrates an anti-pattern of wrapping exported classes in a namespace within a module, which creates unnecessary nesting and complexity.

LANGUAGE: typescript
CODE:
export namespace Shapes {
  export class Triangle {
    /* ... */
  }
  export class Square {
    /* ... */
  }
}

LANGUAGE: typescript
CODE:
import * as shapes from "./shapes";
let t = new shapes.Shapes.Triangle(); // shapes.Shapes?

----------------------------------------

TITLE: JSDoc Variable Arguments
DESCRIPTION: Demonstrates how to use JSDoc to specify var-args parameters in JavaScript functions.

LANGUAGE: javascript
CODE:
/** @param {...number} args */
function sum(/* numbers */) {
  var total = 0;
  for (var i = 0; i < arguments.length; i++) {
    total += arguments[i];
  }
  return total;
}

----------------------------------------

TITLE: Importing JSON Without resolveJsonModule
DESCRIPTION: Demonstrates the default behavior where TypeScript cannot import JSON files, resulting in type errors.

LANGUAGE: typescript
CODE:
// @errors: 2732
// @filename: settings.json
{
    "repo": "TypeScript",
    "dry": false,
    "debug": false
}
// @filename: index.ts
import settings from "./settings.json";

settings.debug === true;
settings.dry === 2;

----------------------------------------

TITLE: Numeric Separators in TypeScript
DESCRIPTION: Illustrates the use of numeric separators in TypeScript 2.7, which allows for better readability of numeric literals by using underscores as separators.

LANGUAGE: typescript
CODE:
const million = 1_000_000;
const phone = 555_734_2231;
const bytes = 0xff_0c_00_ff;
const word = 0b1100_0011_1101_0001;

----------------------------------------

TITLE: HTML Script Tag Usage
DESCRIPTION: Shows how global libraries are typically included in HTML documents using script tags.

LANGUAGE: html
CODE:
<script src="http://a.great.cdn.for/someLib.js"></script>

----------------------------------------

TITLE: Configuring Pretty Printing in TypeScript Compiler Options
DESCRIPTION: The 'Pretty' option is a boolean flag in TypeScript's compiler options that enables stylized output with color and context. It's enabled by default and improves the readability of compiler messages and errors.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "pretty": true
  }
}

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Babel Integration
DESCRIPTION: This snippet shows the necessary compiler options in tsconfig.json for using TypeScript with Babel. It enables declaration file generation and ensures compatibility with Babel's transpilation process.

LANGUAGE: json
CODE:
"compilerOptions": {
  // Ensure that .d.ts files are created by tsc, but not .js files
  "declaration": true,
  "emitDeclarationOnly": true,
  // Ensure that Babel can safely transpile files in the TypeScript project
  "isolatedModules": true
}

----------------------------------------

TITLE: Implementing async/await in TypeScript for ES6 targets
DESCRIPTION: Demonstrates the use of async/await syntax in TypeScript for ES6 targets, specifically Node v4+. The example shows an asynchronous function that prints elements with a delay.

LANGUAGE: typescript
CODE:
"use strict";

// printDelayed is a 'Promise<void>'
async function printDelayed(elements: string[]) {
  for (const element of elements) {
    await delay(400);
    console.log(element);
  }
}

async function delay(milliseconds: number) {
  return new Promise<void>((resolve) => {
    setTimeout(resolve, milliseconds);
  });
}

printDelayed(["Hello", "beautiful", "asynchronous", "world"]).then(() => {
  console.log();
  console.log("Printed every element!");
});

----------------------------------------

TITLE: TypeScript Output With Inline Source Map
DESCRIPTION: Demonstrates the same TypeScript code compiled with inlineSourceMap enabled, which includes the source map data as a comment at the bottom of the file.

LANGUAGE: typescript
CODE:
const helloWorld = "hi";
console.log(helloWorld);

----------------------------------------

TITLE: ECMAScript Modules Import Example
DESCRIPTION: An example of importing a default export from an ECMAScript module.

LANGUAGE: javascript
CODE:
// b.js
import a from "./a.js";
console.log(a); // 'Hello from a.js'

----------------------------------------

TITLE: Type Guards Inferred from 'in' Operator in TypeScript
DESCRIPTION: Shows how the 'in' operator acts as a narrowing expression for types in TypeScript 2.7, allowing for more precise type checking in conditional blocks.

LANGUAGE: typescript
CODE:
interface A {
  a: number;
}
interface B {
  b: string;
}

function foo(x: A | B) {
  if ("a" in x) {
    return x.a;
  }
  return x.b;
}

----------------------------------------

TITLE: Implementing Constrained Mixin in TypeScript
DESCRIPTION: Shows how to create a mixin (Jumpable) that only works with base classes that satisfy a specific constraint (Positionable).

LANGUAGE: typescript
CODE:
function Jumpable<TBase extends Positionable>(Base: TBase) {
  return class Jumpable extends Base {
    jump() {
      // This mixin will only work if it is passed a base
      // class which has setPos defined because of the
      // Positionable constraint.
      this.setPos(0, 20);
    }
  };
}

----------------------------------------

TITLE: Accessing Properties With noPropertyAccessFromIndexSignature in TypeScript
DESCRIPTION: This snippet shows how enabling 'noPropertyAccessFromIndexSignature' raises an error when using dot syntax to access undeclared properties. It enforces the use of indexed syntax for unknown properties on the GameSettings interface.

LANGUAGE: typescript
CODE:
// @errors: 4111
// @noPropertyAccessFromIndexSignature
declare function getSettings(): GameSettings;
interface GameSettings {
  speed: "fast" | "medium" | "slow";
  quality: "high" | "low";
  [key: string]: string;
}
// ---cut---
const settings = getSettings();
settings.speed;
settings.quality;

// This would need to be settings["username"];
settings.username;
//       ^?

----------------------------------------

TITLE: Using generics in TypeScript
DESCRIPTION: Demonstrates the use of generic type parameters in TypeScript functions.

LANGUAGE: typescript
CODE:
function liftArray<T>(t: T): Array<T> {
  return [t];
}

function firstish<T extends { length: number }>(t1: T, t2: T): T {
  return t1.length > t2.length ? t1 : t2;
}

----------------------------------------

TITLE: Global Library jQuery Example
DESCRIPTION: Demonstrates usage of a global library (jQuery) without imports

LANGUAGE: typescript
CODE:
$(() => {
  console.log("hello!");
});

----------------------------------------

TITLE: Demonstrating TypeScript to JavaScript Compilation
DESCRIPTION: This snippet shows a simple TypeScript code example and its default JavaScript output without any special compiler options.

LANGUAGE: typescript
CODE:
const helloWorld = "hi";
console.log(helloWorld);

LANGUAGE: javascript
CODE:
const helloWorld = "hi";
console.log(helloWorld);

----------------------------------------

TITLE: Union Type Assignment Examples
DESCRIPTION: Shows valid and invalid assignments to union type variables, demonstrating type checking behavior.

LANGUAGE: typescript
CODE:
var opts: RunOptions = /* ... */;
opts.commandline = '-hello world'; // OK
opts.commandline = ['-hello', 'world']; // OK
opts.commandline = [42]; // Error, number is not string or string[]

----------------------------------------

TITLE: TypeScript Export and Import with Relative Path
DESCRIPTION: An example of exporting a function from one TypeScript file and importing it in another using a relative path.

LANGUAGE: typescript
CODE:
// @Filename: math.ts
export function add(a: number, b: number) {
  return a + b;
}

// @Filename: main.ts
import { add } from "./math";
add(1, 2);

----------------------------------------

TITLE: Unicode Codepoint Escapes in TypeScript
DESCRIPTION: Demonstrates the use of Unicode codepoint escapes in strings in TypeScript 1.5, allowing for cleaner representation of Unicode characters.

LANGUAGE: typescript
CODE:
"\u{20bb7}"

----------------------------------------

TITLE: Strict Class Initialization in TypeScript
DESCRIPTION: Illustrates the new strictPropertyInitialization flag in TypeScript 2.7, which ensures instance properties are initialized in the constructor or by a property initializer.

LANGUAGE: typescript
CODE:
class C {
  foo: number;
  bar = "hello";
  baz: boolean;
  //  ~~~
  //  Error! Property 'baz' has no initializer and is not definitely assigned in the
  //         constructor.

  constructor() {
    this.foo = 42;
  }
}

LANGUAGE: typescript
CODE:
class C {
  foo!: number;
  // ^
  // Notice this '!' modifier.
  // This is the "definite assignment assertion"

  constructor() {
    this.initialize();
  }

  initialize() {
    this.foo = 0;
  }
}

----------------------------------------

TITLE: Declaring Properties on React Function Components in TypeScript 3.1
DESCRIPTION: This snippet illustrates how to declare properties like defaultProps on React function components in TypeScript 3.1, allowing for better expression of common patterns in React development.

LANGUAGE: typescript
CODE:
export const FooComponent = ({ name }) => <div>Hello! I am {name}</div>;

FooComponent.defaultProps = {
  name: "(anonymous)",
};

----------------------------------------

TITLE: Accessing Properties Without noPropertyAccessFromIndexSignature in TypeScript
DESCRIPTION: This snippet demonstrates how TypeScript allows dot syntax access to undeclared properties when 'noPropertyAccessFromIndexSignature' is not enabled. It shows both known and unknown property accesses on a GameSettings interface.

LANGUAGE: typescript
CODE:
interface GameSettings {
  // Known up-front properties
  speed: "fast" | "medium" | "slow";
  quality: "high" | "low";

  // Assume anything unknown to the interface
  // is a string.
  [key: string]: string;
}

const settings = getSettings();
settings.speed;
//       ^?
settings.quality;
//       ^?

// Unknown key accessors are allowed on
// this object, and are `string`
settings.username;
//       ^?

----------------------------------------

TITLE: Classes as Namespaces
DESCRIPTION: Demonstrates how classes can be used as namespaces in JavaScript files.

LANGUAGE: javascript
CODE:
class C {}
C.D = class {};

----------------------------------------

TITLE: Configuring TSConfig for Declaration File Generation
DESCRIPTION: TSConfig configuration for generating .d.ts files from JavaScript source files. Includes settings for allowing JS files, enabling declaration generation, and configuring output directory.

LANGUAGE: jsonc
CODE:
{
  // Change this to match your project
  "include": ["src/**/*"],

  "compilerOptions": {
    // Tells TypeScript to read JS files, as
    // normally they are ignored as source files
    "allowJs": true,
    // Generate d.ts files
    "declaration": true,
    // This compiler run should
    // only output d.ts files
    "emitDeclarationOnly": true,
    // Types should go into this directory.
    // Removing this would place the .d.ts files
    // next to the .js files
    "outDir": "dist",
    // go to js file when using IDE functions like
    // "Go to Definition" in VSCode
    "declarationMap": true
  }
}

----------------------------------------

TITLE: Configuring JSX Fragment Factory in tsconfig.json
DESCRIPTION: Example of TypeScript configuration file setup for custom JSX factory and fragment factory using Preact.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "jsx": "react",
    "jsxFactory": "h",
    "jsxFragmentFactory": "Fragment"
  }
}

----------------------------------------

TITLE: Defining Base Class for Mixin in TypeScript
DESCRIPTION: Creates a base Sprite class with name and position properties. This class will be used as the foundation for applying mixins.

LANGUAGE: typescript
CODE:
class Sprite {
  name = "";
  x = 0;
  y = 0;

  constructor(name: string) {
    this.name = name;
  }
}

----------------------------------------

TITLE: CommonJS Function Export
DESCRIPTION: Shows a CommonJS module exporting a function directly.

LANGUAGE: typescript
CODE:
// @Filename: exports-function.js
module.exports = function hello() {
  console.log("Hello, world!");
};

----------------------------------------

TITLE: Declaring Constant-Named Properties with Symbols in TypeScript
DESCRIPTION: Demonstrates how to declare and use constant-named properties on types using ECMAScript symbols in TypeScript 2.7.

LANGUAGE: typescript
CODE:
// Lib
export const SERIALIZE = Symbol("serialize-method-key");

export interface Serializable {
  [SERIALIZE](obj: {}): string;
}

LANGUAGE: typescript
CODE:
// consumer

import { SERIALIZE, Serializable } from "lib";

class JSONSerializableItem implements Serializable {
  [SERIALIZE](obj: {}) {
    return JSON.stringify(obj);
  }
}

----------------------------------------

TITLE: Configuring Multiple Custom Prefixes in TypeScript tsconfig.json
DESCRIPTION: This example shows how to set up multiple custom import prefixes using the 'paths' option in tsconfig.json. It maps various prefixes to specific directories in the project structure, allowing for more organized and flexible import statements.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "paths": {
        "app/*": ["./src/app/*"],
        "config/*": ["./src/app/_config/*"],
        "environment/*": ["./src/environments/*"],
        "shared/*": ["./src/app/_shared/*"],
        "helpers/*": ["./src/helpers/*"],
        "tests/*": ["./src/tests/*"]
    }
  }
}

----------------------------------------

TITLE: Demonstrating TypeScript Behavior without noImplicitAny
DESCRIPTION: This snippet shows how TypeScript behaves when 'noImplicitAny' is set to false. It allows the use of a parameter without a type annotation, potentially leading to runtime errors.

LANGUAGE: typescript
CODE:
// @noImplicitAny: false
function fn(s) {
  // No error?
  console.log(s.subtr(3));
}
fn(42);

----------------------------------------

TITLE: TypeScript Compiler CLI Command for Declaration Generation
DESCRIPTION: Command line interface alternative to using TSConfig for generating declaration files. Demonstrates how to use the TypeScript compiler directly with appropriate flags.

LANGUAGE: sh
CODE:
npx -p typescript tsc src/**/*.js --declaration --allowJs --emitDeclarationOnly --outDir types

----------------------------------------

TITLE: Defining Iterator Interface in TypeScript
DESCRIPTION: This code snippet defines the Iterator interface in TypeScript, which is part of the ES2015 specification. It includes methods for next, return, and throw.

LANGUAGE: typescript
CODE:
interface Iterator<T> {
  next(value?: any): IteratorResult<T>;
  return?(value?: any): IteratorResult<T>;
  throw?(e?: any): IteratorResult<T>;
}

----------------------------------------

TITLE: Using JSX Fragments with Preact
DESCRIPTION: Basic example showing how to use JSX fragments with Preact implementation.

LANGUAGE: tsx
CODE:
import { h, Fragment } from "preact";

const HelloWorld = () => (
  <>
    <div>Hello</div>
  </>
);

----------------------------------------

TITLE: Installing TypeScript Type Definitions via NPM
DESCRIPTION: Command to install TypeScript type definitions for React from the @types repository.

LANGUAGE: bash
CODE:
npm install --save-dev @types/react

----------------------------------------

TITLE: Default Import with ESModule Interop
DESCRIPTION: Illustrates how default imports are handled with the __esModule flag.

LANGUAGE: typescript
CODE:
// import hello from "./module";
const _mod = require("./module");
const hello = _mod.__esModule ? _mod.default : _mod;

----------------------------------------

TITLE: Configuring skipDefaultLibCheck in TypeScript
DESCRIPTION: This compiler option allows skipping type checking of default library declaration files (.d.ts) that come bundled with TypeScript. It is now deprecated in favor of the skipLibCheck option which provides broader functionality.

LANGUAGE: typescript
CODE:
{
  "skipDefaultLibCheck": true
}

----------------------------------------

TITLE: Detecting Unused Self-Calling Functions in TypeScript
DESCRIPTION: This snippet demonstrates how TypeScript 2.6 considers functions that are only called within their own bodies as unused, which is a new behavior for the noUnusedLocals option.

LANGUAGE: typescript
CODE:
function f() {
  f(); // Error: 'f' is declared but its value is never read
}

----------------------------------------

TITLE: Configuring Single Module Path in TypeScript tsconfig.json
DESCRIPTION: This snippet demonstrates how to use the 'paths' option in tsconfig.json to remap the import path for jQuery to a local file. This allows importing jQuery using a simple import statement while providing correct local typing.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "paths": {
      "jquery": ["./vendor/jquery/dist/jquery"]
    }
  }
}

----------------------------------------

TITLE: Full Example of TypeScript VFS Usage in TypeScript
DESCRIPTION: Provides a comprehensive example of using TypeScript VFS, including setting up the file system, creating a compiler host, and accessing the AST.

LANGUAGE: typescript
CODE:
import ts from "typescript"
import tsvfs from "@typescript/vfs"
import lzstring from "lz-string"

const fsMap = await tsvfs.createDefaultMapFromCDN(compilerOptions, ts.version, true, ts, lzstring)
fsMap.set("index.ts", "// main TypeScript file content")

const system = tsvfs.createSystem(fsMap)
const host = tsvfs.createVirtualCompilerHost(system, compilerOptions, ts)

const program = ts.createProgram({
  rootNames: [...fsMap.keys()],
  options: compilerOptions,
  host: host.compilerHost,
})

// This will update the fsMap with new files
// for the .d.ts and .js files
program.emit()

// Now I can look at the AST for the .ts file too
const index = program.getSourceFile("index.ts")

----------------------------------------

TITLE: Demonstrating No Fallthrough Cases in Switch Option in TypeScript
DESCRIPTION: This code snippet illustrates the behavior of the 'noFallthroughCasesInSwitch' compiler option. It shows a switch statement where a fallthrough case triggers an error (7029). The option ensures that each non-empty case includes either break, return, or throw to prevent accidental fallthrough bugs.

LANGUAGE: typescript
CODE:
// @noFallthroughCasesInSwitch
// @errors: 7029
const a: number = 6;

switch (a) {
  case 0:
    console.log("even");
  case 1:
    console.log("odd");
    break;
}

----------------------------------------

TITLE: TypeScript Checking in JavaScript with @ts-check
DESCRIPTION: Shows how to enable TypeScript error checking in JavaScript files using the @ts-check directive along with JSDoc type annotations.

LANGUAGE: javascript
CODE:
// @ts-check
/** @type {number} */
var x;

x = 0; // OK
x = false; // Not OK

----------------------------------------

TITLE: UMD Module Pattern
DESCRIPTION: Example of Universal Module Definition (UMD) pattern implementation

LANGUAGE: javascript
CODE:
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define(["libName"], factory);
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require("libName"));
    } else {
        root.returnExports = factory(root.libName);
    }
}(this, function (b) {

----------------------------------------

TITLE: Basic React JSX Component Example
DESCRIPTION: Simple React component demonstrating basic JSX usage with TypeScript.

LANGUAGE: tsx
CODE:
import React from "react";

function App() {
  return <h1>Hello World</h1>;
}

----------------------------------------

TITLE: Destructuring in Function Parameters in TypeScript
DESCRIPTION: Illustrates the use of destructuring in function parameter declarations in TypeScript 1.5, allowing for more concise and flexible function signatures.

LANGUAGE: typescript
CODE:
function drawText({ text = "", location: [x, y] = [0, 0], bold = false }) {
  // Draw text
}

// Call drawText with an object literal
var item = { text: "someText", location: [1, 2, 3], style: "italics" };
drawText(item);

----------------------------------------

TITLE: Using ES2017 String Library Reference in TypeScript
DESCRIPTION: Demonstrates how to use the triple-slash reference directive to include the ES2017 string library and use the padStart method.

LANGUAGE: typescript
CODE:
/// <reference lib="es2017.string" />

"foo".padStart(4);

----------------------------------------

TITLE: Caching Tagged Template Objects in TypeScript Modules
DESCRIPTION: This example demonstrates the new behavior of tagged template literals in TypeScript 2.6, where the same template strings object is reused for improved compliance with ECMAScript specifications.

LANGUAGE: typescript
CODE:
export function id(x: TemplateStringsArray) {
  return x;
}

export function templateObjectFactory() {
  return id`hello world`;
}

let result = templateObjectFactory() === templateObjectFactory(); // true in TS 2.6

----------------------------------------

TITLE: Set Iteration with For..In and For..Of in TypeScript
DESCRIPTION: Shows how for..in and for..of behave differently when iterating over a Set object with additional properties.

LANGUAGE: typescript
CODE:
let pets = new Set(["Cat", "Dog", "Hamster"]);
pets["species"] = "mammals";

for (let pet in pets) {
  console.log(pet); // "species"
}

for (let pet of pets) {
  console.log(pet); // "Cat", "Dog", "Hamster"
}

----------------------------------------

TITLE: Setting Boolean Value Compiler Flag with Twoslash
DESCRIPTION: Shows how to set a boolean compiler flag to a specific value using true/false.

LANGUAGE: typescript
CODE:
// @strictPropertyInitialization: false

----------------------------------------

TITLE: Module Output: ES2015/ES6/ES2020/ES2022
DESCRIPTION: Shows the TypeScript compiler output for ES2015/ES6/ES2020/ES2022 module options, which use standardized ECMAScript module syntax.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: es2015
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Using @ts-expect-error with TypeScript Checking
DESCRIPTION: Demonstrates how to suppress specific TypeScript errors in JavaScript files using the @ts-expect-error directive while maintaining type checking.

LANGUAGE: javascript
CODE:
// @ts-check
/** @type {number} */
var x;

x = 0; // OK
// @ts-expect-error
x = false; // Not OK

----------------------------------------

TITLE: Template String Type Improvements in TypeScript
DESCRIPTION: Illustrates improvements in TypeScript's handling of template string types, including better inference and compatibility checks between different template types.

LANGUAGE: typescript
CODE:
declare function foo<V extends string>(arg: `*${V}*`): V;

function test<T extends string>(s: string, n: number, b: boolean, t: T) {
    let x1 = foo("*hello*");            // "hello"
    let x2 = foo("**hello**");          // "*hello*"
    let x3 = foo(`*${s}*` as const);    // string
    let x4 = foo(`*${n}*` as const);    // `${number}`
    let x5 = foo(`*${b}*` as const);    // "true" | "false"
    let x6 = foo(`*${t}*` as const);    // `${T}`
    let x7 = foo(`**${s}**` as const);  // `*${string}*`
}

----------------------------------------

TITLE: TSConfig with listEmittedFiles
DESCRIPTION: TypeScript compiler configuration that enables declaration file generation and listing of emitted files.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "declaration": true,
    "listEmittedFiles": true
  }
}

----------------------------------------

TITLE: Configuring Custom DOM Library Version in package.json
DESCRIPTION: Demonstrates how to configure a specific version of DOM library definitions using @types/web package through npm dependencies. This allows locking the DOM type definitions to a particular version.

LANGUAGE: json
CODE:
{
    "devDependencies": {
       "@typescript/lib-dom": "npm:@types/web@0.0.199"
     }
}

----------------------------------------

TITLE: Generated AMD Module in JavaScript
DESCRIPTION: Demonstrates the JavaScript output generated from a TypeScript AMD module declaration.

LANGUAGE: javascript
CODE:
define("NamedModule", ["require", "exports"], function (require, exports) {
  var C = (function () {
    function C() {}
    return C;
  })();
  exports.C = C;
});

----------------------------------------

TITLE: Declaring Function with Generic Parameter Defaults in TypeScript
DESCRIPTION: This example shows how to declare a function with generic parameter defaults, reducing the need for multiple overloads.

LANGUAGE: typescript
CODE:
declare function create<T extends HTMLElement = HTMLDivElement, U = T[]>(
  element?: T,
  children?: U
): Container<T, U>;

----------------------------------------

TITLE: Function Type Checking with strictFunctionTypes Disabled
DESCRIPTION: Demonstrates unsafe function assignment and calling behavior when strictFunctionTypes is set to false. Shows how TypeScript allows potentially unsafe assignments that could lead to runtime errors.

LANGUAGE: typescript
CODE:
// @strictFunctionTypes: false
function fn(x: string) {
  console.log("Hello, " + x.toLowerCase());
}

type StringOrNumberFunc = (ns: string | number) => void;

// Unsafe assignment
let func: StringOrNumberFunc = fn;
// Unsafe call - will crash
func(10);

----------------------------------------

TITLE: Setting Multiple Compiler Options with Twoslash
DESCRIPTION: Examples of setting multiple compiler options using descriptive strings similar to tsconfig.json format.

LANGUAGE: typescript
CODE:
// @target: esnext
// @module: nodenext

----------------------------------------

TITLE: Module Output: ESNext
DESCRIPTION: Demonstrates the TypeScript compiler output when the module option is set to ESNext, which uses the latest ECMAScript module syntax.

LANGUAGE: typescript
CODE:
// @showEmit
// @module: esnext
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Importing TypeScript-specific declarations
DESCRIPTION: Shows how to import exported types and other TypeScript-specific declarations using standard ECMAScript import syntax.

LANGUAGE: typescript
CODE:
import { f, SomeType, SomeInterface } from "./module.js";

----------------------------------------

TITLE: Resolution Mode in Import Types
DESCRIPTION: Shows how to use resolution-mode attributes in type-only imports to control whether modules are resolved via import or require semantics.

LANGUAGE: typescript
CODE:
// Resolve `pkg` as if we were importing with a `require()`
import type { TypeFromRequire } from "pkg" with {
    "resolution-mode": "require"
};

// Resolve `pkg` as if we were importing with an `import`
import type { TypeFromImport } from "pkg" with {
    "resolution-mode": "import"
};

export interface MergedType extends TypeFromRequire, TypeFromImport {}

----------------------------------------

TITLE: Compilation Output Example
DESCRIPTION: Example terminal output showing emitted file paths when listEmittedFiles is enabled.

LANGUAGE: plaintext
CODE:
$ npm run tsc

path/to/example/index.js
path/to/example/index.d.ts

----------------------------------------

TITLE: Compiled Output with 'noEmitHelpers' Option (ES5 Target)
DESCRIPTION: This snippet shows the compiled JavaScript output when targeting ES5 with the 'noEmitHelpers' option enabled. It demonstrates how the helper functions are omitted, requiring global implementations to be provided.

LANGUAGE: typescript
CODE:
var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        // Get API
        return [2 /*return*/, {}];
    });
}); };

----------------------------------------

TITLE: Creating a Basic Gulp Configuration for TypeScript
DESCRIPTION: A gulpfile.js that sets up a basic TypeScript compilation task using gulp-typescript.

LANGUAGE: javascript
CODE:
var gulp = require("gulp");
var ts = require("gulp-typescript");
var tsProject = ts.createProject("tsconfig.json");

gulp.task("default", function () {
  return tsProject.src().pipe(tsProject()).js.pipe(gulp.dest("dist"));
});

----------------------------------------

TITLE: Defining Index Signatures in Types and Interfaces
DESCRIPTION: Demonstrates how to define index signatures in both type aliases and interfaces. Shows how to specify that any additional string keys must have number values.

LANGUAGE: typescript
CODE:
type MathConstants = {
  pi: 3.14159;
  phi: 1.61803;

  [key: string]: number;
};

interface ModernConstants {
  taniguchi: 0.6782344919;
  raabe: 0.9189385332;

  [key: string]: number;
}

----------------------------------------

TITLE: ES5 Compilation with downlevelIteration Enabled
DESCRIPTION: Demonstrates the more spec-compliant compilation output when downlevelIteration is enabled.

LANGUAGE: typescript
CODE:
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var e_1, _a;
var str = "Hello!";
try {
    for (var str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) {
        var s = str_1_1.value;
        console.log(s);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (str_1_1 && !str_1_1.done && (_a = str_1.return)) _a.call(str_1);
    }
    finally { if (e_1) throw e_1.error; }
}

----------------------------------------

TITLE: Path Reference for Copy Directory
DESCRIPTION: Link reference using relative path syntax for the copy directory.

LANGUAGE: markdown
CODE:
[`copy`](./copy)

----------------------------------------

TITLE: Using Keyof String Type Operator in TypeScript
DESCRIPTION: Demonstrates the legacy behavior of the keyof operator when the 'keyof strings only' flag is enabled. This configuration makes keyof return string instead of string | number when used with string index signatures.

LANGUAGE: typescript
CODE:
type StringIndex = { [key: string]: any };
// With keyofStringsOnly: true
type KeyType = keyof StringIndex; // type is string

// Without keyofStringsOnly
type KeyType = keyof StringIndex; // type is string | number

----------------------------------------

TITLE: TypeScript Module with Output Directory
DESCRIPTION: An example of TypeScript modules using an output directory, demonstrating the use of .mjs file extensions in imports.

LANGUAGE: typescript
CODE:
// @moduleResolution: node16
// @rootDir: src
// @outDir: dist

// @Filename: src/math.mts
export function add(a: number, b: number) {
  return a + b;
}

// @Filename: src/main.mts
import { add } from "./math.mjs";
add(1, 2);

----------------------------------------

TITLE: Improved Excess Property Checks in Union Types
DESCRIPTION: Illustrates the enhanced excess property checking in TypeScript 3.5 for union types, which now correctly identifies type mismatches in object literals.

LANGUAGE: typescript
CODE:
type Point = {
  x: number;
  y: number;
};

type Label = {
  name: string;
};

const thing: Point | Label = {
  x: 0,
  y: 0,
  name: true // uh-oh!
};

----------------------------------------

TITLE: Configuring TypeScript Newline Characters
DESCRIPTION: Sets the end of line sequence used when TypeScript emits files. Supports two options: 'CRLF' for Windows-style line endings (\r\n) or 'LF' for Unix-style line endings (\n).

LANGUAGE: typescript
CODE:
{
  "newLine": "CRLF" // or "LF"
}

----------------------------------------

TITLE: ReadonlyArray Usage Example
DESCRIPTION: Demonstrates the usage of ReadonlyArray type and new readonly syntax for preventing array mutations.

LANGUAGE: typescript
CODE:
function foo(arr: readonly string[]) {
  arr.slice(); // okay
  arr.push("hello!"); // error!
}

----------------------------------------

TITLE: Configuring Gulp with Browserify and Tsify
DESCRIPTION: A gulpfile.js that uses Browserify and tsify to bundle TypeScript modules for browser use.

LANGUAGE: javascript
CODE:
var gulp = require("gulp");
var browserify = require("browserify");
var source = require("vinyl-source-stream");
var tsify = require("tsify");
var paths = {
  pages: ["src/*.html"],
};

gulp.task("copy-html", function () {
  return gulp.src(paths.pages).pipe(gulp.dest("dist"));
});

gulp.task(
  "default",
  gulp.series(gulp.parallel("copy-html"), function () {
    return browserify({
      basedir: ".",
      debug: true,
      entries: ["src/main.ts"],
      cache: {},
      packageCache: {},
    })
      .plugin(tsify)
      .bundle()
      .pipe(source("bundle.js"))
      .pipe(gulp.dest("dist"));
  })
);

----------------------------------------

TITLE: Declaring Object Shapes Using Interface and Type
DESCRIPTION: Demonstrates two equivalent ways to define an object shape in TypeScript - using an interface declaration and a type alias.

LANGUAGE: typescript
CODE:
interface House {
  name: string;
  road: string;
  town: string;
  country: string;
}

// or

type House = {
  name: string;
  road: string;
  town: string;
  country: string;
};

----------------------------------------

TITLE: Example Import for Type Resolution
DESCRIPTION: Shows a basic import statement that the ATA system will process to find and download corresponding type definitions.

LANGUAGE: typescript
CODE:
import danger from "danger"

----------------------------------------

TITLE: Specifying NPM Version for Types
DESCRIPTION: Demonstrates how to specify a particular NPM version or tag for type definitions using an inline comment.

LANGUAGE: typescript
CODE:
import { xy } from "xyz" // types: beta

----------------------------------------

TITLE: Per-file JSX Runtime Configuration (Classic)
DESCRIPTION: Demonstrates how to specify the classic JSX runtime for a single file using a comment directive.

LANGUAGE: tsx
CODE:
/* @jsxRuntime classic */
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Require ES Module in Node.js
DESCRIPTION: Demonstrates the issue of requiring an ES module in CommonJS context in Node.js versions prior to 22.

LANGUAGE: typescript
CODE:
// @Filename: node_modules/dependency/index.js
export function doSomething() { /* ... */ }

LANGUAGE: typescript
CODE:
// @Filename: dependent.js
import { doSomething } from "dependency";
// ✅ Works if dependent and dependency are both transpiled
// ✅ Works if dependent and dependency are both true ESM
// ✅ Works if dependent is true ESM and dependency is transpiled
// 💥 Crashes if dependent is transpiled and dependency is true ESM

----------------------------------------

TITLE: Using keyof with Basic Object Type in TypeScript
DESCRIPTION: Demonstrates how keyof operator produces a union of literal types from an object type's keys. The resulting type P becomes a union of 'x' | 'y' string literals.

LANGUAGE: typescript
CODE:
type Point = { x: number; y: number };
type P = keyof Point;

----------------------------------------

TITLE: Enforcing Override Modifier with noImplicitOverride
DESCRIPTION: Demonstrates how the noImplicitOverride compiler option enforces explicit override keywords, showing an error when the modifier is missing.

LANGUAGE: typescript
CODE:
// @noImplicitOverride
// @errors: 4114
class Album {
  setup() {}
}

class MLAlbum extends Album {
  override setup() {}
}

class SharedAlbum extends Album {
  setup() {}
}

----------------------------------------

TITLE: Creating a Virtual TypeScript Environment in TypeScript
DESCRIPTION: Shows how to set up a virtual TypeScript environment using the created file system, including interaction with the language service.

LANGUAGE: typescript
CODE:
import { createSystem, createVirtualTypeScriptEnvironment } from "@typescript/vfs"
import ts from "typescript"

const fsMap = new Map<string, string>()
const system = createSystem(fsMap)

const compilerOpts = {}
const env = createVirtualTypeScriptEnvironment(system, ["index.ts"], ts, compilerOpts)

// You can then interact with the languageService to introspect the code
env.languageService.getDocumentHighlights("index.ts", 0, ["index.ts"])

----------------------------------------

TITLE: Integrating Watchify for Continuous Compilation
DESCRIPTION: Extends the Gulp configuration to use Watchify for incremental compilation of TypeScript files.

LANGUAGE: javascript
CODE:
var gulp = require("gulp");
var browserify = require("browserify");
var source = require("vinyl-source-stream");
var watchify = require("watchify");
var tsify = require("tsify");
var fancy_log = require("fancy-log");
var paths = {
  pages: ["src/*.html"],
};

var watchedBrowserify = watchify(
  browserify({
    basedir: ".",
    debug: true,
    entries: ["src/main.ts"],
    cache: {},
    packageCache: {},
  }).plugin(tsify)
);

gulp.task("copy-html", function () {
  return gulp.src(paths.pages).pipe(gulp.dest("dist"));
});

function bundle() {
  return watchedBrowserify
    .bundle()
    .on("error", fancy_log)
    .pipe(source("bundle.js"))
    .pipe(gulp.dest("dist"));
}

gulp.task("default", gulp.series(gulp.parallel("copy-html"), bundle));
watchedBrowserify.on("update", bundle);
watchedBrowserify.on("log", fancy_log);

----------------------------------------

TITLE: TypeScript Object Property Type Mismatch
DESCRIPTION: Shows how TypeScript's type system catches mismatched property names when assigning objects, preventing typos and ensuring type consistency.

LANGUAGE: typescript
CODE:
let shop = {
  name: "Table Store",
  address: "Maplewood",
};

shop = {
  nme: "Chair Store",
  address: "Maplewood",
};

----------------------------------------

TITLE: Configuring Directory Exclusions in TypeScript Watch Mode
DESCRIPTION: Shows how to configure the watchOptions.excludeDirectories setting in tsconfig.json to prevent TypeScript from watching specific directories. This helps reduce the number of files being tracked, particularly useful for improving performance on Linux systems.

LANGUAGE: json
CODE:
{
  "watchOptions": {
    "excludeDirectories": ["**/node_modules", "_build", "temp/*"]
  }
}

----------------------------------------

TITLE: TypeScript Tuple Example With Basic Twoslash
DESCRIPTION: The same tuple example converted to use Twoslash, which enables compiler integration.

LANGUAGE: typescript
CODE:
// Declare a tuple type
let x: [string, number];

// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error

----------------------------------------

TITLE: Defining Optional Property Interface in TypeScript
DESCRIPTION: Demonstrates the definition of an interface with an optional property that can only be 'dark' or 'light', where the absence of the property represents 'system'.

LANGUAGE: typescript
CODE:
interface UserDefaults {
  // The absence of a value represents 'system'
  colorThemeOverride?: "dark" | "light";
}

----------------------------------------

TITLE: Complex Namespace Merging in TypeScript
DESCRIPTION: Demonstrates advanced namespace merging techniques, combining multiple declarations to create a complex type and value structure.

LANGUAGE: typescript
CODE:
namespace X {
  export interface Y {}
  export class Z {}
}

// ... elsewhere ...
namespace X {
  export var Y: number;
  export namespace Z {
    export class C {}
  }
}
type X = string;

----------------------------------------

TITLE: Method Refactoring Without Override Checking
DESCRIPTION: Shows how method renaming in the base class can lead to synchronization issues in derived classes when override checking is not enabled.

LANGUAGE: typescript
CODE:
class Album {
  setup() {
    // Default behavior
  }
}

class MLAlbum extends Album {
  setup() {
    // Override to get info from algorithm
  }
}

class SharedAlbum extends Album {
  download() {
    // Override to get info from many sources
  }
}

----------------------------------------

TITLE: JavaScript Use Strict Directive Example
DESCRIPTION: Demonstrates the 'use strict' directive that TypeScript automatically adds to the top of emitted JavaScript files when targeting non-ES6 module formats

LANGUAGE: javascript
CODE:
"use strict";

----------------------------------------

TITLE: Overriding Contextual Typing with Explicit Annotations in TypeScript
DESCRIPTION: Shows how to explicitly provide type information to override contextual typing in TypeScript, allowing potentially unsafe operations.

LANGUAGE: typescript
CODE:
window.onscroll = function (uiEvent: any) {
  console.log(uiEvent.button); // <- Now, no error is given
};

----------------------------------------

TITLE: Declaring Global-Modifying Modules in TypeScript
DESCRIPTION: This snippet provides a template for creating a declaration file for a global-modifying module in TypeScript. It shows how to augment global types, export interfaces, and declare module functions.

LANGUAGE: typescript
CODE:
// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
// Project: [~THE PROJECT NAME~]
// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>

/*~ This is the global-modifying module template file. You should rename it to index.d.ts
 *~ and place it in a folder with the same name as the module.
 *~ For example, if you were writing a file for "super-greeter", this
 *~ file should be 'super-greeter/index.d.ts'
 */

/*~ Note: If your global-modifying module is callable or constructable, you'll
 *~ need to combine the patterns here with those in the module-class or module-function
 *~ template files
 */
declare global {
  /*~ Here, declare things that go in the global namespace, or augment
   *~ existing declarations in the global namespace
   */
  interface String {
    fancyFormat(opts: StringFormatOptions): string;
  }
}

/*~ If your module exports types or values, write them as usual */
export interface StringFormatOptions {
  fancinessLevel: number;
}

/*~ For example, declaring a method on the module (in addition to its global side effects) */
export function doSomething(): void;

/*~ If your module exports nothing, you'll need this line. Otherwise, delete it */
export {};

----------------------------------------

TITLE: Default Compiler Settings in TypeScript Playground
DESCRIPTION: This JSON snippet represents the rough default compiler settings used in the TypeScript Playground. It includes settings for strict mode, module system, target ECMAScript version, and experimental features.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true,
    "module": "esnext",
    "moduleResolution": "node",
    "target": "es2017",
    "jsx": "react",

    "experimentalDecorators": true,
    "emitDecoratorMetadata": true
  }
}

----------------------------------------

TITLE: Release Notes Documentation Template
DESCRIPTION: YAML frontmatter template for TypeScript release notes documentation, including title, layout, and permalink configuration.

LANGUAGE: markdown
CODE:
---
title: TypeScript 3.9
layout: docs
permalink: /docs/handbook/release-notes/typescript-3-9.html
oneline: TypeScript 3.9 Release Notes
---

----------------------------------------

TITLE: TypeScript Clean Command Definition
DESCRIPTION: YAML frontmatter defining the clean command's display name and one-line description for documentation purposes.

LANGUAGE: markdown
CODE:
---
display: "Clean"
oneline: "Delete the outputs of all projects."
---

----------------------------------------

TITLE: Demonstrating Type Assignability Error in TypeScript
DESCRIPTION: This snippet shows an error when assigning an object with a string array to a variable expecting a number array. It illustrates how TypeScript breaks down complex type mismatches in its error messages.

LANGUAGE: typescript
CODE:
let a: { m: number[] };
let b = { m: [""] };
a = b;

----------------------------------------

TITLE: Default ES5 Compilation without downlevelIteration
DESCRIPTION: Shows how TypeScript compiles a for/of loop to ES5 when downlevelIteration is disabled.

LANGUAGE: typescript
CODE:
var str = "Hello!";
for (var i = 0; i < str.length; i++) {
    var s = str[i];
    console.log(s);
}

----------------------------------------

TITLE: Demonstrating Index Signatures in TypeScript
DESCRIPTION: This snippet shows how to use index signatures in TypeScript interfaces to allow for unknown keys with known value types. It demonstrates accessing both declared and undeclared properties of an object conforming to this interface.

LANGUAGE: typescript
CODE:
interface EnvironmentVars {
  NAME: string;
  OS: string;

  // Unknown properties are covered by this index signature.
  [propName: string]: string;
}

declare const env: EnvironmentVars;

// Declared as existing
const sysName = env.NAME;
const os = env.OS;
//    ^?

// Not declared, but because of the index
// signature, then it is considered a string
const nodeEnv = env.NODE_ENV;
//    ^?

----------------------------------------

TITLE: Union Types in Template Literals
DESCRIPTION: Shows how union types are handled in template literal interpolation, resulting in a union of all possible combinations.

LANGUAGE: typescript
CODE:
type EmailLocaleIDs = "welcome_email" | "email_heading";
type FooterLocaleIDs = "footer_title" | "footer_sendoff";

type AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;

----------------------------------------

TITLE: Importing UMD Module in TypeScript
DESCRIPTION: Example showing how to import and use a UMD module like Moment.js in TypeScript

LANGUAGE: typescript
CODE:
import moment = require("moment");
console.log(moment.format());

----------------------------------------

TITLE: Configuring 'importsNotUsedAsValues' in TypeScript
DESCRIPTION: The 'importsNotUsedAsValues' option can be set to 'remove', 'preserve', or 'error' to control how TypeScript handles imports that are only used for types. 'remove' is the default behavior, 'preserve' keeps all imports, and 'error' preserves imports but throws an error for value imports used only as types.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "importsNotUsedAsValues": "remove" // or "preserve" or "error"
  }
}

----------------------------------------

TITLE: Using TypeScript Extensions Flag
DESCRIPTION: The --allowImportingTsExtensions flag enables importing TypeScript files with their native extensions (.ts, .mts, .tsx). This option requires either --noEmit or --emitDeclarationOnly to be enabled, as these import paths would not work in compiled JavaScript. Typically used in conjunction with bundlers or other tools that handle TypeScript imports.

LANGUAGE: typescript
CODE:
--allowImportingTsExtensions

----------------------------------------

TITLE: Initializing a TSConfig File Using TypeScript Compiler
DESCRIPTION: The TypeScript compiler (tsc) provides a command to bootstrap a TSConfig file. This command creates a basic tsconfig.json file with default settings in the current directory.

LANGUAGE: shell
CODE:
tsc --init

----------------------------------------

TITLE: Basic for/of Loop in TypeScript
DESCRIPTION: Demonstrates a simple for/of loop iterating over a string in TypeScript.

LANGUAGE: typescript
CODE:
const str = "Hello!";
for (const s of str) {
  console.log(s);
}

----------------------------------------

TITLE: Plugin Configuration in tsconfig.json
DESCRIPTION: Language service plugins are configured in the tsconfig.json file to extend TypeScript's editor functionality. They can provide additional linting, validation, and auto-completion features for specific use cases like SQL, CSS, ESLint, and GraphQL.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "plugins": [
      { "name": "typescript-styled-plugin" },
      { "name": "typescript-eslint-language-service" },
      { "name": "ts-sql-plugin" },
      { "name": "ts-graphql-plugin" }
    ]
  }
}

----------------------------------------

TITLE: Configuring Custom JSX Factories in TypeScript
DESCRIPTION: Demonstrates how to configure custom JSX factories using tsconfig.json and pragma comments.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "jsx": "react",
    "jsxFactory": "h",
    "jsxFragmentFactory": "Fragment"
  }
}

LANGUAGE: typescript
CODE:
/** @jsx h */
/** @jsxFrag Fragment */

import { h, Fragment } from "preact";

export const Header = (
  <>
    <h1>Welcome</h1>
  </>
);

----------------------------------------

TITLE: Declaring Exported Function in ES Modules (TypeScript)
DESCRIPTION: TypeScript declaration file (.d.ts) equivalent for the ES Module export.

LANGUAGE: typescript
CODE:
export function getArrayLength(arr: any[]): number;

----------------------------------------

TITLE: Implementing Exact Optional Properties with Type Checking
DESCRIPTION: Shows how exactOptionalPropertyTypes enforces strict type checking for optional properties, preventing undefined assignments while allowing valid string literals.

LANGUAGE: typescript
CODE:
// @exactOptionalPropertyTypes
// @errors: 2322 2412
interface UserDefaults {
  colorThemeOverride?: "dark" | "light";
}
declare function getUserSettings(): UserDefaults;
// ---cut---
const settings = getUserSettings();
settings.colorThemeOverride = "dark";
settings.colorThemeOverride = "light";

// But not:
settings.colorThemeOverride = undefined;

----------------------------------------

TITLE: Basic Type Annotations with @type
DESCRIPTION: Examples of using @type to annotate variables with primitive types, DOM types, union types and array types in JavaScript.

LANGUAGE: javascript
CODE:
/**
 * @type {string}
 */
var s;

/** @type {Window} */
var win;

/** @type {PromiseLike<string>} */
var promisedString;

// You can specify an HTML Element with DOM properties
/** @type {HTMLElement} */
var myElement = document.querySelector(selector);
element.dataset.myData = "";

----------------------------------------

TITLE: Query Parameters for TypeScript Playground Configuration
DESCRIPTION: Query string parameters used to configure TypeScript version, compiler flags, and file type settings in the Playground environment.

LANGUAGE: plaintext
CODE:
?ts=3.9.2
?ts=next
?ts=dev
?flag=value
?filetype=js|ts|dts

----------------------------------------

TITLE: Using rootDirs for Separate Type Layers
DESCRIPTION: This example demonstrates how to use rootDirs to provide a separate type layer for non-TypeScript files. It allows for generated .d.ts files to be placed in a different folder while maintaining proper imports.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "rootDirs": ["src", "generated"]
  }
}

----------------------------------------

TITLE: Per-file JSX Fragment Configuration
DESCRIPTION: Example demonstrating how to configure JSX factory and fragment settings using file-level directives.

LANGUAGE: tsx
CODE:
/** @jsx h */
/** @jsxFrag Fragment */

import { h, Fragment } from "preact";

const HelloWorld = () => (
  <>
    <div>Hello</div>
  </>
);

----------------------------------------

TITLE: Demonstrating Preserve Value Imports in TypeScript
DESCRIPTION: This code snippet illustrates a case where TypeScript might not detect the usage of an import, specifically when using eval(). The 'preserveValueImports' option ensures that such imports are not removed from the JavaScript output.

LANGUAGE: typescript
CODE:
import { Animal } from "./animal.js";

eval("console.log(new Animal().isDangerous())");

----------------------------------------

TITLE: Global Plugin Type Declaration
DESCRIPTION: Template for declaring types for a global plugin that extends built-in types like Number

LANGUAGE: typescript
CODE:
interface Number {
  toBinaryString(opts?: MyLibrary.BinaryFormatOptions): string;

  toBinaryString(
    callback: MyLibrary.BinaryFormatCallback,
    opts?: MyLibrary.BinaryFormatOptions
  ): string;
}

declare namespace MyLibrary {
  type BinaryFormatCallback = (n: number) => string;
  interface BinaryFormatOptions {
    prefix?: string;
    padding: number;
  }
}

----------------------------------------

TITLE: Declaring Types for JavaScript Code (TypeScript)
DESCRIPTION: Example of declaring types for JavaScript code that doesn't explicitly define types, including the use of generics.

LANGUAGE: typescript
CODE:
export type ArrayMetadata<ArrType> = {
  length: number;
  firstObject: ArrType | undefined;
};

export function getArrayMetadata<ArrType>(
  arr: ArrType[]
): ArrayMetadata<ArrType>;

----------------------------------------

TITLE: TypeScript Project Structure Example
DESCRIPTION: Example directory structure showing a typical TypeScript project with source and test files

LANGUAGE: plaintext
CODE:
/
├── src/
│   ├── converter.ts
│   └── units.ts
├── test/
│   ├── converter-tests.ts
│   └── units-tests.ts
└── tsconfig.json

----------------------------------------

TITLE: Defining TypeScript Command Line Display Title
DESCRIPTION: Markdown frontmatter block that sets the display title for the TypeScript command line documentation section.

LANGUAGE: markdown
CODE:
---
display: "Command Line"
---

----------------------------------------

TITLE: Setting Library Options with Twoslash
DESCRIPTION: Demonstrates how to set multiple library options using a comma-separated list.

LANGUAGE: typescript
CODE:
// @lib: es2015,dom

----------------------------------------

TITLE: TypeScript Configuration for Preact JSX
DESCRIPTION: TSConfig settings for using Preact as the JSX import source, including necessary type definitions.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "jsx": "react-jsx",
    "jsxImportSource": "preact",
    "types": ["preact"]
  }
}

----------------------------------------

TITLE: Compiling TypeScript with Downlevel Iteration (importHelpers: false)
DESCRIPTION: This example demonstrates the compiled output when downlevelIteration is enabled but importHelpers is false. The helper functions are included directly in the output.

LANGUAGE: typescript
CODE:
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
export function fn(arr) {
    var arr2 = __spreadArray([1], __read(arr), false);
}

----------------------------------------

TITLE: Demonstrating strictBindCallApply Disabled in TypeScript
DESCRIPTION: This snippet illustrates the behavior when 'strictBindCallApply' is disabled. The 'call' method accepts any arguments without type checking, and the return type is 'any'.

LANGUAGE: typescript
CODE:
// @strictBindCallApply: false

// With strictBindCallApply off
function fn(x: string) {
  return parseInt(x);
}

// Note: No error; return type is 'any'
const n = fn.call(undefined, false);

----------------------------------------

TITLE: Configuring Package.json Imports Resolution in TypeScript
DESCRIPTION: Configuration flag that enables TypeScript to use the imports field in package.json for resolving imports starting with #. This option is enabled by default when using node16, nodenext, or bundler moduleResolution settings.

LANGUAGE: typescript
CODE:
--resolvePackageJsonImports

----------------------------------------

TITLE: Configuring Declaration Maps in TypeScript
DESCRIPTION: Example of the declaration map compiler option in a tsconfig.json file. When enabled, this generates source maps for .d.ts files that map back to the original .ts source files, improving IDE features like Go to Definition.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "declarationMap": true
  }
}

----------------------------------------

TITLE: Browser ES Modules Configuration
DESCRIPTION: TypeScript configuration for browser-based ES modules without bundlers, using paths mapping for remote URLs.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "nodenext",
    "paths": {
      "https://esm.sh/lodash@4.17.21": ["./node_modules/@types/lodash/index.d.ts"],
      "*": ["./empty-file.ts"]
    }
  }
}

----------------------------------------

TITLE: Setting Debug and Release TypeScript Configurations in MSBuild
DESCRIPTION: Example of using conditional PropertyGroups to define different TypeScript configurations for debug and release builds.

LANGUAGE: xml
CODE:
<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
  <TypeScriptRemoveComments>false</TypeScriptRemoveComments>
  <TypeScriptSourceMap>true</TypeScriptSourceMap>
</PropertyGroup>

<PropertyGroup Condition="'$(Configuration)' == 'Release'">
  <TypeScriptRemoveComments>true</TypeScriptRemoveComments>
  <TypeScriptSourceMap>false</TypeScriptSourceMap>
</PropertyGroup>

<Import
    Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets"
    Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets')" />

----------------------------------------

TITLE: Defining JavaScript Object Shape Example
DESCRIPTION: Example of a JavaScript object literal defining a house with various string properties.

LANGUAGE: typescript
CODE:
const house = {
  name: "Shibden hall",
  road: "Lister's Road",
  town: "Halifax",
  county: "West Yorkshire",
};

----------------------------------------

TITLE: Compiling TypeScript with Downlevel Iteration and Import Helpers
DESCRIPTION: This example shows the compiled output when both downlevelIteration and importHelpers are enabled. The helper functions are imported from the tslib module instead of being included in the output.

LANGUAGE: typescript
CODE:
import { __read, __spreadArray } from "tslib";
export function fn(arr) {
    var arr2 = __spreadArray([1], __read(arr), false);
}

----------------------------------------

TITLE: Including Specific Modules for Type Acquisition in TypeScript
DESCRIPTION: This snippet demonstrates how to include specific modules (e.g., 'jest') for type acquisition, even if they're not in node_modules.

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "include": ["jest"]
  }
}

----------------------------------------

TITLE: Method Syntax Exception in Strict Function Types
DESCRIPTION: Illustrates how strictFunctionTypes does not apply to method syntax, allowing potentially unsafe assignments in class hierarchies and object literals.

LANGUAGE: typescript
CODE:
type Methodish = {
  func(x: string | number): void;
};

function fn(x: string) {
  console.log("Hello, " + x.toLowerCase());
}

// Ultimately an unsafe assignment, but not detected
const m: Methodish = {
  func: fn,
};
m.func(10);

----------------------------------------

TITLE: Demonstrating Unique Symbol Identity in TypeScript
DESCRIPTION: Shows that unique symbols have separate identities and cannot be compared or assigned to each other.

LANGUAGE: typescript
CODE:
const sym2 = Symbol();
const sym3 = Symbol();

if (sym2 === sym3) {
  // ...
}

----------------------------------------

TITLE: Configuring Files List in tsconfig.json
DESCRIPTION: Demonstrates how to specify an explicit list of TypeScript files to include in the compilation process using the 'files' property in tsconfig.json. This approach is recommended for projects with a small, fixed set of files rather than those requiring glob patterns.

LANGUAGE: json
CODE:
{
  "compilerOptions": {},
  "files": [
    "core.ts",
    "sys.ts",
    "types.ts",
    "scanner.ts",
    "parser.ts",
    "utilities.ts",
    "binder.ts",
    "checker.ts",
    "tsc.ts"
  ]
}

----------------------------------------

TITLE: Configuring TypeScript for Bundler Usage
DESCRIPTION: TypeScript configuration for projects using modern bundlers. Includes essential module-related settings and recommended options for optimal bundler compatibility.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "customConditions": ["module"],
    "noEmit": true,
    "allowImportingTsExtensions": true,
    "allowArbitraryExtensions": true,
    "verbatimModuleSyntax": true
  }
}

----------------------------------------

TITLE: Loading Multiple JavaScript Files in HTML
DESCRIPTION: An example of how multiple JavaScript files were loaded in HTML before module systems were introduced, demonstrating the use of multiple script tags.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="a.js"></script>
    <script src="b.js"></script>
  </head>
  <body></body>
</html>

----------------------------------------

TITLE: Processing Flow for TSConfig Documentation Generation
DESCRIPTION: Shows the data flow process from TypeScript compiler through JSON generation to final markdown output.

LANGUAGE: sh
CODE:
TypeScript Compiler + `tsconfigRules.ts` -> `generateJSON.ts` -> JSON (in output) -> `generateMarkdown.ts` -> Markdown (in output)

----------------------------------------

TITLE: TSConfig with explainFiles Configuration
DESCRIPTION: Configuration example showing how to enable the explainFiles option in tsconfig.json to get detailed file inclusion information.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "explainFiles": true
  }
}

----------------------------------------

TITLE: TypeScript Import With AllowJS
DESCRIPTION: Example demonstrating successful JavaScript file import in TypeScript with the allowJs compiler option enabled.

LANGUAGE: javascript
CODE:
// @filename: card.js
module.exports.defaultCardDeck = "Heart";

LANGUAGE: typescript
CODE:
// @allowJs
// @filename: index.ts
import { defaultCardDeck } from "./card";

console.log(defaultCardDeck);

----------------------------------------

TITLE: Using @ts-ignore to Suppress Implicit Any Index Error in TypeScript
DESCRIPTION: This snippet demonstrates the recommended approach of using a @ts-ignore comment to suppress the implicit any index error for a specific line, instead of using the suppressImplicitAnyIndexErrors option.

LANGUAGE: typescript
CODE:
// @noImplicitAny: true
// @strict: true
const obj = { x: 10 };
// @ts-ignore
console.log(obj["foo"]);

----------------------------------------

TITLE: CommonJS Module Support
DESCRIPTION: Shows how TypeScript recognizes CommonJS module patterns in JavaScript files.

LANGUAGE: javascript
CODE:
const fs = require("fs");

module.exports.readFile = function (f) {
  return fs.readFileSync(f);
};

----------------------------------------

TITLE: Configuring Include Patterns in tsconfig.json
DESCRIPTION: Example configuration showing how to specify glob patterns in the include array to match files for TypeScript compilation. This example includes all files under src and tests directories.

LANGUAGE: json
CODE:
{
  "include": ["src/**/*", "tests/**/*"]
}

----------------------------------------

TITLE: Configuring Watch Options in TypeScript 3.8
DESCRIPTION: TypeScript 3.8 introduces a new directory watching strategy that focuses on monitoring directories rather than individual files, especially in node_modules. This approach helps manage system file watcher limitations more efficiently, particularly on Linux systems.

LANGUAGE: typescript
CODE:
{
  "watchOptions": {
    // Your watch strategy options would go here
  }
}

----------------------------------------

TITLE: TypeScript Use Strict Declaration
DESCRIPTION: Demonstrates the 'use strict' directive that is automatically emitted when alwaysStrict compiler option is enabled. This ensures ECMAScript strict mode parsing and runtime behavior.

LANGUAGE: typescript
CODE:
"use strict";

----------------------------------------

TITLE: ESM Module Structure with Source Directory
DESCRIPTION: Demonstrates the compilation flow for ECMAScript modules with a src directory structure, showing how .mts files are compiled to .mjs files in a dist directory.

LANGUAGE: mermaid
CODE:
graph LR
  subgraph Output files
    dist/main.mjs
    style dist/main.mjs stroke-dasharray: 5 5
    dist/math.mjs
    style dist/math.mjs stroke-dasharray: 5 5
  end
  subgraph Input files
    src/main.mts
    src/math.mts
  end
  src/main.mts -. Map to output .-> dist/main.mjs
  dist/main.mjs -- "#quot;./math.mjs#quot;" --> dist/math.mjs
  dist/math.mjs -. Map to input .-> src/math.mts

----------------------------------------

TITLE: Decorator Compilation With Metadata
DESCRIPTION: Shows the emitted JavaScript code when emitDecoratorMetadata is enabled, including additional type metadata.

LANGUAGE: typescript
CODE:
function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {
  console.log(target);
  console.log(propertyKey);
  console.log(descriptor);
}

class Demo {
  @LogMethod
  public foo(bar: number) {
    // do nothing
  }
}

const demo = new Demo();

----------------------------------------

TITLE: Configuring declarationDir in tsconfig.json
DESCRIPTION: This snippet shows how to set up the tsconfig.json file to enable declaration file generation and specify the output directory for these files. It sets the 'declaration' option to true and defines 'declarationDir' as './types'.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "declaration": true,
    "declarationDir": "./types"
  }
}

----------------------------------------

TITLE: Configuring Synchronous Watch Directory in TypeScript tsconfig
DESCRIPTION: This JSON snippet demonstrates how to enable synchronous directory watching in a TypeScript project's tsconfig.json file. It sets the 'synchronousWatchDirectory' option to true under 'watchOptions'.

LANGUAGE: json
CODE:
{
  "watchOptions": {
    "synchronousWatchDirectory": true
  }
}

----------------------------------------

TITLE: Starting TypeScript Website Dev Server
DESCRIPTION: Command to initialize the development server for the TypeScript website using pnpm package manager. This starts up a Gatsby development environment with hot-reloading enabled.

LANGUAGE: sh
CODE:
pnpm start

----------------------------------------

TITLE: Exporting Types in TypeScript with Isolated Modules
DESCRIPTION: Demonstrates how type exports are handled differently when transpiled, showing why isolated modules can cause issues with type-only exports.

LANGUAGE: typescript
CODE:
import { someType, someFunction } from "someModule";

someFunction();

export { someType, someFunction };

LANGUAGE: javascript
CODE:
export { someFunction };

----------------------------------------

TITLE: Configuring TypeScript Strict Mode
DESCRIPTION: Shows how to enable strict mode in TypeScript using the compiler option. Strict mode enables comprehensive type checking and safety features.

LANGUAGE: typescript
CODE:
"strict": true

----------------------------------------

TITLE: Decorator Compilation Without Metadata
DESCRIPTION: Shows the emitted JavaScript code when emitDecoratorMetadata is not enabled (default behavior).

LANGUAGE: typescript
CODE:
function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {
  console.log(target);
  console.log(propertyKey);
  console.log(descriptor);
}

class Demo {
  @LogMethod
  public foo(bar: number) {
    // do nothing
  }
}

const demo = new Demo();

----------------------------------------

TITLE: Demonstrating TypeScript's any type
DESCRIPTION: Shows how the 'any' type in TypeScript allows for dynamic typing and can lead to type safety issues.

LANGUAGE: typescript
CODE:
const anys = [];
anys.push(1);
anys.push("oh no");
anys.push({ anything: "goes" });

anys.map(anys[1]); // oh no, "oh no" is not a function

let sepsis = anys[0] + anys[1]; // this could mean anything

----------------------------------------

TITLE: TypeScript Component Using CSS Import
DESCRIPTION: Example TypeScript component that imports and uses the typed CSS module

LANGUAGE: typescript
CODE:
// App.tsx
import styles from "./app.css";

styles.cookieBanner; // string

----------------------------------------

TITLE: Module Detection Configuration Values
DESCRIPTION: The three possible values for TypeScript's moduleDetection compiler option.

LANGUAGE: typescript
CODE:
{
  "moduleDetection": "auto" | "legacy" | "force"
}

----------------------------------------

TITLE: Default TSBuildInfo File Path Examples
DESCRIPTION: Examples showing how the tsbuildinfo file path is determined based on combinations of outFile, rootDir, and outDir settings. The file location follows specific patterns depending on which configuration options are set.

LANGUAGE: typescript
CODE:
<outFile>.tsbuildinfo                                          // when outFile is set
<outDir>/<relative path to config from rootDir>/<config name>.tsbuildinfo  // when rootDir and outDir are set
<outDir>/<config name>.tsbuildInfo                                // when only outDir is set
<config name>.tsbuildInfo                                        // default case

----------------------------------------

TITLE: Creating Default Map from Node Modules in TypeScript
DESCRIPTION: Shows how to create a default map from node_modules using the createDefaultMapFromNodeModules function.

LANGUAGE: typescript
CODE:
import { createDefaultMapFromNodeModules } from "@typescript/vfs"
import ts from "typescript"

const fsMap = createDefaultMapFromNodeModules({ target: ts.ScriptTarget.ES2015 })
fsMap.set("index.ts", "const hello = 'hi'")
// ...

----------------------------------------

TITLE: Const Enum Reference Transformation
DESCRIPTION: Illustrates how const enum references are transformed during compilation and why they're problematic with isolated modules.

LANGUAGE: typescript
CODE:
declare const enum Numbers {
  Zero = 0,
  One = 1,
}
console.log(Numbers.Zero + Numbers.One);

LANGUAGE: javascript
CODE:
console.log(0 + 1);

----------------------------------------

TITLE: Defining Module Display Configuration in Markdown Frontmatter
DESCRIPTION: Markdown frontmatter block that sets the display property to 'Modules' for TypeScript configuration documentation.

LANGUAGE: markdown
CODE:
---
display: "Modules"
---

----------------------------------------

TITLE: Creating an Internationalization Function in a TypeScript React Component
DESCRIPTION: This snippet illustrates how to create an internationalization function 'i' within a React component using useIntl and createInternational. It sets up the function for type-safe access to internationalized strings.

LANGUAGE: typescript
CODE:
type Props = {
  data: CommunityPageQuery
  pageContext: any
}

export const Comm: React.FC<Props> = props => {
  const intl = useIntl()
  const i = createInternational<typeof comCopy>(intl)
  // ...
}

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: A tsconfig.json file specifying TypeScript compiler options and input files.

LANGUAGE: json
CODE:
{
  "files": ["src/main.ts"],
  "compilerOptions": {
    "noImplicitAny": true,
    "target": "es5"
  }
}

----------------------------------------

TITLE: Demonstrating --erasableSyntaxOnly Error in TypeScript
DESCRIPTION: This snippet shows how TypeScript 5.8 with the --erasableSyntaxOnly flag enabled will error on TypeScript-specific constructs that have runtime behavior, such as parameter properties in class constructors.

LANGUAGE: typescript
CODE:
class C {
    constructor(public x: number) { }
    //          ~~~~~~~~~~~~~~~~
    // error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
    }
}

----------------------------------------

TITLE: TypeScript Compiler Output with explainFiles
DESCRIPTION: Example output from the TypeScript compiler showing which files are included in compilation and the reasons for their inclusion, including library files and source files.

LANGUAGE: plaintext
CODE:
❯ tsc
node_modules/typescript/lib/lib.d.ts
  Default library for target 'es5'
node_modules/typescript/lib/lib.es5.d.ts
  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'
node_modules/typescript/lib/lib.dom.d.ts
  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'
node_modules/typescript/lib/lib.webworker.importscripts.d.ts
  Library referenced via 'webworker.importscripts' from 
    file 'node_modules/typescript/lib/lib.d.ts'
node_modules/typescript/lib/lib.scripthost.d.ts
  Library referenced via 'scripthost' 
    from file 'node_modules/typescript/lib/lib.d.ts'
index.ts
  Matched by include pattern '**/*' in 'tsconfig.json'

----------------------------------------

TITLE: Specifying TSConfig File Names in TypeScript/JavaScript Projects
DESCRIPTION: TSConfig files can be named either 'tsconfig.json' or 'jsconfig.json'. Both file names are used to configure TypeScript or JavaScript projects and contain the same set of configuration variables.

LANGUAGE: plaintext
CODE:
tsconfig.json
jsconfig.json

----------------------------------------

TITLE: Await Using Declaration for Asynchronous Resource Management in TypeScript
DESCRIPTION: Demonstrates the await using declaration for managing asynchronously disposable resources in TypeScript.

LANGUAGE: typescript
CODE:
async function f() {
  await using x = new C();
} // `await x[Symbol.asyncDispose]()` is invoked

----------------------------------------

TITLE: Emitting JSX with react-jsxdev Transform
DESCRIPTION: Shows how TypeScript compiles JSX using the react-jsxdev transform option, which is intended for development environments.

LANGUAGE: tsx
CODE:
declare module JSX {
  interface Element {}
  interface IntrinsicElements {
    [s: string]: any;
  }
}
// @showEmit
// @noErrors
// @jsx: react-jsxdev
export const HelloWorld = () => <h1>Hello world</h1>;

----------------------------------------

TITLE: Importing React in TypeScript Playground for Type Acquisition
DESCRIPTION: This snippet demonstrates how to import React in the TypeScript Playground, triggering automatic type acquisition. The playground will fetch type definitions for React and its dependencies.

LANGUAGE: typescript
CODE:
import React from "react"

const myComponent = () => <h1>Hello, world</h1>

----------------------------------------

TITLE: Configuring Composite Option in TypeScript tsconfig.json
DESCRIPTION: The 'composite' option in tsconfig.json enables project reference constraints. It affects rootDir default behavior, requires all implementation files to be explicitly included, and sets 'declaration' to true by default.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "composite": true
  }
}

----------------------------------------

TITLE: MSBuild Configuration for TypeScript
DESCRIPTION: XML configuration to enable TypeScript build mode in MSBuild projects

LANGUAGE: xml
CODE:
    <TypeScriptBuildMode>true</TypeScriptBuildMode>

----------------------------------------

TITLE: Improved Method Usage for Unions of Arrays
DESCRIPTION: Demonstrates how TypeScript 5.2 allows easier usage of array methods on union types of arrays.

LANGUAGE: typescript
CODE:
declare let array: string[] | number[];

// Now allowed in TypeScript 5.2
array.filter(x => !!x);

----------------------------------------

TITLE: Basic Method Override Example in TypeScript
DESCRIPTION: Demonstrates a basic class inheritance scenario where a SharedAlbum class overrides the download method from the base Album class without explicit override marking.

LANGUAGE: typescript
CODE:
class Album {
  download() {
    // Default behavior
  }
}

class SharedAlbum extends Album {
  download() {
    // Override to get info from many sources
  }
}

----------------------------------------

TITLE: Changelog Entry v1.3.2
DESCRIPTION: Documents update to cross-spawn dependency via pull request #3275

LANGUAGE: markdown
CODE:
## 1.3.2

### Patch Changes

- [#3275](https://github.com/microsoft/TypeScript-Website/pull/3275) [`17c8311`](https://github.com/microsoft/TypeScript-Website/commit/17c831175cb9580ee3c489c54774c8b35cd0b221) Thanks [@dependabot](https://github.com/apps/dependabot)! - Update cross-spawn

----------------------------------------

TITLE: Using Namespaces in Module Declarations (TypeScript)
DESCRIPTION: Example of using namespaces in a .d.ts file to describe complex types and nested structures.

LANGUAGE: typescript
CODE:
export class API {
  constructor(baseURL: string);
  getInfo(opts: API.InfoRequest): API.InfoResponse;
}

declare namespace API {
  export interface InfoRequest {
    id: string;
  }

  export interface InfoResponse {
    width: number;
    height: number;
  }
}

----------------------------------------

TITLE: TypeScript Configuration for React JSX
DESCRIPTION: TSConfig settings for enabling React JSX transformation with modern ES features.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "esnext",
    "module": "commonjs",
    "jsx": "react-jsx"
  }
}

----------------------------------------

TITLE: Demonstrating URL Changes for Compiler Options in TypeScript Playground
DESCRIPTION: This snippet shows how changing a compiler flag (esModuleInterop) affects the URL in the TypeScript Playground. It illustrates the before and after states of the URL when turning off esModuleInterop.

LANGUAGE: diff
CODE:
# Before
- https://www.typescriptlang.org/play

# After turning esModuleInterop off
+ https://www.typescriptlang.org/play?esModuleInterop=false

----------------------------------------

TITLE: Implementing Custom Error Classes with new.target in TypeScript
DESCRIPTION: Shows how to use the new.target meta-property in TypeScript 2.2 to create custom error classes that properly inherit from Error.

LANGUAGE: typescript
CODE:
class CustomError extends Error {
  constructor(message?: string) {
    super(message); // 'Error' breaks prototype chain here
    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
  }
}

----------------------------------------

TITLE: TypeScript Source Code Example
DESCRIPTION: Example of a simple TypeScript declaration that will be used to demonstrate source map generation.

LANGUAGE: typescript
CODE:
export declare const helloWorld = "hi";

----------------------------------------

TITLE: Improved Unknown Type Assignment
DESCRIPTION: Demonstrates TypeScript 4.8's new handling of unknown type assignment to {} | null | undefined union types.

LANGUAGE: typescript
CODE:
function f(x: unknown, y: {} | null | undefined) {
    x = y; // always worked
    y = x; // used to error, now works
}

----------------------------------------

TITLE: Setting TypeScript BOM Emission Flag
DESCRIPTION: Configuration option that controls whether TypeScript emits a UTF-8 Byte Order Mark at the start of output files. Default value is false, which is recommended unless specifically needed by the runtime environment.

LANGUAGE: typescript
CODE:
{
  "emitBOM": false
}

----------------------------------------

TITLE: Demonstrating URL Hash Code Input in TypeScript Playground
DESCRIPTION: Shows how to include TypeScript code in the playground URL using base64 encoding and zipping.

LANGUAGE: typescript
CODE:
#code/PRA

----------------------------------------

TITLE: Generated JavaScript with Source Map Reference
DESCRIPTION: The compiled JavaScript output that includes the source map reference comment. This file is generated when sourceMap is set to true.

LANGUAGE: javascript
CODE:
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helloWorld = "hi";
//# sourceMappingURL=// helloWorld.js.map

----------------------------------------

TITLE: Preact Component with JSX Import Source Pragma
DESCRIPTION: Example of using a file-level pragma to specify Preact as the JSX import source.

LANGUAGE: tsx
CODE:
/** @jsxImportSource preact */

export function App() {
  return <h1>Hello World</h1>;
}

----------------------------------------

TITLE: Simplified TypeScript Tuple Example With Twoslash
DESCRIPTION: Final version of the Twoslash example with minimized comments, letting the compiler provide the error information.

LANGUAGE: typescript
CODE:
// @errors: 2322
// Declare a tuple type
let x: [string, number];

// Initialize it
x = ["hello", 10];

// Initialize it incorrectly
x = [10, "hello"];

----------------------------------------

TITLE: Demonstrating noUnusedLocals Error Reporting in TypeScript
DESCRIPTION: Example showing how TypeScript reports an error when a local variable 'defaultModelID' is declared but never used within a function scope. The compiler flag @noUnusedLocals triggers error 6133 for unused local variables.

LANGUAGE: typescript
CODE:
// @noUnusedLocals
// @errors: 6133
const createKeyboard = (modelID: number) => {
  const defaultModelID = 23;
  return { type: "keyboard", modelID };
};

----------------------------------------

TITLE: Block-Scoped Let Declaration in TypeScript
DESCRIPTION: Demonstrates the block-scoping behavior of 'let' declarations in TypeScript 1.5, showing how variables declared with 'let' are limited to their containing block.

LANGUAGE: typescript
CODE:
if (true) {
  let a = 4;
  // use a
} else {
  let a = "string";
  // use a
}

alert(a); // Error: a is not defined in this scope.

----------------------------------------

TITLE: Package Exports Configuration
DESCRIPTION: Complex package.json exports field configuration example

LANGUAGE: jsonc
CODE:
{
    "name": "my-package",
    "type": "module",
    "exports": {
        ".": {
            "import": {
                "types": "./types/esm/index.d.ts",
                "default": "./esm/index.js"
            },
            "require": {
                "types": "./types/commonjs/index.d.cts",
                "default": "./commonjs/index.cjs"
            },
        }
    },
    "types": "./types/index.d.ts",
    "main": "./commonjs/index.cjs"
}

----------------------------------------

TITLE: Specifying Type Version in TypeScript Playground Import
DESCRIPTION: This snippet shows how to specify a particular version or npm tag for type definitions when importing a module in the TypeScript Playground. This gives more control over which version of types are used.

LANGUAGE: typescript
CODE:
import { xy } from "xyz" // types: beta

----------------------------------------

TITLE: Setting Boolean Compiler Flag with Twoslash
DESCRIPTION: Demonstrates how to enable a boolean compiler flag using a // @ comment annotation.

LANGUAGE: typescript
CODE:
// @isolatedModules

----------------------------------------

TITLE: Project Structure Example
DESCRIPTION: Example directory structure showing a basic TypeScript project setup with main files.

LANGUAGE: plaintext
CODE:
example
├── index.ts
├── package.json
└── tsconfig.json

----------------------------------------

TITLE: Optional Catch Clause Variables in TypeScript
DESCRIPTION: Demonstrates the new ECMAScript feature allowing omission of catch clause variables when handling errors, specifically showing JSON.parse error handling without using the SyntaxError variable.

LANGUAGE: typescript
CODE:
let input = "...";
try {
  JSON.parse(input);
} catch {
  // ^ Notice that our `catch` clause doesn't declare a variable.
  console.log("Invalid JSON given\n\n" + input);
}

----------------------------------------

TITLE: Destructuring Assignment in TypeScript
DESCRIPTION: Demonstrates destructuring assignment in TypeScript 1.5, which allows for concise value swapping between variables without using a temporary variable.

LANGUAGE: typescript
CODE:
var x = 1;
var y = 2;
[x, y] = [y, x];

----------------------------------------

TITLE: Control Flow Analysis for Destructured Discriminated Unions in TypeScript
DESCRIPTION: Demonstrates how TypeScript 4.6 improves type narrowing for destructured properties of discriminated unions.

LANGUAGE: typescript
CODE:
type Action =
  | { kind: "NumberContents"; payload: number }
  | { kind: "StringContents"; payload: string };

function processAction(action: Action) {
  const { kind, payload } = action;
  if (kind === "NumberContents") {
    let num = payload * 2;
    // ...
  } else if (kind === "StringContents") {
    const str = payload.trim();
    // ...
  }
}

----------------------------------------

TITLE: Inline Source Map Example in TypeScript Playground
DESCRIPTION: Example URL demonstrating the usage of inlineSourceMap compiler option in the TypeScript Playground to include source maps directly in the JavaScript output.

LANGUAGE: url
CODE:
https://www.typescriptlang.org/play?inlineSourceMap=true#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUFitAM4Auo+oAvKAEQDyA0k0A

----------------------------------------

TITLE: Implementing Mixin Classes in TypeScript
DESCRIPTION: Demonstrates the implementation of mixin classes in TypeScript 2.2, including the use of constructor types and the Tagged function to create mixins.

LANGUAGE: typescript
CODE:
class Point {
  constructor(public x: number, public y: number) {}
}

class Person {
  constructor(public name: string) {}
}

type Constructor<T> = new (...args: any[]) => T;

function Tagged<T extends Constructor<{}>>(Base: T) {
  return class extends Base {
    _tag: string;
    constructor(...args: any[]) {
      super(...args);
      this._tag = "";
    }
  };
}

const TaggedPoint = Tagged(Point);

let point = new TaggedPoint(10, 20);
point._tag = "hello";

class Customer extends Tagged(Person) {
  accountBalance: number;
}

let customer = new Customer("Joe");
customer._tag = "test";
customer.accountBalance = 0;

----------------------------------------

TITLE: Setting TypeScript Locale via CLI
DESCRIPTION: Example of setting Russian locale using TypeScript compiler command line interface flag. The locale setting affects compiler messages but not emitted code.

LANGUAGE: bash
CODE:
tsc --locale ru

----------------------------------------

TITLE: TypeScript Built-in Library Examples
DESCRIPTION: Example references to built-in TypeScript type definitions including Math, document, and Map objects. These represent core JavaScript and DOM APIs that TypeScript provides type definitions for.

LANGUAGE: typescript
CODE:
Math
document
Map

----------------------------------------

TITLE: Tagged Template Strings in TypeScript
DESCRIPTION: Shows the implementation of tagged template strings in TypeScript 1.5 for ES3/ES5 targets, allowing for powerful string interpolation and processing.

LANGUAGE: typescript
CODE:
function oddRawStrings(strs: TemplateStringsArray, n1, n2) {
  return strs.raw.filter((raw, index) => index % 2 === 1);
}

oddRawStrings`Hello \n${123} \t ${456}\n world`;

----------------------------------------

TITLE: Handbook Documentation Frontmatter Template
DESCRIPTION: Required YAML frontmatter configuration for TypeScript handbook documentation pages, including title, layout, permalink, and description.

LANGUAGE: markdown
CODE:
---
title: Basic Types
layout: docs
permalink: /docs/handbook/basic-types.html
oneline: "Step one in learning TypeScript: The basic types."
---

----------------------------------------

TITLE: Symbol Index Signature Example
DESCRIPTION: Shows how to use symbol-keyed index signatures to define objects that can be indexed with symbols.

LANGUAGE: typescript
CODE:
interface Colors {
  [sym: symbol]: number;
}

const red = Symbol("red");
const green = Symbol("green");
const blue = Symbol("blue");

let colors: Colors = {};

colors[red] = 255;

----------------------------------------

TITLE: Demonstrating Type Query in TypeScript using Twoslash
DESCRIPTION: Shows how to use the ^? annotation to display type information for a variable in real-time within the editor.

LANGUAGE: typescript
CODE:
const abc = "Hello"
//    ^?

----------------------------------------

TITLE: Adding Module Support to TypeScript Project
DESCRIPTION: Demonstrates how to add and use modules in a TypeScript project, including updating tsconfig.json.

LANGUAGE: typescript
CODE:
// src/greet.ts
export function sayHello(name: string) {
  return `Hello from ${name}`;
}

// src/main.ts
import { sayHello } from "./greet";

console.log(sayHello("TypeScript"));

LANGUAGE: json
CODE:
{
  "files": ["src/main.ts", "src/greet.ts"],
  "compilerOptions": {
    "noImplicitAny": true,
    "target": "es5"
  }
}

----------------------------------------

TITLE: Module Output: AMD
DESCRIPTION: Illustrates the TypeScript compiler output when the module option is set to AMD (Asynchronous Module Definition).

LANGUAGE: typescript
CODE:
// @showEmit
// @module: amd
// @noErrors
import { valueOfPi } from "./constants";

export const twoPi = valueOfPi * 2;

----------------------------------------

TITLE: Configuring ASP.NET Core Startup
DESCRIPTION: Configuration of ASP.NET Core Startup.cs file to enable static files and default files middleware

LANGUAGE: csharp
CODE:
public void Configure(IApplicationBuilder app, IHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

    app.UseDefaultFiles();
    app.UseStaticFiles();
}

----------------------------------------

TITLE: Configuring TypeScript compiler for ES6 with module output
DESCRIPTION: Shows how to configure the TypeScript compiler to target ES6 while specifying a module output format using the tsconfig.json file.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "amd",
    "target": "es6"
  }
}

----------------------------------------

TITLE: Configuring Markdown Frontmatter for Deprecated Pages
DESCRIPTION: Example of YAML frontmatter configuration for a deprecated TypeScript documentation page, showing how to set up deprecation notices and redirect mappings.

LANGUAGE: markdown
CODE:
---
title: Advanced Types
layout: docs
permalink: /docs/handbook/advanced-types.html
oneline: Advanced concepts around types in TypeScript
deprecated_by: /docs/handbook/2/types-from-types.html

# prettier-ignore
deprecation_redirects: [
  type-guards-and-differentiating-types, /docs/handbook/2/narrowing.html,
  user-defined-type-guards, /docs/handbook/2/narrowing.html#using-type-predicates,
  typeof-type-guards, "/docs/handbook/2/narrowing.html#typeof-type-guards",
  instanceof-type-guards, /docs/handbook/2/narrowing.html#instanceof-narrowing,
  nullable-types, /docs/handbook/2/everyday-types.html#null-and-undefined,
  type-aliases, /docs/handbook/2/everyday-types.html#type-aliases,
  interfaces-vs-type-aliases, /docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces,
  enum-member-types, /docs/handbook/enums.html,
  polymorphic-this-types, /docs/handbook/2/classes.html,
  index-types, /docs/handbook/2/indexed-access-types.html,
  index-types-and-index-signatures, /docs/handbook/2/indexed-access-types.html,
  mapped-types, /docs/handbook/2/mapped-types.html,
  inference-from-mapped-types, /docs/handbook/2/mapped-types.html,
  conditional-types, /docs/handbook/2/conditional-types.html,
  distributive-conditional-types, /docs/handbook/2/conditional-types.html#distributive-conditional-types,
  type-inference-in-conditional-types, /docs/handbook/2/conditional-types.html#inferring-within-conditional-types,
  predefined-conditional-types, /docs/handbook/utility-types.html,
]
---

----------------------------------------

TITLE: Leading Rest Elements in Tuple Types
DESCRIPTION: Shows how to use rest elements at the beginning or middle of tuple types.

LANGUAGE: typescript
CODE:
let foo: [...string[], number];

foo = [123];
foo = ["hello", 123];
foo = ["hello!", "hello!", "hello!", 123];

let bar: [boolean, ...string[], boolean];

bar = [true, false];
bar = [true, "some text", false];
bar = [true, "some", "separated", "text", false];

----------------------------------------

TITLE: Setting Compiler Flags in TypeScript Playground URL
DESCRIPTION: Shows how to set compiler flags in the TypeScript Playground URL.

LANGUAGE: typescript
CODE:
?flag=value

----------------------------------------

TITLE: Exporting a Regular Expression as Default (JavaScript)
DESCRIPTION: Example of exporting a regular expression as the default export in CommonJS.

LANGUAGE: javascript
CODE:
module.exports = /hello( world)?/;

----------------------------------------

TITLE: Setting Module Resolution Options in TypeScript
DESCRIPTION: Code examples showing the different values that can be used for moduleResolution. These options determine how TypeScript resolves module imports and includes node16/nodenext for modern Node.js, node10 for older versions, bundler for bundler-based projects, and classic for legacy code.

LANGUAGE: typescript
CODE:
{
  "moduleResolution": "node16",     // For modern Node.js
  "moduleResolution": "nodenext",   // Alias for node16
  "moduleResolution": "node10",     // For older Node.js versions
  "moduleResolution": "bundler",    // For bundler-based projects
  "moduleResolution": "classic"     // Legacy (not recommended)
}

----------------------------------------

TITLE: Setting TypeScript Version in Playground URL
DESCRIPTION: Demonstrates how to specify a particular TypeScript version in the playground URL.

LANGUAGE: typescript
CODE:
?ts=3.9.2

----------------------------------------

TITLE: Demonstrating Incorrect JavaScript Usage without checkJs
DESCRIPTION: This snippet shows an example of incorrect JavaScript code that doesn't trigger errors when 'checkJs' is not enabled. It uses parseFloat incorrectly with a number instead of a string.

LANGUAGE: javascript
CODE:
// parseFloat only takes a string
module.exports.pi = parseFloat(3.142);

----------------------------------------

TITLE: Creating Constrained Mixin Classes in TypeScript
DESCRIPTION: Shows how to create mixin classes with constraints on the types they can mix into, using a Point interface and a WithLocation function.

LANGUAGE: typescript
CODE:
interface Point {
  x: number;
  y: number;
}

const WithLocation = <T extends Constructor<Point>>(Base: T) =>
  class extends Base {
    getLocation(): [number, number] {
      return [this.x, this.y];
    }
  };

----------------------------------------

TITLE: Changelog Entry - Version 0.1.7
DESCRIPTION: Documents patch changes updating @typescript/ata dependency to version 0.9.7

LANGUAGE: markdown
CODE:
## 0.1.7

### Patch Changes

- Updated dependencies [[`1d0af97`](https://github.com/microsoft/TypeScript-Website/commit/1d0af97318b79943fe0bfa8871ee6e8c584c9af5)]:
  - @typescript/ata@0.9.7

----------------------------------------

TITLE: Implementing String Literal Type Validation in TypeScript
DESCRIPTION: Demonstrates basic string literal type checking for a vertical alignment function to ensure only valid alignment values are used.

LANGUAGE: typescript
CODE:
function setVerticalAlignment(location: "top" | "middle" | "bottom") {
  // ...
}

setVerticalAlignment("middel");

----------------------------------------

TITLE: Using Pre-ES2015 Module Syntax in TypeScript
DESCRIPTION: These snippets demonstrate how to use TypeScript's pre-ES2015 module syntax for compatibility with CommonJS when using --verbatimModuleSyntax.

LANGUAGE: typescript
CODE:
import foo = require("foo");

LANGUAGE: javascript
CODE:
const foo = require("foo");

LANGUAGE: typescript
CODE:
function foo() {}
function bar() {}
function baz() {}

export = {
    foo,
    bar,
    baz
};

LANGUAGE: javascript
CODE:
function foo() {}
function bar() {}
function baz() {}

module.exports = {
    foo,
    bar,
    baz
};

----------------------------------------

TITLE: Configuring noEmitOnError in TypeScript
DESCRIPTION: Example of the noEmitOnError compiler flag default value in TypeScript configuration. When set to false (default), the compiler will still generate output files even if type checking errors are found, which is useful for development workflows.

LANGUAGE: typescript
CODE:
false

----------------------------------------

TITLE: Installing and Setting up TypeScript Playground Plugin Development
DESCRIPTION: Commands for cloning the repository, installing dependencies, and starting the development environment for the TypeScript Playground plugin.

LANGUAGE: sh
CODE:
git clone ...
yarn install
yarn start

----------------------------------------

TITLE: Generated JavaScript Output
DESCRIPTION: Shows the JavaScript output generated from the TypeScript code when the compiler is run. This demonstrates that the original TypeScript is transpiled to equivalent JavaScript.

LANGUAGE: javascript
CODE:
export let helloWorld = "hi";

----------------------------------------

TITLE: Using for-await-of Statement in TypeScript
DESCRIPTION: This snippet demonstrates the usage of the for-await-of statement to iterate over an async iterable in an async function.

LANGUAGE: typescript
CODE:
async function f() {
  for await (const x of g()) {
    console.log(x);
  }
}

----------------------------------------

TITLE: Import Default from CommonJS Modules with esModuleInterop in TypeScript
DESCRIPTION: Demonstrates the new behavior of importing from CommonJS/AMD/UMD modules using the esModuleInterop flag in TypeScript 2.7, which allows for default imports and correct namespace imports.

LANGUAGE: typescript
CODE:
import * as foo from "foo";
import b from "bar";

LANGUAGE: javascript
CODE:
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var foo = __importStar(require("foo"));
var bar_1 = __importDefault(require("bar"));

----------------------------------------

TITLE: Simple Global Function Example
DESCRIPTION: Shows a basic example of a global library function implementation using plain JavaScript.

LANGUAGE: javascript
CODE:
function createGreeting(s) {
  return "Hello, " + s;
}

----------------------------------------

TITLE: Disabling Library Inclusion in TypeScript Compilation
DESCRIPTION: The 'noLib' option in TypeScript disables the automatic inclusion of any library files. When set, it overrides the 'lib' option. This requires manual inclusion of type definitions for key primitives.

LANGUAGE: typescript
CODE:
// Example usage of noLib compiler option
{
  "compilerOptions": {
    "noLib": true
  }
}

----------------------------------------

TITLE: Starting Development Server with PNPM
DESCRIPTION: Command to start Rollup for JS generation and Serve for hosting the development server.

LANGUAGE: shell
CODE:
pnpm start

----------------------------------------

TITLE: Generated Declaration File
DESCRIPTION: Displays the contents of the generated .d.ts declaration file. This file describes the types and structure of the exported variables and functions, enabling better tooling support and type checking in other files that import this module.

LANGUAGE: typescript
CODE:
export declare let helloWorld: string;

----------------------------------------

TITLE: Defining String Enums in TypeScript
DESCRIPTION: Shows how to create enum members with string initializers in TypeScript 2.4. Note that string-initialized enums cannot be reverse-mapped.

LANGUAGE: typescript
CODE:
enum Colors {
  Red = "RED",
  Green = "GREEN",
  Blue = "BLUE"
}

----------------------------------------

TITLE: Improved Handling of Structurally Identical Classes in TypeScript
DESCRIPTION: Demonstrates the improved handling of structurally identical classes in union types and instanceof expressions in TypeScript 2.7.

LANGUAGE: typescript
CODE:
class A {}
class B extends A {}
class C extends A {}
class D extends A {
  c: string;
}
class E extends D {}

let x1 = !true ? new A() : new B(); // A
let x2 = !true ? new B() : new C(); // B | C (previously B)
let x3 = !true ? new C() : new D(); // C | D (previously C)

let a1 = [new A(), new B(), new C(), new D(), new E()]; // A[]
let a2 = [new B(), new C(), new D(), new E()]; // (B | C | D)[] (previously B[])

function f1(x: B | C | D) {
  if (x instanceof B) {
    x; // B (previously B | D)
  } else if (x instanceof C) {
    x; // C
  } else {
    x; // D (previously never)
  }
}

----------------------------------------

TITLE: Declaring Function Export with Namespace (TypeScript)
DESCRIPTION: TypeScript declaration for a function export with additional properties using a namespace.

LANGUAGE: typescript
CODE:
declare function getArrayLength(arr: any[]): number;
declare namespace getArrayLength {
  declare const maxInterval: 12;
}

export = getArrayLength;

----------------------------------------

TITLE: Demonstrating --verbatimModuleSyntax Behavior in TypeScript
DESCRIPTION: This snippet shows how the new --verbatimModuleSyntax option in TypeScript 5.0 handles imports with and without the 'type' modifier.

LANGUAGE: typescript
CODE:
// Erased away entirely.
import type { A } from "a";

// Rewritten to 'import { b } from "bcd";'
import { b, type c, type d } from "bcd";

// Rewritten to 'import {} from "xyz";'
import { type xyz } from "xyz";

----------------------------------------

TITLE: Basic Side Effect Import Example
DESCRIPTION: Demonstrates the basic syntax of a side effect import in TypeScript, where a module is imported without importing any specific values.

LANGUAGE: typescript
CODE:
import "some-module";

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start the local development server for the TypeScript playground plugin.

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Initializing TypeScript Project Structure with Shell Commands
DESCRIPTION: Shell commands to create the initial project structure for a TypeScript project using Gulp.

LANGUAGE: shell
CODE:
mkdir proj
cd proj
mkdir src
mkdir dist

----------------------------------------

TITLE: Generic Type Parameter Inference Example
DESCRIPTION: Illustrates how TypeScript 2.4 handles type parameter inference from contextual types and stricter checking for generic functions.

LANGUAGE: typescript
CODE:
let f: <T>(x: T) => T = y => y;

type A = <T, U>(x: T, y: U) => [T, U];
type B = <S>(x: S, y: S) => [S, S];

function f(a: A, b: B) {
  a = b; // Error
  b = a; // Ok
}

----------------------------------------

TITLE: Configuring TypeScript for Downlevel Async Functions
DESCRIPTION: Shows how to configure TypeScript to use async/await in ES3/ES5 environments with the necessary polyfills.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "lib": ["dom", "es2015.promise", "es5"]
  }
}

----------------------------------------

TITLE: Global Library Implementation Examples
DESCRIPTION: Shows different ways to implement a global library across different environments

LANGUAGE: javascript
CODE:
// Web
window.createGreeting = function (s) {
  return "Hello, " + s;
};

// Node
global.createGreeting = function (s) {
  return "Hello, " + s;
};

// Potentially any runtime
globalThis.createGreeting = function (s) {
  return "Hello, " + s;
};

----------------------------------------

TITLE: Array Destructuring Declaration in TypeScript
DESCRIPTION: Shows array destructuring declaration syntax in TypeScript 1.5, which extracts values from an array and assigns them to variables, with an optional default value.

LANGUAGE: typescript
CODE:
var [x, y, z = 10] = getSomeArray();

----------------------------------------

TITLE: Ambient Module Declaration for CSS
DESCRIPTION: Shows how to declare ambient modules to allow side effect imports for non-TypeScript files like CSS using wildcard patterns.

LANGUAGE: typescript
CODE:
// ./src/globals.d.ts

// Recognize all CSS files as module imports.
declare module "*.css" {}

----------------------------------------

TITLE: Creating TypeScript Playground Plugin Project
DESCRIPTION: Command to bootstrap a new TypeScript playground plugin project using yarn.

LANGUAGE: shell
CODE:
yarn create typescript-playground-plugin playground-my-plugin

----------------------------------------

TITLE: AMD-Dependency Optional Names in TypeScript
DESCRIPTION: Demonstrates the use of optional names for AMD dependencies in TypeScript 1.5, allowing for consumption of non-TS modules in TypeScript code.

LANGUAGE: typescript
CODE:
/// <amd-dependency path="legacy/moduleA" name="moduleA"/>
declare var moduleA: MyType;
moduleA.callStuff();

----------------------------------------

TITLE: Type Assertion Syntax in JavaScript with @ts-check
DESCRIPTION: Shows the new syntax for type assertions in JavaScript files using JSDoc-style comments with @type annotations followed by parenthesized expressions.

LANGUAGE: typescript
CODE:
var x = /** @type {SomeType} */ AnyParenthesizedExpression;

----------------------------------------

TITLE: Creating Default Map from CDN in TypeScript
DESCRIPTION: Demonstrates how to create a default map from a CDN, including caching options and compression using lz-string.

LANGUAGE: typescript
CODE:
import { createDefaultMapFromCDN } from "@typescript/vfs"
import ts from "typescript"
import lzstring from "lz-string"

const start = async () => {
  const shouldCache = true
  // This caches the lib files in the site's localStorage
  const fsMap = await createDefaultMapFromCDN({ target: ts.ScriptTarget.ES2015 }, "3.7.3", shouldCache, ts)

  // This stores the lib files as a zipped string to save space in the cache
  const otherMap = await createDefaultMapFromCDN({ target: ts.ScriptTarget.ES2015 }, "3.7.3", shouldCache, ts, lzstring)

  fsMap.set("index.ts", "const hello = 'hi'")
  // ...
}

start()

----------------------------------------

TITLE: Demonstrating Null- and Undefined-Aware Types in TypeScript
DESCRIPTION: Example showing how null and undefined are handled in strict null checking mode, including assignments and error cases.

LANGUAGE: typescript
CODE:
// Compiled with --strictNullChecks
let x: number;
let y: number | undefined;
let z: number | null | undefined;
x = 1; // Ok
y = 1; // Ok
z = 1; // Ok
x = undefined; // Error
y = undefined; // Ok
z = undefined; // Ok
x = null; // Error
y = null; // Error
z = null; // Ok
x = y; // Error
x = z; // Error
y = x; // Ok
y = z; // Error
z = x; // Ok
z = y; // Ok

----------------------------------------

TITLE: Ordering Function Overloads in TypeScript
DESCRIPTION: Illustrates the correct ordering of function overloads in TypeScript, placing more specific signatures before more general ones.

LANGUAGE: typescript
CODE:
/* WRONG */
declare function fn(x: unknown): unknown;
declare function fn(x: HTMLElement): number;
declare function fn(x: HTMLDivElement): string;

var myElem: HTMLDivElement;
var x = fn(myElem); // x: unknown, wat?

LANGUAGE: typescript
CODE:
/* OK */
declare function fn(x: HTMLDivElement): string;
declare function fn(x: HTMLElement): number;
declare function fn(x: unknown): unknown;

var myElem: HTMLDivElement;
var x = fn(myElem); // x: string, :)

----------------------------------------

TITLE: Showing Union Type Assignment Error in TypeScript
DESCRIPTION: This snippet illustrates an error when assigning an object to a union type variable where the object doesn't match any of the union's members. It demonstrates TypeScript's union type checking capabilities.

LANGUAGE: typescript
CODE:
type Thing = "none" | { name: string };

const a: Thing = { name: 0 };

----------------------------------------

TITLE: Defining a Constant with JSDoc Comment in TypeScript
DESCRIPTION: This snippet shows a TypeScript constant declaration with a JSDoc comment. It serves as the base example for demonstrating the 'removeComments' option.

LANGUAGE: typescript
CODE:
/** The translation of 'Hello world' into Portuguese */
export const helloWorldPTBR = "Olá Mundo";

----------------------------------------

TITLE: Changelog Entry v1.3.1
DESCRIPTION: Documents initial changeset implementation

LANGUAGE: markdown
CODE:
## 1.3.1

### Patch Changes

- 46eba14: Initial bump for changesets

----------------------------------------

TITLE: Running TypeScript Website Without Watchman
DESCRIPTION: This command demonstrates how to start the TypeScript website without using Watchman. It's useful for Windows users or when making numerous changes to the site.

LANGUAGE: bash
CODE:
pnpm run --filter=typescriptlang-org start

----------------------------------------

TITLE: Combining Functions with Contravariant Type Inference in TypeScript
DESCRIPTION: This snippet shows improved type inference for contravariant positions. It demonstrates how TypeScript infers the best common subtype when combining functions.

LANGUAGE: typescript
CODE:
function combine<T>(...funcs: ((x: T) => void)[]): (x: T) => void {
  return x => {
    for (const f of funcs) f(x);
  };
}

function animalFunc(x: Animal) {}
function dogFunc(x: Dog) {}

let combined = combine(animalFunc, dogFunc); // (x: Dog) => void

----------------------------------------

TITLE: Merging Specialized Signatures in TypeScript Interfaces
DESCRIPTION: Illustrates how TypeScript handles merging of specialized signatures in interfaces. Signatures with single string literal type parameters are bubbled to the top of the merged overload list.

LANGUAGE: typescript
CODE:
interface Document {
  createElement(tagName: any): Element;
}
interface Document {
  createElement(tagName: "div"): HTMLDivElement;
  createElement(tagName: "span"): HTMLSpanElement;
}
interface Document {
  createElement(tagName: string): HTMLElement;
  createElement(tagName: "canvas"): HTMLCanvasElement;
}

----------------------------------------

TITLE: Using ES7 exponentiation operator in TypeScript
DESCRIPTION: Demonstrates the use of the ES7/ES2016 exponentiation operators ** and **= in TypeScript, which are transformed to Math.pow in ES3/ES5 output.

LANGUAGE: typescript
CODE:
var x = 2 ** 3;
var y = 10;
y **= 2;
var z = -(4 ** 3);

----------------------------------------

TITLE: Defining a Variable in JavaScript
DESCRIPTION: This snippet shows how to define a string variable in JavaScript, which can run directly in a JavaScript runtime.

LANGUAGE: typescript
CODE:
const hello = "Hello world";

----------------------------------------

TITLE: Installing TypeScript via npm
DESCRIPTION: Command to globally install TypeScript using Node Package Manager (npm)

LANGUAGE: shell
CODE:
> npm install -g typescript

----------------------------------------

TITLE: Namespace Usage with Isolated Modules
DESCRIPTION: Shows how namespaces are restricted in non-module files when isolatedModules is enabled.

LANGUAGE: typescript
CODE:
namespace Instantiated {
 export const x = 1;
}

----------------------------------------

TITLE: Compiling TypeScript with removeComments Set to False
DESCRIPTION: This example shows the output when 'removeComments' is set to false or not set. The JSDoc comment is preserved in the emitted JavaScript code.

LANGUAGE: typescript
CODE:
// @showEmit
// @removeComments: false
/** The translation of 'Hello world' into Portuguese */
export const helloWorldPTBR = "Olá Mundo";

----------------------------------------

TITLE: Path Reference for File Copy Script
DESCRIPTION: Link reference for the file copying script.

LANGUAGE: markdown
CODE:
[`scripts/copyFiles.js`](scripts/copyFiles.js)

----------------------------------------

TITLE: YAML Frontmatter for TypeScript Compiler Diagnostics
DESCRIPTION: YAML configuration that specifies the display name for TypeScript compiler diagnostics documentation.

LANGUAGE: yaml
CODE:
---
display: "Compiler Diagnostics"
---

----------------------------------------

TITLE: Demonstrating Unused Write-Only References in TypeScript
DESCRIPTION: This example shows how TypeScript 2.6 flags write-only references as unused when using the noUnusedLocals and noUnusedParameters compiler options.

LANGUAGE: typescript
CODE:
function f(n: number) {
  n = 0;
}

class C {
  private m: number;
  constructor() {
    this.m = 0;
  }
}

----------------------------------------

TITLE: Limitation of typeof Operator in TypeScript
DESCRIPTION: Illustrates a limitation of the typeof operator in TypeScript, showing that it can only be used on identifiers or their properties to avoid confusion.

LANGUAGE: typescript
CODE:
// @errors: 1005
declare const msgbox: (prompt: string) => boolean;
// type msgbox = any;
// ---cut---
// Meant to use = ReturnType<typeof msgbox>
let shouldContinue: typeof msgbox("Are you sure you want to continue?");

----------------------------------------

TITLE: Const Declaration in TypeScript
DESCRIPTION: Illustrates the use of 'const' for declaring constants in TypeScript 1.5, which prevents reassignment and modification of the declared value.

LANGUAGE: typescript
CODE:
const MAX = 100;

++MAX; // Error: The operand of an increment or decrement
//        operator cannot be a constant.

----------------------------------------

TITLE: Using Declare Keyword in TypeScript
DESCRIPTION: Demonstrates how to use the 'declare' keyword to inform TypeScript about the existence of a variable and its type structure. The example shows declaring a 'ghost' object with a 'boo' method.

LANGUAGE: typescript
CODE:
// Declare that a ghost exists, and that it has a function called "boo"
declare const ghost: { boo: () => void };

ghost.boo();

----------------------------------------

TITLE: Integrating Babel with TypeScript and Gulp
DESCRIPTION: Configures Gulp to use Babel for transpiling TypeScript output to ES5, including necessary plugins and presets.

LANGUAGE: javascript
CODE:
var gulp = require("gulp");
var browserify = require("browserify");
var source = require("vinyl-source-stream");
var tsify = require("tsify");
var sourcemaps = require("gulp-sourcemaps");
var buffer = require("vinyl-buffer");
var paths = {
  pages: ["src/*.html"],
};

gulp.task("copy-html", function () {
  return gulp.src(paths.pages).pipe(gulp.dest("dist"));
});

gulp.task(
  "default",
  gulp.series(gulp.parallel("copy-html"), function () {
    return browserify({
      basedir: ".",
      debug: true,
      entries: ["src/main.ts"],
      cache: {},
      packageCache: {},
    })
      .plugin(tsify)
      .transform("babelify", {
        presets: ["es2015"],
        extensions: [".ts"],
      })
      .bundle()
      .pipe(source("bundle.js"))
      .pipe(buffer())
      .pipe(sourcemaps.init({ loadMaps: true }))
      .pipe(sourcemaps.write("./"))
      .pipe(gulp.dest("dist"));
  })
);

LANGUAGE: json
CODE:
{
  "files": ["src/main.ts"],
  "compilerOptions": {
    "noImplicitAny": true,
    "target": "es2015"
  }
}

----------------------------------------

TITLE: CommonJS Export Example
DESCRIPTION: An example of exporting a value in a CommonJS module.

LANGUAGE: javascript
CODE:
// a.js
exports.message = "Hello from a.js";

----------------------------------------

TITLE: Importing JSON With resolveJsonModule Enabled
DESCRIPTION: Shows how enabling resolveJsonModule allows importing JSON files with proper type checking of the imported data structure.

LANGUAGE: typescript
CODE:
// @errors: 2367
// @resolveJsonModule
// @module: commonjs
// @moduleResolution: node
// @filename: settings.json
{
    "repo": "TypeScript",
    "dry": false,
    "debug": false
}
// @filename: index.ts
import settings from "./settings.json";

settings.debug === true;
settings.dry === 2;

----------------------------------------

TITLE: Path Reference for Generated Directory
DESCRIPTION: Link reference using relative path syntax for the generated directory.

LANGUAGE: markdown
CODE:
[`generated`](./generated)

----------------------------------------

TITLE: Creating an HTML Page for Browser-based TypeScript
DESCRIPTION: An HTML file that loads a bundled JavaScript file produced from TypeScript compilation.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Hello World!</title>
  </head>
  <body>
    <p id="greeting">Loading ...</p>
    <script src="bundle.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Using keyof with numeric index signatures in TypeScript
DESCRIPTION: This example demonstrates how keyof now reflects the presence of a numeric index signature by including type number in the key type. It shows how mapped types like Readonly work correctly with numeric index signatures.

LANGUAGE: typescript
CODE:
type Arrayish<T> = {
  length: number;
  [x: number]: T;
};

type ReadonlyArrayish<T> = Readonly<Arrayish<T>>;

declare const map: ReadonlyArrayish<string>;
let n = map.length;
let x = map[123]; // Previously of type any (or an error with --noImplicitAny)

----------------------------------------

TITLE: Incorrect Usage of ReturnType with Function Name
DESCRIPTION: Shows an error when trying to use ReturnType directly with a function name instead of its type.

LANGUAGE: typescript
CODE:
// @errors: 2749
function f() {
  return { x: 10, y: 3 };
}
type P = ReturnType<f>;

----------------------------------------

TITLE: Using Unknown Type in TypeScript Catch Clause
DESCRIPTION: Demonstrates how to use unknown type annotation in catch clauses for safer error handling. The code shows type checking before accessing error properties, ensuring more robust error handling patterns.

LANGUAGE: typescript
CODE:
// @useUnknownInCatchVariables
try {
  // ...
} catch (err: unknown) {
  // We have to verify err is an
  // error before using it as one.
  if (err instanceof Error) {
    console.log(err.message);
  }
}

----------------------------------------

TITLE: Building TSConfig Reference Documentation
DESCRIPTION: Commands for generating JSON data and markdown documentation for the TSConfig reference.

LANGUAGE: sh
CODE:
pnpm run --filter=tsconfig-reference generate-json

pnpm run --filter=tsconfig-reference generate-markdown

----------------------------------------

TITLE: TypeScript Test File Example
DESCRIPTION: Example test file showing how to import and test a module from the src directory

LANGUAGE: typescript
CODE:
// converter-tests.ts
import * as converter from "../src/converter";

assert.areEqual(converter.celsiusToFahrenheit(0), 32);

----------------------------------------

TITLE: Declaring ambient modules in TypeScript
DESCRIPTION: Shows how to declare an ambient module in a script (non-module) file to represent a module that exists in the runtime but has no corresponding file.

LANGUAGE: typescript
CODE:
declare module "path" {
  export function normalize(p: string): string;
  export function join(...paths: any[]): string;
  export var sep: string;
}

----------------------------------------

TITLE: Generated Source Map JSON Structure
DESCRIPTION: The JSON structure of the generated source map file (.js.map) that maps the compiled JavaScript back to the original TypeScript source.

LANGUAGE: json
CODE:
{
  "version": 3,
  "file": "ex.js",
  "sourceRoot": "",
  "sources": ["../ex.ts"],
  "names": [],
  "mappings": ";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA"
}

----------------------------------------

TITLE: Setting up TypeScript ATA with Callbacks
DESCRIPTION: Demonstrates how to initialize and configure the Automatic Type Acquisition (ATA) system with progress tracking and file handling callbacks.

LANGUAGE: typescript
CODE:
// Create the function for running ATA with a series of callbacks
const ata = setupTypeAcquisition({
  projectName: "My ATA Project",
  typescript: ts,
  logger: console,
  delegate: {
    receivedFile: (code: string, path: string) => {
      // Add code to your runtime at the path...
    },
    started: () => {
      console.log("ATA start")
    },
    progress: (downloaded: number, total: number) => {
      console.log(`Got ${downloaded} out of ${total}`)
    },
    finished: vfs => {
      console.log("ATA done", vfs)
    },
  },
})

// Run that function with the new sourcefile
ata(`import danger from "danger"`)

----------------------------------------

TITLE: Configuring MSBuild for TypeScript
DESCRIPTION: MSBuild project configuration for TypeScript integration, including compiler options and build properties.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Include default props at the top -->
  <Import
      Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props"
      Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props')" />

  <!-- TypeScript configurations go here -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <TypeScriptRemoveComments>false</TypeScriptRemoveComments>
    <TypeScriptSourceMap>true</TypeScriptSourceMap>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <TypeScriptRemoveComments>true</TypeScriptRemoveComments>
    <TypeScriptSourceMap>false</TypeScriptSourceMap>
  </PropertyGroup>

  <!-- Include default targets at the bottom -->
  <Import
      Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets"
      Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets')" />
</Project>

----------------------------------------

TITLE: Using generic type arguments in tagged templates in TypeScript
DESCRIPTION: This snippet shows how to use generic type arguments with tagged template strings in TypeScript 2.9. It demonstrates both successful type inference and a case where inference fails due to conflicting candidates.

LANGUAGE: typescript
CODE:
declare function styledComponent<Props>(
  strs: TemplateStringsArray
): Component<Props>;

interface MyProps {
  name: string;
  age: number;
}

styledComponent<MyProps>`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`;

declare function tag<T>(strs: TemplateStringsArray, ...args: T[]): T;

// inference fails because 'number' and 'string' are both candidates that conflict
let a = tag<string | number>`${100} ${"hello"}`;

----------------------------------------

TITLE: Using typeof Operator in JavaScript Expression Context
DESCRIPTION: Demonstrates the use of the typeof operator in a JavaScript expression context to determine the type of a string literal.

LANGUAGE: typescript
CODE:
// Prints "string"
console.log(typeof "Hello world");

----------------------------------------

TITLE: Configuring traceResolution in TypeScript
DESCRIPTION: Shows how to enable the traceResolution compiler option which causes TypeScript to log information about the module resolution process for each file. This is useful for debugging why modules aren't being properly included.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "traceResolution": true
  }
}

----------------------------------------

TITLE: Schema Store Update Commands
DESCRIPTION: Shell commands for forking, updating, and submitting a pull request to update the tsconfig.json schema in the SchemaStore repository.

LANGUAGE: bash
CODE:
# Clone a copy and move in new file
gh repo clone https://github.com/SchemaStore/schemastore.git /tmp/schemastore
cp packages/tsconfig-reference/scripts/schema/result/schema.json /tmp/schemastore/src/schemas/json/tsconfig.json

# Go in and set up the changes
cd /tmp/schemastore
gh repo fork
git add .
git commit -m "Update tsconfig.json schema"

# Validate it didn't break
cd src
npm ci
npm run build

# Shippit
gh pr create --web

----------------------------------------

TITLE: Parameter Property Error with erasableSyntaxOnly
DESCRIPTION: Demonstrates how the --erasableSyntaxOnly flag errors on parameter properties in class constructors, which have runtime behavior that cannot be easily erased.

LANGUAGE: typescript
CODE:
class C {
    constructor(public x: number) { }
    //          ~~~~~~~~~~~~~~~~
    // error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
    }
}

----------------------------------------

TITLE: Demonstrating strictBindCallApply Enabled in TypeScript
DESCRIPTION: This snippet shows how TypeScript enforces strict type checking for the 'call' method when 'strictBindCallApply' is enabled. It catches type mismatches in function arguments.

LANGUAGE: typescript
CODE:
// @strictBindCallApply: true
// @errors: 2345

// With strictBindCallApply on
function fn(x: string) {
  return parseInt(x);
}

const n1 = fn.call(undefined, "10");

const n2 = fn.call(undefined, false);

----------------------------------------

TITLE: Building TSConfig JSON Schema
DESCRIPTION: Command to build the JSON schema for TSConfig files using the tsconfig-reference package.

LANGUAGE: sh
CODE:
pnpm run --filter=tsconfig-reference build

----------------------------------------

TITLE: TypeScript Editor Type Checking Example
DESCRIPTION: Demonstrates TypeScript's static type system providing editor tooling support when accessing undefined properties on an object.

LANGUAGE: typescript
CODE:
const shop = {
  name: "Table Store",
  address: "Maplewood",
};

shop.a;

----------------------------------------

TITLE: Defining Properties on Function Declarations in TypeScript 3.1
DESCRIPTION: This example demonstrates the ability to define properties on function declarations in TypeScript 3.1. It shows a readImage function with an additional sync property that provides synchronous functionality.

LANGUAGE: typescript
CODE:
function readImage(path: string, callback: (err: any, image: Image) => void) {
  // ...
}

readImage.sync = (path: string) => {
  const contents = fs.readFileSync(path);
  return decodeImageSync(contents);
};

----------------------------------------

TITLE: Declaring Untyped Module in TypeScript
DESCRIPTION: Quick declaration to silence TypeScript warnings for modules without type definitions by declaring them as type any.

LANGUAGE: typescript
CODE:
declare module "some-untyped-module";

----------------------------------------

TITLE: Demonstrating Excess Property Error in TypeScript Object Literal
DESCRIPTION: Shows an example of an excess property error when assigning an object literal with an extra property 'm' to a type that only expects 'x' and 'y' properties.

LANGUAGE: typescript
CODE:
// @errors: 2322
type Point = { x: number; y: number };
const p: Point = { x: 1, y: 3, m: 10 };

----------------------------------------

TITLE: Defining TypeScript CLI Help Command Properties
DESCRIPTION: This snippet defines properties for the TypeScript CLI help command. It specifies the display name and a one-line description of the command's functionality.

LANGUAGE: typescript
CODE:
---
display: "Help"
oneline: "Gives local information for help on the CLI."
---

----------------------------------------

TITLE: Rebuilding Internal Site Dependencies in TypeScript Project
DESCRIPTION: This snippet shows the commands to rebuild all internal site dependencies when modules are not built correctly. It uses pnpm for package management and build processes.

LANGUAGE: bash
CODE:
pnpm bootstrap
pnpm build

----------------------------------------

TITLE: Creating a Generic Logging Identity Function in TypeScript
DESCRIPTION: Shows how to create a generic function that works with arrays of any type, logging the length before returning the array.

LANGUAGE: typescript
CODE:
function loggingIdentity<Type>(arg: Type[]): Type[] {
  console.log(arg.length);
  return arg;
}

----------------------------------------

TITLE: Arrow Function Transformation Example
DESCRIPTION: Demonstrates how TypeScript transforms modern arrow functions to traditional function expressions when targeting older JavaScript versions

LANGUAGE: typescript
CODE:
() => this

LANGUAGE: javascript
CODE:
function() { return this; }

----------------------------------------

TITLE: Generating TSConfig Reference Documentation
DESCRIPTION: Commands to generate JSON and markdown documentation for the TSConfig reference, including steps to validate the generated docs.

LANGUAGE: sh
CODE:
# Generate JSON from the typescript cli
pnpm run --filter=tsconfig-reference generate-json
# Jams them all into a single file
pnpm run --filter=tsconfig-reference generate-markdown

# Validate the docs:
pnpm run --filter=tsconfig-reference test

# or to just run the linter without a build
pnpm run --filter=tsconfig-reference lint

# or to just one one linter for a single doc
pnpm run --filter=tsconfig-reference lint resolveJson

----------------------------------------

TITLE: Defining and Using Const Enums in TypeScript
DESCRIPTION: This snippet demonstrates how to define and use a const enum in TypeScript. It shows a simple enum definition for Album types and basic usage in conditional logic.

LANGUAGE: typescript
CODE:
const enum Album {
  JimmyEatWorldFutures = 1,
  TubRingZooHypothesis = 2,
  DogFashionDiscoAdultery = 3,
}

const selectedAlbum = Album.JimmyEatWorldFutures;
if (selectedAlbum === Album.JimmyEatWorldFutures) {
  console.log("That is a great choice.");
}

----------------------------------------

TITLE: Demonstrating Union Type Call Restrictions in TypeScript Pre-3.3
DESCRIPTION: Shows how TypeScript versions before 3.3 handled calling union types with identical parameter lists, resulting in an error even for valid cases.

LANGUAGE: typescript
CODE:
type Fruit = "apple" | "orange";
type Color = "red" | "orange";

type FruitEater = (fruit: Fruit) => number; // eats and ranks the fruit
type ColorConsumer = (color: Color) => string; // consumes and describes the colors

declare let f: FruitEater | ColorConsumer;

// Cannot invoke an expression whose type lacks a call signature.
//   Type 'FruitEater | ColorConsumer' has no compatible call signatures.ts(2349)
f("orange");

----------------------------------------

TITLE: Illustrating structural typing in TypeScript
DESCRIPTION: Demonstrates how TypeScript uses structural typing to determine type compatibility.

LANGUAGE: typescript
CODE:
let o = { x: "hi", extra: 1 }; // ok
let o2: { x: string } = o; // ok

----------------------------------------

TITLE: Defining Internal and Exported Functions in TypeScript
DESCRIPTION: This snippet demonstrates the use of @internal JSDoc comment and how it affects the exported functions. It defines an internal constant 'daysInAWeek' and an exported function 'weeklySalary'.

LANGUAGE: typescript
CODE:
/**
 * Days available in a week
 * @internal
 */
export const daysInAWeek = 7;

/** Calculate how much someone earns in a week */
export function weeklySalary(dayRate: number) {
  return daysInAWeek * dayRate;
}

----------------------------------------

TITLE: Basic TypeScript Tuple Example Without Twoslash
DESCRIPTION: A basic TypeScript example showing tuple type declaration and initialization without Twoslash integration.

LANGUAGE: typescript
CODE:
// Declare a tuple type
let x: [string, number];

// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error

----------------------------------------

TITLE: Setting Up Internationalization for a TypeScript React Page
DESCRIPTION: This code snippet shows how to set up internationalization for a TypeScript React page using the Intl component. It demonstrates wrapping a component with Intl and passing the locale from page context.

LANGUAGE: typescript
CODE:
export default (props: Props) => (
  <Intl locale={props.pageContext.lang}>
    <Comm {...props} />
  </Intl>
)

----------------------------------------

TITLE: Object Spread and Rest in TypeScript
DESCRIPTION: Demonstrates how to use object spread and rest operators for object manipulation and destructuring.

LANGUAGE: typescript
CODE:
let copy = { ...original };

let merged = { ...foo, ...bar, ...baz };

let obj = { x: 1, y: "string" };
var newObj = { ...obj, z: 3, y: 4 }; // { x: number, y: number, z: number }

let obj = { x: 1, y: 1, z: 1 };
let { z, ...obj1 } = obj;
obj1; // {x: number, y:number};

----------------------------------------

TITLE: Configuring Type Acquisition Exclusions in TypeScript JSON Configuration
DESCRIPTION: This snippet demonstrates how to use the 'exclude' option within the 'typeAcquisition' configuration to prevent TypeScript from acquiring types for specific modules. In this example, 'jest' and 'mocha' are excluded from type acquisition, which can be useful for testing libraries not needed in the main application.

LANGUAGE: json
CODE:
{
  "typeAcquisition": {
    "exclude": ["jest", "mocha"]
  }
}

----------------------------------------

TITLE: Initializing TypeScript Website Project with pnpm
DESCRIPTION: Commands to clone the TypeScript website repository, install dependencies, and start the development server using pnpm. Includes optional steps for syncing translations.

LANGUAGE: sh
CODE:
git clone https://github.com/microsoft/TypeScript-website
cd TypeScript-website
pnpm install
code .

# Then:
pnpm bootstrap
# Optional, grab the translations:
pnpm docs-sync pull microsoft/TypeScript-Website-localizations#main 1

# Now you can start up the website
pnpm start

----------------------------------------

TITLE: Adding Custom TypeScript Compiler Flags in MSBuild
DESCRIPTION: Example of using TypeScriptAdditionalFlags to provide specific compiler flags that don't have a direct MSBuild property mapping.

LANGUAGE: xml
CODE:
<TypeScriptAdditionalFlags> $(TypeScriptAdditionalFlags) --noPropertyAccessFromIndexSignature</TypeScriptAdditionalFlags>

----------------------------------------

TITLE: Illustrating Preserved Computed Property Names in TypeScript Declaration Files
DESCRIPTION: This example shows how TypeScript 5.8 preserves computed property names in declaration files, allowing for more accurate type definitions.

LANGUAGE: typescript
CODE:
export let propName = "theAnswer";

export class MyClass {
    [propName] = 42;
}

----------------------------------------

TITLE: Adding the --noCheck Option in TypeScript 5.6
DESCRIPTION: TypeScript 5.6 introduces a new compiler option to skip type checking for all input files, useful for separating file generation from type-checking.



----------------------------------------

TITLE: Setting Module Detection in package.json
DESCRIPTION: Example showing how to set the type field in package.json to indicate a module.

LANGUAGE: json
CODE:
{
  "type": "module"
}

----------------------------------------

TITLE: YAML Frontmatter for TypeScript Type Checking Documentation
DESCRIPTION: YAML metadata block defining the display name for TypeScript type checking documentation section.

LANGUAGE: yaml
CODE:
---
display: "Type Checking"
---

----------------------------------------

TITLE: Defining rewriteRelativeImportExtensions Option in TypeScript
DESCRIPTION: This snippet shows the declaration of the 'rewriteRelativeImportExtensions' option in a TypeScript configuration file. It includes a display name and a brief description of the option's functionality.

LANGUAGE: typescript
CODE:
---
display: "rewriteRelativeImportExtensions"
oneline: "Does something"
---

----------------------------------------

TITLE: Configuring Watch Directory Options in TypeScript
DESCRIPTION: Specifies the available options for the 'watchDirectory' configuration in TypeScript. This setting determines how directories are monitored for changes, especially on systems without native recursive file-watching capabilities.

LANGUAGE: typescript
CODE:
{
  "watchDirectory": "fixedPollingInterval" | "dynamicPriorityPolling" | "useFsEvents"
}

----------------------------------------

TITLE: Configuring Sublime Text for TypeScript Nightly Build
DESCRIPTION: JSON configuration to set the TypeScript SDK path in Sublime Text user settings

LANGUAGE: json
CODE:
"typescript_tsdk": "<path to your folder>/node_modules/typescript/lib"

----------------------------------------

TITLE: Configuring TypeScript Fallback Polling Options
DESCRIPTION: Demonstrates the four available polling strategies that can be configured when native file watchers are unavailable. Each option provides different trade-offs between performance and resource usage.

LANGUAGE: typescript
CODE:
{
  "watchOptions": {
    "fallbackPolling": "fixedPollingInterval" | "priorityPollingInterval" | "dynamicPriorityPolling" | "synchronousWatchDirectory"
  }
}

----------------------------------------

TITLE: Supporting Arbitrary Module Identifiers in TypeScript 5.6
DESCRIPTION: TypeScript 5.6 now allows the use of arbitrary string literals as module identifiers in import and export statements.

LANGUAGE: typescript
CODE:
const banana = "🍌";

export { banana as "🍌" };

import { "🍌" as banana } from "./foo"

/**
 * om nom nom
 */
function eat(food: string) {
    console.log("Eating", food);
};

eat(banana);

----------------------------------------

TITLE: Configuring listFiles in TypeScript tsconfig.json
DESCRIPTION: This snippet shows how to enable the 'listFiles' option in the TypeScript configuration file (tsconfig.json). When set to true, it instructs the TypeScript compiler to print the names of all files read during compilation.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "listFiles": true
  }
}

----------------------------------------

TITLE: Setting Display Property for Emit in YAML
DESCRIPTION: YAML configuration setting that defines the display value for the Emit property in TypeScript configuration documentation.

LANGUAGE: yaml
CODE:
---
display: "Emit"
---

----------------------------------------

TITLE: Distributive Conditional Types in TypeScript
DESCRIPTION: Explains how conditional types distribute over union types and how to prevent this behavior when needed.

LANGUAGE: typescript
CODE:
type ToArray<Type> = Type extends any ? Type[] : never;

type StrArrOrNumArr = ToArray<string | number>;

type ToArrayNonDist<Type> = [Type] extends [any] ? Type[] : never;

type ArrOfStrOrNum = ToArrayNonDist<string | number>;

----------------------------------------

TITLE: Defining TypeScript Completeness Display Setting
DESCRIPTION: YAML configuration that sets the display property to 'Completeness' for TypeScript configuration purposes.

LANGUAGE: yaml
CODE:
---
display: "Completeness"
---

----------------------------------------

TITLE: Installing TypeScript Nightly Build via npm
DESCRIPTION: Command to install the nightly build of TypeScript using npm package manager

LANGUAGE: shell
CODE:
npm install -D typescript@next

----------------------------------------

TITLE: Configuring Incremental Builds in TypeScript
DESCRIPTION: Shows how to enable incremental compilation using the --incremental flag in tsconfig.json. This configuration tells TypeScript to save build information for faster subsequent compilations.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    "incremental": true,
    "outDir": "./lib"
  },
  "include": ["./src"]
}

----------------------------------------

TITLE: Const Assertions in JSDoc
DESCRIPTION: Example of using const assertions in JSDoc comments for JavaScript files.

LANGUAGE: javascript
CODE:
// type is { prop: string }
let a = { prop: "hello" };

// type is { readonly prop: "hello" }
let b = /** @type {const} */ ({ prop: "hello" });

----------------------------------------

TITLE: Importing File with Incorrect Casing in TypeScript
DESCRIPTION: This snippet demonstrates an example of importing a file with inconsistent casing, which can lead to issues in case-sensitive file systems. The option 'Force Consistent Casing In File Names' helps prevent such problems.

LANGUAGE: typescript
CODE:
import { FileManager } from "./FileManager.ts";

----------------------------------------

TITLE: Defining Display Name for Backwards Compatibility in TypeScript
DESCRIPTION: This YAML-like snippet defines the display name for the backwards compatibility configuration section in TypeScript. It sets the display property to 'Backwards Compatibility', which is likely used in documentation or configuration interfaces.

LANGUAGE: yaml
CODE:
---
display: "Backwards Compatibility"
---

----------------------------------------

TITLE: Importing Class Module Example
DESCRIPTION: Example showing how to import and use a class-based module in TypeScript

LANGUAGE: typescript
CODE:
const Greeter = require("super-greeter");

const greeter = new Greeter();
greeter.greet();

----------------------------------------

TITLE: TypeScript Language Service Interface Definition
DESCRIPTION: Provides the interface definition for the TypeScript Language Service, showing available methods for code analysis and manipulation.

LANGUAGE: typescript
CODE:
interface LanguageService {
    cleanupSemanticCache(): void;
    getSyntacticDiagnostics(fileName: string): DiagnosticWithLocation[];
    getSemanticDiagnostics(fileName: string): Diagnostic[];
    getSuggestionDiagnostics(fileName: string): DiagnosticWithLocation[];
    getCompilerOptionsDiagnostics(): Diagnostic[];
    getEncodedSyntacticClassifications(fileName: string, span: TextSpan): Classifications;
    getEncodedSemanticClassifications(fileName: string, span: TextSpan): Classifications;
    getCompletionsAtPosition(fileName: string, position: number, options: GetCompletionsAtPositionOptions | undefined): WithMetadata<CompletionInfo> | undefined;
    getCompletionEntryDetails(fileName: string, position: number, name: string, formatOptions: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, preferences: UserPreferences | undefined): CompletionEntryDetails | undefined;
    getCompletionEntrySymbol(fileName: string, position: number, name: string, source: string | undefined): Symbol | undefined;
    getQuickInfoAtPosition(fileName: string, position: number): QuickInfo | undefined;
    getNameOrDottedNameSpan(fileName: string, startPos: number, endPos: number): TextSpan | undefined;
    getBreakpointStatementAtPosition(fileName: string, position: number): TextSpan | undefined;
    getSignatureHelpItems(fileName: string, position: number, options: SignatureHelpItemsOptions | undefined): SignatureHelpItems | undefined;
    getRenameInfo(fileName: string, position: number, options?: RenameInfoOptions): RenameInfo;
    findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean): readonly RenameLocation[] | undefined;
    getSmartSelectionRange(fileName: string, position: number): SelectionRange;
    getDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;
    getDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfoAndBoundSpan | undefined;
    getTypeDefinitionAtPosition(fileName: string, position: number): readonly DefinitionInfo[] | undefined;
    getImplementationAtPosition(fileName: string, position: number): readonly ImplementationLocation[] | undefined;
    getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[] | undefined;
    findReferences(fileName: string, position: number): ReferencedSymbol[] | undefined;
    getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): DocumentHighlights[] | undefined;
    getNavigateToItems(searchValue: string, maxResultCount?: number, fileName?: string, excludeDtsFiles?: boolean): NavigateToItem[];
    getNavigationBarItems(fileName: string): NavigationBarItem[];
    getNavigationTree(fileName: string): NavigationTree;
    getOutliningSpans(fileName: string): OutliningSpan[];
    getTodoComments(fileName: string, descriptors: TodoCommentDescriptor[]): TodoComment[];
    getBraceMatchingAtPosition(fileName: string, position: number): TextSpan[];
    getIndentationAtPosition(fileName: string, position: number, options: EditorOptions | EditorSettings): number;
    getFormattingEditsForRange(fileName: string, start: number, end: number, options: FormatCodeOptions | FormatCodeSettings): TextChange[];
    getFormattingEditsForDocument(fileName: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];
    getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, options: FormatCodeOptions | FormatCodeSettings): TextChange[];
    getDocCommentTemplateAtPosition(fileName: string, position: number): TextInsertion | undefined;
    isValidBraceCompletionAtPosition(fileName: string, position: number, openingBrace: number): boolean;
    getJsxClosingTagAtPosition(fileName: string, position: number): JsxClosingTagInfo | undefined;
    getSpanOfEnclosingComment(fileName: string, position: number, onlyMultiLine: boolean): TextSpan | undefined;
    toLineColumnOffset(fileName: string, position: number): LineAndCharacter;
    getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: readonly number[], formatOptions: FormatCodeSettings, preferences: UserPreferences): readonly CodeFixAction[];
    getCombinedCodeFix(scope: CombinedCodeFixScope, fixId: {}, formatOptions: FormatCodeSettings, preferences: UserPreferences): CombinedCodeActions;
    applyCodeActionCommand(action: CodeActionCommand, formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult>;
    applyCodeActionCommand(action: CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult[]>;
    applyCodeActionCommand(action: CodeActionCommand | CodeActionCommand[], formatSettings?: FormatCodeSettings): Promise<ApplyCodeActionCommandResult | ApplyCodeActionCommandResult[]>;
    getApplicableRefactors(fileName: string, positionOrRange: number | TextRange, preferences: UserPreferences | undefined): ApplicableRefactorInfo[];
    getEditsForRefactor(fileName: string, formatOptions: FormatCodeSettings, positionOrRange: number | TextRange, refactorName: string, actionName: string, preferences: UserPreferences | undefined): RefactorEditInfo | undefined;
    organizeImports(scope: OrganizeImportsScope, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];
    getEditsForFileRename(oldFilePath: string, newFilePath: string, formatOptions: FormatCodeSettings, preferences: UserPreferences | undefined): readonly FileTextChanges[];
    getEmitOutput(fileName: string, emitOnlyDtsFiles?: boolean, forceDtsEmit?: boolean): EmitOutput;
    getProgram(): Program | undefined;
}

----------------------------------------

TITLE: JavaScript Property Access Example
DESCRIPTION: Demonstrates JavaScript's behavior when accessing nonexistent properties, resulting in unexpected calculations.

LANGUAGE: javascript
CODE:
const obj = { width: 10, height: 15 };
// Why is this NaN? Spelling is hard!
const area = obj.width * obj.heigth;

----------------------------------------

TITLE: Demonstrating Unreachable Code in TypeScript
DESCRIPTION: This snippet shows a function with unreachable code. The last return statement will never be executed due to the if-else structure.

LANGUAGE: typescript
CODE:
function fn(n: number) {
  if (n > 5) {
    return true;
  } else {
    return false;
  }
  return true;
}

----------------------------------------

TITLE: Improved Union Type Handling in TypeScript 3.3
DESCRIPTION: Demonstrates how TypeScript 3.3 improves handling of union types by allowing calls when parameters intersect, returning union of return types.

LANGUAGE: typescript
CODE:
type Fruit = "apple" | "orange";
type Color = "red" | "orange";

type FruitEater = (fruit: Fruit) => number; // eats and ranks the fruit
type ColorConsumer = (color: Color) => string; // consumes and describes the colors

declare let f: FruitEater | ColorConsumer;

f("orange"); // It works! Returns a 'number | string'.

f("apple"); // error - Argument of type '"apple"' is not assignable to parameter of type '"orange"'.

f("red"); // error - Argument of type '"red"' is not assignable to parameter of type '"orange"'.

----------------------------------------

TITLE: Demonstrating Unsupported TypeScript Constructs
DESCRIPTION: Shows examples of TypeScript-specific syntax that is not supported when running TypeScript files directly in Node.js with type stripping. Includes import aliases, namespaces with runtime code, parameter properties, and enum declarations.

LANGUAGE: typescript
CODE:
// ❌ error: An `import ... = require(...)` alias
import foo = require("foo");

// ❌ error: A namespace with runtime code.
namespace container {
    foo.method();

    export type Bar = string;
}

// ❌ error: An `import =` alias
import Bar = container.Bar;

class Point {
    // ❌ error: Parameter properties
    constructor(public x: number, public y: number) { }
}

// ❌ error: An `export =` assignment.
export = Point;

// ❌ error: An enum declaration.
enum Direction {
    Up,
    Down,
    Left,
    Right,
}

----------------------------------------

TITLE: Configuring Advanced Display Settings in YAML
DESCRIPTION: YAML configuration block that sets display property to 'Advanced', typically used for TypeScript debugging and configuration purposes.

LANGUAGE: yaml
CODE:
---
display: "Advanced"
---

----------------------------------------

TITLE: Splitting TypeScript Namespaces Across Files
DESCRIPTION: Demonstrates how to split a namespace across multiple files using reference tags. This approach allows for better code organization in larger projects while maintaining a single logical namespace.

LANGUAGE: typescript
CODE:
// Validation.ts
namespace Validation {
  export interface StringValidator {
    isAcceptable(s: string): boolean;
  }
}

// LettersOnlyValidator.ts
/// <reference path="Validation.ts" />
namespace Validation {
  const lettersRegexp = /^[A-Za-z]+$/;
  export class LettersOnlyValidator implements StringValidator {
    isAcceptable(s: string) {
      return lettersRegexp.test(s);
    }
  }
}

// ZipCodeValidator.ts
/// <reference path="Validation.ts" />
namespace Validation {
  const numberRegexp = /^[0-9]+$/;
  export class ZipCodeValidator implements StringValidator {
    isAcceptable(s: string) {
      return s.length === 5 && numberRegexp.test(s);
    }
  }
}

// Test.ts
/// <reference path="Validation.ts" />
/// <reference path="LettersOnlyValidator.ts" />
/// <reference path="ZipCodeValidator.ts" />

// Some samples to try
let strings = ["Hello", "98052", "101"];

// Validators to use
let validators: { [s: string]: Validation.StringValidator } = {};
validators["ZIP code"] = new Validation.ZipCodeValidator();
validators["Letters only"] = new Validation.LettersOnlyValidator();

// Show whether each string passed each validator
for (let s of strings) {
  for (let name in validators) {
    console.log(
      `"${s}" - ${
        validators[name].isAcceptable(s) ? "matches" : "does not match"
      } ${name}`
    );
  }
}

----------------------------------------

TITLE: Loading Example Code in TypeScript Playground
DESCRIPTION: Shows how to load a specific example in the TypeScript Playground using its ID.

LANGUAGE: typescript
CODE:
#example/generic-functions

----------------------------------------

TITLE: Testing and Linting TSConfig Documentation
DESCRIPTION: Commands for validating codeblocks using twoslash and running linting operations, with optional debugging support

LANGUAGE: sh
CODE:
pnpm run --filter=tsconfig-reference test

# or to just run the linter without a build
pnpm run --filter=tsconfig-reference lint

# or to just one one linter
pnpm run --filter=tsconfig-reference lint resolveJson

----------------------------------------

TITLE: Default Const Enum Behavior in TypeScript Compilation
DESCRIPTION: This snippet shows the default behavior of const enum compilation in TypeScript. The enum references are replaced with their corresponding number literals, and the enum declaration is removed from the generated JavaScript.

LANGUAGE: typescript
CODE:
const enum Album {
  JimmyEatWorldFutures = 1,
  TubRingZooHypothesis = 2,
  DogFashionDiscoAdultery = 3,
}

const selectedAlbum = Album.JimmyEatWorldFutures;
if (selectedAlbum === Album.JimmyEatWorldFutures) {
  console.log("That is a great choice.");
}

----------------------------------------

TITLE: Using Constant-Named Properties with Numeric and String Literals in TypeScript
DESCRIPTION: Shows how to use constant-named properties with numeric and string literals in TypeScript 2.7.

LANGUAGE: typescript
CODE:
const Foo = "Foo";
const Bar = "Bar";

let x = {
  [Foo]: 100,
  [Bar]: "hello"
};

let a = x[Foo]; // has type 'number'
let b = x[Bar]; // has type 'string'

----------------------------------------

TITLE: Changelog Entry - Version 0.1.6
DESCRIPTION: Documents patch changes updating @typescript/vfs dependency to version 1.6.0

LANGUAGE: markdown
CODE:
## 0.1.6

### Patch Changes

- Updated dependencies [[`441338c`](https://github.com/microsoft/TypeScript-Website/commit/441338c04fbbef834ffa1ac6dc0dc8816e9137fc), [`725841a`](https://github.com/microsoft/TypeScript-Website/commit/725841adc9e5b734ccb0663fccb2ba05d0dcca62)]:
  - @typescript/vfs@1.6.0

----------------------------------------

TITLE: Configuring Visual Studio 2015 for TypeScript Nightly Build
DESCRIPTION: PowerShell command to configure Visual Studio 2015 to use TypeScript nightly build

LANGUAGE: powershell
CODE:
VSDevMode.ps1 14 -tsScript <path to your folder>/node_modules/typescript/lib

----------------------------------------

TITLE: Configuring Custom lib Package in package.json
DESCRIPTION: Example of configuring a custom lib package in package.json to override TypeScript's built-in DOM types.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@typescript/lib-dom": "npm:@types/web"
  }
}

----------------------------------------

TITLE: TypeScript Emit Output with Declare Keyword
DESCRIPTION: Shows how TypeScript emits JavaScript code when using the 'declare' keyword. The declaration is removed in the output as it's only used for type checking.

LANGUAGE: typescript
CODE:
ghost.boo();

----------------------------------------

TITLE: Adding New Example Sections in TypeScript Project
DESCRIPTION: This snippet outlines the process for adding a new example section to the TypeScript example code project. It involves creating folders, editing the generateTOC.js file, and optionally setting custom ordering for subsections.

LANGUAGE: plaintext
CODE:
Create a folder in this repo, then sub-folders per section. Next,
edit `generateTOC.js` with at the set of folders it should grab
at around line 30, then edit the `const toc` further down to
add a new section. If you need custom ordering then use the
`sortedSubSections` array to set your order.

----------------------------------------

TITLE: Customizing Build Info File Location
DESCRIPTION: Demonstrates how to customize the location and name of the .tsbuildinfo file using the tsBuildInfoFile option.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./buildcache/front-end",
    "outDir": "./lib"
  },
  "include": ["./src"]
}

----------------------------------------

TITLE: Demonstrating Strict Function Types in TypeScript
DESCRIPTION: This snippet shows how strict function types affect assignability of functions with different parameter types. It demonstrates contravariant checking for function parameters.

LANGUAGE: typescript
CODE:
declare let f1: (x: Animal) => void;
declare let f2: (x: Dog) => void;
declare let f3: (x: Cat) => void;
f1 = f2; // Error with --strictFunctionTypes
f2 = f1; // Ok
f2 = f3; // Error

----------------------------------------

TITLE: Path Reference for TOC Generation Script
DESCRIPTION: Link reference for the table of contents generation script.

LANGUAGE: markdown
CODE:
[`scripts/generateTOC.js`](scripts/generateTOC.js)

----------------------------------------

TITLE: Configuring VS Code for TypeScript Nightly Build
DESCRIPTION: JSON configuration to set the TypeScript SDK path in VS Code workspace settings

LANGUAGE: json
CODE:
"typescript.tsdk": "<path to your folder>/node_modules/typescript/lib"

----------------------------------------

TITLE: Error Example: Importing without allowSyntheticDefaultImports
DESCRIPTION: Illustrates an error scenario when trying to use default import syntax without 'allowSyntheticDefaultImports' enabled. This example includes a JavaScript module and a TypeScript file attempting to import it.

LANGUAGE: typescript
CODE:
// @errors: 1259 1192
// @checkJs
// @allowJs
// @esModuleInterop: false
// @filename: utilFunctions.js
// @noImplicitAny: false
const getStringLength = (str) => str.length;

module.exports = {
  getStringLength,
};

// @filename: index.ts
import utils from "./utilFunctions";

const count = utils.getStringLength("Check JS");

----------------------------------------

TITLE: Defining a Typed Variable in TypeScript
DESCRIPTION: This snippet demonstrates how to define a string variable with explicit type annotation in TypeScript. This code cannot run directly in a JavaScript runtime without compilation.

LANGUAGE: typescript
CODE:
const hello: string = "Hello world";

----------------------------------------

TITLE: Configuring YAML Metadata for JavaScript Runtime
DESCRIPTION: YAML front matter configuration block that specifies display name and tags for JavaScript runtime documentation.

LANGUAGE: yaml
CODE:
---
display: "JavaScript Runtime"
tags: javascript
---

----------------------------------------

TITLE: Implementing Angular Controller with Module Visibility in TypeScript
DESCRIPTION: Demonstrates the relaxed module visibility rules in TypeScript 1.1, specifically in an Angular context. Shows how TypeScript no longer strictly enforces type visibility in modules unless the declaration flag is set, which is particularly useful for Angular controller implementations.

LANGUAGE: typescript
CODE:
module MyControllers {
  interface ZooScope extends ng.IScope {
    animals: Animal[];
  }
  export class ZooController {
    // Used to be an error (cannot expose ZooScope), but now is only
    // an error when trying to generate .d.ts files
    constructor(public $scope: ZooScope) {}
    /* more code */
  }
}

----------------------------------------

TITLE: Handling Environment-Specific URLs in TypeScript
DESCRIPTION: Example code showing how to handle different URLs for development and production environments when loading external resources in a TypeScript Playground plugin.

LANGUAGE: typescript
CODE:
const isDev = document.location.host.includes("localhost")
const unpkgURL = "https://unpkg.com/typescript-playground-presentation-mode@latest/dist/slideshow.css"
const cssHref = isDev ? "http://localhost:5000/slideshow.css" : unpkgURL

----------------------------------------

TITLE: AMD Dependency Example in TypeScript
DESCRIPTION: Shows how to declare an AMD dependency with a custom name using the deprecated amd-dependency directive.

LANGUAGE: typescript
CODE:
/// <amd-dependency path="legacy/moduleA" name="moduleA"/>
declare var moduleA: MyType;
moduleA.callStuff();

----------------------------------------

TITLE: Testing and Linting TSConfig Documentation
DESCRIPTION: Commands for validating codeblocks using twoslash and running linting checks on the documentation.

LANGUAGE: sh
CODE:
pnpm run --filter=tsconfig-reference test

# or to just run the linter without a build
pnpm run --filter=tsconfig-reference lint

# or to just one one linter
pnpm run --filter=tsconfig-reference lint resolveJson

----------------------------------------

TITLE: Compiled Output of Async Function (ES5 Target)
DESCRIPTION: This snippet demonstrates the compiled JavaScript output when targeting ES5 without the 'noEmitHelpers' option. It shows the extensive helper functions generated to support async functionality in ES5.

LANGUAGE: typescript
CODE:
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        // Get API
        return [2 /*return*/, {}];
    });
}); };

----------------------------------------

TITLE: Using Optional Parameters in TypeScript Interfaces
DESCRIPTION: Shows how to use optional parameters in TypeScript interfaces instead of multiple overloads that differ only in trailing parameters.

LANGUAGE: typescript
CODE:
/* WRONG */
interface Example {
  diff(one: string): number;
  diff(one: string, two: string): number;
  diff(one: string, two: string, three: boolean): number;
}

LANGUAGE: typescript
CODE:
/* OK */
interface Example {
  diff(one: string, two?: string, three?: boolean): number;
}

----------------------------------------

TITLE: Adding Changesets for Package Version Management
DESCRIPTION: Example of using the pnpm changeset command to manage package version bumps and releases. Shows the interactive CLI for selecting packages to include in the changeset.

LANGUAGE: console
CODE:
$ pnpm changeset
🦋  Which packages would you like to include? … 
◯ changed packages
  ◯ create-typescript-playground-plugin
  ◯ @typescript/vfs
  ◯ @typescript/twoslash
  ◯ @typescript/sandbox
  ◯ @typescript/ata

----------------------------------------

TITLE: Using Declaration for Resource Management in TypeScript
DESCRIPTION: Introduces the using declaration for managing disposable resources in TypeScript, automatically calling the dispose method when the block is exited.

LANGUAGE: typescript
CODE:
function f() {
  using x = new C();
  doSomethingWith(x);
} // `x[Symbol.dispose]()` is called

----------------------------------------

TITLE: Using Declaration for Resource Management in TypeScript
DESCRIPTION: Introduces the using declaration for managing disposable resources in TypeScript, automatically calling the dispose method when the block is exited.

LANGUAGE: typescript
CODE:
function f() {
  using x = new C();
  doSomethingWith(x);
} // `x[Symbol.dispose]()` is called

----------------------------------------

TITLE: Updating TypeScript Version Override in package.json
DESCRIPTION: Configuration to set the TypeScript version used across the website by modifying the overrides field in the root package.json file.

LANGUAGE: json
CODE:
  "pnpm": {
    "overrides": {
      "typescript": "3.9.0",
    }
  }

----------------------------------------

TITLE: Configuring rootDirs in tsconfig.json
DESCRIPTION: This snippet shows how to configure rootDirs in a TypeScript project's tsconfig.json file. It allows multiple folders to be treated as a single root for module resolution.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "rootDirs": ["src/views", "generated/templates/views"]
  }
}

----------------------------------------

TITLE: Basic TypeScript Function Definition
DESCRIPTION: Simple TypeScript example showing a basic greeter function without type annotations

LANGUAGE: typescript
CODE:
function greeter(person) {
  return "Hello, " + person;
}

let user = "Jane User";

document.body.textContent = greeter(user);

----------------------------------------

TITLE: Implementing i18n in TypeScript React Navigation Component
DESCRIPTION: This snippet demonstrates the usage of i18n primitives (IntlLink and i("x")) in a React navigation component for the TypeScript website. It shows how to create internationalized links and text content.

LANGUAGE: tsx
CODE:
// prettier-ignore
<nav role="navigation">
  <ul>
    <li className="nav-item hide-small"><IntlLink to="/download">{i("nav_download")}</IntlLink></li>
    <li className="nav-item"><IntlLink to="/docs/home"><span>{i("nav_documentation_short")}</span></IntlLink></li>
    <li className="nav-item show-only-large"><IntlLink to="/docs/handbook/intro.html">{i("nav_handbook")}</IntlLink></li>
    <li className="nav-item"><IntlLink to="/community">{i("nav_community")}</IntlLink></li>
    <li className="nav-item show-only-largest"><IntlLink to="/play">{i("nav_playground")}</IntlLink></li>
    <li className="nav-item"><IntlLink to="/tools">{i("nav_tools")}</IntlLink></li>
  </ul>
</nav>

----------------------------------------

TITLE: Changelog Entry - Version 0.1.8
DESCRIPTION: Documents patch changes updating @typescript/vfs dependency to version 1.6.1

LANGUAGE: markdown
CODE:
## 0.1.8

### Patch Changes

- Updated dependencies [[`4a30b02`](https://github.com/microsoft/TypeScript-Website/commit/4a30b022bc0c1df6b6abb71c99c104f3b19f2c91)]:
  - @typescript/vfs@1.6.1

----------------------------------------

TITLE: Directory Path Reference in Markdown
DESCRIPTION: Markdown link syntax showing the location of the main pages directory in the project structure.

LANGUAGE: markdown
CODE:
[`src/templates/pages`](../templates/pages)

----------------------------------------

TITLE: Configuring Module Suffixes in tsconfig.json
DESCRIPTION: Demonstrates how to set up module suffix resolution in TypeScript compiler options. This configuration allows TypeScript to search for files with specific suffixes when resolving module imports.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "moduleSuffixes": [".ios", ".native", ""]
    }
}

----------------------------------------

TITLE: Demonstrating Implicit Any Index Error in TypeScript
DESCRIPTION: This snippet shows how TypeScript reports an error when indexing into an object with a string literal that doesn't exist as a key, when noImplicitAny and strict mode are enabled.

LANGUAGE: typescript
CODE:
// @noImplicitAny: true
// @suppressImplicitAnyIndexErrors: false
// @strict: true
// @errors: 7053
const obj = { x: 10 };
console.log(obj["foo"]);

----------------------------------------

TITLE: TypeScript Tuple Example With Twoslash Error Handling
DESCRIPTION: Twoslash example with explicit error code handling using @errors directive to acknowledge expected compiler errors.

LANGUAGE: typescript
CODE:
// @errors: 2322
// Declare a tuple type
let x: [string, number];

// Initialize it
x = ["hello", 10]; // OK
// Initialize it incorrectly
x = [10, "hello"]; // Error

----------------------------------------

TITLE: Emitting Declarations with stripInternal Set to False in TypeScript
DESCRIPTION: This snippet shows the default behavior when 'stripInternal' is set to false. Both the internal constant and the exported function are included in the generated declaration file.

LANGUAGE: typescript
CODE:
// @showEmittedFile: index.d.ts
// @showEmit
// @declaration
/**
 * Days available in a week
 * @internal
 */
export const daysInAWeek = 7;

/** Calculate how much someone earns in a week */
export function weeklySalary(dayRate: number) {
  return daysInAWeek * dayRate;
}

----------------------------------------

TITLE: React JSX Component Example
DESCRIPTION: Shows how to use JSX with React including type checking for component props.

LANGUAGE: typescript
CODE:
/// <reference path="react.d.ts" />

interface Props {
  name: string;
}

class MyComponent extends React.Component<Props, {}> {
  render() {
    return <span>{this.props.name}</span>;
  }
}

<MyComponent name="bar" />; // OK
<MyComponent name={0} />; // error, `name` is not a number

----------------------------------------

TITLE: Array Spread Example in JavaScript
DESCRIPTION: Shows how array spread syntax works with array holes and demonstrates the difference between spread and concat operations.

LANGUAGE: javascript
CODE:
let arrayWithHole = ['a', , 'c'];
let spread = [...arrayWithHole];
let concatenated = [].concat(arrayWithHole);

console.log(arrayWithHole)
// [ 'a', <1 empty item>, 'c' ]
console.log(spread)
// [ 'a', undefined, 'c' ]
console.log(concatenated)
// [ 'a', <1 empty item>, 'c' ]

----------------------------------------

TITLE: Retrieving Header IDs for Deprecation Redirects
DESCRIPTION: JavaScript code snippet to extract header IDs from a documentation page, used for creating deprecation redirect mappings.

LANGUAGE: javascript
CODE:
document.querySelectorAll(".markdown h2, .markdown h3").forEach(h => console.log(h.id))

----------------------------------------

TITLE: Using export = and import = require() in TypeScript
DESCRIPTION: Demonstrates the use of `export =` and `import = require()` syntax in TypeScript files when emitting CommonJS modules, which are direct analogs of `module.exports =` and `const mod = require()` in JavaScript.

LANGUAGE: typescript
CODE:
// @Filename: main.ts
import fs = require("fs");
export = fs.readFileSync("...");

// @Filename: main.js
"use strict";
const fs = require("fs");
module.exports = fs.readFileSync("...");

----------------------------------------

TITLE: Using export = and import = require() in TypeScript
DESCRIPTION: Demonstrates the use of `export =` and `import = require()` syntax in TypeScript files when emitting CommonJS modules, which are direct analogs of `module.exports =` and `const mod = require()` in JavaScript.

LANGUAGE: typescript
CODE:
// @Filename: main.ts
import fs = require("fs");
export = fs.readFileSync("...");

// @Filename: main.js
"use strict";
const fs = require("fs");
module.exports = fs.readFileSync("...");

----------------------------------------

TITLE: Directory Structure Example
DESCRIPTION: Shows a basic TypeScript project structure with a single index.ts file, package.json, and tsconfig.json.

LANGUAGE: sh
CODE:
example
├── index.ts
├── package.json
└── tsconfig.json

----------------------------------------

TITLE: Defining Async Function in TypeScript
DESCRIPTION: This snippet shows a simple async function definition in TypeScript. It demonstrates the basic structure of an async function that takes a URL as a parameter and returns an empty object.

LANGUAGE: typescript
CODE:
const getAPI = async (url: string) => {
  // Get API
  return {};
};

----------------------------------------

TITLE: TypeScript Module Import with Symlinks Example
DESCRIPTION: Demonstrates how TypeScript resolves module imports and reference directives when preserveSymlinks is enabled. References are resolved relative to the symlink location rather than the resolved path.

LANGUAGE: typescript
CODE:
import { something } from 'module';
/// <reference type="some-types" />

----------------------------------------

TITLE: Demonstrating Default Error Truncation in TypeScript
DESCRIPTION: This snippet shows the default behavior of TypeScript error messages, where long type descriptions are truncated. It defines a variable with a complex object type and attempts an invalid assignment to demonstrate the truncated error message.

LANGUAGE: typescript
CODE:
// @errors: 2322 2454
var x: {
  propertyWithAnExceedinglyLongName1: string;
  propertyWithAnExceedinglyLongName2: string;
  propertyWithAnExceedinglyLongName3: string;
  propertyWithAnExceedinglyLongName4: string;
  propertyWithAnExceedinglyLongName5: string;
  propertyWithAnExceedinglyLongName6: string;
  propertyWithAnExceedinglyLongName7: string;
  propertyWithAnExceedinglyLongName8: string;
};

// String representation of type of 'x' should be truncated in error message
var s: string = x;

----------------------------------------

TITLE: TypeScript Output Without Source Map
DESCRIPTION: Shows the JavaScript output of the TypeScript code without source map integration.

LANGUAGE: typescript
CODE:
const helloWorld = "hi";
console.log(helloWorld);

----------------------------------------

TITLE: CSS Style Definition Example
DESCRIPTION: Example CSS file containing style definitions that will be imported in TypeScript

LANGUAGE: css
CODE:
/* app.css */
.cookie-banner {
  display: none;
}

----------------------------------------

TITLE: TSConfig Documentation Generation Pipeline
DESCRIPTION: Shows the data flow from TypeScript compiler through JSON generation to final markdown output

LANGUAGE: sh
CODE:
TypeScript Compiler + `tsconfigRules.ts` -> `generateJSON.ts` -> JSON (in output) -> `generateMarkdown.ts` -> Markdown (in output)

----------------------------------------

TITLE: TypeScript Reference Examples
DESCRIPTION: Demonstrates the correct and incorrect ways to reference type dependencies in declaration files.

LANGUAGE: typescript
CODE:
/// <reference path="../typescript/lib/typescriptServices.d.ts" />
....

LANGUAGE: typescript
CODE:
/// <reference types="typescript" />
....