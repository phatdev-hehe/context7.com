TITLE: Configuring Multiple Themes in daisyUI
DESCRIPTION: Demonstrates how to enable multiple themes with default and dark mode preferences in daisyUI configuration.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  themes: nord --default, abyss --prefersdark, cupcake, dracula;
}

----------------------------------------

TITLE: Implementing UI with Semantic Colors in HTML
DESCRIPTION: Example demonstrating the use of DaisyUI's semantic color classes for automatic dark mode support and flexible theming capabilities.

LANGUAGE: html
CODE:
<div class="bg-base-200">
  <div class="bg-base-100 border-base-300 text-base-content">
    This is dark text on a light background,
    which switches to light text on a dark background in dark mode.
  </div>
</div>

----------------------------------------

TITLE: Installing PostCSS, Tailwind CSS, and daisyUI via npm
DESCRIPTION: This command installs the necessary dependencies for using PostCSS, Tailwind CSS, and daisyUI in a Node.js project.

LANGUAGE: sh
CODE:
npm i postcss postcss-cli tailwindcss @tailwindcss/postcss daisyui@latest

----------------------------------------

TITLE: Basic Button Implementation - DaisyUI
DESCRIPTION: Simple button implementation using DaisyUI's btn class.

LANGUAGE: html
CODE:
<button class="$$btn">Default</button>

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS and React
DESCRIPTION: This snippet shows how to configure Vite to use Tailwind CSS and React plugins. It imports necessary modules and defines the configuration using defineConfig.

LANGUAGE: js
CODE:
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [tailwindcss(), react()],
});

----------------------------------------

TITLE: Responsive Navbar with Dropdown Menu
DESCRIPTION: Advanced navbar implementation with responsive design - shows dropdown menu on small screens and horizontal menu on large screens. Includes submenu support.

LANGUAGE: html
CODE:
<div class="$$navbar bg-base-100 shadow-sm">
  <div class="$$navbar-start">
    <div class="$$dropdown">
      <div tabindex="0" role="button" class="$$btn $$btn-ghost lg:hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" /> </svg>
      </div>
      <ul tabindex="0" class="$$menu $$menu-sm $$dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow">
        <li><a>Item 1</a></li>
        <li>
          <a>Parent</a>
          <ul class="p-2">
            <li><a>Submenu 1</a></li>
            <li><a>Submenu 2</a></li>
          </ul>
        </li>
        <li><a>Item 3</a></li>
      </ul>
    </div>
    <a class="$$btn $$btn-ghost text-xl">daisyUI</a>
  </div>
  <div class="$$navbar-center hidden lg:flex">
    <ul class="$$menu $$menu-horizontal px-1">
      <li><a>Item 1</a></li>
      <li>
        <details>
          <summary>Parent</summary>
          <ul class="p-2">
            <li><a>Submenu 1</a></li>
            <li><a>Submenu 2</a></li>
          </ul>
        </details>
      </li>
      <li><a>Item 3</a></li>
    </ul>
  </div>
  <div class="$$navbar-end">
    <a class="$$btn">Button</a>
  </div>
</div>

----------------------------------------

TITLE: Creating a Button with Utility Classes in HTML
DESCRIPTION: This snippet shows how to create a styled button using only utility classes, demonstrating the traditional approach before using daisyUI.

LANGUAGE: html
CODE:
<button
  class="inline-block cursor-pointer rounded-md bg-gray-800 px-4 py-3 text-center text-sm font-semibold uppercase text-white transition duration-200 ease-in-out hover:bg-gray-900">
  Button
</button>

----------------------------------------

TITLE: Basic Button Implementation - DaisyUI
DESCRIPTION: Simple button implementation using DaisyUI's btn class.

LANGUAGE: html
CODE:
<button class="$$btn">Default</button>

----------------------------------------

TITLE: Button Colors - DaisyUI
DESCRIPTION: Color variants for buttons including neutral, primary, secondary, accent, info, success, warning, and error.

LANGUAGE: html
CODE:
<button class="$$btn $$btn-neutral">Neutral</button>
<button class="$$btn $$btn-primary">Primary</button>
<button class="$$btn $$btn-secondary">Secondary</button>
<button class="$$btn $$btn-accent">Accent</button>
<button class="$$btn $$btn-info">Info</button>
<button class="$$btn $$btn-success">Success</button>
<button class="$$btn $$btn-warning">Warning</button>
<button class="$$btn $$btn-error">Error</button>

----------------------------------------

TITLE: Configuring PostCSS with Tailwind CSS
DESCRIPTION: This PostCSS configuration file adds Tailwind CSS as a plugin. It's necessary for integrating Tailwind CSS with PostCSS.

LANGUAGE: js
CODE:
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};
export default config;

----------------------------------------

TITLE: Creating Vue Project with Vite
DESCRIPTION: Creates a new Vue.js project using Vite as the build tool in the current directory

LANGUAGE: sh
CODE:
npm create vite@latest ./ -- --template vue

----------------------------------------

TITLE: Implementing Alert with Title and Description in HTML using daisyUI
DESCRIPTION: This snippet demonstrates how to create an alert with a title, description, and button using daisyUI classes. It also includes responsive layout changes.

LANGUAGE: html
CODE:
<div role="alert" class="$$alert $$alert-vertical sm:$$alert-horizontal">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info h-6 w-6 shrink-0">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <div>
    <h3 class="font-bold">New message!</h3>
    <div class="text-xs">You have 1 unread message</div>
  </div>
  <button class="$$btn $$btn-sm">See</button>
</div>

----------------------------------------

TITLE: Custom Theme Definition
DESCRIPTION: Detailed example of creating a custom theme with color variables, border radius, sizes, and effects settings

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "daisyui";
@plugin "daisyui/theme" {
  name: "mytheme";
  default: true;
  prefersdark: false;
  color-scheme: light;

  --color-base-100: oklch(98% 0.02 240);
  --color-base-200: oklch(95% 0.03 240);
  --color-base-300: oklch(92% 0.04 240);
  --color-base-content: oklch(20% 0.05 240);
  --color-primary: oklch(55% 0.3 240);
  --color-primary-content: oklch(98% 0.01 240);
  --color-secondary: oklch(70% 0.25 200);
  --color-secondary-content: oklch(98% 0.01 200);
  --color-accent: oklch(65% 0.25 160);
  --color-accent-content: oklch(98% 0.01 160);
  --color-neutral: oklch(50% 0.05 240);
  --color-neutral-content: oklch(98% 0.01 240);
  --color-info: oklch(70% 0.2 220);
  --color-info-content: oklch(98% 0.01 220);
  --color-success: oklch(65% 0.25 140);
  --color-success-content: oklch(98% 0.01 140);
  --color-warning: oklch(80% 0.25 80);
  --color-warning-content: oklch(20% 0.05 80);
  --color-error: oklch(65% 0.3 30);
  --color-error-content: oklch(98% 0.01 30);

  --radius-selector: 1rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;

  --size-selector: 0.25rem;
  --size-field: 0.25rem;

  --border: 1px;

  --depth: 1;
  --noise: 0;
}

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI Dependencies
DESCRIPTION: This command installs Tailwind CSS, its PostCSS plugin, and the latest version of daisyUI as project dependencies.

LANGUAGE: sh
CODE:
npm install tailwindcss @tailwindcss/postcss daisyui@latest

----------------------------------------

TITLE: Installing daisyUI Package with NPM
DESCRIPTION: Command to install the latest version of daisyUI as a development dependency using npm package manager.

LANGUAGE: bash
CODE:
npm i -D daisyui@latest

----------------------------------------

TITLE: Rendering Button Component with Spacing Indicators
DESCRIPTION: This HTML snippet demonstrates the rendering of a button component with visual indicators for spacing. It uses CSS classes defined earlier to style the button and its surrounding elements.

LANGUAGE: html
CODE:
<figure class={figure}>
  <div class="relative">
    <button class="btn btn-primary">Button</button>
    <div
      class={`${indicator} start-full top-0 h-full w-12 translate-x-2 flex-row border-s`}>
      <hr class={`${line} h-px w-full border-s`} />
      <div class={`${item} indicator-middle indicator-end`}>48</div>
    </div>
    <div
      class={`${indicator} -bottom-full start-0 h-12 w-4 translate-y-2 flex-col border-t`}>
      <hr class={`${line} h-full w-px border-s`} />
      <div class={`${item} indicator-center indicator-bottom`}>16</div>
    </div>
    <div
      class={`${indicator} -bottom-full end-0 h-12 w-4 translate-y-2 flex-col border-t`}>
      <hr class={`${line} h-full w-px border-s`} />
      <div class={`${item} indicator-center indicator-bottom`}>16</div>
    </div>
  </div>
</figure>

----------------------------------------

TITLE: Modifying daisyUI Plugin Configuration in CSS
DESCRIPTION: Shows how to change the daisyUI plugin configuration from a single line to a block with customizable options.

LANGUAGE: diff
CODE:
- @plugin "daisyui";
+ @plugin "daisyui" {
+ }

----------------------------------------

TITLE: Basic DaisyUI CDN Setup with Tailwind
DESCRIPTION: Basic setup code to include DaisyUI and Tailwind CSS via CDN in an HTML file. This is the minimum required setup for using DaisyUI.

LANGUAGE: html
CODE:
<link href="https://cdn.jsdelivr.net/npm/daisyui@5" rel="stylesheet" type="text/css" />
<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Complex Join Component with Mixed Elements
DESCRIPTION: Advanced example showing how to combine different types of elements including input, select, and buttons with indicators in a join component.

LANGUAGE: html
CODE:
<div class="$$join">
  <div>
    <div>
      <input class="$$input $$join-item" placeholder="Search" />
    </div>
  </div>
  <select class="$$select $$join-item">
    <option disabled selected>Filter</option>
    <option>Sci-fi</option>
    <option>Drama</option>
    <option>Action</option>
  </select>
  <div class="$$indicator">
    <span class="$$indicator-item $$badge $$badge-secondary">new</span>
    <button class="$$btn $$join-item">Search</button>
  </div>
</div>

----------------------------------------

TITLE: Custom CSS Styling for DaisyUI Buttons
DESCRIPTION: Demonstrates how to customize DaisyUI components using Tailwind's @apply directive in a CSS file.

LANGUAGE: postcss
CODE:
@utility btn {
  @apply rounded-full;
}

----------------------------------------

TITLE: Navbar with Title and Icon
DESCRIPTION: Navbar featuring a title and menu icon button. Uses flex layout for spacing.

LANGUAGE: html
CODE:
<div class="$$navbar bg-base-100 shadow-sm">
  <div class="flex-1">
    <a class="$$btn $$btn-ghost text-xl">daisyUI</a>
  </div>
  <div class="flex-none">
    <button class="$$btn $$btn-square $$btn-ghost">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block h-5 w-5 stroke-current"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"></path> </svg>
    </button>
  </div>
</div>

----------------------------------------

TITLE: Configuring Tailwind CSS and daisyUI in CSS file
DESCRIPTION: PostCSS configuration to import Tailwind CSS, set source files, and add daisyUI plugin.

LANGUAGE: postcss
CODE:
@import "tailwindcss" source(none);
@source "./public/*.{html,js}";
@plugin "daisyui";

----------------------------------------

TITLE: Creating New Angular Project
DESCRIPTION: Creates a new Angular project with CSS styling and navigates to the project directory

LANGUAGE: sh
CODE:
ng new my-project --style css
cd my-project

----------------------------------------

TITLE: Implementing Dropdown with Popover API and Anchor Positioning
DESCRIPTION: This snippet shows how to create a dropdown using the new Popover API and CSS anchor positioning. This method opens the dropdown on a top layer, avoiding z-index management issues.

LANGUAGE: html
CODE:
<button class="$$btn" popovertarget="popover-1" style="anchor-name:--anchor-1">
  Button
</button>
<ul class="$$dropdown $$menu w-52 rounded-box bg-base-100 shadow-sm"
  popover id="popover-1" style="position-anchor:--anchor-1">
  <li><a>Item 1</a></li>
  <li><a>Item 2</a></li>
</ul>

----------------------------------------

TITLE: Implementing Basic Dialog Modal - HTML/JSX
DESCRIPTION: Shows how to create a basic modal dialog using the HTML dialog element with close button. Uses showModal() method to open and close() method to dismiss.

LANGUAGE: html
CODE:
<button class="$$btn" onclick="my_modal_1.showModal()">open modal</button>
<dialog id="my_modal_1" class="$$modal">
  <div class="$$modal-box">
    <h3 class="text-lg font-bold">Hello!</h3>
    <p class="py-4">Press ESC key or click the button below to close</p>
    <div class="$$modal-action">
      <form method="dialog">
        <button class="$$btn">Close</button>
      </form>
    </div>
  </div>
</dialog>

LANGUAGE: jsx
CODE:
<button className="$$btn" onClick={()=>document.getElementById('my_modal_1').showModal()}>open modal</button>
<dialog id="my_modal_1" className="$$modal">
  <div className="$$modal-box">
    <h3 className="font-bold text-lg">Hello!</h3>
    <p className="py-4">Press ESC key or click the button below to close</p>
    <div className="$$modal-action">
      <form method="dialog">
        <button className="$$btn">Close</button>
      </form>
    </div>
  </div>
</dialog>

----------------------------------------

TITLE: Implementing Centered Hero in DaisyUI
DESCRIPTION: Creates a centered hero section with a title, description and call-to-action button. Uses basic hero classes with centered content alignment.

LANGUAGE: html
CODE:
<div class="$$hero bg-base-200 min-h-screen">
  <div class="$$hero-content text-center">
    <div class="max-w-md">
      <h1 class="text-5xl font-bold">Hello there</h1>
      <p class="py-6">
        Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem
        quasi. In deleniti eaque aut repudiandae et a id nisi.
      </p>
      <button class="$$btn $$btn-primary">Get Started</button>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating a Button with daisyUI Component Class in HTML
DESCRIPTION: This snippet demonstrates how to create a button using daisyUI's 'btn' component class, simplifying the HTML and reducing the number of classes needed.

LANGUAGE: html
CODE:
<button class="btn">Button</button>

----------------------------------------

TITLE: Adding CSS build script to package.json
DESCRIPTION: JSON configuration in package.json to add a script for building CSS using Tailwind CLI.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build:css": "npx @tailwindcss/cli -i app.css -o public/output.css"
  },
}

----------------------------------------

TITLE: Implementing Password Validation with DaisyUI Validator
DESCRIPTION: This snippet shows how to use the validator class for password input with specific requirements. It includes a pattern for validation and a detailed hint.

LANGUAGE: html
CODE:
<input type="password" class="$$input $$validator" required placeholder="Password" minlength="8" 
  pattern="(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" 
  title="Must be more than 8 characters, including number, lowercase letter, uppercase letter" />
<p class="$$validator-hint">
  Must be more than 8 characters, including
  <br/>At least one number
  <br/>At least one lowercase letter
  <br/>At least one uppercase letter
</p>

----------------------------------------

TITLE: Combining Accordion and Join Components in DaisyUI
DESCRIPTION: This code snippet shows how to use the Accordion and Join components together in DaisyUI. It creates a vertically joined accordion with automatic border radius handling.

LANGUAGE: html
CODE:
<div class="$$join $$join-vertical bg-base-100">
  <div class="$$collapse $$collapse-arrow $$join-item border-base-300 border">
    <input type="radio" name="my-accordion-4" checked="checked" />
    <div class="$$collapse-title font-semibold">How do I create an account?</div>
    <div class="$$collapse-content text-sm">Click the "Sign Up" button in the top right corner and follow the registration process.</div>
  </div>
  <div class="$$collapse $$collapse-arrow $$join-item border-base-300 border">
    <input type="radio" name="my-accordion-4" />
    <div class="$$collapse-title font-semibold">I forgot my password. What should I do?</div>
    <div class="$$collapse-content text-sm">Click on "Forgot Password" on the login page and follow the instructions sent to your email.</div>
  </div>
  <div class="$$collapse $$collapse-arrow $$join-item border-base-300 border">
    <input type="radio" name="my-accordion-4" />
    <div class="$$collapse-title font-semibold">How do I update my profile information?</div>
    <div class="$$collapse-content text-sm">Go to "My Account" settings and select "Edit Profile" to make changes.</div>
  </div>
</div>

----------------------------------------

TITLE: Basic Card Implementation
DESCRIPTION: Shows a basic card with an image, title, description and action button using DaisyUI card classes. Includes figure element for image and card-body for content.

LANGUAGE: html
CODE:
<div class="$$card bg-base-100 w-96 shadow-sm">
  <figure>
    <img
      src="https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp"
      alt="Shoes" />
  </figure>
  <div class="$$card-body">
    <h2 class="$$card-title">Card Title</h2>
    <p>A card component has a figure, a body part, and inside body there are title and actions parts</p>
    <div class="$$card-actions justify-end">
      <button class="$$btn $$btn-primary">Buy Now</button>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Basic HTML Table with DaisyUI Styling
DESCRIPTION: Basic table implementation using DaisyUI's table class showing name, job and favorite color columns

LANGUAGE: html
CODE:
<div class="overflow-x-auto">
  <table class="$$table">
    <!-- head -->
    <thead>
      <tr>
        <th></th>
        <th>Name</th>
        <th>Job</th>
        <th>Favorite Color</th>
      </tr>
    </thead>
    <tbody>
      <!-- row 1 -->
      <tr>
        <th>1</th>
        <td>Cy Ganderton</td>
        <td>Quality Control Specialist</td>
        <td>Blue</td>
      </tr>
      <!-- row 2 -->
      <tr>
        <th>2</th>
        <td>Hart Hagerty</td>
        <td>Desktop Support Technician</td>
        <td>Purple</td>
      </tr>
      <!-- row 3 -->
      <tr>
        <th>3</th>
        <td>Brice Swyre</td>
        <td>Tax Accountant</td>
        <td>Red</td>
      </tr>
    </tbody>
  </table>
</div>

----------------------------------------

TITLE: Default daisyUI Configuration in PostCSS
DESCRIPTION: Displays the default configuration for daisyUI, including theme settings, root selector, inclusion/exclusion lists, prefix, and logging options.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  themes: light --default, dark --prefersdark;
  root: ":root";
  include: ;
  exclude: ;
  prefix: ;
  logs: true;
}

----------------------------------------

TITLE: Complete Chat Bubble with Header and Footer
DESCRIPTION: Implements a full chat bubble component with avatar image, header containing username and timestamp, message content, and footer with message status.

LANGUAGE: html
CODE:
<div class="$$chat $$chat-start">
  <div class="$$chat-image $$avatar">
    <div class="w-10 rounded-full">
      <img alt="Tailwind CSS chat bubble component" src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
    </div>
  </div>
  <div class="$$chat-header">
    Obi-Wan Kenobi
    <time class="text-xs opacity-50">12:45</time>
  </div>
  <div class="$$chat-bubble">You were the Chosen One!</div>
  <div class="$$chat-footer opacity-50">Delivered</div>
</div>

----------------------------------------

TITLE: Responsive Menu Implementation in DaisyUI
DESCRIPTION: Menu that switches between vertical and horizontal layout based on screen size

LANGUAGE: html
CODE:
<ul class="menu menu-vertical lg:menu-horizontal bg-base-200 rounded-box">
  <li><a>Item 1</a></li>
  <li><a>Item 2</a></li>
  <li><a>Item 3</a></li>
</ul>

----------------------------------------

TITLE: Theme Switch with Sun/Moon Icons
DESCRIPTION: Advanced theme toggle implementation using DaisyUI's swap component with animated sun and moon icons for visual feedback.

LANGUAGE: html
CODE:
<label class="swap swap-rotate">
  <input type="checkbox" class="theme-controller" value="synthwave" />
  <svg class="swap-off h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"/></svg>
  <svg class="swap-on h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"/></svg>
</label>

----------------------------------------

TITLE: Footer with Logo and Brand Information
DESCRIPTION: Footer featuring a company logo, brand description, and navigation sections. Includes SVG logo and company information alongside standard navigation links.

LANGUAGE: html
CODE:
<footer class="$$footer sm:$$footer-horizontal bg-base-200 text-base-content p-10">
  <aside>
    <svg width="50" height="50" viewBox="0 0 24 24" class="fill-current"><!-- SVG path --></svg>
    <p>ACME Industries Ltd.<br>Providing reliable tech since 1992</p>
  </aside>
  <!-- Navigation sections -->
</footer>

----------------------------------------

TITLE: Theme-Specific Styling
DESCRIPTION: Examples of applying theme-specific styles and using Tailwind's dark mode selector with DaisyUI themes

LANGUAGE: css
CODE:
[data-theme="light"] {
  .my-btn {
    background-color: #1EA1F1;
    border-color: #1EA1F1;
  }
  .my-btn:hover {
    background-color: #1C96E1;
    border-color: #1C96E1;
  }
}

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "daisyui" {
  themes: winter --default, night --prefersdark;
}

@custom-variant dark (&:where([data-theme=night], [data-theme=night] *));

LANGUAGE: html
CODE:
<div class="p-10 dark:p-20">
  I will have 10 padding on winter theme and 20 padding on night theme
</div>

----------------------------------------

TITLE: Implementing a Responsive Timeline in HTML
DESCRIPTION: This snippet demonstrates a responsive timeline that is vertical by default and becomes horizontal on large screens. It uses DaisyUI classes and includes timeline items with dates, icons, and descriptions.

LANGUAGE: HTML
CODE:
<ul class="timeline timeline-vertical lg:timeline-horizontal">
  <li>
    <div class="timeline-start">1984</div>
    <div class="timeline-middle">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" /></svg>
    </div>
    <div class="timeline-end timeline-box">First Macintosh computer</div>
    <hr/>
  </li>
  <!-- Additional timeline items... -->
</ul>

----------------------------------------

TITLE: Importing Components and Data in Svelte
DESCRIPTION: This snippet imports necessary components and exports data for use in the Svelte component.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
  import Install from "$components/homepage/Install.svelte"
  export let data
</script>

----------------------------------------

TITLE: Advanced Dropdown Examples
DESCRIPTION: These snippets show more advanced use cases for dropdowns, such as using a card as dropdown content and implementing a dropdown in a navbar.

LANGUAGE: html
CODE:
<div class="$$navbar bg-base-200">
  <div class="ps-4">
    <a class="text-lg font-bold">daisyUI</a>
  </div>
  <div class="flex grow justify-end px-2">
    <div class="flex items-stretch">
      <a class="$$btn $$btn-ghost rounded-field">Button</a>
      <div class="$$dropdown $$dropdown-end">
        <div tabindex="0" role="button" class="$$btn $$btn-ghost rounded-field">Dropdown</div>
        <ul
          tabindex="0"
          class="$$menu $$dropdown-content bg-base-200 rounded-box z-1 mt-4 w-52 p-2 shadow-sm">
          <li><a>Item 1</a></li>
          <li><a>Item 2</a></li>
        </ul>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Login Form Fieldset Implementation
DESCRIPTION: Complete example of a login form using fieldset for structure and organization of form elements.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset w-xs bg-base-200 border border-base-300 p-4 rounded-box">
  <legend class="$$fieldset-legend">Login</legend>
  
  <label class="$$fieldset-label">Email</label>
  <input type="email" class="$$input" placeholder="Email" />
  
  <label class="$$fieldset-label">Password</label>
  <input type="password" class="$$input" placeholder="Password" />
  
  <button class="$$btn $$btn-neutral mt-4">Login</button>
</fieldset>

----------------------------------------

TITLE: Theme Nesting Example
DESCRIPTION: Shows how to nest different themes within HTML elements using data-theme attributes

LANGUAGE: html
CODE:
<html data-theme="dark">
  <div data-theme="light">
    This div will always use light theme
    <span data-theme="retro">This span will always use retro theme!</span>
  </div>
</html>

----------------------------------------

TITLE: Implementing Accordion with Plus/Minus Icons in HTML using DaisyUI
DESCRIPTION: This snippet demonstrates how to create an accordion with plus/minus icons using DaisyUI classes. It provides a different visual style for expandable sections.

LANGUAGE: html
CODE:
<div class="$$collapse $$collapse-plus bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-3" checked="checked" />
  <div class="$$collapse-title font-semibold">How do I create an account?</div>
  <div class="$$collapse-content text-sm">Click the "Sign Up" button in the top right corner and follow the registration process.</div>
</div>
<div class="$$collapse $$collapse-plus bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-3" />
  <div class="$$collapse-title font-semibold">I forgot my password. What should I do?</div>
  <div class="$$collapse-content text-sm">Click on "Forgot Password" on the login page and follow the instructions sent to your email.</div>
</div>
<div class="$$collapse $$collapse-plus bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-3" />
  <div class="$$collapse-title font-semibold">How do I update my profile information?</div>
  <div class="$$collapse-content text-sm">Go to "My Account" settings and select "Edit Profile" to make changes.</div>
</div>

----------------------------------------

TITLE: Text Comparison Using DaisyUI Diff Component
DESCRIPTION: Implementation of a side-by-side text comparison using the DaisyUI diff component. The example demonstrates comparing text with different background colors and styling while maintaining the same content.

LANGUAGE: html
CODE:
<figure class="$$diff aspect-16/9" tabindex="0">
  <div class="$$diff-item-1" role="img">
    <div class="bg-primary text-primary-content grid place-content-center text-9xl font-black">
      DAISY
    </div>
  </div>
  <div class="$$diff-item-2" role="img" tabindex="0">
    <div class="bg-base-200 grid place-content-center text-9xl font-black">DAISY</div>
  </div>
  <div class="$$diff-resizer"></div>
</figure>

----------------------------------------

TITLE: Basic Text Input in HTML
DESCRIPTION: A simple text input field with placeholder text.

LANGUAGE: html
CODE:
<input type="text" placeholder="Type here" class="$$input" />

----------------------------------------

TITLE: DaisyUI Button Variants Using Utility Classes
DESCRIPTION: Demonstrates how to customize buttons using DaisyUI's built-in utility classes for different variants like primary, secondary, and accent with outline.

LANGUAGE: html
CODE:
<button class="btn btn-primary">One</button>
<button class="btn btn-secondary">Two</button>
<button class="btn btn-accent btn-outline">Three</button>

----------------------------------------

TITLE: Enabling Custom Theme
DESCRIPTION: Demonstrates how to enable a specific theme (cupcake) in DaisyUI configuration and apply it to HTML

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "daisyui" {
  themes: light --default, dark --prefersdark, cupcake;
}

LANGUAGE: html
CODE:
<html data-theme="cupcake"></html>

----------------------------------------

TITLE: Including Specific Components in daisyUI
DESCRIPTION: Demonstrates how to include only specific components (button, input, select) from daisyUI, excluding all others.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  include: button, input, select;
}

----------------------------------------

TITLE: Implementing Hero with Login Form
DESCRIPTION: Creates a hero section with a login form interface. Includes email and password inputs with responsive layout for form positioning.

LANGUAGE: html
CODE:
<div class="$$hero bg-base-200 min-h-screen">
  <div class="$$hero-content flex-col lg:flex-row-reverse">
    <div class="text-center lg:text-left">
      <h1 class="text-5xl font-bold">Login now!</h1>
      <p class="py-6">
        Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem
        quasi. In deleniti eaque aut repudiandae et a id nisi.
      </p>
    </div>
    <div class="$$card bg-base-100 w-full max-w-sm shrink-0 shadow-2xl">
      <div class="$$card-body">
        <fieldset class="$$fieldset">
          <label class="$$fieldset-label">Email</label>
          <input type="email" class="$$input" placeholder="Email" />
          <label class="$$fieldset-label">Password</label>
          <input type="password" class="$$input" placeholder="Password" />
          <div><a class="$$link $$link-hover">Forgot password?</a></div>
          <button class="$$btn $$btn-neutral mt-4">Login</button>
        </fieldset>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Social Login Buttons - DaisyUI
DESCRIPTION: Collection of styled buttons for various social login providers including Google, Facebook, GitHub, and others with icons and proper branding colors.

LANGUAGE: html
CODE:
<button class="$$btn bg-white text-black border-[#e5e5e5]">
  <svg aria-label="Email icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2" fill="none" stroke="black"><rect width="20" height="16" x="2" y="4" rx="2"></rect><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path></g></svg>
  Login with Email
</button>

----------------------------------------

TITLE: Installing daisyUI 5 with Tailwind CSS
DESCRIPTION: Steps to install daisyUI 5 as a dependency and import it in a CSS file with Tailwind CSS.

LANGUAGE: CSS
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Implementing Basic Alert in HTML with daisyUI
DESCRIPTION: This snippet demonstrates how to create a basic alert using daisyUI classes. It includes an SVG icon and a text message.

LANGUAGE: html
CODE:
<div role="alert" class="$$alert">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info h-6 w-6 shrink-0">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <span>12 unread messages. Tap to see.</span>
</div>

----------------------------------------

TITLE: Excluding Specific daisyUI Components
DESCRIPTION: Demonstrates how to exclude specific components from daisyUI in Tailwind CSS 4.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  exclude: scrollbar;
}

----------------------------------------

TITLE: Implementing Number Validation with DaisyUI Validator
DESCRIPTION: This example shows how to use the validator class for number input validation. It restricts the input to numbers between 1 and 10 and includes a hint.

LANGUAGE: html
CODE:
<input type="number" class="$$input $$validator" required placeholder="Type a number between 1 to 10" 
min="1" max="10"
  title="Must be between be 1 to 10" />
<p class="$$validator-hint">Must be between be 1 to 10</p>

----------------------------------------

TITLE: Implementing Basic DaisyUI Drawer in HTML
DESCRIPTION: HTML code for a basic Drawer component with a toggle button and sidebar content.

LANGUAGE: html
CODE:
<div class="$$drawer">
  <input id="my-drawer" type="checkbox" class="$$drawer-toggle" />
  <div class="$$drawer-content">
    <!-- Page content here -->
    <label for="my-drawer" class="$$btn $$btn-primary $$drawer-button">Open drawer</label>
  </div>
  <div class="$$drawer-side">
    <label for="my-drawer" aria-label="close sidebar" class="$$drawer-overlay"></label>
    <ul class="$$menu bg-base-200 text-base-content min-h-full w-80 p-4">
      <!-- Sidebar content here -->
      <li><a>Sidebar Item 1</a></li>
      <li><a>Sidebar Item 2</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Basic Menu Implementation in DaisyUI
DESCRIPTION: Simple vertical menu with basic items using DaisyUI menu class

LANGUAGE: html
CODE:
<ul class="menu bg-base-200 w-56 rounded-box">
  <li><a>Item 1</a></li>
  <li><a>Item 2</a></li>
  <li><a>Item 3</a></li>
</ul>

----------------------------------------

TITLE: Implementing Basic Badge in HTML with DaisyUI
DESCRIPTION: This snippet demonstrates how to create a basic badge using DaisyUI classes. The badge is implemented as a span element with the 'badge' class.

LANGUAGE: html
CODE:
<span class="$$badge">Badge</span>

----------------------------------------

TITLE: Implementing Basic Badge in HTML with DaisyUI
DESCRIPTION: This snippet demonstrates how to create a basic badge using DaisyUI classes. The badge is implemented as a span element with the 'badge' class.

LANGUAGE: html
CODE:
<span class="$$badge">Badge</span>

----------------------------------------

TITLE: Implementing Loading Spinner in HTML with DaisyUI
DESCRIPTION: This snippet demonstrates how to create loading spinner animations of various sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large spinners.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-spinner $$loading-xs"></span>
<span class="$$loading $$loading-spinner $$loading-sm"></span>
<span class="$$loading $$loading-spinner $$loading-md"></span>
<span class="$$loading $$loading-spinner $$loading-lg"></span>
<span class="$$loading $$loading-spinner $$loading-xl"></span>

----------------------------------------

TITLE: Implementing Middle-Left Toast with Multiple Alerts in HTML
DESCRIPTION: This snippet shows how to create a Toast positioned at the middle-left of the page using 'toast-start' and 'toast-middle' classes. It includes multiple alerts within the Toast component.

LANGUAGE: html
CODE:
<div class="$$toast $$toast-start $$toast-middle">
  <div class="$$alert $$alert-info">
    <span>New mail arrived.</span>
  </div>
  <div class="$$alert $$alert-success">
    <span>Message sent successfully.</span>
  </div>
</div>

----------------------------------------

TITLE: Implementing Pagination with Disabled Button in DaisyUI
DESCRIPTION: This snippet shows how to create a pagination component with a disabled button using DaisyUI's join and btn classes. It demonstrates how to apply the btn-disabled class to indicate unavailable pages.

LANGUAGE: html
CODE:
<div class="$$join">
  <button class="$$join-item $$btn">1</button>
  <button class="$$join-item $$btn">2</button>
  <button class="$$join-item $$btn $$btn-disabled">...</button>
  <button class="$$join-item $$btn">99</button>
  <button class="$$join-item $$btn">100</button>
</div>

----------------------------------------

TITLE: Installing Tailwind CSS and DaisyUI Dependencies
DESCRIPTION: Installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI using npm

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Text Input with Label and Icons in HTML
DESCRIPTION: Examples of text inputs with labels, icons, and additional elements inside the input wrapper.

LANGUAGE: html
CODE:
<label class="$$input">
  <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></g></svg>
  <input type="search" class="grow" placeholder="Search" />
  <kbd class="$$kbd $$kbd-sm">⌘</kbd>
  <kbd class="$$kbd $$kbd-sm">K</kbd>
</label>

----------------------------------------

TITLE: Rendering Button Component with Border Radius Indicator
DESCRIPTION: This HTML snippet shows the rendering of a button component with a visual indicator for border radius. It uses CSS classes defined earlier to style the button and its indicator.

LANGUAGE: html
CODE:
<figure class={figure}>
  <div class="relative">
    <button class="btn btn-primary">Button</button>
    <div
      class={`${indicator} -start-1 top-1/2 h-12 w-4 translate-y-2 flex-col`}>
      <div class={circle}>
      </div>
      <hr class={`${line} h-full w-px border-s`} />
      <div class={`${item} indicator-center indicator-bottom`}>
        --radius-field
      </div>
    </div>
  </div>
</figure>

----------------------------------------

TITLE: Colored Tooltips
DESCRIPTION: Demonstrates various color options for tooltips including neutral, primary, secondary, accent, info, success, warning, and error

LANGUAGE: html
CODE:
<div class="$$tooltip $$tooltip-open $$tooltip-primary" data-tip="primary">
  <button class="$$btn $$btn-primary">primary</button>
</div>

----------------------------------------

TITLE: Importing Tailwind CSS and daisyUI in PostCSS
DESCRIPTION: This PostCSS file imports Tailwind CSS, specifies source files, and adds daisyUI as a plugin. It sets up the CSS preprocessing for the project.

LANGUAGE: postcss
CODE:
@import "tailwindcss" source(none);
@source "./public/*.{html,js}";
@plugin "daisyui";

----------------------------------------

TITLE: Button Sizes - DaisyUI
DESCRIPTION: Examples of different button sizes from extra small to extra large using DaisyUI size modifiers.

LANGUAGE: html
CODE:
<button class="$$btn $$btn-xs">Xsmall</button>
<button class="$$btn $$btn-sm">Small</button>
<button class="$$btn">Medium</button>
<button class="$$btn $$btn-lg">Large</button>
<button class="$$btn $$btn-xl">Xlarge</button>

----------------------------------------

TITLE: Basic Textarea Implementation in DaisyUI
DESCRIPTION: Basic implementation of a textarea element using DaisyUI's textarea class.

LANGUAGE: html
CODE:
<textarea class="$$textarea" placeholder="Bio"></textarea>

----------------------------------------

TITLE: Carousel with Navigation Controls
DESCRIPTION: Advanced carousel implementation with next/previous buttons and anchor-based navigation using button circles.

LANGUAGE: html
CODE:
<div class="$$carousel w-full">
  <div id="slide1" class="$$carousel-item relative w-full">
    <img src="https://img.daisyui.com/images/stock/photo-1625726411847-8cbb60cc71e6.webp" class="w-full" />
    <div class="absolute left-5 right-5 top-1/2 flex -translate-y-1/2 transform justify-between">
      <a href="#slide4" class="$$btn $$btn-circle">❮</a>
      <a href="#slide2" class="$$btn $$btn-circle">❯</a>
    </div>
  </div>
  <!-- Additional slides -->
</div>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Creating Floating Labels with Different Sizes in DaisyUI (HTML)
DESCRIPTION: This example demonstrates how to implement floating labels with various sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large input fields.

LANGUAGE: html
CODE:
<label class="$$floating-label">
  <input type="text" placeholder="Extra Small" class="$$input $$input-xs" />
  <span>Extra Small</span>
</label>
<label class="$$floating-label">
  <input type="text" placeholder="Small" class="$$input $$input-sm" />
  <span>Small</span>
</label>
<label class="$$floating-label">
  <input type="text" placeholder="Medium" class="$$input $$input-md" />
  <span>Medium</span>
</label>
<label class="$$floating-label">
  <input type="text" placeholder="Large" class="$$input $$input-lg" />
  <span>Large</span>
</label>
<label class="$$floating-label">
  <input type="text" placeholder="Extra Large" class="$$input $$input-xl" />
  <span>Extra Large</span>
</label>

----------------------------------------

TITLE: Creating a new Vite React project
DESCRIPTION: This command creates a new Vite React project in the current directory using npm.

LANGUAGE: sh
CODE:
npm create vite@latest ./ -- --template react

----------------------------------------

TITLE: Implementing Dropdown with HTML details and summary
DESCRIPTION: This snippet demonstrates how to create a dropdown using native HTML details and summary elements. The dropdown opens and closes when the summary is clicked.

LANGUAGE: html
CODE:
<details class="$$dropdown">
  <summary class="$$btn m-1">open or close</summary>
  <ul class="$$menu $$dropdown-content bg-base-100 $$rounded-box z-1 w-52 p-2 shadow-sm">
    <li><a>Item 1</a></li>
    <li><a>Item 2</a></li>
  </ul>
</details>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI Dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Implementing Basic Select in HTML and React
DESCRIPTION: Demonstrates how to create a basic Select element using DaisyUI classes. The example includes options for selecting colors.

LANGUAGE: html
CODE:
<select class="$$select">
  <option disabled selected>Pick a color</option>
  <option>Crimson</option>
  <option>Amber</option>
  <option>Velvet</option>
</select>

LANGUAGE: jsx
CODE:
<select defaultValue="Pick a color" className="$$select">
  <option disabled={true}>Pick a color</option>
  <option>Crimson</option>
  <option>Amber</option>
  <option>Velvet</option>
</select>

----------------------------------------

TITLE: Basic Radio Button Implementation
DESCRIPTION: Basic implementation of radio buttons using DaisyUI's radio class. Includes checked and unchecked states.

LANGUAGE: html
CODE:
<input type="radio" name="radio-1" class="$$radio" checked="checked" />
<input type="radio" name="radio-1" class="$$radio" />

----------------------------------------

TITLE: Structuring DaisyUI Drawer Component in JSON
DESCRIPTION: JSON representation of the Drawer component structure, showing the hierarchy of classes and elements.

LANGUAGE: json
CODE:
{
  ".drawer": {
    "├──": ".drawer-toggle",
    "├──": ".drawer-content",
    "│    ╰──": "// navbar, content, footer",
    "╰──": ".drawer-side",
    "     ├──": ".drawer-overlay",
    "     ╰──": "// Sidebar content (menu or anything)"
  }
}

----------------------------------------

TITLE: Implementing Equal-Width Pagination Buttons with Outline Style in DaisyUI
DESCRIPTION: This snippet shows how to create equal-width pagination buttons with an outline style using DaisyUI's join, btn, and btn-outline classes. It demonstrates using a grid layout for consistent button widths.

LANGUAGE: html
CODE:
<div class="$$join grid grid-cols-2">
  <button class="$$join-item $$btn $$btn-outline">Previous page</button>
  <button class="$$join-item $$btn $$btn-outline">Next</button>
</div>

----------------------------------------

TITLE: Basic Radio Button Implementation
DESCRIPTION: Basic implementation of radio buttons using DaisyUI's radio class. Includes checked and unchecked states.

LANGUAGE: html
CODE:
<input type="radio" name="radio-1" class="$$radio" checked="checked" />
<input type="radio" name="radio-1" class="$$radio" />

----------------------------------------

TITLE: Rendering Checkboxes of Different Sizes in HTML
DESCRIPTION: This snippet shows how to create checkboxes of various sizes using DaisyUI size classes.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-xs" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-sm" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-md" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-lg" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-xl" />

----------------------------------------

TITLE: Installing Tailwind CSS CLI and daisyUI
DESCRIPTION: Command to install the latest versions of Tailwind CSS CLI and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/cli@latest daisyui@latest

----------------------------------------

TITLE: Rendering Basic Checkbox in HTML with DaisyUI
DESCRIPTION: This snippet demonstrates how to create a basic checked checkbox using DaisyUI classes.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$checkbox" />

----------------------------------------

TITLE: Custom Tooltip Content Implementation
DESCRIPTION: Demonstrates how to create a tooltip with custom HTML content using the tooltip-content class

LANGUAGE: html
CODE:
<div class="$$tooltip">
  <div class="$$tooltip-content">
    <div class="animate-bounce text-orange-400 -rotate-10 text-2xl font-black">Wow!</div>
  </div>
  <button class="$$btn">Hover me</button>
</div>

----------------------------------------

TITLE: Textarea Size Variations
DESCRIPTION: Implementation showing different size variations of textarea from extra small to extra large.

LANGUAGE: html
CODE:
<textarea placeholder="Bio" class="$$textarea $$textarea-xs"></textarea>

<textarea placeholder="Bio" class="$$textarea $$textarea-sm"></textarea>

<textarea placeholder="Bio" class="$$textarea $$textarea-md"></textarea>

<textarea placeholder="Bio" class="$$textarea $$textarea-lg"></textarea>

<textarea placeholder="Bio" class="$$textarea $$textarea-xl"></textarea>

----------------------------------------

TITLE: Configuring VSCode Settings for Copilot (JSON)
DESCRIPTION: JSON configuration to add the daisyUI llms.txt file as instructions for GitHub Copilot in VSCode.

LANGUAGE: json
CODE:
{
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "file": "./.vscode/daisyui.md"
    }
  ]
}

----------------------------------------

TITLE: Implementing Cally Calendar with daisyUI Styles
DESCRIPTION: This snippet demonstrates how to implement a Cally calendar component with daisyUI styles. It includes the necessary HTML structure and CSS classes for styling the calendar.

LANGUAGE: HTML
CODE:
<calendar-date class="$$cally bg-base-100 border border-base-300 shadow-lg rounded-box">
  <svg aria-label="Previous" class="fill-current size-4" slot="previous" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M15.75 19.5 8.25 12l7.5-7.5"></path></svg>
  <svg aria-label="Next" class="fill-current size-4" slot="next" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path></svg>
  <calendar-month></calendar-month>
</calendar-date>

----------------------------------------

TITLE: Installing daisyUI Package
DESCRIPTION: NPM command to install the latest version of daisyUI as a development dependency.

LANGUAGE: sh
CODE:
npm i -D daisyui@latest

----------------------------------------

TITLE: Creating Loading Infinity Animation in HTML with DaisyUI
DESCRIPTION: This code demonstrates how to implement loading infinity animations of different sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large infinity animations.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-infinity $$loading-xs"></span>
<span class="$$loading $$loading-infinity $$loading-sm"></span>
<span class="$$loading $$loading-infinity $$loading-md"></span>
<span class="$$loading $$loading-infinity $$loading-lg"></span>
<span class="$$loading $$loading-infinity $$loading-xl"></span>

----------------------------------------

TITLE: Table with Zebra Striping
DESCRIPTION: Table implementation with alternating row colors using DaisyUI's table-zebra class

LANGUAGE: html
CODE:
<div class="overflow-x-auto">
  <table class="$$table $$table-zebra">
    <!-- head -->
    <thead>
      <tr>
        <th></th>
        <th>Name</th>
        <th>Job</th>
        <th>Favorite Color</th>
      </tr>
    </thead>
    <tbody>
      <!-- row 1 -->
      <tr>
        <th>1</th>
        <td>Cy Ganderton</td>
        <td>Quality Control Specialist</td>
        <td>Blue</td>
      </tr>
      <!-- row 2 -->
      <tr>
        <th>2</th>
        <td>Hart Hagerty</td>
        <td>Desktop Support Technician</td>
        <td>Purple</td>
      </tr>
      <!-- row 3 -->
      <tr>
        <th>3</th>
        <td>Brice Swyre</td>
        <td>Tax Accountant</td>
        <td>Red</td>
      </tr>
    </tbody>
  </table>
</div>

----------------------------------------

TITLE: DaisyUI URL Management Component
DESCRIPTION: Svelte component that manages selected DaisyUI URLs and generates combined CDN URLs. Includes functionality for toggling components and calculating total size.

LANGUAGE: javascript
CODE:
const initialOrderMap = new Map(data.files.map((file, index) => [file, index]));

let selectedUrls = writable(data.files.filter(file => file.checked));

function toggleUrl(url) {
  selectedUrls.update((current) => {
    if (current.includes(url)) {
      return current.filter((item) => item !== url);
    } else {
      const updated = [...current, url];
      updated.sort((a, b) => initialOrderMap.get(a) - initialOrderMap.get(b));
      return updated;
    }
  });
  url.checked = !url.checked;
}

----------------------------------------

TITLE: Creating a New Next.js Project
DESCRIPTION: This command creates a new Next.js project in the current directory using the latest version of the create-next-app tool.

LANGUAGE: sh
CODE:
npm create next-app@latest ./

----------------------------------------

TITLE: Initializing Component Variables in Svelte
DESCRIPTION: This snippet defines and initializes various CSS class strings used for styling the button component examples.

LANGUAGE: svelte
CODE:
const {
  figure,
  indicator,
  indicatorBox,
  item,
  line,
  circle
} = {
  figure: "not-prose bg-base-100 border border-base-content/20 border-dashed rounded-box grid min-h-[20rem] place-items-center",
  indicator: "indicator border-base-content pointer-events-none absolute items-center border-dashed flex",
  indicatorBox: "indicator border-base-content pointer-events-none absolute items-center border-dashed flex border",
  item: "indicator-item badge badge-neutral",
  line: "border-base-content border-s border-dashed",
  circle: "border-base-content aspect-square w-6 shrink-0 rounded-full border border-dashed",
}

----------------------------------------

TITLE: Basic Range Slider Implementation
DESCRIPTION: Basic implementation of a range slider input using DaisyUI's range class. Allows selection between 0 and 100 with a default value of 40.

LANGUAGE: html
CODE:
<input type="range" min="0" max="100" value="40" class="$$range" />

----------------------------------------

TITLE: Disabled Text Input in HTML
DESCRIPTION: A disabled text input example.

LANGUAGE: html
CODE:
<input type="text" placeholder="You can't touch this" class="$$input" disabled />

----------------------------------------

TITLE: Horizontal Positioned Dividers Implementation
DESCRIPTION: Shows text positioning options for horizontal dividers with start, default, and end positions.

LANGUAGE: html
CODE:
<div class="flex w-full">
  <div class="$$divider $$divider-horizontal $$divider-start">Start</div>
  <div class="$$divider $$divider-horizontal">Default</div>
  <div class="$$divider $$divider-horizontal $$divider-end">End</div>
</div>

----------------------------------------

TITLE: Validated Text Inputs in HTML
DESCRIPTION: Examples of text inputs with validation, including username, email, password, and URL inputs.

LANGUAGE: html
CODE:
<label class="$$input $$validator">
  <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></g></svg>
  <input type="input" required placeholder="Username" pattern="[A-Za-z][A-Za-z0-9\-]*" minlength="3" maxlength="30" title="Only letters, numbers or dash" />
</label>
<p class="$$validator-hint">
  Must be 3 to 30 characters
  <br/>containing only letters, numbers or dash
</p>

----------------------------------------

TITLE: Implementing Scrollable Breadcrumbs with Max-Width using DaisyUI in HTML
DESCRIPTION: This snippet shows how to create scrollable breadcrumbs when the content exceeds the container width. It uses the 'max-w-xs' class to set a maximum width, causing the breadcrumbs to scroll horizontally if needed.

LANGUAGE: html
CODE:
<div class="$$breadcrumbs max-w-xs text-sm">
  <ul>
    <li>Long text 1</li>
    <li>Long text 2</li>
    <li>Long text 3</li>
    <li>Long text 4</li>
    <li>Long text 5</li>
  </ul>
</div>

----------------------------------------

TITLE: Creating Responsive Navbar with DaisyUI Drawer in HTML
DESCRIPTION: HTML implementation of a responsive navbar using the Drawer component, with a menu for desktop and sidebar for mobile.

LANGUAGE: html
CODE:
<div class="$$drawer">
  <input id="my-drawer-3" type="checkbox" class="$$drawer-toggle" />
  <div class="$$drawer-content flex flex-col">
    <!-- Navbar -->
    <div class="$$navbar bg-base-300 w-full">
      <div class="flex-none lg:hidden">
        <label for="my-drawer-3" aria-label="open sidebar" class="$$btn $$btn-square $$btn-ghost">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="inline-block h-6 w-6 stroke-current">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </label>
      </div>
      <div class="mx-2 flex-1 px-2">Navbar Title</div>
      <div class="hidden flex-none lg:block">
        <ul class="$$menu $$menu-horizontal">
          <!-- Navbar menu content here -->
          <li><a>Navbar Item 1</a></li>
          <li><a>Navbar Item 2</a></li>
        </ul>
      </div>
    </div>
    <!-- Page content here -->
    Content
  </div>
  <div class="$$drawer-side">
    <label for="my-drawer-3" aria-label="close sidebar" class="$$drawer-overlay"></label>
    <ul class="$$menu bg-base-200 min-h-full w-80 p-4">
      <!-- Sidebar content here -->
      <li><a>Sidebar Item 1</a></li>
      <li><a>Sidebar Item 2</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Creating Indeterminate Toggle Switch with JavaScript
DESCRIPTION: Demonstrates how to create an indeterminate toggle switch using JavaScript. The indeterminate state is set programmatically and cannot be achieved through HTML alone.

LANGUAGE: html
CODE:
<!-- You can make a checkbox indeterminate using JS -->
<script>
  document.getElementById("my-toggle").indeterminate = true
</script>
<input type="checkbox" class="$$toggle" id="my-toggle" />

----------------------------------------

TITLE: Rendering a Single Keyboard Key with DaisyUI
DESCRIPTION: Demonstrates how to display a single keyboard key using the kbd class from DaisyUI. This example shows a simple 'K' key.

LANGUAGE: html
CODE:
<kbd class="kbd">K</kbd>

----------------------------------------

TITLE: Creating Color-Specific Alerts in HTML with daisyUI
DESCRIPTION: This snippet shows how to create alerts with different color variants (info, success, warning, error) using daisyUI classes.

LANGUAGE: html
CODE:
<div role="alert" class="$$alert $$alert-info">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="h-6 w-6 shrink-0 stroke-current">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <span>New software update available.</span>
</div>

----------------------------------------

TITLE: Custom Icon Steps Implementation
DESCRIPTION: Shows how to implement steps with custom icons using emoji characters within step-icon spans.

LANGUAGE: html
CODE:
<ul class="$$steps">
  <li class="$$step $$step-neutral">
    <span class="$$step-icon">😕</span>Step 1
  </li>
  <li class="$$step $$step-neutral">
    <span class="$$step-icon">😃</span>Step 2
  </li>
  <li class="$$step">
    <span class="$$step-icon">😍</span>Step 3
  </li>
</ul>

----------------------------------------

TITLE: Updating Form Control Structure
DESCRIPTION: Replace deprecated form-control, label-text, and label-text-alt classes with new fieldset and legend structure.

LANGUAGE: html
CODE:
<fieldset class="fieldset">
  <legend>Login</legend>
  <label class="label" for="name">Name</label>
  <input id="name" class="input" placeholder="Name" />
</fieldset>

LANGUAGE: html
CODE:
<fieldset class="fieldset max-w-xs">
  <label class="label flex justify-between" for="name">
    <span>What is your name?</span>
    <span>Top Right label</span>
  </label>
  <input id="name" class="input" placeholder="Name" />
  <label class="label flex justify-between" for="name">
    <span>Bottom Left label</span>
    <span>Bottom Right label</span>
  </label>
</fieldset>

----------------------------------------

TITLE: Basic Navbar with Title
DESCRIPTION: Simple navbar implementation with only a title button. Uses base styling and shadow effects.

LANGUAGE: html
CODE:
<div class="$$navbar bg-base-100 shadow-sm">
  <a class="$$btn $$btn-ghost text-xl">daisyUI</a>
</div>

----------------------------------------

TITLE: Ghost-style File Input in HTML with DaisyUI
DESCRIPTION: Shows how to create a ghost-style file input using DaisyUI classes. Combines 'file-input' and 'file-input-ghost' classes.

LANGUAGE: html
CODE:
<input type="file" class="file-input file-input-ghost" />

----------------------------------------

TITLE: Applying Heart-Shaped Mask to Image in HTML
DESCRIPTION: This code shows how to use DaisyUI classes to apply a heart-shaped mask to an image. The mask class and mask-heart class are combined to achieve this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-heart"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Creating Hero with Figure Layout
DESCRIPTION: Implements a hero section with an image and content side by side. Uses flex layout for responsive positioning of image and text content.

LANGUAGE: html
CODE:
<div class="$$hero bg-base-200 min-h-screen">
  <div class="$$hero-content flex-col lg:flex-row">
    <img
      src="https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp"
      class="max-w-sm rounded-lg shadow-2xl" />
    <div>
      <h1 class="text-5xl font-bold">Box Office News!</h1>
      <p class="py-6">
        Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem
        quasi. In deleniti eaque aut repudiandae et a id nisi.
      </p>
      <button class="$$btn $$btn-primary">Get Started</button>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Implementing Horizontal Steps with DaisyUI
DESCRIPTION: Creates a horizontal step indicator with four steps, where the first two steps are highlighted with primary color.

LANGUAGE: html
CODE:
<ul class="$$steps">
  <li class="$$step $$step-primary">Register</li>
  <li class="$$step $$step-primary">Choose plan</li>
  <li class="$$step">Purchase</li>
  <li class="$$step">Receive Product</li>
</ul>

----------------------------------------

TITLE: Configuring Primary-Muted for Light Theme
DESCRIPTION: Implementation of the new primary-muted color in the light theme with specific OKLCH values.

LANGUAGE: javascript
CODE:
// tailwind.config.js
module.exports = {
  plugins: [require("daisyui")],

  theme: {
    extend: {
      colors: {
        "primary-muted": "oklch(var(--primary-muted) / <alpha-value>)",
      },
    },
  },

  daisyui: {
    themes: [
      {
        light: {
          ...require("daisyui/src/theming/themes")["light"],
          "--primary-muted": "65% 0.2 295",
        },
      },
    ],
  },
}

----------------------------------------

TITLE: Updating Bottom Navigation to Dock Component
DESCRIPTION: Replace bottom-nav component with the new dock component and update related classes.

LANGUAGE: diff
CODE:
- <div class="btm-nav btm-nav-sm">
+ <div class="dock dock-sm">
  <button>🏠</button>
-   <button class="active">🍿</button>
+   <button class="dock-active">🍿</button>
  <button>⚙️</button>
</div>

----------------------------------------

TITLE: Implementing Timeline with Text on Both Sides and Icons in HTML
DESCRIPTION: This snippet demonstrates how to create a timeline with text on both sides and icons using DaisyUI classes. It includes multiple timeline items with dates, icons, and descriptions.

LANGUAGE: HTML
CODE:
<ul class="timeline">
  <li>
    <div class="timeline-start">1984</div>
    <div class="timeline-middle">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" /></svg>
    </div>
    <div class="timeline-end timeline-box">First Macintosh computer</div>
    <hr/>
  </li>
  <!-- Additional timeline items... -->
</ul>

----------------------------------------

TITLE: Basic Rating Implementation in HTML
DESCRIPTION: Basic 5-star rating implementation using radio inputs with mask-star class. Each input represents one star and uses unique name attributes to avoid conflicts.

LANGUAGE: html
CODE:
<div class="$$rating">
  <input type="radio" name="rating-1" class="$$mask $$mask-star" aria-label="1 star" />
  <input type="radio" name="rating-1" class="$$mask $$mask-star" aria-label="2 star" checked="checked" />
  <input type="radio" name="rating-1" class="$$mask $$mask-star" aria-label="3 star" />
  <input type="radio" name="rating-1" class="$$mask $$mask-star" aria-label="4 star" />
  <input type="radio" name="rating-1" class="$$mask $$mask-star" aria-label="5 star" />
</div>

----------------------------------------

TITLE: Rectangular Content Skeleton Layout
DESCRIPTION: Vertical stack of skeleton placeholders representing a content card with header image and text lines, suitable for article or post loading states.

LANGUAGE: html
CODE:
<div class="flex w-52 flex-col gap-4">
  <div class="$$skeleton h-32 w-full"></div>
  <div class="$$skeleton h-4 w-28"></div>
  <div class="$$skeleton h-4 w-full"></div>
  <div class="$$skeleton h-4 w-full"></div>
</div>

----------------------------------------

TITLE: Custom Sized Avatars
DESCRIPTION: Multiple avatar implementations with different sizes using Tailwind width classes (w-32, w-20, w-16, w-8).

LANGUAGE: html
CODE:
<div class="$$avatar">
  <div class="w-32 rounded">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>
<div class="$$avatar">
  <div class="w-20 rounded">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" alt="Tailwind-CSS-Avatar-component" />
  </div>
</div>

----------------------------------------

TITLE: Importing Translate Component in Svelte
DESCRIPTION: This snippet imports the Translate component from the components directory in a Svelte application.

LANGUAGE: javascript
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Updating Card Component
DESCRIPTION: Rename card-bordered to card-border and replace card-compact with card-sm.

LANGUAGE: diff
CODE:
- <div class="card card-bordered">
+ <div class="card card-border">

LANGUAGE: diff
CODE:
- <div class="card card-compact">
+ <div class="card card-sm">

----------------------------------------

TITLE: Implementing Bottom-Center Toast with Multiple Alerts in HTML
DESCRIPTION: This snippet shows how to create a Toast positioned at the bottom-center of the page using the 'toast-center' class. The bottom position is default and doesn't require an additional class.

LANGUAGE: html
CODE:
<div class="$$toast $$toast-center">
  <div class="$$alert $$alert-info">
    <span>New mail arrived.</span>
  </div>
  <div class="$$alert $$alert-success">
    <span>Message sent successfully.</span>
  </div>
</div>

----------------------------------------

TITLE: Creating Loading Dots Animation in HTML with DaisyUI
DESCRIPTION: This code shows how to implement loading dots animations of different sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large dot animations.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-dots $$loading-xs"></span>
<span class="$$loading $$loading-dots $$loading-sm"></span>
<span class="$$loading $$loading-dots $$loading-md"></span>
<span class="$$loading $$loading-dots $$loading-lg"></span>
<span class="$$loading $$loading-dots $$loading-xl"></span>

----------------------------------------

TITLE: Basic Tooltip Implementation
DESCRIPTION: Shows how to create a basic tooltip that appears on hover using the tooltip class and data-tip attribute

LANGUAGE: html
CODE:
<div class="$$tooltip" data-tip="hello">
  <button class="$$btn">Hover me</button>
</div>

----------------------------------------

TITLE: Browser Mockup with Background Color Implementation
DESCRIPTION: Creates a browser window mockup with background color and border styling. Features a toolbar with address bar and a centered content area.

LANGUAGE: html
CODE:
<div class="$$mockup-browser border border-base-300 w-full">
  <div class="$$mockup-browser-toolbar">
    <div class="$$input">https://daisyui.com</div>
  </div>
  <div class="grid place-content-center h-80">Hello!</div>
</div>

----------------------------------------

TITLE: Stepped Range Slider with Measurements
DESCRIPTION: Range slider with step intervals of 25 and visual indicators showing step positions and numbers. Includes container with measurement marks and labels.

LANGUAGE: html
CODE:
<div class="w-full max-w-xs">
  <input type="range" min="0" max="100" value="25" class="$$range" step="25" />
  <div class="flex justify-between px-2.5 mt-2 text-xs">
    <span>|</span>
    <span>|</span>
    <span>|</span>
    <span>|</span>
    <span>|</span>
  </div>
  <div class="flex justify-between px-2.5 mt-2 text-xs">
    <span>1</span>
    <span>2</span>
    <span>3</span>
    <span>4</span>
    <span>5</span>
  </div>
</div>

----------------------------------------

TITLE: Ghost Textarea Implementation
DESCRIPTION: Implementation of a textarea with ghost styling (no background).

LANGUAGE: html
CODE:
<textarea class="$$textarea $$textarea-ghost" placeholder="Bio"></textarea>

----------------------------------------

TITLE: Applying Squircle Mask to Image in HTML
DESCRIPTION: This snippet demonstrates how to apply a squircle-shaped mask to an image using DaisyUI classes. The mask class and mask-squircle class are used to create the effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-squircle"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Implementing Dropdown with CSS Focus
DESCRIPTION: This snippet demonstrates how to create a dropdown using CSS focus. The content is displayed when the button is focused, providing a simple implementation method.

LANGUAGE: html
CODE:
<div class="$$dropdown">
  <div tabindex="0" role="button" class="$$btn m-1">Click</div>
  <ul tabindex="0" class="$$dropdown-content $$menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm">
    <li><a>Item 1</a></li>
    <li><a>Item 2</a></li>
  </ul>
</div>

----------------------------------------

TITLE: Downloading daisyUI llms.txt File (Shell)
DESCRIPTION: Command to download the daisyUI llms.txt file and save it to the .vscode directory.

LANGUAGE: sh
CODE:
curl -L https://daisyui.com/llms.txt --create-dirs -o .vscode/daisyui.md

----------------------------------------

TITLE: Implementing Colored Badges in HTML with DaisyUI
DESCRIPTION: This snippet shows how to create badges with different colors using DaisyUI classes. Colors include primary, secondary, accent, neutral, info, success, warning, and error.

LANGUAGE: html
CODE:
<div class="$$badge $$badge-primary">Primary</div>
<div class="$$badge $$badge-secondary">Secondary</div>
<div class="$$badge $$badge-accent">Accent</div>
<div class="$$badge $$badge-neutral">Neutral</div>
<div class="$$badge $$badge-info">Info</div>
<div class="$$badge $$badge-success">Success</div>
<div class="$$badge $$badge-warning">Warning</div>
<div class="$$badge $$badge-error">Error</div>

----------------------------------------

TITLE: Creating Responsive Alerts with Buttons in HTML using daisyUI
DESCRIPTION: This snippet shows how to create a responsive alert with buttons using daisyUI classes. It changes layout from vertical to horizontal on larger screens.

LANGUAGE: html
CODE:
<div role="alert" class="$$alert $$alert-vertical sm:$$alert-horizontal">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info h-6 w-6 shrink-0">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <span>we use cookies for no reason.</span>
  <div>
    <button class="$$btn $$btn-sm">Deny</button>
    <button class="$$btn $$btn-sm $$btn-primary">Accept</button>
  </div>
</div>

----------------------------------------

TITLE: Implementing Filter without HTML Form in DaisyUI
DESCRIPTION: This snippet demonstrates an alternative way to create a Filter component without using an HTML form. It uses a div container and includes a reset button as the first radio input.

LANGUAGE: html
CODE:
<div class="$$filter">
  <input class="$$btn $$filter-reset" type="radio" name="metaframeworks" aria-label="All"/>
  <input class="$$btn" type="radio" name="metaframeworks" aria-label="Sveltekit"/>
  <input class="$$btn" type="radio" name="metaframeworks" aria-label="Nuxt"/>
  <input class="$$btn" type="radio" name="metaframeworks" aria-label="Next.js"/>
</div>

----------------------------------------

TITLE: Creating Hero with Image Overlay
DESCRIPTION: Implements a hero section with a background image and overlay. Available in both HTML and JSX implementations with identical visual output.

LANGUAGE: html
CODE:
<div
  class="$$hero min-h-screen"
  style="background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp);">
  <div class="$$hero-overlay"></div>
  <div class="$$hero-content text-neutral-content text-center">
    <div class="max-w-md">
      <h1 class="mb-5 text-5xl font-bold">Hello there</h1>
      <p class="mb-5">
        Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem
        quasi. In deleniti eaque aut repudiandae et a id nisi.
      </p>
      <button class="$$btn $$btn-primary">Get Started</button>
    </div>
  </div>
</div>

LANGUAGE: jsx
CODE:
<div
  class="$$hero min-h-screen"
  style={{
    backgroundImage: "url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp)",
  }}>
  <div class="$$hero-overlay"></div>
  <div class="$$hero-content text-neutral-content text-center">
    <div class="max-w-md">
      <h1 class="mb-5 text-5xl font-bold">Hello there</h1>
      <p class="mb-5">
        Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem
        quasi. In deleniti eaque aut repudiandae et a id nisi.
      </p>
      <button class="$$btn $$btn-primary">Get Started</button>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating Ghost-style Select in HTML and React
DESCRIPTION: Shows how to implement a ghost-style Select element without background using DaisyUI classes. The example includes options for selecting fonts.

LANGUAGE: html
CODE:
<select class="$$select $$select-ghost">
  <option disabled selected>Pick a font</option>
  <option>Inter</option>
  <option>Poppins</option>
  <option>Raleway</option>
</select>

LANGUAGE: jsx
CODE:
<select defaultValue="Pick a font" class="$$select $$select-ghost">
  <option disabled={true}>Pick a font</option>
  <option>Inter</option>
  <option>Poppins</option>
  <option>Raleway</option>
</select>

----------------------------------------

TITLE: Implementing Anchor-based Modal - HTML
DESCRIPTION: Implements a modal dialog using URL anchor links. Modal visibility is controlled by URL parameters.

LANGUAGE: html
CODE:
<a href="#my_modal_8" class="$$btn">open modal</a>
<div class="$$modal" role="dialog" id="my_modal_8">
  <div class="$$modal-box">
    <h3 class="text-lg font-bold">Hello!</h3>
    <p class="py-4">This modal works with anchor links</p>
    <div class="$$modal-action">
      <a href="#" class="$$btn">Yay!</a>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Tailwind Utility Classes with DaisyUI Buttons
DESCRIPTION: Shows how to combine Tailwind's utility classes with DaisyUI buttons to customize border radius and padding.

LANGUAGE: html
CODE:
<button class="btn rounded-full">One</button>
<button class="btn rounded-none px-16">Two</button>

----------------------------------------

TITLE: Displaying Status Icons with Different Sizes in HTML
DESCRIPTION: This example demonstrates how to create status icons of various sizes using DaisyUI classes. Sizes range from extra small (xs) to extra large (xl).

LANGUAGE: html
CODE:
<div aria-label="status" class="status status-xs"></div>
<div aria-label="status" class="status status-sm"></div>
<div aria-label="status" class="status status-md"></div>
<div aria-label="status" class="status status-lg"></div>
<div aria-label="status" class="status status-xl"></div>

----------------------------------------

TITLE: Creating Boxed Countdown Display in HTML
DESCRIPTION: Demonstrates how to create a countdown display with each unit (days, hours, minutes, seconds) in its own styled box.

LANGUAGE: html
CODE:
<div class="grid auto-cols-max grid-flow-col gap-5 text-center">
  <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
    <span class="$$countdown font-mono text-5xl">
      <span style="--$$value:15;" aria-live="polite" aria-label="15">15</span>
    </span>
    days
  </div>
  <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
    <span class="$$countdown font-mono text-5xl">
      <span style="--$$value:10;" aria-live="polite" aria-label="10">10</span>
    </span>
    hours
  </div>
  <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
    <span class="$$countdown font-mono text-5xl">
      <span style="--$$value:24;" aria-live="polite" aria-label="24">24</span>
    </span>
    min
  </div>
  <div class="bg-neutral rounded-box text-neutral-content flex flex-col p-2">
    <span class="$$countdown font-mono text-5xl">
      <span style="--$$value:59;" aria-live="polite" aria-label="59">59</span>
    </span>
    sec
  </div>
</div>

----------------------------------------

TITLE: Downloading daisyUI as a single JS file
DESCRIPTION: Command to download the latest version of daisyUI as a single JavaScript file.

LANGUAGE: sh
CODE:
curl -sLo app/assets/tailwind/daisyui.js https://github.com/saadeghi/daisyui/releases/latest/download/daisyui.js

----------------------------------------

TITLE: Half Star Rating Implementation
DESCRIPTION: Advanced rating implementation supporting half-star ratings. Uses mask-half-1 and mask-half-2 classes to create split star appearances for more precise ratings.

LANGUAGE: html
CODE:
<div class="$$rating $$rating-lg $$rating-half">
  <input type="radio" name="rating-11" class="$$rating-hidden" />
  <input type="radio" name="rating-11" class="$$mask $$mask-star-2 $$mask-half-1 bg-green-500" aria-label="0.5 star" />
  <input type="radio" name="rating-11" class="$$mask $$mask-star-2 $$mask-half-2 bg-green-500" aria-label="1 star" />
  <input type="radio" name="rating-11" class="$$mask $$mask-star-2 $$mask-half-1 bg-green-500" aria-label="1.5 star" checked="checked" />
  <!-- Additional inputs omitted for brevity -->
</div>

----------------------------------------

TITLE: Implementing Filter with HTML Form in DaisyUI
DESCRIPTION: This snippet shows how to create a Filter component using an HTML form with radio buttons and a reset button. It uses DaisyUI classes for styling.

LANGUAGE: html
CODE:
<form class="$$filter">
  <input class="$$btn $$btn-square" type="reset" value="×"/>
  <input class="$$btn" type="radio" name="frameworks" aria-label="Svelte"/>
  <input class="$$btn" type="radio" name="frameworks" aria-label="Vue"/>
  <input class="$$btn" type="radio" name="frameworks" aria-label="React"/>
</form>

----------------------------------------

TITLE: Creating Volume Icon Swap in HTML
DESCRIPTION: Implementation of swap component to toggle between volume on/off SVG icons using a checkbox input.

LANGUAGE: html
CODE:
<label class="$$swap">
  <!-- this hidden checkbox controls the state -->
  <input type="checkbox" />

  <!-- volume on icon -->
  <svg class="$$swap-on fill-current" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24">
    <path d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" />
  </svg>

  <!-- volume off icon -->
  <svg class="$$swap-off fill-current" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24">
    <path d="M3,9H7L12,4V20L7,15H3V9M16.59,12L14,9.41L15.41,8L18,10.59L20.59,8L22,9.41L19.41,12L22,14.59L20.59,16L18,13.41L15.41,16L14,14.59L16.59,12Z" />
  </svg>
</label>

----------------------------------------

TITLE: Importing Translate Component in Svelte
DESCRIPTION: A Svelte script block importing the Translate component from the components directory.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Implementing Date Validation with DaisyUI Validator
DESCRIPTION: This snippet demonstrates how to use the validator class for date input validation. It restricts the date range to the year 2025 and includes a hint.

LANGUAGE: html
CODE:
<input type="date" class="$$input $$validator" required placeholder="Pick a date in 2025" 
min="2025-01-01" max="2025-12-31"
  title="Must be valid URL" />
<p class="$$validator-hint">Must be 2025</p>

----------------------------------------

TITLE: Textarea with Form Control and Labels
DESCRIPTION: Implementation of a textarea within a fieldset including legend and label elements.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset">
  <legend class="$$fieldset-legend">Your bio</legend>
  <textarea class="$$textarea h-24" placeholder="Bio"></textarea>
  <div class="$$fieldset-label">Optional</div>
</fieldset>

----------------------------------------

TITLE: Integrating Keyboard Keys in Text with DaisyUI
DESCRIPTION: Demonstrates how to embed a keyboard key within a text sentence using DaisyUI's kbd class. This example uses a small-sized 'F' key.

LANGUAGE: html
CODE:
Press
<kbd class="kbd kbd-sm">F</kbd>
to pay respects.

----------------------------------------

TITLE: Initializing Basic Countdown in HTML
DESCRIPTION: Demonstrates the basic usage of the countdown component. The --value CSS variable is used to set the displayed number, which should be between 0 and 99.

LANGUAGE: html
CODE:
<span class="$$countdown">
  <span style="--$$value:59;" aria-live="polite" aria-label="59">59</span>
</span>

----------------------------------------

TITLE: Creating Accordion with Arrow Icons in HTML using DaisyUI
DESCRIPTION: This code snippet shows how to implement an accordion with arrow icons using DaisyUI classes. It adds visual indicators for expandable sections.

LANGUAGE: html
CODE:
<div class="$$collapse $$collapse-arrow bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-2" checked="checked" />
  <div class="$$collapse-title font-semibold">How do I create an account?</div>
  <div class="$$collapse-content text-sm">Click the "Sign Up" button in the top right corner and follow the registration process.</div>
</div>
<div class="$$collapse $$collapse-arrow bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-2" />
  <div class="$$collapse-title font-semibold">I forgot my password. What should I do?</div>
  <div class="$$collapse-content text-sm">Click on "Forgot Password" on the login page and follow the instructions sent to your email.</div>
</div>
<div class="$$collapse $$collapse-arrow bg-base-100 border border-base-300">
  <input type="radio" name="my-accordion-2" />
  <div class="$$collapse-title font-semibold">How do I update my profile information?</div>
  <div class="$$collapse-content text-sm">Go to "My Account" settings and select "Edit Profile" to make changes.</div>
</div>

----------------------------------------

TITLE: Setting a Single Default Theme in daisyUI
DESCRIPTION: Demonstrates how to set a single theme (dracula) as the default and only available theme in daisyUI.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  themes: dracula --default;
}

----------------------------------------

TITLE: Radio Button Size Variants
DESCRIPTION: Demonstrates different size variants of radio buttons from extra small (xs) to extra large (xl) using DaisyUI size modifier classes.

LANGUAGE: html
CODE:
<input type="radio" name="radio-2" class="$$radio $$radio-xs" checked="checked" />
<input type="radio" name="radio-2" class="$$radio $$radio-sm" checked="checked" />
<input type="radio" name="radio-2" class="$$radio $$radio-md" checked="checked" />
<input type="radio" name="radio-2" class="$$radio $$radio-lg" checked="checked" />
<input type="radio" name="radio-2" class="$$radio $$radio-xl" checked="checked" />

----------------------------------------

TITLE: Read-only Rating Display
DESCRIPTION: Implementation of a non-interactive rating display using div elements instead of radio inputs. Useful for displaying static ratings.

LANGUAGE: html
CODE:
<div class="$$rating">
  <div class="$$mask $$mask-star" aria-label="1 star"></div>
  <div class="$$mask $$mask-star" aria-label="2 star"></div>
  <div class="$$mask $$mask-star" aria-label="3 star" aria-current="true"></div>
  <div class="$$mask $$mask-star" aria-label="4 star"></div>
  <div class="$$mask $$mask-star" aria-label="5 star"></div>
</div>

----------------------------------------

TITLE: Vertical Join Component Layout
DESCRIPTION: Demonstrates how to create a vertical layout of joined items using the join-vertical class modifier.

LANGUAGE: html
CODE:
<div class="$$join $$join-vertical">
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
</div>

----------------------------------------

TITLE: Image Comparison Using DaisyUI Diff Component
DESCRIPTION: Implementation of a side-by-side image comparison using the DaisyUI diff component. The component displays two versions of the same image with a resizable comparison slider and includes accessibility attributes.

LANGUAGE: html
CODE:
<figure class="$$diff aspect-16/9" tabindex="0">
  <div class="$$diff-item-1" role="img">
    <img alt="daisy" src="https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a.webp" />
  </div>
  <div class="$$diff-item-2" role="img" tabindex="0">
    <img
      alt="daisy"
      src="https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a-blur.webp" />
  </div>
  <div class="$$diff-resizer"></div>
</figure>

----------------------------------------

TITLE: Implementing Toggle Switches with Different Sizes in HTML
DESCRIPTION: Shows how to create toggle switches of various sizes using DaisyUI's size modifier classes. Sizes range from extra small (xs) to extra large (xl).

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$toggle $$toggle-xs" />
<input type="checkbox" checked="checked" class="$$toggle $$toggle-sm" />
<input type="checkbox" checked="checked" class="$$toggle $$toggle-md" />
<input type="checkbox" checked="checked" class="$$toggle $$toggle-lg" />
<input type="checkbox" checked="checked" class="$$toggle $$toggle-xl" />

----------------------------------------

TITLE: Avatar with Presence Indicator
DESCRIPTION: Avatar implementation with online/offline status indicators using avatar-online and avatar-offline classes.

LANGUAGE: html
CODE:
<div class="$$avatar $$avatar-online">
  <div class="w-24 rounded-full">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>

----------------------------------------

TITLE: Excluding Multiple Components in daisyUI
DESCRIPTION: Illustrates how to exclude multiple specific components from daisyUI, useful for customizing the library's usage.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  exclude: checkbox, footer, typography, glass, rootcolor, rootscrollgutter;
}

----------------------------------------

TITLE: Using Primary Color Utility Classes in HTML
DESCRIPTION: This snippet demonstrates how to use daisyUI's primary color utility classes for background and text colors. It also shows how to control the opacity of the text color.

LANGUAGE: html
CODE:
<div class="bg-primary text-primary-content">Primary color</div>
<div class="bg-primary text-primary-content/60">Primary-content color with 60% opacity</div>

----------------------------------------

TITLE: Implementing Loading Bars Animation in HTML with DaisyUI
DESCRIPTION: This snippet shows how to create loading bars animations of various sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large bar animations.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-bars $$loading-xs"></span>
<span class="$$loading $$loading-bars $$loading-sm"></span>
<span class="$$loading $$loading-bars $$loading-md"></span>
<span class="$$loading $$loading-bars $$loading-lg"></span>
<span class="$$loading $$loading-bars $$loading-xl"></span>

----------------------------------------

TITLE: Basic File Input in HTML with DaisyUI
DESCRIPTION: Demonstrates the basic usage of a file input element with DaisyUI styling. Uses the 'file-input' class for styling.

LANGUAGE: html
CODE:
<input type="file" class="file-input" />

----------------------------------------

TITLE: Displaying Keyboard Keys in Various Sizes with DaisyUI
DESCRIPTION: Shows how to render keyboard keys in different sizes using DaisyUI's size modifiers. Includes extra small, small, medium, large, and extra large sizes.

LANGUAGE: html
CODE:
<kbd class="kbd kbd-xs">Xsmall</kbd>
<kbd class="kbd kbd-sm">Small</kbd>
<kbd class="kbd kbd-md">Medium</kbd>
<kbd class="kbd kbd-lg">Large</kbd>
<kbd class="kbd kbd-xl">Xlarge</kbd>

----------------------------------------

TITLE: Chat Bubbles with Avatar Images
DESCRIPTION: Shows how to add avatar images to chat bubbles using the chat-image class combined with DaisyUI's avatar component.

LANGUAGE: html
CODE:
<div class="$$chat $$chat-start">
  <div class="$$chat-image $$avatar">
    <div class="w-10 rounded-full">
      <img alt="Tailwind CSS chat bubble component" src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
    </div>
  </div>
  <div class="$$chat-bubble">It was said that you would, destroy the Sith, not join them.</div>
</div>

----------------------------------------

TITLE: Updating Footer Component
DESCRIPTION: Add footer-horizontal class to make footer horizontal at specific screen sizes.

LANGUAGE: diff
CODE:
- <footer class="footer">
+ <footer class="footer md:footer-horizontal">

----------------------------------------

TITLE: Implementing Outline Style Badges in HTML with DaisyUI
DESCRIPTION: This snippet shows how to create badges with an outline style using DaisyUI classes. The outline style is combined with different color classes.

LANGUAGE: html
CODE:
<div class="$$badge $$badge-outline $$badge-primary">Primary</div>
<div class="$$badge $$badge-outline $$badge-secondary">Secondary</div>
<div class="$$badge $$badge-outline $$badge-accent">Accent</div>
<div class="$$badge $$badge-outline $$badge-neutral">Neutral</div>
<div class="$$badge $$badge-outline $$badge-info">Info</div>
<div class="$$badge $$badge-outline $$badge-success">Success</div>
<div class="$$badge $$badge-outline $$badge-warning">Warning</div>
<div class="$$badge $$badge-outline $$badge-error">Error</div>

----------------------------------------

TITLE: Applying Rightward Triangle Mask to Image in HTML
DESCRIPTION: This snippet illustrates how to apply a rightward-pointing triangle mask to an image using DaisyUI classes. The mask and mask-triangle-4 classes are combined to create this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-triangle-4"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: File Input with Fieldset and Legend in HTML using DaisyUI
DESCRIPTION: Illustrates how to wrap a file input in a fieldset with a legend and label using DaisyUI classes. Includes 'fieldset', 'fieldset-legend', and 'fieldset-label' classes.

LANGUAGE: html
CODE:
<fieldset class="fieldset">
  <legend class="fieldset-legend">Pick a file</legend>
  <input type="file" class="file-input" />
  <label class="fieldset-label">Max size 2MB</label>
</fieldset>

----------------------------------------

TITLE: Basic Fieldset Implementation with Legend and Label
DESCRIPTION: Demonstrates the basic structure of a fieldset with a legend title and label description. Uses core fieldset classes for styling.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset">
  <legend class="$$fieldset-legend">Page title</legend>
  <input type="text" class="$$input" placeholder="My awesome page" />
  <p class="$$fieldset-label">You can edit page title later on from settings</p>
</fieldset>

----------------------------------------

TITLE: Basic Chat Bubble Positioning
DESCRIPTION: Demonstrates basic chat bubble positioning using chat-start and chat-end classes. Shows how to align chat bubbles to either side of the container.

LANGUAGE: html
CODE:
<div class="$$chat $$chat-start">
  <div class="$$chat-bubble">
    It's over Anakin,
    <br />
    I have the high ground.
  </div>
</div>
<div class="$$chat $$chat-end">
  <div class="$$chat-bubble">You underestimate my power!</div>
</div>

----------------------------------------

TITLE: Installing daisyUI Package
DESCRIPTION: Installs the latest version of daisyUI package using npm.

LANGUAGE: sh
CODE:
npm install daisyui@latest

----------------------------------------

TITLE: Text Input with Datalist in HTML
DESCRIPTION: A text input with datalist for suggestions.

LANGUAGE: html
CODE:
<input type="text" class="$$input" placeholder="Which browser do you use" list="browsers"/>
<datalist id="browsers">
  <option value="Chrome">
  <option value="Firefox">
  <option value="Safari">
  <option value="Opera">
  <option value="Edge">
</datalist>

----------------------------------------

TITLE: Center-Snapping Carousel
DESCRIPTION: Carousel implementation where items snap to the center using the carousel-center modifier class.

LANGUAGE: html
CODE:
<div class="$$carousel $$carousel-center rounded-box">
  <div class="$$carousel-item">
    <img src="https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp" alt="Pizza" />
  </div>
  <!-- Additional carousel items -->
</div>

----------------------------------------

TITLE: List Component with Third Column Growth
DESCRIPTION: Demonstrates a list where the third column expands using the list-col-grow class. Features numbered entries with profile images and a play button.

LANGUAGE: html
CODE:
<ul class="$$list bg-base-100 rounded-box shadow-md">
  <li class="$$list-row">
    <div class="text-4xl font-thin opacity-30 tabular-nums">01</div>
    <div><img class="size-10 rounded-box" src="https://img.daisyui.com/images/profile/demo/1@94.webp"/></div>
    <div class="$$list-col-grow">
      <!-- Content -->
    </div>
    <button class="$$btn $$btn-square $$btn-ghost">
      <!-- Button content -->
    </button>
  </li>
</ul>

----------------------------------------

TITLE: Basic Divider Implementation in DaisyUI
DESCRIPTION: Shows the basic implementation of a vertical divider with text between two content sections using DaisyUI classes.

LANGUAGE: html
CODE:
<div class="flex w-full flex-col">
  <div class="$$card bg-base-300 rounded-box grid h-20 place-items-center">content</div>
  <div class="$$divider">OR</div>
  <div class="$$card bg-base-300 rounded-box grid h-20 place-items-center">content</div>
</div>

----------------------------------------

TITLE: Size Variants for Range Slider
DESCRIPTION: Demonstration of different size variants available for range sliders, including extra small (xs), small (sm), medium (md), large (lg), and extra large (xl).

LANGUAGE: html
CODE:
<input type="range" min="0" max="100" value="30" class="$$range $$range-xs" />
<input type="range" min="0" max="100" value="40" class="$$range $$range-sm" />
<input type="range" min="0" max="100" value="50" class="$$range $$range-md" />
<input type="range" min="0" max="100" value="60" class="$$range $$range-lg" />
<input type="range" min="0" max="100" value="70" class="$$range $$range-xl" />

----------------------------------------

TITLE: Implementing Focus-based Collapse Component
DESCRIPTION: Basic collapse component that responds to focus events. The content is revealed when the container gains focus and hides when it loses focus.

LANGUAGE: html
CODE:
<div tabindex="0" class="collapse bg-base-100 border-base-300 border">
  <div class="collapse-title font-semibold">How do I create an account?</div>
  <div class="collapse-content text-sm">
    Click the "Sign Up" button in the top right corner and follow the registration process.
  </div>
</div>

----------------------------------------

TITLE: Creating a new Rails project
DESCRIPTION: Commands to create a new Rails project and navigate to its directory.

LANGUAGE: sh
CODE:
rails new my-app
cd my-app

----------------------------------------

TITLE: Implementing Details/Summary Based Collapse
DESCRIPTION: Collapse implementation using native HTML details and summary tags. Does not support animations due to HTML details tag limitations.

LANGUAGE: html
CODE:
<details class="collapse bg-base-100 border-base-300 border">
  <summary class="collapse-title font-semibold">How do I create an account?</summary>
  <div class="collapse-content text-sm">
    Click the "Sign Up" button in the top right corner and follow the registration process.
  </div>
</details>

----------------------------------------

TITLE: Configuring PostCSS
DESCRIPTION: Creates a PostCSS configuration file to enable Tailwind CSS plugin

LANGUAGE: json
CODE:
{
  "plugins": {
    "@tailwindcss/postcss": {}
  }
}

----------------------------------------

TITLE: Horizontal Divider Implementation
DESCRIPTION: Demonstrates how to create a horizontal divider that separates content side by side.

LANGUAGE: html
CODE:
<div class="flex w-full">
  <div class="$$card bg-base-300 rounded-box grid h-20 grow place-items-center">content</div>
  <div class="$$divider $$divider-horizontal">OR</div>
  <div class="$$card bg-base-300 rounded-box grid h-20 grow place-items-center">content</div>
</div>

----------------------------------------

TITLE: Creating Breadcrumbs with Icons using DaisyUI and SVG in HTML
DESCRIPTION: This code snippet shows how to implement breadcrumbs with icons using DaisyUI classes and inline SVG elements. It includes folder icons for home and documents, and a document-add icon for the current page.

LANGUAGE: html
CODE:
<div class="$$breadcrumbs text-sm">
  <ul>
    <li>
      <a>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="h-4 w-4 stroke-current">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
        </svg>
        Home
      </a>
    </li>
    <li>
      <a>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="h-4 w-4 stroke-current">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
        </svg>
        Documents
      </a>
    </li>
    <li>
      <span class="inline-flex items-center gap-2">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="h-4 w-4 stroke-current">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Add Document
      </span>
    </li>
  </ul>
</div>

----------------------------------------

TITLE: Implementing Status Icon with Ping Animation in HTML
DESCRIPTION: This example demonstrates how to add a ping animation to a status icon using DaisyUI and Tailwind CSS classes. It creates a pulsing effect for the status icon.

LANGUAGE: html
CODE:
<div class="inline-grid *:[grid-area:1/1]">
  <div class="status status-error animate-ping"></div>
  <div class="status status-error"></div>
</div> Server is down

----------------------------------------

TITLE: Creating Right-Side DaisyUI Drawer in HTML
DESCRIPTION: HTML implementation of a Drawer that opens from the right side of the page using the drawer-end class.

LANGUAGE: html
CODE:
<div class="$$drawer $$drawer-end">
  <input id="my-drawer-4" type="checkbox" class="$$drawer-toggle" />
  <div class="$$drawer-content">
    <!-- Page content here -->
    <label for="my-drawer-4" class="$$drawer-button $$btn $$btn-primary">Open drawer</label>
  </div>
  <div class="$$drawer-side">
    <label for="my-drawer-4" aria-label="close sidebar" class="$$drawer-overlay"></label>
    <ul class="$$menu bg-base-200 text-base-content min-h-full w-80 p-4">
      <!-- Sidebar content here -->
      <li><a>Sidebar Item 1</a></li>
      <li><a>Sidebar Item 2</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Installing Tailwind CSS and DaisyUI Dependencies
DESCRIPTION: Command to install the required packages including Tailwind CSS, Tailwind Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Linking compiled CSS in HTML
DESCRIPTION: HTML code to link the compiled CSS file in the project's HTML file.

LANGUAGE: html
CODE:
<link href="./output.css" rel="stylesheet">

----------------------------------------

TITLE: Running Tailwind CSS Upgrade Tool
DESCRIPTION: Use the official Tailwind CSS upgrade tool to automatically apply new changes to your project.

LANGUAGE: bash
CODE:
npx @tailwindcss/upgrade

----------------------------------------

TITLE: Creating Window Mockup with Border
DESCRIPTION: Implements a window mockup with a border styling using DaisyUI's mockup-window class. The component includes a border around the window and a separate border for the content area.

LANGUAGE: html
CODE:
<div class="$$mockup-window border border-base-300 w-full">
  <div class="grid place-content-center border-t border-base-300 h-80">Hello!</div>
</div>

----------------------------------------

TITLE: Implementing Rotating Theme Switch in HTML
DESCRIPTION: Implementation of swap component with rotation effect to toggle between sun/moon icons for theme switching.

LANGUAGE: html
CODE:
<label class="$$swap $$swap-rotate">
  <input type="checkbox" />
  <svg class="$$swap-on h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" />
  </svg>
  <svg class="$$swap-off h-10 w-10 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" />
  </svg>
</label>

----------------------------------------

TITLE: Basic Responsive Footer with Navigation Links
DESCRIPTION: A basic footer implementation that's vertical by default and horizontal on small screens and up. Contains navigation sections for Services, Company and Legal links.

LANGUAGE: html
CODE:
<footer class="$$footer sm:$$footer-horizontal bg-neutral text-neutral-content p-10">
  <nav>
    <h6 class="$$footer-title">Services</h6>
    <a class="$$link $$link-hover">Branding</a>
    <a class="$$link $$link-hover">Design</a>
    <a class="$$link $$link-hover">Marketing</a>
    <a class="$$link $$link-hover">Advertisement</a>
  </nav>
  <!-- Additional nav sections -->
</footer>

----------------------------------------

TITLE: Creating Forms with Mary UI Components in Laravel Blade
DESCRIPTION: Example of creating a form using Mary UI components with Livewire wire:model bindings and custom styling options. Shows how to implement inputs, buttons, and form actions.

LANGUAGE: html
CODE:
<x-form wire:submit="save">
  <x-input label="Name" wire:model="name" />
  <x-input
    label="Amount"
    wire:model="amount"
    prefix="USD"
    money
    hint="It submits an unmasked value" />
  <x-slot:actions>
    <x-button label="Cancel" />
    <x-button label="Click me!" class="btn-primary" type="submit" spinner="save" />
  </x-slot:actions>
</x-form>

----------------------------------------

TITLE: Starting Development Server for daisyUI Online Store
DESCRIPTION: Command to start the development server for the daisyUI online store template, running the site at http://localhost:3000.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Implementing Disabled Toggle Switches in HTML
DESCRIPTION: Shows how to create disabled toggle switches, both in checked and unchecked states. The disabled attribute is used to prevent user interaction.

LANGUAGE: html
CODE:
<input type="checkbox" class="$$toggle" disabled />
<input type="checkbox" class="$$toggle" disabled checked="checked" />

----------------------------------------

TITLE: Running the Development Server
DESCRIPTION: Command to start the Eleventy development server with hot reloading

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Multi-line Code Mockup with Status Indicators
DESCRIPTION: Shows a three-line code mockup with different prefix symbols and status colors for command execution flow.

LANGUAGE: html
CODE:
<div class="$$mockup-code w-full">
  <pre data-prefix="$"><code>npm i daisyui</code></pre>
  <pre data-prefix=">" class="text-warning"><code>installing...</code></pre>
  <pre data-prefix=">" class="text-success"><code>Done!</code></pre>
</div>

----------------------------------------

TITLE: Customizing Homepage Layout in Next.js
DESCRIPTION: Example of customizing the homepage layout in the Next.js-based online store template, including various components like Hero, Features, and TrendingProducts.

LANGUAGE: tsx
CODE:
export default async function Home() {
  return (
    <div>
      <Hero />
      <Features />
      <TrendingProducts />
      <Categories />
      <OfferCard />
      <NewArrivals />
      <NewsLetter />
    </div>
  );
}

----------------------------------------

TITLE: Custom Border Radius Join Implementation
DESCRIPTION: Example of customizing border radius on join components, specifically rounding the right edge of the last element.

LANGUAGE: html
CODE:
<div class="$$join">
  <input class="$$input $$join-item" placeholder="Email" />
  <button class="$$btn $$join-item rounded-r-full">Subscribe</button>
</div>

----------------------------------------

TITLE: Safelist File Content Example
DESCRIPTION: Example content of a safelist file containing required Tailwind classes

LANGUAGE: txt
CODE:
bg-red-500
bg-green-500
bg-blue-500

----------------------------------------

TITLE: Creating Checkbox with Fieldset and Label in HTML
DESCRIPTION: This example shows how to create a checkbox within a fieldset, including a legend and label, using DaisyUI and custom classes.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset p-4 bg-base-100 border border-base-300 rounded-box w-64">
  <legend class="$$fieldset-legend">Login options</legend>
  <label class="$$fieldset-label">
    <input type="checkbox" checked="checked" class="$$checkbox" />
    Remember me
  </label>
</fieldset>

----------------------------------------

TITLE: Customizing Select Colors in HTML and React
DESCRIPTION: Shows how to apply different color styles to Select elements using DaisyUI classes. Includes examples for primary, secondary, accent, and other color variants.

LANGUAGE: html
CODE:
<select class="$$select $$select-primary">
  <option disabled selected>Pick a text editor</option>
  <option>VScode</option>
  <option>VScode fork</option>
  <option>Another VScode fork</option>
</select>

LANGUAGE: jsx
CODE:
<select defaultValue="Pick a text editor" class="$$select $$select-primary">
  <option disabled={true}>Pick a text editor</option>
  <option>VScode</option>
  <option>VScode fork</option>
  <option>Another VScode fork</option>
</select>

----------------------------------------

TITLE: Colored Code Mockup
DESCRIPTION: Shows how to customize the mockup background and text colors using utility classes.

LANGUAGE: html
CODE:
<div class="$$mockup-code bg-primary text-primary-content w-full">
  <pre><code>can be any color!</code></pre>
</div>

----------------------------------------

TITLE: Creating a new SvelteKit project using npm
DESCRIPTION: Command to initialize a new SvelteKit project using npm. It creates a skeleton project as a barebones scaffolding for a new SvelteKit app.

LANGUAGE: bash
CODE:
npm create svelte@latest my-app

----------------------------------------

TITLE: Disabling All Themes in daisyUI
DESCRIPTION: Illustrates how to disable all themes in daisyUI, useful for adding custom themes separately.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  themes: false;
}

----------------------------------------

TITLE: Link within Paragraph Context in HTML with DaisyUI
DESCRIPTION: Shows how to use the link class within a paragraph to restore the normal link appearance that Tailwind CSS resets by default.

LANGUAGE: html
CODE:
<p>
  Tailwind CSS resets the style of links by default.
  <br />
  Add "link" class to make it look like a
  <a class="$$link">normal link</a>
  again.
</p>

----------------------------------------

TITLE: Installing Dependencies for Astro Documentation Template
DESCRIPTION: Commands for installing dependencies and running the development server for the Astro Documentation Template.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Code Mockup with Highlighted Error Line
DESCRIPTION: Demonstrates line numbering and error highlighting with warning background color.

LANGUAGE: html
CODE:
<div class="$$mockup-code w-full">
  <pre data-prefix="1"><code>npm i daisyui</code></pre>
  <pre data-prefix="2"><code>installing...</code></pre>
  <pre data-prefix="3" class="bg-warning text-warning-content"><code>Error!</code></pre>
</div>

----------------------------------------

TITLE: Configuring CSS for daisyUI
DESCRIPTION: Sets up the CSS file to include Tailwind CSS and daisyUI plugin configurations.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Starting Vite Development Server
DESCRIPTION: Command to run Vite for asset compilation in development mode.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Excluding a Single Component in daisyUI
DESCRIPTION: Shows how to exclude a single component (rootscrollgutter) from daisyUI while including all others.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  exclude: rootscrollgutter;
}

----------------------------------------

TITLE: Creating Loading Ball Animation in HTML with DaisyUI
DESCRIPTION: This code demonstrates how to implement loading ball animations of different sizes using DaisyUI classes. It includes examples for extra small, small, medium, large, and extra large ball animations.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-ball $$loading-xs"></span>
<span class="$$loading $$loading-ball $$loading-sm"></span>
<span class="$$loading $$loading-ball $$loading-md"></span>
<span class="$$loading $$loading-ball $$loading-lg"></span>
<span class="$$loading $$loading-ball $$loading-xl"></span>

----------------------------------------

TITLE: Extending Product Data with Custom Metadata in JSON
DESCRIPTION: Example of a metadata.json entry for extending product information beyond what Lemon Squeezy provides, including categories, variants, images, and additional details.

LANGUAGE: json
CODE:
{
  "id": "12345",
  "availability": true,
  "sale": true,
  "category": ["trending", "bestsellers"],
  "original_price": "$50",
  "variant": {
    "size": [
      { "name": "Small", "link": "https://example.com/small" },
      { "name": "Medium", "link": "https://example.com/medium" }
    ]
  },
  "info": {
    "Material": "100% Cotton",
    "Care Instructions": "Machine washable"
  },
  "images": ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
}

----------------------------------------

TITLE: Installing daisyUI 5
DESCRIPTION: Install the latest version of daisyUI using npm.

LANGUAGE: bash
CODE:
npm i -D daisyui@latest

----------------------------------------

TITLE: Implementing Ghost Style Badge in HTML with DaisyUI
DESCRIPTION: This snippet shows how to create a badge with a ghost style using DaisyUI classes. The ghost style gives the badge a transparent background.

LANGUAGE: html
CODE:
<div class="$$badge $$badge-ghost">ghost</div>

----------------------------------------

TITLE: Updating Stack Component
DESCRIPTION: Set width and height on the stack container instead of individual items.

LANGUAGE: diff
CODE:
- <div class="stack">
-   <div class="card bg-base-100 w-36 h-36">Text</div>
-   <div class="card bg-base-100 w-36 h-36">Text</div>
-   <div class="card bg-base-100 w-36 h-36">Text</div>
+ <div class="stack w-36 h-32">
+   <div class="card bg-base-100">Text</div>
+   <div class="card bg-base-100">Text</div>
+   <div class="card bg-base-100">Text</div>
</div>

----------------------------------------

TITLE: Starting the Rails server
DESCRIPTION: Command to start the Rails development server.

LANGUAGE: sh
CODE:
./bin/dev

----------------------------------------

TITLE: Updating Avatar Component
DESCRIPTION: Rename online, offline, and placeholder classes for the Avatar component.

LANGUAGE: diff
CODE:
- <div class="avatar online">
+ <div class="avatar avatar-online">
  <div class="w-24 rounded-full">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>

LANGUAGE: diff
CODE:
- <div class="avatar offline">
+ <div class="avatar avatar-offline">
  <div class="w-24 rounded-full">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>

----------------------------------------

TITLE: Colored Progress Bar Variants
DESCRIPTION: Shows how to implement progress bars with different color themes including primary, secondary, accent, neutral, info, success, warning, and error variations

LANGUAGE: html
CODE:
<progress class="$$progress $$progress-primary w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-secondary w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-accent w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-neutral w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-info w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-success w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-warning w-56" value="70" max="100"></progress>
<progress class="$$progress $$progress-error w-56" value="70" max="100"></progress>

----------------------------------------

TITLE: Rendering Installation Instructions in Svelte/HTML
DESCRIPTION: This section renders the installation instructions and framework tutorials using Svelte components and HTML structure.

LANGUAGE: svelte
CODE:
<Translate text="You need <a target=_blank' href='https://nodejs.org/en/download/'>Node.js</a> and <a target='_blank' href='https://tailwindcss.com/docs/installation/'>Tailwind CSS</a> installed." />

<div class="not-prose">
  <Install/>
</div>

## Framework install tutorials

<Translate text="See example setup of daisyUI and Tailwind CSS on different frameworks and build tools."/>

<div class="not-prose grid grid-cols-2 md:grid-cols-3 py-6 *:-ms-px *:-mt-px">

{#each data.frameworks as framework}
  <a href="{framework.path}" class="bg-base-100 relative overflow-hidden group flex items-center gap-4 flex-col px-4 py-8 border border-base-content/5 hover:shadow-md hover:-translate-y-1 focus:shadow-sm focus:-translate-y-0.5 transition-all">
    <div class="grid *:[grid-area:1/1] [&_svg]:size-16">
      <div class="blur-lg scale-400 saturate-200 group-hover:[transform:scaleY(.4)] [transform:scaleY(.3)] transition-all translate-y-26 duration-300 opacity-5 group-hover:opacity-30">{@html framework.logo}</div>
      <div class="size-full absolute inset-0" style="background: radial-gradient(circle, var(--color-base-100) 25%, transparent 26%),radial-gradient(circle at bottom left, var(--color-base-100) 12%, transparent 13%),radial-gradient(circle at bottom right, var(--color-base-100) 12%, transparent 13%),radial-gradient(circle at top left, var(--color-base-100) 12%, transparent 13%),radial-gradient(circle at top right, var(--color-base-100) 12%, transparent 13%); background-size: 0.25rem 0.25rem;"></div>
      <div class="z-2">{@html framework.logo}</div>
      <div class="z-1 group-hover:opacity-0 brightness-125 group-hover:scale-110 group-hover:duration-800 duration-0 transition-all">{@html framework.logo}</div>
    </div>
    <div class="text-xs z-3 sm:text-sm font-medium transition-colors group-hover:text-base-content text-base-content/60 [text-wrap:balance] text-center">{framework.name}</div>
  </a>
{/each}

</div>

----------------------------------------

TITLE: Disabling daisyUI Logs
DESCRIPTION: Shows how to disable daisyUI logs, which can be useful for cleaning up console output in production environments.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  logs: false;
}

----------------------------------------

TITLE: Dynamic Class Name Example - Not Recommended
DESCRIPTION: Example of a dynamic class name pattern that should be avoided with Tailwind CSS as it prevents proper class detection.

LANGUAGE: html
CODE:
btn-{$color}

----------------------------------------

TITLE: Excluding DaisyUI Base Styles Configuration
DESCRIPTION: Example showing how to exclude specific base styles (rootscrollgutter and rootcolor) from daisyUI using the plugin configuration in PostCSS.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  exclude: rootscrollgutter, rootcolor;
}

----------------------------------------

TITLE: Configuring Tailwind CSS and daisyUI in PostCSS
DESCRIPTION: This snippet shows how to set up the CSS file to use Tailwind CSS and daisyUI. It imports Tailwind CSS, specifies source files, and adds the daisyUI plugin.

LANGUAGE: postcss
CODE:
@import "tailwindcss" source(none);
@source "./public/*.{html,js}";
@plugin "daisyui";

----------------------------------------

TITLE: Customizing Radial Progress Size and Thickness in HTML
DESCRIPTION: Illustrates how to modify the size and thickness of radial progress indicators using CSS variables. Two examples are provided with different sizes and thicknesses.

LANGUAGE: html
CODE:
<div class="$$radial-progress" style="--$$value:70; --$$size:12rem; --$$thickness: 2px;" aria-valuenow="70" role="progressbar">70%</div>
<div class="$$radial-progress" style="--$$value:70; --$$size:12rem; --$$thickness: 2rem;" aria-valuenow="70" role="progressbar">70%</div>

----------------------------------------

TITLE: Migration Example: Bottom Navigation Changes
DESCRIPTION: Shows migration from bottom-nav to new dock component

LANGUAGE: HTML
CODE:
- <div class="btm-nav btm-nav-sm">
+ <div class="dock dock-sm">
  <button>🏠</button>
-   <button class="active">🍿</button>
+   <button class="dock-active">🍿</button>
  <button>⚙️</button>
</div>

----------------------------------------

TITLE: Setting up CSS with daisyUI
DESCRIPTION: Configures the CSS file to import Tailwind CSS and use the daisyUI plugin.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Colored File Inputs in HTML using DaisyUI
DESCRIPTION: Shows how to apply different color styles to file inputs using DaisyUI classes. Includes primary, secondary, accent, neutral, info, success, warning, and error color options.

LANGUAGE: html
CODE:
<input type="file" class="file-input file-input-primary" />
<input type="file" class="file-input file-input-secondary" />
<input type="file" class="file-input file-input-accent" />
<input type="file" class="file-input file-input-neutral" />
<input type="file" class="file-input file-input-info" />
<input type="file" class="file-input file-input-success" />
<input type="file" class="file-input file-input-warning" />
<input type="file" class="file-input file-input-error" />

----------------------------------------

TITLE: Basic Progress Bar Implementation in HTML
DESCRIPTION: Demonstrates the basic implementation of progress bars with different completion values using DaisyUI's progress class

LANGUAGE: html
CODE:
<progress class="$$progress w-56" value="0" max="100"></progress>
<progress class="$$progress w-56" value="10" max="100"></progress>
<progress class="$$progress w-56" value="40" max="100"></progress>
<progress class="$$progress w-56" value="70" max="100"></progress>
<progress class="$$progress w-56" value="100" max="100"></progress>

----------------------------------------

TITLE: Adding CSS Build Script to package.json
DESCRIPTION: This JSON snippet adds a script to the package.json file for building the CSS. It uses the Tailwind CSS CLI to compile the input CSS file to an output file.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build:css": "npx @tailwindcss/cli -i app.css -o public/output.css"
  },
}

----------------------------------------

TITLE: Responsive Steps Implementation
DESCRIPTION: Creates a responsive step indicator that switches between vertical on small screens and horizontal on large screens using the lg breakpoint.

LANGUAGE: html
CODE:
<ul class="$$steps $$steps-vertical lg:$$steps-horizontal">
  <li class="$$step $$step-primary">Register</li>
  <li class="$$step $$step-primary">Choose plan</li>
  <li class="$$step">Purchase</li>
  <li class="$$step">Receive Product</li>
</ul>

----------------------------------------

TITLE: Theme Selection Radio Group
DESCRIPTION: Radio button group implementation for selecting between multiple themes using DaisyUI's radio component.

LANGUAGE: html
CODE:
<fieldset class="fieldset">
  <label class="flex gap-2 cursor-pointer items-center">
    <input type="radio" name="theme-radios" class="radio radio-sm theme-controller" value="default"/>
    Default
  </label>
  <label class="flex gap-2 cursor-pointer items-center">
    <input type="radio" name="theme-radios" class="radio radio-sm theme-controller" value="retro"/>
    Retro
  </label>
</fieldset>

----------------------------------------

TITLE: Linking Compiled CSS in HTML
DESCRIPTION: This HTML snippet shows how to link the compiled CSS file in an HTML document. It references the output.css file generated by the build process.

LANGUAGE: html
CODE:
<link href="./output.css" rel="stylesheet">

----------------------------------------

TITLE: Adding daisyUI to CSS File
DESCRIPTION: Import daisyUI into your CSS file, with an option to enable built-in themes.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui" {
  themes: light --default, dark --prefersdark, cupcake;
}

----------------------------------------

TITLE: Basic Tabs Implementation in HTML
DESCRIPTION: Simple implementation of tabs using DaisyUI classes. Shows basic tab structure with active state.

LANGUAGE: html
CODE:
<div role="tablist" class="$$tabs">
  <a role="tab" class="$$tab">Tab 1</a>
  <a role="tab" class="$$tab $$tab-active">Tab 2</a>
  <a role="tab" class="$$tab">Tab 3</a>
</div>

----------------------------------------

TITLE: Implementing Basic Stat Component in HTML
DESCRIPTION: This snippet demonstrates how to create a basic stat component with title, value, and description. It uses the 'stats' container class and individual 'stat' classes for each stat item.

LANGUAGE: html
CODE:
<div class="$$stats shadow">
  <div class="$$stat">
    <div class="$$stat-title">Total Page Views</div>
    <div class="$$stat-value">89,400</div>
    <div class="$$stat-desc">21% more than last month</div>
  </div>
</div>

----------------------------------------

TITLE: Creating a new Solid project using degit
DESCRIPTION: This command creates a new Solid project in the current directory using a template from solidjs/templates/js.

LANGUAGE: sh
CODE:
npx degit solidjs/templates/js

----------------------------------------

TITLE: Radio Input Tabs with Content
DESCRIPTION: Implementation of tabs using radio inputs with associated content panels. Demonstrates content switching functionality.

LANGUAGE: html
CODE:
<div class="$$tabs $$tabs-lift">
  <input type="radio" name="my_tabs_3" class="$$tab" aria-label="Tab 1" />
  <div class="$$tab-content bg-base-100 border-base-300 p-6">Tab content 1</div>

  <input type="radio" name="my_tabs_3" class="$$tab" aria-label="Tab 2" checked="checked" />
  <div class="$$tab-content bg-base-100 border-base-300 p-6">Tab content 2</div>

  <input type="radio" name="my_tabs_3" class="$$tab" aria-label="Tab 3" />
  <div class="$$tab-content bg-base-100 border-base-300 p-6">Tab content 3</div>
</div>

----------------------------------------

TITLE: Creating Toggle with Fieldset and Label in HTML
DESCRIPTION: Demonstrates how to create a toggle switch within a fieldset, including a legend and label. This structure provides context for the toggle switch.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset p-4 bg-base-100 border border-base-300 rounded-box w-64">
  <legend class="$$fieldset-legend">Login options</legend>
  <label class="$$fieldset-label">
    <input type="checkbox" checked="checked" class="$$toggle" />
    Remember me
  </label>
</fieldset>

----------------------------------------

TITLE: Creating Disabled Select in HTML and React
DESCRIPTION: Shows how to implement a disabled Select element using DaisyUI classes and HTML attributes.

LANGUAGE: html
CODE:
<select class="$$select" disabled>
  <option>You can't touch this</option>
</select>

LANGUAGE: jsx
CODE:
<select class="$$select" disabled={true}>
  <option>You can't touch this</option>
</select>

----------------------------------------

TITLE: Stacked Images Implementation
DESCRIPTION: Shows how to stack multiple images with rounded corners. Uses fixed width class and maintains aspect ratio of images.

LANGUAGE: html
CODE:
<div class="$$stack w-48">
  <img src="https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp" class="rounded-box" />
  <img src="https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp" class="rounded-box" />
  <img src="https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp" class="rounded-box" />
</div>

----------------------------------------

TITLE: Implementing Centered Stat Items in HTML
DESCRIPTION: This snippet shows how to center the content within each stat item. It uses the 'place-items-center' class to align the content in the center of each stat block.

LANGUAGE: html
CODE:
<div class="$$stats shadow">
  <div class="$$stat place-items-center">
    <div class="$$stat-title">Downloads</div>
    <div class="$$stat-value">31K</div>
    <div class="$$stat-desc">From January 1st to February 1st</div>
  </div>
  <!-- Additional stat items omitted for brevity -->
</div>

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS and Solid
DESCRIPTION: This configuration adds Tailwind CSS and Solid plugins to Vite, sets the server port, and specifies the build target.

LANGUAGE: js
CODE:
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";
import solidPlugin from "vite-plugin-solid";

export default defineConfig({
  plugins: [tailwindcss(), solidPlugin()],
  server: {
    port: 3000,
  },
  build: {
    target: "esnext",
  },
});

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS in Solid Start
DESCRIPTION: This code snippet adds the Tailwind CSS plugin to the Vite configuration in a Solid Start project. It imports the necessary modules and defines the configuration using defineConfig.

LANGUAGE: js
CODE:
import { defineConfig } from "@solidjs/start/config";
import tailwindcss from "@tailwindcss/vite";
export default defineConfig({
  vite: {
    plugins: [tailwindcss()],
  },
});

----------------------------------------

TITLE: Creating a Vertical Timeline with Bottom Side Only in HTML
DESCRIPTION: This example shows how to implement a vertical timeline with content only on the bottom side using DaisyUI classes. It includes timeline items with icons and descriptions.

LANGUAGE: HTML
CODE:
<ul class="timeline timeline-vertical">
  <li>
    <div class="timeline-middle">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" /></svg>
    </div>
    <div class="timeline-end timeline-box">First Macintosh computer</div>
    <hr/>
  </li>
  <!-- Additional timeline items... -->
</ul>

----------------------------------------

TITLE: Creating Toggle Switch with Custom Colors using Tailwind CSS Classes
DESCRIPTION: Demonstrates how to create a toggle switch with custom colors using Tailwind CSS utility classes. This allows for more specific color customization beyond DaisyUI's predefined color schemes.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$toggle border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500 " />

----------------------------------------

TITLE: Text Input with Fieldset in HTML
DESCRIPTION: A text input wrapped in a fieldset with legend and additional label.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset">
  <legend class="$$fieldset-legend">What is your name?</legend>
  <input type="text" class="$$input" placeholder="Type here" />
  <p class="$$fieldset-label">Optional</p>
</fieldset>

----------------------------------------

TITLE: Accent Color Link in HTML with DaisyUI
DESCRIPTION: Applies the accent color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-accent">Click me</a>

----------------------------------------

TITLE: Applying Bold Star Mask to Image in HTML
DESCRIPTION: This snippet shows how to apply a bold star-shaped mask to an image using DaisyUI classes. The mask and mask-star-2 classes are combined for this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-star-2"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installs Eleventy, PostCSS, Tailwind CSS, Typography plugin, and daisyUI packages

LANGUAGE: sh
CODE:
npm install @11ty/eleventy postcss tailwindcss@latest @tailwindcss/postcss@latest @tailwindcss/typography@latest daisyui@latest

----------------------------------------

TITLE: Implementing Middle-Right Toast with Multiple Alerts in HTML
DESCRIPTION: This snippet shows how to create a Toast positioned at the middle-right of the page using 'toast-end' and 'toast-middle' classes. It includes multiple alerts within the Toast component.

LANGUAGE: html
CODE:
<div class="$$toast $$toast-end $$toast-middle">
  <div class="$$alert $$alert-info">
    <span>New mail arrived.</span>
  </div>
  <div class="$$alert $$alert-success">
    <span>Message sent successfully.</span>
  </div>
</div>

----------------------------------------

TITLE: Disabled Textarea
DESCRIPTION: Implementation of a disabled textarea element.

LANGUAGE: html
CODE:
<textarea class="$$textarea" placeholder="Bio" disabled></textarea>

----------------------------------------

TITLE: Creating Default Layout Template
DESCRIPTION: Defines the base HTML template with Tailwind CSS and typography styles using Nunjucks templating

LANGUAGE: markdown
CODE:
---
title: My Blog
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/styles/index.css">
  </head>
  <body class="prose">
    {{ content | safe }}
  </body>
</html>

----------------------------------------

TITLE: Hover-Only Underline Link in HTML with DaisyUI
DESCRIPTION: Creates a link that only shows an underline on hover using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-hover">Click me</a>

----------------------------------------

TITLE: Implementing Basic Status Icon in HTML
DESCRIPTION: This snippet shows how to create a basic status icon using the DaisyUI status class.

LANGUAGE: html
CODE:
<span class="status"></span>

----------------------------------------

TITLE: Implementing Collapse with Custom Colors
DESCRIPTION: Advanced collapse implementation with custom color transitions using Tailwind CSS peer and group utilities.

LANGUAGE: html
CODE:
<div class="bg-base-100 border-base-300 collapse border">
  <input type="checkbox" class="peer" />
  <div class="collapse-title bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content">
    How do I create an account?
  </div>
  <div class="collapse-content bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content">
    Click the "Sign Up" button in the top right corner and follow the registration process.
  </div>
</div>

----------------------------------------

TITLE: Creating Homepage Content
DESCRIPTION: Sample markdown content showcasing typography and daisyUI components

LANGUAGE: markdown
CODE:
---
layout: layouts/default.njk
---

# Markdown heading 1

## Markdown heading 2

### Markdown heading 3

<div class="not-prose">
  <button class="btn">daisyUI Button</button>
</div>

----------------------------------------

TITLE: Implementing Username Validation with DaisyUI Validator
DESCRIPTION: This example shows how to use the validator class for username input with specific requirements. It includes a pattern for validation and a hint for user guidance.

LANGUAGE: html
CODE:
<input type="input" class="$$input $$validator" required placeholder="Username" 
  pattern="[A-Za-z][A-Za-z0-9\\-]*" minlength="3" maxlength="30" title="Only letters, numbers or dash" />
<p class="$$validator-hint">
  Must be 3 to 30 characters
  <br/>containing only letters, numbers or dash
</p>

----------------------------------------

TITLE: Creating Top-Right Toast with Multiple Alerts in HTML
DESCRIPTION: This example demonstrates how to position a Toast at the top-right corner of the page using 'toast-top' and 'toast-end' classes. It contains multiple alerts stacked within the Toast.

LANGUAGE: html
CODE:
<div class="$$toast $$toast-top $$toast-end">
  <div class="$$alert $$alert-info">
    <span>New mail arrived.</span>
  </div>
  <div class="$$alert $$alert-success">
    <span>Message sent successfully.</span>
  </div>
</div>

----------------------------------------

TITLE: Applying Horizontal Hexagon Mask to Image in HTML
DESCRIPTION: This code demonstrates how to apply a horizontal hexagon-shaped mask to an image using DaisyUI classes. The mask and mask-hexagon-2 classes are used for this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-hexagon-2"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Changing Root Selector for daisyUI Variables
DESCRIPTION: Shows how to change the root selector for daisyUI CSS variables, useful for scoping styles to a specific element.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  root: "#my-app";
}

----------------------------------------

TITLE: Implementing Badges with Icons in HTML using DaisyUI
DESCRIPTION: This snippet shows how to create badges that include both an icon and text using DaisyUI classes. Icons are implemented using inline SVG.

LANGUAGE: html
CODE:
<div class="$$badge $$badge-info">
  <svg class="size-[1em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor" stroke-linejoin="miter" stroke-linecap="butt"><circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></circle><path d="m12,17v-5.5c0-.276-.224-.5-.5-.5h-1.5" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></path><circle cx="12" cy="7.25" r="1.25" fill="currentColor" stroke-width="2"></circle></g></svg>
  Info
</div>
<div class="$$badge $$badge-success">
  <svg class="size-[1em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor" stroke-linejoin="miter" stroke-linecap="butt"><circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></circle><polyline points="7 13 10 16 17 8" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></polyline></g></svg>
  Success
</div>
<div class="$$badge $$badge-warning">
  <svg class="size-[1em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18 18"><g fill="currentColor"><path d="M7.638,3.495L2.213,12.891c-.605,1.048,.151,2.359,1.362,2.359H14.425c1.211,0,1.967-1.31,1.362-2.359L10.362,3.495c-.605-1.048-2.119-1.048-2.724,0Z" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path><line x1="9" y1="6.5" x2="9" y2="10" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></line><path d="M9,13.569c-.552,0-1-.449-1-1s.448-1,1-1,1,.449,1,1-.448,1-1,1Z" fill="currentColor" data-stroke="none" stroke="none"></path></g></svg>
  Warning
</div>
<div class="$$badge $$badge-error">
  <svg class="size-[1em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor"><rect x="1.972" y="11" width="20.056" height="2" transform="translate(-4.971 12) rotate(-45)" fill="currentColor" stroke-width="0"></rect><path d="m12,23c-6.065,0-11-4.935-11-11S5.935,1,12,1s11,4.935,11,11-4.935,11-11,11Zm0-20C7.038,3,3,7.037,3,12s4.038,9,9,9,9-4.037,9-9S16.962,3,12,3Z" stroke-width="0" fill="currentColor"></path></g></svg>
  Error
</div>

----------------------------------------

TITLE: Installing Angular CLI
DESCRIPTION: Installs the latest version of Angular CLI globally on the system

LANGUAGE: sh
CODE:
npm install -g @angular/cli@latest

----------------------------------------

TITLE: Linking Compiled CSS in HTML
DESCRIPTION: This HTML snippet shows how to link the compiled CSS file in an HTML document. It connects the PostCSS output to the webpage.

LANGUAGE: html
CODE:
<link href="./output.css" rel="stylesheet">

----------------------------------------

TITLE: Customizing Dock Component Colors in HTML
DESCRIPTION: This example demonstrates how to customize the colors of the Dock component using DaisyUI utility classes for background and text colors.

LANGUAGE: HTML
CODE:
<div class="$$dock bg-neutral text-neutral-content">
  <button>
    <svg class="size-[1.2em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor" stroke-linejoin="miter" stroke-linecap="butt"><polyline points="1 11 12 2 23 11" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2"></polyline><path d="m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></path><line x1="12" y1="22" x2="12" y2="18" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></line></g></svg>
    <span class="$$dock-label">Home</span>
  </button>
  
  <button class="$$dock-active">
    <svg class="size-[1.2em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor" stroke-linejoin="miter" stroke-linecap="butt"><polyline points="3 14 9 14 9 17 15 17 15 14 21 14" fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2"></polyline><rect x="3" y="3" width="18" height="18" rx="2" ry="2" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></rect></g></svg>
    <span class="$$dock-label">Inbox</span>
  </button>
  
  <button>
    <svg class="size-[1.2em]" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="currentColor" stroke-linejoin="miter" stroke-linecap="butt"><circle cx="12" cy="12" r="3" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></circle><path d="m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z" fill="none" stroke="currentColor" stroke-linecap="square" stroke-miterlimit="10" stroke-width="2"></path></g></svg>
    <span class="$$dock-label">Settings</span>
  </button>
</div>

----------------------------------------

TITLE: Updating Mockup Phone Component
DESCRIPTION: Rename camera and display classes in mockup-phone component.

LANGUAGE: diff
CODE:
<div class="mockup-phone">
-  <div class="camera"></div>
+  <div class="mockup-phone-camera"></div>

-    <div class="display">
+    <div class="mockup-phone-display">

-    <div class="artboard artboard-demo phone-1">Hi.</div>
+    <div class="w-[320px] h-[568px]">Hi.</div>
  </div>
</div>

----------------------------------------

TITLE: Implementing Floating Label in DaisyUI (HTML)
DESCRIPTION: This snippet shows how to create a floating label for an input field using DaisyUI classes. The 'floating-label' class is used on the label element, and the input includes additional styling classes.

LANGUAGE: html
CODE:
<label class="$$floating-label">
  <span>Your Email</span>
  <input type="text" placeholder="mail@site.com" class="$$input $$input-md" />
</label>

----------------------------------------

TITLE: Basic Square Skeleton Loading Component
DESCRIPTION: Implementation of a basic square skeleton loader with fixed width and height dimensions.

LANGUAGE: html
CODE:
<div class="$$skeleton h-32 w-32"></div>

----------------------------------------

TITLE: Creating new Rsbuild project using npm
DESCRIPTION: This command creates a new Rsbuild project in the current directory using npm.

LANGUAGE: sh
CODE:
npm create rsbuild -d ./

----------------------------------------

TITLE: Downloading daisyUI bundled JS file using cURL
DESCRIPTION: This command downloads the latest version of daisyUI as a single JS file and places it next to the Tailwind CSS executable.

LANGUAGE: sh
CODE:
curl -sLO https://github.com/saadeghi/daisyui/releases/latest/download/daisyui.js

----------------------------------------

TITLE: Basic Link Implementation in HTML with DaisyUI
DESCRIPTION: Demonstrates the basic usage of the link class to add an underline style to a link.

LANGUAGE: html
CODE:
<a class="$$link">Click me</a>

----------------------------------------

TITLE: Creating a Custom Theme for daisyUI 5
DESCRIPTION: Demonstrates how to create a custom theme for daisyUI 5. This includes setting color variables, radius, and border properties for a new theme named 'my-theme'.

LANGUAGE: css
CODE:
@plugin "daisyui/theme" {
  name: "my-theme";
  default: false;
  prefersdark: false;
  color-scheme: light;

  --color-base-100: oklch(98% 0.02 240);
  --color-base-200: oklch(95% 0.03 240);
  --color-base-300: oklch(92% 0.04 240);
  --color-base-content: oklch(20% 0.05 240);

  --color-primary: oklch(55% 0.3 240);
  --color-primary-content: oklch(98% 0.01 240);

  --color-secondary: oklch(70% 0.25 200);
  --color-secondary-content: oklch(98% 0.01 200);

  --color-accent: oklch(65% 0.25 160);
  --color-accent-content: oklch(98% 0.01 160);

  --color-neutral: oklch(50% 0.05 240);
  --color-neutral-content: oklch(98% 0.01 240);

  --color-info: oklch(70% 0.2 220);
  --color-info-content: oklch(98% 0.01 220);

  --color-success: oklch(65% 0.25 140);
  --color-success-content: oklch(98% 0.01 140);

  --color-warning: oklch(80% 0.25 80);
  --color-warning-content: oklch(20% 0.05 80);

  --color-error: oklch(65% 0.3 30);
  --color-error-content: oklch(98% 0.01 30);

  --radius-selector: .5rem;
  --radius-field: .5rem;
  --radius-box: .5rem;
  --border: 1px;
}

----------------------------------------

TITLE: Button with Indicator Badge
DESCRIPTION: Shows how to add a numbered badge indicator to a button element.

LANGUAGE: html
CODE:
<div class="$$indicator">
  <span class="$$indicator-item $$badge $$badge-secondary">12</span>
  <button class="$$btn">inbox</button>
</div>

----------------------------------------

TITLE: Implementing Toast with Alert in HTML
DESCRIPTION: This snippet shows how to create a basic Toast component with an alert inside using DaisyUI classes. The Toast is positioned at the default bottom-right corner of the page.

LANGUAGE: html
CODE:
<div class="$$toast">
  <div class="$$alert $$alert-info">
    <span>New message arrived.</span>
  </div>
</div>

----------------------------------------

TITLE: Circular Avatar with Content Skeleton Layout
DESCRIPTION: Complex skeleton layout featuring a circular avatar placeholder with accompanying text placeholders, demonstrating a typical user profile loading state.

LANGUAGE: html
CODE:
<div class="flex w-52 flex-col gap-4">
  <div class="flex items-center gap-4">
    <div class="$$skeleton h-16 w-16 shrink-0 rounded-full"></div>
    <div class="flex flex-col gap-4">
      <div class="$$skeleton h-4 w-20"></div>
      <div class="$$skeleton h-4 w-28"></div>
    </div>
  </div>
  <div class="$$skeleton h-32 w-full"></div>
</div>

----------------------------------------

TITLE: Implementing Primary-Muted Across Multiple Themes
DESCRIPTION: Complete configuration showing how to implement the primary-muted color across light, cupcake, and dark themes with different OKLCH values for each theme.

LANGUAGE: javascript
CODE:
// tailwind.config.js
module.exports = {
  plugins: [require("daisyui")],

  theme: {
    extend: {
      colors: {
        "primary-muted": "oklch(var(--primary-muted) / <alpha-value>)",
      },
    },
  },

  daisyui: {
    themes: [
      // light theme
      {
        light: {
          ...require("daisyui/src/theming/themes")["light"],
          "--primary-muted": "65% 0.2 295",
        },
      },
      // cupcake theme
      {
        cupcake: {
          ...require("daisyui/src/theming/themes")["cupcake"],
          "--primary-muted": "87% 0.05 200",
        },
      },
      // dark theme
      {
        dark: {
          ...require("daisyui/src/theming/themes")["dark"],
          "--primary-muted": "34% 0.2 289",
        },
      },
    ],
  },
}

----------------------------------------

TITLE: Initializing Bun Project
DESCRIPTION: Creates a new Bun project in the current directory with default settings.

LANGUAGE: sh
CODE:
bun init -y

----------------------------------------

TITLE: Secondary Color Link in HTML with DaisyUI
DESCRIPTION: Applies the secondary color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-secondary">Click me</a>

----------------------------------------

TITLE: Primary Color Link in HTML with DaisyUI
DESCRIPTION: Applies the primary color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-primary">Click me</a>

----------------------------------------

TITLE: Applying Hexagon Mask to Image in HTML
DESCRIPTION: This snippet illustrates the application of a hexagon-shaped mask to an image using DaisyUI. The mask and mask-hexagon classes are used to create the hexagonal crop.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-hexagon"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Creating Compact Pagination with Navigation Buttons in DaisyUI
DESCRIPTION: This snippet demonstrates how to create a compact pagination component with navigation buttons using DaisyUI's join and btn classes. It shows how to use special characters for previous and next buttons.

LANGUAGE: html
CODE:
<div class="$$join">
  <button class="$$join-item $$btn">«</button>
  <button class="$$join-item $$btn">Page 22</button>
  <button class="$$join-item $$btn">»</button>
</div>

----------------------------------------

TITLE: Customizing Hero Section in Astro Blog Template
DESCRIPTION: This HTML snippet demonstrates how to customize the hero section of the blog, including the title, bio, and profile picture.

LANGUAGE: html
CODE:
<div class="text-center pt-10">
  <div class="badge badge-outline badge-lg">Hello!</div>
  <h1 class="text-4xl md:text-5xl xl:text-7xl font-semibold brightness-150">
    I'm <span class="text-primary">Antonio,</span>
    <br />
    Digital Marketer & Founder
  </h1>
</div>

<img
  src="/images/antonio.png"
  alt="Antonio"
  class="max-w-xs md:max-w-lg mt-4 absolute"
/>

<img src="/images/bg.png" alt="bg" height="{500}" width="{700}" />

----------------------------------------

TITLE: Updating Social Media Links in Astro Blog Template
DESCRIPTION: This HTML code shows how to update social media links in the hero section of the Astro blog template.

LANGUAGE: html
CODE:
<div class="flex justify-center lg:justify-start space-x-4 mt-4">
  <a
    class="btn btn-circle btn-md"
    href="https://www.x.com"
    aria-label="twitter"
  >
    <svg viewBox="0 0 24 24" aria-hidden="true" class="h-8 w-8">
      <path
        d="M13.3174 10.7749L19.1457 4H17.7646L12.7039 9.88256L8.66193 4H4L10.1122 12.8955L4 20H5.38119L10.7254 13.7878L14.994 20H19.656L13.3171 10.7749H13.3174ZM11.4257 12.9738L10.8064 12.0881L5.87886 5.03974H8.00029L11.9769 10.728L12.5962 11.6137L17.7652 19.0075H15.6438L11.4257 12.9742V12.9738Z"
        fill="currentColor"
      ></path>
    </svg>
  </a>
  <!-- other social links -->
</div>

----------------------------------------

TITLE: Creating New Astro Project
DESCRIPTION: Command to create a new Astro project in the current directory using npm.

LANGUAGE: sh
CODE:
npm create astro@latest ./

----------------------------------------

TITLE: Warning Color Link in HTML with DaisyUI
DESCRIPTION: Applies the warning color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-warning">Click me</a>

----------------------------------------

TITLE: Indeterminate Progress Bar
DESCRIPTION: Shows how to create an indeterminate progress bar by omitting the value attribute

LANGUAGE: html
CODE:
<progress class="$$progress w-56"></progress>

----------------------------------------

TITLE: Custom Styled Range Slider
DESCRIPTION: Range slider with custom colors using CSS variables for background, thumb, and fill customization. Demonstrates how to override default styling.

LANGUAGE: html
CODE:
<input type="range" min="0" max="100" value="40" 
  class="$$range text-blue-300 [--range-bg:orange] [--range-thumb:blue] [--range-fill:0]" />

----------------------------------------

TITLE: Adding Lemon Squeezy API Key to Environment File
DESCRIPTION: Example of adding the Lemon Squeezy API key to the .env file for integration with the online store template.

LANGUAGE: bash
CODE:
LEMON_SQUEEZY_API_KEY=your_api_key_here

----------------------------------------

TITLE: Color Variable Changes - HSL to OKLCH
DESCRIPTION: Demonstrates the change in color variable format from HSL in v3 to OKLCH in v4.

LANGUAGE: css
CODE:
/* the values were HSL */
--p: 251.47 100% 56%;

LANGUAGE: css
CODE:
/* the values are OKLCH */
--p: 0.4912 0.3096 275.75;

----------------------------------------

TITLE: Importing Tailwind CSS and daisyUI styles
DESCRIPTION: This CSS file imports Tailwind CSS and adds the daisyUI plugin, replacing any existing styles in the project.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Creating Vertical Stat Layout in HTML
DESCRIPTION: This example demonstrates how to create a vertical layout for the stat component. It uses the 'stats-vertical' class to stack the stat items vertically.

LANGUAGE: html
CODE:
<div class="$$stats $$stats-vertical shadow">
  <div class="$$stat">
    <div class="$$stat-title">Downloads</div>
    <div class="$$stat-value">31K</div>
    <div class="$$stat-desc">Jan 1st - Feb 1st</div>
  </div>
  <!-- Additional stat items omitted for brevity -->
</div>

----------------------------------------

TITLE: Adding Tailwind CSS Base Styles
DESCRIPTION: Required Tailwind CSS directives to be added to the application's CSS file.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------

TITLE: Updating Menu Component
DESCRIPTION: Rename disabled, active, and focus classes for menu items.

LANGUAGE: diff
CODE:
- <ul class="menu">
+ <ul class="menu w-full">

-   <li class="disabled"><a>disabled item</a></li>
+   <li class="menu-disabled"><a>disabled item</a></li>

-   <li class="active"><a>active item</a></li>
+   <li class="menu-active"><a>active item</a></li>

-   <li class="focus"><a>focus item</a></li>
+   <li class="menu-focus"><a>focus item</a></li>
</ul>

----------------------------------------

TITLE: Updating File Input Component
DESCRIPTION: Remove file-input-bordered class as file input now has a border by default.

LANGUAGE: diff
CODE:
- <input type="file" class="file-input file-input-bordered">
+ <input type="file" class="file-input">

----------------------------------------

TITLE: Installing Dependencies for Astro Blog Template
DESCRIPTION: This snippet shows how to install the necessary dependencies for the Astro blog template using npm.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Incorrect Dynamic Class Implementation
DESCRIPTION: Demonstrates the incorrect way of implementing dynamic Tailwind classes that won't work in production

LANGUAGE: html
CODE:
<div class="bg-{{ color }}-500"></div>

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS
DESCRIPTION: Configuration of Vite to include Tailwind CSS plugin alongside other Qwik-specific plugins.

LANGUAGE: javascript
CODE:
import tailwindcss from "@tailwindcss/vite";
//...
export default defineConfig(({ command, mode }): UserConfig => {
  return {
    plugins: [tailwindcss(), qwikCity(), qwikVite(), tsconfigPaths()],
    // ...
  };
});

----------------------------------------

TITLE: Creating Pagination Using Radio Inputs in DaisyUI
DESCRIPTION: This snippet demonstrates how to create a pagination component using radio inputs styled as buttons in DaisyUI. It shows how to apply join, btn, and btn-square classes to radio inputs for a unique pagination style.

LANGUAGE: html
CODE:
<div class="$$join">
  <input
    class="$$join-item $$btn $$btn-square"
    type="radio"
    name="options"
    aria-label="1"
    checked="checked" />
  <input class="$$join-item $$btn $$btn-square" type="radio" name="options" aria-label="2" />
  <input class="$$join-item $$btn $$btn-square" type="radio" name="options" aria-label="3" />
  <input class="$$join-item $$btn $$btn-square" type="radio" name="options" aria-label="4" />
</div>

----------------------------------------

TITLE: Updating Select Component
DESCRIPTION: Remove select-bordered class and use select-ghost for borderless select.

LANGUAGE: html
CODE:
<!-- Select with border -->
<select class="select">

<!-- Select without border -->
<select class="select select-ghost">

<!-- Select with consistent width -->
<select class="select">

----------------------------------------

TITLE: Importing CSS in Astro Layout
DESCRIPTION: Adding the CSS import statement to the Astro layout file to enable styling.

LANGUAGE: javascript
CODE:
---
import "../assets/app.css";
---

----------------------------------------

TITLE: Running Development Server for Astro Blog
DESCRIPTION: This command starts the development server for the Astro blog, allowing you to preview changes in real-time.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Tailwind Config with Regex Safelist
DESCRIPTION: Advanced configuration example using regex patterns for safelisting multiple class variations

LANGUAGE: javascript
CODE:
module.exports = {
  content: ["./pages/**/*.{html,js}", "./components/**/*.{html,js}"],
  // ...
  safelist: [
    "bg-teal-700",
    {
      pattern: /bg-(red|green|blue)-(400|500|600)/,
    },
  ],
  // ...
}

----------------------------------------

TITLE: Building CSS with Tailwind CLI
DESCRIPTION: Command to build the CSS file using Tailwind CSS CLI, which may need to be added to package.json scripts after setup.

LANGUAGE: bash
CODE:
npx tailwindcss -i tailwind.css -o output.css

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS in Nuxt
DESCRIPTION: This configuration adds Tailwind CSS to the Vite config in the Nuxt configuration file. It also specifies the CSS file to be used.

LANGUAGE: js
CODE:
import tailwindcss from "@tailwindcss/vite";
export default defineNuxtConfig({
  vite: {
    plugins: [tailwindcss()],
  },
  css: ["~/assets/app.css"],
});

----------------------------------------

TITLE: Creating a Cally Date Picker with daisyUI Dropdown
DESCRIPTION: This snippet shows how to create a date picker using the Cally web component and daisyUI dropdown styles. It includes a button to trigger the calendar and the calendar component itself.

LANGUAGE: HTML
CODE:
<button popovertarget="cally-popover1" class="$$input $$input-border" id="cally1" style="anchor-name:--cally1">
  Pick a date
</button>
<div popover id="cally-popover1" class="$$dropdown bg-base-100 rounded-box shadow-lg" style="position-anchor:--cally1">
  <calendar-date class="$$cally" onchange={document.getElementById('cally1').innerText = this.value}>
    <svg aria-label="Previous" class="fill-current size-4" slot="previous" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.75 19.5 8.25 12l7.5-7.5"></path></svg>
    <svg aria-label="Next" class="fill-current size-4" slot="next" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="m8.25 4.5 7.5 7.5-7.5 7.5"></path></svg>
    <calendar-month></calendar-month>
  </calendar-date>
</div>

----------------------------------------

TITLE: Info Color Link in HTML with DaisyUI
DESCRIPTION: Applies the info color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-info">Click me</a>

----------------------------------------

TITLE: Rendering Key Combinations with DaisyUI
DESCRIPTION: Shows how to display a combination of keyboard keys using DaisyUI's kbd class. This example demonstrates the 'ctrl + shift + del' key combination.

LANGUAGE: html
CODE:
<kbd class="kbd">ctrl</kbd>
+
<kbd class="kbd">shift</kbd>
+
<kbd class="kbd">del</kbd>

----------------------------------------

TITLE: Configuring Homepage Content in Astro Blog
DESCRIPTION: This JSX code demonstrates how to structure and customize the homepage content for the Astro blog, including importing and using various components.

LANGUAGE: jsx
CODE:
---
import Hero from "../components/Hero.astro";
import TopArticles from "../components/TopArticles.astro";
import LatestBlogs from "../components/RecentBlogs.astro";
import NewsletterCard from "../components/NewsletterCard.astro";
import FeaturedPost from "../components/FeaturedPost.astro";
import HomeLayout from "../layouts/HomeLayout.astro";
---

<script>
  import Translate from "$components/Translate.svelte"
</script>

<HomeLayout title="Home" description="Welcome to my blog">
  <div class="w-full">
    <Hero />
    <div class="px-5 xl:px-10">
      <LatestBlogs />
      <FeaturedPost />
      <TopArticles />
      <NewsletterCard />
    </div>
  </div>
</HomeLayout>

----------------------------------------

TITLE: Migration Example: Artboard Component Changes
DESCRIPTION: Shows how to migrate from deprecated artboard classes to Tailwind width/height classes

LANGUAGE: HTML
CODE:
- <div class="artboard phone-1">
+ <div class="w-[320px] h-[568px]">

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS
DESCRIPTION: This snippet configures the PostCSS file to use the Tailwind CSS plugin. It's essential for processing Tailwind CSS classes in the project.

LANGUAGE: js
CODE:
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};
export default config;

----------------------------------------

TITLE: Implementing React Day Picker with daisyUI Styles
DESCRIPTION: This snippet demonstrates how to implement a React Day Picker calendar using daisyUI styles. It includes the necessary import, state management, and rendering code.

LANGUAGE: React
CODE:
import { useState } from "react";
import { DayPicker } from "react-day-picker";

export default function App() {
  const [date, setDate] = useState<Date | undefined>();
  return (
    <>
      <button popoverTarget="rdp-popover" className="$$input $$input-border" style={{ anchorName: "--rdp" } as React.CSSProperties}>
        {date ? date.toLocaleDateString() : "Pick a date"}
      </button>
      <div popover="auto" id="rdp-popover" className="$$dropdown" style={{ positionAnchor: "--rdp" } as React.CSSProperties}>
        <DayPicker className="$$react-day-picker" mode="single" selected={date} onSelect={setDate} />
      </div>
    </>
  );
}

----------------------------------------

TITLE: Migration Example: Avatar Status Changes
DESCRIPTION: Shows how to migrate avatar status classes to new prefix format

LANGUAGE: HTML
CODE:
- <div class="avatar online">
+ <div class="avatar avatar-online">
  <div class="w-24 rounded-full">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>

----------------------------------------

TITLE: Force Open Tooltip
DESCRIPTION: Shows how to force a tooltip to stay open using the tooltip-open class

LANGUAGE: html
CODE:
<div class="$$tooltip $$tooltip-open" data-tip="hello">
  <button class="$$btn">Force open</button>
</div>

----------------------------------------

TITLE: Creating New React Router Project
DESCRIPTION: Creates a new React Router project in the current directory using npm create command.

LANGUAGE: sh
CODE:
npm create react-router@latest ./

----------------------------------------

TITLE: Building Astro Blog Template for Production
DESCRIPTION: This command builds the Astro blog template for production, optimizing and generating static assets for deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Installing Tailwind CSS for Rails
DESCRIPTION: Commands to install the Tailwind CSS gem for Rails and run the installation script.

LANGUAGE: sh
CODE:
./bin/bundle add tailwindcss-rails
./bin/rails tailwindcss:install

----------------------------------------

TITLE: Avatar Group Implementation
DESCRIPTION: Implementation of grouped avatars with overlapping effect using negative margin spacing.

LANGUAGE: html
CODE:
<div class="$$avatar-group -space-x-6">
  <div class="$$avatar">
    <div class="w-12">
      <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating a Custom daisyUI Theme
DESCRIPTION: Example of creating a custom theme for daisyUI with specific color variables and settings.

LANGUAGE: CSS
CODE:
@import "tailwindcss";
@plugin "daisyui";
@plugin "daisyui/theme" {
  name: "mytheme";
  default: true;
  prefersdark: false;
  color-scheme: light;

  --color-base-100: oklch(98% 0.02 240);
  --color-base-200: oklch(95% 0.03 240);
  --color-base-300: oklch(92% 0.04 240);
  --color-base-content: oklch(20% 0.05 240);
  --color-primary: oklch(55% 0.3 240);
  --color-primary-content: oklch(98% 0.01 240);
  --color-secondary: oklch(70% 0.25 200);
  --color-secondary-content: oklch(98% 0.01 200);
  --color-accent: oklch(65% 0.25 160);
  --color-accent-content: oklch(98% 0.01 160);
  --color-neutral: oklch(50% 0.05 240);
  --color-neutral-content: oklch(98% 0.01 240);
  --color-info: oklch(70% 0.2 220);
  --color-info-content: oklch(98% 0.01 220);
  --color-success: oklch(65% 0.25 140);
  --color-success-content: oklch(98% 0.01 140);
  --color-warning: oklch(80% 0.25 80);
  --color-warning-content: oklch(20% 0.05 80);
  --color-error: oklch(65% 0.3 30);
  --color-error-content: oklch(98% 0.01 30);

  --radius-selector: 1rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;

  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  
  --border: 1px;
  
  --depth: 1;
  --noise: 0;
}

----------------------------------------

TITLE: Applying Pentagon Mask to Image in HTML
DESCRIPTION: This code illustrates how to apply a pentagon-shaped mask to an image using DaisyUI classes. The mask and mask-pentagon classes are used to create the pentagonal crop.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-pentagon"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Color Function Updates
DESCRIPTION: Shows how to update color function usage from hsl() to oklch() for DaisyUI color variables.

LANGUAGE: css
CODE:
/* Using hsl() function */
color: hsl(var(--p));

LANGUAGE: css
CODE:
/* Using oklch() function */
color: oklch(var(--p));

----------------------------------------

TITLE: Configuring Eleventy Build Process
DESCRIPTION: Eleventy configuration file that processes Tailwind CSS during build and sets input/output directories

LANGUAGE: javascript
CODE:
import fs from 'fs';
import path from 'path';
import postcss from 'postcss';
import tailwindcss from '@tailwindcss/postcss';

export default function (eleventyConfig) {
  eleventyConfig.on('eleventy.before', async () => {
    const tailwindInputPath = path.resolve('./src/styles/index.css');
    const tailwindOutputPath = './dist/styles/index.css';
    const cssContent = fs.readFileSync(tailwindInputPath, 'utf8');
    const outputDir = path.dirname(tailwindOutputPath);

    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const result = await postcss([tailwindcss()]).process(cssContent, {
      from: tailwindInputPath,
      to: tailwindOutputPath,
    });

    fs.writeFileSync(tailwindOutputPath, result.css);
  });

  return {
    dir: { input: 'src', output: 'dist' },
  };
}

----------------------------------------

TITLE: Empty Divider Implementation
DESCRIPTION: Shows how to implement a divider without any text content.

LANGUAGE: html
CODE:
<div class="flex w-full flex-col">
  <div class="$$card bg-base-300 rounded-box grid h-20 place-items-center">content</div>
  <div class="$$divider"></div>
  <div class="$$card bg-base-300 rounded-box grid h-20 place-items-center">content</div>
</div>

----------------------------------------

TITLE: Basic Avatar Implementation
DESCRIPTION: Basic implementation of an avatar component with a rounded image container.

LANGUAGE: html
CODE:
<div class="$$avatar">
  <div class="w-24 rounded">
    <img src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp" />
  </div>
</div>

----------------------------------------

TITLE: Running CSS Build Script via npm
DESCRIPTION: This command runs the CSS build script defined in package.json, which compiles the CSS using PostCSS and outputs it to a file.

LANGUAGE: sh
CODE:
npm run build:css

----------------------------------------

TITLE: Tab Component Updates
DESCRIPTION: Shows the new structure for tab components where modifier classes are moved from individual tabs to the parent tabs container.

LANGUAGE: html
CODE:
<div class="tabs">
  <a class="tab tab-lg tab-lifted">Tab 1</a>
  <a class="tab tab-lg tab-lifted tab-active">Tab 2</a>
  <a class="tab tab-lg tab-lifted">Tab 3</a>
  <a class="tab tab-lg tab-lifted">Tab 4</a>
</div>

LANGUAGE: html
CODE:
<div class="tabs tabs-lg tabs-lifted">
  <a class="tab">Tab 1</a>
  <a class="tab tab-active">Tab 2</a>
  <a class="tab">Tab 3</a>
  <a class="tab">Tab 4</a>
</div>

----------------------------------------

TITLE: Implementing UI with Hardcoded Colors in HTML
DESCRIPTION: Example showing how to style elements using hardcoded Tailwind color utility classes. This approach requires explicit dark mode classes and has limited theming flexibility.

LANGUAGE: html
CODE:
<div class="bg-zinc-100">
  <div class="bg-zinc-50 border-zinc-200 text-zinc-800">
    This is a hardcoded dark text on a light background,
    it needs double the amount of class names to support dark mode.
  </div>
</div>

----------------------------------------

TITLE: Stacked Cards with Various Alignments
DESCRIPTION: Shows different alignment options for stacked cards including top, start, and end alignments. Uses border and background styling with fixed size.

LANGUAGE: html
CODE:
<div class="$$stack size-28">
  <div class="border-base-content $$card bg-base-100 border text-center">
    <div class="$$card-body">A</div>
  </div>
  <div class="border-base-content $$card bg-base-100 border text-center">
    <div class="$$card-body">B</div>
  </div>
  <div class="border-base-content $$card bg-base-100 border text-center">
    <div class="$$card-body">C</div>
  </div>
</div>

----------------------------------------

TITLE: Implementing Basic Toggle Switch in HTML
DESCRIPTION: Creates a basic toggle switch using DaisyUI's toggle class. The checkbox is styled to look like a switch button.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$toggle" />

----------------------------------------

TITLE: Building CSS with Tailwind CSS Standalone CLI
DESCRIPTION: This command uses the Tailwind CSS executable to build the final CSS file, incorporating the daisyUI styles and classes.

LANGUAGE: sh
CODE:
./tailwindcss -i input.css -o output.css

----------------------------------------

TITLE: Basic Tailwind CSS Class Implementation
DESCRIPTION: Shows the correct way to implement static Tailwind CSS classes in HTML

LANGUAGE: html
CODE:
<div class="bg-red-500"></div>
<div class="bg-green-500"></div>
<div class="bg-blue-500"></div>

----------------------------------------

TITLE: Installing daisyUI 5 Alpha with npm
DESCRIPTION: Command to install the alpha version of daisyUI using npm. This should be used after installing Tailwind CSS 4 alpha.

LANGUAGE: bash
CODE:
npm i -D daisyui@alpha

----------------------------------------

TITLE: Notification Cards Stack
DESCRIPTION: Implements a stack of notification cards with titles and descriptions. Uses shadow effects and card component styling.

LANGUAGE: html
CODE:
<div class="$$stack">
  <div class="$$card shadow-md bg-base-100">
    <div class="$$card-body">
      <h2 class="$$card-title">Notification 1</h2>
      <p>You have 3 unread messages. Tap here to see.</p>
    </div>
  </div>
  <div class="$$card shadow-md bg-base-100">
    <div class="$$card-body">
      <h2 class="$$card-title">Notification 2</h2>
      <p>You have 3 unread messages. Tap here to see.</p>
    </div>
  </div>
  <div class="$$card shadow-md bg-base-100">
    <div class="$$card-body">
      <h2 class="$$card-title">Notification 3</h2>
      <p>You have 3 unread messages. Tap here to see.</p>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Displaying Function Keys with DaisyUI
DESCRIPTION: Illustrates how to render special function keys using DaisyUI's kbd class. This example shows Command, Option, Shift, and Control keys for Mac.

LANGUAGE: html
CODE:
<kbd class="kbd">⌘</kbd>
<kbd class="kbd">⌥</kbd>
<kbd class="kbd">⇧</kbd>
<kbd class="kbd">⌃</kbd>

----------------------------------------

TITLE: Creating Indeterminate Checkbox with JavaScript
DESCRIPTION: This example demonstrates how to make a checkbox indeterminate using JavaScript.

LANGUAGE: html
CODE:
<!-- You can make a checkbox indeterminate using JS -->
<script>
  document.getElementById("my-checkbox").indeterminate = true
</script>
<input type="checkbox" class="$$checkbox" id="my-checkbox" />

----------------------------------------

TITLE: Creating Buttons with daisyUI in HTML
DESCRIPTION: Demonstrates the simplified button implementation using daisyUI's component classes, showing how a single class can create a styled button.

LANGUAGE: html
CODE:
<button class="btn">Button</button>

----------------------------------------

TITLE: Updating Laravel Layout Template
DESCRIPTION: Adding Vite assets to the Laravel layout template for proper asset compilation.

LANGUAGE: html
CODE:
<head>
  ...
  <!-- This -->
  @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body>
  ...
</body>

----------------------------------------

TITLE: Basic Join Component Implementation in HTML
DESCRIPTION: Basic example of grouping buttons using the join component. Shows how to create a horizontal group of buttons with consistent styling and spacing.

LANGUAGE: html
CODE:
<div class="$$join">
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
</div>

----------------------------------------

TITLE: Updating Table Component
DESCRIPTION: Replace hover class with Tailwind CSS utility classes.

LANGUAGE: diff
CODE:
- <tr class="hover">
+ <tr class="hover:bg-base-300">

----------------------------------------

TITLE: Creating a Rails controller for the homepage
DESCRIPTION: Ruby code to define a PagesController with a home action for the homepage.

LANGUAGE: rb
CODE:
class PagesController < ApplicationController
  def home
  end
end

----------------------------------------

TITLE: Importing Svelte Component in HTML
DESCRIPTION: This snippet imports the Translate component from the Svelte components directory. It's likely used for internationalization or language translation functionality within the page.

LANGUAGE: html
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Basic Theme Toggle Implementation
DESCRIPTION: Simple checkbox toggle for switching between default and synthwave themes using DaisyUI's toggle component.

LANGUAGE: html
CODE:
<input type="checkbox" value="synthwave" class="toggle theme-controller" />

----------------------------------------

TITLE: Implementing Label for Input Field in DaisyUI (HTML)
DESCRIPTION: This snippet demonstrates how to create a label for an input field using DaisyUI classes. The label is placed before the input field and includes a span element with the 'label' class.

LANGUAGE: html
CODE:
<label class="$$input">
  <span class="$$label">https://</span>
  <input type="text" placeholder="URL" />
</label>

----------------------------------------

TITLE: Replacing Button Group with Join Component
DESCRIPTION: Replace deprecated btn-group with the new join component.

LANGUAGE: html
CODE:
<div class="join">
  <button class="btn join-item">Button 1</button>
  <button class="btn join-item">Button 2</button>
</div>

----------------------------------------

TITLE: Creating Label for Input Field at the End in DaisyUI (HTML)
DESCRIPTION: This example shows how to position a label after an input field using DaisyUI classes. The label is placed at the end of the input element.

LANGUAGE: html
CODE:
<label class="$$input">
  <input type="text" placeholder="domain name" />
  <span class="$$label">.com</span>
</label>

----------------------------------------

TITLE: Embedding YouTube Video with Custom Styling in HTML
DESCRIPTION: This code snippet embeds a YouTube video with custom styling and autoplay functionality. It uses CSS grid for positioning and applies custom classes for appearance.

LANGUAGE: html
CODE:
<div class="w-full grid"><div class="[grid-column:1/1] [grid-row:1/1] z-1"></div><iframe class="w-full rounded-box [grid-column:1/1] [grid-row:1/1] overflow-hidden" frameborder="0" title="Official daisyUI Figma Library" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" style="aspect-ratio: 620/360;" src="https://www.youtube.com/embed/ebWEkM4AvjU?mute=1&amp;autoplay=1&amp;controls=0&amp;rel=0&amp;modestbranding=1&amp;loop=1&amp;playlist=ebWEkM4AvjU"></iframe></div>

----------------------------------------

TITLE: Adding a daisyUI button to SvelteKit page
DESCRIPTION: Modification to the src/routes/+page.svelte file to include a daisyUI styled button, demonstrating the use of daisyUI classes in a SvelteKit component.

LANGUAGE: svelte
CODE:
<h1>Welcome to SvelteKit</h1>
<p>Visit <a href="https://kit.svelte.dev">kit.svelte.dev</a> to read the documentation</p>
<button class="btn btn-primary">Hello daisyUI</button>

----------------------------------------

TITLE: Implementing Label for Select Element in DaisyUI (HTML)
DESCRIPTION: This snippet illustrates how to create a label for a select element using DaisyUI classes. The label is placed before the select element and uses the 'label' class.

LANGUAGE: html
CODE:
<label class="$$select">
  <span class="$$label">Type</span>
  <select>
    <option>Personal</option>
    <option>Business</option>
  </select>
</label>

----------------------------------------

TITLE: Date and Time Inputs in HTML
DESCRIPTION: Examples of date, time, and datetime-local input types.

LANGUAGE: html
CODE:
<input type="date" class="$$input"/>
<input type="time" class="$$input"/>
<input type="datetime-local" class="$$input"/>

----------------------------------------

TITLE: Creating Stat Component with Custom Colors and Buttons in HTML
DESCRIPTION: This example demonstrates how to customize the stat component with background colors, borders, and add buttons. It uses custom background and border classes, along with 'stat-actions' for button placement.

LANGUAGE: html
CODE:
<div class="$$stats bg-base-100 border border-base-300">
  <div class="$$stat">
    <div class="$$stat-title">Account balance</div>
    <div class="$$stat-value">$89,400</div>
    <div class="$$stat-actions">
      <button class="$$btn $$btn-xs $$btn-success">Add funds</button>
    </div>
  </div>
  <!-- Additional stat items omitted for brevity -->
</div>

----------------------------------------

TITLE: Styled Fieldset with Background and Border
DESCRIPTION: Shows how to add visual styling to a fieldset using background colors, borders, and rounded corners.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset w-xs bg-base-200 border border-base-300 p-4 rounded-box">
  <legend class="$$fieldset-legend">Page title</legend>
  <input type="text" class="$$input" placeholder="My awesome page" />
  <p class="$$fieldset-label">You can edit page title later on from settings</p>
</fieldset>

----------------------------------------

TITLE: Tailwind Config with Safelist File
DESCRIPTION: Configuration example showing how to include a safelist file in Tailwind config

LANGUAGE: javascript
CODE:
module.exports = {
  content: ["./path/safelist.txt"],
  // ...
}

----------------------------------------

TITLE: Basic Code Mockup with Line Prefix
DESCRIPTION: Demonstrates the basic usage of mockup-code component with a single line and dollar sign prefix.

LANGUAGE: html
CODE:
<div class="$$mockup-code w-full">
  <pre data-prefix="$"><code>npm i daisyui</code></pre>
</div>

----------------------------------------

TITLE: Styling Radial Progress with Background and Border in HTML
DESCRIPTION: Demonstrates advanced styling of a radial progress component, including background color, text color, and border. This example uses DaisyUI's utility classes for consistent theming.

LANGUAGE: html
CODE:
<div
  class="$$radial-progress bg-primary text-primary-content border-primary border-4"
  style="--$$value:70;" aria-valuenow="70" role="progressbar">
  70%
</div>

----------------------------------------

TITLE: Creating Vite Project
DESCRIPTION: Creates a new Vite project in the current directory using the vanilla template.

LANGUAGE: sh
CODE:
npm create vite@latest ./ -- --template vanilla

----------------------------------------

TITLE: Multi-Input Fieldset Layout
DESCRIPTION: Example of a fieldset containing multiple input fields with labels for form organization.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset w-xs bg-base-200 border border-base-300 p-4 rounded-box">
  <legend class="$$fieldset-legend">Page details</legend>
  
  <label class="$$fieldset-label">Title</label>
  <input type="text" class="$$input" placeholder="My awesome page" />
  
  <label class="$$fieldset-label">Slug</label>
  <input type="text" class="$$input" placeholder="my-awesome-page" />
  
  <label class="$$fieldset-label">Author</label>
  <input type="text" class="$$input" placeholder="Name" />
</fieldset>

----------------------------------------

TITLE: Displaying Multiple Radial Progress Values in HTML
DESCRIPTION: Illustrates how to create multiple radial progress indicators with different values (0%, 20%, 60%, 80%, 100%). Each component uses the same class but varies the CSS variable for the value.

LANGUAGE: html
CODE:
<div class="$$radial-progress" style="--$$value:0;" aria-valuenow="0" role="progressbar">0%</div>
<div class="$$radial-progress" style="--$$value:20;" aria-valuenow="20" role="progressbar">20%</div>
<div class="$$radial-progress" style="--$$value:60;" aria-valuenow="60" role="progressbar">60%</div>
<div class="$$radial-progress" style="--$$value:80;" aria-valuenow="80" role="progressbar">80%</div>
<div class="$$radial-progress" style="--$$value:100;" aria-valuenow="100" role="progressbar">100%</div>

----------------------------------------

TITLE: Creating Dash Style Badges in HTML using DaisyUI
DESCRIPTION: This code demonstrates how to create badges with a dash style using DaisyUI classes. The dash style is combined with different color classes.

LANGUAGE: html
CODE:
<div class="$$badge $$badge-dash $$badge-primary">Primary</div>
<div class="$$badge $$badge-dash $$badge-secondary">Secondary</div>
<div class="$$badge $$badge-dash $$badge-accent">Accent</div>
<div class="$$badge $$badge-dash $$badge-neutral">Neutral</div>
<div class="$$badge $$badge-dash $$badge-info">Info</div>
<div class="$$badge $$badge-dash $$badge-success">Success</div>
<div class="$$badge $$badge-dash $$badge-warning">Warning</div>
<div class="$$badge $$badge-dash $$badge-error">Error</div>

----------------------------------------

TITLE: Fetching daisyUI Docs in Zed Editor (Shell)
DESCRIPTION: Command to fetch daisyUI documentation in the Zed editor's chat window.

LANGUAGE: sh
CODE:
/fetch https://daisyui.com/llms.txt

----------------------------------------

TITLE: Fieldset with Joined Input Elements
DESCRIPTION: Shows how to implement a fieldset with joined form elements using DaisyUI's join classes.

LANGUAGE: html
CODE:
<fieldset class="$$fieldset w-xs bg-base-200 border border-base-300 p-4 rounded-box">
  <legend class="$$fieldset-legend">Settings</legend>
  <div class="$$join">
    <input type="text" class="$$input $$join-item" placeholder="Product name" />
    <button class="$$btn $$join-item">save</button>
  </div>
</fieldset>

----------------------------------------

TITLE: Colored Chat Bubbles
DESCRIPTION: Demonstrates the various color options available for chat bubbles including primary, secondary, accent, neutral, info, success, warning, and error variations.

LANGUAGE: html
CODE:
<div class="$$chat $$chat-start">
  <div class="$$chat-bubble $$chat-bubble-primary">What kind of nonsense is this</div>
</div>
<div class="$$chat $$chat-start">
  <div class="$$chat-bubble $$chat-bubble-secondary">Put me on the Council and not make me a Master!??</div>
</div>

----------------------------------------

TITLE: Adding Validator Hint for Email Input
DESCRIPTION: This example demonstrates how to use the validator-hint class to display a hint text when the email input is invalid.

LANGUAGE: html
CODE:
<input class="$$input $$validator" type="email" required placeholder="mail@site.com" />
<div class="$$validator-hint">Enter valid email address</div>

----------------------------------------

TITLE: Dropdown Positioning Examples
DESCRIPTION: These snippets showcase various positioning options for dropdowns, including alignment to start, end, center, top, and bottom of the button.

LANGUAGE: html
CODE:
<div class="$$dropdown $$dropdown-bottom $$dropdown-end">
  <div tabindex="0" role="button" class="$$btn m-1">Click ⬇️</div>
  <ul tabindex="0" class="$$dropdown-content $$menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm">
    <li><a>Item 1</a></li>
    <li><a>Item 2</a></li>
  </ul>
</div>

----------------------------------------

TITLE: Responsive Indicator Positioning
DESCRIPTION: Demonstrates responsive indicator positioning that changes based on screen size breakpoints.

LANGUAGE: html
CODE:
<div class="$$indicator">
  <span class="$$indicator-item $$indicator-start sm:$$indicator-middle md:$$indicator-bottom lg:$$indicator-center xl:$$indicator-end $$badge $$badge-secondary"></span>
  <div class="bg-base-300 grid h-32 w-32 place-items-center">content</div>
</div>

----------------------------------------

TITLE: Implementing Email Validation with DaisyUI Validator
DESCRIPTION: This snippet shows how to use the validator class for email input validation. It applies error or success colors based on the input's validity.

LANGUAGE: html
CODE:
<input class="$$input $$validator" type="email" required placeholder="mail@site.com" />

----------------------------------------

TITLE: Long Line Code Mockup with Scroll
DESCRIPTION: Shows how the mockup handles long lines with horizontal scrolling.

LANGUAGE: html
CODE:
<div class="$$mockup-code w-full">
  <pre data-prefix="~"><code>Magnam dolore beatae necessitatibus nemopsum itaque sit. Et porro quae qui et et dolore ratione.</code></pre>
</div>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, @tailwindcss/vite, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Creating Label for Date Input in DaisyUI (HTML)
DESCRIPTION: This example demonstrates how to implement a label for a date input field using DaisyUI classes. The label is placed before the input element of type 'date'.

LANGUAGE: html
CODE:
<label class="$$input">
  <span class="$$label">Publish date</span>
  <input type="date" />
</label>

----------------------------------------

TITLE: Configuring DaisyUI Theme Settings
DESCRIPTION: Shows how to configure theme settings in the CSS file using @plugin directive with theme flags for default and dark mode preferences

LANGUAGE: diff
CODE:
@import "tailwindcss";
- @plugin "daisyui";
+ @plugin "daisyui" {
+   themes: light --default, dark --prefersdark;
+ }

----------------------------------------

TITLE: Implementing URL Validation with DaisyUI Validator
DESCRIPTION: This example shows how to use the validator class for URL input validation. It includes a pattern for validating URLs and a hint for user guidance.

LANGUAGE: html
CODE:
<input type="url" class="$$input $$validator" required placeholder="https://" value="https://"
  pattern="^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\\-].*[a-zA-Z0-9])?\\.)+[a-zA-Z].*$" 
  title="Must be valid URL" />
<p class="$$validator-hint">Must be valid URL</p>

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS and Vike
DESCRIPTION: This TypeScript code configures Vite to use the Tailwind CSS and Vike plugins. It imports necessary modules and exports the configuration using defineConfig.

LANGUAGE: ts
CODE:
import tailwindcss from "@tailwindcss/vite";
import vike from "vike/plugin";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [tailwindcss(), vike()],
});

----------------------------------------

TITLE: Configuring DaisyUI Theme Settings
DESCRIPTION: Shows how to configure theme settings in the CSS file using @plugin directive with theme flags for default and dark mode preferences

LANGUAGE: diff
CODE:
@import "tailwindcss";
- @plugin "daisyui";
+ @plugin "daisyui" {
+   themes: light --default, dark --prefersdark;
+ }

----------------------------------------

TITLE: Creating Colored Status Icons in HTML with DaisyUI
DESCRIPTION: This snippet shows how to apply different colors to status icons using DaisyUI color classes. It includes primary, secondary, accent, neutral, info, success, warning, and error colors.

LANGUAGE: html
CODE:
<div aria-label="status" class="status status-primary"></div>
<div aria-label="status" class="status status-secondary"></div>
<div aria-label="status" class="status status-accent"></div>
<div aria-label="status" class="status status-neutral"></div>

<div aria-label="info" class="status status-info"></div>
<div aria-label="success" class="status status-success"></div>
<div aria-label="warning" class="status status-warning"></div>
<div aria-label="error" class="status status-error"></div>

----------------------------------------

TITLE: Implementing Select Validation with DaisyUI Validator
DESCRIPTION: This snippet demonstrates how to use the validator class for select input validation. It includes a required selection and a hint, along with a submit button to trigger validation.

LANGUAGE: html
CODE:
<form>
  <select class="$$select $$validator" required>
    <option disabled selected value="">Choose:</option>
    <option>Tabs</option>
    <option>Spaces</option>
  </select>
  <p class="$$validator-hint">Required</p>
  <button class="$$btn" type="submit">Submit form</button>
</form>

----------------------------------------

TITLE: Configuring CSS with Tailwind and DaisyUI
DESCRIPTION: PostCSS configuration file importing Tailwind CSS, Typography plugin, and daisyUI

LANGUAGE: postcss
CODE:
@import 'tailwindcss';
@plugin "@tailwindcss/typography";
@plugin "daisyui";

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI via npm
DESCRIPTION: This command installs the latest versions of Tailwind CSS CLI and daisyUI using npm. It's a prerequisite for setting up the project.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/cli@latest daisyui@latest

----------------------------------------

TITLE: Adding Bounce Animation to Status Icon in HTML
DESCRIPTION: This snippet shows how to apply a bounce animation to a status icon using DaisyUI and Tailwind CSS classes. It creates a bouncing effect for the status icon.

LANGUAGE: html
CODE:
<div class="status status-info animate-bounce"></div> Unread messages

----------------------------------------

TITLE: Disabled File Input in HTML with DaisyUI
DESCRIPTION: Demonstrates how to create a disabled file input element using DaisyUI styling. Uses the 'file-input' class and the 'disabled' attribute.

LANGUAGE: html
CODE:
<input type="file" placeholder="You can't touch this" class="file-input" disabled />

----------------------------------------

TITLE: Creating a Dropdown Menu with Headless UI in React
DESCRIPTION: Example of creating a basic dropdown menu component using Headless UI in a React application. This snippet demonstrates the structure and usage of Headless UI's Menu component.

LANGUAGE: jsx
CODE:
import { Menu } from "@headlessui/react"

export default function MyDropDown() {
  return (
    <Menu>
      <Menu.Button>Button</Menu.Button>
      <Menu.Items>
        <Menu.Item>
          <li>
            <a href="/link">Item 1</a>
          </li>
        </Menu.Item>
        <Menu.Item>
          <li>
            <a href="/link">Item 2</a>
          </li>
        </Menu.Item>
      </Menu.Items>
    </Menu>
  )
}

----------------------------------------

TITLE: Configuring Tailwind CSS for daisyUI
DESCRIPTION: Configuration code to add daisyUI as a plugin in the Tailwind CSS configuration file (tailwind.config.js).

LANGUAGE: javascript
CODE:
module.exports = {
  //...
  plugins: [require("daisyui")],
}

----------------------------------------

TITLE: Starting Phoenix Server
DESCRIPTION: Command to start the Phoenix development server after project creation.

LANGUAGE: sh
CODE:
mix phx.server

----------------------------------------

TITLE: Applying Leftward Triangle Mask to Image in HTML
DESCRIPTION: This code shows how to use DaisyUI classes to apply a leftward-pointing triangle mask to an image. The mask and mask-triangle-3 classes are used for this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-triangle-3"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Configuring Tailwind CSS with daisyUI from local file
DESCRIPTION: PostCSS configuration to import Tailwind CSS and add daisyUI as a plugin from a local file.

LANGUAGE: postcss
CODE:
@import "tailwindcss" source(none);
@source "../../../public/*.html";
@source "../../../app/helpers/**/*.rb";
@source "../../../app/javascript/**/*.js";
@source "../../../app/views/**/*";

@plugin "./daisyui.js";

----------------------------------------

TITLE: Updating Tab Component
DESCRIPTION: Rename tabs-lifted to tabs-lift.

LANGUAGE: diff
CODE:
- <div class="tabs tabs-lifted">
+ <div class="tabs tabs-lift">

----------------------------------------

TITLE: Creating a New Nuxt Project
DESCRIPTION: This command initializes a new Nuxt project in the current directory using the latest version of Nuxt.

LANGUAGE: sh
CODE:
npx nuxi@latest init

----------------------------------------

TITLE: Applying Colors to Loading Animations in HTML with DaisyUI
DESCRIPTION: This snippet shows how to apply different colors to loading spinner animations using DaisyUI classes. It demonstrates the use of primary, secondary, accent, neutral, info, success, warning, and error color classes.

LANGUAGE: html
CODE:
<span class="$$loading $$loading-spinner text-primary"></span>
<span class="$$loading $$loading-spinner text-secondary"></span>
<span class="$$loading $$loading-spinner text-accent"></span>
<span class="$$loading $$loading-spinner text-neutral"></span>
<span class="$$loading $$loading-spinner text-info"></span>
<span class="$$loading $$loading-spinner text-success"></span>
<span class="$$loading $$loading-spinner text-warning"></span>
<span class="$$loading $$loading-spinner text-error"></span>

----------------------------------------

TITLE: Creating a Rails view with daisyUI button
DESCRIPTION: ERB template for the homepage view, including a button with daisyUI classes.

LANGUAGE: erb
CODE:
<button class="btn btn-primary">Hello daisyUI!</button>

----------------------------------------

TITLE: Simple Code Mockup Without Prefix
DESCRIPTION: Basic implementation without line prefix for simple code display.

LANGUAGE: html
CODE:
<div class="$$mockup-code w-full">
  <pre><code>without prefix</code></pre>
</div>

----------------------------------------

TITLE: Creating a New Vike Project
DESCRIPTION: This command creates a new Vike project in the current directory using npm.

LANGUAGE: sh
CODE:
npm create vike ./

----------------------------------------

TITLE: List Component with Default Second Column Growth
DESCRIPTION: Shows a list with song information where the second column automatically fills the remaining space. Includes profile images, song titles, and action buttons.

LANGUAGE: html
CODE:
<ul class="$$list bg-base-100 rounded-box shadow-md">
  <li class="p-4 pb-2 text-xs opacity-60 tracking-wide">Most played songs this week</li>
  <li class="$$list-row">
    <div><img class="size-10 rounded-box" src="https://img.daisyui.com/images/profile/demo/1@94.webp"/></div>
    <div>
      <div>Dio Lupa</div>
      <div class="text-xs uppercase font-semibold opacity-60">Remaining Reason</div>
    </div>
    <button class="$$btn $$btn-square $$btn-ghost">
      <!-- Button content -->
    </button>
  </li>
  <!-- Additional list items -->
</ul>

----------------------------------------

TITLE: Setting up CSS with Tailwind and DaisyUI
DESCRIPTION: CSS configuration to import Tailwind CSS and enable daisyUI plugin.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Importing Svelte Translation Component
DESCRIPTION: Simple Svelte script tag importing a Translation component, likely used for internationalization support in the blog post.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI Dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Implementing Basic Breadcrumbs with DaisyUI in HTML
DESCRIPTION: This snippet demonstrates how to create a basic breadcrumb navigation using DaisyUI classes. It includes clickable links for home and documents, and a non-clickable current page indicator.

LANGUAGE: html
CODE:
<div class="$$breadcrumbs text-sm">
  <ul>
    <li><a>Home</a></li>
    <li><a>Documents</a></li>
    <li>Add Document</li>
  </ul>
</div>

----------------------------------------

TITLE: Setting Up CSS for Tailwind and daisyUI
DESCRIPTION: This PostCSS code imports Tailwind CSS and adds the daisyUI plugin to the CSS file. It should replace any existing styles in the Layout.css file.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Applying Downward Triangle Mask to Image in HTML
DESCRIPTION: This snippet demonstrates how to apply a downward-pointing triangle mask to an image using DaisyUI classes. The mask and mask-triangle-2 classes are combined to achieve this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-triangle-2"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />

----------------------------------------

TITLE: Configuring daisyUI 5 with Default Settings
DESCRIPTION: Example of a daisyUI configuration with all default settings specified.

LANGUAGE: CSS
CODE:
@plugin "daisyui" {
  themes: light --default, dark --prefersdark;
  root: ":root";
  include: ;
  exclude: ;
  prefix: ;
  logs: true;
}

----------------------------------------

TITLE: Creating Badges with Different Sizes in HTML using DaisyUI
DESCRIPTION: This code shows how to create badges of various sizes using DaisyUI classes. Sizes range from extra small (xs) to extra large (xl).

LANGUAGE: html
CODE:
<div class="$$badge $$badge-xs">Xsmall</div>
<div class="$$badge $$badge-sm">Small</div>
<div class="$$badge $$badge-md">Medium</div>
<div class="$$badge $$badge-lg">Large</div>
<div class="$$badge $$badge-xl">Xlarge</div>

----------------------------------------

TITLE: Adding CSS Build Script to package.json
DESCRIPTION: This JSON snippet adds a script to the package.json file for building CSS using PostCSS. It compiles the input CSS file to an output file.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build:css": "postcss app.css -o public/output.css"
  },
}

----------------------------------------

TITLE: Enabling All Themes in daisyUI
DESCRIPTION: Shows how to enable all available themes in daisyUI configuration.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  themes: all;
}

----------------------------------------

TITLE: Modifying a daisyUI Button with Additional Utility Class in HTML
DESCRIPTION: This example shows how to modify a daisyUI button component by adding the 'btn-primary' utility class, changing its appearance while maintaining the base button styles.

LANGUAGE: html
CODE:
<button class="btn btn-primary">Button</button>

----------------------------------------

TITLE: Implementing Badges in Text with DaisyUI
DESCRIPTION: This snippet demonstrates how to use badges within different text elements such as headings and paragraphs. It shows how to adjust badge sizes to match text sizes.

LANGUAGE: html
CODE:
<h1 class="text-xl font-semibold">
  Heading 1 <span class="$$badge $$badge-xl">Badge</span>
</h1>

<h2 class="text-lg font-semibold">
  Heading 2 <span class="$$badge $$badge-lg">Badge</span>
</h2>

<h3 class="text-base font-semibold">
  Heading 3 <span class="$$badge $$badge-md">Badge</span>
</h3>

<h4 class="text-sm font-semibold">
  Heading 4 <span class="$$badge $$badge-sm">Badge</span>
</h4>

<h5 class="text-xs font-semibold">
  Heading 5 <span class="$$badge $$badge-xs">Badge</span>
</h5>

<p class="text-xs">
  Paragraph <span class="$$badge $$badge-xs">Badge</span>
</p>

----------------------------------------

TITLE: Creating a new Solid Start project using npm
DESCRIPTION: This command initializes a new Solid Start project in the current directory using npm.

LANGUAGE: sh
CODE:
npm init solid@latest ./

----------------------------------------

TITLE: Running Laravel Development Server
DESCRIPTION: Commands to start the Laravel development server using artisan.

LANGUAGE: sh
CODE:
php artisan serve

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI dependencies
DESCRIPTION: This command installs Tailwind CSS, its PostCSS plugin, and the latest version of daisyUI using npm.

LANGUAGE: sh
CODE:
npm add tailwindcss @tailwindcss/postcss daisyui@latest

----------------------------------------

TITLE: Creating Badges in Buttons with DaisyUI
DESCRIPTION: This code shows how to incorporate badges into buttons using DaisyUI classes. It demonstrates both default and colored badges within buttons.

LANGUAGE: html
CODE:
<button class="$$btn">
  Inbox <div class="$$badge $$badge-sm">+99</div>
</button>

<button class="$$btn">
  Inbox <div class="$$badge $$badge-sm $$badge-secondary">+99</div>
</button>

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Commands to create and navigate to a new Laravel project using Laravel installer.

LANGUAGE: sh
CODE:
laravel new my-app
cd my-app

----------------------------------------

TITLE: Browser Mockup with Border Implementation
DESCRIPTION: Creates a browser window mockup with a border styling. Includes a toolbar with an address bar and a content area with centered text.

LANGUAGE: html
CODE:
<div class="$$mockup-browser border-base-300 border w-full">
  <div class="$$mockup-browser-toolbar">
    <div class="$$input">https://daisyui.com</div>
  </div>
  <div class="grid place-content-center border-t border-base-300 h-80">Hello!</div>
</div>

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS
DESCRIPTION: This JavaScript code configures PostCSS to use the Tailwind CSS plugin. It should be placed in a file named postcss.config.mjs.

LANGUAGE: js
CODE:
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};
export default config;

----------------------------------------

TITLE: Importing CSS in JavaScript
DESCRIPTION: Example of how to import the generated CSS file in a JavaScript module after running the daisyUI setup.

LANGUAGE: javascript
CODE:
import "/output.css"

----------------------------------------

TITLE: Installing daisyUI as a Node dependency
DESCRIPTION: Commands to initialize a package.json file and install daisyUI as a dependency using npm.

LANGUAGE: sh
CODE:
npm init -y
npm install daisyui@latest

----------------------------------------

TITLE: Svelte Script Import Declaration
DESCRIPTION: Script tag importing the Translate component from the components directory

LANGUAGE: html
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Importing Tailwind CSS and daisyUI in Global CSS
DESCRIPTION: This CSS snippet imports Tailwind CSS and adds daisyUI as a plugin. It should replace any existing styles in the global CSS file of the Next.js project.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Linking CSS in HTML
DESCRIPTION: Example of how to link the generated CSS file in an HTML document after running the daisyUI setup.

LANGUAGE: html
CODE:
<link href="/output.css" rel="stylesheet" />

----------------------------------------

TITLE: Creating New Phoenix Project without Database
DESCRIPTION: Command to create a new Phoenix project in the current directory without database setup using the --no-ecto flag.

LANGUAGE: sh
CODE:
mix phx.new ./ --no-ecto

----------------------------------------

TITLE: Importing daisyUI in CSS for Tailwind CSS 4
DESCRIPTION: CSS import statements to include Tailwind CSS and daisyUI in your project. This is the basic setup for using daisyUI with Tailwind CSS 4 alpha.

LANGUAGE: css
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Using DaisyUI Component Color Modifiers
DESCRIPTION: Examples of applying semantic colors to DaisyUI components using modifier classes.

LANGUAGE: html
CODE:
<button class="btn btn-primary">Button</button>

LANGUAGE: html
CODE:
<input type="checkbox" class="checkbox checkbox-secondary" />

----------------------------------------

TITLE: Building CSS with PostCSS CLI
DESCRIPTION: Command to build the CSS file using PostCSS CLI, which may need to be added to package.json scripts after setup.

LANGUAGE: bash
CODE:
npx postcss-cli tailwind.css -o output.css

----------------------------------------

TITLE: Updating SvelteKit configuration for Tailwind CSS
DESCRIPTION: Changes to the svelte.config.js file to add vitePreprocess for handling Tailwind CSS in SvelteKit.

LANGUAGE: javascript
CODE:
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
/** @type {import('@sveltejs/kit').Config} */
const config = {
  preprocess: vitePreprocess(),
  kit: {
    adapter: adapter()
  }
};

export default config;

----------------------------------------

TITLE: Custom Colored Radio Buttons
DESCRIPTION: Example of radio buttons with custom background, border and checked state colors using Tailwind CSS utility classes.

LANGUAGE: html
CODE:
<input
  type="radio" name="radio-12" checked="checked"
  class="$$radio bg-red-100 border-red-300 checked:bg-red-200 checked:text-red-600 checked:border-red-600" />
<input
  type="radio" name="radio-12" checked="checked"
  class="$$radio bg-blue-100 border-blue-300 checked:bg-blue-200 checked:text-blue-600 checked:border-blue-600" />

----------------------------------------

TITLE: Implementing Pikaday Calendar with daisyUI Styles (Vue)
DESCRIPTION: This snippet demonstrates how to implement a Pikaday calendar using daisyUI styles in a Vue component. It includes the necessary import and initialization code.

LANGUAGE: Vue
CODE:
<script>
import Pikaday from "pikaday";
export default {
  mounted: function() {
    const picker = new Pikaday({
      field: this.$refs.myDatepicker
    });
  }
};
</script>
<template>
  <input type="text" class="$$input $$pika-single" ref="myDatepicker" value="Pick a day"/>
</template>

----------------------------------------

TITLE: Installing Dependencies for Existing Laravel Project
DESCRIPTION: Command for installing required dependencies including Tailwind CSS and daisyUI for an existing Laravel project.

LANGUAGE: bash
CODE:
yarn add -D tailwindcss daisyui@latest postcss autoprefixer && npx tailwindcss init -p

----------------------------------------

TITLE: Installing daisyUI and Tailwind CSS with NPM
DESCRIPTION: Command to initiate the daisyUI setup process, which can install and configure Tailwind CSS, PostCSS, and daisyUI based on user preferences.

LANGUAGE: bash
CODE:
npm init daisyui

----------------------------------------

TITLE: Implementing Emoji Flip Effect in HTML
DESCRIPTION: Implementation of swap component with flip effect to toggle between emoji faces.

LANGUAGE: html
CODE:
<label class="$$swap $$swap-flip text-9xl">
  <input type="checkbox" />
  <div class="$$swap-on">😈</div>
  <div class="$$swap-off">😇</div>
</label>

----------------------------------------

TITLE: Styling Checkbox with Custom Colors in HTML
DESCRIPTION: This snippet shows how to apply custom colors to a checkbox using Tailwind CSS classes.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$checkbox border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500 " />

----------------------------------------

TITLE: Configuring Tailwind CSS for Mary UI
DESCRIPTION: Tailwind configuration file setup including content paths and daisyUI plugin integration.

LANGUAGE: javascript
CODE:
export default {
  content: [
    "./resources/**/**/*.{js,blade.php}",
    "./app/View/Components/**/**/*.php",
    "./app/Livewire/**/**/*.php",
    "./vendor/robsontenorio/mary/src/View/Components/**/*.php",
  ],
  plugins: [require("daisyui")],
}

----------------------------------------

TITLE: Creating SvelteKit layout file with Tailwind CSS import
DESCRIPTION: Bash command to create a new +layout.svelte file in the SvelteKit routes directory and import Tailwind CSS styles.

LANGUAGE: bash
CODE:
echo '
<script>
  import "tailwindcss/tailwind.css";
</script>

<slot />
' > src/routes/+layout.svelte

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installs the latest versions of daisyUI, Tailwind CSS, and PostCSS dependencies

LANGUAGE: sh
CODE:
npm install daisyui@latest tailwindcss@latest @tailwindcss/postcss@latest postcss@latest --force

----------------------------------------

TITLE: Dropdown Modifiers
DESCRIPTION: These snippets demonstrate dropdown modifiers, including hover activation and force open state.

LANGUAGE: html
CODE:
<div class="$$dropdown $$dropdown-hover">
  <div tabindex="0" role="button" class="$$btn m-1">Hover</div>
  <ul tabindex="0" class="$$dropdown-content $$menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm">
    <li><a>Item 1</a></li>
    <li><a>Item 2</a></li>
  </ul>
</div>

----------------------------------------

TITLE: Minimal Tailwind CSS Configuration
DESCRIPTION: Basic Tailwind CSS configuration for globals.css

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------

TITLE: Creating a new SvelteKit project using CLI
DESCRIPTION: This command creates a new SvelteKit project in the current directory using the SvelteKit CLI.

LANGUAGE: sh
CODE:
npx sv create ./

----------------------------------------

TITLE: Improved Color Variable Format in daisyUI 5
DESCRIPTION: Demonstrates the new color variable format in daisyUI 5 which is more readable and customizable compared to the previous version.

LANGUAGE: css
CODE:
/* hard to read variable names, hard to customize values */
{
--b1: 100% 0 0;
--b2: 96.1151% 0 0;
--b3: 92.4169% .00108 197.137559;
--bc: 27.8078% .029596 256.847952;
--p: 49.12% .3096 275.75;
--pc: 89.824% .06192 275.75;
--s: 69.71% .329 342.55;
--sc: 98.71% .0106 342.55;
--a: 76.76% .184 183.61;
--ac: 15.352% .0368 183.61;
--n: 32.1785% .02476 255.701624;
--nc: 89.4994% .011585 252.096176;
--in: 72.06% .191 231.6;
--inc: 0% 0 0;
--su: 64.8% .15 160;
--suc: 0% 0 0;
--wa: 84.71% .199 83.87;
--wac: 0% 0 0;
--er: 71.76% .221 22.18;
--erc: 0% 0 0;
}

LANGUAGE: css
CODE:
/* standard color format, easy to customize in browser */
{
--color-base-100: oklch(100% 0 0);
--color-base-200: oklch(96.115% 0 0);
--color-base-300: oklch(92.416% 0.001 197.137);
--color-base-content: oklch(27.807% 0.029 256.847);
--color-primary: oklch(49.12% 0.309 275.75);
--color-primary-content: oklch(89.824% 0.061 275.75);
--color-secondary: oklch(69.71% 0.329 342.55);
--color-secondary-content: oklch(98.71% 0.01 342.55);
--color-accent: oklch(76.76% 0.184 183.61);
--color-accent-content: oklch(15.352% 0.036 183.61);
--color-neutral: oklch(20% 0.024 255.701);
--color-neutral-content: oklch(89.499% 0.011 252.096);
--color-info: oklch(72.06% 0.191 231.6);
--color-info-content: oklch(0% 0 0);
--color-success: oklch(64.8% 0.15 160);
--color-success-content: oklch(0% 0 0);
--color-warning: oklch(84.71% 0.199 83.87);
--color-warning-content: oklch(0% 0 0);
--color-error: oklch(71.76% 0.221 22.18);
--color-error-content: oklch(0% 0 0);
}

----------------------------------------

TITLE: Footer with Newsletter Subscription Form
DESCRIPTION: Footer implementation with an email newsletter subscription form alongside standard navigation sections. Includes input field and subscribe button in a joined layout.

LANGUAGE: html
CODE:
<footer class="$$footer sm:$$footer-horizontal bg-base-200 text-base-content p-10">
  <!-- Navigation sections -->
  <form>
    <h6 class="$$footer-title">Newsletter</h6>
    <fieldset class="w-80"><!-- Form fields --></fieldset>
  </form>
</footer>

----------------------------------------

TITLE: Installing DaisyUI v4 Package
DESCRIPTION: Command to update DaisyUI to the latest version using npm.

LANGUAGE: bash
CODE:
npm i -D daisyui@latest

----------------------------------------

TITLE: Adding Tailwind CSS and daisyUI to CSS file
DESCRIPTION: This CSS snippet imports Tailwind CSS and adds daisyUI as a plugin. It should replace any existing styles in the file.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Installing daisyUI and Tailwind CSS with Yarn
DESCRIPTION: Command to initiate the daisyUI setup process using Yarn package manager instead of NPM.

LANGUAGE: bash
CODE:
yarn create daisyui

----------------------------------------

TITLE: Ghost Style Text Input in HTML
DESCRIPTION: A text input with ghost style applied.

LANGUAGE: html
CODE:
<input type="text" placeholder="Type here" class="$$input $$input-ghost" />

----------------------------------------

TITLE: Configuring Tailwind CSS for SvelteKit with daisyUI
DESCRIPTION: Modifications to the tailwind.config.js file to include content paths for SvelteKit files and add daisyUI as a plugin.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{html,svelte,js,ts}'],
  theme: {
    extend: {},
  },
  plugins: [require('daisyui')],
}

----------------------------------------

TITLE: Importing Tailwind CSS and daisyUI in CSS file
DESCRIPTION: This CSS snippet shows how to import Tailwind CSS and add the daisyUI plugin to your project's CSS file. It replaces any existing styles with these imports.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Adding Primary-Muted Color to Tailwind Config
DESCRIPTION: Initial configuration to add a new 'primary-muted' color to Tailwind CSS using OKLCH color space and CSS variables.

LANGUAGE: javascript
CODE:
// tailwind.config.js
module.exports = {
  plugins: [require("daisyui")],

  theme: {
    extend: {
      colors: {
        "primary-muted": "oklch(var(--primary-muted) / <alpha-value>)",
      },
    },
  },
}

----------------------------------------

TITLE: Sized Text Inputs in HTML
DESCRIPTION: Examples of text inputs with various size classes applied.

LANGUAGE: html
CODE:
<input type="text" placeholder="Xsmall" class="$$input $$input-xs" />
<input type="text" placeholder="Small" class="$$input $$input-sm" />
<input type="text" placeholder="Medium" class="$$input $$input-md" />
<input type="text" placeholder="Large" class="$$input $$input-lg" />
<input type="text" placeholder="Xlarge" class="$$input $$input-xl" />

----------------------------------------

TITLE: Installing Dependencies for daisyUI Online Store Template
DESCRIPTION: Command to install the required dependencies for the daisyUI online store template project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Setting up CSS with Tailwind and DaisyUI
DESCRIPTION: CSS configuration to import Tailwind CSS and enable the daisyUI plugin.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Pricing Card Implementation
DESCRIPTION: Demonstrates a pricing card layout with badge, pricing details, feature list with icons, and a subscribe button. Uses DaisyUI utility classes for styling.

LANGUAGE: html
CODE:
<div class="$$card w-96 bg-base-100 shadow-sm">
  <div class="$$card-body">
    <span class="$$badge $$badge-xs $$badge-warning">Most Popular</span>
    <div class="flex justify-between">
      <h2 class="text-3xl font-bold">Premium</h2>
      <span class="text-xl">$29/mo</span>
    </div>
    <!-- Additional feature list code omitted for brevity -->
    <div class="mt-6">
      <button class="$$btn $$btn-primary $$btn-block">Subscribe</button>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating a Basic iPhone Mockup with DaisyUI
DESCRIPTION: This snippet shows how to create a basic iPhone mockup using DaisyUI classes. It includes a camera element and a display area with centered text.

LANGUAGE: html
CODE:
<div class="$$mockup-phone">
  <div class="$$mockup-phone-camera"></div>
  <div class="$$mockup-phone-display text-white grid place-content-center">It's Glowtime.</div>
</div>

----------------------------------------

TITLE: Customizing Landing Page in Astro Documentation Template
DESCRIPTION: JSX code for the landing page structure in the Astro Documentation Template, showing imported components and layout.

LANGUAGE: jsx
CODE:
---
import CodeBlock from "../components/home/CodeBlock.astro";
import Features from "../components/home/Features.astro";
import Hero from "../components/home/Hero.astro";
import Integration from "../components/home/Integration.astro";
import Contributors from "../components/home/Contributors.astro";
import Testimonial from "../components/home/Testimonial.astro";
---

<script>
  import Translate from "$components/Translate.svelte"
</script>

<div>
  <Hero />
  <Features />
  <CodeBlock />
  <Integration />
  <Contributors />
  <Testimonial />
</div>

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installs the latest versions of Tailwind CSS, Tailwind CSS Vite plugin, and daisyUI packages.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Creating Colored Checkboxes in HTML with DaisyUI
DESCRIPTION: This example demonstrates how to apply different color classes to checkboxes using DaisyUI.

LANGUAGE: html
CODE:
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-primary" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-secondary" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-accent" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-neutral" />

<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-info" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-success" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-warning" />
<input type="checkbox" checked="checked" class="$$checkbox $$checkbox-error" />

----------------------------------------

TITLE: Customizing iPhone Mockup with Color and Wallpaper in DaisyUI
DESCRIPTION: This example demonstrates how to customize the iPhone mockup by adding a border color and a wallpaper image to the display area.

LANGUAGE: html
CODE:
<div class="$$mockup-phone border-primary">
  <div class="$$mockup-phone-camera"></div>
  <div class="$$mockup-phone-display">
    <img alt="wallpaper" src="https://img.daisyui.com/images/stock/453966.webp"/>
  </div>
</div>

----------------------------------------

TITLE: Customizing Sidebar in Astro Documentation Template
DESCRIPTION: HTML code for the sidebar component in the Astro Documentation Template, including drawer and navigation structure.

LANGUAGE: html
CODE:
<div class="drawer-side z-40 md:border-r md:border-base-content/10">
  <label
    for="my-drawer-2"
    aria-label="close sidebar"
    class="drawer-overlay"
  ></label>
  <aside class="bg-base-100 min-h-screen w-80">
    <div
      class="bg-base-100/90 sticky top-0 z-20 items-center gap-2 px-4 py-2 backdrop-blur lg:flex"
    >
      <a href="/" class="flex-0 btn btn-ghost px-2">
        <h1
          class="text-2xl font-bold bg-clip-text text-transparent bg-linear-to-r from-primary to-primary/50"
        >
          Access Shield{" "}
          <span class="text-sm text-base-content opacity-50">docs</span>
        </h1>
      </a>
    </div>
  </aside>

  <!-- SideBar Code -->
</div>

----------------------------------------

TITLE: Importing Tailwind CSS and daisyUI in CSS
DESCRIPTION: This CSS code imports Tailwind CSS and adds the daisyUI plugin. It should be placed in the src/App.css file, replacing any existing styles.

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Installing daisyUI and Tailwind CSS with Bun
DESCRIPTION: Command to initiate the daisyUI setup process using Bun package manager.

LANGUAGE: bash
CODE:
bun create daisyui

----------------------------------------

TITLE: Customizing Radial Progress Color in HTML
DESCRIPTION: Shows how to customize the color of a radial progress indicator using DaisyUI's color classes. This example applies a primary color to the progress.

LANGUAGE: html
CODE:
<div class="$$radial-progress text-primary" style="--$$value:70;" aria-valuenow="70" role="progressbar">70%</div>

----------------------------------------

TITLE: Building Astro Documentation Template for Production
DESCRIPTION: Command for building the Astro Documentation Template for production deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Creating Next.js Project
DESCRIPTION: Command to initialize a new Next.js project using create-next-app

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Menu with Icons Implementation in DaisyUI
DESCRIPTION: Menu items with SVG icons and tooltip functionality

LANGUAGE: html
CODE:
<ul class="menu bg-base-200 rounded-box">
  <li>
    <a class="tooltip tooltip-right" data-tip="Home">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>
    </a>
  </li>
</ul>

----------------------------------------

TITLE: Importing Translate Component in Svelte
DESCRIPTION: This snippet imports the Translate component from the components directory in a Svelte file. It's likely used for internationalization or language translation features in the daisyUI documentation or related projects.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Installing daisyUI
DESCRIPTION: Command to install daisyUI as a development dependency

LANGUAGE: bash
CODE:
npm i -D daisyui@latest

----------------------------------------

TITLE: HTML RTL Direction Implementation
DESCRIPTION: Adding RTL support by setting the direction attribute on the root element

LANGUAGE: html
CODE:
dir=rtl

----------------------------------------

TITLE: Tailwind CSS Logical Properties Usage
DESCRIPTION: Examples of replacing directional CSS classes with logical property classes in Tailwind CSS

LANGUAGE: css
CODE:
left-* → start-*
right-* → end-*
ml-* → ms-*
mr-* → me-*
pl-* → ps-*
pr-* → pe-*

----------------------------------------

TITLE: Configuring Tailwind with daisyUI Plugin
DESCRIPTION: Updates to tailwind.config.ts file to include daisyUI as a plugin

LANGUAGE: diff
CODE:
import type { Config } from 'tailwindcss'
+ import daisyui from 'daisyui'
const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
- plugins: [],
+ plugins: [daisyui],
}
export default config

----------------------------------------

TITLE: Configuring daisyUI Plugin Options in CSS
DESCRIPTION: Example of how to configure daisyUI plugin options in CSS. This includes settings for logs, root element, component inclusion/exclusion, and theme selection.

LANGUAGE: css
CODE:
@plugin "daisyui" {
  logs: true;
  root: ":root";
  include: button, badge, input, card;
  exclude: badge;
  themes: light --default, dark --prefersdark, cupcake;
}

----------------------------------------

TITLE: Basic daisyUI Component Usage
DESCRIPTION: Example React component showing how to use daisyUI classes

LANGUAGE: jsx
CODE:
export default function Home() {
  return (
    <>
      <button className="btn btn-primary">Hello daisyUI!</button>
    </>
  )
}

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change directory into the newly created Next.js project

LANGUAGE: bash
CODE:
cd my-app

----------------------------------------

TITLE: Roadmap Timeline Component Implementation in Svelte
DESCRIPTION: A timeline component that renders roadmap milestones vertically with completion status indicators. Uses daisyUI classes for styling and includes SVG icons for done/pending states. Takes roadmap data as input and iterates through milestones and their items.

LANGUAGE: svelte
CODE:
<script>
  export let data
</script>

<ul
  class="timeline not-prose mb-20 timeline-compact timeline-snap-icon timeline-vertical bg-base-200 rounded-box lg:ps-6 pe-10 ps-6 pt-10 lg:pe-16 lg:py-16">
  {#each data.roadmap as milestone, index}
    <li class="lg:gap-x-6">
      {#if index > 0}
        <hr class={milestone.done && "bg-success"} />
      {/if}
      <div class="timeline-middle">
        {#if milestone.done}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            class="text-success h-5 w-5">
            <path
              fill-rule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
              clip-rule="evenodd" />
          </svg>
        {:else}
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            class="text-base-content/30 h-5 w-5">
            <path
              fill-rule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm.75-13a.75.75 0 00-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 000-1.5h-3.25V5z"
              clip-rule="evenodd" />
          </svg>
        {/if}
      </div>
      <div
        class={`timeline-box mb-4 w-full p-4 lg:mb-10 lg:p-10 timeline-end`}>
        <h2 class="mb-6 text-lg font-black">{milestone.title}</h2>
        <ol>
          {#each milestone.items as item}
            <li class="my-2 flex gap-2">
              {#if item.done}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  class="text-success inline-block size-4 mt-0.5 shrink-0">
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
                    clip-rule="evenodd" />
                </svg>
              {:else}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  class="text-base-content/20 inline-block size-4 mt-0.5 shrink-0">
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm.75-13a.75.75 0 00-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 000-1.5h-3.25V5z"
                    clip-rule="evenodd" />
                </svg>
              {/if}
              <span class="text-base-content/60">{item.title}</span>
            </li>
          {/each}
        </ol>
      </div>
      {#if index < data.roadmap.length - 1}
        <hr class={milestone.done && "bg-success"} />
      {/if}
    </li>
  {/each}
</ul>

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the Next.js development server

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Adding Prefix to daisyUI Classes
DESCRIPTION: Demonstrates how to add a prefix to all daisyUI classes, useful for avoiding naming conflicts with other libraries.

LANGUAGE: postcss
CODE:
@plugin "daisyui" {
  prefix: "d-";
}

----------------------------------------

TITLE: Demonstrating Inline JavaScript Code in HTML
DESCRIPTION: This snippet shows an example of inline JavaScript code within HTML content, used to demonstrate code formatting in the typography demo.

LANGUAGE: html
CODE:
Here is an example of inline code: `console.log('Hello, world!');`

----------------------------------------

TITLE: Importing daisyUI as a Tailwind CSS Plugin
DESCRIPTION: Shows how to import daisyUI as a plugin in Tailwind CSS 4 compared to the previous method in Tailwind CSS 3.

LANGUAGE: js
CODE:
// tailwind.config.{js,ts,mjs,cjs}
module.exports = {
  content: ["./src/**/*.{html,js}"],
  plugins: [
    require('daisyui');
  ],
}

LANGUAGE: postcss
CODE:
/* app.css */
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Building daisyUI Online Store for Production
DESCRIPTION: Command to build the daisyUI online store for production, optimizing and generating static assets ready for deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: JavaScript Function Declaration in Code Block
DESCRIPTION: This snippet demonstrates a JavaScript function declaration within a code block, used to showcase code formatting in the typography demo.

LANGUAGE: javascript
CODE:
```javascript
function greet() {
  console.log('Hello, world!');
}
```

----------------------------------------

TITLE: Using daisyUI Docs in Windsurf (Shell)
DESCRIPTION: Command to reference daisyUI documentation in Windsurf's chat window for prompts.

LANGUAGE: sh
CODE:
@web https://daisyui.com/llms.txt

----------------------------------------

TITLE: Creating a New Blog Post in Astro
DESCRIPTION: This Markdown snippet shows the structure and frontmatter for creating a new blog post in the Astro blog template.

LANGUAGE: markdown
CODE:
---
title: Boosting Sales with Effective Search Engine Optimization (SEO)
description: Lorem ipsum dolor sit, amet consectetur adipisicing elit. Hic eos odit sequi minima iure natus, odio tempora sit Lorem ipsum dolor sit.
date: 2024/01/12
image: ./images/post-1.jpg
author: antonio
authorImage: /images/about.jpeg
category: seo
---

<script>
  import Translate from "$components/Translate.svelte"
</script>

## **Introduction**

In the digital age, a strong online presence is crucial for businesses looking to thrive. One of the key components of a successful online strategy is Search Engine Optimization (SEO). By optimizing your website for search engines, you can significantly improve your visibility, attract more potential customers, and ultimately boost your sales. In this article, we'll explore some essential SEO strategies to help you achieve these goals.

----------------------------------------

TITLE: Adding daisyUI Plugin to WordPress CSS
DESCRIPTION: Enables daisyUI functionality by adding the plugin directive to the main CSS file in WindPress. This should be added at the end of the main.css file to ensure proper loading of dependencies.

LANGUAGE: postcss
CODE:
@plugin "daisyui";

----------------------------------------

TITLE: Installing Headless UI for Vue
DESCRIPTION: Command to install Headless UI package for Vue projects using npm.

LANGUAGE: bash
CODE:
npm install @headlessui/vue

----------------------------------------

TITLE: Implementing Pikaday Calendar with daisyUI Styles (React)
DESCRIPTION: This snippet shows how to implement a Pikaday calendar using daisyUI styles in a React component. It includes the necessary import, initialization, and cleanup code.

LANGUAGE: React
CODE:
import { useEffect, useRef } from "react";
import Pikaday from "pikaday";

export default function App() {
  const myDatepicker = useRef(null);
  useEffect(() => {
    const picker = new Pikaday({
      field: myDatepicker.current
    });
    return () => picker.destroy();
  }, []);
  return (
    <input type="text" className="$$input $$pika-single" defaultValue="Pick a date" ref={myDatepicker} />
  );
}

----------------------------------------

TITLE: Configuring Vite with Tailwind
DESCRIPTION: Sets up Vite configuration to use the Tailwind CSS plugin.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  plugins: [
    tailwindcss()
  ],
});

----------------------------------------

TITLE: Importing Translate Component in Svelte
DESCRIPTION: This code snippet imports a Translate component from a local file. It's likely used for internationalization or language translation features in the blog post.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Rendering Arrow Keys with DaisyUI
DESCRIPTION: Shows how to display arrow keys using DaisyUI's kbd class and Unicode characters. This example creates a layout for up, down, left, and right arrow keys.

LANGUAGE: html
CODE:
<div class="flex w-full justify-center">
  <kbd class="kbd">▲</kbd>
</div>
<div class="flex w-full justify-center gap-12">
  <kbd class="kbd">◀︎</kbd>
  <kbd class="kbd">▶︎</kbd>
</div>
<div class="flex w-full justify-center">
  <kbd class="kbd">▼</kbd>
</div>

----------------------------------------

TITLE: Installing Tailwind CSS and daisyUI dependencies
DESCRIPTION: This command installs the latest versions of Tailwind CSS, the Tailwind CSS Vite plugin, and daisyUI using npm.

LANGUAGE: sh
CODE:
npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

----------------------------------------

TITLE: Component Script Import - Svelte
DESCRIPTION: Basic Svelte script import statement for the Translate component

LANGUAGE: html
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Applying daisyUI Styles to Headless UI Dropdown in React
DESCRIPTION: Example of integrating daisyUI classes with a Headless UI dropdown component in React. This snippet shows how to apply daisyUI and Tailwind CSS utility classes to style the Headless UI Menu component.

LANGUAGE: jsx
CODE:
import { Menu } from "@headlessui/react"

export default function MyDropDown() {
  return (
    <Menu>
      <Menu.Button className="btn">Button</Menu.Button>
      <Menu.Items className="menu rounded-box bg-base-200 w-52">
        <Menu.Item>
          <li>
            <a href="/link">Item 1</a>
          </li>
        </Menu.Item>
        <Menu.Item>
          <li>
            <a href="/link">Item 2</a>
          </li>
        </Menu.Item>
      </Menu.Items>
    </Menu>
  )
}

----------------------------------------

TITLE: Configuring Astro with Tailwind CSS
DESCRIPTION: Configuration setup for integrating Tailwind CSS with Astro using the Vite plugin.

LANGUAGE: javascript
CODE:
// @ts-check
import { defineConfig } from "astro/config";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  vite: {
    plugins: [tailwindcss()],
  },
});

----------------------------------------

TITLE: Performance Metrics Table
DESCRIPTION: Markdown table showing performance comparison between daisyUI 3 and 4

LANGUAGE: markdown
CODE:
|                                | daisyUI 3 | daisyUI 4 |
| ------------------------------ | --------- | --------- |
| NPM install size               | 14.0MB    | 3.83MB    |
| NPM bundle size                | 434kB     | 238.7kB   |
| NPM bundle size (gzip)         | 74.7kB    | 38.8kB    |
| Total Node module dependencies | 86        | 7         |

----------------------------------------

TITLE: Updating Input Component
DESCRIPTION: Remove input-bordered class and use input-ghost for borderless input.

LANGUAGE: html
CODE:
<!-- Input with border -->
<input class="input"/>

<!-- Input without border -->
<input class="input input-ghost"/>

<!-- Input with consistent width -->
<input class="input"/>

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Launches the Angular development server to test the installation

LANGUAGE: sh
CODE:
ng serve

----------------------------------------

TITLE: Configuring CSS Styles
DESCRIPTION: Updates the main CSS file to import Tailwind CSS and enable daisyUI plugin

LANGUAGE: postcss
CODE:
@import "tailwindcss";
@plugin "daisyui";

----------------------------------------

TITLE: Installing Mary UI via Composer
DESCRIPTION: Command for installing Mary UI package using Composer package manager.

LANGUAGE: bash
CODE:
composer require robsontenorio/mary

----------------------------------------

TITLE: Initializing Node Project with Build Scripts
DESCRIPTION: Sets up a new Node.js project and configures dev and build scripts for Eleventy in package.json

LANGUAGE: sh
CODE:
npm init -y
npm pkg set scripts.dev="eleventy --serve"
npm pkg set scripts.build="eleventy"

----------------------------------------

TITLE: Rendering Button Component with Color Indicators
DESCRIPTION: This HTML snippet demonstrates the rendering of a button component with visual indicators for colors. It uses CSS classes defined earlier to style the button and its color indicators.

LANGUAGE: html
CODE:
<figure class={figure}>
  <div class="relative">
    <button class="btn btn-primary">Button</button>
    <div
      class={`${indicator} start-1 top-1/3 h-16 w-4 translate-y-2 flex-col`}>
      <div class={circle}>
      </div>
      <hr class={`${line} h-full w-px border-s`} />
      <div class={`${item} indicator-center indicator-bottom`}>
        primary
      </div>
    </div>
    <div
      class={`${indicator} -top-7 end-4 h-16 w-4 flex-col`}>
      <hr class={`${line} h-full w-px border-s`} />
      <div class={circle}>
      </div>
      <div class={`${item} indicator-center indicator-top`}>
        primary-content
      </div>
    </div>
  </div>
</figure>

----------------------------------------

TITLE: Creating Radial Progress in React/JSX
DESCRIPTION: Shows how to implement a radial progress component in React, including TypeScript considerations. The example sets a 70% progress value and uses inline styles for CSS variables.

LANGUAGE: jsx
CODE:
{/* For TSX uncomment the commented types below */}
<div className="$$radial-progress" style={{ "--$$value": 70 } /* as React.CSSProperties */ } 
  aria-valuenow={70} role="progressbar">70%</div>

----------------------------------------

TITLE: Adding DaisyUI Additional Themes
DESCRIPTION: Code to include additional DaisyUI themes beyond the default light and dark themes via CDN.

LANGUAGE: html
CODE:
<link href="https://cdn.jsdelivr.net/npm/daisyui@5/themes.css" rel="stylesheet" type="text/css" />

----------------------------------------

TITLE: Responsive Join Component Implementation
DESCRIPTION: Shows how to create a responsive join component that switches between vertical layout on small screens and horizontal layout on large screens.

LANGUAGE: html
CODE:
<div class="$$join $$join-vertical lg:$$join-horizontal">
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
  <button class="$$btn $$join-item">Button</button>
</div>

----------------------------------------

TITLE: Adding New Content in Astro Documentation Template
DESCRIPTION: Markdown example for creating a new documentation page in the Astro Documentation Template, including frontmatter and content structure.

LANGUAGE: markdown
CODE:
---
title: Getting Started
description: "Quasi sapiente voluptates aut minima non doloribus similique quisquam. In quo expedita ipsum nostrum corrupti incidunt. Et aut eligendi ea perferendis."
---

<script>
  import Translate from "$components/Translate.svelte"
</script>

## Overview

Authentication is a crucial aspect of any web application, ensuring that users are who they claim to be before granting access to resources or sensitive information. Access Shield simplifies the process of user authentication, offering features such as:

- **User Registration and Login**: Allow users to create accounts and securely log in to your application.
- **Password Hashing and Encryption**: Safeguard user passwords by securely hashing and encrypting them before storage.
- **Session Management**: Manage user sessions to maintain authentication state across requests.
- **OAuth Integration**: Simplify user authentication by integrating with popular OAuth providers.
- **Two-Factor Authentication (2FA)**: Enhance security by requiring an additional authentication factor.
- **Role-Based Access Control (RBAC)**: Define roles and permissions to control access to resources.

----------------------------------------

TITLE: Importing Translate Component in Svelte
DESCRIPTION: This snippet imports the Translate component from a local file. It's likely used for internationalization or localization purposes within the Button component documentation.

LANGUAGE: svelte
CODE:
<script>
  import Translate from "$components/Translate.svelte"
</script>

----------------------------------------

TITLE: Implementing Basic Text Swap in HTML
DESCRIPTION: Basic implementation of swap component to toggle between ON/OFF text using a checkbox input.

LANGUAGE: html
CODE:
<label class="$$swap">
  <input type="checkbox" />
  <div class="$$swap-on">ON</div>
  <div class="$$swap-off">OFF</div>
</label>

----------------------------------------

TITLE: Customizing Header in Astro Documentation Template
DESCRIPTION: JSX code for the header component in the Astro Documentation Template, including navigation, search bar, and theme toggle.

LANGUAGE: jsx
CODE:
<header class="sticky top-0 z-30">
  <nav class="navbar bg-base-100/90 shadow-sm backdrop-blur-lg justify-center items-center py-2 md:px-10 px-2 border-b border-base-content/10">
    <div class="navbar-start">
      <label for="my-drawer-2" class="btn btn-square btn-ghost lg:hidden">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          class="inline-block w-5 h-5 stroke-current"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </label>
    </div>

    <div class="navbar-end">
      <a
        class="btn btn-sm btn-ghost"
        href="https://www.x.com"
        aria-label="twitter"
      >
        <svg viewBox="0 0 24 24" aria-hidden="true" class="h-4 w-4">
          <path
            d="M13.3174 10.7749L19.1457 4H17.7646L12.7039 9.88256L8.66193 4H4L10.1122 12.8955L4 20H5.38119L10.7254 13.7878L14.994 20H19.656L13.3171 10.7749H13.3174ZM11.4257 12.9738L10.8064 12.0881L5.87886 5.03974H8.00029L11.9769 10.728L12.5962 11.6137L17.7652 19.0075H15.6438L11.4257 12.9742V12.9738Z"
            fill="currentColor"
          ></path>
        </svg>
      </a>
      <ThemeToggle />
    </div>
  </nav>
</header>

----------------------------------------

TITLE: Responsive Tooltip
DESCRIPTION: Shows how to create a responsive tooltip that only appears on large screens using the lg:tooltip class

LANGUAGE: html
CODE:
<div class="$$lg:tooltip" data-tip="hello">
  <button class="$$btn">Hover me</button>
</div>

----------------------------------------

TITLE: Basic Status Indicator Implementation
DESCRIPTION: Shows how to create a basic status indicator with a success state indicator placed on top of content.

LANGUAGE: html
CODE:
<div class="$$indicator">
  <span class="$$indicator-item $$status $$status-success"></span>
  <div class="bg-base-300 grid h-32 w-32 place-items-center">content</div>
</div>

----------------------------------------

TITLE: Tailwind Config with Direct Safelist
DESCRIPTION: Configuration showing how to directly include safelisted classes in Tailwind config

LANGUAGE: javascript
CODE:
module.exports = {
  content: ["./pages/**/*.{html,js}", "./components/**/*.{html,js}"],
  // ...
  safelist: ["bg-red-500", "bg-green-500", "bg-blue-500"],
  // ...
}

----------------------------------------

TITLE: Configuring Vite for Tailwind CSS
DESCRIPTION: Sets up Vite configuration to use Tailwind CSS and Vue plugins

LANGUAGE: javascript
CODE:
import { defineConfig } from "vite";
import tailwindcss from "@tailwindcss/vite";
import vue from "@vitejs/plugin-vue";

export default defineConfig({
  plugins: [tailwindcss(), vue()],
});

----------------------------------------

TITLE: Success Color Link in HTML with DaisyUI
DESCRIPTION: Applies the success color style to a link using DaisyUI classes.

LANGUAGE: html
CODE:
<a class="$$link $$link-success">Click me</a>

----------------------------------------

TITLE: Creating Pagination with Different Sizes in DaisyUI
DESCRIPTION: This snippet demonstrates how to create pagination components in various sizes using DaisyUI's button size classes (xs, sm, md, lg, xl). It shows how to apply these classes to create a range of pagination sizes.

LANGUAGE: html
CODE:
<div class="$$join">
  <button class="$$join-item $$btn $$btn-xs">1</button>
  <button class="$$join-item $$btn $$btn-xs $$btn-active">2</button>
  <button class="$$join-item $$btn $$btn-xs">3</button>
  <button class="$$join-item $$btn $$btn-xs">4</button>
</div>
<div class="$$join">
  <button class="$$join-item $$btn $$btn-sm">1</button>
  <button class="$$join-item $$btn $$btn-sm $$btn-active">2</button>
  <button class="$$join-item $$btn $$btn-sm">3</button>
  <button class="$$join-item $$btn $$btn-sm">4</button>
</div>
<div class="$$join">
  <button class="$$join-item $$btn $$btn-md">1</button>
  <button class="$$join-item $$btn $$btn-md $$btn-active">2</button>
  <button class="$$join-item $$btn $$btn-md">3</button>
  <button class="$$join-item $$btn $$btn-md">4</button>
</div>
<div class="$$join">
  <button class="$$join-item $$btn $$btn-lg">1</button>
  <button class="$$join-item $$btn $$btn-lg $$btn-active">2</button>
  <button class="$$join-item $$btn $$btn-lg">3</button>
  <button class="$$join-item $$btn $$btn-lg">4</button>
</div>
<div class="$$join">
  <button class="$$join-item $$btn $$btn-xl">1</button>
  <button class="$$join-item $$btn $$btn-xl $$btn-active">2</button>
  <button class="$$join-item $$btn $$btn-xl">3</button>
  <button class="$$join-item $$btn $$btn-xl">4</button>
</div>

----------------------------------------

TITLE: Applying Decagon Mask to Image in HTML
DESCRIPTION: This snippet shows how to use DaisyUI classes to apply a decagon-shaped mask to an image. The mask and mask-decagon classes are combined to achieve this effect.

LANGUAGE: HTML
CODE:
<img
  class="$$mask $$mask-decagon"
  src="https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp" />