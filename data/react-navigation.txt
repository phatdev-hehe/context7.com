TITLE: Installing React Navigation Template with Expo
DESCRIPTION: Command to create a new React Navigation project using the official template with Expo CLI.

LANGUAGE: bash
CODE:
npx create-expo-app@latest --template react-navigation/template

----------------------------------------

TITLE: Creating a Basic Native Stack Navigator (Static Configuration)
DESCRIPTION: Example of creating a basic Native Stack Navigator using static configuration in React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { createStaticNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
    </View>
  );
}

const RootStack = createNativeStackNavigator({
  screens: {
    Home: HomeScreen,
  },
});

const Navigation = createStaticNavigation(RootStack);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Creating a Basic Stack Navigator in React Native
DESCRIPTION: This snippet demonstrates how to create a simple stack navigator using React Navigation. It defines a HomeScreen component and exports a stack navigator with a single route.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View, Text } from 'react-native';
import { createStackNavigator } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
      </View>
    );
  }
}

export default createStackNavigator({
  Home: {
    screen: HomeScreen,
  },
});

----------------------------------------

TITLE: Tab Navigation with Stack Navigator Integration
DESCRIPTION: Complex example demonstrating how to implement tab navigation with nested stack navigation for each tab, allowing deeper navigation within tabs.

LANGUAGE: javascript
CODE:
function HomeStackScreen() {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen name="Home" component={HomeScreen} />
      <HomeStack.Screen name="Details" component={DetailsScreen} />
    </HomeStack.Navigator>
  );
}

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen name="Settings" component={SettingsScreen} />
      <SettingsStack.Screen name="Details" component={DetailsScreen} />
    </SettingsStack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator screenOptions={{ headerShown: false }}>
        <Tab.Screen name="HomeStack" component={HomeStackScreen} />
        <Tab.Screen name="SettingsStack" component={SettingsStackScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Setting up Navigation Structure for Authentication Flow in React Navigation
DESCRIPTION: This snippet demonstrates how to set up the navigation structure for an authentication flow using createSwitchNavigator. It includes separate stacks for the main app and authentication screens, with an initial loading screen.

LANGUAGE: javascript
CODE:
import { createAppContainer, createSwitchNavigator } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack';

// Implementation of HomeScreen, OtherScreen, SignInScreen, AuthLoadingScreen
// goes here.

const AppStack = createStackNavigator({ Home: HomeScreen, Other: OtherScreen });
const AuthStack = createStackNavigator({ SignIn: SignInScreen });

export default createAppContainer(
  createSwitchNavigator(
    {
      AuthLoading: AuthLoadingScreen,
      App: AppStack,
      Auth: AuthStack,
    },
    {
      initialRouteName: 'AuthLoading',
    }
  )
);

----------------------------------------

TITLE: Conditional Screen Rendering in React Navigation
DESCRIPTION: Demonstrates how to conditionally render screens based on authentication state using React Navigation.

LANGUAGE: jsx
CODE:
isSignedIn ? (
  <>
    <Stack.Screen name="Home" component={HomeScreen} />
    <Stack.Screen name="Profile" component={ProfileScreen} />
    <Stack.Screen name="Settings" component={SettingsScreen} />
  </>
) : (
  <>
    <Stack.Screen name="SignIn" component={SignInScreen} />
    <Stack.Screen name="SignUp" component={SignUpScreen} />
  </>
);

----------------------------------------

TITLE: Passing and Retrieving Parameters in React Navigation
DESCRIPTION: This snippet demonstrates how to pass parameters when navigating to a route and how to retrieve those parameters in the destination screen. It includes examples of passing multiple parameters and accessing them in the component.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => {
          /* 1. Navigate to the Details route with params */
          navigation.navigate('Details', {
            itemId: 86,
            otherParam: 'anything you want here',
          });
        }}
      />
    </View>
  );
}

function DetailsScreen({ route, navigation }) {
  /* 2. Get the param */
  const { itemId, otherParam } = route.params;
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
      <Button
        title="Go to Details... again"
        onPress={() =>
          navigation.push('Details', {
            itemId: Math.floor(Math.random() * 100),
          })
        }
      />
      <Button title="Go to Home" onPress={() => navigation.navigate('Home')} />
      <Button title="Go back" onPress={() => navigation.goBack()} />
    </View>
  );
}

----------------------------------------

TITLE: Implementing Screen Tracking with Static Navigation in React Navigation
DESCRIPTION: This snippet demonstrates how to implement screen tracking for analytics using static navigation in React Navigation. It uses the createStaticNavigation, useNavigationContainerRef, and useNavigation hooks to set up navigation and track screen changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';
import {
  createStaticNavigation,
  useNavigationContainerRef,
  useNavigation,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function Home() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('Settings')}>
        Go to Settings
      </Button>
    </View>
  );
}

function Settings() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>
    </View>
  );
}

const RootStack = createNativeStackNavigator({
  screens: {
    Home: Home,
    Settings: Settings,
  },
});

const Navigation = createStaticNavigation(RootStack);

export default function App() {
  const navigationRef = useNavigationContainerRef();
  const routeNameRef = React.useRef();

  return (
    <Navigation
      ref={navigationRef}
      onReady={() => {
        routeNameRef.current = navigationRef.current.getCurrentRoute().name;
      }}
      onStateChange={async () => {
        const previousRouteName = routeNameRef.current;
        const currentRouteName = navigationRef.current.getCurrentRoute().name;
        const trackScreenView = () => {
          // Your implementation of analytics goes here!
        };

        if (previousRouteName !== currentRouteName) {
          // Replace the line below to add the tracker from a mobile analytics SDK
          await trackScreenView(currentRouteName);
        }

        // Save the current route name for later comparison
        routeNameRef.current = currentRouteName;
      }}
    />
  );
}

----------------------------------------

TITLE: Specifying Screen Options in Native Stack Navigator (Dynamic)
DESCRIPTION: Example of specifying options for individual screens and common options for all screens in a Native Stack Navigator using dynamic configuration.

LANGUAGE: javascript
CODE:
function RootStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerStyle: { backgroundColor: 'tomato' },
      }}
    >
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'Overview' }}
      />
      <Stack.Screen name="Details" component={DetailsScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Basic NavigationContainer Implementation - React Navigation
DESCRIPTION: Basic example showing how to implement NavigationContainer with a stack navigator for managing app navigation state.

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>{/* ... */}</Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing State Persistence in React Navigation
DESCRIPTION: This code snippet demonstrates how to implement state persistence in a React Navigation app. It uses AsyncStorage to save and restore the navigation state, and handles initial deep links. The code also includes logic for showing a loading state while restoring the saved state.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Linking, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { NavigationContainer } from '@react-navigation/native';

const PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';

export default function App() {
  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL
  const [initialState, setInitialState] = React.useState();

  React.useEffect(() => {
    const restoreState = async () => {
      try {
        const initialUrl = await Linking.getInitialURL();

        if (initialUrl == null) {
          // Only restore state if there's no deep link
          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);
          const state = savedStateString
            ? JSON.parse(savedStateString)
            : undefined;

          if (state !== undefined) {
            setInitialState(state);
          }
        }
      } finally {
        setIsReady(true);
      }
    };

    if (!isReady) {
      restoreState();
    }
  }, [isReady]);

  if (!isReady) {
    return null;
  }

  return (
    <NavigationContainer
      initialState={initialState}
      onStateChange={(state) =>
        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))
      }
    >
      {/* ... */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: NavigationContainer with Deep Linking Config - React Navigation
DESCRIPTION: Example showing how to configure NavigationContainer with deep linking support including URL prefixes and route mapping.

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';

function App() {
  const linking = {
    prefixes: ['https://mychat.com', 'mychat://'],
    config: {
      screens: {
        Home: 'feed/:sort',
      },
    },
  };

  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Basic Navigator Setup with Screens
DESCRIPTION: Demonstrates how to set up a basic navigation structure with multiple screens using the Stack.Navigator and Stack.Screen components.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Screen name="Home" component={HomeScreen} />
  <Stack.Screen name="Profile" component={ProfileScreen} />
</Stack.Navigator>

----------------------------------------

TITLE: Installing Bare React Native Dependencies
DESCRIPTION: Commands to install and link dependencies for bare React Native projects.

LANGUAGE: bash
CODE:
npm install react-native-screens react-native-safe-area-context

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Configuring Multiple Screens in Native Stack Navigator (Static)
DESCRIPTION: Example of configuring multiple screens and setting initial route in a Native Stack Navigator using static configuration.

LANGUAGE: javascript
CODE:
const RootStack = createNativeStackNavigator({
  initialRouteName: 'Home',
  screens: {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
});

----------------------------------------

TITLE: Installing Bare React Native Dependencies
DESCRIPTION: Commands to install and link dependencies for bare React Native projects.

LANGUAGE: bash
CODE:
npm install react-native-screens react-native-safe-area-context

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Implementing Authentication Logic in React Native App Component
DESCRIPTION: Sets up the main App component with authentication state management, token restoration, and context providers for auth state.

LANGUAGE: javascript
CODE:
export default function App() {
  const [state, dispatch] = React.useReducer(
    (prevState, action) => {
      switch (action.type) {
        case 'RESTORE_TOKEN':
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'SIGN_IN':
          return {
            ...prevState,
            isSignout: false,
            userToken: action.token,
          };
        case 'SIGN_OUT':
          return {
            ...prevState,
            isSignout: true,
            userToken: null,
          };
      }
    },
    {
      isLoading: true,
      isSignout: false,
      userToken: null,
    }
  );

  React.useEffect(() => {
    const bootstrapAsync = async () => {
      let userToken;
      try {
        userToken = await SecureStore.getItemAsync('userToken');
      } catch (e) {
        // Restoring token failed
      }
      dispatch({ type: 'RESTORE_TOKEN', token: userToken });
    };
    bootstrapAsync();
  }, []);

  const authContext = React.useMemo(
    () => ({
      signIn: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
      signOut: () => dispatch({ type: 'SIGN_OUT' }),
      signUp: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
    }),
    []
  );

  if (state.isLoading) {
    return <SplashScreen />;
  }

  const isSignedIn = state.userToken != null;

  return (
    <AuthContext.Provider value={authContext}>
      <SignInContext.Provider value={isSignedIn}>
        <Navigation />
      </SignInContext.Provider>
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: Nesting Multiple Navigators in React Navigation
DESCRIPTION: This example shows how to nest multiple navigators (Tab Navigator inside Stack Navigator) and hide headers appropriately for a cleaner UI.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Profile" component={Profile} />
      <Tab.Screen name="Settings" component={Settings} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Home"
          component={Home}
          options={{ headerShown: false }}
        />
        <Stack.Screen name="EditPost" component={EditPost} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Passing and Reading Parameters in React Navigation
DESCRIPTION: This example demonstrates how to pass parameters when navigating to a new screen and how to read those parameters in the destination screen. It uses the navigation.navigate() method to pass params and route.params to access them.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        onPress={() => {
          /* 1. Navigate to the Details route with params */
          navigation.navigate('Details', {
            itemId: 86,
            otherParam: 'anything you want here',
          });
        }}
      >
        Go to Details
      </Button>
    </View>
  );
}

function DetailsScreen({ route }) {
  const navigation = useNavigation();

  /* 2. Get the param */
  const { itemId, otherParam } = route.params;

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
      <Button
        onPress={
          () =>
            navigation.push('Details', {
              itemId: Math.floor(Math.random() * 100),
            })
        }
      >
        Go to Details... again
      </Button>
      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
    </View>
  );
}

----------------------------------------

TITLE: Basic Native Stack Navigator Implementation
DESCRIPTION: Basic example showing how to create and configure a native stack navigator with multiple screens.

LANGUAGE: javascript
CODE:
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Notifications" component={Notifications} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Configuring Nested Navigation with Bottom Tabs
DESCRIPTION: Demonstrates how to create nested navigation by combining bottom tab navigator within a stack navigator.

LANGUAGE: javascript
CODE:
const HomeTabs = createBottomTabNavigator({
  screens: {
    Groups: GroupsScreen,
    Chats: ChatsScreen,
  },
});

const RootStack = createNativeStackNavigator({
  screens: {
    Home: HomeTabs,
  },
});

----------------------------------------

TITLE: Complete Authentication Flow Implementation
DESCRIPTION: Full implementation of authentication flow using React Context and useReducer for state management, including token restoration and auth methods.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import * as SecureStore from 'expo-secure-store';

export default function App({ navigation }) {
  const [state, dispatch] = React.useReducer(
    (prevState, action) => {
      switch (action.type) {
        case 'RESTORE_TOKEN':
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'SIGN_IN':
          return {
            ...prevState,
            isSignout: false,
            userToken: action.token,
          };
        case 'SIGN_OUT':
          return {
            ...prevState,
            isSignout: true,
            userToken: null,
          };
      }
    },
    {
      isLoading: true,
      isSignout: false,
      userToken: null,
    }
  );

  React.useEffect(() => {
    const bootstrapAsync = async () => {
      let userToken;
      try {
        userToken = await SecureStore.getItemAsync('userToken');
      } catch (e) {}
      dispatch({ type: 'RESTORE_TOKEN', token: userToken });
    };
    bootstrapAsync();
  }, []);

  const authContext = React.useMemo(
    () => ({
      signIn: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
      signOut: () => dispatch({ type: 'SIGN_OUT' }),
      signUp: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
    }),
    []
  );

  return (
    <AuthContext.Provider value={authContext}>
      <Stack.Navigator>
        {state.userToken == null ? (
          <Stack.Screen name="SignIn" component={SignInScreen} />
        ) : (
          <Stack.Screen name="Home" component={HomeScreen} />
        )}
      </Stack.Navigator>
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: Implementing useNavigation Hook with Static Navigation in React Native
DESCRIPTION: This snippet demonstrates how to use the useNavigation hook in a React Native application with static navigation. It shows the implementation of a custom back button and navigation between Home and Profile screens.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { Button } from '@react-navigation/elements';
import { createStaticNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { useNavigation } from '@react-navigation/native';

function MyBackButton() {
  const navigation = useNavigation();

  return (
    <Button
      onPress={() => {
        navigation.goBack();
      }}
    >
      Back
    </Button>
  );
}

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This is the home screen of the app</Text>
      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Profile Screen</Text>
      <MyBackButton />
    </View>
  );
}

const Stack = createNativeStackNavigator({
  initialRouteName: 'Home',
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

const Navigation = createStaticNavigation(Stack);

function App() {
  return <Navigation />;
}

export default App;

----------------------------------------

TITLE: Navigating to a New Screen in React Navigation
DESCRIPTION: Demonstrates how to navigate from a Home screen to a Details screen using the navigation.navigate() method. It uses the useNavigation hook to access the navigation object.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button onPress={() => navigation.navigate('Details')}>
        Go to Details
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Using NavigationContext with Dynamic Navigation Configuration
DESCRIPTION: Shows how to implement navigation using NavigationContext in a React Native application with dynamic navigation configuration. Demonstrates navigation between screens using NavigationContainer and Stack.Navigator.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { Button } from '@react-navigation/elements';
import { NavigationContext } from '@react-navigation/native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen() {
  return <SomeComponent />;
}

function SomeComponent() {
  // We can access navigation object via context
  const navigation = React.useContext(NavigationContext);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Some component inside HomeScreen</Text>
      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen() {
  const navigation = React.useContext(NavigationContext);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
    </View>
  );
}

const Stack = createNativeStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Profile" component={ProfileScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default App;

----------------------------------------

TITLE: Screen Configuration with Options
DESCRIPTION: Demonstrates how to configure screen options like title using both static and dynamic approaches.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator({
  screens: {
    Profile: {
      screen: ProfileScreen,
      options: {
        title: 'Awesome app',
      },
    },
  },
});

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={{
    title: 'Awesome app',
  }}
/>

----------------------------------------

TITLE: Installing Drawer Navigator Dependencies
DESCRIPTION: Commands for installing required packages including @react-navigation/drawer and its peer dependencies.

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer
npx expo install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Setting up NavigationContainer
DESCRIPTION: Basic setup of NavigationContainer component which is required at the root of a React Navigation app.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring Navigation Stack for Authentication Flow
DESCRIPTION: Sets up a navigation stack with conditional rendering of screens based on authentication state.

LANGUAGE: javascript
CODE:
const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      if: useIsSignedIn,
      screen: HomeScreen,
    },
    SignIn: {
      screen: SignInScreen,
      options: {
        title: 'Sign in',
      },
      if: useIsSignedOut,
    },
  },
});

const Navigation = createStaticNavigation(RootStack);

----------------------------------------

TITLE: Complete Material Top Tabs Example
DESCRIPTION: Full example showing Material Top Tabs implementation with custom styling and configuration options.

LANGUAGE: javascript
CODE:
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';

const Tab = createMaterialTopTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator
      initialRouteName="Feed"
      screenOptions={{
        tabBarActiveTintColor: '#e91e63',
        tabBarLabelStyle: { fontSize: 12 },
        tabBarStyle: { backgroundColor: 'powderblue' },
      }}
    >
      <Tab.Screen
        name="Feed"
        component={Feed}
        options={{ tabBarLabel: 'Home' }}
      />
      <Tab.Screen
        name="Notifications"
        component={Notifications}
        options={{ tabBarLabel: 'Updates' }}
      />
      <Tab.Screen
        name="Profile"
        component={Profile}
        options={{ tabBarLabel: 'Profile' }}
      />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Basic Server-Side Rendering with Koa and ServerContainer
DESCRIPTION: This example demonstrates a basic setup for server-side rendering using Koa and the ServerContainer component. Note that this is a simplified example and should not be used as-is in production.

LANGUAGE: javascript
CODE:
app.use(async (ctx) => {
  const html = ReactDOMServer.renderToString(
    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>
      <App />
    </ServerContainer>
  );

  ctx.body = html;
});

----------------------------------------

TITLE: Installing React Navigation in a React Native Project
DESCRIPTION: This snippet shows how to install the react-navigation package using npm or yarn in a React Native project.

LANGUAGE: bash
CODE:
npm install react-navigation

----------------------------------------

TITLE: Setting Tab Navigator Options in React Navigation
DESCRIPTION: This snippet demonstrates how to correctly set options for a tab navigator when using nested stack navigators. It shows the proper placement of options for both static and dynamic configurations.

LANGUAGE: jsx
CODE:
const Tab = createBottomTabNavigator({
  screens: {
    Home: {
      screen: HomeStackScreen,
      options: {
        tabBarLabel: 'Home!',
      },
    },
    Settings: {
      screen: SettingsStackScreen,
      options: {
        tabBarLabel: 'Settings!',
      },
    },
  },
});

LANGUAGE: jsx
CODE:
export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen
          name="Home"
          component={HomeStackScreen}
          options={{ tabBarLabel: 'Home!' }}
        />
        <Tab.Screen
          name="Settings"
          component={SettingsStackScreen}
          options={{ tabBarLabel: 'Settings!' }}
        />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Nesting Tab Navigator in Stack Navigator
DESCRIPTION: Example of nesting a Bottom Tab Navigator inside a Stack Navigator, demonstrating how to structure the navigation hierarchy and hide the header of the parent navigator.

LANGUAGE: jsx
CODE:
const HomeTabs = createBottomTabNavigator({
  screens: {
    Feed: FeedScreen,
    Messages: MessagesScreen,
  },
});

const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeTabs,
      options: {
        headerShown: false,
      },
    },
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Configuring Multiple Screens in Native Stack Navigator (Dynamic)
DESCRIPTION: Example of configuring multiple screens and setting initial route in a Native Stack Navigator using dynamic configuration.

LANGUAGE: javascript
CODE:
function RootStack() {
  return (
    <Stack.Navigator initialRouteName="Home">
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Details" component={DetailsScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Implementing Navigation State Persistence with React Navigation
DESCRIPTION: Example implementation of navigation state persistence using AsyncStorage and NavigationContainer. The code demonstrates how to save navigation state changes and restore them on app launch, with special handling for deep links and web platform.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Linking, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { NavigationContainer } from '@react-navigation/native';

const PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';

export default function App() {
  const [isReady, setIsReady] = React.useState(false);
  const [initialState, setInitialState] = React.useState();

  React.useEffect(() => {
    const restoreState = async () => {
      try {
        const initialUrl = await Linking.getInitialURL();

        if (Platform.OS !== 'web' && initialUrl == null) {
          // Only restore state if there's no deep link and we're not on web
          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);
          const state = savedStateString
            ? JSON.parse(savedStateString)
            : undefined;

          if (state !== undefined) {
            setInitialState(state);
          }
        }
      } finally {
        setIsReady(true);
      }
    };

    if (!isReady) {
      restoreState();
    }
  }, [isReady]);

  if (!isReady) {
    return null;
  }

  return (
    <NavigationContainer
      initialState={initialState}
      onStateChange={(state) =>
        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))
      }
    >
      {/* ... */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing useRoute Hook in React Navigation (Static Configuration)
DESCRIPTION: This snippet demonstrates how to use the useRoute hook in a React Navigation app with static configuration. It shows a basic app structure with a home screen and a profile screen, where the useRoute hook is used to access route params.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { Button } from '@react-navigation/elements';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { useRoute } from '@react-navigation/native';

function MyText() {
  const route = useRoute();

  return <Text>{route.params.caption}</Text>;
}

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This is the home screen of the app</Text>
      <Button
        onPress={() => {
          navigation.navigate('Profile', { caption: 'Some caption' });
        }}
      >
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Profile Screen</Text>
      <MyText />
    </View>
  );
}

const Stack = createNativeStackNavigator({
  initialRouteName: 'Home',
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

const Navigation = createStaticNavigation(Stack);

function App() {
  return <Navigation />;
}

export default App;

----------------------------------------

TITLE: Tab Navigation with Nested Stack Navigation
DESCRIPTION: Advanced implementation showing how to combine stack navigation within tab navigation for deeper navigation hierarchies.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, Text, View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

function DetailsScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Details!</Text>
    </View>
  );
}

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Home screen</Text>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}

function SettingsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings screen</Text>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}

const HomeStack = createStackNavigator();

function HomeStackScreen() {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen name="Home" component={HomeScreen} />
      <HomeStack.Screen name="Details" component={DetailsScreen} />
    </HomeStack.Navigator>
  );
}

const SettingsStack = createStackNavigator();

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen name="Settings" component={SettingsScreen} />
      <SettingsStack.Screen name="Details" component={DetailsScreen} />
    </SettingsStack.Navigator>
  );
}

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeStackScreen} />
        <Tab.Screen name="Settings" component={SettingsStackScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Creating Navigation Stack with Static API (JavaScript)
DESCRIPTION: Example demonstrating the new static API approach to creating a navigation stack with the same three screens using an object configuration pattern.

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator({
  screens: {
    Home: {
      screen: Home,
    },
    Profile: {
      screen: Profile,
    },
    Settings: {
      screen: Settings,
    },
  },
});

----------------------------------------

TITLE: Implementing Back Prevention with beforeRemove in React Navigation
DESCRIPTION: Example component that prevents navigation back when there are unsaved changes using the beforeRemove event listener. Shows how to implement a confirmation dialog and handle user choices for discarding or keeping changes.

LANGUAGE: javascript
CODE:
function EditText({ navigation }) {
  const [text, setText] = React.useState('');
  const hasUnsavedChanges = Boolean(text);

  React.useEffect(
    () =>
      navigation.addListener('beforeRemove', (e) => {
        if (!hasUnsavedChanges) {
          // If we don't have unsaved changes, then we don't need to do anything
          return;
        }

        // Prevent default behavior of leaving the screen
        e.preventDefault();

        // Prompt the user before leaving the screen
        Alert.alert(
          'Discard changes?',
          'You have unsaved changes. Are you sure to discard them and leave the screen?',
          [
            { text: "Don't leave", style: 'cancel', onPress: () => {} },
            {
              text: 'Discard',
              style: 'destructive',
              // If the user confirmed, then we dispatch the action we blocked earlier
              // This will continue the action that had triggered the removal of the screen
              onPress: () => navigation.dispatch(e.data.action),
            },
          ]
        );
      }),
    [navigation, hasUnsavedChanges]
  );

  return (
    <TextInput
      value={text}
      placeholder="Type something…"
      onChangeText={setText}
    />
  );
}

----------------------------------------

TITLE: Implementing Drawer Navigation in React Native with @react-navigation/drawer
DESCRIPTION: This snippet demonstrates how to create a basic drawer navigation setup using @react-navigation/drawer. It includes two screens (Home and Notifications) and shows how to configure the NavigationContainer and Drawer.Navigator components.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, View } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { NavigationContainer } from '@react-navigation/native';

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        onPress={() => navigation.navigate('Notifications')}
        title="Go to notifications"
      />
    </View>
  );
}

function NotificationsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go back home" />
    </View>
  );
}

const Drawer = createDrawerNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator initialRouteName="Home">
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Notifications" component={NotificationsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Navigating to Nested Screens in React Navigation
DESCRIPTION: This example demonstrates how to navigate to a specific screen in a nested navigator, including passing parameters to deeply nested screens.

LANGUAGE: javascript
CODE:
navigation.navigate('Root', {
  screen: 'Settings',
  params: {
    screen: 'Sound',
    params: {
      screen: 'Media',
    },
  },
});

----------------------------------------

TITLE: Installing Native Stack Navigator
DESCRIPTION: Command to install the @react-navigation/native-stack package

LANGUAGE: bash
CODE:
npm install @react-navigation/native-stack

----------------------------------------

TITLE: Using navigate method in React Navigation
DESCRIPTION: Example of how to use the navigate method to navigate to a new screen and pass parameters.

LANGUAGE: jsx
CODE:
navigation.navigate('Profile', {
  names: ['Brent', 'Satya', 'Michaś'],
});

----------------------------------------

TITLE: Navigation Container with Refs Example
DESCRIPTION: Example demonstrating how to use refs with NavigationContainer for programmatic navigation

LANGUAGE: jsx
CODE:
export default function App() {
  const navigationRef = useNavigationContainerRef();

  return (
    <View style={{ flex: 1 }}>
      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>
      <NavigationContainer ref={navigationRef}>
        <Stack.Navigator initialRouteName="Empty">
          <Stack.Screen name="Empty" component={() => <View></View>} />
          <Stack.Screen name="Home" component={HomeScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Rendering React Navigation App on Server with ServerContainer
DESCRIPTION: This snippet demonstrates how to use the ServerContainer component to render a React Navigation app on the server. It shows creating a ref, setting up a location object, and rendering the app using ReactDOMServer.

LANGUAGE: javascript
CODE:
// Ref which will be populated with the screen options
const ref = React.createRef();

// Location object containing the `pathname` and `search` fields of the current URL
const location = { pathname: '/profile', search: '?user=jane' };

// Get rendered HTML
const html = ReactDOMServer.renderToString(
  <ServerContainer ref={ref} location={location}>
    <App />
  </ServerContainer>
);

// Then you can access the options for the current screen in the ref
const options = ref.current.getCurrentOptions(); // { title: 'My Profile' }

----------------------------------------

TITLE: Rendering React Navigation App on Server with ServerContainer
DESCRIPTION: This snippet demonstrates how to use the ServerContainer component to render a React Navigation app on the server. It shows creating a ref, setting up a location object, and rendering the app using ReactDOMServer.

LANGUAGE: javascript
CODE:
// Ref which will be populated with the screen options
const ref = React.createRef();

// Location object containing the `pathname` and `search` fields of the current URL
const location = { pathname: '/profile', search: '?user=jane' };

// Get rendered HTML
const html = ReactDOMServer.renderToString(
  <ServerContainer ref={ref} location={location}>
    <App />
  </ServerContainer>
);

// Then you can access the options for the current screen in the ref
const options = ref.current.getCurrentOptions(); // { title: 'My Profile' }

----------------------------------------

TITLE: Implementing Navigation with Link Component in React Navigation
DESCRIPTION: This snippet demonstrates how to use the Link component from React Navigation to create a navigable link to a Profile screen with parameters. It shows the import statement and a basic implementation within a Home component.

LANGUAGE: javascript
CODE:
import { Link } from '@react-navigation/native';

// ...

function Home() {
  return (
    <Link to={{ screen: 'Profile', params: { id: 'jane' } }}>
      Go to Jane's profile
    </Link>
  );
}

----------------------------------------

TITLE: Navigating to a Profile Screen with Parameters in React Navigation
DESCRIPTION: This snippet demonstrates how to use the navigate method to navigate to a Profile screen while passing an array of names as a parameter.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation: { navigate } }) {
  return (
    <View>
      <Text>This is the home screen of the app</Text>
      <Button
        onPress={() =>
          navigate('Profile', { names: ['Brent', 'Satya', 'Michaś'] })
        }
        title="Go to Brent's profile"
      />
    </View>
  );
}

----------------------------------------

TITLE: Navigating to a Profile Screen with Parameters in React Navigation
DESCRIPTION: This snippet demonstrates how to use the navigate method to navigate to a Profile screen while passing an array of names as a parameter.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation: { navigate } }) {
  return (
    <View>
      <Text>This is the home screen of the app</Text>
      <Button
        onPress={() =>
          navigate('Profile', { names: ['Brent', 'Satya', 'Michaś'] })
        }
        title="Go to Brent's profile"
      />
    </View>
  );
}

----------------------------------------

TITLE: Creating and Exporting App Container in React Navigation
DESCRIPTION: This snippet demonstrates how to create an app container using createAppContainer and a stack navigator. It shows the basic setup for the main component that React will render.

LANGUAGE: javascript
CODE:
import { createAppContainer, createStackNavigator } from 'react-navigation';
// you can also import from @react-navigation/native

const AppNavigator = createStackNavigator(...);

const AppContainer = createAppContainer(AppNavigator);

// Now AppContainer is the main component for React to render

export default AppContainer;

----------------------------------------

TITLE: Persisting Navigation State with Static Configuration in React Navigation
DESCRIPTION: This snippet shows how to implement state persistence using AsyncStorage in a React Navigation app with static configuration. It demonstrates restoring the initial state and saving state changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Platform, View, Linking } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  useNavigation,
  createStaticNavigation,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function A() {
  return <View />;
}

function B() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('C')}>Go to C</Button>
    </View>
  );
}

function C() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('D')}>Go to D</Button>
    </View>
  );
}

function D() {
  return <View />;
}

const HomeStackScreen = createNativeStackNavigator({
  screens: {
    A: A,
  },
});

const SettingsStackScreen = createNativeStackNavigator({
  screens: {
    B: B,
    C: C,
    D: D,
  },
});

const PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';

export default function App() {
  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL
  const [initialState, setInitialState] = React.useState();

  React.useEffect(() => {
    const restoreState = async () => {
      try {
        const initialUrl = await Linking.getInitialURL();

        if (Platform.OS !== 'web' && initialUrl == null) {
          const savedState = await AsyncStorage.getItem(PERSISTENCE_KEY);
          const state = savedState ? JSON.parse(savedState) : undefined;

          if (state !== undefined) {
            setInitialState(state);
          }
        }
      } finally {
        setIsReady(true);
      }
    };

    if (!isReady) {
      restoreState();
    }
  }, [isReady]);

  if (!isReady) {
    return null;
  }
  const Tab = createBottomTabNavigator({
    screens: {
      Home: {
        screen: HomeStackScreen,
        options: {
          headerShown: false,
          tabBarLabel: 'Home!',
        },
      },
      Settings: {
        screen: SettingsStackScreen,
        options: {
          headerShown: false,
          tabBarLabel: 'Settings!',
        },
      },
    },
  });
  const Navigation = createStaticNavigation(Tab);

  return (
    <Navigation
      initialState={initialState}
      onStateChange={(state) =>
        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))
      }
    />
  );
}

----------------------------------------

TITLE: Basic Usage of NavigationContainer in React Navigation
DESCRIPTION: Demonstrates how to use the NavigationContainer component to wrap a stack navigator in a React Native app.

LANGUAGE: jsx
CODE:
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>{/* ... */}</Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing a Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to set up a basic Navigator using NavigationContainer and Stack.Navigator components. It shows the structure of a typical navigation setup in a React Native app.

LANGUAGE: javascript
CODE:
function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator> // <---- This is a Navigator
        <Stack.Screen name="Home" component={HomeScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Dynamic Tab Navigator Implementation
DESCRIPTION: Implementation of a bottom tab navigator using the dynamic API within a screen component.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const Tab = createBottomTabNavigator();

function FeedScreen() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Latest" component={LatestScreen} />
      <Tab.Screen name="Popular" component={PopularScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Navigating to a Profile Screen in React Navigation
DESCRIPTION: Example of using the navigate method from the navigation prop to go to a Profile screen with parameters.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation: { navigate } }) {
  return (
    <View>
      <Text>This is the home screen of the app</Text>
      <Button
        onPress={() =>
          navigate('Profile', { names: ['Brent', 'Satya', 'Michaś'] })
        }
        title="Go to Brent's profile"
      />
    </View>
  );
}

----------------------------------------

TITLE: Updating Header Options Dynamically in React Navigation
DESCRIPTION: Demonstrates how to update header options dynamically using the 'setOptions' method from the navigation prop.

LANGUAGE: jsx
CODE:
<Button
  onPress={() =>
    navigation.setOptions({ title: 'Updated!' })
  }
>
  Update the title
</Button>

----------------------------------------

TITLE: Navigating to Nested Screens in React Navigation
DESCRIPTION: This example demonstrates how to navigate to a specific screen within a nested navigator structure in React Navigation. It shows passing screen names and parameters to deeply nested screens.

LANGUAGE: javascript
CODE:
navigation.navigate('Root', {
  screen: 'Settings',
  params: {
    screen: 'Sound',
    params: {
      screen: 'Media',
    },
  },
});

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: This snippet demonstrates how to use the reset method to replace the entire navigation state with a new state, navigating to the Profile screen.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Profile' }],
});

----------------------------------------

TITLE: Creating Native Stack Navigator with Basic Configuration
DESCRIPTION: Example of creating a native stack navigator with initial route and screen options for header styling.

LANGUAGE: javascript
CODE:
const RootStack = createNativeStackNavigator({
  initialRouteName: 'Home',
  screenOptions: {
    headerTintColor: 'white',
    headerStyle: {
      backgroundColor: 'tomato',
    },
  },
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: This snippet demonstrates how to use the reset method to replace the entire navigation state with a new state, navigating to the Profile screen.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Profile' }],
});

----------------------------------------

TITLE: Toggling Drawer in React Navigation
DESCRIPTION: This snippet demonstrates how to toggle the drawer state using the toggleDrawer() method provided by the navigation object.

LANGUAGE: javascript
CODE:
navigation.toggleDrawer();

----------------------------------------

TITLE: Creating a Basic Native Stack Navigator in React Native
DESCRIPTION: Sets up a basic React Native app with a single screen using React Navigation's native stack navigator. Demonstrates the use of NavigationContainer and createNativeStackNavigator.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
    </View>
  );
}

const Stack = createNativeStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default App;

----------------------------------------

TITLE: Specifying Screen Options in React Navigation
DESCRIPTION: Shows how to specify options for individual screens in the stack navigator, such as setting the title in the header.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Home"
  component={HomeScreen}
  options={{ title: 'Overview' }}
/>

----------------------------------------

TITLE: Setting Basic Header Title in React Navigation Stack
DESCRIPTION: Demonstrates how to set a basic header title for a stack screen using the options prop.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Defining Authentication Context and Hooks in React Native
DESCRIPTION: Creates an AuthContext and SignInContext, along with custom hooks to check signed-in status.

LANGUAGE: javascript
CODE:
const AuthContext = React.createContext();

const SignInContext = React.createContext();

function useIsSignedIn() {
  const isSignedIn = React.useContext(SignInContext);
  return isSignedIn;
}

function useIsSignedOut() {
  const isSignedIn = React.useContext(SignInContext);
  return !isSignedIn;
}

----------------------------------------

TITLE: Defining Nested Navigation State in JavaScript
DESCRIPTION: This example shows how a navigation state object looks for a stack navigator containing a nested tab navigator, demonstrating the hierarchical structure of navigation states.

LANGUAGE: javascript
CODE:
const state = {
  type: 'stack',
  key: 'stack-1',
  routeNames: ['Home', 'Profile', 'Settings'],
  routes: [
    {
      key: 'home-1',
      name: 'Home',
      state: {
        key: 'tab-1',
        routeNames: ['Feed', 'Library', 'Favorites'],
        routes: [
          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },
          { key: 'library-1', name: 'Library' },
          { key: 'favorites-1', name: 'Favorites' },
        ],
        index: 0,
      },
    },
    { key: 'settings-1', name: 'Settings' },
  ],
  index: 1,
};

----------------------------------------

TITLE: Implementing Full-Screen Modal Navigation in React Navigation
DESCRIPTION: This code snippet demonstrates how to create a full-screen modal using React Navigation. It includes the setup of nested stack navigators, modal and regular screens, and navigation between them. The example shows how to use different transition styles for modal and regular navigation.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>
      <Button
        onPress={() => navigation.navigate('MyModal')}
        title="Open Modal"
      />
    </View>
  );
}

function DetailsScreen() {
  return (
    <View>
      <Text>Details</Text>
    </View>
  );
}

function ModalScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is a modal!</Text>
      <Button onPress={() => navigation.goBack()} title="Dismiss" />
    </View>
  );
}

const MainStack = createStackNavigator();
const RootStack = createStackNavigator();

function MainStackScreen() {
  return (
    <MainStack.Navigator>
      <MainStack.Screen name="Home" component={HomeScreen} />
      <MainStack.Screen name="Details" component={DetailsScreen} />
    </MainStack.Navigator>
  );
}

function RootStackScreen() {
  return (
    <RootStack.Navigator mode="modal">
      <RootStack.Screen
        name="Main"
        component={MainStackScreen}
        options={{ headerShown: false }}
      />
      <RootStack.Screen name="MyModal" component={ModalScreen} />
    </RootStack.Navigator>
  );
}

----------------------------------------

TITLE: Preventing Navigation with beforeRemove Event in React Navigation
DESCRIPTION: This snippet demonstrates how to use the beforeRemove event to prevent navigation when there are unsaved changes. It shows how to add a listener, prevent the default behavior, and display a confirmation dialog.

LANGUAGE: javascript
CODE:
React.useEffect(
  () =>
    navigation.addListener('beforeRemove', (e) => {
      if (!hasUnsavedChanges) {
        return;
      }

      // Prevent default behavior of leaving the screen
      e.preventDefault();

      // Prompt the user before leaving the screen
      Alert.alert(
        'Discard changes?',
        'You have unsaved changes. Are you sure to discard them and leave the screen?',
        [
          {
            text: "Don't leave",
            style: 'cancel',
            onPress: () => {
              // Do nothing
            },
          },
          {
            text: 'Discard',
            style: 'destructive',
            // If the user confirmed, then we dispatch the action we blocked earlier
            // This will continue the action that had triggered the removal of the screen
            onPress: () => navigation.dispatch(e.data.action),
          },
        ]
      );
    }),
  [navigation, hasUnsavedChanges]
);

----------------------------------------

TITLE: Multi-Screen Stack Navigator Implementation
DESCRIPTION: Extended implementation of stack navigator with multiple screens and initial route configuration.

LANGUAGE: javascript
CODE:
function DetailsScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
    </View>
  );
}

const Stack = createStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Creating a Basic Native Stack Navigator (Dynamic Configuration)
DESCRIPTION: Example of creating a basic Native Stack Navigator using dynamic configuration in React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
    </View>
  );
}

const Stack = createNativeStackNavigator();

function RootStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <RootStack />
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing Screen Tracking for Analytics in React Navigation
DESCRIPTION: This code snippet demonstrates how to set up screen tracking for analytics in a React Navigation app. It uses the 'onStateChange' prop of NavigationContainer to detect route changes and a custom trackScreenView function to log the current screen name. The implementation can be adapted to work with any mobile analytics SDK.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';
import { NavigationContainer } from '@react-navigation/native';

export default () => {
  const navigationRef = useRef();
  const routeNameRef = useRef();

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() =>
        (routeNameRef.current = navigationRef.current.getCurrentRoute().name)
      }
      onStateChange={async () => {
        const previousRouteName = routeNameRef.current;
        const currentRouteName = navigationRef.current.getCurrentRoute().name;
        const trackScreenView = () => {
          // Your implementation of analytics goes here!
        };

        if (previousRouteName !== currentRouteName) {
          // Replace the line below to add the tracker from a mobile analytics SDK
          await trackScreenView(currentRouteName);
        }

        // Save the current route name for later comparison
        routeNameRef.current = currentRouteName;
      }}
    >
      {/* ... */}
    </NavigationContainer>
  );
};

----------------------------------------

TITLE: Implementing useTheme Hook in React Navigation (Static Configuration)
DESCRIPTION: This snippet demonstrates how to use the useTheme hook in a React Navigation app with static configuration. It shows how to access theme colors in various components and apply them to text and button styles.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import {
  useNavigation,
  createStaticNavigation,
  DefaultTheme,
  DarkTheme,
} from '@react-navigation/native';
import { View, Text, TouchableOpacity, useColorScheme } from 'react-native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { Button } from '@react-navigation/elements';
import { useTheme } from '@react-navigation/native';

function SettingsScreen({ route }) {
  const navigation = useNavigation();
  const { user } = route.params;
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Settings Screen</Text>
      <Text style={{ color: colors.text }}>
        userParam: {JSON.stringify(user)}
      </Text>
      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen() {
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Profile Screen</Text>
    </View>
  );
}

function MyButton() {
  const { colors } = useTheme();

  return (
    <TouchableOpacity style={{ backgroundColor: colors.card }}>
      <Text style={{ color: colors.text }}>Button!</Text>
    </TouchableOpacity>
  );
}

function HomeScreen() {
  const navigation = useNavigation();
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Home Screen</Text>
      <MyButton />
      <Button
        onPress={() =>
          navigation.navigate('Root', {
            screen: 'Settings',
            params: { user: 'jane' },
          })
        }
      >
        Go to Settings
      </Button>
    </View>
  );
}

const PanelStack = createNativeStackNavigator({
  screens: {
    Profile: ProfileScreen,
    Settings: SettingsScreen,
  },
});

const Drawer = createDrawerNavigator({
  initialRouteName: 'Panel',
  screens: {
    Home: HomeScreen,
    Panel: {
      screen: PanelStack,
      options: {
        headerShown: false,
      },
    },
  },
});

const Navigation = createStaticNavigation(Drawer);

export default function App() {
  const scheme = useColorScheme();
  return <Navigation theme={scheme === 'dark' ? DarkTheme : DefaultTheme} />;
}

----------------------------------------

TITLE: Nesting Multiple Stack Navigators in React Navigation
DESCRIPTION: This snippet shows how to nest multiple stack navigators in React Navigation, including how to hide headers in parent navigators for a cleaner UI. It demonstrates using the headerShown option.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <NestedStack.Navigator>
      <NestedStack.Screen name="Profile" component={Profile} />
      <NestedStack.Screen name="Settings" component={Settings} />
    </NestedStack.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <RootStack.Navigator mode="modal">
        <RootStack.Screen
          name="Home"
          component={Home}
          options={{ headerShown: false }}
        />
        <RootStack.Screen name="EditPost" component={EditPost} />
      </RootStack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Using Groups for Screen Organization in React Navigation
DESCRIPTION: This snippet demonstrates how to use the Group component to organize screens within a navigator, providing a cleaner alternative to excessive nesting.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  {isLoggedIn ? (
    // Screens for logged in users
    <Stack.Group>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Profile" component={Profile} />
    </Stack.Group>
  ) : (
    // Auth screens
    <Stack.Group screenOptions={{ headerShown: false }}>
      <Stack.Screen name="SignIn" component={SignIn} />
      <Stack.Screen name="SignUp" component={SignUp} />
    </Stack.Group>
  )}
  {/* Common modal screens */}
  <Stack.Group screenOptions={{ presentation: 'modal' }}>
    <Stack.Screen name="Help" component={Help} />
    <Stack.Screen name="Invite" component={Invite} />
  </Stack.Group>
</Stack.Navigator>

----------------------------------------

TITLE: Implementing Screen Tracking with Dynamic Navigation in React Navigation
DESCRIPTION: This snippet shows how to implement screen tracking for analytics using dynamic navigation in React Navigation. It utilizes the NavigationContainer, useNavigation, and useNavigationContainerRef hooks to set up navigation and track screen changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';
import {
  NavigationContainer,
  useNavigation,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createStackNavigator } from '@react-navigation/stack';

function Home() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('Settings')}>
        Go to Settings
      </Button>
    </View>
  );
}

function Settings() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('Home')}>Go to Home</Button>
    </View>
  );
}

const Stack = createStackNavigator();

export default function App() {
  const navigationRef = useNavigationContainerRef();
  const routeNameRef = React.useRef();

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() => {
        routeNameRef.current = navigationRef.current.getCurrentRoute().name;
      }}
      onStateChange={async () => {
        const previousRouteName = routeNameRef.current;
        const currentRouteName = navigationRef.current.getCurrentRoute().name;
        const trackScreenView = () => {
          // Your implementation of analytics goes here!
        };

        if (previousRouteName !== currentRouteName) {
          // Replace the line below to add the tracker from a mobile analytics SDK
          await trackScreenView(currentRouteName);
        }

        // Save the current route name for later comparison
        routeNameRef.current = currentRouteName;
      }}
    >
      {/* ... */}
      <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Setting up Navigation Structure with Switch Navigator
DESCRIPTION: Configures the basic navigation structure using createSwitchNavigator to handle authentication flow between authenticated and non-authenticated states. Creates separate stacks for app content and authentication screens.

LANGUAGE: javascript
CODE:
import {
  createSwitchNavigator,
  createStackNavigator,
  createAppContainer,
} from 'react-navigation';

const AppStack = createStackNavigator({ Home: HomeScreen, Other: OtherScreen });
const AuthStack = createStackNavigator({ SignIn: SignInScreen });

export default createAppContainer(
  createSwitchNavigator(
    {
      AuthLoading: AuthLoadingScreen,
      App: AppStack,
      Auth: AuthStack,
    },
    {
      initialRouteName: 'AuthLoading',
    }
  )
);

----------------------------------------

TITLE: Dynamic Screen Options with Navigation Prop
DESCRIPTION: Shows how to configure screen options using a function that receives navigation props, enabling dynamic navigation features.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Home"
  component={HomeScreen}
  options={({ navigation }) => ({
    title: 'Awesome app',
    headerLeft: () => (
      <DrawerButton onPress={() => navigation.toggleDrawer()} />
    ),
  })}
/>

----------------------------------------

TITLE: Dispatching Drawer Actions in React Navigation
DESCRIPTION: This snippet shows how to dispatch drawer actions directly using the navigation.dispatch() method. It includes actions for opening, closing, and toggling the drawer.

LANGUAGE: javascript
CODE:
navigation.dispatch(DrawerActions.openDrawer());
navigation.dispatch(DrawerActions.closeDrawer());
navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Configuring Multiple Screens in React Navigation
DESCRIPTION: Expands the basic example to include two screens (Home and Details) in the native stack navigator. Demonstrates how to set an initial route and define multiple screens.

LANGUAGE: javascript
CODE:
function DetailsScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
    </View>
  );
}

const Stack = createNativeStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring Screen Title Options in React Navigation
DESCRIPTION: Demonstrates how to set screen titles using the options prop on Stack.Screen components. Shows implementation in both static and dynamic navigation configurations.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        title: 'Awesome app',
      },
    },
    Profile: {
      screen: ProfileScreen,
      options: {
        title: 'My profile',
      },
    },
  },
});

----------------------------------------

TITLE: Asynchronous Effects with useFocusEffect
DESCRIPTION: Shows how to handle asynchronous operations within useFocusEffect while preventing race conditions and memory leaks using cleanup functions.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    let isActive = true;

    const fetchUser = async () => {
      try {
        const user = await API.fetch({ userId });

        if (isActive) {
          setUser(user);
        }
      } catch (e) {
        // Handle error
      }
    };

    fetchUser();

    return () => {
      isActive = false;
    };
  }, [userId])
);

----------------------------------------

TITLE: Implementing usePreventRemove with Dynamic Navigation in React Native
DESCRIPTION: Example showing how to implement the usePreventRemove hook with dynamic navigation configuration. The code includes platform-specific confirmation dialogs and handles text input changes to determine when to prevent navigation.

LANGUAGE: javascript
CODE:
const EditTextScreen = () => {
  const navigation = useNavigation();
  const [text, setText] = React.useState('');

  const hasUnsavedChanges = Boolean(text);

  usePreventRemove(hasUnsavedChanges, ({ data }) => {
    if (Platform.OS === 'web') {
      const discard = confirm(
        'You have unsaved changes. Discard them and leave the screen?'
      );

      if (discard) {
        navigation.dispatch(data.action);
      }
    } else {
      Alert.alert(
        'Discard changes?',
        'You have unsaved changes. Discard them and leave the screen?',
        [
          {
            text: "Don't leave",
            style: 'cancel',
            onPress: () => {
              // Do nothingP
            },
          },
          {
            text: 'Discard',
            style: 'destructive',
            onPress: () => navigation.dispatch(data.action),
          },
        ]
      );
    }
  });

  return (
    <View style={styles.content}>
      <TextInput
        autoFocus
        style={styles.input}
        value={text}
        placeholder="Type something…"
        onChangeText={setText}
      />
    </View>
  );
};

----------------------------------------

TITLE: Basic useScrollToTop Implementation - React Navigation
DESCRIPTION: Demonstrates the basic usage of useScrollToTop hook with a ScrollView component in a tab navigation setup. The hook takes a ref to the scrollable component and handles scroll-to-top behavior when the active tab is tapped.

LANGUAGE: javascript
CODE:
import { ScrollView } from 'react-native';
import { useScrollToTop } from '@react-navigation/native';

function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(ref);

  return (
    <ScrollView ref={ref}>
      {/* content */}
    </ScrollView>
  );
}

----------------------------------------

TITLE: Configuring Group Screen Options
DESCRIPTION: Shows how to set static screen options for a group of screens using the screenOptions prop.

LANGUAGE: javascript
CODE:
<Stack.Group
  screenOptions={{
    presentation: 'modal',
  }}
>
  {/* screens */}
</Stack.Group>

----------------------------------------

TITLE: Installing Drawer Navigator Package
DESCRIPTION: Command to install the drawer navigator package for React Navigation v5

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer@^5.x

----------------------------------------

TITLE: Preventing App Exit on Android using React Native's BackHandler
DESCRIPTION: This snippet demonstrates how to use the BackHandler API from React Native to prompt the user before they exit the app on Android. It sets up an alert dialog when the back button is pressed.

LANGUAGE: javascript
CODE:
import { Alert, BackHandler } from 'react-native';

// ...

React.useEffect(() => {
  const onBackPress = () => {
    Alert.alert(
      'Exit App',
      'Do you want to exit?',
      [
        {
          text: 'Cancel',
          onPress: () => {
            // Do nothing
          },
          style: 'cancel',
        },
        { text: 'YES', onPress: () => BackHandler.exitApp() },
      ],
      { cancelable: false }
    );

    return true;
  };

  const backHandler = BackHandler.addEventListener(
    'hardwareBackPress',
    onBackPress
  );

  return () => backHandler.remove();
}, []);

----------------------------------------

TITLE: Defining Route Param List in TypeScript for React Navigation
DESCRIPTION: This snippet demonstrates how to create a type for route parameters in a React Navigation stack. It includes examples of routes with and without params, as well as optional params.

LANGUAGE: tsx
CODE:
type RootStackParamList = {
  Home: undefined;
  Profile: { userId: string };
  Feed: { sort: 'latest' | 'top' } | undefined;
};

----------------------------------------

TITLE: Implementing Navigation Prevention with Unsaved Changes in React Navigation
DESCRIPTION: This code snippet demonstrates how to use the 'beforeRemove' event listener to prevent navigation when there are unsaved changes. It shows how to prompt the user with an alert before allowing navigation to proceed.

LANGUAGE: javascript
CODE:
function EditText({ navigation }) {
  const [text, setText] = React.useState('');
  const hasUnsavedChanges = Boolean(text);

  React.useEffect(
    () =>
      navigation.addListener('beforeRemove', (e) => {
        if (!hasUnsavedChanges) {
          // If we don't have unsaved changes, then we don't need to do anything
          return;
        }

        // Prevent default behavior of leaving the screen
        e.preventDefault();

        // Prompt the user before leaving the screen
        Alert.alert(
          'Discard changes?',
          'You have unsaved changes. Are you sure to discard them and leave the screen?',
          [
            { text: "Don't leave", style: 'cancel', onPress: () => {} },
            {
              text: 'Discard',
              style: 'destructive',
              // If the user confirmed, then we dispatch the action we blocked earlier
              // This will continue the action that had triggered the removal of the screen
              onPress: () => navigation.dispatch(e.data.action),
            },
          ]
        );
      }),
    [navigation, hasUnsavedChanges]
  );

  return (
    <TextInput
      value={text}
      placeholder="Type something…"
      onChangeText={setText}
    />
  );
}

----------------------------------------

TITLE: Implementing Deep Linking with useLinking in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useLinking hook to handle deep links in a React Native app. It sets up the NavigationContainer with initial state based on the deep link.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { ScrollView } from 'react-native';
import { useLinking, NavigationContainer } from '@react-navigation/native';

export default function App() {
  const ref = React.useRef();

  const { getInitialState } = useLinking(ref, {
    prefixes: ['https://mychat.com', 'mychat://'],
    config: {
      screens: {
        Chat: 'feed/:sort',
      },
    },
  });

  const [isReady, setIsReady] = React.useState(false);
  const [initialState, setInitialState] = React.useState();

  React.useEffect(() => {
    getInitialState()
      .catch(() => {})
      .then((state) => {
        if (state !== undefined) {
          setInitialState(state);
        }

        setIsReady(true);
      });
  }, [getInitialState]);

  if (!isReady) {
    return null;
  }

  return (
    <NavigationContainer initialState={initialState} ref={ref}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: System Theme Integration with useColorScheme
DESCRIPTION: Shows how to integrate system color scheme preferences using the useColorScheme hook to automatically switch between light and dark themes based on OS settings.

LANGUAGE: javascript
CODE:
export default function App() {
  const scheme = useColorScheme();

  return <Navigation theme={scheme === 'dark' ? DarkTheme : DefaultTheme} />;
}

----------------------------------------

TITLE: Updating Header Options with setOptions
DESCRIPTION: Example of dynamically updating header options using navigation.setOptions from within a component.

LANGUAGE: javascript
CODE:
<Button
  title="Update the title"
  onPress={() => navigation.setOptions({ title: 'Updated!' })}
/>

----------------------------------------

TITLE: Adding Focus and Blur Event Listeners in React Navigation
DESCRIPTION: This snippet shows how to add focus and blur event listeners in a React functional component using the useEffect hook. It demonstrates proper cleanup by returning an unsubscribe function.

LANGUAGE: jsx
CODE:
function ProfileScreen() {
  const navigation = useNavigation();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // Screen was focused
    });
    return unsubscribe;
  }, [navigation]);

  React.useEffect(() => {
    const unsubscribe = navigation.addListener('blur', () => {
      // Screen was unfocused
    });
    return unsubscribe;
  }, [navigation]);

  // Rest of the component
}

----------------------------------------

TITLE: Adding a Focus Event Listener in React Navigation
DESCRIPTION: This example shows how to add a listener for the 'focus' event on a screen using the addListener method.

LANGUAGE: javascript
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Passing and Accessing Parameters in React Navigation
DESCRIPTION: Demonstrates how to pass parameters when navigating to a route and how to access those parameters in the destination screen component.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => {
          /* 1. Navigate to the Details route with params */
          navigation.navigate('Details', {
            itemId: 86,
            otherParam: 'anything you want here',
          });
        }}
      />
    </View>
  );
}

function DetailsScreen({ route, navigation }) {
  /* 2. Get the param */
  const { itemId, otherParam } = route.params;
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
      <Button
        title="Go to Details... again"
        onPress={() =>
          navigation.push('Details', {
            itemId: Math.floor(Math.random() * 100),
          })
        }
      />
      <Button title="Go to Home" onPress={() => navigation.navigate('Home')} />
      <Button title="Go back" onPress={() => navigation.goBack()} />
    </View>
  );
}

----------------------------------------

TITLE: Installing React Navigation Core Package
DESCRIPTION: Command to install the core React Navigation package version 6.x using npm.

LANGUAGE: bash
CODE:
npm install @react-navigation/native@^6.x

----------------------------------------

TITLE: Passing and Accessing Parameters in React Navigation
DESCRIPTION: Demonstrates how to pass parameters when navigating to a route and how to access those parameters in the destination screen component.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => {
          /* 1. Navigate to the Details route with params */
          navigation.navigate('Details', {
            itemId: 86,
            otherParam: 'anything you want here',
          });
        }}
      />
    </View>
  );
}

function DetailsScreen({ route, navigation }) {
  /* 2. Get the param */
  const { itemId, otherParam } = route.params;
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
      <Button
        title="Go to Details... again"
        onPress={() =>
          navigation.push('Details', {
            itemId: Math.floor(Math.random() * 100),
          })
        }
      />
      <Button title="Go to Home" onPress={() => navigation.navigate('Home')} />
      <Button title="Go back" onPress={() => navigation.goBack()} />
    </View>
  );
}

----------------------------------------

TITLE: Defining Navigation State Structure in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a navigation state object in React Navigation, including properties like type, key, routeNames, routes, index, and stale.

LANGUAGE: javascript
CODE:
const state = {
  type: 'stack',
  key: 'stack-1',
  routeNames: ['Home', 'Profile', 'Settings'],
  routes: [
    { key: 'home-1', name: 'Home', params: { sortBy: 'latest' } },
    { key: 'settings-1', name: 'Settings' },
  ],
  index: 1,
  stale: false,
};

----------------------------------------

TITLE: Customized Safe Area Implementation in React Navigation
DESCRIPTION: Example demonstrating selective application of safe area insets using the useSafeAreaInsets hook, showing how to apply only specific paddings (top and bottom) for more precise control.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingBottom: insets.bottom,

        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Using Focus-Aware Status Bar in Tab and Drawer Navigators
DESCRIPTION: This snippet demonstrates how to use the FocusAwareStatusBar component in screens of tab and drawer navigators. It ensures that the correct status bar style is applied based on the focused screen.

LANGUAGE: jsx
CODE:
function Screen1({ navigation }) {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#6a51ae',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <FocusAwareStatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen2')}
        color="#fff"
      />
    </View>
  );
}

function Screen2({ navigation }) {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#ecf0f1',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <FocusAwareStatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen1')}
      />
    </View>
  );
}

----------------------------------------

TITLE: Installing Material Top Tabs Dependencies
DESCRIPTION: Commands to install required packages for Material Top Tabs Navigator including react-navigation dependencies and react-native-pager-view.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-top-tabs@^6.x react-native-tab-view

LANGUAGE: bash
CODE:
npx expo install react-native-pager-view

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Installing Material Top Tabs Dependencies
DESCRIPTION: Commands to install required packages for Material Top Tabs Navigator including react-navigation dependencies and react-native-pager-view.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-top-tabs@^6.x react-native-tab-view

LANGUAGE: bash
CODE:
npx expo install react-native-pager-view

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Installing Native Stack Navigator Package
DESCRIPTION: Command to install the @react-navigation/native-stack package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/native-stack@^6.x

----------------------------------------

TITLE: Installing Native Stack Navigator Package
DESCRIPTION: Command to install the @react-navigation/native-stack package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/native-stack@^6.x

----------------------------------------

TITLE: Customizing Theme Colors in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom theme by extending the default theme and overriding specific color values. It shows how to apply the custom theme to the NavigationContainer component.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { NavigationContainer, DefaultTheme } from '@react-navigation/native';

const MyTheme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    primary: 'rgb(255, 45, 85)',
  },
};

export default function App() {
  return (
    <NavigationContainer theme={MyTheme}>{/* content */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Adding Icons to Bottom Tab Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to add custom icons to a bottom tab navigator using the tabBarIcon option. It uses Ionicons from react-native-vector-icons to display different icons for the Home and Settings tabs based on their focus state.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { createStaticNavigation } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
// You can import Ionicons from @expo/vector-icons/Ionicons if you use Expo or
// react-native-vector-icons/Ionicons otherwise.
import Ionicons from 'react-native-vector-icons/Ionicons';

function HomeScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Home!</Text>
    </View>
  );
}

function SettingsScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings!</Text>
    </View>
  );
}

const RootTabs = createBottomTabNavigator({
  screenOptions: ({ route }) => ({
    tabBarIcon: ({ focused, color, size }) => {
      let iconName;

      if (route.name === 'Home') {
        iconName = focused
          ? 'ios-information-circle'
          : 'ios-information-circle-outline';
      } else if (route.name === 'Settings') {
        iconName = focused ? 'ios-list' : 'ios-list-outline';
      }

      // You can return any component that you like here!
      return <Ionicons name={iconName} size={size} color={color} />;
    },
    tabBarActiveTintColor: 'tomato',
    tabBarInactiveTintColor: 'gray',
  }),
  screens: {
    Home: HomeScreen,
    Settings: SettingsScreen,
  },
});

const Navigation = createStaticNavigation(RootTabs);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Basic Stack Navigator Implementation
DESCRIPTION: Simple example showing how to create a stack navigator with multiple screens

LANGUAGE: javascript
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Notifications" component={Notifications} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Implementing Back Navigation in React Navigation
DESCRIPTION: Demonstrates how to implement back navigation using navigation.goBack(), navigation.popTo(), and navigation.popToTop() methods. These methods allow for flexible navigation control, including going back one screen or to a specific screen in the stack.

LANGUAGE: javascript
CODE:
function DetailsScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Button onPress={() => navigation.push('Details')}>
        Go to Details... again
      </Button>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
      <Button onPress={() => navigation.popTo('Home')}>Go to Home</Button>
      <Button onPress={() => navigation.popToTop()}>
        Go back to first screen in stack
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Persisting Navigation State with Dynamic Configuration in React Navigation
DESCRIPTION: This snippet demonstrates how to implement state persistence using AsyncStorage in a React Navigation app with dynamic configuration. It shows restoring the initial state and saving state changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Platform, View, Linking } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Tab = createBottomTabNavigator();
const HomeStack = createNativeStackNavigator();
const SettingsStack = createNativeStackNavigator();

function A() {
  return <View />;
}

function B() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('C')}>Go to C</Button>
    </View>
  );
}

function C() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('D')}>Go to D</Button>
    </View>
  );
}

function D() {
  return <View />;
}

function HomeStackScreen() {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen name="A" component={A} />
    </HomeStack.Navigator>
  );
}

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen name="B" component={B} />
      <SettingsStack.Screen name="C" component={C} />
      <SettingsStack.Screen name="D" component={D} />
    </SettingsStack.Navigator>
  );
}

const PERSISTENCE_KEY = 'NAVIGATION_STATE_V1';

export default function App() {
  const [isReady, setIsReady] = React.useState(Platform.OS === 'web'); // Don't persist state on web since it's based on URL
  const [initialState, setInitialState] = React.useState();

  React.useEffect(() => {
    const restoreState = async () => {
      try {
        const initialUrl = await Linking.getInitialURL();

        if (initialUrl == null) {
          // Only restore state if there's no deep link
          const savedStateString = await AsyncStorage.getItem(PERSISTENCE_KEY);
          const state = savedStateString
            ? JSON.parse(savedStateString)
            : undefined;

          if (state !== undefined) {
            setInitialState(state);
          }
        }
      } finally {
        setIsReady(true);
      }
    };

    if (!isReady) {
      restoreState();
    }
  }, [isReady]);

  if (!isReady) {
    return null;
  }

  return (
    <NavigationContainer
      initialState={initialState}
      onStateChange={(state) =>
        AsyncStorage.setItem(PERSISTENCE_KEY, JSON.stringify(state))
      }
    >
      <Tab.Navigator screenOptions={{ headerShown: false }}>
        <Tab.Screen
          name="Home"
          component={HomeStackScreen}
          options={{ tabBarLabel: 'Home!' }}
        />
        <Tab.Screen
          name="Settings"
          component={SettingsStackScreen}
          options={{ tabBarLabel: 'Settings!' }}
        />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Navigate Action in React Navigation
DESCRIPTION: Demonstrates how to use CommonActions.navigate to navigate to a specific route with parameters.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.navigate({
    name: 'Profile',
    params: {
      user: 'jane',
    },
  })
);

----------------------------------------

TITLE: Configuring Stack Navigator Groups (Static)
DESCRIPTION: Demonstrates how to define groups in a stack navigator using static configuration. Groups are used to organize screens and apply common options.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  groups: {
    App: {
      screenOptions: {
        headerStyle: {
          backgroundColor: '#FFB6C1',
        },
      },
      screens: {
        Home: HomeScreen,
        Profile: EmptyScreen,
      },
    },
    Modal: {
      screenOptions: {
        presentation: 'modal',
      },
      screens: {
        Search: EmptyScreen,
        Share: EmptyScreen,
      },
    },
  },
});

----------------------------------------

TITLE: React Navigation Basic Screen Navigation
DESCRIPTION: Implementation of a HomeScreen component with navigation to a Details screen using the navigation prop.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );

----------------------------------------

TITLE: Delayed Effect Implementation with InteractionManager
DESCRIPTION: Demonstrates how to delay effect execution until navigation transitions are complete using InteractionManager.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    const task = InteractionManager.runAfterInteractions(() => {
      // Expensive task
    });

    return () => task.cancel();
  }, [])
);

----------------------------------------

TITLE: Implementing a Custom Tab Navigator in React Navigation
DESCRIPTION: This code snippet demonstrates how to create a custom tab navigator using the useNavigationBuilder hook from React Navigation. It includes the implementation of a TabNavigator component and the necessary logic for handling tab presses and rendering screens.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, Pressable, View } from 'react-native';
import {
  NavigationHelpersContext,
  useNavigationBuilder,
  TabRouter,
  TabActions,
} from '@react-navigation/native';

function TabNavigator({
  id,
  initialRouteName,
  children,
  layout,
  screenListeners,
  screenOptions,
  screenLayout,
  tabBarStyle,
  contentStyle,
}) {
  const { state, navigation, descriptors, NavigationContent } =
    useNavigationBuilder(TabRouter, {
      id,
      initialRouteName,
      children,
      layout,
      screenListeners,
      screenOptions,
      screenLayout,
    });

  return (
    <NavigationContent>
      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>
        {state.routes.map((route, index) => (
          <Pressable
            key={route.key}
            onPress={() => {
              const isFocused = state.index === index;
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
              });

              if (!isFocused && !event.defaultPrevented) {
                navigation.dispatch({
                  ...TabActions.jumpTo(route.name, route.params),
                  target: state.key,
                });
              }
            }}
            style={{ flex: 1 }}
          >
            <Text>{descriptors[route.key].options.title ?? route.name}</Text>
          </Pressable>
        ))}
      </View>
      <View style={[{ flex: 1 }, contentStyle]}>
        {state.routes.map((route, i) => {
          return (
            <View
              key={route.key}
              style={[
                StyleSheet.absoluteFill,
                { display: i === state.index ? 'flex' : 'none' },
              ]}
            >
              {descriptors[route.key].render()}
            </View>
          );
        })}
      </View>
    </NavigationContent>
  );
}

----------------------------------------

TITLE: Updating Screen Parameters in React Navigation
DESCRIPTION: This example shows how to use the setParams method to update the parameters of the current screen, swapping the friends list and title.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation: { setParams } }) {
  return (
    <Button
      onPress={() =>
        setParams({
          friends:
            route.params.friends[0] === 'Brent'
              ? ['Wojciech', 'Szymon', 'Jakub']
              : ['Brent', 'Satya', 'Michaś'],
          title:
            route.params.title === "Brent's Profile"
              ? "Lucy's Profile"
              : "Brent's Profile",
        })
      }
      title="Swap title and friends"
    />
  );
}

----------------------------------------

TITLE: Dynamically Setting Screen Options in React Navigation
DESCRIPTION: This snippet demonstrates how to use the setOptions method to dynamically update the screen's title based on user input.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation, route }) {
  const [value, onChangeText] = React.useState(route.params.title);

  React.useEffect(() => {
    navigation.setOptions({
      title: value === '' ? 'No title' : value,
    });
  }, [navigation, value]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <TextInput
        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
        onChangeText={onChangeText}
        value={value}
      />
      <Button title="Go back" onPress={() => navigation.goBack()} />
    </View>
  );
}

----------------------------------------

TITLE: Installing React Navigation Bottom Tabs Package
DESCRIPTION: Command to install the bottom tabs navigator package for React Navigation version 6.x.

LANGUAGE: bash
CODE:
npm install @react-navigation/bottom-tabs@^6.x

----------------------------------------

TITLE: Implementing Screen Tracking in React Navigation
DESCRIPTION: Example implementation of screen tracking analytics using NavigationContainer. The code demonstrates how to track screen changes by utilizing the onStateChange prop and navigationRef, allowing integration with any mobile analytics SDK. It tracks the previous and current route names, calling a custom tracking function when the route changes.

LANGUAGE: javascript
CODE:
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';

export default () => {
  const navigationRef = useNavigationContainerRef();
  const routeNameRef = useRef();

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() => {
        routeNameRef.current = navigationRef.getCurrentRoute().name;
      }}
      onStateChange={async () => {
        const previousRouteName = routeNameRef.current;
        const currentRouteName = navigationRef.getCurrentRoute().name;
        const trackScreenView = () => {
          // Your implementation of analytics goes here!
        };

        if (previousRouteName !== currentRouteName) {
          // Save the current route name for later comparison
          routeNameRef.current = currentRouteName;

          // Replace the line below to add the tracker from a mobile analytics SDK
          await trackScreenView(currentRouteName);
        }
      }}
    >
      {/* ... */}
    </NavigationContainer>
  );
};

----------------------------------------

TITLE: Defining RootNavigation Module for React Navigation
DESCRIPTION: Creates a RootNavigation module with functions to dispatch navigation actions using the navigation container reference.

LANGUAGE: javascript
CODE:
// RootNavigation.js

import { createNavigationContainerRef } from '@react-navigation/native';

export const navigationRef = createNavigationContainerRef();

export function navigate(name, params) {
  if (navigationRef.isReady()) {
    navigationRef.navigate(name, params);
  }
}

// add other navigation functions that you need and export them

----------------------------------------

TITLE: Installing React Navigation DevTools with npm/yarn
DESCRIPTION: Command to install the @react-navigation/devtools package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/devtools

----------------------------------------

TITLE: Installing React Navigation Native Stack
DESCRIPTION: Command to install the native stack navigator library for React Navigation using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/native-stack@^6.x

----------------------------------------

TITLE: Installing Bare React Native Dependencies
DESCRIPTION: Command to install required dependencies for React Navigation in a bare React Native project

LANGUAGE: bash
CODE:
npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view

----------------------------------------

TITLE: Installing React Navigation Core Package
DESCRIPTION: Command to install the core React Navigation package for version 5.x

LANGUAGE: bash
CODE:
npm install @react-navigation/native@^5.x

----------------------------------------

TITLE: Custom Tab Bar Implementation
DESCRIPTION: Example of implementing a custom tab bar component with custom styling and behavior

LANGUAGE: javascript
CODE:
function MyTabBar({ state, descriptors, navigation }) {
  const { colors } = useTheme();
  const { buildHref } = useLinkBuilder();

  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label = options.tabBarLabel !== undefined ? options.tabBarLabel
          : options.title !== undefined ? options.title : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name, route.params);
          }
        };

        return (
          <PlatformPressable
            key={route.key}
            onPress={onPress}
            style={{ flex: 1 }}
          >
            <Text style={{ color: isFocused ? colors.primary : colors.text }}>
              {label}
            </Text>
          </PlatformPressable>
        );
      })}
    </View>
  );
}

----------------------------------------

TITLE: Static Root Stack Navigator Configuration
DESCRIPTION: Example of configuring a root stack navigator using the static API with linking configuration for nested screens.

LANGUAGE: javascript
CODE:
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
    },
    Feed: {
      screen: FeedScreen,
      linking: {
        path: 'feed',
        screens: {
          Latest: 'latest',
          Popular: 'popular',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Basic Screen Definition in React Navigation
DESCRIPTION: Shows how to define screens in a stack navigator using both static configuration and dynamic Screen components.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

LANGUAGE: jsx
CODE:
const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Using goBack Method in React Navigation
DESCRIPTION: Demonstration of how to use the goBack method from the navigation prop to return to the previous screen.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation: { goBack } }) {
  return (
    <View>
      <Button onPress={() => goBack()} title="Go back from ProfileScreen" />
    </View>
  );
}

----------------------------------------

TITLE: Declarative Authentication Flow in React Navigation 5.x
DESCRIPTION: Example of implementing a declarative authentication flow using conditional rendering of screens in React Navigation 5.x.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        {isLoggedIn ? (
          <>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Settings" component={SettingsScreen} />
          </>
        ) : (
          <Stack.Screen name="SignIn" component={SignInScreen} />
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Replacing a Route with StackActions in React Navigation
DESCRIPTION: Demonstrates how to use the replace action from StackActions to replace a route in the navigation state. It shows basic usage and advanced usage with source and target properties.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

navigation.dispatch(
  StackActions.replace('Profile', {
    user: 'jane',
  })
);

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

navigation.dispatch({
  ...StackActions.replace('Profile', {
    user: 'jane',
  }),
  source: route.key,
  target: navigation.getState().key,
});

----------------------------------------

TITLE: Custom Tab Bar Implementation
DESCRIPTION: Example of implementing a custom tab bar component with custom styling and behavior

LANGUAGE: javascript
CODE:
function MyTabBar({ state, descriptors, navigation }) {
  const { colors } = useTheme();
  const { buildHref } = useLinkBuilder();

  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label = options.tabBarLabel !== undefined ? options.tabBarLabel
          : options.title !== undefined ? options.title : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name, route.params);
          }
        };

        return (
          <PlatformPressable
            key={route.key}
            onPress={onPress}
            style={{ flex: 1 }}
          >
            <Text style={{ color: isFocused ? colors.primary : colors.text }}>
              {label}
            </Text>
          </PlatformPressable>
        );
      })}
    </View>
  );
}

----------------------------------------

TITLE: Navigating to a new screen using React Navigation
DESCRIPTION: This snippet demonstrates how to navigate from a Home screen to a Details screen using the navigation prop in React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}

----------------------------------------

TITLE: Implementing Multiple Drawers with Nested Drawer Navigators in React Navigation
DESCRIPTION: This snippet shows how to implement multiple drawers by nesting two drawer navigators in React Navigation. It includes custom drawer content and demonstrates how to open specific drawers using the navigation prop and drawer IDs.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.getParent('LeftDrawer').openDrawer()}>
        Open left drawer
      </Button>
      <Button onPress={() => navigation.getParent('RightDrawer').openDrawer()}>
        Open right drawer
      </Button>
    </View>
  );
}

function RightDrawerContent() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This is the right drawer</Text>
    </View>
  );
}

const LeftDrawerScreen = createDrawerNavigator({
  id: 'LeftDrawer',
  screenOptions: {
    drawerPosition: 'left',
  },
  screens: {
    Home: HomeScreen,
  },
});

const RightDrawerScreen = createDrawerNavigator({
  id: 'RightDrawer',
  drawerContent: (props) => <RightDrawerContent {...props} />,
  screenOptions: {
    drawerPosition: 'right',
    headerShown: false,
  },
  screens: {
    HomeDrawer: LeftDrawerScreen,
  },
});

const Navigation = createStaticNavigation(RightDrawerScreen);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Navigating to a Profile Screen with Params in React Navigation
DESCRIPTION: Demonstrates how to use the CommonActions.navigate action to navigate to a Profile screen with user parameters.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.navigate({
    name: 'Profile',
    params: {
      user: 'jane',
    },
  })
);

----------------------------------------

TITLE: Using useRoute Hook in Functional Component
DESCRIPTION: Demonstrates how to use the useRoute hook to access route parameters in a functional component. The example shows accessing a caption parameter from the route object.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { useRoute } from '@react-navigation/native';

function MyText() {
  const route = useRoute();

  return <Text>{route.params.caption}</Text>;
}

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: Shows how to use the CommonActions.reset action to reset the navigation state to a new configuration with Home and Profile screens.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.reset({
    index: 1,
    routes: [
      { name: 'Home' },
      {
        name: 'Profile',
        params: { user: 'jane' },
      },
    ],
  })
);

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: Shows how to use the CommonActions.reset action to reset the navigation state to a new configuration with Home and Profile screens.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.reset({
    index: 1,
    routes: [
      { name: 'Home' },
      {
        name: 'Profile',
        params: { user: 'jane' },
      },
    ],
  })
);

----------------------------------------

TITLE: Implementing Basic Drawer Navigation in React Native
DESCRIPTION: Basic setup of a drawer navigator with two screens (Home and Notifications) using @react-navigation/drawer. Shows both static and dynamic configuration options for creating a basic drawer navigation structure.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate('Notifications')}>
        Go to notifications
      </Button>
    </View>
  );
}

function NotificationsScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()}>Go back home</Button>
    </View>
  );
}

const Drawer = createDrawerNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator initialRouteName="Home">
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Notifications" component={NotificationsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring Redux Provider with React Navigation in JavaScript
DESCRIPTION: This snippet demonstrates how to wrap the React Navigation container with a Redux Provider component. It sets up the basic structure for using Redux in a React Navigation app.

LANGUAGE: javascript
CODE:
import { Provider } from 'react-redux';
import { NavigationContainer } from '@react-navigation/native';

// Render the app container component with the provider around it
export default function App() {
  return (
    <Provider store={store}>
      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>
    </Provider>
  );
}

----------------------------------------

TITLE: Implementing Custom Android Back Button Handler in React Navigation
DESCRIPTION: Example of implementing custom back button behavior using useFocusEffect hook and BackHandler from react-native. The code demonstrates handling back button press in a selection mode scenario, where the first press disables selection mode and the second press navigates back.

LANGUAGE: javascript
CODE:
function ScreenWithCustomBackBehavior() {
  // ...

  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = () => {
        if (isSelectionModeEnabled()) {
          disableSelectionMode();
          return true;
        } else {
          return false;
        }
      };

      BackHandler.addEventListener('hardwareBackPress', onBackPress);

      return () =>
        BackHandler.removeEventListener('hardwareBackPress', onBackPress);
    }, [isSelectionModeEnabled, disableSelectionMode])
  );

  // ...
}

----------------------------------------

TITLE: Using Link Component for Navigation in React Navigation
DESCRIPTION: This snippet demonstrates how to import and use the Link component from React Navigation to create a navigation link to a profile page. The Link component uses a path-based navigation approach and preserves default browser link behaviors.

LANGUAGE: javascript
CODE:
import { Link } from '@react-navigation/native';

// ...

function Home() {
  return <Link to="/profile/jane">Go to Jane's profile</Link>;
}

----------------------------------------

TITLE: Installing Material Top Tabs Dependencies
DESCRIPTION: Installation commands for setting up Material Top Tabs Navigator and its dependencies using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-top-tabs@^5.x react-native-tab-view@^2.x

----------------------------------------

TITLE: Complete Navigation Controls Example
DESCRIPTION: Comprehensive example showing multiple navigation methods including push, navigate, goBack, and popToTop.

LANGUAGE: javascript
CODE:
function DetailsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Button
        title="Go to Details... again"
        onPress={() => navigation.push('Details')}
      />
      <Button title="Go to Home" onPress={() => navigation.navigate('Home')} />
      <Button title="Go back" onPress={() => navigation.goBack()} />
      <Button
        title="Go back to first screen in stack"
        onPress={() => navigation.popToTop()}
      />
    </View>
  );
}

----------------------------------------

TITLE: Setting up NavigationService in React Navigation App
DESCRIPTION: This snippet demonstrates how to set up a top-level navigator and pass it to a NavigationService in a React Navigation app. It shows the structure of the App component and how to create a reference to the navigator.

LANGUAGE: javascript
CODE:
// App.js

import { createStackNavigator, createAppContainer } from 'react-navigation';
import NavigationService from './NavigationService';

const TopLevelNavigator = createStackNavigator({
  /* ... */
});

const AppContainer = createAppContainer(TopLevelNavigator);

export default class App extends React.Component {
  // ...

  render() {
    return (
      <AppContainer
        ref={(navigatorRef) => {
          NavigationService.setTopLevelNavigator(navigatorRef);
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Accessing Route Object in React Navigation (Static Configuration)
DESCRIPTION: This snippet demonstrates how to access and use the route object in a screen component using static navigation configuration in React Navigation.

LANGUAGE: javascript
CODE:
function ProfileScreen({ route }) {
  return (
    <View>
      <Text>This is the profile screen of the app</Text>
      <Text>{route.name}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Configuring React Navigation Linking with Expo
DESCRIPTION: Sets up React Navigation to use the Expo scheme for parsing incoming deep links.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

const prefix = Linking.createURL('/');

/* content */

function App() {
  const linking = {
    prefixes: [prefix],
  };

  return <Navigation linking={linking} />;
}

----------------------------------------

TITLE: Customizing Tab Router with Additional Actions
DESCRIPTION: Example of extending the built-in TabRouter to add custom navigation actions like clearing history.

LANGUAGE: javascript
CODE:
import { TabRouter } from '@react-navigation/native';

const MyTabRouter = (options) => {
  const router = TabRouter(options);

  return {
    ...router,
    getStateForAction(state, action, options) {
      switch (action.type) {
        case 'CLEAR_HISTORY':
          return {
            ...state,
            routeKeyHistory: [],
          };
        default:
          return router.getStateForAction(state, action, options);
      }
    },

    actionCreators: {
      ...router.actionCreators,
      clearHistory() {
        return { type: 'CLEAR_HISTORY' };
      },
    },
  };
};

----------------------------------------

TITLE: Implementing Route Props in React Navigation Screen Component
DESCRIPTION: Demonstrates how to access and use the route prop in a React Navigation screen component. The example shows a basic ProfileScreen component that displays the screen name from the route prop.

LANGUAGE: javascript
CODE:
function ProfileScreen({ route }) {
  return (
    <View>
      <Text>This is the profile screen of the app</Text>
      <Text>{route.name}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Stack Replace Action in React Navigation
DESCRIPTION: Example showing how to use StackActions.replace() to replace the current screen with a new one. Takes a route name and optional params as arguments. Can target specific routes using source and target properties.

LANGUAGE: javascript
CODE:
navigation.dispatch(
  StackActions.replace('Profile', { user: 'Wojtek' })
);

----------------------------------------

TITLE: Installing React Native Drawer Layout Dependencies
DESCRIPTION: Command to install the drawer layout package and its dependencies using npm or yarn

LANGUAGE: bash
CODE:
npm install react-native-drawer-layout

----------------------------------------

TITLE: Configuring Stack Navigator in React Navigation 5.x
DESCRIPTION: Example of how to configure a stack navigator using the new component-based API in React Navigation 5.x.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from '@react-navigation/stack';
const Stack = createStackNavigator();

function RootStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{ gestureEnabled: false }}
    >
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My app' }}
      />
      <Stack.Screen
        name="Profile"
        component={ProfileScreen}
        initialParams={{ user: 'me' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Implementing useFocusEffect in React Navigation
DESCRIPTION: This snippet demonstrates the usage of the useFocusEffect hook from React Navigation. It shows how to perform side effects when a screen is focused or unfocused, similar to React's useEffect but tied to the navigation lifecycle.

LANGUAGE: js
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile() {
  useFocusEffect(
    React.useCallback(() => {
      // Do something when the screen is focused

      return () => {
        // Do something when the screen is unfocused
        // Useful for cleanup functions
      };
    }, [])
  );

  return <ProfileContent />;
}

----------------------------------------

TITLE: Implementing Basic Theme in Static Navigation
DESCRIPTION: Shows how to implement a basic custom theme with static navigation configuration in React Navigation. The theme customizes background and primary colors while extending the default theme.

LANGUAGE: javascript
CODE:
const MyTheme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    background: 'rgb(140, 201, 125)',
    primary: 'rgb(255, 45, 85)',
  },
};

const Navigation = createStaticNavigation(Drawer);

export default function App() {
  return <Navigation theme={MyTheme} />;
}

----------------------------------------

TITLE: Setting Initial Parameters for a Screen in React Navigation
DESCRIPTION: Shows how to set initial parameters for a screen using the initialParams prop in the Stack.Screen component.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Details"
  component={DetailsScreen}
  initialParams={{ itemId: 42 }}
/>

----------------------------------------

TITLE: Customizing Navigator Behavior in React Navigation
DESCRIPTION: Shows how to customize a navigator's behavior by overriding router methods, handling custom actions, and adding additional rendering logic.

LANGUAGE: javascript
CODE:
const MyStack = createStackNavigator({ ... });

class CustomNavigator extends React.Component {
  static router = {
    ...MyStack.router,
    getStateForAction: (action, lastState) => {
      // check for custom actions and return a different navigation state.
      return MyStack.router.getStateForAction(action, lastState);
    },
  };
  componentDidUpdate(lastProps) {
    // Navigation state has changed from lastProps.navigation.state to this.props.navigation.state
  }
  render() {
    const { navigation } = this.props;

    return (
      <View>
        <MyStack navigation={navigation} />
        {...}
      </View>
    );
  }
}

----------------------------------------

TITLE: Using useNavigation Hook in React Native Component
DESCRIPTION: This snippet demonstrates how to use the useNavigation hook to access the navigation object in a React Native component. It creates a custom back button that uses the goBack() method from the navigation object.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function MyBackButton() {
  const navigation = useNavigation();

  return (
    <Button
      title="Back"
      onPress={() => {
        navigation.goBack();
      }}
    />
  );
}

----------------------------------------

TITLE: Basic Drawer Navigator Setup (Dynamic Configuration)
DESCRIPTION: Example of setting up a basic drawer navigator with dynamic configuration using Drawer.Navigator components.

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  return (
    <Drawer.Navigator>
      <Drawer.Screen name="Home" component={HomeScreen} />
      <Drawer.Screen name="Profile" component={ProfileScreen} />
    </Drawer.Navigator>
  );
}

----------------------------------------

TITLE: Implementing Screen Focus Detection with withNavigationFocus HOC in React Navigation
DESCRIPTION: Example showing how to use the withNavigationFocus higher-order component to detect screen focus changes. This approach provides an isFocused prop that updates on focus changes, but may cause additional re-renders.

LANGUAGE: javascript
CODE:
import React, { Component } from 'react';
import { View } from 'react-native';
import { withNavigationFocus } from 'react-navigation';

class TabScreen extends Component {
  componentDidUpdate(prevProps) {
    if (prevProps.isFocused !== this.props.isFocused) {
      // Use the `this.props.isFocused` boolean
      // Call any action
    }
  }

  render() {
    return <View />;
  }
}

// withNavigationFocus returns a component that wraps TabScreen and passes
// in the navigation prop
export default withNavigationFocus(TabScreen);

----------------------------------------

TITLE: Using Refs with withNavigation HOC Components
DESCRIPTION: Example demonstrating how to properly use refs with components wrapped by withNavigation. Shows the usage of onRef prop instead of ref for accessing the wrapped component instance.

LANGUAGE: javascript
CODE:
// MyBackButton.ts
export default withNavigation(MyBackButton);

// MyNavBar.ts
<MyBackButton onRef={(elem) => (this.backButton = elem)} />;

----------------------------------------

TITLE: Customizing Tab Bar Component in React Navigation
DESCRIPTION: Example of creating a custom tab bar component and using it in the bottom tab navigator configuration.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator, BottomTabBar } from 'react-navigation-tabs';

const TabBarComponent = (props) => <BottomTabBar {...props} />;

const TabScreens = createBottomTabNavigator(
  {
    // other screens
  },
  {
    tabBarComponent: (props) => (
      <TabBarComponent {...props} style={{ borderTopColor: '#605F60' }} />
    ),
  }
);

----------------------------------------

TITLE: Handling Custom URIs in React Navigation
DESCRIPTION: Demonstrates how to extend the router to handle custom URI patterns by customizing the getActionForPathAndParams method.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyApp = createStackNavigator(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);
const previousGetActionForPathAndParams =
  MyApp.router.getActionForPathAndParams;

Object.assign(MyApp.router, {
  getActionForPathAndParams(path, params) {
    if (path === 'my/custom/path' && params.magic === 'yes') {
      return NavigationActions.navigate({
        routeName: 'Profile',
        action: NavigationActions.navigate({
          routeName: 'Friends',
        }),
      });
    }
    return previousGetActionForPathAndParams(path, params);
  },
});

----------------------------------------

TITLE: Implementing useScrollToTop with Functional Component in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useScrollToTop hook in a functional component with a ScrollView. It imports necessary dependencies, creates a ref, and applies the hook to enable scroll-to-top functionality.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { ScrollView } from 'react-native';
import { useScrollToTop } from '@react-navigation/native';

function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(ref);

  return <ScrollView ref={ref}>{/* content */}</ScrollView>;
}

----------------------------------------

TITLE: Implementing useIsFocused Hook in React Navigation
DESCRIPTION: Demonstrates usage of useIsFocused hook which returns a boolean indicating screen focus state. Best used when component needs to re-render based on focus state changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { useIsFocused } from '@react-navigation/native';

function Profile() {
  // This hook returns `true` if the screen is focused, `false` otherwise
  const isFocused = useIsFocused();

  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;
}

----------------------------------------

TITLE: Implementing useFocusEffect for API Subscription in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useFocusEffect hook to subscribe to an API when a screen is focused and unsubscribe when it's unfocused. It uses React.useCallback to optimize performance.

LANGUAGE: javascript
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile({ userId }) {
  const [user, setUser] = React.useState(null);

  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, (user) => setUser(user));

      return () => unsubscribe();
    }, [userId])
  );

  return <ProfileContent user={user} />;
}

----------------------------------------

TITLE: Basic Stack Navigator Usage
DESCRIPTION: Example of how to set up a basic Stack Navigator with two screens.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <MyStack />
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing Sign In and Home Screens
DESCRIPTION: Implements the main application screens including sign-in functionality and home screen with sign-out capability. Demonstrates navigation between screens and handling of authentication state.

LANGUAGE: javascript
CODE:
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: 'Please sign in',
  };

  render() {
    return (
      <View>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    await AsyncStorage.setItem('userToken', 'abc');
    this.props.navigation.navigate('App');
  };
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Welcome to the app!',
  };

  render() {
    return (
      <View>
        <Button title="Show me more of the app" onPress={this._showMoreApp} />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate('Other');
  };

  _signOutAsync = async () => {
    await AsyncStorage.clear();
    this.props.navigation.navigate('Auth');
  };
}

----------------------------------------

TITLE: Creating Custom Link Component with useLinkProps in React Navigation
DESCRIPTION: Example of creating a custom LinkButton component using the useLinkProps hook. The component supports screen navigation with params and preserves web accessibility features.

LANGUAGE: javascript
CODE:
import { useLinkProps } from '@react-navigation/native';

// ...

const LinkButton = ({ screen, params, action, href, children, ...rest }) => {
  const props = useLinkProps({ screen, params, action, href });

  const [isHovered, setIsHovered] = React.useState(false);

  return (
    <Pressable {...props} {...rest}>
      <Text>{children}</Text>
    </Pressable>
  );
};

----------------------------------------

TITLE: Lazy Loading Screens in React Navigation (Static Configuration)
DESCRIPTION: Demonstrates how to implement lazy loading of screen components using dynamic import and React.lazy with a static navigator configuration. This approach helps reduce the initial bundle size for web applications.

LANGUAGE: javascript
CODE:
import { Suspense, lazy } from 'react';

const MyStack = createNativeStackNavigator({
  screenLayout: ({ children }) => (
    <Suspense fallback={<Loading />}>{children}</Suspense>
  ),
  screens: {
    Home: {
      component: lazy(() => import('./HomeScreen')),
    },
    Profile: {
      component: lazy(() => import('./ProfileScreen')),
    },
  },
});

----------------------------------------

TITLE: Implementing Typed Navigator Components
DESCRIPTION: Example of using typed navigator components with proper parameter checking.

LANGUAGE: tsx
CODE:
<RootStack.Navigator initialRouteName="Home">
  <RootStack.Screen name="Home" component={Home} />
  <RootStack.Screen
    name="Profile"
    component={Profile}
    initialParams={{ userId: user.id }}
  />
  <RootStack.Screen name="Feed" component={Feed} />
</RootStack.Navigator>

----------------------------------------

TITLE: Sharing Common Header Options Across Screens in React Navigation
DESCRIPTION: Demonstrates how to share common header options across multiple screens using the 'screenOptions' prop on the navigator.

LANGUAGE: jsx
CODE:
const MyStack = createNativeStackNavigator({
  screenOptions: {
    headerStyle: {
      backgroundColor: '#f4511e',
    },
    headerTintColor: '#fff',
    headerTitleStyle: {
      fontWeight: 'bold',
    },
  },
  screens: {
    Home: {
      screen: HomeScreen,
    },
    Details: {
      screen: DetailsScreen,
    },
  },
});

----------------------------------------

TITLE: Nesting Tab Navigator in Stack Navigator with React Navigation
DESCRIPTION: This example demonstrates how to nest a Tab Navigator inside a Stack Navigator using React Navigation. It shows the structure of nested navigators and how to set up the screens.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Messages" component={Messages} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Home"
          component={Home}
          options={{ headerShown: false }}
        />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Defining Navigation State Structure in JavaScript
DESCRIPTION: Example of a navigation state object structure in React Navigation, showing properties like type, key, routeNames, routes, index, and stale.

LANGUAGE: javascript
CODE:
const state = {
  type: 'stack',
  key: 'stack-1',
  routeNames: ['Home', 'Profile', 'Settings'],
  routes: [
    { key: 'home-1', name: 'Home', params: { sortBy: 'latest' } },
    { key: 'settings-1', name: 'Settings' },
  ],
  index: 1,
  stale: false,
};

----------------------------------------

TITLE: Exporting Stack Navigator with Custom App Component
DESCRIPTION: Alternative approach to exporting the Stack Navigator by wrapping it in a custom App component for more control over the root component.

LANGUAGE: javascript
CODE:
const AppContainer = createAppContainer(AppNavigator);

export default class App extends React.Component {
  render() {
    return <AppContainer />;
  }
}

----------------------------------------

TITLE: Lazy Loading Screens in React Navigation (Dynamic Configuration)
DESCRIPTION: Shows how to implement lazy loading of screen components using dynamic import and React.lazy with a dynamic navigator configuration. This method also helps reduce the initial bundle size for web applications.

LANGUAGE: javascript
CODE:
import { Suspense, lazy } from 'react';

const HomeScreen = lazy(() => import('./HomeScreen'));
const ProfileScreen = lazy(() => import('./ProfileScreen'));

function MyStack() {
  return (
    <Stack.Navigator
      screenLayout={({ children }) => (
        <Suspense fallback={<Loading />}>{children}</Suspense>
      )}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Implementing useTheme Hook in React Navigation (Dynamic Configuration)
DESCRIPTION: This snippet shows how to use the useTheme hook in a React Navigation app with dynamic configuration. It demonstrates accessing theme colors in various components and applying them to text and button styles.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text, TouchableOpacity, useColorScheme } from 'react-native';
import {
  NavigationContainer,
  DefaultTheme,
  DarkTheme,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { Button } from '@react-navigation/elements';
import { useTheme } from '@react-navigation/native';

function SettingsScreen({ route }) {
  const navigation = useNavigation();
  const { user } = route.params;
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Settings Screen</Text>
      <Text style={{ color: colors.text }}>
        userParam: {JSON.stringify(user)}
      </Text>
      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}
function ProfileScreen() {
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Profile Screen</Text>
    </View>
  );
}

function MyButton() {
  const { colors } = useTheme();

  return (
    <TouchableOpacity style={{ backgroundColor: colors.card }}>
      <Text style={{ color: colors.text }}>Button!</Text>
    </TouchableOpacity>
  );
}

function HomeScreen() {
  const navigation = useNavigation();
  const { colors } = useTheme();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ color: colors.text }}>Home Screen</Text>
      <MyButton />
      <Button
        onPress={() =>
          navigation.navigate('Root', {
            screen: 'Settings',
            params: { user: 'jane' },
          })
        }
      >
        Go to Settings
      </Button>
    </View>
  );
}

const Drawer = createDrawerNavigator();
const Stack = createNativeStackNavigator();

function Root() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Profile" component={ProfileScreen} />
      <Stack.Screen name="Settings" component={SettingsScreen} />
    </Stack.Navigator>
  );
}

export default function App() {
  const scheme = useColorScheme();

  return (
    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>
      <Drawer.Navigator>
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen
          name="Root"
          component={Root}
          options={{ headerShown: false }}
        />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Simplified Route Configuration in Stack Navigator
DESCRIPTION: Shortened syntax for route configuration when only specifying the screen component without additional options.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator({
  Home: HomeScreen,
});

----------------------------------------

TITLE: Configuring Nested Navigators with Deep Linking Paths in React Navigation
DESCRIPTION: This example shows how to set up deep linking paths for nested navigators, including empty paths for parent screens. It uses createStackNavigator and createAppContainer.

LANGUAGE: javascript
CODE:
const AuthSwitch = createAppContainer(
  createStackNavigator({
    AuthLoading: { screen: AuthLoadingScreen },
    App: {
      screen: AppStack,
      path: '',
    },
    Auth: { screen: AuthStack },
  })
);

const AppStack = createStackNavigator({
  Home: { screen: HomeScreen },
  Friends: {
    screen: FriendsScreen,
    path: 'friends',
  },
});

const FriendsScreen = createStackNavigator({
  Overview: { screen: OverviewScreen },
  Chat: {
    screen: ChatScreen,
    path: 'chat/:user',
  },
});

----------------------------------------

TITLE: Configuring Drawer Content Options in React Navigation
DESCRIPTION: This example shows how to customize the appearance and behavior of drawer items using the contentOptions object in the DrawerNavigatorConfig.

LANGUAGE: javascript
CODE:
contentOptions: {
  activeTintColor: '#e91e63',
  itemsContainerStyle: {
    marginVertical: 0,
  },
  iconContainerStyle: {
    opacity: 1
  }
}

----------------------------------------

TITLE: Using DrawerActions in React Navigation
DESCRIPTION: Example showing how to import and use DrawerActions to control drawer state. The snippet demonstrates dispatching a toggleDrawer action through the navigation prop.

LANGUAGE: javascript
CODE:
import { DrawerActions } from 'react-navigation-drawer';

this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Implementing FlatList with Bottom Tab Navigation in React Native
DESCRIPTION: This example demonstrates how to use React Navigation's FlatList component within a bottom tab navigator. It creates a simple list of 150 items in the HomeScreen component, which is then rendered as a tab in the navigation structure.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import {
  createBottomTabNavigator,
  createAppContainer,
  FlatList,
} from 'react-navigation';

const data = new Array(150).fill(0);

class HomeScreen extends React.Component {
  renderItem = ({ index }) => {
    return (
      <View style={{ height: 50 }}>
        <Text style={{ textAlign: 'center' }}>Item {index}</Text>
      </View>
    );
  };

  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <FlatList
          data={data}
          renderItem={this.renderItem}
          contentContainerStyle={{ padding: 10 }}
        />
      </View>
    );
  }
}

const TabNavigator = createBottomTabNavigator({
  Home: { screen: HomeScreen },
});

export default createAppContainer(TabNavigator);

----------------------------------------

TITLE: Configuring Navigator-Specific Types in React Navigation
DESCRIPTION: This example demonstrates how to use navigator-specific types with the useNavigation hook in React Navigation for accessing navigator-specific APIs.

LANGUAGE: typescript
CODE:
type BottomTabParamList = StaticParamList<typeof BottomTabNavigator>;
type ProfileScreenNavigationProp = BottomTabNavigationProp<
  BottomTabParamList,
  'Profile'
>;

// ...

const navigation = useNavigation<ProfileScreenNavigationProp>();

----------------------------------------

TITLE: Implementing Custom Theme in React Navigation
DESCRIPTION: Demonstrates how to create and apply a custom theme to NavigationContainer by extending the DefaultTheme with custom colors.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { NavigationContainer, DefaultTheme } from '@react-navigation/native';

const MyTheme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    primary: 'rgb(255, 45, 85)',
  },
};

export default function App() {
  return (
    <NavigationContainer theme={MyTheme}>{/* content */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Screen Navigation Example
DESCRIPTION: Shows how to navigate to a named screen using the navigation prop.

LANGUAGE: javascript
CODE:
navigation.navigate('Profile');

----------------------------------------

TITLE: Using useNavigation Hook with Function Component in React Navigation
DESCRIPTION: Demonstrates how to implement a back button component using the useNavigation hook in a functional component. The hook provides access to navigation methods like goBack() without requiring direct prop passing.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function MyBackButton() {
  const navigation = useNavigation();

  return (
    <Button
      title="Back"
      onPress={() => {
        navigation.goBack();
      }}
    />
  );
}

----------------------------------------

TITLE: Setting Header Title in React Navigation
DESCRIPTION: Demonstrates how to set a static header title for a screen in React Navigation using the 'options' prop.

LANGUAGE: jsx
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        title: 'My home',
      },
    },
  },
});

----------------------------------------

TITLE: Passing Parameters to Nested Screens in React Navigation
DESCRIPTION: This example illustrates how to pass parameters to a nested screen within a navigator. It uses a more complex navigation structure to demonstrate passing params through multiple levels.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, View, TextInput } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button
        onPress={
          () =>
            navigation.navigate('More', {
              screen: 'Settings',
              params: { user: 'jane' },
            })
        }
      >
        Go to Settings
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Complete Screen Type Definition Example
DESCRIPTION: Comprehensive example showing all necessary type imports and definitions for screen components.

LANGUAGE: tsx
CODE:
import { RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';

type RootStackParamList = {
  Home: undefined;
  Profile: { userId: string };
  Feed: { sort: 'latest' | 'top' } | undefined;
};

type ProfileScreenRouteProp = RouteProp<RootStackParamList, 'Profile'>;

type ProfileScreenNavigationProp = StackNavigationProp<
  RootStackParamList,
  'Profile'
>;

type Props = {
  route: ProfileScreenRouteProp;
  navigation: ProfileScreenNavigationProp;
};

----------------------------------------

TITLE: Organizing Types for React Navigation
DESCRIPTION: This snippet demonstrates a recommended way to organize types for React Navigation, including param lists, screen props, and global declarations.

LANGUAGE: ts
CODE:
import type {
  CompositeScreenProps,
  NavigatorScreenParams,
} from '@react-navigation/native';
import type { StackScreenProps } from '@react-navigation/stack';
import type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';

export type RootStackParamList = {
  Home: NavigatorScreenParams<HomeTabParamList>;
  PostDetails: { id: string };
  NotFound: undefined;
};

export type RootStackScreenProps<T extends keyof RootStackParamList> =
  StackScreenProps<RootStackParamList, T>;

export type HomeTabParamList = {
  Popular: undefined;
  Latest: undefined;
};

export type HomeTabScreenProps<T extends keyof HomeTabParamList> =
  CompositeScreenProps<
    BottomTabScreenProps<HomeTabParamList, T>,
    RootStackScreenProps<keyof RootStackParamList>
  >;

declare global {
  namespace ReactNavigation {
    interface RootParamList extends RootStackParamList {}
  }
}

----------------------------------------

TITLE: Conditional Rendering with useIsFocused Hook in React Navigation
DESCRIPTION: This snippet demonstrates the use of the useIsFocused hook to conditionally render content based on whether a screen is currently focused or not. It's useful for updating UI elements on focus changes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { useIsFocused } from '@react-navigation/native';

function Profile() {
  // This hook returns `true` if the screen is focused, `false` otherwise
  const isFocused = useIsFocused();

  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;
}

----------------------------------------

TITLE: Specifying Initial Parameters for a Screen in React Navigation
DESCRIPTION: This snippet shows how to set initial parameters for a screen using the initialParams property in the screen configuration. These params will be used if no params are provided when navigating to the screen.

LANGUAGE: javascript
CODE:
{
  Details: {
    screen: DetailsScreen,
    initialParams: { itemId: 42 },
  },
}

----------------------------------------

TITLE: Configuring Drawer Navigator Options
DESCRIPTION: Example of how to set various options for the Drawer Navigator, including styling and behavior.

LANGUAGE: javascript
CODE:
<Drawer.Navigator
  screenOptions={{
    drawerStyle: {
      backgroundColor: '#c6cbef',
      width: 240,
    },
  }}
>
  {/* screens */}
</Drawer.Navigator>

----------------------------------------

TITLE: Creating Stack Navigator with Modal Screens in React Navigation
DESCRIPTION: Implementation of a Stack Navigator with both regular and modal screen groups. The code demonstrates how to create different screen components, set up navigation between them, and configure modal presentation using RootStack.Group with appropriate screenOptions.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>
      <Button
        onPress={() => navigation.navigate('MyModal')}
        title="Open Modal"
      />
    </View>
  );
}

function DetailsScreen() {
  return (
    <View>
      <Text>Details</Text>
    </View>
  );
}

function ModalScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is a modal!</Text>
      <Button onPress={() => navigation.goBack()} title="Dismiss" />
    </View>
  );
}

const RootStack = createStackNavigator();

function RootStackScreen() {
  return (
    <RootStack.Navigator>
      <RootStack.Group>
        <RootStack.Screen name="Home" component={HomeScreen} />
        <RootStack.Screen name="Details" component={DetailsScreen} />
      </RootStack.Group>
      <RootStack.Group screenOptions={{ presentation: 'modal' }}>
        <RootStack.Screen name="MyModal" component={ModalScreen} />
      </RootStack.Group>
    </RootStack.Navigator>
  );
}

----------------------------------------

TITLE: Configuring Tab Navigator Labels in React Navigation
DESCRIPTION: Demonstrates how to correctly set tab bar labels for a bottom tab navigator that contains stack navigators. It shows the incorrect way of setting options on nested screens and the correct approach of setting options on the stack navigator components.

LANGUAGE: javascript
CODE:
const HomeStack = createStackNavigator({ A });
const SettingsStack = createStackNavigator({ B });

HomeStack.navigationOptions = {
  tabBarLabel: 'Home!',
};

SettingsStack.navigationOptions = {
  tabBarLabel: 'Settings!',
};

export default createBottomTabNavigator({
  HomeStack,
  SettingsStack,
});

----------------------------------------

TITLE: Configuring Expo Scheme in app.json
DESCRIPTION: Defines the URL scheme for an Expo app in the app.json configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mychat"
  }
}

----------------------------------------

TITLE: Creating Stack Navigator with Modal Screens in React Navigation
DESCRIPTION: Implementation of a Stack Navigator with both regular and modal screen groups. The code demonstrates how to create different screen components, set up navigation between them, and configure modal presentation using RootStack.Group with appropriate screenOptions.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>
      <Button
        onPress={() => navigation.navigate('MyModal')}
        title="Open Modal"
      />
    </View>
  );
}

function DetailsScreen() {
  return (
    <View>
      <Text>Details</Text>
    </View>
  );
}

function ModalScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is a modal!</Text>
      <Button onPress={() => navigation.goBack()} title="Dismiss" />
    </View>
  );
}

const RootStack = createStackNavigator();

function RootStackScreen() {
  return (
    <RootStack.Navigator>
      <RootStack.Group>
        <RootStack.Screen name="Home" component={HomeScreen} />
        <RootStack.Screen name="Details" component={DetailsScreen} />
      </RootStack.Group>
      <RootStack.Group screenOptions={{ presentation: 'modal' }}>
        <RootStack.Screen name="MyModal" component={ModalScreen} />
      </RootStack.Group>
    </RootStack.Navigator>
  );
}

----------------------------------------

TITLE: Configuring Jest for React Navigation Testing
DESCRIPTION: JSON configuration for Jest to properly test React Navigation in a Redux-integrated app.

LANGUAGE: json
CODE:
{
  "jest": {
    "preset": "react-native",
    "transformIgnorePatterns": [
      "node_modules/(?!(jest-)?react-native|react-navigation|react-navigation-redux-helpers)"
    ]
  }
}

----------------------------------------

TITLE: Integrating Redux with React Navigation
DESCRIPTION: Comprehensive example showing how to set up Redux with React Navigation, including creating a store, middleware, and connected navigator component.

LANGUAGE: javascript
CODE:
import {
  createStackNavigator,
} from 'react-navigation';
import {
  createStore,
  applyMiddleware,
  combineReducers,
} from 'redux';
import {
  reduxifyNavigator,
  createReactNavigationReduxMiddleware,
  createNavigationReducer,
} from 'react-navigation-redux-helpers';
import { Provider, connect } from 'react-redux';
import React from 'react';

const AppNavigator = createStackNavigator(AppRouteConfigs);

const navReducer = createNavigationReducer(AppNavigator);
const appReducer = combineReducers({
  nav: navReducer,
  ...
});

// Note: createReactNavigationReduxMiddleware must be run before reduxifyNavigator
const middleware = createReactNavigationReduxMiddleware(
  "root",
  state => state.nav,
);

const App = reduxifyNavigator(AppNavigator, "root");
const mapStateToProps = (state) => ({
  state: state.nav,
});
const AppWithNavigationState = connect(mapStateToProps)(App);

const store = createStore(
  appReducer,
  applyMiddleware(middleware),
);

class Root extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <AppWithNavigationState />
      </Provider>
    );
  }
}

----------------------------------------

TITLE: Configuring Tab Bar Options - Styling Example
DESCRIPTION: Example configuration for customizing the appearance of the bottom tab bar, including colors, font size, and background.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  activeTintColor: '#e91e63',
  labelStyle: {
    fontSize: 12,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Configuring Stack Navigator Routes in React Navigation
DESCRIPTION: Example showing how to configure routes in a StackNavigator with HomeScreen and DetailsScreen components. Demonstrates basic route setup with initialRouteName configuration.

LANGUAGE: javascript
CODE:
const RootStack = StackNavigator(
  {
    Home: {
      screen: HomeScreen, // <----
    },
    Details: {
      screen: DetailsScreen, // <----
    },
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Initializing TabNavigator in React Navigation
DESCRIPTION: Basic initialization of TabNavigator with RouteConfigs and TabNavigatorConfig parameters.

LANGUAGE: javascript
CODE:
TabNavigator(RouteConfigs, TabNavigatorConfig);

----------------------------------------

TITLE: Opening Drawer with DrawerActions in React Navigation
DESCRIPTION: Demonstrates how to use DrawerActions.openDrawer() to open the drawer pane in a React Navigation drawer navigator. This example shows the implementation in both static and dynamic navigation configurations.

LANGUAGE: jsx
CODE:
navigation.dispatch(DrawerActions.openDrawer());

----------------------------------------

TITLE: Implementing a Custom Tab Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom tab navigator using the useNavigationBuilder hook from React Navigation. It includes rendering of tab bar and content, handling tab press events, and integrating with the navigation state.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, Pressable, View, StyleSheet } from 'react-native';
import {
  NavigationHelpersContext,
  useNavigationBuilder,
  TabRouter,
  TabActions,
} from '@react-navigation/native';

function TabNavigator({
  initialRouteName,
  children,
  screenOptions,
  tabBarStyle,
  contentStyle,
}) {
  const { state, navigation, descriptors } = useNavigationBuilder(TabRouter, {
    children,
    screenOptions,
    initialRouteName,
  });

  return (
    <NavigationHelpersContext.Provider value={navigation}>
      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>
        {state.routes.map((route) => (
          <Pressable
            key={route.key}
            onPress={() => {
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
              });

              if (!event.defaultPrevented) {
                navigation.dispatch({
                  ...TabActions.jumpTo(route.name),
                  target: state.key,
                });
              }
            }}
            style={{ flex: 1 }}
          >
            <Text>{descriptors[route.key].options.title || route.name}</Text>
          </Pressable>
        ))}
      </View>
      <View style={[{ flex: 1 }, contentStyle]}>
        {state.routes.map((route, i) => {
          return (
            <View
              key={route.key}
              style={[
                StyleSheet.absoluteFill,
                { display: i === state.index ? 'flex' : 'none' },
              ]}
            >
              {descriptors[route.key].render()}
            </View>
          );
        })}
      </View>
    </NavigationHelpersContext.Provider>
  );
}

----------------------------------------

TITLE: Updating Screen Params in React Navigation
DESCRIPTION: Demonstration of using setParams to update the parameters of the current screen.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation: { setParams } }) {
  render() {
    return (
      <Button
        onPress={() =>
          setParams({
            friends:
              route.params.friends[0] === 'Brent'
                ? ['Wojciech', 'Szymon', 'Jakub']
                : ['Brent', 'Satya', 'Michaś'],
            title:
              route.params.title === "Brent's Profile"
                ? "Lucy's Profile"
                : "Brent's Profile",
          })
        }
        title="Swap title and friends"
      />
    );
  }
}

----------------------------------------

TITLE: Creating Basic Navigator - Dynamic Configuration
DESCRIPTION: Example of creating a native stack navigator using dynamic configuration with Navigator and Screen components.

LANGUAGE: jsx
CODE:
const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Header Interaction with Screen Component in React Navigation
DESCRIPTION: This example shows how to interact with the screen component from the header using navigation.setOptions. It demonstrates updating the header button based on the screen's state and using useLayoutEffect for optimal performance.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={({ navigation, route }) => ({
          headerTitle: (props) => <LogoTitle {...props} />,
        })}
      />
    </Stack.Navigator>
  );
}

function HomeScreen({ navigation }) {
  const [count, setCount] = React.useState(0);

  React.useLayoutEffect(() => {
    navigation.setOptions({
      headerRight: () => (
        <Button onPress={() => setCount((c) => c + 1)} title="Update count" />
      ),
    });
  }, [navigation]);

  return <Text>Count: {count}</Text>;
}

----------------------------------------

TITLE: Configuring path mapping for static navigation
DESCRIPTION: Example of how to map paths to screens in static navigation configuration

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator({
  screens: {
    Profile: {
      screen: ProfileScreen,
      linking: {
        path: 'user',
      },
    },
    Chat: {
      screen: ChatScreen,
      linking: {
        path: 'feed/:sort',
      },
    },
  },
});

----------------------------------------

TITLE: Advanced Configuration for Deep Linking in React Navigation
DESCRIPTION: This snippet demonstrates a more complex configuration for deep linking, including nested screens and custom parameter parsing.

LANGUAGE: javascript
CODE:
{
  screens: {
    Home: {
      screens: {
        Catalog: {
          path: 'item/:id',
          parse: {
            id: Number,
          },
        },
      },
    },
  }
}

----------------------------------------

TITLE: Configuring Bottom Tab Navigator with Icons and Badges
DESCRIPTION: Demonstrates how to set up a Bottom Tab Navigator with custom icons, labels, and badges using MaterialCommunityIcons.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

const Tab = createBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator
      initialRouteName="Feed"
      tabBarOptions={{
        activeTintColor: '#e91e63',
      }}
    >
      <Tab.Screen
        name="Feed"
        component={Feed}
        options={{
          tabBarLabel: 'Home',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="home" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Notifications"
        component={Notifications}
        options={{
          tabBarLabel: 'Updates',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="bell" color={color} size={size} />
          ),
          tabBarBadge: 3,
        }}
      />
      <Tab.Screen
        name="Profile"
        component={Profile}
        options={{
          tabBarLabel: 'Profile',
          tabBarIcon: ({ color, size }) => (
            <MaterialCommunityIcons name="account" color={color} size={size} />
          ),
        }}
      />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Configuring URL Links in React Navigation
DESCRIPTION: Example of configuring URL routes and deep linking in React Navigation using the linking prop. Demonstrates how to map screen names to URL paths and set up prefixes for both web and mobile deep links.

LANGUAGE: javascript
CODE:
const linking = {
  prefixes: ['https://mychat.com', 'mychat://'],
  config: {
    screens: {
      Home: '',
      Profile: ':id/profile',
      Settings: ':id/blog',
    },
  },
};

function App() {
  return (
    <NavigationContainer linking={linking} fallback={<SplashScreen />}>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing Focus Event Listener in Function Component
DESCRIPTION: Demonstrates how to add a focus event listener using React.useEffect hook in a functional component with proper cleanup.

LANGUAGE: jsx
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Reorganizing Navigators for Simplified Options Management
DESCRIPTION: This snippet demonstrates an alternative approach to managing screen options by reorganizing the navigator structure. It shows how to use stack navigators inside tab navigator screens for more granular control over options.

LANGUAGE: jsx
CODE:
const FeedStackScreen = createNativeStackNavigator({
  screens: {
    Feed: FeedScreen,
    /* other screens */
  },
});

const ProfileStackScreen = createNativeStackNavigator({
  screens: {
    Profile: ProfileScreen,
    /* other screens */
  },
});

const HomeTabs = createBottomTabNavigator({
  screens: {
    Feed: FeedStackScreen,
    Profile: ProfileStackScreen,
  },
});

const RootStack = createNativeStackNavigator({
  screens: {
    Home: HomeTabs,
    Settings: SettingsScreen,
  },
});

LANGUAGE: jsx
CODE:
function FeedStackScreen() {
  return (
    <FeedStack.Navigator>
      <FeedStack.Screen name="Feed" component={FeedScreen} />
      {/* other screens */}
    </FeedStack.Navigator>
  );
}

function ProfileStackScreen() {
  return (
    <ProfileStack.Navigator>
      <ProfileStack.Screen name="Profile" component={ProfileScreen} />
      {/* other screens */}
    </ProfileStack.Navigator>
  );
}

function HomeTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={FeedStackScreen} />
      <Tab.Screen name="Profile" component={ProfileStackScreen} />
    </Tab.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <RootStack.Navigator>
        <RootStack.Screen name="Home" component={HomeTabs} />
        <RootStack.Screen name="Settings" component={SettingsScreen} />
      </RootStack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring TabNavigator and StackNavigator with Custom Rendering in React Navigation
DESCRIPTION: This snippet demonstrates how to configure a TabNavigator with a custom tab bar component and a StackNavigator with no header. It shows how to potentially create layout issues on iPhone X.

LANGUAGE: javascript
CODE:
const Tabs = TabNavigator({
  ...
}, {
  tabBarComponent: () => null,
});

export default StackNavigator({
  ...
}, {
  headerMode: 'none',
});

----------------------------------------

TITLE: Creating Navigator Instance with Screen Component
DESCRIPTION: Shows how to create a native stack navigator that contains Screen and Navigator properties.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator();

----------------------------------------

TITLE: Setting Screen Options for Groups in React Navigation
DESCRIPTION: Shows how to configure screen options for groups of screens using the screenOptions prop. Includes examples of styling headers and setting modal presentations.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator({
  groups: {
    App: {
      screenOptions: {
        headerStyle: {
          backgroundColor: '#FFB6C1',
        },
      },
      screens: {
        Home: ScreenWithButton('Home', 'Profile'),
        Profile: ScreenWithButton('Profile', 'Settings'),
      },
    },
    Modal: {
      screenOptions: {
        presentation: 'modal',
      },
      screens: {
        Settings: ScreenWithButton('Settings', 'Share'),
        Share: ScreenWithButton('Share'),
      },
    },
  },
});

----------------------------------------

TITLE: Customizing Tab Navigation Appearance in React Navigation
DESCRIPTION: This code snippet shows how to customize the appearance of tab navigation, including setting icons, colors, and positioning. It uses Ionicons for tab icons and configures various TabNavigator options.

LANGUAGE: JavaScript
CODE:
import Ionicons from 'react-native-vector-icons/Ionicons';
import { TabNavigator, TabBarBottom } from 'react-navigation';

export default TabNavigator(
  {
    Home: { screen: HomeScreen },
    Settings: { screen: SettingsScreen },
  },
  {
    navigationOptions: ({ navigation }) => ({
      tabBarIcon: ({ focused, tintColor }) => {
        const { routeName } = navigation.state;
        let iconName;
        if (routeName === 'Home') {
          iconName = `ios-information-circle${focused ? '' : '-outline'}`;
        } else if (routeName === 'Settings') {
          iconName = `ios-options${focused ? '' : '-outline'}`;
        }

        return <Ionicons name={iconName} size={25} color={tintColor} />;
      },
    }),
    tabBarOptions: {
      activeTintColor: 'tomato',
      inactiveTintColor: 'gray',
    },
    tabBarComponent: TabBarBottom,
    tabBarPosition: 'bottom',
    animationEnabled: false,
    swipeEnabled: false,
  }
);

----------------------------------------

TITLE: Configuring Android TabBarTop Options
DESCRIPTION: Example configuration for Android top tab bar styling including label styles, tab width and background color.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  labelStyle: {
    fontSize: 12,
  },
  tabStyle: {
    width: 100,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Creating Navigator with createNavigator Utility
DESCRIPTION: Example demonstrating the usage of createNavigator utility to combine a router and navigation view.

LANGUAGE: javascript
CODE:
const MyApp = createNavigator(MyRouter)(MyView);

----------------------------------------

TITLE: Setting up Navigators for Authentication Flow in React Navigation
DESCRIPTION: This snippet demonstrates how to set up StackNavigator and SwitchNavigator for implementing an authentication flow. It creates separate stacks for the main app and authentication screens, and uses SwitchNavigator to manage navigation between them.

LANGUAGE: javascript
CODE:
import { StackNavigator, SwitchNavigator } from 'react-navigation';

// Implementation of HomeScreen, OtherScreen, SignInScreen, AuthLoadingScreen
// goes here.

const AppStack = StackNavigator({ Home: HomeScreen, Other: OtherScreen });
const AuthStack = StackNavigator({ SignIn: SignInScreen });

export default SwitchNavigator(
  {
    AuthLoading: AuthLoadingScreen,
    App: AppStack,
    Auth: AuthStack,
  },
  {
    initialRouteName: 'AuthLoading',
  }
);

----------------------------------------

TITLE: Creating Stack Navigator with Custom Status Bar (React Navigation)
DESCRIPTION: This code creates a stack navigator with two screens that have different status bar configurations. The headerMode is set to 'none' to allow full control over the status bar appearance.

LANGUAGE: jsx
CODE:
export default createStackNavigator(
  {
    Screen1: {
      screen: Screen1,
    },
    Screen2: {
      screen: Screen2,
    },
  },
  {
    headerMode: 'none',
  }
);

----------------------------------------

TITLE: Customized Tab Navigation with Icons
DESCRIPTION: Example showing how to customize tab navigation with icons using Ionicons and custom colors for active and inactive states.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator
        screenOptions={({ route }) => ({
          tabBarIcon: ({ focused, color, size }) => {
            let iconName;

            if (route.name === 'Home') {
              iconName = focused
                ? 'ios-information-circle'
                : 'ios-information-circle-outline';
            } else if (route.name === 'Settings') {
              iconName = focused ? 'ios-list' : 'ios-list-outline';
            }

            return <Ionicons name={iconName} size={size} color={color} />;
          },
          tabBarActiveTintColor: 'tomato',
          tabBarInactiveTintColor: 'gray',
        })}
      >
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring Tab and Stack Navigators in React Navigation
DESCRIPTION: This snippet demonstrates how to set up a tab navigator with two tabs, each containing a stack navigator with multiple screens. It showcases the nested structure of navigation in a React Navigation app.

LANGUAGE: jsx
CODE:
function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="First">
          {() => (
            <SettingsStack.Navigator>
              <SettingsStack.Screen
                name="Settings"
                component={SettingsScreen}
              />
              <SettingsStack.Screen name="Profile" component={ProfileScreen} />
            </SettingsStack.Navigator>
          )}
        </Tab.Screen>
        <Tab.Screen name="Second">
          {() => (
            <HomeStack.Navigator>
              <HomeStack.Screen name="Home" component={HomeScreen} />
              <HomeStack.Screen name="Details" component={DetailsScreen} />
            </HomeStack.Navigator>
          )}
        </Tab.Screen>
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Runtime Screen Options Update in React Navigation
DESCRIPTION: Demonstrates how to update screen options at runtime using the navigation.setOptions method within a component.

LANGUAGE: javascript
CODE:
<Button
  title="Update options"
  onPress={() => navigation.setOptions({ title: 'Updated!' })}
/>

----------------------------------------

TITLE: Implementing TabActions.jumpTo in React Navigation (Dynamic Configuration)
DESCRIPTION: This snippet shows how to use TabActions.jumpTo in a React Navigation tab navigator with dynamic configuration. It demonstrates creating a jumpTo action and dispatching it on button press to navigate between tabs.

LANGUAGE: javascript
CODE:
function HomeScreen() {
  const navigation = useNavigation();
  const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home!</Text>
      <Button
        onPress={() => {
          navigation.dispatch(jumpToAction);
        }}
      >
        Jump to Profile
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Drawer Navigation in React Native
DESCRIPTION: A minimal example demonstrating how to set up drawer navigation with two screens (Home and Notifications) using React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, View } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { NavigationContainer } from '@react-navigation/native';

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        onPress={() => navigation.navigate('Notifications')}
        title="Go to notifications"
      />
    </View>
  );
}

function NotificationsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go back home" />
    </View>
  );
}

const Drawer = createDrawerNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator initialRouteName="Home">
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Notifications" component={NotificationsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Testing Navigation Event Reactions in React Navigation
DESCRIPTION: This test example shows how to test reactions to navigation events in a React Navigation stack navigator using Jest and React Native Testing Library.

LANGUAGE: javascript
CODE:
import { expect, jest, test } from '@jest/globals';
import { NavigationContainer } from '@react-navigation/native';
import { act, render, screen, userEvent } from '@testing-library/react-native';

import { MyStack } from './MyStack';

jest.useFakeTimers();

test('shows surprise text after navigating to surprise screen', async () => {
  const user = userEvent.setup();

  render(
    <NavigationContainer>
      <MyStack />
    </NavigationContainer>
  );

  await user.press(screen.getByLabelText('Click here!'));

  act(() => jest.runAllTimers());

  expect(screen.getByText('Surprise!')).toBeVisible();
});

----------------------------------------

TITLE: Handling 404 routes in dynamic navigation
DESCRIPTION: Example of how to configure a catch-all route for unmatched paths in dynamic navigation

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Home: {
      initialRouteName: 'Feed',
      screens: {
        Profile: 'users/:id',
        Settings: 'settings',
      },
    },
    NotFound: {
      path: '*',
    },
  },
};

----------------------------------------

TITLE: Using FocusAwareStatusBar in Tab Navigation Screens (React Native)
DESCRIPTION: This snippet demonstrates how to use the FocusAwareStatusBar component in screens within a tab or drawer navigator to ensure the correct status bar configuration is applied based on the focused screen.

LANGUAGE: jsx
CODE:
function Screen1() {
  const navigation = useNavigation();
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#6a51ae',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <FocusAwareStatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button onPress={() => navigation.navigate('Screen2')}>
        Next screen
      </Button>
    </View>
  );
}

function Screen2() {
  const navigation = useNavigation();
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#ecf0f1',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <FocusAwareStatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button onPress={() => navigation.navigate('Screen1')}>
        Next screen
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Navigating to the Same Screen Multiple Times in React Navigation
DESCRIPTION: Shows how to use navigation.push() to navigate to the same screen multiple times, creating a stack of identical screens. This is useful when passing unique data to each instance of the screen.

LANGUAGE: javascript
CODE:
function DetailsScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Button onPress={() => navigation.push('Details')}>
        Go to Details... again
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Adding a Right Header Button in React Navigation
DESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a React Navigation stack. It shows both static and dynamic configuration approaches.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        headerRight: () => (
          <Button onPress={() => alert('This is a button!')}>Info</Button>
        ),
      },
    },
  },
});

LANGUAGE: javascript
CODE:
function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{
          headerRight: () => (
            <Button onPress={() => alert('This is a button!')}>Info</Button>
          ),
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: CommonActions.preload Implementation
DESCRIPTION: Example of preloading a screen in the background before navigation using CommonActions.preload.

LANGUAGE: JavaScript
CODE:
navigation.dispatch(
  CommonActions.preload('Profile', { user: 'jane' })
);

----------------------------------------

TITLE: Example Navigation State in React Navigation
DESCRIPTION: This snippet shows an example of a navigation state with two routes. It demonstrates the structure used by the router's getStateForAction method.

LANGUAGE: javascript
CODE:
{
  index: 1,
  routes: [
    { key: 'A', routeName: 'Foo' },
    { key: 'B', routeName: 'Bar' },
  ],
}

----------------------------------------

TITLE: Basic React Navigation Stack Implementation
DESCRIPTION: Basic implementation of a stack navigator with a single HomeScreen component wrapped in NavigationContainer.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

function HomeScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
    </View>
  );
}

const Stack = createStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: CommonActions.navigate Implementation
DESCRIPTION: Examples showing how to navigate between screens using CommonActions.navigate with parameters and merge options.

LANGUAGE: JavaScript
CODE:
navigation.dispatch(
  CommonActions.navigate('Profile', { user: 'jane' })
);

----------------------------------------

TITLE: Defining a Custom Navigator with StackRouter in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom navigator component by assigning a static router property using StackRouter. This allows the component to be used as a screen in another navigator with the navigation logic defined by StackRouter.

LANGUAGE: javascript
CODE:
class MyNavigator extends React.Component {
  static router = StackRouter(routes, config);
  ...
}

----------------------------------------

TITLE: Custom Drawer Content Component
DESCRIPTION: Example of creating a custom drawer content component with SafeAreaView and ScrollView

LANGUAGE: javascript
CODE:
import SafeAreaView from 'react-native-safe-area-view';
import { DrawerItems } from 'react-navigation-drawer';

const CustomDrawerContentComponent = (props) => (
  <ScrollView>
    <SafeAreaView
      style={styles.container}
      forceInset={{ top: 'always', horizontal: 'never' }}
    >
      <DrawerItems {...props} />
    </SafeAreaView>
  </ScrollView>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

----------------------------------------

TITLE: Drawer Toggle Method
DESCRIPTION: Demonstrates how to toggle the drawer state using a single method call.

LANGUAGE: javascript
CODE:
this.props.navigation.toggleDrawer();

----------------------------------------

TITLE: Drawer Action Dispatching
DESCRIPTION: Shows how to directly dispatch drawer actions using the navigation prop, which is what the helper methods use internally.

LANGUAGE: javascript
CODE:
this.props.navigation.dispatch(DrawerActions.openDrawer());
this.props.navigation.dispatch(DrawerActions.closeDrawer());
this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Basic Tab Navigation Implementation
DESCRIPTION: Minimal example showing how to implement bottom tab navigation with home and settings screens using React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

function HomeScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Home!</Text>
    </View>
  );
}

function SettingsScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings!</Text>
    </View>
  );
}

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing GoToButton with useNavigation Hook in React Navigation
DESCRIPTION: This snippet shows how to use the useNavigation hook to access the navigation object within a component. This approach eliminates the need to pass the navigation prop explicitly.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function GoToButton({ screenName }) {
  const navigation = useNavigation();

  return (
    <Button
      title={`Go to ${screenName}`}
      onPress={() => navigation.navigate(screenName)}
    />
  );
}

----------------------------------------

TITLE: Delaying Effects with InteractionManager in React Navigation
DESCRIPTION: This snippet demonstrates how to use InteractionManager with useFocusEffect to delay expensive tasks until after animations or gestures have completed, improving performance.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    const task = InteractionManager.runAfterInteractions(() => {
      // Expensive task
    });

    return () => task.cancel();
  }, [])
);

----------------------------------------

TITLE: Android Deep Linking Manifest Configuration
DESCRIPTION: Configures AndroidManifest.xml to handle deep links by adding intent filters for the MainActivity.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Basic Drawer Navigator Setup (Static Configuration)
DESCRIPTION: Example of setting up a basic drawer navigator with static configuration using createDrawerNavigator.

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from '@react-navigation/drawer';

const MyDrawer = createDrawerNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Basic useNavigationState Usage - React Navigation
DESCRIPTION: Demonstrates the basic usage of useNavigationState hook to access the navigation state index.

LANGUAGE: javascript
CODE:
const index = useNavigationState((state) => state.index);

----------------------------------------

TITLE: Accessing Navigation State Index with useNavigationState in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useNavigationState hook to access the index from the navigation state. The selector function receives the full navigation state and returns a specific value.

LANGUAGE: javascript
CODE:
const index = useNavigationState((state) => state.index);

----------------------------------------

TITLE: Android Deep Linking Manifest Configuration
DESCRIPTION: Configures AndroidManifest.xml to handle deep links by adding intent filters for the MainActivity.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Implementing Safe Area Support with useSafeAreaInsets
DESCRIPTION: Example demonstrating proper implementation of safe area support using the useSafeAreaInsets hook from react-native-safe-area-context.

LANGUAGE: jsx
CODE:
function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingTop: insets.top,
        paddingBottom: insets.bottom,
        paddingLeft: insets.left,
        paddingRight: insets.right,
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Basic Tab View Implementation
DESCRIPTION: Basic example showing how to implement a tab view with two routes using react-native-tab-view. Demonstrates core configuration including navigation state, scene rendering, and layout handling.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, useWindowDimensions } from 'react-native';
import { TabView, SceneMap } from 'react-native-tab-view';

const FirstRoute = () => (
  <View style={{ flex: 1, backgroundColor: '#ff4081' }} />
);

const SecondRoute = () => (
  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />
);

const renderScene = SceneMap({
  first: FirstRoute,
  second: SecondRoute,
});

export default function TabViewExample() {
  const layout = useWindowDimensions();

  const [index, setIndex] = React.useState(0);
  const [routes] = React.useState([
    { key: 'first', title: 'First' },
    { key: 'second', title: 'Second' },
  ]);

  return (
    <TabView
      navigationState={{ index, routes }}
      renderScene={renderScene}
      onIndexChange={setIndex}
      initialLayout={{ width: layout.width }}
    />
  );
}

----------------------------------------

TITLE: Setting Params for the Current Route in React Navigation
DESCRIPTION: Illustrates how to use CommonActions.setParams to update parameters for the current route.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(CommonActions.setParams({ user: 'Wojtek' }));

----------------------------------------

TITLE: Pushing New Routes with StackActions in React Navigation
DESCRIPTION: Demonstrates using StackActions.push() to add a new route to the top of the navigation stack. Unlike navigate, push always adds a new route even if it already exists in the stack.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

const pushAction = StackActions.push('Profile', { user: 'Wojtek' });

navigation.dispatch(pushAction);

----------------------------------------

TITLE: Type Checking Navigation Prop in React Navigation with TypeScript
DESCRIPTION: This snippet demonstrates how to type check the navigation prop for a ProfileScreen component using NavigationStackProp. It includes type annotation for navigation params.

LANGUAGE: typescript
CODE:
import { NavigationStackProp } from 'react-navigation-stack';

type Props = {
  navigation: NavigationStackProp<{ userId: string }>;
};

class ProfileScreen extends React.Component<Props> {
  // ...
}

----------------------------------------

TITLE: Configuring Screen Options with Stack Navigator
DESCRIPTION: Demonstrates how to set basic screen options like title for different screens in a Stack Navigator.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Screen
    name="Home"
    component={HomeScreen}
    options={{ title: 'Awesome app' }}
  />
  <Stack.Screen
    name="Profile"
    component={ProfileScreen}
    options={{ title: 'My profile' }}
  />
</Stack.Navigator>

----------------------------------------

TITLE: Pushing New Routes with StackActions in React Navigation
DESCRIPTION: Demonstrates using StackActions.push() to add a new route to the top of the navigation stack. Unlike navigate, push always adds a new route even if it already exists in the stack.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

const pushAction = StackActions.push('Profile', { user: 'Wojtek' });

navigation.dispatch(pushAction);

----------------------------------------

TITLE: Using createAppContainer Props in React Native
DESCRIPTION: Shows how to use the onNavigationStateChange and uriPrefix props when rendering an AppContainer component in React Native.

LANGUAGE: javascript
CODE:
<AppContainer
  onNavigationStateChange={handleNavigationChange}
  uriPrefix="/app"
/>

----------------------------------------

TITLE: Running Website Production Build
DESCRIPTION: Command for running the React Navigation website in production mode with server rendering.

LANGUAGE: bash
CODE:
yarn run prod

----------------------------------------

TITLE: Dispatching Navigate Action in React Navigation
DESCRIPTION: Demonstrates how to create and dispatch a navigate action using NavigationActions. This action updates the current state with the result of a navigate action, allowing navigation to another route with optional params and sub-actions.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',

  params: {},

  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});

this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Implementing NavigationEvents Component in React Navigation
DESCRIPTION: Example showing how to use the NavigationEvents component to subscribe to navigation lifecycle events including willFocus, didFocus, willBlur, and didBlur. The component automatically handles subscription and cleanup of navigation events on mount and unmount.

LANGUAGE: jsx
CODE:
import React from 'react';
import { View } from 'react-native';
import { NavigationEvents } from 'react-navigation';

const MyScreen = () => (
  <View>
    <NavigationEvents
      onWillFocus={(payload) => console.log('will focus', payload)}
      onDidFocus={(payload) => console.log('did focus', payload)}
      onWillBlur={(payload) => console.log('will blur', payload)}
      onDidBlur={(payload) => console.log('did blur', payload)}
    />
    {/*
      Your view code
    */}
  </View>
);

export default MyScreen;

----------------------------------------

TITLE: Rendering Transitioner Component in React Navigation
DESCRIPTION: Example of how to use the Transitioner component within a custom navigation view in React Navigation. It demonstrates setting up the component with various props for configuring transitions and rendering.

LANGUAGE: jsx
CODE:
class MyNavView extends Component {
  ...
  render() {
    return (
      <Transitioner
        configureTransition={this._configureTransition}
        navigation={this.props.navigation}
        render={this._render}
        onTransitionStart={this.onTransitionStart}
        onTransitionEnd={this.onTransitionEnd}
      />
    );
}

----------------------------------------

TITLE: Creating Basic Navigator - Static Configuration
DESCRIPTION: Example of creating a native stack navigator using static configuration with createNativeStackNavigator.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: System Theme Integration with React Navigation
DESCRIPTION: Demonstrates how to integrate system color scheme preferences with React Navigation themes using useColorScheme hook.

LANGUAGE: javascript
CODE:
import { useColorScheme } from 'react-native';
import {
  NavigationContainer,
  DefaultTheme,
  DarkTheme,
} from '@react-navigation/native';

export default () => {
  const scheme = useColorScheme();

  return (
    <NavigationContainer theme={scheme === 'dark' ? DarkTheme : DefaultTheme}>
      {/* content */}
    </NavigationContainer>
  );
};

----------------------------------------

TITLE: Using listeners Prop on Screen Component in React Navigation
DESCRIPTION: This snippet demonstrates how to add event listeners using the listeners prop on a Screen component. It shows both a static object and a callback function approach for defining listeners.

LANGUAGE: jsx
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={({ navigation, route }) => ({
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();

      // Do something with the `navigation` object
      navigation.navigate('AnotherPlace');
    },
  })}
/>

----------------------------------------

TITLE: Configuring Screen Options for Groups (Dynamic)
DESCRIPTION: Shows how to set screen options for a group using dynamic configuration with the Group component. This method allows for more flexible option setting at runtime.

LANGUAGE: jsx
CODE:
<Stack.Group
  screenOptions={{
    presentation: 'modal',
  }}
>
  {/* screens */}
</Stack.Group>

----------------------------------------

TITLE: Custom Scroll Offset Implementation - React Navigation
DESCRIPTION: Demonstrates how to customize the scroll behavior by providing a custom scrollToTop implementation that includes an offset. The example shows scrolling to a specific y-coordinate (100) instead of the default top position.

LANGUAGE: javascript
CODE:
function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(
    React.useRef({
      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),
    })
  );

  return (
    <ScrollView ref={ref}>
      {/* content */}
    </ScrollView>
  );
}

----------------------------------------

TITLE: Using Navigation Listeners in React Navigation
DESCRIPTION: This example shows how to use the useEffect hook to add a focus listener to a screen component. It demonstrates how to subscribe to navigation events and perform actions when a screen comes into focus.

LANGUAGE: js
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // Screen was focused
      // Do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Using Link Component in React Navigation
DESCRIPTION: Example demonstrates how to import and use the Link component from React Navigation to create a navigation link to a profile screen. The component accepts screen name and params as props.

LANGUAGE: javascript
CODE:
import { Link } from '@react-navigation/native';

// ...

function Home() {
  return (
    <Link screen="Profile" params={{ id: 'jane' }}>
      Go to Jane's profile
    </Link>
  );
}

----------------------------------------

TITLE: Implementing Focus Event Listener in Class Component
DESCRIPTION: Shows how to add a focus event listener in a class component using componentDidMount and componentWillUnmount lifecycle methods.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  componentDidMount() {
    this._unsubscribe = navigation.addListener('focus', () => {
      // do something
    });
  }

  componentWillUnmount() {
    this._unsubscribe();
  }

  render() {
    // Content of the component
  }
}

----------------------------------------

TITLE: Creating Native Bottom Tabs Navigator in React Navigation
DESCRIPTION: Shows how to set up a basic Native Bottom Tabs Navigator using react-native-bottom-tabs and React Navigation, including screen configuration and icon setup.

LANGUAGE: tsx
CODE:
import { createNativeBottomTabNavigator } from '@bottom-tabs/react-navigation';

const Tabs = createNativeBottomTabNavigator();

function NativeBottomTabs() {
  return (
    <Tabs.Navigator>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),
        }}
      />
      <Tabs.Screen
        name="explore"
        options={{
          title: 'Explore',
          tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),
        }}
      />
    </Tabs.Navigator>
  );
}

----------------------------------------

TITLE: Dynamic Header Title with Route Params
DESCRIPTION: Shows how to use route parameters to dynamically set the header title using a function in options prop.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
      <Stack.Screen
        name="Profile"
        component={ProfileScreen}
        options={({ route }) => ({ title: route.params.name })}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Adding Event Listeners in Class Components with React Navigation
DESCRIPTION: This snippet demonstrates how to add and remove event listeners in a React class component using componentDidMount and componentWillUnmount lifecycle methods.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  componentDidMount() {
    this._unsubscribe = navigation.addListener('focus', () => {
      // do something
    });
  }

  componentWillUnmount() {
    this._unsubscribe();
  }

  render() {
    // Content of the component
  }
}

----------------------------------------

TITLE: Installing React Navigation 7.0 RC Packages
DESCRIPTION: Commands to install the release candidate versions of React Navigation 7.0 core and bottom tabs packages using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/native@next @react-navigation/bottom-tabs@next

----------------------------------------

TITLE: Incorrect Usage of navigation.getState() in React Navigation
DESCRIPTION: This snippet demonstrates an incorrect way of using navigation.getState() to access the number of routes. This approach won't trigger re-renders when the navigation state changes.

LANGUAGE: javascript
CODE:
function Profile() {
  const routesLength = navigation.getState().routes.length; // Don't do this

  return <Text>Number of routes: {routesLength}</Text>;
}

----------------------------------------

TITLE: Custom Navigation Action with LinkButton
DESCRIPTION: Example of using the LinkButton component with a custom navigation action to replace the current screen instead of pushing a new one.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

// ...

function Home() {
  return (
    <LinkButton
      to={{ screen: 'Profile', params: { id: 'jane' } }}
      action={StackActions.replace('Profile', { id: 'jane' })}
    >
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: Specifying Type for Root Navigator in TypeScript
DESCRIPTION: Example of how to specify a type for the root navigator when using TypeScript in React Navigation 6.

LANGUAGE: typescript
CODE:
declare global {
  namespace ReactNavigation {
    interface RootParamList extends RootStackParamList {}
  }
}

----------------------------------------

TITLE: Extending Stack Navigator in React Navigation
DESCRIPTION: Demonstrates how to extend an existing Stack Navigator by creating a custom navigator component that inherits the router from the Stack Navigator.

LANGUAGE: javascript
CODE:
const MyStack = createStackNavigator({ ... });

class CustomNavigator extends React.Component {
  static router = MyStack.router;
  render() {
    const { navigation } = this.props;

    return <MyStack navigation={navigation} />;
  }
}

----------------------------------------

TITLE: Navigation Event Subscription Example
DESCRIPTION: Example showing how to subscribe to navigation lifecycle events in React Navigation. The four main events are willFocus, willBlur, didFocus, and didBlur. These can be accessed through the navigation prop.

LANGUAGE: javascript
CODE:
this.props.navigation.addListener('willFocus', payload => {
  // Called when screen is about to focus
});

this.props.navigation.addListener('willBlur', payload => {
  // Called when screen is about to blur
});

this.props.navigation.addListener('didFocus', payload => {
  // Called when screen has focused
});

this.props.navigation.addListener('didBlur', payload => {
  // Called when screen has blurred
});

----------------------------------------

TITLE: Basic Tab Navigation Implementation
DESCRIPTION: Minimal example of implementing bottom tab navigation with Home and Settings screens using React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

function HomeScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Home!</Text>
    </View>
  );
}

function SettingsScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings!</Text>
    </View>
  );
}

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Setting Parent Screen Options Based on Child Navigator State
DESCRIPTION: Implementation of dynamic header titles in a stack navigator based on the active tab in a nested tab navigator using getFocusedRouteNameFromRoute helper.

LANGUAGE: javascript
CODE:
function getHeaderTitle(route) {
  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';

  switch (routeName) {
    case 'Feed':
      return 'News feed';
    case 'Profile':
      return 'My profile';
    case 'Account':
      return 'My account';
  }
}

----------------------------------------

TITLE: Implementing Custom Android Back Button Behavior in React Navigation
DESCRIPTION: This code snippet demonstrates how to implement custom Android back button handling in a React Navigation screen. It uses the useFocusEffect hook and BackHandler API to control back button behavior based on a 'selection mode' state.

LANGUAGE: javascript
CODE:
function ScreenWithCustomBackBehavior() {
  // ...

  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = () => {
        if (isSelectionModeEnabled()) {
          disableSelectionMode();
          return true;
        } else {
          return false;
        }
      };

      const subscription = BackHandler.addEventListener(
        'hardwareBackPress',
        onBackPress
      );

      return () => subscription.remove();
    }, [isSelectionModeEnabled, disableSelectionMode])
  );

  // ...
}

----------------------------------------

TITLE: Interaction Manager with useFocusEffect
DESCRIPTION: Demonstrates how to delay effect execution until navigation transitions are complete using InteractionManager to improve animation performance.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    const task = InteractionManager.runAfterInteractions(() => {
      // Expensive task
    });

    return () => task.cancel();
  }, [])
);

----------------------------------------

TITLE: Accessing Screen Options from ServerContainer Ref
DESCRIPTION: This snippet shows how to access the options for the current screen after rendering the app using the ref attached to ServerContainer.

LANGUAGE: javascript
CODE:
const options = ref.current.getCurrentOptions();

----------------------------------------

TITLE: Setting Basic Header Title in React Navigation
DESCRIPTION: Demonstrates how to set a basic header title for a screen using the options prop in Stack.Navigator.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Implementing Sign In Screen in React Native
DESCRIPTION: Creates a basic sign-in screen with username and password inputs, utilizing the AuthContext for authentication.

LANGUAGE: javascript
CODE:
function SignInScreen() {
  const [username, setUsername] = React.useState('');
  const [password, setPassword] = React.useState('');

  const { signIn } = React.useContext(AuthContext);

  return (
    <View>
      <TextInput
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button onPress={() => signIn({ username, password })}>Sign in</Button>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Screen Tracking with React Navigation and Firebase Analytics
DESCRIPTION: This code demonstrates how to track screen views in a React Navigation app using Firebase Analytics. It includes a helper function to extract the current route name and sets up navigation state change tracking to log screen views. The implementation uses the @react-native-firebase/analytics package but can be modified for other analytics SDKs.

LANGUAGE: javascript
CODE:
import { createAppContainer, createStackNavigator } from 'react-navigation';
import analytics from '@react-native-firebase/analytics';

// gets the current screen from navigation state
function getActiveRouteName(navigationState) {
  if (!navigationState) {
    return null;
  }
  const route = navigationState.routes[navigationState.index];
  // dive into nested navigators
  if (route.routes) {
    return getActiveRouteName(route);
  }
  return route.routeName;
}

const AppNavigator = createStackNavigator(AppRouteConfigs);
const AppContainer = createAppContainer(AppNavigator);

export default () => (
  <AppContainer
    onNavigationStateChange={async (prevState, currentState) => {
      const currentRouteName = getActiveRouteName(currentState);
      const previousRouteName = getActiveRouteName(prevState);

      if (previousRouteName !== currentRouteName) {
        // the line below uses the @react-native-firebase/analytics tracker
        // change the tracker here to use other Mobile analytics SDK.
        await analytics().logScreenView({
          screen_name: currentRouteName,
          screen_class: currentRouteName,
        });
      }
    }}
  />
);

----------------------------------------

TITLE: Creating Stack Navigator Instance
DESCRIPTION: Demonstrates how to create a Stack Navigator instance that contains Screen and Navigator properties.

LANGUAGE: javascript
CODE:
const Stack = createStackNavigator();

----------------------------------------

TITLE: Handling Asynchronous Effects with useFocusEffect in React Navigation
DESCRIPTION: This example shows how to properly handle asynchronous effects using useFocusEffect, ensuring that state updates are only performed if the component is still active to avoid race conditions.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    let isActive = true;

    const fetchUser = async () => {
      try {
        const user = await API.fetch({ userId });

        if (isActive) {
          setUser(user);
        }
      } catch (e) {
        // Handle error
      }
    };

    fetchUser();

    return () => {
      isActive = false;
    };
  }, [userId])
);

----------------------------------------

TITLE: Safe Area Implementation with React Navigation
DESCRIPTION: Example showing proper implementation of safe area handling using useSafeAreaInsets hook from react-native-safe-area-context. Demonstrates how to properly apply insets to avoid content being hidden by device UI elements.

LANGUAGE: jsx
CODE:
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',

        // Paddings to handle safe area
        paddingTop: insets.top,
        paddingBottom: insets.bottom,
        paddingLeft: insets.left,
        paddingRight: insets.right,
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

export default function App() {
  return (
    <SafeAreaProvider>
      <NavigationContainer>{/*(...) */}</NavigationContainer>
    </SafeAreaProvider>
  );
}

----------------------------------------

TITLE: Using Group Component for Common Options
DESCRIPTION: Example of using the new Group component to apply common options to multiple screens.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Group
    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}
  >
    <Stack.Screen name="Home" component={HomeScreen} />
    <Stack.Screen name="Profile" component={ProfileScreen} />
  </Stack.Group>
  <Stack.Group screenOptions={{ presentation: 'modal' }}>
    <Stack.Screen name="Search" component={SearchScreen} />
    <Stack.Screen name="Share" component={ShareScreen} />
  </Stack.Group>
</Stack.Navigator>

----------------------------------------

TITLE: Safe Area Implementation with React Navigation
DESCRIPTION: Example showing proper implementation of safe area handling using useSafeAreaInsets hook from react-native-safe-area-context. Demonstrates how to properly apply insets to avoid content being hidden by device UI elements.

LANGUAGE: jsx
CODE:
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',

        // Paddings to handle safe area
        paddingTop: insets.top,
        paddingBottom: insets.bottom,
        paddingLeft: insets.left,
        paddingRight: insets.right,
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

export default function App() {
  return (
    <SafeAreaProvider>
      <NavigationContainer>{/*(...) */}</NavigationContainer>
    </SafeAreaProvider>
  );
}

----------------------------------------

TITLE: Adding Badges to Tab Icons in React Navigation
DESCRIPTION: This snippet shows how to add badges to tab icons in a bottom tab navigator using the tabBarBadge option. It sets a badge with the value '3' on the Home tab.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { createStaticNavigation } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

function HomeScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Home!</Text>
    </View>
  );
}

function SettingsScreen() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Settings!</Text>
    </View>
  );
}

const RootTabs = createBottomTabNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        tabBarBadge: 3,
      },
    },
    Settings: SettingsScreen,
  },
});

const Navigation = createStaticNavigation(RootTabs);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Server Rendering with Dynamic Page Metadata
DESCRIPTION: Demonstrates how to set dynamic page metadata (like title) based on the current screen's options using a ref with ServerContainer.

LANGUAGE: javascript
CODE:
app.use(async (ctx) => {
  const location = new URL(ctx.url, 'https://example.org/');

  const { element, getStyleElement } = AppRegistry.getApplication('App');

  const ref = React.createRef<ServerContainerRef>();

  const html = ReactDOMServer.renderToString(
    <ServerContainer
      ref={ref}
      location={location}
    >
      {element}
    </ServerContainer>
  );

  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());

  const options = ref.current?.getCurrentOptions();

  const document = `
    <!DOCTYPE html>
    <html style="height: 100%">
    <meta charset="utf-8">
    <meta httpEquiv="X-UA-Compatible" content="IE=edge">
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"
    >
    ${css}
    <title>${options.title}</title>
    <body style="min-height: 100%">
    <div id="root" style="display: flex; min-height: 100vh">
    ${html}
    </div>
`;

  ctx.body = document;
});

----------------------------------------

TITLE: Using Connected Component in Navigation Options in JavaScript
DESCRIPTION: This snippet illustrates how to use a Redux-connected component in the navigation options. It shows how to set a connected component as the title of a screen.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Test"
  component={TestScreen}
  options={{ title: () => <CounterContainer /> }}
/>

----------------------------------------

TITLE: Creating a Connected Counter Component in JavaScript
DESCRIPTION: This snippet shows how to create a Redux-connected Counter component. It demonstrates connecting a component to the Redux store and accessing state data.

LANGUAGE: javascript
CODE:
function Counter({ value }) {
  return <Text>Count: {value}</Text>;
}

const CounterContainer = connect((state) => ({ value: state.count }))(Counter);

----------------------------------------

TITLE: Listening to Parent Navigator Events in React Navigation
DESCRIPTION: This snippet shows how to listen to events from a parent navigator in a nested navigator setup using the getParent method.

LANGUAGE: javascript
CODE:
const unsubscribe = navigation
  .getParent('MyTabs')
  .addListener('tabPress', (e) => {
    // Do something
  });

----------------------------------------

TITLE: Styling Headers in React Navigation
DESCRIPTION: Demonstrates header styling options including background color, tint color, and title text styling.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
    headerStyle: {
      backgroundColor: '#f4511e',
    },
    headerTintColor: '#fff',
    headerTitleStyle: {
      fontWeight: 'bold',
    },
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Configuring Screen Options via Screen Props in React Navigation
DESCRIPTION: Demonstrates how to configure individual screen options using the options prop on Stack.Screen components. Shows setting basic title options for different screens in a stack navigator.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Screen
    name="Home"
    component={HomeScreen}
    options={{ title: 'Awesome app' }}
  />
  <Stack.Screen
    name="Profile"
    component={ProfileScreen}
    options={{ title: 'My profile' }}
  />
</Stack.Navigator>

----------------------------------------

TITLE: Customizing Stack Navigator Animations
DESCRIPTION: Example of how to customize the transition animation for a screen in the Stack Navigator.

LANGUAGE: jsx
CODE:
import { CardStyleInterpolators } from '@react-navigation/stack';

// ...

<Stack.Screen
  name="Profile"
  component={Profile}
  options={{
    title: 'Profile',
    cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,
  }}
/>

----------------------------------------

TITLE: Pushing a New Route with StackActions in React Navigation
DESCRIPTION: Shows how to use the push action from StackActions to add a new route on top of the stack and navigate to it. This action always adds a new route, even if it already exists in the stack.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

const pushAction = StackActions.push('Profile', { user: 'Wojtek' });

navigation.dispatch(pushAction);

----------------------------------------

TITLE: Configuring Screen Layout for Groups (Static)
DESCRIPTION: Demonstrates how to define a custom screen layout for a group using static configuration. This allows wrapping all screens in a group with common components like error boundaries or loading indicators.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  groups: {
    Modal: {
      screenLayout: ({ children }) => (
        <ErrorBoundary>
          <React.Suspense
            fallback={
              <View style={styles.fallback}>
                <Text style={styles.text}>Loading…</Text>
              </View>
            }
          >
            {children}
          </React.Suspense>
        </ErrorBoundary>
      ),
      screens: {
        /* screens */
      },
    },
  },
});

----------------------------------------

TITLE: Implementing useScrollToTop with Custom Scroll Offset in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useScrollToTop hook with a custom scroll offset in React Navigation. It wraps the ref in an object with a custom scrollToTop method to provide the desired offset.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { ScrollView } from 'react-native';
import { useScrollToTop } from '@react-navigation/native';

function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(
    React.useRef({
      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),
    })
  );

  return <ScrollView ref={ref}>{/* content */}</ScrollView>;
}

----------------------------------------

TITLE: Using LinkButton Component for Navigation
DESCRIPTION: Demonstrates how to use the custom LinkButton component to navigate to a specific screen with parameters.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <LinkButton screen="Profile" params={{ id: 'jane' }}>
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: SignIn Screen Component Implementation
DESCRIPTION: Example implementation of a sign-in screen component with username and password inputs.

LANGUAGE: jsx
CODE:
function SignInScreen() {
  const [username, setUsername] = React.useState('');
  const [password, setPassword] = React.useState('');

  const { signIn } = React.useContext(AuthContext);

  return (
    <View>
      <TextInput
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Sign in" onPress={() => signIn({ username, password })} />
    </View>
  );
}

----------------------------------------

TITLE: Implementing Custom Tab Router in React Navigation
DESCRIPTION: Example implementation of a custom tab router with basic navigation state management and action handling. Includes methods for initializing state, rehydrating state, handling route name changes, and processing navigation actions.

LANGUAGE: javascript
CODE:
const router = {
  type: 'tab',

  getInitialState({ routeNames, routeParamList }) {
    const index =
      options.initialRouteName === undefined
        ? 0
        : routeNames.indexOf(options.initialRouteName);

    return {
      stale: false,
      type: 'tab',
      key: shortid(),
      index,
      routeNames,
      routes: routeNames.map(name => ({
        name,
        key: name,
        params: routeParamList[name],
      })),
    };
  },

  getRehydratedState(partialState, { routeNames, routeParamList }) {
    const state = partialState;

    if (state.stale === false) {
      return state as NavigationState;
    }

    const routes = state.routes
      .filter(route => routeNames.includes(route.name))
      .map(
        route =>
          ({
            ...route,
            key: route.key || `${route.name}-${shortid()}`,
            params:
              routeParamList[route.name] !== undefined
                ? {
                    ...routeParamList[route.name],
                    ...route.params,
                  }
                : route.params,
          } as Route<string>)
      );

    return {
      stale: false,
      type: 'tab',
      key: shortid(),
      index:
        typeof state.index === 'number' && state.index < routes.length
          ? state.index
          : 0,
      routeNames,
      routes,
    };
  },

  getStateForRouteNamesChange(state, { routeNames }) {
    const routes = state.routes.filter(route =>
      routeNames.includes(route.name)
    );

    return {
      ...state,
      routeNames,
      routes,
      index: Math.min(state.index, routes.length - 1),
    };
  },

  getStateForRouteFocus(state, key) {
    const index = state.routes.findIndex(r => r.key === key);

    if (index === -1 || index === state.index) {
      return state;
    }

    return { ...state, index };
  },

  getStateForAction(state, action) {
    switch (action.type) {
      case 'NAVIGATE': {
        const index = state.routes.findIndex(
          route => route.name === action.payload.name
        );

        if (index === -1) {
          return null;
        }

        return { ...state, index };
      }

      default:
        return BaseRouter.getStateForAction(state, action);
    }
  },

  shouldActionChangeFocus() {
    return false;
  },
};

----------------------------------------

TITLE: Static Navigation Container Example
DESCRIPTION: Example showing how to use NavigationContainer with static configuration using createStaticNavigation

LANGUAGE: jsx
CODE:
import { createStaticNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator({
  screens: {
    /* ... */
  },
});

const Navigation = createStaticNavigation(Stack);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Combining Navigation Props in React Navigation
DESCRIPTION: This snippet demonstrates how to combine navigation props from multiple navigators using the CompositeScreenProps type.

LANGUAGE: ts
CODE:
import type { CompositeScreenProps } from '@react-navigation/native';
import type { BottomTabScreenProps } from '@react-navigation/bottom-tabs';
import type { StackScreenProps } from '@react-navigation/stack';

type ProfileScreenProps = CompositeScreenProps<
  BottomTabScreenProps<TabParamList, 'Profile'>,
  StackScreenProps<StackParamList>
>;

----------------------------------------

TITLE: Basic Material Bottom Tabs Implementation
DESCRIPTION: Minimal example showing how to create a material bottom tab navigator with two screens.

LANGUAGE: javascript
CODE:
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';

const Tab = createMaterialBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Customizing Header in Stack Navigator
DESCRIPTION: Example of customizing the header component in a stack navigator using the header option.

LANGUAGE: js
CODE:
header: ({ scene, previous, navigation }) => {
  const { options } = scene.descriptor;
  const title =
    options.headerTitle !== undefined
      ? options.headerTitle
      : options.title !== undefined
        ? options.title
        : scene.route.routeName;

  return (
    <MyHeader
      title={title}
      leftButton={
        previous ? <MyBackButton onPress={navigation.goBack} /> : undefined
      }
      style={options.headerStyle}
    />
  );
};

----------------------------------------

TITLE: Accessing Full Navigation State with useNavigationState in React Navigation
DESCRIPTION: This example shows how to use useNavigationState to access the entire navigation state object. This approach should be used carefully to avoid unnecessary re-renders.

LANGUAGE: javascript
CODE:
const state = useNavigationState((state) => state);

----------------------------------------

TITLE: Adding Basic Navigation Event Listener
DESCRIPTION: Example of adding a tab press event listener using navigation.addListener() method. Shows how to prevent default navigation behavior.

LANGUAGE: javascript
CODE:
const unsubscribe = navigation.addListener('tabPress', (e) => {
  // Prevent default action
  e.preventDefault();
});

----------------------------------------

TITLE: Toggling Drawer in React Navigation
DESCRIPTION: Illustrates how to use the toggleDrawer action to toggle the drawer pane open or closed in a React Navigation drawer navigator.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Toggling Drawer in React Navigation
DESCRIPTION: Illustrates how to use the toggleDrawer action to toggle the drawer pane open or closed in a React Navigation drawer navigator.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Configuring Screen Components in React Navigation
DESCRIPTION: This code snippet illustrates how to define and configure screen components within a Stack Navigator. It shows the setup for two screens: Home and Details.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator();

const StackNavigator = (
  <Stack.Navigator>
    <Stack.Screen
      name="Home"
      component={HomeScreen} // <----
    />
    <Stack.Screen
      name="Details"
      component={DetailsScreen} // <----
    />
  </Stack.Navigator>
);

----------------------------------------

TITLE: Overriding Package Version with Yarn Resolutions
DESCRIPTION: JSON configuration to override a package version using yarn resolutions in package.json.

LANGUAGE: json
CODE:
"resolutions": {
  "react-native-safe-area-context": "<version you want to use>"
}

----------------------------------------

TITLE: Configuring Tab Bar Options - Styling Example
DESCRIPTION: Example showing how to customize tab bar appearance including active/inactive colors, label styles, and background color.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  activeTintColor: '#e91e63',
  labelStyle: {
    fontSize: 12,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Custom Tab Bar Implementation
DESCRIPTION: Example of implementing a custom tab bar component with animation and accessibility features

LANGUAGE: javascript
CODE:
function MyTabBar({ state, descriptors, navigation, position }) {
  const { colors } = useTheme();
  const { buildHref } = useLinkBuilder();

  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label =
          options.tabBarLabel !== undefined
            ? options.tabBarLabel
            : options.title !== undefined
              ? options.title
              : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name, route.params);
          }
        };

        return (
          <TouchableOpacity
            onPress={onPress}
            style={{ flex: 1 }}
          >
            <Animated.Text style={{ opacity, color: colors.text }}>
              {label}
            </Animated.Text>
          </TouchableOpacity>
        );
      })}
    </View>
  );
}

----------------------------------------

TITLE: Using useIsFocused Hook in Functional Component
DESCRIPTION: Demonstrates how to implement the useIsFocused hook in a functional React component to conditionally render content based on screen focus state.

LANGUAGE: javascript
CODE:
import { useIsFocused } from '@react-navigation/native';

// ...

function Profile() {
  const isFocused = useIsFocused();

  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;
}

----------------------------------------

TITLE: Configuring linking for static navigation
DESCRIPTION: Example of how to configure the linking prop for static navigation using createStaticNavigation

LANGUAGE: javascript
CODE:
import { createStaticNavigation } from '@react-navigation/native';

const linking = {
  enabled: 'auto' /* Automatically generate paths for all screens */,
  prefixes: [
    /* your linking prefixes */
  ],
};

function App() {
  return (
    <Navigation
      linking={linking}
      fallback={<Text>Loading...</Text>}
    />
  );
}

const Navigation = createStaticNavigation(RootStack);

----------------------------------------

TITLE: Adding a Button to Header in React Navigation
DESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a React Navigation stack navigator. It uses the options prop to define a custom header title and a button with an onPress handler.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{
          headerTitle: (props) => <LogoTitle {...props} />,
          headerRight: () => (
            <Button
              onPress={() => alert('This is a button!')}
              title="Info"
              color="#fff"
            />
          ),
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Using useIsFocused Hook in Functional Component
DESCRIPTION: Demonstrates how to implement the useIsFocused hook in a functional React component to conditionally render content based on screen focus state.

LANGUAGE: javascript
CODE:
import { useIsFocused } from '@react-navigation/native';

// ...

function Profile() {
  const isFocused = useIsFocused();

  return <Text>{isFocused ? 'focused' : 'unfocused'}</Text>;
}

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: Example of using the reset method to replace the entire navigation state with a new state.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Profile' }],
});

----------------------------------------

TITLE: Navigator Layout Configuration
DESCRIPTION: Examples of customizing navigator layout with additional UI components in both static and dynamic configurations.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  layout: ({ children, state, descriptors, navigation }) => (
    <View style={styles.container}>
      <Breadcrumbs
        state={state}
        descriptors={descriptors}
        navigation={navigation}
      />
      {children}
    </View>
  ),
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

LANGUAGE: jsx
CODE:
function MyStack() {
  return (
    <Stack.Navigator
      layout={({ children, state, descriptors, navigation }) => (
        <View style={styles.container}>
          <Breadcrumbs
            state={state}
            descriptors={descriptors}
            navigation={navigation}
          />
          {children}
        </View>
      )}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Customized Tab Navigation with Icons
DESCRIPTION: Implementation of bottom tab navigation with custom icons and colors using Ionicons.

LANGUAGE: javascript
CODE:
import Ionicons from 'react-native-vector-icons/Ionicons';

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator
        screenOptions={({ route }) => ({
          tabBarIcon: ({ focused, color, size }) => {
            let iconName;

            if (route.name === 'Home') {
              iconName = focused
                ? 'ios-information-circle'
                : 'ios-information-circle-outline';
            } else if (route.name === 'Settings') {
              iconName = focused ? 'ios-list-box' : 'ios-list';
            }

            return <Ionicons name={iconName} size={size} color={color} />;
          },
        })}
        tabBarOptions={{
          activeTintColor: 'tomato',
          inactiveTintColor: 'gray',
        }}
      >
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Drawer Navigation Control Methods
DESCRIPTION: Implementation of drawer control methods including open, close, and toggle functionality. Shows how to use navigation methods and dispatch actions to control the drawer state.

LANGUAGE: javascript
CODE:
import { useNavigation, DrawerActions } from '@react-navigation/native';

// Using navigation methods
navigation.openDrawer();
navigation.closeDrawer();
navigation.toggleDrawer();

// Using dispatch actions
navigation.dispatch(DrawerActions.openDrawer());
navigation.dispatch(DrawerActions.closeDrawer());
navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Using ServerContainer with Koa for Server-Side Rendering
DESCRIPTION: This example demonstrates how to use ServerContainer with Koa to render a React Navigation app on the server, using the request path and search for the location prop.

LANGUAGE: javascript
CODE:
app.use(async (ctx) => {
  const html = ReactDOMServer.renderToString(
    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>
      <App />
    </ServerContainer>
  );

  ctx.body = html;
});

----------------------------------------

TITLE: Opening Drawer in React Navigation
DESCRIPTION: Demonstrates how to use the openDrawer action to open the drawer pane in a React Navigation drawer navigator.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.openDrawer());

----------------------------------------

TITLE: Customizing Header Styles in React Navigation
DESCRIPTION: Shows how to customize header styles including background color, tint color, and title style in React Navigation.

LANGUAGE: jsx
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        title: 'My home',
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      },
    },
  },
});

----------------------------------------

TITLE: CommonActions.setParams Implementation
DESCRIPTION: Shows how to update route parameters using CommonActions.setParams with source route specification.

LANGUAGE: JavaScript
CODE:
navigation.dispatch({
  ...CommonActions.setParams({ user: 'Wojtek' }),
  source: route.key,
});

----------------------------------------

TITLE: Tab Navigation with Nested Stack Navigation
DESCRIPTION: Implements tab navigation with stack navigation nested within each tab, allowing for deeper navigation hierarchies.

LANGUAGE: jsx
CODE:
import { createAppContainer } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack';
import { createBottomTabNavigator } from 'react-navigation-tabs';

const HomeStack = createStackNavigator({
  Home: HomeScreen,
  Details: DetailsScreen,
});

const SettingsStack = createStackNavigator({
  Settings: SettingsScreen,
  Details: DetailsScreen,
});

export default createAppContainer(
  createBottomTabNavigator(
    {
      Home: HomeStack,
      Settings: SettingsStack,
    },
    {
      /* Other configuration remains unchanged */
    }
  )
);

----------------------------------------

TITLE: Adding navigation event listeners in React Navigation
DESCRIPTION: Demonstration of how to add focus and blur event listeners to a screen.

LANGUAGE: jsx
CODE:
React.useEffect(
  () => navigation.addListener('focus', () => alert('Screen was focused')),
  [navigation]
);

React.useEffect(
  () => navigation.addListener('blur', () => alert('Screen was unfocused')),
  [navigation]
);

----------------------------------------

TITLE: Configuring MainActivity in Android (Java)
DESCRIPTION: Required Android configuration for react-native-screens in Java MainActivity file.

LANGUAGE: java
CODE:
public class MainActivity extends ReactActivity {
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(null);
  }
}

----------------------------------------

TITLE: Updating Tab Badge Dynamically in React Navigation
DESCRIPTION: This snippet demonstrates how to update a tab badge dynamically within a screen component using the setOptions method. It updates the badge count based on the unreadMessagesCount variable.

LANGUAGE: javascript
CODE:
const navigation = useNavigation();

React.useEffect(() => {
  navigation.setOptions({
    tabBarBadge: unreadMessagesCount,
  });
}, [navigation, unreadMessagesCount]);

----------------------------------------

TITLE: Reorganized Navigator Structure
DESCRIPTION: Shows an alternative navigator organization with stack navigators inside tab screens for better control over navigation options.

LANGUAGE: javascript
CODE:
const FeedStack = createNativeStackNavigator();

function FeedStackScreen() {
  return (
    <FeedStack.Navigator>
      <FeedStack.Screen name="Feed" component={FeedScreen} />
    </FeedStack.Navigator>
  );
}

const ProfileStack = createNativeStackNavigator();

function ProfileStackScreen() {
  return (
    <ProfileStack.Navigator>
      <ProfileStack.Screen name="Profile" component={ProfileScreen} />
    </ProfileStack.Navigator>
  );
}

const Tab = createBottomTabNavigator();

function HomeTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={FeedStackScreen} />
      <Tab.Screen name="Profile" component={ProfileStackScreen} />
    </Tab.Navigator>
  );
}

const RootStack = createNativeStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <RootStack.Navigator>
        <RootStack.Screen name="Home" component={HomeTabs} />
        <RootStack.Screen name="Settings" component={SettingsScreen} />
      </RootStack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Creating RootNavigation module for navigation functions in React Navigation
DESCRIPTION: This snippet shows how to create a RootNavigation module with a navigation ref and a navigate function. This allows navigation from any JavaScript module without needing the navigation prop.

LANGUAGE: javascript
CODE:
// RootNavigation.js

import * as React from 'react';

export const navigationRef = React.createRef();

export function navigate(name, params) {
  navigationRef.current?.navigate(name, params);
}

// add other navigation functions that you need and export them

----------------------------------------

TITLE: Implementing Focus State Detection with withNavigationFocus in React Navigation
DESCRIPTION: This example demonstrates how to use the withNavigationFocus higher-order component to create a component that displays its current focus state. The HOC injects an isFocused prop into the wrapped component which indicates whether the screen is currently focused.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Text } from 'react-native';
import { withNavigationFocus } from 'react-navigation';

class FocusStateLabel extends React.Component {
  render() {
    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;
  }
}

// withNavigationFocus returns a component that wraps FocusStateLabel and passes
// in the navigation prop
export default withNavigationFocus(FocusStateLabel);

----------------------------------------

TITLE: Implementing DrawerContent with useLinkBuilder in React Navigation
DESCRIPTION: Example showing how to use useLinkBuilder hook to create navigation links in a custom drawer content component. The hook returns a function that builds paths based on screen names and parameters defined in the linking configuration.

LANGUAGE: javascript
CODE:
import { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';

// ...

function DrawerContent({ state, descriptors }) {
  const buildLink = useLinkBuilder();

  return state.routes((route) => (
    <Link
      to={buildLink(route.name, route.params)}
      action={CommonActions.navigate(route.name)}
    >
      {descriptors[route.key].options.title}
    </Link>
  ));
}

----------------------------------------

TITLE: Dynamic Tab Navigator Icons Configuration in React Navigation
DESCRIPTION: Shows how to configure tab navigator icons dynamically using screenOptions with route-based configuration.

LANGUAGE: javascript
CODE:
<Tab.Navigator
  screenOptions={({ route }) => ({
    tabBarIcon: ({ color, size }) => {
      const icons = {
        Home: 'home',
        Profile: 'account',
      };

      return (
        <MaterialCommunityIcons
          name={icons[route.name]}
          color={color}
          size={size}
        />
      );
    },
  })}
>
  <Tab.Screen name="Home" component={HomeScreen} />
  <Tab.Screen name="Profile" component={ProfileScreen} />
</Tab.Navigator>

----------------------------------------

TITLE: Basic useFocusEffect Implementation in React Navigation
DESCRIPTION: Demonstrates the basic usage of useFocusEffect hook to subscribe to an API when a screen comes into focus. The effect is wrapped in useCallback to optimize performance and includes proper cleanup.

LANGUAGE: javascript
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile({ userId }) {
  const [user, setUser] = React.useState(null);

  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, (user) => setUser(user));

      return () => unsubscribe();
    }, [userId])
  );

  return <ProfileContent user={user} />;
}

----------------------------------------

TITLE: Configuring path mapping for dynamic navigation
DESCRIPTION: Example of how to map paths to screens in dynamic navigation configuration

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: 'feed/:sort',
    Profile: 'user',
  },
};

----------------------------------------

TITLE: Adding Navigation Event Listeners in React Navigation
DESCRIPTION: Demonstration of how to add and remove event listeners for navigation events like 'focus'.

LANGUAGE: javascript
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Setting Navigation Key for Groups (Dynamic)
DESCRIPTION: Demonstrates how to set a navigation key for a group using dynamic configuration. This key can be used to reset or remove screens in the group based on certain conditions.

LANGUAGE: jsx
CODE:
<Stack.Group
  navigationKey={isSignedIn ? 'user' : 'guest'}
>
  {/* screens */}
</Stack.Group>

----------------------------------------

TITLE: Focus Event Handling in React Function Components
DESCRIPTION: Implementation of navigation focus event listener using React hooks in a functional component, demonstrating proper cleanup with useEffect.

LANGUAGE: jsx
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Async Operations with useFocusEffect
DESCRIPTION: Shows how to handle asynchronous operations within useFocusEffect using AbortController for proper cleanup of fetch requests to prevent race conditions.

LANGUAGE: javascript
CODE:
useFocusEffect(
  React.useCallback(() => {
    const abortController = new AbortController();

    const fetchUser = async () => {
      try {
        const user = await fetch(`https://example.com/users/${userId}`, {
          signal: abortController.signal,
        });

        setUser(user);
      } catch (e) {
        if (e.name !== 'AbortError') {
          // Handle error
        }
      }
    };

    fetchUser();

    return () => {
      abortController.abort();
    };
  }, [userId])
);

----------------------------------------

TITLE: Extending Bottom Tab Navigator in React Navigation
DESCRIPTION: Example showing how to extend and customize the built-in bottom tab navigator by reusing its view component.

LANGUAGE: javascript
CODE:
function BottomTabNavigator({
  initialRouteName,
  backBehavior,
  children,
  screenOptions,
  ...rest
}) {
  const { state, descriptors, navigation, NavigationContent } =
    useNavigationBuilder(TabRouter, {
      initialRouteName,
      backBehavior,
      children,
      screenOptions,
    });

  return (
    <NavigationContent>
      <BottomTabView
        {...rest}
        state={state}
        navigation={navigation}
        descriptors={descriptors}
      />
    </NavigationContent>
  );
}

export default createNavigatorFactory(BottomTabNavigator);

----------------------------------------

TITLE: Using useLinkTo Hook in Functional Component
DESCRIPTION: Demonstrates how to use the useLinkTo hook in a functional React component to navigate to a profile page using a path-based approach.

LANGUAGE: javascript
CODE:
import { useLinkTo } from '@react-navigation/native';

// ...

function Home() {
  const linkTo = useLinkTo();

  return (
    <Button onPress={() => linkTo('/profile/jane')}>
      Go to Jane's profile
    </Button>
  );
}

----------------------------------------

TITLE: Closing Drawer in React Navigation
DESCRIPTION: Shows the usage of the closeDrawer action to close the drawer pane in a React Navigation drawer navigator.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.closeDrawer());

----------------------------------------

TITLE: Example of Route Object Structure in React Navigation
DESCRIPTION: This JSON snippet demonstrates the structure of a route object in React Navigation. It includes a key, routeName, and optional params for passing data between screens.

LANGUAGE: json
CODE:
{
  "key": "B",
  "routeName": "Profile",
  "params": { "id": "123" }
}

----------------------------------------

TITLE: Initial Parameters Configuration
DESCRIPTION: Shows how to set initial parameters for a screen that will be merged with navigation params.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Details"
  component={DetailsScreen}
  initialParams={{ itemId: 42 }}
/>

----------------------------------------

TITLE: Custom Header Styles Configuration
DESCRIPTION: Demonstrates how to customize header styles including background color, tint color, and title style.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{
          title: 'My home',
          headerStyle: {
            backgroundColor: '#f4511e',
          },
          headerTintColor: '#fff',
          headerTitleStyle: {
            fontWeight: 'bold',
          },
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Customizing Transitions in createAnimatedSwitchNavigator
DESCRIPTION: This example demonstrates how to customize the transition between screens using the Transition API from react-native-reanimated. It creates a MySwitch navigator with custom fade and slide transitions.

LANGUAGE: jsx
CODE:
import createAnimatedSwitchNavigator from 'react-navigation-animated-switch';
import { Transition } from 'react-native-reanimated';

const MySwitch = createAnimatedSwitchNavigator(
  {
    Home: HomeScreen,
    Other: OtherScreen,
  },
  {
    // The previous screen will slide to the bottom while the next screen will fade in
    transition: (
      <Transition.Together>
        <Transition.Out
          type="slide-bottom"
          durationMs={400}
          interpolation="easeIn"
        />
        <Transition.In type="fade" durationMs={500} />
      </Transition.Together>
    ),
  }
);

----------------------------------------

TITLE: Installing react-navigation-tabs in React Navigation
DESCRIPTION: Command to install the react-navigation-tabs package using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-navigation-tabs

----------------------------------------

TITLE: Multiple Navigation to Same Route
DESCRIPTION: Example showing how to navigate multiple times to the same route using push()

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.navigate('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Installing React Navigation Repository
DESCRIPTION: Commands for cloning and setting up the React Navigation repository locally

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/react-navigation.git
cd react-navigation
git remote add upstream https://github.com/react-community/react-navigation.git
yarn install

----------------------------------------

TITLE: Implementing Custom Themes with React Context
DESCRIPTION: Shows how to create and use custom themes in a React Navigation app using React's context API.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, TouchableOpacity, View } from 'react-native';

const ThemeContext = React.createContext(null);
const ThemeConstants = {
  light: {
    backgroundColor: '#fff',
    fontColor: '#000',
  },
  dark: {
    backgroundColor: '#000',
    fontColor: '#fff',
  },
};

export default class AppContainer extends React.Component {
  state = {
    theme: 'light',
  };

  toggleTheme = () => {
    this.setState(({ theme }) => ({
      theme: theme === 'light' ? 'dark' : 'light',
    }));
  };

  render() {
    return (
      <ThemeContext.Provider
        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}
      >
        <HomeScreen />
      </ThemeContext.Provider>
    );
  }
}

// ... (rest of the component implementations)

----------------------------------------

TITLE: Configuring Stack Navigator Groups (Dynamic)
DESCRIPTION: Shows how to use the Group component to dynamically define groups in a stack navigator. This approach allows for more flexible configuration at runtime.

LANGUAGE: jsx
CODE:
<Stack.Navigator>
  <Stack.Group
    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}
  >
    <Stack.Screen name="Home" component={HomeScreen} />
    <Stack.Screen name="Profile" component={EmptyScreen} />
  </Stack.Group>
  <Stack.Group screenOptions={{ presentation: 'modal' }}>
    <Stack.Screen name="Search" component={EmptyScreen} />
    <Stack.Screen name="Share" component={EmptyScreen} />
  </Stack.Group>
</Stack.Navigator>

----------------------------------------

TITLE: Global Screen Options Configuration in React Navigation
DESCRIPTION: Demonstrates setting global screen options using the screenOptions prop on the navigator component, applying styles to all screens.

LANGUAGE: javascript
CODE:
<Stack.Navigator
  screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}
>
  <Stack.Screen name="Home" component={HomeScreen} />
  <Stack.Screen name="Profile" component={ProfileScreen} />
</Stack.Navigator>

----------------------------------------

TITLE: Using Navigation Listeners for Focus Events in React Navigation
DESCRIPTION: This snippet shows how to use the useEffect hook to add a listener for the 'focus' event on a screen component. It demonstrates how to perform actions when a screen comes into focus and how to properly clean up the listener.

LANGUAGE: js
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // Screen was focused
      // Do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Creating a Navigator Factory for Custom Tab Navigator
DESCRIPTION: This snippet shows how to use the createNavigatorFactory function to create a reusable navigator factory for a custom tab navigator. This allows the custom navigator to be used in a similar way to built-in navigators.

LANGUAGE: javascript
CODE:
import {
  useNavigationBuilder,
  createNavigatorFactory,
} from '@react-navigation/native';

// ...

export const createMyNavigator = createNavigatorFactory(TabNavigator);

----------------------------------------

TITLE: Dispatching Navigation Actions in React Navigation
DESCRIPTION: Example of using the dispatch method to send custom navigation actions.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.navigate({
    name: 'Profile',
    params: {},
  })
);

----------------------------------------

TITLE: Preventing Browser Tab Close on Web using beforeunload Event
DESCRIPTION: This snippet shows how to use the beforeunload event to prompt the user before they leave the browser tab. It prevents the default behavior and sets a return value to trigger the browser's default confirmation dialog.

LANGUAGE: javascript
CODE:
React.useEffect(() => {
  const onBeforeUnload = (event) => {
    // Prevent the user from leaving the page
    event.preventDefault();
    event.returnValue = true;
  };

  window.addEventListener('beforeunload', onBeforeUnload);

  return () => {
    window.removeEventListener('beforeunload', onBeforeUnload);
  };
}, []);

----------------------------------------

TITLE: Complete Theme Configuration Example
DESCRIPTION: Shows a complete theme object with all required properties including dark mode flag and color definitions for various UI elements.

LANGUAGE: javascript
CODE:
const MyTheme = {
  dark: false,
  colors: {
    primary: 'rgb(255, 45, 85)',
    background: 'rgb(242, 242, 242)',
    card: 'rgb(255, 255, 255)',
    text: 'rgb(28, 28, 30)',
    border: 'rgb(199, 199, 204)',
    notification: 'rgb(255, 69, 58)',
  },
};

----------------------------------------

TITLE: Type-Checking Custom Tab Navigator in React Navigation
DESCRIPTION: This TypeScript code demonstrates how to properly type-check a custom tab navigator. It includes type definitions for navigation config, options, and event map, as well as the implementation of the navigator with proper typing.

LANGUAGE: typescript
CODE:
import * as React from 'react';
import {
  View,
  Text,
  Pressable,
  type StyleProp,
  type ViewStyle,
  StyleSheet,
} from 'react-native';
import {
  createNavigatorFactory,
  CommonActions,
  type DefaultNavigatorOptions,
  type NavigatorTypeBagBase,
  type ParamListBase,
  type StaticConfig,
  type TabActionHelpers,
  type TabNavigationState,
  TabRouter,
  type TabRouterOptions,
  type TypedNavigator,
  useNavigationBuilder,
} from '@react-navigation/native';

type TabNavigationConfig = {
  tabBarStyle: StyleProp<ViewStyle>;
  contentStyle: StyleProp<ViewStyle>;
};

type TabNavigationOptions = {
  title?: string;
};

type TabNavigationEventMap = {
  tabPress: {
    data: { isAlreadyFocused: boolean };
    canPreventDefault: true;
  };
};

type Props = DefaultNavigatorOptions<
  ParamListBase,
  TabNavigationState<ParamListBase>,
  TabNavigationOptions,
  TabNavigationEventMap
> &
  TabRouterOptions &
  TabNavigationConfig;

function TabNavigator({
  id,
  initialRouteName,
  children,
  layout,
  screenListeners,
  screenOptions,
  screenLayout,
  backBehavior,
  tabBarStyle,
  contentStyle,
}: Props) {
  const { state, navigation, descriptors, NavigationContent } =
    useNavigationBuilder<
      TabNavigationState<ParamListBase>,
      TabRouterOptions,
      TabActionHelpers<ParamListBase>,
      TabNavigationOptions,
      TabNavigationEventMap
    >(TabRouter, {
      id,
      initialRouteName,
      children,
      layout,
      screenListeners,
      screenOptions,
      screenLayout,
      backBehavior,
    });

  return (
    <NavigationContent>
      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>
        {state.routes.map((route, index) => (
          <Pressable
            key={route.key}
            onPress={() => {
              const isFocused = state.index === index;
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
                data: {
                  isAlreadyFocused: isFocused,
                },
              });

              if (!isFocused && !event.defaultPrevented) {
                navigation.dispatch({
                  ...CommonActions.navigate(route),
                  target: state.key,
                });
              }
            }}
            style={{ flex: 1 }}
          >
            <Text>{descriptors[route.key].options.title || route.name}</Text>
          </Pressable>
        ))}
      </View>
      <View style={[{ flex: 1 }, contentStyle]}>
        {state.routes.map((route, i) => {
          return (
            <View
              key={route.key}
              style={[
                StyleSheet.absoluteFill,
                { display: i === state.index ? 'flex' : 'none' },
              ]}
            >
              {descriptors[route.key].render()}
            </View>
          );
        })}
      </View>
    </NavigationContent>
  );
}

export function createMyNavigator<
  const ParamList extends ParamListBase,
  const NavigatorID extends string | undefined = undefined,
  const TypeBag extends NavigatorTypeBagBase = {
    ParamList: ParamList;
    NavigatorID: NavigatorID;
    State: TabNavigationState<ParamList>;
    ScreenOptions: TabNavigationOptions;
    EventMap: TabNavigationEventMap;
    NavigationList: {
      [RouteName in keyof ParamList]: TabNavigationProp<
        ParamList,
        RouteName,
        NavigatorID
      >;
    };
    Navigator: typeof TabNavigator;
  },
  const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,
>(config?: Config): TypedNavigator<TypeBag, Config> {
  return createNavigatorFactory(TabNavigator)(config);
}

----------------------------------------

TITLE: Modifying Navigation State with Reset in React Navigation
DESCRIPTION: Illustrates how to use the dispatch function with CommonActions.reset to modify the existing navigation state, specifically removing screens after 'Profile'.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch((state) => {
  // Remove all the screens after `Profile`
  const index = state.routes.findIndex((r) => r.name === 'Profile');
  const routes = state.routes.slice(0, index + 1);

  return CommonActions.reset({
    ...state,
    routes,
    index: routes.length - 1,
  });
});

----------------------------------------

TITLE: Complete Material Bottom Tabs Implementation
DESCRIPTION: Full example showing material bottom tabs with custom icons, labels, and styling for each tab.

LANGUAGE: javascript
CODE:
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

const Tab = createMaterialBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator
      initialRouteName="Feed"
      activeColor="#e91e63"
      barStyle={{ backgroundColor: 'tomato' }}
    >
      <Tab.Screen
        name="Feed"
        component={Feed}
        options={{
          tabBarLabel: 'Home',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="home" color={color} size={26} />
          ),
        }}
      />
      <Tab.Screen
        name="Notifications"
        component={Notifications}
        options={{
          tabBarLabel: 'Updates',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="bell" color={color} size={26} />
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={Profile}
        options={{
          tabBarLabel: 'Profile',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="account" color={color} size={26} />
          ),
        }}
      />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Handling Navigation Focus and Blur Events
DESCRIPTION: Implementation of focus and blur event listeners in a ProfileScreen component using React Navigation's event system.

LANGUAGE: jsx
CODE:
function ProfileScreen() {
  const navigation = useNavigation();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      console.log('ProfileScreen focused');
    });

    return unsubscribe;
  }, [navigation]);

  React.useEffect(() => {
    const unsubscribe = navigation.addListener('blur', () => {
      console.log('ProfileScreen blurred');
    });

    return unsubscribe;
  }, [navigation]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Profile Screen</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Shared Element Transitions in React Navigation (Static Configuration)
DESCRIPTION: This code snippet demonstrates how to implement shared element transitions using React Navigation with a static configuration. It uses Animated components from react-native-reanimated and assigns shared transition tags to elements on different screens.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, StyleSheet } from 'react-native';
import {
  useNavigation,
  createStaticNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';

import Animated from 'react-native-reanimated';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Button onPress={() => navigation.navigate('Details')}>
        Go to Details
      </Button>
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 300, height: 300 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

function DetailsScreen() {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 100, height: 100 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

const RootStack = createNativeStackNavigator({
  screens: {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
});

const Navigation = createStaticNavigation(RootStack);

export default function App() {
  return <Navigation />;
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Drawer Content Options Configuration - React Navigation
DESCRIPTION: Example of configuring drawer content options including active colors, styling, and container properties.

LANGUAGE: javascript
CODE:
contentOptions: {
  activeTintColor: '#e91e63',
  itemsContainerStyle: {
    marginVertical: 0,
  },
  iconContainerStyle: {
    opacity: 1
  }
}

----------------------------------------

TITLE: Custom Card Style Interpolator
DESCRIPTION: Example of creating a custom card style interpolator for fade animation.

LANGUAGE: javascript
CODE:
const forFade = ({ current }) => ({
  cardStyle: {
    opacity: current.progress,
  },
});

<Stack.Screen
  name="Profile"
  component={Profile}
  options={{ cardStyleInterpolator: forFade }}
/>

----------------------------------------

TITLE: Correct Usage with useNavigationState - React Navigation
DESCRIPTION: Shows the correct implementation using useNavigationState hook that properly updates on navigation changes.

LANGUAGE: javascript
CODE:
function Profile() {
  const routesLength = useNavigationState((state) => state.routes.length);

  return <Text>Number of routes: {routesLength}</Text>;
}

----------------------------------------

TITLE: Setting Initial Parameters for a Screen in React Navigation
DESCRIPTION: This snippet shows how to set initial parameters for a screen using the initialParams prop when defining the screen in the stack navigator.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Details"
  component={DetailsScreen}
  initialParams={{ itemId: 42 }}
/>

----------------------------------------

TITLE: Rendering React Navigation App with ServerContainer on Server
DESCRIPTION: This snippet demonstrates how to use the ServerContainer component to render a React Navigation app on the server. It shows how to create a ref, set up the location object, and render the app using ReactDOMServer.

LANGUAGE: javascript
CODE:
// Ref which will be populated with the screen options
const ref = React.createRef();

// Location object containing the `pathname` and `search` fields of the current URL
const location = { pathname: '/profile', search: '?user=jane' };

// Get rendered HTML
const html = ReactDOMServer.renderToString(
  <ServerContainer ref={ref} location={location}>
    <App />
  </ServerContainer>
);

// Then you can access the options for the current screen in the ref
const options = ref.current.getCurrentOptions(); // { title: 'My Profile' }

----------------------------------------

TITLE: Custom Action Creator for Navigation Dispatch
DESCRIPTION: Demonstration of creating and using a custom action creator function with dispatch.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch((state) => {
  // Add the home route to the start of the stack
  const routes = [{ name: 'Home' }, ...state.routes];

  return CommonActions.reset({
    ...state,
    routes,
    index: routes.length - 1,
  });
});

----------------------------------------

TITLE: Using useLinkTo Hook with Class Component
DESCRIPTION: Shows how to wrap a class component with a functional component to utilize the useLinkTo hook, passing the linkTo function as a prop.

LANGUAGE: javascript
CODE:
class Home extends React.Component {
  render() {
    // Get it from props
    const { linkTo } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const linkTo = useLinkTo();

  return <Profile {...props} linkTo={linkTo} />;
}

----------------------------------------

TITLE: Setting Parent Screen Options Based on Child Navigator State
DESCRIPTION: This snippet shows how to set the header title of a parent stack navigator based on the active route in a child tab navigator. It uses the getFocusedRouteNameFromRoute helper function to determine the current route.

LANGUAGE: javascript
CODE:
function getHeaderTitle(route) {
  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';

  switch (routeName) {
    case 'Feed':
      return 'News feed';
    case 'Profile':
      return 'My profile';
    case 'Account':
      return 'My account';
  }
}

LANGUAGE: jsx
CODE:
const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeTabs,
      options: ({ route }) => ({
        headerTitle: getHeaderTitle(route),
      }),
    },
    Settings: SettingsScreen,
  },
});

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Home"
  component={HomeTabs}
  options={({ route }) => ({
    headerTitle: getHeaderTitle(route),
  })}
/>

----------------------------------------

TITLE: Defining Nested Navigation State in JavaScript
DESCRIPTION: Example of a navigation state object with a nested navigator, demonstrating how the state property is used for child navigators.

LANGUAGE: javascript
CODE:
const state = {
  type: 'stack',
  key: 'stack-1',
  routeNames: ['Home', 'Profile', 'Settings'],
  routes: [
    {
      key: 'home-1',
      name: 'Home',
      state: {
        key: 'tab-1',
        routeNames: ['Feed', 'Library', 'Favorites'],
        routes: [
          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },
          { key: 'library-1', name: 'Library' },
          { key: 'favorites-1', name: 'Favorites' },
        ],
        index: 0,
      },
    },
    { key: 'settings-1', name: 'Settings' },
  ],
  index: 1,
};

----------------------------------------

TITLE: Implementing Navigation with Parameters in React Native
DESCRIPTION: This code snippet demonstrates how to pass parameters between screens using React Navigation. It includes a HomeScreen that navigates to a DetailsScreen with parameters, and shows how to read those parameters in the destination screen.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
        <Button
          title="Go to Details"
          onPress={() => {
            /* 1. Navigate to the Details route with params */
            this.props.navigation.navigate('Details', {
              itemId: 86,
              otherParam: 'anything you want here',
            });
          }}
        />
      </View>
    );
  }
}

class DetailsScreen extends React.Component {
  render() {
    /* 2. Read the params from the navigation state */
    const { params } = this.props.navigation.state;
    const itemId = params ? params.itemId : null;
    const otherParam = params ? params.otherParam : null;

    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Text>itemId: {JSON.stringify(itemId)}</Text>
        <Text>otherParam: {JSON.stringify(otherParam)}</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.navigate('Details')}
        />
        <Button
          title="Go back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Basic Drawer Implementation in React Native
DESCRIPTION: Example of a basic drawer implementation using the Drawer component from react-native-drawer-layout, demonstrating open/close functionality.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button, Text } from 'react-native';
import { Drawer } from 'react-native-drawer-layout';

export default function DrawerExample() {
  const [open, setOpen] = React.useState(false);

  return (
    <Drawer
      open={open}
      onOpen={() => setOpen(true)}
      onClose={() => setOpen(false)}
      renderDrawerContent={() => {
        return <Text>Drawer content</Text>;
      }}
    >
      <Button
        onPress={() => setOpen((prevOpen) => !prevOpen)}
        title={`${open ? 'Close' : 'Open'} drawer`}
      />
    </Drawer>
  );
}

----------------------------------------

TITLE: Using Drawer Navigation Methods
DESCRIPTION: Examples of how to programmatically control the drawer using navigation methods.

LANGUAGE: javascript
CODE:
navigation.openDrawer();
navigation.closeDrawer();
navigation.toggleDrawer();
navigation.jumpTo('Profile', { owner: 'Satya' });

----------------------------------------

TITLE: Implementing Basic Shared Element Transitions in React Navigation
DESCRIPTION: A minimal example demonstrating how to set up shared element transitions between screens using React Navigation and React Native Reanimated. Shows implementation of navigation stack, screen components, and shared transition tags.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Button, StyleSheet } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

import Animated from 'react-native-reanimated';

const Stack = createNativeStackNavigator();

function HomeScreen({ navigation }) {
  return (
    <View style={styles.container}>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 300, height: 300 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

function DetailsScreen({ navigation }) {
  return (
    <View style={styles.container}>
      <Button title="Go back" onPress={() => navigation.goBack()} />
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 100, height: 100 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Incorrect Implementation of Multiple Navigators in React Navigation
DESCRIPTION: This code snippet demonstrates an incorrect way of implementing multiple navigators in a React Navigation app. It shows how rendering a navigator inside another navigator's screen component can lead to issues with navigation state and interactions.

LANGUAGE: javascript
CODE:
export default class App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppContainer />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AuthenticationContainer = createAppContainer(AuthenticationNavigator);

class AuthenticationScreen extends React.Component {
  render() {
    /*
     * In a screen inside of the navigator we are rendering another navigator
     * You should avoid this! It will have its own navigation state and be unable
     * To interact with any parent navigator, eg: it would not know the route "Home" exists
     */
    return <AuthenticationContainer />;
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

const AppContainer = createAppContainer(AppNavigator);

----------------------------------------

TITLE: Custom Animation Configuration
DESCRIPTION: Example of configuring custom transition animations for Stack Navigator.

LANGUAGE: javascript
CODE:
const config = {
  animation: 'spring',
  config: {
    stiffness: 1000,
    damping: 500,
    mass: 3,
    overshootClamping: true,
    restDisplacementThreshold: 0.01,
    restSpeedThreshold: 0.01,
  },
};

<Stack.Screen
  name="Profile"
  component={Profile}
  options={{
    transitionSpec: {
      open: config,
      close: config,
    },
  }}
/>

----------------------------------------

TITLE: Hiding Headers in Nested Navigators
DESCRIPTION: Shows how to hide headers in both parent and child navigators to avoid multiple headers when nesting navigators.

LANGUAGE: javascript
CODE:
const HomeTabs = createBottomTabNavigator({
  screenOptions: {
    headerShown: false,
  },
  screens: {
    Feed: FeedScreen,
    Messages: MessagesScreen,
  },
});

const RootStack = createStackNavigator({
  screenOptions: {
    headerShown: false,
  },
  screens: {
    Home: HomeTabs,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Configuring Status Bar in Stack Navigation (React Native)
DESCRIPTION: This snippet demonstrates how to configure the status bar for different screens in a stack navigator using React Navigation. It shows two screens with different status bar styles and background colors.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text, StatusBar, StyleSheet } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function Screen1() {
  const navigation = useNavigation();
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#6a51ae',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <StatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button onPress={() => navigation.navigate('Screen2')}>
        Next screen
      </Button>
    </View>
  );
}

function Screen2() {
  const navigation = useNavigation();
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#ecf0f1',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <StatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button onPress={() => navigation.navigate('Screen1')}>
        Next screen
      </Button>
    </View>
  );
}

const RootStack = createNativeStackNavigator({
  screenOptions: {
    headerShown: false,
  },
  screens: {
    Screen1: Screen1,
    Screen2: Screen2,
  },
});

const Navigation = createStaticNavigation(RootStack);

export default function App() {
  return <Navigation />;
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', alignItems: 'center' },
});

----------------------------------------

TITLE: Using useNavigation Hook with Class Components in React
DESCRIPTION: This snippet demonstrates how to use the useNavigation hook with class components in React. It shows how to wrap a class component in a functional component to utilize the hook and pass the navigation object as a prop.

LANGUAGE: javascript
CODE:
class MyBackButton extends React.Component {
  render() {
    // Get it from props
    const { navigation } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const navigation = useNavigation();

  return <MyBackButton {...props} navigation={navigation} />;
}

----------------------------------------

TITLE: Creating Drawer Navigator with Custom Screens
DESCRIPTION: Demonstrates setting up a drawer navigator with two screens (Home and Notifications) including custom icons, labels, and navigation logic. Each screen includes drawer configuration options and basic navigation functionality.

LANGUAGE: javascript
CODE:
class MyHomeScreen extends React.Component {
  static navigationOptions = {
    drawerLabel: 'Home',
    drawerIcon: ({ tintColor }) => (
      <Image
        source={require('./chats-icon.png')}
        style={[styles.icon, { tintColor: tintColor }]}
      />
    ),
  };

  render() {
    return (
      <Button
        onPress={() => this.props.navigation.navigate('Notifications')}
        title="Go to notifications"
      />
    );
  }
}

class MyNotificationsScreen extends React.Component {
  static navigationOptions = {
    drawerLabel: 'Notifications',
    drawerIcon: ({ tintColor }) => (
      <Image
        source={require('./notif-icon.png')}
        style={[styles.icon, { tintColor: tintColor }]}
      />
    ),
  };

  render() {
    return (
      <Button
        onPress={() => this.props.navigation.goBack()}
        title="Go back home"
      />
    );
  }
}

const styles = StyleSheet.create({
  icon: {
    width: 24,
    height: 24,
  },
});

const MyDrawerNavigator = createDrawerNavigator({
  Home: {
    screen: MyHomeScreen,
  },
  Notifications: {
    screen: MyNotificationsScreen,
  },
});

const MyApp = createAppContainer(MyDrawerNavigator);

----------------------------------------

TITLE: Custom Stack Navigator Header Implementation
DESCRIPTION: Example demonstrating how to implement a custom header in a Stack Navigator using the Header component.

LANGUAGE: javascript
CODE:
import { Header, getHeaderTitle } from '@react-navigation/elements';

const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator
      screenOptions={{
        header: ({ options, route }) => (
          <Header {...options} title={getHeaderTitle(options, route.name)} />
        ),
      }}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Using a Custom Action Creator with Dispatch in React Navigation
DESCRIPTION: This example shows how to create and use a custom action creator function with the dispatch method to insert a new route before the last one in the navigation stack.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

const insertBeforeLast = (routeName, params) => (state) => {
  const routes = [
    ...state.routes.slice(0, -1),
    { name: routeName, params },
    state.routes[state.routes.length - 1],
  ];

  return CommonActions.reset({
    ...state,
    routes,
    index: routes.length - 1,
  });
};

// Usage:
navigation.dispatch(insertBeforeLast('Home'));

----------------------------------------

TITLE: Navigating Back in React Navigation
DESCRIPTION: Demonstrates how to use the CommonActions.goBack action to navigate to the previous route in the history.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(CommonActions.goBack());

----------------------------------------

TITLE: Using useDrawerProgress hook with modern Reanimated
DESCRIPTION: Example of using the useDrawerProgress hook with modern Reanimated implementation to animate drawer content.

LANGUAGE: javascript
CODE:
import { Animated } from 'react-native-reanimated';
import { useDrawerProgress } from 'react-native-drawer-layout';

function MyComponent() {
  const progress = useDrawerProgress();

  const animatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateX: interpolate(progress, [0, 1], [-100, 0]),
        },
      ],
    };
  });

  return <Animated.View style={animatedStyle}>{/* ... */}</Animated.View>;
}

----------------------------------------

TITLE: Implementing a Themed Button using useTheme Hook in React Native
DESCRIPTION: This snippet demonstrates how to create a button component that responds to theme changes using the useTheme hook from React Navigation. It applies the current theme's colors to the button's background and text.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useTheme } from '@react-navigation/native';

// Black background and white text in light theme, inverted on dark theme
function MyButton() {
  const { colors } = useTheme();

  return (
    <TouchableOpacity style={{ backgroundColor: colors.card }}>
      <Text style={{ color: colors.text }}>Button!</Text>
    </TouchableOpacity>
  );
}

----------------------------------------

TITLE: Customizing Back Button in React Navigation Stack Navigator
DESCRIPTION: This snippet demonstrates how to customize the back button in a Stack Navigator. It shows how to change the back button label and style using headerBackTitle and headerBackTitleStyle options.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Screen name="Home" component={HomeScreen} />
  <Stack.Screen
    name="Details"
    component={DetailsScreen}
    options={{
      headerBackTitle: 'Custom Back',
      headerBackTitleStyle: { fontSize: 30 },
    }}
  />
</Stack.Navigator>

----------------------------------------

TITLE: Rendering Custom Navigator in React Navigation
DESCRIPTION: Shows how to render a custom navigator created with createNavigator. This example passes the required navigation prop and optional screenProps to the navigator component.

LANGUAGE: javascript
CODE:
<AppNavigator
  navigation={{ state, dispatch, addListener }}
  screenProps={...}
/>

----------------------------------------

TITLE: Conditional Screen Rendering with Authentication
DESCRIPTION: Example of using the 'if' property to conditionally render screens based on authentication state.

LANGUAGE: javascript
CODE:
const useIsLoggedIn = () => {
  const { isLoggedIn } = React.useContext(AuthContext);

  return isLoggedIn;
};

const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      if: useIsLoggedIn,
    },
  },
});

----------------------------------------

TITLE: Dynamic Screen Options
DESCRIPTION: Shows how to configure dynamic screen options using route and navigation props.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={({ route, navigation }) => ({
    title: route.params.userId,
  })}
/>

----------------------------------------

TITLE: Authentication State Management in React Navigation
DESCRIPTION: Implements authentication state management using React's useReducer and useContext hooks in a React Navigation setup.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import * as SecureStore from 'expo-secure-store';

export default function App({ navigation }) {
  const [state, dispatch] = React.useReducer(
    (prevState, action) => {
      switch (action.type) {
        case 'RESTORE_TOKEN':
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'SIGN_IN':
          return {
            ...prevState,
            isSignout: false,
            userToken: action.token,
          };
        case 'SIGN_OUT':
          return {
            ...prevState,
            isSignout: true,
            userToken: null,
          };
      }
    },
    {
      isLoading: true,
      isSignout: false,
      userToken: null,
    }
  );

  React.useEffect(() => {
    const bootstrapAsync = async () => {
      let userToken;

      try {
        userToken = await SecureStore.getItemAsync('userToken');
      } catch (e) {
        // Restoring token failed
      }

      dispatch({ type: 'RESTORE_TOKEN', token: userToken });
    };

    bootstrapAsync();
  }, []);

  const authContext = React.useMemo(
    () => ({
      signIn: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
      signOut: () => dispatch({ type: 'SIGN_OUT' }),
      signUp: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
    }),
    []
  );

  return (
    <AuthContext.Provider value={authContext}>
      <Stack.Navigator>
        {state.userToken == null ? (
          <Stack.Screen name="SignIn" component={SignInScreen} />
        ) : (
          <Stack.Screen name="Home" component={HomeScreen} />
        )}
      </Stack.Navigator>
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: Using useSafeAreaInsets Hook for Custom Safe Area Handling in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useSafeAreaInsets hook from react-native-safe-area-context for more granular control over safe area insets application.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingBottom: insets.bottom,

        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Custom Header Blur Effect
DESCRIPTION: Example showing how to create a translucent header with blur effect

LANGUAGE: javascript
CODE:
import { BlurView } from 'expo-blur';

// ...

<Screen
  name="Home"
  component={HomeScreen}
  options={{
    headerTransparent: true,
    headerBackground: () => (
      <BlurView tint="light" intensity={100} style={StyleSheet.absoluteFill} />
    ),
  }}
/>;

----------------------------------------

TITLE: Configuring linking for dynamic navigation
DESCRIPTION: Example of how to configure the linking prop for dynamic navigation using NavigationContainer

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';

const linking = {
  prefixes: [
    /* your linking prefixes */
  ],
  config: {
    /* configuration for matching screens with paths */
  },
};

function App() {
  return (
    <NavigationContainer
      linking={linking}
      fallback={<Text>Loading...</Text>}
    >
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Nesting Tab Navigator in Stack Navigator with React Navigation
DESCRIPTION: This snippet demonstrates how to nest a Tab Navigator inside a Stack Navigator using React Navigation. It shows the structure of nested navigators and how to set up the navigation container.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Messages" component={Messages} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Nesting Tab Navigator in Stack Navigator with React Navigation
DESCRIPTION: This snippet demonstrates how to nest a Tab Navigator inside a Stack Navigator using React Navigation. It shows the structure of nested navigators and how to set up the navigation container.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Messages" component={Messages} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Popping Routes with StackActions in React Navigation
DESCRIPTION: Demonstrates the pop action from StackActions, which navigates back to a previous screen in the stack. It can pop multiple screens at once by specifying a count.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

const popAction = StackActions.pop(1);

navigation.dispatch(popAction);

----------------------------------------

TITLE: Adding a Button to the Header in React Navigation
DESCRIPTION: Demonstrates how to add a button to the right side of the header in a React Navigation stack. The button shows an alert when pressed.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: () => <LogoTitle />,
    headerRight: () => (
      <Button
        onPress={() => alert('This is a button!')
        title="Info"
        color="#fff"
      />
    ),
  };
}

----------------------------------------

TITLE: Using useIsFocused Hook with Dynamic Navigation
DESCRIPTION: Example showing how to implement the useIsFocused hook in a React Navigation app using dynamic navigation configuration. The hook returns a boolean indicating whether the screen is currently focused.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { useIsFocused } from '@react-navigation/native';

function ProfileScreen() {
  const isFocused = useIsFocused();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Navigating Routes with NavigationActions in React Navigation
DESCRIPTION: Demonstrates how to use NavigationActions.navigate() to navigate between routes. Includes options for specifying route name, parameters, nested actions, and route keys.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',

  params: {},

  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});

this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Authentication State Management in React Navigation
DESCRIPTION: Implements authentication state management using React's useReducer and useContext hooks in a React Navigation setup.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import * as SecureStore from 'expo-secure-store';

export default function App({ navigation }) {
  const [state, dispatch] = React.useReducer(
    (prevState, action) => {
      switch (action.type) {
        case 'RESTORE_TOKEN':
          return {
            ...prevState,
            userToken: action.token,
            isLoading: false,
          };
        case 'SIGN_IN':
          return {
            ...prevState,
            isSignout: false,
            userToken: action.token,
          };
        case 'SIGN_OUT':
          return {
            ...prevState,
            isSignout: true,
            userToken: null,
          };
      }
    },
    {
      isLoading: true,
      isSignout: false,
      userToken: null,
    }
  );

  React.useEffect(() => {
    const bootstrapAsync = async () => {
      let userToken;

      try {
        userToken = await SecureStore.getItemAsync('userToken');
      } catch (e) {
        // Restoring token failed
      }

      dispatch({ type: 'RESTORE_TOKEN', token: userToken });
    };

    bootstrapAsync();
  }, []);

  const authContext = React.useMemo(
    () => ({
      signIn: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
      signOut: () => dispatch({ type: 'SIGN_OUT' }),
      signUp: async (data) => {
        dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });
      },
    }),
    []
  );

  return (
    <AuthContext.Provider value={authContext}>
      <Stack.Navigator>
        {state.userToken == null ? (
          <Stack.Screen name="SignIn" component={SignInScreen} />
        ) : (
          <Stack.Screen name="Home" component={HomeScreen} />
        )}
      </Stack.Navigator>
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: Implementing Stack Pop Action in React Navigation
DESCRIPTION: Example showing how to use StackActions.pop() to remove screens from the stack. Takes an optional count parameter to specify how many screens to pop.

LANGUAGE: javascript
CODE:
navigation.dispatch(StackActions.pop(1));

----------------------------------------

TITLE: Navigator-wide Screen Options
DESCRIPTION: Shows how to configure screen options at the navigator level using the Tab.Navigator component with dynamic icon settings.

LANGUAGE: javascript
CODE:
<Tab.Navigator
  screenOptions={({ route }) => ({
    tabBarIcon: ({ color, size }) => {
      const icons = {
        Home: 'home',
        Profile: 'account',
      };

      return (
        <MaterialCommunityIcons
          name={icons[route.name]}
          color={color}
          size={size}
        />
      );
    },
  })}
>
  <Tab.Screen name="Home" component={HomeScreen} />
  <Tab.Screen name="Profile" component={ProfileScreen} />
</Tab.Navigator>

----------------------------------------

TITLE: Troubleshooting Example App Issues
DESCRIPTION: Commands to reset cache and restart the example app if encountering issues.

LANGUAGE: bash
CODE:
watchman watch-del-all
yarn start -- --reset-cache

----------------------------------------

TITLE: Using useFocusEffect with Class Components in React Navigation
DESCRIPTION: This example shows how to use useFocusEffect with class components by creating a separate functional component for the effect and including it in the class component's render method.

LANGUAGE: javascript
CODE:
function FetchUserData({ userId, onUpdate }) {
  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, onUpdate);

      return () => unsubscribe();
    }, [userId, onUpdate])
  );

  return null;
}

// ...

class Profile extends React.Component {
  _handleUpdate = (user) => {
    // Do something with user object
  };

  render() {
    return (
      <>
        <FetchUserData
          userId={this.props.userId}
          onUpdate={this._handleUpdate}
        />
        {/* rest of your code */}
      </>
    );
  }
}

----------------------------------------

TITLE: Implementing useNavigation Hook with Dynamic Navigation in React Native
DESCRIPTION: This snippet shows how to use the useNavigation hook in a React Native application with dynamic navigation. It demonstrates the implementation of a custom back button and navigation between Home and Profile screens using NavigationContainer.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { Button } from '@react-navigation/elements';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { useNavigation } from '@react-navigation/native';

function MyBackButton() {
  const navigation = useNavigation();

  return (
    <Button
      onPress={() => {
        navigation.goBack();
      }}
    >
      Back
    </Button>
  );
}

function HomeScreen({ navigation: { navigate } }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This is the home screen of the app</Text>
      <Button onPress={() => navigate('Profile')}>Go to Profile</Button>
    </View>
  );
}

function ProfileScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Profile Screen</Text>
      <MyBackButton />
    </View>
  );
}

const Stack = createNativeStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Profile" component={ProfileScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default App;

----------------------------------------

TITLE: Using Screen Props Types in React Navigation Components
DESCRIPTION: This snippet demonstrates how to use the defined prop types in both function and class components in React Navigation.

LANGUAGE: tsx
CODE:
function ProfileScreen({ route, navigation }: Props) {
  // ...
}

class ProfileScreen extends React.Component<Props> {
  render() {
    // ...
  }
}

----------------------------------------

TITLE: Custom Navigation Actions with LinkButton
DESCRIPTION: Example of using custom navigation actions like replace instead of navigate with the LinkButton component.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

// ...

function Home() {
  return (
    <LinkButton
      screen="Profile"
      params={{ id: 'jane' }}
      action={StackActions.replace('Profile', { id: 'jane' })}
    >
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: Using useNavigationState Hook in React Navigation Dynamic Configuration
DESCRIPTION: This example shows how to use the useNavigationState hook in a React Navigation app with dynamic configuration. It includes the same custom hooks as the static example but uses a different setup for the navigator.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import Button from '@react-navigation/elements';
import { View, Text } from 'react-native';
import {
  NavigationContainer,
  useRoute,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

// codeblock-focus-start
import { useNavigationState } from '@react-navigation/native';

function useIsFirstRouteInParent() {
  const route = useRoute();
  const isFirstRouteInParent = useNavigationState(
    (state) => state.routes[0].key === route.key
  );

  return isFirstRouteInParent;
}

function usePreviousRouteName() {
  return useNavigationState((state) =>
    state.routes[state.index - 1]?.name
      ? state.routes[state.index - 1].name
      : 'None'
  );
}
// codeblock-focus-end

function HomeScreen({ navigation }) {
  const isFirstRoute = useIsFirstRouteInParent();
  const previousRouteName = usePreviousRouteName();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>
      <Text>Previous route name: {previousRouteName}</Text>

      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen({ navigation }) {
  const isFirstRoute = useIsFirstRouteInParent();
  const previousRouteName = usePreviousRouteName();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>
      <Text>Previous route name: {previousRouteName}</Text>
      <Button onPress={() => navigation.navigate('Settings')}>
        Go to Settings
      </Button>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
    </View>
  );
}

function SettingsScreen({ navigation }) {
  const isFirstRoute = useIsFirstRouteInParent();
  const previousRouteName = usePreviousRouteName();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>It is {isFirstRoute ? '' : 'not '}first route in navigator</Text>
      <Text>Previous route name: {previousRouteName}</Text>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
    </View>
  );
}

const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
      <Stack.Screen name="Settings" component={SettingsScreen} />
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <MyStack />
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing useFocusEffect Hook in React Navigation
DESCRIPTION: This example demonstrates the usage of the useFocusEffect hook from React Navigation. It shows how to perform side effects when a screen is focused and how to clean up when the screen is unfocused, similar to React's useEffect hook but tied to the navigation lifecycle.

LANGUAGE: js
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile() {
  useFocusEffect(
    React.useCallback(() => {
      // Do something when the screen is focused

      return () => {
        // Do something when the screen is unfocused
        // Useful for cleanup functions
      };
    }, [])
  );

  return <ProfileContent />;
}

----------------------------------------

TITLE: Alternative Navigator Implementation with Router Prop
DESCRIPTION: Another correct approach to navigator nesting using static router property and passing navigation prop through to the navigator.

LANGUAGE: javascript
CODE:
export default class App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppContainer />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

class AuthenticationScreen extends React.Component {
  static router = AuthenticationNavigator.router;

  render() {
    return <AuthenticationNavigator navigation={this.props.navigation} />;
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

const AppContainer = createAppContainer(AppNavigator);

----------------------------------------

TITLE: Hiding Tab Bar in Specific Screens with Dynamic Configuration
DESCRIPTION: This snippet shows how to hide the tab bar on Profile and Settings screens using a dynamic configuration with functional components and hooks.

LANGUAGE: javascript
CODE:
function HomeTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={Home} />
      <Tab.Screen name="Feed" component={EmptyScreen} />
      <Tab.Screen name="Notifications" component={EmptyScreen} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeTabs} />
        <Stack.Screen name="Profile" component={EmptyScreen} />
        <Stack.Screen name="Settings" component={EmptyScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Opening and Closing Drawer in React Navigation
DESCRIPTION: This snippet shows how to programmatically open and close the drawer using navigation helpers. It includes methods for opening, closing, and toggling the drawer state.

LANGUAGE: javascript
CODE:
navigation.openDrawer();
navigation.closeDrawer();

----------------------------------------

TITLE: Setting Screen Title from Navigation Params in JavaScript
DESCRIPTION: This snippet demonstrates how to set a screen's title using navigation parameters. It shows setting the title of the StaticCounter screen using the count parameter.

LANGUAGE: javascript
CODE:
<RootStack.Screen
  name="StaticCounter"
  component={StaticCounter}
  options={({ route }) => ({ title: route.params.count })}
/>

----------------------------------------

TITLE: Passing Parameters Back to Previous Screen in React Navigation
DESCRIPTION: Illustrates how to pass data back to a previous screen using the navigate method with params and merge option.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation, route }) {
  React.useEffect(() => {
    if (route.params?.post) {
      // Post updated, do something with `route.params.post`
      // For example, send the post to the server
    }
  }, [route.params?.post]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        title="Create post"
        onPress={() => navigation.navigate('CreatePost')}
      />
      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>
    </View>
  );
}

function CreatePostScreen({ navigation, route }) {
  const [postText, setPostText] = React.useState('');

  return (
    <>
      <TextInput
        multiline
        placeholder="What's on your mind?"
        style={{ height: 200, padding: 10, backgroundColor: 'white' }}
        value={postText}
        onChangeText={setPostText}
      />
      <Button
        title="Done"
        onPress={() => {
          // Pass and merge params back to home screen
          navigation.navigate({
            name: 'Home',
            params: { post: postText },
            merge: true,
          });
        }}
      />
    </>
  );
}

----------------------------------------

TITLE: Custom Header Title Component
DESCRIPTION: Example of replacing the default header title with a custom component using headerTitle option.

LANGUAGE: javascript
CODE:
function LogoTitle() {
  return (
    <Image
      style={{ width: 50, height: 50 }}
      source={require('@expo/snack-static/react-native-logo.png')}
    />
  );
}

function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ headerTitle: (props) => <LogoTitle {...props} /> }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Exporting Stack Navigator as Root Component in React Native
DESCRIPTION: This snippet shows how to export a custom App component that renders the RootStack navigator. This approach provides more control over the root component of the app.

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator({
  Home: {
    screen: HomeScreen,
  },
});

export default class App extends React.Component {
  render() {
    return <RootStack />;
  }
}

----------------------------------------

TITLE: Using useTheme Hook in React Native Component
DESCRIPTION: Demonstrates using the useTheme hook to create a themed button component that responds to theme changes. The button uses the theme's card color for background and text color for the label.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useTheme } from '@react-navigation/native';

// Black background and white text in light theme, inverted on dark theme
function MyButton() {
  const { colors } = useTheme();

  return (
    <TouchableOpacity style={{ backgroundColor: colors.card }}>
      <Text style={{ color: colors.text }}>Button!</Text>
    </TouchableOpacity>
  );
}

----------------------------------------

TITLE: Using useNavigation Hook with Class Component in React Navigation
DESCRIPTION: Shows how to use the useNavigation hook with a class component by wrapping it in a functional component. This pattern allows class components to access the navigation object through props.

LANGUAGE: javascript
CODE:
class MyBackButton extends React.Component {
  render() {
    // Get it from props
    const { navigation } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const navigation = useNavigation();

  return <MyBackButton {...props} navigation={navigation} />;
}

----------------------------------------

TITLE: Lazy Component Loading
DESCRIPTION: Shows how to implement lazy loading of screen components using getComponent prop.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Profile"
  getComponent={() => require('./ProfileScreen').default}
/>

----------------------------------------

TITLE: Defining Linking Configuration
DESCRIPTION: Example of a linking configuration object with prefixes and screen mappings.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: 'feed/:sort',
    Profile: 'user',
  },
};

const linking = {
  prefixes: ['https://mychat.com', 'mychat://'],
  config,
};

----------------------------------------

TITLE: Sharing Header Styles Across Screens
DESCRIPTION: Shows how to share common header styles across multiple screens using screenOptions in Stack.Navigator.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}
    >
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Reset Navigation State
DESCRIPTION: Shows how to reset the entire navigation state to a new state with specified routes and index.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.reset({
    index: 1,
    routes: [
      { name: 'Home' },
      {
        name: 'Profile',
        params: { user: 'jane' },
      },
    ],
  })
);

----------------------------------------

TITLE: Using useNavigation Hook with Class Component in React Navigation
DESCRIPTION: Shows how to use the useNavigation hook with a class component by wrapping it in a functional component. This pattern allows class components to access the navigation object through props.

LANGUAGE: javascript
CODE:
class MyBackButton extends React.Component {
  render() {
    // Get it from props
    const { navigation } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const navigation = useNavigation();

  return <MyBackButton {...props} navigation={navigation} />;
}

----------------------------------------

TITLE: Basic useFocusEffect Implementation in Static Navigation
DESCRIPTION: Demonstrates the basic usage of useFocusEffect hook within a static navigation configuration using React Navigation. Shows how to handle focus and cleanup functions.

LANGUAGE: javascript
CODE:
import { useFocusEffect } from '@react-navigation/native';

function ProfileScreen() {
  useFocusEffect(
    React.useCallback(() => {
      // Do something when the screen is focused
      return () => {
        // Do something when the screen is unfocused
        // Useful for cleanup functions
      };
    }, [])
  );

  return <View />;
}

----------------------------------------

TITLE: Using useRoute with Class Components in React Navigation
DESCRIPTION: This example shows how to use the useRoute hook with class components by wrapping the class component in a functional component. It demonstrates accessing the route prop in both the class and functional components.

LANGUAGE: javascript
CODE:
class MyText extends React.Component {
  render() {
    // Get it from props
    const { route } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const route = useRoute();

  return <MyText {...props} route={route} />;
}

----------------------------------------

TITLE: Implementing Animated Drawer Content
DESCRIPTION: Example of how to create animated drawer content using the progress object.

LANGUAGE: javascript
CODE:
function CustomDrawerContent(props) {
  const progress = useDrawerProgress();

  const translateX = Animated.interpolateNode(progress, {
    inputRange: [0, 1],
    outputRange: [-100, 0],
  });

  return (
    <Animated.View style={{ transform: [{ translateX }] }}>
      {/* ... drawer contents */}
    </Animated.View>
  );
}

----------------------------------------

TITLE: Header Interaction with Screen Component in React Navigation
DESCRIPTION: This example shows how to make header buttons interact with the screen component. It uses navigation.setOptions to update the header options, allowing access to the screen's props, state, and context.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={({ navigation, route }) => ({
          headerTitle: (props) => <LogoTitle {...props} />,
          // Add a placeholder button without the `onPress` to avoid flicker
          headerRight: () => <Button title="Update count" />,
        })}
      />
    </Stack.Navigator>
  );
}

function HomeScreen({ navigation }) {
  const [count, setCount] = React.useState(0);

  React.useEffect(() => {
    // Use `setOptions` to update the button that we previously specified
    // Now the button includes an `onPress` handler to update the count
    navigation.setOptions({
      headerRight: () => (
        <Button onPress={() => setCount((c) => c + 1)} title="Update count" />
      ),
    });
  }, [navigation]);

  return <Text>Count: {count}</Text>;
}

----------------------------------------

TITLE: Configuring iOS Deep Linking in AppDelegate
DESCRIPTION: Native iOS configuration in AppDelegate.m to handle deep links and Universal Links.

LANGUAGE: objc
CODE:
// Add the header at the top of the file:
#import <React/RCTLinkingManager.h>

// Add this inside `@implementation AppDelegate` above `@end`:
- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

----------------------------------------

TITLE: Lazy Component Loading
DESCRIPTION: Shows how to use getComponent for lazy loading screen components.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Profile"
  getComponent={() => require('./ProfileScreen').default}
/>

----------------------------------------

TITLE: Using useLogger Hook with Static Navigation in React Native
DESCRIPTION: Example of how to use the useLogger hook with static navigation in a React Native app. It demonstrates importing necessary components and applying the hook to a navigation container reference.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  createStaticNavigation,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useLogger } from '@react-navigation/devtools';

/* content */

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useLogger(navigationRef);

  return <Navigation ref={navigationRef} />;
}

----------------------------------------

TITLE: Header Interaction with Screen Component in React Navigation
DESCRIPTION: This example shows how to enable interaction between a header button and the screen component using navigation params. It implements a counter that can be incremented by pressing a button in the header.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      headerTitle: <LogoTitle />,
      headerRight: (
        <Button
          onPress={navigation.getParam('increaseCount')}
          title="+1"
          color="#fff"
        />
      ),
    };
  };

  componentDidMount() {
    this.props.navigation.setParams({ increaseCount: this._increaseCount });
  }

  state = {
    count: 0,
  };

  _increaseCount = () => {
    this.setState({ count: this.state.count + 1 });
  };

  /* later in the render function we display the count */
}

----------------------------------------

TITLE: Syncing Native UI with Custom Theme in React Navigation
DESCRIPTION: This snippet demonstrates how to keep native UI elements in sync with the app's theme by updating the color scheme based on the current theme's dark mode setting.

LANGUAGE: javascript
CODE:
React.useEffect(() => {
  const colorScheme = theme.dark ? 'dark' : 'light';

  if (Platform.OS === 'web') {
    document.documentElement.style.colorScheme = colorScheme;
  } else {
    Appearance.setColorScheme(colorScheme);
  }
}, [theme.dark]);

----------------------------------------

TITLE: Screen Name Definition
DESCRIPTION: Example of defining a screen with a name property for navigation purposes.

LANGUAGE: jsx
CODE:
<Stack.Screen name="Profile" component={ProfileScreen} />

----------------------------------------

TITLE: Advanced Screen Listeners with Navigation Control
DESCRIPTION: Advanced example of Screen listeners using a callback function that receives navigation and route objects to control navigation flow.

LANGUAGE: jsx
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={({ navigation, route }) => ({
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();

      // Do something with the `navigation` object
      navigation.navigate('AnotherPlace');
    },
  })}
/>

----------------------------------------

TITLE: Implementing useScrollToTop with Functional Component in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useScrollToTop hook with a functional component in React Navigation. It uses a ref to a ScrollView to enable scrolling to the top when tapping on the active tab.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { ScrollView } from 'react-native';
import { useScrollToTop } from '@react-navigation/native';

function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(ref);

  return <ScrollView ref={ref}>{/* content */}</ScrollView>;
}

----------------------------------------

TITLE: Accessing Route Params with useRoute in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useRoute hook to access route parameters in a functional component. It imports the necessary dependencies and creates a MyText component that displays the caption from route params.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { useRoute } from '@react-navigation/native';

function MyText() {
  const route = useRoute();

  return <Text>{route.params.caption}</Text>;
}

----------------------------------------

TITLE: SetParams Navigation Action
DESCRIPTION: Shows how to update route parameters using CommonActions.setParams.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(CommonActions.setParams({ user: 'Wojtek' }));

----------------------------------------

TITLE: Accessing NavigationContext in a React Class Component
DESCRIPTION: This snippet demonstrates how to use NavigationContext directly in a React class component. It shows importing the context, setting it as the contextType, and accessing the navigation object within the render method.

LANGUAGE: javascript
CODE:
import { NavigationContext } from '@react-navigation/native';

class SomeComponent extends React.Component {
  static contextType = NavigationContext;

  render() {
    // We can access navigation object via context
    const navigation = this.context;
  }
}

----------------------------------------

TITLE: Accessing Route Params with useRoute in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useRoute hook to access route parameters in a functional component. It imports the necessary dependencies and creates a MyText component that displays the caption from route params.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { useRoute } from '@react-navigation/native';

function MyText() {
  const route = useRoute();

  return <Text>{route.params.caption}</Text>;
}

----------------------------------------

TITLE: Using useIsFocused Hook with Class Component
DESCRIPTION: Shows how to wrap a class component with a functional component to utilize the useIsFocused hook and pass the focus state as a prop.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  render() {
    // Get it from props
    const { isFocused } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const isFocused = useIsFocused();

  return <Profile {...props} isFocused={isFocused} />;
}

----------------------------------------

TITLE: Implementing Focus Event Listener in React Navigation
DESCRIPTION: Demonstrates how to use navigation.addListener to handle screen focus events. The code sets up an event listener that triggers an alert when the screen comes into focus and properly cleans up the listener on unmount.

LANGUAGE: javascript
CODE:
function ProfileScreen() {
  const navigation = useNavigation();

  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      alert('Screen is focused');
      // The screen is focused
      // Call any action
    });

    // Return the function to unsubscribe from the event so it gets removed on unmount
    return unsubscribe;
  }, [navigation]);

  return <View />;
}

----------------------------------------

TITLE: Basic Bottom Tabs Navigator Implementation - Static Configuration
DESCRIPTION: Example showing how to implement a basic bottom tabs navigator with static configuration

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { createStaticNavigation, useNavigation } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const MyTabs = createBottomTabNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Implementing Navigation Blocking in React Navigation
DESCRIPTION: Example of customizing a StackRouter to block navigation actions based on route parameters, specifically preventing pushing new screens when isEditing is true.

LANGUAGE: javascript
CODE:
import { StackRouter } from '@react-navigation/native';

const MyStackRouter = (options) => {
  const router = StackRouter(options);

  return {
    ...router,
    getStateForAction(state, action, options) {
      const result = router.getStateForAction(state, action, options);

      if (
        result != null &&
        result.index > state.index &&
        state.routes[state.index].params?.isEditing
      ) {
        return state;
      }

      return result;
    },
  };
};

----------------------------------------

TITLE: Screen Children Render Props
DESCRIPTION: Demonstrates how to use render props pattern with Screen component.

LANGUAGE: javascript
CODE:
<Stack.Screen name="Profile">
  {(props) => <ProfileScreen {...props} />}
</Stack.Screen>

----------------------------------------

TITLE: Using useNavigationState with Class Components in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useNavigationState hook with a class component by wrapping it in a function component. This allows class components to access navigation state information.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  render() {
    // Get it from props
    const { routesLength } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const routesLength = useNavigationState((state) => state.routes.length);

  return <Profile {...props} routesLength={routesLength} />;
}

----------------------------------------

TITLE: Installing React Navigation Redux Helpers
DESCRIPTION: Command to install the react-navigation-redux-helpers package using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-navigation-redux-helpers

----------------------------------------

TITLE: Setting Screen Options Dynamically in React Navigation
DESCRIPTION: Example of using setOptions to update screen options based on component state or props.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation, route }) {
  const [value, onChangeText] = React.useState(route.params.title);

  React.useLayoutEffect(() => {
    navigation.setOptions({
      title: value === '' ? 'No title' : value,
    });
  }, [navigation, value]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <TextInput
        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
        onChangeText={onChangeText}
        value={value}
      />
      <Button title="Go back" onPress={() => navigation.goBack()} />
    </View>
  );
}

----------------------------------------

TITLE: Checking Drawer Status in React Navigation
DESCRIPTION: Example of using the useDrawerStatus hook to determine if the drawer is currently open or closed.

LANGUAGE: javascript
CODE:
import { useDrawerStatus } from '@react-navigation/drawer';

// ...

const isDrawerOpen = useDrawerStatus() === 'open';

----------------------------------------

TITLE: Opening and Closing Drawer Programmatically
DESCRIPTION: Methods to programmatically open, close, and toggle the drawer using navigation helpers in React Navigation.

LANGUAGE: javascript
CODE:
navigation.openDrawer();
navigation.closeDrawer();
navigation.toggleDrawer();

----------------------------------------

TITLE: Implementing useScrollToTop with Class Component in React Navigation
DESCRIPTION: This snippet shows how to use the useScrollToTop hook with a class component in React Navigation. It wraps the class component in a functional component to utilize the hook and passes the ref as a prop.

LANGUAGE: javascript
CODE:
class Albums extends React.Component {
  render() {
    return <ScrollView ref={this.props.scrollRef}>{/* content */}</ScrollView>;
  }
}

// Wrap and export
export default function (props) {
  const ref = React.useRef(null);

  useScrollToTop(ref);

  return <Albums {...props} scrollRef={ref} />;
}

----------------------------------------

TITLE: Handling Unmatched Routes
DESCRIPTION: Configuration for handling 404 or unmatched routes in the navigation structure.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Home: {
      initialRouteName: 'Feed',
      screens: {
        Profile: 'users/:id',
        Settings: 'settings',
      },
    },
    NotFound: '*',
  },
};

----------------------------------------

TITLE: Customizing State Parsing in useLinking for React Navigation
DESCRIPTION: This snippet shows how to override the default state parsing logic in the useLinking hook for custom deep linking behavior.

LANGUAGE: javascript
CODE:
useLinking(ref, {
  prefixes: ['https://mychat.com', 'mychat://'],
  config: {
    screens: {
      Chat: 'feed/:sort',
    },
  },
  getStateFromPath(path, config) {
    // Return a state object here
    // You can also reuse the default logic by importing `getStateFromPath` from `@react-navigation/native`
  },
});

----------------------------------------

TITLE: Enabling React Native Screens
DESCRIPTION: Code snippet to enable react-native-screens optimization by importing and calling enableScreens() before rendering navigation stacks. This should be placed in the app's entry point (index.js or App.js).

LANGUAGE: javascript
CODE:
// Before rendering any navigation stack
import { enableScreens } from 'react-native-screens';
enableScreens();

----------------------------------------

TITLE: Accessing Current Screen Options from ServerContainer Ref
DESCRIPTION: This snippet shows how to access the options for the current screen after rendering the app using the ServerContainer's ref. It demonstrates the usage of the getCurrentOptions method.

LANGUAGE: javascript
CODE:
const options = ref.current.getCurrentOptions();

----------------------------------------

TITLE: Enabling React Native Screens
DESCRIPTION: Code snippet to enable react-native-screens optimization by importing and calling enableScreens() before rendering navigation stacks. This should be placed in the app's entry point (index.js or App.js).

LANGUAGE: javascript
CODE:
// Before rendering any navigation stack
import { enableScreens } from 'react-native-screens';
enableScreens();

----------------------------------------

TITLE: Replacing Routes with StackActions in React Navigation
DESCRIPTION: Demonstrates how to use StackActions.replace() to replace a route in the navigation stack. The action requires a route name and optional params object.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

navigation.dispatch(
  StackActions.replace('Profile', {
    user: 'jane',
  })
);

----------------------------------------

TITLE: Modal Stack Navigator with Custom Transitions
DESCRIPTION: Example of creating a modal stack navigator with custom screen transition animations using the Animated API.

LANGUAGE: javascript
CODE:
const ModalNavigator = createStackNavigator(
  {
    Main: { screen: Main },
    Login: { screen: Login },
  },
  {
    headerMode: 'none',
    mode: 'modal',
    defaultNavigationOptions: {
      gesturesEnabled: false,
    },
    transitionConfig: () => ({
      transitionSpec: {
        duration: 300,
        easing: Easing.out(Easing.poly(4)),
        timing: Animated.timing,
      },
      screenInterpolator: (sceneProps) => {
        const { layout, position, scene } = sceneProps;
        const { index } = scene;

        const height = layout.initHeight;
        const translateY = position.interpolate({
          inputRange: [index - 1, index, index + 1],
          outputRange: [height, 0, 0],
        });

        const opacity = position.interpolate({
          inputRange: [index - 1, index - 0.99, index],
          outputRange: [0, 1, 1],
        });

        return { opacity, transform: [{ translateY }] };
      },
    }),
  }
);

----------------------------------------

TITLE: Enhanced Multiple Drawers with Context API
DESCRIPTION: Implementation of multiple drawers using Context API to manage drawer state and controls, providing better access to drawer functions throughout the component tree.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Button, View } from 'react-native';
import { Drawer } from 'react-native-drawer-layout';
import { createDrawerNavigator } from '@react-navigation/drawer';

const RightDrawerContext = React.createContext();

function HomeScreen({ navigation }) {
  const { openRightDrawer } = React.useContext(RightDrawerContext);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        onPress={() => navigation.openDrawer()}
        title="Open left drawer"
      />
      <Button onPress={() => openRightDrawer()} title="Open right drawer" />
    </View>
  );
}

const LeftDrawer = createDrawerNavigator();

const LeftDrawerScreen = () => {
  return (
    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>
      <LeftDrawer.Screen name="Home" component={HomeScreen} />
    </LeftDrawer.Navigator>
  );
};

function RightDrawerScreen() {
  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);

  const value = React.useMemo(
    () => ({
      openRightDrawer: () => setRightDrawerOpen(true),
      closeRightDrawer: () => setRightDrawerOpen(false),
    }),
    []
  );

  return (
    <Drawer
      open={rightDrawerOpen}
      onOpen={() => setRightDrawerOpen(true)}
      onClose={() => setRightDrawerOpen(false)}
      drawerPosition="right"
      renderDrawerContent={() => <>{/* Right drawer content */}</>}
    >
      <RightDrawerContext.Provider value={value}>
        <LeftDrawerScreen />
      </RightDrawerContext.Provider>
    </Drawer>
  );
}

----------------------------------------

TITLE: Checking Drawer Status in React Navigation
DESCRIPTION: This snippet demonstrates how to determine if the drawer is open or closed using the useDrawerStatus hook from @react-navigation/drawer.

LANGUAGE: javascript
CODE:
import { useDrawerStatus } from '@react-navigation/drawer';

// ...

const isDrawerOpen = useDrawerStatus() === 'open';

----------------------------------------

TITLE: Checking Drawer Status in React Navigation
DESCRIPTION: This snippet demonstrates how to determine if the drawer is open or closed using the useDrawerStatus hook from @react-navigation/drawer.

LANGUAGE: javascript
CODE:
import { useDrawerStatus } from '@react-navigation/drawer';

// ...

const isDrawerOpen = useDrawerStatus() === 'open';

----------------------------------------

TITLE: Hidden Header and Tab Bar Implementation in React Navigation
DESCRIPTION: Example showing basic navigation setup with hidden header and tab bar components. Demonstrates potential issues with content being hidden by device UI elements when safe areas aren't handled.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function Demo() {
  return (
    <View
      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}
const Stack = createNativeStackNavigator();
const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator
        initialRouteName="Home"
        screenOptions={{ headerShown: false }}
      >
        <Stack.Screen name="Home">
          {() => (
            <Tab.Navigator
              initialRouteName="Analytics"
              tabBar={() => null}
              screenOptions={{ headerShown: false }}
            >
              <Tab.Screen name="Analytics" component={Demo} />
              <Tab.Screen name="Profile" component={Demo} />
            </Tab.Navigator>
          )}
        </Stack.Screen>

        <Stack.Screen name="Settings" component={Demo} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Accessing Route Params in React Navigation
DESCRIPTION: Demonstrates how to access route parameters using the state property of the navigation prop.

LANGUAGE: javascript
CODE:
class ProfileScreen extends React.Component {
  render() {
    return <Text>Name: {this.props.navigation.state.params.name}</Text>;
  }
}

----------------------------------------

TITLE: Custom Action Handler in Tab Router
DESCRIPTION: Implementation of a custom tab router that extends the default TabRouter to add a custom 'CLEAR_HISTORY' action.

LANGUAGE: javascript
CODE:
import { TabRouter } from '@react-navigation/native';

const MyTabRouter = (options) => {
  const router = TabRouter(options);

  return {
    ...router,
    getStateForAction(state, action, options) {
      switch (action.type) {
        case 'CLEAR_HISTORY':
          return {
            ...state,
            routeKeyHistory: [],
          };
        default:
          return router.getStateForAction(state, action, options);
      }
    },

    actionCreators: {
      ...router.actionCreators,
      clearHistory() {
        return { type: 'CLEAR_HISTORY' };
      },
    },
  };
};

----------------------------------------

TITLE: Toggling Drawer with DrawerActions in React Navigation
DESCRIPTION: Illustrates using the toggleDrawer action to toggle the drawer navigation pane state between open and closed.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Nested Navigation State Example in React Navigation
DESCRIPTION: Shows how navigation state is structured when using nested navigators, such as a tab navigator within a stack navigator.

LANGUAGE: javascript
CODE:
const state = {
  type: 'stack',
  key: 'stack-1',
  routeNames: ['Home', 'Profile', 'Settings'],
  routes: [
    {
      key: 'home-1',
      name: 'Home',
      state: {
        key: 'tab-1',
        routeNames: ['Feed', 'Library', 'Favorites'],
        routes: [
          { key: 'feed-1', name: 'Feed', params: { sortBy: 'latest' } },
          { key: 'library-1', name: 'Library' },
          { key: 'favorites-1', name: 'Favorites' },
        ],
        index: 0,
      },
    },
    { key: 'settings-1', name: 'Settings' },
  ],
  index: 1,
};

----------------------------------------

TITLE: Configuring Tab Navigator Options within Stack Navigator
DESCRIPTION: Example showing incorrect attempt to set tab bar labels from stack navigator screens, demonstrating that options can only be modified from immediate screen components.

LANGUAGE: javascript
CODE:
const Tab = createBottomTabNavigator();
const HomeStack = createStackNavigator();
const SettingsStack = createStackNavigator();

function HomeStackScreen() {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen
        name="A"
        component={A}
        options={{ tabBarLabel: 'Home!' }}
      />
    </HomeStack.Navigator>
  );
}

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen
        name="B"
        component={B}
        options={{ tabBarLabel: 'Settings!' }}
      />
    </SettingsStack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeStackScreen} />
        <Tab.Screen name="Settings" component={SettingsStackScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Importing and Using Native Stack Navigator (Static)
DESCRIPTION: Example of importing and using the Native Stack Navigator with static configuration

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Button onPress={() => navigation.navigate('Profile')}>
        Go to Profile
      </Button>
    </View>
  );
}

function ProfileScreen() {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Profile Screen</Text>
    </View>
  );
}

const MyStack = createNativeStackNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

const Navigation = createStaticNavigation(MyStack);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Customizing Path Generation in useLinking for React Navigation
DESCRIPTION: This snippet demonstrates how to override the default path generation logic in the useLinking hook for custom deep linking behavior.

LANGUAGE: javascript
CODE:
useLinking(ref, {
  prefixes: ['https://mychat.com', 'mychat://'],
  config: {
    screens: {
      Chat: 'feed/:sort',
    },
  },
  getPathFromState(state, config) {
    // Return a path string here
    // You can also reuse the default logic by importing `getPathFromState` from `@react-navigation/native`
  },
});

----------------------------------------

TITLE: Drawer Content Options Configuration
DESCRIPTION: Example of configuring contentOptions for DrawerItems including styling and colors

LANGUAGE: javascript
CODE:
contentOptions: {
  activeTintColor: '#e91e63',
  itemsContainerStyle: {
    marginVertical: 0,
  },
  iconContainerStyle: {
    opacity: 1
  }
}

----------------------------------------

TITLE: Setting Params for a Specific Route in React Navigation
DESCRIPTION: Demonstrates how to use CommonActions.setParams with a source property to update parameters for a specific route.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch({
  ...CommonActions.setParams({ user: 'Wojtek' }),
  source: route.key,
});

----------------------------------------

TITLE: Customizing Navigation Actions in React Navigation
DESCRIPTION: Demonstrates how to override default navigation behavior by customizing the getStateForAction method to handle custom navigation actions.

LANGUAGE: javascript
CODE:
const MyApp = createStackNavigator(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyApp.router.getStateForAction;

MyApp.router.getStateForAction = (action, state) => {
  if (state && action.type === 'PushTwoProfiles') {
    const routes = [
      ...state.routes,
      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },
      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },
    ];
    return {
      ...state,
      routes,
      index: routes.length - 1,
    };
  }
  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Server Rendering with Status Code Handling
DESCRIPTION: Demonstrates how to integrate status code handling into the server rendering process using the StatusCodeContext.

LANGUAGE: javascript
CODE:
const status = { code: 200 };

const html = ReactDOMServer.renderToString(
  <StatusCodeContext.Provider value={status}>
    <ServerContainer ref={ref} location={location}>
      {element}
    </ServerContainer>
  </StatusCodeContext.Provider>
);

ctx.status = status.code;

----------------------------------------

TITLE: Configuring Nested Navigator Types in React Navigation
DESCRIPTION: This snippet shows how to specify the param list for a nested navigator explicitly when using the dynamic API in React Navigation.

LANGUAGE: typescript
CODE:
type HomeTabsParamList = {
  Feed: undefined;
  Profile: undefined;
};

type HomeTabsProps = StaticScreenProps<
  NavigatorScreenParams<HomeTabsParamList>
>;

function HomeTabs(_: HomeTabsProps) {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Feed" component={FeedScreen} />
      <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Implementing useScrollToTop with Custom Scroll Offset in React Navigation
DESCRIPTION: This snippet demonstrates how to use useScrollToTop with a custom scroll offset. It wraps the ref in an object with a custom scrollToTop method that scrolls to a specific y-coordinate (100 in this example).

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { ScrollView } from 'react-native';
import { useScrollToTop } from '@react-navigation/native';

function Albums() {
  const ref = React.useRef(null);

  useScrollToTop(
    React.useRef({
      scrollToTop: () => ref.current?.scrollTo({ y: 100 }),
    })
  );

  return <ScrollView ref={ref}>{/* content */}</ScrollView>;
}

----------------------------------------

TITLE: Setting Up Project Environment
DESCRIPTION: Command to clone the initial project setup from GitHub repository.

LANGUAGE: bash
CODE:
git clone https://github.com/artyorsh/react-navigation-ex-demo

----------------------------------------

TITLE: Defining Custom Theme in React Navigation 5
DESCRIPTION: Demonstrates how to create a custom theme object for React Navigation 5, specifying colors for various UI elements like background, text, and borders.

LANGUAGE: javascript
CODE:
const MyTheme = {
  dark: false,
  colors: {
    primary: 'rgb(255, 45, 85)',
    background: 'rgb(242, 242, 242)',
    card: 'rgb(255, 255, 255)',
    text: 'rgb(28, 28, 30)',
    border: 'rgb(199, 199, 204)',
  },
};

----------------------------------------

TITLE: Navigating multiple times to the same route in React Navigation
DESCRIPTION: This snippet shows how to navigate multiple times to the Details screen using the push() method instead of navigate().

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.push('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Screen Listeners with Event Prevention
DESCRIPTION: Example of using the listeners prop on a Tab.Screen component to prevent default navigation behavior.

LANGUAGE: jsx
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={{
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();
    },
  }}
/>

----------------------------------------

TITLE: Basic Drawer Navigator Setup
DESCRIPTION: Basic implementation of a drawer navigator with two screens

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  return (
    <Drawer.Navigator>
      <Drawer.Screen name="Feed" component={Feed} />
      <Drawer.Screen name="Article" component={Article} />
    </Drawer.Navigator>
  );

----------------------------------------

TITLE: Updating Parameters in React Navigation
DESCRIPTION: This snippet demonstrates how to update the parameters of a screen using the setParams method from the navigation prop.

LANGUAGE: javascript
CODE:
navigation.setParams({
  query: 'someText',
});

----------------------------------------

TITLE: Resetting navigator state in React Navigation
DESCRIPTION: Demonstration of using the reset method to replace the entire navigation state with a new one.

LANGUAGE: jsx
CODE:
navigation.reset({
  index: 0,
  routes: [
    {
      name: 'Settings',
      params: { someParam: 'Param1' },
    },
  ],
});

----------------------------------------

TITLE: Updating Parameters in React Navigation
DESCRIPTION: This snippet demonstrates how to update the parameters of a screen using the setParams method from the navigation prop.

LANGUAGE: javascript
CODE:
navigation.setParams({
  query: 'someText',
});

----------------------------------------

TITLE: Using goBack to Navigate to Previous Screen in React Navigation
DESCRIPTION: This example shows how to use the goBack method to return to the previous screen in the navigation stack.

LANGUAGE: javascript
CODE:
function ProfileScreen({ navigation: { goBack } }) {
  return (
    <View>
      <Button onPress={() => goBack()} title="Go back from ProfileScreen" />
    </View>
  );
}

----------------------------------------

TITLE: Passing Parameters to Nested Navigators in React Navigation
DESCRIPTION: Shows how to pass parameters to a screen within a nested navigator using the screen and params properties in the navigate method.

LANGUAGE: javascript
CODE:
navigation.navigate('Account', {
  screen: 'Settings',
  params: { user: 'jane' },
});

----------------------------------------

TITLE: Installing React Navigation Elements Package
DESCRIPTION: Command to install the @react-navigation/elements package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/elements@^6.x

----------------------------------------

TITLE: Using useIsFocused Hook with Static Navigation
DESCRIPTION: Example showing how to implement the useIsFocused hook in a React Navigation app using static navigation configuration. The hook returns a boolean indicating whether the screen is currently focused.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { createStaticNavigation } from '@react-navigation/native';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { useIsFocused } from '@react-navigation/native';

function ProfileScreen() {
  const isFocused = useIsFocused();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>{isFocused ? 'focused' : 'unfocused'}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Basic Tab Router in React Navigation
DESCRIPTION: Example implementation of a custom tab router with core navigation state management functions including initialization, rehydration, and action handling.

LANGUAGE: javascript
CODE:
const router = {
  type: 'tab',

  getInitialState({ routeNames, routeParamList }) {
    const index =
      options.initialRouteName === undefined
        ? 0
        : routeNames.indexOf(options.initialRouteName);

    return {
      stale: false,
      type: 'tab',
      key: shortid(),
      index,
      routeNames,
      routes: routeNames.map(name => ({
        name,
        key: name,
        params: routeParamList[name],
      })),
    };
  },

  getRehydratedState(partialState, { routeNames, routeParamList }) {
    const state = partialState;

    if (state.stale === false) {
      return state as NavigationState;
    }

    const routes = state.routes
      .filter(route => routeNames.includes(route.name))
      .map(
        route =>
          ({
            ...route,
            key: route.key || `${route.name}-${shortid()}`,
            params:
              routeParamList[route.name] !== undefined
                ? {
                    ...routeParamList[route.name],
                    ...route.params,
                  }
                : route.params,
          } as Route<string>)
      );

    return {
      stale: false,
      type: 'tab',
      key: shortid(),
      index:
        typeof state.index === 'number' && state.index < routes.length
          ? state.index
          : 0,
      routeNames,
      routes,
    };
  },

  getStateForRouteNamesChange(state, { routeNames }) {
    const routes = state.routes.filter(route =>
      routeNames.includes(route.name)
    );

    return {
      ...state,
      routeNames,
      routes,
      index: Math.min(state.index, routes.length - 1),
    };
  },

  getStateForRouteFocus(state, key) {
    const index = state.routes.findIndex(r => r.key === key);

    if (index === -1 || index === state.index) {
      return state;
    }

    return { ...state, index };
  },

  getStateForAction(state, action) {
    switch (action.type) {
      case 'NAVIGATE': {
        const index = state.routes.findIndex(
          route => route.name === action.payload.name
        );

        if (index === -1) {
          return null;
        }

        return { ...state, index };
      }

      default:
        return BaseRouter.getStateForAction(state, action);
    }
  },

  shouldActionChangeFocus() {
    return false;
  },
};

----------------------------------------

TITLE: Using useTheme Hook for Theme-Aware Components
DESCRIPTION: Demonstrates how to use the useTheme hook to create components that adapt to the current theme in React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useTheme } from 'react-navigation';

// Black background and white text in light theme, inverted on dark theme
function MyButton() {
  let theme = useTheme();

  return (
    <TouchableOpacity
      style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}
    >
      <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>
        Button!
      </Text>
    </TouchableOpacity>
  );
}

----------------------------------------

TITLE: Dynamic Root Navigator with Static Nested Navigator
DESCRIPTION: Example of using a dynamic root navigator with a statically configured nested navigator using createComponentForStaticNavigation.

LANGUAGE: javascript
CODE:
import { createComponentForStaticNavigation } from '@react-navigation/native';

const FeedScreen = createComponentForStaticNavigation(FeedTabs, 'Feed');

----------------------------------------

TITLE: Implementing back navigation in React Navigation
DESCRIPTION: This snippet demonstrates how to implement back navigation using the goBack() method and navigate to specific screens in the stack.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.push('Details')}
        />
        <Button
          title="Go to Home"
          onPress={() => this.props.navigation.navigate('Home')}
        />
        <Button
          title="Go back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Using Refs with NavigationContainer in React Navigation
DESCRIPTION: Shows how to attach a ref to the NavigationContainer to access helper methods like navigate.

LANGUAGE: jsx
CODE:
function App() {
  const navigationRef = React.useRef(null);

  return (
    <View style={{ flex: 1 }}>
      <Button onPress={() => navigationRef.current?.navigate('Home')}>
        Go home
      </Button>
      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Custom Drawer Content
DESCRIPTION: Implementation of custom drawer content with additional navigation items

LANGUAGE: javascript
CODE:
function CustomDrawerContent(props) {
  return (
    <DrawerContentScrollView {...props}>
      <DrawerItemList {...props} />
      <DrawerItem
        label="Help"
        onPress={() => Linking.openURL('https://mywebsite.com/help')}
      />
    </DrawerContentScrollView>
  );
}

----------------------------------------

TITLE: Deep Linking Configuration with Static API (JavaScript)
DESCRIPTION: Example showing how to configure deep linking paths directly within the screen configuration.

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator({
  screens: {
    Profile: {
      screen: ProfileScreen,
      linking: {
        path: 'user/:id',
      },
    },
    Settings: {
      screen: SettingsScreen,
      linking: {
        path: 'settings',
      },
    },
  },
});

----------------------------------------

TITLE: Initial Parameters Setup
DESCRIPTION: Example of setting initial parameters for a screen that will be merged with navigation params.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Details"
  component={DetailsScreen}
  initialParams={{ itemId: 42 }}
/>

----------------------------------------

TITLE: Implementing Third-Party Deep Link Integration
DESCRIPTION: Demonstrates how to integrate third-party deep linking services like Firebase Dynamic Links with React Navigation.

LANGUAGE: javascript
CODE:
const linking = {
  prefixes: ['myapp://', 'https://myapp.com'],

  async getInitialURL() {
    const { isAvailable } = utils().playServicesAvailability;

    if (isAvailable) {
      const initialLink = await dynamicLinks().getInitialLink();

      if (initialLink) {
        return initialLink.url;
      }
    }

    const url = await Linking.getInitialURL();

    return url;
  },

  subscribe(listener) {
    const unsubscribeFirebase = dynamicLinks().onLink(({ url }) => {
      listener(url);
    });

    const linkingSubscription = Linking.addEventListener('url', ({ url }) => {
      listener(url);
    });

    return () => {
      unsubscribeFirebase();
      linkingSubscription.remove();
    };
  },
};

----------------------------------------

TITLE: Using DrawerProgressContext in class components
DESCRIPTION: Example of using DrawerProgressContext to access drawer progress in class components.

LANGUAGE: javascript
CODE:
import { DrawerProgressContext } from 'react-native-drawer-layout';

class MyComponent extends React.Component {
  static contextType = DrawerProgressContext;

  render() {
    const progress = this.context;

    // ...
  }
}

----------------------------------------

TITLE: Navigating to Nested Screens with Params
DESCRIPTION: Demonstrates how to navigate to a screen in a nested navigator while passing parameters to the target screen.

LANGUAGE: javascript
CODE:
navigation.navigate('More', {
  screen: 'Messages',
  params: { user: 'jane' },
});

----------------------------------------

TITLE: Dispatching DrawerActions in React Navigation
DESCRIPTION: This snippet demonstrates how to import DrawerActions from react-navigation-drawer and dispatch a toggleDrawer action using the navigation prop.

LANGUAGE: javascript
CODE:
import { DrawerActions } from 'react-navigation-drawer';

this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Wrapping a Class Component to Use useTheme Hook in React
DESCRIPTION: This example shows how to use the useTheme hook with a class component by wrapping it in a functional component. The theme is passed as a prop to the class component.

LANGUAGE: javascript
CODE:
class MyButton extends React.Component {
  render() {
    // Get it from props
    const { theme } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const theme = useTheme();

  return <MyButton {...props} theme={theme} />;
}

----------------------------------------

TITLE: Configuring Tab Navigator Icons with screenOptions
DESCRIPTION: Demonstrates how to set up tab navigator icons using screenOptions with a function that receives route information. Uses MaterialCommunityIcons for the tab icons.

LANGUAGE: javascript
CODE:
const Tab = createBottomTabNavigator({
  screenOptions: ({ route }) => ({
    tabBarIcon: ({ color, size }) => {
      const icons = {
        Home: 'home',
        Profile: 'account',
      };

      return (
        <MaterialCommunityIcons
          name={icons[route.name]}
          color={color}
          size={size}
        />
      );
    },
  }),
  screens: {
    Home: EmptyScreen,
    Profile: EmptyScreen,
  },
});

----------------------------------------

TITLE: Installing React Navigation Elements
DESCRIPTION: Commands to install the @react-navigation/elements package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/elements

----------------------------------------

TITLE: Creating Stack Navigator in React Navigation 2.0
DESCRIPTION: Shows the new method for creating a stack navigator in React Navigation 2.0, using a function instead of a constructor.

LANGUAGE: javascript
CODE:
createStackNavigator()

----------------------------------------

TITLE: Configuring TabBarOptions for iOS Tab Bar in React Navigation
DESCRIPTION: Example of configuring tabBarOptions for the TabBarBottom component, which is the default tab bar on iOS. This includes setting active and inactive colors, label styles, and background color.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  activeTintColor: '#e91e63',
  labelStyle: {
    fontSize: 12,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Navigator Initial Route Configuration
DESCRIPTION: Examples of setting the initial route name in both static and dynamic configurations.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  initialRouteName: 'Home',
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

LANGUAGE: jsx
CODE:
function MyStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Creating Custom Navigator with createNavigator API
DESCRIPTION: Demonstrates using the createNavigator utility to combine a router and navigation view into a custom navigator component.

LANGUAGE: javascript
CODE:
import { createNavigator } from 'react-navigation';

const AppNavigator = createNavigator(NavigationView, router, navigationConfig);

<AppNavigator
  navigation={{ state, dispatch, addListener }}
  screenProps={...}
/>

----------------------------------------

TITLE: Implementing TabActions.jumpTo in React Navigation (Static Configuration)
DESCRIPTION: This snippet demonstrates how to use TabActions.jumpTo to navigate between tabs in a React Navigation tab navigator with static configuration. It shows the creation of a jumpTo action and its dispatch within a button press handler.

LANGUAGE: javascript
CODE:
function HomeScreen() {
  const navigation = useNavigation();
  const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home!</Text>
      <Button
        onPress={() => {
          navigation.dispatch(jumpToAction);
        }}
      >
        Jump to Profile
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Implementing usePreventRemove with Static Navigation in React Native
DESCRIPTION: Example showing how to implement the usePreventRemove hook with static navigation configuration. The code demonstrates preventing navigation when there are unsaved changes in a text input, showing different confirmation dialogs for web and mobile platforms.

LANGUAGE: javascript
CODE:
const EditTextScreen = () => {
  const [text, setText] = React.useState('');
  const navigation = useNavigation();

  const hasUnsavedChanges = Boolean(text);

  usePreventRemove(hasUnsavedChanges, ({ data }) => {
    if (Platform.OS === 'web') {
      const discard = confirm(
        'You have unsaved changes. Discard them and leave the screen?'
      );

      if (discard) {
        navigation.dispatch(data.action);
      }
    } else {
      Alert.alert(
        'Discard changes?',
        'You have unsaved changes. Discard them and leave the screen?',
        [
          { text: "Don't leave", style: 'cancel', onPress: () => {} },
          {
            text: 'Discard',
            style: 'destructive',
            onPress: () => navigation.dispatch(data.action),
          },
        ]
      );
    }
  });

  return (
    <View style={styles.content}>
      <TextInput
        autoFocus
        style={styles.input}
        value={text}
        placeholder="Type something…"
        onChangeText={setText}
      />
    </View>
  );
};

----------------------------------------

TITLE: Basic Navigator Screen Setup
DESCRIPTION: Shows the basic structure for setting up screens within a Stack Navigator, defining home and profile routes.

LANGUAGE: jsx
CODE:
<Stack.Navigator>
  <Stack.Screen name="Home" component={HomeScreen} />
  <Stack.Screen name="Profile" component={ProfileScreen} />
</Stack.Navigator>

----------------------------------------

TITLE: Implementing Stack Navigator with Custom Status Bar in React Native
DESCRIPTION: This snippet demonstrates how to create a stack navigator with two screens, each having a different status bar configuration. It uses the StatusBar component from React Native and SafeAreaView for proper layout.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, StatusBar, Button, StyleSheet } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import SafeAreaView from 'react-native-safe-area-view';

function Screen1({ navigation }) {
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>
      <StatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen2')}
        color="#fff"
      />
    </SafeAreaView>
  );
}

function Screen2({ navigation }) {
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>
      <StatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen1')}
      />
    </SafeAreaView>
  );
}

const Stack = createStackNavigator();

export default function App() {
  return (
    <SafeAreaProvider>
      <NavigationContainer>
        <Stack.Navigator headerMode="none">
          <Stack.Screen name="Screen1" component={Screen1} />
          <Stack.Screen name="Screen2" component={Screen2} />
        </Stack.Navigator>
      </NavigationContainer>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', alignItems: 'center' },
});

----------------------------------------

TITLE: Implementing Navigator Component in React Navigation
DESCRIPTION: Demonstrates the basic setup of a NavigationContainer and Stack Navigator in a React Native app. Shows how to wrap navigation structure and define screen components.

LANGUAGE: javascript
CODE:
function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator> // <---- This is a Navigator
        <Stack.Screen name="Home" component={HomeScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Shared Header Styles Across Screens
DESCRIPTION: Shows how to share common header styles across multiple screens using screenOptions.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}
    >
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Custom Tab Bar Implementation
DESCRIPTION: Example of implementing a custom tab bar component with animation and interaction handling.

LANGUAGE: javascript
CODE:
import { Animated, View, TouchableOpacity } from 'react-native';

function MyTabBar({ state, descriptors, navigation, position }) {
  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label =
          options.tabBarLabel !== undefined
            ? options.tabBarLabel
            : options.title !== undefined
            ? options.title
            : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name, route.params);
          }
        };

        const onLongPress = () => {
          navigation.emit({
            type: 'tabLongPress',
            target: route.key,
          });
        };

        const inputRange = state.routes.map((_, i) => i);
        const opacity = position.interpolate({
          inputRange,
          outputRange: inputRange.map(i => (i === index ? 1 : 0)),
        });

        return (
          <TouchableOpacity
            accessibilityRole="button"
            accessibilityState={isFocused ? { selected: true } : {}}
            accessibilityLabel={options.tabBarAccessibilityLabel}
            testID={options.tabBarTestID}
            onPress={onPress}
            onLongPress={onLongPress}
            style={{ flex: 1 }}
          >
            <Animated.Text style={{ opacity }}>
              {label}
            </Animated.Text>
          </TouchableOpacity>
        );
      })}
    </View>
  );
}

----------------------------------------

TITLE: OS Theme Detection Implementation
DESCRIPTION: Implementation of system theme detection using react-native-appearance, including provider setup and theme application.

LANGUAGE: javascript
CODE:
import { AppearanceProvider, useColorScheme } from 'react-native-appearance';

// Other navigation code goes here...
let Navigation = createAppContainer(RootStack);

export default () => {
  let theme = useColorScheme();

  return (
    <AppearanceProvider>
      <Navigation theme={theme}>
    </AppearanceProvider>
  )
}

----------------------------------------

TITLE: Installing React Native Tab View Dependencies
DESCRIPTION: Commands for installing react-native-tab-view and react-native-pager-view packages using npm, yarn, or expo CLI

LANGUAGE: bash
CODE:
npm install react-native-tab-view
npm install react-native-pager-view

----------------------------------------

TITLE: Basic Drawer Implementation Example
DESCRIPTION: Quick start example showing how to implement a basic drawer with open/close functionality

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text } from 'react-native';
import { Drawer } from 'react-native-drawer-layout';
import { Button } from '@react-navigation/elements';

export default function DrawerExample() {
  const [open, setOpen] = React.useState(false);

  return (
    <Drawer
      open={open}
      onOpen={() => setOpen(true)}
      onClose={() => setOpen(false)}
      renderDrawerContent={() => {
        return <Text>Drawer content</Text>;
      }}
    >
      <Button
        onPress={() => setOpen((prevOpen) => !prevOpen)}
        title={`${open ? 'Close' : 'Open'} drawer`}
      />
    </Drawer>
  );
}

----------------------------------------

TITLE: Implementing Custom Router in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom router object with required functions and use it in a React component. It includes methods for state management, action handling, and component retrieval.

LANGUAGE: javascript
CODE:
const MyRouter = {
  getStateForAction: (action, state) => ({}),
  getActionForPathAndParams: (path, params) => null,
  getPathAndParamsForState: (state) => null,
  getComponentForState: (state) => MyScreen,
  getComponentForRouteName: (routeName) => MyScreen,
};

// Now, you can make a navigator by putting the router on it:
class MyNavigator extends React.Component {
  static router = MyRouter;
  render() {
    ...
  }
}

----------------------------------------

TITLE: CommonActions.goBack Implementation
DESCRIPTION: Shows how to navigate back using CommonActions.goBack with optional source and target parameters.

LANGUAGE: JavaScript
CODE:
navigation.dispatch({
  ...CommonActions.goBack(),
  source: route.key,
  target: route?.params?.key,
});

----------------------------------------

TITLE: Adding Navigation Listeners in React Navigation 5.x
DESCRIPTION: Example of how to add navigation event listeners using the new event system in React Navigation 5.x.

LANGUAGE: javascript
CODE:
function Profile({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // do something
    });

    return unsubscribe;
  }, [navigation]);

  return <ProfileContent />;
}

----------------------------------------

TITLE: Navigation Blocking Stack Router
DESCRIPTION: Example of a custom stack router that prevents navigation when certain conditions are met, specifically blocking new screens when isEditing is true.

LANGUAGE: javascript
CODE:
import { StackRouter } from '@react-navigation/native';

const MyStackRouter = (options) => {
  const router = StackRouter(options);

  return {
    ...router,
    getStateForAction(state, action, options) {
      const result = router.getStateForAction(state, action, options);

      if (
        result != null &&
        result.index > state.index &&
        state.routes[state.index].params?.isEditing
      ) {
        return state;
      }

      return result;
    },
  };
};

----------------------------------------

TITLE: Animated Drawer Content in React Navigation
DESCRIPTION: This snippet shows how to create an animated drawer content component using the drawerOpenProgress prop for parallax motion effects.

LANGUAGE: javascript
CODE:
const CustomDrawerContentComponent = (props) => {
  const translateX = props.drawerOpenProgress.interpolate({
    inputRange: [0, 1],
    outputRange: [-100, 0],
  });

  return (
    <Animated.View style={{ transform: [{ translateX }] }}>
      {/* ... drawer contents */}
    </Animated.View>
  );
};

----------------------------------------

TITLE: Checking Drawer Open State in React Navigation
DESCRIPTION: Using the useIsDrawerOpen hook to determine if the drawer is currently open or closed.

LANGUAGE: javascript
CODE:
import { useIsDrawerOpen } from '@react-navigation/drawer';

// ...

const isDrawerOpen = useIsDrawerOpen();

----------------------------------------

TITLE: Checking Drawer Open State in React Navigation
DESCRIPTION: Using the useIsDrawerOpen hook to determine if the drawer is currently open or closed.

LANGUAGE: javascript
CODE:
import { useIsDrawerOpen } from '@react-navigation/drawer';

// ...

const isDrawerOpen = useIsDrawerOpen();

----------------------------------------

TITLE: Jumping to Route in React Navigation Drawer
DESCRIPTION: Demonstrates the use of the jumpTo action to navigate to a specific route in a React Navigation drawer navigator, including passing parameters.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

const jumpToAction = DrawerActions.jumpTo('Profile', { name: 'Satya' });

navigation.dispatch(jumpToAction);

----------------------------------------

TITLE: Configuring Stack Navigator with Deep Linking Path in React Navigation
DESCRIPTION: This snippet demonstrates how to configure a stack navigator with a deep linking path for the Chat screen. It uses createStackNavigator and createAppContainer from react-navigation.

LANGUAGE: javascript
CODE:
const SimpleApp = createAppContainer(
  createStackNavigator({
    Home: { screen: HomeScreen },
    Chat: {
      screen: ChatScreen,
      path: 'chat/:user',
    },
  })
);

----------------------------------------

TITLE: Dispatching a Custom Navigation Action in React Navigation
DESCRIPTION: This snippet demonstrates how to use the dispatch method to send a custom navigation action, in this case navigating to the Profile screen.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch(
  CommonActions.navigate({
    name: 'Profile',
    params: {},
  })
);

----------------------------------------

TITLE: Implementing Custom Link Component with useLinkProps in React Navigation
DESCRIPTION: Example of creating a custom LinkButton component using useLinkProps hook with platform-specific handling for web and native platforms. Demonstrates proper implementation of hover states and click handling.

LANGUAGE: javascript
CODE:
import { useLinkProps } from '@react-navigation/native';

// ...

const LinkButton = ({ to, action, children, ...rest }) => {
  const { onPress, ...props } = useLinkProps({ to, action });

  const [isHovered, setIsHovered] = React.useState(false);

  if (Platform.OS === 'web') {
    return (
      <View
        onClick={onPress}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        style={{ transitionDuration: '150ms', opacity: isHovered ? 0.5 : 1 }}
        {...props}
        {...rest}
      >
        <Text>{children}</Text>
      </View>
    );
  }

  return (
    <TouchableOpacity onPress={onPress} {...props} {...rest}>
      <Text>{children}</Text>
    </TouchableOpacity>
  );
};

function Home() {
  return (
    <LinkButton to={{ screen: 'Profile', params: { id: 'jane' } }}>
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: Setting Location Prop for ServerContainer
DESCRIPTION: This snippet shows how to set the location prop for ServerContainer, which is used to determine the initial navigation state for server-side rendering.

LANGUAGE: jsx
CODE:
<ServerContainer location={{ pathname: '/profile', search: '' }}>
  <App />
</ServerContainer>

----------------------------------------

TITLE: Using Route Params in Header Title
DESCRIPTION: Shows how to use route parameters to dynamically set the header title using options as a function.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ title: 'My home' }}
      />
      <Stack.Screen
        name="Profile"
        component={ProfileScreen}
        options={({ route }) => ({ title: route.params.name })}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Correct Component Definition for Navigation
DESCRIPTION: JavaScript code demonstrating the correct way to define components for use in navigation to avoid unmounting/remounting issues.

LANGUAGE: javascript
CODE:
const Home = () => {
  // ...

  return <SomeComponent />;
};

const RootStack = createNativeStackNavigator({
  screens: {
    Home: Home,
  },
});

const Navigation = createStaticNavigation(RootStack);

function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Incorrect Usage with navigation.getState() - React Navigation
DESCRIPTION: Demonstrates incorrect usage of navigation.getState() that won't update on navigation changes.

LANGUAGE: javascript
CODE:
function Profile() {
  const routesLength = navigation.getState().routes.length; // Don't do this

  return <Text>Number of routes: {routesLength}</Text>;
}

----------------------------------------

TITLE: Basic Server Rendering Setup with React Native Web
DESCRIPTION: Example of basic server rendering implementation using React Native Web and ReactDOMServer without React Navigation integration.

LANGUAGE: javascript
CODE:
import { AppRegistry } from 'react-native-web';
import ReactDOMServer from 'react-dom/server';
import App from './src/App';

const { element, getStyleElement } = AppRegistry.getApplication('App');

const html = ReactDOMServer.renderToString(element);
const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());

const document = `
  <!DOCTYPE html>
  <html style="height: 100%">
  <meta charset="utf-8">
  <meta httpEquiv="X-UA-Compatible" content="IE=edge">
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover"
  >
  ${css}
  <body style="min-height: 100%">
  <div id="root" style="display: flex; min-height: 100vh">
  ${html}
  </div>
`;

----------------------------------------

TITLE: Dispatching Drawer Actions in React Navigation
DESCRIPTION: Example showing how to import DrawerActions from react-navigation-drawer and dispatch a drawer toggle action using the navigation prop. This demonstrates the basic usage pattern for drawer navigation control.

LANGUAGE: javascript
CODE:
import { DrawerActions } from 'react-navigation-drawer';

this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Using Optional Chaining for Params in React Navigation 5.x
DESCRIPTION: Example of using optional chaining and nullish coalescing operators to safely access route params with default values in React Navigation 5.x.

LANGUAGE: javascript
CODE:
route.params?.someParam ?? 'defaultValue';

----------------------------------------

TITLE: Using useLinkTo Hook in React Functional Component
DESCRIPTION: Demonstrates how to use the useLinkTo hook in a functional component to enable path-based navigation. The example shows navigation to a profile page using a path string.

LANGUAGE: javascript
CODE:
import { useLinkTo } from '@react-navigation/native';

// ...

function Home() {
  const linkTo = useLinkTo();

  return (
    <Button onPress={() => linkTo('/profile/jane')}>
      Go to Jane's profile
    </Button>
  );
}

----------------------------------------

TITLE: Opening Drawer with DrawerActions in React Navigation
DESCRIPTION: Demonstrates how to use the openDrawer action to programmatically open the drawer navigation pane.

LANGUAGE: javascript
CODE:
import { DrawerActions } from '@react-navigation/native';

navigation.dispatch(DrawerActions.openDrawer());

----------------------------------------

TITLE: Group Screen Options Configuration
DESCRIPTION: Demonstrates how to use Stack.Group to apply common screen options to multiple screens within groups.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Group
    screenOptions={{ headerStyle: { backgroundColor: 'papayawhip' } }}
  >
    <Stack.Screen name="Home" component={HomeScreen} />
    <Stack.Screen name="Profile" component={ProfileScreen} />
  </Stack.Group>
  <Stack.Group screenOptions={{ presentation: 'modal' }}>
    <Stack.Screen name="Settings" component={Settings} />
    <Stack.Screen name="Share" component={Share} />
  </Stack.Group>
</Stack.Navigator>

----------------------------------------

TITLE: Creating RootNavigation module for React Navigation
DESCRIPTION: This code creates a RootNavigation module with functions to dispatch navigation actions using the navigation ref.

LANGUAGE: javascript
CODE:
// RootNavigation.js

import { createNavigationContainerRef } from '@react-navigation/native';

export const navigationRef = createNavigationContainerRef();

export function navigate(name, params) {
  if (navigationRef.isReady()) {
    navigationRef.navigate(name, params);
  }
}

// add other navigation functions that you need and export them

----------------------------------------

TITLE: Importing Gesture Handler for Native Platforms
DESCRIPTION: Code to conditionally import react-native-gesture-handler for native platforms.

LANGUAGE: javascript
CODE:
// gesture-handler.native.js
import 'react-native-gesture-handler';

LANGUAGE: javascript
CODE:
// gesture-handler.js
// Don't import react-native-gesture-handler on web

LANGUAGE: javascript
CODE:
// In your entry file (e.g., index.js or App.js)
import './gesture-handler';

----------------------------------------

TITLE: Importing Gesture Handler for Native Platforms
DESCRIPTION: Code to conditionally import react-native-gesture-handler for native platforms.

LANGUAGE: javascript
CODE:
// gesture-handler.native.js
import 'react-native-gesture-handler';

LANGUAGE: javascript
CODE:
// gesture-handler.js
// Don't import react-native-gesture-handler on web

LANGUAGE: javascript
CODE:
// In your entry file (e.g., index.js or App.js)
import './gesture-handler';

----------------------------------------

TITLE: Accessing Current Screen Options from ServerContainer Ref
DESCRIPTION: This snippet shows how to access the options for the current screen after rendering the app using the ServerContainer's ref.

LANGUAGE: javascript
CODE:
const options = ref.current.getCurrentOptions();

----------------------------------------

TITLE: Unlinking react-native-safe-area-context
DESCRIPTION: Command to unlink the react-native-safe-area-context library if it was manually linked.

LANGUAGE: bash
CODE:
react-native unlink react-native-safe-area-context

----------------------------------------

TITLE: Implementing Basic Drawer Navigation in React Native
DESCRIPTION: Complete setup of a drawer navigation system with Home and Settings screens. Includes component definitions and drawer navigator configuration with custom styling options.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <TouchableOpacity onPress={this.props.navigation.openDrawer}>
          <Text>Open Drawer</Text>
        </TouchableOpacity>
        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <TouchableOpacity onPress={this.props.navigation.openDrawer}>
          <Text>Open Drawer</Text>
        </TouchableOpacity>
        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>
      </View>
    );
  }
}

const DrawerNavigator = createDrawerNavigator(
  {
    Home: HomeScreen,
    Settings: SettingsScreen,
  },
  {
    drawerBackgroundColor: 'rgba(255,255,255,.9)',
    contentOptions: {
      activeTintColor: '#fff',
      activeBackgroundColor: '#6b52ae',
    },
  }
);

export default createAppContainer(DrawerNavigator);

----------------------------------------

TITLE: Overriding Default Navigation Options in a Screen Component
DESCRIPTION: This example shows how to override default navigation options set by a parent navigator in an individual screen component.

LANGUAGE: javascript
CODE:
class ProfileScreen extends React.Component {
  static navigationOptions = {
    headerTintColor: 'black',
  };
  ...
}

----------------------------------------

TITLE: Navigating with Redux State as Params
DESCRIPTION: Shows how to pass Redux state values as navigation parameters when navigating between screens.

LANGUAGE: javascript
CODE:
<Button
  title="Go to static counter screen"
  onPress={() =>
    props.navigation.navigate('StaticCounter', {
      count,
    })
  }
/>

----------------------------------------

TITLE: Listening to Parent Navigator Events in React Navigation
DESCRIPTION: This code snippet shows how to listen to events from a parent navigator when using nested navigators in React Navigation. It demonstrates using getParent() to access the parent navigator's event listener.

LANGUAGE: javascript
CODE:
const unsubscribe = navigation.getParent().addListener('tabPress', (e) => {
  // Do something
});

----------------------------------------

TITLE: Implementing Redux DevTools Extension in React Navigation
DESCRIPTION: Example of how to use the useReduxDevToolsExtension hook with NavigationContainer to enable Redux DevTools integration in a React Navigation app.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useReduxDevToolsExtension } from '@react-navigation/devtools';

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useReduxDevToolsExtension(navigationRef);

  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Creating Connected Counter Component
DESCRIPTION: Example of creating a Redux-connected counter component that can be used in navigation options.

LANGUAGE: javascript
CODE:
function Counter({ value }) {
  return <Text>Count: {value}</Text>;
}

const CounterContainer = connect((state) => ({ value: state.count }))(Counter);

----------------------------------------

TITLE: Screen Layout Configuration
DESCRIPTION: Shows how to implement custom layouts with error boundaries and suspense fallbacks for screens.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="MyScreen"
  component={MyScreenComponent}
  layout={({ children }) => (
    <ErrorBoundary>
      <React.Suspense
        fallback={
          <View style={styles.fallback}>
            <Text style={styles.text}>Loading…</Text>
          </View>
        }
      >
        {children}
      </React.Suspense>
    </ErrorBoundary>
  )}
/>

----------------------------------------

TITLE: Using useFocusEffect Hook for Screen Focus Actions in React Navigation
DESCRIPTION: This example shows how to use the useFocusEffect hook to perform actions when a screen comes into focus and clean up when it loses focus. It's useful for subscribing to APIs or managing resources.

LANGUAGE: javascript
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile({ userId }) {
  const [user, setUser] = React.useState(null);

  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, (user) => setUser(data));

      return () => unsubscribe();
    }, [userId])
  );

  return <ProfileContent user={user} />;
}

----------------------------------------

TITLE: Jumping to Drawer Route with DrawerActions in React Navigation
DESCRIPTION: Demonstrates the use of DrawerActions.jumpTo() to navigate to a specific route in a React Navigation drawer navigator. The example includes passing parameters and is shown for both static and dynamic navigation setups.

LANGUAGE: jsx
CODE:
const jumpToAction = DrawerActions.jumpTo('Profile', { user: 'Satya' });
navigation.dispatch(jumpToAction);

----------------------------------------

TITLE: Dynamic Group Screen Options
DESCRIPTION: Demonstrates how to use a function to dynamically set screen options based on route and navigation props.

LANGUAGE: javascript
CODE:
<Stack.Group
  screenOptions={({ route, navigation }) => ({
    title: route.params.title,
  })}
>
  {/* screens */}
</Stack.Group>

----------------------------------------

TITLE: Updating NavigationOptions with setParams in React Navigation
DESCRIPTION: This snippet shows how to update navigationOptions from within a component using the setParams method. It allows dynamic updates to the header configuration.

LANGUAGE: JavaScript
CODE:
/* Inside of render() */
<Button
  title="Update the title"
  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}
/>

----------------------------------------

TITLE: Reinstalling Dependencies with Yarn
DESCRIPTION: Commands to delete node_modules, yarn.lock, and reinstall dependencies using yarn.

LANGUAGE: bash
CODE:
rm -rf node_modules
rm yarn.lock
yarn

----------------------------------------

TITLE: Testing Data Fetching with useFocusEffect in React Navigation
DESCRIPTION: This test example demonstrates how to test data fetching logic using useFocusEffect in a React Navigation bottom tab navigator, including mocking network requests with Mock Service Worker.

LANGUAGE: javascript
CODE:
import './msw-node';

import { expect, jest, test } from '@jest/globals';
import { NavigationContainer } from '@react-navigation/native';
import { act, render, screen, userEvent } from '@testing-library/react-native';

import { MyTabs } from './MyTabs';

jest.useFakeTimers();

test('loads data on Pokemon info screen after focus', async () => {
  const user = userEvent.setup();

  render(
    <NavigationContainer>
      <MyTabs />
    </NavigationContainer>
  );

  const homeTabButton = screen.getByLabelText('Home, tab, 1 of 2');
  const profileTabButton = screen.getByLabelText('Profile, tab, 2 of 2');

  await user.press(profileTabButton);

  expect(screen.getByText('Loading...')).toBeVisible();

  await act(() => jest.runAllTimers());

  expect(screen.getByText('ditto')).toBeVisible();

  await user.press(homeTabButton);

  await act(() => jest.runAllTimers());

  await user.press(profileTabButton);

  expect(screen.queryByText('Loading...')).not.toBeVisible();
  expect(screen.getByText('ditto')).toBeVisible();
});

----------------------------------------

TITLE: Basic Navigation Options in Nested Navigators
DESCRIPTION: Demonstrates incorrect implementation of navigation options for a tab navigator containing stack navigators.

LANGUAGE: javascript
CODE:
class A extends React.Component {
  static navigationOptions = {
    tabBarLabel: 'Home!',
  };

  // etc..
}

class B extends React.Component {
  static navigationOptions = {
    tabBarLabel: 'Settings!',
  };

  // etc..
}

const HomeStack = createStackNavigator({ A });
const SettingsStack = createStackNavigator({ B });

export default createAppContainer(
  createBottomTabNavigator({
    HomeStack,
    SettingsStack,
  })
);

----------------------------------------

TITLE: Generating RootParamList for TypeScript in React Navigation
DESCRIPTION: This code snippet shows how to generate the RootParamList type for the root navigator and specify it as the default type for the RootParamList interface in React Navigation.

LANGUAGE: typescript
CODE:
import type { StaticParamList } from '@react-navigation/native';

const HomeTabs = createBottomTabNavigator({
  screens: {
    Feed: FeedScreen,
    Profile: ProfileScreen,
  },
});

const RootStack = createNativeStackNavigator({
  screens: {
    Home: HomeTabs,
  },
});

type RootStackParamList = StaticParamList<typeof RootStack>;

declare global {
  namespace ReactNavigation {
    interface RootParamList extends RootStackParamList {}
  }
}

----------------------------------------

TITLE: Adding Navigation Lifecycle Listener in React Navigation
DESCRIPTION: Shows how to subscribe to navigation lifecycle events using the addListener method from the navigation prop.

LANGUAGE: javascript
CODE:
const didBlurSubscription = this.props.navigation.addListener(
  'didBlur',
  (payload) => {
    console.debug('didBlur', payload);
  }
);

// Remove the listener when you are done
didBlurSubscription.remove();

----------------------------------------

TITLE: Creating a Focus-Aware Status Bar Component for React Navigation
DESCRIPTION: This snippet defines a FocusAwareStatusBar component that renders the StatusBar only when the screen is focused. It uses the useIsFocused hook from React Navigation to determine focus state.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { StatusBar } from 'react-native';
import { useIsFocused } from '@react-navigation/native';

function FocusAwareStatusBar(props) {
  const isFocused = useIsFocused();

  return isFocused ? <StatusBar {...props} /> : null;
}

----------------------------------------

TITLE: Implementing Screen Tracking with onNavigationStateChange in React Navigation
DESCRIPTION: This snippet demonstrates how to track screen views using onNavigationStateChange in React Navigation. It uses the react-native-google-analytics-bridge package to send data to Google Analytics. The code includes a helper function getActiveRouteName to extract the current screen name from the navigation state.

LANGUAGE: javascript
CODE:
import { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';

const tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);

// gets the current screen from navigation state
function getActiveRouteName(navigationState) {
  if (!navigationState) {
    return null;
  }
  const route = navigationState.routes[navigationState.index];
  // dive into nested navigators
  if (route.routes) {
    return getActiveRouteName(route);
  }
  return route.routeName;
}

const AppNavigator = createStackNavigator(AppRouteConfigs);

export default () => (
  <AppNavigator
    onNavigationStateChange={(prevState, currentState) => {
      const currentScreen = getActiveRouteName(currentState);
      const prevScreen = getActiveRouteName(prevState);

      if (prevScreen !== currentScreen) {
        // the line below uses the Google Analytics tracker
        // change the tracker here to use other Mobile analytics SDK.
        tracker.trackScreenView(currentScreen);
      }
    }}
  />
);

----------------------------------------

TITLE: Navigating Back from a Specific Route in React Navigation
DESCRIPTION: Shows how to use CommonActions.goBack with source and target properties to navigate back from a specific route.

LANGUAGE: javascript
CODE:
import { CommonActions } from '@react-navigation/native';

navigation.dispatch({
  ...CommonActions.goBack(),
  source: route.key,
  target: state.key,
});

----------------------------------------

TITLE: Adding a Button to the Header in React Navigation
DESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a Stack Navigator. It shows the basic structure for defining a header button with a custom onPress action.

LANGUAGE: javascript
CODE:
function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{
          headerTitle: (props) => <LogoTitle {...props} />,
          headerRight: () => (
            <Button
              onPress={() => alert('This is a button!')}
              title="Info"
              color="#fff"
            />
          ),
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Customizing Drawer Content
DESCRIPTION: Example of how to provide custom content for the drawer, including additional items and styling.

LANGUAGE: javascript
CODE:
function CustomDrawerContent(props) {
  return (
    <DrawerContentScrollView {...props}>
      <DrawerItemList {...props} />
      <DrawerItem
        label="Help"
        onPress={() => Linking.openURL('https://mywebsite.com/help')}
      />
    </DrawerContentScrollView>
  );
}

----------------------------------------

TITLE: Screen Options Configuration
DESCRIPTION: Demonstrates how to configure screen options both statically and dynamically using a function.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={{
    title: 'Awesome app',
  }}
/>

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={({ route, navigation }) => ({
    title: route.params.userId,
  })}
/>

----------------------------------------

TITLE: Implementing Multiple Drawers with react-native-drawer-layout
DESCRIPTION: Basic implementation of multiple drawers using react-native-drawer-layout and a drawer navigator. Shows how to create left and right drawers with basic navigation controls.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Button, View } from 'react-native';
import { Drawer } from 'react-native-drawer-layout';
import { createDrawerNavigator } from '@react-navigation/drawer';

function HomeScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.openDrawer()} title="Open drawer" />
    </View>
  );
}

const LeftDrawer = createDrawerNavigator();

const LeftDrawerScreen = () => {
  return (
    <LeftDrawer.Navigator screenOptions={{ drawerPosition: 'left' }}>
      <LeftDrawer.Screen name="Home" component={HomeScreen} />
    </LeftDrawer.Navigator>
  );
};

function RightDrawerScreen() {
  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);

  return (
    <Drawer
      open={rightDrawerOpen}
      onOpen={() => setRightDrawerOpen(true)}
      onClose={() => setRightDrawerOpen(false)}
      drawerPosition="right"
      renderDrawerContent={() => <>{/* Right drawer content */}</>}
    >
      <LeftDrawerScreen />
    </Drawer>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <RightDrawerScreen />
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Configuring Transition Animations
DESCRIPTION: Example of customizing transition animations for a screen in a stack navigator.

LANGUAGE: js
CODE:
Profile.navigationOptions = {
  transitionSpec: {
    open: config,
    close: config,
  },
  cardStyleInterpolator: forFade,
  headerStyleInterpolator: forFade,
};

----------------------------------------

TITLE: Header Interaction with Screen Component in React Navigation
DESCRIPTION: This snippet shows how to enable interaction between a header button and the screen component. It uses navigation params to pass a function from the component to the header.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      headerTitle: <LogoTitle />,
      headerRight: (
        <Button
          onPress={navigation.getParam('increaseCount')}
          title="+1"
          color="#fff"
        />
      ),
    };
  };

  componentDidMount() {
    this.props.navigation.setParams({ increaseCount: this._increaseCount });
  }

  state = {
    count: 0,
  };

  _increaseCount = () => {
    this.setState({ count: this.state.count + 1 });
  };

  /* later in the render function we display the count */
}

----------------------------------------

TITLE: Updating Babel Core
DESCRIPTION: Command to update the @babel/core package to the latest version.

LANGUAGE: bash
CODE:
npm install --save-dev @babel/core

----------------------------------------

TITLE: Theming Bottom Tab Navigator with Custom Component
DESCRIPTION: Shows how to theme a bottom tab navigator by creating a custom themed tab bar component in React Navigation.

LANGUAGE: jsx
CODE:
import {
  createAppContainer,
  createStackNavigator,
  createBottomTabNavigator,
  BottomTabBar,
  ThemeContext,
} from 'react-navigation';

const ThemeConstants = {
  light: {
    backgroundColor: '#fff',
    fontColor: '#000',
    activeTintColor: 'blue',
    inactiveTintColor: '#ccc',
  },
  dark: {
    backgroundColor: '#000',
    fontColor: '#fff',
    activeTintColor: '#fff',
    inactiveTintColor: '#888',
  },
};

class ThemedBottomTabBar extends React.Component {
  render() {
    return (
      <ThemeContext.Consumer>
        {({ theme }) => (
          <BottomTabBar
            {...this.props}
            activeTintColor={ThemeConstants[theme].activeTintColor}
            inactiveTintColor={ThemeConstants[theme].inactiveTintColor}
            style={{
              backgroundColor: ThemeConstants[theme].backgroundColor,
            }}
          />
        )}
      </ThemeContext.Consumer>
    );
  }
}

const Stack = createStackNavigator({ Home: HomeScreen });
const Tabs = createBottomTabNavigator(
  { Stack },
  { tabBarComponent: ThemedBottomTabBar }
);
const Navigation = createAppContainer(Tabs);

// And the rest of the code goes here...

----------------------------------------

TITLE: Customized Tab Navigation with Icons
DESCRIPTION: Extended tab navigator implementation with custom icons, colors, and navigation options using Ionicons.

LANGUAGE: jsx
CODE:
import Ionicons from 'react-native-vector-icons/Ionicons';
import { createBottomTabNavigator } from 'react-navigation';

export default createBottomTabNavigator(
  {
    Home: HomeScreen,
    Settings: SettingsScreen,
  },
  {
    navigationOptions: ({ navigation }) => ({
      tabBarIcon: ({ focused, horizontal, tintColor }) => {
        const { routeName } = navigation.state;
        let iconName;
        if (routeName === 'Home') {
          iconName = `ios-information-circle${focused ? '' : '-outline'}`;
        } else if (routeName === 'Settings') {
          iconName = `ios-options${focused ? '' : '-outline'}`;
        }
        return (
          <Ionicons
            name={iconName}
            size={horizontal ? 20 : 25}
            color={tintColor}
          />
        );
      },
    }),
    tabBarOptions: {
      activeTintColor: 'tomato',
      inactiveTintColor: 'gray',
    },
  }
);

----------------------------------------

TITLE: Using Params in Header Title for React Navigation
DESCRIPTION: Shows how to use navigation params to dynamically set the header title in React Navigation.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      title: navigation.getParam('otherParam', 'A Nested Details Screen'),
    };
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Accessing Redux State from Route Params
DESCRIPTION: Example of a component that receives and displays Redux state passed through navigation parameters.

LANGUAGE: javascript
CODE:
function StaticCounter({ route }) {
  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{route.params.count}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Using TabActions.jumpTo in React Navigation
DESCRIPTION: Demonstrates how to use TabActions.jumpTo to navigate between tabs. The action takes a route name and optional params object that will be merged into the destination route's parameters.

LANGUAGE: javascript
CODE:
import { TabActions } from '@react-navigation/native';

const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });

navigation.dispatch(jumpToAction);

----------------------------------------

TITLE: Problematic Direct Navigation Access in React Component
DESCRIPTION: Example showing incorrect usage of navigation prop in a component without proper navigation prop passing, which will result in an undefined error.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';

export default class MyBackButton extends React.Component {
  render() {
    // This will throw an 'undefined is not a function' exception because the navigation
    // prop is undefined.
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Complete Material Bottom Tabs Example
DESCRIPTION: Full implementation example with custom icons, labels, and styling for each tab screen.

LANGUAGE: javascript
CODE:
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';

const Tab = createMaterialBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator
      initialRouteName="Feed"
      activeColor="#e91e63"
      barStyle={{ backgroundColor: 'tomato' }}
    >
      <Tab.Screen
        name="Feed"
        component={Feed}
        options={{
          tabBarLabel: 'Home',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="home" color={color} size={26} />
          ),
        }}
      />
      <Tab.Screen
        name="Notifications"
        component={Notifications}
        options={{
          tabBarLabel: 'Updates',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="bell" color={color} size={26} />
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={Profile}
        options={{
          tabBarLabel: 'Profile',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="account" color={color} size={26} />
          ),
        }}
      />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Basic Header Component Usage
DESCRIPTION: Example showing how to use the Header component from @react-navigation/elements.

LANGUAGE: javascript
CODE:
import { Header } from '@react-navigation/elements';

function MyHeader() {
  return <Header title="My app" />;
}

----------------------------------------

TITLE: Route Configuration Example for Stack Navigator
DESCRIPTION: Demonstrates how to configure routes in a stack navigator including screen components, deep linking paths, and navigation options.

LANGUAGE: javascript
CODE:
createStackNavigator({
  Profile: {
    screen: ProfileScreen,
    path: 'people/:name',
    navigationOptions: ({ navigation }) => ({
      title: `${navigation.state.params.name}'s Profile'`,
    }),
  },
  ...MyOtherRoutes,
});

----------------------------------------

TITLE: Implementing Flipper Integration
DESCRIPTION: Example showing how to integrate Flipper debugging tools with React Navigation using the useFlipper hook.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useFlipper } from '@react-navigation/devtools';

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useFlipper(navigationRef);

  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Handling Deep Links Manually with React Native Linking API
DESCRIPTION: This JavaScript code demonstrates how to manually handle deep links using the React Native Linking API, including adding and removing event listeners.

LANGUAGE: javascript
CODE:
componentDidMount() {
    // [...]
    Linking.addEventListener('url', this.handleDeepLink)
}
componentWillUnmount() {
    // [...]
    Linking.removeEventListener('url', this.handleDeepLink);
}

handleDeepLink(e) {
    const route = e.url.replace(/.*?:\/\//g, '')
    // use route to navigate
    // ...
}

----------------------------------------

TITLE: Installing react-navigation-stack
DESCRIPTION: Command to install react-navigation-stack and its dependencies using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-navigation-stack @react-native-community/masked-view

----------------------------------------

TITLE: Importing Stack Actions in React Navigation 2.0
DESCRIPTION: Demonstrates how to import and use stack-specific actions in React Navigation 2.0, which were previously part of NavigationActions.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

// Usage
StackActions.push

----------------------------------------

TITLE: Manually Clearing Metro Bundler Cache
DESCRIPTION: Alternative command to manually clear the Metro bundler cache directory.

LANGUAGE: bash
CODE:
rm -rf $TMPDIR/metro-bundler-cache-*

----------------------------------------

TITLE: Implementing a Transparent Modal
DESCRIPTION: Example of how to create a transparent modal screen using Stack Navigator.

LANGUAGE: jsx
CODE:
import { Animated, View, Text, Pressable, StyleSheet } from 'react-native';
import { useTheme, useNavigation } from '@react-navigation/native';
import { useCardAnimation } from '@react-navigation/stack';
import { Button } from '@react-navigation/elements';

function ModalScreen() {
  const navigation = useNavigation();
  const { colors } = useTheme();
  const { current } = useCardAnimation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Pressable
        style={[StyleSheet.absoluteFill, { backgroundColor: 'rgba(0, 0, 0, 0.5)' }]}
        onPress={navigation.goBack}
      />
      <Animated.View
        style={{
          padding: 16,
          width: '90%',
          maxWidth: 400,
          borderRadius: 3,
          backgroundColor: colors.card,
          transform: [
            {
              scale: current.progress.interpolate({
                inputRange: [0, 1],
                outputRange: [0.9, 1],
                extrapolate: 'clamp',
              }),
            },
          ],
        }}
      >
        <Text>Modal content goes here...</Text>
        <Button
          color={colors.primary}
          style={{ alignSelf: 'flex-end' }}
          onPress={navigation.goBack}
        >
          Okay
        </Button>
      </Animated.View>
    </View>
  );
}

----------------------------------------

TITLE: Basic Stack Navigator Creation in React Navigation
DESCRIPTION: Demonstrates the basic syntax for creating a stack navigator with route configurations for screens.

LANGUAGE: javascript
CODE:
createStackNavigator({
  Profile: {
    screen: ProfileScreen,
    path: 'people/:name',
    navigationOptions: ({ navigation }) => ({
      title: `${navigation.state.params.name}'s Profile'`,
    }),
  },
  ...MyOtherRoutes,
});

----------------------------------------

TITLE: Android Deep Linking Manifest Configuration
DESCRIPTION: Android manifest configuration for handling deep links with custom URL scheme.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Popping to Top in React Navigation
DESCRIPTION: Demonstrates using StackActions.popToTop() to return to the first screen in the stack by dismissing all other screens.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

this.props.navigation.dispatch(StackActions.popToTop());

----------------------------------------

TITLE: Server-Side Rendering with Koa and ServerContainer
DESCRIPTION: This example demonstrates a basic setup for server-side rendering using Koa and the ServerContainer component. It shows how to construct the location object based on the incoming request.

LANGUAGE: javascript
CODE:
app.use(async (ctx) => {
  const html = ReactDOMServer.renderToString(
    <ServerContainer location={{ pathname: ctx.path, search: ctx.search }}>
      <App />
    </ServerContainer>
  );

  ctx.body = html;
});

----------------------------------------

TITLE: Navigation State Structure Example in React Navigation
DESCRIPTION: Shows the expected structure of a navigation state object including routes array and index.

LANGUAGE: javascript
CODE:
{
  index: 1, // identifies which route in the routes array is active
  routes: [
    {
      // Each route needs a name to identify the type.
      routeName: 'MyRouteName',

      // A unique identifier for this route in the routes array:
      key: 'myroute-123',
      // (used to specify the re-ordering of routes)

      // Routes can have any data, as long as key and routeName are correct
      ...randomRouteData,
    },
    ...moreRoutes,
  ]
}

----------------------------------------

TITLE: Unlinking react-native-gesture-handler
DESCRIPTION: Command to unlink the react-native-gesture-handler package in case of manual linking issues.

LANGUAGE: bash
CODE:
react-native unlink react-native-gesture-handler

----------------------------------------

TITLE: Blocking Navigation Actions in React Navigation
DESCRIPTION: Shows how to prevent navigation actions based on route conditions by customizing the router's getStateForAction method.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyStackRouter = StackRouter(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyStackRouter.router.getStateForAction;

MyStackRouter.router.getStateForAction = (action, state) => {
  if (
    state &&
    action.type === NavigationActions.BACK &&
    state.routes[state.index].params.isEditing
  ) {
    return null;
  }

  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Merging Params when Navigating
DESCRIPTION: Example of how to merge params when navigating to a screen in React Navigation 6.

LANGUAGE: javascript
CODE:
navigation.navigate({
  name: 'Post',
  params: { postTitle: 'An okay post' },
  merge: true,
});

----------------------------------------

TITLE: Implementing Custom Navigation Actions in React Navigation
DESCRIPTION: Example of extending a TabRouter to add custom navigation actions, specifically adding a 'clearHistory' action.

LANGUAGE: javascript
CODE:
import { TabRouter } from '@react-navigation/native';

const MyTabRouter = (options) => {
  const router = TabRouter(options);

  return {
    ...router,
    getStateForAction(state, action, options) {
      switch (action.type) {
        case 'CLEAR_HISTORY':
          return {
            ...state,
            routeKeyHistory: [],
          };
        default:
          return router.getStateForAction(state, action, options);
      }
    },

    actionCreators: {
      ...router.actionCreators,
      clearHistory() {
        return { type: 'CLEAR_HISTORY' };
      },
    },
  };
};

----------------------------------------

TITLE: Installing @react-navigation/drawer Package
DESCRIPTION: Command to install the drawer navigation package for React Navigation v5.x using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer@^5.x

----------------------------------------

TITLE: Integrating Localization with React Navigation using screenProps
DESCRIPTION: This snippet shows how to integrate localization with React Navigation using screenProps. It sets up the locale state, provides methods for changing the locale and translating text, and passes these through screenProps to the navigation container.

LANGUAGE: jsx
CODE:
export default class App extends React.Component {
  state = {
    locale: Localization.locale,
  };

  setLocale = (locale) => {
    this.setState({ locale });
  };

  t = (scope, options) => {
    return i18n.t(scope, { locale: this.state.locale, ...options });
  };

  render() {
    return (
      <AppContainer
        screenProps={{
          t: this.t,
          locale: this.state.locale,
          setLocale: this.setLocale,
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Custom Param Parsing and Stringifying
DESCRIPTION: Example of custom functions for parsing and stringifying URL parameters.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: {
      path: 'chat/:date',
      parse: {
        date: (date) => new Date(date).getTime(),
      },
      stringify: {
        date: (date) => {
          const d = new Date(date);
          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();
        },
      },
    },
  },
};

----------------------------------------

TITLE: Configuring Deep Linking in NavigationContainer
DESCRIPTION: Demonstrates how to configure deep linking and URL support using the linking prop of NavigationContainer.

LANGUAGE: jsx
CODE:
import { NavigationContainer } from '@react-navigation/native';

function App() {
  const linking = {
    prefixes: ['https://mychat.com', 'mychat://'],
    config: {
      screens: {
        Home: 'feed/:sort',
      },
    },
  };

  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Navigating to Nested Screens with LinkButton
DESCRIPTION: Shows how to use LinkButton to navigate to screens in nested navigators with parameters.

LANGUAGE: javascript
CODE:
<LinkButton screen="Root" params={{ screen: 'Post', params: { id: 123 } }}>
  Go to post 123
</LinkButton>

----------------------------------------

TITLE: Custom Header Title Component
DESCRIPTION: Example of replacing the default header title with a custom component, in this case an image logo.

LANGUAGE: javascript
CODE:
function LogoTitle() {
  return (
    <Image
      style={{ width: 50, height: 50 }}
      source={require('@expo/snack-static/react-native-logo.png')}
    />
  );
}

function StackScreen() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="Home"
        component={HomeScreen}
        options={{ headerTitle: (props) => <LogoTitle {...props} /> }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: 404 Not Found Screen Implementation
DESCRIPTION: Implements a Not Found screen component that sets the appropriate status code using context.

LANGUAGE: javascript
CODE:
function NotFound() {
  const status = React.useContext(StatusCodeContext);

  if (status) {
    staus.code = 404;
  }

  return (
    <View>
      <Text>Oops! This URL doesn't exist.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing useLinkTo with React Class Component
DESCRIPTION: Shows how to use the useLinkTo hook with class components by wrapping the class component in a functional component that passes the linkTo function as a prop.

LANGUAGE: javascript
CODE:
class Home extends React.Component {
  render() {
    // Get it from props
    const { linkTo } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const linkTo = useLinkTo();

  return <Home {...props} linkTo={linkTo} />;
}

----------------------------------------

TITLE: Implementing Custom Android Back Button Behavior in React Navigation
DESCRIPTION: This code snippet demonstrates how to use the useFocusEffect hook and BackHandler to implement custom behavior for the Android hardware back button. It handles a scenario where a 'selection mode' needs to be deactivated before the screen is popped.

LANGUAGE: javascript
CODE:
function ScreenWithCustomBackBehavior() {
  // ...

  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = () => {
        if (isSelectionModeEnabled) {
          setIsSelectionModeEnabled(false);
          return true;
        } else {
          return false;
        }
      };

      const subscription = BackHandler.addEventListener(
        'hardwareBackPress',
        onBackPress
      );

      return () => subscription.remove();
    }, [isSelectionModeEnabled])
  );

  // ...
}

----------------------------------------

TITLE: Reinstalling dependencies with Yarn
DESCRIPTION: Commands to remove node_modules, yarn.lock, and reinstall dependencies using Yarn.

LANGUAGE: bash
CODE:
rm -rf node_modules
rm yarn.lock
yarn

----------------------------------------

TITLE: Adding Navigator Screen Listeners
DESCRIPTION: Demonstrates how to add global screen listeners to a navigator using screenListeners prop, including both static and navigation-aware configurations.

LANGUAGE: jsx
CODE:
<Stack.Navigator
  screenListeners={{
    state: (e) => {
      // Do something with the state
      console.log('state changed', e.data);
    },
  }}
>
  <Stack.Screen name="Home" component={HomeScreen} />
  <Stack.Screen name="Profile" component={ProfileScreen} />
</Stack.Navigator>

LANGUAGE: jsx
CODE:
<Tab.Navigator
  screenListeners={({ navigation }) => ({
    state: (e) => {
      // Do something with the state
      console.log('state changed', e.data);

      // Do something with the `navigation` object
      if (!navigation.canGoBack()) {
        console.log("we're on the initial screen");
      }
    },
  })}
>
  <Tab.Screen name="Home" component={HomeScreen} />
  <Tab.Screen name="Profile" component={ProfileScreen} />
</Tab.Navigator>

----------------------------------------

TITLE: Setting screen options dynamically in React Navigation
DESCRIPTION: Example of using setOptions to update screen options based on component state.

LANGUAGE: jsx
CODE:
React.useEffect(() => {
  navigation.setOptions({
    title: value === '' ? 'No title' : value,
  });
}, [navigation, value]);

----------------------------------------

TITLE: Updating Header Button with Screen Component Interaction
DESCRIPTION: This snippet shows how to update a header button to interact with the screen component's state using navigation.setOptions. It demonstrates how to access and update the component's state from the header.

LANGUAGE: javascript
CODE:
function HomeScreen() {
  const navigation = useNavigation();
  const [count, setCount] = React.useState(0);

  React.useEffect(() => {
    navigation.setOptions({
      headerRight: () => (
        <Button onPress={() => setCount((c) => c + 1)}>Update count</Button>
      ),
    });
  }, [navigation]);

  return <Text>Count: {count}</Text>;
}

----------------------------------------

TITLE: Setting up i18n-js for Localization in React Navigation
DESCRIPTION: This snippet demonstrates how to set up i18n-js for localization in a React Navigation app. It imports necessary libraries, defines translations for English and French, and sets up i18n configuration.

LANGUAGE: jsx
CODE:
import * as Localization from 'expo-localization'; // or whatever library you want
import i18n from 'i18n-js'; // or whatever library you want

const en = {
  foo: 'Foo',
  bar: 'Bar {{someValue}}',
};

const fr = {
  foo: 'Fou',
  bar: 'Bár {{someValue}}',
};

i18n.fallbacks = true;
i18n.translations = { fr, en };

// This will log 'en' for me, as I'm an English speaker
console.log(Localization.locale);

----------------------------------------

TITLE: Implementing Modal Navigation Stack
DESCRIPTION: Advanced example showing custom modal navigation implementation with custom transition configurations and animations.

LANGUAGE: javascript
CODE:
const ModalNavigator = StackNavigator(
  {
    Main: { screen: Main },
    Login: { screen: Login },
  },
  {
    headerMode: 'none',
    mode: 'modal',
    navigationOptions: {
      gesturesEnabled: false,
    },
    transitionConfig: () => ({
      transitionSpec: {
        duration: 300,
        easing: Easing.out(Easing.poly(4)),
        timing: Animated.timing,
      },
      screenInterpolator: (sceneProps) => {
        const { layout, position, scene } = sceneProps;
        const { index } = scene;

        const height = layout.initHeight;
        const translateY = position.interpolate({
          inputRange: [index - 1, index, index + 1],
          outputRange: [height, 0, 0],
        });

        const opacity = position.interpolate({
          inputRange: [index - 1, index - 0.99, index],
          outputRange: [0, 1, 1],
        });

        return { opacity, transform: [{ translateY }] };
      },
    }),
  }
);

----------------------------------------

TITLE: Installing correct react-native-safe-area-context version with Expo
DESCRIPTION: Command to install the correct version of react-native-safe-area-context using Expo.

LANGUAGE: bash
CODE:
npx expo install react-native-safe-area-context

----------------------------------------

TITLE: Initializing Redux Provider with React Navigation
DESCRIPTION: Basic setup showing how to wrap React Navigation's NavigationContainer with Redux Provider component to enable Redux state management throughout the app.

LANGUAGE: javascript
CODE:
import { Provider } from 'react-redux';
import { NavigationContainer } from '@react-navigation/native';

// Render the app container component with the provider around it
export default function App() {
  return (
    <Provider store={store}>
      <NavigationContainer>{/* Screen configuration */}</NavigationContainer>
    </Provider>
  );
}

----------------------------------------

TITLE: Alternative Correct Implementation Using Static Router Property
DESCRIPTION: This code snippet demonstrates an alternative correct way to implement multiple navigators by exposing the router static on the AuthenticationScreen and threading through the navigation prop. This approach allows for more flexibility in component structure.

LANGUAGE: javascript
CODE:
export default class App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppContainer />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

class AuthenticationScreen extends React.Component {
  static router = AuthenticationNavigator.router;

  render() {
    return <AuthenticationNavigator navigation={this.props.navigation} />;
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

const AppContainer = createAppContainer(AppNavigator);

----------------------------------------

TITLE: Class Component Integration with useFocusEffect
DESCRIPTION: Shows how to use useFocusEffect with class components by creating a separate functional component that handles the effect.

LANGUAGE: javascript
CODE:
function FetchUserData({ userId, onUpdate }) {
  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, onUpdate);

      return () => unsubscribe();
    }, [userId, onUpdate])
  );

  return null;
}

// ...

class Profile extends React.Component {
  _handleUpdate = (user) => {
    // Do something with user object
  };

  render() {
    return (
      <>
        <FetchUserData
          userId={this.props.userId}
          onUpdate={this._handleUpdate}
        />
        {/* rest of your code */}
      </>
    );
  }
}

----------------------------------------

TITLE: Using useTheme Hook with Class Components in React Navigation
DESCRIPTION: This snippet demonstrates how to use the useTheme hook with class components in React Navigation. It shows how to wrap a class component with a functional component to access the theme and pass it as a prop.

LANGUAGE: jsx
CODE:
class MyButton extends React.Component {
  render() {
    // Get it from props
    const { theme } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const theme = useTheme();

  return <MyButton {...props} theme={theme} />;
}

----------------------------------------

TITLE: Wrapping Root Component with MobX Provider in React Navigation
DESCRIPTION: Demonstrates how to use the MobX Provider component to wrap the NavigationContainer, allowing access to MST objects throughout the application.

LANGUAGE: javascript
CODE:
<Provider myObject={this.myObject}>
  <NavigationContainer>{/* Screen configuration */}</NavigationContainer>
</Provider>

----------------------------------------

TITLE: Initializing Switch Navigator in React Navigation
DESCRIPTION: Basic syntax for creating a switch navigator with route configurations and navigator config options. The navigator requires RouteConfigs object mapping route names to configurations and optional SwitchNavigatorConfig for customizing behavior.

LANGUAGE: javascript
CODE:
createSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);

----------------------------------------

TITLE: Configuring Metro source extensions
DESCRIPTION: JavaScript configuration for Metro to include TypeScript file extensions.

LANGUAGE: js
CODE:
sourceExts: ['js', 'json', 'ts', 'tsx'];

----------------------------------------

TITLE: Screen ID Configuration
DESCRIPTION: Demonstrates how to implement custom screen identification using the getId prop.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  getId={({ params }) => params.userId}
/>

----------------------------------------

TITLE: Adding Screen Listeners via Props
DESCRIPTION: Example of adding event listeners directly on Screen component using the listeners prop, showing both static and dynamic listener configurations.

LANGUAGE: jsx
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={{
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();
    },
  }}
/>

LANGUAGE: jsx
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={({ navigation, route }) => ({
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();

      // Do something with the `navigation` object
      navigation.navigate('AnotherPlace');
    },
  })}
/>

----------------------------------------

TITLE: Modified Navigation Structure with Hidden Tab Bar
DESCRIPTION: Demonstrates the improved navigation structure where the tab navigator is nested inside the first screen of the stack navigator, allowing the tab bar to be hidden on Profile and Settings screens.

LANGUAGE: javascript
CODE:
function HomeTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={Home} />
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Notifications" component={Notifications} />
    </Tab.Navigator>
  );
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeTabs} />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Settings" component={Settings} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Basic Stack Navigator Configuration for Deep Linking
DESCRIPTION: Basic example of configuring a stack navigator with a chat screen that accepts a user parameter through deep linking.

LANGUAGE: javascript
CODE:
const SimpleApp = createAppContainer(
  createStackNavigator({
    Home: { screen: HomeScreen },
    Chat: {
      screen: ChatScreen,
      path: 'chat/:user',
    },
  })
);

----------------------------------------

TITLE: Defining Custom Router Object in JavaScript for React Navigation
DESCRIPTION: This snippet demonstrates the structure of a custom router object for React Navigation. It includes placeholder implementations for required functions such as getStateForAction, getActionForPathAndParams, getPathAndParamsForState, getComponentForState, and getComponentForRouteName.

LANGUAGE: javascript
CODE:
const MyRouter = {
  getStateForAction: (action, state) => ({}),
  getActionForPathAndParams: (path, params) => null,
  getPathAndParamsForState: (state) => null,
  getComponentForState: (state) => MyScreen,
  getComponentForRouteName: (routeName) => MyScreen,
};

// Now, you can make a navigator by putting the router on it:
class MyNavigator extends React.Component {
  static router = MyRouter;
  render() {
    ...
  }
}

----------------------------------------

TITLE: Multiple Navigation to Same Route
DESCRIPTION: Example showing how to handle multiple navigation attempts to the same route using navigate() method.

LANGUAGE: javascript
CODE:
function DetailsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Button
        title="Go to Details... again"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}

----------------------------------------

TITLE: Using useLogger Hook with Dynamic Navigation in React Native
DESCRIPTION: Example of how to use the useLogger hook with dynamic navigation in a React Native app. It shows how to import components and apply the hook to a navigation container reference.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useLogger } from '@react-navigation/devtools';

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useLogger(navigationRef);

  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Using Screen Options in HTML Meta Tags
DESCRIPTION: This example illustrates how to use the screen options obtained from the ServerContainer to set HTML meta tags, such as the title and description.

LANGUAGE: jsx
CODE:
<title>{options.title}</title>
<meta name="description" content={options.description} />

----------------------------------------

TITLE: Using RootNavigation to navigate in React Navigation
DESCRIPTION: This snippet demonstrates how to use the RootNavigation module to navigate from any JavaScript module, including outside of React components.

LANGUAGE: javascript
CODE:
// any js module
import * as RootNavigation from './path/to/RootNavigation.js';

// ...

RootNavigation.navigate('ChatScreen', { userName: 'Lucy' });

----------------------------------------

TITLE: Setting up Jest Mocks for React Navigation
DESCRIPTION: Configuration code to mock native dependencies required for testing React Navigation components. This setup mocks react-native-reanimated, react-native-gesture-handler, and native animated modules.

LANGUAGE: javascript
CODE:
import 'react-native-gesture-handler/jestSetup';

jest.mock('react-native-reanimated', () => {
  const Reanimated = require('react-native-reanimated/mock');

  // The mock for `call` immediately calls the callback which is incorrect
  // So we override it with a no-op
  Reanimated.default.call = () => {};

  return Reanimated;
});

// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing
jest.mock('react-native/Libraries/Animated/src/NativeAnimatedHelper');

// As of react-native@0.64.X file has moved
jest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');

----------------------------------------

TITLE: Using useFocusEffect Hook in React Navigation
DESCRIPTION: Shows implementation of useFocusEffect hook for handling focus events. This approach is recommended for managing subscriptions or API calls that need to be cleaned up when screen loses focus.

LANGUAGE: javascript
CODE:
import { useFocusEffect } from '@react-navigation/native';

function Profile({ userId }) {
  const [user, setUser] = React.useState(null);

  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, (user) => setUser(data));

      return () => unsubscribe();
    }, [userId])
  );

  return <ProfileContent user={user} />;
}

----------------------------------------

TITLE: Render Callback Implementation
DESCRIPTION: Demonstrates using a render callback to provide custom props to a screen component.

LANGUAGE: jsx
CODE:
<Stack.Screen name="Profile">
  {(props) => <ProfileScreen {...props} />}
</Stack.Screen>

----------------------------------------

TITLE: Upgrading Babel core
DESCRIPTION: Command to upgrade the Babel core package to resolve syntax errors.

LANGUAGE: bash
CODE:
npm install --save-dev @babel/core

----------------------------------------

TITLE: Screen Name Configuration
DESCRIPTION: Shows how to configure a screen name and use it for navigation.

LANGUAGE: javascript
CODE:
<Stack.Screen name="Profile" component={ProfileScreen} />

LANGUAGE: javascript
CODE:
navigation.navigate('Profile');

----------------------------------------

TITLE: Implementing NavigationContainer Wrapper
DESCRIPTION: Basic setup of NavigationContainer component that wraps the entire React Native application.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Accessing Current Theme in Custom Components with React Navigation
DESCRIPTION: This snippet demonstrates how to use the useTheme hook to access the current theme's colors in a custom component, allowing for dynamic styling based on the active theme.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useTheme } from '@react-navigation/native';

function MyButton() {
  const { colors } = useTheme();

  return (
    <TouchableOpacity style={{ backgroundColor: colors.card }}>
      <Text style={{ color: colors.text }}>Button!</Text>
    </TouchableOpacity>
  );
}

----------------------------------------

TITLE: Extending Stack Navigator in React Navigation
DESCRIPTION: Demonstrates how to extend an existing Stack Navigator by creating a custom navigator component that wraps the original navigator and inherits its router.

LANGUAGE: javascript
CODE:
const MyStack = createStackNavigator({ ... });

class CustomNavigator extends React.Component {
  static router = MyStack.router;
  render() {
    const { navigation } = this.props;

    return <MyStack navigation={navigation} />;
  }
}

----------------------------------------

TITLE: TypeScript Configuration for Static Navigation
DESCRIPTION: TypeScript configuration example showing how to extend the RootParamList interface with static navigation parameters.

LANGUAGE: typescript
CODE:
declare global {
  namespace ReactNavigation {
    interface RootParamList extends StaticParamList<typeof RootStack> {}
  }
}

----------------------------------------

TITLE: Static Material Top Tab Navigator Implementation
DESCRIPTION: Example of implementing Material Top Tabs using static configuration with createStaticNavigation

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { createStaticNavigation, useNavigation } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';

const MyTabs = createMaterialTopTabNavigator({
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

----------------------------------------

TITLE: Implementing FlatList with Bottom Tab Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to create a bottom tab navigator with a FlatList component using React Navigation. It shows the setup of a HomeScreen component with a FlatList and its integration into a tab navigator.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { createAppContainer, FlatList } from 'react-navigation';
import { createBottomTabNavigator } from 'react-navigation-tabs';

const data = new Array(150).fill(0);

class HomeScreen extends React.Component {
  renderItem = ({ index }) => {
    return (
      <View style={{ height: 50 }}>
        <Text style={{ textAlign: 'center' }}>Item {index}</Text>
      </View>
    );
  };

  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <FlatList
          data={data}
          renderItem={this.renderItem}
          contentContainerStyle={{ padding: 10 }}
        />
      </View>
    );
  }
}

const TabNavigator = createBottomTabNavigator({
  Home: { screen: HomeScreen },
});

export default createAppContainer(TabNavigator);

----------------------------------------

TITLE: Exporting App Container as Root Component in React Navigation
DESCRIPTION: Shows how to export the AppContainer as the root component for more control over the app's entry point.

LANGUAGE: js
CODE:
const AppContainer = createAppContainer(AppNavigator);

export default class App extends React.Component {
  render() {
    return <AppContainer />;
  }
}

----------------------------------------

TITLE: GoBack Navigation Implementation
DESCRIPTION: Shows different ways to implement back navigation, including going back one screen, anywhere, or to a specific screen by key.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    const { goBack } = this.props.navigation;
    return (
      <View>
        <Button onPress={() => goBack()} title="Go back from this HomeScreen" />
        <Button onPress={() => goBack(null)} title="Go back anywhere" />
        <Button
          onPress={() => goBack('key-123')}
          title="Go back from key-123"
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Correct Navigation Options Implementation
DESCRIPTION: Shows the proper way to set navigation options for nested navigators by applying them directly to the navigator components.

LANGUAGE: javascript
CODE:
const HomeStack = createStackNavigator({ A });
const SettingsStack = createStackNavigator({ B });

HomeStack.navigationOptions = {
  tabBarLabel: 'Home!',
};

SettingsStack.navigationOptions = {
  tabBarLabel: 'Settings!',
};

export default createAppContainer(
  createBottomTabNavigator({
    HomeStack,
    SettingsStack,
  })
);

----------------------------------------

TITLE: Installing Bottom Tabs Navigator Package
DESCRIPTION: Command to install the bottom tabs navigator package for React Navigation v5.

LANGUAGE: bash
CODE:
npm install @react-navigation/bottom-tabs@^5.x

----------------------------------------

TITLE: Screen ID Generation
DESCRIPTION: Demonstrates implementing a custom ID generator for screen identification based on route params.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  getId={({ params }) => params.userId}
/>

----------------------------------------

TITLE: Checking package dependencies with Yarn
DESCRIPTION: Command to check which packages depend on react-native-safe-area-context using Yarn.

LANGUAGE: bash
CODE:
yarn why react-native-safe-area-context

----------------------------------------

TITLE: Dynamic Options Update with setOptions
DESCRIPTION: Demonstrates how to update screen options dynamically using the navigation.setOptions method.

LANGUAGE: javascript
CODE:
<Button
  title="Update options"
  onPress={() => navigation.setOptions({ title: 'Updated!' })}
/>

----------------------------------------

TITLE: Correct Navigator Structure in React Navigation
DESCRIPTION: Proper implementation of navigator nesting where the AuthenticationNavigator is used directly as a screen component in the switch navigator.

LANGUAGE: javascript
CODE:
export default class App extends React.Component {
  render() {
    return <AppContainer />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AppNavigator = createSwitchNavigator({
  /*
   * Rather than being rendered by a screen component, the
   * AuthenticationNavigator is a screen component
   */
  Auth: AuthenticationNavigator,
  Home: HomeScreen,
});

const AppContainer = createAppContainer(AppNavigator);

----------------------------------------

TITLE: Installing Stack Navigator Dependencies
DESCRIPTION: Commands to install the required dependencies for Stack Navigator in React Native projects.

LANGUAGE: bash
CODE:
npm install @react-navigation/stack@^6.x

LANGUAGE: bash
CODE:
npx expo install react-native-gesture-handler

LANGUAGE: bash
CODE:
npm install react-native-gesture-handler

LANGUAGE: bash
CODE:
npx expo install @react-native-masked-view/masked-view

LANGUAGE: bash
CODE:
npm install @react-native-masked-view/masked-view

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Creating FocusAwareStatusBar for Tabs and Drawer Navigation (React Native)
DESCRIPTION: This snippet shows how to create a FocusAwareStatusBar component that only renders the StatusBar when the screen is focused. This is useful for Tab and Drawer navigation where multiple screens might be rendered simultaneously.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { StatusBar } from 'react-native';
import { useIsFocused } from '@react-navigation/native';

function FocusAwareStatusBar(props) {
  const isFocused = useIsFocused();

  return isFocused ? <StatusBar {...props} /> : null;
}

----------------------------------------

TITLE: Configuring Deep Linking in iOS AppDelegate.m
DESCRIPTION: This Objective-C code snippet shows how to modify the AppDelegate.m file to handle deep linking in iOS for react-native init projects.

LANGUAGE: objectivec
CODE:
// Add the header at the top of the file:
#import <React/RCTLinkingManager.h>

// Add this above the `@end`:
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
  return [RCTLinkingManager application:application openURL:url
                      sourceApplication:sourceApplication annotation:annotation];
}

----------------------------------------

TITLE: Enabling State Persistence in Development Mode
DESCRIPTION: This code snippet shows how to selectively enable state persistence in development mode using the __DEV__ flag. This approach is particularly useful during development.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator({...});
const navigationPersistenceKey = __DEV__ ? "NavigationStateDEV" : null;
const App = () => <AppNavigator persistenceKey={navigationPersistenceKey} />;

----------------------------------------

TITLE: Enabling State Persistence in Development Mode
DESCRIPTION: This code snippet shows how to selectively enable state persistence in development mode using the __DEV__ flag. This approach is particularly useful during development.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator({...});
const navigationPersistenceKey = __DEV__ ? "NavigationStateDEV" : null;
const App = () => <AppNavigator persistenceKey={navigationPersistenceKey} />;

----------------------------------------

TITLE: Running React Navigation Development Tools
DESCRIPTION: Commands for running various development tools including linting, type checking, testing, and the example app.

LANGUAGE: bash
CODE:
yarn lint

LANGUAGE: bash
CODE:
yarn lint --fix

LANGUAGE: bash
CODE:
yarn typescript

LANGUAGE: bash
CODE:
yarn typescript --watch

LANGUAGE: bash
CODE:
yarn example start

LANGUAGE: bash
CODE:
yarn test

LANGUAGE: bash
CODE:
yarn test --watch

----------------------------------------

TITLE: Customizing Param Parsing and Serialization
DESCRIPTION: Example of custom functions for parsing and serializing params in deep links.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: {
      path: 'chat/:date',
      parse: {
        date: (date) => new Date(date).getTime(),
      },
      stringify: {
        date: (date) => {
          const d = new Date(date);
          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();
        },
      },
    },
  },
};

----------------------------------------

TITLE: Using createAppContainer Props in React Native
DESCRIPTION: This snippet shows how to use the onNavigationStateChange and uriPrefix props when rendering an AppContainer component in React Native.

LANGUAGE: javascript
CODE:
<AppContainer
  onNavigationStateChange={handleNavigationChange}
  uriPrefix="/app"
/>

----------------------------------------

TITLE: Updating Navigation Actions Import
DESCRIPTION: Diff showing how to change the import of NavigationActions from react-navigation to @react-navigation/compat.

LANGUAGE: diff
CODE:
-import { NavigationActions } from 'react-navigation';
+import { NavigationActions } from '@react-navigation/compat';

----------------------------------------

TITLE: Initial Stack Navigator Nested in Tab Navigator
DESCRIPTION: Shows the initial navigation structure where a stack navigator is nested inside a tab navigator, resulting in the tab bar being visible across all screens.

LANGUAGE: javascript
CODE:
function HomeStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

function App() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeStack} />
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Notifications" component={Notifications} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Migrating Stack Navigator Creation to Compatibility Layer
DESCRIPTION: Diff showing how to modify the creation of a stack navigator to use the compatibility layer, replacing the direct import from react-navigation-stack.

LANGUAGE: diff
CODE:
-import { createStackNavigator } from 'react-navigation-stack';
+import { createStackNavigator } from '@react-navigation/stack';
+import { createCompatNavigatorFactory } from '@react-navigation/compat';

-const RootStack = createStackNavigator(
+const RootStack = createCompatNavigatorFactory(createStackNavigator)(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Profile',
  }
);

----------------------------------------

TITLE: Installing CocoaPods dependencies
DESCRIPTION: Commands to navigate to the iOS folder and install CocoaPods dependencies.

LANGUAGE: bash
CODE:
cd ios
pod install
cd ..

----------------------------------------

TITLE: Installing Drawer Navigator
DESCRIPTION: Command to install the 6.x version of @react-navigation/drawer package.

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer@^6.x

----------------------------------------

TITLE: Clearing Metro Bundler Cache Commands
DESCRIPTION: Commands to clear the Metro bundler cache for both Expo and React Native projects to resolve module resolution issues.

LANGUAGE: bash
CODE:
expo start -c

npx react-native start --reset-cache

rm -rf $TMPDIR/metro-bundler-cache-*

----------------------------------------

TITLE: Customizing Drawer Content in React Navigation
DESCRIPTION: This example demonstrates how to create a custom content component for the drawer, including SafeAreaView and ScrollView wrappers, and how to style it.

LANGUAGE: javascript
CODE:
import { DrawerItems, SafeAreaView } from 'react-navigation';

const CustomDrawerContentComponent = (props) => (
  <ScrollView>
    <SafeAreaView
      style={styles.container}
      forceInset={{ top: 'always', horizontal: 'never' }}
    >
      <DrawerItems {...props} />
    </SafeAreaView>
  </ScrollView>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

----------------------------------------

TITLE: Setting Up URI Prefix for Deep Linking in Expo Projects
DESCRIPTION: This code demonstrates how to set up the URI prefix for deep linking in Expo projects using Expo.Linking.makeUrl() and passing it to the navigation container.

LANGUAGE: javascript
CODE:
const SimpleApp = createAppContainer(createStackNavigator({...}));

const prefix = Expo.Linking.makeUrl('/');

const MainApp = () => <SimpleApp uriPrefix={prefix} />;

----------------------------------------

TITLE: Navigation Props Usage with Props Mapper
DESCRIPTION: Demonstrates the difference between standard React Navigation prop access and using react-navigation-props-mapper HOC for cleaner prop access.

LANGUAGE: JavaScript
CODE:
// Standard React Navigation
const user = this.props.navigation.getParam(activeUser, null);

// With react-navigation-props-mapper
const user = this.props.activeUser;

----------------------------------------

TITLE: Cloning and Installing React Navigation Repository
DESCRIPTION: Commands to clone the React Navigation repository, set up remote, and install dependencies using Yarn.

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/react-navigation.git
cd react-navigation
git remote add upstream https://github.com/react-community/react-navigation.git
yarn install

----------------------------------------

TITLE: Basic Bottom Tabs Navigator Implementation
DESCRIPTION: Minimal example of creating a bottom tab navigator with two screens.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const Tab = createBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: iOS Deep Linking Configuration
DESCRIPTION: Native iOS configuration for handling deep links in AppDelegate.m.

LANGUAGE: objectivec
CODE:
// Add the header at the top of the file:
#import <React/RCTLinkingManager.h>

// Add this above the `@end`:
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
  return [RCTLinkingManager application:application openURL:url
                      sourceApplication:sourceApplication annotation:annotation];
}

----------------------------------------

TITLE: Configuring Static Routes in React Navigation
DESCRIPTION: Example demonstrating the static route configuration requirement in React Navigation using createDrawerNavigator, createStackNavigator, and createSwitchNavigator. Shows basic app structure with authentication and friends navigation setup.

LANGUAGE: javascript
CODE:
const FriendsNavigator = createDrawerNavigator({
  Feed: FeedScreen,
  FriendList: FriendListScreen,
});

const AuthNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AppNavigator = createSwitchNavigator({
  App: FriendsNavigator,
  Auth: AuthNavigator,
});

export default class MyApp extends React.Component {
  render() {
    return <AppNavigator />;
  }
}

----------------------------------------

TITLE: Basic Navigation Event Prevention in React Navigation
DESCRIPTION: Example showing how to prevent default navigation behavior using the addListener method with a tabPress event.

LANGUAGE: javascript
CODE:
const unsubscribe = navigation.addListener('tabPress', (e) => {
  // Prevent default action
  e.preventDefault();
});

----------------------------------------

TITLE: Navigating to a new screen using React Navigation
DESCRIPTION: This snippet demonstrates how to use the navigation prop to navigate from a Home screen to a Details screen in a React Native application using React Navigation.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button, View, Text } from 'react-native';
import { StackNavigator } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
        <Button
          title="Go to Details"
          onPress={() => this.props.navigation.navigate('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Implementing Sign-In and Home Screens for Authentication Flow in React Native
DESCRIPTION: This snippet demonstrates the implementation of SignInScreen and HomeScreen components. It includes methods for signing in, signing out, and navigating between screens, using AsyncStorage for token management.

LANGUAGE: jsx
CODE:
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: 'Please sign in',
  };

  render() {
    return (
      <View>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    await AsyncStorage.setItem('userToken', 'abc');
    this.props.navigation.navigate('App');
  };
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Welcome to the app!',
  };

  render() {
    return (
      <View>
        <Button title="Show me more of the app" onPress={this._showMoreApp} />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate('Other');
  };

  _signOutAsync = async () => {
    await AsyncStorage.clear();
    this.props.navigation.navigate('Auth');
  };
}

// More code like OtherScreen omitted for brevity

----------------------------------------

TITLE: Unlinking react-native-safe-area-context
DESCRIPTION: Command to unlink the react-native-safe-area-context package in case of manual linking issues.

LANGUAGE: bash
CODE:
react-native unlink react-native-safe-area-context

----------------------------------------

TITLE: Wrapping NavigationContainer in a View
DESCRIPTION: React Native code snippet showing how to properly wrap the NavigationContainer in a View with flex styling.

LANGUAGE: js
CODE:
import * as React from 'react';
import { View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <View style={{ flex: 1 }}>
      <NavigationContainer>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Resetting Navigation State in React Navigation
DESCRIPTION: Example of resetting navigation state using the reset method, demonstrating how React Navigation automatically fixes the index property.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Home' }, { name: 'Profile' }],
});

----------------------------------------

TITLE: Jest Configuration for React Navigation Testing
DESCRIPTION: This JSON snippet shows how to configure Jest to use the setup file for mocking dependencies when testing React Navigation components.

LANGUAGE: json
CODE:
{
  "preset": "react-native",
  "setupFilesAfterEnv": ["<rootDir>/jest/setup.js"]
}

----------------------------------------

TITLE: Basic Bottom Tabs Navigator Implementation
DESCRIPTION: Minimal example of creating a bottom tab navigator with two screens.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const Tab = createBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Using useDrawerProgress hook with legacy Reanimated
DESCRIPTION: Example of using the useDrawerProgress hook with legacy Reanimated implementation to animate drawer content.

LANGUAGE: javascript
CODE:
import { Animated } from 'react-native-reanimated';
import { useDrawerProgress } from 'react-native-drawer-layout';

function MyComponent() {
  const progress = useDrawerProgress();

  // If you are on react-native-reanimated 1.x, use `Animated.interpolate` instead of `Animated.interpolateNode`
  const translateX = Animated.interpolateNode(progress, {
    inputRange: [0, 1],
    outputRange: [-100, 0],
  });

  return (
    <Animated.View style={{ transform: [{ translateX }] }}>
      {/* ... */}
    </Animated.View>
  );
}

----------------------------------------

TITLE: Retrieving Screen Options in React Navigation
DESCRIPTION: This code demonstrates how to retrieve screen options using the getScreenOptions method of a custom router. It shows how to prepare a navigation prop for a child component and fetch the configured title.

LANGUAGE: javascript
CODE:
// First, prepare a navigation prop for your child, or re-use one if already available.
const screenNavigation = addNavigationHelpers({
  // In this case we use navigation.state.index because we want the title for the active route.
  state: navigation.state.routes[navigation.state.index],
  dispatch: navigation.dispatch,
});
const options = this.props.router.getScreenOptions(screenNavigation, {});
const title = options.title;

----------------------------------------

TITLE: Implementing Status Bar in Stack Navigator Screens
DESCRIPTION: Example of two screens with different status bar configurations using React Navigation's stack navigator. Shows how to set different background colors and bar styles for light and dark themes.

LANGUAGE: jsx
CODE:
class Screen1 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>
        <StatusBar barStyle="light-content" backgroundColor="#6a51ae" />
        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen2')
          color={isAndroid ? 'blue' : '#fff'}
        />
      </SafeAreaView>
    );
  }
}

class Screen2 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>
        <StatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
        <Text style={styles.paragraph}>Dark Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen1')
        />
      </SafeAreaView>
    );
  }
}

----------------------------------------

TITLE: Passing and Accessing Parameters in React Navigation
DESCRIPTION: This code demonstrates how to pass parameters when navigating from a HomeScreen to a DetailsScreen, and how to access those parameters in the destination screen. It includes examples of using navigation.navigate() with params and navigation.getParam() to retrieve them.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
        <Button
          title="Go to Details"
          onPress={() => {
            /* 1. Navigate to the Details route with params */
            this.props.navigation.navigate('Details', {
              itemId: 86,
              otherParam: 'anything you want here',
            });
          }}
        />
      </View>
    );
  }
}

class DetailsScreen extends React.Component {
  render() {
    /* 2. Get the param, provide a fallback value if not available */
    const { navigation } = this.props;
    const itemId = navigation.getParam('itemId', 'NO-ID');
    const otherParam = navigation.getParam('otherParam', 'some default value');

    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Text>itemId: {JSON.stringify(itemId)}</Text>
        <Text>otherParam: {JSON.stringify(otherParam)}</Text>
        <Button
          title="Go to Details... again"
          onPress={() =>
            this.props.navigation.push('Details', {
              itemId: Math.floor(Math.random() * 100),
            })
          }
        />
        <Button
          title="Go to Home"
          onPress={() => this.props.navigation.navigate('Home')}
        />
        <Button
          title="Go back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Configuring Expo Scheme in app.json
DESCRIPTION: Specifies a URL scheme for an Expo app in the app.json configuration file.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mychat"
  }
}

----------------------------------------

TITLE: Dispatching Navigation Actions in React Navigation
DESCRIPTION: Demonstrates how to use the dispatch method to send custom navigation actions to the router.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',
  params: {},

  // navigate can have a nested navigate action that will be run inside the child router
  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});
this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Incorrect Navigation Options in Nested Navigator
DESCRIPTION: Example showing incorrect placement of tabBarLabel navigation options in nested stack navigators.

LANGUAGE: javascript
CODE:
class A extends React.Component {
  static navigationOptions = {
    tabBarLabel: 'Home!',
  };

  // etc..
}

class B extends React.Component {
  static navigationOptions = {
    tabBarLabel: 'Settings!',
  };

  // etc..
}

const HomeStack = createStackNavigator({ A });
const SettingsStack = createStackNavigator({ B });

export default createAppContainer(
  createBottomTabNavigator({
    HomeStack,
    SettingsStack,
  })
);

----------------------------------------

TITLE: Custom Header Title Component
DESCRIPTION: Shows how to replace the default header title with a custom component, such as an image.

LANGUAGE: javascript
CODE:
class LogoTitle extends React.Component {
  render() {
    return (
      <Image
        source={require('./spiro.png')}
        style={{ width: 30, height: 30 }}
      />
    );
  }
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: <LogoTitle />,
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Implementing Header Interaction with Screen Component in React Navigation
DESCRIPTION: Shows how to create a counter that can be incremented via a header button. This example uses navigation params to pass the increment function to the header.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      headerTitle: () => <LogoTitle />,
      headerRight: () => (
        <Button
          onPress={navigation.getParam('increaseCount')}
          title="+1"
          color="#fff"
        />
      ),
    };
  };

  componentDidMount() {
    this.props.navigation.setParams({ increaseCount: this._increaseCount });
  }

  state = {
    count: 0,
  };

  _increaseCount = () => {
    this.setState({ count: this.state.count + 1 });
  };

  /* later in the render function we display the count */
}

----------------------------------------

TITLE: Clearing Metro bundler cache in React Native CLI
DESCRIPTION: Command to clear the Metro bundler cache when using React Native CLI to resolve module resolution issues.

LANGUAGE: bash
CODE:
npx react-native start --reset-cache

----------------------------------------

TITLE: Correct component definition to prevent remounting
DESCRIPTION: Example of correctly defining a component outside the render function to prevent unmounting and remounting issues.

LANGUAGE: js
CODE:
const Home = () => {
  return <SomeComponent />;
};

function App() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Defining Partial Navigation State in JavaScript
DESCRIPTION: Example of a partial navigation state object, showing how React Navigation can automatically fill in missing properties during rehydration.

LANGUAGE: javascript
CODE:
const state = {
  routes: [{ name: 'Home' }, { name: 'Profile' }],
};

----------------------------------------

TITLE: Installing Core React Navigation Package
DESCRIPTION: Command to install the core React Navigation package in an existing project.

LANGUAGE: bash
CODE:
npm install @react-navigation/native

----------------------------------------

TITLE: Installing dependencies for bare React Native project
DESCRIPTION: Command to install required dependencies (react-native-gesture-handler and react-native-reanimated) for a bare React Native project using npm.

LANGUAGE: bash
CODE:
npm install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Installing Gesture Handler Native Implementation
DESCRIPTION: Conditional import setup for react-native-gesture-handler on native platforms

LANGUAGE: javascript
CODE:
// Only import react-native-gesture-handler on native platforms
import 'react-native-gesture-handler';

----------------------------------------

TITLE: Example Navigation State in React Navigation
DESCRIPTION: This snippet shows an example of a navigation state object with two routes. It demonstrates the structure used by the router's getStateForAction method to represent the current navigation state.

LANGUAGE: javascript
CODE:
{
  index: 1,
  routes: [
    { key: 'A', routeName: 'Foo' },
    { key: 'B', routeName: 'Bar' },
  ],
}

----------------------------------------

TITLE: Using withNavigation HOC in React Navigation
DESCRIPTION: This snippet shows the proper implementation using withNavigation HOC to automatically inject the navigation prop into a component, eliminating the need to pass it explicitly through props.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Updating Parameters in React Navigation
DESCRIPTION: This example demonstrates how to update the parameters of a screen using the navigation.setParams() method. It allows you to change the params after the initial navigation.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import {
  createStaticNavigation,
  useNavigation,
} from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';

function HomeScreen({ route }) {
  const navigation = useNavigation();
  const { itemId } = route.params;

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Home Screen</Text>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Button
        onPress={
          () =>
            navigation.setParams({
              itemId: Math.floor(Math.random() * 100),
            })
        }
      >
        Update param
      </Button>
    </View>
  );
}

----------------------------------------

TITLE: Nested Navigation State Structure in React Navigation
DESCRIPTION: Example showing a nested navigation state structure for composed navigators.

LANGUAGE: javascript
CODE:
{
  key: 'B',
  routeName: 'Profile',
  params: { id: '123' },
  index: 1,
  routes: [ {...}, {...} ]
}

----------------------------------------

TITLE: Creating a Focus-Aware Status Bar Component for React Navigation
DESCRIPTION: This snippet creates a FocusAwareStatusBar component that renders the StatusBar only when the screen is focused. It uses the useIsFocused hook from React Navigation to determine if the screen is currently focused.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { StatusBar } from 'react-native';
import { useIsFocused } from '@react-navigation/native';

function FocusAwareStatusBar(props) {
  const isFocused = useIsFocused();

  return isFocused ? <StatusBar {...props} /> : null;
}

----------------------------------------

TITLE: Using Focus-Aware Status Bar in React Navigation Screens
DESCRIPTION: This snippet shows how to use the FocusAwareStatusBar component in individual screens of a React Navigation app. This approach is particularly useful for tab and drawer navigators where multiple screens might be rendered simultaneously.

LANGUAGE: jsx
CODE:
function Screen1({ navigation }) {
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>
      <FocusAwareStatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen2')}
        color="#fff"
      />
    </SafeAreaView>
  );
}

function Screen2({ navigation }) {
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>
      <FocusAwareStatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen1')}
      />
    </SafeAreaView>
  );
}

----------------------------------------

TITLE: Drawer Control Methods
DESCRIPTION: Shows the basic methods for programmatically controlling the drawer's open/close state using navigation props.

LANGUAGE: javascript
CODE:
this.props.navigation.openDrawer();
this.props.navigation.closeDrawer();

----------------------------------------

TITLE: Clearing Metro bundler cache in Expo
DESCRIPTION: Command to clear the Metro bundler cache when using Expo to resolve module resolution issues.

LANGUAGE: bash
CODE:
expo start -c

----------------------------------------

TITLE: Installing Correct Version of react-native-safe-area-context for Expo
DESCRIPTION: Command to install the correct version of react-native-safe-area-context in an Expo project.

LANGUAGE: bash
CODE:
npx expo install react-native-safe-area-context

----------------------------------------

TITLE: Importing gesture-handler in the entry file
DESCRIPTION: Code to import the gesture-handler at the top of the entry file (e.g., index.js or App.js) to ensure proper setup.

LANGUAGE: javascript
CODE:
import './gesture-handler';

----------------------------------------

TITLE: Conditionally importing react-native-gesture-handler for native platforms
DESCRIPTION: Code for conditionally importing react-native-gesture-handler only on native platforms to optimize bundle size.

LANGUAGE: javascript
CODE:
// Only import react-native-gesture-handler on native platforms
import 'react-native-gesture-handler';

----------------------------------------

TITLE: Using Screen Options in HTML Meta Tags
DESCRIPTION: This example demonstrates how to use the screen options obtained from ServerContainer to set HTML meta tags for SEO purposes.

LANGUAGE: jsx
CODE:
<title>{options.title}</title>
<meta name="description" content={options.description} />

----------------------------------------

TITLE: Using goBack Function in React Navigation
DESCRIPTION: Shows different ways to use the goBack function from the navigation prop, including going back to a specific screen or anywhere in the navigation stack.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    const { goBack } = this.props.navigation;
    return (
      <View>
        <Button onPress={() => goBack()} title="Go back from this HomeScreen" />
        <Button onPress={() => goBack(null)} title="Go back anywhere" />
        <Button
          onPress={() => goBack('key-123')}
          title="Go back from key-123"
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Configuring Material Bottom Tab Navigator with Routes
DESCRIPTION: Complete example showing how to configure the material bottom tab navigator with multiple routes and custom styling options.

LANGUAGE: javascript
CODE:
export default createMaterialBottomTabNavigator(
  {
    Album: { screen: Album },
    Library: { screen: Library },
    History: { screen: History },
    Cart: { screen: Cart },
  },
  {
    initialRouteName: 'Album',
    activeColor: '#f0edf6',
    inactiveColor: '#3e2465',
    barStyle: { backgroundColor: '#694fad' },
  }
);

----------------------------------------

TITLE: Theme Configuration Update
DESCRIPTION: Example showing how to update theme configuration to include fonts property

LANGUAGE: diff
CODE:
import { DefaultTheme } from '@react-navigation/native';

const theme = {
  colors: {
    // ...
  },
+   fonts: DefaultTheme.fonts,
};

----------------------------------------

TITLE: Implementing Shared Element Transitions in React Navigation (Dynamic Configuration)
DESCRIPTION: This code snippet shows how to implement shared element transitions using React Navigation with a dynamic configuration. It uses Animated components from react-native-reanimated and assigns shared transition tags to elements on different screens.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View, StyleSheet } from 'react-native';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Button } from '@react-navigation/elements';

import Animated from 'react-native-reanimated';

const Stack = createNativeStackNavigator();

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Button onPress={() => navigation.navigate('Details')}>
        Go to Details
      </Button>
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 300, height: 300 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

function DetailsScreen() {
  const navigation = useNavigation();

  return (
    <View style={styles.container}>
      <Button onPress={() => navigation.goBack()}>Go back</Button>
      <Animated.Image
        source={{ uri: 'https://picsum.photos/id/39/200' }}
        style={{ width: 100, height: 100 }}
        sharedTransitionTag="tag"
      />
    </View>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Route Configuration Example
DESCRIPTION: Example showing how to configure routes in a stack navigator with screen components and navigation options.

LANGUAGE: javascript
CODE:
createStackNavigator({
  Profile: {
    screen: ProfileScreen,
    path: 'people/:name',
    navigationOptions: ({ navigation }) => ({
      title: `${navigation.state.params.name}'s Profile'`,
    }),
  },
  ...MyOtherRoutes,
});

----------------------------------------

TITLE: Implementing getStateForAction in JavaScript for React Navigation Router
DESCRIPTION: This snippet shows the expected structure of a navigation state object returned by the getStateForAction function in a custom React Navigation router. It includes an index and an array of routes with required properties.

LANGUAGE: javascript
CODE:
{
  index: 1, // identifies which route in the routes array is active
  routes: [
    {
      // Each route needs a name to identify the type.
      routeName: 'MyRouteName',

      // A unique identifier for this route in the routes array:
      key: 'myroute-123',
      // (used to specify the re-ordering of routes)

      // Routes can have any data, as long as key and routeName are correct
      ...randomRouteData,
    },
    ...moreRoutes,
  ]
}

----------------------------------------

TITLE: Implementing Focus-Aware Status Bar in Screens
DESCRIPTION: Updated screen components using the FocusAwareStatusBar component for proper status bar handling in tab and drawer navigators.

LANGUAGE: jsx
CODE:
class Screen1 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>
        <FocusAwareStatusBar
          barStyle="light-content"
          backgroundColor="#6a51ae"
        />
        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen2')
          color={isAndroid ? 'blue' : '#fff'}
        />
      </SafeAreaView>
    );
  }
}

class Screen2 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>
        <FocusAwareStatusBar
          barStyle="dark-content"
          backgroundColor="#ecf0f1"
        />
        <Text style={styles.paragraph}>Dark Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen1')
        />
      </SafeAreaView>
    );
  }
}

----------------------------------------

TITLE: Type Checking Navigation Options in React Navigation with TypeScript
DESCRIPTION: This snippet demonstrates how to type check navigationOptions for a screen using NavigationStackOptions. It provides type-checking for the static navigationOptions property.

LANGUAGE: typescript
CODE:
import { NavigationStackOptions } from 'react-navigation-stack';

// ...

class ProfileScreen extends React.Component<Props> {
  static navigationOptions: NavigationStackOptions = {
    headerTitle: 'Profile',
  };

  // ...
}

----------------------------------------

TITLE: Reinstalling Dependencies with NPM
DESCRIPTION: Commands to delete node_modules, package-lock.json, and reinstall dependencies using npm.

LANGUAGE: bash
CODE:
rm -rf node_modules
rm package-lock.json
npm install

----------------------------------------

TITLE: Checking Dependency Tree with Yarn
DESCRIPTION: Command to check why a specific package is installed using yarn.

LANGUAGE: bash
CODE:
yarn why react-native-safe-area-context

----------------------------------------

TITLE: Correct Navigation Options in Nested Navigator
DESCRIPTION: Example showing correct placement of tabBarLabel navigation options on stack navigator components.

LANGUAGE: javascript
CODE:
const HomeStack = createStackNavigator({ A });
const SettingsStack = createStackNavigator({ B });

HomeStack.navigationOptions = {
  tabBarLabel: 'Home!',
};

SettingsStack.navigationOptions = {
  tabBarLabel: 'Settings!',
};

export default createAppContainer(
  createBottomTabNavigator({
    HomeStack,
    SettingsStack,
  })
);

----------------------------------------

TITLE: Configuring Android MainActivity in Kotlin
DESCRIPTION: Required Android configuration in MainActivity.kt for react-native-screens package.

LANGUAGE: kotlin
CODE:
class MainActivity: ReactActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(null)
  }
}

----------------------------------------

TITLE: Styled Material Bottom Tabs Example
DESCRIPTION: Example showing how to customize the bottom navigation bar with custom colors and styles.

LANGUAGE: javascript
CODE:
<Tab.Navigator
  initialRouteName="Home"
  activeColor="#f0edf6"
  inactiveColor="#3e2465"
  barStyle={{ backgroundColor: '#694fad' }}
>
  {/* ... */}
</Tab.Navigator>

----------------------------------------

TITLE: Creating a Context for Status Codes
DESCRIPTION: Creates a React context to handle status codes for server rendering, particularly useful for 404 pages.

LANGUAGE: javascript
CODE:
import * as React from 'react';

const StatusCodeContext = React.createContext();

export default StatusCodeContext;

----------------------------------------

TITLE: Configuring Tab Bar Options in React Navigation
DESCRIPTION: Example configuration for customizing the tab bar appearance including label style, tab width, and background color settings.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  labelStyle: {
    fontSize: 12,
  },
  tabStyle: {
    width: 100,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Using useReduxDevToolsExtension Hook with Dynamic Navigation in React Native
DESCRIPTION: Example of integrating the useReduxDevToolsExtension hook with dynamic navigation in a React Native app. It shows how to import components and apply the hook to a navigation container reference.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useReduxDevToolsExtension } from '@react-navigation/devtools';

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useReduxDevToolsExtension(navigationRef);

  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Installing Bottom Tabs Navigator
DESCRIPTION: Command to install the 6.x version of @react-navigation/bottom-tabs package.

LANGUAGE: bash
CODE:
npm install @react-navigation/bottom-tabs@^6.x

----------------------------------------

TITLE: Configuring Screen Paths
DESCRIPTION: Example of configuring paths for different screens in the navigation structure.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: 'feed/:sort',
    Profile: 'user',
  },
};

const linking = {
  prefixes: ['https://mychat.com', 'mychat://'],
  config,
};

----------------------------------------

TITLE: Basic Stack Navigator Creation in React Navigation
DESCRIPTION: Shows the basic API signature for creating a stack navigator with route configurations and navigation options.

LANGUAGE: javascript
CODE:
createStackNavigator(RouteConfigs, StackNavigatorConfig);

----------------------------------------

TITLE: Creating Material Top Tab Navigator - React Navigation
DESCRIPTION: Basic syntax for creating a material top tab navigator with route configs and navigation options.

LANGUAGE: javascript
CODE:
createMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig);

----------------------------------------

TITLE: Using Custom Component as Header Title in React Navigation
DESCRIPTION: Shows how to replace the default header title with a custom component, such as an image, in React Navigation.

LANGUAGE: jsx
CODE:
function LogoTitle() {
  return (
    <Image
      style={{ width: 50, height: 50 }}
      source={require('@expo/snack-static/react-native-logo.png')}
    />
  );
}

const MyStack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: HomeScreen,
      options: {
        headerTitle: (props) => <LogoTitle {...props} />,
      },
    },
  },
});

----------------------------------------

TITLE: Dispatching Navigation Actions from App Root in React Navigation
DESCRIPTION: This example illustrates how to use a React ref to access the navigation methods of an AppContainer from outside of screen components. It shows how to dispatch navigation actions from the root of the app.

LANGUAGE: javascript
CODE:
const AppContainer = createAppContainer(AppNavigator);

class App extends React.Component {
  someEvent() {
    // call navigate for AppNavigator here:
    this.navigator &&
      this.navigator.dispatch(
        NavigationActions.navigate({ routeName: someRouteName })
      );
  }
  render() {
    return (
      <AppContainer
        ref={(nav) => {
          this.navigator = nav;
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Clearing Metro Bundler Cache for Expo
DESCRIPTION: Command to clear the Metro bundler cache when using Expo to resolve module resolution issues.

LANGUAGE: bash
CODE:
expo start -c

----------------------------------------

TITLE: Checking Dependency Tree with NPM
DESCRIPTION: Command to list the dependency tree for a specific package using npm.

LANGUAGE: bash
CODE:
npm ls react-native-safe-area-context

----------------------------------------

TITLE: Handling 404 routes in static navigation
DESCRIPTION: Example of how to configure a catch-all route for unmatched paths in static navigation

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator({
  screens: {
    Home: {
      screen: HomeTabs,
    },
    NotFound: {
      screen: NotFoundScreen,
      linking: {
        path: '*',
      },
    },
  },
});

----------------------------------------

TITLE: Configuring Android MainActivity in Java
DESCRIPTION: Required Android configuration in MainActivity.java for react-native-screens package.

LANGUAGE: java
CODE:
import android.os.Bundle;

LANGUAGE: java
CODE:
public class MainActivity extends ReactActivity {
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(null);
  }
}

----------------------------------------

TITLE: Configuring Stack Navigator with Multiple Screens
DESCRIPTION: Shows how to configure multiple screens in a Stack Navigator with their respective components and names.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator();

const StackNavigator = (
  <Stack.Navigator>
    <Stack.Screen
      name="Home"
      component={HomeScreen} // <----
    />
    <Stack.Screen
      name="Details"
      component={DetailsScreen} // <----
    />
  </Stack.Navigator>
);

----------------------------------------

TITLE: Implementing a NotFound Screen with Status Code
DESCRIPTION: Shows how to implement a NotFound screen that sets a 404 status code using the StatusCodeContext.

LANGUAGE: javascript
CODE:
function NotFound() {
  const status = React.useContext(StatusCodeContext);

  if (status) {
    staus.code = 404;
  }

  return (
    <View>
      <Text>Oops! This URL doesn't exist.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing SafeAreaView in Screen Component
DESCRIPTION: Example of wrapping screen content in SafeAreaView to handle safe areas properly

LANGUAGE: jsx
CODE:
import { SafeAreaView } from 'react-navigation';

class MyHomeScreen extends Component {
  render() {
    return (
      <SafeAreaView style={styles.container}>
        <Text style={styles.paragraph}>This is top text.</Text>
        <Text style={styles.paragraph}>This is bottom text.</Text>
      </SafeAreaView>
    );
  }
}

----------------------------------------

TITLE: Correct Usage with useNavigationState
DESCRIPTION: Shows correct implementation using useNavigationState hook that properly updates on navigation changes

LANGUAGE: javascript
CODE:
function Profile() {
  const routesLength = useNavigationState((state) => state.routes.length);

  return <Text>Number of routes: {routesLength}</Text>;
}

----------------------------------------

TITLE: Updating Navigation Import Statements
DESCRIPTION: Code diff showing how to update import statements from consolidated react-navigation package to individual navigator packages.

LANGUAGE: diff
CODE:
- import { createAppContainer, createStackNavigator } from 'react-navigation';
+ import { createAppContainer } from 'react-navigation';
+ import { createStackNavigator } from 'react-navigation-stack';

----------------------------------------

TITLE: Implementing Navigation Store with MobX State Tree
DESCRIPTION: Example of a navigation store implementation using MobX State Tree, demonstrating how to manage navigation parameters for different screens with proper type definitions and references.

LANGUAGE: javascript
CODE:
import { types, onSnapshot, getRoot } from 'mobx-state-tree';
import { Product } from '../models/Product';
import { User } from '../models/User';

export const NavigationStore = types
  .model('NavigationStore', {
    productDetailScreenParams: types.map(
      types.model('ProductDetailScreenParams', {
        product: types.optional(types.safeReference(Product)),
      })
    ),
    userProfileScreenParams: types.model('UserProfileScreenParams', {
      user: types.maybe(types.safeReference(User)),
    }),
  })
  .actions(self => ({
    ...
  }));

----------------------------------------

TITLE: Creating Drawer Navigator with Custom Status Bar (React Navigation)
DESCRIPTION: This snippet demonstrates how to create a drawer navigator with two screens that have different status bar configurations.

LANGUAGE: jsx
CODE:
export default createDrawerNavigator({
  Screen1: {
    screen: Screen1,
  },
  Screen2: {
    screen: Screen2,
  },
});

----------------------------------------

TITLE: Implementing isFirstRouteInParent with useNavigationState Hook
DESCRIPTION: Example of how to implement the isFirstRouteInParent functionality using the new useNavigationState hook in React Navigation 5.x.

LANGUAGE: javascript
CODE:
function useIsFirstRouteInParent() {
  const route = useRoute();
  const isFirstRouteInParent = useNavigationState(
    (state) => state.routes[0].key === route.key
  );

  return isFirstRouteInParent;
}

----------------------------------------

TITLE: Blocking Navigation Actions in React Navigation
DESCRIPTION: This snippet demonstrates how to block certain navigation actions based on the current state. It overrides the getStateForAction method to prevent the BACK action when a route is in an editing state.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyStackRouter = StackRouter(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyStackRouter.router.getStateForAction;

MyStackRouter.router.getStateForAction = (action, state) => {
  if (
    state &&
    action.type === NavigationActions.BACK &&
    state.routes[state.index].params.isEditing
  ) {
    // Returning null from getStateForAction means that the action
    // has been handled/blocked, but there is not a new state
    return null;
  }

  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Importing and Using createBottomTabNavigator in React Navigation
DESCRIPTION: Basic usage of createBottomTabNavigator function to create a bottom tab navigator.

LANGUAGE: javascript
CODE:
import { createBottomTabNavigator } from 'react-navigation-tabs';

createBottomTabNavigator(RouteConfigs, TabNavigatorConfig);

----------------------------------------

TITLE: Responsive Drawer Configuration
DESCRIPTION: Example showing how to conditionally render different drawer types based on screen size

LANGUAGE: javascript
CODE:
import { useWindowDimensions } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  const dimensions = useWindowDimensions();

  return (
    <Drawer.Navigator
      drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}
    >
      {/* Screens */}
    </Drawer.Navigator>
  );

----------------------------------------

TITLE: Responsive Drawer Configuration
DESCRIPTION: Example showing how to conditionally render different drawer types based on screen size

LANGUAGE: javascript
CODE:
import { useWindowDimensions } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  const dimensions = useWindowDimensions();

  return (
    <Drawer.Navigator
      drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}
    >
      {/* Screens */}
    </Drawer.Navigator>
  );

----------------------------------------

TITLE: Adding Tab Press Listener to Screen in React Navigation 5.x
DESCRIPTION: Example of how to add a tab press listener to a screen using the listeners prop in React Navigation 5.x.

LANGUAGE: javascript
CODE:
<Tab.Screen
  name="Chat"
  component={Chat}
  listeners={({ navigation, route }) => ({
    tabPress: (e) => {
      // Prevent default action
      e.preventDefault();

      // Do something with the `navigation` object
      navigation.navigate('AnotherPlace');
    },
  })}
/>

----------------------------------------

TITLE: Third-party Deep Link Integration
DESCRIPTION: Example of integrating third-party deep linking services like Firebase Dynamic Links with React Navigation.

LANGUAGE: javascript
CODE:
const linking = {
  prefixes: ['myapp://', 'https://myapp.com'],

  async getInitialURL() {
    const { isAvailable } = utils().playServicesAvailability;

    if (isAvailable) {
      const initialLink = await dynamicLinks().getInitialLink();
      if (initialLink) {
        return initialLink.url;
      }
    }
    const url = await Linking.getInitialURL();
    return url;
  },

  subscribe(listener) {
    const unsubscribeFirebase = dynamicLinks().onLink(({ url }) => {
      listener(url);
    });

    const linkingSubscription = Linking.addEventListener('url', ({ url }) => {
      listener(url);
    });

    return () => {
      unsubscribeFirebase();
      linkingSubscription.remove();
    };
  },

  config: {
    // Deep link configuration
  },
}

----------------------------------------

TITLE: Installing Flipper Dependencies
DESCRIPTION: Command to install the react-native-flipper package required for Flipper integration.

LANGUAGE: bash
CODE:
npm install --save-dev react-native-flipper

----------------------------------------

TITLE: Navigation State Structure Example
DESCRIPTION: Shows the structure of a typical navigation state object with routes and active index.

LANGUAGE: javascript
CODE:
{
  key: 'StackRouterRoot',
  index: 1,
  routes: [
    { key: 'A', name: 'Home' },
    { key: 'B', name: 'Profile' },
  ]
}

----------------------------------------

TITLE: Setting Up ServerContainer with Location Prop
DESCRIPTION: This snippet shows how to set up the ServerContainer component with a location prop, which is typically constructed based on the incoming server request.

LANGUAGE: jsx
CODE:
<ServerContainer location={{ pathname: '/profile', search: '' }}>
  <App />
</ServerContainer>

----------------------------------------

TITLE: Drawer Actions Dispatch Methods
DESCRIPTION: Illustrates how to dispatch drawer actions directly using the navigation prop.

LANGUAGE: javascript
CODE:
this.props.navigation.dispatch(DrawerActions.openDrawer());
this.props.navigation.dispatch(DrawerActions.closeDrawer());
this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Defining a Complete Custom Theme in React Navigation
DESCRIPTION: This snippet shows how to create a fully custom theme object with all required properties, including dark mode flag and color definitions for various UI elements.

LANGUAGE: javascript
CODE:
const MyTheme = {
  dark: false,
  colors: {
    primary: 'rgb(255, 45, 85)',
    background: 'rgb(242, 242, 242)',
    card: 'rgb(255, 255, 255)',
    text: 'rgb(28, 28, 30)',
    border: 'rgb(199, 199, 204)',
    notification: 'rgb(255, 69, 58)',
  },
};

----------------------------------------

TITLE: Configuring Deep Linking with useLinking in React Navigation
DESCRIPTION: This snippet shows how to configure the useLinking hook with prefixes and screen mappings for deep linking in a React Native app.

LANGUAGE: javascript
CODE:
useLinking(ref, {
  prefixes: ['https://mychat.com', 'mychat://'],
  config: {
    screens: {
      Chat: 'feed/:sort',
    },
  },
});

----------------------------------------

TITLE: Integrating Provider with Navigation Container in React
DESCRIPTION: Example showing how to wrap the NavigationContainer with MobX Provider component to make store objects accessible throughout the application.

LANGUAGE: javascript
CODE:
<Provider myObject={this.myObject}>
  <NavigationContainer>{/* Screen configuration */}</NavigationContainer>
</Provider>

----------------------------------------

TITLE: Basic Tab Navigation Setup in React Native
DESCRIPTION: Minimal implementation of bottom tab navigation with Home and Settings screens using createBottomTabNavigator.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { createBottomTabNavigator } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Home!</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Settings!</Text>
      </View>
    );
  }
}

export default createBottomTabNavigator({
  Home: HomeScreen,
  Settings: SettingsScreen,
});

----------------------------------------

TITLE: Implementing Authentication Loading Screen in React Native
DESCRIPTION: This snippet demonstrates the implementation of an authentication loading screen. It checks for a stored user token and navigates to either the App or Auth screen based on the result. It also displays a loading indicator while checking.

LANGUAGE: javascript
CODE:
import React from 'react';
import {
  ActivityIndicator,
  AsyncStorage,
  StatusBar,
  StyleSheet,
  View,
} from 'react-native';

class AuthLoadingScreen extends React.Component {
  constructor(props) {
    super(props);
    this._bootstrapAsync();
  }

  // Fetch the token from storage then navigate to our appropriate place
  _bootstrapAsync = async () => {
    const userToken = await AsyncStorage.getItem('userToken');

    // This will switch to the App screen or Auth screen and this loading
    // screen will be unmounted and thrown away.
    this.props.navigation.navigate(userToken ? 'App' : 'Auth');
  };

  // Render any loading content that you like here
  render() {
    return (
      <View>
        <ActivityIndicator />
        <StatusBar barStyle="default" />
      </View>
    );
  }
}

----------------------------------------

TITLE: Defining Routes with Default Parameters in React Navigation
DESCRIPTION: Shows how to provide default parameters inside route definitions when creating a stack navigator.

LANGUAGE: javascript
CODE:
const Store = createStackNavigator({
  Playstation: { screen: ProductScreen, params: { product: 'Playstation' } },
  Xbox: { screen: ProductScreen, params: { product: 'Xbox' } },
});

----------------------------------------

TITLE: Sharing Header Styles Across Screens in React Navigation
DESCRIPTION: Demonstrates how to share common navigation options across multiple screens using defaultNavigationOptions in the stack navigator configuration.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
    /* No more header config here! */
  };

  /* render function, etc */
}

/* other code... */

const AppNavigator = createStackNavigator(
  {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
  {
    initialRouteName: 'Home',
    /* The header config from HomeScreen is now here */
    defaultNavigationOptions: {
      headerStyle: {
        backgroundColor: '#f4511e',
      },
      headerTintColor: '#fff',
      headerTitleStyle: {
        fontWeight: 'bold',
      },
    },
  }
);

----------------------------------------

TITLE: Customizing Loading View for State Persistence
DESCRIPTION: This example demonstrates how to customize the loading view displayed while the navigation state is being loaded. It uses the renderLoadingExperimental prop to render an ActivityIndicator during the loading phase.

LANGUAGE: javascript
CODE:
<AppNavigator
  persistNavigationState={...}
  loadNavigationState={...}
  renderLoadingExperimental={() => <ActivityIndicator />}
/>

----------------------------------------

TITLE: Specifying Screen Options in React Navigation 5.x
DESCRIPTION: Example of how to specify screen options when defining a screen in React Navigation 5.x.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={{ headerShown: false }}
/>

----------------------------------------

TITLE: Basic Bottom Tabs Navigator Implementation - Dynamic Configuration
DESCRIPTION: Example showing how to implement a basic bottom tabs navigator with dynamic configuration

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

const Tab = createBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Running React Navigation Website in Production Mode
DESCRIPTION: Command to run the React Navigation website in production mode with server rendering.

LANGUAGE: bash
CODE:
yarn prod

----------------------------------------

TITLE: Configuring Status Bar in Stack Navigator with React Navigation
DESCRIPTION: This snippet demonstrates how to configure different status bar styles for different screens in a stack navigator using React Navigation. It uses the StatusBar component from React Native and the SafeAreaProvider for proper insets handling.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text, StatusBar, Button, StyleSheet } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

function Screen1({ navigation }) {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#6a51ae',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <StatusBar barStyle="light-content" backgroundColor="#6a51ae" />
      <Text style={{ color: '#fff' }}>Light Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen2')}
        color="#fff"
      />
    </View>
  );
}

function Screen2({ navigation }) {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={[
        styles.container,
        {
          backgroundColor: '#ecf0f1',
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <StatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
      <Text>Dark Screen</Text>
      <Button
        title="Next screen"
        onPress={() => navigation.navigate('Screen1')}
      />
    </View>
  );
}

const Stack = createNativeStackNavigator();

export default function App() {
  return (
    <SafeAreaProvider>
      <NavigationContainer>
        <Stack.Navigator screenOptions={{ headerShown: false }}>
          <Stack.Screen name="Screen1" component={Screen1} />
          <Stack.Screen name="Screen2" component={Screen2} />
        </Stack.Navigator>
      </NavigationContainer>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

----------------------------------------

TITLE: Using Screen Options in HTML Head
DESCRIPTION: This example demonstrates how to use the screen options obtained from ServerContainer to set the title and meta description in the HTML head.

LANGUAGE: jsx
CODE:
<title>{options.title}</title>
<meta name="description" content={options.description} />

----------------------------------------

TITLE: Creating Basic Stack Navigator in React Native
DESCRIPTION: Basic implementation of a Stack Navigator with a single HomeScreen component. Shows how to set up the navigator and export it through createAppContainer.

LANGUAGE: javascript
CODE:
import React from 'react';
import { View, Text } from 'react-native';
import { createStackNavigator, createAppContainer } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
      </View>
    );
  }
}

const AppNavigator = createStackNavigator({
  Home: {
    screen: HomeScreen,
  },
});

export default createAppContainer(AppNavigator);

----------------------------------------

TITLE: Configuring Stack Navigator with Options
DESCRIPTION: Example of configuring Stack Navigator with various options for screens.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerMode: 'screen',
        headerTintColor: 'white',
        headerStyle: { backgroundColor: 'tomato' },
      }}
    >
      <Stack.Screen
        name="Home"
        component={Home}
        options={{
          title: 'Awesome app',
        }}
      />
      <Stack.Screen
        name="Profile"
        component={Profile}
        options={{
          title: 'My profile',
        }}
      />
      <Stack.Screen
        name="Settings"
        component={Settings}
        options={{
          gestureEnabled: false,
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Configuring iOS Deep Linking in AppDelegate
DESCRIPTION: Adds necessary Objective-C code to AppDelegate.m for handling deep links in iOS applications.

LANGUAGE: objc
CODE:
#import <React/RCTLinkingManager.h>

- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

----------------------------------------

TITLE: Using useLinkProps with Custom Action in React Navigation
DESCRIPTION: This example demonstrates how to use the useLinkProps hook with a custom action, specifically using StackActions.replace instead of the default navigate action.

LANGUAGE: jsx
CODE:
import { StackActions } from '@react-navigation/native';

// ...

function Home() {
  return (
    <LinkButton
      to="/profile/jane"
      action={StackActions.replace('Profile', { id: 'jane' })}
    >
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: Importing Stack Navigator in React Navigation
DESCRIPTION: Shows how to import the createStackNavigator function from react-navigation. This navigator renders one screen at a time and provides transitions between screens.

LANGUAGE: markdown
CODE:
[createStackNavigator](stack-navigator.md)

----------------------------------------

TITLE: Advanced Navigation Dispatch Example
DESCRIPTION: Shows how to use the dispatch method to send custom navigation actions using NavigationActions.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',
  params: {},

  // navigate can have a nested navigate action that will be run inside the child router
  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});
this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Handling Custom URIs in React Navigation
DESCRIPTION: This example shows how to extend a router's getActionForPathAndParams method to handle custom URIs. It demonstrates adding support for a custom path that navigates to a Profile screen with a nested Friends route.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyApp = createStackNavigator(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);
const previousGetActionForPathAndParams =
  MyApp.router.getActionForPathAndParams;

Object.assign(MyApp.router, {
  getActionForPathAndParams(path, params) {
    if (path === 'my/custom/path' && params.magic === 'yes') {
      // returns a profile navigate action for /my/custom/path?magic=yes
      return NavigationActions.navigate({
        routeName: 'Profile',
        action: NavigationActions.navigate({
          // This child action will get passed to the child router
          // ProfileScreen.router.getStateForAction to get the child
          // navigation state.
          routeName: 'Friends',
        }),
      });
    }
    return previousGetActionForPathAndParams(path, params);
  },
});

----------------------------------------

TITLE: Navigating with Key Parameter
DESCRIPTION: Demonstrates how to access a navigator's key using the navigation prop. This is particularly useful when performing reset operations on specific navigators.

LANGUAGE: javascript
CODE:
this.props.navigation.dangerouslyGetParent().state.key

----------------------------------------

TITLE: Rendering Scenes in React Navigation Transitioner
DESCRIPTION: Example of how to implement the render prop function to display scenes and create animations using the transitionProps.

LANGUAGE: jsx
CODE:
_render(transitionProps, prevTransitionProps) {
  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));
  return (
    <View style={styles.stack}>
      {scenes}
    </View>
  );
}

LANGUAGE: jsx
CODE:
_renderScene(transitionProps, scene) {
  const { position } = transitionProps;
  const { index } = scene;
  const opacity = position.interpolate({
    inputRange: [index-1, index, index+1],
    outputRange: [0, 1, 0],
  });
  // The prop `router` is populated when we call `createNavigator`.
  const Scene = this.props.router.getComponent(scene.route.routeName);
  return (
    <Animated.View style={{ opacity }}>
      { Scene }
    </Animated.View>
  )
}

----------------------------------------

TITLE: Navigation Method Migration
DESCRIPTION: Example showing migration from navigate to popTo method

LANGUAGE: diff
CODE:
- navigation.navigate('PreviousScreen', { foo: 42 });
+ navigation.popTo('PreviousScreen', { foo: 42 });

----------------------------------------

TITLE: Passing Redux State as Navigation Params in JavaScript
DESCRIPTION: This snippet demonstrates how to pass Redux state as navigation parameters. It shows passing a count value from a connected component to another screen.

LANGUAGE: javascript
CODE:
<Button
  title="Go to static counter screen"
  onPress={() =>
    props.navigation.navigate('StaticCounter', {
      count,
    })
  }
/>

----------------------------------------

TITLE: Accessing Navigation Params in a Screen Component in JavaScript
DESCRIPTION: This snippet shows how to access navigation parameters in a screen component. It demonstrates retrieving and displaying the count value passed as a parameter.

LANGUAGE: javascript
CODE:
function StaticCounter({ route }) {
  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{route.params.count}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Running React Navigation Website in Development Mode
DESCRIPTION: Commands to install dependencies and start the React Navigation website in development mode with live-reloading.

LANGUAGE: bash
CODE:
cd website
yarn install
yarn start

----------------------------------------

TITLE: Accessing Navigation Params in a Screen Component in JavaScript
DESCRIPTION: This snippet shows how to access navigation parameters in a screen component. It demonstrates retrieving and displaying the count value passed as a parameter.

LANGUAGE: javascript
CODE:
function StaticCounter({ route }) {
  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{route.params.count}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Navigation With withNavigation HOC
DESCRIPTION: Example showing how to properly implement a back button component using withNavigation HOC to automatically receive the navigation prop through React context.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Custom Theme Implementation with Context
DESCRIPTION: Complete example of implementing a custom theming system using React Context API, including theme toggle functionality.

LANGUAGE: jsx
CODE:
const ThemeContext = React.createContext(null);
const ThemeConstants = {
  light: {
    backgroundColor: '#fff',
    fontColor: '#000',
  },
  dark: {
    backgroundColor: '#000',
    fontColor: '#fff',
  },
};

export default class AppContainer extends React.Component {
  state = {
    theme: 'light',
  };

  toggleTheme = () => {
    this.setState(({ theme }) => ({
      theme: theme === 'light' ? 'dark' : 'light',
    }));
  };

  render() {
    return (
      <ThemeContext.Provider
        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}
      >
        <HomeScreen />
      </ThemeContext.Provider>
    );
  }
}

----------------------------------------

TITLE: Expo Scheme Configuration
DESCRIPTION: JSON configuration for registering a URL scheme in an Expo project.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mychat"
  }
}

----------------------------------------

TITLE: Using useLinkBuilder Hook in React Navigation Drawer
DESCRIPTION: Demonstrates how to use the useLinkBuilder hook to create navigation links in a custom drawer content component. The hook generates paths based on route names and parameters, which can be used with the Link component for navigation.

LANGUAGE: javascript
CODE:
import { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';

// ...

function DrawerContent({ state, descriptors }) {
  const buildLink = useLinkBuilder();

  return state.routes((route) => (
    <Link
      to={buildLink(route.name, route.params)}
      action={CommonActions.navigate(route.name)}
    >
      {descriptors[route.key].options.title}
    </Link>
  ));
}

----------------------------------------

TITLE: Implementing a Custom Tab Bar in React Navigation
DESCRIPTION: Shows how to create and use a custom tab bar component with the Bottom Tab Navigator.

LANGUAGE: javascript
CODE:
import { View, Text, TouchableOpacity } from 'react-native';

function MyTabBar({ state, descriptors, navigation }) {
  const focusedOptions = descriptors[state.routes[state.index].key].options;

  if (focusedOptions.tabBarVisible === false) {
    return null;
  }

  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label =
          options.tabBarLabel !== undefined
            ? options.tabBarLabel
            : options.title !== undefined
            ? options.title
            : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };

        const onLongPress = () => {
          navigation.emit({
            type: 'tabLongPress',
            target: route.key,
          });
        };

        return (
          <TouchableOpacity
            accessibilityRole="button"
            accessibilityState={isFocused ? { selected: true } : {}}
            accessibilityLabel={options.tabBarAccessibilityLabel}
            testID={options.tabBarTestID}
            onPress={onPress}
            onLongPress={onLongPress}
            style={{ flex: 1 }}
          >
            <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>
              {label}
            </Text>
          </TouchableOpacity>
        );
      })}
    </View>
  );
}

// ...

<Tab.Navigator tabBar={props => <MyTabBar {...props} />}>
  {...}
</Tab.Navigator>

----------------------------------------

TITLE: Resetting Navigation Stack with StackActions
DESCRIPTION: Demonstrates how to use StackActions.reset() to wipe the entire navigation state and replace it with new actions. Takes index and actions array as required parameters, with an optional key parameter.

LANGUAGE: javascript
CODE:
import { StackActions, NavigationActions } from 'react-navigation';

const resetAction = StackActions.reset({
  index: 0,
  actions: [NavigationActions.navigate({ routeName: 'Profile' })],
});
this.props.navigation.dispatch(resetAction);

----------------------------------------

TITLE: Shared Navigation Options Configuration
DESCRIPTION: Shows how to configure shared header styles across multiple screens using stack navigator options.

LANGUAGE: javascript
CODE:
const RootStack = createStackNavigator(
  {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
  {
    initialRouteName: 'Home',
    navigationOptions: {
      headerStyle: {
        backgroundColor: '#f4511e',
      },
      headerTintColor: '#fff',
      headerTitleStyle: {
        fontWeight: 'bold',
      },
    },
  }
);

----------------------------------------

TITLE: Cloning and Setting Up React Navigation Repository
DESCRIPTION: Commands to clone the React Navigation repository, set up remote, and install dependencies using yarn.

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/navigation-ex.git
cd navigation-ex
git remote add upstream https://github.com/react-navigation/react-navigation.git
yarn

----------------------------------------

TITLE: Implementing Modal Stack Navigation in React Navigation
DESCRIPTION: Demonstrates how to create a modal navigation structure using nested stack navigators in React Navigation. Includes implementation of a main stack with regular screens and a root stack that handles modal presentation with custom transition modes.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    const params = navigation.state.params || {};

    return {
      headerLeft: () => (
        <Button
          onPress={() => navigation.navigate('MyModal')}
          title="Info"
          color="#fff"
        />
      ),
      /* the rest of this config is unchanged */
    };
  };

  /* render function, etc */
}

class ModalScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text style={{ fontSize: 30 }}>This is a modal!</Text>
        <Button
          onPress={() => this.props.navigation.goBack()}
          title="Dismiss"
        />
      </View>
    );
  }
}

const MainStack = createStackNavigator(
  {
    Home: {
      screen: HomeScreen,
    },
    Details: {
      screen: DetailsScreen,
    },
  },
  {
    /* Same configuration as before */
  }
);

const RootStack = createStackNavigator(
  {
    Main: {
      screen: MainStack,
    },
    MyModal: {
      screen: ModalScreen,
    },
  },
  {
    mode: 'modal',
    headerMode: 'none',
  }
);

----------------------------------------

TITLE: Configuring NavigationContainer with Linking Props
DESCRIPTION: Basic setup for the NavigationContainer component with linking configuration, including prefixes and config options.

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';

const linking = {
  prefixes: [
    /* your linking prefixes */
  ],
  config: {
    /* configuration for matching screens with paths */
  },
};

function App() {
  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Installing Dependencies with npm
DESCRIPTION: Command to install gesture-handler and reanimated dependencies using npm directly.

LANGUAGE: bash
CODE:
npm install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Cache Reset Commands
DESCRIPTION: Commands for resetting cache and watchman when troubleshooting example apps

LANGUAGE: bash
CODE:
watchman watch-del-all
yarn start -- --reset-cache

----------------------------------------

TITLE: Cloning and Setting Up React Navigation Repository
DESCRIPTION: Commands to clone the React Navigation repository, set up remote, and install dependencies using yarn.

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/navigation-ex.git
cd navigation-ex
git remote add upstream https://github.com/react-navigation/react-navigation.git
yarn

----------------------------------------

TITLE: Using Connected Component in Navigation Options for React Navigation
DESCRIPTION: This example shows how to use a Redux-connected component in the navigation options, specifically in the title. It demonstrates passing Redux state to the navigation header.

LANGUAGE: javascript
CODE:
class Count extends React.Component {
  render() {
    return <Text>Count: {this.props.value}</Text>;
  }
}

let CountContainer = connect((state) => ({ value: state.count }))(Count);

class Counter extends React.Component {
  static navigationOptions = {
    title: <CountContainer />,
  };

  /* .. the rest of the code */
}

----------------------------------------

TITLE: Using Refs with withNavigation Components
DESCRIPTION: Example demonstrating how to properly use refs with components wrapped by withNavigation. Shows the usage of onRef prop instead of ref for accessing the wrapped component instance.

LANGUAGE: typescript
CODE:
// MyBackButton.ts
export default withNavigation(MyBackButton);

// MyNavBar.ts
<MyBackButton onRef={(elem) => this.backButton = elem} />

----------------------------------------

TITLE: Installing Elements Library
DESCRIPTION: Command to install the 6.x version of @react-navigation/elements package.

LANGUAGE: bash
CODE:
npm install @react-navigation/elements@^6.x

----------------------------------------

TITLE: Integrating Redux Provider with React Navigation in React Native
DESCRIPTION: This snippet demonstrates how to wrap the navigation container with a Redux Provider component. It sets up the basic structure for using Redux in a React Navigation app.

LANGUAGE: javascript
CODE:
let RootStack = createStackNavigator({
  Counter: CounterContainer,
  StaticCounter: StaticCounterContainer,
});

let Navigation = createAppContainer(RootStack);

// Render the app container component with the provider around it
export default class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Navigation />
      </Provider>
    );
  }
}

----------------------------------------

TITLE: Incorrect Navigator Nesting in React Navigation
DESCRIPTION: Example showing incorrect implementation of nested navigators where a navigator is rendered inside a screen component, leading to navigation state issues.

LANGUAGE: javascript
CODE:
export default class App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppContainer />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AuthenticationContainer = createAppContainer(AuthenticationNavigator);

class AuthenticationScreen extends React.Component {
  render() {
    /*
     * In a screen inside of the navigator we are rendering another navigator
     * You should avoid this! It will have its own navigation state and be unable
     * To interact with any parent navigator, eg: it would not know the route "Home" exists
     */
    return <AuthenticationContainer />;
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

const AppContainer = createAppContainer(AppNavigator);

----------------------------------------

TITLE: Implementing Multiple Drawers with react-native-drawer-layout in React Navigation
DESCRIPTION: This snippet demonstrates how to use react-native-drawer-layout to create multiple drawers in a React Navigation app. It shows the implementation for both static and dynamic configurations, including the use of context to control the right drawer.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { View } from 'react-native';
import { Drawer } from 'react-native-drawer-layout';
import { createDrawerNavigator } from '@react-navigation/drawer';
import {
  useNavigation,
  createStaticNavigation,
} from '@react-navigation/native';
import { Button } from '@react-navigation/elements';

const RightDrawerContext = React.createContext();

function HomeScreen() {
  const { openRightDrawer } = React.useContext(RightDrawerContext);
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.openDrawer()}>Open left drawer</Button>
      <Button onPress={() => openRightDrawer()}>Open right drawer</Button>
    </View>
  );
}

const LeftDrawerScreen = createDrawerNavigator({
  screenOptions: {
    drawerPosition: 'left',
  },
  screens: {
    Home: HomeScreen,
  },
});

function RightDrawerScreen() {
  const [rightDrawerOpen, setRightDrawerOpen] = React.useState(false);

  const value = React.useMemo(
    () => ({
      openRightDrawer: () => setRightDrawerOpen(true),
      closeRightDrawer: () => setRightDrawerOpen(false),
    }),
    []
  );

  return (
    <Drawer
      open={rightDrawerOpen}
      onOpen={() => setRightDrawerOpen(true)}
      onClose={() => setRightDrawerOpen(false)}
      drawerPosition="right"
      renderDrawerContent={() => <>{/* Right drawer content */}</>}
    >
      <RightDrawerContext.Provider value={value}>
        <LeftDrawerScreen />
      </RightDrawerContext.Provider>
    </Drawer>
  );
}

const Navigation = createStaticNavigation(RightDrawerScreen);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Drawer Progress Animation Example
DESCRIPTION: Example of using useDrawerProgress hook to animate drawer content with Reanimated

LANGUAGE: javascript
CODE:
import { Animated } from 'react-native-reanimated';
import { useDrawerProgress } from 'react-native-drawer-layout';

function MyComponent() {
  const progress = useDrawerProgress();

  const animatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateX: interpolate(progress, [0, 1], [-100, 0]),
        },
      ],
    };
  });

  return <Animated.View style={animatedStyle}>{/* ... */}</Animated.View>;
}

----------------------------------------

TITLE: Using LinkButton Component with Screen Navigation
DESCRIPTION: Example of using the custom LinkButton component to navigate to a specific screen with parameters.

LANGUAGE: javascript
CODE:
function Home() {
  return (
    <LinkButton to={{ screen: 'Profile', params: { id: 'jane' } }}>
      Go to Jane's profile
    </LinkButton>
  );
}

----------------------------------------

TITLE: Getting Navigator Key in React Navigation
DESCRIPTION: Demonstrates how to obtain a route's navigator key using the dangerouslyGetParent method. This is useful when performing reset operations on specific navigators.

LANGUAGE: javascript
CODE:
this.props.navigation.dangerouslyGetParent().state.key

----------------------------------------

TITLE: Building Screen Links with buildHref in React Navigation
DESCRIPTION: Example of using buildHref method in a DrawerContent component to create href paths for navigation. This demonstrates how to generate links for drawer navigation items based on the current navigation state.

LANGUAGE: javascript
CODE:
import { useLinkBuilder } from '@react-navigation/native';
import { PlatformPressable } from '@react-navigation/elements';

// ...

function DrawerContent({ state, descriptors, navigation }) {
  const { buildHref } = useLinkBuilder();

  return state.routes((route) => (
    <PlatformPressable
      href={buildHref(route.name, route.params)}
      onPress={() => navigation.navigate(route.name, route.params)}
    >
      {descriptors[route.key].options.title}
    </PlatformPressable>
  ));
}

----------------------------------------

TITLE: Implementing Deep Link Navigation in React Native with Expo
DESCRIPTION: Sets up deep link handling using Expo-Linking and React Navigation's NavigationContainer.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

const prefix = Linking.createURL('/');

function App() {
  const linking = {
    prefixes: [prefix],
  };

  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Installing iOS Pods
DESCRIPTION: Command to install CocoaPods dependencies for iOS development

LANGUAGE: bash
CODE:
npx pod-install ios

----------------------------------------

TITLE: Basic Material Top Tabs Implementation
DESCRIPTION: Minimal example showing how to create a Material Top Tabs navigator with two screens.

LANGUAGE: javascript
CODE:
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';

const Tab = createMaterialTopTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Clearing Expo Cache Command
DESCRIPTION: Command to clear the Metro bundler cache when using Expo to resolve module resolution issues.

LANGUAGE: bash
CODE:
expo start -c

----------------------------------------

TITLE: Implementing Deep Link Navigation in React Native with Expo
DESCRIPTION: Sets up deep link handling using Expo-Linking and React Navigation's NavigationContainer.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

const prefix = Linking.createURL('/');

function App() {
  const linking = {
    prefixes: [prefix],
  };

  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing Screen Tracking with Redux Middleware in React Navigation
DESCRIPTION: This snippet shows how to implement screen tracking using Redux middleware in React Navigation. It creates a screenTracking middleware that intercepts navigation actions and tracks screen views using Google Analytics. The code assumes the use of the react-native-google-analytics-bridge package and requires integration with Redux store.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';
import { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';

const tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);

const screenTracking =
  ({ getState }) =>
  (next) =>
  (action) => {
    if (
      action.type !== NavigationActions.NAVIGATE &&
      action.type !== NavigationActions.BACK
    ) {
      return next(action);
    }

    const currentScreen = getActiveRouteName(getState().navigation);
    const result = next(action);
    const nextScreen = getActiveRouteName(getState().navigation);
    if (nextScreen !== currentScreen) {
      // the line below uses the Google Analytics tracker
      // change the tracker here to use other Mobile analytics SDK.
      tracker.trackScreenView(nextScreen);
    }
    return result;
  };

export default screenTracking;

----------------------------------------

TITLE: Advanced Reset with Multiple Routes in React Navigation
DESCRIPTION: Shows how to reset navigation state with multiple routes while setting a specific route as active using the index parameter.

LANGUAGE: javascript
CODE:
import { StackActions, NavigationActions } from 'react-navigation';

const resetAction = StackActions.reset({
  index: 1,
  actions: [
    NavigationActions.navigate({ routeName: 'Profile' }),
    NavigationActions.navigate({ routeName: 'Settings' }),
  ],
});
this.props.navigation.dispatch(resetAction);

----------------------------------------

TITLE: Creating Web Navigation with React Navigation
DESCRIPTION: Demonstrates how to set up web navigation using React Navigation's web support, including route configuration and link component usage.

LANGUAGE: javascript
CODE:
import { createSwitchNavigator } from "@react-navigation/core";
import { createBrowserApp, Link } from "@react-navigation/web";

class Home extends React.Component {
  static path = "";
  static navigationOptions = {
    title: "Home",
  };
  render () {
    return (
      <div>
        <h2>Home Screen</h2>
        <Link toRoute="Profile" params={{ name: "Brent", view: "photos" }}>
          Brent's photos
        </Link>
      </div>
    );
  }
}
class Profile extends React.Component {
  static path = "/profile/:name";
  ...
}

const AppNavigator = createSwitchNavigator({
  Home,
  Profile,
});

const App = createBrowserApp(AppNavigator);

export default App;

----------------------------------------

TITLE: Initializing React Navigation with Redux Provider
DESCRIPTION: Basic setup showing how to wrap a React Navigation container with Redux Provider component to enable Redux integration throughout the app.

LANGUAGE: javascript
CODE:
let RootStack = createStackNavigator({
  Counter: CounterContainer,
  StaticCounter: StaticCounterContainer,
});

let Navigation = createAppContainer(RootStack);

// Render the app container component with the provider around it
export default class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Navigation />
      </Provider>
    );
  }
}

----------------------------------------

TITLE: Installing React Navigation Base Package
DESCRIPTION: Command to install the core react-navigation package using npm.

LANGUAGE: bash
CODE:
npm install react-navigation

----------------------------------------

TITLE: Popping to Top of Navigation Stack
DESCRIPTION: Demonstrates using StackActions.popToTop() to return to the first screen in the stack while dismissing all other screens.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

this.props.navigation.dispatch(StackActions.popToTop());

----------------------------------------

TITLE: Loading View Implementation for State Persistence
DESCRIPTION: Implementation of a loading view while the navigation state is being restored.

LANGUAGE: javascript
CODE:
if (!isReady) {
  return <ActivityIndicator />;
}

----------------------------------------

TITLE: Creating a Drawer Navigator in React Navigation
DESCRIPTION: This snippet shows the basic syntax for creating a drawer navigator using createDrawerNavigator. It takes RouteConfigs and DrawerNavigatorConfig as parameters.

LANGUAGE: javascript
CODE:
createDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);

----------------------------------------

TITLE: Using buildAction for href-based Navigation in React Navigation
DESCRIPTION: Example showing how to use the buildAction method to convert a href string into a navigation action. This demonstrates creating a button that navigates to a user profile using a URL-style path.

LANGUAGE: javascript
CODE:
import { Link, CommonActions, useLinkBuilder } from '@react-navigation/native';
import { Button } from '@react-navigation/elements';

// ...

function MyComponent() {
  const { buildAction } = useLinkBuilder();

  return (
    <Button onPress={() => navigation.dispatch(buildAction('/users/jane'))}>      Go to Jane's profile
    </Button>
  );
}

----------------------------------------

TITLE: Gesture Handler Import
DESCRIPTION: Required import statement for react-native-gesture-handler that must be at the top of the entry file

LANGUAGE: javascript
CODE:
import 'react-native-gesture-handler';

----------------------------------------

TITLE: Custom Tab Bar Implementation
DESCRIPTION: Example of implementing a custom tab bar component with animation and interaction handling.

LANGUAGE: javascript
CODE:
import { View, TouchableOpacity } from 'react-native';
import Animated from 'react-native-reanimated';

function MyTabBar({ state, descriptors, navigation, position }) {
  return (
    <View style={{ flexDirection: 'row' }}>
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const label =
          options.tabBarLabel !== undefined
            ? options.tabBarLabel
            : options.title !== undefined
            ? options.title
            : route.name;

        const isFocused = state.index === index;

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
            canPreventDefault: true,
          });

          if (!isFocused && !event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };

        const onLongPress = () => {
          navigation.emit({
            type: 'tabLongPress',
            target: route.key,
          });
        };

        const inputRange = state.routes.map((_, i) => i);
        const opacity = Animated.interpolate(position, {
          inputRange,
          outputRange: inputRange.map(i => (i === index ? 1 : 0)),
        });

        return (
          <TouchableOpacity
            accessibilityRole="button"
            accessibilityState={isFocused ? { selected: true } : {}}
            accessibilityLabel={options.tabBarAccessibilityLabel}
            testID={options.tabBarTestID}
            onPress={onPress}
            onLongPress={onLongPress}
            style={{ flex: 1 }}
          >
            <Animated.Text style={{ opacity }}>
              {label}
            </Animated.Text>
          </TouchableOpacity>
        );
      })}
    </View>
  );
}

----------------------------------------

TITLE: Implementing Authentication Loading Screen in React Native
DESCRIPTION: This code snippet shows the implementation of an AuthLoadingScreen component. It checks for a user token in AsyncStorage and navigates to either the App or Auth screen based on the token's presence.

LANGUAGE: jsx
CODE:
import React from 'react';
import {
  ActivityIndicator,
  AsyncStorage,
  StatusBar,
  StyleSheet,
  View,
} from 'react-native';

class AuthLoadingScreen extends React.Component {
  constructor(props) {
    super(props);
    this._bootstrapAsync();
  }

  // Fetch the token from storage then navigate to our appropriate place
  _bootstrapAsync = async () => {
    const userToken = await AsyncStorage.getItem('userToken');

    // This will switch to the App screen or Auth screen and this loading
    // screen will be unmounted and thrown away.
    this.props.navigation.navigate(userToken ? 'App' : 'Auth');
  };

  // Render any loading content that you like here
  render() {
    return (
      <View>
        <ActivityIndicator />
        <StatusBar barStyle="default" />
      </View>
    );
  }
}

----------------------------------------

TITLE: Setting Route Params in React Navigation
DESCRIPTION: Shows how to update route parameters using the setParams method from the navigation prop.

LANGUAGE: javascript
CODE:
class ProfileScreen extends React.Component {
  render() {
    return (
      <Button
        onPress={() => this.props.navigation.setParams({ name: 'Lucy' })}
        title="Set title name to 'Lucy'"
      />
    );
  }
}

----------------------------------------

TITLE: Implementing Navigation with React Navigation using Refs
DESCRIPTION: Example showing how to implement navigation from the same level where navigator is declared using React refs. This approach allows dispatching navigation actions from the top-level component.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const AppNavigator = createStackNavigator(SomeAppRouteConfigs);

class App extends React.Component {
  someEvent() {
    // call navigate for AppNavigator here:
    this.navigator &&
      this.navigator.dispatch(
        NavigationActions.navigate({ routeName: someRouteName })
      );
  }
  render() {
    return (
      <AppNavigator
        ref={(nav) => {
          this.navigator = nav;
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Defining Route Param Types in TypeScript
DESCRIPTION: Shows how to create type definitions for route parameters in a navigation stack.

LANGUAGE: tsx
CODE:
type RootStackParamList = {
  Profile: { userId: string };
}

----------------------------------------

TITLE: Implementing Sign-In and Home Screens for Authentication Flow in React Native
DESCRIPTION: This snippet shows the implementation of SignInScreen and HomeScreen components. SignInScreen handles user sign-in, while HomeScreen provides options to navigate within the app or sign out. Both use AsyncStorage for managing authentication state.

LANGUAGE: javascript
CODE:
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: 'Please sign in',
  };

  render() {
    return (
      <View>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    await AsyncStorage.setItem('userToken', 'abc');
    this.props.navigation.navigate('App');
  };
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Welcome to the app!',
  };

  render() {
    return (
      <View>
        <Button title="Show me more of the app" onPress={this._showMoreApp} />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate('Other');
  };

  _signOutAsync = async () => {
    await AsyncStorage.clear();
    this.props.navigation.navigate('Auth');
  };
}

// More code like OtherScreen omitted for brevity

----------------------------------------

TITLE: Navigating to the Same Screen Multiple Times in React Navigation
DESCRIPTION: This code shows how to navigate to the same screen multiple times using the push method instead of navigate. This is useful when you want to stack multiple instances of the same screen with different data.

LANGUAGE: jsx
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.push('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Configuring ServerContainer with Location Prop
DESCRIPTION: This snippet shows how to set up the ServerContainer component with the location prop, which is used to specify the current route for server-side rendering.

LANGUAGE: jsx
CODE:
<ServerContainer location={{ pathname: '/profile', search: '' }}>
  <App />
</ServerContainer>

----------------------------------------

TITLE: Installing Material Top Tabs Dependencies
DESCRIPTION: Commands for installing required packages including @react-navigation/material-top-tabs and react-native-pager-view

LANGUAGE: bash
CODE:
npm install @react-navigation/material-top-tabs
npx expo install react-native-pager-view

----------------------------------------

TITLE: Popping Routes from Navigation Stack
DESCRIPTION: Shows how to use StackActions.pop() to navigate back by removing a specified number of screens from the stack.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

const popAction = StackActions.pop({
  n: 1,
});

this.props.navigation.dispatch(popAction);

----------------------------------------

TITLE: Creating Drawer Navigator - React Navigation
DESCRIPTION: Basic syntax for creating a drawer navigator with route configs and navigator configuration options.

LANGUAGE: javascript
CODE:
createDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);

----------------------------------------

TITLE: Defining Static Routes in React Navigation
DESCRIPTION: This snippet demonstrates how to define static routes in React Navigation using createDrawerNavigator, createStackNavigator, and createSwitchNavigator. It shows the structure for setting up navigators and rendering the app container.

LANGUAGE: javascript
CODE:
const FriendsNavigator = createDrawerNavigator({
  Feed: FeedScreen,
  FriendList: FriendListScreen,
});

const AuthNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AppNavigator = createSwitchNavigator({
  App: FriendsNavigator,
  Auth: AuthNavigator,
});

const AppContainer = createAppContainer(AppNavigator);

export default class MyApp extends React.Component {
  render() {
    return <AppContainer />;
  }
}

----------------------------------------

TITLE: Example of Child Navigation State in React Navigation
DESCRIPTION: This JSON snippet illustrates the structure of a child navigation state, which occurs when composing navigators. It includes both route information and nested navigation state.

LANGUAGE: json
CODE:
{
  key: 'B',
  routeName: 'Profile',
  params: { id: '123' },
  index: 1,
  routes: [ {...}, {...} ]
}

----------------------------------------

TITLE: Using NavigationContainer with Refs - React Navigation
DESCRIPTION: Example demonstrating how to use refs with NavigationContainer to access navigation methods outside of components.

LANGUAGE: javascript
CODE:
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';

function App() {
  const navigationRef = useNavigationContainerRef();

  return (
    <View style={{ flex: 1 }}>
      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>
      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Using NavigationContainer with Refs - React Navigation
DESCRIPTION: Example demonstrating how to use refs with NavigationContainer to access navigation methods outside of components.

LANGUAGE: javascript
CODE:
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';

function App() {
  const navigationRef = useNavigationContainerRef();

  return (
    <View style={{ flex: 1 }}>
      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>
      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Using NavigationContainer with Refs - React Navigation
DESCRIPTION: Example demonstrating how to use refs with NavigationContainer to access navigation methods outside of components.

LANGUAGE: javascript
CODE:
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';

function App() {
  const navigationRef = useNavigationContainerRef();

  return (
    <View style={{ flex: 1 }}>
      <Button onPress={() => navigationRef.navigate('Home')}>Go home</Button>
      <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Expo Scheme Configuration
DESCRIPTION: JSON configuration for registering a URL scheme in Expo projects.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mychat"
  }
}

----------------------------------------

TITLE: Creating Root Component with StackNavigator
DESCRIPTION: Implementation showing how to create a root component that renders a StackNavigator, providing more control over the application's root component.

LANGUAGE: javascript
CODE:
const RootStack = StackNavigator({
  Home: {
    screen: HomeScreen,
  },
});

export default class App extends React.Component {
  render() {
    return <RootStack />;
  }
}

----------------------------------------

TITLE: Setting Basic Header Titles in React Navigation
DESCRIPTION: Demonstrates how to set static header titles for screen components using the navigationOptions static property.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
  };

  /* render function, etc */
}

class DetailsScreen extends React.Component {
  static navigationOptions = {
    title: 'Details',
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Configuring Stack Navigator Screens
DESCRIPTION: Shows how to configure multiple screens in a Stack Navigator with their respective components.

LANGUAGE: javascript
CODE:
const Stack = createStackNavigator();

const StackNavigator = (
  <Stack.Navigator>
    <Stack.Screen
      name="Home"
      component={HomeScreen} // <----
    />
    <Stack.Screen
      name="Details"
      component={DetailsScreen} // <----
    />
  </Stack.Navigator>
);

----------------------------------------

TITLE: Implementing Authentication Loading Screen
DESCRIPTION: Creates a loading screen component that checks for authentication state in AsyncStorage and redirects to either the App or Auth stack accordingly. Displays a loading indicator while checking authentication.

LANGUAGE: javascript
CODE:
import React from 'react';
import {
  ActivityIndicator,
  AsyncStorage,
  StatusBar,
  StyleSheet,
  View,
} from 'react-native';

class AuthLoadingScreen extends React.Component {
  constructor(props) {
    super(props);
    this._bootstrapAsync();
  }

  // Fetch the token from storage then navigate to our appropriate place
  _bootstrapAsync = async () => {
    const userToken = await AsyncStorage.getItem('userToken');

    // This will switch to the App screen or Auth screen and this loading
    // screen will be unmounted and thrown away.
    this.props.navigation.navigate(userToken ? 'App' : 'Auth');
  };

  // Render any loading content that you like here
  render() {
    return (
      <View>
        <ActivityIndicator />
        <StatusBar barStyle="default" />
      </View>
    );
  }
}

----------------------------------------

TITLE: Implementing useScrollToTop with Class Component in React Navigation
DESCRIPTION: This example shows how to use useScrollToTop with a class component by wrapping it in a functional component. It passes the ref as a prop to the class component and applies the hook in the wrapper function.

LANGUAGE: javascript
CODE:
class Albums extends React.Component {
  render() {
    return <ScrollView ref={this.props.scrollRef}>{/* content */}</ScrollView>;
  }
}

// Wrap and export
export default function (props) {
  const ref = React.useRef(null);

  useScrollToTop(ref);

  return <Albums {...props} scrollRef={ref} />;
}

----------------------------------------

TITLE: Accessing Navigator Key in React Navigation
DESCRIPTION: This snippet demonstrates how to obtain a route's navigator key using the navigation prop. It uses the dangerouslyGetParent() method to access the parent navigator's state and retrieve its key.

LANGUAGE: javascript
CODE:
this.props.navigation.dangerouslyGetParent().state.key

----------------------------------------

TITLE: Accessing Complete Navigation State - React Navigation
DESCRIPTION: Shows how to access the complete navigation state object using useNavigationState hook.

LANGUAGE: javascript
CODE:
const state = useNavigationState((state) => state);

----------------------------------------

TITLE: Drawer Toggle Method
DESCRIPTION: Shows how to toggle the drawer state using navigation props.

LANGUAGE: javascript
CODE:
this.props.navigation.toggleDrawer();

----------------------------------------

TITLE: Transparent Modal Configuration
DESCRIPTION: Example of configuring a transparent modal screen in Stack Navigator.

LANGUAGE: javascript
CODE:
<Stack.Navigator>
  <Stack.Screen name="Home" component={HomeStack} />
  <Stack.Screen
    name="Modal"
    component={ModalScreen}
    options={{ presentation: 'transparentModal' }}
  />
</Stack.Navigator>

----------------------------------------

TITLE: Running ESLint for Code Consistency
DESCRIPTION: Command to run ESLint to ensure code consistency in the React Navigation project.

LANGUAGE: bash
CODE:
yarn run eslint

----------------------------------------

TITLE: Navigation Button Using useNavigation Hook
DESCRIPTION: Enhanced version of the button component using useNavigation hook to access navigation context without prop drilling.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';
import { useNavigation } from '@react-navigation/native';

function GoToButton({ screenName }) {
  const navigation = useNavigation();

  return (
    <Button
      title={`Go to ${screenName}`}
      onPress={() => navigation.navigate(screenName)}
    />
  );
}

----------------------------------------

TITLE: Drawer Navigation Control Methods
DESCRIPTION: Shows how to programmatically control drawer state using navigation commands. Demonstrates opening and closing the drawer explicitly.

LANGUAGE: javascript
CODE:
this.props.navigation.navigate('DrawerOpen'); // open drawer
this.props.navigation.navigate('DrawerClose'); // close drawer

----------------------------------------

TITLE: Implementing Drawer Navigation Component in React Navigation
DESCRIPTION: Creates a drawer navigation setup with Home and Settings screens. Includes screen components with drawer open buttons and configuration for drawer appearance including background color and active states.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <TouchableOpacity
          onPress={() => this.props.navigation.navigate('DrawerOpen')}
        >
          <Text>Open Drawer</Text>
        </TouchableOpacity>
        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Home</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <TouchableOpacity
          onPress={() => this.props.navigation.navigate('DrawerOpen')}
        >
          <Text>Open Drawer</Text>
        </TouchableOpacity>
        <Text style={{ fontWeight: 'bold', marginTop: 20 }}>Settings</Text>
      </View>
    );
  }
}

const MyDrawerNavigator = new DrawerNavigator(
  {
    Home: HomeScreen,
    Settings: SettingsScreen,
  },
  {
    drawerBackgroundColor: 'rgba(255,255,255,.9)',
    contentOptions: {
      activeTintColor: '#fff',
      activeBackgroundColor: '#6b52ae',
    },
  }
);

export default MyDrawerNavigator;

----------------------------------------

TITLE: Clearing React Native Cache Command
DESCRIPTION: Command to clear the Metro bundler cache in React Native projects to resolve module resolution issues.

LANGUAGE: bash
CODE:
npx react-native start --reset-cache

----------------------------------------

TITLE: Navigation State Structure Example in React Navigation
DESCRIPTION: Example showing the structure of a typical navigation state object with routes and active index.

LANGUAGE: javascript
CODE:
{
  key: 'StackRouterRoot',
  index: 1,
  routes: [
    { key: 'A', routeName: 'Home' },
    { key: 'B', routeName: 'Profile' },
  ]
}

----------------------------------------

TITLE: Passing Parameters Back to Previous Screen in React Navigation
DESCRIPTION: This example shows how to pass data back to a previous screen using the navigate method with params. It includes a HomeScreen that receives a post parameter and a CreatePostScreen that sends the post data back.

LANGUAGE: javascript
CODE:
function HomeScreen({ navigation, route }) {
  React.useEffect(() => {
    if (route.params?.post) {
      // Post updated, do something with `route.params.post`
      // For example, send the post to the server
    }
  }, [route.params?.post]);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button
        title="Create post"
        onPress={() => navigation.navigate('CreatePost')}
      />
      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>
    </View>
  );
}

function CreatePostScreen({ navigation, route }) {
  const [postText, setPostText] = React.useState('');

  return (
    <>
      <TextInput
        multiline
        placeholder="What's on your mind?"
        style={{ height: 200, padding: 10, backgroundColor: 'white' }}
        value={postText}
        onChangeText={setPostText}
      />
      <Button
        title="Done"
        onPress={() => {
          // Pass and merge params back to home screen
          navigation.navigate({
            name: 'Home',
            params: { post: postText },
            merge: true,
          });
        }}
      />
    </>
  );
}

----------------------------------------

TITLE: Configuring Screen with Route Params
DESCRIPTION: Shows how to configure a screen's options using Redux state passed through route parameters.

LANGUAGE: javascript
CODE:
<RootStack.Screen
  name="StaticCounter"
  component={StaticCounter}
  options={({ route }) => ({ title: route.params.count })}
/>

----------------------------------------

TITLE: Configuring Routes in Stack Navigator
DESCRIPTION: Example of defining route configurations for a stack navigator, including screen components and navigation options.

LANGUAGE: js
CODE:
createStackNavigator({
  Profile: {
    screen: ProfileScreen,
    path: 'people/:name',
    navigationOptions: ({ navigation }) => ({
      title: `${navigation.state.params.name}'s Profile'`,
    }),
  },
  ...MyOtherRoutes,
});

----------------------------------------

TITLE: Configuring TabBarOptions for Android Tab Bar in React Navigation
DESCRIPTION: Example of configuring tabBarOptions for the TabBarTop component, which is the default tab bar on Android. This includes setting label styles, tab styles, and background color.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  labelStyle: {
    fontSize: 12,
  },
  tabStyle: {
    width: 100,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Theme-Aware Button Component using useTheme
DESCRIPTION: Example of creating a button component that responds to theme changes using the useTheme hook.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { TouchableOpacity, Text } from 'react-native';
import { useTheme } from 'react-navigation';

function MyButton() {
  let theme = useTheme();

  return (
    <TouchableOpacity
      style={{ backgroundColor: theme === 'light' ? '#000' : '#fff' }}
    >
      <Text style={{ color: theme === 'light' ? '#fff' : '#000' }}>
        Button!
      </Text>
    </TouchableOpacity>
  );
}

----------------------------------------

TITLE: Proper AppContainer Wrapping with Flex Styling
DESCRIPTION: Example demonstrating the correct way to wrap AppContainer in a View component with proper flex styling to ensure content displays correctly.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { createAppContainer } from 'react-navigation';
import { createBottomTabNavigator } from 'react-navigation-tabs';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Home!</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Settings!</Text>
      </View>
    );
  }
}

const TabNavigator = createBottomTabNavigator({
  Home: HomeScreen,
  Settings: SettingsScreen,
});

const AppContainer = createAppContainer(TabNavigator);

// without the style you will see a blank screen
export default () => (
  <View style={{ flex: 1 }}>
    <AppContainer />
  </View>
);

----------------------------------------

TITLE: Popping Screens from the Navigation Stack in React Navigation
DESCRIPTION: Shows how to use the pop action to navigate back to a previous screen in the stack, specifying the number of screens to pop.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

const popAction = StackActions.pop({
  n: 1,
});

this.props.navigation.dispatch(popAction);

----------------------------------------

TITLE: Proper AppContainer Wrapping with Flex Styling
DESCRIPTION: Example demonstrating the correct way to wrap AppContainer in a View component with proper flex styling to ensure content displays correctly.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { createAppContainer } from 'react-navigation';
import { createBottomTabNavigator } from 'react-navigation-tabs';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Home!</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Settings!</Text>
      </View>
    );
  }
}

const TabNavigator = createBottomTabNavigator({
  Home: HomeScreen,
  Settings: SettingsScreen,
});

const AppContainer = createAppContainer(TabNavigator);

// without the style you will see a blank screen
export default () => (
  <View style={{ flex: 1 }}>
    <AppContainer />
  </View>
);

----------------------------------------

TITLE: Selectively Enabling State Persistence in Development Mode
DESCRIPTION: This code snippet shows how to selectively enable state persistence in development mode. It uses a function to return persistence functions only when in development, otherwise returning undefined.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator({...});
function getPersistenceFunctions() {
  return __DEV__ ? {
    persistNavigationState: ...,
    loadNavigationState: ...,
  } : undefined;
}
const App = () => <AppNavigator {...getPersistenceFunctions()} />;

----------------------------------------

TITLE: Implementing Status Bar Configuration in TabNavigator Screens
DESCRIPTION: This code shows how to handle StatusBar configuration in a TabNavigator by using navigation listeners to update the status bar when a tab becomes active.

LANGUAGE: javascript
CODE:
class Screen1 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('light-content');
      isAndroid && StatusBar.setBackgroundColor('#6a51ae');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

class Screen2 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('dark-content');
      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

----------------------------------------

TITLE: Retrieving Screen Options in React Navigation
DESCRIPTION: This snippet demonstrates how to retrieve screen options using the getScreenOptions method of a custom router. It shows how to prepare the navigation prop and call the method to get the screen title.

LANGUAGE: javascript
CODE:
// First, prepare a navigation prop for your child, or re-use one if already available.
const screenNavigation = addNavigationHelpers({
  // In this case we use navigation.state.index because we want the title for the active route.
  state: navigation.state.routes[navigation.state.index],
  dispatch: navigation.dispatch,
});
const options = this.props.router.getScreenOptions(screenNavigation, {});
const title = options.title;

----------------------------------------

TITLE: Custom Header Title Component
DESCRIPTION: Example of replacing the default header title with a custom component, such as an image.

LANGUAGE: javascript
CODE:
class LogoTitle extends React.Component {
  render() {
    return (
      <Image
        source={require('./spiro.png')}
        style={{ width: 30, height: 30 }}
      />
    );
  }
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: <LogoTitle />,
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Installing Bottom Tabs Navigator Package
DESCRIPTION: Command to install the bottom tabs navigator package from npm

LANGUAGE: bash
CODE:
npm install @react-navigation/bottom-tabs

----------------------------------------

TITLE: Navigation Reset Example in React Navigation
DESCRIPTION: Demonstrates how to reset navigation state with partial state objects, which React Navigation will automatically rehydrate with missing properties.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Home' }, { name: 'Profile' }],
});

----------------------------------------

TITLE: Creating Drawer Navigator with Custom Status Bar in React Native
DESCRIPTION: This code snippet demonstrates how to set up a drawer navigator with two screens, each having different status bar configurations in React Native.

LANGUAGE: javascript
CODE:
export default createDrawerNavigator({
  Screen1: {
    screen: Screen1,
  },
  Screen2: {
    screen: Screen2,
  },
});

----------------------------------------

TITLE: Navigation Reset Example in React Navigation
DESCRIPTION: Demonstrates how to reset navigation state with partial state objects, which React Navigation will automatically rehydrate with missing properties.

LANGUAGE: javascript
CODE:
navigation.reset({
  index: 0,
  routes: [{ name: 'Home' }, { name: 'Profile' }],
});

----------------------------------------

TITLE: Installing React Native Tab View Dependencies
DESCRIPTION: Commands for installing react-native-tab-view and its peer dependency react-native-pager-view using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-native-tab-view
npm install react-native-pager-view

----------------------------------------

TITLE: Applying Screen Tracking Middleware to Redux Store in React Navigation
DESCRIPTION: This snippet demonstrates how to apply the screenTracking middleware to the Redux store during its creation. It combines the navigation reducer with other reducers and applies the screenTracking middleware along with any other middleware.

LANGUAGE: javascript
CODE:
const store = createStore(
  combineReducers({
    navigation: navigationReducer,
    ...
  }),
  applyMiddleware(
    screenTracking,
    ...
    ),
);

----------------------------------------

TITLE: Navigator ID Configuration
DESCRIPTION: Examples of setting a unique ID for the navigator in both static and dynamic configurations.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  id: 'RootStack',
  screens: {
    Home: HomeScreen,
    Profile: ProfileScreen,
  },
});

LANGUAGE: jsx
CODE:
function MyStack() {
  return (
    <Stack.Navigator
      id="RootStack"
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Installing React Navigation 7 Alpha (Shell)
DESCRIPTION: Command to install the alpha version of React Navigation 7 with the new Static API features.

LANGUAGE: shell
CODE:
yarn add @react-navigation/native@next @react-navigation/native-stack@next

----------------------------------------

TITLE: Customizing Loading View in React Navigation
DESCRIPTION: This example demonstrates how to customize the loading view displayed while the AsyncStorage request completes. The renderLoadingExperimental prop is used to render an ActivityIndicator component.

LANGUAGE: javascript
CODE:
<AppNavigator
  persistenceKey={...}
  renderLoadingExperimental={() => <ActivityIndicator />}
/>

----------------------------------------

TITLE: Configuring DrawerNavigator with Different Status Bar Styles
DESCRIPTION: This snippet demonstrates how to set up a DrawerNavigator with two screens that have different StatusBar configurations.

LANGUAGE: javascript
CODE:
export default DrawerNavigator({
  Screen1: {
    screen: Screen1,
  },
  Screen2: {
    screen: Screen2,
  },
});

----------------------------------------

TITLE: Implementing a Custom Router in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom router object with required methods and how to use it in a navigator component. It includes placeholders for the essential router functions.

LANGUAGE: javascript
CODE:
const MyRouter = {
  getStateForAction: (action, state) => ({}),
  getActionForPathAndParams: (path, params) => null,
  getPathAndParamsForState: (state) => null,
  getComponentForState: (state) => MyScreen,
  getComponentForRouteName: (routeName) => MyScreen,
};

// Now, you can make a navigator by putting the router on it:
class MyNavigator extends React.Component {
  static router = MyRouter;
  render() {
    ...
  }
}

----------------------------------------

TITLE: Installing Stack Navigator Dependencies
DESCRIPTION: Commands to install the required dependencies for using Stack Navigator in a React Native project.

LANGUAGE: bash
CODE:
npm install @react-navigation/stack
npx expo install react-native-gesture-handler

----------------------------------------

TITLE: Implementing Status Bar Configuration in Stack Navigator Screens (React Native)
DESCRIPTION: This snippet shows how to set different status bar styles for two screens in a stack navigator. It uses the StatusBar component from React Native to configure the appearance based on the current screen.

LANGUAGE: jsx
CODE:
class Screen1 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#6a51ae' }]}>
        <StatusBar barStyle="light-content" backgroundColor="#6a51ae" />
        <Text style={[styles.paragraph, { color: '#fff' }]}>Light Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen2')}
          color={isAndroid ? 'blue' : '#fff'}
        />
      </SafeAreaView>
    );
  }
}

class Screen2 extends React.Component {
  render() {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: '#ecf0f1' }]}>
        <StatusBar barStyle="dark-content" backgroundColor="#ecf0f1" />
        <Text style={styles.paragraph}>Dark Screen</Text>
        <Button
          title="Next screen"
          onPress={() => this.props.navigation.navigate('Screen1')}
        />
      </SafeAreaView>
    );
  }
}

----------------------------------------

TITLE: Configuring Deep Linking in Android Manifest
DESCRIPTION: This XML snippet demonstrates how to modify the AndroidManifest.xml file to handle deep linking in Android for react-native init projects.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Installing React Navigation 6.x Native Package
DESCRIPTION: Command to install the 6.x version of @react-navigation/native package.

LANGUAGE: bash
CODE:
npm install @react-navigation/native@^6.x

----------------------------------------

TITLE: Installing React Navigation Drawer Package
DESCRIPTION: Command to install the react-navigation-drawer package using npm or yarn

LANGUAGE: bash
CODE:
npm install react-navigation-drawer

----------------------------------------

TITLE: Pushing New Route in React Navigation
DESCRIPTION: Demonstrates using StackActions.push() to add a new route to the top of the navigation stack with parameters.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

const pushAction = StackActions.push({
  routeName: 'Profile',
  params: {
    myUserId: 9,
  },
});

this.props.navigation.dispatch(pushAction);

----------------------------------------

TITLE: Configuring Screen Layout for Groups (Dynamic)
DESCRIPTION: Shows how to define a custom screen layout for a group using dynamic configuration with the Group component. This method allows for more flexible layout setting at runtime.

LANGUAGE: jsx
CODE:
<Stack.Group
  screenLayout={({ children }) => (
    <ErrorBoundary>
      <React.Suspense
        fallback={
          <View style={styles.fallback}>
            <Text style={styles.text}>Loading…</Text>
          </View>
        }
      >
        {children}
      </React.Suspense>
    </ErrorBoundary>
  )}
>
  {/* screens */}
</Stack.Group>

----------------------------------------

TITLE: Configuring Stack Navigator with Static API in React Navigation
DESCRIPTION: Demonstrates the new static API for configuring a Stack Navigator in React Navigation 7.0. This approach simplifies configuration and improves TypeScript and deep linking support.

LANGUAGE: javascript
CODE:
const Stack = createStackNavigator({
  screens: {
    Home: {
      screen: Home,
    },
    Profile: {
      screen: Profile,
    },
    Settings: {
      screen: Settings,
    },
  },
});

----------------------------------------

TITLE: Using RootNavigation to navigate in React Navigation
DESCRIPTION: This example shows how to use the RootNavigation module to trigger navigation from any JavaScript module.

LANGUAGE: javascript
CODE:
// any js module
import * as RootNavigation from './path/to/RootNavigation.js';

// ...

RootNavigation.navigate('ChatScreen', { userName: 'Lucy' });

----------------------------------------

TITLE: Android MainActivity Configuration
DESCRIPTION: Required modifications to MainActivity.java for gesture handler setup on Android.

LANGUAGE: java
CODE:
package com.reactnavigation.example;

import com.facebook.react.ReactActivity;
import com.facebook.react.ReactActivityDelegate;
import com.facebook.react.ReactRootView;
import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;

public class MainActivity extends ReactActivity {

  @Override
  protected String getMainComponentName() {
    return "Example";
  }

  @Override
  protected ReactActivityDelegate createReactActivityDelegate() {
    return new ReactActivityDelegate(this, getMainComponentName()) {
      @Override
      protected ReactRootView createRootView() {
       return new RNGestureHandlerEnabledRootView(MainActivity.this);
      }
    };
  }
}

----------------------------------------

TITLE: Dispatching Navigation Actions on App Container using React Ref
DESCRIPTION: Demonstrates how to use a React ref to access the dispatch method on an AppContainer, allowing navigation actions to be triggered from within a component.

LANGUAGE: javascript
CODE:
const AppContainer = createAppContainer(AppNavigator);

class App extends React.Component {
  someEvent() {
    // call navigate for AppNavigator here:
    this.navigator &&
      this.navigator.dispatch(
        NavigationActions.navigate({ routeName: someRouteName })
      );
  }
  render() {
    return (
      <AppContainer
        ref={(nav) => {
          this.navigator = nav;
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Installing React Navigation Stack Navigator Package
DESCRIPTION: Command to install the @react-navigation/stack package for implementing stack navigation in React Native applications.

LANGUAGE: bash
CODE:
npm install @react-navigation/stack@^5.x

----------------------------------------

TITLE: Importing and Creating Material Bottom Tab Navigator
DESCRIPTION: Example of importing and using createMaterialBottomTabNavigator function to create a material-design themed bottom tab navigator.

LANGUAGE: javascript
CODE:
import { createMaterialBottomTabNavigator } from 'react-navigation-material-bottom-tabs';

createMaterialBottomTabNavigator(
  RouteConfigs,
  MaterialBottomTabNavigatorConfig
);

----------------------------------------

TITLE: Installing React Navigation Redux Helpers
DESCRIPTION: Command to install the react-navigation-redux-helpers package using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-navigation-redux-helpers

----------------------------------------

TITLE: Customizing Navigation Actions in React Navigation
DESCRIPTION: Demonstrates how to override the default getStateForAction to implement custom navigation behavior for pushing multiple profile screens.

LANGUAGE: javascript
CODE:
const MyApp = createStackNavigator(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyApp.router.getStateForAction;

MyApp.router.getStateForAction = (action, state) => {
  if (state && action.type === 'PushTwoProfiles') {
    const routes = [
      ...state.routes,
      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },
      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },
    ];
    return {
      ...state,
      routes,
      index: routes.length - 1,
    };
  }
  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Development Mode State Persistence Configuration
DESCRIPTION: Configuration to enable state persistence specifically in development mode using __DEV__ flag.

LANGUAGE: javascript
CODE:
const [isReady, setIsReady] = React.useState(__DEV__ ? false : true);

----------------------------------------

TITLE: Styling Header Bar in React Navigation
DESCRIPTION: Demonstrates how to customize header styles including background color, tint color, and text styling.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
    headerStyle: {
      backgroundColor: '#f4511e',
    },
    headerTintColor: '#fff',
    headerTitleStyle: {
      fontWeight: 'bold',
    },
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Initializing React Native Screens
DESCRIPTION: Code snippet showing how to initialize react-native-screens before rendering navigation stacks. This setup is required to enable native screen optimization in both Expo and regular React Native applications.

LANGUAGE: javascript
CODE:
// Before rendering any navigation stack
import { useScreens } from 'react-native-screens';
useScreens();

----------------------------------------

TITLE: Configuring Tab Navigator Options in React Navigation 6
DESCRIPTION: Updated example showing how to set tab bar options in React Navigation 6 using the screenOptions prop on the Tab.Navigator component.

LANGUAGE: javascript
CODE:
// After (v6)
<Tab.Navigator
  screenOptions={{
    tabBarInactiveTintColor: 'rgba(255, 255, 255, 0.5)',
    tabBarActiveTintColor: '#fff',
    tabBarStyle: {
      position: 'absolute',
      borderTopColor: 'rgba(0, 0, 0, .2)',
    },
  }}
>

----------------------------------------

TITLE: Using useSafeAreaInsets Hook
DESCRIPTION: Example demonstrating how to use the useSafeAreaInsets hook for fine-grained control over safe area padding.

LANGUAGE: jsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function Demo() {
  const insets = useSafeAreaInsets();

  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingBottom: insets.bottom,

        flex: 1,
        justifyContent: 'space-between',
        alignItems: 'center',
      }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Triggering Action on Screen Focus with Event Listener in React Navigation
DESCRIPTION: This snippet demonstrates how to use a 'focus' event listener to execute an action when a screen comes into focus. It utilizes the useEffect hook to add and remove the listener.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';

function ProfileScreen({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // The screen is focused
      // Call any action
    });

    // Return the function to unsubscribe from the event so it gets removed on unmount
    return unsubscribe;
  }, [navigation]);

  return <View />;
}

----------------------------------------

TITLE: Triggering Action on Screen Focus with Event Listener in React Navigation
DESCRIPTION: This snippet demonstrates how to use a 'focus' event listener to execute an action when a screen comes into focus. It utilizes the useEffect hook to add and remove the listener.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';

function ProfileScreen({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // The screen is focused
      // Call any action
    });

    // Return the function to unsubscribe from the event so it gets removed on unmount
    return unsubscribe;
  }, [navigation]);

  return <View />;
}

----------------------------------------

TITLE: Manual Linking for RN 0.59 and Lower
DESCRIPTION: Commands to manually link dependencies for older React Native versions.

LANGUAGE: bash
CODE:
react-native link react-native-reanimated
react-native link react-native-gesture-handler

----------------------------------------

TITLE: Test Execution Commands
DESCRIPTION: Commands for running Jest tests in the React Navigation project

LANGUAGE: bash
CODE:
yarn run jest

----------------------------------------

TITLE: Rendering Scenes in React Navigation Transitioner
DESCRIPTION: Example of how to render scenes within the Transitioner's render function. It demonstrates mapping over the scenes and rendering them as a stack of cards.

LANGUAGE: jsx
CODE:
_render(transitionProps, prevTransitionProps) {
  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));
  return (
    <View style={styles.stack}>
      {scenes}
    </View>
  );
}

----------------------------------------

TITLE: Installing React Navigation Stack Navigator Package
DESCRIPTION: Package location for the Stack Navigator component in React Navigation 4.0

LANGUAGE: javascript
CODE:
react-navigation-stack

----------------------------------------

TITLE: Implementing Custom Android Back Button Handler in React Navigation
DESCRIPTION: A React component that demonstrates custom Android back button handling using navigation lifecycle subscriptions and BackHandler. The component manages selection mode state and prevents screen pop when selection mode is active.

LANGUAGE: jsx
CODE:
import React from "react";
import { BackHandler } from "react-native";

class ScreenWithCustomBackBehavior extends React.Component {
  _didFocusSubscription;
  _willBlurSubscription;

  constructor(props) {
    super(props);
    this._didFocusSubscription = props.navigation.addListener('didFocus', payload =>
      BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPressAndroid)
    );
  }

  componentDidMount() {
    this._willBlurSubscription = this.props.navigation.addListener('willBlur', payload =>
      BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPressAndroid)
    );
  }

  onBackButtonPressAndroid = () => {
    if (this.isSelectionModeEnabled()) {
      this.disableSelectionMode();
      return true;
    } else {
      return false;
    }
  };

  componentWillUnmount() {
    this._didFocusSubscription && this._didFocusSubscription.remove();
    this._willBlurSubscription && this._willBlurSubscription.remove();
  }

  render() {
    // ...
  }
}

----------------------------------------

TITLE: Navigation Container Setup
DESCRIPTION: Basic setup of NavigationContainer component that wraps the entire application

LANGUAGE: javascript
CODE:
import 'react-native-gesture-handler';
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <NavigationContainer>{/* Rest of your app code */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Creating Stack Navigator Instance
DESCRIPTION: Demonstrates how to create a Stack Navigator instance that contains Screen and Navigator properties.

LANGUAGE: javascript
CODE:
const Stack = createStackNavigator();

----------------------------------------

TITLE: Configuring Stack Navigator Routes in React Navigation
DESCRIPTION: Example showing how to configure routes in a stack navigator using screen components. Demonstrates basic route setup with HomeScreen and DetailsScreen components.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator(
  {
    Home: {
      screen: HomeScreen, // <----
    },
    Details: {
      screen: DetailsScreen, // <----
    },
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Using Typed Stack Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to use the typed stack navigator in a React component, providing type checking for route names and params.

LANGUAGE: tsx
CODE:
<RootStack.Navigator initialRouteName="Home">
  <RootStack.Screen name="Home" component={Home} />
  <RootStack.Screen
    name="Profile"
    component={Profile}
    initialParams={{ userId: user.id }}
  />
  <RootStack.Screen name="Feed" component={Feed} />
</RootStack.Navigator>

----------------------------------------

TITLE: Expo Deep Linking Scheme Configuration
DESCRIPTION: JSON configuration for setting up a custom URL scheme in an Expo project.

LANGUAGE: json
CODE:
{
  "expo": {
    "scheme": "mychat"
  }
}

----------------------------------------

TITLE: Configuring Multiple Routes in React Navigation Stack Navigator
DESCRIPTION: Demonstrates how to add multiple routes to a stack navigator and set the initial route using the options object.

LANGUAGE: js
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
      </View>
    );
  }
}

const AppNavigator = createStackNavigator(
  {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Adding a Button to the Header in React Navigation
DESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a React Navigation stack. It uses the navigationOptions static property to define the header configuration.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: <LogoTitle />,
    headerRight: (
      <Button
        onPress={() => alert('This is a button!')}
        title="Info"
        color="#fff"
      />
    ),
  };
}

----------------------------------------

TITLE: Website Development Commands
DESCRIPTION: Commands for running the documentation website in development and production modes

LANGUAGE: bash
CODE:
cd website
yarn install
yarn start

----------------------------------------

TITLE: Using Navigation Params in Header Title
DESCRIPTION: Shows how to use navigation parameters to dynamically set the header title.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      title: navigation.getParam('otherParam', 'A Nested Details Screen'),
    };
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Installing React Navigation Drawer Package
DESCRIPTION: Package location for the Drawer Navigator component in React Navigation 4.0

LANGUAGE: javascript
CODE:
react-navigation-drawer

----------------------------------------

TITLE: Creating Material Top Tab Navigator
DESCRIPTION: Basic implementation of creating a material top tab navigator using createMaterialTopTabNavigator from react-navigation-tabs.

LANGUAGE: javascript
CODE:
import { createMaterialTopTabNavigator } from 'react-navigation-tabs';

createMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig);

----------------------------------------

TITLE: Resetting Navigation State with StackActions in React Navigation
DESCRIPTION: Demonstrates how to use the reset action to wipe the whole navigation state and replace it with new actions. It includes an example of resetting to a Profile screen.

LANGUAGE: javascript
CODE:
import { StackActions, NavigationActions } from 'react-navigation';

const resetAction = StackActions.reset({
  index: 0,
  actions: [NavigationActions.navigate({ routeName: 'Profile' })],
});
this.props.navigation.dispatch(resetAction);

----------------------------------------

TITLE: Adding a Button to the Header in React Navigation
DESCRIPTION: This snippet demonstrates how to add a button to the right side of the header in a React Navigation stack. It uses the navigationOptions static property to define the header configuration.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: <LogoTitle />,
    headerRight: (
      <Button
        onPress={() => alert('This is a button!')}
        title="Info"
        color="#fff"
      />
    ),
  };
}

----------------------------------------

TITLE: Updating RootNavigation for safe navigation in React Navigation
DESCRIPTION: This snippet shows how to update the RootNavigation module to safely navigate by checking if the app is mounted and the navigation ref is available.

LANGUAGE: javascript
CODE:
// RootNavigation.js

import * as React from 'react';

export const isReadyRef = React.createRef();

export const navigationRef = React.createRef();

export function navigate(name, params) {
  if (isReadyRef.current && navigationRef.current) {
    // Perform navigation if the app has mounted
    navigationRef.current.navigate(name, params);
  } else {
    // You can decide what to do if the app hasn't mounted
    // You can ignore this, or add these actions to a queue you can call later
  }
}

----------------------------------------

TITLE: Configuring Transition Animation in React Navigation
DESCRIPTION: Examples of how to configure transition animations using the configureTransition prop. It shows how to set duration and easing for Animated.timing, and how to use Animated.spring with custom parameters.

LANGUAGE: js
CODE:
_configureTransition(transitionProps, prevTransitionProps) {
  return {
    // duration in milliseconds, default: 250
    duration: 500,
    // An easing function from `Easing`, default: Easing.inOut(Easing.ease)
    easing: Easing.bounce,
  }
}

LANGUAGE: js
CODE:
_configureTransition(transitionProps, prevTransitionProps) {
  return {
    // A timing function, default: Animated.timing.
    timing: Animated.spring,
    // Some parameters relevant to Animated.spring
    friction: 1,
    tension: 0.5,
  }
}

----------------------------------------

TITLE: Basic Material Bottom Tabs Implementation
DESCRIPTION: Minimal setup for creating a material bottom tab navigator with two screens.

LANGUAGE: javascript
CODE:
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';

const Tab = createMaterialBottomTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Using Pre-made Transition Presets
DESCRIPTION: Example of using pre-made transition presets for Stack Navigator.

LANGUAGE: javascript
CODE:
import { TransitionPresets } from '@react-navigation/stack';

<Stack.Screen
  name="Profile"
  component={Profile}
  options={{
    title: 'Profile',
    ...TransitionPresets.ModalSlideFromBottomIOS,
  }}
/>

----------------------------------------

TITLE: Configuring Screen Options in Stack Navigator
DESCRIPTION: Example of setting screen-specific options in a stack navigator using the options prop.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Home"
  component={HomeScreen}
  options={{ title: 'Overview' }}
/>

----------------------------------------

TITLE: Using Pre-made Transition Presets
DESCRIPTION: Example of using pre-made transition presets for Stack Navigator.

LANGUAGE: javascript
CODE:
import { TransitionPresets } from '@react-navigation/stack';

<Stack.Screen
  name="Profile"
  component={Profile}
  options={{
    title: 'Profile',
    ...TransitionPresets.ModalSlideFromBottomIOS,
  }}
/>

----------------------------------------

TITLE: Implementing Modal Navigation Stack in React Navigation
DESCRIPTION: Demonstrates how to create a nested stack navigator structure with modal support. Shows implementation of a HomeScreen with modal trigger, a ModalScreen component, and configuration of main and root navigation stacks with modal transition mode.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    const params = navigation.state.params || {};

    return {
      headerLeft: (
        <Button
          onPress={() => navigation.navigate('MyModal')}
          title="Info"
          color="#fff"
        />
      ),
      /* the rest of this config is unchanged */
    };
  };

  /* render function, etc */
}

class ModalScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text style={{ fontSize: 30 }}>This is a modal!</Text>
        <Button
          onPress={() => this.props.navigation.goBack()}
          title="Dismiss"
        />
      </View>
    );
  }
}

const MainStack = createStackNavigator(
  {
    Home: {
      screen: HomeScreen,
    },
    Details: {
      screen: DetailsScreen,
    },
  },
  {
    /* Same configuration as before */
  }
);

const RootStack = createStackNavigator(
  {
    Main: {
      screen: MainStack,
    },
    MyModal: {
      screen: ModalScreen,
    },
  },
  {
    mode: 'modal',
    headerMode: 'none',
  }
);

----------------------------------------

TITLE: Running Example App Commands
DESCRIPTION: Commands for installing dependencies and starting the Navigation Playground example app

LANGUAGE: bash
CODE:
yarn install
cd examples/NavigationPlayground
yarn install
yarn start

----------------------------------------

TITLE: Configuring NavigationContainer with Linking
DESCRIPTION: Basic setup for configuring the NavigationContainer component with linking options for handling external links.

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';

const linking = {
  prefixes: [
    /* your linking prefixes */
  ],
  config: {
    /* configuration for matching screens with paths */
  },
};

function App() {
  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: React Navigation Test Example with React Native Testing Library
DESCRIPTION: Example test case demonstrating how to test navigation flow using React Native Testing Library, including rendering a navigation container and testing screen transitions.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { screen, render, fireEvent } from '@testing-library/react-native';
import { NavigationContainer } from '@react-navigation/native';
import { RootNavigator } from './RootNavigator';

test('shows profile screen when View Profile is pressed', () => {
  render(
    <NavigationContainer>
      <RootNavigator />
    </NavigationContainer>
  );

  fireEvent.press(screen.getByText('View Profile'));

  expect(screen.getByText('My Profile')).toBeOnTheScreen();
});

----------------------------------------

TITLE: Implementing Back Button with withNavigation in React Navigation
DESCRIPTION: Example showing how to create a reusable back button component using withNavigation HOC to access navigation props. The component uses React Native's Button component and React Navigation's goBack() method.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Creating Drawer Navigator
DESCRIPTION: Basic implementation of createDrawerNavigator showing the import and creation syntax

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from 'react-navigation-drawer';

createDrawerNavigator(RouteConfigs, DrawerNavigatorConfig);

----------------------------------------

TITLE: Handling Nested Navigators
DESCRIPTION: Configuration for handling nested navigators in deep linking.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Home: {
      screens: {
        Profile: 'users/:id',
      },
    },
  },
};

----------------------------------------

TITLE: Implementing Back Button with withNavigation in React Navigation
DESCRIPTION: Example showing how to create a reusable back button component using withNavigation HOC to access navigation props. The component uses React Native's Button component and React Navigation's goBack() method.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Sharing Common NavigationOptions Across Screens in React Navigation
DESCRIPTION: This snippet shows how to share common navigationOptions across multiple screens by configuring them at the StackNavigator level instead of individual screens.

LANGUAGE: JavaScript
CODE:
const RootStack = StackNavigator(
  {
    Home: {
      screen: HomeScreen,
    },
    Details: {
      screen: DetailsScreen,
    },
  },
  {
    initialRouteName: 'Home',
    /* The header config from HomeScreen is now here */
    navigationOptions: {
      headerStyle: {
        backgroundColor: '#f4511e',
      },
      headerTintColor: '#fff',
      headerTitleStyle: {
        fontWeight: 'bold',
      },
    },
  }
);

----------------------------------------

TITLE: Implementing Transitioner in React Navigation
DESCRIPTION: Example of how to use the Transitioner component in a React Navigation setup. It demonstrates basic usage with configureTransition, navigation, render, and transition event handlers.

LANGUAGE: jsx
CODE:
class MyNavView extends Component {
  ...
  render() {
    return (
      <Transitioner
        configureTransition={this._configureTransition}
        navigation={this.props.navigation}
        render={this._render}
        onTransitionStart={this.onTransitionStart}
        onTransitionEnd={this.onTransitionEnd}
      />
    );
}

----------------------------------------

TITLE: Accessing Route Object in React Navigation (Dynamic Configuration)
DESCRIPTION: This snippet shows how to access and use the route object in a screen component using dynamic navigation configuration in React Navigation.

LANGUAGE: javascript
CODE:
function ProfileScreen({ route }) {
  return (
    <View>
      <Text>This is the profile screen of the app</Text>
      <Text>{route.name}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Implementing Basic Router in React Navigation
DESCRIPTION: Shows how to implement a basic router in a React Navigation component using StackRouter.

LANGUAGE: javascript
CODE:
class MyNavigator extends React.Component {
  static router = StackRouter(routes, config);
  ...
}

----------------------------------------

TITLE: Creating a Typed Stack Navigator in React Navigation
DESCRIPTION: This code shows how to create a stack navigator with TypeScript, using the previously defined param list type for type checking.

LANGUAGE: tsx
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const RootStack = createStackNavigator<RootStackParamList>();

----------------------------------------

TITLE: Creating a Typed Stack Navigator in React Navigation
DESCRIPTION: This code shows how to create a stack navigator with TypeScript, using the previously defined param list type for type checking.

LANGUAGE: tsx
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const RootStack = createStackNavigator<RootStackParamList>();

----------------------------------------

TITLE: Implementing Modal Navigation Stack in React Navigation
DESCRIPTION: Example showing how to create nested stack navigators to implement a modal flow. Demonstrates configuring a main navigation stack and a modal stack with custom transition behavior. Includes implementation of Home screen with modal trigger and Modal screen with dismiss functionality.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    const params = navigation.state.params || {};

    return {
      headerLeft: (
        <Button
          onPress={() => navigation.navigate('MyModal')}
          title="Info"
          color="#fff"
        />
      ),
      /* the rest of this config is unchanged */
    };
  };

  /* render function, etc */
}

class ModalScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text style={{ fontSize: 30 }}>This is a modal!</Text>
        <Button
          onPress={() => this.props.navigation.goBack()}
          title="Dismiss"
        />
      </View>
    );
  }
}

const MainStack = StackNavigator(
  {
    Home: {
      screen: HomeScreen,
    },
    Details: {
      screen: DetailsScreen,
    },
  },
  {
    /* Same configuration as before */
  }
);

const RootStack = StackNavigator(
  {
    Main: {
      screen: MainStack,
    },
    MyModal: {
      screen: ModalScreen,
    },
  },
  {
    mode: 'modal',
    headerMode: 'none',
  }
);

----------------------------------------

TITLE: Implementing Sign-In and Home Screens for Authentication Flow in React Native
DESCRIPTION: This snippet demonstrates the implementation of SignInScreen and HomeScreen components. SignInScreen handles user authentication, while HomeScreen provides options for further app navigation and sign out functionality.

LANGUAGE: jsx
CODE:
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: 'Please sign in',
  };

  render() {
    return (
      <View>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    await AsyncStorage.setItem('userToken', 'abc');
    this.props.navigation.navigate('App');
  };
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Welcome to the app!',
  };

  render() {
    return (
      <View>
        <Button title="Show me more of the app" onPress={this._showMoreApp} />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate('Other');
  };

  _signOutAsync = async () => {
    await AsyncStorage.clear();
    this.props.navigation.navigate('Auth');
  };
}

// More code like OtherScreen omitted for brevity

----------------------------------------

TITLE: Setting Basic Header Title in React Navigation
DESCRIPTION: Demonstrates how to set a static header title for screens using the navigationOptions static property.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
  };

  /* render function, etc */
}

class DetailsScreen extends React.Component {
  static navigationOptions = {
    title: 'Details',
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Animating Scene Transitions in React Navigation
DESCRIPTION: Example of how to animate scene transitions using Animated.View and interpolation. It demonstrates creating a cross-fade effect during transitions between scenes.

LANGUAGE: jsx
CODE:
_renderScene(transitionProps, scene) {
  const { position } = transitionProps;
  const { index } = scene;
  const opacity = position.interpolate({
    inputRange: [index-1, index, index+1],
    outputRange: [0, 1, 0],
  });
  // The prop `router` is populated when we call `createNavigator`.
  const Scene = this.props.router.getComponent(scene.route.routeName);
  return (
    <Animated.View style={{ opacity }}>
      { Scene }
    </Animated.View>
  )
}

----------------------------------------

TITLE: Jest Configuration for React Navigation Testing
DESCRIPTION: JSON configuration for Jest setup, specifying the React Native preset and custom setup files location for mocks.

LANGUAGE: json
CODE:
{
  "preset": "react-native",
  "setupFiles": ["<rootDir>/jest/setup.js"]
}

----------------------------------------

TITLE: Setting Basic Header Title in React Navigation
DESCRIPTION: Demonstrates how to set a static header title for screens using the navigationOptions static property.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: 'Home',
  };

  /* render function, etc */
}

class DetailsScreen extends React.Component {
  static navigationOptions = {
    title: 'Details',
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Installing React Navigation in npm
DESCRIPTION: Command to install the react-navigation package using npm in a React Native project.

LANGUAGE: bash
CODE:
npm install react-navigation

----------------------------------------

TITLE: Using Built-in Themes in React Navigation
DESCRIPTION: Demonstrates how to use the built-in light and dark themes in React Navigation by passing a theme prop to the app container component.

LANGUAGE: javascript
CODE:
let Navigation = createAppContainer(RootStack);

// `theme` can be `light` or `dark`. It defaults to `light` if not specified.
export default () => <Navigation theme="light" />;

----------------------------------------

TITLE: Implementing Screen Tracking with Redux Middleware in React Navigation
DESCRIPTION: This snippet demonstrates how to create a Redux middleware for screen tracking in React Navigation. It uses the GoogleAnalyticsTracker from react-native-google-analytics-bridge to send screen view data to Google Analytics when navigation actions occur.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';
import { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';

const tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);

const screenTracking =
  ({ getState }) =>
  (next) =>
  (action) => {
    if (
      action.type !== NavigationActions.NAVIGATE &&
      action.type !== NavigationActions.BACK
    ) {
      return next(action);
    }

    const currentScreen = getCurrentRouteName(getState().navigation);
    const result = next(action);
    const nextScreen = getCurrentRouteName(getState().navigation);
    if (nextScreen !== currentScreen) {
      // the line below uses the Google Analytics tracker
      // change the tracker here to use other Mobile analytics SDK.
      tracker.trackScreenView(nextScreen);
    }
    return result;
  };

export default screenTracking;

----------------------------------------

TITLE: Dispatching Navigation Actions in React Navigation
DESCRIPTION: Demonstrates how to use the dispatch function to send custom navigation actions to the router.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',
  params: {},

  // navigate can have a nested navigate action that will be run inside the child router
  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});
this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Installing Drawer Navigator Dependencies
DESCRIPTION: Commands to install the necessary packages for using the Drawer Navigator in a React Native project.

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer@^6.x
npx expo install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Configuring Path Parameters for Deep Linking
DESCRIPTION: Stack navigator configuration with path parameter specification for deep linking to the Chat screen.

LANGUAGE: javascript
CODE:
const SimpleApp = createStackNavigator({
  Home: { screen: HomeScreen },
  Chat: {
    screen: ChatScreen,
    path: 'chat/:user',
  },
});

----------------------------------------

TITLE: Wrapping AppNavigator with MobX Provider in React
DESCRIPTION: Demonstrates how to use the MobX Provider component to wrap the AppNavigator, allowing access to MobX objects throughout the application.

LANGUAGE: javascript
CODE:
<Provider myObject={this.myObject}>
  <AppNavigator />
</Provider>

----------------------------------------

TITLE: Installing Drawer Navigator Dependencies
DESCRIPTION: Commands to install the necessary packages for using the Drawer Navigator in a React Native project.

LANGUAGE: bash
CODE:
npm install @react-navigation/drawer@^6.x
npx expo install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Setting Stack Header Title from Tab Navigator in React Navigation
DESCRIPTION: Shows how to set the header title for a stack navigator that contains a tab navigator. It uses a function to dynamically set the header title based on the active tab route.

LANGUAGE: javascript
CODE:
const TabNavigator = createBottomTabNavigator({
  Feed: FeedScreen,
  Profile: ProfileScreen,
});

TabNavigator.navigationOptions = ({ navigation }) => {
  const { routeName } = navigation.state.routes[navigation.state.index];

  // You can do whatever you like here to pick the title based on the route name
  const headerTitle = routeName;

  return {
    headerTitle,
  };
};

const AppNavigator = createStackNavigator({
  Home: TabNavigator,
  Settings: SettingsScreen,
});

----------------------------------------

TITLE: Implementing Custom Android Back Button Behavior in React Navigation
DESCRIPTION: This code snippet demonstrates how to implement custom Android back button handling in a React component using React Navigation. It uses the BackHandler from react-native to add a custom hardwareBackPress listener. The component checks if a selection mode is active and disables it on the first back press, allowing the screen to be popped only on the second press.

LANGUAGE: JavaScript
CODE:
class ScreenWithCustomBackBehavior extends React.Component {
  componentDidMount() {
    BackHandler.addEventListener(
      'hardwareBackPress',
      this.onBackButtonPressAndroid
    );
  }

  componentWillUnmount() {
    BackHandler.removeEventListener(
      'hardwareBackPress',
      this.onBackButtonPressAndroid
    );
  }

  onBackButtonPressAndroid = () => {
    if (this.isSelectionModeEnabled()) {
      this.disableSelectionMode();
      return true;
    } else {
      return false;
    }
  };
}

----------------------------------------

TITLE: Disabling Deep Linking Handling
DESCRIPTION: Configuration to disable built-in deep linking handling in React Navigation.

LANGUAGE: javascript
CODE:
const SimpleApp = createStackNavigator({...});

const MainApp = () => <SimpleApp enableURLHandling={false} />;

----------------------------------------

TITLE: Basic Tab Navigation Setup with React Navigation
DESCRIPTION: Demonstrates minimal implementation of bottom tab navigation with Home and Settings screens using createBottomTabNavigator.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { createBottomTabNavigator, createAppContainer } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Home!</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Settings!</Text>
      </View>
    );
  }
}

const TabNavigator = createBottomTabNavigator({
  Home: HomeScreen,
  Settings: SettingsScreen,
});

export default createAppContainer(TabNavigator);

----------------------------------------

TITLE: Installing Dependencies for Material Bottom Tab Navigator
DESCRIPTION: Command to install required packages for using Material Bottom Tab Navigator with React Navigation.

LANGUAGE: bash
CODE:
npm install react-navigation-material-bottom-tabs react-native-paper

----------------------------------------

TITLE: Modal Stack Navigator with Custom Transitions
DESCRIPTION: Shows how to create a stack navigator with modal transitions and custom animation configurations.

LANGUAGE: javascript
CODE:
const ModalNavigator = createStackNavigator(
  {
    Main: { screen: Main },
    Login: { screen: Login },
  },
  {
    headerMode: 'none',
    mode: 'modal',
    navigationOptions: {
      gesturesEnabled: false,
    },
    transitionConfig: () => ({
      transitionSpec: {
        duration: 300,
        easing: Easing.out(Easing.poly(4)),
        timing: Animated.timing,
      },
      screenInterpolator: (sceneProps) => {
        const { layout, position, scene } = sceneProps;
        const { index } = scene;

        const height = layout.initHeight;
        const translateY = position.interpolate({
          inputRange: [index - 1, index, index + 1],
          outputRange: [height, 0, 0],
        });

        const opacity = position.interpolate({
          inputRange: [index - 1, index - 0.99, index],
          outputRange: [0, 1, 1],
        });

        return { opacity, transform: [{ translateY }] };
      },
    }),
  }
);

----------------------------------------

TITLE: Installing Dependencies for Material Bottom Tab Navigator
DESCRIPTION: Command to install required packages for using Material Bottom Tab Navigator with React Navigation.

LANGUAGE: bash
CODE:
npm install react-navigation-material-bottom-tabs react-native-paper

----------------------------------------

TITLE: Configuring Metro Source Extensions
DESCRIPTION: JavaScript configuration for Metro to include TypeScript file extensions in the sourceExts array.

LANGUAGE: javascript
CODE:
sourceExts: ['js', 'json', 'ts', 'tsx'];

----------------------------------------

TITLE: Overriding Shared Navigation Options in React Navigation
DESCRIPTION: Demonstrates how to override shared navigation options for a specific screen, including inverting background and tint colors.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  static navigationOptions = ({ navigation, navigationOptions }) => {
    const { params } = navigation.state;

    return {
      title: params ? params.otherParam : 'A Nested Details Screen',
      /* These values are used instead of the shared configuration! */
      headerStyle: {
        backgroundColor: navigationOptions.headerTintColor,
      },
      headerTintColor: navigationOptions.headerStyle.backgroundColor,
    };
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Implementing Static Navigation in App Component (JavaScript)
DESCRIPTION: Shows how to initialize and implement the static navigation configuration in the main App component.

LANGUAGE: javascript
CODE:
const Navigation = createStaticNavigation(RootStack);

function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Using screenListeners Prop on Navigator in React Navigation
DESCRIPTION: This snippet shows how to use the screenListeners prop on a navigator component to add listeners for all screens. It demonstrates listening to the state event and accessing the navigation object.

LANGUAGE: jsx
CODE:
<Tab.Navigator
  screenListeners={({ navigation }) => ({
    state: (e) => {
      // Do something with the state
      console.log('state changed', e.data);

      // Do something with the `navigation` object
      if (!navigation.canGoBack()) {
        console.log("we're on the initial screen");
      }
    },
  })}
>
  <Tab.Screen name="Home" component={HomeScreen} />
  <Tab.Screen name="Profile" component={ProfileScreen} />
</Tab.Navigator>

----------------------------------------

TITLE: Deep Linking URI Prefix Setup for Expo
DESCRIPTION: Configuration of URI prefix for deep linking in Expo projects.

LANGUAGE: javascript
CODE:
const SimpleApp = createStackNavigator({...});

const prefix = Expo.Linking.makeUrl('/');

const MainApp = () => <SimpleApp uriPrefix={prefix} />;

----------------------------------------

TITLE: Installing Dependencies for Material Bottom Tab Navigator
DESCRIPTION: Command to install the required packages for using the material bottom tab navigator. This includes react-navigation-material-bottom-tabs and react-native-paper.

LANGUAGE: bash
CODE:
npm install react-navigation-material-bottom-tabs react-native-paper

----------------------------------------

TITLE: Installing react-native-drawer-layout with npm
DESCRIPTION: Command to install the react-native-drawer-layout package using npm in a terminal at the project root.

LANGUAGE: bash
CODE:
npm install react-native-drawer-layout

----------------------------------------

TITLE: Installing react-native-drawer-layout with npm
DESCRIPTION: Command to install the react-native-drawer-layout package using npm in a terminal at the project root.

LANGUAGE: bash
CODE:
npm install react-native-drawer-layout

----------------------------------------

TITLE: Active Child Navigation Options
DESCRIPTION: Example showing how to get navigation options from active child navigator using getActiveChildNavigationOptions.

LANGUAGE: jsx
CODE:
class A extends React.Component {
  static navigationOptions = {
    title: 'Welcome',
    tabBarLabel: 'Home!',
  };

  render() {
    return <Placeholder text="A!" />;
  }
}

const HomeStack = createStackNavigator(
  { A },
  {
    navigationOptions: ({ navigation, screenProps }) => ({
      ...getActiveChildNavigationOptions(navigation, screenProps),
    }),
  }
);

----------------------------------------

TITLE: Accessing Navigation Props Using withNavigation HOC
DESCRIPTION: Correct implementation using withNavigation HOC to automatically inject the navigation prop into the component through React context, eliminating the need for explicit prop passing

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Installing Material Bottom Tabs Navigator
DESCRIPTION: Command to install the 6.x version of @react-navigation/material-bottom-tabs package.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-bottom-tabs@^6.x

----------------------------------------

TITLE: Creating Custom Navigator with createNavigator in React Navigation
DESCRIPTION: Demonstrates how to use the createNavigator utility to combine a router and a navigation view into a custom navigator. This approach is used for building new navigator types.

LANGUAGE: javascript
CODE:
import { createNavigator } from 'react-navigation';

const AppNavigator = createNavigator(NavigationView, router, navigationConfig);

----------------------------------------

TITLE: Dynamic Transition Mode Configuration in Stack Navigator
DESCRIPTION: Demonstrates how to implement dynamic transition modes for different screens in a stack navigator using custom transition configuration.

LANGUAGE: javascript
CODE:
import {
  createStackNavigator,
  StackViewTransitionConfigs,
} from 'react-navigation';

const IOS_MODAL_ROUTES = ['OptionsScreen'];

let dynamicModalTransition = (transitionProps, prevTransitionProps) => {
  const isModal = IOS_MODAL_ROUTES.some(
    (screenName) =>
      screenName === transitionProps.scene.route.routeName ||
      (prevTransitionProps &&
        screenName === prevTransitionProps.scene.route.routeName)
  );
  return StackViewTransitionConfigs.defaultTransitionConfig(
    transitionProps,
    prevTransitionProps,
    isModal
  );
};

const HomeStack = createStackNavigator(
  { DetailScreen, HomeScreen, OptionsScreen },
  { initialRouteName: 'HomeScreen', transitionConfig: dynamicModalTransition }
);

----------------------------------------

TITLE: Status Code Context Implementation
DESCRIPTION: Creation of a context for handling HTTP status codes in React Navigation.

LANGUAGE: javascript
CODE:
import * as React from 'react';

const StatusCodeContext = React.createContext();

export default StatusCodeContext;

----------------------------------------

TITLE: Defining a GoToButton Component with Navigation Prop in React Native
DESCRIPTION: This snippet demonstrates a basic GoToButton component that requires the navigation prop to be passed explicitly. It uses the navigation.navigate method to navigate to a specified screen.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';

function GoToButton({ navigation, screenName }) {
  return (
    <Button
      title={`Go to ${screenName}`}
      onPress={() => navigation.navigate(screenName)}
    />
  );
}

----------------------------------------

TITLE: Using useReduxDevToolsExtension Hook with Static Navigation in React Native
DESCRIPTION: Example of integrating the useReduxDevToolsExtension hook with static navigation in a React Native app. It demonstrates the import of necessary components and application of the hook to a navigation container reference.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  createStaticNavigation,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useReduxDevToolsExtension } from '@react-navigation/devtools';

/* content */

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useReduxDevToolsExtension(navigationRef);

  return <Navigation ref={navigationRef} />;
}

----------------------------------------

TITLE: Configuring Tab Navigator Options in React Navigation 5
DESCRIPTION: Example of how to set tab bar options in React Navigation 5 using the tabBarOptions prop on the Tab.Navigator component.

LANGUAGE: javascript
CODE:
// Before (v5)
<Tab.Navigator
  tabBarOptions={{
    inactiveTintColor: 'rgba(255, 255, 255, 0.5)',
    activeTintColor: '#fff',
    style: {
      position: 'absolute',
      borderTopColor: 'rgba(0, 0, 0, .2)',
    },
  }}
>

----------------------------------------

TITLE: Implementing Back Navigation in React Navigation
DESCRIPTION: This snippet demonstrates various ways to implement back navigation in React Navigation. It shows how to use the goBack function, navigate to a specific screen, and pop to the top of the navigation stack.

LANGUAGE: jsx
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.push('Details')}
        />
        <Button
          title="Go to Home"
          onPress={() => this.props.navigation.navigate('Home')}
        />
        <Button
          title="Go back"
          onPress={() => this.props.navigation.goBack()}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Installing Material Bottom Tabs Dependencies
DESCRIPTION: Command to install required dependencies for material bottom tabs navigation including react-native-paper and vector icons.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-bottom-tabs@^5.x react-native-paper react-native-vector-icons

----------------------------------------

TITLE: Installing dependencies for Expo managed project
DESCRIPTION: Command to install required dependencies (react-native-gesture-handler and react-native-reanimated) for an Expo managed project.

LANGUAGE: bash
CODE:
npx expo install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Active Child Navigation Options
DESCRIPTION: Example demonstrating how to get navigation options from active child navigator using getActiveChildNavigationOptions.

LANGUAGE: jsx
CODE:
class A extends React.Component {
  static navigationOptions = {
    title: 'Welcome',
    tabBarLabel: 'Home!',
  };

  render() {
    return <Placeholder text="A!" />;
  }
}

const HomeStack = createStackNavigator(
  { A },
  {
    navigationOptions: ({ navigation, screenProps }) => ({
      ...getActiveChildNavigationOptions(navigation, screenProps),
    }),
  }
);

----------------------------------------

TITLE: Installing React Navigation Package
DESCRIPTION: Command to install the react-navigation package using npm or yarn package managers in a React Native project.

LANGUAGE: bash
CODE:
npm install react-navigation

----------------------------------------

TITLE: Dynamic Transition Mode Configuration
DESCRIPTION: Shows how to implement dynamic transition modes for different screens within a stack navigator using custom transition configuration.

LANGUAGE: javascript
CODE:
import {
  createStackNavigator,
  StackViewTransitionConfigs,
} from 'react-navigation';

const IOS_MODAL_ROUTES = ['OptionsScreen'];

let dynamicModalTransition = (transitionProps, prevTransitionProps) => {
  const isModal = IOS_MODAL_ROUTES.some(
    (screenName) =>
      screenName === transitionProps.scene.route.routeName ||
      (prevTransitionProps &&
        screenName === prevTransitionProps.scene.route.routeName)
  );
  return StackViewTransitionConfigs.defaultTransitionConfig(
    transitionProps,
    prevTransitionProps,
    isModal
  );
};

const HomeStack = createStackNavigator(
  { DetailScreen, HomeScreen, OptionsScreen },
  { initialRouteName: 'HomeScreen', transitionConfig: dynamicModalTransition }
);

----------------------------------------

TITLE: Router State Example with Multiple Routes
DESCRIPTION: Demonstrates a sample router state with multiple routes and their structure.

LANGUAGE: javascript
CODE:
{
  index: 1,
  routes: [
    { key: 'A', routeName: 'Foo' },
    { key: 'B', routeName: 'Bar' },
  ],
}

----------------------------------------

TITLE: Creating a Tab Navigator in React Navigation
DESCRIPTION: Basic usage of createTabNavigator function to create a tab-based navigation structure. This function takes RouteConfigs and TabNavigatorConfig as arguments.

LANGUAGE: javascript
CODE:
createTabNavigator(RouteConfigs, TabNavigatorConfig);

----------------------------------------

TITLE: Initializing Basic StackNavigator
DESCRIPTION: Basic syntax for creating a StackNavigator with route configurations and navigation options.

LANGUAGE: javascript
CODE:
StackNavigator(RouteConfigs, StackNavigatorConfig);

----------------------------------------

TITLE: Implementing Screen Focus Action with didFocus Event Listener in React Navigation
DESCRIPTION: This snippet shows how to use a 'didFocus' event listener to trigger actions when a screen gains focus. It sets up the listener in componentDidMount and removes it in componentWillUnmount to prevent memory leaks.

LANGUAGE: javascript
CODE:
import React, { Component } from 'react';
import { View } from 'react-native';
import { withNavigation } from 'react-navigation';

class TabScreen extends Component {
  componentDidMount() {
    const { navigation } = this.props;
    this.focusListener = navigation.addListener('didFocus', () => {
      // The screen is focused
      // Call any action
    });
  }

  componentWillUnmount() {
    // Remove the event listener
    this.focusListener.remove();
  }

  render() {
    return <View />;
  }
}

export default withNavigation(TabScreen);

----------------------------------------

TITLE: Navigation Store Implementation with MobX State Tree
DESCRIPTION: Implementation of a navigation store using MobX State Tree, demonstrating how to model navigation params for different screen types using maps and references.

LANGUAGE: javascript
CODE:
import { types, onSnapshot, getRoot } from 'mobx-state-tree';
import { Product } from '../models/Product';
import { User } from '../models/User';

export const NavigationStore = types
  .model('NavigationStore', {
    productDetailScreenParams: types.map(
      types.model('ProductDetailScreenParams', {
        product: types.optional(types.safeReference(Product)),
      })
    ),
    userProfileScreenParams: types.model('UserProfileScreenParams', {
      user: types.maybe(types.safeReference(User)),
    }),
  })
  .actions(self => ({
    ...
  }));

----------------------------------------

TITLE: Creating Bottom Navigation with Material Bottom Tabs
DESCRIPTION: Implements bottom navigation using @react-navigation/material-bottom-tabs and integrates it with React Native Paper's FAB component.

LANGUAGE: jsx
CODE:
import React from 'react';
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';
import { useTheme, Portal, FAB } from 'react-native-paper';
import { useIsFocused } from '@react-navigation/native';

const Tab = createMaterialBottomTabNavigator();

export const BottomTabs = () => {
  const isFocused = useIsFocused();

  return (
    <React.Fragment>
      <Tab.Navigator
        initialRouteName="Feed"
        shifting={true}
        sceneAnimationEnabled={false}
      >
        {/* Tab screens */}
      </Tab.Navigator>
      <Portal>
        <FAB
          visible={isFocused}
          icon="feather"
          style={{
            position: 'absolute',
            bottom: 100,
            right: 16,
          }}
        />
      </Portal>
    </React.Fragment>
  );
};

----------------------------------------

TITLE: Adding Basic Header Button in React Navigation
DESCRIPTION: Demonstrates how to add a simple button to the header right section using React Navigation's navigationOptions. Shows implementation of a basic info button with an alert action.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  static navigationOptions = {
    headerTitle: <LogoTitle />,
    headerRight: (
      <Button
        onPress={() => alert('This is a button!')}
        title="Info"
        color="#fff"
      />
    ),
  };
}

----------------------------------------

TITLE: Implementing back navigation in React Navigation
DESCRIPTION: This snippet demonstrates various ways to implement back navigation, including going back one screen, navigating to a specific previous screen, and returning to the first screen in the stack.

LANGUAGE: javascript
CODE:
function DetailsScreen({ navigation }) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>Details Screen</Text>
      <Button
        title="Go to Details... again"
        onPress={() => navigation.push('Details')}
      />
      <Button title="Go to Home" onPress={() => navigation.navigate('Home')} />
      <Button title="Go back" onPress={() => navigation.goBack()} />
      <Button
        title="Go back to first screen in stack"
        onPress={() => navigation.popToTop()}
      />
    </View>
  );
}

----------------------------------------

TITLE: React Navigation Container Setup
DESCRIPTION: Example of properly wrapping NavigationContainer in a View with flex styling.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <View style={{ flex: 1 }}>
      <NavigationContainer>{/* ... */}</NavigationContainer>
    </View>
  );
}

----------------------------------------

TITLE: Corrected Stack in Tab Navigator Options
DESCRIPTION: Shows the correct way to set tab navigator options by applying them directly to Tab.Screen components.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen
          name="Home"
          component={HomeStackScreen}
          options={{ tabBarLabel: 'Home!' }}
        />
        <Tab.Screen
          name="Settings"
          component={SettingsStackScreen}
          options={{ tabBarLabel: 'Settings!' }}
        />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Defining Screen Components in React Navigation Stack Navigator
DESCRIPTION: This snippet demonstrates how to define screen components in a stack navigator configuration. It shows the structure of createStackNavigator with two screens: Home and Details.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator(
  {
    Home: {
      screen: HomeScreen, // <----
    },
    Details: {
      screen: DetailsScreen, // <----
    },
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Using useLinkTo Hook with Class Component
DESCRIPTION: Shows how to use the useLinkTo hook with a class component by wrapping it in a functional component. The linkTo function is passed as a prop to the class component.

LANGUAGE: javascript
CODE:
class Home extends React.Component {
  render() {
    // Get it from props
    const { linkTo } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const linkTo = useLinkTo();

  return <Profile {...props} linkTo={linkTo} />;
}

----------------------------------------

TITLE: Customizing Loading View for State Persistence
DESCRIPTION: This example demonstrates how to customize the loading view displayed while the navigation state is being loaded asynchronously.

LANGUAGE: javascript
CODE:
<AppNavigator
  persistNavigationState={...}
  loadNavigationState={...}
  renderLoadingExperimental={() => <ActivityIndicator />}
/>

----------------------------------------

TITLE: Customizing Navigator Behavior in React Navigation
DESCRIPTION: Shows how to customize a navigator's behavior by overriding router methods and adding additional rendering logic. This example modifies the getStateForAction method and adds component lifecycle hooks.

LANGUAGE: javascript
CODE:
const MyStack = createStackNavigator({ ... });

class CustomNavigator extends React.Component {
  static router = {
    ...MyStack.router,
    getStateForAction: (action, lastState) => {
      // check for custom actions and return a different navigation state.
      return MyStack.router.getStateForAction(action, lastState);
    },
  };
  componentDidUpdate(lastProps) {
    // Navigation state has changed from lastProps.navigation.state to this.props.navigation.state
  }
  render() {
    const { navigation } = this.props;

    return (
      <View>
        <MyStack navigation={navigation} />
        {...}
      </View>
    );
  }
}

----------------------------------------

TITLE: Initializing React Navigation in a Web App
DESCRIPTION: This snippet demonstrates how to set up a navigator in a React web application using createSwitchNavigator and createBrowserApp. It shows the basic structure for creating and rendering a navigation app.

LANGUAGE: javascript
CODE:
import { createSwitchNavigator } from '@react-navigation/core';
import { createBrowserApp } from '@react-navigation/web';

const MyNavigator = createSwitchNavigator(routes);

const App = createBrowserApp(MyNavigator);

// now you can render "App" normally

----------------------------------------

TITLE: Custom Deep Link Handling Implementation
DESCRIPTION: Implementation of custom deep link handling using React Native Linking API.

LANGUAGE: javascript
CODE:
componentDidMount() {
    // [...]
    Linking.addEventListener('url', this.handleDeepLink)
}
componentWillUnmount() {
    // [...]
    Linking.removeEventListener('url', this.handleDeepLink);
}

handleDeepLink(e) {
    const route = e.url.replace(/.*?:\/\//g, '')
    // use route to navigate
    // ...
}

----------------------------------------

TITLE: Implementing Modal Navigation with Dynamic Configuration in React Navigation
DESCRIPTION: Shows how to implement modal screens using dynamic configuration with React Navigation's Stack Navigator. Includes screen components and navigation container setup with grouped screens for modal presentation.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, Text } from 'react-native';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { Button } from '@react-navigation/elements';

function HomeScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is the home screen!</Text>
      <Button onPress={() => navigation.navigate('MyModal')}>Open Modal</Button>
    </View>
  );
}

function ModalScreen() {
  const navigation = useNavigation();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 30 }}>This is a modal!</Text>
      <Button onPress={() => navigation.goBack()}>Dismiss</Button>
    </View>
  );
}

function DetailsScreen() {
  return (
    <View>
      <Text>Details</Text>
    </View>
  );
}

const RootStack = createStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <RootStack.Navigator>
        <RootStack.Group>
          <RootStack.Screen name="Home" component={HomeScreen} />
          <RootStack.Screen name="Details" component={DetailsScreen} />
        </RootStack.Group>
        <RootStack.Group screenOptions={{ presentation: 'modal' }}>
          <RootStack.Screen name="MyModal" component={ModalScreen} />
        </RootStack.Group>
      </RootStack.Navigator>
    </NavigationContainer>
  );
}

export default App;

----------------------------------------

TITLE: Setting Up React Navigation and React Native Paper Providers
DESCRIPTION: Wraps the main component with PaperProvider and NavigationContainer to set up React Navigation and React Native Paper.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Provider as PaperProvider } from 'react-native-paper';
import { NavigationContainer } from '@react-navigation/native';
import Main from './src/Main';

export default function App() {
  return (
    <PaperProvider>
      <NavigationContainer>
        <Main />
      </NavigationContainer>
    </PaperProvider>
  );
}

----------------------------------------

TITLE: Basic React Native Tab View Implementation
DESCRIPTION: Example showing basic implementation of TabView component with two routes and scene rendering

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View, useWindowDimensions } from 'react-native';
import { TabView, SceneMap } from 'react-native-tab-view';

const FirstRoute = () => (
  <View style={{ flex: 1, backgroundColor: '#ff4081' }} />
);

const SecondRoute = () => (
  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />
);

const renderScene = SceneMap({
  first: FirstRoute,
  second: SecondRoute,
});

const routes = [
  { key: 'first', title: 'First' },
  { key: 'second', title: 'Second' },
];

export default function TabViewExample() {
  const layout = useWindowDimensions();
  const [index, setIndex] = React.useState(0);

  return (
    <TabView
      navigationState={{ index, routes }}
      renderScene={renderScene}
      onIndexChange={setIndex}
      initialLayout={{ width: layout.width }}
    />
  );
}

----------------------------------------

TITLE: Creating a Non-Navigating Tab Icon in React Navigation
DESCRIPTION: This snippet shows how to create a tab icon that doesn't navigate to a new screen when pressed. It uses the tabBarOnPress callback in the navigationOptions to define custom behavior.

LANGUAGE: JavaScript
CODE:
new TabNavigator({
  ...,
  Placeholder: {
      screen: () => null,
      navigationOptions: {
        tabBarOnPress: () => {
          // do something custom here
        },
      },
  }
  ...
});

----------------------------------------

TITLE: Updating Babel Preset for React Native
DESCRIPTION: Command to update the @react-native/babel-preset package to the latest version.

LANGUAGE: bash
CODE:
npm install --save-dev @react-native/babel-preset

----------------------------------------

TITLE: Implementing Custom Tab Navigator in React Navigation
DESCRIPTION: Example of creating a custom tab navigator using useNavigationBuilder hook. Demonstrates basic tab navigation implementation with pressable tabs and content views.

LANGUAGE: javascript
CODE:
function TabNavigator({
  initialRouteName,
  children,
  screenOptions,
  tabBarStyle,
  contentStyle,
}) {
  const { state, navigation, descriptors, NavigationContent } =
    useNavigationBuilder(TabRouter, {
      children,
      screenOptions,
      initialRouteName,
    });

  return (
    <NavigationContent>
      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>
        {state.routes.map((route, index) => (
          <Pressable
            key={route.key}
            onPress={() => {
              const isFocused = state.index === index;
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
              });

              if (!isFocused && !event.defaultPrevented) {
                navigation.dispatch({
                  ...TabActions.jumpTo(route.name, route.params),
                  target: state.key,
                });
              }
            }}
            style={{ flex: 1 }}
          >
            <Text>{descriptors[route.key].options.title ?? route.name}</Text>
          </Pressable>
        ))}
      </View>
      <View style={[{ flex: 1 }, contentStyle]}>
        {state.routes.map((route, i) => {
          return (
            <View
              key={route.key}
              style={[
                StyleSheet.absoluteFill,
                { display: i === state.index ? 'flex' : 'none' },
              ]}
            >
              {descriptors[route.key].render()}
            </View>
          );
        })}
      </View>
    </NavigationContent>
  );
}

----------------------------------------

TITLE: Implementing Custom Tab Navigator in React Navigation
DESCRIPTION: Example of creating a custom tab navigator using useNavigationBuilder hook. Demonstrates basic tab navigation implementation with pressable tabs and content views.

LANGUAGE: javascript
CODE:
function TabNavigator({
  initialRouteName,
  children,
  screenOptions,
  tabBarStyle,
  contentStyle,
}) {
  const { state, navigation, descriptors, NavigationContent } =
    useNavigationBuilder(TabRouter, {
      children,
      screenOptions,
      initialRouteName,
    });

  return (
    <NavigationContent>
      <View style={[{ flexDirection: 'row' }, tabBarStyle]}>
        {state.routes.map((route, index) => (
          <Pressable
            key={route.key}
            onPress={() => {
              const isFocused = state.index === index;
              const event = navigation.emit({
                type: 'tabPress',
                target: route.key,
                canPreventDefault: true,
              });

              if (!isFocused && !event.defaultPrevented) {
                navigation.dispatch({
                  ...TabActions.jumpTo(route.name, route.params),
                  target: state.key,
                });
              }
            }}
            style={{ flex: 1 }}
          >
            <Text>{descriptors[route.key].options.title ?? route.name}</Text>
          </Pressable>
        ))}
      </View>
      <View style={[{ flex: 1 }, contentStyle]}>
        {state.routes.map((route, i) => {
          return (
            <View
              key={route.key}
              style={[
                StyleSheet.absoluteFill,
                { display: i === state.index ? 'flex' : 'none' },
              ]}
            >
              {descriptors[route.key].render()}
            </View>
          );
        })}
      </View>
    </NavigationContent>
  );
}

----------------------------------------

TITLE: Route Object Structure Example
DESCRIPTION: Illustrates the structure of a route object including key, name, and optional params.

LANGUAGE: javascript
CODE:
{
  key: 'B',
  name: 'Profile',
  params: { id: '123' }
}

----------------------------------------

TITLE: Defining Screen Components in React Navigation StackNavigator
DESCRIPTION: This snippet demonstrates how to define screen components in a React Navigation StackNavigator configuration. It shows the structure of the navigator and how screen components are associated with route names.

LANGUAGE: javascript
CODE:
const AppNavigator = createStackNavigator(
  {
    Home: {
      screen: HomeScreen, // <----
    },
    Details: {
      screen: DetailsScreen, // <----
    },
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Installing Material Top Tabs Navigator
DESCRIPTION: Commands to install the 6.x version of @react-navigation/material-top-tabs package and its dependencies.

LANGUAGE: bash
CODE:
npm install @react-navigation/material-top-tabs@^6.x react-native-tab-view
npm install react-native-pager-view

----------------------------------------

TITLE: Using TabActions.jumpTo in React Navigation
DESCRIPTION: Demonstrates how to use the TabActions.jumpTo method to navigate between tabs in a React Navigation tab navigator. The action accepts a route name and optional parameters to pass to the destination screen.

LANGUAGE: javascript
CODE:
import { TabActions } from '@react-navigation/native';

const jumpToAction = TabActions.jumpTo('Profile', { user: 'Satya' });

navigation.dispatch(jumpToAction);

----------------------------------------

TITLE: Implementing Navigation Without withNavigation HOC
DESCRIPTION: Example showing a back button component that will throw an error due to undefined navigation prop when not passed explicitly.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';

export default class MyBackButton extends React.Component {
  render() {
    // This will throw an 'undefined is not a function' exception because the navigation
    // prop is undefined.
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Using Link Component for Navigation
DESCRIPTION: Example of using the Link component for URL-based navigation in React Navigation. The component renders as an anchor tag on web platforms, enabling standard web behaviors like 'Open in new tab'.

LANGUAGE: javascript
CODE:
<Link to="/profile/jane">Go to Jane's profile</Link>

----------------------------------------

TITLE: Stack Navigator Integration with Tabs
DESCRIPTION: Implementation of stack navigation within tab navigator screens, allowing for nested navigation patterns.

LANGUAGE: jsx
CODE:
import { createBottomTabNavigator, createStackNavigator } from 'react-navigation';

const HomeStack = createStackNavigator({
  Home: HomeScreen,
  Details: DetailsScreen,
});

const SettingsStack = createStackNavigator({
  Settings: SettingsScreen,
  Details: DetailsScreen,
});

export default createBottomTabNavigator(
  {
    Home: HomeStack,
    Settings: SettingsStack,
  },
  {
    /* Other configuration remains unchanged */
  }
);

----------------------------------------

TITLE: Dispatching Drawer Actions in React Navigation
DESCRIPTION: Alternative approach to control the drawer by dispatching actions directly using the navigation object.

LANGUAGE: javascript
CODE:
navigation.dispatch(DrawerActions.openDrawer());
navigation.dispatch(DrawerActions.closeDrawer());
navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Navigation Event Handling in React Class Components
DESCRIPTION: Example showing how to handle navigation events in a class component using componentDidMount and componentWillUnmount lifecycle methods.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  componentDidMount() {
    this._unsubscribe = navigation.addListener('focus', () => {
      // do something
    });
  }

  componentWillUnmount() {
    this._unsubscribe();
  }

  render() {
    // Content of the component
  }
}

----------------------------------------

TITLE: Configuring Bottom Tab Navigation with UI Kitten
DESCRIPTION: Implements bottom tab navigation using UI Kitten's BottomNavigation component with custom tab bar rendering.

LANGUAGE: javascript
CODE:
import React from 'react';
import { BottomNavigation, BottomNavigationTab, Divider, BottomNavigationTabElement } from '@ui-kitten/components';
import { SafeAreaLayout, SafeAreaLayoutElement, SaveAreaInset } from '../../components/safe-area-layout.component';

export const HomeTabBar = (props): SafeAreaLayoutElement => {

  const onSelect = (index: number): void => {
    const selectedTabRoute: string = props.state.routeNames[index];
    props.navigation.navigate(selectedTabRoute);
  };

  const createNavigationTabForRoute = (route): BottomNavigationTabElement => {
    const { options } = props.descriptors[route.key];
    return (
      <BottomNavigationTab
        key={route.key}
        title={options.title}
        icon={options.tabBarIcon}
      />
    );
  };

  return (
    <SafeAreaLayout insets={SaveAreaInset.BOTTOM}>
      <Divider/>
      <BottomNavigation
        appearance='noIndicator'
        selectedIndex={props.state.index}
        onSelect={onSelect}>
        {props.state.routes.map(createNavigationTabForRoute)}
      </BottomNavigation>
    </SafeAreaLayout>
  );
};

----------------------------------------

TITLE: Stack Navigator Integration with Tabs
DESCRIPTION: Implementation of stack navigation within tab navigator screens, allowing for nested navigation patterns.

LANGUAGE: jsx
CODE:
import { createBottomTabNavigator, createStackNavigator } from 'react-navigation';

const HomeStack = createStackNavigator({
  Home: HomeScreen,
  Details: DetailsScreen,
});

const SettingsStack = createStackNavigator({
  Settings: SettingsScreen,
  Details: DetailsScreen,
});

export default createBottomTabNavigator(
  {
    Home: HomeStack,
    Settings: SettingsStack,
  },
  {
    /* Other configuration remains unchanged */
  }
);

----------------------------------------

TITLE: Type-Checked Custom Tab Navigator Implementation
DESCRIPTION: TypeScript implementation of a custom tab navigator with proper type definitions for props, screen options, and event maps.

LANGUAGE: typescript
CODE:
type TabNavigationConfig = {
  tabBarStyle: StyleProp<ViewStyle>;
  contentStyle: StyleProp<ViewStyle>;
};

type TabNavigationOptions = {
  title?: string;
};

type TabNavigationEventMap = {
  tabPress: {
    data: { isAlreadyFocused: boolean };
    canPreventDefault: true;
  };
};

type Props = DefaultNavigatorOptions<
  ParamListBase,
  TabNavigationState<ParamListBase>,
  TabNavigationOptions,
  TabNavigationEventMap
> &
  TabRouterOptions &
  TabNavigationConfig;

----------------------------------------

TITLE: Ignoring Non-serializable Values Warning
DESCRIPTION: JavaScript code to ignore the warning about non-serializable values in the navigation state.

LANGUAGE: javascript
CODE:
import { LogBox } from 'react-native';

LogBox.ignoreLogs([
  'Non-serializable values were found in the navigation state',
]);

----------------------------------------

TITLE: Type-Checked Custom Tab Navigator Implementation
DESCRIPTION: TypeScript implementation of a custom tab navigator with proper type definitions for props, screen options, and event maps.

LANGUAGE: typescript
CODE:
type TabNavigationConfig = {
  tabBarStyle: StyleProp<ViewStyle>;
  contentStyle: StyleProp<ViewStyle>;
};

type TabNavigationOptions = {
  title?: string;
};

type TabNavigationEventMap = {
  tabPress: {
    data: { isAlreadyFocused: boolean };
    canPreventDefault: true;
  };
};

type Props = DefaultNavigatorOptions<
  ParamListBase,
  TabNavigationState<ParamListBase>,
  TabNavigationOptions,
  TabNavigationEventMap
> &
  TabRouterOptions &
  TabNavigationConfig;

----------------------------------------

TITLE: Configuring Screen Options for Groups (Static)
DESCRIPTION: Demonstrates how to set screen options for a group using static configuration. This allows applying common options to multiple screens within a group.

LANGUAGE: javascript
CODE:
const MyStack = createNativeStackNavigator({
  groups: {
    Modal: {
      screenOptions: {
        presentation: 'modal',
      },
      screens: {
        /* screens */
      },
    },
  },
});

----------------------------------------

TITLE: Example of Navigation State Structure in React Navigation
DESCRIPTION: This JSON snippet shows the typical structure of a navigation state in React Navigation. It includes a key, index, and an array of routes representing the navigation hierarchy.

LANGUAGE: json
CODE:
{
  "key": "StackRouterRoot",
  "index": 1,
  "routes": [
    { "key": "A", "routeName": "Home" },
    { "key": "B", "routeName": "Profile" }
  ]
}

----------------------------------------

TITLE: Using useIsFocused Hook with Class Components in React Navigation
DESCRIPTION: This snippet shows how to use the useIsFocused hook with a class component by wrapping it in a functional component. The isFocused value is passed as a prop to the class component.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  render() {
    // Get it from props
    const { isFocused } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const isFocused = useIsFocused();

  return <Profile {...props} isFocused={isFocused} />;
}

----------------------------------------

TITLE: Resetting Navigation Stack with Multiple Routes
DESCRIPTION: Shows how to reset navigation state with multiple routes while setting a specific route as active using the index parameter.

LANGUAGE: javascript
CODE:
import { StackActions, NavigationActions } from 'react-navigation';

const resetAction = StackActions.reset({
  index: 1,
  actions: [
    NavigationActions.navigate({ routeName: 'Profile' }),
    NavigationActions.navigate({ routeName: 'Settings' }),
  ],
});
this.props.navigation.dispatch(resetAction);

----------------------------------------

TITLE: Configuring Transition Animation in React Navigation
DESCRIPTION: Examples of how to configure transition animations for the Transitioner component. It shows how to set duration and easing for Animated.timing, and how to use Animated.spring with custom parameters.

LANGUAGE: js
CODE:
_configureTransition(transitionProps, prevTransitionProps) {
  return {
    // duration in milliseconds, default: 250
    duration: 500,
    // An easing function from `Easing`, default: Easing.inOut(Easing.ease)
    easing: Easing.bounce,
  }
}

LANGUAGE: js
CODE:
_configureTransition(transitionProps, prevTransitionProps) {
  return {
    // A timing function, default: Animated.timing.
    timing: Animated.spring,
    // Some parameters relevant to Animated.spring
    friction: 1,
    tension: 0.5,
  }
}

----------------------------------------

TITLE: Implementing NavigationService for React Navigation
DESCRIPTION: This code defines the NavigationService module, which provides functions to set the top-level navigator and navigate to different routes. It uses the NavigationActions from react-navigation to dispatch navigation actions.

LANGUAGE: javascript
CODE:
// NavigationService.js

import { NavigationActions } from 'react-navigation';

let _navigator;

function setTopLevelNavigator(navigatorRef) {
  _navigator = navigatorRef;
}

function navigate(routeName, params) {
  _navigator.dispatch(
    NavigationActions.navigate({
      type: NavigationActions.NAVIGATE,
      routeName,
      params,
    })
  );
}

// add other navigation functions that you need and export them

export default {
  navigate,
  setTopLevelNavigator,
};

----------------------------------------

TITLE: Implementing Authentication Loading Screen in React Native
DESCRIPTION: This snippet shows the implementation of an authentication loading screen. It uses AsyncStorage to check for a user token and navigates to either the App or Auth screen based on the token's presence.

LANGUAGE: jsx
CODE:
import React from 'react';
import {
  ActivityIndicator,
  AsyncStorage,
  StatusBar,
  StyleSheet,
  View,
} from 'react-native';

class AuthLoadingScreen extends React.Component {
  componentDidMount() {
    this._bootstrapAsync();
  }

  // Fetch the token from storage then navigate to our appropriate place
  _bootstrapAsync = async () => {
    const userToken = await AsyncStorage.getItem('userToken');

    // This will switch to the App screen or Auth screen and this loading
    // screen will be unmounted and thrown away.
    this.props.navigation.navigate(userToken ? 'App' : 'Auth');
  };

  // Render any loading content that you like here
  render() {
    return (
      <View>
        <ActivityIndicator />
        <StatusBar barStyle="default" />
      </View>
    );
  }
}

----------------------------------------

TITLE: Implementing Screen Focus Detection with didFocus Event Listener in React Navigation
DESCRIPTION: Example demonstrating how to use the didFocus event listener to detect when a screen comes into focus. This method avoids unnecessary re-renders and is ideal for one-time actions like API calls.

LANGUAGE: javascript
CODE:
import React, { Component } from 'react';
import { View } from 'react-native';
import { withNavigation } from 'react-navigation';

class TabScreen extends Component {
  componentDidMount() {
    const { navigation } = this.props;
    this.focusListener = navigation.addListener('didFocus', () => {
      // The screen is focused
      // Call any action
    });
  }

  componentWillUnmount() {
    // Remove the event listener
    this.focusListener.remove();
  }

  render() {
    return <View />;
  }
}

export default withNavigation(TabScreen);

----------------------------------------

TITLE: Creating Stack Navigator in React Navigation 2.0
DESCRIPTION: Example of creating a stack navigator using the new createStackNavigator function in React Navigation 2.0. This replaces the previous StackNavigator syntax.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from 'react-navigation';
createStackNavigator({routeName: Screen});

----------------------------------------

TITLE: Creating Bottom Tab Navigator - Basic Implementation
DESCRIPTION: Basic implementation of createBottomTabNavigator showing the fundamental syntax for creating a bottom tab navigation.

LANGUAGE: javascript
CODE:
createBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig);

----------------------------------------

TITLE: Correct Usage of headerTitle Option
DESCRIPTION: JavaScript code showing the correct way to use the headerTitle option in a stack navigator to avoid invalid hook call errors.

LANGUAGE: javascript
CODE:
const Stack = createNativeStackNavigator({
  screens: {
    Home: {
      screen: Home,
      options: {
        headerTitle: (props) => <MyTitle {...props} />,
      },
    },
  },
});

----------------------------------------

TITLE: Theming Navigation Options with screenProps
DESCRIPTION: Demonstrates how to apply custom themes to navigation options using screenProps in React Navigation.

LANGUAGE: jsx
CODE:
import {
  createAppContainer,
  createStackNavigator,
  ThemeContext,
} from 'react-navigation';

class HomeScreen extends React.Component {
  static navigationOptions = ({ screenProps }) => {
    let currentTheme = ThemeConstants[screenProps.theme];

    return {
      title: 'Home',
      headerTintColor: currentTheme.fontColor,
      headerStyle: { backgroundColor: currentTheme.backgroundColor },
    };
  };

  render() {
    // ... (render implementation)
  }
}

const Stack = createStackNavigator({ Home: HomeScreen });
const Navigation = createAppContainer(Stack);

export default class AppContainer extends React.Component {
  state = {
    theme: 'light',
  };

  toggleTheme = () => {
    this.setState(({ theme }) => ({
      theme: theme === 'light' ? 'dark' : 'light',
    }));
  };

  render() {
    return (
      <ThemeContext.Provider
        value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}
      >
        <Navigation screenProps={{ theme: this.state.theme }} />
      </ThemeContext.Provider>
    );
  }
}

----------------------------------------

TITLE: Using Parameters in Header Titles
DESCRIPTION: Shows how to use navigation parameters to dynamically set header titles using a function-based navigationOptions configuration.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  static navigationOptions = ({ navigation }) => {
    return {
      title: navigation.getParam('otherParam', 'A Nested Details Screen'),
    };
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Using useNavigation Hook with Class Component in React
DESCRIPTION: This snippet shows how to use the useNavigation hook with a class component in React. It wraps the class component in a functional component to access the navigation object and pass it as a prop.

LANGUAGE: javascript
CODE:
class MyBackButton extends React.Component {
  render() {
    // Get it from props
    const { navigation } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const navigation = useNavigation();

  return <MyBackButton {...props} navigation={navigation} />;
}

----------------------------------------

TITLE: Accessing and Updating Route Params in React Navigation
DESCRIPTION: Shows how to access route params from the navigation state and update them using the setParams function.

LANGUAGE: javascript
CODE:
class ProfileScreen extends React.Component {
  render() {
    return (
      <View>
        <Text>Name: {this.props.navigation.state.params.name}</Text>
        <Button
          onPress={() => this.props.navigation.setParams({ name: 'Lucy' })}
          title="Set title name to 'Lucy'"
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Class Component Integration - React Navigation
DESCRIPTION: Demonstrates how to use useNavigationState with class components by wrapping them in a function component.

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  render() {
    // Get it from props
    const { routesLength } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const routesLength = useNavigationState((state) => state.routes.length);

  return <Profile {...props} routesLength={routesLength} />;
}

----------------------------------------

TITLE: Configuring StackNavigator with Different Status Bar Styles
DESCRIPTION: This code sets up a StackNavigator with two screens that have different StatusBar configurations. The headerMode is set to 'none' to allow full control over the status bar appearance.

LANGUAGE: javascript
CODE:
export default StackNavigator(
  {
    Screen1: {
      screen: Screen1,
    },
    Screen2: {
      screen: Screen2,
    },
  },
  {
    headerMode: 'none',
  }
);

----------------------------------------

TITLE: Creating Switch Navigator in React Navigation
DESCRIPTION: Basic syntax for creating a switch navigator using createSwitchNavigator. Takes RouteConfigs and SwitchNavigatorConfig as parameters to define navigation behavior and screen configurations.

LANGUAGE: javascript
CODE:
createSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);

----------------------------------------

TITLE: Screen Options Configuration
DESCRIPTION: Demonstrates setting static options for a screen including title configuration.

LANGUAGE: jsx
CODE:
<Stack.Screen
  name="Profile"
  component={ProfileScreen}
  options={{
    title: 'Awesome app',
  }}
/>

----------------------------------------

TITLE: Basic Material Top Tabs Implementation
DESCRIPTION: Minimal example showing how to create a Material Top Tabs navigator with two screens.

LANGUAGE: javascript
CODE:
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';

const Tab = createMaterialTopTabNavigator();

function MyTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Settings" component={SettingsScreen} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Type Checking Screen Components in React Navigation with TypeScript
DESCRIPTION: This example shows how to type check a functional screen component, including its props and navigationOptions. It uses NavigationStackScreenComponent and includes type annotations for params and screenProps.

LANGUAGE: typescript
CODE:
import { NavigationStackScreenComponent } from 'react-navigation-stack';

type Params = { userId: string };

type ScreenProps = { language: string };

const ProfileScreen: NavigationStackScreenComponent<Params, ScreenProps> = (
  props
) => {
  // ...
};

ProfileScreen.navigationOptions = {
  headerTitle: 'Profile',
};

----------------------------------------

TITLE: Initial Navigation Structure with Visible Tab Bar
DESCRIPTION: Shows the initial navigation setup where the stack navigator is nested inside a tab navigator, causing the tab bar to remain visible on all screens.

LANGUAGE: javascript
CODE:
function HomeStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

function App() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Home" component={HomeStack} />
      <Tab.Screen name="Feed" component={Feed} />
      <Tab.Screen name="Notifications" component={Notifications} />
    </Tab.Navigator>
  );
}

----------------------------------------

TITLE: Navigating to a New Screen in React Navigation
DESCRIPTION: This snippet demonstrates how to navigate from a Home screen to a Details screen using the navigation prop in React Navigation. It shows the basic structure of a screen component and how to use the navigate function.

LANGUAGE: jsx
CODE:
import React from 'react';
import { Button, View, Text } from 'react-native';
import { createStackNavigator, createAppContainer } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Home Screen</Text>
        <Button
          title="Go to Details"
          onPress={() => this.props.navigation.navigate('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Multi-Screen Stack Navigator Configuration
DESCRIPTION: Extended Stack Navigator setup with two screens (Home and Details) and initial route configuration using the options object.

LANGUAGE: javascript
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
      </View>
    );
  }
}

const AppNavigator = createStackNavigator(
  {
    Home: HomeScreen,
    Details: DetailsScreen,
  },
  {
    initialRouteName: 'Home',
  }
);

----------------------------------------

TITLE: Dispatching Back Action in React Navigation
DESCRIPTION: Shows how to create and dispatch a back action using NavigationActions. This action navigates back to the previous screen, with an optional key parameter to specify the target screen to go back from.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const backAction = NavigationActions.back({
  key: 'Profile',
});
this.props.navigation.dispatch(backAction);

----------------------------------------

TITLE: Dispatching jumpTo Action in React Navigation
DESCRIPTION: This code snippet demonstrates how to import SwitchActions from react-navigation and dispatch a jumpTo action to navigate to a specific route in a switch navigator.

LANGUAGE: javascript
CODE:
import { SwitchActions } from 'react-navigation';

this.props.navigation.dispatch(SwitchActions.jumpTo({ routeName }));

----------------------------------------

TITLE: Basic Navigation Example in React Native
DESCRIPTION: Demonstrates basic usage of the navigate function to move between screens with parameters.

LANGUAGE: javascript
CODE:
class HomeScreen extends React.Component {
  render() {
    const { navigate } = this.props.navigation;

    return (
      <View>
        <Text>This is the home screen of the app</Text>
        <Button
          onPress={() => navigate('Profile', { name: 'Brent' })}
          title="Go to Brent's profile"
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Using NavigationService to Navigate in React Navigation
DESCRIPTION: This snippet demonstrates how to use the NavigationService to navigate from any JavaScript module in a React Navigation app. It imports the NavigationService and calls its navigate function with the desired route name and parameters.

LANGUAGE: javascript
CODE:
// any js module
import NavigationService from 'path-to-NavigationService.js';

// ...

NavigationService.navigate('ChatScreen', { userName: 'Lucy' });

----------------------------------------

TITLE: Configuring Tab Bar Options
DESCRIPTION: Example of customizing the tab bar appearance using tabBarOptions including styling and behavior configurations.

LANGUAGE: javascript
CODE:
tabBarOptions: {
  labelStyle: {
    fontSize: 12,
  },
  tabStyle: {
    width: 100,
  },
  style: {
    backgroundColor: 'blue',
  },
}

----------------------------------------

TITLE: Setting Params for a Route in React Navigation
DESCRIPTION: Illustrates how to create and dispatch a setParams action using NavigationActions. This action updates the params of a particular route identified by its key, merging new params into existing ones.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const setParamsAction = NavigationActions.setParams({
  params: { title: 'Hello' },
  key: 'screen-123',
});
this.props.navigation.dispatch(setParamsAction);

----------------------------------------

TITLE: Creating Material Bottom Tab Navigator in React Navigation
DESCRIPTION: Basic structure for creating a material bottom tab navigator using createMaterialBottomTabNavigator function. It takes RouteConfigs and MaterialBottomTabNavigatorConfig as parameters.

LANGUAGE: javascript
CODE:
createMaterialBottomTabNavigator(
  RouteConfigs,
  MaterialBottomTabNavigatorConfig
);

----------------------------------------

TITLE: Class Component Integration
DESCRIPTION: Demonstrates how to use useNavigationState with class components by wrapping them in a functional component

LANGUAGE: javascript
CODE:
class Profile extends React.Component {
  render() {
    // Get it from props
    const { routesLength } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const routesLength = useNavigationState((state) => state.routes.length);

  return <Profile {...props} routesLength={routesLength} />;
}

----------------------------------------

TITLE: Configuring Navigation Options for Tab Navigator in React Navigation
DESCRIPTION: Shows how to configure navigation options for a tab navigator, including header styles and tab bar labels.

LANGUAGE: javascript
CODE:
const Home = createStackNavigator(
  {
    Feed: ExampleScreen,
    Profile: ExampleScreen,
  },
  {
    defaultNavigationOptions: {
      headerTintColor: '#fff',
      headerStyle: {
        backgroundColor: '#000',
      },
    },
    navigationOptions: {
      tabBarLabel: 'Home!',
    },
  }
);

const Tabs = createBottomTabNavigator({ Home });

----------------------------------------

TITLE: Setting Params for a Route in React Navigation
DESCRIPTION: Illustrates how to create and dispatch a setParams action using NavigationActions. This action updates the params of a particular route identified by its key, merging new params into existing ones.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const setParamsAction = NavigationActions.setParams({
  params: { title: 'Hello' },
  key: 'screen-123',
});
this.props.navigation.dispatch(setParamsAction);

----------------------------------------

TITLE: Implementing Stack Navigation within Tabs using React Navigation
DESCRIPTION: This code snippet demonstrates how to implement stack navigation within each tab of a TabNavigator. It creates separate StackNavigators for Home and Settings tabs, allowing for nested navigation.

LANGUAGE: JavaScript
CODE:
import { TabNavigator, StackNavigator } from 'react-navigation';

class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Details!</Text>
      </View>
    );
  }
}

const HomeStack = StackNavigator({
  Home: { screen: HomeScreen },
  Details: { screen: DetailsScreen },
});

const SettingsStack = StackNavigator({
  Settings: { screen: SettingsScreen },
  Details: { screen: DetailsScreen },
});

export default TabNavigator(
  {
    Home: { screen: HomeStack },
    Settings: { screen: SettingsStack },
  },
  {
    /* Other configuration remains unchanged */
  }
);

----------------------------------------

TITLE: Using Props with createAppContainer in React Navigation
DESCRIPTION: This code snippet shows how to use important props when rendering an AppContainer component. It demonstrates the usage of onNavigationStateChange for tracking navigation state changes and uriPrefix for handling deep links.

LANGUAGE: javascript
CODE:
<AppContainer
  onNavigationStateChange={handleNavigationChange}
  uriPrefix="/app"
/>

----------------------------------------

TITLE: Creating Navigation Stack with Hidden Bars
DESCRIPTION: Example showing how to create bottom tab navigator and stack navigator with hidden navigation and tab bars.

LANGUAGE: jsx
CODE:
const Tabs = createBottomTabNavigator({
  ...
}, {
  tabBarComponent: () => null,
});

export default createStackNavigator({
  ...
}, {
  headerMode: 'none',
});

----------------------------------------

TITLE: Installing Expo Dependencies
DESCRIPTION: Command to install required dependencies for React Navigation in an Expo managed project

LANGUAGE: bash
CODE:
npx expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

----------------------------------------

TITLE: Creating Typed Stack Navigator
DESCRIPTION: Shows how to create a strongly-typed stack navigator using the defined parameter list.

LANGUAGE: tsx
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const RootStack = createStackNavigator<RootStackParamList>();

----------------------------------------

TITLE: Configuring Android Deep Linking in AndroidManifest
DESCRIPTION: Android manifest configuration for handling deep links and App Links.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter android:autoVerify="true">
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Configuring Material Bottom Tab Navigator
DESCRIPTION: Example of creating a Material Bottom Tab Navigator with custom configuration options, including initial route, colors, and styles.

LANGUAGE: javascript
CODE:
export default createMaterialBottomTabNavigator(
  {
    Album: { screen: Album },
    Library: { screen: Library },
    History: { screen: History },
    Cart: { screen: Cart },
  },
  {
    initialRouteName: 'Album',
    activeColor: '#f0edf6',
    inactiveColor: '#3e2465',
    barStyle: { backgroundColor: '#694fad' },
  }
);

----------------------------------------

TITLE: Handling navigation initialization in React Navigation
DESCRIPTION: This code shows how to handle navigation initialization and avoid errors when the navigation container is not ready.

LANGUAGE: javascript
CODE:
// RootNavigation.js

import * as React from 'react';

export const navigationRef = createNavigationContainerRef();

export function navigate(name, params) {
  if (navigationRef.isReady()) {
    // Perform navigation if the react navigation is ready to handle actions
    navigationRef.navigate(name, params);
  } else {
    // You can decide what to do if react navigation is not ready
    // You can ignore this, or add these actions to a queue you can call later
  }
}

----------------------------------------

TITLE: Configuring Android Deep Linking in AndroidManifest
DESCRIPTION: Android manifest configuration for handling deep links and App Links.

LANGUAGE: xml
CODE:
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter android:autoVerify="true">
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="mychat" />
    </intent-filter>
</activity>

----------------------------------------

TITLE: Implementing Redux DevTools Extension
DESCRIPTION: Example showing how to integrate Redux DevTools Extension with React Navigation for debugging purposes.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import {
  NavigationContainer,
  useNavigationContainerRef,
} from '@react-navigation/native';
import { useReduxDevToolsExtension } from '@react-navigation/devtools';

export default function App() {
  const navigationRef = useNavigationContainerRef();

  useReduxDevToolsExtension(navigationRef);

  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Defining a Custom Navigator with StackRouter in React Navigation
DESCRIPTION: This snippet demonstrates how to create a custom navigator component using the StackRouter from React Navigation. It shows the basic structure for defining a navigator with a static router property.

LANGUAGE: javascript
CODE:
class MyNavigator extends React.Component {
  static router = StackRouter(routes, config);
  ...
}

----------------------------------------

TITLE: Alternative Correct Implementation Using Static Router in React Navigation
DESCRIPTION: This snippet presents an alternative correct implementation for multiple navigators in React Navigation. It uses a static router property and threads through the navigation prop to maintain proper navigation state and interactions.

LANGUAGE: javascript
CODE:
export default App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppNavigator />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

class AuthenticationScreen extends React.Component {
  static router = AuthenticationNavigator.router;

  render() {
    return (
      <AuthenticationNavigator navigation={this.props.navigation} />
    );
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

----------------------------------------

TITLE: Drawer Navigation Action Dispatching
DESCRIPTION: Direct action dispatching methods for drawer navigation control, showing the underlying implementation of drawer navigation methods.

LANGUAGE: javascript
CODE:
this.props.navigation.dispatch(DrawerActions.openDrawer());
this.props.navigation.dispatch(DrawerActions.closeDrawer());
this.props.navigation.dispatch(DrawerActions.toggleDrawer());

----------------------------------------

TITLE: Implementing Hidden Components without Safe Area
DESCRIPTION: Example showing how to create a navigation structure with hidden header and tab bar, demonstrating the need for safe area handling.

LANGUAGE: jsx
CODE:
import * as React from 'react';
import { Text, View } from 'react-native';
import { createStaticNavigation } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createNativeStackNavigator } from '@react-navigation/native-stack';

function Demo() {
  return (
    <View
      style={{ flex: 1, justifyContent: 'space-between', alignItems: 'center' }}
    >
      <Text>This is top text.</Text>
      <Text>This is bottom text.</Text>
    </View>
  );
}

const MyTabs = createBottomTabNavigator({
  initialRouteName: 'Analytics',
  tabBar: () => null,
  screenOptions: {
    headerShown: false,
  },
  screens: {
    Analytics: Demo,
    Profile: Demo,
  },
});

----------------------------------------

TITLE: Running ESLint for Code Consistency
DESCRIPTION: Commands to run ESLint for checking and fixing code style consistency in the React Navigation project.

LANGUAGE: bash
CODE:
yarn lint

LANGUAGE: bash
CODE:
yarn lint --fix

----------------------------------------

TITLE: Example of Navigation Prop Access Error in React Navigation
DESCRIPTION: This code snippet demonstrates the common issue of attempting to access the navigation prop when it hasn't been explicitly passed to the component, resulting in an undefined error.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';

export default class MyBackButton extends React.Component {
  render() {
    // This will throw an 'undefined is not a function' exception because the navigation
    // prop is undefined.
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Drawer Navigation Control Methods
DESCRIPTION: Demonstrates different methods to control drawer navigation state including opening, closing, and toggling the drawer.

LANGUAGE: javascript
CODE:
this.props.navigation.openDrawer();
this.props.navigation.closeDrawer();

----------------------------------------

TITLE: Handling Navigation Initialization in React Navigation
DESCRIPTION: Illustrates how to handle navigation initialization and avoid errors when navigating before the navigator is ready.

LANGUAGE: jsx
CODE:
const navigationRef = createNavigationContainerRef();

function navigate(name, params) {
  if (navigationRef.isReady()) {
    // Perform navigation if the react navigation is ready to handle actions
    navigationRef.navigate(name, params);
  } else {
    // You can decide what to do if react navigation is not ready
    // You can ignore this, or add these actions to a queue you can call later
  }
}

----------------------------------------

TITLE: Installing React Navigation DevTools Package
DESCRIPTION: Command to install the @react-navigation/devtools package which provides debugging capabilities for React Navigation.

LANGUAGE: bash
CODE:
npm install @react-navigation/devtools@^6.x

----------------------------------------

TITLE: Implementing a Back Button with withNavigation in React Navigation
DESCRIPTION: This example demonstrates how to create a back button component using withNavigation. The higher order component wraps MyBackButton and passes the navigation prop, allowing the use of navigation.goBack() without directly passing the prop.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';
import { withNavigation } from 'react-navigation';

class MyBackButton extends React.Component {
  render() {
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

// withNavigation returns a component that wraps MyBackButton and passes in the
// navigation prop
export default withNavigation(MyBackButton);

----------------------------------------

TITLE: Custom Header Title Component in React Navigation
DESCRIPTION: This snippet shows how to replace the default title text with a custom component in React Navigation. It demonstrates using an Image component as the header title.

LANGUAGE: JavaScript
CODE:
class LogoTitle extends React.Component {
  render() {
    return (
      <Image
        source={require('./spiro.png')}
        style={{ width: 30, height: 30 }}
      />
    );
  }
}

class HomeScreen extends React.Component {
  static navigationOptions = {
    // headerTitle instead of title
    headerTitle: <LogoTitle />,
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Dynamic Screen Options with Navigation Prop in React Navigation
DESCRIPTION: Shows how to use a function with the options prop to access navigation props and create dynamic screen options, including custom header components.

LANGUAGE: javascript
CODE:
<Stack.Screen
  name="Home"
  component={HomeScreen}
  options={({ navigation }) => ({
    title: 'Awesome app',
    headerLeft: () => (
      <DrawerButton onPress={() => navigation.toggleDrawer()} />
    ),
  })}
/>

----------------------------------------

TITLE: Blocking Navigation Actions in React Navigation
DESCRIPTION: Shows how to prevent navigation actions based on route conditions by returning null from getStateForAction.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyStackRouter = StackRouter(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyStackRouter.router.getStateForAction;

MyStackRouter.router.getStateForAction = (action, state) => {
  if (
    state &&
    action.type === NavigationActions.BACK &&
    state.routes[state.index].params.isEditing
  ) {
    return null;
  }

  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Creating Bottom Tab Navigator - Basic Implementation
DESCRIPTION: Basic syntax for creating a bottom tab navigator with route configs and navigator configuration options.

LANGUAGE: javascript
CODE:
createBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig);

----------------------------------------

TITLE: Accessing Navigation Context in React Navigation
DESCRIPTION: Demonstrates how to access the navigation object directly using React's useContext hook with NavigationContext. This provides the same navigation object as the navigation prop or useNavigation hook.

LANGUAGE: javascript
CODE:
import { NavigationContext } from '@react-navigation/native';

function SomeComponent() {
  // We can access navigation object via context
  const navigation = React.useContext(NavigationContext);
}

----------------------------------------

TITLE: Header with Blur Background Example
DESCRIPTION: Example showing how to create a translucent header with blur effect using Expo's BlurView component.

LANGUAGE: javascript
CODE:
import { BlurView } from 'expo-blur';

<Stack.Screen
  name="Home"
  component={HomeScreen}
  options={{
    headerTransparent: true,
    headerBackground: () => (
      <BlurView tint="light" intensity={100} style={StyleSheet.absoluteFill} />
    ),
  }}
/>;

----------------------------------------

TITLE: Adding push action to RootNavigation in React Navigation
DESCRIPTION: This snippet demonstrates how to add a push action to the RootNavigation module for stack navigation.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

// ...

export function push(...args) {
  if (navigationRef.isReady()) {
    navigationRef.dispatch(StackActions.push(...args));
  }
}

----------------------------------------

TITLE: Accessing Navigation Context in React Navigation
DESCRIPTION: Demonstrates how to access the navigation object directly using React's useContext hook with NavigationContext. This provides the same navigation object as the navigation prop or useNavigation hook.

LANGUAGE: javascript
CODE:
import { NavigationContext } from '@react-navigation/native';

function SomeComponent() {
  // We can access navigation object via context
  const navigation = React.useContext(NavigationContext);
}

----------------------------------------

TITLE: Handling Nested Navigators
DESCRIPTION: Configuration for handling nested navigators in the deep linking structure.

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Home: {
      screens: {
        Profile: 'users/:id',
      },
    },
  },
};

----------------------------------------

TITLE: Updating NavigationOptions with setParams in React Navigation
DESCRIPTION: Demonstrates how to update navigationOptions from within a component using the setParams method.

LANGUAGE: javascript
CODE:
/* Inside of render() */
<Button
  title="Update the title"
  onPress={() => this.props.navigation.setParams({ otherParam: 'Updated!' })}
/>

----------------------------------------

TITLE: Overriding Shared NavigationOptions in React Navigation
DESCRIPTION: This code demonstrates how to override shared navigationOptions for a specific screen. It shows how to invert the background and tint colors for the details screen.

LANGUAGE: JavaScript
CODE:
class DetailsScreen extends React.Component {
  static navigationOptions = ({ navigation, navigationOptions }) => {
    const { params } = navigation.state;

    return {
      title: params ? params.otherParam : 'A Nested Details Screen',
      /* These values are used instead of the shared configuration! */
      headerStyle: {
        backgroundColor: navigationOptions.headerTintColor,
      },
      headerTintColor: navigationOptions.headerStyle.backgroundColor,
    };
  };

  /* render function, etc */
}

----------------------------------------

TITLE: Implementing withNavigationFocus HOC in React Navigation
DESCRIPTION: This example demonstrates how to use the withNavigationFocus higher order component to wrap a custom component. The HOC passes the isFocused prop to the wrapped component, allowing it to render different content based on the screen's focus state.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Text } 'react-native';
import { withNavigationFocus } from 'react-navigation';

class FocusStateLabel extends React.Component {
  render() {
    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;
  }
}

// withNavigationFocus returns a component that wraps FocusStateLabel and passes
// in the navigation prop
export default withNavigationFocus(FocusStateLabel);

----------------------------------------

TITLE: Class Component Integration with useFocusEffect
DESCRIPTION: Shows how to use useFocusEffect within class components by creating a separate functional component wrapper.

LANGUAGE: javascript
CODE:
function FetchUserData({ userId, onUpdate }) {
  useFocusEffect(
    React.useCallback(() => {
      const unsubscribe = API.subscribe(userId, onUpdate);

      return () => unsubscribe();
    }, [userId, onUpdate])
  );

  return null;
}

class Profile extends React.Component {
  _handleUpdate = (user) => {
    // Do something with user object
  };

  render() {
    return (
      <>
        <FetchUserData
          userId={this.props.userId}
          onUpdate={this._handleUpdate}
        />
        {/* rest of your code */}
      </>
    );
  }
}

----------------------------------------

TITLE: Implementing Status Bar Configuration in Tab Navigator Screens (React Native)
DESCRIPTION: This code shows how to handle status bar configuration in a tab navigator. It uses navigation listeners to update the status bar style when a tab becomes active.

LANGUAGE: javascript
CODE:
class Screen1 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('light-content');
      isAndroid && StatusBar.setBackgroundColor('#6a51ae');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

class Screen2 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('dark-content');
      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

----------------------------------------

TITLE: Configuring Jetifier in package.json
DESCRIPTION: JSON configuration to add jetifier to the postinstall script in package.json for older React Native versions.

LANGUAGE: json
CODE:
"scripts": {
  "postinstall": "jetifier -r"
}

----------------------------------------

TITLE: Navigating Back in React Navigation
DESCRIPTION: Shows how to use NavigationActions.back to navigate back to a previous screen, optionally specifying a key to navigate back from.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const backAction = NavigationActions.back({
  key: 'Profile',
});
this.props.navigation.dispatch(backAction);

----------------------------------------

TITLE: React Native Init URI Prefix Setup
DESCRIPTION: Basic URI prefix configuration for React Native projects initialized with react-native init.

LANGUAGE: javascript
CODE:
const SimpleApp = createAppContainer(createStackNavigator({...}));

const prefix = 'mychat://';

const MainApp = () => <SimpleApp uriPrefix={prefix} />;

----------------------------------------

TITLE: Configuring Default Navigation Options for a Tab Navigator
DESCRIPTION: This snippet demonstrates how to set default navigation options for a TabNavigator, which will apply to all screens within the navigator unless overridden.

LANGUAGE: javascript
CODE:
const MyTabNavigator = TabNavigator({
  profile: ProfileScreen,
  ...
}, {
  navigationOptions: {
    headerTintColor: 'blue',
  },
});

----------------------------------------

TITLE: Configuring Dynamic Navigation Options in React Navigation
DESCRIPTION: This example shows how to set dynamic navigation options using a function that receives props and returns an object of options. It demonstrates accessing navigation state and screenProps.

LANGUAGE: javascript
CODE:
class ProfileScreen extends React.Component {
  static navigationOptions = ({ navigation, screenProps }) => ({
    title: navigation.state.params.name + "'s Profile!",
    headerRight: <Button color={screenProps.tintColor} {...} />,
  });
  ...

----------------------------------------

TITLE: Importing Gesture Handler for Native Platforms
DESCRIPTION: Creating conditional imports for react-native-gesture-handler to optimize bundle size.

LANGUAGE: JavaScript
CODE:
// gesture-handler.native.js
import 'react-native-gesture-handler';

LANGUAGE: JavaScript
CODE:
// gesture-handler.js
// Don't import react-native-gesture-handler on web

LANGUAGE: JavaScript
CODE:
// In your entry file (e.g., index.js or App.js)
import './gesture-handler';

----------------------------------------

TITLE: Implementing NavigationEvents Component in React Navigation
DESCRIPTION: Example showing how to use the NavigationEvents component to subscribe to navigation lifecycle events including willFocus, didFocus, willBlur, and didBlur. The component automatically handles subscription and cleanup on mount/unmount.

LANGUAGE: jsx
CODE:
import React from 'react';
import { View } from 'react-native';
import { NavigationEvents } from 'react-navigation';

const MyScreen = () => (
  <View>
    <NavigationEvents
      onWillFocus={(payload) => console.log('will focus', payload)}
      onDidFocus={(payload) => console.log('did focus', payload)}
      onWillBlur={(payload) => console.log('will blur', payload)}
      onDidBlur={(payload) => console.log('did blur', payload)}
    />
    {/*
      Your view code
    */}
  </View>
);

export default MyScreen;

----------------------------------------

TITLE: Comprehensive Route Parameter Type Definitions
DESCRIPTION: Demonstrates defining types for multiple routes with different parameter requirements.

LANGUAGE: tsx
CODE:
type RootStackParamList = {
  Home: undefined;
  Profile: { userId: string };
  Feed: { sort: 'latest' | 'top' } | undefined;
};

----------------------------------------

TITLE: iOS Pod Installation
DESCRIPTION: Commands to install iOS dependencies using CocoaPods.

LANGUAGE: bash
CODE:
cd ios
pod install
cd ..

----------------------------------------

TITLE: Setting Route Params with NavigationActions in React Navigation
DESCRIPTION: This snippet demonstrates how to use the SetParams action to update the parameters of a specific route. It requires specifying the new params and the key of the target route.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const setParamsAction = NavigationActions.setParams({
  params: { title: 'Hello' },
  key: 'screen-123',
});
this.props.navigation.dispatch(setParamsAction);

----------------------------------------

TITLE: Implementing NavigationService for React Navigation
DESCRIPTION: This code defines the NavigationService module, which provides functions to set the top-level navigator and navigate between routes. It uses the NavigationActions from react-navigation to dispatch navigation actions.

LANGUAGE: javascript
CODE:
// NavigationService.js

import { NavigationActions } from 'react-navigation';

let _navigator;

function setTopLevelNavigator(navigatorRef) {
  _navigator = navigatorRef;
}

function navigate(routeName, params) {
  _navigator.dispatch(
    NavigationActions.navigate({
      routeName,
      params,
    })
  );
}

// add other navigation functions that you need and export them

export default {
  navigate,
  setTopLevelNavigator,
};

----------------------------------------

TITLE: Navigating to the same route multiple times in React Navigation
DESCRIPTION: This code shows how to navigate to the Details screen multiple times from within the Details screen itself, demonstrating that each navigation action adds a new screen to the stack.

LANGUAGE: jsx
CODE:
class DetailsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text>Details Screen</Text>
        <Button
          title="Go to Details... again"
          onPress={() => this.props.navigation.navigate('Details')}
        />
      </View>
    );
  }
}

----------------------------------------

TITLE: Navigating to a Route using NavigationActions in React Navigation
DESCRIPTION: This snippet demonstrates how to use the Navigate action to navigate to a specific route. It includes options for setting route parameters and nested navigation actions.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const navigateAction = NavigationActions.navigate({
  routeName: 'Profile',

  params: {},

  action: NavigationActions.navigate({ routeName: 'SubProfileRoute' }),
});

this.props.navigation.dispatch(navigateAction);

----------------------------------------

TITLE: Adding Stack Actions to RootNavigation in React Navigation
DESCRIPTION: Demonstrates how to add additional navigation actions, such as push, to the RootNavigation module.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

// ...

export function push(...args) {
  if (navigationRef.isReady()) {
    navigationRef.dispatch(StackActions.push(...args));
  }
}

----------------------------------------

TITLE: Using Navigation Service in React Navigation Components
DESCRIPTION: Demonstrates how to use the NavigationService to perform navigation from any JavaScript module in the application.

LANGUAGE: javascript
CODE:
// any js module
import NavigationService from 'path-to-NavigationService.js';

// ...

NavigationService.navigate('ChatScreen', { userName: 'Lucy' });

----------------------------------------

TITLE: Pushing New Route to Navigation Stack
DESCRIPTION: Example of using StackActions.push() to add a new route to the top of the navigation stack with parameters.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

const pushAction = StackActions.push({
  routeName: 'Profile',
  params: {
    myUserId: 9,
  },
});

this.props.navigation.dispatch(pushAction);

----------------------------------------

TITLE: Using SafeAreaView to Fix iPhone X Layout Issues in React Navigation
DESCRIPTION: This snippet shows how to use SafeAreaView from react-navigation to properly handle layout on iPhone X. It wraps the content in SafeAreaView to prevent it from being hidden behind hardware elements.

LANGUAGE: javascript
CODE:
import { SafeAreaView } from 'react-navigation';

class App extends Component {
  render() {
    return (
      <SafeAreaView style={styles.container}>
        <Text style={styles.paragraph}>This is top text.</Text>
        <Text style={styles.paragraph}>This is bottom text.</Text>
      </SafeAreaView>
    );
  }
}

----------------------------------------

TITLE: Creating a Basic Drawer Navigator
DESCRIPTION: Example of how to create a simple Drawer Navigator with two screens.

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  return (
    <Drawer.Navigator>
      <Drawer.Screen name="Feed" component={Feed} />
      <Drawer.Screen name="Article" component={Article} />
    </Drawer.Navigator>
  );
}

----------------------------------------

TITLE: Creating a Basic Drawer Navigator
DESCRIPTION: Example of how to create a simple Drawer Navigator with two screens.

LANGUAGE: javascript
CODE:
import { createDrawerNavigator } from '@react-navigation/drawer';

const Drawer = createDrawerNavigator();

function MyDrawer() {
  return (
    <Drawer.Navigator>
      <Drawer.Screen name="Feed" component={Feed} />
      <Drawer.Screen name="Article" component={Article} />
    </Drawer.Navigator>
  );
}

----------------------------------------

TITLE: Using Link Component with Screen Names
DESCRIPTION: Example of using the Link component with screen names and params in React Navigation 6.

LANGUAGE: javascript
CODE:
<Link
  to={{
    screen: 'Profile',
    params: { id: 'jane' },
  }}
>
  Go to Jane's profile
</Link>

----------------------------------------

TITLE: Basic Stack Navigator Creation
DESCRIPTION: Basic example of importing and creating a stack navigator using createStackNavigator.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from 'react-navigation-stack';

createStackNavigator(RouteConfigs, StackNavigatorConfig);

----------------------------------------

TITLE: Server-Side Rendering with React Navigation
DESCRIPTION: This snippet illustrates how to handle server-side rendering with React Navigation. It uses handleServerRequest to get navigation props and title, then renders the app to a string and sends it as an HTML response.

LANGUAGE: javascript
CODE:
expressApp.get('/*', (req, res) => {
  const { path, query } = req;

  const { navigation, title, options } = handleServerRequest(
    AppNavigator.router,
    path,
    query
  );

  const markup = renderToString(<AppNavigator navigation={navigation} />);

  res.send(
    `<!doctype html>
  <html lang="">
  <head>
    <title>${title}</title>
    <script src="main.js"></script>
  </head>
  <body>
    <div id="root">${markup}</div>
  </body>
</html>`
  );
});

----------------------------------------

TITLE: Implementing Root App Component with Localization
DESCRIPTION: Creates a root App component that manages locale state and provides translation functions through screenProps. Includes methods for setting locale and translating text.

LANGUAGE: jsx
CODE:
export default class App extends React.Component {
  state = {
    locale: Localization.locale,
  };

  setLocale = (locale) => {
    this.setState({ locale });
  };

  t = (scope, options) => {
    return i18n.t(scope, { locale: this.state.locale, ...options });
  };

  render() {
    return (
      <AppContainer
        screenProps={{
          t: this.t,
          locale: this.state.locale,
          setLocale: this.setLocale,
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Animated Drawer Content
DESCRIPTION: Implementation of animated drawer content using drawerOpenProgress

LANGUAGE: javascript
CODE:
const CustomDrawerContentComponent = (props) => {
  const translateX = Animated.interpolate(drawerOpenProgress, {
    inputRange: [0, 1],
    outputRange: [-100, 0],
  });

  return (
    <Animated.View style={{ transform: [{ translateX }] }}>
      {/* ... drawer contents */}
    </Animated.View>
  );
};

----------------------------------------

TITLE: Customizing Transitions in Animated Switch Navigator for React Navigation
DESCRIPTION: This example shows how to customize the transition between screens in an animated switch navigator using the Transition API from react-native-reanimated. It demonstrates a combination of slide and fade transitions.

LANGUAGE: jsx
CODE:
import createAnimatedSwitchNavigator from 'react-navigation-animated-switch';
import { Transition } from 'react-native-reanimated';

const MySwitch = createAnimatedSwitchNavigator(
  {
    Home: HomeScreen,
    Other: OtherScreen,
  },
  {
    // The previous screen will slide to the bottom while the next screen will fade in
    transition: (
      <Transition.Together>
        <Transition.Out
          type="slide-bottom"
          durationMs={400}
          interpolation="easeIn"
        />
        <Transition.In type="fade" durationMs={500} />
      </Transition.Together>
    ),
  }
);

----------------------------------------

TITLE: Navigating to the First Screen in the Stack with React Navigation
DESCRIPTION: Demonstrates how to use the popToTop action to return to the first screen in the stack, dismissing all other screens.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

this.props.navigation.dispatch(StackActions.popToTop());

----------------------------------------

TITLE: Implementing Basic Tab Navigation with React Navigation in React Native
DESCRIPTION: This snippet demonstrates a minimal example of tab-based navigation using React Navigation. It creates two screens (Home and Settings) and sets up a TabNavigator to switch between them.

LANGUAGE: JavaScript
CODE:
import React from 'react';
import { Text, View } from 'react-native';
import { TabNavigator } from 'react-navigation';

class HomeScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Home!</Text>
      </View>
    );
  }
}

class SettingsScreen extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>Settings!</Text>
      </View>
    );
  }
}

export default TabNavigator({
  Home: { screen: HomeScreen },
  Settings: { screen: SettingsScreen },
});

----------------------------------------

TITLE: Installing React Navigation Tabs Package
DESCRIPTION: Command to install the react-navigation-tabs package using npm or yarn.

LANGUAGE: bash
CODE:
npm install react-navigation-tabs

----------------------------------------

TITLE: Using Connected Component in Screen Options
DESCRIPTION: Demonstrates how to use a Redux-connected component in the navigation screen options.

LANGUAGE: javascript
CODE:
<Screen
  name="Test"
  component={TestScreen}
  options={{ title: () => <CounterContainer /> }}
/>

----------------------------------------

TITLE: Implementing Tab Navigator with Dynamic Status Bar in React Native
DESCRIPTION: This snippet shows how to create a tab navigator with screens that dynamically update the status bar configuration when they become active. It uses React Navigation's event system to manage status bar changes.

LANGUAGE: javascript
CODE:
class Screen1 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('light-content');
      isAndroid && StatusBar.setBackgroundColor('#6a51ae');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

class Screen2 extends React.Component {
  componentDidMount() {
    this._navListener = this.props.navigation.addListener('didFocus', () => {
      StatusBar.setBarStyle('dark-content');
      isAndroid && StatusBar.setBackgroundColor('#ecf0f1');
    });
  }

  componentWillUnmount() {
    this._navListener.remove();
  }

  ...
}

----------------------------------------

TITLE: Configuring Stack Navigator in React Navigation 5
DESCRIPTION: Demonstrates the new component-based configuration for stack navigator in React Navigation 5. It shows how to set up a navigator with initial route and screen options.

LANGUAGE: javascript
CODE:
function App() {
  return (
    <Stack.Navigator initialRouteName="home">
      <Stack.Screen name="settings" component={Settings} />
      <Stack.Screen
        name="profile"
        component={Profile}
        options={{ title: 'John Doe' }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Installing React Navigation 4.x Packages
DESCRIPTION: Command to install react-navigation and its core navigator packages including stack, tabs, and drawer navigators.

LANGUAGE: bash
CODE:
npm install react-navigation react-navigation-stack@^1.7.3 react-navigation-tabs@^1.2.0 react-navigation-drawer@^1.4.0

----------------------------------------

TITLE: Implementing Navigation Service for React Navigation
DESCRIPTION: Creates a NavigationService module that provides navigation functions using the navigator reference. Includes functions for setting the navigator reference and performing navigation actions.

LANGUAGE: javascript
CODE:
// NavigationService.js

import { NavigationActions } from 'react-navigation';

let _navigator;

function setTopLevelNavigator(navigatorRef) {
  _navigator = navigatorRef;
}

function navigate(routeName, params) {
  _navigator.dispatch(
    NavigationActions.navigate({
      routeName,
      params,
    })
  );
}

// add other navigation functions that you need and export them

export default {
  navigate,
  setTopLevelNavigator,
};

----------------------------------------

TITLE: Popping to Top of Stack with StackActions in React Navigation
DESCRIPTION: Shows how to use the popToTop action from StackActions, which navigates back to the first screen in the stack, dismissing all other screens.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

navigation.dispatch(StackActions.popToTop());

----------------------------------------

TITLE: Customized Tab Navigation with Icons
DESCRIPTION: Shows how to customize tab navigation appearance with icons and colors using Ionicons.

LANGUAGE: jsx
CODE:
import Ionicons from 'react-native-vector-icons/Ionicons';
import { createAppContainer } from 'react-navigation';
import { createBottomTabNavigator } from 'react-navigation-tabs';

export default createBottomTabNavigator(
  {
    Home: HomeScreen,
    Settings: SettingsScreen,
  },
  {
    defaultNavigationOptions: ({ navigation }) => ({
      tabBarIcon: ({ focused, horizontal, tintColor }) => {
        const { routeName } = navigation.state;
        let IconComponent = Ionicons;
        let iconName;
        if (routeName === 'Home') {
          iconName = focused
            ? 'ios-information-circle'
            : 'ios-information-circle-outline';
          IconComponent = HomeIconWithBadge;
        } else if (routeName === 'Settings') {
          iconName = focused ? 'ios-list-box' : 'ios-list';
        }
        return <IconComponent name={iconName} size={25} color={tintColor} />;
      },
    }),
    tabBarOptions: {
      activeTintColor: 'tomato',
      inactiveTintColor: 'gray',
    },
  }
);

----------------------------------------

TITLE: Installing React Navigation Stack Package
DESCRIPTION: Command to install the react-navigation-stack package version 1.10.3 or higher using npm.

LANGUAGE: bash
CODE:
npm install react-navigation-stack@^1.10.3

----------------------------------------

TITLE: Installing Expo Dependencies
DESCRIPTION: Command to install required dependencies for Expo managed projects.

LANGUAGE: bash
CODE:
npx expo install react-native-screens react-native-safe-area-context

----------------------------------------

TITLE: Configuring Drawer Navigator Routes
DESCRIPTION: Basic drawer navigator configuration with two screens.

LANGUAGE: jsx
CODE:
export default createDrawerNavigator({
  Screen1: {
    screen: Screen1,
  },
  Screen2: {
    screen: Screen2,
  },
});

----------------------------------------

TITLE: Updating Screen Options with setOptions in React Navigation 5
DESCRIPTION: Shows how to dynamically update screen options using the new setOptions method on the navigation prop. This example adds a custom header right button.

LANGUAGE: javascript
CODE:
navigation.setOptions({
  headerRight: () => (
    <DoneButton
      onPress={async () => {
        await saveNote();
        navigation.replace('Notes');
      }}
    />
  ),
});

----------------------------------------

TITLE: Installing Missing Dependency
DESCRIPTION: Command to install a missing npm package dependency in your project.

LANGUAGE: bash
CODE:
npm install name-of-the-module

----------------------------------------

TITLE: Customizing SafeAreaView Edges
DESCRIPTION: Example showing how to customize which edges receive safe area padding using the edges prop.

LANGUAGE: jsx
CODE:
<SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>
  <Text style={styles.paragraph}>This is top text.</Text>
  <Text style={styles.paragraph}>This is bottom text.</Text>
</SafeAreaView>

----------------------------------------

TITLE: Configuring Tab and Stack Navigators in React Navigation
DESCRIPTION: This snippet demonstrates how to set up a Tab Navigator with two tabs, each containing a Stack Navigator with multiple screens. It shows the structure for creating a complex navigation hierarchy.

LANGUAGE: jsx
CODE:
function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="First">
          {() => (
            <SettingsStack.Navigator>
              <SettingsStack.Screen
                name="Settings"
                component={SettingsScreen}
              />
              <SettingsStack.Screen name="Profile" component={ProfileScreen} />
            </SettingsStack.Navigator>
          )}
        </Tab.Screen>
        <Tab.Screen name="Second">
          {() => (
            <HomeStack.Navigator>
              <HomeStack.Screen name="Home" component={HomeScreen} />
              <HomeStack.Screen name="Details" component={DetailsScreen} />
            </HomeStack.Navigator>
          )}
        </Tab.Screen>
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing Custom Android Back Button Handler in React Component
DESCRIPTION: React component implementation showing how to handle Android hardware back button events using BackHandler from react-native. The code demonstrates managing selection mode state and preventing default navigation behavior when needed. Uses componentDidMount and componentWillUnmount lifecycle methods to properly add and remove event listeners.

LANGUAGE: javascript
CODE:
import React from 'react';
import { BackHandler } from 'react-native';

class ScreenWithCustomBackBehavior extends React.Component {
  componentDidMount() {
    BackHandler.addEventListener(
      'hardwareBackPress',
      this.handleBackButtonPressAndroid
    );
  }

  componentWillUnmount() {
    BackHandler.removeEventListener(
      'hardwareBackPress',
      this.handleBackButtonPressAndroid
    );
  }

  handleBackButtonPressAndroid = () => {
    if (!this.props.navigation.isFocused()) {
      // The screen is not focused, so don't do anything
      return false;
    }

    if (this.isSelectionModeEnabled()) {
      this.disableSelectionMode();

      // We have handled the back button
      // Return `true` to prevent react-navigation from handling it
      return true;
    } else {
      return false;
    }
  };

  render() {
    // ...
  }
}

----------------------------------------

TITLE: Accessing Navigation Props Without withNavigation
DESCRIPTION: Example showing incorrect usage of navigation props without proper passing, resulting in an undefined error when attempting to use navigation.goBack()

LANGUAGE: javascript
CODE:
import React from 'react';
import { Button } from 'react-native';

export default class MyBackButton extends React.Component {
  render() {
    // This will throw an 'undefined is not a function' exception because the navigation
    // prop is undefined.
    return (
      <Button
        title="Back"
        onPress={() => {
          this.props.navigation.goBack();
        }}
      />
    );
  }
}

----------------------------------------

TITLE: Updating Header Options with SetOptions
DESCRIPTION: Example of updating header options dynamically using navigation.setOptions.

LANGUAGE: javascript
CODE:
<Button
  title="Update the title"
  onPress={() => navigation.setOptions({ title: 'Updated!' })}
/>

----------------------------------------

TITLE: Basic Navigation Button Component with Props
DESCRIPTION: Example of a button component that requires navigation prop to be passed explicitly for navigation functionality.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { Button } from 'react-native';

function GoToButton({ navigation, screenName }) {
  return (
    <Button
      title={`Go to ${screenName}`}
      onPress={() => navigation.navigate(screenName)}
    />
  );
}

----------------------------------------

TITLE: Using ScrollPager with Material Top Tab Navigator
DESCRIPTION: Demonstrates how to use a ScrollPager with the Material Top Tab Navigator as an alternative to the default pager.

LANGUAGE: javascript
CODE:
import { ScrollPager } from 'react-native-tab-view';

// ...

<Tab.Navigator pager={props => <ScrollPager {...props} />}>
  {...}
</Tab.Navigator>

----------------------------------------

TITLE: React Navigation Component Properties Example
DESCRIPTION: Example showing the transition from using route.params to direct props mapping with react-navigation-props-mapper

LANGUAGE: javascript
CODE:
// Before
const user = this.props.route.params.activeUser

// After
const user = this.props.activeUser

----------------------------------------

TITLE: Wrapping App with NavigationContainer in React Navigation 5.x
DESCRIPTION: In React Navigation 5.x, the app must be wrapped with a NavigationContainer component to provide navigation context.

LANGUAGE: javascript
CODE:
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return <NavigationContainer>{/*...*/}</NavigationContainer>;
}

----------------------------------------

TITLE: 404 Not Found Screen Implementation
DESCRIPTION: Implementation of a NotFound screen component that sets appropriate status code using context.

LANGUAGE: javascript
CODE:
function NotFound() {
  const status = React.useContext(StatusCodeContext);

  if (status) {
    staus.code = 404;
  }

  return (
    <View>
      <Text>Oops! This URL doesn't exist.</Text>
    </View>
  );
}

----------------------------------------

TITLE: Handling Android Back Button with Redux Navigation
DESCRIPTION: React component that handles the Android hardware back button press in a Redux-integrated React Navigation setup.

LANGUAGE: javascript
CODE:
import React from 'react';
import { BackHandler } from 'react-native';
import { addNavigationHelpers, NavigationActions } from 'react-navigation';

const AppNavigation = TabNavigator({
  Home: { screen: HomeScreen },
  Settings: { screen: SettingScreen },
});

class ReduxNavigation extends React.Component {
  componentDidMount() {
    BackHandler.addEventListener('hardwareBackPress', this.onBackPress);
  }
  componentWillUnmount() {
    BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);
  }
  onBackPress = () => {
    const { dispatch, nav } = this.props;
    if (nav.index === 0) {
      return false;
    }
    dispatch(NavigationActions.back());
    return true;
  };

  render() {
    const { dispatch, nav } = this.props;
    const navigation = addNavigationHelpers({
      dispatch,
      state: nav,
      addListener,
    });

    return <AppNavigation navigation={navigation} />;
  }
}

----------------------------------------

TITLE: Importing Drawer Navigator in React Navigation
DESCRIPTION: Illustrates the import of createDrawerNavigator function. This navigator provides a drawer that slides in from the left of the screen.

LANGUAGE: markdown
CODE:
[createDrawerNavigator](drawer-navigator.md)

----------------------------------------

TITLE: Accessing Route Properties in React Navigation Screen Component
DESCRIPTION: This snippet demonstrates how to use the 'route' prop in a React Navigation screen component. It shows how to access the 'name' property of the route object within a functional component.

LANGUAGE: javascript
CODE:
function ProfileScreen({ route }) {
  return (
    <View>
      <Text>This is the profile screen of the app</Text>
      <Text>{route.name}</Text>
    </View>
  );
}

----------------------------------------

TITLE: Adding TypeScript Type Definitions for Navigation
DESCRIPTION: Defines TypeScript interfaces and types for navigation props and routes in the authentication flow.

LANGUAGE: typescript
CODE:
import { RouteProp } from '@react-navigation/core';
import { StackNavigationProp } from '@react-navigation/stack';
import { AppRoute } from './app-routes';

type AuthNavigatorParams = {
  [AppRoute.SIGN_IN]: undefined;
  [AppRoute.SIGN_UP]: undefined;
  [AppRoute.RESET_PASSWORD]: undefined;
}

export interface SignInScreenProps {
  navigation: StackNavigationProp<AuthNavigatorParams, AppRoute.SIGN_IN>;
  route: RouteProp<AuthNavigatorParams, AppRoute.SIGN_IN>;
}

----------------------------------------

TITLE: Handling Shared Screens in React Navigation Auth Flow
DESCRIPTION: Demonstrates how to handle shared screens between authenticated and non-authenticated states using the navigationKey prop.

LANGUAGE: jsx
CODE:
<>
  {isSignedIn ? (
    <>
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </>
  ) : (
    <>
      <Stack.Screen name="SignIn" component={SignInScreen} />
      <Stack.Screen name="SignUp" component={SignUpScreen} />
    </>
  )}
  <Stack.Screen
    navigationKey={isSignedIn ? 'user' : 'guest'}
    name="Help"
    component={HelpScreen}
  />
</>

----------------------------------------

TITLE: Implementing Screen Tracking with onNavigationStateChange in React Navigation
DESCRIPTION: This snippet shows how to track screen views using the onNavigationStateChange prop of the navigation container. It uses the GoogleAnalyticsTracker from react-native-google-analytics-bridge to send screen view data to Google Analytics.

LANGUAGE: javascript
CODE:
import { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';

const tracker = new GoogleAnalyticsTracker(GA_TRACKING_ID);

// gets the current screen from navigation state
function getCurrentRouteName(navigationState) {
  if (!navigationState) {
    return null;
  }
  const route = navigationState.routes[navigationState.index];
  // dive into nested navigators
  if (route.routes) {
    return getCurrentRouteName(route);
  }
  return route.routeName;
}

const AppNavigator = StackNavigator(AppRouteConfigs);

export default () => (
  <AppNavigator
    onNavigationStateChange={(prevState, currentState) => {
      const currentScreen = getCurrentRouteName(currentState);
      const prevScreen = getCurrentRouteName(prevState);

      if (prevScreen !== currentScreen) {
        // the line below uses the Google Analytics tracker
        // change the tracker here to use other Mobile analytics SDK.
        tracker.trackScreenView(currentScreen);
      }
    }}
  />
);

----------------------------------------

TITLE: Using NavigationService in React Navigation App
DESCRIPTION: This snippet shows how to use the NavigationService to navigate within any JavaScript module in a React Navigation app. It demonstrates importing the service and calling the navigate function with route name and parameters.

LANGUAGE: javascript
CODE:
// any js module
import NavigationService from 'path-to-NavigationService.js';

// ...

NavigationService.navigate('ChatScreen', { userName: 'Lucy' });

----------------------------------------

TITLE: Advanced Native Stack Navigator Configuration
DESCRIPTION: Complete example demonstrating advanced stack navigator configuration with custom styling and screen options.

LANGUAGE: javascript
CODE:
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerTintColor: 'white',
        headerStyle: { backgroundColor: 'tomato' },
      }}
    >
      <Stack.Screen
        name="Home"
        component={Home}
        options={{
          title: 'Awesome app',
        }}
      />
      <Stack.Screen
        name="Profile"
        component={Profile}
        options={{
          title: 'My profile',
        }}
      />
      <Stack.Screen
        name="Settings"
        component={Settings}
        options={{
          gestureEnabled: false,
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Stack Navigator with Deep Link Path Configuration
DESCRIPTION: Configuration of stack navigator with path parameter for deep linking to chat screen.

LANGUAGE: javascript
CODE:
const SimpleApp = StackNavigator({
  Home: { screen: HomeScreen },
  Chat: {
    screen: ChatScreen,
    path: 'chat/:user',
  },
});

----------------------------------------

TITLE: Advanced Native Stack Navigator Configuration
DESCRIPTION: Complete example demonstrating advanced stack navigator configuration with custom styling and screen options.

LANGUAGE: javascript
CODE:
import { createNativeStackNavigator } from '@react-navigation/native-stack';

const Stack = createNativeStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerTintColor: 'white',
        headerStyle: { backgroundColor: 'tomato' },
      }}
    >
      <Stack.Screen
        name="Home"
        component={Home}
        options={{
          title: 'Awesome app',
        }}
      />
      <Stack.Screen
        name="Profile"
        component={Profile}
        options={{
          title: 'My profile',
        }}
      />
      <Stack.Screen
        name="Settings"
        component={Settings}
        options={{
          gestureEnabled: false,
        }}
      />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Importing Bottom Tab Navigator in React Navigation
DESCRIPTION: Demonstrates the import of createBottomTabNavigator function. This navigator renders a tab bar for switching between several screens.

LANGUAGE: markdown
CODE:
[`createBottomTabNavigator`](bottom-tab-navigator.md)

----------------------------------------

TITLE: Stack in Tab Navigator Options Example
DESCRIPTION: Demonstrates incorrect implementation of tab navigator options when set on nested stack navigator screens.

LANGUAGE: javascript
CODE:
const Tab = createTabNavigator();
const HomeStack = createNativeStackNavigator();
const SettingsStack = createNativeStackNavigator();

function HomeStackScreen() {
  return (
    <HomeStack.Navigator>
      <HomeStack.Screen
        name="A"
        component={A}
        options={{ tabBarLabel: 'Home!' }}
      />
    </HomeStack.Navigator>
  );
}

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen
        name="B"
        component={B}
        options={{ tabBarLabel: 'Settings!' }}
      />
    </SettingsStack.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeStackScreen} />
        <Tab.Screen name="Settings" component={SettingsStackScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Accessing Complete Navigation State
DESCRIPTION: Shows how to access the complete navigation state object using useNavigationState hook

LANGUAGE: javascript
CODE:
const state = useNavigationState((state) => state);

----------------------------------------

TITLE: Navigating with Keys in React Navigation 2.0
DESCRIPTION: Demonstrates how to use keys when navigating to a route in React Navigation 2.0. This approach allows for more precise navigation control.

LANGUAGE: javascript
CODE:
navigate({routeName: 'MyRoute', key: data.uniqueId, params: data})

----------------------------------------

TITLE: Using forceInset with SafeAreaView
DESCRIPTION: Example showing how to customize SafeAreaView padding behavior using forceInset prop

LANGUAGE: jsx
CODE:
<SafeAreaView style={styles.container} forceInset={{ bottom: 'never' }}>
  <Text style={styles.paragraph}>This is top text.</Text>
  <Text style={styles.paragraph}>This is bottom text.</Text>
</SafeAreaView>

----------------------------------------

TITLE: Customizing param parsing and serialization
DESCRIPTION: Example of how to customize param parsing and serialization for a specific route

LANGUAGE: javascript
CODE:
const config = {
  screens: {
    Chat: {
      path: 'chat/:date',
      parse: {
        date: (date) => new Date(date).getTime(),
      },
      stringify: {
        date: (date) => {
          const d = new Date(date);
          return d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();
        },
      },
    },
  },
};

----------------------------------------

TITLE: Setting up NavigationContainer with ref in React Navigation
DESCRIPTION: This snippet demonstrates how to set up a NavigationContainer with a ref in the main App component. The ref is used to access the root navigation object.

LANGUAGE: javascript
CODE:
// App.js

import { NavigationContainer } from '@react-navigation/native';
import { navigationRef } from './RootNavigation';

export default function App() {
  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Implementing URI Prefix with Expo Linking
DESCRIPTION: Sets up the navigation container with proper URI prefix handling using Expo's Linking API.

LANGUAGE: javascript
CODE:
import * as Linking from 'expo-linking';

const prefix = Linking.createURL('/');

function App() {
  const linking = {
    prefixes: [prefix],
  };

  return (
    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>
      {/* content */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Running and Installing NavigationPlayground Example
DESCRIPTION: Commands to install dependencies and run the NavigationPlayground example app for manual integration testing.

LANGUAGE: bash
CODE:
yarn install
cd examples/NavigationPlayground
yarn install
yarn start

----------------------------------------

TITLE: Dynamic Header Title Based on Child Navigator State
DESCRIPTION: Demonstrates how to set parent navigator options based on child navigator state using getFocusedRouteNameFromRoute helper.

LANGUAGE: javascript
CODE:
import { getFocusedRouteNameFromRoute } from '@react-navigation/native';

function getHeaderTitle(route) {
  const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';

  switch (routeName) {
    case 'Feed':
      return 'News feed';
    case 'Profile':
      return 'My profile';
    case 'Account':
      return 'My account';
  }
}

----------------------------------------

TITLE: Implementing Transitioner in React Navigation
DESCRIPTION: Example of how to use the Transitioner component in a React Navigation setup. It demonstrates the basic structure and required props.

LANGUAGE: jsx
CODE:
class MyNavView extends Component {
  ...
  render() {
    return (
      <Transitioner
        configureTransition={this._configureTransition}
        navigation={this.props.navigation}
        render={this._render}
        onTransitionStart={this.onTransitionStart}
        onTransitionEnd={this.onTransitionEnd}
      />
    );
}

----------------------------------------

TITLE: Importing createAnimatedSwitchNavigator in React Navigation
DESCRIPTION: This snippet shows how to import and use createAnimatedSwitchNavigator. It defines the basic API structure for creating an animated switch navigator.

LANGUAGE: javascript
CODE:
import createAnimatedSwitchNavigator from 'react-navigation-animated-switch';

createAnimatedSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);

----------------------------------------

TITLE: Installing React Navigation 6.x Dependencies
DESCRIPTION: Command to install the prerelease version of React Navigation 6.x core and stack navigator packages using npm.

LANGUAGE: bash
CODE:
npm install @react-navigation/native@^6.x @react-navigation/stack@^6.x

----------------------------------------

TITLE: Configuring Static Routes in React Navigation
DESCRIPTION: Example demonstrating the static route configuration requirement in React Navigation using createDrawerNavigator, createStackNavigator, and createSwitchNavigator. Shows basic app structure with authentication and friends navigation setup.

LANGUAGE: javascript
CODE:
const FriendsNavigator = createDrawerNavigator({
  Feed: FeedScreen,
  FriendList: FriendListScreen,
});

const AuthNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});

const AppNavigator = createSwitchNavigator({
  App: FriendsNavigator,
  Auth: AuthNavigator,
});

const AppContainer = createAppContainer(AppNavigator);

export default class MyApp extends React.Component {
  render() {
    return <AppContainer />;
  }
}

----------------------------------------

TITLE: Basic Stack Navigator Usage
DESCRIPTION: Example of creating a basic Stack Navigator with multiple screens.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Notifications" component={Notifications} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Adding stack navigation actions in React Navigation
DESCRIPTION: This snippet shows how to add additional navigation actions, such as push, to the RootNavigation module for stack navigation.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

export function push(...args) {
  navigationRef.current?.dispatch(StackActions.push(...args));
}

----------------------------------------

TITLE: Configuring iOS AppDelegate for Deep Linking
DESCRIPTION: Modifies the iOS AppDelegate to handle incoming app links and Universal Links.

LANGUAGE: objc
CODE:
// Add the header at the top of the file:
#import <React/RCTLinkingManager.h>

// Add this inside `@implementation AppDelegate` above `@end`:
- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

// For Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity
 restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
 return [RCTLinkingManager application:application
                  continueUserActivity:userActivity
                    restorationHandler:restorationHandler];
}

----------------------------------------

TITLE: Basic Stack Navigator Usage
DESCRIPTION: Example of creating a basic Stack Navigator with multiple screens.

LANGUAGE: javascript
CODE:
import { createStackNavigator } from '@react-navigation/stack';

const Stack = createStackNavigator();

function MyStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Notifications" component={Notifications} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Building Documentation for Website
DESCRIPTION: Command to build the documentation for the React Navigation website after making changes to the docs directory.

LANGUAGE: bash
CODE:
yarn build-docs

----------------------------------------

TITLE: Replacing Specific Routes with Source and Target in React Navigation
DESCRIPTION: Shows how to replace a specific route by adding source and target properties to the replace action. This allows targeting particular routes in the navigation stack.

LANGUAGE: javascript
CODE:
import { StackActions } from '@react-navigation/native';

navigation.dispatch({
  ...StackActions.replace('Profile', {
    user: 'jane',
  }),
  source: route.key,
  target: navigation.getState().key,
});

----------------------------------------

TITLE: Navigation Warning Suppression
DESCRIPTION: Code to ignore non-serializable navigation state warnings using LogBox.

LANGUAGE: javascript
CODE:
import { LogBox } from 'react-native';

LogBox.ignoreLogs([
  'Non-serializable values were found in the navigation state',
]);

----------------------------------------

TITLE: Configuring Default Navigation Options in React Navigation 3.0
DESCRIPTION: Shows how to set default navigation options for screens within a navigator using the new defaultNavigationOptions property, which replaces the previous navigationOptions in navigator configuration.

LANGUAGE: javascript
CODE:
const Home = createStackNavigator(
  {
    Feed: ExampleScreen,
    Profile: ExampleScreen,
  },
  {
    defaultNavigationOptions: {
      headerTintColor: '#fff',
      headerStyle: {
        backgroundColor: '#000',
      },
    },
  }
);

----------------------------------------

TITLE: Setting up React Navigation Development Environment
DESCRIPTION: Commands to fork and set up a local development environment for React Navigation, including cloning the repository and installing dependencies.

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/navigation-ex.git
cd navigation-ex
git remote add upstream https://github.com/react-navigation/react-navigation.git
yarn

----------------------------------------

TITLE: Creating a Drawer Navigator with Custom Content
DESCRIPTION: Implements a drawer navigator using @react-navigation/drawer and custom drawer content using React Native Paper components.

LANGUAGE: jsx
CODE:
import React from 'react';
import { View, StyleSheet } from 'react-native';
import {
  DrawerItem,
  DrawerContentScrollView,
} from '@react-navigation/drawer';
import {
  useTheme,
  Avatar,
  Title,
  Caption,
  Paragraph,
  Drawer,
  Text,
  TouchableRipple,
  Switch,
} from 'react-native-paper';
import { MaterialCommunityIcons } from '@expo/vector-icons';

export function DrawerContent(props) {
  return (
    <DrawerContentScrollView {...props}>
      {/* Drawer content implementation */}
    </DrawerContentScrollView>
  );
}

----------------------------------------

TITLE: Basic Stack Navigator Configuration in React Navigation
DESCRIPTION: Initial setup of a simple stack navigator with Home and Chat screens.

LANGUAGE: javascript
CODE:
const SimpleApp = createStackNavigator({
  Home: { screen: HomeScreen },
  Chat: { screen: ChatScreen },
});

----------------------------------------

TITLE: Initializing NavigationContainer with ref in React Navigation
DESCRIPTION: This snippet demonstrates how to set up the NavigationContainer with a ref to enable navigation without the navigation prop.

LANGUAGE: javascript
CODE:
// App.js

import { NavigationContainer } from '@react-navigation/native';
import { navigationRef } from './RootNavigation';

export default function App() {
  return (
    <NavigationContainer ref={navigationRef}>{/* ... */}</NavigationContainer>
  );
}

----------------------------------------

TITLE: Custom Modal Stack Navigator
DESCRIPTION: Implementation of a modal stack navigator with custom screen transitions using Animated API.

LANGUAGE: javascript
CODE:
const ModalNavigator = createStackNavigator(
  {
    Main: { screen: Main },
    Login: { screen: Login },
  },
  {
    headerMode: 'none',
    mode: 'modal',
    defaultNavigationOptions: {
      gesturesEnabled: false,
    },
    transitionConfig: () => ({
      transitionSpec: {
        duration: 300,
        easing: Easing.out(Easing.poly(4)),
        timing: Animated.timing,
      },
      screenInterpolator: (sceneProps) => {
        const { layout, position, scene } = sceneProps;
        const { index } = scene;

        const height = layout.initHeight;
        const translateY = position.interpolate({
          inputRange: [index - 1, index, index + 1],
          outputRange: [height, 0, 0],
        });

        const opacity = position.interpolate({
          inputRange: [index - 1, index - 0.99, index],
          outputRange: [0, 1, 1],
        });

        return { opacity, transform: [{ translateY }] };
      },
    }),
  }
);

----------------------------------------

TITLE: Navigation Warning Suppression
DESCRIPTION: Code to ignore non-serializable navigation state warnings using LogBox.

LANGUAGE: javascript
CODE:
import { LogBox } from 'react-native';

LogBox.ignoreLogs([
  'Non-serializable values were found in the navigation state',
]);

----------------------------------------

TITLE: Running ESLint for Code Style Consistency
DESCRIPTION: Command to run ESLint for checking code style consistency in the React Navigation project. It also mentions how to automatically fix some linting errors.

LANGUAGE: bash
CODE:
yarn lint

----------------------------------------

TITLE: Initializing Navigation Structure with Visible Tab Bar
DESCRIPTION: This snippet shows the initial navigation structure where the tab bar remains visible on all screens, including Profile and Settings.

LANGUAGE: javascript
CODE:
const HomeStack = createNativeStackNavigator({
  screens: {
    Home: Home,
    Profile: Profile,
    Settings: Settings,
  },
});

const MyTabs = createBottomTabNavigator({
  screens: {
    Home: HomeStack,
    Feed: Feed,
    Notifications: Notifications,
  },
});

const Navigation = createStaticNavigation(MyTabs);

export default function App() {
  return <Navigation />;
}

----------------------------------------

TITLE: Initializing i18n Configuration with Expo Localization
DESCRIPTION: Sets up basic i18n configuration with English and French translations using expo-localization and i18n-js libraries. Demonstrates how to configure fallbacks and translation objects.

LANGUAGE: jsx
CODE:
import * as Localization from 'expo-localization';
import i18n from 'i18n-js';

const en = {
  foo: 'Foo',
  bar: 'Bar {{someValue}}',
};

const fr = {
  foo: 'Fou',
  bar: 'Bár {{someValue}}',
};

i18n.fallbacks = true;
i18n.translations = { fr, en };

// This will log 'en' for me, as I'm an English speaker
console.log(Localization.locale);

----------------------------------------

TITLE: Installing Dependencies for Bare React Native Project
DESCRIPTION: Command to install necessary dependencies for React Navigation in a bare React Native project.

LANGUAGE: bash
CODE:
npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view

----------------------------------------

TITLE: Installing React Navigation Tabs Package
DESCRIPTION: Package location for Bottom Tab Navigator and Material Top Tab Navigator components in React Navigation 4.0

LANGUAGE: javascript
CODE:
react-navigation-tabs

----------------------------------------

TITLE: Creating Navigation Stack with Hidden Bars
DESCRIPTION: Example showing how to create navigation stack with hidden header and tab bar components

LANGUAGE: javascript
CODE:
const Tabs = createBottomTabNavigator({
  ...
}, {
  tabBarComponent: () => null,
});

export default createStackNavigator({
  ...
}, {
  headerMode: 'none',
});

----------------------------------------

TITLE: Hiding Tab Bar on Specific Screens in React Navigation
DESCRIPTION: Demonstrates how to hide the tab bar when navigating to specific screens within a stack navigator that is nested inside a tab navigator. It uses a function to dynamically set the tab bar visibility based on the navigation state.

LANGUAGE: javascript
CODE:
const FeedStack = createStackNavigator({
  FeedHome: FeedScreen,
  Details: DetailsScreen,
});

FeedStack.navigationOptions = ({ navigation }) => {
  let tabBarVisible = true;
  if (navigation.state.index > 0) {
    tabBarVisible = false;
  }

  return {
    tabBarVisible,
  };
};

----------------------------------------

TITLE: React Native URI Prefix Setup
DESCRIPTION: Configuration of navigation container with custom URI prefix for react-native init projects.

LANGUAGE: javascript
CODE:
const SimpleApp = StackNavigator({...}));

const prefix = 'mychat://';

const MainApp = () => <SimpleApp uriPrefix={prefix} />;

----------------------------------------

TITLE: Structure of Navigation State in React Navigation
DESCRIPTION: This code example demonstrates the structure of a navigation state object in React Navigation. It includes properties like key, index, and routes, which represent the current state of navigation in the app.

LANGUAGE: javascript
CODE:
{
  key: 'StackRouterRoot',
  index: 1,
  routes: [
    { key: 'A', name: 'Home' },
    { key: 'B', name: 'Profile' },
  ]
}

----------------------------------------

TITLE: CommonActions.reset Implementation
DESCRIPTION: Demonstrates how to reset the entire navigation state using CommonActions.reset to specify new routes and index.

LANGUAGE: JavaScript
CODE:
navigation.dispatch(
  CommonActions.reset({
    index: 1,
    routes: [
      {
        name: 'Profile',
        params: { user: 'jane', key: route.params.key },
      },
      { name: 'Home' },
    ],
  })
);

----------------------------------------

TITLE: Initializing SwitchNavigator in React Navigation
DESCRIPTION: This snippet demonstrates the basic syntax for creating a SwitchNavigator. It takes two parameters: RouteConfigs and SwitchNavigatorConfig. RouteConfigs defines the routes, while SwitchNavigatorConfig specifies navigation behavior options.

LANGUAGE: javascript
CODE:
SwitchNavigator(RouteConfigs, SwitchNavigatorConfig);

----------------------------------------

TITLE: Importing React Native Gesture Handler
DESCRIPTION: JavaScript code to import react-native-gesture-handler at the top of the entry file (index.js or App.js).

LANGUAGE: javascript
CODE:
import 'react-native-gesture-handler';

----------------------------------------

TITLE: Installing Dependencies for Expo Managed Project
DESCRIPTION: Command to install necessary dependencies for React Navigation in an Expo managed project.

LANGUAGE: bash
CODE:
npx expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

----------------------------------------

TITLE: Metro Config Extensions Setup
DESCRIPTION: Configuration for Metro bundler to properly resolve TypeScript and JavaScript file extensions.

LANGUAGE: javascript
CODE:
sourceExts: ['js', 'json', 'ts', 'tsx'];

----------------------------------------

TITLE: Navigation Event Listener Implementation
DESCRIPTION: Example of subscribing to navigation lifecycle events using addListener.

LANGUAGE: javascript
CODE:
const didBlurSubscription = this.props.navigation.addListener(
  'didBlur',
  (payload) => {
    console.debug('didBlur', payload);
  }
);

// Remove the listener when you are done
didBlurSubscription.remove();

----------------------------------------

TITLE: Using Localized Strings in React Navigation Screen Components
DESCRIPTION: This snippet demonstrates how to use localized strings in React Navigation screen components. It shows how to access the translation function and locale from screenProps, set the screen title dynamically, and provide a button to switch languages.

LANGUAGE: jsx
CODE:
class Screen extends React.Component {
  static navigationOptions = ({ screenProps: { t } }) => ({
    title: t('foo'),
  });

  render() {
    let { t, locale } = this.props.screenProps;

    return (
      <View style={styles.container}>
        <Text style={styles.text}>
          Current locale: {locale}.{' '}
          {locale !== 'en' && locale !== 'fr'
            ? 'Translations will fall back to "en" because none available'
            : null}
        </Text>
        <Text>{t('bar', { someValue: Date.now() })}</Text>
        {locale === 'en' ? (
          <Button
            title="Switch to French"
            onPress={() => this.props.screenProps.setLocale('fr')}
          />
        ) : (
          <Button
            title="Switch to English"
            onPress={() => this.props.screenProps.setLocale('en')}
          />
        )}
      </View>
    );
  }
}

----------------------------------------

TITLE: Example of a Route Object in React Navigation
DESCRIPTION: This snippet shows the structure of a typical Route object in React Navigation. It includes properties such as key, name, and params that provide information about the current route.

LANGUAGE: javascript
CODE:
{
  key: 'B',
  name: 'Profile',
  params: { id: '123' }
}

----------------------------------------

TITLE: Configuring Tab Screen Icons in React Native Bottom Tabs
DESCRIPTION: Demonstrates various ways to set tab bar icons in react-native-bottom-tabs, including using image files, SVGs, SF Symbols, and URLs.

LANGUAGE: tsx
CODE:
<Tab.Screen
  name="Albums"
  component={Albums}
  options={{
    tabBarIcon: () => require('person.png'),
    // SVG is also supported
    tabBarIcon: () => require('person.svg'),
    // or
    tabBarIcon: () => ({ sfSymbol: 'person' }),
    // You can also pass a URL
    tabBarIcon: () => ({ uri: 'https://example.com/icon.png' }),
  }}
/>

----------------------------------------

TITLE: Implementing Focus Event Listener in React Navigation
DESCRIPTION: Demonstrates how to set up a focus event listener using useEffect hook. The listener gets cleaned up on component unmount. Useful for performing one-time actions when screen comes into focus.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import { View } from 'react-native';

function ProfileScreen({ navigation }) {
  React.useEffect(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // The screen is focused
      // Call any action
    });

    // Return the function to unsubscribe from the event so it gets removed on unmount
    return unsubscribe;
  }, [navigation]);

  return <View />;
}

----------------------------------------

TITLE: NavigationContainer with NavigationInChildEnabled
DESCRIPTION: Example of using the navigationInChildEnabled prop to maintain backward compatibility

LANGUAGE: jsx
CODE:
<NavigationContainer navigationInChildEnabled>{/* ... */}</NavigationContainer>

----------------------------------------

TITLE: Running Example App and Tests
DESCRIPTION: Commands to run the example app with Expo and execute Jest tests, including watch mode for development.

LANGUAGE: bash
CODE:
yarn example start
yarn test
yarn test --watch

----------------------------------------

TITLE: Using useRoute Hook with Class Component
DESCRIPTION: Shows how to wrap a class component with a functional component to utilize the useRoute hook. This pattern allows class components to access route information through props.

LANGUAGE: javascript
CODE:
class MyText extends React.Component {
  render() {
    // Get it from props
    const { route } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const route = useRoute();

  return <MyText {...props} route={route} />;
}

----------------------------------------

TITLE: Using Params in Header Title in React Navigation
DESCRIPTION: Shows how to use route params to dynamically set the header title in React Navigation.

LANGUAGE: jsx
CODE:
const MyStack = createNativeStackNavigator({
  screens: {
    Profile: {
      screen: ProfileScreen,
      options: ({ route }) => ({
        title: route.params.name,
      }),
    },
  },
});

----------------------------------------

TITLE: Importing Switch Navigator in React Navigation
DESCRIPTION: Shows how to import the createSwitchNavigator function. This navigator switches between screens with no UI overlay and unmounts inactive screens.

LANGUAGE: markdown
CODE:
[createSwitchNavigator](switch-navigator.md)

----------------------------------------

TITLE: Using useRoute Hook with Class Component
DESCRIPTION: Shows how to wrap a class component with a functional component to utilize the useRoute hook. This pattern allows class components to access route information through props.

LANGUAGE: javascript
CODE:
class MyText extends React.Component {
  render() {
    // Get it from props
    const { route } = this.props;
  }
}

// Wrap and export
export default function (props) {
  const route = useRoute();

  return <MyText {...props} route={route} />;
}

----------------------------------------

TITLE: Configuring Static Navigation Options in React Navigation
DESCRIPTION: This snippet demonstrates how to set static navigation options for a screen component using the 'navigationOptions' static property.

LANGUAGE: javascript
CODE:
class MyScreen extends React.Component {
  static navigationOptions = {
    title: 'Great',
  };
  ...

----------------------------------------

TITLE: Disabling Deep Linking in React Navigation
DESCRIPTION: This JavaScript snippet shows how to disable the built-in deep linking handling in React Navigation by passing the enableURLHandling prop to the app container.

LANGUAGE: javascript
CODE:
const SimpleApp = createAppContainer(createStackNavigator({...}));

const MainApp = () => <SimpleApp enableURLHandling={false} />;

----------------------------------------

TITLE: Incorrect Implementation of Multiple Navigators in React Navigation
DESCRIPTION: This snippet demonstrates the incorrect way of rendering multiple navigators within a single React component. It shows how nesting navigators can lead to isolated navigation states and inability to interact with parent navigators.

LANGUAGE: javascript
CODE:
export default App extends React.Component {
  render() {
    /* In the root component we are rendering the app navigator */
    return <AppNavigator />;
  }
}

const AuthenticationNavigator = createStackNavigator({
  SignIn: SignInScreen,
  ForgotPassword: ForgotPasswordScreen,
});


class AuthenticationScreen extends React.Component {
  render() {
    /*
     * In a screen inside of the navigator we are rendering another navigator
     * You should avoid this! It will have its own navigation state and be unable
     * To interact with any parent navigator, eg: it would not know the route "Home" exists
     */
    return (
      <AuthenticationNavigator />
    );
  }
}

const AppNavigator = createSwitchNavigator({
  Auth: AuthenticationScreen, // This screen renders a navigator!
  Home: HomeScreen,
});

----------------------------------------

TITLE: Running Jest Tests for React Navigation
DESCRIPTION: Command to run Jest tests for the React Navigation project.

LANGUAGE: bash
CODE:
yarn run jest

----------------------------------------

TITLE: Mocking Native Modules for React Navigation Testing
DESCRIPTION: Setup code for mocking react-native-gesture-handler and react-native-reanimated dependencies required for testing React Navigation components. This setup includes disabling the native animated driver warning and configuring reanimated mock.

LANGUAGE: javascript
CODE:
// include this line for mocking react-native-gesture-handler
import 'react-native-gesture-handler/jestSetup';

// include this section and the NativeAnimatedHelper section for mocking react-native-reanimated
jest.mock('react-native-reanimated', () => {
  const Reanimated = require('react-native-reanimated/mock');

  // The mock for `call` immediately calls the callback which is incorrect
  // So we override it with a no-op
  Reanimated.default.call = () => {};

  return Reanimated;
});

// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing
jest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');

----------------------------------------

TITLE: Creating a Web App with React Navigation 3.0
DESCRIPTION: Demonstrates how to create a web application using React Navigation 3.0, showcasing the new createBrowserApp container and the built-in Link component for web support.

LANGUAGE: jsx
CODE:
import { createSwitchNavigator } from "@react-navigation/core";
import { createBrowserApp, Link } from "@react-navigation/web";

class Home extends React.Component {
  static path = "";
  static navigationOptions = {
    title: "Home",
  };
  render () {
    return (
      <div>
        <h2>Home Screen</h2>
        <Link toRoute="Profile" params={{ name: "Brent", view: "photos" }}>
          Brent's photos
        </Link>
      </div>
    );
  }
}
class Profile extends React.Component {
  static path = "/profile/:name";
  ...
}

const AppNavigator = createSwitchNavigator({
  Home,
  Profile,
});

const App = createBrowserApp(AppNavigator);

export default App;

----------------------------------------

TITLE: Adding Event Listeners to Parent Navigator in React Navigation
DESCRIPTION: This snippet shows how to add an event listener to a parent navigator using the getParent method. It's useful for listening to events from a parent navigator, such as tabPress in a nested stack.

LANGUAGE: javascript
CODE:
const unsubscribe = navigation
  .getParent('MyTabs')
  .addListener('tabPress', (e) => {
    // Do something
  });

----------------------------------------

TITLE: Manual Navigator Creation Example
DESCRIPTION: Example showing the equivalent manual implementation of what createNavigator does behind the scenes.

LANGUAGE: javascript
CODE:
const MyApp = ({ navigation }) => (
  <MyView router={MyRouter} navigation={navigation} />
);
MyApp.router = MyRouter;

----------------------------------------

TITLE: Mocking Native Modules for React Navigation Testing
DESCRIPTION: Setup code for mocking react-native-gesture-handler and react-native-reanimated dependencies required for testing React Navigation components. This setup includes disabling the native animated driver warning and configuring reanimated mock.

LANGUAGE: javascript
CODE:
// include this line for mocking react-native-gesture-handler
import 'react-native-gesture-handler/jestSetup';

// include this section and the NativeAnimatedHelper section for mocking react-native-reanimated
jest.mock('react-native-reanimated', () => {
  const Reanimated = require('react-native-reanimated/mock');

  // The mock for `call` immediately calls the callback which is incorrect
  // So we override it with a no-op
  Reanimated.default.call = () => {};

  return Reanimated;
});

// Silence the warning: Animated: `useNativeDriver` is not supported because the native animated module is missing
jest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');

----------------------------------------

TITLE: Blocking Navigation Actions in React Navigation
DESCRIPTION: This snippet demonstrates how to prevent certain navigation actions based on the current route state. It overrides the getStateForAction method to block the BACK action when the current route has an 'isEditing' parameter set to true.

LANGUAGE: javascript
CODE:
import { NavigationActions } from 'react-navigation';

const MyStackRouter = StackRouter(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyStackRouter.router.getStateForAction;

MyStackRouter.router.getStateForAction = (action, state) => {
  if (
    state &&
    action.type === NavigationActions.BACK &&
    state.routes[state.index].params.isEditing
  ) {
    // Returning null from getStateForAction means that the action
    // has been handled/blocked, but there is not a new state
    return null;
  }

  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Extending Basic Stack Navigator in React
DESCRIPTION: Shows how to extend an existing Stack Navigator by creating a custom navigator component that inherits the router from the base navigator.

LANGUAGE: javascript
CODE:
const MyStack = createStackNavigator({ ... });

class CustomNavigator extends React.Component {
  static router = MyStack.router;
  render() {
    const { navigation } = this.props;

    return <MyStack navigation={navigation} />;
  }
}

----------------------------------------

TITLE: Implementing withNavigationFocus in React Navigation
DESCRIPTION: This code snippet demonstrates how to use the withNavigationFocus higher-order component to wrap a custom component. The wrapped component receives an isFocused prop, which is used to render different text based on the focus state.

LANGUAGE: javascript
CODE:
import React from 'react';
import { Text } from 'react-native';
import { withNavigationFocus } from 'react-navigation';

class FocusStateLabel extends React.Component {
  render() {
    return <Text>{this.props.isFocused ? 'Focused' : 'Not focused'}</Text>;
  }
}

// withNavigationFocus returns a component that wraps FocusStateLabel and passes
// in the navigation prop
export default withNavigationFocus(FocusStateLabel);

----------------------------------------

TITLE: Handling initialization in React Navigation
DESCRIPTION: This snippet demonstrates how to handle initialization in the App component to prevent crashes when navigating before the app is fully mounted.

LANGUAGE: javascript
CODE:
// App.js

import { NavigationContainer } from '@react-navigation/native';
import { navigationRef, isReadyRef } from './RootNavigation';

export default function App() {
  React.useEffect(() => {
    return () => {
      isReadyRef.current = false;
    };
  }, []);

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() => {
        isReadyRef.current = true;
      }}
    >
      {/* ... */}
    </NavigationContainer>
  );
}

----------------------------------------

TITLE: Nested Stack Navigation in Tabs
DESCRIPTION: Example of implementing stack navigation within tab screens for deeper navigation hierarchies.

LANGUAGE: jsx
CODE:
import { createBottomTabNavigator, createStackNavigator, createAppContainer } from 'react-navigation';

const HomeStack = createStackNavigator({
  Home: HomeScreen,
  Details: DetailsScreen,
});

const SettingsStack = createStackNavigator({
  Settings: SettingsScreen,
  Details: DetailsScreen,
});

export default createAppContainer(
  createBottomTabNavigator(
    {
      Home: HomeStack,
      Settings: SettingsStack,
    },
    {
      /* Configuration options */
    }
  )
);

----------------------------------------

TITLE: TypeScript Type Definitions for Nested Navigation
DESCRIPTION: TypeScript configuration for defining types in a nested navigator setup with static and dynamic APIs.

LANGUAGE: typescript
CODE:
import {
  StaticScreenProps,
  NavigatorScreenParams,
} from '@react-navigation/native';

type FeedParamList = {
  Latest: undefined;
  Popular: undefined;
};

type Props = StaticScreenProps<NavigatorScreenParams<FeedParamList>>;

function FeedScreen(_: Props) {
  // ...
}

----------------------------------------

TITLE: Rendering Scenes in React Navigation Transitioner
DESCRIPTION: Example of how to implement the render function for Transitioner. It demonstrates rendering a stack of scenes and creating a cross-fade animation during transitions using Animated.View.

LANGUAGE: jsx
CODE:
_render(transitionProps, prevTransitionProps) {
  const scenes = transitionProps.scenes.map(scene => this._renderScene(transitionProps, scene));
  return (
    <View style={styles.stack}>
      {scenes}
    </View>
  );
}

LANGUAGE: jsx
CODE:
_renderScene(transitionProps, scene) {
  const { position } = transitionProps;
  const { index } = scene;
  const opacity = position.interpolate({
    inputRange: [index-1, index, index+1],
    outputRange: [0, 1, 0],
  });
  // The prop `router` is populated when we call `createNavigator`.
  const Scene = this.props.router.getComponent(scene.route.routeName);
  return (
    <Animated.View style={{ opacity }}>
      { Scene }
    </Animated.View>
  )
}

----------------------------------------

TITLE: Popping Routes in React Navigation
DESCRIPTION: Shows how to use StackActions.pop() to navigate back by removing a specified number of screens from the stack.

LANGUAGE: javascript
CODE:
import { StackActions } from 'react-navigation';

const popAction = StackActions.pop({
  n: 1,
});

this.props.navigation.dispatch(popAction);

----------------------------------------

TITLE: Installing Dependencies with Expo
DESCRIPTION: Command to install gesture-handler and reanimated dependencies using Expo CLI.

LANGUAGE: bash
CODE:
npx expo install react-native-gesture-handler react-native-reanimated

----------------------------------------

TITLE: Installing React Navigation 5 and Compatibility Layer
DESCRIPTION: Command to install React Navigation 5 core packages and the compatibility layer using npm or yarn.

LANGUAGE: bash
CODE:
npm install @react-navigation/native@^5.x @react-navigation/compat@^5.x @react-navigation/stack@^5.x

----------------------------------------

TITLE: Installing Pods for iOS
DESCRIPTION: Commands to navigate to the iOS folder and install CocoaPods dependencies.

LANGUAGE: bash
CODE:
cd ios
pod install
cd ..

----------------------------------------

TITLE: Installing Bottom Tabs Navigator Package
DESCRIPTION: Command to install the bottom tabs navigator package for React Navigation v6.

LANGUAGE: bash
CODE:
npm install @react-navigation/bottom-tabs@^6.x

----------------------------------------

TITLE: Importing and Creating Animated Switch Navigator in React Navigation
DESCRIPTION: This snippet demonstrates how to import and create an animated switch navigator using the createAnimatedSwitchNavigator function from react-navigation-animated-switch.

LANGUAGE: javascript
CODE:
import createAnimatedSwitchNavigator from 'react-navigation-animated-switch';

createAnimatedSwitchNavigator(RouteConfigs, SwitchNavigatorConfig);

----------------------------------------

TITLE: Passing Redux State as Navigation Params in React Navigation
DESCRIPTION: This snippet illustrates how to pass Redux state as navigation parameters when navigating between screens. It shows both the navigation action and how to use the param in the destination screen.

LANGUAGE: javascript
CODE:
<Button
  title="Go to static count screen"
  onPress={() =>
    this.props.navigation.navigate('StaticCounter', {
      count: this.props.count,
    })
  }
/>

LANGUAGE: javascript
CODE:
class StaticCounter extends React.Component {
  static navigationOptions = ({ navigation }) => ({
    title: navigation.getParam('count'),
  });

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.paragraph}>
          {this.props.navigation.getParam('count')}
        </Text>
      </View>
    );
  }
}

----------------------------------------

TITLE: Creating Navigation Stack with Dynamic API (JavaScript)
DESCRIPTION: Example showing how to create a navigation stack using React Navigation's dynamic API with three screens: Home, Profile, and Settings.

LANGUAGE: javascript
CODE:
const Stack = createStackNavigator();

function RootStack() {
  return (
    <Stack.Navigator>
      <Stack.Screen name="Home" component={Home} />
      <Stack.Screen name="Profile" component={Profile} />
      <Stack.Screen name="Settings" component={Settings} />
    </Stack.Navigator>
  );
}

----------------------------------------

TITLE: Clearing Metro Bundler Cache for React Native
DESCRIPTION: Command to clear the Metro bundler cache in a bare React Native project to resolve module resolution issues.

LANGUAGE: bash
CODE:
npx react-native start --reset-cache

----------------------------------------

TITLE: Setting up React Navigation Repository
DESCRIPTION: Commands for forking and setting up the React Navigation repository locally, including cloning and installing dependencies.

LANGUAGE: bash
CODE:
git clone https://github.com/<USERNAME>/react-navigation.git
cd react-navigation
git remote add upstream https://github.com/react-community/react-navigation.git
yarn install

----------------------------------------

TITLE: Authentication Flow Implementation (JavaScript)
DESCRIPTION: Demonstrates how to implement authentication flow using conditional rendering with the static API.

LANGUAGE: javascript
CODE:
const RootStack = createNativeStackNavigator({
  screens: {
    Home: {
      if: useIsSignedIn,
      screen: HomeScreen,
    },
    SignIn: {
      if: useIsSignedOut,
      screen: SignInScreen,
    },
  },
});

----------------------------------------

TITLE: Installing missing npm dependency
DESCRIPTION: Generic command to install a missing npm package dependency.

LANGUAGE: bash
CODE:
npm install name-of-the-module

----------------------------------------

TITLE: Running Example App with Expo
DESCRIPTION: Command to start the example app using Expo for manual integration testing of changes.

LANGUAGE: bash
CODE:
yarn example start

----------------------------------------

TITLE: Customizing Stack Navigator Background Color in React Navigation 3.0
DESCRIPTION: Demonstrates how to customize the default background color of the stack navigator, which is now white by default in version 3.0, using the cardStyle property.

LANGUAGE: javascript
CODE:
createStackNavigator(routes, { cardStyle: { backgroundColor: '#ccc' } });

----------------------------------------

TITLE: Reinstalling dependencies with npm
DESCRIPTION: Commands to remove node_modules, package-lock.json, and reinstall dependencies using npm.

LANGUAGE: bash
CODE:
rm -rf node_modules
rm package-lock.json
npm install

----------------------------------------

TITLE: Ignoring non-serializable values warning in React Native 0.62 and lower
DESCRIPTION: React Native code to ignore warnings about non-serializable values in navigation state for React Native 0.62 and lower.

LANGUAGE: js
CODE:
import { YellowBox } from 'react-native';

YellowBox.ignoreWarnings([
  'Non-serializable values were found in the navigation state',
]);

----------------------------------------

TITLE: Checking package dependencies with npm
DESCRIPTION: Command to check which packages depend on react-native-safe-area-context using npm.

LANGUAGE: bash
CODE:
npm ls react-native-safe-area-context

----------------------------------------

TITLE: Customizing Navigation Actions in React Navigation
DESCRIPTION: This example shows how to override the default getStateForAction method of a StackNavigator to implement custom navigation behavior. It demonstrates adding a custom 'PushTwoProfiles' action that adds two profile routes to the navigation state.

LANGUAGE: javascript
CODE:
const MyApp = createStackNavigator(
  {
    Home: { screen: HomeScreen },
    Profile: { screen: ProfileScreen },
  },
  {
    initialRouteName: 'Home',
  }
);

const defaultGetStateForAction = MyApp.router.getStateForAction;

MyApp.router.getStateForAction = (action, state) => {
  if (state && action.type === 'PushTwoProfiles') {
    const routes = [
      ...state.routes,
      { key: 'A', routeName: 'Profile', params: { name: action.name1 } },
      { key: 'B', routeName: 'Profile', params: { name: action.name2 } },
    ];
    return {
      ...state,
      routes,
      index: routes.length - 1,
    };
  }
  return defaultGetStateForAction(action, state);
};

----------------------------------------

TITLE: Overriding package version with Yarn resolutions
DESCRIPTION: JSON configuration to override the version of react-native-safe-area-context using Yarn resolutions.

LANGUAGE: json
CODE:
"resolutions": {
  "react-native-safe-area-context": "<version you want to use>"
}

----------------------------------------

TITLE: Configuring Default Navigation Options in Stack Navigator
DESCRIPTION: Demonstrates the updated syntax for setting default navigation options in stack navigator configuration, using defaultNavigationOptions instead of navigationOptions.

LANGUAGE: javascript
CODE:
const Home = createStackNavigator(
  {
    Feed: ExampleScreen,
    Profile: ExampleScreen,
  },
  {
    defaultNavigationOptions: {
      headerTintColor: '#fff',
      headerStyle: {
        backgroundColor: '#000',
      },
    },
    navigationOptions: {
      tabBarLabel: 'Home!',
    },
  }
);

const Tabs = createBottomTabNavigator({ Home });

----------------------------------------

TITLE: Opening Drawer in React Navigation 2.0
DESCRIPTION: Shows the new method for opening a drawer in React Navigation 2.0, replacing the previous navigate method.

LANGUAGE: javascript
CODE:
navigation.openDrawer()

----------------------------------------

TITLE: Installing Dependencies for React Navigation and React Native Paper
DESCRIPTION: Commands to install React Navigation v5, React Native Paper, and other required dependencies for the project.

LANGUAGE: bash
CODE:
npm install @react-navigation/native @react-navigation/stack @react-native-community/masked-view @react-navigation/drawer @react-navigation/material-bottom-tabs react-native-paper

LANGUAGE: bash
CODE:
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context

----------------------------------------

TITLE: Installing React Navigation 2.0 RC with Yarn
DESCRIPTION: Command to install the release candidate version of React Navigation 2.0 using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add react-navigation@^2.0.0-rc.1

----------------------------------------

TITLE: Deploying React Navigation Documentation with SSH
DESCRIPTION: Command to deploy the documentation using SSH authentication. Requires collaborator access and should be run from the main branch after downloading latest translations.

LANGUAGE: bash
CODE:
GIT_USER=<Your GitHub username> \
CURRENT_BRANCH=main \
USE_SSH=true \
yarn deploy