TITLE: Frontmatter Configuration for n8n Code Node Documentation
DESCRIPTION: YAML frontmatter metadata defining the content type, tags, and display settings for the Code node documentation.

LANGUAGE: yaml
CODE:
contentType: [integration, reference]
tags:
  - code node
  - code
hide:
  - tags

----------------------------------------

TITLE: Invalid Multi-line JavaScript Expression in n8n
DESCRIPTION: Shows an example of an invalid multi-line JavaScript expression in n8n that attempts to calculate the difference between two dates using Luxon library.

LANGUAGE: javascript
CODE:
{{
  function example() {
    let end = DateTime.fromISO('2017-03-13');
    let start = DateTime.fromISO('2017-02-13');
    let diffInMonths = end.diff(start, 'months');
    return diffInMonths.toObject();
  }
  example();
}}

----------------------------------------

TITLE: Checking Variable Existence with Ternary Operator in JavaScript
DESCRIPTION: This snippet demonstrates how to check if a variable from a previous node is empty and return a default value if it is. It uses the ternary operator to conditionally return 'not found' if the variable is empty.

LANGUAGE: javascript
CODE:
{{$json["variable_name"]? $json["variable_name"] :"not found"}}

----------------------------------------

TITLE: JavaScript Metadata Methods
DESCRIPTION: A collection of JavaScript methods for accessing n8n metadata, environment variables, execution information, and workflow data. These methods are primarily available in the Code node with some exceptions noted.

LANGUAGE: JavaScript
CODE:
$env                      // Access environment variables
$execution.customData      // Get/set custom execution data
$execution.id             // Get current execution ID
$execution.mode           // Get execution mode (test/production)
$execution.resumeUrl      // Get webhook URL for Wait node
$getWorkflowStaticData   // Access static workflow data
$("<node-name>").isExecuted // Check node execution status
$itemIndex               // Get item index in list
$nodeVersion             // Get current node version
$prevNode.name           // Get previous node name
$prevNode.outputIndex    // Get previous node output index
$prevNode.runIndex       // Get previous node run index
$runIndex                // Get current node execution count
$secrets                 // Access external secrets
$vars                    // Access environment variables
$version                 // Get node version
$workflow.active         // Check workflow active status
$workflow.id             // Get workflow ID
$workflow.name           // Get workflow name

----------------------------------------

TITLE: Summarizing Submissions and Creating Slack Message in JavaScript
DESCRIPTION: This code analyzes submission data, counts types of submissions, identifies top voted submissions, and formats the information into a Markdown message for Slack. It uses n8n's data structure for input and output.

LANGUAGE: javascript
CODE:
const submissions = $input.all();

// Count the number of ideas, features, and bugs
let ideaCount = 0;
let featureCount = 0;
let bugCount = 0;

submissions.forEach((submission) => {
  switch (submission.json.property_type[0]) {
    case "Idea":
      ideaCount++;
      break;
    case "Feature":
      featureCount++;
      break;
    case "Bug":
      bugCount++;
      break;
  }
});

// Sort submissions by votes and take the top 5
const topSubmissions = submissions
  .sort((a, b) => b.json.property_votes - a.json.property_votes)
  .slice(0, 5);

let topSubmissionText = "";
topSubmissions.forEach((submission) => {
  topSubmissionText += `<${submission.json.url}|${submission.json.name}> with ${submission.json.property_votes} votes\n`;
});

// Construct the Slack message
const slackMessage = `*Summary of Submissions*\n
Ideas: ${ideaCount}\n
Features: ${featureCount}\n
Bugs: ${bugCount}\n
Top 5 Submissions:\n
${topSubmissionText}`;

return [{ json: { slackMessage } }];

----------------------------------------

TITLE: Accessing Variables in JavaScript
DESCRIPTION: Demonstrates how to access custom environment variables using the vars object in JavaScript. The vars object is read-only and must be configured through the UI.

LANGUAGE: javascript
CODE:
// Access a variable
$vars.<variable-name>

----------------------------------------

TITLE: Fetching Next Page of Results Using Cursor in n8n API
DESCRIPTION: This snippet demonstrates how to request the next page of results using the cursor value obtained from the previous API response. It shows examples for both self-hosted and cloud instances of n8n, using curl to make the API call with the cursor parameter.

LANGUAGE: shell
CODE:
# For a self-hosted n8n instance
curl -X 'GET' \
  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \
  -H 'accept: application/json'

# For n8n Cloud
curl -X 'GET' \
  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \
  -H 'accept: application/json'

----------------------------------------

TITLE: Defining n8n Node Package Structure
DESCRIPTION: Outlines the required files and directories for an n8n node package, including the package.json file, nodes directory with base and codex files, and credentials directory.

LANGUAGE: plaintext
CODE:
project_root/
├── package.json
├── nodes/
│   ├── MyNode.node.ts
│   └── MyNode.node.json
└── credentials/
    └── MyNode.credentials.ts

----------------------------------------

TITLE: n8n Code Node Basic Structure
DESCRIPTION: Shows the required structure for returning data in an n8n Code node.

LANGUAGE: javascript
CODE:
return [
	{
		json: {
			apple: 'beets'
		}
	}
];

----------------------------------------

TITLE: Password Input Configuration in TypeScript
DESCRIPTION: Configures a password input field with masking and security options.

LANGUAGE: typescript
CODE:
{
	displayName: 'Password',
	name: 'password',
	type: 'string',
	required: true,
	typeOptions: {
		password: true,
	},
	default: '',
	description: `User's password`,
	displayOptions: {
		show: {
			resource: [],
			operation: []
		}
	},
}

----------------------------------------

TITLE: Using Data Transformation Functions in n8n Expressions
DESCRIPTION: Demonstrates the syntax for using data transformation functions in n8n expressions. These functions can be applied to different data types like arrays, dates, numbers, objects, and strings.

LANGUAGE: javascript
CODE:
{{ dataItem.function() }}

----------------------------------------

TITLE: Node Output Methods in JavaScript
DESCRIPTION: JavaScript methods for accessing node outputs, including item retrieval, parameter access, and context information. Most methods are available in the Code node with some exceptions like $("<node-name>").item.

LANGUAGE: JavaScript
CODE:
$("<node-name>").all(branchIndex?, runIndex?)
$("<node-name>").first(branchIndex?, runIndex?)
$("<node-name>").last(branchIndex?, runIndex?)
$("<node-name>").item
$("<node-name>").params
$("<node-name>").context
$("<node-name>").itemMatching(currentNodeInputIndex)

----------------------------------------

TITLE: JavaScript Input Methods for n8n Nodes
DESCRIPTION: JavaScript methods for accessing and manipulating node input data in n8n. Includes methods for accessing binary data, JSON data, all input items, and node context information. Some methods are restricted in the Code node.

LANGUAGE: JavaScript
CODE:
$binary            // Access binary data
$input.item         // Current input item
$input.all()         // All input items
$input.first()       // First input item
$input.last()        // Last input item
$input.params        // Query settings object
$json                // JSON data shorthand
$input.context.noItemsLeft  // Loop status boolean

----------------------------------------

TITLE: Including Item Linking Documentation
DESCRIPTION: Markdown include statement that references external documentation about item linking in the Code node

LANGUAGE: markdown
CODE:
--8<-- "_snippets/data/data-mapping/item-linking-code-node.md"

----------------------------------------

TITLE: Using $ifEmpty in JavaScript
DESCRIPTION: Checks if the first parameter is empty and returns either the first parameter (if not empty) or the second parameter (if empty).

LANGUAGE: JavaScript
CODE:
$ifEmpty(value, defaultValue)

----------------------------------------

TITLE: Correct JSON Property Structure Example
DESCRIPTION: Shows the correct implementation where the 'json' property is set to an object, which is the expected format in n8n.

LANGUAGE: javascript
CODE:
[
  {
    "json": {
	  // Setting `json` to an object as expected
	}
  }
]

----------------------------------------

TITLE: Module Import Using Require
DESCRIPTION: Demonstrates how to properly import modules in the Code node using require() instead of import statements.

LANGUAGE: javascript
CODE:
// Original code:
// import express from "express";
// New code:
const express = require("express");

----------------------------------------

TITLE: JavaScript JMESPath Implementation
DESCRIPTION: The $jmespath() method allows performing JMESPath searches on JSON objects in n8n. This method is available in the Code node.

LANGUAGE: javascript
CODE:
$jmespath()

----------------------------------------

TITLE: Implementing Programmatic-Style Node Structure in n8n
DESCRIPTION: Complete structure for a programmatic-style node implementation including execute method. Contains imports, node type definition, and async execution logic for processing data.

LANGUAGE: javascript
CODE:
import { IExecuteFunctions } from 'n8n-core';
import { INodeExecutionData, INodeType, INodeTypeDescription } from 'n8n-workflow';

export class ExampleNode implements INodeType {
	description: INodeTypeDescription = {
    // Basic node details here
    properties: [
      // Resources and operations here
    ]
  };

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    // Process data and return
  }
};

----------------------------------------

TITLE: Using $now and $today in JavaScript
DESCRIPTION: Demonstrates the usage of $now and $today methods in JavaScript within n8n. $now returns a Luxon object with the current timestamp, while $today returns a Luxon object with the current timestamp rounded down to the day.

LANGUAGE: JavaScript
CODE:
$now // Equivalent to DateTime.now()
$today // Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })

----------------------------------------

TITLE: Frontmatter Configuration for n8n Documentation
DESCRIPTION: YAML frontmatter configuration for the Code node documentation page, specifying metadata like title, description, content type, priority, and search settings.

LANGUAGE: yaml
CODE:
title: Code node documentation
description: Documentation for the Code node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.
contentType: [integration, reference]
priority: critical
tags:
  - code node
  - code
hide:
  - tags
search:
  boost: 1.5

----------------------------------------

TITLE: Illustrating n8n Data Structure in JSON
DESCRIPTION: This snippet demonstrates the structure of data passed between nodes in n8n. It shows how regular data is wrapped in a 'json' object and binary data in a 'binary' object, both within an array.

LANGUAGE: json
CODE:
[
	{
		// For most data:
		// Wrap each item in another object, with the key 'json'
		"json": {
			// Example data
			"apple": "beets",
			"carrot": {
				"dill": 1
			}
		},
		// For binary data:
		// Wrap each item in another object, with the key 'binary'
		"binary": {
			// Example data
			"apple-picture": {
				"data": "....", // Base64 encoded binary data (required)
				"mimeType": "image/png", // Best practice to set if possible (optional)
				"fileExtension": "png", // Best practice to set if possible (optional)
				"fileName": "example.png", // Best practice to set if possible (optional)
			}
		}
	},
]

----------------------------------------

TITLE: Accessing Webhook Body Data with JSON Expression in n8n
DESCRIPTION: Demonstrates how to extract data from a webhook body using a JSON expression in n8n. The example shows accessing the 'city' field from the incoming JSON data.

LANGUAGE: json
CODE:
[
  {
    "headers": {
      "host": "n8n.instance.address",
      ...
    },
    "params": {},
    "query": {},
    "body": {
      "name": "Jim",
      "age": 30,
      "city": "New York"
    }
  }
]

LANGUAGE: javascript
CODE:
{{$json.body.city}}

----------------------------------------

TITLE: Customer Data Structure Example
DESCRIPTION: Example JSON structure showing the initial customer data format from the Customer Datastore node.

LANGUAGE: json
CODE:
[
	{
		"id": "23423532",
		"name": "Jay Gatsby",
		"email": "gatsby@west-egg.com",
		"notes": "Keeps asking about a green light??",
		"country": "US",
		"created": "1925-04-10"
	},
	{
		"id": "23423533",
		"name": "José Arcadio Buendía",
		"email": "jab@macondo.co",
		"notes": "Lots of people named after him. Very confusing",
		"country": "CO",
		"created": "1967-05-05"
	}
]

----------------------------------------

TITLE: Node Output Methods in Python
DESCRIPTION: Python methods for accessing node outputs, including item retrieval, parameter access, and context information. Most methods are available in the Code node with some exceptions like _("<node-name>").item.

LANGUAGE: Python
CODE:
_("<node-name>").all(branchIndex?, runIndex?)
_("<node-name>").first(branchIndex?, runIndex?)
_("<node-name>").last(branchIndex?, runIndex?)
_("<node-name>").item
_("<node-name>").params
_("<node-name>").context
_("<node-name>").itemMatching(currentNodeInputIndex)

----------------------------------------

TITLE: Constructing Discord Message with JavaScript Expressions in n8n
DESCRIPTION: This code snippet demonstrates how to create a Discord message using JavaScript expressions in n8n. It includes dynamic data from previous nodes and a unique identifier from HTTP request parameters.

LANGUAGE: javascript
CODE:
This week we've {{$json["totalBooked"]}} booked orders with a total value of {{$json["bookedSum"]}}. My Unique ID: {{ $('HTTP Request').params["headerParameters"]["parameters"][0]["value"] }}

----------------------------------------

TITLE: Markdown Documentation Template Structure
DESCRIPTION: Basic markdown structure for the Code node documentation, including a title and a snippet inclusion directive.

LANGUAGE: markdown
CODE:
# Using the Code node

--8<-- "_snippets/integrations/builtin/core-nodes/code-node.md"

----------------------------------------

TITLE: Implementing FriendGrid Node - Programmatic Style
DESCRIPTION: Example of building an n8n node using the programmatic style, which requires explicit data handling and request building through an execute() method. This approach is necessary for trigger nodes, GraphQL APIs, and data transformation scenarios.

LANGUAGE: javascript
CODE:
import {
	IExecuteFunctions,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	IRequestOptions,
} from 'n8n-workflow';

// Create the FriendGrid class
export class FriendGrid implements INodeType {
  description: INodeTypeDescription = {
    displayName: 'FriendGrid',
    name: 'friendGrid',
    . . .
    properties: [
      {
        displayName: 'Resource',
        . . .
      },
      {
        displayName: 'Operation',
        name: 'operation',
        type: 'options',
        displayOptions: {
          show: {
              resource: [
              'contact',
              ],
          },
        },
        options: [
          {
            name: 'Create',
            value: 'create',
            description: 'Create a contact',
          },
        ],
        default: 'create',
        description: 'The operation to perform.',
      },
      {
        displayName: 'Email',
        name: 'email',
        . . .
      },
      {
        displayName: 'Additional Fields',
        // Sets up optional fields
      },
    ],
};

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    let responseData;
    const resource = this.getNodeParameter('resource', 0) as string;
    const operation = this.getNodeParameter('operation', 0) as string;
    //Get credentials the user provided for this node
    const credentials = await this.getCredentials('friendGridApi') as IDataObject;

    if (resource === 'contact') {
      if (operation === 'create') {
      // Get email input
      const email = this.getNodeParameter('email', 0) as string;
      // Get additional fields input
      const additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;
      const data: IDataObject = {
          email,
      };

      Object.assign(data, additionalFields);

      // Make HTTP request as defined in https://sendgrid.com/docs/api-reference/
      const options: IRequestOptions = {
        headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${credentials.apiKey}`,
        },
        method: 'PUT',
        body: {
            contacts: [
            data,
            ],
        },
        url: `https://api.sendgrid.com/v3/marketing/contacts`,
        json: true,
      };
      responseData = await this.helpers.httpRequest(options);
      }
    }
    // Map data to n8n data
    return [this.helpers.returnJsonArray(responseData)];
  }
}

----------------------------------------

TITLE: Finding Notion User ID from Slack Email in JavaScript
DESCRIPTION: This code snippet searches for a Notion user ID based on a Slack user's email. It handles potential null values in the person property and returns the Notion ID if found.

LANGUAGE: javascript
CODE:
const slackUser = $("Mock Slack").all()[0];
const notionUsers = $input.all();
const slackUserEmail = slackUser.json.email;

const notionUser = notionUsers.find(
  (user) => user.json.person && user.json.person.email === slackUserEmail
);

return notionUser ? [{ json: { notionId: notionUser.json.id } }] : [];

----------------------------------------

TITLE: Christmas Countdown Example
DESCRIPTION: Complex example combining multiple Luxon features to calculate days until Christmas.

LANGUAGE: javascript
CODE:
{{"There are " + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + " days to Christmas!"}}

----------------------------------------

TITLE: Configuring Node Icon in n8n
DESCRIPTION: Demonstrates how to specify an icon for a node using either a single file path or separate light/dark mode icons.

LANGUAGE: javascript
CODE:
icon: 'file:exampleNodeIcon.svg'

LANGUAGE: javascript
CODE:
icon: { 
  light: 'file:exampleNodeIcon.svg', 
  dark: 'file:exampleNodeIcon.dark.svg' 
}

----------------------------------------

TITLE: Final Data Structure with Restored Email
DESCRIPTION: The final data structure after email restoration, combining name and email fields.

LANGUAGE: json
CODE:
[
	{
		"name": "Jay Gatsby",
		"restoreEmail": "gatsby@west-egg.com"
	},
	{
		"name": "José Arcadio Buendía",
		"restoreEmail": "jab@macondo.co"
	}
]

----------------------------------------

TITLE: Accessing Execution ID in n8n
DESCRIPTION: Demonstrates how to access the unique workflow execution ID in both JavaScript and Python contexts.

LANGUAGE: javascript
CODE:
let executionId = $execution.id;

LANGUAGE: python
CODE:
executionId = _execution.id

----------------------------------------

TITLE: Implementing Declarative-Style Node Structure in n8n
DESCRIPTION: Basic structure for a declarative-style node implementation that defines the node type and description. Includes core imports and class structure with properties definition.

LANGUAGE: javascript
CODE:
import { INodeType, INodeTypeDescription } from 'n8n-workflow';

export class ExampleNode implements INodeType {
	description: INodeTypeDescription = {
		// Basic node details here
		properties: [
			// Resources and operations here
		]
	};
}

----------------------------------------

TITLE: Valid Single-line JavaScript Expression in n8n
DESCRIPTION: Demonstrates a valid single-line JavaScript expression in n8n that calculates the difference between two dates using the Luxon library.

LANGUAGE: javascript
CODE:
{{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}

----------------------------------------

TITLE: Simplified Data Structure
DESCRIPTION: The simplified data structure after processing through the Edit Fields node, containing only the name field.

LANGUAGE: json
CODE:
[
	{
		"name": "Jay Gatsby"
	},
	{
		"name": "José Arcadio Buendía"
	}
]

----------------------------------------

TITLE: Implementing Light Versioning in n8n Node
DESCRIPTION: Example of implementing light versioning in an n8n node by setting version array and using displayOptions with @version parameter. Shows how to make certain resources available only in specific versions.

LANGUAGE: javascript
CODE:
{
    displayName: 'NASA Pics',
    name: 'NasaPics',
    icon: 'file:nasapics.svg',
    // List the available versions
    version: [1,2,3],
    // More basic parameters here
    properties: [
        // Add a resource that's only displayed for version2
        {
            displayName: 'Resource name',
            // More resource parameters
            displayOptions: {
                show: {
                    '@version': 2,
                },
            },
        },
    ],
}

----------------------------------------

TITLE: Setting Environment Variables via Command Line for npm
DESCRIPTION: Demonstrates how to set environment variables for n8n when using npm by using the export command in the terminal.

LANGUAGE: bash
CODE:
export <variable>=<value>

----------------------------------------

TITLE: Retrieving Binary Data Buffer in JavaScript for n8n
DESCRIPTION: This snippet demonstrates how to use the getBinaryDataBuffer() function to access the binary data buffer in n8n. It requires specifying the item index and binary property name.

LANGUAGE: javascript
CODE:
/* 
* itemIndex: number. The index of the item in the input data.
* binaryPropertyName: string. The name of the binary property. 
* The default in the Read/Write File From Disk node is 'data'. 
*/
let binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(itemIndex, binaryPropertyName);

----------------------------------------

TITLE: Retrieving Next Page URL Using Response Data
DESCRIPTION: Example of accessing the next page URL from the API response body using the $response variable. This is used when the API returns the next page URL in its response.

LANGUAGE: javascript
CODE:
{{ $response.body["next-page"] }}

----------------------------------------

TITLE: Adding Optional Fields in TypeScript
DESCRIPTION: Defining additional optional fields for the node, such as first name and last name.

LANGUAGE: typescript
CODE:
{
	displayName: 'Additional Fields',
	name: 'additionalFields',
	type: 'collection',
	placeholder: 'Add Field',
	default: {},
	displayOptions: {
		show: {
			resource: [
				'contact',
			],
			operation: [
				'create',
			],
		},
	},
	options: [
		{
			displayName: 'First Name',
			name: 'firstName',
			type: 'string',
			default: '',
		},
		{
			displayName: 'Last Name',
			name: 'lastName',
			type: 'string',
			default: '',
		},
	],
},

----------------------------------------

TITLE: Counting Items from Previous Node in JavaScript
DESCRIPTION: This JavaScript code checks if the previous node returned any items and returns the count. It handles empty results by returning 0, and for non-empty results, it returns the length of the items array.

LANGUAGE: javascript
CODE:
if (Object.keys(items[0].json).length === 0) {
return [
	{
		json: {
			results: 0,
		}
	}
]
}
return [
	{
		json: {
			results: items.length,
		}
	}
];

LANGUAGE: json
CODE:
[
	{
		"results": 8
	}
]

----------------------------------------

TITLE: Incorrect JSON Property Structure Example
DESCRIPTION: Shows an incorrect implementation where the 'json' property is set to an array instead of an object, which will cause an error in n8n.

LANGUAGE: javascript
CODE:
[
  {
    "json": [
	  // Setting `json` to an array like this will produce an error
	]
  }
]

----------------------------------------

TITLE: Making HTTP Requests with n8n Helper Functions
DESCRIPTION: Examples of making HTTP requests with and without authentication using n8n helper functions. Shows the basic syntax for both authenticated and non-authenticated requests.

LANGUAGE: typescript
CODE:
// If no auth needed
const response = await this.helpers.httpRequest(options);

// If auth needed
const response = await this.helpers.httpRequestWithAuthentication.call(
	this, 
	'credentialTypeName', // For example: pipedriveApi
	options,
);

----------------------------------------

TITLE: Managing Global Static Data in n8n Workflows
DESCRIPTION: Demonstrates how to access, update, and delete global static workflow data that is accessible across all nodes. The example shows operations like getting timestamps and managing execution data.

LANGUAGE: javascript
CODE:
// Get the global workflow static data
const workflowStaticData = $getWorkflowStaticData('global');

// Access its data
const lastExecution = workflowStaticData.lastExecution;

// Update its data
workflowStaticData.lastExecution = new Date().getTime();

// Delete data
delete workflowStaticData.lastExecution;

LANGUAGE: python
CODE:
# Get the global workflow static data
workflowStaticData = _getWorkflowStaticData('global')

# Access its data
lastExecution = workflowStaticData.lastExecution

# Update its data
workflowStaticData.lastExecution = new Date().getTime()

# Delete data
delete workflowStaticData.lastExecution

----------------------------------------

TITLE: Accessing Linked Item from Previous Node in n8n (JavaScript)
DESCRIPTION: This snippet demonstrates how to access a linked item from a previous node's output in the n8n expressions editor. It uses the $('<node-name>').item syntax to retrieve the linked item.

LANGUAGE: javascript
CODE:
{{$("<node-name>").item}}

----------------------------------------

TITLE: Accessing Custom Variables in n8n Workflows (JavaScript)
DESCRIPTION: This snippet demonstrates how to access a custom variable in n8n workflows using JavaScript. Variables are accessed using the $vars object followed by the variable name. All variables are treated as strings.

LANGUAGE: javascript
CODE:
// Access a variable
$vars.<variable-name>

----------------------------------------

TITLE: Python Metadata Methods
DESCRIPTION: Python equivalents of the metadata access methods, available in the Code node. These methods follow similar patterns to the JavaScript versions but use underscore prefix instead of dollar sign.

LANGUAGE: Python
CODE:
_env                      # Access environment variables
_execution.customData      # Get/set custom execution data
_execution.id             # Get current execution ID
_execution.mode           # Get execution mode (test/production)
_execution.resumeUrl      # Get webhook URL for Wait node
_getWorkflowStaticData   # Access static workflow data
_("<node-name>").isExecuted # Check node execution status
_nodeVersion             # Get current node version
_prevNode.name           # Get previous node name
_prevNode.outputIndex    # Get previous node output index
_prevNode.runIndex       # Get previous node run index
_runIndex                # Get current node execution count
_secrets                 # Access external secrets
_vars                    # Access environment variables
_workflow.active         # Check workflow active status
_workflow.id             # Get workflow ID
_workflow.name           # Get workflow name

----------------------------------------

TITLE: Getting Node Items with .all() Method
DESCRIPTION: Demonstrates various ways to retrieve all items from nodes using the .all() method. Shows how to access items from the current node, specific branch indexes, and different run indexes.

LANGUAGE: javascript
CODE:
// Returns all the items of the given node and current run
let allItems = $("<node-name>").all();

// Returns all items the node "IF" outputs (index: 0 which is Output "true" of its most recent run)
let allItems = $("IF").all();

// Returns all items the node "IF" outputs (index: 0 which is Output "true" of the same run as current node)
let allItems = $("IF").all(0, $runIndex);

// Returns all items the node "IF" outputs (index: 1 which is Output "false" of run 0 which is the first run)
let allItems = $("IF").all(1, 0);

LANGUAGE: python
CODE:
# Returns all the items of the given node and current run
allItems = _("<node-name>").all();

# Returns all items the node "IF" outputs (index: 0 which is Output "true" of its most recent run)
allItems = _("IF").all();

# Returns all items the node "IF" outputs (index: 0 which is Output "true" of the same run as current node)
allItems = _("IF").all(0, _runIndex);

# Returns all items the node "IF" outputs (index: 1 which is Output "false" of run 0 which is the first run)
allItems = _("IF").all(1, 0);

----------------------------------------

TITLE: Retrieving List of First Names with JMESPath
DESCRIPTION: Demonstrates how to use JMESPath to extract a list of first names from a JSON object in n8n, showing examples for both Expressions and Code nodes in JavaScript and Python.

LANGUAGE: javascript
CODE:
{{$jmespath($json.body.people, "[*].first" )}}

LANGUAGE: javascript
CODE:
let firstNames = $jmespath($json.body.people, "[*].first" )
return {firstNames};

LANGUAGE: python
CODE:
firstNames = _jmespath(_json.body.people, "[*].first" )
return {"firstNames":firstNames}

----------------------------------------

TITLE: Implementing the Execute Method in TypeScript
DESCRIPTION: The execute method that runs when the node is executed, handling API requests and data processing.

LANGUAGE: typescript
CODE:
// Handle data coming from previous nodes
const items = this.getInputData();
let responseData;
const returnData = [];
const resource = this.getNodeParameter('resource', 0) as string;
const operation = this.getNodeParameter('operation', 0) as string;

// For each item, make an API call to create a contact
for (let i = 0; i < items.length; i++) {
	if (resource === 'contact') {
		if (operation === 'create') {
			// Get email input
			const email = this.getNodeParameter('email', i) as string;
			// Get additional fields input
			const additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject;
			const data: IDataObject = {
				email,
			};

			Object.assign(data, additionalFields);

			// Make HTTP request according to https://sendgrid.com/docs/api-reference/
			const options: OptionsWithUri = {
				headers: {
					'Accept': 'application/json',
				},
				method: 'PUT',
				body: {
					contacts: [
						data,
					],
				},
				uri: `https://api.sendgrid.com/v3/marketing/contacts`,
				json: true,
			};
			responseData = await this.helpers.requestWithAuthentication.call(this, 'friendGridApi', options);
			returnData.push(responseData);
		}
	}
}
// Map data to n8n data structure
return [this.helpers.returnJsonArray(returnData)];

----------------------------------------

TITLE: Implementing Resource and Operations in n8n Node
DESCRIPTION: Example showing how to structure a node with multiple resources and operations using TypeScript. Demonstrates proper parameter setup with display options and value handling.

LANGUAGE: javascript
CODE:
export const ExampleNode implements INodeType {
    description: {
        displayName: 'Example Node',
        ...
        properties: [
            {
                displayName: 'Resource',
                name: 'resource',
                type: 'options',
                options: [
                    {
                        name: 'Resource One',
                        value: 'resourceOne'
                    },
                    {
                        name: 'Resource Two',
                        value: 'resourceTwo'
                    }
                ],
                default: 'resourceOne'
            },
            {
                displayName: 'Operation',
                name: 'operation',
                type: 'options',
                // Only show these operations for Resource One
                displayOptions: {
                    show: {
                        resource: [
                            'resourceOne'
                        ]
                    }
                },
                options: [
                    {
                        name: 'Create',
                        value: 'create',
                        description: 'Create an instance of Resource One'
                    }
                ]
            }
        ]
    }
}

----------------------------------------

TITLE: Referencing Child Fields with Dot Notation in JavaScript
DESCRIPTION: Demonstrates the use of dot notation to reference child fields in the format 'parent.child' when configuring the Sort node in n8n.

LANGUAGE: javascript
CODE:
parent.child

----------------------------------------

TITLE: Implementing loadOptions Method for Gmail Labels in n8n
DESCRIPTION: This snippet demonstrates how to use the loadOptions method in a programmatic-style node to fetch and display email labels from Gmail. It queries the Gmail API and formats the response for use in the n8n GUI.

LANGUAGE: javascript
CODE:
methods = {
	loadOptions: {
		// Get all the labels and display them
		async getLabels(
			this: ILoadOptionsFunctions,
		): Promise<INodePropertyOptions[]> {
			const returnData: INodePropertyOptions[] = [];
			const labels = await googleApiRequestAllItems.call(
				this,
				'labels',
				'GET',
				'/gmail/v1/users/me/labels',
			);
			for (const label of labels) {
				const labelName = label.name;
				const labelId = label.id;
				returnData.push({
					name: labelName,
					value: labelId,
				});
			}
			return returnData;
		},
	},
};

----------------------------------------

TITLE: Configuring Redoc for n8n API Documentation in HTML
DESCRIPTION: This snippet sets up a Redoc component to display the n8n API documentation. It specifies the OpenAPI spec URL, disables search, hides the hostname, and applies custom styling for typography and sidebar.

LANGUAGE: html
CODE:
<redoc
  spec-url="/api/v1/openapi.yml"
  disable-search
  hide-hostname
  theme='{
    "typography": {
      "fontSize": "14px",
      "lineHeight": "1.2em",
      "fontFamily": "\"Open sans\", Helvetica, sans-serif",
      "headings": {
        "fontFamily": "\"Open sans\", Helvetica, sans-serif"
      }
    },
    "sidebar": {
      "backgroundColor": "#eaeaea",
      "width": "280px"
    }
  }' />
<script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"> </script>

----------------------------------------

TITLE: Outputting to Console with print() in Python
DESCRIPTION: Shows how to use print() to output a variable to the browser console in Python within an n8n Code node.

LANGUAGE: python
CODE:
a = "apple"
print(a)

----------------------------------------

TITLE: Setting Default Form Values with Query Parameters in n8n
DESCRIPTION: Demonstrates how to use query parameters to set initial values for form fields in n8n. The example shows a URL with percent-encoded parameters for email and name fields.

LANGUAGE: plaintext
CODE:
https://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe

----------------------------------------

TITLE: Including Item Linking Documentation via Markdown
DESCRIPTION: Markdown snippet that includes external documentation about item linking and node creators using the --8<-- syntax for file inclusion.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/data/data-mapping/item-linking-node-creators.md"

----------------------------------------

TITLE: Python Luxon Variable Usage
DESCRIPTION: Using Luxon variables in Python code node with limited functionality.

LANGUAGE: python
CODE:
_now
# n8n displays <ISO formatted timestamp>
# For example 2022-03-09T14:00:25.058+00:00
rightNow = "Today's date is " + str(_now)
# n8n displays "Today's date is <unix timestamp>"
# For example "Today's date is 1646834498755"

----------------------------------------

TITLE: Adding Node Details in TypeScript
DESCRIPTION: Defining basic node parameters such as display name, icon, and credentials in the description object.

LANGUAGE: typescript
CODE:
displayName: 'FriendGrid',
name: 'friendGrid',
icon: 'file:friendGrid.svg',
group: ['transform'],
version: 1,
description: 'Consume SendGrid API',
defaults: {
	name: 'FriendGrid',
},
inputs: ['main'],
outputs: ['main'],
credentials: [
	{
		name: 'friendGridApi',
		required: true,
	},
],

----------------------------------------

TITLE: Outputting to Console with console.log() in JavaScript
DESCRIPTION: Demonstrates how to use console.log() to output a variable to the browser console in JavaScript within an n8n Code node.

LANGUAGE: javascript
CODE:
let a = "apple";
console.log(a);

----------------------------------------

TITLE: Generating HTML Template with Expressions in n8n
DESCRIPTION: Create an HTML template using standard HTML, CSS, JavaScript, and n8n expressions. Expressions are wrapped in double curly braces and can include n8n's built-in methods and variables.

LANGUAGE: HTML
CODE:
<html>
  <head>
    <style>
      /* CSS styles */
    </style>
  </head>
  <body>
    <h1>{{$node["Some Node"].data["someField"]}}</h1>
    <script>
      // JavaScript code (not executed by n8n)
    </script>
  </body>
</html>

----------------------------------------

TITLE: Extracting Specific Property from Current Node's Input in n8n (JavaScript)
DESCRIPTION: This example demonstrates how to extract a specific property (name) from a linked item in the current node's input. It assumes a JSON structure with id and name fields.

LANGUAGE: javascript
CODE:
{{$input.item.json.name}}

----------------------------------------

TITLE: Configuring Execution Data Storage with npm in n8n
DESCRIPTION: This snippet demonstrates how to set environment variables for controlling execution data storage when running n8n with npm. It includes options for saving data on errors, successes, progress, and manual executions.

LANGUAGE: sh
CODE:
# npm
# Save executions ending in errors
export EXECUTIONS_DATA_SAVE_ON_ERROR=all

# Save successful executions
export EXECUTIONS_DATA_SAVE_ON_SUCCESS=all

# Don't save node progress for each execution
export EXECUTIONS_DATA_SAVE_ON_PROGRESS=false

# Don't save manually launched executions
export EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false

----------------------------------------

TITLE: Counting Items from Previous Node in Python
DESCRIPTION: This Python code performs the same function as the JavaScript version, counting items from the previous node. It checks for empty results and returns the appropriate count in the specified JSON format.

LANGUAGE: python
CODE:
if len(items[0].json) == 0:
	return [
		{
			"json": {
				"results": 0,
			}
		}
	]
else:
	return [
		{
			"json": {
				"results": items.length,
			}
		}
	]

LANGUAGE: json
CODE:
[
	{
		"results": 8
	}
]

----------------------------------------

TITLE: Defining Credentials Structure for n8n Node
DESCRIPTION: This snippet demonstrates the basic structure of a credentials file for an n8n node. It includes import statements, class definition, and essential properties such as name, displayName, and authentication methods.

LANGUAGE: javascript
CODE:
import {
	IAuthenticateGeneric,
	ICredentialTestRequest,
	ICredentialType,
	INodeProperties,
} from 'n8n-workflow';

export class ExampleNode implements ICredentialType {
	name = 'exampleNodeApi';
	displayName = 'Example Node API';
	documentationUrl = '';
	properties: INodeProperties[] = [
		{
			displayName: 'API Key',
			name: 'apiKey',
			type: 'string',
			default: '',
		},
	];
	authenticate: IAuthenticateGeneric = {
		type: 'generic',
		properties: {
			qs: {
				'api_key': '={{$credentials.apiKey}}'
			}

		},
	};
	test: ICredentialTestRequest = {
		request: {
			baseURL: '={{$credentials?.domain}}',
			url: '/bearer',
		},
	};
}

----------------------------------------

TITLE: Using Item Variable in JavaScript
DESCRIPTION: Demonstrates how to access and manipulate item data using the item variable to create new properties based on existing ones.

LANGUAGE: json
CODE:
// Uses the data of an already existing key to create a new additional one
item.newIncrementedCounter = item.existingCounter + 1;
return item;

----------------------------------------

TITLE: Updating a Workflow with JSON in n8n
DESCRIPTION: This snippet demonstrates the JSON object structure needed to update an existing workflow in n8n. It includes the same essential fields as creating a workflow: name, nodes, connections, and settings.

LANGUAGE: json
CODE:
{
  "name": "string",
  "nodes": [],
  "connections": {},
  "settings": {}
}

----------------------------------------

TITLE: Setting n8n Instance Timezone using Environment Variable
DESCRIPTION: Sets the default timezone for an n8n instance using the GENERIC_TIMEZONE environment variable. This affects features like the Schedule node's execution timing. The example shows how to set the timezone to Europe/Berlin.

LANGUAGE: bash
CODE:
export GENERIC_TIMEZONE=Europe/Berlin

----------------------------------------

TITLE: Using $min in JavaScript
DESCRIPTION: Returns the lowest of the provided numbers.

LANGUAGE: JavaScript
CODE:
$min()

----------------------------------------

TITLE: Using $max in JavaScript
DESCRIPTION: Returns the highest of the provided numbers.

LANGUAGE: JavaScript
CODE:
$max()

----------------------------------------

TITLE: Managing Node-Specific Static Data in n8n Workflows
DESCRIPTION: Shows how to handle node-specific static data that is only accessible within a particular node. Includes examples of reading, writing, and deleting node-level static data.

LANGUAGE: javascript
CODE:
// Get the static data of the node
const nodeStaticData = $getWorkflowStaticData('node');

// Access its data
const lastExecution = nodeStaticData.lastExecution;

// Update its data
nodeStaticData.lastExecution = new Date().getTime();

// Delete data
delete nodeStaticData.lastExecution;

LANGUAGE: python
CODE:
# Get the static data of the node
nodeStaticData = _getWorkflowStaticData('node')

# Access its data
lastExecution = nodeStaticData.lastExecution

# Update its data
nodeStaticData.lastExecution = new Date().getTime()

# Delete data
delete nodeStaticData.lastExecution

----------------------------------------

TITLE: Configuring n8n Workflow for Report Generation
DESCRIPTION: This JSON configuration defines an n8n workflow for generating reports. It includes nodes for HTTP requests, Airtable integration, data merging, sorting, file conversion, and sending notifications via Gmail and Discord.

LANGUAGE: json
CODE:
{
    "meta": {
        "templateCredsSetupCompleted": true,
        "instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
    },
    "nodes": [
        {
        "parameters": {
            "sendTo": "bart@n8n.io",
            "subject": "Your TPS Reports",
            "emailType": "text",
            "message": "Please find your TPS report attached.",
            "options": {
            "attachmentsUi": {
                "attachmentsBinary": [
                {}
                ]
            }
            }
        },
        "id": "d889eb42-8b34-4718-b961-38c8e7839ea6",
        "name": "Gmail",
        "type": "n8n-nodes-base.gmail",
        "typeVersion": 2.1,
        "position": [
            2100,
            500
        ],
        "credentials": {
            "gmailOAuth2": {
            "id": "HFesCcFcn1NW81yu",
            "name": "Gmail account 7"
            }
        }
        },
        {
        "parameters": {},
        "id": "c0236456-40be-4f8f-a730-e56cb62b7b5c",
        "name": "When clicking \"Test workflow\"",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
            780,
            600
        ]
        },
        {
        "parameters": {
            "url": "https://internal.users.n8n.cloud/webhook/level2-erp",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
            "parameters": [
                {
                "name": "unique_id",
                "value": "recFIcD6UlSyxaVMQ"
                }
            ]
            },
            "options": {}
        },
        "id": "cc106fa0-6630-4c84-aea4-a4c7a3c149e9",
        "name": "HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
            1000,
            500
        ],
        "credentials": {
            "httpHeaderAuth": {
            "id": "qeHdJdqqqaTC69cm",
            "name": "Course L2 Credentials"
            }
        }
        },
        {
        "parameters": {
            "operation": "search",
            "base": {
            "__rl": true,
            "value": "apprtKkVasbQDbFa1",
            "mode": "list",
            "cachedResultName": "All your base",
            "cachedResultUrl": "https://airtable.com/apprtKkVasbQDbFa1"
            },
            "table": {
            "__rl": true,
            "value": "tblInZ7jeNdlUOvxZ",
            "mode": "list",
            "cachedResultName": "Course L2, Workflow 1",
            "cachedResultUrl": "https://airtable.com/apprtKkVasbQDbFa1/tblInZ7jeNdlUOvxZ"
            },
            "options": {}
        },
        "id": "e5ae1927-b531-401c-9cb2-ecf1f2836ba6",
        "name": "Airtable",
        "type": "n8n-nodes-base.airtable",
        "typeVersion": 2,
        "position": [
            1000,
            700
        ],
        "credentials": {
            "airtableTokenApi": {
            "id": "MIplo6lY3AEsdf7L",
            "name": "Airtable Personal Access Token account 4"
            }
        }
        },
        {
        "parameters": {
            "mode": "combine",
            "mergeByFields": {
            "values": [
                {
                "field1": "customerID",
                "field2": "customerID"
                }
            ]
            },
            "options": {}
        },
        "id": "1cddc984-7fca-45e0-83b8-0c502cb4c78c",
        "name": "Merge",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2.1,
        "position": [
            1220,
            600
        ]
        },
        {
        "parameters": {
            "sortFieldsUi": {
            "sortField": [
                {
                "fieldName": "orderPrice",
                "order": "descending"
                }
            ]
            },
            "options": {}
        },
        "id": "2f55af2e-f69b-4f61-a9e5-c7eefaad93ba",
        "name": "Sort",
        "type": "n8n-nodes-base.sort",
        "typeVersion": 1,
        "position": [
            1440,
            600
        ]
        },
        {
        "parameters": {
            "conditions": {
            "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
            },
            "conditions": [
                {
                "id": "d3afe65c-7c80-4caa-9d1c-33c62fbc2197",
                "leftValue": "={{ $json.region }}",
                "rightValue": "Americas",
                "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                }
                }
            ],
            "combinator": "and"
            },
            "options": {}
        },
        "id": "2ed874a9-5bcf-4cc9-9b52-ea503a562892",
        "name": "If",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
            1660,
            500
        ]
        },
        {
        "parameters": {
            "operation": "toJson",
            "mode": "each",
            "options": {
            "fileName": "=report_orderID_{{ $('If').item.json.orderID }}.json"
            }
        },
        "id": "d93b4429-2200-4a84-8505-16266fedfccd",
        "name": "Convert to File",
        "type": "n8n-nodes-base.convertToFile",
        "typeVersion": 1.1,
        "position": [
            1880,
            500
        ]
        },
        {
        "parameters": {
            "authentication": "webhook",
            "content": "I sent the file using email with the label ID  and wrote the binary file {file name}. My ID: 123",
            "options": {}
        },
        "id": "26f43f2c-1422-40de-9f40-dd2d80926b1c",
        "name": "Discord",
        "type": "n8n-nodes-base.discord",
        "typeVersion": 2,
        "position": [
            2320,
            500
        ],
        "credentials": {
            "discordWebhookApi": {
            "id": "WEBrtPdoLrhlDYKr",
            "name": "L2 Course Discord Webhook account"
            }
        }
        },
        {
        "parameters": {
            "batchSize": 5,
            "options": {}
        },
        "id": "0fa1fbf6-fe77-4044-a445-c49a1db37dec",
        "name": "Loop Over Items",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
            1660,
            700
        ]
        },
        {
        "parameters": {
            "assignments": {
            "assignments": [
                {
                "id": "ce839b80-c50d-48f5-9a24-bb2df6fdd2ff",
                "name": "customerEmail",
                "value": "={{ $json.customerEmail }}",
                "type": "string"
                },
                {
                "id": "0c613366-3808-45a2-89cc-b34c7b9f3fb7",
                "name": "region",
                "value": "={{ $json.region }}",
                "type": "string"
                },
                {
                "id": "0f19a88c-deb0-4119-8965-06ed62a840b2",
                "name": "customerSince",
                "value": "={{ $json.customerSince }}",
                "type": "string"
                },
                {
                "id": "a7e890d6-86af-4839-b5df-d2a4efe923f7",
                "name": "orderPrice",
                "value": "={{ $json.orderPrice }}",
                "type": "number"
                }
            ]
            },
            "options": {}
        },
        "id": "09b8584c-4ead-4007-a6cd-edaa4669a757",
        "name": "Edit Fields",
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.3,
        "position": [
            1880,
            700
        ]
        },
        {
        "parameters": {
            "operation": "formatDate",
            "date": "={{ $json.customerSince }}",
            "options": {
            "includeInputFields": true
            }
        },
        "id": "c96fae90-e080-48dd-9bff-3e4506aafb86",
        "name": "Date & Time",
        "type": "n8n-nodes-base.dateTime",
        "typeVersion": 2,
        "position": [
            2100,
            700
        ]
        },
        {
        "parameters": {
            "options": {
            "fileName": "={{$runIndex > 0 ? 'file_low_orders':'file_high_orders'}}"
            }
        },
        "id": "43dc8634-2f16-442b-a754-89f47c51c591",
        "name": "Convert to File1",
        "type": "n8n-nodes-base.convertToFile",
        "typeVersion": 1.1,
        "position": [
            2320,
            700
        ]
        },
        {
        "parameters": {
            "authentication": "webhook",
            "content": "I created the spreadsheet {file name}. My ID: 123",
            "options": {}
        },
        "id": "05da1c22-d1f6-4ea6-9102-f74f9ae2e9d3",
        "name": "Discord1",
        "type": "n8n-nodes-base.discord",
        "typeVersion": 2,
        "position": [
            2540,
            700
        ],
        "credentials": {
            "discordWebhookApi": {
            "id": "WEBrtPdoLrhlDYKr",
            "name": "L2 Course Discord Webhook account"
            }
        }
        }
    ],
    "connections": {
        "Gmail": {
        "main": [
            [
            {
                "node": "Discord",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "When clicking \"Test workflow\"": {
        "main": [
            [
            {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
            },
            {
                "node": "Airtable",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "HTTP Request": {
        "main": [
            [
            {
                "node": "Merge",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Airtable": {
        "main": [
            [
            {
                "node": "Merge",
                "type": "main",
                "index": 1
            }
            ]
        ]
        },
        "Merge": {
        "main": [
            [
            {
                "node": "Sort",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Sort": {
        "main": [
            [
            {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
            },
            {
                "node": "If",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "If": {
        "main": [
            [
            {
                "node": "Convert to File",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Convert to File": {
        "main": [
            [
            {
                "node": "Gmail",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Loop Over Items": {
        "main": [
            null,
            [
            {
                "node": "Edit Fields",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Edit Fields": {
        "main": [
            [
            {
                "node": "Date & Time",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Date & Time": {
        "main": [
            [
            {
                "node": "Convert to File1",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Convert to File1": {
        "main": [
            [
            {
                "node": "Discord1",
                "type": "main",
                "index": 0
            }
            ]
        ]
        },
        "Discord1": {
        "main": [
            [
            {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
            }
            ]
        ]
        }
    },
    "pinData": {}
    }

----------------------------------------

TITLE: Configuring Webhook Path Parameters
DESCRIPTION: Examples of valid URL path formats for configuring webhook endpoints, including route parameters for API-like implementations.

LANGUAGE: plaintext
CODE:
/:variable
/path/:variable
/:variable/path
/:variable1/path/:variable2
/:variable1/:variable2

----------------------------------------

TITLE: Queue Metrics Example Output
DESCRIPTION: Sample output showing the format and types of queue metrics available in Prometheus, including active jobs, completed jobs, failed jobs, and waiting jobs metrics.

LANGUAGE: plaintext
CODE:
# HELP n8n_scaling_mode_queue_jobs_active Current number of jobs being processed across all workers in scaling mode.
# TYPE n8n_scaling_mode_queue_jobs_active gauge
n8n_scaling_mode_queue_jobs_active 0

# HELP n8n_scaling_mode_queue_jobs_completed Total number of jobs completed across all workers in scaling mode since instance start.
# TYPE n8n_scaling_mode_queue_jobs_completed counter
n8n_scaling_mode_queue_jobs_completed 0

# HELP n8n_scaling_mode_queue_jobs_failed Total number of jobs failed across all workers in scaling mode since instance start.
# TYPE n8n_scaling_mode_queue_jobs_failed counter
n8n_scaling_mode_queue_jobs_failed 0

# HELP n8n_scaling_mode_queue_jobs_waiting Current number of enqueued jobs waiting for pickup in scaling mode.
# TYPE n8n_scaling_mode_queue_jobs_waiting gauge
n8n_scaling_mode_queue_jobs_waiting 0

----------------------------------------

TITLE: Extracting Specific Fields from Nested Data in JavaScript
DESCRIPTION: This code extracts first name and job title from nested JSON data for each person in the input. It demonstrates how to reference nested fields using dot notation and returns the data in n8n's required format.

LANGUAGE: javascript
CODE:
const items = $input.all();
const newItems = items.map((item) => {
  const firstName = item.json.personal_info.first_name;
  const jobTitle = item.json.work_info.job_title;
  return {
    json: {
      firstName,
      jobTitle,
    },
  };
});
return newItems;

----------------------------------------

TITLE: Using $if in JavaScript
DESCRIPTION: Conditional function that takes three parameters: a condition, value to return if true, and value to return if false.

LANGUAGE: JavaScript
CODE:
$if()

----------------------------------------

TITLE: Running Multiple Commands with AND Operator in Bash
DESCRIPTION: Example showing how to run multiple shell commands by combining them with && operator. This concatenates the change directory (cd) command with the list (ls) command.

LANGUAGE: bash
CODE:
cd bin && ls

----------------------------------------

TITLE: Accessing Node Data with $item in TypeScript
DESCRIPTION: Examples demonstrating how to access JSON data properties and node parameters using the $item method. Shows accessing data from different items using index values and retrieving values from specific nodes like 'Set' and 'Slack'.

LANGUAGE: typescript
CODE:
// Returns the value of the JSON data property "myNumber" of Node "Set" (first item)
const myNumber = $item(0).$node["Set"].json["myNumber"];
// Like above but data of the 6th item
const myNumber = $item(5).$node["Set"].json["myNumber"];

// Returns the value of the parameter "channel" of Node "Slack".
// If it contains an expression the value will be resolved with the
// data of the first item.
const channel = $item(0).$node["Slack"].parameter["channel"];
// Like above but resolved with the value of the 10th item.
const channel = $item(9).$node["Slack"].parameter["channel"];

----------------------------------------

TITLE: JSON Expression Format Example
DESCRIPTION: Example of correctly formatted JSON when using expressions in the HTTP Request node. Shows proper nesting of JSON object with double curly brackets for expression syntax.

LANGUAGE: json
CODE:
{
    "myjson":
    {
        "name1": "value1",
        "name2": "value2",
        "array1":
            ["value1","value2"]
    }
}

----------------------------------------

TITLE: Disabling Telemetry Collection in n8n
DESCRIPTION: Environment variable configuration to opt out of n8n's telemetry data collection and version notification features. These settings can be used to disable data collection in self-hosted installations.

LANGUAGE: bash
CODE:
export N8N_DIAGNOSTICS_ENABLED=false

LANGUAGE: bash
CODE:
export N8N_VERSION_NOTIFICATIONS_ENABLED=false

----------------------------------------

TITLE: Executing Docker CLI Commands for n8n
DESCRIPTION: Demonstrates how to run n8n CLI commands within a Docker container. This is necessary when n8n is installed using Docker.

LANGUAGE: sh
CODE:
docker exec -u node -it <n8n-container-name> <n8n-cli-command>

----------------------------------------

TITLE: Converting Data to HTML Table with Custom Styling in n8n
DESCRIPTION: Convert input data to an HTML table with custom styling options. This example shows how to set table attributes, header attributes, row attributes, and cell attributes.

LANGUAGE: JSON
CODE:
{
  "options": {
    "capitalizeHeaders": true,
    "customStyling": true,
    "caption": "My Data Table",
    "tableAttributes": "class=\"my-table\" style=\"border-collapse: collapse;\"",
    "headerAttributes": "style=\"background-color: #f2f2f2; font-weight: bold;\"",
    "rowAttributes": "style=\"border: 1px solid #ddd;\"",
    "cellAttributes": "style=\"padding: 8px;\""
  }
}

----------------------------------------

TITLE: Checking Node Execution Status in N8N JavaScript
DESCRIPTION: Shows how to verify if a specific node has been executed before attempting to use its output. This is useful for preventing reference errors in workflow execution.

LANGUAGE: javascript
CODE:
$("<node-name>").isExecuted

----------------------------------------

TITLE: Using curl for GET Request with Body Parameter
DESCRIPTION: Curl command to make a GET request with a body parameter to trigger the Webhook node.

LANGUAGE: sh
CODE:
curl --request GET <https://your-n8n.url/webhook/path> --data 'key=value'

----------------------------------------

TITLE: Disabling n8n Server Connections via Environment Variables
DESCRIPTION: Set these environment variables to false to prevent your n8n instance from connecting to n8n's servers for updates, templates, and diagnostics.

LANGUAGE: plaintext
CODE:
N8N_DIAGNOSTICS_ENABLED=false
N8N_VERSION_NOTIFICATIONS_ENABLED=false
N8N_TEMPLATES_ENABLED=false

----------------------------------------

TITLE: Python Input Methods for n8n Nodes
DESCRIPTION: Python methods for accessing and manipulating node input data in n8n. Available only in Code node. Includes methods for accessing current item, all items, and node context information.

LANGUAGE: Python
CODE:
_input.item         # Current input item
_input.all()         # All input items
_input.first()       # First input item
_input.last()        # Last input item
_input.params        # Query settings object
_json                # JSON data shorthand
_input.context.noItemsLeft  # Loop status boolean

----------------------------------------

TITLE: Starting a Workflow by ID using n8n CLI
DESCRIPTION: Shows how to execute a saved workflow using its ID through the n8n CLI. This is useful for running workflows directly from the command line.

LANGUAGE: bash
CODE:
n8n execute --id <ID>

----------------------------------------

TITLE: n8n Docker Compose Configuration with Custom Certificates
DESCRIPTION: Docker Compose configuration for n8n with custom certificates. Mounts the local 'pki' directory to '/opt/custom-certificates' and configures container ports and image settings.

LANGUAGE: yaml
CODE:
name: n8n
services:
    n8n:
        volumes:
            - ./pki:/opt/custom-certificates
        container_name: n8n
        ports:
            - 5678:5678
        image: docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Updating Workflow Active Status using n8n CLI
DESCRIPTION: Demonstrates various commands to change the active status of workflows. These commands modify the n8n database and require a restart to take effect.

LANGUAGE: bash
CODE:
n8n update:workflow --id=<ID> --active=false

LANGUAGE: bash
CODE:
n8n update:workflow --id=<ID> --active=true

LANGUAGE: bash
CODE:
n8n update:workflow --all --active=false

LANGUAGE: bash
CODE:
n8n update:workflow --all --active=true

----------------------------------------

TITLE: Importing n8n Workflow for Pinecone Vector Database Population
DESCRIPTION: This code snippet demonstrates how to import an n8n workflow file for populating a Pinecone vector database from a website. It uses a custom shortcode to include the workflow file in the documentation.

LANGUAGE: markdown
CODE:
[[ workflowDemo("file:///advanced-ai/examples/populate_a_pinecone_vector_database_from_a_website.json") ]]

----------------------------------------

TITLE: Importing Required n8n Types
DESCRIPTION: TypeScript import statements for necessary n8n interfaces used in node development.

LANGUAGE: typescript
CODE:
import { INodeType, INodeTypeDescription } from 'n8n-workflow';

----------------------------------------

TITLE: Expression Usage in Sub-nodes vs Root Nodes
DESCRIPTION: Demonstrates the difference in expression handling between sub-nodes and root nodes when processing multiple items. Shows how '$json.name' expression behaves differently in each context.

LANGUAGE: expression
CODE:
{{ $json.name }}

----------------------------------------

TITLE: Slicing First Names with JMESPath
DESCRIPTION: Shows how to use JMESPath to get a slice of first names from a JSON object in n8n, with examples for Expressions and Code nodes in JavaScript and Python.

LANGUAGE: javascript
CODE:
{{$jmespath($json.body.people, "[:2].first")}}

LANGUAGE: javascript
CODE:
let firstTwoNames = $jmespath($json.body.people, "[:2].first");
return {firstTwoNames};

LANGUAGE: python
CODE:
firstTwoNames = _jmespath(_json.body.people, "[:2].first" )
return {"firstTwoNames":firstTwoNames}

----------------------------------------

TITLE: Object Projection with JMESPath for Dog Ages
DESCRIPTION: Demonstrates using JMESPath object projections to extract dog ages from a JSON object in n8n, with examples for Expressions and Code nodes in JavaScript and Python.

LANGUAGE: javascript
CODE:
{{$jmespath($json.body.dogs, "*.age")}}

LANGUAGE: javascript
CODE:
let dogsAges = $jmespath($json.body.dogs, "*.age");
return {dogsAges};

LANGUAGE: python
CODE:
dogsAges = _jmespath(_json.body.dogs, "*.age")
return {"dogsAges": dogsAges}

----------------------------------------

TITLE: Using jmespath() Method in n8n
DESCRIPTION: Demonstrates the basic syntax of the jmespath() method in n8n for both JavaScript and Python. This method allows performing searches on JSON objects using the JMESPath query language.

LANGUAGE: javascript
CODE:
$jmespath(object, searchString)

LANGUAGE: python
CODE:
_jmespath(object, searchString)

----------------------------------------

TITLE: String Transformation in JavaScript Custom Code Tool
DESCRIPTION: Example showing how to access and transform the input string using the Custom Code Tool node. Takes a string input through the 'query' variable and returns its lowercase version.

LANGUAGE: javascript
CODE:
let myString = query;
return myString.toLowerCase();

----------------------------------------

TITLE: Setting Webhook URL for n8n with Reverse Proxy in Bash
DESCRIPTION: This snippet demonstrates how to set the WEBHOOK_URL environment variable for n8n when running behind a reverse proxy. It ensures that n8n displays the correct webhook URL in the Editor UI and registers the proper URLs with external services.

LANGUAGE: bash
CODE:
export WEBHOOK_URL=https://n8n.example.com/

----------------------------------------

TITLE: Running Security Audit for n8n via CLI
DESCRIPTION: Shows the command to run a security audit on the n8n instance to detect common security issues.

LANGUAGE: sh
CODE:
n8n audit

----------------------------------------

TITLE: Output Data from n8n Edit Fields Node
DESCRIPTION: Example of the resulting output data after processing through the Edit Fields node, showing the addition of new fields and modification of existing data.

LANGUAGE: json
CODE:
[
  {
    "id": "23423532",
    "name": "Jay Gatsby",
    "email": "gatsby@west-egg.com",
    "notes": "Keeps asking about a green light??",
    "country": "US",
    "created": "1925-04-10",
    "newKey": "new value",
    "array": [
      23423532,
      "Jay Gatsby"
    ],
    "object": {
      "innerKey1": "new value",
      "innerKey2": "23423532",
      "innerKey3": "Jay Gatsby"
    }
  },
  {
    "id": "23423533",
    "name": "José Arcadio Buendía",
    "email": "jab@macondo.co",
    "notes": "Lots of people named after him. Very confusing",
    "country": "CO",
    "created": "1967-05-05",
    "newKey": "new value",
    "array": [
      23423533,
      "José Arcadio Buendía"
    ],
    "object": {
      "innerKey1": "new value",
      "innerKey2": "23423533",
      "innerKey3": "José Arcadio Buendía"
    }
  },
  {
    "id": "23423534",
    "name": "Max Sendak",
    "email": "info@in-and-out-of-weeks.org",
    "notes": "Keeps rolling his terrible eyes",
    "country": "US",
    "created": "1963-04-09",
    "newKey": "new value",
    "array": [
      23423534,
      "Max Sendak"
    ],
    "object": {
      "innerKey1": "new value",
      "innerKey2": "23423534",
      "innerKey3": "Max Sendak"
    }
  },
  {
    "id": "23423535",
    "name": "Zaphod Beeblebrox",
    "email": "captain@heartofgold.com",
    "notes": "Felt like I was talking to more than one person",
    "country": null,
    "created": "1979-10-12",
    "newKey": "new value",
    "array": [
      23423535,
      "Zaphod Beeblebrox"
    ],
    "object": {
      "innerKey1": "new value",
      "innerKey2": "23423535",
      "innerKey3": "Zaphod Beeblebrox"
    }
  },
  {
    "id": "23423536",
    "name": "Edmund Pevensie",
    "email": "edmund@narnia.gov",
    "notes": "Passionate sailor",
    "country": "UK",
    "created": "1950-10-16",
    "newKey": "new value",
    "array": [
      23423536,
      "Edmund Pevensie"
    ],
    "object": {
      "innerKey1": "new value",
      "innerKey2": "23423536",
      "innerKey3": "Edmund Pevensie"
    }
  }
]

----------------------------------------

TITLE: Working with Workflow Static Data
DESCRIPTION: Demonstrates how to use getWorkflowStaticData method to access and manipulate persistent workflow data, both globally and node-specific.

LANGUAGE: javascript
CODE:
// Get the global workflow static data
const staticData = getWorkflowStaticData('global');
// Get the static data of the node
const staticData = getWorkflowStaticData('node');

// Access its data
const lastExecution = staticData.lastExecution;

// Update its data
staticData.lastExecution = new Date().getTime();

// Delete data
delete staticData.lastExecution;

----------------------------------------

TITLE: Filtering Records in Airtable List Operation
DESCRIPTION: Example of using the Filter By Formula option to filter records based on organization name in Airtable. Shows how to include and exclude records using formula syntax.

LANGUAGE: text
CODE:
{Organization}='n8n'

LANGUAGE: text
CODE:
NOT({Organization}='n8n')

----------------------------------------

TITLE: Importing Workflows and Credentials using n8n CLI
DESCRIPTION: Shows commands for importing workflows and credentials from files or directories. Includes options for specifying input sources and handling separate files.

LANGUAGE: bash
CODE:
n8n import:workflow --input=file.json

LANGUAGE: bash
CODE:
n8n import:workflow --separate --input=backups/latest/

LANGUAGE: bash
CODE:
n8n import:credentials --input=file.json

LANGUAGE: bash
CODE:
n8n import:credentials --separate --input=backups/latest/

----------------------------------------

TITLE: Date Arithmetic with Luxon
DESCRIPTION: Performing date calculations like getting dates before/after the current date.

LANGUAGE: javascript
CODE:
{{$today.minus({days: 7})}}
let sevenDaysAgo = $today.minus({days: 7})

----------------------------------------

TITLE: Setting Environment Variables for Module Access in n8n Code Node
DESCRIPTION: This snippet demonstrates how to set environment variables to enable the use of built-in and external modules in the n8n Code node. It shows examples for allowing all built-in modules, specific built-in modules, and external npm modules.

LANGUAGE: bash
CODE:
# Allows usage of all builtin modules
export NODE_FUNCTION_ALLOW_BUILTIN=*

# Allows usage of only crypto
export NODE_FUNCTION_ALLOW_BUILTIN=crypto

# Allows usage of only crypto and fs
export NODE_FUNCTION_ALLOW_BUILTIN=crypto,fs

# Allow usage of external npm modules.
export NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash

----------------------------------------

TITLE: Basic Luxon Variable Usage in JavaScript
DESCRIPTION: Examples of using n8n's built-in Luxon variables ($now and $today) in expressions and code nodes.

LANGUAGE: javascript
CODE:
{{$now}}
// n8n displays the ISO formatted timestamp
// For example 2022-03-09T14:02:37.065+00:00
{{"Today's date is " + $now}}
// n8n displays "Today's date is <unix timestamp>"
// For example "Today's date is 1646834498755"

----------------------------------------

TITLE: Configuring Send Message Operation in Telegram Node
DESCRIPTION: Example of how to set up the Send Message operation in the Telegram node, including required parameters and additional fields.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing [Telegram credential](/integrations/builtin/credentials/telegram.md).
* **Resource**: Select **Message**.
* **Operation**: Select **Send Message**.
* **Chat ID**: Enter the Chat ID or username of the channel you wish to send the message to in the format `@channelusername`.
* **Text**: Enter the text to send, max 4096 characters after entities parsing.

### Send Message additional fields

Use the **Additional Fields** to further refine the behavior of the node using optional fields in Telegram's sendMessage method. Select **Add Field** to add any of the following:

* **Append n8n Attribution**: Choose whether to include the phrase `This message was sent automatically with n8n` to the end of the message (turned on, default) or not (turned off).
* **Disable Notification**: Choose whether to send the notification silently (turned on) or with a standard notification (turned off).
* **Disable WebPage Preview**: Select whether you want to enable link previews for links in this message (turned off) or disable link previews for links in this message (turned on). This sets the `link_preview_options` parameter for `is_disabled`. Refer to the [LinkPreviewOptions](https://core.telegram.org/bots/api#linkpreviewoptions){:target=_blank .external-link} documentation for more information.
* **Parse Mode**: Enter the parser to use for any related text. Options include **HTML** (default), **Markdown (Legacy)**, **MarkdownV2**. Refer to Telegram's [Formatting options](https://core.telegram.org/bots/api#formatting-options){:target=_blank .external-link} for more information on these options.
* **Reply To Message ID**: If the message is a reply, enter the ID of the message it's replying to.
* **Message Thread ID**: Enter a unique identifier for the target message thread (topic) of the forum; for forum supergroups only.

----------------------------------------

TITLE: Exporting Workflows and Credentials using n8n CLI
DESCRIPTION: Illustrates various commands for exporting workflows and credentials. Options include exporting all items, specific items by ID, and creating backups with different formatting options.

LANGUAGE: bash
CODE:
n8n export:workflow --all

LANGUAGE: bash
CODE:
n8n export:workflow --id=<ID> --output=file.json

LANGUAGE: bash
CODE:
n8n export:workflow --all --output=backups/latest/file.json

LANGUAGE: bash
CODE:
n8n export:workflow --backup --output=backups/latest/

LANGUAGE: bash
CODE:
n8n export:credentials --all

LANGUAGE: bash
CODE:
n8n export:credentials --id=<ID> --output=file.json

LANGUAGE: bash
CODE:
n8n export:credentials --all --output=backups/latest/file.json

LANGUAGE: bash
CODE:
n8n export:credentials --backup --output=backups/latest/

LANGUAGE: bash
CODE:
n8n export:credentials --all --decrypted --output=backups/decrypted.json

----------------------------------------

TITLE: JSON Configuration File Example for n8n
DESCRIPTION: Provides an example of a JSON configuration file for n8n, showing how to set various options such as execution settings, timezone, and node exclusions.

LANGUAGE: json
CODE:
{
 "executions": {
  "saveDataOnSuccess": "none"
 },
 "generic": {
  "timezone": "Europe/Berlin"
 },
 "nodes": {
  "exclude": "[\"n8n-nodes-base.executeCommand\",\"n8n-nodes-base.writeBinaryFile\"]"
 }
}

----------------------------------------

TITLE: Comparing Datasets with Fruit Information in JSON
DESCRIPTION: This snippet shows two JSON datasets containing fruit information (type and color) that can be compared using the Compare Datasets node. It demonstrates how the 'Multiple Matches' option affects the comparison results.

LANGUAGE: json
CODE:
// Input 1
[
	{
		"fruit": {
			"type": "apple",
			"color": "red"
		}
	},
			{
		"fruit": {
			"type": "apple",
			"color": "red"
		}
	},
			{
		"fruit": {
			"type": "banana",
			"color": "yellow"
		}
	}
]
// Input 2
[
	{
		"fruit": {
			"type": "apple",
			"color": "red"
		}
	},
			{
		"fruit": {
			"type": "apple",
			"color": "red"
		}
	},
			{
		"fruit": {
			"type": "banana",
			"color": "yellow"
		}
	}
]

----------------------------------------

TITLE: Getting Execution Cancel Signal Method
DESCRIPTION: Method to handle workflow execution cancellation. Used to stop function execution when workflow stops, particularly useful for custom chains or agents.

LANGUAGE: typescript
CODE:
this.getExecutionCancelSignal()

----------------------------------------

TITLE: Configuring Delete Chat Message Operation in Telegram Node
DESCRIPTION: Example of how to set up the Delete Chat Message operation in the Telegram node, including required parameters like Chat ID and Message ID.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing [Telegram credential](/integrations/builtin/credentials/telegram.md).
* **Resource**: Select **Message**.
* **Operation**: Select **Delete Chat Message**.
* **Chat ID**: Enter the Chat ID or username of the channel you wish to delete in the format `@channelusername`.
* **Message ID**: Enter the unique identifier of the message you want to delete.

----------------------------------------

TITLE: Using _now and _today in Python
DESCRIPTION: Shows the usage of _now and _today methods in Python within n8n. _now returns a Luxon object with the current timestamp, while _today returns a Luxon object with the current timestamp rounded down to the day.

LANGUAGE: Python
CODE:
_now # Equivalent to DateTime.now()
_today # Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })

----------------------------------------

TITLE: Date String to Luxon Conversion
DESCRIPTION: Converting date strings to Luxon DateTime objects using fromISO() and fromFormat() methods.

LANGUAGE: javascript
CODE:
{{DateTime.fromISO('2019-06-23T00:00:00.00')}}
{{DateTime.fromFormat("23-06-2019", "dd-MM-yyyy")}}

----------------------------------------

TITLE: Retrieving Row ID from Node Output
DESCRIPTION: n8n expression to access the Row ID from a Grist node's output data

LANGUAGE: expression
CODE:
{{$node["GristNodeName"].json["id"]}}

----------------------------------------

TITLE: Starting Webhook Processor
DESCRIPTION: Commands to start the n8n webhook processor for handling incoming webhook requests.

LANGUAGE: bash
CODE:
./packages/cli/bin/n8n webhook

LANGUAGE: bash
CODE:
docker run --name n8n-queue -p 5679:5678 -e "EXECUTIONS_MODE=queue" docker.n8n.io/n8nio/n8n webhook

----------------------------------------

TITLE: Configuring Docker Compose for n8n and Traefik
DESCRIPTION: A Docker Compose configuration file that sets up n8n with Traefik as a reverse proxy. It includes SSL configuration, volume mounts, and environment variables for n8n.

LANGUAGE: yaml
CODE:
version: "3.7"

services:
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n

volumes:
  traefik_data:
    external: true
  n8n_data:
    external: true

----------------------------------------

TITLE: Extracting Data from CSV Using Extract From File Node
DESCRIPTION: Example JSON output from the Extract From File node when processing a CSV file. Shows how the node converts CSV rows into JSON objects.

LANGUAGE: json
CODE:
{
  "row": {
  "0": "apple",
  "1": "1",
  "2": "2",
  "3": "3"
  }
  ...
}

----------------------------------------

TITLE: Sample JSON Output from Previous Node in n8n
DESCRIPTION: This JSON snippet represents a sample output from a previous node in the n8n workflow. It contains an array of objects, each with id and name properties.

LANGUAGE: json
CODE:
[
  {
    "id": "23423532",
    "name": "Jay Gatsby"
  },
  {
    "id": "23423533",
    "name": "José Arcadio Buendía"
  },
  {
    "id": "23423534",
    "name": "Max Sendak"
  },
  {
    "id": "23423535",
    "name": "Zaphod Beeblebrox"
  },
  {
    "id": "23423536",
    "name": "Edmund Pevensie"
  }
]

----------------------------------------

TITLE: Accessing Row ID in Grist Expression
DESCRIPTION: Formula expression for creating a Row ID column in Grist using the $id system variable

LANGUAGE: grist
CODE:
$id

----------------------------------------

TITLE: Frontend External Hooks Configuration
DESCRIPTION: Example of implementing frontend external hooks for node view and workflow interactions.

LANGUAGE: javascript
CODE:
window.n8nExternalHooks = {
  nodeView: {
    mount: [
      function (store, meta) {
        // do something
      },
    ],
    createNodeActiveChanged: [
      function (store, meta) {
        // do something
      },
      function (store, meta) {
        // do something else
      },
    ],
    addNodeButton: [
      function (store, meta) {
        // do something
      },
    ],
  },
};

----------------------------------------

TITLE: Example Usage of getBinaryDataBuffer() in JavaScript for n8n
DESCRIPTION: This example shows how to retrieve the binary data buffer for the first input item with the 'data' property in n8n.

LANGUAGE: javascript
CODE:
let binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(0, 'data');
// Returns the data in the binary buffer for the first input item

----------------------------------------

TITLE: Starting and Stopping n8n with Docker Compose
DESCRIPTION: Commands to start and stop the n8n Docker Compose setup. These commands manage the entire application stack defined in the docker-compose.yml file.

LANGUAGE: bash
CODE:
sudo docker compose up -d
sudo docker compose stop

----------------------------------------

TITLE: Implementing Logger in n8n Development - JavaScript
DESCRIPTION: Example showing how to import and use the LoggerProxy for adding logs in n8n development, including metadata and formatting best practices.

LANGUAGE: javascript
CODE:
// You have to import the LoggerProxy. We rename it to Logger to make it easier

import {
	LoggerProxy as Logger
} from 'n8n-workflow';

// Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties

Logger.info(`Polling trigger initiated for workflow "${workflow.name}"`, {workflowName: workflow.name, workflowId: workflow.id});

----------------------------------------

TITLE: Specifying Column Data Types in QuestDB
DESCRIPTION: Demonstrates how to specify data types for columns when working with QuestDB in n8n. Shows the syntax for defining integer and text column types using the column:type format in the Columns field.

LANGUAGE: sql
CODE:
id:int,name:text

----------------------------------------

TITLE: Curl Command for Applying Credentials
DESCRIPTION: Command to apply OAuth credentials to n8n instance using curl.

LANGUAGE: bash
CODE:
curl -H "Content-Type: application/json" --data @oauth-credentials.json http://localhost:5678/send-credentials

----------------------------------------

TITLE: Defining n8n Persistent Volume in Kubernetes YAML
DESCRIPTION: YAML configuration for creating a persistent volume claim for n8n file storage in Kubernetes.

LANGUAGE: yaml
CODE:
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0

----------------------------------------

TITLE: Git Node Operations Reference
DESCRIPTION: Lists all available Git operations in the n8n Git node, including their parameters and configuration options. Covers basic Git commands like add, commit, push, pull, as well as configuration and user setup.

LANGUAGE: markdown
CODE:
* Repository Path: The local path of the git repository
* Authentication: Select between Authenticate or None
* Paths to Add: Comma-separated list of files/folders
* Message: Commit message
* Name: Tag name
* Key: Configuration key name
* Value: Configuration value
* Target Repository: URL or path of repository to push to
* Source Repository: URL or path of repository to clone

----------------------------------------

TITLE: Data Reference in Code Node
DESCRIPTION: Demonstrates how to reference and modify data from previous nodes using n8n's built-in methods.

LANGUAGE: javascript
CODE:
let items = $input.all();
items[0].json.workEmail = items[0].json.email['work'];
return items;

----------------------------------------

TITLE: Reformatted KoboToolbox Submission Data
DESCRIPTION: Example of submission data after applying n8n's reformatting options, showing restructured hierarchical data with proper data types and GeoJSON formatting.

LANGUAGE: json
CODE:
{
  "id": 471987,
  "formhub": {
    "uuid": "189436bb09a54957bfcc798e338b54d6"
  },
  "start": "2021-12-05T16:13:38.527+02:00",
  "end": "2021-12-05T16:15:33.407+02:00",
  "Field_Details": {
    "Field_Name": "Test Fields",
    "Field_Location": {
      "lat": -1.932914,
      "lon": 30.078211
    },
    "Field_Shape": {
      "type": "polygon",
      "coordinates": [
        {
          "lat": -1.932914,
          "lon": 30.078211
        },
        {
          "lat": -1.933011,
          "lon": 30.078085
        },
        {
          "lat": -1.933257,
          "lon": 30.078004
        },
        {
          "lat": -1.933338,
          "lon": 30.078197
        },
        {
          "lat": -1.933107,
          "lon": 30.078299
        },
        {
          "lat": -1.932914,
          "lon": 30.078211
        }
      ]
    },
    "Crops_Grown": [
      "maize",
      "beans",
      "avocado"
    ],
    "Field_Size_sqm": 2300
  },
  "version": "veGcULpqP6JNFKRJbbMvMs",
  "meta": {
    "instanceID": "uuid:2356cbbe-c1fd-414d-85c8-84f33e92618a"
  },
  "xform_id_string": "ajXVJpBkTD5tB4Nu9QXpgm",
  "uuid": "2356cbbe-c1fd-414d-85c8-84f33e92618a",
  "attachments": [],
  "status": "submitted_via_web",
  "geolocation": {
    "lat": -1.932914,
    "lon": 30.078211
  },
  "submission_time": "2021-12-05T14:15:44",
  "tags": [],
  "notes": [],
  "validation_status": {},
  "submitted_by": null
}

----------------------------------------

TITLE: Email Restoration using itemMatching in JavaScript
DESCRIPTION: JavaScript code that uses itemMatching to restore email addresses from the Customer Datastore node to the current data structure.

LANGUAGE: javascript
CODE:
for(let i=0; i<$input.all().length; i++) {
	$input.all()[i].json.restoreEmail = $('Customer Datastore (n8n training)').itemMatching(i).json.email;
}
return $input.all();

----------------------------------------

TITLE: Setting n8n Encryption Key via Environment Variable
DESCRIPTION: Sets the N8N_ENCRYPTION_KEY environment variable that n8n will use for encrypting credentials. This must be set for all workers when running in queue mode.

LANGUAGE: bash
CODE:
export N8N_ENCRYPTION_KEY=<SOME RANDOM STRING>

----------------------------------------

TITLE: Setting Credentials Overwrite Environment Variable
DESCRIPTION: Example of setting credential overwrites using environment variables in n8n.

LANGUAGE: bash
CODE:
export CREDENTIALS_OVERWRITE_ENDPOINT=send-credentials

----------------------------------------

TITLE: Deleting Kubernetes Resources
DESCRIPTION: Command to remove all resources created by the Kubernetes manifests in the current directory.

LANGUAGE: shell
CODE:
kubectl delete -f .

----------------------------------------

TITLE: Basic Cron Expression Examples
DESCRIPTION: Common cron expression patterns for different scheduling intervals including seconds, minutes, hours, days, weeks, and months.

LANGUAGE: cron
CODE:
*/10 * * * * *    # Every 10 seconds
*/5 * * * *      # Every 5 minutes
0 * * * *        # Every hour on the hour
0 6 * * *        # At 6:00 AM every day
0 12 * * 1       # At noon every Monday
0 0 1 * *        # At midnight on the 1st of every month
0 0 */3 * *      # At midnight every 3rd day
0 9 * * 1-5      # At 9:00 AM Monday through Friday
0 9-17 * * *     # Every hour from 9:00 AM to 5:00 PM every day
0 0 1 1,4,7,10 * # At midnight on the 1st of January, April, July, and October

----------------------------------------

TITLE: Array of Objects Example in JavaScript
DESCRIPTION: Shows how to structure an array of objects containing multiple turtle characters with their properties.

LANGUAGE: javascript
CODE:
var turtles = [
	{
		name: 'Michelangelo',
		color: 'orange'
	},
	{
		name: 'Donatello',
		color: 'purple'
	},
	{
		name: 'Raphael',
		color: 'red'
	},
	{
		name: 'Leonardo',
		color: 'blue'
	}
];

----------------------------------------

TITLE: Setting Maximum Execution Time for Individual Workflows in n8n (Bash)
DESCRIPTION: Sets the maximum execution time for individual workflows to two hours (7200 seconds) using the EXECUTIONS_TIMEOUT_MAX environment variable. This allows for per-workflow timeout limits.

LANGUAGE: bash
CODE:
export EXECUTIONS_TIMEOUT_MAX=7200

----------------------------------------

TITLE: Displaying 401 Unauthorized Error JSON Response in Gmail Trigger
DESCRIPTION: This code snippet shows the JSON response for a 401 unauthorized error in the Gmail Trigger node. The error indicates that the client is unauthorized to retrieve access tokens or is not authorized for the requested scopes.

LANGUAGE: json
CODE:
{
  "error": "unauthorized_client",
  "error_description": "Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested."
}

----------------------------------------

TITLE: Python JMESPath Implementation
DESCRIPTION: The _jmespath() method enables JMESPath searches on JSON objects in n8n's Python environment. This functionality is only available within the Code node and cannot be used in expressions.

LANGUAGE: python
CODE:
_jmespath()

----------------------------------------

TITLE: Configuring Heroku Deployment with heroku.yml
DESCRIPTION: Defines the application configuration for Heroku, including PostgreSQL addon setup and Docker-based build instructions using a Dockerfile.

LANGUAGE: yaml
CODE:
setup:
  addons:
    - plan: heroku-postgresql
build:
  docker:
    web: Dockerfile

----------------------------------------

TITLE: Setting Custom Node Extensions Path in Bash
DESCRIPTION: Sets an environment variable to specify additional folders where n8n should look for custom nodes. Multiple paths can be specified using semicolon separation.

LANGUAGE: bash
CODE:
export N8N_CUSTOM_EXTENSIONS="/home/jim/n8n/custom-nodes;/data/n8n/nodes"

----------------------------------------

TITLE: Displaying 401 Unauthorized Error in Gmail Node
DESCRIPTION: This snippet shows the full text of a 401 unauthorized error that occurs when there's an issue with the credential's scopes or permissions.

LANGUAGE: json
CODE:
401 - {"error":"unauthorized_client","error_description":"Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested."}

----------------------------------------

TITLE: Environment Variables Configuration for n8n on Heroku
DESCRIPTION: Essential environment variables that need to be configured for n8n deployment, including encryption key and webhook URL settings.

LANGUAGE: plaintext
CODE:
N8N_ENCRYPTION_KEY=<your-encryption-key>
WEBHOOK_URL=<your-app-name>

----------------------------------------

TITLE: Running Multiple Commands on Separate Lines in Bash
DESCRIPTION: Example demonstrating how to execute multiple shell commands by placing them on separate lines. Shows change directory (cd) followed by list (ls) command.

LANGUAGE: bash
CODE:
cd bin
ls

----------------------------------------

TITLE: Basic Object Example in JSON
DESCRIPTION: Demonstrates the basic structure of a JSON object with name and color properties.

LANGUAGE: json
CODE:
{
	name: 'Michelangelo',
	color: 'blue'
}

----------------------------------------

TITLE: Setting Environment Variables via Command Line for Docker
DESCRIPTION: Shows how to set environment variables for n8n when using Docker by using the -e flag in the docker run command.

LANGUAGE: bash
CODE:
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e N8N_TEMPLATES_ENABLED="false" \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Setting Environment Variables in Docker Compose YAML
DESCRIPTION: Demonstrates how to set environment variables for n8n in a docker-compose.yaml file.

LANGUAGE: yaml
CODE:
n8n:
    environment:
      - N8N_TEMPLATES_ENABLED=false

----------------------------------------

TITLE: JSON Configuration for Enabling Metrics in n8n
DESCRIPTION: Shows the correct JSON structure to enable metrics in n8n, which isn't immediately obvious from the environment variables reference.

LANGUAGE: json
CODE:
{
	"endpoints": {
		"metrics": {
			"enable": true
		}
	}
}

----------------------------------------

TITLE: Configuring Timezone and Locale Environment Variables in n8n
DESCRIPTION: This table describes two environment variables used for setting the timezone and default language locale in n8n. GENERIC_TIMEZONE sets the instance timezone, while N8N_DEFAULT_LOCALE sets the UI language.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `GENERIC_TIMEZONE` | * | `America/New_York` |The n8n instance timezone. Important for schedule nodes (such as Cron). |
| `N8N_DEFAULT_LOCALE` | String | `en` | A locale identifier, compatible with the [Accept-Language header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language){:target="_blank" .external-link}. n8n doesn't support regional identifiers, such as `de-AT`. When running in a locale other than the default, n8n displays UI strings in the selected locale, and falls back to `en` for any untranslated strings. |

----------------------------------------

TITLE: Dynamically Populating SQL IN Groups with Parameters in Postgres
DESCRIPTION: Shows how to construct an IN group query with query parameters in Postgres using n8n expressions. This method provides extra protection by automatically sanitizing input.

LANGUAGE: sql
CODE:
SELECT color, shirt_size FROM shirts WHERE shirt_size IN ({{ $json.input_shirt_sizes.map((i, pos) => "$" + (pos+1)).join(', ') }});

----------------------------------------

TITLE: Cloning n8n Docker Caddy Configuration Repository
DESCRIPTION: Commands to clone the n8n Docker Caddy configuration repository and change to the repository directory.

LANGUAGE: shell
CODE:
git clone https://github.com/n8n-io/n8n-docker-caddy.git
cd n8n-docker-caddy

----------------------------------------

TITLE: Single Item from Multiple Items Transformation
DESCRIPTION: Shows how to combine multiple items into a single item with an array.

LANGUAGE: javascript
CODE:
return [
	{
		json: {
			data_object: $input.all().map(item => item.json)
		}
    }
];

----------------------------------------

TITLE: Defining Source Control Environment Variables in Markdown
DESCRIPTION: This markdown table defines the environment variable N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE, which sets the default SSH key type for source control setup in n8n. The variable accepts a string value, with 'ed25519' as the default, and can be set to 'rsa' to use RSA as the default SSH key type.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE` | String | `ed25519` | Set to `rsa` to make RSA the default SSH key type for [Source control setup](/source-control-environments/setup.md). |

----------------------------------------

TITLE: Using curl for GET Request to Send File
DESCRIPTION: Curl command to make a GET request that sends a file to the Webhook node.

LANGUAGE: sh
CODE:
curl --request GET <https://your-n8n.url/webhook/path> --from 'key=@/path/to/file'

----------------------------------------

TITLE: Setting Environment Variables File Path for npm
DESCRIPTION: Demonstrates how to set the path to a JSON configuration file for n8n when using npm, including examples for both Bash and PowerShell.

LANGUAGE: bash
CODE:
# Bash - Single file
export N8N_CONFIG_FILES=/<path-to-config>/my-config.json
# Bash - Multiple files are comma-separated
export N8N_CONFIG_FILES=/<path-to-config>/my-config.json,/<path-to-config>/production.json

# PowerShell - Single file, persist for current user
# Note that setting scope (Process, User, Machine) has no effect on Unix systems
[Environment]::SetEnvironmentVariable('N8N_CONFIG_FILES', '<path-to-config>\config.json', 'User')

----------------------------------------

TITLE: Configuring Caddy Reverse Proxy
DESCRIPTION: Command to edit the Caddy configuration file and example configuration for reverse proxy setup.

LANGUAGE: shell
CODE:
nano caddy_config/Caddyfile

LANGUAGE: text
CODE:
n8n.<domain>.<suffix> {
    reverse_proxy n8n:5678 {
      flush_interval -1
    }
}

----------------------------------------

TITLE: Environment Variables Configuration Table
DESCRIPTION: Table of environment variables for n8n workflow configuration, including variable names, types, default values, and descriptions for workflow settings like onboarding, activation batch size, caller policies, tags, and default naming.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `N8N_ONBOARDING_FLOW_DISABLED` | Boolean | `false` | Whether to disable onboarding tips when creating a new workflow (true) or not (false). |
| `N8N_WORKFLOW_ACTIVATION_BATCH_SIZE` | Number | `1` | How many workflows to activate simultaneously during startup. 
| `N8N_WORKFLOW_CALLER_POLICY_DEFAULT_OPTION` | String | `workflowsFromSameOwner` | Which workflows can call a workflow. Options are: `any`, `none`, `workflowsFromAList`, `workflowsFromSameOwner`. This feature requires [Workflow sharing](/workflows/sharing.md). |
| `N8N_WORKFLOW_TAGS_DISABLED` | Boolean | `false` | Whether to disable workflow tags (true) or enable tags (false). |
| `WORKFLOWS_DEFAULT_NAME` | String | `My workflow` | The default name used for new workflows. |

----------------------------------------

TITLE: Using curl for GET Request without Parameters
DESCRIPTION: Basic curl command to make a GET request to trigger the Webhook node without any parameters.

LANGUAGE: sh
CODE:
curl --request GET <https://your-n8n.url/webhook/path>

----------------------------------------

TITLE: Starting n8n and Caddy with Docker Compose
DESCRIPTION: Command to start n8n and Caddy services using Docker Compose in detached mode.

LANGUAGE: shell
CODE:
docker compose up -d

----------------------------------------

TITLE: Microsoft Outlook Node Operations List
DESCRIPTION: List of supported operations in the Microsoft Outlook node, organized by category including Calendar, Contact, Draft, Event, Folder, Message, and Message Attachment operations.

LANGUAGE: markdown
CODE:
* Calendar
	* Create
	* Delete
	* Get
	* Get Many
	* Update
* Contact
	* Create
	* Delete
	* Get
	* Get Many
	* Update
* Draft
	* Create
	* Delete
	* Get
	* Send
	* Update
* Event
	* Create
	* Delete
	* Get
	* Get Many
	* Update
* Folder
	* Create
	* Delete
	* Get
	* Get Many
	* Update
* Folder Message
    * Get Many
* Message
	* Delete
	* Get
	* Get Many
	* Move
	* Reply
	* Send
	* Update
* Message Attachment
	* Add
	* Download
	* Get
	* Get Many

----------------------------------------

TITLE: Return Data Format Example
DESCRIPTION: Shows the correct format for returning data from an n8n Code node to prevent 'Array of items' errors.

LANGUAGE: javascript
CODE:
return [{ json: {totalBooked, bookedSum} }]

----------------------------------------

TITLE: Defining License Environment Variables for n8n
DESCRIPTION: This markdown table defines various environment variables used to configure license settings in n8n. It includes variables for hiding the usage page, setting license activation keys, controlling auto-renewal behavior, specifying license server URLs, and configuring proxy settings for license retrieval.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `N8N_HIDE_USAGE_PAGE` | boolean | `false` | Hide the usage and plans page in the app. |
| `N8N_LICENSE_ACTIVATION_KEY` | String | `''` | Activation key to initialize license. Not applicable if the n8n instance was already activated. |
| `N8N_LICENSE_AUTO_RENEW_ENABLED` | Boolean | `true` | Enables (true) or disables (false) autorenewal for licenses. <br>If disabled, you need to manually renew the license every 10 days by navigating to **Settings** > **Usage and plan**, and pressing `F5`. Failure to renew the license will disable Enterprise features. |
| `N8N_LICENSE_AUTO_RENEW_OFFSET` | Number | `60 * 60 * 72` (72 hours) | Time in seconds before expiry a license should automatically renew. |
| `N8N_LICENSE_SERVER_URL` | String | `http://license.n8n.io/v1` | Server URL to retrieve license. |
| `N8N_LICENSE_TENANT_ID` | Number | `1` | Tenant ID associated with the license. Only set this variable if explicitly instructed by n8n. |
| `http_proxy_license_server` | String | `http://user:pass@proxy:port`| Proxy server URL for HTTP requests to retrieve license. This variable name needs to be lowercase. |
| `https_proxy_license_server` | String | `https://user:pass@proxy:port` | Proxy server URL for HTTPS requests to retrieve license. This variable name needs to be lowercase. |

----------------------------------------

TITLE: Environment Variables Configuration Table for n8n Credentials
DESCRIPTION: Table defining three key environment variables for credential management: CREDENTIALS_OVERWRITE_DATA for overwriting credentials, CREDENTIALS_OVERWRITE_ENDPOINT for specifying API endpoint, and CREDENTIALS_DEFAULT_NAME for setting default credential names.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `CREDENTIALS_OVERWRITE_DATA`<br>/`_FILE` | * | - | Overwrites for credentials. |
| `CREDENTIALS_OVERWRITE_ENDPOINT` | String | - | The API endpoint to fetch credentials. |
| `CREDENTIALS_DEFAULT_NAME` | String | `My credentials` | The default name for credentials. |

----------------------------------------

TITLE: Database Configuration Environment Variables for n8n
DESCRIPTION: Configuration variables for setting up n8n databases, including general database settings, PostgreSQL-specific configurations, and SQLite options. By default, n8n uses SQLite but also supports PostgreSQL.

LANGUAGE: yaml
CODE:
DB_TYPE: sqlite|postgresdb
DB_TABLE_PREFIX: {prefix}

# PostgreSQL Settings
DB_POSTGRESDB_DATABASE: n8n
DB_POSTGRESDB_HOST: localhost
DB_POSTGRESDB_PORT: 5432
DB_POSTGRESDB_USER: postgres
DB_POSTGRESDB_PASSWORD: {password}
DB_POSTGRESDB_POOL_SIZE: 2
DB_POSTGRESDB_CONNECTION_TIMEOUT: 20000
DB_POSTGRESDB_SCHEMA: public
DB_POSTGRESDB_SSL_ENABLED: false
DB_POSTGRESDB_SSL_CA: {ca}
DB_POSTGRESDB_SSL_CERT: {cert}
DB_POSTGRESDB_SSL_KEY: {key}
DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED: true

# SQLite Settings
DB_SQLITE_POOL_SIZE: 0
DB_SQLITE_VACUUM_ON_STARTUP: false

----------------------------------------

TITLE: Defining Form Fields Using JSON in n8n
DESCRIPTION: Shows how to define form fields using a JSON array of objects in n8n. The example includes various field types such as date, dropdown, email, file, number, password, text, and textarea, along with their configuration options.

LANGUAGE: javascript
CODE:
[
	{
		"fieldLabel": "Date Field",
		"fieldType": "date",
		"formatDate": "mm/dd/yyyy", // how to format received date in n8n
		"requiredField": true
	},
	{
		"fieldLabel": "Dropdown Options",
		"fieldType": "dropdown",
		"fieldOptions": {
			"values": [
				{
					"option": "option 1"
				},
				{
					"option": "option 2"
				}
			]
		},
		"requiredField": true
	},
	{
		"fieldLabel": "Multiselect",
		"fieldType": "dropdown",
		"fieldOptions": {
			"values": [
				{
					"option": "option 1"
				},
				{
					"option": "option 2"
				}
			]
		},
		"multiselect": true // setting to true allows multi-select
	},
	{
		"fieldLabel": "Email",
		"fieldType": "email",
		"placeholder": "me@mail.con"
	},
	{
		"fieldLabel": "File",
		"fieldType": "file",
		"multipleFiles": true, // setting to true allows multiple files selection
		"acceptFileTypes": ".jpg, .png" // allowed file types
	},
	{
		"fieldLabel": "Number",
		"fieldType": "number"
	},
	{
		"fieldLabel": "Password",
		"fieldType": "password"
	},
	{
		// "fieldType": "text" can be omitted since it's the default type
		"fieldLabel": "Text"
	},
	{
		"fieldLabel": "Textarea",
		"fieldType": "textarea"
	}
]

----------------------------------------

TITLE: Accessing n8n Health Check Endpoint
DESCRIPTION: Shows how to access the /healthz endpoint for basic health checking of an n8n instance. This endpoint returns a 200 status code if the instance is reachable, but doesn't indicate database status.

LANGUAGE: plaintext
CODE:
<your-instance-url>/healthz

----------------------------------------

TITLE: Box Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Box node documentation page, specifying title, description, and content type.

LANGUAGE: yaml
CODE:
title: Box node documentation
description: Learn how to use the Box node in n8n. Follow technical documentation to integrate Box node into your workflows.
contentType: [integration, reference]

----------------------------------------

TITLE: Configuring Google Sheets Operations in n8n
DESCRIPTION: Configuration examples for various Google Sheets operations including sheet manipulation, row operations, and data management. Shows required parameters and options for each operation type.

LANGUAGE: markdown
CODE:
- **Credential to connect with**: Create or select an existing Google Sheets credentials
- **Resource**: Select **Sheet Within Document**
- **Operation**: Select desired operation
- **Document**: Choose spreadsheet by list/URL/ID
- **Sheet**: Select target sheet by list/URL/ID/name

----------------------------------------

TITLE: Enabling S3 Storage Mode for n8n Binary Data
DESCRIPTION: Shell commands to configure n8n to use S3 as the default binary data storage mode while keeping filesystem as a fallback option.

LANGUAGE: sh
CODE:
export N8N_AVAILABLE_BINARY_DATA_MODES=filesystem,s3
export N8N_DEFAULT_BINARY_DATA_MODE=s3

----------------------------------------

TITLE: Correct Data Structure Format in n8n Code Node
DESCRIPTION: Demonstrates the expected data structure format for the Code node in n8n. Data must be returned as an array of objects, with each object containing a 'json' key.

LANGUAGE: javascript
CODE:
[
  {
    "json": {
	  // your data goes here
	}
  }
]

----------------------------------------

TITLE: Setting Global Workflow Timeout in n8n (Bash)
DESCRIPTION: Sets the global workflow timeout to one hour (3600 seconds) using the EXECUTIONS_TIMEOUT environment variable. This determines how long workflows can run before being canceled.

LANGUAGE: bash
CODE:
export EXECUTIONS_TIMEOUT=3600

----------------------------------------

TITLE: Accessing n8n Readiness Check Endpoint
DESCRIPTION: Demonstrates how to access the /healthz/readiness endpoint. This endpoint returns a 200 status code if the database is connected and migrated, indicating the instance is ready to accept traffic.

LANGUAGE: plaintext
CODE:
<your-instance-url>/healthz/readiness

----------------------------------------

TITLE: Setting Queue Execution Mode
DESCRIPTION: Configures n8n to run in queue mode by setting the EXECUTIONS_MODE environment variable.

LANGUAGE: bash
CODE:
export EXECUTIONS_MODE=queue

----------------------------------------

TITLE: Disabling Production Webhooks on Main Process
DESCRIPTION: Environment variable to disable webhook processing on the main n8n process when using dedicated webhook processors.

LANGUAGE: bash
CODE:
export N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true

----------------------------------------

TITLE: Node Configuration Example - AI Transform
DESCRIPTION: Demonstrates the basic structure of configuring the AI Transform node, showing the two main parameters: Instructions and Transformation Code. The node is only available on Cloud plans.

LANGUAGE: markdown
CODE:
### Instructions

Enter your prompt for the AI and click the **Generate code** button to automatically populate the **Transformation Code**. For example, you can specify how you want to process or categorize your data.

### Transformation Code

The code snippet generated by the node is read-only. To edit this code, adjust your prompt in **Instructions** or copy and paste it into a Code node.

----------------------------------------

TITLE: Enabling Metrics and Health Checks in Self-hosted n8n
DESCRIPTION: Configuration settings to enable the /metrics and /healthz endpoints in a self-hosted n8n instance. These endpoints are disabled by default and need to be explicitly enabled using environment variables.

LANGUAGE: shell
CODE:
# metrics
N8N_METRICS=true
# healthz
QUEUE_HEALTH_CHECK_ACTIVE=true

----------------------------------------

TITLE: Sending Discord Messages with Embeds via HTTP Request
DESCRIPTION: This JSON snippet shows how to structure the body of an HTTP POST request to send a Discord message with embeds. It can be used with the HTTP Request node as an alternative to the Discord node.

LANGUAGE: json
CODE:
{
	"content": "Test",
	"embeds": [
		{
			"author": "My Name",
			"url": "https://discord.js.org",
			"fields": [
				{
					"name": "Regular field title",
					"value": "Some value here"
				}
			],
			"footer": {
				"text": "Some footer text here",
				"icon_url": "https://i.imgur.com/AfFp7pu.png"
			}
		}
	]
}

----------------------------------------

TITLE: Setting Fields with JSON Output in n8n Edit Fields Node
DESCRIPTION: Example of using JSON Output mode in the Edit Fields node to add new fields and modify existing data, including arrays and nested objects.

LANGUAGE: json
CODE:
{
  "newKey": "new value",
  "array": [{{ $json.id }},"{{ $json.name }}"],
  "object": {
    "innerKey1": "new value",
    "innerKey2": "{{ $json.id }}",
    "innerKey3": "{{ $json.name }}",
 }
}

----------------------------------------

TITLE: Deleting Kubernetes Resources
DESCRIPTION: Command to remove all resources created by the manifests in the current directory.

LANGUAGE: shell
CODE:
kubectl delete -f .

----------------------------------------

TITLE: Setting Certificate Permissions in n8n Container
DESCRIPTION: Docker command to set proper ownership permissions for the imported certificates in the n8n container. Runs as root user to change ownership to user/group 1000.

LANGUAGE: bash
CODE:
docker exec --user 0 n8n chown -R 1000:1000 /opt/custom-certificates

----------------------------------------

TITLE: Querying Postgres with SQL IN Comparison
DESCRIPTION: Demonstrates how to use the SQL IN comparison construct in Postgres to make comparisons between groups of values.

LANGUAGE: sql
CODE:
SELECT color, shirt_size FROM shirts WHERE shirt_size IN ('small', 'medium', 'large');

----------------------------------------

TITLE: Applying Namespace Manifest Separately
DESCRIPTION: Command to apply only the namespace manifest file to resolve potential namespace errors.

LANGUAGE: shell
CODE:
kubectl apply -f namespace.yaml

----------------------------------------

TITLE: Handling Null or Undefined Values in JavaScript
DESCRIPTION: These snippets show alternative ways to handle null or undefined values using the nullish coalescing operator (??) and the logical OR operator (||). Both operators provide a fallback value if the variable is null, undefined, or falsy.

LANGUAGE: javascript
CODE:
{{ $x ?? "default value" }}
{{ $x || "default value" }}

----------------------------------------

TITLE: Configuring AWS S3 Bucket Policy for n8n External Storage
DESCRIPTION: JSON policy configuration for AWS S3 bucket to allow full access for n8n. Replace '<bucket-name>' with your actual bucket name.

LANGUAGE: json
CODE:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "VisualEditor0",
			"Effect": "Allow",
			"Action": ["s3:*"],
			"Resource": ["arn:aws:s3:::<bucket-name>", "arn:aws:s3:::<bucket-name>/*"]
		}
	]
}

----------------------------------------

TITLE: Running MySQL Docker Container with Port Publishing
DESCRIPTION: Docker command to run a MySQL container, publishing the default MySQL port (3306) to allow connections from outside the container.

LANGUAGE: shell
CODE:
docker run -p 3306:3306 --name my-mysql -d mysql:latest

----------------------------------------

TITLE: Configuring File Ignore Patterns in Local File Trigger Node
DESCRIPTION: Examples demonstrating how to configure ignore patterns to exclude specific files or directories from being watched. Uses Anymatch syntax for pattern matching.

LANGUAGE: sh
CODE:
**/<fileName>.<suffix>
# For example, **/myfile.txt

LANGUAGE: sh
CODE:
**/<directoryName>/**
# For example, **/myDirectory/**

----------------------------------------

TITLE: Applying Kubernetes Manifests
DESCRIPTION: Command to apply all Kubernetes manifest files in the current directory to the cluster.

LANGUAGE: shell
CODE:
kubectl apply -f .

----------------------------------------

TITLE: Managing Custom Execution Data in n8n
DESCRIPTION: Shows how to set, get, and manage custom execution data in the Code node. Includes methods for setting individual values, setting multiple values, and retrieving stored data.

LANGUAGE: javascript
CODE:
// Set a single piece of custom execution data
$execution.customData.set("key", "value");

// Set the custom execution data object
$execution.customData.setAll({"key1": "value1", "key2": "value2"})

// Access the current state of the object during the execution
var customData = $execution.customData.getAll()

// Access a specific value set during this execution
var customData = $execution.customData.get("key")

LANGUAGE: python
CODE:
# Set a single piece of custom execution data
_execution.customData.set("key", "value");

# Set the custom execution data object
_execution.customData.setAll({"key1": "value1", "key2": "value2"})

# Access the current state of the object during the execution
customData = _execution.customData.getAll()

# Access a specific value set during this execution
customData = _execution.customData.get("key")

----------------------------------------

TITLE: Enabling Data Pruning with Docker Compose in n8n
DESCRIPTION: This snippet shows how to enable and configure data pruning for n8n in a Docker Compose configuration. It includes settings for activating automatic pruning, setting the maximum age of data before deletion, and limiting the number of stored executions.

LANGUAGE: yaml
CODE:
n8n:
    environment:
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000

----------------------------------------

TITLE: Setting Environment Variables for n8n S3 External Storage
DESCRIPTION: Shell commands to set required environment variables for configuring n8n to use AWS S3 as external storage for binary data.

LANGUAGE: sh
CODE:
export N8N_EXTERNAL_STORAGE_S3_HOST=... # example: s3.us-east-1.amazonaws.com
export N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME=...
export N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION=...
export N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY=...
export N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET=...

----------------------------------------

TITLE: Creating Customer Message Expression in n8n
DESCRIPTION: An expression used in the Customer Messenger node to format a personalized message using customer data fields. The expression combines static text with dynamic values pulled from the workflow's JSON data.

LANGUAGE: javascript
CODE:
Hi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }}

----------------------------------------

TITLE: Configuring Postgres Persistent Volume in Kubernetes
DESCRIPTION: YAML configuration for creating a persistent volume claim for Postgres using the gp2 storage class on AWS.

LANGUAGE: yaml
CODE:
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce

----------------------------------------

TITLE: Processing Node Item Data
DESCRIPTION: Shows how to iterate through items retrieved from a node and access their JSON data. Includes type handling specifics for Python's JsProxy conversion.

LANGUAGE: typescript
CODE:
previousNodeData = $("<node-name>").all();
for(let i=0; i<previousNodeData.length; i++) {
	console.log(previousNodeData[i].json);
}

LANGUAGE: python
CODE:
previousNodeData = _("<node-name>").all();
for item in previousNodeData:
	# item is of type <class 'pyodide.ffi.JsProxy'>
	# You need to convert it to a Dict
	itemDict = item.json.to_py()
	print(itemDict)

----------------------------------------

TITLE: Configuring Execution Data Storage with Docker Compose in n8n
DESCRIPTION: This snippet illustrates how to set environment variables for controlling execution data storage in a Docker Compose configuration for n8n. It includes options for saving data on errors, successes, progress, and manual executions.

LANGUAGE: yaml
CODE:
n8n:
    environment:
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none
      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false

----------------------------------------

TITLE: Dropcontact Operations List in Markdown
DESCRIPTION: Lists the core operations available in the Dropcontact node, including contact enrichment and request fetching functionality.

LANGUAGE: markdown
CODE:
**Contact**
- Enrich
- Fetch Request

----------------------------------------

TITLE: Incrementing Page Count for Pagination
DESCRIPTION: Expression used to increment the page number for each subsequent request. The $pageCount variable starts at 0 and is incremented by 1 to match common API pagination that starts at page 1.

LANGUAGE: javascript
CODE:
{{ $pageCount + 1 }}

----------------------------------------

TITLE: Deploying Kubernetes Manifests
DESCRIPTION: Commands to apply all Kubernetes manifests to the cluster and handle namespace creation.

LANGUAGE: shell
CODE:
kubectl apply -f .

LANGUAGE: shell
CODE:
kubectl apply -f namespace.yaml

----------------------------------------

TITLE: Configuring Execution Data Storage with Docker in n8n
DESCRIPTION: This snippet shows how to set environment variables for controlling execution data storage when running n8n with Docker. It includes options for saving data on errors, successes, progress, and manual executions.

LANGUAGE: sh
CODE:
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e EXECUTIONS_DATA_SAVE_ON_ERROR=all \
 -e EXECUTIONS_DATA_SAVE_ON_SUCCESS=none \
 -e EXECUTIONS_DATA_SAVE_ON_PROGRESS=true \
 -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Converting PDF to JSON in n8n
DESCRIPTION: Uses HTTP Request node to fetch a PDF file and Extract From File node to convert it to JSON.

LANGUAGE: json
CODE:
{
  "name": "Binary to JSON",
  "nodes": [
    {
      "parameters": {},
      "id": "78639a25-b69a-4b9c-84e0-69e045bed1a3",
      "name": "When clicking \"Execute Workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        480,
        520
      ]
    },
    {
      "parameters": {
        "url": "https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf",
        "options": {}
      },
      "id": "a11310df-1287-4e9a-b993-baa6bd4265a6",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        700,
        520
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "88697b6b-fb02-4c3d-a715-750d60413e9f",
      "name": "Extract From File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        920,
        520
      ]
    }
  ]
}

----------------------------------------

TITLE: Configuring n8n Volume Resources in Kubernetes
DESCRIPTION: YAML configuration for defining persistent volume claims and mounting in n8n deployment.

LANGUAGE: yaml
CODE:
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0

----------------------------------------

TITLE: Handling JsProxy Objects in Python
DESCRIPTION: Explains how to handle JsProxy objects when working with n8n node data in Python, including converting them to native Python objects for proper console output.

LANGUAGE: python
CODE:
previousNodeData = _("<node-name>").all();
for item in previousNodeData:
	# item is of type <class 'pyodide.ffi.JsProxy'>
	# You need to convert it to a Dict
	itemDict = item.json.to_py()
	print(itemDict)

----------------------------------------

TITLE: Enabling Data Pruning with npm in n8n
DESCRIPTION: This snippet shows how to enable and configure data pruning for n8n using npm. It includes settings for activating automatic pruning, setting the maximum age of data before deletion, and limiting the number of stored executions.

LANGUAGE: sh
CODE:
# npm
# Activate automatic data pruning
export EXECUTIONS_DATA_PRUNE=true

# Number of hours after execution that n8n deletes data
export EXECUTIONS_DATA_MAX_AGE=168

# Number of executions to store
export EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000

----------------------------------------

TITLE: Formatting Private Key for JWT Authentication in Salesforce
DESCRIPTION: Demonstrates the correct format for entering the private key when configuring JWT authentication for Salesforce in n8n.

LANGUAGE: plaintext
CODE:
-----BEGIN PRIVATE KEY-----
KEY DATA GOES HERE
-----END PRIVATE KEY-----

----------------------------------------

TITLE: Accessing Workflow Values in n8n Expression
DESCRIPTION: Expression syntax for accessing custom workflow values passed through the Execute Sub-workflow node. Uses the $() selector to reference the trigger node and access values from the json payload.

LANGUAGE: expression
CODE:
{{ $('Execute Sub-workflow Trigger').item.json.myCustomValue }}

----------------------------------------

TITLE: Cloning n8n Kubernetes Configuration Repository
DESCRIPTION: Commands to clone the n8n Kubernetes hosting configuration repository and navigate to the correct directory.

LANGUAGE: shell
CODE:
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b azure

LANGUAGE: shell
CODE:
cd azure

----------------------------------------

TITLE: Transforming Usernames into Comma-Separated String in JavaScript
DESCRIPTION: This code snippet takes a list of usernames, wraps each in double quotes, and joins them into a single comma-separated string. It returns the result as a single item in the n8n data structure.

LANGUAGE: javascript
CODE:
const items = $input.all();
const usernames = items.map((item) => `"${item.json.username}"`);
const result = usernames.join(", ");
return [{ json: { usernames: result } }];

----------------------------------------

TITLE: Updating n8n Docker Image
DESCRIPTION: Commands to pull the latest or specific versions of the n8n Docker image.

LANGUAGE: sh
CODE:
# Pull latest (stable) version
docker pull docker.n8n.io/n8nio/n8n

# Pull specific version
docker pull docker.n8n.io/n8nio/n8n:1.81.0

# Pull next (unstable) version
docker pull docker.n8n.io/n8nio/n8n:next

----------------------------------------

TITLE: Enabling Data Pruning with Docker in n8n
DESCRIPTION: This snippet demonstrates how to enable and configure data pruning for n8n using Docker. It includes settings for activating automatic pruning and setting the maximum age of data before deletion.

LANGUAGE: sh
CODE:
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e EXECUTIONS_DATA_PRUNE=true \
 -e EXECUTIONS_DATA_MAX_AGE=168 \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: LangChain Expression Variables
DESCRIPTION: Available expression variables that can be used in the Suffix Prompt field of the SQL AI Agent node configuration.

LANGUAGE: markdown
CODE:
* `{chatHistory}`: A history of messages in this conversation, useful for maintaining context.
* `{input}`: Contains the user prompt.
* `{agent_scratchpad}`: Information to remember for the next iteration.

----------------------------------------

TITLE: Opening Firewall Ports
DESCRIPTION: Commands to allow incoming HTTP and HTTPS traffic through the firewall.

LANGUAGE: shell
CODE:
sudo ufw allow 80\nsudo ufw allow 443

----------------------------------------

TITLE: Accessing Custom Data in n8n Workflows
DESCRIPTION: Retrieves either all custom data or a specific value from the workflow execution. Can be used to access data set during the current execution.

LANGUAGE: javascript
CODE:
// Access the current state of the object during the execution
const customData = $execution.customData.getAll();

// Access a specific value set during this execution
const customData = $execution.customData.get("key");

LANGUAGE: python
CODE:
# Access the current state of the object during the execution
customData = _execution.customData.getAll();

# Access a specific value set during this execution
customData = _execution.customData.get("key");

----------------------------------------

TITLE: Setting n8n Encryption Key Environment Variable
DESCRIPTION: Sets the encryption key environment variable that must be shared across all worker nodes to access credentials stored in the database.

LANGUAGE: bash
CODE:
export N8N_ENCRYPTION_KEY=<main_instance_encryption_key>

----------------------------------------

TITLE: Configuring Custom Auth with Header and Query String in JSON
DESCRIPTION: Example of custom authentication configuration using JSON to define both a header and query string parameter for authentication.

LANGUAGE: json
CODE:
{
	"headers": {
		"api-version": "202404"
	},
	"qs": {
		"apikey": "my-api-key"
	}
}

----------------------------------------

TITLE: Filtering Rows by Metadata in Supabase using JSON
DESCRIPTION: This snippet demonstrates how to construct a query to filter metadata in Supabase using the metadata query language. It shows the general structure and provides an example of filtering by an 'age' property.

LANGUAGE: json
CODE:
metadata->>{your-property}={comparison-operator}.{comparison-value}

LANGUAGE: json
CODE:
metadata->>age=gte.21

----------------------------------------

TITLE: Updating n8n to Latest Version with npm in Bash
DESCRIPTION: This command updates the globally installed n8n to the latest stable version using npm's update command.

LANGUAGE: bash
CODE:
npm update -g n8n

----------------------------------------

TITLE: Starting n8n with Docker
DESCRIPTION: Creates a Docker volume for persistent data and starts an n8n container, exposing it on port 5678.

LANGUAGE: sh
CODE:
docker volume create n8n_data

docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Configuring n8n Logging Environment Variables - Bash
DESCRIPTION: Example of setting up environment variables for n8n logging configuration, including log level, output location, file settings, and retention policies.

LANGUAGE: bash
CODE:
# Set the logging level to 'debug'
export N8N_LOG_LEVEL=debug

# Set log output to both console and a log file
export N8N_LOG_OUTPUT=console,file

# Set a save location for the log file
export N8N_LOG_FILE_LOCATION=/home/jim/n8n/logs/n8n.log

# Set a 50 MB maximum size for each log file
export N8N_LOG_FILE_MAXSIZE=50

# Set 60 as the maximum number of log files to be kept
export N8N_LOG_FILE_MAXCOUNT=60

----------------------------------------

TITLE: Starting n8n in Bash
DESCRIPTION: These commands show how to start n8n after installation. Users can use either 'n8n' or 'n8n start' to launch the application.

LANGUAGE: bash
CODE:
n8n
# or
n8n start

----------------------------------------

TITLE: Basic Markdown Formatting for n8n Sticky Notes
DESCRIPTION: Examples of common Markdown formatting options supported in n8n sticky notes, including bold text, italics, headings, links, and lists.

LANGUAGE: markdown
CODE:
The text in double asterisks will be **bold**

The text in single asterisks will be *italic*

Use # to indicate headings:
# This is a top-level heading
## This is a sub-heading
### This is a smaller sub-heading

You can add links:
[Example](https://example.com/)

Create lists with asterisks:

* Item one
* Item two

Or created ordered lists with numbers:

1. Item one
2. Item two

----------------------------------------

TITLE: Starting Redis Docker Container
DESCRIPTION: Launches a Redis container to act as the message broker for n8n queue mode.

LANGUAGE: bash
CODE:
docker run --name some-redis -p 6379:6379  -d redis

----------------------------------------

TITLE: Configuring Custom Auth with Body Parameters in JSON
DESCRIPTION: Example of custom authentication configuration using JSON to define body parameters for authentication.

LANGUAGE: json
CODE:
{
	 "body" : {
		"user": "username",
		"pass": "password"
	}
}

----------------------------------------

TITLE: Displaying Forbidden Error Message in Gmail Node
DESCRIPTION: This snippet shows the error message that appears when there's a problem loading parameter options from the server, often related to Google Service Account credentials without 'Impersonate a User' enabled.

LANGUAGE: plaintext
CODE:
There was a problem loading the parameter options from server: "Forbidden - perhaps check your credentials?"

----------------------------------------

TITLE: Installing Specific n8n Version with npm in Bash
DESCRIPTION: This command demonstrates how to install a specific version of n8n (0.126.1 in this case) using npm's @ syntax for version specification.

LANGUAGE: bash
CODE:
npm install -g n8n@0.126.1

----------------------------------------

TITLE: Solar Flare Classification Message Expression
DESCRIPTION: Expression to generate a message containing the solar flare classification from the NASA API response data.

LANGUAGE: javascript
CODE:
There was a solar flare of class {{$json["classType"]}}

----------------------------------------

TITLE: Installing Docker Compose on Ubuntu
DESCRIPTION: A command to install Docker Compose on an Ubuntu system using the package manager.

LANGUAGE: bash
CODE:
sudo apt-get install docker-compose-plugin

----------------------------------------

TITLE: Disabling n8n API Playground
DESCRIPTION: Sets the N8N_PUBLIC_API_SWAGGERUI_DISABLED environment variable to true to disable the API playground/Swagger UI interface.

LANGUAGE: bash
CODE:
export N8N_PUBLIC_API_SWAGGERUI_DISABLED=true

----------------------------------------

TITLE: Running n8n Docker Container with Custom Certificates
DESCRIPTION: Docker CLI command to run n8n container with custom certificates mounted from a local 'pki' directory to '/opt/custom-certificates' in the container. Exposes port 5678 and sets up the container name.

LANGUAGE: bash
CODE:
docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -v ./pki:/opt/custom-certificates \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Running n8n with npx in Bash
DESCRIPTION: This command uses npx to run n8n without installing it globally. It downloads and executes n8n, allowing users to access it at http://localhost:5678.

LANGUAGE: bash
CODE:
npx n8n

----------------------------------------

TITLE: Date Format Expression in JavaScript for n8n
DESCRIPTION: Expression to generate a date string 7 days before the current date in yyyy-MM-dd format using n8n's date manipulation capabilities.

LANGUAGE: javascript
CODE:
{{$today.minus({days: 7}).toFormat('yyyy-MM-dd')}}

----------------------------------------

TITLE: Displaying Forbidden Error Message in Airtable Node
DESCRIPTION: This code snippet shows the error message displayed when the Airtable node encounters a forbidden access issue. This usually occurs when the credentials used lack the necessary scopes for the attempted action.

LANGUAGE: plaintext
CODE:
There was a problem loading the parameter options from server: "Forbidden - perhaps check your credentials?"

----------------------------------------

TITLE: Configuring Custom Auth with Headers in JSON
DESCRIPTION: Example of custom authentication configuration using JSON to define two headers for authentication.

LANGUAGE: json
CODE:
{
	"headers": {
		"X-AUTH-USERNAME": "username",
		"X-AUTH-PASSWORD": "password"
	}
}

----------------------------------------

TITLE: Adding Custom Embed Fields in Discord Messages with JSON
DESCRIPTION: This JSON snippet demonstrates how to add custom embed fields like 'footer' and 'fields' to a Discord message using the Raw JSON input method in the Discord node's Send operation.

LANGUAGE: json
CODE:
{
    "author": "My Name",
	"url": "https://discord.js.org",
	"fields": [
		{
			"name": "Regular field title",
			"value": "Some value here"
		}
	],
	"footer": {
		"text": "Some footer text here",
		"icon_url": "https://i.imgur.com/AfFp7pu.png"
	}
}

----------------------------------------

TITLE: Starting n8n with Tunnel in Docker
DESCRIPTION: Runs n8n in a Docker container with the tunnel option enabled for remote access.

LANGUAGE: sh
CODE:
docker volume create n8n_data

docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n \
 start --tunnel

----------------------------------------

TITLE: Configuring Environment Variables for n8n
DESCRIPTION: An example .env file containing environment variables for configuring the n8n Docker setup. It includes domain settings, timezone, and SSL email address.

LANGUAGE: bash
CODE:
# The top level domain to serve from
DOMAIN_NAME=example.com

# The subdomain to serve from
SUBDOMAIN=n8n

# DOMAIN_NAME and SUBDOMAIN combined decide where n8n will be reachable from
# above example would result in: https://n8n.example.com

# Optional timezone to set which gets used by Cron-Node by default
# If not set New York time will be used
GENERIC_TIMEZONE=Europe/Berlin

# The email address to use for the SSL certificate creation
SSL_EMAIL=user@example.com

----------------------------------------

TITLE: AWS IAM Policy for Full Secrets Access
DESCRIPTION: IAM policy configuration that grants full access to AWS Secrets Manager operations including listing, batch retrieval, and accessing secret values.

LANGUAGE: json
CODE:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "AccessAllSecrets",
			"Effect": "Allow",
			"Action": [
				"secretsmanager:ListSecrets",
				"secretsmanager:BatchGetSecretValue",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:GetSecretValue",
				"secretsmanager:DescribeSecret",
				"secretsmanager:ListSecretVersionIds"
			],
			"Resource": "*"
		}
	]
}

----------------------------------------

TITLE: Configuring n8n with PostgreSQL in Docker
DESCRIPTION: Starts an n8n container with PostgreSQL configuration, using environment variables for database connection details.

LANGUAGE: sh
CODE:
docker volume create n8n_data

docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e DB_TYPE=postgresdb \
 -e DB_POSTGRESDB_DATABASE=<POSTGRES_DATABASE> \
 -e DB_POSTGRESDB_HOST=<POSTGRES_HOST> \
 -e DB_POSTGRESDB_PORT=<POSTGRES_PORT> \
 -e DB_POSTGRESDB_USER=<POSTGRES_USER> \
 -e DB_POSTGRESDB_SCHEMA=<POSTGRES_SCHEMA> \
 -e DB_POSTGRESDB_PASSWORD=<POSTGRES_PASSWORD> \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Setting Node Subtitle Using Parameters in JavaScript
DESCRIPTION: This code snippet demonstrates how to set a node's subtitle dynamically based on the values of the main parameters 'operation' and 'resource'.

LANGUAGE: javascript
CODE:
subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}'

----------------------------------------

TITLE: Dropcontact Template Widget Integration
DESCRIPTION: Template widget inclusion syntax for displaying relevant Dropcontact templates in the documentation.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'dropcontact') ]]

----------------------------------------

TITLE: Querying MySQL Port Number in SQL
DESCRIPTION: SQL query to confirm the port number used by the MySQL server. This verifies the correct Port value for the n8n credential.

LANGUAGE: sql
CODE:
SHOW VARIABLES WHERE Variable_name = 'port';

----------------------------------------

TITLE: Setting VUE_APP_URL_BASE_API Environment Variable in Bash
DESCRIPTION: This command sets the VUE_APP_URL_BASE_API environment variable to specify the base URL for n8n's front end to access the back end's REST API. It requires a manual build of the n8n-editor-ui package and can't be used with the default n8n Docker image.

LANGUAGE: bash
CODE:
export VUE_APP_URL_BASE_API=https://n8n.example.com/

----------------------------------------

TITLE: HTTP Request Options Configuration Interface
DESCRIPTION: Comprehensive TypeScript interface showing all available options for configuring HTTP requests, including URL, headers, method, body, authentication, and various other HTTP-specific settings.

LANGUAGE: typescript
CODE:
{
	url: string;
	headers?: object;
	method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD';
	body?: FormData | Array | string | number | object | Buffer | URLSearchParams;
	qs?: object;
	arrayFormat?: 'indices' | 'brackets' | 'repeat' | 'comma';
	auth?: {
		username: string,
		password: string,
	};
	disableFollowRedirect?: boolean;
	encoding?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
	skipSslCertificateValidation?: boolean;
	returnFullResponse?: boolean;
	proxy?: {
		host: string;
		port: string | number;
		auth?: {
			username: string;
			password: string;
		},
		protocol?: string;
	};
	timeout?: number;
	json?: boolean;
}

----------------------------------------

TITLE: Resource Mapper Configuration in JavaScript
DESCRIPTION: Sets up a resource mapper component for data mapping and schema validation.

LANGUAGE: javascript
CODE:
{
	displayName: 'Columns',
	name: 'columns',
	type: 'resourceMapper',
	default: {
		mappingMode: 'defineBelow',
		value: null,
	},
	required: true,
	typeOptions: {
		resourceMapper: {
			resourceMapperMethod: 'getMappingColumns',
			mode: 'update',
			fieldWords: {
				singular: 'column',
				plural: 'columns',
			},
			addAllFields: true,
			multiKeyMatch: true,
			supportAutoMap: true
		}
	}
}

----------------------------------------

TITLE: Creating Docker Volumes for n8n and Traefik
DESCRIPTION: Commands to create Docker volumes for storing n8n data and Traefik configurations. These volumes are used to persist data across container restarts.

LANGUAGE: bash
CODE:
sudo docker volume create n8n_data
sudo docker volume create traefik_data

----------------------------------------

TITLE: Configuring Availability Check in Google Calendar (Markdown)
DESCRIPTION: This snippet outlines the parameters and options for checking availability in a Google Calendar using n8n. It includes credential selection, calendar choice, time slot specification, and output format options.

LANGUAGE: markdown
CODE:
## Availability

Use this operation to check if a time-slot is available in a calendar.

Enter these parameters:

- **Credential to connect with**: Create or select an existing [Google Calendar credentials](/integrations/builtin/credentials/google/index.md).
- **Resource**: Select **Calendar**.
- **Operation**: Select **Availability**.
- **Calendar**: Choose a calendar you want to check against. Select **From list** to choose the title from the dropdown list or **By ID** to enter a calendar ID.
- **Start Time**: The start time for the time-slot you want to check. By default, uses an expression evaluating to the current time (`{{ $now }}`).
- **End Time**: The end time for the time-slot you want to check. By default, uses an expression evaluating to an hour from now (`{{ $now.plus(1, 'hour') }}`).

### Options

- **Output Format**: Select the format for the availability information:
	- **Availability**: Returns if there are already events overlapping with the given time slot or not.
	- **Booked Slots**: Returns the booked slots.
	- **RAW**: Returns the RAW data from the API.
- **Timezone**: The timezone used in the response. By default, uses the n8n timezone.

----------------------------------------

TITLE: OAuth Credentials JSON Configuration
DESCRIPTION: Sample JSON configuration for overwriting OAuth credentials for Asana and GitHub services.

LANGUAGE: json
CODE:
{
    "asanaOAuth2Api": {
        "clientId": "<id>",
        "clientSecret": "<secret>"
    },
    "githubOAuth2Api": {
        "clientId": "<id>",
        "clientSecret": "<secret>"
    }
}

----------------------------------------

TITLE: Structuring Complex n8n Node Directory
DESCRIPTION: Demonstrates a recommended directory structure for complex n8n nodes, including separate directories for actions, methods, and transport implementations.

LANGUAGE: plaintext
CODE:
node_directory/
├── actions/
│   └── resource/
│       ├── index.ts
│       └── operation.operation.ts
├── methods/
└── transport/

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the necessary project dependencies using npm.

LANGUAGE: shell
CODE:
npm i

----------------------------------------

TITLE: Converting Array to JSON using AI Transform in n8n
DESCRIPTION: This snippet demonstrates how to use the AI Transform node in n8n to convert an array of languages into JSON (key, value) pairs. This is useful when inserting array data into Google Sheets.

LANGUAGE: plaintext
CODE:
Convert 'languages' array to JSON (key, value) pairs.

----------------------------------------

TITLE: Listing MySQL Databases in SQL
DESCRIPTION: SQL query to list all databases in MySQL. This helps confirm the correct Database name for the n8n credential.

LANGUAGE: sql
CODE:
SHOW DATABASES;

----------------------------------------

TITLE: Configuring Security Environment Variables in n8n
DESCRIPTION: This table defines security-related environment variables for n8n, including their types, default values, and descriptions. These variables control access to environment variables, file restrictions, and security audit settings.

LANGUAGE: markdown
CODE:
| Variable | Type  | Default  | Description |
| :------- | :---- | :------- | :---------- |
| `N8N_BLOCK_ENV_ACCESS_IN_NODE` | Boolean | `false` | Whether to allow users to access environment variables in expressions and the Code node (false) or not (true). |
| `N8N_RESTRICT_FILE_ACCESS_TO` | String |  | Limits access to files in these directories. Provide multiple files as a colon-separated list ("`:``"). |
| `N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES` | Boolean | `true` | Set to `true` to block access to all files in the `.n8n` directory and user defined configuration files. |
| `N8N_SECURITY_AUDIT_DAYS_ABANDONED_WORKFLOW` | Number | 90 | Number of days to consider a workflow abandoned if it's not executed. |
| `N8N_SECURE_COOKIE` | Boolean | `true` | Ensures that cookies are only sent over HTTPS, enhancing security.|

----------------------------------------

TITLE: Setting Up Authentication
DESCRIPTION: Implementing API key authentication for the NASA API in the credentials file.

LANGUAGE: typescript
CODE:
import {
	IAuthenticateGeneric,
	ICredentialType,
	INodeProperties,
} from 'n8n-workflow';

export class NasaPicsApi implements ICredentialType {
	name = 'NasaPicsApi';
	displayName = 'NASA Pics API';
	// Uses the link to this tutorial as an example
	// Replace with your own docs links when building your own nodes
	documentationUrl = 'https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/';
	properties: INodeProperties[] = [
		{
			displayName: 'API Key',
			name: 'apiKey',
			type: 'string',
			default: '',
		},
	];
	authenticate = {
		type: 'generic',
		properties: {
			qs: {
				'api_key': '={{$credentials.apiKey}}'
			}
		},
	} as IAuthenticateGeneric;
}

----------------------------------------

TITLE: Setting Pod Resource Limits in Kubernetes
DESCRIPTION: YAML configuration defining memory resource limits and requests for n8n pods.

LANGUAGE: yaml
CODE:
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"

----------------------------------------

TITLE: Setting Kubernetes Pod Resource Limits in YAML
DESCRIPTION: YAML configuration for defining resource requests and limits for Kubernetes pods, specifying memory constraints.

LANGUAGE: yaml
CODE:
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"

----------------------------------------

TITLE: Adding Node Operations
DESCRIPTION: Defining operations for APOD and Mars Rover Photos resources, including API routing details.

LANGUAGE: typescript
CODE:
{
	displayName: 'Operation',
	name: 'operation',
	type: 'options',
	noDataExpression: true,
	displayOptions: {
		show: {
			resource: [
				'astronomyPictureOfTheDay',
			],
		},
	},
	options: [
		{
			name: 'Get',
			value: 'get',
			action: 'Get the APOD',
			description: 'Get the Astronomy Picture of the day',
			routing: {
				request: {
					method: 'GET',
					url: '/planetary/apod',
				},
			},
		},
	],
	default: 'get',
},
{
	displayName: 'Operation',
	name: 'operation',
	type: 'options',
	noDataExpression: true,
	displayOptions: {
		show: {
			resource: [
				'marsRoverPhotos',
			],
		},
	},
	options: [
		{
			name: 'Get',
			value: 'get',
			action: 'Get Mars Rover photos',
			description: 'Get photos from the Mars Rover',
			routing: {
				request: {
					method: 'GET',
				},
			},
		},
	],
	default: 'get',
},
{
	displayName: 'Rover name',
	description: 'Choose which Mars Rover to get a photo from',
	required: true,
	name: 'roverName',
	type: 'options',
	options: [
		{name: 'Curiosity', value: 'curiosity'},
		{name: 'Opportunity', value: 'opportunity'},
		{name: 'Perseverance', value: 'perseverance'},
		{name: 'Spirit', value: 'spirit'},
	],
	routing: {
		request: {
			url: '=/mars-photos/api/v1/rovers/{{$value}}/photos',
		},
	},
	default: 'curiosity',
	displayOptions: {
		show: {
			resource: [
				'marsRoverPhotos',
			],
		},
	},
},
{
	displayName: 'Date',
	description: 'Earth date',
	required: true,
	name: 'marsRoverDate',
	type: 'dateTime',
	default:'',
	displayOptions: {
		show: {
			resource: [
				'marsRoverPhotos',
			],
		},
	},
	routing: {
		request: {
			// You've already set up the URL. qs appends the value of the field as a query string
			qs: {
				earth_date: '={{ new Date($value).toISOString().substr(0,10) }}',
			},
		},
	},
},

----------------------------------------

TITLE: Cloning n8n Node Starter Repository
DESCRIPTION: Commands to clone the n8n node starter repository and navigate to the project directory.

LANGUAGE: shell
CODE:
git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-nasa-pics
cd n8n-nodes-nasa-pics

----------------------------------------

TITLE: Generating SSH Key for SFTP Authentication
DESCRIPTION: Command to generate an OpenSSH format private key using ed25519 algorithm with increased key derivation rounds for better security.

LANGUAGE: bash
CODE:
ssh-keygen -o -a 100 -t ed25519

----------------------------------------

TITLE: Configuring PostgresDB Environment Variables in Bash
DESCRIPTION: Shell commands to configure PostgresDB connection settings through environment variables, including database name, host, port, credentials, and optional SSL configuration.

LANGUAGE: bash
CODE:
export DB_TYPE=postgresdb
export DB_POSTGRESDB_DATABASE=n8n
export DB_POSTGRESDB_HOST=postgresdb
export DB_POSTGRESDB_PORT=5432
export DB_POSTGRESDB_USER=n8n
export DB_POSTGRESDB_PASSWORD=n8n
export DB_POSTGRESDB_SCHEMA=n8n

# optional:
export DB_POSTGRESDB_SSL_CA=$(pwd)/ca.crt
export DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false

n8n start

----------------------------------------

TITLE: Adding Node Operations in TypeScript
DESCRIPTION: Defining the operations object and required fields for creating a contact in the properties array.

LANGUAGE: typescript
CODE:
{
	displayName: 'Operation',
	name: 'operation',
	type: 'options',
	displayOptions: {
		show: {
			resource: [
				'contact',
			],
		},
	},
	options: [
		{
			name: 'Create',
			value: 'create',
			description: 'Create a contact',
			action: 'Create a contact',
		},
	],
	default: 'create',
	noDataExpression: true,
},
{
	displayName: 'Email',
	name: 'email',
	type: 'string',
	required: true,
	displayOptions: {
		show: {
			operation: [
				'create',
			],
			resource: [
				'contact',
			],
		},
	},
	default:'',
	placeholder: 'name@email.com',
	description:'Primary email for the contact',
},

----------------------------------------

TITLE: Google Drive 401 Unauthorized Error Response
DESCRIPTION: Example of the error response when unauthorized client attempts to retrieve access tokens. This occurs when there are issues with credential scopes or permissions.

LANGUAGE: json
CODE:
{"error":"unauthorized_client","error_description":"Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested."}

----------------------------------------

TITLE: Cloning n8n Kubernetes Configuration Repository
DESCRIPTION: Commands to clone the n8n Kubernetes hosting configuration repository and change to the repository directory.

LANGUAGE: shell
CODE:
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b aws

LANGUAGE: shell
CODE:
cd n8n-kubernetes-hosting

----------------------------------------

TITLE: Original KoboToolbox Submission Format
DESCRIPTION: Example of raw submission data format from KoboToolbox before reformatting, showing default structure with string values and hierarchical field names using '/' separators.

LANGUAGE: json
CODE:
{
  "_id": 471987,
  "formhub/uuid": "189436bb09a54957bfcc798e338b54d6",
  "start": "2021-12-05T16:13:38.527+02:00",
  "end": "2021-12-05T16:15:33.407+02:00",
  "Field_Details/Field_Name": "Test Fields",
  "Field_Details/Field_Location": "-1.932914 30.078211 1421 165",
  "Field_Details/Field_Shape": "-1.932914 30.078211 1421 165;-1.933011 30.078085 0 0;-1.933257 30.078004 0 0;-1.933338 30.078197 0 0;-1.933107 30.078299 0 0;-1.932914 30.078211 1421 165",
  "Field_Details/Crops_Grown": "maize beans avocado",
  "Field_Details/Field_Size_sqm": "2300",
  "__version__": "veGcULpqP6JNFKRJbbMvMs",
  "meta/instanceID": "uuid:2356cbbe-c1fd-414d-85c8-84f33e92618a",
  "_xform_id_string": "ajXVJpBkTD5tB4Nu9QXpgm",
  "_uuid": "2356cbbe-c1fd-414d-85c8-84f33e92618a",
  "_attachments": [],
  "_status": "submitted_via_web",
  "_geolocation": [
    -1.932914,
    30.078211
  ],
  "_submission_time": "2021-12-05T14:15:44",
  "_tags": [],
  "_notes": [],
  "_validation_status": {},
  "_submitted_by": null
}

----------------------------------------

TITLE: Applying Kubernetes Manifests with kubectl
DESCRIPTION: Command to apply all Kubernetes manifest files in the current directory to the cluster.

LANGUAGE: shell
CODE:
kubectl apply -f .

----------------------------------------

TITLE: Defining the Main Node Class in TypeScript
DESCRIPTION: Structure of the main node class implementing INodeType interface with description and execute method.

LANGUAGE: typescript
CODE:
export class FriendGrid implements INodeType {
	description: INodeTypeDescription = {
		// Basic node details will go here
		properties: [
			// Resources and operations will go here
		],
	};
	// The execute method will go here
	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
	}
}

----------------------------------------

TITLE: Including Documentation Snippets
DESCRIPTION: Markdown include directives for importing common documentation snippets

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md"
--8<-- "_snippets/integrations/builtin/cluster-nodes/vector-store-mode.md"
--8<-- "_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/vector-store-metadata-filter.md"
--8<-- "_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md"
--8<-- "_snippets/self-hosting/starter-kits/self-hosted-ai-starter-kit.md"

----------------------------------------

TITLE: LingvaNex Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration block defining the documentation metadata including title, description and content type for the LingvaNex node documentation.

LANGUAGE: yaml
CODE:
title: LingvaNex node documentation
description: Learn how to use the LingvaNex node in n8n. Follow technical documentation to integrate LingvaNex node into your workflows.
contentType: [integration, reference]

----------------------------------------

TITLE: RabbitMQ Error Log Example
DESCRIPTION: Example error message shown in RabbitMQ logs when the guest user attempts to connect from a non-localhost connection.

LANGUAGE: plaintext
CODE:
[error] <0.918.0> PLAIN login refused: user 'guest' can only connect via localhost

----------------------------------------

TITLE: Setting Up PostgresDB User Permissions
DESCRIPTION: SQL commands to create a database, user, and grant necessary permissions for n8n operation in PostgresDB.

LANGUAGE: sql
CODE:
CREATE DATABASE n8n-db;
CREATE USER n8n-user WITH PASSWORD 'random-password';
GRANT ALL PRIVILEGES ON DATABASE n8n-db TO n8n-user;

----------------------------------------

TITLE: Cloning the n8n Node Starter Repository
DESCRIPTION: Commands to clone the n8n node starter repository and navigate into the project directory.

LANGUAGE: shell
CODE:
git clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-friendgrid
cd n8n-nodes-friendgrid

----------------------------------------

TITLE: Setting Resource Limits for n8n Pods
DESCRIPTION: YAML configuration defining resource requests and limits for n8n containers in Kubernetes.

LANGUAGE: yaml
CODE:
resources:
  requests:
    memory: "250Mi"
  limits:
    memory: "500Mi"

----------------------------------------

TITLE: Granting Non-root User Access to Docker
DESCRIPTION: Commands to allow a non-root user to run Docker commands. This involves adding the user to the docker group and refreshing the user session.

LANGUAGE: bash
CODE:
sudo usermod -aG docker ${USER}
su - ${USER}

----------------------------------------

TITLE: Installing Specific Version of n8n Community Node
DESCRIPTION: npm commands to install a specific version of a community node package.

LANGUAGE: sh
CODE:
npm uninstall n8n-nodes-nodeName
npm install n8n-nodes-nodeName@2.1.0

----------------------------------------

TITLE: UpLead Node Operation Reference
DESCRIPTION: Lists the available operations supported by the UpLead node, including company and person enrichment capabilities.

LANGUAGE: markdown
CODE:
* Company
    * Enrich
* Person
    * Enrich

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Markdown structure defining the LoneScale node documentation including frontmatter, operations list, and related resources.

LANGUAGE: markdown
CODE:
---
title: LoneScale node documentation
description: Learn how to use the LoneScale node in n8n. Follow technical documentation to integrate LoneScale node into your workflows.
contentType: [integration, reference]
---

# LoneScale node

Use the LoneScale node to automate work in LoneScale and integrate LoneScale with other applications. n8n has built-in support for managing Lists and Items in LoneScale.

On this page, you'll find a list of operations the LoneScale node supports, and links to more resources.

/// note | Credentials
You can find authentication information for this node [here](/integrations/builtin/credentials/lonescale.md).
///

## Operations

* List
	* Create
* Item
	* Create

----------------------------------------

TITLE: Running n8n Security Audit via CLI
DESCRIPTION: Execute a security audit on an n8n instance using the command-line interface.

LANGUAGE: bash
CODE:
n8n audit

----------------------------------------

TITLE: Generating RSA Key Pair for Wise SCA Authentication
DESCRIPTION: Shell commands to generate the required RSA key pair for Strong Customer Authentication. Creates a private key (private.pem) and corresponding public key (public.pem) using OpenSSL.

LANGUAGE: sh
CODE:
$ openssl genrsa -out private.pem 2048 
$ openssl rsa -pubout -in private.pem -out public.pem

----------------------------------------

TITLE: Get Chat Operation Configuration
DESCRIPTION: Configuration steps for retrieving chat information using Telegram's getChat API method. Requires Telegram credentials and chat ID parameter.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Get**
* **Chat ID**: Enter the Chat ID or username of the target channel in the format `@channelusername`

----------------------------------------

TITLE: Configuring Postgres Storage Topology in YAML
DESCRIPTION: YAML configuration snippet for specifying the allowed topology for Postgres storage in Kubernetes, focusing on US Central regions.

LANGUAGE: yaml
CODE:
allowedTopologies:
  - matchLabelExpressions:
      - key: failure-domain.beta.kubernetes.io/zone
        values:
          - us-central1-b
          - us-central1-c

----------------------------------------

TITLE: Updating Rows with Composite Keys in MySQL
DESCRIPTION: Example SQL query to update a table with composite keys, matching on multiple columns (customer_id and product_id) to uniquely identify a row.

LANGUAGE: sql
CODE:
UPDATE orders SET quantity = 3 WHERE customer_id = 538 AND product_id = 800;

----------------------------------------

TITLE: Installing Docker Compose on Hetzner Cloud
DESCRIPTION: Commands to update the system and install Docker Compose plugin on a Hetzner cloud server.

LANGUAGE: shell
CODE:
apt update && apt -y upgrade
apt install docker-compose-plugin

----------------------------------------

TITLE: AWS IAM Policy for Restricted Secrets Access
DESCRIPTION: IAM policy configuration that provides restricted access to specific AWS Secrets Manager secrets, limiting access to secrets with names starting with 'n8n'.

LANGUAGE: json
CODE:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "ListingSecrets",
			"Effect": "Allow",
			"Action": [
				"secretsmanager:ListSecrets",
				"secretsmanager:BatchGetSecretValue"
			],
			"Resource": "*"
		},
		{
			"Sid": "RetrievingSecrets",
			"Effect": "Allow",
			"Action": [
				"secretsmanager:GetSecretValue",
				"secretsmanager:DescribeSecret"
			],
			"Resource": [
				"arn:aws:secretsmanager:us-west-2:123456789000:secret:n8n*"
			]
		}
	]
}

----------------------------------------

TITLE: Setting File Permissions in Wasabi with S3 Node
DESCRIPTION: When uploading files to Wasabi using the S3 node, file permissions must be set using the ACL dropdown instead of toggles. This snippet shows an image illustrating the correct way to set permissions.

LANGUAGE: markdown
CODE:
![File permissions when using the S3 node with Wasabi](/_images/integrations/builtin/app-nodes/s3/acl_dropdown.png)

----------------------------------------

TITLE: Parameterized SQL Query for MySQL in n8n
DESCRIPTION: This SQL query demonstrates how to use parameterized queries in n8n's MySQL node. It selects all columns from a table where the email matches a provided parameter.

LANGUAGE: sql
CODE:
SELECT * FROM $1:name WHERE email = $2;

----------------------------------------

TITLE: Installing n8n Globally with npm in Bash
DESCRIPTION: This command installs n8n globally using npm. It allows users to run n8n from any directory in their terminal.

LANGUAGE: bash
CODE:
npm install n8n -g

----------------------------------------

TITLE: Activating Workflow via API in n8n
DESCRIPTION: Example of activating a workflow using n8n's REST API. The request body includes the 'active' flag set to true.

LANGUAGE: json
CODE:
// ...
"active":true,
"settings": {},
"staticData": null,
"tags": []

----------------------------------------

TITLE: Applying Kubernetes Namespace Manifest
DESCRIPTION: Command to apply the namespace manifest file separately if encountering a namespace error.

LANGUAGE: shell
CODE:
kubectl apply -f namespace.yaml

----------------------------------------

TITLE: Creating Docker Volumes for Caddy and n8n
DESCRIPTION: Commands to create Docker volumes for persisting Caddy cache and n8n data between restarts.

LANGUAGE: shell
CODE:
docker volume create caddy_data
sudo docker volume create n8n_data

----------------------------------------

TITLE: Fetching Workflow JSON via API in n8n
DESCRIPTION: Example response when fetching a workflow's JSON data using n8n's REST API. The response includes workflow details, nodes, connections, and settings.

LANGUAGE: json
CODE:
{
  "data": {
    "id": "1012",
    "name": "Nathan's Workflow",
    "active": false,
    "nodes": [
      {
        "parameters": {},
        "name": "Start",
        "type": "n8n-nodes-base.start",
        "typeVersion": 1,
        "position": [
          130,
          640
        ]
      },
      {
        "parameters": {
          "authentication": "headerAuth",
          "url": "https://internal.users.n8n.cloud/webhook/custom-erp",
          "options": {
            "splitIntoItems": true
          },
          "headerParametersUi": {
            "parameter": [
              {
                "name": "unique_id",
                "value": "recLhLYQbzNSFtHNq"
              }
            ]
          }
        },
        "name": "HTTP Request",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 1,
        "position": [
          430,
          300
        ],
        "credentials": {
          "httpHeaderAuth": "beginner_course"
        }
      },
      {
        "parameters": {
          "operation": "append",
          "application": "appKBGQfbm6NfW6bv",
          "table": "processingOrders",
          "options": {}
        },
        "name": "Airtable",
        "type": "n8n-nodes-base.airtable",
        "typeVersion": 1,
        "position": [
          990,
          210
        ],
        "credentials": {
          "airtableApi": "Airtable"
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{$json[\"orderStatus\"]}}",
                "value2": "processing"
              }
            ]
          }
        },
        "name": "IF",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          630,
          300
        ]
      },
      {
        "parameters": {
          "keepOnlySet": true,
          "values": {
            "number": [
              {
                "name": "=orderId",
                "value": "={{$json[\"orderID\"]}}"
              }
            ],
            "string": [
              {
                "name": "employeeName",
                "value": "={{$json[\"employeeName\"]}}"
              }
            ]
          },
          "options": {}
        },
        "name": "Set",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          800,
          210
        ]
      },
      {
        "parameters": {
          "functionCode": "let totalBooked = items.length;\nlet bookedSum = 0;\n\nfor(let i=0; i < items.length; i++) {\n  bookedSum = bookedSum + items[i].json.orderPrice;\n}\nreturn [{json:{totalBooked, bookedSum}}]\n"
        },
        "name": "Function",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          800,
          400
        ]
      },
      {
        "parameters": {
          "webhookUri": "https://discord.com/api/webhooks/865213348202151968/oD5_WPDQwtr22Vjd_82QP3-_4b_lGhAeM7RynQ8Js5DzyXrQEnj0zeAQIA6fki1JLtXE",
          "text": "=This week we have {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{$node[\"HTTP Request\"].parameter[\"headerParametersUi\"][\"parameter\"][0][\"value\"]}}"
        },
        "name": "Discord",
        "type": "n8n-nodes-base.discord",
        "typeVersion": 1,
        "position": [
          1000,
          400
        ]
      },
      {
        "parameters": {
          "triggerTimes": {
            "item": [
              {
                "mode": "everyWeek",
                "hour": 9
              }
            ]
          }
        },
        "name": "Cron",
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "position": [
          220,
          300
        ]
      }
    ],
    "connections": {
      "HTTP Request": {
        "main": [
          [
            {
              "node": "IF",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Start": {
        "main": [
          []
        ]
      },
      "IF": {
        "main": [
          [
            {
              "node": "Set",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Function",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Set": {
        "main": [
          [
            {
              "node": "Airtable",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Function": {
        "main": [
          [
            {
              "node": "Discord",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cron": {
        "main": [
          [
            {
              "node": "HTTP Request",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "createdAt": "2021-07-16T11:15:46.066Z",
    "updatedAt": "2021-07-16T12:05:44.045Z",
    "settings": {},
    "staticData": null,
    "tags": []
  }
}

----------------------------------------

TITLE: Updating One-Way Relation in Notion Using HTTP Request
DESCRIPTION: This snippet demonstrates how to update a one-way relationship in Notion using an HTTP Request node with a PATCH method. It includes the JSON body structure for updating a relation property.

LANGUAGE: json
CODE:
{
	"properties": {
		"Account": {
			"relation": [
				{
					"id": "<your_relation_ID>"
				}
			]
		}
	}
}

----------------------------------------

TITLE: Installing n8n Next Version with npm in Bash
DESCRIPTION: This command installs the 'next' version of n8n, which typically includes the latest features and improvements that are not yet in the stable release.

LANGUAGE: bash
CODE:
npm install -g n8n@next

----------------------------------------

TITLE: Basic Data Structure Example in JavaScript
DESCRIPTION: Demonstrates a simple array of objects containing key-value pairs for fruits and their colors, used to explain basic data mapping concepts.

LANGUAGE: javascript
CODE:
[
	{
		"fruit": "apples",
		"color": "green"
	}
]

----------------------------------------

TITLE: Editing n8n Environment Variables
DESCRIPTION: Command to open the .env file for editing n8n environment variables.

LANGUAGE: shell
CODE:
nano .env

----------------------------------------

TITLE: Markdown Documentation Structure for Okta Node
DESCRIPTION: Structured markdown documentation outlining the Okta node's capabilities, operations, and authentication requirements in n8n.

LANGUAGE: markdown
CODE:
# Okta node

Use the Okta node to automate work in Okta and integrate Okta with other applications. n8n has built-in support for a wide range of Okta features, which includes creating, updating, and deleting users.

On this page, you'll find a list of operations the Okta node supports, and links to more resources.

## Operations

- User
    - Create a new user
    - Delete an existing user
    - Get details of a user
    - Get many users
    - Update an existing user

----------------------------------------

TITLE: Accessing n8n Metrics Endpoint
DESCRIPTION: Shows how to access the /metrics endpoint, which provides detailed information about the current status of the n8n instance. This endpoint is not available on n8n Cloud.

LANGUAGE: plaintext
CODE:
<your-instance-url>/metrics

----------------------------------------

TITLE: Configuring Discord Node for Error Notifications in n8n
DESCRIPTION: This snippet shows how to configure a Discord node in n8n to send error notifications. It includes setting the webhook URL and formatting the error message text using data from the Error Trigger node.

LANGUAGE: n8n
CODE:
{
  "Webhook URL": "The Discord URL that you received in the email from n8n when you signed up for this course.",
  "Text": "The workflow `{workflow name}` failed, with the error message: `{execution error message}`. Last node executed: `{name of the last executed node}`. Check this workflow execution here: `{execution URL}` My Unique ID: [Your Unique ID]"
}

----------------------------------------

TITLE: Example Input Data for MySQL Query in JavaScript
DESCRIPTION: This snippet shows an example of input data structure that can be used with MySQL queries in n8n. It demonstrates the format for multiple records with various fields.

LANGUAGE: javascript
CODE:
[
    {
        "email": "alex@example.com",
        "name": "Alex",
        "age": 21 
    },
    {
        "email": "jamie@example.com",
        "name": "Jamie",
        "age": 33 
    }
]

----------------------------------------

TITLE: Segment Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration defining the documentation metadata for the Segment node, including title, description, and content type.

LANGUAGE: yaml
CODE:
---
title: Segment node documentation
description: Learn how to use the Segment node in n8n. Follow technical documentation to integrate Segment node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: Starting n8n with Tunnel Feature in Bash
DESCRIPTION: This command starts n8n with the --tunnel option, which allows for secure access to the n8n instance from the internet without exposing your local network.

LANGUAGE: bash
CODE:
n8n start --tunnel

----------------------------------------

TITLE: RSS Feed Loop Exercise Solution in JSON
DESCRIPTION: Complete workflow configuration showing RSS feed processing with Loop Over Items and RSS Read nodes.

LANGUAGE: json
CODE:
{
"meta": {
	"templateCredsSetupCompleted": true,
	"instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
},
"nodes": [...],
"connections": {...},
"pinData": {}
}

----------------------------------------

TITLE: Opening Firewall Ports for n8n
DESCRIPTION: Commands to open ports 80 and 443 in the server's firewall for HTTP and HTTPS traffic.

LANGUAGE: shell
CODE:
sudo ufw allow 80
sudo ufw allow 443

----------------------------------------

TITLE: Setting Enterprise License Key via Environment Variable
DESCRIPTION: Configure the enterprise license key using the N8N_LICENSE_ACTIVATION_KEY environment variable in the n8n configuration.

LANGUAGE: plaintext
CODE:
N8N_LICENSE_ACTIVATION_KEY=your_license_key

----------------------------------------

TITLE: RSS Feed URL Processing in JavaScript
DESCRIPTION: Code node configuration for processing multiple RSS feed URLs using JavaScript array of objects with URL properties.

LANGUAGE: javascript
CODE:
let urls = [
  {
    json: {
      url: 'https://medium.com/feed/n8n-io'
    }
  },
  {
   json: {
     url: 'https://dev.to/feed/n8n'
   } 
  }
]
return urls;

----------------------------------------

TITLE: MessageBird Node Operations List in Markdown
DESCRIPTION: Lists the main operations supported by the MessageBird node including SMS messaging and balance checking capabilities.

LANGUAGE: markdown
CODE:
* SMS
    * Send text messages (SMS)
* Balance
    * Get the balance

----------------------------------------

TITLE: Sendy Node Operations List
DESCRIPTION: List of supported operations in the Sendy node, including campaign management and subscriber operations like adding, counting, deleting, and getting subscriber status.

LANGUAGE: markdown
CODE:
* Campaign
    * Create a campaign
* Subscriber
    * Add a subscriber to a list
    * Count subscribers
    * Delete a subscriber from a list
    * Unsubscribe user from a list
    * Get the status of subscriber

----------------------------------------

TITLE: Displaying Internal Error for Invalid Content in n8n AI Agent Node
DESCRIPTION: This snippet shows an example of an error message that occurs when the AI Agent node receives an invalid value for the 'content' parameter. The error is typically caused by null values in the Prompt input.

LANGUAGE: plaintext
CODE:
Internal error
Error: 400 Invalid value for 'content': expected a string, got null.
<stack-trace>

----------------------------------------

TITLE: Managing n8n Docker Container
DESCRIPTION: Commands to find, stop, remove, and start n8n Docker containers.

LANGUAGE: sh
CODE:
# Find your container ID
docker ps -a

# Stop the container with the `<container_id>`
docker stop <container_id>

# Remove the container with the `<container_id>`
docker rm <container_id>

# Start the container
docker run --name=<container_name> [options] -d docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Extracting HTML Content with n8n HTML Node
DESCRIPTION: Configures an HTML node to extract the title of the first blog post from the n8n blog using a CSS selector.

LANGUAGE: json
CODE:
{
  "parameters": {
    "operation": "extract",
    "sourceData": "json",
    "dataPropertyName": "data",
    "extractionValues": [
      {
        "key": "title",
        "cssSelector": ".post .item-title  a",
        "returnValue": "html"
      }
    ]
  }
}

----------------------------------------

TITLE: Matrix Template Integration
DESCRIPTION: Template widget inclusion for Matrix integration examples and templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'matrix') ]]

----------------------------------------

TITLE: Configuring NODES_EXCLUDE Environment Variable in n8n
DESCRIPTION: Set the NODES_EXCLUDE environment variable to block access to specific n8n nodes. This example blocks the Execute Command and Read/Write Files from Disk nodes.

LANGUAGE: bash
CODE:
NODES_EXCLUDE: "[\"n8n-nodes-base.executeCommand\", \"n8n-nodes-base.readWriteFile\"]"

----------------------------------------

TITLE: Get Chat Member Operation Configuration
DESCRIPTION: Configuration steps for retrieving specific chat member details using Telegram's getChatMember API method. Requires Telegram credentials, chat ID, and user ID parameters.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Get Member**
* **Chat ID**: Enter the Chat ID or username of the target channel
* **User ID**: Enter the unique identifier of the user

----------------------------------------

TITLE: Enabling Prometheus Metrics with Environment Variable
DESCRIPTION: Sets the environment variable to enable the Prometheus metrics endpoint in n8n.

LANGUAGE: bash
CODE:
export N8N_METRICS=true

----------------------------------------

TITLE: Work Email Transformation Example
DESCRIPTION: Shows how to transform multiple work emails from a single field into separate items.

LANGUAGE: javascript
CODE:
let items = $input.all();
return items[0].json.workEmail.map(item => {
	return {
		json: item
	}
});

----------------------------------------

TITLE: Including Operation Not Supported Snippet
DESCRIPTION: Markdown include directive for common operation not supported message

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: Leave Chat Operation Configuration
DESCRIPTION: Configuration steps for leaving a chat using Telegram's leaveChat API method. Requires Telegram credentials and chat ID parameter.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Leave**
* **Chat ID**: Enter the Chat ID or username of the channel

----------------------------------------

TITLE: Configuring Human Message for Conversational AI Agent in n8n
DESCRIPTION: This markdown snippet demonstrates how to structure the Human Message for the Conversational AI Agent node. It includes placeholders for tools, format instructions, and user input, providing context for each component.

LANGUAGE: markdown
CODE:
TOOLS
------
Assistant can ask the user to use tools to look up information that may be helpful in answering the user's original question. The tools the human can use are:

{tools}

{format_instructions}

USER'S INPUT
--------------------
Here is the user's input (remember to respond with a markdown code snippet of a JSON blob with a single action, and NOTHING else):

{{input}}

----------------------------------------

TITLE: Cloning n8n Configuration Repository
DESCRIPTION: Commands to clone the n8n Docker configuration repository and navigate to its directory.

LANGUAGE: shell
CODE:
git clone https://github.com/n8n-io/n8n-docker-caddy.git\ncd n8n-docker-caddy

----------------------------------------

TITLE: Configuration Frontmatter in Markdown
DESCRIPTION: YAML frontmatter configuration block specifying the content type as overview.

LANGUAGE: yaml
CODE:
---
contentType: overview
---

----------------------------------------

TITLE: Disabling Version Check Notifications in n8n
DESCRIPTION: Sets the N8N_VERSION_NOTIFICATIONS_ENABLED environment variable to false, which opts out of checking for new versions of n8n.

LANGUAGE: bash
CODE:
export N8N_VERSION_NOTIFICATIONS_ENABLED=false

----------------------------------------

TITLE: Modifying Window Title in TypeScript
DESCRIPTION: TypeScript code for updating the window title dynamically. It shows how to replace 'n8n' with a custom brand name in the title setting and resetting functions.

LANGUAGE: typescript
CODE:
$titleSet(workflow: string, status: WorkflowTitleStatus) {
	// replace n8n prefix
	window.document.title = `My Brand - ${icon} ${workflow}`;
},

$titleReset() {
	// replace n8n prefix
	document.title = `My Brand - Workflow Automation`;
},

----------------------------------------

TITLE: Calculate Order Totals with JavaScript
DESCRIPTION: JavaScript code that calculates the total number of booked orders and their sum value. Uses n8n's $input.all() to access workflow data and returns results in the required format.

LANGUAGE: javascript
CODE:
let items = $input.all();
let totalBooked = items.length;
let bookedSum = 0;

for (let i=0; i < items.length; i++) {
  bookedSum = bookedSum + items[i].json.orderPrice;
}

return [{ json: {totalBooked, bookedSum} }];

----------------------------------------

TITLE: Including Mailcheck Templates Widget
DESCRIPTION: Template widget inclusion for displaying Mailcheck-related workflow templates. Uses a custom templating syntax to pull in relevant templates based on the page title.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'mailcheck') ]]

----------------------------------------

TITLE: Running Ollama Docker Container with Port Publishing
DESCRIPTION: This command runs an Ollama Docker container, publishing the default port 11434 to allow connections from outside the container.

LANGUAGE: shell
CODE:
docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama

----------------------------------------

TITLE: Creating MongoDB Atlas Vector Search Index
DESCRIPTION: JSON configuration for creating a Vector Search index in MongoDB Atlas. Defines the vector field structure with dimensions and similarity function settings.

LANGUAGE: json
CODE:
{
  "fields": [
    {
      "type": "vector",
      "path": "<field-name>",
      "numDimensions": 1536,
      "similarity": "<similarity-function>"
    }
  ]
}

----------------------------------------

TITLE: Creating Docker Volumes
DESCRIPTION: Commands to create persistent Docker volumes for Caddy and n8n data storage.

LANGUAGE: shell
CODE:
sudo docker volume create caddy_data\nsudo docker volume create n8n_data

----------------------------------------

TITLE: Finding Credential Type Name from Workflow JSON
DESCRIPTION: Example JSON snippet showing how to locate the credential type name in a workflow's JSON structure, using Google Drive as an example.

LANGUAGE: json
CODE:
{
    ...,
    "credentials": {
        "googleDriveOAuth2Api": {
        "id": "9",
        "name": "Google Drive"
        }
    }
}

----------------------------------------

TITLE: Query Options Example in MongoDB Format
DESCRIPTION: Example of using MongoDB-style JSON query format to filter KoboToolbox submissions based on status and submission time.

LANGUAGE: json
CODE:
{"status": "success", "_submission_time": {"$lt": "2021-11-01T01:02:03"}}

----------------------------------------

TITLE: Querying MySQL Connect Timeout in SQL
DESCRIPTION: SQL query to get the connect_timeout value from MySQL. The result should be multiplied by 100 before entering it as the Connect Timeout in n8n.

LANGUAGE: sql
CODE:
SHOW VARIABLES WHERE Variable_name = 'connect_timeout';

----------------------------------------

TITLE: Comparing Datasets with Person Information in JSON
DESCRIPTION: This snippet demonstrates two JSON datasets containing person information (name and language) that can be compared using the Compare Datasets node. It illustrates how the 'Fields to Skip Comparing' option affects the comparison results.

LANGUAGE: json
CODE:
// Input 1
[
	{
		"person":
		{
			"name":	"Stefan",
			"language":	"de"
		}
	},
	{
		"person":
		{
			"name":	"Jim",
			"language":	"en"
		}
	},
	{
		"person":
		{
			"name":	"Hans",
			"language":	"de"
		}
	}
]
// Input 2
	[
	{
		"person":
		{
			"name":	"Sara",
			"language":	"de"
		}
	},
	{
		"person":
		{
			"name":	"Jane",
			"language":	"en"
		}
	},
	{
		"person":
		{
			"name":	"Harriet",
			"language":	"de"
		}
	}
]

----------------------------------------

TITLE: Specifying Column Data Types in TimescaleDB
DESCRIPTION: Demonstrates how to specify data types for columns in TimescaleDB using the type suffix notation. Shows how to define integer and text data types for 'id' and 'name' columns respectively.

LANGUAGE: text
CODE:
id:int,name:text

----------------------------------------

TITLE: Template Widget Inclusion
DESCRIPTION: Markdown directive to include templates related to Iterable integration.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'iterable') ]]

----------------------------------------

TITLE: Time Difference Output Format
DESCRIPTION: Example showing the default output format for time differences when Output as ISO String is disabled.

LANGUAGE: text
CODE:
timeDifference
years : 1
months : 3
days : 13

----------------------------------------

TITLE: Running n8n Docker Container with Host Gateway
DESCRIPTION: Docker command to run n8n container with host gateway configuration for Linux systems to enable communication with host machine services.

LANGUAGE: shell
CODE:
docker run -it --rm --add-host host.docker.internal:host-gateway --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Creating EKS Cluster with eksctl
DESCRIPTION: Uses the eksctl CLI tool to create a Kubernetes cluster on AWS EKS, specifying a name and region.

LANGUAGE: shell
CODE:
eksctl create cluster --name n8n --region <your-aws-region>

----------------------------------------

TITLE: Querying MySQL Hostname in SQL
DESCRIPTION: SQL query to confirm the hostname of the MySQL database. This is used to verify the correct Host value for the n8n credential.

LANGUAGE: sql
CODE:
SHOW VARIABLES WHERE Variable_name = 'hostname';

----------------------------------------

TITLE: ISO Duration Format Example
DESCRIPTION: Example showing the ISO duration string format used by the Get Time Between Dates operation when Output as ISO String is enabled.

LANGUAGE: text
CODE:
P1Y3M13D

----------------------------------------

TITLE: Frontmatter Configuration in Markdown
DESCRIPTION: YAML frontmatter defining the document metadata including title, description and content type for the Iterable node documentation.

LANGUAGE: yaml
CODE:
---
title: Iterable node documentation
description: Learn how to use the Iterable node in n8n. Follow technical documentation to integrate Iterable node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: URL Example with Query Parameters
DESCRIPTION: Example URL showing how to use percent-encoded query parameters to set default form field values in production mode.

LANGUAGE: bash
CODE:
https://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe

----------------------------------------

TITLE: Node Configuration Parameters Reference
DESCRIPTION: Core configuration parameters for setting up the GitHub Document Loader node, including repository link and branch settings.

LANGUAGE: markdown
CODE:
* **Repository Link**: Enter the URL of your GitHub repository.
* **Branch**: Enter the branch name to use.

----------------------------------------

TITLE: Deleting Kubernetes Resources
DESCRIPTION: Command to remove all resources created by the manifests.

LANGUAGE: shell
CODE:
kubectl delete -f .

----------------------------------------

TITLE: Sharing Folders in Google Drive using n8n
DESCRIPTION: Parameters and configuration for sharing folders in Google Drive, including permission settings and notification options.

LANGUAGE: text
CODE:
- Credential to connect with
- Resource: Folder
- Operation: Share
- Folder
- Permissions:
  - Role
  - Type
- Options:
  - Email Message
  - Move to New Owners Root
  - Send Notification Email
  - Transfer Ownership
  - Use Domain Admin Access

----------------------------------------

TITLE: Exposing Local Server with ngrok for GetResponse OAuth2 Setup
DESCRIPTION: Use ngrok to expose the local server running on port 5678 to the internet for configuring GetResponse OAuth2 credentials in a local environment.

LANGUAGE: sh
CODE:
ngrok http 5678

----------------------------------------

TITLE: Generating RSS Feed URLs with JavaScript in n8n
DESCRIPTION: This code snippet generates an array of objects containing URLs for RSS feeds. It's used in an example workflow to demonstrate reading RSS feeds from multiple sources.

LANGUAGE: javascript
CODE:
return [
	{
		json: {
			url: 'https://medium.com/feed/n8n-io',
		}
	},
	{
		json: {
			url: 'https://dev.to/feed/n8n',
		}
	}
];

----------------------------------------

TITLE: Sendy Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Sendy node documentation page, defining metadata like title, description, and content type.

LANGUAGE: yaml
CODE:
---
title: Sendy node documentation
description: Learn how to use the Sendy node in n8n. Follow technical documentation to integrate Sendy node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: Daily Cron Schedule without Seconds
DESCRIPTION: Cron expression to trigger a workflow every day at 04:08. Omits seconds specification in the expression.

LANGUAGE: cron
CODE:
8 4 * * *

----------------------------------------

TITLE: Deleting Folders in Google Drive using n8n
DESCRIPTION: Parameters and configuration required to delete a folder from Google Drive, with options for permanent deletion.

LANGUAGE: text
CODE:
- Credential to connect with
- Resource: Folder
- Operation: Delete
- Folder
- Options:
  - Delete Permanently

----------------------------------------

TITLE: Checking Remaining Items in Loop Over Items Node with n8n Expression
DESCRIPTION: This expression checks if the Loop Over Items node has processed all items. It returns a boolean value: false if there are still items to process, true if all items have been processed.

LANGUAGE: expression
CODE:
{{$node["Loop Over Items"].context["noItemsLeft"]}}

----------------------------------------

TITLE: Updating n8n Community Node
DESCRIPTION: npm command to update an existing community node to its latest version.

LANGUAGE: sh
CODE:
npm update n8n-nodes-nodeName

----------------------------------------

TITLE: Starting n8n Worker Process
DESCRIPTION: Commands to start n8n worker processes either directly or via Docker.

LANGUAGE: bash
CODE:
./packages/cli/bin/n8n worker

LANGUAGE: bash
CODE:
docker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n worker

----------------------------------------

TITLE: Standard Error Trigger Data Structure
DESCRIPTION: Default JSON structure received by the Error Trigger containing execution and workflow details. Includes execution ID, URL, retry information, error details, and workflow identification. Some fields like execution.id and execution.url require database persistence, while execution.retryOf is only present for retry attempts.

LANGUAGE: json
CODE:
[
	{
		"execution": {
			"id": "231",
			"url": "https://n8n.example.com/execution/231",
			"retryOf": "34",
			"error": {
				"message": "Example Error Message",
				"stack": "Stacktrace"
			},
			"lastNodeExecuted": "Node With Error",
			"mode": "manual"
		},
		"workflow": {
			"id": "1",
			"name": "Example Workflow"
		}
	}
]

----------------------------------------

TITLE: Setting Webhook URL for GetResponse OAuth2 Local Configuration
DESCRIPTION: Set the WEBHOOK_URL environment variable with the ngrok URL for configuring GetResponse OAuth2 credentials in a local environment.

LANGUAGE: sh
CODE:
export WEBHOOK_URL=<YOUR-NGROK-URL>

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Structured documentation for the Linear node integration, including frontmatter configuration, operation listings, and template inclusion.

LANGUAGE: markdown
CODE:
---
title: Linear node documentation
description: Learn how to use the Linear node in n8n. Follow technical documentation to integrate Linear node into your workflows.
contentType: [integration, reference]
---

# Linear node

Use the Linear node to automate work in Linear, and integrate Linear with other applications. n8n has built-in support for a wide range of Linear features, including creating, updating, deleting, and getting issues.

/// note | Credentials
Refer to [Linear credentials](/integrations/builtin/credentials/linear.md) for guidance on setting up authentication.
///

## Operations

* Issue
    * Create
    * Delete
    * Get
    * Get All
    * Update

----------------------------------------

TITLE: Running Ollama Docker Container with Port Publishing
DESCRIPTION: Docker command to run Ollama container with volume mounting and port publishing on default port 11434.

LANGUAGE: shell
CODE:
docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama

----------------------------------------

TITLE: Google Sheets URL Structure Example
DESCRIPTION: Example showing how to extract spreadsheet and sheet IDs from Google Sheets URLs

LANGUAGE: markdown
CODE:
https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=sheetId

----------------------------------------

TITLE: Querying Postgres Server Address in SQL
DESCRIPTION: SQL query to retrieve the server address of a Postgres database. This can be used to confirm the host name when setting up credentials.

LANGUAGE: sql
CODE:
SELECT inet_server_addr();

----------------------------------------

TITLE: Uninstalling n8n Community Node
DESCRIPTION: npm command to remove an installed community node package.

LANGUAGE: sh
CODE:
npm uninstall n8n-nodes-nodeName

----------------------------------------

TITLE: Setting Worker Concurrency
DESCRIPTION: Command to configure the number of parallel jobs a worker can process.

LANGUAGE: bash
CODE:
n8n worker --concurrency=5

----------------------------------------

TITLE: Node Options Configuration
DESCRIPTION: Optional settings for controlling the GitHub Document Loader node's behavior regarding directory traversal and path exclusions.

LANGUAGE: markdown
CODE:
* **Recursive**: Select whether to include sub-folders and files (turned on) or not (turned off).
* **Ignore Paths**: Enter directories to ignore.

----------------------------------------

TITLE: Emelia Node Operations List (Markdown)
DESCRIPTION: Lists the available operations for Emelia node integration, including campaign management and contact list functionality.

LANGUAGE: markdown
CODE:
* Campaign
    * Add Contact
    * Create
    * Get
    * Get All
    * Pause
    * Start
* Contact List
    * Add
    * Get All

----------------------------------------

TITLE: Sample Input Data Structure
DESCRIPTION: Example JSON data structure showing the expected input format for Postgres operations

LANGUAGE: javascript
CODE:
[
    {
        "email": "alex@example.com",
        "name": "Alex",
        "age": 21 
    },
    {
        "email": "jamie@example.com",
        "name": "Jamie",
        "age": 33 
    }
]

----------------------------------------

TITLE: Running ngrok for Local Server Exposure in Shell
DESCRIPTION: This command uses ngrok to expose the local server running on port 5678 to the internet, which is necessary for setting up OAuth2 redirect URLs when working in a local environment.

LANGUAGE: sh
CODE:
ngrok http 5678

----------------------------------------

TITLE: Importing Markdown Snippet in n8n Documentation
DESCRIPTION: This code snippet imports a markdown file containing information about sharing credentials in n8n workflows.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/workflows/sharing-credentials.md"

----------------------------------------

TITLE: Snippet Include
DESCRIPTION: An include directive for a shared operation not supported snippet.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: Setting Webhook URL Environment Variable in Shell
DESCRIPTION: This command sets an environment variable WEBHOOK_URL with the ngrok-generated URL. This URL is used as the OAuth2 redirect URL in Twist when configuring credentials for a local n8n environment.

LANGUAGE: sh
CODE:
export WEBHOOK_URL=<YOUR-NGROK-URL>

----------------------------------------

TITLE: Creating and Navigating to n8n Nodes Directory
DESCRIPTION: Commands to create the nodes directory in the n8n home folder and navigate to it.

LANGUAGE: sh
CODE:
mkdir ~/.n8n/nodes
cd ~/.n8n/nodes

----------------------------------------

TITLE: Fetching Active Workflows with Pagination in n8n API
DESCRIPTION: This snippet demonstrates how to make a GET request to the n8n API to retrieve active workflows with pagination. It shows examples for both self-hosted and cloud instances of n8n, using curl to make the API call with a specified limit of 150 results per page.

LANGUAGE: shell
CODE:
# For a self-hosted n8n instance
curl -X 'GET' \
  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'

# For n8n Cloud
curl -X 'GET' \
  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150' \
  -H 'accept: application/json' \
  -H 'X-N8N-API-KEY: <your-api-key>'

----------------------------------------

TITLE: Operation Not Supported Include
DESCRIPTION: Markdown include directive for the operation not supported snippet.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: Query Parameters Expression
DESCRIPTION: Example of providing parameters for a parameterized query using n8n expressions

LANGUAGE: javascript
CODE:
{{ [ 'users', $json.email ] }}

----------------------------------------

TITLE: Configuring Frontmatter in Markdown
DESCRIPTION: Frontmatter configuration block defining content type and metadata for the documentation page.

LANGUAGE: markdown
CODE:
---
#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4
contentType: howto
---

----------------------------------------

TITLE: Templating Widget Include for Reddit
DESCRIPTION: Markdown templating syntax to include a widget that displays Reddit-related templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'reddit') ]]

----------------------------------------

TITLE: Template Widget Include
DESCRIPTION: A templating directive to include Drift-related workflow templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'drift') ]]

----------------------------------------

TITLE: Including Slack Token Rotation Snippet
DESCRIPTION: Markdown snippet inclusion directive for Slack token rotation documentation.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/credentials/slack/token-rotation.md"

----------------------------------------

TITLE: Configuring Webhook URL
DESCRIPTION: Sets the webhook URL environment variable for the main n8n instance.

LANGUAGE: bash
CODE:
export WEBHOOK_URL=https://your-webhook-url.com

----------------------------------------

TITLE: Installing n8n Community Node
DESCRIPTION: npm command to install a specific community node package.

LANGUAGE: sh
CODE:
npm i n8n-nodes-nodeName

----------------------------------------

TITLE: MessageBird Templates Widget Include
DESCRIPTION: Template inclusion syntax for displaying MessageBird-related workflow templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'messagebird') ]]

----------------------------------------

TITLE: Bubble Operations List in Markdown
DESCRIPTION: Lists the supported operations for the Bubble node in n8n, including object creation, deletion, retrieval, and updating.

LANGUAGE: markdown
CODE:
* Object
    * Create
    * Delete
    * Get
    * Get All
    * Update

----------------------------------------

TITLE: Query Parameters for MySQL Node in JavaScript
DESCRIPTION: This snippet shows how to provide query parameters for the MySQL node in n8n. It uses a fixed table name and an expression to dynamically pull the email from the input data.

LANGUAGE: javascript
CODE:
// users is an example table name
users, {{ $json.email }}

----------------------------------------

TITLE: Configuring WEBHOOK_URL Environment Variable in n8n
DESCRIPTION: When running n8n behind a reverse proxy, you must configure the WEBHOOK_URL environment variable with the public HTTPS URL where your n8n instance is running to resolve webhook-related errors.

LANGUAGE: markdown
CODE:
[configure the `WEBHOOK_URL` environment variable](/hosting/configuration/configuration-examples/webhook-url.md)

----------------------------------------

TITLE: Creating Admonitions in Markdown
DESCRIPTION: This snippet shows how to create various types of admonitions (note, info, warning) and an expanding details box in markdown.

LANGUAGE: markdown
CODE:
/// note | This is a note
This is some note contents.
///

/// info | This is an info box
This is some info contents.
///

/// warning | This is a warning
This is some warning contents.
///

??? Details "This is an expanding details box"
	This is some expanding details contents.

----------------------------------------

TITLE: Configuring Marketstack Node Operations
DESCRIPTION: Lists the core operations supported by the marketstack node including End-of-Day Data retrieval, Exchange information access, and Ticker data fetching.

LANGUAGE: markdown
CODE:
* End-of-Day Data
    * Get All
* Exchange
    * Get
* Ticker
    * Get

----------------------------------------

TITLE: Operation Not Supported Include
DESCRIPTION: Markdown include directive for the standard operation not supported message.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: WhatsApp Trigger Node Events List
DESCRIPTION: List of events that the WhatsApp Trigger node can respond to, including account, message, and template-related events.

LANGUAGE: markdown
CODE:
* Account Review Update
* Account Update
* Business Capability Update
* Message Template Quality Update
* Message Template Status Update
* Messages
* Phone Number Name Update
* Phone Number Quality Update
* Security
* Template Category Update

----------------------------------------

TITLE: Increasing Old Memory Space in Self-Hosted n8n
DESCRIPTION: Demonstrates how to allocate additional memory to the old memory section of the V8 JavaScript engine using the --max-old-space-size option. This can be set through the CLI or the NODE_OPTIONS environment variable.

LANGUAGE: bash
CODE:
--max-old-space-size=SIZE

----------------------------------------

TITLE: Getting Current Running Index in Loop Over Items Node with n8n Expression
DESCRIPTION: This expression retrieves the current running index of the Loop Over Items node, indicating which iteration the loop is currently on.

LANGUAGE: expression
CODE:
{{$node["Loop Over Items"].context["currentRunIndex"];}}

----------------------------------------

TITLE: Mailchimp Node Template Inclusion
DESCRIPTION: Markdown template inclusion directive for displaying Mailchimp-related templates and examples

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'mailchimp') ]]

----------------------------------------

TITLE: MongoDB Operations List in Markdown
DESCRIPTION: List of supported MongoDB operations in the n8n integration node, defining the core functionality available for workflow automation.

LANGUAGE: markdown
CODE:
* Aggregate documents
* Delete documents
* Find documents
* Find and replace documents
* Find and update documents
* Insert documents
* Update documents

----------------------------------------

TITLE: Importing Section Table of Contents in n8n Documentation
DESCRIPTION: Template code for importing and using a section table of contents macro in n8n documentation.

LANGUAGE: markdown
CODE:
[[% import "_macros/section-toc.html" as sectionToc %]]

This section covers:

[[ sectionToc.sectionToc(page) ]]

----------------------------------------

TITLE: Gotify Template Widget Integration in Markdown
DESCRIPTION: Template widget shortcode that displays Gotify-related workflow templates

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'gotify') ]]

----------------------------------------

TITLE: Disabling n8n Public REST API
DESCRIPTION: Sets the N8N_PUBLIC_API_DISABLED environment variable to true to disable the public REST API functionality.

LANGUAGE: bash
CODE:
export N8N_PUBLIC_API_DISABLED=true

----------------------------------------

TITLE: Accessing Docker Container Shell for n8n
DESCRIPTION: Command to access the shell of the n8n Docker container for node management.

LANGUAGE: sh
CODE:
docker exec -it n8n sh

----------------------------------------

TITLE: Disabling Telemetry Events in n8n
DESCRIPTION: Sets the N8N_DIAGNOSTICS_ENABLED environment variable to false, which opts out of telemetry event collection in n8n.

LANGUAGE: bash
CODE:
export N8N_DIAGNOSTICS_ENABLED=false

----------------------------------------

TITLE: Using curl for GET Request with Header Parameter
DESCRIPTION: Curl command to make a GET request with a header parameter to trigger the Webhook node.

LANGUAGE: sh
CODE:
curl --request GET <https://your-n8n.url/webhook/path> --header 'key=value'

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Cloudflare node documentation page, defining title, description and content type.

LANGUAGE: yaml
CODE:
title: Cloudflare node documentation
description: Learn how to use the Cloudflare node in n8n. Follow technical documentation to integrate Cloudflare node into your workflows.
contentType: [integration, reference]

----------------------------------------

TITLE: Stopping n8n and Caddy Services
DESCRIPTION: Command to stop the running n8n and Caddy services managed by Docker Compose.

LANGUAGE: shell
CODE:
sudo docker compose stop

----------------------------------------

TITLE: Node Parameter Documentation in Markdown
DESCRIPTION: Markdown documentation showing the parameters and configuration options for the Zep Vector Store node, including operation modes, collection naming, and metadata filtering.

LANGUAGE: markdown
CODE:
* **Collection Name**: Enter the collection name to store the data in.

* **Name**: The name of the vector store.
* **Description**: Explain to the LLM what this tool does.
* **Collection Name**: Enter the collection name to retrieve the data from.
* **Limit**: Enter how many results to retrieve from the vector store.

----------------------------------------

TITLE: Adding Node Metadata
DESCRIPTION: Configuring node metadata in the JSON codex file, including node version and categories.

LANGUAGE: json
CODE:
{
	"node": "n8n-nodes-base.NasaPics",
	"nodeVersion": "1.0",
	"codexVersion": "1.0",
	"categories": [
		"Miscellaneous"
	],
	"resources": {
		"credentialDocumentation": [
			{
				"url": ""
			}
		],
		"primaryDocumentation": [
			{
				"url": ""
			}
		]
	}
}

----------------------------------------

TITLE: Template Macro Import
DESCRIPTION: Template code for importing and using a section table of contents macro.

LANGUAGE: markdown
CODE:
[[% import "_macros/section-toc.html" as sectionToc %]]

[[ sectionToc.sectionToc(page) ]]

----------------------------------------

TITLE: Bubble Templates Widget
DESCRIPTION: Template widget shortcode for displaying relevant Bubble integration templates

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'bubble') ]]

----------------------------------------

TITLE: Viewing Docker Compose Configuration
DESCRIPTION: Command to view the Docker Compose configuration file.

LANGUAGE: shell
CODE:
nano docker-compose.yml

----------------------------------------

TITLE: Defining Node Resource in TypeScript
DESCRIPTION: Adding the resource object to the properties array to define the API resource for the node.

LANGUAGE: typescript
CODE:
{
	displayName: 'Resource',
	name: 'resource',
	type: 'options',
	options: [
		{
			name: 'Contact',
			value: 'contact',
		},
	],
	default: 'contact',
	noDataExpression: true,
	required: true,
	description: 'Create a new contact',
},

----------------------------------------

TITLE: Installing Docker on Ubuntu
DESCRIPTION: A series of commands to install Docker on an Ubuntu system. This includes removing old versions, updating the package manager, and installing the latest Docker version.

LANGUAGE: bash
CODE:
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg lsb-release
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

----------------------------------------

TITLE: Configuring Custom Auth with Query String in JSON
DESCRIPTION: Example of custom authentication configuration using JSON to define query string parameters for authentication.

LANGUAGE: json
CODE:
{
	"qs": { 
		"appid": "123456",
		"apikey": "my-api-key"
	}
}

----------------------------------------

TITLE: Operation Not Supported Include
DESCRIPTION: Include directive for operation not supported snippet.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: Including External Markdown Snippet in n8n Documentation
DESCRIPTION: Shows how to include an external Markdown snippet file in the n8n documentation using a custom syntax.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md"

----------------------------------------

TITLE: Including AI Tools Snippet
DESCRIPTION: Reference to an external markdown snippet containing AI tools documentation.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/ai-tools.md"

----------------------------------------

TITLE: Cloning n8n Kubernetes Configuration Repository
DESCRIPTION: Commands to clone the n8n Kubernetes hosting configuration repository and change to the repository directory.

LANGUAGE: shell
CODE:
git clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b gcp

LANGUAGE: shell
CODE:
cd n8n-kubernetes-hosting

----------------------------------------

TITLE: Making HTTP Requests in n8n Node
DESCRIPTION: Examples of making HTTP requests using n8n's built-in helpers, both with and without authentication. Uses Axios internally for HTTP communication.

LANGUAGE: typescript
CODE:
// If no auth needed
const response = await this.helpers.httpRequest(options);

// If auth needed
const response = await this.helpers.httpRequestWithAuthentication.call(
	this, 
	'credentialTypeName', // For example: pipedriveApi
	options,
);

----------------------------------------

TITLE: Managing n8n License and User Settings via CLI
DESCRIPTION: Demonstrates commands for managing n8n licenses, resetting user management, disabling MFA for a user, and resetting LDAP settings.

LANGUAGE: sh
CODE:
n8n license:clear

LANGUAGE: sh
CODE:
n8n license:info

LANGUAGE: sh
CODE:
n8n user-management:reset

LANGUAGE: sh
CODE:
n8n mfa:disable --email=johndoe@example.com

LANGUAGE: sh
CODE:
n8n ldap:reset

----------------------------------------

TITLE: Enabling OAuth Access Tokens via Magento 2 CLI
DESCRIPTION: This command enables the use of OAuth Access Tokens as standalone Bearer tokens in Magento 2. It's a prerequisite for using Magento 2 credentials in n8n until the platform updates to use OAuth.

LANGUAGE: bash
CODE:
bin/magento config:set oauth/consumer/enable_integration_as_bearer 1

----------------------------------------

TITLE: Configuring Caddy Reverse Proxy
DESCRIPTION: Example Caddy configuration file content for setting up reverse proxy to n8n.

LANGUAGE: text
CODE:
n8n.<domain>.<suffix> {\n    reverse_proxy n8n:5678 {\n      flush_interval -1\n    }\n}

----------------------------------------

TITLE: Expression Reference in Sentiment Analysis Node
DESCRIPTION: Example of how to reference input fields in the Text to Analyze parameter using n8n expressions

LANGUAGE: expression
CODE:
{{ $json.chatInput }}

----------------------------------------

TITLE: Implementing Header Authentication in n8n Credentials
DESCRIPTION: This snippet demonstrates how to set up header authentication in an n8n credentials file. It shows how to include an Authorization token in the request header.

LANGUAGE: typescript
CODE:
authenticate: IAuthenticateGeneric = {
	type: 'generic',
	properties: {
		header: {
			Authorization: '=Bearer {{$credentials.authToken}}',
		},
	},
};

----------------------------------------

TITLE: Creating New User on DigitalOcean Droplet
DESCRIPTION: Commands for creating a new user and granting sudo privileges on the DigitalOcean droplet.

LANGUAGE: shell
CODE:
adduser <username>\nusermod -aG sudo <username>

----------------------------------------

TITLE: Implementing Query String Authentication in n8n Credentials
DESCRIPTION: This code example illustrates how to implement query string authentication in an n8n credentials file. It shows how to include a token in the request query string.

LANGUAGE: typescript
CODE:
authenticate: IAuthenticateGeneric = {
	type: 'generic',
	properties: {
		qs: {
			token: '={{$credentials.token}}',
		},
	},
};

----------------------------------------

TITLE: Supported JWT Algorithms
DESCRIPTION: List of JWT signing algorithms supported by n8n credentials system, including HMAC, RSA, ECDSA, and RSASSA-PSS variants

LANGUAGE: plaintext
CODE:
HS256
HS384
HS512
RS256
RS384
RS512
ES256
ES384
ES512
PS256
PS384
PS512
none

----------------------------------------

TITLE: JSON Field Reference Example
DESCRIPTION: Example of how to reference the content field from JSON input data

LANGUAGE: expression
CODE:
{{ $json.content }}

----------------------------------------

TITLE: Configuring n8n Persistent Volume in Kubernetes
DESCRIPTION: YAML configuration for mounting a persistent volume claim for n8n file storage in the deployment manifest.

LANGUAGE: yaml
CODE:
volumes:
  - name: n8n-claim0
    persistentVolumeClaim:
      claimName: n8n-claim0

----------------------------------------

TITLE: Implementing Basic Authentication in n8n Credentials
DESCRIPTION: This snippet shows how to set up Basic Authentication in an n8n credentials file. It demonstrates the use of username and password for authentication.

LANGUAGE: typescript
CODE:
authenticate: IAuthenticateGeneric = {
	type: 'generic',
	properties: {
		auth: {
			username: '={{$credentials.username}}',
			password: '={{$credentials.password}}',
		},
	},
};

----------------------------------------

TITLE: Querying Issues Using JQL in Jira Software Node
DESCRIPTION: Example of using Jira Query Language (JQL) to fetch all issues from a specific project. Shows how to configure the Get All operation with JQL filtering to retrieve issues from a project named 'n8n'.

LANGUAGE: JQL
CODE:
project=n8n

----------------------------------------

TITLE: Setting Timezone for n8n in Docker
DESCRIPTION: Configures the timezone for n8n and the system within the Docker container using environment variables.

LANGUAGE: sh
CODE:
docker volume create n8n_data

docker run -it --rm \
 --name n8n \
 -p 5678:5678 \
 -e GENERIC_TIMEZONE="Europe/Berlin" \
 -e TZ="Europe/Berlin" \
 -v n8n_data:/home/node/.n8n \
 docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Defining Additional Fields Structure in n8n
DESCRIPTION: Shows the structure for defining additional optional parameters that appear under Additional Fields in the n8n GUI.

LANGUAGE: javascript
CODE:
displayName: 'Additional Fields',
name: 'additionalFields',
// The UI element type
type: ''
placeholder: 'Add Field',
default: {},
displayOptions: {
  // Set which resources and operations this field is available for
  show: {
    resource: [
      // Resource names
    ],
    operation: [
      // Operation names
    ]
  },
}

----------------------------------------

TITLE: Creating Error Workflow in n8n using JSON
DESCRIPTION: This JSON snippet defines an n8n workflow that uses an Error Trigger node and a Slack node to send notifications about failed workflows. It demonstrates how to set up an error handling workflow in n8n.

LANGUAGE: json
CODE:
{
	"nodes": [
		{
			"parameters": {},
			"name": "Error Trigger",
			"type": "n8n-nodes-base.errorTrigger",
			"typeVersion": 1,
			"position": [
				720,
				-380
			]
		},
		{
			"parameters": {
				"channel": "channelname",
				"text": "=This workflow {{$node[\"Error Trigger\"].json[\"workflow\"][\"name"]}}failed.\nHave a look at it here: {{$node[\"Error Trigger\"].json[\"execution\"][\"url\"]}}",
				"attachments": [],
				"otherOptions": {}
			},
			"name": "Slack",
			"type": "n8n-nodes-base.slack",
			"position": [
				900,
				-380
			],
			"typeVersion": 1,
			"credentials": {
				"slackApi": {
					"id": "17",
					"name": "slack_credentials"
				}
			}
		}
	],
	"connections": {
		"Error Trigger": {
			"main": [
				[
					{
						"node": "Slack",
						"type": "main",
						"index": 0
					}
				]
			]
		}
	}
}

----------------------------------------

TITLE: Configuring Node Categories in n8n JSON Codex
DESCRIPTION: Example of key parameters required in an n8n node codex file. The file must contain node identification, versioning information, category classification, and resource links for documentation.

LANGUAGE: json
CODE:
{
  "node": "n8n-nodes-base.openweatherapi",
  "nodeVersion": "1.0",
  "codexVersion": "1.0",
  "categories": ["Data & Storage"],
  "resources": {
    "documentation": []
  }
}

----------------------------------------

TITLE: Using _ifEmpty in Python
DESCRIPTION: Checks if the first parameter is empty and returns either the first parameter (if not empty) or the second parameter (if empty) in Python.

LANGUAGE: Python
CODE:
_ifEmpty(value, defaultValue)

----------------------------------------

TITLE: Google Books Node Operations List
DESCRIPTION: Structured list of supported operations for the Google Books node, including bookshelf management, volume handling, and querying capabilities.

LANGUAGE: markdown
CODE:
## Operations

* Bookshelf
    * Retrieve a specific bookshelf resource for the specified user
    * Get all public bookshelf resource for the specified user
* Bookshelf Volume
    * Add a volume to a bookshelf
    * Clears all volumes from a bookshelf
    * Get all volumes in a specific bookshelf for the specified user
    * Moves a volume within a bookshelf
    * Removes a volume from a bookshelf
* Volume
    * Get a volume resource based on ID
    * Get all volumes filtered by query

----------------------------------------

TITLE: Cron Expression Format Structure
DESCRIPTION: Breakdown of the six-position cron expression format showing the meaning of each position from seconds to day of week.

LANGUAGE: cron
CODE:
(*)   *    *    *    *    *
(sec) min  hour  dom  month dow

----------------------------------------

TITLE: n8n Data Structure Example
DESCRIPTION: Example showing the standard JSON structure used for passing data between n8n nodes. Demonstrates both the required json property and optional binary data format.

LANGUAGE: json
CODE:
[
    {
   	 "json": {
   		 "apple": "beets",
   		 "carrot": {
   			 "dill": 1
   		 }
   	 },
   	 "binary": {
   		 "apple-picture": {
   			 "data": "....",
   			 "mimeType": "image/png",
   			 "fileExtension": "png",
   			 "fileName": "example.png"
   		 }
   	 }
    },
    ...
]

----------------------------------------

TITLE: Creating Custom n8n Docker Image with Private Nodes
DESCRIPTION: This Dockerfile sets up a custom n8n Docker image with Alpine Linux, including necessary dependencies and configurations for running n8n with private nodes. It uses node:16-alpine as the base image and installs required packages and fonts.

LANGUAGE: Dockerfile
CODE:
FROM node:16-alpine

ARG N8N_VERSION

RUN if [ -z "$N8N_VERSION" ] ; then echo "The N8N_VERSION argument is missing!" ; exit 1; fi

# Update everything and install needed dependencies
RUN apk add --update graphicsmagick tzdata git tini su-exec

# Set a custom user to not have n8n run as root
USER root

# Install n8n and the packages it needs to build it correctly.
RUN apk --update add --virtual build-dependencies python3 build-base ca-certificates && \
    npm config set python "$(which python3)" && \
    npm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} && \
    apk del build-dependencies \
    && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root;


# Install fonts
RUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \
    update-ms-fonts && \
    fc-cache -f && \
    apk del fonts && \
    find  /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \; \
    && rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root

ENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu

WORKDIR /data

COPY docker-entrypoint.sh /docker-entrypoint.sh
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]

EXPOSE 5678/tcp

----------------------------------------

TITLE: Combined String and $fromAI Expression
DESCRIPTION: Example demonstrating how to combine static text with a dynamic $fromAI() function call in an expression.

LANGUAGE: javascript
CODE:
Generated by AI: {{ $fromAI("subject") }}

----------------------------------------

TITLE: Plivo Node Operations
DESCRIPTION: List of supported operations in the Plivo node including voice calls, SMS messaging, and MMS messaging (limited to US/Canada)

LANGUAGE: markdown
CODE:
* Call
    * Make a voice call
* MMS
    * Send an MMS message (US/Canada only)
* SMS
    * Send an SMS message.

----------------------------------------

TITLE: Environment Variable Configuration for Timezone
DESCRIPTION: Configuration setting for the GENERIC_TIMEZONE environment variable used in self-hosted n8n instances to set the global timezone.



----------------------------------------

TITLE: Building Custom n8n Docker Image
DESCRIPTION: This command builds a custom n8n Docker image with private nodes. It requires specifying the n8n version number as a build argument.

LANGUAGE: shell
CODE:
docker build --build-arg N8N_VERSION=<n8n-version-number> --tag=customizedn8n .

----------------------------------------

TITLE: Accessing n8n Credential Schema Endpoint
DESCRIPTION: Demonstrates the endpoint pattern for retrieving credential format documentation for specific credential types.

LANGUAGE: shell
CODE:
N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/credentials/schema/{credentialTypeName}

----------------------------------------

TITLE: Setting Variables via n8n API using curl
DESCRIPTION: This curl command demonstrates how to make a POST request to the n8n API endpoint '/source-control/pull' to set or update variable values. It includes headers for content type and API key, and a JSON payload with force flag and variable key-value pairs.

LANGUAGE: curl
CODE:
curl --location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \
--header 'Content-Type: application/json' \
--header 'X-N8N-API-KEY: <YOUR-API-KEY>' \
--data '{
"force": true,
"variables": { 
		"key1": "value1",
		"key2": "value2"
}
}'

----------------------------------------

TITLE: Numeric $fromAI Parameter Example
DESCRIPTION: Example showing how to use $fromAI() function with numeric type parameter for inventory tracking.

LANGUAGE: javascript
CODE:
$fromAI("numItemsInStock", "Number of items in stock", "number", 5)

----------------------------------------

TITLE: Beeminder Node Operations Reference
DESCRIPTION: Lists the core operations available in the Beeminder node for working with data points. These operations allow users to create, delete, get, and update data points for Beeminder goals.

LANGUAGE: markdown
CODE:
**data point**
- Create data point for a goal
- Delete a data point
- Get all data points for a goal
- Update a data point

----------------------------------------

TITLE: SQL Query Example in Merge Node
DESCRIPTION: Example SQL query for merging data from two inputs using a LEFT JOIN operation.

LANGUAGE: sql
CODE:
SELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id

----------------------------------------

TITLE: Chat Workflow Demo JSON Reference 2
DESCRIPTION: Reference to a JSON workflow demonstration file for the AI agent setup

LANGUAGE: markdown
CODE:
[[ workflowDemo("file:////advanced-ai/tutorials/chat_02.json") ]]

----------------------------------------

TITLE: Configuring Airtable node in n8n
DESCRIPTION: This snippet demonstrates how to configure the Airtable node in n8n to insert data into an Airtable base. It includes setting up credentials, selecting the base and table, and configuring the operation mode.

LANGUAGE: javascript
CODE:
// Airtable node configuration
{
  "credential": "Create new credential",
  "resource": "Record",
  "operation": "Create",
  "base": "beginner course",
  "table": "orders",
  "mappingColumnMode": "Map automatically"
}

----------------------------------------

TITLE: Complete $fromAI Function Call with All Parameters
DESCRIPTION: Example showing the $fromAI() function usage with all available parameters including key, description, type, and default value.

LANGUAGE: javascript
CODE:
$fromAI("name", "The commenter's name", "string", "Jane Doe")

----------------------------------------

TITLE: Taiga Node Operations List
DESCRIPTION: Lists the available operations for the Taiga node in n8n, focusing on issue management functionality.

LANGUAGE: markdown
CODE:
- **Issue**
    - Create an issue
    - Delete an issue
    - Get an issue
    - Get all issues
    - Update an issue

----------------------------------------

TITLE: Simplified $fromAI Name Parameter Example
DESCRIPTION: Simplified version of the $fromAI() function call using only the required key parameter.

LANGUAGE: javascript
CODE:
$fromAI("name")

----------------------------------------

TITLE: Sample Input Data Generation - Code Node 2
DESCRIPTION: JavaScript code to generate sample greeting data with language fields for testing the Merge node.

LANGUAGE: javascript
CODE:
return [
	  {
    json: {
      greeting: 'Hello',
      language: 'en',
    }
  },
  {
    json: {
      greeting: 'Hallo',
      language: 'de',
    }
  }
];

----------------------------------------

TITLE: Configuring Expression in If Node for n8n Workflow
DESCRIPTION: This snippet demonstrates how to set up an expression in the If node to filter orders based on their status. It uses the $json object to access data from the previous HTTP Request node.

LANGUAGE: javascript
CODE:
{{ $json.orderStatus }}

----------------------------------------

TITLE: Basic $fromAI Function Call in JavaScript
DESCRIPTION: Simple example of calling the $fromAI() function with just the required key parameter to dynamically populate a field.

LANGUAGE: javascript
CODE:
{{ $fromAI('email') }}

----------------------------------------

TITLE: Button HTML for Quiz Link
DESCRIPTION: HTML snippet for a centered button that links to the course quiz with custom styling applied. The button uses specific padding, border-radius, and color properties to match n8n's design system.

LANGUAGE: html
CODE:
<div style="text-align:center;">
	<button style="font-weight: 600;padding: 20px 46px;border-radius: 30px;color: #fff;background-color: #ff6d5a;border-color: #ff6d5a;border: 1px solid #ff6d5a;font-size: 14px;"><a href="https://n8n-community.typeform.com/to/JMoBXeGA" target="_blank" style="color: #fff;">Take the quiz!</a></button>
</div>

----------------------------------------

TITLE: Importing Workflow Template Snippet
DESCRIPTION: A markdown include directive for importing common workflow creation instructions

LANGUAGE: markdown
CODE:
--8<-- "_snippets/try-it-out/new-workflow.md"

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: Frontmatter metadata configuration for the AWS SNS node documentation page, defining title, description and content type.

LANGUAGE: markdown
CODE:
---
title: AWS SNS node documentation
description: Learn how to use the AWS SNS node in n8n. Follow technical documentation to integrate AWS SNS node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: HTTP Request Node Variables Documentation
DESCRIPTION: Built-in variables available for pagination in HTTP Request node

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/core-nodes/http/pagination-variables.md"

----------------------------------------

TITLE: Updating Docker Permissions for n8n 1.0
DESCRIPTION: This command updates the permissions for the n8n Docker container to run as the 'node' user instead of 'root' for improved security. It should be executed on the Docker host if permission errors appear in the n8n container logs when starting n8n 1.0.

LANGUAGE: bash
CODE:
docker run --rm -it --user root -v ~/.n8n:/home/node/.n8n --entrypoint chown n8nio/base:16 -R node:node /home/node/.n8n

----------------------------------------

TITLE: Converting JSON to XML with n8n XML Node
DESCRIPTION: Uses the XML node to convert JSON data from the Quotable API to XML format.

LANGUAGE: json
CODE:
{
  "parameters": {
    "mode": "jsonToXml",
    "propertyName": "data"
  }
}

----------------------------------------

TITLE: Serving Local Preview of n8n Documentation
DESCRIPTION: This command serves a local preview of the n8n documentation using MkDocs.

LANGUAGE: Bash
CODE:
mkdocs serve

----------------------------------------

TITLE: Contentful Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Contentful node documentation page, specifying title, description and content type.

LANGUAGE: yaml
CODE:
---
title: Contentful node documentation
description: Learn how to use the Contentful node in n8n. Follow technical documentation to integrate Contentful node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: Development Testing of Custom n8n Nodes Module
DESCRIPTION: Commands for building and locally testing custom n8n nodes module during development.

LANGUAGE: bash
CODE:
# Build the code
npm run build

# "Publish" the package locally
npm link

LANGUAGE: bash
CODE:
# "Install" the above locally published module
npm link n8n-nodes-my-custom-nodes

# Start n8n
n8n

----------------------------------------

TITLE: Constructing n8n API Playground Path
DESCRIPTION: Shows the pattern for constructing the API playground URL using environment variables. The current API version is 1.

LANGUAGE: shell
CODE:
N8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/docs

----------------------------------------

TITLE: Generating Custom Cron Expression for Daily Execution (Simplified)
DESCRIPTION: This snippet shows a simplified cron expression for triggering a workflow daily at 04:08, omitting the seconds field for brevity.

LANGUAGE: plaintext
CODE:
8 4 * * *

----------------------------------------

TITLE: Accessing Specific Property from Linked Item in n8n (JavaScript)
DESCRIPTION: This example shows how to extract a specific property (name) from a linked item in a previous node's output. It assumes a JSON structure with id and name fields.

LANGUAGE: javascript
CODE:
{{$("<node-name>").item.json.name}}

----------------------------------------

TITLE: Cloning and Setting Up n8n Documentation Repository
DESCRIPTION: These commands clone the n8n documentation repository, navigate to the project directory, and install the required dependencies. It includes steps for both n8n GitHub organization members and external contributors.

LANGUAGE: Bash
CODE:
git clone --recurse-submodules git@github.com:n8n-io/n8n-docs.git
cd n8n-docs
pip install -r requirements.txt
pip install _submodules/insiders

LANGUAGE: Bash
CODE:
git clone https://github.com/<your-username>/n8n-docs.git
cd n8n-docs
pip install -r requirements.txt
pip install mkdocs-material

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: Configuration metadata for the Strava node documentation page, including title, description, and content type specifications.

LANGUAGE: markdown
CODE:
---
title: Strava node documentation
description: Learn how to use the Strava node in n8n. Follow technical documentation to integrate Strava node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: Todoist Node Operations List
DESCRIPTION: List of supported operations for the Todoist node in n8n, including task management operations.

LANGUAGE: markdown
CODE:
* Task
    * Create a new task
    * Close a task
    * Delete a task
    * Get a task
    * Get all tasks
    * Reopen a task
    * Update a task

----------------------------------------

TITLE: Implementing Weather Node in TypeScript
DESCRIPTION: TypeScript code for implementing a Weather node in n8n, including node description, properties, and execution logic.

LANGUAGE: typescript
CODE:
import {
	IDataObject,
	IExecuteFunctions,
	INodeExecutionData,
	INodeType,
	INodeTypeDescription,
	IRequestOptions,
	NodeApiError,
	NodeOperationError,
} from 'n8n-workflow';

export class Weather implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Weather',
		name: 'Weather',
		icon: 'fa:sun',
		group: ['input'],
		version: 1,
		description: 'Gets current and future weather information',
		defaults: {
			name: 'Weather',
			color: '#554455',
		},
		inputs: ['main'],
		outputs: ['main'],
		credentials: [
			{
				name: 'weatherApi',
				required: true,
			},
		],
		properties: [
			{
				displayName: 'Operation',
				name: 'operation',
				type: 'options',
				options: [
					{
						name: 'Current Weather',
						value: 'currentWeather',
						description: 'Returns the current weather data',
					},
					{
						name: '5 day Forecast',
						value: '5DayForecast',
						description: 'Returns the weather data for the next 5 days',
					},
				],
				default: 'currentWeather',
				description: 'The operation to perform.',
			},
			{
				displayName: 'Format',
				name: 'format',
				type: 'options',
				options: [
					{
						name: 'Imperial',
						value: 'imperial',
						description: 'Fahrenheit | miles/hour',
					},
					{
						name: 'Metric',
						value: 'metric',
						description: 'Celsius | meter/sec',
					},
					{
						name: 'Scientific',
						value: 'standard',
						description: 'Kelvin | meter/sec',
					},
				],
				default: 'metric',
				description: 'The format in which format the data should be returned.',
			},

			// ----------------------------------
			//         Location Information
			// ----------------------------------
			{
				displayName: 'Location Selection',
				name: 'locationSelection',
				type: 'options',
				options: [
					{
						name: 'City Name',
						value: 'cityName',
					},
					{
						name: 'City ID',
						value: 'cityId',
					},
					{
						name: 'Coordinates',
						value: 'coordinates',
					},
					{
						name: 'Zip Code',
						value: 'zipCode',
					},
				],
				default: 'cityName',
				description: 'How to define the location for which to return the weather.',
			},

			{
				displayName: 'City',
				name: 'cityName',
				type: 'string',
				default: '',
				placeholder: 'berlin,de',
				required: true,
				displayOptions: {
					show: {
						locationSelection: [
							'cityName',
						],
					},
				},
				description: 'The name of the city to return the weather of.',
			},

			{
				displayName: 'City ID',
				name: 'cityId',
				type: 'number',
				default: 160001123,
				required: true,
				displayOptions: {
					show: {
						locationSelection: [
							'cityId',
						],
					},
				},
				description: 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/',
			},

			{
				displayName: 'Latitude',
				name: 'latitude',
				type: 'string',
				default: '',
				placeholder: '13.39',
				required: true,
				displayOptions: {
					show: {
						locationSelection: [
							'coordinates',
						],
					},
				},
				description: 'The latitude of the location to return the weather of.',
			},

			{
				displayName: 'Longitude',
				name: 'longitude',
				type: 'string',
				default: '',
				placeholder: '52.52',
				required: true,
				displayOptions: {
					show: {
						locationSelection: [
							'coordinates',
						],
					},
				},
				description: 'The longitude of the location to return the weather of.',
			},

			{
				displayName: 'Zip Code',
				name: 'zipCode',
				type: 'string',
				default: '',
				placeholder: '10115,de',
				required: true,
				displayOptions: {
					show: {
						locationSelection: [
							'zipCode',
						],
					},
				},
				description: 'The id of city to return the weather of. List can be downloaded here: http://bulk.openweathermap.org/sample/',
			},

			{
				displayName: 'Language',
				name: 'language',
				type: 'string',
				default: '',
				placeholder: 'en',
				required: false,
				description: 'The two letter language code to get your output in (eg. en, de, ...).',
			},

		],
	};


	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
		const items = this.getInputData();
		const returnData: IDataObject[] = [];

		const credentials = await this.getCredentials('openWeatherMapApi');

		if (credentials === undefined) {
			throw new NodeOperationError(this.getNode(), 'No credentials got returned!');
		}

		const operation = this.getNodeParameter('operation', 0) as string;

		let endpoint = '';
		let locationSelection;
		let language;

		let qs: IDataObject;

		for (let i = 0; i < items.length; i++) {

			try {

				// Set base data
				qs = {
					APPID: credentials.accessToken,
					units: this.getNodeParameter('format', i) as string,
				};

				// Get the location
				locationSelection = this.getNodeParameter('locationSelection', i) as string;
				if (locationSelection === 'cityName') {
					qs.q = this.getNodeParameter('cityName', i) as string;
				} else if (locationSelection === 'cityId') {
					qs.id = this.getNodeParameter('cityId', i) as number;
				} else if (locationSelection === 'coordinates') {
					qs.lat = this.getNodeParameter('latitude', i) as string;
					qs.lon = this.getNodeParameter('longitude', i) as string;
				} else if (locationSelection === 'zipCode') {
					qs.zip = this.getNodeParameter('zipCode', i) as string;
				} else {
					throw new NodeOperationError(this.getNode(), `The locationSelection "${locationSelection}" is not known!`);
				}

				// Get the language
				language = this.getNodeParameter('language', i) as string;
				if (language) {
					qs.lang = language;
				}

				if (operation === 'currentWeather') {
					// ----------------------------------
					//         currentWeather
					// ----------------------------------

					endpoint = 'weather';
				} else if (operation === '5DayForecast') {
					// ----------------------------------
					//         5DayForecast
					// ----------------------------------

					endpoint = 'forecast';
				} else {
					throw new NodeOperationError(this.getNode(), `The operation "${operation}" is not known!`);
				}

				const options: IRequestOptions = {
					method: 'GET',
					qs,
					uri: `https://api.openweathermap.org/data/2.5/${endpoint}`,
					json: true,
				};

				let responseData;
				try {
					responseData = await this.helpers.request(options);
				} catch (error) {
					throw new NodeApiError(this.getNode(), error);
				}


				returnData.push(responseData as IDataObject);

			} catch (error) {
				if (this.continueOnFail()) {
					returnData.push({json:{ error: error.message }});
					continue;
				}
				throw error;
			}
		}

		return [this.helpers.returnJsonArray(returnData)];
	}
}

----------------------------------------

TITLE: Nested Data Structure Example in JavaScript
DESCRIPTION: Shows a more complex data structure with nested objects, demonstrating how n8n handles hierarchical data mapping with multiple levels of nesting.

LANGUAGE: javascript
CODE:
[
  {
    "name": "First item",
    "nested": {
      "example-number-field": 1,
      "example-string-field": "apples"
    }
  },
  {
    "name": "Second item",
    "nested": {
      "example-number-field": 2,
      "example-string-field": "oranges"
    }
  }
]

----------------------------------------

TITLE: Committing and Pushing Changes to n8n Docs
DESCRIPTION: Commands for staging changes, creating a commit with a descriptive message, and pushing the branch to the remote repository.

LANGUAGE: bash
CODE:
git add *
git commit -m "<short summary of changes>"
git push --set-upstream origin <branch-name>

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Oura node documentation page, defining metadata like title, description and content type.

LANGUAGE: yaml
CODE:
title: Oura node documentation
description: Learn how to use the Oura node in n8n. Follow technical documentation to integrate Oura node into your workflows.
contentType: [integration, reference]

----------------------------------------

TITLE: Linking Node to Local n8n Instance
DESCRIPTION: Link the custom node package to your local n8n installation

LANGUAGE: shell
CODE:
npm link <node-package-name>

----------------------------------------

TITLE: Get Administrators Operation Configuration
DESCRIPTION: Configuration steps for retrieving chat administrators using Telegram's getChatAdministrators API method. Requires Telegram credentials and chat ID parameter.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Get Administrators**
* **Chat ID**: Enter the Chat ID or username of the target channel in the format `@channelusername`

----------------------------------------

TITLE: Getting Node Outputs Method
DESCRIPTION: Method to retrieve all outputs of the current node.

LANGUAGE: typescript
CODE:
this.getNodeOutputs()

----------------------------------------

TITLE: Setting Environment Variable to Disable n8n Templates
DESCRIPTION: Sets the N8N_TEMPLATES_ENABLED environment variable to false to disable the templates feature in n8n.

LANGUAGE: plaintext
CODE:
N8N_TEMPLATES_ENABLED=false

----------------------------------------

TITLE: Box Node Template Widget Include
DESCRIPTION: Markdown include directive for displaying Box-related templates in the documentation.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'box') ]]

----------------------------------------

TITLE: Set Chat Description Operation Configuration
DESCRIPTION: Configuration steps for setting chat description using Telegram's setChatDescription API method. Requires Telegram credentials, chat ID, and description parameters.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Set Description**
* **Chat ID**: Enter the Chat ID or username of the channel
* **Description**: Enter the new description (max 255 characters)

----------------------------------------

TITLE: Getting Main Input Data Method
DESCRIPTION: Method to retrieve data from the main input. Takes optional input index and input name parameters.

LANGUAGE: typescript
CODE:
this.getInputData(inputIndex?, inputName?)

----------------------------------------

TITLE: Localizing Text in JSON
DESCRIPTION: Example of customizing text localization in the en.json file. It demonstrates how to use linked locale messages to replace 'n8n' with a custom brand name.

LANGUAGE: js
CODE:
{
	"_brand.name": "My Brand",
	//replace n8n with link to _brand.name
	"about.aboutN8n": "About @:_brand.name",
	"about.n8nVersion": "@:_brand.name Version",
}

----------------------------------------

TITLE: Displaying Pull and Push Buttons in Markdown
DESCRIPTION: This snippet demonstrates how to embed and caption images showing the pull and push buttons in both closed and open menu states using Markdown syntax.

LANGUAGE: markdown
CODE:
??? Details "View screenshot" 
	<figure markdown>
		![Pull and push buttons when menu is closed](/_images/source-control-environments/pull-push-menu-closed.png)
		<figcaption>Pull and push buttons when menu is closed</figcaption>
	</figure>

	<figure markdown>
		![Pull and push buttons when menu is open](/_images/source-control-environments/pull-push-menu-open.png)
		<figcaption>Pull and push buttons when menu is open</figcaption>
	</figure>

----------------------------------------

TITLE: Taiga Node Template Widget
DESCRIPTION: Template widget inclusion code for displaying relevant Taiga workflow templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'taiga') ]]

----------------------------------------

TITLE: Updating n8n with Docker Compose
DESCRIPTION: This snippet demonstrates the process of updating n8n when using Docker Compose. It includes commands to pull the latest version, stop and remove the older version, and start the new container. These steps ensure a smooth update process for n8n running in a Docker environment.

LANGUAGE: sh
CODE:
# Pull latest version
docker compose pull

# Stop and remove older version
docker compose down

# Start the container
docker compose up -d

----------------------------------------

TITLE: Segment Node Template Widget Include
DESCRIPTION: Markdown include directive for the templates widget, used to display relevant Segment node templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'segment') ]]

----------------------------------------

TITLE: Spotify Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Spotify node documentation page, defining metadata like title, description, content type and priority.

LANGUAGE: yaml
CODE:
---
title: Spotify node documentation
description: Learn how to use the Spotify node in n8n. Follow technical documentation to integrate Spotify node into your workflows.
contentType: [integration, reference]
priority: medium
---

----------------------------------------

TITLE: Multiselect List with JMESPath for Names
DESCRIPTION: Shows how to use JMESPath multiselect to create new lists containing both first and last names from a JSON object in n8n, with examples for Expressions and Code nodes in JavaScript and Python.

LANGUAGE: javascript
CODE:
{{$jmespath($json.body.people, "[].[first, last]")}}

LANGUAGE: javascript
CODE:
let newList = $jmespath($json.body.people, "[].[first, last]");
return {newList};

LANGUAGE: python
CODE:
newList = _jmespath(_json.body.people, "[].[first, last]")
return {"newList":newList}

----------------------------------------

TITLE: Rocket.Chat Template Widget Integration
DESCRIPTION: Markdown template widget inclusion for displaying Rocket.Chat related templates

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'rocketchat') ]]

----------------------------------------

TITLE: Retrieving Recent Files from Google Drive using n8n Workflow
DESCRIPTION: This workflow demonstrates how to retrieve the most recent file from Google Drive using n8n nodes. It involves searching for files, sorting them by modification time, and then accessing the most recent file.

LANGUAGE: json
CODE:
{{ $json.id }}

----------------------------------------

TITLE: N8N Unexecuted Node Error Message
DESCRIPTION: Example of the error message displayed when attempting to reference an unexecuted node. Shows the standard format of the error notification.

LANGUAGE: plaintext
CODE:
An expression references the node '<node-name>', but it hasn't been executed yet. Either change the expression, or re-wire your workflow to make sure that node executes first.

----------------------------------------

TITLE: Pushover Node Configuration Reference
DESCRIPTION: Template inclusion and reference markdown for the Pushover node documentation showing supported operations and integration examples.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/builtin/app-nodes/ai-tools.md"

## Operations

* Message
    * Push

## Templates and examples

[[ templatesWidget(page.title, 'pushover') ]]

--8<-- "_snippets/integrations/builtin/app-nodes/operation-not-supported.md"

----------------------------------------

TITLE: Google Books Node Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Google Books node documentation page, specifying title, description, and content type.

LANGUAGE: yaml
CODE:
---
title: Google Books node documentation
description: Learn how to use the Google Books node in n8n. Follow technical documentation to integrate Google Books node into your workflows.
contentType: [integration, reference]
---

----------------------------------------

TITLE: Rate Limit Handling Workflow Template for OpenAI in n8n
DESCRIPTION: A workflow template that implements batch processing with wait intervals to handle OpenAI rate limits. The workflow splits data into batches of 500 items, processes them through OpenAI, and implements a wait period between batches.

LANGUAGE: json
CODE:
{
    "nodes": [
    {
        "parameters": {},
        "id": "35d05920-ad75-402a-be3c-3277bff7cc67",
        "name": "When clicking 'Test workflow'",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
        880,
        400
        ]
    },
    {
        "parameters": {
        "batchSize": 500,
        "options": {}
        },
        "id": "ae9baa80-4cf9-4848-8953-22e1b7187bf6",
        "name": "Loop Over Items",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 3,
        "position": [
        1120,
        420
        ]
    },
    {
        "parameters": {
        "resource": "chat",
        "options": {},
        "requestOptions": {}
        },
        "id": "a519f271-82dc-4f60-8cfd-533dec580acc",
        "name": "OpenAI",
        "type": "n8n-nodes-base.openAi",
        "typeVersion": 1,
        "position": [
        1380,
        440
        ]
    },
    {
        "parameters": {
        "unit": "minutes"
        },
        "id": "562d9da3-2142-49bc-9b8f-71b0af42b449",
        "name": "Wait",
        "type": "n8n-nodes-base.wait",
        "typeVersion": 1,
        "position": [
        1620,
        440
        ],
        "webhookId": "714ab157-96d1-448f-b7f5-677882b92b13"
    }
    ],
    "connections": {
    "When clicking 'Test workflow'": {
        "main": [
        [
            {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
            }
        ]
        ]
    },
    "Loop Over Items": {
        "main": [
        null,
        [
            {
            "node": "OpenAI",
            "type": "main",
            "index": 0
            }
        ]
        ]
    },
    "OpenAI": {
        "main": [
        [
            {
            "node": "Wait",
            "type": "main",
            "index": 0
            }
        ]
        ]
    },
    "Wait": {
        "main": [
        [
            {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
            }
        ]
        ]
    }
    },
    "pinData": {}
}

----------------------------------------

TITLE: Spotify Node Template Widget Integration
DESCRIPTION: Markdown template widget inclusion for displaying Spotify-specific templates and examples.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'spotify') ]]

----------------------------------------

TITLE: Gmail Thread Operations Documentation
DESCRIPTION: Documentation for Gmail node thread operations including parameters and usage instructions. Details operations like adding/removing labels, deleting threads, getting thread details, replying to messages, and managing trash status.

LANGUAGE: markdown
CODE:
title: Gmail node Thread Operations documentation
description: Learn how to use the Thread Operations of the Gmail node in n8n. Follow technical documentation to integrate Thread Operations into your workflows.
contentType: [integration, reference]
priority: high

----------------------------------------

TITLE: Creating Custom Directory
DESCRIPTION: Create and initialize a custom directory for n8n nodes when missing from local installation

LANGUAGE: shell
CODE:
mkdir custom 
cd custom 
npm init

----------------------------------------

TITLE: Specifying Column Data Types in CrateDB Node for n8n
DESCRIPTION: This snippet demonstrates how to specify data types for columns when using the CrateDB node in n8n. It shows the syntax for defining integer and text data types for 'id' and 'name' columns respectively.

LANGUAGE: sql
CODE:
id:int,name:text

----------------------------------------

TITLE: Markdown Navigation Link
DESCRIPTION: A markdown link directing users to Drift credentials documentation.

LANGUAGE: markdown
CODE:
[Drift credentials](/integrations/builtin/credentials/drift.md)

----------------------------------------

TITLE: Starting n8n Server
DESCRIPTION: Start the local n8n server instance

LANGUAGE: shell
CODE:
n8n start

----------------------------------------

TITLE: Template Widget Include
DESCRIPTION: Template include directive for displaying AWS SNS related templates and examples.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'aws-sns') ]]

----------------------------------------

TITLE: Building and Linking Custom Node
DESCRIPTION: Build the custom node and create a symbolic link for local development

LANGUAGE: shell
CODE:
npm run build
npm link

----------------------------------------

TITLE: Creating Credentials via API in n8n
DESCRIPTION: Example of creating Airtable credentials using n8n's REST API. The request includes the credential name, type, node access, and API key.

LANGUAGE: json
CODE:
{
   "name":"MyAirtable",
   "type":"airtableApi",
   "nodesAccess":[
      {
         "nodeType":"n8n-nodes-base.airtable"
      }
   ],
   "data":{
      "apiKey":"q12we34r5t67yu"
   }
}

----------------------------------------

TITLE: Automizy Node Operations Reference - Markdown
DESCRIPTION: Structured list of supported operations for the Automizy node in n8n, covering contact and list management functionalities.

LANGUAGE: markdown
CODE:
* Contact
    * Create a contact
    * Delete a contact
    * Get a contact
    * Get all contacts
    * Update a contact
* List
    * Create a list
    * Delete a list
    * Get a list
    * Get all lists
    * Update a list

----------------------------------------

TITLE: Daily Cron Schedule with Seconds
DESCRIPTION: Cron expression to trigger a workflow every day at 04:08:30. Includes seconds specification in the expression.

LANGUAGE: cron
CODE:
30 8 4 * * *

----------------------------------------

TITLE: Cloning and Building n8n Repository
DESCRIPTION: Commands to clone the n8n repository, install dependencies, build, and start the application. It also mentions using 'npm run dev' for automatic rebuilding during development.

LANGUAGE: shell
CODE:
git clone https://github.com/<your-organization>/n8n.git n8n
cd n8n

npm install
npm run build
npm run start

----------------------------------------

TITLE: Installing n8n Globally
DESCRIPTION: Install n8n globally using npm package manager

LANGUAGE: shell
CODE:
npm install n8n -g

----------------------------------------

TITLE: Demonstrating Expression Resolution in n8n Nodes
DESCRIPTION: This example illustrates how the expression '{{ $json.name }}' resolves differently in root nodes versus sub-nodes when processing multiple input items.

LANGUAGE: expression
CODE:
{{ $json.name }}

----------------------------------------

TITLE: Customizing Theme Colors in SCSS
DESCRIPTION: Example of modifying the primary color in the _tokens.scss file. It shows how to change the HSL values for the primary color.

LANGUAGE: scss
CODE:
@mixin theme {
	--color-primary-h: 204;
	--color-primary-s: 100%;
	--color-primary-l: 50%;

----------------------------------------

TITLE: Setting pairedItem in n8n Programmatic Nodes (TypeScript)
DESCRIPTION: This code snippet demonstrates two methods of setting the 'pairedItem' property on items returned by a programmatic node in n8n. It shows how to use existing pairedItem information or set it manually with an index.

LANGUAGE: typescript
CODE:
// Use the pairedItem information of the incoming item
newItem = {
	"json": { . . . },
	"pairedItem": {
		"item": item.pairedItem,
		// Optional: choose the input to use
		// Set this if your node combines multiple inputs
		"input": 0
};

// Or set the index manually
newItem = {
		"json": { . . . }
		"pairedItem": {
			"item": i,
			// Optional: choose the input to use
			// Set this if your node combines multiple inputs
			"input": 0
		},
};

----------------------------------------

TITLE: Creating Multiple Trello Cards with n8n Input Data
DESCRIPTION: Example JSON input structure showing how to create multiple Trello cards using the Create-Card operation. Each object in the array contains a name-input-value that will be used as the card name.

LANGUAGE: json
CODE:
[
	{
		name-input-value: "test1"
	},
	{
		name-input-value: "test2"
	}
]

----------------------------------------

TITLE: Backend Hook Implementation
DESCRIPTION: Example of implementing backend hooks in n8n for frontend settings and workflow activation.

LANGUAGE: javascript
CODE:
module.exports = {
    "frontend": {
        "settings": [
            async function (settings) {
                settings.oauthCallbackUrls.oauth1 = 'https://n8n.example.com/oauth1/callback';
                settings.oauthCallbackUrls.oauth2 = 'https://n8n.example.com/oauth2/callback';
            }
        ]
    },
    "workflow": {
        "activate": [
            async function (workflowData) {
                const activeWorkflows = await this.dbCollections.Workflow.count({ active: true });

                if (activeWorkflows > 1) {
                    throw new Error(
                        'Active workflow limit reached.'
                    );
                }
            }
        ]
    }
}

----------------------------------------

TITLE: Generating New Items With pairedItem in n8n JavaScript
DESCRIPTION: This JavaScript code generates new items from the input data and includes the 'pairedItem' property. This ensures that each new item links to the item used to create it, maintaining the item linking chain in n8n.

LANGUAGE: javascript
CODE:
newItems = [];
for(let i=0; i<items.length; i++){
  newItems.push(
    {
      "json":
        {
          "name": items[i].json.name,
					"aBrandNewField": "New data for item " + i
        },
      "pairedItem": i
    }    
  )
}
return newItems;

----------------------------------------

TITLE: Sample Input Data for n8n Item Linking Example
DESCRIPTION: This JSON snippet represents the input data used in the item linking example. It contains an array of objects, each with 'id' and 'name' properties, representing different fictional characters.

LANGUAGE: json
CODE:
[
  {
    "id": "23423532",
    "name": "Jay Gatsby"
  },
  {
    "id": "23423533",
    "name": "José Arcadio Buendía"
  },
  {
    "id": "23423534",
    "name": "Max Sendak"
  },
  {
    "id": "23423535",
    "name": "Zaphod Beeblebrox"
  },
  {
    "id": "23423536",
    "name": "Edmund Pevensie"
  }
]

----------------------------------------

TITLE: Basic Data Merge Exercise Solution in JSON
DESCRIPTION: Sample workflow configuration demonstrating data merging between Customer Datastore and Code nodes using the Merge node with matching fields.

LANGUAGE: json
CODE:
{
"meta": {
	"templateCredsSetupCompleted": true,
	"instanceId": "cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7"
},
"nodes": [...],
"connections": {...},
"pinData": {}
}

----------------------------------------

TITLE: Generating New Items Without pairedItem in n8n JavaScript
DESCRIPTION: This JavaScript code generates new items from the input data, containing just the name and a new field. However, it doesn't include the 'pairedItem' property, which means there's no way to trace back from these items to the items used to generate them.

LANGUAGE: javascript
CODE:
newItems = [];
for(let i=0; i<items.length; i++){
  newItems.push(
    {
    "json":
      {
        "name": items[i].json.name,
				"aBrandNewField": "New data for item " + i
      }
    }
  )
}

return newItems;

----------------------------------------

TITLE: Setting pairedItem for Item Linking in n8n JavaScript
DESCRIPTION: This snippet demonstrates how to set the 'pairedItem' property when returning data in n8n to link the output item to the input item at index 0. This is crucial for maintaining item linking when adding new items or manually controlling the linking process.

LANGUAGE: javascript
CODE:
[
	{
		"json": {
			. . . 
		},
		// The index of the input item that generated this output item
		"pairedItem": 0
	}
]

----------------------------------------

TITLE: Rendering Quiz Button in HTML
DESCRIPTION: This HTML snippet creates a centered button that links to an external quiz. The button is styled with specific colors, padding, and border radius for a consistent appearance.

LANGUAGE: html
CODE:
<div style="text-align:center;">
	<button style="font-weight: 600;padding: 20px 46px;border-radius: 30px;color: #fff;background-color: #ff6d5a;border-color: #ff6d5a;border: 1px solid #ff6d5a;font-size: 14px;"><a href="https://n8n-community.typeform.com/to/r9hDbytg" target="_blank" style="color: #fff;">Take the quiz!</a></button>
</div>

----------------------------------------

TITLE: Configuring GitHub Action for n8n Workflow Pull in YAML
DESCRIPTION: This YAML configuration sets up a GitHub Action to automatically pull the latest n8n workflows when changes are pushed to the 'production' branch. It uses secrets for the instance URL and API key to securely authenticate the curl request.

LANGUAGE: yaml
CODE:
name: CI
on:
  # Trigger the workflow on push or pull request events for the "production" branch
  push:
    branches: [ "production" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  run-pull:
    runs-on: ubuntu-latest
    steps:
      - name: PULL
				# Use GitHub secrets to protect sensitive information
        run: >
          curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header
          'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}'

----------------------------------------

TITLE: Transforming Array to Object using smartJoin in n8n JavaScript
DESCRIPTION: This code demonstrates the use of the smartJoin function in n8n to convert an array of objects into a single object. It takes an array with 'type' and 'name' properties for each item and creates an object where the types become keys and names become values.

LANGUAGE: javascript
CODE:
// Input
{{ [{"type":"fruit", "name":"apple"},{"type":"vegetable", "name":"carrot"} ].smartJoin("type","name") }}
// Output
[Object: {"fruit":"apple","vegetable":"carrot"}]

----------------------------------------

TITLE: Configuring HTTP Request Node Parameters in n8n
DESCRIPTION: This code snippet shows the configuration of parameters for the HTTP Request node in n8n to fetch data from a data warehouse API. It includes setting the method, URL, headers, and authentication details.

LANGUAGE: json
CODE:
{
  "Method": "GET",
  "URL": "<Dataset URL from email>",
  "Send Headers": true,
  "Header Parameters": {
    "Name": "unique_id",
    "Value": "<Unique ID from email>"
  },
  "Authentication": "Generic Credential Type",
  "Generic Auth Type": "Header Auth",
  "Credential for Header Auth": {
    "Name": "<Header Auth name from email>",
    "Value": "<Header Auth value from email>"
  }
}

----------------------------------------

TITLE: Embedding Interactive Workflow in Markdown
DESCRIPTION: This snippet demonstrates how to embed an interactive workflow from a template URL into the markdown document.

LANGUAGE: markdown
CODE:
[[ workflowDemo("https://api.n8n.io/workflows/templates/655") ]]

----------------------------------------

TITLE: Including Core Node Icons in HTML for n8n
DESCRIPTION: This snippet demonstrates the structure for including multiple core node icons in an HTML document for n8n. It uses the '--8<--' syntax to include external HTML files containing individual node icons.

LANGUAGE: HTML
CODE:
<div class="node-icon-container">
--8<-- "_snippets/node-icon-square/core-nodes/compression.html"
--8<-- "_snippets/node-icon-square/core-nodes/cron.html"
--8<-- "_snippets/node-icon-square/core-nodes/crypto.html"
--8<-- "_snippets/node-icon-square/core-nodes/date-and-time.html"
--8<-- "_snippets/node-icon-square/core-nodes/edit-image.html"
--8<-- "_snippets/node-icon-square/core-nodes/error-trigger.html"
--8<-- "_snippets/node-icon-square/core-nodes/execute-command.html"
--8<-- "_snippets/node-icon-square/core-nodes/execute-workflow.html"
--8<-- "_snippets/node-icon-square/core-nodes/function-item.html"
--8<-- "_snippets/node-icon-square/core-nodes/function.html"
--8<-- "_snippets/node-icon-square/core-nodes/git.html"
--8<-- "_snippets/node-icon-square/core-nodes/html-extract.html"
--8<-- "_snippets/node-icon-square/core-nodes/http-request.html"
--8<-- "_snippets/node-icon-square/core-nodes/icalendar.html"
--8<-- "_snippets/node-icon-square/core-nodes/n8n-nodes-base.if.html"
--8<-- "_snippets/node-icon-square/core-nodes/imap-email.html"
--8<-- "_snippets/node-icon-square/core-nodes/interval.html"
--8<-- "_snippets/node-icon-square/core-nodes/item-lists.html"
--8<-- "_snippets/node-icon-square/core-nodes/local-file-trigger.html"
--8<-- "_snippets/node-icon-square/core-nodes/merge.html"
--8<-- "_snippets/node-icon-square/core-nodes/move-binary-data.html"
--8<-- "_snippets/node-icon-square/core-nodes/n8n-trigger.html"
--8<-- "_snippets/node-icon-square/core-nodes/no-operation-do-nothing.html"
--8<-- "_snippets/node-icon-square/core-nodes/read-binary-file.html"
--8<-- "_snippets/node-icon-square/core-nodes/read-binary-files.html"
--8<-- "_snippets/node-icon-square/core-nodes/read-pdf.html"
--8<-- "_snippets/node-icon-square/core-nodes/rename-keys.html"
--8<-- "_snippets/node-icon-square/core-nodes/respond-to-webhook.html"
--8<-- "_snippets/node-icon-square/core-nodes/rss-read.html"
--8<-- "_snippets/node-icon-square/core-nodes/send-email.html"
--8<-- "_snippets/node-icon-square/core-nodes/set.html"
--8<-- "_snippets/node-icon-square/core-nodes/split-in-batches.html"
--8<-- "_snippets/node-icon-square/core-nodes/spreadsheet-file.html"
--8<-- "_snippets/node-icon-square/core-nodes/sse-trigger.html"
--8<-- "_snippets/node-icon-square/core-nodes/ssh.html"
--8<-- "_snippets/node-icon-square/core-nodes/start.html"
--8<-- "_snippets/node-icon-square/core-nodes/stop-and-error.html"
--8<-- "_snippets/node-icon-square/core-nodes/switch.html"
--8<-- "_snippets/node-icon-square/core-nodes/wait.html"
--8<-- "_snippets/node-icon-square/core-nodes/webhook.html"
--8<-- "_snippets/node-icon-square/core-nodes/workflow-trigger.html"
--8<-- "_snippets/node-icon-square/core-nodes/write-binary-file.html"
--8<-- "_snippets/node-icon-square/core-nodes/xml.html"
</div>

----------------------------------------

TITLE: Complete Chat Workflow Demo JSON Reference
DESCRIPTION: Reference to the final complete JSON workflow demonstration file

LANGUAGE: markdown
CODE:
[[ workflowDemo("file:////advanced-ai/tutorials/chat_complete.json") ]]

----------------------------------------

TITLE: Including Glossary in Markdown
DESCRIPTION: This snippet demonstrates how to include an external markdown file containing a glossary within the current document.

LANGUAGE: markdown
CODE:
--8<-- "_glossary/ai-glossary.md"

----------------------------------------

TITLE: Installing and Setting Up Custom n8n Nodes Module
DESCRIPTION: Commands to create a new directory, install n8n, and add custom nodes module for basic setup.

LANGUAGE: bash
CODE:
# Create folder for n8n installation
mkdir my-n8n
cd my-n8n

# Install n8n
npm install n8n

# Install custom nodes module
npm install n8n-nodes-my-custom-nodes

# Start n8n
n8n

----------------------------------------

TITLE: Pulling Source Control Changes via n8n API (curl)
DESCRIPTION: This curl command demonstrates how to use the n8n API to automatically pull changes from source control. It requires the instance URL and an API key, and uses the '/source-control/pull' endpoint with the 'force' option set to true.

LANGUAGE: curl
CODE:
curl --request POST \
	--location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \
	--header 'Content-Type: application/json' \
	--header 'X-N8N-API-KEY: <YOUR-API-KEY>' \
	--data '{"force": true}'

----------------------------------------

TITLE: Markdown Structure for Node Issues Documentation
DESCRIPTION: Basic markdown structure template for documenting node issues, including main heading and error section format.

LANGUAGE: markdown
CODE:
# _Name_ node common issues

Here are some common errors and issues with the [_Name_ node](/integrations/builtin/_filepathtonode_.md) and steps to resolve or troubleshoot them.

## _Error code or issue description_

This error displays when _insert explanation_.

To resolve, _insert steps or list of suggestions on what to test or try to resolve the issue_.

----------------------------------------

TITLE: Creating Multiple Items with IDs in n8n Function Node (TypeScript)
DESCRIPTION: This snippet demonstrates how to create 10 new items with IDs ranging from 0 to 9 using a for loop in the Function node. It showcases the correct output format for the node.

LANGUAGE: typescript
CODE:
const newItems = [];

for (let i=0;i<10;i++) {
  newItems.push({
    json: {
      id: i
    }
  });
}

return newItems;

----------------------------------------

TITLE: Implementing Autofriend API Credentials in TypeScript
DESCRIPTION: Code for creating and implementing Autofriend API credentials in n8n.

LANGUAGE: typescript
CODE:
import {
	ICredentialType,
	NodePropertyTypes,
} from 'n8n-workflow';

export class AutofriendApi implements ICredentialType {
	name = 'autofriendApi';
	displayName = 'Autofriend API';
	properties = [
		{
			displayName: 'API Key',
			name: 'apiKey',
			type: 'string' as NodePropertyTypes,
			default: '',
		},
	];
}

----------------------------------------

TITLE: Setting Multiple Custom Data in n8n Workflows
DESCRIPTION: Sets multiple key-value pairs in the workflow execution's custom data, overwriting any existing data. Limited to 10 items maximum, with the same character limitations as single items.

LANGUAGE: javascript
CODE:
$execution.customData.setAll({"key1": "value1", "key2": "value2"})

LANGUAGE: python
CODE:
_execution.customData.setAll({"key1": "value1", "key2": "value2"})

----------------------------------------

TITLE: Generating Custom Cron Expression for Daily Execution at Specific Time
DESCRIPTION: This snippet demonstrates how to create a cron expression for triggering a workflow daily at 04:08:30. It uses the six-field cron format, including seconds.

LANGUAGE: plaintext
CODE:
30 8 4 * * *

----------------------------------------

TITLE: Implementing Webhook Lifecycle Methods for Autofriend Trigger in TypeScript
DESCRIPTION: Code implementing the webhook lifecycle methods (checkExists, create, delete) for the Autofriend Trigger node.

LANGUAGE: typescript
CODE:
// @ts-ignore
webhookMethods = {
	default: {
		async checkExists(this: IHookFunctions): Promise<boolean> {
			const webhookData = this.getWorkflowStaticData('node');
			const webhookUrl = this.getNodeWebhookUrl('default');
			const event = this.getNodeParameter('event') as string;
			const { hooks: webhooks } = await autofriendApiRequest.call(this, 'GET', '/hooks');
			for (const webhook of webhooks) {
				if (webhook.target_url === webhookUrl && webhook.event === snakeCase(event)) {
					webhookData.webhookId = webhook.hook_id;
					return true;
				}
			}
			return false;
		},
		async create(this: IHookFunctions): Promise<boolean> {
			const webhookUrl = this.getNodeWebhookUrl('default');
			const webhookData = this.getWorkflowStaticData('node');
			const event = this.getNodeParameter('event') as string;
			const body: IDataObject = {
				event: snakeCase(event),
				target_url: webhookUrl,
			};
			const webhook = await autofriendApiRequest.call(this, 'POST', '/hook', body);
			webhookData.webhookId = webhook.hook_id;
			return true;
		},
		async delete(this: IHookFunctions): Promise<boolean> {
			const webhookData = this.getWorkflowStaticData('node');
			try {
				await autofriendApiRequest.call(this, 'DELETE', `/hook/${webhookData.webhookId}`);
			} catch (error) {
				return false;
			}
			delete webhookData.webhookId;
			return true;
		},
	},
};

----------------------------------------

TITLE: Setting Single Custom Data in n8n Workflows
DESCRIPTION: Sets a single key-value pair in the workflow execution's custom data. The key must be under 50 characters and the value under 255 characters. Both must be strings.

LANGUAGE: javascript
CODE:
$execution.customData.set("key", "value");

LANGUAGE: python
CODE:
_execution.customData.set("key", "value");

----------------------------------------

TITLE: Implementing Webhook Method for Autofriend Trigger in TypeScript
DESCRIPTION: Code for the webhook method that handles incoming webhook requests for the Autofriend Trigger node.

LANGUAGE: typescript
CODE:
async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {
	const req = this.getRequestObject();
	return {
		workflowData: [
			this.helpers.returnJsonArray(req.body),
		],
	};
}

----------------------------------------

TITLE: Enabling TheHive Notifications via cURL
DESCRIPTION: cURL command to enable webhook notifications in TheHive by configuring organization-level notification settings for both testing and production endpoints.

LANGUAGE: sh
CODE:
curl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '
{
	"value": [
		{
		"delegate": false,
		"trigger": { "name": "AnyEvent"},
		"notifier": { "name": "webhook", "endpoint": "TESTING_WEBHOOK_NAME" }
		},
		{
		"delegate": false,
		"trigger": { "name": "AnyEvent"},
		"notifier": { "name": "webhook", "endpoint": "PRODUCTION_WEBHOOK_NAME" }
		}
	]
}'

----------------------------------------

TITLE: Frontmatter Configuration in YAML
DESCRIPTION: YAML frontmatter configuration for the tutorial page defining title, description and content type.

LANGUAGE: yaml
CODE:
---
title: Tutorial - Create environments with source control
description: How to use n8n's source control feature to create environments.
contentType: tutorial
---

----------------------------------------

TITLE: Initializing AutofriendTrigger Node Structure in TypeScript
DESCRIPTION: Basic structure for the AutofriendTrigger node, including imports, class definition, and node description.

LANGUAGE: typescript
CODE:
import {
   IDataObject,
   IHookFunctions,
   INodeType,
   INodeTypeDescription,
   IWebhookFunctions,
   IWebhookResponseData,
} from 'n8n-workflow';

export class AutofriendTrigger implements INodeType {
   description: INodeTypeDescription = {
     displayName: 'Autofriend Trigger',
     name: 'autofriendTrigger',
     icon: 'file:autofriend.svg',
     group: ['trigger'],
     version: 1,
     subtitle: '={{$parameter["event"]}}',
     description: 'Handle Autofriend events using webhooks',
     defaults: {
       name: 'Autofriend Trigger',
       color: '#6ad7b9',
     },
     inputs: [],
     outputs: ['main'],
     credentials: [],
     webhooks: [
       {
         name: 'default',
         httpMethod: 'POST',
         responseMode: 'onReceived',
         path: 'webhook',
       },
     ],
     properties: [],
   };
   async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {
     return {
       workflowData: [],
     };
   }
}

----------------------------------------

TITLE: Running n8n Docker Container with Host Mapping on Linux
DESCRIPTION: This command runs an n8n Docker container on Linux, mapping 'host.docker.internal' to the host gateway to allow connections to services on the host machine.

LANGUAGE: shell
CODE:
docker run -it --rm --add-host host.docker.internal:host-gateway --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n

----------------------------------------

TITLE: Markdown Code Block Usage Example
DESCRIPTION: Example showing how to use triple backticks for sharing workflow JSON in the community forum

LANGUAGE: markdown
CODE:
```

----------------------------------------

TITLE: Building Custom n8n Docker Image
DESCRIPTION: Command to build a custom n8n Docker image with the n8n-nodes-module installed.

LANGUAGE: dockerfile
CODE:
# Replace <n8n-version-number> with the n8n release version number.
# For example, N8N_VERSION=0.177.0
docker build --build-arg N8N_VERSION=<n8n-version-number> --tag=customizedn8n .

----------------------------------------

TITLE: LangChain Expressions in Human Message Template
DESCRIPTION: Available expressions that can be used in the Human Message Template parameter of the Plan and Execute Agent node. These expressions allow access to step information and agent memory.

LANGUAGE: markdown
CODE:
* `{previous_steps}`: Contains information about the previous steps the agent's already completed.
* `{current_step}`: Contains information about the current step.
* `{agent_scratchpad}`: Information to remember for the next iteration.

----------------------------------------

TITLE: Styling Main Sidebar Logo in SCSS
DESCRIPTION: SCSS code snippet for styling the logo in the main sidebar. It includes styles for positioning, sizing, and hover effects.

LANGUAGE: scss
CODE:
.logoItem {
	display: flex;
	justify-content: space-between;
	height: $header-height;
	line-height: $header-height;
	margin: 0 !important;
	border-radius: 0 !important;
	border-bottom: var(--border-width-base) var(--border-style-base) var(--color-background-xlight);
	cursor: default;

	&:hover, &:global(.is-active):hover {
		background-color: initial !important;
	}

	* { vertical-align: middle; }
	.icon {
		height: 18px;
		position: relative;
		left: 6px;
	}

}

----------------------------------------

TITLE: Cloning n8n-nodes-starter Repository
DESCRIPTION: Command to clone the n8n-nodes-starter repository as a starting point for creating a custom n8n-nodes-module.

LANGUAGE: bash
CODE:
git clone https://github.com/n8n-io/n8n-nodes-starter.git n8n-nodes-weather.

----------------------------------------

TITLE: Set Chat Title Operation Configuration
DESCRIPTION: Configuration steps for setting chat title using Telegram's setChatTitle API method. Requires Telegram credentials, chat ID, and title parameters.

LANGUAGE: markdown
CODE:
* **Credential to connect with**: Create or select an existing Telegram credential
* **Resource**: Select **Chat**
* **Operation**: Select **Set Title**
* **Chat ID**: Enter the Chat ID or username of the channel
* **Title**: Enter the new title (max 255 characters)

----------------------------------------

TITLE: Updating Window Title in HTML
DESCRIPTION: HTML snippet showing how to change the window title in the index.html file to reflect a custom brand name.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
	<!-- Replace html title attribute -->
	<title>My Brand - Workflow Automation</title>
</head>

----------------------------------------

TITLE: Installing n8n
DESCRIPTION: Command to install n8n in a new folder.

LANGUAGE: bash
CODE:
npm install n8n

----------------------------------------

TITLE: Creating Folders in Google Drive using n8n
DESCRIPTION: Parameters and configuration needed to create a new folder in Google Drive, including folder name, parent drive selection, and color options.

LANGUAGE: text
CODE:
- Credential to connect with
- Resource: Folder
- Operation: Create
- Folder Name
- Parent Drive
- Parent Folder
- Options:
  - Simplify Output
  - Folder Color

----------------------------------------

TITLE: Date Processing Workflow in n8n
DESCRIPTION: A complex workflow that processes dates, including rounding, conditional checks, and waiting intervals.

LANGUAGE: json
CODE:
{
  "name": "Course 2, Ch 2, Date exercise",
  "nodes": [
    {
      "parameters": {},
      "id": "6bf64d5c-4b00-43cf-8439-3cbf5e5f203b",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        620,
        280
      ]
    },
    {
      "parameters": {
        "operation": "getAllPeople",
        "returnAll": true
      },
      "id": "a08a8157-99ee-4d50-8fe4-b6d7e16e858e",
      "name": "Customer Datastore (n8n training)",
      "type": "n8n-nodes-base.n8nTrainingCustomerDatastore",
      "typeVersion": 1,
      "position": [
        840,
        360
      ]
    },
    {
      "parameters": {
        "operation": "roundDate",
        "date": "={{ $json.created }}",
        "mode": "roundUp",
        "outputFieldName": "new-date",
        "options": {
          "includeInputFields": true
        }
      },
      "id": "f66a4356-2584-44b6-a4e9-1e3b5de53e71",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1080,
        360
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "7c82823a-e603-4166-8866-493f643ba354",
              "leftValue": "={{ $json['new-date'] }}",
              "rightValue": "1960-01-01T00:00:00",
              "operator": {
                "type": "dateTime",
                "operation": "after"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cea39877-6183-4ea0-9400-e80523636912",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1280,
        360
      ]
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "id": "5aa860b7-c73c-4df0-ad63-215850166f13",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1480,
        260
      ],
      "webhookId": "be78732e-787d-463e-9210-2c7e8239761e"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e058832a-2461-4c6d-b584-043ecc036427",
              "name": "outputValue",
              "value": "={{ $json['new-date'] }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "be034e9e-3cf1-4264-9d15-b6760ce28f91",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1700,
        260
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "6e8e4308-d0e0-4d0d-bc29-5131b57cf061",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        620,
        480
      ]
    }
  ]
}

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Main documentation page structure using markdown formatting with frontmatter metadata, links, and grid layout for navigation cards.

LANGUAGE: markdown
CODE:
---
title: "Explore n8n Docs: Your Resource for Workflow Automation and Integrations"
description: Access n8n Docs for comprehensive guides on workflow automation and integrations. Learn how to integrate apps and enhance your automation capabilities.
contentType: overview
hide:
  - path
---

# Welcome to n8n Docs

----------------------------------------

TITLE: Contacts Data Structure Exercise
DESCRIPTION: Example of creating nested objects with personal and work email properties in n8n's required format.

LANGUAGE: javascript
CODE:
var myContacts = [
	{
		json: {
			name: 'Alice',
			email: {
				personal: 'alice@home.com',
				work: 'alice@wonderland.org'
			}
		}
	},
	{
		json: {
			name: 'Bob',
			email: {
				personal: 'bob@mail.com',
				work: 'contact@thebuilder.com'
			}
		}
	}
];

return myContacts;

----------------------------------------

TITLE: Role-based Permission Reference - Markdown Table
DESCRIPTION: Detailed permission matrix showing what each role type (Admin, Editor, Viewer) can and cannot do within an n8n project.

LANGUAGE: markdown
CODE:
| Permission | Admin | Editor | Viewer | 
| ---------- |------ | ------ | ------ | 
| View workflows in the project | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| View credentials in the project | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| View executions | :white_check_mark: | :white_check_mark: | :white_check_mark: | 
| Edit credentials and workflows | :white_check_mark: | :white_check_mark: | :x: | 
| Add workflows and credentials | :white_check_mark: | :white_check_mark: | :x: | 
| Execute workflows | :white_check_mark: | :white_check_mark: | :x: | 
| Manage members | :white_check_mark: | :x: | :x: | 
| Modify the project | :white_check_mark: | :x: | :x: |

----------------------------------------

TITLE: Markdown Template Tag
DESCRIPTION: Template widget inclusion tag for displaying Kitemaker-related templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'kitemaker') ]]

----------------------------------------

TITLE: Multiple Items from Single Item Transformation
DESCRIPTION: Shows how to transform a single item containing an array into multiple items.

LANGUAGE: javascript
CODE:
return $input.first().json.data.map(item => {
    return {
        json: item
    }
});

----------------------------------------

TITLE: Checking Data Type in Python
DESCRIPTION: Demonstrates how to check the data type of a variable in Python, which is useful when troubleshooting console output issues.

LANGUAGE: python
CODE:
print(type(myData))

----------------------------------------

TITLE: Importing Magento 2 Templates Widget
DESCRIPTION: Markdown template inclusion for displaying Magento 2 related workflow templates.

LANGUAGE: markdown
CODE:
[[ templatesWidget(page.title, 'magento-2') ]]

----------------------------------------

TITLE: Vale Configuration Comments in Markdown
DESCRIPTION: HTML comments containing Vale linter configuration to disable specific rules.

LANGUAGE: html
CODE:
<!-- vale from-microsoft.We = NO -->
<!-- vale from-microsoft.FirstPerson = NO -->

----------------------------------------

TITLE: Trigger Node Error Data Structure
DESCRIPTION: Alternative JSON structure specifically for errors occurring in the trigger node of the main workflow. Contains less execution information but includes detailed trigger error data with context, timestamps, and node-specific information.

LANGUAGE: json
CODE:
{
  "trigger": {
    "error": {
      "context": {},
      "name": "WorkflowActivationError",
      "cause": {
        "message": "",
        "stack": ""
      },
      "timestamp": 1654609328787,
      "message": "",
      "node": {
        . . . 
      }
    },
    "mode": "trigger"
  },
  "workflow": {
    "id": "",
    "name": ""
  }
}

----------------------------------------

TITLE: Equivalent JavaScript Implementation of jmespath()
DESCRIPTION: Shows the longer JavaScript code equivalent to the jmespath() method, which isn't suitable for use in n8n Expressions due to the single-line requirement.

LANGUAGE: javascript
CODE:
var jmespath = require('jmespath');
jmespath.search(object, searchString);

----------------------------------------

TITLE: Generating Input Data in Code Node
DESCRIPTION: Demonstrates how to generate sample input data using a Code node in n8n, which can be used for testing JMESPath queries.

LANGUAGE: javascript
CODE:
return[
  {
    "json": {      
      "num_categories": "0",
      "num_products": "45",
      "category_id": 5529735,
      "parent_id": 1407340,
      "pos_enabled": 1,
      "pos_favorite": 0,
      "name": "HP",
      "description": "",
      "image": ""
    }
  },
  {
    "json": {
      "num_categories": "0",
      "num_products": "86",
      "category_id": 5529740,
      "parent_id": 1407340,
      "pos_enabled": 1,
      "pos_favorite": 0,
      "name": "Lenovo",
      "description": "",
      "image": ""
    }
  }  
]

----------------------------------------

TITLE: MIT License Text for write-good Project
DESCRIPTION: The full MIT license text granting permission to use, modify, and distribute the write-good software. Includes copyright notice and liability disclaimers.

LANGUAGE: text
CODE:
The MIT License (MIT)

Copyright (c) 2014 Brian Ford

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

----------------------------------------

TITLE: Chat Workflow Demo JSON Reference 1
DESCRIPTION: Reference to a JSON workflow demonstration file for the initial chat setup

LANGUAGE: markdown
CODE:
[[ workflowDemo("file:////advanced-ai/tutorials/chat_01.json") ]]

----------------------------------------

TITLE: Structuring n8n Release Notes in Markdown
DESCRIPTION: This snippet demonstrates the structure and formatting for n8n release notes. It includes placeholders for version number, release date, summary, and sections for new features and nodes.

LANGUAGE: markdown
CODE:
## n8n@<version-number>

View the [commits](<url for GitHub's 'Comparing changes' view, comparing this release to the previous one>) for this version.<br />
**Release date:** <yyyy-MM-dd>

_One or two sentence summary of release._

For full release details, refer to [Releases](https://github.com/n8n-io/n8n/releases) on GitHub.

### New features

<div class="n8n-new-features" markdown>

#### Feature name

_Description of new feature. Link to docs if available._

</div>


### New nodes

<div class="n8n-new-features" markdown>

#### Node name

_Description of new feature. Link to new node doc._

</div>


### Contributors

_List external contributors. Don't use a bulleted list here._

----------------------------------------

TITLE: Importing AI Workflow with Human Fallback in n8n
DESCRIPTION: This code snippet demonstrates how to import a pre-configured workflow that implements an AI-driven query response system with human fallback. The workflow is stored as a JSON file and can be imported into n8n for immediate use or customization.

LANGUAGE: json
CODE:
[[ workflowDemo("file:///advanced-ai/examples/ask_a_human.json") ]]

----------------------------------------

TITLE: Specifying MkDocs Documentation Dependencies
DESCRIPTION: Lists required Python packages for MkDocs documentation generation. Includes the exclude plugin, glightbox for image handling, and macros plugin with specific version constraints.

LANGUAGE: plaintext
CODE:
mkdocs-exclude==1.0.2
mkdocs-glightbox
mkdocs-macros-plugin==1.0.4

----------------------------------------

TITLE: Demonstrating AI Agent vs Chain Workflow in n8n
DESCRIPTION: This code snippet represents a workflow demonstration in n8n that compares AI agents and chains. It uses a JSON file to define the workflow structure.

LANGUAGE: markdown
CODE:
[[ workflowDemo("file:///advanced-ai/examples/agents_vs_chains.json") ]]

----------------------------------------

TITLE: Schedule Trigger Node Sample Cron Expression
DESCRIPTION: Example of cron expression syntax used in the Schedule Trigger node. Users should validate their expressions using crontab guru after removing the seconds column.



----------------------------------------

TITLE: Markdown Template Structure for n8n Node Documentation
DESCRIPTION: A markdown template defining the structure and components needed for documenting an n8n integration node. Includes sections for node summary, credentials, examples, parameters and related resources.

LANGUAGE: markdown
CODE:
---
title: _Name_
description: Documentation for the _Name_ node in n8n, a workflow automation platform. Includes details of operations and configuration, and links to examples and credentials information.
---

# _Name_

<!-- Briefly summarize the node. For example:

The _Name_ node allows you to automate work in _Name_ and integrate _Name_ with other applications. n8n has built-in support for a wide range of _Name_ features, which includes creating, updating, and deleting events, people, tags, and signatures. -->

On this page, you'll find the node parameters for the _Name_ node, and links to more resources.

///  note  | Credentials
You can find authentication information for this node [here](/integrations/builtin/credentials/_Name_/).
///
///  note  | Examples and templates
For usage examples and templates to help you get started, refer to n8n's [LangChain integrations](https://n8n.io/integrations/langchain/){:target=_blank .external-link} page.
///	
## Node parameters

* _Bullet list_
* _Of available operations_.

## Related resources

View [example workflows and related content](https://n8n.io/integrations/langchain/){:target=_blank .external-link} on n8n's website.

Refer to [_Name_'s documentation](){:target=_blank .external-link} for more information about the service.

----------------------------------------

TITLE: LangChain Code Node Configuration Table
DESCRIPTION: Table showing different configuration options for LangChain Code node types, including app node, root node, and sub-node configurations with their corresponding inputs, outputs, and code modes.

LANGUAGE: markdown
CODE:
| Node type | Inputs | Outputs | Code mode |
| --------- | ------ | ------- | --------- |
| App node. Similar to the Code node | Main | Main | Execute |
| Root node | Main; at least one other type | Main | Execute |
| Sub-node | - | A type other than main. Must match the input type you want to connect to. | Supply Data |
| Sub-node with sub-nodes | A type other than main |A type other than main. Must match the input type you want to connect to. | Supply Data |

----------------------------------------

TITLE: LangChain Code Node Configuration Table
DESCRIPTION: Table showing different configuration options for LangChain Code node types, including app node, root node, and sub-node configurations with their corresponding inputs, outputs, and code modes.

LANGUAGE: markdown
CODE:
| Node type | Inputs | Outputs | Code mode |
| --------- | ------ | ------- | --------- |
| App node. Similar to the Code node | Main | Main | Execute |
| Root node | Main; at least one other type | Main | Execute |
| Sub-node | - | A type other than main. Must match the input type you want to connect to. | Supply Data |
| Sub-node with sub-nodes | A type other than main |A type other than main. Must match the input type you want to connect to. | Supply Data |

----------------------------------------

TITLE: Adding UI Fields for Autofriend Trigger Node in TypeScript
DESCRIPTION: Code snippet to add UI fields for event selection in the Autofriend Trigger node.

LANGUAGE: typescript
CODE:
{
	displayName: 'Event',
	name: 'event',
	type: 'options',
	required: true,
	default: '',
	options: [
		{
			name: 'Contact Added',
			value: 'contactAdded',
		},
		{
			name: 'Contact Added To List',
			value: 'contactAddedToList',
		},
		{
			name: 'Contact Entered Segment',
			value: 'contactEnteredSegment',
		},
		{
			name: 'Contact Left Segment',
			value: 'contactLeftSegment',
		},
		{
			name: 'Contact Removed From List',
			value: 'contactRemovedFromList',
		},
		{
			name: 'Contact Unsubscribed',
			value: 'contactUnsubscribed',
		},
		{
			name: 'Contact Updated',
			value: 'contactUpdated',
		},
	],
},

----------------------------------------

TITLE: Cloning and Setting Up n8n Docs Repository in Bash
DESCRIPTION: Commands for cloning the forked n8n documentation repository, creating a new branch, and pushing changes. Requires Git and a GitHub account.

LANGUAGE: bash
CODE:
git clone https://github.com/<your-username>/n8n-docs.git
cd n8n-docs
git checkout -b <branch-name>

----------------------------------------

TITLE: Building and Testing n8n-nodes-module
DESCRIPTION: Commands to build the code, publish the package locally, and install it in n8n for testing.

LANGUAGE: bash
CODE:
# Install dependencies
npm install

# Build the code
npm run build

# "Publish" the package locally
npm link

# "Install" the above locally published module
npm link n8n-nodes-weather

# Start n8n
./node_modules/n8n/bin/n8n start

----------------------------------------

TITLE: Including External Markdown Snippet
DESCRIPTION: Markdown include directive to embed external content from a snippet file containing community node submission guidelines.

LANGUAGE: markdown
CODE:
--8<-- "_snippets/integrations/submit-community-node.md"