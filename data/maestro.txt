TITLE: Building Maestro CLI after changes
DESCRIPTION: Command to rebuild the Maestro CLI after making changes. This generates a startup shell script in the specified directory.

LANGUAGE: bash
CODE:
./gradlew :maestro-cli:installDist

----------------------------------------

TITLE: Configuring Maestro Flow File with Required Config Section
DESCRIPTION: Demonstrates the correct structure for a Maestro flow file which must start with a config section containing the appId before defining flow steps. The config section is separated from flow steps using '---' delimiter.

LANGUAGE: yaml
CODE:
appId: com.example.app # <-- config section
---
- launchApp

----------------------------------------

TITLE: Configuring Maestro Flow with Required Config Section in YAML
DESCRIPTION: This snippet demonstrates the correct structure for a Maestro flow file, including the required config section at the beginning. It shows how to specify the appId in the config section, followed by the flow steps.

LANGUAGE: yaml
CODE:
appId: com.example.app # <-- config section
---
- launchApp

----------------------------------------

TITLE: Running Maestro integration tests
DESCRIPTION: Gradle command to run Maestro integration tests. These tests use real implementation of most components except for the Driver, which uses a FakeDriver.

LANGUAGE: bash
CODE:
./gradlew :maestro-test:test

----------------------------------------

TITLE: Running Maestro unit tests
DESCRIPTION: Gradle command to run all unit tests in the Maestro project.

LANGUAGE: bash
CODE:
./gradlew test

----------------------------------------

TITLE: Setting API Keys for AI Services
DESCRIPTION: Environment variable configuration examples for setting up API keys required by the demo application. Supports both OpenAI and Anthropic services.

LANGUAGE: bash
CODE:
export MAESTRO_CLI_AI_KEY=sk-...

LANGUAGE: bash
CODE:
export MAESTRO_CLI_AI_KEY=sk-ant-api-...

----------------------------------------

TITLE: Building Maestro AI Demo Application
DESCRIPTION: Gradle command to build and install the Maestro AI demo application, which generates a startup script in the specified directory.

LANGUAGE: console
CODE:
./gradlew :maestro-ai:installDist

----------------------------------------

TITLE: Installing Maestro CLI
DESCRIPTION: Curl command to download and install the latest version of the Maestro CLI.

LANGUAGE: bash
CODE:
curl -Ls "https://get.maestro.mobile.dev" | bash

----------------------------------------

TITLE: Checking Maestro CLI Version
DESCRIPTION: Command to verify the installed version of the Maestro CLI after updating.

LANGUAGE: bash
CODE:
maestro --version

----------------------------------------

TITLE: Updating Git Branch for Maestro Release
DESCRIPTION: Commands to checkout the main branch, pull latest changes, and create a new branch for the release preparation.

LANGUAGE: bash
CODE:
git checkout main && git pull

----------------------------------------

TITLE: Running Single Screenshot Test
DESCRIPTION: Command to analyze a single screenshot for defects using the Maestro AI demo application.

LANGUAGE: console
CODE:
maestro-ai-demo foo_1_bad.png

----------------------------------------

TITLE: Running Batch Screenshot Analysis
DESCRIPTION: Advanced command for analyzing multiple Uber screenshots with additional debugging options enabled, including prompt display and raw LLM response output.

LANGUAGE: console
CODE:
maestro-ai-demo \
  --model gpt-4o-2024-08-06 \
  --show-prompts \
  --show-raw-response \
  test-ai-fixtures/uber_*_bad.png

----------------------------------------

TITLE: Correcting YAML Indentation for Maestro Flow Configuration
DESCRIPTION: This snippet demonstrates the correct YAML formatting for a Maestro flow configuration, specifically for the 'tapOn' action with an optional parameter. It shows how to properly indent nested properties under list items.

LANGUAGE: yaml
CODE:
- tapOn:
    text: submit
    optional: true
- inputText: hello

----------------------------------------

TITLE: Updating Maestro Samples using Bash Script
DESCRIPTION: This script updates the Maestro samples, which include workspace flows and app binaries. It's used to keep the samples current with the latest version of Maestro.

LANGUAGE: bash
CODE:
./update_samples

----------------------------------------

TITLE: Rebuilding iOS XCUITest driver
DESCRIPTION: Command to rebuild the iOS XCUITest driver after making changes.

LANGUAGE: bash
CODE:
./maestro-ios-xctest-runner/build-maestro-ios-runner.sh

----------------------------------------

TITLE: Generating Maestro dependency graph
DESCRIPTION: Gradle command to generate a dependency graph for the Maestro project.

LANGUAGE: bash
CODE:
./gradlew :generateDependencyGraph

----------------------------------------

TITLE: Running standalone iOS XCTest runner
DESCRIPTION: Command to run the iOS XCTest runner without the Maestro CLI. This uses xcodebuild to run the test runner on the connected iOS device.

LANGUAGE: bash
CODE:
./maestro-ios-xctest-runner/run-maestro-ios-runner.sh

----------------------------------------

TITLE: Querying iOS XCTest runner for device info
DESCRIPTION: cURL command to request device information from the HTTP server running inside the XCTest runner app.

LANGUAGE: bash
CODE:
curl -fsSL -X GET localhost:22087/deviceInfo | jq

----------------------------------------

TITLE: Sending touch command to iOS XCTest runner
DESCRIPTION: cURL command to send a touch command to the HTTP server running inside the XCTest runner app.

LANGUAGE: bash
CODE:
curl -fsSL -X POST localhost:22087/touch -d '
{
  "x": 150,
  "y": 150,
  "duration": 0.2
}'

----------------------------------------

TITLE: Sending swipe command to iOS XCTest runner
DESCRIPTION: cURL command to send a swipe command to the HTTP server running inside the XCTest runner app.

LANGUAGE: bash
CODE:
curl -sSL -X GET localhost:22087/swipe -d '
{
  "startX": 150,
  "startY": 426,
  "endX": 426,
  "endY": 350,
  "duration": 1
}'

----------------------------------------

TITLE: Committing Maestro Release Changes
DESCRIPTION: Git command to commit version changes and CHANGELOG updates for a new Maestro release.

LANGUAGE: bash
CODE:
git commit -am "Prepare for release X.Y.Z."

----------------------------------------

TITLE: Tagging Maestro Release
DESCRIPTION: Git commands to create an annotated tag for the new Maestro version and push it to the remote repository.

LANGUAGE: bash
CODE:
git tag -a vX.Y.Z -m "Version X.Y.Z"
git push --tags

----------------------------------------

TITLE: Configuring Swipe Action in Maestro Flow YAML
DESCRIPTION: This YAML snippet attempts to define a swipe action in a Maestro flow. However, it contains an error where an invalid direction 'diagonal' is specified. Valid directions are RIGHT, LEFT, UP, or DOWN (case-insensitive).

LANGUAGE: yaml
CODE:
- swipe:
    direction: diagonal

----------------------------------------

TITLE: Missing Required AppId Configuration Example
DESCRIPTION: Example of the correct YAML configuration format for a Maestro flow, demonstrating proper inclusion of the required appId field and basic flow structure.

LANGUAGE: yaml
CODE:
appId: com.example.app
---
- launchApp

----------------------------------------

TITLE: Incorrect launchApp Command in Maestro Flow Configuration (YAML)
DESCRIPTION: This snippet demonstrates an incorrect usage of the 'launchApp' command in a Maestro flow configuration file. The command is used without the required additional options, resulting in a format error.

LANGUAGE: yaml
CODE:
appId: com.example.app
---
- launchApp:

----------------------------------------

TITLE: Invalid Maestro Flow Configuration in YAML
DESCRIPTION: YAML configuration snippet showing an invalid command 'inp' in a Maestro flow definition. The error suggests using valid input commands like inputRandomText, inputRandomNumber, inputRandomEmail, inputRandomPersonName, or inputText instead.

LANGUAGE: yaml
CODE:
appId: com.example.app
onFlowStart:
  - inp
---

----------------------------------------

TITLE: Configuring IntelliJ Properties for iOS Development
DESCRIPTION: Configuration setting required for working with idb.proto definition files in IntelliJ. This setting increases the maximum file size for IntelliSense functionality.

LANGUAGE: plaintext
CODE:
# Needed for working with idb.proto definition
idea.max.intellisense.filesize=4000

----------------------------------------

TITLE: Maestro Flow Configuration with Missing Media
DESCRIPTION: YAML configuration for a Maestro flow that attempts to add media and launch an app, but fails due to a missing media file reference.

LANGUAGE: yaml
CODE:
appId: com.example
---
- addMedia:
    - "./assets/invalid_android.png"
- launchApp

----------------------------------------

TITLE: Correct YAML Command Format
DESCRIPTION: Example of properly formatted YAML commands showing correct list structure and indentation.

LANGUAGE: yaml
CODE:
- tapOn:
  text: submit
  optional: true
- inputText: hello

----------------------------------------

TITLE: Invalid YAML Command Format
DESCRIPTION: Example of incorrectly formatted YAML commands showing improper indentation of inputText command.

LANGUAGE: yaml
CODE:
---
- tapOn: foo
  inputText: bar

----------------------------------------

TITLE: Invalid Maestro Flow Command Structure
DESCRIPTION: Example of an incorrectly configured tapOn command in a Maestro Flow.yaml file. The tapOn command is missing required parameters.

LANGUAGE: yaml
CODE:
appId: com.example.app
---
- tapOn

----------------------------------------

TITLE: Invalid YAML Tag Configuration Example
DESCRIPTION: Example of incorrectly formatted tags in a YAML configuration file, showing the error with line numbers and error location indicators.

LANGUAGE: yaml
CODE:
appId: com.example.app
tags: foo, bar
---


----------------------------------------

TITLE: Invalid Command Syntax in Maestro Flow Configuration (YAML)
DESCRIPTION: This snippet shows an invalid command syntax in a Maestro flow configuration file. The error is in the command format on line 3, where a list is used instead of the expected '<commandName>: <options>' format.

LANGUAGE: yaml
CODE:
appId: com.example.app
---
- [foo, bar, baz]

----------------------------------------

TITLE: Failed Media Addition in Maestro Flow Configuration
DESCRIPTION: YAML configuration snippet showing an attempt to add a media file that cannot be found at the specified path. The configuration includes app initialization and launch steps.

LANGUAGE: yaml
CODE:
appId: com.example
---
- addMedia:
    - "../../e013_invalid_media_file/workspace/assets/android.png"
- launchApp

----------------------------------------

TITLE: Configuring Flow in YAML for Maestro Project
DESCRIPTION: This YAML snippet shows a configuration for a Maestro project flow. It specifies an app ID and attempts to run a flow from an invalid file path.

LANGUAGE: yaml
CODE:
appId: com.example
---
- runFlow: invalidpath.yaml

----------------------------------------

TITLE: Correct Maestro Flow Configuration
DESCRIPTION: Example of proper flow configuration with commands formatted as a YAML list.

LANGUAGE: yaml
CODE:
appId: com.example.app
---
- launchApp

----------------------------------------

TITLE: Invalid Maestro Flow Configuration
DESCRIPTION: Example of incorrect flow configuration where commands are not properly formatted as a list.

LANGUAGE: yaml
CODE:
appId: com.example
---
launchApp

----------------------------------------

TITLE: Invalid Command in Maestro YAML Configuration
DESCRIPTION: This YAML snippet demonstrates an invalid command in a Maestro configuration file. The 'invalidCommand' is not recognized as a valid Maestro command, causing an error.

LANGUAGE: yaml
CODE:
appId: com.example
---
- invalidCommand

----------------------------------------

TITLE: Invalid Command Structure in Maestro YAML Configuration
DESCRIPTION: Example of an invalid command configuration in a Maestro subflow YAML file. Shows the error location and formatting, including the application ID and an invalid command entry.

LANGUAGE: yaml
CODE:
appId: com.example
---
- invalidCommand

----------------------------------------

TITLE: Defining Flow Structure in YAML for Maestro
DESCRIPTION: This YAML snippet outlines the structure of a Maestro flow. It includes step definitions, dependencies, and execution parameters. The flow consists of multiple steps with specified inputs, outputs, and execution details.

LANGUAGE: yaml
CODE:
flow:
  - step: build
    inputs:
      - source_code
    outputs:
      - binary
    executor:
      type: container
      image: builder:latest
      command: ["/bin/sh", "-c", "make build"]

  - step: test
    depends_on:
      - build
    inputs:
      - binary
    outputs:
      - test_results
    executor:
      type: container
      image: tester:latest
      command: ["/bin/sh", "-c", "run_tests.sh"]

  - step: deploy
    depends_on:
      - test
    inputs:
      - binary
      - test_results
    executor:
      type: kubernetes
      manifest: deploy.yaml

----------------------------------------

TITLE: Invalid YAML Configuration in Maestro Flow File
DESCRIPTION: This YAML snippet demonstrates an incorrect configuration in a Maestro Flow file. It includes an unrecognized property 'invalidOption' within a 'launchApp' step, which triggers an error.

LANGUAGE: yaml
CODE:
---
- launchApp:
    invalidOption: true

----------------------------------------

TITLE: Defining Maestro Flow Structure in YAML
DESCRIPTION: This YAML snippet outlines the structure of a Maestro flow. It includes flow metadata, variable definitions, and a series of steps with conditions and actions.

LANGUAGE: yaml
CODE:
appId: com.example.app
env:
  TEST_USER: testuser@example.com
---
- launchApp
- tapOn:
    text: "Login"
- inputText:
    text: ${TEST_USER}
    marked: "Username"
- tapOn:
    text: "Next"
- assertVisible: "Welcome, Test User!"
- takeScreenshot: login_success
- back
- tapOn: "Logout"
- assertVisible: "Logged out successfully"


----------------------------------------

TITLE: Invalid Command Example in Maestro Flow Configuration
DESCRIPTION: Example of an invalid command in a Maestro Flow.yaml file that triggers an error. Shows the YAML structure with an application ID and an invalid command that Maestro doesn't recognize.

LANGUAGE: yaml
CODE:
appId: com.example
---
- invalidCommand

----------------------------------------

TITLE: Flow Path Error Message
DESCRIPTION: Error message indicating that a specified flow path does not exist in the workspace directory structure.

LANGUAGE: plaintext
CODE:
Flow path does not exist: /tmp/WorkspaceExecutionPlannerErrorsTest_workspace/workspace

----------------------------------------

TITLE: Displaying Image in Markdown
DESCRIPTION: This snippet shows how to embed an image in Markdown format using the img tag with a source URL.

LANGUAGE: markdown
CODE:
<img src="https://user-images.githubusercontent.com/847683/187275009-ddbdf963-ce1d-4e07-ac08-b10f145e8894.gif" />

----------------------------------------

TITLE: Displaying HTML Link with Logo in Markdown
DESCRIPTION: This snippet demonstrates how to create an HTML link with a logo image in Markdown format. It includes width and alt text attributes for the image.

LANGUAGE: markdown
CODE:
<a href="https://www.maestro.dev">
  <img width="200" alt="Logo" src="https://github.com/user-attachments/assets/91c4f440-288e-4a9e-93a3-3c89a19d2f04" />
</a>

----------------------------------------

TITLE: Displaying Plain Text in Code Block
DESCRIPTION: This snippet demonstrates how to display plain text within a code block in Markdown format, used here to show a closing message.

LANGUAGE: markdown
CODE:
```
Built with ❤️ by Mobile.dev
```