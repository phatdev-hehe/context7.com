TITLE: Creating Allow-Nothing Authorization Policy in Istio
DESCRIPTION: Creates a baseline deny-all policy that rejects all requests to workloads in the default namespace. This policy serves as a starting point for building more specific access controls.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: allow-nothing
  namespace: default
spec:
  {}
EOF

----------------------------------------

TITLE: Deploying Bookinfo Sample Application
DESCRIPTION: Deploys the Bookinfo sample application to the Kubernetes cluster with Istio sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@

----------------------------------------

TITLE: Deleting Istio System Namespace
DESCRIPTION: Demonstrates how to remove the Istio system namespace after uninstallation if it's no longer needed.

LANGUAGE: bash
CODE:
$ kubectl delete namespace istio-system

----------------------------------------

TITLE: Installing Istio with Default Profile
DESCRIPTION: Command to install Istio with the default configuration profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=default

----------------------------------------

TITLE: Configuring Circuit Breakers in Istio
DESCRIPTION: Example of configuring a circuit breaker to limit concurrent connections to a service subset.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: reviews
spec:
  host: reviews
  subsets:
  - name: v1
    labels:
      version: v1
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 100

----------------------------------------

TITLE: Creating JWT Request Authentication Policy
DESCRIPTION: YAML configuration for creating a RequestAuthentication policy that accepts JWTs issued by testing@secure.istio.io

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: "jwt-example"
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "{{< github_file >}}/security/tools/jwt/samples/jwks.json"

----------------------------------------

TITLE: Configuring Timeouts in Istio
DESCRIPTION: Example of configuring a timeout for calls to a service subset using a virtual service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - route:
    - destination:
        host: ratings
        subset: v1
    timeout: 10s

----------------------------------------

TITLE: Implementing Namespace Isolation in Istio
DESCRIPTION: These YAML snippets define a PeerAuthentication policy to enable strict mTLS on the 'foo' namespace, and an AuthorizationPolicy to allow traffic only from the same namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: foo-isolation
  namespace: foo
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        namespaces: ["foo"]

----------------------------------------

TITLE: Installing Istio with Demo Profile
DESCRIPTION: Installs Istio using the demo configuration profile without default gateways.

LANGUAGE: bash
CODE:
$ istioctl install -f @samples/bookinfo/demo-profile-no-gateways.yaml@ -y

----------------------------------------

TITLE: Downloading and Extracting Istio
DESCRIPTION: Downloads the latest Istio release and extracts it to the current directory.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | sh -

----------------------------------------

TITLE: Creating Kubernetes Gateway for Bookinfo
DESCRIPTION: Creates a Kubernetes Gateway and HTTPRoute for the Bookinfo application to enable external access.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@

----------------------------------------

TITLE: Creating Custom Ingress Gateway in IstioOperator
DESCRIPTION: YAML configuration for an IstioOperator resource that creates a new custom ingress gateway alongside the default one, with specific Kubernetes settings.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  components:
    ingressGateways:
      - name: istio-ingressgateway
        enabled: true
      - namespace: user-ingressgateway-ns
        name: ilb-gateway
        enabled: true
        k8s:
          resources:
            requests:
              cpu: 200m
          serviceAnnotations:
            cloud.google.com/load-balancer-type: "internal"
          service:
            ports:
            - port: 8060
              targetPort: 8060
              name: tcp-citadel-grpc-tls
            - port: 5353
              name: tcp-dns

----------------------------------------

TITLE: Configuring a Gateway in Istio
DESCRIPTION: Example of an Istio gateway configuration for external HTTPS ingress traffic.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: ext-host-gwy
spec:
  selector:
    app: my-gateway-controller
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - ext-host.example.com
    tls:
      mode: SIMPLE
      credentialName: ext-host-cert

----------------------------------------

TITLE: Configuring Gateway Resource
DESCRIPTION: Example of an Istio Gateway resource configuration showing selector matching for the deployed gateway workload.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: gateway
spec:
  selector:
    istio: ingressgateway
...

----------------------------------------

TITLE: Adding istioctl to PATH
DESCRIPTION: Adds the istioctl client binary to the system PATH for easy access.

LANGUAGE: bash
CODE:
$ export PATH=$PWD/bin:$PATH

----------------------------------------

TITLE: Generating Istio Manifest Before Installation
DESCRIPTION: Demonstrates how to generate an Istio manifest for the default profile without installing it, allowing for inspection or tracking of changes.

LANGUAGE: bash
CODE:
$ istioctl manifest generate > $HOME/generated-manifest.yaml

----------------------------------------

TITLE: Labeling Namespace for Sidecar Injection
DESCRIPTION: Labels the default namespace to enable automatic Envoy sidecar proxy injection.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-injection=enabled

----------------------------------------

TITLE: Installing Istio Default Profile with Istioctl
DESCRIPTION: Installs the default Istio configuration profile on the cluster defined by your Kubernetes configuration. This command is suitable for establishing a production environment.

LANGUAGE: bash
CODE:
$ istioctl install

----------------------------------------

TITLE: Configuring JWT Authentication
DESCRIPTION: YAML configuration to set up JWT-based request authentication for the ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: "jwt-example"
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "{{< github_file >}}/security/tools/jwt/samples/jwks.json"

----------------------------------------

TITLE: Case Insensitive Path Authorization EnvoyFilter
DESCRIPTION: An EnvoyFilter configuration that adds a Lua filter to normalize request paths to lowercase before authorization checks.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingress-case-insensitive
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_FIRST
      value:
        name: envoy.lua
        typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local path = request_handle:headers():get(":path")
                request_handle:headers():replace(":path", string.lower(path))
              end

----------------------------------------

TITLE: Installing Istio Control Plane on cluster2 using Helm
DESCRIPTION: Installs the Istio control plane (istiod) on cluster2 using Helm with multi-cluster settings.

LANGUAGE: bash
CODE:
helm install istiod istio/istiod -n istio-system --kube-context "${CTX_CLUSTER2}" --set global.meshID=mesh1 --set global.multiCluster.clusterName=cluster2 --set global.network=network1

----------------------------------------

TITLE: Setting Up Reviews Viewer Authorization Policy
DESCRIPTION: Creates a policy allowing the productpage service account to access the reviews workload through GET methods. This enables the book reviews to be displayed on the main page.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: "reviews-viewer"
  namespace: default
spec:
  selector:
    matchLabels:
      app: reviews
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/default/sa/bookinfo-productpage"]
    to:
    - operation:
        methods: ["GET"]
EOF

----------------------------------------

TITLE: Customizing Istio Installation with Access Logs
DESCRIPTION: Demonstrates how to enable access logs during Istio installation by modifying the meshConfig setting using the --set flag.

LANGUAGE: bash
CODE:
$ istioctl install --set meshConfig.accessLogFile=/dev/stdout

----------------------------------------

TITLE: Installing Istio with Ambient Profile using istioctl
DESCRIPTION: This command installs Istio using the ambient profile, which includes support for ambient mode. It uses the istioctl command-line tool to perform the installation.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --skip-confirmation

----------------------------------------

TITLE: Customizing Istio Installation with Access Logs
DESCRIPTION: Demonstrates how to enable access logs during Istio installation by modifying the meshConfig setting using the --set flag.

LANGUAGE: bash
CODE:
$ istioctl install --set meshConfig.accessLogFile=/dev/stdout

----------------------------------------

TITLE: Installing Kiali and Addons
DESCRIPTION: Installs Kiali dashboard along with Prometheus, Grafana, and Jaeger for telemetry and visualization.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/addons@
$ kubectl rollout status deployment/kiali -n istio-system

----------------------------------------

TITLE: Installing Istio with Custom TLS Configuration
DESCRIPTION: Creates and applies an IstioOperator configuration that sets the minimum TLS protocol version to 1.3 for mesh-wide MTLS communications.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./istio.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    meshMTLS:
      minProtocolVersion: TLSV1_3
EOF
$ istioctl install -f ./istio.yaml

----------------------------------------

TITLE: Generating Root CA Certificate
DESCRIPTION: Generates root certificate and key using a provided Makefile for self-signed certificates.

LANGUAGE: bash
CODE:
$ make -f ../tools/certs/Makefile.selfsigned.mk root-ca

----------------------------------------

TITLE: Configuring Egress Gateway for HTTP Traffic
DESCRIPTION: Creates Gateway, DestinationRule and VirtualService resources to route HTTP traffic through egress gateway

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - edition.cnn.com

----------------------------------------

TITLE: Configuring a Virtual Service in Istio
DESCRIPTION: Example of a virtual service that routes requests to different service versions based on user identity.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v3

----------------------------------------

TITLE: Creating Custom Istio Configuration YAML
DESCRIPTION: Shows how to create a custom Istio configuration file (my-config.yaml) with access log settings and install it using the -f flag.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./my-config.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    accessLogFile: /dev/stdout
EOF
$ istioctl install -f my-config.yaml

----------------------------------------

TITLE: Verifying JWT Authentication and Header Copy
DESCRIPTION: Commands to test JWT authentication and verify header copying functionality

LANGUAGE: bash
CODE:
$ kubectl exec "$(kubectl get pod -l app=curl -n foo -o jsonpath={.items..metadata.name})" -c curl -n foo -- curl "http://httpbin.foo:8000/headers" -sS -o /dev/null -H "Authorization: Bearer $TOKEN" -w "%{http_code}\n"

----------------------------------------

TITLE: Installing Istio Ingress Gateway with Helm
DESCRIPTION: Optionally installs an Istio ingress gateway in a separate namespace using Helm.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-ingress
$ helm install istio-ingress istio/gateway -n istio-ingress --wait

----------------------------------------

TITLE: Creating Separate IstioOperator for User Gateways
DESCRIPTION: YAML configuration for a separate IstioOperator resource to generate a manifest for user-defined gateways, using an empty profile and customizing specific gateway settings.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: empty
  components:
    ingressGateways:
      - name: ilb-gateway
        namespace: user-ingressgateway-ns
        enabled: true
        # Copy settings from istio-ingressgateway as needed.
  values:
    gateways:
      istio-ingressgateway:
        debug: error

----------------------------------------

TITLE: Testing External Access to Bookinfo Application
DESCRIPTION: Uses curl to verify that the Bookinfo application is accessible from outside the cluster.

LANGUAGE: bash
CODE:
$ curl -s "http://${GATEWAY_URL}/productpage" | grep -o "<title>.*</title>"

----------------------------------------

TITLE: Uninstalling Specific Istio Control Plane
DESCRIPTION: Shows how to remove a specific Istio control plane using the original installation options or by generating and deleting the manifest.

LANGUAGE: bash
CODE:
$ istioctl uninstall <your original installation options>

LANGUAGE: bash
CODE:
$ istioctl manifest generate <your original installation options> | kubectl delete --ignore-not-found=true -f -

----------------------------------------

TITLE: Setting Mesh-Wide Strict mTLS
DESCRIPTION: YAML configuration to enable strict mutual TLS authentication across the entire mesh using PeerAuthentication policy.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "default"
  namespace: "istio-system"
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Configuring Global and Pilot Settings via Helm API
DESCRIPTION: YAML configuration for an IstioOperator resource that sets global and Pilot-specific settings using the Helm API through the values field.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    pilot:
      traceSampling: 0.1 # override from 1.0
    global:
      monitoringPort: 15014

----------------------------------------

TITLE: Verifying Remote Cluster Status
DESCRIPTION: Command to check if Istiod can communicate with remote cluster control planes. Shows cluster sync status and connection details.

LANGUAGE: bash
CODE:
$ istioctl remote-clusters --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Route All Traffic to v1 Using Istio APIs
DESCRIPTION: Command to apply routing configuration that directs all traffic to version v1 of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml

----------------------------------------

TITLE: Generating Proxy-Level Metrics in Istio
DESCRIPTION: Example of Envoy proxy-generated metrics showing cluster statistics including request counts, SSL connection errors, and load balancer information. These metrics provide detailed monitoring of mesh traffic at the Envoy resource level.

LANGUAGE: json
CODE:
envoy_cluster_internal_upstream_rq{response_code_class=\"2xx\",cluster_name=\"xds-grpc\"} 7163

envoy_cluster_upstream_rq_completed{cluster_name=\"xds-grpc\"} 7164

envoy_cluster_ssl_connection_error{cluster_name=\"xds-grpc\"} 0

envoy_cluster_lb_subsets_removed{cluster_name=\"xds-grpc\"} 0

envoy_cluster_internal_upstream_rq{response_code=\"503\",cluster_name=\"xds-grpc\"} 1

----------------------------------------

TITLE: Installing Gateway API CRDs in Kubernetes
DESCRIPTION: Installs the Gateway API Custom Resource Definitions (CRDs) if they are not already present in the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
  { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref={{< k8s_gateway_api_version >}}" | kubectl apply -f -; }

----------------------------------------

TITLE: Basic Peer Authentication Policy Example in YAML
DESCRIPTION: Shows how to configure a peer authentication policy requiring mutual TLS for workloads with specific labels.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "example-peer-policy"
  namespace: "foo"
spec:
  selector:
    matchLabels:
      app: reviews
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Using Istioctl Auto-completion in Bash
DESCRIPTION: Demonstrates how to use auto-completion with istioctl commands.

LANGUAGE: bash
CODE:
$ istioctl proxy-<TAB>
proxy-config proxy-status

----------------------------------------

TITLE: Basic Peer Authentication Policy Example in YAML
DESCRIPTION: Shows how to configure a peer authentication policy requiring mutual TLS for workloads with specific labels.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "example-peer-policy"
  namespace: "foo"
spec:
  selector:
    matchLabels:
      app: reviews
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Creating Kubernetes Gateway Configuration
DESCRIPTION: YAML configuration for creating a Kubernetes Gateway API resource

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  gatewayClassName: istio
  listeners:
  - name: http
    hostname: "httpbin.example.com"
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: Same

----------------------------------------

TITLE: Configuring HTTPS Passthrough Gateway in Istio
DESCRIPTION: YAML configuration for setting up TLS passthrough for HTTPS traffic in an Istio Gateway

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
...
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: PASSTHROUGH

----------------------------------------

TITLE: Configuring Primary Cluster IstioOperator Installation
DESCRIPTION: YAML configuration for installing Istio on the primary cluster (cluster1) using IstioOperator API. Sets up multi-cluster configuration with external istiod enabled.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: cluster1
      network: network1
      externalIstiod: true

----------------------------------------

TITLE: Verifying Bookinfo Service Deployment in Kubernetes
DESCRIPTION: Checks the status of deployed Kubernetes services for the Bookinfo application.

LANGUAGE: bash
CODE:
$ kubectl get services

----------------------------------------

TITLE: Creating Istio Gateway for Bookinfo Application
DESCRIPTION: Applies the Istio Gateway configuration to expose the Bookinfo application outside the cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/bookinfo-gateway.yaml@

----------------------------------------

TITLE: Applying Istio Virtual Services for Bookinfo Routing
DESCRIPTION: These commands apply Istio virtual services to route all traffic to v1 of the Bookinfo services, except for user 'jason' who is routed to reviews:v2.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@

----------------------------------------

TITLE: Deleting Istio Gateway Charts
DESCRIPTION: Removes any installed Istio gateway charts and deletes the associated namespace.

LANGUAGE: bash
CODE:
$ helm delete istio-ingress -n istio-ingress
$ kubectl delete namespace istio-ingress

----------------------------------------

TITLE: Installing Istio CLI and Setting Path
DESCRIPTION: Downloads the Istio command line tool and sample applications, then adds the binary to system PATH. These commands fetch the latest Istio release and configure the environment for using istioctl.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | sh -
$ cd istio-{{< istio_full_version >}}
$ export PATH=$PWD/bin:$PATH

----------------------------------------

TITLE: Verifying httpbin Workload and Ingress Gateway
DESCRIPTION: Sends a request to the httpbin service through the ingress gateway to verify the setup.

LANGUAGE: bash
CODE:
$ curl "$INGRESS_HOST:$INGRESS_PORT"/headers -s -o /dev/null -w "%{http_code}\n"

----------------------------------------

TITLE: Installing Istio CNI with IstioOperator
DESCRIPTION: YAML configuration to install Istio CNI component using IstioOperator, enabling the CNI in the istio-system namespace.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  components:
    cni:
      namespace: istio-system
      enabled: true

----------------------------------------

TITLE: Patching Output Manifest with IstioOperator Overlays
DESCRIPTION: YAML configuration for an IstioOperator resource that demonstrates various types of patches that can be applied to the output manifest, including modifying Deployment and Service resources.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: empty
  hub: docker.io/istio
  tag: 1.1.6
  components:
    pilot:
      enabled: true
      namespace: istio-control
      k8s:
        overlays:
          - kind: Deployment
            name: istiod
            patches:
              # Select list item by value
              - path: spec.template.spec.containers.[name:discovery].args.[30m]
                value: "60m" # overridden from 30m
              # Select list item by key:value
              - path: spec.template.spec.containers.[name:discovery].ports.[containerPort:8080].containerPort
                value: 1234
              # Override with object (note | on value: first line)
              - path: spec.template.spec.containers.[name:discovery].env.[name:POD_NAMESPACE].valueFrom
                value: |
                  fieldRef:
                    apiVersion: v2
                    fieldPath: metadata.myPath
              # Deletion of list item
              - path: spec.template.spec.containers.[name:discovery].env.[name:REVISION]
              # Deletion of map item
              - path: spec.template.spec.containers.[name:discovery].securityContext
          - kind: Service
            name: istiod
            patches:
              - path: spec.ports.[name:https-dns].port
                value: 11111 # OVERRIDDEN

----------------------------------------

TITLE: Access Log Format in Istio
DESCRIPTION: Example of Istio's access log format showing detailed request information including timestamp, HTTP method, response code, latency, and service mesh routing details. Access logs provide granular visibility into service-to-service communication.

LANGUAGE: plain
CODE:
[2019-03-06T09:31:27.360Z] \"GET /status/418 HTTP/1.1\" 418 - \"-\" 0 135 5 2 \"-\" \"curl/7.60.0\" \"d209e46f-9ed5-9b61-bbdd-43e22662702a\" \"httpbin:8000\" \"127.0.0.1:80\" inbound|8000|http|httpbin.default.svc.cluster.local - 172.30.146.73:80 172.30.146.82:38618 outbound_.8000_._.httpbin.default.svc.cluster.local

----------------------------------------

TITLE: Creating Request Authentication for JWT Validation
DESCRIPTION: Applies a RequestAuthentication resource to enable JWT validation on the Istio ingress gateway.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: ingress-jwt
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "{{< github_file >}}/security/tools/jwt/samples/jwks.json"
EOF

----------------------------------------

TITLE: Installing Istio Demo Profile
DESCRIPTION: Shows how to install a different Istio configuration profile, specifically the demo profile, using the --set flag.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=demo

----------------------------------------

TITLE: Cleaning Up Gateway API Routing Rules
DESCRIPTION: This command removes the HTTPRoute resource created using the Gateway API.

LANGUAGE: bash
CODE:
$ kubectl delete httproute reviews

----------------------------------------

TITLE: Enforcing Namespace Isolation with Ingress Exception in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that denies requests not from the 'foo' namespace or the ingress gateway, effectively implementing mandatory namespace isolation with an exception for ingress traffic.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ns-isolation-except-ingress
  namespace: foo
spec:
  action: DENY
  rules:
  - from:
    - source:
        notNamespaces: ["foo"]
        notPrincipals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]

----------------------------------------

TITLE: Configuring a Sidecar in Istio
DESCRIPTION: Example of a sidecar configuration that limits the services an Envoy proxy can reach.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Sidecar
metadata:
  name: default
  namespace: bookinfo
spec:
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"

----------------------------------------

TITLE: Installing Istio Discovery Chart with Helm
DESCRIPTION: Installs the Istio discovery chart which deploys the istiod service using Helm.

LANGUAGE: bash
CODE:
$ helm install istiod istio/istiod -n istio-system --wait

----------------------------------------

TITLE: Cleaning Up Authorization Policies
DESCRIPTION: Commands to remove all the authorization policies created in this setup from the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl delete authorizationpolicy.security.istio.io/allow-nothing
$ kubectl delete authorizationpolicy.security.istio.io/productpage-viewer
$ kubectl delete authorizationpolicy.security.istio.io/details-viewer
$ kubectl delete authorizationpolicy.security.istio.io/reviews-viewer
$ kubectl delete authorizationpolicy.security.istio.io/ratings-viewer

----------------------------------------

TITLE: Configuring a Destination Rule in Istio
DESCRIPTION: Example of a destination rule that defines service subsets and load balancing policies for a service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: my-destination-rule
spec:
  host: my-svc
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
  - name: v3
    labels:
      version: v3

----------------------------------------

TITLE: Verify VirtualService Configuration
DESCRIPTION: YAML output showing the VirtualService configuration for 50-50 traffic split between v1 and v3.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
...
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1
      weight: 50
    - destination:
        host: reviews
        subset: v3
      weight: 50

----------------------------------------

TITLE: Installing Istio Gateway using Kubernetes YAML
DESCRIPTION: Direct Kubernetes manifests for deploying an Istio gateway including Service, Deployment, Role and RoleBinding resources. Includes security context and RBAC configurations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  type: LoadBalancer
  selector:
    istio: ingressgateway
  ports:
  - port: 80
    name: http
  - port: 443
    name: https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  template:
    metadata:
      annotations:
        inject.istio.io/templates: gateway
      labels:
        istio: ingressgateway
        sidecar.istio.io/inject: "true"
    spec:
      securityContext:
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: "0"
      containers:
      - name: istio-proxy
        image: auto
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsUser: 1337
          runAsGroup: 1337

----------------------------------------

TITLE: Deploying Bookinfo Application in Kubernetes
DESCRIPTION: Applies the Kubernetes manifest to deploy the Bookinfo application services.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@

----------------------------------------

TITLE: Verify VirtualService Configuration
DESCRIPTION: YAML output showing the VirtualService configuration for 50-50 traffic split between v1 and v3.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
...
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1
      weight: 50
    - destination:
        host: reviews
        subset: v3
      weight: 50

----------------------------------------

TITLE: Installing Istio Control Plane on cluster1 using Helm
DESCRIPTION: Installs the Istio control plane (istiod) on cluster1 using Helm with multi-cluster settings.

LANGUAGE: bash
CODE:
helm install istiod istio/istiod -n istio-system --kube-context "${CTX_CLUSTER1}" --set global.meshID=mesh1 --set global.multiCluster.clusterName=cluster1 --set global.network=network1

----------------------------------------

TITLE: Creating JWT Authorization Policy
DESCRIPTION: YAML configuration for creating an AuthorizationPolicy that requires valid JWT with specific requestPrincipal

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  action: ALLOW
  rules:
  - from:
    - source:
       requestPrincipals: ["testing@secure.istio.io/testing@secure.istio.io"]

----------------------------------------

TITLE: Installing Istio with OpenTelemetry OTLP/gRPC Configuration
DESCRIPTION: This snippet shows how to install Istio with OpenTelemetry tracing configured to export traces via OTLP/gRPC to the OpenTelemetry Collector. It also enables the environment resource detector.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 4317
        service: opentelemetry-collector.observability.svc.cluster.local
        resource_detectors:
          environment: {}
EOF

----------------------------------------

TITLE: Generating TLS Certificates and Keys
DESCRIPTION: Generate root, server, and client certificates using OpenSSL for configuring secure gateways.

LANGUAGE: bash
CODE:
mkdir example_certs1
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=example Inc./CN=example.com' -keyout example_certs1/example.com.key -out example_certs1/example.com.crt

openssl req -out example_certs1/httpbin.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs1/httpbin.example.com.key -subj "/CN=httpbin.example.com/O=httpbin organization"
openssl x509 -req -sha256 -days 365 -CA example_certs1/example.com.crt -CAkey example_certs1/example.com.key -set_serial 0 -in example_certs1/httpbin.example.com.csr -out example_certs1/httpbin.example.com.crt

----------------------------------------

TITLE: Configuring Global Gateway Topology in IstioOperator
DESCRIPTION: YAML configuration for setting global gateway topology parameters in MeshConfig using IstioOperator custom resource.

LANGUAGE: yaml
CODE:
spec:
  meshConfig:
    defaultConfig:
      gatewayTopology:
        numTrustedProxies: <VALUE>
        forwardClientCertDetails: <ENUM_VALUE>

----------------------------------------

TITLE: Cleaning Up Telemetry Resource
DESCRIPTION: This bash command removes the Telemetry resource created for trace sampling configuration.

LANGUAGE: bash
CODE:
$ kubectl delete telemetry otel-demo

----------------------------------------

TITLE: Configuring Sidecar Resource Import Scoping in Istio
DESCRIPTION: Example shows how to use Sidecar resource to control configuration imports from different namespaces. This allows workloads to selectively import configuration from their own namespace, other namespaces, or specific services.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Sidecar
metadata:
  name: default
spec:
  egress:
  - hosts:
    - "./*" # Import all configuration from our own namespace
    - "bookinfo/*" # Import all configuration from the bookinfo namespace
    - "external-services/example.com" # Import only 'example.com' from the external-services namespace

----------------------------------------

TITLE: Creating Istio VirtualService
DESCRIPTION: YAML configuration for defining routing rules for the Gateway using VirtualService

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "httpbin.example.com"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /status
    - uri:
        prefix: /delay
    route:
    - destination:
        port:
          number: 8000
        host: httpbin

----------------------------------------

TITLE: Cleaning Up Istio Routing Rules
DESCRIPTION: This command removes the application route rules created using Istio APIs.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@

----------------------------------------

TITLE: Creating GKE Cluster for Istio in Bash
DESCRIPTION: This snippet creates a new GKE cluster with 4 nodes of n1-standard-2 machine type in the us-west2-a zone. It enables the container API and sets various environment variables for the cluster configuration.

LANGUAGE: bash
CODE:
$ export PROJECT_ID=`gcloud config get-value project` && \
  export M_TYPE=n1-standard-2 && \
  export ZONE=us-west2-a && \
  export CLUSTER_NAME=${PROJECT_ID}-${RANDOM} && \
  gcloud services enable container.googleapis.com && \
  gcloud container clusters create $CLUSTER_NAME \
  --cluster-version latest \
  --machine-type=$M_TYPE \
  --num-nodes 4 \
  --zone $ZONE \
  --project $PROJECT_ID

----------------------------------------

TITLE: Installing Istio Sidecar on VM
DESCRIPTION: Downloads and installs the Istio sidecar package on the virtual machine, setting up the necessary files and permissions.

LANGUAGE: bash
CODE:
$ curl -LO https://storage.googleapis.com/istio-release/releases/{{< istio_full_version >}}/deb/istio-sidecar.deb
$ sudo dpkg -i istio-sidecar.deb

----------------------------------------

TITLE: Creating IstioOperator Configuration for cluster1
DESCRIPTION: Creates an IstioOperator configuration file for cluster1, specifying the mesh ID, cluster name, and network.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: cluster1
      network: network1

----------------------------------------

TITLE: Configuring Mesh-Wide Mutual TLS Policy
DESCRIPTION: YAML configuration to enforce strict mutual TLS authentication across the entire service mesh by applying PeerAuthentication policy in istio-system namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Applying Istio Destination Rules for Bookinfo Services
DESCRIPTION: Creates default destination rules for the Bookinfo services to define service versions.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/destination-rule-all.yaml@

----------------------------------------

TITLE: Configuring Fault Injection in Istio
DESCRIPTION: Example of configuring fault injection to introduce delays to test service resilience.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
    route:
    - destination:
        host: ratings
        subset: v1

----------------------------------------

TITLE: Setting Istio Routing Rules for Traffic Distribution
DESCRIPTION: This YAML snippet sets up Istio routing rules to control traffic distribution between v1 and v2 of the helloworld service. It defines a VirtualService and DestinationRule to route 90% of traffic to v1 and 10% to v2.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloworld
spec:
  hosts:
    - helloworld
  http:
  - route:
    - destination:
        host: helloworld
        subset: v1
      weight: 90
    - destination:
        host: helloworld
        subset: v2
      weight: 10
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: helloworld
spec:
  host: helloworld
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
EOF

----------------------------------------

TITLE: Enabling Tracing Provider with Sampling via Telemetry API
DESCRIPTION: This snippet demonstrates how to enable a tracing provider using the Telemetry API and set the randomSamplingPercentage to 10%.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
   name: otel-demo
spec:
  tracing:
  - providers:
    - name: otel-tracing
    randomSamplingPercentage: 10
EOF

----------------------------------------

TITLE: Uninstalling Istio Completely
DESCRIPTION: Demonstrates how to completely uninstall Istio from a cluster, including all Istio resources, using the --purge flag.

LANGUAGE: bash
CODE:
$ istioctl uninstall --purge

----------------------------------------

TITLE: Creating ALLOW Authorization Policy for TCP Workload
DESCRIPTION: Applies an Istio AuthorizationPolicy to allow requests to ports 9000 and 9001 for the 'tcp-echo' workload.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: tcp-policy
  namespace: foo
spec:
  selector:
    matchLabels:
      app: tcp-echo
  action: ALLOW
  rules:
  - to:
    - operation:
        ports: ["9000", "9001"]

----------------------------------------

TITLE: Installing Istio with OpenTelemetry OTLP/HTTP Configuration
DESCRIPTION: This snippet demonstrates how to install Istio with OpenTelemetry tracing configured to export traces via OTLP/HTTP to the OpenTelemetry Collector. It includes custom HTTP headers and enables the environment resource detector.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 4318
        service: opentelemetry-collector.observability.svc.cluster.local
        http:
          path: "/v1/traces"
          timeout: 5s
          headers:
            - name: "custom-header"
              value: "custom value"
        resource_detectors:
          environment: {}
EOF

----------------------------------------

TITLE: Installing Istio from External Charts
DESCRIPTION: Demonstrates how to use external charts for Istio installation by specifying the manifests flag with a local file system path.

LANGUAGE: bash
CODE:
$ istioctl install --manifests=manifests/

----------------------------------------

TITLE: Uninstalling Istio and Cleaning Up
DESCRIPTION: Removes the Bookinfo application, Istio, and associated resources from the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/addons@
$ istioctl uninstall -y --purge
$ kubectl delete namespace istio-system
$ kubectl label namespace default istio-injection-

----------------------------------------

TITLE: Route All Traffic to v3 Using Istio APIs
DESCRIPTION: Command to apply routing configuration that directs all traffic to version v3 of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-v3.yaml

----------------------------------------

TITLE: Uninstalling Istio from cluster1 using IstioOperator
DESCRIPTION: Removes Istio installation from cluster1 using istioctl and deletes the istio-system namespace.

LANGUAGE: bash
CODE:
istioctl uninstall --context="${CTX_CLUSTER1}" -y --purge
kubectl delete ns istio-system --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Applying DestinationRule for Locality Failover in Istio
DESCRIPTION: This YAML snippet defines a DestinationRule that configures outlier detection, failover policy between regions, and connection pool settings for the HelloWorld service. It sets up locality-based load balancing and failover mechanisms.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: helloworld
spec:
  host: helloworld.sample.svc.cluster.local
  trafficPolicy:
    connectionPool:
      http:
        maxRequestsPerConnection: 1
    loadBalancer:
      simple: ROUND_ROBIN
      localityLbSetting:
        enabled: true
        failover:
          - from: region1
            to: region2
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 1s
      baseEjectionTime: 1m

----------------------------------------

TITLE: Configuring Global Sampling via MeshConfig
DESCRIPTION: This snippet shows how to configure global random percentage sampling via MeshConfig during Istio installation.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing:
        sampling: 10
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 4317
        service: opentelemetry-collector.observability.svc.cluster.local
        resource_detectors:
          environment: {}
EOF

----------------------------------------

TITLE: Route All Traffic to v1 Using Gateway API
DESCRIPTION: Command to apply Gateway API configuration that directs all traffic to version v1 of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/bookinfo/gateway-api/route-reviews-v1.yaml

----------------------------------------

TITLE: Downloading Latest Istio Release (Linux/macOS)
DESCRIPTION: This command downloads and extracts the latest Istio release automatically for Linux or macOS systems.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | sh -

----------------------------------------

TITLE: Extracting Tracing Headers in Python
DESCRIPTION: This snippet demonstrates how to extract required tracing headers from an HTTP request using OpenTelemetry libraries in a Python application. It includes handling of various tracing protocols and custom headers.

LANGUAGE: python
CODE:
def getForwardHeaders(request):
    headers = {}

    # x-b3-*** headers can be populated using the OpenTelemetry span
    ctx = propagator.extract(carrier={k.lower(): v for k, v in request.headers})
    propagator.inject(headers, ctx)

    # ...

        incoming_headers = ['x-request-id',
        'x-ot-span-context',
        'x-datadog-trace-id',
        'x-datadog-parent-id',
        'x-datadog-sampling-priority',
        'traceparent',
        'tracestate',
        'x-cloud-trace-context',
        'grpc-trace-bin',
        'user-agent',
        'cookie',
        'authorization',
        'jwt',
    ]

    # ...

    for ihdr in incoming_headers:
        val = request.headers.get(ihdr)
        if val is not None:
            headers[ihdr] = val

    return headers

----------------------------------------

TITLE: Configuring HTTP Gateway Server in Istio
DESCRIPTION: YAML configuration for setting up a plaintext HTTP server in an Istio Gateway resource

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
...
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP

----------------------------------------

TITLE: Deploying Grafana with Istio Dashboards
DESCRIPTION: This snippet demonstrates how to quickly deploy Grafana bundled with Istio dashboards using kubectl. It applies a YAML configuration file from the Istio GitHub repository.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/addons/grafana.yaml

----------------------------------------

TITLE: Creating Namespace and Deploying Workloads
DESCRIPTION: Commands to create namespace 'foo' and deploy httpbin and curl workloads with Istio sidecar injection

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@) -n foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@) -n foo

----------------------------------------

TITLE: Configuring Circuit Breaker Destination Rule in Istio
DESCRIPTION: Creates a DestinationRule that sets circuit breaking parameters for the httpbin service, including connection pool limits and outlier detection settings.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: httpbin
spec:
  host: httpbin
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 1
      http:
        http1MaxPendingRequests: 1
        maxRequestsPerConnection: 1
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 1s
      baseEjectionTime: 3m
      maxEjectionPercent: 100

----------------------------------------

TITLE: Enabling Access Logs with Telemetry API in Istio
DESCRIPTION: This YAML snippet demonstrates how to enable access logs using the Telemetry API. It configures the default 'envoy' access log provider for the entire mesh.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  accessLogging:
    - providers:
      - name: envoy

----------------------------------------

TITLE: Creating IP-based Allow Authorization Policy (Gateway API)
DESCRIPTION: Creates an authorization policy to allow specific IP addresses to access the Gateway API ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: foo
spec:
  targetRef:
    kind: Gateway
    group: gateway.networking.k8s.io
    name: httpbin-gateway
  action: ALLOW
  rules:
  - from:
    - source:
        ipBlocks: ["1.2.3.4", "5.6.7.0/24"]

----------------------------------------

TITLE: Filtering Access Logs with CEL Expression in Istio
DESCRIPTION: This YAML configuration filters access logs to only display when the response code is greater than or equal to 500. It creates a Telemetry resource for the 'curl' service using a CEL expression.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: filter-curl-logging
spec:
  selector:
    matchLabels:
      app: curl
  accessLogging:
  - providers:
    - name: otel
    filter:
      expression: response.code >= 500

----------------------------------------

TITLE: Configuring Namespace Isolation with Ingress Exception in Istio
DESCRIPTION: These YAML snippets define policies to enable strict mTLS on the 'foo' namespace and allow traffic from the same namespace and the ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ns-isolation-except-ingress
  namespace: foo
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        namespaces: ["foo"]
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]

----------------------------------------

TITLE: Configuring VirtualService for TLS Routing
DESCRIPTION: Corrected VirtualService configuration to use TLS routing for passthrough Gateway.

LANGUAGE: yaml
CODE:
spec:
  tls:
  - match:
    - sniHosts: ["httpbin.example.com"]
    route:
    - destination:
        host: httpbin.org

----------------------------------------

TITLE: Configuring Mutual TLS Ingress Gateway
DESCRIPTION: Update the Kubernetes secret and Istio Gateway to support mutual TLS authentication.

LANGUAGE: bash
CODE:
kubectl -n istio-system delete secret httpbin-credential
kubectl create -n istio-system secret generic httpbin-credential \
  --from-file=tls.key=example_certs1/httpbin.example.com.key \
  --from-file=tls.crt=example_certs1/httpbin.example.com.crt \
  --from-file=ca.crt=example_certs1/example.com.crt

cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: mygateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: MUTUAL
      credentialName: httpbin-credential
    hosts:
    - httpbin.example.com
EOF

----------------------------------------

TITLE: Configuring Namespace-scoped Telemetry
DESCRIPTION: Example of configuring namespace-specific telemetry behavior, demonstrating how to override mesh-wide settings with custom header-based tags.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: namespace-override
  namespace: myapp
spec:
  tracing:
  - customTags:
      userId:
        header:
          name: userId
          defaultValue: unknown

----------------------------------------

TITLE: Implementing Mandatory JWT Validation in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that denies requests if the request principal is empty, enforcing mandatory JWT validation for incoming traffic.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: DENY
  rules:
  - from:
    - source:
        notRequestPrincipals: ["*"]

----------------------------------------

TITLE: Updating Virtual Service for JWT Claim-Based Routing
DESCRIPTION: Modifies the virtual service to route requests based on the validated JWT claims, specifically the 'groups' claim.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
  namespace: foo
spec:
  hosts:
  - "*"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /headers
      headers:
        "@request.auth.claims.groups":
          exact: group1
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF

----------------------------------------

TITLE: Accessing Kiali Dashboard
DESCRIPTION: Opens the Kiali dashboard for visualizing the service mesh.

LANGUAGE: bash
CODE:
$ istioctl dashboard kiali

----------------------------------------

TITLE: Configuring Namespace-Level Mutual TLS Policy
DESCRIPTION: YAML configuration to enforce strict mutual TLS authentication for workloads in a specific namespace using PeerAuthentication policy.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Testing Bookinfo Application Accessibility
DESCRIPTION: Executes a curl command from the ratings pod to test if the Bookinfo application is running correctly.

LANGUAGE: bash
CODE:
$ kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

----------------------------------------

TITLE: Configuring ServiceEntry with Addresses and Endpoints in YAML
DESCRIPTION: This YAML snippet demonstrates how to configure a ServiceEntry in Istio with addresses for traffic matching and endpoints for traffic routing.

LANGUAGE: yaml
CODE:
addresses: [1.1.1.1]
resolution: STATIC
endpoints:
- address: 2.2.2.2
- address: 3.3.3.3

----------------------------------------

TITLE: Verifying Custom Metrics in Istio
DESCRIPTION: Bash commands to verify the custom metrics configuration by sending test traffic and querying the Prometheus metrics endpoint.

LANGUAGE: bash
CODE:
curl "http://$GATEWAY_URL/productpage"

LANGUAGE: bash
CODE:
kubectl exec "$(kubectl get pod -l app=productpage -o jsonpath='{.items[0].metadata.name}')" -c istio-proxy -- curl -sS 'localhost:15000/stats/prometheus' | grep istio_requests_total

----------------------------------------

TITLE: Injecting HTTP Delay Fault in Istio
DESCRIPTION: This command applies an Istio virtual service rule to inject a 7-second delay for traffic to the ratings service when the user is 'jason'.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-ratings-test-delay.yaml@

----------------------------------------

TITLE: Installing Istio Gateway using IstioOperator
DESCRIPTION: Configuration for deploying an Istio ingress gateway using IstioOperator custom resource. Defines gateway settings including namespace, labels and injection template.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: ingress
spec:
  profile: empty # Do not install CRDs or the control plane
  components:
    ingressGateways:
    - name: istio-ingressgateway
      namespace: istio-ingress
      enabled: true
      label:
        # Set a unique label for the gateway. This is required to ensure Gateways
        # can select this workload
        istio: ingressgateway
  values:
    gateways:
      istio-ingressgateway:
        # Enable gateway injection
        injectionTemplate: gateway

----------------------------------------

TITLE: Deploying Test Applications
DESCRIPTION: Deploys the curl sample app as a test client and two versions of the tcp-echo microservice

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/curl/curl.yaml@ -n istio-io-tcp-traffic-shifting
$ kubectl apply -f @samples/tcp-echo/tcp-echo-services.yaml@ -n istio-io-tcp-traffic-shifting

----------------------------------------

TITLE: Applying User-based Routing with Gateway API HTTPRoute
DESCRIPTION: This command creates an HTTPRoute resource that routes traffic based on the user identity, sending requests from user 'jason' to v2 of the reviews service using the Gateway API.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - matches:
    - headers:
      - name: end-user
        value: jason
    backendRefs:
    - name: reviews-v2
      port: 9080
  - backendRefs:
    - name: reviews-v1
      port: 9080

----------------------------------------

TITLE: Installing Istio Base Chart with Helm
DESCRIPTION: Installs the Istio base chart containing cluster-wide Custom Resource Definitions (CRDs) using Helm. Sets the default revision to 'default' for resource validation.

LANGUAGE: bash
CODE:
$ helm install istio-base istio/base -n istio-system --set defaultRevision=default --create-namespace

----------------------------------------

TITLE: Uninstalling Old Istio Control Plane
DESCRIPTION: Remove the old control plane after verifying and migrating workloads to the canary version.

LANGUAGE: bash
CODE:
$ helm delete istiod -n istio-system

----------------------------------------

TITLE: Configuring Workload-specific Telemetry
DESCRIPTION: Example of configuring workload-specific telemetry behavior using selectors, showing how to disable span reporting for specific services.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: workload-override
  namespace: myapp
spec:
  selector:
    matchLabels:
      service.istio.io/canonical-name: frontend
  tracing:
  - disableSpanReporting: true

----------------------------------------

TITLE: PROXY Protocol Configuration
DESCRIPTION: YAML configuration for enabling PROXY protocol support in Istio gateway using IstioOperator.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      gatewayTopology:
        proxyProtocol: {}

----------------------------------------

TITLE: Creating Details Viewer Authorization Policy
DESCRIPTION: Establishes a policy allowing the productpage service account to access the details workload through GET methods. This enables the product details to be displayed on the main page.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: "details-viewer"
  namespace: default
spec:
  selector:
    matchLabels:
      app: details
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/default/sa/bookinfo-productpage"]
    to:
    - operation:
        methods: ["GET"]
EOF

----------------------------------------

TITLE: Disabling Probe Rewrite Globally in Istio
DESCRIPTION: Updates the Istio sidecar injector configuration to disable probe rewriting globally.

LANGUAGE: bash
CODE:
$ kubectl get cm istio-sidecar-injector -n istio-system -o yaml | sed -e 's/"rewriteAppHTTPProbe": true/"rewriteAppHTTPProbe": false/' | kubectl apply -f -

----------------------------------------

TITLE: Creating IP-based Deny Authorization Policy (Gateway API)
DESCRIPTION: Creates an authorization policy to deny specific IP addresses from accessing the Gateway API ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: foo
spec:
  targetRef:
    kind: Gateway
    group: gateway.networking.k8s.io
    name: httpbin-gateway
  action: DENY
  rules:
  - from:
    - source:
        ipBlocks: ["$CLIENT_IP"]

----------------------------------------

TITLE: Deploying Sample Applications
DESCRIPTION: Deploys httpbin and curl sample applications with Istio sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f samples/httpbin/httpbin.yaml) -n foo
$ kubectl apply -f <(istioctl kube-inject -f samples/curl/curl.yaml) -n foo

----------------------------------------

TITLE: Generating Istio Manifest with Default Revision
DESCRIPTION: Shows how to generate an Istio manifest with the default revision set, which is necessary for enabling Istio validation when using manifest generate.

LANGUAGE: bash
CODE:
$ istioctl manifest generate --set values.defaultRevision=default

----------------------------------------

TITLE: Accessing httpbin Service via Ingress
DESCRIPTION: Uses curl to access the httpbin service through the configured Gateway.

LANGUAGE: bash
CODE:
$ curl -s -I -HHost:httpbin.example.com "http://$INGRESS_HOST/get"

----------------------------------------

TITLE: Enabling Debug Logging in Istio Default Profile
DESCRIPTION: Uses istioctl install command with --set option to enable debug logging in the default Istio configuration profile.

LANGUAGE: bash
CODE:
$ istioctl install --set values.global.logging.level=debug

----------------------------------------

TITLE: Installing Istio with Helm Compatibility Version
DESCRIPTION: Command to install Istio using Helm with a specific compatibility version set to the previous version.

LANGUAGE: shell
CODE:
$ helm install ... --set compatibilityVersion={{< istio_previous_version >}}

----------------------------------------

TITLE: Configuring Traffic Mirroring in Istio using RouteRule
DESCRIPTION: This YAML configuration demonstrates how to set up traffic mirroring in Istio using a RouteRule. It routes 100% of traffic to v1 of a service while mirroring traffic to v2 for testing purposes. Note that responses from mirrored traffic are ignored, and a 0-weighted route is required for proper Envoy cluster creation.

LANGUAGE: yaml
CODE:
apiVersion: config.istio.io/v1alpha2
kind: RouteRule
metadata:
  name: mirror-traffic-to-httpbin-v2
spec:
  destination:
    name: httpbin
  precedence: 11
  route:
  - labels:
      version: v1
    weight: 100
  - labels:
      version: v2
    weight: 0
  mirror:
    name: httpbin
    labels:
      version: v2

----------------------------------------

TITLE: Configuring Productpage Viewer Authorization Policy
DESCRIPTION: Creates a policy to allow GET access to the productpage workload from all sources. This represents the first layer of access control for the application's frontend.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: "productpage-viewer"
  namespace: default
spec:
  selector:
    matchLabels:
      app: productpage
  action: ALLOW
  rules:
  - to:
    - operation:
        methods: ["GET"]
EOF

----------------------------------------

TITLE: Starting Minikube with Custom Resources in Bash
DESCRIPTION: Command to start minikube with 16384 MB of memory, 4 CPUs, and Kubernetes version 1.26.1. These resources are sufficient to run Istio and bookinfo.

LANGUAGE: bash
CODE:
$ minikube start --memory=16384 --cpus=4 --kubernetes-version=v1.26.1

----------------------------------------

TITLE: Installing Canary Version of Istio Gateway
DESCRIPTION: Install a canary revision of the Istio Gateway chart by setting the revision value.

LANGUAGE: bash
CODE:
$ helm install istio-ingress-canary istio/gateway \
    --set revision=canary \
    -n istio-ingress

----------------------------------------

TITLE: Deploying Istio-enabled Productpage Service
DESCRIPTION: Command to redeploy the productpage microservice with Istio sidecar injection, scaling to 3 replicas

LANGUAGE: bash
CODE:
curl -s samples/bookinfo/platform/kube/bookinfo.yaml | istioctl kube-inject -f - | sed 's/replicas: 1/replicas: 3/g' | kubectl apply -l app=productpage,version=v1 -f -

----------------------------------------

TITLE: Installing Istio with Jaeger Extension Provider
DESCRIPTION: This snippet shows how to install Istio with an extension provider configured for Jaeger. It disables legacy tracing options and sets up the Jaeger collector service.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./tracing.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing: {} # disable legacy MeshConfig tracing options
    extensionProviders:
    - name: jaeger
      opentelemetry:
        port: 4317
        service: jaeger-collector.istio-system.svc.cluster.local
EOF
$ istioctl install -f ./tracing.yaml --skip-confirmation

----------------------------------------

TITLE: Configuring Istio Traffic Mirroring
DESCRIPTION: Istio VirtualService configuration that implements traffic mirroring from v1 to v2 of the httpbin service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
    - httpbin
  http:
  - route:
    - destination:
        host: httpbin
        subset: v1
      weight: 100
    mirror:
      host: httpbin
      subset: v2
    mirrorPercentage:
      value: 100.0

----------------------------------------

TITLE: Enabling Ambient Mode in Kubernetes Namespace
DESCRIPTION: Labels a Kubernetes namespace to enable Istio ambient mode for all pods within that namespace.

LANGUAGE: bash
CODE:
kubectl label namespace default istio.io/dataplane-mode=ambient

----------------------------------------

TITLE: Defining Custom Metrics Configuration in Istio
DESCRIPTION: YAML configuration that adds request_host and destination_port dimensions to the requests_total metric for both gateways and sidecars.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: namespace-metrics
spec:
  metrics:
  - providers:
    - name: prometheus
    overrides:
    - match:
        metric: REQUEST_COUNT
      tagOverrides:
        destination_port:
          value: "string(destination.port)"
        request_host:
          value: "request.host"

----------------------------------------

TITLE: Labeling Namespace for Istio Sidecar Injection in Kubernetes
DESCRIPTION: Labels the default namespace to enable automatic Istio sidecar injection for deployed pods.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-injection=enabled

----------------------------------------

TITLE: Installing Istio with Ambient Profile
DESCRIPTION: Installs Istio using the ambient profile configuration. This command deploys Istio components with ambient mode support enabled, using the skip-confirmation flag for automated installation.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --skip-confirmation

----------------------------------------

TITLE: Updating Revision Tag for Istio
DESCRIPTION: Update the 'prod-stable' revision tag to point to the new Istio version.

LANGUAGE: bash
CODE:
$ helm template istiod istio/istiod -s templates/revision-tags.yaml --set revisionTags="{prod-stable}" --set revision={{< istio_full_version_revision >}} -n istio-system | kubectl apply -f -

----------------------------------------

TITLE: Deploying Test Workloads
DESCRIPTION: Deploys httpbin and curl applications in the foo namespace with Istio proxy injection enabled for testing TLS configuration.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@) -n foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@) -n foo

----------------------------------------

TITLE: Accessing Ratings Service in Java
DESCRIPTION: Shows how the reviews microservice calls the ratings microservice using a hardcoded URL.

LANGUAGE: java
CODE:
private final static String ratings_service = "http://ratings:9080/ratings";

----------------------------------------

TITLE: Enabling DNS Proxying for Sidecar Mode in Istio
DESCRIPTION: This snippet shows how to enable DNS proxying in Istio's sidecar mode using istioctl. It configures the IstioOperator to enable basic DNS proxying.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      proxyMetadata:
        # Enable basic DNS proxying
        ISTIO_META_DNS_CAPTURE: "true"
EOF

----------------------------------------

TITLE: Setting Gateway Topology via Pod Annotation
DESCRIPTION: YAML configuration showing how to set gateway topology settings using pod annotations.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    "proxy.istio.io/config": '{"gatewayTopology" : { "numTrustedProxies": <VALUE>, "forwardClientCertDetails": <ENUM_VALUE> } }'

----------------------------------------

TITLE: Configuring IngressClass and Ingress for Istio
DESCRIPTION: This YAML configuration demonstrates how to set up an IngressClass resource for Istio and an associated Ingress resource. It specifies Istio as the ingress controller and defines routing rules for the httpbin service.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: istio
spec:
  controller: istio.io/ingress-controller
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
spec:
  ingressClassName: istio
  rules:
  - host: httpbin.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: httpbin
            port:
              number: 8000

----------------------------------------

TITLE: Configuring Destination Rule with Global Traffic Policy
DESCRIPTION: Corrected destination rule configuration where traffic policy is applied at the global level to affect all versions of the service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: reviews
spec:
  host: reviews
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
  subsets:
  - name: v1
    labels:
      version: v1

----------------------------------------

TITLE: Deploying Bookinfo Application in Kubernetes with Istio
DESCRIPTION: Apply Kubernetes manifests to deploy the Bookinfo application and its different versions.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-versions.yaml@

----------------------------------------

TITLE: Manual Sidecar Injection using istioctl
DESCRIPTION: This snippet demonstrates how to manually inject the Istio sidecar into a Kubernetes deployment using istioctl.

LANGUAGE: bash
CODE:
$ istioctl kube-inject -f demo-red.yaml | kubectl apply -f -

----------------------------------------

TITLE: Manual Sidecar Injection using istioctl
DESCRIPTION: This snippet demonstrates how to manually inject the Istio sidecar into a Kubernetes deployment using istioctl.

LANGUAGE: bash
CODE:
$ istioctl kube-inject -f demo-red.yaml | kubectl apply -f -

----------------------------------------

TITLE: Deploying Bookinfo Gateway using Kubernetes Gateway API
DESCRIPTION: Apply the Kubernetes Gateway API manifest to create a gateway for the Bookinfo application.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@

----------------------------------------

TITLE: Installing Istio with Custom Configuration File
DESCRIPTION: Uses istioctl install command with -f option to apply a custom YAML configuration file for Istio installation.

LANGUAGE: bash
CODE:
$ istioctl install -f samples/operator/pilot-k8s.yaml

----------------------------------------

TITLE: Installing Istio with Zipkin Extension Provider
DESCRIPTION: Configures Istio installation with Zipkin tracing extension provider using IstioOperator custom resource.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./tracing.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing: {} # disable legacy MeshConfig tracing options
    extensionProviders:
    - name: "zipkin"
      zipkin:
        service: zipkin.istio-system.svc.cluster.local
        port: 9411
EOF
$ istioctl install -f ./tracing.yaml --skip-confirmation

----------------------------------------

TITLE: Configuring a Service Entry in Istio
DESCRIPTION: Example of a service entry that adds an external service to Istio's service registry.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: svc-entry
spec:
  hosts:
  - ext-svc.example.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

----------------------------------------

TITLE: Enabling Access Logging with Telemetry API in Istio
DESCRIPTION: This YAML configuration enables access logging for the entire mesh using the OpenTelemetry provider. It creates a Telemetry resource in the istio-system namespace.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-logging-default
spec:
  accessLogging:
  - providers:
    - name: otel

----------------------------------------

TITLE: Adding Custom Tags from Request Headers
DESCRIPTION: Configures custom tags derived from incoming client request headers in traces.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
    - providers:
      - name: "zipkin"
      randomSamplingPercentage: 100.00
      customTags:
        my_tag_header:
          header:
            name: <CLIENT-HEADER>
            defaultValue: <VALUE>      # optional

----------------------------------------

TITLE: Configuring Prometheus pod for Istio sidecar injection
DESCRIPTION: YAML configuration for Prometheus pod annotations to enable Istio sidecar injection and certificate writing without traffic interception.

LANGUAGE: yaml
CODE:
spec:
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/includeInboundPorts: ""   # do not intercept any inbound ports
        traffic.sidecar.istio.io/includeOutboundIPRanges: ""  # do not intercept any outbound traffic
        proxy.istio.io/config: |  # configure an env variable `OUTPUT_CERTS` to write certificates to the given folder
          proxyMetadata:
            OUTPUT_CERTS: /etc/istio-output-certs
        sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-output-certs"}]' # mount the shared volume at sidecar proxy

----------------------------------------

TITLE: Modifying Service Configuration
DESCRIPTION: Commands to modify and restore service port configuration for validation testing.

LANGUAGE: bash
CODE:
$ kubectl patch service details -n bookinfo --type json -p '[{"op":"replace","path":"/spec/ports/0/name", "value":"foo"}]'
$ kubectl patch service details -n bookinfo --type json -p '[{"op":"replace","path":"/spec/ports/0/name", "value":"http"}]'

----------------------------------------

TITLE: In-Place Upgrade of Istio Gateway Chart
DESCRIPTION: Optionally upgrade any installed Istio gateway charts using Helm.

LANGUAGE: bash
CODE:
$ helm upgrade istio-ingress istio/gateway -n istio-ingress

----------------------------------------

TITLE: Setting Helm Configuration Option via Command Line
DESCRIPTION: Demonstrates how to set a Helm configuration option (pilot.traceSampling) using the istioctl install command with --set option.

LANGUAGE: bash
CODE:
$ istioctl install --set values.pilot.traceSampling=0.1

----------------------------------------

TITLE: Installing Jaeger Quick Start Configuration in Kubernetes
DESCRIPTION: Deploys a basic Jaeger installation in Kubernetes using a sample configuration provided by Istio. This deployment is intended for demonstration purposes and is not optimized for production use.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/addons/jaeger.yaml

----------------------------------------

TITLE: Defining WorkloadGroup for Virtual Machine Integration in Istio
DESCRIPTION: YAML configuration for creating a WorkloadGroup resource that acts as a template for virtual machine workload entries. Defines metadata, service account, and health probe settings.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: WorkloadGroup
metadata:
  name: product-vm
spec:
  metadata:
    labels:
      app: product
  template:
    serviceAccount: default
  probe:
    httpGet:
      port: 8080

----------------------------------------

TITLE: Configuring Gateway API for Ingress
DESCRIPTION: Deploys a Gateway API configuration including a Gateway resource and an HTTPRoute to expose the httpbin service.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-ingress
$ kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
  namespace: istio-ingress
spec:
  gatewayClassName: istio
  listeners:
  - name: default
    hostname: "*.example.com"
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http
  namespace: default
spec:
  parentRefs:
  - name: gateway
    namespace: istio-ingress
  hostnames: ["httpbin.example.com"]
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /get
    backendRefs:
    - name: httpbin
      port: 8000
EOF

----------------------------------------

TITLE: Updating Layer 4 Authorization Policy in Istio
DESCRIPTION: Updates the Layer 4 authorization policy to allow connections from both the gateway and the waypoint proxy to the productpage service.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: productpage-ztunnel
  namespace: default
spec:
  selector:
    matchLabels:
      app: productpage
  action: ALLOW
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/default/sa/bookinfo-gateway-istio
        - cluster.local/ns/default/sa/waypoint

----------------------------------------

TITLE: Granting Cluster Admin Permissions in Bash
DESCRIPTION: This snippet creates a clusterrolebinding to grant cluster administrator permissions to the current user, which is necessary for creating RBAC rules for Istio.

LANGUAGE: bash
CODE:
$ kubectl create clusterrolebinding cluster-admin-binding \
    --clusterrole=cluster-admin \
    --user=$(gcloud config get-value core/account)

----------------------------------------

TITLE: Checking Certificate Status
DESCRIPTION: Examines the status of mTLS certificates used by the proxy.

LANGUAGE: bash
CODE:
curl -s localhost:15000/config_dump | ./istioctl proxy-config secret --file -

----------------------------------------

TITLE: Creating Remote Secret for cluster1 in cluster2
DESCRIPTION: Creates a remote secret in cluster2 to access cluster1's API server, enabling endpoint discovery.

LANGUAGE: bash
CODE:
istioctl create-remote-secret \
    --context="${CTX_CLUSTER1}" \
    --name=cluster1 | \
    kubectl apply -f - --context="${CTX_CLUSTER2}"

----------------------------------------

TITLE: Authorization Policy with External Provider
DESCRIPTION: Authorization policy configuration that enables external authorization for specific HTTP paths

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ext-authz
spec:
  selector:
    matchLabels:
      app: httpbin
  action: CUSTOM
  provider:
    name: sample-ext-authz-grpc
  rules:
  - to:
    - operation:
        paths: ["/headers"]

----------------------------------------

TITLE: Creating JWT Authorization Policy with Claims
DESCRIPTION: YAML configuration for creating an AuthorizationPolicy that requires specific JWT claims

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  action: ALLOW
  rules:
  - from:
    - source:
       requestPrincipals: ["testing@secure.istio.io/testing@secure.istio.io"]
    when:
    - key: request.auth.claims[groups]
      values: ["group1"]

----------------------------------------

TITLE: Creating Firewall Rule for Multi-Cluster Communication in Bash
DESCRIPTION: This snippet creates a firewall rule to allow communication between all clusters in the project. It uses the previously gathered cluster CIDRs and network tags.

LANGUAGE: bash
CODE:
$ gcloud compute firewall-rules create istio-multicluster-pods \
    --allow=tcp,udp,icmp,esp,ah,sctp \
    --direction=INGRESS \
    --priority=900 \
    --source-ranges="${ALL_CLUSTER_CIDRS}" \
    --target-tags="${ALL_CLUSTER_NETTAGS}" --quiet

----------------------------------------

TITLE: Routing Requests to Reviews Service v2 using Gateway API HTTPRoute
DESCRIPTION: This snippet shows how to create an HTTPRoute to route all requests to version 2 of the reviews service using the Gateway API.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - backendRefs:
    - name: reviews-v2
      port: 9080
EOF

----------------------------------------

TITLE: Configuring TLS Ingress Gateway for Single Host
DESCRIPTION: Create a Kubernetes secret with TLS credentials and configure an Istio Gateway and VirtualService for HTTPS access.

LANGUAGE: bash
CODE:
kubectl create -n istio-system secret tls httpbin-credential \
  --key=example_certs1/httpbin.example.com.key \
  --cert=example_certs1/httpbin.example.com.crt

cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: mygateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: httpbin-credential
    hosts:
    - httpbin.example.com
EOF

cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "httpbin.example.com"
  gateways:
  - mygateway
  http:
  - match:
    - uri:
        prefix: /status
    - uri:
        prefix: /delay
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF

----------------------------------------

TITLE: Sending Test Traffic to Bookinfo Application
DESCRIPTION: Commands to generate traffic to the Bookinfo application using curl, with an option for continuous requests using watch.

LANGUAGE: bash
CODE:
$ curl http://$GATEWAY_URL/productpage
$ watch -n 1 curl -o /dev/null -s -w %{http_code} $GATEWAY_URL/productpage

----------------------------------------

TITLE: Restarting Istio Sidecar Pods After Upgrade
DESCRIPTION: Restarts all deployment pods with Istio sidecars to complete the upgrade process.

LANGUAGE: bash
CODE:
$ kubectl rollout restart deployment

----------------------------------------

TITLE: Disabling Pilot Component in IstioOperator Resource
DESCRIPTION: YAML configuration for an IstioOperator resource that disables the pilot component.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  components:
    pilot:
      enabled: false

----------------------------------------

TITLE: Applying Virtual Services for Version-based Routing in Istio
DESCRIPTION: This command applies virtual services that route all traffic to v1 of each microservice in the Bookinfo application using Istio APIs.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@

----------------------------------------

TITLE: Deploying Reviews v2 Service
DESCRIPTION: Deploy version 2 of the reviews microservice with a test label to avoid production traffic.

LANGUAGE: bash
CODE:
$ curl -s {{< github_file >}}/samples/bookinfo/platform/kube/bookinfo.yaml | sed 's/app: reviews/app: reviews_test/' | kubectl apply -l app=reviews_test,version=v2 -f -

----------------------------------------

TITLE: Verifying Istio Control Plane Versions
DESCRIPTION: Check for two versions of istiod running in the cluster after canary installation.

LANGUAGE: bash
CODE:
$ kubectl get pods -l app=istiod -L istio.io/rev -n istio-system
  NAME                            READY   STATUS    RESTARTS   AGE   REV
  istiod-5649c48ddc-dlkh8         1/1     Running   0          71m   default
  istiod-canary-9cc9fd96f-jpc7n   1/1     Running   0          34m   canary

----------------------------------------

TITLE: Configuring Mutual TLS Gateway in Istio
DESCRIPTION: YAML configuration for setting up mutual TLS (mTLS) authentication in an Istio Gateway

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
...
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: MUTUAL
      caCertificates: ...

----------------------------------------

TITLE: Enabling Automatic Sidecar Injection
DESCRIPTION: Commands to enable automatic sidecar injection by labeling the default namespace and verifying the injection status.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-injection=enabled --overwrite
$ kubectl get namespace -L istio-injection

----------------------------------------

TITLE: Installing Istiod with CNI Support via Helm
DESCRIPTION: Helm command to install Istiod with CNI support enabled to disable privileged init container injection.

LANGUAGE: bash
CODE:
helm install istiod istio/istiod -n istio-system --set pilot.cni.enabled=true --wait

----------------------------------------

TITLE: Basic Authorization Policy Example in YAML
DESCRIPTION: Demonstrates configuring an authorization policy to allow specific service accounts and namespaces access to an application.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 action: ALLOW
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/curl"]
   - source:
       namespaces: ["dev"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["https://accounts.google.com"]

----------------------------------------

TITLE: Testing Traffic Split in Istio Ambient Mode
DESCRIPTION: This command executes 100 requests to the productpage service and filters the output to show the distribution of traffic between different versions of the reviews service. It helps verify that approximately 10% of traffic is routed to reviews-v2.

LANGUAGE: bash
CODE:
kubectl exec deploy/curl -- sh -c "for i in \$(seq 1 100); do curl -s http://productpage:9080/productpage | grep reviews-v.-; done"

----------------------------------------

TITLE: Verifying Istio Control Plane Versions
DESCRIPTION: Check for two versions of istiod running in the cluster after canary installation.

LANGUAGE: bash
CODE:
$ kubectl get pods -l app=istiod -L istio.io/rev -n istio-system
  NAME                            READY   STATUS    RESTARTS   AGE   REV
  istiod-5649c48ddc-dlkh8         1/1     Running   0          71m   default
  istiod-canary-9cc9fd96f-jpc7n   1/1     Running   0          34m   canary

----------------------------------------

TITLE: Installing Istio Base Components
DESCRIPTION: Command to install the base Istio CRDs and cluster roles.

LANGUAGE: bash
CODE:
$ helm install istio-base istio/base -n istio-system --create-namespace --wait

----------------------------------------

TITLE: Basic Authorization Policy Example in YAML
DESCRIPTION: Demonstrates configuring an authorization policy to allow specific service accounts and namespaces access to an application.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 action: ALLOW
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/curl"]
   - source:
       namespaces: ["dev"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.auth.claims[iss]
     values: ["https://accounts.google.com"]

----------------------------------------

TITLE: Applying Authorization Policy
DESCRIPTION: Applies an authorization policy to deny all requests to httpbin except from curl in the curl-allow namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: service-httpbin.default.svc.cluster.local
  namespace: default
spec:
  rules:
  - from:
    - source:
        principals:
        - old-td/ns/curl-allow/sa/curl
    to:
    - operation:
        methods:
        - GET
  selector:
    matchLabels:
      app: httpbin

----------------------------------------

TITLE: Creating ServiceEntry for Destination Server
DESCRIPTION: This YAML defines a ServiceEntry for www.wikipedia.org as the destination server for the wildcard host traffic.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: www-wikipedia
spec:
  hosts:
  - www.wikipedia.org
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS

----------------------------------------

TITLE: Running Istio Pre-check Command
DESCRIPTION: Execute the 'istioctl x precheck' command to ensure compatibility before upgrading Istio.

LANGUAGE: bash
CODE:
$ istioctl x precheck
✔ No issues found when checking the cluster. Istio is safe to install or upgrade!
  To get started, check out <https://istio.io/latest/docs/setup/getting-started/>

----------------------------------------

TITLE: External Control Plane Configuration
DESCRIPTION: Configures external control plane deployment and settings

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: external-istiod
spec:
  profile: empty
  meshConfig:
    rootNamespace: external-istiod
    defaultConfig:
      discoveryAddress: $EXTERNAL_ISTIOD_ADDR:15012
      proxyMetadata:
        XDS_ROOT_CA: /etc/ssl/certs/ca-certificates.crt
        CA_ROOT_CA: /etc/ssl/certs/ca-certificates.crt

----------------------------------------

TITLE: Configuring SkyWalking Tracing in IstioOperator
DESCRIPTION: YAML configuration to enable SkyWalking as the default tracer in Istio with a specific service endpoint and port.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultProviders:
      tracing:
      - "skywalking"
    enableTracing: true
    extensionProviders:
    - name: "skywalking"
      skywalking:
        service: tracing.istio-system.svc.cluster.local
        port: 11800

----------------------------------------

TITLE: Creating k3d Cluster
DESCRIPTION: Creates a k3d cluster with 2 agent nodes and disabled Traefik ingress controller. Maps ports 9080 and 9443 for loadbalancer access.

LANGUAGE: bash
CODE:
k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@server:*'

----------------------------------------

TITLE: Testing connectivity to Istiod
DESCRIPTION: Use the curl pod to test connectivity to Istiod by querying its API.

LANGUAGE: bash
CODE:
$ kubectl exec $(kubectl get pod -l app=curl -n foo -o jsonpath={.items..metadata.name}) -c curl -n foo -- curl -sS istiod.istio-system:15014/version

----------------------------------------

TITLE: Generating Manifest with Custom Profile and Overlay
DESCRIPTION: Uses istioctl manifest generate command to generate an Istio manifest using a custom profile and user overlay file.

LANGUAGE: bash
CODE:
$ istioctl manifest generate --manifests mycharts/ --set profile=custom1 -f path-to-user-overlay.yaml

----------------------------------------

TITLE: Service Entry Configuration for Local Authorizer
DESCRIPTION: Example service entry configuration for registering a local external authorizer running in the same pod

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: external-authz-grpc-local
spec:
  hosts:
  - "external-authz-grpc.local"
  endpoints:
  - address: "127.0.0.1"
  ports:
  - name: grpc
    number: 9191
    protocol: GRPC
  resolution: STATIC

----------------------------------------

TITLE: Configuring Ingress Gateway for httpbin (Istio APIs)
DESCRIPTION: Applies the Istio ingress gateway configuration for the httpbin application using Istio APIs.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/httpbin/httpbin-gateway.yaml@ -n foo

----------------------------------------

TITLE: Setting Default Access Log Filter with CEL Expression in Istio
DESCRIPTION: This YAML configuration sets a default filter for access logs to display when the response code is 400 or higher, or when the request goes to specific clusters. It creates a Telemetry resource in the istio-system namespace.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default-exception-logging
  namespace: istio-system
spec:
  accessLogging:
  - providers:
    - name: otel
    filter:
      expression: "response.code >= 400 || xds.cluster_name == 'BlackHoleCluster' ||  xds.cluster_name == 'PassthroughCluster' "

----------------------------------------

TITLE: Checking Bookinfo Pod Status in Kubernetes
DESCRIPTION: Verifies the status of the deployed Kubernetes pods for the Bookinfo application.

LANGUAGE: bash
CODE:
$ kubectl get pods

----------------------------------------

TITLE: Applying User-based Routing with Istio Virtual Service
DESCRIPTION: This command applies a virtual service that routes traffic based on the user identity, specifically sending requests from user 'jason' to v2 of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@

----------------------------------------

TITLE: Inspecting Envoy listener configuration
DESCRIPTION: Use istioctl proxy-config listeners to inspect the Envoy listener configuration for a pod.

LANGUAGE: bash
CODE:
$ istioctl proxy-config listeners productpage-v1-6c886ff494-7vxhs

----------------------------------------

TITLE: Generating Manifest with Multiple Overlay Files
DESCRIPTION: Uses istioctl manifest generate command to generate an Istio manifest by applying multiple overlay files.

LANGUAGE: bash
CODE:
$ istioctl manifest generate --manifests mycharts/ -f manifests/profiles/custom1.yaml -f path-to-user-overlay.yaml

----------------------------------------

TITLE: Configuring Prometheus job for Istiod metrics scraping
DESCRIPTION: YAML configuration for a Prometheus job to scrape metrics from Istiod's http-monitoring port in the istio-system namespace.

LANGUAGE: yaml
CODE:
- job_name: 'istiod'
  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system
  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istiod;http-monitoring

----------------------------------------

TITLE: Configuring NetworkPolicy for Ambient Mode Traffic
DESCRIPTION: This YAML snippet demonstrates how to modify a Kubernetes NetworkPolicy to allow incoming HBONE traffic on port 15008 for pods in the ambient mesh. It shows the before and after configurations.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-app-allow-ingress-web
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: my-app
  ingress:
  - ports:
    - port: 8080
      protocol: TCP
    - port: 15008
      protocol: TCP

----------------------------------------

TITLE: Creating Remote Secret for cluster2 in cluster1
DESCRIPTION: Creates a remote secret in cluster1 to access cluster2's API server, enabling endpoint discovery.

LANGUAGE: bash
CODE:
istioctl create-remote-secret \
    --context="${CTX_CLUSTER2}" \
    --name=cluster2 | \
    kubectl apply -f - --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Verifying Istio Gateway Versions
DESCRIPTION: Check for two versions of istio-ingress gateway running in the cluster after canary installation.

LANGUAGE: bash
CODE:
$ kubectl get pods -L istio.io/rev -n istio-ingress
  NAME                                    READY   STATUS    RESTARTS   AGE     REV
  istio-ingress-754f55f7f6-6zg8n          1/1     Running   0          5m22s   default
  istio-ingress-canary-5d649bd644-4m8lp   1/1     Running   0          3m24s   canary

----------------------------------------

TITLE: Setting up Domain for Telemetry Addons in Istio
DESCRIPTION: These commands set up the domain to expose telemetry addons. It either uses an existing domain or creates one using nip.io based on the ingress gateway's IP address.

LANGUAGE: bash
CODE:
$ export INGRESS_DOMAIN="example.com"

LANGUAGE: bash
CODE:
$ export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
$ export INGRESS_DOMAIN=${INGRESS_HOST}.nip.io

----------------------------------------

TITLE: Deleting Waypoints and Removing Labels in Istio
DESCRIPTION: These commands remove all waypoints from the default namespace and remove the waypoint label from the namespace.

LANGUAGE: bash
CODE:
$ istioctl waypoint delete --all -n default
$ kubectl label ns default istio.io/use-waypoint-

----------------------------------------

TITLE: Enabling Tracing for Mesh via Telemetry API
DESCRIPTION: This snippet shows how to enable tracing for the Istio mesh using the Telemetry API. It configures the tracing provider, sampling percentage, and adds a custom tag to the traces.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: otel-demo
spec:
  tracing:
  - providers:
    - name: otel-tracing
    randomSamplingPercentage: 100
    customTags:
      "my-attribute":
        literal:
          value: "default-value"
EOF

----------------------------------------

TITLE: Testing Ingress Configuration with curl
DESCRIPTION: These bash commands demonstrate how to test the Ingress configuration using curl. They show how to access the exposed endpoint and verify the response, as well as test an unexposed path.

LANGUAGE: bash
CODE:
$ curl -s -I -HHost:httpbin.example.com "http://$INGRESS_HOST:$INGRESS_PORT/status/200"

$ curl -s -I -HHost:httpbin.example.com "http://$INGRESS_HOST:$INGRESS_PORT/headers"

----------------------------------------

TITLE: Deploying Liveness Command Sample in Istio
DESCRIPTION: Injects Istio sidecar and deploys a sample application using command-based liveness probe.

LANGUAGE: bash
CODE:
$ kubectl -n istio-io-health apply -f <(istioctl kube-inject -f @samples/health-check/liveness-command.yaml@)

----------------------------------------

TITLE: Implementing Ratings Viewer Authorization Policy
DESCRIPTION: Defines a policy allowing the reviews service account to access the ratings workload through GET methods. This enables the display of ratings within the reviews section.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: "ratings-viewer"
  namespace: default
spec:
  selector:
    matchLabels:
      app: ratings
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/default/sa/bookinfo-reviews"]
    to:
    - operation:
        methods: ["GET"]
EOF

----------------------------------------

TITLE: Cleaning Up Istio and Bookinfo
DESCRIPTION: This snippet provides commands for cleaning up Istio processes and the Bookinfo sample application after testing.

LANGUAGE: bash
CODE:
$ killall istioctl

----------------------------------------

TITLE: Installing Istio with Helm on GKE
DESCRIPTION: Command to install Istio's istiod component using Helm on Google Kubernetes Engine (GKE) with the default profile.

LANGUAGE: bash
CODE:
$ helm install istiod istio/istiod -n istio-system --set profile=default --set global.platform=gke --wait

----------------------------------------

TITLE: Getting a summary of Envoy clusters
DESCRIPTION: Use istioctl proxy-config cluster to get a summary of clusters for a given pod.

LANGUAGE: bash
CODE:
$ istioctl proxy-config cluster -n istio-system istio-ingressgateway-7d6874b48f-qxhn5

----------------------------------------

TITLE: Defining Kustomization Configuration
DESCRIPTION: Creates a kustomization.yaml file that specifies the base resources and patch configurations for Kustomize.

LANGUAGE: yaml
CODE:
resources:
- base.yaml
patchesStrategicMerge:
- sysctl-ingress-gw-customization.yaml

----------------------------------------

TITLE: Setting Default Network for cluster1
DESCRIPTION: Labels the istio-system namespace in cluster1 with the network topology.

LANGUAGE: bash
CODE:
kubectl --context="${CTX_CLUSTER1}" get namespace istio-system && \
  kubectl --context="${CTX_CLUSTER1}" label namespace istio-system topology.istio.io/network=network1

----------------------------------------

TITLE: Inspecting Envoy bootstrap configuration
DESCRIPTION: Use istioctl proxy-config bootstrap to view the bootstrap configuration for Envoy.

LANGUAGE: bash
CODE:
$ istioctl proxy-config bootstrap -n istio-system istio-ingressgateway-7d6874b48f-qxhn5

----------------------------------------

TITLE: Configuring Istio Discovery Selectors for Namespace Filtering
DESCRIPTION: Shows how to configure meshConfig discoverySelectors to control which namespaces are visible to the control plane. This example enables discovery for namespaces with specific labels.

LANGUAGE: yaml
CODE:
meshConfig:
  discoverySelectors:
    - matchLabels:
        # Allow any namespaces with `istio-discovery=enabled`
        istio-discovery: enabled
    - matchLabels:
        # Allow "kube-system"; Kubernetes automatically adds this label to each namespace
        kubernetes.io/metadata.name: kube-system

----------------------------------------

TITLE: Deploying Bookinfo v1 Services to Cluster1
DESCRIPTION: Kubernetes manifests to deploy the productpage, details, and reviews-v1 services to the first cluster.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: productpage
  labels:
    app: productpage
spec:
  ports:
  - port: 9080
    name: http
  selector:
    app: productpage
---
# Additional deployment manifests omitted for brevity

----------------------------------------

TITLE: Enrolling Namespace to Use Waypoint in Istio
DESCRIPTION: This command applies a waypoint proxy to the default namespace and automatically labels the namespace to use the waypoint.

LANGUAGE: bash
CODE:
$ istioctl waypoint apply -n default --enroll-namespace

----------------------------------------

TITLE: Installing East-West Gateway in cluster1
DESCRIPTION: Installs a gateway in cluster1 dedicated to east-west traffic using a generated configuration.

LANGUAGE: bash
CODE:
@samples/multicluster/gen-eastwest-gateway.sh@ \
    --network network1 | \
    istioctl --context="${CTX_CLUSTER1}" install -y -f -

----------------------------------------

TITLE: Analyzing Multiple Istio Config Files
DESCRIPTION: Command to analyze multiple Istio configuration files against a live cluster.

LANGUAGE: bash
CODE:
$ istioctl analyze @samples/bookinfo/networking/bookinfo-gateway.yaml@ @samples/bookinfo/networking/destination-rule-all.yaml@

----------------------------------------

TITLE: Creating Ingress Gateway sysctl Patch in YAML
DESCRIPTION: Creates a YAML patch file that adds a sysctl configuration to the Istio ingress gateway deployment, specifically setting the TCP close wait timeout.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingress
  namespace: istio-ingress
spec:
  template:
    spec:
      securityContext:
          sysctls:
          - name: net.netfilter.nf_conntrack_tcp_timeout_close_wait
            value: "10"

----------------------------------------

TITLE: Deploying Bookinfo details v2 with HTTPS
DESCRIPTION: Deploys a new version of the details microservice that uses HTTPS to access the external Google Books API.

LANGUAGE: bash
CODE:
kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-details-v2.yaml@ --dry-run -o yaml | kubectl set env --local -f - 'DO_NOT_ENCRYPT=false' -o yaml | kubectl apply -f -

----------------------------------------

TITLE: Configuring Telemetry Providers in MeshConfig
DESCRIPTION: Example configuration for defining tracing providers in Istio's MeshConfig, showing how to set up local Zipkin and Stackdriver providers.

LANGUAGE: yaml
CODE:
data:
  mesh: |-
      extensionProviders: # The following content defines two example tracing providers.
      - name: "localtrace"
        zipkin:
          service: "zipkin.istio-system.svc.cluster.local"
          port: 9411
          maxTagLength: 56
      - name: "cloudtrace"
        stackdriver:
          maxTagLength: 256

----------------------------------------

TITLE: Configuring mTLS Policy
DESCRIPTION: Applies a PeerAuthentication policy to enforce strict mTLS for workloads in the foo namespace.

LANGUAGE: bash
CODE:
$ kubectl apply -n foo -f - <<EOF
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "default"
spec:
  mtls:
    mode: STRICT
EOF

----------------------------------------

TITLE: Applying Kubernetes Destination Rules
DESCRIPTION: Command to apply default destination rules for the application services

LANGUAGE: bash
CODE:
kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml

----------------------------------------

TITLE: Cleaning Up Istio Test Services
DESCRIPTION: These bash commands remove the curl and httpbin services used for testing Istio access logging.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/curl/curl.yaml@
$ kubectl delete -f @samples/httpbin/httpbin.yaml@

----------------------------------------

TITLE: Deploying Bookinfo Application to Kubernetes
DESCRIPTION: Applies the Kubernetes deployment spec for the Bookinfo application, excluding v2 and v3 versions.

LANGUAGE: bash
CODE:
$ kubectl apply -l version!=v2,version!=v3 -f {{< github_file >}}/samples/bookinfo/platform/kube/bookinfo.yaml

----------------------------------------

TITLE: Deploying Tenant Application with Namespace
DESCRIPTION: Example of adding namespace reference to a Kubernetes Service resource for tenant application deployment.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: details
  labels:
    app: details
  namespace: ns-1

----------------------------------------

TITLE: Accessing Jaeger Dashboard
DESCRIPTION: This snippet shows how to use port-forwarding to access the Jaeger dashboard for testing purposes. It assumes Jaeger is deployed in the istio-system namespace.

LANGUAGE: bash
CODE:
$ istioctl dashboard jaeger

----------------------------------------

TITLE: Checking Kubernetes Pods Status
DESCRIPTION: Command to verify the status of application pods and confirm the presence of sidecar containers

LANGUAGE: bash
CODE:
$ kubectl get pods

----------------------------------------

TITLE: Creating IstioOperator Spec for Installation
DESCRIPTION: Generates an IstioOperator specification file for installing Istio with specific mesh ID, cluster name, and network settings.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./vm-cluster.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: istio
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: "${CLUSTER}"
      network: "${CLUSTER_NETWORK}"
EOF

----------------------------------------

TITLE: Port Forwarding Bookinfo Gateway in Kubernetes
DESCRIPTION: Use kubectl to set up port forwarding for accessing the Bookinfo application through the gateway.

LANGUAGE: bash
CODE:
$ kubectl port-forward svc/bookinfo-gateway-istio 8080:80

----------------------------------------

TITLE: Configuring Workload Entry for VM
DESCRIPTION: Uses istioctl to generate configuration files for the VM, including cluster environment, Istio token, and mesh configuration.

LANGUAGE: bash
CODE:
$ istioctl x workload entry configure -f workloadgroup.yaml -o "${WORK_DIR}" --clusterID "${CLUSTER}" --autoregister

----------------------------------------

TITLE: Configuring Namespace-Scoped Virtual Service
DESCRIPTION: Virtual service configuration that limits visibility to the same namespace using exportTo field.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: myservice
spec:
  hosts:
  - myservice.com
  exportTo:
  - "."
  http:
  - route:
    - destination:
        host: myservice

----------------------------------------

TITLE: Configuring Helm Repository for Istio
DESCRIPTION: Commands to add and update the Istio Helm repository.

LANGUAGE: bash
CODE:
$ helm repo add istio https://istio-release.storage.googleapis.com/charts
$ helm repo update

----------------------------------------

TITLE: Custom Template Definition
DESCRIPTION: YAML configuration for defining a custom injection template with environment variables using IstioOperator.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: istio
spec:
  values:
    sidecarInjectorWebhook:
      templates:
        custom: |
          spec:
            containers:
            - name: istio-proxy
              env:
              - name: GREETING
                value: hello-world

----------------------------------------

TITLE: Fixing Istio Injection Configuration
DESCRIPTION: Command to enable Istio injection on the default namespace after receiving an IST0102 warning.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-injection=enabled

----------------------------------------

TITLE: Creating Remote Cluster Secret
DESCRIPTION: Command to generate and apply remote secret for enabling API Server access between clusters.

LANGUAGE: bash
CODE:
istioctl create-remote-secret \
    --context="${CTX_CLUSTER2}" \
    --name=cluster2 | \
    kubectl apply -f - --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Configuring Gateway Resource
DESCRIPTION: YAML configuration for creating a Gateway resource to define ingress entry point

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: sample-gateway
  namespace: sample-ingress
spec:
  gatewayClassName: istio
  listeners:
  - name: http
    hostname: "*.sample.com"
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All

----------------------------------------

TITLE: Configuring Istio Ingress Service with AWS NLB and Proxy Protocol
DESCRIPTION: This YAML snippet configures the Istio Ingress gateway service to use AWS Network Load Balancer and enables proxy protocol. It also sets up gateway topology for X-Forwarded-For headers.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    proxy.istio.io/config: '{"gatewayTopology" : { "numTrustedProxies": 2 } }'
  labels:
    app: istio-ingressgateway
    istio: ingressgateway
    release: istio
  name: istio-ingressgateway

----------------------------------------

TITLE: Deploying Multiple Istio Control Planes
DESCRIPTION: Applies the default and tenant-specific Istio YAML files to deploy multiple Istio control planes.

LANGUAGE: bash
CODE:
$ kubectl apply -f install/kubernetes/istio.yaml
$ kubectl apply -f install/kubernetes/istio-system1.yaml

----------------------------------------

TITLE: Creating Kubernetes Secret for CA Certificates
DESCRIPTION: Creates a Kubernetes secret containing the CA certificates and keys in the istio-system namespace.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-system
$ kubectl create secret generic cacerts -n istio-system \
      --from-file=cluster1/ca-cert.pem \
      --from-file=cluster1/ca-key.pem \
      --from-file=cluster1/root-cert.pem \
      --from-file=cluster1/cert-chain.pem

----------------------------------------

TITLE: Creating Certificate Directory
DESCRIPTION: Creates a directory to store certificates and keys for Istio CA configuration.

LANGUAGE: bash
CODE:
$ mkdir -p certs
$ pushd certs

----------------------------------------

TITLE: Retrieving Kubernetes Credentials in Bash
DESCRIPTION: This snippet retrieves the credentials for kubectl to interact with the newly created GKE cluster.

LANGUAGE: bash
CODE:
$ gcloud container clusters get-credentials $CLUSTER_NAME \
    --zone $ZONE \
    --project $PROJECT_ID

----------------------------------------

TITLE: Retrieving configuration diffs between Envoy and Istiod
DESCRIPTION: Use istioctl proxy-status with a proxy ID to get a diff between Envoy and Istiod configurations.

LANGUAGE: bash
CODE:
$ istioctl proxy-status details-v1-6dcc6fbb9d-wsjz4.default

----------------------------------------

TITLE: Deploying httpbin Sample Application
DESCRIPTION: Creates a namespace, enables sidecar injection, and deploys the httpbin sample application.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl label namespace foo istio-injection=enabled
$ kubectl apply -f @samples/httpbin/httpbin.yaml@ -n foo

----------------------------------------

TITLE: Deploying AuthorizationPolicy
DESCRIPTION: Applies an AuthorizationPolicy to define which services will be protected by OPA.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: my-opa-authz
  namespace: istio-system
spec:
  selector:
    matchLabels:
      ext-authz: enabled
  action: CUSTOM
  provider:
    name: "opa.local"
  rules: [{}]
EOF

----------------------------------------

TITLE: Deploying Egress Gateway and RBAC Configuration in Istio
DESCRIPTION: YAML configuration for deploying an egress gateway, associated RBAC rules, and a Service in the istio-egress namespace. This setup is necessary for routing egress traffic through a controlled gateway.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: egressgateway
  namespace: istio-egress
spec:
  type: ClusterIP
  selector:
    istio: egressgateway
  ports:
  - port: 443
    name: tls-egress
    targetPort: 8443

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-egressgateway
  namespace: istio-egress
spec:
  selector:
    matchLabels:
      istio: egressgateway
  template:
    metadata:
      annotations:
        inject.istio.io/templates: gateway
      labels:
        istio: egressgateway
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: istio-proxy
        image: auto
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsUser: 1337
          runAsGroup: 1337

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-egressgateway-sds
  namespace: istio-egress
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
- apiGroups:
  - security.openshift.io
  resourceNames:
  - anyuid
  resources:
  - securitycontextconstraints
  verbs:
  - use

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-egressgateway-sds
  namespace: istio-egress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-egressgateway-sds
subjects:
- kind: ServiceAccount
  name: default

----------------------------------------

TITLE: Basic Istio Configuration Analysis
DESCRIPTION: Basic command to analyze Istio configuration across all namespaces in a Kubernetes cluster.

LANGUAGE: bash
CODE:
$ istioctl analyze --all-namespaces

----------------------------------------

TITLE: Installing Istio Ingress Gateway with Custom Configuration
DESCRIPTION: Commands to create namespace and install Istio ingress gateway with custom configuration using Helm post-renderer.

LANGUAGE: bash
CODE:
kubectl create ns istio-ingress
helm upgrade -i istio-ingress istio/gateway --namespace istio-ingress --wait --post-renderer ./kustomize.sh

----------------------------------------

TITLE: Generating Dashboard Access Token
DESCRIPTION: Creates and retrieves authentication token for Dashboard access.

LANGUAGE: bash
CODE:
token=$(kubectl -n kubernetes-dashboard create token admin-user)
echo $token

----------------------------------------

TITLE: Viewing Systemd Logs for Istio
DESCRIPTION: Retrieves the last 1000 lines of systemd logs for the Istio service.

LANGUAGE: bash
CODE:
journalctl -f -u istio -n 1000

----------------------------------------

TITLE: Deploying Istio Control Plane for Usergroup-1
DESCRIPTION: Creates a namespace for usergroup-1, labels it, and installs an Istio control plane using a custom IstioOperator configuration. It sets up discoverySelectors to manage resources labeled for usergroup-1.

LANGUAGE: bash
CODE:
$ kubectl create ns usergroup-1
$ kubectl label ns usergroup-1 usergroup=usergroup-1
$ istioctl install -y -f - <<EOF
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: usergroup-1
spec:
  profile: minimal
  revision: usergroup-1
  meshConfig:
    discoverySelectors:
      - matchLabels:
          usergroup: usergroup-1
  values:
    global:
      istioNamespace: usergroup-1
EOF

----------------------------------------

TITLE: Exposing MySQL Service to Istio Mesh
DESCRIPTION: Create a Kubernetes Service to expose the MySQL database running on the VM to the Istio mesh. This allows other services in the mesh to communicate with the MySQL database.

LANGUAGE: bash
CODE:
$ cat <<EOF | kubectl apply -f - -n vm
apiVersion: v1
kind: Service
metadata:
  name: mysqldb
  labels:
    app: mysqldb
spec:
  ports:
  - port: 3306
    name: tcp
  selector:
    app: mysqldb
EOF

----------------------------------------

TITLE: Installing Istio with eBPF Redirection in Ambient Mode
DESCRIPTION: This command installs Istio with the ambient profile and sets the CNI ambient redirect mode to eBPF. It enables eBPF-based traffic redirection in Istio's ambient mode.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.cni.ambient.redirectMode="ebpf"

----------------------------------------

TITLE: Enabling Tracing Provider without Sampling via Telemetry API
DESCRIPTION: This snippet demonstrates how to enable a tracing provider using the Telemetry API without setting randomSamplingPercentage.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: otel-tracing
EOF

----------------------------------------

TITLE: Setting Namespace Environment Variable
DESCRIPTION: Creates an environment variable to store the namespace name for the tutorial.

LANGUAGE: bash
CODE:
$ export NAMESPACE=tutorial

----------------------------------------

TITLE: Removing Namespace from Ambient Data Plane in Istio
DESCRIPTION: Command to remove the label that includes applications in the default namespace in the ambient mesh.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio.io/dataplane-mode-

----------------------------------------

TITLE: Configuring Istio Gateway and VirtualService for Backend Service
DESCRIPTION: These YAML configurations set up an Istio Gateway and VirtualService for the httpbin sample service, defining routing rules for specific paths.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "httpbin.example.com"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "httpbin.example.com"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /status
    - uri:
        prefix: /delay
    route:
    - destination:
        port:
          number: 8000
        host: httpbin

----------------------------------------

TITLE: Upgrading Istiod with Revision
DESCRIPTION: Installs a new revision of the Istio control plane alongside the existing one.

LANGUAGE: bash
CODE:
$ helm install istiod-"$REVISION" istio/istiod -n istio-system --set revision="$REVISION" --set profile=ambient --wait

----------------------------------------

TITLE: Setting Minikube Driver in Bash
DESCRIPTION: Command to set the KVM hypervisor driver for minikube. This is necessary if not using the default driver.

LANGUAGE: bash
CODE:
$ minikube config set driver kvm2

----------------------------------------

TITLE: Installing Istio with Dual Stack Support
DESCRIPTION: Command to install Istio with experimental dual stack support enabled using IstioOperator custom resource.

LANGUAGE: bash
CODE:
$ istioctl install -y -f - <<EOF
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      proxyMetadata:
        ISTIO_DUAL_STACK: "true"
  values:
    pilot:
      env:
        ISTIO_DUAL_STACK: "true"
EOF

----------------------------------------

TITLE: Inspecting Envoy Access Logs
DESCRIPTION: Command to view Envoy proxy logs for a pod to troubleshoot request rejections.

LANGUAGE: bash
CODE:
$ kubectl logs PODNAME -c istio-proxy -n NAMESPACE

----------------------------------------

TITLE: Configuring Virtual Service with Explicit Route Rule
DESCRIPTION: Virtual service configuration that explicitly routes traffic to a specific service subset.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Configuring NetworkPolicy to Block All Ingress Traffic
DESCRIPTION: This YAML snippet shows a Kubernetes NetworkPolicy that blocks all incoming traffic to a pod, including kubelet health probes. This policy may cause issues with health checks in ambient mode.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-ingress
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: my-app
  policyTypes:
  - Ingress

----------------------------------------

TITLE: Configuring cluster1 as Primary using IstioOperator
DESCRIPTION: Creates and applies an IstioOperator configuration for the primary cluster (cluster1).

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: cluster1
      network: network1
      externalIstiod: true

LANGUAGE: bash
CODE:
istioctl install --context="${CTX_CLUSTER1}" -f cluster1.yaml

----------------------------------------

TITLE: Installing Ingress Gateway
DESCRIPTION: Command to install an optional ingress gateway component.

LANGUAGE: bash
CODE:
$ helm install istio-ingress istio/gateway -n istio-ingress --create-namespace --wait

----------------------------------------

TITLE: Cleaning Up Telemetry Resource
DESCRIPTION: This snippet shows how to remove the Telemetry resource that was created to enable tracing.

LANGUAGE: bash
CODE:
$ kubectl delete telemetry otel-demo

----------------------------------------

TITLE: Configuring Sampling via Pod Annotation
DESCRIPTION: This YAML snippet shows how to override mesh-wide sampling settings using the proxy.istio.io/config annotation in a pod manifest.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curl
spec:
  ...
  template:
    metadata:
      ...
      annotations:
        ...
        proxy.istio.io/config: |
          tracing:
            sampling: 20
    spec:
      ...

----------------------------------------

TITLE: Installing Istio Demo Profile
DESCRIPTION: Commands to install Istio using the demo configuration profile and enable automatic sidecar injection in the default namespace.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=demo -y
$ kubectl label namespace default istio-injection=enabled

----------------------------------------

TITLE: Retrieving AKS cluster credentials
DESCRIPTION: This command fetches the kubeconfig credentials for the newly created AKS cluster, allowing for cluster management and interaction.

LANGUAGE: bash
CODE:
$ az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

----------------------------------------

TITLE: Starting Dashboard Proxy
DESCRIPTION: Initiates a proxy server to access the Kubernetes Dashboard interface.

LANGUAGE: bash
CODE:
kubectl proxy

----------------------------------------

TITLE: Configuring HTTPRoute for Service Routing in Istio Ambient Mesh
DESCRIPTION: This YAML snippet defines an HTTPRoute resource to configure routing for the 'echo' service in an Istio ambient mesh. It ensures that requests to the 'echo' service are forwarded to 'echo-v1' pods.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: echo
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: echo
  rules:
  - backendRefs:
    - name: echo-v1
      port: 80

----------------------------------------

TITLE: Installing Istio with Automated WorkloadEntry Creation
DESCRIPTION: Installs Istio using the generated IstioOperator spec and enables automated WorkloadEntry creation and health checks.

LANGUAGE: bash
CODE:
$ istioctl install -f vm-cluster.yaml --set values.pilot.env.PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION=true --set values.pilot.env.PILOT_ENABLE_WORKLOAD_ENTRY_HEALTHCHECKS=true

----------------------------------------

TITLE: Creating and Labeling Namespace for Istio Injection
DESCRIPTION: Creates a namespace 'foo' and labels it for Istio sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl label ns foo istio-injection=enabled

----------------------------------------

TITLE: Installing Istio with Helm
DESCRIPTION: Installs Istio components using Helm 3, including creating namespace, installing base chart and istiod.

LANGUAGE: bash
CODE:
kubectl create namespace istio-system
helm install istio-base istio/base -n istio-system --wait
helm install istiod istio/istiod -n istio-system --wait

----------------------------------------

TITLE: Deploying Sample Applications
DESCRIPTION: Deploys the bookinfo sample application along with sleep and notsleep test clients to the cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
$ kubectl apply -f https://raw.githubusercontent.com/linsun/sample-apps/main/sleep/sleep.yaml
$ kubectl apply -f https://raw.githubusercontent.com/linsun/sample-apps/main/sleep/notsleep.yaml

----------------------------------------

TITLE: Updating Helm Repository
DESCRIPTION: Updates the Istio Helm repository to ensure access to latest charts.

LANGUAGE: bash
CODE:
$ helm repo update istio

----------------------------------------

TITLE: Basic Prometheus Query
DESCRIPTION: Query to get total requests count in Istio

LANGUAGE: plaintext
CODE:
istio_requests_total

----------------------------------------

TITLE: Testing DLB Connection Load Balancing in Istio
DESCRIPTION: These bash commands demonstrate how to test the DLB-enabled Istio ingress gateway by sending HTTP requests to the configured backend service.

LANGUAGE: bash
CODE:
$ export HOST="<YOUR-HOST-IP>"
$ export PORT="$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')"
$ curl -s -I -HHost:httpbin.example.com "http://${HOST}:${PORT}/status/200"

----------------------------------------

TITLE: Applying Simple Rego Rule
DESCRIPTION: Deploys a ConfigMap with a simple Rego rule for authorization based on a specific header.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy
  namespace: opa
data:
  policy.rego: |
    package mypackage.mysubpackage

    import rego.v1

    default myrule := false

    myrule if {
      input.attributes.request.http.headers["x-force-authorized"] == "enabled"
    }

    myrule if {
      input.attributes.request.http.headers["x-force-authorized"] == "true"
    }
EOF

----------------------------------------

TITLE: Configuring Strict mTLS for Usergroup-2
DESCRIPTION: Applies a PeerAuthentication policy to enforce strict mutual TLS for workloads in the usergroup-2 namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "usergroup-2-peerauth"
  namespace: "usergroup-2"
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Creating and Applying WorkloadGroup for VM
DESCRIPTION: Creates a WorkloadGroup configuration for the VM and applies it to the cluster, enabling automated WorkloadEntry creation.

LANGUAGE: bash
CODE:
$ cat <<EOF > workloadgroup.yaml
apiVersion: networking.istio.io/v1
kind: WorkloadGroup
metadata:
  name: "${VM_APP}"
  namespace: "${VM_NAMESPACE}"
spec:
  metadata:
    labels:
      app: "${VM_APP}"
  template:
    serviceAccount: "${SERVICE_ACCOUNT}"
    network: "${VM_NETWORK}"
EOF

LANGUAGE: bash
CODE:
$ kubectl --namespace "${VM_NAMESPACE}" apply -f workloadgroup.yaml

----------------------------------------

TITLE: Uninstalling Istio from cluster2 using Helm
DESCRIPTION: Removes Istio Helm installation from cluster2 and deletes the istio-system namespace.

LANGUAGE: bash
CODE:
helm delete istiod -n istio-system --kube-context "${CTX_CLUSTER2}"
helm delete istio-base -n istio-system --kube-context "${CTX_CLUSTER2}"
kubectl delete ns istio-system --context="${CTX_CLUSTER2}"

----------------------------------------

TITLE: Cleaning Up Resources
DESCRIPTION: Removes the 'foo' namespace to clean up all resources created during the demonstration.

LANGUAGE: bash
CODE:
$ kubectl delete namespace foo

----------------------------------------

TITLE: Correcting AuthorizationPolicy to explicitly allow mTLS traffic in YAML
DESCRIPTION: Updated YAML configuration for an AuthorizationPolicy that explicitly allows only mTLS traffic by adding a condition to match non-empty namespaces. This configuration addresses the issue of potentially allowing unintended plain text traffic.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: allow-ns-not-foo
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        notNamespaces: ["foo"]
        # Add the following to explicitly only allow mTLS traffic.
        namespaces: ["*"]

----------------------------------------

TITLE: Getting an overview of the Istio mesh
DESCRIPTION: Use the istioctl proxy-status command to get an overview of the Istio mesh and check the sync status of proxies.

LANGUAGE: bash
CODE:
$ istioctl proxy-status

----------------------------------------

TITLE: Configuring Istio for SkyWalking Tracing
DESCRIPTION: This YAML configuration enables the SkyWalking tracing extension provider in Istio. It specifies the service and port for SkyWalking, and sets it as the default tracing provider for Istio proxies.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    extensionProviders:
      - skywalking:
          service: tracing.istio-system.svc.cluster.local
          port: 11800
        name: skywalking
    defaultProviders:
        tracing:
        - "skywalking"

----------------------------------------

TITLE: Checking supported Kubernetes versions for a specific Azure region
DESCRIPTION: This command retrieves the list of supported Kubernetes versions for a specified Azure region.

LANGUAGE: bash
CODE:
$ az aks get-versions --location "my location" --query "orchestrators[].orchestratorVersion"

----------------------------------------

TITLE: Installing Istio Ingress Gateway
DESCRIPTION: Command to install an optional Istio ingress gateway in a dedicated namespace.

LANGUAGE: bash
CODE:
$ helm install istio-ingress istio/gateway -n istio-ingress --create-namespace --wait

----------------------------------------

TITLE: Configuring failover conditions with DestinationRule in Istio
DESCRIPTION: Sets up a DestinationRule to configure load balancing, connection pool, and outlier detection for external endpoints.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mydynamodb
spec:
  host: mydb.com
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 15s
      baseEjectionTime: 1m

----------------------------------------

TITLE: Freeing Docker Desktop Resources with System Prune
DESCRIPTION: This command frees up additional Docker Desktop resources by removing unused data. It can help alleviate memory-related issues when running Istio.

LANGUAGE: bash
CODE:
$ docker system prune

----------------------------------------

TITLE: Creating Namespace and Deploying Workloads
DESCRIPTION: Commands to create a namespace 'foo' and deploy httpbin and curl workloads with Istio injection

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@) -n foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@) -n foo

----------------------------------------

TITLE: Configuring Gateway Service Type
DESCRIPTION: Changes the gateway service type to ClusterIP for local access.

LANGUAGE: bash
CODE:
$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default

----------------------------------------

TITLE: Creating ServiceEntry for HTTP External Service
DESCRIPTION: Defines a ServiceEntry resource to allow direct traffic to edition.cnn.com over HTTP

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: cnn
spec:
  hosts:
  - edition.cnn.com
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS

----------------------------------------

TITLE: Applying CryptoMB Configuration to Specific Pods in Istio
DESCRIPTION: This YAML configuration demonstrates how to apply CryptoMB private key provider settings to specific application pods in Istio using pod annotations. It includes a complete Kubernetes Deployment configuration with the necessary annotations.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ServiceAccount
metadata:
  name: httpbin
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
    service: httpbin
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
      annotations:
        proxy.istio.io/config: |
          privateKeyProvider:
            cryptomb:
              pollDelay: 10ms
    spec:
      serviceAccountName: httpbin
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Creating VirtualService
DESCRIPTION: Configures routing rules for the custom gateway to direct traffic to backend services.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-virtualservice
spec:
  hosts:
  - "demo.mydemo.com"
  gateways:
  - istio-custom-gateway
  http:
  - route:
    - destination:
        host: my-demoapp

----------------------------------------

TITLE: Defining External TCP Services with ServiceEntry in Istio
DESCRIPTION: This YAML snippet demonstrates how to define two external AWS RDS services using ServiceEntry resources in Istio. It highlights the issue of distinguishing between multiple TCP services on the same port without unique VIPs.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: db1
  namespace: ns1
spec:
  hosts:
  - mysql-instance1.us-east-1.rds.amazonaws.com
  ports:
  - name: mysql
    number: 3306
    protocol: TCP
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: db2
  namespace: ns1
spec:
  hosts:
  - mysql-instance2.us-east-1.rds.amazonaws.com
  ports:
  - name: mysql
    number: 3306
    protocol: TCP
  resolution: DNS

----------------------------------------

TITLE: Testing Gateway Access
DESCRIPTION: Command to verify access to the application through the Istio Gateway by checking the page title.

LANGUAGE: bash
CODE:
curl -s $MY_INGRESS_GATEWAY_HOST:$INGRESS_PORT/productpage | grep -o "<title>.*</title>"

----------------------------------------

TITLE: Creating cert-manager Certificate for Istio Ingress in YAML
DESCRIPTION: This snippet defines a cert-manager Certificate resource in the istio-system namespace. It specifies the secret name, common name, and DNS names for the certificate.

LANGUAGE: yaml
CODE:
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ingress-cert
  namespace: istio-system
spec:
  secretName: ingress-cert
  commonName: my.example.com
  dnsNames:
  - my.example.com
  ...

----------------------------------------

TITLE: External HTTPS Service Entry Configuration
DESCRIPTION: YAML configuration for allowing access to an external HTTPS service (www.google.com) using ServiceEntry

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: google
spec:
  hosts:
  - www.google.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL

----------------------------------------

TITLE: Configuring Gateway for Manual Deployment
DESCRIPTION: Demonstrates how to configure a Gateway to use a manually deployed Service.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
spec:
  addresses:
  - value: ingress.istio-gateways.svc.cluster.local
    type: Hostname
...

----------------------------------------

TITLE: Installing Istio with Minimal Profile
DESCRIPTION: Installs Istio using the 'minimal' profile configuration.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=minimal -y

----------------------------------------

TITLE: Configuring Cross-Namespace Waypoint in Istio
DESCRIPTION: This YAML configuration defines a Gateway resource for a waypoint that allows cross-namespace usage, specifically for a namespace called 'cross-namespace-waypoint-consumer'.

LANGUAGE: yaml
CODE:
kind: Gateway
metadata:
  name: egress-gateway
  namespace: common-infrastructure
spec:
  gatewayClassName: istio-waypoint
  listeners:
  - name: mesh
    port: 15008
    protocol: HBONE
    allowedRoutes:
      namespaces:
        from: Selector
        selector:
          matchLabels:
            kubernetes.io/metadata.name: cross-namespace-waypoint-consumer

----------------------------------------

TITLE: Manual Sidecar Injection Configuration
DESCRIPTION: Commands to manually inject sidecars using istioctl and local configuration files.

LANGUAGE: bash
CODE:
$ istioctl kube-inject -f @samples/curl/curl.yaml@ | kubectl apply -f -
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.config}' > inject-config.yaml
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.values}' > inject-values.yaml
$ kubectl -n istio-system get configmap istio -o=jsonpath='{.data.mesh}' > mesh-config.yaml

----------------------------------------

TITLE: Installing Istio with istioctl on GKE
DESCRIPTION: Command to install Istio using istioctl on Google Kubernetes Engine (GKE) with the default profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=default --set values.global.platform=gke

----------------------------------------

TITLE: Exporting Istio Configuration
DESCRIPTION: Command to export all Istio-related configuration artifacts across all namespaces.

LANGUAGE: bash
CODE:
kubectl get istio-io --all-namespaces -o yaml

----------------------------------------

TITLE: Installing Istio with Demo Profile
DESCRIPTION: Deploys Istio using the demo profile, which will use the configured CA certificates.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=demo

----------------------------------------

TITLE: Configuring Istio with Discovery Selectors
DESCRIPTION: Applies a YAML configuration to update the Istio installation with discovery selectors, restricting discovery to namespaces labeled with 'istio-discovery=enabled'.

LANGUAGE: bash
CODE:
$ istioctl install --skip-confirmation -f - <<EOF

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
namespace: istio-system
spec:
# You may override parts of meshconfig by uncommenting the following lines.
  meshConfig:
    discoverySelectors:
      - matchLabels:
          istio-discovery: enabled

LANGUAGE: bash
CODE:
EOF

----------------------------------------

TITLE: Creating a Kubernetes Cluster in Gardener using kubectl
DESCRIPTION: This command applies a prepared 'shoot' cluster manifest to create a Kubernetes cluster in Gardener. The manifest should be customized for your specific project and requirements.

LANGUAGE: bash
CODE:
$ kubectl apply --filename my-cluster.yaml

----------------------------------------

TITLE: Configuring HTTPRoute for Mesh Traffic
DESCRIPTION: Shows how to use the Gateway API to configure mesh traffic by adding a header to calls to an in-cluster Service.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: mesh
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: example
  rules:
  - filters:
    - type: RequestHeaderModifier
      requestHeaderModifier:
        add:
        - name: my-added-header
          value: added-value
    backendRefs:
    - name: example
      port: 80

----------------------------------------

TITLE: Configuring JWT Authentication Policy in Istio
DESCRIPTION: YAML configuration for creating a RequestAuthentication policy that accepts JWTs from 'testing@secure.istio.io' and copies claim 'foo' to header 'X-Jwt-Claim-Foo'

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: "jwt-example"
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "{{< github_file >}}/security/tools/jwt/samples/jwks.json"
    outputClaimToHeaders:
    - header: "x-jwt-claim-foo"
      claim: "foo"

----------------------------------------

TITLE: Creating Self-Signed Cluster Issuers for cert-manager
DESCRIPTION: Defines YAML configuration for creating self-signed cluster issuers 'istio-system', 'foo', and 'bar' for cert-manager.

LANGUAGE: yaml
CODE:
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-bar-issuer
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bar-ca
  namespace: cert-manager
spec:
  isCA: true
  commonName: bar
  secretName: bar-ca-selfsigned
  issuerRef:
    name: selfsigned-bar-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: bar
spec:
  ca:
    secretName: bar-ca-selfsigned
---
# Similar configurations for 'foo' and 'istio-system' issuers

----------------------------------------

TITLE: Configuring Istio ServiceEntry for HTTPS Proxy
DESCRIPTION: Creates an Istio ServiceEntry to enable TCP traffic to the external HTTPS proxy

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: proxy
spec:
  hosts:
  - my-company-proxy.com # ignored
  addresses:
  - $PROXY_IP/32
  ports:
  - number: $PROXY_PORT
    name: tcp
    protocol: TCP
  location: MESH_EXTERNAL
  resolution: NONE

----------------------------------------

TITLE: Configuring Namespace Label for Istio Revision in YAML
DESCRIPTION: This snippet demonstrates how to label a namespace to use a specific Istio revision. The 'istio.io/rev' label replaces the 'istio-injection=enabled' label when using revisions.

LANGUAGE: yaml
CODE:
metadata:
  labels:
    istio.io/rev: canary

----------------------------------------

TITLE: Scaling Reviews v2 Deployment
DESCRIPTION: Increase the number of v2 replicas to handle more traffic.

LANGUAGE: bash
CODE:
$ kubectl scale deployment reviews-v2 --replicas=3

----------------------------------------

TITLE: Deploying Curl Test Pod with Sidecar Injection
DESCRIPTION: Commands to deploy a test curl pod with automatic or manual sidecar injection enabled

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/curl/curl.yaml@

LANGUAGE: bash
CODE:
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@)

----------------------------------------

TITLE: Configuring Route Rules for Egress Traffic (Istio APIs)
DESCRIPTION: Sets up VirtualService rules to direct traffic through the Egress Gateway using Istio APIs.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: direct-cnn-through-egress-gateway
spec:
  hosts:
  - edition.cnn.com
  gateways:
  - istio-egressgateway
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: cnn
        port:
          number: 80
      weight: 100
  - match:
    - gateways:
      - istio-egressgateway
      port: 80
    route:
    - destination:
        host: edition.cnn.com
        port:
          number: 443
      weight: 100

----------------------------------------

TITLE: Testing Egress Traffic Routing in Istio
DESCRIPTION: Bash commands for deploying a test pod, executing curl requests to verify the egress traffic routing, and checking the logs of the egress gateway and sidecar proxy.

LANGUAGE: bash
CODE:
kubectl apply -f {{< github_file >}}/samples/sleep/sleep.yaml

export SOURCE_POD=$(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name})
export GATEWAY_POD=$(kubectl get pod -n istio-egress -l istio=egressgateway -o jsonpath={.items..metadata.name})

kubectl exec "$SOURCE_POD" -c sleep -- sh -c 'curl -s https://en.wikipedia.org/wiki/Main_Page | grep -o "<title>.*</title>"; curl -s https://de.wikipedia.org/wiki/Wikipedia:Hauptseite | grep -o "<title>.*</title>"'

kubectl exec "$SOURCE_POD" -c sleep -- sh -c 'curl -s https://cloud.ibm.com/login | grep -o "<title>.*</title>"'

kubectl logs -n istio-egress $GATEWAY_POD

kubectl logs $SOURCE_POD -c istio-proxy

----------------------------------------

TITLE: Configuring ProxyConfig for Custom Cert-Signers
DESCRIPTION: Creates ProxyConfig resources to define cert-signers for workloads in specific namespaces.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: ProxyConfig
metadata:
  name: barpc
  namespace: bar
spec:
  environmentVariables:
    ISTIO_META_CERT_SIGNER: bar

----------------------------------------

TITLE: Cleaning Up Ingress and httpbin Resources
DESCRIPTION: These bash commands show how to delete the Ingress configuration and shut down the httpbin service, cleaning up the resources created during the tutorial.

LANGUAGE: bash
CODE:
$ kubectl delete ingress ingress
$ kubectl delete --ignore-not-found=true -f @samples/httpbin/httpbin.yaml@

----------------------------------------

TITLE: Generating Istio Manifest with Default Revision
DESCRIPTION: This command generates an Istio manifest with the default revision set, which is necessary for creating the istiod-default-validator validating webhook configuration.

LANGUAGE: bash
CODE:
$ istioctl manifest generate --set values.defaultRevision=default

----------------------------------------

TITLE: Deploying Layer 4 Authorization Policy in Istio
DESCRIPTION: Creates an authorization policy that restricts access to the 'productpage' service, allowing calls only from the Bookinfo gateway's service account.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: productpage-ztunnel
  namespace: default
spec:
  selector:
    matchLabels:
      app: productpage
  action: ALLOW
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/default/sa/bookinfo-gateway-istio

----------------------------------------

TITLE: Testing Dry-Run Policy with Curl Requests
DESCRIPTION: Sends multiple requests to the '/headers' path to test the dry-run policy, including a header for Zipkin tracing.

LANGUAGE: bash
CODE:
$ for i in {1..20}; do kubectl exec "$(kubectl get pod -l app=curl -n foo -o jsonpath={.items..metadata.name})" -c curl -n foo -- curl http://httpbin.foo:8000/headers -H "X-B3-Sampled: 1" -s -o /dev/null -w "%{http_code}\n"; done

----------------------------------------

TITLE: Viewing Istiod XDS Resources
DESCRIPTION: Retrieves ztunnel proxy configuration resources from istiod's control plane.

LANGUAGE: bash
CODE:
$ export ISTIOD=$(kubectl get pods -n istio-system -l app=istiod -o=jsonpath='{.items[0].metadata.name}')
$ kubectl debug -it $ISTIOD -n istio-system --image=curlimages/curl -- curl localhost:15014/debug/config_dump?proxyID="$ZTUNNEL".istio-system

----------------------------------------

TITLE: Upgrading Istio CNI with Helm
DESCRIPTION: Helm command to upgrade an existing Istio CNI installation.

LANGUAGE: bash
CODE:
helm upgrade istio-cni istio/cni -n istio-system --wait

----------------------------------------

TITLE: Configuring Cluster-Local Traffic with MeshConfig
DESCRIPTION: YAML configurations showing different ways to enforce cluster-local traffic using MeshConfig.serviceSettings. Can be applied per-service, per-namespace, or globally.

LANGUAGE: yaml
CODE:
serviceSettings:
- settings:
    clusterLocal: true
  hosts:
  - "mysvc.myns.svc.cluster.local"

LANGUAGE: yaml
CODE:
serviceSettings:
- settings:
    clusterLocal: true
  hosts:
  - "*.myns.svc.cluster.local"

LANGUAGE: yaml
CODE:
serviceSettings:
- settings:
    clusterLocal: true
  hosts:
  - "*"

----------------------------------------

TITLE: Checking Ztunnel Proxy Logs for Traffic Redirection
DESCRIPTION: Command to inspect ztunnel proxy logs to verify traffic redirection functionality in ambient mode. The logs show inpod-related events including proxy initialization and pod handling.

LANGUAGE: bash
CODE:
kubectl logs ds/ztunnel -n istio-system  | grep inpod

----------------------------------------

TITLE: Configuring Service Entry and Destination Rule for Localhost
DESCRIPTION: Creates a ServiceEntry and DestinationRule for localhost to block traffic from inside the mesh to external services. This configuration is used to ensure Istio acts as a proxy between external applications and external services.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: localhost
spec:
  hosts:
  - localhost.local
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: tls
    protocol: TLS
  resolution: STATIC
  endpoints:
  - address: 127.0.0.1
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: localhost
spec:
  host: localhost.local
  trafficPolicy:
    tls:
      mode: DISABLE
      sni: localhost.local
EOF

----------------------------------------

TITLE: Checking Istio CLI Version
DESCRIPTION: Verifies the installation of istioctl by checking its version. This command will show that Istio is not yet installed in the cluster as there are no running pods in the istio-system namespace.

LANGUAGE: bash
CODE:
$ istioctl version
Istio is not present in the cluster: no running Istio pods in namespace "istio-system"
client version: {{< istio_full_version >}}

----------------------------------------

TITLE: Adding SDS Configuration to Kops Cluster
DESCRIPTION: Adds the necessary configuration to enable service account token projection volumes in the api-server for Istio Secret Discovery Service (SDS).

LANGUAGE: yaml
CODE:
kubeAPIServer:
    apiAudiences:
    - api
    - istio-ca
    serviceAccountIssuer: kubernetes.default.svc

----------------------------------------

TITLE: Cleanup Routing Rules
DESCRIPTION: Commands to remove the application routing rules and clean up the configurations.

LANGUAGE: bash
CODE:
$ kubectl delete -f samples/bookinfo/networking/virtual-service-all-v1.yaml

----------------------------------------

TITLE: Creating an Egress Gateway for edition.cnn.com (Istio APIs)
DESCRIPTION: Configures an Egress Gateway and DestinationRule for edition.cnn.com using Istio APIs.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: https-port-for-tls-origination
      protocol: HTTPS
    hosts:
    - edition.cnn.com
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: egressgateway-for-cnn
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: cnn
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      portLevelSettings:
      - port:
          number: 80
        tls:
          mode: ISTIO_MUTUAL
          sni: edition.cnn.com

----------------------------------------

TITLE: Setting Request Timeout for Reviews Service using Gateway API HTTPRoute
DESCRIPTION: This snippet demonstrates how to set a 0.5-second request timeout for calls to the reviews service using the Gateway API HTTPRoute.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - backendRefs:
    - name: reviews-v2
      port: 9080
    timeouts:
      request: 500ms
EOF

----------------------------------------

TITLE: Configuring X-Forwarded-For Header in Istio Ingress Gateway
DESCRIPTION: This EnvoyFilter configures the HTTP connection manager to enable X-Forwarded-For headers without any middle proxy. It sets skip_xff_append to false, use_remote_address to true, and xff_num_trusted_hops to 1.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingressgateway-settings
  namespace: istio-system
spec:
  configPatches:
  - applyTo: NETWORK_FILTER
    match:
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
    patch:
      operation: MERGE
      value:
        name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          skip_xff_append: false
          use_remote_address: true
          xff_num_trusted_hops: 1

----------------------------------------

TITLE: Installing Istio with Trusted Proxies Configuration
DESCRIPTION: Bash commands for creating and applying Istio configuration with numTrustedProxies set to 2.

LANGUAGE: bash
CODE:
$ cat <<EOF > topology.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      gatewayTopology:
        numTrustedProxies: 2
EOF
$ istioctl install -f topology.yaml

----------------------------------------

TITLE: Viewing Istio Sidecar Injector MutatingWebhookConfiguration
DESCRIPTION: This snippet demonstrates how to view the configuration of the Istio sidecar injector MutatingWebhookConfiguration, which is used for automatic sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"admissionregistration.k8s.io/v1beta1","kind":"MutatingWebhookConfiguration","metadata":{"annotations":{},"labels":{"app":"istio-sidecar-injector","chart":"sidecarInjectorWebhook-1.0.1","heritage":"Tiller","release":"istio-remote"},"name":"istio-sidecar-injector","namespace":""},"webhooks":[{"clientConfig":{"caBundle":"","service":{"name":"istio-sidecar-injector","namespace":"istio-system","path":"/inject"}},"failurePolicy":"Fail","name":"sidecar-injector.istio.io","namespaceSelector":{"matchLabels":{"istio-injection":"enabled"}},"rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["pods"]}]}]}
  creationTimestamp: 2018-12-10T08:40:15Z
  generation: 2
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.1
    heritage: Tiller
    release: istio-remote
  name: istio-sidecar-injector
  .....
webhooks:
- clientConfig:
    service:
      name: istio-sidecar-injector
      namespace: istio-system
      path: /inject
  name: sidecar-injector.istio.io
  namespaceSelector:
    matchLabels:
      istio-injection: enabled
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods

----------------------------------------

TITLE: Starting the Ratings Service
DESCRIPTION: Command to start the Node.js ratings service on port 9080.

LANGUAGE: bash
CODE:
$ npm start 9080
> @ start /tmp/ratings
> node ratings.js "9080"
Server listening on: http://0.0.0.0:9080

----------------------------------------

TITLE: Creating Namespace and Deploying Curl Sample
DESCRIPTION: Commands to create a namespace without Istio control and deploy a curl sample application.

LANGUAGE: bash
CODE:
$ kubectl create namespace without-istio
$ kubectl apply -f @samples/curl/curl.yaml@ -n without-istio

----------------------------------------

TITLE: SSH into Minikube VM in Bash
DESCRIPTION: Command to SSH into the minikube virtual machine. This is useful for monitoring resource usage.

LANGUAGE: bash
CODE:
$ minikube ssh

----------------------------------------

TITLE: Accessing SkyWalking Dashboard Commands
DESCRIPTION: Shell commands for accessing the SkyWalking dashboard and cleanup operations.

LANGUAGE: bash
CODE:
istioctl dashboard skywalking

LANGUAGE: bash
CODE:
killall istioctl

----------------------------------------

TITLE: Generating Client and Server Certificates
DESCRIPTION: Commands to generate client and server certificates for mutual TLS.

LANGUAGE: bash
CODE:
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=example Inc./CN=example.com' -keyout example.com.key -out example.com.crt

openssl req -out my-nginx.mesh-external.svc.cluster.local.csr -newkey rsa:2048 -nodes -keyout my-nginx.mesh-external.svc.cluster.local.key -subj "/CN=my-nginx.mesh-external.svc.cluster.local/O=some organization"
openssl x509 -req -sha256 -days 365 -CA example.com.crt -CAkey example.com.key -set_serial 0 -in my-nginx.mesh-external.svc.cluster.local.csr -out my-nginx.mesh-external.svc.cluster.local.crt

openssl req -out client.example.com.csr -newkey rsa:2048 -nodes -keyout client.example.com.key -subj "/CN=client.example.com/O=client organization"
openssl x509 -req -sha256 -days 365 -CA example.com.crt -CAkey example.com.key -set_serial 1 -in client.example.com.csr -out client.example.com.crt

----------------------------------------

TITLE: Viewing Istio Sidecar Injector MutatingWebhookConfiguration
DESCRIPTION: This snippet demonstrates how to view the configuration of the Istio sidecar injector MutatingWebhookConfiguration, which is used for automatic sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"admissionregistration.k8s.io/v1beta1","kind":"MutatingWebhookConfiguration","metadata":{"annotations":{},"labels":{"app":"istio-sidecar-injector","chart":"sidecarInjectorWebhook-1.0.1","heritage":"Tiller","release":"istio-remote"},"name":"istio-sidecar-injector","namespace":""},"webhooks":[{"clientConfig":{"caBundle":"","service":{"name":"istio-sidecar-injector","namespace":"istio-system","path":"/inject"}},"failurePolicy":"Fail","name":"sidecar-injector.istio.io","namespaceSelector":{"matchLabels":{"istio-injection":"enabled"}},"rules":[{"apiGroups":[""],"apiVersions":["v1"],"operations":["CREATE"],"resources":["pods"]}]}]}
  creationTimestamp: 2018-12-10T08:40:15Z
  generation: 2
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.1
    heritage: Tiller
    release: istio-remote
  name: istio-sidecar-injector
  .....
webhooks:
- clientConfig:
    service:
      name: istio-sidecar-injector
      namespace: istio-system
      path: /inject
  name: sidecar-injector.istio.io
  namespaceSelector:
    matchLabels:
      istio-injection: enabled
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods

----------------------------------------

TITLE: Creating Kubernetes Secret for NGINX Server Certificate
DESCRIPTION: Creates a Kubernetes Secret to hold the NGINX server's certificate and key.

LANGUAGE: bash
CODE:
$ kubectl create secret tls nginx-server-certs \
  --key example_certs/nginx.example.com.key \
  --cert example_certs/nginx.example.com.crt

----------------------------------------

TITLE: Configuring JWT Provider for Backend API Protection
DESCRIPTION: YAML configuration to define a JWT provider for securing backend applications and APIs

LANGUAGE: yaml
CODE:
apiVersion: "security.cloud.ibm.com/v1"
kind: JwtConfig
metadata:
    name: my-jwt-config
    namespace: sample-namespace
spec:
    jwksUrl: <the-jwks-url>

----------------------------------------

TITLE: Creating Kustomize Shell Script Bridge
DESCRIPTION: Creates a shell script that bridges Helm post-renderer with Kustomize by handling stdin/stdout operations.

LANGUAGE: bash
CODE:
#!/bin/sh
cat > base.yaml
exec kubectl kustomize

----------------------------------------

TITLE: Inspecting Envoy endpoints
DESCRIPTION: Use istioctl proxy-config endpoints to see the endpoints available for a cluster.

LANGUAGE: bash
CODE:
$ istioctl proxy-config endpoints productpage-v1-6c886ff494-7vxhs --cluster "outbound|9080||reviews.default.svc.cluster.local"

----------------------------------------

TITLE: Enabling RBAC Debugging for Ingress Gateway (Gateway API)
DESCRIPTION: Turns on RBAC debugging in Envoy for the Gateway API ingress gateway pods.

LANGUAGE: bash
CODE:
$ kubectl get pods -n foo -o name -l gateway.networking.k8s.io/gateway-name=httpbin-gateway | sed 's|pod/||' | while read -r pod; do istioctl proxy-config log "$pod" -n foo --level rbac:debug; done

----------------------------------------

TITLE: Creating Istio VirtualService with kubectl
DESCRIPTION: Applies an Istio VirtualService configuration that routes requests with /headers and /status prefixes to the httpbin service on port 8000. Uses kubectl with heredoc syntax to apply the configuration.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "*"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /headers
    - uri:
        prefix: /status
    route:
    - destination:
        port:
          number: 8000
        host: httpbin

LANGUAGE: bash
CODE:
EOF

----------------------------------------

TITLE: Configuring Istio Ingress Gateway with Huawei Cloud ELB in Kubernetes
DESCRIPTION: This snippet demonstrates how to create a Kubernetes Service of type LoadBalancer for the Istio ingress gateway, configuring it to use a Huawei Cloud Elastic Load Balancer (ELB). It sets the ELB instance ID and IP address, defines ports for various protocols, and applies the configuration using kubectl.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubernetes.io/elb.class: union
    kubernetes.io/elb.id: 4ee43d2b-cec5-4100-89eb-2f77837daa63 # ELB ID
    kubernetes.io/elb.lb-algorithm: ROUND_ROBIN
  labels:
    app: istio-ingressgateway
    install.operator.istio.io/owning-resource: unknown
    install.operator.istio.io/owning-resource-namespace: istio-system
    istio: ingressgateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    operator.istio.io/managed: Reconcile
    operator.istio.io/version: 1.9.0
    release: istio
  name: istio-ingressgateway
  namespace: istio-system
spec:
  clusterIP: 10.247.7.192
  externalTrafficPolicy: Cluster
  loadBalancerIP: 119.8.36.132     ## ELB EIP
  ports:
  - name: status-port
    nodePort: 32484
    port: 15021
    protocol: TCP
    targetPort: 15021
  - name: http2
    nodePort: 30294
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    nodePort: 31301
    port: 443
    protocol: TCP
    targetPort: 8443
  - name: tcp
    nodePort: 30229
    port: 31400
    protocol: TCP
    targetPort: 31400
  - name: tls
    nodePort: 32028
    port: 15443
    protocol: TCP
    targetPort: 15443
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  sessionAffinity: None
  type: LoadBalancer
EOF

----------------------------------------

TITLE: Viewing Istio Proxy Access Logs for httpbin Pod
DESCRIPTION: This bash command retrieves the access logs from the Istio proxy sidecar container in the httpbin pod.

LANGUAGE: bash
CODE:
$ kubectl logs -l app=httpbin -c istio-proxy

----------------------------------------

TITLE: Viewing Updated Istio Virtual Service Configuration
DESCRIPTION: This command retrieves and displays the updated Istio virtual service configuration for the ratings service, showing the injected abort fault.

LANGUAGE: bash
CODE:
$ kubectl get virtualservice ratings -o yaml

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
...
spec:
  hosts:
  - ratings
  http:
  - fault:
      abort:
        httpStatus: 500
        percentage:
          value: 100
    match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: ratings
        subset: v1
  - route:
    - destination:
        host: ratings
        subset: v1

----------------------------------------

TITLE: Cleaning Up Resources
DESCRIPTION: Removes the created namespace and request authentication resource.

LANGUAGE: bash
CODE:
$ kubectl delete namespace foo
$ kubectl delete requestauthentication ingress-jwt -n istio-system

----------------------------------------

TITLE: Deploying Sleep Service for Testing
DESCRIPTION: Command to deploy a sleep service in the default namespace for testing connectivity.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/sleep/sleep.yaml

----------------------------------------

TITLE: Configuring Service-Specific WasmPlugin
DESCRIPTION: YAML configuration for deploying a basic authentication WebAssembly plugin targeting a specific service (reviews).

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: basic-auth-for-service
spec:
  targetRefs:
    - kind: Service
      group: ""
      name: reviews
  url: oci://ghcr.io/istio-ecosystem/wasm-extensions/basic_auth:1.12.0
  phase: AUTHN
  pluginConfig:
    basic_auth_rules:
      - prefix: "/reviews"
        request_methods:
          - "GET"
          - "POST"
        credentials:
          - "ok:test"
          - "MXQtaW4zOmFkbWluMw=="

----------------------------------------

TITLE: Creating Dashboard Admin Access
DESCRIPTION: Sets up ServiceAccount and ClusterRoleBinding for Dashboard administration.

LANGUAGE: bash
CODE:
kubectl create serviceaccount -n kubernetes-dashboard admin-user
kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user

----------------------------------------

TITLE: Accessing Zipkin Dashboard and Cleanup Commands
DESCRIPTION: Commands for accessing the Zipkin dashboard via port-forwarding and cleaning up the Istio processes.

LANGUAGE: bash
CODE:
$ istioctl dashboard zipkin
$ killall istioctl

----------------------------------------

TITLE: Demonstrating Istio HTTP Load Balancing
DESCRIPTION: Shows how Istio's automatic HTTP traffic detection enables per-request load balancing, resulting in even distribution across all backend pods.

LANGUAGE: bash
CODE:
$ curl http://echo/{0..5} -s | grep Hostname
Hostname=echo-cb96f8d94-wf4xk
Hostname=echo-cb96f8d94-rpfqz
Hostname=echo-cb96f8d94-cgmxr
Hostname=echo-cb96f8d94-wf4xk
Hostname=echo-cb96f8d94-rpfqz
Hostname=echo-cb96f8d94-cgmxr

----------------------------------------

TITLE: Configuring Bookinfo to Use VM-based MySQL
DESCRIPTION: Apply Kubernetes configurations to deploy version 2 of the ratings service that uses the MySQL database on the VM, and create route rules to force the review service to use this new version.

LANGUAGE: bash
CODE:
$ kubectl apply -n bookinfo -f @samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql-vm.yaml@

LANGUAGE: bash
CODE:
$ kubectl apply -n bookinfo -f @samples/bookinfo/networking/virtual-service-ratings-mysql-vm.yaml@

----------------------------------------

TITLE: Adding Custom Tags from Environment Variables
DESCRIPTION: Shows configuration for adding custom tags based on environment variables in workload proxies.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
    - providers:
      - name: "zipkin"
      randomSamplingPercentage: 100.00
      customTags:
        "cluster_id":
          environment:
            name: ISTIO_META_CLUSTER_ID
            defaultValue: Kubernetes # optional

----------------------------------------

TITLE: Applying Namespace Configuration
DESCRIPTION: Bash command to apply the sample namespace configuration across all clusters in different regions and zones.

LANGUAGE: bash
CODE:
for CTX in "$CTX_PRIMARY" "$CTX_R1_Z1" "$CTX_R1_Z2" "$CTX_R2_Z3" "$CTX_R3_Z4"; \
  do \
    kubectl --context="$CTX" apply -f sample.yaml; \
  done

----------------------------------------

TITLE: Configuring L7 Gateway for Productpage
DESCRIPTION: Deploys a waypoint proxy for the productpage service using Kubernetes Gateway API to enable L7 traffic management.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
 name: productpage
 annotations:
   istio.io/service-account: bookinfo-productpage
spec:
 gatewayClassName: istio-mesh
EOF

----------------------------------------

TITLE: Starting Minikube Tunnel for Load Balancing in Bash
DESCRIPTION: Command to start the minikube tunnel feature, which provides a load balancer for use by Istio. This command blocks the terminal to output diagnostic information.

LANGUAGE: bash
CODE:
$ minikube tunnel

----------------------------------------

TITLE: Inspecting Dual Stack Listener Configuration
DESCRIPTION: Command to view the Istio proxy listener configuration for a dual stack service, showing multiple address bindings.

LANGUAGE: json
CODE:
        "name": "fd00:10:96::f9fc_9000",
        "address": {
            "socketAddress": {
                "address": "fd00:10:96::f9fc",
                "portValue": 9000
            }
        },
        "additionalAddresses": [
            {
                "address": {
                    "socketAddress": {
                        "address": "10.96.106.11",
                        "portValue": 9000
                    }
                }
            }
        ],

----------------------------------------

TITLE: Installing Istio with k3d Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the k3d platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.global.platform=k3d

----------------------------------------

TITLE: Installing Istio with OpenShift Profile
DESCRIPTION: This command installs Istio using the OpenShift profile, which is specifically tailored for OpenShift environments.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=openshift

----------------------------------------

TITLE: Creating IBM Cloud Kubernetes Cluster for Istio
DESCRIPTION: This command creates a standard Kubernetes cluster on IBM Cloud. It specifies the zone, machine type, number of workers, and cluster name. Replace <zone-name> and <cluster-name> with appropriate values.

LANGUAGE: bash
CODE:
$ ibmcloud ks cluster create classic --zone <zone-name> --machine-type b3c.4x16 \n      --workers 3 --name <cluster-name>

----------------------------------------

TITLE: Defining v1beta1 Istio Authorization Policies
DESCRIPTION: Example YAML definitions for v1beta1 Istio authorization policies migrated from v1alpha1 RBAC policies.

LANGUAGE: yaml
CODE:
# An AuthorizationPolicy that denies by default, migrated from the ClusterRbacConfig
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: default
  namespace: foo
spec:
  # An empty rule that allows nothing
  {}
---
# An AuthorizationPolicy that enforces to authorization for the httpbin workload, migrated from the ServiceRole and ServiceRoleBinding
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
      version: v1
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/foo/sa/sleep"]
    to:
    - operation:
        methods: ["GET"]

----------------------------------------

TITLE: Running KubeSphere Installation Script
DESCRIPTION: Command to execute the KubeSphere installation script which sets up a standard Kubernetes cluster.

LANGUAGE: bash
CODE:
$ ./install.sh

----------------------------------------

TITLE: Creating k3d Cluster with Traefik Disabled
DESCRIPTION: This bash command creates a k3d cluster with Traefik disabled to avoid conflicts with Istio's ingress gateways.

LANGUAGE: bash
CODE:
$ k3d cluster create --api-port 6550 -p '9080:80@loadbalancer' -p '9443:443@loadbalancer' --agents 2 --k3s-arg '--disable=traefik@server:*'

----------------------------------------

TITLE: Downloading IBM Cloud Kubernetes Cluster Configuration
DESCRIPTION: This command downloads the configuration for the specified Kubernetes cluster. Replace <cluster-name> with the name of your cluster.

LANGUAGE: bash
CODE:
$ ibmcloud ks cluster config --cluster <cluster-name>

----------------------------------------

TITLE: Disabling Probe Rewrite for HTTP in Istio
DESCRIPTION: Demonstrates how to disable Istio's HTTP probe rewrite for a specific deployment using pod annotations.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liveness-http
spec:
  selector:
    matchLabels:
      app: liveness-http
      version: v1
  template:
    metadata:
      labels:
        app: liveness-http
        version: v1
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
    spec:
      containers:
      - name: liveness-http
        image: docker.io/istio/health:example
        ports:
        - containerPort: 8001
        livenessProbe:
          httpGet:
            path: /foo
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5

----------------------------------------

TITLE: Inspecting Envoy cluster configuration
DESCRIPTION: Use istioctl proxy-config cluster to inspect the Envoy cluster configuration for a specific FQDN.

LANGUAGE: bash
CODE:
$ istioctl proxy-config cluster productpage-v1-6c886ff494-7vxhs --fqdn reviews.default.svc.cluster.local -o json

----------------------------------------

TITLE: Installing Istio with Minimal Profile
DESCRIPTION: Commands to download and install Istio with minimal profile for Gateway API implementation

LANGUAGE: bash
CODE:
curl -L https://istio.io/downloadIstio | sh -
cd istio-{{< istio_full_version >}}
./bin/istioctl install --set profile=minimal -y

----------------------------------------

TITLE: Installing Istio with K3s Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the K3s platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.global.platform=k3s

----------------------------------------

TITLE: KubeSphere Console Access Information
DESCRIPTION: Example console access information displayed after successful KubeSphere installation, showing the URL, admin account, and password generation notice.

LANGUAGE: plain
CODE:
#####################################################
###              Welcome to KubeSphere!           ###
#####################################################
Console: http://192.168.0.8:30880
Account: admin
Password: It will be generated by KubeSphere Installer

----------------------------------------

TITLE: Deleting a Gardener-managed Kubernetes Cluster
DESCRIPTION: These commands demonstrate how to delete a cluster managed by Gardener. First, an annotation is added to confirm deletion, then the shoot resource is deleted. This requires the Gardener project kubeconfig.

LANGUAGE: bash
CODE:
$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.garden.sapcloud.io/deletion=true

LANGUAGE: bash
CODE:
$ kubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project delete shoot my-cluster

----------------------------------------

TITLE: Configuring Allow Any Route for PassthroughCluster
DESCRIPTION: JSON configuration for the route that allows all traffic to pass through when the PassthroughCluster is active.

LANGUAGE: json
CODE:
{
  "name": "allow_any",
  "domains": [
    "*"
  ],
  "routes": [
    {
      "match": {
        "prefix": "/"
      },
      "route": {
        "cluster": "PassthroughCluster"
      }
    }
  ]
}

----------------------------------------

TITLE: Cleaning up Minikube Tunnel Network in Bash
DESCRIPTION: Command to force a proper cleanup of the minikube tunnel network if it's not cleaned up automatically.

LANGUAGE: bash
CODE:
$ minikube tunnel --cleanup

----------------------------------------

TITLE: Configuring DNS Proxying for Individual Pods in Istio
DESCRIPTION: This YAML snippet demonstrates how to enable DNS proxying for a specific pod using the proxy.istio.io/config annotation in a Kubernetes Deployment.

LANGUAGE: yaml
CODE:
kind: Deployment
metadata:
  name: curl
spec:
...
  template:
    metadata:
      annotations:
        proxy.istio.io/config: |
          proxyMetadata:
            ISTIO_META_DNS_CAPTURE: "true"
...

----------------------------------------

TITLE: Creating a Dual Stack KinD Cluster
DESCRIPTION: Command to create a Kubernetes in Docker (KinD) cluster with dual stack networking support.

LANGUAGE: bash
CODE:
$ kind create cluster --name istio-ds --config - <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  ipFamily: dual
EOF

----------------------------------------

TITLE: Installing Istio with Custom CNI Paths in K3s using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with custom CNI paths for K3s.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.cni.cniConfDir=/var/lib/rancher/k3s/agent/etc/cni/net.d --set values.cni.cniBinDir=/var/lib/rancher/k3s/data/current/bin/

----------------------------------------

TITLE: Adding Custom Tags with Literal Values
DESCRIPTION: Demonstrates adding custom tags to traces using static literal values via Telemetry API.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: "zipkin"
    randomSamplingPercentage: 100.00
    customTags:
      "provider":
        literal:
          value: "zipkin"

----------------------------------------

TITLE: Generating Certificate and Private Key for nginx.example.com
DESCRIPTION: Creates a certificate and private key for the nginx.example.com domain using OpenSSL.

LANGUAGE: bash
CODE:
$ openssl req -out example_certs/nginx.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs/nginx.example.com.key -subj "/CN=nginx.example.com/O=some organization"
$ openssl x509 -req -sha256 -days 365 -CA example_certs/example.com.crt -CAkey example_certs/example.com.key -set_serial 0 -in example_certs/nginx.example.com.csr -out example_certs/nginx.example.com.crt

----------------------------------------

TITLE: Configuring Block All Route for BlackHoleCluster
DESCRIPTION: JSON configuration for the route that blocks all traffic using a direct response when the BlackHoleCluster is active.

LANGUAGE: json
CODE:
{
  "name": "block_all",
  "domains": [
    "*"
  ],
  "routes": [
    {
      "match": {
        "prefix": "/"
      },
      "directResponse": {
        "status": 502
      }
    }
  ]
}

----------------------------------------

TITLE: Listing Kind Clusters
DESCRIPTION: Displays all available Kind clusters in the system.

LANGUAGE: bash
CODE:
kind get clusters

----------------------------------------

TITLE: Analyzing Proxy Configuration
DESCRIPTION: Retrieves and analyzes cluster configuration from the Envoy proxy.

LANGUAGE: bash
CODE:
curl -s localhost:15000/config_dump | istioctl proxy-config clusters --file -

----------------------------------------

TITLE: Checking Pod Status
DESCRIPTION: Display status of all pods in the system to monitor health and restart counts after chaos testing.

LANGUAGE: bash
CODE:
kubectl get pods

----------------------------------------

TITLE: Installing Istio with GKE Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the GKE platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.global.platform=gke

----------------------------------------

TITLE: Configuring Istio for External TCP Services without VIPs
DESCRIPTION: This bash snippet applies an IstioOperator configuration to enable DNS proxying and configure discoverySelectors for handling external TCP services without VIPs.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    defaultConfig:
      proxyMetadata:
        # Enable basic DNS proxying
        ISTIO_META_DNS_CAPTURE: "true"
    # discoverySelectors configuration below is just used for simulating the external service TCP scenario,
    # so that we do not have to use an external site for testing.
    discoverySelectors:
    - matchLabels:
        istio-injection: enabled
EOF

----------------------------------------

TITLE: Verifying Prometheus Service Status in Kubernetes
DESCRIPTION: Command to check if the Prometheus service is running in the Istio system namespace

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get svc prometheus

----------------------------------------

TITLE: Creating ResourceQuota for Node-Critical Pods in GKE
DESCRIPTION: This YAML snippet creates a ResourceQuota in the istio-system namespace to allow system-node-critical pods in GKE environments.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: gcp-critical-pods
  namespace: istio-system
spec:
  hard:
    pods: 1000
  scopeSelector:
    matchExpressions:
    - operator: In
      scopeName: PriorityClass
      values:
      - system-node-critical

----------------------------------------

TITLE: Cleaning Up Telemetry Addon Configurations in Istio
DESCRIPTION: These commands remove all Gateways, VirtualServices, and DestinationRules created for telemetry addons in Istio.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system delete gateway grafana-gateway kiali-gateway prometheus-gateway tracing-gateway

LANGUAGE: bash
CODE:
$ kubectl -n istio-system delete virtualservice grafana-vs kiali-vs prometheus-vs tracing-vs

LANGUAGE: bash
CODE:
$ kubectl -n istio-system delete destinationrule grafana kiali prometheus tracing

----------------------------------------

TITLE: Configuring ClusterIssuer for Let's Encrypt
DESCRIPTION: Creates a cluster-wide certificate issuer using Let's Encrypt with DNS01 challenge through Route53 provider.

LANGUAGE: yaml
CODE:
apiVersion: certmanager.k8s.io/v1alpha1
kind: ClusterIssuer
metadata:
  name: letsencrypt-demo
  namespace: kube-system
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: <REDACTED>
    privateKeySecretRef:
      name: letsencrypt-demo
    dns01:
      providers:
      - name: your-dns
        route53:
          accessKeyID: <REDACTED>
          region: eu-central-1
          secretAccessKeySecretRef:
            name: prod-route53-credentials-secret
            key: secret-access-key

----------------------------------------

TITLE: Defining Basic Front Matter in YAML for Istio Documentation
DESCRIPTION: This snippet demonstrates the basic structure of front matter for Istio documentation pages. It includes required fields such as title, description, weight, keywords, and aliases.

LANGUAGE: yaml
CODE:
---
title: <title>
description: <description>
weight: <weight>
keywords: [<keyword1>,<keyword2>,...]
aliases:
    - <previously-published-at-this-URL>
---

----------------------------------------

TITLE: Reviewing Firewall Rules for Private GKE Clusters in Bash
DESCRIPTION: This snippet lists firewall rules for master access in a private GKE cluster. It filters the rules based on the cluster name.

LANGUAGE: bash
CODE:
$ gcloud compute firewall-rules list --filter="name~gke-${CLUSTER_NAME}-[0-9a-z]*-master"

----------------------------------------

TITLE: Configuring Prometheus TLS settings for secure scraping
DESCRIPTION: YAML configuration for Prometheus TLS settings to enable secure scraping of metrics using Istio certificates.

LANGUAGE: yaml
CODE:
scheme: https
tls_config:
  ca_file: /etc/prom-certs/root-cert.pem
  cert_file: /etc/prom-certs/cert-chain.pem
  key_file: /etc/prom-certs/key.pem
  insecure_skip_verify: true  # Prometheus does not support Istio security naming, thus skip verifying target pod certificate

----------------------------------------

TITLE: Verifying Dual Stack Traffic
DESCRIPTION: Commands to test connectivity to dual stack, IPv4, and IPv6 services using the sleep pod.

LANGUAGE: bash
CODE:
$ kubectl exec -it "$(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}')" -- sh -c "echo dualstack | nc tcp-echo.dual-stack 9000"
$ kubectl exec -it "$(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}')" -- sh -c "echo ipv4 | nc tcp-echo.ipv4 9000"
$ kubectl exec -it "$(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}')" -- sh -c "echo ipv6 | nc tcp-echo.ipv6 9000"

----------------------------------------

TITLE: Removing Istio System Namespace
DESCRIPTION: This command removes the Istio system namespace (istio-system) after uninstalling Istio, if it's no longer needed.

LANGUAGE: bash
CODE:
$ kubectl delete namespace istio-system

----------------------------------------

TITLE: Generating Root Certificate and Private Key with OpenSSL
DESCRIPTION: Creates a root certificate and private key for signing service certificates using OpenSSL.

LANGUAGE: bash
CODE:
$ mkdir example_certs
$ openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=example Inc./CN=example.com' -keyout example_certs/example.com.key -out example_certs/example.com.crt

----------------------------------------

TITLE: Checking Pod ENI Trunking in EKS
DESCRIPTION: This bash command checks if pod ENI trunking is enabled in an EKS cluster.

LANGUAGE: bash
CODE:
$ kubectl set env daemonset aws-node -n kube-system --list | grep ENABLE_POD_ENI

----------------------------------------

TITLE: Sample Metric for PassthroughCluster HTTP Traffic
DESCRIPTION: Example of the istio_requests_total metric emitted when HTTP traffic passes through the PassthroughCluster.

LANGUAGE: json
CODE:
{
  "metric": {
    "__name__": "istio_requests_total",
    "connection_security_policy": "unknown",
    "destination_app": "unknown",
    "destination_principal": "unknown",
    "destination_service": "httpbin.org",
    "destination_service_name": "PassthroughCluster",
    "destination_service_namespace": "unknown",
    "destination_version": "unknown",
    "destination_workload": "unknown",
    "destination_workload_namespace": "unknown",
    "instance": "100.96.2.183:42422",
    "job": "istio-mesh",
    "permissive_response_code": "none",
    "permissive_response_policyid": "none",
    "reporter": "source",
    "request_protocol": "http",
    "response_code": "200",
    "response_flags": "-",
    "source_app": "sleep",
    "source_principal": "unknown",
    "source_version": "unknown",
    "source_workload": "sleep",
    "source_workload_namespace": "default"
  },
  "value": [
    1567033080.282,
    "1"
  ]
}

----------------------------------------

TITLE: Setting MySQL database environment variables
DESCRIPTION: Sets environment variables for the MySQL database host and port.

LANGUAGE: bash
CODE:
$ export MYSQL_DB_HOST=<your MySQL database host>
$ export MYSQL_DB_PORT=<your MySQL database port>

----------------------------------------

TITLE: Verifying Header Modification
DESCRIPTION: Accesses the /headers endpoint to verify that the custom header has been added to the request.

LANGUAGE: bash
CODE:
$ curl -s -HHost:httpbin.example.com "http://$INGRESS_HOST/headers" | jq '.headers["My-Added-Header"][0]'

----------------------------------------

TITLE: Installing Istio with OpenShift Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the OpenShift platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=openshift-ambient --skip-confirmation

----------------------------------------

TITLE: Configuring Access Logs in Istio Mesh Config
DESCRIPTION: This YAML snippet shows how to enable access logging by modifying the Istio Operator configuration. It sets the access log file to stdout and can be customized further with encoding and format options.

LANGUAGE: yaml
CODE:
spec:
  meshConfig:
    accessLogFile: /dev/stdout

----------------------------------------

TITLE: Uninstalling OpenTelemetry Collector
DESCRIPTION: These bash commands uninstall the OpenTelemetry Collector and remove the observability namespace.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/open-telemetry/otel.yaml@ -n observability
$ kubectl delete namespace observability

----------------------------------------

TITLE: Installing Kiali and other addons
DESCRIPTION: Installs Kiali dashboard and other telemetry addons for monitoring and visualizing the service mesh.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/addons
$ kubectl rollout status deployment/kiali -n istio-system

----------------------------------------

TITLE: Installing ZooKeeper with Helm
DESCRIPTION: Commands to install ZooKeeper using Bitnami Helm charts and deploy a sleep pod for testing.

LANGUAGE: bash
CODE:
$ helm repo add bitnami https://charts.bitnami.com/bitnami
$ helm install my-release bitnami/zookeeper --set replicaCount=3
$ kubectl apply -f {{< github_file >}}/samples/sleep/sleep.yaml

----------------------------------------

TITLE: Installing Istiod Control Plane
DESCRIPTION: Command to install Istiod control plane component with ambient profile.

LANGUAGE: bash
CODE:
$ helm install istiod istio/istiod --namespace istio-system --set profile=ambient --wait

----------------------------------------

TITLE: Installing and Configuring MySQL on VM
DESCRIPTION: Install MariaDB on the VM, configure it to accept connections from any IP, and set up root authentication. This prepares the MySQL database to be used as a backend for the Bookinfo ratings service.

LANGUAGE: bash
CODE:
$ sudo apt-get update && sudo apt-get install -y mariadb-server
$ sudo sed -i '/bind-address/c\bind-address  = 0.0.0.0' /etc/mysql/mariadb.conf.d/50-server.cnf

LANGUAGE: bash
CODE:
$ cat <<EOF | sudo mysql
# Grant access to root
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;
# Grant root access to other IPs
CREATE USER 'root'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
quit;
EOF
$ sudo systemctl restart mysql

----------------------------------------

TITLE: Deploying Example Workload with SPIRE Integration
DESCRIPTION: Deploys an example workload (curl) with Istio sidecar and SPIRE integration.

LANGUAGE: bash
CODE:
$ istioctl kube-inject --filename @samples/security/spire/curl-spire.yaml@ | kubectl apply -f -

----------------------------------------

TITLE: Disabling REQUEST_COUNT Metrics for Client
DESCRIPTION: This Telemetry configuration disables the REQUEST_COUNT metric for client mode only.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: remove-client
  namespace: istio-system
spec:
  metrics:
    - providers:
        - name: prometheus
      overrides:
        - disabled: true
          match:
            mode: CLIENT
            metric: REQUEST_COUNT

----------------------------------------

TITLE: Defining Pod with Init Container Traffic Check
DESCRIPTION: YAML configuration for a pod that tests network traffic through an init container with Istio sidecar.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: sleep
spec:
  initContainers:
  - name: check-traffic
    image: istio/base
    command:
    - curl
    - httpbin.org/get
  containers:
  - name: sleep
    image: istio/base
    command: ["/bin/sleep", "infinity"]

----------------------------------------

TITLE: WorkloadEntry and ServiceEntry Integration
DESCRIPTION: Example showing how to create a WorkloadEntry for a VM and connect it to a ServiceEntry using workload selectors.

LANGUAGE: yaml
CODE:
---
apiVersion: networking.istio.io/v1alpha3
kind: WorkloadEntry
metadata:
  name: vm1
  namespace: ns1
spec:
  address: 1.1.1.1
  labels:
    app: foo
    instance-id: vm-78ad2
    class: vm
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: svc1
  namespace: ns1
spec:
  hosts:
  - svc1.internal.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: STATIC
  workloadSelector:
    labels:
      app: foo

----------------------------------------

TITLE: Viewing Istio Virtual Service Configuration
DESCRIPTION: This command retrieves and displays the Istio virtual service configuration for the ratings service, showing the injected delay fault.

LANGUAGE: bash
CODE:
$ kubectl get virtualservice ratings -o yaml

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
...
spec:
  hosts:
  - ratings
  http:
  - fault:
      delay:
        fixedDelay: 7s
        percentage:
          value: 100
    match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: ratings
        subset: v1
  - route:
    - destination:
        host: ratings
        subset: v1

----------------------------------------

TITLE: Configuring NGINX for Envoy Compatibility
DESCRIPTION: NGINX configuration to set HTTP version to 1.1 for compatibility with Envoy.

LANGUAGE: plain
CODE:
upstream http_backend {
    server 127.0.0.1:8080;

    keepalive 16;
}

server {
    ...

    location /http/ {
        proxy_pass http://http_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        ...
    }
}

----------------------------------------

TITLE: Building Docker Image for Ratings Service
DESCRIPTION: This command builds a Docker image from the Dockerfile, tagging it with the user's ID.

LANGUAGE: bash
CODE:
$ docker build -t $USER/ratings .

----------------------------------------

TITLE: Installing Kiali using Istio Sample Configuration
DESCRIPTION: Deploys Kiali to the cluster using Istio's basic sample installation YAML. This method is intended for demonstration purposes and is not optimized for production use.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/addons/kiali.yaml

----------------------------------------

TITLE: Creating Azure resource group and AKS cluster
DESCRIPTION: These commands create a new Azure resource group and deploy an AKS cluster with specified parameters such as name, location, node count, and Kubernetes version.

LANGUAGE: bash
CODE:
$ az group create --name myResourceGroup --location "my location"
$ az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 3 --kubernetes-version 1.28.3 --generate-ssh-keys

----------------------------------------

TITLE: Response-Based Classification Configuration in YAML
DESCRIPTION: YAML configuration for classifying response codes using the istio.attributegen plugin. Groups response codes into categories like 2xx, 3xx, etc.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: istio-attributegen-filter
spec:
  selector:
    matchLabels:
      app: productpage
  url: https://storage.googleapis.com/istio-build/proxy/attributegen-359dcd3a19f109c50e97517fe6b1e2676e870c4d.wasm
  imagePullPolicy: Always
  phase: AUTHN
  pluginConfig:
    attributes:
      - output_attribute: istio_responseClass
        match:
          - value: 2xx
            condition: response.code >= 200 && response.code <= 299
          - value: 3xx
            condition: response.code >= 300 && response.code <= 399
          - value: "404"
            condition: response.code == 404
          - value: "429"
            condition: response.code == 429
          - value: "503"
            condition: response.code == 503
          - value: 5xx
            condition: response.code >= 500 && response.code <= 599
          - value: 4xx
            condition: response.code >= 400 && response.code <= 499
---
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: custom-tags
spec:
  metrics:
    - overrides:
        - match:
            metric: REQUEST_COUNT
            mode: CLIENT_AND_SERVER
          tagOverrides:
            response_code:
              value: filter_state['wasm.istio_responseClass']
      providers:
        - name: prometheus

----------------------------------------

TITLE: Performing Rolling Update on Kops Cluster
DESCRIPTION: Initiates a rolling update of the Kops-managed Kubernetes cluster to apply the configuration changes.

LANGUAGE: bash
CODE:
$ kops rolling-update cluster
$ kops rolling-update cluster --yes

----------------------------------------

TITLE: Setting up Egress Gateway with SNI Proxy
DESCRIPTION: Deploys a custom egress gateway with an Nginx SNI proxy to handle wildcarded domains.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./sni-proxy.conf
user www-data;

events {
}

stream {
  log_format log_stream '\$remote_addr [\$time_local] \$protocol [\$ssl_preread_server_name]'
  '\$status \$bytes_sent \$bytes_received \$session_time';

  access_log /var/log/nginx/access.log log_stream;
  error_log  /var/log/nginx/error.log;

  # tcp forward proxy by SNI
  server {
    resolver 8.8.8.8 ipv6=off;
    listen       127.0.0.1:$MONGODB_PORT;
    proxy_pass   \$ssl_preread_server_name:$MONGODB_PORT;
    ssl_preread  on;
  }
}
EOF

$ kubectl create configmap egress-sni-proxy-configmap -n istio-system --from-file=nginx.conf=./sni-proxy.conf

----------------------------------------

TITLE: Validating Webhook Configuration Check in Kubernetes
DESCRIPTION: Command and YAML output showing how to check the validation webhook configuration in Kubernetes. Shows the complete webhook configuration including admission rules, client config, and failure policies.

LANGUAGE: bash/yaml
CODE:
$ kubectl get validatingwebhookconfiguration istio-validator-istio-system -o yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app: istiod
    install.operator.istio.io/owning-resource-namespace: istio-system
    istio: istiod
    istio.io/rev: default
    operator.istio.io/component: Pilot
    operator.istio.io/managed: Reconcile
    operator.istio.io/version: unknown
    release: istio
  name: istio-validator-istio-system
  resourceVersion: "615569"
  uid: 112fed62-93e7-41c9-8cb1-b2665f392dd7
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    caBundle: LS0t...
    service:
      name: istiod
      namespace: istio-system
      path: /validate
      port: 443
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: rev.validation.istio.io
  namespaceSelector: {}
  objectSelector:
    matchExpressions:
    - key: istio.io/rev
      operator: In
      values:
      - default
  rules:
  - apiGroups:
    - security.istio.io
    - networking.istio.io
    - telemetry.istio.io
    - extensions.istio.io
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - '*'
    scope: '*'
  sideEffects: None
  timeoutSeconds: 10

----------------------------------------

TITLE: Configuring HTTPS Gateway in Istio
DESCRIPTION: Example of configuring an HTTPS gateway to allow external traffic for bookinfo.com into the service mesh, including TLS certificate configuration.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: bookinfo-gateway
spec:
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - bookinfo.com
    tls:
      mode: SIMPLE
      serverCertificate: /tmp/tls.crt
      privateKey: /tmp/tls.key

----------------------------------------

TITLE: Applying and Verifying Traffic Rules
DESCRIPTION: Commands to apply and verify virtual service configurations for traffic routing.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
$ export REVIEWS_V1_POD=$(kubectl get pod -l app=reviews,version=v1 -o jsonpath='{.items[0].metadata.name}')
$ istioctl x describe pod $REVIEWS_V1_POD

----------------------------------------

TITLE: Removing Waypoint Proxies in Istio
DESCRIPTION: Commands to remove the waypoint proxy label from the default namespace and delete all waypoint proxies using istioctl.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio.io/use-waypoint-
$ istioctl waypoint delete --all

----------------------------------------

TITLE: Viewing Ztunnel Workload Configuration
DESCRIPTION: Uses istioctl to display all workloads and control plane components tracked by ztunnel, including IP addresses, protocols, and waypoint proxy associations.

LANGUAGE: bash
CODE:
$ istioctl ztunnel-config workloads

----------------------------------------

TITLE: Comparing Docker Container Date with Host Date
DESCRIPTION: This snippet demonstrates how to check for time skew between a Docker container and the host machine, which can cause issues with trace visibility in Zipkin.

LANGUAGE: bash
CODE:
$ docker run --entrypoint date gcr.io/istio-testing/ubuntu-16-04-slave:latest
Sun Jun 11 11:44:18 UTC 2017

LANGUAGE: bash
CODE:
$ date -u
Thu Jun 15 02:25:42 UTC 2017

----------------------------------------

TITLE: Creating TLS Secret for Istio Gateway using kubectl
DESCRIPTION: This command creates a new TLS secret for use with an Istio Gateway. It specifies the secret name, certificate file, private key file, and namespace where the Gateway workload is running.

LANGUAGE: bash
CODE:
$ kubectl create secret tls my-tls-secret --cert=path/to/cert.pem --key=path/to/key.pem -n <namespace>

----------------------------------------

TITLE: Creating OKE Cluster with OCI CLI
DESCRIPTION: This command creates a new Oracle Container Engine for Kubernetes (OKE) cluster using the OCI CLI. It requires specifying the cluster name, Kubernetes version, compartment OCID, and VCN OCID.

LANGUAGE: bash
CODE:
$ oci ce cluster create \
      --name <oke-cluster-name> \
      --kubernetes-version <kubernetes-version> \
      --compartment-id <compartment-ocid> \
      --vcn-id <vcn-ocid>

----------------------------------------

TITLE: Load Testing Reviews Service
DESCRIPTION: Perform basic load testing by sending 10 consecutive requests to the service.

LANGUAGE: bash
CODE:
$ kubectl exec $(kubectl get pod -l app=curl -o jsonpath='{.items[0].metadata.name}') -- sh -c "for i in 1 2 3 4 5 6 7 8 9 10; do curl -o /dev/null -s -w '%{http_code}\n' $REVIEWS_V2_POD_IP:9080/reviews/7; done"

----------------------------------------

TITLE: Collecting Istio System ConfigMaps
DESCRIPTION: Command to export all ConfigMaps from the istio-system namespace.

LANGUAGE: bash
CODE:
kubectl --namespace istio-system get cm -o yaml

----------------------------------------

TITLE: Verifying Application-Control Plane Mapping
DESCRIPTION: Uses istioctl to confirm that application workloads are managed by their respective control planes based on namespace labels.

LANGUAGE: bash
CODE:
$ istioctl ps -i usergroup-1
$ istioctl ps -i usergroup-2

----------------------------------------

TITLE: Downloading Dockerfile for Ratings Microservice
DESCRIPTION: This command downloads the Dockerfile for the ratings microservice from a GitHub repository.

LANGUAGE: bash
CODE:
$ curl -s {{< github_file >}}/samples/bookinfo/src/ratings/Dockerfile -o Dockerfile

----------------------------------------

TITLE: Calculating Request Rate for Reviews Microservice with Prometheus
DESCRIPTION: This query calculates the rate of requests over the past 5 minutes for all instances of the 'reviews' microservice using the istio_requests_total metric. It uses the rate function and filters for the destination service namespace, reporter, and service name.

LANGUAGE: plain
CODE:
rate(istio_requests_total{destination_service_namespace="tutorial", reporter="destination",destination_service_name="reviews"}[5m])

----------------------------------------

TITLE: Deploying Kubernetes Dashboard
DESCRIPTION: Installs the Kubernetes Dashboard UI for cluster visualization and management.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

----------------------------------------

TITLE: Configuring Kubeconfig for OKE Cluster Access
DESCRIPTION: This command sets up or updates the kubeconfig file for accessing the OKE cluster. It generates a short-lived authentication token and allows specifying the endpoint type (public or private).

LANGUAGE: bash
CODE:
$ oci ce cluster create-kubeconfig \
      --cluster-id <cluster-ocid> \
      --file $HOME/.kube/config  \
      --token-version 2.0.0 \
      --kube-endpoint [PRIVATE_ENDPOINT|PUBLIC_ENDPOINT]

----------------------------------------

TITLE: Installing Istio CNI with K3s Platform Profile using Helm
DESCRIPTION: This bash command installs Istio CNI using Helm with the K3s platform profile.

LANGUAGE: bash
CODE:
$ helm install istio-cni istio/cni -n istio-system --set profile=ambient --set global.platform=k3s --wait

----------------------------------------

TITLE: Editing Kops Cluster Configuration
DESCRIPTION: Opens the configuration file for a Kops-managed Kubernetes cluster for editing.

LANGUAGE: bash
CODE:
$ kops edit cluster $YOURCLUSTER

----------------------------------------

TITLE: Configuring Egress Gateway for MongoDB
DESCRIPTION: Sets up an Istio egress gateway to handle MongoDB traffic, including Gateway, DestinationRule, and VirtualService resources.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: $EGRESS_GATEWAY_MONGODB_PORT
      name: tcp
      protocol: TCP
    hosts:
    - my-mongo.tcp.svc
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-mongo
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: mongo
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-mongo-through-egress-gateway
spec:
  hosts:
  - my-mongo.tcp.svc
  gateways:
  - mesh
  - istio-egressgateway
  tcp:
  - match:
    - gateways:
      - mesh
      destinationSubnets:
      - $MONGODB_IP/32
      port: $MONGODB_PORT
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: mongo
        port:
          number: $EGRESS_GATEWAY_MONGODB_PORT
  - match:
    - gateways:
      - istio-egressgateway
      port: $EGRESS_GATEWAY_MONGODB_PORT
    route:
    - destination:
        host: my-mongo.tcp.svc
        port:
          number: $MONGODB_PORT
      weight: 100

----------------------------------------

TITLE: Cleanup Command
DESCRIPTION: Command to terminate all running istioctl processes

LANGUAGE: bash
CODE:
$ killall istioctl

----------------------------------------

TITLE: Cleaning Up Bookinfo Application
DESCRIPTION: Runs a cleanup script to uninstall and remove the Bookinfo sample application from the cluster.

LANGUAGE: bash
CODE:
$ @samples/bookinfo/platform/kube/cleanup.sh@

----------------------------------------

TITLE: Verifying Pod Mesh Status
DESCRIPTION: Commands to check if a pod is part of the service mesh by examining its Envoy sidecar status.

LANGUAGE: bash
CODE:
$ export KUBE_POD=$(kubectl -n kube-system get pod -l k8s-app=kube-dns -o jsonpath='{.items[0].metadata.name}')
$ istioctl x describe pod -n kube-system $KUBE_POD

----------------------------------------

TITLE: Installing Istioctl with Curl in Bash
DESCRIPTION: Downloads and installs the latest release of istioctl using curl, then adds it to the system PATH.

LANGUAGE: bash
CODE:
$ curl -sL https://istio.io/downloadIstioctl | sh -

LANGUAGE: bash
CODE:
$ export PATH=$HOME/.istioctl/bin:$PATH

----------------------------------------

TITLE: Granting Service Role to Authenticated Client in Istio
DESCRIPTION: This YAML configuration creates a ServiceRoleBinding that grants the 'book-reader' role to the 'bookstore-frontend' service, identified by its service account. It shows how to use authenticated client identities in Istio authorization policies.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: default
spec:
  subjects:
  - user: "cluster.local/ns/default/sa/bookstore-frontend"
  roleRef:
    kind: ServiceRole
    name: "book-reader"

----------------------------------------

TITLE: Routing Requests to Reviews Service v2 using Istio VirtualService
DESCRIPTION: This snippet demonstrates how to create a VirtualService to route all requests to version 2 of the reviews service using Istio APIs.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
EOF

----------------------------------------

TITLE: Deploying httpbin-v2 Service in Kubernetes
DESCRIPTION: Kubernetes deployment configuration for version 2 of the httpbin service with access logging enabled.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v2
  template:
    metadata:
      labels:
        app: httpbin
        version: v2
    spec:
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        command: ["gunicorn", "--access-logfile", "-", "-b", "0.0.0.0:80", "httpbin:app"]
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Launching Kiali Dashboard
DESCRIPTION: Opens the Kiali dashboard for visualizing the service mesh topology and metrics.

LANGUAGE: bash
CODE:
istioctl dashboard kiali

----------------------------------------

TITLE: Verifying Istio Gateway Creation
DESCRIPTION: Checks if the Istio Gateway for the Bookinfo application has been successfully created.

LANGUAGE: bash
CODE:
$ kubectl get gateway

----------------------------------------

TITLE: Querying Requests to Reviews Microservice with Prometheus
DESCRIPTION: This query retrieves requests specifically for the 'reviews' microservice in the specified namespace using the istio_requests_total metric. It filters for the destination service namespace, reporter, and service name.

LANGUAGE: plain
CODE:
istio_requests_total{destination_service_namespace="tutorial", reporter="destination",destination_service_name="reviews"}

----------------------------------------

TITLE: Listing Revision Tags in Istio
DESCRIPTION: Command to list all revision tags and their associated namespaces in the Istio mesh

LANGUAGE: bash
CODE:
$ istioctl x revision tag list

----------------------------------------

TITLE: Viewing Kubernetes Contexts
DESCRIPTION: Shows all available Kubernetes contexts including the newly created Kind cluster.

LANGUAGE: bash
CODE:
kubectl config get-contexts

----------------------------------------

TITLE: Updating Firewall Rules for Private GKE Clusters in Bash
DESCRIPTION: This snippet updates an existing firewall rule to allow master access on specific ports (10250, 443, 15017) for a private GKE cluster.

LANGUAGE: bash
CODE:
$ gcloud compute firewall-rules update <firewall-rule-name> --allow tcp:10250,tcp:443,tcp:15017

----------------------------------------

TITLE: Decommissioning Old Version
DESCRIPTION: Remove the old version (v1) of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl delete deployment reviews-v1

----------------------------------------

TITLE: Istio Version Naming Format
DESCRIPTION: Defines the version numbering format used for Istio releases, consisting of major, minor and patch version numbers.

LANGUAGE: plaintext
CODE:
<major>.<minor>.<patch>

----------------------------------------

TITLE: Deploying Bookinfo Sample Application
DESCRIPTION: Commands to deploy the Bookinfo sample application and verify its services and pods are running correctly.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@
$ kubectl get services
$ kubectl get pods

----------------------------------------

TITLE: Configuring Robots.txt for Istio Website
DESCRIPTION: This snippet defines the robots.txt configuration for the Istio project website. It allows all user agents to access all pages and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.5/sitemap.xml

----------------------------------------

TITLE: Using tcpdump for Traffic Analysis
DESCRIPTION: Commands to capture and analyze encrypted traffic using tcpdump, either directly on worker nodes or using a netshoot container.

LANGUAGE: bash
CODE:
$ tcpdump -nAi eth0 port 9080 or port 15008

LANGUAGE: bash
CODE:
$ POD=$(kubectl get pods -l app=details -o jsonpath="{.items[0].metadata.name}")
$ kubectl debug $POD -i --image=nicolaka/netshoot -- tcpdump -nAi eth0 port 9080 or port 15008

----------------------------------------

TITLE: Enabling Istio in MicroK8s
DESCRIPTION: This command enables Istio within the MicroK8s environment. After running this, you will be prompted to choose whether to enforce mutual TLS authentication among sidecars.

LANGUAGE: bash
CODE:
$ microk8s.enable istio

----------------------------------------

TITLE: Gathering Cluster Network Information in Bash
DESCRIPTION: This snippet defines functions and gathers information about cluster CIDRs and network tags for multi-cluster communication setup.

LANGUAGE: bash
CODE:
$ function join_by { local IFS="$1"; shift; echo "$*"; }
$ ALL_CLUSTER_CIDRS=$(gcloud --project $PROJECT_ID container clusters list --format='value(clusterIpv4Cidr)' | sort | uniq)
$ ALL_CLUSTER_CIDRS=$(join_by , $(echo "${ALL_CLUSTER_CIDRS}"))
$ ALL_CLUSTER_NETTAGS=$(gcloud --project $PROJECT_ID compute instances list --format='value(tags.items.[0])' | sort | uniq)
$ ALL_CLUSTER_NETTAGS=$(join_by , $(echo "${ALL_CLUSTER_NETTAGS}"))

----------------------------------------

TITLE: Getting Mesh Overview with Istioctl in Bash
DESCRIPTION: Uses the proxy-status command to get an overview of the Istio service mesh.

LANGUAGE: bash
CODE:
$ istioctl proxy-status

----------------------------------------

TITLE: Configuring Address Auto-allocation for ServiceEntry in Istio
DESCRIPTION: This bash snippet applies a Kubernetes manifest to create a ServiceEntry with automatic address allocation, enabling DNS resolution for services without stable addresses.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: external-auto
spec:
  hosts:
  - auto.internal
  ports:
  - name: http
    number: 80
    protocol: HTTP
  resolution: DNS
EOF

----------------------------------------

TITLE: Configuring Istio DestinationRule
DESCRIPTION: YAML configuration for Istio DestinationRule to disable TLS for external service access.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: my-httpbin
spec:
  host: my-httpbin.default.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE

----------------------------------------

TITLE: Verifying OKE Cluster Connectivity
DESCRIPTION: This command checks if kubectl can successfully connect to the OKE cluster by listing the nodes in the cluster.

LANGUAGE: bash
CODE:
$ kubectl get nodes

----------------------------------------

TITLE: Configuring Strict mTLS for Usergroup-1
DESCRIPTION: Applies a PeerAuthentication policy to enforce strict mutual TLS for workloads in the usergroup-1 namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "usergroup-1-peerauth"
  namespace: "usergroup-1"
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Configuring Egress Gateway with Custom Readiness Probe
DESCRIPTION: YAML configuration for deploying an Istio egress gateway with a custom readiness probe that checks both the local healthz endpoint and the upstream httpbin service.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: empty
  tag: 1.8.0
  namespace: httpbin
  components:
    egressGateways:
    - name: httpbin-egress
      enabled: true
      label:
        app: istio-egressgateway
        istio: egressgateway
        custom-egress: httpbin-egress
      k8s:
        overlays:
        - kind: Deployment
          name: httpbin-egress
          patches:
          - path: spec.template.spec.containers[0].readinessProbe
            value:
              failureThreshold: 30
              exec:
                command:
                  - /bin/sh
                  - -c
                  - curl http://localhost:15021/healthz/ready && curl https://httpbin.org/status/200
              initialDelaySeconds: 1
              periodSeconds: 2
              successThreshold: 1
              timeoutSeconds: 1
  values:
    gateways:
      istio-egressgateway:
        runAsRoot: true

----------------------------------------

TITLE: Deploying Sleep Pod with Kubectl
DESCRIPTION: Applies a Kubernetes configuration file to deploy a sleep sample pod. The sleep pod is commonly used for testing and development purposes in Istio demonstrations.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/sleep/sleep.yaml@

----------------------------------------

TITLE: Verifying Bookinfo Application Deployment in Kubernetes
DESCRIPTION: Check the status of the deployed Bookinfo application pods using kubectl.

LANGUAGE: bash
CODE:
$ kubectl get pods

----------------------------------------

TITLE: ZTunnel Log Example
DESCRIPTION: Sample ztunnel log entry showing mTLS connection details between services.

LANGUAGE: plain
CODE:
2024-08-21T15:32:05.754291Z info access connection complete src.addr=10.42.0.9:33772 src.workload="curl-7656cf8794-6lsm4" src.namespace="default"
src.identity="spiffe://cluster.local/ns/default/sa/curl" dst.addr=10.42.0.5:15008 dst.hbone_addr=10.42.0.5:9080 dst.service="details.default.svc.cluster.local"
dst.workload="details-v1-857849f66-ft8wx" dst.namespace="default" dst.identity="spiffe://cluster.local/ns/default/sa/bookinfo-details"
direction="outbound" bytes_sent=84 bytes_recv=358 duration="15ms"

----------------------------------------

TITLE: Installing New Istio Version with Revision
DESCRIPTION: Command to install a new version of Istio (1.10.0) with a specific revision using minimal profile

LANGUAGE: bash
CODE:
$ istioctl install -y --set profile=minimal --revision 1-10-0

----------------------------------------

TITLE: Analyzing Configuration Issues
DESCRIPTION: Command to validate Istio configuration and check for validation issues.

LANGUAGE: bash
CODE:
istioctl analyze

----------------------------------------

TITLE: Viewing Istio Sidecar Injector Service
DESCRIPTION: Displays the Istio sidecar injector service running in the istio-system namespace.

LANGUAGE: bash
CODE:
kubectl get svc --namespace=istio-system | grep sidecar-injector

----------------------------------------

TITLE: Displaying SchemaValidationError Example in Istio
DESCRIPTION: This snippet shows an example of the SchemaValidationError message output when Istio configuration fails schema validation. It indicates that a percentage value is out of the valid range.

LANGUAGE: plaintext
CODE:
Error [IST0106] (VirtualService ratings-bogus-weight-default.default) Schema validation error: percentage 888 is not in range 0..100

----------------------------------------

TITLE: Configuring Web Crawler Access Rules in robots.txt
DESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers and specifies the XML sitemap location. Used to guide search engine crawlers on how to index the Istio documentation.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.4/sitemap.xml

----------------------------------------

TITLE: Applying Waypoint Proxy in Istio
DESCRIPTION: This command applies a waypoint proxy directly to the default namespace using istioctl.

LANGUAGE: bash
CODE:
$ istioctl waypoint apply -n default

----------------------------------------

TITLE: Applying Custom Pilot Settings to Cluster
DESCRIPTION: Uses istioctl install command to apply the modified Pilot settings defined in a YAML file to the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ istioctl install -f samples/operator/pilot-k8s.yaml

----------------------------------------

TITLE: Creating a ServiceEntry for External Service in Istio
DESCRIPTION: This bash snippet applies a Kubernetes manifest to create a ServiceEntry for an external service, enabling DNS resolution for the specified host.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: external-address
spec:
  addresses:
  - 198.51.100.1
  hosts:
  - address.internal
  ports:
  - name: http
    number: 80
    protocol: HTTP
EOF

----------------------------------------

TITLE: Creating Dashboard Access Credentials
DESCRIPTION: Creates service account and cluster role binding for Dashboard admin access, generates authentication token.

LANGUAGE: bash
CODE:
kubectl create serviceaccount -n kubernetes-dashboard admin-user
kubectl create clusterrolebinding -n kubernetes-dashboard admin-user --clusterrole cluster-admin --serviceaccount=kubernetes-dashboard:admin-user
token=$(kubectl -n kubernetes-dashboard create token admin-user)

----------------------------------------

TITLE: Simulating User Traffic
DESCRIPTION: Bash loop to continuously send requests to the application, simulating real-world traffic patterns.

LANGUAGE: bash
CODE:
while :; do curl -s <output of the previous command> | grep -o "<title>.*</title>"; sleep 1; done

----------------------------------------

TITLE: Invalid ServiceEntry Configuration with Unset Protocol
DESCRIPTION: Example of an invalid ServiceEntry configuration where the protocol is unset and addresses are missing.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: service-entry
  namespace: default
spec:
  hosts:
    - 'istio.io'
  exportTo:
    - "."
  ports:
    - number: 443
      name: https
  location: MESH_EXTERNAL
  resolution: DNS

----------------------------------------

TITLE: Scaling Kubernetes Deployments
DESCRIPTION: Command to scale all deployments to 1 replica for tutorial purposes

LANGUAGE: bash
CODE:
$ kubectl scale deployments --all --replicas 1

----------------------------------------

TITLE: Configuring Istio 1.3.x Release Announcement Page in YAML
DESCRIPTION: YAML front matter for an Istio documentation page that lists 1.3.x release announcements. It specifies the title, description, weight for ordering, and uses a custom 'release-grid' layout.

LANGUAGE: yaml
CODE:
---
title: 1.3.x Releases
description: Announcements for the 1.3 release and its associated patch releases.
weight: 26
list_by_publishdate: true
layout: release-grid
---

----------------------------------------

TITLE: Configuring Mutual TLS Origination for Egress Traffic
DESCRIPTION: Sets up DestinationRule for mutual TLS origination in the Egress Gateway.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: originate-mtls-for-nginx
spec:
  host: my-nginx.mesh-external.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: MUTUAL
        credentialName: client-credential # this must match the secret created earlier to hold client certs
        sni: my-nginx.mesh-external.svc.cluster.local

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio Documentation
DESCRIPTION: YAML frontmatter configuration that sets up metadata and build parameters for the 'About Istio' documentation page. Includes title, description, sidebar settings, weights, and cascade rendering rules.

LANGUAGE: yaml
CODE:
title: About Istio
linktitle: About
description: Get a bit more in-depth info about the Istio project.
sidebar_none: true
weight: 15
doc_type: about
cascade:
  _build:
    render: always
    list: always
_build:
  render: never
  list: never

----------------------------------------

TITLE: Configuring JWT Request Authentication in Istio
DESCRIPTION: Example RequestAuthentication policy configuration that demonstrates how to set up JWT authentication for the httpbin application. The policy specifies the JWT issuer and JWKS URI for token validation.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: "example-3"
spec:
  selector:
    matchLabels:
      app: httpbin
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "{{< github_file >}}/security/tools/jwt/samples/jwks.json"

----------------------------------------

TITLE: Setting Proxy Configuration
DESCRIPTION: Example of Kubernetes API server proxy settings that can cause sidecar injection failures.

LANGUAGE: yaml
CODE:
env:
  - name: http_proxy
    value: http://proxy-wsa.esl.foo.com:80
  - name: https_proxy
    value: http://proxy-wsa.esl.foo.com:80
  - name: no_proxy
    value: 127.0.0.1,localhost,dockerhub.foo.com,devhub-docker.foo.com,10.84.100.125,10.84.100.126,10.84.100.127

----------------------------------------

TITLE: Configuring Robots.txt for Istio Documentation
DESCRIPTION: This robots.txt file allows all user agents to crawl the entire Istio documentation website and specifies the location of the sitemap for version 1.8.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.8/sitemap.xml

----------------------------------------

TITLE: Deleting Istio Sample Applications and Resources
DESCRIPTION: Series of kubectl commands to delete the Bookinfo sample application, curl deployment, and associated resources.

LANGUAGE: bash
CODE:
$ kubectl delete httproute reviews
$ kubectl delete authorizationpolicy productpage-viewer
$ kubectl delete -f @samples/curl/curl.yaml@
$ kubectl delete -f @samples/bookinfo/platform/kube/bookinfo.yaml@
$ kubectl delete -f @samples/bookinfo/platform/kube/bookinfo-versions.yaml@
$ kubectl delete -f @samples/bookinfo/gateway-api/bookinfo-gateway.yaml@

----------------------------------------

TITLE: Configuring Robots.txt for Istio Project Website
DESCRIPTION: This robots.txt configuration allows all user agents to crawl the entire site and specifies the location of the sitemap. It sets no restrictions on crawling and provides a sitemap for version 1.0 of the documentation.

LANGUAGE: robots.txt
CODE:
User-agent: *

Disallow:

Sitemap: /v1.0/sitemap.xml

----------------------------------------

TITLE: Downloading Istio Installation
DESCRIPTION: Commands to download and extract the latest Istio release package for Linux/macOS systems. Includes option to specify version and architecture.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | sh -

----------------------------------------

TITLE: Generating Waypoint Proxy Resource for Istio
DESCRIPTION: This command uses istioctl to generate a Kubernetes Gateway resource for a waypoint proxy in the default namespace, configured to process traffic for services.

LANGUAGE: bash
CODE:
$ istioctl waypoint generate --for service -n default

----------------------------------------

TITLE: Creating Proxy Protocol Envoy Filter for Istio Ingress Gateway
DESCRIPTION: This YAML defines an EnvoyFilter resource to enable proxy protocol and TLS inspector for the Istio ingress gateway. It applies to workloads with the 'istio: ingressgateway' label.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: proxy-protocol
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: LISTENER
    patch:
      operation: MERGE
      value:
        listener_filters:
        - name: envoy.filters.listener.proxy_protocol
        - name: envoy.filters.listener.tls_inspector

----------------------------------------

TITLE: Downloading Istio Installation
DESCRIPTION: Commands to download and extract the latest Istio release package for Linux/macOS systems. Includes option to specify version and architecture.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | sh -

----------------------------------------

TITLE: Testing DNS Capture in Istio
DESCRIPTION: This bash snippet demonstrates how to test DNS capture by executing a curl command from a deployment to resolve and connect to an external service.

LANGUAGE: bash
CODE:
$ kubectl exec deploy/curl -- curl -sS -v address.internal
*   Trying 198.51.100.1:80...

----------------------------------------

TITLE: Examining IPTables Rules in Ambient Mode Pod
DESCRIPTION: Command to view the iptables configuration inside an application pod, showing the Istio-specific chains and rules for traffic redirection.

LANGUAGE: bash
CODE:
kubectl debug $(kubectl get pod -l app=curl -n ambient-demo -o jsonpath='{.items[0].metadata.name}') -it --image gcr.io/istio-release/base --profile=netadmin -n ambient-demo -- iptables-save

----------------------------------------

TITLE: Checking Proxy Status
DESCRIPTION: Command to check the status of all proxies in the mesh including waypoints.

LANGUAGE: bash
CODE:
istioctl proxy-status

----------------------------------------

TITLE: Downloading Specific Istio Version and Architecture
DESCRIPTION: This command demonstrates how to download a specific version of Istio ({{< istio_full_version >}}) for the x86_64 architecture.

LANGUAGE: bash
CODE:
$ curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{< istio_full_version >}} TARGET_ARCH=x86_64 sh -

----------------------------------------

TITLE: Displaying Warning with Text Block in Istio Documentation
DESCRIPTION: This snippet demonstrates how to create a warning section in Istio documentation using custom shortcodes. It includes a plain text block within the warning for additional content.

LANGUAGE: plain
CODE:
{{< warning >}}
A warning from a boilerplate

{{< text plain >}}
A text block inside a warning
{{< /text >}}

{{< /warning >}}

----------------------------------------

TITLE: Creating CiliumClusterWideNetworkPolicy for Ambient Host Probes
DESCRIPTION: This YAML snippet creates a CiliumClusterWideNetworkPolicy to allow SNAT-ed kubelet health check probes into ambient pods.

LANGUAGE: yaml
CODE:
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "allow-ambient-hostprobes"
spec:
  description: "Allows SNAT-ed kubelet health check probes into ambient pods"
  enableDefaultDeny:
    egress: false
    ingress: false
  endpointSelector: {}
  ingress:
  - fromCIDR:
    - "169.254.7.127/32"

----------------------------------------

TITLE: Testing Inter-Mesh Communication
DESCRIPTION: Sends requests between pods in different namespaces to verify that communication is only allowed within the same usergroup.

LANGUAGE: bash
CODE:
$ kubectl -n app-ns-1 exec "$(kubectl -n app-ns-1 get pod -l app=curl -o jsonpath={.items..metadata.name})" -c curl -- curl -sIL http://httpbin.app-ns-2.svc.cluster.local:8000
$ kubectl -n app-ns-2 exec "$(kubectl -n app-ns-2 get pod -l app=curl -o jsonpath={.items..metadata.name})" -c curl -- curl -sIL http://httpbin.app-ns-3.svc.cluster.local:8000

----------------------------------------

TITLE: Configuring Network Policy
DESCRIPTION: Defines a Kubernetes NetworkPolicy to restrict egress traffic to only the control plane, gateway and DNS service

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress-to-istio-system-and-kube-dns
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kube-system: "true"
    ports:
    - protocol: UDP
      port: 53

----------------------------------------

TITLE: Configuring Mutual TLS Gateway
DESCRIPTION: Defines an Istio Gateway resource that enables mutual TLS authentication on port 443 using IKS-provided credentials.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: default-ingress-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: MUTUAL
      credentialName: $INGRESS_GATEWAY_SECRET
    hosts:
    - "$INGRESS_GATEWAY_DOMAIN"
    - "httpbin.$ALB_INGRESS_DOMAIN"

----------------------------------------

TITLE: Scaling Bookinfo Deployments in Kubernetes
DESCRIPTION: Scales all deployments to 3 replicas each using kubectl scale command.

LANGUAGE: bash
CODE:
$ kubectl scale deployments --all --replicas 3

----------------------------------------

TITLE: Error Message Example in Istio VirtualService
DESCRIPTION: Example of the warning message displayed when a VirtualService rule becomes unreachable.

LANGUAGE: plain
CODE:
Warning [IST0130] (VirtualService sample-foo-cluster01.default) VirtualService rule #1 not used (only the last rule can have no matches).

----------------------------------------

TITLE: Query Productpage Service Requests
DESCRIPTION: Query to get total requests count for the productpage service

LANGUAGE: plaintext
CODE:
istio_requests_total{destination_service="productpage.default.svc.cluster.local"}

----------------------------------------

TITLE: In-Place Upgrade of Istio Base Chart
DESCRIPTION: Perform an in-place upgrade of the Istio base chart using Helm.

LANGUAGE: bash
CODE:
$ helm upgrade istio-base istio/base -n istio-system

----------------------------------------

TITLE: Monitoring MicroK8s Deployment Progress
DESCRIPTION: This command uses 'watch' to continuously monitor the deployment progress of all resources across all namespaces in the MicroK8s cluster.

LANGUAGE: bash
CODE:
$ watch microk8s.kubectl get all --all-namespaces

----------------------------------------

TITLE: Applying Stackdriver Configuration
DESCRIPTION: Bash commands to apply the Stackdriver configuration to the Kubernetes cluster and verify it by sending test traffic.

LANGUAGE: bash
CODE:
$ kubectl apply -f stackdriver.yaml
$ curl http://$GATEWAY_URL/productpage

----------------------------------------

TITLE: Deploying Istio-injected TCP Echo and Curl Workloads
DESCRIPTION: Creates a namespace 'foo' and deploys Istio-injected 'tcp-echo' and 'curl' workloads for testing TCP traffic authorization.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/tcp-echo/tcp-echo.yaml@) -n foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@) -n foo

----------------------------------------

TITLE: Installing Istio with minikube Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the minikube platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.global.platform=minikube

----------------------------------------

TITLE: Configuring HTTPS failover with ServiceEntry in Istio
DESCRIPTION: Defines a ServiceEntry for HTTPS services, redirecting traffic from HTTP port 80 to HTTPS port 443.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-svc-dns
spec:
  hosts:
  - mydb.com
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
    targetPort: 443
  resolution: DNS
  endpoints:
  - address: dynamodb.us-east-1.amazonaws.com
    locality: us-east1
  - address: dynamodb.us-west-1.amazonaws.com
    locality: us-west

----------------------------------------

TITLE: Upgrading Istio Ambient Control Plane and Data Plane
DESCRIPTION: Uses Helm to upgrade all Istio ambient mode components, including the control plane and data plane, using a single wrapper chart. This command assumes the installation is in the istio-system namespace.

LANGUAGE: bash
CODE:
$ helm upgrade istio-ambient istio/ambient -n istio-system --wait

----------------------------------------

TITLE: Installing Istio CNI with Helm
DESCRIPTION: Helm command to install the Istio CNI component into the istio-system namespace.

LANGUAGE: bash
CODE:
helm install istio-cni istio/cni -n istio-system --wait

----------------------------------------

TITLE: Incorrect EnvoyFilter REPLACE Operation Example
DESCRIPTION: Example of an incorrect EnvoyFilter configuration that uses REPLACE operation with HTTP_FILTER. This configuration will be ignored because REPLACE operation is not valid for HTTP_FILTER type.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-replace-2
  namespace: bookinfo
spec:
  workloadSelector:
    labels:
      app: reviews2
  priority: 10
  configPatches:
    # The first patch adds the Lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        portNumber: 8080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: REPLACE
      value: # Lua filter specification
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
              local headers, body = request_handle:httpCall(
               "lua_cluster",
               {
                [":method"] = "POST",
                [":path"] = "/acl",
                [":authority"] = "internal.org.net"
               },
              "authorize call",
              5000)
            end

----------------------------------------

TITLE: Displaying Warning Message Using Hugo Shortcode in Istio Documentation
DESCRIPTION: This snippet demonstrates how to use a Hugo shortcode to display a warning message in the Istio project documentation. It encapsulates a boilerplate warning text within the 'warning' shortcode tags.

LANGUAGE: hugo
CODE:
{{< warning >}}
A warning from a boilerplate
{{< /warning >}}

----------------------------------------

TITLE: Installing Istio with MicroK8s Platform Profile using istioctl
DESCRIPTION: This bash command installs Istio using istioctl with the MicroK8s platform profile.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient --set values.global.platform=microk8s

----------------------------------------

TITLE: Upgrading Istiod In-Place
DESCRIPTION: Performs an in-place upgrade of the Istio control plane.

LANGUAGE: bash
CODE:
$ helm upgrade istiod istio/istiod -n istio-system --wait

----------------------------------------

TITLE: Creating Namespace and Deploying Sample Application
DESCRIPTION: Creates httptools namespace with Istio sidecar injection enabled and deploys the httpbin sample application.

LANGUAGE: bash
CODE:
$ kubectl create namespace httptools
$ kubectl label namespace httptools istio-injection=enabled
$ kubectl apply -f @samples/httpbin/httpbin.yaml@ -n httptools

----------------------------------------

TITLE: Installing Istio CNI with Custom CNI Paths in K3s using Helm
DESCRIPTION: This bash command installs Istio CNI using Helm with custom CNI paths for K3s.

LANGUAGE: bash
CODE:
$ helm install istio-cni istio/cni -n istio-system --set profile=ambient --wait --set cniConfDir=/var/lib/rancher/k3s/agent/etc/cni/net.d --set cniBinDir=/var/lib/rancher/k3s/data/current/bin/

----------------------------------------

TITLE: Installing Kubernetes Dashboard
DESCRIPTION: Deploys the Kubernetes Dashboard UI using Helm and creates necessary service account and permissions.

LANGUAGE: bash
CODE:
helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard

----------------------------------------

TITLE: Defining Kubernetes Service with Incorrect Port Naming in YAML
DESCRIPTION: This YAML snippet defines a Kubernetes Service that triggers the PortNameIsNotUnderNamingConvention message. The port name 'foo-http' does not follow the required syntax of 'name: <protocol>[-<suffix>]'.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  ports:
  - name: foo-http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin

----------------------------------------

TITLE: Setting Revision Tag for Existing 1.8 Installation
DESCRIPTION: Command to create a revision tag 'stable' pointing to an existing 1.8 revision named '1-8-5'

LANGUAGE: bash
CODE:
istioctl x revision tag set stable --revision 1-8-5

----------------------------------------

TITLE: Configuring Gateway Routing and SNI Forwarding in Istio
DESCRIPTION: YAML configuration for setting up gateway routing, VirtualService, DestinationRule, ServiceEntry, and EnvoyFilter to enable SNI-based forwarding for wildcard domains in Istio.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: egressgateway
  namespace: istio-system
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 8443
      name: tls-egress
      protocol: TLS
    hosts:
      - "*"
    tls:
      mode: ISTIO_MUTUAL

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-wildcard-through-egress-gateway
  namespace: istio-system
spec:
  hosts:
    - "*.wikipedia.org"
  gateways:
  - mesh
  - egressgateway
  tls:
  - match:
    - gateways:
      - mesh
      port: 443
      sniHosts:
        - "*.wikipedia.org"
    route:
    - destination:
        host: egressgateway.istio-egress.svc.cluster.local
        subset: wildcard
  tcp:
  - match:
    - gateways:
      - egressgateway
      port: 8443
    route:
    - destination:
        host: "dummy.local"
      weight: 100

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway
  namespace: istio-system
spec:
  host: egressgateway.istio-egress.svc.cluster.local
  subsets:
  - name: wildcard
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL

---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: wildcard
  namespace: istio-system
spec:
  hosts:
    - "*.wikipedia.org"
  ports:
  - number: 443
    name: tls
    protocol: TLS

---
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  accessLogging:
    - providers:
      - name: envoy

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: sni-magic
  namespace: istio-system
spec:
  configPatches:
  - applyTo: CLUSTER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: sni_cluster
        load_assignment:
          cluster_name: sni_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  envoy_internal_address:
                    server_listener_name: sni_listener
  - applyTo: CLUSTER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: dynamic_forward_proxy_cluster
        lb_policy: CLUSTER_PROVIDED
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
            dns_cache_config:
              name: dynamic_forward_proxy_cache_config
              dns_lookup_family: V4_ONLY

  - applyTo: LISTENER
    match:
      context: GATEWAY
    patch:
      operation: ADD
      value:
        name: sni_listener
        internal_listener: {}
        listener_filters:
        - name: envoy.filters.listener.tls_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector

        filter_chains:
        - filter_chain_match:
            server_names:
            - "*.wikipedia.org"
          filters:
            - name: envoy.filters.network.sni_dynamic_forward_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig
                port_value: 443
                dns_cache_config:
                  name: dynamic_forward_proxy_cache_config
                  dns_lookup_family: V4_ONLY
            - name: envoy.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp
                cluster: dynamic_forward_proxy_cluster
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: "/dev/stdout"
                    log_format:
                      text_format_source:
                        inline_string: '[%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%
                          %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS%
                          "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION%
                          %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%"
                          "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER%
                          %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS%
                          %REQUESTED_SERVER_NAME% %ROUTE_NAME%

                          '
  - applyTo: NETWORK_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.tcp_proxy"
    patch:
      operation: MERGE
      value:
        name: envoy.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: tcp
          cluster: sni_cluster

----------------------------------------

TITLE: Defining DestinationRule for TLS Origination
DESCRIPTION: Creates a DestinationRule to perform TLS origination for requests to edition.cnn.com.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: originate-tls-for-edition-cnn-com
spec:
  host: edition.cnn.com
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE # initiates HTTPS for connections to edition.cnn.com

----------------------------------------

TITLE: Testing Cross-Cluster Traffic
DESCRIPTION: Commands to test cross-cluster load balancing by sending requests to the HelloWorld service from both clusters.

LANGUAGE: bash
CODE:
$ kubectl exec --context="${CTX_CLUSTER1}" -n sample -c curl "$(kubectl get pod --context="${CTX_CLUSTER1}" -n sample -l app=curl -o jsonpath='{.items[0].metadata.name}')" -- curl -sS helloworld.sample:5000/hello

----------------------------------------

TITLE: Configuring WasmPlugin for Waypoint Authentication
DESCRIPTION: YAML configuration for deploying a basic authentication WebAssembly plugin at the waypoint proxy level.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: basic-auth-at-waypoint
spec:
  targetRefs:
    - kind: Gateway
      group: gateway.networking.k8s.io
      name: waypoint
  url: oci://ghcr.io/istio-ecosystem/wasm-extensions/basic_auth:1.12.0
  phase: AUTHN
  pluginConfig:
    basic_auth_rules:
      - prefix: "/productpage"
        request_methods:
          - "GET"
          - "POST"
        credentials:
          - "ok:test"
          - "YWRtaW4zOmFkbWluMw=="

----------------------------------------

TITLE: Viewing Istio Proxy Access Logs for curl Pod
DESCRIPTION: This bash command retrieves the access logs from the Istio proxy sidecar container in the curl pod.

LANGUAGE: bash
CODE:
$ kubectl logs -l app=curl -c istio-proxy

----------------------------------------

TITLE: Configuring CryptoMB for Specific Istio Gateways
DESCRIPTION: This YAML snippet shows how to apply CryptoMB private key provider configuration specifically to an Istio ingress gateway. It uses pod annotations to set the CryptoMB configuration for the gateway.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: example-istiocontrolplane
spec:
  profile: demo
  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        podAnnotations:
          proxy.istio.io/config: |
            privateKeyProvider:
              cryptomb:
                pollDelay: 10ms

----------------------------------------

TITLE: Verifying Istio Installation Status
DESCRIPTION: Commands to check the status of Helm deployments and deployed pods in the istio-system namespace.

LANGUAGE: bash
CODE:
$ helm ls -n istio-system

LANGUAGE: bash
CODE:
$ kubectl get pods -n istio-system

----------------------------------------

TITLE: Exposing OpenShift Route for Istio Ingress Gateway
DESCRIPTION: This command exposes an OpenShift route for the Istio ingress gateway, allowing external traffic to reach the Istio mesh. It operates in the istio-system namespace and exposes the http2 port.

LANGUAGE: bash
CODE:
$ oc -n istio-system expose svc/istio-ingressgateway --port=http2

----------------------------------------

TITLE: Upgrading CNI Node Agent
DESCRIPTION: Updates the Istio CNI DaemonSet that manages pod network configuration.

LANGUAGE: bash
CODE:
$ helm upgrade istio-cni istio/cni -n istio-system

----------------------------------------

TITLE: Installing Istio with Access Logging Enabled
DESCRIPTION: This bash command demonstrates how to install Istio with access logging enabled using the istioctl command. It sets the meshConfig.accessLogFile to /dev/stdout.

LANGUAGE: bash
CODE:
$ istioctl install <flags-you-used-to-install-Istio> --set meshConfig.accessLogFile=/dev/stdout

----------------------------------------

TITLE: Creating Canary Revision Tag
DESCRIPTION: Creates a prod-canary tag pointing to Istio revision 1-10-0

LANGUAGE: bash
CODE:
$ istioctl x revision tag set prod-canary --revision 1-10-0

----------------------------------------

TITLE: Setting Control Plane Cluster for cluster2
DESCRIPTION: Creates and annotates the istio-system namespace in cluster2 to identify the external control plane cluster.

LANGUAGE: bash
CODE:
kubectl --context="${CTX_CLUSTER2}" create namespace istio-system
kubectl --context="${CTX_CLUSTER2}" annotate namespace istio-system topology.istio.io/controlPlaneClusters=cluster1

----------------------------------------

TITLE: Cleaning Up Resources
DESCRIPTION: Commands to uninstall Istio control planes and delete associated namespaces for both usergroups.

LANGUAGE: bash
CODE:
$ istioctl uninstall --revision usergroup-1 --set values.global.istioNamespace=usergroup-1
$ kubectl delete ns app-ns-1 usergroup-1
$ istioctl uninstall --revision usergroup-2 --set values.global.istioNamespace=usergroup-2
$ kubectl delete ns app-ns-2 app-ns-3 usergroup-2

----------------------------------------

TITLE: Configuring gRPC Server Credentials for mTLS
DESCRIPTION: Set up gRPC server credentials to support mTLS with fallback to insecure credentials.

LANGUAGE: go
CODE:
creds, err := xds.NewServerCredentials(xdscreds.ServerOptions{FallbackCreds: insecure.NewCredentials()})
// handle err
server = xds.NewGRPCServer(grpc.Creds(creds))

----------------------------------------

TITLE: Page Configuration Frontmatter in YAML
DESCRIPTION: YAML frontmatter block that configures the documentation page metadata including title, description, weight, and display options.

LANGUAGE: yaml
CODE:
title: Documentation
linktitle: Documentation
description: Learn how to deploy, use, and operate Istio.
weight: 1
skip_toc: true
skip_sidebar: true
test: table-of-contents
doc_type: docs

----------------------------------------

TITLE: Installing Istio CNI
DESCRIPTION: Command to install the Istio CNI node agent for ambient mesh traffic redirection.

LANGUAGE: bash
CODE:
$ helm install istio-cni istio/cni -n istio-system --set profile=ambient --wait

----------------------------------------

TITLE: Installing App Identity and Access Adapter using Helm
DESCRIPTION: Commands to install the adapter either directly from GitHub repository or locally after cloning

LANGUAGE: bash
CODE:
$ helm repo add appidentityandaccessadapter https://raw.githubusercontent.com/ibm-cloud-security/app-identity-and-access-adapter/master/helm/appidentityandaccessadapter
$ helm install --name appidentityandaccessadapter appidentityandaccessadapter/appidentityandaccessadapter

LANGUAGE: bash
CODE:
$ git clone git@github.com:ibm-cloud-security/app-identity-and-access-adapter.git
$ helm install ./helm/appidentityandaccessadapter --name appidentityandaccessadapter.

----------------------------------------

TITLE: Configuring Conflicting Virtual Services in Istio
DESCRIPTION: This example demonstrates two conflicting virtual services in different namespaces that use the same host and are attached to the default mesh gateway.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: productpage
  namespace: team-1
spec:
  hosts:
  - productpage.default.svc.cluster.local
  http:
  - route:
    - destination:
        host: productpage
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: custom
  namespace: team-2
spec:
  hosts:
  - productpage.default.svc.cluster.local
  http:
  - route:
    - destination:
        host: productpage.team-2.svc.cluster.local
---

----------------------------------------

TITLE: Creating a ServiceEntry for edition.cnn.com
DESCRIPTION: Defines a ServiceEntry for edition.cnn.com to allow external access.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: cnn
spec:
  hosts:
  - edition.cnn.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS

----------------------------------------

TITLE: Listing Running Docker Containers
DESCRIPTION: This command lists all running Docker containers, showing details about the ratings service container.

LANGUAGE: bash
CODE:
$ docker ps

----------------------------------------

TITLE: Checking Workload HBONE Configuration with istioctl
DESCRIPTION: Uses istioctl to display ztunnel configurations for workloads to verify HBONE protocol usage, indicating mTLS enablement.

LANGUAGE: bash
CODE:
$ istioctl ztunnel-config workloads

----------------------------------------

TITLE: Checking Service Waypoint Configuration
DESCRIPTION: Command to inspect waypoint assignments for services in the mesh.

LANGUAGE: bash
CODE:
istioctl ztunnel-config service

----------------------------------------

TITLE: Creating Telemetry Resource for OpenTelemetry Access Logging
DESCRIPTION: This Bash command creates a Telemetry resource in Kubernetes to enable access logging for the 'curl' app using the OpenTelemetry provider.

LANGUAGE: bash
CODE:
$ cat <<EOF | kubectl apply -n default -f -
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: curl-logging
spec:
  selector:
    matchLabels:
      app: curl
  accessLogging:
    - providers:
      - name: otel
EOF

----------------------------------------

TITLE: Inspecting Virtual Inbound Listener Configuration
DESCRIPTION: Istio proxy configuration showing the virtual inbound listener bound to both IPv4 and IPv6 addresses.

LANGUAGE: json
CODE:
    "name": "virtualInbound",
    "address": {
        "socketAddress": {
            "address": "0.0.0.0",
            "portValue": 15006
        }
    },
    "additionalAddresses": [
        {
            "address": {
                "socketAddress": {
                    "address": "::",
                    "portValue": 15006
                }
            }
        }
    ],

----------------------------------------

TITLE: Generating Istio Manifest with Helm for AWS NLB
DESCRIPTION: Bash command to generate an Istio manifest using Helm, incorporating the AWS NLB configuration. This command applies the override YAML file to customize the Istio installation for AWS NLB support.

LANGUAGE: bash
CODE:
$ helm template install/kubernetes/helm/istio --namespace istio -f override.yaml > $HOME/istio.yaml

----------------------------------------

TITLE: Configuring Bookinfo Gateway Service Type in Istio
DESCRIPTION: Annotate the Bookinfo gateway to change its service type from LoadBalancer to ClusterIP.

LANGUAGE: bash
CODE:
$ kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default

----------------------------------------

TITLE: Exposing Control Plane in cluster1
DESCRIPTION: Applies a configuration to expose the control plane in cluster1 for access from cluster2.

LANGUAGE: bash
CODE:
kubectl apply --context="${CTX_CLUSTER1}" -n istio-system -f \
    @samples/multicluster/expose-istiod.yaml@

----------------------------------------

TITLE: Checking Injection for Specific Pod
DESCRIPTION: Command to verify sidecar injection configuration for a specific pod in a namespace.

LANGUAGE: bash
CODE:
istioctl experimental check-inject -n <namespace> <pod-name>

----------------------------------------

TITLE: Defining ServiceEntry for Upstream Service
DESCRIPTION: YAML configuration for an Istio ServiceEntry that allows communication to the external httpbin.org service over TLS.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: "httpbin-egress"
  namespace: "httpbin"
spec:
  hosts:
  - "httpbin.org"
  location: MESH_EXTERNAL
  ports:
  - number: 443
    name: https
    protocol: TLS
  resolution: DNS

----------------------------------------

TITLE: Creating and Labeling Namespaces for Dual Stack Testing
DESCRIPTION: Commands to create namespaces for dual stack, IPv4, and IPv6 services, and enable Istio sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl create namespace dual-stack
$ kubectl create namespace ipv4
$ kubectl create namespace ipv6
$ kubectl label --overwrite namespace default istio-injection=enabled
$ kubectl label --overwrite namespace dual-stack istio-injection=enabled
$ kubectl label --overwrite namespace ipv4 istio-injection=enabled
$ kubectl label --overwrite namespace ipv6 istio-injection=enabled

----------------------------------------

TITLE: Configuring Remote Istio Installation - New Method
DESCRIPTION: New simplified configuration for remote Istio installation using the configCluster flag to enable/disable config cluster resources.

LANGUAGE: yaml
CODE:
components:
  base:
    enabled: false
  pilot:
    enabled: false
  istiodRemote:
    enabled: true
values:
  global:
    externalIstiod: true
    configCluster: true

----------------------------------------

TITLE: Defining YAML Front Matter for Hugo Blog Post
DESCRIPTION: YAML front matter defining metadata for a Hugo blog post about delayering Istio with AppSwitch.

LANGUAGE: yaml
CODE:
---
title: Delayering Istio with AppSwitch
description: Automatic application onboarding and latency optimizations using AppSwitch.
publishdate: 2018-07-30
subtitle:
attribution: Dinesh Subhraveti (AppOrbit and Columbia University)
keywords: [appswitch,performance]
target_release: 1.0
---

----------------------------------------

TITLE: Correcting Istio Gateway Configuration with Valid Ports
DESCRIPTION: This snippet demonstrates the correct configuration for an Istio Gateway, using ports that are defined in the associated Service, resolving the GatewayPortNotDefinedOnService issue.

LANGUAGE: yaml
CODE:
# Gateway with correct ports

apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: istio-ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 8080
      name: http2
      protocol: HTTP
    hosts:
    - "*"
  - port:
      number: 8443
      name: https
      protocol: HTTP
    hosts:
    - "*"

----------------------------------------

TITLE: Resolving Conflicting Virtual Services with exportTo Field in Istio
DESCRIPTION: This example shows how to resolve conflicting virtual services by using the exportTo field to scope each virtual service to its own namespace.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: productpage
  namespace: team-1
spec:
  exportTo:
  - "."
  hosts:
  - productpage.default.svc.cluster.local
  http:
  - route:
    - destination:
        host: productpage
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: custom
  namespace: team-2
spec:
  exportTo:
  - "."
  hosts:
  - productpage.default.svc.cluster.local
  http:
  - route:
    - destination:
        host: productpage.team-2.svc.cluster.local
---

----------------------------------------

TITLE: Configuring BlackHoleCluster in Istio
DESCRIPTION: JSON configuration for the BlackHoleCluster in Istio, which is used to block all external service traffic when outbound traffic policy is set to REGISTRY_ONLY.

LANGUAGE: json
CODE:
{
  "name": "BlackHoleCluster",
  "type": "STATIC",
  "connectTimeout": "10s"
}

----------------------------------------

TITLE: Creating Remote Secrets for Cross-Cluster Communication
DESCRIPTION: Creates and applies remote secrets to enable API server access between clusters

LANGUAGE: bash
CODE:
istioctl create-remote-secret \
  --context="${CTX_CLUSTER1}" \
  --name=cluster1 | \
  kubectl apply -f - --context="${CTX_CLUSTER2}"

istioctl create-remote-secret \
  --context="${CTX_CLUSTER2}" \
  --name=cluster2 | \
  kubectl apply -f - --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Allow Path IP Policy
DESCRIPTION: Creates an authorization policy to allow requests to the /ip path

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: allow-path-ip
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  action: ALLOW
  rules:
  - to:
    - operation:
        paths: ["/ip"]

----------------------------------------

TITLE: Listing Certificate Files in Prometheus Pod
DESCRIPTION: Command to list the provisioned key and certificate files in the /etc/istio-certs/ directory of a Prometheus pod running in the istio-system namespace.

LANGUAGE: bash
CODE:
kubectl exec -it `kubectl get pod -l app=prometheus -n istio-system -o jsonpath='{.items[0].metadata.name}'` -c prometheus -n istio-system -- ls -la /etc/istio-certs/

----------------------------------------

TITLE: Viewing Contents of Dockerfile
DESCRIPTION: This command displays the contents of the downloaded Dockerfile.

LANGUAGE: bash
CODE:
$ cat Dockerfile

----------------------------------------

TITLE: Configuring Prometheus container for Istio certificate mounting
DESCRIPTION: YAML configuration for mounting Istio certificates in a Prometheus container to enable secure scraping of metrics when using STRICT mTLS mode.

LANGUAGE: yaml
CODE:
containers:
  - name: prometheus-server
    ...
    volumeMounts:
      mountPath: /etc/prom-certs/
      name: istio-certs
volumes:
  - emptyDir:
      medium: Memory
    name: istio-certs

----------------------------------------

TITLE: Installing Istio with Native Sidecar Support
DESCRIPTION: Commands to download and install Istio 1.19 pre-release with native sidecar support and access logging enabled.

LANGUAGE: shell
CODE:
$ TAG=1.19.0-beta.0
$ curl -L https://github.com/istio/istio/releases/download/$TAG/istio-$TAG-linux-amd64.tar.gz | tar xz
$ ./istioctl install --set values.pilot.env.ENABLE_NATIVE_SIDECARS=true -y --set meshConfig.accessLogFile=/dev/stdout

----------------------------------------

TITLE: Configuring Istio Gateway and VirtualService
DESCRIPTION: YAML configuration for creating an Istio Gateway and VirtualService to handle incoming HTTP traffic on port 80 and route specific URI paths to the productpage service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: bookinfo-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - $MY_INGRESS_GATEWAY_HOST
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
  - $MY_INGRESS_GATEWAY_HOST
  gateways:
  - bookinfo-gateway.$NAMESPACE.svc.cluster.local
  http:
  - match:
    - uri:
        exact: /productpage
    - uri:
        exact: /login
    - uri:
        exact: /logout
    - uri:
        prefix: /static
    route:
    - destination:
        host: productpage
        port:
          number: 9080

----------------------------------------

TITLE: Defining v1beta1 AuthorizationPolicy in YAML
DESCRIPTION: Example of a v1beta1 AuthorizationPolicy resource that applies to workloads with specific labels and allows access from a specified principal under certain conditions.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/sleep"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.headers[version]
     values: ["v1", "v2"]

----------------------------------------

TITLE: Running Fortio Load Test with Fixed QPS
DESCRIPTION: This Fortio command runs a load test for 60 seconds with a fixed QPS of 8000 and a specified number of connections. It's used to measure the latency for eBPF and iptables redirection methods.

LANGUAGE: bash
CODE:
$ fortio load -uniform -t 60s -qps 8000 -c <num_connections> http://<fortio-svc-name>:8080

----------------------------------------

TITLE: Configuring HTTPRoute for Istio Service in Ambient Mode
DESCRIPTION: This YAML snippet shows how to configure an HTTPRoute for the 'reviews' service in the 'default' namespace. It defines traffic splitting between two backend versions of the service.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
  namespace: default
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - backendRefs:
    - name: reviews-v1
      port: 9080
      weight: 90
    - name: reviews-v2
      port: 9080
      weight: 10

----------------------------------------

TITLE: Modified servicegraph Configuration in YAML
DESCRIPTION: Shows changes to the servicegraph configuration in the Helm chart values.yaml file.

LANGUAGE: yaml
CODE:
servicegraph:
  ingress:
    hosts: servicegraph.local  # New description: Used to create an Ingress record.

----------------------------------------

TITLE: Uninstalling Istio
DESCRIPTION: Commands to uninstall Istio and delete the istio-system namespace using istioctl and kubectl.

LANGUAGE: bash
CODE:
$ istioctl uninstall -y --purge
$ kubectl delete namespace istio-system

----------------------------------------

TITLE: Defining v1alpha1 RBAC Policies in YAML
DESCRIPTION: Example of v1alpha1 RBAC policies (ClusterRbacConfig, ServiceRole, ServiceRoleBinding) that achieve the same result as the v1beta1 AuthorizationPolicy example.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.istio.io/v1alpha1"
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON_WITH_INCLUSION'
  inclusion:
    services: ["httpbin.foo.svc.cluster.local"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: httpbin
  namespace: foo
spec:
  rules:
  - services: ["httpbin.foo.svc.cluster.local"]
    methods: ["GET"]
    constraints:
    - key: request.headers[version]
      values: ["v1", "v2"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: httpbin
  namespace: foo
spec:
  subjects:
  - user: "cluster.local/ns/default/sa/sleep"
  roleRef:
    kind: ServiceRole
    name: "httpbin"

----------------------------------------

TITLE: Applying Global mTLS PeerAuthentication Policy
DESCRIPTION: Applies a PeerAuthentication policy to require mTLS traffic for all workloads in the mesh.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Viewing Namespaces with Istio Injection Labels
DESCRIPTION: This snippet shows how to list Kubernetes namespaces and their labels, including the istio-injection label used for automatic sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl get namespaces --show-labels
NAME           STATUS    AGE       LABELS
default        Active    40d       <none>
istio-dev      Active    19d       istio-injection=enabled
istio-system   Active    24d       <none>
kube-public    Active    40d       <none>
kube-system    Active    40d       <none>

----------------------------------------

TITLE: Testing External Service Access via Istio Ingress Gateway
DESCRIPTION: Commands to test access to external services (httpbin.org and edition.cnn.com) through the configured Istio ingress gateway. It includes steps to verify the gateway logs for successful requests.

LANGUAGE: bash
CODE:
$ curl $INGRESS_HOST:$INGRESS_PORT/status/418 -Hhost:httpbin.org

LANGUAGE: bash
CODE:
$ kubectl logs -l istio=ingressgateway -c istio-proxy -n istio-system | grep 'httpbin.org'

LANGUAGE: bash
CODE:
$ curl -s --resolve edition.cnn.com:$SECURE_INGRESS_PORT:$INGRESS_HOST https://edition.cnn.com:$SECURE_INGRESS_PORT | grep -o "<title>.*</title>"

LANGUAGE: bash
CODE:
$ kubectl logs -l istio=ingressgateway -c istio-proxy -n istio-system | grep 'edition.cnn.com'

----------------------------------------

TITLE: Installing Istio with Ambient Profile
DESCRIPTION: Installs Istio using the ambient profile which includes core components, Istiod, ingress gateway, zero-trust tunnel agent, and CNI plugin.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=ambient

----------------------------------------

TITLE: Removed ingress Configuration in YAML
DESCRIPTION: Shows an example of removed ingress configuration options from Istio 1.0.

LANGUAGE: yaml
CODE:
ingress:
  enabled: false
  service:
    annotations: {}
    loadBalancerIP: ""
    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be
    ports:
      - name: http
      - name: https
    selector:
      istio: ingress

----------------------------------------

TITLE: Limiting Ingress Traffic with Network Policy in YAML
DESCRIPTION: This YAML snippet defines a NetworkPolicy to limit incoming traffic to the Istio ingress pods. It allows only TCP traffic on ports 80 and 443, reducing the attack surface by preventing access to other potential services like the admin interface.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: istio-ingress-lockdown
  namespace: default
spec:
  podSelector:
    matchLabels:
      istio: ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

----------------------------------------

TITLE: Deploying Kyverno Authorization Policy
DESCRIPTION: Example of a Kyverno AuthorizationPolicy that defines authorization rules using CEL expressions for request validation.

LANGUAGE: yaml
CODE:
apiVersion: envoy.kyverno.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  name: demo-policy.example.com
spec:
  failurePolicy: Fail
  variables:
  - name: force_authorized
    expression: object.attributes.request.http.?headers["x-force-authorized"].orValue("")
  - name: allowed
    expression: variables.force_authorized in ["enabled", "true"]
  authorizations:
  - expression: >
      variables.allowed
        ? envoy.Allowed().Response()
        : envoy.Denied(403).Response()

----------------------------------------

TITLE: Sending Multiple Requests to Istio Service using Bash
DESCRIPTION: This bash command sends 100 requests to the 'productpage' service through the Istio gateway. It uses a for loop to iterate 100 times, each time sending a curl request to the service endpoint.

LANGUAGE: bash
CODE:
$ for i in $(seq 1 100); do curl -s -o /dev/null "http://$GATEWAY_URL/productpage"; done

----------------------------------------

TITLE: Listing WorkloadEntries
DESCRIPTION: Displays automatically created WorkloadEntries for connected virtual machines.

LANGUAGE: bash
CODE:
kubectl get workloadentries

----------------------------------------

TITLE: Creating IP-based Deny Authorization Policy (Istio APIs)
DESCRIPTION: Creates an authorization policy to deny specific IP addresses from accessing the Istio ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: DENY
  rules:
  - from:
    - source:
        ipBlocks: ["$CLIENT_IP"]

----------------------------------------

TITLE: Verifying Metric Generation for Details
DESCRIPTION: This command verifies that Istio generates data for new or modified dimensions in the details pod.

LANGUAGE: bash
CODE:
$ istioctl x es "$(kubectl get pod -l app=details -o jsonpath='{.items[0].metadata.name}')" -oprom | grep istio_requests_total

----------------------------------------

TITLE: Checking Kubernetes Contexts
DESCRIPTION: Command to list available Kubernetes contexts for accessing multiple clusters.

LANGUAGE: bash
CODE:
$ kubectl config get-contexts
CURRENT   NAME       CLUSTER    AUTHINFO       NAMESPACE
*         cluster1   cluster1   user@foo.com   default
          cluster2   cluster2   user@foo.com   default

----------------------------------------

TITLE: Creating Test Namespace in Kubernetes
DESCRIPTION: Creates a dedicated namespace for testing TCP traffic shifting functionality

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-io-tcp-traffic-shifting

----------------------------------------

TITLE: Installing Minimal Istio Profile
DESCRIPTION: Command to install Istio with minimal profile for Gateway API usage

LANGUAGE: bash
CODE:
$ istioctl install --set profile=minimal

----------------------------------------

TITLE: Creating Stable Revision Tag in Istio
DESCRIPTION: Creates a new prod-stable tag for Istio revision 1-9-5 using istioctl command

LANGUAGE: bash
CODE:
$ istioctl x revision tag set prod-stable --revision 1-9-5

----------------------------------------

TITLE: Configuring AuthorizationPolicy for Istio Waypoint Proxy
DESCRIPTION: This YAML snippet demonstrates how to configure an AuthorizationPolicy to apply to a specific waypoint proxy named 'default' in the 'default' namespace. It allows GET requests from the 'default' and 'istio-system' namespaces.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: view-only
  namespace: default
spec:
  targetRefs:
  - kind: Gateway
    group: gateway.networking.k8s.io
    name: default
  action: ALLOW
  rules:
  - from:
    - source:
        namespaces: ["default", "istio-system"]
    to:
    - operation:
        methods: ["GET"]

----------------------------------------

TITLE: Creating Istio Installation Configuration with DLB Support
DESCRIPTION: This YAML configuration defines an IstioOperator resource that sets up Istio with DLB support for the ingress gateway, allocating 4 CPUs and 1 DLB device.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: default
  components:
    ingressGateways:
    - enabled: true
      name: istio-ingressgateway
      k8s:
        overlays:
          - kind: Deployment
            name: istio-ingressgateway
        podAnnotations:
          proxy.istio.io/config: |
            concurrency: 4
        resources:
          requests:
            cpu: 4000m
            memory: 4096Mi
            dlb.intel.com/pf: '1'
          limits:
            cpu: 4000m
            memory: 4096Mi
            dlb.intel.com/pf: '1'
        hpaSpec:
          maxReplicas: 1
          minReplicas: 1
  values:
    telemetry:
      enabled: false

----------------------------------------

TITLE: Verifying Internal Mesh Connectivity
DESCRIPTION: Verifies internal mesh connectivity on port 8080 using curl.

LANGUAGE: bash
CODE:
$ export INTERNAL_CLIENT=$(kubectl -n test get pod -l app=curl -o jsonpath={.items..metadata.name})
$ kubectl -n test exec "${INTERNAL_CLIENT}" -c curl -- curl -IsS "http://httpbin:8080/status/200"

----------------------------------------

TITLE: Translating IstioOperator YAML to Helm Values
DESCRIPTION: Uses the istioctl manifest translate command to convert an IstioOperator YAML file into Helm values and a shell script for chart installation.

LANGUAGE: bash
CODE:
$ istioctl manifest translate -f istio.yaml

----------------------------------------

TITLE: Migrating Helm Configuration to istioctl Commands
DESCRIPTION: These snippets illustrate how to migrate from Helm configuration to istioctl commands. It shows how to pass Helm configuration options using istioctl --set by prepending 'values.' to the option name.

LANGUAGE: bash
CODE:
$ helm template ... --set global.mtls.enabled=true

LANGUAGE: bash
CODE:
$ istioctl manifest generate ... --set values.global.mtls.enabled=true

----------------------------------------

TITLE: Issue Reference in Markdown
DESCRIPTION: GitHub issue references for Istiod crash fix and bug report include condition fix

LANGUAGE: markdown
CODE:
[Issue #45798](https://github.com/istio/istio/issues/45798)
[Issue #45839](https://github.com/istio/istio/issues/45839)

----------------------------------------

TITLE: Verifying TCP Communication on Port 9000
DESCRIPTION: Executes a command to verify successful communication between 'curl' and 'tcp-echo' on port 9000.

LANGUAGE: bash
CODE:
$ kubectl exec "$(kubectl get pod -l app=curl -n foo -o jsonpath={.items..metadata.name})" \
    -c curl -n foo -- sh -c \
    'echo "port 9000" | nc tcp-echo 9000' | grep "hello" && echo 'connection succeeded' || echo 'connection rejected'

----------------------------------------

TITLE: Creating TCP ServiceEntry for MongoDB
DESCRIPTION: Defines a ServiceEntry to allow egress TCP traffic to the external MongoDB service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: mongo
spec:
  hosts:
  - my-mongo.tcp.svc
  addresses:
  - $MONGODB_IP/32
  ports:
  - number: $MONGODB_PORT
    name: tcp
    protocol: TCP
  location: MESH_EXTERNAL
  resolution: STATIC
  endpoints:
  - address: $MONGODB_IP

----------------------------------------

TITLE: Installing Istio with Kyverno Configuration
DESCRIPTION: Installation command for Istio with Kyverno Authz Server configuration, including access log and extension provider setup.

LANGUAGE: bash
CODE:
$ istioctl install -y -f - <<EOF
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    accessLogFile: /dev/stdout
    accessLogFormat: |
      [KYVERNO DEMO] my-new-dynamic-metadata: '%DYNAMIC_METADATA(envoy.filters.http.ext_authz)%'
    extensionProviders:
    - name: kyverno-authz-server
      envoyExtAuthzGrpc:
        service: kyverno-authz-server.kyverno.svc.cluster.local
        port: '9081'
EOF

----------------------------------------

TITLE: Checking Istiod RBAC Configuration
DESCRIPTION: Command and YAML output to verify the RBAC configuration for Istiod, showing required permissions for webhook management.

LANGUAGE: bash/yaml
CODE:
$ kubectl get clusterrole istiod-istio-system -o yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
  name: istiod-istio-system
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - '*'

----------------------------------------

TITLE: Testing TLS 1.3 Support
DESCRIPTION: Verifies that TLS 1.3 connections are successful using OpenSSL client.

LANGUAGE: bash
CODE:
$ kubectl exec "$(kubectl get pod -l app=curl -n foo -o jsonpath={.items..metadata.name})" -c istio-proxy -n foo -- openssl s_client -alpn istio -tls1_3 -connect httpbin.foo:8000 | grep "TLSv1.3"

----------------------------------------

TITLE: Updating HTTPRoute with Additional Path and Header Modification
DESCRIPTION: Updates the HTTPRoute to expose an additional path (/headers) and add a custom header to the request.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http
  namespace: default
spec:
  parentRefs:
  - name: gateway
    namespace: istio-ingress
  hostnames: ["httpbin.example.com"]
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /get
    - path:
        type: PathPrefix
        value: /headers
    filters:
    - type: RequestHeaderModifier
      requestHeaderModifier:
        add:
        - name: my-added-header
          value: added-value
    backendRefs:
    - name: httpbin
      port: 8000
EOF

----------------------------------------

TITLE: Downloading Istio with MOSN
DESCRIPTION: Commands to download a specific version of Istio and set up the environment for using MOSN as the data plane.

LANGUAGE: bash
CODE:
$ export ISTIO_VERSION=1.5.2
$ curl -L https://istio.io/downloadIstio | sh -
$ cd istio-$ISTIO_VERSION/
$ export PATH=$PATH:$(pwd)/bin

----------------------------------------

TITLE: Displaying Istio Destination Rules
DESCRIPTION: Retrieves and displays the Istio destination rules applied to the Bookinfo services.

LANGUAGE: bash
CODE:
$ kubectl get destinationrules -o yaml

----------------------------------------

TITLE: Installing Istio Ambient Components
DESCRIPTION: Command to install all Istio data plane and control plane components required for ambient mode using a wrapper chart.

LANGUAGE: bash
CODE:
$ helm install istio-ambient istio/ambient --namespace istio-system --create-namespace --wait

----------------------------------------

TITLE: Query Request Rate for Productpage
DESCRIPTION: Query to get the rate of successful requests to productpage service over 5 minutes

LANGUAGE: plaintext
CODE:
rate(istio_requests_total{destination_service=~"productpage.*", response_code="200"}[5m])

----------------------------------------

TITLE: Verifying Virtual Inbound Listener Configuration
DESCRIPTION: This command checks the virtual inbound listener configuration to ensure it's set up to listen on both IPv4 (0.0.0.0) and IPv6 (::) addresses.

LANGUAGE: bash
CODE:
$ istioctl proxy-config listeners "$(kubectl get pod -n dual-stack -l app=tcp-echo -o jsonpath='{.items[0].metadata.name}')" -n dual-stack -o json | jq '.[] | select(.name=="virtualInbound") | {name: .name, address: .address, additionalAddresses: .additionalAddresses}'

----------------------------------------

TITLE: Describing Injected Pod
DESCRIPTION: This snippet demonstrates how to view detailed information about an Istio-injected pod, including the init and sidecar containers.

LANGUAGE: bash
CODE:
$ kubectl describe pod demo-red-pod-8b5df99cc-pgnl7

LANGUAGE: yaml
CODE:
Name:               demo-red-pod-8b5df99cc-pgnl7
Namespace:          default
.....
Labels:             app=demo-red
                    pod-template-hash=8b5df99cc
                    version=version-red
Annotations:        sidecar.istio.io/status={"version":"3c0b8d11844e85232bc77ad85365487638ee3134c91edda28def191c086dc23e","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-certs...
Status:             Running
IP:                 10.32.0.6
Controlled By:      ReplicaSet/demo-red-pod-8b5df99cc
Init Containers:
  istio-init:
    Container ID:  docker://bef731eae1eb3b6c9d926cacb497bb39a7d9796db49cd14a63014fc1a177d95b
    Image:         docker.io/istio/proxy_init:1.0.2
    Image ID:      docker-pullable://docker.io/istio/proxy_init@sha256:e16a0746f46cd45a9f63c27b9e09daff5432e33a2d80c8cc0956d7d63e2f9185
    .....
    State:          Terminated
      Reason:       Completed
    .....
    Ready:          True
Containers:
  demo-red:
    Container ID:   docker://8cd9957955ff7e534376eb6f28b56462099af6dfb8b9bc37aaf06e516175495e
    Image:          chugtum/blue-green-image:v3
    Image ID:       docker-pullable://docker.io/chugtum/blue-green-image@sha256:274756dbc215a6b2bd089c10de24fcece296f4c940067ac1a9b4aea67cf815db
    State:          Running
      Started:      Sun, 09 Dec 2018 18:12:31 -0800
    Ready:          True
  istio-proxy:
    Container ID:  docker://ca5d690be8cd6557419cc19ec4e76163c14aed2336eaad7ebf17dd46ca188b4a
    Image:         docker.io/istio/proxyv2:1.0.2
    Image ID:      docker-pullable://docker.io/istio/proxyv2@sha256:54e206530ba6ca9b3820254454e01b7592e9f986d27a5640b6c03704b3b68332
    Args:
      proxy
      sidecar
      .....
    State:          Running
      Started:      Sun, 09 Dec 2018 18:12:31 -0800
    Ready:          True
    .....

----------------------------------------

TITLE: Verifying Istio Installation with MOSN
DESCRIPTION: Command to check if Istio-related pods and services are successfully deployed using MOSN as the data plane.

LANGUAGE: bash
CODE:
$ kubectl get svc -n istio-system

----------------------------------------

TITLE: Deploying Squid Proxy Container
DESCRIPTION: Kubernetes deployment configuration for running a Squid proxy container with the specified configuration

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: squid
  namespace: external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: squid
  template:
    metadata:
      labels:
        app: squid
    spec:
      volumes:
      - name: proxy-config
        configMap:
          name: proxy-configmap
      containers:
      - name: squid
        image: sameersbn/squid:3.5.27
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: proxy-config
          mountPath: /etc/squid
          readOnly: true

----------------------------------------

TITLE: YAML Front Matter Configuration for Istio 1.0.6 Release Notes
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.0.6 release documentation, including title, release version, publish date, and URL aliases.

LANGUAGE: yaml
CODE:
title: Announcing Istio 1.0.6
linktitle: 1.0.6
subtitle: Patch Release
description: Istio 1.0.6 patch release.
publishdate: 2019-02-12
release: 1.0.6
aliases:
    - /about/notes/1.0.6
    - /blog/2019/announcing-1.0.6
    - /news/2019/announcing-1.0.6
    - /news/announcing-1.0.6

----------------------------------------

TITLE: Configuring Trusted Hops with ProxyConfig Annotation in YAML
DESCRIPTION: Example of using a ProxyConfig annotation to configure the number of trusted hops. This replaces the EnvoyFilter method.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    "proxy.istio.io/config": '{"gatewayTopology" : { "numTrustedProxies": 1 }}'

----------------------------------------

TITLE: Istio Gateway and VirtualService Configuration Example
DESCRIPTION: Example configuration showing a Gateway and VirtualService definition where the VirtualService incorrectly references a non-existent gateway name 'httpbin-gateway-bogus' instead of the correct 'httpbin-gateway'.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http2
      protocol: HTTP2
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "*"
  gateways:
  - httpbin-gateway-bogus #  Should have been "httpbin-gateway"
  http:
  - route:
    - destination:
        host: httpbin-gateway

----------------------------------------

TITLE: Setting Ingress Host Environment Variable
DESCRIPTION: Waits for the Gateway to be programmed and sets the INGRESS_HOST environment variable.

LANGUAGE: bash
CODE:
$ kubectl wait -n istio-ingress --for=condition=programmed gateways.gateway.networking.k8s.io gateway
$ export INGRESS_HOST=$(kubectl get gateways.gateway.networking.k8s.io gateway -n istio-ingress -ojsonpath='{.status.addresses[0].value}')

----------------------------------------

TITLE: Configuring OIDC Provider for Web Application Protection
DESCRIPTION: YAML configuration to define an OpenID Connect provider for web application authentication

LANGUAGE: yaml
CODE:
apiVersion: "security.cloud.ibm.com/v1"
kind: OidcConfig
metadata:
    name: my-oidc-provider-config
    namespace: sample-namespace
spec:
    discoveryUrl: <discovery-url-from-oidc-provider>
    clientId: <client-id-from-oidc-provider>
    clientSecretRef:
        name: <kubernetes-secret-name>
        key: <kubernetes-secret-key>

----------------------------------------

TITLE: Viewing iptables Rules in Injected Pod
DESCRIPTION: This snippet demonstrates how to view the iptables rules set up by Istio in an injected pod's network namespace.

LANGUAGE: bash
CODE:
$ docker inspect b8de099d3510 --format '{{ .State.Pid }}'
4125

$ nsenter -t 4215 -n iptables -t nat -S
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N ISTIO_INBOUND
-N ISTIO_IN_REDIRECT
-N ISTIO_OUTPUT
-N ISTIO_REDIRECT
-A PREROUTING -p tcp -j ISTIO_INBOUND
-A OUTPUT -p tcp -j ISTIO_OUTPUT
-A ISTIO_INBOUND -p tcp -m tcp --dport 80 -j ISTIO_IN_REDIRECT
-A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15001
-A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -j ISTIO_REDIRECT
-A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN
-A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN
-A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN
-A ISTIO_OUTPUT -j ISTIO_REDIRECT
-A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001

----------------------------------------

TITLE: Installing Lua Filter for Istio JWT Vulnerability Mitigation
DESCRIPTION: These commands clone the Istio tools repository and run a setup script to install a Lua filter that mitigates the JWT vulnerability in older Istio versions.

LANGUAGE: bash
CODE:
$ git clone git@github.com:istio/tools.git
$ cd tools/examples/luacheck/
$ ./setup.sh

----------------------------------------

TITLE: Configuring Trusted Hops with EnvoyFilter in YAML
DESCRIPTION: Example of using EnvoyFilter to configure the number of trusted hops in the HTTP connection manager. This method is being replaced by the gatewayTopology field in ProxyConfig.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingressgateway-redirect-config
spec:
  configPatches:
  - applyTo: NETWORK_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
    patch:
      operation: MERGE
      value:
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          xff_num_trusted_hops: 1
  workloadSelector:
    labels:
      istio: ingress-gateway

----------------------------------------

TITLE: Configuring Cluster 2 Service Entry in Istio
DESCRIPTION: Defines a ServiceEntry for the payments service in Cluster 2, with local service reference and remote cluster endpoint configuration.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: payments.global-se
spec:
  addresses:
  - 240.0.0.10
  endpoints:
  - address: ef39xf...us-east-2.elb.amazonaws.com
    locality: us-east-2
    ports:
      http: 15443
  - address: payments.default.svc.cluster.local
    locality: us-west-2
    ports:
      http: 80
  hosts:
  - payments.global
  location: MESH_INTERNAL
  ports:
  - name: http
    number: 80
    protocol: http
  resolution: DNS

----------------------------------------

TITLE: Examining Waypoint Proxy Routes
DESCRIPTION: Commands to view routing configuration for the reviews waypoint proxy, including detailed YAML output for specific routes.

LANGUAGE: bash
CODE:
$ istioctl proxy-config routes deploy/bookinfo-reviews-istio-waypoint
$ istioctl proxy-config routes deploy/bookinfo-reviews-istio-waypoint --name "inbound-vip|9080|http|reviews.default.svc.cluster.local" -o yaml

----------------------------------------

TITLE: Opening Prometheus Dashboard
DESCRIPTION: Command to access Prometheus dashboard for monitoring mTLS metrics.

LANGUAGE: bash
CODE:
$ istioctl dashboard prometheus

----------------------------------------

TITLE: Retrieving Istio Sidecar Injector ConfigMap
DESCRIPTION: This snippet shows how to retrieve the configuration of the istio-sidecar-injector ConfigMap, which contains the template for sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.config}'

LANGUAGE: yaml
CODE:
policy: enabled
template: |-
  initContainers:
  - name: istio-init
    image: docker.io/istio/proxy_init:1.0.2
    args:
    - "-p"
    - [[ .MeshConfig.ProxyListenPort ]]
    - "-u"
    - 1337
    .....
    imagePullPolicy: IfNotPresent
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
    restartPolicy: Always

  containers:
  - name: istio-proxy
    image: [[ if (isset .ObjectMeta.Annotations "sidecar.istio.io/proxyImage") -]]
    "[[ index .ObjectMeta.Annotations "sidecar.istio.io/proxyImage" ]]"
    [[ else -]]
    docker.io/istio/proxyv2:1.0.2
    [[ end -]]
    args:
    - proxy
    - sidecar
    .....
    env:
    .....
    - name: ISTIO_META_INTERCEPTION_MODE
      value: [[ or (index .ObjectMeta.Annotations "sidecar.istio.io/interceptionMode") .ProxyConfig.InterceptionMode.String ]]
    imagePullPolicy: IfNotPresent
    securityContext:
      readOnlyRootFilesystem: true
      [[ if eq (or (index .ObjectMeta.Annotations "sidecar.istio.io/interceptionMode") .ProxyConfig.InterceptionMode.String) "TPROXY" -]]
      capabilities:
        add:
        - NET_ADMIN
    restartPolicy: Always
    .....

----------------------------------------

TITLE: Creating a Dual-Stack Kind Cluster for Istio
DESCRIPTION: This snippet demonstrates how to create a dual-stack Kubernetes cluster using Kind for testing Istio in dual-stack mode.

LANGUAGE: bash
CODE:
$ kind create cluster --name istio-ds --config - <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  ipFamily: dual
EOF

----------------------------------------

TITLE: Configuring Sidecar Certificate Parameters in Helm Values
DESCRIPTION: This YAML snippet demonstrates how to set certificate parameters for sidecar proxies using a Helm values file. It configures the CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE in the proxyMetadata section of the meshConfig.

LANGUAGE: yaml
CODE:
meshConfig:
  defaultConfig:
    proxyMetadata:
      CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE: 4096

----------------------------------------

TITLE: Accessing Kubernetes Services from VM
DESCRIPTION: Demonstrate how to access Kubernetes services from the virtual machine using Istio's DNS proxying feature, which automatically configures DNS for the virtual machine.

LANGUAGE: bash
CODE:
$ curl productpage.bookinfo:9080/productpage

----------------------------------------

TITLE: Deploying Curl Pod in Kubernetes
DESCRIPTION: Applies a YAML configuration to deploy a curl pod in the Kubernetes cluster for testing purposes.

LANGUAGE: bash
CODE:
kubectl apply -f @samples/curl/curl.yaml@

----------------------------------------

TITLE: Configuring Destination Rule for Locality Distribution in Istio
DESCRIPTION: Creates a DestinationRule resource that configures locality-based load balancing with weighted distribution and outlier detection for the HelloWorld service. The configuration specifies traffic distribution percentages across different regions and zones.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: helloworld
spec:
  host: helloworld.sample.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      localityLbSetting:
        enabled: true
        distribute:
        - from: region1/zone1/*
          to:
            "region1/zone1/*": 70
            "region1/zone2/*": 20
            "region3/zone4/*": 10
    outlierDetection:
      consecutive5xxErrors: 100
      interval: 1s
      baseEjectionTime: 1m

----------------------------------------

TITLE: Retrieving Istio Sidecar Injector ConfigMap
DESCRIPTION: This snippet shows how to retrieve the configuration of the istio-sidecar-injector ConfigMap, which contains the template for sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.config}'

LANGUAGE: yaml
CODE:
policy: enabled
template: |-
  initContainers:
  - name: istio-init
    image: docker.io/istio/proxy_init:1.0.2
    args:
    - "-p"
    - [[ .MeshConfig.ProxyListenPort ]]
    - "-u"
    - 1337
    .....
    imagePullPolicy: IfNotPresent
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
    restartPolicy: Always

  containers:
  - name: istio-proxy
    image: [[ if (isset .ObjectMeta.Annotations "sidecar.istio.io/proxyImage") -]]
    "[[ index .ObjectMeta.Annotations "sidecar.istio.io/proxyImage" ]]"
    [[ else -]]
    docker.io/istio/proxyv2:1.0.2
    [[ end -]]
    args:
    - proxy
    - sidecar
    .....
    env:
    .....
    - name: ISTIO_META_INTERCEPTION_MODE
      value: [[ or (index .ObjectMeta.Annotations "sidecar.istio.io/interceptionMode") .ProxyConfig.InterceptionMode.String ]]
    imagePullPolicy: IfNotPresent
    securityContext:
      readOnlyRootFilesystem: true
      [[ if eq (or (index .ObjectMeta.Annotations "sidecar.istio.io/interceptionMode") .ProxyConfig.InterceptionMode.String) "TPROXY" -]]
      capabilities:
        add:
        - NET_ADMIN
    restartPolicy: Always
    .....

----------------------------------------

TITLE: Configuring Sidecar Certificate Parameters via Deployment Annotation
DESCRIPTION: This YAML snippet shows how to set certificate parameters for a specific deployment using annotations. It configures the CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE in the proxy.istio.io/config annotation.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curl
spec:
  ...
  template:
    metadata:
      ...
      annotations:
        ...
        proxy.istio.io/config: |
          CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE: 4096
    spec:
      ...

----------------------------------------

TITLE: Deleting Kind Cluster
DESCRIPTION: Removes the Kind cluster and associated resources.

LANGUAGE: bash
CODE:
kind delete cluster --name istio-testing

----------------------------------------

TITLE: Displaying PortNameIsNotUnderNamingConvention Message in Istio
DESCRIPTION: This snippet shows the format of the PortNameIsNotUnderNamingConvention message in Istio. It indicates that a port name doesn't follow the Istio naming convention.

LANGUAGE: plain
CODE:
Info [IST0118] (Service httpbin.default) Port name foo-http (port: 80, targetPort: 80) doesn't follow the naming convention of Istio port.

----------------------------------------

TITLE: Configuring Proxy Start Behavior
DESCRIPTION: Configuration options to ensure application containers wait for the istio-proxy sidecar to be ready before starting.

LANGUAGE: yaml
CODE:
values.global.proxy.holdApplicationUntilProxyStarts: true

LANGUAGE: yaml
CODE:
proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'

----------------------------------------

TITLE: Inspecting Envoy Configuration
DESCRIPTION: Command to view complete Envoy configuration for a waypoint proxy.

LANGUAGE: bash
CODE:
istioctl proxy-config all deploy/waypoint

----------------------------------------

TITLE: Configuring Pilot for Namespace-Specific Service Discovery
DESCRIPTION: YAML snippet to configure Pilot to watch a specific application namespace for service discovery.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: istio-system1
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: pilot
    spec:
      serviceAccountName: istio-pilot-service-account
      containers:
      - name: discovery
        image: docker.io/<user ID>/pilot:<tag>
        imagePullPolicy: IfNotPresent
        args: ["discovery", "-v", "2", "--admission-service", "istio-pilot", "--appNamespace", "ns-1"]
        ports:
        - containerPort: 8080
        - containerPort: 443

----------------------------------------

TITLE: Creating MySQL user for Bookinfo application
DESCRIPTION: Creates a MySQL user 'bookinfo' with SELECT privileges on the ratings table.

LANGUAGE: bash
CODE:
$ mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT -e "CREATE USER 'bookinfo' IDENTIFIED BY '<password you choose>'; GRANT SELECT ON test.ratings to 'bookinfo';"

----------------------------------------

TITLE: Configuring Blog Post Archive Front Matter in YAML
DESCRIPTION: YAML front matter configuration for an Istio blog posts archive page. Specifies the title, description, weight for sorting, and enables chronological sorting by publish date.

LANGUAGE: yaml
CODE:
---
title: 2021 Posts
description: Blog posts for 2021.
weight: 7
list_by_publishdate: true
---

----------------------------------------

TITLE: Prometheus Metrics Example
DESCRIPTION: Sample Prometheus metric output showing mTLS connection details including security policy and principals.

LANGUAGE: plain
CODE:
istio_tcp_connections_opened_total{
  app="ztunnel",
  connection_security_policy="mutual_tls",
  destination_principal="spiffe://cluster.local/ns/default/sa/bookinfo-details",
  destination_service="details.default.svc.cluster.local",
  reporter="source",
  request_protocol="tcp",
  response_flags="-",
  source_app="curl",
  source_principal="spiffe://cluster.local/ns/default/sa/curl",source_workload_namespace="default",
  ...}

----------------------------------------

TITLE: Viewing Waypoint Proxy Clusters
DESCRIPTION: Command to inspect cluster configuration for the reviews waypoint proxy.

LANGUAGE: bash
CODE:
$ istioctl proxy-config clusters deploy/bookinfo-reviews-istio-waypoint

----------------------------------------

TITLE: Creating Kind Cluster for Istio
DESCRIPTION: Creates a new Kind cluster specifically for Istio testing with a custom name.

LANGUAGE: bash
CODE:
kind create cluster --name istio-testing

----------------------------------------

TITLE: Inspecting Socket States in Ambient Mode Pod
DESCRIPTION: Debug command to verify the state of listening sockets on ports 15001, 15006, and 15008 within an ambient mode pod using netshoot tools.

LANGUAGE: bash
CODE:
kubectl debug $(kubectl get pod -l app=curl -n ambient-demo -o jsonpath='{.items[0].metadata.name}') -it -n ambient-demo  --image nicolaka/netshoot  -- ss -ntlp

----------------------------------------

TITLE: Unresolvable Hostname Configuration Example
DESCRIPTION: Example of ValidatingWebhookConfiguration and MutatingWebhookConfiguration manifests showing invalid configurations with unresolvable hostnames.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-validator-external-istiod
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://thisisnotarealdomainname.com:15017/validate
  name: rev.validation.istio.io

----------------------------------------

TITLE: Configuring Cross-Cluster Traffic Routing
DESCRIPTION: Virtual service configuration to route traffic between review service versions across clusters based on user identity.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews.default.svc.cluster.local
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews.default.global
        subset: v2
      weight: 50
    - destination:
        host: reviews.default.global
        subset: v3
      weight: 50
  - route:
    - destination:
        host: reviews.default.svc.cluster.local
        subset: v1

----------------------------------------

TITLE: Configuring Helm Values for Istio Dual-Stack Support
DESCRIPTION: This YAML configuration enables dual-stack support in Istio using Helm values. It sets the necessary proxy metadata and environment variables, and optionally configures gateways for dual-stack operation.

LANGUAGE: yaml
CODE:
meshConfig:
  defaultConfig:
    proxyMetadata:
      ISTIO_DUAL_STACK: "true"
values:
  pilot:
    env:
      ISTIO_DUAL_STACK: "true"
  # The below values are optional and can be used based on your requirements
  gateways:
    istio-ingressgateway:
      ipFamilyPolicy: RequireDualStack
    istio-egressgateway:
      ipFamilyPolicy: RequireDualStack

----------------------------------------

TITLE: Creating Directory and Downloading Service Files
DESCRIPTION: Commands to create a directory for the ratings service and download the necessary source files from GitHub.

LANGUAGE: bash
CODE:
$ mkdir ratings
$ cd ratings
$ curl -s {{< github_file >}}/samples/bookinfo/src/ratings/ratings.js -o ratings.js
$ curl -s {{< github_file >}}/samples/bookinfo/src/ratings/package.json -o package.json

----------------------------------------

TITLE: Basic L4 Authorization Policy Configuration in Istio
DESCRIPTION: Demonstrates a basic Layer 4 authorization policy that allows traffic from specific service accounts to pods with matching labels. This policy works in both sidecar and ambient modes.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: allow-curl-to-httpbin
spec:
 selector:
   matchLabels:
     app: httpbin
 action: ALLOW
 rules:
 - from:
   - source:
       principals:
       - cluster.local/ns/ambient-demo/sa/curl

----------------------------------------

TITLE: Creating IP-based Allow Authorization Policy (Istio APIs)
DESCRIPTION: Creates an authorization policy to allow specific IP addresses to access the Istio ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ingress-policy
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: ALLOW
  rules:
  - from:
    - source:
        ipBlocks: ["1.2.3.4", "5.6.7.0/24"]

----------------------------------------

TITLE: Removing Kiali from Cluster
DESCRIPTION: Command to uninstall Kiali from the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl delete -f {{< github_file >}}/samples/addons/kiali.yaml

----------------------------------------

TITLE: Injecting HTTP Abort Fault in Istio
DESCRIPTION: This command applies an Istio virtual service rule to inject an HTTP 500 error for traffic to the ratings service when the user is 'jason'.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-ratings-test-abort.yaml@

----------------------------------------

TITLE: Setting Up Mixer Policy Checks
DESCRIPTION: YAML configuration for implementing access control using Mixer policy checks and a listchecker adapter

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: listchecker
metadata:
  name: path-checker
  namespace: istio-system
spec:
  overrides: ["/health", "/sport"]
  blacklist: false

----------------------------------------

TITLE: Setting up MongoDB Database for Bookinfo Ratings
DESCRIPTION: Creates a MongoDB user and collection to store ratings data for the Bookinfo sample application.

LANGUAGE: bash
CODE:
$ export MONGO_ADMIN_PASSWORD=<your MongoDB admin password>
$ export BOOKINFO_PASSWORD=<password>
$ cat <<EOF | mongo --ssl --sslAllowInvalidCertificates $MONGODB_HOST:$MONGODB_PORT -u admin -p $MONGO_ADMIN_PASSWORD --authenticationDatabase admin
use test
db.createUser(
   {
     user: "bookinfo",
     pwd: "$BOOKINFO_PASSWORD",
     roles: [ "read"]
   }
);
EOF

$ cat <<EOF | mongo --ssl --sslAllowInvalidCertificates $MONGODB_HOST:$MONGODB_PORT -u admin -p $MONGO_ADMIN_PASSWORD --authenticationDatabase admin
use test
db.createCollection("ratings");
db.ratings.insert(
  [{rating: 1},
   {rating: 1}]
);
EOF

----------------------------------------

TITLE: Disabling REQUEST_COUNT Metrics
DESCRIPTION: This Telemetry configuration disables the REQUEST_COUNT metric for both client and server modes.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: remove-request-count
  namespace: istio-system
spec:
  metrics:
    - providers:
        - name: prometheus
      overrides:
        - disabled: true
          match:
            mode: CLIENT_AND_SERVER
            metric: REQUEST_COUNT

----------------------------------------

TITLE: Configure YAML Frontmatter for 2022 Blog Posts
DESCRIPTION: YAML frontmatter configuration block that sets up a blog archive page for 2022 posts. Configures the page title, description, navigation weight, and enables sorting posts by publish date.

LANGUAGE: yaml
CODE:
---
title: 2022 Posts
description: Blog posts for 2022.
weight: 6
list_by_publishdate: true
---

----------------------------------------

TITLE: Updating Kops Cluster Configuration
DESCRIPTION: Performs the update of the Kops cluster configuration after making changes.

LANGUAGE: bash
CODE:
$ kops update cluster
$ kops update cluster --yes

----------------------------------------

TITLE: Correct Telemetry Configuration with TargetRef
DESCRIPTION: Example of the recommended way to configure a Telemetry resource using only the targetRef field for Kubernetes Gateway pods.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: telemetry-example
  namespace: default
spec:
  tracing:
  - randomSamplingPercentage: 10.00
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: bookinfo-gateway

----------------------------------------

TITLE: Getting Pod IP for Testing
DESCRIPTION: Retrieve the IP address of the newly deployed reviews v2 pod for testing purposes.

LANGUAGE: bash
CODE:
$ REVIEWS_V2_POD_IP=$(kubectl get pod -l app=reviews_test,version=v2 -o jsonpath='{.items[0].status.podIP}')
$ echo $REVIEWS_V2_POD_IP

----------------------------------------

TITLE: Displaying NoMatchingWorkloadsFound Warning in Istio
DESCRIPTION: This code snippet shows the warning message displayed when an authorization policy's selector doesn't match any pods in the cluster.

LANGUAGE: plaintext
CODE:
Warning [IST0127] (AuthorizationPolicy httpbin-nopods.httpbin) No matching workloads for this resource with the following labels: app=bogus-label,version=v1

----------------------------------------

TITLE: Configuring VirtualService for Access Control
DESCRIPTION: YAML configuration for controlling access to specific CNN paths via Istio routing rules

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-cnn-through-egress-gateway
spec:
  hosts:
  - edition.cnn.com
  gateways:
  - istio-egressgateway
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: cnn
        port:
          number: 443
      weight: 100

----------------------------------------

TITLE: Defining Istio Ingress Service in YAML
DESCRIPTION: This YAML snippet defines the Istio ingress service, exposing ports 80 and 443 for HTTP and HTTPS traffic. It sets up a LoadBalancer service with specific labels and selectors for Istio ingress.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: istio-ingress
  labels:
    istio: ingress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: http
  - port: 443
    name: https
  selector:
    istio: ingress

----------------------------------------

TITLE: Defining Event Parameters in YAML
DESCRIPTION: YAML frontmatter configuration defining event parameters including dates, impression limits and timeout settings for KubeCon NA 2019

LANGUAGE: yaml
CODE:
title: KubeCon North America 2019
period_start: 2019-11-04
period_end: 2019-11-21
max_impressions: 20
timeout: 20

----------------------------------------

TITLE: Checking Namespace Label for Ambient Mode in Istio
DESCRIPTION: This command checks if a namespace is labeled for ambient mode in Istio by displaying the 'istio.io/dataplane-mode' label.

LANGUAGE: bash
CODE:
$ kubectl get ns -L istio.io/dataplane-mode

----------------------------------------

TITLE: Defining external endpoints with ServiceEntry in Istio
DESCRIPTION: Creates a ServiceEntry to aggregate external endpoints for a service, setting locality for primary and failover endpoints.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-svc-dns
spec:
  hosts:
  - mydb.com
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
  endpoints:
  - address: dynamodb.us-east-1.amazonaws.com
    locality: us-east1
    ports:
      http: 80
  - address: dynamodb.us-west-1.amazonaws.com
    locality: us-west
    ports:
      http: 80

----------------------------------------

TITLE: Workload Configuration YAML Example
DESCRIPTION: Example of concise workload configuration format used by Ztunnel showing pod details and service information.

LANGUAGE: yaml
CODE:
name: helloworld-v1-55446d46d8-ntdbk
namespace: default
serviceAccount: helloworld
node: ambient-worker2
protocol: TCP
status: Healthy
waypointAddresses: []
workloadIp: 10.244.2.8
canonicalName: helloworld
canonicalRevision: v1
workloadName: helloworld-v1
workloadType: deployment

----------------------------------------

TITLE: Creating Default Revision Tag for Istio
DESCRIPTION: Create a 'default' revision tag for the new Istio version.

LANGUAGE: bash
CODE:
$ helm template istiod istio/istiod -s templates/revision-tags.yaml --set revisionTags="{default}" --set revision={{< istio_full_version_revision >}} -n istio-system | kubectl apply -f -

----------------------------------------

TITLE: Configuring Mesh-wide Telemetry
DESCRIPTION: Example of configuring mesh-wide telemetry behavior in the istio-system namespace, setting up tracing with custom tags and sampling percentage.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: localtrace
    customTags:
      foo:
        literal:
          value: bar
    randomSamplingPercentage: 100

----------------------------------------

TITLE: Installing MongoDB Service
DESCRIPTION: Deploys the MongoDB service required for the Bookinfo application.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-db.yaml@

----------------------------------------

TITLE: Initializing Ratings Database in MySQL
DESCRIPTION: Download the SQL script to initialize the ratings database and execute it in MySQL. This sets up the necessary tables and initial data for the Bookinfo ratings service.

LANGUAGE: bash
CODE:
$ curl -LO {{< github_file >}}/samples/bookinfo/src/mysql/mysqldb-init.sql
$ mysql -u root -ppassword < mysqldb-init.sql

----------------------------------------

TITLE: Configuring Envoy flag mesh-wide in Istio YAML
DESCRIPTION: Example YAML configuration for setting the 'envoy.reloadable_features.explicit_internal_address_config' flag mesh-wide in Istio. This configuration helps mitigate the 'x-envoy' header manipulation vulnerability.

LANGUAGE: yaml
CODE:
meshConfig:
  defaultConfig:
    runtimeValues:
      "envoy.reloadable_features.explicit_internal_address_config": "true"

----------------------------------------

TITLE: Defining Istio Operator Configuration
DESCRIPTION: Creates an IstioOperator custom resource to configure Istio with SPIRE integration.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./istio.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
spec:
  profile: default
  meshConfig:
    trustDomain: example.org
  values:
    sidecarInjectorWebhook:
      templates:
        spire: |
          labels:
            spiffe.io/spire-managed-identity: "true"
          spec:
            containers:
            - name: istio-proxy
              volumeMounts:
              - name: workload-socket
                mountPath: /run/secrets/workload-spiffe-uds
                readOnly: true
            volumes:
              - name: workload-socket
                csi:
                  driver: "csi.spiffe.io"
                  readOnly: true
  components:
    ingressGateways:
      - name: istio-ingressgateway
        enabled: true
        label:
          istio: ingressgateway
        k8s:
          overlays:
            - apiVersion: apps/v1
              kind: Deployment
              name: istio-ingressgateway
              patches:
                - path: spec.template.spec.volumes.[name:workload-socket]
                  value:
                    name: workload-socket
                    csi:
                      driver: "csi.spiffe.io"
                      readOnly: true
                - path: spec.template.spec.containers.[name:istio-proxy].volumeMounts.[name:workload-socket]
                  value:
                    name: workload-socket
                    mountPath: "/run/secrets/workload-spiffe-uds"
                    readOnly: true
                - path: spec.template.spec.initContainers
                  value:
                    - name: wait-for-spire-socket
                      image: busybox:1.36
                      volumeMounts:
                        - name: workload-socket
                          mountPath: /run/secrets/workload-spiffe-uds
                          readOnly: true
                      env:
                        - name: CHECK_FILE
                          value: /run/secrets/workload-spiffe-uds/socket
                      command:
                        - sh
                        - "-c"
                        - |-
                          echo "$(date -Iseconds)" Waiting for: ${CHECK_FILE}
                          while [[ ! -e ${CHECK_FILE} ]] ; do
                            echo "$(date -Iseconds)" File does not exist: ${CHECK_FILE}
                            sleep 15
                          done
                          ls -l ${CHECK_FILE}
EOF

----------------------------------------

TITLE: Viewing Waypoint Logs
DESCRIPTION: Command to view logs from a waypoint deployment.

LANGUAGE: bash
CODE:
kubectl logs deploy/waypoint

----------------------------------------

TITLE: Defining Istio Documentation Page Metadata in YAML
DESCRIPTION: YAML frontmatter metadata block that defines the documentation page properties including title, description, weight for ordering, and test parameter.

LANGUAGE: yaml
CODE:
---
title: Overview
description: A high-level introduction to Istio and service mesh.
weight: 5
test: table-of-contents
---

----------------------------------------

TITLE: Checking Policy Enforcement Status in Istio
DESCRIPTION: This command checks the status of policy enforcement for an Istio mesh by examining the 'disablePolicyChecks' setting in the Istio ConfigMap.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get cm istio -o jsonpath="{@.data.mesh}" | grep disablePolicyChecks

----------------------------------------

TITLE: Displaying NoServerCertificateVerificationDestinationLevel Error in Istio
DESCRIPTION: This snippet shows the error message displayed when no caCertificates are set in a destination rule that requires them for TLS verification.

LANGUAGE: plaintext
CODE:
Error [IST0128] (DestinationRule db-tls.default) DestinationRule default/db-tls in namespace default has TLS mode set to SIMPLE but no caCertificates are set to validate server identity for host: mydbserver.prod.svc.cluster.local

----------------------------------------

TITLE: Warning Callout Examples in Istio Docs
DESCRIPTION: Demonstrates three variations of warning callouts: single paragraph, two paragraphs, and with nested text block.

LANGUAGE: markdown
CODE:
{{< warning >}}
This is a warning
{{< /warning >}}

{{< warning >}}
This is a warning

with two paragraphs
{{< /warning >}}

{{< warning >}}
This is a warning

with two paragraphs

{{< text plain >}}
A nested text block
{{< /text >}}

{{< /warning >}}

----------------------------------------

TITLE: Correcting DENY AuthorizationPolicy to reject plain text traffic in YAML
DESCRIPTION: Updated YAML configuration for a DENY AuthorizationPolicy that explicitly rejects plain text traffic by adding a rule to match empty namespaces. This configuration addresses the issue of potentially allowing unintended plain text traffic.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: reject-ns-foo
spec:
  action: DENY
  rules:
  - from:
    - source:
        namespaces: ["foo"]
  # Add the following rule to explicitly reject plain text traffic.
  - from:
    - source:
        notNamespaces: ["*"]

----------------------------------------

TITLE: Configuring Istio Snippet 1
DESCRIPTION: This snippet provides configuration settings for Istio. It spans two lines and is labeled as SNIP1.

LANGUAGE: yaml
CODE:
This is chunk 1
on two lines

----------------------------------------

TITLE: Updating Stable Tag to New Revision
DESCRIPTION: Command to update the prod-stable tag to point to the new 1-10-0 revision

LANGUAGE: bash
CODE:
$ istioctl x revision tag set prod-stable --revision 1-10-0 --overwrite

----------------------------------------

TITLE: Testing Direct Pod Communication
DESCRIPTION: Commands to send requests directly to a specific version (v2) of the reviews pod using its IP address.

LANGUAGE: bash
CODE:
export REVIEWS_V2_POD_IP=$(kubectl get pod -l version=v2,app=reviews -o jsonpath='{.items[0].status.podIP}')
kubectl exec deploy/curl -- curl -s http://$REVIEWS_V2_POD_IP:9080/reviews/1

----------------------------------------

TITLE: Configuring Egress Gateway for Upstream Service
DESCRIPTION: YAML configuration for an Istio Gateway resource to handle egress traffic to the upstream httpbin service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: "httpbin-egress"
  namespace: "httpbin"
spec:
  selector:
    istio: egressgateway
    service.istio.io/canonical-name: "httpbin-egress"
  servers:
  - hosts:
    - "<my-proxied-service-hostname>"
    port:
      number: 80
      name: http
      protocol: HTTP

----------------------------------------

TITLE: Initializing Wasm Project with wasme
DESCRIPTION: Command to initialize a new WebAssembly project using the wasme CLI tool, specifically for C++ development targeting Istio 1.5.x.

LANGUAGE: bash
CODE:
wasme init ./filter --language cpp --platform istio --platform-version 1.5.x

----------------------------------------

TITLE: Displaying Pod Information Command Example
DESCRIPTION: Example showing proper placeholder usage in a kubectl command with angle brackets.

LANGUAGE: markdown
CODE:
1. Display information about a pod:

    {{</* text bash */>}}
    $ kubectl describe pod <pod-name>
    {{</* /text */>}}

    Where `<pod-name>` is the name of one of your pods.

----------------------------------------

TITLE: Configuring Sidecar Bypass for External MongoDB in Istio
DESCRIPTION: YAML configuration snippet for setting up the init container to bypass the sidecar for external MongoDB traffic. This is done by specifying the CIDR of the MongoDB in the -x argument.

LANGUAGE: yaml
CODE:
- -x
- "169.47.232.211/32"

----------------------------------------

TITLE: Terminating All Details Service Pods
DESCRIPTION: Execute chaos testing by terminating the Ruby process across all details service pods to test system resilience.

LANGUAGE: bash
CODE:
for pod in $(kubectl get pods -l app=details -o jsonpath='{.items[*].metadata.name}'); do echo terminating "$pod"; kubectl exec "$pod" -- pkill ruby; done

----------------------------------------

TITLE: Example Status Field Output
DESCRIPTION: Sample YAML output showing the structure of the status field including conditions and validation messages.

LANGUAGE: yaml
CODE:
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2019-12-26T22:06:56Z"
    message: "1 Error and 1 Warning found. See validationMessages field for details"
    reason: "errorsFound"
    status: "False"
    type: PassedAnalysis
  validationMessages:
  - code: IST0101
    level: Error
    message: 'Referenced gateway not found: "bogus-gateway"'
  - code: IST0102
    level: Warn
    message: 'mTLS not enabled for virtual service'

----------------------------------------

TITLE: Modifying Bookinfo ratings deployment for external MySQL
DESCRIPTION: Modifies the Kubernetes deployment spec for the ratings v2 service to use the external MySQL database.

LANGUAGE: yaml
CODE:
- name: MYSQL_DB_HOST
  value: mysqldb
- name: MYSQL_DB_PORT
  value: "3306"
- name: MYSQL_DB_USER
  value: root
- name: MYSQL_DB_PASSWORD
  value: password

----------------------------------------

TITLE: Installing Istio on cluster1 using IstioOperator
DESCRIPTION: Applies the IstioOperator configuration to cluster1 using istioctl.

LANGUAGE: bash
CODE:
istioctl install --context="${CTX_CLUSTER1}" -f cluster1.yaml

----------------------------------------

TITLE: Defining Web Application Protection Policy
DESCRIPTION: YAML configuration to define security policies for protecting web applications using OIDC authentication

LANGUAGE: yaml
CODE:
apiVersion: "security.cloud.ibm.com/v1"
kind: Policy
metadata:
    name: my-sample-web-policy
    namespace: sample-namespace
spec:
    targets:
    - serviceName: <kubernetes-service-name-to-protect>
        paths:
        - prefix: /webapp
            method: ALL
            policies:
            - policyType: oidc
                config: my-oidc-provider-config
                rules: // optional
                - claim: iss
                    match: ALL
                    source: access_token
                    values:
                    - <expected-issuer-id>
                - claim: scope
                    match: ALL
                    source: access_token
                    values:
                    - openid

----------------------------------------

TITLE: Deploying Application Workloads
DESCRIPTION: Creates application namespaces, labels them for association with specific control planes, and deploys curl and httpbin applications in each namespace.

LANGUAGE: bash
CODE:
$ kubectl create ns app-ns-1
$ kubectl create ns app-ns-2
$ kubectl create ns app-ns-3
$ kubectl label ns app-ns-1 usergroup=usergroup-1 istio.io/rev=usergroup-1
$ kubectl label ns app-ns-2 usergroup=usergroup-2 istio.io/rev=usergroup-2
$ kubectl label ns app-ns-3 usergroup=usergroup-2 istio.io/rev=usergroup-2
$ kubectl -n app-ns-1 apply -f samples/curl/curl.yaml
$ kubectl -n app-ns-1 apply -f samples/httpbin/httpbin.yaml
$ kubectl -n app-ns-2 apply -f samples/curl/curl.yaml
$ kubectl -n app-ns-2 apply -f samples/httpbin/httpbin.yaml
$ kubectl -n app-ns-3 apply -f samples/curl/curl.yaml
$ kubectl -n app-ns-3 apply -f samples/httpbin/httpbin.yaml

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.6 release notes document, including title, description, release version, and publication date.

LANGUAGE: yaml
CODE:
---
title: Istio 1.6 Change Notes
description: Istio 1.6 release notes.
weight: 10
release: 1.6
subtitle: Minor Release
linktitle: 1.6 Change Notes
publishdate: 2020-05-21
---

----------------------------------------

TITLE: Uninstalling SPIRE
DESCRIPTION: Removes SPIRE by uninstalling its Helm charts.

LANGUAGE: bash
CODE:
$ helm delete -n spire-server spire

LANGUAGE: bash
CODE:
$ helm delete -n spire-server spire-crds

----------------------------------------

TITLE: Configuring Istio Snippet 2
DESCRIPTION: This snippet contains a single line of configuration for Istio and is labeled as SNIP2.

LANGUAGE: yaml
CODE:
This is chunk 2

----------------------------------------

TITLE: Uninstalling Old Istio Revision
DESCRIPTION: Command to remove the old Istio revision (1-9-5) after successful upgrade

LANGUAGE: bash
CODE:
$ istioctl x uninstall --revision 1-9-5

----------------------------------------

TITLE: Embedding CLI Commands in Markdown
DESCRIPTION: Demonstrates how to use the 'text' shortcode to embed CLI commands with bash syntax highlighting.

LANGUAGE: markdown
CODE:
{{</* text bash */>}}
$ echo "Hello"
{{</* /text */>}}

----------------------------------------

TITLE: Creating Dry-Run Authorization Policy in Istio
DESCRIPTION: Creates an Istio AuthorizationPolicy with the dry-run annotation to deny access to the '/headers' path without enforcing it.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: deny-path-headers
  annotations:
    "istio.io/dry-run": "true"
spec:
  selector:
    matchLabels:
      app: httpbin
  action: DENY
  rules:
  - to:
    - operation:
        paths: ["/headers"]

----------------------------------------

TITLE: Configuring Istio for cert-manager's istio-csr Compatibility
DESCRIPTION: This YAML configuration disables ALPN enforcement in Istio's gRPC communication to maintain compatibility with cert-manager's istio-csr implementation. This workaround is necessary until a fixed version of istio-csr is released.

LANGUAGE: yaml
CODE:
meshConfig:
  defaultConfig:
    proxyMetadata:
      GRPC_ENFORCE_ALPN_ENABLED: "false"

----------------------------------------

TITLE: Sending Test Requests Through Productpage Service
DESCRIPTION: Command to send HTTP requests to the productpage service via curl pod to test routing.

LANGUAGE: bash
CODE:
kubectl exec deploy/curl -- curl -s http://productpage:9080/productpage

----------------------------------------

TITLE: Creating Istio Operator Configuration
DESCRIPTION: YAML configuration for the Istio Operator, specifying the default profile, version tag, and outbound traffic policy set to REGISTRY_ONLY to block external communications not specified by ServiceEntry resources.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: istio-operator
  namespace: istio-operator
spec:
  profile: default
  tag: 1.8.0
  meshConfig:
    accessLogFile: /dev/stdout
    outboundTrafficPolicy:
      mode: REGISTRY_ONLY

----------------------------------------

TITLE: Updating Revision Tag to 1.10
DESCRIPTION: Command to update the 'stable' revision tag to point to the new 1.10.0 revision

LANGUAGE: bash
CODE:
istioctl x revision tag set stable --revision 1-10-0 --overwrite

----------------------------------------

TITLE: Enabling CryptoMB for Istio Ingress Gateway with Performance Optimizations
DESCRIPTION: This YAML configuration shows how to enable CryptoMB for the Istio ingress gateway with specific performance optimizations. It includes settings for the SDS service and sidecar injector to use CryptoMB templates.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  components:
    ingressGateways:
    - enabled: true
      name: istio-ingressgateway
      k8s:
        # this controls the SDS service which configures ingress gateway
        podAnnotations:
          proxy.istio.io/config: |
            privateKeyProvider:
              cryptomb:
                pollDelay: 1ms
  values:
    # Annotate pods with
    #     inject.istio.io/templates: sidecar, cryptomb
    sidecarInjectorWebhook:
      templates:
        cryptomb: |
          spec:
            containers:
            - name: istio-proxy

----------------------------------------

TITLE: Testing HTTP Request to Ratings Service
DESCRIPTION: Execute an HTTP request from a testing pod to the ratings service to verify connectivity and functionality.

LANGUAGE: bash
CODE:
kubectl exec $(kubectl get pod -l app=curl -o jsonpath='{.items[0].metadata.name}') -- curl -sS http://ratings:9080/ratings/7

----------------------------------------

TITLE: Filtering Access Logs by Workload Mode in Istio
DESCRIPTION: This YAML configuration disables inbound access logging for the 'httpbin' service. It creates a Telemetry resource that matches the 'app: httpbin' label and disables logging for SERVER mode.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: disable-httpbin-logging
spec:
  selector:
    matchLabels:
      app: httpbin
  accessLogging:
  - providers:
    - name: otel
    match:
      mode: SERVER
    disabled: true

----------------------------------------

TITLE: Accessing Prometheus Dashboard
DESCRIPTION: Sets up port-forwarding to access the Prometheus dashboard for metric visualization.

LANGUAGE: bash
CODE:
$ istioctl dashboard prometheus

----------------------------------------

TITLE: Defining Kubernetes Service in YAML
DESCRIPTION: Example of a Kubernetes Service resource definition for the httpbin service.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: foo
spec:
  selector:
    app: httpbin
    version: v1
  ports:
    # omitted

----------------------------------------

TITLE: Installing Istio with SPIRE Integration
DESCRIPTION: Applies the Istio configuration with SPIRE integration using istioctl.

LANGUAGE: bash
CODE:
$ istioctl install --skip-confirmation -f ./istio.yaml

----------------------------------------

TITLE: YAML Front Matter for Istio Release Documentation
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.21.1 release documentation page, including title, publication date, and release version.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 1.21.1
linktitle: 1.21.1
subtitle: Patch Release
description: Istio 1.21.1 patch release.
publishdate: 2024-04-08
release: 1.21.1
---

----------------------------------------

TITLE: Monitoring Istio Log Files
DESCRIPTION: Tails the Istio error and standard log files continuously.

LANGUAGE: bash
CODE:
tail /var/log/istio/istio.err.log /var/log/istio/istio.log -Fq -n 100

----------------------------------------

TITLE: Advanced Text Shortcode Usage
DESCRIPTION: Demonstrates the extended form of the 'text' shortcode with additional attributes for advanced formatting.

LANGUAGE: markdown
CODE:
{{</* text syntax="bash" outputis="json" */>}}
$ kubectl -n istio-system logs $(kubectl -n istio-system get pods -l istio-mixer-type=telemetry -o jsonpath='{.items[0].metadata.name}') mixer | grep \"instance\":\"newlog.logentry.istio-system\"
{"level":"warn","ts":"2017-09-21T04:33:31.249Z","instance":"newlog.logentry.istio-system","destination":"details","latency":"6.848ms","responseCode":200,"responseSize":178,"source":"productpage","user":"unknown"}
{{</* /text */>}}

----------------------------------------

TITLE: Verifying Connection Limits Configuration
DESCRIPTION: Retrieves pod name and checks runtime configuration to verify the connection limits are properly set.

LANGUAGE: bash
CODE:
ISTIO_INGRESS_PODNAME=$(kubectl get pods -l app=istio-ingressgateway -n istio-system  -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace istio-system exec -i -t  "${ISTIO_INGRESS_PODNAME}" -c istio-proxy -- curl -sS http://localhost:15000/runtime

LANGUAGE: json
CODE:
{
 "entries": {
  "overload.global_downstream_max_connections": {
    "layer_values": [
      "",
      "250000",
      ""
    ],
    "final_value": "250000"
  }
 },
 "layers": [
  "static_layer_0",
  "admin"
 ]
}

----------------------------------------

TITLE: Certificate Files Output Format
DESCRIPTION: Example output showing the expected certificate and key files with their permissions and sizes in the mounted directory.

LANGUAGE: plain
CODE:
-rwxr-xr-x    1 root     root          2209 Feb 25 13:06 cert-chain.pem
-rwxr-xr-x    1 root     root          1679 Feb 25 13:06 key.pem
-rwxr-xr-x    1 root     root          1054 Feb 25 13:06 root-cert.pem

----------------------------------------

TITLE: YAML Front Matter Configuration for Istio 1.11.5 Release
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.11.5 release announcement, including title, publication date, and URL aliases.

LANGUAGE: yaml
CODE:
title: Announcing Istio 1.11.5
linktitle: 1.11.5
subtitle: Patch Release
description: Istio 1.11.5 patch release.
publishdate: 2021-12-02
release: 1.11.5
aliases:
    - /news/announcing-1.11.5

----------------------------------------

TITLE: Sample Metric for BlackHoleCluster HTTP Traffic
DESCRIPTION: Example of the istio_requests_total metric emitted when HTTP traffic is blocked by the BlackHoleCluster.

LANGUAGE: json
CODE:
{
  "metric": {
    "__name__": "istio_requests_total",
    "connection_security_policy": "unknown",
    "destination_app": "unknown",
    "destination_principal": "unknown",
    "destination_service": "httpbin.org",
    "destination_service_name": "BlackHoleCluster",
    "destination_service_namespace": "unknown",
    "destination_version": "unknown",
    "destination_workload": "unknown",
    "destination_workload_namespace": "unknown",
    "instance": "100.96.2.183:42422",
    "job": "istio-mesh",
    "permissive_response_code": "none",
    "permissive_response_policyid": "none",
    "reporter": "source",
    "request_protocol": "http",
    "response_code": "502",
    "response_flags": "-",
    "source_app": "sleep",
    "source_principal": "unknown",
    "source_version": "unknown",
    "source_workload": "sleep",
    "source_workload_namespace": "default"
  },
  "value": [
    1567034251.717,
    "1"
  ]
}

----------------------------------------

TITLE: Checking Ztunnel TLS Certificates
DESCRIPTION: Views the TLS certificates received from istiod for mTLS communication between services.

LANGUAGE: bash
CODE:
$ istioctl ztunnel-config certificates "$ZTUNNEL".istio-system

----------------------------------------

TITLE: Configuring Cluster 1 Service Entry in Istio
DESCRIPTION: Defines a ServiceEntry for the payments service in Cluster 1, specifying endpoints across multiple regions with their respective load balancer addresses and localities.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: payments.global-se
spec:
  addresses:
  - 240.0.0.10
  endpoints:
  - address: ef394f...us-east-2.elb.amazonaws.com
    locality: us-east-2
    ports:
      http: 15443
  - address: ad38bc...us-west-2.elb.amazonaws.com
    locality: us-west-2
    ports:
      http: 15443
  hosts:
  - payments.global
  location: MESH_INTERNAL
  ports:
  - name: http
    number: 80
    protocol: http
  resolution: DNS

----------------------------------------

TITLE: Defining Exiting Pod Configuration
DESCRIPTION: YAML configuration for a pod that exits after one second to demonstrate sidecar termination behavior.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: sleep
spec:
  restartPolicy: Never
  containers:
- name: sleep
  image: istio/base
  command: ["/bin/sleep", "1"]

----------------------------------------

TITLE: Creating Links in Documentation
DESCRIPTION: Shows different ways to create external, relative, and absolute links in documentation content.

LANGUAGE: markdown
CODE:
[Descriptive text for the link](https://mysite/myfile.html)
[This links to a sibling or child page](./sub-dir/child-page.html)
[This links to a page on the about section](/about/page/)

----------------------------------------

TITLE: Patching Istio Ingress Gateway Deployment
DESCRIPTION: Applies a patch to the ingress gateway deployment using gateway-patch.yaml to implement the new configuration.

LANGUAGE: bash
CODE:
kubectl --namespace istio-system patch deployment istio-ingressgateway --patch "$(cat gateway-patch.yaml)"

----------------------------------------

TITLE: Upgrading Ztunnel with Revision
DESCRIPTION: Upgrades the Ztunnel DaemonSet using revision-based approach.

LANGUAGE: bash
CODE:
$ helm upgrade ztunnel istio/ztunnel -n istio-system --set revision="$REVISION" --wait

----------------------------------------

TITLE: Updating Helm Repository for Istio
DESCRIPTION: Updates the Helm repository to ensure the latest Istio charts are available for the upgrade process.

LANGUAGE: bash
CODE:
$ helm repo update istio

----------------------------------------

TITLE: Setting Request Timeout for Reviews Service using Istio VirtualService
DESCRIPTION: This snippet shows how to set a 0.5-second request timeout for calls to the reviews service using Istio's VirtualService.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
    timeout: 0.5s
EOF

----------------------------------------

TITLE: Generating Istio Manifest before Installation
DESCRIPTION: This command generates an Istio manifest for the default profile before installation. The generated manifest can be used to inspect the installation details or track changes over time.

LANGUAGE: bash
CODE:
$ istioctl manifest generate > $HOME/generated-manifest.yaml

----------------------------------------

TITLE: Rendering Multiple CLI Commands with Output
DESCRIPTION: Shows how to include multiple CLI commands and their output in a single code block using the 'text' shortcode.

LANGUAGE: markdown
CODE:
{{</* text bash */>}}
$ echo "Hello" >file.txt
$ cat file.txt
Hello
{{</* /text */>}}

----------------------------------------

TITLE: Configuring DENY AuthorizationPolicy with mTLS-only fields in YAML
DESCRIPTION: Example YAML configuration for a DENY AuthorizationPolicy that uses mTLS-only fields to reject requests from the namespace 'foo'. This configuration may fail to reject plain text requests from the 'foo' namespace due to the mTLS-only field behavior.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: reject-ns-foo
spec:
  action: DENY
  rules:
  - from:
    - source:
        namespaces: ["foo"]

----------------------------------------

TITLE: YAML Release Metadata
DESCRIPTION: YAML frontmatter defining metadata for the Istio 1.11.3 release announcement, including title, publish date, and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 1.11.3
linktitle: 1.11.3
subtitle: Patch Release
description: Istio 1.11.3 patch release.
publishdate: 2021-09-23
release: 1.11.3
aliases:
    - /news/announcing-1.11.3
---

----------------------------------------

TITLE: Creating Simple Istio Ingress Resource
DESCRIPTION: Demonstrates creating a basic Ingress resource that works with Istio. The configuration specifies a host (example.com), a path prefix (/helloworld), and routes traffic to a backend service running on port 8000.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-ingress
  annotations:
    kubernetes.io/ingress.class: istio
spec:
  rules:
  - host: example.com
    http:
      paths:
      - path: /helloworld
        pathType: Prefix
        backend:
          service:
            name: myservice
            port:
              number: 8000

----------------------------------------

TITLE: Deploying httpbin-v1 Service in Kubernetes
DESCRIPTION: Kubernetes deployment configuration for version 1 of the httpbin service with access logging enabled.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        command: ["gunicorn", "--access-logfile", "-", "-b", "0.0.0.0:80", "httpbin:app"]
        ports:
        - containerPort: 80

----------------------------------------

TITLE: Adding Icons with Hugo Shortcode
DESCRIPTION: Demonstrates how to embed common icons like warning, idea, checkmark, cancel and tip within content.

LANGUAGE: markdown
CODE:
{{</* warning_icon */>}}
{{</* idea_icon */>}}
{{</* checkmark_icon */>}}
{{</* cancel_icon */>}}
{{</* tip_icon */>}}

----------------------------------------

TITLE: Basic ServiceEntry Configuration in Istio
DESCRIPTION: Example of a basic ServiceEntry configuration for defining service endpoints using static IP addresses.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: svc1
spec:
  hosts:
  - svc1.internal.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: STATIC
  endpoints:
  - address: 1.1.1.1
  - address: 2.2.2.2
  ....

----------------------------------------

TITLE: EnvoyFilter with Relative Operation Example
DESCRIPTION: Example of an EnvoyFilter configuration using the relative INSERT_BEFORE operation, which requires careful ordering and can lead to potential issues.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-relative
  namespace: bookinfo
spec:
  workloadSelector:
    labels:
      app: reviews2
  configPatches:
    # The first patch adds the Lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        portNumber: 8080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value: # Lua filter specification
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
              local headers, body = request_handle:httpCall(
               "lua_cluster",
               {
                [":method"] = "POST",
                [":path"] = "/acl",
                [":authority"] = "internal.org.net"
               },
              "authorize call",
              5000)
            end

----------------------------------------

TITLE: Exposing Istiod Through Ingress in Bash
DESCRIPTION: Command to apply the configuration for exposing Istiod through ingress gateway using a sample configuration file.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/multicluster/expose-istiod.yaml@

----------------------------------------

TITLE: Checking Pod Binding Issues with Istioctl
DESCRIPTION: Command to detect pods that may be impacted by the new inbound forwarding behavior, specifically identifying pods binding to localhost on service-exposed ports.

LANGUAGE: bash
CODE:
$ istioctl experimental precheck
Error [IST0143] (Pod echo-local-849647c5bd-g9wxf.default) Port 443 is exposed in a Service but listens on localhost. It will not be exposed to other pods.
Error [IST0143] (Pod echo-local-849647c5bd-g9wxf.default) Port 7070 is exposed in a Service but listens on localhost. It will not be exposed to other pods.
Error: Issues found when checking the cluster. Istio may not be safe to install or upgrade.
See https://istio.io/latest/docs/reference/config/analysis for more information about causes and resolutions.

----------------------------------------

TITLE: TCP Metrics Example Output
DESCRIPTION: Sample output showing TCP connection metrics collected by Prometheus.

LANGUAGE: plain
CODE:
istio_tcp_connections_opened_total{
destination_version="v1",
instance="172.17.0.18:42422",
job="istio-mesh",
canonical_service_name="ratings-v2",
canonical_service_revision="v2"}

----------------------------------------

TITLE: Cross-Cluster Load Balancing Test Command
DESCRIPTION: Command to test cross-cluster load balancing by making multiple requests to the helloworld service.

LANGUAGE: bash
CODE:
for i in $(seq 10); do kubectl --context=$CTX_CLUSTER1 -n sample exec curl-dd98b5f48-djwdw -c curl -- curl -s helloworld:5000/hello; done

----------------------------------------

TITLE: Cleaning Up Istio Resources
DESCRIPTION: Commands to remove the created Istio resources including the gateway, virtual services, service entries, and destination rule.

LANGUAGE: bash
CODE:
$ kubectl delete gateway proxy
$ kubectl delete virtualservice cnn httpbin
$ kubectl delete serviceentry cnn httpbin-ext localhost
$ kubectl delete destinationrule localhost

----------------------------------------

TITLE: Configuring NetworkPolicy to Allow Ambient Health Probes
DESCRIPTION: This YAML snippet demonstrates how to modify a Kubernetes NetworkPolicy to allow ambient health probe traffic by explicitly allowing traffic from the link-local address used by Istio ambient mode.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-ingress-allow-kubelet-healthprobes
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: my-app
  ingress:
    - from:
      - ipBlock:
          cidr: 169.254.7.127/32

----------------------------------------

TITLE: Updating Namespace Labels for Istio Injection
DESCRIPTION: Commands to remove default injection label and add revision-specific label to a namespace

LANGUAGE: bash
CODE:
$ kubectl label ns istioinaction istio-injection-
$ kubectl label ns istioinaction istio.io/rev=prod-stable

----------------------------------------

TITLE: Declarative Wasm Deployment Configuration
DESCRIPTION: YAML configuration for deploying a WebAssembly filter using the FilterDeployment custom resource. Demonstrates declarative deployment approach using the wasme operator.

LANGUAGE: yaml
CODE:
apiVersion: wasme.io/v1
kind: FilterDeployment
metadata:
  name: bookinfo-custom-filter
  namespace: bookinfo
spec:
  deployment:
    istio:
      kind: Deployment
      labels:
        app: details
  filter:
    config: 'world'
    image: webassemblyhub.io/ceposta/demo-add-header:v0.2

----------------------------------------

TITLE: Creating LoadBalancer Service
DESCRIPTION: Defines a Kubernetes service of type LoadBalancer for the custom ingress gateway with HTTP/HTTPS ports.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-ingressgateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: my-ingressgateway
    istio: my-ingressgateway
spec:
  type: LoadBalancer
  selector:
    app: my-ingressgateway
    istio: my-ingressgateway
  ports:
    - name: http2
      nodePort: 32380
      port: 80
      targetPort: 80
    - name: https
      nodePort: 32390
      port: 443
    - name: tcp
      nodePort: 32400
      port: 31400

----------------------------------------

TITLE: Deploying Bookinfo ratings v2 with MySQL
DESCRIPTION: Applies the modified Kubernetes deployment for ratings v2 that uses MySQL.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-ratings-v2-mysql.yaml@

----------------------------------------

TITLE: Environment Variable Configuration in YAML
DESCRIPTION: Configuration settings for controlling host port stripping and JWT key refresh intervals in Istio deployments.

LANGUAGE: yaml
CODE:
values.global.jwtPolicy: first-party-jwt
values.global.arch
ISTIO_GATEWAY_STRIP_HOST_PORT: false
PILOT_JWT_PUB_KEY_REFRESH_INTERVAL: 20m

----------------------------------------

TITLE: Creating IAM Policy for AWS NLB in JSON
DESCRIPTION: JSON policy to allow necessary permissions for provisioning a network load balancer in AWS. This policy grants restricted permissions for managing listeners, target groups, and load balancer policies.

LANGUAGE: json
CODE:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "kopsK8sNLBMasterPermsRestrictive",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeVpcs",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:CreateTargetGroup",
                "elasticloadbalancing:DeleteListener",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:DescribeListeners",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:DescribeTargetHealth",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:ModifyTargetGroup",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeVpcs",
                "ec2:DescribeRegions"
            ],
            "Resource": "*"
        }
    ]
}

----------------------------------------

TITLE: Retrieving Istio Sidecar Environment Variable for Health Probes
DESCRIPTION: Extracts the ISTIO_KUBE_APP_PROBERS environment variable from the sidecar container, showing the probe rewrite mapping.

LANGUAGE: bash
CODE:
$ kubectl get pod "$LIVENESS_POD" -n istio-io-health-rewrite -o=jsonpath="{.spec.containers[1].env[?(@.name=='ISTIO_KUBE_APP_PROBERS')]}"

----------------------------------------

TITLE: Serving the Istio Website Locally with Docker
DESCRIPTION: This command builds the Istio website and starts a local web server to host it. It requires Docker to be installed and the command to be run from the root of the istio.io repository fork.

LANGUAGE: bash
CODE:
$ make serve

----------------------------------------

TITLE: Configuring Log Output Level for Istioctl in Bash
DESCRIPTION: This command demonstrates how to set different log output levels for specific scopes when running the 'istioctl analyze' command. It sets the 'klog' scope to 'none' and the 'cli' scope to 'info'.

LANGUAGE: bash
CODE:
$ istioctl analyze --log_output_level klog:none,cli:info

----------------------------------------

TITLE: Waiting for Istio CRDs Creation in Kubernetes
DESCRIPTION: This command waits for all jobs in the istio-system namespace to reach the 'complete' condition. It ensures that all Istio Custom Resource Definitions (CRDs) are fully created before proceeding with further steps in the deployment process.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system wait --for=condition=complete job --all

----------------------------------------

TITLE: Pilot DNS Certificate Path Configuration
DESCRIPTION: Defines the standard file paths where Pilot loads its DNS serving certificate, TLS key, and root certificate files. These paths are used for certificate management and TLS configuration.

LANGUAGE: plain
CODE:
/var/run/secrets/istiod/tls/tls.crt
/var/run/secrets/istiod/tls/tls.key
/var/run/secrets/istiod/ca/root-cert.pem

----------------------------------------

TITLE: Defining YAML Frontmatter for Istio 1.0.x Release Page
DESCRIPTION: This YAML frontmatter defines metadata for a webpage listing Istio 1.0.x release announcements. It specifies the title, description, weight for ordering, and layout settings.

LANGUAGE: yaml
CODE:
---
title: 1.0.x Releases
description: Announcements for the 1.0 release and its associated patch releases.
weight: 29
list_by_publishdate: true
layout: release-grid
---

----------------------------------------

TITLE: Installing Gateway API CRDs
DESCRIPTION: Command to install Gateway API Custom Resource Definitions in a Kubernetes cluster

LANGUAGE: bash
CODE:
kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
  { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref={{< k8s_gateway_api_version >}}" | kubectl apply -f -; }

----------------------------------------

TITLE: Creating Service Entries for External Services
DESCRIPTION: Defines ServiceEntry resources for httpbin.org and edition.cnn.com to make them accessible from the Istio ingress gateway. This step is necessary for routing traffic to external services.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: httpbin-ext
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
  location: MESH_EXTERNAL
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: cnn
spec:
  hosts:
  - edition.cnn.com
  ports:
  - number: 443
    name: tls
    protocol: TLS
  resolution: DNS
  location: MESH_EXTERNAL
EOF

----------------------------------------

TITLE: Inspecting Rewritten Liveness Probe in Istio
DESCRIPTION: Retrieves and displays the rewritten liveness probe configuration from the deployed pod.

LANGUAGE: bash
CODE:
$ kubectl get pod "$LIVENESS_POD" -n istio-io-health-rewrite -o json | jq '.spec.containers[0].livenessProbe.httpGet'

----------------------------------------

TITLE: Cleaning Up Istio Health Check Example Resources
DESCRIPTION: Removes the Kubernetes namespaces created for the health check examples.

LANGUAGE: bash
CODE:
$ kubectl delete ns istio-io-health istio-io-health-rewrite

----------------------------------------

TITLE: Manual Sidecar Injection with Custom ConfigMaps
DESCRIPTION: This snippet shows how to manually inject the Istio sidecar using custom ConfigMaps for injection and mesh configuration.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.config}' > inject-config.yaml
$ kubectl -n istio-system get configmap istio -o=jsonpath='{.data.mesh}' > mesh-config.yaml
$ istioctl kube-inject --injectConfigFile inject-config.yaml --meshConfigFile mesh-config.yaml --filename demo-red.yaml --output demo-red-injected.yaml
$ kubectl apply -f demo-red-injected.yaml

----------------------------------------

TITLE: Retrieving Istio System Secrets
DESCRIPTION: Command to list all secrets in the istio-system namespace.

LANGUAGE: bash
CODE:
kubectl --namespace istio-system get secrets

----------------------------------------

TITLE: Installing MicroK8s using Snap
DESCRIPTION: This command installs the latest version of MicroK8s using the Snap package manager. The '--classic' flag is used to install MicroK8s with full system access.

LANGUAGE: bash
CODE:
$ sudo snap install microk8s --classic

----------------------------------------

TITLE: Configuring Gateway with Custom Address
DESCRIPTION: Demonstrates how to configure a Gateway with a specific IP address.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
spec:
  addresses:
  - value: 192.0.2.0
    type: IPAddress
...

----------------------------------------

TITLE: Manual Sidecar Injection with Custom ConfigMaps
DESCRIPTION: This snippet shows how to manually inject the Istio sidecar using custom ConfigMaps for injection and mesh configuration.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='{.data.config}' > inject-config.yaml
$ kubectl -n istio-system get configmap istio -o=jsonpath='{.data.mesh}' > mesh-config.yaml
$ istioctl kube-inject --injectConfigFile inject-config.yaml --meshConfigFile mesh-config.yaml --filename demo-red.yaml --output demo-red-injected.yaml
$ kubectl apply -f demo-red-injected.yaml

----------------------------------------

TITLE: Detecting JWT Authentication Policies in Istio Cluster
DESCRIPTION: This bash script checks for the presence of JWT authentication policies in an Istio cluster. It searches for jwksUri fields in policy and meshpolicy resources across all namespaces.

LANGUAGE: bash
CODE:
$ cat <<'EOF' | bash -
set -e
set -u
set -o pipefail

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

echo "Checking authentication policy..."

JWKS_URI=()
JWKS_URI+=($(kubectl get policy --all-namespaces -o jsonpath='{range .items[*]}{.spec.origins[*].jwt.jwksUri}{" "}{end}'))
JWKS_URI+=($(kubectl get meshpolicy --all-namespaces -o jsonpath='{range .items[*]}{.spec.origins[*].jwt.jwksUri}{" "}{end}'))
if [ "${#JWKS_URI[@]}" != 0 ]; then
  echo "${red}Found JWT in authentication policy, YOU ARE AFFECTED${reset}"
  exit 1
fi

echo "${green}Did NOT find JWT in authentication policy, YOU ARE NOT AFFECTED${reset}"
EOF

----------------------------------------

TITLE: Creating HorizontalPodAutoscaler
DESCRIPTION: Configures automatic scaling for the custom ingress gateway based on CPU utilization.

LANGUAGE: yaml
CODE:
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-ingressgateway
  namespace: istio-system
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: my-ingressgateway
  targetCPUUtilizationPercentage: 80

----------------------------------------

TITLE: Configuring TLS origination with Istio resources
DESCRIPTION: Creates a ServiceEntry, VirtualService, and DestinationRule to enable TLS origination for accessing www.googleapis.com.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: rewrite-port-for-googleapis
spec:
  hosts:
  - www.googleapis.com
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: www.googleapis.com
        port:
          number: 443
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: originate-tls-for-googleapis
spec:
  host: www.googleapis.com
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE # initiates HTTPS when accessing www.googleapis.com

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio Release Notes
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.13.0 release notes page, including title, publication date, version information, and page aliases.

LANGUAGE: yaml
CODE:
---
title: Istio 1.13 Change Notes
linktitle: 1.13.0
subtitle: Minor Release
description: Istio 1.13.0 change notes.
publishdate: 2022-02-11
release: 1.13.0
weight: 10
aliases:
    - /news/announcing-1.13.0
---

----------------------------------------

TITLE: Configuring Istio Release Notification Banner in YAML
DESCRIPTION: YAML configuration that defines parameters for displaying a notification banner about the latest Istio release. Sets the display period, maximum number of impressions (3), and links to release information.

LANGUAGE: yaml
CODE:
title: Latest Release
period_start: latest_release
period_duration: 7
max_impressions: 3
link: latest_release

----------------------------------------

TITLE: Configuring Istio Gateway Annotations for AWS NLB in YAML
DESCRIPTION: YAML configuration to add AWS-specific annotations to the Istio installation for using an NLB. This override file specifies the service annotation to use an NLB for the Istio ingress gateway.

LANGUAGE: yaml
CODE:
gateways:
  istio-ingressgateway:
    serviceAnnotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

----------------------------------------

TITLE: Configuring Robots.txt with Conditional Sitemap for Istio Website
DESCRIPTION: This snippet defines the robots.txt file for the Istio website. It allows all user agents and includes a conditional sitemap reference based on a site variable.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
{{ if not .Site.Data.args.archive_landing -}}
Sitemap: {{ .Site.BaseURL }}/sitemap.xml
{{- end -}}

----------------------------------------

TITLE: Defining Canonical Service Labels in YAML
DESCRIPTION: This snippet shows the YAML structure for defining canonical service labels in Istio. Canonical services have a name and revision, resulting in specific source and destination labels.

LANGUAGE: yaml
CODE:
source_canonical_service
source_canonical_revision
destination_canonical_service
destination_canonical_revision

----------------------------------------

TITLE: Running Istio Bug Report Command
DESCRIPTION: Command to generate a comprehensive bug report archive containing relevant Kubernetes cluster state information.

LANGUAGE: bash
CODE:
istioctl bug-report

----------------------------------------

TITLE: Demonstrating Trust Domain Format in Istio Workload Identity
DESCRIPTION: This snippet shows the format of a workload identity in Istio, highlighting how the trust domain is incorporated. It demonstrates that 'mytrustdomain.com' is the trust domain in this example.

LANGUAGE: plaintext
CODE:
spiffe://mytrustdomain.com/ns/default/sa/myname

----------------------------------------

TITLE: Configuring Hugo Headless Content in YAML
DESCRIPTION: YAML front matter configuration that marks a directory tree as headless in Hugo, preventing normal page rendering of its contents.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Configuring Ambient Mesh Announcement Banner in YAML
DESCRIPTION: YAML configuration that specifies the display parameters for an announcement banner, including the title, display period (September 8-22, 2022), and maximum impression count of 12. The banner promotes Istio's new ambient mesh feature with a link to detailed documentation.

LANGUAGE: yaml
CODE:
title: Announcing ambient mesh
period_start: 2022-09-08
period_end: 2022-09-22
max_impressions: 12

----------------------------------------

TITLE: Configuring Robot.txt for Istio Documentation Website
DESCRIPTION: This snippet defines the robot.txt configuration for the Istio documentation website. It allows all user agents to access the entire site and specifies the location of the XML sitemap.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.7/sitemap.xml

----------------------------------------

TITLE: Checking Waypoint Proxy Endpoints
DESCRIPTION: Command to display endpoint configuration for the reviews waypoint proxy.

LANGUAGE: bash
CODE:
$ istioctl proxy-config endpoints deploy/bookinfo-reviews-istio-waypoint

----------------------------------------

TITLE: Configuring PassthroughCluster in Istio
DESCRIPTION: JSON configuration for the PassthroughCluster in Istio, which is used to allow all external service traffic when outbound traffic policy is set to ALLOW_ANY.

LANGUAGE: json
CODE:
{
  "name": "PassthroughCluster",
  "type": "ORIGINAL_DST",
  "connectTimeout": "10s",
  "lbPolicy": "ORIGINAL_DST_LB",
  "circuitBreakers": {
    "thresholds": [
      {
        "maxConnections": 102400,
        "maxRetries": 1024
      }
    ]
  }
}

----------------------------------------

TITLE: Validating Istio Container Image using Cosign
DESCRIPTION: This command uses Cosign to verify the signature of an Istio container image. It specifies the public key URL and the image to be verified.

LANGUAGE: bash
CODE:
$ ./cosign-binary verify --key "https://istio.io/misc/istio-key.pub" {{< istio_docker_image "pilot" >}}

----------------------------------------

TITLE: Enabling Debug Logs
DESCRIPTION: Command to enable debug level logging for waypoint proxy.

LANGUAGE: bash
CODE:
istioctl pc log deploy/waypoint --level debug

----------------------------------------

TITLE: Sample Metric for BlackHoleCluster TCP Traffic
DESCRIPTION: Example of the istio_tcp_connections_closed_total metric emitted when TCP traffic is blocked by the BlackHoleCluster.

LANGUAGE: json
CODE:
{
  "metric": {
    "__name__": "istio_tcp_connections_closed_total",
    "connection_security_policy": "unknown",
    "destination_app": "unknown",
    "destination_ip": "52.22.188.80",
    "destination_principal": "unknown",
    "destination_service": "unknown",
    "destination_service_name": "BlackHoleCluster",
    "destination_service_namespace": "unknown",
    "destination_version": "unknown",
    "destination_workload": "unknown",
    "destination_workload_namespace": "unknown",
    "instance": "100.96.2.183:42422",
    "job": "istio-mesh",
    "reporter": "source",
    "response_flags": "-",
    "source_app": "sleep",
    "source_principal": "unknown",
    "source_version": "unknown",
    "source_workload": "sleep",
    "source_workload_namespace": "default"
  },
  "value": [
    1567034481.03,
    "1"
  ]
}

----------------------------------------

TITLE: Setting Ingress Gateway Hostname
DESCRIPTION: Commands to create and verify an environment variable for the Istio ingress gateway hostname.

LANGUAGE: bash
CODE:
export MY_INGRESS_GATEWAY_HOST=istio.$NAMESPACE.bookinfo.com
echo $MY_INGRESS_GATEWAY_HOST

----------------------------------------

TITLE: Configuring Strict Mutual TLS in Istio
DESCRIPTION: Applies a PeerAuthentication resource to enable strict mutual TLS in the specified namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "default"
  namespace: "istio-io-health"
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Restarting Kubernetes Deployment for Istio Sidecar Update
DESCRIPTION: Command to trigger a new rollout of a Kubernetes deployment, often used to update the Istio sidecar version after an upgrade. This method is available for Kubernetes 1.15 or higher.

LANGUAGE: bash
CODE:
kubectl rollout restart <my-deployment>

----------------------------------------

TITLE: Creating Deployments for Helloworld Versions
DESCRIPTION: This YAML snippet creates two Deployments for different versions (v1 and v2) of the helloworld application. Each Deployment includes the service selector label and version-specific labels.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: helloworld
        version: v1
    spec:
      containers:
      - image: helloworld-v1
        ...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-v2
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: helloworld
        version: v2
    spec:
      containers:
      - image: helloworld-v2
        ...

----------------------------------------

TITLE: Configuring gRPC Client Credentials for mTLS
DESCRIPTION: Set up gRPC client credentials to support mTLS with fallback to insecure credentials.

LANGUAGE: go
CODE:
import "google.golang.org/grpc/credentials/xds"

...

creds, err := xds.NewClientCredentials(xds.ClientOptions{
FallbackCreds: insecure.NewCredentials()
})
// handle err
conn, err := grpc.DialContext(
ctx,
"xds:///foo.ns.svc.cluster.local:7070",
grpc.WithTransportCredentials(creds),
)

----------------------------------------

TITLE: Detecting TLS Mode in Istio Gateways
DESCRIPTION: Kubernetes command to list all Istio gateways across namespaces and display their TLS modes to identify potentially vulnerable AUTO_PASSTHROUGH configurations.

LANGUAGE: bash
CODE:
kubectl get gateways.networking.istio.io -A -o "custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,TLS_MODE:.spec.servers[*].tls.mode"

----------------------------------------

TITLE: Importing Code Snippet from a File
DESCRIPTION: Demonstrates how to import a specific named snippet from a file using the 'text_import' shortcode.

LANGUAGE: markdown
CODE:
{{</* text_import file="test/snippet_example.txt" syntax="plain" snippet="SNIP1" */>}}

----------------------------------------

TITLE: Running Linters with External Link Checking Disabled
DESCRIPTION: This command runs the linters and tests for the Istio website content while disabling external link checking. It's useful when internet connectivity is poor or unreliable.

LANGUAGE: bash
CODE:
$ make INTERNAL_ONLY=True lint

----------------------------------------

TITLE: Configuring Banner Display Period in Markdown
DESCRIPTION: YAML frontmatter configuration that sets the display period for a test banner from March 7th to March 26th, 2021.

LANGUAGE: markdown
CODE:
---
title: Test banner
period_start: 2021-03-07
period_end: 2021-03-26
---

----------------------------------------

TITLE: Incorrect EnvoyFilter Configuration with ADD Operation
DESCRIPTION: Example of an incorrect EnvoyFilter configuration that uses the ADD operation with ROUTE_CONFIGURATION, which will be ignored. This configuration attempts to add an external authorization filter but will not work as intended since only MERGE operations are supported for ROUTE_CONFIGURATION.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-auth-2
  namespace: bookinfo
spec:
  configPatches:
  - applyTo: ROUTE_CONFIGURATION
    match:
      context: SIDECAR_INBOUND
    patch:
      operation: ADD
      filterClass: AUTHZ
      value:
        name: envoy.filters.http.ext_authz
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
          grpc_service:
            envoy_grpc:
              cluster_name: acme-ext-authz
            initial_metadata:
            - key: foo
              value: myauth.acme

----------------------------------------

TITLE: Generating Minimal Istio Install Configuration
DESCRIPTION: Helm command to generate a minimal Istio installation YAML with only traffic management components enabled

LANGUAGE: bash
CODE:
$ helm template install/kubernetes/helm/istio \
  --name istio \
  --namespace istio-system \
  --set security.enabled=false \
  --set galley.enabled=false \
  --set sidecarInjectorWebhook.enabled=false \
  --set mixer.enabled=false \
  --set prometheus.enabled=false \
  --set pilot.sidecar=false > istio-minimal.yaml

----------------------------------------

TITLE: Installing Istio with Stable Validation Policy
DESCRIPTION: Command to install Istio base with stable validation policy enabled. This ensures only v1 APIs and features are used in new environments.

LANGUAGE: bash
CODE:
$ helm install istio-base -n istio-system --set experimental.stableValidationPolicy=true

----------------------------------------

TITLE: Configuring IP-Based Access Control in Istio
DESCRIPTION: This YAML configuration creates a ServiceRoleBinding that allows access based on source IP range. It shows how to use Istio authorization to protect services without authenticated identities, which can be useful for legacy systems that don't support authentication.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: book-reader
  namespace: default
spec:
  subjects:
  - properties:
      source.ip: 10.20.0.0/9
  roleRef:
    kind: ServiceRole
    name: "book-reader"

----------------------------------------

TITLE: Example of Verifying Istio Pilot Image with Cosign
DESCRIPTION: This is an example command showing how to verify the Istio pilot image for version 1.12.0 using Cosign. It includes the expected output, demonstrating the verification process and the checks performed.

LANGUAGE: bash
CODE:
$ cosign verify --key "https://istio.io/misc/istio-key.pub" gcr.io/istio-release/pilot:1.12.0


Verification for gcr.io/istio-release/pilot:1.12.0 --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - The signatures were verified against the specified public key
  - Any certificates were verified against the Fulcio roots.

[{"critical":{"identity":{"docker-reference":"gcr.io/istio-release/pilot"},"image":{"docker-manifest-digest":"sha256:c37fd83f6435ca0966d653dc6ac42c9fe5ac11d0d5d719dfe97de84acbf7a32d"},"type":"cosign container image signature"},"optional":null}]

----------------------------------------

TITLE: Defining Vulnerable ALLOW Authorization Policy in Istio YAML
DESCRIPTION: This YAML snippet shows another example of a vulnerable Istio authorization policy, this time using the ALLOW action with notPaths field. This pattern is also susceptible to unexpected policy bypasses due to the described vulnerability.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-path-not-admin
spec:
  action: ALLOW
  rules:
  - to:
    - operation:
        notPaths: ["/admin"]

----------------------------------------

TITLE: Defining httpbin Service in Kubernetes
DESCRIPTION: YAML definition for the httpbin Kubernetes service in the foo namespace.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: foo
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin

----------------------------------------

TITLE: Deploying HTTPRoute for Traffic Splitting in Istio
DESCRIPTION: This snippet demonstrates how to apply an HTTPRoute configuration to split traffic between two versions of the 'reviews' service in the Bookinfo application. It routes 90% of traffic to v1 and 10% to v2.

LANGUAGE: bash
CODE:
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - backendRefs:
    - name: reviews-v1
      port: 9080
      weight: 90
    - name: reviews-v2
      port: 9080
      weight: 10
EOF

----------------------------------------

TITLE: Setting Environment Variable for Docker Image Tag
DESCRIPTION: This command sets an environment variable to store the user ID, which will be used to tag the Docker image for the ratings service.

LANGUAGE: bash
CODE:
$ export USER=user

----------------------------------------

TITLE: Retrieving Envoy Stats using kubectl
DESCRIPTION: Command to retrieve statistics from an Envoy proxy running in a Kubernetes pod using pilot-agent.

LANGUAGE: bash
CODE:
$ kubectl exec "$POD" -c istio-proxy -- pilot-agent request GET stats

----------------------------------------

TITLE: Creating Kubernetes Ingress Configuration
DESCRIPTION: Defines Ingress resources for Istio services including Grafana, Jaeger, Prometheus, and Kiali.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: istio-system
  namespace: istio-system
  annotations:
    kubernetes.io/ingress.class: istio
spec:
  rules:
  - host: my-istio-dashboard.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  - host: my-istio-tracing.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tracing
            port:
              number: 9411
  - host: my-istio-logs-database.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
  - host: my-kiali.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kiali
            port:
              number: 20001
EOF

----------------------------------------

TITLE: Testing Reviews Service Response
DESCRIPTION: Send a test request to the new version of the reviews service to verify correct response.

LANGUAGE: bash
CODE:
$ kubectl exec $(kubectl get pod -l app=curl -o jsonpath='{.items[0].metadata.name}') -- curl -sS "$REVIEWS_V2_POD_IP:9080/reviews/7"

----------------------------------------

TITLE: Defining Backend API Protection Policy
DESCRIPTION: YAML configuration to define security policies for protecting backend APIs using JWT authentication

LANGUAGE: yaml
CODE:
apiVersion: "security.cloud.ibm.com/v1"
kind: Policy
metadata:
    name: my-sample-backend-policy
    namespace: sample-namespace
spec:
    targets:
    - serviceName: <kubernetes-service-name-to-protect>
        paths:
        - prefix: /api/files
            method: ALL
            policies:
            - policyType: jwt
                config: my-oidc-provider-config
                rules: // optional
                - claim: iss
                    match: ALL
                    source: access_token
                    values:
                    - <expected-issuer-id>
                - claim: scope
                    match: ALL
                    source: access_token
                    values:
                    - files.read
                    - files.write

----------------------------------------

TITLE: Importing Code from a File
DESCRIPTION: Shows how to use the 'text_import' shortcode to import code from a file in the Istio documentation repository.

LANGUAGE: markdown
CODE:
{{</* text_import file="test/snippet_example.txt" syntax="plain" */>}}

----------------------------------------

TITLE: Invalid ServiceEntry Configuration with TCP Protocol
DESCRIPTION: Example of an invalid ServiceEntry configuration where the protocol is explicitly set to TCP but addresses are missing.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: service-entry
  namespace: default
spec:
  hosts:
    - 'istio.io'
  exportTo:
    - "."
  ports:
    - number: 443
      name: https
      protocol: TCP
  location: MESH_EXTERNAL
  resolution: DNS

----------------------------------------

TITLE: Autoscaling Helloworld Deployments
DESCRIPTION: These bash commands set up horizontal pod autoscalers for both v1 and v2 of the helloworld Deployments. They configure autoscaling based on CPU usage, with a minimum of 1 and maximum of 10 pods.

LANGUAGE: bash
CODE:
$ kubectl autoscale deployment helloworld-v1 --cpu-percent=50 --min=1 --max=10
deployment "helloworld-v1" autoscaled

LANGUAGE: bash
CODE:
$ kubectl autoscale deployment helloworld-v2 --cpu-percent=50 --min=1 --max=10
deployment "helloworld-v2" autoscaled

LANGUAGE: bash
CODE:
$ kubectl get hpa
NAME           REFERENCE                 TARGET  CURRENT  MINPODS  MAXPODS  AGE
Helloworld-v1  Deployment/helloworld-v1  50%     47%      1        10       17s
Helloworld-v2  Deployment/helloworld-v2  50%     40%      1        10       15s

----------------------------------------

TITLE: Testing Traffic Distribution with curl
DESCRIPTION: Commands to test traffic distribution between service versions using curl from a sleep Pod

LANGUAGE: bash
CODE:
$ export SLEEP_POD=$(kubectl get pod -l app=sleep \
  -o jsonpath={.items..metadata.name})
$ for i in `seq 3`; do \
  kubectl exec -it $SLEEP_POD curl http://reviews:9080/reviews/0 | \
  jq '.reviews|.[]|.rating?'; \
  done

----------------------------------------

TITLE: Updating Authorization Policy for Istio Ingress Gateway Ports in YAML
DESCRIPTION: This snippet shows how to update an authorization policy to use the new container ports (8080 and 8443) for Istio ingress gateways when upgrading from Istio 1.5 and prior to 1.6 and later. It demonstrates the change from ports 80 and 443 to 8080 and 8443 respectively.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: block-admin-access
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: DENY
  rules:
  -  to:
    - operation:
        paths: ["/admin"]
        ports: [ "8080" ]
  -  to:
    - operation:
        paths: ["/admin"]
        ports: [ "8443"]

----------------------------------------

TITLE: Idea Callout in Istio Documentation
DESCRIPTION: Illustrates the use of idea callouts in Istio documentation. Demonstrates various formats including single paragraph, multiple paragraphs, and nested text blocks.

LANGUAGE: markdown
CODE:
{{< idea >}}
This is an idea
{{< /idea >}}

{{< idea >}}
This is an idea

with two paragraphs

{{< /idea >}}

{{< idea >}}
This is an idea

with two paragraphs

{{< text plain >}}
A nested text block
{{< /text >}}

{{< /idea >}}

----------------------------------------

TITLE: Checking Pod Status Error
DESCRIPTION: Demonstrates the error message when trying to run istioctl proxy-status without proper configuration.

LANGUAGE: bash
CODE:
$ istioctl proxy-status
Error: unable to find any Istiod instances

----------------------------------------

TITLE: Configuring Path-Based Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that allows access to paths with prefix '/test/*' or suffix '*/info'.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: tester
  namespace: default
spec:
  selector:
    matchLabels:
      app: products
  action: ALLOW
  rules:
  - to:
    - operation:
        paths: ["/test/*", "*/info"]

----------------------------------------

TITLE: Defining Gateway with Mismatched Host in Istio
DESCRIPTION: This YAML configuration defines a Gateway that doesn't include the host specified in the VirtualService, leading to the VirtualServiceHostNotFoundInGateway error.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: testing-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - testing.com
    port:
      name: http
      number: 80
      protocol: HTTP

----------------------------------------

TITLE: Querying Istio Services with kubectl
DESCRIPTION: This snippet demonstrates how to use kubectl to get services in the istio-system namespace. It shows the command and expected output format.

LANGUAGE: bash
CODE:
$ kubectl get svc -n istio-system
NAME                     TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)
grafana                  ClusterIP      172.21.211.123   <none>          3000/TCP
...

----------------------------------------

TITLE: Configuring TLS origination in Ruby code
DESCRIPTION: Shows how the Bookinfo details microservice code supports both HTTPS and HTTP with TLS origination based on an environment variable.

LANGUAGE: ruby
CODE:
uri = URI.parse('https://www.googleapis.com/books/v1/volumes?q=isbn:' + isbn)
http = Net::HTTP.new(uri.host, ENV['DO_NOT_ENCRYPT'] === 'true' ? 80:443)
...
unless ENV['DO_NOT_ENCRYPT'] === 'true' then
     http.use_ssl = true
end

----------------------------------------

TITLE: Creating NGINX Configuration File
DESCRIPTION: Generates a configuration file for the NGINX server with SSL settings.

LANGUAGE: bash
CODE:
$ cat <<\EOF > ./nginx.conf
events {
}

http {
  log_format main '$remote_addr - $remote_user [$time_local]  $status '
  '"$request" $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  error_log  /var/log/nginx/error.log;

  server {
    listen 443 ssl;

    root /usr/share/nginx/html;
    index index.html;

    server_name nginx.example.com;
    ssl_certificate /etc/nginx-server-certs/tls.crt;
    ssl_certificate_key /etc/nginx-server-certs/tls.key;
  }
}
EOF

----------------------------------------

TITLE: Defining Istio Mesh Attributes in YAML
DESCRIPTION: Example showing common Istio attribute definitions including request path, size, timestamp, source IP, and destination workload. These attributes are used by Istio's policy and telemetry features to control and monitor service behavior.

LANGUAGE: yaml
CODE:
request.path: xyz/abc
request.size: 234
request.time: 12:34:56.789 04/17/2017
source.ip: 192.168.0.1
destination.workload.name: example

----------------------------------------

TITLE: Configuring OpenTelemetry in IstioOperator
DESCRIPTION: This YAML snippet shows how to configure OpenTelemetry access logging in an IstioOperator configuration. It sets up the OpenTelemetry collector and enables it as a default provider for access logging.

LANGUAGE: yaml
CODE:
spec:
  meshConfig:
    accessLogFile: /dev/stdout
    extensionProviders:
    - name: otel
      envoyOtelAls:
        service: opentelemetry-collector.observability.svc.cluster.local
        port: 4317
    defaultProviders:
      accessLogging:
      - envoy
      - otel

----------------------------------------

TITLE: Cleaning Up Istio Routing Rules
DESCRIPTION: This snippet shows how to remove the application routing rules created by Istio VirtualServices.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@

----------------------------------------

TITLE: Configuring Global Traffic Policy in Admiral
DESCRIPTION: Defines traffic routing rules for the payments service across different regions using Admiral's GlobalTrafficPolicy CRD.

LANGUAGE: yaml
CODE:
apiVersion: admiral.io/v1alpha1
kind: GlobalTrafficPolicy
metadata:
  name: payments-gtp
spec:
  selector:
    identity: payments
  policy:
  - dns: default.payments.global
    lbType: 1
    target:
    - region: us-west-2/*
      weight: 10
    - region: us-east-2/*
      weight: 90

----------------------------------------

TITLE: Viewing Dual Stack Endpoint Configuration
DESCRIPTION: Command to display Envoy's endpoint configuration, showing both IPv4 and IPv6 routing for dual stack services.

LANGUAGE: bash
CODE:
$ istioctl proxy-config endpoints "$(kubectl get pod -l app=sleep -o jsonpath='{.items[0].metadata.name}')" --port 9000

----------------------------------------

TITLE: Configuring Sidecar Ingress for Localhost Binding
DESCRIPTION: YAML configuration example showing how to explicitly configure the Sidecar ingress to send traffic to localhost for the ratings application, preserving pre-1.10 behavior.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: ratings
spec:
  workloadSelector:
    labels:
      app: ratings
  ingress:
  - port:
      number: 8080
      protocol: HTTP
      name: http
    defaultEndpoint: 127.0.0.1:8080

----------------------------------------

TITLE: Deploying Bookinfo sample application
DESCRIPTION: Deploys the Bookinfo sample application to the Kubernetes cluster. This application is used to demonstrate Istio's features.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@

----------------------------------------

TITLE: Setting Focused Canary Testing Rules
DESCRIPTION: This YAML snippet demonstrates how to set up Istio routing rules for focused canary testing. It routes 50% of traffic from users with @some-company-name.com email addresses to the canary version, while all other traffic goes to v1.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: helloworld
spec:
  hosts:
    - helloworld
  http:
  - match:
    - headers:
        cookie:
          regex: "^(.*?;)?(email=[^;]*@some-company-name.com)(;.*)?$"
    route:
    - destination:
        host: helloworld
        subset: v1
      weight: 50
    - destination:
        host: helloworld
        subset: v2
      weight: 50
  - route:
    - destination:
        host: helloworld
        subset: v1
EOF

----------------------------------------

TITLE: Correct Envoy String Match Configuration
DESCRIPTION: Shows the proper Envoy string match configuration that should be used to correctly implement the authorization policy.

LANGUAGE: yaml
CODE:
stringMatch:
  regex: spiffe://.*/ns/ns1/sa/foo

----------------------------------------

TITLE: YAML Front Matter Configuration for Security Bulletin
DESCRIPTION: YAML configuration block defining metadata for the security bulletin including CVE details, CVSS score, affected releases and publication date.

LANGUAGE: yaml
CODE:
---
title: ISTIO-SECURITY-2021-007
subtitle: Security Bulletin
description: Istio contains a remotely exploitable vulnerability where credentials specified in the Gateway and DestinationRule credentialName field can be accessed from different namespaces.
cves: [CVE-2021-34824]
cvss: "9.1"
vector: "AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:L"
releases: ["All 1.8 patch releases", "1.9.0 to 1.9.5", "1.10.0 to 1.10.1"]
publishdate: 2021-06-24
keywords: [CVE]
skip_seealso: true
---

----------------------------------------

TITLE: Deploying httpbin Sample Application
DESCRIPTION: Deploys the httpbin test application to the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/httpbin/httpbin.yaml@

----------------------------------------

TITLE: Configuring HTTPS Failover with Istio
DESCRIPTION: Set up a ServiceEntry and DestinationRule for HTTPS failover, including TLS origination and precise failover rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-svc-dns
spec:
  hosts:
  - mydb.com
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
    targetPort: 443
  resolution: DNS
  endpoints:
  - address: dynamodb.us-east-1.amazonaws.com
    locality: us-east1
  - address: dynamodb.us-west-1.amazonaws.com
    locality: us-west

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mydynamodb
spec:
  host: mydb.com
  trafficPolicy:
    tls:
      mode: SIMPLE
    loadBalancer:
      simple: ROUND_ROBIN
      localityLbSetting:
        enabled: true
        failover:
          - from: us-east1
            to: us-west
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 15s
      baseEjectionTime: 1m

----------------------------------------

TITLE: Configuring VirtualService with Multiple Rules
DESCRIPTION: Example of configuring a VirtualService with multiple routing rules for the reviews service, including header-based routing.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - match:
    - headers:
        cookie:
          regex: "^(.*?;)?(user=jason)(;.*)?$"
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Configuring Sidecar Inbound Port Forwarding
DESCRIPTION: YAML configuration example showing how to explicitly configure a sidecar to forward traffic for port 9080 to localhost using the Sidecar custom resource.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: ratings
spec:
  workloadSelector:
    labels:
      app: ratings
  ingress:
  - port:
      number: 9080
      protocol: HTTP
      name: http
    defaultEndpoint: 127.0.0.1:9080

----------------------------------------

TITLE: Deploying NGINX Server in Kubernetes
DESCRIPTION: Deploys the NGINX server as a Kubernetes Service and Deployment with the configured certificates and settings.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  ports:
  - port: 443
    protocol: TCP
  selector:
    run: my-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
spec:
  selector:
    matchLabels:
      run: my-nginx
  replicas: 1
  template:
    metadata:
      labels:
        run: my-nginx
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: my-nginx
        image: nginx
        ports:
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
          readOnly: true
        - name: nginx-server-certs
          mountPath: /etc/nginx-server-certs
          readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-configmap
      - name: nginx-server-certs
        secret:
          secretName: nginx-server-certs

----------------------------------------

TITLE: Deploying NGINX Server in Kubernetes
DESCRIPTION: Deploys the NGINX server as a Kubernetes Service and Deployment with the configured certificates and settings.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  ports:
  - port: 443
    protocol: TCP
  selector:
    run: my-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
spec:
  selector:
    matchLabels:
      run: my-nginx
  replicas: 1
  template:
    metadata:
      labels:
        run: my-nginx
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: my-nginx
        image: nginx
        ports:
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
          readOnly: true
        - name: nginx-server-certs
          mountPath: /etc/nginx-server-certs
          readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-configmap
      - name: nginx-server-certs
        secret:
          secretName: nginx-server-certs

----------------------------------------

TITLE: Configuring Waypoint Resources in Helm Chart
DESCRIPTION: Example of configuring Waypoint pod resources, affinity, topology spread constraints, tolerations, and node selector using Helm values.

LANGUAGE: yaml
CODE:
global:
  waypoint:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 1024Mi
    affinity: {}
    topologySpreadConstraints: []
    tolerations: []
    nodeSelector: {}

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio Security Bulletin
DESCRIPTION: YAML frontmatter defining metadata for the Istio security bulletin, including title, description, CVEs, CVSS score, affected releases, and publication date.

LANGUAGE: yaml
CODE:
---
title: ISTIO-SECURITY-2020-007
subtitle: Security Bulletin
description: Multiple denial of service vulnerabilities in Envoy.
cves: [CVE-2020-12603, CVE-2020-12605, CVE-2020-8663, CVE-2020-12604]
cvss: "7.5"
vector: "AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
releases: ["1.5 to 1.5.6", "1.6 to 1.6.3"]
publishdate: 2020-06-30
keywords: [CVE]
skip_seealso: true
---

----------------------------------------

TITLE: Verification and Troubleshooting Commands in Bash
DESCRIPTION: Bash commands for verifying metric generation and troubleshooting configuration issues.

LANGUAGE: bash
CODE:
kubectl exec pod-name -c istio-proxy -- curl -sS 'localhost:15000/stats/prometheus' | grep istio_

LANGUAGE: bash
CODE:
kubectl logs pod-name -c istio-proxy | grep -e "Config Error" -e "envoy wasm"

LANGUAGE: bash
CODE:
kubectl get pods pod-name

LANGUAGE: bash
CODE:
kubectl -n istio-system delete -f attribute_gen_service.yaml

----------------------------------------

TITLE: Checking Injected Pods
DESCRIPTION: This snippet shows how to verify that the Istio sidecar has been injected into a pod.

LANGUAGE: bash
CODE:
$ kubectl get pods | grep demo-red
demo-red-pod-8b5df99cc-pgnl7   2/2       Running   0          3d

----------------------------------------

TITLE: Creating a Linux Network Namespace
DESCRIPTION: Demonstrates how to create a new Linux network namespace using the 'ip' command.

LANGUAGE: bash
CODE:
ip netns add my-linux-netns

----------------------------------------

TITLE: Checking Injected Pods
DESCRIPTION: This snippet shows how to verify that the Istio sidecar has been injected into a pod.

LANGUAGE: bash
CODE:
$ kubectl get pods | grep demo-red
demo-red-pod-8b5df99cc-pgnl7   2/2       Running   0          3d

----------------------------------------

TITLE: Installing Ztunnel DaemonSet
DESCRIPTION: Command to install the ztunnel node proxy component for ambient mode.

LANGUAGE: bash
CODE:
$ helm install ztunnel istio/ztunnel -n istio-system --wait

----------------------------------------

TITLE: Inspecting Envoy route configuration
DESCRIPTION: Use istioctl proxy-config routes to inspect the Envoy route configuration for a pod.

LANGUAGE: bash
CODE:
$ istioctl proxy-config routes productpage-v1-6c886ff494-7vxhs --name 9080 -o json

----------------------------------------

TITLE: Configuring TLS Certificate
DESCRIPTION: Creates a wildcard certificate for *.mydemo.com domain using the configured ClusterIssuer.

LANGUAGE: yaml
CODE:
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: demo-certificate
  namespace: istio-system
spec:
  acme:
    config:
    - dns01:
        provider: your-dns
      domains:
      - '*.mydemo.com'
  commonName: '*.mydemo.com'
  dnsNames:
  - '*.mydemo.com'
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-demo
  secretName: istio-customingressgateway-certs

----------------------------------------

TITLE: Configuring Egress Gateway for Wildcard Host
DESCRIPTION: This YAML defines an egress Gateway, DestinationRule, and VirtualService to route traffic through an egress gateway for *.wikipedia.org.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "*.wikipedia.org"
    tls:
      mode: PASSTHROUGH
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: egressgateway-for-wikipedia
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
    - name: wikipedia
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: direct-wikipedia-through-egress-gateway
spec:
  hosts:
  - "*.wikipedia.org"
  gateways:
  - mesh
  - istio-egressgateway
  tls:
  - match:
    - gateways:
      - mesh
      port: 443
      sniHosts:
      - "*.wikipedia.org"
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: wikipedia
        port:
          number: 443
      weight: 100
  - match:
    - gateways:
      - istio-egressgateway
      port: 443
      sniHosts:
      - "*.wikipedia.org"
    route:
    - destination:
        host: www.wikipedia.org
        port:
          number: 443
      weight: 100

----------------------------------------

TITLE: Disabling Sidecar Injection for a Deployment
DESCRIPTION: Shows how to disable automatic sidecar injection for a specific Kubernetes Deployment using annotations.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ignored
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: ignored
        image: tutum/curl
        command: ["/bin/sleep","infinity"]

----------------------------------------

TITLE: Defining ServiceEntry and VirtualService for googleapis.com
DESCRIPTION: Creates a mesh-external service entry and virtual service to enable HTTPS access to www.googleapis.com.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: googleapis
spec:
  hosts:
  - www.googleapis.com
  tls:
  - match:
    - port: 443
      sni_hosts:
      - www.googleapis.com
    route:
    - destination:
        host: www.googleapis.com
        port:
          number: 443
      weight: 100

----------------------------------------

TITLE: Configuring Platform-Specific Overrides in Helm Install
DESCRIPTION: Example of using platform-specific configurations when installing Istio components with Helm.

LANGUAGE: bash
CODE:
helm install istio-cni --set profile=ambient --set global.platform=k3s
helm install istiod --set profile=ambient --set global.platform=k3s

----------------------------------------

TITLE: Detecting SDS enablement in Istio using kubectl
DESCRIPTION: This command checks if SDS (Secret Discovery Service) is enabled in the Istio system by examining the pilot pod configuration.

LANGUAGE: bash
CODE:
$ kubectl get pod -l app=pilot -o yaml | grep SDS_ENABLED -A 1

----------------------------------------

TITLE: Configuring Web Crawler Access and Sitemap for Istio Documentation
DESCRIPTION: This robots.txt file sets permissions for web crawlers and specifies the sitemap location. It allows unrestricted access to all user agents and points to the XML sitemap for the v0.8 version of the documentation.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v0.8/sitemap.xml

----------------------------------------

TITLE: Deploying Test Workloads in Istio
DESCRIPTION: Deploys 'httpbin' and 'curl' workloads in the 'foo' namespace for testing Istio policies.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/httpbin/httpbin.yaml@ -n foo
$ kubectl apply -f @samples/curl/curl.yaml@ -n foo

----------------------------------------

TITLE: Configuring Simple ServiceEntry for External Service
DESCRIPTION: Creates a ServiceEntry to enable both HTTP and HTTPS access to edition.cnn.com

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: edition-cnn-com
spec:
  hosts:
  - edition.cnn.com
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
  - number: 443
    name: https-port
    protocol: HTTPS
  resolution: DNS

----------------------------------------

TITLE: Configuring Mixer policy checks for access control
DESCRIPTION: This snippet sets up a listchecker adapter with a static whitelist of allowed URL paths, and a listentry for the request path. It then modifies the handle-cnn-access rule to use these for policy checks.

LANGUAGE: bash
CODE:
$ cat <<EOF | kubectl create -f -
apiVersion: "config.istio.io/v1alpha2"
kind: listchecker
metadata:
  name: path-checker
  namespace: istio-system
spec:
  overrides: ["/health", "/sport"]  # overrides provide a static list
  blacklist: false
---
apiVersion: "config.istio.io/v1alpha2"
kind: listentry
metadata:
  name: request-path
  namespace: istio-system
spec:
  value: request.path
EOF

$ cat <<EOF | kubectl apply -f -
# Rule handle egress access to cnn.com
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: handle-cnn-access
  namespace: istio-system
spec:
  match: request.host.endsWith(".cnn.com") && context.reporter.uid.startsWith("kubernetes://istio-egressgateway")
  actions:
  - handler: egress-access-logger.stdio
    instances:
      - egress-access.logentry
  - handler: path-checker.listchecker
    instances:
      - request-path.listentry
EOF

----------------------------------------

TITLE: Configuring Sidecar Startup Probe Settings - YAML
DESCRIPTION: YAML configuration showing the recommended default values for sidecar container startup and readiness probes in Istio 1.20. These settings enable aggressive initial polling while improving overall pod startup time by approximately one second.

LANGUAGE: yaml
CODE:
readinessInitialDelaySeconds: 0
readinessPeriodSeconds: 15
readinessFailureThreshold: 4
startupProbe:
enabled: true
failureThreshold: 600

----------------------------------------

TITLE: Creating Revision Tags for Istio
DESCRIPTION: Create revision tags for production stable and canary versions of Istio.

LANGUAGE: bash
CODE:
$ helm template istiod istio/istiod -s templates/revision-tags.yaml --set revisionTags="{prod-stable}" --set revision={{< istio_previous_version_revision >}}-1 -n istio-system | kubectl apply -f -
$ helm template istiod istio/istiod -s templates/revision-tags.yaml --set revisionTags="{prod-canary}" --set revision={{< istio_full_version_revision >}} -n istio-system | kubectl apply -f -

----------------------------------------

TITLE: Cleaning Up Istio Test Resources
DESCRIPTION: Removes the test namespace and associated resources created for the Istio dry-run demonstration.

LANGUAGE: bash
CODE:
$ kubectl delete namespace foo

----------------------------------------

TITLE: Checking Compatibility with Istio Precheck Command
DESCRIPTION: Demonstrates using istioctl experimental precheck command to verify compatibility when upgrading from a previous version. Shows how the tool identifies potential compatibility issues and provides guidance on resolution.

LANGUAGE: shell
CODE:
$ istioctl experimental precheck --from-version {{< istio_previous_version >}}
Warning [IST0168] (DestinationRule default/tls) The configuration "ENABLE_AUTO_SNI"
changed in release 1.20: previously, no SNI would be set; now it will be automatically
set. Or, install with `--set compatibilityVersion=1.20` to retain the old default.

Error: Issues found when checking the cluster. Istio may not be safe to install or upgrade.
See https://istio.io/v1.21/docs/reference/config/analysis for more information about
causes and resolutions.

----------------------------------------

TITLE: Opening Prometheus Dashboard for Istio Metrics
DESCRIPTION: Uses istioctl to open the Prometheus dashboard for viewing Istio metrics.

LANGUAGE: bash
CODE:
$ istioctl dashboard prometheus

----------------------------------------

TITLE: Using kubectl in Multi-Tenant Environment
DESCRIPTION: Commands to apply and retrieve route rules in a multi-tenant Istio environment.

LANGUAGE: bash
CODE:
$ kubectl –i istio-system1 apply -n ns-1 -f route_rule_v2.yaml
$ kubectl -i istio-system1 -n ns-1 get routerule

----------------------------------------

TITLE: Binding VirtualService to Gateway
DESCRIPTION: Example showing how to bind a VirtualService to a Gateway and configure routing rules for the bookinfo.com host.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
    - bookinfo.com
  gateways:
  - bookinfo-gateway
  http:
  - match:
    - uri:
        prefix: /reviews
    route:
    ...

----------------------------------------

TITLE: Enabling Basic Tracing Configuration
DESCRIPTION: Applies basic tracing configuration using Telemetry API to enable tracing with Zipkin provider.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: "zipkin"
EOF

----------------------------------------

TITLE: Configuring Weight-based Version Routing
DESCRIPTION: YAML configuration for implementing weighted traffic distribution between service versions

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: helloworld
spec:
  parentRefs:
  - name: sample-gateway
    namespace: sample-ingress
  hostnames: ["helloworld.sample.com"]
  rules:
  - matches:
    - path:
        type: Exact
        value: /hello
    backendRefs:
    - name: helloworld-v1
      port: 5000
      weight: 90
    - name: helloworld-v2
      port: 5000
      weight: 10

----------------------------------------

TITLE: Listing Istio Revision Tags with istioctl
DESCRIPTION: Shows how to use the istioctl tag list command to view the mapping between revision tags, revisions, and namespaces. The output displays three tags: default, prod-canary, and prod-stable, along with their associated revisions and namespaces.

LANGUAGE: bash
CODE:
$ istioctl tag list
TAG         REVISION NAMESPACES
default     {{< istio_previous_version_revision >}}-1   ...
prod-canary {{< istio_full_version_revision >}}   ...
prod-stable {{< istio_previous_version_revision >}}-1   ...

----------------------------------------

TITLE: Deploying and Verifying Curl App Deployment
DESCRIPTION: Commands to deploy a sample curl application and verify its deployment status before sidecar injection.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/curl/curl.yaml@
$ kubectl get deployment -o wide
$ kubectl get pod

----------------------------------------

TITLE: Migrating from gogo/protobuf to golang/protobuf in Istio Go Libraries
DESCRIPTION: The istio.io/api and istio.io/client-go libraries have switched from using gogo/protobuf to golang/protobuf for API types. This change affects users importing Istio as a Go library and may cause compilation issues that require syntactical updates.

LANGUAGE: go
CODE:
// Before:
import "github.com/gogo/protobuf/types"

// After:
import "google.golang.org/protobuf/types/known/anypb"

----------------------------------------

TITLE: Environment Variable Configuration Example in YAML
DESCRIPTION: Example showing the new COMPLIANCE_POLICY environment variable configuration for FIPS compliance.

LANGUAGE: yaml
CODE:
COMPLIANCE_POLICY: "fips-140-2"

----------------------------------------

TITLE: Configuring Robots.txt for Istio Documentation
DESCRIPTION: This code snippet defines the robots.txt file for the Istio documentation website. It allows all user agents to access the site and specifies the location of the sitemap for improved search engine indexing.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.1/sitemap.xml

----------------------------------------

TITLE: Creating IstioOperator Configuration for cluster2
DESCRIPTION: Creates an IstioOperator configuration file for cluster2, specifying the mesh ID, cluster name, and network.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: cluster2
      network: network1

----------------------------------------

TITLE: Installing Loki and OpenTelemetry Components in Istio
DESCRIPTION: This snippet shows how to install Grafana Loki and OpenTelemetry components in the Istio system namespace using istioctl and kubectl commands.

LANGUAGE: bash
CODE:
$ istioctl install -f @samples/open-telemetry/loki/iop.yaml@ --skip-confirmation
$ kubectl apply -f @samples/addons/loki.yaml@ -n istio-system
$ kubectl apply -f @samples/open-telemetry/loki/otel.yaml@ -n istio-system

----------------------------------------

TITLE: Restoring Istio Configuration from Backup
DESCRIPTION: Restores previously backed up Istio configurations by applying the saved YAML file using kubectl apply command.

LANGUAGE: bash
CODE:
kubectl apply -f "$HOME"/istio_resource_backup.yaml

----------------------------------------

TITLE: Opening Prometheus Dashboard
DESCRIPTION: Command to launch the Prometheus dashboard using istioctl

LANGUAGE: bash
CODE:
$ istioctl dashboard prometheus

----------------------------------------

TITLE: Configuring Remote Istio Installation with Config Cluster - Legacy Method
DESCRIPTION: Legacy configuration for installing Istio on a remote cluster that also serves as config cluster, with enabled base component.

LANGUAGE: yaml
CODE:
components:
  base:
    enabled: true
  pilot:
    enabled: false
  istiodRemote:
    enabled: true
values:
  global:
    externalIstiod: true

----------------------------------------

TITLE: Legacy Sidecar Probe Configuration - YAML
DESCRIPTION: YAML configuration showing the recommended values for disabling the startup probe and reverting to behavior matching older Istio versions. These settings maintain backward compatibility with previous probe implementations.

LANGUAGE: yaml
CODE:
readinessInitialDelaySeconds: 1
readinessPeriodSeconds: 2
readinessFailureThreshold: 30
startupProbe:
enabled: false

----------------------------------------

TITLE: Defining YAML Front Matter for Release Notes
DESCRIPTION: YAML front matter configuration defining metadata for the Istio 1.7 release notes document, including title, description, release version, and publish date.

LANGUAGE: yaml
CODE:
---
title: Istio 1.7 Change Notes
description: Istio 1.7 release notes.
weight: 10
release: 1.7
subtitle: Minor Release
linktitle: 1.7 Change Notes
publishdate: 2020-08-21
---

----------------------------------------

TITLE: Creating Kubernetes Cluster for Ambient Mesh
DESCRIPTION: Creates a Kubernetes cluster using kind with one control plane and two worker nodes for testing Istio ambient mesh.

LANGUAGE: bash
CODE:
$ kind create cluster --config=- <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: ambient
nodes:
- role: control-plane
- role: worker
- role: worker
EOF

----------------------------------------

TITLE: Annotating Existing Authorization Policy for Dry-Run
DESCRIPTION: Adds the dry-run annotation to an existing Istio AuthorizationPolicy.

LANGUAGE: bash
CODE:
$ kubectl annotate --overwrite authorizationpolicies deny-path-headers -n foo istio.io/dry-run='true'

----------------------------------------

TITLE: Draining Envoy Sidecar Proxy in Istio
DESCRIPTION: This Bash command drains the Envoy sidecar proxy for the HelloWorld service in a specific region and zone. It's used to trigger failover to the next locality in the Istio mesh.

LANGUAGE: bash
CODE:
kubectl --context="${CTX_R1_Z1}" exec \
  "$(kubectl get pod --context="${CTX_R1_Z1}" -n sample -l app=helloworld \
  -l version=region1.zone1 -o jsonpath='{.items[0].metadata.name}')" \
  -n sample -c istio-proxy -- curl -sSL -X POST 127.0.0.1:15000/drain_listeners

----------------------------------------

TITLE: Upgrading Istio Base Chart
DESCRIPTION: Upgrade the Istio base chart to ensure all cluster-wide resources are up-to-date.

LANGUAGE: bash
CODE:
$ helm upgrade istio-base istio/base -n istio-system

----------------------------------------

TITLE: Creating Service Entry for Remote Reviews Service
DESCRIPTION: Configuration to enable cross-cluster service discovery and routing for the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: reviews-default
spec:
  hosts:
  - reviews.default.global
  location: MESH_INTERNAL
  ports:
  - name: http1
    number: 9080
    protocol: http
  resolution: DNS
  addresses:
  - 240.0.0.3
  endpoints:
  - address: ${CLUSTER2_GW_ADDR}
    labels:
      cluster: cluster2
    ports:
      http1: 15443

----------------------------------------

TITLE: Enabling Tracing with Zipkin Provider
DESCRIPTION: Applies Telemetry configuration to enable tracing using the Zipkin provider across the mesh.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: zipkin
EOF

----------------------------------------

TITLE: Deploying TCP Echo Services for Dual Stack Testing
DESCRIPTION: Commands to deploy tcp-echo services in different namespaces for dual stack, IPv4, and IPv6 testing.

LANGUAGE: bash
CODE:
$ kubectl apply --namespace dual-stack -f {{< github_file >}}/samples/tcp-echo/tcp-echo-dual-stack.yaml
$ kubectl apply --namespace ipv4 -f {{< github_file >}}/samples/tcp-echo/tcp-echo-ipv4.yaml
$ kubectl apply --namespace ipv6 -f {{< github_file >}}/samples/tcp-echo/tcp-echo-ipv6.yaml

----------------------------------------

TITLE: Disabling Envoy Access Logging in Istio
DESCRIPTION: This bash command reinstalls Istio with the default profile, effectively disabling the previously configured access logging.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=default

----------------------------------------

TITLE: Deploying Bookinfo Application with kubectl in Istio
DESCRIPTION: This snippet shows how to deploy the Bookinfo application using kubectl in an Istio environment. It includes a warning for manual sidecar injection scenarios.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@

LANGUAGE: bash
CODE:
$ kubectl apply -f <(istioctl kube-inject -f @samples/bookinfo/platform/kube/bookinfo.yaml@)

----------------------------------------

TITLE: Configuring HTTPS failover with DestinationRule in Istio
DESCRIPTION: Sets up a DestinationRule for HTTPS services with TLS origination, outlier detection, and specific failover configuration.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mydynamodb
spec:
  host: mydb.com
  trafficPolicy:
    tls:
      mode: SIMPLE
    loadBalancer:
      simple: ROUND_ROBIN
      localityLbSetting:
        enabled: true
        failover:
          - from: us-east1
            to: us-west
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 15s
      baseEjectionTime: 1m

----------------------------------------

TITLE: Editing Galley Deployment in Kubernetes
DESCRIPTION: Steps to edit the Galley deployment configuration to disable validation by adding the --enable-validation=false option to the command section.

LANGUAGE: bash
CODE:
$ kubectl edit deployment -n istio-system istio-galley

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Deployment
...
spec:
...
  template:
    ...
    spec:
      ...
      containers:
      - command:
        ...
        - --log_output_level=default:info
        - --enable-validation=false

----------------------------------------

TITLE: Configuring YAML Front Matter for Istio News Page
DESCRIPTION: YAML configuration block that defines metadata and layout settings for the Istio news feed page. Specifies title, description, layout type, and output formats.

LANGUAGE: yaml
CODE:
title: News
description: Select security bulletins, release announcements, or support announcements to stay up to date.
linktitle: News
sidebar_multicard: true
decoration: pill
layout: news-feed
outputs:
    - html
    - rss

----------------------------------------

TITLE: Applying Merbridge to an Istio-managed Kubernetes cluster
DESCRIPTION: This command applies the Merbridge configuration to an existing Istio-managed Kubernetes cluster, enabling eBPF-based network acceleration.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/merbridge/merbridge/main/deploy/all-in-one.yaml

----------------------------------------

TITLE: Configuring Helm Options to Mitigate Envoy DoS Vulnerability
DESCRIPTION: Helm command options to prevent exploitation of the DoS vulnerability by setting protocol detection timeouts to 0 seconds. This configuration should be applied during Istio installation.

LANGUAGE: plain
CODE:
--set pilot.env.PILOT_INBOUND_PROTOCOL_DETECTION_TIMEOUT=0s --set global.proxy.protocolDetectionTimeout=0s

----------------------------------------

TITLE: Sending Test Request to httpbin Service in Istio
DESCRIPTION: This bash command sends a test request from a curl pod to the httpbin service to generate access logs for analysis.

LANGUAGE: bash
CODE:
$ kubectl exec "$SOURCE_POD" -c curl -- curl -sS -v httpbin:8000/status/418

----------------------------------------

TITLE: Including Boilerplate with Single Shortcode in Hugo
DESCRIPTION: This snippet illustrates how to use a boilerplate that consists of only a single shortcode in Hugo-based documentation.

LANGUAGE: hugo
CODE:
{{< boilerplate "test-2" >}}

----------------------------------------

TITLE: Initiating Istio Upgrade Process
DESCRIPTION: Starts the Istio upgrade process using the istioctl upgrade command.

LANGUAGE: bash
CODE:
$ istioctl upgrade

----------------------------------------

TITLE: Default Envoy Access Log Format in Istio
DESCRIPTION: This snippet shows the default access log format used by Istio when accessLogFormat is not specified. It includes various request and response details.

LANGUAGE: plain
CODE:
[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS%
\"%UPSTREAM_TRANSPORT_FAILURE_REASON%\" %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\"
\"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" %UPSTREAM_CLUSTER_RAW% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n

----------------------------------------

TITLE: Configuring WasmPlugin Resource in Istio
DESCRIPTION: Example configuration for deploying a Wasm module using the new WasmPlugin CRD in the extensions.istio.io namespace. Demonstrates how to specify workload selection, execution phase, priority, plugin configuration, and module source URL.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: your-filter
spec:
  selector:
    matchLabels:
      app: server
  phase: AUTHN
  priority: 10
  pluginConfig:
    someSetting: true
    someOtherSetting: false
    youNameIt:
    - first
    - second
  url: docker.io/your-org/your-filter:1.0.0

----------------------------------------

TITLE: Markdown Release Notes Content
DESCRIPTION: Release notes markdown content detailing bug fixes in Istio 1.13.6 including router route ordering, multi-cluster secret handling, access logging, and service merging improvements

LANGUAGE: markdown
CODE:
---
title: Announcing Istio 1.13.6
linktitle: 1.13.6
subtitle: Patch Release
description: Istio 1.13.6 patch release.
publishdate: 2022-07-25
release: 1.13.6
---

{{< warning >}}
Istio 1.13.6 does not contain a fix for [CVE-2022-31045](/news/security/istio-security-2022-005/#cve-2022-31045). We recommend users to not install Istio 1.13.6
and use Istio 1.13.5 for now. Istio 1.13.7 will be released later this week.
{{< /warning >}}

This release contains bug fixes to improve robustness.
This release note describes what's different between Istio 1.13.5 and 1.13.6.

FYI, [Go 1.18.4 has been released](https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE),
which includes 9 security fixes. We recommend you to upgrade to this newer Go version if you are using Go locally.

{{< relnote >}}

## Changes

- **Fixed** building router's routes orders, a `catch all` route does not short circuit other routes behind it.  ([Issue #39188](https://github.com/istio/istio/issues/39188))

- **Fixed** a bug when updating a multi-cluster secret, the previous cluster is not stopped. Even deleting the secret will not stop the previous cluster.  ([Issue #39366](https://github.com/istio/istio/issues/39366))

- **Fixed** a bug when sending access logging to injected `OTel-collector` pod throws a `http2.invalid.header.field` error.  ([Issue #39196](https://github.com/istio/istio/issues/39196))

- **Fixed** an issue causing Service merging to only take into account the first and last Service, rather than all of them.

----------------------------------------

TITLE: Using Istio client-go to List Virtual Services
DESCRIPTION: Complete example demonstrating how to use the Istio client-go library to list Virtual Services in a specified namespace. Shows configuration, client initialization, and API usage.

LANGUAGE: go
CODE:
package main

import (
  "log"
  "os"

  metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
  "k8s.io/client-go/tools/clientcmd"

  versionedclient "istio.io/client-go/pkg/clientset/versioned"
)

func main() {
  kubeconfig := os.Getenv("KUBECONFIG")
  namespace := os.Getenv("NAMESPACE")
  if len(kubeconfig) == 0 || len(namespace) == 0 {
    log.Fatalf("Environment variables KUBECONFIG and NAMESPACE need to be set")
  }
  restConfig, err := clientcmd.BuildConfigFromFlags("", kubeconfig)
  if err != nil {
    log.Fatalf("Failed to create k8s rest client: %s", err)
  }

  ic, err := versionedclient.NewForConfig(restConfig)
  if err != nil {
    log.Fatalf("Failed to create istio client: %s", err)
  }
  // Print all VirtualServices
  vsList, err := ic.NetworkingV1alpha3().VirtualServices(namespace).List(metav1.ListOptions{})
  if err != nil {
    log.Fatalf("Failed to get VirtualService in %s namespace: %s", namespace, err)
  }
  for i := range vsList.Items {
    vs := vsList.Items[i]
    log.Printf("Index: %d VirtualService Hosts: %+v\n", i, vs.Spec.GetHosts())
  }
}

----------------------------------------

TITLE: Configuring WasmPlugin Resource in Istio
DESCRIPTION: Example configuration for deploying a Wasm module using the new WasmPlugin CRD in the extensions.istio.io namespace. Demonstrates how to specify workload selection, execution phase, priority, plugin configuration, and module source URL.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: your-filter
spec:
  selector:
    matchLabels:
      app: server
  phase: AUTHN
  priority: 10
  pluginConfig:
    someSetting: true
    someOtherSetting: false
    youNameIt:
    - first
    - second
  url: docker.io/your-org/your-filter:1.0.0

----------------------------------------

TITLE: Checking Envoy version
DESCRIPTION: Exec into a container and query the Envoy server_info endpoint to check its version.

LANGUAGE: bash
CODE:
$ kubectl exec -it productpage-v1-6b746f74dc-9stvs -c istio-proxy -n default  -- pilot-agent request GET server_info --log_as_json | jq {version}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio 1.6 Announcement
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.6 release announcement page, including title, publish date, release version, and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 1.6
linktitle: 1.6
subtitle: Major Update
description: Istio 1.6 release announcement.
publishdate: 2020-05-21
release: 1.6.0
skip_list: true
aliases:
    - /news/announcing-1.6.0
    - /news/announcing-1.6
---

----------------------------------------

TITLE: Using Plain Boilerplate in Hugo
DESCRIPTION: This snippet demonstrates how to include a plain boilerplate in Hugo-based documentation using a shortcode.

LANGUAGE: hugo
CODE:
{{< boilerplate "test-0" >}}

----------------------------------------

TITLE: Removing Alpha Authentication Policies in Istio
DESCRIPTION: Commands to delete all alpha authentication policies across namespaces after migrating to new PeerAuthentication and RequestAuthentication APIs.

LANGUAGE: bash
CODE:
$ kubectl delete policies.authentication.istio.io --all-namespaces --all
$ kubectl delete meshpolicies.authentication.istio.io --all

----------------------------------------

TITLE: Defining Kubernetes Gateway API Version for Istio
DESCRIPTION: This snippet defines a placeholder for the Kubernetes Gateway API version used by Istio. It uses a custom text block with a specific syntax and ID.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=gateway_api_version >}}
{{< k8s_gateway_api_version >}}
{{< /text >}}

----------------------------------------

TITLE: Disabling HTTP2 Support on Ingress Gateway in Istio using EnvoyFilter
DESCRIPTION: This YAML configuration creates an EnvoyFilter to disable HTTP2 support on the Ingress Gateway as a temporary workaround for the CVE-2020-11080 vulnerability. It applies to the ingressgateway workload and sets the codec_type to HTTP1.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: disable-ingress-h2
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: NETWORK_FILTER # http connection manager is a filter in Envoy
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: HTTP1

----------------------------------------

TITLE: Shell Command Structure Example
DESCRIPTION: Demonstrates structured shell command formatting with different indentation levels using a text block inside a Hugo tab shortcode.

LANGUAGE: bash
CODE:
$ NoIndent:
    FourIndent:
        - EightIndent
    FourIndentAgain:
        - EightIndentAgain

----------------------------------------

TITLE: Configuring Custom OpenTelemetry Sampler (Dynatrace)
DESCRIPTION: This YAML snippet demonstrates how to configure a custom OpenTelemetry sampler (Dynatrace) via MeshConfig in the IstioOperator resource.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 443
        service: abc.live.dynatrace.com/api/v2/otlp
        http:
          path: "/api/v2/otlp/v1/traces"
          timeout: 10s
          headers:
            - name: "Authorization"
              value: "Api-Token dt0c01."
        dynatrace_sampler:
          tenant: "abc"
          cluster_id: 123

----------------------------------------

TITLE: Configuring Istio Snippet 3
DESCRIPTION: This snippet provides additional configuration settings for Istio in a single line and is labeled as SNIP3.

LANGUAGE: yaml
CODE:
This is chunk 3

----------------------------------------

TITLE: Disabling Trust Domain Validation in Helm Installation
DESCRIPTION: Helm command to opt-out of trust domain validation when upgrading to Istio 1.3.

LANGUAGE: bash
CODE:
--set pilot.env.PILOT_SKIP_VALIDATE_TRUST_DOMAIN=true

----------------------------------------

TITLE: Verifying Kubernetes Configuration for Istio Upgrade
DESCRIPTION: Checks the current Kubernetes cluster configuration before upgrading Istio.

LANGUAGE: bash
CODE:
$ kubectl config view

----------------------------------------

TITLE: Launching Kiali Dashboard
DESCRIPTION: Command to open the Kiali dashboard using istioctl.

LANGUAGE: bash
CODE:
$ istioctl dashboard kiali

----------------------------------------

TITLE: YAML Front Matter Configuration for Istio 1.12 Release
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.12 release announcement page, including title, publication date, release version, and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 1.12
linktitle: 1.12
subtitle: Major Update
description: Istio 1.12 release announcement.
publishdate: 2021-11-18
release: 1.12.0
skip_list: true
aliases:
    - /news/announcing-1.12
    - /news/announcing-1.12.0
---

----------------------------------------

TITLE: Displaying Previous Istio Version in Documentation
DESCRIPTION: This snippet is a placeholder for showing the previous version of Istio. It uses a custom shortcode to dynamically insert the version number in documentation.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_previous_version >}}
{{< istio_previous_version >}}
{{< /text >}}

----------------------------------------

TITLE: Installing Istio with Basic Tracing Configuration
DESCRIPTION: Installation of Istio with tracing enabled, 100% sampling rate, and a custom cluster ID tag using environment variables.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./tracing.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing:
        sampling: 100.0
        max_path_tag_length: 256
        custom_tags:
          clusterID:
            environment:
              name: ISTIO_META_CLUSTER_ID
EOF
$ istioctl install -f ./tracing.yaml

----------------------------------------

TITLE: Correcting ServiceEntry for TLS Origination
DESCRIPTION: Corrected ServiceEntry configuration to allow TLS origination.

LANGUAGE: yaml
CODE:
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 443
    name: http
    protocol: HTTP

----------------------------------------

TITLE: Tip Callout Examples in Istio Docs
DESCRIPTION: Shows two variations of tip callouts: single paragraph and two paragraphs.

LANGUAGE: markdown
CODE:
{{< tip >}}
This is a tip
{{< /tip >}}

{{< tip >}}
This is a tip

with two paragraphs
{{< /tip >}}

----------------------------------------

TITLE: Ztunnel L4 Telemetry Metrics Example
DESCRIPTION: Sample L4 metrics output from Ztunnel showing TCP connection statistics with detailed labels.

LANGUAGE: plaintext
CODE:
istio_tcp_connections_opened_total{
  reporter="source",
  source_workload="sleep",
  source_workload_namespace="default",
  source_principal="spiffe://cluster.local/ns/default/sa/sleep",
  destination_workload="helloworld-v1",
  destination_workload_namespace="default",
  destination_principal="spiffe://cluster.local/ns/default/sa/helloworld",
  request_protocol="tcp",
  connection_security_policy="mutual_tls"
  ...
} 1

----------------------------------------

TITLE: Inspecting and Modifying Ratings in MySQL
DESCRIPTION: Demonstrate how to inspect and modify the ratings data in the MySQL database. This allows for visual verification of the Bookinfo application's output changes.

LANGUAGE: bash
CODE:
$ mysql -u root -ppassword test -e "select * from ratings;"

LANGUAGE: bash
CODE:
$ mysql -u root -ppassword test -e  "update ratings set rating=1 where reviewid=1;select * from ratings;"

----------------------------------------

TITLE: Configuring Secure Access for Grafana in Istio
DESCRIPTION: This YAML configuration sets up a Gateway, VirtualService, and DestinationRule for secure access to Grafana using HTTPS.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: grafana-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https-grafana
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: telemetry-gw-cert
    hosts:
    - "grafana.${INGRESS_DOMAIN}"
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: grafana-vs
  namespace: istio-system
spec:
  hosts:
  - "grafana.${INGRESS_DOMAIN}"
  gateways:
  - grafana-gateway
  http:
  - route:
    - destination:
        host: grafana
        port:
          number: 3000
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: grafana
  namespace: istio-system
spec:
  host: grafana
  trafficPolicy:
    tls:
      mode: DISABLE

----------------------------------------

TITLE: Setting Default Revision Command for Istio
DESCRIPTION: Commands to switch the default revision when performing a revision-based upgrade in Istio. Includes both istioctl and Helm-based approaches.

LANGUAGE: shell
CODE:
istioctl tag set default --revision <new revision>\nhelm upgrade istio-base manifests/charts/base -n istio-system --set defaultRevision=<new revision>

----------------------------------------

TITLE: Configuring MeshConfig Tracing Settings
DESCRIPTION: Global tracing configuration using MeshConfig to set sampling rate and custom header tags.

LANGUAGE: yaml
CODE:
cat <<'EOF' > tracing.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing:
        sampling: 10
        custom_tags:
          my_tag_header:
            header:
              name: host
EOF

----------------------------------------

TITLE: Basic Shell Command for Test Status
DESCRIPTION: Command to check current test coverage and list tested/untested documents

LANGUAGE: sh
CODE:
make test_status

----------------------------------------

TITLE: Defining Release Metadata in YAML
DESCRIPTION: YAML front matter defining metadata for the Istio 1.24.2 release announcement, including title, subtitle, publication date, and release version.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 1.24.2
linktitle: 1.24.2
subtitle: Patch Release
description: Istio 1.24.2 patch release.
publishdate: 2024-12-18
release: 1.24.2
---

----------------------------------------

TITLE: Configuring Istio Helm Repository in Bash
DESCRIPTION: This snippet shows how to add the Istio Helm repository and update the local repository cache. It uses the 'helm repo add' command to add the Istio release storage as a repository source, followed by 'helm repo update' to refresh the local cache.

LANGUAGE: bash
CODE:
$ helm repo add istio https://istio-release.storage.googleapis.com/charts
$ helm repo update

----------------------------------------

TITLE: Customizing Tracing Tag Length
DESCRIPTION: Modifies the maximum length for request path in HttpUrl span tags using IstioOperator configuration.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing: {} # disable legacy tracing options via `MeshConfig`
    extensionProviders:
    - name: "zipkin"
      zipkin:
        service: zipkin.istio-system.svc.cluster.local
        port: 9411
        maxTagLength: <VALUE>

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio Day CFP Announcement
DESCRIPTION: YAML configuration block defining metadata for the CFP announcement including date range, impression limits, and timeout settings. This frontmatter controls how the announcement is displayed and managed.

LANGUAGE: yaml
CODE:
---
title: CFP for Istio Day North America closes soon!
period_start: 2023-07-26
period_end: 2023-08-06
max_impressions: 12
timeout: 20
---

----------------------------------------

TITLE: Enabling Tracing in Istio
DESCRIPTION: This snippet demonstrates how to enable tracing in Istio by applying a Telemetry configuration. It specifies Jaeger as the tracing provider.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - providers:
    - name: jaeger
EOF

----------------------------------------

TITLE: Creating Homepage Content Panel in Istio
DESCRIPTION: Demonstrates how to create landing panels on the homepage using the content_panel shortcode with parameters for type, title, text, button and URL.

LANGUAGE: markdown
CODE:
{{< content_panel type="dark" title="service_mesh" text="You can find what you need to make Istio do exactly what you need it to do." button="learn_more" url="/about/service-mesh" >}}

----------------------------------------

TITLE: Deleting Istio CRDs
DESCRIPTION: Removes all Custom Resource Definitions (CRDs) installed by Istio from the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl get crd -oname | grep --color=never 'istio.io' | xargs kubectl delete

----------------------------------------

TITLE: Disabling Access Logging for Specific Workload in Istio
DESCRIPTION: This YAML configuration disables access logging for the 'curl' service. It creates a Telemetry resource in the default namespace that matches the 'app: curl' label.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: disable-curl-logging
  namespace: default
spec:
  selector:
    matchLabels:
      app: curl
  accessLogging:
  - providers:
    - name: otel
    disabled: true

----------------------------------------

TITLE: Disabling Access Logging for Specific Workload in Istio
DESCRIPTION: This YAML configuration disables access logging for the 'curl' service. It creates a Telemetry resource in the default namespace that matches the 'app: curl' label.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: disable-curl-logging
  namespace: default
spec:
  selector:
    matchLabels:
      app: curl
  accessLogging:
  - providers:
    - name: otel
    disabled: true

----------------------------------------

TITLE: CVE Details in Markdown
DESCRIPTION: Security vulnerability details for CVE-2023-35945 affecting HTTP/2 memory in nghttp2 codec

LANGUAGE: markdown
CODE:
[CVE-2023-35945](https://github.com/envoyproxy/envoy/security/advisories/GHSA-jfxv-29pc-x22r)

----------------------------------------

TITLE: Specifying Kubernetes Version Support
DESCRIPTION: Version compatibility declaration showing supported Kubernetes versions for Istio 1.11.0.

LANGUAGE: text
CODE:
1.18.0 to 1.22.x

----------------------------------------

TITLE: Configuring EnvoyFilter for Fault Injection
DESCRIPTION: EnvoyFilter configuration to inject faults when VirtualService fault injection conflicts with retry policies.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: hello-world-filter
spec:
  workloadSelector:
    labels:
      app: helloworld
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND # will match outbound listeners in all sidecars
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.fault
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault"
          abort:
            http_status: 500
            percentage:
              numerator: 50
              denominator: HUNDRED

----------------------------------------

TITLE: Deleting Istio CRDs from both clusters
DESCRIPTION: Removes all Istio-related Custom Resource Definitions (CRDs) from both clusters.

LANGUAGE: bash
CODE:
kubectl get crd -oname --context "${CTX_CLUSTER1}" | grep --color=never 'istio.io' | xargs kubectl delete --context "${CTX_CLUSTER1}"
kubectl get crd -oname --context "${CTX_CLUSTER2}" | grep --color=never 'istio.io' | xargs kubectl delete --context "${CTX_CLUSTER2}"

----------------------------------------

TITLE: Deploying Istio Ingress Gateway for HTTP Traffic on Port 80
DESCRIPTION: This YAML defines a Gateway and VirtualService for routing HTTP traffic on port 80 to the httpbin service. It specifies the host and URI prefix for routing.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "a25fa0b4835b.elb.us-west-2.amazonaws.com"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "a25fa0b4835b.elb.us-west-2.amazonaws.com"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /headers
    route:
    - destination:
        port:
          number: 8000
        host: httpbin

----------------------------------------

TITLE: Configuring Insecure Access for Kiali in Istio
DESCRIPTION: This YAML configuration sets up a Gateway, VirtualService, and DestinationRule for insecure access to Kiali using HTTP.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: kiali-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http-kiali
      protocol: HTTP
    hosts:
    - "kiali.${INGRESS_DOMAIN}"
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: kiali-vs
  namespace: istio-system
spec:
  hosts:
  - "kiali.${INGRESS_DOMAIN}"
  gateways:
  - kiali-gateway
  http:
  - route:
    - destination:
        host: kiali
        port:
          number: 20001
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: kiali
  namespace: istio-system
spec:
  host: kiali
  trafficPolicy:
    tls:
      mode: DISABLE

----------------------------------------

TITLE: Setting Compatibility Profile Values in Istio 1.24
DESCRIPTION: This YAML snippet defines the values for the new 1.23 compatibility profile in Istio 1.24. It sets various feature flags to maintain compatibility with older versions of Istio.

LANGUAGE: yaml
CODE:
ENABLE_INBOUND_RETRY_POLICY: "false"
EXCLUDE_UNSAFE_503_FROM_DEFAULT_RETRY: "false"
PREFER_DESTINATIONRULE_TLS_FOR_EXTERNAL_SERVICES: "false"
ENABLE_ENHANCED_DESTINATIONRULE_MERGE: "false"
PILOT_UNIFIED_SIDECAR_SCOPE: "false"
ENABLE_DEFERRED_STATS_CREATION: "false"
BYPASS_OVERLOAD_MANAGER_FOR_STATIC_LISTENERS: "false"

----------------------------------------

TITLE: Defining Robots.txt Rules for Istio Documentation Site
DESCRIPTION: Standard robots.txt configuration that specifies crawler access rules. It allows general access while blocking the legacy v-0.1 documentation path and defines the XML sitemap location.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Labeling Namespace for Istio Discovery
DESCRIPTION: Labels the default namespace with 'istio-discovery=enabled' to include it in the Istio service mesh discovery.

LANGUAGE: bash
CODE:
$ kubectl label namespace default istio-discovery=enabled

----------------------------------------

TITLE: Deploying OpenTelemetry Collector in Kubernetes with Istio
DESCRIPTION: This command applies the OpenTelemetry Collector configuration to the 'observability' namespace. It uses a predefined YAML file ('otel.yaml') that contains the necessary Kubernetes resources for the collector deployment.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/open-telemetry/otel.yaml@ -n observability

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio 1.24.x Release Page
DESCRIPTION: YAML frontmatter configuration block that defines metadata and layout properties for the Istio 1.24.x release documentation page. Specifies the title, description, weight for ordering, layout type, and decorative elements.

LANGUAGE: yaml
CODE:
---
title: 1.24.x Releases
description: Announcements for the 1.24 release and its associated patch releases.
weight: 6
list_by_publishdate: true
layout: release-grid
decoration: dot
---

----------------------------------------

TITLE: Testing Wasm Module Authentication
DESCRIPTION: Command examples to test the configured Basic Auth Wasm module by making requests to the /productpage endpoint both with and without credentials.

LANGUAGE: bash
CODE:
curl -s -o /dev/null -w "%{http_code}" "http://$INGRESS_HOST:$INGRESS_PORT/productpage"

LANGUAGE: bash
CODE:
curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Basic YWRtaW4zOmFkbWluMw==" "http://$INGRESS_HOST:$INGRESS_PORT/productpage"

----------------------------------------

TITLE: Configuring Aliases for Page Redirection in Istio Documentation
DESCRIPTION: This example shows how to set up aliases in the front matter to handle page redirects when content is moved or renamed. It ensures that existing links continue to work.

LANGUAGE: yaml
CODE:
---
title: Frequently Asked Questions
description: Questions Asked Frequently.
weight: 13
aliases:
    - /help/faq
---

----------------------------------------

TITLE: Verifying Envoy Endpoints for Dual-Stack Routing
DESCRIPTION: This command displays the Envoy endpoints configuration to verify that routing is set up for both IPv4 and IPv6 addresses in a dual-stack environment.

LANGUAGE: bash
CODE:
$ istioctl proxy-config endpoints "$(kubectl get pod -l app=curl -o jsonpath='{.items[0].metadata.name}')" --port 9000

----------------------------------------

TITLE: Environment Variable Commands
DESCRIPTION: Command line instructions for setting environment variables and configuration options in Istio.

LANGUAGE: bash
CODE:
--set values.pilot.env.PILOT_JWT_PUB_KEY_REFRESH_INTERVAL=<duration>

----------------------------------------

TITLE: Configuring Robots.txt Rules for Istio Documentation
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site content and points to the sitemap location. The configuration includes no disallow rules and references the v1.3 sitemap XML file.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.3/sitemap.xml

----------------------------------------

TITLE: Initializing MySQL database for Bookinfo ratings
DESCRIPTION: Initializes the MySQL database with the schema and data for the Bookinfo ratings service.

LANGUAGE: bash
CODE:
$ curl -s {{< github_file >}}/samples/bookinfo/src/mysql/mysqldb-init.sql | mysqlsh --sql --ssl-mode=REQUIRED -u admin -p --host $MYSQL_DB_HOST --port $MYSQL_DB_PORT

----------------------------------------

TITLE: Checking Default Service Account Permissions in Bash
DESCRIPTION: This bash command checks the permissions for the default service account in the default namespace. It lists the pod security policies and their allowed capabilities, which is useful for verifying Istio compatibility.

LANGUAGE: bash
CODE:
$ for psp in $(kubectl get psp -o jsonpath="{range .items[*]}{@.metadata.name}{'\n'}{end}"); do if [ $(kubectl auth can-i use psp/$psp --as=system:serviceaccount:default:default) = yes ]; then kubectl get psp/$psp --no-headers -o=custom-columns=NAME:.metadata.name,CAPS:.spec.allowedCapabilities; fi; done

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.14.0 change notes documentation page.

LANGUAGE: yaml
CODE:
---
title: Istio 1.14 Change Notes
linktitle: 1.14.0
subtitle: Minor Release
description: Istio 1.14.0 change notes.
publishdate: 2022-05-24
release: 1.14.0
weight: 10
aliases:
- /news/announcing-1.14.0
---

----------------------------------------

TITLE: Setting Environment Variables for Istio VM Integration
DESCRIPTION: Sets up environment variables needed for Istio VM integration, including application name, namespace, working directory, and network configuration.

LANGUAGE: bash
CODE:
$ VM_APP="<the name of the application this VM will run>"
$ VM_NAMESPACE="<the name of your service namespace>"
$ WORK_DIR="<a certificate working directory>"
$ SERVICE_ACCOUNT="<name of the Kubernetes service account you want to use for your VM>"
$ CLUSTER_NETWORK=""
$ VM_NETWORK=""
$ CLUSTER="Kubernetes"

----------------------------------------

TITLE: Cleaning Up Gateway API Routing Rules
DESCRIPTION: This snippet demonstrates how to remove the HTTPRoute and VirtualService created using Gateway API and Istio.

LANGUAGE: bash
CODE:
$ kubectl delete httproute reviews
$ kubectl delete virtualservice ratings

----------------------------------------

TITLE: Configuring Retries in Istio
DESCRIPTION: Example of configuring retry attempts and timeouts for a service subset using a virtual service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - route:
    - destination:
        host: ratings
        subset: v1
    retries:
      attempts: 3
      perTryTimeout: 2s

----------------------------------------

TITLE: YAML Front Matter Configuration for Istio 1.6.5 Release Notes
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.6.5 release documentation page, including title, publish date, and URL aliases.

LANGUAGE: yaml
CODE:
title: Announcing Istio 1.6.5
linktitle: 1.6.5
subtitle: Patch Release
description: Istio 1.6.5 patch release.
publishdate: 2020-07-09
release: 1.6.5
aliases:
    - /news/announcing-1.6.5

----------------------------------------

TITLE: Deploying Test Workloads
DESCRIPTION: Commands to create a namespace, enable Istio injection, and deploy httpbin and curl test workloads

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl label ns foo istio-injection=enabled
$ kubectl apply -f @samples/httpbin/httpbin.yaml@ -n foo
$ kubectl apply -f @samples/curl/curl.yaml@ -n foo

----------------------------------------

TITLE: Invalid Istio Service Annotation Example
DESCRIPTION: Example of a Kubernetes Service configuration that triggers the InvalidAnnotation warning due to using an unknown Istio annotation 'networking.istio.io/exportTwo'.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
  annotations:
    # no such Istio annotation
    networking.istio.io/exportTwo: bar
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin

----------------------------------------

TITLE: Linking to GitHub Files in Code Blocks
DESCRIPTION: Shows how to reference files from Istio's GitHub repository in code blocks using @ symbols.

LANGUAGE: markdown
CODE:
{{</* text bash */>}}
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-v3.yaml@
{{</* /text */>}}

----------------------------------------

TITLE: Configuring Web Crawler Access in robots.txt for Istio Project
DESCRIPTION: This robots.txt file configures access rules for web crawlers visiting the Istio project website. It allows all user agents to access any part of the site and specifies the location of the sitemap for improved indexing.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.20//sitemap.xml

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML metadata configuring the documentation page title, links, and publishing details for Istio 1.18.0 release notes.

LANGUAGE: yaml
CODE:
---
title: Istio 1.18.0 Change Notes
linktitle: 1.18.0
subtitle: Minor Release
description: Istio 1.18.0 change notes.
publishdate: 2023-06-07
release: 1.18.0
weight: 20
---

----------------------------------------

TITLE: Displaying Gateway API Version in Istio Documentation
DESCRIPTION: This snippet is a placeholder for displaying the Kubernetes Gateway API version used by Istio. It uses a custom shortcode to insert the version number dynamically.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=gateway_api_version >}}
{{< k8s_gateway_api_version >}}
{{< /text >}}

----------------------------------------

TITLE: Deleting Istio System Namespace
DESCRIPTION: Removes the istio-system namespace from the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl delete namespace istio-system

----------------------------------------

TITLE: Adding Syntax Highlighting to Go Code
DESCRIPTION: Demonstrates how to use the 'text' shortcode to add Go syntax highlighting to a code block.

LANGUAGE: markdown
CODE:
{{</* text go */>}}
func HelloWorld() {
  fmt.Println("Hello World")
}
{{</* /text */>}}

----------------------------------------

TITLE: Upgrading Istio CRDs
DESCRIPTION: Updates the Istio Custom Resource Definitions using Helm.

LANGUAGE: bash
CODE:
$ helm upgrade istio-base istio/base -n istio-system

----------------------------------------

TITLE: Adding OpenTelemetry Provider to MeshConfig in Istio
DESCRIPTION: This YAML snippet shows how to add an OpenTelemetry provider named 'otel' to the Istio MeshConfig. It specifies the service and port for the OpenTelemetry collector.

LANGUAGE: yaml
CODE:
extensionProviders:
- name: otel
  envoyOtelAls:
    service: opentelemetry-collector.observability.svc.cluster.local
    port: 4317

----------------------------------------

TITLE: Adding OpenTelemetry Provider to MeshConfig in Istio
DESCRIPTION: This YAML snippet shows how to add an OpenTelemetry provider named 'otel' to the Istio MeshConfig. It specifies the service and port for the OpenTelemetry collector.

LANGUAGE: yaml
CODE:
extensionProviders:
- name: otel
  envoyOtelAls:
    service: opentelemetry-collector.observability.svc.cluster.local
    port: 4317

----------------------------------------

TITLE: Applying EnvoyFilter Configuration with Deprecation Warnings
DESCRIPTION: Example command showing deprecation warnings when applying an EnvoyFilter using old filter names.

LANGUAGE: bash
CODE:
$ kubectl apply -f envoyfilter.yaml
Warning: using deprecated filter name "envoy.http_connection_manager"; use "envoy.filters.network.http_connection_manager" instead
Warning: using deprecated filter name "envoy.router"; use "envoy.filters.http.router" instead
Warning: using deprecated type_url(s); type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
envoyfilter.networking.istio.io/add-header configured

----------------------------------------

TITLE: Defining WorkloadEntry for Virtual Machine Instance in Istio
DESCRIPTION: YAML configuration showing an auto-generated WorkloadEntry resource that represents a single virtual machine instance in the mesh. Includes network address, labels, and service account configuration.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: WorkloadEntry
metadata:
  annotations:
    istio.io/autoRegistrationGroup: product-vm
  labels:
    app: product
  name: product-vm-1.2.3.4
spec:
  address: 1.2.3.4
  labels:
    app: product
  serviceAccount: default

----------------------------------------

TITLE: Setting MYHOST Environment Variable in Bash
DESCRIPTION: Sets the MYHOST environment variable to hold the URL of the application using kubectl and jsonpath.

LANGUAGE: bash
CODE:
$ export MYHOST=$(kubectl config view -o jsonpath={.contexts..namespace}).bookinfo.com

----------------------------------------

TITLE: Configuring Istio VirtualService for NGINX Routing
DESCRIPTION: Creates an Istio VirtualService to route traffic for nginx.example.com through the configured Gateway.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: nginx
spec:
  hosts:
  - nginx.example.com
  gateways:
  - mygateway
  tls:
  - match:
    - port: 443
      sniHosts:
      - nginx.example.com
    route:
    - destination:
        host: my-nginx
        port:
          number: 443

----------------------------------------

TITLE: Configuring Pod-Level Tracing Settings
DESCRIPTION: Pod-specific tracing configuration using proxy.istio.io/config annotation to override mesh-wide settings.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curl
spec:
  template:
    metadata:
      annotations:
        proxy.istio.io/config: |
          tracing:
            sampling: 10
            custom_tags:
              my_tag_header:
                header:
                  name: host
    spec:

----------------------------------------

TITLE: New istio_cni Configuration in YAML
DESCRIPTION: Demonstrates the new istio_cni configuration option added in Istio 1.1.

LANGUAGE: yaml
CODE:
istio_cni:
  enabled: false

----------------------------------------

TITLE: Ineffective VirtualService Match Example in Istio
DESCRIPTION: Example of a VirtualService configuration that triggers the IST0131 warning due to duplicate match rules. The configuration shows two TLS routes with identical match conditions but different destinations, where the second route will never be reached.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: tls-routing
spec:
  hosts:
  - www1.googleapis.com
  - api1.facebook.com
  tls:
  - match:
    - port: 2443
      sniHosts:
      - www1.googleapis.com
    route:
    - destination:
        host: www1.googleapis.com
  - match:
    - port: 2443
      sniHosts:
      - www1.googleapis.com
    route:
    - destination:
        host: api1.facebook.com

----------------------------------------

TITLE: Basic Message Format Structure
DESCRIPTION: Shows the general format structure for analyzer messages with level, code, affected resource and message details.

LANGUAGE: plain
CODE:
<level> [<code>] (<affected-resource>) <message-details>

----------------------------------------

TITLE: Configuring Search Engine Crawler Access for Istio.io
DESCRIPTION: Standard robots.txt configuration that allows general crawler access while restricting access to legacy version 0.1 documentation. Includes reference to the XML sitemap location for improved search engine indexing.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Configuring Proxy Protocol in Authorization Policy
DESCRIPTION: Configuration showing proper way to use proxy protocol with remoteIpBlocks in authorization policies

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: proxy-protocol-policy
spec:
  selector:
    matchLabels:
      app: example
  source:
    remoteIpBlocks: ["10.0.0.0/8"]
  when:
  - key: remote.ip
    values: ["10.0.0.2"]

----------------------------------------

TITLE: Inserting Kubernetes Gateway API Version in Plain Text
DESCRIPTION: This snippet is a placeholder for inserting the Kubernetes Gateway API version. It uses a custom shortcode to dynamically populate the version number.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=gateway_api_version >}}
{{< k8s_gateway_api_version >}}
{{< /text >}}

----------------------------------------

TITLE: Deleting Istio Base Chart
DESCRIPTION: Removes the installed Istio base chart using Helm. Note that this does not delete the installed CRDs.

LANGUAGE: bash
CODE:
$ helm delete istio-base -n istio-system

----------------------------------------

TITLE: Generating HelloWorld Configurations
DESCRIPTION: Generates HelloWorld application configurations for each locality using the locality name as the version identifier.

LANGUAGE: bash
CODE:
for LOC in "region1.zone1" "region1.zone2" "region2.zone3" "region3.zone4"; \
  do \
    ./@samples/helloworld/gen-helloworld.sh@ \
      --version "$LOC" > "helloworld-${LOC}.yaml"; \
  done

----------------------------------------

TITLE: Configuring ECC Signature Algorithm for Sidecars in Helm Values
DESCRIPTION: This YAML snippet shows how to configure sidecars to use ECDSA signature algorithm instead of RSA using a Helm values file. It sets the ECC_SIGNATURE_ALGORITHM in the proxyMetadata section of the meshConfig.

LANGUAGE: yaml
CODE:
meshConfig:
  defaultConfig:
    proxyMetadata:
      ECC_SIGNATURE_ALGORITHM: "ECDSA"

----------------------------------------

TITLE: Kubernetes Gateway Pod Configuration Example
DESCRIPTION: Example of a Kubernetes Gateway pod configuration showing the relevant labels and annotations that policies might target.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  annotations:
    istio.io/rev: default
  labels:
    gateway.networking.k8s.io/gateway-name: bookinfo-gateway
  name: bookinfo-gateway-istio-6ff4cf9645-xbqmc
  namespace: default
spec:
  containers:
  - image: proxyv2:1.21.0
    name: istio-proxy

----------------------------------------

TITLE: Gateway Router Mode Configuration in YAML
DESCRIPTION: YAML configuration for setting up gateway router mode using environment variables to enable SNI-DNAT functionality.

LANGUAGE: yaml
CODE:
ingressGateways:
- name: istio-ingressgateway
    enabled: true
    k8s:
    env:
        - name: ISTIO_META_ROUTER_MODE
          value: "sni-dnat"

----------------------------------------

TITLE: Creating Involvement Block in Istio
DESCRIPTION: Demonstrates how to create involvement sections using the involve_block shortcode with title, subtitle and icon parameters.

LANGUAGE: markdown
CODE:
{{% involve_block title="This is title" subtitle="This is subtitle" icon="icon" %}}
Content
{{% /involve_block %}}

----------------------------------------

TITLE: Displaying ReferencedResourceNotFound Error Message
DESCRIPTION: Example error message showing a VirtualService referencing a non-existent gateway.

LANGUAGE: plain
CODE:
Error [IST0101] (VirtualService httpbin.default) Referenced gateway not found: "httpbin-gateway-bogus"

----------------------------------------

TITLE: Configuring cert-manager Issuer for Istio in YAML
DESCRIPTION: This snippet defines a cert-manager Issuer resource in the istio-system namespace. It specifies a CA issuer type using a secret named 'ca-key-pair'.

LANGUAGE: yaml
CODE:
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ca-issuer
  namespace: istio-system
spec:
  ca:
    secretName: ca-key-pair

----------------------------------------

TITLE: Installing Experimental Gateway API CRDs
DESCRIPTION: Command to install the experimental version of Gateway API Custom Resource Definitions using kubectl kustomize.

LANGUAGE: bash
CODE:
kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref={{< k8s_gateway_api_version >}}" | kubectl apply -f -

----------------------------------------

TITLE: Set Custom Remote IP Blocks in Authorization Policy
DESCRIPTION: Sample YAML configuration for configuring remote IP blocks in Istio Authorization Policy

LANGUAGE: yaml
CODE:
TopologyHost:
  numTrustedProxies: 2

----------------------------------------

TITLE: Namespace Label Management
DESCRIPTION: Commands to update namespace labels for migrating workloads to the canary revision

LANGUAGE: bash
CODE:
$ kubectl label namespace test-ns istio-injection- istio.io/rev=canary

----------------------------------------

TITLE: Query Reviews Service V3 Requests
DESCRIPTION: Query to get total requests count for v3 of the reviews service

LANGUAGE: plaintext
CODE:
istio_requests_total{destination_service="reviews.default.svc.cluster.local", destination_version="v3"}

----------------------------------------

TITLE: Incorrect Envoy String Match Translation
DESCRIPTION: Shows how Istio incorrectly translates the principal field to an Envoy string match configuration, leading to the security vulnerability.

LANGUAGE: yaml
CODE:
stringMatch:
  suffix: spiffe:///ns/ns1/sa/foo

----------------------------------------

TITLE: Labeling Default Namespace for PSA Baseline Policy
DESCRIPTION: Adds labels to the default namespace to enforce the 'baseline' Pod Security Admission policy.

LANGUAGE: bash
CODE:
$ kubectl label --overwrite ns default \
    pod-security.kubernetes.io/enforce=baseline \
    pod-security.kubernetes.io/enforce-version=latest
namespace/default labeled

----------------------------------------

TITLE: Defining a Kubernetes Service with Port Exposure
DESCRIPTION: This YAML snippet defines a Kubernetes Service that exposes port 8080 for a Pod running a netcat command listening on localhost. This configuration leads to the LocalhostListener issue as the port won't be accessible to other pods.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: netcat
spec:
  ports:
  - port: 8080
    protocol: TCP
  selector:
    app: netcat

----------------------------------------

TITLE: Configuring Istio Gateway and Service with Mismatched Ports
DESCRIPTION: This snippet shows an Istio Gateway and Service configuration where the Gateway defines ports that are not available in the Service, triggering the GatewayPortNotDefinedOnService message.

LANGUAGE: yaml
CODE:
# Gateway with bogus ports

apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: istio-ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
  - port:
      number: 8004
      name: http2
      protocol: HTTP
    hosts:
    - "*"
---

# Default Gateway Service

apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
spec:
  selector:
    istio: ingressgateway
  ports:
  - name: status-port
    port: 15021
    protocol: TCP
    targetPort: 15021
  - name: http2
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443

----------------------------------------

TITLE: Istio Galley ValidatingWebhookConfiguration YAML
DESCRIPTION: This YAML snippet defines a ValidatingWebhookConfiguration for Istio Galley. It includes metadata, labels, and webhook configurations for admission control in Kubernetes. The configuration is partial and some sections are omitted.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-galley
  namespace: istio-system
  labels:
    app: istio-galley
    chart: galley-1.0.0
    release: istio
    heritage: Tiller
webhooks:
  - name: pilot.validation.istio.io
    clientConfig:
      service:
        name: istio-galley
        namespace: istio-system
        path: "/admitpilot"
      caBundle: ""
    rules:
      - operations:
      (... snip ...)

----------------------------------------

TITLE: Installing Prometheus using Istio sample configuration
DESCRIPTION: Quickly deploy Prometheus into a Kubernetes cluster using Istio's sample configuration. This is intended for demonstration purposes and is not tuned for performance or security.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/addons/prometheus.yaml

----------------------------------------

TITLE: Configuring robots.txt for Istio Documentation
DESCRIPTION: Basic robots.txt configuration that allows unrestricted crawler access and points to the sitemap location for version 1.18 of the documentation.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.18/sitemap.xml

----------------------------------------

TITLE: Customizing Pilot Resources and HPA in IstioOperator
DESCRIPTION: YAML configuration for an IstioOperator resource that adjusts CPU/memory resources and horizontal pod autoscaling settings for the Pilot component.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 1000m # override from default 500m
            memory: 4096Mi # ... default 2048Mi
        hpaSpec:
          maxReplicas: 10 # ... default 5
          minReplicas: 2  # ... default 1

----------------------------------------

TITLE: Creating Multi-Zone Kind Cluster Configuration
DESCRIPTION: Creates a local Kubernetes cluster using Kind with multiple worker nodes for testing zone-based load balancing.

LANGUAGE: yaml
CODE:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker
- role: worker

----------------------------------------

TITLE: Configuring CA Certificate Bit Length in Istio Operator
DESCRIPTION: This YAML snippet shows how to modify the self-signed CA certificate's bit length using an IstioOperator manifest. It sets the CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE environment variable for pilot.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    pilot:
      env:
        CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE: 4096

----------------------------------------

TITLE: EnvoyFilter Configuration - Legacy Syntax (1.6)
DESCRIPTION: Example of EnvoyFilter configuration using the legacy 'config' syntax for Istio 1.6.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-1.6
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: ANY
        listener:
          filterChain:
            filter:
              name: envoy.http_connection_manager
        proxy:
          proxyVersion: ^1\.6.*
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          config:
            inlineCode: |
              function envoy_on_request(handle)
                request_handle:headers():add("foo", "bar")
              end

----------------------------------------

TITLE: Importing Istio Dashboards to Existing Grafana Deployment
DESCRIPTION: This bash script imports all Istio dashboards into an existing Grafana instance. It iterates through dashboard IDs, fetches the appropriate revision for the specified Istio version, and imports each dashboard using the Grafana API.

LANGUAGE: bash
CODE:
$ # Address of Grafana
$ GRAFANA_HOST="http://localhost:3000"
$ # Login credentials, if authentication is used
$ GRAFANA_CRED="USER:PASSWORD"
$ # The name of the Prometheus data source to use
$ GRAFANA_DATASOURCE="Prometheus"
$ # The version of Istio to deploy
$ VERSION={{< istio_full_version >}}
$ # Import all Istio dashboards
$ for DASHBOARD in 7639 11829 7636 7630 7645 13277; do
$     REVISION="$(curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions -s | jq ".items[] | select(.description | contains(\"${VERSION}\")) | .revision" | tail -n 1)"
$     curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions/${REVISION}/download > /tmp/dashboard.json
$     echo "Importing $(cat /tmp/dashboard.json | jq -r '.title') (revision ${REVISION}, id ${DASHBOARD})..."
$     curl -s -k -u "$GRAFANA_CRED" -XPOST \
$         -H "Accept: application/json" \
$         -H "Content-Type: application/json" \
$         -d "{\"dashboard\":$(cat /tmp/dashboard.json),\"overwrite\":true, \
$             \"inputs\":[{\"name\":\"DS_PROMETHEUS\",\"type\":\"datasource\", \
$             \"pluginId\":\"prometheus\",\"value\":\"$GRAFANA_DATASOURCE\"}]}" \
$         $GRAFANA_HOST/api/dashboards/import
$     echo -e "\nDone\n"
$ done

----------------------------------------

TITLE: Deploying Istio Ingress Gateway for HTTPS Traffic on Port 443
DESCRIPTION: This YAML defines a Gateway and VirtualService for routing HTTPS traffic on port 443 to the httpbin service. It specifies TLS settings, credential name, and routing rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: mygateway2
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: httpbin-credential # must be the same as secret
    hosts:
    - "a25fa0b4835b.elb.us-west-2.amazonaws.com"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "a25fa0b4835b.elb.us-west-2.amazonaws.com"
  gateways:
  - mygateway2
  http:
  - match:
    - uri:
        prefix: /headers
    route:
    - destination:
        port:
          number: 8000
        host: httpbin

----------------------------------------

TITLE: Collecting Istio Analysis Data
DESCRIPTION: Command to analyze Istio configuration across all namespaces for potential issues.

LANGUAGE: bash
CODE:
istioctl analyze --all-namespaces

----------------------------------------

TITLE: Applying HTTPRoute for Version-based Routing with Gateway API
DESCRIPTION: This command creates an HTTPRoute resource to route all traffic to the v1 version of the reviews service using the Gateway API.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - backendRefs:
    - name: reviews-v1
      port: 9080

----------------------------------------

TITLE: Checking Kiali Signing Key Configuration
DESCRIPTION: Command to verify if the Kiali signing key is set in the ConfigMap.

LANGUAGE: bash
CODE:
kubectl get cm kiali -n istio-system -o yaml | grep signing_key

----------------------------------------

TITLE: EnvoyFilter with Absolute Operation Solution
DESCRIPTION: Corrected version of the EnvoyFilter configuration using the absolute INSERT_FIRST operation, which ensures predictable filter placement regardless of other filters.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-relative
  namespace: bookinfo
spec:
  workloadSelector:
    labels:
      app: reviews2
  configPatches:
    # The first patch adds the Lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        portNumber: 8080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_FIRST
      value: # Lua filter specification
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
              local headers, body = request_handle:httpCall(
               "lua_cluster",
               {
                [":method"] = "POST",
                [":path"] = "/acl",
                [":authority"] = "internal.org.net"
               },
              "authorize call",
              5000)
            end

----------------------------------------

TITLE: Configuring Services with Conflicting Ports in Kubernetes
DESCRIPTION: Example showing two Kubernetes services (nginx-a and nginx-b) that create a port conflict by selecting the same workload with identical targetPort (80) but different service ports (8080 and 80).

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: nginx-a
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 80
  selector:
    app: nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-b
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: nginx

----------------------------------------

TITLE: Installing Istio Components with OpenShift Platform Profile using Helm
DESCRIPTION: These bash commands install Istio components using Helm with the OpenShift platform profile.

LANGUAGE: bash
CODE:
$ helm install istiod istio/istiod -n istio-system --set profile=ambient --set global.platform=openshift --wait
$ helm install istio-cni istio/cni -n kube-system --set profile=ambient --set global.platform=openshift --wait
$ helm install ztunnel istio/ztunnel -n kube-system --set profile=ambient --set global.platform=openshift --wait

----------------------------------------

TITLE: Configuring Robots.txt for Istio Website
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the site content and points to the XML sitemap location in the v1.16 directory.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.16/sitemap.xml

----------------------------------------

TITLE: Running Istio Precheck for Version Compatibility
DESCRIPTION: Command to run istioctl precheck to detect potential compatibility issues when upgrading from a previous version.

LANGUAGE: shell
CODE:
$ istioctl x precheck --from-version {{< istio_previous_version >}}

----------------------------------------

TITLE: Defining Istio Authorization Policy with No Matching Workloads
DESCRIPTION: This YAML snippet defines an Istio authorization policy that triggers the NoMatchingWorkloadsFound error. The policy uses a selector with a bogus label that doesn't match any existing pods.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: httpbin-nopods
  namespace: httpbin
spec:
  selector:
    matchLabels:
      app: bogus-label # Bogus label. No matching workloads
      version: v1
  rules:
    - from:
        - source:
            principals: ["cluster.local/ns/default/sa/curl"]
        - source:
            namespaces: ["httpbin"]
      to:
        - operation:
            methods: ["GET"]
            paths: ["/info*"]
        - operation:
            methods: ["POST"]
            paths: ["/data"]
      when:
        - key: request.auth.claims[iss]
          values: ["https://accounts.google.com"]

----------------------------------------

TITLE: Serving the Istio Website on a Remote Server
DESCRIPTION: This command builds the Istio website and starts a web server to host it on a remote server. It uses the ISTIO_SERVE_DOMAIN environment variable to specify the IP address or DNS domain of the server.

LANGUAGE: bash
CODE:
$ make ISTIO_SERVE_DOMAIN=192.168.7.105 serve

----------------------------------------

TITLE: Demonstrating DNS Resolution in curl Request with Istio
DESCRIPTION: This snippet shows the verbose output of a curl request to example.com, demonstrating the DNS resolution process when Istio is involved. It illustrates how the domain is resolved to an IP address before Istio intercepts the request.

LANGUAGE: bash
CODE:
$ curl example.com -v
*   Trying 192.0.2.0:80...

----------------------------------------

TITLE: Gateway Configuration - Legacy Port Binding
DESCRIPTION: Example of legacy gateway configuration for Istio ingressgateway service ports before non-root permission changes.

LANGUAGE: yaml
CODE:
ingressGateways:
- name: istio-ingressgateway
  enabled: true
  k8s:
    service:
      ports:
        - port: 15021
          targetPort: 15021
          name: status-port
        - port: 80
          name: http2
        - port: 443
          name: https

----------------------------------------

TITLE: Defining RBAC Rules for Tenant Administrator
DESCRIPTION: YAML configuration for Role and RoleBinding to restrict a tenant administrator to a single Istio namespace.

LANGUAGE: yaml
CODE:
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: istio-system1
  name: ns-access-for-sales-admin-istio-system1
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["*"]
  verbs: ["*"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: access-all-istio-system1
  namespace: istio-system1
subjects:
- kind: User
  name: sales-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: ns-access-for-sales-admin-istio-system1
  apiGroup: rbac.authorization.k8s.io

----------------------------------------

TITLE: Installing Zipkin Demo in Istio
DESCRIPTION: Deploys a basic Zipkin installation in the Kubernetes cluster using a sample configuration provided by Istio. This deployment is intended for demonstration purposes only and is not optimized for production use.

LANGUAGE: bash
CODE:
$ kubectl apply -f {{< github_file >}}/samples/addons/extras/zipkin.yaml

----------------------------------------

TITLE: Configuring Robot Exclusion Rules and Sitemap for Istio Documentation
DESCRIPTION: This snippet defines the robot exclusion rules for web crawlers and specifies the sitemap location for the Istio documentation website. It allows all user agents to access all content and provides the path to the XML sitemap.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.13/sitemap.xml

----------------------------------------

TITLE: Checking Istio Sidecar Status with systemctl
DESCRIPTION: Verifies the running status of the Istio sidecar service using systemd.

LANGUAGE: bash
CODE:
systemctl status istio

----------------------------------------

TITLE: Adding Images with Hugo Shortcode
DESCRIPTION: Shows how to add images to content using the image shortcode with required and optional parameters for width, ratio, link, caption, alt text and title.

LANGUAGE: html
CODE:
{{</* image width="75%" ratio="45.34%"
    link="./<image.svg>"
    caption="<The caption displayed under the image>"
    */>}}

----------------------------------------

TITLE: Detecting Regular Expression Usage in Istio APIs (Bash)
DESCRIPTION: This bash script checks for regular expression usage in various Istio APIs including AuthenticationPolicy, VirtualService, HTTPAPISpec, and QuotaSpec. It outputs whether the system is affected by the vulnerability based on the presence of regex in these APIs.

LANGUAGE: bash
CODE:
set -e
set -u
set -o pipefail

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

echo "Checking regex usage in Istio API ..."

AFFECTED=()

JWT_REGEX=()
JWT_REGEX+=($(kubectl get Policy --all-namespaces -o jsonpath='{..regex}'))
JWT_REGEX+=($(kubectl get MeshPolicy --all-namespaces -o jsonpath='{..regex}'))
if [ "${#JWT_REGEX[@]}" != 0 ]; then
  AFFECTED+=("AuthenticationPolicy")
fi

VS_REGEX=()
VS_REGEX+=($(kubectl get VirtualService --all-namespaces -o jsonpath='{..regex}'))
if [ "${#VS_REGEX[@]}" != 0 ]; then
  AFFECTED+=("VirtualService")
fi

HTTPAPI_REGEX=()
HTTPAPI_REGEX+=($(kubectl get HTTPAPISpec --all-namespaces -o jsonpath='{..regex}'))
if [ "${#HTTPAPI_REGEX[@]}" != 0 ]; then
  AFFECTED+=("HTTPAPISpec")
fi

QUOTA_REGEX=()
QUOTA_REGEX+=($(kubectl get QuotaSpec --all-namespaces -o jsonpath='{..regex}'))
if [ "${#QUOTA_REGEX[@]}" != 0 ]; then
  AFFECTED+=("QuotaSpec")
fi

if [ "${#AFFECTED[@]}" != 0 ]; then
  echo "${red}YOU ARE AFFECTED: found regex used in ${AFFECTED[@]}${reset}"
  exit 1
fi

echo "${green}YOU ARE NOT AFFECTED: did not find regex usage${reset}"

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio Website Content Changes Page
DESCRIPTION: This YAML frontmatter configures metadata for the Istio website's content changes page. It sets the title, description, weight for ordering, aliases for redirects, and various display options.

LANGUAGE: yaml
CODE:
---
title: Website Content Changes
description: List of recent changes to this website.
weight: 110
aliases:
    - /about/log
    - /latest/about/log
skip_seealso: true
skip_byline: true
owner: istio/wg-docs-maintainers
test: n/a
---

----------------------------------------

TITLE: Installing Monitoring Addons
DESCRIPTION: Commands to install Kiali dashboard along with Prometheus, Grafana, and Jaeger for monitoring and visualizing the service mesh.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/addons
$ kubectl rollout status deployment/kiali -n istio-system
$ istioctl dashboard kiali

----------------------------------------

TITLE: Detecting Regular Expression Usage in Istio APIs (Bash)
DESCRIPTION: This bash script checks for regular expression usage in various Istio APIs including AuthenticationPolicy, VirtualService, HTTPAPISpec, and QuotaSpec. It outputs whether the system is affected by the vulnerability based on the presence of regex in these APIs.

LANGUAGE: bash
CODE:
set -e
set -u
set -o pipefail

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

echo "Checking regex usage in Istio API ..."

AFFECTED=()

JWT_REGEX=()
JWT_REGEX+=($(kubectl get Policy --all-namespaces -o jsonpath='{..regex}'))
JWT_REGEX+=($(kubectl get MeshPolicy --all-namespaces -o jsonpath='{..regex}'))
if [ "${#JWT_REGEX[@]}" != 0 ]; then
  AFFECTED+=("AuthenticationPolicy")
fi

VS_REGEX=()
VS_REGEX+=($(kubectl get VirtualService --all-namespaces -o jsonpath='{..regex}'))
if [ "${#VS_REGEX[@]}" != 0 ]; then
  AFFECTED+=("VirtualService")
fi

HTTPAPI_REGEX=()
HTTPAPI_REGEX+=($(kubectl get HTTPAPISpec --all-namespaces -o jsonpath='{..regex}'))
if [ "${#HTTPAPI_REGEX[@]}" != 0 ]; then
  AFFECTED+=("HTTPAPISpec")
fi

QUOTA_REGEX=()
QUOTA_REGEX+=($(kubectl get QuotaSpec --all-namespaces -o jsonpath='{..regex}'))
if [ "${#QUOTA_REGEX[@]}" != 0 ]; then
  AFFECTED+=("QuotaSpec")
fi

if [ "${#AFFECTED[@]}" != 0 ]; then
  echo "${red}YOU ARE AFFECTED: found regex used in ${AFFECTED[@]}${reset}"
  exit 1
fi

echo "${green}YOU ARE NOT AFFECTED: did not find regex usage${reset}"

----------------------------------------

TITLE: Installing Monitoring Addons
DESCRIPTION: Commands to install Kiali dashboard along with Prometheus, Grafana, and Jaeger for monitoring and visualizing the service mesh.

LANGUAGE: bash
CODE:
$ kubectl apply -f samples/addons
$ kubectl rollout status deployment/kiali -n istio-system
$ istioctl dashboard kiali

----------------------------------------

TITLE: Viewing Istio Proxy Logs
DESCRIPTION: Command to check the logs of the Istio sidecar proxy for the productpage service

LANGUAGE: bash
CODE:
kubectl logs -l app=productpage -c istio-proxy | grep GET

----------------------------------------

TITLE: Request-Based Classification Configuration in YAML
DESCRIPTION: YAML configuration for classifying requests using the istio.attributegen plugin. Defines rules for categorizing different types of review operations.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: istio-attributegen-filter
spec:
  selector:
    matchLabels:
      app: reviews
  url: https://storage.googleapis.com/istio-build/proxy/attributegen-359dcd3a19f109c50e97517fe6b1e2676e870c4d.wasm
  imagePullPolicy: Always
  phase: AUTHN
  pluginConfig:
    attributes:
    - output_attribute: "istio_operationId"
      match:
        - value: "ListReviews"
          condition: "request.url_path == '/reviews' && request.method == 'GET'"
        - value: "GetReview"
          condition: "request.url_path.matches('^/reviews/[[:alnum:]]*$') && request.method == 'GET'"
        - value: "CreateReview"
          condition: "request.url_path == '/reviews/' && request.method == 'POST'"
---
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: custom-tags
spec:
  metrics:
    - overrides:
        - match:
            metric: REQUEST_COUNT
            mode: CLIENT_AND_SERVER
          tagOverrides:
            request_operation:
              value: filter_state['wasm.istio_operationId']
      providers:
        - name: prometheus

----------------------------------------

TITLE: Installing Istio with Custom Trust Domain
DESCRIPTION: Installs Istio with a custom trust domain and mutual TLS enabled using istioctl.

LANGUAGE: bash
CODE:
$ istioctl install --set profile=demo --set meshConfig.trustDomain=old-td

----------------------------------------

TITLE: Configuring Web Crawler Access for Istio Docs
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers unrestricted access to the site and points to the XML sitemap location for v1.7 documentation.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.7/sitemap.xml

----------------------------------------

TITLE: Configuring ingress-nginx Service Routing in Istio
DESCRIPTION: YAML configuration for enabling service routing in ingress-nginx when integrating with Istio. This annotation ensures the load balancer uses service routing instead of pod IPs.

LANGUAGE: yaml
CODE:
nginx.ingress.kubernetes.io/service-upstream: "true"

----------------------------------------

TITLE: Problematic VirtualService Configuration Example
DESCRIPTION: Example of an incorrectly configured VirtualService that triggers the unreachable rule warning. The configuration shows improper separation of fault injection and mirroring rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: sample-foo-cluster01
  namespace: foo
spec:
  hosts:
  - sample.foo.svc.cluster.local
  http:
  - fault:
      delay:
        fixedDelay: 5s
        percentage:
          value: 100
    route:
    - destination:
        host: sample.foo.svc.cluster.local
  - mirror:
      host: sample.bar.svc.cluster.local
    route:
    - destination:
        host: sample.bar.svc.cluster.local
        subset: v1

----------------------------------------

TITLE: Creating and Labeling Namespace for Istio Health Check Example
DESCRIPTION: Creates a new Kubernetes namespace for the health check example and labels it for Istio injection.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-io-health-rewrite
$ kubectl label namespace istio-io-health-rewrite istio-injection=enabled

----------------------------------------

TITLE: Defining YAML Front Matter for Istio 0.2 Documentation
DESCRIPTION: YAML front matter configuration for the Istio 0.2 announcement page, including title, description, publish date, and URL aliases.

LANGUAGE: yaml
CODE:
---
title: Announcing Istio 0.2
linktitle: 0.2
description: Istio 0.2 announcement.
publishdate: 2017-10-10
subtitle: Improved mesh and support for multiple environments
aliases:
    - /blog/istio-0.2-announcement.html
    - /about/notes/older/0.2
    - /blog/2017/0.2-announcement
    - /docs/welcome/notes/0.2.html
    - /about/notes/0.2/index.html
    - /news/2017/announcing-0.2
    - /news/announcing-0.2
---

----------------------------------------

TITLE: Defining YAML Frontmatter for Istio 1.4.x Release Page
DESCRIPTION: YAML frontmatter configuration for an Istio documentation page that defines metadata for the 1.4.x release announcements page. Specifies the title, description, weight, listing behavior and layout template.

LANGUAGE: yaml
CODE:
---
title: 1.4.x Releases
description: Announcements for the 1.4 release and its associated patch releases.
weight: 25
list_by_publishdate: true
layout: release-grid
---

----------------------------------------

TITLE: Problematic Deployment Configuration with UID 1337
DESCRIPTION: Example of an incorrect Kubernetes Deployment configuration where the application container uses the reserved UID 1337, which conflicts with istio-proxy.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-con-sec-uid
  labels:
    app: helloworld
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld
      version: v1
  template:
    metadata:
      labels:
        app: helloworld
        version: v1
    spec:
      securityContext:
        runAsUser: 1337
      containers:
      - name: helloworld
        image: docker.io/istio/examples-helloworld-v1
        securityContext:
          runAsUser: 1337
        resources:
          requests:
            cpu: "100m"
        imagePullPolicy: IfNotPresent #Always
        ports:
        - containerPort: 5000

----------------------------------------

TITLE: Deploying httpbin Workload and Exposing through Istio Ingress Gateway
DESCRIPTION: Creates a namespace, deploys the httpbin workload with Istio sidecar injection, and exposes it through the Istio ingress gateway.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@) -n foo
$ kubectl apply -f @samples/httpbin/httpbin-gateway.yaml@ -n foo

----------------------------------------

TITLE: Inspecting Service Configuration
DESCRIPTION: Commands to examine the configuration of a service pod within the mesh.

LANGUAGE: bash
CODE:
$ export RATINGS_POD=$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')
$ istioctl experimental describe pod $RATINGS_POD

----------------------------------------

TITLE: Displaying Istio Website Content Changes Log using Custom Shortcode
DESCRIPTION: This Markdown snippet includes a custom shortcode to generate and display the log of recent changes to the Istio website content.

LANGUAGE: markdown
CODE:
This page shows you the most recent changes to this website's content.

{{< change_log >}}

----------------------------------------

TITLE: Customizing Prometheus Metrics with Telemetry API in YAML
DESCRIPTION: Example of using the Telemetry API to add a destination_port tag to Prometheus metrics. This replaces the IstioOperator method.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: namespace-metrics
spec:
  metrics:
  - providers:
    - name: prometheus
    overrides:
    - match:
        metric: REQUEST_COUNT
      mode: SERVER
      tagOverrides:
        destination_port:
          value: "string(destination.port)"

----------------------------------------

TITLE: Deploying httpbin Workload and Exposing through Istio Ingress Gateway
DESCRIPTION: Creates a namespace, deploys the httpbin workload with Istio sidecar injection, and exposes it through the Istio ingress gateway.

LANGUAGE: bash
CODE:
$ kubectl create ns foo
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@) -n foo
$ kubectl apply -f @samples/httpbin/httpbin-gateway.yaml@ -n foo

----------------------------------------

TITLE: EnvoyFilter Configuration - Updated Syntax (1.7)
DESCRIPTION: Updated EnvoyFilter configuration using the new 'typed_config' syntax required for Istio 1.7.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-1.7
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: ANY
        listener:
          filterChain:
            filter:
              name: envoy.http_connection_manager
        proxy:
          proxyVersion: ^1\.7.*
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(handle)
                request_handle:headers():add("foo", "bar")
              end

----------------------------------------

TITLE: Configuring robots.txt for Istio Documentation
DESCRIPTION: This snippet defines the rules for web crawlers accessing the Istio documentation website. It allows all user agents and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.7/sitemap.xml

----------------------------------------

TITLE: Configuring Istio Gateway with cert-manager Certificate in YAML
DESCRIPTION: This snippet defines an Istio Gateway resource that uses the certificate created by cert-manager. It specifies the TLS mode, credential name, and hosts for HTTPS traffic.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: ingress-cert # This should match the Certificate secretName
    hosts:
    - my.example.com # This should match a DNS name in the Certificate

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio 1.12.x Release Documentation
DESCRIPTION: YAML frontmatter block that configures the layout and metadata for an Istio release documentation page. Specifies the title, description, weight for sorting, layout template, and visual decoration style.

LANGUAGE: yaml
CODE:
---
title: 1.12.x Releases
description: Announcements for the 1.12 release and its associated patch releases.
weight: 17
list_by_publishdate: true
layout: release-grid
decoration: dot
---

----------------------------------------

TITLE: Configuring Mutual TLS
DESCRIPTION: Commands to configure and verify strict mutual TLS authentication for services.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: ratings-strict
spec:
  selector:
    matchLabels:
      app: ratings
  mtls:
    mode: STRICT
EOF

----------------------------------------

TITLE: Checking Injection by Labels
DESCRIPTION: Command to verify sidecar injection configuration for resources matching specific labels.

LANGUAGE: bash
CODE:
istioctl experimental check-inject -n <namespace> -l <label-key>=<label-value>

----------------------------------------

TITLE: Configuring Istio Documentation Metadata in YAML
DESCRIPTION: YAML frontmatter configuration for an Istio documentation page about logging functionality. Defines the page title, description, weight for ordering, and aliases for URL routing.

LANGUAGE: yaml
CODE:
title: Logs
description: Demonstrates the collection of logs within Istio.
weight: 20
aliases:
 - /docs/tasks/telemetry/logs/
test: n/a

----------------------------------------

TITLE: Configuring Gateway with TLS Termination
DESCRIPTION: Istio Gateway and VirtualService configuration for TLS termination.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
      - "*"
    tls:
      mode: SIMPLE
      credentialName: sds-credential
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "*.example.com"
  gateways:
  - istio-system/gateway
  tls:
  - match:
    - sniHosts:
      - "*.example.com"
    route:
    - destination:
        host: httpbin.org

----------------------------------------

TITLE: Corrected Deployment Configuration with UID 1338
DESCRIPTION: Example of a correct Kubernetes Deployment configuration using UID 1338 instead of the reserved 1337, avoiding conflicts with istio-proxy.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-con-sec-uid
  labels:
    app: helloworld
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld
      version: v1
  template:
    metadata:
      labels:
        app: helloworld
        version: v1
    spec:
      securityContext:
        runAsUser: 1338
      containers:
      - name: helloworld
        image: docker.io/istio/examples-helloworld-v1
        securityContext:
          runAsUser: 1338
        resources:
          requests:
            cpu: "100m"
        imagePullPolicy: IfNotPresent #Always
        ports:
        - containerPort: 5000

----------------------------------------

TITLE: Configuring Web Crawler Access Rules
DESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all web crawlers and specifies the sitemap location at /v1.5/sitemap.xml

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.5/sitemap.xml

----------------------------------------

TITLE: Creating Kubernetes Namespace
DESCRIPTION: Creates a new Kubernetes namespace using the defined environment variable.

LANGUAGE: bash
CODE:
$ kubectl create namespace $NAMESPACE

----------------------------------------

TITLE: Creating Ingress Gateway for External Access
DESCRIPTION: YAML configuration for an Istio Gateway resource to handle ingress traffic, including HTTP to HTTPS redirection and TLS termination using a specified credential.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: my-ingressgateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - "<my-proxied-service-hostname>"
    port:
      name: http
      number: 80
      protocol: HTTP
    tls:
     httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: https
    hosts:
    - "<my-proxied-service-hostname>"
    tls:
      mode: SIMPLE
      credentialName: <my-secret-name>

----------------------------------------

TITLE: Configuring Prometheus job for Envoy stats scraping
DESCRIPTION: YAML configuration for a Prometheus job to scrape Envoy stats from ports ending with -envoy-prom, including sidecar and gateway proxies.

LANGUAGE: yaml
CODE:
    - job_name: 'envoy-stats'
      metrics_path: /stats/prometheus
      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: '.*-envoy-prom'

----------------------------------------

TITLE: Configuring CA Certificate Bit Length in Helm Values
DESCRIPTION: This YAML snippet demonstrates how to set the self-signed CA certificate's bit length using a Helm values file for the istio-discovery chart. It configures the CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE environment variable for pilot.

LANGUAGE: yaml
CODE:
pilot:
  env:
    CITADEL_SELF_SIGNED_CA_RSA_KEY_SIZE: 4096

----------------------------------------

TITLE: Configuring Basic Auth WasmPlugin in Istio
DESCRIPTION: Creates a WasmPlugin resource to add HTTP Basic authentication to the ingress gateway using a remote Wasm module. The configuration specifies the OCI image location and authentication rules for the /productpage endpoint.

LANGUAGE: bash
CODE:
kubectl apply -f - <<EOF
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: basic-auth
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  url: oci://ghcr.io/istio-ecosystem/wasm-extensions/basic_auth:1.12.0
  phase: AUTHN
  pluginConfig:
    basic_auth_rules:
      - prefix: "/productpage"
        request_methods:
          - "GET"
          - "POST"
        credentials:
          - "ok:test"
          - "YWRtaW4zOmFkbWluMw=="
EOF

----------------------------------------

TITLE: Enforcing mTLS in Istio Authorization Layer
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that denies requests if the principal is empty, effectively requiring mTLS for all traffic.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: require-mtls
  namespace: foo
spec:
  action: DENY
  rules:
  - from:
    - source:
        notPrincipals: ["*"]

----------------------------------------

TITLE: Installing Istio with Specific Revision and Validation Policy
DESCRIPTION: Command to install Istio base with both stable validation policy and a specific revision setting.

LANGUAGE: bash
CODE:
$ helm install istio-base -n istio-system --set experimental.stableValidationPolicy=true -set revision=x

----------------------------------------

TITLE: Configuring Robot Access for Istio Website
DESCRIPTION: This robots.txt file sets crawling rules for all user agents, disallows access to the /v-0.1 directory, and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Configuring JWT Validation per Host in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that requires different JWT issuers for different hosts. It allows access to specified hosts if the JWT principal matches, while denying access to other hosts.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: jwt-per-host
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: ALLOW
  rules:
  - from:
    - source:
        # the JWT token must have issuer with suffix "@example.com"
        requestPrincipals: ["*@example.com"]
    to:
    - operation:
        hosts: ["example.com", "*.example.com"]
  - from:
    - source:
        # the JWT token must have issuer with suffix "@another.org"
        requestPrincipals: ["*@another.org"]
    to:
    - operation:
        hosts: [".another.org", "*.another.org"]

----------------------------------------

TITLE: Installing Istio using istioctl in Bash
DESCRIPTION: This command installs Istio on a Kubernetes cluster using the istioctl command-line tool. It's a simple one-line command to set up the Istio service mesh.

LANGUAGE: bash
CODE:
$ istioctl install

----------------------------------------

TITLE: Basic Istioctl Describe Usage
DESCRIPTION: Shows the basic syntax for using the istioctl describe command to inspect pod configuration.

LANGUAGE: bash
CODE:
$ istioctl experimental describe pod <pod-name>[.<namespace>]

----------------------------------------

TITLE: Checking Injection for Deployment
DESCRIPTION: Command to verify sidecar injection configuration for an entire deployment.

LANGUAGE: bash
CODE:
istioctl experimental check-inject -n <namespace> deploy/<deployment-name>

----------------------------------------

TITLE: Setting POD_SECURITY_GROUP_ENFORCING_MODE in EKS
DESCRIPTION: This bash command sets the POD_SECURITY_GROUP_ENFORCING_MODE to standard in an EKS cluster.

LANGUAGE: bash
CODE:
$ kubectl set env daemonset aws-node -n kube-system POD_SECURITY_GROUP_ENFORCING_MODE=standard

----------------------------------------

TITLE: Displaying ExternalNameServiceTypeInvalidPortName Warning Message in Istio
DESCRIPTION: This snippet shows the warning message that Istio generates when an ExternalName service has an invalid port name. The message indicates that the proxy may prevent correctly forwarding TCP traffic for certain port configurations.

LANGUAGE: plaintext
CODE:
Warning [IST0150] (Service nginx.default) Port name for ExternalName service is invalid. Proxy may prevent tcp named ports and unmatched traffic for ports serving TCP protocol from being forwarded correctly.

----------------------------------------

TITLE: Checking Bookinfo Gateway Status in Kubernetes
DESCRIPTION: Verify the status of the deployed Bookinfo gateway using kubectl.

LANGUAGE: bash
CODE:
$ kubectl get gateway

----------------------------------------

TITLE: Verifying Kubernetes Namespace Configuration
DESCRIPTION: Uses kubectl to verify the current namespace configuration by printing the namespace name from the current context.

LANGUAGE: bash
CODE:
$ kubectl config view -o jsonpath="{.contexts[?(@.name==\"$(kubectl config current-context)\")].context.namespace}"
tutorial

----------------------------------------

TITLE: Configuring DestinationRule for TLS Origination
DESCRIPTION: YAML configuration for an Istio DestinationRule that enables TLS origination for egress traffic to the upstream httpbin.org service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "httpbin-egress"
  namespace: "httpbin"
spec:
  host: "httpbin.org"
  subsets:
  - name: "http-egress-subset"
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      portLevelSettings:
      - port:
          number: 443
        tls:
          mode: SIMPLE

----------------------------------------

TITLE: Enable Analysis in Istio Installation
DESCRIPTION: Command to install Istio with enhanced configuration analysis enabled.

LANGUAGE: bash
CODE:
$ istioctl install --set values.global.istiod.enableAnalysis=true

----------------------------------------

TITLE: Creating Instances for Attribute Mapping in Istio
DESCRIPTION: Instances control how Mixer maps attributes from the proxy into data bundles for different adapters. They use attribute expressions to produce results assigned to instance fields, ensuring type compatibility.

LANGUAGE: yaml
CODE:
# Example instance configuration
instances:
  - name: requestcount
    template: metric
    params:
      value: "1"
      dimensions:
        source: source.service
        destination: destination.service

----------------------------------------

TITLE: Disabling In-Cluster Operator
DESCRIPTION: Scales down the istio-operator deployment to disable it without affecting the control plane or mesh traffic.

LANGUAGE: bash
CODE:
$ kubectl scale deployment -n istio-system istio-operator –replicas 0

----------------------------------------

TITLE: Defining Vulnerable DENY Authorization Policy in Istio YAML
DESCRIPTION: This YAML snippet demonstrates a vulnerable Istio authorization policy using the DENY action with paths field. This pattern is susceptible to unexpected policy bypasses due to the described vulnerability.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-path-admin
spec:
  action: DENY
  rules:
  - to:
    - operation:
        paths: ["/admin"]

----------------------------------------

TITLE: Enabling PROXY Protocol with ProxyConfig Annotation in YAML
DESCRIPTION: Example of using a ProxyConfig annotation to enable PROXY protocol. This replaces the EnvoyFilter method.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    "proxy.istio.io/config": '{"gatewayTopology" : { "proxyProtocol": {} }}'

----------------------------------------

TITLE: Port-Forwarding ControlZ Endpoint Using Istioctl in Bash
DESCRIPTION: This command uses istioctl to port-forward the ControlZ endpoint of the istiod deployment to localhost:9876 for remote access through a web browser.

LANGUAGE: bash
CODE:
$ istioctl dashboard controlz deployment/istiod.istio-system

----------------------------------------

TITLE: Testing GET Request
DESCRIPTION: Command to test the GET endpoint of the ratings service using curl.

LANGUAGE: bash
CODE:
$ curl localhost:9080/ratings/7
{"id":7,"ratings":{"Reviewer1":5,"Reviewer2":4}}

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Sets required environment variables for cluster contexts and names

LANGUAGE: bash
CODE:
export CTX_EXTERNAL_CLUSTER=<your external cluster context>
export CTX_REMOTE_CLUSTER=<your remote cluster context>
export REMOTE_CLUSTER_NAME=<your remote cluster name>

----------------------------------------

TITLE: Testing POST Request
DESCRIPTION: Commands to test the POST endpoint and verify updated ratings using curl.

LANGUAGE: bash
CODE:
$ curl -X POST localhost:9080/ratings/7 -d '{"Reviewer1":1,"Reviewer2":1}'
{"id":7,"ratings":{"Reviewer1":1,"Reviewer2":1}}

$ curl localhost:9080/ratings/7
{"id":7,"ratings":{"Reviewer1":1,"Reviewer2":1}}

----------------------------------------

TITLE: Installing Istio with Trust Domain Aliases
DESCRIPTION: Installs Istio with a new trust domain and trust domain aliases to enable seamless migration.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    trustDomain: new-td
    trustDomainAliases:
      - old-td

----------------------------------------

TITLE: Defining ExternalName Service with Invalid Port Name in Kubernetes
DESCRIPTION: This YAML snippet defines a Kubernetes service of type ExternalName with an invalid port name 'tcp'. For ExternalName services, Istio requires specific port naming conventions to ensure proper routing, especially since there's no service IP defined and SNI is needed for routing.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  externalName: nginx.example.com
  ports:
  - name: tcp
    port: 443
    protocol: TCP
    targetPort: 443
  type: ExternalName

----------------------------------------

TITLE: Running Linters and Tests for Istio Website Content
DESCRIPTION: This command runs automated checks including HTML proofing, spell checking, and Markdown style checks on the Istio website content. It should be run before submitting changes in a pull request.

LANGUAGE: bash
CODE:
$ make lint

----------------------------------------

TITLE: Setting Kubernetes Context Environment Variables
DESCRIPTION: Demonstrates how to store Kubernetes context names in environment variables using kubectl config view with jsonpath expressions. This allows for easier reference to specific clusters in subsequent commands.

LANGUAGE: bash
CODE:
$ export CTX_CLUSTER1=$(kubectl config view -o jsonpath='{.contexts[0].name}')
$ export CTX_CLUSTER2=$(kubectl config view -o jsonpath='{.contexts[1].name}')
$ echo "CTX_CLUSTER1 = ${CTX_CLUSTER1}, CTX_CLUSTER2 = ${CTX_CLUSTER2}"
CTX_CLUSTER1 = cluster1, CTX_CLUSTER2 = cluster2

----------------------------------------

TITLE: Creating Kubernetes Service with Endpoints
DESCRIPTION: YAML configurations to create a Kubernetes service and endpoints for accessing Wikipedia.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: my-wikipedia
spec:
  ports:
  - protocol: TCP
    port: 443
    name: tls

LANGUAGE: yaml
CODE:
kind: Endpoints
apiVersion: v1
metadata:
  name: my-wikipedia
subsets:
  - addresses:
      - ip: 198.35.26.96
      - ip: 208.80.153.224
    ports:
      - port: 443
        name: tls

----------------------------------------

TITLE: Generating Intermediate CA Certificate
DESCRIPTION: Creates intermediate certificates and keys for a specific cluster's Istio CA.

LANGUAGE: bash
CODE:
$ make -f ../tools/certs/Makefile.selfsigned.mk cluster1-cacerts

----------------------------------------

TITLE: Customizing Prometheus Metrics with IstioOperator in YAML
DESCRIPTION: Example of using IstioOperator to add a destination_port tag to Prometheus metrics. This method is being replaced by the Telemetry API.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    telemetry:
      v2:
        prometheus:
          configOverride:
            inboundSidecar:
              metrics:
                - name: requests_total
                  dimensions:
                    destination_port: string(destination.port)

----------------------------------------

TITLE: Defining Rules for Data Delivery to Adapters in Istio
DESCRIPTION: Rules specify which instances to send to which handlers and when. They contain matching predicates (attribute expressions) that determine when a rule takes effect, controlling adapter invocation.

LANGUAGE: yaml
CODE:
# Example rule configuration
rules:
  - name: promhttp
    match: destination.service == "myservice.ns.svc.cluster.local"
    actions:
    - handler: prometheushandler
      instances: [requestcount]

----------------------------------------

TITLE: Verifying Kubernetes Version for Webhook Support
DESCRIPTION: Command to check the version of kubectl client and Kubernetes server to ensure compatibility with Istio webhooks.

LANGUAGE: bash
CODE:
$ kubectl version --short
Client Version: v1.29.0
Server Version: v1.29.1

----------------------------------------

TITLE: Checking Gateway Status
DESCRIPTION: Command to retrieve the current gateway configuration in the Kubernetes cluster.

LANGUAGE: bash
CODE:
kubectl get gateway

----------------------------------------

TITLE: Configuring Restrictive Authorization Policy
DESCRIPTION: Example AuthorizationPolicy that demonstrates how to configure path-based and namespace-based access control. Shows common YAML formatting issues that can lead to unintended policy behavior.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: example
  namespace: foo
spec:
  action: ALLOW
  rules:
  - to:
    - operation:
        paths:
        - /foo
  - from:
    - source:
        namespaces:
        - foo

----------------------------------------

TITLE: Example Commands for Httpbin Deployment
DESCRIPTION: Practical examples showing equivalent commands for checking injection on an httpbin deployment.

LANGUAGE: bash
CODE:
istioctl experimental check-inject -n hello httpbin-1234
istioctl experimental check-inject -n hello deploy/httpbin
istioctl experimental check-inject -n hello -l app=httpbin

----------------------------------------

TITLE: Summing All Requests in Namespace with Prometheus
DESCRIPTION: This query calculates the sum of all requests in the specified namespace using the istio_requests_total metric. It filters for the destination service namespace and reporter.

LANGUAGE: plain
CODE:
sum(istio_requests_total{destination_service_namespace="tutorial", reporter="destination"})

----------------------------------------

TITLE: Warning Block Template in Markdown
DESCRIPTION: A template that uses Hugo shortcodes to create a warning message block for experimental features in documentation.

LANGUAGE: markdown
CODE:
{{< warning >}}
The following information describes an experimental feature, which is intended
for evaluation purposes only.
{{< /warning >}}

----------------------------------------

TITLE: Labeling Namespace for Istio Injection in Bash
DESCRIPTION: This command labels a namespace to enable Istio sidecar injection. It resolves the NamespaceNotInjected issue by explicitly declaring the desired injection behavior for the namespace.

LANGUAGE: bash
CODE:
$ kubectl label namespace <namespace-name> istio-injection=enabled

----------------------------------------

TITLE: Displaying IneffectivePolicy Warning for Workload in Ambient Mode
DESCRIPTION: This snippet demonstrates the warning message shown when a Sidecar policy has no impact because the selected workload is in ambient mode.

LANGUAGE: plaintext
CODE:
Warning [IST0167] (Sidecar ns-ambient/pod-scoped testdata/sidecar-default-selector.yaml:90) The policy has no impact:\nselected workload is in ambient mode, the policy has no impact.

----------------------------------------

TITLE: Demonstrating Incorrect REMOVE Operation in EnvoyFilter YAML Configuration
DESCRIPTION: This YAML snippet shows an example of an EnvoyFilter configuration that uses the REMOVE operation incorrectly. The patch operation is set to REMOVE and applyTo is set to ROUTE_CONFIGURATION, which will cause this EnvoyFilter to be ignored.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-remove-2
  namespace: bookinfo
spec:
  workloadSelector:
    labels:
      app: mysvc2
  configPatches:
  - applyTo: ROUTE_CONFIGURATION
    match:
      context: GATEWAY
      listener:
        filterChain:
          sni: app.example.com
          filter:
            name: "envoy.filters.network.http_connection_manager.InternalAddressConfig"
    patch:
      operation: REMOVE

----------------------------------------

TITLE: Creating Kubernetes ExternalName Service
DESCRIPTION: YAML configuration to create an ExternalName service for httpbin.org with HTTP port configuration.

LANGUAGE: yaml
CODE:
kind: Service
apiVersion: v1
metadata:
  name: my-httpbin
spec:
  type: ExternalName
  externalName: httpbin.org
  ports:
  - name: http
    protocol: TCP
    port: 80

----------------------------------------

TITLE: Configuring JWT Requirement Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that denies requests to the '/admin' path without a request principal.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: enable-jwt-for-admin
  namespace: default
spec:
  selector:
    matchLabels:
      app: products
  action: DENY
  rules:
  - to:
    - operation:
        paths: ["/admin"]
    from:
    - source:
        notRequestPrincipals: ["*"]

----------------------------------------

TITLE: Enforcing Fine-Grained Isolation with Network Policy in YAML
DESCRIPTION: This YAML snippet defines a NetworkPolicy to enforce fine-grained isolation within the Bookinfo application. It allows incoming traffic only to the Product Page pods from the Istio ingress, preventing direct access to other backend services.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: product-page-ingress
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: productpage
  ingress:
  - ports:
    - protocol: TCP
      port: 9080
    from:
    - podSelector:
        matchLabels:
          istio: ingress

----------------------------------------

TITLE: Removing Kubernetes Gateway API CRDs using kubectl in Bash
DESCRIPTION: This command uses kubectl to delete the Kubernetes Gateway API CRDs from the cluster. It fetches the standard installation YAML file from the kubernetes-sigs/gateway-api GitHub repository using a specific version.

LANGUAGE: bash
CODE:
$ kubectl delete -f https://github.com/kubernetes-sigs/gateway-api/releases/download/{{< k8s_gateway_api_version >}}/standard-install.yaml

----------------------------------------

TITLE: Accessing Istio Dashboard
DESCRIPTION: URL to access the Istio dashboard for monitoring service mesh metrics

LANGUAGE: plain
CODE:
http://my-istio-dashboard.io/dashboard/db/istio-mesh-dashboard

----------------------------------------

TITLE: Configuring Double TLS
DESCRIPTION: Istio ServiceEntry and DestinationRule configuration that incorrectly results in double TLS.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: httpbin
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: originate-tls
spec:
  host: httpbin.org
  trafficPolicy:
    tls:
      mode: SIMPLE

----------------------------------------

TITLE: Deploying Httpbin with Manual Sidecar Injection in Istio
DESCRIPTION: This command manually injects the Istio sidecar and deploys the httpbin application using kubectl when automatic sidecar injection is not enabled.

LANGUAGE: bash
CODE:
$ kubectl apply -f <(istioctl kube-inject -f @samples/httpbin/httpbin.yaml@)

----------------------------------------

TITLE: Checking Istiod Pod Status
DESCRIPTION: Commands to verify the status of Istiod pods and their logs for troubleshooting validation issues.

LANGUAGE: bash
CODE:
$  kubectl -n istio-system get pod -lapp=istiod
NAME                            READY     STATUS    RESTARTS   AGE
istiod-5dbbbdb746-d676g   1/1       Running   0          2d

----------------------------------------

TITLE: Listing Kubernetes Contexts with kubectl
DESCRIPTION: Shows how to list available Kubernetes contexts using kubectl config get-contexts command. This displays the current context, cluster names, authentication info, and default namespaces.

LANGUAGE: bash
CODE:
$ kubectl config get-contexts
CURRENT   NAME       CLUSTER    AUTHINFO       NAMESPACE
*         cluster1   cluster1   user@foo.com   default
          cluster2   cluster2   user@foo.com   default

----------------------------------------

TITLE: Creating Tabbed Interface for Istio Ecosystem in Hugo
DESCRIPTION: This snippet uses Hugo shortcodes to create a tabbed interface for displaying different categories of the Istio ecosystem. It includes tabs for providers, professional services, and integrations, each with its own description and content.

LANGUAGE: html
CODE:
{{< tabset category-name="ecosystem-type" class="tabset--ecosystem" forget-tab=true >}}

{{< tab
    name="providers"
    category-value="providers"
    description="Many companies build platforms and services that install, manage, and implement Istio for you. In fact, Istio implementations are built in to many providers' Kubernetes services."
>}}

{{< companies items="providers">}}

{{< /tab >}}

{{< tab
    name="pro services"
    category-value="services"
    description="There are many people who can help you set up your Istio configuration. Here are some experts who can implement Istio for you, matching its capabilities to your requirements."
>}}

{{< interactive_panels items="pro_services" >}}

{{< /tab >}}

{{< tab
    name="integrations"
    category-value="integrations"
    description="Istio is a vibrant part of the cloud native stack. These are some of the projects and software that integrate with Istio to enable added functionality."
>}}

{{< interactive_panels items="integrations" >}}

{{< /tab >}}

{{< /tabset >}}

{{< interactive_panel_modal >}}

----------------------------------------

TITLE: Deploying Istio with Custom Cert-Signer Configuration
DESCRIPTION: Configures Istio installation with custom cert-signer information and CA certificates for different issuers.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    pilot:
      env:
        EXTERNAL_CA: ISTIOD_RA_KUBERNETES_API
  meshConfig:
    defaultConfig:
      proxyMetadata:
        ISTIO_META_CERT_SIGNER: istio-system
    caCertificates:
    - pem: |
$ISTIOCA
      certSigners:
      - clusterissuers.cert-manager.io/istio-system
    - pem: |
$FOOCA
      certSigners:
      - clusterissuers.cert-manager.io/foo
    - pem: |
$BARCA
      certSigners:
      - clusterissuers.cert-manager.io/bar
  # Additional configuration for pilot component and ClusterRole

----------------------------------------

TITLE: Displaying InvalidAnnotation Warning Message in Istio
DESCRIPTION: Example of the warning message displayed when an unknown Istio annotation is encountered.

LANGUAGE: plain
CODE:
Warning [IST0108] (Service httpbin.default) Unknown annotation: networking.istio.io/exportTwo

----------------------------------------

TITLE: Configuring Destination Rule with Missing caCertificates in Istio
DESCRIPTION: This YAML configuration demonstrates a destination rule that triggers the NoServerCertificateVerificationDestinationLevel error. It sets up TLS in SIMPLE mode but omits the required caCertificates field.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: db-tls
spec:
  host: mydbserver.prod.svc.cluster.local
  trafficPolicy:
    tls:
      mode: SIMPLE
      clientCertificate: /etc/certs/myclientcert.pem
      privateKey: /etc/certs/client_private_key.pem
      # caCertificates not set

----------------------------------------

TITLE: Retrieving Proxy Configuration with Istioctl in Bash
DESCRIPTION: Demonstrates various istioctl commands to retrieve Envoy proxy configuration information for specific pods.

LANGUAGE: bash
CODE:
$ istioctl proxy-config cluster <pod-name> [flags]

LANGUAGE: bash
CODE:
$ istioctl proxy-config bootstrap <pod-name> [flags]

LANGUAGE: bash
CODE:
$ istioctl proxy-config listener <pod-name> [flags]

LANGUAGE: bash
CODE:
$ istioctl proxy-config route <pod-name> [flags]

LANGUAGE: bash
CODE:
$ istioctl proxy-config endpoints <pod-name> [flags]

----------------------------------------

TITLE: Configuring AuthorizationPolicy with mTLS-only fields in YAML
DESCRIPTION: Example YAML configuration for an AuthorizationPolicy that uses mTLS-only fields to allow requests not from the namespace 'foo'. This configuration may unexpectedly allow plain text requests from the 'foo' namespace due to the mTLS-only field behavior.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: allow-ns-not-foo
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        notNamespaces: ["foo"]

----------------------------------------

TITLE: Configuring JWT Exclusion Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that requires a valid JWT principal for all paths except '/healthz'.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: disable-jwt-for-healthz
  namespace: default
spec:
  selector:
    matchLabels:
      app: products
  action: ALLOW
  rules:
  - to:
    - operation:
        notPaths: ["/healthz"]
    from:
    - source:
        requestPrincipals: ["*"]

----------------------------------------

TITLE: Checking Workload Waypoint Configuration
DESCRIPTION: Command to inspect waypoint assignments for individual workload pods.

LANGUAGE: bash
CODE:
istioctl ztunnel-config workload

----------------------------------------

TITLE: Configuring TLS ServiceEntry for MongoDB
DESCRIPTION: Creates a ServiceEntry for TLS traffic to the MongoDB service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: mongo
spec:
  hosts:
  - $MONGODB_HOST
  ports:
  - number: $MONGODB_PORT
    name: tls
    protocol: TLS
  resolution: DNS

----------------------------------------

TITLE: Demonstrating Kubernetes Layer 4 Load Balancing
DESCRIPTION: Shows how Kubernetes default load balancing at Layer 4 results in connection-based routing, leading to uneven distribution of requests across pods.

LANGUAGE: bash
CODE:
$ curl http://echo/{0..5} -s | grep Hostname
Hostname=echo-cb96f8d94-2ssll
Hostname=echo-cb96f8d94-2ssll
Hostname=echo-cb96f8d94-2ssll
Hostname=echo-cb96f8d94-2ssll
Hostname=echo-cb96f8d94-2ssll
Hostname=echo-cb96f8d94-2ssll
$ curl http://echo/{0..5} -s | grep Hostname
Hostname=echo-cb96f8d94-879sn
Hostname=echo-cb96f8d94-879sn
Hostname=echo-cb96f8d94-879sn
Hostname=echo-cb96f8d94-879sn
Hostname=echo-cb96f8d94-879sn
Hostname=echo-cb96f8d94-879sn

----------------------------------------

TITLE: EnvoyFilter Configuration for Wasm
DESCRIPTION: Generated EnvoyFilter resource configuration that configures the Istio proxy to load and use the WebAssembly module.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: details-v1-myfilter
  namespace: bookinfo
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
            subFilter:
              name: envoy.router
    patch:
      operation: INSERT_BEFORE
      value:
        config:
          config:
            configuration: tomorrow
            name: myfilter
            rootId: add_header
            vmConfig:
              code:
                local:
                  filename: /var/local/lib/wasme-cache/44bf95b368e78fafb663020b43cf099b23fc6032814653f2f47e4d20643e7267
              runtime: envoy.wasm.runtime.v8
              vmId: myfilter
        name: envoy.filters.http.wasm
  workloadSelector:
    labels:
      app: details
      version: v1

----------------------------------------

TITLE: Configuring WasmPlugin for Gateway Authentication
DESCRIPTION: YAML configuration for deploying a basic authentication WebAssembly plugin at the gateway level. The plugin implements HTTP Basic Auth for the /productpage endpoint.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: basic-auth-at-gateway
spec:
  targetRefs:
    - kind: Gateway
      group: gateway.networking.k8s.io
      name: bookinfo-gateway
  url: oci://ghcr.io/istio-ecosystem/wasm-extensions/basic_auth:1.12.0
  phase: AUTHN
  pluginConfig:
    basic_auth_rules:
      - prefix: "/productpage"
        request_methods:
          - "GET"
          - "POST"
        credentials:
          - "ok:test"
          - "YWRtaW4zOmFkbWluMw=="

----------------------------------------

TITLE: Customizing Histogram Bucket Sizes with EnvoyFilter in YAML
DESCRIPTION: Example of using EnvoyFilter to configure histogram bucket sizes for metrics. This method is being replaced by the sidecar.istio.io/statsHistogramBuckets annotation.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: envoy-stats-1
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: BOOTSTRAP
    patch:
      operation: MERGE
      value:
        stats_config:
          histogram_bucket_settings:
            - match:
                prefix: istiocustom
              buckets: [1,5,50,500,5000,10000]

----------------------------------------

TITLE: Backing up Istio Configuration to YAML
DESCRIPTION: Exports all Istio-related resources across all namespaces to a YAML backup file in the user's home directory. Uses kubectl to fetch resources with the istio-io label.

LANGUAGE: bash
CODE:
kubectl get istio-io --all-namespaces -oyaml > "$HOME"/istio_resource_backup.yaml

----------------------------------------

TITLE: Demonstrating Nested Text Blocks in Istio Documentation
DESCRIPTION: This snippet shows the structure of nested text blocks within bullet points in Istio documentation. It includes multiple examples of plain text formatting.

LANGUAGE: plain
CODE:
A text block nested in a bullet
with a second line

and a third line

LANGUAGE: plain
CODE:
Another nested text block
with a second line

and a third line

LANGUAGE: plain
CODE:
This is a text block in a warning in a bullet
with a second line

and a third line

----------------------------------------

TITLE: Installing Istio with OPA Configuration
DESCRIPTION: Installs Istio and configures mesh options to enable OPA as an extension provider for authorization.

LANGUAGE: bash
CODE:
$ istioctl install -y -f - <<'EOF'
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    accessLogFile: /dev/stdout
    accessLogFormat: |
      [OPA DEMO] my-new-dynamic-metadata: "%DYNAMIC_METADATA(envoy.filters.http.ext_authz)%"
    extensionProviders:
    - name: "opa.local"
      envoyExtAuthzGrpc:
        service: "opa.opa.svc.cluster.local"
        port: "9191"
EOF

----------------------------------------

TITLE: Removing Documentation Directory in Git
DESCRIPTION: Command to recursively remove a directory containing an index.md page from git version control

LANGUAGE: bash
CODE:
git rm -rf

----------------------------------------

TITLE: Configuring ALB Ingress Resource
DESCRIPTION: Creates an Ingress resource with SSL services annotation to enable re-encryption and mutual TLS between ALB and Istio ingress gateway.

LANGUAGE: yaml
CODE:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: alb-ingress
  namespace: istio-system
  annotations:
    ingress.bluemix.net/ssl-services: "ssl-service=istio-ingressgateway ssl-secret=alb-certs proxy-ssl-name=$INGRESS_GATEWAY_DOMAIN"
spec:
  tls:
  - hosts:
    - httpbin.$ALB_INGRESS_DOMAIN
    secretName: $ALB_SECRET
  rules:
  - host: httpbin.$ALB_INGRESS_DOMAIN
    http:
      paths:
      - path: /status
        backend:
          serviceName: istio-ingressgateway
          servicePort: 443

----------------------------------------

TITLE: Disabling Telemetry v2 in Istio using istioctl
DESCRIPTION: This command disables telemetry v2 in Istio as a workaround for the CVE-2020-10739 vulnerability. It uses istioctl to apply a manifest with the telemetry v2 feature disabled.

LANGUAGE: bash
CODE:
$ istioctl manifest apply --set values.telemetry.v2.enabled=false

----------------------------------------

TITLE: Configuring Authenticated Access Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that allows access only to authenticated users for GET and POST methods.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 action: ALLOW
 rules:
 - from:
   - source:
       principals: ["*"]
   to:
   - operation:
       methods: ["GET", "POST"]

----------------------------------------

TITLE: Enabling DLB Connection Load Balancing with EnvoyFilter
DESCRIPTION: This EnvoyFilter configuration enables DLB connection load balancing for the Istio ingress gateway by patching the listener configuration.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: dlb
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: LISTENER
    match:
      context: GATEWAY
    patch:
      operation: MERGE
      value:
        connection_balance_config:
            extend_balance:
              name: envoy.network.connection_balance.dlb
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb

----------------------------------------

TITLE: Executing Bash Commands with Line Continuation
DESCRIPTION: This snippet shows how to execute bash commands, including the use of line continuation with backslash and the echo command.

LANGUAGE: bash
CODE:
$ this is a text block
$ echo Foo \
Bar
Foo Bar

----------------------------------------

TITLE: Installing Istio CNI with GKE Platform Profile using Helm
DESCRIPTION: This bash command installs Istio CNI using Helm with the GKE platform profile.

LANGUAGE: bash
CODE:
$ helm install istio-cni istio/cni -n istio-system --set profile=ambient --set global.platform=gke --wait

----------------------------------------

TITLE: Creating Route53 Credentials Secret
DESCRIPTION: Defines a Kubernetes secret containing AWS Route53 credentials for DNS validation.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: prod-route53-credentials-secret
type: Opaque
data:
  secret-access-key: <REDACTED BASE64>

----------------------------------------

TITLE: Enabling PROXY Protocol with EnvoyFilter in YAML
DESCRIPTION: Example of using EnvoyFilter to enable PROXY protocol on ingress gateways. This method is being replaced by the gatewayTopology field in ProxyConfig.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: proxy-protocol
spec:
  configPatches:
  - applyTo: LISTENER_FILTER
    patch:
      operation: INSERT_FIRST
      value:
        name: proxy_protocol
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol"
  workloadSelector:
    labels:
      istio: ingress-gateway

----------------------------------------

TITLE: Displaying Sample Text Block in Istio Documentation
DESCRIPTION: This snippet demonstrates how to include a nested text block within Istio documentation using custom shortcodes.

LANGUAGE: plain
CODE:
A sample nested text block in a boilerplate.

----------------------------------------

TITLE: Tip Callout in Istio Documentation
DESCRIPTION: Shows the usage of tip callouts in Istio documentation. Includes examples with single paragraph, multiple paragraphs, and nested text blocks.

LANGUAGE: markdown
CODE:
{{< tip >}}
This is a tip
{{< /tip >}}

{{< tip >}}
This is a tip

with two paragraphs
{{< /tip >}}

{{< tip >}}
This is a tip

with two paragraphs

{{< text plain >}}
A nested text block
{{< /text >}}

{{< /tip >}}

----------------------------------------

TITLE: Configuring HTTP Route for Service Mesh in Kubernetes Gateway API
DESCRIPTION: This YAML snippet demonstrates how to use Gateway API to route requests to different versions of a service based on request headers. It includes targeting a service, matching criteria, request modification, and destination selection.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: reviews
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: reviews
    port: 9080
  rules:
  - matches:
    - headers:
      - name: my-favorite-service-mesh
        value: istio
    filters:
    - type: RequestHeaderModifier
      requestHeaderModifier:
      add:
        - name: hello
          value: world
    backendRefs:
    - name: reviews-v2
      port: 9080
  - backendRefs:
    - name: reviews-v1
      port: 9080

----------------------------------------

TITLE: Creating Logging Configuration for Egress Access
DESCRIPTION: YAML configuration to set up logging for egress access to CNN domains, including logentry, handlers and rules

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: egress-access
  namespace: istio-system
spec:
  severity: '"info"'
  timestamp: request.time
  variables:
    destination: request.host | "unknown"
    path: request.path | "unknown"
    responseCode: response.code | 0
    responseSize: response.size | 0
    reporterUID: context.reporter.uid | "unknown"
    sourcePrincipal: source.principal | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'

----------------------------------------

TITLE: Helm Repository Configuration Commands
DESCRIPTION: Commands to add and update the Istio Helm repository.

LANGUAGE: bash
CODE:
helm repo add istio https://istio-release.storage.googleapis.com/charts
helm repo update

----------------------------------------

TITLE: Installing Istio 1.10 Control Plane
DESCRIPTION: Command to install the new Istio 1.10.0 control plane with a specific revision

LANGUAGE: bash
CODE:
istioctl install --revision 1-10-0 -y

----------------------------------------

TITLE: Checking Kiali Pod Version in Istio System
DESCRIPTION: Command to retrieve and display the Kiali pod image version from the istio-system namespace.

LANGUAGE: bash
CODE:
kubectl get pods -n istio-system -l app=kiali -o yaml | grep image:

----------------------------------------

TITLE: Configuring Istio Sidecar for Custom Inbound Networking
DESCRIPTION: This YAML snippet demonstrates how to create a Sidecar configuration in Istio to customize the inbound networking for a pod. It allows exposing a localhost-bound application to other pods by redirecting traffic to the local endpoint.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: Sidecar
metadata:
  name: ratings
spec:
  workloadSelector:
    labels:
      app: netcat
  ingress:
  - port:
      number: 8080
      protocol: TCP
      name: tcp
    defaultEndpoint: 127.0.0.1:8080

----------------------------------------

TITLE: Configuring Helm Repository for Istio
DESCRIPTION: Commands to add and update the Istio Helm repository.

LANGUAGE: bash
CODE:
$ helm repo add istio https://istio-release.storage.googleapis.com/charts
$ helm repo update

----------------------------------------

TITLE: Creating Logging Configuration for Egress Access
DESCRIPTION: YAML configuration to set up logging for egress access to CNN domains, including logentry, handlers and rules

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: egress-access
  namespace: istio-system
spec:
  severity: '"info"'
  timestamp: request.time
  variables:
    destination: request.host | "unknown"
    path: request.path | "unknown"
    responseCode: response.code | 0
    responseSize: response.size | 0
    reporterUID: context.reporter.uid | "unknown"
    sourcePrincipal: source.principal | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'

----------------------------------------

TITLE: Configuring Namespace-Level Segmentation with RBAC and Conditions in Istio
DESCRIPTION: This YAML configuration defines a ServiceRole and ServiceRoleBinding to allow services in the 'frontend' namespace to access services marked as 'external' in the 'backend' namespace. It demonstrates how to achieve namespace-level segmentation using Istio's RBAC with conditions.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: external-api-caller
  namespace: backend
spec:
  rules:
  - services: ["*"]
    methods: ["*"]
    constraints:
    - key: "destination.labels[visibility]"
      values: ["external"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: external-api-caller
  namespace: backend
spec:
  subjects:
  - properties:
      source.namespace: "frontend"
  roleRef:
    kind: ServiceRole
    name: "external-api-caller"

----------------------------------------

TITLE: Cleanup Commands
DESCRIPTION: Commands to remove test applications, uninstall Istio, and clean up namespaces.

LANGUAGE: bash
CODE:
$ kubectl delete -f samples/httpbin/httpbin.yaml -n foo
$ kubectl delete -f samples/curl/curl.yaml -n foo
$ istioctl uninstall --purge -y
$ kubectl delete ns foo istio-system

----------------------------------------

TITLE: Defining Service/Method Level Access Control in Istio
DESCRIPTION: This YAML snippet defines a ServiceRole called 'book-reader' that allows READ access to '/books/*' resource in the 'bookstore' service. It demonstrates how to set up finer-grained access control at the service and method level in Istio.

LANGUAGE: yaml
CODE:
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: book-reader
  namespace: default
spec:
  rules:
  - services: ["bookstore.default.svc.cluster.local"]
    paths: ["/books/*"]
    methods: ["GET"]

----------------------------------------

TITLE: Inspecting Istio Proxy JWT Authentication Configuration
DESCRIPTION: Command to inspect the Envoy proxy listener configuration for JWT authentication settings using istioctl. Shows how to verify the JWT filter configuration is properly applied.

LANGUAGE: bash
CODE:
$ POD=$(kubectl get pod -l app=httpbin -n foo -o jsonpath={.items..metadata.name})
$ istioctl proxy-config listener ${POD} -n foo --port 80 --type HTTP -o json

----------------------------------------

TITLE: Configuring Web Crawler Access Control for Istio Documentation
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers full access to the site and specifies the location of the sitemap file at /v1.5/sitemap.xml.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.5/sitemap.xml

----------------------------------------

TITLE: Inserting Boilerplate with Markdown and Shortcode in Hugo
DESCRIPTION: This example shows how to include a boilerplate that contains both markdown content and a shortcode in Hugo-based documentation.

LANGUAGE: hugo
CODE:
{{< boilerplate "test-1" >}}

----------------------------------------

TITLE: Running Fortio Load Test with Maximum QPS
DESCRIPTION: This Fortio command runs a load test for 60 seconds with unlimited QPS and a specified number of connections. It's used to measure the maximum QPS for eBPF and iptables redirection methods.

LANGUAGE: bash
CODE:
$ fortio load -uniform -t 60s -qps 0 -c <num_connections> http://<fortio-svc-name>:8080

----------------------------------------

TITLE: Creating and Labeling Test Namespace
DESCRIPTION: Creates a test namespace and enables sidecar injection for it.

LANGUAGE: bash
CODE:
$ kubectl create ns test
$ kubectl label namespace test istio-injection=enabled

----------------------------------------

TITLE: Generating Waypoint Gateway Configuration with Istioctl
DESCRIPTION: Shows how to generate a Kubernetes Gateway resource for waypoint proxy deployment using the istioctl experimental command.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: namespace
spec:
  gatewayClassName: istio-waypoint
  listeners:
  - name: mesh
    port: 15008
    protocol: HBONE

----------------------------------------

TITLE: Mesh Config Extension Provider Definition
DESCRIPTION: Mesh configuration that defines the external authorization service provider including service name and port.

LANGUAGE: yaml
CODE:
extensionProviders:
- name: "my-ext-authz-service"
  envoyExtAuthzGrpc:
    service: "ext-authz.istio-system.svc.cluster.local"
    port: 9000

----------------------------------------

TITLE: Istio Documentation Frontmatter in YAML
DESCRIPTION: YAML frontmatter block defining metadata for an Istio documentation page about mesh configuration, including title, description, weight, keywords and test status.

LANGUAGE: yaml
CODE:
---
title: Mesh Configuration
description: Helps you manage the global mesh configuration.
weight: 10
keywords: [ops,mesh]
test: n/a
---

----------------------------------------

TITLE: Defining Thrift Protocol with Aeraki ApplicationProtocol CRD
DESCRIPTION: This YAML snippet defines the Thrift protocol using Aeraki's ApplicationProtocol Custom Resource Definition. It specifies the protocol name and the codec to be used for encoding and decoding Thrift messages.

LANGUAGE: yaml
CODE:
apiVersion: metaprotocol.aeraki.io/v1alpha1
kind: ApplicationProtocol
metadata:
  name: thrift
  namespace: istio-system
spec:
  protocol: thrift
  codec: aeraki.meta_protocol.codec.thrift

----------------------------------------

TITLE: Defining Robot Access Rules
DESCRIPTION: Basic robots.txt configuration that allows all user agents full access and specifies the sitemap location for version 1.21 documentation.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.21//sitemap.xml

----------------------------------------

TITLE: Sending Traffic to the Mesh
DESCRIPTION: This command sends a request to the Bookinfo sample application to generate traffic.

LANGUAGE: bash
CODE:
$ curl "http://$GATEWAY_URL/productpage"

----------------------------------------

TITLE: Configuring Web Crawler Access for Istio Documentation
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site content and specifies the location of the sitemap at istio.io/sitemap.xml

LANGUAGE: txt
CODE:
User-agent: *
Disallow:

Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Configuring Web Crawler Access with robots.txt
DESCRIPTION: Standard robots.txt configuration that allows all user agents unrestricted access to the site and provides the sitemap location. The sitemap is located at /v1.15/sitemap.xml.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.15/sitemap.xml

----------------------------------------

TITLE: Nested Text Block Boilerplate
DESCRIPTION: Shows how to use a boilerplate shortcode with a nested text block using test-3 identifier.

LANGUAGE: markdown
CODE:
{{< boilerplate "test-3" >}}

----------------------------------------

TITLE: Removing grpc_response_status Tags from REQUEST_COUNT Metric
DESCRIPTION: This Telemetry configuration removes the grpc_response_status tags from the REQUEST_COUNT metric for both client and server modes.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: remove-tags
  namespace: istio-system
spec:
  metrics:
    - providers:
        - name: prometheus
      overrides:
        - match:
            mode: CLIENT_AND_SERVER
            metric: REQUEST_COUNT
          tagOverrides:
            grpc_response_status:
              operation: REMOVE

----------------------------------------

TITLE: Implementing Mesh-wide CryptoMB Configuration in Istio
DESCRIPTION: This YAML configuration demonstrates how to apply CryptoMB private key provider settings across the entire Istio mesh. It uses an IstioOperator resource to configure the default proxy settings, including the CryptoMB poll delay.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: example-istiocontrolplane
spec:
  profile: demo
  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
  meshConfig:
    defaultConfig:
      privateKeyProvider:
        cryptomb:
          pollDelay: 10ms

----------------------------------------

TITLE: Labeling Application for Policy Enforcement
DESCRIPTION: Labels the httpbin deployment to enable the OPA authorization policy.

LANGUAGE: bash
CODE:
$ kubectl patch deploy httpbin -n my-app --type=merge -p='{
  "spec": {
    "template": {
      "metadata": {
        "labels": {
          "ext-authz": "enabled"
        }
      }
    }
  }
}'

----------------------------------------

TITLE: Exporting IstioOperator Configuration
DESCRIPTION: Downloads the IstioOperator configuration in YAML format for a specific resource.

LANGUAGE: bash
CODE:
$ kubectl get IstioOperator <name> -o yaml > istio.yaml

----------------------------------------

TITLE: Authorization Policy with CUSTOM Action
DESCRIPTION: Example of an AuthorizationPolicy configuration that delegates authorization decisions to an external service for requests matching specific path patterns.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ext-authz
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: CUSTOM
  provider:
    name: "my-ext-authz-service"
  rules:
  - to:
    - operation:
        paths: ["/admin/*"]

----------------------------------------

TITLE: Configuring Istio Documentation Front Matter in YAML
DESCRIPTION: YAML front matter block defining metadata for an Istio documentation page about configuration. Includes title, description, weight for ordering, keywords for categorization, and URL aliases.

LANGUAGE: yaml
CODE:
title: Configuration
description: Advanced concepts and features for configuring a running Istio mesh.
weight: 20
keywords: [ops,setup]
aliases:
    - /help/ops/setup
test: n/a

----------------------------------------

TITLE: Configuring Traffic Split with Aeraki MetaRouter CRD
DESCRIPTION: This YAML snippet demonstrates how to use Aeraki's MetaRouter Custom Resource Definition to manage traffic routing. It configures a 20/80 traffic split between two versions of a Thrift service.

LANGUAGE: yaml
CODE:
apiVersion: metaprotocol.aeraki.io/v1alpha1
kind: MetaRouter
metadata:
  name: test-metaprotocol-route
spec:
  hosts:
    - thrift-sample-server.thrift.svc.cluster.local
  routes:
    - name: traffic-spilt
      route:
        - destination:
            host: thrift-sample-server.thrift.svc.cluster.local
            subset: v1
          weight: 20
        - destination:
            host: thrift-sample-server.thrift.svc.cluster.local
            subset: v2
          weight: 80

----------------------------------------

TITLE: Gathering Istio Component Logs
DESCRIPTION: Collection of commands to retrieve logs from various Istio components including istiod, ingress/egress gateways, and sidecars.

LANGUAGE: bash
CODE:
kubectl logs -n istio-system -l app=istiod

LANGUAGE: bash
CODE:
kubectl logs -l istio=ingressgateway -n istio-system

LANGUAGE: bash
CODE:
kubectl logs -l istio=egressgateway -n istio-system

LANGUAGE: bash
CODE:
for ns in $(kubectl get ns -o jsonpath='{.items[*].metadata.name}') ; do kubectl logs -l service.istio.io/canonical-revision -c istio-proxy -n $ns ; done

----------------------------------------

TITLE: Single Shortcode Boilerplate
DESCRIPTION: Illustrates using a standalone boilerplate shortcode with test-2 identifier.

LANGUAGE: markdown
CODE:
{{< boilerplate "test-2" >}}

----------------------------------------

TITLE: Importing gRPC xDS Package in Go
DESCRIPTION: Import the gRPC xDS package to register xDS resolvers and balancers within gRPC. This should be added in the main package or where grpc.Dial is called.

LANGUAGE: go
CODE:
import _ "google.golang.org/grpc/xds"

----------------------------------------

TITLE: Installing Istio with Custom IstioOperator Configuration
DESCRIPTION: This YAML configuration disables Telemetry V2 for Istio versions before 1.18.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    telemetry:
      enabled: true
      v2:
        enabled: false

----------------------------------------

TITLE: Creating Kubernetes Ingress for Bookinfo
DESCRIPTION: Defines a Kubernetes Ingress resource for the Bookinfo application with paths for different services.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookinfo
  annotations:
    kubernetes.io/ingress.class: istio
spec:
  rules:
  - host: $MYHOST
    http:
      paths:
      - path: /productpage
        pathType: Prefix
        backend:
          service:
            name: productpage
            port:
              number: 9080
      - path: /login
        pathType: Prefix
        backend:
          service:
            name: productpage
            port:
              number: 9080
      - path: /logout
        pathType: Prefix
        backend:
          service:
            name: productpage
            port:
              number: 9080
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: productpage
            port:
              number: 9080

----------------------------------------

TITLE: Invalid VirtualService Configuration in Istio YAML
DESCRIPTION: This YAML configuration for a VirtualService in Istio contains invalid weight values that cause a SchemaValidationError. The weights 999 and 888 are outside the valid range of 0-100 for percentage values.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: ratings-bogus-weight-default
  namespace: default
spec:
  hosts:
  - ratings
  http:
  - route:
    - destination:
        host: ratings
        subset: v1
      weight: 999
    - destination:
        host: ratings
        subset: v2
      weight: 888

----------------------------------------

TITLE: Service-Level Metrics Example in Istio
DESCRIPTION: Demonstration of Istio's service-oriented metrics that track request details including security policy, source/destination services, workloads, and response codes. These metrics are typically exported to Prometheus for monitoring service behavior.

LANGUAGE: json
CODE:
istio_requests_total{
  connection_security_policy=\"mutual_tls\",
  destination_app=\"details\",
  destination_canonical_service=\"details\",
  destination_canonical_revision=\"v1\",
  destination_principal=\"cluster.local/ns/default/sa/default\",
  destination_service=\"details.default.svc.cluster.local\",
  destination_service_name=\"details\",
  destination_service_namespace=\"default\",
  destination_version=\"v1\",
  destination_workload=\"details-v1\",
  destination_workload_namespace=\"default\",
  reporter=\"destination\",
  request_protocol=\"http\",
  response_code=\"200\",
  response_flags=\"-\",
  source_app=\"productpage\",
  source_canonical_service=\"productpage\",
  source_canonical_revision=\"v1\",
  source_principal=\"cluster.local/ns/default/sa/default\",
  source_version=\"v1\",
  source_workload=\"productpage-v1\",
  source_workload_namespace=\"default\"
} 214

----------------------------------------

TITLE: Creating gRPC Connection with xDS Scheme
DESCRIPTION: Create a gRPC connection using the xds:/// scheme to enable xDS features.

LANGUAGE: go
CODE:
conn, err := grpc.DialContext(ctx, "xds:///foo.ns.svc.cluster.local:7070")

----------------------------------------

TITLE: Defining Full Current Istio Version
DESCRIPTION: This snippet defines a placeholder for the full current version of Istio. It uses a custom text block with a specific syntax and ID.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_full_version >}}
{{< istio_full_version >}}
{{< /text >}}

----------------------------------------

TITLE: Configuring Multiple Aliases for Page Redirection in Istio Documentation
DESCRIPTION: This snippet demonstrates how to set up multiple aliases in the front matter to handle various page redirects, ensuring backward compatibility for multiple old URLs.

LANGUAGE: yaml
CODE:
---
title: Frequently Asked Questions
description: Questions Asked Frequently.
weight: 13
aliases:
    - /faq
    - /faq2
    - /faq3
---

----------------------------------------

TITLE: Affected Resource Format
DESCRIPTION: Demonstrates the format for affected resource references including kind, name and namespace.

LANGUAGE: plain
CODE:
<resource-kind> <resource-name>.<resource-namespace>

----------------------------------------

TITLE: Deploying Test Container and Sending Requests
DESCRIPTION: Deploy a sleep container and use it to send test requests to the defined external service.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/sleep/sleep.yaml@

LANGUAGE: bash
CODE:
$ for i in {1..5}; do kubectl exec deploy/sleep -c sleep -- curl -sS http://mydb.com; echo; sleep 2; done

----------------------------------------

TITLE: Configuring Service Dependencies in Admiral
DESCRIPTION: Defines service dependencies using Admiral's Dependency CRD to optimize configuration distribution across clusters.

LANGUAGE: yaml
CODE:
apiVersion: admiral.io/v1alpha1
kind: Dependency
metadata:
  name: dependency
  namespace: admiral
spec:
  source: orders
  identityLabel: identity
  destinations:
  - payments

----------------------------------------

TITLE: Installing Istio without Sampling Configuration
DESCRIPTION: This snippet shows how to install Istio without setting sampling inside defaultConfig, enabling tracing and configuring an OpenTelemetry extension provider.

LANGUAGE: bash
CODE:
$ cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 4317
        service: opentelemetry-collector.observability.svc.cluster.local
        resource_detectors:
          environment: {}
EOF

----------------------------------------

TITLE: Verifying Certificate Configuration
DESCRIPTION: Command to compare root certificates between clusters to ensure proper trust configuration.

LANGUAGE: bash
CODE:
diff \
   <(kubectl --context="${CTX_CLUSTER1}" -n istio-system get secret cacerts -ojsonpath='{.data.root-cert\.pem}') \
   <(kubectl --context="${CTX_CLUSTER2}" -n istio-system get secret cacerts -ojsonpath='{.data.root-cert\.pem}')

----------------------------------------

TITLE: Configuring DestinationRule with Missing caCertificates in Istio
DESCRIPTION: This YAML configuration demonstrates a DestinationRule that triggers the NoServerCertificateVerificationPortLevel error. It sets up TLS for a specific port but omits the caCertificates field, which is required for server identity validation.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: db-tls
spec:
  host: mydbserver.prod.svc.cluster.local
  trafficPolicy:
    portLevelSettings:
      - port:
          number: 443
        tls:
          mode: SIMPLE
          clientCertificate: /etc/certs/myclientcert.pem
          privateKey: /etc/certs/client_private_key.pem
          sni: my-nginx.mesh-external.svc.cluster.local
          # caCertificates not set

----------------------------------------

TITLE: Viewing Istio VirtualService Rules with kubectl
DESCRIPTION: This command retrieves the current VirtualService rules configured in Istio and displays them in YAML format. It uses kubectl to interact with the Kubernetes cluster where Istio is deployed.

LANGUAGE: bash
CODE:
kubectl get virtualservice -o yaml

----------------------------------------

TITLE: Configuring Kubernetes Ingress with cert-manager Certificate in YAML
DESCRIPTION: This snippet defines a Kubernetes Ingress resource that uses the certificate created by cert-manager. It specifies the Istio ingress class, host, and TLS configuration referencing the certificate secret.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    kubernetes.io/ingress.class: istio
spec:
  rules:
  - host: my.example.com
    http: ...
  tls:
  - hosts:
    - my.example.com # This should match a DNS name in the Certificate
    secretName: ingress-cert # This should match the Certificate secretName

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio 1.1 Documentation
DESCRIPTION: YAML frontmatter metadata defining the document properties including title, description, publish date, release version, and navigation settings.

LANGUAGE: yaml
CODE:
---
title: Istio 1.1 Upgrade Notes
description: Important changes operators must understand before upgrading to Istio 1.1.
publishdate: 2019-03-19
release: 1.1
subtitle: Minor Release
linktitle: 1.1 Upgrade Notes
weight: 20
---

----------------------------------------

TITLE: Viewing Virtual Service Status
DESCRIPTION: Command to view the status field of a virtual service configuration using kubectl.

LANGUAGE: bash
CODE:
$ kubectl get virtualservice <service-name> -o yaml

----------------------------------------

TITLE: Kubernetes Webhook Configuration in YAML
DESCRIPTION: Example YAML configuration showing ValidatingWebhookConfiguration and MutatingWebhookConfiguration with both correct hostname usage and problematic IP address usage.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-validator-external-istiod
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com:15017/validate
  name: rev.validation.istio.io

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istiod-default-validator
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com:15017/validate
  failurePolicy: Ignore
  name: validation.istio.io

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: istio-sidecar-injector-external-istiod
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://999.999.999.999:5100/inject/cluster/your-cluster-name/net/network1
  failurePolicy: Fail
  name: rev.namespace.sidecar-injector.istio.io
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com/inject/cluster/your-cluster-name/net/network1
  failurePolicy: Fail
  name: rev.object.sidecar-injector.istio.io
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com/inject/cluster/your-cluster-name/net/network1
  failurePolicy: Fail
  name: namespace.sidecar-injector.istio.io
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com/inject/cluster/your-cluster-name/net/network1
  failurePolicy: Fail
  name: object.sidecar-injector.istio.io

----------------------------------------

TITLE: Configuring Kind Cluster for Istio Installation
DESCRIPTION: YAML configuration for creating a Kind cluster with necessary settings for proper Istio installation, including service account issuer and signing key file.

LANGUAGE: yaml
CODE:
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
kubeadmConfigPatches:
  - |
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: ClusterConfiguration
    metadata:
      name: config
    apiServer:
      extraArgs:
        "service-account-issuer": "kubernetes.default.svc"
        "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"

----------------------------------------

TITLE: Installing Istio with Zipkin Extension Provider
DESCRIPTION: Configures Istio with a Zipkin extension provider for distributed tracing. Specifies the Zipkin service endpoint and port within the mesh configuration.

LANGUAGE: bash
CODE:
$ cat <<EOF > ./tracing.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    defaultConfig:
      tracing: {} # disable legacy MeshConfig tracing options
    extensionProviders:
    - name: zipkin
      zipkin:
        service: zipkin.istio-system.svc.cluster.local
        port: 9411
EOF
$ istioctl install -f ./tracing.yaml --skip-confirmation

----------------------------------------

TITLE: Cleaning Up Operator Resources
DESCRIPTION: Removes the istio-operator deployment and associated custom resource definition after migration.

LANGUAGE: bash
CODE:
$ kubectl delete deployment -n istio-system istio-operator
$ kubectl delete customresourcedefinition istiooperator

----------------------------------------

TITLE: Warning Message Example for Missing ServiceEntry Addresses
DESCRIPTION: Example of the warning message displayed when a ServiceEntry configuration is missing required addresses.

LANGUAGE: plain
CODE:
Warning [IST0134] (ServiceEntry service-entry.default serviceentry.yaml:13) ServiceEntry addresses are required for this protocol.

----------------------------------------

TITLE: Installing Istio with IstioOperator Compatibility Version
DESCRIPTION: Command to install Istio using IstioOperator with a specific compatibility version set to the previous version.

LANGUAGE: shell
CODE:
$ istioctl install --set values.compatibilityVersion={{< istio_previous_version >}}

----------------------------------------

TITLE: Enabling Status Field in Istio Installation
DESCRIPTION: Command to enable the status field and configuration analysis during Istio installation using istioctl.

LANGUAGE: bash
CODE:
$ istioctl install --set values.pilot.env.PILOT_ENABLE_STATUS=true --set values.global.istiod.enableAnalysis=true

----------------------------------------

TITLE: Missing Webhook URLs Configuration Example
DESCRIPTION: Example of ValidatingWebhookConfiguration and MutatingWebhookConfiguration manifests showing invalid configurations with missing webhook URLs.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-validator-external-istiod
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url:
  name: rev.validation.istio.io

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istiod-default-validator
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url: https://test.com:15017/validate
  failurePolicy: Ignore
  name: validation.istio.io

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: istio-sidecar-injector-external-istiod
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    url:
  failurePolicy: Fail
  name: rev.namespace.sidecar-injector.istio.io

----------------------------------------

TITLE: Configuring Service-attached parentRefs in Gateway API
DESCRIPTION: Example of correct configuration for Service parentRefs in Gateway API routes where empty group must be explicitly specified. This change is required due to updates in Gateway API conformance tests.

LANGUAGE: yaml
CODE:
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: productpage
spec:
  parentRefs:
  - group: ""
    kind: Service
    name: productpage
    port: 9080

----------------------------------------

TITLE: Deploying Liveness HTTP Sample Application in Istio
DESCRIPTION: Deploys a sample application with an HTTP liveness probe to demonstrate Istio's health check rewriting.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liveness-http
  namespace: istio-io-health-rewrite
spec:
  selector:
    matchLabels:
      app: liveness-http
      version: v1
  template:
    metadata:
      labels:
        app: liveness-http
        version: v1
    spec:
      containers:
      - name: liveness-http
        image: docker.io/istio/health:example
        ports:
        - containerPort: 8001
        livenessProbe:
          httpGet:
            path: /foo
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5

----------------------------------------

TITLE: Navigating to Istio Package Directory
DESCRIPTION: This command changes the current directory to the downloaded Istio package directory.

LANGUAGE: bash
CODE:
$ cd istio-{{< istio_full_version >}}

----------------------------------------

TITLE: Uninstalling Sample Application and Istio with PSA
DESCRIPTION: Provides commands to delete the sample application, remove PSA labels, uninstall Istio, and delete the istio-system namespace.

LANGUAGE: bash
CODE:
$ kubectl delete -f samples/bookinfo/platform/kube/bookinfo-psa.yaml
$ kubectl label namespace default pod-security.kubernetes.io/enforce- pod-security.kubernetes.io/enforce-version-
$ istioctl uninstall -y --purge
$ kubectl delete namespace istio-system

----------------------------------------

TITLE: Querying Envoy Proxy Configuration with istioctl
DESCRIPTION: Commands for retrieving various Envoy proxy configurations including bootstrap, cluster, listener, route, and endpoint information using istioctl proxy-config command.

LANGUAGE: bash
CODE:
# Retrieve information about bootstrap configuration for the Envoy instance in the specified pod.
$ istioctl proxy-config bootstrap productpage-v1-bb8d5cbc7-k7qbm

# Retrieve information about cluster configuration for the Envoy instance in the specified pod.
$ istioctl proxy-config cluster productpage-v1-bb8d5cbc7-k7qbm

# Retrieve information about listener configuration for the Envoy instance in the specified pod.
$ istioctl proxy-config listener productpage-v1-bb8d5cbc7-k7qbm

# Retrieve information about route configuration for the Envoy instance in the specified pod.
$ istioctl proxy-config route productpage-v1-bb8d5cbc7-k7qbm

# Retrieve information about endpoint configuration for the Envoy instance in the specified pod.
$ istioctl proxy-config endpoints productpage-v1-bb8d5cbc7-k7qbm

# Try the following to discover more proxy-config commands
$ istioctl proxy-config --help

----------------------------------------

TITLE: Enabling Ambient Mode Pod Upgrade Reconciliation in Istio 1.25
DESCRIPTION: Commands to enable the new ambient mode pod upgrade reconciliation feature in Istio 1.25. This feature allows the istio-cni DaemonSet to upgrade in-pod iptables rules for pods previously enrolled in the ambient mesh.

LANGUAGE: bash
CODE:
helm install cni --set ambient.reconcileIptablesOnStartup=true

LANGUAGE: bash
CODE:
istioctl install --set values.cni.ambient.reconcileIptablesOnStartup=true

----------------------------------------

TITLE: Configuring EnvoyFilter with REPLACE Operation and ProxyVersion
DESCRIPTION: Example of an EnvoyFilter configuration that demonstrates the potential issue when using REPLACE operation with proxyVersion without priority. Shows two EnvoyFilter resources that modify HTTP filters with Lua code.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: test-replace-3
  namespace: bookinfo
spec:
  workloadSelector:
    labels:
      app: reviews4
  configPatches:
    # The first patch adds the Lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      proxy:
        proxyVersion: '^1\.11.*'
      listener:
        portNumber: 8080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: REPLACE
      value: # Lua filter specification
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
              local headers, body = request_handle:httpCall(
               "lua_cluster",
               {
                [":method"] = "POST",
                [":path"] = "/acl",
                [":authority"] = "internal.org.net"
               },
              "authorize call",
              1000)
            end

----------------------------------------

TITLE: Configuring Stackdriver Handler for Istio Logging
DESCRIPTION: YAML configuration for setting up a Stackdriver handler to export Istio access logs. Includes configuration for log formatting, HTTP mapping, label names, and sink information.

LANGUAGE: yaml
CODE:
apiVersion: "config.istio.io/v1alpha2"
kind: stackdriver
metadata:
  name: handler
  namespace: istio-system
spec:
  project_id: "<project_id>"
  logInfo:
    accesslog.logentry.istio-system:
      payloadTemplate: '{{or (.sourceIp) "-"}} - {{or (.sourceUser) "-"}} [{{or (.timestamp.Format "02/Jan/2006:15:04:05 -0700") "-"}}] "{{or (.method) "-"}} {{or (.url) "-"}} {{or (.protocol) "-"}}" {{or (.responseCode) "-"}} {{or (.responseSize) "-"}}'
      httpMapping:
        url: url
        status: responseCode
        requestSize: requestSize
        responseSize: responseSize
        latency: latency
        localIp: sourceIp
        remoteIp: destinationIp
        method: method
        userAgent: userAgent
        referer: referer
      labelNames:
      - sourceIp
      - destinationIp
      - sourceService
      sinkInfo:
        id: '<sink_id>'
        destination: '<sink_destination>'
        filter: '<log_filter>'

----------------------------------------

TITLE: Cleaning Up Telemetry API Resources in Istio
DESCRIPTION: This bash script removes all Telemetry API resources, uninstalls Loki and OpenTelemetry components, and completely uninstalls Istio from the cluster.

LANGUAGE: bash
CODE:
$ kubectl delete telemetry --all -A
$ kubectl delete -f @samples/addons/loki.yaml@ -n istio-system
$ kubectl delete -f @samples/open-telemetry/loki/otel.yaml@ -n istio-system
$ istioctl uninstall --purge --skip-confirmation

----------------------------------------

TITLE: Cleaning Up Telemetry API Resources in Istio
DESCRIPTION: This bash script removes all Telemetry API resources, uninstalls Loki and OpenTelemetry components, and completely uninstalls Istio from the cluster.

LANGUAGE: bash
CODE:
$ kubectl delete telemetry --all -A
$ kubectl delete -f @samples/addons/loki.yaml@ -n istio-system
$ kubectl delete -f @samples/open-telemetry/loki/otel.yaml@ -n istio-system
$ istioctl uninstall --purge --skip-confirmation

----------------------------------------

TITLE: Accessing Raw Ztunnel Configuration
DESCRIPTION: Direct access to ztunnel's configuration dump using curl within the pod.

LANGUAGE: bash
CODE:
$ kubectl debug -it $ZTUNNEL -n istio-system --image=curlimages/curl -- curl localhost:15000/config_dump

----------------------------------------

TITLE: Configuring Cluster2 IstioOperator
DESCRIPTION: Creates and applies IstioOperator configuration for cluster2 with mesh ID, cluster name, and network settings

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  values:
    global:
      meshID: mesh1
      multiCluster:
        clusterName: cluster2
      network: network2

LANGUAGE: bash
CODE:
istioctl install --context="${CTX_CLUSTER2}" -f cluster2.yaml

----------------------------------------

TITLE: Setting Default Revision in Istio
DESCRIPTION: This command sets a specific Istio revision as the default. The default revision has special responsibilities such as sidecar injection, resource validation, and singleton mesh operations.

LANGUAGE: bash
CODE:
kubectl tag istiod {{< istio_full_version_revision >}} default

----------------------------------------

TITLE: Setting Istio Certificate Lifetime in YAML Configuration
DESCRIPTION: Example YAML configuration showing how to override the default certificate lifetime using the proxyMetadata.SECRET_TTL field. The maximum allowed value is 90 days.

LANGUAGE: yaml
CODE:
proxyMetadata:
  SECRET_TTL: 48h

----------------------------------------

TITLE: Deploying OPA
DESCRIPTION: Creates a namespace for OPA, enables Istio injection, and deploys the OPA server with necessary configurations.

LANGUAGE: bash
CODE:
$ kubectl create ns opa
$ kubectl label namespace opa istio-injection=enabled

$ kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opa
  name: opa
  namespace: opa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
    spec:
      containers:
      - image: openpolicyagent/opa:0.61.0-envoy
        name: opa
        args:
          - "run"
          - "--server"
          - "--disable-telemetry"
          - "--config-file=/config/config.yaml"
          - "--log-level=debug"
          - "--diagnostic-addr=0.0.0.0:8282"
          - "/policy/policy.rego"
        volumeMounts:
          - mountPath: "/config"
            name: opa-config
          - mountPath: "/policy"
            name: opa-policy
      volumes:
        - name: opa-config
          configMap:
            name: opa-config
        - name: opa-policy
          configMap:
            name: opa-policy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-config
  namespace: opa
data:
  config.yaml: |
    decision_logs:
      console: true
    plugins:
      envoy_ext_authz_grpc:
        addr: ":9191"
        path: mypackage/mysubpackage/myrule
---
apiVersion: v1
kind: Service
metadata:
  name: opa
  namespace: opa
  labels:
    app: opa
spec:
  ports:
    - port: 9191
      protocol: TCP
      name: grpc
  selector:
    app: opa
---
EOF

----------------------------------------

TITLE: Retrieving IstioOperator Resources
DESCRIPTION: Lists all IstioOperator custom resources in the cluster.

LANGUAGE: bash
CODE:
$ kubectl get IstioOperator

----------------------------------------

TITLE: Defining Adapter Input Schema with Templates in Protobuf
DESCRIPTION: Templates describe the exact data that an adapter consumes at request time. They are specified as protobuf messages and define bundles of data delivered to adapters at runtime.

LANGUAGE: protobuf
CODE:
// Example template definition
message MetricTemplate {
    // Fields describing metric data
}

message LogEntryTemplate {
    // Fields describing log entry data
}

----------------------------------------

TITLE: Displaying NoServerCertificateVerificationPortLevel Error in Istio
DESCRIPTION: This snippet shows the error message that occurs when caCertificates is not set in a destination rule but is needed for the traffic policy.

LANGUAGE: plaintext
CODE:
Error [IST0129] (DestinationRule db-tls.default) DestinationRule default/db-tls in namespace default has TLS mode set to SIMPLE but no caCertificates are set to validate server identity for host: mydbserver.prod.svc.cluster.local at port number:443

----------------------------------------

TITLE: Setting Service Export Scope with Istio Annotations
DESCRIPTION: Demonstrates how to use the networking.istio.io/exportTo annotation to control service visibility. This example restricts the 'details' service to only be visible to its own namespace and the 'client' namespace.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: details
  annotations:
    networking.istio.io/exportTo: ".,client"
spec: ...

----------------------------------------

TITLE: Configuring Remote Cluster IstioOperator Installation
DESCRIPTION: YAML configuration for installing Istio on the remote cluster (cluster2) using IstioOperator API with remote profile settings.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: remote
  values:
    istiodRemote:
      injectionPath: /inject/cluster/cluster2/net/network1
    global:
      remotePilotAddress: ${DISCOVERY_ADDRESS}

----------------------------------------

TITLE: Rendering Warning Template in Markdown
DESCRIPTION: A warning shortcode template that displays a notice about vendor documentation not being tested with Istio 1.9 release. Uses Hugo-style shortcode syntax.

LANGUAGE: markdown
CODE:
{{< warning >}}
This vendor-provided document has not been tested on the Istio 1.9 release and may contain bugs.
{{< /warning >}}

----------------------------------------

TITLE: Unsupported Istio Ingress Configuration
DESCRIPTION: Shows an example of an unsupported Ingress configuration that will not work with Istio. The configuration attempts to use regular expressions in the path and ingress.kubernetes.io annotations which are not supported.

LANGUAGE: yaml
CODE:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: this-will-not-work
  annotations:
    kubernetes.io/ingress.class: istio
    # Ingress annotations other than ingress class will not be honored
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: example.com
    http:
      paths:
      - path: /hello(.*?)world/
        pathType: Prefix
        backend:
          service:
            name: myservice
            port:
              number: 8000

----------------------------------------

TITLE: Deploying Istio-enabled Bookinfo Services
DESCRIPTION: Commands to redeploy the Bookinfo application with Istio injection, applying configurations for different service components separately

LANGUAGE: bash
CODE:
$ curl -s {{< github_file >}}/samples/bookinfo/platform/kube/bookinfo.yaml | istioctl kube-inject -f - | kubectl apply -l app!=reviews -f -
$ curl -s {{< github_file >}}/samples/bookinfo/platform/kube/bookinfo.yaml | istioctl kube-inject -f - | kubectl apply -l app=reviews,version=v2 -f -

----------------------------------------

TITLE: Creating xDS-Enabled gRPC Server in Go
DESCRIPTION: Use a special constructor to create a gRPC server that supports xDS features.

LANGUAGE: go
CODE:
import "google.golang.org/grpc/xds"

...

server = xds.NewGRPCServer()
RegisterFooServer(server, &fooServerImpl)

----------------------------------------

TITLE: Defining v1beta1 Istio Authentication Policies
DESCRIPTION: Example YAML definitions for v1beta1 Istio authentication policies including PeerAuthentication, RequestAuthentication, and AuthorizationPolicy.

LANGUAGE: yaml
CODE:
# A PeerAuthentication that enables mTLS for the foo namespace, migrated from the MeshPolicy
# Alternatively the MeshPolicy could also be migrated to a PeerAuthentication at mesh level
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: foo
spec:
  mtls:
    mode: STRICT
---
# A PeerAuthentication that enables mTLS for the httpbin workload, migrated from the Policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: httpbin
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  # port level mtls set for the workload port 80 corresponding to the service port 8000
  portLevelMtls:
    80:
      mode: PERMISSIVE
--
# A RequestAuthentication that enables JWT for the httpbin workload, migrated from the Policy
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: httpbin
  namespace: foo
spec:
  selector:
    matchLabels:
      app: httpbin
  jwtRules:
  - issuer: testing@example.com
    jwksUri: https://www.example.com/jwks.json
---
# An AuthorizationPolicy that enforces to require JWT validation for the httpbin workload, migrated from the Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin-jwt
  namespace: foo
spec:
  # Use DENY action to explicitly deny requests without JWT token
  action: DENY
  selector:
    matchLabels:
      app: httpbin
  rules:
  - from:
    - source:
        # This makes sure requests without JWT token will be denied
        notRequestPrincipals: ["*"]
    to:
    - operation:
        # This should be the workload port 80, not the service port 8000
        ports: ["80"]
        # The path and notPath is converted from the trigger rule in the Policy
        paths: ["/admin/*"]
        notPaths: ["/admin/status"]

----------------------------------------

TITLE: Configuring Custom Condition Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy with a custom condition requiring the 'version' header to be 'v1' or 'v2'.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 action: ALLOW
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/curl"]
   to:
   - operation:
       methods: ["GET"]
   when:
   - key: request.headers[version]
     values: ["v1", "v2"]

----------------------------------------

TITLE: Example Error Message
DESCRIPTION: Provides a concrete example of an error message showing a VirtualService referencing a non-existent gateway.

LANGUAGE: plain
CODE:
Error [IST0101] (VirtualService httpbin.default) Referenced gateway not found: "httpbin-gateway-bogus"

----------------------------------------

TITLE: Executing HelloWorld Service Call in Istio
DESCRIPTION: This Bash command executes a curl request to the HelloWorld service from a curl pod in the sample namespace. It demonstrates how to verify that traffic stays within a specific region and zone.

LANGUAGE: bash
CODE:
kubectl exec --context="${CTX_R1_Z1}" -n sample -c curl \
  "$(kubectl get pod --context="${CTX_R1_Z1}" -n sample -l \
  app=curl -o jsonpath='{.items[0].metadata.name}')" \
  -- curl -sSL helloworld.sample:5000/hello

----------------------------------------

TITLE: Creating and Labeling Istio System Namespace for PSA
DESCRIPTION: Creates the istio-system namespace and labels it to enforce the 'privileged' policy for Pod Security Admission.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-system
$ kubectl label --overwrite ns istio-system \
    pod-security.kubernetes.io/enforce=privileged \
    pod-security.kubernetes.io/enforce-version=latest
namespace/istio-system labeled

----------------------------------------

TITLE: Creating and Labeling Istio System Namespace for PSA
DESCRIPTION: Creates the istio-system namespace and labels it to enforce the 'privileged' policy for Pod Security Admission.

LANGUAGE: bash
CODE:
$ kubectl create namespace istio-system
$ kubectl label --overwrite ns istio-system \
    pod-security.kubernetes.io/enforce=privileged \
    pod-security.kubernetes.io/enforce-version=latest
namespace/istio-system labeled

----------------------------------------

TITLE: Inserting Full Istio Version in Plain Text
DESCRIPTION: This snippet is a placeholder for inserting the full version of Istio. It uses a custom shortcode to dynamically populate the complete version number.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_full_version >}}
{{< istio_full_version >}}
{{< /text >}}

----------------------------------------

TITLE: Configuring Wildcard Gateway
DESCRIPTION: Gateway configuration using a wildcard host to avoid 404 errors with shared TLS certificates.

LANGUAGE: yaml
CODE:
servers:
- port:
    number: 443
    name: https
    protocol: HTTPS
  hosts:
  - "*.example.com"

----------------------------------------

TITLE: Rolling Back Deployment
DESCRIPTION: Commands to remove the v2 deployment in case of issues.

LANGUAGE: bash
CODE:
$ kubectl delete deployment reviews-v2
$ kubectl delete pod -l app=reviews,version=v2

----------------------------------------

TITLE: Mirroring Istio Docker Images to Custom Registry
DESCRIPTION: A bash script that copies Istio container images from Docker Hub to a custom registry. The script supports multiple image versions and variants, helping avoid Docker Hub rate limits by maintaining a private copy of required images.

LANGUAGE: bash
CODE:
SOURCE_HUB=istio
DEST_HUB=my-registry # Replace this with the destination hub
IMAGES=( install-cni operator pilot proxyv2 ) # Images to mirror.
VERSIONS=( 1.7.5 1.8.0 ) # Versions to copy
VARIANTS=( "" "-distroless" ) # Variants to copy
for image in $IMAGES; do
for version in $VERSIONS; do
for variant in $VARIANTS; do
  name=$image:$version$variant
  docker pull $SOURCE_HUB/$name
  docker tag $SOURCE_HUB/$name $DEST_HUB/$name
  docker push $DEST_HUB/$name
  docker rmi $SOURCE_HUB/$name
  docker rmi $DEST_HUB/$name
done
done
done

----------------------------------------

TITLE: Defining v1alpha1 Istio Security Policies
DESCRIPTION: Example YAML definitions for v1alpha1 Istio security policies including MeshPolicy, Policy, ClusterRbacConfig, ServiceRole, and ServiceRoleBinding.

LANGUAGE: yaml
CODE:
# A MeshPolicy that enables mTLS globally, including the whole foo namespace
apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
spec:
  peers:
  - mtls: {}
---
# A Policy that enables mTLS permissive mode and enables JWT for the httpbin service on port 8000
apiVersion: authentication.istio.io/v1alpha1
kind: Policy
metadata:
  name: httpbin
  namespace: foo
spec:
  targets:
  - name: httpbin
    ports:
    - number: 8000
  peers:
  - mtls:
      mode: PERMISSIVE
  origins:
  - jwt:
      issuer: testing@example.com
      jwksUri: https://www.example.com/jwks.json
      triggerRules:
      - includedPaths:
        - prefix: /admin/
        excludedPaths:
        - exact: /admin/status
  principalBinding: USE_ORIGIN
---
# A ClusterRbacConfig that enables RBAC globally, including the foo namespace
apiVersion: "rbac.istio.io/v1alpha1"
kind: ClusterRbacConfig
metadata:
  name: default
spec:
  mode: 'ON'
---
# A ServiceRole that enables RBAC for the httpbin service
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: httpbin
  namespace: foo
spec:
  rules:
  - services: ["httpbin.foo.svc.cluster.local"]
    methods: ["GET"]
---
# A ServiceRoleBinding for the above ServiceRole
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: httpbin
  namespace: foo
spec:
  subjects:
  - user: cluster.local/ns/foo/sa/sleep
    roleRef:
      kind: ServiceRole
      name: httpbin

----------------------------------------

TITLE: Configuring Deny-All Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that explicitly denies all access, overriding any ALLOW policies.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: deny-all
spec:
  action: DENY
  # The rules field has an empty rule, which will always match.
  rules:
  - {}

----------------------------------------

TITLE: Creating Namespace for OpenTelemetry Collector in Kubernetes
DESCRIPTION: This command creates a new Kubernetes namespace called 'observability' for deploying the OpenTelemetry Collector. It isolates the collector resources from other components in the cluster.

LANGUAGE: bash
CODE:
$ kubectl create namespace observability

----------------------------------------

TITLE: Displaying IneffectivePolicy Warning for Namespace in Ambient Mode
DESCRIPTION: This snippet shows an example of the warning message displayed when a Sidecar policy has no impact because the targeted namespace is in ambient mode.

LANGUAGE: plaintext
CODE:
Warning [IST0167] (Sidecar ns-ambient/namespace-scoped testdata/sidecar-default-selector.yaml:84) The policy has no\nimpact: namespace is in ambient mode, the policy has no impact.

----------------------------------------

TITLE: Viewing Istio Sidecar Injector Service
DESCRIPTION: This snippet shows how to view the Istio sidecar injector service in the istio-system namespace.

LANGUAGE: bash
CODE:
$ kubectl get svc --namespace=istio-system | grep sidecar-injector
istio-sidecar-injector   ClusterIP   10.102.70.184   <none>        443/TCP             24d

----------------------------------------

TITLE: Creating Feature Block in Istio
DESCRIPTION: Shows how to create feature blocks using the feature_block shortcode with header and image parameters to display concept information.

LANGUAGE: markdown
CODE:
{{< feature_block header="Traffic management" image="management.svg" >}}
Istio's traffic routing rules let you easily control the flow of traffic and API calls between services.
{{< /feature_block >}}

----------------------------------------

TITLE: Configuring TLS with CryptoMB Private Key Provider in Envoy
DESCRIPTION: This snippet shows how to configure TLS in Envoy using the CryptoMB private key provider instead of a standard private key. It specifies the certificate chain, provider name, and typed configuration including the private key file and poll delay.

LANGUAGE: yaml
CODE:
tls_certificates:
  certificate_chain: { "filename": "/path/cert.pem" }
  private_key_provider:
    provider_name: cryptomb
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.private_key_providers.cryptomb.v3alpha.CryptoMbPrivateKeyMethodConfig
      private_key: { "filename": "/path/key.pem" }
      poll_delay: 10ms

----------------------------------------

TITLE: Checking Pod Status
DESCRIPTION: Command to list all pods and verify the Istio sidecar injection

LANGUAGE: bash
CODE:
kubectl get pods

----------------------------------------

TITLE: Removing Generated Files in Bash
DESCRIPTION: This command removes the sample.yaml file and any helloworld-region*.zone*.yaml files that were generated during the locality load balancing tasks.

LANGUAGE: bash
CODE:
$ rm -f sample.yaml helloworld-region*.zone*.yaml

----------------------------------------

TITLE: OPA Policy Example
DESCRIPTION: Sample Open Policy Agent (OPA) policy that validates JWT tokens and checks path permissions.

LANGUAGE: rego
CODE:
package envoy.authz

import input.attributes.request.http as http_request

default allow = false

token = {"valid": valid, "payload": payload} {
    [_, encoded] := split(http_request.headers.authorization, " ")
    [valid, _, payload] := io.jwt.decode_verify(encoded, {"secret": "secret"})
}

allow {
    is_token_valid
    action_allowed
}

is_token_valid {
  token.valid
  now := time.now_ns() / 1000000000
  token.payload.nbf <= now
  now < token.payload.exp
}

action_allowed {
  startswith(http_request.path, base64url.decode(token.payload.path))
}

----------------------------------------

TITLE: Configuring Allow Read Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that allows GET and HEAD operations on workloads with the label 'app: products' in the default namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: allow-read
  namespace: default
spec:
  selector:
    matchLabels:
      app: products
  action: ALLOW
  rules:
  - to:
    - operation:
         methods: ["GET", "HEAD"]

----------------------------------------

TITLE: Configuring Istio Blog Post Metadata with YAML Front Matter
DESCRIPTION: YAML front matter block that specifies metadata fields for an Istio blog post or documentation page. Includes required fields like title and description as well as optional fields like subtitle, publish date, attribution and keywords.

LANGUAGE: yaml
CODE:
---
title: My Title
subtitle: My optional on-line subtitle
description: My one-line description for the page.
publishdate: 2017-05-24
attribution: My Name (My Company Name)
keywords: [keyword1,keyword2]
---

----------------------------------------

TITLE: Configuring Ingress Gateway for httpbin (Gateway API)
DESCRIPTION: Creates and configures the ingress gateway for httpbin using the Gateway API.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/httpbin/gateway-api/httpbin-gateway.yaml@ -n foo
$ kubectl wait --for=condition=programmed gtw -n foo httpbin-gateway

----------------------------------------

TITLE: Configuring ServiceEntry with Target Port
DESCRIPTION: ServiceEntry configuration using targetPort for TLS origination.

LANGUAGE: yaml
CODE:
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 80
    name: http
    protocol: HTTP
    targetPort: 443

----------------------------------------

TITLE: Retrieving Istio Galley Configuration with kubectl
DESCRIPTION: This command retrieves the Istio Galley configuration from the 'istio-system' namespace and outputs the data field. It uses kubectl with jsonpath to extract specific information from the ConfigMap.

LANGUAGE: bash
CODE:
$ kubectl -n istio-system get configmap istio-galley-configuration -o jsonpath='{.data}'

----------------------------------------

TITLE: Attaching cluster2 as Remote Cluster to cluster1
DESCRIPTION: Generates a remote secret for cluster2 and applies it to cluster1 to enable API Server access.

LANGUAGE: bash
CODE:
istioctl create-remote-secret \
    --context="${CTX_CLUSTER2}" \
    --name=cluster2 | \
    kubectl apply -f - --context="${CTX_CLUSTER1}"

----------------------------------------

TITLE: Setting ZooKeeper Quorum Configuration
DESCRIPTION: Basic ZooKeeper configuration showing quorum listening behavior.

LANGUAGE: plain
CODE:
quorumListenOnAllIPs=false

----------------------------------------

TITLE: Markdown Frontmatter for Istio Ingress Documentation
DESCRIPTION: YAML frontmatter block defining metadata for an Istio documentation page about ingress traffic control. Includes title, description, weight for ordering, and test parameter.

LANGUAGE: yaml
CODE:
---
title: Ingress
description: Controlling ingress traffic for an Istio service mesh.
weight: 70
test: table-of-contents
---

----------------------------------------

TITLE: Installing and Upgrading Istio Using istioctl Commands
DESCRIPTION: These snippets show how to use istioctl commands to install Istio, apply changes to the installation configuration, and upgrade to a new version of Istio. It also demonstrates how to pass individual settings using the --set flag.

LANGUAGE: bash
CODE:
$ istioctl manifest apply -f <your-istiocontrolplane-customresource>

LANGUAGE: bash
CODE:
$ istioctl x upgrade -f <your-istiocontrolplane-config-changes>

LANGUAGE: bash
CODE:
$ istioctl manifest apply --set telemetry.enabled=false

----------------------------------------

TITLE: Configuring Peer Authentication Policy in Istio
DESCRIPTION: This YAML snippet defines a PeerAuthentication policy that requires strict mutual TLS for workloads with the label 'app: reviews' in the 'foo' namespace.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: "example-peer-policy"
  namespace: "foo"
spec:
  selector:
    matchLabels:
      app: reviews
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Displaying Alpha Feature Warning in Istio Documentation
DESCRIPTION: This code snippet renders a warning message for an alpha feature in Istio documentation. It uses a custom shortcode to format the warning and includes a link to the feature lifecycle documentation.

LANGUAGE: markdown
CODE:
{{< warning >}}
This feature is targeted at developers / expert users and is considered
[Alpha](https://github.com/istio/community/blob/master/FEATURE-LIFECYCLE.md).
{{< /warning >}}

----------------------------------------

TITLE: Checking Kiali Login Token Configuration
DESCRIPTION: Command to check if the Kiali login token signing key is configured in the deployment.

LANGUAGE: bash
CODE:
kubectl get deploy kiali -n istio-system -o yaml | grep LOGIN_TOKEN_SIGNING_KEY

----------------------------------------

TITLE: Configuring ServiceEntry for HTTPS
DESCRIPTION: Istio ServiceEntry configuration to correctly define an HTTPS service.

LANGUAGE: yaml
CODE:
spec:
  ports:
  - number: 443
    name: https
    protocol: HTTPS

----------------------------------------

TITLE: Retrieving Istio Galley ConfigMap Data
DESCRIPTION: kubectl command to retrieve the configuration data from the istio-galley-configuration ConfigMap in the istio-system namespace using jsonpath.

LANGUAGE: bash
CODE:
kubectl -n istio-system get configmap istio-galley-configuration -o jsonpath='{.data}'

----------------------------------------

TITLE: Installing Istio on cluster2 using IstioOperator
DESCRIPTION: Applies the IstioOperator configuration to cluster2 using istioctl.

LANGUAGE: bash
CODE:
istioctl install --context="${CTX_CLUSTER2}" -f cluster2.yaml

----------------------------------------

TITLE: Rolling Back to Previous Version
DESCRIPTION: Command to switch back to the previous 1.8.5 version in case of issues

LANGUAGE: bash
CODE:
istioctl x revision tag set prod --revision 1-8-5

----------------------------------------

TITLE: Upgrading Istio Base Chart with New Default Revision
DESCRIPTION: Upgrade the Istio base chart, setting the new 'canary' revision as the cluster-wide default.

LANGUAGE: bash
CODE:
$ helm upgrade istio-base istio/base --set defaultRevision=canary -n istio-system

----------------------------------------

TITLE: Deploying Curl Sample App with Manual Sidecar Injection in Kubernetes
DESCRIPTION: This command manually injects the Istio sidecar and deploys the curl sample application. It's used when automatic sidecar injection is not enabled in the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f <(istioctl kube-inject -f @samples/curl/curl.yaml@)

----------------------------------------

TITLE: Configuring TCP Probe Environment Variable in YAML
DESCRIPTION: Environment variable configuration to disable the new TCP probe behavior in Istio 1.12. This can be added to the Istiod deployment if temporary backwards compatibility is needed.

LANGUAGE: yaml
CODE:
REWRITE_TCP_PROBES=false

----------------------------------------

TITLE: Customizing Histogram Bucket Sizes with Pod Annotation in YAML
DESCRIPTION: Example of using a pod annotation to configure histogram bucket sizes. This replaces the EnvoyFilter method.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    "sidecar.istio.io/statsHistogramBuckets": '{"istiocustom":[1,5,50,500,5000,10000]}'

----------------------------------------

TITLE: Disabling PeerAuthentication for External Port
DESCRIPTION: Disables PeerAuthentication for the externally exposed httpbin port.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: disable-peer-auth-for-external-mtls-port
  namespace: test
spec:
  selector:
    matchLabels:
      app: httpbin
  mtls:
    mode: STRICT
  portLevelMtls:
    9080:
      mode: DISABLE

----------------------------------------

TITLE: Accessing Headless Service with Correct Host Header
DESCRIPTION: Command to access nginx headless service using the correct Host header to avoid 503 errors.

LANGUAGE: bash
CODE:
$ export SOURCE_POD=$(kubectl get pod -l app=curl -o jsonpath='{.items..metadata.name}')
$ kubectl exec -it $SOURCE_POD -c curl -- curl -H "Host: nginx.default" 10.1.1.171 -s -o /dev/null -w "%{http_code}"

----------------------------------------

TITLE: Multicluster Test Setup Command
DESCRIPTION: Commands to set up and run multicluster tests using KinD

LANGUAGE: bash
CODE:
mkdir artifacts # create a directory for kubeconfigs and logs
ARTIFACTS=$PWD/artifacts ./prow/integ-suite-kind.sh --topology MULTICLUSTER --skip-cleanup

----------------------------------------

TITLE: Creating and Configuring Sample Namespace
DESCRIPTION: Commands to create and configure the sample namespace in both clusters with Istio sidecar injection enabled.

LANGUAGE: bash
CODE:
$ kubectl create --context="${CTX_CLUSTER1}" namespace sample
$ kubectl create --context="${CTX_CLUSTER2}" namespace sample
$ kubectl label --context="${CTX_CLUSTER1}" namespace sample istio-injection=enabled
$ kubectl label --context="${CTX_CLUSTER2}" namespace sample istio-injection=enabled

----------------------------------------

TITLE: Setting Revision Tag for Default Installation
DESCRIPTION: Command to create a revision tag 'stable' for a default 1.8 installation without an associated revision

LANGUAGE: bash
CODE:
istioctl x revision tag set stable --revision default

----------------------------------------

TITLE: Retrieving Kubeconfig for Gardener-created Cluster
DESCRIPTION: This command fetches the kubeconfig for a newly created cluster in Gardener. It extracts the kubeconfig from a secret in the cluster's namespace and decodes it from base64.

LANGUAGE: bash
CODE:
$ kubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode > my-cluster.yaml

----------------------------------------

TITLE: Migrating Istio CRDs for Helm Upgrade
DESCRIPTION: This bash script iterates through Istio CRDs and updates their metadata to resolve ownership conflicts during Helm upgrades. It adds necessary labels and annotations for Helm management.

LANGUAGE: bash
CODE:
$ for crd in $(kubectl get crds -l chart=istio -o name && kubectl get crds -l app.kubernetes.io/part-of=istio -o name)
$ do
$    kubectl label "$crd" "app.kubernetes.io/managed-by=Helm"
$    kubectl annotate "$crd" "meta.helm.sh/release-name=istio-base" # replace with actual Helm release name, if different from the documentation default
$    kubectl annotate "$crd" "meta.helm.sh/release-namespace=istio-system" # replace with actual istio namespace
$ done

----------------------------------------

TITLE: Discovery Selector Configuration
DESCRIPTION: Configuration for meshConfig.discoverySelectors to control namespace processing for xDS updates.

LANGUAGE: yaml
CODE:
meshConfig:
  discoverySelectors:
    - matchLabels:
        istio-injection: enabled

----------------------------------------

TITLE: Vulnerable Authorization Policy Configuration in YAML
DESCRIPTION: Example of an Authorization Policy configuration that is vulnerable to CVE-2020-16844 due to incorrect handling of wildcard suffixes in principal fields.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
 name: foo
 namespace: foo
spec:
 action: DENY
 rules:
 - from:
   - source:
       principals:
       - */ns/ns1/sa/foo

----------------------------------------

TITLE: Uninstalling OpenTelemetry Collector
DESCRIPTION: This snippet demonstrates how to uninstall the OpenTelemetry Collector and remove the associated namespace.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/open-telemetry/otel.yaml@ -n observability
$ kubectl delete namespace observability

----------------------------------------

TITLE: Verifying Istio CNI Node Pods
DESCRIPTION: This command checks if the Istio CNI node pods are running in the kube-system namespace, which is important for Istio mesh pod traffic redirection.

LANGUAGE: bash
CODE:
$ kubectl -n kube-system get pod -l k8s-app=istio-cni-node

----------------------------------------

TITLE: Verifying Istio CNI Node Pods
DESCRIPTION: This command checks if the Istio CNI node pods are running in the kube-system namespace, which is important for Istio mesh pod traffic redirection.

LANGUAGE: bash
CODE:
$ kubectl -n kube-system get pod -l k8s-app=istio-cni-node

----------------------------------------

TITLE: Configuring Robots.txt for Istio Website
DESCRIPTION: This robots.txt file sets crawling rules for web robots visiting the Istio website. It allows access to most of the site, disallows access to the /v-0.1 directory, and specifies the location of the sitemap.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio Graduation Announcement
DESCRIPTION: YAML configuration block defining metadata for the announcement post including title, display period dates, and maximum number of impressions.

LANGUAGE: yaml
CODE:
---
title: Istio has graduated within the CNCF
period_start: 2023-07-14
period_end: 2023-07-19
max_impressions: 12
---

----------------------------------------

TITLE: Enforcing mTLS with PeerAuthentication
DESCRIPTION: YAML configuration for an Istio PeerAuthentication resource that enforces mutual TLS (mTLS) for service-to-service communication within the mesh.

LANGUAGE: yaml
CODE:
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "httpbin-egress"
  namespace: "httpbin"
spec:
  mtls:
    mode: STRICT

----------------------------------------

TITLE: Setting Environment Variables for Cluster Contexts in Bash
DESCRIPTION: Sets environment variables for the Kubernetes context names of two clusters. These variables will be used throughout the installation process to reference the clusters.

LANGUAGE: bash
CODE:
$ export CTX_CLUSTER1=<your cluster1 context>
$ export CTX_CLUSTER2=<your cluster2 context>

----------------------------------------

TITLE: Configuring Web Crawler Access via robots.txt
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers complete access to the site and points to the XML sitemap location at /v1.11/sitemap.xml.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.11/sitemap.xml

----------------------------------------

TITLE: Configuring YAML Front Matter for Istio 1.9.x Release Page
DESCRIPTION: This YAML snippet defines the front matter for a webpage listing Istio 1.9.x release announcements. It specifies the title, description, weight for sorting, and layout type for the page.

LANGUAGE: yaml
CODE:
---
title: 1.9.x Releases
description: Announcements for the 1.9 release and its associated patch releases.
weight: 20
list_by_publishdate: true
layout: release-grid
---

----------------------------------------

TITLE: VirtualService Status Configuration
DESCRIPTION: Example of a VirtualService YAML configuration with validation status showing an error for a bogus gateway.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1
kind: VirtualService
...
spec:
  gateways:
  - bogus-gateway
  hosts:
  - ratings
...
status:
  observedGeneration: "1"
  validationMessages:
  - documentationUrl: https://istio.io/v{{< istio_version >}}/docs/reference/config/analysis/ist0101/
    level: ERROR
    type:
      code: IST0101

----------------------------------------

TITLE: Configuring Service Protocols in Kubernetes YAML
DESCRIPTION: Example of a Kubernetes Service definition that specifies protocols using both appProtocol field and port naming convention. Shows configuration for HTTPS (port 3306) and HTTP (port 80) protocols.

LANGUAGE: yaml
CODE:
kind: Service
metadata:
  name: myservice
spec:
  ports:
  - port: 3306
    name: database
    appProtocol: https
  - port: 80
    name: http-web

----------------------------------------

TITLE: Enabling Istioctl Auto-completion in Zsh
DESCRIPTION: Adds the istioctl auto-completion script to the .zshrc file for Zsh users.

LANGUAGE: zsh
CODE:
source ~/_istioctl

----------------------------------------

TITLE: Listing AKS-supported regions in Azure CLI
DESCRIPTION: This command lists all Azure regions that support AKS (Azure Kubernetes Service) deployments.

LANGUAGE: bash
CODE:
$ az provider list --query "[?namespace=='Microsoft.ContainerService'].resourceTypes[] | [?resourceType=='managedClusters'].locations[]" -o tsv

----------------------------------------

TITLE: Sample Metric for PassthroughCluster TCP Traffic
DESCRIPTION: Example of the istio_tcp_connections_closed_total metric emitted when TCP traffic passes through the PassthroughCluster.

LANGUAGE: json
CODE:
{
  "status": "success",
  "data": {
    "resultType": "vector",
    "result": [
      {
        "metric": {
          "__name__": "istio_tcp_connections_closed_total",
          "connection_security_policy": "unknown",
          "destination_app": "unknown",
          "destination_ip": "52.22.188.80",
          "destination_principal": "unknown",
          "destination_service": "unknown",
          "destination_service_name": "PassthroughCluster",
          "destination_service_namespace": "unknown",
          "destination_version": "unknown",
          "destination_workload": "unknown",
          "destination_workload_namespace": "unknown",
          "instance": "100.96.2.183:42422",
          "job": "istio-mesh",
          "reporter": "source",
          "response_flags": "-",
          "source_app": "sleep",
          "source_principal": "unknown",
          "source_version": "unknown",
          "source_workload": "sleep",
          "source_workload_namespace": "default"
        },
        "value": [
          1567033761.879,
          "1"
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Deploying Sample Application with PSA Configuration
DESCRIPTION: Deploys the Bookinfo sample application using PSA-enabled configuration resources.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-psa.yaml@
service/details created
serviceaccount/bookinfo-details created
deployment.apps/details-v1 created
service/ratings created
serviceaccount/bookinfo-ratings created
deployment.apps/ratings-v1 created
service/reviews created
serviceaccount/bookinfo-reviews created
deployment.apps/reviews-v1 created
deployment.apps/reviews-v2 created
deployment.apps/reviews-v3 created
service/productpage created
serviceaccount/bookinfo-productpage created
deployment.apps/productpage-v1 created

----------------------------------------

TITLE: Deploying Sample Application with PSA Configuration
DESCRIPTION: Deploys the Bookinfo sample application using PSA-enabled configuration resources.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo-psa.yaml@
service/details created
serviceaccount/bookinfo-details created
deployment.apps/details-v1 created
service/ratings created
serviceaccount/bookinfo-ratings created
deployment.apps/ratings-v1 created
service/reviews created
serviceaccount/bookinfo-reviews created
deployment.apps/reviews-v1 created
deployment.apps/reviews-v2 created
deployment.apps/reviews-v3 created
service/productpage created
serviceaccount/bookinfo-productpage created
deployment.apps/productpage-v1 created

----------------------------------------

TITLE: Configuring Robots.txt for Istio Website
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers full access and specifies the location of the XML sitemap for version 1.10 of the documentation.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.10/sitemap.xml

----------------------------------------

TITLE: Adding Istiod Port Configuration in YAML
DESCRIPTION: YAML configuration snippet for adding port 15012 to the ingressGateway service ports for Istiod communication.

LANGUAGE: yaml
CODE:
    - port: 15012
        targetPort: 15012
        name: tcp-istiod

----------------------------------------

TITLE: Configuring Istio Operator to Opt-out of Fragment CVE Fix
DESCRIPTION: YAML configuration to disable the URI fragment stripping behavior introduced to fix CVE-2021-39156. This configuration is considered unsafe and should only be used after careful security policy review.

LANGUAGE: yaml
CODE:
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: opt-out-fragment-cve-fix
  namespace: istio-system
spec:
  meshConfig:
    defaultConfig:
      proxyMetadata:
        HTTP_STRIP_FRAGMENT_FROM_PATH_UNSAFE_IF_DISABLED: "false"

----------------------------------------

TITLE: Opening Zipkin Dashboard for Istio Tracing
DESCRIPTION: Uses istioctl to open the Zipkin dashboard for viewing Istio distributed tracing.

LANGUAGE: bash
CODE:
$ istioctl dashboard zipkin

----------------------------------------

TITLE: Defining YAML Frontmatter for Istio Security Documentation
DESCRIPTION: YAML frontmatter metadata block defining the title, description, weight and test parameters for the Istio security documentation page.

LANGUAGE: yaml
CODE:
---
title: Security
description: Describes how to configure Istio's security features.
weight: 40
test: n/a
---

----------------------------------------

TITLE: Checking for Pod-Attached Security Groups in EKS
DESCRIPTION: This bash command checks for any pod-attached security groups in an EKS cluster.

LANGUAGE: bash
CODE:
$ kubectl get securitygrouppolicies.vpcresources.k8s.aws

----------------------------------------

TITLE: Feature Comparison Table in Markdown
DESCRIPTION: A markdown table comparing egress traffic control features between Istio, Kubernetes Network Policies, and Legacy Egress Proxy/Firewall solutions.

LANGUAGE: markdown
CODE:
| | Istio Egress Traffic Control | Kubernetes Network Policies | Legacy Egress Proxy or Firewall |
| --- | --- | --- | ---|
| DNS-aware | {{< checkmark_icon >}} | {{< cancel_icon >}} | {{< checkmark_icon >}} |
| Kubernetes-aware | {{< checkmark_icon >}} | {{< checkmark_icon >}} | {{< cancel_icon >}} |
| Transparent | {{< checkmark_icon >}} | {{< checkmark_icon >}} | {{< cancel_icon >}} |
| Istio-aware | {{< checkmark_icon >}} | {{< cancel_icon >}} | {{< cancel_icon >}} |

----------------------------------------

TITLE: Configuring Istio Release Page Metadata in YAML
DESCRIPTION: YAML frontmatter configuration block defining metadata for an Istio release documentation page. Specifies the page title, description, navigation weight, aliases, keywords and test parameters.

LANGUAGE: yaml
CODE:
title: Releases
description: Information relating to Istio releases.
weight: 40
aliases:
keywords: [releases]
test: n/a

----------------------------------------

TITLE: Helm Installation Flags for Legacy Mixer Support
DESCRIPTION: Helm flags required to maintain support for removed Mixer configuration schemas during upgrade. These flags enable template CRDs and adapter CRDs for backward compatibility.

LANGUAGE: yaml
CODE:
--set mixer.templates.useTemplateCRDs=true --set mixer.adapters.useAdapterCRDs=true

----------------------------------------

TITLE: Setting Trace Sampling Rate with Telemetry API
DESCRIPTION: Kubernetes configuration to set the tracing sampling rate to 100% using Istio's Telemetry API.

LANGUAGE: yaml
CODE:
apiVersion: telemetry.istio.io/v1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  tracing:
  - randomSamplingPercentage: 100.00

----------------------------------------

TITLE: Monitoring Memory Usage in Minikube VM
DESCRIPTION: Command to monitor memory usage within the minikube virtual machine using the top command.

LANGUAGE: bash
CODE:
$ top

----------------------------------------

TITLE: Listing Istio Revisions
DESCRIPTION: Lists existing Istio revisions in the cluster for revision-based upgrades.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfigurations -l 'istio.io/rev,!istio.io/tag' -L istio\.io/rev
$ # Store your revision and new revision in variables:
$ export REVISION=istio-1-22-1
$ export OLD_REVISION=istio-1-21-2

----------------------------------------

TITLE: Installing Istio CNI with minikube Platform Profile using Helm
DESCRIPTION: This bash command installs Istio CNI using Helm with the minikube platform profile.

LANGUAGE: bash
CODE:
$ helm install istio-cni istio/cni -n istio-system --set profile=ambient --set global.platform=minikube --wait

----------------------------------------

TITLE: Importing Istio client-go Library
DESCRIPTION: Example showing how to switch from Aspen Mesh client to the official Istio client-go library by updating the import statement.

LANGUAGE: go
CODE:
import (
  ...
  - versionedclient "github.com/aspenmesh/istio-client-go/pkg/client/clientset/versioned"
  + versionedclient "istio.io/client-go/pkg/clientset/versioned"
)

----------------------------------------

TITLE: Error Message Display in Plain Text
DESCRIPTION: Example of the IST0164 warning message shown when an IP address is used instead of a hostname for the external control plane webhook configuration.

LANGUAGE: plain
CODE:
Info [IST0164] (MutatingWebhookConfiguration istio-sidecar-injector-external-istiod testing.yml:28) The address (https://999.999.999.999:5100/inject/cluster/your-cluster-name/net/network1) that was provided for the webhook (rev.namespace.sidecar-injector.istio.io) to reach the ingress gateway on the external control plane cluster is an IP address. This is not recommended for a production environment.

----------------------------------------

TITLE: Markdown Release Notes Structure
DESCRIPTION: Markdown frontmatter and structure defining the release note metadata and content organization for Istio 1.20.1 patch release.

LANGUAGE: markdown
CODE:
---
title: Announcing Istio 1.20.1
linktitle: 1.20.1
subtitle: Patch Release
description: Istio 1.20.1 patch release.
publishdate: 2023-12-12
release: 1.20.1
---

----------------------------------------

TITLE: Configuring YAML Frontmatter for Istio Search Results Page
DESCRIPTION: This YAML frontmatter configures the search results page for Istio documentation. It sets the title, disables the sidebar, and skips the table of contents generation.

LANGUAGE: yaml
CODE:
---
title: Search Results
sidebar_none: true
skip_toc: true
---

----------------------------------------

TITLE: Istio Galley Validation Webhook Configuration
DESCRIPTION: Kubernetes ValidatingWebhookConfiguration YAML for Istio Galley defining validation rules and webhook configurations for the Pilot component.

LANGUAGE: yaml
CODE:
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-galley
  namespace: istio-system
  labels:
    app: istio-galley
    chart: galley-1.0.0
    release: istio
    heritage: Tiller
webhooks:
  - name: pilot.validation.istio.io
    clientConfig:
      service:
        name: istio-galley
        namespace: istio-system
        path: "/admitpilot"
      caBundle: ""
    rules:
      - operations:
      (... snip ...)

----------------------------------------

TITLE: Formatting Bash Commands with Indentation in Markdown
DESCRIPTION: This snippet shows how to format a bash command block within a markdown list item, demonstrating various levels of indentation for command structure.

LANGUAGE: bash
CODE:
$ NoIndent:
    FourIndent:
        - EightIndent
    FourIndentAgain:
        - EightIndentAgain

----------------------------------------

TITLE: Installing SPIRE CRDs with Helm
DESCRIPTION: Installs the SPIRE Custom Resource Definitions using Helm chart.

LANGUAGE: bash
CODE:
$ helm upgrade --install -n spire-server spire-crds spire-crds --repo https://spiffe.github.io/helm-charts-hardened/ --create-namespace

----------------------------------------

TITLE: Testing Gateway-Routed Traffic
DESCRIPTION: Commands to test traffic routing through Istio Gateway with expected 50/50 split between service versions

LANGUAGE: bash
CODE:
$ for i in `seq 4`; do \
  kubectl exec -it $SLEEP_POD curl http://istio-ingressgateway.istio-system/reviews/0 | \
  jq '.reviews|.[]|.rating?'; \
  done

----------------------------------------

TITLE: Debugging Distroless Containers with Ephemeral Containers
DESCRIPTION: Example of using kubectl debug to attach a temporary container with debugging tools to a pod running a distroless image. This allows for ad-hoc debugging of Istio proxies.

LANGUAGE: shell
CODE:
$ kubectl debug --image istio/base --target istio-proxy -it app-65c6749c9d-t549t
Defaulting debug container name to debugger-cdftc.
If you don't see a command prompt, try pressing enter.
root@app-65c6749c9d-t549t:/# curl example.com

----------------------------------------

TITLE: Defining Istio 1.1.x Release Page Metadata in YAML
DESCRIPTION: This YAML frontmatter defines metadata for a webpage listing Istio 1.1.x release announcements. It specifies the page title, description, weight for ordering, and sets options for listing by publish date and using a custom release grid layout.

LANGUAGE: yaml
CODE:
---
title: 1.1.x Releases
description: Announcements for the 1.1 release and its associated patch releases.
weight: 28
list_by_publishdate: true
layout: release-grid
---

----------------------------------------

TITLE: Creating Kubernetes ConfigMap for NGINX Configuration
DESCRIPTION: Creates a Kubernetes ConfigMap to hold the NGINX server configuration.

LANGUAGE: bash
CODE:
$ kubectl create configmap nginx-configmap --from-file=nginx.conf=./nginx.conf

----------------------------------------

TITLE: Defining Istio Ingress Gateway for External Services
DESCRIPTION: Creates an Istio Gateway resource to configure ingress for external HTTP and HTTPS services. It sets up ports 80 and 443, with TLS passthrough for the HTTPS port.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: proxy
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - httpbin.org
  - port:
      number: 443
      name: tls
      protocol: TLS
    tls:
      mode: PASSTHROUGH
    hosts:
    - edition.cnn.com
EOF

----------------------------------------

TITLE: Configuring Prometheus Annotations in YAML
DESCRIPTION: A YAML code snippet showing how to configure Prometheus annotations for Istio pods. The actual code is not provided, but referenced in the document.

LANGUAGE: yaml
CODE:
# Actual code not provided in the original text

----------------------------------------

TITLE: Creating ClusterSPIFFEID for Istio Sidecars
DESCRIPTION: Creates a ClusterSPIFFEID resource to auto-register Istio sidecar pods with SPIRE.

LANGUAGE: bash
CODE:
$ kubectl apply -f - <<EOF
apiVersion: spire.spiffe.io/v1alpha1
kind: ClusterSPIFFEID
metadata:
  name: istio-sidecar-reg
spec:
  spiffeIDTemplate: "spiffe://{{ .TrustDomain }}/ns/{{ .PodMeta.Namespace }}/sa/{{ .PodSpec.ServiceAccountName }}"
  podSelector:
    matchLabels:
      spiffe.io/spire-managed-identity: "true"
  workloadSelectorTemplates:
    - "k8s:ns:default"
EOF

----------------------------------------

TITLE: Configuring Mixer Adapters with Handlers in Go
DESCRIPTION: Handlers are configuration resources that represent fully configured adapters ready for use. They specify adapter-specific configuration data like URLs, credentials, and caching options using protobuf messages.

LANGUAGE: go
CODE:
// Example handler configuration (pseudo-code)
type Handler struct {
    AdapterConfig *proto.Message
    // Other fields
}

----------------------------------------

TITLE: Installing Istio with Distroless Images
DESCRIPTION: Command to install Istio using distroless images via istioctl. This reduces the attack surface and improves startup time.

LANGUAGE: bash
CODE:
$ istioctl install --set values.global.variant=distroless

----------------------------------------

TITLE: Configuring AuthorizationPolicy with Host Matching
DESCRIPTION: YAML configuration demonstrating how to properly configure an AuthorizationPolicy to match hosts with and without ports, using prefix matching to handle both cases securely.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: httpbin
  namespace: foo
spec:
  action: DENY
  rules:
  - from:
    - source:
        namespaces: ["dev"]
    to:
    - operation:
        hosts: ["httpbin.com", "httpbin.com:*"]

----------------------------------------

TITLE: Setting Headless Flag in Hugo YAML Configuration
DESCRIPTION: YAML front matter configuration that marks a directory tree as headless in Hugo, preventing normal page rendering of contained files.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: Defining External Endpoints with ServiceEntry in Istio
DESCRIPTION: Create a ServiceEntry resource to define external endpoints for a service, including locality information for each endpoint.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-svc-dns
spec:
  hosts:
  - mydb.com
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
  endpoints:
  - address: dynamodb.us-east-1.amazonaws.com
    locality: us-east1
    ports:
      http: 80
  - address: dynamodb.us-west-1.amazonaws.com
    locality: us-west
    ports:
      http: 80

----------------------------------------

TITLE: Configuring Native Sidecar Injection with Annotation
DESCRIPTION: Example of using the new annotation to control native sidecar injection on a per-pod basis.

LANGUAGE: yaml
CODE:
metadata:
  annotations:
    sidecar.istio.io/nativeSidecar: "true"

----------------------------------------

TITLE: Configuring Istio Blog Page Properties in YAML
DESCRIPTION: YAML frontmatter configuration that sets up the blog section properties including title, description, sidebar display, URL aliases and output formats. This configuration controls how the blog section appears and functions within the Istio documentation site.

LANGUAGE: yaml
CODE:
title: Blog
description: Read articles from contributors and users on all things Istio.
linktitle: Blog
sidebar_multicard: true
decoration: pill
aliases:
    - /blog/posts/index.html
outputs:
    - html
    - rss

----------------------------------------

TITLE: Setting Kubernetes Configuration Environment Variable
DESCRIPTION: Sets the KUBECONFIG environment variable to point to the Kubernetes configuration file obtained from tutorial instructors or created previously.

LANGUAGE: bash
CODE:
$ export KUBECONFIG=<the file you received or created in the previous module>

----------------------------------------

TITLE: Creating Tabbed Content
DESCRIPTION: Demonstrates how to create tabbed content sections with category names and values for persistent tab selection.

LANGUAGE: markdown
CODE:
{{</* tabset category-name="platform" */>}}

{{</* tab name="One" category-value="one" */>}}
ONE
{{</* /tab */>}}

{{</* tab name="Two" category-value="two" */>}}
TWO
{{</* /tab */>}}

{{</* tab name="Three" category-value="three" */>}}
THREE
{{</* /tab */>}}

{{</* /tabset */>}}

----------------------------------------

TITLE: Using Boilerplate with Nested Text Block in Hugo
DESCRIPTION: This example demonstrates how to include a boilerplate that contains a shortcode with a nested text block in Hugo-based documentation.

LANGUAGE: hugo
CODE:
{{< boilerplate "test-3" >}}

----------------------------------------

TITLE: Configuring Robot Access Rules for Istio.io
DESCRIPTION: Sets crawling permissions for web robots, blocking access to legacy v-0.1 content while allowing all other paths. Also specifies the XML sitemap location.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Configuring Failover with DestinationRule in Istio
DESCRIPTION: Create a DestinationRule to set outlier detection parameters for automatic failover between endpoints.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mydynamodb
spec:
  host: mydb.com
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 15s
      baseEjectionTime: 1m

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio Support Page
DESCRIPTION: YAML frontmatter block that configures the metadata for an Istio documentation page about support announcements. Defines the page title, description, weight for ordering, and enables listing by publish date.

LANGUAGE: yaml
CODE:
---
title: Support Announcements
description: Support window announcements.
weight: 15
list_by_publishdate: true
data_category: Support Announcements
---

----------------------------------------

TITLE: Adding CRL to Istio Credentials
DESCRIPTION: Command for adding a Certificate Revocation List (CRL) file to Istio credentials using the ca.crl key. Uses the --from-file argument to specify the path to the CRL PEM file.

LANGUAGE: bash
CODE:
--from-file=ca.crl=/some/path/to/your-crl.pem

----------------------------------------

TITLE: Installing Istio Addons
DESCRIPTION: Installs Kiali and Prometheus addons for Istio monitoring and visualization.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/addons@

----------------------------------------

TITLE: YAML Front Matter Configuration for Istio Docs
DESCRIPTION: YAML front matter block defining metadata for an Istio documentation page about diagnostic tools. Includes page title, description, navigation weight, keywords, and URL aliases.

LANGUAGE: yaml
CODE:
title: Diagnostic Tools
description: Tools and techniques to help troubleshoot an Istio mesh.
weight: 50
keywords: [ops]
aliases:
  - /docs/ops/troubleshooting/proxy-cmd
test: n/a

----------------------------------------

TITLE: Hugo Tabset with Markdown Lists
DESCRIPTION: A comprehensive example showing how to structure content in tabs using Hugo shortcodes. Each tab demonstrates different formatting capabilities including markdown lists, warning blocks, code blocks, and nested content.

LANGUAGE: markdown
CODE:
{{< tabset category-name="test" >}}

{{< tab name="One" category-value="one" >}}
1. One paragraph in a list in a tab
{{< /tab >}}

{{< tab name="Two" category-value="two" >}}
1. Three

1. separate

1. bullets in a list in a tab

    This last bullet with two paragraphs
{{< /tab >}}

{{< tab name="Three" category-value="three" >}}
1. Simple text in a list in a tab

    A paragraph

    {{< warning >}}
    Warning in a list in a tab
    {{< /warning >}}

    And another

1. Second bullet

1. Third bullet
{{< /tab >}}

----------------------------------------

TITLE: Defining Web Crawler Access Rules in robots.txt
DESCRIPTION: Standard robots.txt configuration that allows all user agents to access the site content and points to the XML sitemap location.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.14/sitemap.xml

----------------------------------------

TITLE: VirtualService Wildcard Host Configuration
DESCRIPTION: Fix for a routing configuration issue where overlapping wildcard hosts in VirtualService would create incorrect routing rules when wildcard services were selected in ServiceEntry.



----------------------------------------

TITLE: Bash Snippet Function Example
DESCRIPTION: Example of calling a generated test snippet function for traffic configuration

LANGUAGE: sh
CODE:
snip_config_50_v3 # Step 3: switch 50% traffic to v3

----------------------------------------

TITLE: Advanced Kyverno Authorization Policy
DESCRIPTION: Complex authorization policy demonstrating header manipulation, response modification, and metadata injection.

LANGUAGE: yaml
CODE:
apiVersion: envoy.kyverno.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  name: demo-policy.example.com
spec:
  variables:
  - name: force_authorized
    expression: object.attributes.request.http.headers[?"x-force-authorized"].orValue("") in ["enabled", "true"]
  - name: force_unauthenticated
    expression: object.attributes.request.http.headers[?"x-force-unauthenticated"].orValue("") in ["enabled", "true"]
  - name: metadata
    expression: '{"my-new-metadata": "my-new-value"}'
  authorizations:
    - expression: >
      variables.force_unauthenticated
        ? envoy
            .Denied(401)
            .WithBody("Authentication Failed")
            .Response()
        : null

----------------------------------------

TITLE: Deploying Httpbin with Automatic Sidecar Injection in Istio
DESCRIPTION: This command deploys the httpbin service using kubectl when automatic sidecar injection is enabled in the Istio service mesh.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/httpbin/httpbin.yaml@

----------------------------------------

TITLE: Quote Callout in Istio Documentation
DESCRIPTION: Presents the usage of quote callouts in Istio documentation. Shows examples with single paragraph, multiple paragraphs, and nested text blocks.

LANGUAGE: markdown
CODE:
{{< quote >}}
This is a quote
{{< /quote >}}

{{< quote >}}
This is a quote

with two paragraphs
{{< /quote >}}

{{< quote >}}
This is a quote

with two paragraphs

{{< text plain >}}
A nested text block
{{< /text >}}

{{< /quote >}}

----------------------------------------

TITLE: Configuring Web Crawler Rules and Sitemap for Istio Documentation
DESCRIPTION: Standard robots.txt configuration that allows all user agents complete access and specifies the location of the XML sitemap. The sitemap is located at /v1.22/sitemap.xml.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.22//sitemap.xml

----------------------------------------

TITLE: Configuring Gateway HorizontalPodAutoscaler in Helm
DESCRIPTION: Enhancement that adds configurable scaling behavior for Gateway HorizontalPodAutoscaler in the Istio Helm chart. This feature allows for more granular control over how gateway pods scale in response to metrics.



----------------------------------------

TITLE: Creating Istio Setup Configuration for Documentation Tests in Go
DESCRIPTION: This code snippet provides a template for creating a new Istio setup configuration for documentation tests. It includes the necessary imports, setup specifications, and test functions. The template requires modifications to the setupSpec variable and the setupConfig function to specify the configuration requirements.

LANGUAGE: go
CODE:
// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package setupconfig

import (
	"os"
	"testing"

	"istio.io/istio.io/pkg/test/istioio"
	"istio.io/istio/pkg/test/framework"
	"istio.io/istio/pkg/test/framework/components/istio"
)

var (
	inst      istio.Instance
	setupSpec = "profile=demo" // this is to appear in test scripts following '# @setup'
)

func TestMain(m *testing.M) {
	if !istioio.NeedSetup(setupSpec) {
		os.Exit(0)
	}

	framework.
		NewSuite(m).
		Setup(istio.Setup(&inst, setupConfig)).
		Run()
}

func TestDocs(t *testing.T) {
	istioio.TestDocs(t, setupSpec)
}

func setupConfig(cfg *istio.Config) {
	// specify what your config requires
}

----------------------------------------

TITLE: Ztunnel Workload Configuration Output
DESCRIPTION: Example of workload configuration output from Ztunnel's config dump showing pod and policy details.

LANGUAGE: plaintext
CODE:
{
  "workloads": {
    "10.244.2.8": {
      "workloadIp": "10.244.2.8",
      "protocol": "TCP",
      "name": "helloworld-v1-cross-node-55446d46d8-ntdbk",
      "namespace": "default",
      "serviceAccount": "helloworld",
      "workloadName": "helloworld-v1-cross-node",
      "workloadType": "deployment",
      "canonicalName": "helloworld",
      "canonicalRevision": "v1",
      "node": "ambient-worker2",
      "authorizationPolicies": [],
      "status": "Healthy"
    }
  }
}

----------------------------------------

TITLE: Enabling Alpha Gateway API in Istio
DESCRIPTION: Command to install Istio with alpha Gateway API support enabled through environment variable configuration.

LANGUAGE: bash
CODE:
istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=minimal -y

----------------------------------------

TITLE: Configuring Public Access Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy that allows public access to GET and POST methods.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: httpbin
 namespace: foo
spec:
 selector:
   matchLabels:
     app: httpbin
     version: v1
 action: ALLOW
 rules:
 - to:
   - operation:
       methods: ["GET", "POST"]

----------------------------------------

TITLE: Configuring Web Crawler Access in robots.txt for Istio Documentation
DESCRIPTION: This robots.txt file sets up rules for web crawlers accessing the Istio documentation site. It allows all user agents to access the site and specifies the location of the sitemap for improved indexing.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.24//sitemap.xml

----------------------------------------

TITLE: Checking Gateway API Automated Deployment Usage in Bash
DESCRIPTION: Command to identify if a system is using Gateway API Automated Deployment by querying Kubernetes gateways and filtering for specific gateway configurations. The command looks for gateways with the istio gateway class name and no specified addresses.

LANGUAGE: bash
CODE:
kubectl get gateways.gateway.networking.k8s.io -ojson | jq -r '.items[] | select(.spec.gatewayClassName == "istio") | select((.spec.addresses | length) == 0) | "Found managed gateway: " + .metadata.namespace + "/" + .metadata.name'

----------------------------------------

TITLE: Configuring Robots.txt for Istio Website
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers full access to the site and points to the XML sitemap location. The configuration uses default settings with no crawling restrictions.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.2/sitemap.xml

----------------------------------------

TITLE: Gathering Kubernetes Resource Information
DESCRIPTION: Command to export all pods, services, deployments, and endpoints information across namespaces.

LANGUAGE: bash
CODE:
kubectl get pods,services,deployments,endpoints --all-namespaces -o yaml > k8s_resources.yaml

----------------------------------------

TITLE: Defining YAML Front Matter for Istio 2020 Blog Posts
DESCRIPTION: This YAML front matter defines metadata for a collection of Istio blog posts from 2020. It specifies the title, description, weight for sorting, and indicates that posts should be listed by publish date.

LANGUAGE: yaml
CODE:
---
title: 2020 Posts
description: Blog posts for 2020.
weight: 8
list_by_publishdate: true
---

----------------------------------------

TITLE: Setting SOURCE_POD Environment Variable in Bash
DESCRIPTION: This command sets the SOURCE_POD environment variable to the name of the deployed curl pod. It uses kubectl to retrieve the pod name and stores it for later use.

LANGUAGE: bash
CODE:
$ export SOURCE_POD=$(kubectl get pod -l app=curl -o jsonpath={.items..metadata.name})

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining metadata for the announcement post, including publication period and maximum impression count.

LANGUAGE: yaml
CODE:
---
title: Istio has applied to join the CNCF
period_start: 2022-04-24
period_end: 2022-04-29
max_impressions: 12
---

----------------------------------------

TITLE: Filtering Istio Telemetry Logs
DESCRIPTION: This snippet demonstrates how to retrieve and filter Istio telemetry logs using kubectl and grep commands. It focuses on specific log entries and formats the output as JSON.

LANGUAGE: bash
CODE:
$ kubectl logs -n istio-system -l istio-mixer-type=telemetry -c mixer | grep \"instance\":\"newlog.logentry.istio-system\" | grep -v '"destination":"telemetry"' | grep -v '"destination":"pilot"' | grep -v '"destination":"policy"' | grep -v '"destination":"unknown"'
{"level":"warn","time":"2018-09-15T20:46:36.009801Z","instance":"newlog.logentry.istio-system","destination":"details","latency":"13.601485ms","responseCode":200,"responseSize":178,"source":"productpage","user":"unknown"}
{"level":"warn","time":"2018-09-15T20:46:36.026993Z","instance":"newlog.logentry.istio-system","destination":"reviews","latency":"919.482857ms","responseCode":200,"responseSize":295,"source":"productpage","user":"unknown"}
{"level":"warn","time":"2018-09-15T20:46:35.982761Z","instance":"newlog.logentry.istio-system","destination":"productpage","latency":"968.030256ms","responseCode":200,"responseSize":4415,"source":"istio-ingressgateway","user":"unknown"}

----------------------------------------

TITLE: Removing ValidatingWebhookConfiguration in Kubernetes
DESCRIPTION: Command to delete the ValidatingWebhookConfiguration Custom Resource for Istio Galley in the istio-system namespace.

LANGUAGE: bash
CODE:
$ kubectl delete ValidatingWebhookConfiguration istio-galley -n istio-system

----------------------------------------

TITLE: Configuring robots.txt for Istio Documentation Website
DESCRIPTION: This snippet defines the robots.txt configuration for the Istio documentation website. It allows all user agents to crawl the site and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.2/sitemap.xml

----------------------------------------

TITLE: Enabling Istioctl Auto-completion in Bash
DESCRIPTION: Adds the istioctl auto-completion script to the .bashrc file for Bash users.

LANGUAGE: bash
CODE:
$ source ~/istioctl.bash

----------------------------------------

TITLE: YAML Front Matter Configuration for 2019 Blog Posts
DESCRIPTION: YAML front matter block that configures how 2019 blog posts are displayed and organized in the Istio documentation site. Sets the page title, description, navigation weight, and specifies that posts should be listed by publication date.

LANGUAGE: yaml
CODE:
title: 2019 Posts
description: Blog posts for 2019.
weight: 9
list_by_publishdate: true

----------------------------------------

TITLE: Displaying Full Istio Version in Documentation
DESCRIPTION: This snippet is a placeholder for displaying the full version of Istio. It uses a custom shortcode to dynamically insert the complete version number in documentation.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_full_version >}}
{{< istio_full_version >}}
{{< /text >}}

----------------------------------------

TITLE: Local Test Execution Command
DESCRIPTION: Command to run documentation tests locally using KinD cluster

LANGUAGE: bash
CODE:
TEST_ENV=kind ADDITIONAL_CONTAINER_OPTIONS="--network host" make doc.test

----------------------------------------

TITLE: Defining a WasmPlugin Resource in YAML
DESCRIPTION: Example of using the new WasmPlugin custom resource definition to add a custom Wasm module to Istio proxies. Specifies the target workloads, injection phase, configuration, and module location.

LANGUAGE: yaml
CODE:
apiVersion: extensions.istio.io/v1alpha1
kind: WasmPlugin
metadata:
  name: your-filter
spec:
  selector:
    matchLabels:
      app: server
  phase: AUTHN
  priority: 10
  pluginConfig:
    someSetting: true
    someOtherSetting: false
    youNameIt:
    - first
    - second
  url: docker.io/your-org/your-filter:1.0.0

----------------------------------------

TITLE: Updating Makefile for Build Types in Markdown
DESCRIPTION: This snippet demonstrates how to configure the Makefile for different build types (public or private) by commenting or uncommenting HUB and TAG variables.

LANGUAGE: markdown
CODE:
```
# If one needs to test before a docker.io build is available (using a public test build),
# the export HUB and TAG can be commented out, and the initial HUB un-commented
HUB ?= gcr.io/istio-testing
# export HUB ?= docker.io/istio
# export TAG ?= 1.7.3
```

----------------------------------------

TITLE: Defining Apache 2.0 License Header for Istio Project
DESCRIPTION: This code snippet represents the standard license header used in Istio project files. It includes the copyright notice for Istio Authors and the terms of the Apache License 2.0, which governs the use and distribution of the software.

LANGUAGE: plaintext
CODE:
// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

----------------------------------------

TITLE: Installing Zsh Completions on macOS with Homebrew
DESCRIPTION: Installs zsh-completions package using Homebrew and configures it in the .zshrc file.

LANGUAGE: bash
CODE:
$ brew install zsh-completions

LANGUAGE: bash
CODE:
$ rm -f ~/.zcompdump; compinit

LANGUAGE: bash
CODE:
$ chmod -R go-w "$(brew --prefix)/share"

----------------------------------------

TITLE: Setting Random Kiali Signing Key
DESCRIPTION: Command to update the Kiali ConfigMap with a random signing key and restart Kiali pods for security mitigation.

LANGUAGE: bash
CODE:
kubectl get cm kiali -n istio-system -o yaml | sed "s/server:/login_token:\\n \
signing_key: $(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 20 | head -n 1)\\nserver:/" \
| kubectl apply -f - ; kubectl delete pod -l app=kiali -n istio-system

----------------------------------------

TITLE: Inserting Previous Istio Version in Plain Text
DESCRIPTION: This snippet is a placeholder for inserting the previous version of Istio. It uses a custom shortcode to dynamically populate the version number.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_previous_version >}}
{{< istio_previous_version >}}
{{< /text >}}

----------------------------------------

TITLE: Querying Node Region in Kubernetes
DESCRIPTION: Use kubectl to determine the region of the Kubernetes nodes where the workload is running.

LANGUAGE: bash
CODE:
$ kubectl describe node | grep failure-domain.beta.kubernetes.io/region
                    failure-domain.beta.kubernetes.io/region=us-east1
                    failure-domain.beta.kubernetes.io/region=us-east1

----------------------------------------

TITLE: Configuring TCP Protocol Authorization Policy in Istio
DESCRIPTION: This YAML snippet defines an AuthorizationPolicy for a MongoDB service allowing access only from the 'bookinfo-ratings-v2' service.

LANGUAGE: yaml
CODE:
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: mongodb-policy
  namespace: default
spec:
 selector:
   matchLabels:
     app: mongodb
 action: ALLOW
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/default/sa/bookinfo-ratings-v2"]
   to:
   - operation:
       ports: ["27017"]

----------------------------------------

TITLE: Configuring VirtualService for HTTP Routing
DESCRIPTION: Corrected VirtualService configuration to use HTTP routing instead of TLS.

LANGUAGE: yaml
CODE:
spec:
  ...
  http:
  - match:
    - headers:
        ":authority":
          regex: "*.example.com"

----------------------------------------

TITLE: Configuring VirtualService for HTTP Routing
DESCRIPTION: Corrected VirtualService configuration to use HTTP routing instead of TLS.

LANGUAGE: yaml
CODE:
spec:
  ...
  http:
  - match:
    - headers:
        ":authority":
          regex: "*.example.com"

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block defining metadata for the Istio 1.2 release notes documentation page, including title, release version, publication date and aliases.

LANGUAGE: yaml
CODE:
title: Istio 1.2 Change Notes
release: 1.2
subtitle: Minor Release
linktitle: 1.2 Change Notes
description: Istio 1.2 release notes.
publishdate: 2019-06-18
weight: 10
aliases:
    - /about/notes/1.2

----------------------------------------

TITLE: Creating Tabbed Content with Hugo Shortcodes in Markdown
DESCRIPTION: This snippet showcases the structure of creating tabbed content using Hugo shortcodes. It demonstrates various tab contents including plain text, warnings, text blocks, and markdown formatting.

LANGUAGE: markdown
CODE:
{{< tabset category-name="test" >}}

{{< tab name="One" category-value="one" >}}
One paragraph
{{< /tab >}}

{{< tab name="Two" category-value="two" >}}
Three

separate

paragraphs
{{< /tab >}}

{{< tab name="Three" category-value="three" >}}
{{< warning >}}
Warning in a tab
{{< /warning >}}
{{< /tab >}}

{{< tab name="Four" category-value="four" >}}
Simple text

In two paragraphs

{{< warning >}}
Warning in a tab
{{< /warning >}}
{{< /tab >}}

{{< tab name="Five" category-value="five" >}}
Simple text

{{< text plain >}}
Text block in a tab
{{< /text >}}

{{< /tab >}}

{{< tab name="Six" category-value="six" >}}
Simple text with _markdown_ in a tab

{{< warning >}}
Warning with _markdown_ in a tab

{{< text plain >}}
Text block in a warning in a tab
{{< /text >}}

And more _markdown_
{{< /warning >}}

{{< /tab >}}

{{< tab name="Seven" category-value="seven" >}}
Simple text with _markdown_ in a tab

{{< text plain >}}
NoIndent:
    FourIndent:
        - EightIndent
    FourIndentAgain:
        - EightIndentAgain
{{< /text >}}

And more _markdown_
{{< /tab >}}

{{< /tabset >}}

----------------------------------------

TITLE: Defining Previous Istio Version
DESCRIPTION: This snippet defines a placeholder for the previous version of Istio. It uses a custom text block with a specific syntax and ID.

LANGUAGE: plain
CODE:
{{< text syntax=plain snip_id=istio_previous_version >}}
{{< istio_previous_version >}}
{{< /text >}}

----------------------------------------

TITLE: Implementing Tabbed Interface with Hugo Shortcodes
DESCRIPTION: Demonstrates a tabbed interface implementation using Hugo shortcodes with seven different tabs showing various content patterns. Each tab showcases different formatting capabilities including plain text, warnings, markdown, and text blocks.

LANGUAGE: markdown
CODE:
{{< tabset category-name="test" >}}

{{< tab name="One" category-value="one" >}}
One paragraph
{{< /tab >}}

{{< tab name="Two" category-value="two" >}}
Three

separate

paragraphs
{{< /tab >}}

{{< tab name="Three" category-value="three" >}}
{{< warning >}}
Warning in a tab
{{< /warning >}}
{{< /tab >}}

{{< tab name="Four" category-value="four" >}}
Simple text

In two paragraphs

{{< warning >}}
Warning in a tab
{{< /warning >}}
{{< /tab >}}

{{< tab name="Five" category-value="five" >}}
Simple text

{{< text plain >}}
Text block in a tab
{{< /text >}}

{{< /tab >}}

{{< tab name="Six" category-value="six" >}}
Simple text with _markdown_ in a tab

{{< warning >}}
Warning with _markdown_ in a tab

{{< text plain >}}
Text block in a warning in a tab
{{< /text >}}

And more _markdown_
{{< /warning >}}

{{< /tab >}}

{{< tab name="Seven" category-value="seven" >}}
Simple text with _markdown_ in a tab

{{< text plain >}}
NoIndent:
    FourIndent:
        - EightIndent
    FourIndentAgain:
        - EightIndentAgain
{{< /text >}}

And more _markdown_
{{< /tab >}}

{{< /tabset >}}

----------------------------------------

TITLE: Checking Webhook Namespace Selector Configuration - Opt-out
DESCRIPTION: Shows how to verify the webhook's namespace selector configuration for opt-out sidecar injection behavior.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep "namespaceSelector:" -A5
      namespaceSelector:
        matchExpressions:
        - key: istio-injection
          operator: NotIn
          values:
          - disabled
      rules:
      - apiGroups:
        - ""

----------------------------------------

TITLE: Checking Webhook Namespace Selector Configuration - Opt-out
DESCRIPTION: Shows how to verify the webhook's namespace selector configuration for opt-out sidecar injection behavior.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep "namespaceSelector:" -A5
      namespaceSelector:
        matchExpressions:
        - key: istio-injection
          operator: NotIn
          values:
          - disabled
      rules:
      - apiGroups:
        - ""

----------------------------------------

TITLE: Structuring Tabbed Content with Lists in Markdown
DESCRIPTION: This snippet demonstrates how to create a tabset with multiple tabs, each containing numbered lists with various content types including plain text, warnings, and code blocks.

LANGUAGE: markdown
CODE:
{{< tabset category-name="test" >}}

{{< tab name="One" category-value="one" >}}
1. One paragraph in a list in a tab
{{< /tab >}}

{{< tab name="Two" category-value="two" >}}
1. Three

1. separate

1. bullets in a list in a tab

    This last bullet with two paragraphs
{{< /tab >}}

{{< tab name="Three" category-value="three" >}}
1. Simple text in a list in a tab

    A paragraph

    {{< warning >}}
    Warning in a list in a tab
    {{< /warning >}}

    And another

1. Second bullet

1. Third bullet
{{< /tab >}}

{{< tab name="Four" category-value="four" >}}
1. Simple text with _markdown_ in a list in a tab

    {{< warning >}}
    Warning in a list in a tab
    {{< /warning >}}
{{< /tab >}}

{{< tab name="Five" category-value="five" >}}
1. Simple text in a list in a tab

    {{< text plain >}}
    Text block in a list in a tab
    {{< /text >}}

{{< /tab >}}

{{< tab name="Six" category-value="six" >}}
1. Simple text with _markdown_ in a list in a tab

    {{< warning >}}
    Warning with _markdown_ in a list in a tab
    {{< /warning >}}

1. Second bullet
{{< /tab >}}

{{< tab name="Seven" category-value="seven" >}}
1. Simple text with _markdown_ in a list in a tab

    {{< text bash >}}
    $ NoIndent:
        FourIndent:
            - EightIndent
        FourIndentAgain:
            - EightIndentAgain
    {{< /text >}}

1. Second bullet
{{< /tab >}}

{{< /tabset >}}

----------------------------------------

TITLE: Adding Language Redirect Rule in Markdown
DESCRIPTION: This snippet shows how to add a language redirect rule to the index.redir file for a new translated site, using French as an example.

LANGUAGE: markdown
CODE:
```
/  /fr   302  Language=fr
```

----------------------------------------

TITLE: Configuring Istio Case Studies Page Metadata in Markdown
DESCRIPTION: This snippet defines the metadata for the Istio case studies page, including the title, aliases for redirects, document type, and layout settings. It also includes a comment with instructions for adding new Istio users to the list.

LANGUAGE: markdown
CODE:
---
title: Case studies
aliases:
    - /case-studies
    - /about/community/customers
    - /latest/about/community/customers
doc_type: about
type: case-studies
sidebar_none: true
---

[comment]: <> (To add yourself as an Istio user, please see https://github.com/istio/community/blob/master/CONTRIBUTING.md#tell-the-world-youre-using-istio.)

----------------------------------------

TITLE: Checking Webhook Namespace Selector Configuration - Opt-in
DESCRIPTION: Shows how to verify the webhook's namespace selector configuration for opt-in sidecar injection behavior.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep "namespaceSelector:" -A5
      namespaceSelector:
        matchLabels:
          istio-injection: enabled
      rules:
      - apiGroups:
        - ""

----------------------------------------

TITLE: Checking Webhook Namespace Selector Configuration - Opt-in
DESCRIPTION: Shows how to verify the webhook's namespace selector configuration for opt-in sidecar injection behavior.

LANGUAGE: bash
CODE:
$ kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep "namespaceSelector:" -A5
      namespaceSelector:
        matchLabels:
          istio-injection: enabled
      rules:
      - apiGroups:
        - ""

----------------------------------------

TITLE: Idea Callout Examples in Istio Docs
DESCRIPTION: Demonstrates two variations of idea callouts: single paragraph and two paragraphs.

LANGUAGE: markdown
CODE:
{{< idea >}}
This is an idea
{{< /idea >}}

{{< idea >}}
This is an idea

with two paragraphs
{{< /idea >}}

----------------------------------------

TITLE: Configuring Web Crawler Access for Istio Documentation
DESCRIPTION: Standard robots.txt directives allowing unrestricted crawler access and defining the sitemap location for version 1.9 of the Istio documentation.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.9/sitemap.xml

----------------------------------------

TITLE: YAML Frontmatter Configuration for Istio Integration Documentation
DESCRIPTION: YAML frontmatter block defining metadata for an Istio documentation page about integrations. Includes title, description, weight for ordering, keywords for searching, and test status.

LANGUAGE: yaml
CODE:
---
title: Integrations
description: Other software that Istio can integrate with to provide additional functionality.
weight: 60
keywords: [ops, integrations]
test: n/a
---

----------------------------------------

TITLE: Validating Cosign Binary Signature using OpenSSL
DESCRIPTION: This command uses OpenSSL to verify the signature of the downloaded Cosign binary. It retrieves the public key from the Cosign GitHub repository and compares it against the provided signature file.

LANGUAGE: bash
CODE:
$ openssl dgst -sha256 \
    -verify <(curl -ssL https://raw.githubusercontent.com/sigstore/cosign/main/release/release-cosign.pub) \
    -signature <(cat /path/to/cosign.sig | base64 -d) \
    /path/to/cosign-binary

----------------------------------------

TITLE: Validating Cosign Binary Signature using OpenSSL
DESCRIPTION: This command uses OpenSSL to verify the signature of the downloaded Cosign binary. It retrieves the public key from the Cosign GitHub repository and compares it against the provided signature file.

LANGUAGE: bash
CODE:
$ openssl dgst -sha256 \
    -verify <(curl -ssL https://raw.githubusercontent.com/sigstore/cosign/main/release/release-cosign.pub) \
    -signature <(cat /path/to/cosign.sig | base64 -d) \
    /path/to/cosign-binary

----------------------------------------

TITLE: Creating Tabbed Interface for Istio Ecosystem in Markdown and HTML
DESCRIPTION: This snippet creates a tabbed interface to separate training and certification providers. It uses custom shortcodes for tabsets and interactive panels to display the content.

LANGUAGE: markdown
CODE:
{{< tabset category-name="ecosystem-type" class="tabset--ecosystem" forget-tab=true >}}

{{< tab
    name="Training"
    category-value="Training"
    description="Learn how Istio Service Mesh can boost your platform, with well crafted, professional courses."
>}}

{{< interactive_panels items="training" >}}

{{< /tab >}}

{{< tab
    name="Certification"
    category-value="Certification"
    description="Here are some of the well-known certification exams available to validate your Istio skills"
>}}

{{< interactive_panels items="certification" >}}

{{< /tab >}}

{{< /tabset >}}

{{< interactive_panel_modal >}}

----------------------------------------

TITLE: Defining Web Crawler Rules for Istio Website
DESCRIPTION: This snippet defines the rules for web crawlers accessing the Istio website. It allows access to most areas, disallows access to a specific version directory, and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:

Disallow: /v-0.1
Sitemap: https://istio.io/sitemap.xml

----------------------------------------

TITLE: Deploying Curl Sample App with Automatic Sidecar Injection in Kubernetes
DESCRIPTION: This command deploys the curl sample application using kubectl. It assumes automatic sidecar injection is enabled in the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/curl/curl.yaml@

----------------------------------------

TITLE: Installing Node.js Dependencies
DESCRIPTION: Command to install the required Node.js dependencies for the ratings service using npm.

LANGUAGE: bash
CODE:
$ npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN ratings No description
npm WARN ratings No repository field.
npm WARN ratings No license field.

added 24 packages in 2.094s

----------------------------------------

TITLE: Installing Node.js Dependencies
DESCRIPTION: Command to install the required Node.js dependencies for the ratings service using npm.

LANGUAGE: bash
CODE:
$ npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN ratings No description
npm WARN ratings No repository field.
npm WARN ratings No license field.

added 24 packages in 2.094s

----------------------------------------

TITLE: Verify Function Usage Example
DESCRIPTION: Example showing how to verify command output matches expected results

LANGUAGE: sh
CODE:
_verify_same snip_set_up_the_cluster_3 "$snip_set_up_the_cluster_3_out"

----------------------------------------

TITLE: Displaying Plain Text Block in Istio Documentation
DESCRIPTION: This snippet demonstrates how to include a plain text block within Istio's documentation using custom shortcodes.

LANGUAGE: plain
CODE:
{{< text plain >}}
A sample nested text block.
{{< /text >}}

----------------------------------------

TITLE: Stopping Ratings Service Docker Container
DESCRIPTION: This command stops the running Docker container for the ratings service.

LANGUAGE: bash
CODE:
$ docker stop my-ratings

----------------------------------------

TITLE: Stopping Ratings Service Docker Container
DESCRIPTION: This command stops the running Docker container for the ratings service.

LANGUAGE: bash
CODE:
$ docker stop my-ratings

----------------------------------------

TITLE: Configuring Search Crawler Access in robots.txt
DESCRIPTION: Standard robots.txt directives that allow unrestricted access to web crawlers and specify the sitemap location. This configuration enables search engines to properly index the Istio documentation.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.19/sitemap.xml

----------------------------------------

TITLE: Running Ratings Service in Docker Container
DESCRIPTION: This command runs the ratings service in a Docker container, mapping port 9080 of the container to port 9081 of the host machine.

LANGUAGE: bash
CODE:
$ docker run --name my-ratings  --rm -d -p 9081:9080 $USER/ratings

----------------------------------------

TITLE: Running Ratings Service in Docker Container
DESCRIPTION: This command runs the ratings service in a Docker container, mapping port 9080 of the container to port 9081 of the host machine.

LANGUAGE: bash
CODE:
$ docker run --name my-ratings  --rm -d -p 9081:9080 $USER/ratings

----------------------------------------

TITLE: Defining Istio Page Metadata in YAML
DESCRIPTION: This YAML frontmatter block defines metadata for an Istio documentation page. It includes fields for title, subtitle, description, publish date, and keywords.

LANGUAGE: yaml
CODE:
---
title: My Title
subtitle: My optional on-line subtitle
description: My one-line description for the page.
publishdate: 2017-05-24
keywords: [keyword1,keyword2]
---

----------------------------------------

TITLE: Configuring robots.txt for Istio Website
DESCRIPTION: Basic robots.txt configuration that allows all user agents to access all paths and provides the sitemap location for web crawlers. The sitemap is located at /v1.23/sitemap.xml.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.23//sitemap.xml

----------------------------------------

TITLE: Configuring Robots.txt Rules for Istio Website
DESCRIPTION: Standard robots.txt configuration that allows unrestricted access to web crawlers and points to the sitemap location. The configuration allows all user agents and specifies the sitemap file path.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.17/sitemap.xml

----------------------------------------

TITLE: Configuring Web Crawler Access Settings in robots.txt
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers full access to the site and specifies the location of the XML sitemap at /v1.6/sitemap.xml.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:
Sitemap: /v1.6/sitemap.xml

----------------------------------------

TITLE: Configuring robots.txt for Istio Documentation
DESCRIPTION: This snippet defines the rules for web crawlers accessing the Istio documentation website. It allows all user agents to access the site and specifies the location of the sitemap file.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.12/sitemap.xml

----------------------------------------

TITLE: Configuring Robots.txt for Istio Documentation Website
DESCRIPTION: This robots.txt configuration allows all user agents to access the Istio documentation website without restrictions. It also specifies the location of the sitemap for improved search engine indexing.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow:
Sitemap: /v1.1/sitemap.xml

----------------------------------------

TITLE: Configuring robots.txt for Istio Documentation Website
DESCRIPTION: This snippet defines the rules for web crawlers accessing the Istio documentation site. It allows all user agents unrestricted access and specifies the location of the sitemap.

LANGUAGE: plaintext
CODE:
User-agent: *

Disallow:

Sitemap: /v1.0/sitemap.xml

----------------------------------------

TITLE: Updating go.mod for Patch Release in Markdown
DESCRIPTION: This snippet shows the command to update the go.mod file for a new patch release of Istio. It updates the Istio dependency to the new version and tidies the module.

LANGUAGE: markdown
CODE:
1. Run `go get istio.io/istio@A.X.Y && go mod tidy`.