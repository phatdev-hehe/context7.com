TITLE: Hugo Build Command Options
DESCRIPTION: Complete list of available command-line flags and options for the Hugo build command, including configuration for base URL, content management, build settings, and debugging options.

LANGUAGE: bash
CODE:
  -b, --baseURL string             hostname (and path) to the root, e.g. https://spf13.com/
  -D, --buildDrafts                include content marked as draft
  -E, --buildExpired               include expired content
  -F, --buildFuture                include content with publishdate in the future
      --cacheDir string            filesystem path to cache directory
      --cleanDestinationDir        remove files from destination not found in static directories
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -c, --contentDir string          filesystem path to content directory
  -d, --destination string         filesystem path to write files to
      --disableKinds strings       disable different kind of pages (home, RSS etc.)
      --enableGitInfo              add Git revision, date, author, and CODEOWNERS info to the pages
  -e, --environment string         build environment
      --forceSyncStatic           copy all files when static is changed.
      --gc                         enable to run some cleanup tasks (remove unused cache files) after the build
  -h, --help                       help for build
      --ignoreCache                ignores the cache directory
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
  -l, --layoutDir string           filesystem path to layout directory
      --logLevel string            log level (debug|info|warn|error)
      --minify                     minify any supported output format (HTML, XML etc.)
      --noBuildLock                don't create .hugo_build.lock file
      --noChmod                    don't sync permission mode of files
      --noTimes                    don't sync modification time of files
      --panicOnWarning             panic on first WARNING log
      --poll string                set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes
      --printI18nWarnings          print missing translations
      --printMemoryUsage           print memory usage to screen at intervals
      --printPathWarnings          print warnings on duplicate target paths etc.
      --printUnusedTemplates       print warnings on unused templates.
      --quiet                      build in quiet mode
      --renderSegments strings     named segments to render (configured in the segments config)
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --templateMetrics            display metrics about template executions
      --templateMetricsHints       calculate some improvement hints when combined with --templateMetrics
  -t, --theme strings              themes to use (located in /themes/THEMENAME/)
      --themesDir string           filesystem path to themes directory
      --trace file                 write trace to file (not useful in general)
  -w, --watch                      watch filesystem for changes and recreate as needed

----------------------------------------

TITLE: Configuring Hugo Deployment with Matchers and Targets
DESCRIPTION: This example demonstrates a complete Hugo deployment configuration with custom matchers for different file types and multiple deployment targets. It includes cache control settings, gzip compression, and specific rules for various file extensions.

LANGUAGE: toml
CODE:
[deployment]
  order = ['.jpg$', '.gif$']
  [[deployment.matchers]]
    cacheControl = 'max-age=31536000, no-transform, public'
    gzip = true
    pattern = '^.+\.(js|css|svg|ttf)$'
  [[deployment.matchers]]
    cacheControl = 'max-age=31536000, no-transform, public'
    gzip = false
    pattern = '^.+\.(png|jpg)$'
  [[deployment.matchers]]
    contentType = 'application/xml'
    gzip = true
    pattern = '^sitemap\.xml$'
  [[deployment.matchers]]
    gzip = true
    pattern = '^.+\.(html|xml|json)$'
  [[deployment.targets]]
    url = 's3://my_production_bucket?region=us-west-1'
    cloudFrontDistributionID = 'E1234567890ABCDEF0'
    exclude = '**.(heic,psd)'
    name = 'production'
  [[deployment.targets]]
    url = 's3://my_staging_bucket?region=us-west-1'
    exclude = '**.(heic,psd)'
    name = 'staging'

----------------------------------------

TITLE: Rendering Home Page with Custom Subtitle in Hugo
DESCRIPTION: This template demonstrates how to render a home page with a custom subtitle from front matter, main content, and a list of regular pages. It uses the .Params.Subtitle variable to access custom front matter.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h3>{{ .Params.Subtitle }}</h3>
  {{ .Content }}
  {{ range site.RegularPages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Advanced Single Template Implementation in Hugo
DESCRIPTION: A more complex single template that inherits the site's shell from the base template. It renders the page title, creation date, content, and a list of associated terms in the "tags" taxonomy.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <section>
    <h1>{{ .Title }}</h1>
    {{ with .Date }}
      {{ $dateMachine := . | time.Format "2006-01-02T15:04:05-07:00" }}
      {{ $dateHuman := . | time.Format ":date_long" }}
      <time datetime="{{ $dateMachine }}">{{ $dateHuman }}</time>
    {{ end }}
    <article>
      {{ .Content }}
    </article>
    <aside>
      {{ with .GetTerms "tags" }}
        <div>{{ (index . 0).Parent.LinkTitle }}</div>
        <ul>
          {{ range . }}
            <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
          {{ end }}
        </ul>
      {{ end }}
    </aside>
  </section>
{{ end }}

----------------------------------------

TITLE: Base Template Implementation in Hugo
DESCRIPTION: Base template that provides the HTML shell for other templates, including head, header, and footer partials with main content block.

LANGUAGE: go-html-template
CODE:
<!DOCTYPE html>
<html lang="{{ or site.Language.LanguageCode }}" dir="{{ or site.Language.LanguageDirection `ltr` }}">
<head>
  {{ partial "head.html" . }}
</head>
<body>
  <header>
    {{ partial "header.html" . }}
  </header>
  <main>
    {{ block "main" . }}{{ end }}
  </main>
  <footer>
    {{ partial "footer.html" . }}
  </footer>
</body>
</html>

----------------------------------------

TITLE: Implementing GetImage Partial in Hugo
DESCRIPTION: Example of a partial template that returns an image from page parameters, checking multiple possible sources.

LANGUAGE: go-html-template
CODE:
{{/* layouts/partials/GetImage.html */}}
{{ $image := false }}
{{ with .Params.gallery }}
  {{ $image = index . 0 }}
{{ end }}
{{ with .Params.image }}
  {{ $image = . }}
{{ end }}
{{ return $image }}

LANGUAGE: go-html-template
CODE:
{{/* layouts/_default/single.html */}}
{{ with partial "GetImage.html" . }}
  [...]
{{ end }}

----------------------------------------

TITLE: Defining Base Template Structure in Hugo
DESCRIPTION: Creates a base template at _default/baseof.html that serves as the master template for all pages. Defines blocks for title, main content, and footer that can be overridden by child templates.

LANGUAGE: go-html-template
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>{{ block "title" . }}
      <!-- Blocks may include default content. -->
      {{ .Site.Title }}
    {{ end }}</title>
  </head>
  <body>
    <!-- Code that all your templates share, like a header -->
    {{ block "main" . }}
      <!-- The part of the page that begins to differ between templates -->
    {{ end }}
    {{ block "footer" . }}
    <!-- More shared code, perhaps a footer but that can be overridden if need be in  -->
    {{ end }}
  </body>
</html>

----------------------------------------

TITLE: Basic Variable Template Example in Hugo
DESCRIPTION: Demonstrates basic variable initialization and calculation within an HTML template using Hugo's templating syntax.

LANGUAGE: go-html-template
CODE:
{{ $v1 := 6 }}
{{ $v2 := 7 }}
<p>The product of {{ $v1 }} and {{ $v2 }} is {{ mul $v1 $v2 }}.</p>

----------------------------------------

TITLE: Error Handling Image Shortcode
DESCRIPTION: Enhanced image shortcode with comprehensive error handling for missing arguments and resources.

LANGUAGE: go-html-template
CODE:
{{- with .Get "path" }}
  {{- with $r := $.Page.Resources.Get ($.Get "path") }}
    {{- with $.Get "width" }}
      {{- with $r.Process (printf "resize %dx wepb" ($.Get "width" )) }}
        {{- $alt := or ($.Get "alt") "" -}}
        <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="{{ $alt }}">
      {{- end }}
    {{- else }}
      {{- errorf "The %q shortcode requires a 'width' argument: see %s" $.Name $.Position }}
    {{- end }}
  {{- else }}
    {{- warnf "The %q shortcode was unable to find %s: see %s" $.Name ($.Get "path") $.Position }}
  {{- end }}
{{- else }}
  {{- errorf "The %q shortcode requires a 'path' argument: see %s" .Name .Position }}
{{- end -}}

----------------------------------------

TITLE: Grouping Pages with Pagination in Hugo
DESCRIPTION: This snippet demonstrates how to use pagination with grouping methods in Hugo. It groups pages by date, paginates the grouped collection, and renders links to each page within its group along with navigation.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate ($pages.GroupByDate "Jan 2006") }}

{{ range $paginator.PageGroups }}
  <h2>{{ .Key }}</h2>
  {{ range .Pages }}
    <h3><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h3>
  {{ end }}
{{ end }}

{{ template "_internal/pagination.html" . }}

----------------------------------------

TITLE: Image Rendering Examples
DESCRIPTION: Various examples of rendering images in templates with error handling and conditional logic.

LANGUAGE: go-html-template
CODE:
{{ $image := .Resources.GetMatch "sunset.jpg" }}
<img src="{{ $image.RelPermalink }}" width="{{ $image.Width }}" height="{{ $image.Height }}">

LANGUAGE: go-html-template
CODE:
{{ with .Resources.GetMatch "sunset.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}">
{{ end }}

----------------------------------------

TITLE: Configuring Goldmark Markdown Renderer in Hugo
DESCRIPTION: This code block demonstrates the default configuration for the Goldmark Markdown renderer in Hugo. It includes settings for various extensions and rendering options.

LANGUAGE: toml
CODE:
{{< code-toggle config=markup.goldmark />}}

----------------------------------------

TITLE: Creating New Content in Hugo
DESCRIPTION: Command to create a new post and example of front matter with Markdown content

LANGUAGE: text
CODE:
hugo new content content/posts/my-first-post.md

LANGUAGE: markdown
CODE:
+++
title = 'My First Post'
date = 2024-01-14T07:07:07+01:00
draft = true
+++
## Introduction

This is **bold** text, and this is *emphasized* text.

Visit the [Hugo](https://gohugo.io) website!

----------------------------------------

TITLE: Base Template with Default Block Content
DESCRIPTION: Example of a base template layout that defines a 'main' block with default content if not overridden.

LANGUAGE: go-html-template
CODE:
<body>
  <main>
    {{ block "main" . }}
      {{ print "default value if 'main' template is empty" }}
    {{ end }}
  </main>
</body>

----------------------------------------

TITLE: Single Page Template in Hugo
DESCRIPTION: Template for rendering individual content pages, displaying title and content.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
{{ end }}

----------------------------------------

TITLE: Extended Hugo Configuration with Parameters
DESCRIPTION: Shows a more comprehensive Hugo configuration including site parameters and nested structures.

LANGUAGE: toml
CODE:
baseURL = 'https://example.org/'
languageCode = 'en-us'
title = 'ABC Widgets, Inc.'
[params]
subtitle = 'The Best Widgets on Earth'
[params.contact]
email = 'info@example.org'
phone = '+1 202-555-1212'

----------------------------------------

TITLE: Advanced Resources FromString with ExecuteAsTemplate
DESCRIPTION: Example showing how to combine resources.FromString with resources.ExecuteAsTemplate for template processing

LANGUAGE: go-html-template
CODE:
{{ if .IsHome }}
  {{ $string := `
    {{ $rfc3339 := "2006-01-02T15:04:05Z07:00" }}
    {{ $m := dict
      "hugo_version" hugo.Version
      "build_date" (now.Format $rfc3339)
      "last_modified" (site.Lastmod.Format $rfc3339)
    }}
    {{ $json := jsonify $m }}
    `
  }}
  {{ $r := resources.FromString "" $string }}
  {{ $r = $r | resources.ExecuteAsTemplate "site.json" . }}
  {{ $r.Publish }}
{{ end }}

----------------------------------------

TITLE: Defining a Template for Block Statements in Hugo
DESCRIPTION: This snippet demonstrates how to define a template named 'main' using the 'define' keyword, which can be used with a 'block' statement. It includes a default value for when the template is empty and shows how to access the Title and Content variables.

LANGUAGE: go-html-template
CODE:
{{ block "main" . }}
  {{ print "default value if 'main' template is empty" }}
{{ end }}

{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
{{ end }}

----------------------------------------

TITLE: Defining Cascade Front Matter in TOML
DESCRIPTION: Example of defining cascading front matter values in TOML format for a Hugo home page.

LANGUAGE: toml
CODE:
title = 'Home'
[cascade.params]
color = 'red'
[cascade.target]
path = '{/articles,/articles/**}'

----------------------------------------

TITLE: Defining Cascade Front Matter in TOML
DESCRIPTION: Example of defining cascading front matter values in TOML format for a Hugo home page.

LANGUAGE: toml
CODE:
title = 'Home'
[cascade.params]
color = 'red'
[cascade.target]
path = '{/articles,/articles/**}'

----------------------------------------

TITLE: Creating Custom Audio Player Shortcode in Hugo
DESCRIPTION: Template for a custom shortcode that generates an audio player using global resources. The shortcode accepts a 'src' parameter to specify the audio file path.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get (.Get "src") }}
  <audio controls preload="auto" src="{{ .RelPermalink }}"></audio>
{{ end }}

----------------------------------------

TITLE: Displaying Hugo Configuration
DESCRIPTION: Shows commands to display the complete Hugo configuration or specific settings.

LANGUAGE: sh
CODE:
hugo config

hugo config | grep [key]

hugo config mounts

----------------------------------------

TITLE: Minifying CSS Resource in Hugo using go-html-template
DESCRIPTION: This snippet demonstrates how to use the resources.Minify function in Hugo to minify a CSS resource. It first retrieves a CSS file using resources.Get, then applies the minify function to create a minified version of the CSS.

LANGUAGE: go-html-template
CODE:
{{ $css := resources.Get "css/main.css" }}
{{ $style := $css | minify }}

----------------------------------------

TITLE: Variable Scoping and Operations in Hugo
DESCRIPTION: Shows variable initialization, assignment and scope handling within blocks.

LANGUAGE: go-html-template
CODE:
{{ $total := 3 }}
{{ range slice 7 11 21 }}
  {{ $total = add $total . }}
{{ end }}
{{ $total }}

----------------------------------------

TITLE: Hugo Project Structure Example
DESCRIPTION: Demonstrates typical layout directory structure for a Hugo project of medium complexity, showing various template file locations and their organization.

LANGUAGE: text
CODE:
layouts/
├── _default/
│   ├── _markup/
│   │   ├── render-image.html   <-- render hook
│   │   └── render-link.html    <-- render hook
│   ├── baseof.html
│   ├── home.html
│   ├── section.html
│   ├── single.html
│   ├── taxonomy.html
│   └── term.html
├── articles/
│   └── card.html               <-- content view
├── partials/
│   ├── footer.html
│   └── header.html
└── shortcodes/
    ├── audio.html
    └── video.html

----------------------------------------

TITLE: Basic Hugo Page Bundle Structure Example
DESCRIPTION: Demonstrates a basic directory structure showing the difference between a bundled 'about' page with resources and a regular 'privacy' page.

LANGUAGE: text
CODE:
content/
├── about/
│   ├── index.md
│   └── welcome.jpg
└── privacy.md

----------------------------------------

TITLE: Basic Resources FromString Implementation
DESCRIPTION: Template code showing how to create and publish a JSON file using resources.FromString with dict and jsonify functions

LANGUAGE: go-html-template
CODE:
{{ if .IsHome }}
  {{ $rfc3339 := "2006-01-02T15:04:05Z07:00" }}
  {{ $m := dict
    "hugo_version" hugo.Version
    "build_date" (now.Format $rfc3339)
    "last_modified" (site.Lastmod.Format $rfc3339)
  }}
  {{ $json := jsonify $m }}
  {{ $r := resources.FromString "site.json" $json }}
  {{ $r.Publish }}
{{ end }}

----------------------------------------

TITLE: Setting Hugo Configuration via Environment Variables
DESCRIPTION: Demonstrates how to configure Hugo settings using environment variables for CI/CD deployments.

LANGUAGE: sh
CODE:
export HUGO_BASEURL=https://example.org/
export HUGO_ENABLEGITINFO=true
export HUGO_ENVIRONMENT=staging
hugo

----------------------------------------

TITLE: Implementing Summary View Template in Hugo
DESCRIPTION: This snippet shows a summary view template that displays an article's title, date, word count, and summary. It includes a link to the full article and formats the date.

LANGUAGE: go-html-template
CODE:
<article class="post">
  <header>
    <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
    <div class="post-meta">{{ .Date.Format "Mon, Jan 2, 2006" }} - {{ .FuzzyWordCount }} Words </div>
  </header>
  {{ .Summary }}
  <footer>
  <a href='{{ .RelPermalink }}'>Read&nbsp;more&nbsp;&raquo;</a>
  </footer>
</article>

----------------------------------------

TITLE: Defining Front Matter in TOML
DESCRIPTION: Example of defining front matter fields in TOML format for a Hugo content file.

LANGUAGE: toml
CODE:
title = 'Example'
date = 2024-02-02T04:14:54-08:00
draft = false
weight = 10
[params]
author = 'John Smith'

----------------------------------------

TITLE: Multiple Conditions with 'if-else if' in Hugo Go HTML Template
DESCRIPTION: Illustrates how to check multiple conditions using 'if', 'else if', and 'else' statements in a sequence.

LANGUAGE: go-html-template
CODE:
{{ $var := 12 }}
{{ if eq $var 6 }}
  {{ print "var is 6" }}
{{ else if eq $var 7 }}
  {{ print "var is 7" }}
{{ else if eq $var 42 }}
  {{ print "var is 42" }}
{{ else }}
  {{ print "var is something else" }}
{{ end }}

----------------------------------------

TITLE: Image Processing Operations
DESCRIPTION: Examples of various image processing operations including resize, fit, fill, crop, and filtering.

LANGUAGE: go-html-template
CODE:
{{/* Resize examples */}}
{{ $image := $image.Resize "600x" }}
{{ $image := $image.Resize "x400" }}
{{ $image := $image.Resize "600x400" }}

LANGUAGE: go-html-template
CODE:
{{/* Fit, Fill, Crop examples */}}
{{ $image := $image.Fit "600x400" }}
{{ $image := $image.Fill "600x400" }}
{{ $image := $image.Crop "600x400" }}

LANGUAGE: go-html-template
CODE:
{{/* Filter example */}}
{{ $image := $image.Filter (images.GaussianBlur 6) (images.Pixelate 8) }}

----------------------------------------

TITLE: Implementing Inline Partial in Hugo
DESCRIPTION: Example of defining and using an inline partial template that returns a value.

LANGUAGE: go-html-template
CODE:
Value: {{ partial "my-inline-partial.html" . }}

{{ define "partials/my-inline-partial.html" }}
{{ $value := 32 }}
{{ return $value }}
{{ end }}

----------------------------------------

TITLE: Using Remote Resource for JSON Data in Hugo
DESCRIPTION: Shows how to retrieve remote JSON data using resources.GetRemote and transform.Unmarshal functions in Hugo, with improved error handling and cache control.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $url := "https://example.org/books.json" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ $data = . | transform.Unmarshal }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Retrieving Pages Collection in Hugo Templates
DESCRIPTION: Demonstrates how to access the collection of all pages in a Hugo site using the .Site.Pages method. This is a fundamental operation for working with page data in Hugo templates.

LANGUAGE: go
CODE:
{{ .Site.Pages }}

----------------------------------------

TITLE: Rendering Basic Taxonomy List in Hugo
DESCRIPTION: Creates a basic taxonomy template that inherits from the base template and renders a list of terms in the current taxonomy.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
  {{ range .Pages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Implementing Custom Table Render Hook in Hugo
DESCRIPTION: A Go HTML template that implements a custom table render hook in Hugo, replicating the GitHub Flavored Markdown table rendering specification.

LANGUAGE: go-html-template
CODE:
<table
  {{- range $k, $v := .Attributes }}
    {{- if $v }}
      {{- printf " %s=%q" $k $v | safeHTMLAttr }}
    {{- end }}
  {{- end }}>
  <thead>
    {{- range .THead }}
      <tr>
        {{- range . }}
          <th
            {{- with .Alignment }}
              {{- printf " style=%q" (printf "text-align: %s" .) | safeHTMLAttr }}
            {{- end -}}
          >
            {{- .Text -}}
          </th>
        {{- end }}
      </tr>
    {{- end }}
  </thead>
  <tbody>
    {{- range .TBody }}
      <tr>
        {{- range . }}
          <td
            {{- with .Alignment }}
              {{- printf " style=%q" (printf "text-align: %s" .) | safeHTMLAttr }}
            {{- end -}}
          >
            {{- .Text -}}
          </td>
        {{- end }}
      </tr>
    {{- end }}
  </tbody>
</table>

----------------------------------------

TITLE: Setting Page-level Parameters in Hugo Content Frontmatter
DESCRIPTION: Shows how to set page-level parameters in the frontmatter of a Hugo content file.

LANGUAGE: toml
CODE:
title = 'Example'
date = 2023-01-01
draft = false
[params]
display_toc = false

----------------------------------------

TITLE: Deferred TailwindCSS Processing in Hugo Template
DESCRIPTION: This snippet demonstrates how to use templates.Defer to process TailwindCSS styles after all site content has been rendered. It includes conditional logic for development and production environments.

LANGUAGE: go-html-template
CODE:
{{ with (templates.Defer (dict "key" "global")) }}
  {{ $t := debug.Timer "tailwindcss" }}
  {{ with resources.Get "css/styles.css" }}
    {{ $opts := dict
      "inlineImports" true
      "optimize" hugo.IsProduction
    }}
    {{ with . | css.TailwindCSS $opts }}
      {{ if hugo.IsDevelopment }}
        <link rel="stylesheet" href="{{ .RelPermalink }}" />
      {{ else }}
        {{ with . | minify | fingerprint }}
          <link
            rel="stylesheet"
            href="{{ .RelPermalink }}"
            integrity="{{ .Data.Integrity }}"
            crossorigin="anonymous" />
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
  {{ $t.Stop }}
{{ end }}

----------------------------------------

TITLE: Hugo Site Structure with Configuration Subdirectory
DESCRIPTION: Illustrates an alternative directory structure with site configuration organized into subdirectories.

LANGUAGE: txt
CODE:
my-site/
├── archetypes/
│   └── default.md
├── assets/
├── config/           <-- site configuration
│   └── _default/
│       └── hugo.toml
├── content/
├── data/
├── i18n/
├── layouts/
├── static/
└── themes/

----------------------------------------

TITLE: Updating Hugo Modules
DESCRIPTION: Provides examples of how to update Hugo Modules using the hugo mod get command. Includes updating all modules, updating recursively, updating a specific module, and getting a specific version.

LANGUAGE: sh
CODE:
hugo mod get -u

LANGUAGE: sh
CODE:
hugo mod get -u ./...

LANGUAGE: sh
CODE:
hugo mod get -u github.com/gohugoio/myShortcodes

LANGUAGE: sh
CODE:
hugo mod get github.com/gohugoio/myShortcodes@v1.0.7

----------------------------------------

TITLE: Defining Content Structure in Hugo
DESCRIPTION: Shows the basic content structure in a Hugo project, with markdown files in the root of the content directory.

LANGUAGE: text
CODE:
content/
├── about.md
└── contact.md

----------------------------------------

TITLE: Accessing Permalinks for Different Output Formats in Hugo Templates
DESCRIPTION: Demonstrates how to access permalinks for different output formats within Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ .RelPermalink }} → /that-page/
{{ with .OutputFormats.Get "json" }}
  {{ .RelPermalink }} → /that-page/index.json
{{ end }}

----------------------------------------

TITLE: JSON Encoding Examples in Hugo Templates
DESCRIPTION: Demonstrates different ways to use the jsonify function in Hugo templates, including basic usage and customizing output formatting with prefix and indent options.

LANGUAGE: go-html-template
CODE:
{{ dict "title" .Title "content" .Plain | jsonify }}
{{ dict "title" .Title "content" .Plain | jsonify (dict "indent" "  ") }}
{{ dict "title" .Title "content" .Plain | jsonify (dict "prefix" " " "indent" "  ") }}

----------------------------------------

TITLE: Basic Image Resizing in Hugo Templates
DESCRIPTION: Demonstrates basic image resizing functionality using Hugo's resource processing. This example resizes an image to 300 pixels width while maintaining aspect ratio.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with .Resize "300x" }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Modifying Output Format Configuration in Hugo
DESCRIPTION: Example of how to modify the default output format configuration in Hugo, specifically adjusting the weight of JSON and HTML formats.

LANGUAGE: toml
CODE:
[outputFormats.json]
weight = 1
[outputFormats.html]
weight = 2

----------------------------------------

TITLE: Footer Partial Without Context
DESCRIPTION: Example of calling a partial template without passing any context.

LANGUAGE: go-html-template
CODE:
{{ partial "footer.html" }}

----------------------------------------

TITLE: Accessing Hugo Parameters in Templates
DESCRIPTION: Demonstrates how to access custom parameters in Hugo templates using dot notation for valid identifiers.

LANGUAGE: go-html-template
CODE:
{{ .Params.display_related }} → true
{{ .Params.author.email }} → jsmith@example.org
{{ .Params.author.name }} → John Smith

----------------------------------------

TITLE: Checking Substring Presence with strings.Contains in Hugo
DESCRIPTION: This snippet demonstrates how to use the strings.Contains function in Hugo templates to check if a string contains a specific substring. The function returns a boolean value indicating whether the substring is present.

LANGUAGE: go-html-template
CODE:
{{ strings.Contains "Hugo" "go" }} → true

----------------------------------------

TITLE: Using Slug in Front Matter
DESCRIPTION: Shows how to use the 'slug' front matter field to override the last segment of the URL path.

LANGUAGE: toml
CODE:
title = 'My First Post'
slug = 'my-first-post'

----------------------------------------

TITLE: Conditionally Rendering Read More Links Using Truncated Method in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Truncated method in a Hugo template to conditionally display a 'Read more' link for pages where the content exceeds the summary length. It iterates through pages, displays the title and summary, and adds a link if the content is truncated.

LANGUAGE: go-html-template
CODE:
{{ range .Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ .Summary }}
  {{ if .Truncated }}
    <a href="{{ .RelPermalink }}">Read more...</a>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Creating New Hugo Site with Ananke Theme
DESCRIPTION: Series of commands to create a new Hugo site, initialize Git, add the Ananke theme, and start the development server

LANGUAGE: text
CODE:
hugo new site quickstart
cd quickstart
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
echo "theme = 'ananke'" >> hugo.toml
hugo server

----------------------------------------

TITLE: Creating GitHub Workflows Directory Structure
DESCRIPTION: Commands to create the necessary directory structure for GitHub Actions workflow configuration

LANGUAGE: text
CODE:
mkdir -p .github/workflows
touch .github/workflows/hugo.yaml

----------------------------------------

TITLE: Basic Usage of collections.Where in Hugo Templates
DESCRIPTION: Demonstrates the basic usage of the collections.Where function to filter pages based on section and data attributes.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Section" "books" }}
{{ $books := where .Site.Data.books "genres" "suspense" }}

----------------------------------------

TITLE: Using Default Date Sequence with Custom Parameter in Hugo
DESCRIPTION: This example shows how to use a custom date parameter 'myDate' while falling back to Hugo's default sequence of dates using the ':default' token.

LANGUAGE: toml
CODE:
[frontmatter]
date = ["myDate", ":default"]

----------------------------------------

TITLE: Multiple Variant Arguments for Cached Partials in Hugo
DESCRIPTION: Illustrates passing multiple arguments to create unique variants of cached partials based on country and province parameters.

LANGUAGE: go-html-template
CODE:
{{ partialCached "footer.html" . .Params.country .Params.province }}

----------------------------------------

TITLE: Creating a Content Adapter for Sanity CMS in Hugo
DESCRIPTION: This snippet demonstrates how to create a content adapter in Hugo to fetch and transform Portable Text content from Sanity CMS into Markdown pages.

LANGUAGE: go-html-template
CODE:
{{ $projectID := "mysanityprojectid" }}
{{ $useCached := true }}
{{ $api := "api" }}
{{ if $useCached }}
  {{/* See https://www.sanity.io/docs/api-cdn */}}
  {{ $api = "apicdn" }}
{{ end }}
{{ $url := printf "https://%s.%s.sanity.io/v2021-06-07/data/query/production"  $projectID $api }}

{{/* prettier-ignore-start */ -}}
{{ $q :=  `*[_type == 'post']{
  title, publishedAt, summary, slug, body[]{    ...,
    _type == "image" => {
      ...,
      asset->{
        _id,
        path,
        url,
        altText,
        title,
        description,
        metadata {
          dimensions {
            aspectRatio,
            width,
            height
          }
        }
      }
    }
  },
}`
}}
{{/* prettier-ignore-end */ -}}
{{ $body := dict "query" $q | jsonify }}
{{ $opts := dict "method" "post" "body" $body }}
{{ $r := resources.GetRemote $url $opts }}
{{ $m := $r | transform.Unmarshal }}
{{ $result := $m.result }}
{{ range $result }}
  {{ if not .slug }}
    {{ continue }}
  {{ end }}
  {{ $markdown := transform.PortableText .body }}
  {{ $content := dict
    "mediaType" "text/markdown"
    "value" $markdown
  }}
  {{ $params := dict
    "portabletext" (.body | jsonify (dict "indent" " "))
  }}
  {{ $page := dict
    "content" $content
    "kind" "page"
    "path" .slug.current
    "title" .title
    "date" (.publishedAt | time )
    "summary" .summary
    "params" $params
  }}
  {{ $.AddPage $page }}
{{ end }}

----------------------------------------

TITLE: Sorting Taxonomy Terms by Count in Hugo
DESCRIPTION: Creates a taxonomy template that sorts terms by the number of associated pages and displays the count for each term.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
  {{ range .Data.Terms.ByCount }}
    <h2><a href="{{ .Page.RelPermalink }}">{{ .Page.LinkTitle }}</a> ({{ .Count }})</h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Rendering HTML with Hugo Partial Template
DESCRIPTION: Example of a partial template that renders HTML to describe whether a number is odd or even using conditional logic.

LANGUAGE: go-html-template
CODE:
{{ if math.ModBool . 2 }}
  <p>{{ . }} is even</p>
{{ else }}
  <p>{{ . }} is odd</p>
{{ end }}

----------------------------------------

TITLE: Configuring Automatic Section Menu in Hugo
DESCRIPTION: Configuration setting to automatically create menu entries for top-level sections of a Hugo site.

LANGUAGE: toml
CODE:
sectionPagesMenu = "main"

----------------------------------------

TITLE: Configuring Default Hugo Deployment Settings in TOML
DESCRIPTION: This snippet shows the default configuration for Hugo's deployment feature. It includes settings for confirmation, dry run, force upload, CDN invalidation, maximum deletions, and number of workers.

LANGUAGE: toml
CODE:
confirm = false
dryRun = false
force = false
invalidateCDN = true
maxDeletes = 256
workers = 10

----------------------------------------

TITLE: Default Pagination Configuration in Hugo
DESCRIPTION: This snippet shows the default configuration for pagination in Hugo. It includes settings for disabling alias generation, defining the number of pages per pager, and specifying the URL segment for pager pages.

LANGUAGE: toml
CODE:
disableAliases = false
pagerSize = 10
path = "page"

----------------------------------------

TITLE: Generated HTML Output for Site Links
DESCRIPTION: This HTML snippet shows the output generated by the previous Go HTML template, displaying links to the home pages of different language versions of the site.

LANGUAGE: html
CODE:
<ul>
  <li><a href="https://example.org/de/">Projekt Dokumentation</a></li>
  <li><a href="https://example.org/en/">Project Documentation</a></li>
</ul>

----------------------------------------

TITLE: Defining Fenced Code Blocks in Hugo Markdown
DESCRIPTION: Demonstrates the syntax for creating fenced code blocks in Hugo Markdown files, including language specification and options.

LANGUAGE: markdown
CODE:
```LANG [OPTIONS]
CODE
```

----------------------------------------

TITLE: Filtering Resources by Media Type in Hugo Templates
DESCRIPTION: Demonstrates how to use the ByType method to filter page resources by media type and render images with their dimensions.

LANGUAGE: go-html-template
CODE:
{{ range .Resources.ByType "image" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Custom Date Format in Archetype
DESCRIPTION: Example showing how to customize the date format in an archetype using Hugo's time.Now function.

LANGUAGE: markdown
CODE:
title = '{{ replace .File.ContentBaseName `-` ` ` | title }}'
date = '{{ time.Now.Format "2006-01-02" }}'
draft = true

----------------------------------------

TITLE: Ranging Through All Site Pages in Hugo Template
DESCRIPTION: This snippet shows how to iterate through all pages in a Hugo site, sorted by title. It creates a list of linked page titles using the Site object.

LANGUAGE: go-html-template
CODE:
{{ range .Site.Pages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Basic Usage of partialCached in Hugo Templates
DESCRIPTION: Demonstrates the simplest usage of the partialCached function to include and cache a footer template.

LANGUAGE: go-html-template
CODE:
{{ partialCached "footer.html" . }}

----------------------------------------

TITLE: Generating Relative URLs with RelRef in Hugo Templates
DESCRIPTION: Examples demonstrating how to use the RelRef method with different options including basic path references, language specification, and custom output formats. The method accepts an options map and returns a relative URL string.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "path" "/books/book-1" }}
{{ .RelRef $opts }} → /en/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" }}
{{ .RelRef $opts }} → /de/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" "outputFormat" "json" }}
{{ .RelRef $opts }} → /de/books/book-1/index.json

----------------------------------------

TITLE: Using Permalink Tokens in Front Matter
DESCRIPTION: Shows how to use permalink tokens in the 'url' field of front matter, typically used in cascade sections.

LANGUAGE: toml
CODE:
title ="Bar"
[[cascade]]
  url = "/:sections[last]/:slug"

----------------------------------------

TITLE: Using 'if-else' Statement in Hugo Go HTML Template
DESCRIPTION: Shows how to use an 'if-else' statement to handle both truthy and falsy conditions.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ if $var }}
  {{ $var }} → foo
{{ else }}
  {{ print "var is falsy" }}
{{ end }}

----------------------------------------

TITLE: Home Page Template in Hugo
DESCRIPTION: Template for rendering the site's home page, including content and a list of regular pages.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  {{ .Content }}
  {{ range site.RegularPages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Complex Context Passing with Dictionary
DESCRIPTION: Demonstrates creating and passing a dictionary of multiple values as context to a partial.

LANGUAGE: go-html-template
CODE:
{{ $ctx := dict 
  "page" .
  "name" "John Doe" 
  "major" "Finance"
  "gpa" 4.0
}}
{{ partial "render-student-info.html" $ctx }}

----------------------------------------

TITLE: Configuring Image Processing Options in Hugo TOML
DESCRIPTION: This snippet shows the default settings for processing images in Hugo. It includes options for anchor placement, background color, WebP hint, quality, and resample filter.

LANGUAGE: toml
CODE:
[imaging]
anchor = 'Smart'
bgColor = '#ffffff'
hint = 'photo'
quality = 75
resampleFilter = 'box'

----------------------------------------

TITLE: Rendered HTML Output for Nested Menu in Hugo
DESCRIPTION: This HTML snippet shows the rendered output of the nested menu structure. It demonstrates how Hugo processes the template and configuration to generate the final HTML with proper nesting.

LANGUAGE: html
CODE:
<ul>
  <li>
    <a href="/products/">Products</a>
    <ul>
      <li><a href="/products/product-1/">Product 1</a></li>
      <li><a href="/products/product-2/">Product 2</a></li>
    </ul>
  </li>
</ul>

----------------------------------------

TITLE: Nil Comparison with collections.Where in Hugo
DESCRIPTION: Demonstrates using collections.Where to filter pages based on the presence or absence of a parameter.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Params.color" "ne" nil }}
{{ $pages := where .Site.RegularPages "Params.color" "eq" nil }}

----------------------------------------

TITLE: Creating a Basic 404 Template in Hugo
DESCRIPTION: This snippet demonstrates how to create a basic 404 error page template in Hugo. It defines the main block of the template, including a heading, error message, and a link to return to the home page.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>404 Not Found</h1>
  <p>The page you requested cannot be found.</p>
  <p>
    <a href="{{ .Site.Home.RelPermalink }}">
      Return to the home page
    </a>
  </p>
{{ end }}

----------------------------------------

TITLE: All Languages Navigation Template
DESCRIPTION: Template code for building a language navigator that lists all available translations including the current page.

LANGUAGE: go-html-template
CODE:
<ul>
{{ range $.Site.Home.AllTranslations }}
<li><a href="{{ .RelPermalink }}">{{ .Language.LanguageName }}</a></li>
{{ end }}
</ul>

----------------------------------------

TITLE: Rendering Nested Menu with Children Method in Hugo
DESCRIPTION: This Go HTML template snippet shows how to render a nested menu structure using the Children method. It iterates through the main menu entries and checks for child entries to create a nested unordered list.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li>
      <a href="{{ .URL }}">{{ .Name }}</a>
      {{ if .HasChildren }}
        <ul>
          {{ range .Children }}
            <li><a href="{{ .URL }}">{{ .Name }}</a></li>
          {{ end }}
        </ul>
      {{ end }}
    </li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Installing Hugo Documentation Dependencies
DESCRIPTION: Commands to set up local development environment for Hugo documentation. Requires npm and Hugo to be installed. Note that the npm install step may be removed in future updates.

LANGUAGE: sh
CODE:
npm i
hugo server

----------------------------------------

TITLE: Initializing Hugo Module
DESCRIPTION: Demonstrates how to initialize a new Hugo Module using the hugo mod init command. If the module path cannot be guessed, it must be provided as an argument.

LANGUAGE: sh
CODE:
hugo mod init github.com/<your_user>/<your_project>

----------------------------------------

TITLE: Creating a CSS template with Hugo site parameters
DESCRIPTION: This snippet demonstrates how to create a CSS template file that uses Hugo site configuration parameters for styling.

LANGUAGE: go-html-template
CODE:
body {
  background-color: {{ site.Params.style.bg_color }};
  color: {{ site.Params.style.text_color }};
}

----------------------------------------

TITLE: Default Security Configuration in Hugo (YAML)
DESCRIPTION: The default security configuration in Hugo, shown in YAML format. It includes settings for inline shortcodes, executable allowances, environment variable access, HTTP methods, media types, and URLs.

LANGUAGE: yaml
CODE:
{{< code-toggle config=security />}}

----------------------------------------

TITLE: Sorting Hugo Pages by Title in Ascending Order
DESCRIPTION: Demonstrates how to sort Hugo pages by title in ascending order using the ByTitle method. The code iterates through sorted pages and creates heading links with page titles and relative permalinks.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Implementing Mermaid Diagrams in Hugo Templates
DESCRIPTION: Template setup for enabling Mermaid diagrams in Hugo sites using code block render hooks. Includes both the render hook template and base template modifications.

LANGUAGE: go-html-template
CODE:
<pre class="mermaid">
  {{ .Inner | htmlEscape | safeHTML }}
</pre>
{{ .Page.Store.Set "hasMermaid" true }}

LANGUAGE: go-html-template
CODE:
{{ if .Store.Get "hasMermaid" }}
  <script type="module">
    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true });
  </script>
{{ end }}

----------------------------------------

TITLE: Creating Relative Links Using Hugo Relref Shortcode
DESCRIPTION: Examples demonstrating different ways to use the relref shortcode for creating links, including basic usage, path specification, language selection, and output format options.

LANGUAGE: markdown
CODE:
[Link A]({{%/* ref "/books/book-1" */%}})

[Link B]({{%/* ref path="/books/book-1" */%}})

[Link C]({{%/* ref path="/books/book-1" lang="de" */%}})

[Link D]({{%/* ref path="/books/book-1" lang="de" outputFormat="json" */%}})

----------------------------------------

TITLE: Sorting Slice Elements in Hugo Templates
DESCRIPTION: Examples of sorting slice elements in both ascending and descending order using Hugo's sort function.

LANGUAGE: go-html-template
CODE:
{{ sort site.Params.grades }} → [a b c]
{{ sort site.Params.grades "value" "asc" }} → [a b c]
{{ sort site.Params.grades "value" "desc" }} → [c b a]

----------------------------------------

TITLE: Nested Comparison with collections.Where in Hugo
DESCRIPTION: Shows how to perform nested comparisons using collections.Where for more complex filtering scenarios.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Type" "tutorials" }}
{{ $pages = where $pages "Params.level" "eq" "beginner" }}

----------------------------------------

TITLE: Accessing Custom Parameters in Hugo Templates
DESCRIPTION: This snippet demonstrates how to access custom parameters in Hugo templates using dot notation. It shows how to retrieve simple and nested parameters, as well as using parameters for date formatting.

LANGUAGE: go-html-template
CODE:
{{ .Site.Params.subtitle }} → The Best Widgets on Earth
{{ .Site.Params.author.name }} → John Smith

{{ $layout := .Site.Params.layouts.rfc_1123 }}
{{ .Site.Lastmod.Format $layout }} → Tue, 17 Oct 2023 13:21:02 PDT

----------------------------------------

TITLE: Accessing Site Parameters Using Context
DESCRIPTION: Shows how to access site parameters when the Site object is in context, using both current context and template context syntax.

LANGUAGE: go-html-template
CODE:
<!-- current context -->
{{ .Site.Params.foo }}
<!-- template context -->
{{ $.Site.Params.foo }}

----------------------------------------

TITLE: Displaying Hugo Project Directory Structure
DESCRIPTION: Shows the directory structure of a Hugo project with sections and subsections. Illustrates how content is organized into top-level sections and nested subsections.

LANGUAGE: text
CODE:
content/
├── articles/             <-- section (top-level directory)
│   ├── 2022/
│   │   ├── article-1/
│   │   │   ├── cover.jpg
│   │   │   └── index.md
│   │   └── article-2.md
│   └── 2023/
│       ├── article-3.md
│       └── article-4.md
├── products/             <-- section (top-level directory)
│   ├── product-1/        <-- section (has _index.md file)
│   │   ├── benefits/     <-- section (has _index.md file)
│   │   │   ├── _index.md
│   │   │   ├── benefit-1.md
│   │   │   └── benefit-2.md
│   │   ├── features/     <-- section (has _index.md file)
│   │   │   ├── _index.md
│   │   │   ├── feature-1.md
│   │   │   └── feature-2.md
│   │   └── _index.md
│   └── product-2/        <-- section (has _index.md file)
│       ├── benefits/     <-- section (has _index.md file)
│       │   ├── _index.md
│       │   ├── benefit-1.md
│       │   └── benefit-2.md
│       ├── features/     <-- section (has _index.md file)
│       │   ├── _index.md
│       │   ├── feature-1.md
│       │   └── feature-2.md
│       └── _index.md
├── _index.md
└── about.md

----------------------------------------

TITLE: Configuring Top-Level Module Options in Hugo
DESCRIPTION: This snippet shows the default configuration for top-level module options in Hugo. It includes settings for proxy, vendoring, and workspace management.

LANGUAGE: toml
CODE:
[module]
noProxy = 'none'
noVendor = ''
private = '*.*'
proxy = 'direct'
vendorClosest = false
workspace = 'off'

----------------------------------------

TITLE: Hugo Markdown Snippet Rendering
DESCRIPTION: Template code to render markdown content from a resource.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "snippets/text.md" }}
  {{ .Content }}
{{ end }}

----------------------------------------

TITLE: Identifying Hugo Sections with _index.md File
DESCRIPTION: A section in Hugo is defined as either a top-level content directory or any content directory that contains an '_index.md' file. This file is used to mark a directory as a section and can contain metadata for the section.

LANGUAGE: markdown
CODE:
_index.md

----------------------------------------

TITLE: Sorting Hugo Pages by Date (Ascending)
DESCRIPTION: Demonstrates how to sort and iterate through Hugo pages in ascending date order. Uses the ByDate method to sort pages based on their date field as defined in front matter or site configuration.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByDate }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Including RSS Feed Reference in Templates
DESCRIPTION: Template code to include RSS feed reference in the head element of rendered pages.

LANGUAGE: go-html-template
CODE:
{{ with .OutputFormats.Get "rss" }}
  {{ printf `<link rel=%q type=%q href=%q title=%q>` .Rel .MediaType.Type .Permalink site.Title | safeHTML }}
{{ end }}

----------------------------------------

TITLE: Sorting Pages by Language in Ascending Order
DESCRIPTION: This snippet demonstrates how to use the ByLanguage method to sort all pages in a Hugo site by language in ascending order. It iterates through the sorted pages and creates a list of links.

LANGUAGE: go-html-template
CODE:
{{ range .Site.AllPages.ByLanguage }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Getting Specific Page Resources in Hugo Templates
DESCRIPTION: Shows how to retrieve a specific page resource by its path using the Get method and display it as an image with dimensions.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "images/a.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Language List Template in Hugo
DESCRIPTION: Template for creating a list of links to translated content versions. Uses the .IsTranslated and .Translations page variables.

LANGUAGE: go-html-template
CODE:
{{ if .IsTranslated }}
<h4>{{ i18n "translations" }}</h4>
<ul>
  {{ range .Translations }}
  <li>
    <a href="{{ .RelPermalink }}">{{ .Language.Lang }}: {{ .LinkTitle }}{{ if .IsPage }} ({{ i18n "wordCount" . }}){{ end }}</a>
  </li>
  {{ end }}
</ul>
{{ end }}

----------------------------------------

TITLE: Hugo Single Image Resource Rendering
DESCRIPTION: Template code to render a single image resource with error handling.

LANGUAGE: go-html-template
CODE:
{{ $path := "images/a.jpg" }}
{{ with .Resources.Get $path }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ else }}
  {{ errorf "Unable to get page resource %q" $path }}
{{ end }}

----------------------------------------

TITLE: Generating Table of Contents in Hugo Template
DESCRIPTION: Basic template code to generate a table of contents using Hugo's TableOfContents method. This method returns template.HTML containing a navigation structure of page headings.

LANGUAGE: go-html-template
CODE:
{{ .TableOfContents }}

----------------------------------------

TITLE: Implementing Header Partial in Hugo
DESCRIPTION: Example header partial template showing HTML document structure and meta information inclusion.

LANGUAGE: go-html-template
CODE:
<!DOCTYPE html>
<html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#">
<head>
    <meta charset="utf-8">

    {{ partial "meta.html" . }}

    <base href="{{ .Site.BaseURL }}">
    <title> {{ .Title }} : spf13.com </title>
    <link rel="canonical" href="{{ .Permalink }}">
    {{ if .RSSLink }}<link href="{{ .RSSLink }}" rel="alternate" type="application/rss+xml" title="{{ .Title }}" />{{ end }}

    {{ partial "head_includes.html" . }}
</head>

----------------------------------------

TITLE: Ranging Through Page Collection in Hugo Template
DESCRIPTION: This snippet demonstrates how to iterate through a page collection sorted by title in a Hugo template. It creates a list of linked page titles.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Accessing Page Title in Partial Template using Page.Page in Hugo
DESCRIPTION: Illustrates how to access the page title consistently in a partial template using the Page.Page method, which works regardless of whether the partial is called from a shortcode or page template.

LANGUAGE: go-html-template
CODE:
The page title is: {{ .Page.Title }}

----------------------------------------

TITLE: Filtering and Displaying Books Using Hugo's Type Method
DESCRIPTION: Demonstrates how to use the 'Type' method to filter and display pages of type 'books' in a Hugo template, regardless of their section.

LANGUAGE: go-html-template
CODE:
{{ range where .Site.RegularPages.ByTitle "Type" "books" }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Creating Saturation Filter in Hugo Templates
DESCRIPTION: Creates an image filter that adjusts the saturation of an image. The percentage must be between -100 and 500, where 0 has no effect. This filter can be applied to images using Hugo's image processing functions.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Saturation 65 }}

----------------------------------------

TITLE: Sorting Hugo Pages by Publish Date (Ascending)
DESCRIPTION: Demonstrates how to sort and display pages in ascending order based on their publish date using Hugo's ByPublishDate method. The code iterates through sorted pages and creates heading links using page metadata.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByPublishDate }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Using strings.Truncate for Custom Summary Length
DESCRIPTION: Alternative approach to generating summaries using the strings.Truncate function for more precise control over summary length.

LANGUAGE: go-html-template
CODE:
{{ range site.RegularPages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  <div class="summary">
    {{ .Content | strings.Truncate 42 }}
  </div>
{{ end }}

----------------------------------------

TITLE: Accessing Google Analytics ID in Hugo Template
DESCRIPTION: Shows how to retrieve the configured Google Analytics 4 tag ID from within a Hugo template. This value is used for Google Analytics integration.

LANGUAGE: go-html-template
CODE:
{{ .Site.Config.Services.GoogleAnalytics.ID }}

----------------------------------------

TITLE: Hugo Multiple Images Resizing and Rendering
DESCRIPTION: Template code to resize and render all image resources to 300px width.

LANGUAGE: go-html-template
CODE:
{{ range .Resources.ByType "image" }}
  {{ with .Resize "300x" }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Creating a New Hugo Site
DESCRIPTION: This command creates a new Hugo site skeleton in the specified directory. It sets up the correct structure but does not include any content or theme.

LANGUAGE: bash
CODE:
hugo new site [path] [flags]

----------------------------------------

TITLE: Implementing Pagination with Paginator in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Paginator method in a Hugo list template to paginate through pages and include navigation links. It iterates through paginated pages and includes an internal pagination template.

LANGUAGE: go-html-template
CODE:
{{ range .Paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}
{{ template "_internal/pagination.html" . }}

----------------------------------------

TITLE: Menu Template Usage in Hugo Layouts
DESCRIPTION: Example showing how to call the menu partial template with different menu IDs for main and footer navigation.

LANGUAGE: go-html-template
CODE:
{{ partial "menu.html" (dict "menuID" "main" "page" .) }}
{{ partial "menu.html" (dict "menuID" "footer" "page" .) }}

----------------------------------------

TITLE: String-based Time Formatting in Hugo
DESCRIPTION: Shows how to use time.Format with a string representation of a date, converting between different date formats.

LANGUAGE: go-html-template
CODE:
{{ $t := "15 Oct 2023" }}
{{ time.Format "January 2, 2006" $t }} → October 15, 2023

----------------------------------------

TITLE: Rendering Markup with Options in Hugo
DESCRIPTION: Shows how to use RenderString with options. The 'display' option is set to 'block', which wraps the output in paragraph tags. This example demonstrates both inline and block rendering.

LANGUAGE: go-html-template
CODE:
{{ $s := "An *emphasized* word" }}
{{ $s | .RenderString }} → An <em>emphasized</em> word

{{ $opts := dict "display" "block" }}
{{ $s | .RenderString $opts }} → <p>An <em>emphasized</em> word</p>

----------------------------------------

TITLE: Using images.Config to Get Image Dimensions in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the images.Config function to retrieve the width and height of an image file. It accesses the Width and Height properties of the returned image.Config structure.

LANGUAGE: go-html-template
CODE:
{{ $ic := images.Config "/static/images/a.jpg" }}

{{ $ic.Width }} → 600 (int)
{{ $ic.Height }} → 400 (int)

----------------------------------------

TITLE: Multilingual Pagination Configuration in Hugo
DESCRIPTION: This snippet demonstrates how to configure pagination settings for multiple languages in Hugo. It includes language-specific settings for English and German, with custom pagination configurations for each language.

LANGUAGE: toml
CODE:
[languages.en]
contentDir = 'content/en'
languageCode = 'en-US'
languageDirection = 'ltr'
languageName = 'English'
weight = 1
[languages.en.pagination]
disableAliases = true
pagerSize = 10
path = 'page'
[languages.de]
contentDir = 'content/de'
languageCode = 'de-DE'
languageDirection = 'ltr'
languageName = 'Deutsch'
weight = 2
[languages.de.pagination]
disableAliases = true
pagerSize = 20
path = 'blatt'

----------------------------------------

TITLE: Getting Values from hugo.Store
DESCRIPTION: Shows how to retrieve previously set values using the Get method

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.Set "greeting" "Hello" }}
{{ hugo.Store.Get "greeting" }} → Hello

----------------------------------------

TITLE: Basic Usage of 'with' in Hugo Templates
DESCRIPTION: Demonstrates how to use the 'with' function to bind context to an expression and execute a block if the expression is truthy.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ with $var }}
  {{ . }} → foo
{{ end }}

----------------------------------------

TITLE: Processing CSS with Tailwind in Hugo Template
DESCRIPTION: Hugo template partial that processes CSS using the Tailwind CSS CLI with production/development environment handling

LANGUAGE: go-html-template
CODE:
{{ with (templates.Defer (dict "key" "global")) }}
  {{ with resources.Get "css/main.css" }}
    {{ $opts := dict
      "minify" hugo.IsProduction
      "inlineImports" true
    }}
    {{ with . | css.TailwindCSS $opts }}
      {{ if hugo.IsProduction }}
        {{ with . | fingerprint }}
          <link rel="stylesheet" href="{{ .RelPermalink }}" integrity="{{ .Data.Integrity }}" crossorigin="anonymous">
        {{ end }}
      {{ else }}
        <link rel="stylesheet" href="{{ .RelPermalink }}">
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Creating Layout Structure with Custom Templates in Hugo
DESCRIPTION: Illustrates the layout directory structure for targeting specific pages with custom templates.

LANGUAGE: text
CODE:
layouts/
└── page/
    └── contact.html  <-- renders contact.md
    └── single.html   <-- renders about.md

----------------------------------------

TITLE: Basic Hugo Site Deployment with Rclone SFTP
DESCRIPTION: Direct deployment command using Rclone with SFTP without prior configuration. This command builds the site with Hugo's garbage collection and minification, then syncs it to the remote server interactively.

LANGUAGE: txt
CODE:
hugo --gc --minify
rclone sync --interactive --sftp-host sftp.example.com --sftp-user www-data --sftp-ask-password public/ :sftp:www/

----------------------------------------

TITLE: Using Param Method in Hugo Template
DESCRIPTION: Illustrates how to use the Param method in a Hugo template to conditionally display content based on a parameter value.

LANGUAGE: go-html-template
CODE:
{{ if .Param "display_toc" }}
  {{ .TableOfContents }}
{{ end }}

----------------------------------------

TITLE: Basic Link Render Hook Implementation
DESCRIPTION: Basic implementation of a link render hook that follows CommonMark specification, creating an HTML anchor tag with href and optional title attributes.

LANGUAGE: go-html-template
CODE:
<a href="{{ .Destination | safeURL }}"
  {{- with .Title }} title="{{ . }}"{{ end -}}
>
  {{- with .Text }}{{ . }}{{ end -}}
</a>
{{- /* chomp trailing newline */ -}}

----------------------------------------

TITLE: Setting Module Options via Environment Variables in Hugo
DESCRIPTION: This snippet demonstrates how to set module configuration options using environment variables in Hugo. It includes examples for setting proxy, replacements, and workspace.

LANGUAGE: sh
CODE:
export HUGO_MODULE_PROXY="https://proxy.example.org"
export HUGO_MODULE_REPLACEMENTS="github.com/bep/my-theme -> ../.."
export HUGO_MODULE_WORKSPACE="/my/hugo.work"

----------------------------------------

TITLE: Pattern Matching Resources in Hugo Templates
DESCRIPTION: Demonstrates using GetMatch to find the first resource matching a glob pattern and render it as an image.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.GetMatch "images/*.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Directory Structure Example in Hugo Data Directory
DESCRIPTION: Shows the typical organization of data files in Hugo's data directory structure.

LANGUAGE: text
CODE:
data/
├── books/
│   ├── fiction.yaml
│   └── nonfiction.yaml
├── films.json
├── paintings.xml
└── sculptures.toml

----------------------------------------

TITLE: Applying Single Image Filter in Hugo Template
DESCRIPTION: Demonstrates how to apply a single grayscale filter to an image resource using images.Filter function. The code retrieves an image resource and applies the filter, then renders an img tag with the processed image.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with images.Filter images.Grayscale . }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Applying Single Image Filter in Hugo Template
DESCRIPTION: Demonstrates how to apply a single grayscale filter to an image resource using images.Filter function. The code retrieves an image resource and applies the filter, then renders an img tag with the processed image.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with images.Filter images.Grayscale . }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Multilingual Hugo Parameters Configuration
DESCRIPTION: Configuration example for multilingual sites with language-specific parameters.

LANGUAGE: toml
CODE:
baseURL = 'https://example.org/'
defaultContentLanguage = 'en'

[languages.de]
languageCode = 'de-DE'
languageDirection = 'ltr'
languageName = 'Deutsch'
title = 'Projekt Dokumentation'
weight = 1

[languages.de.params]
subtitle = 'Referenz, Tutorials und Erklärungen'

[languages.de.params.contact]
email = 'info@de.example.org'
phone = '+49 30 1234567'

[languages.en]
languageCode = 'en-US'
languageDirection = 'ltr'
languageName = 'English'
title = 'Project Documentation'
weight = 2

[languages.en.params]
subtitle = 'Reference, Tutorials, and Explanations'

[languages.en.params.contact]
email = 'info@example.org'
phone = '+1 206-555-1212'

----------------------------------------

TITLE: Creating Tailwind CSS Entry File
DESCRIPTION: CSS entry file configuration that imports Tailwind CSS and sources hugo_stats.json for utility class scanning

LANGUAGE: css
CODE:
@import "tailwindcss";
@source "hugo_stats.json";

----------------------------------------

TITLE: Configuring Custom Date Parameters in Hugo
DESCRIPTION: This snippet demonstrates how to set custom date parameters in Hugo's configuration. It shows how to prioritize a custom 'myDate' field over the default 'date' field for the Date method.

LANGUAGE: toml
CODE:
[frontmatter]
date = ["myDate", "date"]

----------------------------------------

TITLE: Rendering List Items with Hugo's Render Method
DESCRIPTION: This snippet shows how to use the Render method to create a list of pages sorted by date. It iterates over site.RegularPages.ByDate and renders each page using an 'li' template, which is determined based on the content type.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range site.RegularPages.ByDate }}
    {{ .Render "li" }}
  {{ end }}
</ul>

----------------------------------------

TITLE: Sorting Pages by Nested Parameter (Hugo)
DESCRIPTION: This snippet illustrates how to use the ByParam function to sort a page collection by a nested parameter 'author.last_name' using dot notation. It then iterates through the sorted pages and displays a link for each page.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByParam "author.last_name" }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Getting Current Time in Hugo Templates
DESCRIPTION: Basic usage of time.Now function to get the current local time in Hugo templates. Returns a time.Time value.

LANGUAGE: go-html-template
CODE:
{{ time.Now }}

----------------------------------------

TITLE: Date Comparison with collections.Where in Hugo
DESCRIPTION: Illustrates date comparisons using collections.Where, including predefined and custom date fields.

LANGUAGE: go-html-template
CODE:
{{ $startOfYear := time.AsTime (printf "%d-01-01" now.Year) }}
{{ $pages := where .Site.RegularPages "Date" "lt" $startOfYear }}

----------------------------------------

TITLE: Adding Image Border Using Dominant Color
DESCRIPTION: Shows how to add a border to an image using either the most dominant color or darkest dominant color.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ $mostDominant := index .Colors 0 }}
  {{ $filter := images.Padding 5 $mostDominant }}
  {{ with .Filter $filter }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Multiple Conditions with 'else with' in Hugo Templates
DESCRIPTION: Illustrates how to use 'else with' to check multiple conditions in a single block.

LANGUAGE: go-html-template
CODE:
{{ $v1 := 0 }}
{{ $v2 := 42 }}
{{ with $v1 }}
  {{ . }}
{{ else with $v2 }}
  {{ . }} → 42
{{ else }}
  {{ print "v1 and v2 are falsy" }}
{{ end }}

----------------------------------------

TITLE: Installing Hugo Extended Edition via Snap on Linux
DESCRIPTION: Commands to install the extended edition of Hugo using the Snap package manager on Linux. Also includes commands to manage removable media and SSH key access.

LANGUAGE: sh
CODE:
sudo snap install hugo

LANGUAGE: sh
CODE:
sudo snap connect hugo:removable-media
sudo snap disconnect hugo:removable-media

LANGUAGE: sh
CODE:
sudo snap connect hugo:ssh-keys
sudo snap disconnect hugo:ssh-keys

----------------------------------------

TITLE: Including Google Analytics Template in Hugo
DESCRIPTION: This snippet shows how to include Hugo's embedded Google Analytics 4 template in your site. It requires a Google Analytics ID to be configured in the site settings.

LANGUAGE: go-html-template
CODE:
{{ template "_internal/google_analytics.html" . }}

----------------------------------------

TITLE: Enabling Robots.txt Generation in Hugo Configuration
DESCRIPTION: Configuration setting to enable automatic robots.txt generation in Hugo sites.

LANGUAGE: text
CODE:
enableRobotsTXT = true

----------------------------------------

TITLE: Using GetPage Method in Hugo Templates
DESCRIPTION: This snippet demonstrates various ways to use the GetPage method in Hugo templates, including relative and absolute paths to retrieve Page objects. It shows examples of accessing pages within the same directory, parent directory, and from the root of the content folder.

LANGUAGE: go-html-template
CODE:
{{ with .GetPage "starry-night" }}
  {{ .Title }} → Starry Night
{{ end }}

{{ with .GetPage "./starry-night" }}
  {{ .Title }} → Starry Night
{{ end }}

{{ with .GetPage "../paintings/starry-night" }}
  {{ .Title }} → Starry Night
{{ end }}

{{ with .GetPage "/works/paintings/starry-night" }}
  {{ .Title }} → Starry Night
{{ end }}

{{ with .GetPage "../sculptures/david" }}
  {{ .Title }} → David
{{ end }}

{{ with .GetPage "/works/sculptures/david" }}
  {{ .Title }} → David
{{ end }}

----------------------------------------

TITLE: Returning Values from Cached Partials in Hugo Templates
DESCRIPTION: Demonstrates how to return a value from a partial template using a single return statement at the end of the template.

LANGUAGE: go-html-template
CODE:
{{ $result := "" }}
{{ if math.ModBool . 2 }}
  {{ $result = "even" }}
{{ else }}
  {{ $result = "odd" }}
{{ end }}
{{ return $result }}

----------------------------------------

TITLE: Generating Hugo Meta Tag in Go HTML Template
DESCRIPTION: Demonstrates how to use the hugo.Generator function to insert a meta tag that identifies the Hugo version used to generate the site. The function returns template.HTML containing a meta element with name='generator' and a content attribute showing the Hugo version.

LANGUAGE: go-html-template
CODE:
{{ hugo.Generator }} → <meta name="generator" content="Hugo 0.144.2">

----------------------------------------

TITLE: Configuring Markdown Attributes for Block Elements in Hugo
DESCRIPTION: Illustrates how to enable Markdown attributes for block-level elements in Hugo's configuration file.

LANGUAGE: toml
CODE:
[markup.goldmark.parser.attribute]
title = true # default is true
block = true # default is false

----------------------------------------

TITLE: Creating Color Table with Dominant Colors
DESCRIPTION: Demonstrates how to create an HTML table showing dominant colors from an image with their hexadecimal values and relative luminance.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  <table>
    <thead>
      <tr>
        <th>Color</th>
        <th>Relative luminance</th>
      </tr>
    </thead>
    <tbody>
      {{ range .Colors }}
        <tr>
          <td>{{ .ColorHex }}</td>
          <td>{{ .Luminance | lang.FormatNumber 4 }}</td>
        </tr>
      {{ end }}
    </tbody>
  </table>
{{ end }}

----------------------------------------

TITLE: Site-wide Regular Pages Iteration in Hugo
DESCRIPTION: Shows how to recursively access all regular pages across the entire site using the Site object.

LANGUAGE: go-html-template
CODE:
{{ range .Site.RegularPages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Breadcrumb Navigation Partial
DESCRIPTION: Shows how to pass the current page context to a breadcrumbs partial.

LANGUAGE: go-html-template
CODE:
{{ partial "breadcrumbs.html" . }}

----------------------------------------

TITLE: Highlighting Bash Commands with Dictionary Options
DESCRIPTION: This snippet demonstrates using transform.Highlight with Bash commands and passing options as a dictionary. It applies line numbers in a table format and uses the 'dracula' highlighting style.

LANGUAGE: go-html-template
CODE:
{{ $input := `echo "Hello World!"` }}
{{ $lang := "bash" }}
{{ $opts := dict "lineNos" "table" "style" "dracula" }}
{{ transform.Highlight $input $lang $opts }}

----------------------------------------

TITLE: Section-specific Ugly URL Configuration in Hugo
DESCRIPTION: Configuration example showing how to enable ugly URLs for specific sections while maintaining pretty URLs for others.

LANGUAGE: text
CODE:
[uglyURLs]
books = true
films = false

----------------------------------------

TITLE: Directory Structure Example - Content Organization
DESCRIPTION: Shows the basic directory structure for Hugo content files including section pages and content files

LANGUAGE: text
CODE:
content/
└── books/
    ├── _index.md  <-- the top-slevel section page
    ├── book-1.md
    └── book-2.md

----------------------------------------

TITLE: Using 'or' Function in Hugo Templates
DESCRIPTION: Demonstrates the usage of the 'or' function in Hugo templates. The function returns the first truthy argument, or the last argument if all are falsy. It showcases various combinations of truthy and falsy values.

LANGUAGE: go-html-template
CODE:
{{ or 0 1 2 }} → 1
{{ or false "a" 1 }} → a
{{ or 0 true "a" }} → true

{{ or false "" 0 }} → 0
{{ or 0 "" false }} → false

----------------------------------------

TITLE: GitHub Actions Workflow Configuration for Hugo
DESCRIPTION: Complete GitHub Actions workflow configuration for building and deploying a Hugo site to GitHub Pages. Includes steps for installing Hugo CLI, Dart Sass, and handling deployment

LANGUAGE: yaml
CODE:
# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.144.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Configuring 404 Error Handling
DESCRIPTION: Shows how to set up 404 error redirects for missing pages.

LANGUAGE: toml
CODE:
[[redirects]]
force = false
from   = "/**"
to     = "/404.html"
status = 404

----------------------------------------

TITLE: Iterating Over Categorized Book Data in Hugo Templates
DESCRIPTION: Hugo template code demonstrating how to loop through categorized book data and generate HTML output.

LANGUAGE: go-html-template
CODE:
{{ range $category, $books := .Site.Data.books }}
  <p>{{ $category | title }}</p>
  <ul>
    {{ range $books }}
      <li>{{ .title }} ({{ .isbn }})</li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Retrieving HTTP Response Data from Remote Resource in Hugo
DESCRIPTION: Example showing how to fetch a remote resource and access its HTTP response data including content length, type, headers, status, and transfer encoding. Uses error handling with try block and demonstrates accessing various Data method properties.

LANGUAGE: go-html-template
CODE:
{{ $url := "https://example.org/images/a.jpg" }}
{{ $opts := dict "responseHeaders" (slice "Server") }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ with .Data }}
      {{ .ContentLength }} → 42764
      {{ .ContentType }} → image/jpeg
      {{ .Headers }} → map[Server:[Netlify]]
      {{ .Status }} → 200 OK
      {{ .StatusCode }} → 200
      {{ .TransferEncoding }} → []
    {{ end }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Retrieving Site Title in Hugo Template
DESCRIPTION: Demonstrates how to access the site's title using the Site object in a Hugo template. The Site object provides access to global site configuration and metadata.

LANGUAGE: go-html-template
CODE:
{{ .Site.Title }}

----------------------------------------

TITLE: Sorting Pages Within Groups by Title in Hugo Templates
DESCRIPTION: This snippet demonstrates how to group pages by last modification date and then sort the pages within each group by title. It uses the ByTitle method to sort the pages within the groups.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByLastmod "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages.ByTitle }}
      <li><a href="{{ .RelPermalink }}">{{ .Title }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Grouping Pages by Event Date in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use GroupByParamDate to group pages by the 'eventDate' parameter, formatting the date as 'Month Year'. It creates a nested structure with groups and their associated pages.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByParamDate "eventDate" "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Implementing GetFeatured Partial in Hugo
DESCRIPTION: Example of a partial template that returns featured pages with a limit parameter.

LANGUAGE: go-html-template
CODE:
{{/* layouts/partials/GetFeatured.html */}}
{{ return first . (where site.RegularPages "Params.featured" true) }}

LANGUAGE: go-html-template
CODE:
{{/* layouts/index.html */}}
{{ range partial "GetFeatured.html" 5 }}
  [...]
{{ end }}

----------------------------------------

TITLE: Checking Hugo Production Environment Status
DESCRIPTION: Demonstrates how to use hugo.IsProduction to determine if the current Hugo environment is set to production. Returns true if running in production mode, false otherwise.

LANGUAGE: go-html-template
CODE:
{{ hugo.IsProduction }} → true/false

----------------------------------------

TITLE: Using 'else' with 'range' Statement in Hugo Go Templates
DESCRIPTION: This snippet illustrates how to use the 'else' statement with a 'range' loop in Hugo Go templates. It iterates over a slice and provides an alternative output if the slice is empty.

LANGUAGE: go-html-template
CODE:
{{ $var := slice 1 2 3 }}
{{ range $var }}
  {{ . }} → 1 2 3 
{{ else }}
  {{ print "var is falsy" }}
{{ end }}

----------------------------------------

TITLE: Rendering Content Summary View in Hugo List Template
DESCRIPTION: This snippet demonstrates how to use the .Render function in a list template to render content using a 'summary' view template. It iterates through .Pages and calls .Render "summary" for each page.

LANGUAGE: go-html-template
CODE:
<main id="main">
  <div>
    <h1 id="title">{{ .Title }}</h1>
    {{ range .Pages }}
      {{ .Render "summary" }}
    {{ end }}
  </div>
</main>

----------------------------------------

TITLE: Executing and publishing a CSS template in Hugo
DESCRIPTION: This snippet shows how to use resources.ExecuteAsTemplate to process a CSS template and publish it as a stylesheet in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "css/template.css" }}
  {{ with resources.ExecuteAsTemplate "css/main.css" $ . }}
    <link rel="stylesheet" href="{{ .RelPermalink }}">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Importing Theme as Hugo Module
DESCRIPTION: Shows how to import a theme as a Hugo Module by adding it to the configuration file. This is done after initializing the Hugo module system.

LANGUAGE: toml
CODE:
[module]
  [[module.imports]]
    path = "github.com/spf13/hyde"

----------------------------------------

TITLE: Grouping Pages by Date in Hugo Templates
DESCRIPTION: Groups content pages by date using January 2006 format in descending order. Creates a nested structure with date groups containing lists of page links.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByDate "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Applying Dither Filter in Hugo Templates
DESCRIPTION: Demonstrates different ways to create and apply the dither filter, with both custom and default options.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Dither $opts }}

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Dither }}

----------------------------------------

TITLE: Content View Implementation in Hugo
DESCRIPTION: Example of content view templates showing both the home template and card component rendering.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  {{ .Content }}
  <ul>
    {{ range where site.RegularPages "Section" "articles" }}
      {{ .Render "card" }}
    {{ end }}
  </ul>
{{ end }}

LANGUAGE: go-html-template
CODE:
<div class="card">
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ .Summary }}
</div>

----------------------------------------

TITLE: Variable Scoping with 'with' in Hugo Templates
DESCRIPTION: Demonstrates how to initialize a variable scoped to the current block using 'with'.

LANGUAGE: go-html-template
CODE:
{{ with $var := 42 }}
  {{ . }} → 42
  {{ $var }} → 42
{{ end }}
{{ $var }} → undefined

----------------------------------------

TITLE: Grouping Pages by Year and Month in Hugo Templates
DESCRIPTION: Groups pages by publish date using January 2006 format, creating a nested structure with dates as keys and corresponding pages as values.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByPublishDate "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Executing Hugo Version Command in Bash
DESCRIPTION: This command displays the version and environment information for Hugo. It's useful for generating bug reports and verifying the installed Hugo version.

LANGUAGE: bash
CODE:
hugo version [flags] [args]

----------------------------------------

TITLE: Sorted RegularPages Iteration in Hugo Templates
DESCRIPTION: Shows how to iterate through regular pages with custom sorting applied using the ByTitle method, displaying each page's title and permalink.

LANGUAGE: go-html-template
CODE:
{{ range .Site.RegularPages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Sorting Hugo Pages by Title in Descending Order
DESCRIPTION: Shows how to sort Hugo pages by title in descending order using the ByTitle.Reverse method. The code creates heading links with page titles and relative permalinks in reverse alphabetical order.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByTitle.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Displaying Hugo Content Structure
DESCRIPTION: Shows the directory structure for content in a Hugo project, illustrating how content types are organized.

LANGUAGE: text
CODE:
content/
├── auction/
│   ├── _index.md
│   ├── item-1.md
│   └── item-2.md  <-- front matter: type = books
├── books/
│   ├── _index.md
│   ├── book-1.md
│   └── book-2.md
├── films/
│   ├── _index.md
│   ├── film-1.md 
│   └── film-2.md
└── _index.md

----------------------------------------

TITLE: Single Page Template Implementation
DESCRIPTION: Shows how to implement the 'main' block for single content pages, displaying title and content.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
{{ end }}

----------------------------------------

TITLE: Configuring Goldmark Parser Settings in Hugo
DESCRIPTION: Configuration settings for controlling the sanitizing behavior of the anchorize function and Markdown heading ID generation through the Goldmark parser.

LANGUAGE: toml
CODE:
[markup.goldmark.parser]
autoHeadingIDType = 'github'

----------------------------------------

TITLE: Accessing Resource SubType
DESCRIPTION: Demonstrates how to get the subtype portion (e.g., 'jpeg') from a resource's media type.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ .MediaType.SubType }} → jpeg
{{ end }}

----------------------------------------

TITLE: Sorting Pages by Language in Descending Order
DESCRIPTION: This snippet shows how to sort all pages in a Hugo site by language in descending order using the ByLanguage method followed by Reverse. It creates a list of links from the sorted pages.

LANGUAGE: go-html-template
CODE:
{{ range .Site.AllPages.ByLanguage.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Running Hugo with Deprecation Info Logging
DESCRIPTION: Commands to view deprecation notices when running Hugo. Shows how to enable info-level logging and filter for deprecation-specific messages.

LANGUAGE: text
CODE:
hugo --logLevel info

LANGUAGE: text
CODE:
hugo --logLevel info | grep deprecate

----------------------------------------

TITLE: Example Output of time.Now
DESCRIPTION: Shows the string representation of the time.Time value returned by time.Now function.

LANGUAGE: text
CODE:
2023-10-15 12:59:28.337140706 -0700 PDT m=+0.041752605

----------------------------------------

TITLE: Displaying Related Content with Filtered Headings in Hugo
DESCRIPTION: This snippet demonstrates how to display related content along with filtered headings. It uses the HeadingsFiltered property to show relevant headings for each related page, creating a nested list structure with links to specific sections.

LANGUAGE: go-html-template
CODE:
{{ $related := .Site.RegularPages.Related . | first 5 }}
{{ with $related }}
  <h2>See Also</h2>
  <ul>
    {{ range $i, $p := . }}
      <li>
        <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
        {{ with .HeadingsFiltered }}
          <ul>
            {{ range . }}
              {{ $link := printf "%s#%s" $p.RelPermalink .ID | safeURL }}
              <li>
                <a href="{{ $link }}">{{ .Title }}</a>
              </li>
            {{ end }}
          </ul>
        {{ end }}
      </li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Complete Image Processing Pipeline with Dithering
DESCRIPTION: Shows a complete example of processing an image with resizing, dithering with dominant colors, and format conversion.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "original.jpg" }}
  {{ $opts := dict
    "method" "ClusteredDotSpiral5x5"
    "colors" (first 3 .Colors)
  }}
  {{ $filters := slice
    (images.Process "resize 800x")
    (images.Dither $opts)
    (images.Process "png")
  }}
  {{ with . | images.Filter $filters }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Displaying Page Summaries in Hugo Templates
DESCRIPTION: Basic template code to display page summaries beneath page links in a section. Iterates through pages and shows their link titles and summaries.

LANGUAGE: go-html-template
CODE:
{{ range .Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ .Summary }}
{{ end }}

----------------------------------------

TITLE: Using Break in Hugo Range Loop
DESCRIPTION: Example showing how to use break statement to exit a range loop when encountering the value 'bar'. The loop iterates over a slice but stops processing when it hits the specified condition.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "foo" "bar" "baz" }}
{{ range $s }}
  {{ if eq . "bar" }}
    {{ break }}
  {{ end }}
  <p>{{ . }}</p>
{{ end }}

----------------------------------------

TITLE: Applying Hue Rotation Filter to Image in Hugo
DESCRIPTION: This snippet shows how to apply the hue rotation filter to an image using Hugo's img shortcode. It includes parameters for the source image, alt text, filter type, and filter arguments.

LANGUAGE: go-html-template
CODE:
{{< img
  src="images/examples/zion-national-park.jpg"
  alt="Zion National Park"
  filter="Hue"
  filterArgs="-15"
  example=true
>}}

----------------------------------------

TITLE: Defining Tags in Hugo Front Matter
DESCRIPTION: Example of defining tags in the front matter of a Hugo content file. This sets up the taxonomy terms that will be retrieved by GetTerms.

LANGUAGE: yaml
CODE:
title = 'Les Misérables'
tags = ['historical','classic','fiction']

----------------------------------------

TITLE: Basic String Replacement in Hugo Templates
DESCRIPTION: Shows how to perform a basic string replacement using strings.Replace function to replace 'Robin' with 'Catwoman' in a string variable.

LANGUAGE: go-html-template
CODE:
{{ $s := "Batman and Robin" }}
{{ replace $s "Robin" "Catwoman" }} → Batman and Catwoman

----------------------------------------

TITLE: Sorting Map Values in hugo.Store
DESCRIPTION: Demonstrates retrieving sorted map values using GetSortedMapValues

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.SetInMap "greetings" "english" "Hello" }}
{{ hugo.Store.SetInMap "greetings" "french" "Bonjour" }}
{{ hugo.Store.GetSortedMapValues "greetings" }} → [Hello Bonjour]

----------------------------------------

TITLE: Adding Pages with Hugo Content Adapter
DESCRIPTION: Example of using AddPage method to create a new page with markdown content and metadata.

LANGUAGE: go-html-template
CODE:
{{ $content := dict
  "mediaType" "text/markdown"
  "value" "The _Hunchback of Notre Dame_ was written by Victor Hugo."
}}
{{ $page := dict
  "content" $content
  "kind" "page"
  "path" "the-hunchback-of-notre-dame"
  "title" "The Hunchback of Notre Dame"
}}
{{ .AddPage $page }}

----------------------------------------

TITLE: Retrieving Taxonomy Page with Safety Check in Hugo Templates
DESCRIPTION: Demonstrates how to safely retrieve and display a taxonomy page link using the .Page method, including a defensive check using 'with' to handle cases where the taxonomy has no terms.

LANGUAGE: go-html-template
CODE:
{{ with .Site.Taxonomies.tags.Page }}
  <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
{{ end }}

----------------------------------------

TITLE: File Structure Example for Pages Not Backed by Files
DESCRIPTION: Shows the content directory structure for demonstrating path behavior with non-file pages

LANGUAGE: text
CODE:
content/
└── posts/
    └── post-1.md  <-- front matter: tags = ['hugo']

----------------------------------------

TITLE: Example of Syntax Highlighted Code in AsciiDoc
DESCRIPTION: This text snippet shows how to include syntax-highlighted code in an AsciiDoc document. It demonstrates the use of language-specific code blocks with AsciiDoc syntax.

LANGUAGE: text
CODE:
[#hello,ruby]
----
require 'sinatra'

get '/hi' do
  "Hello World!"
end
----

----------------------------------------

TITLE: Grayscale Dithering Pipeline in Hugo
DESCRIPTION: Demonstrates a complete image processing pipeline with grayscale conversion before dithering for optimal results with grayscale palettes.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "colors" (slice "222" "808080" "ddd") }}
{{ $filters := slice
  (images.Process "resize 800x")
  (images.Grayscale)
  (images.Dither $opts)
  (images.Process "png")
}}
{{ with images.Filter $filters . }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Configuring Multiple Theme Components in Hugo
DESCRIPTION: This snippet demonstrates how to configure multiple theme components in a Hugo project's configuration file. It shows the syntax for specifying multiple themes in order of precedence.

LANGUAGE: toml
CODE:
theme = ["my-shortcodes", "base-theme", "hyde"]

----------------------------------------

TITLE: Enabling GitInfo via Command Line
DESCRIPTION: Demonstrates how to enable Git information using Hugo command line flag.

LANGUAGE: sh
CODE:
hugo --enableGitInfo

----------------------------------------

TITLE: Creating Section Links with CurrentSection in Hugo Templates
DESCRIPTION: Shows how to create an HTML link to the current section page using Hugo's CurrentSection method along with RelPermalink and LinkTitle properties.

LANGUAGE: go-html-template
CODE:
<a href="{{ .CurrentSection.RelPermalink }}">{{ .CurrentSection.LinkTitle }}</a>

----------------------------------------

TITLE: Using Prev Function in Hugo Templates
DESCRIPTION: The Prev function returns the previous page.Page object in a site's collection of regular pages, relative to the current page. It is typically used for navigation purposes in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ .Prev }}

----------------------------------------

TITLE: Sorting Menu Entries Using ByWeight in Hugo Templates
DESCRIPTION: Go HTML template code demonstrating how to use the ByWeight method to sort and display menu entries in Hugo.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main.ByWeight }}
    <li><a href="{{ .URL }}">{{ .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Using 'with' and 'else' in Hugo Templates
DESCRIPTION: Shows how to combine 'with' and 'else' statements to handle both truthy and falsy conditions.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ with $var }}
  {{ . }} → foo
{{ else }}
  {{ print "var is falsy" }}
{{ end }}

----------------------------------------

TITLE: Defining Menu Entries in Hugo Configuration
DESCRIPTION: Example of defining menu entries in Hugo's configuration file, specifying identifier, name, pageRef, and weight for each entry.

LANGUAGE: toml
CODE:
[[menus.main]]
identifier = 'about'
name = 'About'
pageRef = '/about'
weight = 20

[[menus.main]]
identifier = 'services'
name = 'Services'
pageRef = '/services'
weight = 10

[[menus.main]]
identifier = 'contact'
name = 'Contact'
pageRef = '/contact'
weight = 30

----------------------------------------

TITLE: Advanced YouTube Shortcode Usage in Hugo
DESCRIPTION: Example of using the YouTube shortcode with multiple arguments in Hugo, including start time, end time, and loading behavior.

LANGUAGE: text
CODE:
{{</* youtube id=0RKpf3rK57I start=30 end=60 loading=lazy */>}}

----------------------------------------

TITLE: Rendering Nested Menu with HasChildren in Hugo Template
DESCRIPTION: This Go HTML template snippet demonstrates how to use the HasChildren method to render a nested menu structure. It iterates through the main menu, checking for child entries and rendering them accordingly.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li>
      <a href="{{ .URL }}">{{ .Name }}</a>
      {{ if .HasChildren }}
        <ul>
          {{ range .Children }}
            <li><a href="{{ .URL }}">{{ .Name }}</a></li>
          {{ end }}
        </ul>
      {{ end }}
    </li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Building Extended/Deploy Hugo Edition
DESCRIPTION: Command to build the extended edition of Hugo with deploy capabilities enabled. Requires Go 1.23.0+, C compiler (GCC/Clang), and proper PATH configuration.

LANGUAGE: sh
CODE:
CGO_ENABLED=1 go install -tags extended,withdeploy github.com/gohugoio/hugo@latest

----------------------------------------

TITLE: Using path.Join in Hugo Templates
DESCRIPTION: Demonstrates various usage examples of path.Join function for combining path elements. The function replaces path separators with forward slashes, joins multiple path elements, and applies path cleaning rules including handling of relative path components like '.' and '..'.

LANGUAGE: go-html-template
CODE:
{{ path.Join "partial" "news.html" }} → partial/news.html
{{ path.Join "partial/" "news.html" }} → partial/news.html
{{ path.Join "foo/bar" "baz" }} → foo/bar/baz
{{ path.Join "foo" "bar" "baz" }} → foo/bar/baz
{{ path.Join "foo" "" "baz" }} → foo/baz
{{ path.Join "foo" "." "baz" }} → foo/baz
{{ path.Join "foo" ".." "baz" }} → baz
{{ path.Join "/..", "foo" ".." "baz" }} → baz

----------------------------------------

TITLE: Rendered HTML Output with Unique IDs
DESCRIPTION: Shows the resulting HTML output after Hugo processes the shortcodes. Each img element has a unique ID based on its ordinal position.

LANGUAGE: html
CODE:
<img id="img-000" src="/images/a.jpg" width="600" height="400" alt="">
<img id="img-001" src="/images/b.jpg" width="600" height="400" alt="">

----------------------------------------

TITLE: Example Hugo Content Structure
DESCRIPTION: Shows a typical Hugo content directory structure with nested sections, regular pages, and resource directories.

LANGUAGE: text
CODE:
content/
├── lessons/
│   ├── lesson-1/
│   │   ├── _index.md
│   │   ├── part-1.md
│   │   └── part-2.md
│   ├── lesson-2/
│   │   ├── resources/
│   │   │   ├── task-list.md
│   │   │   └── worksheet.md
│   │   ├── _index.md
│   │   ├── part-1.md
│   │   └── part-2.md
│   ├── _index.md
│   ├── grading-policy.md
│   └── lesson-plan.md
├── _index.md
├── contact.md
└── legal.md

----------------------------------------

TITLE: Reversing Next/Previous Page Order in Hugo Configuration
DESCRIPTION: This code snippet demonstrates how to reverse the meaning of 'next' and 'previous' in Hugo's page navigation by modifying the site configuration. It sets both 'nextPrevInSectionSortOrder' and 'nextPrevSortOrder' to 'asc'.

LANGUAGE: toml
CODE:
[page]
  nextPrevInSectionSortOrder = 'asc'
  nextPrevSortOrder = 'asc'

----------------------------------------

TITLE: Sorting Pages by Parameter in Descending Order (Hugo)
DESCRIPTION: This snippet shows how to sort a page collection by the 'author' parameter in descending order using the ByParam function followed by Reverse. It then iterates through the sorted pages and displays a link for each page.

LANGUAGE: go-html-template
CODE:
{{ range (.Pages.ByParam "author").Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Retrieving Environment Variables in Hugo Templates
DESCRIPTION: Demonstrates how to use the getenv function to retrieve environment variable values within Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ getenv "HOME" }} → /home/victor
{{ getenv "USER" }} → victor

----------------------------------------

TITLE: Accessing Language Tag
DESCRIPTION: Demonstrates how to retrieve the language tag defined by RFC 5646

LANGUAGE: go-html-template
CODE:
{{ .Site.Language.Lang }} → de

----------------------------------------

TITLE: Breadcrumb Navigation Template
DESCRIPTION: Advanced Hugo template that creates an accessible breadcrumb navigation using the Ancestors method with Reverse ordering.

LANGUAGE: go-html-template
CODE:
<nav aria-label="breadcrumb" class="breadcrumb">
  <ol>
    {{ range .Ancestors.Reverse }}
      <li>
        <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
      </li>
    {{ end }}
    <li class="active">
      <a aria-current="page" href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
    </li>
  </ol>
</nav>

----------------------------------------

TITLE: Illustrating Default Content Organization in Hugo
DESCRIPTION: Demonstrates how content should be organized to reflect the rendered website structure, showing the relationship between file locations and URLs.

LANGUAGE: text
CODE:
.
└── content
    └── about
    |   └── index.md  // <- https://example.org/about/
    ├── posts
    |   ├── firstpost.md   // <- https://example.org/posts/firstpost/
    |   ├── happy
    |   |   └── ness.md  // <- https://example.org/posts/happy/ness/
    |   └── secondpost.md  // <- https://example.org/posts/secondpost/
    └── quote
        ├── first.md       // <- https://example.org/quote/first/
        └── second.md      // <- https://example.org/quote/second/

----------------------------------------

TITLE: Inspecting Unmarshaled OpenAPI 3 Data in Hugo
DESCRIPTION: This snippet shows how to inspect the data structure of an unmarshaled OpenAPI 3 document using Hugo's debug.Dump function.

LANGUAGE: go-html-template
CODE:
<pre>{{ debug.Dump $api }}</pre>

----------------------------------------

TITLE: Counting Weighted Pages in Hugo Taxonomy
DESCRIPTION: Demonstrates how to use the Count method on a Taxonomy object to get the number of weighted pages associated with a specific term. In this example, it counts pages tagged with the 'suspense' genre.

LANGUAGE: go-html-template
CODE:
{{ $taxonomyObject.Count "suspense" }} → 3

----------------------------------------

TITLE: Accessing Language Code
DESCRIPTION: Shows how to get the language code from site configuration

LANGUAGE: go-html-template
CODE:
{{ .Site.Language.LanguageCode }} → de-DE

----------------------------------------

TITLE: Content Directory Structure Example - Hugo
DESCRIPTION: Shows a typical Hugo content directory structure with different resource types, including page resources and image resources within lesson subdirectories.

LANGUAGE: text
CODE:
content/
├── lessons/
│   ├── lesson-1/
│   │   ├── _objectives.md  <-- resource type = page
│   │   ├── _topics.md      <-- resource type = page
│   │   ├── _example.jpg    <-- resource type = image
│   │   └── index.md
│   └── _index.md
└── _index.md

----------------------------------------

TITLE: Checking Hugo Server Status with IsServer
DESCRIPTION: Returns a boolean indicating whether Hugo's built-in development server is currently running. This function was introduced in Hugo version 0.120.0 and is useful for implementing development-specific template logic.

LANGUAGE: go-html-template
CODE:
{{ hugo.IsServer }} → true/false

----------------------------------------

TITLE: Setting Hugo Environment via Command Line
DESCRIPTION: Demonstrates how to set the Hugo environment using the command line. The environment is automatically set to 'development' when using the built-in server, and 'production' when building the site. It can be overridden using the --environment flag.

LANGUAGE: bash
CODE:
hugo server # Sets environment to 'development'
hugo # Sets environment to 'production'
hugo --environment staging # Overrides environment to 'staging'

----------------------------------------

TITLE: Setting Background Color with Process Filter
DESCRIPTION: Demonstrates how to set a background color for masked areas using the Process filter.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Process "#00ff00" }}

----------------------------------------

TITLE: Generating Alternative Output Format Links in Hugo Templates
DESCRIPTION: Go template code to create link elements for alternative output formats in the head of an HTML document.

LANGUAGE: go-html-template
CODE:
{{ range .AlternativeOutputFormats }}
  <link rel="{{ .Rel }}" type="{{ .MediaType.Type }}" href="{{ .Permalink | safeURL }}">
{{ end }}

----------------------------------------

TITLE: Using debug.Dump in Hugo Templates
DESCRIPTION: Demonstrates how to use the debug.Dump function in a Hugo template to output the contents of site.Data.books. This function returns an object dump as a string, which is useful for debugging purposes.

LANGUAGE: go-html-template
CODE:
<pre>{{ debug.Dump site.Data.books }}</pre>

----------------------------------------

TITLE: Checking True Values with If/With Statements
DESCRIPTION: Demonstrates how to check for existence of true values using Hugo's if and with statements in templates.

LANGUAGE: go-html-template
CODE:
{{ if site.Params.showHeroImage }}
  {{ site.Params.showHeroImage }} → true
{{ end }}

{{ with site.Params.showHeroImage }}
  {{ . }} → true
{{ end }}

----------------------------------------

TITLE: Configuring Hugo Build with Tailwind Cache Busters
DESCRIPTION: Configuration example showing how to set up cache busters for Tailwind 3.x JIT compiler integration. Includes settings for build stats and file watching patterns for different asset types.

LANGUAGE: toml
CODE:
[build]
  [build.buildStats]
    enable = true
  [[build.cachebusters]]
    source = "assets/watching/hugo_stats\\.json"
    target = "styles\\.css"
  [[build.cachebusters]]
    source = "(postcss|tailwind)\\.config\\.js"
    target = "css"
  [[build.cachebusters]]
    source = "assets/.*\\.(js|ts|jsx|tsx)"
    target = "js"
  [[build.cachebusters]]
    source = "assets/.*\\.(.*)$"
    target = "$1"

----------------------------------------

TITLE: Rounding Numbers Using math.Round in Hugo
DESCRIPTION: Demonstrates rounding a decimal number to the nearest integer using Hugo's math.Round function. The function rounds half values away from zero, so 1.5 rounds up to 2.

LANGUAGE: go-html-template
CODE:
{{ math.Round 1.5 }} → 2

----------------------------------------

TITLE: Running Hugo Server Command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the 'hugo server' command. It starts Hugo's embedded web server, which builds and serves the site. The command can accept additional flags to customize its behavior.

LANGUAGE: bash
CODE:
hugo server [command] [flags]

----------------------------------------

TITLE: Checking Hugo Extended Binary Status in Go Templates
DESCRIPTION: Template function that returns a boolean indicating whether the current Hugo binary is running as an extended edition. Returns true for extended or extended/deploy editions, false for standard editions.

LANGUAGE: go-html-template
CODE:
{{ hugo.IsExtended }} → true/false

----------------------------------------

TITLE: Defining Single Menu Entry in Front Matter
DESCRIPTION: Front matter configuration to add a page to the main menu in Hugo.

LANGUAGE: toml
CODE:
title = 'About'
menus = 'main'

----------------------------------------

TITLE: Multilingual 404 Configuration With Subdirectory
DESCRIPTION: Configuration for 404 handling in multilingual sites when default language is served from a subdirectory.

LANGUAGE: toml
CODE:
defaultContentLanguage = 'en'
defaultContentLanguageInSubdir = true
[[redirects]]
from = '/fr/**'
to = '/fr/404.html'
status = 404

[[redirects]]
from = '/**'
to = '/en/404.html'
status = 404

----------------------------------------

TITLE: Basic Image Fitting in Hugo Templates
DESCRIPTION: Demonstrates basic usage of the Fit method to downscale an image to 200x200 dimensions while maintaining aspect ratio. Returns an image resource with RelPermalink and dimension properties.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with .Fit "200x200" }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Retrieving and Submitting Comments using Axios in JavaScript
DESCRIPTION: This snippet shows how KeyCDN uses Axios to handle their custom commenting system. It sends a GET request to retrieve comments based on a slug and a POST request to submit new comments.

LANGUAGE: JavaScript
CODE:
axios.get('/comments', { params: { slug: postSlug } })
axios.post('/comments', { name, email, comment })

----------------------------------------

TITLE: Installing Node.js Dependencies
DESCRIPTION: Command to install required Node.js packages for PostCSS processing including autoprefixer and PurgeCSS

LANGUAGE: sh
CODE:
npm i -D postcss postcss-cli autoprefixer @fullhuman/postcss-purgecss

----------------------------------------

TITLE: Installing Hugo Extended Edition on NixOS
DESCRIPTION: Command to install the extended edition of Hugo on NixOS using the nix-env package manager.

LANGUAGE: sh
CODE:
nix-env -iA nixos.hugo

----------------------------------------

TITLE: Accessing Local JSON Data in Hugo
DESCRIPTION: Demonstrates how to access local JSON data using data.GetJSON function in Hugo templates. The file path is relative to the working directory.

LANGUAGE: go-html-template
CODE:
{{ $data := getJSON "other-files/books.json" }}
{{ $data := getJSON "other-files/" "books.json" }}

----------------------------------------

TITLE: Configuring PostCSS for Hugo
DESCRIPTION: PostCSS configuration file setup with PurgeCSS and Autoprefixer plugins, including content extraction from hugo_stats.json

LANGUAGE: javascript
CODE:
const autoprefixer = require('autoprefixer');
const purgeCSSPlugin = require('@fullhuman/postcss-purgecss').default;

const purgecss = purgeCSSPlugin({
  content: ['./hugo_stats.json'],
  defaultExtractor: content => {
    const els = JSON.parse(content).htmlElements;
    return [
      ...(els.tags || []),
      ...(els.classes || []),
      ...(els.ids || []),
    ];
  },
  // https://purgecss.com/safelisting.html
  safelist: []
});

module.exports = {
  plugins: [
    process.env.HUGO_ENVIRONMENT !== 'development' ? purgecss : null,
    autoprefixer,
  ]
};

----------------------------------------

TITLE: Displaying Hugo Completion Command Options
DESCRIPTION: This snippet shows the available options for the 'hugo completion' command. It includes a help option and inherited options from parent commands.

LANGUAGE: bash
CODE:
  -h, --help   help for completion

----------------------------------------

TITLE: Module Parameter Namespacing
DESCRIPTION: Example of namespacing parameters for modules and themes to prevent naming conflicts.

LANGUAGE: toml
CODE:
[params.modules.myModule.colors]
background = '#efefef'
font = '#222222'

----------------------------------------

TITLE: Delimiting a Slice in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the delimit function to join elements of a slice with a comma separator, and optionally specifying a different final delimiter.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "b" "a" "c" }}
{{ delimit $s ", " }} → b, a, c
{{ delimit $s ", " " and "}} → b, a and c

----------------------------------------

TITLE: Configuring Front Matter for LinkTitle in Hugo
DESCRIPTION: Demonstrates how to set the linkTitle field in the front matter of a Hugo content file. This example shows a long title with a shorter linkTitle for better usability in navigation.

LANGUAGE: yaml
CODE:
title = 'Seventeen delightful recipes for healthy desserts'
linkTitle = 'Dessert recipes'

----------------------------------------

TITLE: Applying Single Image Filter in Hugo
DESCRIPTION: This snippet demonstrates how to apply a single image filter (Grayscale) to an image resource in Hugo. It retrieves an image, applies the filter, and generates an img tag with the filtered image.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with .Filter images.Grayscale }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Configuring Hugo Glossary Page Front Matter in YAML
DESCRIPTION: Defines the front matter for a Hugo glossary page, including title, description, build settings, layout, and parameters. It also specifies cascading build options and aliases for the page.

LANGUAGE: yaml
CODE:
---
title: Glossary
description: Terms commonly used throughout the documentation.
categories: []
keywords: []
build:
  render: always
  list: always
cascade:
  build:
    render: never
    list: local
layout: single
params:
  hide_in_this_section: true
aliases: [/getting-started/glossary/]
---

----------------------------------------

TITLE: Referencing Hugo Leaf Bundle Index File
DESCRIPTION: Demonstrates the basic file reference for a leaf bundle's index file in Hugo directory structure.

LANGUAGE: markdown
CODE:
index.md

----------------------------------------

TITLE: Render Static Site Configuration
DESCRIPTION: Essential configuration values for setting up a Hugo static site on Render platform. Specifies the build command and publish directory required for deployment.

LANGUAGE: markdown
CODE:
Field                | Value
-------------------  |  -------------------
**Build Command**     | `hugo --gc --minify` (or your own build command)
**Publish Directory** | `public` (or your own output directory)

----------------------------------------

TITLE: Configuring Multiple Languages in Hugo
DESCRIPTION: This snippet shows how to configure multiple languages in Hugo, including setting the default language, language codes, directions, names, titles, and weights.

LANGUAGE: toml
CODE:
defaultContentLanguage = 'de'
defaultContentLanguageInSubdir = false

[languages.de]
languageCode = 'de-DE'
languageDirection = 'ltr'
languageName = 'Deutsch'
title = 'Projekt Dokumentation'
weight = 1

[languages.en]
languageCode = 'en-US'
languageDirection = 'ltr'
languageName = 'English'
title = 'Project Documentation'
weight = 2

----------------------------------------

TITLE: Calculating WCAG Contrast Ratio
DESCRIPTION: Calculates and evaluates the WCAG contrast ratio between the lightest and darkest colors from an image.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ $lightest := index (sort .Colors "Luminance" "desc") 0 }}
  {{ $darkest := index (sort .Colors "Luminance") 0 }}
  {{ $cr := div
    (add $lightest.Luminance 0.05)
    (add $darkest.Luminance 0.05)
  }}
  {{ if ge $cr 7.5 }}
    {{ printf "The %.2f contrast ratio conforms to WCAG Level AAA." $cr }}
  {{ else if ge $cr 4.5 }}
    {{ printf "The %.2f contrast ratio conforms to WCAG Level AA." $cr }}
  {{ else }}
    {{ printf "The %.2f contrast ratio does not conform to WCAG guidelines." $cr }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Sorting Pages Within Groups by Title in Hugo Templates
DESCRIPTION: This snippet demonstrates how to group pages by 'eventDate' and then sort the pages within each group by their title using the ByTitle method.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByParamDate "eventDate" "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages.ByTitle }}
      <li><a href="{{ .RelPermalink }}">{{ .Title }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Converting Time to Unix Microseconds in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the UnixMicro function in Hugo to convert a time.Time value to Unix microseconds. It first creates a time.Time object from a string representation and then applies the UnixMicro method to get the microseconds since the Unix epoch.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.UnixMicro }} → 1674891898000000

----------------------------------------

TITLE: Accessing Menu Items in Hugo Templates
DESCRIPTION: Go HTML template code showing how to iterate through main menu items in a template.

LANGUAGE: go-html-template
CODE:
{{ range .Site.Menus.main }}
  ...
{{ end }}

----------------------------------------

TITLE: Accessing Namespaced Module Parameters
DESCRIPTION: Shows how to access namespaced module parameters in templates.

LANGUAGE: go-html-template
CODE:
{{ $cfg := .Site.Params.module.mymodule }}

{{ $cfg.colors.background }} → #efefef
{{ $cfg.colors.font }} → #222222

----------------------------------------

TITLE: Merging Maps Left to Right
DESCRIPTION: Demonstrates merging three maps from left to right, where later maps override values from earlier maps

LANGUAGE: go-html-template
CODE:
{{ $merged := merge $m1 $m2 $m3 }}

{{ $merged.x }}   → baz
{{ $merged.y }}   → wobble
{{ $merged.z.a }} → huey

----------------------------------------

TITLE: Hugo Deploy Command Usage
DESCRIPTION: Command line syntax for deploying a Hugo site to a configured target. The optional --target parameter allows specifying which deployment target to use.

LANGUAGE: bash
CODE:
hugo deploy [--target=<target name>]

----------------------------------------

TITLE: Using lang.FormatNumberCustom in Hugo Templates
DESCRIPTION: Demonstrates various uses of the lang.FormatNumberCustom function to format numbers with different precisions and formatting options. The function takes a precision value, a number to format, and optional string parameters for custom formatting characters.

LANGUAGE: go-html-template
CODE:
{{ lang.FormatNumberCustom 2 12345.6789 }} → 12,345.68
{{ lang.FormatNumberCustom 2 12345.6789 "- , ." }} → 12.345,68
{{ lang.FormatNumberCustom 6 -12345.6789 "- ." }} → -12345.678900
{{ lang.FormatNumberCustom 0 -12345.6789 "- . ," }} → -12,346
{{ lang.FormatNumberCustom 0 -12345.6789 "-|.| " "|" }} → -12 346

----------------------------------------

TITLE: Default Function with Set Values
DESCRIPTION: Examples showing how the default function returns the second argument when it is set. This includes cases with numbers, strings, dictionaries, slices, and boolean values.

LANGUAGE: go-html-template
CODE:
{{ default 42 1 }} → 1
{{ default 42 "foo" }} → foo
{{ default 42 (dict "k" "v") }} → map[k:v]
{{ default 42 (slice "a" "b") }} → [a b]
{{ default 42 true }} → true

<!-- As noted above, the boolean "false" is considered set -->
{{ default 42 false }} → false

----------------------------------------

TITLE: Generating Language Site Links
DESCRIPTION: Hugo template that creates a list of links to home pages for all language versions of the site using Site.Sites range.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Sites }}
    <li><a href="{{ .Home.Permalink }}">{{ .Title }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Installing Hugo Extended with Winget on Windows
DESCRIPTION: Command to install the extended edition of Hugo using Microsoft's Winget package manager on Windows.

LANGUAGE: sh
CODE:
winget install Hugo.Hugo.Extended

----------------------------------------

TITLE: Formatting Date in Hugo Template
DESCRIPTION: Shows how to format and display the date of a page using Hugo's templating language. The example uses the time.Format function to format the date in a medium-length format.

LANGUAGE: go-html-template
CODE:
{{ .Date | time.Format ":date_medium" }} → Oct 19, 2023

----------------------------------------

TITLE: Single-Term Taxonomy Configuration
DESCRIPTION: Shows how to configure a taxonomy that typically uses single terms

LANGUAGE: yaml
CODE:
taxonomies:
  author: author

----------------------------------------

TITLE: Configuring Google Analytics in Hugo
DESCRIPTION: Shows how to set up Google Analytics in Hugo's configuration file by adding a Google tag ID under the services.googleAnalytics section.

LANGUAGE: toml
CODE:
[services.googleAnalytics]
id = 'G-XXXXXXXXX'

----------------------------------------

TITLE: Rendered Output of RenderShortcodes in Hugo
DESCRIPTION: This snippet shows the HTML output produced by the RenderShortcodes method when applied to the example content file.

LANGUAGE: html
CODE:
https://example.org/privacy/

An *emphasized* word.

----------------------------------------

TITLE: Breadcrumb Display Example
DESCRIPTION: Example of how the breadcrumb navigation appears when rendered with CSS styling.

LANGUAGE: text
CODE:
Home > Auctions > Auctions in November 2023 > Auction 1

----------------------------------------

TITLE: Handling Date Normalization in Hugo's AddDate Function
DESCRIPTION: Illustrates how Hugo normalizes dates when adding months or years results in a non-existent date. This behavior is particularly important for edge cases like adding months to the 31st day or handling leap years.

LANGUAGE: go-html-template
CODE:
{{ $d := "2023-01-31" | time.AsTime }}
{{ $d.AddDate 0 1 0 | time.Format "2006-01-02" }} → 2023-03-03

{{ $d := "2024-01-31" | time.AsTime }}
{{ $d.AddDate 0 1 0 | time.Format "2006-01-02" }} → 2024-03-02

{{ $d := "2024-02-29" | time.AsTime }}
{{ $d.AddDate 1 0 0 | time.Format "2006-01-02" }} → 2025-03-01

----------------------------------------

TITLE: Example of Go Code with Syntax Highlighting Options in Hugo
DESCRIPTION: Shows a Go code snippet with inline line numbers, highlighted lines, and a specific highlighting style (emacs) in Hugo Markdown.

LANGUAGE: markdown
CODE:
```go {linenos=inline hl_lines=[3,"6-8"] style=emacs}
package main

import "fmt"

func main() {
    for i := 0; i < 3; i++ {
        fmt.Println("Value of i:", i)
    }
}
```

----------------------------------------

TITLE: Accessing X (Twitter) Inline CSS Setting in Hugo Template
DESCRIPTION: Shows how to access the X (formerly Twitter) inline CSS configuration from within a Hugo template. This setting controls whether inline CSS is disabled for the X shortcode.

LANGUAGE: go-html-template
CODE:
{{ .Site.Config.Services.X.DisableInlineCSS }}

----------------------------------------

TITLE: Checking Template Existence with Fallback in Hugo
DESCRIPTION: Demonstrates how to check if a template exists and implement a fallback pattern. The code first constructs a dynamic path based on content type, checks if the template exists, and falls back to a default template if the specific one is not found.

LANGUAGE: go-html-template
CODE:
{{ $partialPath := printf "headers/%s.html" .Type }}
{{ if templates.Exists ( printf "partials/%s" $partialPath ) }}
  {{ partial $partialPath . }}
{{ else }}
  {{ partial "headers/default.html" . }}
{{ end }}

----------------------------------------

TITLE: Adding and Subtracting Durations from Time in Hugo Templates
DESCRIPTION: This snippet demonstrates how to parse a time string, create duration objects, and add or subtract these durations from the parsed time. It uses Hugo's time.AsTime, time.ParseDuration, and the Add method of time objects.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}

{{ $d1 = time.ParseDuration "3h20m10s" }}
{{ $d2 = time.ParseDuration "-3h20m10s" }}

{{ $t.Add $d1 }} → 2023-01-28 03:05:08 -0800 PST
{{ $t.Add $d2 }} → 2023-01-27 20:24:48 -0800 PST

----------------------------------------

TITLE: Counting Runes in a String using strings.RuneCount in Hugo
DESCRIPTION: This snippet demonstrates the usage of strings.RuneCount function in Hugo. It counts the number of runes in the string "Hello, 世界", which includes both ASCII and Unicode characters.

LANGUAGE: go-html-template
CODE:
{{ "Hello, 世界" | strings.RuneCount }} → 9

----------------------------------------

TITLE: Getting Page Length in Hugo Templates
DESCRIPTION: Demonstrates how to use the .Len function to get the length in bytes of rendered page content. Returns an integer value representing the content length.

LANGUAGE: go-html-template
CODE:
{{ .Len }} → 42

----------------------------------------

TITLE: Using Hugo Figure Shortcode
DESCRIPTION: Example of using the figure shortcode to insert an image with caption and link to Zion National Park.

LANGUAGE: text
CODE:
{{</* figure
  src="/images/examples/zion-national-park.jpg"
  alt="A photograph of Zion National Park"
  link="https://www.nps.gov/zion/index.htm"
  caption="Zion National Park"
  class="ma0 w-75"
*/>}}

----------------------------------------

TITLE: Defining Hugo Page Slug in Front Matter
DESCRIPTION: Shows how to define a custom URL slug in a page's front matter using TOML format. The slug will override the default URL path segment for the page.

LANGUAGE: toml
CODE:
title = 'How to make spicy tuna hand rolls'
slug = 'sushi'

----------------------------------------

TITLE: Configuring Passthrough Example in Markdown
DESCRIPTION: Demonstrates how to use block and inline passthrough elements in Markdown content.

LANGUAGE: text
CODE:
This is a

\[block\]

passthrough element with opening and closing block delimiters.

This is an \(inline\) passthrough element with opening and closing inline delimiters.

----------------------------------------

TITLE: Setting Environment Variables for Hugo Build
DESCRIPTION: Shows how to set environment variables when building a Hugo site, either inline or by exporting them before running the hugo command.

LANGUAGE: sh
CODE:
MY_VAR1=foo MY_VAR2=bar hugo

OR

export MY_VAR1=foo
export MY_VAR2=bar
hugo

----------------------------------------

TITLE: Inline Image Generation in Hugo
DESCRIPTION: Shows how to create an inline base64-encoded image using the Content method and base64Encode function.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  <img src="data:{{ .MediaType.Type }};base64,{{ .Content | base64Encode }}">
{{ end }}

----------------------------------------

TITLE: Rendering Safe HTML in Hugo Templates
DESCRIPTION: Shows how to use the safeHTML function to render HTML content without escaping.

LANGUAGE: go-html-template
CODE:
{{ $html := "<em>emphasized</em>" }}
{{ $html | safeHTML }}

LANGUAGE: html
CODE:
<em>emphasized</em>

----------------------------------------

TITLE: Multilingual Content Structure Example
DESCRIPTION: Illustrates a complex content structure for a multilingual Hugo project with various content types

LANGUAGE: text
CODE:
content/
├── news/
│   ├── b/
│   │   ├── index.de.md   <-- leaf bundle
│   │   └── index.en.md   <-- leaf bundle
│   ├── a.de.md           <-- regular content
│   ├── a.en.md           <-- regular content
│   ├── _index.de.md      <-- branch bundle
│   └── _index.en.md      <-- branch bundle
├── _index.de.md
└── _index.en.md

----------------------------------------

TITLE: Using Emoji Shortcodes in Markdown
DESCRIPTION: Example of using emoji shortcode in markdown content

LANGUAGE: markdown
CODE:
Hello! :wave:

----------------------------------------

TITLE: Removing Leading Characters from String using strings.TrimLeft in Hugo
DESCRIPTION: Demonstrates the basic usage of strings.TrimLeft function to remove specified leading characters from a string. The function takes two arguments: the characters to remove (cutset) and the string to trim.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimLeft "a" "abba" }} → bba

----------------------------------------

TITLE: Basic Time Conversion in Hugo Templates
DESCRIPTION: Demonstrates basic usage of time.AsTime function to convert an ISO 8601 formatted string to a time.Time value.

LANGUAGE: go-html-template
CODE:
{{ $t := "2023-10-15T13:18:50-07:00" }}
{{ time.AsTime $t }} → 2023-10-15 13:18:50 -0700 PDT (time.Time)

----------------------------------------

TITLE: Rendered Output of Duration Calculation
DESCRIPTION: This snippet shows the rendered output of the previous Hugo template, displaying the calculated number of seconds in one day.

LANGUAGE: text
CODE:
There are 86400 seconds in one day.

----------------------------------------

TITLE: Adding Headers to JSON Requests in Hugo
DESCRIPTION: Demonstrates how to add headers to JSON requests using an options map with data.GetJSON function in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "Authorization" "Bearer abcd" }}
{{ $data := getJSON "https://example.org/books.json" $opts }}

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "X-List" (slice "a" "b" "c") }}
{{ $data := getJSON "https://example.org/books.json" $opts }}

----------------------------------------

TITLE: Using Len Function in Hugo Templates
DESCRIPTION: Demonstrates how to use the Len function to get the count of pages in a collection. The function returns an integer representing the total number of pages in the .Pages collection.

LANGUAGE: go-html-template
CODE:
{{ .Pages.Len }} → 42

----------------------------------------

TITLE: Unmarshaling XML and accessing data in Hugo
DESCRIPTION: Shows how to unmarshal an XML RSS feed and access its data using transform.Unmarshal in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $url := "https://example.org/books/index.xml" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ $data = . | transform.Unmarshal }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

{{ with $data.channel.item }}
  <ul>
    {{ range . }}
      <li>{{ .title }}</li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Creating Text Overlay Filter Configuration
DESCRIPTION: Creates an image filter with centered text positioning and custom styling options including font size, color, and spacing

LANGUAGE: go-html-template
CODE:
{{ $r := "" }}
{{ $filter := "" }}
{{ with $r = resources.Get $imagePath }}
  {{ $opts := dict
    "alignx" "center"
    "color" "#fbfaf5"
    "font" $font
    "linespacing" 8
    "size" 60
    "x" (mul .Width 0.5 | int)
    "y" (mul .Height 0.5 | int)
  }}
  {{ $filter = images.Text $text $opts }}
{{ else }}
  {{ errorf "Unable to get resource %s" $imagePath }}
{{ end }}

----------------------------------------

TITLE: Converting time.Month to Integer in Hugo Templates
DESCRIPTION: This snippet demonstrates how to convert a time.Month value to an integer representation. It creates a time.Time object, extracts the month, and uses the int function to convert it to a numeric value.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.Month | int }} → 1

----------------------------------------

TITLE: Iterating Over Site Pages in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the .Site.Pages method to iterate over all pages in a Hugo site. It creates a list of page titles with links to their respective URLs.

LANGUAGE: go-html-template
CODE:
{{ range .Site.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Triggering Content Rendering in Hugo Templates
DESCRIPTION: Shows how to trigger content rendering in Hugo templates to access Scratch or Store values that are set during content processing.

LANGUAGE: go-html-template
CODE:
{{ $noop := .Content }}
{{ .Store.Get "mykey" }}

----------------------------------------

TITLE: Creating New Content in Hugo
DESCRIPTION: This command creates a new content file in Hugo, automatically setting the date and title. It can guess the file type based on the provided path or accept a specified kind with the -k flag. The command uses archetypes if available in the theme or site.

LANGUAGE: plaintext
CODE:
hugo new content [path] [flags]

----------------------------------------

TITLE: Single-Term Taxonomy Front Matter Usage
DESCRIPTION: Example of using a single-term taxonomy in content front matter

LANGUAGE: yaml
CODE:
---
title: Example
author:
  - Robert Smith

----------------------------------------

TITLE: Using Name Method for Error Reporting in Hugo Shortcode
DESCRIPTION: This snippet demonstrates how to use the Name method in a Hugo shortcode to generate an error message when a required argument is missing. It checks for a 'greeting' argument and throws an error if it's not provided.

LANGUAGE: go-html-template
CODE:
{{ $greeting := "" }}
{{ with .Get "greeting" }}
  {{ $greeting = . }}
{{ else }}
  {{ errorf "The %q shortcode requires a 'greeting' argument. See %s" .Name .Position }}
{{ end }}

----------------------------------------

TITLE: Using math.Max Function in Hugo Templates
DESCRIPTION: Demonstrates using the math.Max function to find the greatest value among a mix of scalar numbers and slices. The function accepts variable number of arguments and returns a float64 value representing the maximum number found.

LANGUAGE: go-html-template
CODE:
{{ math.Max 1 (slice 2 3) 4 }} → 4

----------------------------------------

TITLE: Vendoring Hugo Modules
DESCRIPTION: Explains how to vendor Hugo Module dependencies using hugo mod vendor, which writes all dependencies to a _vendor directory for subsequent builds.

LANGUAGE: sh
CODE:
hugo mod vendor

----------------------------------------

TITLE: Including Mermaid Script in Hugo Base Template
DESCRIPTION: This Go HTML template snippet shows how to conditionally include the Mermaid script in the base template of a Hugo site.

LANGUAGE: go-html-template
CODE:
{{ if .Store.Get "hasMermaid" }}
  <script type="module">
    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';
    mermaid.initialize({ startOnLoad: true });
  </script>
{{ end }}

----------------------------------------

TITLE: Type Conversion with strings.TrimLeft in Hugo Templates
DESCRIPTION: Shows how strings.TrimLeft function handles non-string inputs by converting them to strings. It demonstrates trimming leading digits from a number and removing characters from a boolean value.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimLeft 21 12345 }} → 345 (string)
{{ strings.TrimLeft "rt" true }} → ue

----------------------------------------

TITLE: UTC and Local Time Formatting in Hugo
DESCRIPTION: Demonstrates converting and formatting time values to both UTC and local time zones using the UTC and Local methods.

LANGUAGE: go-html-template
CODE:
{{ $t := "2023-01-27T23:44:58-08:00" }}
{{ $t = time.AsTime $t }}
{{ $format := "2 Jan 2006 3:04:05 PM MST" }}

{{ $t.UTC.Format $format }} → 28 Jan 2023 7:44:58 AM UTC
{{ $t.Local.Format $format }} → 27 Jan 2023 11:44:58 PM PST

----------------------------------------

TITLE: Terminating 'block' Definition in Hugo Template
DESCRIPTION: Demonstrates how to use 'end' to close a 'block' definition in a Hugo template. It defines a named block that can be overridden in child templates.

LANGUAGE: go-html-template
CODE:
{{ block "main" . }}{{ end }}

----------------------------------------

TITLE: Directory Structure Example in Hugo Content Organization
DESCRIPTION: Demonstrates the typical content structure in Hugo showing how sections and subsections are organized, with annotations indicating the current section for different page types.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md     <-- current section: 2023-11
│   │   ├── auction-1.md
│   │   └── auction-2.md  <-- current section: 2023-11
│   ├── 2023-12/
│   │   ├── _index.md     
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md         <-- current section: auctions
│   ├── bidding.md
│   └── payment.md        <-- current section: auctions
├── books/
│   ├── _index.md         <-- current section: books
│   ├── book-1.md
│   └── book-2.md         <-- current section: books
├── films/
│   ├── _index.md         <-- current section: films 
│   ├── film-1.md
│   └── film-2.md         <-- current section: films
└── _index.md             <-- current section: home

----------------------------------------

TITLE: Applying Text Filter Using images.Filter Function
DESCRIPTION: Demonstrates applying the text overlay filter using the images.Filter function and rendering the resulting image

LANGUAGE: go-html-template
CODE:
{{ with $r }}
  {{ with . | images.Filter $filter }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Basic Division Error Example in Hugo Templates
DESCRIPTION: Demonstrates how division by zero causes an error in Hugo templates without error handling.

LANGUAGE: go-html-template
CODE:
{{ $x := 1 }}
{{ $y := 0 }}
{{ $result := div $x $y }}
{{ printf "%v divided by %v equals %v" $x $y .Value }}

----------------------------------------

TITLE: Using printf for Simple Value Inspection in Hugo
DESCRIPTION: Shows how to use the printf function to inspect simple values while displaying both the value and its data type. The example demonstrates printing an integer value with its type information.

LANGUAGE: go-html-template
CODE:
{{ $value := 42 }}
{{ printf "%[1]v (%[1]T)" $value }} → 42 (int)

----------------------------------------

TITLE: Overriding Cache Key in resources.GetRemote for Hugo
DESCRIPTION: Shows how to override the default cache key when using resources.GetRemote, allowing more control over resource fetching frequency.

LANGUAGE: go-html-template
CODE:
{{ $url := "https://example.org/images/a.jpg" }}
{{ $opts := dict 
  "key" (print $url (now.Format "2006-01-02"))
}}
{{ $resource := resources.GetRemote $url $opts }}

----------------------------------------

TITLE: Documentation Development Notes in HTML Comments
DESCRIPTION: HTML comment block containing internal development notes about potential content sources and maintaining consistent language across different Hugo properties.

LANGUAGE: html
CODE:
<!--
If we want content on this page at some point, considering taking it from:

- https://gohugo.io/about/introduction/
- https://gohugo.io/about/features/

Try to use the same language (e.g., tagline) everywhere:

- Home: https://gohugo.io/
- Docs: https://gohugo.io/documentation/
- Project repo: https://github.com/gohugoio/hugo?tab=readme-ov-file#readme
- Docs repo: https://github.com/gohugoio/hugoDocs?tab=readme-ov-file#readme 
-->

----------------------------------------

TITLE: Render Hook Template in Hugo
DESCRIPTION: Template for customizing link rendering in Markdown, adding rel attribute for external links.

LANGUAGE: go-html-template
CODE:
{{- $u := urls.Parse .Destination -}}
<a href="{{ .Destination | safeURL }}"
  {{- with .Title }} title="{{ . }}"{{ end -}}
  {{- if $u.IsAbs }} rel="external"{{ end -}}
>
  {{- with .Text }}{{ . }}{{ end -}}
</a>
{{- /* chomp trailing newline */ -}}

----------------------------------------

TITLE: Hugo Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the Hugo static site page, defining metadata like title, date, description, site URL and byline information.

LANGUAGE: yaml
CODE:
---
title: Bypass Censorship
date: 2019-06-16
description: 'Showcase: "Bypass Censorship find and promote tools that provide Internet access to everyone."'
siteURL: https://www.bypasscensorship.org/
byline: "[Fredrik Jonsson](https://xdeb.net/), Web developer & Linux sysadmin"
---

----------------------------------------

TITLE: Alternative Site Parameter Access Methods
DESCRIPTION: Demonstrates equivalent ways to access site parameters using direct Params access and index function.

LANGUAGE: go-html-template
CODE:
{{ .Site.Params.display_toc }}
{{ index .Site.Params "display_toc" }}

----------------------------------------

TITLE: Using strings.Substr Function in Hugo Templates
DESCRIPTION: Demonstrates various ways to use the strings.Substr function in Hugo templates. It shows how to extract substrings from the beginning, end, or middle of a string, using both positive and negative indices for start position and length.

LANGUAGE: go-html-template
CODE:
{{ substr "abcdef" 0 }} → abcdef
{{ substr "abcdef" 1 }} → bcdef

{{ substr "abcdef" 0 1 }} → a
{{ substr "abcdef" 1 1 }} → b

{{ substr "abcdef" 0 -1 }} → abcde
{{ substr "abcdef" 1 -1 }} → bcde

{{ substr "abcdef" -1 }} → f
{{ substr "abcdef" -2 }} → ef

{{ substr "abcdef" -1 1 }} → f
{{ substr "abcdef" -2 1 }} → e

{{ substr "abcdef" -3 -1 }} → de
{{ substr "abcdef" -3 -2 }} → d

----------------------------------------

TITLE: Truncating Time Durations using Truncate Method in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use the Truncate method on time.Duration objects in Hugo templates. It parses a duration string and then truncates it to different multiples, showing the rounded results.

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "3.5h2.5m1.5s" }}

{{ $d.Truncate (time.ParseDuration "2h") }} → 2h0m0s
{{ $d.Truncate (time.ParseDuration "3m") }} → 3h30m0s
{{ $d.Truncate (time.ParseDuration "4s") }} → 3h32m28s

----------------------------------------

TITLE: Correct Return Statement Usage Pattern
DESCRIPTION: Demonstrates the correct way to use a return statement at the end of a template after processing logic.

LANGUAGE: go-html-template
CODE:
{{ $result := false }}
{{ if math.ModBool . 2 }}
  {{ $result = "even" }}
{{ else }}
  {{ $result = "odd" }}
{{ end }}
{{ return $result }}

----------------------------------------

TITLE: Sorting Pages by Parameter in Ascending Order (Hugo)
DESCRIPTION: This snippet demonstrates how to use the ByParam function to sort a page collection by the 'author' parameter in ascending order. It iterates through the sorted pages and displays a link for each page.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByParam "author" }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Retrieving Language Direction in Hugo Templates
DESCRIPTION: Illustrates how to get the language direction (ltr or rtl) from the site configuration.

LANGUAGE: go-html-template
CODE:
{{ .Language.LanguageDirection }} → ltr

----------------------------------------

TITLE: Advanced js.Build Usage with Externals and Defines in Hugo
DESCRIPTION: This example demonstrates advanced usage of js.Build, including specifying external dependencies and defining environment variables for the build process.

LANGUAGE: go-html-template
CODE:
{{ $externals := slice "react" "react-dom" }}
{{ $defines := dict "process.env.NODE_ENV" `"development"` }}

{{ $opts := dict "targetPath" "main.js" "externals" $externals "defines" $defines }}
{{ $built := resources.Get "scripts/main.js" | js.Build $opts }}
<script src="{{ $built.RelPermalink }}" defer></script>

----------------------------------------

TITLE: Declaring Scratch Method for Hugo Shortcodes
DESCRIPTION: Declares the Scratch method for Hugo shortcodes, which returns a maps.Scratch object. This method is deprecated as of Hugo v0.139.0 and is aliased to SHORTCODE.Store.

LANGUAGE: go
CODE:
SHORTCODE.Scratch

----------------------------------------

TITLE: Getting Commit Date
DESCRIPTION: Shows how to retrieve and format the Git commit date.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .CommitDate.Format "2006-01-02" }} → 2023-10-09
{{ end }}

----------------------------------------

TITLE: Accessing Time Components in Hugo
DESCRIPTION: Examples of accessing various time components like year, weekday, month, and Unix timestamp using time methods.

LANGUAGE: go-html-template
CODE:
{{ time.Now.Year }}
{{ time.Now.Weekday.String }}
{{ time.Now.Month.String }}
{{ time.Now.Unix }}

----------------------------------------

TITLE: Creating Empty Slice in Hugo
DESCRIPTION: Demonstrates how to create an empty slice using the slice function without any arguments.

LANGUAGE: go-html-template
CODE:
{{ $s := slice }}

----------------------------------------

TITLE: Converting UTC Time to Local Time in Hugo Templates
DESCRIPTION: This snippet demonstrates how to convert a UTC time string to local time using Hugo's time functions. It first creates a time.Time object from a UTC string, then applies the Local method to convert it to the local timezone.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-28T07:44:58+00:00" }}
{{ $t.Local }} → 2023-01-27 23:44:58 -0800 PST

----------------------------------------

TITLE: Conditional Summary Display with Read More Link
DESCRIPTION: Enhanced template that includes a conditional 'Read more' link using the Truncated method to check if the content extends beyond the summary.

LANGUAGE: go-html-template
CODE:
{{ range .Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ .Summary }}
  {{ if .Truncated }}
    <a href="{{ .RelPermalink }}">Read more...</a>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Accessing BundleType in Hugo Templates
DESCRIPTION: Demonstrates how to use the BundleType method within a Hugo template to retrieve the bundle type of a page. This method returns 'branch' for branch bundles, 'leaf' for leaf bundles, and an empty string for non-bundle pages.

LANGUAGE: go-html-template
CODE:
{{ .BundleType }}

----------------------------------------

TITLE: Defining a Template for Use with the Template Function in Hugo
DESCRIPTION: This snippet illustrates how to define a template named 'foo' using the 'define' keyword, which can be used with the 'template' function. It shows passing a dictionary with an 'answer' key and accessing it within the defined template.

LANGUAGE: go-html-template
CODE:
{{ template "foo" (dict "answer" 42) }}

{{ define "foo" }}
  {{ printf "The answer is %v." .answer }}
{{ end }}

----------------------------------------

TITLE: Example Output of debug.Dump Function
DESCRIPTION: Shows the formatted JSON output from a debug.Dump operation, displaying various page parameters including date, draft status, and tags.

LANGUAGE: text
CODE:
{
  "date": "2023-11-10T15:10:42-08:00",
  "draft": false,
  "iscjklanguage": false,
  "lastmod": "2023-11-10T15:10:42-08:00",
  "publishdate": "2023-11-10T15:10:42-08:00",
  "tags": [
    "foo",
    "bar"
  ],
  "title": "My first post"
}

----------------------------------------

TITLE: Defining Multiple Menu Entries in Front Matter
DESCRIPTION: Front matter configuration to add a page to multiple menus (main and footer) in Hugo.

LANGUAGE: toml
CODE:
title = 'Contact'
menus = ['main','footer']

----------------------------------------

TITLE: Capitalizing First Letter with strings.FirstUpper in Hugo Go Templates
DESCRIPTION: Demonstrates the usage of the strings.FirstUpper function in Hugo templating. This function takes a string as input and returns the same string with its first character capitalized.

LANGUAGE: go-html-template
CODE:
{{ strings.FirstUpper "foo" }} → Foo

----------------------------------------

TITLE: Using collections.Union with Arrays in Hugo Templates
DESCRIPTION: Demonstrates the usage of the collections.Union function to combine arrays or slices in Hugo templates. It shows examples with integer slices, including cases with nil inputs.

LANGUAGE: go-html-template
CODE:
{{ union (slice 1 2 3) (slice 3 4 5) }} → [1 2 3 4 5]

{{ union (slice 1 2 3) nil }} → [1 2 3]

{{ union nil (slice 1 2 3) }} → [1 2 3]

{{ union nil nil }} → []

----------------------------------------

TITLE: Using len with Collections in Hugo Templates
DESCRIPTION: Demonstrates how to use the 'len' function to get the number of items in a collection, specifically the number of regular pages in a Hugo site.

LANGUAGE: go-html-template
CODE:
{{ site.RegularPages | len }} → 42

----------------------------------------

TITLE: Error Message Output for Missing Shortcode Argument
DESCRIPTION: This snippet shows the error message that Hugo will display when the 'greeting' argument is missing from the shortcode. It includes the shortcode name and the position in the content file where the error occurred.

LANGUAGE: text
CODE:
ERROR The "myshortcode" shortcode requires a 'greeting' argument. See "/home/user/project/content/about.md:11:1"

----------------------------------------

TITLE: Applying Color Balance Filter to Image in Hugo
DESCRIPTION: This snippet shows how to apply the color balance filter to an image using Hugo's image shortcode. It adjusts the red, green, and blue channels by -10%, 10%, and 50% respectively.

LANGUAGE: go-html-template
CODE:
{{< img
  src="images/examples/zion-national-park.jpg"
  alt="Zion National Park"
  filter="ColorBalance"
  filterArgs="-10,10,50"
  example=true
>}}

----------------------------------------

TITLE: Adding Values in hugo.Store
DESCRIPTION: Examples of using the Add method to combine values, including strings, numbers, and slices

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.Set "greeting" "Hello" }}
{{ hugo.Store.Add "greeting" "Welcome" }}
{{ hugo.Store.Get "greeting" }} → HelloWelcome

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.Set "total" 3 }}
{{ hugo.Store.Add "total" 7 }}
{{ hugo.Store.Get "total" }} → 10

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.Set "greetings" (slice "Hello") }}
{{ hugo.Store.Add "greetings" (slice "Welcome" "Cheers") }}
{{ hugo.Store.Get "greetings" }} → [Hello Welcome Cheers]

----------------------------------------

TITLE: Automatic Summary Content Example in Hugo
DESCRIPTION: Example content file showing how automatic summary generation works based on the summaryLength configuration.

LANGUAGE: text
CODE:
+++
title: 'Example'
date: 2024-05-26T09:10:33-07:00
+++

This is the first paragraph.

This is the second paragraph.

This is the third paragraph.

----------------------------------------

TITLE: Calling Book Details Shortcode in Hugo
DESCRIPTION: Example of how to call the book-details shortcode in a Hugo template.

LANGUAGE: text
CODE:
{{</* book-details */>}}

----------------------------------------

TITLE: Setting Site-level Parameters in Hugo Configuration
DESCRIPTION: Demonstrates how to set a site-level parameter in Hugo's configuration file.

LANGUAGE: toml
CODE:
[params]
display_toc = true

----------------------------------------

TITLE: Adding Attributes to Various Elements in Hugo Markdown
DESCRIPTION: Illustrates how to add class attributes to a heading, fenced code block, and paragraph using Markdown attributes in Hugo.

LANGUAGE: text
CODE:
## Section 1 {class=foo}

```bash {class=foo linenos=inline}
declare a=1
echo "${a}"
```

This is a paragraph.
{class=foo}

----------------------------------------

TITLE: Converting String to Uppercase in Hugo Template
DESCRIPTION: Demonstrates using the 'upper' function to convert a string to uppercase. The function accepts a string input and returns the same string with all characters converted to uppercase characters.

LANGUAGE: go-html-template
CODE:
{{ upper "BatMan" }} → BATMAN

----------------------------------------

TITLE: Deployment Shell Script
DESCRIPTION: Automated script for building and deploying Hugo site using rsync

LANGUAGE: sh
CODE:
#!/bin/sh
USER=my-user
HOST=my-server.com
DIR=my/directory/to/topologix.fr/   # the directory where your website files should go

hugo && rsync -avz --delete public/ ${USER}@${HOST}:~/${DIR} # this will delete everything on the server that's not in the local public directory 

exit 0

----------------------------------------

TITLE: Rendering Unsafe HTML in Hugo Templates
DESCRIPTION: Demonstrates how Hugo escapes HTML content by default when not declared as safe.

LANGUAGE: go-html-template
CODE:
{{ $html := "<em>emphasized</em>" }}
{{ $html }}

LANGUAGE: html
CODE:
&lt;em&gt;emphasized&lt;/em&gt;

----------------------------------------

TITLE: Complex After Function Usage with Article Pagination
DESCRIPTION: Shows how to combine After and First functions to create a featured article section with the most recent post and a recent articles section with the 2nd to 4th most recent posts, sorted by publish date.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <section class="row featured-article">
    <h2>Featured Article</h2>
    {{ range first 1 .Pages.ByPublishDate.Reverse }}
    <header>
      <h3><a href="{{ .RelPermalink }}">{{ .Title }}</a></h3>
    </header>
    <p>{{ .Description }}</p>
  {{ end }}
  </section>
  <div class="row recent-articles">
    <h2>Recent Articles</h2>
    {{ range first 3 (after 1 .Pages.ByPublishDate.Reverse) }}
      <section class="recent-article">
        <header>
          <h3><a href="{{ .RelPermalink }}">{{ .Title }}</a></h3>
        </header>
        <p>{{ .Description }}</p>
      </section>
    {{ end }}
  </div>
{{ end }}

----------------------------------------

TITLE: Default Function with Unset Values
DESCRIPTION: Examples demonstrating how the default function returns the first argument when the second argument is not set (zero values, empty strings, empty collections).

LANGUAGE: go-html-template
CODE:
{{ default 42 0 }} → 42
{{ default 42 "" }} → 42
{{ default 42 dict }} → 42
{{ default 42 slice }} → 42
{{ default 42 <nil> }} → 42

----------------------------------------

TITLE: Calculating Average Using Partial Template
DESCRIPTION: Demonstrates passing a slice of numbers to a partial template for averaging.

LANGUAGE: go-html-template
CODE:
{{ $numbers := slice 1 6 7 42 }}
{{ $average := partial "average.html" $numbers }}

----------------------------------------

TITLE: Matching Multiple Resources in Hugo Templates
DESCRIPTION: Shows how to use the Match method to find all resources matching a glob pattern and render them as images.

LANGUAGE: go-html-template
CODE:
{{ range .Resources.Match "images/*.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Creating a Nested Map with collections.Dictionary in Hugo
DESCRIPTION: This snippet demonstrates how to create a deeply nested map structure using the collections.Dictionary function with a slice as the key.

LANGUAGE: go-html-template
CODE:
{{ $m := dict (slice "a" "b" "c") "value" }}

----------------------------------------

TITLE: Highlight Shortcode Example with Go Code
DESCRIPTION: Shows a complete example of using the highlight shortcode to display Go code with line numbers, highlighted lines, and a specific style.

LANGUAGE: text
CODE:
{{</* highlight go "linenos=inline, hl_lines=3 6-8, style=emacs" */>}}
package main

import "fmt"

func main() {
    for i := 0; i < 3; i++ {
        fmt.Println("Value of i:", i)
    }
}
{{</* /highlight */>}}

----------------------------------------

TITLE: Safe JavaScript Expression Example in Hugo Template
DESCRIPTION: Shows how to use the safeJS function to declare a string as a safe JavaScript expression, preventing escaping.

LANGUAGE: go-html-template
CODE:
{{ $js := "x + y" }}
<script>const a = {{ $js | safeJS }}</script>

LANGUAGE: html
CODE:
<script>const a = x + y</script>

----------------------------------------

TITLE: Checking String Suffix using strings.HasSuffix in Hugo
DESCRIPTION: Demonstrates using the strings.HasSuffix function to check if 'Hugo' ends with 'go'. The function takes two parameters: the string to check and the suffix to look for, returning true if the string ends with the suffix.

LANGUAGE: go-html-template
CODE:
{{ hasSuffix "Hugo" "go" }} → true

----------------------------------------

TITLE: Configuring Copyright Notice in Hugo
DESCRIPTION: Sets the copyright notice in the Hugo site configuration file. This value can be accessed in templates using the Copyright function.

LANGUAGE: toml
CODE:
copyright = '© 2023 ABC Widgets, Inc.'

----------------------------------------

TITLE: Map Structure Before and After Sorting in Hugo
DESCRIPTION: Shows how Hugo handles map structures during sorting operations by removing first-level keys.

LANGUAGE: json
CODE:
{
  "felix": {
    "breed": "malicious",
    "type": "cat"
  },
  "spot": {
    "breed": "boxer",
    "type": "dog"
  }
}

LANGUAGE: json
CODE:
[
  {
    "breed": "malicious",
    "type": "cat"
  },
  {
    "breed": "boxer",
    "type": "dog"
  }
]

----------------------------------------

TITLE: Generated HTML Output
DESCRIPTION: The resulting HTML output showing links to both German and English versions of the site.

LANGUAGE: html
CODE:
<ul>
  <li><a href="https://example.org/de/">Projekt Dokumentation</a></li>
  <li><a href="https://example.org/en/">Project Documentation</a></li>
</ul>

----------------------------------------

TITLE: Converting Decimal Values to Float in Hugo Templates
DESCRIPTION: Demonstrates the use of the float function to convert decimal (base 10) values to float64 in Hugo templates. This includes both integer and floating-point inputs, as well as string representations of numbers.

LANGUAGE: go-html-template
CODE:
{{ float 11 }} → 11 (float64)
{{ float "11" }} → 11 (float64)

{{ float 11.1 }} → 11.1 (float64)
{{ float "11.1" }} → 11.1 (float64)

{{ float 11.9 }} → 11.9 (float64)
{{ float "11.9" }} → 11.9 (float64)

----------------------------------------

TITLE: Appending Slice to Slice in Hugo Template
DESCRIPTION: Illustrates how to append a slice of elements to an existing slice using the collections.Append function.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "a" "b" }}
{{ $s }} → [a b]

{{ $s = $s | append (slice "c" "d") }}
{{ $s }} → [a b c d]

----------------------------------------

TITLE: Installing Babel Dependencies for Hugo
DESCRIPTION: This command installs the necessary Node.js packages for using Babel with Hugo. It should be run in the root of the project after installing Node.js.

LANGUAGE: sh
CODE:
npm install --save-dev @babel/core @babel/cli

----------------------------------------

TITLE: Iterating Over a Sequence and Calculating Product in Hugo Templates
DESCRIPTION: This example demonstrates how to iterate over a sequence generated by collections.Seq and perform calculations. It calculates the product of the first four integers (1 to 4) using a range loop and the mul function.

LANGUAGE: go-html-template
CODE:
{{ $product := 1 }}
{{ range seq 4 }}
  {{ $product = mul $product . }}
{{ end }}
{{ $product }} → 24

----------------------------------------

TITLE: URLs Without Leading Slash - Base URL Example 1
DESCRIPTION: Examples of urls.RelLangURL function usage when input doesn't begin with a slash and baseURL is 'https://example.org/'

LANGUAGE: go-html-template
CODE:
{{ relLangURL "" }}                         → /en/
{{ relLangURL "articles" }}                 → /en/articles
{{ relLangURL "style.css" }}                → /en/style.css
{{ relLangURL "https://example.org" }}      → https://example.org
{{ relLangURL "https://example.org/" }}     → /en
{{ relLangURL "https://www.example.org" }}  → https://www.example.org
{{ relLangURL "https://www.example.org/" }} → https://www.example.org/

----------------------------------------

TITLE: Using os.ReadFile in Hugo Template
DESCRIPTION: Demonstrates how to use the os.ReadFile function (aliased as readFile) in a Hugo template to read the contents of the README.md file.

LANGUAGE: go-html-template
CODE:
{{ readFile "README.md" }}

----------------------------------------

TITLE: Appending Pages to Slice in Hugo Template
DESCRIPTION: Illustrates a practical use case of the collections.Append function to combine different types of pages (press releases and articles) into a single slice for display.

LANGUAGE: go-html-template
CODE:
{{ $p := where site.RegularPages "Type" "press-releases" | first 2 }}
{{ $p = $p | append (where site.RegularPages "Type" "articles" | first 4) }}

{{ with $p }}
  <ul>
    {{ range . }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: GitHub API URL Example
DESCRIPTION: Example of a GitHub API endpoint that returns base64-encoded content.

LANGUAGE: text
CODE:
https://api.github.com/repos/gohugoio/hugo/readme

----------------------------------------

TITLE: Calling Hugo Shortcode with Positional Arguments
DESCRIPTION: Example of calling a shortcode using positional arguments in a Hugo content file. The parameters are passed as ordered values without names.

LANGUAGE: text
CODE:
{{</* myshortcode "Hello" "world" */>}}

----------------------------------------

TITLE: Resulting JSON Structure from Simple Map Creation
DESCRIPTION: This JSON snippet shows the resulting data structure from creating a simple map using collections.Dictionary function.

LANGUAGE: json
CODE:
{
  "a": 1,
  "b": 2
}

----------------------------------------

TITLE: Installing Hugo Extended Edition on Alpine Linux
DESCRIPTION: Command to install the extended edition of Hugo on Alpine Linux using the apk package manager.

LANGUAGE: sh
CODE:
doas apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community hugo

----------------------------------------

TITLE: Processing Emojis in Templates
DESCRIPTION: Using the emojify function to process emoji shortcodes in Hugo templates

LANGUAGE: go-html-template
CODE:
{{ "Hello! :wave:" | .RenderString }}

----------------------------------------

TITLE: Accessing Menu Entry URL in Hugo Templates
DESCRIPTION: This snippet illustrates how to access the URL property of a menu entry in Hugo templates. The URL represents the destination of the menu item link.

LANGUAGE: go
CODE:
{{ .URL }}

----------------------------------------

TITLE: Using compare.Conditional in Hugo Templates
DESCRIPTION: Demonstrates the usage of the compare.Conditional function (aliased as 'cond') in Hugo templates. The function returns 'few' if the quantity is less than or equal to 3, otherwise it returns 'many'.

LANGUAGE: go-html-template
CODE:
{{ $qty := 42 }}
{{ cond (le $qty 3) "few" "many" }} → many

----------------------------------------

TITLE: Creating an Empty Map with collections.Dictionary in Hugo
DESCRIPTION: This snippet shows how to create an empty map using the collections.Dictionary function in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ $m := dict }}

----------------------------------------

TITLE: Defining Menu Entries with Identifiers in Hugo TOML Configuration
DESCRIPTION: Configuration example showing how to define menu entries with unique identifiers in Hugo's TOML format. Each entry includes an identifier, name, page reference, and weight for ordering.

LANGUAGE: toml
CODE:
[[menus.main]]
identifier = 'about'
name = 'About'
pageRef = '/about'
weight = 10

[[menus.main]]
identifier = 'contact'
name = 'Contact'
pageRef = '/contact'
weight = 20

----------------------------------------

TITLE: FileExists Function Usage Examples in Hugo Templates
DESCRIPTION: Demonstrates various use cases of the os.FileExists function with different path patterns and their corresponding return values. Shows both absolute and relative path checks.

LANGUAGE: go-html-template
CODE:
{{ fileExists "content" }} → true
{{ fileExists "content/news" }} → true
{{ fileExists "content/news/article-1" }} → false
{{ fileExists "content/news/article-1.md" }} → true
{{ fileExists "news" }} → true
{{ fileExists "news/article-1" }} → false
{{ fileExists "news/article-1.md" }} → true

----------------------------------------

TITLE: String Comparison with collections.Where in Hugo
DESCRIPTION: Shows how to use collections.Where for string comparisons, including equality and inequality checks.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Section" "eq" "books" }}
{{ $pages := where .Site.RegularPages "Section" "ne" "books" }}

----------------------------------------

TITLE: Using urls.Ref Function in Hugo Templates
DESCRIPTION: Examples demonstrating different ways to use the urls.Ref function to generate absolute URLs. Shows basic path reference, using options map with language specification, and output format configuration.

LANGUAGE: go-html-template
CODE:
{{ ref . "/books/book-1" }} → https://example.org/en/books/book-1/

{{ $opts := dict "path" "/books/book-1" }}
{{ ref . $opts }} → https://example.org/en/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" }}
{{ ref . $opts }} → https://example.org/de/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" "outputFormat" "json" }}
{{ ref . $opts }} → https://example.org/de/books/book-1/index.json

----------------------------------------

TITLE: Template Actions with Whitespace Control
DESCRIPTION: Demonstrates how to control whitespace in template output using hyphenated delimiters.

LANGUAGE: go-html-template
CODE:
{{- $convertToLower := true -}}
{{- if $convertToLower -}}
  <h2>{{ strings.ToLower .Title }}</h2>
{{- end -}}

----------------------------------------

TITLE: Handling Context within 'with' Blocks in Hugo Templates
DESCRIPTION: Shows how to access the original context (using $) within a 'with' block where the context has been rebound.

LANGUAGE: go-html-template
CODE:
{{ with 42 }}
  {{ $.Title }}
{{ end }}

----------------------------------------

TITLE: Sorting Pages by Length in Descending Order
DESCRIPTION: Iterates through pages sorted by content length in descending order using the Reverse modifier, displaying each page's title as a linked heading.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByLength.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Appending Multiple Elements to Slice in Hugo Template
DESCRIPTION: Shows how to append multiple elements to an existing slice using the collections.Append function.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "a" "b" }}
{{ $s }} → [a b]

{{ $s = $s | append "c" "d" }}
{{ $s }} → [a b c d]

----------------------------------------

TITLE: Creating Parent Section Link in Hugo Template
DESCRIPTION: Template code that safely creates a link to the parent section of the current page, including a check for parent existence using the with statement.

LANGUAGE: go-html-template
CODE:
{{ with .Parent }}
  <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
{{ end }}

----------------------------------------

TITLE: Configuring Site Parameters in Hugo
DESCRIPTION: Example of setting a boolean parameter in Hugo site configuration using TOML format.

LANGUAGE: toml
CODE:
[params]
showHeroImage = false

----------------------------------------

TITLE: Creating an Invert Filter in Hugo
DESCRIPTION: This snippet demonstrates how to create an invert filter using the images.Invert function in Hugo. The filter negates the colors of an image when applied.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Invert }}

----------------------------------------

TITLE: Multiplying Numbers Using math.Mul in Hugo Templates
DESCRIPTION: Demonstrates how to multiply multiple numbers using the math.Mul function. The function takes two or more numeric values and returns their product. If any of the input numbers is a float, the result will be returned as a float.

LANGUAGE: go-html-template
CODE:
{{ mul 12 3 2 }} → 72

----------------------------------------

TITLE: Custom Robots.txt Template Example
DESCRIPTION: Example of a custom robots.txt template that creates disallow directives for all pages on the site, preventing search engines from crawling any page.

LANGUAGE: text
CODE:
User-agent: *
{{ range .Pages }}
Disallow: {{ .RelPermalink }}
{{ end }}

----------------------------------------

TITLE: Implementing OR Filtering with collections.Union in Hugo
DESCRIPTION: Shows how to use collections.Union in combination with where queries to create complex OR filters for page selection in Hugo. This example filters pages based on type, pinned status, and the presence of images.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Type" "not in" (slice "page" "about") }}
{{ $pages = $pages | union (where .Site.RegularPages "Params.pinned" true) }}
{{ $pages = $pages | intersect (where .Site.RegularPages "Params.images" "!=" nil) }}

----------------------------------------

TITLE: Using math.Min Function in Hugo Templates
DESCRIPTION: Demonstrates how to use the math.Min function in Hugo to find the smallest number from a mix of scalar values and slices. The function accepts multiple arguments and returns the minimum value as a float64.

LANGUAGE: go-html-template
CODE:
{{ math.Min 1 (slice 2 3) 4 }} → 1

----------------------------------------

TITLE: Creating a Simple Map with collections.Dictionary in Hugo
DESCRIPTION: This snippet demonstrates how to create a simple map using the collections.Dictionary function in Hugo templates. It creates a map with two key-value pairs.

LANGUAGE: go-html-template
CODE:
{{ $m := dict "a" 1 "b" 2 }}

----------------------------------------

TITLE: CSS Styling for GoAT SVG
DESCRIPTION: CSS example for customizing the font family of GoAT diagram SVG output.

LANGUAGE: css
CODE:
svg.foo {
  font-family: "Segoe UI","Noto Sans",Helvetica,Arial,sans-serif
}

----------------------------------------

TITLE: Filtering Elements Using collections.Complement in Hugo
DESCRIPTION: This snippet demonstrates how to use the collections.Complement function to find elements in one slice that are not present in other slices. It also shows an alternative syntax using a chained pipeline.

LANGUAGE: go-html-template
CODE:
{{ $c1 := slice 3 }}
{{ $c2 := slice 4 5 }}
{{ $c3 := slice 1 2 3 4 5 }}

{{ complement $c1 $c2 $c3 }} → [1 2]

LANGUAGE: go-html-template
CODE:
{{ $c3 | complement $c1 $c2 }} → [1 2]

----------------------------------------

TITLE: Hugo Directory Structure Example
DESCRIPTION: Demonstrates the typical Hugo content directory structure with different page kinds (home, page, section, taxonomy, term) marked for each file type.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1/
│   │   └── index.md    <-- kind = page
│   ├── book-2.md       <-- kind = page
│   └── _index.md       <-- kind = section
├── tags/
│   ├── fiction/
│   │   └── _index.md   <-- kind = term
│   └── _index.md       <-- kind = taxonomy
└── _index.md           <-- kind = home

----------------------------------------

TITLE: Hugo Function Reference Page Structure
DESCRIPTION: Basic Hugo page frontmatter and shortcode structure for the functions reference documentation

LANGUAGE: markdown
CODE:
---
title: Functions
description: A quick reference guide to Hugo's functions, grouped by namespace. Aliases, if any, appear in parentheses to the right of the function name.
categories: []
keywords: []
---

{{% quick-reference section="functions" %}}

----------------------------------------

TITLE: Rendered HTML Output of Param Shortcode
DESCRIPTION: Shows the HTML output after Hugo processes the param shortcode, demonstrating how the parameter value is inserted into the content.

LANGUAGE: html
CODE:
<p>We found a red shirt.</p>

----------------------------------------

TITLE: Generating Random Float [0.1-5.0]
DESCRIPTION: Generates a random float with one decimal place in the closed interval [0.1, 5.0] using multiplication, Ceil, and division operations.

LANGUAGE: go-html-template
CODE:
{{ div (math.Rand | mul 50 | math.Ceil) 10 }}

----------------------------------------

TITLE: Creating Image Contrast Filter in Hugo Templates
DESCRIPTION: Creates an image filter that adjusts contrast by a specified percentage. The percentage must be between -100 and 100, where -100 produces solid grey, 0 has no effect, and 100 creates maximum contrast.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Contrast -20 }}

----------------------------------------

TITLE: Generating URLs Without Leading Slash Using Docs BaseURL in Hugo
DESCRIPTION: Examples showing absLangURL function behavior with docs subdirectory in baseURL for paths without leading slash.

LANGUAGE: go-html-template
CODE:
{{ absLangURL "" }}           → https://example.org/docs/en/
{{ absLangURL "articles" }}   → https://example.org/docs/en/articles
{{ absLangURL "style.css" }}  → https://example.org/docs/en/style.css

----------------------------------------

TITLE: Generated HTML Table of Contents Structure
DESCRIPTION: Example HTML output generated by Hugo's TableOfContents method, showing a nested navigation structure with section links and hierarchical organization.

LANGUAGE: html
CODE:
<nav id="TableOfContents">
  <ul>
    <li><a href="#section-1">Section 1</a>
      <ul>
        <li><a href="#section-11">Section 1.1</a></li>
        <li><a href="#section-12">Section 1.2</a></li>
      </ul>
    </li>
    <li><a href="#section-2">Section 2</a></li>
  </ul>
</nav>

----------------------------------------

TITLE: Counting String Runes Excluding Whitespace in Hugo
DESCRIPTION: Demonstrates using the strings.CountRunes function to count runes in a string containing both ASCII and Unicode characters. The function excludes whitespace from the count, returning the total number of non-whitespace runes.

LANGUAGE: go-html-template
CODE:
{{ "Hello, 世界" | strings.CountRunes }} → 8

----------------------------------------

TITLE: Illustrating Hugo's Content Structure
DESCRIPTION: This snippet shows the typical directory structure in a Hugo project, highlighting the different page kinds, including the home page.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1/
│   │   └── index.md  <-- kind = page
│   ├── book-2.md     <-- kind = page
│   └── _index.md     <-- kind = section
└── _index.md         <-- kind = home

----------------------------------------

TITLE: Removing Duplicates from a Slice Using collections.Uniq in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use the collections.Uniq function to remove duplicate elements from a slice. It takes a slice of integers as input and returns a new slice with unique elements.

LANGUAGE: go-html-template
CODE:
{{ slice 1 3 2 1 | uniq }} → [1 3 2]

----------------------------------------

TITLE: Removing Whitespace with strings.TrimSpace in Hugo Templates
DESCRIPTION: Demonstrates the use of strings.TrimSpace function to remove leading and trailing whitespace from a string. This includes standard whitespace characters and Unicode space separators.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimSpace "\n\r\t   foo   \n\r\t" }} → foo

----------------------------------------

TITLE: Using Len Method with Collections in Hugo Templates
DESCRIPTION: Shows an alternative way to get the number of pages in a collection using the 'Len' method directly on the collection object.

LANGUAGE: go-html-template
CODE:
{{ site.RegularPages.Len }} → 42

----------------------------------------

TITLE: Creating a Git Commit Message for Hugo Documentation
DESCRIPTION: Example of a well-formatted Git commit message for Hugo documentation changes, including a summary, detailed description, and issue references.

LANGUAGE: text
CODE:
git commit -m "content: Restructure the taxonomy page

This restructures the taxonomy page by splitting topics into logical
sections, each with one or more examples.

Fixes #9999
Closes #9998"

----------------------------------------

TITLE: Getting Author Email
DESCRIPTION: Shows how to retrieve the Git commit author's email address.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .AuthorEmail }} → jsmith@example.org
{{ end }}

----------------------------------------

TITLE: Directory Structure Example for Theme Data
DESCRIPTION: Shows the recommended directory structure for theme authors to namespace their data files to prevent collisions.

LANGUAGE: text
CODE:
project/
└── data/
    └── mytheme/
        └── foo.json

----------------------------------------

TITLE: Applying Filters with Resource Filter Method
DESCRIPTION: Shows how to apply filters using the Filter method on a Resource object and display the result in an img tag.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with .Filter $filters }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Checking Map Type with reflect.IsMap in Hugo Templates
DESCRIPTION: Examples showing how to use reflect.IsMap to determine if a value is a map. The function returns true for map values (like dict) and false for non-map values (like strings).

LANGUAGE: go-html-template
CODE:
{{ reflect.IsMap (dict "key" "value") }} → true
{{ reflect.IsMap "yo" }} → false

----------------------------------------

TITLE: Inherited Options for Hugo Version Command in Bash
DESCRIPTION: These are the options inherited from parent commands that can be used with the 'hugo version' command. They include various configuration and build settings.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Mixed Type Comparisons with compare.Ge in Hugo Templates
DESCRIPTION: Examples showing how compare.Ge can be used with different data types including strings, timestamps, and boolean values. Demonstrates the function's versatility beyond numeric comparisons.

LANGUAGE: go-html-template
CODE:
{{ ge "ab" "a" }} → true
{{ ge time.Now (time.AsTime "1964-12-30") }} → true
{{ ge true false }} → true

----------------------------------------

TITLE: Setting Expiry Date in Hugo Front Matter
DESCRIPTION: Example of setting a page expiry date in Hugo front matter using TOML format. The expiryDate field accepts a timestamp in ISO 8601 format.

LANGUAGE: toml
CODE:
title = 'Article 1'
expiryDate = 2024-10-19T00:32:13-07:00

----------------------------------------

TITLE: Configuring Disqus Shortname in Hugo
DESCRIPTION: Configuration snippet showing how to set up the Disqus shortname in Hugo's configuration file. This is the minimal required configuration to enable Disqus comments.

LANGUAGE: toml
CODE:
[services.disqus]
shortname = 'your-disqus-shortname'

----------------------------------------

TITLE: Accessing Positional Arguments in Hugo Shortcode Template
DESCRIPTION: Demonstrates how to access positional arguments in a shortcode template using index notation with .Params. Returns values from the slice of arguments.

LANGUAGE: go-html-template
CODE:
{{ index .Params 0 }} → Hello
{{ index .Params 1 }} → world

----------------------------------------

TITLE: Implementing Math Render Hook Template
DESCRIPTION: Template for rendering mathematical markup using the transform.ToMath function with error handling and conditional CSS inclusion.

LANGUAGE: go-html-template
CODE:
{{- $opts := dict "output" "htmlAndMathml" "displayMode" (eq .Type "block") }}
{{- with try (transform.ToMath .Inner $opts) }}
  {{- with .Err }}
    {{- errorf "Unable to render mathematical markup to HTML using the transform.ToMath function. The KaTeX display engine threw the following error: %s: see %s." . $.Position }}
  {{- else }}
    {{- .Value }}
    {{- $.Page.Store.Set "hasMath" true }}
  {{- end }}
{{- end -}}

----------------------------------------

TITLE: Creating Dither Options in Hugo Templates
DESCRIPTION: Creates a dictionary of dithering options including custom colors, method, and strength settings.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict
  "colors" (slice "222222" "808080" "dddddd")
  "method" "ClusteredDot4x4"
  "strength" 0.85
}}

----------------------------------------

TITLE: Creating Multiple Image Filters
DESCRIPTION: Shows how to create multiple filters for WebP conversion and mask application, combining them into a slice.

LANGUAGE: go-html-template
CODE:
{{ $filter1 := images.Process "webp" }}
{{ $filter2 := images.Mask (resources.Get "images/mask.png") }}
{{ $filters := slice $filter1 $filter2 }}

----------------------------------------

TITLE: Logging Suppressible Error in Hugo Template
DESCRIPTION: Demonstrates how to use the fmt.Erroridf function to log a suppressible ERROR message in a Hugo template. The function takes an error ID and a format string as parameters.

LANGUAGE: go-html-template
CODE:
{{ erroridf "error-42" "You should consider fixing this." }}

----------------------------------------

TITLE: Basic Usage of js.Build in Hugo Templates
DESCRIPTION: This snippet shows a simple usage of js.Build to process a JavaScript file in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $built := resources.Get "js/index.js" | js.Build "main.js" }}

----------------------------------------

TITLE: URL Query Parameter Escaping with Hugo Template
DESCRIPTION: Demonstrates how to use Hugo's urlquery function to safely encode a URL for use as a query parameter. The example shows encoding 'https://example.com' and embedding it in an anchor tag's href attribute.

LANGUAGE: go-html-template
CODE:
{{ $u := urlquery "https://" "example.com" | safeURL }}
<a href="https://example.org?url={{ $u }}">Link</a>

----------------------------------------

TITLE: Hugo Mod Get Command Options
DESCRIPTION: Available options specific to the 'hugo mod get' command. Currently, it only includes the help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for get

----------------------------------------

TITLE: Basic Numeric Comparisons with compare.Ge in Hugo Templates
DESCRIPTION: Examples of using compare.Ge function with numeric values, demonstrating both single and multiple argument comparisons. Shows various combinations of numbers to illustrate the function's behavior.

LANGUAGE: go-html-template
CODE:
{{ ge 1 1 }} → true
{{ ge 1 2 }} → false
{{ ge 2 1 }} → true

{{ ge 1 1 1 }} → true
{{ ge 1 1 2 }} → false
{{ ge 1 2 1 }} → false
{{ ge 1 2 2 }} → false

{{ ge 2 1 1 }} → true
{{ ge 2 1 2 }} → true
{{ ge 2 2 1 }} → true

----------------------------------------

TITLE: Using transform.XMLEscape in Hugo Templates
DESCRIPTION: Demonstrates the basic usage of the transform.XMLEscape function to escape XML-specific characters in a string.

LANGUAGE: go-html-template
CODE:
{{ transform.XMLEscape "<p>abc</p>" }} → &lt;p&gt;abc&lt;/p&gt;

----------------------------------------

TITLE: Basic Script Configuration in Hugo Template
DESCRIPTION: Shows how to configure a basic script within a batch group using js.Batch. Sets up script options including resource specification.

LANGUAGE: go-html-template
CODE:
{{ with js.Batch "js/mybatch" }}
  {{ with .Group "mygroup" }}
      {{ with .Script "myscript" }}
          {{ .SetOptions (dict "resource" (resources.Get "myscript.js")) }}
      {{ end }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Retrieving Full Commit Hash
DESCRIPTION: Demonstrates how to get the full Git commit hash.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .Hash }} → aab9ec0b31ebac916a1468c4c9c305f2bebf78d4
{{ end }}

----------------------------------------

TITLE: Extracting Hour from Time.Time in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the AsTime function to parse a timestamp string into a time.Time object, and then use the Hour method to extract the hour component. The hour is returned as an integer in the range [0, 23].

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.Hour }} → 23

----------------------------------------

TITLE: Using 'else' with 'if' Statement in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use the 'else' statement with an 'if' condition in Hugo Go templates. It checks a variable and prints different output based on its value.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ if $var }}
  {{ $var }} → foo
{{ else }}
  {{ print "var is falsy" }}
{{ end }}

----------------------------------------

TITLE: Creating Grayscale Image Filter in Hugo Templates
DESCRIPTION: Creates a grayscale filter instance that can be applied to images in Hugo templates. The filter converts colored images to grayscale versions.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Grayscale }}

----------------------------------------

TITLE: Adding Numbers with Hugo's math.Add Function
DESCRIPTION: Demonstrates numeric addition using the math.Add function. Takes multiple number arguments and returns their sum. In this example, adds three numbers: 12, 3, and 2.

LANGUAGE: go-html-template
CODE:
{{ add 12 3 2 }} → 17

----------------------------------------

TITLE: Running Hugo Mod Get Command
DESCRIPTION: The basic syntax for running the 'hugo mod get' command. This command resolves dependencies in the current Hugo project. It can be used with various flags and arguments to specify module versions and update behavior.

LANGUAGE: bash
CODE:
hugo mod get [flags] [args]

----------------------------------------

TITLE: Comparing Numeric Values with compare.Le in Hugo Templates
DESCRIPTION: Demonstrates numeric comparisons using the compare.Le function to check if values are less than or equal to each other. Shows examples with two and three arguments.

LANGUAGE: go-html-template
CODE:
{{ le 1 1 }} → true
{{ le 1 2 }} → true
{{ le 2 1 }} → false

{{ le 1 1 1 }} → true
{{ le 1 1 2 }} → true
{{ le 1 2 1 }} → true
{{ le 1 2 2 }} → true

{{ le 2 1 1 }} → false
{{ le 2 1 2 }} → false
{{ le 2 2 1 }} → false

----------------------------------------

TITLE: Defining Sanity Schema for Post Type
DESCRIPTION: This snippet defines the schema for a post type in Sanity, including fields for title, summary, slug, publish date, and body content with support for blocks, images, and code.

LANGUAGE: typescript
CODE:
import {defineField, defineType} from 'sanity'

export const postType = defineType({
  name: 'post',
  title: 'Post',
  type: 'document',
  fields: [
    defineField({
      name: 'title',
      type: 'string',
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'summary',
      type: 'string',
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      options: {source: 'title'},
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'publishedAt',
      type: 'datetime',
      initialValue: () => new Date().toISOString(),
      validation: (rule) => rule.required(),
    }),
    defineField({
      name: 'body',
      type: 'array',
      of: [
        {
          type: 'block',
        },
        {
          type: 'image'
        },
        {
          type: 'code',
          options: {
            language: 'css',
            languageAlternatives: [
              {title: 'HTML', value: 'html'},
              {title: 'CSS', value: 'css'},
            ],
            withFilename: true,
          },
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Sorting Menu Entries Using sort Function in Hugo Templates
DESCRIPTION: Example of using Hugo's sort function to sort menu entries by weight in descending order, as an alternative to ByWeight.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range sort .Site.Menus.main "Weight" "desc" }}
    <li><a href="{{ .URL }}">{{ .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Default Language Site Link
DESCRIPTION: Hugo template for creating a link specifically to the default language version of the site using Sites.Default.

LANGUAGE: go-html-template
CODE:
{{ with .Site.Sites.Default }}
  <a href="{{ .Home.Permalink }}">{{ .Title }}</a>
{{ end }}

----------------------------------------

TITLE: Demonstrating 'continue' in Hugo Template
DESCRIPTION: This snippet shows how to use the 'continue' keyword within a range loop in a Hugo template. It iterates over a slice of strings, skipping the element 'bar' and rendering the others as paragraph elements.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "foo" "bar" "baz" }}
{{ range $s }}
  {{ if eq . "bar" }}
    {{ continue }}
  {{ end }}
  <p>{{ . }}</p>
{{ end }}

----------------------------------------

TITLE: Using 'else' with 'with' Statement in Hugo Go Templates
DESCRIPTION: This snippet shows how to use the 'else' statement with a 'with' block in Hugo Go templates. It checks if a variable has a truthy value and executes different code blocks accordingly.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ with $var }}
  {{ . }} → foo
{{ else }}
  {{ print "var is falsy" }}
{{ end }}

----------------------------------------

TITLE: Creating Pixelation Filter in Hugo
DESCRIPTION: This snippet demonstrates how to create a pixelation filter using the images.Pixelate function in Hugo. The SIZE parameter determines the size of the pixels in the resulting image.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Pixelate 4 }}

----------------------------------------

TITLE: Converting Decimal Numbers to Strings in Hugo Templates
DESCRIPTION: Demonstrates converting decimal numbers and their string representations to strings. Shows both integer and floating-point conversion examples.

LANGUAGE: go-html-template
CODE:
{{ string 11 }} → 11 (string)
{{ string "11" }} → 11 (string)

{{ string 11.1 }} → 11.1 (string)
{{ string "11.1" }} → 11.1 (string)

{{ string 11.9 }} → 11.9 (string)
{{ string "11.9" }} → 11.9 (string)

----------------------------------------

TITLE: Creating a Custom Author Term Template in Hugo
DESCRIPTION: This snippet demonstrates how to create a custom term template for an 'authors' taxonomy, displaying author metadata, portrait, and associated content.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  <p>Affiliation: {{ .Params.affiliation }}</p>
  {{ with .Resources.Get "portrait.jpg" }}
    {{ with .Fill "100x100" }}
      <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="portrait">
    {{ end }}
  {{ end }}
  {{ .Content }}
  {{ range .Pages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Accessing Named Arguments in Hugo Shortcode Template
DESCRIPTION: Shows how to access named arguments in a shortcode template using dot notation with .Params. Returns values from the map of arguments.

LANGUAGE: go-html-template
CODE:
{{ .Params.greeting }} → Hello
{{ .Params.name }} → world

----------------------------------------

TITLE: Hugo Config Mounts Inherited Options
DESCRIPTION: Command-line options inherited from parent commands, including configuration, environment, and rendering options.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Error Examples with compare.Conditional in Hugo
DESCRIPTION: Illustrates scenarios where the compare.Conditional function throws errors due to the absence of short-circuit evaluation. Both examples attempt operations that would cause errors regardless of the control value.

LANGUAGE: go-html-template
CODE:
{{ cond true "true" (div 1 0) }}
{{ cond false (div 1 0) "false" }}

----------------------------------------

TITLE: Rendered HTML Output of GetTerms
DESCRIPTION: Shows the final HTML output generated by the GetTerms method when used in a Hugo template. It displays a list of tags with links to their respective pages.

LANGUAGE: html
CODE:
<p>Tags</p>
<ul>
  <li><a href="/tags/historical/">historical</a></li>
  <li><a href="/tags/classic/">classic</a></li>
  <li><a href="/tags/fiction/">fiction</a></li>
</ul>

----------------------------------------

TITLE: Converting Decimal Values to Integers in Hugo Templates
DESCRIPTION: Examples of converting decimal values to integers using the int function in Hugo templates. This includes both numeric and string inputs, as well as handling of floating-point numbers.

LANGUAGE: go-html-template
CODE:
{{ int 11 }} → 11 (int)
{{ int "11" }} → 11 (int)

{{ int 11.1 }} → 11 (int)
{{ int 11.9 }} → 11 (int)

----------------------------------------

TITLE: Formatting Currency with lang.FormatAccounting in Hugo Templates
DESCRIPTION: Demonstrates the usage of lang.FormatAccounting function to format a number as currency in accounting notation. It takes precision, currency code, and the number as parameters, returning a formatted string.

LANGUAGE: go-html-template
CODE:
{{ 512.5032 | lang.FormatAccounting 2 "NOK" }} → NOK512.50

----------------------------------------

TITLE: Unmarshaling a page resource in Hugo
DESCRIPTION: Demonstrates how to unmarshal a JSON file from a page bundle using transform.Unmarshal in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $path := "books.json" }}
{{ with .Resources.Get $path }}
  {{ with . | transform.Unmarshal }}
    {{ $data = . }}
  {{ end }}
{{ else }}
  {{ errorf "Unable to get page resource %q" $path }}
{{ end }}

{{ range where $data "author" "Victor Hugo" }}
  {{ .title }} → Les Misérables
{{ end }}

----------------------------------------

TITLE: Defining an Inline Partial Template in Hugo
DESCRIPTION: This example shows how to define an inline partial template named 'partials/inline/foo.html' using the 'define' keyword. It demonstrates passing a dictionary with an 'answer' key to the partial and accessing it within the template.

LANGUAGE: go-html-template
CODE:
{{ partial "inline/foo.html" (dict "answer" 42) }}

{{ define "partials/inline/foo.html" }}
  {{ printf "The answer is %v." .answer }}
{{ end }}

----------------------------------------

TITLE: Finding All H2 Elements Using Regular Expressions in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the findRE function to return a slice of all second level headings (h2 elements) within the rendered .Content. The regular expression uses the 's' flag to allow matching across newlines.

LANGUAGE: go-html-template
CODE:
{{ findRE `(?s)<h2.*?>.*?</h2>` .Content }}

----------------------------------------

TITLE: Calculating Cosine Using math.Cos in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the math.Cos function in Hugo to calculate the cosine of a radian value. The function takes a single numeric argument and returns a float64 result.

LANGUAGE: go-html-template
CODE:
{{ math.Cos 1 }} → 0.5403023058681398

----------------------------------------

TITLE: Displaying Hugo Parent Command Options
DESCRIPTION: This snippet shows the options inherited from parent commands for the 'hugo completion' command. It includes various configuration and build-related options.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Converting Octal Values to Float in Hugo Templates
DESCRIPTION: Illustrates the conversion of octal (base 8) values to float64 using the float function in Hugo templates. It shows both traditional and modern octal notation.

LANGUAGE: go-html-template
CODE:
{{ float 011 }} → 9 (float64)
{{ float "011" }} → 11 (float64)

{{ float 0o11 }} → 9 (float64)

----------------------------------------

TITLE: Converting Binary Values to Integers in Hugo Templates
DESCRIPTION: Demonstration of converting binary (base 2) values to integers using the int function in Hugo templates. This includes both numeric and string representations of binary numbers.

LANGUAGE: go-html-template
CODE:
{{ int 0b11 }} → 3 (int)
{{ int "0b11" }} → 3 (int)

----------------------------------------

TITLE: Hugo Convert Inherited Parent Command Options
DESCRIPTION: Options inherited from parent commands that can be used with the toTOML conversion command.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
  -o, --output string              filesystem path to write files to
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory
      --unsafe                     enable less safe operations, please backup first

----------------------------------------

TITLE: Sample YAML Data Structure for Fiction Books
DESCRIPTION: Example YAML file containing structured data for fiction books with title, author, and ISBN information.

LANGUAGE: yaml
CODE:
- title: The Hunchback of Notre Dame
  author: Victor Hugo
  isbn: 978-0140443530
- title: Les Misérables
  author: Victor Hugo
  isbn: 978-0451419439

----------------------------------------

TITLE: Accessing Language Weight
DESCRIPTION: Demonstrates how to get the language weight used for ordering

LANGUAGE: go-html-template
CODE:
{{ .Site.Language.Weight }} → 1

----------------------------------------

TITLE: HTML Output of GoAT Diagram Rendering
DESCRIPTION: The HTML structure generated by Hugo when rendering a GoAT diagram, showing the SVG container wrapper.

LANGUAGE: html
CODE:
<div class="goat svg-container">
  <svg xmlns="http://www.w3.org/2000/svg" font-family="Menlo,Lucida Console,monospace" viewBox="0 0 352 57">
    ...
  </svg>
</div>

----------------------------------------

TITLE: Basic Regular Expression Replacement in Hugo
DESCRIPTION: Demonstrates basic usage of strings.ReplaceRE to replace multiple consecutive hyphens with a single hyphen.

LANGUAGE: go-html-template
CODE:
{{ $s := "a-b--c---d" }}
{{ replaceRE `(-{2,})` "-" $s }} → a-b-c-d

----------------------------------------

TITLE: Manual Deployment Commands for Hugo Site to SourceHut Pages
DESCRIPTION: Shell commands for building a Hugo site, packaging it, and publishing to SourceHut Pages using the hut CLI tool. Requires a SourceHut personal access token and the hut CLI tool to be installed.

LANGUAGE: sh
CODE:
hugo
tar -C public -cvz . > site.tar.gz
hut init
hut pages publish -d <YourUsername>.srht.site site.tar.gz

----------------------------------------

TITLE: Rendering Resources from a Headless Page Bundle in Hugo
DESCRIPTION: This example demonstrates how to use the GetPage method to access a headless page bundle and iterate through its image resources, rendering them as HTML img tags.

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/headless" }}
  {{ range .Resources.ByType "image" }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Displaying Hugo Gen Command Options
DESCRIPTION: Shows the available options for the 'hugo gen' command, including the help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for gen

----------------------------------------

TITLE: Converting Hexadecimal Values to Float in Hugo Templates
DESCRIPTION: Demonstrates the use of the float function to convert a hexadecimal (base 16) value to float64 in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ float 0x11 }} → 17 (float64)

----------------------------------------

TITLE: Accessing XML attributes and namespaces in Hugo
DESCRIPTION: Demonstrates how to access XML attributes and namespaced elements after unmarshaling an XML RSS feed in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ with $data.channel.item }}
  <ul>
    {{ range . }}
      {{ $title := index .title "#text" }}
      {{ $lang := index .title "-lang" }}
      {{ $ISBN := .number }}
      <li>{{ $title }} ({{ $lang }}) {{ $ISBN }}</li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Calculating Arccosine Using Hugo's Math Function
DESCRIPTION: Demonstrates how to use the math.Acos function to calculate the arccosine of a number. The function takes a single numeric value and returns the arccosine in radians. In this example, it calculates the arccosine of 1, which equals 0 radians.

LANGUAGE: go-html-template
CODE:
{{ math.Acos 1 }} → 0

----------------------------------------

TITLE: Logging an Error with fmt.Errorf in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the fmt.Errorf function in Hugo templates to log an error message. It formats the error message with placeholders for a shortcode name and its position.

LANGUAGE: go-html-template
CODE:
{{ errorf "The %q shortcode requires a src argument. See %s" .Name .Position }}

----------------------------------------

TITLE: Calculating Sine Using math.Sin in Hugo Templates
DESCRIPTION: This snippet demonstrates the usage of the math.Sin function in Hugo templates to calculate the sine of a radian value. The function takes a single numeric argument representing the angle in radians and returns the sine as a float64 value.

LANGUAGE: go-html-template
CODE:
{{ math.Sin 1 }} → 0.8414709848078965

----------------------------------------

TITLE: Accessing Remote CSV Data
DESCRIPTION: Shows how to fetch and process remote CSV files using the getCSV function.

LANGUAGE: go-html-template
CODE:
{{ $data := getCSV "," "https://example.org/pets.csv" }}
{{ $data := getCSV "," "https://example.org/" "pets.csv" }}

----------------------------------------

TITLE: Repeating Strings Using strings.Repeat in Hugo Templates
DESCRIPTION: The strings.Repeat function takes two parameters: a count (integer) and an input string. It returns a new string that consists of the input string repeated the specified number of times. In this example, it repeats 'yo' three times to produce 'yoyoyo'.

LANGUAGE: go-html-template
CODE:
{{ strings.Repeat 3 "yo" }} → yoyoyo

----------------------------------------

TITLE: Basic Hugo Rsync Deployment Command
DESCRIPTION: Simple command combining Hugo build and rsync deployment to remote server

LANGUAGE: txt
CODE:
hugo && rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/

----------------------------------------

TITLE: Hugo List Drafts Command Options
DESCRIPTION: Displays the available options specific to the 'hugo list drafts' command.

LANGUAGE: bash
CODE:
  -h, --help   help for drafts

----------------------------------------

TITLE: Calculating SHA1 Hash in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the crypto.SHA1 function in Hugo templates to generate the SHA1 hash of a string. The function takes a string input and returns the hexadecimal representation of its SHA1 checksum.

LANGUAGE: go-html-template
CODE:
{{ sha1 "Hello world" }} → 7b502c3a1f48c8609ae212cdfb639dee39673f5e

----------------------------------------

TITLE: Calculating Arcsine Using Hugo's Math.Asin Function
DESCRIPTION: Demonstrates using the math.Asin function to calculate the arcsine of 1, which returns approximately π/2 radians (1.5707963267948966). The function accepts a numeric value and returns a float64 result in radians.

LANGUAGE: go-html-template
CODE:
{{ math.Asin 1 }} → 1.5707963267948966

----------------------------------------

TITLE: Installing Tailwind CSS CLI with npm
DESCRIPTION: Command to install Tailwind CSS CLI v4.0 or later using npm package manager

LANGUAGE: sh
CODE:
npm install --save-dev tailwindcss @tailwindcss/cli

----------------------------------------

TITLE: Basic After Function Usage with Slice in Hugo Templates
DESCRIPTION: Demonstrates basic usage of the After function to slice an array starting after the second element and render the results in an HTML list.

LANGUAGE: go-html-template
CODE:
{{ $data := slice "one" "two" "three" "four" }}
<ul>
  {{ range after 2 $data }}
    <li>{{ . }}</li>
  {{ end }}
</ul>

LANGUAGE: html
CODE:
<ul>
  <li>three</li>
  <li>four</li>
</ul>

----------------------------------------

TITLE: Page Resource Implementation
DESCRIPTION: Demonstrates using Resources.Get with transform.Unmarshal for page resources.

LANGUAGE: text
CODE:
my-project/
└── content/
    └── posts/
        └── my-pets/
            ├── index.md
            └── pets.csv

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $p := "pets.csv" }}
{{ with .Resources.Get $p }}
  {{ $opts := dict "delimiter" "," }}
  {{ $data = . | transform.Unmarshal $opts }}
{{ else }}
  {{ errorf "Unable to get resource %q" $p }}
{{ end }}

----------------------------------------

TITLE: Adding Request Headers
DESCRIPTION: Examples of adding single and multiple headers to CSV requests.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "Authorization" "Bearer abcd" }}
{{ $data := getCSV "," "https://example.org/pets.csv" $opts }}

{{ $opts := dict "X-List" (slice "a" "b" "c") }}
{{ $data := getCSV "," "https://example.org/pets.csv" $opts }}

----------------------------------------

TITLE: Bypassing Automatic HTML Escaping in Hugo Templates
DESCRIPTION: Shows how to use the safeHTML function in conjunction with htmlUnescape to prevent Go's html/template package from re-escaping the unescaped string.

LANGUAGE: go-html-template
CODE:
{{ htmlUnescape "Lilo &amp; Stitch" | safeHTML }}

----------------------------------------

TITLE: Uninstalling Hugo Extended with Winget on Windows
DESCRIPTION: Command to uninstall the extended edition of Hugo using Microsoft's Winget package manager on Windows.

LANGUAGE: sh
CODE:
winget uninstall --name "Hugo (Extended)"

----------------------------------------

TITLE: Checking String Content with strings.ContainsAny in Hugo Templates
DESCRIPTION: This snippet demonstrates the usage of strings.ContainsAny function in Hugo templates. It checks if the string "Hugo" contains any characters from the set "gm". The function returns a boolean value indicating whether any match is found.

LANGUAGE: go-html-template
CODE:
{{ strings.ContainsAny "Hugo" "gm" }} → true

----------------------------------------

TITLE: Setting Values with hugo.Store
DESCRIPTION: Demonstrates how to set a value using the Set method in hugo.Store

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.Set "greeting" "Hello" }}

----------------------------------------

TITLE: Hugo New Content Command Options
DESCRIPTION: This snippet lists the available options for the 'hugo new content' command. It includes options for specifying the base URL, cache directory, content directory, editor, force overwrite, content type, render segments, and themes.

LANGUAGE: plaintext
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
      --editor string            edit new content with this editor, if provided
  -f, --force                    overwrite file if it already exists
  -h, --help                     help for content
  -k, --kind string              content type to create
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Computing SHA256 Checksum in Hugo Go HTML Template
DESCRIPTION: This snippet demonstrates how to use the sha256 function in a Hugo template to generate the SHA256 checksum of a string. The function takes a string input and returns the hexadecimal representation of its SHA256 hash.

LANGUAGE: go-html-template
CODE:
{{ sha256 "Hello world" }} → 64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c

----------------------------------------

TITLE: Defining Translations with Pluralization in TOML/YAML
DESCRIPTION: Illustrates how to define translations with pluralization rules in TOML or YAML for English and Polish languages.

LANGUAGE: toml
CODE:
[day]
one = 'day'
other = 'days'

[day_with_count]
one = '{{ . }} day'
other = '{{ . }} days'

LANGUAGE: toml
CODE:
[day]
one = 'miesiąc'
few = 'miesiące'
many = 'miesięcy'
other = 'miesiąca'

[day_with_count]
one = '{{ . }} miesiąc'
few = '{{ . }} miesiące'
many = '{{ . }} miesięcy'
other = '{{ . }} miesiąca'

----------------------------------------

TITLE: Using math.Abs Function in Hugo
DESCRIPTION: Demonstrates how to use the math.Abs function to convert a negative number to its absolute value. The function takes a numeric input and returns a float64 positive number.

LANGUAGE: go-html-template
CODE:
{{ math.Abs -2.1 }} → 2.1

----------------------------------------

TITLE: Retrieving Language Weight in Hugo Templates
DESCRIPTION: Shows how to access the language weight from the site configuration, which determines its order in the slice of languages.

LANGUAGE: go-html-template
CODE:
{{ .Language.Weight }} → 2

----------------------------------------

TITLE: Accessing Nested Parameters with Param Shortcode
DESCRIPTION: Shows how to access nested parameter values using dot notation in the param shortcode.

LANGUAGE: text
CODE:
{{%/* param my.nested.param */%}}

----------------------------------------

TITLE: Running Hugo with Info Log Level
DESCRIPTION: This command shows how to run Hugo with the --logLevel info flag, which is necessary to see the timer results in the console output.

LANGUAGE: sh
CODE:
hugo --logLevel info

----------------------------------------

TITLE: Unmarshaling a remote resource in Hugo
DESCRIPTION: Shows how to unmarshal a JSON file from a remote URL using transform.Unmarshal in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $url := "https://example.org/books.json" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ $data = . | transform.Unmarshal }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

{{ range where $data "author" "Victor Hugo" }}
  {{ .title }} → Les Misérables
{{ end }}

----------------------------------------

TITLE: Installing Hugo on NetBSD
DESCRIPTION: Command to install the extended edition of Hugo on NetBSD using the pkgin package manager.

LANGUAGE: sh
CODE:
sudo pkgin install go-hugo

----------------------------------------

TITLE: Hugo Server Trust Command Options in Markdown
DESCRIPTION: Lists the specific options available for the 'hugo server trust' command, including help and uninstall flags.

LANGUAGE: markdown
CODE:
```
  -h, --help        help for trust
      --uninstall   Uninstall the local CA (but do not delete it).
```

----------------------------------------

TITLE: Rendered HTML Output
DESCRIPTION: The resulting HTML output after the template is processed, showing only the first item was rendered before the break statement was triggered.

LANGUAGE: html
CODE:
<p>foo</p>

----------------------------------------

TITLE: Calculating Exponentiation with math.Pow in Hugo Templates
DESCRIPTION: Demonstrates the usage of math.Pow function to calculate the power of a number. It takes two parameters: the base and the exponent. The function returns a float64 value representing the result of the exponentiation.

LANGUAGE: go-html-template
CODE:
{{ math.Pow 2 3 }} → 8

----------------------------------------

TITLE: HTML Emoji Output
DESCRIPTION: Shows how Hugo renders emoji shortcodes to HTML entities

LANGUAGE: html
CODE:
Hello! &#x1f44b;

----------------------------------------

TITLE: Installing Hugo Extended Edition on Arch Linux and Derivatives
DESCRIPTION: Command to install the extended edition of Hugo on Arch Linux and its derivatives using the pacman package manager.

LANGUAGE: sh
CODE:
sudo pacman -S hugo

----------------------------------------

TITLE: Using Section Method in Hugo Templates
DESCRIPTION: Demonstrates how to get the top-level section name using the Section method

LANGUAGE: go-html-template
CODE:
{{ .Section }} → lessons

----------------------------------------

TITLE: Retrieving Go Version in Hugo Template
DESCRIPTION: Demonstrates how to use the hugo.GoVersion function to obtain the Go version used to compile the Hugo binary. Returns a string in the format 'goX.Y.Z' where X.Y.Z represents the version numbers.

LANGUAGE: go-html-template
CODE:
{{ hugo.GoVersion }} → go1.21.1

----------------------------------------

TITLE: Installing Hugo Extended Edition on Exherbo
DESCRIPTION: Steps to install the extended edition of Hugo on Exherbo Linux using the Paludis package manager. Includes configuration and installation commands.

LANGUAGE: text
CODE:
www-apps/hugo extended

LANGUAGE: sh
CODE:
cave resolve -x repository/heirecka
cave resolve -x hugo

----------------------------------------

TITLE: Loading Hugo CLI Completions in Current Powershell Session
DESCRIPTION: This command generates the autocompletion script and loads it into the current Powershell session, enabling immediate use of Hugo CLI command completions.

LANGUAGE: powershell
CODE:
hugo completion powershell | Out-String | Invoke-Expression

----------------------------------------

TITLE: Setting Site Parameters in Hugo Configuration
DESCRIPTION: Demonstrates how to define site parameters in Hugo's configuration file using TOML format.

LANGUAGE: toml
CODE:
[params]
display_toc = true

----------------------------------------

TITLE: Retrieving Total Pages Count with Hugo Paginator
DESCRIPTION: Shows how to create a paginated collection of posts and display the total number of elements. Creates a paginator from regular pages filtered by type 'posts' and demonstrates accessing the total count using TotalNumberOfElements.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate $pages }}

{{ range $paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

{{ with $paginator }}
  {{ .TotalNumberOfElements }}
{{ end }}

----------------------------------------

TITLE: Logging into Firebase CLI
DESCRIPTION: Authenticates the user with Firebase, opening a browser for account selection. Use 'firebase logout' to switch accounts if needed.

LANGUAGE: sh
CODE:
firebase login

----------------------------------------

TITLE: Rendered HTML Output
DESCRIPTION: This snippet shows the HTML output generated by the Hugo template after processing. It demonstrates that the 'bar' element was skipped due to the 'continue' statement.

LANGUAGE: html
CODE:
<p>foo</p>
<p>baz</p>

----------------------------------------

TITLE: Debugging Taxonomy Structure in Hugo
DESCRIPTION: Displays the full data structure of the alphabetically sorted taxonomy for debugging purposes

LANGUAGE: go-html-template
CODE:
<pre>{{ debug.Dump $taxonomyObject.Alphabetical }}</pre>

----------------------------------------

TITLE: Hugo Man Page Generation Direct Options
DESCRIPTION: Available direct options for the man page generation command, including directory specification and help flag.

LANGUAGE: bash
CODE:
      --dir string   the directory to write the man pages. (default "man/")
  -h, --help         help for man

----------------------------------------

TITLE: Rendered HTML for Translations on 'Book 1' Page
DESCRIPTION: This HTML snippet shows the output of the Translations function for the 'Book 1' page on the English site, listing available translations in German and French.

LANGUAGE: html
CODE:
<ul>
  <li><a href="/de/books/book-1/" hreflang="de-DE">Book 1 (Deutsch)</a></li>
  <li><a href="/fr/books/book-1/" hreflang="fr-FR">Book 1 (Français)</a></li>
</ul>

----------------------------------------

TITLE: Rendering Image with Width and Height in Hugo Templates
DESCRIPTION: This snippet shows how to use both Width and Height methods together when rendering an img element in Hugo. It fetches an image resource and then uses its dimensions to set the width and height attributes of the img tag.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}">
{{ end }}

----------------------------------------

TITLE: Mounting Resources in Hugo Templates
DESCRIPTION: Demonstrates how to mount resources from one location to another using the Mount method, particularly useful in js.Batch contexts.

LANGUAGE: go-html-template
CODE:
{{ $common := resources.Match "/js/headlessui/*.*" }}
{{ $importContext := (slice $.Page ($common.Mount "/js/headlessui" ".")) }}

----------------------------------------

TITLE: Calculating Arctangent with math.Atan2 in Hugo Templates
DESCRIPTION: Demonstrates the usage of the math.Atan2 function in Hugo templating. It takes two numeric values as input and returns the arctangent in radians, determining the correct quadrant from their signs.

LANGUAGE: go-html-template
CODE:
{{ math.Atan2 1 2 }} → 0.4636476090008061

----------------------------------------

TITLE: Configuring Hugo Base URL
DESCRIPTION: Sets the base URL configuration for a Hugo site in the hugo configuration file.

LANGUAGE: toml
CODE:
baseURL = 'https://example.org/docs/'

----------------------------------------

TITLE: Configuring Hugo Deployment on 21YunBox
DESCRIPTION: Table showing the configuration values for setting up a Hugo site on 21YunBox. It specifies the environment, build command, and publish directory.

LANGUAGE: markdown
CODE:
|    Field          | Value                                            |
| ----------------- | ------------------------------------------------ |
| Environment       | `Static Site`                                    |
| Build Command     | `hugo --gc --minify` (or your own build command) |
| Publish Directory | `./public` (or your own output directory)        |

----------------------------------------

TITLE: Boolean Return in Hugo Partial Template
DESCRIPTION: Demonstrates a partial template that returns a boolean value instead of rendering HTML.

LANGUAGE: go-html-template
CODE:
{{ return math.ModBool . 2 }}

----------------------------------------

TITLE: Installing Hugo Bash Completion on Linux
DESCRIPTION: This command installs the Hugo bash completion script for every new session on Linux systems. It writes the completion script to the system-wide bash completion directory.

LANGUAGE: bash
CODE:
hugo completion bash > /etc/bash_completion.d/hugo

----------------------------------------

TITLE: Hugo Convert to TOML Command Options
DESCRIPTION: Available command-specific options for the toTOML conversion command.

LANGUAGE: bash
CODE:
  -h, --help   help for toTOML

----------------------------------------

TITLE: Filtering Menu Entries by Weight in Hugo Templates
DESCRIPTION: Example showing how to filter menu entries based on their weight property. The code iterates through main menu entries and only displays those with a weight less than or equal to 42. Uses Hugo's template syntax to create an unordered list of menu links.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    {{ if le .Weight 42 }}
      <li><a href="{{ .URL }}">{{ .Name }}</a></li>
    {{ end }}
  {{ end }}
</ul>

----------------------------------------

TITLE: Iterating Through Regular Pages in Hugo Templates
DESCRIPTION: Demonstrates how to range through regular pages sorted by title, displaying each page's title with a link to its permalink.

LANGUAGE: go-html-template
CODE:
{{ range .RegularPages.ByTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .Title }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Using Global Resource for JSON Data in Hugo
DESCRIPTION: Shows an alternative approach to access JSON data using resources.Get and transform.Unmarshal functions for global resources in Hugo.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $p := "data/books.json" }}
{{ with resources.Get $p }}
  {{ $data = . | transform.Unmarshal }}
{{ else }}
  {{ errorf "Unable to get resource %q" $p }}
{{ end }}

----------------------------------------

TITLE: Retrieving Google Analytics ID in Hugo Templates
DESCRIPTION: This snippet demonstrates how to access the Google Analytics tracking ID in Hugo templates. It's important to note that this method is deprecated as of Hugo v0.120.0 and developers should use Site.Config.Services.GoogleAnalytics.ID instead.

LANGUAGE: go-html-template
CODE:
{{ SITE.GoogleAnalytics }}

----------------------------------------

TITLE: Case Sensitivity in strings.Contains Function in Hugo
DESCRIPTION: This example illustrates the case sensitivity of the strings.Contains function in Hugo templates. It shows that the function returns false when the case of the substring doesn't match the original string.

LANGUAGE: go-html-template
CODE:
{{ strings.Contains "Hugo" "Go" }} → false

----------------------------------------

TITLE: Integrating transform.XMLEscape in RSS XML Template
DESCRIPTION: Shows how to use transform.XMLEscape in an RSS template, combining it with the safeHTML function to prevent double escaping when used with Go's html/template package.

LANGUAGE: xml
CODE:
<description>{{ .Summary | transform.XMLEscape | safeHTML }}</description>

----------------------------------------

TITLE: SSH Config Setup
DESCRIPTION: Command to create SSH config for easy server access

LANGUAGE: txt
CODE:
cat >> config <<EOF
Host HOST
     Hostname HOST
     Port 22
     User USER
     IdentityFile ~/.ssh/rsa_id
EOF

----------------------------------------

TITLE: Getting Hugo Version in Templates
DESCRIPTION: Demonstrates how to output the current Hugo version number in a template. Returns the version as a string in semantic versioning format (e.g. 0.144.2).

LANGUAGE: go-html-template
CODE:
{{ hugo.Version }} → 0.144.2

----------------------------------------

TITLE: Using Emoji Shortcodes in Hugo Content
DESCRIPTION: Demonstrates how to use emoji shortcodes in Hugo content files. This functionality requires enableEmoji to be set to true in the site configuration.

LANGUAGE: text
CODE:
I :heart: Hugo!

----------------------------------------

TITLE: Executing Hugo List Drafts Command
DESCRIPTION: This command lists draft content in a Hugo project. It can be run with optional flags and arguments.

LANGUAGE: bash
CODE:
hugo list drafts [flags] [args]

----------------------------------------

TITLE: Creating Image Overlay Filter in Hugo
DESCRIPTION: Demonstrates how to create an image overlay filter with specified X,Y coordinates (20,20) using the captured overlay resource.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Overlay $overlay 20 20 }}

----------------------------------------

TITLE: I18n Configuration for Alert Labels
DESCRIPTION: TOML configuration for internationalizing alert labels in Hugo.

LANGUAGE: toml
CODE:
caution = 'Caution'
important = 'Important'
note = 'Note'
tip = 'Tip'
warning = 'Warning'

----------------------------------------

TITLE: Alternative Method for Accessing Default Language Site
DESCRIPTION: This Go HTML template shows an alternative method to access the default language site by using the index function to get the first Site object.

LANGUAGE: go-html-template
CODE:
{{ with index .Sites 0 }}
  <a href="{{ .Home.Permalink }}">{{ .Title }}</a>
{{ end }}

----------------------------------------

TITLE: Retrieving Page Permalink in Hugo Template
DESCRIPTION: Demonstrates how to use the Permalink function in a Hugo template to get the full URL of a specific page. It first retrieves the page object using .Site.GetPage and then accesses its Permalink.

LANGUAGE: go-html-template
CODE:
{{ $page := .Site.GetPage "/about" }}
{{ $page.Permalink }} → https://example.org/docs/about/

----------------------------------------

TITLE: Unmarshaling Remote OpenAPI 3 Document in Hugo
DESCRIPTION: This snippet demonstrates how to fetch a remote OpenAPI 3 document and unmarshal it using the openapi3.Unmarshal function. It includes error handling for the remote resource retrieval.

LANGUAGE: go-html-template
CODE:
{{ $url := "https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json" }}
{{ $api := "" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ $api = . | openapi3.Unmarshal }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Hugo Template Using Sections Method
DESCRIPTION: Template code demonstrating how to iterate through sections and display them sorted by weight, creating links with proper permalinks and titles.

LANGUAGE: go-html-template
CODE:
{{ range .Sections.ByWeight }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Setting Up Automated Deployment for Hugo Site on Codeberg
DESCRIPTION: Shell commands for initializing a Git repository, adding the public directory to .gitignore, and pushing the project to a Codeberg repository for automated deployment.

LANGUAGE: sh
CODE:
# initialize new git repository
git init

# add /public directory to our .gitignore file
echo "/public" >> .gitignore

# commit and push code to main branch
git add .
git commit -m "Initial commit"
git remote add origin https://codeberg.org/<YourUsername>/<YourWebsite>.git
git push -u origin main

----------------------------------------

TITLE: Group Data Structure Example
DESCRIPTION: Example JSON structure showing how group data is organized with scripts and instances.

LANGUAGE: json
CODE:
{
    "id": "leaflet",
    "scripts": [
        {
            "id": "mapjsx",
            "binding": "JAVASCRIPT_BINDING",
            "instances": [
                {
                    "id": "0",
                    "params": {
                        "c": "h-64",
                        "lat": 48.8533173846729,
                        "lon": 2.3497416090232535,
                        "r": "map.jsx",
                        "title": "Cathédrale Notre-Dame de Paris",
                        "zoom": 23
                    }
                },
                {
                    "id": "1",
                    "params": {
                        "c": "h-64",
                        "lat": 59.96300872062237,
                        "lon": 10.663529183196863,
                        "r": "map.jsx",
                        "title": "Holmenkollen",
                        "zoom": 3
                    }
                }
            ]
        }
    ]
}

----------------------------------------

TITLE: Basic Path Usage in Hugo Templates
DESCRIPTION: Demonstrates the basic usage of the Path method to get a page's logical path

LANGUAGE: go-html-template
CODE:
{{ .Path }} → /posts/post-1

----------------------------------------

TITLE: Using the Glossary-Term Shortcode in Hugo
DESCRIPTION: Shows how to use the glossary-term shortcode to insert a term definition in Hugo content.

LANGUAGE: text
CODE:
{{%/* glossary-term "global resource" */%}}

----------------------------------------

TITLE: Formatting Numbers with Precision in Hugo Templates
DESCRIPTION: Demonstrates using lang.FormatNumber to format a decimal number with specified precision. The function takes a precision parameter and returns a formatted string according to the current language and region settings.

LANGUAGE: go-html-template
CODE:
{{ 512.5032 | lang.FormatNumber 2 }} → 512.50

----------------------------------------

TITLE: Calling Partial from Shortcode in Hugo
DESCRIPTION: Demonstrates how to call a partial template from a shortcode, passing the current context.

LANGUAGE: go-html-template
CODE:
{{ partial "my-partial.html" . }}

----------------------------------------

TITLE: Converting Binary Values to Float in Hugo Templates
DESCRIPTION: Shows how to use the float function to convert a binary (base 2) value to float64 in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ float 0b11 }} → 3 (float64)

----------------------------------------

TITLE: Setting Lastmod in Front Matter (TOML)
DESCRIPTION: Demonstrates how to set the last modification date in a page's front matter using TOML format.

LANGUAGE: toml
CODE:
title = 'Article 1'
lastmod = 2023-10-19T00:40:04-07:00

----------------------------------------

TITLE: Portable Section Comparison with collections.Where in Hugo
DESCRIPTION: Demonstrates a portable way to filter pages based on main sections defined in site configuration.

LANGUAGE: go-html-template
CODE:
{{ $pages := where .Site.RegularPages "Section" "in" .Site.MainSections }}

----------------------------------------

TITLE: Alternative Pagination Navigation Without HasPrev in Hugo
DESCRIPTION: This snippet shows an alternative way to create pagination navigation in Hugo without using the HasPrev method. It uses conditional checks on the .Prev and .Next properties to determine if previous and next pages exist.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate $pages }}

{{ range $paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

{{ with $paginator }}
  <ul>
    {{ with .First }}
      <li><a href="{{ .URL }}">First</a></li>
    {{ end }}
    {{ with .Prev }}
      <li><a href="{{ .URL }}">Previous</a></li>
    {{ end }}
    {{ with .Next }}
      <li><a href="{{ .URL }}">Next</a></li>
    {{ end }}
    {{ with .Last }}
      <li><a href="{{ .URL }}">Last</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Merging Maps with Reversed Order
DESCRIPTION: Shows the effect of merging the same three maps in reverse order

LANGUAGE: go-html-template
CODE:
{{ $merged := merge $m3 $m2 $m1 }}

{{ $merged.x }}   → foo
{{ $merged.y }}   → wibble
{{ $merged.z.a }} → huey

----------------------------------------

TITLE: React Runner Script Implementation
DESCRIPTION: Example of a runner script using React to render elements based on group data.

LANGUAGE: javascript
CODE:
import * as ReactDOM from 'react-dom/client';
import * as React from 'react';

export default function Run(group) {
  console.log('Running react-create-elements.js', group);
  const scripts = group.scripts;
  for (const script of scripts) {
    for (const instance of script.instances) {
      /* This is a convention in this project. */
      let elId = `${script.id}-${instance.id}`;
      let el = document.getElementById(elId);
      if (!el) {
        console.warn(`Element with id ${elId} not found`);
        continue;
      }
      const root = ReactDOM.createRoot(el);
      const reactEl = React.createElement(script.binding, instance.params);
      root.render(reactEl);
    }
  }
}

----------------------------------------

TITLE: Rendered HTML Output for Ordered Taxonomy in Hugo
DESCRIPTION: Shows the resulting HTML output when rendering an ordered taxonomy using the provided template.

LANGUAGE: html
CODE:
<h2><a href="/genres/suspense/">suspense</a> (3)</h2>
<ul>
  <li><a href="/books/and-then-there-were-none/">And then there were none</a></li>
  <li><a href="/books/death-on-the-nile/">Death on the nile</a></li>
  <li><a href="/books/jamaica-inn/">Jamaica inn</a></li>
</ul>
<h2><a href="/genres/romance/">romance</a> (2)</h2>
<ul>
  <li><a href="/books/jamaica-inn/">Jamaica inn</a></li>
  <li><a href="/books/pride-and-prejudice/">Pride and prejudice</a></li>
</ul>

----------------------------------------

TITLE: File Tree and Logical Tree Comparison
DESCRIPTION: Demonstrates the difference between file tree and logical tree structures in Hugo

LANGUAGE: text
CODE:
content/
└── s1/
    ├── p1/
    │   └── index.md 
    └── p2.md

LANGUAGE: text
CODE:
content/
└── s1/
    ├── p1
    └── p2 

----------------------------------------

TITLE: Using math.Floor in Hugo Templates
DESCRIPTION: Demonstrates how to use the math.Floor function to round down a floating-point number to the nearest integer. The function takes a decimal number and returns the largest integer less than or equal to the input value.

LANGUAGE: go-html-template
CODE:
{{ math.Floor 1.9 }} → 1

----------------------------------------

TITLE: Inherited Options for Hugo Module Initialization
DESCRIPTION: Options inherited from parent commands that can be used with 'hugo mod init', including configuration, environment, and logging options.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Defining String Concept with Example in Hugo
DESCRIPTION: This snippet defines what a string is in Hugo and provides a simple example. It demonstrates that strings are sequences of bytes and can contain text enclosed in double quotes.

LANGUAGE: plaintext
CODE:
"What is 6 times 7?"

----------------------------------------

TITLE: Accessing Language Code in Hugo Templates
DESCRIPTION: Shows how to access the language code from the site configuration, falling back to Lang if not defined.

LANGUAGE: go-html-template
CODE:
{{ .Language.LanguageCode }} → de-DE

----------------------------------------

TITLE: Demonstrating AND Logic in Hugo Templates
DESCRIPTION: Examples showing how the 'and' function evaluates multiple arguments, returning either the first falsy value encountered or the last truthy value if all arguments are truthy. The function works with various data types including integers, booleans, and strings.

LANGUAGE: go-html-template
CODE:
{{ and 1 0 "" }} → 0 (int)
{{ and 1 false 0 }} → false (bool)

{{ and 1 2 3 }} → 3 (int)
{{ and "a" "b" "c" }} → c (string)
{{ and "a" 1 true }} → true (bool)

----------------------------------------

TITLE: Retrieving Word Count in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the WordCount method to get the number of words in a page's content. The method is called on the current page context and returns an integer value.

LANGUAGE: go-html-template
CODE:
{{ .WordCount }} → 103

----------------------------------------

TITLE: Appending Single Element to Slice in Hugo Template
DESCRIPTION: Demonstrates how to append a single element to an existing slice using the collections.Append function.

LANGUAGE: go-html-template
CODE:
{{ $s := slice "a" "b" }}
{{ $s }} → [a b]

{{ $s = $s | append "c" }}
{{ $s }} → [a b c]

----------------------------------------

TITLE: Configuring Babel in Hugo Project
DESCRIPTION: This JavaScript configuration file (babel.config.js) sets up Babel presets and plugins for use in a Hugo project. It uses require to load presets to avoid issues with Babel in Hugo Modules.

LANGUAGE: js
CODE:
module.exports = {
  presets: [
    [
      require("@babel/preset-env"),
      {
        useBuiltIns: "entry",
        corejs: 3,
      },
    ],
  ],
};

----------------------------------------

TITLE: Comparing Time Equality Using Equal Method in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use the Equal method to compare two time objects in Hugo templates. It creates two time objects with different time zones but representing the same moment, then compares them for equality.

LANGUAGE: go-html-template
CODE:
{{ $t1 := time.AsTime "2023-01-01T17:00:00-08:00" }}
{{ $t2 := time.AsTime "2023-01-01T20:00:00-05:00" }}

{{ $t1.Equal $t2 }} → true

----------------------------------------

TITLE: Reversing Date-Sorted Pages in Hugo Templates
DESCRIPTION: Demonstrates how to reverse a page collection that has been sorted by date in Hugo templates. The code iterates through pages sorted by date in reverse order, displaying each page's title as a linked heading.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByDate.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Demonstrating Markdown to HTML Conversion in Hugo
DESCRIPTION: This snippet shows a basic Markdown example and its default HTML output without render hooks.

LANGUAGE: text
CODE:
[Hugo](https://gohugo.io)

![kitten](kitten.jpg)

LANGUAGE: html
CODE:
<p><a href="https://gohugo.io">Hugo</a></p>
<p><img alt="kitten" src="kitten.jpg"></p>

----------------------------------------

TITLE: Specifying Layout in Hugo Front Matter
DESCRIPTION: Demonstrates how to set a custom layout for a Hugo page using the 'layout' field in the front matter of a Markdown content file.

LANGUAGE: markdown
CODE:
title = 'Contact'
layout = 'contact'

----------------------------------------

TITLE: Using 'else if' for Multiple Conditions in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use 'else if' to check multiple conditions in Hugo Go templates. It compares a variable against several values and executes different code blocks based on the matches.

LANGUAGE: go-html-template
CODE:
{{ $var := 12 }}
{{ if eq $var 6 }}
  {{ print "var is 6" }}
{{ else if eq $var 7 }}
  {{ print "var is 7" }}
{{ else if eq $var 42 }}
  {{ print "var is 42" }}
{{ else }}
  {{ print "var is something else" }}
{{ end }}

----------------------------------------

TITLE: Accessing Default Language Site in Hugo Templates
DESCRIPTION: This Go HTML template demonstrates how to access and render a link to the home page of the site corresponding to the default content language.

LANGUAGE: go-html-template
CODE:
{{ with .Sites.Default }}
  <a href="{{ .Home.Permalink }}">{{ .Title }}</a>
{{ end }}

----------------------------------------

TITLE: Member Comparison with collections.Where in Hugo
DESCRIPTION: Shows how to use collections.Where for member comparisons, checking if a value is in a slice.

LANGUAGE: go-html-template
CODE:
{{ $fruit := where site.RegularPages "Section" "eq" "fruit" }}

{{ $colors := slice "red" "yellow" }}
{{ $pages := where $fruit "Params.color" "in" $colors }}

----------------------------------------

TITLE: Menu Entry Parameters Usage in Hugo
DESCRIPTION: Template showing how to access and use custom parameters defined in menu entries, specifically handling CSS classes.

LANGUAGE: go-html-template
CODE:
{{- range site.Menus.main }}
  <a {{ with .Params.class -}} class="{{ . }}" {{ end -}} href="{{ .URL }}">
    {{ .Name }}
  </a>
{{- end }}

----------------------------------------

TITLE: Using collections.Querify with Front Matter in Hugo
DESCRIPTION: Demonstrates how to use collections.Querify with a map from the site configuration or front matter.

LANGUAGE: go-html-template
CODE:
{{ collections.Querify .Params.query }}

----------------------------------------

TITLE: Using math.Counter with Warning Messages in Hugo Templates
DESCRIPTION: Demonstrates how to use math.Counter to generate sequential numbers in warning messages. The counter starts at 1 and increments globally across the site build process.

LANGUAGE: go-html-template
CODE:
{{ warnf "single.html called %d times" math.Counter }}

----------------------------------------

TITLE: Sorting Grouped Pages in Ascending Order in Hugo Templates
DESCRIPTION: This snippet shows how to group pages by last modification date and sort the groups in ascending order. It uses the 'asc' parameter in the GroupByLastmod function.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByLastmod "January 2006" "asc" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Using IsZero Method with Hugo Time Objects
DESCRIPTION: Example showing how to check if time values represent the zero time instant using IsZero. The method returns true for the zero time (0001-01-01T00:00:00-00:00) and false for any other time value.

LANGUAGE: go-html-template
CODE:
{{ $t1 := time.AsTime "2023-01-01T00:00:00-08:00" }}
{{ $t2 := time.AsTime "0001-01-01T00:00:00-00:00" }}

{{ $t1.IsZero }} → false
{{ $t2.IsZero }} → true

----------------------------------------

TITLE: Applying an Invert Filter to an Image in Hugo
DESCRIPTION: This example shows how to apply the invert filter to an image using Hugo's img shortcode. It inverts the colors of an image of Zion National Park.

LANGUAGE: go-html-template
CODE:
{{< img
  src="images/examples/zion-national-park.jpg"
  alt="Zion National Park"
  filter="Invert"
  filterArgs=""
  example=true
>}}

----------------------------------------

TITLE: Accessing Remote JSON Data in Hugo
DESCRIPTION: Shows how to retrieve JSON data from remote URLs using data.GetJSON function in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ $data := getJSON "https://example.org/books.json" }}
{{ $data := getJSON "https://example.org/" "books.json" }}

----------------------------------------

TITLE: Rendered HTML Output of Query String Link
DESCRIPTION: Shows the HTML output after Hugo renders the template with the appended query string.

LANGUAGE: html
CODE:
<a href="https://example.org?a=1&amp;b=2">Link</a>

----------------------------------------

TITLE: Using IsPage Method in Hugo Templates
DESCRIPTION: Demonstrates how to use the IsPage method in Hugo templates to check if the current page is a regular content page. Returns true if the page kind is 'page'.

LANGUAGE: go-html-template
CODE:
{{ .IsPage }}

----------------------------------------

TITLE: Ending 'range' Loop in Hugo Template
DESCRIPTION: Illustrates the use of 'end' to close a 'range' loop in a Hugo template. It iterates over a slice and prints each element.

LANGUAGE: go-html-template
CODE:
{{ $var := slice 1 2 3 }}
{{ range $var }}
  {{ . }} → 1 2 3 
{{ end }}

----------------------------------------

TITLE: Retrieving Translation Key in Hugo Template
DESCRIPTION: This snippet demonstrates how to retrieve and display the translation key of a page in a Hugo template. It uses the .TranslationKey method to get the key.

LANGUAGE: go-html-template
CODE:
{{ .TranslationKey }} → page/foo

----------------------------------------

TITLE: Calculating Symmetric Difference of Collections in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the symdiff function to compute the symmetric difference between two slices in Hugo templates. It takes two collections as input and returns a new collection containing elements that are in either of the input collections, but not in both.

LANGUAGE: go-html-template
CODE:
{{ slice 1 2 3 | symdiff (slice 3 4) }} → [1 2 4]

----------------------------------------

TITLE: Checking Divisibility with math.ModBool in Hugo Templates
DESCRIPTION: This snippet demonstrates the usage of the math.ModBool function in Hugo templates. It checks if 15 is divisible by 3, which returns true as the modulus is 0.

LANGUAGE: go-html-template
CODE:
{{ modBool 15 3 }} → true

----------------------------------------

TITLE: Retrieving Page Resource by Custom Name in Hugo
DESCRIPTION: Shows how to retrieve a page resource using its custom name instead of its file path.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "Sunrise in Bryce Canyon" }}
  {{ .Name }} → Sunrise in Bryce Canyon
{{ end }}

----------------------------------------

TITLE: Output of Directory Listing
DESCRIPTION: Shows the HTML output produced by the template code, displaying file names and their directory status

LANGUAGE: html
CODE:
about.md → false
contact.md → false
news → true

----------------------------------------

TITLE: Project Directory Structure for Hugo Server Configuration
DESCRIPTION: Shows the recommended directory structure for organizing Hugo configuration files, with separate development server settings.

LANGUAGE: text
CODE:
project/
└── config/
    ├── _default/
    │   └── hugo.toml
    └── development/
        └── server.toml

----------------------------------------

TITLE: Hugo Directory Structure Example
DESCRIPTION: Demonstrates the file structure in Hugo and how IsNode evaluates different page types. Shows examples of node (true) and non-node (false) pages based on their location and naming.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1/
│   │   └── index.md    <-- kind = page, node = false
│   ├── book-2.md       <-- kind = page, node = false
│   └── _index.md       <-- kind = section, node = true
├── tags/
│   ├── fiction/
│   │   └── _index.md   <-- kind = term, node = true
│   └── _index.md       <-- kind = taxonomy, node = true
└── _index.md           <-- kind = home, node = true

----------------------------------------

TITLE: Using len with Strings in Hugo Templates
DESCRIPTION: Demonstrates how to use the 'len' function to get the length of strings in Hugo templates. It shows examples with non-empty and empty strings.

LANGUAGE: go-html-template
CODE:
{{ "ab" | len }} → 2
{{ "" | len }} → 0

----------------------------------------

TITLE: Remote Resource Title Access
DESCRIPTION: Shows how to access a remote resource's title which returns a hashed filename.

LANGUAGE: go-html-template
CODE:
{{ with resources.GetRemote "https://example.org/images/a.jpg" }}
  {{ .Title }} → /a_18432433023265451104.jpg
{{ end }}

----------------------------------------

TITLE: Including CSS Partial in Base Template
DESCRIPTION: Hugo base template code showing how to include the Tailwind CSS processing partial

LANGUAGE: go-html-template
CODE:
<head>
  ...
  {{ partialCached "css.html" . }}
  ...
<head>

----------------------------------------

TITLE: Hugo Module Initialization Command Options
DESCRIPTION: Available options for the 'hugo mod init' command, including baseURL, cacheDir, contentDir, and theme selection.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for init
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Remote Resource Implementation
DESCRIPTION: Shows how to use resources.GetRemote with transform.Unmarshal for remote resources with improved error handling.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $url := "https://example.org/pets.csv" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ $opts := dict "delimiter" "," }}
    {{ $data = . | transform.Unmarshal $opts }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Extracting File Names Using path.Base in Hugo Templates
DESCRIPTION: The path.Base function replaces path separators with forward slashes and returns the last element of the given path. It works with both file names and directory paths, always returning the rightmost component.

LANGUAGE: go-html-template
CODE:
{{ path.Base "a/news.html" }} → news.html
{{ path.Base "news.html" }} → news.html
{{ path.Base "a/b/c" }} → c
{{ path.Base "/x/y/z/" }} → z
{{ path.Base "" }} → .

----------------------------------------

TITLE: Generating Absolute URLs without Leading Slash in Hugo
DESCRIPTION: Demonstrates how urls.AbsURL function behaves when the input does not begin with a slash. The resulting URL is relative to the baseURL in the site configuration.

LANGUAGE: go-html-template
CODE:
{{ absURL "" }}          → https://example.org/
{{ absURL "articles" }}  → https://example.org/articles
{{ absURL "style.css" }} → https://example.org/style.css

----------------------------------------

TITLE: Declaring URL Content as Safe in Hugo Templates
DESCRIPTION: The safeURL function is used to declare a string as a safe URL in Hugo templates. This is useful for ensuring that URLs are not incorrectly escaped or modified.

LANGUAGE: go
CODE:
{{ $url := "https://example.com" }}
{{ $url = $url | safeURL }}

----------------------------------------

TITLE: Content Structure Example
DESCRIPTION: Shows an example content directory structure demonstrating how Hugo determines the section with most pages.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1.md
│   └── book-2.md
├── films/
│   ├── film-1.md
│   ├── film-2.md
│   └── film-3.md
└── _index.md

----------------------------------------

TITLE: Multilingual Content Structure in Hugo
DESCRIPTION: This snippet illustrates the directory structure for multilingual content in Hugo, showing how content files are organized for English, German, and French versions of the site.

LANGUAGE: text
CODE:
content/
├── de/
│   ├── books/
│   │   ├── book-1.md
│   │   └── book-2.md
│   └── _index.md
├── en/
│   ├── books/
│   │   ├── book-1.md
│   │   └── book-2.md
│   └── _index.md
├── fr/
│   ├── books/
│   │   └── book-1.md
│   └── _index.md
└── _index.md

----------------------------------------

TITLE: CODEOWNERS File Configuration
DESCRIPTION: Example CODEOWNERS file showing pattern matching rules for assigning code owners to different paths

LANGUAGE: text
CODE:
* @jdoe
/content/books/ @tjones
/content/films/ @mrichards @rsmith

----------------------------------------

TITLE: Using IsNode Method in Hugo Templates
DESCRIPTION: Shows how to use the IsNode method in Hugo templates to check if the current page is a node. Returns true for home, section, taxonomy, or term pages, and false for regular content pages.

LANGUAGE: go-html-template
CODE:
{{ .IsNode }}

----------------------------------------

TITLE: Example Directory Structure
DESCRIPTION: Shows the sample directory structure used to demonstrate os.ReadDir functionality

LANGUAGE: text
CODE:
content/
├── about.md
├── contact.md
└── news/
    ├── article-1.md
    └── article-2.md

----------------------------------------

TITLE: Getting Resource Main Type
DESCRIPTION: Shows how to extract the main type portion (e.g., 'image') from a resource's media type.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ .MediaType.MainType }} → image
{{ end }}

----------------------------------------

TITLE: Custom GoAT Diagram with Attributes
DESCRIPTION: Example of using GoAT diagram with custom attributes for class and caption in Markdown.

LANGUAGE: text
CODE:
```goat {class="foo" caption="Diagram 1: Example"}
.---.     .-.       .-.       .-.     .---.
| A +--->| 1 |<--->| 2 |<--->| 3 |<---+ B |
'---'     '-'       '+'       '+'     '---'
```

----------------------------------------

TITLE: Declaring CSS Content as Safe in Hugo Templates
DESCRIPTION: The safeCSS function is used to declare a string as safe CSS content in Hugo templates. This allows inline CSS to be used without being escaped.

LANGUAGE: go
CODE:
{{ $css := "body { color: blue; }" }}
{{ $css = $css | safeCSS }}

----------------------------------------

TITLE: Generating Random Integer [1-6]
DESCRIPTION: Generates a random integer in the closed interval [1, 6] by multiplying the random number by 6 and using Ceil function.

LANGUAGE: go-html-template
CODE:
{{ math.Rand | mul 6 | math.Ceil }}

----------------------------------------

TITLE: Unique Warning Messages with Counter
DESCRIPTION: Shows how to generate unique warning messages using math.Counter to prevent duplicate message suppression. This pattern is useful for debugging when you want to see all warning instances.

LANGUAGE: go-html-template
CODE:
{{ range site.RegularPages }}
  {{ .Section | warnf "%#[2]v [%[1]d]" math.Counter }}
{{ end }}

----------------------------------------

TITLE: Alternative Default Language Link
DESCRIPTION: Alternative Hugo template showing how to access the default language site using index operation.

LANGUAGE: go-html-template
CODE:
{{ with index .Site.Sites 0 }}
  <a href="{{ .Home.Permalink }}">{{ .Title }}</a>
{{ end }}

----------------------------------------

TITLE: Using IsMenuCurrent in Hugo Menu Template
DESCRIPTION: This snippet demonstrates how to use the IsMenuCurrent function in a Hugo menu template to determine the current page and apply appropriate CSS classes and ARIA attributes. It also shows the usage of HasMenuCurrent for ancestor pages.

LANGUAGE: go-html-template
CODE:
{{ $currentPage := . }}
{{ range site.Menus.main }}
  {{ if $currentPage.IsMenuCurrent .Menu . }}
    <a class="active" aria-current="page" href="{{ .URL }}">{{ .Name }}</a>
  {{ else if $currentPage.HasMenuCurrent .Menu . }}
    <a class="ancestor" aria-current="true" href="{{ .URL }}">{{ .Name }}</a>
  {{ else }}
    <a href="{{ .URL }}">{{ .Name }}</a>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Executing Hugo Environment Command in Bash
DESCRIPTION: This command displays version and environment information for Hugo. It is useful for generating bug reports. The command accepts optional flags and arguments.

LANGUAGE: bash
CODE:
hugo env [flags] [args]

----------------------------------------

TITLE: Using LanguagePrefix in Hugo Templates
DESCRIPTION: These snippets demonstrate how to use the LanguagePrefix method in Hugo templates. They show the output for different language configurations, including when defaultContentLanguageInSubdir is set to true or false.

LANGUAGE: go-html-template
CODE:
{{ .Site.LanguagePrefix }} → ""

LANGUAGE: go-html-template
CODE:
{{ .Site.LanguagePrefix }} → /en

LANGUAGE: go-html-template
CODE:
{{ .Site.LanguagePrefix }} → /de

----------------------------------------

TITLE: Adding Values to Existing Keys with NewScratch in Hugo
DESCRIPTION: Shows how to use the Add method to append values to existing keys, including examples with strings, numbers, and slices.

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.Set "greeting" "Hello" }}
{{ $s.Add "greeting" "Welcome" }}
{{ $s.Get "greeting" }} → HelloWelcome

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.Set "total" 3 }}
{{ $s.Add "total" 7 }}
{{ $s.Get "total" }} → 10

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.Set "greetings" (slice "Hello") }}
{{ $s.Add "greetings" (slice "Welcome" "Cheers") }}
{{ $s.Get "greetings" }} → [Hello Welcome Cheers]

----------------------------------------

TITLE: Example Usage of Image Filter in Hugo Template
DESCRIPTION: Practical example demonstrating the application of a grayscale filter to an image resource, including the rendering of the processed image with proper dimensions.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with images.Filter images.Grayscale . }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Custom Rendered GoAT HTML Output
DESCRIPTION: The HTML output generated by the custom render hook, showing the figure element with SVG and caption.

LANGUAGE: html
CODE:
<figure id="diagram-1">
  <svg class="foo" width="272" height="57" xmlns="http://www.w3.org/2000/svg" version="1.1">
    ...
  </svg>
  <figcaption>Diagram 1: Example</figcaption>
</figure>

----------------------------------------

TITLE: Highlighting Code Block with Custom Options in Hugo Templates
DESCRIPTION: This snippet shows how to use the transform.HighlightCodeBlock function with custom highlighting options in a Hugo template. It merges default options with a custom option to enable line numbers, then applies the highlighting and outputs the result.

LANGUAGE: go-html-template
CODE:
{{ $opts := merge .Options (dict "linenos" true) }}
{{ $result := transform.HighlightCodeBlock . $opts }}
{{ $result.Wrapped }}

----------------------------------------

TITLE: Sorting Grouped Pages in Ascending Order by Date
DESCRIPTION: Groups pages by publish date and sorts them in ascending order using the 'asc' parameter.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByPublishDate "January 2006" "asc" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Using Hugo Page Scratch Method
DESCRIPTION: Returns a scratch pad object for storing and manipulating page-scoped data. This method is deprecated as of Hugo v0.138.0 in favor of PAGE.Store method. The scratch pad provides a maps.Scratch return type.

LANGUAGE: go-template
CODE:
{{ PAGE.Scratch }}

----------------------------------------

TITLE: Iterating Over Site Objects in Hugo Templates
DESCRIPTION: This Go HTML template demonstrates how to iterate over all Site objects using .Sites and generate a list of links to each site's home page.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Sites }}
    <li><a href="{{ .Home.Permalink }}">{{ .Title }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Calculating Sum with Scalars and Slices in Hugo Templates
DESCRIPTION: Demonstrates the usage of math.Sum function in Hugo templates. The function accepts a combination of scalar values and slices, summing all the numbers provided. In this example, it adds 1, a slice containing 2 and 3, and 4, resulting in a total of 10.

LANGUAGE: go-html-template
CODE:
{{ math.Sum 1 (slice 2 3) 4 }} → 10

----------------------------------------

TITLE: Directory Structure Example - Hugo Content
DESCRIPTION: Example content directory structure showing hierarchical organization of auction-related content pages and sections.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md
│   │   ├── auction-1.md
│   │   └── auction-2.md
│   ├── 2023-12/
│   │   ├── _index.md
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md
│   ├── bidding.md
│   └── payment.md
└── _index.md

----------------------------------------

TITLE: Accessing Hugo Parameters with Special Characters
DESCRIPTION: Shows how to access parameters with special characters (like hyphens) using the index function.

LANGUAGE: go-html-template
CODE:
{{ index .Params "key-with-hyphens" }} → must use index function

----------------------------------------

TITLE: Generating Powershell Autocompletion Script for Hugo CLI
DESCRIPTION: This command generates the autocompletion script for Powershell. It can be used to enable command completion for Hugo CLI commands in Powershell environments.

LANGUAGE: powershell
CODE:
hugo completion powershell [flags]

----------------------------------------

TITLE: Implementing Position Method in Hugo Shortcode
DESCRIPTION: Demonstrates using the Position method to handle error reporting when a required 'greeting' argument is missing from a shortcode. The code checks for the argument and throws an error with the file position if not found.

LANGUAGE: go-html-template
CODE:
{{ $greeting := "" }}
{{ with .Get "greeting" }}
  {{ $greeting = . }}
{{ else }}
  {{ errorf "The %q shortcode requires a 'greeting' argument. See %s" .Name .Position }}
{{ end }}

----------------------------------------

TITLE: Applying Multiple Image Filters with AutoOrient in Hugo
DESCRIPTION: This example shows how to apply multiple image filters, including AutoOrient, to an image resource in Hugo. It emphasizes placing AutoOrient first in the filter chain and demonstrates resizing the image after orientation correction.

LANGUAGE: go-html-template
CODE:
{{ $filters := slice
  images.AutoOrient
  (images.Process "resize 200x")
}}
{{ with resources.Get "images/original.jpg" }}
  {{ with images.Filter $filters . }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Generating URLs With Leading Slash in Hugo Templates
DESCRIPTION: Examples of using absLangURL function with paths that begin with a slash, showing URL generation relative to protocol+host.

LANGUAGE: go-html-template
CODE:
{{ absLangURL "/" }}          → https://example.org/en/
{{ absLangURL "/articles" }}  → https://example.org/en/articles
{{ absLangURL "/style.css" }} → https://example.org/en/style.css

----------------------------------------

TITLE: Accessing Hugo Parameters with Special Characters
DESCRIPTION: Shows how to access parameters with special characters (like hyphens) using the index function.

LANGUAGE: go-html-template
CODE:
{{ index .Params "key-with-hyphens" }} → must use index function

----------------------------------------

TITLE: Rendered HTML Output for Alternative Format Link
DESCRIPTION: Example of the rendered HTML output showing how Hugo transforms the template into a link element for RSS feed on the home page.

LANGUAGE: html
CODE:
<link rel="alternate" type="application/rss+xml" href="https://example.org/index.xml" title="ABC Widgets, Inc.">

----------------------------------------

TITLE: Inherited Options for Hugo Environment Command in Bash
DESCRIPTION: This snippet lists the options inherited from parent commands. These options can be used with the 'hugo env' command and provide various configuration settings for Hugo.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Grouping and Paginating Pages in Hugo Templates
DESCRIPTION: Demonstrates how to group regular pages by date, paginate them, and display the grouped content with titles and links. Uses the Paginate method with GroupByDate and includes pagination template.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate ($pages.GroupByDate "Jan 2006") }}

{{ range $paginator.PageGroups }}
  <h2>{{ .Key }}</h2>
  {{ range .Pages }}
    <h3><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h3>
  {{ end }}
{{ end }}

{{ template "_internal/pagination.html" . }}

----------------------------------------

TITLE: Context Handling in IsDescendant - Hugo Templates
DESCRIPTION: Examples demonstrating proper context handling when using IsDescendant, showing incorrect and correct ways to reference the original context.

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/auctions" }}
  {{ .IsDescendant . }} → true
{{ end }}

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/auctions" }}
  {{ $.IsDescendant . }} → true
{{ end }}

----------------------------------------

TITLE: Installing Hugo Bash Completion on macOS
DESCRIPTION: This command installs the Hugo bash completion script for every new session on macOS systems using Homebrew. It writes the completion script to the Homebrew-managed bash completion directory.

LANGUAGE: bash
CODE:
hugo completion bash > $(brew --prefix)/etc/bash_completion.d/hugo

----------------------------------------

TITLE: Hugo Shortcode Position Error Output
DESCRIPTION: Shows the error message format when the Position method is used in error reporting, including the file path and line number where the shortcode was called.

LANGUAGE: text
CODE:
ERROR The "myshortcode" shortcode requires a 'greeting' argument. See "/home/user/project/content/about.md:11:1"

----------------------------------------

TITLE: Rendering Related Content Template in Hugo
DESCRIPTION: A partial template that renders a list of up to 5 related pages using Hugo's template syntax. Uses site.RegularPages.Related to fetch related content and displays them as a linked list.

LANGUAGE: go-html-template
CODE:
{{ with site.RegularPages.Related . | first 5 }}
  <p>Related content:</p>
  <ul>
    {{ range . }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Configured Hugo Site Deployment with Rclone
DESCRIPTION: Simplified deployment command using a pre-configured Rclone remote named 'hugo-www'. This approach requires prior configuration using 'rclone config' but provides a more streamlined deployment process.

LANGUAGE: txt
CODE:
hugo --gc --minify
rclone sync --interactive public/ hugo-www:www/

----------------------------------------

TITLE: Formatting Currency using lang.FormatCurrency in Hugo Templates
DESCRIPTION: Demonstrates the usage of lang.FormatCurrency function to format a number as a currency string. It takes the number, precision, and currency code as parameters and returns a formatted string based on the current language and region settings.

LANGUAGE: go-html-template
CODE:
{{ 512.5032 | lang.FormatCurrency 2 "USD" }} → $512.50

----------------------------------------

TITLE: Generating Absolute URLs with Leading Slash and Subdirectory BaseURL in Hugo
DESCRIPTION: Demonstrates how urls.AbsURL function works when the baseURL includes a subdirectory and the input begins with a slash, showing that the subdirectory is ignored in this case.

LANGUAGE: go-html-template
CODE:
{{ absURL "/" }}          → https://example.org/
{{ absURL "/articles" }}  → https://example.org/articles
{{ absURL "/style.css" }} → https://example.org/style.css

----------------------------------------

TITLE: Grouping Pages by Section in Descending Order
DESCRIPTION: Similar to the ascending order grouping, but adds the 'desc' parameter to sort sections in descending order. Creates the same nested HTML structure with section names and page links.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupBy "Section" "desc" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Example Content Structure for RegularPagesRecursive in Hugo
DESCRIPTION: This code block illustrates a sample content structure to demonstrate how RegularPagesRecursive works with different levels of nested content in Hugo.

LANGUAGE: text
CODE:
content/
├── lessons/
│   ├── lesson-1/
│   │   ├── _index.md
│   │   ├── part-1.md
│   │   └── part-2.md
│   ├── lesson-2/
│   │   ├── resources/
│   │   │   ├── task-list.md
│   │   │   └── worksheet.md
│   │   ├── _index.md
│   │   ├── part-1.md
│   │   └── part-2.md
│   ├── _index.md
│   ├── grading-policy.md
│   └── lesson-plan.md
├── _index.md
├── contact.md
└── legal.md

----------------------------------------

TITLE: Retrieving Pages from Different Languages in Hugo
DESCRIPTION: This snippet illustrates how to use the GetPage method in combination with the Sites object to retrieve a page from a specific language in a multilingual Hugo project.

LANGUAGE: go-html-template
CODE:
{{ with where .Site.Sites "Language.Lang" "eq" "de" }}
  {{ with index . 0 }}
    {{ with .GetPage "/works/paintings/starry-night" }}
      {{ .Title }} → Sternenklare Nacht
    {{ end }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Adding Previous and Next Links in Hugo Single Template
DESCRIPTION: This Go HTML template snippet shows how to add previous and next page links in a Hugo single page template using PrevInSection and NextInSection methods.

LANGUAGE: go-html-template
CODE:
{{ with .PrevInSection }}
  <a href="{{ .RelPermalink }}">Previous</a>
{{ end }}

{{ with .NextInSection }}
  <a href="{{ .RelPermalink }}">Next</a>
{{ end }}

----------------------------------------

TITLE: Implementing Plotly Shortcode in Hugo Template
DESCRIPTION: This snippet defines the Plotly shortcode in Hugo. It creates a unique ID for the chart div and uses JavaScript to render the Plotly chart with the provided data.

LANGUAGE: go-html-template
CODE:
{{ $id := printf "plotly-%02d" .Ordinal }}
<div id="{{ $id }}"></div>
<script>
  Plotly.newPlot(document.getElementById({{ $id }}), {{ .Inner | safeJS }});
</script>

----------------------------------------

TITLE: Inherited Options for Hugo List Drafts Command
DESCRIPTION: Shows the options inherited from parent commands that can be used with 'hugo list drafts'.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Using Nested Shortcodes in Hugo Content
DESCRIPTION: Example of using nested shortcodes in Hugo content files, showing a greeting shortcode that wraps a now shortcode for date display.

LANGUAGE: text
CODE:
{{</* greeting dateFormat="Jan 2, 2006" */>}}
Welcome. Today is {{</* now */>}}.
{{</* /greeting */>}}

----------------------------------------

TITLE: Creating Translation Table Structure in Hugo
DESCRIPTION: Shows the directory structure for creating translation tables in Hugo's i18n directory.

LANGUAGE: text
CODE:
i18n/
├── en.toml
└── pl.toml

----------------------------------------

TITLE: Relative URL Generation Without Leading Slash - Hugo Template
DESCRIPTION: Demonstrates url.RelURL function behavior when input paths don't begin with a slash, using baseURL = https://example.org/

LANGUAGE: go-html-template
CODE:
{{ relURL "" }}                         → /
{{ relURL "articles" }}                 → /articles
{{ relURL "style.css" }}                → /style.css
{{ relURL "https://example.org" }}      → https://example.org
{{ relURL "https://example.org/" }}     → /
{{ relURL "https://www.example.org" }}  → https://www.example.org
{{ relURL "https://www.example.org/" }} → https://www.example.org/

----------------------------------------

TITLE: Rendered HTML Output for Book 1 Page
DESCRIPTION: This HTML snippet shows the rendered output of the AllTranslations template for the 'Book 1' page, which exists in all three languages (English, German, and French).

LANGUAGE: html
CODE:
<ul>
  <li><a href="/books/book-1/" hreflang="en-US">Book 1 (English)</a></li>
  <li><a href="/de/books/book-1/" hreflang="de-DE">Book 1 (Deutsch)</a></li>
  <li><a href="/fr/books/book-1/" hreflang="fr-FR">Book 1 (Français)</a></li>
</ul>

----------------------------------------

TITLE: Displaying Hugo Content Directory Structure
DESCRIPTION: Shows the hierarchical content structure in Hugo with parent-child relationships between sections and pages clearly marked.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md     <-- parent: auctions
│   │   ├── auction-1.md
│   │   └── auction-2.md  <-- parent: 2023-11
│   ├── 2023-12/
│   │   ├── _index.md     
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md         <-- parent: home
│   ├── bidding.md
│   └── payment.md        <-- parent: auctions
├── books/
│   ├── _index.md         <-- parent: home
│   ├── book-1.md
│   └── book-2.md         <-- parent: books
├── films/
│   ├── _index.md         <-- parent: home 
│   ├── film-1.md
│   └── film-2.md         <-- parent: films
└── _index.md             <-- parent: nil

----------------------------------------

TITLE: Defining Variables in Hugo Templates
DESCRIPTION: Demonstrates the basic syntax for declaring variables in Hugo templates. Variables are user-defined identifiers that start with a $ symbol and can hold values of any data type.

LANGUAGE: go-template
CODE:
$foo

LANGUAGE: go-template
CODE:
$bar

----------------------------------------

TITLE: Accessing Term Data in Hugo Templates
DESCRIPTION: These snippets show how to access various term-related data within a Hugo template, including singular and plural taxonomy names, and the current term name.

LANGUAGE: go-html-template
CODE:
{{ .Data.Singular }} → tag

LANGUAGE: go-html-template
CODE:
{{ .Data.Plural }} → tags

LANGUAGE: go-html-template
CODE:
{{ .Data.Term }} → fiction

----------------------------------------

TITLE: Using HeadingsFiltered Method in Hugo
DESCRIPTION: The HeadingsFiltered method returns a slice of tableofcontents.Headings for pages related to the current page. It is used in combination with the Related method on a Pages object for managing related content and indexing content headings.

LANGUAGE: go
CODE:
PAGE.HeadingsFiltered

----------------------------------------

TITLE: Basic Heading Render Hook in Hugo
DESCRIPTION: This snippet demonstrates a basic heading render hook that mimics Hugo's default heading rendering with added support for custom classes.

LANGUAGE: go-html-template
CODE:
<h{{ .Level }} id="{{ .Anchor }}" {{- with .Attributes.class }} class="{{ . }}" {{- end }}>
  {{- .Text -}}
</h{{ .Level }}>

----------------------------------------

TITLE: Rendered HTML Output for Taxonomy Page Link
DESCRIPTION: Shows the final HTML output after Hugo processes the taxonomy page template, displaying a simple link to the tags page.

LANGUAGE: html
CODE:
<a href="/tags/">Tags</a>

----------------------------------------

TITLE: Sorting Hugo Pages by Last Modified Date (Descending)
DESCRIPTION: Iterates through pages sorted by last modification date in descending order using the Reverse method, displaying page titles as linked headings. Combines ByLastmod with Reverse for reversed chronological order.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByLastmod.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Git Repository Setup for SourceHut Pages Deployment
DESCRIPTION: Git commands for initializing a repository, configuring .gitignore, and pushing the Hugo project to SourceHut for automated deployment.

LANGUAGE: sh
CODE:
# initialize new git repository
git init

# add /public directory to our .gitignore file
echo "/public" >> .gitignore

# commit and push code to main branch
git add .
git commit -m "Initial commit"
git remote add origin https://git.sr.ht/~<YourUsername>/<YourUsername>.srht.site
git push -u origin main

----------------------------------------

TITLE: Using lang.Translate with Pluralization in Go Templates
DESCRIPTION: Demonstrates how to use lang.Translate (T) with pluralization in Go HTML templates, including passing context for pluralization.

LANGUAGE: go-html-template
CODE:
{{ T "day" 0 }} → days
{{ T "day" 1 }} → day
{{ T "day" 2 }} → days
{{ T "day" 5 }} → days

{{ T "day_with_count" 0 }} → 0 days
{{ T "day_with_count" 1 }} → 1 day
{{ T "day_with_count" 2 }} → 2 days
{{ T "day_with_count" 5 }} → 5 days

LANGUAGE: go-html-template
CODE:
{{ T "day" 0 }} → miesięcy
{{ T "day" 1 }} → miesiąc
{{ T "day" 2 }} → miesiące
{{ T "day" 5 }} → miesięcy

{{ T "day_with_count" 0 }} → 0 miesięcy
{{ T "day_with_count" 1 }} → 1 miesiąc
{{ T "day_with_count" 2 }} → 2 miesiące
{{ T "day_with_count" 5 }} → 5 miesięcy

LANGUAGE: go-html-template
CODE:
{{ T "age" (dict "name" "Will" "count" 1) }} → Will is 1 year old.
{{ T "age" (dict "name" "John" "count" 3) }} → John is 3 years old.

----------------------------------------

TITLE: Relative URL Generation Without Leading Slash (Subdirectory) - Hugo Template
DESCRIPTION: Shows url.RelURL function behavior with subdirectory baseURL configuration (baseURL = https://example.org/docs/)

LANGUAGE: go-html-template
CODE:
{{ relURL "" }}                           → /docs/
{{ relURL "articles" }}                   → /docs/articles
{{ relURL "style.css" }}                  → /docs/style.css
{{ relURL "https://example.org" }}        → https://example.org
{{ relURL "https://example.org/" }}       → https://example.org/
{{ relURL "https://example.org/docs" }}   → https://example.org/docs
{{ relURL "https://example.org/docs/" }}  → /docs
{{ relURL "https://www.example.org" }}    → https://www.example.org
{{ relURL "https://www.example.org/" }}   → https://www.example.org/

----------------------------------------

TITLE: Directory Structure Example for Hugo Content
DESCRIPTION: Example content directory structure showing nested sections with _index.md files and content pages.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md     <-- front matter: weight = 202311
│   │   ├── auction-1.md
│   │   └── auction-2.md
│   ├── 2023-12/
│   │   ├── _index.md     <-- front matter: weight = 202312
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md         <-- front matter: weight = 30
│   ├── bidding.md
│   └── payment.md
├── books/
│   ├── _index.md         <-- front matter: weight = 10
│   ├── book-1.md
│   └── book-2.md
├── films/
│   ├── _index.md         <-- front matter: weight = 20
│   ├── film-1.md
│   └── film-2.md
└── _index.md

----------------------------------------

TITLE: Rendered HTML Output for Menu with Custom Parameters
DESCRIPTION: This HTML snippet shows the resulting output after Hugo processes the menu entries and template, including the custom 'rel' parameter for the external link.

LANGUAGE: html
CODE:
<ul>
  <li><a href="/about/">About</a></li>
  <li><a href="/contact/">Contact</a></li>
  <li><a href="https://gohugo.io" rel="external">Hugo</a></li>
</ul>

----------------------------------------

TITLE: Displaying Copyright Notice in Hugo Template
DESCRIPTION: Uses the .Site.Copyright function to retrieve and display the copyright notice defined in the site configuration. This can be used in any Hugo template file.

LANGUAGE: go-html-template
CODE:
{{ .Site.Copyright }} → © 2023 ABC Widgets, Inc.

----------------------------------------

TITLE: Closing 'with' Statement in Hugo Template
DESCRIPTION: Shows how to use 'end' to terminate a 'with' statement in a Hugo template. It sets a scope for a variable and prints its value.

LANGUAGE: go-html-template
CODE:
{{ $var := "foo" }}
{{ with $var }}
  {{ . }} → foo
{{ end }}

----------------------------------------

TITLE: Defining a Hugo Menu in TOML
DESCRIPTION: This snippet shows how to define a menu in Hugo's configuration file using TOML format. It creates a 'main' menu with three entries: Services, About, and Contact.

LANGUAGE: toml
CODE:
[[menus.main]]
name = 'Services'
pageRef = '/services'
weight = 10

[[menus.main]]
name = 'About'
pageRef = '/about'
weight = 20

[[menus.main]]
name = 'Contact'
pageRef = '/contact'
weight = 30

----------------------------------------

TITLE: Hugo Configuration for Standalone Images
DESCRIPTION: Shows the Hugo configuration required to prevent wrapping standalone images within paragraph elements.

LANGUAGE: toml
CODE:
[markup.goldmark.parser]
wrapStandAloneImageWithinParagraph = false

----------------------------------------

TITLE: Sorting Pages by Link Title in Descending Order using Hugo
DESCRIPTION: This snippet shows how to sort pages by their link title in descending order using the ByLinkTitle function followed by Reverse. It creates a list of links using the sorted pages' relative permalinks and link titles.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByLinkTitle.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Using Translations for Reserved Keys in Go Templates
DESCRIPTION: Demonstrates how to use translations for reserved keys in Go HTML templates by prepending an underscore to the key name.

LANGUAGE: go-html-template
CODE:
{{ T "_description" }} → descripción
{{ T "_few" }} → pocos
{{ T "_many" }} → muchos
{{ T "_one" }} → uno
{{ T "_two" }} → dos
{{ T "_zero" }} → cero
{{ T "_other" }} → otro

----------------------------------------

TITLE: Configuring Instagram Privacy Settings in Hugo
DESCRIPTION: Shows the structure for adjusting Instagram-related privacy settings in Hugo's configuration file.

LANGUAGE: yaml
CODE:
{{< code-toggle config=privacy.instagram />}}

----------------------------------------

TITLE: Defining Aliases in Hugo Front Matter
DESCRIPTION: Example of defining URL aliases in a Hugo content file's front matter. Demonstrates how to specify multiple redirect URLs for a page.

LANGUAGE: yaml
CODE:
title = 'About'
aliases = ['/old-url','/really-old-url']

----------------------------------------

TITLE: Retrieving Custom Name of Page Resource in Hugo
DESCRIPTION: Demonstrates how to use the Name method on a page resource with a custom name defined in front matter.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "images/a.jpg" }}
  {{ .Name }} → Sunrise in Bryce Canyon
{{ end }}

----------------------------------------

TITLE: Canonical URL Processing
DESCRIPTION: Demonstrates how Hugo processes site-relative URLs to create absolute URLs when canonifyURLs is enabled in the configuration.

LANGUAGE: html
CODE:
<a href="/about"> → <a href="https://example.org/about/">
<img src="/a.gif"> → <img src="https://example.org/a.gif">

----------------------------------------

TITLE: Implementing Pagination and Pager Navigation in Hugo Templates
DESCRIPTION: This snippet demonstrates how to paginate regular pages of type 'posts' and create navigation links for pagers. It uses the .Paginate function to create a paginator, iterates through paginated pages, and builds a list of pager links.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate $pages }}

{{ range $paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

{{ with $paginator }}
  <ul>
    {{ range .Pagers }}
      <li><a href="{{ .URL }}">{{ .PageNumber }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Using Limit Method in Hugo Template
DESCRIPTION: This Go HTML template demonstrates how to use the Limit method on a Hugo menu. It sorts the main menu by name and limits the output to the first 2 entries, creating an unordered list of menu items.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main.ByName.Limit 2 }}
    <li><a href="{{ .URL }}">{{ .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Hugo Configuration for Mounting Static Directory
DESCRIPTION: Shows how to mount the static directory to the assets directory for use with the embedded image render hook.

LANGUAGE: toml
CODE:
[[module.mounts]]
source = 'assets'
target = 'assets'

[[module.mounts]]
source = 'static'
target = 'assets'

----------------------------------------

TITLE: Retrieving Menu Identifiers in Hugo Templates
DESCRIPTION: Demonstrates how to iterate through the main menu items and access each entry's menu identifier. This code snippet shows that the .Menu property returns the identifier of the menu containing the entry, which can be used with IsMenuCurrent and HasMenuCurrent methods for active state management.

LANGUAGE: go-html-template
CODE:
{{ range .Site.Menus.main }}
  {{ .Menu }} → main
{{ end }}

----------------------------------------

TITLE: Creating Color Balance Filter in Hugo Templates
DESCRIPTION: This snippet demonstrates how to create a color balance filter using the images.ColorBalance function. The function takes three percentage values for red, green, and blue channels, which must be in the range [-100, 500].

LANGUAGE: go-html-template
CODE:
{{ $filter := images.ColorBalance -10 10 50 }}

----------------------------------------

TITLE: Inline CSS Integration in Hugo
DESCRIPTION: Demonstrates how to embed CSS content directly into HTML using the safeCSS function.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "css/style.css" }}
  <style>{{ .Content | safeCSS }}</style>
{{ end }}

----------------------------------------

TITLE: Output of os.ReadFile Function
DESCRIPTION: Shows the raw HTML output produced by the os.ReadFile function when reading the README.md file.

LANGUAGE: html
CODE:
This is **bold** text.

----------------------------------------

TITLE: Configuring Vimeo Privacy Settings in Hugo
DESCRIPTION: Shows the structure for configuring Vimeo privacy settings in Hugo's configuration file.

LANGUAGE: text
CODE:
{{< code-toggle config=privacy.vimeo />}}

----------------------------------------

TITLE: Using Aliases in Front Matter
DESCRIPTION: Demonstrates how to create aliases for redirects from old URLs to new URLs using front matter.

LANGUAGE: toml
CODE:
aliases = ['/posts/previous-file-name']

LANGUAGE: toml
CODE:
aliases = ['previous-file-name','original-file-name']

LANGUAGE: toml
CODE:
aliases = ['/de/posts/previous-file-name']

----------------------------------------

TITLE: Map Definitions in Hugo Templates
DESCRIPTION: Defines three sample maps with nested values for demonstration purposes

LANGUAGE: go-html-template
CODE:
{{ $m1 := dict "x" "foo" }}
{{ $m2 := dict "x" "bar" "y" "wibble" }}
{{ $m3 := dict "x" "baz" "y" "wobble" "z" (dict "a" "huey") }}

----------------------------------------

TITLE: Defining Hugo Menu Entries with Identifiers in TOML
DESCRIPTION: Shows how to define menu entries in Hugo configuration, demonstrating both entries with and without explicit identifiers. The first entry uses an identifier while the second relies on the name property as a fallback.

LANGUAGE: toml
CODE:
[[menus.main]]
identifier = 'about'
name = 'About'
pageRef = '/about'
weight = 10

[[menus.main]]
name = 'Contact'
pageRef = '/contact'
weight = 20

----------------------------------------

TITLE: Hugo Config Mounts Basic Command
DESCRIPTION: The basic command syntax for printing configured file mounts in Hugo.

LANGUAGE: bash
CODE:
hugo config mounts [flags] [args]

----------------------------------------

TITLE: Rendered HTML Output of Limited Hugo Menu
DESCRIPTION: This HTML snippet shows the rendered output of the Hugo template using the Limit method. It displays an unordered list with two menu items: About and Contact.

LANGUAGE: html
CODE:
<ul>
  <li><a href="/about/">About</a></li>
  <li><a href="/contact">Contact</a></li>
</ul>

----------------------------------------

TITLE: Markdown Image Syntax
DESCRIPTION: Demonstrates the components of a Markdown image: description, destination, and optional title.

LANGUAGE: text
CODE:
![white kitten](/images/kitten.jpg "A kitten!")
  ------------  ------------------  ---------
  description      destination        title

----------------------------------------

TITLE: Checking Menu Entry Page Association in Hugo Templates
DESCRIPTION: This code demonstrates how to check if a menu entry is associated with the current page in Hugo templates. It returns a boolean value.

LANGUAGE: go
CODE:
{{ .IsMenuCurrent "main" . }}

----------------------------------------

TITLE: Accessing Complex Context in Partial
DESCRIPTION: Shows how to access passed context values within a partial template.

LANGUAGE: go-html-template
CODE:
<p>{{ .name }} is majoring in {{ .major }}.</p>
<p>Their grade point average is {{ .gpa }}.</p>
<p>See <a href="{{ .page.RelPermalink }}">details.</a></p>

----------------------------------------

TITLE: Creating Layout Structure for Page Content Type in Hugo
DESCRIPTION: Demonstrates the layout directory structure for targeting page content types with a single template.

LANGUAGE: text
CODE:
layouts/
└── page/
    └── single.html

----------------------------------------

TITLE: Alternative Map Merge Order Example 2
DESCRIPTION: Shows a final variation of map merging order and its results

LANGUAGE: go-html-template
CODE:
{{ $merged := merge $m1 $m3 $m2 }}

{{ $merged.x }}   → bar
{{ $merged.y }}   → wibble
{{ $merged.z.a }} → huey

----------------------------------------

TITLE: Specifying Sort Order in Hugo
DESCRIPTION: To set the optional sort order in Hugo, use 'asc' for ascending order or 'desc' for descending order. This allows for customization of content sorting in Hugo projects.

LANGUAGE: markdown
CODE:
`asc` for ascending order, or `desc` for descending order.

----------------------------------------

TITLE: Defining Front Matter in Hugo YAML
DESCRIPTION: This snippet demonstrates the structure of front matter in Hugo using YAML format. It includes two key-value pairs: title and reference.

LANGUAGE: yaml
CODE:
---
title: front matter
reference: /content-management/front-matter
---

----------------------------------------

TITLE: Accessing Menu Entry Parameters in Hugo Templates
DESCRIPTION: This Go HTML template demonstrates how to access and use custom parameters (such as 'rel') from menu entries when rendering a navigation menu.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li>
      <a href="{{ .URL }}" {{ with .Params.rel }}rel="{{ . }}"{{ end }}>
        {{ .Name }}
      </a>
    </li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Defining Hugo Render Hook Template Structure
DESCRIPTION: This snippet shows the directory structure for implementing render hooks in Hugo, with separate templates for different element types.

LANGUAGE: text
CODE:
layouts/
└── _default/
    └── _markup/
        ├── render-blockquote.html
        ├── render-codeblock.html
        ├── render-heading.html
        ├── render-image.html
        ├── render-link.html
        ├── render-passthrough.html
        └── render-table.html

----------------------------------------

TITLE: Generating Bash Autocompletion Script for Hugo
DESCRIPTION: This command generates the autocompletion script for the bash shell. It requires the 'bash-completion' package to be installed. The script can be sourced for the current session or installed for every new session.

LANGUAGE: bash
CODE:
hugo completion bash

----------------------------------------

TITLE: Creating Brightness Image Filter in Hugo
DESCRIPTION: Creates an image filter that adjusts the brightness of an image. The percentage parameter must be between -100 and 100, where 0 has no effect, -100 produces a solid black image, and 100 produces a solid white image.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Brightness 12 }}

----------------------------------------

TITLE: Creating Hue Rotation Filter in Hugo
DESCRIPTION: This snippet demonstrates how to create a hue rotation filter using the images.Hue function in Hugo. The hue angle shift is typically in the range [-180, 180] where 0 has no effect. In this example, a -15 degree shift is applied.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Hue -15 }}

----------------------------------------

TITLE: Iterating Over Image Resources Using resources.ByType in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the resources.ByType function to iterate over all image resources and create img tags with their respective attributes. It retrieves the permalink, width, and height of each image resource.

LANGUAGE: go-html-template
CODE:
{{ range resources.ByType "image" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Creating Layout Structure for Custom Content Type in Hugo
DESCRIPTION: Shows the layout directory structure for targeting custom content types with specific templates.

LANGUAGE: text
CODE:
layouts/
└── miscellaneous/
    └── contact.html  <-- renders contact.md
    └── single.html   <-- renders about.md

----------------------------------------

TITLE: Hugo Theme Directory Structure
DESCRIPTION: Displays the directory structure created when generating a new Hugo theme.

LANGUAGE: txt
CODE:
my-theme/
├── archetypes/
├── assets/
├── content/
├── data/
├── i18n/
├── layouts/
├── static/
├── LICENSE
├── README.md
├── hugo.toml
└── theme.toml

----------------------------------------

TITLE: Resulting JSON Structure from Nested Map Creation
DESCRIPTION: This JSON snippet shows the resulting deeply nested data structure from creating a map using collections.Dictionary function with a slice as the key.

LANGUAGE: json
CODE:
{
  "a": {
    "b": {
      "c": "value"
    }
  }
}

----------------------------------------

TITLE: Hugo Language Configuration Example
DESCRIPTION: Example configuration for defining a German language in Hugo's configuration file

LANGUAGE: yaml
CODE:
[languages.de]
languageCode = 'de-DE'
languageDirection = 'ltr'
languageName = 'Deutsch'
weight = 1

----------------------------------------

TITLE: Rendering Pages by Weight in Hugo List Template
DESCRIPTION: This Go HTML template snippet demonstrates how to render pages sorted by weight in a Hugo list template.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByWeight }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Converting Duration to Seconds in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Seconds method to convert a time.Duration value to a floating-point number of seconds. It first parses a duration string and then applies the Seconds method to get the total number of seconds.

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "3.5h2.5m1.5s" }}
{{ $d.Seconds }} → 12751.5

----------------------------------------

TITLE: Accessing Site Title in Hugo Template
DESCRIPTION: Demonstrates how to retrieve and display the site title within a Hugo template using the .Site.Title variable.

LANGUAGE: go-html-template
CODE:
{{ .Site.Title }} → My Documentation Site

----------------------------------------

TITLE: Displaying Inherited Options for Hugo Commands
DESCRIPTION: Lists the options inherited from parent commands that are applicable to 'hugo import'. These options control various aspects of Hugo's behavior, such as configuration, build environment, and output settings.

LANGUAGE: plaintext
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Removing Trailing Newlines with strings.Chomp in Hugo Templates
DESCRIPTION: Demonstrates the usage of strings.Chomp function to remove trailing newline characters and carriage returns from strings in Hugo templates. The function returns template.HTML if the input is of that type, otherwise it returns a string.

LANGUAGE: go-html-template
CODE:
{{ chomp "foo\n" }} → foo
{{ chomp "foo\n\n" }} → foo

{{ chomp "foo\r\n" }} → foo
{{ chomp "foo\r\n\r\n" }} → foo

----------------------------------------

TITLE: Hugo List Expired Command Options
DESCRIPTION: Available command-specific options for the 'hugo list expired' command.

LANGUAGE: bash
CODE:
  -h, --help   help for expired

----------------------------------------

TITLE: Alternative Page Collection Filtering Using where Function in Hugo
DESCRIPTION: This snippet provides an alternative approach to filtering page collections using the where function instead of complement. It achieves the same result as the previous example.

LANGUAGE: go-html-template
CODE:
{{ range where site.RegularPages "Type" "not in" (slice "blog" "faqs") }}
  <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
{{ end }}

----------------------------------------

TITLE: Using resources.Match in Hugo Templates
DESCRIPTION: Demonstrates how to use resources.Match to iterate over matching image resources and create img tags with dimensions. The pattern matches all JPG files in the images directory within assets.

LANGUAGE: go-html-template
CODE:
{{ range resources.Match "images/*.jpg" }}
  <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
{{ end }}

----------------------------------------

TITLE: Generating Relative URLs with RelRef in Hugo Templates
DESCRIPTION: These examples demonstrate how to use the RelRef method with different options to generate relative URLs for pages. The method accepts an options map and can handle language and output format specifications.

LANGUAGE: go-html-template
CODE:
{{ $opts := dict "path" "/books/book-1" }}
{{ .RelRef $opts }} → /en/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" }}
{{ .RelRef $opts }} → /de/books/book-1/

{{ $opts := dict "path" "/books/book-1" "lang" "de" "outputFormat" "json" }}
{{ .RelRef $opts }} → /de/books/book-1/index.json

----------------------------------------

TITLE: Converting Time Duration to Milliseconds in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Milliseconds function to convert a time.Duration value to milliseconds. It first parses a duration string and then applies the Milliseconds method to get the integer millisecond count.

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "3.5h2.5m1.5s" }}
{{ $d.Milliseconds }} → 12751500

----------------------------------------

TITLE: Accessing Home Page URLs in Hugo Templates
DESCRIPTION: Shows how to access both absolute and relative permalinks for the home page using the Site.Home object in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ .Site.Home.Permalink }} → https://example.org/docs/ 
{{ .Site.Home.RelPermalink }} → /docs/

----------------------------------------

TITLE: Basic Hugo List Published Command
DESCRIPTION: The basic command syntax for listing published content in Hugo.

LANGUAGE: bash
CODE:
hugo list published [flags] [args]

----------------------------------------

TITLE: Using path.Dir Function in Hugo Templates
DESCRIPTION: Demonstrates the usage of path.Dir function which returns the directory portion of a path by removing the last element. The function normalizes path separators to forward slashes and handles various edge cases including empty paths, paths with trailing slashes, and absolute paths.

LANGUAGE: go-html-template
CODE:
{{ path.Dir "a/news.html" }} → a
{{ path.Dir "news.html" }} → .
{{ path.Dir "a/b/c" }} → a/b
{{ path.Dir "/a/b/c" }} → /a/b
{{ path.Dir "/a/b/c/" }} → /a/b/c
{{ path.Dir "" }} → .

----------------------------------------

TITLE: Configuring Environment Variable Access in Hugo
DESCRIPTION: Example of how to configure Hugo to allow access to specific environment variables using the security.funcs settings in the configuration file.

LANGUAGE: toml
CODE:
[security.funcs]
getenv = ['^HUGO_', '^CI$', '^USER$', '^HOME$']

----------------------------------------

TITLE: Using strings.TrimPrefix in Hugo Templates
DESCRIPTION: Demonstrates the usage of strings.TrimPrefix function to remove a specified prefix from the beginning of strings. The function takes two parameters: PREFIX (the string to remove) and STRING (the input string to process). If the prefix doesn't match exactly, no trimming occurs.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimPrefix "a" "aabbaa" }} → abbaa
{{ strings.TrimPrefix "aa" "aabbaa" }} → bbaa
{{ strings.TrimPrefix "aaa" "aabbaa" }} → aabbaa

----------------------------------------

TITLE: Counting Substrings with strings.Count in Hugo Templates
DESCRIPTION: Demonstrates various uses of the strings.Count function to count substring occurrences in a string. Shows examples with single characters, multiple characters, and empty string cases. When the substring is empty, returns 1 plus the number of Unicode code points in the string.

LANGUAGE: go-html-template
CODE:
{{ "aaabaab" | strings.Count "a" }} → 5
{{ "aaabaab" | strings.Count "aa" }} → 2
{{ "aaabaab" | strings.Count "aaa" }} → 1
{{ "aaabaab" | strings.Count "" }} → 8

----------------------------------------

TITLE: Hugo Content Types Configuration Example
DESCRIPTION: Example configuration showing how to modify resource type assignments for different media types in Hugo.

LANGUAGE: text
CODE:
contentTypes:
  text/asciidoc: {}
  text/markdown: {}
  text/org: {}
  text/pandoc: {}
  text/rst: {}

----------------------------------------

TITLE: Hugo Mod Vendor Command Options
DESCRIPTION: Available command-line options specific to the vendor command, including baseURL, cacheDir, contentDir, and theme settings.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for vendor
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: URLs With Leading Slash - Base URL Example 1
DESCRIPTION: Examples of urls.RelLangURL function usage when input begins with a slash and baseURL is 'https://example.org/'

LANGUAGE: go-html-template
CODE:
{{ relLangURL "/" }}          → /en/
{{ relLangURL "/articles" }}  → /en/articles
{{ relLangURL "/style.css" }} → /en/style.css

----------------------------------------

TITLE: Unescaping HTML Entities with transform.HTMLUnescape in Hugo Templates
DESCRIPTION: Demonstrates the usage of transform.HTMLUnescape function to convert HTML entities to their corresponding characters. It shows examples of unescaping ampersand and greater-than symbols.

LANGUAGE: go-html-template
CODE:
{{ htmlUnescape "Lilo &amp; Stitch" }} → Lilo & Stitch
{{ htmlUnescape "7 &gt; 6" }} → 7 > 6

----------------------------------------

TITLE: Date Grouping with Title-Sorted Pages in Hugo Templates
DESCRIPTION: Groups pages by date and sorts pages within each group by title using the ByTitle method. Demonstrates combining grouping with secondary sorting.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByDate "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages.ByTitle }}
      <li><a href="{{ .RelPermalink }}">{{ .Title }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Installing Hugo Extended with Scoop on Windows
DESCRIPTION: Command to install the extended edition of Hugo using the Scoop package manager on Windows.

LANGUAGE: sh
CODE:
scoop install hugo-extended

----------------------------------------

TITLE: Hugo Content Directory Structure Example
DESCRIPTION: Example directory structure showing top-level sections (books and films) with their respective content files

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1.md
│   └── book-2.md
├── films/
│   ├── film-1.md
│   └── film-2.md
└── _index.md

----------------------------------------

TITLE: Hugo NPM Module Inherited Options
DESCRIPTION: Options inherited from parent commands that can be used with the npm module command.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Using time.Format Function in Hugo
DESCRIPTION: Demonstrates how to use the time.Format function to format a time value in Hugo. The function takes a layout string and a time value as arguments.

LANGUAGE: go
CODE:
{{ time.Format ":date_long" .Date }}

----------------------------------------

TITLE: Initializing Firebase Project in Hugo Root
DESCRIPTION: Sets up the Firebase project configuration in the root directory of the Hugo project. This command starts an interactive setup process.

LANGUAGE: sh
CODE:
firebase init

----------------------------------------

TITLE: Installing OpenSSH Client
DESCRIPTION: Command to install OpenSSH client on Debian-based systems

LANGUAGE: sh
CODE:
sudo apt-get install openssh-client

----------------------------------------

TITLE: Ordinal Date Formatting in Hugo
DESCRIPTION: Shows how to format a date with ordinal day numbers using the humanize function combined with time formatting.

LANGUAGE: go-html-template
CODE:
{{ $t := "2023-01-27T23:44:58-08:00" }}
{{ $t = time.AsTime $t }}

{{ humanize $t.Day }} of {{ $t.Format "January 2006" }} → 27th of January 2023

----------------------------------------

TITLE: Installing Hugo Extended Edition on openSUSE-based Distributions
DESCRIPTION: Command to install the extended edition of Hugo on openSUSE-based Linux distributions using the zypper package manager.

LANGUAGE: sh
CODE:
sudo zypper install hugo

----------------------------------------

TITLE: Ranging Through Page Resources - Hugo Template
DESCRIPTION: Shows how to iterate through page resources of type 'page' using the ByType filter in a Hugo template to build content from multiple page resources.

LANGUAGE: go-html-template
CODE:
{{ range .Resources.ByType "page" }}
  {{ .Content }}
{{ end }}

----------------------------------------

TITLE: Hugo Module Tidy Command Options
DESCRIPTION: Available command-line options specific to the 'hugo mod tidy' command, including baseURL, cacheDir, contentDir, and theme settings.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for tidy
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Executing Hugo Module Initialization Command
DESCRIPTION: The command to initialize a project as a Hugo Module. It can be run with optional flags and arguments, where the argument can be the module path.

LANGUAGE: bash
CODE:
hugo mod init [flags] [args]

----------------------------------------

TITLE: Using strings.SliceString in Hugo Templates
DESCRIPTION: Demonstrates the usage of the strings.SliceString function (aliased as slicestr) in Hugo templates. It shows how to extract substrings with different start and end positions, illustrating the zero-based indexing and half-open interval concept.

LANGUAGE: go-html-template
CODE:
{{ slicestr "BatMan" }} → BatMan
{{ slicestr "BatMan" 3 }} → Man
{{ slicestr "BatMan" 0 3 }} → Bat

----------------------------------------

TITLE: Using strings.SliceString in Hugo Templates
DESCRIPTION: Demonstrates the usage of the strings.SliceString function (aliased as slicestr) in Hugo templates. It shows how to extract substrings with different start and end positions, illustrating the zero-based indexing and half-open interval concept.

LANGUAGE: go-html-template
CODE:
{{ slicestr "BatMan" }} → BatMan
{{ slicestr "BatMan" 3 }} → Man
{{ slicestr "BatMan" 0 3 }} → Bat

----------------------------------------

TITLE: Configuring Sanity Studio for Hugo Integration
DESCRIPTION: This snippet shows the Sanity studio configuration file setup for integration with Hugo, including necessary plugins and schema types.

LANGUAGE: typescript
CODE:
import {defineConfig} from 'sanity'
import {structureTool} from 'sanity/structure'
import {visionTool} from '@sanity/vision'
import {schemaTypes} from './schemaTypes'
import {media} from 'sanity-plugin-media'
import {codeInput} from '@sanity/code-input'

export default defineConfig({
  name: 'default',
  title: 'my-sanity-project',

  projectId: 'mysanityprojectid',
  dataset: 'production',

  plugins: [structureTool(), visionTool(), media(),codeInput()],

  schema: {
    types: schemaTypes,
  },
})

----------------------------------------

TITLE: Accessing Post Property of Hugo Menu Entry
DESCRIPTION: This snippet demonstrates how to access the 'post' property of a menu entry in Hugo templates. The 'post' property returns template.HTML content that can be placed after the menu item.

LANGUAGE: go
CODE:
MENUENTRY.Post

----------------------------------------

TITLE: Basic InSection Usage in Hugo Templates
DESCRIPTION: Shows how to use InSection method with different section paths using defensive programming with 'with' statements.

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/" }}
  {{ $.InSection . }} → false
{{ end }}

{{ with .Site.GetPage "/auctions" }}
  {{ $.InSection . }} → false
{{ end }}

{{ with .Site.GetPage "/auctions/2023-11" }}
  {{ $.InSection . }} → true
{{ end }}

{{ with .Site.GetPage "/auctions/2023-11/auction-2" }}
  {{ $.InSection . }} → true
{{ end }}

----------------------------------------

TITLE: Generating Firebase CI Token
DESCRIPTION: Creates a CI token for use in automated deployment pipelines. This token should be kept secret and not exposed in public repositories.

LANGUAGE: sh
CODE:
firebase login:ci

----------------------------------------

TITLE: Dividing Numbers with Hugo Template Math Function
DESCRIPTION: Demonstrates the usage of math.Div function to perform sequential division of numbers. If any of the input numbers is a float, the result will be returned as a float type. The function takes multiple values and divides them from left to right.

LANGUAGE: go-html-template
CODE:
{{ div 12 3 2 }} → 2

----------------------------------------

TITLE: Comparing Different Data Types with compare.Gt in Hugo Templates
DESCRIPTION: This snippet shows how to use the compare.Gt function to compare different data types in Hugo templates. It includes examples of comparing strings, dates, and boolean values.

LANGUAGE: go-html-template
CODE:
{{ gt "ab" "a" }} → true
{{ gt time.Now (time.AsTime "1964-12-30") }} → true
{{ gt true false }} → true

----------------------------------------

TITLE: Configuring Hugo Permalinks with Time Layout
DESCRIPTION: Example of configuring Hugo permalinks using Go's time package layout string components. Shows how to structure post URLs with year, month, and day components.

LANGUAGE: yaml
CODE:
permalinks:
  posts: /:06/:1/:2/:title/

----------------------------------------

TITLE: Installing Hugo Extended Edition on Void Linux
DESCRIPTION: Command to install the extended edition of Hugo on Void Linux using the xbps package manager.

LANGUAGE: sh
CODE:
sudo xbps-install -S hugo

----------------------------------------

TITLE: Retrieving Resource Type for Images - Hugo Template
DESCRIPTION: Demonstrates how to get the resource type of an image file using the ResourceType method. Shows both ResourceType and MediaType.MainType properties which return 'image' for image resources.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "image/a.jpg" }}
  {{ .ResourceType }} → image
  {{ .MediaType.MainType }} → image
{{ end }}

----------------------------------------

TITLE: Hugo Module Verify Command Syntax
DESCRIPTION: Basic command syntax for verifying Hugo module dependencies

LANGUAGE: bash
CODE:
hugo mod verify [flags] [args]

----------------------------------------

TITLE: Local Module Development with Replace Directive
DESCRIPTION: Demonstrates how to use a replace directive in go.mod for local development of a module imported in a project.

LANGUAGE: sh
CODE:
replace github.com/bep/hugotestmods/mypartials => /Users/bep/hugotestmods/mypartials

----------------------------------------

TITLE: Defining Hugo Menu Entries
DESCRIPTION: Demonstrates how to define menu entries in Hugo's configuration file, specifying name, page reference, and weight for each entry.

LANGUAGE: toml
CODE:
[[menus.main]]
name = 'Services'
pageRef = '/services'
weight = 10

[[menus.main]]
name = 'About'
pageRef = '/about'
weight = 20

[[menus.main]]
name = 'Contact'
pageRef = '/contact'
weight = 30

----------------------------------------

TITLE: Starting Hugo Development Server with Drafts
DESCRIPTION: Commands to start Hugo's development server including draft content

LANGUAGE: text
CODE:
hugo server --buildDrafts
hugo server -D

----------------------------------------

TITLE: Global Resource Title Access in Hugo Templates
DESCRIPTION: Demonstrates accessing the title of a global resource which returns the path relative to assets directory.

LANGUAGE: text
CODE:
assets/
└── images/
    └── Sunrise in Bryce Canyon.jpg

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/Sunrise in Bryce Canyon.jpg" }}
  {{ .Title }} → /images/Sunrise in Bryce Canyon.jpg
{{ end }}

----------------------------------------

TITLE: Using len with Slices in Hugo Templates
DESCRIPTION: Shows how to use the 'len' function to get the length of slices in Hugo templates. Examples include a slice with elements and an empty slice.

LANGUAGE: go-html-template
CODE:
{{ slice "a" "b" | len }} → 2
{{ slice | len }} → 0

----------------------------------------

TITLE: Page Resource Title with Front Matter Configuration
DESCRIPTION: Shows how to access a page resource's title when defined in front matter resources array.

LANGUAGE: text
CODE:
content/
├── example/
│   ├── images/
│   │   └── a.jpg
│   └── index.md
└── _index.md

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "images/a.jpg" }}
  {{ .Title }} → A beautiful sunrise in Bryce Canyon
{{ end }}

----------------------------------------

TITLE: Hugo New Site Command Options
DESCRIPTION: These are the specific options available for the 'hugo new site' command. They allow forcing initialization in a non-empty directory and specifying the preferred file format for configuration.

LANGUAGE: bash
CODE:
  -f, --force           init inside non-empty directory
      --format string   preferred file format (toml, yaml or json) (default "toml")
  -h, --help            help for site

----------------------------------------

TITLE: Creating Duration Value in Hugo Template
DESCRIPTION: Example showing how to create a time.Duration value representing 24 hours and display it in seconds. Uses the time.Duration function with hour unit and printf for formatting.

LANGUAGE: go-html-template
CODE:
{{ $duration := time.Duration "hour" 24 }}
{{ printf "There are %.0f seconds in one day." $duration.Seconds }}

LANGUAGE: text
CODE:
There are 86400 seconds in one day.

----------------------------------------

TITLE: Building Hugo Site and Deploying to Firebase
DESCRIPTION: Builds the Hugo site and deploys it to Firebase hosting in a single command. This is used for manual deployments after setup is complete.

LANGUAGE: sh
CODE:
hugo && firebase deploy

----------------------------------------

TITLE: Converting Duration to Hours in Hugo Templates
DESCRIPTION: Shows how to parse a duration string and convert it to floating point hours. The example parses a duration of '3.5h2.5m1.5s' and returns the total hours as a float64 value (3.5420833333333333).

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "3.5h2.5m1.5s" }}
{{ $d.Hours }} → 3.5420833333333333

----------------------------------------

TITLE: Formatting Expiry Date in Hugo Templates
DESCRIPTION: Example of formatting an expiry date in Hugo templates using the time.Format function with the date_medium format.

LANGUAGE: go-html-template
CODE:
{{ .ExpiryDate | time.Format ":date_medium" }}

----------------------------------------

TITLE: Retrieving Media Subtype in Hugo OutputFormat
DESCRIPTION: This property returns the subtype of the current format's media type. It provides more specific information about the content format.

LANGUAGE: go
CODE:
MediaType.SubType

----------------------------------------

TITLE: Demonstrating Case Sensitivity of strings.ContainsAny in Hugo Templates
DESCRIPTION: This example illustrates the case-sensitive nature of the strings.ContainsAny function in Hugo templates. It checks if the string "Hugo" contains any characters from the set "Gm", which returns false due to case mismatch.

LANGUAGE: go-html-template
CODE:
{{ strings.ContainsAny "Hugo" "Gm" }} → false

----------------------------------------

TITLE: Configuring Hugo for Multilingual Sites
DESCRIPTION: This snippet demonstrates how to configure Hugo for multiple languages, including setting the default language and defining language-specific settings.

LANGUAGE: toml
CODE:
defaultContentLanguage = 'en'

[languages.en]
contentDir = 'content/en'
languageCode = 'en-US'
languageName = 'English'
weight = 1

[languages.de]
contentDir = 'content/de'
languageCode = 'de-DE'
languageName = 'Deutsch'
weight = 2

[languages.fr]
contentDir = 'content/fr'
languageCode = 'fr-FR'
languageName = 'Français'
weight = 3

----------------------------------------

TITLE: Setting Debug Log Level in Hugo CLI
DESCRIPTION: Command to enable debug level logging in Hugo, displaying all message types including debug, information, warning, and error messages.

LANGUAGE: sh
CODE:
hugo --logLevel debug

----------------------------------------

TITLE: Accessing Page Parameters in Hugo Templates
DESCRIPTION: Demonstrates equivalent ways to access page parameters in Hugo templates, including the use of the global 'page' function when a Page object is not in context.

LANGUAGE: go-html-template
CODE:
{{ .Params.foo }}
{{ .Page.Params.foo }}
{{ page.Params.foo }}

LANGUAGE: go-html-template
CODE:
{{ page.Params.foo }}

----------------------------------------

TITLE: Retrieving Resource File Suffixes
DESCRIPTION: Shows how to get an array of all possible file suffixes for a resource's media type.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ .MediaType.Suffixes }} → [jpg jpeg jpe jif jfif]
{{ end }}

----------------------------------------

TITLE: Hugo Resource Access Example Structure
DESCRIPTION: Demonstrates the content structure used in resource access examples.

LANGUAGE: text
CODE:
content/
└── example/
    ├── data/
    │  └── books.json   <-- page resource
    ├── images/
    │  ├── a.jpg        <-- page resource
    │  └── b.jpg        <-- page resource
    ├── snippets/
    │  └── text.md      <-- page resource
    └── index.md

----------------------------------------

TITLE: Using KeyName Method in Hugo Templates for Multilingual Support
DESCRIPTION: Demonstrates using the KeyName method in a Hugo template to query translation tables, with a fallback to the Name property. The example shows how to generate a navigation menu with multilingual support.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li><a href="{{ .URL }}">{{ or (T (.KeyName | lower)) .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Retrieving Author Name
DESCRIPTION: Demonstrates how to get the Git commit author's name.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .AuthorName }} → John Smith
{{ end }}

----------------------------------------

TITLE: Defining Basic Front Matter Fields in Hugo
DESCRIPTION: Demonstrates basic field usage in Hugo front matter using YAML syntax. Shows a simple example with a 'title' field.

LANGUAGE: markdown
CODE:
---
title: field
---

----------------------------------------

TITLE: Basic MD5 String Hashing in Hugo Templates
DESCRIPTION: Demonstrates basic usage of the md5 function to hash a string input. Shows both the input string and resulting MD5 hash in hexadecimal format.

LANGUAGE: go-html-template
CODE:
{{ md5 "Hello world" }} → 3e25960a79dbc69b674cd4ec67a72c62

----------------------------------------

TITLE: Defining Page Resource Name in Front Matter
DESCRIPTION: Shows how to define a custom name for a page resource in the front matter of a Hugo content file.

LANGUAGE: yaml
CODE:
title = 'Example'
[[resources]]
src = 'images/a.jpg'
name = 'Sunrise in Bryce Canyon'

----------------------------------------

TITLE: Handling Determinate Values in hugo.Store
DESCRIPTION: Shows techniques for accessing scratch pad values from parent templates using content rendering triggers

LANGUAGE: go-html-template
CODE:
{{ $noop := .Content }}
{{ hugo.Store.Get "mykey" }}

LANGUAGE: go-html-template
CODE:
{{ $noop := .WordCount }}
{{ hugo.Store.Get "mykey" }}

----------------------------------------

TITLE: Parsing Duration and Calculating Seconds in Hugo Template
DESCRIPTION: This snippet demonstrates how to use time.ParseDuration to parse a duration string of "24h" and then calculate the number of seconds in that duration. It uses the Seconds method of the resulting time.Duration value.

LANGUAGE: go-html-template
CODE:
{{ $duration := time.ParseDuration "24h" }}
{{ printf "There are %.0f seconds in one day." $duration.Seconds }}

----------------------------------------

TITLE: Applying Multiple Image Filters in Hugo
DESCRIPTION: This snippet shows how to apply multiple image filters (Grayscale and GaussianBlur) to an image resource in Hugo. It creates a slice of filters, applies them to the image, and generates an img tag with the filtered image.

LANGUAGE: go-html-template
CODE:
{{ $filters := slice
  images.Grayscale
  (images.GaussianBlur 8)
}}
{{ with resources.Get "images/original.jpg" }}
  {{ with .Filter $filters }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Linking to RSS Feed using OutputFormats in Hugo Go Templates
DESCRIPTION: This snippet demonstrates how to use the OutputFormats method to create a link to the RSS feed for the current page in Hugo. It checks for the existence of an RSS output format and generates an HTML anchor tag with the appropriate permalink.

LANGUAGE: go-html-template
CODE:
{{ with .OutputFormats.Get "rss" }}
  <a href="{{ .RelPermalink }}">RSS Feed</a>
{{ end }}

----------------------------------------

TITLE: Getting Commit Subject
DESCRIPTION: Shows how to retrieve the Git commit message subject.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .Subject }} → Add tutorials
{{ end }}

----------------------------------------

TITLE: Installing Hugo Extended Edition on Gentoo-based Distributions
DESCRIPTION: Steps to install the extended edition of Hugo on Gentoo-based Linux distributions using the Portage package manager. Includes USE flag configuration and installation command.

LANGUAGE: text
CODE:
www-apps/hugo extended

LANGUAGE: sh
CODE:
sudo emerge www-apps/hugo

----------------------------------------

TITLE: Runner Script Configuration
DESCRIPTION: Shows how to set up a runner script with resource options in a batch group.

LANGUAGE: go-html-template
CODE:
{{ with js.Batch "js/mybatch" }}
  {{ with .Group "mygroup" }}
      {{ with .Runner "myrunner" }}
          {{ .SetOptions (dict "resource" (resources.Get "myrunner.js")) }}
      {{ end }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Basic IsDescendant Usage - Hugo Templates
DESCRIPTION: Examples of using IsDescendant function with different page paths to check hierarchical relationships, using defensive coding with 'with' statement.

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/" }}
  {{ $.IsDescendant . }} → true
{{ end }}

{{ with .Site.GetPage "/auctions" }}
  {{ $.IsDescendant . }} → false
{{ end }}

{{ with .Site.GetPage "/auctions/2023-11" }}
  {{ $.IsDescendant . }} → false
{{ end }}

{{ with .Site.GetPage "/auctions/2023-11/auction-2" }}
  {{ $.IsDescendant . }} → false
{{ end }}

----------------------------------------

TITLE: Creating Empty Collection in Hugo Template
DESCRIPTION: Shows how to create an empty page collection by setting N to 0 in the last function.

LANGUAGE: go-html-template
CODE:
{{ $emptyPageCollection := last 0 .Pages }}

----------------------------------------

TITLE: Formatting Keywords with Delimit Function in Hugo
DESCRIPTION: Shows how to use Hugo's delimit function to format the display of keywords with custom separators and conjunction.

LANGUAGE: go-html-template
CODE:
{{ delimit .Keywords ", " ", and " }} → tuna, sriracha, nori, and rice

----------------------------------------

TITLE: Creating Opacity Filter in Hugo
DESCRIPTION: Creates an image filter that changes the opacity of an image. The opacity value must be in the range [0, 1], where 0 produces a transparent image and 1 produces an opaque image.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.Opacity 0.65 }}

----------------------------------------

TITLE: Using HasPrev for Pagination Navigation in Hugo
DESCRIPTION: This snippet demonstrates how to use the HasPrev method to create pagination navigation in Hugo. It includes logic for displaying links to the first, previous, next, and last pages of a paginated set of posts.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate $pages }}

{{ range $paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

{{ with $paginator }}
  <ul>
    {{ with .First }}
      <li><a href="{{ .URL }}">First</a></li>
    {{ end }}
    {{ if .HasPrev }}
      <li><a href="{{ .Prev.URL }}">Previous</a></li>
    {{ end }}
    {{ if .HasNext }}
      <li><a href="{{ .Next.URL }}">Next</a></li>
    {{ end }}
    {{ with .Last }}
      <li><a href="{{ .URL }}">Last</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Sorting Hugo Pages by Expiry Date (Ascending)
DESCRIPTION: Template code to display pages sorted by expiration date in ascending order. Uses the ByExpiryDate method to sort pages and displays each page's link title with its relative permalink.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByExpiryDate }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Exporting Sanity Schema Types
DESCRIPTION: This snippet exports the schema types defined for Sanity, including the postType schema.

LANGUAGE: typescript
CODE:
import {postType} from './postType'

export const schemaTypes = [postType]

----------------------------------------

TITLE: CSS Styling for Details Element
DESCRIPTION: CSS selectors and rules for styling the details element, summary element, and their content.

LANGUAGE: css
CODE:
/* target the details element */
details { }

/* target the summary element */
details > summary { }

/* target the children of the summary element */
details > summary > * { }

/* target the content */
details > :not(summary) { }

----------------------------------------

TITLE: Hugo Content Generation Commands
DESCRIPTION: Shell commands for generating new multilingual content files in Hugo, showing both same-directory and different-directory approaches.

LANGUAGE: sh
CODE:
hugo new content post/test.en.md
hugo new content post/test.de.md

hugo new content content/en/post/test.md
hugo new content content/de/post/test.md

----------------------------------------

TITLE: Error Handling with IsDescendant - Hugo Templates
DESCRIPTION: Example showing error handling when using IsDescendant function by adding an else clause to report missing pages.

LANGUAGE: go-html-template
CODE:
{{ $path := "/auctions/2023-11" }}
{{ with .Site.GetPage $path }}
  {{ $.IsDescendant . }} → true
{{ else }}
  {{ errorf "Unable to find the section with path %s" $path }}
{{ end }}

----------------------------------------

TITLE: Formatting Percentage with Precision in Hugo Template
DESCRIPTION: This snippet demonstrates how to use the lang.FormatPercent function in a Hugo template to format a number as a percentage. It takes a number and a precision value as arguments, returning a formatted percentage string.

LANGUAGE: go-html-template
CODE:
{{ 512.5032 | lang.FormatPercent 2 }} → 512.50%

----------------------------------------

TITLE: Using lang.Translate for Simple Translations in Go Templates
DESCRIPTION: Shows how to use the lang.Translate function (aliased as T) in Go HTML templates for simple translations.

LANGUAGE: go-html-template
CODE:
{{ T "privacy" }} → privacy
{{ T "security" }} → security

LANGUAGE: go-html-template
CODE:
{{ T "privacy" }} → prywatność
{{ T "security" }} → bezpieczeństwo

----------------------------------------

TITLE: Escaping Shortcode Delimiters in Hugo Code Blocks
DESCRIPTION: Demonstrates how to escape shortcode delimiters when documenting shortcode usage in Hugo Markdown files.

LANGUAGE: markdown
CODE:
```text {linenos=inline}
{{</*/* shortcode-1 */*/>}}

{{%/*/* shortcode-2 */*/%}}
```

----------------------------------------

TITLE: Sorting Pages by Link Title in Ascending Order using Hugo
DESCRIPTION: This snippet demonstrates how to use the ByLinkTitle function to sort pages by their link title in ascending order. It iterates through the sorted pages and creates a list of links using the page's relative permalink and link title.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByLinkTitle }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Sorting Hugo Pages by Publish Date (Descending)
DESCRIPTION: Shows how to sort and display pages in descending order by publish date using the ByPublishDate.Reverse method. The code creates a list of heading links sorted from newest to oldest.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByPublishDate.Reverse }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Pluralizing Words with Hugo's inflect.Pluralize Function
DESCRIPTION: This snippet demonstrates the usage of the inflect.Pluralize function in Hugo templates. It takes a singular noun as input and returns its plural form. In this example, it pluralizes the word 'cat' to 'cats'.

LANGUAGE: go-html-template
CODE:
{{ "cat" | pluralize }} → cats

----------------------------------------

TITLE: Accessing Resource Parameters in Hugo Template
DESCRIPTION: Demonstrates how to use the Params method to access resource parameters in a Hugo template. It creates an image figure with alt text and caption derived from the resource's parameters.

LANGUAGE: go-html-template
CODE:
{{ with .Resources.Get "images/a.jpg" }}
  <figure>
    <img alt="{{ .Params.alt }}" src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}">
    <figcaption>{{ .Title }} is {{ .Params.temperament }}</figcaption>
  </figure>
{{ end }}

----------------------------------------

TITLE: Singularizing Words using Hugo's inflect.Singularize Function
DESCRIPTION: This snippet demonstrates how to use the inflect.Singularize function in Hugo templates to convert a plural word to its singular form. The function takes a string input and returns the singularized version of the word.

LANGUAGE: go-html-template
CODE:
{{ "cats" | singularize }} → cat

----------------------------------------

TITLE: Adding Markdown Attributes to Paragraphs in Hugo
DESCRIPTION: Demonstrates how to add class and id attributes to a paragraph using both full and shorthand notation in Hugo's Markdown.

LANGUAGE: text
CODE:
This is a paragraph.
{class="foo bar" id="baz"}

LANGUAGE: text
CODE:
This is a paragraph.
{.foo .bar #baz}

----------------------------------------

TITLE: Retrieving Commit Message Body
DESCRIPTION: Demonstrates how to get the Git commit message body.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .Body }} → - Two new pages added.
{{ end }}

----------------------------------------

TITLE: Accessing Custom Environment Variables in Hugo Templates
DESCRIPTION: Example of how to retrieve custom environment variables set during the build process within Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ getenv "MY_VAR1" }} → foo
{{ getenv "MY_VAR2" }} → bar

----------------------------------------

TITLE: Basic Text File Content in Hugo
DESCRIPTION: Example of a simple text file resource content and how to access it using Hugo's resource.Get method.

LANGUAGE: text
CODE:
He travels the fastest who travels alone.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "quotations/kipling.txt" }}
  {{ .Content }} → He travels the fastest who travels alone.
{{ end }}

----------------------------------------

TITLE: Sorting Pages by Weight in Ascending Order using Hugo
DESCRIPTION: This snippet demonstrates how to use the ByWeight method to sort pages in ascending order based on their weight. Lighter items (lower weight) appear first in the sorted collection.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.ByWeight }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Adding Ordinal Suffixes to Numbers with Hugo's inflect.Humanize Function
DESCRIPTION: Shows how the humanize function handles integer inputs or string representations of integers by appending the appropriate ordinal suffix.

LANGUAGE: go-html-template
CODE:
{{ humanize "52" }} → 52nd
{{ humanize 103 }} → 103rd

----------------------------------------

TITLE: Accessing Page Resource Image
DESCRIPTION: Demonstrates how to access an image as a page resource within a Hugo page bundle structure.

LANGUAGE: text
CODE:
content/
└── posts/
    └── post-1/           <-- page bundle
        ├── index.md
        └── sunset.jpg    <-- page resource

LANGUAGE: go-html-template
CODE:
{{ $image := .Resources.Get "sunset.jpg" }}

----------------------------------------

TITLE: Retrieving Author Date
DESCRIPTION: Demonstrates how to get and format the Git commit author date.

LANGUAGE: go-html-template
CODE:
{{ with .GitInfo }}
  {{ .AuthorDate.Format "2006-01-02" }} → 2023-10-09
{{ end }}

----------------------------------------

TITLE: Defining Hugo Function Signature for resources.Babel
DESCRIPTION: Specifies the function signature, return type, and usage options for the resources.Babel function in Hugo's templating language.

LANGUAGE: markdown
CODE:
params:
  functions_and_methods:
    aliases: []
    returnType: resource.Resource
    signatures: ['resources.Babel [OPTIONS] RESOURCE']

----------------------------------------

TITLE: Creating Paginated Navigation with Last Method in Hugo Templates
DESCRIPTION: Shows how to create a paginated navigation system in Hugo templates. The code first creates a paginator for regular pages of type 'posts', then displays page links, and finally builds a navigation menu with First, Previous, Next, and Last page links.

LANGUAGE: go-html-template
CODE:
{{ $pages := where site.RegularPages "Type" "posts" }}
{{ $paginator := .Paginate $pages }}

{{ range $paginator.Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

{{ with $paginator }}
  <ul>
    {{ with .First }}
      <li><a href="{{ .URL }}">First</a></li>
    {{ end }}
    {{ with .Prev }}
      <li><a href="{{ .URL }}">Previous</a></li>
    {{ end }}
    {{ with .Next }}
      <li><a href="{{ .URL }}">Next</a></li>
    {{ end }}
    {{ with .Last }}
      <li><a href="{{ .URL }}">Last</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Alternative Markdown Notation
DESCRIPTION: Shows the alternative Markdown notation for shortcodes using different delimiters.

LANGUAGE: text
CODE:
{{%/* card title="Product Design" */%}}
We design the **best** widgets in the world.
{{%/* /card */%}}

----------------------------------------

TITLE: Example of Grayscale Filter Application in Hugo
DESCRIPTION: This example demonstrates the application of the Grayscale filter to an image resource in Hugo. It retrieves an image, applies the Grayscale filter, and generates an img tag with the filtered image.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with .Filter images.Grayscale }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Using Ref Shortcode in Markdown Links
DESCRIPTION: Examples of using the ref shortcode within Markdown links to generate internal references with different parameter combinations including language and output format specifications.

LANGUAGE: markdown
CODE:
[Link A]({{%/* ref "/books/book-1" */%}})

[Link B]({{%/* ref path="/books/book-1" */%}})

[Link C]({{%/* ref path="/books/book-1" lang="de" */%}})

[Link D]({{%/* ref path="/books/book-1" lang="de" outputFormat="json" */%}})

----------------------------------------

TITLE: Accessing Disqus Shortname in Hugo Template
DESCRIPTION: Demonstrates how to access the configured Disqus shortname from within a Hugo template. This value is used for the Disqus commenting system integration.

LANGUAGE: go-html-template
CODE:
{{ .Site.Config.Services.Disqus.Shortname }}

----------------------------------------

TITLE: Accessing Sitemap Priority in Hugo Templates
DESCRIPTION: Shows how to access the Priority setting from a page's sitemap configuration in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ .Sitemap.Priority }}

----------------------------------------

TITLE: Type Conversion in strings.TrimRight Function in Hugo Templates
DESCRIPTION: These examples illustrate how strings.TrimRight function handles different input types. It shows that the function attempts to convert arguments to strings when possible, allowing it to work with numbers and boolean values.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimRight 54 12345 }} → 123 (string)
{{ strings.TrimRight "eu" true }} → tr

----------------------------------------

TITLE: Implementing img Shortcode with Ordinal in Hugo
DESCRIPTION: This shortcode template uses the Ordinal method to generate unique IDs for img elements. It includes error checking for the 'src' argument and resource availability.

LANGUAGE: go-html-template
CODE:
{{ $src := "" }}
{{ with .Get "src" }}
  {{ $src = . }}
  {{ with resources.Get $src }}
    {{ $id := printf "img-%03d" $.Ordinal }}
    <img id="{{ $id }}" src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ else }}
    {{ errorf "The %q shortcode was unable to find %s. See %s" $.Name $src $.Position }}
  {{ end }}
{{ else }}
  {{ errorf "The %q shortcode requires a 'src' argument. See %s" .Name .Position }}
{{ end }}

----------------------------------------

TITLE: Retrieving Image Height in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Height method to get the height of an image resource in Hugo. It uses the resources.Get function to fetch the image and then applies the Height method.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ .Height }} → 400
{{ end }}

----------------------------------------

TITLE: Displaying Instagram Post URL
DESCRIPTION: Example of the Instagram post URL format that can be embedded using the shortcode.

LANGUAGE: text
CODE:
https://www.instagram.com/p/CxOWiQNP2MO/

----------------------------------------

TITLE: Calculating Absolute Duration in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Abs function to get the absolute value of a time.Duration in Hugo. It parses a negative duration of -3 hours and then applies the Abs function to obtain the positive equivalent.

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "-3h" }}
{{ $d.Abs }} → 3h0m0s

----------------------------------------

TITLE: Configuring HTTP Cache Settings
DESCRIPTION: Default configuration for HTTP caching in Hugo, showing how to specify which resources should be cached using include and exclude patterns.

LANGUAGE: toml
CODE:
[HTTPCache.cache.for]\nexcludes = ['**']\nincludes = []

----------------------------------------

TITLE: Sorting Pages Within Date Groups by Title
DESCRIPTION: Groups pages by publish date and sorts the pages within each group alphabetically by title using the ByTitle method.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByPublishDate "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages.ByTitle }}
      <li><a href="{{ .RelPermalink }}">{{ .Title }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Removing String Suffixes with Hugo's TrimSuffix Function
DESCRIPTION: This code snippet demonstrates the usage of the strings.TrimSuffix function in Hugo. It shows how to remove suffixes of different lengths from the end of a string. The function takes two parameters: the suffix to remove and the original string.

LANGUAGE: go-html-template
CODE:
{{ strings.TrimSuffix "a" "aabbaa" }} → aabba
{{ strings.TrimSuffix "aa" "aabbaa" }} → aabb
{{ strings.TrimSuffix "aaa" "aabbaa" }} → aabbaa

----------------------------------------

TITLE: Calculating Time Difference Using Sub Function in Hugo
DESCRIPTION: This snippet shows how to use the Sub function to compute the duration between two time values in Hugo templates. It first creates two time objects using time.AsTime and then uses the Sub function to calculate the difference.

LANGUAGE: go-html-template
CODE:
{{ $t1 := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t2 := time.AsTime "2023-01-26T22:34:38-08:00" }}

{{ $t1.Sub $t2 }} → 25h10m20s

----------------------------------------

TITLE: Configuring YouTube Privacy Settings in Hugo
DESCRIPTION: Illustrates how to disable the built-in YouTube shortcode in Hugo's configuration file by setting the privacy.youtube.disable option to true.

LANGUAGE: toml
CODE:
[privacy.youtube]
disable = true

----------------------------------------

TITLE: Basic Shortcode Template Implementation
DESCRIPTION: Shows the template implementation for a card shortcode that processes inner content and title parameter.

LANGUAGE: go-html-template
CODE:
<div class="card">
  {{ with .Get "title" }}
    <div class="card-title">{{ . }}</div>
  {{ end }}
  <div class="card-content">
    {{ .Inner | strings.TrimSpace }}
  </div>
</div>

----------------------------------------

TITLE: Using img Shortcode in Hugo Markdown
DESCRIPTION: Demonstrates how to use the 'img' shortcode multiple times in a Hugo markdown file. This example shows two shortcode calls for different images.

LANGUAGE: markdown
CODE:
{{</* img src="images/a.jpg" */>}}

{{</* img src="images/b.jpg" */>}}

----------------------------------------

TITLE: Hugo Mod Vendor Inherited Options
DESCRIPTION: Command-line options inherited from parent commands, including configuration, environment, and build settings.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Grouping Pages by Last Modification Date in Hugo Templates
DESCRIPTION: This snippet demonstrates how to group pages by year and month using the GroupByLastmod function in Hugo. It iterates over the grouped pages and displays them in an unordered list.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByLastmod "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages }}
      <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Installing Additional Sanity Plugins
DESCRIPTION: This snippet shows the command to install additional Sanity plugins required for the schema setup, including media and code input plugins.

LANGUAGE: bash
CODE:
npm i sanity-plugin-media @sanity/code-input

----------------------------------------

TITLE: MainSections in Home Template
DESCRIPTION: Demonstrates practical usage of MainSections in a home page template to list pages from main sections.

LANGUAGE: go-html-template
CODE:
{{ range where .Site.RegularPages "Section" "in" .Site.MainSections }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Implementing Book Details Shortcode in Hugo
DESCRIPTION: Implementation of the book-details shortcode in Hugo, accessing front matter values using the Page method. This shortcode creates an unordered list of book details.

LANGUAGE: go-html-template
CODE:
<ul>
  <li>Title: {{ .Page.Title }}</li>
  <li>Author: {{ .Page.Params.author }}</li>
  <li>Published: {{ .Page.Params.publication_year }}</li>
  <li>ISBN: {{ .Page.Params.isbn }}</li>
</ul>

----------------------------------------

TITLE: Implementing Book Details Shortcode in Hugo
DESCRIPTION: Implementation of the book-details shortcode in Hugo, accessing front matter values using the Page method. This shortcode creates an unordered list of book details.

LANGUAGE: go-html-template
CODE:
<ul>
  <li>Title: {{ .Page.Title }}</li>
  <li>Author: {{ .Page.Params.author }}</li>
  <li>Published: {{ .Page.Params.publication_year }}</li>
  <li>ISBN: {{ .Page.Params.isbn }}</li>
</ul>

----------------------------------------

TITLE: Displaying Content Structure in Hugo
DESCRIPTION: Shows the directory structure for a Hugo project, illustrating the organization of content, posts, and resources.

LANGUAGE: text
CODE:
content/
├── posts/
│   ├── cats/
│   │   ├── images/
│   │   │   └── a.jpg
│   │   └── index.md
│   └── _index.md
└── _index.md

----------------------------------------

TITLE: Configuring MainSections in Hugo Config
DESCRIPTION: Shows how to define main sections in Hugo configuration file to specify primary content sections.

LANGUAGE: yaml
CODE:
mainSections = ['books','films']

----------------------------------------

TITLE: Hugo Module Graph Inherited Options
DESCRIPTION: Command-line options inherited from parent commands, including configuration, environment, and build settings.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Grouping Pages by Expiry Date with Custom Page Sorting
DESCRIPTION: Groups pages by expiration date and sorts pages within each group by title using the ByTitle method.

LANGUAGE: go-html-template
CODE:
{{ range .Pages.GroupByExpiryDate "January 2006" }}
  <p>{{ .Key }}</p>
  <ul>
    {{ range .Pages.ByTitle }}
      <li><a href="{{ .RelPermalink }}">{{ .Title }}</a></li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Sorting Hugo Menu Entries by Name
DESCRIPTION: Uses the ByName method to sort menu entries alphabetically by name in ascending order. This template generates an unordered list of menu items with links.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main.ByName }}
    <li><a href="{{ .URL }}">{{ .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Applying Filters with images.Filter Function
DESCRIPTION: Demonstrates how to apply multiple filters to an image using the images.Filter function and display the result in an img tag.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with . | images.Filter $filters }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Extracting Seconds from Time in Hugo Templates
DESCRIPTION: Demonstrates how to extract the seconds component from a time.Time value using the Second method. The function returns an integer between 0 and 59 representing the seconds within the minute.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.Second }} → 58

----------------------------------------

TITLE: Calling Hugo Shortcode with Named Arguments
DESCRIPTION: Example of calling a shortcode using named arguments in a Hugo content file. The parameters are passed as key-value pairs.

LANGUAGE: text
CODE:
{{</* myshortcode greeting="Hello" name="world" */>}}

----------------------------------------

TITLE: Displaying Directory Structure in Hugo
DESCRIPTION: Shows the content directory structure used for demonstrating the IsAncestor functionality

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md
│   │   ├── auction-1.md
│   │   └── auction-2.md
│   ├── 2023-12/
│   │   ├── _index.md
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md
│   ├── bidding.md
│   └── payment.md
└── _index.md

----------------------------------------

TITLE: Executing Hugo Module Cache Cleanup in Bash
DESCRIPTION: This command deletes the Hugo Module cache for the current project. It can be customized with various flags to specify the scope and target of the cleanup operation.

LANGUAGE: bash
CODE:
hugo mod clean [flags] [args]

----------------------------------------

TITLE: Defining Menu Entries in Hugo Configuration
DESCRIPTION: This snippet shows how to define menu entries in Hugo's configuration file. It demonstrates setting the name, page reference, and weight for each menu item.

LANGUAGE: toml
CODE:
[[menus.main]]
name = 'Services'
pageRef = '/services'
weight = 10

[[menus.main]]
name = 'About'
pageRef = '/about'
weight = 20

[[menus.main]]
name = 'Contact'
pageRef = '/contact'
weight = 30

----------------------------------------

TITLE: Using AllTranslations in Hugo Template
DESCRIPTION: This Go HTML template demonstrates how to use the AllTranslations method to create a list of language-specific links for a page. It iterates through all translations and generates a list item for each language version.

LANGUAGE: go-html-template
CODE:
{{ with .AllTranslations }}
  <ul>
    {{ range . }}
      <li>
        <a href="{{ .RelPermalink }}" hreflang="{{ .Language.LanguageCode }}">{{ .LinkTitle }} ({{ or .Language.LanguageName .Language.Lang }})</a>
      </li>
    {{ end }}
  </ul>
{{ end }}

----------------------------------------

TITLE: Pipeline Character Usage in Hugo Templates
DESCRIPTION: Demonstrates how the pipeline character (|) is used to chain commands in Hugo templates, where each command's output becomes the last argument of the next command.

LANGUAGE: markdown
CODE:
|

----------------------------------------

TITLE: Hugo Configuration for Markdown Attributes
DESCRIPTION: Shows the Hugo configuration required to enable Markdown attributes for image render hooks.

LANGUAGE: toml
CODE:
[markup.goldmark.parser]
wrapStandAloneImageWithinParagraph = false
[markup.goldmark.parser.attribute]
block = true

----------------------------------------

TITLE: Hugo Convert Inherited Options
DESCRIPTION: Global command-line options inherited from parent Hugo commands that affect build configuration, environment settings, and file paths.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Closing 'define' Statement in Hugo Template
DESCRIPTION: Shows the usage of 'end' to terminate a 'define' statement in a Hugo template. It creates a reusable template section named 'main'.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  {{ print "this is the main section" }}
{{ end }}

----------------------------------------

TITLE: Inherited Options for Hugo Module Clean Command in Bash
DESCRIPTION: This snippet shows the options inherited from parent commands for the 'hugo mod clean' command, including flags for setting the clock, specifying config files, build environment, and various other Hugo-specific settings.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Resulting HTML from URL Method in Hugo Menu Template
DESCRIPTION: The HTML output generated by Hugo when using the URL method in the menu template, showing how missing pages are handled.

LANGUAGE: html
CODE:
<ul>
  <li><a href="/products/">Products</a></li>
  <li><a href="">Services</a></li>
</ul>

----------------------------------------

TITLE: Accessing Page Weight in Hugo Templates
DESCRIPTION: Shows how to access a page's weight value within Hugo templates using the .Weight method. Returns the integer weight value defined in the page's front matter.

LANGUAGE: go-html-template
CODE:
{{ .Weight }} → 42

----------------------------------------

TITLE: Extracting Minute from Timestamp in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Minute function in Hugo templates to extract the minute component from a timestamp. It first creates a time.Time object using the AsTime function, then applies the Minute method to retrieve the minute value.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.Minute }} → 44

----------------------------------------

TITLE: Figure-style Blockquote with Citation in Hugo
DESCRIPTION: Advanced blockquote implementation that renders as an HTML figure element with optional citation and caption support.

LANGUAGE: go-html-template
CODE:
<figure>
  <blockquote {{ with .Attributes.cite }}cite="{{ . }}"{{ end }}>
    {{ .Text }}
  </blockquote>
  {{ with .Attributes.caption }}
    <figcaption class="blockquote-caption">
      {{ . | safeHTML }}
    </figcaption>
  {{ end }}
</figure>

----------------------------------------

TITLE: Configuring Hugo File Caches
DESCRIPTION: Default configuration structure for Hugo file caches showing directory paths and cache duration settings. Uses tokens like :cacheDir and :resourceDir for dynamic path resolution.

LANGUAGE: yaml
CODE:
{{< code-toggle config=caches />}}

----------------------------------------

TITLE: Retrieving Hugo Binary Git Commit Hash in Go HTML Template
DESCRIPTION: This snippet demonstrates how to use the hugo.CommitHash function to obtain the Git commit hash of the Hugo binary. The function returns a string representing the full commit hash.

LANGUAGE: go-html-template
CODE:
{{ hugo.CommitHash }} → a4892a07b41b7b3f1f143140ee4ec0a9a5cf3970

----------------------------------------

TITLE: Executing Hugo List Future Command
DESCRIPTION: This command lists content with a future publication date in Hugo. It can be run with optional flags and arguments.

LANGUAGE: bash
CODE:
hugo list future [flags] [args]

----------------------------------------

TITLE: Accessing Menu Entry Name in Hugo Templates
DESCRIPTION: This snippet demonstrates how to access the Name property of a menu entry in Hugo templates. The Name represents the text to display for the menu item.

LANGUAGE: go
CODE:
{{ .Name }}

----------------------------------------

TITLE: Using BuildDrafts Method in Hugo Templates
DESCRIPTION: This Go HTML template snippet demonstrates how to use the BuildDrafts method on a Site object to determine if drafts are included in the current build.

LANGUAGE: go-html-template
CODE:
{{ .Site.BuildDrafts }} → true

----------------------------------------

TITLE: Configuring Markdown Attributes in Hugo
DESCRIPTION: This snippet shows how to configure Hugo to enable Markdown attributes for headings.

LANGUAGE: toml
CODE:
[[markup.goldmark.parser.attribute]]
title = true

----------------------------------------

TITLE: Example Pretty URL Format in Hugo
DESCRIPTION: Shows the default pretty URL format used by Hugo, which includes trailing slashes and omits file extensions.

LANGUAGE: text
CODE:
https://example.org/section/article/

----------------------------------------

TITLE: Inherited Hugo Command Options
DESCRIPTION: Additional options inherited from parent commands that can be used with the list published command.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Using collections.Querify with Different Input Types in Hugo Templates
DESCRIPTION: Demonstrates three equivalent ways to use the collections.Querify function with different input types: a map, a slice, and a sequence of scalar values.

LANGUAGE: go-html-template
CODE:
{{ collections.Querify (dict "a" 1 "b" 2) }}
{{ collections.Querify (slice "a" 1 "b" 2) }}
{{ collections.Querify "a" 1 "b" 2 }}

----------------------------------------

TITLE: Hugo List Expired Inherited Options
DESCRIPTION: Options inherited from parent commands that can be used with the 'list expired' command.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Retrieving Menu Entry Title in Hugo Templates
DESCRIPTION: This code shows how to get the Title of a menu entry in Hugo templates. The Title is used as the value for the title attribute in the rendered HTML.

LANGUAGE: go
CODE:
{{ .Title }}

----------------------------------------

TITLE: Defining Custom Parameters in Hugo Configuration
DESCRIPTION: This snippet shows how to define custom parameters in a Hugo site configuration file. It includes examples of nested parameters and various data types.

LANGUAGE: toml
CODE:
[params]
  subtitle = 'The Best Widgets on Earth'
  copyright-year = '2023'
  [params.author]
    email = 'jsmith@example.org'
    name = 'John Smith'
  [params.layouts]
    rfc_1123 = 'Mon, 02 Jan 2006 15:04:05 MST'
    rfc_3339 = '2006-01-02T15:04:05-07:00'

----------------------------------------

TITLE: Comparing HTML Templates Using strings.Diff in Hugo
DESCRIPTION: Demonstrates how to use strings.Diff to compare two HTML template strings and highlight their differences using transform.Highlight. The example compares two paragraphs containing multiplication results, showing how differences are detected and formatted.

LANGUAGE: go-html-template
CODE:
{{ $want := `
<p>The product of 6 and 7 is 42.</p>
<p>The product of 7 and 6 is 42.</p>
`}}

{{ $got := `
<p>The product of 6 and 7 is 42.</p>
<p>The product of 7 and 6 is 13.</p>
`}}

{{ $diff := strings.Diff "want" $want "got" $got }}
{{ transform.Highlight $diff "diff" }}

----------------------------------------

TITLE: External Link Render Hook Implementation
DESCRIPTION: Enhanced link render hook that adds a rel="external" attribute for absolute URLs while maintaining basic link functionality.

LANGUAGE: go-html-template
CODE:
{{- $u := urls.Parse .Destination -}}
<a href="{{ .Destination | safeURL }}"
  {{- with .Title }} title="{{ . }}"{{ end -}}
  {{- if $u.IsAbs }} rel="external"{{ end -}}
>
  {{- with .Text }}{{ . }}{{ end -}}
</a>
{{- /* chomp trailing newline */ -}}

----------------------------------------

TITLE: Formatting Go HTML Template Code Examples
DESCRIPTION: Demonstrates proper formatting for Go HTML template code examples, including indentation and spacing around action delimiters.

LANGUAGE: go-html-template
CODE:
{{ if eq $foo $bar }}
  {{ fmt.Printf "%s is %s" $foo $bar }}
{{ end }}

----------------------------------------

TITLE: Jekyll Import Command Basic Syntax
DESCRIPTION: Basic command syntax for importing from Jekyll to Hugo. Requires specifying the Jekyll root path and target Hugo path.

LANGUAGE: bash
CODE:
hugo import jekyll [flags] [args]

----------------------------------------

TITLE: Displaying Options for Hugo Import Command
DESCRIPTION: Shows the available options specific to the 'hugo import' command. It includes the help option for displaying command usage information.

LANGUAGE: plaintext
CODE:
  -h, --help   help for import

----------------------------------------

TITLE: Displaying YouTube Video URL in Hugo Markdown
DESCRIPTION: Example of a YouTube video URL to be embedded in Hugo content.

LANGUAGE: text
CODE:
https://www.youtube.com/watch?v=0RKpf3rK57I

----------------------------------------

TITLE: Displaying Specific File from GitHub Gist in Hugo
DESCRIPTION: Shows how to use the gist shortcode to display a specific file from a GitHub Gist in Hugo content.

LANGUAGE: text
CODE:
{{</* gist user 23932424365401ffa5e9d9810102a477 list.html */>}}

----------------------------------------

TITLE: Custom Shortcode for Inline Highlighting in Hugo
DESCRIPTION: Creates a custom shortcode named 'hl' for more concise inline code highlighting, using Go HTML templating.

LANGUAGE: go-html-template
CODE:
{{ $code := .Inner | strings.TrimSpace }}
{{ $lang := or (.Get 0) "go" }}
{{ $opts := dict "hl_inline" true "noClasses" true }}
{{ transform.Highlight $code $lang $opts }}

----------------------------------------

TITLE: Rendering Page Summaries in Hugo Section Template
DESCRIPTION: Shows a section template that iterates over pages, displaying their titles and summaries. This example is used to explain potential issues with using the global 'page' function in shortcodes.

LANGUAGE: go-html-template
CODE:
{{ range .Pages }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ .Summary }}
{{ end }}

----------------------------------------

TITLE: Jekyll Import Command Options
DESCRIPTION: Specific flags available for the Jekyll import command, including force import option and help flag.

LANGUAGE: bash
CODE:
      --force   allow import into non-empty target directory
  -h, --help    help for jekyll

----------------------------------------

TITLE: Basic Hugo Doc Generation Command
DESCRIPTION: The basic syntax for generating Hugo CLI documentation using the gen doc command. Supports optional flags and arguments.

LANGUAGE: bash
CODE:
hugo gen doc [flags] [args]

----------------------------------------

TITLE: Generated HTML Output
DESCRIPTION: Shows the HTML markup that Hugo generates from the details shortcode.

LANGUAGE: html
CODE:
<details>
  <summary>See the details</summary>
  <p>This is a <strong>bold</strong> word.</p>
</details>

----------------------------------------

TITLE: Creating List Item View Template in Hugo
DESCRIPTION: This snippet illustrates a compact 'li' view template for displaying content as a list item. It shows the content's title as a link and the formatted date.

LANGUAGE: go-html-template
CODE:
<li>
  <a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a>
  <div class="meta">{{ .Date.Format "Mon, Jan 2, 2006" }}</div>
</li>

----------------------------------------

TITLE: Using Gist Shortcode in Hugo Markdown
DESCRIPTION: Demonstrates how to use the gist shortcode to embed a GitHub Gist in Hugo content.

LANGUAGE: text
CODE:
{{</* gist user 23932424365401ffa5e9d9810102a477 */>}}

----------------------------------------

TITLE: Retrieving Default Translation Key in Hugo Template
DESCRIPTION: This snippet shows how Hugo generates a default translation key when no custom key is set in the front matter. It uses the .TranslationKey method to retrieve the automatically generated key based on the file path.

LANGUAGE: go-html-template
CODE:
{{ .TranslationKey }} → page/books/book-2

----------------------------------------

TITLE: vCard QR Code Generation in Hugo
DESCRIPTION: Advanced example showing how to create a QR code containing contact information in vCard format with custom parameters for error correction and scaling.

LANGUAGE: text
CODE:
{{</* qr level="low" scale=2 alt="QR code of vCard for John Smith" */>}}
BEGIN:VCARD
VERSION:2.1
N;CHARSET=UTF-8:Smith;John;R.;Dr.;PhD
FN;CHARSET=UTF-8:Dr. John R. Smith, PhD.
ORG;CHARSET=UTF-8:ABC Widgets
TITLE;CHARSET=UTF-8:Vice President Engineering
TEL;TYPE=WORK:+12065550101
EMAIL;TYPE=WORK:jsmith@example.org
END:VCARD
{{</* /qr */>}}

----------------------------------------

TITLE: Unmarshaling a YAML string in Hugo
DESCRIPTION: Demonstrates how to unmarshal a YAML string into a map using the unmarshal function in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $string := `
title: Les Misérables
author: Victor Hugo
`}}

{{ $book := unmarshal $string }}
{{ $book.title }} → Les Misérables
{{ $book.author }} → Victor Hugo

----------------------------------------

TITLE: Displaying Inherited Hugo Command Options
DESCRIPTION: Lists the options inherited from parent commands, including configuration, build environment, and output settings.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Hugo Config Mounts Command Options
DESCRIPTION: Available command-line options specific to the 'hugo config mounts' command, including baseURL, cacheDir, contentDir, and theme settings.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for mounts
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Including Hugo Quick Reference Shortcode
DESCRIPTION: Hugo shortcode that includes a quick reference section for methods documentation.

LANGUAGE: markdown
CODE:
{{% quick-reference section="methods" %}}

----------------------------------------

TITLE: Configuring RSS Output Types in Hugo
DESCRIPTION: Configuration snippet to control RSS feed generation for different page types including home, section, taxonomy and term pages.

LANGUAGE: toml
CODE:
[outputs]
home = ['html', 'rss']
section = ['html', 'rss']
taxonomy = ['html']
term = ['html']

----------------------------------------

TITLE: Using Vimeo Shortcode in Hugo Markdown
DESCRIPTION: Shows how to use the vimeo shortcode in Hugo Markdown to embed a Vimeo video.

LANGUAGE: text
CODE:
{{</* vimeo 55073825 */>}}

----------------------------------------

TITLE: Optional Dart Sass Installation Step
DESCRIPTION: YAML configuration snippet for installing Dart Sass, which can be removed if not needed

LANGUAGE: yaml
CODE:
- name: Install Dart Sass
  run: sudo snap install dart-sass

----------------------------------------

TITLE: Hugo Config Primary Options
DESCRIPTION: Available primary options for the Hugo config command including baseURL, cacheDir, contentDir, format, and other configuration settings.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
      --format string            preferred file format (toml, yaml or json) (default "toml")
  -h, --help                     help for config
      --lang string              the language to display config for. Defaults to the first language defined.
      --printZero                include config options with zero values (e.g. false, 0, "") in the output
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Defining Interpreted String Literals in Go
DESCRIPTION: Demonstrates the syntax for creating interpreted string literals in Go. These literals are enclosed in double quotes and can contain any character except newline and unescaped double quotes. Backslash escapes are interpreted within the string.

LANGUAGE: Go
CODE:
"foo"

----------------------------------------

TITLE: Enabling Template Metrics in Hugo CLI
DESCRIPTION: This command enables template metrics and hints in Hugo to analyze template performance. It helps identify time-consuming templates and potential caching opportunities.

LANGUAGE: sh
CODE:
hugo --templateMetrics --templateMetricsHints

----------------------------------------

TITLE: Setting Translation Key in Front Matter (English)
DESCRIPTION: This snippet demonstrates how to set a custom translation key in the front matter of an English content file. It sets the title and a custom translationKey.

LANGUAGE: toml
CODE:
title = 'Book 1'
translationKey = 'foo'

----------------------------------------

TITLE: Setting Custom Type in Hugo Front Matter
DESCRIPTION: Demonstrates how to set a custom content type for a page using Hugo's front matter in TOML format.

LANGUAGE: toml
CODE:
title = 'About'
type = 'miscellaneous'

LANGUAGE: toml
CODE:
title = 'Contact'
type = 'miscellaneous'
layout = 'contact'

----------------------------------------

TITLE: Hugo Content Directory Structure
DESCRIPTION: Example showing how content files are organized with taxonomy assignments in a Hugo site.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── and-then-there-were-none.md --> genres: suspense
│   ├── death-on-the-nile.md        --> genres: suspense
│   └── jamaica-inn.md              --> genres: suspense, romance
│   └── pride-and-prejudice.md      --> genres: romance
└── _index.md

----------------------------------------

TITLE: Managing Map Data with NewScratch in Hugo
DESCRIPTION: Illustrates the use of SetInMap, DeleteInMap, and GetSortedMapValues methods for handling map data in the scratch pad.

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.SetInMap "greetings" "english" "Hello" }}
{{ $s.SetInMap "greetings" "french" "Bonjour" }}
{{ $s.Get "greetings" }} → map[english:Hello french:Bonjour]

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.SetInMap "greetings" "english" "Hello" }}
{{ $s.SetInMap "greetings" "french" "Bonjour" }}
{{ $s.DeleteInMap "greetings" "english" }}
{{ $s.Get "greetings" }} → map[french:Bonjour]

LANGUAGE: go-html-template
CODE:
{{ $s := newScratch }}
{{ $s.SetInMap "greetings" "english" "Hello" }}
{{ $s.SetInMap "greetings" "french" "Bonjour" }}
{{ $s.GetSortedMapValues "greetings" }} → [Hello Bonjour]

----------------------------------------

TITLE: Reversing Next/Previous Navigation in Hugo
DESCRIPTION: Go HTML template for reversing the order of next and previous page navigation using the Reverse method.

LANGUAGE: go-html-template
CODE:
{{ $pages := .CurrentSection.Pages.ByWeight.Reverse }}

{{ with $pages.Prev . }}
  <a href="{{ .RelPermalink }}">Previous</a>
{{ end }}

{{ with $pages.Next . }}
  <a href="{{ .RelPermalink }}">Next</a>
{{ end }}

----------------------------------------

TITLE: Integer Example in Hugo
DESCRIPTION: Demonstrates a basic integer value without any fractional component.

LANGUAGE: plaintext
CODE:
42

----------------------------------------

TITLE: Defining Falsy Values in Hugo
DESCRIPTION: Lists the specific values that evaluate to false in Hugo template conditions. These include boolean false, zero numeric values, nil pointers/interfaces, empty collections and zero time values.

LANGUAGE: go
CODE:
false    // boolean false
0        // zero numeric value
nil      // nil pointer or interface
[]       // empty array
""       // empty string
map[]     // empty map
time.Time{} // zero time value

----------------------------------------

TITLE: Basic Year Shortcode Implementation
DESCRIPTION: Simple shortcode template that outputs the current year, demonstrating basic shortcode creation with date formatting.

LANGUAGE: go-html-template
CODE:
{{- now.Format "2006" -}}

----------------------------------------

TITLE: Setting Info Log Level in Hugo CLI
DESCRIPTION: Command to enable info level logging in Hugo, displaying information, warning, and error messages during build process.

LANGUAGE: sh
CODE:
hugo --logLevel info

----------------------------------------

TITLE: Defensive Coding for Previous and Next Links in Hugo
DESCRIPTION: This Go HTML template snippet demonstrates how to defensively code previous and next page links in Hugo by checking for page existence.

LANGUAGE: go-html-template
CODE:
{{ with .PrevInSection }}
  <a href="{{ .RelPermalink }}">Previous</a>
{{ end }}

{{ with .NextInSection }}
  <a href="{{ .RelPermalink }}">Next</a>
{{ end }}

----------------------------------------

TITLE: Demonstrating Floating Point Number in Plaintext
DESCRIPTION: Shows an example of a floating point number representation. The example uses pi (π) to illustrate a typical floating point value.

LANGUAGE: plaintext
CODE:
3.14159

----------------------------------------

TITLE: Rendering Hugo Menu with Emoji Shortcodes
DESCRIPTION: HTML template code that renders the main menu items with their pre and post emoji shortcodes. Uses Hugo's range function to iterate through menu items and markdownify to process the emoji shortcodes.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li>
      {{ .Pre | markdownify }}
      <a href="{{ .URL }}">{{ .Name }}</a>
      {{ .Post | markdownify }}
    </li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Calculating Square Root using math.Sqrt in Hugo
DESCRIPTION: Demonstrates how to calculate the square root of a number using Hugo's built-in math.Sqrt function. The function takes a numeric value and returns its square root as a float64.

LANGUAGE: go-html-template
CODE:
{{ math.Sqrt 81 }} → 9

----------------------------------------

TITLE: Path Matching Pattern Table in Markdown
DESCRIPTION: A markdown table showing different path matching patterns and their match results when tested against the path 'images/foo/a.jpg'. Demonstrates various combinations of wildcards including *, **.*, and directory level matching.

LANGUAGE: markdown
CODE:
Path|Pattern|Match
:--|:--|:--
`images/foo/a.jpg`|`images/foo/*.jpg`|`true`
`images/foo/a.jpg`|`images/foo/*.*`|`true`
`images/foo/a.jpg`|`images/foo/*`|`true`
`images/foo/a.jpg`|`images/*/*.jpg`|`true`
`images/foo/a.jpg`|`images/*/*.*`|`true`
`images/foo/a.jpg`|`images/*/*`|`true`
`images/foo/a.jpg`|`*/*/*.jpg`|`true`
`images/foo/a.jpg`|`*/*/*.*`|`true`
`images/foo/a.jpg`|`*/*/*`|`true`
`images/foo/a.jpg`|`**/*.jpg`|`true`
`images/foo/a.jpg`|`**/*.*`|`true`
`images/foo/a.jpg`|`**/*`|`true`
`images/foo/a.jpg`|`**`|`true`
`images/foo/a.jpg`|`*/*.jpg`|`false`
`images/foo/a.jpg`|`*.jpg`|`false`
`images/foo/a.jpg`|`*.*`|`false`
`images/foo/a.jpg`|`*`|`false`

----------------------------------------

TITLE: Building Extended Hugo Edition
DESCRIPTION: Command to build the extended edition of Hugo with CGO enabled. Requires Go 1.23.0+, C compiler (GCC/Clang), and proper PATH configuration.

LANGUAGE: sh
CODE:
CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest

----------------------------------------

TITLE: Rendered HTML Output for Sorted Menu
DESCRIPTION: Shows the resulting HTML output after sorting the menu entries by name. The list items are ordered alphabetically based on the menu entry names.

LANGUAGE: html
CODE:
<ul>
  <li><a href="/about/">About</a></li>
  <li><a href="/contact">Contact</a></li>
  <li><a href="/services/">Services</a></li>
</ul>

----------------------------------------

TITLE: Building Standard Hugo Edition
DESCRIPTION: Command to build the standard edition of Hugo using Go's package manager. Requires Go 1.23.0+ and proper PATH configuration.

LANGUAGE: sh
CODE:
go install github.com/gohugoio/hugo@latest

----------------------------------------

TITLE: Installing Hugo on OpenBSD
DESCRIPTION: Command to install Hugo on OpenBSD using the package manager. This will prompt the user to select which edition of Hugo to install.

LANGUAGE: sh
CODE:
doas pkg_add hugo

----------------------------------------

TITLE: Getting Main Media Type in Hugo OutputFormat
DESCRIPTION: This property returns the main type of the output format's media type. It represents the primary category of the content type.

LANGUAGE: go
CODE:
MediaType.MainType

----------------------------------------

TITLE: Defining Hugo Scratch Pad Scope Methods
DESCRIPTION: A markdown table showing the mapping between scope levels and their corresponding methods or functions for creating scratch pads in Hugo. Each method is linked to its detailed documentation.

LANGUAGE: markdown
CODE:
Scope|Method or function
:--|:--
page|[`PAGE.Store`]
site|[`SITE.Store`] 
global|[`hugo.Store`]
local|[`collections.NewScratch`]
shortcode|[`SHORTCODE.Store`]

----------------------------------------

TITLE: Basic Directory Structure for Local CSV
DESCRIPTION: Shows the expected directory structure for storing local CSV files in a Hugo project.

LANGUAGE: text
CODE:
my-project/
└── other-files/
    └── pets.csv

----------------------------------------

TITLE: Applying Image Filter Using images.Filter Function in Hugo
DESCRIPTION: This snippet demonstrates how to apply an image filter using the 'images.Filter' function in Hugo. It retrieves an image resource, applies a filter, and renders an img tag with the filtered image's properties.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ with . | images.Filter $filter }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Committing and Pushing amplify.yml to GitHub
DESCRIPTION: This shell script commits the newly created amplify.yml file to the local Git repository and pushes it to the remote GitHub repository. This step is necessary to make the configuration available for AWS Amplify.

LANGUAGE: sh
CODE:
git add -A
git commit -m "Create amplify.yml"
git push

----------------------------------------

TITLE: Generating Basic Random Number with math.Rand
DESCRIPTION: Demonstrates basic usage of math.Rand to generate a pseudo-random number between 0.0 and 1.0 (exclusive).

LANGUAGE: go-html-template
CODE:
{{ math.Rand }} → 0.6312770459590062

----------------------------------------

TITLE: Error Handling with Try Function in Hugo Templates
DESCRIPTION: Shows how to use the try function to catch and handle division by zero errors, converting them to warnings instead of build failures.

LANGUAGE: go-html-template
CODE:
{{ $x := 1 }}
{{ $y := 0 }}
{{ with try (div $x $y) }}
  {{ with .Err }}
    {{ warnf "%s" . }}
  {{ else }}
    {{ printf "%v divided by %v equals %v" $x $y .Value }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Inherited Options for Hugo Server Trust Command in Markdown
DESCRIPTION: Displays the options inherited from parent commands that can be used with 'hugo server trust', including configuration, environment, and logging options.

LANGUAGE: markdown
CODE:
```
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory
```

----------------------------------------

TITLE: Hugo YAML Front Matter Template with Go Templating
DESCRIPTION: A YAML front matter template for Hugo content files that uses Go templating to automatically generate the title from the filename and set the publish date. Includes placeholders for description, categories and keywords.

LANGUAGE: yaml
CODE:
---
title: {{ replace .File.ContentBaseName "-" " " | strings.FirstUpper }}
description:
categories: []
keywords: []
publishDate: {{ .Date }}
---

----------------------------------------

TITLE: Humanizing Strings with Hugo's inflect.Humanize Function
DESCRIPTION: Demonstrates how to use the humanize function to convert kebab-case and camelCase strings into human-readable format with capitalized first letter.

LANGUAGE: go-html-template
CODE:
{{ humanize "my-first-post" }} → My first post
{{ humanize "myCamelPost" }} → My camel post

----------------------------------------

TITLE: Creating JSON Output Example
DESCRIPTION: Example JSON output showing build date, Hugo version, and last modified date format

LANGUAGE: json
CODE:
{
  "build_date": "2025-01-16T19:14:41-08:00",
  "hugo_version": "0.141.0",
  "last_modified": "2025-01-16T19:14:46-08:00"
}

----------------------------------------

TITLE: Basic Front Matter Taxonomy Example
DESCRIPTION: Demonstrates how to use taxonomies in content front matter with categories and tags

LANGUAGE: yaml
CODE:
---
title: Example
categories:
  - vegetarian
  - gluten-free
tags:
  - appetizer
  - main course

----------------------------------------

TITLE: Time Conversion with Custom Timezone in Hugo
DESCRIPTION: Shows how to use time.AsTime function with a specific timezone parameter to override the default timezone handling.

LANGUAGE: go-html-template
CODE:
{{ time.AsTime "15 Oct 2023" "America/Los_Angeles" }}

----------------------------------------

TITLE: Advanced Related Content Options in Hugo
DESCRIPTION: This snippet shows how to use advanced options with the Related method, including specifying indices, document, named slices, and fragments. It creates an options dictionary to customize the related content search.

LANGUAGE: go-html-template
CODE:
{{ $page := . }}
{{ $opts := dict
  "indices" (slice "tags" "keywords")
  "document" $page
  "namedSlices" (slice (keyVals "tags" "hugo" "rocks") (keyVals "date" $page.Date))
  "fragments" (slice "heading-1" "heading-2")
}}

----------------------------------------

TITLE: Hugo Configuration for Deferred Template Execution
DESCRIPTION: This configuration snippet shows the recommended settings for optimal performance when using templates.Defer, especially for running the Hugo server or watching for changes.

LANGUAGE: toml
CODE:
[module]
[[module.mounts]]
source       = "hugo_stats.json"
target       = "assets/notwatching/hugo_stats.json"
disableWatch = true
[build.buildStats]
enable = true
[[build.cachebusters]]
source = "assets/notwatching/hugo_stats\\.json"
target = "styles\\.css"
[[build.cachebusters]]
source = "(postcss|tailwind)\\.config\\.js"
target = "css"

----------------------------------------

TITLE: Configuring Title Capitalization and Pluralization in Hugo
DESCRIPTION: Shows how to configure Hugo to disable automatic capitalization and pluralization of list titles. This affects section, taxonomy, and term pages not backed by a file.

LANGUAGE: yaml
CODE:
capitalizeListTitles = false
pluralizeListTitles = false

----------------------------------------

TITLE: Rendering Single Hugo Segment
DESCRIPTION: Command line example showing how to render a specific segment using the --renderSegments flag.

LANGUAGE: bash
CODE:
hugo --renderSegments segment1

----------------------------------------

TITLE: Example Ugly URL Format in Hugo
DESCRIPTION: Demonstrates the ugly URL format with visible .html file extensions.

LANGUAGE: text
CODE:
https://example.org/section/article.html

----------------------------------------

TITLE: Implementing Taxonomic Weights for Content Ordering
DESCRIPTION: Shows how to assign weights to taxonomy terms for custom ordering in taxonomy listings.

LANGUAGE: toml
CODE:
title = "foo"
tags = [ "a", "b", "c" ]
tags_weight = 22
categories = ["d"]
categories_weight = 44

----------------------------------------

TITLE: Manually Deploying Hugo Site to Codeberg Pages
DESCRIPTION: Shell commands for building a Hugo site, initializing a Git repository in the output directory, and pushing the contents to a Codeberg Pages repository.

LANGUAGE: sh
CODE:
# build the website
hugo

# access the output directory
cd public

# initialize new git repository
git init

# commit and push code to main branch
git add .
git commit -m "Initial commit"
git remote add origin https://codeberg.org/<YourUsername>/pages.git
git push -u origin main

----------------------------------------

TITLE: Phone Number QR Code Generation in Hugo
DESCRIPTION: Example of generating a QR code containing a telephone number using the tel: protocol.

LANGUAGE: text
CODE:
{{</* qr text="tel:+12065550101" /*/>}}

----------------------------------------

TITLE: Date-based Permalink Configuration for Root Pages in Hugo
DESCRIPTION: Shows how to create a date-based hierarchy for regular pages in the content root of a Hugo site.

LANGUAGE: toml
CODE:
{{< code-toggle file=hugo >}}
[permalinks.page]
"/" = "/:year/:month/:slug/"
{{< /code-toggle >}}

----------------------------------------

TITLE: Rendering HTML with Markdown Attributes in Hugo
DESCRIPTION: Shows the resulting HTML output when rendering a paragraph with Markdown attributes in Hugo.

LANGUAGE: html
CODE:
<p class="foo bar" id="baz">This is a paragraph.</p>

----------------------------------------

TITLE: Retrieving Page Title in Hugo Template
DESCRIPTION: Demonstrates how to use the .Title method to retrieve the title of a page in a Hugo template. This will return the 'title' field from the page's front matter.

LANGUAGE: go-html-template
CODE:
{{ .Title }} → About us

----------------------------------------

TITLE: Visualizing Hugo's Layered Cache Architecture
DESCRIPTION: ASCII diagram showing the three-layer caching system in Hugo: dynacache, HTTP cache, and file cache. Illustrates the hierarchical relationship between cache layers.

LANGUAGE: goat
CODE:
 .-----------.\n|  dynacache  |\n '-----+-----'\n       |\n       v\n .----------.\n| HTTP cache |\n '-----+----'\n       |\n       v\n .----------.\n| file cache |\n '-----+----'

----------------------------------------

TITLE: Complete Hugo Sitemap XML Template
DESCRIPTION: A complete example of a sitemap XML template that includes location, last modified date, and change frequency fields.

LANGUAGE: xml
CODE:
{{ printf "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>" | safeHTML }}
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
  xmlns:xhtml="http://www.w3.org/1999/xhtml">
  {{ range .Pages }}
    <url>
      <loc>{{ .Permalink }}</loc>
      {{ if not .Lastmod.IsZero }}
        <lastmod>{{ .Lastmod.Format "2006-01-02T15:04:05-07:00" | safeHTML }}</lastmod>
      {{ end }}
      {{ with .Sitemap.ChangeFreq }}
        <changefreq>{{ . }}</changefreq>
      {{ end }}
    </url>
  {{ end }}
</urlset>

----------------------------------------

TITLE: Accessing Menu Identifiers in Hugo Templates
DESCRIPTION: Template code demonstrating how to access menu identifiers for translation fallback. Uses the .Identifier method to get the translation key, falling back to .Name if no translation exists.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li><a href="{{ .URL }}">{{ or (T .Identifier) .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Rendered HTML Output for RSS Feed Link on Hugo Home Page
DESCRIPTION: This snippet shows the rendered HTML output for the RSS feed link when placed on the site's home page in Hugo. It demonstrates the final anchor tag with the relative permalink to the RSS XML file.

LANGUAGE: html
CODE:
<a href="/index.xml">RSS Feed</a>

----------------------------------------

TITLE: Checking Sitemap Disable Status in Hugo Templates
DESCRIPTION: Demonstrates how to check if a page is disabled in the sitemap configuration.

LANGUAGE: go-html-template
CODE:
{{ .Sitemap.Disable }}

----------------------------------------

TITLE: Defining Custom Parameters in Hugo Front Matter (TOML)
DESCRIPTION: Example of defining custom parameters in Hugo page front matter including nested parameters and special character keys.

LANGUAGE: toml
CODE:
title = 'Annual conference'
date = 2023-10-17T15:11:37-07:00
[params]
display_related = true
key-with-hyphens = 'must use index function'
[params.author]
  email = 'jsmith@example.org'
  name = 'John Smith'

----------------------------------------

TITLE: Displaying Directory Structure in Hugo
DESCRIPTION: Shows the content directory structure example for demonstrating section hierarchy

LANGUAGE: text
CODE:
content/
├── lessons/
│   ├── math/
│   │   ├── _index.md
│   │   ├── lesson-1.md
│   │   └── lesson-2.md
│   └── _index.md
└── _index.md

----------------------------------------

TITLE: Rendering Basic Markup with RenderString in Hugo
DESCRIPTION: Demonstrates the basic usage of RenderString to convert Markdown-style emphasized text to HTML. The method is called on the current context (.) and takes a string as input.

LANGUAGE: go-html-template
CODE:
{{ $s := "An *emphasized* word" }}
{{ $s | .RenderString }} → An <em>emphasized</em> word

----------------------------------------

TITLE: Accessing Sitemap ChangeFreq in Hugo Templates
DESCRIPTION: Shows how to access the ChangeFreq setting from a page's sitemap configuration in Hugo templates.

LANGUAGE: go-html-template
CODE:
{{ .Sitemap.ChangeFreq }}

----------------------------------------

TITLE: Implementing Greeting Shortcode Template
DESCRIPTION: Hugo template for the greeting shortcode that renders its inner content within a div container with a greeting class.

LANGUAGE: go-html-template
CODE:
<div class="greeting">
  {{ .Inner | strings.TrimSpace | .Page.RenderString }}
</div>

----------------------------------------

TITLE: Public Directory Structure with Path Values
DESCRIPTION: Illustrates the public directory structure and corresponding Path values for different pages

LANGUAGE: text
CODE:
public/
├── posts/
│   ├── post-1/
│   │   └── index.html    .Page.Path = /posts/post-1
│   └── index.html        .Page.Path = /posts
├── tags/
│   ├── hugo/
│   │   └── index.html    .Page.Path = /tags/hugo
│   └── index.html        .Page.Path = /tags
└── index.html            .Page.Path = /

----------------------------------------

TITLE: Implementing Positional Arguments in Hugo Shortcode
DESCRIPTION: Shows how to call a shortcode with positional arguments in Markdown content and retrieve those arguments using the Get function with numeric indices.

LANGUAGE: text
CODE:
{{</* myshortcode "Hello" "world" */>}}

LANGUAGE: go-html-template
CODE:
{{ printf "%s %s." (.Get 0) (.Get 1) }} → Hello world.

----------------------------------------

TITLE: Rounding Time Durations with Hugo Templates
DESCRIPTION: Shows how to parse and round time durations to different intervals. The example parses an initial duration of 3.5 hours, 2.5 minutes, and 1.5 seconds, then demonstrates rounding it to the nearest 2 hours, 3 minutes, and 4 seconds respectively.

LANGUAGE: go-html-template
CODE:
{{ $d = time.ParseDuration "3.5h2.5m1.5s" }}

{{ $d.Round (time.ParseDuration "2h") }} → 4h0m0s
{{ $d.Round (time.ParseDuration "3m") }} → 3h33m0s
{{ $d.Round (time.ParseDuration "4s") }} → 3h32m32s

----------------------------------------

TITLE: Context Handling in IsAncestor
DESCRIPTION: Illustrates the importance of proper context handling when using IsAncestor, showing incorrect and correct usage of the dot context

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/auctions" }}
  {{ .IsAncestor . }} → true
{{ end }}

LANGUAGE: go-html-template
CODE:
{{ with .Site.GetPage "/auctions" }}
  {{ $.IsAncestor . }} → true
{{ end }}

----------------------------------------

TITLE: Specifying JSON Media Type in Hugo
DESCRIPTION: This snippet demonstrates how to specify the media type for JSON data in Hugo configuration.

LANGUAGE: plaintext
CODE:
application/json

----------------------------------------

TITLE: Implementing Gallery Shortcode with Inner Method
DESCRIPTION: This snippet demonstrates a Hugo shortcode implementation using the Inner method, which preserves indentation and leads to unexpected rendering of indented content as code blocks.

LANGUAGE: go-html-template
CODE:
<div class="gallery">
  {{ .Inner | strings.TrimSpace | .Page.RenderString }}
</div>

----------------------------------------

TITLE: Retrieving Image Width in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Width method to get the width of an image resource in Hugo. It uses the resources.Get function to retrieve the image and then calls the Width method on the result.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/a.jpg" }}
  {{ .Width }} → 600
{{ end }}

----------------------------------------

TITLE: Demonstrating Hugo Template Action Syntax
DESCRIPTION: Shows the basic syntax delimiters for Hugo template actions that are used for data evaluation and control structures within templates.

LANGUAGE: go
CODE:
{{}} 

----------------------------------------

TITLE: Configuring Markdown Attributes in Hugo
DESCRIPTION: Configuration snippet to enable Markdown attributes for blocks in Hugo's Goldmark parser.

LANGUAGE: toml
CODE:
[markup.goldmark.parser.attribute]
block = true

----------------------------------------

TITLE: Converting Time to Nanoseconds Since Unix Epoch in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the UnixNano function in Hugo templates to convert a time.Time value to nanoseconds since the Unix epoch. It first creates a time.Time object from a string representation and then applies the UnixNano method.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $t.UnixNano }} → 1674891898000000000

----------------------------------------

TITLE: Listing Taxonomy Terms Template
DESCRIPTION: Hugo template code for displaying a list of content items within a specific taxonomy term.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Taxonomies.genres.suspense }}
    <li><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Rendered HTML Output of Ref Shortcode
DESCRIPTION: The resulting HTML output after Hugo processes the ref shortcode examples, showing how the links are rendered with different configurations including language-specific and format-specific URLs.

LANGUAGE: html
CODE:
<a href="https://example.org/en/books/book-1/">Link A</a>

<a href="https://example.org/en/books/book-1/">Link B</a>

<a href="https://example.org/de/books/book-1/">Link C</a>

<a href="https://example.org/de/books/book-1/index.json">Link D</a>

----------------------------------------

TITLE: Inherited Options for Hugo Server Command in Bash
DESCRIPTION: This snippet lists options inherited from parent commands. These options provide additional configuration for the Hugo server, such as setting the clock, specifying config files, and controlling the build environment.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Displaying Hugo New Command Options
DESCRIPTION: Shows the available options for the 'hugo new' command, including the help flag.

LANGUAGE: shell
CODE:
  -h, --help   help for new

----------------------------------------

TITLE: Displaying Hugo Content Structure
DESCRIPTION: This snippet shows the directory structure for a Hugo project, illustrating how content is organized and how the FirstSection method determines the top-level section for different pages.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md     <-- first section: auctions
│   │   ├── auction-1.md
│   │   └── auction-2.md  <-- first section: auctions
│   ├── 2023-12/
│   │   ├── _index.md     
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md         <-- first section: auctions
│   ├── bidding.md
│   └── payment.md        <-- first section: auctions
├── books/
│   ├── _index.md         <-- first section: books
│   ├── book-1.md
│   └── book-2.md         <-- first section: books
├── films/
│   ├── _index.md         <-- first section: films
│   ├── film-1.md
│   └── film-2.md         <-- first section: films
└── _index.md             <-- first section: home

----------------------------------------

TITLE: Demonstrating Hugo Content Structure
DESCRIPTION: This snippet illustrates the typical content structure in Hugo, showing the difference between section pages and regular pages.

LANGUAGE: text
CODE:
content/
├── books/
│   ├── book-1/
│   │   └── index.md  <-- kind = page
│   ├── book-2.md     <-- kind = page
│   └── _index.md     <-- kind = section
└── _index.md         <-- kind = home

----------------------------------------

TITLE: Sorting Fiction Books by Title in Hugo
DESCRIPTION: Example of using Hugo's sort function to order fiction books by title.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range sort .Site.Data.books.fiction "title" }}
    <li>{{ .title }} ({{ .author }})</li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Section Template in Hugo
DESCRIPTION: Template for rendering section pages with a list of pages within that section.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
  {{ range .Pages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Hugo Template for Rendering Section Links
DESCRIPTION: Template code that iterates through top-level sections and creates heading links using RelPermalink and LinkTitle

LANGUAGE: go-html-template
CODE:
{{ range .Site.Sections }}
  <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
{{ end }}

----------------------------------------

TITLE: Setting Text and Resource Paths in Hugo Templates
DESCRIPTION: Initializes variables for the text content, font file path, and image path that will be used for text overlay

LANGUAGE: go-html-template
CODE:
{{ $text := "Zion National Park" }}
{{ $fontPath := "https://github.com/google/fonts/raw/main/ofl/lato/Lato-Regular.ttf" }}
{{ $imagePath := "images/original.jpg" }}

----------------------------------------

TITLE: Inline JavaScript Integration in Hugo
DESCRIPTION: Shows how to embed JavaScript content directly into HTML using the safeJS function.

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "js/script.js" }}
  <script>{{ .Content | safeJS }}</script>
{{ end }}

----------------------------------------

TITLE: Applying Opacity Filter with Process Filter in Hugo
DESCRIPTION: Demonstrates how to combine the images.Opacity filter with the images.Process filter to change the opacity of an image that doesn't support transparency and convert it to a format that does (PNG in this case).

LANGUAGE: go-html-template
CODE:
{{ with resources.Get "images/original.jpg" }}
  {{ $filters := slice
    (images.Opacity 0.65)
    (images.Process "png")
  }}
  {{ with . | images.Filter $filters }}
    <img src="{{ .RelPermalink }}" width="{{ .Width }}" height="{{ .Height }}" alt="">
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Complex Base64 Decoding with API Integration
DESCRIPTION: Advanced example demonstrating how to fetch, decode, and render base64-encoded content from GitHub's API, including error handling and markdown processing.

LANGUAGE: go-html-template
CODE:
{{ $url := "https://api.github.com/repos/gohugoio/hugo/readme" }}
{{ with try (resources.GetRemote $url) }}
  {{ with .Err }}
    {{ errorf "%s" . }}
  {{ else with .Value }}
    {{ with . | transform.Unmarshal }}
      {{ .content | base64Decode | markdownify }}
    {{ end }}
  {{ else }}
    {{ errorf "Unable to get remote resource %q" $url }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Inline Date Shortcode Implementation
DESCRIPTION: Example of an inline shortcode that formats dates using Hugo's time functions. Demonstrates both definition and usage with different date formats.

LANGUAGE: text
CODE:
Today is
{{</* date.inline ":date_medium" */>}}
  {{- now | time.Format (.Get 0) -}}
{{</* /date.inline */>}}.

Today is {{</* date.inline ":date_full" /*/>}}.

----------------------------------------

TITLE: Basic Hugo Man Page Generation Command
DESCRIPTION: The basic command syntax for generating Hugo man pages. This command generates up-to-date man pages for Hugo's CLI interface.

LANGUAGE: bash
CODE:
hugo gen man [flags] [args]

----------------------------------------

TITLE: Demonstrating Markdown Content with Indented Shortcodes
DESCRIPTION: This snippet shows Markdown content with indented shortcodes containing gallery images. The indentation is significant for understanding the behavior of Inner vs InnerDeindent methods.

LANGUAGE: text
CODE:
- Gallery one

    {{</* gallery */>}}
    ![kitten a](thumbnails/a.jpg)
    ![kitten b](thumbnails/b.jpg)
    {{</* /gallery */>}}

- Gallery two

    {{</* gallery */>}}
    ![kitten c](thumbnails/c.jpg)
    ![kitten d](thumbnails/d.jpg)
    {{</* /gallery */>}}

----------------------------------------

TITLE: Using RenderShortcodes in Hugo Template
DESCRIPTION: This snippet demonstrates how to use the RenderShortcodes method in a Hugo template to render shortcodes from a specific page.

LANGUAGE: go-html-template
CODE:
{{ $p := site.GetPage "/about" }}
{{ $p.RenderShortcodes }}

----------------------------------------

TITLE: Formatting Lastmod Date in Hugo Template
DESCRIPTION: Shows how to format and display the last modification date using Hugo's time.Format function in a template.

LANGUAGE: go-html-template
CODE:
{{ .Lastmod | time.Format ":date_medium" }}

----------------------------------------

TITLE: LiveReload Debug Query Parameter
DESCRIPTION: URL query parameter to enable verbose LiveReload logging in the browser's developer console.

LANGUAGE: text
CODE:
http://localhost:1313/?debug=LR-verbose

----------------------------------------

TITLE: Removing Stop Words Using collections.Complement in Hugo
DESCRIPTION: This example demonstrates using the collections.Complement function to remove stop words from a sentence. It splits the text into words, filters out stop words, and then rejoins the remaining words.

LANGUAGE: go-html-template
CODE:
{{ $text := "The quick brown fox jumps over the lazy dog" }}
{{ $stopWords := slice "a" "an" "in" "over" "the" "under" }}
{{ $filtered := split $text " " | complement $stopWords }}

{{ delimit $filtered " " }} → The quick brown fox jumps lazy dog

----------------------------------------

TITLE: Disabling Taxonomy System
DESCRIPTION: Configuration to disable specific taxonomy kinds in Hugo

LANGUAGE: yaml
CODE:
disableKinds = ['categories','tags']

----------------------------------------

TITLE: Incorrect Usage of Global 'page' Function in Hugo Templates
DESCRIPTION: Illustrates how the global 'page' function always accesses the Page object passed to the top-level template, which can lead to unexpected results when used inside nested loops.

LANGUAGE: go-html-template
CODE:
{{ range site.Sections }}
  {{ range .Pages }}
    {{ page.Title }}
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Accessing Term Data in Hugo Templates
DESCRIPTION: Shows how to access properties of the Data object within a term template, including singular and plural names of the taxonomy, and the specific term name.

LANGUAGE: go-html-template
CODE:
{{ .Data.Singular }} → genre

LANGUAGE: go-html-template
CODE:
{{ .Data.Plural }} → genres

LANGUAGE: go-html-template
CODE:
{{ .Data.Term }} → suspense

----------------------------------------

TITLE: Using IsServer Function in Hugo Templates
DESCRIPTION: SITE.IsServer is a deprecated function that returns a boolean indicating whether Hugo's development server is running. Users should migrate to hugo.IsServer instead.

LANGUAGE: markdown
CODE:
SITE.IsServer

----------------------------------------

TITLE: YAML Frontmatter Configuration for Hugo Page
DESCRIPTION: Hugo page metadata configuration using YAML frontmatter, defining the title, date, description, site URL and byline for the blog post.

LANGUAGE: yaml
CODE:
---
title: Hartwell Insurance
date: 2018-02-09
description: 'Showcase: "Hugo + Netlify + PWA makes for a rapid website."'
siteURL: https://www.hartwell-insurance.com/
byline: "[Trys Mudford](http://www.trysmudford.com), Lead Developer, Tomango"
---

----------------------------------------

TITLE: Generating Navigation Menu with URL Method in Hugo Templates
DESCRIPTION: This snippet demonstrates how to create an unordered list of navigation menu items using Hugo's menu system. It iterates over the main menu entries, generating list items with links using the URL method to determine the appropriate href value.

LANGUAGE: go-html-template
CODE:
<ul>
  {{ range .Site.Menus.main }}
    <li><a href="{{ .URL }}">{{ .Name }}</a></li>
  {{ end }}
</ul>

----------------------------------------

TITLE: Configuring Hugo Showcases Section with YAML Front Matter
DESCRIPTION: This YAML front matter sets up the configuration for a Hugo website's showcases section. It defines the page title and specifies cascading build settings to prevent rendering and listing of child pages.

LANGUAGE: yaml
CODE:
---
title: Showcases
cascade:
  build:
    render: never
    list: never
---

----------------------------------------

TITLE: Using compare.Eq in Hugo Templates
DESCRIPTION: Demonstrates the usage of compare.Eq function for comparing multiple values in Hugo templates. The function returns true if any pair of adjacent arguments are equal. It supports comparison of numbers, strings, booleans, dates, slices, maps, and pages.

LANGUAGE: go-html-template
CODE:
{{ eq 1 1 }} → true
{{ eq 1 2 }} → false

{{ eq 1 1 1 }} → true
{{ eq 1 1 2 }} → true
{{ eq 1 2 1 }} → true
{{ eq 1 2 2 }} → false

----------------------------------------

TITLE: SourceHut Build Configuration for Automated Hugo Deployment
DESCRIPTION: YAML configuration file (.build.yml) that defines the automated build and deployment process for a Hugo site on SourceHut. Specifies required packages, OAuth permissions, and build tasks.

LANGUAGE: yaml
CODE:
image: alpine/edge
packages:
  - hugo
  - hut
oauth: pages.sr.ht/PAGES:RW
environment:
  site: <YourUsername>.srht.site
tasks:
- package: |
    cd $site
    hugo
    tar -C public -cvz . > ../site.tar.gz
- upload: |
    hut pages publish -d $site site.tar.gz

----------------------------------------

TITLE: Unmarshaling a global resource in Hugo
DESCRIPTION: Shows how to unmarshal a JSON file from the assets directory using transform.Unmarshal in a Hugo template.

LANGUAGE: go-html-template
CODE:
{{ $data := dict }}
{{ $path := "data/books.json" }}
{{ with resources.Get $path }}
  {{ with . | transform.Unmarshal }}
    {{ $data = . }}
  {{ end }}
{{ else }}
  {{ errorf "Unable to get global resource %q" $path }}
{{ end }}

{{ range where $data "author" "Victor Hugo" }}
  {{ .title }} → Les Misérables
{{ end }}

----------------------------------------

TITLE: Accessing Google Analytics ID in Hugo Templates
DESCRIPTION: Demonstrates how to access the configured Google Analytics ID from within a Hugo template using the Site.Config.Services.GoogleAnalytics.ID method.

LANGUAGE: go-html-template
CODE:
{{ .Site.Config.Services.GoogleAnalytics.ID }} → G-XXXXXXXXX

----------------------------------------

TITLE: Implementing Menu Navigation with HasMenuCurrent in Hugo Templates
DESCRIPTION: Demonstrates how to create a navigation menu that highlights the current page and ancestor pages using IsMenuCurrent and HasMenuCurrent functions. The code iterates through main menu items and applies different styling based on the page's relationship to menu items.

LANGUAGE: go-html-template
CODE:
{{ $currentPage := . }}
{{ range site.Menus.main }}
  {{ if $currentPage.IsMenuCurrent .Menu . }}
    <a class="active" aria-current="page" href="{{ .URL }}">{{ .Name }}</a>
  {{ else if $currentPage.HasMenuCurrent .Menu . }}
    <a class="ancestor" aria-current="true" href="{{ .URL }}">{{ .Name }}</a>
  {{ else }}
    <a href="{{ .URL }}">{{ .Name }}</a>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Defining Hugo Front Matter in YAML
DESCRIPTION: This snippet defines the front matter for a Hugo content page using YAML syntax. It includes fields for title (automatically generated from the file name), description, categories, keywords, and custom parameters for functions and methods.

LANGUAGE: yaml
CODE:
---
title: {{ replace .File.ContentBaseName "-" " " | title }}
description:
categories: []
keywords: []
params:
  functions_and_methods:
    returnType:
    signatures: []
---

----------------------------------------

TITLE: Converting Octal Values to Integers in Hugo Templates
DESCRIPTION: Examples of converting octal (base 8) values to integers using the int function in Hugo templates. This showcases both the traditional and the '0o' prefix notations for octal numbers.

LANGUAGE: go-html-template
CODE:
{{ int 011 }} → 9 (int)
{{ int "011" }} → 9 (int)

{{ int 0o11 }} → 9 (int)
{{ int "0o11" }} → 9 (int)

----------------------------------------

TITLE: Defining Hugo Page Metadata with YAML Frontmatter
DESCRIPTION: YAML frontmatter block that defines metadata for a Hugo documentation page about methods. Includes title, description, and empty categories and keywords arrays.

LANGUAGE: yaml
CODE:
---
title: Methods
description: A quick reference guide to Hugo's methods, grouped by object.
categories: []
keywords: []
---

----------------------------------------

TITLE: Rendering CodeOwners in Template
DESCRIPTION: Hugo template code to iterate and display code owners for a content page

LANGUAGE: go-html-template
CODE:
{{ range .CodeOwners }}
  {{ . }}
{{ end }}

----------------------------------------

TITLE: Sample Output of math.Counter Warning Messages
DESCRIPTION: Shows the sequential output generated by the math.Counter function when used with warning messages. Demonstrates how the counter increments with each call.

LANGUAGE: sh
CODE:
WARN  single.html called 1 times
WARN  single.html called 2 times
WARN  single.html called 3 times

----------------------------------------

TITLE: Creating Content with Specific Archetype
DESCRIPTION: Shell command demonstrating how to create new content using a specific archetype with the --kind flag.

LANGUAGE: shell
CODE:
hugo new content --kind tutorials articles/something.md

----------------------------------------

TITLE: Hugo Build Output Directory Structure
DESCRIPTION: Shows the resulting directory structure after building a Hugo site, demonstrating which resources are published by default.

LANGUAGE: text
CODE:
public/
├── example/
│   ├── g.jpg
│   ├── h.png
│   └── index.html
└── index.html

----------------------------------------

TITLE: Accessing YouTube Privacy Settings in Hugo Templates
DESCRIPTION: Shows how to access the configured YouTube privacy settings from within a Hugo template using the Site.Config.Privacy.YouTube.Disable method.

LANGUAGE: go-html-template
CODE:
{{ .Site.Config.Privacy.YouTube.Disable }} → true

----------------------------------------

TITLE: Creating a New Hugo Theme
DESCRIPTION: Command to generate a new Hugo theme skeleton with default directory structure.

LANGUAGE: sh
CODE:
hugo new theme my-theme

----------------------------------------

TITLE: Triggering Content Rendering with WordCount in Hugo Templates
DESCRIPTION: This example shows an alternative method to trigger content rendering using the WordCount method before accessing a scratch pad value in a parent template.

LANGUAGE: go-html-template
CODE:
{{ $noop := .WordCount }}
{{ .Store.Get "mykey" }}

----------------------------------------

TITLE: Hugo Site Structure After Build
DESCRIPTION: Shows the directory structure after building the site, including the generated 'public' and 'resources' directories.

LANGUAGE: txt
CODE:
my-site/
├── archetypes/
│   └── default.md
├── assets/
├── config/       
│   └── _default/
│       └── hugo.toml
├── content/
├── data/
├── i18n/
├── layouts/
├── public/       <-- created when you build your site
├── resources/    <-- created when you build your site
├── static/
└── themes/

----------------------------------------

TITLE: Creating a New Hugo Site
DESCRIPTION: This command creates a new Hugo site with a default directory structure.

LANGUAGE: sh
CODE:
hugo new site my-site

----------------------------------------

TITLE: Generating HMAC Hashes in Hugo Templates
DESCRIPTION: Demonstrates different ways to generate HMAC hashes using SHA256 with both hex and binary encoding. The function takes a hash type (md5/sha1/sha256/sha512), a secret key, a message, and optional encoding parameter (hex/binary).

LANGUAGE: go-html-template
CODE:
{{ hmac "sha256" "Secret key" "Secret message" }}
5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84

{{ hmac "sha256" "Secret key" "Secret message" "hex" }}
5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84

{{ hmac "sha256" "Secret key" "Secret message" "binary" | base64Encode }}
XM60kfRfixVOIPOwow7Tpv8wJ9Nz+Fx4/+iYMYCwPIQ=

----------------------------------------

TITLE: Using Hugo Details Shortcode Example
DESCRIPTION: Demonstrates how to use the Hugo details shortcode to create a collapsible section with a summary.

LANGUAGE: text
CODE:
{{</* details summary="See the details" */>}}
This is a **bold** word.
{{</* /details */>}}

----------------------------------------

TITLE: Basic Hugo NPM Module Command
DESCRIPTION: The basic syntax for executing Hugo's npm module commands.

LANGUAGE: bash
CODE:
hugo mod npm [command] [flags]

----------------------------------------

TITLE: SSH Directory Creation
DESCRIPTION: Commands to create and navigate to SSH directory

LANGUAGE: txt
CODE:
cd && mkdir .ssh & cd .ssh

----------------------------------------

TITLE: Implementing ASCII Tree Diagram with GoAT
DESCRIPTION: Demonstrates how to create a basic ASCII tree diagram using GoAT syntax in Hugo. Shows tree structure with nodes and connections.

LANGUAGE: goat
CODE:
      .               .                .               .--- 1          .-- 1     / 1
     / \              |                |           .---+            .-+         +
    /   \         .---+---.         .--+--.        |   '--- 2      |   '-- 2   / \ 2
   +     +        |       |        |       |    ---+            ---+          +
  / \   / \     .-+-.   .-+-.     .+.     .+.      |   .--- 3      |   .-- 3   \ / 3
 /   \ /   \    |   |   |   |    |   |   |   |     '---+            '-+         +
 1   2 3   4    1   2   3   4    1   2   3   4         '--- 4          '-- 4     \ 4

----------------------------------------

TITLE: Installing Hugo on DragonFly BSD
DESCRIPTION: Command to install the extended edition of Hugo on DragonFly BSD using the package manager.

LANGUAGE: sh
CODE:
sudo pkg install gohugo

----------------------------------------

TITLE: Hugo Content Directory Structure Example
DESCRIPTION: Shows the hierarchical structure of content directories including sections and subsections with _index.md files and their associated weights.

LANGUAGE: text
CODE:
content/
├── auctions/
│   ├── 2023-11/
│   │   ├── _index.md     <-- front matter: weight = 202311
│   │   ├── auction-1.md
│   │   └── auction-2.md
│   ├── 2023-12/
│   │   ├── _index.md     <-- front matter: weight = 202312
│   │   ├── auction-3.md
│   │   └── auction-4.md
│   ├── _index.md         <-- front matter: weight = 30
│   ├── bidding.md
│   └── payment.md
├── books/
│   ├── _index.md         <-- front matter: weight = 20
│   ├── book-1.md
│   └── book-2.md
├── films/
│   ├── _index.md         <-- front matter: weight = 10
│   ├── film-1.md
│   └── film-2.md
└── _index.md

----------------------------------------

TITLE: Installing Hugo Extended Edition on Fedora-based Distributions
DESCRIPTION: Command to install the extended edition of Hugo on Fedora-based Linux distributions using the dnf package manager.

LANGUAGE: sh
CODE:
sudo dnf install hugo

----------------------------------------

TITLE: Truncating Time to Nearest Hour in Hugo Templates
DESCRIPTION: This snippet demonstrates how to use the Truncate method to round down a time to the nearest hour. It first creates a time object, defines a duration of 1 hour, and then applies the Truncate method before formatting the result.

LANGUAGE: go-html-template
CODE:
{{ $t := time.AsTime "2023-01-27T23:44:58-08:00" }}
{{ $d := time.ParseDuration "1h"}}

{{ ($t.Truncate $d).Format "2006-01-02T15:04:05-00:00" }} → 2023-01-27T23:00:00-00:00

----------------------------------------

TITLE: Hugo Convert Basic Options
DESCRIPTION: Core command-line options specific to the hugo convert command for controlling conversion behavior and output location.

LANGUAGE: bash
CODE:
  -h, --help            help for convert
  -o, --output string   filesystem path to write files to
      --unsafe          enable less safe operations, please backup first

----------------------------------------

TITLE: Hugo Module Clean Command Options in Bash
DESCRIPTION: This snippet lists the available options for the 'hugo mod clean' command, including flags for cleaning the entire module cache, specifying base URL, cache directory, content directory, and more.

LANGUAGE: bash
CODE:
      --all                      clean entire module cache
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for clean
      --pattern string           pattern matching module paths to clean (all if not set), e.g. "**hugo*"
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Hugo Mod Get Inherited Options
DESCRIPTION: Options inherited from parent commands that can be used with 'hugo mod get'. These include various configuration and build-related options.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Custom GoAT Render Hook Template
DESCRIPTION: Hugo template for customizing how GoAT diagrams are rendered, including support for captions and custom classes.

LANGUAGE: go-html-template
CODE:
{{ $caption := or .Attributes.caption "" }}
{{ $class := or .Attributes.class "diagram" }}
{{ $id := or .Attributes.id (printf "diagram-%d" (add 1 .Ordinal)) }}

<figure id="{{ $id }}">
  {{ with diagrams.Goat (trim .Inner "\n\r") }}
    <svg class="{{ $class }}" width="{{ .Width }}" height="{{ .Height }}"  xmlns="http://www.w3.org/2000/svg" version="1.1">
      {{ .Inner }}
    </svg>
  {{ end }}
  <figcaption>{{ $caption }}</figcaption>
</figure>

----------------------------------------

TITLE: Hugo Module Graph Command Options
DESCRIPTION: Available command-line options specific to the 'hugo mod graph' command, including baseURL, cacheDir, and theme settings.

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
      --clean                    delete module cache for dependencies that fail verification
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for graph
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Including Schema Template in Hugo
DESCRIPTION: This code shows how to include Hugo's embedded Schema microdata template in your site's head element.

LANGUAGE: go-html-template
CODE:
{{ template "_internal/schema.html" . }}

----------------------------------------

TITLE: Hugo Doc Generation Options
DESCRIPTION: Available command-specific options for the gen doc command, including directory specification for output files.

LANGUAGE: bash
CODE:
      --dir string   the directory to write the doc. (default "/tmp/hugodoc/")
  -h, --help         help for doc

----------------------------------------

TITLE: Deleting Map Values in hugo.Store
DESCRIPTION: Shows how to remove specific map entries using DeleteInMap

LANGUAGE: go-html-template
CODE:
{{ hugo.Store.SetInMap "greetings" "english" "Hello" }}
{{ hugo.Store.SetInMap "greetings" "french" "Bonjour" }}
{{ hugo.Store.DeleteInMap "greetings" "english" }}
{{ hugo.Store.Get "greetings" }} → map[french:Bonjour]

----------------------------------------

TITLE: Displaying Hugo List Command Options
DESCRIPTION: Shows the available options for the 'hugo list' command. It includes the help option and inherited options from parent commands.

LANGUAGE: shell
CODE:
  -h, --help   help for list

LANGUAGE: shell
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Hugo New Theme Inherited Options
DESCRIPTION: Options inherited from parent commands that can be used with the 'hugo new theme' command. These options provide additional configuration for Hugo's behavior.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Example Mermaid Sequence Diagram
DESCRIPTION: Sample Mermaid sequence diagram showing interaction between Alice and Bob with loop and notes.

LANGUAGE: mermaid
CODE:
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop Healthcheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br/>prevail!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!

----------------------------------------

TITLE: Executing Hugo Server Trust Command in Bash
DESCRIPTION: The basic syntax for running the 'hugo server trust' command. This command installs the local CA in the system trust store, with an option to uninstall it.

LANGUAGE: bash
CODE:
hugo server trust [flags] [args]

----------------------------------------

TITLE: Generated HTML for Home Page Menu
DESCRIPTION: This HTML snippet shows the rendered output of the main menu when viewing the home page. It demonstrates how the active state is applied to the current page.

LANGUAGE: html
CODE:
<nav class="menu">
  <a class="active" aria-current="page" href="/">Home</a>
  <a href="/books/">Books</a>
  <a href="/films/">Films</a>
</nav>

----------------------------------------

TITLE: Hugo List All Command Options
DESCRIPTION: Available command-specific options for the 'hugo list all' command.

LANGUAGE: bash
CODE:
  -h, --help   help for all

----------------------------------------

TITLE: Hugo List Published Command Options
DESCRIPTION: The direct options available for the published command.

LANGUAGE: bash
CODE:
  -h, --help   help for published

----------------------------------------

TITLE: Hugo Environment Command Options in Bash
DESCRIPTION: This snippet shows the available options for the 'hugo env' command. Currently, it only includes the help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for env

----------------------------------------

TITLE: Generating XxHash in Hugo Templates
DESCRIPTION: Demonstrates how to use the hash.XxHash function to generate a 64-bit non-cryptographic hash from a string input. The function takes a string parameter and returns a hexadecimal hash value.

LANGUAGE: go-html-template
CODE:
{{ hash.XxHash "Hello world" }} → c500b0c912b376d8

----------------------------------------

TITLE: Hugo NPM Module Command Options
DESCRIPTION: Available command-specific options for the hugo mod npm command.

LANGUAGE: bash
CODE:
  -h, --help   help for npm

----------------------------------------

TITLE: YAML Front Matter for Hugo Documentation
DESCRIPTION: YAML front matter block defining metadata for a Hugo documentation page about reflect functions. Specifies the title, link title, description and empty categories/keywords arrays.

LANGUAGE: yaml
CODE:
---
title: Reflect functions
linkTitle: reflect
description: Use these functions to determine a value's data type.
categories: []
keywords: []
---

----------------------------------------

TITLE: Basic Hugo Mod Vendor Command Usage
DESCRIPTION: The basic command syntax for vendoring Hugo module dependencies into the _vendor directory.

LANGUAGE: bash
CODE:
hugo mod vendor [flags] [args]

----------------------------------------

TITLE: Using Raw String Literals in Go
DESCRIPTION: Raw string literals are character sequences enclosed between backticks where backslashes have no special meaning and strings can contain newlines. Carriage return characters are automatically discarded from the raw string value. This makes them particularly useful for multiline strings or regex patterns.

LANGUAGE: go
CODE:
`bar`

----------------------------------------

TITLE: Hugo Module Verify Command Options
DESCRIPTION: Available command-line options specific to the verify command

LANGUAGE: bash
CODE:
  -b, --baseURL string           hostname (and path) to the root, e.g. https://spf13.com/
      --cacheDir string          filesystem path to cache directory
      --clean                    delete module cache for dependencies that fail verification
  -c, --contentDir string        filesystem path to content directory
  -h, --help                     help for verify
      --renderSegments strings   named segments to render (configured in the segments config)
  -t, --theme strings            themes to use (located in /themes/THEMENAME/)

----------------------------------------

TITLE: Hugo Page Bundle Directory Structure Example
DESCRIPTION: Demonstrates the typical directory structure of a Hugo page bundle showing different content types and their respective resource types.

LANGUAGE: text
CODE:
content/
└── example/
    ├── index.md  <-- content
    ├── a.adoc    <-- resource (resource type: page)
    ├── b.html    <-- resource (resource type: page)
    ├── c.md      <-- resource (resource type: page)
    ├── d.org     <-- resource (resource type: page)
    ├── e.pdc     <-- resource (resource type: page)
    ├── f.rst     <-- resource (resource type: page)
    ├── g.jpg     <-- resource (resource type: image)
    └── h.png     <-- resource (resource type: image)

----------------------------------------

TITLE: Hugo Completion Powershell Command Options
DESCRIPTION: These are the available options for the 'hugo completion powershell' command. The --help flag provides command help, while --no-descriptions disables completion descriptions.

LANGUAGE: powershell
CODE:
  -h, --help              help for powershell
      --no-descriptions   disable completion descriptions

----------------------------------------

TITLE: Using the Code-Toggle Shortcode for Configuration Examples
DESCRIPTION: Shows how to use the code-toggle shortcode to display site configuration examples with syntax highlighting and copy functionality.

LANGUAGE: text
CODE:
{{</* code-toggle file=hugo copy=true */>}}
baseURL = 'https://example.org/'
languageCode = 'en-US'
title = 'My Site'
{{</* /code-toggle */>}}

----------------------------------------

TITLE: Hugo Gen Chromastyles Command Options
DESCRIPTION: These are the available options for the 'hugo gen chromastyles' command. They allow customization of highlighter style, line number styles, and highlighted line styles.

LANGUAGE: bash
CODE:
  -h, --help                            help for chromastyles
      --highlightStyle string           foreground and background colors for highlighted lines, e.g. --highlightStyle "#fff000 bg:#000fff"
      --lineNumbersInlineStyle string   foreground and background colors for inline line numbers, e.g. --lineNumbersInlineStyle "#fff000 bg:#000fff"
      --lineNumbersTableStyle string    foreground and background colors for table line numbers, e.g. --lineNumbersTableStyle "#fff000 bg:#000fff"
      --style string                    highlighter style (see https://xyproto.github.io/splash/docs/) (default "friendly")

----------------------------------------

TITLE: Markdown Link Structure Example
DESCRIPTION: Demonstrates the three components of a Markdown link: text, destination, and title.

LANGUAGE: text
CODE:
[Post 1](/posts/post-1 "My first post")
 ------  -------------  -------------
  text    destination       title

----------------------------------------

TITLE: Hugo Module Tidy Command Syntax
DESCRIPTION: Basic command syntax for running the hugo mod tidy command with optional flags and arguments.

LANGUAGE: bash
CODE:
hugo mod tidy [flags] [args]

----------------------------------------

TITLE: Specifying Layout in Hugo Front Matter
DESCRIPTION: Shows how to set a custom layout for a specific page using Hugo's front matter in TOML format.

LANGUAGE: toml
CODE:
title = 'Contact'
layout = 'contact'

----------------------------------------

TITLE: Linking to Glossary Terms in Markdown
DESCRIPTION: Demonstrates how to link to glossary terms using Markdown syntax. The links are case-insensitive and support singular and plural forms.

LANGUAGE: text
CODE:
[global resource](g)
[Global Resource](g)
[Global Resources](g)
[`Global Resources`](g)

----------------------------------------

TITLE: Taxonomy Template in Hugo
DESCRIPTION: Template for rendering taxonomy pages showing a list of terms within a taxonomy.

LANGUAGE: go-html-template
CODE:
{{ define "main" }}
  <h1>{{ .Title }}</h1>
  {{ .Content }}
  {{ range .Pages }}
    <h2><a href="{{ .RelPermalink }}">{{ .LinkTitle }}</a></h2>
  {{ end }}
{{ end }}

----------------------------------------

TITLE: Displaying Inherited Hugo Command Options
DESCRIPTION: Lists the options inherited from parent commands, including configuration, build environment, and output settings.

LANGUAGE: shell
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: RSS Feed Metadata Configuration
DESCRIPTION: Configuration for setting copyright and author information in RSS feeds.

LANGUAGE: toml
CODE:
copyright = '© 2023 ABC Widgets, Inc.'
[params.author]
name = 'John Doe'
email = 'jdoe@example.org'

----------------------------------------

TITLE: Getting Output Identifier in Hugo
DESCRIPTION: This property returns the output identifier of the output format. It can be used to uniquely identify different output formats within Hugo.

LANGUAGE: go
CODE:
Name

----------------------------------------

TITLE: Example Front Matter with Param Shortcode Usage
DESCRIPTION: Demonstrates how to use the param shortcode to access front matter parameters in a Hugo content file. Shows front matter definition and shortcode usage to access a color parameter.

LANGUAGE: text
CODE:
---
title: Example
date: 2025-01-15T23:29:46-08:00
params:
  color: red
  size: medium
---

We found a {{%/* param "color" */%}} shirt.

----------------------------------------

TITLE: Retrieving Permalink in Hugo OutputFormat
DESCRIPTION: This property returns the permalink of the page generated by the current output format. It provides the full URL path to the generated content.

LANGUAGE: go
CODE:
Permalink

----------------------------------------

TITLE: Accessing Rel Value in Hugo OutputFormat
DESCRIPTION: This property returns the 'rel' value of the output format, either the default or as defined in the site configuration. It is used for specifying relationships in HTML links.

LANGUAGE: go
CODE:
Rel

----------------------------------------

TITLE: Setting Publish Date in Hugo Front Matter
DESCRIPTION: Demonstrates how to set a page's publish date using TOML front matter in a Hugo content file. The publish date is specified using an ISO 8601 timestamp format.

LANGUAGE: toml
CODE:
title = 'Article 1'
publishDate = 2023-10-19T00:40:04-07:00

----------------------------------------

TITLE: Hugo New Theme Command Options
DESCRIPTION: Available options specific to the 'hugo new theme' command. Currently, it only includes the help flag.

LANGUAGE: bash
CODE:
  -h, --help   help for theme

----------------------------------------

TITLE: Hugo Table of Contents Configuration
DESCRIPTION: Configuration settings for customizing the table of contents behavior, including start level, end level, and ordering options.

LANGUAGE: toml
CODE:
[markup.tableOfContents]
endLevel = 3
ordered = false
startLevel = 2

----------------------------------------

TITLE: Creating AutoOrient Image Filter in Hugo
DESCRIPTION: This snippet demonstrates how to create an AutoOrient image filter using the images.AutoOrient function in Hugo. The filter rotates and flips an image as needed based on its EXIF orientation tag.

LANGUAGE: go-html-template
CODE:
{{ $filter := images.AutoOrient }}

----------------------------------------

TITLE: Printing Hugo Module Dependency Graph
DESCRIPTION: Shows how to use hugo mod graph to print the dependency graph of Hugo Modules, including vendoring, module replacement, and disabled status.

LANGUAGE: sh
CODE:
hugo mod graph

----------------------------------------

TITLE: Implementing a Basic Code Block Render Hook in Hugo
DESCRIPTION: This Go HTML template shows how to create a basic code block render hook that uses Chroma for syntax highlighting.

LANGUAGE: go-html-template
CODE:
{{ $result := transform.HighlightCodeBlock . }}
{{ $result.Wrapped }}

----------------------------------------

TITLE: Hugo New Site Inherited Options
DESCRIPTION: These options are inherited from parent commands and provide additional configuration for Hugo site creation, including setting the clock, specifying config files, and controlling build behavior.

LANGUAGE: bash
CODE:
      --clock string               set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00
      --config string              config file (default is hugo.yaml|json|toml)
      --configDir string           config dir (default "config")
  -d, --destination string         filesystem path to write files to
  -e, --environment string         build environment
      --ignoreVendorPaths string   ignores any _vendor for module paths matching the given Glob pattern
      --logLevel string            log level (debug|info|warn|error)
      --noBuildLock                don't create .hugo_build.lock file
      --quiet                      build in quiet mode
  -M, --renderToMemory             render to memory (mostly useful when running the server)
  -s, --source string              filesystem path to read files relative from
      --themesDir string           filesystem path to themes directory

----------------------------------------

TITLE: Building Slice of Slices from Empty in Hugo Template
DESCRIPTION: Demonstrates how to start with an empty slice and create a slice of slices using the collections.Append function.

LANGUAGE: go-html-template
CODE:
{{ $s := slice }}
{{ $s }} → []

{{ $s = $s | append (slice (slice "a" "b")) }}
{{ $s }} → [[a b]]

{{ $s = $s | append (slice "c" "d") }}
{{ $s }} → [[a b] [c d]]

----------------------------------------

TITLE: Displaying Hugo Content Structure
DESCRIPTION: Shows the directory structure for a Hugo project with weighted pages.

LANGUAGE: text
CODE:
content/
├── pages/
│   ├── _index.md
│   ├── page-1.md   <-- front matter: weight = 10
│   ├── page-2.md   <-- front matter: weight = 20
│   └── page-3.md   <-- front matter: weight = 30
└── _index.md

----------------------------------------

TITLE: Checking Hugo Cache Directory Location
DESCRIPTION: Shell command to determine the current cache directory location used by Hugo

LANGUAGE: sh
CODE:
hugo config | grep cachedir

----------------------------------------

TITLE: Basic Blockquote Render Hook Implementation in Hugo
DESCRIPTION: Simple implementation of a blockquote render hook that follows the CommonMark specification.

LANGUAGE: go-html-template
CODE:
<blockquote>
  {{ .Text }}
</blockquote>