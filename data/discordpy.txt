TITLE: Creating Basic Discord Bot in Python
DESCRIPTION: A minimal Discord bot implementation that responds to '$hello' messages. The bot uses the discord.py library with message_content intent enabled and demonstrates basic event handling for login and message reception.

LANGUAGE: python
CODE:
# This example requires the 'message_content' intent.

import discord

intents = discord.Intents.default()
intents.message_content = True

client = discord.Client(intents=intents)

@client.event
async def on_ready():
    print(f'We have logged in as {client.user}')

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    if message.content.startswith('$hello'):
        await message.channel.send('Hello!')

client.run('your token here')

----------------------------------------

TITLE: Configuring Basic Intents in Discord.py
DESCRIPTION: This snippet demonstrates how to configure basic intents for a Discord bot, disabling typing and presence events. It shows setup for both Client and Bot classes.

LANGUAGE: python
CODE:
import discord
intents = discord.Intents.default()
intents.typing = False
intents.presences = False

# Somewhere else:
# client = discord.Client(intents=intents)
# or
# from discord.ext import commands
# bot = commands.Bot(command_prefix='!', intents=intents)

----------------------------------------

TITLE: Setting Up Client with Required Intents
DESCRIPTION: Example showing how to properly configure intents which are now required when initializing a Discord client

LANGUAGE: python
CODE:
# before
client = discord.Client()

# after
intents = discord.Intents.default()
client = discord.Client(intents=intents)

----------------------------------------

TITLE: Implementing Basic Discord.py Cog with Greetings Commands
DESCRIPTION: Example of a basic Cog class that implements greeting functionality including a member join listener and hello command. Shows proper usage of decorators and state management.

LANGUAGE: python
CODE:
class Greetings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._last_member = None

    @commands.Cog.listener()
    async def on_member_join(self, member):
        channel = member.guild.system_channel
        if channel is not None:
            await channel.send(f'Welcome {member.mention}.')

    @commands.command()
    async def hello(self, ctx, *, member: discord.Member = None):
        """Says hello"""
        member = member or ctx.author
        if self._last_member is None or self._last_member.id != member.id:
            await ctx.send(f'Hello {member.name}~')
        else:
            await ctx.send(f'Hello {member.name}... This feels familiar.')
        self._last_member = member

----------------------------------------

TITLE: Using AsyncIO with Discord.py Client
DESCRIPTION: Example showing how to properly set up the Discord client using asyncio.run() with an async main function in v2.0

LANGUAGE: python
CODE:
client = discord.Client()

async def main():
    # do other async things
    await my_async_function()

    # start the client
    async with client:
        await client.start(TOKEN)

asyncio.run(main())

----------------------------------------

TITLE: Basic Discord Client Implementation
DESCRIPTION: Example showing how to create a basic Discord client that responds to messages using async/await pattern

LANGUAGE: python
CODE:
import discord

class MyClient(discord.Client):
    async def on_ready(self):
        print('Logged on as', self.user)

    async def on_message(self, message):
        # don't respond to ourselves
        if message.author == self.user:
            return

        if message.content == 'ping':
            await message.channel.send('pong')

intents = discord.Intents.default()
intents.message_content = True
client = MyClient(intents=intents)
client.run('token')

----------------------------------------

TITLE: Basic Command Definition
DESCRIPTION: Shows how to define a basic command that responds with the given argument

LANGUAGE: python
CODE:
@bot.command()
async def foo(ctx, arg):
    await ctx.send(arg)

----------------------------------------

TITLE: Implementing a Simple Background Task in a Discord.py Cog
DESCRIPTION: This snippet demonstrates how to create a simple background task that runs every 5 seconds within a Discord.py Cog. It includes proper setup and cleanup methods.

LANGUAGE: python
CODE:
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self):
        self.index = 0
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

----------------------------------------

TITLE: Enabling Members Intent in Discord.py
DESCRIPTION: This code snippet demonstrates how to enable the privileged members intent for a Discord bot. This is necessary for accessing member-related events and data.

LANGUAGE: python
CODE:
import discord
intents = discord.Intents.default()
intents.members = True

# Somewhere else:
# client = discord.Client(intents=intents)
# or
# from discord.ext import commands
# bot = commands.Bot(command_prefix='!', intents=intents)

----------------------------------------

TITLE: Creating a Basic Discord.py Extension
DESCRIPTION: This snippet demonstrates how to create a simple extension with a 'hello' command. The setup function is used to add the command to the bot when the extension is loaded.

LANGUAGE: python
CODE:
from discord.ext import commands

@commands.command()
async def hello(ctx):
    await ctx.send(f'Hello {ctx.author.display_name}.')

async def setup(bot):
    bot.add_command(hello)

----------------------------------------

TITLE: Basic Discord.py Event Handling Example
DESCRIPTION: Python code demonstrating basic Discord bot setup with event handling for login and message events. Requires message_content intent.

LANGUAGE: python
CODE:
# This example requires the 'message_content' intent.

import discord

class MyClient(discord.Client):
    async def on_ready(self):
        print(f'Logged on as {self.user}!')

    async def on_message(self, message):
        print(f'Message from {message.author}: {message.content}')

intents = discord.Intents.default()
intents.message_content = True

client = MyClient(intents=intents)
client.run('my token goes here')

----------------------------------------

TITLE: Registering and Removing Discord.py Cogs
DESCRIPTION: Examples showing how to register a cog with a bot using add_cog() and remove it using remove_cog()

LANGUAGE: python
CODE:
await bot.add_cog(Greetings(bot))

LANGUAGE: python
CODE:
await bot.remove_cog('Greetings')

----------------------------------------

TITLE: Command Registration Methods
DESCRIPTION: Demonstrates two equivalent ways of registering commands using decorators

LANGUAGE: python
CODE:
import discord
from discord.ext import commands

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='$', intents=intents)

@bot.command()
async def test(ctx):
    pass

# or:

@commands.command()
async def test(ctx):
    pass

bot.add_command(test)

----------------------------------------

TITLE: Advanced Logging Configuration in discord.py
DESCRIPTION: This code sets up a rotating file handler for logging in discord.py. It configures DEBUG output for all library output except HTTP requests, which are set to INFO level.

LANGUAGE: python3
CODE:
import discord
import logging
import logging.handlers

logger = logging.getLogger('discord')
logger.setLevel(logging.DEBUG)
logging.getLogger('discord.http').setLevel(logging.INFO)

handler = logging.handlers.RotatingFileHandler(
    filename='discord.log',
    encoding='utf-8',
    maxBytes=32 * 1024 * 1024,  # 32 MiB
    backupCount=5,  # Rotate through 5 files
)
dt_fmt = '%Y-%m-%d %H:%M:%S'
formatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Assume client refers to a discord.Client subclass...
# Suppress the default configuration since we have our own
client.run(token, log_handler=None)

----------------------------------------

TITLE: Handling Exceptions in a Discord.py Background Task
DESCRIPTION: This example shows how to add exception handling to a background task, specifically for database connection errors. It also demonstrates how to use the task within a Cog.

LANGUAGE: python
CODE:
import asyncpg
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.data = []
        self.batch_update.add_exception_type(asyncpg.PostgresConnectionError)
        self.batch_update.start()

    def cog_unload(self):
        self.batch_update.cancel()

    @tasks.loop(minutes=5.0)
    async def batch_update(self):
        async with self.bot.pool.acquire() as con:
            # batch update here...
            pass

----------------------------------------

TITLE: Async Extension Setup
DESCRIPTION: Example showing how to properly set up extensions which must now use async/await

LANGUAGE: python
CODE:
# before
def setup(bot):
    bot.add_cog(MyCog(bot))

# after
async def setup(bot):
    await bot.add_cog(MyCog(bot))

----------------------------------------

TITLE: Creating an Extension with Setup and Teardown Functions
DESCRIPTION: This example demonstrates how to create an extension with both setup and teardown functions. The setup function is called when the extension is loaded, and the teardown function is called when it's unloaded.

LANGUAGE: python
CODE:
async def setup(bot):
    print('I am being loaded!')

async def teardown(bot):
    print('I am being unloaded!')

----------------------------------------

TITLE: Delaying Task Start Until Bot is Ready in Discord.py
DESCRIPTION: This example demonstrates how to use the before_loop decorator to delay the start of a background task until the Discord bot is fully ready. This is useful for tasks that depend on the bot's initial setup.

LANGUAGE: python
CODE:
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.index = 0
        self.bot = bot
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

    @printer.before_loop
    async def before_printer(self):
        print('waiting...')
        await self.bot.wait_until_ready()

----------------------------------------

TITLE: Custom Converter Example
DESCRIPTION: Shows how to create a custom converter that randomly selects a member to slap

LANGUAGE: python
CODE:
import random

class Slapper(commands.Converter):
    async def convert(self, ctx, argument):
        to_slap = random.choice(ctx.guild.members)
        return f'{ctx.author} slapped {to_slap} because *{argument}*'

@bot.command()
async def slap(ctx, *, reason: Slapper):
    await ctx.send(reason)

----------------------------------------

TITLE: Inter-Cog Communication in Discord.py
DESCRIPTION: Example demonstrating how to implement communication between different cogs using get_cog() to share functionality and data

LANGUAGE: python
CODE:
class Economy(commands.Cog):
    ...

    async def withdraw_money(self, member, money):
        # implementation here
        ...

    async def deposit_money(self, member, money):
        # implementation here
        ...

class Gambling(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def coinflip(self):
        return random.randint(0, 1)

    @commands.command()
    async def gamble(self, ctx, money: int):
        """Gambles some money."""
        economy = self.bot.get_cog('Economy')
        if economy is not None:
            await economy.withdraw_money(ctx.author, money)
            if self.coinflip() == 1:
                await economy.deposit_money(ctx.author, money * 1.5)

----------------------------------------

TITLE: Discord Bot Implementation Using Commands Extension
DESCRIPTION: Example demonstrating how to create a Discord bot using the commands extension with a simple ping command

LANGUAGE: python
CODE:
import discord
from discord.ext import commands

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='>', intents=intents)

@bot.command()
async def ping(ctx):
    await ctx.send('pong')

bot.run('token')

----------------------------------------

TITLE: Running Discord Bot on Windows
DESCRIPTION: Command to run the Discord bot Python script on Windows systems using Python 3.

LANGUAGE: shell
CODE:
$ py -3 example_bot.py

----------------------------------------

TITLE: Running Discord Bot on Unix-like Systems
DESCRIPTION: Command to run the Discord bot Python script on Unix-like systems (Linux, macOS) using Python 3.

LANGUAGE: shell
CODE:
$ python3 example_bot.py

----------------------------------------

TITLE: Scheduling a Daily Task at a Specific Time in Discord.py
DESCRIPTION: This example demonstrates how to schedule a task to run at a specific time each day using the tasks.loop decorator with a time parameter. It uses UTC timezone for consistency.

LANGUAGE: python
CODE:
import datetime
from discord.ext import commands, tasks

utc = datetime.timezone.utc

# If no tzinfo is given then UTC is assumed.
time = datetime.time(hour=8, minute=30, tzinfo=utc)

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_task.start()

    def cog_unload(self):
        self.my_task.cancel()

    @tasks.loop(time=time)
    async def my_task(self):
        print("My task is running!")

----------------------------------------

TITLE: Scheduling Multiple Daily Tasks at Specific Times in Discord.py
DESCRIPTION: This snippet shows how to schedule a task to run at multiple specific times each day using the tasks.loop decorator with a list of time objects. It uses UTC timezone for consistency.

LANGUAGE: python
CODE:
import datetime
from discord.ext import commands, tasks

utc = datetime.timezone.utc

# If no tzinfo is given then UTC is assumed.
times = [
    datetime.time(hour=8, tzinfo=utc),
    datetime.time(hour=12, minute=30, tzinfo=utc),
    datetime.time(hour=16, minute=40, second=30, tzinfo=utc)
]

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_task.start()

    def cog_unload(self):
        self.my_task.cancel()

    @tasks.loop(time=times)
    async def my_task(self):
        print("My task is running!")

----------------------------------------

TITLE: Configuring File Logging in discord.py
DESCRIPTION: This snippet demonstrates how to set up a file handler for logging in discord.py. It creates a FileHandler and passes it to the client.run() method.

LANGUAGE: python3
CODE:
import logging

handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')

# Assume client refers to a discord.Client subclass...
client.run(token, log_handler=handler)

----------------------------------------

TITLE: Updated Webhook Implementation
DESCRIPTION: Examples showing the new async and sync webhook implementations after the webhook system rewrite

LANGUAGE: python
CODE:
# Async webhook
async with aiohttp.ClientSession() as session:
    webhook = discord.Webhook.from_url('url-here', session=session)
    await webhook.send('Hello World', username='Foo')

LANGUAGE: python
CODE:
# Sync webhook
webhook = discord.SyncWebhook.partial(123456, 'token-here')
webhook.send('Hello World', username='Foo')

----------------------------------------

TITLE: Using UTC-aware Datetime Objects
DESCRIPTION: Example showing how to handle the change to UTC-aware datetime objects using the new utils.utcnow() helper

LANGUAGE: python
CODE:
# before
week_ago = datetime.datetime.utcnow() - datetime.timedelta(days=7)
if member.created_at > week_ago:
    print(f'Member account {member} was created less than a week ago!')

# after
week_ago = discord.utils.utcnow() - datetime.timedelta(days=7)
if member.created_at > week_ago:
    print(f'Member account {member} was created less than a week ago!')

----------------------------------------

TITLE: Command Context Changes
DESCRIPTION: Demonstrates the new command context handling in v1.0

LANGUAGE: python
CODE:
# before
@bot.command()
async def foo():
    await bot.say('Hello')

# after
@bot.command()
async def foo(ctx):
    await ctx.send('Hello')

----------------------------------------

TITLE: Sending Messages Example
DESCRIPTION: Demonstrates the changes in sending messages between v0.x and v1.0 API

LANGUAGE: python
CODE:
# before
await client.send_message(channel, 'Hello')

# after
await channel.send('Hello')

----------------------------------------

TITLE: Handling Task Cancellation in Discord.py
DESCRIPTION: This snippet shows how to perform cleanup actions when a background task is being cancelled. It uses the after_loop decorator and checks if the cancellation is in progress before performing final actions.

LANGUAGE: python
CODE:
from discord.ext import tasks, commands
import asyncio

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._batch = []
        self.lock = asyncio.Lock()
        self.bulker.start()

    async def cog_unload(self):
        self.bulker.cancel()

    async def do_bulk(self):
        # bulk insert data here
        ...

    @tasks.loop(seconds=10.0)
    async def bulker(self):
        async with self.lock:
            await self.do_bulk()

    @bulker.after_loop
    async def on_bulker_cancel(self):
        if self.bulker.is_being_cancelled() and len(self._batch) != 0:
            # if we're cancelled and we have some data left...
            # let's insert it to our database
            await self.do_bulk()

----------------------------------------

TITLE: Setting Debug Log Level in discord.py
DESCRIPTION: This snippet demonstrates how to set the log level to DEBUG in discord.py. It creates a FileHandler and sets the log_level parameter in client.run().

LANGUAGE: python3
CODE:
import logging

handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')

# Assume client refers to a discord.Client subclass...
client.run(token, log_handler=handler, log_level=logging.DEBUG)

----------------------------------------

TITLE: Creating a Limited-Count Loop in Discord.py
DESCRIPTION: This snippet shows how to create a background task that runs a specific number of times before stopping. It also demonstrates how to use the after_loop decorator to perform actions after the loop ends.

LANGUAGE: python
CODE:
from discord.ext import tasks
import discord

@tasks.loop(seconds=5.0, count=5)
async def slow_count():
    print(slow_count.current_loop)

@slow_count.after_loop
async def after_slow_count():
    print('done!')

class MyClient(discord.Client):
    async def setup_hook(self):
        slow_count.start()

----------------------------------------

TITLE: Discord.py Bot Command Event Handler Example
DESCRIPTION: Example showing how to define a command error event handler with context and error parameters

LANGUAGE: python
CODE:
async def on_command_error(ctx, error):\n    # An error handler called when command errors occur\n    # ctx: The invocation context\n    # error: The error that was raised

----------------------------------------

TITLE: Configuring Minimal Intents in Discord.py
DESCRIPTION: This example shows how to set up minimal intents for a Discord bot that only handles messages and guild information. It includes an optional configuration for reaction events.

LANGUAGE: python
CODE:
import discord
intents = discord.Intents(messages=True, guilds=True)
# If you also want reaction events enable the following:
# intents.reactions = True

# Somewhere else:
# client = discord.Client(intents=intents)
# or
# from discord.ext import commands
# bot = commands.Bot(command_prefix='!', intents=intents)

----------------------------------------

TITLE: Using discord.utils.setup_logging() in discord.py
DESCRIPTION: This snippet demonstrates how to use the setup_logging() utility function to configure logging without using client.run().

LANGUAGE: python3
CODE:
import discord

discord.utils.setup_logging()

# or, for example
discord.utils.setup_logging(level=logging.INFO, root=False)

----------------------------------------

TITLE: Using Coroutines in Discord.py v0.10.0
DESCRIPTION: Illustrates how to use coroutines in Discord.py v0.10.0. Most Client functions are now coroutines and must be awaited or yielded from.

LANGUAGE: python
CODE:
client.send_message(message.channel, 'Hello')

LANGUAGE: python
CODE:
yield from client.send_message(message.channel, 'Hello')

# or in python 3.5+
await client.send_message(message.channel, 'Hello')

----------------------------------------

TITLE: File Upload Changes
DESCRIPTION: Shows how file uploads have changed to support multiple attachments

LANGUAGE: python
CODE:
# before
await client.send_file(channel, 'cool.png', filename='testing.png', content='Hello')

# after
await channel.send('Hello', file=discord.File('cool.png', 'testing.png'))

----------------------------------------

TITLE: Reloading a Discord.py Extension
DESCRIPTION: This snippet shows how to reload an extension in Discord.py. This is useful for applying changes to an extension without restarting the bot.

LANGUAGE: python
CODE:
>>> await bot.reload_extension('hello')

----------------------------------------

TITLE: Creating Virtual Environment for Discord.py
DESCRIPTION: Shell commands for creating and activating a Python virtual environment for discord.py project isolation.

LANGUAGE: shell
CODE:
$ cd your-bot-source
$ python3 -m venv bot-env

LANGUAGE: shell
CODE:
$ source bot-env/bin/activate

LANGUAGE: shell
CODE:
$ pip install -U discord.py

----------------------------------------

TITLE: Updating Event Registration in Discord.py
DESCRIPTION: Shows how to update event registration to use coroutines in Discord.py v0.10.0. Events must now be decorated with @asyncio.coroutine or use async def syntax.

LANGUAGE: python
CODE:
@client.event
def on_message(message):
    pass

LANGUAGE: python
CODE:
@client.event
@asyncio.coroutine
def on_message(message):
    pass

LANGUAGE: python
CODE:
@client.event
async def on_message(message):
    pass

LANGUAGE: python
CODE:
@client.async_event
def on_message(message):
    pass

----------------------------------------

TITLE: Updated Event Signatures in Discord.py v0.10.0
DESCRIPTION: Demonstrates the changes to event signatures in Discord.py v0.10.0. Many update events now provide before and after states for context.

LANGUAGE: python
CODE:
def on_channel_update(channel): pass
def on_member_update(member): pass
def on_status(member): pass
def on_server_role_update(role): pass
def on_voice_state_update(member): pass
def on_socket_raw_send(payload, is_binary): pass

LANGUAGE: python
CODE:
def on_channel_update(before, after): pass
def on_member_update(before, after): pass
def on_server_role_update(before, after): pass
def on_voice_state_update(before, after): pass
def on_socket_raw_send(payload): pass

----------------------------------------

TITLE: Handling Iterables in Discord.py v0.10.0
DESCRIPTION: Shows how to work with iterables that were previously lists in Discord.py v0.10.0. Some attributes now only support iteration and not sequence operations.

LANGUAGE: python
CODE:
if client.servers[0].name == "test":
    # do something

LANGUAGE: python
CODE:
servers = list(client.servers)
# work with servers

----------------------------------------

TITLE: Custom Cog Implementation
DESCRIPTION: Example of implementing a custom cog with special methods in v1.0

LANGUAGE: python
CODE:
class MyCog(commands.Cog, name='Example Cog'):
    def cog_unload(self):
        print('cleanup goes here')

    def bot_check(self, ctx):
        print('bot check')
        return True

    def bot_check_once(self, ctx):
        print('bot check once')
        return True

    async def cog_check(self, ctx):
        print('cog local check')
        return await ctx.bot.is_owner(ctx.author)

    async def cog_command_error(self, ctx, error):
        print('Error in {0.command.qualified_name}: {1}'.format(ctx, error))

    async def cog_before_invoke(self, ctx):
        print('cog local before: {0.command.qualified_name}'.format(ctx))

    async def cog_after_invoke(self, ctx):
        print('cog local after: {0.command.qualified_name}'.format(ctx))

    @commands.Cog.listener()
    async def on_message(self, message):
        pass

----------------------------------------

TITLE: Importing Discord Commands Extension in Python
DESCRIPTION: Shows the module path for importing the Discord bot commands framework. This module provides higher-level abstractions for bot command handling.

LANGUAGE: python
CODE:
discord.ext.commands

----------------------------------------

TITLE: Customizing Discord.py Cog Name
DESCRIPTION: Example showing how to customize a cog's name using meta options through the CogMeta metaclass

LANGUAGE: python
CODE:
class MyCog(commands.Cog, name='My Cog'):
    pass

----------------------------------------

TITLE: Discord.py Bucket Type Enum
DESCRIPTION: Enum defining different bucket types for command cooldowns and other rate limits

LANGUAGE: python
CODE:
class BucketType:\n    default   # Global bucket\n    user      # Per-user bucket\n    guild     # Per-guild bucket\n    channel   # Per-channel bucket\n    member    # Per-member bucket\n    category  # Per-category bucket\n    role      # Per-role bucket

----------------------------------------

TITLE: Disabling Default Logging Configuration in discord.py
DESCRIPTION: This code shows how to disable the default logging configuration in discord.py by passing None to the log_handler parameter in client.run().

LANGUAGE: python3
CODE:
client.run(token, log_handler=None)

----------------------------------------

TITLE: Configuring Root Logger in discord.py
DESCRIPTION: This code shows how to apply the logging configuration to all loggers by setting root_logger=True in client.run().

LANGUAGE: python3
CODE:
client.run(token, log_handler=handler, root_logger=True)

----------------------------------------

TITLE: Using Enumerations in Discord.py v0.10.0
DESCRIPTION: Demonstrates the use of enumerations for server region, member status, and channel type in Discord.py v0.10.0.

LANGUAGE: python
CODE:
server.region == 'us-west'
member.status == 'online'
channel.type == 'text'

LANGUAGE: python
CODE:
server.region == discord.ServerRegion.us_west
member.status = discord.Status.online
channel.type == discord.ChannelType.text

----------------------------------------

TITLE: Running the Client in Discord.py v0.10.0
DESCRIPTION: Shows how to run the Discord.py client in v0.10.0. The run method now handles the event loop and requires passing credentials.

LANGUAGE: python
CODE:
client.login('token')
client.run()

LANGUAGE: python
CODE:
client.run('token')

LANGUAGE: python
CODE:
import discord
import asyncio

client = discord.Client()

@asyncio.coroutine
def main_task():
    yield from client.login('token')
    yield from client.connect()

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main_task())
except:
    loop.run_until_complete(client.logout())
finally:
    loop.close()

----------------------------------------

TITLE: Installing Discord.py Package
DESCRIPTION: Shell commands for installing discord.py with and without voice support on different operating systems

LANGUAGE: sh
CODE:
# Linux/macOS
python3 -m pip install -U discord.py

# Windows
py -3 -m pip install -U discord.py

LANGUAGE: sh
CODE:
# Linux/macOS
python3 -m pip install -U "discord.py[voice]"

# Windows
py -3 -m pip install -U discord.py[voice]

LANGUAGE: sh
CODE:
$ git clone https://github.com/Rapptz/discord.py
$ cd discord.py
$ python3 -m pip install -U .[voice]

----------------------------------------

TITLE: Installing Discord.py Dependencies on Debian
DESCRIPTION: Shell command for installing required system dependencies for discord.py voice support on Debian-based systems.

LANGUAGE: shell
CODE:
$ apt install libffi-dev libnacl-dev python3-dev

----------------------------------------

TITLE: Defining Dependencies for Discord.py
DESCRIPTION: Specifies required external package dependencies with version constraints. Requires aiohttp version 3.7.4 or higher but less than version 4, and audioop-lts for Python versions 3.13 and above.

LANGUAGE: plaintext
CODE:
aiohttp>=3.7.4,<4
audioop-lts; python_version>='3.13'

----------------------------------------

TITLE: RST Documentation Structure
DESCRIPTION: Sphinx documentation structure showing the toctree directives and organization of the discord.py documentation

LANGUAGE: rst
CODE:
.. toctree::
  :maxdepth: 1

  ext/commands/index.rst
  ext/tasks/index.rst

.. toctree::
  :maxdepth: 1

  api
  interactions/api
  discord.ext.commands API Reference <ext/commands/api.rst>
  discord.ext.tasks API Reference <ext/tasks/index.rst>

.. toctree::
  :maxdepth: 1

  whats_new
  version_guarantees
  migrating