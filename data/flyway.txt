TITLE: Complete Flyway Configuration Reference
DESCRIPTION: Comprehensive example showing all possible Flyway configuration parameters with detailed comments explaining each option.

LANGUAGE: properties
CODE:
# JDBC url to use to connect to the database
flyway.locations=filesystem:sql

# And many more configuration options...
# See full example in original content

----------------------------------------

TITLE: Configuring Flyway Maven Plugin in pom.xml
DESCRIPTION: XML configuration for integrating Flyway and H2 database into the project's pom.xml. This sets up the Flyway Maven plugin with the necessary configuration and dependencies.

LANGUAGE: xml
CODE:
<project xmlns="...">
    ...
    <build>
        <plugins>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>{{ site.flywayVersion }}</version>
                <configuration>
                    <url>jdbc:h2:file:./target/foobar</url>
                    <user>sa</user>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>1.4.197</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>

----------------------------------------

TITLE: Configuring AWS IAM Authentication for Flyway with MySQL RDS
DESCRIPTION: This snippet demonstrates how to configure Flyway to use AWS IAM authentication with an Amazon RDS MySQL instance. It shows how to set the JDBC URL and use an IAM authentication token as the password.

LANGUAGE: properties
CODE:
flyway.url=jdbc:mysql://<RDS_INSTANCE_HOSTNAME>:<RDS_INSTANCE_PORT>
flyway.user=<database_user>
flyway.password=<AuthToken>

----------------------------------------

TITLE: Creating Initial Database Migration SQL
DESCRIPTION: SQL script for the first database migration, creating a PERSON table. This migration is placed in the src/main/resources/db/migration directory with a specific naming convention.

LANGUAGE: sql
CODE:
create table PERSON (
    ID int not null,
    NAME varchar(100) not null
);

----------------------------------------

TITLE: Integrating Flyway API in Java Application
DESCRIPTION: Demonstrates how to use the Flyway API in a Java application to configure the database connection and initiate migration.

LANGUAGE: java
CODE:
package foobar;

import org.flywaydb.core.Flyway;

public class App {
    public static void main(String[] args) {
        // Create the Flyway instance and point it to the database
        Flyway flyway = Flyway.configure().dataSource("jdbc:h2:file:./target/foobar", "sa", null).load();

        // Start the migration
        flyway.migrate();
    }
}

----------------------------------------

TITLE: Programmatic Configuration of Flyway in Java
DESCRIPTION: Demonstrates how to configure and use Flyway programmatically in a Java application. It shows setting up a datasource and executing a migration.

LANGUAGE: Java
CODE:
import org.flywaydb.core.Flyway;

...
Flyway flyway = Flyway.configure().dataSource(url, user, password).load();
flyway.migrate();

// Start the rest of the application (incl. Hibernate)
...

----------------------------------------

TITLE: Java API Configuration Example
DESCRIPTION: Example of configuring Flyway using the Java API

LANGUAGE: java
CODE:
Flyway.configure().url("jdbc:h2:mem:flyway").load()

----------------------------------------

TITLE: Adding Data Insertion SQL Migration for Flyway
DESCRIPTION: Illustrates a second SQL migration script that inserts sample data into the 'PERSON' table created by the first migration.

LANGUAGE: sql
CODE:
insert into PERSON (ID, NAME) values (1, 'Axel');
insert into PERSON (ID, NAME) values (2, 'Mr. Foo');
insert into PERSON (ID, NAME) values (3, 'Ms. Bar');

----------------------------------------

TITLE: Java-based Migration Example
DESCRIPTION: Sample Java class implementing a versioned migration that inserts data into a table.

LANGUAGE: java
CODE:
package db.migration;

import org.flywaydb.core.api.migration.BaseJavaMigration;
import org.flywaydb.core.api.migration.Context;
import java.sql.PreparedStatement;

/**
 * Example of a Java-based migration.
 */
public class V1_2__Another_user extends BaseJavaMigration {
    public void migrate(Context context) throws Exception {
        try (PreparedStatement statement =
                 context
                     .getConnection()
                     .prepareStatement("INSERT INTO test_user (name) VALUES ('Obelix')")) {
            statement.execute();
        }
    }
}

----------------------------------------

TITLE: Creating Tables and Inserting Data in SQL
DESCRIPTION: Example of a SQL-based versioned migration that creates a table, alters another table, and inserts data.

LANGUAGE: sql
CODE:
CREATE TABLE car (
    id INT NOT NULL PRIMARY KEY,
    license_plate VARCHAR NOT NULL,
    color VARCHAR NOT NULL
);

ALTER TABLE owner ADD driver_license_id VARCHAR;

INSERT INTO brand (name) VALUES ('DeLorean');

----------------------------------------

TITLE: Implementing Flyway Callback Interface
DESCRIPTION: This snippet shows the Callback interface that must be implemented to handle Flyway lifecycle events. It includes methods for determining event support, transaction handling, and event handling.

LANGUAGE: java
CODE:
package org.flywaydb.core.api.callback;

/**
 * This is the main callback interface that should be implemented to handle Flyway lifecycle events.
 */
public interface Callback {
    /**
     * Whether this callback supports this event or not. This is primarily meant as a way to optimize event handling
     * by avoiding unnecessary connection state setups for events that will not be handled anyway.
     *
     * @param event   The event to check.
     * @param context The context for this event.
     * @return {@code true} if it can be handled, {@code false} if not.
     */
    boolean supports(Event event, Context context);

    /**
     * Whether this event can be handled in a transaction or whether it must be handled outside a transaction instead.
     * In the vast majority of the cases the answer will be
     * {@code true}. Only in the rare cases where non-transactional statements are executed should this return {@code false}.
     * This method is called before {@link #handle(Event, Context)} in order to determine in advance whether a transaction
     * can be used or not.
     *
     * @param event   The event to check.
     * @param context The context for this event.
     * @return {@code true} if it can be handled within a transaction (almost all cases). {@code false} if it must be
     * handled outside a transaction instead (very rare).
     */
    boolean canHandleInTransaction(Event event, Context context);

    /**
     * Handles this Flyway lifecycle event.
     *
     * @param event   The event to handle.
     * @param context The context for this event.
     */
    void handle(Event event, Context context);

    /**
     * The callback name, Flyway will use this to sort the callbacks alphabetically before executing them
     * @return The callback name
     */
    String getCallbackName();
}

----------------------------------------

TITLE: Configuring Flyway Migration Options in Properties File
DESCRIPTION: A comprehensive sample configuration for Flyway migration, including database connection details, schema management, migration file locations, and various execution options.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.defaultSchema=schema1
flyway.schemas=schema1,schema2,schema3
flyway.createSchemas=true
flyway.table=schema_history
flyway.tablespace=my_tablespace
flyway.locations=classpath:com.mycomp.migration,database/migrations,filesystem:/sql-migrations,s3:migrationsBucket,gcs:migrationsBucket
flyway.sqlMigrationPrefix=Migration-
flyway.undoSqlMigrationPrefix=downgrade
flyway.repeatableSqlMigrationPrefix=RRR
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb
flyway.stream=true
flyway.batch=true
flyway.encoding=ISO-8859-1
flyway.placeholderReplacement=true
flyway.placeholders.aplaceholder=value
flyway.placeholders.otherplaceholder=value123
flyway.placeholderPrefix=#[
flyway.placeholderSuffix=]
flyway.resolvers=com.mycomp.project.CustomResolver,com.mycomp.project.AnotherResolver
flyway.skipDefaultCallResolvers=false
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.target=5.1
flyway.outOfOrder=false
flyway.outputQueryResults=false
flyway.validateOnMigrate=true
flyway.cleanOnValidationError=false
flyway.mixed=false
flyway.group=false
flyway.cleanDisabled=false
flyway.baselineOnMigrate=false
flyway.installedBy=my-user
flyway.errorOverrides=99999:17110:E,42001:42001:W
flyway.dryRunOutput=/my/sql/dryrun-outputfile.sql
flyway.lockRetryCount=10
flyway.oracle.sqlplus=true
flyway.oracle.sqlplusWarn=true
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Creating Table and Inserting Data in H2 SQL
DESCRIPTION: This SQL snippet demonstrates creating a table, inserting data with placeholders, and using delimited strings in H2. It showcases single-line and multi-line comments, as well as SQL-style comments.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL PRIMARY KEY
);

/*
Multi-line
comment
*/

-- Sql-style comment

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');
INSERT INTO test_user (name) VALUES ( $$'Mr. Semicolon+Linebreak;
another line'$$);

----------------------------------------

TITLE: Configuring Flyway API with Fluent Style in Java
DESCRIPTION: Demonstrates the new fluent configuration style for the Flyway API introduced in version 5.2.0. Shows both multi-line and single-line configuration patterns for database migrations.

LANGUAGE: java
CODE:
Flyway flyway = Flyway.configure().dataSource(url, user, password).load();
flyway.migrate();

LANGUAGE: java
CODE:
Flyway.configure().dataSource(url, user, password).load().migrate();

----------------------------------------

TITLE: Configuring Flyway Properties
DESCRIPTION: Sets up the Flyway configuration in the flyway.conf file, specifying the database URL, user, and password for an H2 database.

LANGUAGE: properties
CODE:
flyway.url=jdbc:h2:file:./foobardb
flyway.user=SA
flyway.password=

----------------------------------------

TITLE: Configuring HashiCorp Vault for Flyway
DESCRIPTION: Example configuration for integrating Flyway with HashiCorp Vault, including the Vault URL, token, and secret paths.

LANGUAGE: properties
CODE:
flyway.plugins.vault.url=http://localhost:8200/v1/
flyway.plugins.vault.token=s.abcdefghijklmnopqrstuvwx
flyway.plugins.vault.secrets=kv/test/1/config,kv/data/test/2/config

----------------------------------------

TITLE: PostgreSQL Migration Script Example
DESCRIPTION: Example SQL migration script demonstrating PostgreSQL-specific features including single/multi-line comments, functions with $$ escapes, placeholders, and COPY FROM STDIN syntax.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL PRIMARY KEY
);


/*
Multi-line
comment
*/

-- Multi-statement PostgreSQL function
CREATE FUNCTION AddData() RETURNS INTEGER
AS $$
   BEGIN
    INSERT INTO test_data (value) VALUES ('Hello');
    RETURN 1;
  END;
$$ LANGUAGE plpgsql;

SELECT *  INTO TEMP adddata_temp_table FROM AddData() ;

-- Single-statement PostgreSQL function
CREATE FUNCTION add(integer, integer) RETURNS integer
   LANGUAGE sql IMMUTABLE STRICT
   AS $_$select $1 + $2;$_$;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

-- COPY ... FROM STDIN
COPY copy_test (c1, c2, c3) FROM stdin;
1	utf8: ümlaute: äüß	NaN
2	\N	123
3	text	123.234444444444449
\.

----------------------------------------

TITLE: Implementing Java-based Migration for Data Anonymization
DESCRIPTION: This Java class implements a Flyway migration that anonymizes data in the 'person' table. It extends BaseJavaMigration and overrides the migrate method to update each person's name with an anonymized version.

LANGUAGE: java
CODE:
package db.migration;

import org.flywaydb.core.api.migration.BaseJavaMigration;
import org.flywaydb.core.api.migration.Context;

import java.sql.ResultSet;
import java.sql.Statement;

public class V3__Anonymize extends BaseJavaMigration {
    public void migrate(Context context) throws Exception {
        try (Statement select = context.getConnection().createStatement()) {
            try (ResultSet rows = select.executeQuery("SELECT id FROM person ORDER BY id")) {
                while (rows.next()) {
                    int id = rows.getInt(1);
                    String anonymizedName = "Anonymous" + id;
                    try (Statement update = context.getConnection().createStatement()) {
                        update.execute("UPDATE person SET name='" + anonymizedName + "' WHERE id=" + id);
                    }
                }
            }
        }
    }
}

----------------------------------------

TITLE: Comprehensive Flyway Maven Plugin Configuration
DESCRIPTION: Complete XML configuration example for Flyway Maven plugin showing all available options including database connection details, schema configurations, migration locations, and various behavioral settings

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <createSchemas>true</createSchemas>
    <table>schema_history</table>
    <tablespace>my_tablespace</tablespace>
    <locations>
        <location>classpath:migrations1</location>
        <location>migrations2</location>
        <location>filesystem:/sql-migrations</location>
        <location>s3:migrationsBucket</location>
        <location>gcs:migrationsBucket</location>
    </locations>
    <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>
    <undoSqlMigrationPrefix>downgrade</undoSqlMigrationPrefix>
    <repeatableSqlMigrationPrefix>RRR</repeatableSqlMigrationPrefix>
    <sqlMigrationSeparator>__</sqlMigrationSeparator>
    <sqlMigrationSuffixes>
        <sqlMigrationSuffix>.sql</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkg</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkb</sqlMigrationSuffix>
    </sqlMigrationSuffixes>
    <stream>true</stream>
    <batch>true</batch>
    <encoding>ISO-8859-1</encoding>
    <placeholderReplacement>true</placeholderReplacement>
    <placeholders>
        <aplaceholder>value</aplaceholder>
        <otherplaceholder>value123</otherplaceholder>
    </placeholders>
    <placeholderPrefix>#[</placeholderPrefix>
    <placeholderSuffix>]</placeholderSuffix>
    <resolvers>
        <resolver>com.mycompany.project.CustomResolver</resolver>
        <resolver>com.mycompany.project.AnotherResolver</resolver>
    </resolvers>
    <skipDefaultResolvers>false</skipDefaultResolvers>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <target>1.1</target>
    <outOfOrder>false</outOfOrder>
    <outputQueryResults>false</outputQueryResults>
    <validateOnMigrate>true</validateOnMigrate>
    <cleanOnValidationError>false</cleanOnValidationError>
    <mixed>false</mixed>
    <group>false</group>
    <cleanDisabled>false</cleanDisabled>
    <baselineOnMigrate>false</baselineOnMigrate>
    <baselineVersion>5</baselineVersion>
    <baselineDescription>Let's go!</baselineDescription>
    <installedBy>my-user</installedBy>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <errorOverrides>
        <errorOverride>99999:17110:E</errorOverride>
        <errorOverride>42001:42001:W</errorOverride>
    </errorOverrides>
    <dryRunOutput>/my/sql/dryrun-outputfile.sql</dryRunOutput>
    <lockRetryCount>10</lockRetryCount>
    <oracle.sqlplus>true</oracle.sqlplus>
    <oracle.sqlplusWarn>true</oracle.sqlplusWarn>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Installing Flyway Community Edition Plugin in Gradle
DESCRIPTION: Basic plugin installation configuration for Flyway Community Edition in build.gradle

LANGUAGE: groovy
CODE:
plugins {
    id "org.flywaydb.flyway" version "{{ site.flywayVersion }}"
}

----------------------------------------

TITLE: Adding Flyway and H2 Dependencies to Maven POM
DESCRIPTION: Configures the project's pom.xml to include Flyway core and H2 database dependencies for database migration functionality.

LANGUAGE: xml
CODE:
<project xmlns="...">
    ...
    <dependencies>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>{{ site.flywayVersion }}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.197</version>
        </dependency>
        ...
    </dependencies>
    ...
</project>

----------------------------------------

TITLE: SQLite Sample Migration Script
DESCRIPTION: Example SQL migration script demonstrating table creation, comments, placeholder usage, and trigger definition in SQLite syntax. Shows various comment styles and SQL statement formats supported by SQLite in Flyway migrations.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  value VARCHAR(25) NOT NULL PRIMARY KEY
);

/*
Multi-line
comment
*/

-- Sql-style comment

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

CREATE TRIGGER update_customer_address UPDATE OF address ON customers
  BEGIN
    UPDATE orders SET address = new.address WHERE customer_name = old.name;
  END;

----------------------------------------

TITLE: Defining Baseline Migration in SQL for Flyway
DESCRIPTION: Example of creating a baseline migration script in Flyway. The script B3__create_table.sql represents the cumulative state of the database after applying three previous migrations, simplifying the migration process for new environments.

LANGUAGE: sql
CODE:
B3__create_table.sql

----------------------------------------

TITLE: Configuring Flyway Migration in Gradle
DESCRIPTION: This snippet demonstrates how to configure the Flyway migration task in a Gradle build file. It includes various configuration options such as database connection details, schema settings, migration file locations, and advanced options like callbacks and resolvers.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'org.hsqldb.jdbcDriver'
    url = 'jdbc:hsqldb:file:/db/flyway_sample;shutdown=true'
    user = 'SA'
    password = 'mySecretPwd'
    connectRetries = 10
    initSql = 'SET ROLE \'myuser\''
    schemas = ['schema1', 'schema2', 'schema3']
    createSchemas=true
    table = 'schema_history'
    tablespace = 'my_tablespace'
    locations = ['classpath:migrations', 'classpath:db/pkg', 'filesystem:/sql-migrations', 's3:migrationsBucket', 'gcs:migrationsBucket']
    sqlMigrationPrefix = 'Migration-'
    undoSqlMigrationPrefix = 'downgrade'
    repeatableSqlMigrationPrefix = 'RRR'
    sqlMigrationSeparator = '__'
    sqlMigrationSuffixes = ['.sql', '.pkg', '.pkb']
    stream = true
    batch = true
    encoding = 'ISO-8859-1'
    placeholderReplacement = true
    placeholders = [
        'aplaceholder' : 'value',
        'otherplaceholder' : 'value123'
    ]
    placeholderPrefix = '#['
    placeholderSuffix = ']'
    resolvers = ['com.mycompany.proj.CustomResolver', 'com.mycompany.proj.AnotherResolver']
    skipDefaultResolvers = false
    callbacks = ['com.mycompany.proj.CustomCallback', 'com.mycompany.proj.AnotherCallback']
    skipDefaultCallbacks = false
    target = '1.1'
    outOfOrder = false
    outputQueryResults = false
    validateOnMigrate = true
    cleanOnValidationError = false
    mixed = false
    group = false
    cleanDisabled = false
    baselineOnMigrate = false
    baselineVersion = 5
    baselineDescription = "Let's go!"
    installedBy = "my-user"
    errorOverrides = ['99999:17110:E', '42001:42001:W']
    dryRunOutput = '/my/sql/dryrun-outputfile.sql'
    lockRetryCount = 10
    oracleSqlplus = true 
    oracleSqlplusWarn = true 
    workingDirectory = 'C:/myproject'
    jdbcProperties = [
      'someProperty' : 'someValue',
      'someOtherProperty' : 'someOtherValue'
    ]
}

----------------------------------------

TITLE: Configuring Flyway Dependency in Maven POM
DESCRIPTION: Demonstrates how to add the Flyway Core dependency to a Maven project's pom.xml file.

LANGUAGE: XML
CODE:
<dependencies>
    ...
    <dependency>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-core</artifactId>
        <version>{{ site.flywayVersion }}</version>
    </dependency>
    ...
</dependencies>

----------------------------------------

TITLE: Executing Flyway Migrate Command
DESCRIPTION: Demonstrates how to run the Flyway migrate command from the command line to apply database migrations.

LANGUAGE: console
CODE:
flyway-{{ site.flywayVersion }}> flyway migrate

----------------------------------------

TITLE: Creating Initial SQL Migration for Person Table
DESCRIPTION: Defines the first SQL migration (V1__Create_person_table.sql) to create a PERSON table with ID and NAME columns.

LANGUAGE: sql
CODE:
create table PERSON (
    ID int not null,
    NAME varchar(100) not null
);

----------------------------------------

TITLE: Configuring Flyway Clean Task in Gradle
DESCRIPTION: Configuration block for the Flyway Clean task in Gradle that specifies database connection details, schemas, callbacks, and other settings. Includes essential parameters like driver, URL, credentials, and advanced options like connection retries and custom callbacks.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'org.hsqldb.jdbcDriver'
    url = 'jdbc:hsqldb:file:/db/flyway_sample;shutdown=true'
    user = 'SA'
    password = 'mySecretPwd'
    connectRetries = 10
    initSql = 'SET ROLE \'myuser\''
    schemas = ['schema1', 'schema2', 'schema3']
    callbacks = ['com.mycompany.proj.CustomCallback', 'com.mycompany.proj.AnotherCallback']
    skipDefaultCallbacks = false
    cleanDisabled = false
    workingDirectory = 'C:/myproject'
    jdbcProperties = [
      'someProperty' : 'someValue',
      'someOtherProperty' : 'someOtherValue'
    ]
}

----------------------------------------

TITLE: Installing Flyway Docker Image
DESCRIPTION: Commands to install and set up Flyway using Docker images on Linux and other platforms.

LANGUAGE: bash
CODE:
sudo sh -c 'echo "docker run --rm flyway/flyway:{{site.flywayVersion}} $*" > /usr/local/bin/flyway && chmod +x /usr/local/bin/flyway'

LANGUAGE: bash
CODE:
docker pull flyway/flyway:{{site.flywayVersion}}

----------------------------------------

TITLE: Creating or Replacing a View in SQL
DESCRIPTION: Example of a SQL-based repeatable migration that creates or replaces a view.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW blue_cars AS
    SELECT id, license_plate FROM cars WHERE color='blue';

----------------------------------------

TITLE: Identifying Drift in Flyway Check Report using Bash and jq
DESCRIPTION: Bash script using jq to parse the JSON output of Flyway Check and determine if drift has been detected in the most recent drift report.

LANGUAGE: bash
CODE:
jq --exit-status '[.individualResults[] | select(.operation=="drift") | .driftDetected ] | .[-1] | not' "check_report.json"

----------------------------------------

TITLE: PostgreSQL JDBC Connection URL Format
DESCRIPTION: Demonstrates the JDBC URL format for connecting to PostgreSQL databases with optional SSL support.

LANGUAGE: text
CODE:
jdbc:postgresql://<host>:<port>/<database>?user=myUsername&password=myPassword&<key1>=<value1>&<key2>=<value2>...

----------------------------------------

TITLE: Configuring Flyway in Spring XML
DESCRIPTION: Illustrates how to set up Flyway in a Spring application using XML bean configuration. It includes setting up the Flyway bean and ensuring it runs before other database-dependent beans.

LANGUAGE: XML
CODE:
<bean id="flywayConfig" class="org.flywaydb.core.api.configuration.ClassicConfiguration">
    <property name="dataSource" ref="..."/>
    ...
</bean>

<bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate">
    <constructor-arg ref="flywayConfig"/>
</bean>

<!-- The rest of the application (incl. Hibernate) -->
<!-- Must be run after Flyway to ensure the database is compatible with the code -->
<bean id="sessionFactory" class="..." depends-on="flyway">
    ...
</bean>

----------------------------------------

TITLE: Sample Maven Flyway Migration Output
DESCRIPTION: Example console output showing successful execution of Flyway migrations through Maven, including compilation and migration steps with version tracking

LANGUAGE: console
CODE:
> mvn compile flyway:migrate

[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [flyway:migrate {execution: default-cli}]
[INFO] Current schema version: 0
[INFO] Migrating to version 1
[INFO] Migrating to version 1.1
[INFO] Migrating to version 1.2
[INFO] Migrating to version 1.3
[INFO] Successfully applied 4 migrations (execution time 00:00.091s).

----------------------------------------

TITLE: Configuring Flyway Maven Plugin for Validation
DESCRIPTION: Comprehensive XML configuration example for the Flyway Maven plugin showing all available validation options including database connection settings, migration locations, and custom resolvers

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <table>schema_history</table>
    <locations>
        <location>classpath:migrations1</location>
        <location>migrations2</location>
        <location>filesystem:/sql-migrations</location>
        <location>s3:migrationsBucket</location>
        <location>gcs:migrationsBucket</location>    
    </locations>
    <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>
    <undoSqlMigrationPrefix>downgrade</undoSqlMigrationPrefix>
    <repeatableSqlMigrationPrefix>RRR</repeatableSqlMigrationPrefix>
    <sqlMigrationSeparator>__</sqlMigrationSeparator>
    <sqlMigrationSuffixes>
        <sqlMigrationSuffix>.sql</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkg</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkb</sqlMigrationSuffix>
    </sqlMigrationSuffixes>
    <encoding>ISO-8859-1</encoding>
    <placeholderReplacement>true</placeholderReplacement>
    <placeholders>
        <aplaceholder>value</aplaceholder>
        <otherplaceholder>value123</otherplaceholder>
    </placeholders>
    <placeholderPrefix>#[</placeholderPrefix>
    <placeholderSuffix>]</placeholderSuffix>
    <resolvers>
        <resolver>com.mycompany.project.CustomResolver</resolver>
        <resolver>com.mycompany.project.AnotherResolver</resolver>
    </resolvers>
    <skipDefaultResolvers>false</skipDefaultResolvers>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <target>1.1</target>
    <outOfOrder>false</outOfOrder>
    <cleanOnValidationError>false</cleanOnValidationError>
    <oracle.sqlplus>true</oracle.sqlplus>
    <oracle.sqlplusWarn>true</oracle.sqlplusWarn>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Running Code Check in Flyway Teams
DESCRIPTION: Command to execute code quality checks in Flyway Teams, generating HTML and JSON reports.

LANGUAGE: shell
CODE:
flyway check -code -check.reportFilename=report.html -url=jdbc:postgresql://...

----------------------------------------

TITLE: Configuring Flyway with Spring-instantiated Java Migrations
DESCRIPTION: This snippet demonstrates how to configure Flyway to use Java-based migrations that are instantiated as Spring beans. It uses the ApplicationContext to retrieve all JavaMigration beans and adds them to the Flyway configuration.

LANGUAGE: java
CODE:
import org.flywaydb.core.Flyway;
import org.flywaydb.core.api.migration.JavaMigration;
import org.springframework.context.ApplicationContext;

...
ApplicationContext applicationContext = ...; // obtain a reference to Spring's ApplicationContext.

Flyway flyway = Flyway.configure()
    .dataSource(url, user, password)
    // Add all Spring-instantiated JavaMigration beans
    .javaMigrations(applicationContext.getBeansOfType(JavaMigration.class).values().toArray(new JavaMigration[0]))
    .load();
flyway.migrate();

----------------------------------------

TITLE: Executing Environment-Specific Flyway Migrations
DESCRIPTION: Example of running Flyway migrations with environment-specific execution using placeholders. This snippet shows the command-line syntax for executing migrations in different environments by setting the 'environment' placeholder.

LANGUAGE: bash
CODE:
flyway -placeholders.environment=development migrate

LANGUAGE: bash
CODE:
flyway -placeholders.environment=test migrate

LANGUAGE: bash
CODE:
flyway -placeholders.environment=production migrate

----------------------------------------

TITLE: Configuring Flyway Plugin Properties
DESCRIPTION: Example of configuring Flyway plugin settings directly in pom.xml including database credentials, schemas and placeholders

LANGUAGE: xml
CODE:
<plugin>
    ...
    <configuration>
        <user>myUser</user>
        <password>mySecretPwd</password>
        <schemas>
            <schema>schema1</schema>
            <schema>schema2</schema>
            <schema>schema3</schema>
        </schemas>
        <placeholders>
            <keyABC>valueXYZ</keyABC>
            <otherplaceholder>value123</otherplaceholder>
        </placeholders>
    </configuration>
</plugin>

----------------------------------------

TITLE: Adding Flyway Core Dependency in Gradle
DESCRIPTION: Gradle dependency configuration for adding Flyway Core to a Spring Boot project. Uses Gradle's compile configuration to include the Flyway library.

LANGUAGE: groovy
CODE:
compile "org.flywaydb:flyway-core:{{ site.flywayVersion }}"

----------------------------------------

TITLE: Configuring Flyway Baseline in Gradle
DESCRIPTION: Comprehensive Gradle configuration for Flyway baseline operation including database connection details, schemas, callbacks, and baseline settings. Demonstrates setting up driver, URL, credentials, and various baseline-specific parameters.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'org.hsqldb.jdbcDriver'
    url = 'jdbc:hsqldb:file:/db/flyway_sample;shutdown=true'
    user = 'SA'
    password = 'mySecretPwd'
    connectRetries = 10
    initSql = 'SET ROLE \'myuser\''
    schemas = ['schema1', 'schema2', 'schema3']
    createSchemas=true
    table = 'schema_history'
    tablespace = 'my_tablespace'
    callbacks = ['com.mycompany.proj.CustomCallback', 'com.mycompany.proj.AnotherCallback']
    skipDefaultCallbacks = false
    baselineVersion = 5
    baselineDescription = "Let's go!"
    workingDirectory = 'C:/myproject'
    jdbcProperties = [
      'someProperty' : 'someValue',
      'someOtherProperty' : 'someOtherValue'
    ]
}

----------------------------------------

TITLE: Running Flyway Migration with Docker
DESCRIPTION: Example of running a Flyway migration using the Docker image, specifying database connection details.

LANGUAGE: bash
CODE:
docker run --rm boxfuse/flyway -url=... -user=... -password=... migrate

----------------------------------------

TITLE: Configuring Flyway Maven Clean Goal
DESCRIPTION: Sample XML configuration for the Flyway Maven clean goal showing database connection settings, schema configuration, callbacks, and other properties. Demonstrates how to configure database credentials, schemas, custom callbacks, and various other clean-related settings.

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <cleanDisabled>false</cleanDisabled>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Configuring Flyway in Maven POM
DESCRIPTION: This XML configuration block demonstrates how to set up Flyway in a Maven project's pom.xml file. It includes various parameters such as database connection details, migration locations, and custom settings.

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <table>schema_history</table>
    <locations>
        <location>classpath:migrations1</location>
        <location>migrations2</location>
        <location>filesystem:/sql-migrations</location>
    </locations>
    <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>
    <undoSqlMigrationPrefix>downgrade</undoSqlMigrationPrefix>
    <repeatableSqlMigrationPrefix>RRR</repeatableSqlMigrationPrefix>
    <sqlMigrationSeparator>__</sqlMigrationSeparator>
    <sqlMigrationSuffixes>
        <sqlMigrationSuffix>.sql</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkg</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkb</sqlMigrationSuffix>
    </sqlMigrationSuffixes>
    <encoding>ISO-8859-1</encoding>
    <placeholderReplacement>true</placeholderReplacement>
    <placeholders>
        <aplaceholder>value</aplaceholder>
        <otherplaceholder>value123</otherplaceholder>
    </placeholders>
    <placeholderPrefix>#[</placeholderPrefix>
    <placeholderSuffix>]</placeholderSuffix>
    <resolvers>
        <resolver>com.mycompany.project.CustomResolver</resolver>
        <resolver>com.mycompany.project.AnotherResolver</resolver>
    </resolvers>
    <skipDefaultResolvers>false</skipDefaultResolvers>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <target>1.1</target>
    <outOfOrder>false</outOfOrder>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: SQL Data Migration Example with Potential Data Loss
DESCRIPTION: An example of a problematic SQL migration that splits a name column into first and last names. The migration could cause data loss for names that don't follow a simple 'first last' format.

LANGUAGE: sql
CODE:
ALTER TABLE Person
ADD COLUMN FirstName VARCHAR(100),
ADD COLUMN LastName VARCHAR(100);

UPDATE Person p
SET FirstName = (SELECT split_part(Name, ' ', 1) FROM Person WHERE p.id = id);
UPDATE Person p
SET LastName = (SELECT split_part(Name, ' ', 2) FROM Person WHERE p.id = id);

ALTER TABLE Person
DROP COLUMN Name;

----------------------------------------

TITLE: Implementing Full Flyway Migration Test Git Hook
DESCRIPTION: A Git hook script that performs a complete clean and migrate cycle on a test database to catch potential migration issues. This provides more thorough validation than the simple version check.

LANGUAGE: bash
CODE:
#!/bin/sh
flyway clean -url=jdbc:<local-test-db-url> \
        -locations=filesystem:/mnt/c/src/sandbox/gitHookDemo/ ;

if flyway migrate -url=jdbc:<local-test-db-url> \
        -locations=filesystem:/mnt/c/src/sandbox/gitHookDemo/ ; then
  	echo Flyway migration successful
  	exit 0
else
  	echo Flyway migration failed
  	exit 1
fi

----------------------------------------

TITLE: Configuring Single Database Migration in Gradle
DESCRIPTION: Example of configuring Flyway for a single database with URL, credentials, schemas and placeholders

LANGUAGE: groovy
CODE:
flyway {
    url = 'jdbc:h2:mem:mydb'
    user = 'myUsr'
    password = 'mySecretPwd'
    schemas = ['schema1', 'schema2', 'schema3']
    placeholders = [
        'keyABC': 'valueXYZ',
        'otherplaceholder': 'value123'
    ]
}

----------------------------------------

TITLE: Flyway Baseline Maven Configuration
DESCRIPTION: Comprehensive XML configuration for the Flyway baseline Maven plugin, including database connection settings, schema management, callbacks, and various baseline-specific options.

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <createSchemas>true</createSchemas>
    <table>schema_history</table>
    <tablespace>my_tablespace</tablespace>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <baselineVersion>1.0</baselineVersion>
    <baselineDescription>Base Migration</baselineDescription>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Modifying JDBC URL for AWS Secrets Manager Integration
DESCRIPTION: Example of how to modify a JDBC connection URL to use AWS Secrets Manager with Flyway.

LANGUAGE: plaintext
CODE:
jdbc:mariadb://localhost:1234/example_db -> jdbc-secretsmanager:mariadb://localhost:1234/example_db

----------------------------------------

TITLE: Configuring Schemas in Flyway Properties File
DESCRIPTION: Shows how to set the managed schemas in a Flyway configuration file using the 'flyway.schemas' property. This configuration specifies 'schema1' and 'schema2' as the managed schemas.

LANGUAGE: properties
CODE:
flyway.schemas=schema1,schema2

----------------------------------------

TITLE: Configuring Flyway Properties for Repair Command
DESCRIPTION: This snippet demonstrates a sample configuration for the Flyway repair command. It includes various properties such as database connection details, schema settings, migration locations, and custom placeholders.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.table=schema_history
flyway.locations=classpath:com.mycomp.migration,database/migrations,filesystem:/sql-migrations,s3:migrationsBucket,gcs:migrationsBucket
flyway.sqlMigrationPrefix=Migration-
flyway.undoSqlMigrationPrefix=downgrade
flyway.repeatableSqlMigrationPrefix=RRR
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb
flyway.encoding=ISO-8859-1
flyway.placeholderReplacement=true
flyway.placeholders.aplaceholder=value
flyway.placeholders.otherplaceholder=value123
flyway.placeholderPrefix=#[
flyway.placeholderSuffix=]
flyway.resolvers=com.mycomp.project.CustomResolver,com.mycomp.project.AnotherResolver
flyway.skipDefaultResolvers=false
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Configuring Flyway Database URL in Properties File
DESCRIPTION: This example shows how to set the JDBC URL for Flyway in a configuration file using the properties format. It specifies a connection to an in-memory H2 database named 'flyway_db'.

LANGUAGE: properties
CODE:
flyway.url=jdbc:h2:mem:flyway_db

----------------------------------------

TITLE: Installing Flyway Community Maven Plugin
DESCRIPTION: XML configuration to add the Flyway Maven plugin to a project's build section in pom.xml

LANGUAGE: xml
CODE:
<build>
    ...
    <plugin>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-maven-plugin</artifactId>
        <version>{{ site.flywayVersion }}</version>
    </plugin>
    ...
</build>

----------------------------------------

TITLE: Running Migration Tests with Flyway Hub CLI
DESCRIPTION: Command to test migration scripts against a PostgreSQL database. Provisions a fresh database instance, runs migrations, performs linting, and uploads results.

LANGUAGE: bash
CODE:
flywayhub test --project myproject --engine 'PostgreSQL (v13.2)' ./sql

----------------------------------------

TITLE: Modifying a View with Repeatable Migration in SQL
DESCRIPTION: This SQL snippet updates the 'people' view to include a WHERE clause, filtering for names that start with 'M'. It demonstrates how repeatable migrations can be modified in-place.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW people AS 
    SELECT id, name FROM person WHERE name like 'M%';

----------------------------------------

TITLE: Configuring Flyway Clean Properties
DESCRIPTION: Sample configuration properties for the Flyway clean command, including database connection settings, schema configurations, and callback settings.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.cleanDisabled=false
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Adding Flyway Dependency in Gradle
DESCRIPTION: Shows how to include the Flyway Core dependency in a Gradle project's build file.

LANGUAGE: Gradle
CODE:
dependencies {
    compile "org.flywaydb:flyway-core:{{ site.flywayVersion }}"
}

----------------------------------------

TITLE: Configuring Flyway Repair Task in Gradle
DESCRIPTION: Comprehensive configuration example for the Flyway repair task in Gradle, including database connection settings, migration locations, SQL migration settings, and custom resolvers/callbacks.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'org.hsqldb.jdbcDriver'
    url = 'jdbc:hsqldb:file:/db/flyway_sample;shutdown=true'
    user = 'SA'
    password = 'mySecretPwd'
    connectRetries = 10
    initSql = 'SET ROLE \'myuser\''
    schemas = ['schema1', 'schema2', 'schema3']
    table = 'schema_history'
    locations = ['classpath:migrations1', 'migrations2', 'filesystem:/sql-migrations', 's3:migrationsBucket', 'gcs:migrationsBucket']
    sqlMigrationPrefix = 'Migration-'
    undoSqlMigrationPrefix = 'downgrade'
    repeatableSqlMigrationPrefix = 'RRR'
    sqlMigrationSeparator = '__'
    sqlMigrationSuffixes = ['.sql', '.pkg', '.pkb']
    encoding = 'ISO-8859-1'
    placeholderReplacement = true
    placeholders = [
        'aplaceholder' : 'value',
        'otherplaceholder' : 'value123'
    ]
    placeholderPrefix = '#['
    placeholderSuffix = ']'
    resolvers = ['com.mycompany.proj.CustomResolver', 'com.mycompany.proj.AnotherResolver']
    skipDefaultResolvers = false
    callbacks = ['com.mycompany.proj.CustomCallback', 'com.mycompany.proj.AnotherCallback']
    skipDefaultCallbacks = false
    workingDirectory = 'C:/myproject'
    jdbcProperties = [
      'someProperty' : 'someValue',
      'someOtherProperty' : 'someOtherValue'
    ]
}

----------------------------------------

TITLE: Loading Default Configuration Files in Flyway Java API
DESCRIPTION: Demonstrates how to use the new loadDefaultConfigurationFiles() method to load Flyway configuration files from default locations including installation directory, user home, and working directory.

LANGUAGE: java
CODE:
Flyway flyway = Flyway.configure(newClassLoader)
    .loadDefaultConfigurationFiles()
    .load();

----------------------------------------

TITLE: Flyway PostgreSQL SSL Connection URL
DESCRIPTION: Example of configuring a Flyway database URL to use SSL with PostgreSQL.

LANGUAGE: properties
CODE:
flyway.url=jdbc:postgresql://postgres.flyway.test:62079/flyway_db?ssl=true

----------------------------------------

TITLE: Configuring Environment-Specific Database URLs in Flyway
DESCRIPTION: These snippets show how to set up environment-specific configuration files for Flyway, each specifying a different database URL for various deployment stages.

LANGUAGE: bash
CODE:
flyway.url=jdbc:hsqldb:file:devdb/db

LANGUAGE: bash
CODE:
flyway.url=jdbc:hsqldb:file:cidb/db

LANGUAGE: bash
CODE:
flyway.url=jdbc:hsqldb:file:stagingdb/db

LANGUAGE: bash
CODE:
flyway.url=jdbc:hsqldb:file:livedb/db

----------------------------------------

TITLE: Enabling Out Of Order Migrations in Maven
DESCRIPTION: This snippet illustrates how to enable out of order migrations in a Maven pom.xml file. It sets the outOfOrder configuration element to true within the Flyway plugin configuration.

LANGUAGE: xml
CODE:
<configuration>
    <outOfOrder>true</outOfOrder>
</configuration>

----------------------------------------

TITLE: Configuring Vault Secret for Flyway Database Credentials
DESCRIPTION: This snippet shows the structure of a Vault secret containing Flyway database credentials. It includes the database URL, user, and password.

LANGUAGE: plaintext
CODE:
flyway.url=<database_url>
flyway.user=<database_user>
flyway.password=<database_password>

----------------------------------------

TITLE: SQL Callback File Example
DESCRIPTION: Example of SQL callback file naming convention for implementing Flyway lifecycle hooks. Callbacks can include optional descriptions and must use configured SQL migration suffixes.

LANGUAGE: sql
CODE:
beforeRepair__vacuum.sql

----------------------------------------

TITLE: SQL Migration with Placeholder Examples
DESCRIPTION: Demonstrates SQL migration syntax using both default Flyway placeholders and user-defined placeholders. Shows table creation, grant statements, and data insertion with placeholder usage.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_user (
  name VARCHAR(25) NOT NULL,
  PRIMARY KEY(name)
);

/*
Multi-line
comment
*/

-- Default placeholders
GRANT SELECT ON SCHEMA ${flyway:defaultSchema} TO ${flyway:user};

-- User defined placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Baseline Migration Prefix using Flyway Java API
DESCRIPTION: Uses Flyway's Java API to programmatically set the baseline migration prefix through the BaselineMigrationConfigurationExtension.

LANGUAGE: java
CODE:
BaselineMigrationConfigurationExtension baselineMigrationConfigurationExtension = configuration.getPluginRegister().getPlugin(BaselineMigrationConfigurationExtension.class)
baselineMigrationConfigurationExtension.setBaselineMigrationPrefix("IB");

----------------------------------------

TITLE: Setting Flyway Database URL via Command Line (PowerShell)
DESCRIPTION: This snippet demonstrates how to set the JDBC URL for Flyway using the command-line interface in PowerShell. It connects to an in-memory H2 database named 'flyway_db'.

LANGUAGE: powershell
CODE:
./flyway -url=jdbc:h2:mem:flyway_db info

----------------------------------------

TITLE: Configuring Flyway Repair in Maven POM
DESCRIPTION: Demonstrates a sample configuration for the Flyway repair goal in a Maven POM file. It includes various settings such as database connection details, schema locations, and migration file specifications.

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <table>schema_history</table>
    <locations>
        <location>classpath:migrations1</location>
        <location>migrations2</location>
        <location>filesystem:/sql-migrations</location>
    </locations>
    <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>
    <undoSqlMigrationPrefix>downgrade</undoSqlMigrationPrefix>
    <repeatableSqlMigrationPrefix>RRR</repeatableSqlMigrationPrefix>
    <sqlMigrationSeparator>__</sqlMigrationSeparator>
    <sqlMigrationSuffixes>
        <sqlMigrationSuffix>.sql</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkg</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkb</sqlMigrationSuffix>
    </sqlMigrationSuffixes>
    <encoding>ISO-8859-1</encoding>
    <placeholderReplacement>true</placeholderReplacement>
    <placeholders>
        <aplaceholder>value</aplaceholder>
        <otherplaceholder>value123</otherplaceholder>
    </placeholders>
    <placeholderPrefix>#[</placeholderPrefix>
    <placeholderSuffix>]</placeholderSuffix>
    <resolvers>
        <resolver>com.mycompany.project.CustomResolver</resolver>
        <resolver>com.mycompany.project.AnotherResolver</resolver>
    </resolvers>
    <skipDefaultResolvers>false</skipDefaultResolvers>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Listing Flyway Migrations for Migration Generation
DESCRIPTION: This snippet shows a list of SQL migration files in a Flyway project, including a new migration generated from changes made in an IDE. It demonstrates how new changes can be added as a separate migration file.

LANGUAGE: plaintext
CODE:
V1__create_tables.sql
V2__modify_tables.sql
V3__create_views.sql
V4__new_changes.sql

----------------------------------------

TITLE: Undoing Database Changes in SQL
DESCRIPTION: Example of a SQL-based undo migration that reverses the changes made in the corresponding versioned migration.

LANGUAGE: sql
CODE:
DELETE FROM brand WHERE name='DeLorean';

ALTER TABLE owner DROP driver_license_id;

DROP TABLE car;

----------------------------------------

TITLE: Configuring AWS Secrets Manager Maven Dependency for Flyway
DESCRIPTION: Maven Central coordinates for the AWS Secrets Manager JDBC Library, which is required for Flyway to integrate with AWS Secrets Manager.

LANGUAGE: xml
CODE:
<code>com.amazonaws.secretsmanager:aws-secretsmanager-jdbc:1.0.5</code>

----------------------------------------

TITLE: SQL Server Example Migration Script
DESCRIPTION: This SQL script demonstrates creating tables, triggers, and inserting data in SQL Server using T-SQL syntax. It includes single-line and multi-line comments, as well as a placeholder example.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE Customers (
CustomerId smallint identity(1,1),
Name nvarchar(255),
Priority tinyint
)
CREATE TABLE Sales (
TransactionId smallint identity(1,1),
CustomerId smallint,
[Net Amount] int,
Completed bit
)
GO

/*
Multi-line
comment
*/
-- TSQL
CREATE TRIGGER dbo.Update_Customer_Priority
 ON dbo.Sales
AFTER INSERT, UPDATE, DELETE
AS
WITH CTE AS (
 select CustomerId from inserted
 union
 select CustomerId from deleted
)
UPDATE Customers
SET
 Priority =
   case
     when t.Total < 10000 then 3
     when t.Total between 10000 and 50000 then 2
     when t.Total > 50000 then 1
     when t.Total IS NULL then NULL
   end
FROM Customers c
INNER JOIN CTE ON CTE.CustomerId = c.CustomerId
LEFT JOIN (
 select
   Sales.CustomerId,
   SUM([Net Amount]) Total
 from Sales
 inner join CTE on CTE.CustomerId = Sales.CustomerId
 where
   Completed = 1
 group by Sales.CustomerId
) t ON t.CustomerId = c.CustomerId
GO

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: MySQL SQL Migration Script Example
DESCRIPTION: Example SQL migration script showing MySQL-specific syntax including stored procedures, comments, and placeholder usage.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL,
 PRIMARY KEY(value)
);

/*
Multi-line
comment
*/

-- MySQL procedure
DELIMITER //
CREATE PROCEDURE AddData()
 BEGIN
   # MySQL-style single line comment
   INSERT INTO test_data (value) VALUES ('Hello');
 END //
DELIMITER;

CALL AddData();

-- MySQL comments directives generated by mysqlsump
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Flyway Callbacks via Java API
DESCRIPTION: Java API configuration for specifying Flyway callbacks programmatically

LANGUAGE: java
CODE:
Flyway.configure()
    .callbacks("my.callback.FlywayCallback", "my.package.to.scan")
    .load()

----------------------------------------

TITLE: Setting Flyway Locations in Configuration File
DESCRIPTION: Specifies the migration location in a Flyway configuration file using the properties format.

LANGUAGE: properties
CODE:
flyway.locations=filesystem:./sql

----------------------------------------

TITLE: Setting Flyway Placeholders via Java API
DESCRIPTION: Demonstrates how to programmatically set placeholders using the Flyway Java API. This method is useful when integrating Flyway into Java applications or custom build processes.

LANGUAGE: java
CODE:
Map<String, String> placeholders = new HashMap<>();
placeholders.put("key1", "value1");
placeholders.put("key2", "value2");

Flyway.configure()
    .placeholders(placeholders)
    .load()

----------------------------------------

TITLE: Setting Flyway Default Schema via Environment Variable
DESCRIPTION: This example demonstrates how to set the Flyway default schema using an environment variable named 'FLYWAY_DEFAULT_SCHEMA'.

LANGUAGE: properties
CODE:
FLYWAY_DEFAULT_SCHEMA=schema2

----------------------------------------

TITLE: Configuring Flyway for Check Command with SQL Server
DESCRIPTION: Configuration settings for Flyway to use the Check command with SQL Server databases. Includes target and build database URLs, user credentials, and report filename settings.

LANGUAGE: plaintext
CODE:
flyway.url=jdbc:sqlserver://localhost;databaseName=foobar;trustServerCertificate=true
flyway.user=sa
flyway.password=Flyway123
flyway.licenseKey=<put your license key here>

flyway.check.buildUrl=jdbc:sqlserver://localhost;databaseName=check_build_db;trustServerCertificate=true
flyway.check.reportFilename=check_report

----------------------------------------

TITLE: Configuring Flyway Maven Plugin with Error Override
DESCRIPTION: Maven configuration showing how to set up error overrides in the Flyway plugin. This example converts SQL state 42001 errors to warnings.

LANGUAGE: xml
CODE:
<project xmlns="...">
    ...
    <build>
        <plugins>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>{{ site.flywayVersion }}</version>
                <configuration>
                    <url>jdbc:h2:file:./target/foobar</url>
                    <user>sa</user>
                    <errorOverrides>
                        <errorOverride>42001:42001:W</errorOverride>
                    </errorOverrides>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>1.4.191</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>

----------------------------------------

TITLE: Implementing Custom Resource Provider in Flyway using Java
DESCRIPTION: This code snippet shows how to implement a custom ResourceProvider and LoadableResource to override Flyway's default resource lookup behavior. It demonstrates loading a single migration file from a specific file path.

LANGUAGE: java
CODE:
LoadableResource loadableResource = new LoadableResource() {
  @Override
  public Reader read() {
    try {
        return new FileReader("C:\\V1__migration.sql");
    } catch (FileNotFoundException e) {
        // No op
    }
      
    return null;
  }

  @Override
  public String getAbsolutePath() {
    return "C:\\V1__migration.sql";
  }

  @Override
  public String getAbsolutePathOnDisk() {
    return "C:\\V1__migration.sql";
  }

  @Override
  public String getFilename() {
    return "V1__migration.sql";
  }

  @Override
  public String getRelativePath() {
    return "V1__migration.sql";
  }
};

Flyway flyway = Flyway.configure()
  .dataSource("jdbc:h2:mem:db", "sa", "password")
  .resourceProvider(new ResourceProvider() {
    @Override
    public LoadableResource getResource(String name) {
      return loadableResource;
    }

    @Override
    public Collection<LoadableResource> getResources(String prefix, String[] suffixes) {
      ArrayList<LoadableResource> arr = new ArrayList<>();
      arr.add(loadableResource);
      return arr;
    }
  })
  .load();
flyway.migrate();

----------------------------------------

TITLE: Configuring Flyway Locations via Command Line
DESCRIPTION: Sets the migration location to a filesystem path using the Flyway command-line interface.

LANGUAGE: powershell
CODE:
./flyway -locations="filesystem:./sql" info

----------------------------------------

TITLE: Configuring Placeholder Prefix using Java API
DESCRIPTION: Shows how to set the placeholder prefix programmatically using Flyway's Java API

LANGUAGE: java
CODE:
Flyway.configure()
    .placeholderPrefix("$$")
    .load()

----------------------------------------

TITLE: Setting Flyway Target via Environment Variable
DESCRIPTION: Illustrates how to set the Flyway target version to 2.0 using an environment variable. This method allows for dynamic configuration without modifying files or commands.

LANGUAGE: properties
CODE:
FLYWAY_TARGET=2.0

----------------------------------------

TITLE: Configuring Maven POM for Flyway Java Migrations
DESCRIPTION: This XML snippet shows how to configure the Maven POM file to include Flyway dependencies, set up the Java compiler for Java 8, and configure Flyway to scan the Java classpath for migrations.

LANGUAGE: xml
CODE:
<project xmlns="...">
    ...
    <dependencies>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>{{ site.flywayVersion }}</version>
        </dependency>
        ...
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>{{ site.flywayVersion }}</version>
                <configuration>
                    <url>jdbc:h2:file:./target/foobar</url>
                    <user>sa</user>
                    <locations>
                        <location>classpath:db/migration</location>
                    </locations>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>1.4.191</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>

----------------------------------------

TITLE: Creating Couple Table Migration SQL
DESCRIPTION: SQL migration script to create a new COUPLE table with foreign key references to the PERSON table.

LANGUAGE: sql
CODE:
create table COUPLE (
    ID int not null,
    PERSON1 int not null references PERSON(ID), 
    PERSON2 int not null references PERSON(ID) 
);

----------------------------------------

TITLE: Iterating Over Schemas with Shared Migration Scripts in PowerShell
DESCRIPTION: PowerShell script to iterate over multiple schemas using a single set of migration scripts, demonstrating how to enforce uniform schema structure across multiple tenants.

LANGUAGE: powershell
CODE:
$schemas = @('foo', 'bar')
foreach ($schema in $schemas) { flyway migrate -configFiles="c:\src\config\flyway.conf" -defaultSchema="$schema" }

----------------------------------------

TITLE: Configuring Dapr Secret Store for Flyway
DESCRIPTION: Example configuration for integrating Flyway with Dapr Secret Store, including the REST API URL and secret paths.

LANGUAGE: properties
CODE:
flyway.plugins.dapr.url=http://localhost:3500/v1.0/secrets/my-secrets-store
flyway.plugins.dapr.secrets=secret1,secret2

----------------------------------------

TITLE: Spring JDBC Java-based Migration
DESCRIPTION: Example of a Java-based migration using Spring JDBC's JdbcTemplate.

LANGUAGE: java
CODE:
package db.migration;

import org.flywaydb.core.api.migration.BaseJavaMigration;
import org.flywaydb.core.api.migration.Context;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;

/**
 * Example of a Java-based migration using Spring JDBC.
 */
public class V1_2__Another_user extends BaseJavaMigration {
    public void migrate(Context context) {
        new JdbcTemplate(new SingleConnectionDataSource(context.getConnection(), true))
                .execute("INSERT INTO test_user (name) VALUES ('Obelix')");
    }
}

----------------------------------------

TITLE: Defining Flyway Locations as Environment Variable
DESCRIPTION: Sets the Flyway migration location using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_LOCATIONS=filesystem:./sql

----------------------------------------

TITLE: Enabling Out Of Order Migrations in Flyway Java API
DESCRIPTION: This snippet demonstrates how to enable out of order migrations using the Flyway Java API. It configures the Flyway object with outOfOrder set to true.

LANGUAGE: java
CODE:
Flyway.configure()
    .outOfOrder(true)
    .load()

----------------------------------------

TITLE: PowerShell Script Callback Example
DESCRIPTION: Example of PowerShell script callback file naming convention for implementing Flyway lifecycle hooks in Teams edition. Script callbacks provide additional flexibility for executing external tools or managing files.

LANGUAGE: powershell
CODE:
beforeRepair__vacuum.ps1

----------------------------------------

TITLE: Configuring Dapr Secret Store Content for Flyway
DESCRIPTION: Example of the content structure for a Dapr secret used to store Flyway database connection parameters. This secret named 'my-flyway-config' contains the database URL, user, and password.

LANGUAGE: plaintext
CODE:
flyway.url=<database_url>
flyway.user=<database_user>
flyway.password=<database_password>

----------------------------------------

TITLE: Schema History Table Example - SQL
DESCRIPTION: Example schema history table showing a missing repeatable migration and a pending versioned migration that would typically fail Flyway validation.

LANGUAGE: sql
CODE:
+------------+---------+-------------+------+--------------+---------+----------+
| Category   | Version | Description | Type | Installed On | State   | Undoable |
+------------+---------+-------------+------+--------------+---------+----------+
| Repeatable |         | repeatable  | SQL  |      ...     | Missing |          |
| Versioned  | 1       | first       | SQL  |              | Pending | No       |
+------------+---------+-------------+------+--------------+---------+----------+

----------------------------------------

TITLE: Flyway Snapshot Configuration Properties
DESCRIPTION: Example configuration file showing the required properties for using the snapshot command including database connection and snapshot file location.

LANGUAGE: properties
CODE:
flyway.url=jdbc:example:database
flyway.user=username
flyway.password=password
flyway.snapshot.filename=C:\snapshots\my_snapshot

----------------------------------------

TITLE: MariaDB SQL Migration Script Example
DESCRIPTION: Example SQL migration script showing MariaDB-specific syntax including table creation, stored procedures, comments, and placeholder usage.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL,
 PRIMARY KEY(value)
);

/*
Multi-line
comment
*/

-- MySQL procedure
DELIMITER //
CREATE PROCEDURE AddData()
 BEGIN
   # MySQL-style single line comment
   INSERT INTO test_data (value) VALUES ('Hello');
 END //
DELIMITER;

CALL AddData();

-- MySQL comments directives generated by mysqlsump
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Flyway Database URL in Java API
DESCRIPTION: This code example demonstrates how to set the JDBC URL for Flyway using the Java API. It configures a connection to an in-memory H2 database named 'flyway_db' and loads the configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .url("jdbc:h2:mem:flyway_db")
    .load()

----------------------------------------

TITLE: Configuring Maven Settings for Flyway Pro Edition
DESCRIPTION: Maven settings configuration for Flyway Pro Edition. This snippet shows how to set up authentication for the Flyway repository in the Maven settings file.

LANGUAGE: xml
CODE:
<settings>
    <servers>
        <server>
            <id>flyway-repo</id>
            <username>your-flyway-license-key</username>
            <password>flyway</password>
        </server>
    </servers>
    ...
</settings>

----------------------------------------

TITLE: Configuring Flyway Teams License Key via Command Line
DESCRIPTION: Example of providing a Flyway Teams license key when using the command line interface. The license key is passed as a parameter to the flyway command.

LANGUAGE: powershell
CODE:
./flyway -licenseKey=FL01... info

----------------------------------------

TITLE: Example SQL Migration Script for Aurora PostgreSQL in Flyway
DESCRIPTION: Illustrates various SQL commands and syntaxes supported in Flyway migrations for Aurora PostgreSQL. Includes table creation, function definitions, placeholders, and COPY command usage.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL PRIMARY KEY
);


/*
Multi-line
comment
*/

-- Multi-statement PostgreSQL function
CREATE FUNCTION AddData() RETURNS INTEGER
AS $$
   BEGIN
    INSERT INTO test_data (value) VALUES ('Hello');
    RETURN 1;
  END;
$$ LANGUAGE plpgsql;

SELECT *  INTO TEMP adddata_temp_table FROM AddData() ;

-- Single-statement PostgreSQL function
CREATE FUNCTION add(integer, integer) RETURNS integer
   LANGUAGE sql IMMUTABLE STRICT
   AS $_$select $1 + $2;$_$;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

-- COPY ... FROM STDIN
COPY copy_test (c1, c2, c3) FROM stdin;
1	utf8: ümlaute: äüß	NaN
2	\N	123
3	text	123.234444444444449
\.

----------------------------------------

TITLE: Configuring Default Schema in Flyway Properties File
DESCRIPTION: This snippet shows how to set the default schema in a Flyway configuration file using the 'flyway.defaultSchema' property.

LANGUAGE: properties
CODE:
flyway.defaultSchema=schema2

----------------------------------------

TITLE: Executing Flyway Command with Vault Integration
DESCRIPTION: This command demonstrates how to run Flyway with Vault integration. It specifies the Vault URL, token, and the secret to be used for database credentials.

LANGUAGE: bash
CODE:
flyway info -plugins.vault.url="http://localhost:8200/v1/" -plugins.vault.token="<vault_token>" -plugins.vault.secrets="secret/data/flyway/flyway_credentials"

----------------------------------------

TITLE: Multi-Step Deployment Snapshot Process
DESCRIPTION: Series of commands to generate deployment comparison snapshots by first collecting applied migrations, then creating snapshots of current and future states.

LANGUAGE: bash
CODE:
flyway info -url="jdbc://prod" -infoOfState="success,out_of_order,baseline" -migrationIds > applied_migrations.txt

flyway migrate -cherrypick=$(cat applied_migrations.txt) -url="jdbc://build"
flyway snapshot -snapshot.filename="deployed.snapshot" -url="jdbc://build"

flyway migrate -url="jdbc://build"
flyway snapshot -snapshot.filename="next.snapshot" -url="jdbc://build"

----------------------------------------

TITLE: Oracle SQL Migration Example
DESCRIPTION: Demonstrates a sample SQL migration script for Oracle, including table creation, PL/SQL trigger, and placeholder usage.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_user (
  name VARCHAR(25) NOT NULL,
  PRIMARY KEY(name)
);

/*
Multi-line
comment
*/
-- PL/SQL block
CREATE TRIGGER test_trig AFTER insert ON test_user
BEGIN
   UPDATE test_user SET name = CONCAT(name, ' triggered');
END;
/

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Kerberos Config File Path in Flyway Java API
DESCRIPTION: Demonstrates how to set the Kerberos configuration file path using the Flyway Java API. The kerberosConfigFile() method is used to specify the path when configuring Flyway.

LANGUAGE: java
CODE:
Flyway.configure()
    .kerberosConfigFile("/path/to/krb5.ini")
    .load()

----------------------------------------

TITLE: Creating Undo Migration for Creating Person Table in SQL
DESCRIPTION: This SQL snippet creates an undo migration to reverse the creation of the PERSON table. It drops the PERSON table from the database.

LANGUAGE: sql
CODE:
DROP TABLE PERSON;

----------------------------------------

TITLE: Adding SQL Server Dependency in Maven
DESCRIPTION: XML configuration for adding the Flyway SQL Server dependency to a Maven project. Includes examples for both Community and Teams editions.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-sqlserver</artifactId>
</dependency>

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-sqlserver</artifactId>
</dependency>

----------------------------------------

TITLE: Creating Tables and Inserting Data in Snowflake SQL
DESCRIPTION: Example showing SQL syntax for Snowflake including table creation, different comment styles, and placeholder usage. Demonstrates single-line comments, multi-line comments, and SQL-style comments along with basic DDL and DML operations.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  value VARCHAR(25) NOT NULL PRIMARY KEY
);

/*
Multi-line
comment
*/

-- Sql-style comment

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Flyway for Gradle Undo Task
DESCRIPTION: This snippet demonstrates how to configure the Flyway plugin for Gradle, including various settings for database connection, migration files, and behavior options. It shows how to set up drivers, URLs, credentials, and custom migration locations.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'org.hsqldb.jdbcDriver'
    url = 'jdbc:hsqldb:file:/db/flyway_sample;shutdown=true'
    user = 'SA'
    password = 'mySecretPwd'
    connectRetries = 10
    initSql = 'SET ROLE \'myuser\''
    schemas = ['schema1', 'schema2', 'schema3']
    table = 'schema_history'
    locations = ['classpath:migrations', 'classpath:db/pkg', 'filesystem:/sql-migrations', 's3:migrationsBucket', 'gcs:migrationsBucket']
    sqlMigrationPrefix = 'Migration-'
    undoSqlMigrationPrefix = 'downgrade'
    sqlMigrationSeparator = '__'
    sqlMigrationSuffixes = ['.sql', '.pkg', '.pkb']
    encoding = 'ISO-8859-1'
    placeholderReplacement = true
    placeholders = [
        'aplaceholder' : 'value',
        'otherplaceholder' : 'value123'
    ]
    placeholderPrefix = '#['
    placeholderSuffix = ']'
    resolvers = ['com.mycompany.proj.CustomResolver', 'com.mycompany.proj.AnotherResolver']
    skipDefaultResolvers = false
    callbacks = ['com.mycompany.proj.CustomCallback', 'com.mycompany.proj.AnotherCallback']
    skipDefaultCallbacks = false
    outputQueryResults = false
    target = '1.1'
    mixed = false
    group = false
    cleanOnValidationError = false
    installedBy = "my-user"
    errorOverrides = ['99999:17110:E', '42001:42001:W']
    dryRunOutput = '/my/sql/dryrun-outputfile.sql'
    lockRetryCount = 10
    oracleSqlplus = true 
    oracleSqlplusWarn = true 
    workingDirectory = 'C:/myproject'
    jdbcProperties = [
      'someProperty' : 'someValue',
      'someOtherProperty' : 'someOtherValue'
    ]
}

----------------------------------------

TITLE: Example Redshift SQL Migration
DESCRIPTION: Demonstrates typical Redshift SQL migration syntax including table creation, data insertion, view creation, and function definition. Shows usage of comments, identity columns, varchar fields, and SQL functions with dollar-quoted string literals.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  test_id INT IDENTITY NOT NULL PRIMARY KEY,
  value VARCHAR(25) NOT NULL
);

/*
Multi-line
comment
*/
INSERT INTO test_data (value) VALUES ('Hello');

CREATE VIEW value_only AS SELECT value FROM test_data;

CREATE TABLE another_table AS SELECT 'some-data' as name;

CREATE FUNCTION add(integer, integer) RETURNS integer
     IMMUTABLE
    AS $$
    select $1 + $2;
$$ LANGUAGE sql;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Tablespace via Java API
DESCRIPTION: Programmatically sets the tablespace using Flyway's Java API

LANGUAGE: java
CODE:
Flyway.configure()
    .tablespace("xyz")
    .load()

----------------------------------------

TITLE: Configuring SQL Migration Suffixes in Flyway Maven Plugin
DESCRIPTION: This example illustrates how to set SQL migration suffixes in a Maven POM file for the Flyway plugin. It allows specifying multiple file extensions for SQL migrations.

LANGUAGE: xml
CODE:
<configuration>
    <sqlMigrationSuffixes>.sql,.pkg,.pkb</sqlMigrationSuffixes>
</configuration>

----------------------------------------

TITLE: Oracle Proxy Authentication Configuration
DESCRIPTION: Configuration example for using proxy authentication with Oracle in Flyway.

LANGUAGE: properties
CODE:
flyway.jdbcproperties.PROXY_USER_NAME=B

----------------------------------------

TITLE: Iterating Over Schemas for Migration in PowerShell
DESCRIPTION: PowerShell script to iterate over multiple schemas and run Flyway migrate command for each, using separate configuration files.

LANGUAGE: powershell
CODE:
$schemas = @('foo', 'bar')
foreach ($schema in $schemas) { flyway migrate -configFiles="c:\src\config\$schema.conf" }

----------------------------------------

TITLE: Creating Triggers with Complex Logic in SAP HANA
DESCRIPTION: This snippet shows how to create triggers with complex BEGIN END blocks in SAP HANA. It includes examples of triggers that execute after insert and update operations, demonstrating loops and conditional logic.

LANGUAGE: sql
CODE:
CREATE TRIGGER TEST_TRIGGER_FOR_INSERT
AFTER INSERT ON TARGET
BEGIN
 DECLARE v_id        INT := 0;
 DECLARE v_name      VARCHAR(20) := '';
 DECLARE v_pay       INT := 0;
 DECLARE v_msg       VARCHAR(200) := '';
 DELETE FROM message_box;
 FOR v_id IN 100 .. 103 DO
     SELECT name, payment INTO v_name, v_pay FROM control_tab WHERE id = :v_id;
     v_msg := :v_name || ' has ' || TO_CHAR(:v_pay);
     INSERT INTO message_box VALUES (:v_msg, CURRENT_TIMESTAMP);
 END FOR;
END;

CREATE TABLE SAMPLE ( A INT);
CREATE TRIGGER TEST_TRIGGER_WHILE_UPDATE
AFTER UPDATE ON TARGET
BEGIN
 DECLARE found INT := 1;
 DECLARE val INT := 1;
 WHILE :found <> 0 DO
     SELECT count(*) INTO found FROM sample WHERE a = :val;
     IF :found = 0 THEN
         INSERT INTO sample VALUES(:val);
     END IF;
     val := :val + 1;
 END WHILE;
END;

----------------------------------------

TITLE: Configuring JDBC URL for Aurora PostgreSQL in Flyway
DESCRIPTION: Demonstrates the JDBC URL format for connecting to an Aurora PostgreSQL database instance. The URL includes placeholders for instance, region, port, and database name.

LANGUAGE: plaintext
CODE:
jdbc:postgresql://<instance>.<region>.rds.amazonaws.com:<port>/<database>

----------------------------------------

TITLE: Configuring Major Rule Violations Check
DESCRIPTION: Example showing how to configure tolerance levels for major SQL rule violations in Flyway Teams.

LANGUAGE: shell
CODE:
./flyway check -code '-check.majorTolerance=3' '-check.majorRules=L034,L042'

----------------------------------------

TITLE: Creating Database Checkpoint in H2 Database
DESCRIPTION: SQL callback that forces the H2 database to flush all data to disk before a migration run using the beforeMigrate callback.

LANGUAGE: sql
CODE:
CHECKPOINT SYNC;

----------------------------------------

TITLE: Setting Oracle SQL*Plus Warnings via Java API
DESCRIPTION: Demonstrates how to enable Oracle SQL*Plus warnings using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .oracleSqlplusWarn(true)
    .load()

----------------------------------------

TITLE: Adding MySQL Support with Maven - Teams Edition
DESCRIPTION: Maven dependency configuration for adding MySQL support to Flyway Teams Edition.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-mysql</artifactId>
</dependency>

----------------------------------------

TITLE: Schema Iteration Script in Bash
DESCRIPTION: Bash script that iterates over multiple schemas and executes Flyway migrate command for each schema using separate configuration files.

LANGUAGE: bash
CODE:
#!/bin/bash
schemas=(foo bar)
for schema in "${schemas[@]}"
do
    flyway migrate -configFiles="/src/config/$schema.conf" 
done

----------------------------------------

TITLE: Configuring Flyway Password in Java API
DESCRIPTION: Demonstrates how to set the database password when using the Flyway Java API. This method is used when integrating Flyway directly into Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .password("mysecretpassword")
    .load()

----------------------------------------

TITLE: Configuring Google Cloud Secret Manager for Flyway
DESCRIPTION: Example configuration for integrating Flyway with Google Cloud Secret Manager, including the project name and secret paths.

LANGUAGE: properties
CODE:
flyway.plugins.gcsm.project=quixotic-ferret-345678
flyway.plugins.gcsm.secrets=secret1,secret2

----------------------------------------

TITLE: Implementing a Multi-event Flyway Callback
DESCRIPTION: This example shows how to implement a Flyway callback that handles multiple events. It demonstrates handling both successful and failed migration events to send notifications.

LANGUAGE: java
CODE:
public class MyNotifierCallback implements Callback {
    
    // Ensures that this callback handles both events
    @Override
    public boolean supports(Event event, Context context) {
        return event.equals(Event.AFTER_MIGRATE) || event.equals(Event.AFTER_MIGRATE_ERROR);
    }
    
    // Not relevant if we don't interact with the database
    @Override
    public boolean canHandleInTransaction(Event event, Context context) {
        return true;
    }
    
    // Send a notification when either event happens.
    @Override
    public void handle(Event event, Context context) {
        String notification = event.equals(Event.AFTER_MIGRATE) ? "Success" : "Failed";
        // ... Notification logic ...
        notificationService.send(notification);
    }

    String getCallbackName() {
        return "MyNotifier";
    }
}

----------------------------------------

TITLE: Configuring Cherry Pick in Flyway Java API
DESCRIPTION: This Java code snippet shows how to set the cherryPick option when configuring Flyway using its Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .cherryPick("2.0")
    .load()

----------------------------------------

TITLE: Setting Flyway Password via Environment Variable
DESCRIPTION: Illustrates how to set the Flyway database password using an environment variable. This method is useful for security and CI/CD pipelines.

LANGUAGE: properties
CODE:
FLYWAY_PASSWORD=mysecretpassword

----------------------------------------

TITLE: Enabling Batch Operations in Flyway CLI
DESCRIPTION: Command line example for enabling batch operations in Flyway Teams Edition to improve performance when executing multiple schema changes.

LANGUAGE: shell
CODE:
flyway migrate -batch=true

----------------------------------------

TITLE: Executing Flyway with Configurable Lock Retries in PowerShell
DESCRIPTION: This snippet demonstrates how to use the new lockRetryCount parameter when running Flyway migrate command. It sets the number of lock retry attempts to 10, allowing Flyway to attempt acquiring the lock multiple times before failing.

LANGUAGE: powershell
CODE:
./flyway -lockRetryCount=10 migrate

----------------------------------------

TITLE: Configuring cleanOnValidationError in Flyway Java API
DESCRIPTION: This Java code snippet shows how to set the cleanOnValidationError option to true when configuring Flyway programmatically using its Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .cleanOnValidationError(true)
    .load()

----------------------------------------

TITLE: Implementing Flyway Validation Git Pre-commit Hook
DESCRIPTION: A Git pre-commit hook script that validates Flyway migrations to prevent duplicate version numbers. Uses H2 in-memory database for validation with ignorePendingMigrations flag enabled.

LANGUAGE: bash
CODE:
#!/bin/sh
if flyway validate -url=jdbc:h2:mem:dummydb \
        -locations=filesystem:/mnt/c/src/sandbox/gitHookDemo/ \
        -ignorePendingMigrations=true; then
	echo Flyway validation successful
	exit 0
else
	echo Flyway validation failed
	exit 1
fi

----------------------------------------

TITLE: Configuring Connect Retries in Java API
DESCRIPTION: Demonstrates how to set connection retries using Flyway's Java API. Uses the connectRetries() method in the configuration builder.

LANGUAGE: java
CODE:
Flyway.configure()
    .connectRetries(10)
    .load()

----------------------------------------

TITLE: Using keytool to Import Database Certificate
DESCRIPTION: Command to import a database certificate into a Java truststore using the keytool utility. Requires specifying the keystore path, alias name, and certificate file.

LANGUAGE: bash
CODE:
keytool -keystore myStorePath -alias "My database certificate" -import -file databaseCertificate.pem

----------------------------------------

TITLE: Configuring Flyway Database URL in Maven POM
DESCRIPTION: This example demonstrates how to set the JDBC URL for Flyway in a Maven POM file. It configures a connection to a file-based H2 database located at './target/foobar'.

LANGUAGE: xml
CODE:
<configuration>
    <url>jdbc:h2:file:./target/foobar</url>
</configuration>

----------------------------------------

TITLE: Configuring Dapr Secrets in Flyway Properties File
DESCRIPTION: This snippet shows how to set Dapr Secrets in a Flyway configuration file using the properties format. Multiple secrets are specified as a comma-separated list.

LANGUAGE: properties
CODE:
flyway.plugins.dapr.secrets=secret1,secret2

----------------------------------------

TITLE: Gradle Plugin Configuration for Flyway Community
DESCRIPTION: Gradle plugin configuration for Flyway Community Edition version 7.0.0-beta1.

LANGUAGE: groovy
CODE:
plugins {
    id "org.flywaydb.flyway" version "7.0.0-beta1"
}

----------------------------------------

TITLE: Setting Flyway License Key via Command Line
DESCRIPTION: Demonstrates how to set the Flyway license key using the command line interface. The license key is passed as a parameter to the Flyway command.

LANGUAGE: powershell
CODE:
./flyway -licenseKey="FL01..." info

----------------------------------------

TITLE: Configuring Schema Creation via Java API
DESCRIPTION: Java API example showing how to disable automatic schema creation when configuring Flyway programmatically.

LANGUAGE: java
CODE:
Flyway.configure()
    .createSchemas(false)
    .load()

----------------------------------------

TITLE: Configuring Flyway License Key in Properties File
DESCRIPTION: Shows how to set the Flyway license key in a configuration file using the properties format. This method is useful for persistent configurations.

LANGUAGE: properties
CODE:
flyway.licenseKey=FL01...

----------------------------------------

TITLE: Configuring Error Overrides in Maven POM
DESCRIPTION: Maven POM configuration for Flyway error overrides. Shows how to specify error handling rules in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <errorOverrides>STATE:12345:W</errorOverrides>
</configuration>

----------------------------------------

TITLE: Configuring Stream in Maven POM
DESCRIPTION: Enables streaming of SQL migrations in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <stream>true</stream>
</configuration>

----------------------------------------

TITLE: Creating Tables and Inserting Data in CockroachDB
DESCRIPTION: Example SQL migration script demonstrating table creation and data insertion with placeholder support in CockroachDB. Shows both single-line and multi-line comment syntax.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL PRIMARY KEY
);


/*
Multi-line
comment
*/

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Organizing Flyway Migrations for Multiple Database Types
DESCRIPTION: This snippet shows a folder structure for organizing Flyway migrations that work across multiple database types, with shared and database-specific scripts organized by feature.

LANGUAGE: plaintext
CODE:
 my-project
   table
     shared
       V1\_0\_\_createTableGeneric.sql
     oracle
       V1\_0\_1\_\_createPLSQLSpecificTable.sql
   function
     create
       shared
         V2\_0\_\_createGenericFunction.sql
       mysql
         V2\_0\_1\_\_createFunctionUsingMySQLProcedure.sql

----------------------------------------

TITLE: Docker Compose Configuration for Flyway Check with SQL Server
DESCRIPTION: Docker Compose YAML configuration to set up Flyway and SQL Server containers for running Flyway Check. Includes volume mounts and environment variables.

LANGUAGE: yaml
CODE:
version: '3'
services:
  flyway:
    image: redgate/flyway
    command: -url=jdbc:sqlserver://db;trustServerCertificate=true -check.buildUrl=jdbc:sqlserver://db;databaseName=check_build_db;trustServerCertificate=true -password=Flyway123 -user=sa -check.reportFilename=reports/check_report check -changes
    environment:
      - FLYWAY_LICENSE_KEY=<put your license key here>
    volumes:
      - ./sql:/flyway/sql
      - ./reports:/flyway/reports
    depends_on:
      - db


  db:
    image: mcr.microsoft.com/mssql/server
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Flyway123
    ports:
      - 1433:1433

----------------------------------------

TITLE: Multi-tenant Schema Migration in PowerShell
DESCRIPTION: PowerShell script for migrating multiple schemas to identical structure using a single configuration file and defaultSchema parameter.

LANGUAGE: powershell
CODE:
$schemas = @('foo', 'bar')
foreach ($schema in $schemas) { flyway migrate -configFiles="c:\src\config\flyway.conf" -defaultSchema="$schema" }

----------------------------------------

TITLE: Setting Flyway Default Schema in Gradle Configuration
DESCRIPTION: This Gradle configuration snippet demonstrates how to set the default schema for Flyway within a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    defaultSchema = 'schema2'
}

----------------------------------------

TITLE: Configuring Secret Value Format in GCSM
DESCRIPTION: Example of how to structure configuration values within a Google Cloud Secret Manager secret for Flyway integration. Shows the format for storing database connection parameters.

LANGUAGE: plaintext
CODE:
flyway.url=<database_url>\nflyway.user=<database_user>\nflyway.password=<database_password>

----------------------------------------

TITLE: Configuring Baseline Version in Maven
DESCRIPTION: Sets the baseline version in Maven's pom.xml configuration.

LANGUAGE: xml
CODE:
<configuration>
    <baselineVersion>0.0</baselineVersion>
</configuration>

----------------------------------------

TITLE: Setting Placeholder Prefix via Environment Variable
DESCRIPTION: Demonstrates setting the placeholder prefix using an environment variable

LANGUAGE: properties
CODE:
FLYWAY_PLACEHOLDER_PREFIX=$$

----------------------------------------

TITLE: Configuring Flyway Driver via Command Line
DESCRIPTION: Example of setting the JDBC driver class using Flyway's command-line interface with PowerShell.

LANGUAGE: powershell
CODE:
./flyway -driver=com.microsoft.sqlserver.jdbc.SQLServerDriver info

----------------------------------------

TITLE: Configuring skipDefaultResolvers in Flyway Java API
DESCRIPTION: Demonstrates how to set the skipDefaultResolvers parameter to true when using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .skipDefaultResolvers(true)
    .load()

----------------------------------------

TITLE: Configuring JDBC Properties in Flyway Maven Plugin
DESCRIPTION: Illustrates how to set JDBC properties in a Maven POM file for the Flyway Maven plugin. This configuration applies to all Flyway goals executed through Maven.

LANGUAGE: xml
CODE:
<configuration>
    <jdbcProperties>
        <accessToken>access-token</accessToken>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Executing Flyway Command with Dapr Integration
DESCRIPTION: Example of running a Flyway 'info' command using Dapr integration. This command specifies the Dapr URL and the secret name to be used for configuration.

LANGUAGE: bash
CODE:
flyway info -plugins.dapr.url="http://localhost:3500/v1.0/secrets/my-secrets-store" -plugins.dapr.secrets="my-flyway-config"

----------------------------------------

TITLE: Configuring Flyway Baseline Migration Prefix in Maven POM
DESCRIPTION: Sets the baseline migration prefix for Flyway in a Maven project's pom.xml file using the pluginConfiguration element.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <baselineMigrationPrefix>IB</baselineMigrationPrefix>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Configuring Flyway via Standard Input
DESCRIPTION: Examples of providing Flyway configuration options through standard input using pipes and the -configFiles flag.

LANGUAGE: bash
CODE:
echo $'flyway.url=jdbc:h2:mem:mydb' | flyway info -configFiles=-

LANGUAGE: bash
CODE:
echo $'flyway.url=jdbc:h2:mem:mydb\nflyway.user=sa' | flyway info -configFiles=-

LANGUAGE: bash
CODE:
cat flyway.conf | flyway migrate -configFiles=-

----------------------------------------

TITLE: Configuring Flyway Locations via Java API
DESCRIPTION: Demonstrates how to set the migration location using the Flyway Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .locations("filesystem:./sql")
    .load()

----------------------------------------

TITLE: Configuring Flyway Driver in Properties File
DESCRIPTION: Setting the JDBC driver class in a Flyway properties configuration file.

LANGUAGE: properties
CODE:
flyway.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver

----------------------------------------

TITLE: Configuring Flyway Encoding in Properties File
DESCRIPTION: Setting UTF-16 encoding in Flyway's configuration properties file

LANGUAGE: properties
CODE:
flyway.encoding=UTF-16

----------------------------------------

TITLE: Configuring Init SQL in Flyway Java API
DESCRIPTION: Demonstrates how to set the initSql property programmatically using Flyway's Java API. This method is useful when integrating Flyway into Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .initSql("ALTER SESSION SET NLS_LANGUAGE='ENGLISH';")
    .load()

----------------------------------------

TITLE: Configuring Loggers in Flyway Properties File
DESCRIPTION: Shows how to set the 'loggers' parameter in a Flyway configuration file. This method is useful for persistent configurations across multiple Flyway runs.

LANGUAGE: properties
CODE:
flyway.loggers=auto

----------------------------------------

TITLE: Setting Flyway Callbacks in Properties File
DESCRIPTION: Configuration file settings for specifying Flyway callbacks

LANGUAGE: properties
CODE:
flyway.callbacks=my.callback.FlywayCallback,my.package.to.scan

----------------------------------------

TITLE: Configuring Cherry Pick in Flyway Maven Plugin
DESCRIPTION: This XML configuration snippet shows how to set the cherryPick option for Flyway in a Maven pom.xml file.

LANGUAGE: xml
CODE:
<configuration>
    <cherryPick>2.0</cherryPick>
</configuration>

----------------------------------------

TITLE: Setting Migration Naming Validation via Environment Variable
DESCRIPTION: Example of enabling migration naming validation using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_VALIDATE_MIGRATION_NAMING=true

----------------------------------------

TITLE: Setting Flyway Database URL via Environment Variable
DESCRIPTION: This snippet illustrates how to set the JDBC URL for Flyway using an environment variable. It configures a connection to an in-memory H2 database named 'flyway_db'.

LANGUAGE: properties
CODE:
FLYWAY_URL=jdbc:h2:mem:flyway_db

----------------------------------------

TITLE: Configuring Tablespace via Command Line in Powershell
DESCRIPTION: Sets the tablespace using Flyway's command line interface with PowerShell

LANGUAGE: powershell
CODE:
./flyway -tablespace="xyz" info

----------------------------------------

TITLE: Configuring baselineOnMigrate in Flyway Maven POM
DESCRIPTION: Illustrates how to set the baselineOnMigrate option to true in a Maven POM file for Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <baselineOnMigrate>true</baselineOnMigrate>
</configuration>

----------------------------------------

TITLE: Setting Flyway Resolver in Configuration File (Properties)
DESCRIPTION: Demonstrates how to configure a custom MigrationResolver in a Flyway properties configuration file. This setting allows Flyway to use the specified resolver in addition to built-in ones.

LANGUAGE: properties
CODE:
flyway.resolvers=my.resolver.MigrationResolver

----------------------------------------

TITLE: Configuring Flyway Callbacks in Maven
DESCRIPTION: Maven build configuration for specifying Flyway callbacks

LANGUAGE: xml
CODE:
<configuration>
    <callbacks>my.callback.FlywayCallback,my.package.to.scan</callbacks>
</configuration>

----------------------------------------

TITLE: Setting Baseline Version in Gradle
DESCRIPTION: Configures the baseline version in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    baselineVersion = '0.0'
}

----------------------------------------

TITLE: Configuring JDBC Properties in Flyway Configuration File
DESCRIPTION: Shows how to set JDBC properties in a Flyway configuration file. This method allows for setting properties that will be applied across all Flyway operations.

LANGUAGE: properties
CODE:
flyway.jdbcProperties.accessToken=my-access-token

----------------------------------------

TITLE: Setting Flyway User via Environment Variable
DESCRIPTION: Demonstrates setting the database user through environment variable configuration.

LANGUAGE: properties
CODE:
FLYWAY_USER=myuser

----------------------------------------

TITLE: Configuring Dry Run Output via Java API
DESCRIPTION: Example of setting the dry run output path using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .dryRunOutput("/my/output/file.sql")
    .load()

----------------------------------------

TITLE: Configuring JDBC Properties in Flyway Java API
DESCRIPTION: Demonstrates how to set JDBC properties programmatically using the Flyway Java API. This approach allows for dynamic configuration of JDBC properties in Java applications.

LANGUAGE: java
CODE:
Map<String, String> properties = new HashMap<>();
properties.put("accessToken", "access-token");

Flyway.configure()
    .jdbcProperties(properties)
    .load()

----------------------------------------

TITLE: Configuring baselineOnMigrate in Flyway Java API
DESCRIPTION: Demonstrates how to set the baselineOnMigrate option to true when using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .baselineOnMigrate(true)
    .load()

----------------------------------------

TITLE: Configuring cleanOnValidationError in Flyway Maven POM
DESCRIPTION: This XML snippet shows how to set the cleanOnValidationError option to true for Flyway in a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<configuration>
    <cleanOnValidationError>true</cleanOnValidationError>
</configuration>

----------------------------------------

TITLE: Installing Linux JRE via Maven
DESCRIPTION: Maven command to install the Linux x64 JRE 11.0.2 into the local Maven repository. This is required for building platform-specific packages of the Flyway command-line tool.

LANGUAGE: shell
CODE:
mvn install:install-file -DgroupId=net.adoptopenjdk \
-DartifactId=jre \
-Dclassifier=linux-x64 \
-Dtype=tar.gz \
-Dversion=11.0.2 \
-Dpackaging=tar.gz \
-Dfile=path/to/OpenJDK11U-jre_x64_linux_hotspot_11.0.2_9.tar.gz

----------------------------------------

TITLE: Setting Flyway Password via Command Line (PowerShell)
DESCRIPTION: Demonstrates how to set the database password when running Flyway from the command line using PowerShell. The password is provided as a command-line argument.

LANGUAGE: powershell
CODE:
./flyway -password=mysecretpassword info

----------------------------------------

TITLE: Configuring GCSM Secrets in Gradle Build Script
DESCRIPTION: This snippet shows how to specify Google Cloud Secret Manager secrets in a Gradle build script for Flyway. It uses the pluginConfiguration block with the gcsmSecrets property to provide an array of secret paths.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
        gcsmSecrets: ['secret1', 'secret2']
    ]
}

----------------------------------------

TITLE: Setting Batch Mode in Gradle
DESCRIPTION: Enables batch execution mode in Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    batch = true
}

----------------------------------------

TITLE: Creating Initial Database Procedure in Utility Migration
DESCRIPTION: Example of creating a procedure in a repeatable migration file named R__UtilityProcedures.sql

LANGUAGE: sql
CODE:
R__UtilityProcedures.sql
create or replace procedure my_important_proc

----------------------------------------

TITLE: Setting GCSM Secrets in Maven POM Configuration
DESCRIPTION: This example demonstrates how to configure Google Cloud Secret Manager secrets for Flyway in a Maven POM file. It uses the pluginConfiguration element with the gcsmSecrets child element to specify a comma-separated list of secret paths.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <gcsmSecrets>secret1,secret2</gcsmSecrets>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Configuring Clean Disabled in Flyway Java API
DESCRIPTION: Demonstrates how to set the cleanDisabled option to false using the Flyway Java API. This allows programmatic control over the clean operation in Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .cleanDisabled(false)
    .load()

----------------------------------------

TITLE: Specifying Flyway Config Files in Maven
DESCRIPTION: Shows how to configure Flyway configuration files in a Maven pom.xml using the configuration element.

LANGUAGE: xml
CODE:
<configuration>
    <configFiles>
        <configFile>my.conf</configFile>
    </configFiles>
</configuration>

----------------------------------------

TITLE: Configuring Schemas in Flyway Java API
DESCRIPTION: Demonstrates how to programmatically set the managed schemas using Flyway's Java API. This code configures Flyway to manage 'schema1' and 'schema2'.

LANGUAGE: java
CODE:
Flyway.configure()
    .schemas("schema1", "schema2")
    .load()

----------------------------------------

TITLE: Configuring Flyway Password in Properties File
DESCRIPTION: Shows how to set the database password in a Flyway configuration file using the properties format. This method is useful for storing configuration separate from the command line.

LANGUAGE: properties
CODE:
flyway.password=mysecretpassword

----------------------------------------

TITLE: Configuring Flyway Check in Properties File
DESCRIPTION: Example of a Flyway configuration file for the 'check' command. It shows how to set database connection details and check-specific parameters.

LANGUAGE: properties
CODE:
flyway.url=jdbc:example:database
flyway.user=username
flyway.password=password
flyway.check.buildUrl=jdbc:example:build_database
flyway.check.reportFilename=change_report

----------------------------------------

TITLE: Setting Batch Mode in Properties File
DESCRIPTION: Enables batch execution mode using Flyway's configuration file.

LANGUAGE: properties
CODE:
flyway.batch=true

----------------------------------------

TITLE: Listing Flyway Migrations
DESCRIPTION: This snippet shows a list of SQL migration files in a Flyway project. It includes three migrations for creating tables, modifying tables, and creating views.

LANGUAGE: plaintext
CODE:
V1__create_tables.sql
V2__modify_tables.sql
V3__create_views.sql

----------------------------------------

TITLE: Configuring Kerberos Config File Path in Flyway Maven Plugin
DESCRIPTION: Illustrates how to set the Kerberos configuration file path in the Flyway Maven plugin configuration. The kerberosConfigFile element is used within the configuration block.

LANGUAGE: xml
CODE:
<configuration>
    <kerberosConfigFile>/path/to/krb5.ini</kerberosConfigFile>
</configuration>

----------------------------------------

TITLE: Configuring Vault URL in Gradle Build Script
DESCRIPTION: Configuration of Vault URL within a Gradle build script for Flyway tasks.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
      vaultUrl: 'http://localhost:8200/v1/'
    ]
}

----------------------------------------

TITLE: Setting Default Schema via Flyway Command Line (PowerShell)
DESCRIPTION: This command sets the default schema to 'schema2' when running the Flyway 'info' command using PowerShell.

LANGUAGE: powershell
CODE:
./flyway -defaultSchema="schema2" info

----------------------------------------

TITLE: Setting Flyway Target via Commandline (PowerShell)
DESCRIPTION: Demonstrates how to set the Flyway target version to 2.0 using the commandline in PowerShell. This command will initiate a migration up to version 2.0.

LANGUAGE: powershell
CODE:
./flyway -target="2.0" migrate

----------------------------------------

TITLE: Configuring Batch Mode via Command Line
DESCRIPTION: Enables batch execution mode using Flyway's command-line interface.

LANGUAGE: powershell
CODE:
./flyway -batch="true" info

----------------------------------------

TITLE: Migration Duration Example Files
DESCRIPTION: Example structure showing migration files of different durations that can be controlled using shouldExecute for scheduling purposes

LANGUAGE: text
CODE:
V1__shrt_migration_1.sql
V2__long_migration_1.sql
V3__shrt_migration_2.sql

----------------------------------------

TITLE: Configuring Flyway License Key in Maven
DESCRIPTION: Illustrates how to set the Flyway license key in a Maven configuration. This is useful for projects using Maven as their build tool.

LANGUAGE: xml
CODE:
<configuration>
    <licenseKey>FL01...</licenseKey>
</configuration>

----------------------------------------

TITLE: Configuring Lock Retry Count via Command Line
DESCRIPTION: Sets the lock retry count using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -lockRetryCount=10 migrate

----------------------------------------

TITLE: Configuring Init SQL in Flyway Maven Plugin
DESCRIPTION: Illustrates how to set the initSql property in a Maven POM file for the Flyway Maven plugin. This configuration is suitable for Maven-based projects using Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <initSql>ALTER SESSION SET NLS_LANGUAGE='ENGLISH';</initSql>
</configuration>

----------------------------------------

TITLE: Configuring Flyway Default Schema in Maven POM
DESCRIPTION: This XML snippet shows how to set the default schema for Flyway in a Maven project's POM file configuration.

LANGUAGE: xml
CODE:
<configuration>
    <defaultSchema>schema2</defaultSchema>
</configuration>

----------------------------------------

TITLE: Setting Vault Token via Environment Variable
DESCRIPTION: Shows how to set the Vault token using an environment variable for Flyway.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_VAULT_TOKEN=s.abcdefghijklmnopqrstuvwx

----------------------------------------

TITLE: Configuring Flyway Baseline Command in Properties File
DESCRIPTION: This snippet demonstrates how to configure various Flyway parameters for the baseline command in a properties file. It includes settings for database connection, schema management, and baseline-specific options.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.table=schema_history
flyway.tablespace=my_tablespace
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.baselineVersion=1.0
flyway.baselineDescription=Base Migration
flyway.workingDirectory=C:/myProject
flyway.createSchemas=true
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Setting Baseline Description in Gradle
DESCRIPTION: Shows how to configure the baseline description in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    baselineDescription = 'Baseline'
}

----------------------------------------

TITLE: Schema Iteration Script in PowerShell
DESCRIPTION: PowerShell script that iterates over multiple schemas and executes Flyway migrate command for each schema using separate configuration files.

LANGUAGE: powershell
CODE:
$schemas = @('foo', 'bar')
foreach ($schema in $schemas) { flyway migrate -configFiles="c:\src\config\$schema.conf" }

----------------------------------------

TITLE: Setting Script Placeholder Prefix in Maven
DESCRIPTION: Configure the script placeholder prefix in a Maven POM file.

LANGUAGE: xml
CODE:
<configuration>
    <scriptPlaceholderPrefix>P__</scriptPlaceholderPrefix>
</configuration>

----------------------------------------

TITLE: SQL Server PRINT Statements Example
DESCRIPTION: Shows SQL Server PRINT statements that typically produce warning messages in Flyway output.

LANGUAGE: sql
CODE:
PRINT 'Starting ...';
PRINT 'Done.';

----------------------------------------

TITLE: Setting Table Name in Properties Configuration File
DESCRIPTION: Configures the schema history table name using a properties configuration file

LANGUAGE: properties
CODE:
flyway.table=my_schema_history_table

----------------------------------------

TITLE: Configuring Flyway Encoding in Maven
DESCRIPTION: XML configuration for setting UTF-16 encoding in Maven POM file

LANGUAGE: xml
CODE:
<configuration>
    <encoding>UTF-16</encoding>
</configuration>

----------------------------------------

TITLE: Configuring Baseline Description in Java API
DESCRIPTION: Example of setting the baseline description using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .baselineDescription("Baseline")
    .load()

----------------------------------------

TITLE: Configuring Manual Transaction Override in Flyway
DESCRIPTION: Configuration file syntax for disabling transaction wrapping for specific migration scripts. The config file should be named with .conf extension alongside the migration script.

LANGUAGE: properties
CODE:
executeInTransaction=false

----------------------------------------

TITLE: Configuring Tablespace in Maven
DESCRIPTION: Defines the tablespace in Maven's POM configuration

LANGUAGE: xml
CODE:
<configuration>
    <tablespace>xyz</tablespace>
</configuration>

----------------------------------------

TITLE: Configuring Placeholder Replacement in Gradle
DESCRIPTION: Example of disabling placeholder replacement in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    placeholderReplacement = false
}

----------------------------------------

TITLE: Setting Flyway Callbacks in Gradle
DESCRIPTION: Gradle build configuration for specifying Flyway callbacks

LANGUAGE: groovy
CODE:
flyway {
    callbacks = ['my.callback.FlywayCallback', 'my.package.to.scan']
}

----------------------------------------

TITLE: Defining Table Name in Maven Configuration
DESCRIPTION: Specifies the schema history table name in Maven's pom.xml configuration

LANGUAGE: xml
CODE:
<configuration>
    <table>my_schema_history_table</table>
</configuration>

----------------------------------------

TITLE: Configuring Repeatable SQL Migration Prefix using Flyway Java API
DESCRIPTION: This Java code snippet sets the repeatable SQL migration prefix to 'A' using the Flyway Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .repeatableSqlMigrationPrefix("A")
    .load()

----------------------------------------

TITLE: Example SQL Migration Script for Derby
DESCRIPTION: Illustrates a sample SQL migration script for Derby, including table creation, comments, and placeholder usage. This script demonstrates the standard SQL syntax supported by Flyway for Derby migrations.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  value VARCHAR(25) NOT NULL PRIMARY KEY
);

/*
Multi-line
comment
*/

-- Sql-style comment

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Setting Baseline Description via Environment Variable
DESCRIPTION: Shows how to configure the baseline description using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_BASELINE_DESCRIPTION=Baseline

----------------------------------------

TITLE: Configuring Batch Mode in Java API
DESCRIPTION: Enables batch execution mode using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .batch(true)
    .load()

----------------------------------------

TITLE: Setting Migration Naming Validation via Command Line
DESCRIPTION: Example of enabling migration naming validation using Flyway's command line interface with PowerShell.

LANGUAGE: powershell
CODE:
./flyway -validateMigrationNaming="true" info

----------------------------------------

TITLE: Setting Vault Secrets in Configuration File
DESCRIPTION: Example of configuring Vault secrets in Flyway properties configuration file.

LANGUAGE: properties
CODE:
flyway.plugins.vault.secrets=kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2

----------------------------------------

TITLE: Configuring Flyway Files in Gradle
DESCRIPTION: Example of setting Flyway configuration files in a Gradle build script using the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    configFiles = ['my.conf']
}

----------------------------------------

TITLE: Setting Dapr URL via Java API
DESCRIPTION: Programmatically configures the Dapr URL using Flyway's Java API

LANGUAGE: java
CODE:
DaprConfigurationExtension daprConfigurationExtension = configuration.getPluginRegister().getPlugin(DaprConfigurationExtension.class)
daprConfigurationExtension.setDaprUrl("http://localhost:3500/v1.0/secrets/my-secrets-store");

----------------------------------------

TITLE: Configuring Flyway Encoding via Java API
DESCRIPTION: Example of setting UTF-16 encoding using Flyway's Java API configuration

LANGUAGE: java
CODE:
Flyway.configure()
    .encoding("UTF-16")
    .load()

----------------------------------------

TITLE: Configuring Vault Secrets via Command Line
DESCRIPTION: Example of specifying Vault secret paths using Flyway command line interface. Demonstrates setting multiple secret paths separated by commas.

LANGUAGE: powershell
CODE:
./flyway -plugins.vault.secrets="kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2" info

----------------------------------------

TITLE: Configuring Flyway Group via Commandline
DESCRIPTION: Sets the group parameter to true using Flyway's command line interface. This enables grouping of pending migrations in a single transaction.

LANGUAGE: powershell
CODE:
./flyway -group="true" info

----------------------------------------

TITLE: Setting Clean Disabled in Gradle for Flyway
DESCRIPTION: Shows how to configure the cleanDisabled option in a Gradle build script for Flyway. This allows the clean operation to be executed when running Flyway tasks through Gradle.

LANGUAGE: groovy
CODE:
flyway {
    cleanDisabled = false
}

----------------------------------------

TITLE: Setting Connect Retries in Properties File
DESCRIPTION: Configures database connection retries using a properties file configuration. Defines the flyway.connectRetries property.

LANGUAGE: properties
CODE:
flyway.connectRetries=10

----------------------------------------

TITLE: Setting Vault Secrets via Java API
DESCRIPTION: Example of programmatically configuring Vault secrets using the Flyway Java API.

LANGUAGE: java
CODE:
VaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)
vaultConfigurationExtension.setVaultSecrets("kv/data/flyway/flywayConfig1", "kv/flyway/flywayConfig2");

----------------------------------------

TITLE: Generating JSON Output for Flyway Info Command
DESCRIPTION: Sample JSON output from the Flyway 'info' command, showing migration details including category, version, description, and state.

LANGUAGE: json
CODE:
{
  "schemaVersion": null,
  "schemaName": "public",
  "migrations": [
    {
      "category": "Versioned",
      "version": "1",
      "description": "first",
      "type": "SQL",
      "installedOnUTC": "",
      "state": "Pending",
      "undoable": "No",
      "filepath": "C:\\flyway\\sql\\V1__first.sql",
      "installedBy": "",
      "executionTime": 0
    },
    {
      "category": "Repeatable",
      "version": "",
      "description": "repeatable",
      "type": "SQL",
      "installedOnUTC": "",
      "state": "Pending",
      "undoable": "",
      "filepath": "C:\\flyway\\sql\\R__repeatable.sql",
      "installedBy": "",
      "executionTime": 0
    }
  ],
  "allSchemasEmpty": false,
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "info"
}

----------------------------------------

TITLE: Configuring Baseline Description in Properties File
DESCRIPTION: Demonstrates setting the baseline description in Flyway's configuration properties file.

LANGUAGE: properties
CODE:
flyway.baselineDescription=Baseline

----------------------------------------

TITLE: Setting Baseline Description via Command Line
DESCRIPTION: Shows how to set the baseline description parameter using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -baselineDescription="Baseline" baseline

----------------------------------------

TITLE: Configuring Baseline Description in Properties File
DESCRIPTION: Demonstrates setting the baseline description in Flyway's configuration properties file.

LANGUAGE: properties
CODE:
flyway.baselineDescription=Baseline

----------------------------------------

TITLE: Setting SQL Migration Separator via Flyway Command Line
DESCRIPTION: This snippet demonstrates how to set the SQL migration separator using the Flyway command line interface. It uses the '-sqlMigrationSeparator' flag to set the separator to a hyphen.

LANGUAGE: powershell
CODE:
./flyway -sqlMigrationSeparator="-" info

----------------------------------------

TITLE: Configuring Default Schema in Flyway Java API
DESCRIPTION: This Java code snippet shows how to set the default schema when configuring Flyway programmatically using the Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .defaultSchema("schema2")
    .load()

----------------------------------------

TITLE: Setting Connect Retries Interval in Properties File
DESCRIPTION: Configures the connection retry interval through Flyway properties configuration file. The value represents the maximum seconds between retry attempts.

LANGUAGE: properties
CODE:
flyway.connectRetriesInterval=60

----------------------------------------

TITLE: Adding MariaDB Teams Dependencies in Gradle
DESCRIPTION: Gradle dependency configuration for adding Flyway MariaDB support in teams edition.

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb.enterprise:flyway-mysql"
}

----------------------------------------

TITLE: Setting Baseline Version via Environment Variable
DESCRIPTION: Sets the baseline version using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_BASELINE_VERSION=0.0

----------------------------------------

TITLE: Setting GCSM Project via Command Line in Flyway
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project using Flyway's command line interface. This command sets the project to 'quixotic-ferret-345678' and runs the 'info' command.

LANGUAGE: powershell
CODE:
./flyway -plugins.gcsm.project="quixotic-ferret-345678" info

----------------------------------------

TITLE: Setting Placeholder Suffix via Commandline in PowerShell
DESCRIPTION: This snippet demonstrates how to set the placeholder suffix using the Flyway command-line interface in PowerShell. It sets the suffix to '$$' and runs the 'info' command.

LANGUAGE: powershell
CODE:
./flyway -placeholderSuffix="$$" info

----------------------------------------

TITLE: Configuring PostgreSQL Transactional Lock via Command Line in PowerShell
DESCRIPTION: Sets the PostgreSQL transactional lock to false using Flyway's command line interface in PowerShell. This disables transactional advisory locks and uses session-level locks instead.

LANGUAGE: powershell
CODE:
./flyway -postgresql.transactional.lock=false info

----------------------------------------

TITLE: Setting Dapr URL in Maven
DESCRIPTION: Configures the Dapr URL in Maven build configuration for Flyway

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <daprUrl>http://localhost:3500/v1.0/secrets/my-secrets-store</daprUrl>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Defining Connect Retries Interval in Maven
DESCRIPTION: Sets the connection retry interval in Maven project configuration. The value specifies the maximum seconds between connection retry attempts.

LANGUAGE: xml
CODE:
<configuration>
    <connectRetriesInterval>60</connectRetriesInterval>
</configuration>

----------------------------------------

TITLE: Configuring JDBC URL for YugabyteDB in Flyway
DESCRIPTION: Specifies the JDBC URL format for connecting to YugabyteDB databases using Flyway. Includes options for SSL support.

LANGUAGE: plaintext
CODE:
jdbc:postgresql://<host>:<port>/<database>

----------------------------------------

TITLE: Executing Flyway Undo Command and Viewing Console Output
DESCRIPTION: This snippet demonstrates the execution of the Flyway undo command and its console output. It shows the current database version, the undone migration, and the execution time.

LANGUAGE: console
CODE:
> flyway undo

Flyway {{ site.flywayVersion }} by Redgate

Database: jdbc:h2:file:C:\Programs\flyway-0-SNAPSHOT\flyway.db (H2 1.3)
Current version of schema "PUBLIC": 1
Undoing migration of schema "PUBLIC" to version 1 - First
Successfully undid 1 migration to schema "PUBLIC" (execution time 00:00.024s).

----------------------------------------

TITLE: Setting Baseline Version in Properties File
DESCRIPTION: Configures the baseline version in Flyway's configuration file.

LANGUAGE: properties
CODE:
flyway.baselineVersion=0.0

----------------------------------------

TITLE: Configuring GCSM Secrets via Environment Variable
DESCRIPTION: This snippet illustrates how to set Google Cloud Secret Manager secrets using an environment variable. It uses the FLYWAY_PLUGINS_GCSM_SECRETS variable to provide a comma-separated list of secret paths.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_GCSM_SECRETS=secret1,secret2

----------------------------------------

TITLE: Configuring Placeholder Replacement via Command Line
DESCRIPTION: Example of disabling placeholder replacement using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -placeholderReplacement="false" info

----------------------------------------

TITLE: Configuring SQL Migration Separator in Flyway Java API
DESCRIPTION: This example demonstrates how to set the SQL migration separator using the Flyway Java API. It uses the 'sqlMigrationSeparator' method to set the separator to a hyphen.

LANGUAGE: java
CODE:
Flyway.configure()
    .sqlMigrationSeparator("-")
    .load()

----------------------------------------

TITLE: Setting Flyway Resolver in Gradle Build Script
DESCRIPTION: Demonstrates how to configure a custom MigrationResolver in a Gradle build script for projects using the Flyway Gradle plugin.

LANGUAGE: groovy
CODE:
flyway {
    resolvers = 'my.resolver.MigrationResolver'
}

----------------------------------------

TITLE: Setting Installed By in Flyway Java API
DESCRIPTION: Demonstrates how to set the 'installedBy' parameter using the Flyway Java API. This code configures Flyway to use 'ci-pipeline' as the username.

LANGUAGE: java
CODE:
Flyway.configure()
    .installedBy("ci-pipeline")
    .load()

----------------------------------------

TITLE: Configuring Cherry Pick in Flyway Properties File
DESCRIPTION: This snippet shows how to set the cherryPick option in a Flyway configuration file.

LANGUAGE: properties
CODE:
flyway.cherryPick=2.0

----------------------------------------

TITLE: Setting Batch Mode via Environment Variable
DESCRIPTION: Enables batch execution mode using environment variables.

LANGUAGE: properties
CODE:
FLYWAY_BATCH=true

----------------------------------------

TITLE: Setting Oracle Kerberos Cache File via Command Line in PowerShell
DESCRIPTION: This snippet demonstrates how to set the Oracle Kerberos Cache File location using the Flyway command line interface in PowerShell. It specifies the path to the credential cache file.

LANGUAGE: powershell
CODE:
./flyway -oracle.kerberosCacheFile="/temp/krb5cc_123" info

----------------------------------------

TITLE: Configuring Oracle Kerberos Cache File in Flyway Properties File
DESCRIPTION: This snippet shows how to set the Oracle Kerberos Cache File location in a Flyway configuration file using the properties format. It specifies the path to the credential cache file.

LANGUAGE: properties
CODE:
flyway.oracle.kerberosCacheFile=/temp/krb5cc_123

----------------------------------------

TITLE: Configuring Connect Retries Interval via Java API
DESCRIPTION: Programmatically sets the connection retry interval using Flyway's Java API. The interval is specified in seconds through the configuration builder.

LANGUAGE: java
CODE:
Flyway.configure()
    .connectRetriesInterval(60)
    .load()

----------------------------------------

TITLE: Setting skipDefaultResolvers in Flyway CLI (PowerShell)
DESCRIPTION: Demonstrates how to set the skipDefaultResolvers parameter to true when using Flyway's command-line interface in PowerShell.

LANGUAGE: powershell
CODE:
./flyway -skipDefaultResolvers="true" info

----------------------------------------

TITLE: Configuring Flyway Driver via Environment Variable
DESCRIPTION: Setting the JDBC driver class using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_DRIVER=com.microsoft.sqlserver.jdbc.SQLServerDriver

----------------------------------------

TITLE: Example SQL Script for HSQLDB in Flyway
DESCRIPTION: This SQL script demonstrates various syntax elements supported in HSQLDB migrations with Flyway. It includes table creation, data insertion with a placeholder, and a trigger definition.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  value VARCHAR(25) NOT NULL PRIMARY KEY
);

/*
Multi-line
comment
*/

-- Sql-style comment

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

CREATE TRIGGER uniqueidx_trigger BEFORE INSERT ON usertable
	REFERENCING NEW ROW AS newrow
    FOR EACH ROW WHEN (newrow.name is not null)
	BEGIN ATOMIC
      IF EXISTS (SELECT * FROM usertable WHERE usertable.name = newrow.name) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'duplicate name';
      END IF;
    END;

----------------------------------------

TITLE: Configuring Clean Disabled in Flyway Properties File
DESCRIPTION: Shows how to set the cleanDisabled option to false in a Flyway configuration file. This allows the clean operation to be performed when using this configuration.

LANGUAGE: properties
CODE:
flyway.cleanDisabled=false

----------------------------------------

TITLE: Configuring Error Overrides via Environment Variable
DESCRIPTION: Example of setting Flyway error overrides using environment variables. Demonstrates the environment variable syntax for error handling configuration.

LANGUAGE: properties
CODE:
FLYWAY_ERROR_OVERRIDES=STATE:12345:W

----------------------------------------

TITLE: Configuring Mixed Mode in Flyway via Commandline (PowerShell)
DESCRIPTION: This snippet demonstrates how to enable mixed mode for Flyway migrations using the command line interface in PowerShell. It sets the 'mixed' parameter to 'true' when running the 'info' command.

LANGUAGE: powershell
CODE:
./flyway -mixed="true" info

----------------------------------------

TITLE: Configuring PostgreSQL Transactional Lock in Gradle
DESCRIPTION: Sets the PostgreSQL transactional lock to false in a Gradle build script. This configuration is applied when running Flyway tasks through Gradle, affecting how Flyway manages database locks during migrations.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
      postgresqlTransactionalLock: false
    ]
}

----------------------------------------

TITLE: Setting skipDefaultResolvers in Flyway Gradle Configuration
DESCRIPTION: Shows how to set the skipDefaultResolvers parameter to true in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    skipDefaultResolvers = true
}

----------------------------------------

TITLE: Command Line Configuration Example
DESCRIPTION: Example of setting Flyway configuration parameters via command line

LANGUAGE: bash
CODE:
./flyway -url=jdbc:h2:mem:flyway info

----------------------------------------

TITLE: Setting Clean Disabled via Commandline in PowerShell
DESCRIPTION: Demonstrates how to disable the clean operation using the Flyway command-line interface in PowerShell. This allows the clean operation to be executed.

LANGUAGE: powershell
CODE:
./flyway -cleanDisabled="false" clean

----------------------------------------

TITLE: Setting Error Overrides in Flyway Properties File
DESCRIPTION: Configuration of error overrides using Flyway's properties file format. Shows how to specify error handling rules in a configuration file.

LANGUAGE: properties
CODE:
flyway.errorOverrides=STATE:12345:W

----------------------------------------

TITLE: Setting Flyway License Key in Gradle
DESCRIPTION: Shows how to configure the Flyway license key in a Gradle build script. This is useful for projects using Gradle as their build tool.

LANGUAGE: groovy
CODE:
flyway {
    licenseKey = 'FL01...'
}

----------------------------------------

TITLE: Setting PostgreSQL Transactional Lock in Flyway Configuration File
DESCRIPTION: Configures the PostgreSQL transactional lock setting to false in Flyway's properties configuration file. This setting affects how Flyway manages locks during database migrations.

LANGUAGE: properties
CODE:
flyway.postgresql.transactional.lock=false

----------------------------------------

TITLE: Configuring Flyway Enterprise Plugin and License Key in Gradle
DESCRIPTION: Example of configuring the Flyway Enterprise Gradle plugin and setting the license key in the flyway configuration block.

LANGUAGE: groovy
CODE:
plugins {
    id "org.flywaydb.enterprise.flyway" version "{{ site.flywayVersion }}"
}

flyway {
    licenseKey = 'FL01...'
}

----------------------------------------

TITLE: Configuring Skip Default Callbacks in Properties File
DESCRIPTION: Configuration setting to skip default callbacks in Flyway properties file

LANGUAGE: properties
CODE:
flyway.skipDefaultCallbacks=true

----------------------------------------

TITLE: Executing SQL and SPL Statements in Informix with Flyway
DESCRIPTION: This snippet demonstrates various SQL and SPL statements that can be used in Flyway migrations for Informix. It includes creating sequences, tables, inserting data, and defining stored procedures and functions.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE SEQUENCE seq_2
   INCREMENT BY 1 START WITH 1
   MAXVALUE 30 MINVALUE 0
   NOCYCLE CACHE 10 ORDER;

CREATE TABLE tab1 (col1 int, col2 int);
INSERT INTO tab1 VALUES (0, 0);

INSERT INTO tab1 (col1, col2) VALUES (seq_2.NEXTVAL, seq_2.NEXTVAL);

/*
Multi-line
comment
*/
-- SPL
CREATE PROCEDURE raise_prices ( per_cent INT, selected_unit CHAR )
	UPDATE stock SET unit_price = unit_price + (unit_price * (per_cent/100) )
	where unit=selected_unit;
END PROCEDURE;

CREATE FUNCTION square ( num INT )
   RETURNING INT;
   return (num * num);
END FUNCTION
   DOCUMENT "USAGE: Update a price by a percentage",
         "Enter an integer percentage from 1 - 100",
         "and a part id number";

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: JSON Output for Flyway Repair Command
DESCRIPTION: This snippet shows a sample JSON output of the Flyway repair command. It includes information about repair actions taken, migrations affected, and general operation details.

LANGUAGE: json
CODE:
{
  "repairActions": [
    "ALIGNED APPLIED MIGRATION CHECKSUMS"
  ],
  "migrationsRemoved": [],
  "migrationsDeleted": [],
  "migrationsAligned": [
    {
      "version": "1",
      "description": "first",
      "filepath": "C:\\flyway\\sql\\V1__first.sql"
    }
  ],
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "repair"
}

----------------------------------------

TITLE: Setting cleanOnValidationError via Environment Variable
DESCRIPTION: This example demonstrates how to set the cleanOnValidationError option to true using an environment variable for Flyway configuration.

LANGUAGE: properties
CODE:
FLYWAY_CLEAN_ON_VALIDATION_ERROR=true

----------------------------------------

TITLE: Configuring Error Overrides via Commandline in Powershell
DESCRIPTION: Example of setting error overrides using Flyway's command-line interface in Powershell. Demonstrates how to override specific SQL state and error code behaviors.

LANGUAGE: powershell
CODE:
./flyway -errorOverrides="STATE:12345:W" clean

----------------------------------------

TITLE: Setting Flyway Loggers in Gradle
DESCRIPTION: Shows how to configure the 'loggers' parameter in a Gradle build script for Flyway tasks. This is useful when integrating Flyway migrations into a Gradle-based project.

LANGUAGE: groovy
CODE:
flyway {
    loggers = 'auto'
}

----------------------------------------

TITLE: Setting Kerberos Config File Path via Environment Variable for Flyway
DESCRIPTION: Illustrates how to set the Kerberos configuration file path using an environment variable for Flyway. The FLYWAY_KERBEROS_CONFIG_FILE environment variable is used to specify the path.

LANGUAGE: properties
CODE:
FLYWAY_KERBEROS_CONFIG_FILE=/path/to/krb5.ini

----------------------------------------

TITLE: Setting Skip Default Callbacks in Gradle
DESCRIPTION: Gradle build configuration to skip default callbacks in Flyway tasks

LANGUAGE: groovy
CODE:
flyway {
    skipDefaultCallbacks = true
}

----------------------------------------

TITLE: Configuring validateOnMigrate in Flyway Properties File
DESCRIPTION: Shows how to set the validateOnMigrate option to false in a Flyway configuration file.

LANGUAGE: properties
CODE:
flyway.validateOnMigrate=false

----------------------------------------

TITLE: Setting Flyway Config Encoding in Maven
DESCRIPTION: Maven XML configuration example for setting Flyway configuration file encoding.

LANGUAGE: xml
CODE:
<configuration>
    <configFileEncoding>UTF-16</configFileEncoding>
</configuration>

----------------------------------------

TITLE: Configuring Stream using Flyway Java API
DESCRIPTION: Enables streaming of SQL migrations using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .stream(true)
    .load()

----------------------------------------

TITLE: Configuring Out Of Order Migrations in Gradle
DESCRIPTION: This snippet shows how to enable out of order migrations in a Gradle build script. It sets the outOfOrder property to true within the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    outOfOrder = true
}

----------------------------------------

TITLE: Setting SQL Migration Prefix in Flyway Gradle Configuration
DESCRIPTION: This snippet shows how to set the SQL migration prefix in a Gradle build script for Flyway. It sets the sqlMigrationPrefix property to 'M' within the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    sqlMigrationPrefix = 'M'
}

----------------------------------------

TITLE: Configuring Flyway Resolver via Java API
DESCRIPTION: Illustrates how to programmatically set a custom MigrationResolver using the Flyway Java API. This method is useful when integrating Flyway directly into a Java application.

LANGUAGE: java
CODE:
Flyway.configure()
    .resolvers("my.resolver.MigrationResolver")
    .load()

----------------------------------------

TITLE: Configuring Flyway Target in Properties File
DESCRIPTION: Shows how to set the Flyway target version to 2.0 in a configuration file using the properties format. This setting will be applied when Flyway reads the configuration file.

LANGUAGE: properties
CODE:
flyway.target=2.0

----------------------------------------

TITLE: Configuring Repeatable SQL Migration Prefix in Flyway Properties File
DESCRIPTION: This configuration sets the repeatable SQL migration prefix to 'A' in a Flyway properties file.

LANGUAGE: properties
CODE:
flyway.repeatableSqlMigrationPrefix=A

----------------------------------------

TITLE: Executing Flyway Undo Command with JSON Output
DESCRIPTION: This snippet shows the execution of the Flyway undo command with JSON output. It includes details about the initial and target schema versions, undone migrations, and operation metadata.

LANGUAGE: console
CODE:
> flyway undo -outputType=json

{
  "initialSchemaVersion": "1",
  "targetSchemaVersion": null,
  "schemaName": "public",
  "undoneMigrations": [
    {
      "version": "1",
      "description": "undoFirst",
      "filepath": "C:\\flyway\\sql\\U1__undoFirst.sql",
      "executionTime": 0
    }
  ],
  "migrationsUndone": 1,
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "undo"
}

----------------------------------------

TITLE: Configuring Dapr URL via Environment Variable
DESCRIPTION: Sets the Dapr URL using environment variable configuration

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_DAPR_URL=http://localhost:3500/v1.0/secrets/my-secrets-store

----------------------------------------

TITLE: Environment Variable Substitution Example
DESCRIPTION: Shows how environment variables can be referenced in Flyway configuration files using ${variable} syntax.

LANGUAGE: properties
CODE:
flyway.placeholders.abc=${ABC}

----------------------------------------

TITLE: Configuring Oracle SQL*Plus in Flyway via Gradle
DESCRIPTION: This Gradle configuration snippet enables Oracle SQL*Plus support for Flyway. It sets the oracleSqlplus property to true within the flyway block.

LANGUAGE: groovy
CODE:
flyway {
    oracleSqlplus = true
}

----------------------------------------

TITLE: Setting SQL Migration Separator in Gradle Flyway Configuration
DESCRIPTION: This snippet shows how to set the SQL migration separator in a Gradle Flyway configuration. It uses the 'sqlMigrationSeparator' property to set the separator to a hyphen.

LANGUAGE: groovy
CODE:
flyway {
    sqlMigrationSeparator = '-'
}

----------------------------------------

TITLE: Setting SQL Migration Prefix via Commandline in Flyway
DESCRIPTION: This snippet demonstrates how to set the SQL migration prefix using the Flyway command-line interface. It uses the -sqlMigrationPrefix flag to set the prefix to 'M'.

LANGUAGE: powershell
CODE:
./flyway -sqlMigrationPrefix="M" info

----------------------------------------

TITLE: Configuring cleanOnValidationError in Flyway Properties File
DESCRIPTION: This snippet shows how to set the cleanOnValidationError option to true in a Flyway configuration file using the properties format.

LANGUAGE: properties
CODE:
flyway.cleanOnValidationError=true

----------------------------------------

TITLE: Setting GCSM Secrets in Flyway Configuration File
DESCRIPTION: This example shows how to configure Google Cloud Secret Manager secrets in a Flyway configuration file. It uses the flyway.plugins.gcsm.secrets property to specify a comma-separated list of secret paths.

LANGUAGE: properties
CODE:
flyway.plugins.gcsm.secrets=secret1,secret2

----------------------------------------

TITLE: Setting validateOnMigrate via Flyway Command Line (PowerShell)
DESCRIPTION: Demonstrates how to disable automatic validation during migration using the Flyway command line interface in PowerShell.

LANGUAGE: powershell
CODE:
./flyway -validateOnMigrate="false" migrate

----------------------------------------

TITLE: Setting baselineOnMigrate in Flyway Gradle Configuration
DESCRIPTION: Shows how to set the baselineOnMigrate option to true in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    baselineOnMigrate = true
}

----------------------------------------

TITLE: Enabling Out Of Order Migrations via Flyway Command Line
DESCRIPTION: This snippet demonstrates how to enable out of order migrations using the Flyway command line interface. It sets the outOfOrder parameter to true when running the info command.

LANGUAGE: powershell
CODE:
./flyway -outOfOrder="true" info

----------------------------------------

TITLE: Configuring Loggers in Flyway Java API
DESCRIPTION: Demonstrates how to set the 'loggers' parameter using Flyway's Java API. This method is used when integrating Flyway directly into Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .loggers("auto")
    .load()

----------------------------------------

TITLE: Setting SQL Migration Prefix via Environment Variable in Flyway
DESCRIPTION: This snippet illustrates how to set the SQL migration prefix using an environment variable in Flyway. It uses the FLYWAY_SQL_MIGRATION_PREFIX variable to set the prefix to 'M'.

LANGUAGE: properties
CODE:
FLYWAY_SQL_MIGRATION_PREFIX=M

----------------------------------------

TITLE: Setting Dapr URL in Flyway Properties File
DESCRIPTION: Configures the Dapr URL in Flyway properties configuration file

LANGUAGE: properties
CODE:
flyway.plugins.dapr.url=http://localhost:3500/v1.0/secrets/my-secrets-store

----------------------------------------

TITLE: Creating Tables and Indexes in SAP HANA
DESCRIPTION: This snippet demonstrates creating various types of tables and indexes in SAP HANA, including standard tables, column tables, and fulltext indexes.

LANGUAGE: sql
CODE:
CREATE TABLE t (a INT, b NVARCHAR(10), c NVARCHAR(20));
CREATE INDEX idx ON t(b);

CREATE COLUMN TABLE A (A VARCHAR(10) PRIMARY KEY, B VARCHAR(10));
CREATE FULLTEXT INDEX i ON A(A) FUZZY SEARCH INDEX OFF SYNC;

CREATE TABLE TARGET ( A INT);
CREATE TABLE control_tab(id INT PRIMARY KEY, name VARCHAR(30), payment INT);
CREATE TABLE message_box(message VARCHAR(200), log_time TIMESTAMP);

----------------------------------------

TITLE: Setting ignoreMigrationPatterns via Command Line in Powershell
DESCRIPTION: Demonstrates how to set the ignoreMigrationPatterns option when running Flyway from the command line using Powershell. This example ignores missing repeatable migrations during validation.

LANGUAGE: powershell
CODE:
./flyway -ignoreMigrationPatterns="repeatable:missing" validate

----------------------------------------

TITLE: Configuring Flyway Placeholder Separator in Maven POM
DESCRIPTION: Sets the placeholder separator to '_' in a Maven POM file for Flyway configuration. This affects how placeholders are processed in Flyway migrations executed through Maven.

LANGUAGE: xml
CODE:
<configuration>
    <placeholderSeparator>_</placeholderSeparator>
</configuration>

----------------------------------------

TITLE: Setting Repeatable SQL Migration Prefix in Gradle for Flyway
DESCRIPTION: This Gradle configuration sets the repeatable SQL migration prefix to 'A' for Flyway tasks.

LANGUAGE: groovy
CODE:
flyway {
    repeatableSqlMigrationPrefix = 'A'
}

----------------------------------------

TITLE: Setting Kerberos Config File Path in Flyway Gradle Configuration
DESCRIPTION: Shows how to set the Kerberos configuration file path in a Flyway Gradle configuration. The kerberosConfigFile property is used within the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    kerberosConfigFile = '/path/to/krb5.ini'
}

----------------------------------------

TITLE: Configuring Undo SQL Migration Prefix in Flyway Properties File
DESCRIPTION: Shows how to set the undoSqlMigrationPrefix to 'B' in a Flyway configuration file. This property determines the prefix used for undo SQL migration file names.

LANGUAGE: properties
CODE:
flyway.undoSqlMigrationPrefix=B

----------------------------------------

TITLE: Configuring Connect Retries in Maven
DESCRIPTION: Demonstrates connection retry configuration in Maven pom.xml. Sets the connectRetries value in the Flyway plugin configuration.

LANGUAGE: xml
CODE:
<configuration>
    <connectRetries>10</connectRetries>
</configuration>

----------------------------------------

TITLE: Setting Kerberos Config File Path via Commandline in Flyway (PowerShell)
DESCRIPTION: Demonstrates how to set the Kerberos configuration file path using the Flyway command-line interface in PowerShell. The -kerberosConfigFile parameter is used to specify the path to the Kerberos configuration file.

LANGUAGE: powershell
CODE:
./flyway -kerberosConfigFile="/path/to/krb5.ini" info

----------------------------------------

TITLE: Setting Installed By via Environment Variable
DESCRIPTION: Illustrates how to set the 'installedBy' parameter using an environment variable. This sets the username to 'ci-pipeline'.

LANGUAGE: properties
CODE:
FLYWAY_INSTALLED_BY=ci-pipeline

----------------------------------------

TITLE: Setting Flyway Schemas in Gradle Configuration
DESCRIPTION: Shows how to configure the managed schemas for Flyway in a Gradle build script. This configuration sets 'schema1' and 'schema2' as the managed schemas.

LANGUAGE: groovy
CODE:
flyway {
    schemas = ['schema1', 'schema2']
}

----------------------------------------

TITLE: Setting Oracle Wallet Location via Command Line
DESCRIPTION: Demonstrates how to set the Oracle Wallet location using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -oracle.walletLocation="/User/db/my_wallet" info

----------------------------------------

TITLE: Setting Flyway Encoding via Environment Variable
DESCRIPTION: Configuring UTF-16 encoding using environment variables

LANGUAGE: properties
CODE:
FLYWAY_ENCODING=UTF-16

----------------------------------------

TITLE: Setting Undo SQL Migration Prefix via Environment Variable
DESCRIPTION: Illustrates how to set the undoSqlMigrationPrefix to 'B' using an environment variable. This method allows for dynamic configuration of the undo SQL migration file prefix.

LANGUAGE: properties
CODE:
FLYWAY_UNDO_SQL_MIGRATION_PREFIX=B

----------------------------------------

TITLE: Adding MySQL Support with Gradle - Teams Edition
DESCRIPTION: Gradle dependency configuration for adding MySQL support to Flyway Teams Edition.

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb.enterprise:flyway-mysql"
}

----------------------------------------

TITLE: Creating Tables and Procedures in TiDB using MySQL Syntax
DESCRIPTION: Example demonstrating TiDB SQL syntax including table creation, stored procedure definition, and data insertion. Shows various comment styles and placeholder usage compatible with MySQL syntax.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL,
 PRIMARY KEY(value)
);

/*
Multi-line
comment
*/

-- MySQL procedure
DELIMITER //
CREATE PROCEDURE AddData()
 BEGIN
   # MySQL-style single line comment
   INSERT INTO test_data (value) VALUES ('Hello');
 END //
DELIMITER;

CALL AddData();

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Oracle SQL*Plus Warnings in Gradle
DESCRIPTION: Shows how to enable Oracle SQL*Plus warnings in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    oracleSqlplusWarn = true
}

----------------------------------------

TITLE: Configuring SQL Migration Suffixes in Flyway Java API
DESCRIPTION: This code example demonstrates how to set SQL migration suffixes using the Flyway Java API. It allows specifying multiple file extensions for SQL migrations.

LANGUAGE: java
CODE:
Flyway.configure()
    .sqlMigrationSuffixes(".sql,.pkg,.pkb")
    .load()

----------------------------------------

TITLE: Setting Error Overrides in Gradle Configuration
DESCRIPTION: Gradle build configuration for Flyway error overrides. Demonstrates how to specify error handling rules in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    errorOverrides = 'STATE:12345:W'
}

----------------------------------------

TITLE: Setting Oracle Wallet Location via Environment Variable
DESCRIPTION: Demonstrates setting the Oracle Wallet location using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_ORACLE_WALLET_LOCATION=/User/db/my_wallet

----------------------------------------

TITLE: Setting Placeholder Replacement in Properties File
DESCRIPTION: Example of disabling placeholder replacement using a Flyway properties configuration file.

LANGUAGE: properties
CODE:
flyway.placeholderReplacement=false

----------------------------------------

TITLE: Configuring Script Placeholder Suffix in Maven
DESCRIPTION: Demonstrates setting the script placeholder suffix in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <scriptPlaceholderSuffix>__P</scriptPlaceholderSuffix>
</configuration>

----------------------------------------

TITLE: Setting Oracle Wallet Location in Gradle
DESCRIPTION: Demonstrates how to set the Oracle Wallet location in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    oracleWalletLocation = '/User/db/my_wallet'
}

----------------------------------------

TITLE: Configuring SQL Migration Prefix in Flyway Java API
DESCRIPTION: This snippet demonstrates how to set the SQL migration prefix using the Flyway Java API. It uses the sqlMigrationPrefix() method to set the prefix to 'M' when configuring Flyway.

LANGUAGE: java
CODE:
Flyway.configure()
    .sqlMigrationPrefix("M")
    .load()

----------------------------------------

TITLE: Flyway Maven Plugin Configuration
DESCRIPTION: Comprehensive XML configuration for the Flyway Maven plugin, including database connection settings, migration locations, callbacks, and various other options

LANGUAGE: xml
CODE:
<configuration>
    <driver>org.hsqldb.jdbcDriver</driver>
    <url>jdbc:hsqldb:file:${project.build.directory}/db/flyway_sample;shutdown=true</url>
    <user>SA</user>
    <password>mySecretPwd</password>
    <connectRetries>10</connectRetries>
    <initSql>SET ROLE 'myuser'</initSql>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
        <schema>schema3</schema>
    </schemas>
    <table>schema_history</table>
    <locations>
        <location>classpath:migrations1</location>
        <location>migrations2</location>
        <location>filesystem:/sql-migrations</location>
        <location>s3:migrationsBucket</location>
        <location>gcs:migrationsBucket</location>    
    </locations>
    <sqlMigrationPrefix>Migration-</sqlMigrationPrefix>
    <undoSqlMigrationPrefix>downgrade</undoSqlMigrationPrefix>
    <sqlMigrationSeparator>__</sqlMigrationSeparator>
    <sqlMigrationSuffixes>
        <sqlMigrationSuffix>.sql</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkg</sqlMigrationSuffix>
        <sqlMigrationSuffix>.pkb</sqlMigrationSuffix>
    </sqlMigrationSuffixes>
    <encoding>ISO-8859-1</encoding>
    <placeholderReplacement>true</placeholderReplacement>
    <placeholders>
        <aplaceholder>value</aplaceholder>
        <otherplaceholder>value123</otherplaceholder>
    </placeholders>
    <placeholderPrefix>#[</placeholderPrefix>
    <placeholderSuffix>]</placeholderSuffix>
    <resolvers>
        <resolver>com.mycompany.project.CustomResolver</resolver>
        <resolver>com.mycompany.project.AnotherResolver</resolver>
    </resolvers>
    <skipDefaultResolvers>false</skipDefaultResolvers>
    <callbacks>
        <callback>com.mycompany.project.CustomCallback</callback>
        <callback>com.mycompany.project.AnotherCallback</callback>
    </callbacks>
    <skipDefaultCallbacks>false</skipDefaultCallbacks>
    <outputQueryResults>false</outputQueryResults>
    <target>1.1</target>
    <mixed>false</mixed>
    <group>false</group>
    <cleanOnValidationError>false</cleanOnValidationError>
    <installedBy>my-user</installedBy>
    <skip>false</skip>
    <configFiles>
        <configFile>myConfig.conf</configFile>
        <configFile>other.conf</configFile>
    </configFiles>
    <workingDirectory>/my/working/dir</workingDirectory>
    <errorOverrides>
        <errorOverride>99999:17110:E</errorOverride>
        <errorOverride>42001:42001:W</errorOverride>
    </errorOverrides>
    <dryRunOutput>/my/sql/dryrun-outputfile.sql</dryRunOutput>
    <lockRetryCount>10</lockRetryCount>
    <oracle.sqlplus>true</oracle.sqlplus>
    <oracle.sqlplusWarn>true</oracle.sqlplusWarn>
    <jdbcProperties>
      <myProperty>myValue</myProperty>
      <myOtherProperty>myOtherValue</myOtherProperty>
    </jdbcProperties>
</configuration>

----------------------------------------

TITLE: Setting failOnMissingLocations via Environment Variable
DESCRIPTION: Sets the failOnMissingLocations parameter using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_FAIL_ON_MISSING_LOCATIONS=true

----------------------------------------

TITLE: Setting Mixed Mode in Flyway Configuration File (Properties)
DESCRIPTION: This code shows how to enable mixed mode in Flyway using a configuration file. It sets the 'flyway.mixed' property to 'true'.

LANGUAGE: properties
CODE:
flyway.mixed=true

----------------------------------------

TITLE: Setting Flyway Placeholder Separator in Gradle
DESCRIPTION: Configures the placeholder separator as '_' in a Gradle build script for Flyway. This affects how placeholders are interpreted in Flyway migrations run through Gradle.

LANGUAGE: groovy
CODE:
flyway {
    placeholderSeparator = '_'
}

----------------------------------------

TITLE: Unsetting ignoreMigrationPatterns in Flyway Properties File
DESCRIPTION: Demonstrates how to unset the ignoreMigrationPatterns option in a Flyway configuration file, which removes the default behavior of ignoring future migrations.

LANGUAGE: properties
CODE:
flyway.ignoreMigrationPatterns=

----------------------------------------

TITLE: Configuring failOnMissingLocations via Command Line
DESCRIPTION: Sets the failOnMissingLocations parameter using Flyway's command line interface. This determines if Flyway should fail when specified migration locations are missing.

LANGUAGE: powershell
CODE:
./flyway -failOnMissingLocations="true" migrate

----------------------------------------

TITLE: Setting Out Of Order Migrations via Environment Variable
DESCRIPTION: This snippet illustrates how to enable out of order migrations using an environment variable. It sets the FLYWAY_OUT_OF_ORDER variable to true.

LANGUAGE: properties
CODE:
FLYWAY_OUT_OF_ORDER=true

----------------------------------------

TITLE: Setting skipDefaultResolvers as an Environment Variable
DESCRIPTION: Illustrates how to set the skipDefaultResolvers parameter to true using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_SKIP_DEFAULT_RESOLVERS=true

----------------------------------------

TITLE: Creating Invalid SQL Migration
DESCRIPTION: Example of a broken SQL statement used to demonstrate error handling

LANGUAGE: sql
CODE:
broken sql statement;

----------------------------------------

TITLE: Configuring Vault URL via Command Line in Flyway
DESCRIPTION: Example of setting the Vault URL using Flyway's command line interface with PowerShell.

LANGUAGE: powershell
CODE:
./flyway -plugins.vault.url="http://localhost:8200/v1/" info

----------------------------------------

TITLE: Configuring Placeholder Suffix in Flyway Java API
DESCRIPTION: This snippet shows how to set the placeholder suffix using the Flyway Java API. It uses the 'placeholderSuffix' method to set the suffix to '$$' during Flyway configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .placeholderSuffix("$$")
    .load()

----------------------------------------

TITLE: Configuring SQL Migration Separator in Maven Flyway Plugin
DESCRIPTION: This example illustrates how to set the SQL migration separator in a Maven Flyway plugin configuration. It uses the 'sqlMigrationSeparator' element to set the separator to a hyphen.

LANGUAGE: xml
CODE:
<configuration>
    <sqlMigrationSeparator>-</sqlMigrationSeparator>
</configuration>

----------------------------------------

TITLE: Setting Output Query Results in Flyway Maven Plugin
DESCRIPTION: Shows how to configure the output query results option in a Maven POM file for Flyway. This setting determines if Flyway should display tables with query results when executing migrations.

LANGUAGE: xml
CODE:
<configuration>
    <outputQueryResults>false</outputQueryResults>
</configuration>

----------------------------------------

TITLE: Installing Windows JRE via Maven
DESCRIPTION: Maven command to install the Windows x64 JRE 11.0.2 into the local Maven repository. This is required for building platform-specific packages of the Flyway command-line tool.

LANGUAGE: shell
CODE:
mvn install:install-file -DgroupId=net.adoptopenjdk \
-DartifactId=jre \
-Dclassifier=windows-x64 \
-Dtype=zip \
-Dversion=11.0.2 \
-Dpackaging=zip \
-Dfile=path/to/OpenJDK11U-jre_x64_windows_hotspot_11.0.2_9.zip

----------------------------------------

TITLE: HTML Layout Configuration
DESCRIPTION: Front matter configuration for the documentation page layout, defining the menu item and subtitle.

LANGUAGE: html
CODE:
---
layout: documentation
menu: stayingUpToDate
subtitle: Staying Up To Date
---

----------------------------------------

TITLE: Setting Oracle Kerberos Cache File via Environment Variable
DESCRIPTION: This snippet demonstrates how to set the Oracle Kerberos Cache File location using an environment variable. It specifies the path to the credential cache file.

LANGUAGE: properties
CODE:
FLYWAY_ORACLE_KERBEROS_CACHE_FILE=/temp/krb5cc_123

----------------------------------------

TITLE: Configuring Placeholder Replacement via Environment Variable
DESCRIPTION: Example of disabling placeholder replacement using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_PLACEHOLDER_REPLACEMENT=false

----------------------------------------

TITLE: Setting Placeholder Suffix in Gradle Build Script
DESCRIPTION: This snippet demonstrates how to set the placeholder suffix in a Gradle build script for Flyway. It sets the 'placeholderSuffix' property to '$$' within the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    placeholderSuffix = '$$'
}

----------------------------------------

TITLE: Configuring failOnMissingLocations in Java API
DESCRIPTION: Demonstrates how to set the failOnMissingLocations parameter using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .failOnMissingLocations(true)
    .load()

----------------------------------------

TITLE: Configuring Connect Retries Interval via Command Line
DESCRIPTION: Sets the maximum time between database connection retry attempts using Flyway CLI command. The interval is specified in seconds.

LANGUAGE: powershell
CODE:
./flyway -connectRetriesInterval=60 info

----------------------------------------

TITLE: Configuring Output Query Results in Flyway Gradle Plugin
DESCRIPTION: Demonstrates how to set the output query results option in a Gradle build script for Flyway. This configuration controls whether Flyway outputs tables with query results during migration execution.

LANGUAGE: groovy
CODE:
flyway {
    outputQueryResults = false
}

----------------------------------------

TITLE: Specifying Maven Coordinates for YugabyteDB Driver in Flyway
DESCRIPTION: Provides the Maven Central coordinates for the PostgreSQL driver used with YugabyteDB in Flyway projects.

LANGUAGE: xml
CODE:
org.postgresql:postgresql:42.2.14

----------------------------------------

TITLE: Authenticating with Flyway Hub CLI
DESCRIPTION: Command to authenticate with Flyway Hub. Opens a browser window for authentication flow.

LANGUAGE: bash
CODE:
flywayhub auth

----------------------------------------

TITLE: Setting Oracle Kerberos Cache File in Gradle for Flyway
DESCRIPTION: This snippet demonstrates how to set the Oracle Kerberos Cache File location in a Gradle build script for Flyway. It specifies the path to the credential cache file within the flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    oracleKerberosCacheFile = '/temp/krb5cc_123'
}

----------------------------------------

TITLE: Configuring Script Placeholder Suffix via Java API
DESCRIPTION: Demonstrates how to set the script placeholder suffix using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .scriptPlaceholderSuffix("__P")
    .load()

----------------------------------------

TITLE: Setting Connect Retries via Environment Variable
DESCRIPTION: Specifies the maximum connection retries using an environment variable configuration. Uses the FLYWAY_CONNECT_RETRIES environment variable.

LANGUAGE: properties
CODE:
FLYWAY_CONNECT_RETRIES=10

----------------------------------------

TITLE: Setting Flyway Placeholder Separator via Environment Variable
DESCRIPTION: Sets the Flyway placeholder separator to '_' using an environment variable. This method allows for system-wide configuration of the separator.

LANGUAGE: properties
CODE:
FLYWAY_PLACEHOLDER_SEPARATOR=_

----------------------------------------

TITLE: Configuring Mixed Mode in Flyway Maven Plugin (XML)
DESCRIPTION: This code illustrates how to enable mixed mode for Flyway in a Maven project's configuration. It sets the 'mixed' element to 'true' within the plugin's configuration block.

LANGUAGE: xml
CODE:
<configuration>
    <mixed>true</mixed>
</configuration>

----------------------------------------

TITLE: Creating Maven Project with Archetype
DESCRIPTION: Command to generate a new Maven project using the maven-archetype-quickstart archetype. This sets up the basic project structure for the Flyway tutorial.

LANGUAGE: shell
CODE:
mvn archetype:generate -B ^
    -DarchetypeGroupId=org.apache.maven.archetypes ^
    -DarchetypeArtifactId=maven-archetype-quickstart ^
    -DarchetypeVersion=1.1 ^
    -DgroupId=foo ^
    -DartifactId=bar ^
    -Dversion=1.0-SNAPSHOT ^
    -Dpackage=foobar

----------------------------------------

TITLE: Setting SQL Migration Separator via Environment Variable
DESCRIPTION: This snippet illustrates how to set the SQL migration separator using an environment variable. It uses the 'FLYWAY_SQL_MIGRATION_SEPARATOR' variable to set the separator to a hyphen.

LANGUAGE: properties
CODE:
FLYWAY_SQL_MIGRATION_SEPARATOR=-

----------------------------------------

TITLE: Setting Placeholder Replacement in Java API
DESCRIPTION: Example of disabling placeholder replacement using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .placeholderReplacement(false)
    .load()

----------------------------------------

TITLE: Flyway Group Environment Variable Configuration
DESCRIPTION: Sets up migration grouping using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_GROUP=true

----------------------------------------

TITLE: Configuring Dry Run Output in Gradle
DESCRIPTION: Setting the dry run output path in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    dryRunOutput = '/my/output/file.sql'
}

----------------------------------------

TITLE: Setting Flyway Group in Properties File
DESCRIPTION: Configures migration grouping through Flyway's configuration file using properties format.

LANGUAGE: properties
CODE:
flyway.group=true

----------------------------------------

TITLE: Configuring Flyway Placeholders in Gradle
DESCRIPTION: Shows how to set placeholders in a Gradle build script for Flyway tasks. This is useful when integrating Flyway migrations into a Gradle-based project build process.

LANGUAGE: groovy
CODE:
flyway {
    placeholders = ['key1' : 'value1', 'key2' : 'value2']
}

----------------------------------------

TITLE: Enabling Oracle SQL*Plus in Flyway via Maven
DESCRIPTION: This Maven XML configuration enables Oracle SQL*Plus support for Flyway. It sets the oracleSqlplus element to true within the configuration block.

LANGUAGE: xml
CODE:
<configuration>
    <oracleSqlplus>true</oracleSqlplus>
</configuration>

----------------------------------------

TITLE: Creating Maven Project for Flyway API Integration
DESCRIPTION: Uses Maven archetype plugin to generate a new Java project structure for Flyway API integration.

LANGUAGE: shell
CODE:
mvn archetype:generate -B ^
    -DarchetypeGroupId=org.apache.maven.archetypes ^
    -DarchetypeArtifactId=maven-archetype-quickstart ^
    -DarchetypeVersion=1.1 ^
    -DgroupId=foo ^
    -DartifactId=bar ^
    -Dversion=1.0-SNAPSHOT ^
    -Dpackage=foobar

----------------------------------------

TITLE: Setting Flyway Group in Gradle
DESCRIPTION: Shows how to configure migration grouping in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    group = true
}

----------------------------------------

TITLE: Setting Flyway License Key as Environment Variable
DESCRIPTION: Illustrates how to set the Flyway license key as an environment variable. This method is useful for system-wide configurations or in containerized environments.

LANGUAGE: properties
CODE:
FLYWAY_LICENSE_KEY=FL01...

----------------------------------------

TITLE: Setting Placeholder Replacement in Maven
DESCRIPTION: Example of disabling placeholder replacement in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <placeholderReplacement>false</placeholderReplacement>
</configuration>

----------------------------------------

TITLE: Configuring Placeholder Suffix in Maven POM
DESCRIPTION: This snippet shows how to set the placeholder suffix in a Maven POM file for Flyway. It sets the 'placeholderSuffix' configuration element to '$$' within the Flyway plugin configuration.

LANGUAGE: xml
CODE:
<configuration>
    <placeholderSuffix>$$</placeholderSuffix>
</configuration>

----------------------------------------

TITLE: Kerberos Authentication Configuration for Oracle
DESCRIPTION: Example configuration for using Kerberos authentication with Oracle in Flyway.

LANGUAGE: properties
CODE:
flyway.oracle.kerberosConfigFile=/etc/krb5.conf
flyway.oracle.kerberosCacheFile=/tmp/krb5cc_123

----------------------------------------

TITLE: Configuring Maven for Flyway Pro Edition
DESCRIPTION: Maven configuration for Flyway Pro Edition, including repository setup and dependency. This snippet shows how to configure the Flyway repository and add the Pro Edition dependency.

LANGUAGE: xml
CODE:
<repositories>
    <repository>
        <id>flyway-repo</id>
        <url>https://repo.flywaydb.org/repo</url>
    </repository>
    ...
</repositories>

<dependencies>
    <dependency>
        <groupId>org.flywaydb.pro</groupId>
        <artifactId>flyway-core</artifactId>
        <version>{{ page.flywayVersion }}</version>
    </dependency>
    ...
</dependencies>

----------------------------------------

TITLE: Configuring Migration Naming Validation in Java API
DESCRIPTION: Programmatic configuration of migration naming validation using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .validateMigrationNaming(true)
    .load()

----------------------------------------

TITLE: Configuring Lock Retry Count in Gradle
DESCRIPTION: Sets the lock retry count in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    lockRetryCount = 10
}

----------------------------------------

TITLE: Configuring Vault Token in Flyway Properties File
DESCRIPTION: Demonstrates setting the Vault token in a Flyway configuration properties file.

LANGUAGE: properties
CODE:
flyway.plugins.vault.token=s.abcdefghijklmnopqrstuvwx

----------------------------------------

TITLE: Configuring Working Directory via PowerShell Command
DESCRIPTION: Sets the working directory for Flyway operations using the command line interface. This affects how relative paths are resolved for config files and locations.

LANGUAGE: powershell
CODE:
./flyway -workingDirectory="sql" info

----------------------------------------

TITLE: Configuring Batch Mode in Maven
DESCRIPTION: Enables batch execution mode in Maven build configuration.

LANGUAGE: xml
CODE:
<configuration>
    <batch>true</batch>
</configuration>

----------------------------------------

TITLE: Setting PostgreSQL Transactional Lock using Flyway Java API
DESCRIPTION: Demonstrates how to configure the PostgreSQL transactional lock setting programmatically using Flyway's Java API. This method is useful for applications that integrate Flyway directly and need to configure it dynamically.

LANGUAGE: java
CODE:
PostgreSQLConfigurationExtension configurationExtension = configuration.getPluginRegister().getPlugin(PostgreSQLConfigurationExtension.class)
configurationExtension.setTransactionalLock(false);

----------------------------------------

TITLE: Setting Init SQL via Environment Variable
DESCRIPTION: Illustrates how to set the initSql property using an environment variable. This method is useful for dynamic configuration without modifying files or command line arguments.

LANGUAGE: properties
CODE:
FLYWAY_INIT_SQL=ALTER SESSION SET NLS_LANGUAGE='ENGLISH';

----------------------------------------

TITLE: Configuring Maven for Flyway Enterprise Edition
DESCRIPTION: Maven configuration for Flyway Enterprise Edition, including repository setup and dependency. This snippet shows how to configure the Flyway repository and add the Enterprise Edition dependency.

LANGUAGE: xml
CODE:
<repositories>
    <repository>
        <id>flyway-repo</id>
        <url>https://repo.flywaydb.org/repo</url>
    </repository>
    ...
</repositories>

<dependencies>
    <dependency>
        <groupId>org.flywaydb.enterprise</groupId>
        <artifactId>flyway-core</artifactId>
        <version>{{ page.flywayVersion }}</version>
    </dependency>
    ...
</dependencies>

----------------------------------------

TITLE: Setting Stream in Flyway Configuration File
DESCRIPTION: Enables streaming of SQL migrations using Flyway's configuration file.

LANGUAGE: properties
CODE:
flyway.stream=true

----------------------------------------

TITLE: Configuring Vault Token in Maven POM
DESCRIPTION: Demonstrates how to set the Vault token in a Maven POM file for Flyway configuration.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <vaultToken>s.abcdefghijklmnopqrstuvwx</vaultToken>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Setting SQL Migration Suffixes in Flyway Gradle Configuration
DESCRIPTION: This snippet shows how to configure SQL migration suffixes in a Gradle build file for Flyway. It enables specifying multiple file extensions for SQL migrations.

LANGUAGE: groovy
CODE:
flyway {
    sqlMigrationSuffixes = '.sql,.pkg,.pkb'
}

----------------------------------------

TITLE: Defining Flyway Resolver as Environment Variable
DESCRIPTION: Shows how to set a custom MigrationResolver using an environment variable. This method can be useful for system-wide or containerized deployments.

LANGUAGE: properties
CODE:
FLYWAY_RESOLVERS=my.resolver.MigrationResolver

----------------------------------------

TITLE: Configuring Vault URL via Environment Variable
DESCRIPTION: Setting the Vault URL using an environment variable for Flyway configuration.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_VAULT_URL=http://localhost:8200/v1/

----------------------------------------

TITLE: Adding MariaDB Community Dependencies in Gradle
DESCRIPTION: Gradle dependency configuration for adding Flyway MariaDB support in community edition.

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb:flyway-mysql"
}

----------------------------------------

TITLE: Setting Flyway Teams Edition via Command Line
DESCRIPTION: Command to force Flyway to use Teams edition when running the info command from the command line interface.

LANGUAGE: powershell
CODE:
./flyway -teams info

----------------------------------------

TITLE: Adding SQL Server Dependency in Gradle
DESCRIPTION: Gradle configuration for adding the Flyway SQL Server dependency to a project. Includes examples for both Community and Teams editions.

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb:flyway-sqlserver"
}

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb.enterprise:flyway-sqlserver"
}

----------------------------------------

TITLE: Configuring Vault Secrets via Environment Variable
DESCRIPTION: Example of setting Vault secret paths using environment variables.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_VAULT_SECRETS=kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2

----------------------------------------

TITLE: Setting Stream in Gradle Configuration
DESCRIPTION: Enables streaming of SQL migrations in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    stream = true
}

----------------------------------------

TITLE: Setting Flyway Target in Gradle Build Script
DESCRIPTION: Shows how to set the Flyway target version to 2.0 in a Gradle build script. This configuration can be used when running Flyway tasks through Gradle.

LANGUAGE: groovy
CODE:
flyway {
    target = '2.0'
}

----------------------------------------

TITLE: Setting Schemas via Flyway Command-line (PowerShell)
DESCRIPTION: Demonstrates how to specify managed schemas using the Flyway command-line interface in PowerShell. This command sets 'schema1' and 'schema2' as the managed schemas and runs the 'info' command.

LANGUAGE: powershell
CODE:
./flyway -schemas="schema1,schema2" info

----------------------------------------

TITLE: Configuring Flyway Driver in Gradle
DESCRIPTION: Setting the JDBC driver class in a Gradle build configuration for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    driver = 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
}

----------------------------------------

TITLE: Enabling SSL for TimescaleDB Connection in Flyway
DESCRIPTION: Shows how to enable SSL support for TimescaleDB connections by appending a parameter to the JDBC URL.

LANGUAGE: plaintext
CODE:
?ssl=true

----------------------------------------

TITLE: Adding MySQL Support with Gradle - Community Edition
DESCRIPTION: Gradle dependency configuration for adding MySQL support to Flyway Community Edition.

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb:flyway-mysql"
}

----------------------------------------

TITLE: Configuring Dapr URL via Command Line in Powershell
DESCRIPTION: Sets the Dapr URL using Flyway command line interface in Powershell

LANGUAGE: powershell
CODE:
./flyway -plugins.dapr.url="http://localhost:3500/v1.0/secrets/my-secrets-store" info

----------------------------------------

TITLE: Setting detectEncoding via Environment Variable
DESCRIPTION: Illustrates how to enable detectEncoding using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_DETECT_ENCODING=true

----------------------------------------

TITLE: Setting Script Placeholder Prefix in Properties File
DESCRIPTION: Configure the script placeholder prefix using Flyway's configuration file.

LANGUAGE: properties
CODE:
flyway.scriptPlaceholderPrefix=P__

----------------------------------------

TITLE: Setting skipExecutingMigrations in Gradle Flyway Configuration
DESCRIPTION: This Gradle snippet shows how to enable skipExecutingMigrations within the Flyway configuration block.

LANGUAGE: groovy
CODE:
flyway {
    skipExecutingMigrations = true
}

----------------------------------------

TITLE: Setting Script Placeholder Prefix in Gradle
DESCRIPTION: Configure the script placeholder prefix in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    scriptPlaceholderPrefix = 'P__'
}

----------------------------------------

TITLE: Enabling Oracle SQL*Plus in Flyway via Java API
DESCRIPTION: This Java code snippet demonstrates how to enable Oracle SQL*Plus support when configuring Flyway through its Java API. It uses the oracleSqlplus() method set to true.

LANGUAGE: java
CODE:
Flyway.configure()
    .oracleSqlplus(true)
    .load()

----------------------------------------

TITLE: Configuring Dapr Secrets using Flyway Java API
DESCRIPTION: This Java code snippet demonstrates how to programmatically set Dapr Secrets for Flyway using the Java API. It retrieves the DaprConfigurationExtension plugin and sets the secrets.

LANGUAGE: java
CODE:
DaprConfigurationExtension daprConfigurationExtension = configuration.getPluginRegister().getPlugin(DaprConfigurationExtension.class)
daprConfigurationExtension.setDaprSecrets("secret1", "secret2");

----------------------------------------

TITLE: Configuring ignoreMigrationPatterns in Maven POM
DESCRIPTION: Shows how to set the ignoreMigrationPatterns option in a Maven POM file for Flyway. This example ignores missing repeatable migrations.

LANGUAGE: xml
CODE:
<configuration>
    <ignoreMigrationPatterns>
        <ignoreMigrationPattern>repeatable:missing</ignoreMigrationPattern>
    </ignoreMigrationPatterns>
</configuration>

----------------------------------------

TITLE: Firebird SQL Migration Example
DESCRIPTION: Example SQL migration script showing Firebird-specific syntax including comments, placeholders, and terminator changes

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
  value VARCHAR(25) NOT NULL PRIMARY KEY
);
 /*
Multi-line
comment
*/
 -- Sql-style comment
 -- Placeholder
ALTER TABLE ${tableName} ADD id INT NOT NULL;
 -- Terminator changes
SET TERM #;
CREATE OR ALTER PROCEDURE SHIP_ORDER (
    PO_NUM CHAR(8))
AS
BEGIN
  /* Stored procedure body */
END#
SET TERM ;#

----------------------------------------

TITLE: Configuring Skip Default Callbacks via Java API
DESCRIPTION: Java API configuration to skip default callbacks when initializing Flyway

LANGUAGE: java
CODE:
Flyway.configure()
    .skipDefaultCallbacks(true)
    .load()

----------------------------------------

TITLE: Setting GCSM Project in Flyway Configuration File
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project in Flyway's configuration file. This property sets the project to 'quixotic-ferret-345678'.

LANGUAGE: properties
CODE:
flyway.plugins.gcsm.project=quixotic-ferret-345678

----------------------------------------

TITLE: Setting Clean Disabled via Environment Variable
DESCRIPTION: Illustrates how to set the cleanDisabled option using an environment variable. This method can be useful for system-wide or containerized environments.

LANGUAGE: properties
CODE:
FLYWAY_CLEAN_DISABLED=false

----------------------------------------

TITLE: Configuring Flyway Target in Maven POM
DESCRIPTION: Illustrates how to set the Flyway target version to 2.0 in a Maven POM file. This XML configuration can be used when running Flyway through Maven.

LANGUAGE: xml
CODE:
<configuration>
    <target>2.0</target>
</configuration>

----------------------------------------

TITLE: Configuring Stream via Commandline in Flyway
DESCRIPTION: Enables streaming of SQL migrations using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -stream="true" info

----------------------------------------

TITLE: Configuring Init SQL in Flyway Properties File
DESCRIPTION: Shows how to set the initSql property in a Flyway configuration file. This method allows for persistent configuration across multiple Flyway executions.

LANGUAGE: properties
CODE:
flyway.initSql=ALTER SESSION SET NLS_LANGUAGE='ENGLISH';

----------------------------------------

TITLE: Configuring skipDefaultResolvers in Flyway Maven Plugin
DESCRIPTION: Illustrates how to set the skipDefaultResolvers parameter to true in a Maven pom.xml file for the Flyway Maven plugin.

LANGUAGE: xml
CODE:
<configuration>
    <skipDefaultResolvers>true</skipDefaultResolvers>
</configuration>

----------------------------------------

TITLE: Configuring SQL Migration Suffixes via Flyway Command Line
DESCRIPTION: This snippet demonstrates how to set SQL migration suffixes using the Flyway command line interface. It specifies multiple file extensions for SQL migrations.

LANGUAGE: powershell
CODE:
./flyway -sqlMigrationSuffixes=".sql,.pkg,.pkb" info

----------------------------------------

TITLE: Setting Flyway Config Encoding in Gradle
DESCRIPTION: Gradle configuration example for setting Flyway configuration file encoding.

LANGUAGE: groovy
CODE:
flyway {
    configFileEncoding = 'UTF-16'
}

----------------------------------------

TITLE: Using Placeholders in SAP HANA SQL Scripts
DESCRIPTION: This snippet shows how to use Flyway placeholders in SAP HANA SQL scripts. Placeholders allow for dynamic content in migration scripts.

LANGUAGE: sql
CODE:
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Oracle SQL*Plus in Flyway Configuration File
DESCRIPTION: This snippet shows how to enable Oracle SQL*Plus support in Flyway's configuration file. It sets the flyway.oracle.sqlplus property to true.

LANGUAGE: properties
CODE:
flyway.oracle.sqlplus=true

----------------------------------------

TITLE: Setting detectEncoding via Flyway Command Line
DESCRIPTION: Demonstrates how to enable the detectEncoding feature when using Flyway from the command line.

LANGUAGE: powershell
CODE:
./flyway -detectEncoding="true" migrate

----------------------------------------

TITLE: Configuring skipExecutingMigrations in Maven Flyway Plugin
DESCRIPTION: This XML snippet demonstrates how to set skipExecutingMigrations to true in the Maven Flyway plugin configuration.

LANGUAGE: xml
CODE:
<configuration>
    <skipExecutingMigrations>true</skipExecutingMigrations>
</configuration>

----------------------------------------

TITLE: Oracle Wallet Configuration for Flyway
DESCRIPTION: Instructions for configuring Flyway to use Oracle Wallet for authentication.

LANGUAGE: properties
CODE:
flyway.oracle.walletLocation=/path/to/wallet

----------------------------------------

TITLE: Configuring skipDefaultResolvers in Flyway Properties File
DESCRIPTION: Shows how to set the skipDefaultResolvers parameter to true in a Flyway configuration file using the properties format.

LANGUAGE: properties
CODE:
flyway.skipDefaultResolvers=true

----------------------------------------

TITLE: Setting Mixed Mode in Flyway Gradle Configuration (Groovy)
DESCRIPTION: This snippet shows how to enable mixed mode for Flyway in a Gradle build script using Groovy. It sets the 'mixed' property to true within the 'flyway' configuration block.

LANGUAGE: groovy
CODE:
flyway {
    mixed = true
}

----------------------------------------

TITLE: Configuring Schema Creation via Properties File
DESCRIPTION: Properties file configuration example showing how to disable automatic schema creation in Flyway.

LANGUAGE: properties
CODE:
flyway.createSchemas=false

----------------------------------------

TITLE: Identifying Drift in Flyway Check Report using PowerShell
DESCRIPTION: PowerShell script to parse the JSON output of Flyway Check and determine if drift has been detected in the most recent drift report.

LANGUAGE: powershell
CODE:
$ip = Get-Content "check_report.json" -Raw | convertfrom-json
# Extract all the objects that are drift reports
$drifts = $ip.individualResults | where-Object operation -eq "drift"
# check if there is anything in the list and look at the status of the last item in the list (most recent drift report)
if ( ($null -ne $drifts ) -and ($drifts[-1].driftDetected -eq "True") )
{
    Write-Output "Drift detected"
    exit 1
} else {
    exit 0
}

----------------------------------------

TITLE: Configuring detectEncoding in Gradle
DESCRIPTION: Shows how to enable detectEncoding in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    detectEncoding = true
}

----------------------------------------

TITLE: Setting Vault URL in Maven POM Configuration
DESCRIPTION: XML configuration for setting Vault URL in Maven POM file for Flyway plugin.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <vaultUrl>http://localhost:8200/v1/</vaultUrl>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Configuring skipExecutingMigrations via Commandline in Powershell
DESCRIPTION: This snippet demonstrates how to set the skipExecutingMigrations option to true when running Flyway migrate command via the command line.

LANGUAGE: powershell
CODE:
./flyway -skipExecutingMigrations="true" migrate

----------------------------------------

TITLE: Setting Skip Default Callbacks Environment Variable
DESCRIPTION: Environment variable configuration to skip default callbacks in Flyway

LANGUAGE: properties
CODE:
FLYWAY_SKIP_DEFAULT_CALLBACKS=true

----------------------------------------

TITLE: Configuring Dry Run Output via Environment Variable
DESCRIPTION: Setting the dry run output path using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_DRYRUN_OUTPUT=/my/output/file.sql

----------------------------------------

TITLE: Structuring Flyway Migrations in Release Folders
DESCRIPTION: This snippet demonstrates a common folder structure for organizing Flyway migrations into releases, with separate folders for migrations and test data.

LANGUAGE: plaintext
CODE:
 my-project
   release1.0
     migrations
       V1\_0\_\_createBaseStructure.sql
     test
       V1\_0\_1\_\_createTestData.sql
   release1.2
     migrations
       V1\_2\_\_createMoreTables.sql
     test
       V1\_2\_1\_\_createMoreTestData.sql

----------------------------------------

TITLE: Setting Script Placeholder Suffix in Properties File
DESCRIPTION: Configures the script placeholder suffix in Flyway's configuration properties file.

LANGUAGE: properties
CODE:
flyway.scriptPlaceholderSuffix=__P

----------------------------------------

TITLE: Configuring Mixed Mode in Flyway API (Java)
DESCRIPTION: This code demonstrates how to enable mixed mode when using the Flyway API in Java. It uses the 'mixed()' method to set the configuration to true before loading Flyway.

LANGUAGE: java
CODE:
Flyway.configure()
    .mixed(true)
    .load()

----------------------------------------

TITLE: Configuring Flyway Group in Maven
DESCRIPTION: Demonstrates how to set up migration grouping in a Maven configuration.

LANGUAGE: xml
CODE:
<configuration>
    <group>true</group>
</configuration>

----------------------------------------

TITLE: Configuring Vault Token via Java API
DESCRIPTION: Example of setting the Vault token programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
VaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)
vaultConfigurationExtension.setVaultToken("s.abcdefghijklmnopqrstuvwx");

----------------------------------------

TITLE: Setting Table Name via Environment Variable
DESCRIPTION: Defines the schema history table name using an environment variable

LANGUAGE: properties
CODE:
FLYWAY_TABLE=my_schema_history_table

----------------------------------------

TITLE: Configuring Placeholder Prefix in Maven
DESCRIPTION: Shows how to set the placeholder prefix in a Maven configuration file

LANGUAGE: xml
CODE:
<configuration>
    <placeholderPrefix>$$</placeholderPrefix>
</configuration>

----------------------------------------

TITLE: Setting failOnMissingLocations in Properties File
DESCRIPTION: Configures the failOnMissingLocations parameter in Flyway's configuration file using properties format.

LANGUAGE: properties
CODE:
flyway.failOnMissingLocations=true

----------------------------------------

TITLE: Configuring Vault Secrets in Gradle
DESCRIPTION: Example of setting Vault secrets in Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
      vaultSecrets: ['kv/data/flyway/flywayConfig1', 'kv/flyway/flywayConfig2']
    ]
}

----------------------------------------

TITLE: Configuring Schema Creation in Gradle
DESCRIPTION: Gradle build configuration example showing how to disable automatic schema creation in Flyway.

LANGUAGE: groovy
CODE:
flyway {
    createSchemas = false
}

----------------------------------------

TITLE: Adding MariaDB Teams Dependencies in Maven
DESCRIPTION: Maven dependency configuration for adding Flyway MariaDB support in teams edition.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-mysql</artifactId>
</dependency>

----------------------------------------

TITLE: Setting Undo SQL Migration Prefix in Gradle Build Script
DESCRIPTION: Shows how to configure the undoSqlMigrationPrefix to 'B' in a Gradle build script for Flyway. This affects Flyway operations when run through Gradle tasks.

LANGUAGE: groovy
CODE:
flyway {
    undoSqlMigrationPrefix = 'B'
}

----------------------------------------

TITLE: Setting Flyway Placeholders in Maven POM
DESCRIPTION: Illustrates how to configure placeholders in a Maven POM file for Flyway plugin. This approach is suitable for Maven-based projects that use Flyway for database migrations.

LANGUAGE: xml
CODE:
<configuration>
    <placeholders>
        <key1>value1</key1>
        <key2>value2</key2>
    </placeholders>
</configuration>

----------------------------------------

TITLE: Configuring Jar Directories via Environment Variable
DESCRIPTION: This snippet shows how to set the jar directories for Flyway using an environment variable. This method can be used when running Flyway in various environments.

LANGUAGE: properties
CODE:
FLYWAY_JAR_DIRS=/my/jar/dir

----------------------------------------

TITLE: Setting Flyway Callbacks via Environment Variable
DESCRIPTION: Environment variable configuration for Flyway callbacks

LANGUAGE: properties
CODE:
FLYWAY_CALLBACKS=my.callback.FlywayCallback,my.package.to.scan

----------------------------------------

TITLE: Setting Kerberos Login File in Properties Configuration
DESCRIPTION: Specifies the SQL Server Kerberos login file path in Flyway's properties configuration file.

LANGUAGE: properties
CODE:
flyway.plugins.sqlserver.kerberos.login.file=/path/to/SQLJDBCDriver.conf

----------------------------------------

TITLE: Configuring Out Of Order Migrations in Flyway Properties File
DESCRIPTION: This snippet shows how to enable out of order migrations in a Flyway configuration file. It sets the flyway.outOfOrder property to true.

LANGUAGE: properties
CODE:
flyway.outOfOrder=true

----------------------------------------

TITLE: Adding MariaDB Community Dependencies in Maven
DESCRIPTION: Maven dependency configuration for adding Flyway MariaDB support in community edition.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-mysql</artifactId>
</dependency>

----------------------------------------

TITLE: Setting Vault URL using Flyway Java API
DESCRIPTION: Programmatic configuration of Vault URL using Flyway's Java API interface.

LANGUAGE: java
CODE:
VaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)
vaultConfigurationExtension.setVaultUrl("http://localhost:8200/v1/");

----------------------------------------

TITLE: Configuring Flyway User in Maven POM
DESCRIPTION: Shows how to specify the database user in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <user>myuser</user>
</configuration>

----------------------------------------

TITLE: Setting Flyway Database URL in Gradle Configuration
DESCRIPTION: This snippet shows how to configure the JDBC URL for Flyway in a Gradle build script. It sets up a connection to an in-memory H2 database named 'flyway_db'.

LANGUAGE: groovy
CODE:
flyway {
    url = 'jdbc:h2:mem:flyway_db'
}

----------------------------------------

TITLE: Configuring Kerberos Config File Path in Flyway Properties File
DESCRIPTION: Shows how to set the Kerberos configuration file path in a Flyway properties configuration file. The flyway.kerberosConfigFile property is used to specify the path.

LANGUAGE: properties
CODE:
flyway.kerberosConfigFile=/path/to/krb5.ini

----------------------------------------

TITLE: Enabling detectEncoding in Flyway Java API
DESCRIPTION: Demonstrates how to set the detectEncoding parameter when using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .detectEncoding(true)
    .load()

----------------------------------------

TITLE: Setting skipExecutingMigrations in Flyway Configuration File
DESCRIPTION: This snippet shows how to enable skipExecutingMigrations in the Flyway configuration file using a properties format.

LANGUAGE: properties
CODE:
flyway.skipExecutingMigrations=true

----------------------------------------

TITLE: Setting Installed By via Commandline in Powershell
DESCRIPTION: Demonstrates how to set the 'installedBy' parameter using the Flyway command line interface in Powershell. This command sets the username to 'ci-pipeline' and runs the 'clean' operation.

LANGUAGE: powershell
CODE:
./flyway -installedBy="ci-pipeline" clean

----------------------------------------

TITLE: Setting Migration Naming Validation in Gradle
DESCRIPTION: Configuration of migration naming validation in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    validateMigrationNaming = true
}

----------------------------------------

TITLE: Adding Flyway Firebird Community Dependency - Maven
DESCRIPTION: Maven dependency configuration for adding Flyway Firebird support in Community edition

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-firebird</artifactId>
</dependency>

----------------------------------------

TITLE: Configuring Lock Retry Count in Properties File
DESCRIPTION: Sets the lock retry count using Flyway's configuration file format.

LANGUAGE: properties
CODE:
flyway.lockRetryCount=10

----------------------------------------

TITLE: Configuring Placeholder Separator in Flyway Properties File
DESCRIPTION: Sets the placeholder separator to '_' in a Flyway configuration file. This property affects how placeholders are parsed in migration scripts.

LANGUAGE: properties
CODE:
flyway.placeholderSeparator=_

----------------------------------------

TITLE: Configuring Undo SQL Migration Prefix using Flyway Java API
DESCRIPTION: Demonstrates how to set the undoSqlMigrationPrefix to 'B' using the Flyway Java API. This approach is useful when integrating Flyway into Java applications programmatically.

LANGUAGE: java
CODE:
Flyway.configure()
    .undoSqlMigrationPrefix("B")
    .load()

----------------------------------------

TITLE: Enabling skipExecutingMigrations in Flyway Java API
DESCRIPTION: This Java code snippet demonstrates how to configure skipExecutingMigrations to true using the Flyway Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .skipExecutingMigrations(true)
    .load()

----------------------------------------

TITLE: Setting Flyway Encoding in Gradle
DESCRIPTION: Configuration for UTF-16 encoding in Gradle build script

LANGUAGE: groovy
CODE:
flyway {
    encoding = 'UTF-16'
}

----------------------------------------

TITLE: Setting GCSM Project via Environment Variable for Flyway
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project using an environment variable for Flyway. This variable sets the project to 'quixotic-ferret-345678'.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_GCSM_PROJECT=quixotic-ferret-345678

----------------------------------------

TITLE: Configuring validateOnMigrate in Maven POM
DESCRIPTION: Illustrates how to set the validateOnMigrate option to false in a Maven POM file for Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <validateOnMigrate>false</validateOnMigrate>
</configuration>

----------------------------------------

TITLE: Configuring Flyway Using Maven Properties
DESCRIPTION: Example of using Maven properties to configure Flyway settings with property prefixes

LANGUAGE: xml
CODE:
<project>
    ...
    <properties>
        <flyway.user>myUser</flyway.user>
        <flyway.password>mySecretPwd</flyway.password>
        <flyway.schemas>schema1,schema2,schema3</flyway.schemas>
        <flyway.placeholders.keyABC>valueXYZ</flyway.placeholders.keyABC>
        <flyway.placeholders.otherplaceholder>value123</flyway.placeholders.otherplaceholder>
    </properties>
    ...
</project>

----------------------------------------

TITLE: Configuring Oracle SQL*Plus Warnings via Environment Variable
DESCRIPTION: Shows how to set Oracle SQL*Plus warnings using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_ORACLE_SQLPLUS_WARN=true

----------------------------------------

TITLE: Sample Output of Flyway Repair Maven Goal
DESCRIPTION: Displays the console output when running the Flyway repair Maven goal. In this example, no repair was necessary as no failed migration was detected.

LANGUAGE: console
CODE:
&gt; mvn flyway:repair

[INFO] [flyway:repair {execution: default-cli}]
[INFO] Repair not necessary. No failed migration detected.

----------------------------------------

TITLE: Setting cleanOnValidationError via Flyway Command Line (PowerShell)
DESCRIPTION: This command sets the cleanOnValidationError option to true when running the validate command using Flyway's command-line interface in PowerShell.

LANGUAGE: powershell
CODE:
./flyway -cleanOnValidationError="true" validate

----------------------------------------

TITLE: Setting Table Name in Gradle Configuration
DESCRIPTION: Configures the schema history table name in a Gradle build script

LANGUAGE: groovy
CODE:
flyway {
    table = 'my_schema_history_table'
}

----------------------------------------

TITLE: Configuring Working Directory in Maven POM
DESCRIPTION: Configures the working directory for Flyway operations in a Maven project's pom.xml file. This setting determines how relative paths are resolved during database migrations.

LANGUAGE: xml
CODE:
<configuration>
    <workingDirectory>sql</workingDirectory>
</configuration>

----------------------------------------

TITLE: Configuring Flyway Group via Java API
DESCRIPTION: Demonstrates how to enable migration grouping programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .group(true)
    .load()

----------------------------------------

TITLE: Setting Script Placeholder Prefix via Environment Variable
DESCRIPTION: Configure the script placeholder prefix using environment variables.

LANGUAGE: properties
CODE:
FLYWAY_SCRIPT_PLACEHOLDER_PREFIX=P__

----------------------------------------

TITLE: Illustrating Valid Multiline Comment Structure in SQL
DESCRIPTION: This snippet demonstrates the correct way to structure multiline comments that Flyway's parser can handle. Each comment is properly closed.

LANGUAGE: sql
CODE:
/* ... /* ... */ */

----------------------------------------

TITLE: Setting PostgreSQL Transactional Lock in Maven POM
DESCRIPTION: Configures the PostgreSQL transactional lock setting to false in a Maven POM file. This affects Flyway's behavior when executing database migrations as part of a Maven build process.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <postgresqlTransactionalLock>false</postgresqlTransactionalLock>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Setting validateOnMigrate in Gradle Build Script
DESCRIPTION: Shows how to disable automatic validation during migration in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    validateOnMigrate = false
}

----------------------------------------

TITLE: Java Command with SSL Properties
DESCRIPTION: Direct Java command execution with SSL truststore configuration parameters.

LANGUAGE: bash
CODE:
java -Djavax.net.ssl.trustStore="myStorePath" -Djavax.net.ssl.trustStorePassword="myStorePassword" myJavaApplication

----------------------------------------

TITLE: Defining Script Placeholder Suffix as Environment Variable
DESCRIPTION: Sets the script placeholder suffix using an environment variable configuration.

LANGUAGE: properties
CODE:
FLYWAY_SCRIPT_PLACEHOLDER_SUFFIX=__P

----------------------------------------

TITLE: Listing Certificates in Truststore
DESCRIPTION: Command to list all certificates that have been imported into a specific truststore.

LANGUAGE: bash
CODE:
keytool -keystore myStorePath -list

----------------------------------------

TITLE: Configuring Flyway Driver in Maven
DESCRIPTION: Setting the JDBC driver class in a Maven POM configuration for Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</driver>
</configuration>

----------------------------------------

TITLE: Configuring skipExecutingMigrations via Environment Variable
DESCRIPTION: This snippet illustrates how to set the skipExecutingMigrations option using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_SKIP_EXECUTING_MIGRATIONS=true

----------------------------------------

TITLE: Configuring ignoreMigrationPatterns in Flyway Java API
DESCRIPTION: Shows how to set the ignoreMigrationPatterns option when using Flyway's Java API. This example ignores missing repeatable migrations.

LANGUAGE: java
CODE:
Flyway.configure()
    .ignoreMigrationPatterns("repeatable:missing")
    .load()

----------------------------------------

TITLE: Setting Output Query Results in Flyway Configuration File
DESCRIPTION: Demonstrates how to disable query result output in the Flyway configuration file. This property determines if Flyway should display tables with query results when running migrations.

LANGUAGE: properties
CODE:
flyway.outputQueryResults=false

----------------------------------------

TITLE: Setting JDBC Properties via Flyway Command-line (PowerShell)
DESCRIPTION: Demonstrates how to set JDBC properties using the Flyway command-line interface in PowerShell. In this example, an access token is passed as a JDBC property.

LANGUAGE: powershell
CODE:
./flyway -jdbcProperties.accessToken=my-access-token info

----------------------------------------

TITLE: Flyway CLI Run Configuration
DESCRIPTION: Command line arguments for testing Flyway with new database support

LANGUAGE: text
CODE:
info -X -configFiles=<scratch location>\flyway.conf

----------------------------------------

TITLE: Flyway Command Line Entry Point
DESCRIPTION: The command that launches Flyway, showing how JAVA_ARGS environment variable is used to pass JVM arguments

LANGUAGE: bash
CODE:
%JAVA_CMD% %JAVA_ARGS% -cp "%CLASSPATH%;%INSTALLDIR%\lib\*;%INSTALLDIR%\lib\%FLYWAY_EDITION%\*;%INSTALLDIR%\drivers\*" org.flywaydb.commandline.Main %*

----------------------------------------

TITLE: Configuring SQL Migration Prefix in Flyway Properties File
DESCRIPTION: This snippet shows how to set the SQL migration prefix in a Flyway configuration file. It uses the flyway.sqlMigrationPrefix property to set the prefix to 'M'.

LANGUAGE: properties
CODE:
flyway.sqlMigrationPrefix=M

----------------------------------------

TITLE: Setting Flyway User in Gradle Configuration
DESCRIPTION: Demonstrates how to configure the database user in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    user = 'myuser'
}

----------------------------------------

TITLE: Setting ignoreMigrationPatterns in Gradle Configuration
DESCRIPTION: Demonstrates how to set the ignoreMigrationPatterns option in a Gradle build file for Flyway. This example ignores missing repeatable migrations.

LANGUAGE: groovy
CODE:
flyway {
    ignoreMigrationPatterns = ['repeatable:missing']
}

----------------------------------------

TITLE: Example SQL Query for Checking Migration Results in Flyway
DESCRIPTION: A sample SQL query to verify the results of migrations in Flyway. This query can be used to perform a sanity check on the data inserted by migrations when outputQueryResults is enabled.

LANGUAGE: sql
CODE:
SELECT * FROM my_table

----------------------------------------

TITLE: Adding Flyway Firebird Teams Dependency - Gradle
DESCRIPTION: Gradle dependency configuration for adding Flyway Firebird support in Teams edition

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb.enterprise:flyway-firebird"
}

----------------------------------------

TITLE: Configuring ignoreMigrationPatterns in Flyway Properties File
DESCRIPTION: Shows how to set the ignoreMigrationPatterns option in a Flyway configuration file. This example ignores missing repeatable migrations.

LANGUAGE: properties
CODE:
flyway.ignoreMigrationPatterns="repeatable:missing"

----------------------------------------

TITLE: MySQL Script Example with Procedures and Comments
DESCRIPTION: Demonstrates MySQL script syntax including table creation, stored procedures, different comment styles, and placeholder usage. Shows compatibility with mysqldump output and various MySQL-specific features.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL,
 PRIMARY KEY(value)
);

/*
Multi-line
comment
*/

-- MySQL procedure
DELIMITER //
CREATE PROCEDURE AddData()
 BEGIN
   # MySQL-style single line comment
   INSERT INTO test_data (value) VALUES ('Hello');
 END //
DELIMITER;

CALL AddData();

-- MySQL comments directives generated by mysqlsump
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Script Placeholder Suffix via Command Line
DESCRIPTION: Sets the script placeholder suffix using Flyway's command line interface with PowerShell.

LANGUAGE: powershell
CODE:
./flyway -scriptPlaceholderSuffix="__P" info

----------------------------------------

TITLE: Setting Flyway Baseline Migration Prefix via Environment Variable
DESCRIPTION: Defines an environment variable to set the baseline migration prefix for Flyway.

LANGUAGE: properties
CODE:
FLYWAY_BASELINE_MIGRATION_PREFIX=IB

----------------------------------------

TITLE: Running Flyway Undo Migration
DESCRIPTION: Command to run a Flyway undo migration, which undoes the latest versioned migration.

LANGUAGE: bash
CODE:
flyway undo

----------------------------------------

TITLE: Configuring Dry Run Output via Properties File
DESCRIPTION: Setting the dry run output path in Flyway's configuration properties file.

LANGUAGE: properties
CODE:
flyway.dryRunOutput=/my/output/file.sql

----------------------------------------

TITLE: Configuring Output Query Results via Commandline in Flyway
DESCRIPTION: Example of how to disable query result output using the Flyway commandline interface. This setting controls whether Flyway displays a table with query results during migration execution.

LANGUAGE: powershell
CODE:
./flyway -outputQueryResults="false" info

----------------------------------------

TITLE: Demonstrating DB2 SQL Syntax and Features in Flyway Migrations
DESCRIPTION: This code snippet showcases various DB2 SQL features supported in Flyway migrations, including standard SQL syntax, DB2 SQL-PL, and terminator changes. It demonstrates table creation, data insertion with placeholders, trigger creation, and function definitions.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_user (
 name VARCHAR(25) NOT NULL,
 PRIMARY KEY(name)
);

/*
Multi-line
comment
*/

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

-- SQL-PL
CREATE TRIGGER uniqueidx_trigger BEFORE INSERT ON usertable
	REFERENCING NEW ROW AS newrow
    FOR EACH ROW WHEN (newrow.name is not null)
	BEGIN ATOMIC
      IF EXISTS (SELECT * FROM usertable WHERE usertable.name = newrow.name) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'duplicate name';
      END IF;
    END;

-- Terminator changes
--#SET TERMINATOR @
CREATE FUNCTION TEST_FUNC(PARAM1 INTEGER, PARAM2 INTEGER)
  RETURNS INTEGER
LANGUAGE SQL
  RETURN
  1@   
--#SET TERMINATOR ;
CREATE FUNCTION TEST_FUNC(PARAM1 INTEGER, PARAM2 INTEGER, PARAM3 INTEGER)
  RETURNS INTEGER
LANGUAGE SQL
  RETURN
  1;

----------------------------------------

TITLE: Configuring Placeholder Separator in Flyway Java API
DESCRIPTION: Sets the placeholder separator to '_' using the Flyway Java API. This method is useful for programmatic configuration of Flyway in Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .placeholderSeparator("_")
    .load()

----------------------------------------

TITLE: Setting baselineOnMigrate via Environment Variable
DESCRIPTION: Illustrates how to set the baselineOnMigrate option to true using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_BASELINE_ON_MIGRATE=true

----------------------------------------

TITLE: Performing Flyway Dry Run
DESCRIPTION: Command to perform a Flyway dry run, which outputs the SQL statements that would be executed without modifying the database.

LANGUAGE: bash
CODE:
flyway migrate -dryRunOutput=/my/sql/dryrun-outputfile.sql

----------------------------------------

TITLE: Setting Vault Secrets in Maven
DESCRIPTION: Example of configuring Vault secrets in Maven build configuration.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
      <vaultSecrets>kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2</vaultSecrets>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: SQL Migration Example with Placeholder
DESCRIPTION: Example SQL migration script using a placeholder that can be previewed using dry run output.

LANGUAGE: sql
CODE:
INSERT INTO table1(name) VALUES('${name}')

----------------------------------------

TITLE: Configuring Skip Default Callbacks via Command Line
DESCRIPTION: Command line configuration to skip default callbacks using Flyway CLI

LANGUAGE: powershell
CODE:
./flyway -skipDefaultCallbacks="true" info

----------------------------------------

TITLE: Setting detectEncoding in Maven POM
DESCRIPTION: Illustrates how to configure the detectEncoding parameter in a Maven POM file for Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <detectEncoding>true</detectEncoding>
</configuration>

----------------------------------------

TITLE: Configuring JDBC URL for Derby in Flyway
DESCRIPTION: Demonstrates the format for configuring the JDBC URL to connect to a Derby database in Flyway. The URL includes subprotocol and database name parameters.

LANGUAGE: text
CODE:
jdbc:derby:<subsubprotocol>:<databaseName>

----------------------------------------

TITLE: Configuring Lock Retry Count in Maven
DESCRIPTION: Sets the lock retry count in a Maven pom.xml configuration.

LANGUAGE: xml
CODE:
<configuration>
    <lockRetryCount>10</lockRetryCount>
</configuration>

----------------------------------------

TITLE: Configuring Lock Retry Count via Environment Variable
DESCRIPTION: Sets the lock retry count using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_LOCK_RETRY_COUNT=10

----------------------------------------

TITLE: Setting validateOnMigrate via Environment Variable
DESCRIPTION: Illustrates how to disable automatic validation during migration using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_VALIDATE_ON_MIGRATE=false

----------------------------------------

TITLE: Setting Oracle SQL*Plus Environment Variable for Flyway
DESCRIPTION: This environment variable configuration enables Oracle SQL*Plus support for Flyway. It sets FLYWAY_ORACLE_SQLPLUS to true.

LANGUAGE: properties
CODE:
FLYWAY_ORACLE_SQLPLUS=true

----------------------------------------

TITLE: Setting Color Output in Flyway CLI (PowerShell)
DESCRIPTION: This command demonstrates how to disable color output when running the 'info' command in Flyway CLI using PowerShell. The '-color' flag is set to 'never' to prevent colorized output.

LANGUAGE: powershell
CODE:
./flyway -color=never info

----------------------------------------

TITLE: Adding Data with Second SQL Migration
DESCRIPTION: Creates a second SQL migration (V2__Add_people.sql) to insert sample data into the PERSON table.

LANGUAGE: sql
CODE:
insert into PERSON (ID, NAME) values (1, 'Axel');
insert into PERSON (ID, NAME) values (2, 'Mr. Foo');
insert into PERSON (ID, NAME) values (3, 'Ms. Bar');

----------------------------------------

TITLE: Enabling 'clean' Command in Flyway CLI
DESCRIPTION: This snippet demonstrates how to enable the 'clean' command in Flyway Version 9, which is disabled by default for safety reasons. The -cleanDisabled parameter is set to false to allow the use of the clean command.

LANGUAGE: bash
CODE:
-cleanDisabled "false"

----------------------------------------

TITLE: Configuring Placeholder Suffix in Flyway Properties File
DESCRIPTION: This snippet shows how to set the placeholder suffix in a Flyway configuration file. It sets the suffix to '$$' using the 'flyway.placeholderSuffix' property.

LANGUAGE: properties
CODE:
flyway.placeholderSuffix=$$

----------------------------------------

TITLE: Displaying Flyway Migration Info for New Environment
DESCRIPTION: Output of 'flyway info' command in a new environment with a baseline migration. It shows that only the baseline migration is pending, while earlier migrations are ignored.

LANGUAGE: plaintext
CODE:
+-----------+---------+--------------+------------------+--------------+---------+----------+
| Category  | Version | Description  | Type             | Installed On | State   | Undoable |
+-----------+---------+--------------+------------------+--------------+---------+----------+
| Versioned | 3       | create table |   SQL_BASELINE   |              | Pending | No       |
+-----------+---------+--------------+------------------+--------------+---------+----------+

----------------------------------------

TITLE: Setting Script Placeholder Suffix in Gradle
DESCRIPTION: Shows how to configure the script placeholder suffix in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    scriptPlaceholderSuffix = '__P'
}

----------------------------------------

TITLE: Configuring Oracle SQL*Plus Warnings via Command Line
DESCRIPTION: Shows how to enable Oracle SQL*Plus warnings using the Flyway command line interface.

LANGUAGE: powershell
CODE:
./flyway -oracle.sqlplusWarn="true" info

----------------------------------------

TITLE: Setting Script Placeholder Prefix via Command Line
DESCRIPTION: Configure the script placeholder prefix using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -scriptPlaceholderPrefix="P__" info

----------------------------------------

TITLE: Setting JDBC Properties in Flyway Gradle Configuration
DESCRIPTION: Shows how to configure JDBC properties in a Gradle build script for Flyway tasks. This is useful for projects using Gradle as their build tool.

LANGUAGE: groovy
CODE:
flyway {
    jdbcProperties = ['accessToken' : 'access-token']
}

----------------------------------------

TITLE: Creating Undo Migration for Adding People in SQL
DESCRIPTION: This SQL snippet creates an undo migration to reverse the effects of adding people to the PERSON table. It deletes all records from the PERSON table.

LANGUAGE: sql
CODE:
DELETE FROM PERSON;

----------------------------------------

TITLE: Configuring Flyway Resolver via Command Line (PowerShell)
DESCRIPTION: Shows how to specify a custom MigrationResolver implementation using the Flyway command line interface in PowerShell. This command sets the resolver and runs the 'info' command.

LANGUAGE: powershell
CODE:
./flyway -resolvers="my.resolver.MigrationResolver" info

----------------------------------------

TITLE: Setting Repeatable SQL Migration Prefix via Environment Variable
DESCRIPTION: This environment variable sets the repeatable SQL migration prefix to 'A' for Flyway.

LANGUAGE: properties
CODE:
FLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX=A

----------------------------------------

TITLE: Displaying Flyway Migration Info for Existing Environment
DESCRIPTION: Output of 'flyway info' command showing the migration state in an existing environment after adding a baseline migration. The baseline migration has no effect on the existing migration history.

LANGUAGE: plaintext
CODE:
+-----------+---------+-------------------+------+---------------------+---------+----------+
| Category  | Version | Description       | Type | Installed On        | State   | Undoable |
+-----------+---------+-------------------+------+---------------------+---------+----------+
| Versioned | 1       | create two tables | SQL  |         ...         | Success | No       |
| Versioned | 2       | drop one table    | SQL  |         ...         | Success | No       |
| Versioned | 3       | alter column      | SQL  |         ...         | Success | No       |
+-----------+---------+-------------------+------+---------------------+---------+----------+

----------------------------------------

TITLE: Configuring Kerberos Login File in Gradle
DESCRIPTION: Sets the SQL Server Kerberos login file path in a Gradle build configuration.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
        sqlserverKerberosLoginFile: '/path/to/SQLJDBCDriver.conf'
    ]
}

----------------------------------------

TITLE: Configuring Connect Retries via Command Line
DESCRIPTION: Sets the maximum number of database connection retry attempts using Flyway CLI command. Uses powershell syntax to specify the connectRetries parameter.

LANGUAGE: powershell
CODE:
./flyway -connectRetries=10 info

----------------------------------------

TITLE: Configuring Java Migrations with Dependencies in Gradle
DESCRIPTION: Setup for Java migrations including necessary dependencies and classpath configuration

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb:flyway-core:${flywayVersion}"
}

flyway {
    url = 'jdbc:h2:mem:mydb'
    user = 'myUsr'
    password = 'mySecretPwd'
    locations = ['classpath:db/migration']
}

// we need to build classes before we can migrate
flywayMigrate.dependsOn classes

----------------------------------------

TITLE: Demonstrating Invalid Nested Multiline Comments in SQL
DESCRIPTION: This snippet shows an example of nested multiline comments that Flyway's parser cannot handle. Flyway requires all multiline comments to be properly closed.

LANGUAGE: sql
CODE:
/* ... /* ... */ ... */

----------------------------------------

TITLE: Setting Flyway Schemas via Environment Variable
DESCRIPTION: Illustrates how to set the managed schemas for Flyway using an environment variable. This example sets 'FLYWAY_SCHEMAS' to include 'schema1' and 'schema2'.

LANGUAGE: properties
CODE:
FLYWAY_SCHEMAS=schema1,schema2

----------------------------------------

TITLE: Displaying Flyway Migration History After Applying Baseline
DESCRIPTION: Output showing the migration history after applying the baseline migration in a new environment. The baseline migration is marked as 'Baseline' in the State column.

LANGUAGE: plaintext
CODE:
+-----------+---------+--------------+------------------+---------------------+----------+----------+
| Category  | Version | Description  | Type             | Installed On        | State    | Undoable |
+-----------+---------+--------------+------------------+---------------------+----------+----------+
| Versioned | 3       | create table |   SQL_BASELINE   |         ...         | Baseline | No       |
+-----------+---------+--------------+------------------+---------------------+----------+----------+

----------------------------------------

TITLE: Configuring Flyway Driver via Java API
DESCRIPTION: Example of setting the JDBC driver class using Flyway's Java API configuration.

LANGUAGE: java
CODE:
Flyway.configure()
    .driver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
    .load()

----------------------------------------

TITLE: Configuring Tablespace in Gradle
DESCRIPTION: Specifies the tablespace in a Gradle build configuration

LANGUAGE: groovy
CODE:
flyway {
    tablespace = 'xyz'
}

----------------------------------------

TITLE: Configuring Flyway User via Java API
DESCRIPTION: Shows how to set the database user programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .user("myuser")
    .load()

----------------------------------------

TITLE: Setting Vault Token in Gradle Configuration
DESCRIPTION: Shows how to configure the Vault token in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
      vaultToken: 's.abcdefghijklmnopqrstuvwx'
    ]
}

----------------------------------------

TITLE: Configuring Flyway in Maven Settings.xml
DESCRIPTION: Example of storing database credentials in Maven settings.xml file

LANGUAGE: xml
CODE:
<settings>
    <servers>
        <server>
            <id>flyway-db</id>
            <username>myUser</username>
            <password>mySecretPwd</password>
        </server>
    </servers>
</settings>

----------------------------------------

TITLE: Basic Maven Flyway Migrate Command
DESCRIPTION: Simple command to execute Flyway's migrate goal using Maven

LANGUAGE: console
CODE:
> mvn flyway:migrate

----------------------------------------

TITLE: Configuring Tablespace via Environment Variable
DESCRIPTION: Sets the tablespace using an environment variable

LANGUAGE: properties
CODE:
FLYWAY_TABLESPACE=xyz

----------------------------------------

TITLE: Configuring Maven for Flyway Community Edition
DESCRIPTION: Maven dependency configuration for Flyway Community Edition. This snippet shows how to include the Flyway Core dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-core</artifactId>
    <version>{{ page.flywayVersion }}</version>
</dependency>

----------------------------------------

TITLE: Environment Variable Configuration Example
DESCRIPTION: Example of setting Flyway configuration via environment variables

LANGUAGE: bash
CODE:
FLYWAY_URL=jdbc:h2:mem:flyway

----------------------------------------

TITLE: Executing Anonymous Blocks in SAP HANA
DESCRIPTION: This snippet demonstrates how to use anonymous DO blocks in SAP HANA for executing complex logic, including creating tables and inserting data using loops.

LANGUAGE: sql
CODE:
DO
BEGIN
    DECLARE v_count INT;
    CREATE TABLE TAB1 (I INTEGER); 
    FOR v_count IN 1..10 DO
        INSERT INTO TAB1 VALUES (:v_count);
    END FOR;
END;

----------------------------------------

TITLE: Running Flyway with System Properties
DESCRIPTION: Example of passing Flyway configuration via command line system properties

LANGUAGE: bash
CODE:
mvn -Dflyway.user=myUser -Dflyway.schemas=schema1,schema2 -Dflyway.placeholders.keyABC=valueXYZ

----------------------------------------

TITLE: Setting Cherry Pick in Flyway Gradle Configuration
DESCRIPTION: This Gradle configuration snippet demonstrates how to set the cherryPick option for Flyway in a Gradle build file.

LANGUAGE: groovy
CODE:
flyway {
    cherryPick = '2.0'
}

----------------------------------------

TITLE: Configuring Flyway properties
DESCRIPTION: Demonstrates a sample configuration for Flyway, including database connection details, migration locations, and various other settings.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.table=schema_history
flyway.locations=classpath:com.mycomp.migration,database/migrations,filesystem:/sql-migrations
flyway.sqlMigrationPrefix=Migration-
flyway.undoSqlMigrationPrefix=downgrade
flyway.repeatableSqlMigrationPrefix=RRR
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb
flyway.encoding=ISO-8859-1
flyway.placeholderReplacement=true
flyway.placeholders.aplaceholder=value
flyway.placeholders.otherplaceholder=value123
flyway.placeholderPrefix=#[
flyway.placeholderSuffix=]
flyway.resolvers=com.mycomp.project.CustomResolver,com.mycomp.project.AnotherResolver
flyway.skipDefaultResolvers=false
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.target=5.1
flyway.outOfOrder=false
flyway.cleanOnValidationError=false
flyway.oracle.sqlplus=true
flyway.oracle.sqlplusWarn=true
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Setting Baseline Migration Prefix via Flyway Command Line
DESCRIPTION: Uses the -baselineMigrationPrefix flag to set the prefix for baseline migrations in Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -baselineMigrationPrefix="IB" info

----------------------------------------

TITLE: Setting Stream via Environment Variable
DESCRIPTION: Enables streaming of SQL migrations using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_STREAM=true

----------------------------------------

TITLE: Bash Script Migration Placeholder Usage
DESCRIPTION: Demonstrates accessing Flyway placeholders in Bash script migrations using the FP__ prefix and suffix convention.

LANGUAGE: bash
CODE:
echo $FP__flyway_filename__

----------------------------------------

TITLE: Creating Tables and Triggers in Sybase ASE
DESCRIPTION: Example SQL script demonstrating table creation, trigger definition, and data insertion in Sybase ASE. Shows usage of identity columns, triggers, and placeholders.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE Customers (
CustomerId smallint identity(1,1),
Name nvarchar(255),
Priority tinyint
)
GO

CREATE TABLE Sales (
TransactionId smallint identity(1,1),
CustomerId smallint,
[Net Amount] int,
Completed bit
)
GO

/*
Multi-line
comment
*/
-- TSQL
CREATE TRIGGER Update_Customer on Sales
for insert,update
as
declare @errorMsg VARCHAR(200),
        @customerID VARCHAR(10)
BEGIN
    select @customerID = customerID from inserted

    IF exists (select 1 from Sales tbl, inserted i
        where tbl.customerID = i.customerID )
    begin
                select @errorMsg = 'Cannot have 2 record with the same customer ID '+@customerID
        	raiserror 99999 @errorMsg
        	rollback
    end
END

GO

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Implementing Error Overrides in Java API
DESCRIPTION: Java API implementation for configuring Flyway error overrides. Shows how to programmatically set error handling rules using the Flyway Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .errorOverrides("STATE:12345:W")
    .load()

----------------------------------------

TITLE: Sample Flyway Validate Command Output
DESCRIPTION: Example console output showing successful validation of 5 migrations

LANGUAGE: console
CODE:
> mvn flyway:validate

[INFO] [flyway:validate {execution: default-cli}]
[INFO] Validated 5 migrations (execution time 00:00.030s)

----------------------------------------

TITLE: Configuring Placeholder Prefix in Properties File
DESCRIPTION: Shows how to set the placeholder prefix in Flyway's configuration properties file

LANGUAGE: properties
CODE:
flyway.placeholderPrefix=$$

----------------------------------------

TITLE: Executing Flyway Info Command with Maven
DESCRIPTION: This command runs the Flyway info goal using Maven, which prints details and status information about all migrations.

LANGUAGE: console
CODE:
<span>&gt;</span> mvn flyway:info

----------------------------------------

TITLE: Configuring Dapr URL in Gradle
DESCRIPTION: Sets the Dapr URL in Gradle build configuration for Flyway

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
        daprUrl: 'http://localhost:3500/v1.0/secrets/my-secrets-store'
    ]
}

----------------------------------------

TITLE: Installing Flyway CLI on Linux
DESCRIPTION: Command to download, extract and install the Flyway command-line tool on Linux by adding it to PATH.

LANGUAGE: bash
CODE:
wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/{{site.flywayVersion}}/flyway-commandline-{{site.flywayVersion}}-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-{{site.flywayVersion}}/flyway /usr/local/bin

----------------------------------------

TITLE: Configuring Flyway Properties for BigQuery
DESCRIPTION: Demonstrates how to set Flyway configuration properties for BigQuery, including schemas, user, and password settings.

LANGUAGE: properties
CODE:
flyway.schemas=<your data set>
flyway.user=
flyway.password=

----------------------------------------

TITLE: Executing Flyway Validate Command with Maven
DESCRIPTION: Basic command to validate Flyway migrations using Maven

LANGUAGE: console
CODE:
> mvn flyway:validate

----------------------------------------

TITLE: Configuring Flyway Properties
DESCRIPTION: Sample configuration file for Flyway, including database connection details, migration locations, and various other settings.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.table=schema_history
flyway.locations=classpath:com.mycomp.migration,database/migrations,filesystem:/sql-migrations,s3:migrationsBucket,gcs:migrationsBucket
flyway.sqlMigrationPrefix=Migration-
flyway.undoSqlMigrationPrefix=downgrade
flyway.repeatableSqlMigrationPrefix=RRR
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb
flyway.encoding=ISO-8859-1
flyway.placeholderReplacement=true
flyway.placeholders.aplaceholder=value
flyway.placeholders.otherplaceholder=value123
flyway.placeholderPrefix=#[
flyway.placeholderSuffix=]
flyway.resolvers=com.mycomp.project.CustomResolver,com.mycomp.project.AnotherResolver
flyway.skipDefaultResolvers=false
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.target=5.1
flyway.outOfOrder=false
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Running Tests with Custom Flyway Config
DESCRIPTION: Command to run migration tests using a custom flyway.conf file. Useful when migrations require specific configuration like placeholder values.

LANGUAGE: bash
CODE:
flywayhub test --project myproject --engine 'SQL Server (v2017)' --flywayconf path/to/flyway.conf ./sql

----------------------------------------

TITLE: Setting Cherry Pick as Environment Variable for Flyway
DESCRIPTION: This example demonstrates how to set the cherryPick option as an environment variable for Flyway.

LANGUAGE: properties
CODE:
FLYWAY_CHERRY_PICK=2.0

----------------------------------------

TITLE: Configuring Repeatable SQL Migration Prefix in Maven for Flyway
DESCRIPTION: This Maven XML configuration sets the repeatable SQL migration prefix to 'A' for Flyway plugin.

LANGUAGE: xml
CODE:
<configuration>
    <repeatableSqlMigrationPrefix>A</repeatableSqlMigrationPrefix>
</configuration>

----------------------------------------

TITLE: Generating JSON Output for Flyway Migration in CLI
DESCRIPTION: Example of JSON output generated when running the Flyway migrate command with the '-outputType=json' option. It includes details about the migration process, executed migrations, and database information.

LANGUAGE: json
CODE:
{
  "initialSchemaVersion": null,
  "targetSchemaVersion": "1",
  "schemaName": "public",
  "migrations": [
    {
      "category": "Versioned",
      "version": "1",
      "description": "first",
      "type": "SQL",
      "filepath": "C:\\flyway\\sql\\V1__first.sql",
      "executionTime": 0
    },
    {
      "category": "Repeatable",
      "version": "",
      "description": "repeatable",
      "type": "SQL",
      "filepath": "C:\\flyway\\sql\\R__repeatable.sql",
      "executionTime": 0
    }
  ],
  "migrationsExecuted": 2,
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "migrate"
}

----------------------------------------

TITLE: Setting SSL Properties via JAVA_ARGS
DESCRIPTION: Example of setting SSL-related JVM properties using the JAVA_ARGS environment variable in bash

LANGUAGE: bash
CODE:
export JAVA_ARGS="-Djavax.net.ssl.trustStore=~/truststore.jks -Djavax.net.ssl.trustStorePassword=myPassword"

----------------------------------------

TITLE: Setting GCSM Project in Flyway Gradle Configuration
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project in Flyway's Gradle configuration. This configuration sets the project to 'quixotic-ferret-345678'.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
        gcsmProject: 'quixotic-ferret-345678'
    ]
}

----------------------------------------

TITLE: Implementing Flyway Callback Interface in Java
DESCRIPTION: A new Java-based callback interface for handling Flyway lifecycle events. The interface provides methods to support event handling, transaction management, and event processing with improved flexibility and control.

LANGUAGE: java
CODE:
/**
 * This is the main callback interface that should be implemented to handle Flyway lifecycle events.
 */
public interface Callback {
    /**
     * Whether this callback supports this event or not. This is primarily meant as a way to optimize event
     * handling by avoiding unnecessary connection state setups for events that will not be handled anyway.
     *
     * @param event   The event to check.
     * @param context The context for this event.
     * @return {@code true} if it can be handled, {@code false} if not.
     */
    boolean supports(Event event, Context context);

    /**
     * Whether this event can be handled in a transaction or whether it must be handled outside a transaction
     * instead. In the vast majority of the cases the answer will be {@code true}. Only in the rare cases 
     * where non-transactional statements are executed should this return {@code false}.
     * This method is called before {@link #handle(Event, Context)} in order to determine in advance whether
     * a transaction can be used or not.
     *
     * @param event   The event to check.
     * @param context The context for this event.
     * @return {@code true} if it can be handled within a transaction (almost all cases). {@code false} if it
     * must be handled outside a transaction instead (very rare).
     */
    boolean canHandleInTransaction(Event event, Context context);

    /**
     * Handles this Flyway lifecycle event.
     *
     * @param event   The event to handle.
     * @param context The context for this event.
     */
    void handle(Event event, Context context);
}

----------------------------------------

TITLE: Setting Loggers via Flyway Command Line
DESCRIPTION: Demonstrates how to set the 'loggers' parameter using the Flyway command line interface. This example sets the logger to 'auto', which is the default behavior for auto-detecting the appropriate logger.

LANGUAGE: powershell
CODE:
./flyway -loggers=auto

----------------------------------------

TITLE: Setting Flyway User via Command Line
DESCRIPTION: Demonstrates how to set the database user credential when running Flyway via command line interface.

LANGUAGE: powershell
CODE:
./flyway -user=myuser info

----------------------------------------

TITLE: Setting Oracle SQL*Plus Warnings in Configuration File
DESCRIPTION: Demonstrates how to enable Oracle SQL*Plus warnings in Flyway's configuration file.

LANGUAGE: properties
CODE:
flyway.oracle.sqlplusWarn=true

----------------------------------------

TITLE: Configuring Multiple Database Migrations in Gradle
DESCRIPTION: Configuration for migrating multiple databases by extending Flyway tasks

LANGUAGE: groovy
CODE:
task migrateDatabase1(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = 'jdbc:h2:mem:mydb1'
    user = 'myUsr1'
    password = 'mySecretPwd1'
}

task migrateDatabase2(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = 'jdbc:h2:mem:mydb2'
    user = 'myUsr2'
    password = 'mySecretPwd2'
}

----------------------------------------

TITLE: Defining SSL Properties
DESCRIPTION: SSL-related Java system properties that need to be set for secure connections in Flyway

LANGUAGE: properties
CODE:
javax.net.ssl.trustStore
javax.net.ssl.trustStorePassword

----------------------------------------

TITLE: Using Default Placeholders in Flyway SQL Migrations
DESCRIPTION: Example of using built-in Flyway placeholders in SQL migration scripts. Demonstrates usage of defaultSchema and user placeholders.

LANGUAGE: sql
CODE:
GRANT SELECT ON SCHEMA ${flyway:defaultSchema} TO ${flyway:user};

----------------------------------------

TITLE: Setting Oracle SQL*Plus Warnings in Maven
DESCRIPTION: Demonstrates how to enable Oracle SQL*Plus warnings in a Maven configuration.

LANGUAGE: xml
CODE:
<configuration>
    <oracleSqlplusWarn>true</oracleSqlplusWarn>
</configuration>

----------------------------------------

TITLE: Configuring Migration Naming Validation in Properties File
DESCRIPTION: Setting the migration naming validation option in Flyway's configuration properties file.

LANGUAGE: properties
CODE:
flyway.validateMigrationNaming=true

----------------------------------------

TITLE: Configuring Kerberos Login File via Command Line
DESCRIPTION: Sets the SQL Server Kerberos login configuration file path using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -plugins.sqlserver.kerberos.login.file="/path/to/SQLJDBCDriver.conf" info

----------------------------------------

TITLE: Setting Connect Retries Interval in Gradle
DESCRIPTION: Configures the connection retry interval in a Gradle build script. The value defines the maximum seconds between retry attempts.

LANGUAGE: groovy
CODE:
flyway {
    connectRetriesInterval = 60
}

----------------------------------------

TITLE: Executing Flyway Repair with Maven
DESCRIPTION: Shows how to run the Flyway repair command using Maven. This command repairs the Flyway schema history table.

LANGUAGE: console
CODE:
<span>&gt;</span> mvn flyway:repair

----------------------------------------

TITLE: Storing Flyway License Key in Vault
DESCRIPTION: Example of the content structure for storing a Flyway license key in a Vault secret.

LANGUAGE: bash
CODE:
flyway.licenseKey=<license_key>

----------------------------------------

TITLE: Setting Init SQL in Flyway Gradle Configuration
DESCRIPTION: Shows how to configure the initSql property in a Gradle build script for Flyway. This is useful for projects using Gradle as their build tool.

LANGUAGE: groovy
CODE:
flyway {
    initSql = "ALTER SESSION SET NLS_LANGUAGE='ENGLISH';"
}

----------------------------------------

TITLE: Creating Conflicting Database Procedure in Helper Migration
DESCRIPTION: Example of creating a conflicting procedure in a different repeatable migration file named R__HelperProcedures.sql

LANGUAGE: sql
CODE:
R__HelperProcedures.sql
create or replace procedure my_important_proc

----------------------------------------

TITLE: Executing Cherry Pick Migration in Flyway CLI (PowerShell)
DESCRIPTION: This command demonstrates how to use the cherryPick option when running a Flyway migration via the command line interface.

LANGUAGE: powershell
CODE:
./flyway -cherryPick="2.0" migrate

----------------------------------------

TITLE: Setting baselineOnMigrate via Flyway Command Line
DESCRIPTION: Demonstrates how to set the baselineOnMigrate option to true when using Flyway's command-line interface.

LANGUAGE: powershell
CODE:
./flyway -baselineOnMigrate="true" migrate

----------------------------------------

TITLE: Setting Kerberos Login File via Java API
DESCRIPTION: Programmatically sets the SQL Server Kerberos login file path using Flyway's Java API.

LANGUAGE: java
CODE:
SQLServerConfigurationExtension sqlServerConfigurationExtension = configuration.getPluginRegister().getPlugin(SQLServerConfigurationExtension.class)
sqlServerConfigurationExtension.setKerberosLoginFile("/path/to/SQLJDBCDriver.conf");

----------------------------------------

TITLE: Basic Maven Undo Command
DESCRIPTION: Simple command to execute the Flyway undo operation using Maven

LANGUAGE: console
CODE:
> mvn flyway:undo

----------------------------------------

TITLE: Multiline Properties Configuration in Flyway
DESCRIPTION: Shows how to split long configuration properties across multiple lines using backslashes as line continuators in Flyway configuration files.

LANGUAGE: properties
CODE:
flyway.locations=filesystem:my/migrations/release-v1,\
filesystem:my/migrations/release-v2,\
filesystem:my/migrations/release-v3,\
filesystem:my/migrations/release-v3.5,\
filesystem:my/migrations/release-v4,\
filesystem:my/migrations/release-v5

----------------------------------------

TITLE: Executing Flyway with Custom Properties
DESCRIPTION: Example of running Flyway migrate command after setting custom JVM properties

LANGUAGE: bash
CODE:
./flyway migrate -url=jdbc:...

----------------------------------------

TITLE: Configuring Baseline Version via Commandline
DESCRIPTION: Sets the baseline version using Flyway's command line interface.

LANGUAGE: powershell
CODE:
./flyway -baselineVersion="0.0" baseline

----------------------------------------

TITLE: Setting Jar Directories in Flyway Command Line
DESCRIPTION: This snippet demonstrates how to set custom jar directories when using Flyway from the command line. It specifies the directory where JDBC drivers and Java-based migrations are located.

LANGUAGE: powershell
CODE:
./flyway -jarDirs="/my/jar/dir" info

----------------------------------------

TITLE: Setting Kerberos Login File in Maven
DESCRIPTION: Specifies the SQL Server Kerberos login file path in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <sqlserverKerberosLoginFile>/path/to/SQLJDBCDriver.conf</sqlserverKerberosLoginFile>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Setting Flyway Loggers via Environment Variable
DESCRIPTION: Illustrates how to configure Flyway loggers using an environment variable. This approach is helpful for setting configurations dynamically or in containerized environments.

LANGUAGE: properties
CODE:
FLYWAY_LOGGERS=auto

----------------------------------------

TITLE: Maven Undo Command Output Example
DESCRIPTION: Sample console output showing the execution of a Flyway undo operation including compilation and migration status

LANGUAGE: console
CODE:
> mvn compile flyway:undo

[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [flyway:migrate {execution: default-cli}]
[INFO] Database: jdbc:h2:file:C:\Programs\flyway-0-SNAPSHOT\flyway.db (H2 1.3)
[INFO] Current version of schema "PUBLIC": 1
[INFO] Undoing migration of schema "PUBLIC" to version 1 - First
[INFO] Successfully undid 1 migration to schema "PUBLIC" (execution time 00:00.024s).

----------------------------------------

TITLE: Configuring Flyway with Default Resource Provider in Java
DESCRIPTION: This snippet demonstrates a simple programmatic configuration of Flyway using the default resource provider. It sets up a data source and specifies a location for migration files.

LANGUAGE: java
CODE:
Flyway flyway = Flyway.configure()
  .dataSource("jdbc:h2:mem:db", "sa", "password")
  .locations("db/migration")
  .load();

flyway.migrate();

----------------------------------------

TITLE: Setting Installed By in Flyway Configuration File
DESCRIPTION: Shows how to set the 'installedBy' parameter in a Flyway configuration file. This property sets the username to 'ci-pipeline'.

LANGUAGE: properties
CODE:
flyway.installedBy=ci-pipeline

----------------------------------------

TITLE: Maven Plugin Configuration for Flyway Community
DESCRIPTION: Maven plugin configuration for Flyway Community Edition version 7.0.0-beta1.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-maven-plugin</artifactId>
    <version>7.0.0-beta1</version>
</plugin>

----------------------------------------

TITLE: Configuring Flyway Placeholders using Environment Variables
DESCRIPTION: Illustrates the use of environment variables to set Flyway placeholders. This approach is useful for dynamic configuration in different deployment environments.

LANGUAGE: properties
CODE:
FLYWAY_PLACEHOLDERS_KEY1=value1
FLYWAY_PLACEHOLDERS_KEY2=value2

----------------------------------------

TITLE: Configuring GCSM Secrets via Command Line in PowerShell
DESCRIPTION: This snippet demonstrates how to specify Google Cloud Secret Manager secrets using the Flyway command line interface in PowerShell. It uses the -plugins.gcsm.secrets parameter to provide a comma-separated list of secret paths.

LANGUAGE: powershell
CODE:
./flyway -plugins.gcsm.secrets="secret1,secret2" info

----------------------------------------

TITLE: Configuring Migration Naming Validation in Maven
DESCRIPTION: XML configuration for enabling migration naming validation in a Maven project.

LANGUAGE: xml
CODE:
<configuration>
    <validateMigrationNaming>true</validateMigrationNaming>
</configuration>

----------------------------------------

TITLE: Sample Output of Flyway Info Command
DESCRIPTION: This console output shows the result of running the 'mvn flyway:info' command. It displays a table with information about migration versions, descriptions, installation dates, and their current states.

LANGUAGE: console
CODE:
&gt; mvn flyway:info

[INFO] [flyway:info {execution: default-cli}]
[INFO] +-------------+------------------------+---------------------+---------+
[INFO] | Version     | Description            | Installed on        | State   |
[INFO] +-------------+------------------------+---------------------+---------+
[INFO] | 1           | Initial structure      | 2012-11-13 15:37:41 | Success |
[INFO] | 1.1         | Populate table         | 2012-11-13 15:37:41 | Success |
[INFO] | 1.2         | Another user           |                     | Pending |
[INFO] | 1.3         | And his brother        |                     | Pending |
[INFO] +-------------+------------------------+---------------------+---------+

----------------------------------------

TITLE: Detecting Drift in SQL Server Database
DESCRIPTION: SQL command to manually add a column to the 'PERSON' table, demonstrating how to create drift in the database schema.

LANGUAGE: sql
CODE:
use foobar;

alter table PERSON add EMAIL varchar(100);

----------------------------------------

TITLE: Creating SQL Server Table in Azure Synapse
DESCRIPTION: Example of creating a table in Azure Synapse with a single line comment, column comments, and a non-clustered primary key. Also demonstrates placeholder usage for insertions.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_user (
  id INT NOT NULL,
  name VARCHAR(25) NOT NULL,  -- this is a valid ' comment
  PRIMARY KEY NONCLUSTERED (name) NOT ENFORCED
);
GO

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Setting Undo SQL Migration Prefix via Commandline in PowerShell
DESCRIPTION: Demonstrates how to set the undoSqlMigrationPrefix to 'B' using the Flyway command line interface in PowerShell. This affects the naming convention for undo SQL migration files.

LANGUAGE: powershell
CODE:
./flyway -undoSqlMigrationPrefix="B" info

----------------------------------------

TITLE: Basic Maven Flyway Baseline Command
DESCRIPTION: Simple command to execute the Flyway baseline operation using Maven.

LANGUAGE: console
CODE:
mvn flyway:baseline

----------------------------------------

TITLE: Configuring Undo SQL Migration Prefix in Maven POM
DESCRIPTION: Illustrates how to set the undoSqlMigrationPrefix to 'B' in a Maven POM file for Flyway configuration. This setting applies when running Flyway through Maven goals.

LANGUAGE: xml
CODE:
<configuration>
    <undoSqlMigrationPrefix>B</undoSqlMigrationPrefix>
</configuration>

----------------------------------------

TITLE: Setting Flyway Config Files via Environment Variable
DESCRIPTION: Shows how to set Flyway configuration files using environment variables.

LANGUAGE: properties
CODE:
FLYWAY_CONFIG_FILES=my.conf

----------------------------------------

TITLE: Initializing Flyway in Dropwizard Application
DESCRIPTION: Implementation of Flyway migration setup in a Dropwizard application's run method. Configures Flyway with database connection details from the application's configuration and executes migrations.

LANGUAGE: java
CODE:
public class MyApplication extends Application<MyConfiguration> {
    ...

    @Override
    public void run(MyConfiguration configuration, Environment environment) {
        DataSourceFactory dataSourceFactory = configuration.getDataSourceFactory();
        Flyway flyway = new Flyway();
        flyway.setDataSource(dataSourceFactory.getUrl(), dataSourceFactory.getUser(), dataSourceFactory.getPassword());
        flyway.migrate();
        ...
    }
}

----------------------------------------

TITLE: Creating Initial SQL Migration for SQL Server
DESCRIPTION: SQL script to create a simple 'PERSON' table in SQL Server as an example migration.

LANGUAGE: sql
CODE:
create table PERSON (
    ID int not null,
    NAME varchar(100) not null
);

----------------------------------------

TITLE: Setting Installed By in Gradle Configuration
DESCRIPTION: Shows how to set the 'installedBy' parameter in a Gradle build script for Flyway. This sets the username to 'ci-pipeline'.

LANGUAGE: groovy
CODE:
flyway {
    installedBy = 'ci-pipeline'
}

----------------------------------------

TITLE: Basic Flyway Migration Files Structure
DESCRIPTION: Example showing basic structure of Flyway migration files that need to be controlled using shouldExecute

LANGUAGE: text
CODE:
V1__A_migration_1.sql
V2__B_migration_1.sql
V3__A_migration_2.sql

----------------------------------------

TITLE: Sample JSON output for Flyway validate command
DESCRIPTION: Illustrates the JSON output format when running the Flyway validate command with the -outputType=json option. It includes validation status, counts, and other relevant information.

LANGUAGE: json
CODE:
{
  "errorDetails": null,
  "invalidMigrations": [],
  "validationSuccessful": true,
  "validateCount": 2,
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "validate"
}

----------------------------------------

TITLE: Running Flyway with Vault Integration for License Key
DESCRIPTION: Example command to run Flyway info command using Vault integration for license key.

LANGUAGE: bash
CODE:
flyway info -vault.url="http://localhost:8200/v1/" -vault.token="<vault_token>" -vault.secrets="secret/data/flyway/licenseKeyTest"

----------------------------------------

TITLE: Structuring Script Config Files in Flyway
DESCRIPTION: Demonstrates the basic structure of a script config file in Flyway, which uses key-value pairs for configuration settings.

LANGUAGE: properties
CODE:
# Settings are simple key-value pairs
key=value

----------------------------------------

TITLE: Configuring JDBC URL for Google Cloud Spanner
DESCRIPTION: JDBC URL format for connecting to Google Cloud Spanner database. Requires project name, instance name, database name, and path to authentication keyfile.

LANGUAGE: text
CODE:
jdbc:cloudspanner:/projects/<project_name>/instances/<instance_name>/databases/<database_name>?credentials=<path/to/keyfile.json>

----------------------------------------

TITLE: Adding Flyway Core Dependency in Maven
DESCRIPTION: Maven dependency configuration for adding Flyway Core to a Spring Boot project. Spring Boot's dependency management handles the version automatically if using Boot's parent POM.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-core</artifactId>
    <version>{{ site.flywayVersion }}</version>
</dependency>

----------------------------------------

TITLE: Creating Table with Schema Placeholder in SQL
DESCRIPTION: SQL example demonstrating table creation using Flyway's defaultSchema placeholder for explicit schema qualification.

LANGUAGE: sql
CODE:
CREATE TABLE ${flyway:defaultSchema}.MyTable (id INT);

----------------------------------------

TITLE: Configuring validateOnMigrate using Flyway Java API
DESCRIPTION: Demonstrates how to set the validateOnMigrate option to false using the Flyway Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .validateOnMigrate(false)
    .load()

----------------------------------------

TITLE: Setting Flyway Baseline Migration Prefix in Gradle
DESCRIPTION: Configures the baseline migration prefix for Flyway in a Gradle build script using the pluginConfiguration block.

LANGUAGE: groovy
CODE:
flyway {
    pluginConfiguration [
      baselineMigrationPrefix: 'IB'
    ]
}

----------------------------------------

TITLE: Configuring Dapr Secrets for Flyway in Maven POM
DESCRIPTION: This XML snippet demonstrates how to set Dapr Secrets for Flyway in a Maven POM file. The secrets are specified as a comma-separated list within the pluginConfiguration element.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <daprSecrets>secret1,secret2</daprSecrets>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Setting Output Query Results using Flyway Java API
DESCRIPTION: Example of how to configure the output query results option using the Flyway Java API. This method allows programmatic control over whether Flyway displays query result tables during migrations.

LANGUAGE: java
CODE:
Flyway.configure()
    .outputQueryResults(false)
    .load()

----------------------------------------

TITLE: Adding Flyway Firebird Teams Dependency - Maven
DESCRIPTION: Maven dependency configuration for adding Flyway Firebird support in Teams edition

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-firebird</artifactId>
</dependency>

----------------------------------------

TITLE: Adding Flyway Dependency in Grails Gradle Build
DESCRIPTION: Gradle dependency configuration to add Flyway Core to a Grails project. This enables automatic database migration execution on application startup through Spring Boot's auto-configuration.

LANGUAGE: groovy
CODE:
compile "org.flywaydb:flyway-core:{{ site.flywayVersion }}"

----------------------------------------

TITLE: Setting JDBC Properties via Environment Variables for Flyway
DESCRIPTION: Illustrates how to set JDBC properties using environment variables. This method is useful for configuring Flyway in containerized environments or CI/CD pipelines.

LANGUAGE: properties
CODE:
FLYWAY_JDBC_PROPERTIES_accessToken=access-token

----------------------------------------

TITLE: Creating Table with Unqualified Name in SQL
DESCRIPTION: Simple SQL example showing table creation without schema qualification. When used with flyway.defaultSchema, this will create the table in the specified default schema.

LANGUAGE: sql
CODE:
CREATE TABLE MyTable (id INT);

----------------------------------------

TITLE: Setting Flyway Password in Gradle Configuration
DESCRIPTION: Shows how to configure the Flyway database password in a Gradle build script. This is useful for projects using Gradle as their build tool.

LANGUAGE: groovy
CODE:
flyway {
    password = 'mysecretpassword'
}

----------------------------------------

TITLE: Configuring baselineOnMigrate in Flyway Properties File
DESCRIPTION: Shows how to set the baselineOnMigrate option to true in a Flyway configuration file.

LANGUAGE: properties
CODE:
flyway.baselineOnMigrate=true

----------------------------------------

TITLE: Configuring baselineOnMigrate in Flyway Properties File
DESCRIPTION: Shows how to set the baselineOnMigrate option to true in a Flyway configuration file.

LANGUAGE: properties
CODE:
flyway.baselineOnMigrate=true

----------------------------------------

TITLE: Configuring Table Name via Java API
DESCRIPTION: Sets the schema history table name programmatically using Flyway's Java API

LANGUAGE: java
CODE:
Flyway.configure()
    .table("my_schema_history_table")
    .load()

----------------------------------------

TITLE: Oracle JDBC URL Formats
DESCRIPTION: Examples of JDBC URL formats for connecting to Oracle databases using Flyway.

LANGUAGE: plaintext
CODE:
jdbc:oracle:thin:@//<host>:<port>/<service>
jdbc:oracle:thin:@<tns_entry>

----------------------------------------

TITLE: Setting ignoreMigrationPatterns via Environment Variable
DESCRIPTION: Demonstrates how to set the ignoreMigrationPatterns option using an environment variable. This example ignores missing repeatable migrations.

LANGUAGE: properties
CODE:
FLYWAY_IGNORE_MIGRATION_PATTERNS="repeatable:missing"

----------------------------------------

TITLE: Creating Table with Flyway Default Schema Placeholder in SQL
DESCRIPTION: Shows how to create a table using the Flyway default schema placeholder, which allows for dynamic schema specification based on the configuration.

LANGUAGE: sql
CODE:
CREATE TABLE ${flyway:defaultSchema}.MyTable (id INT);

----------------------------------------

TITLE: Setting Flyway Placeholders in Configuration File
DESCRIPTION: Shows how to define placeholders in a Flyway configuration file. This method allows for persistent placeholder configuration across multiple Flyway executions.

LANGUAGE: properties
CODE:
flyway.placeholders.key1=value1
flyway.placeholders.key2=value2

----------------------------------------

TITLE: Setting Flyway Placeholders in Configuration File
DESCRIPTION: Shows how to define placeholders in a Flyway configuration file. This method allows for persistent placeholder configuration across multiple Flyway executions.

LANGUAGE: properties
CODE:
flyway.placeholders.key1=value1
flyway.placeholders.key2=value2

----------------------------------------

TITLE: Setting Flyway Config Encoding via Environment Variable
DESCRIPTION: Example of setting Flyway configuration file encoding using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_CONFIG_FILE_ENCODING=UTF-16

----------------------------------------

TITLE: Maven Plugin Configuration for Flyway Enterprise
DESCRIPTION: Maven plugin configuration for Flyway Enterprise Edition version 7.0.0-beta1.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-maven-plugin</artifactId>
    <version>7.0.0-beta1</version>
</plugin>

----------------------------------------

TITLE: Configuring Clean Disabled in Maven for Flyway
DESCRIPTION: Illustrates how to set the cleanDisabled option to false in a Maven POM file for Flyway. This configuration allows the clean operation to be performed when running Flyway through Maven.

LANGUAGE: xml
CODE:
<configuration>
    <cleanDisabled>false</cleanDisabled>
</configuration>

----------------------------------------

TITLE: Configuring JDBC URL for TimescaleDB in Flyway
DESCRIPTION: Specifies the JDBC URL format for connecting to a TimescaleDB database using Flyway. It includes placeholders for host, port, and database name.

LANGUAGE: plaintext
CODE:
jdbc:postgresql://<host>:<port>/<database>

----------------------------------------

TITLE: Powershell Script Migration Placeholder Usage
DESCRIPTION: Shows how to access Flyway placeholders in Powershell script migrations using the FP__ prefix and suffix convention.

LANGUAGE: powershell
CODE:
echo $env:FP__flyway_filename__

----------------------------------------

TITLE: Setting Vault URL in Flyway Configuration File
DESCRIPTION: Configuration of Vault URL using Flyway's properties file format.

LANGUAGE: properties
CODE:
flyway.plugins.vault.url=http://localhost:8200/v1/

----------------------------------------

TITLE: Executing Flyway Commands with Environment-Specific Configurations
DESCRIPTION: These commands demonstrate how to run Flyway with different environment configurations by specifying the appropriate config file. The -teams flag is included for Flyway Teams edition.

LANGUAGE: bash
CODE:
.\flyway info -configFiles=".\conf\env_dev.conf" -teams

LANGUAGE: bash
CODE:
.\flyway info -configFiles=".\conf\env_ci.conf" -teams

----------------------------------------

TITLE: Setting Database Baseline Version
DESCRIPTION: Command to baseline databases with existing data, including production, specifying the version and description matching the baseline migration file.

LANGUAGE: console
CODE:
> flyway -baselineVersion="1" -baselineDescription="baseline_migration" baseline

----------------------------------------

TITLE: Configuring Schema Creation in Maven
DESCRIPTION: Maven configuration example showing how to disable automatic schema creation in Flyway using XML configuration.

LANGUAGE: xml
CODE:
<configuration>
    <createSchemas>false</createSchemas>
</configuration>

----------------------------------------

TITLE: Encrypting Flyway Configuration File with GPG
DESCRIPTION: This command uses GPG to encrypt a Flyway configuration file for a specific recipient.

LANGUAGE: bash
CODE:
gpg -e -r "John Smith" flyway.conf

----------------------------------------

TITLE: Example SQL Migration for Percona XtraDB Cluster
DESCRIPTION: Demonstrates various SQL syntax features supported in Flyway migrations for XtraDB including table creation, stored procedures, comments, and placeholders. Shows MySQL-compatible SQL statements with different comment styles and delimiter changes.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_data (
 value VARCHAR(25) NOT NULL,
 PRIMARY KEY(value)
);

/*
Multi-line
comment
*/

-- MySQL procedure
DELIMITER //
CREATE PROCEDURE AddData()
 BEGIN
   # MySQL-style single line comment
   INSERT INTO test_data (value) VALUES ('Hello');
 END //
DELIMITER;

CALL AddData();

-- MySQL comments directives generated by mysqlsump
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Gradle for Flyway Enterprise Edition
DESCRIPTION: Gradle configuration for Flyway Enterprise Edition, including repository setup and dependency. This snippet shows how to configure the Flyway repository with credentials and add the Enterprise Edition dependency.

LANGUAGE: groovy
CODE:
repositories {
    maven {
        url "https://repo.flywaydb.org/repo"
        credentials {
            username 'your-flyway-license-key'
            password 'flyway'
        }
    }
}

dependencies {
    compile "org.flywaydb.enterprise:flyway-core:{{ page.flywayVersion }}"
}

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: Jekyll front matter configuration for the documentation page layout and menu settings

LANGUAGE: markdown
CODE:
---
layout: documentation
menu: info
subtitle: Info
---

----------------------------------------

TITLE: Configuring PostgreSQL Transactional Lock via Environment Variable
DESCRIPTION: Sets the PostgreSQL transactional lock to false using an environment variable. This method allows for configuration of Flyway's lock behavior without modifying configuration files or command line arguments.

LANGUAGE: properties
CODE:
FLYWAY_POSTGRESQL_TRANSACTIONAL_LOCK=false

----------------------------------------

TITLE: Setting Installed By in Maven Configuration
DESCRIPTION: Illustrates how to set the 'installedBy' parameter in a Maven POM file for Flyway. This XML configuration sets the username to 'ci-pipeline'.

LANGUAGE: xml
CODE:
<configuration>
    <installedBy>ci-pipeline</installedBy>
</configuration>

----------------------------------------

TITLE: Setting Repeatable SQL Migration Prefix via Commandline in PowerShell
DESCRIPTION: This command sets the repeatable SQL migration prefix to 'A' using the Flyway command line interface in PowerShell.

LANGUAGE: powershell
CODE:
./flyway -repeatableSqlMigrationPrefix="A" info

----------------------------------------

TITLE: Configuring Table Name via Command Line in PowerShell
DESCRIPTION: Sets the schema history table name using Flyway's command line interface in PowerShell

LANGUAGE: powershell
CODE:
./flyway -table="my_schema_history_table" info

----------------------------------------

TITLE: Setting Default Java Driver Class for YugabyteDB in Flyway
DESCRIPTION: Specifies the default Java driver class used for YugabyteDB connections in Flyway.

LANGUAGE: java
CODE:
org.postgresql.Driver

----------------------------------------

TITLE: Configuring Gradle for Flyway Community Edition
DESCRIPTION: Gradle dependency configuration for Flyway Community Edition. This snippet shows how to include the Flyway Core dependency in a Gradle project.

LANGUAGE: groovy
CODE:
compile "org.flywaydb:flyway-core:{{ page.flywayVersion }}"

----------------------------------------

TITLE: Setting Vault Token via Command Line in Flyway
DESCRIPTION: Shows how to provide the Vault token when running Flyway via command line using PowerShell.

LANGUAGE: powershell
CODE:
./flyway -plugins.vault.token="s.abcdefghijklmnopqrstuvwx" info

----------------------------------------

TITLE: Displaying Flyway Migrate Command Usage in Markdown
DESCRIPTION: This snippet includes a Liquid template tag to render the usage instructions for the Flyway Migrate command. It's typically used in Jekyll-based documentation sites to dynamically insert command-specific usage information.

LANGUAGE: markdown
CODE:
{% include commandUsage.html command="migrate" %}

----------------------------------------

TITLE: Embedding SurveyMonkey Application Form in HTML
DESCRIPTION: This snippet embeds a SurveyMonkey form for applying to the Flyway Test Pilot Program. It uses an asynchronous JavaScript loader to add the SurveyMonkey widget to the page.

LANGUAGE: html
CODE:
<script>(function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type="text/javascript",c.async=!0,c.id=n,c.src="https://widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd3ipY7tN5iyE7C6Q5OMG5IyUgOeXItL5qLxNXWAEqLfo.js",a.parentNode.insertBefore(c,a))})(window,document,"script","smcx-sdk");</script>

----------------------------------------

TITLE: Configuring Custom Spell Checker Dictionary in VSCode
DESCRIPTION: This code snippet shows the location of the custom dictionary for the Code Spell Checker extension in VSCode. It is stored in the .vscode/settings.json file under the 'cSpell.words' array.

LANGUAGE: json
CODE:
".vscode/settings.json"

----------------------------------------

TITLE: Configuring Error Override in Flyway Properties
DESCRIPTION: Demonstrates how to configure an Error Override in Flyway properties to force Oracle stored procedure compilation issues to produce errors instead of warnings.

LANGUAGE: properties
CODE:
flyway.errorOverrides=99999:17110:E

----------------------------------------

TITLE: Adding MySQL Support with Maven - Community Edition
DESCRIPTION: Maven dependency configuration for adding MySQL support to Flyway Community Edition.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-mysql</artifactId>
</dependency>

----------------------------------------

TITLE: Displaying Flyway Repair Command Usage
DESCRIPTION: This snippet includes a template to display the usage instructions for the Flyway Repair command. It uses a custom Jekyll include to render the command usage.

LANGUAGE: liquid
CODE:
{% include commandUsage.html command="repair" %}

----------------------------------------

TITLE: Setting Oracle Wallet Location in Properties File
DESCRIPTION: Shows how to configure the Oracle Wallet location in Flyway's configuration file using properties format.

LANGUAGE: properties
CODE:
flyway.oracle.walletLocation=/User/db/my_wallet

----------------------------------------

TITLE: Adding Flyway Firebird Community Dependency - Gradle
DESCRIPTION: Gradle dependency configuration for adding Flyway Firebird support in Community edition

LANGUAGE: groovy
CODE:
dependencies {
    compile "org.flywaydb:flyway-firebird"
}

----------------------------------------

TITLE: Configuring Oracle Kerberos Cache File in Maven for Flyway
DESCRIPTION: This snippet shows how to set the Oracle Kerberos Cache File location in a Maven POM file for Flyway. It specifies the path to the credential cache file within the configuration element.

LANGUAGE: xml
CODE:
<configuration>
    <oracleKerberosCacheFile>/temp/krb5cc_123</oracleKerberosCacheFile>
</configuration>

----------------------------------------

TITLE: Adding Dependencies in Maven Configuration
DESCRIPTION: Example Maven dependency configuration for adding HSQLDB driver to the project classpath.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.hsqldb</groupId>
        <artifactId>hsqldb</artifactId>
        <version>1.8.0.10</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Flyway Resolver in Maven POM
DESCRIPTION: Shows how to specify a custom MigrationResolver in a Maven POM file for projects using the Flyway Maven plugin.

LANGUAGE: xml
CODE:
<configuration>
    <resolvers>my.resolver.MigrationResolver</resolvers>
</configuration>

----------------------------------------

TITLE: Displaying SQL Migration Error Example
DESCRIPTION: Shows an example of how Flyway displays a SQL migration error, including SQL state, error code, and message details.

LANGUAGE: plaintext
CODE:
Migration V1__Create_person_table.sql failed
--------------------------------------------
SQL State  : 42001
Error Code : 42001
Message    : Syntax error in SQL statement "CREATE TABLE1[*] PERSON "; expected "OR, FORCE, VIEW, ...
Location   : V1__Create_person_table.sql (/flyway-tutorial/V1__Create_person_table.sql)
Line       : 1
Statement  : create table1 PERSON

----------------------------------------

TITLE: Adding Flyway Proprietary Dependency for Undo Feature
DESCRIPTION: Maven dependency configuration required to use the Undo feature in Flyway Teams. This dependency must be included to enable undo functionality in API usage.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb.enterprise</groupId>
    <artifactId>flyway-proprietary</artifactId>
    <version>{{ site.flywayVersion }}</version>
</dependency>

----------------------------------------

TITLE: Configuring failOnMissingLocations in Maven
DESCRIPTION: Demonstrates how to set the failOnMissingLocations parameter in a Maven configuration.

LANGUAGE: xml
CODE:
<configuration>
    <failOnMissingLocations>true</failOnMissingLocations>
</configuration>

----------------------------------------

TITLE: Configuring Skip Default Callbacks in Maven
DESCRIPTION: Maven POM configuration to skip default callbacks in Flyway plugin

LANGUAGE: xml
CODE:
<configuration>
    <skipDefaultCallbacks>true</skipDefaultCallbacks>
</configuration>

----------------------------------------

TITLE: Configuring Gradle for Flyway Pro Edition
DESCRIPTION: Gradle configuration for Flyway Pro Edition, including repository setup and dependency. This snippet shows how to configure the Flyway repository with credentials and add the Pro Edition dependency.

LANGUAGE: groovy
CODE:
repositories {
    maven {
        url "https://repo.flywaydb.org/repo"
        credentials {
            username 'your-flyway-license-key'
            password 'flyway'
        }
    }
}

dependencies {
    compile "org.flywaydb.pro:flyway-core:{{ page.flywayVersion }}"
}

----------------------------------------

TITLE: Environment Variable Configuration in Flyway
DESCRIPTION: Example of using environment variable substitution in Flyway configuration files for placeholder values.

LANGUAGE: properties
CODE:
flyway.placeholders.myPlaceholder=${MY_ENVIRONMENT_VARIABLE}

----------------------------------------

TITLE: SQL Baseline Migration Example
DESCRIPTION: Example showing the naming convention for a baseline migration file that represents database state at version 5.

LANGUAGE: sql
CODE:
B5__my_database.sql

----------------------------------------

TITLE: Executing Flyway validate command
DESCRIPTION: Shows the basic usage of the Flyway validate command in the command-line interface.

LANGUAGE: shell
CODE:
flyway [options] validate

----------------------------------------

TITLE: Executing Flyway Clean Command
DESCRIPTION: Command to clean databases containing non-essential data that can be safely removed.

LANGUAGE: console
CODE:
> flyway clean

----------------------------------------

TITLE: Using Timestamp Placeholder in Utility Procedures
DESCRIPTION: Implementation of the ${flyway:timestamp} placeholder in a utility procedures migration to force re-execution on each migration run

LANGUAGE: sql
CODE:
R__UtilityProcedures.sql
-- ${flyway:timestamp}
create or replace procedure my_important_proc

----------------------------------------

TITLE: Generating JSON Output with Flyway Info Command
DESCRIPTION: Command line syntax for generating machine-readable JSON output from the Flyway info command.

LANGUAGE: bash
CODE:
flyway info -outputType=json

----------------------------------------

TITLE: Registering Database Type in Flyway
DESCRIPTION: Code for registering a new database type in DatabaseTypeRegister class

LANGUAGE: java
CODE:
registeredDatabaseTypes.add(new FooDatabaseType(classLoader));

----------------------------------------

TITLE: Upgrading Flyway Dependency and Configuring License Key in Gradle
DESCRIPTION: Example of upgrading the Flyway dependency to the enterprise version and configuring the license key in a Gradle build file. It shows both the dependency change and the license key configuration.

LANGUAGE: groovy
CODE:
// gradle
dependencies {
    compile 'org.flywaydb.enterprise:flyway-core:{{ site.flywayVersion }}'
}

// code
Flyway flyway = Flyway.configure()
    .licenseKey("FL01...")
    .load();
flyway.info();

----------------------------------------

TITLE: Environment Variable Configuration for Flyway Hub CI
DESCRIPTION: Specifies the required environment variable FLYWAYHUB_ACCESS_TOKEN needed for running Flyway Hub in CI environments. This token is created through the Flyway Hub interface when configuring automated checks.

LANGUAGE: bash
CODE:
FLYWAYHUB_ACCESS_TOKEN

----------------------------------------

TITLE: Docker Compose Configuration for Flyway with MySQL
DESCRIPTION: Docker Compose configuration demonstrating integration between Flyway and MySQL containers with connection retry support. Includes environment configuration and volume mapping for SQL files.

LANGUAGE: yml
CODE:
version: '3'
services:
  flyway:
    image: boxfuse/flyway
    command: -url=jdbc:mysql://db -user=root -password=P@ssw0rd -connectRetries=300 migrate
    volumes:
    - .:/flyway/sql
    depends_on:
    - db
  db:
    image: mysql
    environment:
    - MYSQL_ROOT_PASSWORD=P@ssw0rd
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
    - 3306:3306

----------------------------------------

TITLE: Pulling Flyway Docker Image
DESCRIPTION: Command to pull the official Flyway Docker image from Docker Hub.

LANGUAGE: bash
CODE:
docker pull boxfuse/flyway

----------------------------------------

TITLE: Configuring Script Encoding in Flyway Properties File
DESCRIPTION: This snippet demonstrates how to specify the encoding of a SQL migration script using a properties file. It allows setting a custom encoding for individual scripts, with a caution about changing encoding after the migration has been run.

LANGUAGE: properties
CODE:
# Encoding of this SQL migration. Caution: changing the encoding after this migration has been run\n# will invalidate the calculated checksum and require a `flyway repair`.\nencoding=ISO_8859_1

----------------------------------------

TITLE: Configuring Migration Naming Validation in Flyway
DESCRIPTION: Example of invalid migration script names that would fail validation when flyway.validateMigrationNaming is enabled. Helps catch common naming pattern errors like incorrect separators or letter casing.

LANGUAGE: plaintext
CODE:
V1_My_description.sql\nv1__My_description.sql

----------------------------------------

TITLE: Configuring Robots.txt Access Rules for Flyway Website
DESCRIPTION: Standard robots.txt configuration that specifies the sitemap location and sets default crawling permissions. Allows unrestricted access to all web crawlers while declaring the XML sitemap location.

LANGUAGE: robots.txt
CODE:
Sitemap: https://flywaydb.org/sitemap.xml
User-agent: *
Disallow:

----------------------------------------

TITLE: Installing macOS JRE via Maven
DESCRIPTION: Maven command to install the macOS x64 JRE 11.0.2 into the local Maven repository. This is required for building platform-specific packages of the Flyway command-line tool.

LANGUAGE: shell
CODE:
mvn install:install-file -DgroupId=net.adoptopenjdk \
-DartifactId=jre \
-Dclassifier=macos-x64 \
-Dtype=tar.gz \
-Dversion=11.0.2 \
-Dpackaging=tar.gz \
-Dfile=path/to/OpenJDK11U-jre_x64_mac_hotspot_11.0.2_9.tar.gz

----------------------------------------

TITLE: Configuring Lock Retry Count via Java API
DESCRIPTION: Sets the lock retry count programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .lockRetryCount(10)
    .load()

----------------------------------------

TITLE: Creating a Vault Token with Limited Lifetime
DESCRIPTION: Example command to create a Vault token with a 30-minute lifetime.

LANGUAGE: bash
CODE:
vault token create -ttl=30m

----------------------------------------

TITLE: Enabling Batching in Flyway Command-Line for BigQuery
DESCRIPTION: Shows how to enable batching in Flyway Command-Line to improve performance when executing multiple schema changes against BigQuery.

LANGUAGE: shell
CODE:
flyway migrate -batch=true

----------------------------------------

TITLE: Configuring Flyway User in Properties File
DESCRIPTION: Shows how to specify the database user in a Flyway properties configuration file.

LANGUAGE: properties
CODE:
flyway.user=myuser

----------------------------------------

TITLE: Dropping Additional Database Objects Using afterClean Callback in SQL
DESCRIPTION: SQL script example showing how to drop additional database objects that weren't automatically cleaned by Flyway's Clean command. This example demonstrates dropping a test user through an afterClean callback script.

LANGUAGE: sql
CODE:
DROP USER test_user

----------------------------------------

TITLE: Setting Oracle Wallet Location via Java API
DESCRIPTION: Shows how to configure the Oracle Wallet location programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .oracleWalletLocation("/User/db/my_wallet")
    .load()

----------------------------------------

TITLE: Configuring Dry Run Output via Command Line - PowerShell
DESCRIPTION: Example of setting the dry run output file path using Flyway's command line interface in PowerShell.

LANGUAGE: powershell
CODE:
./flyway -dryRunOutput="/my/output/file.sql" clean

----------------------------------------

TITLE: Configuring Schema Creation via Environment Variable
DESCRIPTION: Environment variable configuration example showing how to disable automatic schema creation in Flyway.

LANGUAGE: properties
CODE:
FLYWAY_CREATE_SCHEMAS=false

----------------------------------------

TITLE: Configuring Dry Run Output in Maven
DESCRIPTION: Setting the dry run output path in a Maven project configuration.

LANGUAGE: xml
CODE:
<configuration>
    <dryRunOutput>/my/output/file.sql</dryRunOutput>
</configuration>

----------------------------------------

TITLE: Setting Flyway Config Encoding via Command Line
DESCRIPTION: Command line example for setting Flyway configuration file encoding to UTF-16 using PowerShell.

LANGUAGE: powershell
CODE:
./flyway -configFileEncoding="UTF-16" info

----------------------------------------

TITLE: Dry Run Output Example
DESCRIPTION: Example of how the dry run output appears after placeholder substitution.

LANGUAGE: sql
CODE:
-- Source: ./V1__insert1.sql
---------------------------
INSERT INTO table1(name) VALUES('XYZ')

----------------------------------------

TITLE: Setting Init SQL via Flyway Command Line (PowerShell)
DESCRIPTION: Demonstrates how to set the initSql property using Flyway's command line interface in PowerShell. This example sets the NLS_LANGUAGE to 'ENGLISH' for the database session.

LANGUAGE: powershell
CODE:
./flyway -initSql="ALTER SESSION SET NLS_LANGUAGE='ENGLISH';" info

----------------------------------------

TITLE: Adding Flyway Core Dependency in Maven
DESCRIPTION: Maven dependency configuration to add Flyway Core to a Dropwizard project for database migration support.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-core</artifactId>
    <version>{{ site.flywayVersion }}</version>
</dependency>

----------------------------------------

TITLE: Enabling Oracle SQL*Plus in Flyway via Commandline
DESCRIPTION: This command enables Oracle SQL*Plus support when running Flyway from the command line. It uses the -oracle.sqlplus flag set to "true".

LANGUAGE: powershell
CODE:
./flyway -oracle.sqlplus="true" info

----------------------------------------

TITLE: Running Flyway with Vault Integration for Database Credentials
DESCRIPTION: Example command to run Flyway info command using Vault integration for database credentials.

LANGUAGE: bash
CODE:
flyway info -vault.url="http://localhost:8200/v1/" -vault.token="<vault_token>" -vault.secrets="secret/data/flyway/credentialsTest"

----------------------------------------

TITLE: Specifying Maven Coordinates for TimescaleDB Driver in Flyway
DESCRIPTION: Provides the Maven Central coordinates for the PostgreSQL JDBC driver used with TimescaleDB in Flyway projects.

LANGUAGE: xml
CODE:
org.postgresql:postgresql:42.2.14

----------------------------------------

TITLE: Configuring Flyway Vault URL
DESCRIPTION: Example of setting the Vault URL parameter in Flyway configuration for a Vault dev server.

LANGUAGE: bash
CODE:
flyway.vault.url=http://localhost:8200/v1/

----------------------------------------

TITLE: Listing Flyway Migrations with Undo Scripts
DESCRIPTION: This snippet shows a list of SQL migration files and their corresponding undo scripts in a Flyway project. It includes four migrations and their respective undo scripts for various database operations.

LANGUAGE: plaintext
CODE:
V13__perform_a_very_slow_operation.sql
V14__create_more_things.sql
V15__shuffle_things.sql
V16__create_things.sql

U13__undo_a_very_slow_operation.sql
U14__delete_more_things.sql
U15__unshuffle_things.sql
U16__delete_things.sql

----------------------------------------

TITLE: Listing Flyway Migrations for Intermediate Baseline
DESCRIPTION: This snippet shows a list of SQL migration files in a Flyway project, including multiple versions and hotfixes. It demonstrates how an intermediate baseline can be created with a new migration that encompasses all previous changes.

LANGUAGE: plaintext
CODE:
V1__create_tables.sql
V2__modify_tables.sql
V3__create_views.sql
V3.1__view_hotfix.sql
V3.2__another_hotfix.sql
V4__create_everything_properly.sql

----------------------------------------

TITLE: Setting Placeholder Prefix via Command Line in Powershell
DESCRIPTION: Demonstrates how to set the placeholder prefix using Flyway's command line interface with PowerShell

LANGUAGE: powershell
CODE:
./flyway -placeholderPrefix="$$" info

----------------------------------------

TITLE: Configuring Flyway with Environment Variables
DESCRIPTION: Example of setting Flyway configuration using environment variables for cloud-native deployments.

LANGUAGE: bash
CODE:
FLYWAY_URL=...
FLYWAY_USER=...
FLYWAY_PASSWORD=...

----------------------------------------

TITLE: Setting Placeholder Separator via Flyway Command Line (PowerShell)
DESCRIPTION: Sets the placeholder separator to '_' using the Flyway command line interface in PowerShell. This affects how placeholders are recognized in migration scripts.

LANGUAGE: powershell
CODE:
./flyway -placeholderSeparator="_" info

----------------------------------------

TITLE: Setting CLI Color Options in Flyway
DESCRIPTION: CLI flag options for controlling output colorization. Can be set to 'never' to disable, 'always' to enforce, or 'auto' for context-aware colorization.

LANGUAGE: plaintext
CODE:
-color=never|always|auto

----------------------------------------

TITLE: Listing Flyway Migrations with Hotfix
DESCRIPTION: This snippet shows an updated list of SQL migration files in a Flyway project, including a new hotfix migration. It demonstrates how a hotfix can be added as a new migration file.

LANGUAGE: plaintext
CODE:
V1__create_tables.sql
V2__modify_tables.sql
V3__create_views.sql
V3.1__view_hotfix.sql

----------------------------------------

TITLE: Configuring Kerberos Login File via Environment Variable
DESCRIPTION: Sets the SQL Server Kerberos login file path using an environment variable.

LANGUAGE: properties
CODE:
FLYWAY_PLUGINS_SQL_SERVER_KERBEROS_LOGIN_FILE=/path/to/SQLJDBCDriver.conf

----------------------------------------

TITLE: Configuring Flyway License Key in Java API
DESCRIPTION: Demonstrates how to set the Flyway license key programmatically using the Java API. This method is useful when integrating Flyway into Java applications.

LANGUAGE: java
CODE:
Flyway.configure()
    .licenseKey("FL01...")
    .load()

----------------------------------------

TITLE: Environment-Specific Migration Files
DESCRIPTION: Example structure of environment-specific migration files that can be controlled using shouldExecute and environment placeholders

LANGUAGE: text
CODE:
V1__tst_migration_1.sql
V2__dev_migration_1.sql
V3__prd_migration_1.sql

----------------------------------------

TITLE: Setting failOnMissingLocations in Gradle
DESCRIPTION: Shows how to configure the failOnMissingLocations parameter in a Gradle build script.

LANGUAGE: groovy
CODE:
flyway {
    failOnMissingLocations = true
}

----------------------------------------

TITLE: Setting Dapr Secrets via Command Line in PowerShell
DESCRIPTION: This snippet demonstrates how to set Dapr Secrets for Flyway using the command line in PowerShell. It specifies multiple secrets separated by commas.

LANGUAGE: powershell
CODE:
./flyway -plugins.dapr.secrets="secret1,secret2" info

----------------------------------------

TITLE: Running SQLFluff Linting in Community Edition
DESCRIPTION: Command to run SQLFluff linting directly from command line, specifying SQL dialect and migration files to analyze.

LANGUAGE: shell
CODE:
sqlfluff lint --dialect <dialect> [migrations]

----------------------------------------

TITLE: Setting GCSM Project in Flyway Maven Configuration
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project in Flyway's Maven configuration. This XML configuration sets the project to 'quixotic-ferret-345678'.

LANGUAGE: xml
CODE:
<configuration>
    <pluginConfiguration>
        <gcsmProject>quixotic-ferret-345678</gcsmProject>
    </pluginConfiguration>
</configuration>

----------------------------------------

TITLE: Configuring TestContainers JDBC URL for PostgreSQL in Java
DESCRIPTION: Example of how to format a JDBC URL for using TestContainers with PostgreSQL. This URL format allows Flyway to connect to a containerized PostgreSQL database for testing purposes.

LANGUAGE: java
CODE:
jdbc:tc:postgresql:11-alpine://localhost:5432/databasename

----------------------------------------

TITLE: Setting GCSM Secrets using Flyway Java API
DESCRIPTION: This code example demonstrates how to programmatically set Google Cloud Secret Manager secrets using the Flyway Java API. It retrieves the GcsmConfigurationExtension plugin and uses the setGcsmSecrets method to specify the secret paths.

LANGUAGE: java
CODE:
GcsmConfigurationExtension gcsmConfigurationExtension = configuration.getPluginRegister().getPlugin(GcsmConfigurationExtension.class)
gcsmConfigurationExtension.setGcsmSecrets("secret1", "secret2");

----------------------------------------

TITLE: Setting Flyway Locations in Gradle
DESCRIPTION: Configures the migration location in a Gradle build script for Flyway.

LANGUAGE: groovy
CODE:
flyway {
    locations = ['filesystem:./sql']
}

----------------------------------------

TITLE: Executing Flyway Command with GCSM Integration
DESCRIPTION: Command line example showing how to run Flyway with Google Cloud Secret Manager integration by specifying the project ID and secret name.

LANGUAGE: plaintext
CODE:
flyway info -plugins.gcsm.project="quixotic-ferret-345678" -plugins.gcsm.secrets="my-flyway-config"

----------------------------------------

TITLE: Setting SQL Migration Suffixes in Flyway Configuration File
DESCRIPTION: This example shows how to configure SQL migration suffixes in a Flyway properties file. It allows specifying multiple file extensions for SQL migrations.

LANGUAGE: properties
CODE:
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb

----------------------------------------

TITLE: Installing SQLFluff for Code Analysis
DESCRIPTION: Command to install SQLFluff version 1.2.1 using pip3, required for the check -code functionality.

LANGUAGE: shell
CODE:
pip3 install sqlfluff==1.2.1

----------------------------------------

TITLE: Configuring Flyway Authentication Properties
DESCRIPTION: Configuration settings for Flyway authentication when using Google Cloud Spanner. User and password should be empty as authentication is handled through the keyfile.

LANGUAGE: properties
CODE:
flyway.user=
flyway.password=

----------------------------------------

TITLE: Using Timestamp Placeholder in Helper Procedures
DESCRIPTION: Implementation of the ${flyway:timestamp} placeholder in a helper procedures migration to force re-execution on each migration run

LANGUAGE: sql
CODE:
R__HelperProcedures.sql
-- ${flyway:timestamp}
create or replace procedure my_important_proc

----------------------------------------

TITLE: Configuring JDBC URL for Google BigQuery in Flyway
DESCRIPTION: Demonstrates the JDBC URL format for connecting Flyway to Google BigQuery. It includes placeholders for project ID, service account email, and private key path.

LANGUAGE: plaintext
CODE:
jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=<i>project_id</i>;OAuthType=0;OAuthServiceAcctEmail=<i>service_account_name</i>;OAuthPvtKeyPath=<i>path_to_key</i>;

----------------------------------------

TITLE: Defining Default Java Driver Class for TimescaleDB in Flyway
DESCRIPTION: Specifies the default Java class name for the JDBC driver used to connect to TimescaleDB databases in Flyway.

LANGUAGE: java
CODE:
org.postgresql.Driver

----------------------------------------

TITLE: Reference Configuration Options for Flyway Script Config Files
DESCRIPTION: Provides a comprehensive list of configuration options available for script config files in Flyway, including encoding, transaction execution, placeholder replacement, and conditional execution settings.

LANGUAGE: properties
CODE:
# Encoding of this SQL migration. Caution: changing the encoding after this migration has been run
# will invalidate the calculated checksum and require a `flyway repair`.
encoding=ISO_8859_1

# Manually determine whether or not to execute this migration in a transaction. This is useful for
# databases like PostgreSQL and SQL Server where certain statements can only execute outside a transaction.
executeInTransaction=false

# Whether this SQL migration should have its Flyway placeholders replaced. This behaves exactly like the global
# 'placeholderReplacement' parameter but applies only to this script. Default: true
placeholderReplacement=true

# Whether this migration should be executed or ignored. Valid values are 'true', 'false', 'A==B', 'A!=B' (where
# A,B are values), and combinations of these using `&&` (AND), `||` (OR) and parentheses. This
# migration is executed if the boolean expression evaluates to true, ignored if it evaluates to false, and throws an
# exception if the expression is invalid. Placeholder replacement is also supported in the expression.
# Example: 'shouldExecute=(${environment}==dev || ${environment}==test)' will run if '${environment}' is 'dev' or 'test'
# Flyway Teams only
shouldExecute=${should_execute}==true

----------------------------------------

TITLE: Testing Migrations with Specific Database Name
DESCRIPTION: Command to run migration tests against SQL Server with a specified database name. Used when migrations contain hardcoded database references.

LANGUAGE: bash
CODE:
flywayhub test --project myproject --engine 'SQL Server (v2017)' --database mydatabase ./sql

----------------------------------------

TITLE: Flyway Clean JSON Output Format
DESCRIPTION: Example of the JSON output format when running the clean command with -outputType=json option, showing cleaned schemas and operation details.

LANGUAGE: json
CODE:
{
  "schemasCleaned": [
    "public"
  ],
  "schemasDropped": [],
  "flywayVersion": "{{ site.flywayVersion }}",
  "database": "testdb",
  "warnings": [],
  "operation": "clean"
}

----------------------------------------

TITLE: Database Service Provider Configuration
DESCRIPTION: META-INF services configuration for exposing database support to Flyway engine

LANGUAGE: text
CODE:
src/main/resources/META-INF/services/org.flywaydb.core.internal.database.DatabaseType

----------------------------------------

TITLE: Storing Database Credentials in Vault
DESCRIPTION: Example of the content structure for storing database credentials in a Vault secret.

LANGUAGE: bash
CODE:
flyway.url=<database_url>
flyway.user=<database_user>
flyway.password=<database_password>

----------------------------------------

TITLE: Configuring SQL Migration Prefix in Flyway Maven Plugin
DESCRIPTION: This snippet illustrates how to set the SQL migration prefix in a Maven pom.xml file for the Flyway Maven plugin. It sets the sqlMigrationPrefix configuration option to 'M'.

LANGUAGE: xml
CODE:
<configuration>
    <sqlMigrationPrefix>M</sqlMigrationPrefix>
</configuration>

----------------------------------------

TITLE: Iterating Over Schemas for Migration in Bash
DESCRIPTION: Bash script to iterate over multiple schemas and run Flyway migrate command for each, using separate configuration files.

LANGUAGE: bash
CODE:
schemas=(foo bar)
for schema in "${schemas[@]}"
do
    flyway migrate -configFiles="/src/config/$schema.conf" 
done

----------------------------------------

TITLE: Enabling Mixed Mode via Environment Variable (Properties)
DESCRIPTION: This snippet illustrates how to set the mixed mode configuration for Flyway using an environment variable. It sets the 'FLYWAY_MIXED' variable to 'true'.

LANGUAGE: properties
CODE:
FLYWAY_MIXED=true

----------------------------------------

TITLE: Setting Placeholder Suffix via Environment Variable
DESCRIPTION: This snippet demonstrates how to set the placeholder suffix using an environment variable. It sets the 'FLYWAY_PLACEHOLDER_SUFFIX' variable to '$$'.

LANGUAGE: properties
CODE:
FLYWAY_PLACEHOLDER_SUFFIX=$$

----------------------------------------

TITLE: Configuring Flyway Callbacks via Command Line
DESCRIPTION: Command line configuration for specifying Flyway callbacks using the -callbacks parameter

LANGUAGE: powershell
CODE:
./flyway -callbacks="my.callback.FlywayCallback,my.package.to.scan" info

----------------------------------------

TITLE: Setting Script Placeholder Prefix via Java API
DESCRIPTION: Configure the script placeholder prefix programmatically using Flyway's Java API.

LANGUAGE: java
CODE:
Flyway.configure()
    .scriptPlaceholderPrefix("P__")
    .load()

----------------------------------------

TITLE: Configuring Output Query Results via Environment Variable in Flyway
DESCRIPTION: Shows how to set the output query results option using an environment variable in Flyway. This setting controls the display of query result tables during migration execution.

LANGUAGE: properties
CODE:
FLYWAY_OUTPUT_QUERY_RESULTS=false

----------------------------------------

TITLE: Configuring Flyway Schemas in Maven POM
DESCRIPTION: Illustrates how to set the managed schemas for Flyway in a Maven POM file. This configuration specifies 'schema1' and 'schema2' as the schemas to be managed by Flyway.

LANGUAGE: xml
CODE:
<configuration>
    <schemas>
        <schema>schema1</schema>
        <schema>schema2</schema>
    </schemas>
</configuration>

----------------------------------------

TITLE: Creating a Table and Inserting Data in Azure Synapse SQL
DESCRIPTION: This snippet demonstrates creating a table with a non-clustered primary key and inserting data using a placeholder. It includes examples of single-line and inline comments.

LANGUAGE: sql
CODE:
/* Single line comment */
CREATE TABLE test_user (
  id INT NOT NULL,
  name VARCHAR(25) NOT NULL,  -- this is a valid ' comment
  PRIMARY KEY NONCLUSTERED (name) NOT ENFORCED
);
GO

-- Placeholder
INSERT INTO ${tableName} (name) VALUES ('Mr. T');

----------------------------------------

TITLE: Configuring Flyway Undo Operation Properties
DESCRIPTION: This snippet shows a comprehensive sample configuration for the Flyway undo operation. It includes various settings such as database connection details, schema information, migration file locations, and custom resolvers and callbacks.

LANGUAGE: properties
CODE:
flyway.driver=org.hsqldb.jdbcDriver
flyway.url=jdbc:hsqldb:file:/db/flyway_sample
flyway.user=SA
flyway.password=mySecretPwd
flyway.connectRetries=10
flyway.initSql=SET ROLE 'myuser'
flyway.schemas=schema1,schema2,schema3
flyway.table=schema_history
flyway.locations=classpath:com.mycomp.migration,database/migrations,filesystem:/sql-migrations
flyway.sqlMigrationPrefix=Migration-
flyway.undoSqlMigrationPrefix=downgrade
flyway.repeatableSqlMigrationPrefix=RRR
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffixes=.sql,.pkg,.pkb
flyway.encoding=ISO-8859-1
flyway.placeholderReplacement=true
flyway.placeholders.aplaceholder=value
flyway.placeholders.otherplaceholder=value123
flyway.placeholderPrefix=#[
flyway.placeholderSuffix=]
flyway.resolvers=com.mycomp.project.CustomResolver,com.mycomp.project.AnotherResolver
flyway.skipDefaultCallResolvers=false
flyway.callbacks=com.mycomp.project.CustomCallback,com.mycomp.project.AnotherCallback
flyway.skipDefaultCallbacks=false
flyway.outputQueryResults=false
flyway.target=5.1
flyway.mixed=false
flyway.group=false
flyway.cleanOnValidationError=false
flyway.installedBy=my-user
flyway.errorOverrides=99999:17110:E,42001:42001:W
flyway.dryRunOutput=/my/sql/dryrun-outputfile.sql
flyway.lockRetryCount=10
flyway.oracle.sqlplus=true
flyway.oracle.sqlplusWarn=true
flyway.workingDirectory=C:/myProject
flyway.jdbcProperties.myProperty=value

----------------------------------------

TITLE: Setting GCSM Project via Flyway Java API
DESCRIPTION: Example of how to set the Google Cloud Secret Manager Project using Flyway's Java API. This code retrieves the GCSM configuration extension and sets the project to 'quixotic-ferret-345678'.

LANGUAGE: java
CODE:
GcsmConfigurationExtension gcsmConfigurationExtension = configuration.getPluginRegister().getPlugin(GcsmConfigurationExtension.class)
gcsmConfigurationExtension.setGcsmProject("quixotic-ferret-345678");

----------------------------------------

TITLE: Configuring Oracle Kerberos Cache File in Flyway Java API
DESCRIPTION: This snippet shows how to set the Oracle Kerberos Cache File location using the Flyway Java API. It demonstrates the configuration method and specifies the path to the credential cache file.

LANGUAGE: java
CODE:
Flyway.configure()
    .oracleKerberosCacheFile("/temp/krb5cc_123")
    .load()

----------------------------------------

TITLE: Setting Flyway Teams Edition via Environment Variable
DESCRIPTION: Environment variable configuration to force Flyway to use Teams edition.

LANGUAGE: properties
CODE:
FLYWAY_EDITION=teams

----------------------------------------

TITLE: Dry Run Output SQL Script
DESCRIPTION: Generated SQL script from Flyway dry run showing the planned database changes including schema history updates.

LANGUAGE: sql
CODE:
---====================================
-- Flyway Dry Run (2018-01-25 17:19:17)
---====================================

SET SCHEMA "PUBLIC";

-- Executing: validate (with callbacks)
------------------------------------------------------------------------------------------
-- ...

-- Executing: migrate (with callbacks)
------------------------------------------------------------------------------------------
-- ...

-- Executing: migrate -> v3 (with callbacks)
------------------------------------------------------------------------------------------

-- Source: ./V3__Couple.sql
---------------------------
create table COUPLE (
    ID int not null,
    PERSON1 int not null references PERSON(ID), 
    PERSON2 int not null references PERSON(ID) 
);
INSERT INTO "PUBLIC"."flyway_schema_history" ("installed_rank","version","description","type","script","checksum","installed_by","execution_time","success") VALUES (2, '3', 'Couple', 'SQL', 'V3__Couple.sql', -722651034, 'SA', 0, 1);
-- ...