TITLE: Installing Dependencies for Home Assistant Core on Linux
DESCRIPTION: This command installs all necessary dependencies for Home Assistant Core on a Linux system. It includes Python, development tools, and various libraries required for Home Assistant's functionality.

LANGUAGE: bash
CODE:
sudo apt-get install -y python3 python3-dev python3-venv python3-pip bluez libffi-dev libssl-dev libjpeg-dev zlib1g-dev autoconf build-essential libopenjp2-7 libtiff6 libturbojpeg0-dev tzdata ffmpeg liblapack3 liblapack-dev libatlas-base-dev

----------------------------------------

TITLE: Resetting Owner Password in Home Assistant Console
DESCRIPTION: This command resets the password for an existing user (typically the owner) in Home Assistant. It requires access to the Home Assistant console on the device itself.

LANGUAGE: bash
CODE:
auth reset --username 'existing_user' --password 'new_password'

----------------------------------------

TITLE: Installing Home Assistant Docker Container
DESCRIPTION: Command to create and run a new Home Assistant container with necessary configurations including timezone, config volume mounting, and network settings.

LANGUAGE: bash
CODE:
docker run -d \
  --name homeassistant \
  --privileged \
  --restart=unless-stopped \
  -e TZ=MY_TIME_ZONE \
  -v /PATH_TO_YOUR_CONFIG:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  {{ site.installation.container }}:{{ include.tag | default: 'stable' }}

----------------------------------------

TITLE: Configuring Home Assistant Docker Service in YAML
DESCRIPTION: This YAML snippet defines the Docker service configuration for Home Assistant. It specifies the container name, image, volume mounts, restart policy, privileges, and network mode. The configuration allows for customization of the image and tag through variables.

LANGUAGE: yaml
CODE:
services:
  homeassistant:
    container_name: homeassistant
    image: "{{ include.image | default: site.installation.container }}:{{ include.tag | default: 'stable' }}"
    volumes:
      - /PATH_TO_YOUR_CONFIG:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host

----------------------------------------

TITLE: Processing JSON Payload with Value Template in Home Assistant
DESCRIPTION: This snippet demonstrates how to use a value template to extract and round a temperature value from a JSON payload in Home Assistant. It shows the incoming JSON structure and the corresponding template syntax.

LANGUAGE: json
CODE:
{ "state": "ON", "temperature": 21.902 }

----------------------------------------

TITLE: Core Management Commands in Home Assistant CLI
DESCRIPTION: Basic commands for managing Home Assistant core functionality including checking status, viewing logs, rebuilding, restarting, and updating the core system.

LANGUAGE: bash
CODE:
ha core check
ha core info
ha core logs
ha core options
ha core rebuild
ha core restart
ha core restart --safe-mode
ha core start
ha core stats
ha core stop
ha core update

----------------------------------------

TITLE: Running Configuration Check for Home Assistant OS/Supervised
DESCRIPTION: Command to check the configuration validity for Home Assistant OS or Supervised installations. It validates YAML files and checks for valid config structures.

LANGUAGE: bash
CODE:
ha core check

----------------------------------------

TITLE: Updating Home Assistant Core via CLI
DESCRIPTION: Command to update Home Assistant Core using the CLI, including creating a backup. This is applicable for Home Assistant OS or Supervised installations.

LANGUAGE: bash
CODE:
ha core update --backup

----------------------------------------

TITLE: Starting Home Assistant Core for the First Time
DESCRIPTION: This command starts Home Assistant Core, which will complete the installation process by creating the necessary configuration directory and installing basic dependencies.

LANGUAGE: bash
CODE:
hass

----------------------------------------

TITLE: Configuring Network Storage Options in YAML
DESCRIPTION: YAML configuration for network storage options in Home Assistant, including name, usage, server, protocol, and protocol-specific settings for NFS and CIFS.

LANGUAGE: yaml
CODE:
Name:
  description: This is the name that will be used for the mounted directory on your system.
Usage:
  description: Here, you select how the target should be used. [See usage types below](#usage-types)
Server:
  description: The IP/hostname of the server running NFS/CIFS.
"Protocol<sup>3</sup>":
  description: The service the server is using for the network storage.
"[NFS]<sup>1</sup> Remote share path":
  description: The path used to connect to the remote storage server.
"[CIFS]<sup>2</sup> Username":
  description: "The username to use when connecting to the storage server. Use User Principal Name for domain accounts. For example: `user@domain.com`."
"[CIFS]<sup>2</sup> Password":
  description: The password to use when connecting to the storage server.
"[CIFS]<sup>2</sup> Share":
  description: The share to connect to on the storage server.

----------------------------------------

TITLE: Using Glob Pattern Characters in Home Assistant Entity Filters
DESCRIPTION: Special characters used for glob pattern matching in entity filters. The asterisk (*) matches zero or more characters, while the question mark (?) matches exactly zero or one character.

LANGUAGE: text
CODE:
* - The asterisk represents zero, one, or multiple characters
? - The question mark represents zero or one character

----------------------------------------

TITLE: Supervisor Management Commands in Home Assistant CLI
DESCRIPTION: Commands for managing the Home Assistant Supervisor including viewing information, logs, reloading, and updating the supervisor.

LANGUAGE: bash
CODE:
ha supervisor info
ha supervisor logs
ha supervisor reload
ha supervisor update

----------------------------------------

TITLE: Host System Management Commands in Home Assistant CLI
DESCRIPTION: Commands for controlling the host system running Home Assistant, including system reboot, shutdown, and updates.

LANGUAGE: bash
CODE:
ha host reboot
ha host shutdown
ha host update

----------------------------------------

TITLE: Creating I2C Module Configuration
DESCRIPTION: Configuration file content to enable the I2C device module

LANGUAGE: txt
CODE:
i2c-dev

----------------------------------------

TITLE: Home Assistant Configuration File Reference
DESCRIPTION: Reference to the main configuration file used in Home Assistant that requires restart after modifications.

LANGUAGE: yaml
CODE:
configuration.yaml

----------------------------------------

TITLE: Setting Up Home Assistant Core Directory
DESCRIPTION: These commands create a directory for Home Assistant Core and set the appropriate ownership. This prepares the system for the Home Assistant Core installation.

LANGUAGE: bash
CODE:
sudo mkdir /srv/homeassistant
sudo chown homeassistant:homeassistant /srv/homeassistant

----------------------------------------

TITLE: Installing Home Assistant Core
DESCRIPTION: This command installs the specified version of Home Assistant Core using pip. Replace the version numbers with the current version you wish to install.

LANGUAGE: bash
CODE:
pip3 install homeassistant=={{ site.current_major_version }}.{{ site.current_minor_version }}.{{ site.current_patch_version }}

----------------------------------------

TITLE: Checking Current Data Disk Information in Home Assistant OS
DESCRIPTION: Command to display information about the current data disk configuration in Home Assistant OS.

LANGUAGE: shell
CODE:
$ ha os info
...
data_disk: /dev/mmcblk1p4
...

----------------------------------------

TITLE: Restarting Home Assistant with Docker CLI
DESCRIPTION: Command to restart the Home Assistant container using Docker CLI

LANGUAGE: bash
CODE:
docker restart homeassistant

----------------------------------------

TITLE: Restarting Home Assistant with Docker Compose
DESCRIPTION: Command to restart Home Assistant using Docker Compose

LANGUAGE: bash
CODE:
docker compose up -d

----------------------------------------

TITLE: Joining Beta Channel and Updating Home Assistant Core (Bash)
DESCRIPTION: These commands join the beta channel, reload the Home Assistant Supervisor, and update Home Assistant Core to the latest beta version with a backup.

LANGUAGE: bash
CODE:
ha supervisor options --channel beta

LANGUAGE: bash
CODE:
ha supervisor reload

LANGUAGE: bash
CODE:
ha core update --backup

----------------------------------------

TITLE: Upgrading to Dev Channel for OS/Supervised Installation
DESCRIPTION: Commands to switch to the dev channel in Home Assistant OS or Supervised installations. Includes steps to join dev channel, reload supervisor, and update core with backup.

LANGUAGE: bash
CODE:
ha supervisor options --channel dev

LANGUAGE: bash
CODE:
ha supervisor reload

LANGUAGE: bash
CODE:
ha core update --backup

----------------------------------------

TITLE: Capturing Variables for Google API Configuration in Liquid
DESCRIPTION: This snippet uses Liquid templating to capture various configuration variables related to Google API setup. It includes fallback values from page variables if specific include parameters are not provided.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}
{% capture google_dev_console_link %}{{ include.google_dev_console_link | default: page.google_dev_console_link }}{% endcapture %}
{% capture api %}{{ include.api | default: page.api }}{% endcapture %}
{% capture api_link %}{{ include.api_link | default: page.api_link }}{% endcapture %}

----------------------------------------

TITLE: Upgrading Home Assistant OS/Supervised to Specific Version
DESCRIPTION: This command upgrades Home Assistant OS or Supervised installations to a specific version using the CLI. It includes a backup flag for safety.

LANGUAGE: bash
CODE:
ha core update --version {{current_version}} --backup

----------------------------------------

TITLE: Running Home Assistant Docker Container on Synology NAS
DESCRIPTION: This command runs a Docker container for Home Assistant on a Synology NAS. It sets up the container with persistent storage, device access for Z-Wave, timezone configuration, and network host mode.

LANGUAGE: bash
CODE:
sudo docker run --restart always -d --name homeassistant -v /PATH_TO_YOUR_CONFIG:/config --device=/PATH_TO_YOUR_USB_STICK -e TZ=Australia/Melbourne --net=host {{ site.installation.container }}:stable

----------------------------------------

TITLE: Windows Network Path Format
DESCRIPTION: Format for accessing Home Assistant shares on Windows using File Explorer

LANGUAGE: plaintext
CODE:
\\your.ha.ip.address

----------------------------------------

TITLE: MacOS Network Path Format
DESCRIPTION: Format for accessing Home Assistant shares on MacOS using Finder

LANGUAGE: plaintext
CODE:
smb://your.ha.ip.address

----------------------------------------

TITLE: Linux Network Path Format
DESCRIPTION: Format for accessing Home Assistant shares on Linux using Files

LANGUAGE: plaintext
CODE:
smb://your.ha.ip.address

----------------------------------------

TITLE: Accessing Home Assistant Docker Container
DESCRIPTION: This command opens a bash shell in a running Home Assistant Docker container named 'homeassistant'.

LANGUAGE: bash
CODE:
docker exec -it homeassistant bash

----------------------------------------

TITLE: Changing Password in Home Assistant Docker Container
DESCRIPTION: This command changes the password for an existing user within a Home Assistant Docker container. It uses the 'hass' command-line tool.

LANGUAGE: bash
CODE:
hass --script auth --config /config change_password existing_user new_password

----------------------------------------

TITLE: Restarting Home Assistant Docker Container
DESCRIPTION: This command restarts the Home Assistant Docker container named 'homeassistant' after making changes.

LANGUAGE: bash
CODE:
docker restart homeassistant

----------------------------------------

TITLE: Running Full Configuration Check for Home Assistant Container
DESCRIPTION: Docker command to perform a comprehensive configuration check for Home Assistant running in a container. It validates all configuration files in the /config directory.

LANGUAGE: bash
CODE:
docker exec homeassistant python -m homeassistant --script check_config --config /config

----------------------------------------

TITLE: Listing Loaded Configuration Files for Home Assistant Container
DESCRIPTION: Docker command to list all loaded configuration files in a Home Assistant container installation.

LANGUAGE: bash
CODE:
docker exec homeassistant python -m homeassistant --script check_config --files

----------------------------------------

TITLE: Viewing Integration Configuration for Home Assistant Container
DESCRIPTION: Docker command to view the configuration of a specific integration (light in this example) in a Home Assistant container installation.

LANGUAGE: bash
CODE:
docker exec homeassistant python -m homeassistant --script check_config --info light

----------------------------------------

TITLE: Viewing All Integrations Configuration for Home Assistant Container
DESCRIPTION: Docker command to view the configuration of all integrations in a Home Assistant container installation.

LANGUAGE: bash
CODE:
docker exec homeassistant python -m homeassistant --script check_config --info all

----------------------------------------

TITLE: Displaying Help for Configuration Check in Home Assistant Container
DESCRIPTION: Docker command to display help information for the configuration check script in a Home Assistant container installation.

LANGUAGE: bash
CODE:
docker exec homeassistant python -m homeassistant --script check_config --help

----------------------------------------

TITLE: Generating Building Block Integration Documentation in Liquid for Home Assistant
DESCRIPTION: This Liquid template generates documentation for building block integrations in Home Assistant. It captures the integration name and domain from page variables or include parameters, and outputs a formatted note explaining the nature of building block integrations.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}

{% note %}

**Building block integration**

This {{ name | downcase }} is a building block integration that cannot be added to your Home Assistant directly but is used and provided by other integrations.

A building block integration differs from the typical integration that connects to a device or service. Instead, other integrations that do integrate a device or service into Home Assistant use this {{ name | downcase }} building block to provide entities, services, and other functionality that you can use in your automations or dashboards.

If one of your integrations features this building block, this page documents the functionality the {{ name | downcase }} building block offers.

{% endnote %}

----------------------------------------

TITLE: Previewing Home Assistant Website Locally
DESCRIPTION: Command to start a local preview server for the Home Assistant website using bundler. The site will be available at http://127.0.0.1:4000.

LANGUAGE: bash
CODE:
bundle exec rake preview

----------------------------------------

TITLE: Previewing Home Assistant Website on Remote IP
DESCRIPTION: Command to start a preview server accessible from a specific IP address. Allows preview access from other machines on the network.

LANGUAGE: bash
CODE:
bundle exec rake preview[192.168.0.123]

----------------------------------------

TITLE: Isolating Blog Post for Development
DESCRIPTION: Command to temporarily remove other blog posts to speed up site generation while working on a specific post.

LANGUAGE: bash
CODE:
bundle exec rake isolate[filename-of-blogpost]

----------------------------------------

TITLE: Restoring Isolated Blog Posts
DESCRIPTION: Command to restore all blog posts after development is complete.

LANGUAGE: bash
CODE:
bundle exec rake integrate

----------------------------------------

TITLE: Switching to Home Assistant User for Core Installation
DESCRIPTION: Command to switch to the user running Home Assistant in a Core installation.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s

----------------------------------------

TITLE: Activating Virtual Environment for Home Assistant Core
DESCRIPTION: Command to activate the virtual environment for Home Assistant in a Core installation.

LANGUAGE: bash
CODE:
source /srv/homeassistant/bin/activate

----------------------------------------

TITLE: Running Full Configuration Check for Home Assistant Core
DESCRIPTION: Command to perform a full configuration check for Home Assistant Core installation.

LANGUAGE: bash
CODE:
hass --script check_config

----------------------------------------

TITLE: Listing Loaded Configuration Files for Home Assistant Core
DESCRIPTION: Command to list all loaded configuration files in a Home Assistant Core installation.

LANGUAGE: bash
CODE:
hass --script check_config --files

----------------------------------------

TITLE: Viewing Integration Configuration for Home Assistant Core
DESCRIPTION: Command to view the configuration of a specific integration (light in this example) in a Home Assistant Core installation.

LANGUAGE: bash
CODE:
hass --script check_config --info light

----------------------------------------

TITLE: Viewing All Integrations Configuration for Home Assistant Core
DESCRIPTION: Command to view the configuration of all integrations in a Home Assistant Core installation.

LANGUAGE: bash
CODE:
hass --script check_config --info all

----------------------------------------

TITLE: Displaying Help for Configuration Check in Home Assistant Core
DESCRIPTION: Command to display help information for the configuration check script in a Home Assistant Core installation.

LANGUAGE: bash
CODE:
hass --script check_config --help

----------------------------------------

TITLE: Pulling Beta Docker Image for Home Assistant (Bash)
DESCRIPTION: This command pulls the beta version of the Home Assistant Docker image.

LANGUAGE: bash
CODE:
docker pull {{ site.installation.container }}:beta

----------------------------------------

TITLE: Installing Beta Version of Home Assistant Core (Bash)
DESCRIPTION: These commands switch to the Home Assistant user, activate the virtual environment, and install the beta version of Home Assistant using pip.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s

LANGUAGE: bash
CODE:
source /srv/homeassistant/bin/activate

LANGUAGE: bash
CODE:
pip3 install --pre --upgrade homeassistant

----------------------------------------

TITLE: Upgrading to Dev Version for Container Installation
DESCRIPTION: Docker command to pull the development version of Home Assistant Container.

LANGUAGE: bash
CODE:
docker pull {{ site.installation.container }}:dev

----------------------------------------

TITLE: Upgrading to Dev Version for Core Installation
DESCRIPTION: Series of commands to install the development version of Home Assistant Core, including switching user context and activating virtual environment.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s

LANGUAGE: bash
CODE:
source /srv/homeassistant/bin/activate

LANGUAGE: bash
CODE:
pip3 install --upgrade git+https://github.com/home-assistant/core.git@dev

----------------------------------------

TITLE: Pulling Specific Home Assistant Container Version
DESCRIPTION: This command pulls a specific version of the Home Assistant container image. After pulling, the container needs to be recreated with the new image.

LANGUAGE: bash
CODE:
docker pull {{ site.installation.container }}:{{current_version}}

----------------------------------------

TITLE: Switching to Home Assistant User in Core Installation
DESCRIPTION: This command switches to the user that is running Home Assistant in a Core installation.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s

----------------------------------------

TITLE: Activating Home Assistant Virtual Environment in Core Installation
DESCRIPTION: This command activates the virtual environment that Home Assistant is running in for a Core installation.

LANGUAGE: bash
CODE:
source /srv/homeassistant/bin/activate

----------------------------------------

TITLE: Installing Specific Home Assistant Version in Core Installation
DESCRIPTION: This command downloads and installs a specific version of Home Assistant in a Core installation using pip.

LANGUAGE: bash
CODE:
pip3 install homeassistant=={{current_version}}

----------------------------------------

TITLE: Listing Available Data Disk Targets in Home Assistant OS
DESCRIPTION: Command to list all potential storage devices that can be used as data disks in Home Assistant OS.

LANGUAGE: shell
CODE:
ha os datadisk list

----------------------------------------

TITLE: Moving Data to New Disk in Home Assistant OS
DESCRIPTION: Command to initiate the data migration process to a new storage device in Home Assistant OS. Requires device path as parameter.

LANGUAGE: shell
CODE:
ha os datadisk move /dev/sdx

----------------------------------------

TITLE: Configuring Raspberry Pi I2C Parameters
DESCRIPTION: Required configuration parameters to enable I2C on both VC and ARM interfaces

LANGUAGE: txt
CODE:
dtparam=i2c_vc=on
dtparam=i2c_arm=on

----------------------------------------

TITLE: Terminal Commands for I2C Enable
DESCRIPTION: Shell commands to mount boot partition and configure I2C settings via terminal

LANGUAGE: shell
CODE:
mkdir /tmp/mnt
mount /dev/sda1 /tmp/mnt
mkdir -p /tmp/mnt/modules
echo -ne i2c-dev>/tmp/mnt/modules/rpi-i2c.conf
echo dtparam=i2c_vc=on >> /tmp/mnt/config.txt
echo dtparam=i2c_arm=on >> /tmp/mnt/config.txt
sync
reboot

----------------------------------------

TITLE: Flashing EMMC2UMS Image to ODROID-M1S eMMC in Home Assistant OS
DESCRIPTION: This command downloads the ODROID-M1S EMMC2UMS image and writes it directly to the eMMC storage, preparing the device for installation of a different operating system. This operation will overwrite the existing Home Assistant OS installation.

LANGUAGE: bash
CODE:
curl https://dn.odroid.com/RK3566/ODROID-M1S/Installer/ODROID-M1S_EMMC2UMS.img | dd of=/dev/mmcblk0

----------------------------------------

TITLE: Listing Storage Devices in ODROID-N2+ Shell
DESCRIPTION: This command lists the available storage devices on the ODROID-N2+ board. It's used to confirm the storage device node before enabling USB Mass Storage mode.

LANGUAGE: bash
CODE:
ls /dev/mmc*

----------------------------------------

TITLE: Enabling USB Mass Storage Mode on ODROID-N2+
DESCRIPTION: This command enables USB Mass Storage (UMS) mode on the ODROID-N2+, configuring the device to act as a memory card reader. It allows the connected computer to recognize the ODROID-N2+ as a USB storage device for flashing.

LANGUAGE: bash
CODE:
ums /dev/mmcblk0

----------------------------------------

TITLE: Configuring Network Storage Usage Types in YAML
DESCRIPTION: YAML configuration for defining usage types of network storage in Home Assistant, including backup, media, and share options.

LANGUAGE: yaml
CODE:
Backup:
  description: This will become a target. You can use it when creating an automatic or manual backup. The first storage you add of this type becomes your new default target. If you want to change the default target, [check out the documentation below](#change-default-local-backup-location).
Media:
  description: A new directory with the name you gave your network storage will be created under `/media`. This directory can be accessed by Home Assistant and add-ons.
Share:
  description: A new directory with the name you gave your network storage will be created under `/share`.  This directory can be accessed by Home Assistant and add-ons.

----------------------------------------

TITLE: Example Home Assistant Add-on Repository URL
DESCRIPTION: Example repository URL that demonstrates the format of a Home Assistant add-on repository. This is a sample repository used for demonstration purposes.

LANGUAGE: text
CODE:
https://github.com/home-assistant/hassio-addons-example

----------------------------------------

TITLE: Updating Home Assistant Container using Docker CLI
DESCRIPTION: Commands to update Home Assistant when running in a Docker container. This involves pulling the new image and recreating the container.

LANGUAGE: bash
CODE:
docker pull {{ site.installation.container }}:stable

----------------------------------------

TITLE: Updating Home Assistant Container using Docker Compose
DESCRIPTION: Commands to update Home Assistant when using Docker Compose. This pulls the new image and recreates the container.

LANGUAGE: bash
CODE:
docker compose pull homeassistant
docker compose up -d

----------------------------------------

TITLE: Updating Home Assistant Core Installation
DESCRIPTION: Series of commands to update a Home Assistant Core installation. This includes switching to the Home Assistant user, activating the virtual environment, and using pip to upgrade the package.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s

LANGUAGE: bash
CODE:
source /srv/homeassistant/bin/activate

LANGUAGE: bash
CODE:
pip3 install --upgrade homeassistant

----------------------------------------

TITLE: Initializing Dynamic Variables with Liquid in Home Assistant
DESCRIPTION: This snippet uses Liquid templating to set up dynamic variables for name, domain, and title. It allows for default values to be overridden by include parameters or page variables.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}
{% capture title %}{{ include.title | default: page.title }}{% endcapture %}

----------------------------------------

TITLE: Capturing Liquid Variables for Home Assistant Card Documentation
DESCRIPTION: This Liquid snippet captures variables for use in the documentation, including the card name, domain, and title. It allows for dynamic content generation based on page or include parameters.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}
{% capture title %}{{ include.title | default: page.title }}{% endcapture %}

----------------------------------------

TITLE: Exposing USB Devices in Docker CLI
DESCRIPTION: Docker CLI command to map USB devices into the Home Assistant container for Zigbee and other integrations

LANGUAGE: bash
CODE:
docker run ... --device /dev/ttyUSB0:/dev/ttyUSB0 ...

----------------------------------------

TITLE: Exposing USB Devices in Docker Compose
DESCRIPTION: Docker Compose configuration to map USB devices into the Home Assistant container

LANGUAGE: yaml
CODE:
services:
  homeassistant:
    ...
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0

----------------------------------------

TITLE: Disabling Jemalloc in Docker CLI
DESCRIPTION: Docker CLI command to disable jemalloc memory allocation library for systems with page size larger than 4K

LANGUAGE: bash
CODE:
docker run ... -e "DISABLE_JEMALLOC=true" ...

----------------------------------------

TITLE: Disabling Jemalloc in Docker Compose
DESCRIPTION: Docker Compose configuration to disable jemalloc memory allocation library

LANGUAGE: yaml
CODE:
services:
  homeassistant:
    ...
    environment:
      DISABLE_JEMALLOC: true

----------------------------------------

TITLE: Updating Home Assistant Docker Container
DESCRIPTION: Series of commands to update Home Assistant by pulling the latest image, stopping and removing the existing container, and creating a new one with updated image.

LANGUAGE: bash
CODE:
docker pull {{ site.installation.container }}:{{ include.tag | default: 'stable' }}

LANGUAGE: bash
CODE:
docker stop homeassistant

LANGUAGE: bash
CODE:
docker rm homeassistant

LANGUAGE: bash
CODE:
docker run -d \
  --name homeassistant \
  --restart=unless-stopped \
  --privileged \
  -e TZ=MY_TIME_ZONE \
  -v /PATH_TO_YOUR_CONFIG:/config \
  -v /run/dbus:/run/dbus:ro \
  --network=host \
  {{ site.installation.container }}:{{ include.tag | default: 'stable' }}

----------------------------------------

TITLE: Updating and Upgrading System Packages in Linux
DESCRIPTION: These commands update the package list and upgrade all installed packages on a Linux system. This ensures the system is up-to-date before installing Home Assistant Core.

LANGUAGE: bash
CODE:
sudo apt-get update
sudo apt-get upgrade -y

----------------------------------------

TITLE: Creating a User Account for Home Assistant Core
DESCRIPTION: These commands create a system user account named 'homeassistant' for running Home Assistant Core. The first command is for systems with GPIO access, while the second is for standard installations.

LANGUAGE: bash
CODE:
sudo useradd -rm homeassistant -G dialout,gpio,i2c

LANGUAGE: bash
CODE:
sudo useradd -rm homeassistant

----------------------------------------

TITLE: Creating and Activating Virtual Environment for Home Assistant Core
DESCRIPTION: These commands switch to the homeassistant user, create a Python virtual environment, and activate it. This isolates the Home Assistant Core installation from the system Python environment.

LANGUAGE: bash
CODE:
sudo -u homeassistant -H -s
cd /srv/homeassistant
python3 -m venv .
source bin/activate

----------------------------------------

TITLE: Installing Python Wheel Package in Virtual Environment
DESCRIPTION: This command installs the 'wheel' package, which is required for installing some Python packages. It's a prerequisite for installing Home Assistant Core.

LANGUAGE: bash
CODE:
python3 -m pip install wheel

----------------------------------------

TITLE: Restore EFI Boot Entry Command
DESCRIPTION: Command to create EFI boot entry for Home Assistant OS using efibootmgr on Linux

LANGUAGE: text
CODE:
efibootmgr --create --disk /dev/<drivename> --part 1 --label "HAOS" \
   --loader '\EFI\BOOT\bootx64.efi'

----------------------------------------

TITLE: KVM Installation Command
DESCRIPTION: Command to install Home Assistant OS as a KVM virtual machine using virt-install

LANGUAGE: bash
CODE:
virt-install --name haos --description "Home Assistant OS" --os-variant=generic --ram=4096 --vcpus=2 --disk <PATH TO QCOW2 FILE>,bus=scsi --controller type=scsi,model=virtio-scsi --import --graphics none --boot uefi

----------------------------------------

TITLE: KVM Installation with USB Device
DESCRIPTION: Command to install Home Assistant OS as a KVM virtual machine with attached USB device

LANGUAGE: bash
CODE:
virt-install --name haos --description "Home Assistant OS" --os-variant=generic --ram=4096 --vcpus=2 --disk <PATH TO QCOW2 FILE>,bus=scsi --controller type=scsi,model=virtio-scsi --import --graphics none --boot uefi --hostdev 003.003

----------------------------------------

TITLE: Variable Declaration in Liquid Template
DESCRIPTION: Captures page variables for name and domain to be used throughout the template.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}

----------------------------------------

TITLE: Configuration Flow Badge Template
DESCRIPTION: Renders a configuration flow start badge for the integration using My button component.

LANGUAGE: liquid
CODE:
{% my config_flow_start badge domain=domain %}

----------------------------------------

TITLE: Auto-Discovery Conditional Block
DESCRIPTION: Conditional template block that displays auto-discovery information if the integration supports various discovery protocols.

LANGUAGE: liquid
CODE:
{% if include.discovery or page.ha_dhcp or page.ha_homekit or page.ha_ssdp or page.ha_zeroconf or page.ha_mqtt %}
{{ name }} can be auto-discovered by Home Assistant. If an instance was found,
it will be shown as **Discovered**. You can then set it up right away.
{% endif %}

----------------------------------------

TITLE: Capturing Variables with Liquid Templates
DESCRIPTION: This snippet uses Liquid templating to capture variables from include parameters or page frontmatter. It sets up variables for the API name, domain, Google Developer Console link, and API links.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}
{% capture google_dev_console_link %}{{ include.google_dev_console_link | default: page.google_dev_console_link }}{% endcapture %}
{% capture api %}{{ include.api | default: page.api }}{% endcapture %}
{% capture api_link %}{{ include.api_link | default: page.api_link }}{% endcapture %}

----------------------------------------

TITLE: Defining Liquid Variables for Integration Setup
DESCRIPTION: This snippet sets up Liquid variables used throughout the integration setup instructions. It captures various parameters like integration name, domain, and API details, with fallbacks to page variables.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}
{% capture domain %}{{ include.domain | default: page.ha_domain }}{% endcapture %}
{% capture google_dev_console_link %}{{ include.google_dev_console_link | default: page.google_dev_console_link }}{% endcapture %}
{% capture api %}{{ include.api | default: page.api }}{% endcapture %}
{% capture api_link %}{{ include.api_link | default: page.api_link }}{% endcapture %}
{% capture title %}{{ include.title | default: page.title }}{% endcapture %}

----------------------------------------

TITLE: Displaying OAuth Authorization Steps in Collapsible Section
DESCRIPTION: This snippet creates a collapsible 'details' section containing step-by-step instructions for the OAuth and device authorization process. It guides users through account selection, app verification, and linking the account to Home Assistant.

LANGUAGE: liquid
CODE:
{% details "OAuth and device authorization steps" %}

1. Continue through the steps of selecting the account you want to authorize.

2. **NOTE**: You may get a message telling you that the app has not been verified and you will need to acknowledge that in order to proceed.

3. You can now see the details of what you are authorizing Home Assistant to access with two options at the bottom. Select **Continue**.

4. The page will now display **Link account to Home Assistant?**, note **Your instance URL**. If this is not correct, refer to [My Home Assistant](/integrations/my). If everything looks good, select **Link Account**.

5. You may close the window, and return back to Home Assistant where you should see a **Success!** message from Home Assistant.

{% enddetails %}

----------------------------------------

TITLE: Capturing Integration Name with Liquid Template in Home Assistant
DESCRIPTION: This snippet uses Liquid templating to capture the integration name. It sets a variable 'name' to either the value of the 'include.name' parameter or the page title if the parameter is not provided.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}

----------------------------------------

TITLE: Generating Device Name and Integration Links in Liquid for Home Assistant
DESCRIPTION: This snippet captures the device name from page metadata and generates links to the supporting integration. It explains how the devices are supported and directs users to the configuration flow and usage documentation.

LANGUAGE: liquid
CODE:
{% capture name %}{{ include.name | default: page.title }}{% endcapture %}

Support for devices by {{ name }} in Home Assistant is provided by the
[{{ page.ha_supporting_integration }}](/integrations/{{ page.ha_supporting_domain }})
integration.

{{ name }} devices are either rebranded devices or devices that share a common
communication protocol, making it possible to use them with the
[{{ page.ha_supporting_integration }}](/integrations/{{ page.ha_supporting_domain }})
integration.

{% include integrations/config_flow.md domain=page.ha_supporting_domain %}

## Usage information

For more documentation on how to use {{ name }} in Home Assistant, please refer to the
[{{ page.ha_supporting_integration }} integration documentation page](/integrations/{{ page.ha_supporting_domain }}).

----------------------------------------

TITLE: Configuring LinkPlay Action in YAML
DESCRIPTION: Defines the linkplay.play_preset action for playing presets on LinkPlay media players. It specifies required data attributes for targeting devices and selecting presets.

LANGUAGE: yaml
CODE:
| Data attribute | Optional | Description |
| ---------------------- | -------- | ----------- |
| `entity_id` | no | The speakers to target. To target all LinkPlay devices, use `all`.
| `preset_number` | no | The number of the preset to play.

----------------------------------------

TITLE: Configuring Robot.txt Rules with Jekyll Variables
DESCRIPTION: Standard robots.txt configuration that allows all user agents to access the site and specifies the sitemap location using Jekyll's site.url variable.

LANGUAGE: txt
CODE:
User-agent: *
Disallow:

Sitemap: {{ site.url }}/sitemap.xml

----------------------------------------

TITLE: Displaying Markdown Changelog for inuit.css
DESCRIPTION: This markdown snippet outlines the changes made in versions 5.0.0 and 5.1.1 of inuit.css. It includes information about new features, removed components, and bug fixes.

LANGUAGE: markdown
CODE:
# Changelog

This changelog only exists as of v5.0 onward, for previous inuit.css versions'
history please browse the commit logs.

## v5.0.0

This major version bump saw the introduction of the
[inuit.css web template](https://github.com/csswizardry/inuit.css-web-template),
a means of including inuit.css as a submodule through which you can easily pull
updates from GitHub whilst avoiding having to touch any library code.

* Use [beautons](https://github.com/csswizardry/beautons) for button styling
* Use [csswizardry-grids](https://github.com/csswizardry/csswizardry-grids) for
  inuit.css' built-in grid system.
* Removed [Batch](http://adamwhitcroft.com/batch/)
* Moved over to [HTML5 Boilerplate](http://html5boilerplate.com/) style helper
  classes.
* Added a few more helper classes and mixins.
* Introduced switches to turn objects and abstractions on/off.

## v5.1.1

* Convert special character to unicode.
* Fix/change the `headings` mixin.
* Fix some typos pertaining to the renaming of the spriting object.

----------------------------------------

TITLE: Demonstrating Bug Reports with jsFiddle in Markdown
DESCRIPTION: This snippet shows how to link to jsFiddle for providing a reduced test case when reporting bugs. It demonstrates the use of inline links in Markdown syntax.

LANGUAGE: markdown
CODE:
[jsFiddle](http://jsfiddle.net/)

----------------------------------------

TITLE: Formatting Topic Branch Names in Markdown
DESCRIPTION: This snippet illustrates how to format topic branch names using inline code blocks in Markdown. It provides examples of appropriate branch naming conventions for bug fixes and new features.

LANGUAGE: markdown
CODE:
`fix/grids`, `feature/new-object`

----------------------------------------

TITLE: Installing inuit.css via Command Line
DESCRIPTION: Commands to clone the inuit.css web template and initialize a new project with the framework as a submodule.

LANGUAGE: bash
CODE:
$ git clone --recursive git@github.com:csswizardry/inuit.css-web-template.git your-project-folder
$ cd your-project-folder
$ ./go

----------------------------------------

TITLE: Overriding inuit.css Default Variables in SCSS
DESCRIPTION: Example of how to override default inuit.css variables in the _vars.scss file to customize the framework.

LANGUAGE: scss
CODE:
/*------------------------------------*\
    $OVERRIDES
\*------------------------------------*/
/**
 * Place any variables that should override inuit.css' defaults here.
 */
$h1-size:48px;
$push:true;
$palm-push:true;

----------------------------------------

TITLE: Importing Custom UI Styles in SCSS
DESCRIPTION: Example of how to import custom UI styles into the main style.scss file to extend inuit.css with project-specific styles.

LANGUAGE: scss
CODE:
/**
 * She's all yours, cap'n... Begin importing your stuff here.
 */
//@import "ui/example";
@import "ui/footer";
@import "ui/contact-form";
@import "ui/pricing-table";

----------------------------------------

TITLE: Listing Users in Home Assistant Operating System
DESCRIPTION: This command lists all registered users on a Home Assistant system when executed in the terminal or console.

LANGUAGE: bash
CODE:
auth list

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice
DESCRIPTION: Standard boilerplate notice text to be included when applying the Apache License to a work. This notice should be customized with appropriate copyright information and formatted according to the file type.

LANGUAGE: text
CODE:
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

----------------------------------------

TITLE: Creative Commons Trademark Notice
DESCRIPTION: Legal notice regarding Creative Commons trademark usage and contact information

LANGUAGE: txt
CODE:
Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.

Creative Commons may be contacted at creativecommons.org