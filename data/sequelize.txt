TITLE: Initializing Sequelize Model and Database Connection in JavaScript
DESCRIPTION: Demonstrates how to set up a basic Sequelize model for a User class with username and birthday fields, connect to an in-memory SQLite database, and create a new user record. Shows core Sequelize concepts including model definition, database synchronization, and record creation.

LANGUAGE: javascript
CODE:
const { Sequelize, Model, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

class User extends Model {}
User.init(
  {
    username: DataTypes.STRING,
    birthday: DataTypes.DATE,
  },
  { sequelize, modelName: 'user' },
);

(async () => {
  await sequelize.sync();
  const jane = await User.create({
    username: 'janedoe',
    birthday: new Date(1980, 6, 20),
  });
  console.log(jane.toJSON());
})();

----------------------------------------

TITLE: Initializing Sequelize Models with TypeScript
DESCRIPTION: Demonstrates how to define and use a Sequelize model with TypeScript, including model definition with decorators, database connection setup, and basic CRUD operations. Uses type inference for model attributes and creation parameters.

LANGUAGE: typescript
CODE:
import {
  Sequelize,
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
} from '@sequelize/core';
import { Attribute } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  declare username: string | null;

  @Attribute(DataTypes.DATE)
  declare birthday: Date | null;
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

await sequelize.sync();

const jane = await User.create({
  username: 'janedoe',
  birthday: new Date(1980, 6, 20),
});

console.log(jane.toJSON());

----------------------------------------

TITLE: Connecting to Database with Sequelize in JavaScript
DESCRIPTION: Demonstrates three methods of connecting to a database using Sequelize: via connection URI, with SQLite parameters, and with parameters for other dialects. Includes examples for multiple database types.

LANGUAGE: js
CODE:
const { Sequelize } = require('sequelize');

// Option 1: Passing a connection URI
const sequelize = new Sequelize('sqlite::memory:') // Example for sqlite
const sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname') // Example for postgres

// Option 2: Passing parameters separately (sqlite)
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: 'path/to/database.sqlite'
});

// Option 3: Passing parameters separately (other dialects)
const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: /* one of 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mssql' | 'db2' | 'snowflake' | 'oracle' */
});

----------------------------------------

TITLE: Installing Sequelize and Database Drivers
DESCRIPTION: Commands to install Sequelize and database-specific drivers using npm. Supports multiple database types including PostgreSQL, MySQL, MariaDB, SQLite, Microsoft SQL Server, and Oracle.

LANGUAGE: sh
CODE:
npm install --save sequelize

LANGUAGE: sh
CODE:
# One of the following:
$ npm install --save pg pg-hstore # Postgres
$ npm install --save mysql2
$ npm install --save mariadb
$ npm install --save sqlite3
$ npm install --save tedious # Microsoft SQL Server
$ npm install --save oracledb # Oracle Database

----------------------------------------

TITLE: Automated Model Attribute Typing in TypeScript with Sequelize
DESCRIPTION: Demonstrates how to use InferAttributes and InferCreationAttributes to automatically type model attributes. Shows usage of decorators and CreationOptional type for handling optional creation attributes.

LANGUAGE: typescript
CODE:
import { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';
import { Model, InferAttributes, InferCreationAttributes, CreationOptional } from '@sequelize/core';

// order of InferAttributes & InferCreationAttributes is important.
export class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.INTEGER)
  @PrimaryKey
  @AutoIncrement
  // 'CreationOptional' is a special type that marks the attribute as optional
  // when creating an instance of the model (such as using Model.create()).
  declare id: CreationOptional<number>;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare name: string;
}

----------------------------------------

TITLE: Testing Database Connection with Sequelize
DESCRIPTION: Demonstrates how to test the database connection using Sequelize's authenticate() method. It includes error handling to log success or failure of the connection attempt.

LANGUAGE: javascript
CODE:
try {
  await sequelize.authenticate();
  console.log('Connection has been established successfully.');
} catch (error) {
  console.error('Unable to connect to the database:', error);
}

----------------------------------------

TITLE: Defining a User Model in Sequelize (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a User model in Sequelize using TypeScript. It includes attribute definitions with decorators for primary key, auto-increment, and not null constraints.

LANGUAGE: typescript
CODE:
import {
  Sequelize,
  DataTypes,
  Model,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
} from '@sequelize/core';
import { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({ dialect: SqliteDialect });

export class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.INTEGER)
  @PrimaryKey
  @AutoIncrement
  declare id: CreationOptional<number>;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  declare lastName: string | null;
}

----------------------------------------

TITLE: Testing Database Connection with Sequelize in JavaScript
DESCRIPTION: Shows how to test the database connection using Sequelize's authenticate() method. Includes error handling for connection failures.

LANGUAGE: js
CODE:
try {
  await sequelize.authenticate();
  console.log('Connection has been established successfully.');
} catch (error) {
  console.error('Unable to connect to the database:', error);
}

----------------------------------------

TITLE: Implementing Concrete Table Inheritance in Sequelize with TypeScript
DESCRIPTION: Demonstrates how to create a hierarchy of models using Sequelize's Concrete Table Inheritance pattern. Shows implementation of a Player base class with Footballer, Cricketer, and Bowler subclasses using TypeScript decorators.

LANGUAGE: typescript
CODE:
import { Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';
import { Attribute, Default, PrimaryKey, NotNull } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

@Table.Abstract
class Player<M extends Player = Player> extends Model<
  InferAttributes<M>,
  InferCreationAttributes<M>
> {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare name: string;
}

class Footballer extends Player<Footballer> {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare club: string;
}

class Cricketer<M extends Cricketer = Cricketer> extends Player<M> {
  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare battingAverage: number;
}

class Bowler extends Cricketer<Bowler> {
  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare bowlingAverage: number;
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [Footballer, Cricketer],
});

----------------------------------------

TITLE: Creating Sequelize Model Instances
DESCRIPTION: Demonstrates how to create model instances using the build and save methods, as well as the combined create method.

LANGUAGE: javascript
CODE:
const jane = User.build({ name: 'Jane' });
console.log(jane instanceof User); // true
console.log(jane.name); // "Jane"

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane' });
// Jane exists in the database now!
console.log(jane instanceof User); // true
console.log(jane.name); // "Jane"

----------------------------------------

TITLE: Connecting to SQLite Database with Sequelize
DESCRIPTION: Example of how to create a Sequelize instance and connect to a SQLite database. It imports necessary modules and initializes the Sequelize object with SQLite dialect.

LANGUAGE: javascript
CODE:
import { Sequelize } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({
  dialect: SqliteDialect,
});

----------------------------------------

TITLE: Implementing Single-model, Multiple-foreign-key Polymorphic Associations in Sequelize TypeScript
DESCRIPTION: This code snippet shows how to create a single Comment model with multiple foreign keys for different target types (Article and Video). It uses TypeScript decorators to define model attributes and associations.

LANGUAGE: typescript
CODE:
class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  declare id: number;

  @Attributes(DataTypes.STRING)
  @NotNull
  declare content: string;

  @Attributes(DataTypes.INTEGER)
  declare articleId: number | null;

  @BelongsTo(() => Article, 'articleId')
  declare article?: Article;

  @Attributes(DataTypes.INTEGER)
  declare videoId: number | null;

  @BelongsTo(() => Video, 'videoId')
  declare video?: Video;
}

----------------------------------------

TITLE: Configuring Logging in Sequelize
DESCRIPTION: Examples of how to configure logging options when initializing a Sequelize instance. It shows how to disable logging, use console.log, or use a custom logging function.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize({
  dialect: SqliteDialect,

  // Disables logging (default)
  logging: false,

  // Sends the logging output to the console
  logging: console.log,

  // You can also use an arbitrary function, which can be used to send logs to a logging tool
  logging: (...msg) => console.log(msg),
});

----------------------------------------

TITLE: Defining Basic Sequelize Associations
DESCRIPTION: Shows the four basic ways to define associations between models A and B using Sequelize's association methods.

LANGUAGE: javascript
CODE:
const A = sequelize.define('A' /* ... */);
const B = sequelize.define('B' /* ... */);

A.hasOne(B); // A HasOne B
A.belongsTo(B); // A BelongsTo B
A.hasMany(B); // A HasMany B
A.belongsToMany(B, { through: 'C' }); // A BelongsToMany B through junction table C

----------------------------------------

TITLE: Defining a User Model in Sequelize (JavaScript)
DESCRIPTION: This snippet shows how to define a User model in Sequelize using JavaScript. It uses decorators to define attributes and their constraints.

LANGUAGE: javascript
CODE:
import { Sequelize, DataTypes, Model } from '@sequelize/core';
import { Attribute, PrimaryKey, AutoIncrement, NotNull } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({ dialect: SqliteDialect });

export class User extends Model {
  @Attribute(DataTypes.INTEGER)
  @PrimaryKey
  @AutoIncrement
  id;

  @Attribute(DataTypes.STRING)
  @NotNull
  firstName;

  @Attribute(DataTypes.STRING)
  lastName;
}

----------------------------------------

TITLE: Nested Transactions with Savepoints
DESCRIPTION: Demonstrates how to implement nested transactions using savepoints in Sequelize with transaction mode configuration.

LANGUAGE: typescript
CODE:
await sequelize.transaction(async () => {
  await sequelize.transaction({ nestMode: TransactionNestMode.savepoint }, async () => {});
});

----------------------------------------

TITLE: Basic findAll Query in TypeScript
DESCRIPTION: Demonstrates how to use the findAll method to retrieve all records matching specific criteria from the database.

LANGUAGE: typescript
CODE:
const users = await User.findAll({
  where: {
    firstName: 'John',
  },
});

----------------------------------------

TITLE: Implementing Managed Transactions in TypeScript
DESCRIPTION: Example of using managed transactions in Sequelize where automatic rollback occurs on error and commit on success.

LANGUAGE: typescript
CODE:
try {
  const result = await sequelize.transaction(async () => {
    // both of these queries will run in the transaction
    const user = await User.create({
      firstName: 'Abraham',
      lastName: 'Lincoln',
    });

    await user.setShooter({
      firstName: 'John',
      lastName: 'Boothe',
    });

    return user;
  });
} catch {
  // If the execution reaches this line, an error occurred.
  // The transaction has already been rolled back automatically by Sequelize!
}

----------------------------------------

TITLE: Defining Custom Attribute Validator in Sequelize
DESCRIPTION: This example shows how to define a custom attribute validator for the 'name' field in a User model using the @ValidateAttribute decorator. It ensures that the name is not empty.

LANGUAGE: TypeScript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Attribute, NotNull, ValidateAttribute } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @ValidateAttribute((value: unknown, user: User, attributeName: string) => {
    if (name.length === 0) {
      throw new Error('Name cannot be empty');
    }
  })
  declare name: string;
}

----------------------------------------

TITLE: Configuring Sequelize Connection Pool in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the connection pool when initializing a Sequelize instance. It sets the maximum and minimum number of connections, as well as acquisition and idle timeouts.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize({
  // ...
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000,
  },
});

----------------------------------------

TITLE: Configuring Sequelize Connection Pooling for AWS Lambda
DESCRIPTION: This code snippet demonstrates the recommended configuration for using Sequelize in AWS Lambda. It sets up connection pooling to work efficiently within Lambda invocations while avoiding issues across invocations.

LANGUAGE: javascript
CODE:
const { Sequelize } = require('@sequelize/core');

let sequelize = null;

async function loadSequelize() {
  const sequelize = new Sequelize({
    // (...)
    pool: {
      max: 2,
      min: 0,
      idle: 0,
      acquire: 3000,
      evict: CURRENT_LAMBDA_FUNCTION_TIMEOUT,
    },
  });

  // or `sequelize.sync()`
  await sequelize.authenticate();

  return sequelize;
}

module.exports.handler = async function (event, callback) {
  if (!sequelize) {
    sequelize = await loadSequelize();
  } else {
    sequelize.connectionManager.initPools();

    if (sequelize.connectionManager.hasOwnProperty('getConnection')) {
      delete sequelize.connectionManager.getConnection;
    }
  }

  try {
    return await doSomethingWithSequelize(sequelize);
  } finally {
    await sequelize.connectionManager.close();
  }
};

----------------------------------------

TITLE: Manual Model Attribute Typing in TypeScript with Sequelize
DESCRIPTION: Demonstrates manual attribute typing approach for cases where automated typing is insufficient. Shows how to explicitly define attribute types and creation attributes.

LANGUAGE: typescript
CODE:
import { Model } from '@sequelize/core';
import type { PartialBy } from '@sequelize/utils';

type UserAttributes = {
  id: number;
  name: string;
};

// we're telling the Model that 'id' is optional
// when creating an instance of the model (such as using Model.create()).
type UserCreationAttributes = PartialBy<UserAttributes, 'id'>;

class User extends Model<UserAttributes, UserCreationAttributes> {
  @Attribute(DataTypes.INTEGER)
  @PrimaryKey
  @AutoIncrement
  declare id: number;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare string: number;
}

----------------------------------------

TITLE: Using SQL Functions in Sequelize WHERE Clause
DESCRIPTION: Demonstrates how to use SQL functions and expressions in a WHERE condition using the sql tag.

LANGUAGE: typescript
CODE:
import { sql } from '@sequelize/core';

const maxLength = 7;

User.findAll({
  where: sql`char_length(${sql.attribute('content')}) <= ${maxLength}`,
});

LANGUAGE: sql
CODE:
SELECT * FROM "users" AS "user" WHERE char_length("user"."content") <= 7;

----------------------------------------

TITLE: Implementing Managed Transactions in Sequelize
DESCRIPTION: This code snippet shows how to use managed transactions in Sequelize. It demonstrates the automatic handling of transaction commit and rollback based on the success or failure of the operations within the transaction callback.

LANGUAGE: javascript
CODE:
try {
  const result = await sequelize.transaction(async t => {
    const user = await User.create(
      {
        firstName: 'Abraham',
        lastName: 'Lincoln',
      },
      { transaction: t },
    );

    await user.setShooter(
      {
        firstName: 'John',
        lastName: 'Boothe',
      },
      { transaction: t },
    );

    return user;
  });
} catch (error) {
  // Transaction has been rolled back
  // error handling
}

----------------------------------------

TITLE: Bulk Creation in Sequelize
DESCRIPTION: Illustrates how to create multiple records at once using Sequelize's bulkCreate method. This example shows how to insert multiple rows with a single query.

LANGUAGE: javascript
CODE:
const captains = await Captain.bulkCreate([{ name: 'Jack Sparrow' }, { name: 'Davy Jones' }]);
console.log(captains.length); // 2
console.log(captains[0] instanceof Captain); // true
console.log(captains[0].name); // 'Jack Sparrow'
console.log(captains[0].id); // 1 // (or another auto-generated value)

----------------------------------------

TITLE: Customizing Inverse Association in Sequelize BelongsToMany
DESCRIPTION: Example of customizing the inverse association for a BelongsToMany relationship using the inverse option.

LANGUAGE: typescript
CODE:
import { Model, InferAttributes, InferCreationAttributes, NonAttribute } from '@sequelize/core';
import { BelongsToMany } from '@sequelize/core/decorators-legacy';

class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Toot, {
    through: 'LikedToot',
    inverse: {
      as: 'likers',
    },
  })
  declare likedToots?: NonAttribute<Toot[]>;
}

class Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {
  /** Declared by {@link Person.likedToots} */
  declare likers?: NonAttribute<Person[]>;
}

----------------------------------------

TITLE: Querying with WHERE Clause in Sequelize
DESCRIPTION: Illustrates how to use the where option in Sequelize queries to filter results. This example shows various operators and complex condition structures.

LANGUAGE: javascript
CODE:
const { Op } = require("sequelize");
Post.findAll({
  where: {
    [Op.and]: [{ a: 5 }, { b: 6 }],            // (a = 5) AND (b = 6)
    [Op.or]: [{ a: 5 }, { b: 6 }],             // (a = 5) OR (b = 6)
    someAttribute: {
      [Op.eq]: 3,                              // = 3
      [Op.ne]: 20,                             // != 20
      [Op.is]: null,                           // IS NULL
      [Op.not]: true,                          // IS NOT TRUE
      [Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)
      [Op.gt]: 6,                              // > 6
      [Op.gte]: 6,                             // >= 6
      [Op.lt]: 10,                             // < 10
      [Op.lte]: 10,                            // <= 10
      [Op.between]: [6, 10],                   // BETWEEN 6 AND 10
      [Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15
      [Op.in]: [1, 2],                         // IN [1, 2]
      [Op.notIn]: [1, 2],                      // NOT IN [1, 2]
      [Op.like]: '%hat',                       // LIKE '%hat'
      [Op.notLike]: '%hat'                     // NOT LIKE '%hat'
    }
  }
});

----------------------------------------

TITLE: Synchronizing a Single Model in Sequelize (JavaScript)
DESCRIPTION: This snippet demonstrates how to synchronize a single model (User) with the database, forcibly recreating the table. It uses the sync() method with the force option set to true.

LANGUAGE: javascript
CODE:
await User.sync({ force: true });
console.log('The table for the User model was just (re)created!');

----------------------------------------

TITLE: Fetching All Users with Sequelize
DESCRIPTION: Demonstrates how to retrieve all rows from the users table using Sequelize's findAll method.

LANGUAGE: typescript
CODE:
const users = await User.findAll();

LANGUAGE: sql
CODE:
SELECT * FROM users;

----------------------------------------

TITLE: FindOne with rejectOnEmpty in TypeScript
DESCRIPTION: Example of using findOne with rejectOnEmpty option to avoid null checks in TypeScript.

LANGUAGE: typescript
CODE:
const project = await Project.findOne({
  where: { title: 'My Title' },
  rejectOnEmpty: true,
});

----------------------------------------

TITLE: Using sequelize.query for Raw SQL Execution
DESCRIPTION: Shows how to use sequelize.query method to execute raw SQL queries with various options.

LANGUAGE: javascript
CODE:
import { QueryTypes } from '@sequelize/core';
const [results, metadata] = await sequelize.query('UPDATE users SET y = 42 WHERE x = 12');

const users = await sequelize.query('SELECT * FROM `users`', {
  type: QueryTypes.SELECT,
});

const projects = await sequelize.query('SELECT * FROM projects', {
  model: Projects,
  mapToModel: true,
});

await sequelize.query('SELECT 1', {
  logging: console.log,
  plain: false,
  raw: false,
  type: QueryTypes.SELECT,
});

----------------------------------------

TITLE: Custom Nullability Validation Using Model Validator
DESCRIPTION: This snippet demonstrates how to implement custom nullability validation using a model validator in a User model. It ensures that the name can't be null unless the age is 10.

LANGUAGE: TypeScript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Attribute, NotNull } from '@sequelize/core/decorators-legacy';
import { IsEmail } from '@sequelize/validator.js';

class User extends Model {
  @Attribute(DataTypes.STRING)
  declare name: string | null;

  @Attribute(DataTypes.INTEGER)
  declare age: number;

  @ModelValidator
  onValidate() {
    if (this.name === null && this.age !== 10) {
      throw new Error("name can't be null unless age is 10");
    }
  }
}

----------------------------------------

TITLE: Querying Single Entry by Primary Key in Sequelize (JavaScript)
DESCRIPTION: Demonstrates how to use the findByPk method to retrieve a single entry from the database using its primary key. It also shows how to handle cases where the entry is not found.

LANGUAGE: javascript
CODE:
const project = await Project.findByPk(123);
if (project === null) {
  console.log('Not found!');
} else {
  console.log(project instanceof Project); // true
  // Its primary key is 123
}

----------------------------------------

TITLE: Creating Associated Records in TypeScript
DESCRIPTION: Demonstrates how to create associated records along with the main record using the include option. Shows examples for both single and multiple associated records.

LANGUAGE: typescript
CODE:
await User.create(
  {
    name: 'Mary Read',
    address: {
      city: 'Nassau',
      country: 'Bahamas',
    },
  },
  {
    include: ['address'],
  }
);

LANGUAGE: typescript
CODE:
await User.create(
  {
    name: 'Mary Read',
    addresses: [
      {
        city: 'Nassau',
        country: 'Bahamas',
      },
      {
        city: 'London',
        country: 'England',
      },
    ],
  },
  {
    include: ['addresses'],
  }
);

----------------------------------------

TITLE: Setting Isolation Levels for Transactions in Sequelize
DESCRIPTION: This code snippet shows how to set isolation levels for transactions in Sequelize. It demonstrates both setting the isolation level for a specific transaction and setting it globally for all transactions.

LANGUAGE: javascript
CODE:
const { Transaction } = require('sequelize');

await sequelize.transaction(
  {
    isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,
  },
  async t => {
    // Your code
  },
);

// Setting isolation level globally
const { Sequelize, Transaction } = require('sequelize');

const sequelize = new Sequelize('sqlite::memory:', {
  isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,
});

----------------------------------------

TITLE: Importing DataTypes in Sequelize
DESCRIPTION: Shows how to import the DataTypes object from Sequelize to access built-in data types.

LANGUAGE: javascript
CODE:
import { DataTypes } from '@sequelize/core';

----------------------------------------

TITLE: Many-To-Many Relationship Setup
DESCRIPTION: Shows how to create a Many-To-Many relationship between Movie and Actor models using a junction table.

LANGUAGE: javascript
CODE:
const Movie = sequelize.define('Movie', { name: DataTypes.STRING });
const Actor = sequelize.define('Actor', { name: DataTypes.STRING });
Movie.belongsToMany(Actor, { through: 'ActorMovies' });
Actor.belongsToMany(Movie, { through: 'ActorMovies' });

----------------------------------------

TITLE: Creating BTree Index with Attribute Options in Sequelize Model
DESCRIPTION: This snippet demonstrates creating a BTree index with various attribute options using createIndexDecorator in a Sequelize model.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { createIndexDecorator, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

const MyIndex = createIndexDecorator('MyIndex', {
  using: 'btree',
});

class Book extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @MyIndex
  declare title: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  @MyIndex({
    collate: 'en_US',
    order: 'DESC',
    length: 5,
  })
  declare title: string;
}

----------------------------------------

TITLE: Implementing Locks in Sequelize Transactions
DESCRIPTION: This code snippet shows how to use locks within Sequelize transactions. It demonstrates how to perform queries with locks and how to skip locked rows in concurrent transactions.

LANGUAGE: javascript
CODE:
return User.findAll({
  limit: 1,
  lock: true,
  transaction: t1,
});

return User.findAll({
  limit: 1,
  lock: true,
  skipLocked: true,
  transaction: t2,
});

----------------------------------------

TITLE: Creating Single Entity with Model.create() in TypeScript
DESCRIPTION: Demonstrates the simplest way to create a new record using the create() method of a Sequelize model. Creates a user record and logs the auto-generated ID.

LANGUAGE: typescript
CODE:
const jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });
console.log("Jane's auto-generated ID:", jane.id);

----------------------------------------

TITLE: Defining BelongsToMany Association in Sequelize
DESCRIPTION: Example of defining a BelongsToMany association between Person and Toot models using TypeScript decorators.

LANGUAGE: typescript
CODE:
import { Model, InferAttributes, InferCreationAttributes, NonAttribute } from '@sequelize/core';
import { BelongsToMany } from '@sequelize/core/decorators-legacy';

class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Toot, {
    through: 'LikedToot',
  })
  declare likedToots?: NonAttribute<Toot[]>;
}

class Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {}

----------------------------------------

TITLE: Configuring TypeScript Types for Auto-generated Timestamps
DESCRIPTION: Shows how to properly type the automatic timestamp attributes in a Sequelize model using TypeScript.

LANGUAGE: typescript
CODE:
import { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  declare createdAt: CreationOptional<Date>;
  declare updatedAt: CreationOptional<Date>;
}

----------------------------------------

TITLE: Preventing Default Primary Key in Sequelize Model (TypeScript)
DESCRIPTION: Demonstrates how to prevent Sequelize from automatically adding a primary key attribute to a model using the noPrimaryKey option.

LANGUAGE: typescript
CODE:
@Table({ noPrimaryKey: true })
export class User extends Model {}

----------------------------------------

TITLE: Creating a Custom Data Type in Sequelize
DESCRIPTION: Demonstrates how to create a new custom data type by extending DataTypes.ABSTRACT and implementing the toSql method. This example creates a MyDateType that represents a TIMESTAMP in SQL.

LANGUAGE: typescript
CODE:
import { Sequelize, DataTypes } from '@sequelize/core';

// All DataTypes must inherit from DataTypes.ABSTRACT.
export class MyDateType extends DataTypes.ABSTRACT {
  // toSql must return the SQL that will be used in a CREATE TABLE statement.
  toSql() {
    return 'TIMESTAMP';
  }
}

----------------------------------------

TITLE: Sequelize Migration Example: Creating Table
DESCRIPTION: Example of a Sequelize migration file that creates a new table with specified columns.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.createTable('Person', {
      name: Sequelize.DataTypes.STRING,
      isBetaMember: {
        type: Sequelize.DataTypes.BOOLEAN,
        defaultValue: false,
        allowNull: false,
      },
    });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('Person');
  },
};

----------------------------------------

TITLE: Soft-Delete Operation in Sequelize
DESCRIPTION: Demonstrates how to perform a soft-delete operation using the destroy method, which sets the deletedAt timestamp instead of removing the record.

LANGUAGE: javascript
CODE:
await Post.destroy({
  where: {
    id: 1
  }
});

----------------------------------------

TITLE: Defining BelongsTo Association with Inverse Relationship
DESCRIPTION: Shows how to configure a BelongsTo association with an inverse HasMany relationship using the inverse option. This example connects Comment and Post models bidirectionally.

LANGUAGE: typescript
CODE:
class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  declare comments?: Comment[];
}

class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @BelongsTo(() => Post, {
    foreignKey: 'postId',
    inverse: {
      as: 'comments',
      type: 'hasMany',
    },
  })
  declare post?: NonAttribute<Post>;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare postId: number;
}

----------------------------------------

TITLE: Instance Sequelize Hook Registration Methods
DESCRIPTION: Shows two ways to register instance-level Sequelize hooks: using the hooks property or through Sequelize options.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';

const sequelize = new Sequelize(/* options */);

sequelize.hooks.addListener('beforeDefine', () => {
  console.log('A new Model is being initialized');
});

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';

const sequelize = new Sequelize({
  /* options */
  hooks: {
    beforeDefine: () => {
      console.log('A new Model is being initialized');
    },
  },
});

----------------------------------------

TITLE: Model Hook Registration Methods
DESCRIPTION: Demonstrates three ways to register model hooks: using hooks property, through model options, and using decorators.

LANGUAGE: typescript
CODE:
import { Sequelize, DataTypes } from '@sequelize/core';

const sequelize = new Sequelize(/* options */);

const MyModel = sequelize.define('MyModel', {
  name: DataTypes.STRING,
});

MyModel.hooks.addListener('beforeFind', () => {
  console.log('findAll has been called on MyModel');
});

LANGUAGE: typescript
CODE:
import { Sequelize, Model, Hook } from '@sequelize/core';
import { BeforeFind } from '@sequelize/core/decorators-legacy';

export class MyModel extends Model {
  @BeforeFind
  static logFindAll() {
    console.log('findAll has been called on MyModel');
  }
}

----------------------------------------

TITLE: Using @sequelize/validator.js for Email Validation
DESCRIPTION: This snippet demonstrates how to use the @sequelize/validator.js package to add email validation to a User model using the @IsEmail decorator.

LANGUAGE: TypeScript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Attribute, NotNull } from '@sequelize/core/decorators-legacy';
import { IsEmail } from '@sequelize/validator.js';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @IsEmail
  declare email: string;
}

----------------------------------------

TITLE: Implementing Optimistic Locking in TypeScript with Sequelize
DESCRIPTION: Shows how to implement optimistic locking in a Sequelize model using TypeScript. Uses the @Version decorator to mark the version field and includes proper type definitions for model attributes.

LANGUAGE: typescript
CODE:
import { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';
import { Version } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Version
  declare version: CreationOptional<number>;
}

----------------------------------------

TITLE: Using Operators in Sequelize WHERE Clause
DESCRIPTION: Shows how to use Sequelize operators to create more complex WHERE conditions.

LANGUAGE: javascript
CODE:
import { Op } from '@sequelize/core';

Post.findAll({
  where: {
    views: {
      [Op.gt]: 100,
      [Op.lte]: 500,
    },
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM posts WHERE "views" > 100 AND "views" <= 500;

----------------------------------------

TITLE: Configuring MySQL Connection in Sequelize
DESCRIPTION: Demonstrates how to create a Sequelize instance with MySQL dialect and custom options. The dialectOptions are passed directly to the MySQL connection constructor.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'mysql',
  dialectOptions: {
    // Your mysql2 options here
  },
});

----------------------------------------

TITLE: Implementing Model Validator in Sequelize
DESCRIPTION: This example shows how to implement a model validator in a Place model to ensure that either both latitude and longitude are set, or neither are. It uses the @ModelValidator decorator.

LANGUAGE: TypeScript
CODE:
class Place extends Model {
  @Attribute(DataTypes.INTEGER)
  declare latitude: number | null;

  @Attribute(DataTypes.INTEGER)
  declare longitude: number | null;

  @ModelValidator
  validateCoords() {
    if ((this.latitude === null) !== (this.longitude === null)) {
      throw new Error('Either both latitude and longitude, or neither!');
    }
  }
}

----------------------------------------

TITLE: Defining Paranoid Model in TypeScript
DESCRIPTION: Shows how to define a paranoid model in TypeScript using the @DeletedAt decorator to enable soft-deletion functionality.

LANGUAGE: typescript
CODE:
import { InferCreationAttributes, InferAttributes, Model } from '@sequelize/core';
import { DeletedAt } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @DeletedAt
  declare deletedAt: Date | null;
}

----------------------------------------

TITLE: Creating a GIN Index in Sequelize Model
DESCRIPTION: This example shows how to create a GIN index on a JSONB column using the @Index decorator with additional options.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.JSONB)
  @NotNull
  @Index({ using: 'gin' })
  declare data: object;
}

----------------------------------------

TITLE: Eager Loading Soft-Deleted Records
DESCRIPTION: Shows how to include soft-deleted records when eager loading associations by setting the paranoid option.

LANGUAGE: javascript
CODE:
User.findAll({
  include: [
    {
      association: 'projects',
      paranoid: false
    }
  ]
});

----------------------------------------

TITLE: Enabling Snake-Case Table Names in Sequelize
DESCRIPTION: This example demonstrates how to use the 'underscored' option to generate snake_case table names from model names in Sequelize.

LANGUAGE: javascript
CODE:
import { Model, Sequelize } from '@sequelize/core';
import { Table } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

@Table({
  underscored: true,
})
class User extends Model {}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

console.log(User.table.tableName);
// → users (notice the lowercase u)

----------------------------------------

TITLE: Using HasMany Association Methods in Sequelize TypeScript
DESCRIPTION: Demonstrates the usage of various HasMany association methods like getters, setters, adders, removers, creators, checkers, and counters in Sequelize with TypeScript.

LANGUAGE: typescript
CODE:
import { HasManyGetAssociationsMixin, HasManySetAssociationsMixin, HasManyAddAssociationMixin, HasManyAddAssociationsMixin, HasManyRemoveAssociationMixin, HasManyRemoveAssociationsMixin, HasManyCreateAssociationMixin, HasManyHasAssociationMixin, HasManyHasAssociationsMixin, HasManyCountAssociationsMixin } from '@sequelize/core';

class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @HasMany(() => Comment, 'postId')
  declare comments?: NonAttribute<Comment[]>;

  declare getComments: HasManyGetAssociationsMixin<Comment>;
  declare setComments: HasManySetAssociationsMixin<Comment, Comment['id']>;
  declare addComment: HasManyAddAssociationMixin<Comment, Comment['id']>;
  declare addComments: HasManyAddAssociationsMixin<Comment, Comment['id']>;
  declare removeComment: HasManyRemoveAssociationMixin<Comment, Comment['id']>;
  declare removeComments: HasManyRemoveAssociationsMixin<Comment, Comment['id']>;
  declare createComment: HasManyCreateAssociationMixin<Comment, 'postId'>;
  declare hasComment: HasManyHasAssociationMixin<Comment, Comment['id']>;
  declare hasComments: HasManyHasAssociationsMixin<Comment, Comment['id']>;
  declare countComments: HasManyCountAssociationsMixin<Comment>;
}

// Usage examples
const post = await Post.findByPk(1);
const comments = await post.getComments();
await post.setComments([comment1, comment2, comment3]);
await post.addComment(comment1);
await post.removeComments([1, 2, 3]);
const newComment = await post.createComment({ content: 'This is a comment' });
const isAssociated = await post.hasComments([1, 2, 3]);
const count = await post.countComments();

----------------------------------------

TITLE: Defining Basic HasOne Association in Sequelize
DESCRIPTION: Example showing how to define Person and DrivingLicense models with a HasOne association using TypeScript decorators.

LANGUAGE: typescript
CODE:
import {
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
  NonAttribute,
} from '@sequelize/core';
import {
  PrimaryKey,
  Attribute,
  AutoIncrement,
  NotNull,
  HasOne,
  BelongsTo,
} from '@sequelize/core/decorators-legacy';

class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @HasOne(() => DrivingLicense, /* foreign key */ 'ownerId')
  declare drivingLicense?: NonAttribute<DrivingLicense>;
}

class DrivingLicense extends Model<
  InferAttributes<DrivingLicense>,
  InferCreationAttributes<DrivingLicense>
> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare ownerId: number;
}

----------------------------------------

TITLE: Handling NULL Values in JSON Queries
DESCRIPTION: Shows different approaches for handling SQL NULL vs JSON null values in queries. Includes examples using SQL_NULL and JSON_NULL constants.

LANGUAGE: typescript
CODE:
import { or, SQL_NULL, JSON_NULL } from '@sequelize/core';

User.findAll({
  where: {
    jsonAttribute: or(SQL_NULL, JSON_NULL),
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM "Users" WHERE "jsonAttribute" IS NULL OR "jsonAttribute" = 'null';

----------------------------------------

TITLE: Enforcing Model Name as Table Name in Sequelize
DESCRIPTION: This snippet shows how to use the 'freezeTableName' option to make Sequelize use the exact model name as the table name, without pluralization or modification.

LANGUAGE: javascript
CODE:
import { SqliteDialect } from '@sequelize/sqlite3';
import { Model, Sequelize } from '@sequelize/core';
import { Table } from '@sequelize/core/decorators-legacy';

@Table({
  freezeTableName: true,
})
class User extends Model {}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

console.log(User.table.tableName);
// → User

----------------------------------------

TITLE: Sequelize Migration with Transaction
DESCRIPTION: Example of a Sequelize migration using a transaction to ensure all operations succeed or fail together.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction(t => {
      return Promise.all([
        queryInterface.addColumn(
          'Person',
          'petName',
          {
            type: Sequelize.DataTypes.STRING,
          },
          { transaction: t },
        ),
        queryInterface.addColumn(
          'Person',
          'favoriteColor',
          {
            type: Sequelize.DataTypes.STRING,
          },
          { transaction: t },
        ),
      ]);
    });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction(t => {
      return Promise.all([
        queryInterface.removeColumn('Person', 'petName', { transaction: t }),
        queryInterface.removeColumn('Person', 'favoriteColor', {
          transaction: t,
        }),
      ]);
    });
  },
};

----------------------------------------

TITLE: Bulk Delete in Sequelize
DESCRIPTION: Shows how to delete multiple records matching specific criteria using the where clause.

LANGUAGE: typescript
CODE:
// Delete everyone named "Jane"
await User.destroy({
  where: {
    firstName: 'Jane',
  },
});

----------------------------------------

TITLE: Using @Unique Decorator for Unique Constraint in Sequelize Model
DESCRIPTION: This example demonstrates the use of the @Unique decorator as a shorthand for creating a unique constraint on a single column.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Unique, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Unique
  declare email: string;
}

----------------------------------------

TITLE: Manually Setting Table Name in Sequelize
DESCRIPTION: This example demonstrates how to manually set the table name in Sequelize, bypassing automatic name generation, snake-casing, and pluralization.

LANGUAGE: typescript
CODE:
import { Model } from '@sequelize/core';
import { Table } from '@sequelize/core/decorators-legacy';

@Table({ tableName: 'users' })
class User extends Model {}

----------------------------------------

TITLE: Configuring Read Replication in Sequelize with MySQL
DESCRIPTION: This snippet demonstrates how to set up read replication in Sequelize using MySQL. It configures multiple read replicas and a single write server, specifying connection details and pool options. The code showcases how to handle environment variables for passwords and inherit common configuration options.

LANGUAGE: javascript
CODE:
import { MySqlDialect } from '@sequelize/mysql';

const sequelize = new Sequelize({
  dialect: MySqlDialect,
  // Note: connection options that are not specified in "replication" will be inherited from the top level options
  port: 3306,
  database: 'database',
  replication: {
    read: [
      {
        host: '8.8.8.8',
        user: 'read-1-username',
        password: process.env.READ_DB_1_PW,
      },
      {
        host: '9.9.9.9',
        user: 'read-2-username',
        password: process.env.READ_DB_2_PW,
      },
    ],
    write: {
      host: '1.1.1.1',
      user: 'write-username',
      password: process.env.WRITE_DB_PW,
    },
  },
  pool: {
    // If you want to override the options used for the read/write pool you can do so here
    max: 20,
    idle: 30000,
  },
});

----------------------------------------

TITLE: Basic Record Update Using Model#save in TypeScript
DESCRIPTION: Demonstrates how to update a single record using the save() method after modifying instance attributes.

LANGUAGE: typescript
CODE:
const jane = await User.create({ name: 'Jane' });
// the user is currently named "Jane" in the database
jane.name = 'Ada';
// the name is still "Jane" in the database
await jane.save();
// Now their name has been updated to "Ada" in the database!

----------------------------------------

TITLE: Adding Check Constraint Using QueryInterface in Sequelize
DESCRIPTION: This snippet demonstrates how to add a check constraint to a User model after table creation using the QueryInterface. It enforces that email addresses must end with '@sequelizejs.com'.

LANGUAGE: TypeScript
CODE:
import { Sequelize, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';
import { NotNull, Attribute, AfterSync } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare email: string;

  @AfterSync
  static async onSync() {
    await this.sequelize.queryInterface.addConstraint(this.table, {
      fields: ['email'],
      type: 'check',
      where: {
        email: {
          [Op.like]: '%@sequelizejs.com',
        },
      },
    });
  }
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

await sequelize.sync();

----------------------------------------

TITLE: Initializing Sequelize Models
DESCRIPTION: This snippet demonstrates how to initialize Sequelize models by passing them to the Sequelize constructor or using the importModels function.

LANGUAGE: typescript
CODE:
import { Sequelize, importModels } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';
import { fileURLToPath } from 'node:url';
import { dirname } from 'node:path';

const __dirname = dirname(fileURLToPath(import.meta.url));

export const sequelize = new Sequelize({
  dialect: SqliteDialect,
  // this will load all model classes found in files matching this glob pattern.
  models: await importModels(__dirname + '/**/*.model.{ts,js}'),
});

----------------------------------------

TITLE: Filtering Associated Models in Sequelize
DESCRIPTION: Demonstrates how to filter associated models during eager loading using the where option.

LANGUAGE: typescript
CODE:
const posts = await Post.findAll({
  include: [
    {
      association: 'comments',
      required: false,
      where: {
        approved: true,
      },
    },
  ],
});

LANGUAGE: sql
CODE:
SELECT
  "Post"."id",
  "Post"."content",
  "comments"."id" AS "comments.id",
  "comments"."content" AS "comments.content",
  "comments"."postId" AS "comments.postId"
FROM "Posts" AS "Post"
LEFT JOIN "Comments" AS "comments"
  ON "Post"."id" = "comments"."postId"
  AND "comments"."approved" = true;

----------------------------------------

TITLE: Defining Paranoid Model in JavaScript
DESCRIPTION: Shows how to define a paranoid model in JavaScript using the @DeletedAt decorator to enable soft-deletion functionality.

LANGUAGE: javascript
CODE:
import { Model } from '@sequelize/core';
import { DeletedAt } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @DeletedAt
  deletedAt;
}

----------------------------------------

TITLE: Creating a Virtual Attribute for Full Name in Sequelize Model
DESCRIPTION: Demonstrates how to create a virtual attribute 'fullName' that combines 'firstName' and 'lastName'. Shows the usage of DataTypes.VIRTUAL to define dependencies.

LANGUAGE: typescript
CODE:
import { DataTypes } from '@sequelize/core';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare lastName: string;

  @Attribute(DataTypes.VIRTUAL(DataTypes.STRING, ['firstName', 'lastName']))
  get fullName(): string {
    return `${this.firstName} ${this.lastName}`;
  }
}

----------------------------------------

TITLE: Dropping a Single Table in Sequelize (JavaScript)
DESCRIPTION: This snippet demonstrates how to drop the table associated with a specific model (User) using the drop() method.

LANGUAGE: javascript
CODE:
await User.drop();
console.log('User table dropped!');

----------------------------------------

TITLE: Defining Indexes Using @Table Decorator in Sequelize Model
DESCRIPTION: This example demonstrates how to define indexes using the indexes option in the @Table decorator, which allows for more complex index definitions.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Table, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

@Table({
  indexes: [
    {
      name: 'firstName-lastName',
      type: 'fulltext',
      concurrently: true,
      fields: ['firstName', { name: 'lastName', collate: 'case_insensitive' }],
    },
  ],
})
class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare lastName: string;
}

----------------------------------------

TITLE: Disabling Auto-Timestamp Attributes with Decorator
DESCRIPTION: Demonstrates how to disable automatic timestamp attributes using the @Table decorator.

LANGUAGE: typescript
CODE:
@Table({ timestamps: false })
class User extends Model {}

----------------------------------------

TITLE: Modifying Existing Data Type in Sequelize
DESCRIPTION: Shows how to modify an existing Sequelize data type by extending it. This example creates a MyStringType that extends DataTypes.STRING and changes its SQL representation to TEXT.

LANGUAGE: typescript
CODE:
import { Sequelize, DataTypes } from '@sequelize/core';

export class MyStringType extends DataTypes.STRING {
  toSql() {
    return 'TEXT';
  }
}

----------------------------------------

TITLE: Nullable Attributes Example in TypeScript Sequelize Models
DESCRIPTION: Shows how to handle nullable attributes in Sequelize models using TypeScript, demonstrating that CreationOptional is not needed for nullable fields.

LANGUAGE: typescript
CODE:
export class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare firstName: string;

  // there is no need to use CreationOptional on firstName because nullable attributes
  // are always optional when creating an instance of the model.
  @Attribute(DataTypes.STRING)
  declare lastName: string | null;
}

----------------------------------------

TITLE: Basic JSON Property Access in Sequelize
DESCRIPTION: Demonstrates how to query nested JSON properties using dot notation syntax in Sequelize. Shows both TypeScript implementation and resulting SQL queries for different dialects.

LANGUAGE: typescript
CODE:
User.findAll({
  where: {
    'jsonAttribute.address.country': 'Belgium',
  },
});

LANGUAGE: sql
CODE:
-- postgres
"jsonAttribute"#>ARRAY['address','country'] = '"Belgium"';

-- mysql & friends
JSON_EXTRACT(`jsonAttribute`, '$.address.country') = '"Belgium"';

----------------------------------------

TITLE: Using JSONB Operators in Sequelize Queries
DESCRIPTION: Shows how to use JSONB operators like contains (Op.contains) in Sequelize queries. The example demonstrates finding posts with specific metadata.

LANGUAGE: TypeScript
CODE:
Post.findAll({
  where: {
    meta: { [Op.contains]: { keywords: 'orm, javascript, sequelize' } },
  },
});

LANGUAGE: SQL
CODE:
SELECT * FROM "posts" WHERE "meta" @> '{"keywords": "orm, javascript, sequelize"}';

----------------------------------------

TITLE: Configuring Underscored Option in Sequelize Models
DESCRIPTION: Demonstrates how to use the underscored option in Sequelize models to automatically convert field names to snake_case in the database while maintaining camelCase in JavaScript.

LANGUAGE: javascript
CODE:
const User = sequelize.define(
  'user',
  { username: Sequelize.STRING },
  {
    underscored: true,
  },
);
const Task = sequelize.define(
  'task',
  { title: Sequelize.STRING },
  {
    underscored: true,
  },
);
User.hasMany(Task);
Task.belongsTo(User);

----------------------------------------

TITLE: Referencing Sequelize CLI for Migrations in Markdown
DESCRIPTION: This snippet demonstrates how to reference the Sequelize CLI documentation for creating and running migrations. It uses Markdown syntax to create a link to the CLI documentation page.

LANGUAGE: markdown
CODE:
[`@sequelize/cli`](../cli.md)

----------------------------------------

TITLE: Implementing Custom Getter for Username in Sequelize Model
DESCRIPTION: Demonstrates how to create a custom getter for the 'username' attribute that converts it to uppercase. Shows the difference between accessing the attribute directly and using getDataValue().

LANGUAGE: typescript
CODE:
class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  get username(): string {
    return this.getDataValue('username').toUpperCase();
  }
}

const user = User.build({ username: 'SuperUser123' });

// This will call the getter
console.log(user.username); // 'SUPERUSER123'

// This will not call the getter
console.log(user.getDataValue('username')); // 'SuperUser123'

----------------------------------------

TITLE: Demonstrating Default Table Name Pluralization in Sequelize
DESCRIPTION: This snippet shows how Sequelize automatically pluralizes model names to generate table names. It uses the 'inflection' library to handle irregular plurals correctly.

LANGUAGE: javascript
CODE:
import { Model, Sequelize } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

class User extends Model {}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

console.log(User.table.tableName);
// → Users

----------------------------------------

TITLE: Merging Multiple Sequelize Scopes
DESCRIPTION: Example demonstrating how to define and merge multiple scopes with complex include patterns across related models.

LANGUAGE: javascript
CODE:
Foo.addScope('includeEverything', {
  include: {
    model: Bar,
    include: [
      {
        model: Baz,
        include: Qux,
      },
    ],
  },
});

Foo.addScope('limitedBars', {
  include: [
    {
      model: Bar,
      limit: 2,
    },
  ],
});

Foo.addScope('limitedBazs', {
  include: [
    {
      model: Bar,
      include: [
        {
          model: Baz,
          limit: 2,
        },
      ],
    },
  ],
});

Foo.addScope('excludeBazName', {
  include: [
    {
      model: Bar,
      include: [
        {
          model: Baz,
          attributes: {
            exclude: ['name'],
          },
        },
      ],
    },
  ],
});

----------------------------------------

TITLE: Defining a Single-Column Index in Sequelize Model
DESCRIPTION: This snippet demonstrates how to use the @Index decorator to define a simple single-column index on a Sequelize model attribute.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Index
  declare firstName: string;
}

----------------------------------------

TITLE: Changing Columns in SQLite with Query Interface in Sequelize
DESCRIPTION: Illustrates the process of changing a column in SQLite, which requires a workaround due to SQLite limitations. It shows the creation of a backup table, data transfer, and table recreation.

LANGUAGE: javascript
CODE:
// Assuming we have a table in SQLite created as follows:
queryInterface.createTable('Person', {
  name: DataTypes.STRING,
  isBetaMember: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    allowNull: false,
  },
  petName: DataTypes.STRING,
  foo: DataTypes.INTEGER,
});

// And we change a column:
queryInterface.changeColumn('Person', 'foo', {
  type: DataTypes.FLOAT,
  defaultValue: 3.14,
  allowNull: false,
});

LANGUAGE: sql
CODE:
PRAGMA TABLE_INFO(`Person`);

CREATE TABLE IF NOT EXISTS `Person_backup` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,
  `foo` FLOAT NOT NULL DEFAULT '3.14',
  `petName` VARCHAR(255)
);

INSERT INTO `Person_backup`
  SELECT
    `name`,
    `isBetaMember`,
    `foo`,
    `petName`
  FROM `Person`;

DROP TABLE `Person`;

CREATE TABLE IF NOT EXISTS `Person` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,
  `foo` FLOAT NOT NULL DEFAULT '3.14',
  `petName` VARCHAR(255)
);

INSERT INTO `Person`
  SELECT
    `name`,
    `isBetaMember`,
    `foo`,
    `petName`
  FROM `Person_backup`;

DROP TABLE `Person_backup`;

----------------------------------------

TITLE: Defining Abstract Models in Sequelize
DESCRIPTION: Shows how to create abstract models that serve as base classes using the @Table.Abstract decorator. Abstract models are not registered in the database and cannot create tables.

LANGUAGE: typescript
CODE:
@Table.Abstract
abstract class BaseModel extends Model {
  // ...
}

----------------------------------------

TITLE: Using BelongsTo Association Methods
DESCRIPTION: Demonstrates the usage of association methods like getPost, setPost, and createPost that are automatically added to models with BelongsTo associations.

LANGUAGE: typescript
CODE:
import { BelongsToGetAssociationMixin, BelongsToSetAssociationMixin, BelongsToCreateAssociationMixin } from '@sequelize/core';

class Comment extends Model {
  @BelongsTo(() => Post, 'postId')
  declare post?: NonAttribute<Post>;

  declare getPost: BelongsToGetAssociationMixin<Post>;
  declare setPost: BelongsToSetAssociationMixin<Post, Comment['postId']>;
  declare createPost: BelongsToCreateAssociationMixin<Post>;
}

// Usage examples
const comment = await Comment.findByPk(1);
const post = await comment.getPost();
await comment.setPost(post);
const newPost = await comment.createPost({
  title: 'New Post',
  content: 'This is a new post'
});

----------------------------------------

TITLE: Unmanaged Transaction Implementation
DESCRIPTION: Shows how to manually manage transactions with explicit commit and rollback operations.

LANGUAGE: javascript
CODE:
const transaction = await sequelize.startUnmanagedTransaction();

try {
  const user = await User.create(
    {
      firstName: 'Bart',
      lastName: 'Simpson',
    },
    { transaction },
  );

  await user.addSibling(
    {
      firstName: 'Lisa',
      lastName: 'Simpson',
    },
    { transaction },
  );

  await t.commit();
} catch (error) {
  await t.rollback();
}

----------------------------------------

TITLE: Linking to pg-diff Database Diff Tool in Markdown
DESCRIPTION: This snippet shows how to create a Markdown link to the pg-diff tool, which is mentioned as an example of a database diff tool for comparing schema changes.

LANGUAGE: markdown
CODE:
[pg-diff](https://michaelsogos.github.io/pg-diff/)

----------------------------------------

TITLE: Using sql Tag for Raw SQL in TypeScript
DESCRIPTION: Demonstrates how to use the sql tag to write raw SQL queries with safe variable interpolation.

LANGUAGE: typescript
CODE:
import { sql } from '@sequelize/core';

const id = 5;

await sequelize.query(sql`SELECT * FROM users WHERE id = ${id}`);

----------------------------------------

TITLE: Using Replacements in Sequelize Queries
DESCRIPTION: Illustrates different ways to use replacements in Sequelize queries, including positional and named replacements.

LANGUAGE: javascript
CODE:
import { QueryTypes } from '@sequelize/core';

// Positional replacements
await sequelize.query('SELECT * FROM projects WHERE status = ?', {
  replacements: ['active'],
});

// Named replacements
await sequelize.query('SELECT * FROM projects WHERE status = :status', {
  replacements: { status: 'active' },
});

// Replacements with sql tag
await sequelize.query(sql`SELECT * FROM projects WHERE status = ${'active'}`);

// Replacements in other querying methods
await Project.findAll({
  where: {
    status: sql`:status`,
  },
  replacements: { status: 'active' },
});

----------------------------------------

TITLE: Selective Field Saving in JavaScript
DESCRIPTION: Shows how to save only specific fields using the fields option with save().

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane' });
console.log(jane.name); // "Jane"
console.log(jane.favoriteColor); // "green"
jane.name = 'Jane II';
jane.favoriteColor = 'blue';
await jane.save({ fields: ['name'] });
console.log(jane.name); // "Jane II"
console.log(jane.favoriteColor); // "blue"
await jane.reload();
console.log(jane.name); // "Jane II"
console.log(jane.favoriteColor); // "green"

----------------------------------------

TITLE: Configuring PostgreSQL Connection in Sequelize
DESCRIPTION: Example of creating a Sequelize instance with PostgreSQL dialect and basic connection options including SSL and client messages configuration

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { PostgresDialect } from '@sequelize/postgres';

const sequelize = new Sequelize({
  dialect: PostgresDialect,
  database: 'mydb',
  user: 'myuser',
  password: 'mypass',
  host: 'localhost',
  port: 5432,
  ssl: true,
  clientMinMessages: 'notice',
});

----------------------------------------

TITLE: Defining Sequelize Model Scopes
DESCRIPTION: Example showing how to define default and custom scopes in a Sequelize model definition, including both static and dynamic scopes that can accept parameters.

LANGUAGE: javascript
CODE:
class Project extends Model {}
Project.init(
  {
    // Attributes
  },
  {
    defaultScope: {
      where: {
        active: true,
      },
    },
    scopes: {
      deleted: {
        where: {
          deleted: true,
        },
      },
      activeUsers: {
        include: [{ model: User, where: { active: true } }],
      },
      random() {
        return {
          where: {
            someNumber: Math.random(),
          },
        };
      },
      accessLevel(value) {
        return {
          where: {
            accessLevel: {
              [Op.gte]: value,
            },
          },
        };
      },
      sequelize,
      modelName: 'project',
    },
  },
);

----------------------------------------

TITLE: Manual Foreign Key References in Sequelize
DESCRIPTION: Example of manually defining foreign key references between Trainer, Series, and Video models without using automatic constraints.

LANGUAGE: javascript
CODE:
class Trainer extends Model {}
Trainer.init(
  {
    firstName: Sequelize.STRING,
    lastName: Sequelize.STRING,
  },
  { sequelize, modelName: 'trainer' },
);

class Series extends Model {}
Series.init(
  {
    title: Sequelize.STRING,
    subTitle: Sequelize.STRING,
    description: Sequelize.TEXT,
    trainerId: {
      type: DataTypes.INTEGER,
      references: {
        model: Trainer,
        key: 'id',
      },
    },
  },
  { sequelize, modelName: 'series' },
);

class Video extends Model {}
Video.init(
  {
    title: Sequelize.STRING,
    sequence: Sequelize.INTEGER,
    description: Sequelize.TEXT,
    seriesId: {
      type: DataTypes.INTEGER,
      references: {
        model: Series,
        key: 'id',
      },
    },
  },
  { sequelize, modelName: 'video' },
);

Series.hasOne(Video);
Trainer.hasMany(Series);

----------------------------------------

TITLE: Handling Array Updates in Models
DESCRIPTION: Shows the correct way to update array attributes in models to ensure changes are detected by save().

LANGUAGE: typescript
CODE:
const jane = await User.create({ name: 'Jane', role: ['admin'] });

// `save` will be able to detect this change, because `role` has been replaced
jane.role = [...jane.role, 'admin'];

await jane.save();

----------------------------------------

TITLE: Creating a Table with Query Interface in Sequelize
DESCRIPTION: Shows how to create a table named 'Person' with two columns using the Query Interface. It also includes the generated SQL for SQLite.

LANGUAGE: javascript
CODE:
queryInterface.createTable('Person', {
  name: DataTypes.STRING,
  isBetaMember: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    allowNull: false,
  },
});

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS `Person` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0
);

----------------------------------------

TITLE: Defining a Model with Date and UUID Attributes
DESCRIPTION: Demonstrates how to define a model with a date attribute using the NOW default value and a UUID attribute with an auto-generated v4 UUID.

LANGUAGE: javascript
CODE:
MyModel.init({
  myDate: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
  myUuid: {
    type: DataTypes.UUID.V4,
    defaultValue: sql.uuidV4,
  },
});

----------------------------------------

TITLE: Amazon Redshift Configuration
DESCRIPTION: Example of configuring Sequelize for Amazon Redshift with required client message settings

LANGUAGE: typescript
CODE:
new Sequelize({
  dialect: PostgresDialect,
  // Your pg options here
  clientMinMessages: 'ignore',
});

----------------------------------------

TITLE: Incrementing and Decrementing Values
DESCRIPTION: Shows how to safely increment or decrement numeric values using dedicated methods.

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane', age: 100 });
const incrementResult = await jane.increment('age', { by: 2 });

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane', age: 100, cash: 5000 });
await jane.increment({
  age: 2,
  cash: 100,
});

// If the values are incremented by the same amount, you can use this other syntax as well:
await jane.increment(['age', 'cash'], { by: 2 });

----------------------------------------

TITLE: Advanced Query Options with Sequelize in JavaScript
DESCRIPTION: Illustrates various advanced options available when executing raw queries with Sequelize, including logging, result formatting, and query type specification.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');
await sequelize.query('SELECT 1', {
  logging: console.log,
  plain: false,
  raw: false,
  type: QueryTypes.SELECT,
});

console.log(await sequelize.query('SELECT * FROM projects', { raw: true }));

----------------------------------------

TITLE: Obtaining Query Interface in Sequelize
DESCRIPTION: Demonstrates how to obtain the Query Interface instance from a Sequelize object. This is a prerequisite for using the Query Interface methods.

LANGUAGE: javascript
CODE:
import { Sequelize, DataTypes } from '@sequelize/core';
const sequelize = new Sequelize(/* ... */);
const queryInterface = sequelize.getQueryInterface();

----------------------------------------

TITLE: Configuring Sequelize for Domain Account Authentication
DESCRIPTION: This snippet illustrates how to configure Sequelize to connect to SQL Server using a domain account with NTLM authentication.

LANGUAGE: typescript
CODE:
const sequelize = new Sequelize({
  dialect: MsSqlDialect,
  instanceName: 'SQLEXPRESS',
  authentication: {
    type: 'ntlm',
    options: {
      domain: 'yourDomain',
      userName: 'username',
      password: 'password',
    },
  },
});

----------------------------------------

TITLE: Excluding Attributes in Sequelize Query
DESCRIPTION: Demonstrates how to exclude specific attributes (password) from the query result.

LANGUAGE: javascript
CODE:
User.findAll({
  attributes: { exclude: ['password'] },
});

----------------------------------------

TITLE: Force Hard-Delete in Paranoid Model
DESCRIPTION: Shows how to perform a hard-delete on a paranoid model by using the force option, which actually removes the record from the database.

LANGUAGE: javascript
CODE:
await Post.destroy({
  where: {
    id: 1
  },
  force: true
});

----------------------------------------

TITLE: Sequelize Migration with Foreign Key
DESCRIPTION: Example of a Sequelize migration that creates a table with a foreign key reference.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.createTable('Person', {
      name: Sequelize.DataTypes.STRING,
      isBetaMember: {
        type: Sequelize.DataTypes.BOOLEAN,
        defaultValue: false,
        allowNull: false,
      },
      userId: {
        type: Sequelize.DataTypes.INTEGER,
        references: {
          model: {
            tableName: 'users',
            schema: 'schema',
          },
          key: 'id',
        },
        allowNull: false,
      },
    });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('Person');
  },
};

----------------------------------------

TITLE: Initializing Sequelize with Snowflake Connection
DESCRIPTION: Example of configuring Sequelize with Snowflake dialect and connection parameters including access URL, role, warehouse, credentials, and database name.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { SnowflakeDialect } from '@sequelize/snowflake';

const sequelize = new Sequelize({
  dialect: SnowflakeDialect,
  accessUrl: 'https://myaccount.us-east-1.snowflakecomputing.com',
  role: 'myRole',
  warehouse: 'myWarehouse',
  username: 'myUserName',
  password: 'myPassword',
  database: 'myDatabaseName',
});

----------------------------------------

TITLE: Applying WHERE Clause in Sequelize Query
DESCRIPTION: Demonstrates how to use a simple WHERE clause to filter results based on the authorId.

LANGUAGE: javascript
CODE:
Post.findAll({
  where: {
    authorId: 2,
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM posts WHERE "authorId" = 2;

----------------------------------------

TITLE: Defining a Range Data Type in PostgreSQL
DESCRIPTION: Demonstrates how to define and use range data types in PostgreSQL, including various ways to specify range bounds.

LANGUAGE: javascript
CODE:
const range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];

const range = [
  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },
  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },
];

const range = [
  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },
  new Date(Date.UTC(2016, 1, 1)),
];

const Timeline = sequelize.define('Timeline', {
  range: DataTypes.RANGE(DataTypes.DATE),
});

await Timeline.create({ range });

----------------------------------------

TITLE: Implementing BelongsToMany Scopes with Through Table Filtering
DESCRIPTION: Shows how to implement BelongsToMany association scopes with through table filtering, using Game and Person models with different author roles. Includes both model definitions and query examples.

LANGUAGE: javascript
CODE:
class GameAuthor extends Model {
  @Attribute(DataTypes.STRING)
  role;
}

class Person extends Model {}

class Game extends Model {
  /** This association will list everyone that worked on the game */
  @BelongsToMany(() => Person, {
    through: GameAuthor,
  })
  allAuthors;
}

class Game extends Model {
  /** This association will list everyone that worked on the game */
  @BelongsToMany(() => Person, {
    through: GameAuthor,
    foreignKey: 'gameId',
    otherKey: 'personId',
  })
  allAuthors;

  /** This association will list everyone that worked on the game as a programmer */
  @BelongsToMany(() => Person, {
    through: {
      model: GameAuthor,
      foreignKey: 'gameId',
      otherKey: 'personId',
      scope: { role: 'programmer' },
    },
  })
  programmers;

  /** This association will list everyone that worked on the game as a designer */
  @BelongsToMany(() => Person, {
    through: {
      model: GameAuthor,
      foreignKey: 'gameId',
      otherKey: 'personId',
      scope: { role: 'designer' },
    },
  })
  designers;
}

const game = await Game.findByPk(1);

// this will return all authors
const allAuthors = await game.getAllAuthors();

// this will return only programmers
const programmers = await game.getProgrammers();

// this will return only designers
const designers = await game.getDesigners();

----------------------------------------

TITLE: Configuring Sequelize with DB2 for IBM i Dialect
DESCRIPTION: TypeScript code snippet demonstrating how to initialize Sequelize with the IbmiDialect and configure the connection using an ODBC connection string.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { IbmiDialect } from '@sequelize/db2-ibmi';

const sequelize = new Sequelize({
  dialect: IbmiDialect,
  odbcConnectionString: 'DSN=MYDSN;UID=myuser;PWD=mypassword',
  connectionTimeout: 60,
});

----------------------------------------

TITLE: Casting in Sequelize WHERE Clause
DESCRIPTION: Shows how to cast an attribute to a different type in a WHERE condition.

LANGUAGE: typescript
CODE:
User.findAll({
  where: {
    'createdAt::text': {
      [Op.like]: '2012-%',
    },
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM "users" AS "user" WHERE CAST("user"."createdAt" AS TEXT) LIKE '2012-%';

----------------------------------------

TITLE: Global Destroy in Sequelize
DESCRIPTION: Demonstrates how to delete all data in the database using the destroyAll() method on the Sequelize instance.

LANGUAGE: typescript
CODE:
await sequelize.destroyAll();

----------------------------------------

TITLE: Sequelize Project Configuration
DESCRIPTION: Default configuration file structure for Sequelize CLI showing database connection settings for different environments.

LANGUAGE: json
CODE:
{
  "development": {
    "username": "root",
    "password": null,
    "database": "database_development",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

----------------------------------------

TITLE: Ordering Query Results in Sequelize
DESCRIPTION: Shows various ways to order query results, including ordering by multiple attributes and specifying direction.

LANGUAGE: typescript
CODE:
Subtask.findAll({
  order: ['title'],
});

Subtask.findAll({
  order: ['title', 'createdAt'],
});

Subtask.findAll({
  order: [['title', 'DESC']],
});

LANGUAGE: sql
CODE:
SELECT * FROM subtasks ORDER BY "title";

SELECT * FROM subtasks ORDER BY "title", "createdAt";

SELECT * FROM subtasks ORDER BY "title" DESC;

----------------------------------------

TITLE: Implementing Optimistic Locking in JavaScript with Sequelize
DESCRIPTION: Demonstrates how to implement optimistic locking in a Sequelize model using JavaScript. Uses the @Version decorator to mark the version field for concurrency control.

LANGUAGE: javascript
CODE:
import { Model } from '@sequelize/core';
import { Version } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Version
  version;
}

----------------------------------------

TITLE: Table Truncation in Sequelize
DESCRIPTION: Shows how to truncate a specific table using the truncate() method on a model.

LANGUAGE: javascript
CODE:
// Truncate the table
await User.truncate();

----------------------------------------

TITLE: Installing Sequelize CLI
DESCRIPTION: Commands to install the Sequelize CLI tool using npm or yarn package managers.

LANGUAGE: bash
CODE:
# using npm
npm install --save-dev sequelize-cli
# using yarn
yarn add sequelize-cli --dev

----------------------------------------

TITLE: FindByPk Queries
DESCRIPTION: Demonstrates how to use findByPk to retrieve records by primary key, including both single and composite primary key examples.

LANGUAGE: typescript
CODE:
const project: Project | null = await Project.findByPk(123);

LANGUAGE: typescript
CODE:
const projectMember: ProjectMember | null = await ProjectMember.findByPk({
  projectId: 123,
  userId: 456,
});

----------------------------------------

TITLE: Bulk Update Using Static Model.update
DESCRIPTION: Demonstrates how to update multiple records at once using the static update method.

LANGUAGE: typescript
CODE:
await User.update(
  { lastName: 'Doe' },
  {
    where: {
      lastName: null,
    },
  },
);

----------------------------------------

TITLE: Global Truncate in Sequelize
DESCRIPTION: Demonstrates how to truncate all tables in the database using the truncate() method on the Sequelize instance. Faster than destroyAll but may not work with foreign key constraints.

LANGUAGE: typescript
CODE:
await sequelize.truncate();

----------------------------------------

TITLE: Configuring Sequelize Database Connection
DESCRIPTION: JSON configuration file for Sequelize database connections in different environments.

LANGUAGE: json
CODE:
{
  "development": {
    "username": "root",
    "password": null,
    "database": "database_development",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

----------------------------------------

TITLE: Using sql.identifier for Escaping Identifiers
DESCRIPTION: Shows how to use sql.identifier to safely escape table or column names in raw SQL queries.

LANGUAGE: javascript
CODE:
import { sql } from '@sequelize/core';

await sequelize.query(sql`SELECT * FROM ${sql.identifier('projects')}`);

await sequelize.query(sql`SELECT * FROM ${sql.identifier('public', 'users')}`);

import { User, sql } from '@sequelize/core';

class User extends Model {}

await sequelize.query(sql`SELECT * FROM ${sql.identifier(User)}`);

----------------------------------------

TITLE: Changing Column Names for Timestamp Attributes
DESCRIPTION: Shows how to customize the database column names for timestamp attributes using the @ColumnName decorator.

LANGUAGE: typescript
CODE:
import { Model, InferCreationAttributes, InferAttributes, CreationOptional } from '@sequelize/core';
import { ColumnName } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @ColumnName('created_at')
  declare createdAt: CreationOptional<Date>;

  @ColumnName('updated_at')
  declare updatedAt: CreationOptional<Date>;

  @ColumnName('deleted_at')
  declare deletedAt: Date | null;
}

----------------------------------------

TITLE: Using Range Data Type in TypeScript
DESCRIPTION: Shows how to properly type a range attribute in TypeScript using the Range type provided by Sequelize.

LANGUAGE: typescript
CODE:
import { Model, InferAttributes, Range } from '@sequelize/core';

class User extends Model<InferAttributes<User>> {
  declare myDateRange: Range<Date>;
}

User.init({
  myDateRange: {
    type: DataTypes.RANGE(DataTypes.DATE),
    allowNull: false,
  },
});

----------------------------------------

TITLE: Generating Sequelize Model and Migration
DESCRIPTION: Command to generate a Sequelize model and corresponding migration file.

LANGUAGE: text
CODE:
npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

----------------------------------------

TITLE: Basic Subquery Implementation in Sequelize
DESCRIPTION: Shows how to implement a basic subquery to find posts with specific reaction types using the sql tag and Op.in operator.

LANGUAGE: typescript
CODE:
import { sql, Op } from '@sequelize/core';

Post.findAll({
  where: {
    id: {
      [Op.in]: sql`
        SELECT DISTINCT "postId"
        FROM "reactions" AS "reaction"
        WHERE "reaction"."type" = 'Laugh'
      `,
    },
  },
});

----------------------------------------

TITLE: Defining Models with Snake-Case Column Names in Sequelize
DESCRIPTION: This snippet shows how to use the 'underscored' option to generate snake_case column names from attribute names in Sequelize models, including association foreign keys.

LANGUAGE: typescript
CODE:
import { Model, NonAttribute, InferAttributes, InferCreationAttributes } from '@sequelize/core';
import { Table, Attribute, BelongsTo } from '@sequelize/core/decorators-legacy';

@Table({ underscored: true })
class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  declare username: string | null;
}

@Table({ underscored: true })
class Task extends Model {
  @Attribute(DataTypes.STRING)
  declare title: string | null;

  @BelongsTo(() => User)
  declare user: NonAttribute<User>;

  // added by @BelongsTo
  declare UserId: number;
}

----------------------------------------

TITLE: Using Raw SQL String as Data Type
DESCRIPTION: Demonstrates how to use a raw SQL string as the type of an attribute when defining a model.

LANGUAGE: typescript
CODE:
User = sequelize.define('user', {
  password: {
    type: 'VARBINARY(50)',
  },
});

----------------------------------------

TITLE: Undoing Sequelize Migrations
DESCRIPTION: Commands to revert migrations, either the most recent one or all of them.

LANGUAGE: text
CODE:
npx sequelize-cli db:migrate:undo

LANGUAGE: text
CODE:
npx sequelize-cli db:migrate:undo:all

----------------------------------------

TITLE: Using Basic Operators in Sequelize Queries
DESCRIPTION: Demonstrates how to use basic operators like greater than (Op.gt) in Sequelize queries. The example shows finding posts with more than 2 comments.

LANGUAGE: TypeScript
CODE:
import { Op } from '@sequelize/core';

Post.findAll({
  where: {
    commentCount: {
      [Op.gt]: 2,
    },
  },
});

LANGUAGE: SQL
CODE:
SELECT * FROM "posts" WHERE "commentCount" > 2;

----------------------------------------

TITLE: Creating Multi-Column Index in Sequelize Model
DESCRIPTION: This example demonstrates how to create a multi-column index by using the same index name for multiple attributes.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Index({ name: 'firstName-lastName' })
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  @Index({ name: 'firstName-lastName' })
  declare lastName: string;
}

----------------------------------------

TITLE: Installing MariaDB Dialect for Sequelize
DESCRIPTION: Command to install the MariaDB dialect package for Sequelize via npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/mariadb

----------------------------------------

TITLE: Dropping All Tables in Sequelize (JavaScript)
DESCRIPTION: This code shows how to drop all tables in the database using sequelize.drop().

LANGUAGE: javascript
CODE:
await sequelize.drop();
console.log('All tables dropped!');

----------------------------------------

TITLE: Using Logical Operators in Sequelize Queries
DESCRIPTION: Demonstrates the use of logical operators like OR (Op.or) in Sequelize queries. The example shows finding posts by either author ID or status.

LANGUAGE: TypeScript
CODE:
import { Op } from '@sequelize/core';

Post.findAll({
  where: {
    [Op.or]: {
      authorId: 12,
      status: 'active',
    },
  },
});

LANGUAGE: SQL
CODE:
SELECT * FROM "posts" WHERE "authorId" = 12 OR "status" = 'active';

----------------------------------------

TITLE: Sample Database Seeder
DESCRIPTION: Example seeder file showing how to insert demo data into a database table.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.bulkInsert('Users', [{
      firstName: 'John',
      lastName: 'Doe',
      email: 'example@example.com',
      createdAt: new Date(),
      updatedAt: new Date()
    }]);
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.bulkDelete('Users', null, {});
  }
};

----------------------------------------

TITLE: Configuring Sequelize with MariaDB Connection
DESCRIPTION: Example of initializing Sequelize with MariaDB dialect and basic connection settings. Shows how to set up database connection with host, port, credentials and additional options.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { MariaDbDialect } from '@sequelize/mariadb';

const sequelize = new Sequelize({
  dialect: MariaDbDialect,
  database: 'mydb',
  user: 'myuser',
  password: 'mypass',
  host: 'localhost',
  port: 3306,
  showWarnings: true,
  connectTimeout: 1000,
});

----------------------------------------

TITLE: Synchronizing All Models in Sequelize (JavaScript)
DESCRIPTION: This code shows how to synchronize all models at once using sequelize.sync(). The force option is set to true, which will drop and recreate all tables.

LANGUAGE: javascript
CODE:
await sequelize.sync({ force: true });
console.log('All models were synchronized successfully.');

----------------------------------------

TITLE: Casting JSON Values in Sequelize
DESCRIPTION: Demonstrates how to cast JSON values to specific types for comparison operations. Shows implementation across different SQL dialects.

LANGUAGE: typescript
CODE:
User.findAll({
  where: {
    'jsonAttribute.age::integer': { [Op.gt]: 18 },
  },
});

LANGUAGE: sql
CODE:
-- postgres
CAST("jsonAttribute"->>'age' AS integer) > 18;

-- mysql & friends
CAST(`jsonAttribute`->"$.age" AS signed) > 18;

----------------------------------------

TITLE: Custom Instance and Class Methods in Sequelize Models
DESCRIPTION: Example showing how to add custom instance and class level methods to a Sequelize model class.

LANGUAGE: javascript
CODE:
class User extends Model {
  static classLevelMethod() {
    return 'foo';
  }
  instanceLevelMethod() {
    return 'bar';
  }
  getFullname() {
    return [this.firstname, this.lastname].join(' ');
  }
}
User.init(
  {
    firstname: Sequelize.TEXT,
    lastname: Sequelize.TEXT
  },
  { sequelize }
);

console.log(User.classLevelMethod());
const user = User.build({ firstname: 'Jane', lastname: 'Doe' });
console.log(user.instanceLevelMethod());
console.log(user.getFullname());

----------------------------------------

TITLE: PostgreSQL Unix Socket Connection
DESCRIPTION: Example of connecting to PostgreSQL using a Unix socket by specifying the socket file path

LANGUAGE: typescript
CODE:
const sequelize = new Sequelize({
  dialect: PostgresDialect,
  host: '/var/run/postgresql',
});

----------------------------------------

TITLE: Global Configuration to Prevent Default Primary Keys in Sequelize (JavaScript)
DESCRIPTION: Shows how to globally configure Sequelize to prevent the addition of default primary keys for all models using the define option.

LANGUAGE: javascript
CODE:
class User extends Model {}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  define: {
    noPrimaryKey: true,
  },
  models: [User],
});

----------------------------------------

TITLE: Implementing Serialization and Deserialization for Custom Data Type
DESCRIPTION: Demonstrates how to implement methods for serializing and deserializing data when interacting with the database. It includes parseDatabaseValue, toBindableValue, and escape methods.

LANGUAGE: typescript
CODE:
import { DataTypes, StringifyOptions } from '@sequelize/core';

export class MyDateType extends DataTypes.ABSTRACT<Date> {
  // [...] truncated example

  parseDatabaseValue(value: unknown): Date {
    assert(typeof value === 'string', 'Expected to receive a string from the database');

    return new Date(value);
  }

  toBindableValue(value: Date): unknown {
    return value.toISOString();
  }

  escape(value: Date, options: StringifyOptions): string {
    return options.dialect.escapeString(value.toISOString());
  }
}

----------------------------------------

TITLE: Sequelize CLI with Babel
DESCRIPTION: Example of configuring Sequelize CLI to use Babel for ES6+ features in migrations and seeders.

LANGUAGE: javascript
CODE:
require('babel-register');

const path = require('path');

module.exports = {
  config: path.resolve('config', 'config.json'),
  'models-path': path.resolve('models'),
  'seeders-path': path.resolve('seeders'),
  'migrations-path': path.resolve('migrations'),
};

----------------------------------------

TITLE: Configuring Inverse Association in Sequelize TypeScript
DESCRIPTION: Shows how to configure the inverse BelongsTo association when defining a HasMany association in Sequelize using TypeScript.

LANGUAGE: typescript
CODE:
import {
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
  NonAttribute,
} from '@sequelize/core';
import {
  PrimaryKey,
  Attribute,
  AutoIncrement,
  NotNull,
  HasMany,
  BelongsTo,
} from '@sequelize/core/decorators-legacy';

class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @HasMany(() => Comment, {
    foreignKey: 'postId',
    inverse: {
      as: 'post',
    },
  })
  declare comments?: NonAttribute<Comment[]>;
}

class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  /** Defined by {@link Post.comments} */
  declare post?: NonAttribute<Post>;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare postId: number;
}

----------------------------------------

TITLE: Using Modified Data Type in Sequelize Model
DESCRIPTION: Demonstrates how to use a modified data type (MyStringType) in a Sequelize model definition. The example defines a User model with a firstName field using the modified type.

LANGUAGE: typescript
CODE:
import { MyStringType } from './custom-types.js';

const sequelize = new Sequelize(/* options */);

const User = sequelize.define(
  'User',
  {
    firstName: {
      // highlight-next-line
      type: MyStringType,
    },
  },
  { timestamps: false, noPrimaryKey: true, underscored: true },
);

await User.sync();

----------------------------------------

TITLE: Renaming Timestamp Attributes with Decorators (TypeScript)
DESCRIPTION: Demonstrates how to rename timestamp attributes using decorators in TypeScript.

LANGUAGE: typescript
CODE:
import { InferCreationAttributes, InferAttributes, Model, CreationOptional } from '@sequelize/core';
import { CreatedAt, UpdatedAt, DeletedAt } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @CreatedAt
  declare creationDate: CreationOptional<Date>;

  @UpdatedAt
  declare lastUpdateDate: CreationOptional<Date>;

  @DeletedAt
  declare deletionDate: Date | null;
}

----------------------------------------

TITLE: Specifying Custom Index Name in Sequelize Model
DESCRIPTION: This snippet illustrates how to specify a custom name for an index using the name option in the @Index decorator.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Index({ name: 'user_first_name_index' })
  declare firstName: string;
}

----------------------------------------

TITLE: Using Array Operators in Sequelize Queries
DESCRIPTION: Demonstrates the use of array operators like contains (Op.contains) in Sequelize queries. The example shows finding posts with specific tags.

LANGUAGE: TypeScript
CODE:
Post.findAll({
  where: {
    tags: { [Op.contains]: ['popular', 'trending'] },
  },
});

LANGUAGE: SQL
CODE:
SELECT * FROM "posts" WHERE "tags" @> ARRAY['popular', 'trending'];

----------------------------------------

TITLE: Defining Sequelize Model using Model Extension in JavaScript
DESCRIPTION: Demonstrates how to define a Sequelize model by extending the Model class in JavaScript with attribute definitions.

LANGUAGE: javascript
CODE:
import { Sequelize, DataTypes, Model } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({ dialect: SqliteDialect });

class User extends Model {}

User.init(
  {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
  }
);

----------------------------------------

TITLE: Hook Firing Order Diagram
DESCRIPTION: Diagram showing the execution order of common Sequelize hooks during model operations.

LANGUAGE: text
CODE:
(1)
  beforeBulkCreate(instances, options)
  beforeBulkDestroy(options)
  beforeBulkUpdate(options)
(2)
  beforeValidate(instance, options)

[... validation happens ...]

(3)
  afterValidate(instance, options)
  validationFailed(instance, options, error)
(4)
  beforeCreate(instance, options)
  beforeDestroy(instance, options)
  beforeUpdate(instance, options)
  beforeSave(instance, options)
  beforeUpsert(values, options)

[... creation/update/destruction happens ...]

(5)
  afterCreate(instance, options)
  afterDestroy(instance, options)
  afterUpdate(instance, options)
  afterSave(instance, options)
  afterUpsert(created, options)
(6)
  afterBulkCreate(instances, options)
  afterBulkDestroy(options)
  afterBulkUpdate(options)

----------------------------------------

TITLE: Creating GIN Index with jsonb_path_ops Operator in Sequelize Model
DESCRIPTION: This example shows how to create a GIN index using the jsonb_path_ops operator on a JSONB column in a Sequelize model.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.JSONB)
  @NotNull
  @Index({ using: 'gin', operator: 'jsonb_path_ops' })
  declare data: Record<string, unknown>;
}

----------------------------------------

TITLE: JSON Array Access in Sequelize
DESCRIPTION: Shows how to access array elements within JSON columns using square bracket notation. Includes implementation for both PostgreSQL and MySQL dialects.

LANGUAGE: typescript
CODE:
User.findAll({
  where: {
    'gameData.passwords[0]': 0451,
  },
});

LANGUAGE: sql
CODE:
-- postgres
"gameData"#>ARRAY['passwords','0'] = '0451';

-- mysql & friends
JSON_EXTRACT(`gameData`, '$.passwords[0]') = '0451';

----------------------------------------

TITLE: Defining Sequelize Model using sequelize.define
DESCRIPTION: Shows how to define a Sequelize model using the sequelize.define method, which internally calls Model.init.

LANGUAGE: javascript
CODE:
import { Sequelize, DataTypes } from '@sequelize/core';

const sequelize = new Sequelize({ dialect: SqliteDialect });

const User = sequelize.define(
  'User',
  {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
    },
  },
  {}
);

----------------------------------------

TITLE: Selectively Disabling Specific Timestamp Attributes
DESCRIPTION: Shows how to disable specific timestamp attributes (createdAt or updatedAt) individually.

LANGUAGE: javascript
CODE:
@Table({
  createdAt: false,
  updatedAt: false,
})
class User extends Model {}

----------------------------------------

TITLE: Defining Post and Reaction Models in Sequelize TypeScript
DESCRIPTION: Demonstrates the model definition for Post and Reaction entities using Sequelize decorators and TypeScript. Sets up a One-to-Many relationship between Posts and Reactions with proper type definitions and constraints.

LANGUAGE: typescript
CODE:
import {
  Sequelize,
  Model,
  DataTypes,
  InferCreationAttributes,
  InferAttributes,
} from '@sequelize/core';
import {
  Attribute,
  AutoIncrement,
  PrimaryKey,
  NotNull,
  HasMany,
} from '@sequelize/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @PrimaryKey
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  declare id: number;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare content: string;

  @HasMany(() => Reaction, 'postId')
  declare reactions?: NonAttribute<Reaction[]>;
}

enum ReactionType {
  Like = 'Like',
  Angry = 'Angry',
  Laugh = 'Laugh',
  Sad = 'Sad',
}

class Reaction extends Model {
  @PrimaryKey
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  declare id: number;

  @Attribute(DataTypes.ENUM(Object.keys(ReactionType)))
  @NotNull
  declare type: ReactionType;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare postId: number;
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  storage: ':memory:',
  models: [Post, Reaction],
});

----------------------------------------

TITLE: Implementing Basic Association Scopes in Sequelize
DESCRIPTION: Demonstrates how to create association scopes between City and Restaurant models, including a filtered scope for open restaurants. Shows both model definitions and usage examples.

LANGUAGE: javascript
CODE:
class City extends Model {
  @Attribute(DataTypes.STRING)
  name;

  /** this association returns all restaurants */
  @HasMany(() => Restaurant, 'cityId')
  restaurants;

  /** this association only returns open restaurants */
  @HasMany(() => Restaurant, {
    foreignKey: 'cityId',
    scope: { status: 'open' },
  })
  openRestaurants;
}

class Restaurant extends Model {
  @Attribute(DataTypes.STRING)
  status;
}

const city = await City.findByPk(1);

// this will return all restaurants
const restaurants = await city.getRestaurants();

// this will return only open restaurants
const openRestaurants = await city.getOpenRestaurants();

LANGUAGE: sql
CODE:
SELECT * FROM `restaurants` WHERE `restaurants`.`status` = 'open' AND `restaurants`.`cityId` = 1;

----------------------------------------

TITLE: Querying MySQL Server Variables
DESCRIPTION: SQL queries to check the maximum prepared statement count and maximum connections allowed on the MySQL server. These values are needed to calculate the appropriate maxPreparedStatements setting for Sequelize.

LANGUAGE: sql
CODE:
SHOW VARIABLES LIKE 'max_prepared_stmt_count';

LANGUAGE: sql
CODE:
SHOW VARIABLES LIKE 'max_connections';

----------------------------------------

TITLE: Disabling Auto-Timestamp Attributes Globally
DESCRIPTION: Shows how to disable automatic timestamp attributes globally in Sequelize configuration.

LANGUAGE: javascript
CODE:
class User extends Model {}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  define: {
    timestamps: false,
  },
  models: [User],
});

----------------------------------------

TITLE: Reusable Subquery Function in Sequelize
DESCRIPTION: Demonstrates how to create a reusable function for subqueries that accepts a reaction type parameter, making the query more flexible and maintainable.

LANGUAGE: typescript
CODE:
import { sql, Op } from '@sequelize/core';

function postHasReactionOfType(type: ReactionType) {
  return {
    id: {
      [Op.in]: sql`
        SELECT DISTINCT "postId"
        FROM "reactions" AS "reaction"
        WHERE "reaction"."type" = ${type}
      `,
    },
  };
}

Post.findAll({
  where: postHasReactionOfType(ReactionType.Laugh),
});

----------------------------------------

TITLE: Visualizing Many-to-Many Relationship using Mermaid
DESCRIPTION: Entity Relationship Diagram showing a many-to-many relationship between people and toots tables, where people can like multiple toots and toots can be liked by multiple people.

LANGUAGE: mermaid
CODE:
erDiagram
  people }o--o{ toots : likedToots

----------------------------------------

TITLE: Configuring MySQL Prepared Statements in Sequelize
DESCRIPTION: Shows how to configure the maxPreparedStatements option in the Sequelize constructor to prevent exceeding MySQL's prepared statement limit. This setting helps avoid the 'max_prepared_stmt_count' error by limiting the number of prepared statements per connection.

LANGUAGE: typescript
CODE:
const sequelize = new Sequelize({
  // ...
  dialectOptions: {
    maxPreparedStatements: 100,
  },
});

----------------------------------------

TITLE: Instance Methods for Deletion
DESCRIPTION: Demonstrates how to use instance methods for both soft and hard deletion of records.

LANGUAGE: javascript
CODE:
const post = await Post.create({ title: 'test' });
console.log(post instanceof Post); // true
await post.destroy(); // Would just set the `deletedAt` flag
await post.destroy({ force: true }); // Would really delete the record

----------------------------------------

TITLE: Logical Combinations in Sequelize WHERE Clause
DESCRIPTION: Demonstrates how to use logical operators like Op.or to combine multiple conditions in a WHERE clause.

LANGUAGE: typescript
CODE:
import { Op } from '@sequelize/core';

Post.findAll({
  where: {
    [Op.or]: {
      authorId: 12,
      status: 'active',
    },
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM "posts" WHERE "authorId" = 12 OR "status" = 'active';

----------------------------------------

TITLE: Static Sequelize Hook Registration
DESCRIPTION: Example of registering a static beforeInit hook on the Sequelize class to log when new instances are created.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';

Sequelize.hooks.addListener('beforeInit', () => {
  console.log('A new sequelize instance is being created');
});

----------------------------------------

TITLE: Resulting SQL for Custom Data Type
DESCRIPTION: Displays the SQL generated by Sequelize when using the custom MyDateType in a model definition. The CREATE TABLE statement shows the birthday field as TIMESTAMP.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS "users" (
  "birthday" TIMESTAMP
);

----------------------------------------

TITLE: Restoring Soft-Deleted Records
DESCRIPTION: Shows how to restore soft-deleted records using both instance and static restore methods.

LANGUAGE: javascript
CODE:
const post = await Post.create({ title: 'test' });
console.log(post instanceof Post); // true
await post.destroy();
console.log('soft-deleted!');
await post.restore();
console.log('restored!');

await Post.restore({
  where: {
    likes: {
      [Op.gt]: 100
    }
  }
});

----------------------------------------

TITLE: Required Eager Loading in Sequelize
DESCRIPTION: Shows how to perform required eager loading using INNER JOIN instead of LEFT JOIN.

LANGUAGE: typescript
CODE:
const posts = await Post.findAll({
  include: [
    {
      association: 'comments',
      required: true,
    },
  ],
});

LANGUAGE: sql
CODE:
SELECT
  "Post"."id",
  "Post"."content",
  "comments"."id" AS "comments.id",
  "comments"."content" AS "comments.content",
  "comments"."postId" AS "comments.postId"
FROM "Posts" AS "Post"
INNER JOIN "Comments" AS "comments"
  ON "Post"."id" = "comments"."postId";

----------------------------------------

TITLE: Global Hooks Example
DESCRIPTION: Example of implementing global hooks for all models using Sequelize constructor options.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize(..., {
  define: {
    hooks: {
      beforeCreate() {
        // Do stuff
      }
    }
  }
});

----------------------------------------

TITLE: Using Custom Data Type in Sequelize Model
DESCRIPTION: Shows how to use a custom data type (MyDateType) in a Sequelize model definition. The example defines a User model with a birthday field using the custom type.

LANGUAGE: typescript
CODE:
import { MyDateType } from './custom-types.js';

const sequelize = new Sequelize(/* options */);

const User = sequelize.define(
  'User',
  {
    birthday: {
      // highlight-next-line
      type: MyDateType,
    },
  },
  { timestamps: false, noPrimaryKey: true, underscored: true },
);

await User.sync();

----------------------------------------

TITLE: Defining Indexes in Sequelize Model (JavaScript)
DESCRIPTION: This snippet demonstrates how to define various types of indexes in a Sequelize model. It includes examples of unique, gin, multi-column partial, and BTREE indexes with different configurations. The indexes are defined in the model options and will be created when calling sequelize.sync().

LANGUAGE: javascript
CODE:
const User = sequelize.define(
  'User',
  {
    /* attributes */
  },
  {
    indexes: [
      // Create a unique index on email
      {
        unique: true,
        fields: ['email'],
      },

      // Creates a gin index on data with the jsonb_path_ops operator
      {
        fields: ['data'],
        using: 'gin',
        operator: 'jsonb_path_ops',
      },

      // By default index name will be [table]_[fields]
      // Creates a multi column partial index
      {
        name: 'public_by_author',
        fields: ['author', 'status'],
        where: {
          status: 'public',
        },
      },

      // A BTREE index with an ordered field
      {
        name: 'title_index',
        using: 'BTREE',
        fields: [
          'author',
          {
            name: 'title',
            collate: 'en_US',
            order: 'DESC',
            length: 5,
          },
        ],
      },
    ],
  },
);

----------------------------------------

TITLE: Grouping Query Results in Sequelize
DESCRIPTION: Demonstrates how to use the group option to group query results.

LANGUAGE: typescript
CODE:
Project.findAll({ group: ['name'] });

LANGUAGE: sql
CODE:
SELECT * FROM "projects" GROUP BY "name";

----------------------------------------

TITLE: Connection Hooks Example
DESCRIPTION: Example of using connection hooks to handle database connection events.

LANGUAGE: javascript
CODE:
sequelize.beforeConnect(async config => {
  config.password = await getAuthToken();
});

----------------------------------------

TITLE: Installing MySQL Dialect for Sequelize
DESCRIPTION: Command to install the MySQL dialect package for Sequelize using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/mysql

----------------------------------------

TITLE: Using Raw SQL in findAll Query
DESCRIPTION: Shows how to incorporate raw SQL in a Sequelize findAll query to customize the WHERE clause.

LANGUAGE: typescript
CODE:
import { sql } from '@sequelize/core';

const id = 5;

const users = await User.findAll({
  where: sql`id = ${id}`,
});

----------------------------------------

TITLE: Limiting and Paginating Query Results in Sequelize
DESCRIPTION: Shows how to use the limit and offset options for pagination and result limiting.

LANGUAGE: javascript
CODE:
// Fetch 10 instances/rows
Project.findAll({ limit: 10 });

// Skip 8 instances/rows
Project.findAll({ offset: 8 });

// Skip 5 instances and fetch the 5 after that
Project.findAll({ offset: 5, limit: 5 });

----------------------------------------

TITLE: Mapping Query Results to Model Instances in JavaScript
DESCRIPTION: Demonstrates how to map raw query results to predefined model instances using Sequelize.

LANGUAGE: javascript
CODE:
const projects = await sequelize.query('SELECT * FROM projects', {
  model: Projects,
  mapToModel: true, // pass true here if you have any mapped fields
});

----------------------------------------

TITLE: Configuring Sequelize with MySQL Dialect
DESCRIPTION: TypeScript code snippet demonstrating how to set up a Sequelize instance with MySQL dialect, including database connection details.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { MySqlDialect } from '@sequelize/mysql';

const sequelize = new Sequelize({
  dialect: MySqlDialect,
  database: 'mydb',
  user: 'myuser',
  password: 'mypass',
  host: 'localhost',
  port: 3306,
});

----------------------------------------

TITLE: Creating Entity with Model.build() and save() in TypeScript
DESCRIPTION: Shows how to create a record using the two-step process of building an unsaved instance with build() and then saving it with save(). Provides more control over the creation process.

LANGUAGE: typescript
CODE:
const jane = User.build({ firstName: 'Jane', lastName: 'Doe' });
await jane.save();

----------------------------------------

TITLE: Using Replacements in Sequelize Queries with JavaScript
DESCRIPTION: Demonstrates how to use named and unnamed replacements in Sequelize queries for parameter substitution.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');

await sequelize.query('SELECT * FROM projects WHERE status = ?', {
  replacements: ['active'],
  type: QueryTypes.SELECT,
});

await sequelize.query('SELECT * FROM projects WHERE status = :status', {
  replacements: { status: 'active' },
  type: QueryTypes.SELECT,
});

----------------------------------------

TITLE: Array Replacements in Sequelize Queries with JavaScript
DESCRIPTION: Shows how to use array replacements in Sequelize queries for matching multiple values.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');

await sequelize.query('SELECT * FROM projects WHERE status IN(:status)', {
  replacements: { status: ['active', 'inactive'] },
  type: QueryTypes.SELECT,
});

----------------------------------------

TITLE: Installing MS SQL Server Dialect for Sequelize
DESCRIPTION: This snippet shows how to install the @sequelize/mssql package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/mssql

----------------------------------------

TITLE: Generated SQL with Underscored Option
DESCRIPTION: Shows the resulting SQL generated when using the underscored option, demonstrating how field names are converted to snake_case in the database schema.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS "users" (
  "id" SERIAL,
  "username" VARCHAR(255),
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  PRIMARY KEY ("id")
);
CREATE TABLE IF NOT EXISTS "tasks" (
  "id" SERIAL,
  "title" VARCHAR(255),
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "user_id" INTEGER REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE,
  PRIMARY KEY ("id")
);

----------------------------------------

TITLE: Using Bind Parameters in Sequelize Queries with JavaScript
DESCRIPTION: Illustrates how to use bind parameters in Sequelize queries for secure parameter handling.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');

await sequelize.query(
  'SELECT *, "text with literal $$1 and literal $$status" as t FROM projects WHERE status = $1',
  {
    bind: ['active'],
    type: QueryTypes.SELECT,
  },
);

await sequelize.query(
  'SELECT *, "text with literal $$1 and literal $$status" as t FROM projects WHERE status = $status',
  {
    bind: { status: 'active' },
    type: QueryTypes.SELECT,
  },
);

----------------------------------------

TITLE: Deleting Records with Sequelize
DESCRIPTION: Shows how to delete records from the database using Sequelize's destroy method. This example demonstrates a DELETE query with a WHERE clause.

LANGUAGE: javascript
CODE:
await User.destroy({
  where: {
    firstName: 'Jane'
  }
});

----------------------------------------

TITLE: Installing Snowflake Dialect Package
DESCRIPTION: Command to install the Snowflake dialect package for Sequelize using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/snowflake

----------------------------------------

TITLE: Bulk Creating Records in TypeScript
DESCRIPTION: Shows how to create multiple records at once using bulkCreate(). Includes example with field filtering to limit which columns can be inserted.

LANGUAGE: typescript
CODE:
const captains = await Captain.bulkCreate([{ name: 'Jack Sparrow' }, { name: 'Davy Jones' }]);

console.log(captains.length);
console.log(captains[0] instanceof Captain);
console.log(captains[0].name);
console.log(captains[0].id);

LANGUAGE: typescript
CODE:
await User.bulkCreate(
  [
    { username: 'foo' },
    {
      username: 'bar',
      admin: true,
    },
  ],
  { fields: ['username'] },
);

----------------------------------------

TITLE: Using a Custom Getter in Sequelize
DESCRIPTION: This example shows how to use a custom getter defined in a Sequelize model. It demonstrates the difference between accessing the attribute directly and using getDataValue.

LANGUAGE: javascript
CODE:
const user = User.build({ username: 'SuperUser123' });
console.log(user.username); // 'SUPERUSER123'
console.log(user.getDataValue('username')); // 'SuperUser123'

----------------------------------------

TITLE: Finding First Matching Entry in Sequelize (JavaScript)
DESCRIPTION: Shows how to use the findOne method to retrieve the first entry that matches the provided query options. It includes error handling for when no matching entry is found.

LANGUAGE: javascript
CODE:
const project = await Project.findOne({ where: { title: 'My Title' } });
if (project === null) {
  console.log('Not found!');
} else {
  console.log(project instanceof Project); // true
  console.log(project.title); // 'My Title'
}

----------------------------------------

TITLE: Installing Sequelize DB2 for IBM i Dialect Package
DESCRIPTION: Command to install the @sequelize/db2-ibmi dialect package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/db2-ibmi

----------------------------------------

TITLE: Explicitly Setting Model Name to Prevent Minification Issues in Sequelize (TypeScript)
DESCRIPTION: Illustrates how to explicitly set the modelName option to prevent issues caused by code minification changing the model name.

LANGUAGE: typescript
CODE:
@Table({ modelName: 'User' })
export class User extends Model {}

----------------------------------------

TITLE: Defining a Custom Setter in Sequelize Model
DESCRIPTION: This snippet shows how to define a custom setter for a password attribute that hashes the value before storing it. It uses the setDataValue method to set the hashed value.

LANGUAGE: javascript
CODE:
const User = sequelize.define('user', {
  username: DataTypes.STRING,
  password: {
    type: DataTypes.STRING,
    set(value) {
      this.setDataValue('password', hash(value));
    },
  },
});

----------------------------------------

TITLE: Defining Sequelize Model by Extending Model Class
DESCRIPTION: Shows how to create a User model by extending the Model class and using init() method to define attributes.

LANGUAGE: javascript
CODE:
const { Sequelize, DataTypes, Model } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

class User extends Model {}

User.init(
  {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false
    },
    lastName: {
      type: DataTypes.STRING
    }
  },
  {
    sequelize,
    modelName: 'User'
  }
);

console.log(User === sequelize.models.User);

----------------------------------------

TITLE: Association Methods Usage Examples
DESCRIPTION: Examples showing how to use association getter, setter, and creator methods in Sequelize HasOne relationships.

LANGUAGE: typescript
CODE:
const person = await Person.findByPk(1);
const drivingLicense: DrivingLicense | null = await person.getDrivingLicense();

// Setting association
await person.setDrivingLicense(drivingLicense);
await person.setDrivingLicense(5);
await person.setDrivingLicense(null);

// Creating associated model
const newLicense: DrivingLicense = await person.createDrivingLicense({
  number: '123456789',
});

----------------------------------------

TITLE: Referencing Third-Party Resources for Migrations in Markdown
DESCRIPTION: This snippet demonstrates how to link to a section of the Sequelize documentation that lists third-party resources for migrations, using Markdown syntax.

LANGUAGE: markdown
CODE:
[Third-Party Resources](../other-topics/resources.md#migrations)

----------------------------------------

TITLE: Using a Custom Setter in Sequelize
DESCRIPTION: This example demonstrates how to use a custom setter defined in a Sequelize model. It shows that the setter is automatically called when setting the attribute value.

LANGUAGE: javascript
CODE:
const user = User.build({
  username: 'someone',
  password: 'NotSo§tr0ngP4$SW0RD!',
});
console.log(user.password); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'
console.log(user.getDataValue('password')); // '7cfc84b8ea898bb72462e78b4643cfccd77e9f05678ec2ce78754147ba947acc'

----------------------------------------

TITLE: Defining Models and Associations in Sequelize
DESCRIPTION: Sets up User, Task, and Tool models with their associations for demonstration purposes.

LANGUAGE: javascript
CODE:
const User = sequelize.define('user', { name: DataTypes.STRING }, { timestamps: false });
const Task = sequelize.define('task', { name: DataTypes.STRING }, { timestamps: false });
const Tool = sequelize.define(
  'tool',
  {
    name: DataTypes.STRING,
    size: DataTypes.STRING,
  },
  { timestamps: false },
);
User.hasMany(Task);
Task.belongsTo(User);
User.hasMany(Tool, { as: 'Instruments' });

----------------------------------------

TITLE: Configuring Inverse Association in HasOne Relationship
DESCRIPTION: Example demonstrating how to configure the inverse BelongsTo association when defining a HasOne relationship.

LANGUAGE: typescript
CODE:
class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @HasOne(() => DrivingLicense, {
    foreignKey: 'ownerId',
    inverse: {
      as: 'owner',
    },
  })
  declare drivingLicense?: NonAttribute<DrivingLicense>;
}

----------------------------------------

TITLE: Mapping Custom Field Names in Sequelize Models
DESCRIPTION: Shows how to map model properties to different column names in the database using the field option

LANGUAGE: javascript
CODE:
class MyModel extends Model {}
MyModel.init(
  {
    userId: {
      type: DataTypes.INTEGER,
      field: 'user_id',
    },
  },
  { sequelize },
);

----------------------------------------

TITLE: Defining Virtual Fields in Sequelize Model
DESCRIPTION: This example shows how to define a virtual field 'fullName' that combines 'firstName' and 'lastName'. It uses DataTypes.VIRTUAL and demonstrates custom getter and setter implementation.

LANGUAGE: javascript
CODE:
const User = sequelize.define('user', {
  firstName: DataTypes.TEXT,
  lastName: DataTypes.TEXT,
  fullName: {
    type: DataTypes.VIRTUAL,
    get() {
      return `${this.firstName} ${this.lastName}`;
    },
    set(value) {
      throw new Error('Do not try to set the `fullName` value!');
    },
  },
});

----------------------------------------

TITLE: Creating HasMany Associations in Sequelize
DESCRIPTION: This snippet shows how to set up a HasMany association between Product and Tag models, and then create a Product instance with multiple associated Tag instances in a single step.

LANGUAGE: javascript
CODE:
class Tag extends Model {}
Tag.init(
  {
    name: Sequelize.STRING,
  },
  { sequelize, modelName: 'tag' },
);

Product.hasMany(Tag);
// Also works for `belongsToMany`.

Product.create(
  {
    id: 1,
    title: 'Chair',
    tags: [{ name: 'Alpha' }, { name: 'Beta' }],
  },
  {
    include: [Tag],
  },
);

----------------------------------------

TITLE: Defining BelongsTo Association for Post-Comment Relationship
DESCRIPTION: Demonstrates how to create a BelongsTo association between Comment and Post models using TypeScript decorators. The Comment model belongs to a Post through a postId foreign key.

LANGUAGE: typescript
CODE:
import {
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
  NonAttribute,
} from '@sequelize/core';
import {
  PrimaryKey,
  Attribute,
  AutoIncrement,
  NotNull,
  BelongsTo,
} from '@sequelize/core/decorators-legacy';

class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;
}

class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @BelongsTo(() => Post, 'postId')
  declare post?: NonAttribute<Post>;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare postId: number;
}

----------------------------------------

TITLE: Customizing Junction Table in Sequelize BelongsToMany
DESCRIPTION: Example of customizing the junction table for a BelongsToMany association by defining a separate model.

LANGUAGE: typescript
CODE:
import {
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  NonAttribute,
} from '@sequelize/core';
import { BelongsToMany, Attribute, NotNull } from '@sequelize/core/decorators-legacy';
import { PrimaryKey } from './attribute.js';

class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Toot, {
    through: () => LikedToot,
  })
  declare likedToots?: NonAttribute<Toot[]>;
}

class LikedToot extends Model<InferAttributes<LikedToot>, InferCreationAttributes<LikedToot>> {
  declare likerId: number;
  declare likedTootId: number;
}

class Toot extends Model<InferAttributes<Toot>, InferCreationAttributes<Toot>> {}

----------------------------------------

TITLE: Mapping Custom Data Type to PostgreSQL in Sequelize
DESCRIPTION: This snippet shows how to map a custom Sequelize datatype to a PostgreSQL-specific implementation. It includes creating a postgres-specific child datatype and setting up necessary type mappings.

LANGUAGE: javascript
CODE:
function createTheNewDataType() {
  // [...]

  const PgTypes = DataTypes.postgres;

  // Mandatory: map postgres datatype name
  DataTypes.SOMETYPE.types.postgres = ['pg_new_type'];

  // Mandatory: create a postgres-specific child datatype with its own parse
  // method. The parser will be dynamically mapped to the OID of pg_new_type.
  PgTypes.SOMETYPE = function SOMETYPE() {
    if (!(this instanceof PgTypes.SOMETYPE)) {
      return new PgTypes.SOMETYPE();
    }
    DataTypes.SOMETYPE.apply(this, arguments);
  }
  const util = require('util'); // Built-in Node package
  util.inherits(PgTypes.SOMETYPE, DataTypes.SOMETYPE);

  // Mandatory: create, override or reassign a postgres-specific parser
  // PgTypes.SOMETYPE.parse = value => value;
  PgTypes.SOMETYPE.parse = DataTypes.SOMETYPE.parse || x => x;

  // Optional: add or override methods of the postgres-specific datatype
  // like toSql, escape, validate, _stringify, _sanitize...

}

----------------------------------------

TITLE: Creating Associations with Aliases in Sequelize
DESCRIPTION: This snippet demonstrates how to create a Product instance with a nested User association using an alias. It shows how to define the association with an alias and use it in the create method.

LANGUAGE: javascript
CODE:
const Creator = Product.belongsTo(User, { as: 'creator' });

return Product.create(
  {
    title: 'Chair',
    creator: {
      firstName: 'Matt',
      lastName: 'Hansen',
    },
  },
  {
    include: [Creator],
  },
);

----------------------------------------

TITLE: Implementing Self-Referencing Associations in Sequelize TypeScript
DESCRIPTION: Shows how to create self-referencing associations where a model references itself, such as parent/children relationships. Uses BelongsToMany association type with inverse configuration.

LANGUAGE: typescript
CODE:
class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Person, {
    inverse: {
      as: 'parents',
    },
  })
  declare children?: NonAttribute<Person[]>;
  declare parents?: NonAttribute<Person[]>;
}

----------------------------------------

TITLE: Using String Operators in Sequelize Queries
DESCRIPTION: Shows how to use string operators like LIKE (Op.like) in Sequelize queries. The example demonstrates finding posts with titles containing 'The Fox & The Hound'.

LANGUAGE: TypeScript
CODE:
Post.findAll({
  where: {
    title: { [Op.like]: '%The Fox & The Hound%' },
  },
});

LANGUAGE: SQL
CODE:
SELECT * FROM "posts" WHERE "title" LIKE '%The Fox & The Hound%';

----------------------------------------

TITLE: Parsing PostgreSQL TIMESTAMP WITHOUT TIME ZONE in Sequelize
DESCRIPTION: Demonstrates how to parse PostgreSQL TIMESTAMP WITHOUT TIME ZONE to a different timezone using the pg library's parser.

LANGUAGE: javascript
CODE:
require('pg').types.setTypeParser(1114, stringValue => {
  return new Date(stringValue + '+0000');
  // e.g., UTC offset. Use any offset that you would like.
});

----------------------------------------

TITLE: Querying JSON Data in Sequelize (MSSQL)
DESCRIPTION: Shows how to query JSON data stored as strings in MSSQL using Sequelize, including testing for valid JSON, extracting scalar values, and extracting objects or arrays.

LANGUAGE: javascript
CODE:
// ISJSON - to test if a string contains valid JSON
await User.findAll({
  where: sequelize.where(sequelize.fn('ISJSON', sequelize.col('userDetails')), 1),
});

// JSON_VALUE - extract a scalar value from a JSON string
await User.findAll({
  attributes: [
    [sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'), 'address line 1'],
  ],
});

// JSON_VALUE - query a scalar value from a JSON string
await User.findAll({
  where: sequelize.where(
    sequelize.fn('JSON_VALUE', sequelize.col('userDetails'), '$.address.Line1'),
    '14, Foo Street',
  ),
});

// JSON_QUERY - extract an object or array
await User.findAll({
  attributes: [
    [sequelize.fn('JSON_QUERY', sequelize.col('userDetails'), '$.address'), 'full address'],
  ],
});

----------------------------------------

TITLE: Visualizing One-to-One Relationship using Mermaid
DESCRIPTION: Entity Relationship Diagram showing a one-to-one relationship between people and driving licenses tables, where a person can have zero or one driving license.

LANGUAGE: mermaid
CODE:
erDiagram
  people ||--o| driving_licenses : drivingLicense

----------------------------------------

TITLE: Basic Eager Loading in Sequelize
DESCRIPTION: Shows how to perform eager loading of associated models using the include option.

LANGUAGE: typescript
CODE:
const posts = await Post.findAll({
  include: ['comments'],
});

LANGUAGE: sql
CODE:
SELECT
  "Post"."id",
  "Post"."content",
  "comments"."id" AS "comments.id",
  "comments"."content" AS "comments.content",
  "comments"."postId" AS "comments.postId"
FROM "Posts" AS "Post"
LEFT JOIN "Comments" AS "comments"
  ON "Post"."id" = "comments"."postId";

----------------------------------------

TITLE: Using Index Hints in MySQL/MariaDB with Sequelize
DESCRIPTION: Demonstrates how to use index hints in MySQL/MariaDB queries with Sequelize, overriding the default behavior of the MySQL query optimizer.

LANGUAGE: javascript
CODE:
const { IndexHints } = require('sequelize');
Project.findAll({
  indexHints: [{ type: IndexHints.USE, values: ['index_project_on_name'] }],
  where: {
    id: {
      [Op.gt]: 623,
    },
    name: {
      [Op.like]: 'Foo %',
    },
  },
});

----------------------------------------

TITLE: Querying JSONB Data in Sequelize (PostgreSQL)
DESCRIPTION: Demonstrates various ways to query JSONB data in Sequelize when using PostgreSQL, including nested object queries, nested key queries, and containment queries.

LANGUAGE: javascript
CODE:
// Nested object
await Foo.findOne({
  where: {
    meta: {
      video: {
        url: {
          [Op.ne]: null,
        },
      },
    },
  },
});

// Nested key
await Foo.findOne({
  where: {
    'meta.audio.length': {
      [Op.gt]: 20,
    },
  },
});

// Containment
await Foo.findOne({
  where: {
    meta: {
      [Op.contains]: {
        site: {
          url: 'https://google.com',
        },
      },
    },
  },
});

----------------------------------------

TITLE: Importing DialectTableFilter Component in JSX
DESCRIPTION: This snippet imports a custom React component called DialectTableFilter from a local file. This component is likely used to provide filtering functionality for the dialect comparison table.

LANGUAGE: jsx
CODE:
import { DialectTableFilter } from '@site/src/components/dialect-table-filter.tsx';

----------------------------------------

TITLE: Initializing Sequelize Model Setup
DESCRIPTION: Basic setup code for creating a Sequelize model with a User table definition including various data types and a default value.

LANGUAGE: javascript
CODE:
const { Sequelize, Model, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

const User = sequelize.define('user', {
  name: DataTypes.TEXT,
  favoriteColor: {
    type: DataTypes.TEXT,
    defaultValue: 'green',
  },
  age: DataTypes.INTEGER,
  cash: DataTypes.INTEGER,
});

(async () => {
  await sequelize.sync({ force: true });
  // Code here
})();

----------------------------------------

TITLE: Defining Range Data Types in Sequelize (PostgreSQL)
DESCRIPTION: Demonstrates how to define and use range data types in Sequelize for PostgreSQL. Covers integer, bigint, date, dateonly, and decimal ranges.

LANGUAGE: javascript
CODE:
DataTypes.RANGE(DataTypes.INTEGER); // int4range
DataTypes.RANGE(DataTypes.BIGINT); // int8range
DataTypes.RANGE(DataTypes.DATE); // tstzrange
DataTypes.RANGE(DataTypes.DATEONLY); // daterange
DataTypes.RANGE(DataTypes.DECIMAL); // numrange

----------------------------------------

TITLE: Implementing Unmanaged Transactions in Sequelize
DESCRIPTION: This code snippet demonstrates how to use unmanaged transactions in Sequelize. It shows the process of starting a transaction, performing database operations, and manually committing or rolling back the transaction based on the outcome.

LANGUAGE: javascript
CODE:
const t = await sequelize.transaction();

try {
  const user = await User.create(
    {
      firstName: 'Bart',
      lastName: 'Simpson',
    },
    { transaction: t },
  );

  await user.addSibling(
    {
      firstName: 'Lisa',
      lastName: 'Simpson',
    },
    { transaction: t },
  );

  await t.commit();
} catch (error) {
  await t.rollback();
}

----------------------------------------

TITLE: Importing Sequelize Legacy Decorators in TypeScript
DESCRIPTION: Demonstrates how to import legacy decorators from Sequelize core package. The Attribute and Table decorators are commonly used for model definitions and require TypeScript or Babel transpilation.

LANGUAGE: typescript
CODE:
import { Attribute, Table } from '@sequelize/core/decorators-legacy';

----------------------------------------

TITLE: Deleting Single Row in Sequelize
DESCRIPTION: Demonstrates how to delete a single database record using the destroy() instance method after creating a user.

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane' });
// jane is now in the database
await jane.destroy();
// Now this entry has been removed from the database

----------------------------------------

TITLE: Defining ENUM Data Types in Sequelize
DESCRIPTION: Shows two ways to define ENUM data types in Sequelize: directly with the DataTypes.ENUM method and within a model definition.

LANGUAGE: javascript
CODE:
DataTypes.ENUM('foo', 'bar'); // An ENUM with allowed values 'foo' and 'bar'

sequelize.define('foo', {
  states: {
    type: DataTypes.ENUM,
    values: ['active', 'pending', 'deleted'],
  },
});

----------------------------------------

TITLE: Removing a Column with Query Interface in Sequelize
DESCRIPTION: Demonstrates how to remove a column 'petName' from the 'Person' table using the Query Interface.

LANGUAGE: javascript
CODE:
queryInterface.removeColumn('Person', 'petName', {
  /* query options */
});

LANGUAGE: sql
CODE:
ALTER TABLE "public"."Person" DROP COLUMN "petName";

----------------------------------------

TITLE: Enabling CLS for Automatic Transaction Passing in Sequelize
DESCRIPTION: This code snippet demonstrates how to enable Continuation Local Storage (CLS) in Sequelize for automatic transaction passing. It shows the setup process and how to use CLS with transactions.

LANGUAGE: javascript
CODE:
const cls = require('cls-hooked');
const namespace = cls.createNamespace('my-very-own-namespace');

const Sequelize = require('sequelize');
Sequelize.useCLS(namespace);

new Sequelize(....);

sequelize.transaction(t1 => {
  namespace.get('transaction') === t1; // true
});

sequelize.transaction(t2 => {
  namespace.get('transaction') === t2; // true
});

----------------------------------------

TITLE: Adding Table Comments in Sequelize Model (TypeScript)
DESCRIPTION: Illustrates how to add a comment to a table definition using the comment option in Sequelize for MySQL, MariaDB, and PostgreSQL.

LANGUAGE: typescript
CODE:
import { Model } from '@sequelize/core';
import { Table } from '@sequelize/core/decorators-legacy';

@Table({
  comment: 'This is the User model',
})
export class User extends Model {}

----------------------------------------

TITLE: Defining Manual Foreign Key References
DESCRIPTION: Shows how to manually define a foreign key reference in a Sequelize model using the table name.

LANGUAGE: javascript
CODE:
sequelize.define('foo', {
  name: DataTypes.STRING,
  barId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'bars',
      key: 'id',
    },
    onDelete: 'CASCADE',
  },
});

----------------------------------------

TITLE: Creating a Table with Query Interface in Sequelize
DESCRIPTION: Shows how to create a table named 'Person' using the Query Interface. It defines columns for name and isBetaMember with specific data types and constraints.

LANGUAGE: javascript
CODE:
queryInterface.createTable('Person', {
  name: DataTypes.STRING,
  isBetaMember: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    allowNull: false,
  },
});

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS `Person` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0
);

----------------------------------------

TITLE: Basic Model Type Definition in TypeScript
DESCRIPTION: Shows the traditional way of defining Sequelize model types using UserAttributes and UserCreationAttributes interfaces.

LANGUAGE: typescript
CODE:
import { Model, Optional } from 'sequelize';

type UserAttributes = {
  id: number;
  name: string;
};

type UserCreationAttributes = Optional<UserAttributes, 'id'>;

class User extends Model<UserAttributes, UserCreationAttributes> {
  declare id: number;
  declare name: string;
}

----------------------------------------

TITLE: Using Index Hints in MySQL/MariaDB with Sequelize
DESCRIPTION: Shows how to implement index hints in MySQL and MariaDB queries using Sequelize. Index hints can override the default behavior of the MySQL query optimizer by specifying which indexes should be used, forced, or ignored.

LANGUAGE: javascript
CODE:
import { IndexHints } from '@sequelize/core';
Project.findAll({
  indexHints: [{ type: IndexHints.USE, values: ['index_project_on_name'] }],
  where: {
    id: {
      [Op.gt]: 623,
    },
    name: {
      [Op.like]: 'Foo %',
    },
  },
});

LANGUAGE: sql
CODE:
SELECT * FROM Project USE INDEX (index_project_on_name) WHERE name LIKE 'FOO %' AND id > 623;

----------------------------------------

TITLE: Configuring Sequelize Connection Pooling for AWS Lambda
DESCRIPTION: Example of how to configure Sequelize connection pooling optimized for AWS Lambda functions. This setup uses pooling within invocations but closes connections between invocations to avoid issues with Lambda's execution model.

LANGUAGE: javascript
CODE:
const { Sequelize } = require("sequelize");

let sequelize = null;

async function loadSequelize() {
  const sequelize = new Sequelize(/* (...) */, {
    // (...)
    pool: {
      max: 2,
      min: 0,
      idle: 0,
      acquire: 3000,
      evict: CURRENT_LAMBDA_FUNCTION_TIMEOUT
    }
  });

  // or `sequelize.sync()`
  await sequelize.authenticate();

  return sequelize;
}

module.exports.handler = async function (event, callback) {
  if (!sequelize) {
    sequelize = await loadSequelize();
  } else {
    sequelize.connectionManager.initPools();

    if (sequelize.connectionManager.hasOwnProperty("getConnection")) {
      delete sequelize.connectionManager.getConnection;
    }
  }

  try {
    return await doSomethingWithSequelize(sequelize);
  } finally {
    await sequelize.connectionManager.close();
  }
};

----------------------------------------

TITLE: Obtaining Query Interface in Sequelize
DESCRIPTION: Demonstrates how to obtain the Query Interface instance from a Sequelize object. This is a prerequisite for using the lower-level Query Interface methods.

LANGUAGE: javascript
CODE:
const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize(/* ... */);
const queryInterface = sequelize.getQueryInterface();

----------------------------------------

TITLE: Using Raw SQL Sub Query in Sequelize
DESCRIPTION: This SQL query demonstrates how to use a sub query to count 'Laugh' reactions for each post. It's an example of what we aim to achieve with Sequelize.

LANGUAGE: sql
CODE:
SELECT
    *,
    (
        SELECT COUNT(*)
        FROM reactions AS reaction
        WHERE
            reaction.postId = post.id
            AND
            reaction.type = "Laugh"
    ) AS laughReactionsCount
FROM posts AS post

----------------------------------------

TITLE: Using Table Hints in MS SQL Server with Sequelize
DESCRIPTION: Demonstrates how to use table hints in MS SQL Server queries using Sequelize. Table hints override the default behavior of MSSQL query optimizer by specifying certain options using the NOLOCK hint.

LANGUAGE: javascript
CODE:
import { TableHints } from '@sequelize/core';

Project.findAll({
  // adding the table hint NOLOCK
  tableHint: TableHints.NOLOCK,
  // this will generate the SQL 'WITH (NOLOCK)'
});

----------------------------------------

TITLE: Creating a New User with Sequelize
DESCRIPTION: Demonstrates how to create a new user record using Sequelize's create method. This example shows the basic usage of Model.create() to insert data into the database.

LANGUAGE: javascript
CODE:
const jane = await User.create({ firstName: 'Jane', lastName: 'Doe' });
console.log("Jane's auto-generated ID:", jane.id);

----------------------------------------

TITLE: Configuring Foreign Keys in Sequelize Relationships
DESCRIPTION: Shows how to set up foreign key relationships (1:1, 1:M, N:M) with custom foreign key names

LANGUAGE: javascript
CODE:
// 1:1
Organization.belongsTo(User, { foreignKey: 'owner_id' });
User.hasOne(Organization, { foreignKey: 'owner_id' });

// 1:M
Project.hasMany(Task, { foreignKey: 'tasks_pk' });
Task.belongsTo(Project, { foreignKey: 'tasks_pk' });

// N:M
User.belongsToMany(Role, {
  through: 'user_has_roles',
  foreignKey: 'user_role_user_id',
});
Role.belongsToMany(User, {
  through: 'user_has_roles',
  foreignKey: 'roles_identifier',
});

----------------------------------------

TITLE: Complex Sequelize Include Merging
DESCRIPTION: Demonstrates advanced scope merging with nested includes across multiple models and their associations.

LANGUAGE: javascript
CODE:
Foo.addScope('includeEverything', {
  include: {
    model: Bar,
    include: [
      {
        model: Baz,
        include: Qux,
      },
    ],
  },
});

Foo.addScope('limitedBars', {
  include: [
    {
      model: Bar,
      limit: 2,
    },
  ],
});

Foo.addScope('limitedBazs', {
  include: [
    {
      model: Bar,
      include: [
        {
          model: Baz,
          limit: 2,
        },
      ],
    },
  ],
});

Foo.addScope('excludeBazName', {
  include: [
    {
      model: Bar,
      include: [
        {
          model: Baz,
          attributes: {
            exclude: ['name'],
          },
        },
      ],
    },
  ],
});

----------------------------------------

TITLE: Adding PostgreSQL Range Type Support in Sequelize
DESCRIPTION: This snippet demonstrates how to add support for a new PostgreSQL range type in Sequelize. It shows the process of mapping the range type to Sequelize's RANGE datatype.

LANGUAGE: javascript
CODE:
function createTheNewDataType() {
  // [...]

  // Add postgresql range, SOMETYPE comes from DataType.SOMETYPE.key in lower case
  DataTypes.RANGE.types.postgres.subtypes.SOMETYPE = 'SOMETYPE_range';
  DataTypes.RANGE.types.postgres.castTypes.SOMETYPE = 'pg_new_type';
}

----------------------------------------

TITLE: Updating Records with Sequelize
DESCRIPTION: Demonstrates how to update records in the database using Sequelize's update method. This example shows a simple UPDATE query with a WHERE clause.

LANGUAGE: javascript
CODE:
await User.update(
  { lastName: 'Doe' },
  {
    where: {
      lastName: null
    }
  }
);

----------------------------------------

TITLE: Defining Custom Primary Keys in Sequelize
DESCRIPTION: Examples of defining custom primary keys using different data types (INTEGER and UUID) with auto-increment options

LANGUAGE: javascript
CODE:
class Collection extends Model {}
Collection.init(
  {
    uid: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true, // Automatically gets converted to SERIAL for postgres
    },
  },
  { sequelize },
);

class Collection extends Model {}
Collection.init(
  {
    uuid: {
      type: DataTypes.UUID,
      primaryKey: true,
    },
  },
  { sequelize },
);

----------------------------------------

TITLE: Defining BLOB Data Types in Sequelize
DESCRIPTION: Demonstrates how to define different sizes of BLOB data types in Sequelize, which are used for storing binary data.

LANGUAGE: javascript
CODE:
DataTypes.BLOB; // BLOB (bytea for PostgreSQL)
DataTypes.BLOB('tiny'); // TINYBLOB (bytea for PostgreSQL)
DataTypes.BLOB('medium'); // MEDIUMBLOB (bytea for PostgreSQL)
DataTypes.BLOB('long'); // LONGBLOB (bytea for PostgreSQL)

----------------------------------------

TITLE: Implementing Validation and Sanitization for Custom Data Type
DESCRIPTION: Extends the MyDateType to include methods for validating and sanitizing user inputs. It implements sanitize, validate, and areValuesEqual methods to ensure proper date handling.

LANGUAGE: typescript
CODE:
import { Sequelize, DataTypes, ValidationErrorItem } from '@sequelize/core';

export class MyDateType extends DataTypes.ABSTRACT<Date> {
  toSql() {
    return 'TIMESTAMP';
  }

  sanitize(value: unknown): unknown {
    if (value instanceof Date) {
      return value;
    }

    if (typeof value === 'string') {
      return new Date(value);
    }

    throw new ValidationErrorItem('Invalid date');
  }

  validate(value: unknown): void {
    if (!(value instanceof Date)) {
      ValidationErrorItem.throwDataTypeValidationError('Value must be a Date object');
    }

    if (Number.isNaN(value.getTime())) {
      ValidationErrorItem.throwDataTypeValidationError('Value is an Invalid Date');
    }
  }
}

----------------------------------------

TITLE: Finding and Counting Entries in Sequelize (JavaScript)
DESCRIPTION: Shows how to use the findAndCountAll method to retrieve both the matched records and the total count. This is useful for pagination scenarios. The example demonstrates using 'where', 'offset', and 'limit' options.

LANGUAGE: javascript
CODE:
const { count, rows } = await Project.findAndCountAll({
  where: {
    title: {
      [Op.like]: 'foo%',
    },
  },
  offset: 10,
  limit: 2,
});
console.log(count);
console.log(rows);

----------------------------------------

TITLE: Configuring Oracle Database Connection in Sequelize
DESCRIPTION: Shows how to create a Sequelize instance for Oracle Database, including examples of using a service name and passing credentials in URL format.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('servicename', 'username', 'password', {
  dialect: 'oracle',
  host: 'hostname',
  port: 'port number', //optional
});

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('oracle://user:pass@hostname:port/servicename');

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize({
  dialect: 'oracle',
  username: 'user',
  password: 'password',
  dialectOptions: {
    connectString: 'inst1',
  },
});

----------------------------------------

TITLE: Defining Array Data Types in Sequelize (PostgreSQL)
DESCRIPTION: Shows how to define array data types in Sequelize for PostgreSQL, including nested arrays.

LANGUAGE: typescript
CODE:
// Defines an array of DataTypes.SOMETHING.
DataTypes.ARRAY(/* DataTypes.SOMETHING */);

// For example
// VARCHAR(255)[]
DataTypes.ARRAY(DataTypes.STRING);
// VARCHAR(255)[][]
DataTypes.ARRAY(DataTypes.ARRAY(DataTypes.STRING));

----------------------------------------

TITLE: Handling Special Cases for Range Types in Sequelize (PostgreSQL)
DESCRIPTION: Demonstrates how to create empty ranges, unbounded ranges, and infinite ranges using Sequelize for PostgreSQL.

LANGUAGE: javascript
CODE:
// empty range:
Timeline.create({ range: [] }); // range = 'empty'

// Unbounded range:
Timeline.create({ range: [null, null] }); // range = '[,)'
// range = '[,"2016-01-01 00:00:00+00:00")'
Timeline.create({ range: [null, new Date(Date.UTC(2016, 0, 1))] });

// Infinite range:
// range = '[-infinity,"2016-01-01 00:00:00+00:00")'
Timeline.create({ range: [-Infinity, new Date(Date.UTC(2016, 0, 1))] });

----------------------------------------

TITLE: Defining Basic Many-to-Many Models in Sequelize
DESCRIPTION: Example showing how to define User and Profile models with basic attributes for a Many-to-Many relationship.

LANGUAGE: javascript
CODE:
const User = sequelize.define(
  'user',
  {
    username: DataTypes.STRING,
    points: DataTypes.INTEGER,
  },
  { timestamps: false },
);
const Profile = sequelize.define(
  'profile',
  {
    name: DataTypes.STRING,
  },
  { timestamps: false },
);

----------------------------------------

TITLE: Configuring Snowflake Connection in Sequelize
DESCRIPTION: Demonstrates how to initialize a Sequelize instance with Snowflake dialect and required options. This is an experimental feature and requires specific configuration.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', null, null, {
  dialect: 'snowflake',
  dialectOptions: {
    // put your snowflake account here,
    account: 'myAccount', // my-app.us-east-1

    // below option should be optional
    role: 'myRole',
    warehouse: 'myWarehouse',
    schema: 'mySchema',
  },
  // same as other dialect
  username: 'myUserName',
  password: 'myPassword',
  database: 'myDatabaseName',
});

----------------------------------------

TITLE: Using Range Values in Sequelize (PostgreSQL)
DESCRIPTION: Shows different ways to supply range values in Sequelize, including default behavior, controlling inclusion, and composite forms. Also demonstrates how to create a model with a range type.

LANGUAGE: javascript
CODE:
// defaults to inclusive lower bound, exclusive upper bound
const range = [new Date(Date.UTC(2016, 0, 1)), new Date(Date.UTC(2016, 1, 1))];
// '["2016-01-01 00:00:00+00:00", "2016-02-01 00:00:00+00:00")'

// control inclusion
const range = [
  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },
  { value: new Date(Date.UTC(2016, 1, 1)), inclusive: true },
];
// '("2016-01-01 00:00:00+00:00", "2016-02-01 00:00:00+00:00"]'

// composite form
const range = [
  { value: new Date(Date.UTC(2016, 0, 1)), inclusive: false },
  new Date(Date.UTC(2016, 1, 1)),
];
// '("2016-01-01 00:00:00+00:00", "2016-02-01 00:00:00+00:00")'

const Timeline = sequelize.define('Timeline', {
  range: DataTypes.RANGE(DataTypes.DATE),
});

await Timeline.create({ range });

----------------------------------------

TITLE: Modern Model Type Definition using InferAttributes
DESCRIPTION: Demonstrates the newer, more concise way of defining model types using InferAttributes and InferCreationAttributes utilities.

LANGUAGE: typescript
CODE:
import { Model, InferAttributes, InferCreationAttributes, CreationOptional } from 'sequelize';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  declare id: CreationOptional<number>;
  declare name: string;
}

----------------------------------------

TITLE: Complex Many-to-Many-to-Many Game Championship Example
DESCRIPTION: Complete example demonstrating a complex relationship between Players, Teams and Games using multiple through tables.

LANGUAGE: javascript
CODE:
const Player = sequelize.define('Player', { username: DataTypes.STRING });
const Team = sequelize.define('Team', { name: DataTypes.STRING });
const Game = sequelize.define('Game', { name: DataTypes.STRING });

const GameTeam = sequelize.define('GameTeam', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
    allowNull: false
  }
});

Team.belongsToMany(Game, { through: GameTeam });
Game.belongsToMany(Team, { through: GameTeam });
GameTeam.belongsTo(Game);
GameTeam.belongsTo(Team);
Game.hasMany(GameTeam);
Team.hasMany(GameTeam);

----------------------------------------

TITLE: Configuring PostgreSQL Connection in Sequelize
DESCRIPTION: Demonstrates how to create a Sequelize instance with PostgreSQL dialect and custom options. It includes examples of various PostgreSQL-specific dialect options.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'postgres',
  dialectOptions: {
    // Your pg options here
  },
});

----------------------------------------

TITLE: Customizing Model Aliases with Singular and Plural Forms
DESCRIPTION: Demonstrates how to override default singular and plural forms when defining model aliases in Sequelize associations.

LANGUAGE: javascript
CODE:
Project.belongsToMany(User, {
  as: {
    singular: 'líder',
    plural: 'líderes',
  },
});

----------------------------------------

TITLE: Utility Type for Primary Key Attributes
DESCRIPTION: Example of a utility function using ModelStatic to get primary key attributes from a model class.

LANGUAGE: typescript
CODE:
import { ModelStatic, ModelAttributeColumnOptions } from 'sequelize';

export function getPrimaryKeyAttributes(model: ModelStatic<any>): ModelAttributeColumnOptions[] {
  const attributes: ModelAttributeColumnOptions[] = [];
  for (const attribute of Object.values(model.rawAttributes)) {
    if (attribute.primaryKey) {
      attributes.push(attribute);
    }
  }
  return attributes;
}

----------------------------------------

TITLE: Filtering Eager Loaded Associations in Sequelize
DESCRIPTION: Demonstrates how to apply filters to eager loaded associations using the where option.

LANGUAGE: javascript
CODE:
User.findAll({
  include: {
    model: Tool,
    as: 'Instruments',
    where: {
      size: {
        [Op.ne]: 'small',
      },
    },
  },
});

----------------------------------------

TITLE: Configuring Sequelize Connection Pool in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a Sequelize instance with custom connection pool settings. It configures the maximum and minimum number of connections, as well as acquire and idle timeouts.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize(/* ... */, {
  // ...
  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  }
});

----------------------------------------

TITLE: Sequelize Migration with Async/Await
DESCRIPTION: Example of a Sequelize migration using async/await syntax with a manually managed transaction.

LANGUAGE: javascript
CODE:
module.exports = {
  async up(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      await queryInterface.addColumn(
        'Person',
        'petName',
        {
          type: Sequelize.DataTypes.STRING,
        },
        { transaction },
      );
      await queryInterface.addIndex('Person', 'petName', {
        fields: 'petName',
        unique: true,
        transaction,
      });
      await transaction.commit();
    } catch (err) {
      await transaction.rollback();
      throw err;
    }
  },
  async down(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      await queryInterface.removeColumn('Person', 'petName', { transaction });
      await transaction.commit();
    } catch (err) {
      await transaction.rollback();
      throw err;
    }
  },
};

----------------------------------------

TITLE: Attribute Metadata Utility Function
DESCRIPTION: Demonstrates how to create a utility function for accessing model attribute metadata with type safety.

LANGUAGE: typescript
CODE:
import { ModelStatic, ModelAttributeColumnOptions, Model, Attributes } from 'sequelize';

export function getAttributeMetadata<M extends Model>(
  model: ModelStatic<M>,
  attributeName: keyof Attributes<M>,
): ModelAttributeColumnOptions {
  const attribute = model.rawAttributes[attributeName];
  if (attribute == null) {
    throw new Error(`Attribute ${attributeName} does not exist on model ${model.name}`);
  }
  return attribute;
}

----------------------------------------

TITLE: Complex Where Clauses with Nested Columns in Sequelize
DESCRIPTION: Shows how to use the '$nested.column$' syntax for complex where clauses involving nested columns.

LANGUAGE: javascript
CODE:
User.findAll({
  where: {
    '$Instruments.size$': { [Op.ne]: 'small' },
  },
  include: [
    {
      model: Tool,
      as: 'Instruments',
    },
  ],
});

----------------------------------------

TITLE: Defining Sequelize Model using Model Extension in TypeScript
DESCRIPTION: Shows how to define a Sequelize model by extending the Model class in TypeScript, including type definitions for attributes and model initialization.

LANGUAGE: typescript
CODE:
import {
  Sequelize,
  DataTypes,
  Model,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
} from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({ dialect: SqliteDialect });

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  declare id: CreationOptional<number>;
  declare firstName: string;
  declare lastName: string | null;
}

User.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
  }
);

----------------------------------------

TITLE: Creating Sequelize Seed File
DESCRIPTION: Command to generate a new seed file for populating the database with sample data.

LANGUAGE: text
CODE:
npx sequelize-cli seed:generate --name demo-user

----------------------------------------

TITLE: Implementing Sub Query with Sequelize Attributes
DESCRIPTION: This snippet shows how to use Sequelize's findAll method with the attributes option and sequelize.literal to implement the sub query for counting 'Laugh' reactions.

LANGUAGE: javascript
CODE:
Post.findAll({
  attributes: {
    include: [
      [
        sequelize.literal(`(
                    SELECT COUNT(*)
                    FROM reactions AS reaction
                    WHERE
                        reaction.postId = post.id
                        AND
                        reaction.type = "Laugh"
                )`),
        'laughReactionsCount',
      ],
    ],
  },
});

----------------------------------------

TITLE: Generated SQL from Association Scope Query
DESCRIPTION: Shows the SQL query automatically generated when calling the getOpenBars() mixin method, demonstrating how the scope is applied in the WHERE clause.

LANGUAGE: sql
CODE:
SELECT
    `id`, `status`, `createdAt`, `updatedAt`, `fooId`
FROM `bars` AS `bar`
WHERE `bar`.`status` = 'open' AND `bar`.`fooId` = 1;

----------------------------------------

TITLE: Initializing Sequelize Models with JavaScript
DESCRIPTION: Shows how to define and use a Sequelize model in JavaScript, including model definition with decorators, database connection setup, and basic CRUD operations.

LANGUAGE: javascript
CODE:
import { Sequelize, Model, DataTypes } from '@sequelize/core';
import { Attribute } from '@sequelize/core/decorators-legacy';
import { SqliteDialect } from '@sequelize/sqlite3';

class User extends Model {
  @Attribute(DataTypes.STRING)
  username;

  @Attribute(DataTypes.DATE)
  birthday;
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

await sequelize.sync();

const jane = await User.create({
  username: 'janedoe',
  birthday: new Date(1980, 6, 20),
});

console.log(jane.toJSON());

----------------------------------------

TITLE: Running Sequelize Migrations
DESCRIPTION: Command to execute pending migrations and update the database schema.

LANGUAGE: text
CODE:
npx sequelize-cli db:migrate

----------------------------------------

TITLE: Ordering Posts by Sub Query Result in Sequelize
DESCRIPTION: This example extends the previous query by adding an order clause. It demonstrates how to order posts by the number of 'Laugh' reactions, showcasing complex ordering with sub queries.

LANGUAGE: javascript
CODE:
Post.findAll({
  attributes: {
    include: [
      [
        sequelize.literal(`(
                    SELECT COUNT(*)
                    FROM reactions AS reaction
                    WHERE
                        reaction.postId = post.id
                        AND
                        reaction.type = "Laugh"
                )`),
        'laughReactionsCount',
      ],
    ],
  },
  order: [[sequelize.literal('laughReactionsCount'), 'DESC']],
});

----------------------------------------

TITLE: Implementing Sequelize Seed
DESCRIPTION: JavaScript code for a seed file to insert a demo user into the Users table.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.bulkInsert('Users', [
      {
        firstName: 'John',
        lastName: 'Doe',
        email: 'example@example.com',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]);
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.bulkDelete('Users', null, {});
  },
};

----------------------------------------

TITLE: Configuring Sequelize with SQLite Temporary Storage
DESCRIPTION: TypeScript code snippet showing how to configure Sequelize with SQLite using temporary storage and adjusting the connection pool settings.

LANGUAGE: typescript
CODE:
const sequelize = new Sequelize({
  dialect: SqliteDialect,
  storage: ':memory:', // or ''
  pool: { max: 1, idle: Infinity, maxUses: Infinity },
});

----------------------------------------

TITLE: Installing Sequelize CLI
DESCRIPTION: Command to install the Sequelize Command-Line Interface (CLI) as a dev dependency.

LANGUAGE: text
CODE:
npm install --save-dev sequelize-cli

----------------------------------------

TITLE: Inserting Sample Data for Posts and Reactions
DESCRIPTION: This function creates a post with associated reactions. It's used to populate the database with sample data for subsequent query examples.

LANGUAGE: javascript
CODE:
async function makePostWithReactions(content, reactionTypes) {
  const post = await Post.create({ content });
  await Reaction.bulkCreate(reactionTypes.map(type => ({ type, postId: post.id })));
  return post;
}

await makePostWithReactions('Hello World', [
  'Like',
  'Angry',
  'Laugh',
  'Like',
  'Like',
  'Angry',
  'Sad',
  'Like',
]);
await makePostWithReactions('My Second Post', ['Laugh', 'Laugh', 'Like', 'Laugh']);

----------------------------------------

TITLE: Undoing Sequelize Seeds
DESCRIPTION: Commands to revert seed operations, either the most recent one or all of them.

LANGUAGE: text
CODE:
npx sequelize-cli db:seed:undo

LANGUAGE: text
CODE:
npx sequelize-cli db:seed:undo:all

----------------------------------------

TITLE: Configuring Sequelize with SQLite Dialect
DESCRIPTION: TypeScript code snippet demonstrating how to set up Sequelize with SQLite dialect, including specifying the storage file.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  storage: 'sequelize.sqlite',
});

----------------------------------------

TITLE: Configuring Custom Table Names in Sequelize Models
DESCRIPTION: Demonstrates how to set a custom table name for a Sequelize model using the tableName option in Model.init()

LANGUAGE: javascript
CODE:
class User extends Model {}
User.init(
  {
    // ...
  },
  {
    modelName: 'user',
    tableName: 'users',
    sequelize,
  },
);

----------------------------------------

TITLE: Including Computed Attributes in Sequelize Query
DESCRIPTION: Shows how to include a dynamically computed attribute (age) in the query result using SQL functions.

LANGUAGE: javascript
CODE:
User.findAll({
  attributes: {
    include: [
      [sql`DATEDIFF(year, "birthdate", GETDATE())`, 'age'],
    ],
  },
});

----------------------------------------

TITLE: Generating Sequelize Migration File
DESCRIPTION: Command to generate a new migration file with a skeleton structure.

LANGUAGE: text
CODE:
npx sequelize-cli migration:generate --name migration-skeleton

----------------------------------------

TITLE: Configuring Sequelize Instance for MS SQL Server
DESCRIPTION: This code demonstrates how to set up a Sequelize instance to connect to a Microsoft SQL Server database using the MsSqlDialect.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { MsSqlDialect } from '@sequelize/mssql';

const sequelize = new Sequelize({
  dialect: MsSqlDialect,
  server: 'localhost',
  port: 1433,
  database: 'database',
  authentication: {
    type: 'default',
    options: {
      userName: 'username',
      password: 'password',
    },
  },
});

----------------------------------------

TITLE: Creating a Custom Data Type in Sequelize
DESCRIPTION: This snippet demonstrates how to create a new datatype called SOMETYPE in Sequelize, replicating the behavior of INTEGER(11).ZEROFILL.UNSIGNED. It includes implementation of mandatory and optional methods for the new datatype.

LANGUAGE: javascript
CODE:
const { Sequelize, DataTypes, Utils } = require('Sequelize');
createTheNewDataType();
const sequelize = new Sequelize('sqlite::memory:');

function createTheNewDataType() {
  class SOMETYPE extends DataTypes.ABSTRACT {
    // Mandatory: complete definition of the new type in the database
    toSql() {
      return 'INTEGER(11) UNSIGNED ZEROFILL';
    }

    // Optional: validator function
    validate(value, options) {
      return typeof value === 'number' && !Number.isNaN(value);
    }

    // Optional: sanitizer
    _sanitize(value) {
      // Force all numbers to be positive
      return value < 0 ? 0 : Math.round(value);
    }

    // Optional: value stringifier before sending to database
    _stringify(value) {
      return value.toString();
    }

    // Optional: parser for values received from the database
    static parse(value) {
      return Number.parseInt(value);
    }
  }

  // Mandatory: set the type key
  SOMETYPE.prototype.key = SOMETYPE.key = 'SOMETYPE';

  // Mandatory: add the new type to DataTypes. Optionally wrap it on `Utils.classToInvokable` to
  // be able to use this datatype directly without having to call `new` on it.
  DataTypes.SOMETYPE = Utils.classToInvokable(SOMETYPE);

  // Optional: disable escaping after stringifier. Do this at your own risk, since this opens opportunity for SQL injections.
  // DataTypes.SOMETYPE.escape = false;
}

----------------------------------------

TITLE: Eager Loading with Aliased Associations in Sequelize
DESCRIPTION: Shows how to eager load an aliased association using the 'as' option.

LANGUAGE: javascript
CODE:
const users = await User.findAll({
  include: { model: Tool, as: 'Instruments' },
});
console.log(JSON.stringify(users, null, 2));

----------------------------------------

TITLE: Sequelize Migration with Conditional Index
DESCRIPTION: Example of a Sequelize migration that creates a table with a conditional unique index.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    queryInterface
      .createTable('Person', {
        name: Sequelize.DataTypes.STRING,
        bool: {
          type: Sequelize.DataTypes.BOOLEAN,
          defaultValue: false,
        },
      })
      .then((queryInterface, Sequelize) => {
        queryInterface.addIndex('Person', ['name', 'bool'], {
          indicesType: 'UNIQUE',
          where: { bool: 'true' },
        });
      });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('Person');
  },
};

----------------------------------------

TITLE: Configuring Sequelize with DB2 Dialect
DESCRIPTION: TypeScript code snippet demonstrating how to initialize Sequelize with the DB2 dialect, including database connection parameters and SSL configuration.

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { Db2Dialect } from '@sequelize/db2';

const sequelize = new Sequelize({
  dialect: Db2Dialect,
  database: 'mydb',
  user: 'myuser',
  password: 'mypass',
  hostname: 'localhost',
  port: 50000,
  ssl: true,
});

----------------------------------------

TITLE: Using Table Hints in MSSQL with Sequelize
DESCRIPTION: Shows how to use table hints in MSSQL queries with Sequelize, overriding the default behavior of the MSSQL query optimizer.

LANGUAGE: javascript
CODE:
const { TableHints } = require('sequelize');
Project.findAll({
  // adding the table hint NOLOCK
  tableHint: TableHints.NOLOCK,
  // this will generate the SQL 'WITH (NOLOCK)'
});

----------------------------------------

TITLE: Basic Eager Loading in Sequelize
DESCRIPTION: Demonstrates how to fetch tasks with their associated users using the include option.

LANGUAGE: javascript
CODE:
const tasks = await Task.findAll({ include: User });
console.log(JSON.stringify(tasks, null, 2));

----------------------------------------

TITLE: Declaring Hooks Methods
DESCRIPTION: Examples of three different methods to declare hooks in Sequelize: via .init(), .addHook(), and direct method.

LANGUAGE: javascript
CODE:
// Method 1 via the .init() method
class User extends Model {}
User.init(
  {
    username: DataTypes.STRING,
    mood: {
      type: DataTypes.ENUM,
      values: ['happy', 'sad', 'neutral'],
    },
  },
  {
    hooks: {
      beforeValidate: (user, options) => {
        user.mood = 'happy';
      },
      afterValidate: (user, options) => {
        user.username = 'Toni';
      },
    },
    sequelize,
  },
);

// Method 2 via the .addHook() method
User.addHook('beforeValidate', (user, options) => {
  user.mood = 'happy';
});

User.addHook('afterValidate', 'someCustomName', (user, options) => {
  return Promise.reject(new Error("I'm afraid I can't let you do that!"));
});

// Method 3 via the direct method
User.beforeCreate(async (user, options) => {
  const hashedPassword = await hashPassword(user.password);
  user.password = hashedPassword;
});

User.afterValidate('myHookAfter', (user, options) => {
  user.username = 'Toni';
});

----------------------------------------

TITLE: Installing Sequelize DB2 Dialect Package
DESCRIPTION: Command to install the @sequelize/db2 dialect package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/db2

----------------------------------------

TITLE: Configuring Microsoft SQL Server Connection in Sequelize
DESCRIPTION: Shows how to set up a Sequelize instance with MSSQL dialect and custom options. It demonstrates the nested structure of dialectOptions for MSSQL and includes an example of connecting with a domain account.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'mssql',
  dialectOptions: {
    // Observe the need for this nested `options` field for MSSQL
    options: {
      // Your tedious options here
      useUTC: false,
      dateFirst: 1,
    },
  },
});

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', null, null, {
  dialect: 'mssql',
  dialectOptions: {
    authentication: {
      type: 'ntlm',
      options: {
        domain: 'yourDomain',
        userName: 'username',
        password: 'password',
      },
    },
    options: {
      instanceName: 'SQLEXPRESS',
    },
  },
});

----------------------------------------

TITLE: SQL Table Creation with Snake-Case Names in Sequelize
DESCRIPTION: This SQL snippet demonstrates the result of calling sequelize.sync() with 'underscored: true' option, showing how table and column names are generated in snake_case.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS "users" (
  "id" SERIAL,
  "username" VARCHAR(255),
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  PRIMARY KEY ("id")
);

CREATE TABLE IF NOT EXISTS "tasks" (
  "id" SERIAL,
  "title" VARCHAR(255),
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL,
  "user_id" INTEGER REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE,
  PRIMARY KEY ("id")
);

----------------------------------------

TITLE: Defining Post and Reaction Models in Sequelize
DESCRIPTION: This snippet defines two Sequelize models, Post and Reaction, and establishes a One-to-Many relationship between them. Timestamps are disabled for simplicity in the examples.

LANGUAGE: javascript
CODE:
const Post = sequelize.define(
  'post',
  {
    content: DataTypes.STRING,
  },
  { timestamps: false },
);

const Reaction = sequelize.define(
  'reaction',
  {
    type: DataTypes.STRING,
  },
  { timestamps: false },
);

Post.hasMany(Reaction);
Reaction.belongsTo(Post);

----------------------------------------

TITLE: Implementing Single-model, Single-foreign-key Polymorphic Associations in Sequelize TypeScript
DESCRIPTION: This snippet illustrates how to create a polymorphic association using a single Comment model with a single foreign key. It includes the Comment model definition and associated Article and Video models with association scopes.

LANGUAGE: typescript
CODE:
class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  declare id: number;

  @Attributes(DataTypes.STRING)
  @NotNull
  declare content: string;

  @Attributes(DataTypes.STRING)
  @NotNull
  declare targetModel: 'article' | 'video';

  @Attributes(DataTypes.INTEGER)
  @NotNull
  declare targetId: number;

  declare article?: NonAttribute<Article>;
  declare video?: NonAttribute<Video>;

  get target(): NonAttribute<Article | Video | undefined> {
    if (this.targetModel === 'article') {
      return this.article;
    } else {
      return this.video;
    }
  }
}

class Video extends Model<InferAttributes<Video>, InferCreationAttributes<Video>> {
  declare id: number;

  @HasMany(() => Comment, {
    inverse: {
      as: 'videos',
    },
    foreignKey: 'targetId',
    constraints: false,
    scope: {
      targetModel: 'video',
    },
  })
  declare comments: Comment[];
}

class Article extends Model<InferAttributes<Article>, InferCreationAttributes<Article>> {
  declare id: number;

  @HasMany(() => Comment, {
    inverse: {
      as: 'articles',
    },
    foreignKey: 'targetId',
    constraints: false,
    scope: {
      targetModel: 'article',
    },
  })
  declare comments: Comment[];
}

----------------------------------------

TITLE: Configuring SQLite Connection in Sequelize
DESCRIPTION: Illustrates how to set up a Sequelize instance with SQLite dialect, specifying storage location and custom options. It also shows how to configure the database opening mode.

LANGUAGE: javascript
CODE:
import { Sequelize } from 'sequelize';
import SQLite from 'sqlite3';

const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'sqlite',
  storage: 'path/to/database.sqlite', // or ':memory:'
  dialectOptions: {
    // Your sqlite3 options here
    // for instance, this is how you can configure the database opening mode:
    mode: SQLite.OPEN_READWRITE | SQLite.OPEN_CREATE | SQLite.OPEN_FULLMUTEX,
  },
});

----------------------------------------

TITLE: Using afterCommit Hook in Sequelize Transactions
DESCRIPTION: This code snippet demonstrates how to use the afterCommit hook in both managed and unmanaged transactions in Sequelize. It shows how to add logic that executes after a transaction is successfully committed.

LANGUAGE: javascript
CODE:
// Managed transaction:
await sequelize.transaction(async t => {
  t.afterCommit(() => {
    // Your logic
  });
});

// Unmanaged transaction:
const t = await sequelize.transaction();
t.afterCommit(() => {
  // Your logic
});
await t.commit();

----------------------------------------

TITLE: Configuring Sequelize Logging in JavaScript
DESCRIPTION: Demonstrates various options for configuring Sequelize's logging behavior, including using the default console.log, custom loggers, or disabling logging altogether.

LANGUAGE: js
CODE:
const sequelize = new Sequelize('sqlite::memory:', {
  // Choose one of the logging options
  logging: console.log, // Default, displays the first parameter of the log function call
  logging: (...msg) => console.log(msg), // Displays all log function call parameters
  logging: false, // Disables logging
  logging: msg => logger.debug(msg), // Use custom logger (e.g. Winston or Bunyan), displays the first parameter
  logging: logger.debug.bind(logger), // Alternative way to use custom logger, displays all messages
});

----------------------------------------

TITLE: Implementing Inheritance-based Polymorphic Associations in Sequelize TypeScript
DESCRIPTION: This snippet demonstrates how to create a base abstract model for comments and extend it for specific comment types (ArticleComment and VideoComment). It uses TypeScript decorators to define model attributes and associations.

LANGUAGE: typescript
CODE:
@AbstractModel
abstract class AbstractComment<Attributes, CreationAttributes> extends Model<
  Attributes,
  CreationAttributes
> {
  declare id: number;

  @Attributes(DataTypes.STRING)
  @NotNull
  declare content: string;

  @Attributes(DataTypes.INTEGER)
  @NotNull
  declare targetId: number;
}

class ArticleComment extends AbstractComment<
  InferAttributes<ArticleComment>,
  InferCreationAttributes<ArticleComment>
> {
  @BelongsTo(() => Article, 'targetId')
  declare target?: Article;
}

class VideoComment extends AbstractComment<
  InferAttributes<VideoComment>,
  InferCreationAttributes<VideoComment>
> {
  @BelongsTo(() => Video, 'targetId')
  declare target?: Video;
}

----------------------------------------

TITLE: Adding Table Comments in MySQL/MariaDB/PostgreSQL with Sequelize
DESCRIPTION: Demonstrates how to specify a comment for a table when defining a model in Sequelize for MySQL, MariaDB, or PostgreSQL.

LANGUAGE: javascript
CODE:
class Person extends Model {}
Person.init({
  /* attributes */
}, {
  comment: "I'm a table comment!",
  sequelize,
});

----------------------------------------

TITLE: Sequelize CLI Configuration File
DESCRIPTION: Example of a .sequelizerc file for customizing Sequelize CLI configuration.

LANGUAGE: javascript
CODE:
const path = require('path');

module.exports = {
  config: path.resolve('config', 'database.json'),
  'models-path': path.resolve('db', 'models'),
  'seeders-path': path.resolve('db', 'seeders'),
  'migrations-path': path.resolve('db', 'migrations'),
};

----------------------------------------

TITLE: Updating Sequelize Model Instances
DESCRIPTION: Shows different methods for updating model instances including direct property assignment, set method, and update method.

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane' });
jane.set({
  name: 'Ada',
  favoriteColor: 'blue'
});
await jane.save();

----------------------------------------

TITLE: Using Association Methods in Sequelize BelongsToMany
DESCRIPTION: Examples of using various association methods provided by BelongsToMany, such as getters, setters, adders, and removers.

LANGUAGE: typescript
CODE:
import { BelongsToManyGetAssociationsMixin, BelongsToManySetAssociationsMixin, BelongsToManyAddAssociationMixin, BelongsToManyAddAssociationsMixin, BelongsToManyRemoveAssociationMixin, BelongsToManyRemoveAssociationsMixin } from '@sequelize/core';

class Author extends Model<InferAttributes<Author>, InferCreationAttributes<Author>> {
  @BelongsToMany(() => Book, { through: 'BookAuthor' })
  declare books?: NonAttribute<Book[]>;

  declare getBooks: BelongsToManyGetAssociationsMixin<Book>;
  declare setBooks: BelongsToManySetAssociationsMixin<Book, Book['id']>;
  declare addBook: BelongsToManyAddAssociationMixin<Book, Book['id']>;
  declare addBooks: BelongsToManyAddAssociationsMixin<Book, Book['id']>;
  declare removeBook: BelongsToManyRemoveAssociationMixin<Book, Book['id']>;
  declare removeBooks: BelongsToManyRemoveAssociationsMixin<Book, Book['id']>;
}

// Usage examples
const author = await Author.findByPk(1);
const books = await author.getBooks();
await author.setBooks([book1, book2, book3]);
await author.addBook(book1);
await author.addBooks([book1, book2]);
await author.removeBook(book1);
await author.removeBooks([book1, book2]);

----------------------------------------

TITLE: Configuring MariaDB Connection in Sequelize
DESCRIPTION: Shows how to initialize a Sequelize instance with MariaDB dialect and custom options. The dialectOptions are passed directly to the MariaDB connection constructor.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', 'username', 'password', {
  dialect: 'mariadb',
  dialectOptions: {
    // Your mariadb options here
    // connectTimeout: 1000
  },
});

----------------------------------------

TITLE: Defining Merged Sequelize Scopes
DESCRIPTION: Shows how to define multiple scopes that can be merged together, demonstrating scope property overwriting behavior.

LANGUAGE: javascript
CODE:
YourModel.addScope('scope1', {
  where: {
    firstName: 'bob',
    age: {
      [Op.gt]: 20,
    },
  },
  limit: 2,
});
YourModel.addScope('scope2', {
  where: {
    age: {
      [Op.lt]: 30,
    },
  },
  limit: 10,
});

----------------------------------------

TITLE: Incrementing and Decrementing Values
DESCRIPTION: Demonstrates how to safely increment or decrement numeric values in the database using Sequelize instance methods.

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane', age: 100 });
const incrementResult = await jane.increment('age', { by: 2 });

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane', age: 100, cash: 5000 });
await jane.increment({
  age: 2,
  cash: 100
});

----------------------------------------

TITLE: Customizing Foreign Keys in Sequelize BelongsToMany
DESCRIPTION: Example of customizing foreign key names in a BelongsToMany association using the foreignKey and otherKey options.

LANGUAGE: typescript
CODE:
class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Toot, {
    through: 'LikedToot',
    inverse: {
      as: 'likers',
    },
    foreignKey: 'personId',
    otherKey: 'tootId',
  })
  declare likedToots?: NonAttribute<Toot[]>;
}

----------------------------------------

TITLE: Generated SQL for Circular Reference Tables
DESCRIPTION: The resulting SQL statements generated by Sequelize after resolving the circular reference issue.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS "documents" (
  "id" SERIAL,
  "author" VARCHAR(255),
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL,
  "currentVersionId" INTEGER,
  PRIMARY KEY ("id")
);

CREATE TABLE IF NOT EXISTS "versions" (
  "id" SERIAL,
  "timestamp" TIMESTAMP WITH TIME ZONE,
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL,
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL,
  "documentId" INTEGER REFERENCES "documents" ("id") ON DELETE
  SET
    NULL ON UPDATE CASCADE,
    PRIMARY KEY ("id")
);

----------------------------------------

TITLE: Sequelize Migration Skeleton
DESCRIPTION: Basic structure of a Sequelize migration file with up and down functions.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    // logic for transforming into the new state
  },
  down: (queryInterface, Sequelize) => {
    // logic for reverting the changes
  },
};

----------------------------------------

TITLE: Basic Migration Template
DESCRIPTION: Template showing the basic structure of a Sequelize migration file with up and down functions.

LANGUAGE: javascript
CODE:
module.exports = {
  up: (queryInterface, Sequelize) => {
    // logic for transforming into the new state
  },
  down: (queryInterface, Sequelize) => {
    // logic for reverting the changes
  },
};

----------------------------------------

TITLE: Nested Eager Loading in Sequelize
DESCRIPTION: Demonstrates how to perform nested eager loading of associated models.

LANGUAGE: typescript
CODE:
const posts = await Post.findAll({
  include: [
    {
      association: 'comments',
      include: ['author'],
    },
  ],
});

LANGUAGE: sql
CODE:
SELECT
  "Post"."id",
  "Post"."content",
  "comments"."id" AS "comments.id",
  "comments"."content" AS "comments.content",
  "comments"."postId" AS "comments.postId",
  "comments->author"."id" AS "comments.author.id",
  "comments->author"."name" AS "comments.author.name"
FROM "Posts" AS "Post"
LEFT JOIN "Comments" AS "comments"
  ON "Post"."id" = "comments"."postId"
LEFT JOIN "Authors" AS "comments->author"
  ON "comments"."authorId" = "comments->author"."id";

----------------------------------------

TITLE: Resolving Cyclic Dependencies in Sequelize
DESCRIPTION: Shows how to resolve circular reference issues by adding constraints: false to the belongsTo association.

LANGUAGE: javascript
CODE:
Document.hasMany(Version);
Document.belongsTo(Version, {
  as: 'Current',
  foreignKey: 'currentVersionId',
  constraints: false,
});

----------------------------------------

TITLE: Running Sequelize Seeds
DESCRIPTION: Command to execute all seed files and populate the database with initial data.

LANGUAGE: text
CODE:
npx sequelize-cli db:seed:all

----------------------------------------

TITLE: Global Configuration for Table Engine in Sequelize (JavaScript)
DESCRIPTION: Shows how to globally set the default table engine for all models in Sequelize when using MySQL or MariaDB.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize({
  /* options */
  define: { engine: 'MYISAM' },
});

----------------------------------------

TITLE: Selecting Specific Attributes in Sequelize Query
DESCRIPTION: Shows how to select only specific attributes (firstName and lastName) when querying the User model.

LANGUAGE: javascript
CODE:
User.findAll({
  attributes: ['firstName', 'lastName'],
});

LANGUAGE: sql
CODE:
SELECT "firstName", "lastName" FROM "users";

----------------------------------------

TITLE: Using sequelize.import with Callback for Model Definition in JavaScript (Deprecated)
DESCRIPTION: Shows an alternative way to use the deprecated sequelize.import method with a callback function for defining Sequelize models. This approach can be useful in certain frameworks or environments where the standard import method fails.

LANGUAGE: javascript
CODE:
sequelize.import('project', (sequelize, DataTypes) => {
  return sequelize.define('project', {
    name: DataTypes.STRING,
    description: DataTypes.TEXT,
  });
});

----------------------------------------

TITLE: Defining Circular Reference Models in Sequelize
DESCRIPTION: Demonstrates how to create Document and Version models with a circular reference relationship that initially causes a cyclic dependency error.

LANGUAGE: javascript
CODE:
const { Sequelize, Model, DataTypes } = require('sequelize');

class Document extends Model {}
Document.init(
  {
    author: DataTypes.STRING,
  },
  { sequelize, modelName: 'document' },
);

class Version extends Model {}
Version.init(
  {
    timestamp: DataTypes.DATE,
  },
  { sequelize, modelName: 'version' },
);

Document.hasMany(Version); // This adds documentId attribute to version
Document.belongsTo(Version, {
  as: 'Current',
  foreignKey: 'currentVersionId',
}); // This adds currentVersionId attribute to document

----------------------------------------

TITLE: Adding Custom Methods to Sequelize Models
DESCRIPTION: This example shows how to add custom instance and class-level methods to a Sequelize model in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
import { Model, InferCreationAttributes, InferAttributes } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';
import { Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  @NotNull
  declare firstname: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  declare lastname: string;

  instanceLevelMethod() {
    return 'bar';
  }

  getFullname() {
    return [this.firstname, this.lastname].join(' ');
  }

  static classLevelMethod() {
    return 'foo';
  }
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

console.log(User.classLevelMethod()); // 'foo'
const user = User.build({ firstname: 'Jane', lastname: 'Doe' });
console.log(user.instanceLevelMethod()); // 'bar'
console.log(user.getFullname()); // 'Jane Doe'

----------------------------------------

TITLE: Using sql.list for Array Values in Queries
DESCRIPTION: Demonstrates how to use sql.list to treat array values as SQL lists in queries.

LANGUAGE: typescript
CODE:
const statuses = ['active', 'pending'];

await sequelize.query(sql`SELECT * FROM projects WHERE status IN ${sql.list(statuses)}`);

----------------------------------------

TITLE: Using sequelize.import for Model Definition in JavaScript (Deprecated)
DESCRIPTION: Demonstrates how to use the deprecated sequelize.import method to define and import Sequelize models from separate files. This method only supports CommonJS modules and is not recommended for new projects.

LANGUAGE: javascript
CODE:
// in your server file - e.g. app.js
const Project = sequelize.import(__dirname + '/path/to/models/project');

// The model definition is done in /path/to/models/project.js
module.exports = (sequelize, DataTypes) => {
  return sequelize.define('project', {
    name: DataTypes.STRING,
    description: DataTypes.TEXT,
  });
};

----------------------------------------

TITLE: Simplified Node.js Event Loop Implementation
DESCRIPTION: Pseudo-implementation of the Node.js event loop to illustrate how it processes different types of operations and timers.

LANGUAGE: javascript
CODE:
const process = require('process');

let refs = 0;
const timersHeap = /* (...) */;
const immediates = /* (...) */;
const nextTickCallbacks = [];
const promiseCallbacksHeap = /* ... */;

function execTicksAndPromises() {
  while (nextTickCallbacks.length || promiseCallbacksHeap.size()) {
    while (nextTickCallbacks.length) {
      const callback = nextTickCallbacks.shift();
      callback();
    }

    while (promiseCallbacksHeap.size()) {
      const callback = promiseCallbacksHeap.pop();
      callback();
    }
  }
}

try {
  require('./index');
  execTicksAndPromises();

  do {
    getElapsedTimerCallbacks(timersHeap).forEach(callback => {
      callback();
      execTicksAndPromises();
    });

    getPendingCallbacks().forEach(callback => {
      callback();
      execTicksAndPromises();
    })

    const maxWait = computeWhenNextTimerElapses(timersHeap);
    pollForEventsFromKernelOrThreadPool(maxWait, immediates).forEach(callback => {
      callback();
      execTicksAndPromises();
    });

    getImmediateCallbacks(immediates).forEach(callback => {
      callback();
      execTicksAndPromises();
    });

    getCloseCallbacks().forEach(callback => {
      callback();
      execTicksAndPromises();
    });

    if (refs === 0) {
      process.emit('beforeExit');
    }
  } while (refs > 0);
} catch (err) {
  if (!process.listenerCount('uncaughtException')) {
    console.error(err.stack);
    process.exit(1);
  } else {
    process.emit('uncaughtException');
    process.exit();
  }
}

----------------------------------------

TITLE: Linking to Umzug Migration Tool in Markdown
DESCRIPTION: This snippet shows how to create a Markdown link to the Umzug migration tool, which is an alternative to Sequelize CLI and is used internally by Sequelize CLI.

LANGUAGE: markdown
CODE:
[Umzug](https://github.com/sequelize/umzug)

----------------------------------------

TITLE: Using Bind Parameters in Sequelize Queries
DESCRIPTION: Demonstrates how to use bind parameters in Sequelize queries, including positional and named bind parameters.

LANGUAGE: javascript
CODE:
import { QueryTypes } from '@sequelize/core';

// Positional bind parameters
await sequelize.query('SELECT * FROM projects WHERE status = $1', {
  bind: ['active'],
  type: QueryTypes.SELECT,
});

// Named bind parameters
await sequelize.query('SELECT * FROM projects WHERE status = $status', {
  bind: { status: 'active' },
  type: QueryTypes.SELECT,
});

// Bind parameters in other querying methods
await Project.findAll({
  where: {
    status: sql`$status`,
  },
  bind: { status: 'active' },
});

----------------------------------------

TITLE: Implementing Model-wide Validations in Sequelize
DESCRIPTION: Shows how to implement model-level validations that check multiple fields together, using a geographical coordinates example.

LANGUAGE: javascript
CODE:
class Place extends Model {}
Place.init({
  name: Sequelize.STRING,
  address: Sequelize.STRING,
  latitude: {
    type: DataTypes.INTEGER,
    validate: {
      min: -90,
      max: 90,
    },
  },
  longitude: {
    type: DataTypes.INTEGER,
    validate: {
      min: -180,
      max: 180,
    },
  },
}, {
  sequelize,
  validate: {
    bothCoordsOrNone() {
      if ((this.latitude === null) !== (this.longitude === null)) {
        throw new Error('Either both latitude and longitude, or neither!');
      }
    },
  },
});

----------------------------------------

TITLE: Configuring Read Replication in Sequelize
DESCRIPTION: Example of setting up read replication in Sequelize with multiple read replicas and a single write server. Demonstrates configuration of connection pools, credentials, and server endpoints for read/write operations.

LANGUAGE: javascript
CODE:
const sequelize = new Sequelize('database', null, null, {
  dialect: 'mysql',
  port: 3306,
  replication: {
    read: [
      {
        host: '8.8.8.8',
        username: 'read-1-username',
        password: process.env.READ_DB_1_PW,
      },
      {
        host: '9.9.9.9',
        username: 'read-2-username',
        password: process.env.READ_DB_2_PW,
      },
    ],
    write: {
      host: '1.1.1.1',
      username: 'write-username',
      password: process.env.WRITE_DB_PW,
    },
  },
  pool: {
    // If you want to override the options used for the read/write pool you can do so here
    max: 20,
    idle: 30000,
  },
});

----------------------------------------

TITLE: Manually Setting Column Name in Sequelize
DESCRIPTION: This example shows how to manually set a column name in Sequelize using the '@ColumnName' decorator, which takes precedence over other naming options.

LANGUAGE: typescript
CODE:
import { DataTypes, Model, InferAttributes, InferCreationAttributes } from '@sequelize/core';
import { Attribute, ColumnName } from '@sequelize/core/decorators-legacy';

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.STRING)
  @ColumnName('first_name')
  declare firstName: number;
}

----------------------------------------

TITLE: Creating Composite Unique Constraint in Sequelize Model
DESCRIPTION: This snippet illustrates how to create a composite unique constraint using the @Unique decorator with a shared name across multiple attributes.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Unique, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Unique('firstName-lastName')
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  @NotNull
  @Unique('firstName-lastName')
  declare lastName: string;
}

----------------------------------------

TITLE: Implementing Built-in Validators in Sequelize
DESCRIPTION: Demonstrates various built-in validators available in Sequelize including string validations, number ranges, and format checks.

LANGUAGE: javascript
CODE:
sequelize.define('foo', {
  bar: {
    type: DataTypes.STRING,
    validate: {
      is: /^[a-z]+$/i,
      isEmail: true,
      isUrl: true,
      isIP: true,
      isAlpha: true,
      isNumeric: true,
      len: [2,10],
      isEven(value) {
        if (parseInt(value) % 2 !== 0) {
          throw new Error('Only even values are allowed!');
        }
      }
    }
  }
});

----------------------------------------

TITLE: Handling Deep Mutations with Model.changed() in Sequelize v6
DESCRIPTION: Demonstrates incorrect and correct ways to handle deep mutations of model attributes with the changed() method.

LANGUAGE: javascript
CODE:
const instance = await MyModel.findOne();

// Sequelize will not detect this change
instance.jsonField.jsonProperty = 12345;

console.log(instance.changed()); // false

// You can workaround this by telling Sequelize the property changed:
instance.changed('jsonField', true);
console.log(instance.changed()); // true

LANGUAGE: javascript
CODE:
const instance = await MyModel.findOne();

// Sequelize will detect this change
instance.jsonField = {
  ...instance.jsonField,
  jsonProperty: 12345,
};

console.log(instance.changed()); // true

----------------------------------------

TITLE: Configuring Multiple Associations to Same Model in Sequelize TypeScript
DESCRIPTION: Demonstrates how to create multiple HasOne associations to the same model by naming inverse associations to avoid conflicts. Uses TypeScript decorators for model definition.

LANGUAGE: typescript
CODE:
class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @HasOne(() => DrivingLicense, {
    foreignKey: 'ownerId',
    inverse: {
      as: 'owner',
    },
  })
  declare currentDrivingLicense?: NonAttribute<DrivingLicense>;
}

----------------------------------------

TITLE: Creating Unique Index in Sequelize Model
DESCRIPTION: This snippet shows how to create a unique index using the unique option in the @Index decorator.

LANGUAGE: typescript
CODE:
import { Model, DataTypes } from '@sequelize/core';
import { Index, Attribute, NotNull } from '@sequelize/core/decorators-legacy';

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  @Index({ unique: true })
  declare email: string;
}

----------------------------------------

TITLE: Using Wildcard Operator in Sequelize Query Replacements with JavaScript
DESCRIPTION: Demonstrates how to use the wildcard operator in Sequelize query replacements for pattern matching.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');

await sequelize.query('SELECT * FROM users WHERE name LIKE :search_name', {
  replacements: { search_name: 'ben%' },
  type: QueryTypes.SELECT,
});

----------------------------------------

TITLE: Customizing Intermediary Associations in Sequelize BelongsToMany
DESCRIPTION: Example of customizing the names of intermediary associations created by BelongsToMany using the throughAssociations option.

LANGUAGE: typescript
CODE:
class Person extends Model<InferAttributes<Person>, InferCreationAttributes<Person>> {
  @BelongsToMany(() => Toot, {
    through: 'LikedToot',
    inverse: {
      as: 'likers',
    },
    throughAssociations: {
      fromSource: 'likedTootsLikers',
      toSource: 'liker',
      fromTarget: 'likersLikedToots',
      toTarget: 'likedToot',
    },
  })
  declare likedToots?: NonAttribute<Toot[]>;
}

----------------------------------------

TITLE: Using Attribute Decorators for Foreign Keys in Sequelize TypeScript
DESCRIPTION: Shows how to use attribute decorators to configure foreign keys with custom column names in related models.

LANGUAGE: typescript
CODE:
class Person extends Model {
  @HasOne(() => DrivingLicense, 'ownerId')
  declare drivingLicense?: NonAttribute<DrivingLicense>;
}

class DrivingLicense extends Model {
  @Attribute({
    columnName: 'owner_id',
  })
  declare ownerId: number;
}

----------------------------------------

TITLE: Defining Complex Multi-Column Index with createIndexDecorator
DESCRIPTION: This snippet shows how to use createIndexDecorator to define a complex multi-column index with shared options and attribute-specific options.

LANGUAGE: typescript
CODE:
const NameIndex = createIndexDecorator('NameIndex', {
  name: 'firstName-lastName',
  type: 'fulltext',
  concurrently: true,
});

class User extends Model {
  @Attribute(DataTypes.STRING)
  @NameIndex
  declare firstName: string;

  @Attribute(DataTypes.STRING)
  @NameIndex({ collate: 'case_insensitive' })
  declare lastName: string;
}

----------------------------------------

TITLE: Executing SELECT Query with Specific Query Type in JavaScript
DESCRIPTION: Shows how to execute a SELECT query using Sequelize with a specified query type to format the results directly.

LANGUAGE: javascript
CODE:
const { QueryTypes } = require('sequelize');
const users = await sequelize.query('SELECT * FROM `users`', {
  type: QueryTypes.SELECT,
});

----------------------------------------

TITLE: Customizing Foreign Keys in Sequelize TypeScript
DESCRIPTION: Demonstrates how to customize foreign key configuration including column naming. Shows object-based foreign key configuration with additional options.

LANGUAGE: typescript
CODE:
class Person extends Model {
  @HasOne(() => DrivingLicense, {
    foreignKey: {
      name: 'ownerId',
      columnName: 'owner_id',
    },
  })
  declare drivingLicense?: NonAttribute<DrivingLicense>;
}

----------------------------------------

TITLE: Entity Relationship Diagram for One-To-One Relationship
DESCRIPTION: Mermaid diagram showing the One-To-One relationship between people and driving licenses tables.

LANGUAGE: mermaid
CODE:
erDiagram
  people ||--o| driving_licenses : drivingLicense

----------------------------------------

TITLE: Implementing Custom Setter for Username in Sequelize Model
DESCRIPTION: Shows how to create a custom setter for the 'username' attribute that converts the input to uppercase before storing it.

LANGUAGE: typescript
CODE:
class User extends Model {
  @Attribute(DataTypes.STRING)
  @NotNull
  set username(value: string) {
    this.setDataValue('username', value.toUpperCase());
  }
}

----------------------------------------

TITLE: Executing Raw SQL Query with Sequelize in JavaScript
DESCRIPTION: Demonstrates how to execute a raw SQL UPDATE query using Sequelize's query method. The result includes both the query results and metadata.

LANGUAGE: javascript
CODE:
const [results, metadata] = await sequelize.query('UPDATE users SET y = 42 WHERE x = 12');

----------------------------------------

TITLE: Defining HasMany Association in Sequelize TypeScript
DESCRIPTION: Demonstrates how to define Post and Comment models with a HasMany association using Sequelize decorators in TypeScript.

LANGUAGE: typescript
CODE:
import {
  Model,
  DataTypes,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
  NonAttribute,
} from '@sequelize/core';
import {
  PrimaryKey,
  Attribute,
  AutoIncrement,
  NotNull,
  HasMany,
  BelongsTo,
} from '@sequelize/core/decorators-legacy';

class Post extends Model<InferAttributes<Post>, InferCreationAttributes<Post>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @HasMany(() => Comment, /* foreign key */ 'postId')
  declare comments?: NonAttribute<Comment[]>;
}

class Comment extends Model<InferAttributes<Comment>, InferCreationAttributes<Comment>> {
  @Attribute(DataTypes.INTEGER)
  @AutoIncrement
  @PrimaryKey
  declare id: CreationOptional<number>;

  @Attribute(DataTypes.INTEGER)
  @NotNull
  declare postId: number;
}

----------------------------------------

TITLE: Rendering Dialect Comparison Table with DialectTableFilter in JSX and Markdown
DESCRIPTION: This snippet demonstrates the use of the DialectTableFilter component to wrap a markdown table. The table compares UUID generation functions across different database dialects supported by Sequelize, including links to official documentation for each function where available.

LANGUAGE: jsx
CODE:
<DialectTableFilter>

|          | PostgreSQL                                                                                                                                                                                                                | MariaDB                                   | MySQL                                                                                        | MSSQL                                                                                                     | SQLite | Snowflake | db2 | ibmi |
| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- | ------ | --------- | --- | ---- |
| `uuidV1` | [`uuid_generate_v1`](https://www.postgresql.org/docs/current/uuid-ossp.html) (requires `uuid-ossp`)                                                                                                                       | [`UUID`](https://mariadb.com/kb/en/uuid/) | [`UUID`](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid) | N/A                                                                                                       | N/A    | N/A       | N/A | N/A  |
| `uuidV4` | **pg >= v13**: [`gen_random_uuid`](https://www.postgresql.org/docs/current/functions-uuid.html) <br/>**pg &lt; v13**: [`uuid_generate_v4`](https://www.postgresql.org/docs/current/uuid-ossp.html) (requires `uuid-ossp`) | N/A                                       | N/A                                                                                          | [`NEWID`](https://learn.microsoft.com/en-us/sql/t-sql/functions/newid-transact-sql?view=sql-server-ver16) | N/A    | N/A       | N/A | N/A  |

</DialectTableFilter>

----------------------------------------

TITLE: Configuring onDelete and onUpdate Behaviors in Sequelize TypeScript
DESCRIPTION: Demonstrates how to configure onDelete and onUpdate behaviors for foreign keys, including cascade operations and null handling.

LANGUAGE: typescript
CODE:
class Person extends Model {
  @HasOne(() => DrivingLicense, {
    foreignKey: {
      name: 'ownerId',
      onDelete: 'CASCADE',
      onUpdate: 'CASCADE',
    },
  })
  declare drivingLicense?: NonAttribute<DrivingLicense>;
}

----------------------------------------

TITLE: Querying Soft-Deleted Records in Sequelize
DESCRIPTION: Demonstrates how to query records with consideration for soft-deletion status, including how to explicitly include or exclude soft-deleted records in queries.

LANGUAGE: javascript
CODE:
await Post.findByPk(123); // This will return `null` if the record of id 123 is soft-deleted
await Post.findByPk(123, { paranoid: false }); // This will retrieve the record

await Post.findAll({
  where: { foo: 'bar' },
}); // This will not retrieve soft-deleted records

await Post.findAll({
  where: { foo: 'bar' },
  paranoid: false,
}); // This will also retrieve soft-deleted records

----------------------------------------

TITLE: Instance Reloading Example
DESCRIPTION: Shows how to reload an instance from the database to get the most up-to-date data.

LANGUAGE: javascript
CODE:
const jane = await User.create({ name: 'Jane' });
console.log(jane.name); // "Jane"
jane.name = 'Ada';
// the name is still "Jane" in the database
await jane.reload();
console.log(jane.name); // "Jane"

----------------------------------------

TITLE: Hook Removal Example
DESCRIPTION: Shows how to remove hooks using removeListener with either callback reference or hook identifier.

LANGUAGE: javascript
CODE:
class Book extends Model {}
Book.init(
  {
    title: DataTypes.STRING,
  },
  { sequelize },
);

const myListener = (book, options) => {
  // ...
};

Book.hooks.addListener('afterCreate', 'yourHookIdentifier', myListener);

// Both of these will remove the hook:
Book.hooks.removeListener('afterCreate', myListener);
Book.hooks.removeListener('afterCreate', 'yourHookIdentifier');

----------------------------------------

TITLE: Setting Up Sequelize for Local Testing in JavaScript
DESCRIPTION: Provides a basic setup for running Sequelize code examples locally using SQLite in-memory database. Useful for quick experimentation and learning.

LANGUAGE: js
CODE:
const { Sequelize, Op, Model, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

// Code here! It works!

----------------------------------------

TITLE: Performing Soft and Hard Deletions in Sequelize
DESCRIPTION: Demonstrates how to perform both soft-deletions (setting deletedAt timestamp) and hard-deletions (actual record removal) using static and instance methods.

LANGUAGE: javascript
CODE:
await Post.destroy({
  where: {
    id: 1,
  },
});

LANGUAGE: javascript
CODE:
await Post.destroy({
  where: {
    id: 1,
  },
  force: true,
});

LANGUAGE: javascript
CODE:
const post = await Post.create({ title: 'test' });
console.log(post instanceof Post); // true
await post.destroy(); // Would just set the `deletedAt` flag
await post.destroy({ force: true }); // Would really delete the record

----------------------------------------

TITLE: Installing PostgreSQL Dialect Package
DESCRIPTION: Command to install the PostgreSQL dialect package for Sequelize

LANGUAGE: bash
CODE:
npm i @sequelize/postgres

----------------------------------------

TITLE: Adding a Column with Query Interface in Sequelize
DESCRIPTION: Demonstrates how to add a new column 'petName' to the 'Person' table using the Query Interface. Includes the generated SQL for SQLite.

LANGUAGE: javascript
CODE:
queryInterface.addColumn('Person', 'petName', { type: DataTypes.STRING });

LANGUAGE: sql
CODE:
ALTER TABLE `Person` ADD `petName` VARCHAR(255);

----------------------------------------

TITLE: Using Native Upsert in Sequelize v6
DESCRIPTION: Shows how to use the native upsert functionality that is now supported across all dialects in Sequelize v6.

LANGUAGE: javascript
CODE:
const [instance, created] = await MyModel.upsert({});

----------------------------------------

TITLE: Creating or Finding Entry in Sequelize (JavaScript)
DESCRIPTION: Demonstrates the use of findOrCreate method to either find an existing entry or create a new one if it doesn't exist. It shows how to use 'where' and 'defaults' options and handle the returned values.

LANGUAGE: javascript
CODE:
const [user, created] = await User.findOrCreate({
  where: { username: 'sdepold' },
  defaults: {
    job: 'Technical Lead JavaScript',
  },
});
console.log(user.username); // 'sdepold'
console.log(user.job); // This may or may not be 'Technical Lead JavaScript'
console.log(created); // The boolean indicating whether this instance was just created
if (created) {
  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'
}

----------------------------------------

TITLE: Installing SQLite Dialect Package for Sequelize
DESCRIPTION: Command to install the @sequelize/sqlite dialect package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @sequelize/sqlite3

----------------------------------------

TITLE: Changing Column Datatype with Query Interface in Sequelize
DESCRIPTION: Shows how to change the datatype of a column 'foo' in the 'Person' table using the Query Interface. Includes the generated SQL for MySQL.

LANGUAGE: javascript
CODE:
queryInterface.changeColumn('Person', 'foo', {
  type: DataTypes.FLOAT,
  defaultValue: 3.14,
  allowNull: false,
});

LANGUAGE: sql
CODE:
ALTER TABLE `Person` CHANGE `foo` `foo` FLOAT NOT NULL DEFAULT 3.14;

----------------------------------------

TITLE: Sequelize Dynamic Configuration
DESCRIPTION: Example of a dynamic configuration file for Sequelize using environment variables and custom options.

LANGUAGE: javascript
CODE:
const fs = require('fs');

module.exports = {
  development: {
    username: 'database_dev',
    password: 'database_dev',
    database: 'database_dev',
    host: '127.0.0.1',
    port: 3306,
    dialect: 'mysql',
    dialectOptions: {
      bigNumberStrings: true,
    },
  },
  test: {
    username: process.env.CI_DB_USERNAME,
    password: process.env.CI_DB_PASSWORD,
    database: process.env.CI_DB_NAME,
    host: '127.0.0.1',
    port: 3306,
    dialect: 'mysql',
    dialectOptions: {
      bigNumberStrings: true,
    },
  },
  production: {
    username: process.env.PROD_DB_USERNAME,
    password: process.env.PROD_DB_PASSWORD,
    database: process.env.PROD_DB_NAME,
    host: process.env.PROD_DB_HOSTNAME,
    port: process.env.PROD_DB_PORT,
    dialect: 'mysql',
    dialectOptions: {
      bigNumberStrings: true,
      ssl: {
        ca: fs.readFileSync(__dirname + '/mysql-ca-main.crt'),
      },
    },
  },
};

----------------------------------------

TITLE: Selecting All Users from Database
DESCRIPTION: Shows how to retrieve all user records from the database using Sequelize's findAll method. This example demonstrates a basic SELECT query.

LANGUAGE: javascript
CODE:
const users = await User.findAll();
console.log(users.every(user => user instanceof User)); // true
console.log('All users:', JSON.stringify(users, null, 2));

LANGUAGE: sql
CODE:
SELECT * FROM ...

----------------------------------------

TITLE: Installing Sequelize v7 via npm
DESCRIPTION: Command to install the latest alpha release of Sequelize 7 using npm.

LANGUAGE: bash
CODE:
# This will install Sequelize 7, the latest alpha release of Sequelize
npm i @sequelize/core@alpha

----------------------------------------

TITLE: Removing a Column with Query Interface in Sequelize
DESCRIPTION: Demonstrates how to remove a column 'petName' from the 'Person' table using the Query Interface. Includes the generated SQL for PostgreSQL.

LANGUAGE: javascript
CODE:
queryInterface.removeColumn('Person', 'petName', {
  /* query options */
});

LANGUAGE: sql
CODE:
ALTER TABLE "public"."Person" DROP COLUMN "petName";

----------------------------------------

TITLE: Workaround for Module Import Issues in Meteor with sequelize.import (Deprecated)
DESCRIPTION: Demonstrates a workaround for using the deprecated sequelize.import method in Meteor or similar frameworks that overload the require function, causing module import errors.

LANGUAGE: javascript
CODE:
// If this fails...
const AuthorModel = db.import('./path/to/models/project');

// Try this instead!
const AuthorModel = db.import('project', require('./path/to/models/project'));

----------------------------------------

TITLE: Defining Sequelize Model using sequelize.define()
DESCRIPTION: Demonstrates how to define a User model using the sequelize.define() method with basic attributes firstName and lastName.

LANGUAGE: javascript
CODE:
const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize('sqlite::memory:');

const User = sequelize.define(
  'User',
  {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false
    },
    lastName: {
      type: DataTypes.STRING
    }
  },
  {
  }
);

console.log(User === sequelize.models.User);

----------------------------------------

TITLE: Changing Table Engine for a Sequelize Model (JavaScript)
DESCRIPTION: Demonstrates how to change the database engine for a specific model in MySQL or MariaDB using Sequelize.

LANGUAGE: javascript
CODE:
const Person = sequelize.define(
  'person',
  {
    /* attributes */
  },
  {
    engine: 'MYISAM',
  },
);

----------------------------------------

TITLE: Retrieving Primary Key Attributes from a Sequelize Model in TypeScript
DESCRIPTION: This snippet demonstrates a utility function that takes a Sequelize Model class and returns the list of attributes that are part of the model's primary key. It also includes an example of defining a User model and using the utility function.

LANGUAGE: typescript
CODE:
import {
  ModelStatic,
  ModelAttributeColumnOptions,
  Model,
  InferAttributes,
  InferCreationAttributes,
  CreationOptional,
} from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

/**
 * Returns the list of attributes that are part of the model's primary key.
 */
export function getPrimaryKeyAttributes(model: ModelStatic<any>): NormalizedAttributeOptions[] {
  const attributes: NormalizedAttributeOptions[] = [];

  for (const attribute of model.modelDefinition.attributes.values()) {
    if (attribute.primaryKey) {
      attributes.push(attribute);
    }
  }

  return attributes;
}

class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {
  @Attribute(DataTypes.INTEGER)
  @PrimaryKey
  @AutoIncrement
  declare id: CreationOptional<number>;
}

const sequelize = new Sequelize({
  dialect: SqliteDialect,
  models: [User],
});

const primaryAttributes = getPrimaryKeyAttributes(User);

----------------------------------------

TITLE: Defining a Custom Getter in Sequelize Model
DESCRIPTION: This snippet demonstrates how to define a custom getter for a username attribute that converts the value to uppercase. It uses the getDataValue method to avoid infinite loops.

LANGUAGE: javascript
CODE:
const User = sequelize.define('user', {
  username: {
    type: DataTypes.STRING,
    get() {
      const rawValue = this.getDataValue('username');
      return rawValue ? rawValue.toUpperCase() : null;
    },
  },
});

----------------------------------------

TITLE: Importing MobileAds Component in React
DESCRIPTION: Imports and renders the MobileAds component from a custom path.

LANGUAGE: jsx
CODE:
import { MobileAds } from '@site/src/components/mobile-ads';

<MobileAds />

----------------------------------------

TITLE: Deploying Documentation with SSH
DESCRIPTION: Command for deploying the documentation website using SSH authentication.

LANGUAGE: bash
CODE:
USE_SSH=true yarn deploy

----------------------------------------

TITLE: Eager Loading with Many-to-Many Relationships in Sequelize
DESCRIPTION: Demonstrates how to perform eager loading on models with Many-to-Many relationships, including junction table data.

LANGUAGE: javascript
CODE:
const Foo = sequelize.define('Foo', { name: DataTypes.TEXT });
const Bar = sequelize.define('Bar', { name: DataTypes.TEXT });
Foo.belongsToMany(Bar, { through: 'Foo_Bar' });
Bar.belongsToMany(Foo, { through: 'Foo_Bar' });

await sequelize.sync();
const foo = await Foo.create({ name: 'foo' });
const bar = await Bar.create({ name: 'bar' });
await foo.addBar(bar);
const fetchedFoo = await Foo.findOne({ include: Bar });
console.log(JSON.stringify(fetchedFoo, null, 2));

----------------------------------------

TITLE: Database Connection Using URL - v7 Style
DESCRIPTION: Demonstrates how to connect using a URL string in Sequelize v7

LANGUAGE: typescript
CODE:
import { Sequelize } from '@sequelize/core';
import { PostgresDialect } from '@sequelize/postgres';

const sequelize = new Sequelize({
  dialect: PostgresDialect,
  url: 'postgres://user:password@localhost:5432/database',
});

----------------------------------------

TITLE: Deploying Documentation without SSH
DESCRIPTION: Command for deploying the documentation website using GitHub username authentication.

LANGUAGE: bash
CODE:
GIT_USER=<Your GitHub username> yarn deploy

----------------------------------------

TITLE: Creating HasMany Associations with Aliases in Sequelize
DESCRIPTION: This snippet demonstrates how to create a HasMany association with an alias between Product and Tag models, and then use it to create a Product instance with multiple associated Tag instances, referred to by the alias.

LANGUAGE: javascript
CODE:
const Categories = Product.hasMany(Tag, { as: 'categories' });

Product.create(
  {
    id: 1,
    title: 'Chair',
    categories: [
      { id: 1, name: 'Alpha' },
      { id: 2, name: 'Beta' },
    ],
  },
  {
    include: [
      {
        association: Categories,
        as: 'categories',
      },
    ],
  },
);

----------------------------------------

TITLE: Changing Columns in SQLite with Query Interface in Sequelize
DESCRIPTION: Illustrates the process of changing a column in SQLite, which requires recreating the table. Shows both the JavaScript code and the generated SQL queries.

LANGUAGE: javascript
CODE:
// Assuming we have a table in SQLite created as follows:
queryInterface.createTable('Person', {
  name: DataTypes.STRING,
  isBetaMember: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    allowNull: false,
  },
  petName: DataTypes.STRING,
  foo: DataTypes.INTEGER,
});

// And we change a column:
queryInterface.changeColumn('Person', 'foo', {
  type: DataTypes.FLOAT,
  defaultValue: 3.14,
  allowNull: false,
});

LANGUAGE: sql
CODE:
PRAGMA TABLE_INFO(`Person`);

CREATE TABLE IF NOT EXISTS `Person_backup` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,
  `foo` FLOAT NOT NULL DEFAULT '3.14',
  `petName` VARCHAR(255)
);

INSERT INTO `Person_backup`
  SELECT
    `name`,
    `isBetaMember`,
    `foo`,
    `petName`
  FROM `Person`;

DROP TABLE `Person`;

CREATE TABLE IF NOT EXISTS `Person` (
  `name` VARCHAR(255),
  `isBetaMember` TINYINT(1) NOT NULL DEFAULT 0,
  `foo` FLOAT NOT NULL DEFAULT '3.14',
  `petName` VARCHAR(255)
);

INSERT INTO `Person`
  SELECT
    `name`,
    `isBetaMember`,
    `foo`,
    `petName`
  FROM `Person_backup`;

DROP TABLE `Person_backup`;

----------------------------------------

TITLE: Creating Nested Associations in Sequelize
DESCRIPTION: This snippet shows how to create a new Product instance with nested User and Address associations in a single step using Sequelize's create method with the include option.

LANGUAGE: javascript
CODE:
return Product.create(
  {
    title: 'Chair',
    user: {
      firstName: 'Mick',
      lastName: 'Broadstone',
      addresses: [
        {
          type: 'home',
          line1: '100 Main St.',
          city: 'Austin',
          state: 'TX',
          zip: '78704',
        },
      ],
    },
  },
  {
    include: [
      {
        association: Product.User,
        include: [User.Addresses],
      },
    ],
  },
);

----------------------------------------

TITLE: Combining Getters and Setters in Sequelize Model
DESCRIPTION: This snippet demonstrates how to combine getters and setters for a content attribute that compresses and decompresses data using gzip. It uses the zlib library for compression.

LANGUAGE: javascript
CODE:
const { gzipSync, gunzipSync } = require('zlib');

const Post = sequelize.define('post', {
  content: {
    type: DataTypes.TEXT,
    get() {
      const storedValue = this.getDataValue('content');
      const gzippedBuffer = Buffer.from(storedValue, 'base64');
      const unzippedBuffer = gunzipSync(gzippedBuffer);
      return unzippedBuffer.toString();
    },
    set(value) {
      const gzippedBuffer = gzipSync(value);
      this.setDataValue('content', gzippedBuffer.toString('base64'));
    },
  },
});

----------------------------------------

TITLE: Alternative Implementation Using Standard Scopes in Sequelize
DESCRIPTION: Shows an alternative approach to achieve the same behavior using standard model scopes instead of association scopes. Demonstrates scope definition and association setup.

LANGUAGE: javascript
CODE:
Bar.addScope('open', {
  where: {
    status: 'open',
  },
});
Foo.hasMany(Bar);
Foo.hasMany(Bar.scope('open'), { as: 'openBars' });

----------------------------------------

TITLE: Installing Sequelize Documentation Dependencies
DESCRIPTION: Commands for installing local dependencies using yarn and downloading the sequelize repository for documentation generation.

LANGUAGE: bash
CODE:
# install local dependencies using yarn
yarn

# download the sequelize repository (used for including tested code snippets & generating jsdoc)
yarn sync

----------------------------------------

TITLE: Initializing Basic One-to-Many Association Scope in Sequelize
DESCRIPTION: Demonstrates setting up models Foo and Bar with a scoped hasMany association that automatically filters for open status. Shows both model definition and association setup with scope.

LANGUAGE: javascript
CODE:
const Foo = sequelize.define('foo', { name: DataTypes.STRING });
const Bar = sequelize.define('bar', { status: DataTypes.STRING });
Foo.hasMany(Bar, {
  scope: {
    status: 'open',
  },
  as: 'openBars',
});
await sequelize.sync();
const myFoo = await Foo.create({ name: 'My Foo' });

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start the local development server that provides live preview of documentation changes.

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Creating Super Many-to-Many Relationship
DESCRIPTION: Implementation of a Super Many-to-Many relationship pattern that combines belongsToMany with hasMany/belongsTo associations.

LANGUAGE: javascript
CODE:
// The Super Many-to-Many relationship
User.belongsToMany(Profile, { through: Grant });
Profile.belongsToMany(User, { through: Grant });
User.hasMany(Grant);
Grant.belongsTo(User);
Profile.hasMany(Grant);
Grant.belongsTo(Profile);

----------------------------------------

TITLE: Connecting to PostgreSQL - v7 vs v6 Comparison
DESCRIPTION: Shows the differences in database connection configuration between Sequelize v6 and v7

LANGUAGE: typescript
CODE:
// Sequelize v7
import { Sequelize } from '@sequelize/core';
import { PostgresDialect } from '@sequelize/postgres';

const sequelize = new Sequelize({
  dialect: PostgresDialect,
  database: 'database',
  user: 'user',
  password: 'password',
  host: 'localhost',
  port: 5432,
  ssl: true,
});

----------------------------------------

TITLE: Importing Sequelize Core and Dialect - v7 Style
DESCRIPTION: Demonstrates the new scoped module imports and dialect separation in Sequelize v7

LANGUAGE: javascript
CODE:
import { Sequelize } from '@sequelize/core';
import { SqliteDialect } from '@sequelize/sqlite3';

const sequelize = new Sequelize({ dialect: SqliteDialect });

await sequelize.authenticate();

----------------------------------------

TITLE: Using ENUM Data Type in Sequelize
DESCRIPTION: Shows how to define an ENUM data type with allowed values 'foo' and 'bar'.

LANGUAGE: javascript
CODE:
DataTypes.ENUM('foo', 'bar');

----------------------------------------

TITLE: Configuring CLS with cls-hooked in Sequelize v6
DESCRIPTION: Example showing how to set up CLS (Continuation Local Storage) support using the cls-hooked package in Sequelize v6.

LANGUAGE: javascript
CODE:
const cls = require('cls-hooked');
const namespace = cls.createNamespace('....');
const Sequelize = require('sequelize');

Sequelize.useCLS(namespace);